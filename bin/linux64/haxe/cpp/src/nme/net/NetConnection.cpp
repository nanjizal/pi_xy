// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_NetStatusEvent
#include <nme/events/NetStatusEvent.h>
#endif
#ifndef INCLUDED_nme_net_NetConnection
#include <nme/net/NetConnection.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d8c8dc611bc8c3b9_21_new,"nme.net.NetConnection","new",0x76a645b4,"nme.net.NetConnection.new","nme/net/NetConnection.hx",21,0xd54c24be)
HX_LOCAL_STACK_FRAME(_hx_pos_d8c8dc611bc8c3b9_28_connect,"nme.net.NetConnection","connect",0x5c59eb3e,"nme.net.NetConnection.connect","nme/net/NetConnection.hx",28,0xd54c24be)
HX_LOCAL_STACK_FRAME(_hx_pos_d8c8dc611bc8c3b9_35_close,"nme.net.NetConnection","close",0xd03c8a0c,"nme.net.NetConnection.close","nme/net/NetConnection.hx",35,0xd54c24be)
HX_LOCAL_STACK_FRAME(_hx_pos_d8c8dc611bc8c3b9_37_get_connected,"nme.net.NetConnection","get_connected",0xa52c9cf4,"nme.net.NetConnection.get_connected","nme/net/NetConnection.hx",37,0xd54c24be)
HX_LOCAL_STACK_FRAME(_hx_pos_d8c8dc611bc8c3b9_38_get_proxyType,"nme.net.NetConnection","get_proxyType",0xaa4a9673,"nme.net.NetConnection.get_proxyType","nme/net/NetConnection.hx",38,0xd54c24be)
HX_LOCAL_STACK_FRAME(_hx_pos_d8c8dc611bc8c3b9_39_set_proxyType,"nme.net.NetConnection","set_proxyType",0xef50787f,"nme.net.NetConnection.set_proxyType","nme/net/NetConnection.hx",39,0xd54c24be)
HX_LOCAL_STACK_FRAME(_hx_pos_d8c8dc611bc8c3b9_10_boot,"nme.net.NetConnection","boot",0x52efb85e,"nme.net.NetConnection.boot","nme/net/NetConnection.hx",10,0xd54c24be)
namespace nme{
namespace net{

void NetConnection_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d8c8dc611bc8c3b9_21_new)
HXLINE(  22)		super::__construct(null());
HXLINE(  23)		this->objectEncoding = 0;
HXLINE(  24)		this->connectedProxyType = HX_("",00,00,00,00);
HXLINE(  25)		this->usingTLS = false;
            	}

Dynamic NetConnection_obj::__CreateEmpty() { return new NetConnection_obj; }

void *NetConnection_obj::_hx_vtable = 0;

Dynamic NetConnection_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NetConnection_obj > _hx_result = new NetConnection_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NetConnection_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x169017a6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x169017a6;
	} else {
		return inClassId==(int)0x5dee5684;
	}
}

void NetConnection_obj::connect(::String command, ::Dynamic p1, ::Dynamic p2, ::Dynamic p3, ::Dynamic p4, ::Dynamic p5){
            	HX_GC_STACKFRAME(&_hx_pos_d8c8dc611bc8c3b9_28_connect)
HXLINE(  29)		this->uri = command;
HXLINE(  30)		bool _hx_tmp;
HXDLIN(  30)		if (::hx::IsNotNull( this->uri )) {
HXLINE(  30)			_hx_tmp = (this->uri == HX_("",00,00,00,00));
            		}
            		else {
HXLINE(  30)			_hx_tmp = true;
            		}
HXDLIN(  30)		if (_hx_tmp) {
HXLINE(  31)			this->dispatchEvent( ::nme::events::NetStatusEvent_obj::__alloc( HX_CTX ,HX_("netStatus",6f,4f,ec,46),false,false, ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("code",2d,b1,c4,41),HX_("NetConnection.Connect.Success",4c,91,a7,41))
            				->setFixed(1,HX_("level",84,15,63,72),HX_("status",32,e7,fb,05)))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC6(NetConnection_obj,connect,(void))

void NetConnection_obj::close(){
            	HX_STACKFRAME(&_hx_pos_d8c8dc611bc8c3b9_35_close)
            	}


HX_DEFINE_DYNAMIC_FUNC0(NetConnection_obj,close,(void))

bool NetConnection_obj::get_connected(){
            	HX_STACKFRAME(&_hx_pos_d8c8dc611bc8c3b9_37_get_connected)
HXDLIN(  37)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(NetConnection_obj,get_connected,return )

::String NetConnection_obj::get_proxyType(){
            	HX_STACKFRAME(&_hx_pos_d8c8dc611bc8c3b9_38_get_proxyType)
HXDLIN(  38)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC0(NetConnection_obj,get_proxyType,return )

::String NetConnection_obj::set_proxyType(::String inType){
            	HX_STACKFRAME(&_hx_pos_d8c8dc611bc8c3b9_39_set_proxyType)
HXDLIN(  39)		return inType;
            	}


HX_DEFINE_DYNAMIC_FUNC1(NetConnection_obj,set_proxyType,return )

int NetConnection_obj::defaultObjectEncoding;


::hx::ObjectPtr< NetConnection_obj > NetConnection_obj::__new() {
	::hx::ObjectPtr< NetConnection_obj > __this = new NetConnection_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< NetConnection_obj > NetConnection_obj::__alloc(::hx::Ctx *_hx_ctx) {
	NetConnection_obj *__this = (NetConnection_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NetConnection_obj), true, "nme.net.NetConnection"));
	*(void **)__this = NetConnection_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

NetConnection_obj::NetConnection_obj()
{
}

void NetConnection_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NetConnection);
	HX_MARK_MEMBER_NAME(client,"client");
	HX_MARK_MEMBER_NAME(connected,"connected");
	HX_MARK_MEMBER_NAME(objectEncoding,"objectEncoding");
	HX_MARK_MEMBER_NAME(uri,"uri");
	HX_MARK_MEMBER_NAME(connectedProxyType,"connectedProxyType");
	HX_MARK_MEMBER_NAME(usingTLS,"usingTLS");
	 ::nme::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NetConnection_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(client,"client");
	HX_VISIT_MEMBER_NAME(connected,"connected");
	HX_VISIT_MEMBER_NAME(objectEncoding,"objectEncoding");
	HX_VISIT_MEMBER_NAME(uri,"uri");
	HX_VISIT_MEMBER_NAME(connectedProxyType,"connectedProxyType");
	HX_VISIT_MEMBER_NAME(usingTLS,"usingTLS");
	 ::nme::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val NetConnection_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uri") ) { return ::hx::Val( uri ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"client") ) { return ::hx::Val( client ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"connect") ) { return ::hx::Val( connect_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"usingTLS") ) { return ::hx::Val( usingTLS ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_connected() : connected ); }
		if (HX_FIELD_EQ(inName,"proxyType") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_proxyType() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_connected") ) { return ::hx::Val( get_connected_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_proxyType") ) { return ::hx::Val( get_proxyType_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_proxyType") ) { return ::hx::Val( set_proxyType_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"objectEncoding") ) { return ::hx::Val( objectEncoding ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"connectedProxyType") ) { return ::hx::Val( connectedProxyType ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val NetConnection_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"uri") ) { uri=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"client") ) { client=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"usingTLS") ) { usingTLS=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"connected") ) { connected=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"proxyType") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_proxyType(inValue.Cast< ::String >()) ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"objectEncoding") ) { objectEncoding=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"connectedProxyType") ) { connectedProxyType=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NetConnection_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("client",4b,ca,4f,0a));
	outFields->push(HX_("connected",c9,e2,f6,a2));
	outFields->push(HX_("objectEncoding",b2,1e,15,2a));
	outFields->push(HX_("uri",6c,2b,59,00));
	outFields->push(HX_("connectedProxyType",3f,b8,7c,50));
	outFields->push(HX_("proxyType",48,dc,14,a8));
	outFields->push(HX_("usingTLS",17,2d,14,68));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NetConnection_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(NetConnection_obj,client),HX_("client",4b,ca,4f,0a)},
	{::hx::fsBool,(int)offsetof(NetConnection_obj,connected),HX_("connected",c9,e2,f6,a2)},
	{::hx::fsInt,(int)offsetof(NetConnection_obj,objectEncoding),HX_("objectEncoding",b2,1e,15,2a)},
	{::hx::fsString,(int)offsetof(NetConnection_obj,uri),HX_("uri",6c,2b,59,00)},
	{::hx::fsString,(int)offsetof(NetConnection_obj,connectedProxyType),HX_("connectedProxyType",3f,b8,7c,50)},
	{::hx::fsBool,(int)offsetof(NetConnection_obj,usingTLS),HX_("usingTLS",17,2d,14,68)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo NetConnection_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &NetConnection_obj::defaultObjectEncoding,HX_("defaultObjectEncoding",53,fb,eb,ff)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String NetConnection_obj_sMemberFields[] = {
	HX_("client",4b,ca,4f,0a),
	HX_("connected",c9,e2,f6,a2),
	HX_("objectEncoding",b2,1e,15,2a),
	HX_("uri",6c,2b,59,00),
	HX_("connectedProxyType",3f,b8,7c,50),
	HX_("usingTLS",17,2d,14,68),
	HX_("connect",ea,3b,80,15),
	HX_("close",b8,17,63,48),
	HX_("get_connected",a0,b6,5a,64),
	HX_("get_proxyType",1f,b0,78,69),
	HX_("set_proxyType",2b,92,7e,ae),
	::String(null()) };

static void NetConnection_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NetConnection_obj::defaultObjectEncoding,"defaultObjectEncoding");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NetConnection_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NetConnection_obj::defaultObjectEncoding,"defaultObjectEncoding");
};

#endif

::hx::Class NetConnection_obj::__mClass;

static ::String NetConnection_obj_sStaticFields[] = {
	HX_("defaultObjectEncoding",53,fb,eb,ff),
	::String(null())
};

void NetConnection_obj::__register()
{
	NetConnection_obj _hx_dummy;
	NetConnection_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.net.NetConnection",c2,9b,44,16);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NetConnection_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(NetConnection_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NetConnection_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NetConnection_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NetConnection_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NetConnection_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NetConnection_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NetConnection_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d8c8dc611bc8c3b9_10_boot)
HXDLIN(  10)		defaultObjectEncoding = 0;
            	}
}

} // end namespace nme
} // end namespace net
