// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_events_EventDispatcher
#define INCLUDED_nme_events_EventDispatcher

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(nme,events,Event)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,events,Listener)

namespace nme{
namespace events{


class HXCPP_CLASS_ATTRIBUTES EventDispatcher_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef EventDispatcher_obj OBJ_;
		EventDispatcher_obj();

	public:
		enum { _hx_ClassId = 0x169017a6 };

		void __construct(::Dynamic target);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.events.EventDispatcher")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.events.EventDispatcher"); }
		static ::hx::ObjectPtr< EventDispatcher_obj > __new(::Dynamic target);
		static ::hx::ObjectPtr< EventDispatcher_obj > __alloc(::hx::Ctx *_hx_ctx,::Dynamic target);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~EventDispatcher_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("EventDispatcher",41,82,63,5e); }

		static int sortEvents( ::nme::events::Listener a, ::nme::events::Listener b);
		static ::Dynamic sortEvents_dyn();

		 ::haxe::ds::StringMap nmeEventMap;
		::Dynamic nmeTarget;
		virtual void addEventListener(::String type, ::Dynamic listener,::hx::Null< bool >  useCapture,::hx::Null< int >  priority,::hx::Null< bool >  useWeakReference);
		::Dynamic addEventListener_dyn();

		bool mightRespondTo(::String type);
		::Dynamic mightRespondTo_dyn();

		void DispatchCompleteEvent();
		::Dynamic DispatchCompleteEvent_dyn();

		virtual bool dispatchEvent( ::nme::events::Event event);
		::Dynamic dispatchEvent_dyn();

		void DispatchIOErrorEvent();
		::Dynamic DispatchIOErrorEvent_dyn();

		bool hasEventListener(::String type);
		::Dynamic hasEventListener_dyn();

		void removeEventListener(::String type, ::Dynamic listener,::hx::Null< bool >  capture);
		::Dynamic removeEventListener_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		bool willTrigger(::String type);
		::Dynamic willTrigger_dyn();

};

} // end namespace nme
} // end namespace events

#endif /* INCLUDED_nme_events_EventDispatcher */ 
