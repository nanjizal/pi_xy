// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_image_PixelFormat
#define INCLUDED_nme_image_PixelFormat

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nme,image,PixelFormat)

namespace nme{
namespace image{


class HXCPP_CLASS_ATTRIBUTES PixelFormat_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef PixelFormat_obj OBJ_;
		PixelFormat_obj();

	public:
		enum { _hx_ClassId = 0x2ac6a4a4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nme.image.PixelFormat")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"nme.image.PixelFormat"); }

		inline static ::hx::ObjectPtr< PixelFormat_obj > __new() {
			::hx::ObjectPtr< PixelFormat_obj > __this = new PixelFormat_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< PixelFormat_obj > __alloc(::hx::Ctx *_hx_ctx) {
			PixelFormat_obj *__this = (PixelFormat_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PixelFormat_obj), false, "nme.image.PixelFormat"));
			*(void **)__this = PixelFormat_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PixelFormat_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PixelFormat",3d,0a,4e,53); }

		static void __boot();
		static int pfNone;
		static int pfRGB;
		static int pfBGRA;
		static int pfBGRPremA;
		static int pfAlpha;
		static int pfRenderToCount;
		static int pfLuma;
		static int pfLumaAlpha;
		static int pfRGB32f;
		static int pfRGBA32f;
		static int pfRGBPremA;
		static int pfRGBA;
		static int pfUInt16;
		static int pfUInt32;
		static int channelCount(int inFormat);
		static ::Dynamic channelCount_dyn();

		static int getPixelSize(int inFormat);
		static ::Dynamic getPixelSize_dyn();

};

} // end namespace nme
} // end namespace image

#endif /* INCLUDED_nme_image_PixelFormat */ 
