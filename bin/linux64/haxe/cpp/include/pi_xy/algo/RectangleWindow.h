// Generated by Haxe 4.3.3
#ifndef INCLUDED_pi_xy_algo_RectangleWindow
#define INCLUDED_pi_xy_algo_RectangleWindow

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_8459a505ab59cc74_14_new)
HX_DECLARE_CLASS2(pi_xy,algo,RectangleWindow)

namespace pi_xy{
namespace algo{


class HXCPP_CLASS_ATTRIBUTES RectangleWindow_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef RectangleWindow_obj OBJ_;
		RectangleWindow_obj();

	public:
		enum { _hx_ClassId = 0x0e75db85 };

		void __construct(Float x,Float y,Float width,Float height);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pi_xy.algo.RectangleWindow")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pi_xy.algo.RectangleWindow"); }

		inline static ::hx::ObjectPtr< RectangleWindow_obj > __new(Float x,Float y,Float width,Float height) {
			::hx::ObjectPtr< RectangleWindow_obj > __this = new RectangleWindow_obj();
			__this->__construct(x,y,width,height);
			return __this;
		}

		inline static ::hx::ObjectPtr< RectangleWindow_obj > __alloc(::hx::Ctx *_hx_ctx,Float x,Float y,Float width,Float height) {
			RectangleWindow_obj *__this = (RectangleWindow_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RectangleWindow_obj), false, "pi_xy.algo.RectangleWindow"));
			*(void **)__this = RectangleWindow_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_8459a505ab59cc74_14_new)
HXLINE(  15)		( ( ::pi_xy::algo::RectangleWindow)(__this) )->x = x;
HXLINE(  16)		( ( ::pi_xy::algo::RectangleWindow)(__this) )->y = y;
HXLINE(  17)		( ( ::pi_xy::algo::RectangleWindow)(__this) )->width = width;
HXLINE(  18)		( ( ::pi_xy::algo::RectangleWindow)(__this) )->height = height;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~RectangleWindow_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("RectangleWindow",5f,b1,f1,ae); }

		static  ::pi_xy::algo::RectangleWindow minMax(Float x,Float y,Float maxX,Float maxY);
		static ::Dynamic minMax_dyn();

		Float x;
		Float y;
		Float width;
		Float height;
};

} // end namespace pi_xy
} // end namespace algo

#endif /* INCLUDED_pi_xy_algo_RectangleWindow */ 
