// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_RectangleForm
#include <pi_xy/triangleGML/RectangleForm.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_BasicShape
#include <pi_xy/triangleGML/triGML/BasicShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_FillForm
#include <pi_xy/triangleGML/triGML/FillForm.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_GroupShape
#include <pi_xy/triangleGML/triGML/GroupShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_ShapeInterface
#include <pi_xy/triangleGML/triGML/ShapeInterface.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_shape_form_RectangleForm_
#include <pi_xy/triangleGML/triGML/shape/form/RectangleForm_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9a8e871049b3f3fb_7_new,"pi_xy.triangleGML.RectangleForm","new",0x924f12ae,"pi_xy.triangleGML.RectangleForm.new","pi_xy/triangleGML/RectangleForm.hx",7,0x9e617e04)
HX_LOCAL_STACK_FRAME(_hx_pos_9a8e871049b3f3fb_8_render,"pi_xy.triangleGML.RectangleForm","render",0x75b20dc8,"pi_xy.triangleGML.RectangleForm.render","pi_xy/triangleGML/RectangleForm.hx",8,0x9e617e04)
namespace pi_xy{
namespace triangleGML{

void RectangleForm_obj::__construct( ::Dynamic opacity, ::Dynamic visibility, ::Dynamic strokeColor, ::Dynamic strokeWidth,::Array< ::String > strokeDashGapArray, ::Dynamic fill, ::Dynamic left, ::Dynamic top, ::Dynamic width, ::Dynamic height, ::Dynamic rounded){
            	HX_STACKFRAME(&_hx_pos_9a8e871049b3f3fb_7_new)
HXDLIN(   7)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,fill,left,top,width,height,rounded);
            	}

Dynamic RectangleForm_obj::__CreateEmpty() { return new RectangleForm_obj; }

void *RectangleForm_obj::_hx_vtable = 0;

Dynamic RectangleForm_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RectangleForm_obj > _hx_result = new RectangleForm_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool RectangleForm_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4f186619) {
		if (inClassId<=(int)0x3a62b55f) {
			if (inClassId<=(int)0x1a0bd5c0) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x1a0bd5c0;
			} else {
				return inClassId==(int)0x3a62b55f;
			}
		} else {
			return inClassId==(int)0x4f186619;
		}
	} else {
		return inClassId==(int)0x515a3d9c || inClassId==(int)0x7ff8cec5;
	}
}

 ::Dynamic RectangleForm_obj::render( ::Dynamic _tmp_pixelImage){
            	HX_GC_STACKFRAME(&_hx_pos_9a8e871049b3f3fb_8_render)
HXLINE(   9)		 ::pi_xy::ImageStruct pixelImage = ( ( ::pi_xy::ImageStruct)(_tmp_pixelImage) );
HXDLIN(   9)		if ((this->rounded == false)) {
HXLINE(  11)			int width = ::Math_obj::ceil(this->width);
HXDLIN(  11)			int height = ::Math_obj::ceil(this->height);
HXDLIN(  11)			 ::Dynamic imageType = null();
HXDLIN(  11)			 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  11)			if (::hx::IsNull( imageType )) {
HXLINE(  54)				imageType = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE(  11)			::Dynamic _hx_tmp;
HXDLIN(  11)			switch((int)(( (int)(imageType) ))){
            				case (int)0: {
HXLINE(  11)					 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  11)					 ::iterMagic::BytesImg b = byt;
HXDLIN(  11)					{
HXLINE(  11)						b->width = width;
HXDLIN(  11)						b->height = height;
HXDLIN(  11)						b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  11)						b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  11)						{
HXLINE(  11)							int len = b->length;
HXDLIN(  11)							int w = 0;
HXDLIN(  11)							{
HXLINE(  11)								int _g = 0;
HXDLIN(  11)								int _g1 = b->height;
HXDLIN(  11)								while((_g < _g1)){
HXLINE(  11)									_g = (_g + 1);
HXDLIN(  11)									int y = (_g - 1);
HXDLIN(  11)									{
HXLINE(  11)										int _g2 = 0;
HXDLIN(  11)										int _g3 = b->width;
HXDLIN(  11)										while((_g2 < _g3)){
HXLINE(  11)											_g2 = (_g2 + 1);
HXDLIN(  11)											int x = (_g2 - 1);
HXDLIN(  11)											{
HXLINE(  11)												w = (w + 1);
HXDLIN(  11)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  11)											{
HXLINE(  11)												w = (w + 1);
HXDLIN(  11)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  11)											{
HXLINE(  11)												w = (w + 1);
HXDLIN(  11)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  11)											{
HXLINE(  11)												w = (w + 1);
HXDLIN(  11)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  11)					_hx_tmp = b;
            				}
            				break;
            				case (int)1: {
HXLINE(  11)					 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  11)					 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  11)					{
HXLINE(  11)						a->width = width;
HXDLIN(  11)						a->height = height;
HXDLIN(  11)						a->data = ::Array_obj< int >::__new(0);
HXDLIN(  11)						a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  11)						{
HXLINE(  11)							int _g4 = 0;
HXDLIN(  11)							int _g5 = a->length;
HXDLIN(  11)							while((_g4 < _g5)){
HXLINE(  11)								_g4 = (_g4 + 1);
HXDLIN(  11)								int i = (_g4 - 1);
HXDLIN(  11)								a->data[i] = 0;
            							}
            						}
            					}
HXDLIN(  11)					_hx_tmp = a;
            				}
            				break;
            				case (int)2: {
HXLINE(  11)					 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  11)					 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  11)					{
HXLINE(  11)						b1->width = width;
HXDLIN(  11)						b1->height = height;
HXDLIN(  11)						b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  11)						int size = (b1->length * 4);
HXDLIN(  11)						b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  11)						{
HXLINE(  11)							int _g6 = 0;
HXDLIN(  11)							int _g7 = b1->length;
HXDLIN(  11)							while((_g6 < _g7)){
HXLINE(  11)								_g6 = (_g6 + 1);
HXDLIN(  11)								int i1 = (_g6 - 1);
HXDLIN(  11)								{
HXLINE(  11)									 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN(  11)									bool _hx_tmp1;
HXDLIN(  11)									if ((i1 >= 0)) {
HXLINE(  11)										_hx_tmp1 = (i1 < (this2->byteLength >> 2));
            									}
            									else {
HXLINE(  11)										_hx_tmp1 = false;
            									}
HXDLIN(  11)									if (_hx_tmp1) {
HXLINE(  11)										 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  11)										int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN(  11)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  11)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  11)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  11)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN(  11)					_hx_tmp = b1;
            				}
            				break;
            				case (int)3: {
HXLINE(  11)					 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  11)					 ::iterMagic::VecIntImg v = vec;
HXDLIN(  11)					{
HXLINE(  11)						v->width = width;
HXDLIN(  11)						v->height = height;
HXDLIN(  11)						v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  11)						v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  11)						{
HXLINE(  11)							int _g8 = 0;
HXDLIN(  11)							int _g9 = v->length;
HXDLIN(  11)							while((_g8 < _g9)){
HXLINE(  11)								_g8 = (_g8 + 1);
HXDLIN(  11)								int i2 = (_g8 - 1);
HXDLIN(  11)								v->data->__unsafe_set(i2,0);
            							}
            						}
            					}
HXDLIN(  11)					_hx_tmp = v;
            				}
            				break;
            				case (int)4: {
HXLINE(  11)					 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  11)					 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  11)					{
HXLINE(  11)						b2->width = width;
HXDLIN(  11)						b2->height = height;
HXDLIN(  11)						b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  11)						b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  11)						{
HXLINE(  11)							int len1 = b2->length;
HXDLIN(  11)							 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  11)							if (::hx::IsNull( d->head )) {
HXLINE(  11)								int _g10 = 0;
HXDLIN(  11)								int _g11 = len1;
HXDLIN(  11)								while((_g10 < _g11)){
HXLINE(  11)									_g10 = (_g10 + 1);
HXDLIN(  11)									int i3 = (_g10 - 1);
HXDLIN(  11)									d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            								}
            							}
            							else {
HXLINE(  11)								int _g12 = 0;
HXDLIN(  11)								int _g13 = len1;
HXDLIN(  11)								while((_g12 < _g13)){
HXLINE(  11)									_g12 = (_g12 + 1);
HXDLIN(  11)									int i4 = (_g12 - 1);
HXDLIN(  11)									{
HXLINE(  11)										 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  11)										 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  11)										{
HXLINE(  11)											int _g14 = 0;
HXDLIN(  11)											int _g15 = i4;
HXDLIN(  11)											while((_g14 < _g15)){
HXLINE(  11)												_g14 = (_g14 + 1);
HXDLIN(  11)												int i5 = (_g14 - 1);
HXLINE( 345)												prev = l;
HXLINE( 346)												l = l->next;
            											}
            										}
HXLINE(  11)										if (::hx::IsNull( prev )) {
HXLINE(  11)											b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  11)											l = null();
            										}
            										else {
HXLINE(  11)											prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  11)											l = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  11)					_hx_tmp = b2;
            				}
            				break;
            			}
HXDLIN(  11)			this1->image = _hx_tmp;
HXDLIN(  11)			this1->width = width;
HXDLIN(  11)			this1->height = height;
HXDLIN(  11)			this1->imageType = ( (int)(imageType) );
HXDLIN(  11)			 ::pi_xy::ImageStruct temp = this1;
HXLINE(  12)			temp->transparent = false;
HXLINE(  13)			{
HXLINE(  13)				Float h = this->height;
HXDLIN(  13)				int color = this->strokeColor;
HXDLIN(  13)				int r_x = 0;
HXDLIN(  13)				int r_y = 0;
HXDLIN(  13)				int r_w = ::Std_obj::_hx_int(this->width);
HXDLIN(  13)				int r_h = ::Std_obj::_hx_int(h);
HXDLIN(  13)				int xmax = ((r_x + r_w) + 1);
HXDLIN(  13)				int ymax = ((r_y + r_h) + 1);
HXDLIN(  13)				int ii_min = r_x;
HXDLIN(  13)				int ii_max = xmax;
HXDLIN(  13)				int xRange__start = ii_min;
HXDLIN(  13)				int xRange__max = ii_max;
HXDLIN(  13)				int ii_min1 = r_y;
HXDLIN(  13)				int ii_max1 = ymax;
HXDLIN(  13)				int yRange__start = ii_min1;
HXDLIN(  13)				int yRange__max = ii_max1;
HXDLIN(  13)				int range_x = xRange__start;
HXDLIN(  13)				int range_y = (yRange__start - 1);
HXDLIN(  13)				int range_xReset = range_x;
HXDLIN(  13)				int range_yReset = range_y;
HXDLIN(  13)				int range_xMax = (xRange__max - 2);
HXDLIN(  13)				int range_yMax = (yRange__max - 2);
HXDLIN(  13)				int _this_min = 0;
HXDLIN(  13)				int _this_max = ::Std_obj::_hx_int(( (Float)(((xRange__max - xRange__start) * (yRange__max - yRange__start))) ));
HXDLIN(  13)				while((_this_min < _this_max)){
HXLINE(  13)					_this_min = (_this_min + 1);
HXDLIN(  13)					int i6 = (_this_min - 1);
HXDLIN(  13)					if ((range_y > range_yMax)) {
HXLINE(  13)						range_y = range_yReset;
HXDLIN(  13)						range_x = (range_x + 1);
            					}
HXDLIN(  13)					range_y = (range_y + 1);
HXDLIN(  13)					int i7 = i6;
HXDLIN(  13)					{
HXLINE(  13)						int x1 = range_x;
HXDLIN(  13)						int y1 = range_y;
HXDLIN(  13)						int c = color;
HXDLIN(  13)						bool _hx_tmp2;
HXDLIN(  13)						if ((((c >> 24) & 255) < 254)) {
HXLINE(  13)							_hx_tmp2 = temp->transparent;
            						}
            						else {
HXLINE(  13)							_hx_tmp2 = false;
            						}
HXDLIN(  13)						if (_hx_tmp2) {
HXLINE(  13)							int location;
HXDLIN(  13)							if (temp->useVirtualPos) {
HXLINE(  13)								location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - temp->virtualY) * ( (Float)(temp->width) )) + x1) - temp->virtualX));
            							}
            							else {
HXLINE(  13)								location = ::Std_obj::_hx_int(( (Float)(((y1 * temp->width) + x1)) ));
            							}
HXDLIN(  13)							int this3 = ::iterMagic::Iimg_obj::get(temp->image,location);
HXDLIN(  13)							int this4;
HXDLIN(  13)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  13)								this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            							}
            							else {
HXLINE(  13)								this4 = this3;
            							}
HXDLIN(  13)							Float a1;
HXDLIN(  13)							int this5 = ((this4 >> 24) & 255);
HXDLIN(  13)							if ((this5 == 0)) {
HXLINE(  13)								a1 = ((Float)0.);
            							}
            							else {
HXLINE(  13)								a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            							}
HXDLIN(  13)							Float r1;
HXDLIN(  13)							int this6 = ((this4 >> 16) & 255);
HXDLIN(  13)							if ((this6 == 0)) {
HXLINE(  13)								r1 = ((Float)0.);
            							}
            							else {
HXLINE(  13)								r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN(  13)							Float g1;
HXDLIN(  13)							int this7 = ((this4 >> 8) & 255);
HXDLIN(  13)							if ((this7 == 0)) {
HXLINE(  13)								g1 = ((Float)0.);
            							}
            							else {
HXLINE(  13)								g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN(  13)							Float b11;
HXDLIN(  13)							int this8 = (this4 & 255);
HXDLIN(  13)							if ((this8 == 0)) {
HXLINE(  13)								b11 = ((Float)0.);
            							}
            							else {
HXLINE(  13)								b11 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN(  13)							Float a2;
HXDLIN(  13)							int this9 = ((color >> 24) & 255);
HXDLIN(  13)							if ((this9 == 0)) {
HXLINE(  13)								a2 = ((Float)0.);
            							}
            							else {
HXLINE(  13)								a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN(  13)							Float r2;
HXDLIN(  13)							int this10 = ((color >> 16) & 255);
HXDLIN(  13)							if ((this10 == 0)) {
HXLINE(  13)								r2 = ((Float)0.);
            							}
            							else {
HXLINE(  13)								r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN(  13)							Float g2;
HXDLIN(  13)							int this11 = ((color >> 8) & 255);
HXDLIN(  13)							if ((this11 == 0)) {
HXLINE(  13)								g2 = ((Float)0.);
            							}
            							else {
HXLINE(  13)								g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN(  13)							Float b21;
HXDLIN(  13)							int this12 = (color & 255);
HXDLIN(  13)							if ((this12 == 0)) {
HXLINE(  13)								b21 = ((Float)0.);
            							}
            							else {
HXLINE(  13)								b21 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN(  13)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  13)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  13)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  13)							int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  13)							int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  13)							int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  13)							{
HXLINE(  13)								int _hx_tmp3;
HXDLIN(  13)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  13)									_hx_tmp3 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE(  13)									_hx_tmp3 = blended;
            								}
HXDLIN(  13)								::iterMagic::Iimg_obj::set(temp->image,location,_hx_tmp3);
            							}
            						}
            						else {
HXLINE(  13)							::Dynamic this13 = temp->image;
HXDLIN(  13)							int index;
HXDLIN(  13)							if (temp->useVirtualPos) {
HXLINE(  13)								index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - temp->virtualY) * ( (Float)(temp->width) )) + x1) - temp->virtualX));
            							}
            							else {
HXLINE(  13)								index = ::Std_obj::_hx_int(( (Float)(((y1 * temp->width) + x1)) ));
            							}
HXDLIN(  13)							int _hx_tmp4;
HXDLIN(  13)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  13)								_hx_tmp4 = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  13)								_hx_tmp4 = c;
            							}
HXDLIN(  13)							::iterMagic::Iimg_obj::set(this13,index,_hx_tmp4);
            						}
            					}
            				}
            			}
HXLINE(  14)			{
HXLINE(  14)				Float y2 = this->strokeWidth;
HXDLIN(  14)				Float w1 = (this->width - (( (Float)(2) ) * this->strokeWidth));
HXDLIN(  14)				Float h1 = (this->height - (( (Float)(2) ) * this->strokeWidth));
HXDLIN(  14)				int color1 = this->fill;
HXDLIN(  14)				int r_x1 = ::Std_obj::_hx_int(this->strokeWidth);
HXDLIN(  14)				int r_y1 = ::Std_obj::_hx_int(y2);
HXDLIN(  14)				int r_w1 = ::Std_obj::_hx_int(w1);
HXDLIN(  14)				int r_h1 = ::Std_obj::_hx_int(h1);
HXDLIN(  14)				int xmax1 = ((r_x1 + r_w1) + 1);
HXDLIN(  14)				int ymax1 = ((r_y1 + r_h1) + 1);
HXDLIN(  14)				int ii_min2 = r_x1;
HXDLIN(  14)				int ii_max2 = xmax1;
HXDLIN(  14)				int xRange__start1 = ii_min2;
HXDLIN(  14)				int xRange__max1 = ii_max2;
HXDLIN(  14)				int ii_min3 = r_y1;
HXDLIN(  14)				int ii_max3 = ymax1;
HXDLIN(  14)				int yRange__start1 = ii_min3;
HXDLIN(  14)				int yRange__max1 = ii_max3;
HXDLIN(  14)				int range_x1 = xRange__start1;
HXDLIN(  14)				int range_y1 = (yRange__start1 - 1);
HXDLIN(  14)				int range_xReset1 = range_x1;
HXDLIN(  14)				int range_yReset1 = range_y1;
HXDLIN(  14)				int range_xMax1 = (xRange__max1 - 2);
HXDLIN(  14)				int range_yMax1 = (yRange__max1 - 2);
HXDLIN(  14)				int _this_min1 = 0;
HXDLIN(  14)				int _this_max1 = ::Std_obj::_hx_int(( (Float)(((xRange__max1 - xRange__start1) * (yRange__max1 - yRange__start1))) ));
HXDLIN(  14)				while((_this_min1 < _this_max1)){
HXLINE(  14)					_this_min1 = (_this_min1 + 1);
HXDLIN(  14)					int i8 = (_this_min1 - 1);
HXDLIN(  14)					if ((range_y1 > range_yMax1)) {
HXLINE(  14)						range_y1 = range_yReset1;
HXDLIN(  14)						range_x1 = (range_x1 + 1);
            					}
HXDLIN(  14)					range_y1 = (range_y1 + 1);
HXDLIN(  14)					int i9 = i8;
HXDLIN(  14)					{
HXLINE(  14)						int x2 = range_x1;
HXDLIN(  14)						int y3 = range_y1;
HXDLIN(  14)						int c1 = color1;
HXDLIN(  14)						bool _hx_tmp5;
HXDLIN(  14)						if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  14)							_hx_tmp5 = temp->transparent;
            						}
            						else {
HXLINE(  14)							_hx_tmp5 = false;
            						}
HXDLIN(  14)						if (_hx_tmp5) {
HXLINE(  14)							int location1;
HXDLIN(  14)							if (temp->useVirtualPos) {
HXLINE(  14)								location1 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - temp->virtualY) * ( (Float)(temp->width) )) + x2) - temp->virtualX));
            							}
            							else {
HXLINE(  14)								location1 = ::Std_obj::_hx_int(( (Float)(((y3 * temp->width) + x2)) ));
            							}
HXDLIN(  14)							int this14 = ::iterMagic::Iimg_obj::get(temp->image,location1);
HXDLIN(  14)							int this15;
HXDLIN(  14)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  14)								this15 = ((((((this14 >> 24) & 255) << 24) | ((this14 & 255) << 16)) | (((this14 >> 8) & 255) << 8)) | ((this14 >> 16) & 255));
            							}
            							else {
HXLINE(  14)								this15 = this14;
            							}
HXDLIN(  14)							Float a11;
HXDLIN(  14)							int this16 = ((this15 >> 24) & 255);
HXDLIN(  14)							if ((this16 == 0)) {
HXLINE(  14)								a11 = ((Float)0.);
            							}
            							else {
HXLINE(  14)								a11 = (( (Float)(this16) ) / ( (Float)(255) ));
            							}
HXDLIN(  14)							Float r11;
HXDLIN(  14)							int this17 = ((this15 >> 16) & 255);
HXDLIN(  14)							if ((this17 == 0)) {
HXLINE(  14)								r11 = ((Float)0.);
            							}
            							else {
HXLINE(  14)								r11 = (( (Float)(this17) ) / ( (Float)(255) ));
            							}
HXDLIN(  14)							Float g11;
HXDLIN(  14)							int this18 = ((this15 >> 8) & 255);
HXDLIN(  14)							if ((this18 == 0)) {
HXLINE(  14)								g11 = ((Float)0.);
            							}
            							else {
HXLINE(  14)								g11 = (( (Float)(this18) ) / ( (Float)(255) ));
            							}
HXDLIN(  14)							Float b12;
HXDLIN(  14)							int this19 = (this15 & 255);
HXDLIN(  14)							if ((this19 == 0)) {
HXLINE(  14)								b12 = ((Float)0.);
            							}
            							else {
HXLINE(  14)								b12 = (( (Float)(this19) ) / ( (Float)(255) ));
            							}
HXDLIN(  14)							Float a21;
HXDLIN(  14)							int this20 = ((color1 >> 24) & 255);
HXDLIN(  14)							if ((this20 == 0)) {
HXLINE(  14)								a21 = ((Float)0.);
            							}
            							else {
HXLINE(  14)								a21 = (( (Float)(this20) ) / ( (Float)(255) ));
            							}
HXDLIN(  14)							Float r21;
HXDLIN(  14)							int this21 = ((color1 >> 16) & 255);
HXDLIN(  14)							if ((this21 == 0)) {
HXLINE(  14)								r21 = ((Float)0.);
            							}
            							else {
HXLINE(  14)								r21 = (( (Float)(this21) ) / ( (Float)(255) ));
            							}
HXDLIN(  14)							Float g21;
HXDLIN(  14)							int this22 = ((color1 >> 8) & 255);
HXDLIN(  14)							if ((this22 == 0)) {
HXLINE(  14)								g21 = ((Float)0.);
            							}
            							else {
HXLINE(  14)								g21 = (( (Float)(this22) ) / ( (Float)(255) ));
            							}
HXDLIN(  14)							Float b22;
HXDLIN(  14)							int this23 = (color1 & 255);
HXDLIN(  14)							if ((this23 == 0)) {
HXLINE(  14)								b22 = ((Float)0.);
            							}
            							else {
HXLINE(  14)								b22 = (( (Float)(this23) ) / ( (Float)(255) ));
            							}
HXDLIN(  14)							Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  14)							int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  14)							int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  14)							int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  14)							int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  14)							int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  14)							{
HXLINE(  14)								int _hx_tmp6;
HXDLIN(  14)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  14)									_hx_tmp6 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            								}
            								else {
HXLINE(  14)									_hx_tmp6 = blended1;
            								}
HXDLIN(  14)								::iterMagic::Iimg_obj::set(temp->image,location1,_hx_tmp6);
            							}
            						}
            						else {
HXLINE(  14)							::Dynamic this24 = temp->image;
HXDLIN(  14)							int index1;
HXDLIN(  14)							if (temp->useVirtualPos) {
HXLINE(  14)								index1 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - temp->virtualY) * ( (Float)(temp->width) )) + x2) - temp->virtualX));
            							}
            							else {
HXLINE(  14)								index1 = ::Std_obj::_hx_int(( (Float)(((y3 * temp->width) + x2)) ));
            							}
HXDLIN(  14)							int _hx_tmp7;
HXDLIN(  14)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  14)								_hx_tmp7 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            							}
            							else {
HXLINE(  14)								_hx_tmp7 = c1;
            							}
HXDLIN(  14)							::iterMagic::Iimg_obj::set(this24,index1,_hx_tmp7);
            						}
            					}
            				}
            			}
HXLINE(  15)			{
HXLINE(  15)				int x3 = ::Std_obj::_hx_int((this->left + this->offX));
HXDLIN(  15)				int y4 = ::Std_obj::_hx_int((this->top + this->offY));
HXDLIN(  15)				bool forceClear = false;
HXDLIN(  15)				{
HXLINE(  15)					int _g16 = 0;
HXDLIN(  15)					int _g17 = temp->height;
HXDLIN(  15)					while((_g16 < _g17)){
HXLINE(  15)						_g16 = (_g16 + 1);
HXDLIN(  15)						int dy = (_g16 - 1);
HXDLIN(  15)						{
HXLINE(  15)							int _g18 = 0;
HXDLIN(  15)							int _g19 = temp->width;
HXDLIN(  15)							while((_g18 < _g19)){
HXLINE(  15)								_g18 = (_g18 + 1);
HXDLIN(  15)								int dx = (_g18 - 1);
HXDLIN(  15)								::Dynamic this25 = temp->image;
HXDLIN(  15)								int index2;
HXDLIN(  15)								if (temp->useVirtualPos) {
HXLINE(  15)									index2 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            								}
            								else {
HXLINE(  15)									index2 = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            								}
HXDLIN(  15)								int c2 = ::iterMagic::Iimg_obj::get(this25,index2);
HXDLIN(  15)								int col;
HXDLIN(  15)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  15)									col = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            								}
            								else {
HXLINE(  15)									col = c2;
            								}
HXDLIN(  15)								bool _hx_tmp8;
HXDLIN(  15)								if (temp->useMask) {
HXLINE(  15)									_hx_tmp8 = ::hx::IsNotNull( temp->mask );
            								}
            								else {
HXLINE(  15)									_hx_tmp8 = false;
            								}
HXDLIN(  15)								if (_hx_tmp8) {
HXLINE(  15)									 ::pi_xy::ImageStruct this26 = temp->mask;
HXDLIN(  15)									::Dynamic this27 = this26->image;
HXDLIN(  15)									int index3;
HXDLIN(  15)									if (this26->useVirtualPos) {
HXLINE(  15)										index3 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this26->virtualY) * ( (Float)(this26->width) )) + dx) - this26->virtualX));
            									}
            									else {
HXLINE(  15)										index3 = ::Std_obj::_hx_int(( (Float)(((dy * this26->width) + dx)) ));
            									}
HXDLIN(  15)									int c3 = ::iterMagic::Iimg_obj::get(this27,index3);
HXDLIN(  15)									int v1;
HXDLIN(  15)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  15)										v1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXLINE(  15)										v1 = c3;
            									}
HXDLIN(  15)									int maskPixel = v1;
HXDLIN(  15)									int this28 = col;
HXDLIN(  15)									if ((maskPixel == 0)) {
HXLINE(  15)										col = this28;
            									}
            									else {
HXLINE(  15)										Float m0;
HXDLIN(  15)										int this29 = ((maskPixel >> 24) & 255);
HXDLIN(  15)										if ((this29 == 0)) {
HXLINE(  15)											m0 = ((Float)0.);
            										}
            										else {
HXLINE(  15)											m0 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN(  15)										Float m1;
HXDLIN(  15)										int this30 = ((maskPixel >> 16) & 255);
HXDLIN(  15)										if ((this30 == 0)) {
HXLINE(  15)											m1 = ((Float)0.);
            										}
            										else {
HXLINE(  15)											m1 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN(  15)										Float m2;
HXDLIN(  15)										int this31 = ((maskPixel >> 8) & 255);
HXDLIN(  15)										if ((this31 == 0)) {
HXLINE(  15)											m2 = ((Float)0.);
            										}
            										else {
HXLINE(  15)											m2 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN(  15)										Float m3;
HXDLIN(  15)										int this32 = (maskPixel & 255);
HXDLIN(  15)										if ((this32 == 0)) {
HXLINE(  15)											m3 = ((Float)0.);
            										}
            										else {
HXLINE(  15)											m3 = (( (Float)(this32) ) / ( (Float)(255) ));
            										}
HXDLIN(  15)										int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this28 >> 24) & 255)) )));
HXDLIN(  15)										int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this28 >> 16) & 255)) )));
HXDLIN(  15)										int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this28 >> 8) & 255)) )));
HXDLIN(  15)										int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this28 & 255)) )));
HXDLIN(  15)										col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN(  15)								if ((col != 0)) {
HXLINE(  15)									int x4 = (x3 + dx);
HXDLIN(  15)									int y5 = (y4 + dy);
HXDLIN(  15)									int c4 = col;
HXDLIN(  15)									bool _hx_tmp9;
HXDLIN(  15)									if ((((c4 >> 24) & 255) < 254)) {
HXLINE(  15)										_hx_tmp9 = pixelImage->transparent;
            									}
            									else {
HXLINE(  15)										_hx_tmp9 = false;
            									}
HXDLIN(  15)									if (_hx_tmp9) {
HXLINE(  15)										int location2;
HXDLIN(  15)										if (pixelImage->useVirtualPos) {
HXLINE(  15)											location2 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x4) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  15)											location2 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x4)) ));
            										}
HXDLIN(  15)										int this33 = ::iterMagic::Iimg_obj::get(pixelImage->image,location2);
HXDLIN(  15)										int this34;
HXDLIN(  15)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  15)											this34 = ((((((this33 >> 24) & 255) << 24) | ((this33 & 255) << 16)) | (((this33 >> 8) & 255) << 8)) | ((this33 >> 16) & 255));
            										}
            										else {
HXLINE(  15)											this34 = this33;
            										}
HXDLIN(  15)										Float a12;
HXDLIN(  15)										int this35 = ((this34 >> 24) & 255);
HXDLIN(  15)										if ((this35 == 0)) {
HXLINE(  15)											a12 = ((Float)0.);
            										}
            										else {
HXLINE(  15)											a12 = (( (Float)(this35) ) / ( (Float)(255) ));
            										}
HXDLIN(  15)										Float r12;
HXDLIN(  15)										int this36 = ((this34 >> 16) & 255);
HXDLIN(  15)										if ((this36 == 0)) {
HXLINE(  15)											r12 = ((Float)0.);
            										}
            										else {
HXLINE(  15)											r12 = (( (Float)(this36) ) / ( (Float)(255) ));
            										}
HXDLIN(  15)										Float g12;
HXDLIN(  15)										int this37 = ((this34 >> 8) & 255);
HXDLIN(  15)										if ((this37 == 0)) {
HXLINE(  15)											g12 = ((Float)0.);
            										}
            										else {
HXLINE(  15)											g12 = (( (Float)(this37) ) / ( (Float)(255) ));
            										}
HXDLIN(  15)										Float b13;
HXDLIN(  15)										int this38 = (this34 & 255);
HXDLIN(  15)										if ((this38 == 0)) {
HXLINE(  15)											b13 = ((Float)0.);
            										}
            										else {
HXLINE(  15)											b13 = (( (Float)(this38) ) / ( (Float)(255) ));
            										}
HXDLIN(  15)										Float a22;
HXDLIN(  15)										int this39 = ((col >> 24) & 255);
HXDLIN(  15)										if ((this39 == 0)) {
HXLINE(  15)											a22 = ((Float)0.);
            										}
            										else {
HXLINE(  15)											a22 = (( (Float)(this39) ) / ( (Float)(255) ));
            										}
HXDLIN(  15)										Float r22;
HXDLIN(  15)										int this40 = ((col >> 16) & 255);
HXDLIN(  15)										if ((this40 == 0)) {
HXLINE(  15)											r22 = ((Float)0.);
            										}
            										else {
HXLINE(  15)											r22 = (( (Float)(this40) ) / ( (Float)(255) ));
            										}
HXDLIN(  15)										Float g22;
HXDLIN(  15)										int this41 = ((col >> 8) & 255);
HXDLIN(  15)										if ((this41 == 0)) {
HXLINE(  15)											g22 = ((Float)0.);
            										}
            										else {
HXLINE(  15)											g22 = (( (Float)(this41) ) / ( (Float)(255) ));
            										}
HXDLIN(  15)										Float b23;
HXDLIN(  15)										int this42 = (col & 255);
HXDLIN(  15)										if ((this42 == 0)) {
HXLINE(  15)											b23 = ((Float)0.);
            										}
            										else {
HXLINE(  15)											b23 = (( (Float)(this42) ) / ( (Float)(255) ));
            										}
HXDLIN(  15)										Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  15)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  15)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  15)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  15)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  15)										int blended2 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN(  15)										{
HXLINE(  15)											int _hx_tmp10;
HXDLIN(  15)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  15)												_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            											}
            											else {
HXLINE(  15)												_hx_tmp10 = blended2;
            											}
HXDLIN(  15)											::iterMagic::Iimg_obj::set(pixelImage->image,location2,_hx_tmp10);
            										}
            									}
            									else {
HXLINE(  15)										::Dynamic this43 = pixelImage->image;
HXDLIN(  15)										int index4;
HXDLIN(  15)										if (pixelImage->useVirtualPos) {
HXLINE(  15)											index4 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x4) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  15)											index4 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + x4)) ));
            										}
HXDLIN(  15)										int _hx_tmp11;
HXDLIN(  15)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  15)											_hx_tmp11 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXLINE(  15)											_hx_tmp11 = c4;
            										}
HXDLIN(  15)										::iterMagic::Iimg_obj::set(this43,index4,_hx_tmp11);
            									}
            								}
            								else {
HXLINE(  15)									if (forceClear) {
HXLINE(  15)										::Dynamic this44 = pixelImage->image;
HXDLIN(  15)										int x5 = (x3 + dx);
HXDLIN(  15)										int y6 = (y4 + dy);
HXDLIN(  15)										int index5;
HXDLIN(  15)										if (pixelImage->useVirtualPos) {
HXLINE(  15)											index5 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  15)											index5 = ::Std_obj::_hx_int(( (Float)(((y6 * pixelImage->width) + x5)) ));
            										}
HXDLIN(  15)										::iterMagic::Iimg_obj::set(this44,index5,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(  16)			temp = null();
            		}
            		else {
HXLINE(  18)			int width1 = ::Math_obj::ceil(this->width);
HXDLIN(  18)			int height1 = ::Math_obj::ceil(this->height);
HXDLIN(  18)			 ::Dynamic imageType1 = null();
HXDLIN(  18)			 ::pi_xy::ImageStruct this45 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  18)			if (::hx::IsNull( imageType1 )) {
HXLINE(  54)				imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE(  18)			::Dynamic _hx_tmp12;
HXDLIN(  18)			switch((int)(( (int)(imageType1) ))){
            				case (int)0: {
HXLINE(  18)					 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  18)					 ::iterMagic::BytesImg b6 = byt1;
HXDLIN(  18)					{
HXLINE(  18)						b6->width = width1;
HXDLIN(  18)						b6->height = height1;
HXDLIN(  18)						b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  18)						b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN(  18)						{
HXLINE(  18)							int len2 = b6->length;
HXDLIN(  18)							int w2 = 0;
HXDLIN(  18)							{
HXLINE(  18)								int _g20 = 0;
HXDLIN(  18)								int _g21 = b6->height;
HXDLIN(  18)								while((_g20 < _g21)){
HXLINE(  18)									_g20 = (_g20 + 1);
HXDLIN(  18)									int y7 = (_g20 - 1);
HXDLIN(  18)									{
HXLINE(  18)										int _g22 = 0;
HXDLIN(  18)										int _g23 = b6->width;
HXDLIN(  18)										while((_g22 < _g23)){
HXLINE(  18)											_g22 = (_g22 + 1);
HXDLIN(  18)											int x6 = (_g22 - 1);
HXDLIN(  18)											{
HXLINE(  18)												w2 = (w2 + 1);
HXDLIN(  18)												b6->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  18)											{
HXLINE(  18)												w2 = (w2 + 1);
HXDLIN(  18)												b6->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  18)											{
HXLINE(  18)												w2 = (w2 + 1);
HXDLIN(  18)												b6->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  18)											{
HXLINE(  18)												w2 = (w2 + 1);
HXDLIN(  18)												b6->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  18)					_hx_tmp12 = b6;
            				}
            				break;
            				case (int)1: {
HXLINE(  18)					 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  18)					 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN(  18)					{
HXLINE(  18)						a7->width = width1;
HXDLIN(  18)						a7->height = height1;
HXDLIN(  18)						a7->data = ::Array_obj< int >::__new(0);
HXDLIN(  18)						a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  18)						{
HXLINE(  18)							int _g24 = 0;
HXDLIN(  18)							int _g25 = a7->length;
HXDLIN(  18)							while((_g24 < _g25)){
HXLINE(  18)								_g24 = (_g24 + 1);
HXDLIN(  18)								int i10 = (_g24 - 1);
HXDLIN(  18)								a7->data[i10] = 0;
            							}
            						}
            					}
HXDLIN(  18)					_hx_tmp12 = a7;
            				}
            				break;
            				case (int)2: {
HXLINE(  18)					 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  18)					 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN(  18)					{
HXLINE(  18)						b7->width = width1;
HXDLIN(  18)						b7->height = height1;
HXDLIN(  18)						b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  18)						int size1 = (b7->length * 4);
HXDLIN(  18)						b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  18)						{
HXLINE(  18)							int _g26 = 0;
HXDLIN(  18)							int _g27 = b7->length;
HXDLIN(  18)							while((_g26 < _g27)){
HXLINE(  18)								_g26 = (_g26 + 1);
HXDLIN(  18)								int i11 = (_g26 - 1);
HXDLIN(  18)								{
HXLINE(  18)									 ::haxe::io::ArrayBufferViewImpl this46 = b7->data;
HXDLIN(  18)									bool _hx_tmp13;
HXDLIN(  18)									if ((i11 >= 0)) {
HXLINE(  18)										_hx_tmp13 = (i11 < (this46->byteLength >> 2));
            									}
            									else {
HXLINE(  18)										_hx_tmp13 = false;
            									}
HXDLIN(  18)									if (_hx_tmp13) {
HXLINE(  18)										 ::haxe::io::Bytes _this1 = this46->bytes;
HXDLIN(  18)										int pos1 = ((i11 << 2) + this46->byteOffset);
HXDLIN(  18)										_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  18)										_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  18)										_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  18)										_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN(  18)					_hx_tmp12 = b7;
            				}
            				break;
            				case (int)3: {
HXLINE(  18)					 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  18)					 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN(  18)					{
HXLINE(  18)						v2->width = width1;
HXDLIN(  18)						v2->height = height1;
HXDLIN(  18)						v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  18)						v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN(  18)						{
HXLINE(  18)							int _g28 = 0;
HXDLIN(  18)							int _g29 = v2->length;
HXDLIN(  18)							while((_g28 < _g29)){
HXLINE(  18)								_g28 = (_g28 + 1);
HXDLIN(  18)								int i12 = (_g28 - 1);
HXDLIN(  18)								v2->data->__unsafe_set(i12,0);
            							}
            						}
            					}
HXDLIN(  18)					_hx_tmp12 = v2;
            				}
            				break;
            				case (int)4: {
HXLINE(  18)					 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  18)					 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN(  18)					{
HXLINE(  18)						b8->width = width1;
HXDLIN(  18)						b8->height = height1;
HXDLIN(  18)						b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  18)						b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  18)						{
HXLINE(  18)							int len3 = b8->length;
HXDLIN(  18)							 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN(  18)							if (::hx::IsNull( d1->head )) {
HXLINE(  18)								int _g30 = 0;
HXDLIN(  18)								int _g31 = len3;
HXDLIN(  18)								while((_g30 < _g31)){
HXLINE(  18)									_g30 = (_g30 + 1);
HXDLIN(  18)									int i13 = (_g30 - 1);
HXDLIN(  18)									d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            								}
            							}
            							else {
HXLINE(  18)								int _g32 = 0;
HXDLIN(  18)								int _g33 = len3;
HXDLIN(  18)								while((_g32 < _g33)){
HXLINE(  18)									_g32 = (_g32 + 1);
HXDLIN(  18)									int i14 = (_g32 - 1);
HXDLIN(  18)									{
HXLINE(  18)										 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN(  18)										 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  18)										{
HXLINE(  18)											int _g34 = 0;
HXDLIN(  18)											int _g35 = i14;
HXDLIN(  18)											while((_g34 < _g35)){
HXLINE(  18)												_g34 = (_g34 + 1);
HXDLIN(  18)												int i15 = (_g34 - 1);
HXLINE( 345)												prev1 = l1;
HXLINE( 346)												l1 = l1->next;
            											}
            										}
HXLINE(  18)										if (::hx::IsNull( prev1 )) {
HXLINE(  18)											b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  18)											l1 = null();
            										}
            										else {
HXLINE(  18)											prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  18)											l1 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  18)					_hx_tmp12 = b8;
            				}
            				break;
            			}
HXDLIN(  18)			this45->image = _hx_tmp12;
HXDLIN(  18)			this45->width = width1;
HXDLIN(  18)			this45->height = height1;
HXDLIN(  18)			this45->imageType = ( (int)(imageType1) );
HXDLIN(  18)			 ::pi_xy::ImageStruct temp1 = this45;
HXLINE(  19)			temp1->transparent = false;
HXLINE(  20)			{
HXLINE(  20)				Float wid = this->width;
HXDLIN(  20)				Float hi = this->height;
HXDLIN(  20)				int color2 = this->strokeColor;
HXDLIN(  20)				 ::Dynamic dx1 = ((Float)-1.);
HXDLIN(  20)				 ::Dynamic dy1 = ((Float)-1.);
HXDLIN(  20)				 ::Dynamic fat = ((Float)-1.);
HXDLIN(  20)				 ::Dynamic tall = ((Float)-1.);
HXDLIN(  20)				if (::hx::IsLess( dx1,((Float)0.) )) {
HXLINE(  20)					Float smallest;
HXDLIN(  20)					if ((hi < wid)) {
HXLINE(  20)						smallest = hi;
            					}
            					else {
HXLINE(  20)						smallest = wid;
            					}
HXDLIN(  20)					Float goldenRatio = ((Float)1.61803398875);
HXLINE(  26)					dx1 = (smallest / (goldenRatio + 2));
            				}
HXLINE(  20)				if (::hx::IsLess( dy1,((Float)0.) )) {
HXLINE(  28)					dy1 = dx1;
            				}
HXLINE(  20)				if (::hx::IsLess( fat,((Float)0.) )) {
HXLINE(  29)					fat = (wid - (( (Float)(2) ) * ( (Float)(dx1) )));
            				}
HXLINE(  20)				if (::hx::IsLess( tall,((Float)0.) )) {
HXLINE(  30)					tall = (hi - (( (Float)(2) ) * ( (Float)(dy1) )));
            				}
HXLINE(  20)				Float rightRadius = ((wid - ( (Float)(fat) )) - ( (Float)(dx1) ));
HXDLIN(  20)				Float bottomRadius = ((hi - ( (Float)(tall) )) - ( (Float)(dy1) ));
HXDLIN(  20)				Float farX = (dx1 + fat);
HXDLIN(  20)				Float lowerY = (dy1 + tall);
HXDLIN(  20)				{
HXLINE(  20)					 ::pi_xy::ImageStruct this47 = temp1;
HXDLIN(  20)					Float cx = ( (Float)(dx1) );
HXDLIN(  20)					Float cy = ( (Float)(dy1) );
HXDLIN(  20)					Float rx = ( (Float)(dx1) );
HXDLIN(  20)					Float ry = ( (Float)(dy1) );
HXDLIN(  20)					{
HXLINE(  20)						 ::Dynamic targetError = ((Float)1.05);
HXDLIN(  20)						if (::hx::IsNull( targetError )) {
HXLINE( 113)							targetError = ((Float)1.05);
            						}
HXLINE(  20)						Float rSmall;
HXDLIN(  20)						if ((rx > ry)) {
HXLINE(  20)							rSmall = ry;
            						}
            						else {
HXLINE(  20)							rSmall = rx;
            						}
HXDLIN(  20)						 ::Dynamic targetE = ( (Float)(targetError) );
HXDLIN(  20)						if (::hx::IsNull( targetE )) {
HXLINE(  20)							targetE = ((Float)1.05);
            						}
HXDLIN(  20)						int result = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE) ) / rSmall)))));
HXDLIN(  20)						int noSides;
HXDLIN(  20)						if ((result < 12)) {
HXLINE(  20)							noSides = 12;
            						}
            						else {
HXLINE(  20)							if ((result > 500)) {
HXLINE(  20)								noSides = 500;
            							}
            							else {
HXLINE(  20)								noSides = result;
            							}
            						}
HXDLIN(  20)						int sides = (::Math_obj::ceil((( (Float)(noSides) ) / ( (Float)(4) ))) * 4);
HXDLIN(  20)						Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides) ));
HXDLIN(  20)						Float omega = ::Math_obj::PI;
HXDLIN(  20)						int quarter = ::Std_obj::_hx_int((( (Float)(sides) ) / ( (Float)(4) )));
HXDLIN(  20)						Float lastX = ((Float)0.);
HXDLIN(  20)						Float lastY = ((Float)0.);
HXDLIN(  20)						{
HXLINE(  26)							lastX = (cx + (rx * ::Math_obj::cos(((( (Float)(sides) ) * theta) + omega))));
HXLINE(  27)							lastY = (cy + (ry * ::Math_obj::sin(((( (Float)(sides) ) * theta) + omega))));
            						}
HXLINE(  20)						{
HXLINE(  20)							int _g36 = 0;
HXDLIN(  20)							int _g37 = (quarter + 1);
HXDLIN(  20)							while((_g36 < _g37)){
HXLINE(  20)								_g36 = (_g36 + 1);
HXDLIN(  20)								int i16 = (_g36 - 1);
HXDLIN(  20)								Float nextX = (cx + (rx * ::Math_obj::cos((((( (Float)(i16) ) * theta) + ((Float)0.0001)) + omega))));
HXDLIN(  20)								Float nextY = (cy + (ry * ::Math_obj::sin((((( (Float)(i16) ) * theta) + ((Float)0.0001)) + omega))));
HXDLIN(  20)								{
HXLINE(  20)									 ::pi_xy::ImageStruct this48 = this47;
HXDLIN(  20)									bool hasHit = false;
HXDLIN(  20)									bool hasUndo = false;
HXDLIN(  20)									{
HXLINE(  20)										Float bx = lastX;
HXDLIN(  20)										Float by = lastY;
HXDLIN(  20)										Float cx1 = nextX;
HXDLIN(  20)										Float cy1 = nextY;
HXDLIN(  20)										bool adjustWinding = (((((cx * by) - (bx * cy)) + ((bx * cy1) - (cx1 * by))) + ((cx1 * cy) - (cx * cy1))) > 0);
HXDLIN(  20)										if (!(adjustWinding)) {
HXLINE(  20)											Float bx_ = bx;
HXDLIN(  20)											Float by_ = by;
HXLINE(  25)											bx = cx1;
HXLINE(  26)											by = cy1;
HXLINE(  27)											cx1 = bx_;
HXLINE(  28)											cy1 = by_;
            										}
HXLINE(  20)										{
HXLINE(  20)											Float s0 = ((cy * cx1) - (cx * cy1));
HXDLIN(  20)											Float sx = (cy1 - cy);
HXDLIN(  20)											Float sy = (cx - cx1);
HXDLIN(  20)											Float t0 = ((cx * by) - (cy * bx));
HXDLIN(  20)											Float tx = (cy - by);
HXDLIN(  20)											Float ty = (bx - cx);
HXDLIN(  20)											Float A = ((((-(by) * cx1) + (cy * (-(bx) + cx1))) + (cx * (by - cy1))) + (bx * cy1));
HXDLIN(  20)											 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  20)											if ((cx > bx)) {
HXLINE(  20)												if ((cx > cx1)) {
HXLINE(  20)													int min;
HXDLIN(  20)													if ((bx > cx1)) {
HXLINE(  20)														min = ::Math_obj::floor(cx1);
            													}
            													else {
HXLINE(  20)														min = ::Math_obj::floor(bx);
            													}
HXDLIN(  20)													int ii_min4 = min;
HXDLIN(  20)													int ii_max4 = ::Math_obj::ceil(cx);
HXDLIN(  20)													xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            												}
            												else {
HXLINE(  20)													int ii_min5 = ::Math_obj::floor(bx);
HXDLIN(  20)													int ii_max5 = ::Math_obj::ceil(cx1);
HXDLIN(  20)													xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            												}
            											}
            											else {
HXLINE(  20)												if ((bx > cx1)) {
HXLINE(  20)													int min1;
HXDLIN(  20)													if ((cx > cx1)) {
HXLINE(  20)														min1 = ::Math_obj::floor(cx1);
            													}
            													else {
HXLINE(  20)														min1 = ::Math_obj::ceil(cx);
            													}
HXDLIN(  20)													int ii_min6 = min1;
HXDLIN(  20)													int ii_max6 = ::Math_obj::ceil(bx);
HXDLIN(  20)													xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            												}
            												else {
HXLINE(  20)													int ii_min7 = ::Math_obj::floor(cx);
HXDLIN(  20)													int ii_max7 = ::Math_obj::ceil(cx1);
HXDLIN(  20)													xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            												}
            											}
HXDLIN(  20)											 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  20)											if ((cy > by)) {
HXLINE(  20)												if ((cy > cy1)) {
HXLINE(  20)													int min2;
HXDLIN(  20)													if ((by > cy1)) {
HXLINE(  20)														min2 = ::Math_obj::floor(cy1);
            													}
            													else {
HXLINE(  20)														min2 = ::Math_obj::floor(by);
            													}
HXDLIN(  20)													int ii_min8 = min2;
HXDLIN(  20)													int ii_max8 = ::Math_obj::ceil(cy);
HXDLIN(  20)													yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            												}
            												else {
HXLINE(  20)													int ii_min9 = ::Math_obj::floor(by);
HXDLIN(  20)													int ii_max9 = ::Math_obj::ceil(cy1);
HXDLIN(  20)													yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            												}
            											}
            											else {
HXLINE(  20)												if ((by > cy1)) {
HXLINE(  20)													int min3;
HXDLIN(  20)													if ((cy > cy1)) {
HXLINE(  20)														min3 = ::Math_obj::floor(cy1);
            													}
            													else {
HXLINE(  20)														min3 = ::Math_obj::ceil(cy);
            													}
HXDLIN(  20)													int ii_min10 = min3;
HXDLIN(  20)													int ii_max10 = ::Math_obj::ceil(by);
HXDLIN(  20)													yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            												}
            												else {
HXLINE(  20)													int ii_min11 = ::Math_obj::floor(cy);
HXDLIN(  20)													int ii_max11 = ::Math_obj::ceil(cy1);
HXDLIN(  20)													yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            												}
            											}
HXDLIN(  20)											 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  20)											if (hasUndo) {
HXLINE(  20)												int width2 = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  20)												int height2 = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  20)												 ::Dynamic imageType2 = null();
HXDLIN(  20)												 ::pi_xy::ImageStruct this49 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  20)												if (::hx::IsNull( imageType2 )) {
HXLINE(  54)													imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE(  20)												::Dynamic undoImage1;
HXDLIN(  20)												switch((int)(( (int)(imageType2) ))){
            													case (int)0: {
HXLINE(  20)														 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::BytesImg b9 = byt2;
HXDLIN(  20)														{
HXLINE(  20)															b9->width = width2;
HXDLIN(  20)															b9->height = height2;
HXDLIN(  20)															b9->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  20)															b9->data = ::haxe::io::Bytes_obj::alloc((b9->length * 4));
HXDLIN(  20)															{
HXLINE(  20)																int len4 = b9->length;
HXDLIN(  20)																int w3 = 0;
HXDLIN(  20)																{
HXLINE(  20)																	int _g38 = 0;
HXDLIN(  20)																	int _g39 = b9->height;
HXDLIN(  20)																	while((_g38 < _g39)){
HXLINE(  20)																		_g38 = (_g38 + 1);
HXDLIN(  20)																		int y8 = (_g38 - 1);
HXDLIN(  20)																		{
HXLINE(  20)																			int _g40 = 0;
HXDLIN(  20)																			int _g41 = b9->width;
HXDLIN(  20)																			while((_g40 < _g41)){
HXLINE(  20)																				_g40 = (_g40 + 1);
HXDLIN(  20)																				int x7 = (_g40 - 1);
HXDLIN(  20)																				{
HXLINE(  20)																					w3 = (w3 + 1);
HXDLIN(  20)																					b9->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w3 = (w3 + 1);
HXDLIN(  20)																					b9->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w3 = (w3 + 1);
HXDLIN(  20)																					b9->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w3 = (w3 + 1);
HXDLIN(  20)																					b9->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage1 = b9;
            													}
            													break;
            													case (int)1: {
HXLINE(  20)														 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::ArrIntImg a8 = arrI2;
HXDLIN(  20)														{
HXLINE(  20)															a8->width = width2;
HXDLIN(  20)															a8->height = height2;
HXDLIN(  20)															a8->data = ::Array_obj< int >::__new(0);
HXDLIN(  20)															a8->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  20)															{
HXLINE(  20)																int _g42 = 0;
HXDLIN(  20)																int _g43 = a8->length;
HXDLIN(  20)																while((_g42 < _g43)){
HXLINE(  20)																	_g42 = (_g42 + 1);
HXDLIN(  20)																	int i17 = (_g42 - 1);
HXDLIN(  20)																	a8->data[i17] = 0;
            																}
            															}
            														}
HXDLIN(  20)														undoImage1 = a8;
            													}
            													break;
            													case (int)2: {
HXLINE(  20)														 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::U32ArrImg b10 = u32a2;
HXDLIN(  20)														{
HXLINE(  20)															b10->width = width2;
HXDLIN(  20)															b10->height = height2;
HXDLIN(  20)															b10->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  20)															int size2 = (b10->length * 4);
HXDLIN(  20)															b10->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  20)															{
HXLINE(  20)																int _g44 = 0;
HXDLIN(  20)																int _g45 = b10->length;
HXDLIN(  20)																while((_g44 < _g45)){
HXLINE(  20)																	_g44 = (_g44 + 1);
HXDLIN(  20)																	int i18 = (_g44 - 1);
HXDLIN(  20)																	{
HXLINE(  20)																		 ::haxe::io::ArrayBufferViewImpl this50 = b10->data;
HXDLIN(  20)																		bool undoImage2;
HXDLIN(  20)																		if ((i18 >= 0)) {
HXLINE(  20)																			undoImage2 = (i18 < (this50->byteLength >> 2));
            																		}
            																		else {
HXLINE(  20)																			undoImage2 = false;
            																		}
HXDLIN(  20)																		if (undoImage2) {
HXLINE(  20)																			 ::haxe::io::Bytes _this2 = this50->bytes;
HXDLIN(  20)																			int pos2 = ((i18 << 2) + this50->byteOffset);
HXDLIN(  20)																			_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage1 = b10;
            													}
            													break;
            													case (int)3: {
HXLINE(  20)														 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::VecIntImg v3 = vec2;
HXDLIN(  20)														{
HXLINE(  20)															v3->width = width2;
HXDLIN(  20)															v3->height = height2;
HXDLIN(  20)															v3->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  20)															v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN(  20)															{
HXLINE(  20)																int _g46 = 0;
HXDLIN(  20)																int _g47 = v3->length;
HXDLIN(  20)																while((_g46 < _g47)){
HXLINE(  20)																	_g46 = (_g46 + 1);
HXDLIN(  20)																	int i19 = (_g46 - 1);
HXDLIN(  20)																	v3->data->__unsafe_set(i19,0);
            																}
            															}
            														}
HXDLIN(  20)														undoImage1 = v3;
            													}
            													break;
            													case (int)4: {
HXLINE(  20)														 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::StackIntImg b14 = sInt2;
HXDLIN(  20)														{
HXLINE(  20)															b14->width = width2;
HXDLIN(  20)															b14->height = height2;
HXDLIN(  20)															b14->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  20)															b14->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  20)															{
HXLINE(  20)																int len5 = b14->length;
HXDLIN(  20)																 ::haxe::ds::GenericStack_Int d2 = b14->data;
HXDLIN(  20)																if (::hx::IsNull( d2->head )) {
HXLINE(  20)																	int _g48 = 0;
HXDLIN(  20)																	int _g49 = len5;
HXDLIN(  20)																	while((_g48 < _g49)){
HXLINE(  20)																		_g48 = (_g48 + 1);
HXDLIN(  20)																		int i20 = (_g48 - 1);
HXDLIN(  20)																		d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            																	}
            																}
            																else {
HXLINE(  20)																	int _g50 = 0;
HXDLIN(  20)																	int _g51 = len5;
HXDLIN(  20)																	while((_g50 < _g51)){
HXLINE(  20)																		_g50 = (_g50 + 1);
HXDLIN(  20)																		int i21 = (_g50 - 1);
HXDLIN(  20)																		{
HXLINE(  20)																			 ::haxe::ds::GenericCell_Int l2 = b14->data->head;
HXDLIN(  20)																			 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  20)																			{
HXLINE(  20)																				int _g52 = 0;
HXDLIN(  20)																				int _g53 = i21;
HXDLIN(  20)																				while((_g52 < _g53)){
HXLINE(  20)																					_g52 = (_g52 + 1);
HXDLIN(  20)																					int i22 = (_g52 - 1);
HXLINE( 345)																					prev2 = l2;
HXLINE( 346)																					l2 = l2->next;
            																				}
            																			}
HXLINE(  20)																			if (::hx::IsNull( prev2 )) {
HXLINE(  20)																				b14->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  20)																				l2 = null();
            																			}
            																			else {
HXLINE(  20)																				prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  20)																				l2 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage1 = b14;
            													}
            													break;
            												}
HXDLIN(  20)												this49->image = undoImage1;
HXDLIN(  20)												this49->width = width2;
HXDLIN(  20)												this49->height = height2;
HXDLIN(  20)												this49->imageType = ( (int)(imageType2) );
HXDLIN(  20)												undoImage = this49;
HXDLIN(  20)												{
HXLINE(  20)													int rectLeft = xIter3->start;
HXDLIN(  20)													int rectTop = yIter3->start;
HXDLIN(  20)													int rectRight = xIter3->max;
HXDLIN(  20)													bool forceClear1 = false;
HXDLIN(  20)													{
HXLINE(  20)														int _g54 = rectTop;
HXDLIN(  20)														int _g55 = yIter3->max;
HXDLIN(  20)														while((_g54 < _g55)){
HXLINE(  20)															_g54 = (_g54 + 1);
HXDLIN(  20)															int dy2 = (_g54 - 1);
HXDLIN(  20)															{
HXLINE(  20)																int _g56 = rectLeft;
HXDLIN(  20)																int _g57 = rectRight;
HXDLIN(  20)																while((_g56 < _g57)){
HXLINE(  20)																	_g56 = (_g56 + 1);
HXDLIN(  20)																	int dx2 = (_g56 - 1);
HXDLIN(  20)																	::Dynamic this51 = this48->image;
HXDLIN(  20)																	int index6;
HXDLIN(  20)																	if (this48->useVirtualPos) {
HXLINE(  20)																		index6 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this48->virtualY) * ( (Float)(this48->width) )) + dx2) - this48->virtualX));
            																	}
            																	else {
HXLINE(  20)																		index6 = ::Std_obj::_hx_int(( (Float)(((dy2 * this48->width) + dx2)) ));
            																	}
HXDLIN(  20)																	int c5 = ::iterMagic::Iimg_obj::get(this51,index6);
HXDLIN(  20)																	int col1;
HXDLIN(  20)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																		col1 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            																	}
            																	else {
HXLINE(  20)																		col1 = c5;
            																	}
HXDLIN(  20)																	bool _hx_tmp14;
HXDLIN(  20)																	if (this48->useMask) {
HXLINE(  20)																		_hx_tmp14 = ::hx::IsNotNull( this48->mask );
            																	}
            																	else {
HXLINE(  20)																		_hx_tmp14 = false;
            																	}
HXDLIN(  20)																	if (_hx_tmp14) {
HXLINE(  20)																		 ::pi_xy::ImageStruct this52 = this48->mask;
HXDLIN(  20)																		::Dynamic this53 = this52->image;
HXDLIN(  20)																		int index7;
HXDLIN(  20)																		if (this52->useVirtualPos) {
HXLINE(  20)																			index7 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this52->virtualY) * ( (Float)(this52->width) )) + dx2) - this52->virtualX));
            																		}
            																		else {
HXLINE(  20)																			index7 = ::Std_obj::_hx_int(( (Float)(((dy2 * this52->width) + dx2)) ));
            																		}
HXDLIN(  20)																		int c6 = ::iterMagic::Iimg_obj::get(this53,index7);
HXDLIN(  20)																		int v4;
HXDLIN(  20)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																			v4 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            																		}
            																		else {
HXLINE(  20)																			v4 = c6;
            																		}
HXDLIN(  20)																		int maskPixel1 = v4;
HXDLIN(  20)																		int this54 = col1;
HXDLIN(  20)																		if ((maskPixel1 == 0)) {
HXLINE(  20)																			col1 = this54;
            																		}
            																		else {
HXLINE(  20)																			Float m01;
HXDLIN(  20)																			int this55 = ((maskPixel1 >> 24) & 255);
HXDLIN(  20)																			if ((this55 == 0)) {
HXLINE(  20)																				m01 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m01 = (( (Float)(this55) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m11;
HXDLIN(  20)																			int this56 = ((maskPixel1 >> 16) & 255);
HXDLIN(  20)																			if ((this56 == 0)) {
HXLINE(  20)																				m11 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m11 = (( (Float)(this56) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m21;
HXDLIN(  20)																			int this57 = ((maskPixel1 >> 8) & 255);
HXDLIN(  20)																			if ((this57 == 0)) {
HXLINE(  20)																				m21 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m21 = (( (Float)(this57) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m31;
HXDLIN(  20)																			int this58 = (maskPixel1 & 255);
HXDLIN(  20)																			if ((this58 == 0)) {
HXLINE(  20)																				m31 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m31 = (( (Float)(this58) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this54 >> 24) & 255)) )));
HXDLIN(  20)																			int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this54 >> 16) & 255)) )));
HXDLIN(  20)																			int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this54 >> 8) & 255)) )));
HXDLIN(  20)																			int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this54 & 255)) )));
HXDLIN(  20)																			col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN(  20)																	if ((col1 != 0)) {
HXLINE(  20)																		int x8 = (dx2 - rectLeft);
HXDLIN(  20)																		int y9 = (dy2 - rectTop);
HXDLIN(  20)																		int c7 = col1;
HXDLIN(  20)																		bool _hx_tmp15;
HXDLIN(  20)																		if ((((c7 >> 24) & 255) < 254)) {
HXLINE(  20)																			_hx_tmp15 = undoImage->transparent;
            																		}
            																		else {
HXLINE(  20)																			_hx_tmp15 = false;
            																		}
HXDLIN(  20)																		if (_hx_tmp15) {
HXLINE(  20)																			int location3;
HXDLIN(  20)																			if (undoImage->useVirtualPos) {
HXLINE(  20)																				location3 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x8) - undoImage->virtualX));
            																			}
            																			else {
HXLINE(  20)																				location3 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage->width) + x8)) ));
            																			}
HXDLIN(  20)																			int this59 = ::iterMagic::Iimg_obj::get(undoImage->image,location3);
HXDLIN(  20)																			int this60;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				this60 = ((((((this59 >> 24) & 255) << 24) | ((this59 & 255) << 16)) | (((this59 >> 8) & 255) << 8)) | ((this59 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				this60 = this59;
            																			}
HXDLIN(  20)																			Float a13;
HXDLIN(  20)																			int this61 = ((this60 >> 24) & 255);
HXDLIN(  20)																			if ((this61 == 0)) {
HXLINE(  20)																				a13 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a13 = (( (Float)(this61) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r13;
HXDLIN(  20)																			int this62 = ((this60 >> 16) & 255);
HXDLIN(  20)																			if ((this62 == 0)) {
HXLINE(  20)																				r13 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r13 = (( (Float)(this62) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g13;
HXDLIN(  20)																			int this63 = ((this60 >> 8) & 255);
HXDLIN(  20)																			if ((this63 == 0)) {
HXLINE(  20)																				g13 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g13 = (( (Float)(this63) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b15;
HXDLIN(  20)																			int this64 = (this60 & 255);
HXDLIN(  20)																			if ((this64 == 0)) {
HXLINE(  20)																				b15 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b15 = (( (Float)(this64) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a23;
HXDLIN(  20)																			int this65 = ((col1 >> 24) & 255);
HXDLIN(  20)																			if ((this65 == 0)) {
HXLINE(  20)																				a23 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a23 = (( (Float)(this65) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r23;
HXDLIN(  20)																			int this66 = ((col1 >> 16) & 255);
HXDLIN(  20)																			if ((this66 == 0)) {
HXLINE(  20)																				r23 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r23 = (( (Float)(this66) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g23;
HXDLIN(  20)																			int this67 = ((col1 >> 8) & 255);
HXDLIN(  20)																			if ((this67 == 0)) {
HXLINE(  20)																				g23 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g23 = (( (Float)(this67) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b24;
HXDLIN(  20)																			int this68 = (col1 & 255);
HXDLIN(  20)																			if ((this68 == 0)) {
HXLINE(  20)																				b24 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b24 = (( (Float)(this68) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  20)																			int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  20)																			int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  20)																			int b16 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a33) + (b24 * a23))));
HXDLIN(  20)																			int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  20)																			int blended3 = ((((a9 << 24) | (r5 << 16)) | (g5 << 8)) | b16);
HXDLIN(  20)																			{
HXLINE(  20)																				int _hx_tmp16;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					_hx_tmp16 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					_hx_tmp16 = blended3;
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(undoImage->image,location3,_hx_tmp16);
            																			}
            																		}
            																		else {
HXLINE(  20)																			::Dynamic this69 = undoImage->image;
HXDLIN(  20)																			int index8;
HXDLIN(  20)																			if (undoImage->useVirtualPos) {
HXLINE(  20)																				index8 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x8) - undoImage->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index8 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage->width) + x8)) ));
            																			}
HXDLIN(  20)																			int _hx_tmp17;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				_hx_tmp17 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				_hx_tmp17 = c7;
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this69,index8,_hx_tmp17);
            																		}
            																	}
            																	else {
HXLINE(  20)																		if (forceClear1) {
HXLINE(  20)																			::Dynamic this70 = undoImage->image;
HXDLIN(  20)																			int x9 = (dx2 - rectLeft);
HXDLIN(  20)																			int y10 = (dy2 - rectTop);
HXDLIN(  20)																			int index9;
HXDLIN(  20)																			if (undoImage->useVirtualPos) {
HXLINE(  20)																				index9 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x9) - undoImage->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index9 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage->width) + x9)) ));
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this70,index9,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  20)											bool found = false;
HXDLIN(  20)											Float s = ((Float)0.);
HXDLIN(  20)											Float t = ((Float)0.);
HXDLIN(  20)											Float sxx = ((Float)0.);
HXDLIN(  20)											Float txx = ((Float)0.);
HXDLIN(  20)											{
HXLINE(  20)												int _g_min = xIter3->start;
HXDLIN(  20)												int _g_max = xIter3->max;
HXDLIN(  20)												while((_g_min < _g_max)){
HXLINE(  20)													_g_min = (_g_min + 1);
HXDLIN(  20)													int x10 = (_g_min - 1);
HXLINE(  60)													sxx = (sx * ( (Float)(x10) ));
HXLINE(  61)													txx = (tx * ( (Float)(x10) ));
HXLINE(  62)													found = false;
HXLINE(  20)													{
HXLINE(  20)														int _g_min1 = yIter3->start;
HXDLIN(  20)														int _g_max1 = yIter3->max;
HXDLIN(  20)														while((_g_min1 < _g_max1)){
HXLINE(  20)															_g_min1 = (_g_min1 + 1);
HXDLIN(  20)															int y11 = (_g_min1 - 1);
HXLINE(  64)															s = ((s0 + sxx) + (sy * ( (Float)(y11) )));
HXLINE(  65)															t = ((t0 + txx) + (ty * ( (Float)(y11) )));
HXLINE(  20)															bool _hx_tmp18;
HXDLIN(  20)															if (!((s <= 0))) {
HXLINE(  20)																_hx_tmp18 = (t <= 0);
            															}
            															else {
HXLINE(  20)																_hx_tmp18 = true;
            															}
HXDLIN(  20)															if (_hx_tmp18) {
HXLINE(  20)																if (found) {
HXLINE(  20)																	goto _hx_goto_33;
            																}
            															}
            															else {
HXLINE(  20)																if (((s + t) < A)) {
HXLINE(  20)																	{
HXLINE(  20)																		int c8 = color2;
HXDLIN(  20)																		bool _hx_tmp19;
HXDLIN(  20)																		if ((((c8 >> 24) & 255) < 254)) {
HXLINE(  20)																			_hx_tmp19 = this48->transparent;
            																		}
            																		else {
HXLINE(  20)																			_hx_tmp19 = false;
            																		}
HXDLIN(  20)																		if (_hx_tmp19) {
HXLINE(  20)																			int location4;
HXDLIN(  20)																			if (this48->useVirtualPos) {
HXLINE(  20)																				location4 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - this48->virtualY) * ( (Float)(this48->width) )) + x10) - this48->virtualX));
            																			}
            																			else {
HXLINE(  20)																				location4 = ::Std_obj::_hx_int(( (Float)(((y11 * this48->width) + x10)) ));
            																			}
HXDLIN(  20)																			int this71 = ::iterMagic::Iimg_obj::get(this48->image,location4);
HXDLIN(  20)																			int this72;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				this72 = ((((((this71 >> 24) & 255) << 24) | ((this71 & 255) << 16)) | (((this71 >> 8) & 255) << 8)) | ((this71 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				this72 = this71;
            																			}
HXDLIN(  20)																			Float a14;
HXDLIN(  20)																			int this73 = ((this72 >> 24) & 255);
HXDLIN(  20)																			if ((this73 == 0)) {
HXLINE(  20)																				a14 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a14 = (( (Float)(this73) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r14;
HXDLIN(  20)																			int this74 = ((this72 >> 16) & 255);
HXDLIN(  20)																			if ((this74 == 0)) {
HXLINE(  20)																				r14 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r14 = (( (Float)(this74) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g14;
HXDLIN(  20)																			int this75 = ((this72 >> 8) & 255);
HXDLIN(  20)																			if ((this75 == 0)) {
HXLINE(  20)																				g14 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g14 = (( (Float)(this75) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b17;
HXDLIN(  20)																			int this76 = (this72 & 255);
HXDLIN(  20)																			if ((this76 == 0)) {
HXLINE(  20)																				b17 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b17 = (( (Float)(this76) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a24;
HXDLIN(  20)																			int this77 = ((color2 >> 24) & 255);
HXDLIN(  20)																			if ((this77 == 0)) {
HXLINE(  20)																				a24 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a24 = (( (Float)(this77) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r24;
HXDLIN(  20)																			int this78 = ((color2 >> 16) & 255);
HXDLIN(  20)																			if ((this78 == 0)) {
HXLINE(  20)																				r24 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r24 = (( (Float)(this78) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g24;
HXDLIN(  20)																			int this79 = ((color2 >> 8) & 255);
HXDLIN(  20)																			if ((this79 == 0)) {
HXLINE(  20)																				g24 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g24 = (( (Float)(this79) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b25;
HXDLIN(  20)																			int this80 = (color2 & 255);
HXDLIN(  20)																			if ((this80 == 0)) {
HXLINE(  20)																				b25 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b25 = (( (Float)(this80) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a34 = (a14 * (( (Float)(1) ) - a24));
HXDLIN(  20)																			int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  20)																			int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  20)																			int b18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b17 * a34) + (b25 * a24))));
HXDLIN(  20)																			int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  20)																			int blended4 = ((((a10 << 24) | (r6 << 16)) | (g6 << 8)) | b18);
HXDLIN(  20)																			{
HXLINE(  20)																				int _hx_tmp20;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					_hx_tmp20 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					_hx_tmp20 = blended4;
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(this48->image,location4,_hx_tmp20);
            																			}
            																		}
            																		else {
HXLINE(  20)																			::Dynamic this81 = this48->image;
HXDLIN(  20)																			int index10;
HXDLIN(  20)																			if (this48->useVirtualPos) {
HXLINE(  20)																				index10 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - this48->virtualY) * ( (Float)(this48->width) )) + x10) - this48->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index10 = ::Std_obj::_hx_int(( (Float)(((y11 * this48->width) + x10)) ));
            																			}
HXDLIN(  20)																			int _hx_tmp21;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				_hx_tmp21 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				_hx_tmp21 = c8;
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this81,index10,_hx_tmp21);
            																		}
            																	}
HXLINE(  73)																	found = true;
            																}
            																else {
HXLINE(  20)																	if (found) {
HXLINE(  20)																		goto _hx_goto_33;
            																	}
            																}
            															}
            														}
            														_hx_goto_33:;
            													}
            												}
            											}
HXDLIN(  20)											if ((hasHit == true)) {
HXLINE(  20)												 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,bx,by,cx1,cy1,true);
HXDLIN(  20)												if (hasUndo) {
HXLINE(  20)													v5->undoImage = undoImage;
HXDLIN(  20)													v5->undoX = xIter3->start;
HXDLIN(  20)													v5->undoY = yIter3->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  46)								lastX = nextX;
HXLINE(  47)								lastY = nextY;
            							}
            						}
            					}
            				}
HXLINE(  20)				{
HXLINE(  20)					int r_x2 = ::Std_obj::_hx_int(( (Float)(dx1) ));
HXDLIN(  20)					int r_y2 = 0;
HXDLIN(  20)					int r_w2 = ::Std_obj::_hx_int(( (Float)(fat) ));
HXDLIN(  20)					int r_h2 = ::Std_obj::_hx_int(( (Float)(dy1) ));
HXDLIN(  20)					int xmax2 = ((r_x2 + r_w2) + 1);
HXDLIN(  20)					int ymax2 = ((r_y2 + r_h2) + 1);
HXDLIN(  20)					int ii_min12 = r_x2;
HXDLIN(  20)					int ii_max12 = xmax2;
HXDLIN(  20)					int xRange__start2 = ii_min12;
HXDLIN(  20)					int xRange__max2 = ii_max12;
HXDLIN(  20)					int ii_min13 = r_y2;
HXDLIN(  20)					int ii_max13 = ymax2;
HXDLIN(  20)					int yRange__start2 = ii_min13;
HXDLIN(  20)					int yRange__max2 = ii_max13;
HXDLIN(  20)					int range_x2 = xRange__start2;
HXDLIN(  20)					int range_y2 = (yRange__start2 - 1);
HXDLIN(  20)					int range_xReset2 = range_x2;
HXDLIN(  20)					int range_yReset2 = range_y2;
HXDLIN(  20)					int range_xMax2 = (xRange__max2 - 2);
HXDLIN(  20)					int range_yMax2 = (yRange__max2 - 2);
HXDLIN(  20)					int _this_min2 = 0;
HXDLIN(  20)					int _this_max2 = ::Std_obj::_hx_int(( (Float)(((xRange__max2 - xRange__start2) * (yRange__max2 - yRange__start2))) ));
HXDLIN(  20)					while((_this_min2 < _this_max2)){
HXLINE(  20)						_this_min2 = (_this_min2 + 1);
HXDLIN(  20)						int i23 = (_this_min2 - 1);
HXDLIN(  20)						if ((range_y2 > range_yMax2)) {
HXLINE(  20)							range_y2 = range_yReset2;
HXDLIN(  20)							range_x2 = (range_x2 + 1);
            						}
HXDLIN(  20)						range_y2 = (range_y2 + 1);
HXDLIN(  20)						int i24 = i23;
HXDLIN(  20)						{
HXLINE(  20)							int x11 = range_x2;
HXDLIN(  20)							int y12 = range_y2;
HXDLIN(  20)							int c9 = color2;
HXDLIN(  20)							bool _hx_tmp22;
HXDLIN(  20)							if ((((c9 >> 24) & 255) < 254)) {
HXLINE(  20)								_hx_tmp22 = temp1->transparent;
            							}
            							else {
HXLINE(  20)								_hx_tmp22 = false;
            							}
HXDLIN(  20)							if (_hx_tmp22) {
HXLINE(  20)								int location5;
HXDLIN(  20)								if (temp1->useVirtualPos) {
HXLINE(  20)									location5 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + x11) - temp1->virtualX));
            								}
            								else {
HXLINE(  20)									location5 = ::Std_obj::_hx_int(( (Float)(((y12 * temp1->width) + x11)) ));
            								}
HXDLIN(  20)								int this82 = ::iterMagic::Iimg_obj::get(temp1->image,location5);
HXDLIN(  20)								int this83;
HXDLIN(  20)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)									this83 = ((((((this82 >> 24) & 255) << 24) | ((this82 & 255) << 16)) | (((this82 >> 8) & 255) << 8)) | ((this82 >> 16) & 255));
            								}
            								else {
HXLINE(  20)									this83 = this82;
            								}
HXDLIN(  20)								Float a15;
HXDLIN(  20)								int this84 = ((this83 >> 24) & 255);
HXDLIN(  20)								if ((this84 == 0)) {
HXLINE(  20)									a15 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									a15 = (( (Float)(this84) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float r15;
HXDLIN(  20)								int this85 = ((this83 >> 16) & 255);
HXDLIN(  20)								if ((this85 == 0)) {
HXLINE(  20)									r15 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									r15 = (( (Float)(this85) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float g15;
HXDLIN(  20)								int this86 = ((this83 >> 8) & 255);
HXDLIN(  20)								if ((this86 == 0)) {
HXLINE(  20)									g15 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									g15 = (( (Float)(this86) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float b19;
HXDLIN(  20)								int this87 = (this83 & 255);
HXDLIN(  20)								if ((this87 == 0)) {
HXLINE(  20)									b19 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									b19 = (( (Float)(this87) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float a25;
HXDLIN(  20)								int this88 = ((color2 >> 24) & 255);
HXDLIN(  20)								if ((this88 == 0)) {
HXLINE(  20)									a25 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									a25 = (( (Float)(this88) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float r25;
HXDLIN(  20)								int this89 = ((color2 >> 16) & 255);
HXDLIN(  20)								if ((this89 == 0)) {
HXLINE(  20)									r25 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									r25 = (( (Float)(this89) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float g25;
HXDLIN(  20)								int this90 = ((color2 >> 8) & 255);
HXDLIN(  20)								if ((this90 == 0)) {
HXLINE(  20)									g25 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									g25 = (( (Float)(this90) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float b26;
HXDLIN(  20)								int this91 = (color2 & 255);
HXDLIN(  20)								if ((this91 == 0)) {
HXLINE(  20)									b26 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									b26 = (( (Float)(this91) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float a35 = (a15 * (( (Float)(1) ) - a25));
HXDLIN(  20)								int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  20)								int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  20)								int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a35) + (b26 * a25))));
HXDLIN(  20)								int a16 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  20)								int blended5 = ((((a16 << 24) | (r7 << 16)) | (g7 << 8)) | b20);
HXDLIN(  20)								{
HXLINE(  20)									int _hx_tmp23;
HXDLIN(  20)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)										_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            									}
            									else {
HXLINE(  20)										_hx_tmp23 = blended5;
            									}
HXDLIN(  20)									::iterMagic::Iimg_obj::set(temp1->image,location5,_hx_tmp23);
            								}
            							}
            							else {
HXLINE(  20)								::Dynamic this92 = temp1->image;
HXDLIN(  20)								int index11;
HXDLIN(  20)								if (temp1->useVirtualPos) {
HXLINE(  20)									index11 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + x11) - temp1->virtualX));
            								}
            								else {
HXLINE(  20)									index11 = ::Std_obj::_hx_int(( (Float)(((y12 * temp1->width) + x11)) ));
            								}
HXDLIN(  20)								int _hx_tmp24;
HXDLIN(  20)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)									_hx_tmp24 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            								}
            								else {
HXLINE(  20)									_hx_tmp24 = c9;
            								}
HXDLIN(  20)								::iterMagic::Iimg_obj::set(this92,index11,_hx_tmp24);
            							}
            						}
            					}
            				}
HXDLIN(  20)				{
HXLINE(  20)					 ::pi_xy::ImageStruct this93 = temp1;
HXDLIN(  20)					Float cy2 = ( (Float)(dy1) );
HXDLIN(  20)					Float ry1 = ( (Float)(dy1) );
HXDLIN(  20)					{
HXLINE(  20)						 ::Dynamic targetError1 = ((Float)1.05);
HXDLIN(  20)						if (::hx::IsNull( targetError1 )) {
HXLINE( 113)							targetError1 = ((Float)1.05);
            						}
HXLINE(  20)						Float rSmall1;
HXDLIN(  20)						if ((rightRadius > ry1)) {
HXLINE(  20)							rSmall1 = ry1;
            						}
            						else {
HXLINE(  20)							rSmall1 = rightRadius;
            						}
HXDLIN(  20)						 ::Dynamic targetE1 = ( (Float)(targetError1) );
HXDLIN(  20)						if (::hx::IsNull( targetE1 )) {
HXLINE(  20)							targetE1 = ((Float)1.05);
            						}
HXDLIN(  20)						int result1 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE1) ) / rSmall1)))));
HXDLIN(  20)						int noSides1;
HXDLIN(  20)						if ((result1 < 12)) {
HXLINE(  20)							noSides1 = 12;
            						}
            						else {
HXLINE(  20)							if ((result1 > 500)) {
HXLINE(  20)								noSides1 = 500;
            							}
            							else {
HXLINE(  20)								noSides1 = result1;
            							}
            						}
HXDLIN(  20)						int sides1 = (::Math_obj::ceil((( (Float)(noSides1) ) / ( (Float)(4) ))) * 4);
HXDLIN(  20)						Float theta1 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides1) ));
HXDLIN(  20)						Float omega1 = ((( (Float)(3) ) * ::Math_obj::PI) / ( (Float)(2) ));
HXDLIN(  20)						int quarter1 = ::Std_obj::_hx_int((( (Float)(sides1) ) / ( (Float)(4) )));
HXDLIN(  20)						Float lastX1 = ((Float)0.);
HXDLIN(  20)						Float lastY1 = ((Float)0.);
HXDLIN(  20)						{
HXLINE(  26)							lastX1 = (farX + (rightRadius * ::Math_obj::cos(((( (Float)(sides1) ) * theta1) + omega1))));
HXLINE(  27)							lastY1 = (cy2 + (ry1 * ::Math_obj::sin(((( (Float)(sides1) ) * theta1) + omega1))));
            						}
HXLINE(  20)						{
HXLINE(  20)							int _g58 = 0;
HXDLIN(  20)							int _g59 = (quarter1 + 1);
HXDLIN(  20)							while((_g58 < _g59)){
HXLINE(  20)								_g58 = (_g58 + 1);
HXDLIN(  20)								int i25 = (_g58 - 1);
HXDLIN(  20)								Float nextX1 = (farX + (rightRadius * ::Math_obj::cos((((( (Float)(i25) ) * theta1) + ((Float)0.0001)) + omega1))));
HXDLIN(  20)								Float nextY1 = (cy2 + (ry1 * ::Math_obj::sin((((( (Float)(i25) ) * theta1) + ((Float)0.0001)) + omega1))));
HXDLIN(  20)								{
HXLINE(  20)									 ::pi_xy::ImageStruct this94 = this93;
HXDLIN(  20)									bool hasHit1 = false;
HXDLIN(  20)									bool hasUndo1 = false;
HXDLIN(  20)									{
HXLINE(  20)										Float bx1 = lastX1;
HXDLIN(  20)										Float by1 = lastY1;
HXDLIN(  20)										Float cx2 = nextX1;
HXDLIN(  20)										Float cy3 = nextY1;
HXDLIN(  20)										bool adjustWinding1 = (((((farX * by1) - (bx1 * cy2)) + ((bx1 * cy3) - (cx2 * by1))) + ((cx2 * cy2) - (farX * cy3))) > 0);
HXDLIN(  20)										if (!(adjustWinding1)) {
HXLINE(  20)											Float bx_1 = bx1;
HXDLIN(  20)											Float by_1 = by1;
HXLINE(  25)											bx1 = cx2;
HXLINE(  26)											by1 = cy3;
HXLINE(  27)											cx2 = bx_1;
HXLINE(  28)											cy3 = by_1;
            										}
HXLINE(  20)										{
HXLINE(  20)											Float s01 = ((cy2 * cx2) - (farX * cy3));
HXDLIN(  20)											Float sx1 = (cy3 - cy2);
HXDLIN(  20)											Float sy1 = (farX - cx2);
HXDLIN(  20)											Float t01 = ((farX * by1) - (cy2 * bx1));
HXDLIN(  20)											Float tx1 = (cy2 - by1);
HXDLIN(  20)											Float ty1 = (bx1 - farX);
HXDLIN(  20)											Float A1 = ((((-(by1) * cx2) + (cy2 * (-(bx1) + cx2))) + (farX * (by1 - cy3))) + (bx1 * cy3));
HXDLIN(  20)											 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  20)											if ((farX > bx1)) {
HXLINE(  20)												if ((farX > cx2)) {
HXLINE(  20)													int min4;
HXDLIN(  20)													if ((bx1 > cx2)) {
HXLINE(  20)														min4 = ::Math_obj::floor(cx2);
            													}
            													else {
HXLINE(  20)														min4 = ::Math_obj::floor(bx1);
            													}
HXDLIN(  20)													int ii_min14 = min4;
HXDLIN(  20)													int ii_max14 = ::Math_obj::ceil(farX);
HXDLIN(  20)													xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            												}
            												else {
HXLINE(  20)													int ii_min15 = ::Math_obj::floor(bx1);
HXDLIN(  20)													int ii_max15 = ::Math_obj::ceil(cx2);
HXDLIN(  20)													xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            												}
            											}
            											else {
HXLINE(  20)												if ((bx1 > cx2)) {
HXLINE(  20)													int min5;
HXDLIN(  20)													if ((farX > cx2)) {
HXLINE(  20)														min5 = ::Math_obj::floor(cx2);
            													}
            													else {
HXLINE(  20)														min5 = ::Math_obj::ceil(farX);
            													}
HXDLIN(  20)													int ii_min16 = min5;
HXDLIN(  20)													int ii_max16 = ::Math_obj::ceil(bx1);
HXDLIN(  20)													xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            												}
            												else {
HXLINE(  20)													int ii_min17 = ::Math_obj::floor(farX);
HXDLIN(  20)													int ii_max17 = ::Math_obj::ceil(cx2);
HXDLIN(  20)													xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            												}
            											}
HXDLIN(  20)											 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  20)											if ((cy2 > by1)) {
HXLINE(  20)												if ((cy2 > cy3)) {
HXLINE(  20)													int min6;
HXDLIN(  20)													if ((by1 > cy3)) {
HXLINE(  20)														min6 = ::Math_obj::floor(cy3);
            													}
            													else {
HXLINE(  20)														min6 = ::Math_obj::floor(by1);
            													}
HXDLIN(  20)													int ii_min18 = min6;
HXDLIN(  20)													int ii_max18 = ::Math_obj::ceil(cy2);
HXDLIN(  20)													yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            												}
            												else {
HXLINE(  20)													int ii_min19 = ::Math_obj::floor(by1);
HXDLIN(  20)													int ii_max19 = ::Math_obj::ceil(cy3);
HXDLIN(  20)													yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            												}
            											}
            											else {
HXLINE(  20)												if ((by1 > cy3)) {
HXLINE(  20)													int min7;
HXDLIN(  20)													if ((cy2 > cy3)) {
HXLINE(  20)														min7 = ::Math_obj::floor(cy3);
            													}
            													else {
HXLINE(  20)														min7 = ::Math_obj::ceil(cy2);
            													}
HXDLIN(  20)													int ii_min20 = min7;
HXDLIN(  20)													int ii_max20 = ::Math_obj::ceil(by1);
HXDLIN(  20)													yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            												}
            												else {
HXLINE(  20)													int ii_min21 = ::Math_obj::floor(cy2);
HXDLIN(  20)													int ii_max21 = ::Math_obj::ceil(cy3);
HXDLIN(  20)													yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            												}
            											}
HXDLIN(  20)											 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  20)											if (hasUndo1) {
HXLINE(  20)												int width3 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  20)												int height3 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  20)												 ::Dynamic imageType3 = null();
HXDLIN(  20)												 ::pi_xy::ImageStruct this95 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  20)												if (::hx::IsNull( imageType3 )) {
HXLINE(  54)													imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE(  20)												::Dynamic undoImage4;
HXDLIN(  20)												switch((int)(( (int)(imageType3) ))){
            													case (int)0: {
HXLINE(  20)														 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::BytesImg b27 = byt3;
HXDLIN(  20)														{
HXLINE(  20)															b27->width = width3;
HXDLIN(  20)															b27->height = height3;
HXDLIN(  20)															b27->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  20)															b27->data = ::haxe::io::Bytes_obj::alloc((b27->length * 4));
HXDLIN(  20)															{
HXLINE(  20)																int len6 = b27->length;
HXDLIN(  20)																int w4 = 0;
HXDLIN(  20)																{
HXLINE(  20)																	int _g60 = 0;
HXDLIN(  20)																	int _g61 = b27->height;
HXDLIN(  20)																	while((_g60 < _g61)){
HXLINE(  20)																		_g60 = (_g60 + 1);
HXDLIN(  20)																		int y13 = (_g60 - 1);
HXDLIN(  20)																		{
HXLINE(  20)																			int _g62 = 0;
HXDLIN(  20)																			int _g63 = b27->width;
HXDLIN(  20)																			while((_g62 < _g63)){
HXLINE(  20)																				_g62 = (_g62 + 1);
HXDLIN(  20)																				int x12 = (_g62 - 1);
HXDLIN(  20)																				{
HXLINE(  20)																					w4 = (w4 + 1);
HXDLIN(  20)																					b27->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w4 = (w4 + 1);
HXDLIN(  20)																					b27->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w4 = (w4 + 1);
HXDLIN(  20)																					b27->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w4 = (w4 + 1);
HXDLIN(  20)																					b27->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage4 = b27;
            													}
            													break;
            													case (int)1: {
HXLINE(  20)														 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::ArrIntImg a17 = arrI3;
HXDLIN(  20)														{
HXLINE(  20)															a17->width = width3;
HXDLIN(  20)															a17->height = height3;
HXDLIN(  20)															a17->data = ::Array_obj< int >::__new(0);
HXDLIN(  20)															a17->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  20)															{
HXLINE(  20)																int _g64 = 0;
HXDLIN(  20)																int _g65 = a17->length;
HXDLIN(  20)																while((_g64 < _g65)){
HXLINE(  20)																	_g64 = (_g64 + 1);
HXDLIN(  20)																	int i26 = (_g64 - 1);
HXDLIN(  20)																	a17->data[i26] = 0;
            																}
            															}
            														}
HXDLIN(  20)														undoImage4 = a17;
            													}
            													break;
            													case (int)2: {
HXLINE(  20)														 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::U32ArrImg b28 = u32a3;
HXDLIN(  20)														{
HXLINE(  20)															b28->width = width3;
HXDLIN(  20)															b28->height = height3;
HXDLIN(  20)															b28->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  20)															int size3 = (b28->length * 4);
HXDLIN(  20)															b28->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  20)															{
HXLINE(  20)																int _g66 = 0;
HXDLIN(  20)																int _g67 = b28->length;
HXDLIN(  20)																while((_g66 < _g67)){
HXLINE(  20)																	_g66 = (_g66 + 1);
HXDLIN(  20)																	int i27 = (_g66 - 1);
HXDLIN(  20)																	{
HXLINE(  20)																		 ::haxe::io::ArrayBufferViewImpl this96 = b28->data;
HXDLIN(  20)																		bool undoImage5;
HXDLIN(  20)																		if ((i27 >= 0)) {
HXLINE(  20)																			undoImage5 = (i27 < (this96->byteLength >> 2));
            																		}
            																		else {
HXLINE(  20)																			undoImage5 = false;
            																		}
HXDLIN(  20)																		if (undoImage5) {
HXLINE(  20)																			 ::haxe::io::Bytes _this3 = this96->bytes;
HXDLIN(  20)																			int pos3 = ((i27 << 2) + this96->byteOffset);
HXDLIN(  20)																			_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage4 = b28;
            													}
            													break;
            													case (int)3: {
HXLINE(  20)														 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::VecIntImg v6 = vec3;
HXDLIN(  20)														{
HXLINE(  20)															v6->width = width3;
HXDLIN(  20)															v6->height = height3;
HXDLIN(  20)															v6->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  20)															v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN(  20)															{
HXLINE(  20)																int _g68 = 0;
HXDLIN(  20)																int _g69 = v6->length;
HXDLIN(  20)																while((_g68 < _g69)){
HXLINE(  20)																	_g68 = (_g68 + 1);
HXDLIN(  20)																	int i28 = (_g68 - 1);
HXDLIN(  20)																	v6->data->__unsafe_set(i28,0);
            																}
            															}
            														}
HXDLIN(  20)														undoImage4 = v6;
            													}
            													break;
            													case (int)4: {
HXLINE(  20)														 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::StackIntImg b29 = sInt3;
HXDLIN(  20)														{
HXLINE(  20)															b29->width = width3;
HXDLIN(  20)															b29->height = height3;
HXDLIN(  20)															b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  20)															b29->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  20)															{
HXLINE(  20)																int len7 = b29->length;
HXDLIN(  20)																 ::haxe::ds::GenericStack_Int d3 = b29->data;
HXDLIN(  20)																if (::hx::IsNull( d3->head )) {
HXLINE(  20)																	int _g70 = 0;
HXDLIN(  20)																	int _g71 = len7;
HXDLIN(  20)																	while((_g70 < _g71)){
HXLINE(  20)																		_g70 = (_g70 + 1);
HXDLIN(  20)																		int i29 = (_g70 - 1);
HXDLIN(  20)																		d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            																	}
            																}
            																else {
HXLINE(  20)																	int _g72 = 0;
HXDLIN(  20)																	int _g73 = len7;
HXDLIN(  20)																	while((_g72 < _g73)){
HXLINE(  20)																		_g72 = (_g72 + 1);
HXDLIN(  20)																		int i30 = (_g72 - 1);
HXDLIN(  20)																		{
HXLINE(  20)																			 ::haxe::ds::GenericCell_Int l3 = b29->data->head;
HXDLIN(  20)																			 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  20)																			{
HXLINE(  20)																				int _g74 = 0;
HXDLIN(  20)																				int _g75 = i30;
HXDLIN(  20)																				while((_g74 < _g75)){
HXLINE(  20)																					_g74 = (_g74 + 1);
HXDLIN(  20)																					int i31 = (_g74 - 1);
HXLINE( 345)																					prev3 = l3;
HXLINE( 346)																					l3 = l3->next;
            																				}
            																			}
HXLINE(  20)																			if (::hx::IsNull( prev3 )) {
HXLINE(  20)																				b29->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  20)																				l3 = null();
            																			}
            																			else {
HXLINE(  20)																				prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  20)																				l3 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage4 = b29;
            													}
            													break;
            												}
HXDLIN(  20)												this95->image = undoImage4;
HXDLIN(  20)												this95->width = width3;
HXDLIN(  20)												this95->height = height3;
HXDLIN(  20)												this95->imageType = ( (int)(imageType3) );
HXDLIN(  20)												undoImage3 = this95;
HXDLIN(  20)												{
HXLINE(  20)													int rectLeft1 = xIter31->start;
HXDLIN(  20)													int rectTop1 = yIter31->start;
HXDLIN(  20)													int rectRight1 = xIter31->max;
HXDLIN(  20)													bool forceClear2 = false;
HXDLIN(  20)													{
HXLINE(  20)														int _g76 = rectTop1;
HXDLIN(  20)														int _g77 = yIter31->max;
HXDLIN(  20)														while((_g76 < _g77)){
HXLINE(  20)															_g76 = (_g76 + 1);
HXDLIN(  20)															int dy3 = (_g76 - 1);
HXDLIN(  20)															{
HXLINE(  20)																int _g78 = rectLeft1;
HXDLIN(  20)																int _g79 = rectRight1;
HXDLIN(  20)																while((_g78 < _g79)){
HXLINE(  20)																	_g78 = (_g78 + 1);
HXDLIN(  20)																	int dx3 = (_g78 - 1);
HXDLIN(  20)																	::Dynamic this97 = this94->image;
HXDLIN(  20)																	int index12;
HXDLIN(  20)																	if (this94->useVirtualPos) {
HXLINE(  20)																		index12 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this94->virtualY) * ( (Float)(this94->width) )) + dx3) - this94->virtualX));
            																	}
            																	else {
HXLINE(  20)																		index12 = ::Std_obj::_hx_int(( (Float)(((dy3 * this94->width) + dx3)) ));
            																	}
HXDLIN(  20)																	int c10 = ::iterMagic::Iimg_obj::get(this97,index12);
HXDLIN(  20)																	int col2;
HXDLIN(  20)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																		col2 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            																	}
            																	else {
HXLINE(  20)																		col2 = c10;
            																	}
HXDLIN(  20)																	bool _hx_tmp25;
HXDLIN(  20)																	if (this94->useMask) {
HXLINE(  20)																		_hx_tmp25 = ::hx::IsNotNull( this94->mask );
            																	}
            																	else {
HXLINE(  20)																		_hx_tmp25 = false;
            																	}
HXDLIN(  20)																	if (_hx_tmp25) {
HXLINE(  20)																		 ::pi_xy::ImageStruct this98 = this94->mask;
HXDLIN(  20)																		::Dynamic this99 = this98->image;
HXDLIN(  20)																		int index13;
HXDLIN(  20)																		if (this98->useVirtualPos) {
HXLINE(  20)																			index13 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this98->virtualY) * ( (Float)(this98->width) )) + dx3) - this98->virtualX));
            																		}
            																		else {
HXLINE(  20)																			index13 = ::Std_obj::_hx_int(( (Float)(((dy3 * this98->width) + dx3)) ));
            																		}
HXDLIN(  20)																		int c11 = ::iterMagic::Iimg_obj::get(this99,index13);
HXDLIN(  20)																		int v7;
HXDLIN(  20)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																			v7 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            																		}
            																		else {
HXLINE(  20)																			v7 = c11;
            																		}
HXDLIN(  20)																		int maskPixel2 = v7;
HXDLIN(  20)																		int this100 = col2;
HXDLIN(  20)																		if ((maskPixel2 == 0)) {
HXLINE(  20)																			col2 = this100;
            																		}
            																		else {
HXLINE(  20)																			Float m02;
HXDLIN(  20)																			int this101 = ((maskPixel2 >> 24) & 255);
HXDLIN(  20)																			if ((this101 == 0)) {
HXLINE(  20)																				m02 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m02 = (( (Float)(this101) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m12;
HXDLIN(  20)																			int this102 = ((maskPixel2 >> 16) & 255);
HXDLIN(  20)																			if ((this102 == 0)) {
HXLINE(  20)																				m12 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m12 = (( (Float)(this102) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m22;
HXDLIN(  20)																			int this103 = ((maskPixel2 >> 8) & 255);
HXDLIN(  20)																			if ((this103 == 0)) {
HXLINE(  20)																				m22 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m22 = (( (Float)(this103) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m32;
HXDLIN(  20)																			int this104 = (maskPixel2 & 255);
HXDLIN(  20)																			if ((this104 == 0)) {
HXLINE(  20)																				m32 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m32 = (( (Float)(this104) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this100 >> 24) & 255)) )));
HXDLIN(  20)																			int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this100 >> 16) & 255)) )));
HXDLIN(  20)																			int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this100 >> 8) & 255)) )));
HXDLIN(  20)																			int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this100 & 255)) )));
HXDLIN(  20)																			col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN(  20)																	if ((col2 != 0)) {
HXLINE(  20)																		int x13 = (dx3 - rectLeft1);
HXDLIN(  20)																		int y14 = (dy3 - rectTop1);
HXDLIN(  20)																		int c12 = col2;
HXDLIN(  20)																		bool _hx_tmp26;
HXDLIN(  20)																		if ((((c12 >> 24) & 255) < 254)) {
HXLINE(  20)																			_hx_tmp26 = undoImage3->transparent;
            																		}
            																		else {
HXLINE(  20)																			_hx_tmp26 = false;
            																		}
HXDLIN(  20)																		if (_hx_tmp26) {
HXLINE(  20)																			int location6;
HXDLIN(  20)																			if (undoImage3->useVirtualPos) {
HXLINE(  20)																				location6 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x13) - undoImage3->virtualX));
            																			}
            																			else {
HXLINE(  20)																				location6 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage3->width) + x13)) ));
            																			}
HXDLIN(  20)																			int this105 = ::iterMagic::Iimg_obj::get(undoImage3->image,location6);
HXDLIN(  20)																			int this106;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				this106 = ((((((this105 >> 24) & 255) << 24) | ((this105 & 255) << 16)) | (((this105 >> 8) & 255) << 8)) | ((this105 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				this106 = this105;
            																			}
HXDLIN(  20)																			Float a18;
HXDLIN(  20)																			int this107 = ((this106 >> 24) & 255);
HXDLIN(  20)																			if ((this107 == 0)) {
HXLINE(  20)																				a18 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a18 = (( (Float)(this107) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r16;
HXDLIN(  20)																			int this108 = ((this106 >> 16) & 255);
HXDLIN(  20)																			if ((this108 == 0)) {
HXLINE(  20)																				r16 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r16 = (( (Float)(this108) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g16;
HXDLIN(  20)																			int this109 = ((this106 >> 8) & 255);
HXDLIN(  20)																			if ((this109 == 0)) {
HXLINE(  20)																				g16 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g16 = (( (Float)(this109) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b110;
HXDLIN(  20)																			int this110 = (this106 & 255);
HXDLIN(  20)																			if ((this110 == 0)) {
HXLINE(  20)																				b110 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b110 = (( (Float)(this110) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a26;
HXDLIN(  20)																			int this111 = ((col2 >> 24) & 255);
HXDLIN(  20)																			if ((this111 == 0)) {
HXLINE(  20)																				a26 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a26 = (( (Float)(this111) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r26;
HXDLIN(  20)																			int this112 = ((col2 >> 16) & 255);
HXDLIN(  20)																			if ((this112 == 0)) {
HXLINE(  20)																				r26 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r26 = (( (Float)(this112) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g26;
HXDLIN(  20)																			int this113 = ((col2 >> 8) & 255);
HXDLIN(  20)																			if ((this113 == 0)) {
HXLINE(  20)																				g26 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g26 = (( (Float)(this113) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b210;
HXDLIN(  20)																			int this114 = (col2 & 255);
HXDLIN(  20)																			if ((this114 == 0)) {
HXLINE(  20)																				b210 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b210 = (( (Float)(this114) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a36 = (a18 * (( (Float)(1) ) - a26));
HXDLIN(  20)																			int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN(  20)																			int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN(  20)																			int b30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a36) + (b210 * a26))));
HXDLIN(  20)																			int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  20)																			int blended6 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b30);
HXDLIN(  20)																			{
HXLINE(  20)																				int _hx_tmp27;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					_hx_tmp27 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					_hx_tmp27 = blended6;
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(undoImage3->image,location6,_hx_tmp27);
            																			}
            																		}
            																		else {
HXLINE(  20)																			::Dynamic this115 = undoImage3->image;
HXDLIN(  20)																			int index14;
HXDLIN(  20)																			if (undoImage3->useVirtualPos) {
HXLINE(  20)																				index14 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x13) - undoImage3->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index14 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage3->width) + x13)) ));
            																			}
HXDLIN(  20)																			int _hx_tmp28;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				_hx_tmp28 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				_hx_tmp28 = c12;
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this115,index14,_hx_tmp28);
            																		}
            																	}
            																	else {
HXLINE(  20)																		if (forceClear2) {
HXLINE(  20)																			::Dynamic this116 = undoImage3->image;
HXDLIN(  20)																			int x14 = (dx3 - rectLeft1);
HXDLIN(  20)																			int y15 = (dy3 - rectTop1);
HXDLIN(  20)																			int index15;
HXDLIN(  20)																			if (undoImage3->useVirtualPos) {
HXLINE(  20)																				index15 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x14) - undoImage3->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index15 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage3->width) + x14)) ));
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this116,index15,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  20)											bool found1 = false;
HXDLIN(  20)											Float s1 = ((Float)0.);
HXDLIN(  20)											Float t1 = ((Float)0.);
HXDLIN(  20)											Float sxx1 = ((Float)0.);
HXDLIN(  20)											Float txx1 = ((Float)0.);
HXDLIN(  20)											{
HXLINE(  20)												int _g_min2 = xIter31->start;
HXDLIN(  20)												int _g_max2 = xIter31->max;
HXDLIN(  20)												while((_g_min2 < _g_max2)){
HXLINE(  20)													_g_min2 = (_g_min2 + 1);
HXDLIN(  20)													int x15 = (_g_min2 - 1);
HXLINE(  60)													sxx1 = (sx1 * ( (Float)(x15) ));
HXLINE(  61)													txx1 = (tx1 * ( (Float)(x15) ));
HXLINE(  62)													found1 = false;
HXLINE(  20)													{
HXLINE(  20)														int _g_min3 = yIter31->start;
HXDLIN(  20)														int _g_max3 = yIter31->max;
HXDLIN(  20)														while((_g_min3 < _g_max3)){
HXLINE(  20)															_g_min3 = (_g_min3 + 1);
HXDLIN(  20)															int y16 = (_g_min3 - 1);
HXLINE(  64)															s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y16) )));
HXLINE(  65)															t1 = ((t01 + txx1) + (ty1 * ( (Float)(y16) )));
HXLINE(  20)															bool _hx_tmp29;
HXDLIN(  20)															if (!((s1 <= 0))) {
HXLINE(  20)																_hx_tmp29 = (t1 <= 0);
            															}
            															else {
HXLINE(  20)																_hx_tmp29 = true;
            															}
HXDLIN(  20)															if (_hx_tmp29) {
HXLINE(  20)																if (found1) {
HXLINE(  20)																	goto _hx_goto_47;
            																}
            															}
            															else {
HXLINE(  20)																if (((s1 + t1) < A1)) {
HXLINE(  20)																	{
HXLINE(  20)																		int c13 = color2;
HXDLIN(  20)																		bool _hx_tmp30;
HXDLIN(  20)																		if ((((c13 >> 24) & 255) < 254)) {
HXLINE(  20)																			_hx_tmp30 = this94->transparent;
            																		}
            																		else {
HXLINE(  20)																			_hx_tmp30 = false;
            																		}
HXDLIN(  20)																		if (_hx_tmp30) {
HXLINE(  20)																			int location7;
HXDLIN(  20)																			if (this94->useVirtualPos) {
HXLINE(  20)																				location7 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - this94->virtualY) * ( (Float)(this94->width) )) + x15) - this94->virtualX));
            																			}
            																			else {
HXLINE(  20)																				location7 = ::Std_obj::_hx_int(( (Float)(((y16 * this94->width) + x15)) ));
            																			}
HXDLIN(  20)																			int this117 = ::iterMagic::Iimg_obj::get(this94->image,location7);
HXDLIN(  20)																			int this118;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				this118 = ((((((this117 >> 24) & 255) << 24) | ((this117 & 255) << 16)) | (((this117 >> 8) & 255) << 8)) | ((this117 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				this118 = this117;
            																			}
HXDLIN(  20)																			Float a110;
HXDLIN(  20)																			int this119 = ((this118 >> 24) & 255);
HXDLIN(  20)																			if ((this119 == 0)) {
HXLINE(  20)																				a110 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a110 = (( (Float)(this119) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r17;
HXDLIN(  20)																			int this120 = ((this118 >> 16) & 255);
HXDLIN(  20)																			if ((this120 == 0)) {
HXLINE(  20)																				r17 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r17 = (( (Float)(this120) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g17;
HXDLIN(  20)																			int this121 = ((this118 >> 8) & 255);
HXDLIN(  20)																			if ((this121 == 0)) {
HXLINE(  20)																				g17 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g17 = (( (Float)(this121) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b111;
HXDLIN(  20)																			int this122 = (this118 & 255);
HXDLIN(  20)																			if ((this122 == 0)) {
HXLINE(  20)																				b111 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b111 = (( (Float)(this122) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a27;
HXDLIN(  20)																			int this123 = ((color2 >> 24) & 255);
HXDLIN(  20)																			if ((this123 == 0)) {
HXLINE(  20)																				a27 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a27 = (( (Float)(this123) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r27;
HXDLIN(  20)																			int this124 = ((color2 >> 16) & 255);
HXDLIN(  20)																			if ((this124 == 0)) {
HXLINE(  20)																				r27 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r27 = (( (Float)(this124) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g27;
HXDLIN(  20)																			int this125 = ((color2 >> 8) & 255);
HXDLIN(  20)																			if ((this125 == 0)) {
HXLINE(  20)																				g27 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g27 = (( (Float)(this125) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b211;
HXDLIN(  20)																			int this126 = (color2 & 255);
HXDLIN(  20)																			if ((this126 == 0)) {
HXLINE(  20)																				b211 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b211 = (( (Float)(this126) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a37 = (a110 * (( (Float)(1) ) - a27));
HXDLIN(  20)																			int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN(  20)																			int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN(  20)																			int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a37) + (b211 * a27))));
HXDLIN(  20)																			int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN(  20)																			int blended7 = ((((a20 << 24) | (r9 << 16)) | (g9 << 8)) | b31);
HXDLIN(  20)																			{
HXLINE(  20)																				int _hx_tmp31;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					_hx_tmp31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					_hx_tmp31 = blended7;
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(this94->image,location7,_hx_tmp31);
            																			}
            																		}
            																		else {
HXLINE(  20)																			::Dynamic this127 = this94->image;
HXDLIN(  20)																			int index16;
HXDLIN(  20)																			if (this94->useVirtualPos) {
HXLINE(  20)																				index16 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - this94->virtualY) * ( (Float)(this94->width) )) + x15) - this94->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index16 = ::Std_obj::_hx_int(( (Float)(((y16 * this94->width) + x15)) ));
            																			}
HXDLIN(  20)																			int _hx_tmp32;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				_hx_tmp32 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				_hx_tmp32 = c13;
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this127,index16,_hx_tmp32);
            																		}
            																	}
HXLINE(  73)																	found1 = true;
            																}
            																else {
HXLINE(  20)																	if (found1) {
HXLINE(  20)																		goto _hx_goto_47;
            																	}
            																}
            															}
            														}
            														_hx_goto_47:;
            													}
            												}
            											}
HXDLIN(  20)											if ((hasHit1 == true)) {
HXLINE(  20)												 ::pi_xy::algo::HitTri v8 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX,cy2,bx1,by1,cx2,cy3,true);
HXDLIN(  20)												if (hasUndo1) {
HXLINE(  20)													v8->undoImage = undoImage3;
HXDLIN(  20)													v8->undoX = xIter31->start;
HXDLIN(  20)													v8->undoY = yIter31->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  46)								lastX1 = nextX1;
HXLINE(  47)								lastY1 = nextY1;
            							}
            						}
            					}
            				}
HXLINE(  20)				{
HXLINE(  20)					int r_x3 = 0;
HXDLIN(  20)					int r_y3 = ::Std_obj::_hx_int(( (Float)(dy1) ));
HXDLIN(  20)					int r_w3 = ::Std_obj::_hx_int(wid);
HXDLIN(  20)					int r_h3 = ::Std_obj::_hx_int(( (Float)(tall) ));
HXDLIN(  20)					int xmax3 = ((r_x3 + r_w3) + 1);
HXDLIN(  20)					int ymax3 = ((r_y3 + r_h3) + 1);
HXDLIN(  20)					int ii_min22 = r_x3;
HXDLIN(  20)					int ii_max22 = xmax3;
HXDLIN(  20)					int xRange__start3 = ii_min22;
HXDLIN(  20)					int xRange__max3 = ii_max22;
HXDLIN(  20)					int ii_min23 = r_y3;
HXDLIN(  20)					int ii_max23 = ymax3;
HXDLIN(  20)					int yRange__start3 = ii_min23;
HXDLIN(  20)					int yRange__max3 = ii_max23;
HXDLIN(  20)					int range_x3 = xRange__start3;
HXDLIN(  20)					int range_y3 = (yRange__start3 - 1);
HXDLIN(  20)					int range_xReset3 = range_x3;
HXDLIN(  20)					int range_yReset3 = range_y3;
HXDLIN(  20)					int range_xMax3 = (xRange__max3 - 2);
HXDLIN(  20)					int range_yMax3 = (yRange__max3 - 2);
HXDLIN(  20)					int _this_min3 = 0;
HXDLIN(  20)					int _this_max3 = ::Std_obj::_hx_int(( (Float)(((xRange__max3 - xRange__start3) * (yRange__max3 - yRange__start3))) ));
HXDLIN(  20)					while((_this_min3 < _this_max3)){
HXLINE(  20)						_this_min3 = (_this_min3 + 1);
HXDLIN(  20)						int i32 = (_this_min3 - 1);
HXDLIN(  20)						if ((range_y3 > range_yMax3)) {
HXLINE(  20)							range_y3 = range_yReset3;
HXDLIN(  20)							range_x3 = (range_x3 + 1);
            						}
HXDLIN(  20)						range_y3 = (range_y3 + 1);
HXDLIN(  20)						int i33 = i32;
HXDLIN(  20)						{
HXLINE(  20)							int x16 = range_x3;
HXDLIN(  20)							int y17 = range_y3;
HXDLIN(  20)							int c14 = color2;
HXDLIN(  20)							bool _hx_tmp33;
HXDLIN(  20)							if ((((c14 >> 24) & 255) < 254)) {
HXLINE(  20)								_hx_tmp33 = temp1->transparent;
            							}
            							else {
HXLINE(  20)								_hx_tmp33 = false;
            							}
HXDLIN(  20)							if (_hx_tmp33) {
HXLINE(  20)								int location8;
HXDLIN(  20)								if (temp1->useVirtualPos) {
HXLINE(  20)									location8 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + x16) - temp1->virtualX));
            								}
            								else {
HXLINE(  20)									location8 = ::Std_obj::_hx_int(( (Float)(((y17 * temp1->width) + x16)) ));
            								}
HXDLIN(  20)								int this128 = ::iterMagic::Iimg_obj::get(temp1->image,location8);
HXDLIN(  20)								int this129;
HXDLIN(  20)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)									this129 = ((((((this128 >> 24) & 255) << 24) | ((this128 & 255) << 16)) | (((this128 >> 8) & 255) << 8)) | ((this128 >> 16) & 255));
            								}
            								else {
HXLINE(  20)									this129 = this128;
            								}
HXDLIN(  20)								Float a111;
HXDLIN(  20)								int this130 = ((this129 >> 24) & 255);
HXDLIN(  20)								if ((this130 == 0)) {
HXLINE(  20)									a111 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									a111 = (( (Float)(this130) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float r18;
HXDLIN(  20)								int this131 = ((this129 >> 16) & 255);
HXDLIN(  20)								if ((this131 == 0)) {
HXLINE(  20)									r18 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									r18 = (( (Float)(this131) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float g18;
HXDLIN(  20)								int this132 = ((this129 >> 8) & 255);
HXDLIN(  20)								if ((this132 == 0)) {
HXLINE(  20)									g18 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									g18 = (( (Float)(this132) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float b112;
HXDLIN(  20)								int this133 = (this129 & 255);
HXDLIN(  20)								if ((this133 == 0)) {
HXLINE(  20)									b112 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									b112 = (( (Float)(this133) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float a28;
HXDLIN(  20)								int this134 = ((color2 >> 24) & 255);
HXDLIN(  20)								if ((this134 == 0)) {
HXLINE(  20)									a28 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									a28 = (( (Float)(this134) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float r28;
HXDLIN(  20)								int this135 = ((color2 >> 16) & 255);
HXDLIN(  20)								if ((this135 == 0)) {
HXLINE(  20)									r28 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									r28 = (( (Float)(this135) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float g28;
HXDLIN(  20)								int this136 = ((color2 >> 8) & 255);
HXDLIN(  20)								if ((this136 == 0)) {
HXLINE(  20)									g28 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									g28 = (( (Float)(this136) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float b212;
HXDLIN(  20)								int this137 = (color2 & 255);
HXDLIN(  20)								if ((this137 == 0)) {
HXLINE(  20)									b212 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									b212 = (( (Float)(this137) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float a38 = (a111 * (( (Float)(1) ) - a28));
HXDLIN(  20)								int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r28 * a28))));
HXDLIN(  20)								int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g28 * a28))));
HXDLIN(  20)								int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a38) + (b212 * a28))));
HXDLIN(  20)								int a29 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a28)));
HXDLIN(  20)								int blended8 = ((((a29 << 24) | (r10 << 16)) | (g10 << 8)) | b32);
HXDLIN(  20)								{
HXLINE(  20)									int _hx_tmp34;
HXDLIN(  20)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)										_hx_tmp34 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            									}
            									else {
HXLINE(  20)										_hx_tmp34 = blended8;
            									}
HXDLIN(  20)									::iterMagic::Iimg_obj::set(temp1->image,location8,_hx_tmp34);
            								}
            							}
            							else {
HXLINE(  20)								::Dynamic this138 = temp1->image;
HXDLIN(  20)								int index17;
HXDLIN(  20)								if (temp1->useVirtualPos) {
HXLINE(  20)									index17 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + x16) - temp1->virtualX));
            								}
            								else {
HXLINE(  20)									index17 = ::Std_obj::_hx_int(( (Float)(((y17 * temp1->width) + x16)) ));
            								}
HXDLIN(  20)								int _hx_tmp35;
HXDLIN(  20)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)									_hx_tmp35 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            								}
            								else {
HXLINE(  20)									_hx_tmp35 = c14;
            								}
HXDLIN(  20)								::iterMagic::Iimg_obj::set(this138,index17,_hx_tmp35);
            							}
            						}
            					}
            				}
HXDLIN(  20)				{
HXLINE(  20)					 ::pi_xy::ImageStruct this139 = temp1;
HXDLIN(  20)					Float cx3 = ( (Float)(dx1) );
HXDLIN(  20)					Float rx1 = ( (Float)(dx1) );
HXDLIN(  20)					{
HXLINE(  20)						 ::Dynamic targetError2 = ((Float)1.05);
HXDLIN(  20)						if (::hx::IsNull( targetError2 )) {
HXLINE( 113)							targetError2 = ((Float)1.05);
            						}
HXLINE(  20)						Float rSmall2;
HXDLIN(  20)						if ((rx1 > bottomRadius)) {
HXLINE(  20)							rSmall2 = bottomRadius;
            						}
            						else {
HXLINE(  20)							rSmall2 = rx1;
            						}
HXDLIN(  20)						 ::Dynamic targetE2 = ( (Float)(targetError2) );
HXDLIN(  20)						if (::hx::IsNull( targetE2 )) {
HXLINE(  20)							targetE2 = ((Float)1.05);
            						}
HXDLIN(  20)						int result2 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE2) ) / rSmall2)))));
HXDLIN(  20)						int noSides2;
HXDLIN(  20)						if ((result2 < 12)) {
HXLINE(  20)							noSides2 = 12;
            						}
            						else {
HXLINE(  20)							if ((result2 > 500)) {
HXLINE(  20)								noSides2 = 500;
            							}
            							else {
HXLINE(  20)								noSides2 = result2;
            							}
            						}
HXDLIN(  20)						int sides2 = (::Math_obj::ceil((( (Float)(noSides2) ) / ( (Float)(4) ))) * 4);
HXDLIN(  20)						Float theta2 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides2) ));
HXDLIN(  20)						Float omega2 = (::Math_obj::PI / ( (Float)(2) ));
HXDLIN(  20)						int quarter2 = ::Std_obj::_hx_int((( (Float)(sides2) ) / ( (Float)(4) )));
HXDLIN(  20)						Float lastX2 = ((Float)0.);
HXDLIN(  20)						Float lastY2 = ((Float)0.);
HXDLIN(  20)						{
HXLINE(  26)							lastX2 = (cx3 + (rx1 * ::Math_obj::cos(((( (Float)(sides2) ) * theta2) + omega2))));
HXLINE(  27)							lastY2 = (lowerY + (bottomRadius * ::Math_obj::sin(((( (Float)(sides2) ) * theta2) + omega2))));
            						}
HXLINE(  20)						{
HXLINE(  20)							int _g80 = 0;
HXDLIN(  20)							int _g81 = (quarter2 + 1);
HXDLIN(  20)							while((_g80 < _g81)){
HXLINE(  20)								_g80 = (_g80 + 1);
HXDLIN(  20)								int i34 = (_g80 - 1);
HXDLIN(  20)								Float nextX2 = (cx3 + (rx1 * ::Math_obj::cos((((( (Float)(i34) ) * theta2) + ((Float)0.0001)) + omega2))));
HXDLIN(  20)								Float nextY2 = (lowerY + (bottomRadius * ::Math_obj::sin((((( (Float)(i34) ) * theta2) + ((Float)0.0001)) + omega2))));
HXDLIN(  20)								{
HXLINE(  20)									 ::pi_xy::ImageStruct this140 = this139;
HXDLIN(  20)									bool hasHit2 = false;
HXDLIN(  20)									bool hasUndo2 = false;
HXDLIN(  20)									{
HXLINE(  20)										Float bx2 = lastX2;
HXDLIN(  20)										Float by2 = lastY2;
HXDLIN(  20)										Float cx4 = nextX2;
HXDLIN(  20)										Float cy4 = nextY2;
HXDLIN(  20)										bool adjustWinding2 = (((((cx3 * by2) - (bx2 * lowerY)) + ((bx2 * cy4) - (cx4 * by2))) + ((cx4 * lowerY) - (cx3 * cy4))) > 0);
HXDLIN(  20)										if (!(adjustWinding2)) {
HXLINE(  20)											Float bx_2 = bx2;
HXDLIN(  20)											Float by_2 = by2;
HXLINE(  25)											bx2 = cx4;
HXLINE(  26)											by2 = cy4;
HXLINE(  27)											cx4 = bx_2;
HXLINE(  28)											cy4 = by_2;
            										}
HXLINE(  20)										{
HXLINE(  20)											Float s02 = ((lowerY * cx4) - (cx3 * cy4));
HXDLIN(  20)											Float sx2 = (cy4 - lowerY);
HXDLIN(  20)											Float sy2 = (cx3 - cx4);
HXDLIN(  20)											Float t02 = ((cx3 * by2) - (lowerY * bx2));
HXDLIN(  20)											Float tx2 = (lowerY - by2);
HXDLIN(  20)											Float ty2 = (bx2 - cx3);
HXDLIN(  20)											Float A2 = ((((-(by2) * cx4) + (lowerY * (-(bx2) + cx4))) + (cx3 * (by2 - cy4))) + (bx2 * cy4));
HXDLIN(  20)											 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  20)											if ((cx3 > bx2)) {
HXLINE(  20)												if ((cx3 > cx4)) {
HXLINE(  20)													int min8;
HXDLIN(  20)													if ((bx2 > cx4)) {
HXLINE(  20)														min8 = ::Math_obj::floor(cx4);
            													}
            													else {
HXLINE(  20)														min8 = ::Math_obj::floor(bx2);
            													}
HXDLIN(  20)													int ii_min24 = min8;
HXDLIN(  20)													int ii_max24 = ::Math_obj::ceil(cx3);
HXDLIN(  20)													xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            												}
            												else {
HXLINE(  20)													int ii_min25 = ::Math_obj::floor(bx2);
HXDLIN(  20)													int ii_max25 = ::Math_obj::ceil(cx4);
HXDLIN(  20)													xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            												}
            											}
            											else {
HXLINE(  20)												if ((bx2 > cx4)) {
HXLINE(  20)													int min9;
HXDLIN(  20)													if ((cx3 > cx4)) {
HXLINE(  20)														min9 = ::Math_obj::floor(cx4);
            													}
            													else {
HXLINE(  20)														min9 = ::Math_obj::ceil(cx3);
            													}
HXDLIN(  20)													int ii_min26 = min9;
HXDLIN(  20)													int ii_max26 = ::Math_obj::ceil(bx2);
HXDLIN(  20)													xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            												}
            												else {
HXLINE(  20)													int ii_min27 = ::Math_obj::floor(cx3);
HXDLIN(  20)													int ii_max27 = ::Math_obj::ceil(cx4);
HXDLIN(  20)													xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            												}
            											}
HXDLIN(  20)											 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  20)											if ((lowerY > by2)) {
HXLINE(  20)												if ((lowerY > cy4)) {
HXLINE(  20)													int min10;
HXDLIN(  20)													if ((by2 > cy4)) {
HXLINE(  20)														min10 = ::Math_obj::floor(cy4);
            													}
            													else {
HXLINE(  20)														min10 = ::Math_obj::floor(by2);
            													}
HXDLIN(  20)													int ii_min28 = min10;
HXDLIN(  20)													int ii_max28 = ::Math_obj::ceil(lowerY);
HXDLIN(  20)													yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            												}
            												else {
HXLINE(  20)													int ii_min29 = ::Math_obj::floor(by2);
HXDLIN(  20)													int ii_max29 = ::Math_obj::ceil(cy4);
HXDLIN(  20)													yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            												}
            											}
            											else {
HXLINE(  20)												if ((by2 > cy4)) {
HXLINE(  20)													int min11;
HXDLIN(  20)													if ((lowerY > cy4)) {
HXLINE(  20)														min11 = ::Math_obj::floor(cy4);
            													}
            													else {
HXLINE(  20)														min11 = ::Math_obj::ceil(lowerY);
            													}
HXDLIN(  20)													int ii_min30 = min11;
HXDLIN(  20)													int ii_max30 = ::Math_obj::ceil(by2);
HXDLIN(  20)													yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            												}
            												else {
HXLINE(  20)													int ii_min31 = ::Math_obj::floor(lowerY);
HXDLIN(  20)													int ii_max31 = ::Math_obj::ceil(cy4);
HXDLIN(  20)													yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            												}
            											}
HXDLIN(  20)											 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  20)											if (hasUndo2) {
HXLINE(  20)												int width4 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  20)												int height4 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  20)												 ::Dynamic imageType4 = null();
HXDLIN(  20)												 ::pi_xy::ImageStruct this141 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  20)												if (::hx::IsNull( imageType4 )) {
HXLINE(  54)													imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE(  20)												::Dynamic undoImage7;
HXDLIN(  20)												switch((int)(( (int)(imageType4) ))){
            													case (int)0: {
HXLINE(  20)														 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::BytesImg b33 = byt4;
HXDLIN(  20)														{
HXLINE(  20)															b33->width = width4;
HXDLIN(  20)															b33->height = height4;
HXDLIN(  20)															b33->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  20)															b33->data = ::haxe::io::Bytes_obj::alloc((b33->length * 4));
HXDLIN(  20)															{
HXLINE(  20)																int len8 = b33->length;
HXDLIN(  20)																int w5 = 0;
HXDLIN(  20)																{
HXLINE(  20)																	int _g82 = 0;
HXDLIN(  20)																	int _g83 = b33->height;
HXDLIN(  20)																	while((_g82 < _g83)){
HXLINE(  20)																		_g82 = (_g82 + 1);
HXDLIN(  20)																		int y18 = (_g82 - 1);
HXDLIN(  20)																		{
HXLINE(  20)																			int _g84 = 0;
HXDLIN(  20)																			int _g85 = b33->width;
HXDLIN(  20)																			while((_g84 < _g85)){
HXLINE(  20)																				_g84 = (_g84 + 1);
HXDLIN(  20)																				int x17 = (_g84 - 1);
HXDLIN(  20)																				{
HXLINE(  20)																					w5 = (w5 + 1);
HXDLIN(  20)																					b33->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w5 = (w5 + 1);
HXDLIN(  20)																					b33->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w5 = (w5 + 1);
HXDLIN(  20)																					b33->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w5 = (w5 + 1);
HXDLIN(  20)																					b33->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage7 = b33;
            													}
            													break;
            													case (int)1: {
HXLINE(  20)														 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::ArrIntImg a30 = arrI4;
HXDLIN(  20)														{
HXLINE(  20)															a30->width = width4;
HXDLIN(  20)															a30->height = height4;
HXDLIN(  20)															a30->data = ::Array_obj< int >::__new(0);
HXDLIN(  20)															a30->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  20)															{
HXLINE(  20)																int _g86 = 0;
HXDLIN(  20)																int _g87 = a30->length;
HXDLIN(  20)																while((_g86 < _g87)){
HXLINE(  20)																	_g86 = (_g86 + 1);
HXDLIN(  20)																	int i35 = (_g86 - 1);
HXDLIN(  20)																	a30->data[i35] = 0;
            																}
            															}
            														}
HXDLIN(  20)														undoImage7 = a30;
            													}
            													break;
            													case (int)2: {
HXLINE(  20)														 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::U32ArrImg b34 = u32a4;
HXDLIN(  20)														{
HXLINE(  20)															b34->width = width4;
HXDLIN(  20)															b34->height = height4;
HXDLIN(  20)															b34->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  20)															int size4 = (b34->length * 4);
HXDLIN(  20)															b34->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN(  20)															{
HXLINE(  20)																int _g88 = 0;
HXDLIN(  20)																int _g89 = b34->length;
HXDLIN(  20)																while((_g88 < _g89)){
HXLINE(  20)																	_g88 = (_g88 + 1);
HXDLIN(  20)																	int i36 = (_g88 - 1);
HXDLIN(  20)																	{
HXLINE(  20)																		 ::haxe::io::ArrayBufferViewImpl this142 = b34->data;
HXDLIN(  20)																		bool undoImage8;
HXDLIN(  20)																		if ((i36 >= 0)) {
HXLINE(  20)																			undoImage8 = (i36 < (this142->byteLength >> 2));
            																		}
            																		else {
HXLINE(  20)																			undoImage8 = false;
            																		}
HXDLIN(  20)																		if (undoImage8) {
HXLINE(  20)																			 ::haxe::io::Bytes _this4 = this142->bytes;
HXDLIN(  20)																			int pos4 = ((i36 << 2) + this142->byteOffset);
HXDLIN(  20)																			_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage7 = b34;
            													}
            													break;
            													case (int)3: {
HXLINE(  20)														 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::VecIntImg v9 = vec4;
HXDLIN(  20)														{
HXLINE(  20)															v9->width = width4;
HXDLIN(  20)															v9->height = height4;
HXDLIN(  20)															v9->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  20)															v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN(  20)															{
HXLINE(  20)																int _g90 = 0;
HXDLIN(  20)																int _g91 = v9->length;
HXDLIN(  20)																while((_g90 < _g91)){
HXLINE(  20)																	_g90 = (_g90 + 1);
HXDLIN(  20)																	int i37 = (_g90 - 1);
HXDLIN(  20)																	v9->data->__unsafe_set(i37,0);
            																}
            															}
            														}
HXDLIN(  20)														undoImage7 = v9;
            													}
            													break;
            													case (int)4: {
HXLINE(  20)														 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::StackIntImg b35 = sInt4;
HXDLIN(  20)														{
HXLINE(  20)															b35->width = width4;
HXDLIN(  20)															b35->height = height4;
HXDLIN(  20)															b35->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  20)															b35->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  20)															{
HXLINE(  20)																int len9 = b35->length;
HXDLIN(  20)																 ::haxe::ds::GenericStack_Int d4 = b35->data;
HXDLIN(  20)																if (::hx::IsNull( d4->head )) {
HXLINE(  20)																	int _g92 = 0;
HXDLIN(  20)																	int _g93 = len9;
HXDLIN(  20)																	while((_g92 < _g93)){
HXLINE(  20)																		_g92 = (_g92 + 1);
HXDLIN(  20)																		int i38 = (_g92 - 1);
HXDLIN(  20)																		d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            																	}
            																}
            																else {
HXLINE(  20)																	int _g94 = 0;
HXDLIN(  20)																	int _g95 = len9;
HXDLIN(  20)																	while((_g94 < _g95)){
HXLINE(  20)																		_g94 = (_g94 + 1);
HXDLIN(  20)																		int i39 = (_g94 - 1);
HXDLIN(  20)																		{
HXLINE(  20)																			 ::haxe::ds::GenericCell_Int l4 = b35->data->head;
HXDLIN(  20)																			 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN(  20)																			{
HXLINE(  20)																				int _g96 = 0;
HXDLIN(  20)																				int _g97 = i39;
HXDLIN(  20)																				while((_g96 < _g97)){
HXLINE(  20)																					_g96 = (_g96 + 1);
HXDLIN(  20)																					int i40 = (_g96 - 1);
HXLINE( 345)																					prev4 = l4;
HXLINE( 346)																					l4 = l4->next;
            																				}
            																			}
HXLINE(  20)																			if (::hx::IsNull( prev4 )) {
HXLINE(  20)																				b35->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  20)																				l4 = null();
            																			}
            																			else {
HXLINE(  20)																				prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  20)																				l4 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage7 = b35;
            													}
            													break;
            												}
HXDLIN(  20)												this141->image = undoImage7;
HXDLIN(  20)												this141->width = width4;
HXDLIN(  20)												this141->height = height4;
HXDLIN(  20)												this141->imageType = ( (int)(imageType4) );
HXDLIN(  20)												undoImage6 = this141;
HXDLIN(  20)												{
HXLINE(  20)													int rectLeft2 = xIter32->start;
HXDLIN(  20)													int rectTop2 = yIter32->start;
HXDLIN(  20)													int rectRight2 = xIter32->max;
HXDLIN(  20)													bool forceClear3 = false;
HXDLIN(  20)													{
HXLINE(  20)														int _g98 = rectTop2;
HXDLIN(  20)														int _g99 = yIter32->max;
HXDLIN(  20)														while((_g98 < _g99)){
HXLINE(  20)															_g98 = (_g98 + 1);
HXDLIN(  20)															int dy4 = (_g98 - 1);
HXDLIN(  20)															{
HXLINE(  20)																int _g100 = rectLeft2;
HXDLIN(  20)																int _g101 = rectRight2;
HXDLIN(  20)																while((_g100 < _g101)){
HXLINE(  20)																	_g100 = (_g100 + 1);
HXDLIN(  20)																	int dx4 = (_g100 - 1);
HXDLIN(  20)																	::Dynamic this143 = this140->image;
HXDLIN(  20)																	int index18;
HXDLIN(  20)																	if (this140->useVirtualPos) {
HXLINE(  20)																		index18 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this140->virtualY) * ( (Float)(this140->width) )) + dx4) - this140->virtualX));
            																	}
            																	else {
HXLINE(  20)																		index18 = ::Std_obj::_hx_int(( (Float)(((dy4 * this140->width) + dx4)) ));
            																	}
HXDLIN(  20)																	int c15 = ::iterMagic::Iimg_obj::get(this143,index18);
HXDLIN(  20)																	int col3;
HXDLIN(  20)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																		col3 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            																	}
            																	else {
HXLINE(  20)																		col3 = c15;
            																	}
HXDLIN(  20)																	bool _hx_tmp36;
HXDLIN(  20)																	if (this140->useMask) {
HXLINE(  20)																		_hx_tmp36 = ::hx::IsNotNull( this140->mask );
            																	}
            																	else {
HXLINE(  20)																		_hx_tmp36 = false;
            																	}
HXDLIN(  20)																	if (_hx_tmp36) {
HXLINE(  20)																		 ::pi_xy::ImageStruct this144 = this140->mask;
HXDLIN(  20)																		::Dynamic this145 = this144->image;
HXDLIN(  20)																		int index19;
HXDLIN(  20)																		if (this144->useVirtualPos) {
HXLINE(  20)																			index19 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this144->virtualY) * ( (Float)(this144->width) )) + dx4) - this144->virtualX));
            																		}
            																		else {
HXLINE(  20)																			index19 = ::Std_obj::_hx_int(( (Float)(((dy4 * this144->width) + dx4)) ));
            																		}
HXDLIN(  20)																		int c16 = ::iterMagic::Iimg_obj::get(this145,index19);
HXDLIN(  20)																		int v10;
HXDLIN(  20)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																			v10 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            																		}
            																		else {
HXLINE(  20)																			v10 = c16;
            																		}
HXDLIN(  20)																		int maskPixel3 = v10;
HXDLIN(  20)																		int this146 = col3;
HXDLIN(  20)																		if ((maskPixel3 == 0)) {
HXLINE(  20)																			col3 = this146;
            																		}
            																		else {
HXLINE(  20)																			Float m03;
HXDLIN(  20)																			int this147 = ((maskPixel3 >> 24) & 255);
HXDLIN(  20)																			if ((this147 == 0)) {
HXLINE(  20)																				m03 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m03 = (( (Float)(this147) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m13;
HXDLIN(  20)																			int this148 = ((maskPixel3 >> 16) & 255);
HXDLIN(  20)																			if ((this148 == 0)) {
HXLINE(  20)																				m13 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m13 = (( (Float)(this148) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m23;
HXDLIN(  20)																			int this149 = ((maskPixel3 >> 8) & 255);
HXDLIN(  20)																			if ((this149 == 0)) {
HXLINE(  20)																				m23 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m23 = (( (Float)(this149) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m33;
HXDLIN(  20)																			int this150 = (maskPixel3 & 255);
HXDLIN(  20)																			if ((this150 == 0)) {
HXLINE(  20)																				m33 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m33 = (( (Float)(this150) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this146 >> 24) & 255)) )));
HXDLIN(  20)																			int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this146 >> 16) & 255)) )));
HXDLIN(  20)																			int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this146 >> 8) & 255)) )));
HXDLIN(  20)																			int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this146 & 255)) )));
HXDLIN(  20)																			col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN(  20)																	if ((col3 != 0)) {
HXLINE(  20)																		int x18 = (dx4 - rectLeft2);
HXDLIN(  20)																		int y19 = (dy4 - rectTop2);
HXDLIN(  20)																		int c17 = col3;
HXDLIN(  20)																		bool _hx_tmp37;
HXDLIN(  20)																		if ((((c17 >> 24) & 255) < 254)) {
HXLINE(  20)																			_hx_tmp37 = undoImage6->transparent;
            																		}
            																		else {
HXLINE(  20)																			_hx_tmp37 = false;
            																		}
HXDLIN(  20)																		if (_hx_tmp37) {
HXLINE(  20)																			int location9;
HXDLIN(  20)																			if (undoImage6->useVirtualPos) {
HXLINE(  20)																				location9 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x18) - undoImage6->virtualX));
            																			}
            																			else {
HXLINE(  20)																				location9 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage6->width) + x18)) ));
            																			}
HXDLIN(  20)																			int this151 = ::iterMagic::Iimg_obj::get(undoImage6->image,location9);
HXDLIN(  20)																			int this152;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				this152 = ((((((this151 >> 24) & 255) << 24) | ((this151 & 255) << 16)) | (((this151 >> 8) & 255) << 8)) | ((this151 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				this152 = this151;
            																			}
HXDLIN(  20)																			Float a112;
HXDLIN(  20)																			int this153 = ((this152 >> 24) & 255);
HXDLIN(  20)																			if ((this153 == 0)) {
HXLINE(  20)																				a112 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a112 = (( (Float)(this153) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r19;
HXDLIN(  20)																			int this154 = ((this152 >> 16) & 255);
HXDLIN(  20)																			if ((this154 == 0)) {
HXLINE(  20)																				r19 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r19 = (( (Float)(this154) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g19;
HXDLIN(  20)																			int this155 = ((this152 >> 8) & 255);
HXDLIN(  20)																			if ((this155 == 0)) {
HXLINE(  20)																				g19 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g19 = (( (Float)(this155) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b113;
HXDLIN(  20)																			int this156 = (this152 & 255);
HXDLIN(  20)																			if ((this156 == 0)) {
HXLINE(  20)																				b113 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b113 = (( (Float)(this156) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a210;
HXDLIN(  20)																			int this157 = ((col3 >> 24) & 255);
HXDLIN(  20)																			if ((this157 == 0)) {
HXLINE(  20)																				a210 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a210 = (( (Float)(this157) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r29;
HXDLIN(  20)																			int this158 = ((col3 >> 16) & 255);
HXDLIN(  20)																			if ((this158 == 0)) {
HXLINE(  20)																				r29 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r29 = (( (Float)(this158) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g29;
HXDLIN(  20)																			int this159 = ((col3 >> 8) & 255);
HXDLIN(  20)																			if ((this159 == 0)) {
HXLINE(  20)																				g29 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g29 = (( (Float)(this159) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b213;
HXDLIN(  20)																			int this160 = (col3 & 255);
HXDLIN(  20)																			if ((this160 == 0)) {
HXLINE(  20)																				b213 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b213 = (( (Float)(this160) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a39 = (a112 * (( (Float)(1) ) - a210));
HXDLIN(  20)																			int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a39) + (r29 * a210))));
HXDLIN(  20)																			int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a39) + (g29 * a210))));
HXDLIN(  20)																			int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a39) + (b213 * a210))));
HXDLIN(  20)																			int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a210)));
HXDLIN(  20)																			int blended9 = ((((a40 << 24) | (r20 << 16)) | (g20 << 8)) | b36);
HXDLIN(  20)																			{
HXLINE(  20)																				int _hx_tmp38;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					_hx_tmp38 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					_hx_tmp38 = blended9;
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(undoImage6->image,location9,_hx_tmp38);
            																			}
            																		}
            																		else {
HXLINE(  20)																			::Dynamic this161 = undoImage6->image;
HXDLIN(  20)																			int index20;
HXDLIN(  20)																			if (undoImage6->useVirtualPos) {
HXLINE(  20)																				index20 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x18) - undoImage6->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index20 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage6->width) + x18)) ));
            																			}
HXDLIN(  20)																			int _hx_tmp39;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				_hx_tmp39 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				_hx_tmp39 = c17;
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this161,index20,_hx_tmp39);
            																		}
            																	}
            																	else {
HXLINE(  20)																		if (forceClear3) {
HXLINE(  20)																			::Dynamic this162 = undoImage6->image;
HXDLIN(  20)																			int x19 = (dx4 - rectLeft2);
HXDLIN(  20)																			int y20 = (dy4 - rectTop2);
HXDLIN(  20)																			int index21;
HXDLIN(  20)																			if (undoImage6->useVirtualPos) {
HXLINE(  20)																				index21 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x19) - undoImage6->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index21 = ::Std_obj::_hx_int(( (Float)(((y20 * undoImage6->width) + x19)) ));
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this162,index21,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  20)											bool found2 = false;
HXDLIN(  20)											Float s2 = ((Float)0.);
HXDLIN(  20)											Float t2 = ((Float)0.);
HXDLIN(  20)											Float sxx2 = ((Float)0.);
HXDLIN(  20)											Float txx2 = ((Float)0.);
HXDLIN(  20)											{
HXLINE(  20)												int _g_min4 = xIter32->start;
HXDLIN(  20)												int _g_max4 = xIter32->max;
HXDLIN(  20)												while((_g_min4 < _g_max4)){
HXLINE(  20)													_g_min4 = (_g_min4 + 1);
HXDLIN(  20)													int x20 = (_g_min4 - 1);
HXLINE(  60)													sxx2 = (sx2 * ( (Float)(x20) ));
HXLINE(  61)													txx2 = (tx2 * ( (Float)(x20) ));
HXLINE(  62)													found2 = false;
HXLINE(  20)													{
HXLINE(  20)														int _g_min5 = yIter32->start;
HXDLIN(  20)														int _g_max5 = yIter32->max;
HXDLIN(  20)														while((_g_min5 < _g_max5)){
HXLINE(  20)															_g_min5 = (_g_min5 + 1);
HXDLIN(  20)															int y21 = (_g_min5 - 1);
HXLINE(  64)															s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y21) )));
HXLINE(  65)															t2 = ((t02 + txx2) + (ty2 * ( (Float)(y21) )));
HXLINE(  20)															bool _hx_tmp40;
HXDLIN(  20)															if (!((s2 <= 0))) {
HXLINE(  20)																_hx_tmp40 = (t2 <= 0);
            															}
            															else {
HXLINE(  20)																_hx_tmp40 = true;
            															}
HXDLIN(  20)															if (_hx_tmp40) {
HXLINE(  20)																if (found2) {
HXLINE(  20)																	goto _hx_goto_61;
            																}
            															}
            															else {
HXLINE(  20)																if (((s2 + t2) < A2)) {
HXLINE(  20)																	{
HXLINE(  20)																		int c18 = color2;
HXDLIN(  20)																		bool _hx_tmp41;
HXDLIN(  20)																		if ((((c18 >> 24) & 255) < 254)) {
HXLINE(  20)																			_hx_tmp41 = this140->transparent;
            																		}
            																		else {
HXLINE(  20)																			_hx_tmp41 = false;
            																		}
HXDLIN(  20)																		if (_hx_tmp41) {
HXLINE(  20)																			int location10;
HXDLIN(  20)																			if (this140->useVirtualPos) {
HXLINE(  20)																				location10 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - this140->virtualY) * ( (Float)(this140->width) )) + x20) - this140->virtualX));
            																			}
            																			else {
HXLINE(  20)																				location10 = ::Std_obj::_hx_int(( (Float)(((y21 * this140->width) + x20)) ));
            																			}
HXDLIN(  20)																			int this163 = ::iterMagic::Iimg_obj::get(this140->image,location10);
HXDLIN(  20)																			int this164;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				this164 = ((((((this163 >> 24) & 255) << 24) | ((this163 & 255) << 16)) | (((this163 >> 8) & 255) << 8)) | ((this163 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				this164 = this163;
            																			}
HXDLIN(  20)																			Float a113;
HXDLIN(  20)																			int this165 = ((this164 >> 24) & 255);
HXDLIN(  20)																			if ((this165 == 0)) {
HXLINE(  20)																				a113 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a113 = (( (Float)(this165) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r110;
HXDLIN(  20)																			int this166 = ((this164 >> 16) & 255);
HXDLIN(  20)																			if ((this166 == 0)) {
HXLINE(  20)																				r110 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r110 = (( (Float)(this166) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g110;
HXDLIN(  20)																			int this167 = ((this164 >> 8) & 255);
HXDLIN(  20)																			if ((this167 == 0)) {
HXLINE(  20)																				g110 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g110 = (( (Float)(this167) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b114;
HXDLIN(  20)																			int this168 = (this164 & 255);
HXDLIN(  20)																			if ((this168 == 0)) {
HXLINE(  20)																				b114 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b114 = (( (Float)(this168) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a211;
HXDLIN(  20)																			int this169 = ((color2 >> 24) & 255);
HXDLIN(  20)																			if ((this169 == 0)) {
HXLINE(  20)																				a211 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a211 = (( (Float)(this169) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r210;
HXDLIN(  20)																			int this170 = ((color2 >> 16) & 255);
HXDLIN(  20)																			if ((this170 == 0)) {
HXLINE(  20)																				r210 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r210 = (( (Float)(this170) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g210;
HXDLIN(  20)																			int this171 = ((color2 >> 8) & 255);
HXDLIN(  20)																			if ((this171 == 0)) {
HXLINE(  20)																				g210 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g210 = (( (Float)(this171) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b214;
HXDLIN(  20)																			int this172 = (color2 & 255);
HXDLIN(  20)																			if ((this172 == 0)) {
HXLINE(  20)																				b214 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b214 = (( (Float)(this172) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN(  20)																			int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r210 * a211))));
HXDLIN(  20)																			int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g210 * a211))));
HXDLIN(  20)																			int b37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b214 * a211))));
HXDLIN(  20)																			int a41 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN(  20)																			int blended10 = ((((a41 << 24) | (r30 << 16)) | (g30 << 8)) | b37);
HXDLIN(  20)																			{
HXLINE(  20)																				int _hx_tmp42;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					_hx_tmp42 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					_hx_tmp42 = blended10;
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(this140->image,location10,_hx_tmp42);
            																			}
            																		}
            																		else {
HXLINE(  20)																			::Dynamic this173 = this140->image;
HXDLIN(  20)																			int index22;
HXDLIN(  20)																			if (this140->useVirtualPos) {
HXLINE(  20)																				index22 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - this140->virtualY) * ( (Float)(this140->width) )) + x20) - this140->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index22 = ::Std_obj::_hx_int(( (Float)(((y21 * this140->width) + x20)) ));
            																			}
HXDLIN(  20)																			int _hx_tmp43;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				_hx_tmp43 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				_hx_tmp43 = c18;
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this173,index22,_hx_tmp43);
            																		}
            																	}
HXLINE(  73)																	found2 = true;
            																}
            																else {
HXLINE(  20)																	if (found2) {
HXLINE(  20)																		goto _hx_goto_61;
            																	}
            																}
            															}
            														}
            														_hx_goto_61:;
            													}
            												}
            											}
HXDLIN(  20)											if ((hasHit2 == true)) {
HXLINE(  20)												 ::pi_xy::algo::HitTri v11 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx3,lowerY,bx2,by2,cx4,cy4,true);
HXDLIN(  20)												if (hasUndo2) {
HXLINE(  20)													v11->undoImage = undoImage6;
HXDLIN(  20)													v11->undoX = xIter32->start;
HXDLIN(  20)													v11->undoY = yIter32->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  46)								lastX2 = nextX2;
HXLINE(  47)								lastY2 = nextY2;
            							}
            						}
            					}
            				}
HXLINE(  20)				{
HXLINE(  20)					int r_x4 = ::Std_obj::_hx_int(( (Float)(dx1) ));
HXDLIN(  20)					int r_y4 = ::Std_obj::_hx_int(lowerY);
HXDLIN(  20)					int r_w4 = ::Std_obj::_hx_int(( (Float)(fat) ));
HXDLIN(  20)					int r_h4 = ::Std_obj::_hx_int(bottomRadius);
HXDLIN(  20)					int xmax4 = ((r_x4 + r_w4) + 1);
HXDLIN(  20)					int ymax4 = ((r_y4 + r_h4) + 1);
HXDLIN(  20)					int ii_min32 = r_x4;
HXDLIN(  20)					int ii_max32 = xmax4;
HXDLIN(  20)					int xRange__start4 = ii_min32;
HXDLIN(  20)					int xRange__max4 = ii_max32;
HXDLIN(  20)					int ii_min33 = r_y4;
HXDLIN(  20)					int ii_max33 = ymax4;
HXDLIN(  20)					int yRange__start4 = ii_min33;
HXDLIN(  20)					int yRange__max4 = ii_max33;
HXDLIN(  20)					int range_x4 = xRange__start4;
HXDLIN(  20)					int range_y4 = (yRange__start4 - 1);
HXDLIN(  20)					int range_xReset4 = range_x4;
HXDLIN(  20)					int range_yReset4 = range_y4;
HXDLIN(  20)					int range_xMax4 = (xRange__max4 - 2);
HXDLIN(  20)					int range_yMax4 = (yRange__max4 - 2);
HXDLIN(  20)					int _this_min4 = 0;
HXDLIN(  20)					int _this_max4 = ::Std_obj::_hx_int(( (Float)(((xRange__max4 - xRange__start4) * (yRange__max4 - yRange__start4))) ));
HXDLIN(  20)					while((_this_min4 < _this_max4)){
HXLINE(  20)						_this_min4 = (_this_min4 + 1);
HXDLIN(  20)						int i41 = (_this_min4 - 1);
HXDLIN(  20)						if ((range_y4 > range_yMax4)) {
HXLINE(  20)							range_y4 = range_yReset4;
HXDLIN(  20)							range_x4 = (range_x4 + 1);
            						}
HXDLIN(  20)						range_y4 = (range_y4 + 1);
HXDLIN(  20)						int i42 = i41;
HXDLIN(  20)						{
HXLINE(  20)							int x21 = range_x4;
HXDLIN(  20)							int y22 = range_y4;
HXDLIN(  20)							int c19 = color2;
HXDLIN(  20)							bool _hx_tmp44;
HXDLIN(  20)							if ((((c19 >> 24) & 255) < 254)) {
HXLINE(  20)								_hx_tmp44 = temp1->transparent;
            							}
            							else {
HXLINE(  20)								_hx_tmp44 = false;
            							}
HXDLIN(  20)							if (_hx_tmp44) {
HXLINE(  20)								int location11;
HXDLIN(  20)								if (temp1->useVirtualPos) {
HXLINE(  20)									location11 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + x21) - temp1->virtualX));
            								}
            								else {
HXLINE(  20)									location11 = ::Std_obj::_hx_int(( (Float)(((y22 * temp1->width) + x21)) ));
            								}
HXDLIN(  20)								int this174 = ::iterMagic::Iimg_obj::get(temp1->image,location11);
HXDLIN(  20)								int this175;
HXDLIN(  20)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)									this175 = ((((((this174 >> 24) & 255) << 24) | ((this174 & 255) << 16)) | (((this174 >> 8) & 255) << 8)) | ((this174 >> 16) & 255));
            								}
            								else {
HXLINE(  20)									this175 = this174;
            								}
HXDLIN(  20)								Float a114;
HXDLIN(  20)								int this176 = ((this175 >> 24) & 255);
HXDLIN(  20)								if ((this176 == 0)) {
HXLINE(  20)									a114 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									a114 = (( (Float)(this176) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float r111;
HXDLIN(  20)								int this177 = ((this175 >> 16) & 255);
HXDLIN(  20)								if ((this177 == 0)) {
HXLINE(  20)									r111 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									r111 = (( (Float)(this177) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float g111;
HXDLIN(  20)								int this178 = ((this175 >> 8) & 255);
HXDLIN(  20)								if ((this178 == 0)) {
HXLINE(  20)									g111 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									g111 = (( (Float)(this178) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float b115;
HXDLIN(  20)								int this179 = (this175 & 255);
HXDLIN(  20)								if ((this179 == 0)) {
HXLINE(  20)									b115 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									b115 = (( (Float)(this179) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float a212;
HXDLIN(  20)								int this180 = ((color2 >> 24) & 255);
HXDLIN(  20)								if ((this180 == 0)) {
HXLINE(  20)									a212 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									a212 = (( (Float)(this180) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float r211;
HXDLIN(  20)								int this181 = ((color2 >> 16) & 255);
HXDLIN(  20)								if ((this181 == 0)) {
HXLINE(  20)									r211 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									r211 = (( (Float)(this181) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float g211;
HXDLIN(  20)								int this182 = ((color2 >> 8) & 255);
HXDLIN(  20)								if ((this182 == 0)) {
HXLINE(  20)									g211 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									g211 = (( (Float)(this182) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float b215;
HXDLIN(  20)								int this183 = (color2 & 255);
HXDLIN(  20)								if ((this183 == 0)) {
HXLINE(  20)									b215 = ((Float)0.);
            								}
            								else {
HXLINE(  20)									b215 = (( (Float)(this183) ) / ( (Float)(255) ));
            								}
HXDLIN(  20)								Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN(  20)								int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a311) + (r211 * a212))));
HXDLIN(  20)								int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a311) + (g211 * a212))));
HXDLIN(  20)								int b38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b215 * a212))));
HXDLIN(  20)								int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN(  20)								int blended11 = ((((a42 << 24) | (r31 << 16)) | (g31 << 8)) | b38);
HXDLIN(  20)								{
HXLINE(  20)									int _hx_tmp45;
HXDLIN(  20)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)										_hx_tmp45 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            									}
            									else {
HXLINE(  20)										_hx_tmp45 = blended11;
            									}
HXDLIN(  20)									::iterMagic::Iimg_obj::set(temp1->image,location11,_hx_tmp45);
            								}
            							}
            							else {
HXLINE(  20)								::Dynamic this184 = temp1->image;
HXDLIN(  20)								int index23;
HXDLIN(  20)								if (temp1->useVirtualPos) {
HXLINE(  20)									index23 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + x21) - temp1->virtualX));
            								}
            								else {
HXLINE(  20)									index23 = ::Std_obj::_hx_int(( (Float)(((y22 * temp1->width) + x21)) ));
            								}
HXDLIN(  20)								int _hx_tmp46;
HXDLIN(  20)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)									_hx_tmp46 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            								}
            								else {
HXLINE(  20)									_hx_tmp46 = c19;
            								}
HXDLIN(  20)								::iterMagic::Iimg_obj::set(this184,index23,_hx_tmp46);
            							}
            						}
            					}
            				}
HXDLIN(  20)				{
HXLINE(  20)					 ::pi_xy::ImageStruct this185 = temp1;
HXDLIN(  20)					{
HXLINE(  20)						 ::Dynamic targetError3 = ((Float)1.05);
HXDLIN(  20)						if (::hx::IsNull( targetError3 )) {
HXLINE( 113)							targetError3 = ((Float)1.05);
            						}
HXLINE(  20)						Float rSmall3;
HXDLIN(  20)						if ((rightRadius > bottomRadius)) {
HXLINE(  20)							rSmall3 = bottomRadius;
            						}
            						else {
HXLINE(  20)							rSmall3 = rightRadius;
            						}
HXDLIN(  20)						 ::Dynamic targetE3 = ( (Float)(targetError3) );
HXDLIN(  20)						if (::hx::IsNull( targetE3 )) {
HXLINE(  20)							targetE3 = ((Float)1.05);
            						}
HXDLIN(  20)						int result3 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE3) ) / rSmall3)))));
HXDLIN(  20)						int noSides3;
HXDLIN(  20)						if ((result3 < 12)) {
HXLINE(  20)							noSides3 = 12;
            						}
            						else {
HXLINE(  20)							if ((result3 > 500)) {
HXLINE(  20)								noSides3 = 500;
            							}
            							else {
HXLINE(  20)								noSides3 = result3;
            							}
            						}
HXDLIN(  20)						int sides3 = (::Math_obj::ceil((( (Float)(noSides3) ) / ( (Float)(4) ))) * 4);
HXDLIN(  20)						Float theta3 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides3) ));
HXDLIN(  20)						Float omega3 = ( (Float)(0) );
HXDLIN(  20)						int quarter3 = ::Std_obj::_hx_int((( (Float)(sides3) ) / ( (Float)(4) )));
HXDLIN(  20)						Float lastX3 = ((Float)0.);
HXDLIN(  20)						Float lastY3 = ((Float)0.);
HXDLIN(  20)						{
HXLINE(  26)							lastX3 = (farX + (rightRadius * ::Math_obj::cos(((( (Float)(sides3) ) * theta3) + omega3))));
HXLINE(  27)							lastY3 = (lowerY + (bottomRadius * ::Math_obj::sin(((( (Float)(sides3) ) * theta3) + omega3))));
            						}
HXLINE(  20)						{
HXLINE(  20)							int _g102 = 0;
HXDLIN(  20)							int _g103 = (quarter3 + 1);
HXDLIN(  20)							while((_g102 < _g103)){
HXLINE(  20)								_g102 = (_g102 + 1);
HXDLIN(  20)								int i43 = (_g102 - 1);
HXDLIN(  20)								Float nextX3 = (farX + (rightRadius * ::Math_obj::cos((((( (Float)(i43) ) * theta3) + ((Float)0.0001)) + omega3))));
HXDLIN(  20)								Float nextY3 = (lowerY + (bottomRadius * ::Math_obj::sin((((( (Float)(i43) ) * theta3) + ((Float)0.0001)) + omega3))));
HXDLIN(  20)								{
HXLINE(  20)									 ::pi_xy::ImageStruct this186 = this185;
HXDLIN(  20)									bool hasHit3 = false;
HXDLIN(  20)									bool hasUndo3 = false;
HXDLIN(  20)									{
HXLINE(  20)										Float bx3 = lastX3;
HXDLIN(  20)										Float by3 = lastY3;
HXDLIN(  20)										Float cx5 = nextX3;
HXDLIN(  20)										Float cy5 = nextY3;
HXDLIN(  20)										bool adjustWinding3 = (((((farX * by3) - (bx3 * lowerY)) + ((bx3 * cy5) - (cx5 * by3))) + ((cx5 * lowerY) - (farX * cy5))) > 0);
HXDLIN(  20)										if (!(adjustWinding3)) {
HXLINE(  20)											Float bx_3 = bx3;
HXDLIN(  20)											Float by_3 = by3;
HXLINE(  25)											bx3 = cx5;
HXLINE(  26)											by3 = cy5;
HXLINE(  27)											cx5 = bx_3;
HXLINE(  28)											cy5 = by_3;
            										}
HXLINE(  20)										{
HXLINE(  20)											Float s03 = ((lowerY * cx5) - (farX * cy5));
HXDLIN(  20)											Float sx3 = (cy5 - lowerY);
HXDLIN(  20)											Float sy3 = (farX - cx5);
HXDLIN(  20)											Float t03 = ((farX * by3) - (lowerY * bx3));
HXDLIN(  20)											Float tx3 = (lowerY - by3);
HXDLIN(  20)											Float ty3 = (bx3 - farX);
HXDLIN(  20)											Float A3 = ((((-(by3) * cx5) + (lowerY * (-(bx3) + cx5))) + (farX * (by3 - cy5))) + (bx3 * cy5));
HXDLIN(  20)											 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  20)											if ((farX > bx3)) {
HXLINE(  20)												if ((farX > cx5)) {
HXLINE(  20)													int min12;
HXDLIN(  20)													if ((bx3 > cx5)) {
HXLINE(  20)														min12 = ::Math_obj::floor(cx5);
            													}
            													else {
HXLINE(  20)														min12 = ::Math_obj::floor(bx3);
            													}
HXDLIN(  20)													int ii_min34 = min12;
HXDLIN(  20)													int ii_max34 = ::Math_obj::ceil(farX);
HXDLIN(  20)													xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            												}
            												else {
HXLINE(  20)													int ii_min35 = ::Math_obj::floor(bx3);
HXDLIN(  20)													int ii_max35 = ::Math_obj::ceil(cx5);
HXDLIN(  20)													xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            												}
            											}
            											else {
HXLINE(  20)												if ((bx3 > cx5)) {
HXLINE(  20)													int min13;
HXDLIN(  20)													if ((farX > cx5)) {
HXLINE(  20)														min13 = ::Math_obj::floor(cx5);
            													}
            													else {
HXLINE(  20)														min13 = ::Math_obj::ceil(farX);
            													}
HXDLIN(  20)													int ii_min36 = min13;
HXDLIN(  20)													int ii_max36 = ::Math_obj::ceil(bx3);
HXDLIN(  20)													xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            												}
            												else {
HXLINE(  20)													int ii_min37 = ::Math_obj::floor(farX);
HXDLIN(  20)													int ii_max37 = ::Math_obj::ceil(cx5);
HXDLIN(  20)													xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            												}
            											}
HXDLIN(  20)											 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  20)											if ((lowerY > by3)) {
HXLINE(  20)												if ((lowerY > cy5)) {
HXLINE(  20)													int min14;
HXDLIN(  20)													if ((by3 > cy5)) {
HXLINE(  20)														min14 = ::Math_obj::floor(cy5);
            													}
            													else {
HXLINE(  20)														min14 = ::Math_obj::floor(by3);
            													}
HXDLIN(  20)													int ii_min38 = min14;
HXDLIN(  20)													int ii_max38 = ::Math_obj::ceil(lowerY);
HXDLIN(  20)													yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            												}
            												else {
HXLINE(  20)													int ii_min39 = ::Math_obj::floor(by3);
HXDLIN(  20)													int ii_max39 = ::Math_obj::ceil(cy5);
HXDLIN(  20)													yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            												}
            											}
            											else {
HXLINE(  20)												if ((by3 > cy5)) {
HXLINE(  20)													int min15;
HXDLIN(  20)													if ((lowerY > cy5)) {
HXLINE(  20)														min15 = ::Math_obj::floor(cy5);
            													}
            													else {
HXLINE(  20)														min15 = ::Math_obj::ceil(lowerY);
            													}
HXDLIN(  20)													int ii_min40 = min15;
HXDLIN(  20)													int ii_max40 = ::Math_obj::ceil(by3);
HXDLIN(  20)													yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            												}
            												else {
HXLINE(  20)													int ii_min41 = ::Math_obj::floor(lowerY);
HXDLIN(  20)													int ii_max41 = ::Math_obj::ceil(cy5);
HXDLIN(  20)													yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            												}
            											}
HXDLIN(  20)											 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  20)											if (hasUndo3) {
HXLINE(  20)												int width5 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  20)												int height5 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  20)												 ::Dynamic imageType5 = null();
HXDLIN(  20)												 ::pi_xy::ImageStruct this187 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  20)												if (::hx::IsNull( imageType5 )) {
HXLINE(  54)													imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE(  20)												::Dynamic undoImage10;
HXDLIN(  20)												switch((int)(( (int)(imageType5) ))){
            													case (int)0: {
HXLINE(  20)														 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::BytesImg b39 = byt5;
HXDLIN(  20)														{
HXLINE(  20)															b39->width = width5;
HXDLIN(  20)															b39->height = height5;
HXDLIN(  20)															b39->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  20)															b39->data = ::haxe::io::Bytes_obj::alloc((b39->length * 4));
HXDLIN(  20)															{
HXLINE(  20)																int len10 = b39->length;
HXDLIN(  20)																int w6 = 0;
HXDLIN(  20)																{
HXLINE(  20)																	int _g104 = 0;
HXDLIN(  20)																	int _g105 = b39->height;
HXDLIN(  20)																	while((_g104 < _g105)){
HXLINE(  20)																		_g104 = (_g104 + 1);
HXDLIN(  20)																		int y23 = (_g104 - 1);
HXDLIN(  20)																		{
HXLINE(  20)																			int _g106 = 0;
HXDLIN(  20)																			int _g107 = b39->width;
HXDLIN(  20)																			while((_g106 < _g107)){
HXLINE(  20)																				_g106 = (_g106 + 1);
HXDLIN(  20)																				int x22 = (_g106 - 1);
HXDLIN(  20)																				{
HXLINE(  20)																					w6 = (w6 + 1);
HXDLIN(  20)																					b39->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w6 = (w6 + 1);
HXDLIN(  20)																					b39->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w6 = (w6 + 1);
HXDLIN(  20)																					b39->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w6 = (w6 + 1);
HXDLIN(  20)																					b39->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage10 = b39;
            													}
            													break;
            													case (int)1: {
HXLINE(  20)														 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::ArrIntImg a43 = arrI5;
HXDLIN(  20)														{
HXLINE(  20)															a43->width = width5;
HXDLIN(  20)															a43->height = height5;
HXDLIN(  20)															a43->data = ::Array_obj< int >::__new(0);
HXDLIN(  20)															a43->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  20)															{
HXLINE(  20)																int _g108 = 0;
HXDLIN(  20)																int _g109 = a43->length;
HXDLIN(  20)																while((_g108 < _g109)){
HXLINE(  20)																	_g108 = (_g108 + 1);
HXDLIN(  20)																	int i44 = (_g108 - 1);
HXDLIN(  20)																	a43->data[i44] = 0;
            																}
            															}
            														}
HXDLIN(  20)														undoImage10 = a43;
            													}
            													break;
            													case (int)2: {
HXLINE(  20)														 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::U32ArrImg b40 = u32a5;
HXDLIN(  20)														{
HXLINE(  20)															b40->width = width5;
HXDLIN(  20)															b40->height = height5;
HXDLIN(  20)															b40->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  20)															int size5 = (b40->length * 4);
HXDLIN(  20)															b40->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN(  20)															{
HXLINE(  20)																int _g110 = 0;
HXDLIN(  20)																int _g111 = b40->length;
HXDLIN(  20)																while((_g110 < _g111)){
HXLINE(  20)																	_g110 = (_g110 + 1);
HXDLIN(  20)																	int i45 = (_g110 - 1);
HXDLIN(  20)																	{
HXLINE(  20)																		 ::haxe::io::ArrayBufferViewImpl this188 = b40->data;
HXDLIN(  20)																		bool undoImage11;
HXDLIN(  20)																		if ((i45 >= 0)) {
HXLINE(  20)																			undoImage11 = (i45 < (this188->byteLength >> 2));
            																		}
            																		else {
HXLINE(  20)																			undoImage11 = false;
            																		}
HXDLIN(  20)																		if (undoImage11) {
HXLINE(  20)																			 ::haxe::io::Bytes _this5 = this188->bytes;
HXDLIN(  20)																			int pos5 = ((i45 << 2) + this188->byteOffset);
HXDLIN(  20)																			_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage10 = b40;
            													}
            													break;
            													case (int)3: {
HXLINE(  20)														 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::VecIntImg v12 = vec5;
HXDLIN(  20)														{
HXLINE(  20)															v12->width = width5;
HXDLIN(  20)															v12->height = height5;
HXDLIN(  20)															v12->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  20)															v12->data = ::Array_obj< int >::__new(v12->length);
HXDLIN(  20)															{
HXLINE(  20)																int _g112 = 0;
HXDLIN(  20)																int _g113 = v12->length;
HXDLIN(  20)																while((_g112 < _g113)){
HXLINE(  20)																	_g112 = (_g112 + 1);
HXDLIN(  20)																	int i46 = (_g112 - 1);
HXDLIN(  20)																	v12->data->__unsafe_set(i46,0);
            																}
            															}
            														}
HXDLIN(  20)														undoImage10 = v12;
            													}
            													break;
            													case (int)4: {
HXLINE(  20)														 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::StackIntImg b41 = sInt5;
HXDLIN(  20)														{
HXLINE(  20)															b41->width = width5;
HXDLIN(  20)															b41->height = height5;
HXDLIN(  20)															b41->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  20)															b41->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  20)															{
HXLINE(  20)																int len11 = b41->length;
HXDLIN(  20)																 ::haxe::ds::GenericStack_Int d5 = b41->data;
HXDLIN(  20)																if (::hx::IsNull( d5->head )) {
HXLINE(  20)																	int _g114 = 0;
HXDLIN(  20)																	int _g115 = len11;
HXDLIN(  20)																	while((_g114 < _g115)){
HXLINE(  20)																		_g114 = (_g114 + 1);
HXDLIN(  20)																		int i47 = (_g114 - 1);
HXDLIN(  20)																		d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            																	}
            																}
            																else {
HXLINE(  20)																	int _g116 = 0;
HXDLIN(  20)																	int _g117 = len11;
HXDLIN(  20)																	while((_g116 < _g117)){
HXLINE(  20)																		_g116 = (_g116 + 1);
HXDLIN(  20)																		int i48 = (_g116 - 1);
HXDLIN(  20)																		{
HXLINE(  20)																			 ::haxe::ds::GenericCell_Int l5 = b41->data->head;
HXDLIN(  20)																			 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN(  20)																			{
HXLINE(  20)																				int _g118 = 0;
HXDLIN(  20)																				int _g119 = i48;
HXDLIN(  20)																				while((_g118 < _g119)){
HXLINE(  20)																					_g118 = (_g118 + 1);
HXDLIN(  20)																					int i49 = (_g118 - 1);
HXLINE( 345)																					prev5 = l5;
HXLINE( 346)																					l5 = l5->next;
            																				}
            																			}
HXLINE(  20)																			if (::hx::IsNull( prev5 )) {
HXLINE(  20)																				b41->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  20)																				l5 = null();
            																			}
            																			else {
HXLINE(  20)																				prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  20)																				l5 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage10 = b41;
            													}
            													break;
            												}
HXDLIN(  20)												this187->image = undoImage10;
HXDLIN(  20)												this187->width = width5;
HXDLIN(  20)												this187->height = height5;
HXDLIN(  20)												this187->imageType = ( (int)(imageType5) );
HXDLIN(  20)												undoImage9 = this187;
HXDLIN(  20)												{
HXLINE(  20)													int rectLeft3 = xIter33->start;
HXDLIN(  20)													int rectTop3 = yIter33->start;
HXDLIN(  20)													int rectRight3 = xIter33->max;
HXDLIN(  20)													bool forceClear4 = false;
HXDLIN(  20)													{
HXLINE(  20)														int _g120 = rectTop3;
HXDLIN(  20)														int _g121 = yIter33->max;
HXDLIN(  20)														while((_g120 < _g121)){
HXLINE(  20)															_g120 = (_g120 + 1);
HXDLIN(  20)															int dy5 = (_g120 - 1);
HXDLIN(  20)															{
HXLINE(  20)																int _g122 = rectLeft3;
HXDLIN(  20)																int _g123 = rectRight3;
HXDLIN(  20)																while((_g122 < _g123)){
HXLINE(  20)																	_g122 = (_g122 + 1);
HXDLIN(  20)																	int dx5 = (_g122 - 1);
HXDLIN(  20)																	::Dynamic this189 = this186->image;
HXDLIN(  20)																	int index24;
HXDLIN(  20)																	if (this186->useVirtualPos) {
HXLINE(  20)																		index24 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this186->virtualY) * ( (Float)(this186->width) )) + dx5) - this186->virtualX));
            																	}
            																	else {
HXLINE(  20)																		index24 = ::Std_obj::_hx_int(( (Float)(((dy5 * this186->width) + dx5)) ));
            																	}
HXDLIN(  20)																	int c20 = ::iterMagic::Iimg_obj::get(this189,index24);
HXDLIN(  20)																	int col4;
HXDLIN(  20)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																		col4 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            																	}
            																	else {
HXLINE(  20)																		col4 = c20;
            																	}
HXDLIN(  20)																	bool _hx_tmp47;
HXDLIN(  20)																	if (this186->useMask) {
HXLINE(  20)																		_hx_tmp47 = ::hx::IsNotNull( this186->mask );
            																	}
            																	else {
HXLINE(  20)																		_hx_tmp47 = false;
            																	}
HXDLIN(  20)																	if (_hx_tmp47) {
HXLINE(  20)																		 ::pi_xy::ImageStruct this190 = this186->mask;
HXDLIN(  20)																		::Dynamic this191 = this190->image;
HXDLIN(  20)																		int index25;
HXDLIN(  20)																		if (this190->useVirtualPos) {
HXLINE(  20)																			index25 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this190->virtualY) * ( (Float)(this190->width) )) + dx5) - this190->virtualX));
            																		}
            																		else {
HXLINE(  20)																			index25 = ::Std_obj::_hx_int(( (Float)(((dy5 * this190->width) + dx5)) ));
            																		}
HXDLIN(  20)																		int c21 = ::iterMagic::Iimg_obj::get(this191,index25);
HXDLIN(  20)																		int v13;
HXDLIN(  20)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																			v13 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            																		}
            																		else {
HXLINE(  20)																			v13 = c21;
            																		}
HXDLIN(  20)																		int maskPixel4 = v13;
HXDLIN(  20)																		int this192 = col4;
HXDLIN(  20)																		if ((maskPixel4 == 0)) {
HXLINE(  20)																			col4 = this192;
            																		}
            																		else {
HXLINE(  20)																			Float m04;
HXDLIN(  20)																			int this193 = ((maskPixel4 >> 24) & 255);
HXDLIN(  20)																			if ((this193 == 0)) {
HXLINE(  20)																				m04 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m04 = (( (Float)(this193) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m14;
HXDLIN(  20)																			int this194 = ((maskPixel4 >> 16) & 255);
HXDLIN(  20)																			if ((this194 == 0)) {
HXLINE(  20)																				m14 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m14 = (( (Float)(this194) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m24;
HXDLIN(  20)																			int this195 = ((maskPixel4 >> 8) & 255);
HXDLIN(  20)																			if ((this195 == 0)) {
HXLINE(  20)																				m24 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m24 = (( (Float)(this195) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m34;
HXDLIN(  20)																			int this196 = (maskPixel4 & 255);
HXDLIN(  20)																			if ((this196 == 0)) {
HXLINE(  20)																				m34 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m34 = (( (Float)(this196) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this192 >> 24) & 255)) )));
HXDLIN(  20)																			int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this192 >> 16) & 255)) )));
HXDLIN(  20)																			int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this192 >> 8) & 255)) )));
HXDLIN(  20)																			int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this192 & 255)) )));
HXDLIN(  20)																			col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN(  20)																	if ((col4 != 0)) {
HXLINE(  20)																		int x23 = (dx5 - rectLeft3);
HXDLIN(  20)																		int y24 = (dy5 - rectTop3);
HXDLIN(  20)																		int c22 = col4;
HXDLIN(  20)																		bool _hx_tmp48;
HXDLIN(  20)																		if ((((c22 >> 24) & 255) < 254)) {
HXLINE(  20)																			_hx_tmp48 = undoImage9->transparent;
            																		}
            																		else {
HXLINE(  20)																			_hx_tmp48 = false;
            																		}
HXDLIN(  20)																		if (_hx_tmp48) {
HXLINE(  20)																			int location12;
HXDLIN(  20)																			if (undoImage9->useVirtualPos) {
HXLINE(  20)																				location12 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x23) - undoImage9->virtualX));
            																			}
            																			else {
HXLINE(  20)																				location12 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage9->width) + x23)) ));
            																			}
HXDLIN(  20)																			int this197 = ::iterMagic::Iimg_obj::get(undoImage9->image,location12);
HXDLIN(  20)																			int this198;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				this198 = ((((((this197 >> 24) & 255) << 24) | ((this197 & 255) << 16)) | (((this197 >> 8) & 255) << 8)) | ((this197 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				this198 = this197;
            																			}
HXDLIN(  20)																			Float a115;
HXDLIN(  20)																			int this199 = ((this198 >> 24) & 255);
HXDLIN(  20)																			if ((this199 == 0)) {
HXLINE(  20)																				a115 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a115 = (( (Float)(this199) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r112;
HXDLIN(  20)																			int this200 = ((this198 >> 16) & 255);
HXDLIN(  20)																			if ((this200 == 0)) {
HXLINE(  20)																				r112 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r112 = (( (Float)(this200) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g112;
HXDLIN(  20)																			int this201 = ((this198 >> 8) & 255);
HXDLIN(  20)																			if ((this201 == 0)) {
HXLINE(  20)																				g112 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g112 = (( (Float)(this201) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b116;
HXDLIN(  20)																			int this202 = (this198 & 255);
HXDLIN(  20)																			if ((this202 == 0)) {
HXLINE(  20)																				b116 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b116 = (( (Float)(this202) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a213;
HXDLIN(  20)																			int this203 = ((col4 >> 24) & 255);
HXDLIN(  20)																			if ((this203 == 0)) {
HXLINE(  20)																				a213 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a213 = (( (Float)(this203) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r212;
HXDLIN(  20)																			int this204 = ((col4 >> 16) & 255);
HXDLIN(  20)																			if ((this204 == 0)) {
HXLINE(  20)																				r212 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r212 = (( (Float)(this204) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g212;
HXDLIN(  20)																			int this205 = ((col4 >> 8) & 255);
HXDLIN(  20)																			if ((this205 == 0)) {
HXLINE(  20)																				g212 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g212 = (( (Float)(this205) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b216;
HXDLIN(  20)																			int this206 = (col4 & 255);
HXDLIN(  20)																			if ((this206 == 0)) {
HXLINE(  20)																				b216 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b216 = (( (Float)(this206) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN(  20)																			int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a312) + (r212 * a213))));
HXDLIN(  20)																			int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a312) + (g212 * a213))));
HXDLIN(  20)																			int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b216 * a213))));
HXDLIN(  20)																			int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN(  20)																			int blended12 = ((((a44 << 24) | (r32 << 16)) | (g32 << 8)) | b42);
HXDLIN(  20)																			{
HXLINE(  20)																				int _hx_tmp49;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					_hx_tmp49 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					_hx_tmp49 = blended12;
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(undoImage9->image,location12,_hx_tmp49);
            																			}
            																		}
            																		else {
HXLINE(  20)																			::Dynamic this207 = undoImage9->image;
HXDLIN(  20)																			int index26;
HXDLIN(  20)																			if (undoImage9->useVirtualPos) {
HXLINE(  20)																				index26 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x23) - undoImage9->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index26 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage9->width) + x23)) ));
            																			}
HXDLIN(  20)																			int _hx_tmp50;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				_hx_tmp50 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				_hx_tmp50 = c22;
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this207,index26,_hx_tmp50);
            																		}
            																	}
            																	else {
HXLINE(  20)																		if (forceClear4) {
HXLINE(  20)																			::Dynamic this208 = undoImage9->image;
HXDLIN(  20)																			int x24 = (dx5 - rectLeft3);
HXDLIN(  20)																			int y25 = (dy5 - rectTop3);
HXDLIN(  20)																			int index27;
HXDLIN(  20)																			if (undoImage9->useVirtualPos) {
HXLINE(  20)																				index27 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x24) - undoImage9->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index27 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage9->width) + x24)) ));
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this208,index27,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  20)											bool found3 = false;
HXDLIN(  20)											Float s3 = ((Float)0.);
HXDLIN(  20)											Float t3 = ((Float)0.);
HXDLIN(  20)											Float sxx3 = ((Float)0.);
HXDLIN(  20)											Float txx3 = ((Float)0.);
HXDLIN(  20)											{
HXLINE(  20)												int _g_min6 = xIter33->start;
HXDLIN(  20)												int _g_max6 = xIter33->max;
HXDLIN(  20)												while((_g_min6 < _g_max6)){
HXLINE(  20)													_g_min6 = (_g_min6 + 1);
HXDLIN(  20)													int x25 = (_g_min6 - 1);
HXLINE(  60)													sxx3 = (sx3 * ( (Float)(x25) ));
HXLINE(  61)													txx3 = (tx3 * ( (Float)(x25) ));
HXLINE(  62)													found3 = false;
HXLINE(  20)													{
HXLINE(  20)														int _g_min7 = yIter33->start;
HXDLIN(  20)														int _g_max7 = yIter33->max;
HXDLIN(  20)														while((_g_min7 < _g_max7)){
HXLINE(  20)															_g_min7 = (_g_min7 + 1);
HXDLIN(  20)															int y26 = (_g_min7 - 1);
HXLINE(  64)															s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y26) )));
HXLINE(  65)															t3 = ((t03 + txx3) + (ty3 * ( (Float)(y26) )));
HXLINE(  20)															bool _hx_tmp51;
HXDLIN(  20)															if (!((s3 <= 0))) {
HXLINE(  20)																_hx_tmp51 = (t3 <= 0);
            															}
            															else {
HXLINE(  20)																_hx_tmp51 = true;
            															}
HXDLIN(  20)															if (_hx_tmp51) {
HXLINE(  20)																if (found3) {
HXLINE(  20)																	goto _hx_goto_75;
            																}
            															}
            															else {
HXLINE(  20)																if (((s3 + t3) < A3)) {
HXLINE(  20)																	{
HXLINE(  20)																		int c23 = color2;
HXDLIN(  20)																		bool _hx_tmp52;
HXDLIN(  20)																		if ((((c23 >> 24) & 255) < 254)) {
HXLINE(  20)																			_hx_tmp52 = this186->transparent;
            																		}
            																		else {
HXLINE(  20)																			_hx_tmp52 = false;
            																		}
HXDLIN(  20)																		if (_hx_tmp52) {
HXLINE(  20)																			int location13;
HXDLIN(  20)																			if (this186->useVirtualPos) {
HXLINE(  20)																				location13 = ::Std_obj::_hx_int(((((( (Float)(y26) ) - this186->virtualY) * ( (Float)(this186->width) )) + x25) - this186->virtualX));
            																			}
            																			else {
HXLINE(  20)																				location13 = ::Std_obj::_hx_int(( (Float)(((y26 * this186->width) + x25)) ));
            																			}
HXDLIN(  20)																			int this209 = ::iterMagic::Iimg_obj::get(this186->image,location13);
HXDLIN(  20)																			int this210;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				this210 = ((((((this209 >> 24) & 255) << 24) | ((this209 & 255) << 16)) | (((this209 >> 8) & 255) << 8)) | ((this209 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				this210 = this209;
            																			}
HXDLIN(  20)																			Float a116;
HXDLIN(  20)																			int this211 = ((this210 >> 24) & 255);
HXDLIN(  20)																			if ((this211 == 0)) {
HXLINE(  20)																				a116 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a116 = (( (Float)(this211) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r113;
HXDLIN(  20)																			int this212 = ((this210 >> 16) & 255);
HXDLIN(  20)																			if ((this212 == 0)) {
HXLINE(  20)																				r113 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r113 = (( (Float)(this212) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g113;
HXDLIN(  20)																			int this213 = ((this210 >> 8) & 255);
HXDLIN(  20)																			if ((this213 == 0)) {
HXLINE(  20)																				g113 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g113 = (( (Float)(this213) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b117;
HXDLIN(  20)																			int this214 = (this210 & 255);
HXDLIN(  20)																			if ((this214 == 0)) {
HXLINE(  20)																				b117 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b117 = (( (Float)(this214) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a214;
HXDLIN(  20)																			int this215 = ((color2 >> 24) & 255);
HXDLIN(  20)																			if ((this215 == 0)) {
HXLINE(  20)																				a214 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a214 = (( (Float)(this215) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r213;
HXDLIN(  20)																			int this216 = ((color2 >> 16) & 255);
HXDLIN(  20)																			if ((this216 == 0)) {
HXLINE(  20)																				r213 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r213 = (( (Float)(this216) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g213;
HXDLIN(  20)																			int this217 = ((color2 >> 8) & 255);
HXDLIN(  20)																			if ((this217 == 0)) {
HXLINE(  20)																				g213 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g213 = (( (Float)(this217) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b217;
HXDLIN(  20)																			int this218 = (color2 & 255);
HXDLIN(  20)																			if ((this218 == 0)) {
HXLINE(  20)																				b217 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b217 = (( (Float)(this218) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN(  20)																			int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a313) + (r213 * a214))));
HXDLIN(  20)																			int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a313) + (g213 * a214))));
HXDLIN(  20)																			int b43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b217 * a214))));
HXDLIN(  20)																			int a45 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN(  20)																			int blended13 = ((((a45 << 24) | (r33 << 16)) | (g33 << 8)) | b43);
HXDLIN(  20)																			{
HXLINE(  20)																				int _hx_tmp53;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					_hx_tmp53 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					_hx_tmp53 = blended13;
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(this186->image,location13,_hx_tmp53);
            																			}
            																		}
            																		else {
HXLINE(  20)																			::Dynamic this219 = this186->image;
HXDLIN(  20)																			int index28;
HXDLIN(  20)																			if (this186->useVirtualPos) {
HXLINE(  20)																				index28 = ::Std_obj::_hx_int(((((( (Float)(y26) ) - this186->virtualY) * ( (Float)(this186->width) )) + x25) - this186->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index28 = ::Std_obj::_hx_int(( (Float)(((y26 * this186->width) + x25)) ));
            																			}
HXDLIN(  20)																			int _hx_tmp54;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				_hx_tmp54 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				_hx_tmp54 = c23;
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this219,index28,_hx_tmp54);
            																		}
            																	}
HXLINE(  73)																	found3 = true;
            																}
            																else {
HXLINE(  20)																	if (found3) {
HXLINE(  20)																		goto _hx_goto_75;
            																	}
            																}
            															}
            														}
            														_hx_goto_75:;
            													}
            												}
            											}
HXDLIN(  20)											if ((hasHit3 == true)) {
HXLINE(  20)												 ::pi_xy::algo::HitTri v14 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX,lowerY,bx3,by3,cx5,cy5,true);
HXDLIN(  20)												if (hasUndo3) {
HXLINE(  20)													v14->undoImage = undoImage9;
HXDLIN(  20)													v14->undoX = xIter33->start;
HXDLIN(  20)													v14->undoY = yIter33->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  46)								lastX3 = nextX3;
HXLINE(  47)								lastY3 = nextY3;
            							}
            						}
            					}
            				}
            			}
HXLINE(  21)			{
HXLINE(  21)				Float x26 = this->strokeWidth;
HXDLIN(  21)				Float y27 = this->strokeWidth;
HXDLIN(  21)				Float wid1 = (this->width - (( (Float)(2) ) * this->strokeWidth));
HXDLIN(  21)				Float hi1 = (this->height - (( (Float)(2) ) * this->strokeWidth));
HXDLIN(  21)				int color3 = this->fill;
HXDLIN(  21)				 ::Dynamic dx6 = ((Float)-1.);
HXDLIN(  21)				 ::Dynamic dy6 = ((Float)-1.);
HXDLIN(  21)				 ::Dynamic fat1 = ((Float)-1.);
HXDLIN(  21)				 ::Dynamic tall1 = ((Float)-1.);
HXDLIN(  21)				if (::hx::IsLess( dx6,((Float)0.) )) {
HXLINE(  21)					Float smallest1;
HXDLIN(  21)					if ((hi1 < wid1)) {
HXLINE(  21)						smallest1 = hi1;
            					}
            					else {
HXLINE(  21)						smallest1 = wid1;
            					}
HXDLIN(  21)					Float goldenRatio1 = ((Float)1.61803398875);
HXLINE(  26)					dx6 = (smallest1 / (goldenRatio1 + 2));
            				}
HXLINE(  21)				if (::hx::IsLess( dy6,((Float)0.) )) {
HXLINE(  28)					dy6 = dx6;
            				}
HXLINE(  21)				if (::hx::IsLess( fat1,((Float)0.) )) {
HXLINE(  29)					fat1 = (wid1 - (( (Float)(2) ) * ( (Float)(dx6) )));
            				}
HXLINE(  21)				if (::hx::IsLess( tall1,((Float)0.) )) {
HXLINE(  30)					tall1 = (hi1 - (( (Float)(2) ) * ( (Float)(dy6) )));
            				}
HXLINE(  21)				Float rightRadius1 = ((wid1 - ( (Float)(fat1) )) - ( (Float)(dx6) ));
HXDLIN(  21)				Float bottomRadius1 = ((hi1 - ( (Float)(tall1) )) - ( (Float)(dy6) ));
HXDLIN(  21)				Float farX1 = ((x26 + dx6) + fat1);
HXDLIN(  21)				Float lowerY1 = ((y27 + dy6) + tall1);
HXDLIN(  21)				{
HXLINE(  21)					 ::pi_xy::ImageStruct this220 = temp1;
HXDLIN(  21)					Float cx6 = (x26 + dx6);
HXDLIN(  21)					Float cy6 = (y27 + dy6);
HXDLIN(  21)					Float rx2 = ( (Float)(dx6) );
HXDLIN(  21)					Float ry2 = ( (Float)(dy6) );
HXDLIN(  21)					{
HXLINE(  21)						 ::Dynamic targetError4 = ((Float)1.05);
HXDLIN(  21)						if (::hx::IsNull( targetError4 )) {
HXLINE( 113)							targetError4 = ((Float)1.05);
            						}
HXLINE(  21)						Float rSmall4;
HXDLIN(  21)						if ((rx2 > ry2)) {
HXLINE(  21)							rSmall4 = ry2;
            						}
            						else {
HXLINE(  21)							rSmall4 = rx2;
            						}
HXDLIN(  21)						 ::Dynamic targetE4 = ( (Float)(targetError4) );
HXDLIN(  21)						if (::hx::IsNull( targetE4 )) {
HXLINE(  20)							targetE4 = ((Float)1.05);
            						}
HXLINE(  21)						int result4 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE4) ) / rSmall4)))));
HXDLIN(  21)						int noSides4;
HXDLIN(  21)						if ((result4 < 12)) {
HXLINE(  21)							noSides4 = 12;
            						}
            						else {
HXLINE(  21)							if ((result4 > 500)) {
HXLINE(  21)								noSides4 = 500;
            							}
            							else {
HXLINE(  21)								noSides4 = result4;
            							}
            						}
HXDLIN(  21)						int sides4 = (::Math_obj::ceil((( (Float)(noSides4) ) / ( (Float)(4) ))) * 4);
HXDLIN(  21)						Float theta4 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides4) ));
HXDLIN(  21)						Float omega4 = ::Math_obj::PI;
HXDLIN(  21)						int quarter4 = ::Std_obj::_hx_int((( (Float)(sides4) ) / ( (Float)(4) )));
HXDLIN(  21)						Float lastX4 = ((Float)0.);
HXDLIN(  21)						Float lastY4 = ((Float)0.);
HXDLIN(  21)						{
HXLINE(  26)							lastX4 = (cx6 + (rx2 * ::Math_obj::cos(((( (Float)(sides4) ) * theta4) + omega4))));
HXLINE(  27)							lastY4 = (cy6 + (ry2 * ::Math_obj::sin(((( (Float)(sides4) ) * theta4) + omega4))));
            						}
HXLINE(  21)						{
HXLINE(  21)							int _g124 = 0;
HXDLIN(  21)							int _g125 = (quarter4 + 1);
HXDLIN(  21)							while((_g124 < _g125)){
HXLINE(  21)								_g124 = (_g124 + 1);
HXDLIN(  21)								int i50 = (_g124 - 1);
HXDLIN(  21)								Float nextX4 = (cx6 + (rx2 * ::Math_obj::cos((((( (Float)(i50) ) * theta4) + ((Float)0.0001)) + omega4))));
HXDLIN(  21)								Float nextY4 = (cy6 + (ry2 * ::Math_obj::sin((((( (Float)(i50) ) * theta4) + ((Float)0.0001)) + omega4))));
HXDLIN(  21)								{
HXLINE(  21)									 ::pi_xy::ImageStruct this221 = this220;
HXDLIN(  21)									bool hasHit4 = false;
HXDLIN(  21)									bool hasUndo4 = false;
HXDLIN(  21)									{
HXLINE(  21)										Float bx4 = lastX4;
HXDLIN(  21)										Float by4 = lastY4;
HXDLIN(  21)										Float cx7 = nextX4;
HXDLIN(  21)										Float cy7 = nextY4;
HXDLIN(  21)										bool adjustWinding4 = (((((cx6 * by4) - (bx4 * cy6)) + ((bx4 * cy7) - (cx7 * by4))) + ((cx7 * cy6) - (cx6 * cy7))) > 0);
HXDLIN(  21)										if (!(adjustWinding4)) {
HXLINE(  21)											Float bx_4 = bx4;
HXDLIN(  21)											Float by_4 = by4;
HXLINE(  25)											bx4 = cx7;
HXLINE(  26)											by4 = cy7;
HXLINE(  27)											cx7 = bx_4;
HXLINE(  28)											cy7 = by_4;
            										}
HXLINE(  21)										{
HXLINE(  21)											Float s04 = ((cy6 * cx7) - (cx6 * cy7));
HXDLIN(  21)											Float sx4 = (cy7 - cy6);
HXDLIN(  21)											Float sy4 = (cx6 - cx7);
HXDLIN(  21)											Float t04 = ((cx6 * by4) - (cy6 * bx4));
HXDLIN(  21)											Float tx4 = (cy6 - by4);
HXDLIN(  21)											Float ty4 = (bx4 - cx6);
HXDLIN(  21)											Float A4 = ((((-(by4) * cx7) + (cy6 * (-(bx4) + cx7))) + (cx6 * (by4 - cy7))) + (bx4 * cy7));
HXDLIN(  21)											 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN(  21)											if ((cx6 > bx4)) {
HXLINE(  21)												if ((cx6 > cx7)) {
HXLINE(  21)													int min16;
HXDLIN(  21)													if ((bx4 > cx7)) {
HXLINE(  21)														min16 = ::Math_obj::floor(cx7);
            													}
            													else {
HXLINE(  21)														min16 = ::Math_obj::floor(bx4);
            													}
HXDLIN(  21)													int ii_min42 = min16;
HXDLIN(  21)													int ii_max42 = ::Math_obj::ceil(cx6);
HXDLIN(  21)													xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            												}
            												else {
HXLINE(  21)													int ii_min43 = ::Math_obj::floor(bx4);
HXDLIN(  21)													int ii_max43 = ::Math_obj::ceil(cx7);
HXDLIN(  21)													xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            												}
            											}
            											else {
HXLINE(  21)												if ((bx4 > cx7)) {
HXLINE(  21)													int min17;
HXDLIN(  21)													if ((cx6 > cx7)) {
HXLINE(  21)														min17 = ::Math_obj::floor(cx7);
            													}
            													else {
HXLINE(  21)														min17 = ::Math_obj::ceil(cx6);
            													}
HXDLIN(  21)													int ii_min44 = min17;
HXDLIN(  21)													int ii_max44 = ::Math_obj::ceil(bx4);
HXDLIN(  21)													xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            												}
            												else {
HXLINE(  21)													int ii_min45 = ::Math_obj::floor(cx6);
HXDLIN(  21)													int ii_max45 = ::Math_obj::ceil(cx7);
HXDLIN(  21)													xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            												}
            											}
HXDLIN(  21)											 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN(  21)											if ((cy6 > by4)) {
HXLINE(  21)												if ((cy6 > cy7)) {
HXLINE(  21)													int min18;
HXDLIN(  21)													if ((by4 > cy7)) {
HXLINE(  21)														min18 = ::Math_obj::floor(cy7);
            													}
            													else {
HXLINE(  21)														min18 = ::Math_obj::floor(by4);
            													}
HXDLIN(  21)													int ii_min46 = min18;
HXDLIN(  21)													int ii_max46 = ::Math_obj::ceil(cy6);
HXDLIN(  21)													yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            												}
            												else {
HXLINE(  21)													int ii_min47 = ::Math_obj::floor(by4);
HXDLIN(  21)													int ii_max47 = ::Math_obj::ceil(cy7);
HXDLIN(  21)													yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            												}
            											}
            											else {
HXLINE(  21)												if ((by4 > cy7)) {
HXLINE(  21)													int min19;
HXDLIN(  21)													if ((cy6 > cy7)) {
HXLINE(  21)														min19 = ::Math_obj::floor(cy7);
            													}
            													else {
HXLINE(  21)														min19 = ::Math_obj::ceil(cy6);
            													}
HXDLIN(  21)													int ii_min48 = min19;
HXDLIN(  21)													int ii_max48 = ::Math_obj::ceil(by4);
HXDLIN(  21)													yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            												}
            												else {
HXLINE(  21)													int ii_min49 = ::Math_obj::floor(cy6);
HXDLIN(  21)													int ii_max49 = ::Math_obj::ceil(cy7);
HXDLIN(  21)													yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            												}
            											}
HXDLIN(  21)											 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN(  21)											if (hasUndo4) {
HXLINE(  21)												int width6 = ((xIter34->max - xIter34->start) + 1);
HXDLIN(  21)												int height6 = ((yIter34->max - yIter34->start) + 1);
HXDLIN(  21)												 ::Dynamic imageType6 = null();
HXDLIN(  21)												 ::pi_xy::ImageStruct this222 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  21)												if (::hx::IsNull( imageType6 )) {
HXLINE(  54)													imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE(  21)												::Dynamic undoImage13;
HXDLIN(  21)												switch((int)(( (int)(imageType6) ))){
            													case (int)0: {
HXLINE(  21)														 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::BytesImg b44 = byt6;
HXDLIN(  21)														{
HXLINE(  21)															b44->width = width6;
HXDLIN(  21)															b44->height = height6;
HXDLIN(  21)															b44->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  21)															b44->data = ::haxe::io::Bytes_obj::alloc((b44->length * 4));
HXDLIN(  21)															{
HXLINE(  21)																int len12 = b44->length;
HXDLIN(  21)																int w7 = 0;
HXDLIN(  21)																{
HXLINE(  21)																	int _g126 = 0;
HXDLIN(  21)																	int _g127 = b44->height;
HXDLIN(  21)																	while((_g126 < _g127)){
HXLINE(  21)																		_g126 = (_g126 + 1);
HXDLIN(  21)																		int y28 = (_g126 - 1);
HXDLIN(  21)																		{
HXLINE(  21)																			int _g128 = 0;
HXDLIN(  21)																			int _g129 = b44->width;
HXDLIN(  21)																			while((_g128 < _g129)){
HXLINE(  21)																				_g128 = (_g128 + 1);
HXDLIN(  21)																				int x27 = (_g128 - 1);
HXDLIN(  21)																				{
HXLINE(  21)																					w7 = (w7 + 1);
HXDLIN(  21)																					b44->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w7 = (w7 + 1);
HXDLIN(  21)																					b44->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w7 = (w7 + 1);
HXDLIN(  21)																					b44->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w7 = (w7 + 1);
HXDLIN(  21)																					b44->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage13 = b44;
            													}
            													break;
            													case (int)1: {
HXLINE(  21)														 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::ArrIntImg a46 = arrI6;
HXDLIN(  21)														{
HXLINE(  21)															a46->width = width6;
HXDLIN(  21)															a46->height = height6;
HXDLIN(  21)															a46->data = ::Array_obj< int >::__new(0);
HXDLIN(  21)															a46->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  21)															{
HXLINE(  21)																int _g130 = 0;
HXDLIN(  21)																int _g131 = a46->length;
HXDLIN(  21)																while((_g130 < _g131)){
HXLINE(  21)																	_g130 = (_g130 + 1);
HXDLIN(  21)																	int i51 = (_g130 - 1);
HXDLIN(  21)																	a46->data[i51] = 0;
            																}
            															}
            														}
HXDLIN(  21)														undoImage13 = a46;
            													}
            													break;
            													case (int)2: {
HXLINE(  21)														 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::U32ArrImg b45 = u32a6;
HXDLIN(  21)														{
HXLINE(  21)															b45->width = width6;
HXDLIN(  21)															b45->height = height6;
HXDLIN(  21)															b45->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  21)															int size6 = (b45->length * 4);
HXDLIN(  21)															b45->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN(  21)															{
HXLINE(  21)																int _g132 = 0;
HXDLIN(  21)																int _g133 = b45->length;
HXDLIN(  21)																while((_g132 < _g133)){
HXLINE(  21)																	_g132 = (_g132 + 1);
HXDLIN(  21)																	int i52 = (_g132 - 1);
HXDLIN(  21)																	{
HXLINE(  21)																		 ::haxe::io::ArrayBufferViewImpl this223 = b45->data;
HXDLIN(  21)																		bool undoImage14;
HXDLIN(  21)																		if ((i52 >= 0)) {
HXLINE(  21)																			undoImage14 = (i52 < (this223->byteLength >> 2));
            																		}
            																		else {
HXLINE(  21)																			undoImage14 = false;
            																		}
HXDLIN(  21)																		if (undoImage14) {
HXLINE(  21)																			 ::haxe::io::Bytes _this6 = this223->bytes;
HXDLIN(  21)																			int pos6 = ((i52 << 2) + this223->byteOffset);
HXDLIN(  21)																			_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage13 = b45;
            													}
            													break;
            													case (int)3: {
HXLINE(  21)														 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::VecIntImg v15 = vec6;
HXDLIN(  21)														{
HXLINE(  21)															v15->width = width6;
HXDLIN(  21)															v15->height = height6;
HXDLIN(  21)															v15->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  21)															v15->data = ::Array_obj< int >::__new(v15->length);
HXDLIN(  21)															{
HXLINE(  21)																int _g134 = 0;
HXDLIN(  21)																int _g135 = v15->length;
HXDLIN(  21)																while((_g134 < _g135)){
HXLINE(  21)																	_g134 = (_g134 + 1);
HXDLIN(  21)																	int i53 = (_g134 - 1);
HXDLIN(  21)																	v15->data->__unsafe_set(i53,0);
            																}
            															}
            														}
HXDLIN(  21)														undoImage13 = v15;
            													}
            													break;
            													case (int)4: {
HXLINE(  21)														 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::StackIntImg b46 = sInt6;
HXDLIN(  21)														{
HXLINE(  21)															b46->width = width6;
HXDLIN(  21)															b46->height = height6;
HXDLIN(  21)															b46->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  21)															b46->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  21)															{
HXLINE(  21)																int len13 = b46->length;
HXDLIN(  21)																 ::haxe::ds::GenericStack_Int d6 = b46->data;
HXDLIN(  21)																if (::hx::IsNull( d6->head )) {
HXLINE(  21)																	int _g136 = 0;
HXDLIN(  21)																	int _g137 = len13;
HXDLIN(  21)																	while((_g136 < _g137)){
HXLINE(  21)																		_g136 = (_g136 + 1);
HXDLIN(  21)																		int i54 = (_g136 - 1);
HXDLIN(  21)																		d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            																	}
            																}
            																else {
HXLINE(  21)																	int _g138 = 0;
HXDLIN(  21)																	int _g139 = len13;
HXDLIN(  21)																	while((_g138 < _g139)){
HXLINE(  21)																		_g138 = (_g138 + 1);
HXDLIN(  21)																		int i55 = (_g138 - 1);
HXDLIN(  21)																		{
HXLINE(  21)																			 ::haxe::ds::GenericCell_Int l6 = b46->data->head;
HXDLIN(  21)																			 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN(  21)																			{
HXLINE(  21)																				int _g140 = 0;
HXDLIN(  21)																				int _g141 = i55;
HXDLIN(  21)																				while((_g140 < _g141)){
HXLINE(  21)																					_g140 = (_g140 + 1);
HXDLIN(  21)																					int i56 = (_g140 - 1);
HXLINE( 345)																					prev6 = l6;
HXLINE( 346)																					l6 = l6->next;
            																				}
            																			}
HXLINE(  21)																			if (::hx::IsNull( prev6 )) {
HXLINE(  21)																				b46->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  21)																				l6 = null();
            																			}
            																			else {
HXLINE(  21)																				prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  21)																				l6 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage13 = b46;
            													}
            													break;
            												}
HXDLIN(  21)												this222->image = undoImage13;
HXDLIN(  21)												this222->width = width6;
HXDLIN(  21)												this222->height = height6;
HXDLIN(  21)												this222->imageType = ( (int)(imageType6) );
HXDLIN(  21)												undoImage12 = this222;
HXDLIN(  21)												{
HXLINE(  21)													int rectLeft4 = xIter34->start;
HXDLIN(  21)													int rectTop4 = yIter34->start;
HXDLIN(  21)													int rectRight4 = xIter34->max;
HXDLIN(  21)													bool forceClear5 = false;
HXDLIN(  21)													{
HXLINE(  21)														int _g142 = rectTop4;
HXDLIN(  21)														int _g143 = yIter34->max;
HXDLIN(  21)														while((_g142 < _g143)){
HXLINE(  21)															_g142 = (_g142 + 1);
HXDLIN(  21)															int dy7 = (_g142 - 1);
HXDLIN(  21)															{
HXLINE(  21)																int _g144 = rectLeft4;
HXDLIN(  21)																int _g145 = rectRight4;
HXDLIN(  21)																while((_g144 < _g145)){
HXLINE(  21)																	_g144 = (_g144 + 1);
HXDLIN(  21)																	int dx7 = (_g144 - 1);
HXDLIN(  21)																	::Dynamic this224 = this221->image;
HXDLIN(  21)																	int index29;
HXDLIN(  21)																	if (this221->useVirtualPos) {
HXLINE(  21)																		index29 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this221->virtualY) * ( (Float)(this221->width) )) + dx7) - this221->virtualX));
            																	}
            																	else {
HXLINE(  21)																		index29 = ::Std_obj::_hx_int(( (Float)(((dy7 * this221->width) + dx7)) ));
            																	}
HXDLIN(  21)																	int c24 = ::iterMagic::Iimg_obj::get(this224,index29);
HXDLIN(  21)																	int col5;
HXDLIN(  21)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																		col5 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            																	}
            																	else {
HXLINE(  21)																		col5 = c24;
            																	}
HXDLIN(  21)																	bool _hx_tmp55;
HXDLIN(  21)																	if (this221->useMask) {
HXLINE(  21)																		_hx_tmp55 = ::hx::IsNotNull( this221->mask );
            																	}
            																	else {
HXLINE(  21)																		_hx_tmp55 = false;
            																	}
HXDLIN(  21)																	if (_hx_tmp55) {
HXLINE(  21)																		 ::pi_xy::ImageStruct this225 = this221->mask;
HXDLIN(  21)																		::Dynamic this226 = this225->image;
HXDLIN(  21)																		int index30;
HXDLIN(  21)																		if (this225->useVirtualPos) {
HXLINE(  21)																			index30 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this225->virtualY) * ( (Float)(this225->width) )) + dx7) - this225->virtualX));
            																		}
            																		else {
HXLINE(  21)																			index30 = ::Std_obj::_hx_int(( (Float)(((dy7 * this225->width) + dx7)) ));
            																		}
HXDLIN(  21)																		int c25 = ::iterMagic::Iimg_obj::get(this226,index30);
HXDLIN(  21)																		int v16;
HXDLIN(  21)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																			v16 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            																		}
            																		else {
HXLINE(  21)																			v16 = c25;
            																		}
HXDLIN(  21)																		int maskPixel5 = v16;
HXDLIN(  21)																		int this227 = col5;
HXDLIN(  21)																		if ((maskPixel5 == 0)) {
HXLINE(  21)																			col5 = this227;
            																		}
            																		else {
HXLINE(  21)																			Float m05;
HXDLIN(  21)																			int this228 = ((maskPixel5 >> 24) & 255);
HXDLIN(  21)																			if ((this228 == 0)) {
HXLINE(  21)																				m05 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m05 = (( (Float)(this228) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m15;
HXDLIN(  21)																			int this229 = ((maskPixel5 >> 16) & 255);
HXDLIN(  21)																			if ((this229 == 0)) {
HXLINE(  21)																				m15 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m15 = (( (Float)(this229) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m25;
HXDLIN(  21)																			int this230 = ((maskPixel5 >> 8) & 255);
HXDLIN(  21)																			if ((this230 == 0)) {
HXLINE(  21)																				m25 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m25 = (( (Float)(this230) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m35;
HXDLIN(  21)																			int this231 = (maskPixel5 & 255);
HXDLIN(  21)																			if ((this231 == 0)) {
HXLINE(  21)																				m35 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m35 = (( (Float)(this231) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this227 >> 24) & 255)) )));
HXDLIN(  21)																			int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this227 >> 16) & 255)) )));
HXDLIN(  21)																			int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this227 >> 8) & 255)) )));
HXDLIN(  21)																			int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this227 & 255)) )));
HXDLIN(  21)																			col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN(  21)																	if ((col5 != 0)) {
HXLINE(  21)																		int x28 = (dx7 - rectLeft4);
HXDLIN(  21)																		int y29 = (dy7 - rectTop4);
HXDLIN(  21)																		int c26 = col5;
HXDLIN(  21)																		bool _hx_tmp56;
HXDLIN(  21)																		if ((((c26 >> 24) & 255) < 254)) {
HXLINE(  21)																			_hx_tmp56 = undoImage12->transparent;
            																		}
            																		else {
HXLINE(  21)																			_hx_tmp56 = false;
            																		}
HXDLIN(  21)																		if (_hx_tmp56) {
HXLINE(  21)																			int location14;
HXDLIN(  21)																			if (undoImage12->useVirtualPos) {
HXLINE(  21)																				location14 = ::Std_obj::_hx_int(((((( (Float)(y29) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x28) - undoImage12->virtualX));
            																			}
            																			else {
HXLINE(  21)																				location14 = ::Std_obj::_hx_int(( (Float)(((y29 * undoImage12->width) + x28)) ));
            																			}
HXDLIN(  21)																			int this232 = ::iterMagic::Iimg_obj::get(undoImage12->image,location14);
HXDLIN(  21)																			int this233;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				this233 = ((((((this232 >> 24) & 255) << 24) | ((this232 & 255) << 16)) | (((this232 >> 8) & 255) << 8)) | ((this232 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				this233 = this232;
            																			}
HXDLIN(  21)																			Float a117;
HXDLIN(  21)																			int this234 = ((this233 >> 24) & 255);
HXDLIN(  21)																			if ((this234 == 0)) {
HXLINE(  21)																				a117 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a117 = (( (Float)(this234) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r114;
HXDLIN(  21)																			int this235 = ((this233 >> 16) & 255);
HXDLIN(  21)																			if ((this235 == 0)) {
HXLINE(  21)																				r114 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r114 = (( (Float)(this235) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g114;
HXDLIN(  21)																			int this236 = ((this233 >> 8) & 255);
HXDLIN(  21)																			if ((this236 == 0)) {
HXLINE(  21)																				g114 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g114 = (( (Float)(this236) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b118;
HXDLIN(  21)																			int this237 = (this233 & 255);
HXDLIN(  21)																			if ((this237 == 0)) {
HXLINE(  21)																				b118 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b118 = (( (Float)(this237) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a215;
HXDLIN(  21)																			int this238 = ((col5 >> 24) & 255);
HXDLIN(  21)																			if ((this238 == 0)) {
HXLINE(  21)																				a215 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a215 = (( (Float)(this238) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r214;
HXDLIN(  21)																			int this239 = ((col5 >> 16) & 255);
HXDLIN(  21)																			if ((this239 == 0)) {
HXLINE(  21)																				r214 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r214 = (( (Float)(this239) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g214;
HXDLIN(  21)																			int this240 = ((col5 >> 8) & 255);
HXDLIN(  21)																			if ((this240 == 0)) {
HXLINE(  21)																				g214 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g214 = (( (Float)(this240) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b218;
HXDLIN(  21)																			int this241 = (col5 & 255);
HXDLIN(  21)																			if ((this241 == 0)) {
HXLINE(  21)																				b218 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b218 = (( (Float)(this241) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN(  21)																			int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a314) + (r214 * a215))));
HXDLIN(  21)																			int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a314) + (g214 * a215))));
HXDLIN(  21)																			int b47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b218 * a215))));
HXDLIN(  21)																			int a47 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN(  21)																			int blended14 = ((((a47 << 24) | (r34 << 16)) | (g34 << 8)) | b47);
HXDLIN(  21)																			{
HXLINE(  21)																				int _hx_tmp57;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					_hx_tmp57 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					_hx_tmp57 = blended14;
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(undoImage12->image,location14,_hx_tmp57);
            																			}
            																		}
            																		else {
HXLINE(  21)																			::Dynamic this242 = undoImage12->image;
HXDLIN(  21)																			int index31;
HXDLIN(  21)																			if (undoImage12->useVirtualPos) {
HXLINE(  21)																				index31 = ::Std_obj::_hx_int(((((( (Float)(y29) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x28) - undoImage12->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index31 = ::Std_obj::_hx_int(( (Float)(((y29 * undoImage12->width) + x28)) ));
            																			}
HXDLIN(  21)																			int _hx_tmp58;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				_hx_tmp58 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				_hx_tmp58 = c26;
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this242,index31,_hx_tmp58);
            																		}
            																	}
            																	else {
HXLINE(  21)																		if (forceClear5) {
HXLINE(  21)																			::Dynamic this243 = undoImage12->image;
HXDLIN(  21)																			int x29 = (dx7 - rectLeft4);
HXDLIN(  21)																			int y30 = (dy7 - rectTop4);
HXDLIN(  21)																			int index32;
HXDLIN(  21)																			if (undoImage12->useVirtualPos) {
HXLINE(  21)																				index32 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x29) - undoImage12->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index32 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage12->width) + x29)) ));
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this243,index32,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  21)											bool found4 = false;
HXDLIN(  21)											Float s4 = ((Float)0.);
HXDLIN(  21)											Float t4 = ((Float)0.);
HXDLIN(  21)											Float sxx4 = ((Float)0.);
HXDLIN(  21)											Float txx4 = ((Float)0.);
HXDLIN(  21)											{
HXLINE(  21)												int _g_min8 = xIter34->start;
HXDLIN(  21)												int _g_max8 = xIter34->max;
HXDLIN(  21)												while((_g_min8 < _g_max8)){
HXLINE(  21)													_g_min8 = (_g_min8 + 1);
HXDLIN(  21)													int x30 = (_g_min8 - 1);
HXLINE(  60)													sxx4 = (sx4 * ( (Float)(x30) ));
HXLINE(  61)													txx4 = (tx4 * ( (Float)(x30) ));
HXLINE(  62)													found4 = false;
HXLINE(  21)													{
HXLINE(  21)														int _g_min9 = yIter34->start;
HXDLIN(  21)														int _g_max9 = yIter34->max;
HXDLIN(  21)														while((_g_min9 < _g_max9)){
HXLINE(  21)															_g_min9 = (_g_min9 + 1);
HXDLIN(  21)															int y31 = (_g_min9 - 1);
HXLINE(  64)															s4 = ((s04 + sxx4) + (sy4 * ( (Float)(y31) )));
HXLINE(  65)															t4 = ((t04 + txx4) + (ty4 * ( (Float)(y31) )));
HXLINE(  21)															bool _hx_tmp59;
HXDLIN(  21)															if (!((s4 <= 0))) {
HXLINE(  21)																_hx_tmp59 = (t4 <= 0);
            															}
            															else {
HXLINE(  21)																_hx_tmp59 = true;
            															}
HXDLIN(  21)															if (_hx_tmp59) {
HXLINE(  21)																if (found4) {
HXLINE(  21)																	goto _hx_goto_88;
            																}
            															}
            															else {
HXLINE(  21)																if (((s4 + t4) < A4)) {
HXLINE(  21)																	{
HXLINE(  21)																		int c27 = color3;
HXDLIN(  21)																		bool _hx_tmp60;
HXDLIN(  21)																		if ((((c27 >> 24) & 255) < 254)) {
HXLINE(  21)																			_hx_tmp60 = this221->transparent;
            																		}
            																		else {
HXLINE(  21)																			_hx_tmp60 = false;
            																		}
HXDLIN(  21)																		if (_hx_tmp60) {
HXLINE(  21)																			int location15;
HXDLIN(  21)																			if (this221->useVirtualPos) {
HXLINE(  21)																				location15 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - this221->virtualY) * ( (Float)(this221->width) )) + x30) - this221->virtualX));
            																			}
            																			else {
HXLINE(  21)																				location15 = ::Std_obj::_hx_int(( (Float)(((y31 * this221->width) + x30)) ));
            																			}
HXDLIN(  21)																			int this244 = ::iterMagic::Iimg_obj::get(this221->image,location15);
HXDLIN(  21)																			int this245;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				this245 = ((((((this244 >> 24) & 255) << 24) | ((this244 & 255) << 16)) | (((this244 >> 8) & 255) << 8)) | ((this244 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				this245 = this244;
            																			}
HXDLIN(  21)																			Float a118;
HXDLIN(  21)																			int this246 = ((this245 >> 24) & 255);
HXDLIN(  21)																			if ((this246 == 0)) {
HXLINE(  21)																				a118 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a118 = (( (Float)(this246) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r115;
HXDLIN(  21)																			int this247 = ((this245 >> 16) & 255);
HXDLIN(  21)																			if ((this247 == 0)) {
HXLINE(  21)																				r115 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r115 = (( (Float)(this247) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g115;
HXDLIN(  21)																			int this248 = ((this245 >> 8) & 255);
HXDLIN(  21)																			if ((this248 == 0)) {
HXLINE(  21)																				g115 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g115 = (( (Float)(this248) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b119;
HXDLIN(  21)																			int this249 = (this245 & 255);
HXDLIN(  21)																			if ((this249 == 0)) {
HXLINE(  21)																				b119 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b119 = (( (Float)(this249) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a216;
HXDLIN(  21)																			int this250 = ((color3 >> 24) & 255);
HXDLIN(  21)																			if ((this250 == 0)) {
HXLINE(  21)																				a216 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a216 = (( (Float)(this250) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r215;
HXDLIN(  21)																			int this251 = ((color3 >> 16) & 255);
HXDLIN(  21)																			if ((this251 == 0)) {
HXLINE(  21)																				r215 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r215 = (( (Float)(this251) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g215;
HXDLIN(  21)																			int this252 = ((color3 >> 8) & 255);
HXDLIN(  21)																			if ((this252 == 0)) {
HXLINE(  21)																				g215 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g215 = (( (Float)(this252) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b219;
HXDLIN(  21)																			int this253 = (color3 & 255);
HXDLIN(  21)																			if ((this253 == 0)) {
HXLINE(  21)																				b219 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b219 = (( (Float)(this253) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN(  21)																			int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a315) + (r215 * a216))));
HXDLIN(  21)																			int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a315) + (g215 * a216))));
HXDLIN(  21)																			int b48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b219 * a216))));
HXDLIN(  21)																			int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN(  21)																			int blended15 = ((((a48 << 24) | (r35 << 16)) | (g35 << 8)) | b48);
HXDLIN(  21)																			{
HXLINE(  21)																				int _hx_tmp61;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					_hx_tmp61 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					_hx_tmp61 = blended15;
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(this221->image,location15,_hx_tmp61);
            																			}
            																		}
            																		else {
HXLINE(  21)																			::Dynamic this254 = this221->image;
HXDLIN(  21)																			int index33;
HXDLIN(  21)																			if (this221->useVirtualPos) {
HXLINE(  21)																				index33 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - this221->virtualY) * ( (Float)(this221->width) )) + x30) - this221->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index33 = ::Std_obj::_hx_int(( (Float)(((y31 * this221->width) + x30)) ));
            																			}
HXDLIN(  21)																			int _hx_tmp62;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				_hx_tmp62 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				_hx_tmp62 = c27;
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this254,index33,_hx_tmp62);
            																		}
            																	}
HXLINE(  73)																	found4 = true;
            																}
            																else {
HXLINE(  21)																	if (found4) {
HXLINE(  21)																		goto _hx_goto_88;
            																	}
            																}
            															}
            														}
            														_hx_goto_88:;
            													}
            												}
            											}
HXDLIN(  21)											if ((hasHit4 == true)) {
HXLINE(  21)												 ::pi_xy::algo::HitTri v17 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx6,cy6,bx4,by4,cx7,cy7,true);
HXDLIN(  21)												if (hasUndo4) {
HXLINE(  21)													v17->undoImage = undoImage12;
HXDLIN(  21)													v17->undoX = xIter34->start;
HXDLIN(  21)													v17->undoY = yIter34->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  46)								lastX4 = nextX4;
HXLINE(  47)								lastY4 = nextY4;
            							}
            						}
            					}
            				}
HXLINE(  21)				{
HXLINE(  21)					int r_x5 = ::Std_obj::_hx_int((x26 + dx6));
HXDLIN(  21)					int r_y5 = ::Std_obj::_hx_int(y27);
HXDLIN(  21)					int r_w5 = ::Std_obj::_hx_int(( (Float)(fat1) ));
HXDLIN(  21)					int r_h5 = ::Std_obj::_hx_int(( (Float)(dy6) ));
HXDLIN(  21)					int xmax5 = ((r_x5 + r_w5) + 1);
HXDLIN(  21)					int ymax5 = ((r_y5 + r_h5) + 1);
HXDLIN(  21)					int ii_min50 = r_x5;
HXDLIN(  21)					int ii_max50 = xmax5;
HXDLIN(  21)					int xRange__start5 = ii_min50;
HXDLIN(  21)					int xRange__max5 = ii_max50;
HXDLIN(  21)					int ii_min51 = r_y5;
HXDLIN(  21)					int ii_max51 = ymax5;
HXDLIN(  21)					int yRange__start5 = ii_min51;
HXDLIN(  21)					int yRange__max5 = ii_max51;
HXDLIN(  21)					int range_x5 = xRange__start5;
HXDLIN(  21)					int range_y5 = (yRange__start5 - 1);
HXDLIN(  21)					int range_xReset5 = range_x5;
HXDLIN(  21)					int range_yReset5 = range_y5;
HXDLIN(  21)					int range_xMax5 = (xRange__max5 - 2);
HXDLIN(  21)					int range_yMax5 = (yRange__max5 - 2);
HXDLIN(  21)					int _this_min5 = 0;
HXDLIN(  21)					int _this_max5 = ::Std_obj::_hx_int(( (Float)(((xRange__max5 - xRange__start5) * (yRange__max5 - yRange__start5))) ));
HXDLIN(  21)					while((_this_min5 < _this_max5)){
HXLINE(  21)						_this_min5 = (_this_min5 + 1);
HXDLIN(  21)						int i57 = (_this_min5 - 1);
HXDLIN(  21)						if ((range_y5 > range_yMax5)) {
HXLINE(  21)							range_y5 = range_yReset5;
HXDLIN(  21)							range_x5 = (range_x5 + 1);
            						}
HXDLIN(  21)						range_y5 = (range_y5 + 1);
HXDLIN(  21)						int i58 = i57;
HXDLIN(  21)						{
HXLINE(  21)							int x31 = range_x5;
HXDLIN(  21)							int y32 = range_y5;
HXDLIN(  21)							int c28 = color3;
HXDLIN(  21)							bool _hx_tmp63;
HXDLIN(  21)							if ((((c28 >> 24) & 255) < 254)) {
HXLINE(  21)								_hx_tmp63 = temp1->transparent;
            							}
            							else {
HXLINE(  21)								_hx_tmp63 = false;
            							}
HXDLIN(  21)							if (_hx_tmp63) {
HXLINE(  21)								int location16;
HXDLIN(  21)								if (temp1->useVirtualPos) {
HXLINE(  21)									location16 = ::Std_obj::_hx_int(((((( (Float)(y32) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + x31) - temp1->virtualX));
            								}
            								else {
HXLINE(  21)									location16 = ::Std_obj::_hx_int(( (Float)(((y32 * temp1->width) + x31)) ));
            								}
HXDLIN(  21)								int this255 = ::iterMagic::Iimg_obj::get(temp1->image,location16);
HXDLIN(  21)								int this256;
HXDLIN(  21)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)									this256 = ((((((this255 >> 24) & 255) << 24) | ((this255 & 255) << 16)) | (((this255 >> 8) & 255) << 8)) | ((this255 >> 16) & 255));
            								}
            								else {
HXLINE(  21)									this256 = this255;
            								}
HXDLIN(  21)								Float a119;
HXDLIN(  21)								int this257 = ((this256 >> 24) & 255);
HXDLIN(  21)								if ((this257 == 0)) {
HXLINE(  21)									a119 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									a119 = (( (Float)(this257) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float r116;
HXDLIN(  21)								int this258 = ((this256 >> 16) & 255);
HXDLIN(  21)								if ((this258 == 0)) {
HXLINE(  21)									r116 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									r116 = (( (Float)(this258) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float g116;
HXDLIN(  21)								int this259 = ((this256 >> 8) & 255);
HXDLIN(  21)								if ((this259 == 0)) {
HXLINE(  21)									g116 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									g116 = (( (Float)(this259) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float b120;
HXDLIN(  21)								int this260 = (this256 & 255);
HXDLIN(  21)								if ((this260 == 0)) {
HXLINE(  21)									b120 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									b120 = (( (Float)(this260) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float a217;
HXDLIN(  21)								int this261 = ((color3 >> 24) & 255);
HXDLIN(  21)								if ((this261 == 0)) {
HXLINE(  21)									a217 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									a217 = (( (Float)(this261) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float r216;
HXDLIN(  21)								int this262 = ((color3 >> 16) & 255);
HXDLIN(  21)								if ((this262 == 0)) {
HXLINE(  21)									r216 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									r216 = (( (Float)(this262) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float g216;
HXDLIN(  21)								int this263 = ((color3 >> 8) & 255);
HXDLIN(  21)								if ((this263 == 0)) {
HXLINE(  21)									g216 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									g216 = (( (Float)(this263) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float b220;
HXDLIN(  21)								int this264 = (color3 & 255);
HXDLIN(  21)								if ((this264 == 0)) {
HXLINE(  21)									b220 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									b220 = (( (Float)(this264) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float a316 = (a119 * (( (Float)(1) ) - a217));
HXDLIN(  21)								int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a316) + (r216 * a217))));
HXDLIN(  21)								int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a316) + (g216 * a217))));
HXDLIN(  21)								int b49 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a316) + (b220 * a217))));
HXDLIN(  21)								int a49 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN(  21)								int blended16 = ((((a49 << 24) | (r36 << 16)) | (g36 << 8)) | b49);
HXDLIN(  21)								{
HXLINE(  21)									int _hx_tmp64;
HXDLIN(  21)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)										_hx_tmp64 = ((((((blended16 >> 24) & 255) << 24) | ((blended16 & 255) << 16)) | (((blended16 >> 8) & 255) << 8)) | ((blended16 >> 16) & 255));
            									}
            									else {
HXLINE(  21)										_hx_tmp64 = blended16;
            									}
HXDLIN(  21)									::iterMagic::Iimg_obj::set(temp1->image,location16,_hx_tmp64);
            								}
            							}
            							else {
HXLINE(  21)								::Dynamic this265 = temp1->image;
HXDLIN(  21)								int index34;
HXDLIN(  21)								if (temp1->useVirtualPos) {
HXLINE(  21)									index34 = ::Std_obj::_hx_int(((((( (Float)(y32) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + x31) - temp1->virtualX));
            								}
            								else {
HXLINE(  21)									index34 = ::Std_obj::_hx_int(( (Float)(((y32 * temp1->width) + x31)) ));
            								}
HXDLIN(  21)								int _hx_tmp65;
HXDLIN(  21)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)									_hx_tmp65 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            								}
            								else {
HXLINE(  21)									_hx_tmp65 = c28;
            								}
HXDLIN(  21)								::iterMagic::Iimg_obj::set(this265,index34,_hx_tmp65);
            							}
            						}
            					}
            				}
HXDLIN(  21)				{
HXLINE(  21)					 ::pi_xy::ImageStruct this266 = temp1;
HXDLIN(  21)					Float cy8 = (y27 + dy6);
HXDLIN(  21)					Float ry3 = ( (Float)(dy6) );
HXDLIN(  21)					{
HXLINE(  21)						 ::Dynamic targetError5 = ((Float)1.05);
HXDLIN(  21)						if (::hx::IsNull( targetError5 )) {
HXLINE( 113)							targetError5 = ((Float)1.05);
            						}
HXLINE(  21)						Float rSmall5;
HXDLIN(  21)						if ((rightRadius1 > ry3)) {
HXLINE(  21)							rSmall5 = ry3;
            						}
            						else {
HXLINE(  21)							rSmall5 = rightRadius1;
            						}
HXDLIN(  21)						 ::Dynamic targetE5 = ( (Float)(targetError5) );
HXDLIN(  21)						if (::hx::IsNull( targetE5 )) {
HXLINE(  20)							targetE5 = ((Float)1.05);
            						}
HXLINE(  21)						int result5 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE5) ) / rSmall5)))));
HXDLIN(  21)						int noSides5;
HXDLIN(  21)						if ((result5 < 12)) {
HXLINE(  21)							noSides5 = 12;
            						}
            						else {
HXLINE(  21)							if ((result5 > 500)) {
HXLINE(  21)								noSides5 = 500;
            							}
            							else {
HXLINE(  21)								noSides5 = result5;
            							}
            						}
HXDLIN(  21)						int sides5 = (::Math_obj::ceil((( (Float)(noSides5) ) / ( (Float)(4) ))) * 4);
HXDLIN(  21)						Float theta5 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides5) ));
HXDLIN(  21)						Float omega5 = ((( (Float)(3) ) * ::Math_obj::PI) / ( (Float)(2) ));
HXDLIN(  21)						int quarter5 = ::Std_obj::_hx_int((( (Float)(sides5) ) / ( (Float)(4) )));
HXDLIN(  21)						Float lastX5 = ((Float)0.);
HXDLIN(  21)						Float lastY5 = ((Float)0.);
HXDLIN(  21)						{
HXLINE(  26)							lastX5 = (farX1 + (rightRadius1 * ::Math_obj::cos(((( (Float)(sides5) ) * theta5) + omega5))));
HXLINE(  27)							lastY5 = (cy8 + (ry3 * ::Math_obj::sin(((( (Float)(sides5) ) * theta5) + omega5))));
            						}
HXLINE(  21)						{
HXLINE(  21)							int _g146 = 0;
HXDLIN(  21)							int _g147 = (quarter5 + 1);
HXDLIN(  21)							while((_g146 < _g147)){
HXLINE(  21)								_g146 = (_g146 + 1);
HXDLIN(  21)								int i59 = (_g146 - 1);
HXDLIN(  21)								Float nextX5 = (farX1 + (rightRadius1 * ::Math_obj::cos((((( (Float)(i59) ) * theta5) + ((Float)0.0001)) + omega5))));
HXDLIN(  21)								Float nextY5 = (cy8 + (ry3 * ::Math_obj::sin((((( (Float)(i59) ) * theta5) + ((Float)0.0001)) + omega5))));
HXDLIN(  21)								{
HXLINE(  21)									 ::pi_xy::ImageStruct this267 = this266;
HXDLIN(  21)									bool hasHit5 = false;
HXDLIN(  21)									bool hasUndo5 = false;
HXDLIN(  21)									{
HXLINE(  21)										Float bx5 = lastX5;
HXDLIN(  21)										Float by5 = lastY5;
HXDLIN(  21)										Float cx8 = nextX5;
HXDLIN(  21)										Float cy9 = nextY5;
HXDLIN(  21)										bool adjustWinding5 = (((((farX1 * by5) - (bx5 * cy8)) + ((bx5 * cy9) - (cx8 * by5))) + ((cx8 * cy8) - (farX1 * cy9))) > 0);
HXDLIN(  21)										if (!(adjustWinding5)) {
HXLINE(  21)											Float bx_5 = bx5;
HXDLIN(  21)											Float by_5 = by5;
HXLINE(  25)											bx5 = cx8;
HXLINE(  26)											by5 = cy9;
HXLINE(  27)											cx8 = bx_5;
HXLINE(  28)											cy9 = by_5;
            										}
HXLINE(  21)										{
HXLINE(  21)											Float s05 = ((cy8 * cx8) - (farX1 * cy9));
HXDLIN(  21)											Float sx5 = (cy9 - cy8);
HXDLIN(  21)											Float sy5 = (farX1 - cx8);
HXDLIN(  21)											Float t05 = ((farX1 * by5) - (cy8 * bx5));
HXDLIN(  21)											Float tx5 = (cy8 - by5);
HXDLIN(  21)											Float ty5 = (bx5 - farX1);
HXDLIN(  21)											Float A5 = ((((-(by5) * cx8) + (cy8 * (-(bx5) + cx8))) + (farX1 * (by5 - cy9))) + (bx5 * cy9));
HXDLIN(  21)											 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN(  21)											if ((farX1 > bx5)) {
HXLINE(  21)												if ((farX1 > cx8)) {
HXLINE(  21)													int min20;
HXDLIN(  21)													if ((bx5 > cx8)) {
HXLINE(  21)														min20 = ::Math_obj::floor(cx8);
            													}
            													else {
HXLINE(  21)														min20 = ::Math_obj::floor(bx5);
            													}
HXDLIN(  21)													int ii_min52 = min20;
HXDLIN(  21)													int ii_max52 = ::Math_obj::ceil(farX1);
HXDLIN(  21)													xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            												}
            												else {
HXLINE(  21)													int ii_min53 = ::Math_obj::floor(bx5);
HXDLIN(  21)													int ii_max53 = ::Math_obj::ceil(cx8);
HXDLIN(  21)													xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            												}
            											}
            											else {
HXLINE(  21)												if ((bx5 > cx8)) {
HXLINE(  21)													int min21;
HXDLIN(  21)													if ((farX1 > cx8)) {
HXLINE(  21)														min21 = ::Math_obj::floor(cx8);
            													}
            													else {
HXLINE(  21)														min21 = ::Math_obj::ceil(farX1);
            													}
HXDLIN(  21)													int ii_min54 = min21;
HXDLIN(  21)													int ii_max54 = ::Math_obj::ceil(bx5);
HXDLIN(  21)													xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            												}
            												else {
HXLINE(  21)													int ii_min55 = ::Math_obj::floor(farX1);
HXDLIN(  21)													int ii_max55 = ::Math_obj::ceil(cx8);
HXDLIN(  21)													xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            												}
            											}
HXDLIN(  21)											 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN(  21)											if ((cy8 > by5)) {
HXLINE(  21)												if ((cy8 > cy9)) {
HXLINE(  21)													int min22;
HXDLIN(  21)													if ((by5 > cy9)) {
HXLINE(  21)														min22 = ::Math_obj::floor(cy9);
            													}
            													else {
HXLINE(  21)														min22 = ::Math_obj::floor(by5);
            													}
HXDLIN(  21)													int ii_min56 = min22;
HXDLIN(  21)													int ii_max56 = ::Math_obj::ceil(cy8);
HXDLIN(  21)													yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            												}
            												else {
HXLINE(  21)													int ii_min57 = ::Math_obj::floor(by5);
HXDLIN(  21)													int ii_max57 = ::Math_obj::ceil(cy9);
HXDLIN(  21)													yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            												}
            											}
            											else {
HXLINE(  21)												if ((by5 > cy9)) {
HXLINE(  21)													int min23;
HXDLIN(  21)													if ((cy8 > cy9)) {
HXLINE(  21)														min23 = ::Math_obj::floor(cy9);
            													}
            													else {
HXLINE(  21)														min23 = ::Math_obj::ceil(cy8);
            													}
HXDLIN(  21)													int ii_min58 = min23;
HXDLIN(  21)													int ii_max58 = ::Math_obj::ceil(by5);
HXDLIN(  21)													yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            												}
            												else {
HXLINE(  21)													int ii_min59 = ::Math_obj::floor(cy8);
HXDLIN(  21)													int ii_max59 = ::Math_obj::ceil(cy9);
HXDLIN(  21)													yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            												}
            											}
HXDLIN(  21)											 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN(  21)											if (hasUndo5) {
HXLINE(  21)												int width7 = ((xIter35->max - xIter35->start) + 1);
HXDLIN(  21)												int height7 = ((yIter35->max - yIter35->start) + 1);
HXDLIN(  21)												 ::Dynamic imageType7 = null();
HXDLIN(  21)												 ::pi_xy::ImageStruct this268 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  21)												if (::hx::IsNull( imageType7 )) {
HXLINE(  54)													imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE(  21)												::Dynamic undoImage16;
HXDLIN(  21)												switch((int)(( (int)(imageType7) ))){
            													case (int)0: {
HXLINE(  21)														 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::BytesImg b50 = byt7;
HXDLIN(  21)														{
HXLINE(  21)															b50->width = width7;
HXDLIN(  21)															b50->height = height7;
HXDLIN(  21)															b50->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  21)															b50->data = ::haxe::io::Bytes_obj::alloc((b50->length * 4));
HXDLIN(  21)															{
HXLINE(  21)																int len14 = b50->length;
HXDLIN(  21)																int w8 = 0;
HXDLIN(  21)																{
HXLINE(  21)																	int _g148 = 0;
HXDLIN(  21)																	int _g149 = b50->height;
HXDLIN(  21)																	while((_g148 < _g149)){
HXLINE(  21)																		_g148 = (_g148 + 1);
HXDLIN(  21)																		int y33 = (_g148 - 1);
HXDLIN(  21)																		{
HXLINE(  21)																			int _g150 = 0;
HXDLIN(  21)																			int _g151 = b50->width;
HXDLIN(  21)																			while((_g150 < _g151)){
HXLINE(  21)																				_g150 = (_g150 + 1);
HXDLIN(  21)																				int x32 = (_g150 - 1);
HXDLIN(  21)																				{
HXLINE(  21)																					w8 = (w8 + 1);
HXDLIN(  21)																					b50->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w8 = (w8 + 1);
HXDLIN(  21)																					b50->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w8 = (w8 + 1);
HXDLIN(  21)																					b50->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w8 = (w8 + 1);
HXDLIN(  21)																					b50->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage16 = b50;
            													}
            													break;
            													case (int)1: {
HXLINE(  21)														 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::ArrIntImg a50 = arrI7;
HXDLIN(  21)														{
HXLINE(  21)															a50->width = width7;
HXDLIN(  21)															a50->height = height7;
HXDLIN(  21)															a50->data = ::Array_obj< int >::__new(0);
HXDLIN(  21)															a50->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  21)															{
HXLINE(  21)																int _g152 = 0;
HXDLIN(  21)																int _g153 = a50->length;
HXDLIN(  21)																while((_g152 < _g153)){
HXLINE(  21)																	_g152 = (_g152 + 1);
HXDLIN(  21)																	int i60 = (_g152 - 1);
HXDLIN(  21)																	a50->data[i60] = 0;
            																}
            															}
            														}
HXDLIN(  21)														undoImage16 = a50;
            													}
            													break;
            													case (int)2: {
HXLINE(  21)														 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::U32ArrImg b51 = u32a7;
HXDLIN(  21)														{
HXLINE(  21)															b51->width = width7;
HXDLIN(  21)															b51->height = height7;
HXDLIN(  21)															b51->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  21)															int size7 = (b51->length * 4);
HXDLIN(  21)															b51->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN(  21)															{
HXLINE(  21)																int _g154 = 0;
HXDLIN(  21)																int _g155 = b51->length;
HXDLIN(  21)																while((_g154 < _g155)){
HXLINE(  21)																	_g154 = (_g154 + 1);
HXDLIN(  21)																	int i61 = (_g154 - 1);
HXDLIN(  21)																	{
HXLINE(  21)																		 ::haxe::io::ArrayBufferViewImpl this269 = b51->data;
HXDLIN(  21)																		bool undoImage17;
HXDLIN(  21)																		if ((i61 >= 0)) {
HXLINE(  21)																			undoImage17 = (i61 < (this269->byteLength >> 2));
            																		}
            																		else {
HXLINE(  21)																			undoImage17 = false;
            																		}
HXDLIN(  21)																		if (undoImage17) {
HXLINE(  21)																			 ::haxe::io::Bytes _this7 = this269->bytes;
HXDLIN(  21)																			int pos7 = ((i61 << 2) + this269->byteOffset);
HXDLIN(  21)																			_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage16 = b51;
            													}
            													break;
            													case (int)3: {
HXLINE(  21)														 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::VecIntImg v18 = vec7;
HXDLIN(  21)														{
HXLINE(  21)															v18->width = width7;
HXDLIN(  21)															v18->height = height7;
HXDLIN(  21)															v18->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  21)															v18->data = ::Array_obj< int >::__new(v18->length);
HXDLIN(  21)															{
HXLINE(  21)																int _g156 = 0;
HXDLIN(  21)																int _g157 = v18->length;
HXDLIN(  21)																while((_g156 < _g157)){
HXLINE(  21)																	_g156 = (_g156 + 1);
HXDLIN(  21)																	int i62 = (_g156 - 1);
HXDLIN(  21)																	v18->data->__unsafe_set(i62,0);
            																}
            															}
            														}
HXDLIN(  21)														undoImage16 = v18;
            													}
            													break;
            													case (int)4: {
HXLINE(  21)														 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::StackIntImg b52 = sInt7;
HXDLIN(  21)														{
HXLINE(  21)															b52->width = width7;
HXDLIN(  21)															b52->height = height7;
HXDLIN(  21)															b52->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  21)															b52->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  21)															{
HXLINE(  21)																int len15 = b52->length;
HXDLIN(  21)																 ::haxe::ds::GenericStack_Int d7 = b52->data;
HXDLIN(  21)																if (::hx::IsNull( d7->head )) {
HXLINE(  21)																	int _g158 = 0;
HXDLIN(  21)																	int _g159 = len15;
HXDLIN(  21)																	while((_g158 < _g159)){
HXLINE(  21)																		_g158 = (_g158 + 1);
HXDLIN(  21)																		int i63 = (_g158 - 1);
HXDLIN(  21)																		d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            																	}
            																}
            																else {
HXLINE(  21)																	int _g160 = 0;
HXDLIN(  21)																	int _g161 = len15;
HXDLIN(  21)																	while((_g160 < _g161)){
HXLINE(  21)																		_g160 = (_g160 + 1);
HXDLIN(  21)																		int i64 = (_g160 - 1);
HXDLIN(  21)																		{
HXLINE(  21)																			 ::haxe::ds::GenericCell_Int l7 = b52->data->head;
HXDLIN(  21)																			 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN(  21)																			{
HXLINE(  21)																				int _g162 = 0;
HXDLIN(  21)																				int _g163 = i64;
HXDLIN(  21)																				while((_g162 < _g163)){
HXLINE(  21)																					_g162 = (_g162 + 1);
HXDLIN(  21)																					int i65 = (_g162 - 1);
HXLINE( 345)																					prev7 = l7;
HXLINE( 346)																					l7 = l7->next;
            																				}
            																			}
HXLINE(  21)																			if (::hx::IsNull( prev7 )) {
HXLINE(  21)																				b52->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  21)																				l7 = null();
            																			}
            																			else {
HXLINE(  21)																				prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  21)																				l7 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage16 = b52;
            													}
            													break;
            												}
HXDLIN(  21)												this268->image = undoImage16;
HXDLIN(  21)												this268->width = width7;
HXDLIN(  21)												this268->height = height7;
HXDLIN(  21)												this268->imageType = ( (int)(imageType7) );
HXDLIN(  21)												undoImage15 = this268;
HXDLIN(  21)												{
HXLINE(  21)													int rectLeft5 = xIter35->start;
HXDLIN(  21)													int rectTop5 = yIter35->start;
HXDLIN(  21)													int rectRight5 = xIter35->max;
HXDLIN(  21)													bool forceClear6 = false;
HXDLIN(  21)													{
HXLINE(  21)														int _g164 = rectTop5;
HXDLIN(  21)														int _g165 = yIter35->max;
HXDLIN(  21)														while((_g164 < _g165)){
HXLINE(  21)															_g164 = (_g164 + 1);
HXDLIN(  21)															int dy8 = (_g164 - 1);
HXDLIN(  21)															{
HXLINE(  21)																int _g166 = rectLeft5;
HXDLIN(  21)																int _g167 = rectRight5;
HXDLIN(  21)																while((_g166 < _g167)){
HXLINE(  21)																	_g166 = (_g166 + 1);
HXDLIN(  21)																	int dx8 = (_g166 - 1);
HXDLIN(  21)																	::Dynamic this270 = this267->image;
HXDLIN(  21)																	int index35;
HXDLIN(  21)																	if (this267->useVirtualPos) {
HXLINE(  21)																		index35 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this267->virtualY) * ( (Float)(this267->width) )) + dx8) - this267->virtualX));
            																	}
            																	else {
HXLINE(  21)																		index35 = ::Std_obj::_hx_int(( (Float)(((dy8 * this267->width) + dx8)) ));
            																	}
HXDLIN(  21)																	int c29 = ::iterMagic::Iimg_obj::get(this270,index35);
HXDLIN(  21)																	int col6;
HXDLIN(  21)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																		col6 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            																	}
            																	else {
HXLINE(  21)																		col6 = c29;
            																	}
HXDLIN(  21)																	bool _hx_tmp66;
HXDLIN(  21)																	if (this267->useMask) {
HXLINE(  21)																		_hx_tmp66 = ::hx::IsNotNull( this267->mask );
            																	}
            																	else {
HXLINE(  21)																		_hx_tmp66 = false;
            																	}
HXDLIN(  21)																	if (_hx_tmp66) {
HXLINE(  21)																		 ::pi_xy::ImageStruct this271 = this267->mask;
HXDLIN(  21)																		::Dynamic this272 = this271->image;
HXDLIN(  21)																		int index36;
HXDLIN(  21)																		if (this271->useVirtualPos) {
HXLINE(  21)																			index36 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this271->virtualY) * ( (Float)(this271->width) )) + dx8) - this271->virtualX));
            																		}
            																		else {
HXLINE(  21)																			index36 = ::Std_obj::_hx_int(( (Float)(((dy8 * this271->width) + dx8)) ));
            																		}
HXDLIN(  21)																		int c30 = ::iterMagic::Iimg_obj::get(this272,index36);
HXDLIN(  21)																		int v19;
HXDLIN(  21)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																			v19 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            																		}
            																		else {
HXLINE(  21)																			v19 = c30;
            																		}
HXDLIN(  21)																		int maskPixel6 = v19;
HXDLIN(  21)																		int this273 = col6;
HXDLIN(  21)																		if ((maskPixel6 == 0)) {
HXLINE(  21)																			col6 = this273;
            																		}
            																		else {
HXLINE(  21)																			Float m06;
HXDLIN(  21)																			int this274 = ((maskPixel6 >> 24) & 255);
HXDLIN(  21)																			if ((this274 == 0)) {
HXLINE(  21)																				m06 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m06 = (( (Float)(this274) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m16;
HXDLIN(  21)																			int this275 = ((maskPixel6 >> 16) & 255);
HXDLIN(  21)																			if ((this275 == 0)) {
HXLINE(  21)																				m16 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m16 = (( (Float)(this275) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m26;
HXDLIN(  21)																			int this276 = ((maskPixel6 >> 8) & 255);
HXDLIN(  21)																			if ((this276 == 0)) {
HXLINE(  21)																				m26 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m26 = (( (Float)(this276) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m36;
HXDLIN(  21)																			int this277 = (maskPixel6 & 255);
HXDLIN(  21)																			if ((this277 == 0)) {
HXLINE(  21)																				m36 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m36 = (( (Float)(this277) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this273 >> 24) & 255)) )));
HXDLIN(  21)																			int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this273 >> 16) & 255)) )));
HXDLIN(  21)																			int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this273 >> 8) & 255)) )));
HXDLIN(  21)																			int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this273 & 255)) )));
HXDLIN(  21)																			col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN(  21)																	if ((col6 != 0)) {
HXLINE(  21)																		int x33 = (dx8 - rectLeft5);
HXDLIN(  21)																		int y34 = (dy8 - rectTop5);
HXDLIN(  21)																		int c31 = col6;
HXDLIN(  21)																		bool _hx_tmp67;
HXDLIN(  21)																		if ((((c31 >> 24) & 255) < 254)) {
HXLINE(  21)																			_hx_tmp67 = undoImage15->transparent;
            																		}
            																		else {
HXLINE(  21)																			_hx_tmp67 = false;
            																		}
HXDLIN(  21)																		if (_hx_tmp67) {
HXLINE(  21)																			int location17;
HXDLIN(  21)																			if (undoImage15->useVirtualPos) {
HXLINE(  21)																				location17 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x33) - undoImage15->virtualX));
            																			}
            																			else {
HXLINE(  21)																				location17 = ::Std_obj::_hx_int(( (Float)(((y34 * undoImage15->width) + x33)) ));
            																			}
HXDLIN(  21)																			int this278 = ::iterMagic::Iimg_obj::get(undoImage15->image,location17);
HXDLIN(  21)																			int this279;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				this279 = ((((((this278 >> 24) & 255) << 24) | ((this278 & 255) << 16)) | (((this278 >> 8) & 255) << 8)) | ((this278 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				this279 = this278;
            																			}
HXDLIN(  21)																			Float a120;
HXDLIN(  21)																			int this280 = ((this279 >> 24) & 255);
HXDLIN(  21)																			if ((this280 == 0)) {
HXLINE(  21)																				a120 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a120 = (( (Float)(this280) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r117;
HXDLIN(  21)																			int this281 = ((this279 >> 16) & 255);
HXDLIN(  21)																			if ((this281 == 0)) {
HXLINE(  21)																				r117 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r117 = (( (Float)(this281) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g117;
HXDLIN(  21)																			int this282 = ((this279 >> 8) & 255);
HXDLIN(  21)																			if ((this282 == 0)) {
HXLINE(  21)																				g117 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g117 = (( (Float)(this282) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b121;
HXDLIN(  21)																			int this283 = (this279 & 255);
HXDLIN(  21)																			if ((this283 == 0)) {
HXLINE(  21)																				b121 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b121 = (( (Float)(this283) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a218;
HXDLIN(  21)																			int this284 = ((col6 >> 24) & 255);
HXDLIN(  21)																			if ((this284 == 0)) {
HXLINE(  21)																				a218 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a218 = (( (Float)(this284) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r217;
HXDLIN(  21)																			int this285 = ((col6 >> 16) & 255);
HXDLIN(  21)																			if ((this285 == 0)) {
HXLINE(  21)																				r217 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r217 = (( (Float)(this285) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g217;
HXDLIN(  21)																			int this286 = ((col6 >> 8) & 255);
HXDLIN(  21)																			if ((this286 == 0)) {
HXLINE(  21)																				g217 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g217 = (( (Float)(this286) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b221;
HXDLIN(  21)																			int this287 = (col6 & 255);
HXDLIN(  21)																			if ((this287 == 0)) {
HXLINE(  21)																				b221 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b221 = (( (Float)(this287) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a317 = (a120 * (( (Float)(1) ) - a218));
HXDLIN(  21)																			int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a317) + (r217 * a218))));
HXDLIN(  21)																			int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a317) + (g217 * a218))));
HXDLIN(  21)																			int b53 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b121 * a317) + (b221 * a218))));
HXDLIN(  21)																			int a51 = ::Std_obj::_hx_int((( (Float)(255) ) * (a317 + a218)));
HXDLIN(  21)																			int blended17 = ((((a51 << 24) | (r37 << 16)) | (g37 << 8)) | b53);
HXDLIN(  21)																			{
HXLINE(  21)																				int _hx_tmp68;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					_hx_tmp68 = ((((((blended17 >> 24) & 255) << 24) | ((blended17 & 255) << 16)) | (((blended17 >> 8) & 255) << 8)) | ((blended17 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					_hx_tmp68 = blended17;
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(undoImage15->image,location17,_hx_tmp68);
            																			}
            																		}
            																		else {
HXLINE(  21)																			::Dynamic this288 = undoImage15->image;
HXDLIN(  21)																			int index37;
HXDLIN(  21)																			if (undoImage15->useVirtualPos) {
HXLINE(  21)																				index37 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x33) - undoImage15->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index37 = ::Std_obj::_hx_int(( (Float)(((y34 * undoImage15->width) + x33)) ));
            																			}
HXDLIN(  21)																			int _hx_tmp69;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				_hx_tmp69 = ((((((c31 >> 24) & 255) << 24) | ((c31 & 255) << 16)) | (((c31 >> 8) & 255) << 8)) | ((c31 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				_hx_tmp69 = c31;
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this288,index37,_hx_tmp69);
            																		}
            																	}
            																	else {
HXLINE(  21)																		if (forceClear6) {
HXLINE(  21)																			::Dynamic this289 = undoImage15->image;
HXDLIN(  21)																			int x34 = (dx8 - rectLeft5);
HXDLIN(  21)																			int y35 = (dy8 - rectTop5);
HXDLIN(  21)																			int index38;
HXDLIN(  21)																			if (undoImage15->useVirtualPos) {
HXLINE(  21)																				index38 = ::Std_obj::_hx_int(((((( (Float)(y35) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x34) - undoImage15->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index38 = ::Std_obj::_hx_int(( (Float)(((y35 * undoImage15->width) + x34)) ));
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this289,index38,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  21)											bool found5 = false;
HXDLIN(  21)											Float s5 = ((Float)0.);
HXDLIN(  21)											Float t5 = ((Float)0.);
HXDLIN(  21)											Float sxx5 = ((Float)0.);
HXDLIN(  21)											Float txx5 = ((Float)0.);
HXDLIN(  21)											{
HXLINE(  21)												int _g_min10 = xIter35->start;
HXDLIN(  21)												int _g_max10 = xIter35->max;
HXDLIN(  21)												while((_g_min10 < _g_max10)){
HXLINE(  21)													_g_min10 = (_g_min10 + 1);
HXDLIN(  21)													int x35 = (_g_min10 - 1);
HXLINE(  60)													sxx5 = (sx5 * ( (Float)(x35) ));
HXLINE(  61)													txx5 = (tx5 * ( (Float)(x35) ));
HXLINE(  62)													found5 = false;
HXLINE(  21)													{
HXLINE(  21)														int _g_min11 = yIter35->start;
HXDLIN(  21)														int _g_max11 = yIter35->max;
HXDLIN(  21)														while((_g_min11 < _g_max11)){
HXLINE(  21)															_g_min11 = (_g_min11 + 1);
HXDLIN(  21)															int y36 = (_g_min11 - 1);
HXLINE(  64)															s5 = ((s05 + sxx5) + (sy5 * ( (Float)(y36) )));
HXLINE(  65)															t5 = ((t05 + txx5) + (ty5 * ( (Float)(y36) )));
HXLINE(  21)															bool _hx_tmp70;
HXDLIN(  21)															if (!((s5 <= 0))) {
HXLINE(  21)																_hx_tmp70 = (t5 <= 0);
            															}
            															else {
HXLINE(  21)																_hx_tmp70 = true;
            															}
HXDLIN(  21)															if (_hx_tmp70) {
HXLINE(  21)																if (found5) {
HXLINE(  21)																	goto _hx_goto_102;
            																}
            															}
            															else {
HXLINE(  21)																if (((s5 + t5) < A5)) {
HXLINE(  21)																	{
HXLINE(  21)																		int c32 = color3;
HXDLIN(  21)																		bool _hx_tmp71;
HXDLIN(  21)																		if ((((c32 >> 24) & 255) < 254)) {
HXLINE(  21)																			_hx_tmp71 = this267->transparent;
            																		}
            																		else {
HXLINE(  21)																			_hx_tmp71 = false;
            																		}
HXDLIN(  21)																		if (_hx_tmp71) {
HXLINE(  21)																			int location18;
HXDLIN(  21)																			if (this267->useVirtualPos) {
HXLINE(  21)																				location18 = ::Std_obj::_hx_int(((((( (Float)(y36) ) - this267->virtualY) * ( (Float)(this267->width) )) + x35) - this267->virtualX));
            																			}
            																			else {
HXLINE(  21)																				location18 = ::Std_obj::_hx_int(( (Float)(((y36 * this267->width) + x35)) ));
            																			}
HXDLIN(  21)																			int this290 = ::iterMagic::Iimg_obj::get(this267->image,location18);
HXDLIN(  21)																			int this291;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				this291 = ((((((this290 >> 24) & 255) << 24) | ((this290 & 255) << 16)) | (((this290 >> 8) & 255) << 8)) | ((this290 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				this291 = this290;
            																			}
HXDLIN(  21)																			Float a121;
HXDLIN(  21)																			int this292 = ((this291 >> 24) & 255);
HXDLIN(  21)																			if ((this292 == 0)) {
HXLINE(  21)																				a121 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a121 = (( (Float)(this292) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r118;
HXDLIN(  21)																			int this293 = ((this291 >> 16) & 255);
HXDLIN(  21)																			if ((this293 == 0)) {
HXLINE(  21)																				r118 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r118 = (( (Float)(this293) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g118;
HXDLIN(  21)																			int this294 = ((this291 >> 8) & 255);
HXDLIN(  21)																			if ((this294 == 0)) {
HXLINE(  21)																				g118 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g118 = (( (Float)(this294) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b122;
HXDLIN(  21)																			int this295 = (this291 & 255);
HXDLIN(  21)																			if ((this295 == 0)) {
HXLINE(  21)																				b122 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b122 = (( (Float)(this295) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a219;
HXDLIN(  21)																			int this296 = ((color3 >> 24) & 255);
HXDLIN(  21)																			if ((this296 == 0)) {
HXLINE(  21)																				a219 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a219 = (( (Float)(this296) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r218;
HXDLIN(  21)																			int this297 = ((color3 >> 16) & 255);
HXDLIN(  21)																			if ((this297 == 0)) {
HXLINE(  21)																				r218 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r218 = (( (Float)(this297) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g218;
HXDLIN(  21)																			int this298 = ((color3 >> 8) & 255);
HXDLIN(  21)																			if ((this298 == 0)) {
HXLINE(  21)																				g218 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g218 = (( (Float)(this298) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b222;
HXDLIN(  21)																			int this299 = (color3 & 255);
HXDLIN(  21)																			if ((this299 == 0)) {
HXLINE(  21)																				b222 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b222 = (( (Float)(this299) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a318 = (a121 * (( (Float)(1) ) - a219));
HXDLIN(  21)																			int r38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r118 * a318) + (r218 * a219))));
HXDLIN(  21)																			int g38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g118 * a318) + (g218 * a219))));
HXDLIN(  21)																			int b54 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b122 * a318) + (b222 * a219))));
HXDLIN(  21)																			int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a318 + a219)));
HXDLIN(  21)																			int blended18 = ((((a52 << 24) | (r38 << 16)) | (g38 << 8)) | b54);
HXDLIN(  21)																			{
HXLINE(  21)																				int _hx_tmp72;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					_hx_tmp72 = ((((((blended18 >> 24) & 255) << 24) | ((blended18 & 255) << 16)) | (((blended18 >> 8) & 255) << 8)) | ((blended18 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					_hx_tmp72 = blended18;
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(this267->image,location18,_hx_tmp72);
            																			}
            																		}
            																		else {
HXLINE(  21)																			::Dynamic this300 = this267->image;
HXDLIN(  21)																			int index39;
HXDLIN(  21)																			if (this267->useVirtualPos) {
HXLINE(  21)																				index39 = ::Std_obj::_hx_int(((((( (Float)(y36) ) - this267->virtualY) * ( (Float)(this267->width) )) + x35) - this267->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index39 = ::Std_obj::_hx_int(( (Float)(((y36 * this267->width) + x35)) ));
            																			}
HXDLIN(  21)																			int _hx_tmp73;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				_hx_tmp73 = ((((((c32 >> 24) & 255) << 24) | ((c32 & 255) << 16)) | (((c32 >> 8) & 255) << 8)) | ((c32 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				_hx_tmp73 = c32;
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this300,index39,_hx_tmp73);
            																		}
            																	}
HXLINE(  73)																	found5 = true;
            																}
            																else {
HXLINE(  21)																	if (found5) {
HXLINE(  21)																		goto _hx_goto_102;
            																	}
            																}
            															}
            														}
            														_hx_goto_102:;
            													}
            												}
            											}
HXDLIN(  21)											if ((hasHit5 == true)) {
HXLINE(  21)												 ::pi_xy::algo::HitTri v20 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX1,cy8,bx5,by5,cx8,cy9,true);
HXDLIN(  21)												if (hasUndo5) {
HXLINE(  21)													v20->undoImage = undoImage15;
HXDLIN(  21)													v20->undoX = xIter35->start;
HXDLIN(  21)													v20->undoY = yIter35->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  46)								lastX5 = nextX5;
HXLINE(  47)								lastY5 = nextY5;
            							}
            						}
            					}
            				}
HXLINE(  21)				{
HXLINE(  21)					int r_x6 = ::Std_obj::_hx_int(x26);
HXDLIN(  21)					int r_y6 = ::Std_obj::_hx_int((y27 + dy6));
HXDLIN(  21)					int r_w6 = ::Std_obj::_hx_int(wid1);
HXDLIN(  21)					int r_h6 = ::Std_obj::_hx_int(( (Float)(tall1) ));
HXDLIN(  21)					int xmax6 = ((r_x6 + r_w6) + 1);
HXDLIN(  21)					int ymax6 = ((r_y6 + r_h6) + 1);
HXDLIN(  21)					int ii_min60 = r_x6;
HXDLIN(  21)					int ii_max60 = xmax6;
HXDLIN(  21)					int xRange__start6 = ii_min60;
HXDLIN(  21)					int xRange__max6 = ii_max60;
HXDLIN(  21)					int ii_min61 = r_y6;
HXDLIN(  21)					int ii_max61 = ymax6;
HXDLIN(  21)					int yRange__start6 = ii_min61;
HXDLIN(  21)					int yRange__max6 = ii_max61;
HXDLIN(  21)					int range_x6 = xRange__start6;
HXDLIN(  21)					int range_y6 = (yRange__start6 - 1);
HXDLIN(  21)					int range_xReset6 = range_x6;
HXDLIN(  21)					int range_yReset6 = range_y6;
HXDLIN(  21)					int range_xMax6 = (xRange__max6 - 2);
HXDLIN(  21)					int range_yMax6 = (yRange__max6 - 2);
HXDLIN(  21)					int _this_min6 = 0;
HXDLIN(  21)					int _this_max6 = ::Std_obj::_hx_int(( (Float)(((xRange__max6 - xRange__start6) * (yRange__max6 - yRange__start6))) ));
HXDLIN(  21)					while((_this_min6 < _this_max6)){
HXLINE(  21)						_this_min6 = (_this_min6 + 1);
HXDLIN(  21)						int i66 = (_this_min6 - 1);
HXDLIN(  21)						if ((range_y6 > range_yMax6)) {
HXLINE(  21)							range_y6 = range_yReset6;
HXDLIN(  21)							range_x6 = (range_x6 + 1);
            						}
HXDLIN(  21)						range_y6 = (range_y6 + 1);
HXDLIN(  21)						int i67 = i66;
HXDLIN(  21)						{
HXLINE(  21)							int x36 = range_x6;
HXDLIN(  21)							int y37 = range_y6;
HXDLIN(  21)							int c33 = color3;
HXDLIN(  21)							bool _hx_tmp74;
HXDLIN(  21)							if ((((c33 >> 24) & 255) < 254)) {
HXLINE(  21)								_hx_tmp74 = temp1->transparent;
            							}
            							else {
HXLINE(  21)								_hx_tmp74 = false;
            							}
HXDLIN(  21)							if (_hx_tmp74) {
HXLINE(  21)								int location19;
HXDLIN(  21)								if (temp1->useVirtualPos) {
HXLINE(  21)									location19 = ::Std_obj::_hx_int(((((( (Float)(y37) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + x36) - temp1->virtualX));
            								}
            								else {
HXLINE(  21)									location19 = ::Std_obj::_hx_int(( (Float)(((y37 * temp1->width) + x36)) ));
            								}
HXDLIN(  21)								int this301 = ::iterMagic::Iimg_obj::get(temp1->image,location19);
HXDLIN(  21)								int this302;
HXDLIN(  21)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)									this302 = ((((((this301 >> 24) & 255) << 24) | ((this301 & 255) << 16)) | (((this301 >> 8) & 255) << 8)) | ((this301 >> 16) & 255));
            								}
            								else {
HXLINE(  21)									this302 = this301;
            								}
HXDLIN(  21)								Float a122;
HXDLIN(  21)								int this303 = ((this302 >> 24) & 255);
HXDLIN(  21)								if ((this303 == 0)) {
HXLINE(  21)									a122 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									a122 = (( (Float)(this303) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float r119;
HXDLIN(  21)								int this304 = ((this302 >> 16) & 255);
HXDLIN(  21)								if ((this304 == 0)) {
HXLINE(  21)									r119 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									r119 = (( (Float)(this304) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float g119;
HXDLIN(  21)								int this305 = ((this302 >> 8) & 255);
HXDLIN(  21)								if ((this305 == 0)) {
HXLINE(  21)									g119 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									g119 = (( (Float)(this305) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float b123;
HXDLIN(  21)								int this306 = (this302 & 255);
HXDLIN(  21)								if ((this306 == 0)) {
HXLINE(  21)									b123 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									b123 = (( (Float)(this306) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float a220;
HXDLIN(  21)								int this307 = ((color3 >> 24) & 255);
HXDLIN(  21)								if ((this307 == 0)) {
HXLINE(  21)									a220 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									a220 = (( (Float)(this307) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float r219;
HXDLIN(  21)								int this308 = ((color3 >> 16) & 255);
HXDLIN(  21)								if ((this308 == 0)) {
HXLINE(  21)									r219 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									r219 = (( (Float)(this308) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float g219;
HXDLIN(  21)								int this309 = ((color3 >> 8) & 255);
HXDLIN(  21)								if ((this309 == 0)) {
HXLINE(  21)									g219 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									g219 = (( (Float)(this309) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float b223;
HXDLIN(  21)								int this310 = (color3 & 255);
HXDLIN(  21)								if ((this310 == 0)) {
HXLINE(  21)									b223 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									b223 = (( (Float)(this310) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float a319 = (a122 * (( (Float)(1) ) - a220));
HXDLIN(  21)								int r39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r119 * a319) + (r219 * a220))));
HXDLIN(  21)								int g39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g119 * a319) + (g219 * a220))));
HXDLIN(  21)								int b55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b123 * a319) + (b223 * a220))));
HXDLIN(  21)								int a53 = ::Std_obj::_hx_int((( (Float)(255) ) * (a319 + a220)));
HXDLIN(  21)								int blended19 = ((((a53 << 24) | (r39 << 16)) | (g39 << 8)) | b55);
HXDLIN(  21)								{
HXLINE(  21)									int _hx_tmp75;
HXDLIN(  21)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)										_hx_tmp75 = ((((((blended19 >> 24) & 255) << 24) | ((blended19 & 255) << 16)) | (((blended19 >> 8) & 255) << 8)) | ((blended19 >> 16) & 255));
            									}
            									else {
HXLINE(  21)										_hx_tmp75 = blended19;
            									}
HXDLIN(  21)									::iterMagic::Iimg_obj::set(temp1->image,location19,_hx_tmp75);
            								}
            							}
            							else {
HXLINE(  21)								::Dynamic this311 = temp1->image;
HXDLIN(  21)								int index40;
HXDLIN(  21)								if (temp1->useVirtualPos) {
HXLINE(  21)									index40 = ::Std_obj::_hx_int(((((( (Float)(y37) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + x36) - temp1->virtualX));
            								}
            								else {
HXLINE(  21)									index40 = ::Std_obj::_hx_int(( (Float)(((y37 * temp1->width) + x36)) ));
            								}
HXDLIN(  21)								int _hx_tmp76;
HXDLIN(  21)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)									_hx_tmp76 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            								}
            								else {
HXLINE(  21)									_hx_tmp76 = c33;
            								}
HXDLIN(  21)								::iterMagic::Iimg_obj::set(this311,index40,_hx_tmp76);
            							}
            						}
            					}
            				}
HXDLIN(  21)				{
HXLINE(  21)					 ::pi_xy::ImageStruct this312 = temp1;
HXDLIN(  21)					Float cx9 = (x26 + dx6);
HXDLIN(  21)					Float rx3 = ( (Float)(dx6) );
HXDLIN(  21)					{
HXLINE(  21)						 ::Dynamic targetError6 = ((Float)1.05);
HXDLIN(  21)						if (::hx::IsNull( targetError6 )) {
HXLINE( 113)							targetError6 = ((Float)1.05);
            						}
HXLINE(  21)						Float rSmall6;
HXDLIN(  21)						if ((rx3 > bottomRadius1)) {
HXLINE(  21)							rSmall6 = bottomRadius1;
            						}
            						else {
HXLINE(  21)							rSmall6 = rx3;
            						}
HXDLIN(  21)						 ::Dynamic targetE6 = ( (Float)(targetError6) );
HXDLIN(  21)						if (::hx::IsNull( targetE6 )) {
HXLINE(  20)							targetE6 = ((Float)1.05);
            						}
HXLINE(  21)						int result6 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE6) ) / rSmall6)))));
HXDLIN(  21)						int noSides6;
HXDLIN(  21)						if ((result6 < 12)) {
HXLINE(  21)							noSides6 = 12;
            						}
            						else {
HXLINE(  21)							if ((result6 > 500)) {
HXLINE(  21)								noSides6 = 500;
            							}
            							else {
HXLINE(  21)								noSides6 = result6;
            							}
            						}
HXDLIN(  21)						int sides6 = (::Math_obj::ceil((( (Float)(noSides6) ) / ( (Float)(4) ))) * 4);
HXDLIN(  21)						Float theta6 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides6) ));
HXDLIN(  21)						Float omega6 = (::Math_obj::PI / ( (Float)(2) ));
HXDLIN(  21)						int quarter6 = ::Std_obj::_hx_int((( (Float)(sides6) ) / ( (Float)(4) )));
HXDLIN(  21)						Float lastX6 = ((Float)0.);
HXDLIN(  21)						Float lastY6 = ((Float)0.);
HXDLIN(  21)						{
HXLINE(  26)							lastX6 = (cx9 + (rx3 * ::Math_obj::cos(((( (Float)(sides6) ) * theta6) + omega6))));
HXLINE(  27)							lastY6 = (lowerY1 + (bottomRadius1 * ::Math_obj::sin(((( (Float)(sides6) ) * theta6) + omega6))));
            						}
HXLINE(  21)						{
HXLINE(  21)							int _g168 = 0;
HXDLIN(  21)							int _g169 = (quarter6 + 1);
HXDLIN(  21)							while((_g168 < _g169)){
HXLINE(  21)								_g168 = (_g168 + 1);
HXDLIN(  21)								int i68 = (_g168 - 1);
HXDLIN(  21)								Float nextX6 = (cx9 + (rx3 * ::Math_obj::cos((((( (Float)(i68) ) * theta6) + ((Float)0.0001)) + omega6))));
HXDLIN(  21)								Float nextY6 = (lowerY1 + (bottomRadius1 * ::Math_obj::sin((((( (Float)(i68) ) * theta6) + ((Float)0.0001)) + omega6))));
HXDLIN(  21)								{
HXLINE(  21)									 ::pi_xy::ImageStruct this313 = this312;
HXDLIN(  21)									bool hasHit6 = false;
HXDLIN(  21)									bool hasUndo6 = false;
HXDLIN(  21)									{
HXLINE(  21)										Float bx6 = lastX6;
HXDLIN(  21)										Float by6 = lastY6;
HXDLIN(  21)										Float cx10 = nextX6;
HXDLIN(  21)										Float cy10 = nextY6;
HXDLIN(  21)										bool adjustWinding6 = (((((cx9 * by6) - (bx6 * lowerY1)) + ((bx6 * cy10) - (cx10 * by6))) + ((cx10 * lowerY1) - (cx9 * cy10))) > 0);
HXDLIN(  21)										if (!(adjustWinding6)) {
HXLINE(  21)											Float bx_6 = bx6;
HXDLIN(  21)											Float by_6 = by6;
HXLINE(  25)											bx6 = cx10;
HXLINE(  26)											by6 = cy10;
HXLINE(  27)											cx10 = bx_6;
HXLINE(  28)											cy10 = by_6;
            										}
HXLINE(  21)										{
HXLINE(  21)											Float s06 = ((lowerY1 * cx10) - (cx9 * cy10));
HXDLIN(  21)											Float sx6 = (cy10 - lowerY1);
HXDLIN(  21)											Float sy6 = (cx9 - cx10);
HXDLIN(  21)											Float t06 = ((cx9 * by6) - (lowerY1 * bx6));
HXDLIN(  21)											Float tx6 = (lowerY1 - by6);
HXDLIN(  21)											Float ty6 = (bx6 - cx9);
HXDLIN(  21)											Float A6 = ((((-(by6) * cx10) + (lowerY1 * (-(bx6) + cx10))) + (cx9 * (by6 - cy10))) + (bx6 * cy10));
HXDLIN(  21)											 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN(  21)											if ((cx9 > bx6)) {
HXLINE(  21)												if ((cx9 > cx10)) {
HXLINE(  21)													int min24;
HXDLIN(  21)													if ((bx6 > cx10)) {
HXLINE(  21)														min24 = ::Math_obj::floor(cx10);
            													}
            													else {
HXLINE(  21)														min24 = ::Math_obj::floor(bx6);
            													}
HXDLIN(  21)													int ii_min62 = min24;
HXDLIN(  21)													int ii_max62 = ::Math_obj::ceil(cx9);
HXDLIN(  21)													xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            												}
            												else {
HXLINE(  21)													int ii_min63 = ::Math_obj::floor(bx6);
HXDLIN(  21)													int ii_max63 = ::Math_obj::ceil(cx10);
HXDLIN(  21)													xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            												}
            											}
            											else {
HXLINE(  21)												if ((bx6 > cx10)) {
HXLINE(  21)													int min25;
HXDLIN(  21)													if ((cx9 > cx10)) {
HXLINE(  21)														min25 = ::Math_obj::floor(cx10);
            													}
            													else {
HXLINE(  21)														min25 = ::Math_obj::ceil(cx9);
            													}
HXDLIN(  21)													int ii_min64 = min25;
HXDLIN(  21)													int ii_max64 = ::Math_obj::ceil(bx6);
HXDLIN(  21)													xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min64,ii_max64);
            												}
            												else {
HXLINE(  21)													int ii_min65 = ::Math_obj::floor(cx9);
HXDLIN(  21)													int ii_max65 = ::Math_obj::ceil(cx10);
HXDLIN(  21)													xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min65,ii_max65);
            												}
            											}
HXDLIN(  21)											 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN(  21)											if ((lowerY1 > by6)) {
HXLINE(  21)												if ((lowerY1 > cy10)) {
HXLINE(  21)													int min26;
HXDLIN(  21)													if ((by6 > cy10)) {
HXLINE(  21)														min26 = ::Math_obj::floor(cy10);
            													}
            													else {
HXLINE(  21)														min26 = ::Math_obj::floor(by6);
            													}
HXDLIN(  21)													int ii_min66 = min26;
HXDLIN(  21)													int ii_max66 = ::Math_obj::ceil(lowerY1);
HXDLIN(  21)													yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min66,ii_max66);
            												}
            												else {
HXLINE(  21)													int ii_min67 = ::Math_obj::floor(by6);
HXDLIN(  21)													int ii_max67 = ::Math_obj::ceil(cy10);
HXDLIN(  21)													yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min67,ii_max67);
            												}
            											}
            											else {
HXLINE(  21)												if ((by6 > cy10)) {
HXLINE(  21)													int min27;
HXDLIN(  21)													if ((lowerY1 > cy10)) {
HXLINE(  21)														min27 = ::Math_obj::floor(cy10);
            													}
            													else {
HXLINE(  21)														min27 = ::Math_obj::ceil(lowerY1);
            													}
HXDLIN(  21)													int ii_min68 = min27;
HXDLIN(  21)													int ii_max68 = ::Math_obj::ceil(by6);
HXDLIN(  21)													yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min68,ii_max68);
            												}
            												else {
HXLINE(  21)													int ii_min69 = ::Math_obj::floor(lowerY1);
HXDLIN(  21)													int ii_max69 = ::Math_obj::ceil(cy10);
HXDLIN(  21)													yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min69,ii_max69);
            												}
            											}
HXDLIN(  21)											 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN(  21)											if (hasUndo6) {
HXLINE(  21)												int width8 = ((xIter36->max - xIter36->start) + 1);
HXDLIN(  21)												int height8 = ((yIter36->max - yIter36->start) + 1);
HXDLIN(  21)												 ::Dynamic imageType8 = null();
HXDLIN(  21)												 ::pi_xy::ImageStruct this314 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  21)												if (::hx::IsNull( imageType8 )) {
HXLINE(  54)													imageType8 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE(  21)												::Dynamic undoImage19;
HXDLIN(  21)												switch((int)(( (int)(imageType8) ))){
            													case (int)0: {
HXLINE(  21)														 ::iterMagic::BytesImg byt8 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::BytesImg b56 = byt8;
HXDLIN(  21)														{
HXLINE(  21)															b56->width = width8;
HXDLIN(  21)															b56->height = height8;
HXDLIN(  21)															b56->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  21)															b56->data = ::haxe::io::Bytes_obj::alloc((b56->length * 4));
HXDLIN(  21)															{
HXLINE(  21)																int len16 = b56->length;
HXDLIN(  21)																int w9 = 0;
HXDLIN(  21)																{
HXLINE(  21)																	int _g170 = 0;
HXDLIN(  21)																	int _g171 = b56->height;
HXDLIN(  21)																	while((_g170 < _g171)){
HXLINE(  21)																		_g170 = (_g170 + 1);
HXDLIN(  21)																		int y38 = (_g170 - 1);
HXDLIN(  21)																		{
HXLINE(  21)																			int _g172 = 0;
HXDLIN(  21)																			int _g173 = b56->width;
HXDLIN(  21)																			while((_g172 < _g173)){
HXLINE(  21)																				_g172 = (_g172 + 1);
HXDLIN(  21)																				int x37 = (_g172 - 1);
HXDLIN(  21)																				{
HXLINE(  21)																					w9 = (w9 + 1);
HXDLIN(  21)																					b56->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w9 = (w9 + 1);
HXDLIN(  21)																					b56->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w9 = (w9 + 1);
HXDLIN(  21)																					b56->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w9 = (w9 + 1);
HXDLIN(  21)																					b56->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage19 = b56;
            													}
            													break;
            													case (int)1: {
HXLINE(  21)														 ::iterMagic::ArrIntImg arrI8 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::ArrIntImg a54 = arrI8;
HXDLIN(  21)														{
HXLINE(  21)															a54->width = width8;
HXDLIN(  21)															a54->height = height8;
HXDLIN(  21)															a54->data = ::Array_obj< int >::__new(0);
HXDLIN(  21)															a54->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  21)															{
HXLINE(  21)																int _g174 = 0;
HXDLIN(  21)																int _g175 = a54->length;
HXDLIN(  21)																while((_g174 < _g175)){
HXLINE(  21)																	_g174 = (_g174 + 1);
HXDLIN(  21)																	int i69 = (_g174 - 1);
HXDLIN(  21)																	a54->data[i69] = 0;
            																}
            															}
            														}
HXDLIN(  21)														undoImage19 = a54;
            													}
            													break;
            													case (int)2: {
HXLINE(  21)														 ::iterMagic::U32ArrImg u32a8 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::U32ArrImg b57 = u32a8;
HXDLIN(  21)														{
HXLINE(  21)															b57->width = width8;
HXDLIN(  21)															b57->height = height8;
HXDLIN(  21)															b57->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  21)															int size8 = (b57->length * 4);
HXDLIN(  21)															b57->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size8),0,size8);
HXDLIN(  21)															{
HXLINE(  21)																int _g176 = 0;
HXDLIN(  21)																int _g177 = b57->length;
HXDLIN(  21)																while((_g176 < _g177)){
HXLINE(  21)																	_g176 = (_g176 + 1);
HXDLIN(  21)																	int i70 = (_g176 - 1);
HXDLIN(  21)																	{
HXLINE(  21)																		 ::haxe::io::ArrayBufferViewImpl this315 = b57->data;
HXDLIN(  21)																		bool undoImage20;
HXDLIN(  21)																		if ((i70 >= 0)) {
HXLINE(  21)																			undoImage20 = (i70 < (this315->byteLength >> 2));
            																		}
            																		else {
HXLINE(  21)																			undoImage20 = false;
            																		}
HXDLIN(  21)																		if (undoImage20) {
HXLINE(  21)																			 ::haxe::io::Bytes _this8 = this315->bytes;
HXDLIN(  21)																			int pos8 = ((i70 << 2) + this315->byteOffset);
HXDLIN(  21)																			_this8->b[pos8] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this8->b[(pos8 + 1)] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this8->b[(pos8 + 2)] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this8->b[(pos8 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage19 = b57;
            													}
            													break;
            													case (int)3: {
HXLINE(  21)														 ::iterMagic::VecIntImg vec8 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::VecIntImg v21 = vec8;
HXDLIN(  21)														{
HXLINE(  21)															v21->width = width8;
HXDLIN(  21)															v21->height = height8;
HXDLIN(  21)															v21->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  21)															v21->data = ::Array_obj< int >::__new(v21->length);
HXDLIN(  21)															{
HXLINE(  21)																int _g178 = 0;
HXDLIN(  21)																int _g179 = v21->length;
HXDLIN(  21)																while((_g178 < _g179)){
HXLINE(  21)																	_g178 = (_g178 + 1);
HXDLIN(  21)																	int i71 = (_g178 - 1);
HXDLIN(  21)																	v21->data->__unsafe_set(i71,0);
            																}
            															}
            														}
HXDLIN(  21)														undoImage19 = v21;
            													}
            													break;
            													case (int)4: {
HXLINE(  21)														 ::iterMagic::StackIntImg sInt8 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::StackIntImg b58 = sInt8;
HXDLIN(  21)														{
HXLINE(  21)															b58->width = width8;
HXDLIN(  21)															b58->height = height8;
HXDLIN(  21)															b58->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  21)															b58->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  21)															{
HXLINE(  21)																int len17 = b58->length;
HXDLIN(  21)																 ::haxe::ds::GenericStack_Int d8 = b58->data;
HXDLIN(  21)																if (::hx::IsNull( d8->head )) {
HXLINE(  21)																	int _g180 = 0;
HXDLIN(  21)																	int _g181 = len17;
HXDLIN(  21)																	while((_g180 < _g181)){
HXLINE(  21)																		_g180 = (_g180 + 1);
HXDLIN(  21)																		int i72 = (_g180 - 1);
HXDLIN(  21)																		d8->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d8->head);
            																	}
            																}
            																else {
HXLINE(  21)																	int _g182 = 0;
HXDLIN(  21)																	int _g183 = len17;
HXDLIN(  21)																	while((_g182 < _g183)){
HXLINE(  21)																		_g182 = (_g182 + 1);
HXDLIN(  21)																		int i73 = (_g182 - 1);
HXDLIN(  21)																		{
HXLINE(  21)																			 ::haxe::ds::GenericCell_Int l8 = b58->data->head;
HXDLIN(  21)																			 ::haxe::ds::GenericCell_Int prev8 = null();
HXDLIN(  21)																			{
HXLINE(  21)																				int _g184 = 0;
HXDLIN(  21)																				int _g185 = i73;
HXDLIN(  21)																				while((_g184 < _g185)){
HXLINE(  21)																					_g184 = (_g184 + 1);
HXDLIN(  21)																					int i74 = (_g184 - 1);
HXLINE( 345)																					prev8 = l8;
HXLINE( 346)																					l8 = l8->next;
            																				}
            																			}
HXLINE(  21)																			if (::hx::IsNull( prev8 )) {
HXLINE(  21)																				b58->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  21)																				l8 = null();
            																			}
            																			else {
HXLINE(  21)																				prev8->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  21)																				l8 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage19 = b58;
            													}
            													break;
            												}
HXDLIN(  21)												this314->image = undoImage19;
HXDLIN(  21)												this314->width = width8;
HXDLIN(  21)												this314->height = height8;
HXDLIN(  21)												this314->imageType = ( (int)(imageType8) );
HXDLIN(  21)												undoImage18 = this314;
HXDLIN(  21)												{
HXLINE(  21)													int rectLeft6 = xIter36->start;
HXDLIN(  21)													int rectTop6 = yIter36->start;
HXDLIN(  21)													int rectRight6 = xIter36->max;
HXDLIN(  21)													bool forceClear7 = false;
HXDLIN(  21)													{
HXLINE(  21)														int _g186 = rectTop6;
HXDLIN(  21)														int _g187 = yIter36->max;
HXDLIN(  21)														while((_g186 < _g187)){
HXLINE(  21)															_g186 = (_g186 + 1);
HXDLIN(  21)															int dy9 = (_g186 - 1);
HXDLIN(  21)															{
HXLINE(  21)																int _g188 = rectLeft6;
HXDLIN(  21)																int _g189 = rectRight6;
HXDLIN(  21)																while((_g188 < _g189)){
HXLINE(  21)																	_g188 = (_g188 + 1);
HXDLIN(  21)																	int dx9 = (_g188 - 1);
HXDLIN(  21)																	::Dynamic this316 = this313->image;
HXDLIN(  21)																	int index41;
HXDLIN(  21)																	if (this313->useVirtualPos) {
HXLINE(  21)																		index41 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this313->virtualY) * ( (Float)(this313->width) )) + dx9) - this313->virtualX));
            																	}
            																	else {
HXLINE(  21)																		index41 = ::Std_obj::_hx_int(( (Float)(((dy9 * this313->width) + dx9)) ));
            																	}
HXDLIN(  21)																	int c34 = ::iterMagic::Iimg_obj::get(this316,index41);
HXDLIN(  21)																	int col7;
HXDLIN(  21)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																		col7 = ((((((c34 >> 24) & 255) << 24) | ((c34 & 255) << 16)) | (((c34 >> 8) & 255) << 8)) | ((c34 >> 16) & 255));
            																	}
            																	else {
HXLINE(  21)																		col7 = c34;
            																	}
HXDLIN(  21)																	bool _hx_tmp77;
HXDLIN(  21)																	if (this313->useMask) {
HXLINE(  21)																		_hx_tmp77 = ::hx::IsNotNull( this313->mask );
            																	}
            																	else {
HXLINE(  21)																		_hx_tmp77 = false;
            																	}
HXDLIN(  21)																	if (_hx_tmp77) {
HXLINE(  21)																		 ::pi_xy::ImageStruct this317 = this313->mask;
HXDLIN(  21)																		::Dynamic this318 = this317->image;
HXDLIN(  21)																		int index42;
HXDLIN(  21)																		if (this317->useVirtualPos) {
HXLINE(  21)																			index42 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this317->virtualY) * ( (Float)(this317->width) )) + dx9) - this317->virtualX));
            																		}
            																		else {
HXLINE(  21)																			index42 = ::Std_obj::_hx_int(( (Float)(((dy9 * this317->width) + dx9)) ));
            																		}
HXDLIN(  21)																		int c35 = ::iterMagic::Iimg_obj::get(this318,index42);
HXDLIN(  21)																		int v22;
HXDLIN(  21)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																			v22 = ((((((c35 >> 24) & 255) << 24) | ((c35 & 255) << 16)) | (((c35 >> 8) & 255) << 8)) | ((c35 >> 16) & 255));
            																		}
            																		else {
HXLINE(  21)																			v22 = c35;
            																		}
HXDLIN(  21)																		int maskPixel7 = v22;
HXDLIN(  21)																		int this319 = col7;
HXDLIN(  21)																		if ((maskPixel7 == 0)) {
HXLINE(  21)																			col7 = this319;
            																		}
            																		else {
HXLINE(  21)																			Float m07;
HXDLIN(  21)																			int this320 = ((maskPixel7 >> 24) & 255);
HXDLIN(  21)																			if ((this320 == 0)) {
HXLINE(  21)																				m07 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m07 = (( (Float)(this320) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m17;
HXDLIN(  21)																			int this321 = ((maskPixel7 >> 16) & 255);
HXDLIN(  21)																			if ((this321 == 0)) {
HXLINE(  21)																				m17 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m17 = (( (Float)(this321) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m27;
HXDLIN(  21)																			int this322 = ((maskPixel7 >> 8) & 255);
HXDLIN(  21)																			if ((this322 == 0)) {
HXLINE(  21)																				m27 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m27 = (( (Float)(this322) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m37;
HXDLIN(  21)																			int this323 = (maskPixel7 & 255);
HXDLIN(  21)																			if ((this323 == 0)) {
HXLINE(  21)																				m37 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m37 = (( (Float)(this323) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this319 >> 24) & 255)) )));
HXDLIN(  21)																			int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this319 >> 16) & 255)) )));
HXDLIN(  21)																			int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this319 >> 8) & 255)) )));
HXDLIN(  21)																			int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this319 & 255)) )));
HXDLIN(  21)																			col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN(  21)																	if ((col7 != 0)) {
HXLINE(  21)																		int x38 = (dx9 - rectLeft6);
HXDLIN(  21)																		int y39 = (dy9 - rectTop6);
HXDLIN(  21)																		int c36 = col7;
HXDLIN(  21)																		bool _hx_tmp78;
HXDLIN(  21)																		if ((((c36 >> 24) & 255) < 254)) {
HXLINE(  21)																			_hx_tmp78 = undoImage18->transparent;
            																		}
            																		else {
HXLINE(  21)																			_hx_tmp78 = false;
            																		}
HXDLIN(  21)																		if (_hx_tmp78) {
HXLINE(  21)																			int location20;
HXDLIN(  21)																			if (undoImage18->useVirtualPos) {
HXLINE(  21)																				location20 = ::Std_obj::_hx_int(((((( (Float)(y39) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x38) - undoImage18->virtualX));
            																			}
            																			else {
HXLINE(  21)																				location20 = ::Std_obj::_hx_int(( (Float)(((y39 * undoImage18->width) + x38)) ));
            																			}
HXDLIN(  21)																			int this324 = ::iterMagic::Iimg_obj::get(undoImage18->image,location20);
HXDLIN(  21)																			int this325;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				this325 = ((((((this324 >> 24) & 255) << 24) | ((this324 & 255) << 16)) | (((this324 >> 8) & 255) << 8)) | ((this324 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				this325 = this324;
            																			}
HXDLIN(  21)																			Float a123;
HXDLIN(  21)																			int this326 = ((this325 >> 24) & 255);
HXDLIN(  21)																			if ((this326 == 0)) {
HXLINE(  21)																				a123 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a123 = (( (Float)(this326) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r120;
HXDLIN(  21)																			int this327 = ((this325 >> 16) & 255);
HXDLIN(  21)																			if ((this327 == 0)) {
HXLINE(  21)																				r120 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r120 = (( (Float)(this327) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g120;
HXDLIN(  21)																			int this328 = ((this325 >> 8) & 255);
HXDLIN(  21)																			if ((this328 == 0)) {
HXLINE(  21)																				g120 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g120 = (( (Float)(this328) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b124;
HXDLIN(  21)																			int this329 = (this325 & 255);
HXDLIN(  21)																			if ((this329 == 0)) {
HXLINE(  21)																				b124 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b124 = (( (Float)(this329) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a221;
HXDLIN(  21)																			int this330 = ((col7 >> 24) & 255);
HXDLIN(  21)																			if ((this330 == 0)) {
HXLINE(  21)																				a221 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a221 = (( (Float)(this330) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r220;
HXDLIN(  21)																			int this331 = ((col7 >> 16) & 255);
HXDLIN(  21)																			if ((this331 == 0)) {
HXLINE(  21)																				r220 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r220 = (( (Float)(this331) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g220;
HXDLIN(  21)																			int this332 = ((col7 >> 8) & 255);
HXDLIN(  21)																			if ((this332 == 0)) {
HXLINE(  21)																				g220 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g220 = (( (Float)(this332) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b224;
HXDLIN(  21)																			int this333 = (col7 & 255);
HXDLIN(  21)																			if ((this333 == 0)) {
HXLINE(  21)																				b224 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b224 = (( (Float)(this333) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a320 = (a123 * (( (Float)(1) ) - a221));
HXDLIN(  21)																			int r40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r120 * a320) + (r220 * a221))));
HXDLIN(  21)																			int g40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g120 * a320) + (g220 * a221))));
HXDLIN(  21)																			int b59 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b124 * a320) + (b224 * a221))));
HXDLIN(  21)																			int a55 = ::Std_obj::_hx_int((( (Float)(255) ) * (a320 + a221)));
HXDLIN(  21)																			int blended20 = ((((a55 << 24) | (r40 << 16)) | (g40 << 8)) | b59);
HXDLIN(  21)																			{
HXLINE(  21)																				int _hx_tmp79;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					_hx_tmp79 = ((((((blended20 >> 24) & 255) << 24) | ((blended20 & 255) << 16)) | (((blended20 >> 8) & 255) << 8)) | ((blended20 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					_hx_tmp79 = blended20;
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(undoImage18->image,location20,_hx_tmp79);
            																			}
            																		}
            																		else {
HXLINE(  21)																			::Dynamic this334 = undoImage18->image;
HXDLIN(  21)																			int index43;
HXDLIN(  21)																			if (undoImage18->useVirtualPos) {
HXLINE(  21)																				index43 = ::Std_obj::_hx_int(((((( (Float)(y39) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x38) - undoImage18->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index43 = ::Std_obj::_hx_int(( (Float)(((y39 * undoImage18->width) + x38)) ));
            																			}
HXDLIN(  21)																			int _hx_tmp80;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				_hx_tmp80 = ((((((c36 >> 24) & 255) << 24) | ((c36 & 255) << 16)) | (((c36 >> 8) & 255) << 8)) | ((c36 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				_hx_tmp80 = c36;
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this334,index43,_hx_tmp80);
            																		}
            																	}
            																	else {
HXLINE(  21)																		if (forceClear7) {
HXLINE(  21)																			::Dynamic this335 = undoImage18->image;
HXDLIN(  21)																			int x39 = (dx9 - rectLeft6);
HXDLIN(  21)																			int y40 = (dy9 - rectTop6);
HXDLIN(  21)																			int index44;
HXDLIN(  21)																			if (undoImage18->useVirtualPos) {
HXLINE(  21)																				index44 = ::Std_obj::_hx_int(((((( (Float)(y40) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x39) - undoImage18->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index44 = ::Std_obj::_hx_int(( (Float)(((y40 * undoImage18->width) + x39)) ));
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this335,index44,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  21)											bool found6 = false;
HXDLIN(  21)											Float s6 = ((Float)0.);
HXDLIN(  21)											Float t6 = ((Float)0.);
HXDLIN(  21)											Float sxx6 = ((Float)0.);
HXDLIN(  21)											Float txx6 = ((Float)0.);
HXDLIN(  21)											{
HXLINE(  21)												int _g_min12 = xIter36->start;
HXDLIN(  21)												int _g_max12 = xIter36->max;
HXDLIN(  21)												while((_g_min12 < _g_max12)){
HXLINE(  21)													_g_min12 = (_g_min12 + 1);
HXDLIN(  21)													int x40 = (_g_min12 - 1);
HXLINE(  60)													sxx6 = (sx6 * ( (Float)(x40) ));
HXLINE(  61)													txx6 = (tx6 * ( (Float)(x40) ));
HXLINE(  62)													found6 = false;
HXLINE(  21)													{
HXLINE(  21)														int _g_min13 = yIter36->start;
HXDLIN(  21)														int _g_max13 = yIter36->max;
HXDLIN(  21)														while((_g_min13 < _g_max13)){
HXLINE(  21)															_g_min13 = (_g_min13 + 1);
HXDLIN(  21)															int y41 = (_g_min13 - 1);
HXLINE(  64)															s6 = ((s06 + sxx6) + (sy6 * ( (Float)(y41) )));
HXLINE(  65)															t6 = ((t06 + txx6) + (ty6 * ( (Float)(y41) )));
HXLINE(  21)															bool _hx_tmp81;
HXDLIN(  21)															if (!((s6 <= 0))) {
HXLINE(  21)																_hx_tmp81 = (t6 <= 0);
            															}
            															else {
HXLINE(  21)																_hx_tmp81 = true;
            															}
HXDLIN(  21)															if (_hx_tmp81) {
HXLINE(  21)																if (found6) {
HXLINE(  21)																	goto _hx_goto_116;
            																}
            															}
            															else {
HXLINE(  21)																if (((s6 + t6) < A6)) {
HXLINE(  21)																	{
HXLINE(  21)																		int c37 = color3;
HXDLIN(  21)																		bool _hx_tmp82;
HXDLIN(  21)																		if ((((c37 >> 24) & 255) < 254)) {
HXLINE(  21)																			_hx_tmp82 = this313->transparent;
            																		}
            																		else {
HXLINE(  21)																			_hx_tmp82 = false;
            																		}
HXDLIN(  21)																		if (_hx_tmp82) {
HXLINE(  21)																			int location21;
HXDLIN(  21)																			if (this313->useVirtualPos) {
HXLINE(  21)																				location21 = ::Std_obj::_hx_int(((((( (Float)(y41) ) - this313->virtualY) * ( (Float)(this313->width) )) + x40) - this313->virtualX));
            																			}
            																			else {
HXLINE(  21)																				location21 = ::Std_obj::_hx_int(( (Float)(((y41 * this313->width) + x40)) ));
            																			}
HXDLIN(  21)																			int this336 = ::iterMagic::Iimg_obj::get(this313->image,location21);
HXDLIN(  21)																			int this337;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				this337 = ((((((this336 >> 24) & 255) << 24) | ((this336 & 255) << 16)) | (((this336 >> 8) & 255) << 8)) | ((this336 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				this337 = this336;
            																			}
HXDLIN(  21)																			Float a124;
HXDLIN(  21)																			int this338 = ((this337 >> 24) & 255);
HXDLIN(  21)																			if ((this338 == 0)) {
HXLINE(  21)																				a124 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a124 = (( (Float)(this338) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r121;
HXDLIN(  21)																			int this339 = ((this337 >> 16) & 255);
HXDLIN(  21)																			if ((this339 == 0)) {
HXLINE(  21)																				r121 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r121 = (( (Float)(this339) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g121;
HXDLIN(  21)																			int this340 = ((this337 >> 8) & 255);
HXDLIN(  21)																			if ((this340 == 0)) {
HXLINE(  21)																				g121 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g121 = (( (Float)(this340) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b125;
HXDLIN(  21)																			int this341 = (this337 & 255);
HXDLIN(  21)																			if ((this341 == 0)) {
HXLINE(  21)																				b125 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b125 = (( (Float)(this341) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a222;
HXDLIN(  21)																			int this342 = ((color3 >> 24) & 255);
HXDLIN(  21)																			if ((this342 == 0)) {
HXLINE(  21)																				a222 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a222 = (( (Float)(this342) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r221;
HXDLIN(  21)																			int this343 = ((color3 >> 16) & 255);
HXDLIN(  21)																			if ((this343 == 0)) {
HXLINE(  21)																				r221 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r221 = (( (Float)(this343) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g221;
HXDLIN(  21)																			int this344 = ((color3 >> 8) & 255);
HXDLIN(  21)																			if ((this344 == 0)) {
HXLINE(  21)																				g221 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g221 = (( (Float)(this344) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b225;
HXDLIN(  21)																			int this345 = (color3 & 255);
HXDLIN(  21)																			if ((this345 == 0)) {
HXLINE(  21)																				b225 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b225 = (( (Float)(this345) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a321 = (a124 * (( (Float)(1) ) - a222));
HXDLIN(  21)																			int r41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r121 * a321) + (r221 * a222))));
HXDLIN(  21)																			int g41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g121 * a321) + (g221 * a222))));
HXDLIN(  21)																			int b60 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b125 * a321) + (b225 * a222))));
HXDLIN(  21)																			int a56 = ::Std_obj::_hx_int((( (Float)(255) ) * (a321 + a222)));
HXDLIN(  21)																			int blended21 = ((((a56 << 24) | (r41 << 16)) | (g41 << 8)) | b60);
HXDLIN(  21)																			{
HXLINE(  21)																				int _hx_tmp83;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					_hx_tmp83 = ((((((blended21 >> 24) & 255) << 24) | ((blended21 & 255) << 16)) | (((blended21 >> 8) & 255) << 8)) | ((blended21 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					_hx_tmp83 = blended21;
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(this313->image,location21,_hx_tmp83);
            																			}
            																		}
            																		else {
HXLINE(  21)																			::Dynamic this346 = this313->image;
HXDLIN(  21)																			int index45;
HXDLIN(  21)																			if (this313->useVirtualPos) {
HXLINE(  21)																				index45 = ::Std_obj::_hx_int(((((( (Float)(y41) ) - this313->virtualY) * ( (Float)(this313->width) )) + x40) - this313->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index45 = ::Std_obj::_hx_int(( (Float)(((y41 * this313->width) + x40)) ));
            																			}
HXDLIN(  21)																			int _hx_tmp84;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				_hx_tmp84 = ((((((c37 >> 24) & 255) << 24) | ((c37 & 255) << 16)) | (((c37 >> 8) & 255) << 8)) | ((c37 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				_hx_tmp84 = c37;
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this346,index45,_hx_tmp84);
            																		}
            																	}
HXLINE(  73)																	found6 = true;
            																}
            																else {
HXLINE(  21)																	if (found6) {
HXLINE(  21)																		goto _hx_goto_116;
            																	}
            																}
            															}
            														}
            														_hx_goto_116:;
            													}
            												}
            											}
HXDLIN(  21)											if ((hasHit6 == true)) {
HXLINE(  21)												 ::pi_xy::algo::HitTri v23 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx9,lowerY1,bx6,by6,cx10,cy10,true);
HXDLIN(  21)												if (hasUndo6) {
HXLINE(  21)													v23->undoImage = undoImage18;
HXDLIN(  21)													v23->undoX = xIter36->start;
HXDLIN(  21)													v23->undoY = yIter36->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  46)								lastX6 = nextX6;
HXLINE(  47)								lastY6 = nextY6;
            							}
            						}
            					}
            				}
HXLINE(  21)				{
HXLINE(  21)					int r_x7 = ::Std_obj::_hx_int((x26 + dx6));
HXDLIN(  21)					int r_y7 = ::Std_obj::_hx_int(lowerY1);
HXDLIN(  21)					int r_w7 = ::Std_obj::_hx_int(( (Float)(fat1) ));
HXDLIN(  21)					int r_h7 = ::Std_obj::_hx_int(bottomRadius1);
HXDLIN(  21)					int xmax7 = ((r_x7 + r_w7) + 1);
HXDLIN(  21)					int ymax7 = ((r_y7 + r_h7) + 1);
HXDLIN(  21)					int ii_min70 = r_x7;
HXDLIN(  21)					int ii_max70 = xmax7;
HXDLIN(  21)					int xRange__start7 = ii_min70;
HXDLIN(  21)					int xRange__max7 = ii_max70;
HXDLIN(  21)					int ii_min71 = r_y7;
HXDLIN(  21)					int ii_max71 = ymax7;
HXDLIN(  21)					int yRange__start7 = ii_min71;
HXDLIN(  21)					int yRange__max7 = ii_max71;
HXDLIN(  21)					int range_x7 = xRange__start7;
HXDLIN(  21)					int range_y7 = (yRange__start7 - 1);
HXDLIN(  21)					int range_xReset7 = range_x7;
HXDLIN(  21)					int range_yReset7 = range_y7;
HXDLIN(  21)					int range_xMax7 = (xRange__max7 - 2);
HXDLIN(  21)					int range_yMax7 = (yRange__max7 - 2);
HXDLIN(  21)					int _this_min7 = 0;
HXDLIN(  21)					int _this_max7 = ::Std_obj::_hx_int(( (Float)(((xRange__max7 - xRange__start7) * (yRange__max7 - yRange__start7))) ));
HXDLIN(  21)					while((_this_min7 < _this_max7)){
HXLINE(  21)						_this_min7 = (_this_min7 + 1);
HXDLIN(  21)						int i75 = (_this_min7 - 1);
HXDLIN(  21)						if ((range_y7 > range_yMax7)) {
HXLINE(  21)							range_y7 = range_yReset7;
HXDLIN(  21)							range_x7 = (range_x7 + 1);
            						}
HXDLIN(  21)						range_y7 = (range_y7 + 1);
HXDLIN(  21)						int i76 = i75;
HXDLIN(  21)						{
HXLINE(  21)							int x41 = range_x7;
HXDLIN(  21)							int y42 = range_y7;
HXDLIN(  21)							int c38 = color3;
HXDLIN(  21)							bool _hx_tmp85;
HXDLIN(  21)							if ((((c38 >> 24) & 255) < 254)) {
HXLINE(  21)								_hx_tmp85 = temp1->transparent;
            							}
            							else {
HXLINE(  21)								_hx_tmp85 = false;
            							}
HXDLIN(  21)							if (_hx_tmp85) {
HXLINE(  21)								int location22;
HXDLIN(  21)								if (temp1->useVirtualPos) {
HXLINE(  21)									location22 = ::Std_obj::_hx_int(((((( (Float)(y42) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + x41) - temp1->virtualX));
            								}
            								else {
HXLINE(  21)									location22 = ::Std_obj::_hx_int(( (Float)(((y42 * temp1->width) + x41)) ));
            								}
HXDLIN(  21)								int this347 = ::iterMagic::Iimg_obj::get(temp1->image,location22);
HXDLIN(  21)								int this348;
HXDLIN(  21)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)									this348 = ((((((this347 >> 24) & 255) << 24) | ((this347 & 255) << 16)) | (((this347 >> 8) & 255) << 8)) | ((this347 >> 16) & 255));
            								}
            								else {
HXLINE(  21)									this348 = this347;
            								}
HXDLIN(  21)								Float a125;
HXDLIN(  21)								int this349 = ((this348 >> 24) & 255);
HXDLIN(  21)								if ((this349 == 0)) {
HXLINE(  21)									a125 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									a125 = (( (Float)(this349) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float r122;
HXDLIN(  21)								int this350 = ((this348 >> 16) & 255);
HXDLIN(  21)								if ((this350 == 0)) {
HXLINE(  21)									r122 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									r122 = (( (Float)(this350) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float g122;
HXDLIN(  21)								int this351 = ((this348 >> 8) & 255);
HXDLIN(  21)								if ((this351 == 0)) {
HXLINE(  21)									g122 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									g122 = (( (Float)(this351) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float b126;
HXDLIN(  21)								int this352 = (this348 & 255);
HXDLIN(  21)								if ((this352 == 0)) {
HXLINE(  21)									b126 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									b126 = (( (Float)(this352) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float a223;
HXDLIN(  21)								int this353 = ((color3 >> 24) & 255);
HXDLIN(  21)								if ((this353 == 0)) {
HXLINE(  21)									a223 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									a223 = (( (Float)(this353) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float r222;
HXDLIN(  21)								int this354 = ((color3 >> 16) & 255);
HXDLIN(  21)								if ((this354 == 0)) {
HXLINE(  21)									r222 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									r222 = (( (Float)(this354) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float g222;
HXDLIN(  21)								int this355 = ((color3 >> 8) & 255);
HXDLIN(  21)								if ((this355 == 0)) {
HXLINE(  21)									g222 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									g222 = (( (Float)(this355) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float b226;
HXDLIN(  21)								int this356 = (color3 & 255);
HXDLIN(  21)								if ((this356 == 0)) {
HXLINE(  21)									b226 = ((Float)0.);
            								}
            								else {
HXLINE(  21)									b226 = (( (Float)(this356) ) / ( (Float)(255) ));
            								}
HXDLIN(  21)								Float a322 = (a125 * (( (Float)(1) ) - a223));
HXDLIN(  21)								int r42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r122 * a322) + (r222 * a223))));
HXDLIN(  21)								int g42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g122 * a322) + (g222 * a223))));
HXDLIN(  21)								int b61 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b126 * a322) + (b226 * a223))));
HXDLIN(  21)								int a57 = ::Std_obj::_hx_int((( (Float)(255) ) * (a322 + a223)));
HXDLIN(  21)								int blended22 = ((((a57 << 24) | (r42 << 16)) | (g42 << 8)) | b61);
HXDLIN(  21)								{
HXLINE(  21)									int _hx_tmp86;
HXDLIN(  21)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)										_hx_tmp86 = ((((((blended22 >> 24) & 255) << 24) | ((blended22 & 255) << 16)) | (((blended22 >> 8) & 255) << 8)) | ((blended22 >> 16) & 255));
            									}
            									else {
HXLINE(  21)										_hx_tmp86 = blended22;
            									}
HXDLIN(  21)									::iterMagic::Iimg_obj::set(temp1->image,location22,_hx_tmp86);
            								}
            							}
            							else {
HXLINE(  21)								::Dynamic this357 = temp1->image;
HXDLIN(  21)								int index46;
HXDLIN(  21)								if (temp1->useVirtualPos) {
HXLINE(  21)									index46 = ::Std_obj::_hx_int(((((( (Float)(y42) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + x41) - temp1->virtualX));
            								}
            								else {
HXLINE(  21)									index46 = ::Std_obj::_hx_int(( (Float)(((y42 * temp1->width) + x41)) ));
            								}
HXDLIN(  21)								int _hx_tmp87;
HXDLIN(  21)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)									_hx_tmp87 = ((((((c38 >> 24) & 255) << 24) | ((c38 & 255) << 16)) | (((c38 >> 8) & 255) << 8)) | ((c38 >> 16) & 255));
            								}
            								else {
HXLINE(  21)									_hx_tmp87 = c38;
            								}
HXDLIN(  21)								::iterMagic::Iimg_obj::set(this357,index46,_hx_tmp87);
            							}
            						}
            					}
            				}
HXDLIN(  21)				{
HXLINE(  21)					 ::pi_xy::ImageStruct this358 = temp1;
HXDLIN(  21)					{
HXLINE(  21)						 ::Dynamic targetError7 = ((Float)1.05);
HXDLIN(  21)						if (::hx::IsNull( targetError7 )) {
HXLINE( 113)							targetError7 = ((Float)1.05);
            						}
HXLINE(  21)						Float rSmall7;
HXDLIN(  21)						if ((rightRadius1 > bottomRadius1)) {
HXLINE(  21)							rSmall7 = bottomRadius1;
            						}
            						else {
HXLINE(  21)							rSmall7 = rightRadius1;
            						}
HXDLIN(  21)						 ::Dynamic targetE7 = ( (Float)(targetError7) );
HXDLIN(  21)						if (::hx::IsNull( targetE7 )) {
HXLINE(  20)							targetE7 = ((Float)1.05);
            						}
HXLINE(  21)						int result7 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE7) ) / rSmall7)))));
HXDLIN(  21)						int noSides7;
HXDLIN(  21)						if ((result7 < 12)) {
HXLINE(  21)							noSides7 = 12;
            						}
            						else {
HXLINE(  21)							if ((result7 > 500)) {
HXLINE(  21)								noSides7 = 500;
            							}
            							else {
HXLINE(  21)								noSides7 = result7;
            							}
            						}
HXDLIN(  21)						int sides7 = (::Math_obj::ceil((( (Float)(noSides7) ) / ( (Float)(4) ))) * 4);
HXDLIN(  21)						Float theta7 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides7) ));
HXDLIN(  21)						Float omega7 = ( (Float)(0) );
HXDLIN(  21)						int quarter7 = ::Std_obj::_hx_int((( (Float)(sides7) ) / ( (Float)(4) )));
HXDLIN(  21)						Float lastX7 = ((Float)0.);
HXDLIN(  21)						Float lastY7 = ((Float)0.);
HXDLIN(  21)						{
HXLINE(  26)							lastX7 = (farX1 + (rightRadius1 * ::Math_obj::cos(((( (Float)(sides7) ) * theta7) + omega7))));
HXLINE(  27)							lastY7 = (lowerY1 + (bottomRadius1 * ::Math_obj::sin(((( (Float)(sides7) ) * theta7) + omega7))));
            						}
HXLINE(  21)						{
HXLINE(  21)							int _g190 = 0;
HXDLIN(  21)							int _g191 = (quarter7 + 1);
HXDLIN(  21)							while((_g190 < _g191)){
HXLINE(  21)								_g190 = (_g190 + 1);
HXDLIN(  21)								int i77 = (_g190 - 1);
HXDLIN(  21)								Float nextX7 = (farX1 + (rightRadius1 * ::Math_obj::cos((((( (Float)(i77) ) * theta7) + ((Float)0.0001)) + omega7))));
HXDLIN(  21)								Float nextY7 = (lowerY1 + (bottomRadius1 * ::Math_obj::sin((((( (Float)(i77) ) * theta7) + ((Float)0.0001)) + omega7))));
HXDLIN(  21)								{
HXLINE(  21)									 ::pi_xy::ImageStruct this359 = this358;
HXDLIN(  21)									bool hasHit7 = false;
HXDLIN(  21)									bool hasUndo7 = false;
HXDLIN(  21)									{
HXLINE(  21)										Float bx7 = lastX7;
HXDLIN(  21)										Float by7 = lastY7;
HXDLIN(  21)										Float cx11 = nextX7;
HXDLIN(  21)										Float cy11 = nextY7;
HXDLIN(  21)										bool adjustWinding7 = (((((farX1 * by7) - (bx7 * lowerY1)) + ((bx7 * cy11) - (cx11 * by7))) + ((cx11 * lowerY1) - (farX1 * cy11))) > 0);
HXDLIN(  21)										if (!(adjustWinding7)) {
HXLINE(  21)											Float bx_7 = bx7;
HXDLIN(  21)											Float by_7 = by7;
HXLINE(  25)											bx7 = cx11;
HXLINE(  26)											by7 = cy11;
HXLINE(  27)											cx11 = bx_7;
HXLINE(  28)											cy11 = by_7;
            										}
HXLINE(  21)										{
HXLINE(  21)											Float s07 = ((lowerY1 * cx11) - (farX1 * cy11));
HXDLIN(  21)											Float sx7 = (cy11 - lowerY1);
HXDLIN(  21)											Float sy7 = (farX1 - cx11);
HXDLIN(  21)											Float t07 = ((farX1 * by7) - (lowerY1 * bx7));
HXDLIN(  21)											Float tx7 = (lowerY1 - by7);
HXDLIN(  21)											Float ty7 = (bx7 - farX1);
HXDLIN(  21)											Float A7 = ((((-(by7) * cx11) + (lowerY1 * (-(bx7) + cx11))) + (farX1 * (by7 - cy11))) + (bx7 * cy11));
HXDLIN(  21)											 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN(  21)											if ((farX1 > bx7)) {
HXLINE(  21)												if ((farX1 > cx11)) {
HXLINE(  21)													int min28;
HXDLIN(  21)													if ((bx7 > cx11)) {
HXLINE(  21)														min28 = ::Math_obj::floor(cx11);
            													}
            													else {
HXLINE(  21)														min28 = ::Math_obj::floor(bx7);
            													}
HXDLIN(  21)													int ii_min72 = min28;
HXDLIN(  21)													int ii_max72 = ::Math_obj::ceil(farX1);
HXDLIN(  21)													xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min72,ii_max72);
            												}
            												else {
HXLINE(  21)													int ii_min73 = ::Math_obj::floor(bx7);
HXDLIN(  21)													int ii_max73 = ::Math_obj::ceil(cx11);
HXDLIN(  21)													xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min73,ii_max73);
            												}
            											}
            											else {
HXLINE(  21)												if ((bx7 > cx11)) {
HXLINE(  21)													int min29;
HXDLIN(  21)													if ((farX1 > cx11)) {
HXLINE(  21)														min29 = ::Math_obj::floor(cx11);
            													}
            													else {
HXLINE(  21)														min29 = ::Math_obj::ceil(farX1);
            													}
HXDLIN(  21)													int ii_min74 = min29;
HXDLIN(  21)													int ii_max74 = ::Math_obj::ceil(bx7);
HXDLIN(  21)													xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min74,ii_max74);
            												}
            												else {
HXLINE(  21)													int ii_min75 = ::Math_obj::floor(farX1);
HXDLIN(  21)													int ii_max75 = ::Math_obj::ceil(cx11);
HXDLIN(  21)													xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min75,ii_max75);
            												}
            											}
HXDLIN(  21)											 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN(  21)											if ((lowerY1 > by7)) {
HXLINE(  21)												if ((lowerY1 > cy11)) {
HXLINE(  21)													int min30;
HXDLIN(  21)													if ((by7 > cy11)) {
HXLINE(  21)														min30 = ::Math_obj::floor(cy11);
            													}
            													else {
HXLINE(  21)														min30 = ::Math_obj::floor(by7);
            													}
HXDLIN(  21)													int ii_min76 = min30;
HXDLIN(  21)													int ii_max76 = ::Math_obj::ceil(lowerY1);
HXDLIN(  21)													yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min76,ii_max76);
            												}
            												else {
HXLINE(  21)													int ii_min77 = ::Math_obj::floor(by7);
HXDLIN(  21)													int ii_max77 = ::Math_obj::ceil(cy11);
HXDLIN(  21)													yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min77,ii_max77);
            												}
            											}
            											else {
HXLINE(  21)												if ((by7 > cy11)) {
HXLINE(  21)													int min31;
HXDLIN(  21)													if ((lowerY1 > cy11)) {
HXLINE(  21)														min31 = ::Math_obj::floor(cy11);
            													}
            													else {
HXLINE(  21)														min31 = ::Math_obj::ceil(lowerY1);
            													}
HXDLIN(  21)													int ii_min78 = min31;
HXDLIN(  21)													int ii_max78 = ::Math_obj::ceil(by7);
HXDLIN(  21)													yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min78,ii_max78);
            												}
            												else {
HXLINE(  21)													int ii_min79 = ::Math_obj::floor(lowerY1);
HXDLIN(  21)													int ii_max79 = ::Math_obj::ceil(cy11);
HXDLIN(  21)													yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min79,ii_max79);
            												}
            											}
HXDLIN(  21)											 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN(  21)											if (hasUndo7) {
HXLINE(  21)												int width9 = ((xIter37->max - xIter37->start) + 1);
HXDLIN(  21)												int height9 = ((yIter37->max - yIter37->start) + 1);
HXDLIN(  21)												 ::Dynamic imageType9 = null();
HXDLIN(  21)												 ::pi_xy::ImageStruct this360 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  21)												if (::hx::IsNull( imageType9 )) {
HXLINE(  54)													imageType9 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE(  21)												::Dynamic undoImage22;
HXDLIN(  21)												switch((int)(( (int)(imageType9) ))){
            													case (int)0: {
HXLINE(  21)														 ::iterMagic::BytesImg byt9 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::BytesImg b62 = byt9;
HXDLIN(  21)														{
HXLINE(  21)															b62->width = width9;
HXDLIN(  21)															b62->height = height9;
HXDLIN(  21)															b62->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  21)															b62->data = ::haxe::io::Bytes_obj::alloc((b62->length * 4));
HXDLIN(  21)															{
HXLINE(  21)																int len18 = b62->length;
HXDLIN(  21)																int w10 = 0;
HXDLIN(  21)																{
HXLINE(  21)																	int _g192 = 0;
HXDLIN(  21)																	int _g193 = b62->height;
HXDLIN(  21)																	while((_g192 < _g193)){
HXLINE(  21)																		_g192 = (_g192 + 1);
HXDLIN(  21)																		int y43 = (_g192 - 1);
HXDLIN(  21)																		{
HXLINE(  21)																			int _g194 = 0;
HXDLIN(  21)																			int _g195 = b62->width;
HXDLIN(  21)																			while((_g194 < _g195)){
HXLINE(  21)																				_g194 = (_g194 + 1);
HXDLIN(  21)																				int x42 = (_g194 - 1);
HXDLIN(  21)																				{
HXLINE(  21)																					w10 = (w10 + 1);
HXDLIN(  21)																					b62->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w10 = (w10 + 1);
HXDLIN(  21)																					b62->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w10 = (w10 + 1);
HXDLIN(  21)																					b62->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w10 = (w10 + 1);
HXDLIN(  21)																					b62->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage22 = b62;
            													}
            													break;
            													case (int)1: {
HXLINE(  21)														 ::iterMagic::ArrIntImg arrI9 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::ArrIntImg a58 = arrI9;
HXDLIN(  21)														{
HXLINE(  21)															a58->width = width9;
HXDLIN(  21)															a58->height = height9;
HXDLIN(  21)															a58->data = ::Array_obj< int >::__new(0);
HXDLIN(  21)															a58->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  21)															{
HXLINE(  21)																int _g196 = 0;
HXDLIN(  21)																int _g197 = a58->length;
HXDLIN(  21)																while((_g196 < _g197)){
HXLINE(  21)																	_g196 = (_g196 + 1);
HXDLIN(  21)																	int i78 = (_g196 - 1);
HXDLIN(  21)																	a58->data[i78] = 0;
            																}
            															}
            														}
HXDLIN(  21)														undoImage22 = a58;
            													}
            													break;
            													case (int)2: {
HXLINE(  21)														 ::iterMagic::U32ArrImg u32a9 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::U32ArrImg b63 = u32a9;
HXDLIN(  21)														{
HXLINE(  21)															b63->width = width9;
HXDLIN(  21)															b63->height = height9;
HXDLIN(  21)															b63->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  21)															int size9 = (b63->length * 4);
HXDLIN(  21)															b63->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size9),0,size9);
HXDLIN(  21)															{
HXLINE(  21)																int _g198 = 0;
HXDLIN(  21)																int _g199 = b63->length;
HXDLIN(  21)																while((_g198 < _g199)){
HXLINE(  21)																	_g198 = (_g198 + 1);
HXDLIN(  21)																	int i79 = (_g198 - 1);
HXDLIN(  21)																	{
HXLINE(  21)																		 ::haxe::io::ArrayBufferViewImpl this361 = b63->data;
HXDLIN(  21)																		bool undoImage23;
HXDLIN(  21)																		if ((i79 >= 0)) {
HXLINE(  21)																			undoImage23 = (i79 < (this361->byteLength >> 2));
            																		}
            																		else {
HXLINE(  21)																			undoImage23 = false;
            																		}
HXDLIN(  21)																		if (undoImage23) {
HXLINE(  21)																			 ::haxe::io::Bytes _this9 = this361->bytes;
HXDLIN(  21)																			int pos9 = ((i79 << 2) + this361->byteOffset);
HXDLIN(  21)																			_this9->b[pos9] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this9->b[(pos9 + 1)] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this9->b[(pos9 + 2)] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this9->b[(pos9 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage22 = b63;
            													}
            													break;
            													case (int)3: {
HXLINE(  21)														 ::iterMagic::VecIntImg vec9 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::VecIntImg v24 = vec9;
HXDLIN(  21)														{
HXLINE(  21)															v24->width = width9;
HXDLIN(  21)															v24->height = height9;
HXDLIN(  21)															v24->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  21)															v24->data = ::Array_obj< int >::__new(v24->length);
HXDLIN(  21)															{
HXLINE(  21)																int _g200 = 0;
HXDLIN(  21)																int _g201 = v24->length;
HXDLIN(  21)																while((_g200 < _g201)){
HXLINE(  21)																	_g200 = (_g200 + 1);
HXDLIN(  21)																	int i80 = (_g200 - 1);
HXDLIN(  21)																	v24->data->__unsafe_set(i80,0);
            																}
            															}
            														}
HXDLIN(  21)														undoImage22 = v24;
            													}
            													break;
            													case (int)4: {
HXLINE(  21)														 ::iterMagic::StackIntImg sInt9 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::StackIntImg b64 = sInt9;
HXDLIN(  21)														{
HXLINE(  21)															b64->width = width9;
HXDLIN(  21)															b64->height = height9;
HXDLIN(  21)															b64->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  21)															b64->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  21)															{
HXLINE(  21)																int len19 = b64->length;
HXDLIN(  21)																 ::haxe::ds::GenericStack_Int d9 = b64->data;
HXDLIN(  21)																if (::hx::IsNull( d9->head )) {
HXLINE(  21)																	int _g202 = 0;
HXDLIN(  21)																	int _g203 = len19;
HXDLIN(  21)																	while((_g202 < _g203)){
HXLINE(  21)																		_g202 = (_g202 + 1);
HXDLIN(  21)																		int i81 = (_g202 - 1);
HXDLIN(  21)																		d9->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d9->head);
            																	}
            																}
            																else {
HXLINE(  21)																	int _g204 = 0;
HXDLIN(  21)																	int _g205 = len19;
HXDLIN(  21)																	while((_g204 < _g205)){
HXLINE(  21)																		_g204 = (_g204 + 1);
HXDLIN(  21)																		int i82 = (_g204 - 1);
HXDLIN(  21)																		{
HXLINE(  21)																			 ::haxe::ds::GenericCell_Int l9 = b64->data->head;
HXDLIN(  21)																			 ::haxe::ds::GenericCell_Int prev9 = null();
HXDLIN(  21)																			{
HXLINE(  21)																				int _g206 = 0;
HXDLIN(  21)																				int _g207 = i82;
HXDLIN(  21)																				while((_g206 < _g207)){
HXLINE(  21)																					_g206 = (_g206 + 1);
HXDLIN(  21)																					int i83 = (_g206 - 1);
HXLINE( 345)																					prev9 = l9;
HXLINE( 346)																					l9 = l9->next;
            																				}
            																			}
HXLINE(  21)																			if (::hx::IsNull( prev9 )) {
HXLINE(  21)																				b64->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN(  21)																				l9 = null();
            																			}
            																			else {
HXLINE(  21)																				prev9->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN(  21)																				l9 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage22 = b64;
            													}
            													break;
            												}
HXDLIN(  21)												this360->image = undoImage22;
HXDLIN(  21)												this360->width = width9;
HXDLIN(  21)												this360->height = height9;
HXDLIN(  21)												this360->imageType = ( (int)(imageType9) );
HXDLIN(  21)												undoImage21 = this360;
HXDLIN(  21)												{
HXLINE(  21)													int rectLeft7 = xIter37->start;
HXDLIN(  21)													int rectTop7 = yIter37->start;
HXDLIN(  21)													int rectRight7 = xIter37->max;
HXDLIN(  21)													bool forceClear8 = false;
HXDLIN(  21)													{
HXLINE(  21)														int _g208 = rectTop7;
HXDLIN(  21)														int _g209 = yIter37->max;
HXDLIN(  21)														while((_g208 < _g209)){
HXLINE(  21)															_g208 = (_g208 + 1);
HXDLIN(  21)															int dy10 = (_g208 - 1);
HXDLIN(  21)															{
HXLINE(  21)																int _g210 = rectLeft7;
HXDLIN(  21)																int _g211 = rectRight7;
HXDLIN(  21)																while((_g210 < _g211)){
HXLINE(  21)																	_g210 = (_g210 + 1);
HXDLIN(  21)																	int dx10 = (_g210 - 1);
HXDLIN(  21)																	::Dynamic this362 = this359->image;
HXDLIN(  21)																	int index47;
HXDLIN(  21)																	if (this359->useVirtualPos) {
HXLINE(  21)																		index47 = ::Std_obj::_hx_int(((((( (Float)(dy10) ) - this359->virtualY) * ( (Float)(this359->width) )) + dx10) - this359->virtualX));
            																	}
            																	else {
HXLINE(  21)																		index47 = ::Std_obj::_hx_int(( (Float)(((dy10 * this359->width) + dx10)) ));
            																	}
HXDLIN(  21)																	int c39 = ::iterMagic::Iimg_obj::get(this362,index47);
HXDLIN(  21)																	int col8;
HXDLIN(  21)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																		col8 = ((((((c39 >> 24) & 255) << 24) | ((c39 & 255) << 16)) | (((c39 >> 8) & 255) << 8)) | ((c39 >> 16) & 255));
            																	}
            																	else {
HXLINE(  21)																		col8 = c39;
            																	}
HXDLIN(  21)																	bool _hx_tmp88;
HXDLIN(  21)																	if (this359->useMask) {
HXLINE(  21)																		_hx_tmp88 = ::hx::IsNotNull( this359->mask );
            																	}
            																	else {
HXLINE(  21)																		_hx_tmp88 = false;
            																	}
HXDLIN(  21)																	if (_hx_tmp88) {
HXLINE(  21)																		 ::pi_xy::ImageStruct this363 = this359->mask;
HXDLIN(  21)																		::Dynamic this364 = this363->image;
HXDLIN(  21)																		int index48;
HXDLIN(  21)																		if (this363->useVirtualPos) {
HXLINE(  21)																			index48 = ::Std_obj::_hx_int(((((( (Float)(dy10) ) - this363->virtualY) * ( (Float)(this363->width) )) + dx10) - this363->virtualX));
            																		}
            																		else {
HXLINE(  21)																			index48 = ::Std_obj::_hx_int(( (Float)(((dy10 * this363->width) + dx10)) ));
            																		}
HXDLIN(  21)																		int c40 = ::iterMagic::Iimg_obj::get(this364,index48);
HXDLIN(  21)																		int v25;
HXDLIN(  21)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																			v25 = ((((((c40 >> 24) & 255) << 24) | ((c40 & 255) << 16)) | (((c40 >> 8) & 255) << 8)) | ((c40 >> 16) & 255));
            																		}
            																		else {
HXLINE(  21)																			v25 = c40;
            																		}
HXDLIN(  21)																		int maskPixel8 = v25;
HXDLIN(  21)																		int this365 = col8;
HXDLIN(  21)																		if ((maskPixel8 == 0)) {
HXLINE(  21)																			col8 = this365;
            																		}
            																		else {
HXLINE(  21)																			Float m08;
HXDLIN(  21)																			int this366 = ((maskPixel8 >> 24) & 255);
HXDLIN(  21)																			if ((this366 == 0)) {
HXLINE(  21)																				m08 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m08 = (( (Float)(this366) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m18;
HXDLIN(  21)																			int this367 = ((maskPixel8 >> 16) & 255);
HXDLIN(  21)																			if ((this367 == 0)) {
HXLINE(  21)																				m18 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m18 = (( (Float)(this367) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m28;
HXDLIN(  21)																			int this368 = ((maskPixel8 >> 8) & 255);
HXDLIN(  21)																			if ((this368 == 0)) {
HXLINE(  21)																				m28 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m28 = (( (Float)(this368) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m38;
HXDLIN(  21)																			int this369 = (maskPixel8 & 255);
HXDLIN(  21)																			if ((this369 == 0)) {
HXLINE(  21)																				m38 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m38 = (( (Float)(this369) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			int ch08 = ::Std_obj::_hx_int(((((Float)1.) - m08) * ( (Float)(((this365 >> 24) & 255)) )));
HXDLIN(  21)																			int ch18 = ::Std_obj::_hx_int(((((Float)1.) - m18) * ( (Float)(((this365 >> 16) & 255)) )));
HXDLIN(  21)																			int ch28 = ::Std_obj::_hx_int(((((Float)1.) - m28) * ( (Float)(((this365 >> 8) & 255)) )));
HXDLIN(  21)																			int ch38 = ::Std_obj::_hx_int(((((Float)1.) - m38) * ( (Float)((this365 & 255)) )));
HXDLIN(  21)																			col8 = ((((::Math_obj::round((( (Float)(ch08) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch18) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch28) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch38) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN(  21)																	if ((col8 != 0)) {
HXLINE(  21)																		int x43 = (dx10 - rectLeft7);
HXDLIN(  21)																		int y44 = (dy10 - rectTop7);
HXDLIN(  21)																		int c41 = col8;
HXDLIN(  21)																		bool _hx_tmp89;
HXDLIN(  21)																		if ((((c41 >> 24) & 255) < 254)) {
HXLINE(  21)																			_hx_tmp89 = undoImage21->transparent;
            																		}
            																		else {
HXLINE(  21)																			_hx_tmp89 = false;
            																		}
HXDLIN(  21)																		if (_hx_tmp89) {
HXLINE(  21)																			int location23;
HXDLIN(  21)																			if (undoImage21->useVirtualPos) {
HXLINE(  21)																				location23 = ::Std_obj::_hx_int(((((( (Float)(y44) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x43) - undoImage21->virtualX));
            																			}
            																			else {
HXLINE(  21)																				location23 = ::Std_obj::_hx_int(( (Float)(((y44 * undoImage21->width) + x43)) ));
            																			}
HXDLIN(  21)																			int this370 = ::iterMagic::Iimg_obj::get(undoImage21->image,location23);
HXDLIN(  21)																			int this371;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				this371 = ((((((this370 >> 24) & 255) << 24) | ((this370 & 255) << 16)) | (((this370 >> 8) & 255) << 8)) | ((this370 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				this371 = this370;
            																			}
HXDLIN(  21)																			Float a126;
HXDLIN(  21)																			int this372 = ((this371 >> 24) & 255);
HXDLIN(  21)																			if ((this372 == 0)) {
HXLINE(  21)																				a126 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a126 = (( (Float)(this372) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r123;
HXDLIN(  21)																			int this373 = ((this371 >> 16) & 255);
HXDLIN(  21)																			if ((this373 == 0)) {
HXLINE(  21)																				r123 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r123 = (( (Float)(this373) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g123;
HXDLIN(  21)																			int this374 = ((this371 >> 8) & 255);
HXDLIN(  21)																			if ((this374 == 0)) {
HXLINE(  21)																				g123 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g123 = (( (Float)(this374) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b127;
HXDLIN(  21)																			int this375 = (this371 & 255);
HXDLIN(  21)																			if ((this375 == 0)) {
HXLINE(  21)																				b127 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b127 = (( (Float)(this375) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a224;
HXDLIN(  21)																			int this376 = ((col8 >> 24) & 255);
HXDLIN(  21)																			if ((this376 == 0)) {
HXLINE(  21)																				a224 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a224 = (( (Float)(this376) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r223;
HXDLIN(  21)																			int this377 = ((col8 >> 16) & 255);
HXDLIN(  21)																			if ((this377 == 0)) {
HXLINE(  21)																				r223 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r223 = (( (Float)(this377) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g223;
HXDLIN(  21)																			int this378 = ((col8 >> 8) & 255);
HXDLIN(  21)																			if ((this378 == 0)) {
HXLINE(  21)																				g223 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g223 = (( (Float)(this378) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b227;
HXDLIN(  21)																			int this379 = (col8 & 255);
HXDLIN(  21)																			if ((this379 == 0)) {
HXLINE(  21)																				b227 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b227 = (( (Float)(this379) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a323 = (a126 * (( (Float)(1) ) - a224));
HXDLIN(  21)																			int r43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r123 * a323) + (r223 * a224))));
HXDLIN(  21)																			int g43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g123 * a323) + (g223 * a224))));
HXDLIN(  21)																			int b65 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b127 * a323) + (b227 * a224))));
HXDLIN(  21)																			int a59 = ::Std_obj::_hx_int((( (Float)(255) ) * (a323 + a224)));
HXDLIN(  21)																			int blended23 = ((((a59 << 24) | (r43 << 16)) | (g43 << 8)) | b65);
HXDLIN(  21)																			{
HXLINE(  21)																				int _hx_tmp90;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					_hx_tmp90 = ((((((blended23 >> 24) & 255) << 24) | ((blended23 & 255) << 16)) | (((blended23 >> 8) & 255) << 8)) | ((blended23 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					_hx_tmp90 = blended23;
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(undoImage21->image,location23,_hx_tmp90);
            																			}
            																		}
            																		else {
HXLINE(  21)																			::Dynamic this380 = undoImage21->image;
HXDLIN(  21)																			int index49;
HXDLIN(  21)																			if (undoImage21->useVirtualPos) {
HXLINE(  21)																				index49 = ::Std_obj::_hx_int(((((( (Float)(y44) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x43) - undoImage21->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index49 = ::Std_obj::_hx_int(( (Float)(((y44 * undoImage21->width) + x43)) ));
            																			}
HXDLIN(  21)																			int _hx_tmp91;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				_hx_tmp91 = ((((((c41 >> 24) & 255) << 24) | ((c41 & 255) << 16)) | (((c41 >> 8) & 255) << 8)) | ((c41 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				_hx_tmp91 = c41;
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this380,index49,_hx_tmp91);
            																		}
            																	}
            																	else {
HXLINE(  21)																		if (forceClear8) {
HXLINE(  21)																			::Dynamic this381 = undoImage21->image;
HXDLIN(  21)																			int x44 = (dx10 - rectLeft7);
HXDLIN(  21)																			int y45 = (dy10 - rectTop7);
HXDLIN(  21)																			int index50;
HXDLIN(  21)																			if (undoImage21->useVirtualPos) {
HXLINE(  21)																				index50 = ::Std_obj::_hx_int(((((( (Float)(y45) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x44) - undoImage21->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index50 = ::Std_obj::_hx_int(( (Float)(((y45 * undoImage21->width) + x44)) ));
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this381,index50,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  21)											bool found7 = false;
HXDLIN(  21)											Float s7 = ((Float)0.);
HXDLIN(  21)											Float t7 = ((Float)0.);
HXDLIN(  21)											Float sxx7 = ((Float)0.);
HXDLIN(  21)											Float txx7 = ((Float)0.);
HXDLIN(  21)											{
HXLINE(  21)												int _g_min14 = xIter37->start;
HXDLIN(  21)												int _g_max14 = xIter37->max;
HXDLIN(  21)												while((_g_min14 < _g_max14)){
HXLINE(  21)													_g_min14 = (_g_min14 + 1);
HXDLIN(  21)													int x45 = (_g_min14 - 1);
HXLINE(  60)													sxx7 = (sx7 * ( (Float)(x45) ));
HXLINE(  61)													txx7 = (tx7 * ( (Float)(x45) ));
HXLINE(  62)													found7 = false;
HXLINE(  21)													{
HXLINE(  21)														int _g_min15 = yIter37->start;
HXDLIN(  21)														int _g_max15 = yIter37->max;
HXDLIN(  21)														while((_g_min15 < _g_max15)){
HXLINE(  21)															_g_min15 = (_g_min15 + 1);
HXDLIN(  21)															int y46 = (_g_min15 - 1);
HXLINE(  64)															s7 = ((s07 + sxx7) + (sy7 * ( (Float)(y46) )));
HXLINE(  65)															t7 = ((t07 + txx7) + (ty7 * ( (Float)(y46) )));
HXLINE(  21)															bool _hx_tmp92;
HXDLIN(  21)															if (!((s7 <= 0))) {
HXLINE(  21)																_hx_tmp92 = (t7 <= 0);
            															}
            															else {
HXLINE(  21)																_hx_tmp92 = true;
            															}
HXDLIN(  21)															if (_hx_tmp92) {
HXLINE(  21)																if (found7) {
HXLINE(  21)																	goto _hx_goto_130;
            																}
            															}
            															else {
HXLINE(  21)																if (((s7 + t7) < A7)) {
HXLINE(  21)																	{
HXLINE(  21)																		int c42 = color3;
HXDLIN(  21)																		bool _hx_tmp93;
HXDLIN(  21)																		if ((((c42 >> 24) & 255) < 254)) {
HXLINE(  21)																			_hx_tmp93 = this359->transparent;
            																		}
            																		else {
HXLINE(  21)																			_hx_tmp93 = false;
            																		}
HXDLIN(  21)																		if (_hx_tmp93) {
HXLINE(  21)																			int location24;
HXDLIN(  21)																			if (this359->useVirtualPos) {
HXLINE(  21)																				location24 = ::Std_obj::_hx_int(((((( (Float)(y46) ) - this359->virtualY) * ( (Float)(this359->width) )) + x45) - this359->virtualX));
            																			}
            																			else {
HXLINE(  21)																				location24 = ::Std_obj::_hx_int(( (Float)(((y46 * this359->width) + x45)) ));
            																			}
HXDLIN(  21)																			int this382 = ::iterMagic::Iimg_obj::get(this359->image,location24);
HXDLIN(  21)																			int this383;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				this383 = ((((((this382 >> 24) & 255) << 24) | ((this382 & 255) << 16)) | (((this382 >> 8) & 255) << 8)) | ((this382 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				this383 = this382;
            																			}
HXDLIN(  21)																			Float a127;
HXDLIN(  21)																			int this384 = ((this383 >> 24) & 255);
HXDLIN(  21)																			if ((this384 == 0)) {
HXLINE(  21)																				a127 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a127 = (( (Float)(this384) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r124;
HXDLIN(  21)																			int this385 = ((this383 >> 16) & 255);
HXDLIN(  21)																			if ((this385 == 0)) {
HXLINE(  21)																				r124 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r124 = (( (Float)(this385) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g124;
HXDLIN(  21)																			int this386 = ((this383 >> 8) & 255);
HXDLIN(  21)																			if ((this386 == 0)) {
HXLINE(  21)																				g124 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g124 = (( (Float)(this386) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b128;
HXDLIN(  21)																			int this387 = (this383 & 255);
HXDLIN(  21)																			if ((this387 == 0)) {
HXLINE(  21)																				b128 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b128 = (( (Float)(this387) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a225;
HXDLIN(  21)																			int this388 = ((color3 >> 24) & 255);
HXDLIN(  21)																			if ((this388 == 0)) {
HXLINE(  21)																				a225 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a225 = (( (Float)(this388) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r224;
HXDLIN(  21)																			int this389 = ((color3 >> 16) & 255);
HXDLIN(  21)																			if ((this389 == 0)) {
HXLINE(  21)																				r224 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r224 = (( (Float)(this389) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g224;
HXDLIN(  21)																			int this390 = ((color3 >> 8) & 255);
HXDLIN(  21)																			if ((this390 == 0)) {
HXLINE(  21)																				g224 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g224 = (( (Float)(this390) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b228;
HXDLIN(  21)																			int this391 = (color3 & 255);
HXDLIN(  21)																			if ((this391 == 0)) {
HXLINE(  21)																				b228 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b228 = (( (Float)(this391) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a324 = (a127 * (( (Float)(1) ) - a225));
HXDLIN(  21)																			int r44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r124 * a324) + (r224 * a225))));
HXDLIN(  21)																			int g44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g124 * a324) + (g224 * a225))));
HXDLIN(  21)																			int b66 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b128 * a324) + (b228 * a225))));
HXDLIN(  21)																			int a60 = ::Std_obj::_hx_int((( (Float)(255) ) * (a324 + a225)));
HXDLIN(  21)																			int blended24 = ((((a60 << 24) | (r44 << 16)) | (g44 << 8)) | b66);
HXDLIN(  21)																			{
HXLINE(  21)																				int _hx_tmp94;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					_hx_tmp94 = ((((((blended24 >> 24) & 255) << 24) | ((blended24 & 255) << 16)) | (((blended24 >> 8) & 255) << 8)) | ((blended24 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					_hx_tmp94 = blended24;
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(this359->image,location24,_hx_tmp94);
            																			}
            																		}
            																		else {
HXLINE(  21)																			::Dynamic this392 = this359->image;
HXDLIN(  21)																			int index51;
HXDLIN(  21)																			if (this359->useVirtualPos) {
HXLINE(  21)																				index51 = ::Std_obj::_hx_int(((((( (Float)(y46) ) - this359->virtualY) * ( (Float)(this359->width) )) + x45) - this359->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index51 = ::Std_obj::_hx_int(( (Float)(((y46 * this359->width) + x45)) ));
            																			}
HXDLIN(  21)																			int _hx_tmp95;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				_hx_tmp95 = ((((((c42 >> 24) & 255) << 24) | ((c42 & 255) << 16)) | (((c42 >> 8) & 255) << 8)) | ((c42 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				_hx_tmp95 = c42;
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this392,index51,_hx_tmp95);
            																		}
            																	}
HXLINE(  73)																	found7 = true;
            																}
            																else {
HXLINE(  21)																	if (found7) {
HXLINE(  21)																		goto _hx_goto_130;
            																	}
            																}
            															}
            														}
            														_hx_goto_130:;
            													}
            												}
            											}
HXDLIN(  21)											if ((hasHit7 == true)) {
HXLINE(  21)												 ::pi_xy::algo::HitTri v26 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX1,lowerY1,bx7,by7,cx11,cy11,true);
HXDLIN(  21)												if (hasUndo7) {
HXLINE(  21)													v26->undoImage = undoImage21;
HXDLIN(  21)													v26->undoX = xIter37->start;
HXDLIN(  21)													v26->undoY = yIter37->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  46)								lastX7 = nextX7;
HXLINE(  47)								lastY7 = nextY7;
            							}
            						}
            					}
            				}
            			}
HXLINE(  22)			{
HXLINE(  22)				int x46 = ::Std_obj::_hx_int((this->left + this->offX));
HXDLIN(  22)				int y47 = ::Std_obj::_hx_int((this->top + this->offY));
HXDLIN(  22)				bool forceClear9 = false;
HXDLIN(  22)				{
HXLINE(  22)					int _g212 = 0;
HXDLIN(  22)					int _g213 = temp1->height;
HXDLIN(  22)					while((_g212 < _g213)){
HXLINE(  22)						_g212 = (_g212 + 1);
HXDLIN(  22)						int dy11 = (_g212 - 1);
HXDLIN(  22)						{
HXLINE(  22)							int _g214 = 0;
HXDLIN(  22)							int _g215 = temp1->width;
HXDLIN(  22)							while((_g214 < _g215)){
HXLINE(  22)								_g214 = (_g214 + 1);
HXDLIN(  22)								int dx11 = (_g214 - 1);
HXDLIN(  22)								::Dynamic this393 = temp1->image;
HXDLIN(  22)								int index52;
HXDLIN(  22)								if (temp1->useVirtualPos) {
HXLINE(  22)									index52 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - temp1->virtualY) * ( (Float)(temp1->width) )) + dx11) - temp1->virtualX));
            								}
            								else {
HXLINE(  22)									index52 = ::Std_obj::_hx_int(( (Float)(((dy11 * temp1->width) + dx11)) ));
            								}
HXDLIN(  22)								int c43 = ::iterMagic::Iimg_obj::get(this393,index52);
HXDLIN(  22)								int col9;
HXDLIN(  22)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)									col9 = ((((((c43 >> 24) & 255) << 24) | ((c43 & 255) << 16)) | (((c43 >> 8) & 255) << 8)) | ((c43 >> 16) & 255));
            								}
            								else {
HXLINE(  22)									col9 = c43;
            								}
HXDLIN(  22)								bool _hx_tmp96;
HXDLIN(  22)								if (temp1->useMask) {
HXLINE(  22)									_hx_tmp96 = ::hx::IsNotNull( temp1->mask );
            								}
            								else {
HXLINE(  22)									_hx_tmp96 = false;
            								}
HXDLIN(  22)								if (_hx_tmp96) {
HXLINE(  22)									 ::pi_xy::ImageStruct this394 = temp1->mask;
HXDLIN(  22)									::Dynamic this395 = this394->image;
HXDLIN(  22)									int index53;
HXDLIN(  22)									if (this394->useVirtualPos) {
HXLINE(  22)										index53 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - this394->virtualY) * ( (Float)(this394->width) )) + dx11) - this394->virtualX));
            									}
            									else {
HXLINE(  22)										index53 = ::Std_obj::_hx_int(( (Float)(((dy11 * this394->width) + dx11)) ));
            									}
HXDLIN(  22)									int c44 = ::iterMagic::Iimg_obj::get(this395,index53);
HXDLIN(  22)									int v27;
HXDLIN(  22)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)										v27 = ((((((c44 >> 24) & 255) << 24) | ((c44 & 255) << 16)) | (((c44 >> 8) & 255) << 8)) | ((c44 >> 16) & 255));
            									}
            									else {
HXLINE(  22)										v27 = c44;
            									}
HXDLIN(  22)									int maskPixel9 = v27;
HXDLIN(  22)									int this396 = col9;
HXDLIN(  22)									if ((maskPixel9 == 0)) {
HXLINE(  22)										col9 = this396;
            									}
            									else {
HXLINE(  22)										Float m09;
HXDLIN(  22)										int this397 = ((maskPixel9 >> 24) & 255);
HXDLIN(  22)										if ((this397 == 0)) {
HXLINE(  22)											m09 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											m09 = (( (Float)(this397) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float m19;
HXDLIN(  22)										int this398 = ((maskPixel9 >> 16) & 255);
HXDLIN(  22)										if ((this398 == 0)) {
HXLINE(  22)											m19 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											m19 = (( (Float)(this398) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float m29;
HXDLIN(  22)										int this399 = ((maskPixel9 >> 8) & 255);
HXDLIN(  22)										if ((this399 == 0)) {
HXLINE(  22)											m29 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											m29 = (( (Float)(this399) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float m39;
HXDLIN(  22)										int this400 = (maskPixel9 & 255);
HXDLIN(  22)										if ((this400 == 0)) {
HXLINE(  22)											m39 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											m39 = (( (Float)(this400) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										int ch09 = ::Std_obj::_hx_int(((((Float)1.) - m09) * ( (Float)(((this396 >> 24) & 255)) )));
HXDLIN(  22)										int ch19 = ::Std_obj::_hx_int(((((Float)1.) - m19) * ( (Float)(((this396 >> 16) & 255)) )));
HXDLIN(  22)										int ch29 = ::Std_obj::_hx_int(((((Float)1.) - m29) * ( (Float)(((this396 >> 8) & 255)) )));
HXDLIN(  22)										int ch39 = ::Std_obj::_hx_int(((((Float)1.) - m39) * ( (Float)((this396 & 255)) )));
HXDLIN(  22)										col9 = ((((::Math_obj::round((( (Float)(ch09) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch19) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch29) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch39) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN(  22)								if ((col9 != 0)) {
HXLINE(  22)									int x47 = (x46 + dx11);
HXDLIN(  22)									int y48 = (y47 + dy11);
HXDLIN(  22)									int c45 = col9;
HXDLIN(  22)									bool _hx_tmp97;
HXDLIN(  22)									if ((((c45 >> 24) & 255) < 254)) {
HXLINE(  22)										_hx_tmp97 = pixelImage->transparent;
            									}
            									else {
HXLINE(  22)										_hx_tmp97 = false;
            									}
HXDLIN(  22)									if (_hx_tmp97) {
HXLINE(  22)										int location25;
HXDLIN(  22)										if (pixelImage->useVirtualPos) {
HXLINE(  22)											location25 = ::Std_obj::_hx_int(((((( (Float)(y48) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x47) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  22)											location25 = ::Std_obj::_hx_int(( (Float)(((y48 * pixelImage->width) + x47)) ));
            										}
HXDLIN(  22)										int this401 = ::iterMagic::Iimg_obj::get(pixelImage->image,location25);
HXDLIN(  22)										int this402;
HXDLIN(  22)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)											this402 = ((((((this401 >> 24) & 255) << 24) | ((this401 & 255) << 16)) | (((this401 >> 8) & 255) << 8)) | ((this401 >> 16) & 255));
            										}
            										else {
HXLINE(  22)											this402 = this401;
            										}
HXDLIN(  22)										Float a128;
HXDLIN(  22)										int this403 = ((this402 >> 24) & 255);
HXDLIN(  22)										if ((this403 == 0)) {
HXLINE(  22)											a128 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											a128 = (( (Float)(this403) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float r125;
HXDLIN(  22)										int this404 = ((this402 >> 16) & 255);
HXDLIN(  22)										if ((this404 == 0)) {
HXLINE(  22)											r125 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											r125 = (( (Float)(this404) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float g125;
HXDLIN(  22)										int this405 = ((this402 >> 8) & 255);
HXDLIN(  22)										if ((this405 == 0)) {
HXLINE(  22)											g125 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											g125 = (( (Float)(this405) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float b129;
HXDLIN(  22)										int this406 = (this402 & 255);
HXDLIN(  22)										if ((this406 == 0)) {
HXLINE(  22)											b129 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											b129 = (( (Float)(this406) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float a226;
HXDLIN(  22)										int this407 = ((col9 >> 24) & 255);
HXDLIN(  22)										if ((this407 == 0)) {
HXLINE(  22)											a226 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											a226 = (( (Float)(this407) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float r225;
HXDLIN(  22)										int this408 = ((col9 >> 16) & 255);
HXDLIN(  22)										if ((this408 == 0)) {
HXLINE(  22)											r225 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											r225 = (( (Float)(this408) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float g225;
HXDLIN(  22)										int this409 = ((col9 >> 8) & 255);
HXDLIN(  22)										if ((this409 == 0)) {
HXLINE(  22)											g225 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											g225 = (( (Float)(this409) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float b229;
HXDLIN(  22)										int this410 = (col9 & 255);
HXDLIN(  22)										if ((this410 == 0)) {
HXLINE(  22)											b229 = ((Float)0.);
            										}
            										else {
HXLINE(  22)											b229 = (( (Float)(this410) ) / ( (Float)(255) ));
            										}
HXDLIN(  22)										Float a325 = (a128 * (( (Float)(1) ) - a226));
HXDLIN(  22)										int r45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r125 * a325) + (r225 * a226))));
HXDLIN(  22)										int g45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g125 * a325) + (g225 * a226))));
HXDLIN(  22)										int b67 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b129 * a325) + (b229 * a226))));
HXDLIN(  22)										int a61 = ::Std_obj::_hx_int((( (Float)(255) ) * (a325 + a226)));
HXDLIN(  22)										int blended25 = ((((a61 << 24) | (r45 << 16)) | (g45 << 8)) | b67);
HXDLIN(  22)										{
HXLINE(  22)											int _hx_tmp98;
HXDLIN(  22)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)												_hx_tmp98 = ((((((blended25 >> 24) & 255) << 24) | ((blended25 & 255) << 16)) | (((blended25 >> 8) & 255) << 8)) | ((blended25 >> 16) & 255));
            											}
            											else {
HXLINE(  22)												_hx_tmp98 = blended25;
            											}
HXDLIN(  22)											::iterMagic::Iimg_obj::set(pixelImage->image,location25,_hx_tmp98);
            										}
            									}
            									else {
HXLINE(  22)										::Dynamic this411 = pixelImage->image;
HXDLIN(  22)										int index54;
HXDLIN(  22)										if (pixelImage->useVirtualPos) {
HXLINE(  22)											index54 = ::Std_obj::_hx_int(((((( (Float)(y48) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x47) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  22)											index54 = ::Std_obj::_hx_int(( (Float)(((y48 * pixelImage->width) + x47)) ));
            										}
HXDLIN(  22)										int _hx_tmp99;
HXDLIN(  22)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  22)											_hx_tmp99 = ((((((c45 >> 24) & 255) << 24) | ((c45 & 255) << 16)) | (((c45 >> 8) & 255) << 8)) | ((c45 >> 16) & 255));
            										}
            										else {
HXLINE(  22)											_hx_tmp99 = c45;
            										}
HXDLIN(  22)										::iterMagic::Iimg_obj::set(this411,index54,_hx_tmp99);
            									}
            								}
            								else {
HXLINE(  22)									if (forceClear9) {
HXLINE(  22)										::Dynamic this412 = pixelImage->image;
HXDLIN(  22)										int x48 = (x46 + dx11);
HXDLIN(  22)										int y49 = (y47 + dy11);
HXDLIN(  22)										int index55;
HXDLIN(  22)										if (pixelImage->useVirtualPos) {
HXLINE(  22)											index55 = ::Std_obj::_hx_int(((((( (Float)(y49) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x48) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  22)											index55 = ::Std_obj::_hx_int(( (Float)(((y49 * pixelImage->width) + x48)) ));
            										}
HXDLIN(  22)										::iterMagic::Iimg_obj::set(this412,index55,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(  23)			temp1 = null();
            		}
HXLINE(  25)		return pixelImage;
            	}



::hx::ObjectPtr< RectangleForm_obj > RectangleForm_obj::__new( ::Dynamic opacity, ::Dynamic visibility, ::Dynamic strokeColor, ::Dynamic strokeWidth,::Array< ::String > strokeDashGapArray, ::Dynamic fill, ::Dynamic left, ::Dynamic top, ::Dynamic width, ::Dynamic height, ::Dynamic rounded) {
	::hx::ObjectPtr< RectangleForm_obj > __this = new RectangleForm_obj();
	__this->__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,fill,left,top,width,height,rounded);
	return __this;
}

::hx::ObjectPtr< RectangleForm_obj > RectangleForm_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic opacity, ::Dynamic visibility, ::Dynamic strokeColor, ::Dynamic strokeWidth,::Array< ::String > strokeDashGapArray, ::Dynamic fill, ::Dynamic left, ::Dynamic top, ::Dynamic width, ::Dynamic height, ::Dynamic rounded) {
	RectangleForm_obj *__this = (RectangleForm_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(RectangleForm_obj), true, "pi_xy.triangleGML.RectangleForm"));
	*(void **)__this = RectangleForm_obj::_hx_vtable;
	__this->__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,fill,left,top,width,height,rounded);
	return __this;
}

RectangleForm_obj::RectangleForm_obj()
{
}

::hx::Val RectangleForm_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *RectangleForm_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *RectangleForm_obj_sStaticStorageInfo = 0;
#endif

static ::String RectangleForm_obj_sMemberFields[] = {
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class RectangleForm_obj::__mClass;

void RectangleForm_obj::__register()
{
	RectangleForm_obj _hx_dummy;
	RectangleForm_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.triangleGML.RectangleForm",bc,e3,90,b6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(RectangleForm_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< RectangleForm_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RectangleForm_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RectangleForm_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace triangleGML
