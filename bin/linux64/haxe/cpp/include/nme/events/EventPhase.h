// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_events_EventPhase
#define INCLUDED_nme_events_EventPhase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nme,events,EventPhase)

namespace nme{
namespace events{


class HXCPP_CLASS_ATTRIBUTES EventPhase_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef EventPhase_obj OBJ_;
		EventPhase_obj();

	public:
		enum { _hx_ClassId = 0x3da2cf80 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nme.events.EventPhase")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"nme.events.EventPhase"); }

		inline static ::hx::ObjectPtr< EventPhase_obj > __new() {
			::hx::ObjectPtr< EventPhase_obj > __this = new EventPhase_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< EventPhase_obj > __alloc(::hx::Ctx *_hx_ctx) {
			EventPhase_obj *__this = (EventPhase_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EventPhase_obj), false, "nme.events.EventPhase"));
			*(void **)__this = EventPhase_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~EventPhase_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("EventPhase",e1,35,f5,34); }

		static void __boot();
		static int CAPTURING_PHASE;
		static int AT_TARGET;
		static int BUBBLING_PHASE;
};

} // end namespace nme
} // end namespace events

#endif /* INCLUDED_nme_events_EventPhase */ 
