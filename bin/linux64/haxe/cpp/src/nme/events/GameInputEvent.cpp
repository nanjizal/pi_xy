// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_GameInputEvent
#include <nme/events/GameInputEvent.h>
#endif
#ifndef INCLUDED_nme_ui_GameInputDevice
#include <nme/ui/GameInputDevice.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c34aa570d3eaf14_17_new,"nme.events.GameInputEvent","new",0xbcf72561,"nme.events.GameInputEvent.new","nme/events/GameInputEvent.hx",17,0x5c8d8b0f)
HX_LOCAL_STACK_FRAME(_hx_pos_7c34aa570d3eaf14_23_clone,"nme.events.GameInputEvent","clone",0xf4466a9e,"nme.events.GameInputEvent.clone","nme/events/GameInputEvent.hx",23,0x5c8d8b0f)
HX_LOCAL_STACK_FRAME(_hx_pos_7c34aa570d3eaf14_9_boot,"nme.events.GameInputEvent","boot",0x93629011,"nme.events.GameInputEvent.boot","nme/events/GameInputEvent.hx",9,0x5c8d8b0f)
HX_LOCAL_STACK_FRAME(_hx_pos_7c34aa570d3eaf14_10_boot,"nme.events.GameInputEvent","boot",0x93629011,"nme.events.GameInputEvent.boot","nme/events/GameInputEvent.hx",10,0x5c8d8b0f)
HX_LOCAL_STACK_FRAME(_hx_pos_7c34aa570d3eaf14_11_boot,"nme.events.GameInputEvent","boot",0x93629011,"nme.events.GameInputEvent.boot","nme/events/GameInputEvent.hx",11,0x5c8d8b0f)
namespace nme{
namespace events{

void GameInputEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable, ::nme::ui::GameInputDevice inDevice){
            		bool bubbles = __o_bubbles.Default(true);
            		bool cancelable = __o_cancelable.Default(false);
            	HX_STACKFRAME(&_hx_pos_7c34aa570d3eaf14_17_new)
HXLINE(  18)		super::__construct(type,bubbles,cancelable);
HXLINE(  19)		this->device = inDevice;
            	}

Dynamic GameInputEvent_obj::__CreateEmpty() { return new GameInputEvent_obj; }

void *GameInputEvent_obj::_hx_vtable = 0;

Dynamic GameInputEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GameInputEvent_obj > _hx_result = new GameInputEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool GameInputEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x113d0d1f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x113d0d1f;
	} else {
		return inClassId==(int)0x6b989381;
	}
}

 ::nme::events::Event GameInputEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_7c34aa570d3eaf14_23_clone)
HXLINE(  24)		::String event = this->get_type();
HXDLIN(  24)		bool event1 = this->get_bubbles();
HXDLIN(  24)		bool event2 = this->get_cancelable();
HXDLIN(  24)		 ::nme::events::GameInputEvent event3 =  ::nme::events::GameInputEvent_obj::__alloc( HX_CTX ,event,event1,event2,this->device);
HXLINE(  25)		event3->set_target(this->get_target());
HXLINE(  26)		event3->set_currentTarget(this->get_currentTarget());
HXLINE(  27)		return event3;
            	}


::String GameInputEvent_obj::DEVICE_ADDED;

::String GameInputEvent_obj::DEVICE_REMOVED;

::String GameInputEvent_obj::DEVICE_UNUSABLE;


::hx::ObjectPtr< GameInputEvent_obj > GameInputEvent_obj::__new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable, ::nme::ui::GameInputDevice inDevice) {
	::hx::ObjectPtr< GameInputEvent_obj > __this = new GameInputEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable,inDevice);
	return __this;
}

::hx::ObjectPtr< GameInputEvent_obj > GameInputEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable, ::nme::ui::GameInputDevice inDevice) {
	GameInputEvent_obj *__this = (GameInputEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GameInputEvent_obj), true, "nme.events.GameInputEvent"));
	*(void **)__this = GameInputEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable,inDevice);
	return __this;
}

GameInputEvent_obj::GameInputEvent_obj()
{
}

void GameInputEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameInputEvent);
	HX_MARK_MEMBER_NAME(device,"device");
	 ::nme::events::Event_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GameInputEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(device,"device");
	 ::nme::events::Event_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GameInputEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"device") ) { return ::hx::Val( device ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GameInputEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"device") ) { device=inValue.Cast<  ::nme::ui::GameInputDevice >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GameInputEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("device",96,dc,77,71));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GameInputEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::nme::ui::GameInputDevice */ ,(int)offsetof(GameInputEvent_obj,device),HX_("device",96,dc,77,71)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo GameInputEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &GameInputEvent_obj::DEVICE_ADDED,HX_("DEVICE_ADDED",f7,70,3d,b6)},
	{::hx::fsString,(void *) &GameInputEvent_obj::DEVICE_REMOVED,HX_("DEVICE_REMOVED",97,5b,c2,33)},
	{::hx::fsString,(void *) &GameInputEvent_obj::DEVICE_UNUSABLE,HX_("DEVICE_UNUSABLE",1a,c6,b7,aa)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String GameInputEvent_obj_sMemberFields[] = {
	HX_("device",96,dc,77,71),
	HX_("clone",5d,13,63,48),
	::String(null()) };

static void GameInputEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GameInputEvent_obj::DEVICE_ADDED,"DEVICE_ADDED");
	HX_MARK_MEMBER_NAME(GameInputEvent_obj::DEVICE_REMOVED,"DEVICE_REMOVED");
	HX_MARK_MEMBER_NAME(GameInputEvent_obj::DEVICE_UNUSABLE,"DEVICE_UNUSABLE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GameInputEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GameInputEvent_obj::DEVICE_ADDED,"DEVICE_ADDED");
	HX_VISIT_MEMBER_NAME(GameInputEvent_obj::DEVICE_REMOVED,"DEVICE_REMOVED");
	HX_VISIT_MEMBER_NAME(GameInputEvent_obj::DEVICE_UNUSABLE,"DEVICE_UNUSABLE");
};

#endif

::hx::Class GameInputEvent_obj::__mClass;

static ::String GameInputEvent_obj_sStaticFields[] = {
	HX_("DEVICE_ADDED",f7,70,3d,b6),
	HX_("DEVICE_REMOVED",97,5b,c2,33),
	HX_("DEVICE_UNUSABLE",1a,c6,b7,aa),
	::String(null())
};

void GameInputEvent_obj::__register()
{
	GameInputEvent_obj _hx_dummy;
	GameInputEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.GameInputEvent",ef,e0,86,84);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GameInputEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(GameInputEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GameInputEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GameInputEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GameInputEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameInputEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameInputEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GameInputEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7c34aa570d3eaf14_9_boot)
HXDLIN(   9)		DEVICE_ADDED = HX_("deviceAdded",4a,08,84,0b);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c34aa570d3eaf14_10_boot)
HXDLIN(  10)		DEVICE_REMOVED = HX_("deviceRemoved",aa,c9,5b,59);
            	}
{
            	HX_STACKFRAME(&_hx_pos_7c34aa570d3eaf14_11_boot)
HXDLIN(  11)		DEVICE_UNUSABLE = HX_("deviceUnusable",c7,a8,5e,6b);
            	}
}

} // end namespace nme
} // end namespace events
