// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_algo_BarycentricCoordinates
#include <pi_xy/algo/BarycentricCoordinates.h>
#endif
#ifndef INCLUDED_pi_xy_algo__Barycentric_BaryCoordinates_Impl_
#include <pi_xy/algo/_Barycentric/BaryCoordinates_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7d597f90e6763d76_22__new,"pi_xy.algo._Barycentric.BaryCoordinates_Impl_","_new",0xe2de4b95,"pi_xy.algo._Barycentric.BaryCoordinates_Impl_._new","pi_xy/algo/Barycentric.hx",22,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_7d597f90e6763d76_28_inTriangle,"pi_xy.algo._Barycentric.BaryCoordinates_Impl_","inTriangle",0x60259901,"pi_xy.algo._Barycentric.BaryCoordinates_Impl_.inTriangle","pi_xy/algo/Barycentric.hx",28,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_7d597f90e6763d76_32_get_min,"pi_xy.algo._Barycentric.BaryCoordinates_Impl_","get_min",0xf84d7c75,"pi_xy.algo._Barycentric.BaryCoordinates_Impl_.get_min","pi_xy/algo/Barycentric.hx",32,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_7d597f90e6763d76_38_get_max,"pi_xy.algo._Barycentric.BaryCoordinates_Impl_","get_max",0xf84d7587,"pi_xy.algo._Barycentric.BaryCoordinates_Impl_.get_max","pi_xy/algo/Barycentric.hx",38,0xa63b7d34)
HX_LOCAL_STACK_FRAME(_hx_pos_7d597f90e6763d76_43_isSoft,"pi_xy.algo._Barycentric.BaryCoordinates_Impl_","isSoft",0xe45f0d28,"pi_xy.algo._Barycentric.BaryCoordinates_Impl_.isSoft","pi_xy/algo/Barycentric.hx",43,0xa63b7d34)
namespace pi_xy{
namespace algo{
namespace _Barycentric{

void BaryCoordinates_Impl__obj::__construct() { }

Dynamic BaryCoordinates_Impl__obj::__CreateEmpty() { return new BaryCoordinates_Impl__obj; }

void *BaryCoordinates_Impl__obj::_hx_vtable = 0;

Dynamic BaryCoordinates_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BaryCoordinates_Impl__obj > _hx_result = new BaryCoordinates_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BaryCoordinates_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x67c1dae4;
}

 ::pi_xy::algo::BarycentricCoordinates BaryCoordinates_Impl__obj::_new( ::pi_xy::algo::BarycentricCoordinates bary){
            	HX_STACKFRAME(&_hx_pos_7d597f90e6763d76_22__new)
HXDLIN(  22)		return bary;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BaryCoordinates_Impl__obj,_new,return )

bool BaryCoordinates_Impl__obj::inTriangle( ::pi_xy::algo::BarycentricCoordinates this1){
            	HX_STACKFRAME(&_hx_pos_7d597f90e6763d76_28_inTriangle)
HXDLIN(  28)		bool _hx_tmp;
HXDLIN(  28)		if ((this1->ratioA >= 0)) {
HXDLIN(  28)			_hx_tmp = (this1->ratioB >= 0);
            		}
            		else {
HXDLIN(  28)			_hx_tmp = false;
            		}
HXDLIN(  28)		if (_hx_tmp) {
HXDLIN(  28)			return (this1->ratioC >= 0);
            		}
            		else {
HXDLIN(  28)			return false;
            		}
HXDLIN(  28)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BaryCoordinates_Impl__obj,inTriangle,return )

Float BaryCoordinates_Impl__obj::get_min( ::pi_xy::algo::BarycentricCoordinates this1){
            	HX_STACKFRAME(&_hx_pos_7d597f90e6763d76_32_get_min)
HXLINE(  33)		Float v;
HXDLIN(  33)		if ((this1->ratioA < this1->ratioB)) {
HXLINE(  33)			v = this1->ratioA;
            		}
            		else {
HXLINE(  33)			v = this1->ratioB;
            		}
HXLINE(  34)		if ((v < this1->ratioC)) {
HXLINE(  34)			return v;
            		}
            		else {
HXLINE(  34)			return this1->ratioC;
            		}
HXDLIN(  34)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BaryCoordinates_Impl__obj,get_min,return )

Float BaryCoordinates_Impl__obj::get_max( ::pi_xy::algo::BarycentricCoordinates this1){
            	HX_STACKFRAME(&_hx_pos_7d597f90e6763d76_38_get_max)
HXLINE(  39)		Float v;
HXDLIN(  39)		if ((this1->ratioA > this1->ratioB)) {
HXLINE(  39)			v = this1->ratioA;
            		}
            		else {
HXLINE(  39)			v = this1->ratioB;
            		}
HXLINE(  40)		if ((v > this1->ratioC)) {
HXLINE(  40)			return v;
            		}
            		else {
HXLINE(  40)			return this1->ratioC;
            		}
HXDLIN(  40)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BaryCoordinates_Impl__obj,get_max,return )

bool BaryCoordinates_Impl__obj::isSoft( ::pi_xy::algo::BarycentricCoordinates this1,bool softAB,bool softBC,bool softCA){
            	HX_STACKFRAME(&_hx_pos_7d597f90e6763d76_43_isSoft)
HXLINE(  44)		Float v;
HXDLIN(  44)		if ((this1->ratioA < this1->ratioB)) {
HXLINE(  44)			v = this1->ratioA;
            		}
            		else {
HXLINE(  44)			v = this1->ratioB;
            		}
HXDLIN(  44)		Float min_;
HXDLIN(  44)		if ((v < this1->ratioC)) {
HXLINE(  44)			min_ = v;
            		}
            		else {
HXLINE(  44)			min_ = this1->ratioC;
            		}
HXLINE(  45)		if (softAB) {
HXLINE(  45)			if (softBC) {
HXLINE(  45)				if (softCA) {
HXLINE(  61)					return true;
            				}
            				else {
HXLINE(  59)					if ((min_ != this1->ratioB)) {
HXLINE(  59)						Float v1;
HXDLIN(  59)						if ((this1->ratioA < this1->ratioB)) {
HXLINE(  59)							v1 = this1->ratioA;
            						}
            						else {
HXLINE(  59)							v1 = this1->ratioB;
            						}
HXDLIN(  59)						Float _hx_tmp;
HXDLIN(  59)						if ((v1 < this1->ratioC)) {
HXLINE(  59)							_hx_tmp = v1;
            						}
            						else {
HXLINE(  59)							_hx_tmp = this1->ratioC;
            						}
HXDLIN(  59)						return (_hx_tmp == this1->ratioC);
            					}
            					else {
HXLINE(  59)						return true;
            					}
            				}
            			}
            			else {
HXLINE(  45)				if (softCA) {
HXLINE(  57)					if ((min_ != this1->ratioA)) {
HXLINE(  57)						Float v2;
HXDLIN(  57)						if ((this1->ratioA < this1->ratioB)) {
HXLINE(  57)							v2 = this1->ratioA;
            						}
            						else {
HXLINE(  57)							v2 = this1->ratioB;
            						}
HXDLIN(  57)						Float _hx_tmp1;
HXDLIN(  57)						if ((v2 < this1->ratioC)) {
HXLINE(  57)							_hx_tmp1 = v2;
            						}
            						else {
HXLINE(  57)							_hx_tmp1 = this1->ratioC;
            						}
HXDLIN(  57)						return (_hx_tmp1 == this1->ratioC);
            					}
            					else {
HXLINE(  57)						return true;
            					}
            				}
            				else {
HXLINE(  55)					return (min_ == this1->ratioC);
            				}
            			}
            		}
            		else {
HXLINE(  45)			if (softBC) {
HXLINE(  45)				if (softCA) {
HXLINE(  53)					if ((min_ != this1->ratioA)) {
HXLINE(  53)						Float v3;
HXDLIN(  53)						if ((this1->ratioA < this1->ratioB)) {
HXLINE(  53)							v3 = this1->ratioA;
            						}
            						else {
HXLINE(  53)							v3 = this1->ratioB;
            						}
HXDLIN(  53)						Float _hx_tmp2;
HXDLIN(  53)						if ((v3 < this1->ratioC)) {
HXLINE(  53)							_hx_tmp2 = v3;
            						}
            						else {
HXLINE(  53)							_hx_tmp2 = this1->ratioC;
            						}
HXDLIN(  53)						return (_hx_tmp2 == this1->ratioB);
            					}
            					else {
HXLINE(  53)						return true;
            					}
            				}
            				else {
HXLINE(  51)					return (min_ == this1->ratioB);
            				}
            			}
            			else {
HXLINE(  45)				if (softCA) {
HXLINE(  49)					return (min_ == this1->ratioA);
            				}
            				else {
HXLINE(  47)					return false;
            				}
            			}
            		}
HXLINE(  45)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(BaryCoordinates_Impl__obj,isSoft,return )


BaryCoordinates_Impl__obj::BaryCoordinates_Impl__obj()
{
}

bool BaryCoordinates_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isSoft") ) { outValue = isSoft_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_min") ) { outValue = get_min_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_max") ) { outValue = get_max_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"inTriangle") ) { outValue = inTriangle_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BaryCoordinates_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *BaryCoordinates_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class BaryCoordinates_Impl__obj::__mClass;

static ::String BaryCoordinates_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("inTriangle",cd,c3,bd,e9),
	HX_("get_min",29,da,c7,26),
	HX_("get_max",3b,d3,c7,26),
	HX_("isSoft",f4,e1,be,69),
	::String(null())
};

void BaryCoordinates_Impl__obj::__register()
{
	BaryCoordinates_Impl__obj _hx_dummy;
	BaryCoordinates_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo._Barycentric.BaryCoordinates_Impl_",ba,d6,48,f1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BaryCoordinates_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BaryCoordinates_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< BaryCoordinates_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BaryCoordinates_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BaryCoordinates_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
} // end namespace _Barycentric
