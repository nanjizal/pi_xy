// Generated by Haxe 4.3.3
#ifndef INCLUDED_haxe_TimerPollClient
#define INCLUDED_haxe_TimerPollClient

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_app_IPollClient
#include <nme/app/IPollClient.h>
#endif
HX_DECLARE_CLASS1(haxe,TimerPollClient)
HX_DECLARE_CLASS2(nme,app,IPollClient)

namespace haxe{


class HXCPP_CLASS_ATTRIBUTES TimerPollClient_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TimerPollClient_obj OBJ_;
		TimerPollClient_obj();

	public:
		enum { _hx_ClassId = 0x26138589 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxe.TimerPollClient")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"haxe.TimerPollClient"); }
		static ::hx::ObjectPtr< TimerPollClient_obj > __new();
		static ::hx::ObjectPtr< TimerPollClient_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TimerPollClient_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("TimerPollClient",ef,89,5b,3b); }

		void onPoll(Float timestamp);
		::Dynamic onPoll_dyn();

		Float getNextWake(Float defaultWake,Float timestamp);
		::Dynamic getNextWake_dyn();

};

} // end namespace haxe

#endif /* INCLUDED_haxe_TimerPollClient */ 
