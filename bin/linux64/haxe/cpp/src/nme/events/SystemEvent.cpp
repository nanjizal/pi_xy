// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nme_events_ErrorEvent
#include <nme/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_SystemEvent
#include <nme/events/SystemEvent.h>
#endif
#ifndef INCLUDED_nme_events_TextEvent
#include <nme/events/TextEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a2aeeea378b46dd7_12_new,"nme.events.SystemEvent","new",0xf6aa91d0,"nme.events.SystemEvent.new","nme/events/SystemEvent.hx",12,0x7d6881c0)
HX_LOCAL_STACK_FRAME(_hx_pos_a2aeeea378b46dd7_19_clone,"nme.events.SystemEvent","clone",0x930110cd,"nme.events.SystemEvent.clone","nme/events/SystemEvent.hx",19,0x7d6881c0)
HX_LOCAL_STACK_FRAME(_hx_pos_a2aeeea378b46dd7_24_toString,"nme.events.SystemEvent","toString",0x32f4d93c,"nme.events.SystemEvent.toString","nme/events/SystemEvent.hx",24,0x7d6881c0)
HX_LOCAL_STACK_FRAME(_hx_pos_a2aeeea378b46dd7_7_boot,"nme.events.SystemEvent","boot",0xd6ae04c2,"nme.events.SystemEvent.boot","nme/events/SystemEvent.hx",7,0x7d6881c0)
namespace nme{
namespace events{

void SystemEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_data){
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            		int data = __o_data.Default(0);
            	HX_STACKFRAME(&_hx_pos_a2aeeea378b46dd7_12_new)
HXLINE(  13)		super::__construct(type,bubbles,cancelable);
HXLINE(  14)		this->data = data;
            	}

Dynamic SystemEvent_obj::__CreateEmpty() { return new SystemEvent_obj; }

void *SystemEvent_obj::_hx_vtable = 0;

Dynamic SystemEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SystemEvent_obj > _hx_result = new SystemEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SystemEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x113d0d1f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x113d0d1f;
	} else {
		return inClassId==(int)0x18a07570;
	}
}

 ::nme::events::Event SystemEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_a2aeeea378b46dd7_19_clone)
HXDLIN(  19)		::String _hx_tmp = this->get_type();
HXDLIN(  19)		bool _hx_tmp1 = this->get_bubbles();
HXDLIN(  19)		bool _hx_tmp2 = this->get_cancelable();
HXDLIN(  19)		return  ::nme::events::ErrorEvent_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,null(),this->data);
            	}


::String SystemEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_a2aeeea378b46dd7_24_toString)
HXDLIN(  24)		::String _hx_tmp = ((HX_("[SystemEvent type=",33,96,7e,b4) + this->get_type()) + HX_(" bubbles=",16,5f,ba,28));
HXDLIN(  24)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->get_bubbles())) + HX_(" cancelable=",89,25,e0,5d));
HXDLIN(  24)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->get_cancelable())) + HX_(" data=",b3,9a,f3,9f));
HXDLIN(  24)		return ((_hx_tmp2 + this->data) + HX_("]",5d,00,00,00));
            	}


::String SystemEvent_obj::SYSTEM;


::hx::ObjectPtr< SystemEvent_obj > SystemEvent_obj::__new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_data) {
	::hx::ObjectPtr< SystemEvent_obj > __this = new SystemEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_data);
	return __this;
}

::hx::ObjectPtr< SystemEvent_obj > SystemEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_data) {
	SystemEvent_obj *__this = (SystemEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SystemEvent_obj), true, "nme.events.SystemEvent"));
	*(void **)__this = SystemEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_data);
	return __this;
}

SystemEvent_obj::SystemEvent_obj()
{
}

::hx::Val SystemEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SystemEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SystemEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SystemEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(SystemEvent_obj,data),HX_("data",2a,56,63,42)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo SystemEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &SystemEvent_obj::SYSTEM,HX_("SYSTEM",ef,42,65,a5)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String SystemEvent_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("clone",5d,13,63,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void SystemEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SystemEvent_obj::SYSTEM,"SYSTEM");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SystemEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SystemEvent_obj::SYSTEM,"SYSTEM");
};

#endif

::hx::Class SystemEvent_obj::__mClass;

static ::String SystemEvent_obj_sStaticFields[] = {
	HX_("SYSTEM",ef,42,65,a5),
	::String(null())
};

void SystemEvent_obj::__register()
{
	SystemEvent_obj _hx_dummy;
	SystemEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.SystemEvent",de,a9,71,c0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SystemEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SystemEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SystemEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SystemEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SystemEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SystemEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SystemEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SystemEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_a2aeeea378b46dd7_7_boot)
HXDLIN(   7)		SYSTEM = HX_("system",ef,96,e2,f2);
            	}
}

} // end namespace nme
} // end namespace events
