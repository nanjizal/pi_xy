// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_utils_Float32Buffer
#define INCLUDED_nme_utils_Float32Buffer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(nme,utils,ByteArray)
HX_DECLARE_CLASS2(nme,utils,Float32Buffer)
HX_DECLARE_CLASS2(nme,utils,IDataInput)
HX_DECLARE_CLASS2(nme,utils,IDataOutput)
HX_DECLARE_CLASS2(nme,utils,IMemoryRange)

namespace nme{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES Float32Buffer_obj : public  ::nme::utils::ByteArray_obj
{
	public:
		typedef  ::nme::utils::ByteArray_obj super;
		typedef Float32Buffer_obj OBJ_;
		Float32Buffer_obj();

	public:
		enum { _hx_ClassId = 0x4c5abe70 };

		void __construct(::hx::Null< int >  __o_inCount,::hx::Null< bool >  __o_inWriteOnly);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.utils.Float32Buffer")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.utils.Float32Buffer"); }
		static ::hx::ObjectPtr< Float32Buffer_obj > __new(::hx::Null< int >  __o_inCount,::hx::Null< bool >  __o_inWriteOnly);
		static ::hx::ObjectPtr< Float32Buffer_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< int >  __o_inCount,::hx::Null< bool >  __o_inWriteOnly);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Float32Buffer_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Float32Buffer",7b,30,d7,aa); }

		typedef Float __array_access;
		int count;
		void resize(int inSize);
		::Dynamic resize_dyn();

		void setF32(int index,Float val);
		::Dynamic setF32_dyn();

		Float getF32(int index);
		::Dynamic getF32_dyn();

		void setF32q(int index,Float val);
		::Dynamic setF32q_dyn();

};

} // end namespace nme
} // end namespace utils

#endif /* INCLUDED_nme_utils_Float32Buffer */ 
