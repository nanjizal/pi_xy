// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_imageAbstracts_NineColorBorder
#include <pi_xy/imageAbstracts/NineColorBorder.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d933c239539f471_27_new,"pi_xy.imageAbstracts.NineColorBorder","new",0x6bf3b73e,"pi_xy.imageAbstracts.NineColorBorder.new","pi_xy/imageAbstracts/RectanglePad.hx",27,0x5b33fd69)
namespace pi_xy{
namespace imageAbstracts{

void NineColorBorder_obj::__construct(::hx::Null< int >  __o_left,::hx::Null< int >  __o_right,::hx::Null< int >  __o_top,::hx::Null< int >  __o_bottom,::hx::Null< int >  __o_leftTop,::hx::Null< int >  __o_rightTop,::hx::Null< int >  __o_leftBottom,::hx::Null< int >  __o_rightBottom,::hx::Null< int >  __o_middle){
            		int left = __o_left.Default(-8344080);
            		int right = __o_right.Default(-1015680);
            		int top = __o_top.Default(-396929);
            		int bottom = __o_bottom.Default(-7017750);
            		int leftTop = __o_leftTop.Default(-2059008);
            		int rightTop = __o_rightTop.Default(-6294369);
            		int leftBottom = __o_leftBottom.Default(-1007376);
            		int rightBottom = __o_rightBottom.Default(-5141526);
            		int middle = __o_middle.Default(-1007456);
            	HX_STACKFRAME(&_hx_pos_9d933c239539f471_27_new)
HXLINE(  28)		this->left = left;
HXLINE(  29)		this->right = right;
HXLINE(  30)		this->top = top;
HXLINE(  31)		this->bottom = bottom;
HXLINE(  32)		this->leftTop = leftTop;
HXLINE(  33)		this->rightTop = rightTop;
HXLINE(  34)		this->leftBottom = leftBottom;
HXLINE(  35)		this->rightBottom = rightBottom;
HXLINE(  36)		this->middle = middle;
            	}

Dynamic NineColorBorder_obj::__CreateEmpty() { return new NineColorBorder_obj; }

void *NineColorBorder_obj::_hx_vtable = 0;

Dynamic NineColorBorder_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NineColorBorder_obj > _hx_result = new NineColorBorder_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool NineColorBorder_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7084fbe0;
}


NineColorBorder_obj::NineColorBorder_obj()
{
}

::hx::Val NineColorBorder_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { return ::hx::Val( top ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { return ::hx::Val( bottom ); }
		if (HX_FIELD_EQ(inName,"middle") ) { return ::hx::Val( middle ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"leftTop") ) { return ::hx::Val( leftTop ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rightTop") ) { return ::hx::Val( rightTop ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"leftBottom") ) { return ::hx::Val( leftBottom ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"rightBottom") ) { return ::hx::Val( rightBottom ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val NineColorBorder_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { top=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { right=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { bottom=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"middle") ) { middle=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"leftTop") ) { leftTop=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rightTop") ) { rightTop=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"leftBottom") ) { leftBottom=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"rightBottom") ) { rightBottom=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NineColorBorder_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("bottom",eb,e6,78,65));
	outFields->push(HX_("leftTop",ce,94,e5,f4));
	outFields->push(HX_("rightTop",19,e4,1f,e4));
	outFields->push(HX_("leftBottom",52,a2,89,94));
	outFields->push(HX_("rightBottom",e7,b3,fd,ce));
	outFields->push(HX_("middle",55,d3,5e,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NineColorBorder_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(NineColorBorder_obj,left),HX_("left",07,08,b0,47)},
	{::hx::fsInt,(int)offsetof(NineColorBorder_obj,right),HX_("right",dc,0b,64,e9)},
	{::hx::fsInt,(int)offsetof(NineColorBorder_obj,top),HX_("top",95,66,58,00)},
	{::hx::fsInt,(int)offsetof(NineColorBorder_obj,bottom),HX_("bottom",eb,e6,78,65)},
	{::hx::fsInt,(int)offsetof(NineColorBorder_obj,leftTop),HX_("leftTop",ce,94,e5,f4)},
	{::hx::fsInt,(int)offsetof(NineColorBorder_obj,rightTop),HX_("rightTop",19,e4,1f,e4)},
	{::hx::fsInt,(int)offsetof(NineColorBorder_obj,leftBottom),HX_("leftBottom",52,a2,89,94)},
	{::hx::fsInt,(int)offsetof(NineColorBorder_obj,rightBottom),HX_("rightBottom",e7,b3,fd,ce)},
	{::hx::fsInt,(int)offsetof(NineColorBorder_obj,middle),HX_("middle",55,d3,5e,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *NineColorBorder_obj_sStaticStorageInfo = 0;
#endif

static ::String NineColorBorder_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("top",95,66,58,00),
	HX_("bottom",eb,e6,78,65),
	HX_("leftTop",ce,94,e5,f4),
	HX_("rightTop",19,e4,1f,e4),
	HX_("leftBottom",52,a2,89,94),
	HX_("rightBottom",e7,b3,fd,ce),
	HX_("middle",55,d3,5e,4c),
	::String(null()) };

::hx::Class NineColorBorder_obj::__mClass;

void NineColorBorder_obj::__register()
{
	NineColorBorder_obj _hx_dummy;
	NineColorBorder_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.imageAbstracts.NineColorBorder",4c,00,c4,d8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NineColorBorder_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NineColorBorder_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NineColorBorder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NineColorBorder_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace imageAbstracts
