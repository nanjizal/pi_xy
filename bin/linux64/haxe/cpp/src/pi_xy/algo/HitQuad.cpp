// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitQuad
#include <pi_xy/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_QuadPoints_
#include <pi_xy/algo/QuadPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_302202a459815ab6_9_new,"pi_xy.algo.HitQuad","new",0xd6415ef8,"pi_xy.algo.HitQuad.new","pi_xy/algo/HitQuad.hx",9,0x10c43bd8)
HX_LOCAL_STACK_FRAME(_hx_pos_302202a459815ab6_28_preCalculateValues,"pi_xy.algo.HitQuad","preCalculateValues",0x2fd4016d,"pi_xy.algo.HitQuad.preCalculateValues","pi_xy/algo/HitQuad.hx",28,0x10c43bd8)
HX_LOCAL_STACK_FRAME(_hx_pos_302202a459815ab6_37_hit,"pi_xy.algo.HitQuad","hit",0xd63cd4eb,"pi_xy.algo.HitQuad.hit","pi_xy/algo/HitQuad.hx",37,0x10c43bd8)
HX_LOCAL_STACK_FRAME(_hx_pos_302202a459815ab6_50_pushTriangles,"pi_xy.algo.HitQuad","pushTriangles",0xf7adb009,"pi_xy.algo.HitQuad.pushTriangles","pi_xy/algo/HitQuad.hx",50,0x10c43bd8)
namespace pi_xy{
namespace algo{

void HitQuad_obj::__construct(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,::hx::Null< bool >  __o_preCalculated){
            		bool preCalculated = __o_preCalculated.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_302202a459815ab6_9_new)
HXLINE(  14)		this->undoImage = null();
HXLINE(  22)		super::__construct(ax,ay,bx,by,cx,cy,dx,dy);
HXLINE(  23)		if (preCalculated) {
HXLINE(  24)			this->triABD =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,this->ax,this->ay,this->bx,this->by,this->dx,this->dy,true);
HXDLIN(  24)			this->triBCD =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,this->bx,this->by,this->cx,this->cy,this->dx,this->dy,true);
HXDLIN(  24)			Float a = this->ax;
HXDLIN(  24)			Float b = this->bx;
HXDLIN(  24)			Float c = this->cx;
HXDLIN(  24)			Float d = this->dx;
HXDLIN(  24)			int min = ::Math_obj::floor(a);
HXDLIN(  24)			int max = ::Math_obj::ceil(a);
HXDLIN(  24)			if ((b < min)) {
HXLINE(  31)				min = ::Math_obj::floor(b);
            			}
            			else {
HXLINE(  24)				if ((b > max)) {
HXLINE(  33)					max = ::Math_obj::ceil(b);
            				}
            			}
HXLINE(  24)			if ((c < min)) {
HXLINE(  36)				min = ::Math_obj::floor(c);
            			}
            			else {
HXLINE(  24)				if ((c > max)) {
HXLINE(  38)					max = ::Math_obj::ceil(c);
            				}
            			}
HXLINE(  24)			if ((d < min)) {
HXLINE(  41)				min = ::Math_obj::floor(d);
            			}
            			else {
HXLINE(  24)				if ((d > max)) {
HXLINE(  43)					max = ::Math_obj::ceil(d);
            				}
            			}
HXLINE(  24)			int ii_min = min;
HXDLIN(  24)			int ii_max = max;
HXDLIN(  24)			this->xIter4 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  24)			Float a1 = this->ay;
HXDLIN(  24)			Float b1 = this->by;
HXDLIN(  24)			Float c1 = this->cy;
HXDLIN(  24)			Float d1 = this->dy;
HXDLIN(  24)			int min1 = ::Math_obj::floor(a1);
HXDLIN(  24)			int max1 = ::Math_obj::ceil(a1);
HXDLIN(  24)			if ((b1 < min1)) {
HXLINE(  31)				min1 = ::Math_obj::floor(b1);
            			}
            			else {
HXLINE(  24)				if ((b1 > max1)) {
HXLINE(  33)					max1 = ::Math_obj::ceil(b1);
            				}
            			}
HXLINE(  24)			if ((c1 < min1)) {
HXLINE(  36)				min1 = ::Math_obj::floor(c1);
            			}
            			else {
HXLINE(  24)				if ((c1 > max1)) {
HXLINE(  38)					max1 = ::Math_obj::ceil(c1);
            				}
            			}
HXLINE(  24)			if ((d1 < min1)) {
HXLINE(  41)				min1 = ::Math_obj::floor(d1);
            			}
            			else {
HXLINE(  24)				if ((d1 > max1)) {
HXLINE(  43)					max1 = ::Math_obj::ceil(d1);
            				}
            			}
HXLINE(  24)			int ii_min1 = min1;
HXDLIN(  24)			int ii_max1 = max1;
HXDLIN(  24)			this->yIter4 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            		}
            	}

Dynamic HitQuad_obj::__CreateEmpty() { return new HitQuad_obj; }

void *HitQuad_obj::_hx_vtable = 0;

Dynamic HitQuad_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HitQuad_obj > _hx_result = new HitQuad_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool HitQuad_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x060ba5b4) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x060ba5b4;
	} else {
		return inClassId==(int)0x3517a9db;
	}
}

static ::pi_xy::algo::IhitObj_obj _hx_pi_xy_algo_HitQuad__hx_pi_xy_algo_IhitObj= {
	( bool (::hx::Object::*)(Float,Float))&::pi_xy::algo::HitQuad_obj::hit,
};

void *HitQuad_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x6d20d5d3: return &_hx_pi_xy_algo_HitQuad__hx_pi_xy_algo_IhitObj;
	}
	return super::_hx_getInterface(inHash);
}

void HitQuad_obj::preCalculateValues(){
            	HX_GC_STACKFRAME(&_hx_pos_302202a459815ab6_28_preCalculateValues)
HXLINE(  29)		this->triABD =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,this->ax,this->ay,this->bx,this->by,this->dx,this->dy,true);
HXLINE(  30)		this->triBCD =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,this->bx,this->by,this->cx,this->cy,this->dx,this->dy,true);
HXLINE(  31)		Float a = this->ax;
HXDLIN(  31)		Float b = this->bx;
HXDLIN(  31)		Float c = this->cx;
HXDLIN(  31)		Float d = this->dx;
HXDLIN(  31)		int min = ::Math_obj::floor(a);
HXDLIN(  31)		int max = ::Math_obj::ceil(a);
HXDLIN(  31)		if ((b < min)) {
HXLINE(  31)			min = ::Math_obj::floor(b);
            		}
            		else {
HXLINE(  31)			if ((b > max)) {
HXLINE(  33)				max = ::Math_obj::ceil(b);
            			}
            		}
HXLINE(  31)		if ((c < min)) {
HXLINE(  36)			min = ::Math_obj::floor(c);
            		}
            		else {
HXLINE(  31)			if ((c > max)) {
HXLINE(  38)				max = ::Math_obj::ceil(c);
            			}
            		}
HXLINE(  31)		if ((d < min)) {
HXLINE(  41)			min = ::Math_obj::floor(d);
            		}
            		else {
HXLINE(  31)			if ((d > max)) {
HXLINE(  43)				max = ::Math_obj::ceil(d);
            			}
            		}
HXLINE(  31)		int ii_min = min;
HXDLIN(  31)		int ii_max = max;
HXDLIN(  31)		this->xIter4 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXLINE(  32)		Float a1 = this->ay;
HXDLIN(  32)		Float b1 = this->by;
HXDLIN(  32)		Float c1 = this->cy;
HXDLIN(  32)		Float d1 = this->dy;
HXDLIN(  32)		int min1 = ::Math_obj::floor(a1);
HXDLIN(  32)		int max1 = ::Math_obj::ceil(a1);
HXDLIN(  32)		if ((b1 < min1)) {
HXLINE(  31)			min1 = ::Math_obj::floor(b1);
            		}
            		else {
HXLINE(  32)			if ((b1 > max1)) {
HXLINE(  33)				max1 = ::Math_obj::ceil(b1);
            			}
            		}
HXLINE(  32)		if ((c1 < min1)) {
HXLINE(  36)			min1 = ::Math_obj::floor(c1);
            		}
            		else {
HXLINE(  32)			if ((c1 > max1)) {
HXLINE(  38)				max1 = ::Math_obj::ceil(c1);
            			}
            		}
HXLINE(  32)		if ((d1 < min1)) {
HXLINE(  41)			min1 = ::Math_obj::floor(d1);
            		}
            		else {
HXLINE(  32)			if ((d1 > max1)) {
HXLINE(  43)				max1 = ::Math_obj::ceil(d1);
            			}
            		}
HXLINE(  32)		int ii_min1 = min1;
HXDLIN(  32)		int ii_max1 = max1;
HXDLIN(  32)		this->yIter4 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(HitQuad_obj,preCalculateValues,(void))

bool HitQuad_obj::hit(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_302202a459815ab6_37_hit)
HXDLIN(  37)		bool _hx_tmp;
HXDLIN(  37)		 ::pi_xy::iter::IntIterStart this1 = this->xIter4;
HXDLIN(  37)		bool _hx_tmp1;
HXDLIN(  37)		if ((x > (this1->start - 1))) {
HXDLIN(  37)			_hx_tmp1 = (x < (this1->max + 1));
            		}
            		else {
HXDLIN(  37)			_hx_tmp1 = false;
            		}
HXDLIN(  37)		if (_hx_tmp1) {
HXDLIN(  37)			 ::pi_xy::iter::IntIterStart this2 = this->yIter4;
HXDLIN(  37)			if ((y > (this2->start - 1))) {
HXDLIN(  37)				_hx_tmp = (y < (this2->max + 1));
            			}
            			else {
HXDLIN(  37)				_hx_tmp = false;
            			}
            		}
            		else {
HXDLIN(  37)			_hx_tmp = false;
            		}
HXDLIN(  37)		if (_hx_tmp) {
HXLINE(  38)			 ::pi_xy::algo::HitTri _this = this->triABD;
HXDLIN(  38)			bool _hx_tmp2;
HXDLIN(  38)			bool _hx_tmp3;
HXDLIN(  38)			 ::pi_xy::iter::IntIterStart this3 = _this->xIter3;
HXDLIN(  38)			bool _hx_tmp4;
HXDLIN(  38)			if ((x > (this3->start - 1))) {
HXLINE(  38)				_hx_tmp4 = (x < (this3->max + 1));
            			}
            			else {
HXLINE(  38)				_hx_tmp4 = false;
            			}
HXDLIN(  38)			if (_hx_tmp4) {
HXLINE(  38)				 ::pi_xy::iter::IntIterStart this4 = _this->yIter3;
HXDLIN(  38)				if ((y > (this4->start - 1))) {
HXLINE(  38)					_hx_tmp3 = (y < (this4->max + 1));
            				}
            				else {
HXLINE(  38)					_hx_tmp3 = false;
            				}
            			}
            			else {
HXLINE(  38)				_hx_tmp3 = false;
            			}
HXDLIN(  38)			if (_hx_tmp3) {
HXLINE(  38)				Float s = ((_this->s0 + (_this->sx * x)) + (_this->sy * y));
HXDLIN(  38)				Float t = ((_this->t0 + (_this->tx * x)) + (_this->ty * y));
HXDLIN(  38)				bool _hx_tmp5;
HXDLIN(  38)				if (!((s <= 0))) {
HXLINE(  38)					_hx_tmp5 = (t <= 0);
            				}
            				else {
HXLINE(  38)					_hx_tmp5 = true;
            				}
HXDLIN(  38)				if (_hx_tmp5) {
HXLINE(  38)					_hx_tmp2 = false;
            				}
            				else {
HXLINE(  38)					if (((s + t) < _this->A)) {
HXLINE(  38)						_hx_tmp2 = true;
            					}
            					else {
HXLINE(  38)						_hx_tmp2 = false;
            					}
            				}
            			}
            			else {
HXLINE(  38)				_hx_tmp2 = false;
            			}
HXDLIN(  38)			if (_hx_tmp2) {
HXLINE(  39)				return true;
            			}
            			else {
HXLINE(  40)				 ::pi_xy::algo::HitTri _this1 = this->triBCD;
HXDLIN(  40)				bool _hx_tmp6;
HXDLIN(  40)				bool _hx_tmp7;
HXDLIN(  40)				 ::pi_xy::iter::IntIterStart this5 = _this1->xIter3;
HXDLIN(  40)				bool _hx_tmp8;
HXDLIN(  40)				if ((x > (this5->start - 1))) {
HXLINE(  40)					_hx_tmp8 = (x < (this5->max + 1));
            				}
            				else {
HXLINE(  40)					_hx_tmp8 = false;
            				}
HXDLIN(  40)				if (_hx_tmp8) {
HXLINE(  40)					 ::pi_xy::iter::IntIterStart this6 = _this1->yIter3;
HXDLIN(  40)					if ((y > (this6->start - 1))) {
HXLINE(  40)						_hx_tmp7 = (y < (this6->max + 1));
            					}
            					else {
HXLINE(  40)						_hx_tmp7 = false;
            					}
            				}
            				else {
HXLINE(  40)					_hx_tmp7 = false;
            				}
HXDLIN(  40)				if (_hx_tmp7) {
HXLINE(  40)					Float s1 = ((_this1->s0 + (_this1->sx * x)) + (_this1->sy * y));
HXDLIN(  40)					Float t1 = ((_this1->t0 + (_this1->tx * x)) + (_this1->ty * y));
HXDLIN(  40)					bool _hx_tmp9;
HXDLIN(  40)					if (!((s1 <= 0))) {
HXLINE(  40)						_hx_tmp9 = (t1 <= 0);
            					}
            					else {
HXLINE(  40)						_hx_tmp9 = true;
            					}
HXDLIN(  40)					if (_hx_tmp9) {
HXLINE(  40)						_hx_tmp6 = false;
            					}
            					else {
HXLINE(  40)						if (((s1 + t1) < _this1->A)) {
HXLINE(  40)							_hx_tmp6 = true;
            						}
            						else {
HXLINE(  40)							_hx_tmp6 = false;
            						}
            					}
            				}
            				else {
HXLINE(  40)					_hx_tmp6 = false;
            				}
HXDLIN(  40)				if (_hx_tmp6) {
HXLINE(  41)					return true;
            				}
            				else {
HXLINE(  43)					return false;
            				}
            			}
            		}
            		else {
HXLINE(  46)			return false;
            		}
HXLINE(  37)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(HitQuad_obj,hit,return )

::Array< ::Dynamic> HitQuad_obj::pushTriangles(::Array< ::Dynamic> arrTri){
            	HX_STACKFRAME(&_hx_pos_302202a459815ab6_50_pushTriangles)
HXLINE(  51)		arrTri[arrTri->length] = this->triABD;
HXLINE(  52)		arrTri[arrTri->length] = this->triBCD;
HXLINE(  53)		return arrTri;
            	}


HX_DEFINE_DYNAMIC_FUNC1(HitQuad_obj,pushTriangles,return )


::hx::ObjectPtr< HitQuad_obj > HitQuad_obj::__new(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,::hx::Null< bool >  __o_preCalculated) {
	::hx::ObjectPtr< HitQuad_obj > __this = new HitQuad_obj();
	__this->__construct(ax,ay,bx,by,cx,cy,dx,dy,__o_preCalculated);
	return __this;
}

::hx::ObjectPtr< HitQuad_obj > HitQuad_obj::__alloc(::hx::Ctx *_hx_ctx,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,::hx::Null< bool >  __o_preCalculated) {
	HitQuad_obj *__this = (HitQuad_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HitQuad_obj), true, "pi_xy.algo.HitQuad"));
	*(void **)__this = HitQuad_obj::_hx_vtable;
	__this->__construct(ax,ay,bx,by,cx,cy,dx,dy,__o_preCalculated);
	return __this;
}

HitQuad_obj::HitQuad_obj()
{
}

void HitQuad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HitQuad);
	HX_MARK_MEMBER_NAME(triABD,"triABD");
	HX_MARK_MEMBER_NAME(triBCD,"triBCD");
	HX_MARK_MEMBER_NAME(xIter4,"xIter4");
	HX_MARK_MEMBER_NAME(yIter4,"yIter4");
	HX_MARK_MEMBER_NAME(undoImage,"undoImage");
	HX_MARK_MEMBER_NAME(undoX,"undoX");
	HX_MARK_MEMBER_NAME(undoY,"undoY");
	HX_MARK_END_CLASS();
}

void HitQuad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(triABD,"triABD");
	HX_VISIT_MEMBER_NAME(triBCD,"triBCD");
	HX_VISIT_MEMBER_NAME(xIter4,"xIter4");
	HX_VISIT_MEMBER_NAME(yIter4,"yIter4");
	HX_VISIT_MEMBER_NAME(undoImage,"undoImage");
	HX_VISIT_MEMBER_NAME(undoX,"undoX");
	HX_VISIT_MEMBER_NAME(undoY,"undoY");
}

::hx::Val HitQuad_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"hit") ) { return ::hx::Val( hit_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"undoX") ) { return ::hx::Val( undoX ); }
		if (HX_FIELD_EQ(inName,"undoY") ) { return ::hx::Val( undoY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"triABD") ) { return ::hx::Val( triABD ); }
		if (HX_FIELD_EQ(inName,"triBCD") ) { return ::hx::Val( triBCD ); }
		if (HX_FIELD_EQ(inName,"xIter4") ) { return ::hx::Val( xIter4 ); }
		if (HX_FIELD_EQ(inName,"yIter4") ) { return ::hx::Val( yIter4 ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"undoImage") ) { return ::hx::Val( undoImage ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pushTriangles") ) { return ::hx::Val( pushTriangles_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"preCalculateValues") ) { return ::hx::Val( preCalculateValues_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val HitQuad_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"undoX") ) { undoX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"undoY") ) { undoY=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"triABD") ) { triABD=inValue.Cast<  ::pi_xy::algo::HitTri >(); return inValue; }
		if (HX_FIELD_EQ(inName,"triBCD") ) { triBCD=inValue.Cast<  ::pi_xy::algo::HitTri >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xIter4") ) { xIter4=inValue.Cast<  ::pi_xy::iter::IntIterStart >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yIter4") ) { yIter4=inValue.Cast<  ::pi_xy::iter::IntIterStart >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"undoImage") ) { undoImage=inValue.Cast<  ::pi_xy::ImageStruct >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HitQuad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("triABD",f8,ef,ac,4a));
	outFields->push(HX_("triBCD",18,b3,ad,4a));
	outFields->push(HX_("xIter4",84,6c,0d,50));
	outFields->push(HX_("yIter4",e3,c8,68,b6));
	outFields->push(HX_("undoImage",97,06,98,ec));
	outFields->push(HX_("undoX",b4,99,e3,a6));
	outFields->push(HX_("undoY",b5,99,e3,a6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo HitQuad_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::pi_xy::algo::HitTri */ ,(int)offsetof(HitQuad_obj,triABD),HX_("triABD",f8,ef,ac,4a)},
	{::hx::fsObject /*  ::pi_xy::algo::HitTri */ ,(int)offsetof(HitQuad_obj,triBCD),HX_("triBCD",18,b3,ad,4a)},
	{::hx::fsObject /*  ::pi_xy::iter::IntIterStart */ ,(int)offsetof(HitQuad_obj,xIter4),HX_("xIter4",84,6c,0d,50)},
	{::hx::fsObject /*  ::pi_xy::iter::IntIterStart */ ,(int)offsetof(HitQuad_obj,yIter4),HX_("yIter4",e3,c8,68,b6)},
	{::hx::fsObject /*  ::pi_xy::ImageStruct */ ,(int)offsetof(HitQuad_obj,undoImage),HX_("undoImage",97,06,98,ec)},
	{::hx::fsInt,(int)offsetof(HitQuad_obj,undoX),HX_("undoX",b4,99,e3,a6)},
	{::hx::fsInt,(int)offsetof(HitQuad_obj,undoY),HX_("undoY",b5,99,e3,a6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *HitQuad_obj_sStaticStorageInfo = 0;
#endif

static ::String HitQuad_obj_sMemberFields[] = {
	HX_("triABD",f8,ef,ac,4a),
	HX_("triBCD",18,b3,ad,4a),
	HX_("xIter4",84,6c,0d,50),
	HX_("yIter4",e3,c8,68,b6),
	HX_("undoImage",97,06,98,ec),
	HX_("undoX",b4,99,e3,a6),
	HX_("undoY",b5,99,e3,a6),
	HX_("preCalculateValues",05,65,b9,57),
	HX_("hit",53,46,4f,00),
	HX_("pushTriangles",71,f3,f2,b3),
	::String(null()) };

::hx::Class HitQuad_obj::__mClass;

void HitQuad_obj::__register()
{
	HitQuad_obj _hx_dummy;
	HitQuad_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo.HitQuad",06,c3,00,20);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HitQuad_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HitQuad_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HitQuad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HitQuad_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
