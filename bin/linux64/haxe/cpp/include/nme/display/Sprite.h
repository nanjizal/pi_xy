// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_display_Sprite
#define INCLUDED_nme_display_Sprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_display_DisplayObjectContainer
#include <nme/display/DisplayObjectContainer.h>
#endif
HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,InteractiveObject)
HX_DECLARE_CLASS2(nme,display,Sprite)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,geom,Rectangle)

namespace nme{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Sprite_obj : public  ::nme::display::DisplayObjectContainer_obj
{
	public:
		typedef  ::nme::display::DisplayObjectContainer_obj super;
		typedef Sprite_obj OBJ_;
		Sprite_obj();

	public:
		enum { _hx_ClassId = 0x5a2ce121 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.display.Sprite")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.display.Sprite"); }
		static ::hx::ObjectPtr< Sprite_obj > __new();
		static ::hx::ObjectPtr< Sprite_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Sprite_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Sprite",25,50,2a,f8); }

		bool buttonMode;
		bool useHandCursor;
		virtual ::String nmeGetType();
		::Dynamic nmeGetType_dyn();

		void startDrag(::hx::Null< bool >  lockCenter, ::nme::geom::Rectangle bounds);
		::Dynamic startDrag_dyn();

		void stopDrag();
		::Dynamic stopDrag_dyn();

};

} // end namespace nme
} // end namespace display

#endif /* INCLUDED_nme_display_Sprite */ 
