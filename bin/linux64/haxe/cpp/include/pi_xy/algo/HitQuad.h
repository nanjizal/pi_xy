// Generated by Haxe 4.3.3
#ifndef INCLUDED_pi_xy_algo_HitQuad
#define INCLUDED_pi_xy_algo_HitQuad

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_pi_xy_algo_QuadPoints_
#include <pi_xy/algo/QuadPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
HX_DECLARE_CLASS1(pi_xy,ImageStruct)
HX_DECLARE_CLASS2(pi_xy,algo,HitQuad)
HX_DECLARE_CLASS2(pi_xy,algo,HitTri)
HX_DECLARE_CLASS2(pi_xy,algo,IhitObj)
HX_DECLARE_CLASS2(pi_xy,algo,QuadPoints_)
HX_DECLARE_CLASS2(pi_xy,algo,TriPoints_)
HX_DECLARE_CLASS2(pi_xy,iter,IntIterStart)

namespace pi_xy{
namespace algo{


class HXCPP_CLASS_ATTRIBUTES HitQuad_obj : public  ::pi_xy::algo::QuadPoints__obj
{
	public:
		typedef  ::pi_xy::algo::QuadPoints__obj super;
		typedef HitQuad_obj OBJ_;
		HitQuad_obj();

	public:
		enum { _hx_ClassId = 0x060ba5b4 };

		void __construct(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,::hx::Null< bool >  __o_preCalculated);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="pi_xy.algo.HitQuad")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"pi_xy.algo.HitQuad"); }
		static ::hx::ObjectPtr< HitQuad_obj > __new(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,::hx::Null< bool >  __o_preCalculated);
		static ::hx::ObjectPtr< HitQuad_obj > __alloc(::hx::Ctx *_hx_ctx,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,::hx::Null< bool >  __o_preCalculated);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~HitQuad_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("HitQuad",9a,f8,e0,ad); }

		 ::pi_xy::algo::HitTri triABD;
		 ::pi_xy::algo::HitTri triBCD;
		 ::pi_xy::iter::IntIterStart xIter4;
		 ::pi_xy::iter::IntIterStart yIter4;
		 ::pi_xy::ImageStruct undoImage;
		int undoX;
		int undoY;
		void preCalculateValues();
		::Dynamic preCalculateValues_dyn();

		bool hit(Float x,Float y);
		::Dynamic hit_dyn();

		::Array< ::Dynamic> pushTriangles(::Array< ::Dynamic> arrTri);
		::Dynamic pushTriangles_dyn();

};

} // end namespace pi_xy
} // end namespace algo

#endif /* INCLUDED_pi_xy_algo_HitQuad */ 
