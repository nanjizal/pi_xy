// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_imageAbstracts_Mat3x3data
#include <pi_xy/imageAbstracts/Mat3x3data.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_06c6c7bc98fc63cc_96_new,"pi_xy.imageAbstracts.Mat3x3data","new",0x18478c5b,"pi_xy.imageAbstracts.Mat3x3data.new","pi_xy/imageAbstracts/Convolution.hx",96,0x505c58f7)
namespace pi_xy{
namespace imageAbstracts{

void Mat3x3data_obj::__construct(Float a,Float b,Float c,Float d,Float e,Float f,Float g,Float h,Float i){
            	HX_STACKFRAME(&_hx_pos_06c6c7bc98fc63cc_96_new)
HXLINE(  97)		this->a = a;
HXLINE(  98)		this->b = b;
HXLINE(  99)		this->c = c;
HXLINE( 101)		this->d = d;
HXLINE( 102)		this->e = e;
HXLINE( 103)		this->f = f;
HXLINE( 105)		this->g = g;
HXLINE( 106)		this->h = h;
HXLINE( 107)		this->i = i;
            	}

Dynamic Mat3x3data_obj::__CreateEmpty() { return new Mat3x3data_obj; }

void *Mat3x3data_obj::_hx_vtable = 0;

Dynamic Mat3x3data_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Mat3x3data_obj > _hx_result = new Mat3x3data_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool Mat3x3data_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x37ae6fd5;
}


Mat3x3data_obj::Mat3x3data_obj()
{
}

::hx::Val Mat3x3data_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { return ::hx::Val( a ); }
		if (HX_FIELD_EQ(inName,"b") ) { return ::hx::Val( b ); }
		if (HX_FIELD_EQ(inName,"c") ) { return ::hx::Val( c ); }
		if (HX_FIELD_EQ(inName,"d") ) { return ::hx::Val( d ); }
		if (HX_FIELD_EQ(inName,"e") ) { return ::hx::Val( e ); }
		if (HX_FIELD_EQ(inName,"f") ) { return ::hx::Val( f ); }
		if (HX_FIELD_EQ(inName,"g") ) { return ::hx::Val( g ); }
		if (HX_FIELD_EQ(inName,"h") ) { return ::hx::Val( h ); }
		if (HX_FIELD_EQ(inName,"i") ) { return ::hx::Val( i ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Mat3x3data_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"a") ) { a=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"b") ) { b=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"d") ) { d=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"e") ) { e=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"f") ) { f=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"h") ) { h=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Mat3x3data_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("a",61,00,00,00));
	outFields->push(HX_("b",62,00,00,00));
	outFields->push(HX_("c",63,00,00,00));
	outFields->push(HX_("d",64,00,00,00));
	outFields->push(HX_("e",65,00,00,00));
	outFields->push(HX_("f",66,00,00,00));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("h",68,00,00,00));
	outFields->push(HX_("i",69,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Mat3x3data_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Mat3x3data_obj,a),HX_("a",61,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Mat3x3data_obj,b),HX_("b",62,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Mat3x3data_obj,c),HX_("c",63,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Mat3x3data_obj,d),HX_("d",64,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Mat3x3data_obj,e),HX_("e",65,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Mat3x3data_obj,f),HX_("f",66,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Mat3x3data_obj,g),HX_("g",67,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Mat3x3data_obj,h),HX_("h",68,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Mat3x3data_obj,i),HX_("i",69,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Mat3x3data_obj_sStaticStorageInfo = 0;
#endif

static ::String Mat3x3data_obj_sMemberFields[] = {
	HX_("a",61,00,00,00),
	HX_("b",62,00,00,00),
	HX_("c",63,00,00,00),
	HX_("d",64,00,00,00),
	HX_("e",65,00,00,00),
	HX_("f",66,00,00,00),
	HX_("g",67,00,00,00),
	HX_("h",68,00,00,00),
	HX_("i",69,00,00,00),
	::String(null()) };

::hx::Class Mat3x3data_obj::__mClass;

void Mat3x3data_obj::__register()
{
	Mat3x3data_obj _hx_dummy;
	Mat3x3data_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.imageAbstracts.Mat3x3data",e9,c2,25,9e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Mat3x3data_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Mat3x3data_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Mat3x3data_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Mat3x3data_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace imageAbstracts
