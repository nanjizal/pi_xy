// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_events_MouseEvent
#define INCLUDED_nme_events_MouseEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_140af2720004096a
#define INCLUDED_140af2720004096a
#include "nme/Event.h"
#endif
HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,InteractiveObject)
HX_DECLARE_CLASS2(nme,events,Event)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,events,MouseEvent)
HX_DECLARE_CLASS2(nme,geom,Point)

namespace nme{
namespace events{


class HXCPP_CLASS_ATTRIBUTES MouseEvent_obj : public  ::nme::events::Event_obj
{
	public:
		typedef  ::nme::events::Event_obj super;
		typedef MouseEvent_obj OBJ_;
		MouseEvent_obj();

	public:
		enum { _hx_ClassId = 0x04c82490 };

		void __construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< Float >  __o_localX,::hx::Null< Float >  __o_localY, ::nme::display::InteractiveObject relatedObject,::hx::Null< bool >  __o_ctrlKey,::hx::Null< bool >  __o_altKey,::hx::Null< bool >  __o_shiftKey,::hx::Null< bool >  __o_buttonDown,::hx::Null< int >  __o_delta,::hx::Null< bool >  __o_commandKey,::hx::Null< int >  __o_clickCount);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.events.MouseEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.events.MouseEvent"); }
		static ::hx::ObjectPtr< MouseEvent_obj > __new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< Float >  __o_localX,::hx::Null< Float >  __o_localY, ::nme::display::InteractiveObject relatedObject,::hx::Null< bool >  __o_ctrlKey,::hx::Null< bool >  __o_altKey,::hx::Null< bool >  __o_shiftKey,::hx::Null< bool >  __o_buttonDown,::hx::Null< int >  __o_delta,::hx::Null< bool >  __o_commandKey,::hx::Null< int >  __o_clickCount);
		static ::hx::ObjectPtr< MouseEvent_obj > __alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< Float >  __o_localX,::hx::Null< Float >  __o_localY, ::nme::display::InteractiveObject relatedObject,::hx::Null< bool >  __o_ctrlKey,::hx::Null< bool >  __o_altKey,::hx::Null< bool >  __o_shiftKey,::hx::Null< bool >  __o_buttonDown,::hx::Null< int >  __o_delta,::hx::Null< bool >  __o_commandKey,::hx::Null< int >  __o_clickCount);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MouseEvent_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MouseEvent",d5,bf,42,8a); }

		static void __boot();
		static ::String DOUBLE_CLICK;
		static ::String CLICK;
		static ::String MIDDLE_CLICK;
		static ::String MIDDLE_MOUSE_DOWN;
		static ::String MIDDLE_MOUSE_UP;
		static ::String MOUSE_DOWN;
		static ::String MOUSE_MOVE;
		static ::String MOUSE_OUT;
		static ::String MOUSE_OVER;
		static ::String MOUSE_UP;
		static ::String MOUSE_WHEEL;
		static ::String RIGHT_CLICK;
		static ::String RIGHT_MOUSE_DOWN;
		static ::String RIGHT_MOUSE_UP;
		static ::String ROLL_OUT;
		static ::String ROLL_OVER;
		static int efLeftDown;
		static int efShiftDown;
		static int efCtrlDown;
		static int efAltDown;
		static int efCommandDown;
		static  ::nme::events::MouseEvent nmeCreate(::String inType,::cpp::Pointer<  nme::Event > inEvent, ::nme::geom::Point inLocal, ::nme::display::InteractiveObject inTarget);
		static ::Dynamic nmeCreate_dyn();

		bool altKey;
		bool buttonDown;
		int clickCount;
		bool commandKey;
		bool ctrlKey;
		int delta;
		Float localX;
		Float localY;
		 ::nme::display::InteractiveObject relatedObject;
		bool shiftKey;
		Float stageX;
		Float stageY;
		bool cancelClick;
		virtual  ::nme::events::Event clone();

		virtual  ::nme::events::MouseEvent nmeCreateSimilar(::String inType, ::nme::display::InteractiveObject related, ::nme::display::InteractiveObject targ);
		::Dynamic nmeCreateSimilar_dyn();

		virtual ::String toString();

		void updateAfterEvent();
		::Dynamic updateAfterEvent_dyn();

};

} // end namespace nme
} // end namespace events

#endif /* INCLUDED_nme_events_MouseEvent */ 
