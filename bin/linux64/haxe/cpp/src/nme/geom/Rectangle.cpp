// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_geom_Matrix
#include <nme/geom/Matrix.h>
#endif
#ifndef INCLUDED_nme_geom_Point
#include <nme/geom/Point.h>
#endif
#ifndef INCLUDED_nme_geom_Rectangle
#include <nme/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_92125290bfba0bc1_21_new,"nme.geom.Rectangle","new",0x97360377,"nme.geom.Rectangle.new","nme/geom/Rectangle.hx",21,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_28_toString,"nme.geom.Rectangle","toString",0xd3e90a35,"nme.geom.Rectangle.toString","nme/geom/Rectangle.hx",28,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_31_setTo,"nme.geom.Rectangle","setTo",0x3455f894,"nme.geom.Rectangle.setTo","nme/geom/Rectangle.hx",31,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_40_clone,"nme.geom.Rectangle","clone",0x02897a34,"nme.geom.Rectangle.clone","nme/geom/Rectangle.hx",40,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_45_contains,"nme.geom.Rectangle","contains",0xc7f593a8,"nme.geom.Rectangle.contains","nme/geom/Rectangle.hx",45,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_50_containsPoint,"nme.geom.Rectangle","containsPoint",0x3ba74f88,"nme.geom.Rectangle.containsPoint","nme/geom/Rectangle.hx",50,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_55_containsRect,"nme.geom.Rectangle","containsRect",0x3f8d00ec,"nme.geom.Rectangle.containsRect","nme/geom/Rectangle.hx",55,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_60_equals,"nme.geom.Rectangle","equals",0xe7668388,"nme.geom.Rectangle.equals","nme/geom/Rectangle.hx",60,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_64_extendBounds,"nme.geom.Rectangle","extendBounds",0xb9f6ddf8,"nme.geom.Rectangle.extendBounds","nme/geom/Rectangle.hx",64,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_87_inflate,"nme.geom.Rectangle","inflate",0x69caa71e,"nme.geom.Rectangle.inflate","nme/geom/Rectangle.hx",87,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_94_inflatePoint,"nme.geom.Rectangle","inflatePoint",0xcba9f052,"nme.geom.Rectangle.inflatePoint","nme/geom/Rectangle.hx",94,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_98_intersection,"nme.geom.Rectangle","intersection",0x21d1d452,"nme.geom.Rectangle.intersection","nme/geom/Rectangle.hx",98,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_113_intersects,"nme.geom.Rectangle","intersects",0xfd8e307d,"nme.geom.Rectangle.intersects","nme/geom/Rectangle.hx",113,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_126_isEmpty,"nme.geom.Rectangle","isEmpty",0x6a0ee8da,"nme.geom.Rectangle.isEmpty","nme/geom/Rectangle.hx",126,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_130_offset,"nme.geom.Rectangle","offset",0x87b32cdc,"nme.geom.Rectangle.offset","nme/geom/Rectangle.hx",130,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_136_offsetPoint,"nme.geom.Rectangle","offsetPoint",0xb38dd9d4,"nme.geom.Rectangle.offsetPoint","nme/geom/Rectangle.hx",136,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_143_setEmpty,"nme.geom.Rectangle","setEmpty",0x1988dd14,"nme.geom.Rectangle.setEmpty","nme/geom/Rectangle.hx",143,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_147_transform,"nme.geom.Rectangle","transform",0xb50b4bc3,"nme.geom.Rectangle.transform","nme/geom/Rectangle.hx",147,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_178_union,"nme.geom.Rectangle","union",0x610dcbe6,"nme.geom.Rectangle.union","nme/geom/Rectangle.hx",178,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_187_copyFrom,"nme.geom.Rectangle","copyFrom",0x63db4548,"nme.geom.Rectangle.copyFrom","nme/geom/Rectangle.hx",187,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_195_get_bottom,"nme.geom.Rectangle","get_bottom",0x6fa2c47d,"nme.geom.Rectangle.get_bottom","nme/geom/Rectangle.hx",195,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_196_set_bottom,"nme.geom.Rectangle","set_bottom",0x732062f1,"nme.geom.Rectangle.set_bottom","nme/geom/Rectangle.hx",196,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_197_get_bottomRight,"nme.geom.Rectangle","get_bottomRight",0x0f04521f,"nme.geom.Rectangle.get_bottomRight","nme/geom/Rectangle.hx",197,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_198_set_bottomRight,"nme.geom.Rectangle","set_bottomRight",0x0acfcf2b,"nme.geom.Rectangle.set_bottomRight","nme/geom/Rectangle.hx",198,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_199_get_left,"nme.geom.Rectangle","get_left",0x62e4fd19,"nme.geom.Rectangle.get_left","nme/geom/Rectangle.hx",199,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_200_set_left,"nme.geom.Rectangle","set_left",0x1142568d,"nme.geom.Rectangle.set_left","nme/geom/Rectangle.hx",200,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_201_get_right,"nme.geom.Rectangle","get_right",0x9c85868a,"nme.geom.Rectangle.get_right","nme/geom/Rectangle.hx",201,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_202_set_right,"nme.geom.Rectangle","set_right",0x7fd67296,"nme.geom.Rectangle.set_right","nme/geom/Rectangle.hx",202,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_203_get_size,"nme.geom.Rectangle","get_size",0x678895d3,"nme.geom.Rectangle.get_size","nme/geom/Rectangle.hx",203,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_204_set_size,"nme.geom.Rectangle","set_size",0x15e5ef47,"nme.geom.Rectangle.set_size","nme/geom/Rectangle.hx",204,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_205_get_top,"nme.geom.Rectangle","get_top",0x847c39c3,"nme.geom.Rectangle.get_top","nme/geom/Rectangle.hx",205,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_206_set_top,"nme.geom.Rectangle","set_top",0x777dcacf,"nme.geom.Rectangle.set_top","nme/geom/Rectangle.hx",206,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_207_get_topLeft,"nme.geom.Rectangle","get_topLeft",0xc3390b6a,"nme.geom.Rectangle.get_topLeft","nme/geom/Rectangle.hx",207,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_208_set_topLeft,"nme.geom.Rectangle","set_topLeft",0xcda61276,"nme.geom.Rectangle.set_topLeft","nme/geom/Rectangle.hx",208,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_209_get_centre,"nme.geom.Rectangle","get_centre",0x10050ead,"nme.geom.Rectangle.get_centre","nme/geom/Rectangle.hx",209,0xe4dfc439)
HX_LOCAL_STACK_FRAME(_hx_pos_92125290bfba0bc1_210_set_centre,"nme.geom.Rectangle","set_centre",0x1382ad21,"nme.geom.Rectangle.set_centre","nme/geom/Rectangle.hx",210,0xe4dfc439)
namespace nme{
namespace geom{

void Rectangle_obj::__construct( ::Dynamic inX, ::Dynamic inY, ::Dynamic inWidth, ::Dynamic inHeight){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_21_new)
HXLINE(  22)		Float _hx_tmp;
HXDLIN(  22)		if (::hx::IsNull( inX )) {
HXLINE(  22)			_hx_tmp = ( (Float)(0) );
            		}
            		else {
HXLINE(  22)			_hx_tmp = ( (Float)(inX) );
            		}
HXDLIN(  22)		this->x = _hx_tmp;
HXLINE(  23)		Float _hx_tmp1;
HXDLIN(  23)		if (::hx::IsNull( inY )) {
HXLINE(  23)			_hx_tmp1 = ( (Float)(0) );
            		}
            		else {
HXLINE(  23)			_hx_tmp1 = ( (Float)(inY) );
            		}
HXDLIN(  23)		this->y = _hx_tmp1;
HXLINE(  24)		Float _hx_tmp2;
HXDLIN(  24)		if (::hx::IsNull( inWidth )) {
HXLINE(  24)			_hx_tmp2 = ( (Float)(0) );
            		}
            		else {
HXLINE(  24)			_hx_tmp2 = ( (Float)(inWidth) );
            		}
HXDLIN(  24)		this->width = _hx_tmp2;
HXLINE(  25)		Float _hx_tmp3;
HXDLIN(  25)		if (::hx::IsNull( inHeight )) {
HXLINE(  25)			_hx_tmp3 = ( (Float)(0) );
            		}
            		else {
HXLINE(  25)			_hx_tmp3 = ( (Float)(inHeight) );
            		}
HXDLIN(  25)		this->height = _hx_tmp3;
            	}

Dynamic Rectangle_obj::__CreateEmpty() { return new Rectangle_obj; }

void *Rectangle_obj::_hx_vtable = 0;

Dynamic Rectangle_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Rectangle_obj > _hx_result = new Rectangle_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Rectangle_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6920fe0d;
}

::String Rectangle_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_28_toString)
HXDLIN(  28)		return ((((((HX_("Rectangle(",39,d9,6d,2a) + this->x) + HX_(",",2c,00,00,00)) + this->y) + HX_(" ",20,00,00,00)) + this->width) + ((HX_("x",78,00,00,00) + this->height) + HX_(")",29,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,toString,return )

void Rectangle_obj::setTo(Float inX,Float inY,Float inWidth,Float inHeight){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_31_setTo)
HXLINE(  32)		this->x = inX;
HXLINE(  33)		this->y = inY;
HXLINE(  34)		this->width = inWidth;
HXLINE(  35)		this->height = inHeight;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Rectangle_obj,setTo,(void))

 ::nme::geom::Rectangle Rectangle_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_92125290bfba0bc1_40_clone)
HXDLIN(  40)		return  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,this->x,this->y,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,clone,return )

bool Rectangle_obj::contains(Float inX,Float inY){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_45_contains)
HXDLIN(  45)		bool _hx_tmp;
HXDLIN(  45)		bool _hx_tmp1;
HXDLIN(  45)		if ((inX >= this->x)) {
HXDLIN(  45)			_hx_tmp1 = (inY >= this->y);
            		}
            		else {
HXDLIN(  45)			_hx_tmp1 = false;
            		}
HXDLIN(  45)		if (_hx_tmp1) {
HXDLIN(  45)			_hx_tmp = (inX < this->get_right());
            		}
            		else {
HXDLIN(  45)			_hx_tmp = false;
            		}
HXDLIN(  45)		if (_hx_tmp) {
HXDLIN(  45)			return (inY < this->get_bottom());
            		}
            		else {
HXDLIN(  45)			return false;
            		}
HXDLIN(  45)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,contains,return )

bool Rectangle_obj::containsPoint( ::nme::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_50_containsPoint)
HXDLIN(  50)		return this->contains(point->x,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsPoint,return )

bool Rectangle_obj::containsRect( ::nme::geom::Rectangle rect){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_55_containsRect)
HXDLIN(  55)		if (this->contains(rect->x,rect->y)) {
HXDLIN(  55)			return this->containsPoint(rect->get_bottomRight());
            		}
            		else {
HXDLIN(  55)			return false;
            		}
HXDLIN(  55)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,containsRect,return )

bool Rectangle_obj::equals( ::nme::geom::Rectangle toCompare){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_60_equals)
HXDLIN(  60)		bool _hx_tmp;
HXDLIN(  60)		bool _hx_tmp1;
HXDLIN(  60)		if ((this->x == toCompare->x)) {
HXDLIN(  60)			_hx_tmp1 = (this->y == toCompare->y);
            		}
            		else {
HXDLIN(  60)			_hx_tmp1 = false;
            		}
HXDLIN(  60)		if (_hx_tmp1) {
HXDLIN(  60)			_hx_tmp = (this->width == toCompare->width);
            		}
            		else {
HXDLIN(  60)			_hx_tmp = false;
            		}
HXDLIN(  60)		if (_hx_tmp) {
HXDLIN(  60)			return (this->height == toCompare->height);
            		}
            		else {
HXDLIN(  60)			return false;
            		}
HXDLIN(  60)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,equals,return )

void Rectangle_obj::extendBounds( ::nme::geom::Rectangle r){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_64_extendBounds)
HXLINE(  65)		Float dx = (this->x - r->x);
HXLINE(  66)		if ((dx > 0)) {
HXLINE(  68)			 ::nme::geom::Rectangle _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  68)			_hx_tmp->x = (_hx_tmp->x - dx);
HXLINE(  69)			 ::nme::geom::Rectangle _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  69)			_hx_tmp1->width = (_hx_tmp1->width + dx);
            		}
HXLINE(  72)		Float dy = (this->y - r->y);
HXLINE(  73)		if ((dy > 0)) {
HXLINE(  75)			 ::nme::geom::Rectangle _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  75)			_hx_tmp2->y = (_hx_tmp2->y - dy);
HXLINE(  76)			 ::nme::geom::Rectangle _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  76)			_hx_tmp3->height = (_hx_tmp3->height + dy);
            		}
HXLINE(  79)		Float _hx_tmp4 = r->get_right();
HXDLIN(  79)		if ((_hx_tmp4 > this->get_right())) {
HXLINE(  80)			this->set_right(r->get_right());
            		}
HXLINE(  82)		Float _hx_tmp5 = r->get_bottom();
HXDLIN(  82)		if ((_hx_tmp5 > this->get_bottom())) {
HXLINE(  83)			this->set_bottom(r->get_bottom());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,extendBounds,(void))

void Rectangle_obj::inflate(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_87_inflate)
HXLINE(  88)		 ::nme::geom::Rectangle _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  88)		_hx_tmp->x = (_hx_tmp->x - dx);
HXDLIN(  88)		 ::nme::geom::Rectangle _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  88)		_hx_tmp1->width = (_hx_tmp1->width + (dx * ( (Float)(2) )));
HXLINE(  89)		 ::nme::geom::Rectangle _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  89)		_hx_tmp2->y = (_hx_tmp2->y - dy);
HXDLIN(  89)		 ::nme::geom::Rectangle _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  89)		_hx_tmp3->height = (_hx_tmp3->height + (dy * ( (Float)(2) )));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,inflate,(void))

void Rectangle_obj::inflatePoint( ::nme::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_94_inflatePoint)
HXDLIN(  94)		this->inflate(point->x,point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,inflatePoint,(void))

 ::nme::geom::Rectangle Rectangle_obj::intersection( ::nme::geom::Rectangle toIntersect){
            	HX_GC_STACKFRAME(&_hx_pos_92125290bfba0bc1_98_intersection)
HXLINE(  99)		Float x0;
HXDLIN(  99)		if ((this->x < toIntersect->x)) {
HXLINE(  99)			x0 = toIntersect->x;
            		}
            		else {
HXLINE(  99)			x0 = this->x;
            		}
HXLINE( 100)		Float x1;
HXDLIN( 100)		Float x11 = this->get_right();
HXDLIN( 100)		if ((x11 > toIntersect->get_right())) {
HXLINE( 100)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 100)			x1 = this->get_right();
            		}
HXLINE( 101)		if ((x1 <= x0)) {
HXLINE( 102)			return  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 104)		Float y0;
HXDLIN( 104)		if ((this->y < toIntersect->y)) {
HXLINE( 104)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 104)			y0 = this->y;
            		}
HXLINE( 105)		Float y1;
HXDLIN( 105)		Float y11 = this->get_bottom();
HXDLIN( 105)		if ((y11 > toIntersect->get_bottom())) {
HXLINE( 105)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 105)			y1 = this->get_bottom();
            		}
HXLINE( 106)		if ((y1 <= y0)) {
HXLINE( 107)			return  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE( 109)		return  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,x0,y0,(x1 - x0),(y1 - y0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersection,return )

bool Rectangle_obj::intersects( ::nme::geom::Rectangle toIntersect){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_113_intersects)
HXLINE( 114)		Float x0;
HXDLIN( 114)		if ((this->x < toIntersect->x)) {
HXLINE( 114)			x0 = toIntersect->x;
            		}
            		else {
HXLINE( 114)			x0 = this->x;
            		}
HXLINE( 115)		Float x1;
HXDLIN( 115)		Float x11 = this->get_right();
HXDLIN( 115)		if ((x11 > toIntersect->get_right())) {
HXLINE( 115)			x1 = toIntersect->get_right();
            		}
            		else {
HXLINE( 115)			x1 = this->get_right();
            		}
HXLINE( 116)		if ((x1 <= x0)) {
HXLINE( 117)			return false;
            		}
HXLINE( 119)		Float y0;
HXDLIN( 119)		if ((this->y < toIntersect->y)) {
HXLINE( 119)			y0 = toIntersect->y;
            		}
            		else {
HXLINE( 119)			y0 = this->y;
            		}
HXLINE( 120)		Float y1;
HXDLIN( 120)		Float y11 = this->get_bottom();
HXDLIN( 120)		if ((y11 > toIntersect->get_bottom())) {
HXLINE( 120)			y1 = toIntersect->get_bottom();
            		}
            		else {
HXLINE( 120)			y1 = this->get_bottom();
            		}
HXLINE( 121)		return (y1 > y0);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,intersects,return )

bool Rectangle_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_126_isEmpty)
HXDLIN( 126)		if ((this->width == 0)) {
HXDLIN( 126)			return (this->height == 0);
            		}
            		else {
HXDLIN( 126)			return false;
            		}
HXDLIN( 126)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,isEmpty,return )

void Rectangle_obj::offset(Float dx,Float dy){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_130_offset)
HXLINE( 131)		 ::nme::geom::Rectangle _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 131)		_hx_tmp->x = (_hx_tmp->x + dx);
HXLINE( 132)		 ::nme::geom::Rectangle _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 132)		_hx_tmp1->y = (_hx_tmp1->y + dy);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Rectangle_obj,offset,(void))

void Rectangle_obj::offsetPoint( ::nme::geom::Point point){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_136_offsetPoint)
HXLINE( 137)		 ::nme::geom::Rectangle _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 137)		_hx_tmp->x = (_hx_tmp->x + point->x);
HXLINE( 138)		 ::nme::geom::Rectangle _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 138)		_hx_tmp1->y = (_hx_tmp1->y + point->y);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,offsetPoint,(void))

void Rectangle_obj::setEmpty(){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_143_setEmpty)
HXDLIN( 143)		this->x = (this->y = (this->width = (this->height = ( (Float)(0) ))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,setEmpty,(void))

 ::nme::geom::Rectangle Rectangle_obj::transform( ::nme::geom::Matrix m){
            	HX_GC_STACKFRAME(&_hx_pos_92125290bfba0bc1_147_transform)
HXLINE( 148)		Float tx0 = ((m->a * this->x) + (m->c * this->y));
HXLINE( 149)		Float tx1 = tx0;
HXLINE( 150)		Float ty0 = ((m->b * this->x) + (m->d * this->y));
HXLINE( 151)		Float ty1 = tx0;
HXLINE( 153)		Float tx = ((m->a * (this->x + this->width)) + (m->c * this->y));
HXLINE( 154)		Float ty = ((m->b * (this->x + this->width)) + (m->d * this->y));
HXLINE( 155)		if ((tx < tx0)) {
HXLINE( 155)			tx0 = tx;
            		}
HXLINE( 156)		if ((ty < ty0)) {
HXLINE( 156)			ty0 = ty;
            		}
HXLINE( 157)		if ((tx > tx1)) {
HXLINE( 157)			tx1 = tx;
            		}
HXLINE( 158)		if ((ty > ty1)) {
HXLINE( 158)			ty1 = ty;
            		}
HXLINE( 160)		tx = ((m->a * (this->x + this->width)) + (m->c * (this->y + this->height)));
HXLINE( 161)		ty = ((m->b * (this->x + this->width)) + (m->d * (this->y + this->height)));
HXLINE( 162)		if ((tx < tx0)) {
HXLINE( 162)			tx0 = tx;
            		}
HXLINE( 163)		if ((ty < ty0)) {
HXLINE( 163)			ty0 = ty;
            		}
HXLINE( 164)		if ((tx > tx1)) {
HXLINE( 164)			tx1 = tx;
            		}
HXLINE( 165)		if ((ty > ty1)) {
HXLINE( 165)			ty1 = ty;
            		}
HXLINE( 167)		tx = ((m->a * this->x) + (m->c * (this->y + this->height)));
HXLINE( 168)		ty = ((m->b * this->x) + (m->d * (this->y + this->height)));
HXLINE( 169)		if ((tx < tx0)) {
HXLINE( 169)			tx0 = tx;
            		}
HXLINE( 170)		if ((ty < ty0)) {
HXLINE( 170)			ty0 = ty;
            		}
HXLINE( 171)		if ((tx > tx1)) {
HXLINE( 171)			tx1 = tx;
            		}
HXLINE( 172)		if ((ty > ty1)) {
HXLINE( 172)			ty1 = ty;
            		}
HXLINE( 174)		return  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,(tx0 + m->tx),(ty0 + m->ty),(tx1 - tx0),(ty1 - ty0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,transform,return )

 ::nme::geom::Rectangle Rectangle_obj::_hx_union( ::nme::geom::Rectangle toUnion){
            	HX_GC_STACKFRAME(&_hx_pos_92125290bfba0bc1_178_union)
HXLINE( 179)		Float x0;
HXDLIN( 179)		if ((this->x > toUnion->x)) {
HXLINE( 179)			x0 = toUnion->x;
            		}
            		else {
HXLINE( 179)			x0 = this->x;
            		}
HXLINE( 180)		Float x1;
HXDLIN( 180)		Float x11 = this->get_right();
HXDLIN( 180)		if ((x11 < toUnion->get_right())) {
HXLINE( 180)			x1 = toUnion->get_right();
            		}
            		else {
HXLINE( 180)			x1 = this->get_right();
            		}
HXLINE( 181)		Float y0;
HXDLIN( 181)		if ((this->y > toUnion->y)) {
HXLINE( 181)			y0 = toUnion->y;
            		}
            		else {
HXLINE( 181)			y0 = this->y;
            		}
HXLINE( 182)		Float y1;
HXDLIN( 182)		Float y11 = this->get_bottom();
HXDLIN( 182)		if ((y11 < toUnion->get_bottom())) {
HXLINE( 182)			y1 = toUnion->get_bottom();
            		}
            		else {
HXLINE( 182)			y1 = this->get_bottom();
            		}
HXLINE( 183)		return  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,x0,y0,(x1 - x0),(y1 - y0));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,_hx_union,return )

void Rectangle_obj::copyFrom( ::nme::geom::Rectangle sourceRect){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_187_copyFrom)
HXLINE( 188)		this->x = sourceRect->x;
HXLINE( 189)		this->y = sourceRect->y;
HXLINE( 190)		this->width = sourceRect->width;
HXLINE( 191)		this->height = sourceRect->height;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,copyFrom,(void))

Float Rectangle_obj::get_bottom(){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_195_get_bottom)
HXDLIN( 195)		return (this->y + this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottom,return )

Float Rectangle_obj::set_bottom(Float b){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_196_set_bottom)
HXDLIN( 196)		this->height = (b - this->y);
HXDLIN( 196)		return b;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottom,return )

 ::nme::geom::Point Rectangle_obj::get_bottomRight(){
            	HX_GC_STACKFRAME(&_hx_pos_92125290bfba0bc1_197_get_bottomRight)
HXDLIN( 197)		return  ::nme::geom::Point_obj::__alloc( HX_CTX ,(this->x + this->width),(this->y + this->height));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_bottomRight,return )

 ::nme::geom::Point Rectangle_obj::set_bottomRight( ::nme::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_198_set_bottomRight)
HXDLIN( 198)		this->width = (p->x - this->x);
HXDLIN( 198)		this->height = (p->y - this->y);
HXDLIN( 198)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_bottomRight,return )

Float Rectangle_obj::get_left(){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_199_get_left)
HXDLIN( 199)		return this->x;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_left,return )

Float Rectangle_obj::set_left(Float l){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_200_set_left)
HXDLIN( 200)		 ::nme::geom::Rectangle _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 200)		_hx_tmp->width = (_hx_tmp->width - (l - this->x));
HXDLIN( 200)		this->x = l;
HXDLIN( 200)		return l;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_left,return )

Float Rectangle_obj::get_right(){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_201_get_right)
HXDLIN( 201)		return (this->x + this->width);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_right,return )

Float Rectangle_obj::set_right(Float r){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_202_set_right)
HXDLIN( 202)		this->width = (r - this->x);
HXDLIN( 202)		return r;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_right,return )

 ::nme::geom::Point Rectangle_obj::get_size(){
            	HX_GC_STACKFRAME(&_hx_pos_92125290bfba0bc1_203_get_size)
HXDLIN( 203)		return  ::nme::geom::Point_obj::__alloc( HX_CTX ,this->width,this->height);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_size,return )

 ::nme::geom::Point Rectangle_obj::set_size( ::nme::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_204_set_size)
HXDLIN( 204)		this->width = p->x;
HXDLIN( 204)		this->height = p->y;
HXDLIN( 204)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_size,return )

Float Rectangle_obj::get_top(){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_205_get_top)
HXDLIN( 205)		return this->y;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_top,return )

Float Rectangle_obj::set_top(Float t){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_206_set_top)
HXDLIN( 206)		 ::nme::geom::Rectangle _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 206)		_hx_tmp->height = (_hx_tmp->height - (t - this->y));
HXDLIN( 206)		this->y = t;
HXDLIN( 206)		return t;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_top,return )

 ::nme::geom::Point Rectangle_obj::get_topLeft(){
            	HX_GC_STACKFRAME(&_hx_pos_92125290bfba0bc1_207_get_topLeft)
HXDLIN( 207)		return  ::nme::geom::Point_obj::__alloc( HX_CTX ,this->x,this->y);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_topLeft,return )

 ::nme::geom::Point Rectangle_obj::set_topLeft( ::nme::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_208_set_topLeft)
HXDLIN( 208)		this->x = p->x;
HXDLIN( 208)		this->y = p->y;
HXDLIN( 208)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_topLeft,return )

 ::nme::geom::Point Rectangle_obj::get_centre(){
            	HX_GC_STACKFRAME(&_hx_pos_92125290bfba0bc1_209_get_centre)
HXDLIN( 209)		return  ::nme::geom::Point_obj::__alloc( HX_CTX ,(this->x + (this->width * ((Float)0.5))),(this->y + (this->height * ((Float)0.5))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Rectangle_obj,get_centre,return )

 ::nme::geom::Point Rectangle_obj::set_centre( ::nme::geom::Point p){
            	HX_STACKFRAME(&_hx_pos_92125290bfba0bc1_210_set_centre)
HXDLIN( 210)		this->x = (p->x - (this->width * ((Float)0.5)));
HXDLIN( 210)		this->y = (p->y - (this->height * ((Float)0.5)));
HXDLIN( 210)		return p->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Rectangle_obj,set_centre,return )


::hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__new( ::Dynamic inX, ::Dynamic inY, ::Dynamic inWidth, ::Dynamic inHeight) {
	::hx::ObjectPtr< Rectangle_obj > __this = new Rectangle_obj();
	__this->__construct(inX,inY,inWidth,inHeight);
	return __this;
}

::hx::ObjectPtr< Rectangle_obj > Rectangle_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic inX, ::Dynamic inY, ::Dynamic inWidth, ::Dynamic inHeight) {
	Rectangle_obj *__this = (Rectangle_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Rectangle_obj), false, "nme.geom.Rectangle"));
	*(void **)__this = Rectangle_obj::_hx_vtable;
	__this->__construct(inX,inY,inWidth,inHeight);
	return __this;
}

Rectangle_obj::Rectangle_obj()
{
}

::hx::Val Rectangle_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_top() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_left() ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_size() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_right() ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"setTo") ) { return ::hx::Val( setTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		if (HX_FIELD_EQ(inName,"union") ) { return ::hx::Val( _hx_union_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_bottom() ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"centre") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_centre() ); }
		if (HX_FIELD_EQ(inName,"equals") ) { return ::hx::Val( equals_dyn() ); }
		if (HX_FIELD_EQ(inName,"offset") ) { return ::hx::Val( offset_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_topLeft() ); }
		if (HX_FIELD_EQ(inName,"inflate") ) { return ::hx::Val( inflate_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return ::hx::Val( isEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_top") ) { return ::hx::Val( get_top_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_top") ) { return ::hx::Val( set_top_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return ::hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"setEmpty") ) { return ::hx::Val( setEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return ::hx::Val( copyFrom_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_left") ) { return ::hx::Val( get_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_left") ) { return ::hx::Val( set_left_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_size") ) { return ::hx::Val( get_size_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_size") ) { return ::hx::Val( set_size_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"transform") ) { return ::hx::Val( transform_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_right") ) { return ::hx::Val( get_right_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_right") ) { return ::hx::Val( set_right_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"intersects") ) { return ::hx::Val( intersects_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_bottom") ) { return ::hx::Val( get_bottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottom") ) { return ::hx::Val( set_bottom_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_centre") ) { return ::hx::Val( get_centre_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_centre") ) { return ::hx::Val( set_centre_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_bottomRight() ); }
		if (HX_FIELD_EQ(inName,"offsetPoint") ) { return ::hx::Val( offsetPoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_topLeft") ) { return ::hx::Val( get_topLeft_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_topLeft") ) { return ::hx::Val( set_topLeft_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"containsRect") ) { return ::hx::Val( containsRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"extendBounds") ) { return ::hx::Val( extendBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"inflatePoint") ) { return ::hx::Val( inflatePoint_dyn() ); }
		if (HX_FIELD_EQ(inName,"intersection") ) { return ::hx::Val( intersection_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"containsPoint") ) { return ::hx::Val( containsPoint_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_bottomRight") ) { return ::hx::Val( get_bottomRight_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_bottomRight") ) { return ::hx::Val( set_bottomRight_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Rectangle_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_top(inValue.Cast< Float >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_left(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"size") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_size(inValue.Cast<  ::nme::geom::Point >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_right(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bottom") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_bottom(inValue.Cast< Float >()) ); }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"centre") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_centre(inValue.Cast<  ::nme::geom::Point >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"topLeft") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_topLeft(inValue.Cast<  ::nme::geom::Point >()) ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bottomRight") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_bottomRight(inValue.Cast<  ::nme::geom::Point >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Rectangle_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bottom",eb,e6,78,65));
	outFields->push(HX_("bottomRight",f1,a0,f4,4e));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("right",dc,0b,64,e9));
	outFields->push(HX_("size",c1,a0,53,4c));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("topLeft",3c,09,c1,e8));
	outFields->push(HX_("centre",1b,31,db,05));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Rectangle_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Rectangle_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsFloat,(int)offsetof(Rectangle_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsFloat,(int)offsetof(Rectangle_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Rectangle_obj,y),HX_("y",79,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Rectangle_obj_sStaticStorageInfo = 0;
#endif

static ::String Rectangle_obj_sMemberFields[] = {
	HX_("height",e7,07,4c,02),
	HX_("width",06,b6,62,ca),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("toString",ac,d0,6e,38),
	HX_("setTo",bd,91,2f,7a),
	HX_("clone",5d,13,63,48),
	HX_("contains",1f,5a,7b,2c),
	HX_("containsPoint",b1,b9,eb,92),
	HX_("containsRect",e3,ce,1c,a6),
	HX_("equals",3f,ee,f2,bf),
	HX_("extendBounds",ef,ab,86,20),
	HX_("inflate",87,9c,1b,0c),
	HX_("inflatePoint",49,be,39,32),
	HX_("intersection",49,a2,61,88),
	HX_("intersects",b4,c2,eb,e3),
	HX_("isEmpty",43,de,5f,0c),
	HX_("offset",93,97,3f,60),
	HX_("offsetPoint",bd,37,10,5f),
	HX_("setEmpty",8b,a3,0e,7e),
	HX_("transform",6c,2d,93,45),
	HX_("union",0f,65,e7,a6),
	HX_("copyFrom",bf,0b,61,c8),
	HX_("get_bottom",b4,56,00,56),
	HX_("set_bottom",28,f5,7d,59),
	HX_("get_bottomRight",88,58,d6,0f),
	HX_("set_bottomRight",94,d5,a1,0b),
	HX_("get_left",90,c3,6a,c7),
	HX_("set_left",04,1d,c8,75),
	HX_("get_right",33,68,0d,2d),
	HX_("set_right",3f,54,5e,10),
	HX_("get_size",4a,5c,0e,cc),
	HX_("set_size",be,b5,6b,7a),
	HX_("get_top",2c,2f,cd,26),
	HX_("set_top",38,c0,ce,19),
	HX_("get_topLeft",53,69,bb,6e),
	HX_("set_topLeft",5f,70,28,79),
	HX_("get_centre",e4,a0,62,f6),
	HX_("set_centre",58,3f,e0,f9),
	::String(null()) };

::hx::Class Rectangle_obj::__mClass;

void Rectangle_obj::__register()
{
	Rectangle_obj _hx_dummy;
	Rectangle_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.geom.Rectangle",05,7c,0b,86);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Rectangle_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Rectangle_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Rectangle_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Rectangle_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace geom
