// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_format_png_Chunk
#include <format/png/Chunk.h>
#endif
#ifndef INCLUDED_format_png_Color
#include <format/png/Color.h>
#endif
#ifndef INCLUDED_format_png_Reader
#include <format/png/Reader.h>
#endif
#ifndef INCLUDED_format_png_Tools
#include <format/png/Tools.h>
#endif
#ifndef INCLUDED_format_png_Writer
#include <format/png/Writer.h>
#endif
#ifndef INCLUDED_format_tools_Deflate
#include <format/tools/Deflate.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ByteAccessor
#include <pi_xy/ByteAccessor.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitQuad
#include <pi_xy/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_QuadPoints_
#include <pi_xy/algo/QuadPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_imageAbstracts__PNG_PNG_Impl_
#include <pi_xy/imageAbstracts/_PNG/PNG_Impl_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pi_xy_transformation__ScaleImage_ScaleImage_Fields_
#include <pi_xy/transformation/_ScaleImage/ScaleImage_Fields_.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileInput
#include <sys/io/FileInput.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_217ef3017f0a9705_9__new,"pi_xy.imageAbstracts._PNG.PNG_Impl_","_new",0x7ac2c9b9,"pi_xy.imageAbstracts._PNG.PNG_Impl_._new","pi_xy/imageAbstracts/PNG.hx",9,0x7e55bf06)
HX_LOCAL_STACK_FRAME(_hx_pos_217ef3017f0a9705_16_to,"pi_xy.imageAbstracts._PNG.PNG_Impl_","to",0xeba9d3d3,"pi_xy.imageAbstracts._PNG.PNG_Impl_.to","pi_xy/imageAbstracts/PNG.hx",16,0x7e55bf06)
HX_LOCAL_STACK_FRAME(_hx_pos_217ef3017f0a9705_24_from,"pi_xy.imageAbstracts._PNG.PNG_Impl_","from",0x7f6659c2,"pi_xy.imageAbstracts._PNG.PNG_Impl_.from","pi_xy/imageAbstracts/PNG.hx",24,0x7e55bf06)
namespace pi_xy{
namespace imageAbstracts{
namespace _PNG{

void PNG_Impl__obj::__construct() { }

Dynamic PNG_Impl__obj::__CreateEmpty() { return new PNG_Impl__obj; }

void *PNG_Impl__obj::_hx_vtable = 0;

Dynamic PNG_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PNG_Impl__obj > _hx_result = new PNG_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PNG_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0652bfa6;
}

 ::pi_xy::ImageStruct PNG_Impl__obj::_new(int w,int h){
            	HX_GC_STACKFRAME(&_hx_pos_217ef3017f0a9705_9__new)
HXLINE(  11)		 ::Dynamic imageType = null();
HXDLIN(  11)		 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  11)		if (::hx::IsNull( imageType )) {
HXLINE(  11)			imageType = ::pi_xy::ImageStruct_obj::defaultType;
            		}
HXDLIN(  11)		::Dynamic this2;
HXDLIN(  11)		switch((int)(( (int)(imageType) ))){
            			case (int)0: {
HXLINE(  11)				 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  11)				 ::iterMagic::BytesImg b = byt;
HXDLIN(  11)				{
HXLINE(  11)					b->width = w;
HXDLIN(  11)					b->height = h;
HXDLIN(  11)					b->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  11)					b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  11)					{
HXLINE(  11)						int len = b->length;
HXDLIN(  11)						int w1 = 0;
HXDLIN(  11)						{
HXLINE(  11)							int _g = 0;
HXDLIN(  11)							int _g1 = b->height;
HXDLIN(  11)							while((_g < _g1)){
HXLINE(  11)								_g = (_g + 1);
HXDLIN(  11)								int y = (_g - 1);
HXDLIN(  11)								{
HXLINE(  11)									int _g2 = 0;
HXDLIN(  11)									int _g3 = b->width;
HXDLIN(  11)									while((_g2 < _g3)){
HXLINE(  11)										_g2 = (_g2 + 1);
HXDLIN(  11)										int x = (_g2 - 1);
HXDLIN(  11)										{
HXLINE(  11)											w1 = (w1 + 1);
HXDLIN(  11)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  11)										{
HXLINE(  11)											w1 = (w1 + 1);
HXDLIN(  11)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  11)										{
HXLINE(  11)											w1 = (w1 + 1);
HXDLIN(  11)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  11)										{
HXLINE(  11)											w1 = (w1 + 1);
HXDLIN(  11)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  11)				this2 = b;
            			}
            			break;
            			case (int)1: {
HXLINE(  11)				 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  11)				 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  11)				{
HXLINE(  11)					a->width = w;
HXDLIN(  11)					a->height = h;
HXDLIN(  11)					a->data = ::Array_obj< int >::__new(0);
HXDLIN(  11)					a->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  11)					{
HXLINE(  11)						int _g4 = 0;
HXDLIN(  11)						int _g5 = a->length;
HXDLIN(  11)						while((_g4 < _g5)){
HXLINE(  11)							_g4 = (_g4 + 1);
HXDLIN(  11)							int i = (_g4 - 1);
HXDLIN(  11)							a->data[i] = 0;
            						}
            					}
            				}
HXDLIN(  11)				this2 = a;
            			}
            			break;
            			case (int)2: {
HXLINE(  11)				 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  11)				 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  11)				{
HXLINE(  11)					b1->width = w;
HXDLIN(  11)					b1->height = h;
HXDLIN(  11)					b1->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  11)					int size = (b1->length * 4);
HXDLIN(  11)					b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  11)					{
HXLINE(  11)						int _g6 = 0;
HXDLIN(  11)						int _g7 = b1->length;
HXDLIN(  11)						while((_g6 < _g7)){
HXLINE(  11)							_g6 = (_g6 + 1);
HXDLIN(  11)							int i1 = (_g6 - 1);
HXDLIN(  11)							{
HXLINE(  11)								 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN(  11)								bool this4;
HXDLIN(  11)								if ((i1 >= 0)) {
HXLINE(  11)									this4 = (i1 < (this3->byteLength >> 2));
            								}
            								else {
HXLINE(  11)									this4 = false;
            								}
HXDLIN(  11)								if (this4) {
HXLINE(  11)									 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN(  11)									int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN(  11)									_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  11)									_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  11)									_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  11)									_this->b[(pos + 3)] = ( (unsigned char)(0) );
            								}
            							}
            						}
            					}
            				}
HXDLIN(  11)				this2 = b1;
            			}
            			break;
            			case (int)3: {
HXLINE(  11)				 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  11)				 ::iterMagic::VecIntImg v = vec;
HXDLIN(  11)				{
HXLINE(  11)					v->width = w;
HXDLIN(  11)					v->height = h;
HXDLIN(  11)					v->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  11)					v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  11)					{
HXLINE(  11)						int _g8 = 0;
HXDLIN(  11)						int _g9 = v->length;
HXDLIN(  11)						while((_g8 < _g9)){
HXLINE(  11)							_g8 = (_g8 + 1);
HXDLIN(  11)							int i2 = (_g8 - 1);
HXDLIN(  11)							v->data->__unsafe_set(i2,0);
            						}
            					}
            				}
HXDLIN(  11)				this2 = v;
            			}
            			break;
            			case (int)4: {
HXLINE(  11)				 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  11)				 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  11)				{
HXLINE(  11)					b2->width = w;
HXDLIN(  11)					b2->height = h;
HXDLIN(  11)					b2->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  11)					b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  11)					{
HXLINE(  11)						int len1 = b2->length;
HXDLIN(  11)						 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  11)						if (::hx::IsNull( d->head )) {
HXLINE(  11)							int _g10 = 0;
HXDLIN(  11)							int _g11 = len1;
HXDLIN(  11)							while((_g10 < _g11)){
HXLINE(  11)								_g10 = (_g10 + 1);
HXDLIN(  11)								int i3 = (_g10 - 1);
HXDLIN(  11)								d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            							}
            						}
            						else {
HXLINE(  11)							int _g12 = 0;
HXDLIN(  11)							int _g13 = len1;
HXDLIN(  11)							while((_g12 < _g13)){
HXLINE(  11)								_g12 = (_g12 + 1);
HXDLIN(  11)								int i4 = (_g12 - 1);
HXDLIN(  11)								{
HXLINE(  11)									 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  11)									 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  11)									{
HXLINE(  11)										int _g14 = 0;
HXDLIN(  11)										int _g15 = i4;
HXDLIN(  11)										while((_g14 < _g15)){
HXLINE(  11)											_g14 = (_g14 + 1);
HXDLIN(  11)											int i5 = (_g14 - 1);
HXDLIN(  11)											prev = l;
HXDLIN(  11)											l = l->next;
            										}
            									}
HXDLIN(  11)									if (::hx::IsNull( prev )) {
HXLINE(  11)										b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  11)										l = null();
            									}
            									else {
HXLINE(  11)										prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  11)										l = null();
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  11)				this2 = b2;
            			}
            			break;
            		}
HXDLIN(  11)		this1->image = this2;
HXDLIN(  11)		this1->width = w;
HXDLIN(  11)		this1->height = h;
HXDLIN(  11)		this1->imageType = ( (int)(imageType) );
HXLINE(   9)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PNG_Impl__obj,_new,return )

 ::pi_xy::ImageStruct PNG_Impl__obj::to( ::pi_xy::ImageStruct this1,::String name){
            	HX_GC_STACKFRAME(&_hx_pos_217ef3017f0a9705_16_to)
HXLINE(  17)		 ::pi_xy::ImageStruct here = this1;
HXLINE(  18)		{
HXLINE(  18)			::String name1 = name;
HXDLIN(  18)			int level = 9;
HXDLIN(  18)			if ((name1.substr(-4,1) == HX_(".",2e,00,00,00))) {
HXLINE(  18)				name1 = name1.substr(0,-4);
            			}
HXDLIN(  18)			int lh = here->height;
HXDLIN(  18)			int lw = here->width;
HXDLIN(  18)			int r = 0;
HXDLIN(  18)			 ::haxe::io::Bytes rgba = ::haxe::io::Bytes_obj::alloc((((lw * lh) * 4) + lh));
HXDLIN(  18)			int w = 0;
HXDLIN(  18)			{
HXLINE(  18)				int _g = 0;
HXDLIN(  18)				int _g1 = lh;
HXDLIN(  18)				while((_g < _g1)){
HXLINE(  18)					_g = (_g + 1);
HXDLIN(  18)					int y = (_g - 1);
HXDLIN(  18)					{
HXLINE(  18)						w = (w + 1);
HXDLIN(  18)						rgba->b[(w - 1)] = ( (unsigned char)(0) );
            					}
HXDLIN(  18)					{
HXLINE(  18)						int _g2 = 0;
HXDLIN(  18)						int _g3 = lw;
HXDLIN(  18)						while((_g2 < _g3)){
HXLINE(  18)							_g2 = (_g2 + 1);
HXDLIN(  18)							int x = (_g2 - 1);
HXDLIN(  18)							::Dynamic this2 = here->image;
HXDLIN(  18)							int index;
HXDLIN(  18)							if (here->useVirtualPos) {
HXLINE(  18)								index = ::Std_obj::_hx_int(((((( (Float)(y) ) - here->virtualY) * ( (Float)(here->width) )) + x) - here->virtualX));
            							}
            							else {
HXLINE(  18)								index = ::Std_obj::_hx_int(( (Float)(((y * here->width) + x)) ));
            							}
HXDLIN(  18)							int c = ::iterMagic::Iimg_obj::get(this2,index);
HXDLIN(  18)							int v;
HXDLIN(  18)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  18)								v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  18)								v = c;
            							}
HXDLIN(  18)							int col = v;
HXDLIN(  18)							int a = ((col >> 24) & 255);
HXDLIN(  18)							int row = ((col >> 16) & 255);
HXDLIN(  18)							int g = ((col >> 8) & 255);
HXDLIN(  18)							int b = (col & 255);
HXDLIN(  18)							{
HXLINE(  18)								w = (w + 1);
HXDLIN(  18)								rgba->b[(w - 1)] = ( (unsigned char)(r) );
            							}
HXDLIN(  18)							{
HXLINE(  18)								w = (w + 1);
HXDLIN(  18)								rgba->b[(w - 1)] = ( (unsigned char)(g) );
            							}
HXDLIN(  18)							{
HXLINE(  18)								w = (w + 1);
HXDLIN(  18)								rgba->b[(w - 1)] = ( (unsigned char)(b) );
            							}
HXDLIN(  18)							{
HXLINE(  18)								w = (w + 1);
HXDLIN(  18)								rgba->b[(w - 1)] = ( (unsigned char)(a) );
            							}
HXDLIN(  18)							row = (row + 4);
            						}
            					}
            				}
            			}
HXDLIN(  18)			 ::haxe::ds::List l =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXDLIN(  18)			l->add(::format::png::Chunk_obj::CHeader( ::Dynamic(::hx::Anon_obj::Create(5)
            				->setFixed(0,HX_("width",06,b6,62,ca),here->width)
            				->setFixed(1,HX_("interlaced",91,cb,78,d9),false)
            				->setFixed(2,HX_("colbits",46,9b,c7,e6),8)
            				->setFixed(3,HX_("height",e7,07,4c,02),here->height)
            				->setFixed(4,HX_("color",63,71,5c,4a),::format::png::Color_obj::ColTrue(true)))));
HXDLIN(  18)			l->add(::format::png::Chunk_obj::CData(::format::tools::Deflate_obj::run(rgba,level)));
HXDLIN(  18)			l->add(::format::png::Chunk_obj::CEnd_dyn());
HXDLIN(  18)			::haxe::Log_obj::trace(HX_("create writer",57,5f,86,cb),::hx::SourceInfo(HX_("src/pi_xy/formats/Format.hx",21,8e,05,9f),44,HX_("pi_xy.formats._Format.Format_Fields_",8f,bc,76,ff),HX_("toPNG",ee,f1,16,14)));
HXDLIN(  18)			::String dir = ::haxe::io::Path_obj::directory(::Sys_obj::programPath());
HXDLIN(  18)			 ::format::png::Writer writer =  ::format::png::Writer_obj::__alloc( HX_CTX ,::sys::io::File_obj::write(::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,dir)->init(1,(name1 + HX_(".png",3b,2d,bd,1e)))),true));
HXDLIN(  18)			writer->write(l);
HXDLIN(  18)			::haxe::Log_obj::trace(HX_("written",d7,5c,41,ab),::hx::SourceInfo(HX_("src/pi_xy/formats/Format.hx",21,8e,05,9f),51,HX_("pi_xy.formats._Format.Format_Fields_",8f,bc,76,ff),HX_("toPNG",ee,f1,16,14)));
            		}
HXLINE(  19)		return here;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PNG_Impl__obj,to,return )

 ::pi_xy::ImageStruct PNG_Impl__obj::from( ::pi_xy::ImageStruct this1,::String name){
            	HX_GC_STACKFRAME(&_hx_pos_217ef3017f0a9705_24_from)
HXLINE(  25)		 ::pi_xy::ImageStruct here = this1;
HXLINE(  26)		::String name1 = name;
HXDLIN(  26)		if ((name1.substr(-4,1) == HX_(".",2e,00,00,00))) {
HXLINE(  57)			name1 = name1.substr(0,-4);
            		}
HXLINE(  26)		 ::format::png::Reader reader =  ::format::png::Reader_obj::__alloc( HX_CTX ,::sys::io::File_obj::read(::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,::haxe::io::Path_obj::directory(::Sys_obj::programPath()))->init(1,(name1 + HX_(".png",3b,2d,bd,1e)))),true));
HXDLIN(  26)		 ::haxe::ds::List data = reader->read();
HXDLIN(  26)		 ::Dynamic header = ::format::png::Tools_obj::getHeader(data);
HXDLIN(  26)		 ::haxe::io::Bytes bytes = ::format::png::Tools_obj::extract32(data,null(),null());
HXDLIN(  26)		 ::haxe::io::Bytes bytesCameleon = bytes;
HXDLIN(  26)		int width = ( (int)(header->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) );
HXDLIN(  26)		int height = ( (int)(header->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) );
HXDLIN(  26)		 ::Dynamic imageType = null();
HXDLIN(  26)		 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  26)		if (::hx::IsNull( imageType )) {
HXLINE(  54)			imageType = ::pi_xy::ImageStruct_obj::defaultType;
            		}
HXLINE(  26)		::Dynamic _hx_tmp;
HXDLIN(  26)		switch((int)(( (int)(imageType) ))){
            			case (int)0: {
HXLINE(  26)				 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  26)				 ::iterMagic::BytesImg b = byt;
HXDLIN(  26)				{
HXLINE(  26)					b->width = width;
HXDLIN(  26)					b->height = height;
HXDLIN(  26)					b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  26)					b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  26)					{
HXLINE(  26)						int len = b->length;
HXDLIN(  26)						int w = 0;
HXDLIN(  26)						{
HXLINE(  26)							int _g = 0;
HXDLIN(  26)							int _g1 = b->height;
HXDLIN(  26)							while((_g < _g1)){
HXLINE(  26)								_g = (_g + 1);
HXDLIN(  26)								int y = (_g - 1);
HXDLIN(  26)								{
HXLINE(  26)									int _g2 = 0;
HXDLIN(  26)									int _g3 = b->width;
HXDLIN(  26)									while((_g2 < _g3)){
HXLINE(  26)										_g2 = (_g2 + 1);
HXDLIN(  26)										int x = (_g2 - 1);
HXDLIN(  26)										{
HXLINE(  26)											w = (w + 1);
HXDLIN(  26)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  26)										{
HXLINE(  26)											w = (w + 1);
HXDLIN(  26)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  26)										{
HXLINE(  26)											w = (w + 1);
HXDLIN(  26)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  26)										{
HXLINE(  26)											w = (w + 1);
HXDLIN(  26)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  26)				_hx_tmp = b;
            			}
            			break;
            			case (int)1: {
HXLINE(  26)				 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  26)				 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  26)				{
HXLINE(  26)					a->width = width;
HXDLIN(  26)					a->height = height;
HXDLIN(  26)					a->data = ::Array_obj< int >::__new(0);
HXDLIN(  26)					a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  26)					{
HXLINE(  26)						int _g4 = 0;
HXDLIN(  26)						int _g5 = a->length;
HXDLIN(  26)						while((_g4 < _g5)){
HXLINE(  26)							_g4 = (_g4 + 1);
HXDLIN(  26)							int i = (_g4 - 1);
HXDLIN(  26)							a->data[i] = 0;
            						}
            					}
            				}
HXDLIN(  26)				_hx_tmp = a;
            			}
            			break;
            			case (int)2: {
HXLINE(  26)				 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  26)				 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  26)				{
HXLINE(  26)					b1->width = width;
HXDLIN(  26)					b1->height = height;
HXDLIN(  26)					b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  26)					int size = (b1->length * 4);
HXDLIN(  26)					b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  26)					{
HXLINE(  26)						int _g6 = 0;
HXDLIN(  26)						int _g7 = b1->length;
HXDLIN(  26)						while((_g6 < _g7)){
HXLINE(  26)							_g6 = (_g6 + 1);
HXDLIN(  26)							int i1 = (_g6 - 1);
HXDLIN(  26)							{
HXLINE(  26)								 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN(  26)								bool _hx_tmp1;
HXDLIN(  26)								if ((i1 >= 0)) {
HXLINE(  26)									_hx_tmp1 = (i1 < (this3->byteLength >> 2));
            								}
            								else {
HXLINE(  26)									_hx_tmp1 = false;
            								}
HXDLIN(  26)								if (_hx_tmp1) {
HXLINE(  26)									 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN(  26)									int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN(  26)									_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  26)									_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  26)									_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  26)									_this->b[(pos + 3)] = ( (unsigned char)(0) );
            								}
            							}
            						}
            					}
            				}
HXDLIN(  26)				_hx_tmp = b1;
            			}
            			break;
            			case (int)3: {
HXLINE(  26)				 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  26)				 ::iterMagic::VecIntImg v = vec;
HXDLIN(  26)				{
HXLINE(  26)					v->width = width;
HXDLIN(  26)					v->height = height;
HXDLIN(  26)					v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  26)					v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  26)					{
HXLINE(  26)						int _g8 = 0;
HXDLIN(  26)						int _g9 = v->length;
HXDLIN(  26)						while((_g8 < _g9)){
HXLINE(  26)							_g8 = (_g8 + 1);
HXDLIN(  26)							int i2 = (_g8 - 1);
HXDLIN(  26)							v->data->__unsafe_set(i2,0);
            						}
            					}
            				}
HXDLIN(  26)				_hx_tmp = v;
            			}
            			break;
            			case (int)4: {
HXLINE(  26)				 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  26)				 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  26)				{
HXLINE(  26)					b2->width = width;
HXDLIN(  26)					b2->height = height;
HXDLIN(  26)					b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  26)					b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  26)					{
HXLINE(  26)						int len1 = b2->length;
HXDLIN(  26)						 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  26)						if (::hx::IsNull( d->head )) {
HXLINE(  26)							int _g10 = 0;
HXDLIN(  26)							int _g11 = len1;
HXDLIN(  26)							while((_g10 < _g11)){
HXLINE(  26)								_g10 = (_g10 + 1);
HXDLIN(  26)								int i3 = (_g10 - 1);
HXDLIN(  26)								d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            							}
            						}
            						else {
HXLINE(  26)							int _g12 = 0;
HXDLIN(  26)							int _g13 = len1;
HXDLIN(  26)							while((_g12 < _g13)){
HXLINE(  26)								_g12 = (_g12 + 1);
HXDLIN(  26)								int i4 = (_g12 - 1);
HXDLIN(  26)								{
HXLINE(  26)									 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  26)									 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  26)									{
HXLINE(  26)										int _g14 = 0;
HXDLIN(  26)										int _g15 = i4;
HXDLIN(  26)										while((_g14 < _g15)){
HXLINE(  26)											_g14 = (_g14 + 1);
HXDLIN(  26)											int i5 = (_g14 - 1);
HXLINE( 345)											prev = l;
HXLINE( 346)											l = l->next;
            										}
            									}
HXLINE(  26)									if (::hx::IsNull( prev )) {
HXLINE(  26)										b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  26)										l = null();
            									}
            									else {
HXLINE(  26)										prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  26)										l = null();
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  26)				_hx_tmp = b2;
            			}
            			break;
            		}
HXDLIN(  26)		this2->image = _hx_tmp;
HXDLIN(  26)		this2->width = width;
HXDLIN(  26)		this2->height = height;
HXDLIN(  26)		this2->imageType = ( (int)(imageType) );
HXDLIN(  26)		 ::pi_xy::ImageStruct pixelImage = this2;
HXDLIN(  26)		pixelImage->transparent = true;
HXDLIN(  26)		{
HXLINE(  26)			int p = 0;
HXDLIN(  26)			{
HXLINE(  26)				int _g16 = 0;
HXDLIN(  26)				int _g17 = (bytesCameleon->length >> 2);
HXDLIN(  26)				while((_g16 < _g17)){
HXLINE(  26)					_g16 = (_g16 + 1);
HXDLIN(  26)					int i6 = (_g16 - 1);
HXDLIN(  26)					int b3 = ( (int)(bytesCameleon->b->__get(p)) );
HXDLIN(  26)					int g = ( (int)(bytesCameleon->b->__get((p + 1))) );
HXDLIN(  26)					int r = ( (int)(bytesCameleon->b->__get((p + 2))) );
HXDLIN(  26)					int a1 = ( (int)(bytesCameleon->b->__get((p + 3))) );
HXDLIN(  26)					{
HXLINE(  26)						p = (p + 1);
HXDLIN(  26)						bytesCameleon->b[(p - 1)] = ( (unsigned char)(r) );
            					}
HXDLIN(  26)					{
HXLINE(  26)						p = (p + 1);
HXDLIN(  26)						bytesCameleon->b[(p - 1)] = ( (unsigned char)(g) );
            					}
HXDLIN(  26)					{
HXLINE(  26)						p = (p + 1);
HXDLIN(  26)						bytesCameleon->b[(p - 1)] = ( (unsigned char)(b3) );
            					}
HXDLIN(  26)					{
HXLINE(  26)						p = (p + 1);
HXDLIN(  26)						bytesCameleon->b[(p - 1)] = ( (unsigned char)(a1) );
            					}
            				}
            			}
            		}
HXDLIN(  26)		{
HXLINE(  26)			int width1 = pixelImage->width;
HXDLIN(  26)			int height1 = pixelImage->height;
HXDLIN(  26)			 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  26)			 ::iterMagic::BytesImg b4 = byt1;
HXDLIN(  26)			{
HXLINE(  26)				b4->width = width1;
HXDLIN(  26)				b4->height = height1;
HXDLIN(  26)				b4->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  26)				b4->data = ::haxe::io::Bytes_obj::alloc((b4->length * 4));
HXDLIN(  26)				{
HXLINE(  26)					int len2 = b4->length;
HXDLIN(  26)					int w1 = 0;
HXDLIN(  26)					{
HXLINE(  26)						int _g18 = 0;
HXDLIN(  26)						int _g19 = b4->height;
HXDLIN(  26)						while((_g18 < _g19)){
HXLINE(  26)							_g18 = (_g18 + 1);
HXDLIN(  26)							int y1 = (_g18 - 1);
HXDLIN(  26)							{
HXLINE(  26)								int _g20 = 0;
HXDLIN(  26)								int _g21 = b4->width;
HXDLIN(  26)								while((_g20 < _g21)){
HXLINE(  26)									_g20 = (_g20 + 1);
HXDLIN(  26)									int x1 = (_g20 - 1);
HXDLIN(  26)									{
HXLINE(  26)										w1 = (w1 + 1);
HXDLIN(  26)										b4->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            									}
HXDLIN(  26)									{
HXLINE(  26)										w1 = (w1 + 1);
HXDLIN(  26)										b4->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            									}
HXDLIN(  26)									{
HXLINE(  26)										w1 = (w1 + 1);
HXDLIN(  26)										b4->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            									}
HXDLIN(  26)									{
HXLINE(  26)										w1 = (w1 + 1);
HXDLIN(  26)										b4->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  26)			 ::iterMagic::BytesImg imageBytes = b4;
HXDLIN(  26)			::Dynamic accessorBytes = imageBytes;
HXDLIN(  26)			accessorBytes->__SetField(HX_("data",2a,56,63,42),bytesCameleon,::hx::paccDynamic);
HXDLIN(  26)			{
HXLINE(  26)				int _g22 = 0;
HXDLIN(  26)				int _g23 = imageBytes->length;
HXDLIN(  26)				while((_g22 < _g23)){
HXLINE(  26)					_g22 = (_g22 + 1);
HXDLIN(  26)					int i7 = (_g22 - 1);
HXDLIN(  26)					::haxe::Log_obj::trace(i7,::hx::SourceInfo(HX_("src/pi_xy/Pixelimage.hx",36,00,3a,6f),488,HX_("pi_xy._Pixelimage.Pixelimage_Impl_",f6,5e,97,e3),HX_("fromBytes",a1,f2,20,72)));
HXDLIN(  26)					{
HXLINE(  26)						::Dynamic this4 = pixelImage->image;
HXDLIN(  26)						 ::haxe::io::Bytes _this1 = imageBytes->data;
HXDLIN(  26)						int pos1 = ::Std_obj::_hx_int(( (Float)((i7 * 4)) ));
HXDLIN(  26)						::iterMagic::Iimg_obj::set(this4,i7,(((( (int)(_this1->b->__get(pos1)) ) | (( (int)(_this1->b->__get((pos1 + 1))) ) << 8)) | (( (int)(_this1->b->__get((pos1 + 2))) ) << 16)) | (( (int)(_this1->b->__get((pos1 + 3))) ) << 24)));
            					}
            				}
            			}
            		}
HXDLIN(  26)		 ::pi_xy::ImageStruct pixelimage = pixelImage;
HXLINE(  27)		 ::pi_xy::ImageStruct here1 = here;
HXDLIN(  27)		 ::pi_xy::ImageStruct resize;
HXDLIN(  27)		bool resize1;
HXDLIN(  27)		if ((pixelimage->width == here1->width)) {
HXLINE(  27)			resize1 = (pixelimage->height != here1->height);
            		}
            		else {
HXLINE(  27)			resize1 = true;
            		}
HXDLIN(  27)		if (resize1) {
HXLINE(  27)			Float sx = (( (Float)(here1->width) ) / ( (Float)(pixelimage->width) ));
HXDLIN(  27)			Float sy = (( (Float)(here1->height) ) / ( (Float)(pixelimage->height) ));
HXDLIN(  27)			bool transparent = false;
HXDLIN(  27)			bool includeMask = false;
HXDLIN(  27)			 ::pi_xy::ImageStruct thisImage = pixelimage;
HXDLIN(  27)			int scaleW = ::Std_obj::_hx_int(sx);
HXDLIN(  27)			int scaleH = ::Std_obj::_hx_int(sy);
HXDLIN(  27)			bool ifScaleUpInt;
HXDLIN(  27)			bool ifScaleUpInt1;
HXDLIN(  27)			bool ifScaleUpInt2;
HXDLIN(  27)			if ((scaleW == sx)) {
HXLINE(  27)				ifScaleUpInt2 = (sx > ((Float)0.));
            			}
            			else {
HXLINE(  27)				ifScaleUpInt2 = false;
            			}
HXDLIN(  27)			if (ifScaleUpInt2) {
HXLINE(  27)				ifScaleUpInt1 = (scaleH == sy);
            			}
            			else {
HXLINE(  27)				ifScaleUpInt1 = false;
            			}
HXDLIN(  27)			if (ifScaleUpInt1) {
HXLINE(  27)				ifScaleUpInt = (sy > ((Float)0.));
            			}
            			else {
HXLINE(  27)				ifScaleUpInt = false;
            			}
HXDLIN(  27)			if (ifScaleUpInt) {
HXLINE(  27)				bool includeMask1 = false;
HXDLIN(  27)				 ::pi_xy::ImageStruct thisImage1 = thisImage;
HXDLIN(  27)				int p1 = 0;
HXDLIN(  27)				int xx = p1;
HXDLIN(  27)				int q = 0;
HXDLIN(  27)				int wNew = ::Std_obj::_hx_int(( (Float)((thisImage1->width * scaleW)) ));
HXDLIN(  27)				int hNew = ::Std_obj::_hx_int(( (Float)((thisImage1->height * scaleH)) ));
HXDLIN(  27)				 ::Dynamic imageType1 = null();
HXDLIN(  27)				 ::pi_xy::ImageStruct this5 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  27)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  27)				::Dynamic resize2;
HXDLIN(  27)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXLINE(  27)						 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  27)						 ::iterMagic::BytesImg b5 = byt2;
HXDLIN(  27)						{
HXLINE(  27)							b5->width = wNew;
HXDLIN(  27)							b5->height = hNew;
HXDLIN(  27)							b5->length = ::Std_obj::_hx_int(( (Float)((wNew * hNew)) ));
HXDLIN(  27)							b5->data = ::haxe::io::Bytes_obj::alloc((b5->length * 4));
HXDLIN(  27)							{
HXLINE(  27)								int len3 = b5->length;
HXDLIN(  27)								int w2 = 0;
HXDLIN(  27)								{
HXLINE(  27)									int _g24 = 0;
HXDLIN(  27)									int _g25 = b5->height;
HXDLIN(  27)									while((_g24 < _g25)){
HXLINE(  27)										_g24 = (_g24 + 1);
HXDLIN(  27)										int y2 = (_g24 - 1);
HXDLIN(  27)										{
HXLINE(  27)											int _g26 = 0;
HXDLIN(  27)											int _g27 = b5->width;
HXDLIN(  27)											while((_g26 < _g27)){
HXLINE(  27)												_g26 = (_g26 + 1);
HXDLIN(  27)												int x2 = (_g26 - 1);
HXDLIN(  27)												{
HXLINE(  27)													w2 = (w2 + 1);
HXDLIN(  27)													b5->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  27)												{
HXLINE(  27)													w2 = (w2 + 1);
HXDLIN(  27)													b5->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  27)												{
HXLINE(  27)													w2 = (w2 + 1);
HXDLIN(  27)													b5->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  27)												{
HXLINE(  27)													w2 = (w2 + 1);
HXDLIN(  27)													b5->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						resize2 = b5;
            					}
            					break;
            					case (int)1: {
HXLINE(  27)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)						 ::iterMagic::ArrIntImg a2 = arrI1;
HXDLIN(  27)						{
HXLINE(  27)							a2->width = wNew;
HXDLIN(  27)							a2->height = hNew;
HXDLIN(  27)							a2->data = ::Array_obj< int >::__new(0);
HXDLIN(  27)							a2->length = ::Std_obj::_hx_int(( (Float)((wNew * hNew)) ));
HXDLIN(  27)							{
HXLINE(  27)								int _g28 = 0;
HXDLIN(  27)								int _g29 = a2->length;
HXDLIN(  27)								while((_g28 < _g29)){
HXLINE(  27)									_g28 = (_g28 + 1);
HXDLIN(  27)									int i8 = (_g28 - 1);
HXDLIN(  27)									a2->data[i8] = 0;
            								}
            							}
            						}
HXDLIN(  27)						resize2 = a2;
            					}
            					break;
            					case (int)2: {
HXLINE(  27)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  27)						 ::iterMagic::U32ArrImg b6 = u32a1;
HXDLIN(  27)						{
HXLINE(  27)							b6->width = wNew;
HXDLIN(  27)							b6->height = hNew;
HXDLIN(  27)							b6->length = ::Std_obj::_hx_int(( (Float)((wNew * hNew)) ));
HXDLIN(  27)							int size1 = (b6->length * 4);
HXDLIN(  27)							b6->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  27)							{
HXLINE(  27)								int _g30 = 0;
HXDLIN(  27)								int _g31 = b6->length;
HXDLIN(  27)								while((_g30 < _g31)){
HXLINE(  27)									_g30 = (_g30 + 1);
HXDLIN(  27)									int i9 = (_g30 - 1);
HXDLIN(  27)									{
HXLINE(  27)										 ::haxe::io::ArrayBufferViewImpl this6 = b6->data;
HXDLIN(  27)										bool resize3;
HXDLIN(  27)										if ((i9 >= 0)) {
HXLINE(  27)											resize3 = (i9 < (this6->byteLength >> 2));
            										}
            										else {
HXLINE(  27)											resize3 = false;
            										}
HXDLIN(  27)										if (resize3) {
HXLINE(  27)											 ::haxe::io::Bytes _this2 = this6->bytes;
HXDLIN(  27)											int pos2 = ((i9 << 2) + this6->byteOffset);
HXDLIN(  27)											_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  27)											_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  27)											_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  27)											_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						resize2 = b6;
            					}
            					break;
            					case (int)3: {
HXLINE(  27)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)						 ::iterMagic::VecIntImg v1 = vec1;
HXDLIN(  27)						{
HXLINE(  27)							v1->width = wNew;
HXDLIN(  27)							v1->height = hNew;
HXDLIN(  27)							v1->length = ::Std_obj::_hx_int(( (Float)((wNew * hNew)) ));
HXDLIN(  27)							v1->data = ::Array_obj< int >::__new(v1->length);
HXDLIN(  27)							{
HXLINE(  27)								int _g32 = 0;
HXDLIN(  27)								int _g33 = v1->length;
HXDLIN(  27)								while((_g32 < _g33)){
HXLINE(  27)									_g32 = (_g32 + 1);
HXDLIN(  27)									int i10 = (_g32 - 1);
HXDLIN(  27)									v1->data->__unsafe_set(i10,0);
            								}
            							}
            						}
HXDLIN(  27)						resize2 = v1;
            					}
            					break;
            					case (int)4: {
HXLINE(  27)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)						 ::iterMagic::StackIntImg b7 = sInt1;
HXDLIN(  27)						{
HXLINE(  27)							b7->width = wNew;
HXDLIN(  27)							b7->height = hNew;
HXDLIN(  27)							b7->length = ::Std_obj::_hx_int(( (Float)((wNew * hNew)) ));
HXDLIN(  27)							b7->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  27)							{
HXLINE(  27)								int len4 = b7->length;
HXDLIN(  27)								 ::haxe::ds::GenericStack_Int d1 = b7->data;
HXDLIN(  27)								if (::hx::IsNull( d1->head )) {
HXLINE(  27)									int _g34 = 0;
HXDLIN(  27)									int _g35 = len4;
HXDLIN(  27)									while((_g34 < _g35)){
HXLINE(  27)										_g34 = (_g34 + 1);
HXDLIN(  27)										int i11 = (_g34 - 1);
HXDLIN(  27)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXLINE(  27)									int _g36 = 0;
HXDLIN(  27)									int _g37 = len4;
HXDLIN(  27)									while((_g36 < _g37)){
HXLINE(  27)										_g36 = (_g36 + 1);
HXDLIN(  27)										int i12 = (_g36 - 1);
HXDLIN(  27)										{
HXLINE(  27)											 ::haxe::ds::GenericCell_Int l1 = b7->data->head;
HXDLIN(  27)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  27)											{
HXLINE(  27)												int _g38 = 0;
HXDLIN(  27)												int _g39 = i12;
HXDLIN(  27)												while((_g38 < _g39)){
HXLINE(  27)													_g38 = (_g38 + 1);
HXDLIN(  27)													int i13 = (_g38 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE(  27)											if (::hx::IsNull( prev1 )) {
HXLINE(  27)												b7->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  27)												l1 = null();
            											}
            											else {
HXLINE(  27)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  27)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						resize2 = b7;
            					}
            					break;
            				}
HXDLIN(  27)				this5->image = resize2;
HXDLIN(  27)				this5->width = wNew;
HXDLIN(  27)				this5->height = hNew;
HXDLIN(  27)				this5->imageType = ( (int)(imageType1) );
HXDLIN(  27)				 ::pi_xy::ImageStruct nextImage = this5;
HXDLIN(  27)				int maxX = wNew;
HXDLIN(  27)				int maxY = hNew;
HXDLIN(  27)				do {
HXLINE(  27)					int x3 = ::Std_obj::_hx_int((( (Float)(p1) ) / ( (Float)(scaleW) )));
HXDLIN(  27)					int y3 = ::Std_obj::_hx_int((( (Float)(q) ) / ( (Float)(scaleH) )));
HXDLIN(  27)					::Dynamic this7 = thisImage1->image;
HXDLIN(  27)					int index;
HXDLIN(  27)					if (thisImage1->useVirtualPos) {
HXLINE(  27)						index = ::Std_obj::_hx_int(((((( (Float)(y3) ) - thisImage1->virtualY) * ( (Float)(thisImage1->width) )) + x3) - thisImage1->virtualX));
            					}
            					else {
HXLINE(  27)						index = ::Std_obj::_hx_int(( (Float)(((y3 * thisImage1->width) + x3)) ));
            					}
HXDLIN(  27)					int c = ::iterMagic::Iimg_obj::get(this7,index);
HXDLIN(  27)					int color;
HXDLIN(  27)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)						color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            					}
            					else {
HXLINE(  27)						color = c;
            					}
HXDLIN(  27)					{
HXLINE(  27)						p1 = (p1 + 1);
HXDLIN(  27)						int x4 = (p1 - 1);
HXDLIN(  27)						int c1 = color;
HXDLIN(  27)						bool resize4;
HXDLIN(  27)						if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  27)							resize4 = nextImage->transparent;
            						}
            						else {
HXLINE(  27)							resize4 = false;
            						}
HXDLIN(  27)						if (resize4) {
HXLINE(  27)							int location;
HXDLIN(  27)							if (nextImage->useVirtualPos) {
HXLINE(  27)								location = ::Std_obj::_hx_int(((((( (Float)(q) ) - nextImage->virtualY) * ( (Float)(nextImage->width) )) + x4) - nextImage->virtualX));
            							}
            							else {
HXLINE(  27)								location = ::Std_obj::_hx_int(( (Float)(((q * nextImage->width) + x4)) ));
            							}
HXDLIN(  27)							int this8 = ::iterMagic::Iimg_obj::get(nextImage->image,location);
HXDLIN(  27)							int this9;
HXDLIN(  27)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)								this9 = ((((((this8 >> 24) & 255) << 24) | ((this8 & 255) << 16)) | (((this8 >> 8) & 255) << 8)) | ((this8 >> 16) & 255));
            							}
            							else {
HXLINE(  27)								this9 = this8;
            							}
HXDLIN(  27)							Float a11;
HXDLIN(  27)							int this10 = ((this9 >> 24) & 255);
HXDLIN(  27)							if ((this10 == 0)) {
HXLINE(  27)								a11 = ((Float)0.);
            							}
            							else {
HXLINE(  27)								a11 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN(  27)							Float r1;
HXDLIN(  27)							int this11 = ((this9 >> 16) & 255);
HXDLIN(  27)							if ((this11 == 0)) {
HXLINE(  27)								r1 = ((Float)0.);
            							}
            							else {
HXLINE(  27)								r1 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN(  27)							Float g1;
HXDLIN(  27)							int this12 = ((this9 >> 8) & 255);
HXDLIN(  27)							if ((this12 == 0)) {
HXLINE(  27)								g1 = ((Float)0.);
            							}
            							else {
HXLINE(  27)								g1 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN(  27)							Float b11;
HXDLIN(  27)							int this13 = (this9 & 255);
HXDLIN(  27)							if ((this13 == 0)) {
HXLINE(  27)								b11 = ((Float)0.);
            							}
            							else {
HXLINE(  27)								b11 = (( (Float)(this13) ) / ( (Float)(255) ));
            							}
HXDLIN(  27)							Float a21;
HXDLIN(  27)							int this14 = ((color >> 24) & 255);
HXDLIN(  27)							if ((this14 == 0)) {
HXLINE(  27)								a21 = ((Float)0.);
            							}
            							else {
HXLINE(  27)								a21 = (( (Float)(this14) ) / ( (Float)(255) ));
            							}
HXDLIN(  27)							Float r2;
HXDLIN(  27)							int this15 = ((color >> 16) & 255);
HXDLIN(  27)							if ((this15 == 0)) {
HXLINE(  27)								r2 = ((Float)0.);
            							}
            							else {
HXLINE(  27)								r2 = (( (Float)(this15) ) / ( (Float)(255) ));
            							}
HXDLIN(  27)							Float g2;
HXDLIN(  27)							int this16 = ((color >> 8) & 255);
HXDLIN(  27)							if ((this16 == 0)) {
HXLINE(  27)								g2 = ((Float)0.);
            							}
            							else {
HXLINE(  27)								g2 = (( (Float)(this16) ) / ( (Float)(255) ));
            							}
HXDLIN(  27)							Float b21;
HXDLIN(  27)							int this17 = (color & 255);
HXDLIN(  27)							if ((this17 == 0)) {
HXLINE(  27)								b21 = ((Float)0.);
            							}
            							else {
HXLINE(  27)								b21 = (( (Float)(this17) ) / ( (Float)(255) ));
            							}
HXDLIN(  27)							Float a3 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  27)							int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a21))));
HXDLIN(  27)							int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a21))));
HXDLIN(  27)							int b8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a21))));
HXDLIN(  27)							int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a21)));
HXDLIN(  27)							int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b8);
HXDLIN(  27)							{
HXLINE(  27)								int resize5;
HXDLIN(  27)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)									resize5 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE(  27)									resize5 = blended;
            								}
HXDLIN(  27)								::iterMagic::Iimg_obj::set(nextImage->image,location,resize5);
            							}
            						}
            						else {
HXLINE(  27)							::Dynamic this18 = nextImage->image;
HXDLIN(  27)							int index1;
HXDLIN(  27)							if (nextImage->useVirtualPos) {
HXLINE(  27)								index1 = ::Std_obj::_hx_int(((((( (Float)(q) ) - nextImage->virtualY) * ( (Float)(nextImage->width) )) + x4) - nextImage->virtualX));
            							}
            							else {
HXLINE(  27)								index1 = ::Std_obj::_hx_int(( (Float)(((q * nextImage->width) + x4)) ));
            							}
HXDLIN(  27)							int resize6;
HXDLIN(  27)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)								resize6 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            							}
            							else {
HXLINE(  27)								resize6 = c1;
            							}
HXDLIN(  27)							::iterMagic::Iimg_obj::set(this18,index1,resize6);
            						}
            					}
HXDLIN(  27)					if ((p1 > maxX)) {
HXLINE(  22)						p1 = xx;
HXLINE(  27)						q = (q + 1);
            					}
            				} while((q <= maxY));
;
HXDLIN(  27)				bool resize7;
HXDLIN(  27)				if (::hx::IsNotNull( thisImage1->mask )) {
HXLINE(  27)					resize7 = includeMask1;
            				}
            				else {
HXLINE(  27)					resize7 = false;
            				}
HXDLIN(  27)				if (resize7) {
HXLINE(  27)					 ::pi_xy::ImageStruct v2 = ::pi_xy::transformation::_ScaleImage::ScaleImage_Fields__obj::scaleUpInteger(thisImage1->mask,scaleW,scaleH,thisImage1->mask->transparent,includeMask1);
HXDLIN(  27)					nextImage->useMask = true;
HXDLIN(  27)					nextImage->mask = v2;
            				}
HXDLIN(  27)				resize = nextImage;
            			}
            			else {
HXLINE(  27)				Float w3 = (( (Float)(thisImage->width) ) * sx);
HXDLIN(  27)				Float h = (( (Float)(thisImage->height) ) * sy);
HXDLIN(  27)				int wid = ::Math_obj::ceil(w3);
HXDLIN(  27)				int hi = ::Math_obj::ceil(h);
HXDLIN(  27)				 ::Dynamic imageType2 = null();
HXDLIN(  27)				 ::pi_xy::ImageStruct this19 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  27)				if (::hx::IsNull( imageType2 )) {
HXLINE(  54)					imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  27)				::Dynamic resize8;
HXDLIN(  27)				switch((int)(( (int)(imageType2) ))){
            					case (int)0: {
HXLINE(  27)						 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  27)						 ::iterMagic::BytesImg b9 = byt3;
HXDLIN(  27)						{
HXLINE(  27)							b9->width = wid;
HXDLIN(  27)							b9->height = hi;
HXDLIN(  27)							b9->length = ::Std_obj::_hx_int(( (Float)((wid * hi)) ));
HXDLIN(  27)							b9->data = ::haxe::io::Bytes_obj::alloc((b9->length * 4));
HXDLIN(  27)							{
HXLINE(  27)								int len5 = b9->length;
HXDLIN(  27)								int w4 = 0;
HXDLIN(  27)								{
HXLINE(  27)									int _g40 = 0;
HXDLIN(  27)									int _g41 = b9->height;
HXDLIN(  27)									while((_g40 < _g41)){
HXLINE(  27)										_g40 = (_g40 + 1);
HXDLIN(  27)										int y4 = (_g40 - 1);
HXDLIN(  27)										{
HXLINE(  27)											int _g42 = 0;
HXDLIN(  27)											int _g43 = b9->width;
HXDLIN(  27)											while((_g42 < _g43)){
HXLINE(  27)												_g42 = (_g42 + 1);
HXDLIN(  27)												int x5 = (_g42 - 1);
HXDLIN(  27)												{
HXLINE(  27)													w4 = (w4 + 1);
HXDLIN(  27)													b9->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  27)												{
HXLINE(  27)													w4 = (w4 + 1);
HXDLIN(  27)													b9->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  27)												{
HXLINE(  27)													w4 = (w4 + 1);
HXDLIN(  27)													b9->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  27)												{
HXLINE(  27)													w4 = (w4 + 1);
HXDLIN(  27)													b9->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						resize8 = b9;
            					}
            					break;
            					case (int)1: {
HXLINE(  27)						 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)						 ::iterMagic::ArrIntImg a5 = arrI2;
HXDLIN(  27)						{
HXLINE(  27)							a5->width = wid;
HXDLIN(  27)							a5->height = hi;
HXDLIN(  27)							a5->data = ::Array_obj< int >::__new(0);
HXDLIN(  27)							a5->length = ::Std_obj::_hx_int(( (Float)((wid * hi)) ));
HXDLIN(  27)							{
HXLINE(  27)								int _g44 = 0;
HXDLIN(  27)								int _g45 = a5->length;
HXDLIN(  27)								while((_g44 < _g45)){
HXLINE(  27)									_g44 = (_g44 + 1);
HXDLIN(  27)									int i14 = (_g44 - 1);
HXDLIN(  27)									a5->data[i14] = 0;
            								}
            							}
            						}
HXDLIN(  27)						resize8 = a5;
            					}
            					break;
            					case (int)2: {
HXLINE(  27)						 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  27)						 ::iterMagic::U32ArrImg b10 = u32a2;
HXDLIN(  27)						{
HXLINE(  27)							b10->width = wid;
HXDLIN(  27)							b10->height = hi;
HXDLIN(  27)							b10->length = ::Std_obj::_hx_int(( (Float)((wid * hi)) ));
HXDLIN(  27)							int size2 = (b10->length * 4);
HXDLIN(  27)							b10->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  27)							{
HXLINE(  27)								int _g46 = 0;
HXDLIN(  27)								int _g47 = b10->length;
HXDLIN(  27)								while((_g46 < _g47)){
HXLINE(  27)									_g46 = (_g46 + 1);
HXDLIN(  27)									int i15 = (_g46 - 1);
HXDLIN(  27)									{
HXLINE(  27)										 ::haxe::io::ArrayBufferViewImpl this20 = b10->data;
HXDLIN(  27)										bool resize9;
HXDLIN(  27)										if ((i15 >= 0)) {
HXLINE(  27)											resize9 = (i15 < (this20->byteLength >> 2));
            										}
            										else {
HXLINE(  27)											resize9 = false;
            										}
HXDLIN(  27)										if (resize9) {
HXLINE(  27)											 ::haxe::io::Bytes _this3 = this20->bytes;
HXDLIN(  27)											int pos3 = ((i15 << 2) + this20->byteOffset);
HXDLIN(  27)											_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  27)											_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  27)											_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  27)											_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						resize8 = b10;
            					}
            					break;
            					case (int)3: {
HXLINE(  27)						 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)						 ::iterMagic::VecIntImg v3 = vec2;
HXDLIN(  27)						{
HXLINE(  27)							v3->width = wid;
HXDLIN(  27)							v3->height = hi;
HXDLIN(  27)							v3->length = ::Std_obj::_hx_int(( (Float)((wid * hi)) ));
HXDLIN(  27)							v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN(  27)							{
HXLINE(  27)								int _g48 = 0;
HXDLIN(  27)								int _g49 = v3->length;
HXDLIN(  27)								while((_g48 < _g49)){
HXLINE(  27)									_g48 = (_g48 + 1);
HXDLIN(  27)									int i16 = (_g48 - 1);
HXDLIN(  27)									v3->data->__unsafe_set(i16,0);
            								}
            							}
            						}
HXDLIN(  27)						resize8 = v3;
            					}
            					break;
            					case (int)4: {
HXLINE(  27)						 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)						 ::iterMagic::StackIntImg b12 = sInt2;
HXDLIN(  27)						{
HXLINE(  27)							b12->width = wid;
HXDLIN(  27)							b12->height = hi;
HXDLIN(  27)							b12->length = ::Std_obj::_hx_int(( (Float)((wid * hi)) ));
HXDLIN(  27)							b12->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  27)							{
HXLINE(  27)								int len6 = b12->length;
HXDLIN(  27)								 ::haxe::ds::GenericStack_Int d2 = b12->data;
HXDLIN(  27)								if (::hx::IsNull( d2->head )) {
HXLINE(  27)									int _g50 = 0;
HXDLIN(  27)									int _g51 = len6;
HXDLIN(  27)									while((_g50 < _g51)){
HXLINE(  27)										_g50 = (_g50 + 1);
HXDLIN(  27)										int i17 = (_g50 - 1);
HXDLIN(  27)										d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            									}
            								}
            								else {
HXLINE(  27)									int _g52 = 0;
HXDLIN(  27)									int _g53 = len6;
HXDLIN(  27)									while((_g52 < _g53)){
HXLINE(  27)										_g52 = (_g52 + 1);
HXDLIN(  27)										int i18 = (_g52 - 1);
HXDLIN(  27)										{
HXLINE(  27)											 ::haxe::ds::GenericCell_Int l2 = b12->data->head;
HXDLIN(  27)											 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  27)											{
HXLINE(  27)												int _g54 = 0;
HXDLIN(  27)												int _g55 = i18;
HXDLIN(  27)												while((_g54 < _g55)){
HXLINE(  27)													_g54 = (_g54 + 1);
HXDLIN(  27)													int i19 = (_g54 - 1);
HXLINE( 345)													prev2 = l2;
HXLINE( 346)													l2 = l2->next;
            												}
            											}
HXLINE(  27)											if (::hx::IsNull( prev2 )) {
HXLINE(  27)												b12->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  27)												l2 = null();
            											}
            											else {
HXLINE(  27)												prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  27)												l2 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						resize8 = b12;
            					}
            					break;
            				}
HXDLIN(  27)				this19->image = resize8;
HXDLIN(  27)				this19->width = wid;
HXDLIN(  27)				this19->height = hi;
HXDLIN(  27)				this19->imageType = ( (int)(imageType2) );
HXDLIN(  27)				 ::pi_xy::ImageStruct nextImage1 = this19;
HXDLIN(  27)				{
HXLINE(  27)					bool v4 = thisImage->transparent;
HXDLIN(  27)					nextImage1->transparent = v4;
            				}
HXDLIN(  27)				{
HXLINE(  27)					 ::pi_xy::ImageStruct this21 = nextImage1;
HXDLIN(  27)					Float win_x = ( (Float)(0) );
HXDLIN(  27)					Float win_y = ( (Float)(0) );
HXDLIN(  27)					Float win_width = ( (Float)(thisImage->width) );
HXDLIN(  27)					Float win_height = ( (Float)(thisImage->height) );
HXDLIN(  27)					{
HXLINE(  27)						Float bu = ((Float)1.);
HXDLIN(  27)						Float bv = ((Float)0.);
HXDLIN(  27)						Float cu = ((Float)1.);
HXDLIN(  27)						Float cv = ((Float)1.);
HXDLIN(  27)						Float du = ((Float)0.);
HXDLIN(  27)						Float dv = ((Float)1.);
HXDLIN(  27)						Float au = ((Float)0.);
HXDLIN(  27)						Float av = ((Float)0.);
HXDLIN(  27)						Float bu1 = bu;
HXDLIN(  27)						Float bv1 = bv;
HXDLIN(  27)						bool hasUndo = false;
HXDLIN(  27)						Float temp = au;
HXLINE( 422)						au = bu1;
HXLINE( 423)						bu1 = temp;
HXLINE( 424)						temp = av;
HXLINE( 425)						av = bv1;
HXLINE( 426)						bv1 = temp;
HXLINE(  27)						Float bcx = w3;
HXDLIN(  27)						Float bcy = (( (Float)(0) ) - h);
HXDLIN(  27)						Float acx = ( (Float)(0) );
HXDLIN(  27)						Float acy = (( (Float)(0) ) - h);
HXDLIN(  27)						Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  27)						Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  27)						Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  27)						Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  27)						 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  27)						if ((0 > w3)) {
HXLINE(  27)							int ii_min = ::Math_obj::floor(w3);
HXDLIN(  27)							int ii_max = ::Math_obj::ceil(( (Float)(0) ));
HXDLIN(  27)							xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            						}
            						else {
HXLINE(  27)							if ((w3 > 0)) {
HXLINE(  27)								int ii_min1 = ::Math_obj::ceil(( (Float)(0) ));
HXDLIN(  27)								int ii_max1 = ::Math_obj::ceil(w3);
HXDLIN(  27)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            							}
            							else {
HXLINE(  27)								int ii_min2 = ::Math_obj::floor(( (Float)(0) ));
HXDLIN(  27)								int ii_max2 = ::Math_obj::ceil(( (Float)(0) ));
HXDLIN(  27)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            							}
            						}
HXDLIN(  27)						 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  27)						if ((0 > h)) {
HXLINE(  27)							int min;
HXDLIN(  27)							if ((0 > h)) {
HXLINE(  27)								min = ::Math_obj::floor(h);
            							}
            							else {
HXLINE(  27)								min = ::Math_obj::ceil(( (Float)(0) ));
            							}
HXDLIN(  27)							int ii_min3 = min;
HXDLIN(  27)							int ii_max3 = ::Math_obj::ceil(( (Float)(0) ));
HXDLIN(  27)							yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            						}
            						else {
HXLINE(  27)							int ii_min4 = ::Math_obj::floor(( (Float)(0) ));
HXDLIN(  27)							int ii_max4 = ::Math_obj::ceil(h);
HXDLIN(  27)							yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            						}
HXDLIN(  27)						 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  27)						if (hasUndo) {
HXLINE(  27)							int width2 = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  27)							int height2 = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  27)							 ::Dynamic imageType3 = null();
HXDLIN(  27)							 ::pi_xy::ImageStruct this22 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  27)							if (::hx::IsNull( imageType3 )) {
HXLINE(  54)								imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  27)							::Dynamic undoImage1;
HXDLIN(  27)							switch((int)(( (int)(imageType3) ))){
            								case (int)0: {
HXLINE(  27)									 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::BytesImg b13 = byt4;
HXDLIN(  27)									{
HXLINE(  27)										b13->width = width2;
HXDLIN(  27)										b13->height = height2;
HXDLIN(  27)										b13->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  27)										b13->data = ::haxe::io::Bytes_obj::alloc((b13->length * 4));
HXDLIN(  27)										{
HXLINE(  27)											int len7 = b13->length;
HXDLIN(  27)											int w5 = 0;
HXDLIN(  27)											{
HXLINE(  27)												int _g56 = 0;
HXDLIN(  27)												int _g57 = b13->height;
HXDLIN(  27)												while((_g56 < _g57)){
HXLINE(  27)													_g56 = (_g56 + 1);
HXDLIN(  27)													int y5 = (_g56 - 1);
HXDLIN(  27)													{
HXLINE(  27)														int _g58 = 0;
HXDLIN(  27)														int _g59 = b13->width;
HXDLIN(  27)														while((_g58 < _g59)){
HXLINE(  27)															_g58 = (_g58 + 1);
HXDLIN(  27)															int x6 = (_g58 - 1);
HXDLIN(  27)															{
HXLINE(  27)																w5 = (w5 + 1);
HXDLIN(  27)																b13->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  27)															{
HXLINE(  27)																w5 = (w5 + 1);
HXDLIN(  27)																b13->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  27)															{
HXLINE(  27)																w5 = (w5 + 1);
HXDLIN(  27)																b13->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  27)															{
HXLINE(  27)																w5 = (w5 + 1);
HXDLIN(  27)																b13->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  27)									undoImage1 = b13;
            								}
            								break;
            								case (int)1: {
HXLINE(  27)									 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::ArrIntImg a6 = arrI3;
HXDLIN(  27)									{
HXLINE(  27)										a6->width = width2;
HXDLIN(  27)										a6->height = height2;
HXDLIN(  27)										a6->data = ::Array_obj< int >::__new(0);
HXDLIN(  27)										a6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  27)										{
HXLINE(  27)											int _g60 = 0;
HXDLIN(  27)											int _g61 = a6->length;
HXDLIN(  27)											while((_g60 < _g61)){
HXLINE(  27)												_g60 = (_g60 + 1);
HXDLIN(  27)												int i20 = (_g60 - 1);
HXDLIN(  27)												a6->data[i20] = 0;
            											}
            										}
            									}
HXDLIN(  27)									undoImage1 = a6;
            								}
            								break;
            								case (int)2: {
HXLINE(  27)									 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::U32ArrImg b14 = u32a3;
HXDLIN(  27)									{
HXLINE(  27)										b14->width = width2;
HXDLIN(  27)										b14->height = height2;
HXDLIN(  27)										b14->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  27)										int size3 = (b14->length * 4);
HXDLIN(  27)										b14->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  27)										{
HXLINE(  27)											int _g62 = 0;
HXDLIN(  27)											int _g63 = b14->length;
HXDLIN(  27)											while((_g62 < _g63)){
HXLINE(  27)												_g62 = (_g62 + 1);
HXDLIN(  27)												int i21 = (_g62 - 1);
HXDLIN(  27)												{
HXLINE(  27)													 ::haxe::io::ArrayBufferViewImpl this23 = b14->data;
HXDLIN(  27)													bool undoImage2;
HXDLIN(  27)													if ((i21 >= 0)) {
HXLINE(  27)														undoImage2 = (i21 < (this23->byteLength >> 2));
            													}
            													else {
HXLINE(  27)														undoImage2 = false;
            													}
HXDLIN(  27)													if (undoImage2) {
HXLINE(  27)														 ::haxe::io::Bytes _this4 = this23->bytes;
HXDLIN(  27)														int pos4 = ((i21 << 2) + this23->byteOffset);
HXDLIN(  27)														_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN(  27)														_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN(  27)														_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN(  27)														_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  27)									undoImage1 = b14;
            								}
            								break;
            								case (int)3: {
HXLINE(  27)									 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::VecIntImg v5 = vec3;
HXDLIN(  27)									{
HXLINE(  27)										v5->width = width2;
HXDLIN(  27)										v5->height = height2;
HXDLIN(  27)										v5->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  27)										v5->data = ::Array_obj< int >::__new(v5->length);
HXDLIN(  27)										{
HXLINE(  27)											int _g64 = 0;
HXDLIN(  27)											int _g65 = v5->length;
HXDLIN(  27)											while((_g64 < _g65)){
HXLINE(  27)												_g64 = (_g64 + 1);
HXDLIN(  27)												int i22 = (_g64 - 1);
HXDLIN(  27)												v5->data->__unsafe_set(i22,0);
            											}
            										}
            									}
HXDLIN(  27)									undoImage1 = v5;
            								}
            								break;
            								case (int)4: {
HXLINE(  27)									 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::StackIntImg b15 = sInt3;
HXDLIN(  27)									{
HXLINE(  27)										b15->width = width2;
HXDLIN(  27)										b15->height = height2;
HXDLIN(  27)										b15->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  27)										b15->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  27)										{
HXLINE(  27)											int len8 = b15->length;
HXDLIN(  27)											 ::haxe::ds::GenericStack_Int d3 = b15->data;
HXDLIN(  27)											if (::hx::IsNull( d3->head )) {
HXLINE(  27)												int _g66 = 0;
HXDLIN(  27)												int _g67 = len8;
HXDLIN(  27)												while((_g66 < _g67)){
HXLINE(  27)													_g66 = (_g66 + 1);
HXDLIN(  27)													int i23 = (_g66 - 1);
HXDLIN(  27)													d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            												}
            											}
            											else {
HXLINE(  27)												int _g68 = 0;
HXDLIN(  27)												int _g69 = len8;
HXDLIN(  27)												while((_g68 < _g69)){
HXLINE(  27)													_g68 = (_g68 + 1);
HXDLIN(  27)													int i24 = (_g68 - 1);
HXDLIN(  27)													{
HXLINE(  27)														 ::haxe::ds::GenericCell_Int l3 = b15->data->head;
HXDLIN(  27)														 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  27)														{
HXLINE(  27)															int _g70 = 0;
HXDLIN(  27)															int _g71 = i24;
HXDLIN(  27)															while((_g70 < _g71)){
HXLINE(  27)																_g70 = (_g70 + 1);
HXDLIN(  27)																int i25 = (_g70 - 1);
HXLINE( 345)																prev3 = l3;
HXLINE( 346)																l3 = l3->next;
            															}
            														}
HXLINE(  27)														if (::hx::IsNull( prev3 )) {
HXLINE(  27)															b15->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  27)															l3 = null();
            														}
            														else {
HXLINE(  27)															prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  27)															l3 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  27)									undoImage1 = b15;
            								}
            								break;
            							}
HXDLIN(  27)							this22->image = undoImage1;
HXDLIN(  27)							this22->width = width2;
HXDLIN(  27)							this22->height = height2;
HXDLIN(  27)							this22->imageType = ( (int)(imageType3) );
HXDLIN(  27)							undoImage = this22;
HXDLIN(  27)							{
HXLINE(  27)								int rectLeft = xIter3->start;
HXDLIN(  27)								int rectTop = yIter3->start;
HXDLIN(  27)								int rectRight = xIter3->max;
HXDLIN(  27)								bool forceClear = false;
HXDLIN(  27)								{
HXLINE(  27)									int _g72 = rectTop;
HXDLIN(  27)									int _g73 = yIter3->max;
HXDLIN(  27)									while((_g72 < _g73)){
HXLINE(  27)										_g72 = (_g72 + 1);
HXDLIN(  27)										int dy = (_g72 - 1);
HXDLIN(  27)										{
HXLINE(  27)											int _g74 = rectLeft;
HXDLIN(  27)											int _g75 = rectRight;
HXDLIN(  27)											while((_g74 < _g75)){
HXLINE(  27)												_g74 = (_g74 + 1);
HXDLIN(  27)												int dx = (_g74 - 1);
HXDLIN(  27)												::Dynamic this24 = this21->image;
HXDLIN(  27)												int index2;
HXDLIN(  27)												if (this21->useVirtualPos) {
HXLINE(  27)													index2 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this21->virtualY) * ( (Float)(this21->width) )) + dx) - this21->virtualX));
            												}
            												else {
HXLINE(  27)													index2 = ::Std_obj::_hx_int(( (Float)(((dy * this21->width) + dx)) ));
            												}
HXDLIN(  27)												int c2 = ::iterMagic::Iimg_obj::get(this24,index2);
HXDLIN(  27)												int col;
HXDLIN(  27)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)													col = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            												}
            												else {
HXLINE(  27)													col = c2;
            												}
HXDLIN(  27)												bool resize10;
HXDLIN(  27)												if (this21->useMask) {
HXLINE(  27)													resize10 = ::hx::IsNotNull( this21->mask );
            												}
            												else {
HXLINE(  27)													resize10 = false;
            												}
HXDLIN(  27)												if (resize10) {
HXLINE(  27)													 ::pi_xy::ImageStruct this25 = this21->mask;
HXDLIN(  27)													::Dynamic this26 = this25->image;
HXDLIN(  27)													int index3;
HXDLIN(  27)													if (this25->useVirtualPos) {
HXLINE(  27)														index3 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this25->virtualY) * ( (Float)(this25->width) )) + dx) - this25->virtualX));
            													}
            													else {
HXLINE(  27)														index3 = ::Std_obj::_hx_int(( (Float)(((dy * this25->width) + dx)) ));
            													}
HXDLIN(  27)													int c3 = ::iterMagic::Iimg_obj::get(this26,index3);
HXDLIN(  27)													int v6;
HXDLIN(  27)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)														v6 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            													}
            													else {
HXLINE(  27)														v6 = c3;
            													}
HXDLIN(  27)													int maskPixel = v6;
HXDLIN(  27)													int this27 = col;
HXDLIN(  27)													if ((maskPixel == 0)) {
HXLINE(  27)														col = this27;
            													}
            													else {
HXLINE(  27)														Float m0;
HXDLIN(  27)														int this28 = ((maskPixel >> 24) & 255);
HXDLIN(  27)														if ((this28 == 0)) {
HXLINE(  27)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m0 = (( (Float)(this28) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float m1;
HXDLIN(  27)														int this29 = ((maskPixel >> 16) & 255);
HXDLIN(  27)														if ((this29 == 0)) {
HXLINE(  27)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m1 = (( (Float)(this29) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float m2;
HXDLIN(  27)														int this30 = ((maskPixel >> 8) & 255);
HXDLIN(  27)														if ((this30 == 0)) {
HXLINE(  27)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m2 = (( (Float)(this30) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float m3;
HXDLIN(  27)														int this31 = (maskPixel & 255);
HXDLIN(  27)														if ((this31 == 0)) {
HXLINE(  27)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m3 = (( (Float)(this31) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this27 >> 24) & 255)) )));
HXDLIN(  27)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this27 >> 16) & 255)) )));
HXDLIN(  27)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this27 >> 8) & 255)) )));
HXDLIN(  27)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this27 & 255)) )));
HXDLIN(  27)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  27)												if ((col != 0)) {
HXLINE(  27)													int x7 = (dx - rectLeft);
HXDLIN(  27)													int y6 = (dy - rectTop);
HXDLIN(  27)													int c4 = col;
HXDLIN(  27)													bool resize11;
HXDLIN(  27)													if ((((c4 >> 24) & 255) < 254)) {
HXLINE(  27)														resize11 = undoImage->transparent;
            													}
            													else {
HXLINE(  27)														resize11 = false;
            													}
HXDLIN(  27)													if (resize11) {
HXLINE(  27)														int location1;
HXDLIN(  27)														if (undoImage->useVirtualPos) {
HXLINE(  27)															location1 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x7) - undoImage->virtualX));
            														}
            														else {
HXLINE(  27)															location1 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage->width) + x7)) ));
            														}
HXDLIN(  27)														int this32 = ::iterMagic::Iimg_obj::get(undoImage->image,location1);
HXDLIN(  27)														int this33;
HXDLIN(  27)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)															this33 = ((((((this32 >> 24) & 255) << 24) | ((this32 & 255) << 16)) | (((this32 >> 8) & 255) << 8)) | ((this32 >> 16) & 255));
            														}
            														else {
HXLINE(  27)															this33 = this32;
            														}
HXDLIN(  27)														Float a12;
HXDLIN(  27)														int this34 = ((this33 >> 24) & 255);
HXDLIN(  27)														if ((this34 == 0)) {
HXLINE(  27)															a12 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															a12 = (( (Float)(this34) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float r11;
HXDLIN(  27)														int this35 = ((this33 >> 16) & 255);
HXDLIN(  27)														if ((this35 == 0)) {
HXLINE(  27)															r11 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															r11 = (( (Float)(this35) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float g11;
HXDLIN(  27)														int this36 = ((this33 >> 8) & 255);
HXDLIN(  27)														if ((this36 == 0)) {
HXLINE(  27)															g11 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															g11 = (( (Float)(this36) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float b16;
HXDLIN(  27)														int this37 = (this33 & 255);
HXDLIN(  27)														if ((this37 == 0)) {
HXLINE(  27)															b16 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															b16 = (( (Float)(this37) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float a22;
HXDLIN(  27)														int this38 = ((col >> 24) & 255);
HXDLIN(  27)														if ((this38 == 0)) {
HXLINE(  27)															a22 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															a22 = (( (Float)(this38) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float r21;
HXDLIN(  27)														int this39 = ((col >> 16) & 255);
HXDLIN(  27)														if ((this39 == 0)) {
HXLINE(  27)															r21 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															r21 = (( (Float)(this39) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float g21;
HXDLIN(  27)														int this40 = ((col >> 8) & 255);
HXDLIN(  27)														if ((this40 == 0)) {
HXLINE(  27)															g21 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															g21 = (( (Float)(this40) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float b22;
HXDLIN(  27)														int this41 = (col & 255);
HXDLIN(  27)														if ((this41 == 0)) {
HXLINE(  27)															b22 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															b22 = (( (Float)(this41) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float a31 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  27)														int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a22))));
HXDLIN(  27)														int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a22))));
HXDLIN(  27)														int b17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b16 * a31) + (b22 * a22))));
HXDLIN(  27)														int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a22)));
HXDLIN(  27)														int blended1 = ((((a7 << 24) | (r4 << 16)) | (g4 << 8)) | b17);
HXDLIN(  27)														{
HXLINE(  27)															int resize12;
HXDLIN(  27)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)																resize12 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            															}
            															else {
HXLINE(  27)																resize12 = blended1;
            															}
HXDLIN(  27)															::iterMagic::Iimg_obj::set(undoImage->image,location1,resize12);
            														}
            													}
            													else {
HXLINE(  27)														::Dynamic this42 = undoImage->image;
HXDLIN(  27)														int index4;
HXDLIN(  27)														if (undoImage->useVirtualPos) {
HXLINE(  27)															index4 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x7) - undoImage->virtualX));
            														}
            														else {
HXLINE(  27)															index4 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage->width) + x7)) ));
            														}
HXDLIN(  27)														int resize13;
HXDLIN(  27)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)															resize13 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            														}
            														else {
HXLINE(  27)															resize13 = c4;
            														}
HXDLIN(  27)														::iterMagic::Iimg_obj::set(this42,index4,resize13);
            													}
            												}
            												else {
HXLINE(  27)													if (forceClear) {
HXLINE(  27)														::Dynamic this43 = undoImage->image;
HXDLIN(  27)														int x8 = (dx - rectLeft);
HXDLIN(  27)														int y7 = (dy - rectTop);
HXDLIN(  27)														int index5;
HXDLIN(  27)														if (undoImage->useVirtualPos) {
HXLINE(  27)															index5 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x8) - undoImage->virtualX));
            														}
            														else {
HXLINE(  27)															index5 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage->width) + x8)) ));
            														}
HXDLIN(  27)														::iterMagic::Iimg_obj::set(this43,index5,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						{
HXLINE(  27)							int _g_min = xIter3->start;
HXDLIN(  27)							int _g_max = xIter3->max;
HXDLIN(  27)							while((_g_min < _g_max)){
HXLINE(  27)								_g_min = (_g_min + 1);
HXDLIN(  27)								int px = (_g_min - 1);
HXDLIN(  27)								Float pcx = ( (Float)(px) );
HXDLIN(  27)								{
HXLINE(  27)									int _g_min1 = yIter3->start;
HXDLIN(  27)									int _g_max1 = yIter3->max;
HXDLIN(  27)									while((_g_min1 < _g_max1)){
HXLINE(  27)										_g_min1 = (_g_min1 + 1);
HXDLIN(  27)										int py = (_g_min1 - 1);
HXDLIN(  27)										Float pcy = (( (Float)(py) ) - h);
HXDLIN(  27)										Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  27)										Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  27)										Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  27)										Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  27)										Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  27)										bool resize14;
HXDLIN(  27)										bool resize15;
HXDLIN(  27)										if ((ratioA >= 0)) {
HXLINE(  27)											resize15 = (ratioB >= 0);
            										}
            										else {
HXLINE(  27)											resize15 = false;
            										}
HXDLIN(  27)										if (resize15) {
HXLINE(  27)											resize14 = (ratioC >= 0);
            										}
            										else {
HXLINE(  27)											resize14 = false;
            										}
HXDLIN(  27)										if (resize14) {
HXLINE(  27)											Float u = (((au * ratioA) + (bu1 * ratioB)) + (du * ratioC));
HXDLIN(  27)											Float v7 = (((av * ratioA) + (bv1 * ratioB)) + (dv * ratioC));
HXDLIN(  27)											int x9 = ::Std_obj::_hx_int(((u * win_width) + win_x));
HXDLIN(  27)											int y8 = ::Std_obj::_hx_int(((v7 * win_height) + win_y));
HXDLIN(  27)											::Dynamic this44 = thisImage->image;
HXDLIN(  27)											int index6;
HXDLIN(  27)											if (thisImage->useVirtualPos) {
HXLINE(  27)												index6 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - thisImage->virtualY) * ( (Float)(thisImage->width) )) + x9) - thisImage->virtualX));
            											}
            											else {
HXLINE(  27)												index6 = ::Std_obj::_hx_int(( (Float)(((y8 * thisImage->width) + x9)) ));
            											}
HXDLIN(  27)											int c5 = ::iterMagic::Iimg_obj::get(this44,index6);
HXDLIN(  27)											int col1;
HXDLIN(  27)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)												col1 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXLINE(  27)												col1 = c5;
            											}
HXDLIN(  27)											{
HXLINE(  27)												int c6 = col1;
HXDLIN(  27)												bool resize16;
HXDLIN(  27)												if ((((c6 >> 24) & 255) < 254)) {
HXLINE(  27)													resize16 = this21->transparent;
            												}
            												else {
HXLINE(  27)													resize16 = false;
            												}
HXDLIN(  27)												if (resize16) {
HXLINE(  27)													int location2;
HXDLIN(  27)													if (this21->useVirtualPos) {
HXLINE(  27)														location2 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this21->virtualY) * ( (Float)(this21->width) )) + px) - this21->virtualX));
            													}
            													else {
HXLINE(  27)														location2 = ::Std_obj::_hx_int(( (Float)(((py * this21->width) + px)) ));
            													}
HXDLIN(  27)													int this45 = ::iterMagic::Iimg_obj::get(this21->image,location2);
HXDLIN(  27)													int this46;
HXDLIN(  27)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)														this46 = ((((((this45 >> 24) & 255) << 24) | ((this45 & 255) << 16)) | (((this45 >> 8) & 255) << 8)) | ((this45 >> 16) & 255));
            													}
            													else {
HXLINE(  27)														this46 = this45;
            													}
HXDLIN(  27)													Float a13;
HXDLIN(  27)													int this47 = ((this46 >> 24) & 255);
HXDLIN(  27)													if ((this47 == 0)) {
HXLINE(  27)														a13 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														a13 = (( (Float)(this47) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float r12;
HXDLIN(  27)													int this48 = ((this46 >> 16) & 255);
HXDLIN(  27)													if ((this48 == 0)) {
HXLINE(  27)														r12 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														r12 = (( (Float)(this48) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float g12;
HXDLIN(  27)													int this49 = ((this46 >> 8) & 255);
HXDLIN(  27)													if ((this49 == 0)) {
HXLINE(  27)														g12 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														g12 = (( (Float)(this49) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float b18;
HXDLIN(  27)													int this50 = (this46 & 255);
HXDLIN(  27)													if ((this50 == 0)) {
HXLINE(  27)														b18 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														b18 = (( (Float)(this50) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float a23;
HXDLIN(  27)													int this51 = ((col1 >> 24) & 255);
HXDLIN(  27)													if ((this51 == 0)) {
HXLINE(  27)														a23 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														a23 = (( (Float)(this51) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float r22;
HXDLIN(  27)													int this52 = ((col1 >> 16) & 255);
HXDLIN(  27)													if ((this52 == 0)) {
HXLINE(  27)														r22 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														r22 = (( (Float)(this52) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float g22;
HXDLIN(  27)													int this53 = ((col1 >> 8) & 255);
HXDLIN(  27)													if ((this53 == 0)) {
HXLINE(  27)														g22 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														g22 = (( (Float)(this53) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float b23;
HXDLIN(  27)													int this54 = (col1 & 255);
HXDLIN(  27)													if ((this54 == 0)) {
HXLINE(  27)														b23 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														b23 = (( (Float)(this54) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float a32 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  27)													int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a23))));
HXDLIN(  27)													int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a23))));
HXDLIN(  27)													int b19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b18 * a32) + (b23 * a23))));
HXDLIN(  27)													int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a23)));
HXDLIN(  27)													int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b19);
HXDLIN(  27)													{
HXLINE(  27)														int resize17;
HXDLIN(  27)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)															resize17 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            														}
            														else {
HXLINE(  27)															resize17 = blended2;
            														}
HXDLIN(  27)														::iterMagic::Iimg_obj::set(this21->image,location2,resize17);
            													}
            												}
            												else {
HXLINE(  27)													::Dynamic this55 = this21->image;
HXDLIN(  27)													int index7;
HXDLIN(  27)													if (this21->useVirtualPos) {
HXLINE(  27)														index7 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this21->virtualY) * ( (Float)(this21->width) )) + px) - this21->virtualX));
            													}
            													else {
HXLINE(  27)														index7 = ::Std_obj::_hx_int(( (Float)(((py * this21->width) + px)) ));
            													}
HXDLIN(  27)													int resize18;
HXDLIN(  27)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)														resize18 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            													}
            													else {
HXLINE(  27)														resize18 = c6;
            													}
HXDLIN(  27)													::iterMagic::Iimg_obj::set(this55,index7,resize18);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN(  27)						 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN(  27)						int v_undoY;
HXDLIN(  27)						int v_undoX;
HXDLIN(  27)						Float v_ty;
HXDLIN(  27)						Float v_tx;
HXDLIN(  27)						Float v_t0;
HXDLIN(  27)						Float v_sy;
HXDLIN(  27)						Float v_sx;
HXDLIN(  27)						Float v_s0;
HXDLIN(  27)						Float v_A;
HXDLIN(  27)						 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN(  27)						Float bx = w3;
HXDLIN(  27)						Float by = ( (Float)(0) );
HXDLIN(  27)						Float cx = ( (Float)(0) );
HXDLIN(  27)						Float cy = h;
HXDLIN(  27)						bool adjustWinding = (((((( (Float)(0) ) * by) - (bx * ( (Float)(0) ))) + ((bx * cy) - (cx * by))) + ((cx * ( (Float)(0) )) - (( (Float)(0) ) * cy))) > 0);
HXDLIN(  27)						if (!(adjustWinding)) {
HXLINE(  27)							Float bx_ = bx;
HXDLIN(  27)							Float by_ = by;
HXLINE(  24)							bx = cx;
HXLINE(  25)							by = cy;
HXLINE(  26)							cx = bx_;
HXLINE(  27)							cy = by_;
            						}
HXDLIN(  27)						Float v_ax = ( (Float)(0) );
HXDLIN(  27)						Float v_ay = ( (Float)(0) );
HXDLIN(  27)						Float v_bx = bx;
HXDLIN(  27)						Float v_by = by;
HXDLIN(  27)						Float v_cx = cx;
HXDLIN(  27)						Float v_cy = cy;
HXDLIN(  27)						bool v_preCalculated = true;
HXDLIN(  27)						{
HXLINE(  27)							v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN(  27)							v_sx = (v_cy - v_ay);
HXDLIN(  27)							v_sy = (v_ax - v_cx);
HXDLIN(  27)							v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN(  27)							v_tx = (v_ay - v_by);
HXDLIN(  27)							v_ty = (v_bx - v_ax);
HXDLIN(  27)							v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN(  27)							Float a9 = v_ax;
HXDLIN(  27)							Float b20 = v_bx;
HXDLIN(  27)							Float c7 = v_cx;
HXDLIN(  27)							if ((a9 > b20)) {
HXLINE(  27)								if ((a9 > c7)) {
HXLINE(  27)									int min1;
HXDLIN(  27)									if ((b20 > c7)) {
HXLINE(  27)										min1 = ::Math_obj::floor(c7);
            									}
            									else {
HXLINE(  27)										min1 = ::Math_obj::floor(b20);
            									}
HXDLIN(  27)									int ii_min5 = min1;
HXDLIN(  27)									int ii_max5 = ::Math_obj::ceil(a9);
HXDLIN(  27)									v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            								}
            								else {
HXLINE(  27)									int ii_min6 = ::Math_obj::floor(b20);
HXDLIN(  27)									int ii_max6 = ::Math_obj::ceil(c7);
HXDLIN(  27)									v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            								}
            							}
            							else {
HXLINE(  27)								if ((b20 > c7)) {
HXLINE(  27)									int min2;
HXDLIN(  27)									if ((a9 > c7)) {
HXLINE(  27)										min2 = ::Math_obj::floor(c7);
            									}
            									else {
HXLINE(  27)										min2 = ::Math_obj::ceil(a9);
            									}
HXDLIN(  27)									int ii_min7 = min2;
HXDLIN(  27)									int ii_max7 = ::Math_obj::ceil(b20);
HXDLIN(  27)									v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            								}
            								else {
HXLINE(  27)									int ii_min8 = ::Math_obj::floor(a9);
HXDLIN(  27)									int ii_max8 = ::Math_obj::ceil(c7);
HXDLIN(  27)									v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            								}
            							}
HXDLIN(  27)							Float a10 = v_ay;
HXDLIN(  27)							Float b24 = v_by;
HXDLIN(  27)							Float c8 = v_cy;
HXDLIN(  27)							if ((a10 > b24)) {
HXLINE(  27)								if ((a10 > c8)) {
HXLINE(  27)									int min3;
HXDLIN(  27)									if ((b24 > c8)) {
HXLINE(  27)										min3 = ::Math_obj::floor(c8);
            									}
            									else {
HXLINE(  27)										min3 = ::Math_obj::floor(b24);
            									}
HXDLIN(  27)									int ii_min9 = min3;
HXDLIN(  27)									int ii_max9 = ::Math_obj::ceil(a10);
HXDLIN(  27)									v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            								}
            								else {
HXLINE(  27)									int ii_min10 = ::Math_obj::floor(b24);
HXDLIN(  27)									int ii_max10 = ::Math_obj::ceil(c8);
HXDLIN(  27)									v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            								}
            							}
            							else {
HXLINE(  27)								if ((b24 > c8)) {
HXLINE(  27)									int min4;
HXDLIN(  27)									if ((a10 > c8)) {
HXLINE(  27)										min4 = ::Math_obj::floor(c8);
            									}
            									else {
HXLINE(  27)										min4 = ::Math_obj::ceil(a10);
            									}
HXDLIN(  27)									int ii_min11 = min4;
HXDLIN(  27)									int ii_max11 = ::Math_obj::ceil(b24);
HXDLIN(  27)									v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            								}
            								else {
HXLINE(  27)									int ii_min12 = ::Math_obj::floor(a10);
HXDLIN(  27)									int ii_max12 = ::Math_obj::ceil(c8);
HXDLIN(  27)									v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            								}
            							}
            						}
HXDLIN(  27)						if (hasUndo) {
HXLINE(  27)							v_undoImage = undoImage;
HXDLIN(  27)							v_undoX = xIter3->start;
HXDLIN(  27)							v_undoY = yIter3->start;
            						}
HXDLIN(  27)						Float au1 = bu;
HXDLIN(  27)						Float av1 = bv;
HXDLIN(  27)						Float bu2 = cu;
HXDLIN(  27)						Float bv2 = cv;
HXDLIN(  27)						bool hasUndo1 = false;
HXDLIN(  27)						Float temp1 = au1;
HXLINE( 422)						au1 = bu2;
HXLINE( 423)						bu2 = temp1;
HXLINE( 424)						temp1 = av1;
HXLINE( 425)						av1 = bv2;
HXLINE( 426)						bv2 = temp1;
HXLINE(  27)						Float bcx1 = w3;
HXDLIN(  27)						Float bcy1 = (h - h);
HXDLIN(  27)						Float acx1 = w3;
HXDLIN(  27)						Float acy1 = (( (Float)(0) ) - h);
HXDLIN(  27)						Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  27)						Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  27)						Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  27)						Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  27)						 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  27)						if ((w3 > w3)) {
HXLINE(  27)							if ((w3 > 0)) {
HXLINE(  27)								int min5;
HXDLIN(  27)								if ((w3 > 0)) {
HXLINE(  27)									min5 = ::Math_obj::floor(( (Float)(0) ));
            								}
            								else {
HXLINE(  27)									min5 = ::Math_obj::floor(w3);
            								}
HXDLIN(  27)								int ii_min13 = min5;
HXDLIN(  27)								int ii_max13 = ::Math_obj::ceil(w3);
HXDLIN(  27)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            							}
            							else {
HXLINE(  27)								int ii_min14 = ::Math_obj::floor(w3);
HXDLIN(  27)								int ii_max14 = ::Math_obj::ceil(( (Float)(0) ));
HXDLIN(  27)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            							}
            						}
            						else {
HXLINE(  27)							if ((w3 > 0)) {
HXLINE(  27)								int min6;
HXDLIN(  27)								if ((w3 > 0)) {
HXLINE(  27)									min6 = ::Math_obj::floor(( (Float)(0) ));
            								}
            								else {
HXLINE(  27)									min6 = ::Math_obj::ceil(w3);
            								}
HXDLIN(  27)								int ii_min15 = min6;
HXDLIN(  27)								int ii_max15 = ::Math_obj::ceil(w3);
HXDLIN(  27)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            							}
            							else {
HXLINE(  27)								int ii_min16 = ::Math_obj::floor(w3);
HXDLIN(  27)								int ii_max16 = ::Math_obj::ceil(( (Float)(0) ));
HXDLIN(  27)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            							}
            						}
HXDLIN(  27)						 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  27)						if ((0 > h)) {
HXLINE(  27)							if ((0 > h)) {
HXLINE(  27)								int min7;
HXDLIN(  27)								if ((h > h)) {
HXLINE(  27)									min7 = ::Math_obj::floor(h);
            								}
            								else {
HXLINE(  27)									min7 = ::Math_obj::floor(h);
            								}
HXDLIN(  27)								int ii_min17 = min7;
HXDLIN(  27)								int ii_max17 = ::Math_obj::ceil(( (Float)(0) ));
HXDLIN(  27)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            							}
            							else {
HXLINE(  27)								int ii_min18 = ::Math_obj::floor(h);
HXDLIN(  27)								int ii_max18 = ::Math_obj::ceil(h);
HXDLIN(  27)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            							}
            						}
            						else {
HXLINE(  27)							if ((h > h)) {
HXLINE(  27)								int min8;
HXDLIN(  27)								if ((0 > h)) {
HXLINE(  27)									min8 = ::Math_obj::floor(h);
            								}
            								else {
HXLINE(  27)									min8 = ::Math_obj::ceil(( (Float)(0) ));
            								}
HXDLIN(  27)								int ii_min19 = min8;
HXDLIN(  27)								int ii_max19 = ::Math_obj::ceil(h);
HXDLIN(  27)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            							}
            							else {
HXLINE(  27)								int ii_min20 = ::Math_obj::floor(( (Float)(0) ));
HXDLIN(  27)								int ii_max20 = ::Math_obj::ceil(h);
HXDLIN(  27)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            							}
            						}
HXDLIN(  27)						 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  27)						if (hasUndo1) {
HXLINE(  27)							int width3 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  27)							int height3 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  27)							 ::Dynamic imageType4 = null();
HXDLIN(  27)							 ::pi_xy::ImageStruct this56 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  27)							if (::hx::IsNull( imageType4 )) {
HXLINE(  54)								imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  27)							::Dynamic undoImage4;
HXDLIN(  27)							switch((int)(( (int)(imageType4) ))){
            								case (int)0: {
HXLINE(  27)									 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::BytesImg b25 = byt5;
HXDLIN(  27)									{
HXLINE(  27)										b25->width = width3;
HXDLIN(  27)										b25->height = height3;
HXDLIN(  27)										b25->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  27)										b25->data = ::haxe::io::Bytes_obj::alloc((b25->length * 4));
HXDLIN(  27)										{
HXLINE(  27)											int len9 = b25->length;
HXDLIN(  27)											int w6 = 0;
HXDLIN(  27)											{
HXLINE(  27)												int _g76 = 0;
HXDLIN(  27)												int _g77 = b25->height;
HXDLIN(  27)												while((_g76 < _g77)){
HXLINE(  27)													_g76 = (_g76 + 1);
HXDLIN(  27)													int y9 = (_g76 - 1);
HXDLIN(  27)													{
HXLINE(  27)														int _g78 = 0;
HXDLIN(  27)														int _g79 = b25->width;
HXDLIN(  27)														while((_g78 < _g79)){
HXLINE(  27)															_g78 = (_g78 + 1);
HXDLIN(  27)															int x10 = (_g78 - 1);
HXDLIN(  27)															{
HXLINE(  27)																w6 = (w6 + 1);
HXDLIN(  27)																b25->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  27)															{
HXLINE(  27)																w6 = (w6 + 1);
HXDLIN(  27)																b25->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  27)															{
HXLINE(  27)																w6 = (w6 + 1);
HXDLIN(  27)																b25->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  27)															{
HXLINE(  27)																w6 = (w6 + 1);
HXDLIN(  27)																b25->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  27)									undoImage4 = b25;
            								}
            								break;
            								case (int)1: {
HXLINE(  27)									 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::ArrIntImg a14 = arrI4;
HXDLIN(  27)									{
HXLINE(  27)										a14->width = width3;
HXDLIN(  27)										a14->height = height3;
HXDLIN(  27)										a14->data = ::Array_obj< int >::__new(0);
HXDLIN(  27)										a14->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  27)										{
HXLINE(  27)											int _g80 = 0;
HXDLIN(  27)											int _g81 = a14->length;
HXDLIN(  27)											while((_g80 < _g81)){
HXLINE(  27)												_g80 = (_g80 + 1);
HXDLIN(  27)												int i26 = (_g80 - 1);
HXDLIN(  27)												a14->data[i26] = 0;
            											}
            										}
            									}
HXDLIN(  27)									undoImage4 = a14;
            								}
            								break;
            								case (int)2: {
HXLINE(  27)									 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::U32ArrImg b26 = u32a4;
HXDLIN(  27)									{
HXLINE(  27)										b26->width = width3;
HXDLIN(  27)										b26->height = height3;
HXDLIN(  27)										b26->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  27)										int size4 = (b26->length * 4);
HXDLIN(  27)										b26->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN(  27)										{
HXLINE(  27)											int _g82 = 0;
HXDLIN(  27)											int _g83 = b26->length;
HXDLIN(  27)											while((_g82 < _g83)){
HXLINE(  27)												_g82 = (_g82 + 1);
HXDLIN(  27)												int i27 = (_g82 - 1);
HXDLIN(  27)												{
HXLINE(  27)													 ::haxe::io::ArrayBufferViewImpl this57 = b26->data;
HXDLIN(  27)													bool undoImage5;
HXDLIN(  27)													if ((i27 >= 0)) {
HXLINE(  27)														undoImage5 = (i27 < (this57->byteLength >> 2));
            													}
            													else {
HXLINE(  27)														undoImage5 = false;
            													}
HXDLIN(  27)													if (undoImage5) {
HXLINE(  27)														 ::haxe::io::Bytes _this5 = this57->bytes;
HXDLIN(  27)														int pos5 = ((i27 << 2) + this57->byteOffset);
HXDLIN(  27)														_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN(  27)														_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN(  27)														_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN(  27)														_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  27)									undoImage4 = b26;
            								}
            								break;
            								case (int)3: {
HXLINE(  27)									 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::VecIntImg v8 = vec4;
HXDLIN(  27)									{
HXLINE(  27)										v8->width = width3;
HXDLIN(  27)										v8->height = height3;
HXDLIN(  27)										v8->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  27)										v8->data = ::Array_obj< int >::__new(v8->length);
HXDLIN(  27)										{
HXLINE(  27)											int _g84 = 0;
HXDLIN(  27)											int _g85 = v8->length;
HXDLIN(  27)											while((_g84 < _g85)){
HXLINE(  27)												_g84 = (_g84 + 1);
HXDLIN(  27)												int i28 = (_g84 - 1);
HXDLIN(  27)												v8->data->__unsafe_set(i28,0);
            											}
            										}
            									}
HXDLIN(  27)									undoImage4 = v8;
            								}
            								break;
            								case (int)4: {
HXLINE(  27)									 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::StackIntImg b27 = sInt4;
HXDLIN(  27)									{
HXLINE(  27)										b27->width = width3;
HXDLIN(  27)										b27->height = height3;
HXDLIN(  27)										b27->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  27)										b27->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  27)										{
HXLINE(  27)											int len10 = b27->length;
HXDLIN(  27)											 ::haxe::ds::GenericStack_Int d4 = b27->data;
HXDLIN(  27)											if (::hx::IsNull( d4->head )) {
HXLINE(  27)												int _g86 = 0;
HXDLIN(  27)												int _g87 = len10;
HXDLIN(  27)												while((_g86 < _g87)){
HXLINE(  27)													_g86 = (_g86 + 1);
HXDLIN(  27)													int i29 = (_g86 - 1);
HXDLIN(  27)													d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            												}
            											}
            											else {
HXLINE(  27)												int _g88 = 0;
HXDLIN(  27)												int _g89 = len10;
HXDLIN(  27)												while((_g88 < _g89)){
HXLINE(  27)													_g88 = (_g88 + 1);
HXDLIN(  27)													int i30 = (_g88 - 1);
HXDLIN(  27)													{
HXLINE(  27)														 ::haxe::ds::GenericCell_Int l4 = b27->data->head;
HXDLIN(  27)														 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN(  27)														{
HXLINE(  27)															int _g90 = 0;
HXDLIN(  27)															int _g91 = i30;
HXDLIN(  27)															while((_g90 < _g91)){
HXLINE(  27)																_g90 = (_g90 + 1);
HXDLIN(  27)																int i31 = (_g90 - 1);
HXLINE( 345)																prev4 = l4;
HXLINE( 346)																l4 = l4->next;
            															}
            														}
HXLINE(  27)														if (::hx::IsNull( prev4 )) {
HXLINE(  27)															b27->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  27)															l4 = null();
            														}
            														else {
HXLINE(  27)															prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  27)															l4 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  27)									undoImage4 = b27;
            								}
            								break;
            							}
HXDLIN(  27)							this56->image = undoImage4;
HXDLIN(  27)							this56->width = width3;
HXDLIN(  27)							this56->height = height3;
HXDLIN(  27)							this56->imageType = ( (int)(imageType4) );
HXDLIN(  27)							undoImage3 = this56;
HXDLIN(  27)							{
HXLINE(  27)								int rectLeft1 = xIter31->start;
HXDLIN(  27)								int rectTop1 = yIter31->start;
HXDLIN(  27)								int rectRight1 = xIter31->max;
HXDLIN(  27)								bool forceClear1 = false;
HXDLIN(  27)								{
HXLINE(  27)									int _g92 = rectTop1;
HXDLIN(  27)									int _g93 = yIter31->max;
HXDLIN(  27)									while((_g92 < _g93)){
HXLINE(  27)										_g92 = (_g92 + 1);
HXDLIN(  27)										int dy1 = (_g92 - 1);
HXDLIN(  27)										{
HXLINE(  27)											int _g94 = rectLeft1;
HXDLIN(  27)											int _g95 = rectRight1;
HXDLIN(  27)											while((_g94 < _g95)){
HXLINE(  27)												_g94 = (_g94 + 1);
HXDLIN(  27)												int dx1 = (_g94 - 1);
HXDLIN(  27)												::Dynamic this58 = this21->image;
HXDLIN(  27)												int index8;
HXDLIN(  27)												if (this21->useVirtualPos) {
HXLINE(  27)													index8 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this21->virtualY) * ( (Float)(this21->width) )) + dx1) - this21->virtualX));
            												}
            												else {
HXLINE(  27)													index8 = ::Std_obj::_hx_int(( (Float)(((dy1 * this21->width) + dx1)) ));
            												}
HXDLIN(  27)												int c9 = ::iterMagic::Iimg_obj::get(this58,index8);
HXDLIN(  27)												int col2;
HXDLIN(  27)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)													col2 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            												}
            												else {
HXLINE(  27)													col2 = c9;
            												}
HXDLIN(  27)												bool resize19;
HXDLIN(  27)												if (this21->useMask) {
HXLINE(  27)													resize19 = ::hx::IsNotNull( this21->mask );
            												}
            												else {
HXLINE(  27)													resize19 = false;
            												}
HXDLIN(  27)												if (resize19) {
HXLINE(  27)													 ::pi_xy::ImageStruct this59 = this21->mask;
HXDLIN(  27)													::Dynamic this60 = this59->image;
HXDLIN(  27)													int index9;
HXDLIN(  27)													if (this59->useVirtualPos) {
HXLINE(  27)														index9 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this59->virtualY) * ( (Float)(this59->width) )) + dx1) - this59->virtualX));
            													}
            													else {
HXLINE(  27)														index9 = ::Std_obj::_hx_int(( (Float)(((dy1 * this59->width) + dx1)) ));
            													}
HXDLIN(  27)													int c10 = ::iterMagic::Iimg_obj::get(this60,index9);
HXDLIN(  27)													int v9;
HXDLIN(  27)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)														v9 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            													}
            													else {
HXLINE(  27)														v9 = c10;
            													}
HXDLIN(  27)													int maskPixel1 = v9;
HXDLIN(  27)													int this61 = col2;
HXDLIN(  27)													if ((maskPixel1 == 0)) {
HXLINE(  27)														col2 = this61;
            													}
            													else {
HXLINE(  27)														Float m01;
HXDLIN(  27)														int this62 = ((maskPixel1 >> 24) & 255);
HXDLIN(  27)														if ((this62 == 0)) {
HXLINE(  27)															m01 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m01 = (( (Float)(this62) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float m11;
HXDLIN(  27)														int this63 = ((maskPixel1 >> 16) & 255);
HXDLIN(  27)														if ((this63 == 0)) {
HXLINE(  27)															m11 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m11 = (( (Float)(this63) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float m21;
HXDLIN(  27)														int this64 = ((maskPixel1 >> 8) & 255);
HXDLIN(  27)														if ((this64 == 0)) {
HXLINE(  27)															m21 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m21 = (( (Float)(this64) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float m31;
HXDLIN(  27)														int this65 = (maskPixel1 & 255);
HXDLIN(  27)														if ((this65 == 0)) {
HXLINE(  27)															m31 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m31 = (( (Float)(this65) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this61 >> 24) & 255)) )));
HXDLIN(  27)														int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this61 >> 16) & 255)) )));
HXDLIN(  27)														int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this61 >> 8) & 255)) )));
HXDLIN(  27)														int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this61 & 255)) )));
HXDLIN(  27)														col2 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  27)												if ((col2 != 0)) {
HXLINE(  27)													int x11 = (dx1 - rectLeft1);
HXDLIN(  27)													int y10 = (dy1 - rectTop1);
HXDLIN(  27)													int c11 = col2;
HXDLIN(  27)													bool resize20;
HXDLIN(  27)													if ((((c11 >> 24) & 255) < 254)) {
HXLINE(  27)														resize20 = undoImage3->transparent;
            													}
            													else {
HXLINE(  27)														resize20 = false;
            													}
HXDLIN(  27)													if (resize20) {
HXLINE(  27)														int location3;
HXDLIN(  27)														if (undoImage3->useVirtualPos) {
HXLINE(  27)															location3 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x11) - undoImage3->virtualX));
            														}
            														else {
HXLINE(  27)															location3 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage3->width) + x11)) ));
            														}
HXDLIN(  27)														int this66 = ::iterMagic::Iimg_obj::get(undoImage3->image,location3);
HXDLIN(  27)														int this67;
HXDLIN(  27)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)															this67 = ((((((this66 >> 24) & 255) << 24) | ((this66 & 255) << 16)) | (((this66 >> 8) & 255) << 8)) | ((this66 >> 16) & 255));
            														}
            														else {
HXLINE(  27)															this67 = this66;
            														}
HXDLIN(  27)														Float a15;
HXDLIN(  27)														int this68 = ((this67 >> 24) & 255);
HXDLIN(  27)														if ((this68 == 0)) {
HXLINE(  27)															a15 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															a15 = (( (Float)(this68) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float r13;
HXDLIN(  27)														int this69 = ((this67 >> 16) & 255);
HXDLIN(  27)														if ((this69 == 0)) {
HXLINE(  27)															r13 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															r13 = (( (Float)(this69) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float g13;
HXDLIN(  27)														int this70 = ((this67 >> 8) & 255);
HXDLIN(  27)														if ((this70 == 0)) {
HXLINE(  27)															g13 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															g13 = (( (Float)(this70) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float b110;
HXDLIN(  27)														int this71 = (this67 & 255);
HXDLIN(  27)														if ((this71 == 0)) {
HXLINE(  27)															b110 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															b110 = (( (Float)(this71) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float a24;
HXDLIN(  27)														int this72 = ((col2 >> 24) & 255);
HXDLIN(  27)														if ((this72 == 0)) {
HXLINE(  27)															a24 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															a24 = (( (Float)(this72) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float r23;
HXDLIN(  27)														int this73 = ((col2 >> 16) & 255);
HXDLIN(  27)														if ((this73 == 0)) {
HXLINE(  27)															r23 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															r23 = (( (Float)(this73) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float g23;
HXDLIN(  27)														int this74 = ((col2 >> 8) & 255);
HXDLIN(  27)														if ((this74 == 0)) {
HXLINE(  27)															g23 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															g23 = (( (Float)(this74) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float b28;
HXDLIN(  27)														int this75 = (col2 & 255);
HXDLIN(  27)														if ((this75 == 0)) {
HXLINE(  27)															b28 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															b28 = (( (Float)(this75) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float a33 = (a15 * (( (Float)(1) ) - a24));
HXDLIN(  27)														int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a24))));
HXDLIN(  27)														int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a24))));
HXDLIN(  27)														int b29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a33) + (b28 * a24))));
HXDLIN(  27)														int a16 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a24)));
HXDLIN(  27)														int blended3 = ((((a16 << 24) | (r6 << 16)) | (g6 << 8)) | b29);
HXDLIN(  27)														{
HXLINE(  27)															int resize21;
HXDLIN(  27)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)																resize21 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            															}
            															else {
HXLINE(  27)																resize21 = blended3;
            															}
HXDLIN(  27)															::iterMagic::Iimg_obj::set(undoImage3->image,location3,resize21);
            														}
            													}
            													else {
HXLINE(  27)														::Dynamic this76 = undoImage3->image;
HXDLIN(  27)														int index10;
HXDLIN(  27)														if (undoImage3->useVirtualPos) {
HXLINE(  27)															index10 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x11) - undoImage3->virtualX));
            														}
            														else {
HXLINE(  27)															index10 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage3->width) + x11)) ));
            														}
HXDLIN(  27)														int resize22;
HXDLIN(  27)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)															resize22 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            														}
            														else {
HXLINE(  27)															resize22 = c11;
            														}
HXDLIN(  27)														::iterMagic::Iimg_obj::set(this76,index10,resize22);
            													}
            												}
            												else {
HXLINE(  27)													if (forceClear1) {
HXLINE(  27)														::Dynamic this77 = undoImage3->image;
HXDLIN(  27)														int x12 = (dx1 - rectLeft1);
HXDLIN(  27)														int y11 = (dy1 - rectTop1);
HXDLIN(  27)														int index11;
HXDLIN(  27)														if (undoImage3->useVirtualPos) {
HXLINE(  27)															index11 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x12) - undoImage3->virtualX));
            														}
            														else {
HXLINE(  27)															index11 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage3->width) + x12)) ));
            														}
HXDLIN(  27)														::iterMagic::Iimg_obj::set(this77,index11,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						{
HXLINE(  27)							int _g_min2 = xIter31->start;
HXDLIN(  27)							int _g_max2 = xIter31->max;
HXDLIN(  27)							while((_g_min2 < _g_max2)){
HXLINE(  27)								_g_min2 = (_g_min2 + 1);
HXDLIN(  27)								int px1 = (_g_min2 - 1);
HXDLIN(  27)								Float pcx1 = ( (Float)(px1) );
HXDLIN(  27)								{
HXLINE(  27)									int _g_min3 = yIter31->start;
HXDLIN(  27)									int _g_max3 = yIter31->max;
HXDLIN(  27)									while((_g_min3 < _g_max3)){
HXLINE(  27)										_g_min3 = (_g_min3 + 1);
HXDLIN(  27)										int py1 = (_g_min3 - 1);
HXDLIN(  27)										Float pcy1 = (( (Float)(py1) ) - h);
HXDLIN(  27)										Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN(  27)										Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN(  27)										Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN(  27)										Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN(  27)										Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  27)										bool resize23;
HXDLIN(  27)										bool resize24;
HXDLIN(  27)										if ((ratioA1 >= 0)) {
HXLINE(  27)											resize24 = (ratioB1 >= 0);
            										}
            										else {
HXLINE(  27)											resize24 = false;
            										}
HXDLIN(  27)										if (resize24) {
HXLINE(  27)											resize23 = (ratioC1 >= 0);
            										}
            										else {
HXLINE(  27)											resize23 = false;
            										}
HXDLIN(  27)										if (resize23) {
HXLINE(  27)											Float u1 = (((au1 * ratioA1) + (bu2 * ratioB1)) + (du * ratioC1));
HXDLIN(  27)											Float v10 = (((av1 * ratioA1) + (bv2 * ratioB1)) + (dv * ratioC1));
HXDLIN(  27)											int x13 = ::Std_obj::_hx_int(((u1 * win_width) + win_x));
HXDLIN(  27)											int y12 = ::Std_obj::_hx_int(((v10 * win_height) + win_y));
HXDLIN(  27)											::Dynamic this78 = thisImage->image;
HXDLIN(  27)											int index12;
HXDLIN(  27)											if (thisImage->useVirtualPos) {
HXLINE(  27)												index12 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - thisImage->virtualY) * ( (Float)(thisImage->width) )) + x13) - thisImage->virtualX));
            											}
            											else {
HXLINE(  27)												index12 = ::Std_obj::_hx_int(( (Float)(((y12 * thisImage->width) + x13)) ));
            											}
HXDLIN(  27)											int c12 = ::iterMagic::Iimg_obj::get(this78,index12);
HXDLIN(  27)											int col3;
HXDLIN(  27)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)												col3 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            											}
            											else {
HXLINE(  27)												col3 = c12;
            											}
HXDLIN(  27)											{
HXLINE(  27)												int c13 = col3;
HXDLIN(  27)												bool resize25;
HXDLIN(  27)												if ((((c13 >> 24) & 255) < 254)) {
HXLINE(  27)													resize25 = this21->transparent;
            												}
            												else {
HXLINE(  27)													resize25 = false;
            												}
HXDLIN(  27)												if (resize25) {
HXLINE(  27)													int location4;
HXDLIN(  27)													if (this21->useVirtualPos) {
HXLINE(  27)														location4 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this21->virtualY) * ( (Float)(this21->width) )) + px1) - this21->virtualX));
            													}
            													else {
HXLINE(  27)														location4 = ::Std_obj::_hx_int(( (Float)(((py1 * this21->width) + px1)) ));
            													}
HXDLIN(  27)													int this79 = ::iterMagic::Iimg_obj::get(this21->image,location4);
HXDLIN(  27)													int this80;
HXDLIN(  27)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)														this80 = ((((((this79 >> 24) & 255) << 24) | ((this79 & 255) << 16)) | (((this79 >> 8) & 255) << 8)) | ((this79 >> 16) & 255));
            													}
            													else {
HXLINE(  27)														this80 = this79;
            													}
HXDLIN(  27)													Float a17;
HXDLIN(  27)													int this81 = ((this80 >> 24) & 255);
HXDLIN(  27)													if ((this81 == 0)) {
HXLINE(  27)														a17 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														a17 = (( (Float)(this81) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float r14;
HXDLIN(  27)													int this82 = ((this80 >> 16) & 255);
HXDLIN(  27)													if ((this82 == 0)) {
HXLINE(  27)														r14 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														r14 = (( (Float)(this82) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float g14;
HXDLIN(  27)													int this83 = ((this80 >> 8) & 255);
HXDLIN(  27)													if ((this83 == 0)) {
HXLINE(  27)														g14 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														g14 = (( (Float)(this83) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float b111;
HXDLIN(  27)													int this84 = (this80 & 255);
HXDLIN(  27)													if ((this84 == 0)) {
HXLINE(  27)														b111 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														b111 = (( (Float)(this84) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float a25;
HXDLIN(  27)													int this85 = ((col3 >> 24) & 255);
HXDLIN(  27)													if ((this85 == 0)) {
HXLINE(  27)														a25 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														a25 = (( (Float)(this85) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float r24;
HXDLIN(  27)													int this86 = ((col3 >> 16) & 255);
HXDLIN(  27)													if ((this86 == 0)) {
HXLINE(  27)														r24 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														r24 = (( (Float)(this86) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float g24;
HXDLIN(  27)													int this87 = ((col3 >> 8) & 255);
HXDLIN(  27)													if ((this87 == 0)) {
HXLINE(  27)														g24 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														g24 = (( (Float)(this87) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float b210;
HXDLIN(  27)													int this88 = (col3 & 255);
HXDLIN(  27)													if ((this88 == 0)) {
HXLINE(  27)														b210 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														b210 = (( (Float)(this88) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float a34 = (a17 * (( (Float)(1) ) - a25));
HXDLIN(  27)													int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a25))));
HXDLIN(  27)													int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a25))));
HXDLIN(  27)													int b30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a34) + (b210 * a25))));
HXDLIN(  27)													int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a25)));
HXDLIN(  27)													int blended4 = ((((a18 << 24) | (r7 << 16)) | (g7 << 8)) | b30);
HXDLIN(  27)													{
HXLINE(  27)														int resize26;
HXDLIN(  27)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)															resize26 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            														}
            														else {
HXLINE(  27)															resize26 = blended4;
            														}
HXDLIN(  27)														::iterMagic::Iimg_obj::set(this21->image,location4,resize26);
            													}
            												}
            												else {
HXLINE(  27)													::Dynamic this89 = this21->image;
HXDLIN(  27)													int index13;
HXDLIN(  27)													if (this21->useVirtualPos) {
HXLINE(  27)														index13 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this21->virtualY) * ( (Float)(this21->width) )) + px1) - this21->virtualX));
            													}
            													else {
HXLINE(  27)														index13 = ::Std_obj::_hx_int(( (Float)(((py1 * this21->width) + px1)) ));
            													}
HXDLIN(  27)													int resize27;
HXDLIN(  27)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)														resize27 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            													}
            													else {
HXLINE(  27)														resize27 = c13;
            													}
HXDLIN(  27)													::iterMagic::Iimg_obj::set(this89,index13,resize27);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						 ::pi_xy::iter::IntIterStart v_yIter31;
HXDLIN(  27)						 ::pi_xy::iter::IntIterStart v_xIter31;
HXDLIN(  27)						int v_undoY1;
HXDLIN(  27)						int v_undoX1;
HXDLIN(  27)						Float v_ty1;
HXDLIN(  27)						Float v_tx1;
HXDLIN(  27)						Float v_t01;
HXDLIN(  27)						Float v_sy1;
HXDLIN(  27)						Float v_sx1;
HXDLIN(  27)						Float v_s01;
HXDLIN(  27)						Float v_A1;
HXDLIN(  27)						Float ax = w3;
HXDLIN(  27)						 ::pi_xy::ImageStruct v_undoImage1 = null();
HXDLIN(  27)						Float bx1 = w3;
HXDLIN(  27)						Float by1 = h;
HXDLIN(  27)						Float cx1 = ( (Float)(0) );
HXDLIN(  27)						Float cy1 = h;
HXDLIN(  27)						bool adjustWinding1 = (((((ax * by1) - (bx1 * ( (Float)(0) ))) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ( (Float)(0) )) - (ax * cy1))) > 0);
HXDLIN(  27)						if (!(adjustWinding1)) {
HXLINE(  27)							Float bx_1 = bx1;
HXDLIN(  27)							Float by_1 = by1;
HXLINE(  24)							bx1 = cx1;
HXLINE(  25)							by1 = cy1;
HXLINE(  26)							cx1 = bx_1;
HXLINE(  27)							cy1 = by_1;
            						}
HXDLIN(  27)						Float v_ax1 = ax;
HXDLIN(  27)						Float v_ay1 = ( (Float)(0) );
HXDLIN(  27)						Float v_bx1 = bx1;
HXDLIN(  27)						Float v_by1 = by1;
HXDLIN(  27)						Float v_cx1 = cx1;
HXDLIN(  27)						Float v_cy1 = cy1;
HXDLIN(  27)						bool v_preCalculated1 = true;
HXDLIN(  27)						{
HXLINE(  27)							v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN(  27)							v_sx1 = (v_cy1 - v_ay1);
HXDLIN(  27)							v_sy1 = (v_ax1 - v_cx1);
HXDLIN(  27)							v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN(  27)							v_tx1 = (v_ay1 - v_by1);
HXDLIN(  27)							v_ty1 = (v_bx1 - v_ax1);
HXDLIN(  27)							v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN(  27)							Float a19 = v_ax1;
HXDLIN(  27)							Float b31 = v_bx1;
HXDLIN(  27)							Float c14 = v_cx1;
HXDLIN(  27)							if ((a19 > b31)) {
HXLINE(  27)								if ((a19 > c14)) {
HXLINE(  27)									int min9;
HXDLIN(  27)									if ((b31 > c14)) {
HXLINE(  27)										min9 = ::Math_obj::floor(c14);
            									}
            									else {
HXLINE(  27)										min9 = ::Math_obj::floor(b31);
            									}
HXDLIN(  27)									int ii_min21 = min9;
HXDLIN(  27)									int ii_max21 = ::Math_obj::ceil(a19);
HXDLIN(  27)									v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            								}
            								else {
HXLINE(  27)									int ii_min22 = ::Math_obj::floor(b31);
HXDLIN(  27)									int ii_max22 = ::Math_obj::ceil(c14);
HXDLIN(  27)									v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            								}
            							}
            							else {
HXLINE(  27)								if ((b31 > c14)) {
HXLINE(  27)									int min10;
HXDLIN(  27)									if ((a19 > c14)) {
HXLINE(  27)										min10 = ::Math_obj::floor(c14);
            									}
            									else {
HXLINE(  27)										min10 = ::Math_obj::ceil(a19);
            									}
HXDLIN(  27)									int ii_min23 = min10;
HXDLIN(  27)									int ii_max23 = ::Math_obj::ceil(b31);
HXDLIN(  27)									v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            								}
            								else {
HXLINE(  27)									int ii_min24 = ::Math_obj::floor(a19);
HXDLIN(  27)									int ii_max24 = ::Math_obj::ceil(c14);
HXDLIN(  27)									v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            								}
            							}
HXDLIN(  27)							Float a20 = v_ay1;
HXDLIN(  27)							Float b32 = v_by1;
HXDLIN(  27)							Float c15 = v_cy1;
HXDLIN(  27)							if ((a20 > b32)) {
HXLINE(  27)								if ((a20 > c15)) {
HXLINE(  27)									int min11;
HXDLIN(  27)									if ((b32 > c15)) {
HXLINE(  27)										min11 = ::Math_obj::floor(c15);
            									}
            									else {
HXLINE(  27)										min11 = ::Math_obj::floor(b32);
            									}
HXDLIN(  27)									int ii_min25 = min11;
HXDLIN(  27)									int ii_max25 = ::Math_obj::ceil(a20);
HXDLIN(  27)									v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            								}
            								else {
HXLINE(  27)									int ii_min26 = ::Math_obj::floor(b32);
HXDLIN(  27)									int ii_max26 = ::Math_obj::ceil(c15);
HXDLIN(  27)									v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            								}
            							}
            							else {
HXLINE(  27)								if ((b32 > c15)) {
HXLINE(  27)									int min12;
HXDLIN(  27)									if ((a20 > c15)) {
HXLINE(  27)										min12 = ::Math_obj::floor(c15);
            									}
            									else {
HXLINE(  27)										min12 = ::Math_obj::ceil(a20);
            									}
HXDLIN(  27)									int ii_min27 = min12;
HXDLIN(  27)									int ii_max27 = ::Math_obj::ceil(b32);
HXDLIN(  27)									v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            								}
            								else {
HXLINE(  27)									int ii_min28 = ::Math_obj::floor(a20);
HXDLIN(  27)									int ii_max28 = ::Math_obj::ceil(c15);
HXDLIN(  27)									v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            								}
            							}
            						}
HXDLIN(  27)						if (hasUndo1) {
HXLINE(  27)							v_undoImage1 = undoImage3;
HXDLIN(  27)							v_undoX1 = xIter31->start;
HXDLIN(  27)							v_undoY1 = yIter31->start;
            						}
            					}
            				}
HXDLIN(  27)				bool resize28;
HXDLIN(  27)				if (::hx::IsNotNull( thisImage->mask )) {
HXLINE(  27)					resize28 = includeMask;
            				}
            				else {
HXLINE(  27)					resize28 = false;
            				}
HXDLIN(  27)				if (resize28) {
HXLINE(  27)					 ::pi_xy::ImageStruct v11 = ::pi_xy::transformation::_ScaleImage::ScaleImage_Fields__obj::scalingXY(thisImage->mask,sx,sy,thisImage->mask->transparent,includeMask);
HXDLIN(  27)					nextImage1->useMask = true;
HXDLIN(  27)					nextImage1->mask = v11;
            				}
HXDLIN(  27)				resize = nextImage1;
            			}
            		}
            		else {
HXLINE(  27)			resize = pixelimage;
            		}
HXLINE(  28)		{
HXLINE(  28)			int _g96 = 0;
HXDLIN(  28)			int _g97 = ( (int)(here->image->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) );
HXDLIN(  28)			while((_g96 < _g97)){
HXLINE(  28)				_g96 = (_g96 + 1);
HXDLIN(  28)				int i32 = (_g96 - 1);
HXDLIN(  28)				{
HXLINE(  28)					::Dynamic this90 = here->image;
HXDLIN(  28)					::iterMagic::Iimg_obj::set(this90,i32,::iterMagic::Iimg_obj::get(resize->image,i32));
            				}
            			}
            		}
HXLINE(  29)		return here;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PNG_Impl__obj,from,return )


PNG_Impl__obj::PNG_Impl__obj()
{
}

bool PNG_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"to") ) { outValue = to_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"from") ) { outValue = from_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *PNG_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *PNG_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class PNG_Impl__obj::__mClass;

static ::String PNG_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("to",7b,65,00,00),
	HX_("from",6a,a5,c2,43),
	::String(null())
};

void PNG_Impl__obj::__register()
{
	PNG_Impl__obj _hx_dummy;
	PNG_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.imageAbstracts._PNG.PNG_Impl_",16,0b,7d,94);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PNG_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PNG_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< PNG_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PNG_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PNG_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace imageAbstracts
} // end namespace _PNG
