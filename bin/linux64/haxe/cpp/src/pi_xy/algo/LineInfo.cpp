// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_algo_LineInfo
#include <pi_xy/algo/LineInfo.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c0bff74b0d384a34_15_new,"pi_xy.algo.LineInfo","new",0xfa73caa8,"pi_xy.algo.LineInfo.new","pi_xy/algo/QuadPoints.hx",15,0x7e1fd9a0)
namespace pi_xy{
namespace algo{

void LineInfo_obj::__construct(Float px,Float py,Float thick,Float _hx_long,Float theta){
            	HX_STACKFRAME(&_hx_pos_c0bff74b0d384a34_15_new)
HXLINE(  16)		this->px = px;
HXLINE(  17)		this->py = py;
HXLINE(  18)		this->thick = thick;
HXLINE(  19)		this->_hx_long = _hx_long;
HXLINE(  20)		this->theta = theta;
            	}

Dynamic LineInfo_obj::__CreateEmpty() { return new LineInfo_obj; }

void *LineInfo_obj::_hx_vtable = 0;

Dynamic LineInfo_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LineInfo_obj > _hx_result = new LineInfo_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool LineInfo_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0aa4dbd8;
}


LineInfo_obj::LineInfo_obj()
{
}

::hx::Val LineInfo_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"px") ) { return ::hx::Val( px ); }
		if (HX_FIELD_EQ(inName,"py") ) { return ::hx::Val( py ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"long") ) { return ::hx::Val( _hx_long ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"thick") ) { return ::hx::Val( thick ); }
		if (HX_FIELD_EQ(inName,"theta") ) { return ::hx::Val( theta ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LineInfo_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"px") ) { px=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"py") ) { py=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"long") ) { _hx_long=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"thick") ) { thick=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"theta") ) { theta=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LineInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("px",08,62,00,00));
	outFields->push(HX_("py",09,62,00,00));
	outFields->push(HX_("thick",5d,7e,89,0f));
	outFields->push(HX_("long",7c,a5,b7,47));
	outFields->push(HX_("theta",1e,84,86,0f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LineInfo_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(LineInfo_obj,px),HX_("px",08,62,00,00)},
	{::hx::fsFloat,(int)offsetof(LineInfo_obj,py),HX_("py",09,62,00,00)},
	{::hx::fsFloat,(int)offsetof(LineInfo_obj,thick),HX_("thick",5d,7e,89,0f)},
	{::hx::fsFloat,(int)offsetof(LineInfo_obj,_hx_long),HX_("long",7c,a5,b7,47)},
	{::hx::fsFloat,(int)offsetof(LineInfo_obj,theta),HX_("theta",1e,84,86,0f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LineInfo_obj_sStaticStorageInfo = 0;
#endif

static ::String LineInfo_obj_sMemberFields[] = {
	HX_("px",08,62,00,00),
	HX_("py",09,62,00,00),
	HX_("thick",5d,7e,89,0f),
	HX_("long",7c,a5,b7,47),
	HX_("theta",1e,84,86,0f),
	::String(null()) };

::hx::Class LineInfo_obj::__mClass;

void LineInfo_obj::__register()
{
	LineInfo_obj _hx_dummy;
	LineInfo_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo.LineInfo",b6,96,47,c6);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LineInfo_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LineInfo_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LineInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LineInfo_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
