// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_text_Font
#define INCLUDED_nme_text_Font

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(nme,text,Font)
HX_DECLARE_CLASS2(nme,utils,ByteArray)
HX_DECLARE_CLASS2(nme,utils,IDataInput)
HX_DECLARE_CLASS2(nme,utils,IDataOutput)
HX_DECLARE_CLASS2(nme,utils,IMemoryRange)

namespace nme{
namespace text{


class HXCPP_CLASS_ATTRIBUTES Font_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Font_obj OBJ_;
		Font_obj();

	public:
		enum { _hx_ClassId = 0x17acd962 };

		void __construct(::String __o_inFilename,::String inStyle,::String inType,::String resourceName,::String id);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.text.Font")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.text.Font"); }
		static ::hx::ObjectPtr< Font_obj > __new(::String __o_inFilename,::String inStyle,::String inType,::String resourceName,::String id);
		static ::hx::ObjectPtr< Font_obj > __alloc(::hx::Ctx *_hx_ctx,::String __o_inFilename,::String inStyle,::String inType,::String resourceName,::String id);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Font_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Font",ef,89,99,2e); }

		static void __boot();
		static  ::haxe::ds::StringMap nmeRegisteredFonts;
		static ::Array< ::Dynamic> nmeDeviceFonts;
		static ::Array< ::Dynamic> enumerateFonts(::hx::Null< bool >  enumerateDeviceFonts);
		static ::Dynamic enumerateFonts_dyn();

		static  ::Dynamic load(::String inFilename);
		static ::Dynamic load_dyn();

		static  ::Dynamic loadBytes( ::nme::utils::ByteArray inBytes);
		static ::Dynamic loadBytes_dyn();

		static void registerFontData( ::nme::text::Font instance, ::nme::utils::ByteArray inBytes);
		static ::Dynamic registerFontData_dyn();

		static void registerFont(::hx::Class font);
		static ::Dynamic registerFont_dyn();

		static bool get_useNative();
		static ::Dynamic get_useNative_dyn();

		static bool set_useNative(bool inVal);
		static ::Dynamic set_useNative_dyn();

		static ::cpp::Function< void  (bool) > nme_font_set_use_native;
		static Dynamic nme_font_set_use_native_dyn() { return nme_font_set_use_native;}
		static ::cpp::Function< bool  () > nme_font_get_use_native;
		static Dynamic nme_font_get_use_native_dyn() { return nme_font_get_use_native;}
		static  ::Dynamic freetype_import_font;
		static Dynamic freetype_import_font_dyn() { return freetype_import_font;}
		static  ::Dynamic nme_font_register_font;
		static Dynamic nme_font_register_font_dyn() { return nme_font_register_font;}
		static ::cpp::Function< void  ( ::hx::Object *) > nme_font_iterate_device_fonts;
		static Dynamic nme_font_iterate_device_fonts_dyn() { return nme_font_iterate_device_fonts;}
		::String fontName;
		::String fontType;
		::String knownFontStyle;
		::String get_fontStyle();
		::Dynamic get_fontStyle_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace nme
} // end namespace text

#endif /* INCLUDED_nme_text_Font */ 
