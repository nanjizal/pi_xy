// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_iterMagic__Img_ImageType_Impl_
#include <iterMagic/_Img/ImageType_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_10ecf758993bb835_21_toString,"iterMagic._Img.ImageType_Impl_","toString",0x4a7653d6,"iterMagic._Img.ImageType_Impl_.toString","iterMagic/Img.hx",21,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_7dceaf08328f54c5_1_boot,"iterMagic._Img.ImageType_Impl_","boot",0x3643aa5c,"iterMagic._Img.ImageType_Impl_.boot","?",1,0x0000003f)
namespace iterMagic{
namespace _Img{

void ImageType_Impl__obj::__construct() { }

Dynamic ImageType_Impl__obj::__CreateEmpty() { return new ImageType_Impl__obj; }

void *ImageType_Impl__obj::_hx_vtable = 0;

Dynamic ImageType_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ImageType_Impl__obj > _hx_result = new ImageType_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ImageType_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x03c170e0;
}

int ImageType_Impl__obj::BYTES_INT;

int ImageType_Impl__obj::ARRAY_INT;

int ImageType_Impl__obj::U32_ARR;

int ImageType_Impl__obj::VECTOR_INT;

int ImageType_Impl__obj::STACK_INT;

::String ImageType_Impl__obj::toString(int this1){
            	HX_STACKFRAME(&_hx_pos_10ecf758993bb835_21_toString)
HXDLIN(  21)		switch((int)(this1)){
            			case (int)0: {
HXLINE(  23)				return HX_("BYTES_INT",9b,af,b6,89);
            			}
            			break;
            			case (int)1: {
HXLINE(  25)				return HX_("ARRAY_INT",c9,43,33,ae);
            			}
            			break;
            			case (int)2: {
HXLINE(  27)				return HX_("U32_ARR",76,b5,d9,3b);
            			}
            			break;
            			case (int)3: {
HXLINE(  29)				return HX_("VECTOR_INT",13,68,64,1d);
            			}
            			break;
            			case (int)4: {
HXLINE(  31)				return HX_("STACK_INT",f8,40,bf,ef);
            			}
            			break;
            		}
HXLINE(  21)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ImageType_Impl__obj,toString,return )


ImageType_Impl__obj::ImageType_Impl__obj()
{
}

bool ImageType_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ImageType_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo ImageType_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &ImageType_Impl__obj::BYTES_INT,HX_("BYTES_INT",9b,af,b6,89)},
	{::hx::fsInt,(void *) &ImageType_Impl__obj::ARRAY_INT,HX_("ARRAY_INT",c9,43,33,ae)},
	{::hx::fsInt,(void *) &ImageType_Impl__obj::U32_ARR,HX_("U32_ARR",76,b5,d9,3b)},
	{::hx::fsInt,(void *) &ImageType_Impl__obj::VECTOR_INT,HX_("VECTOR_INT",13,68,64,1d)},
	{::hx::fsInt,(void *) &ImageType_Impl__obj::STACK_INT,HX_("STACK_INT",f8,40,bf,ef)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void ImageType_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ImageType_Impl__obj::BYTES_INT,"BYTES_INT");
	HX_MARK_MEMBER_NAME(ImageType_Impl__obj::ARRAY_INT,"ARRAY_INT");
	HX_MARK_MEMBER_NAME(ImageType_Impl__obj::U32_ARR,"U32_ARR");
	HX_MARK_MEMBER_NAME(ImageType_Impl__obj::VECTOR_INT,"VECTOR_INT");
	HX_MARK_MEMBER_NAME(ImageType_Impl__obj::STACK_INT,"STACK_INT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ImageType_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ImageType_Impl__obj::BYTES_INT,"BYTES_INT");
	HX_VISIT_MEMBER_NAME(ImageType_Impl__obj::ARRAY_INT,"ARRAY_INT");
	HX_VISIT_MEMBER_NAME(ImageType_Impl__obj::U32_ARR,"U32_ARR");
	HX_VISIT_MEMBER_NAME(ImageType_Impl__obj::VECTOR_INT,"VECTOR_INT");
	HX_VISIT_MEMBER_NAME(ImageType_Impl__obj::STACK_INT,"STACK_INT");
};

#endif

::hx::Class ImageType_Impl__obj::__mClass;

static ::String ImageType_Impl__obj_sStaticFields[] = {
	HX_("BYTES_INT",9b,af,b6,89),
	HX_("ARRAY_INT",c9,43,33,ae),
	HX_("U32_ARR",76,b5,d9,3b),
	HX_("VECTOR_INT",13,68,64,1d),
	HX_("STACK_INT",f8,40,bf,ef),
	HX_("toString",ac,d0,6e,38),
	::String(null())
};

void ImageType_Impl__obj::__register()
{
	ImageType_Impl__obj _hx_dummy;
	ImageType_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("iterMagic._Img.ImageType_Impl_",84,ea,31,1f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ImageType_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ImageType_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ImageType_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ImageType_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ImageType_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ImageType_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ImageType_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ImageType_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7dceaf08328f54c5_1_boot)
HXDLIN(   1)		BYTES_INT = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7dceaf08328f54c5_1_boot)
HXDLIN(   1)		ARRAY_INT = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7dceaf08328f54c5_1_boot)
HXDLIN(   1)		U32_ARR = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7dceaf08328f54c5_1_boot)
HXDLIN(   1)		VECTOR_INT = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7dceaf08328f54c5_1_boot)
HXDLIN(   1)		STACK_INT = 4;
            	}
}

} // end namespace iterMagic
} // end namespace _Img
