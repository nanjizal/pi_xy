// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo__Xiolin_Wu_Line_Xiolin_Wu_Line_Fields_
#include <pi_xy/algo/_Xiolin_Wu_Line/Xiolin_Wu_Line_Fields_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_c602934cd6dc924e_33_xWuLine,"pi_xy.algo._Xiolin_Wu_Line.Xiolin_Wu_Line_Fields_","xWuLine",0x0a3799a6,"pi_xy.algo._Xiolin_Wu_Line.Xiolin_Wu_Line_Fields_.xWuLine","pi_xy/algo/Xiolin_Wu_Line.hx",33,0x67a2f821)
HX_LOCAL_STACK_FRAME(_hx_pos_c602934cd6dc924e_129_roundFloor,"pi_xy.algo._Xiolin_Wu_Line.Xiolin_Wu_Line_Fields_","roundFloor",0x49695842,"pi_xy.algo._Xiolin_Wu_Line.Xiolin_Wu_Line_Fields_.roundFloor","pi_xy/algo/Xiolin_Wu_Line.hx",129,0x67a2f821)
HX_LOCAL_STACK_FRAME(_hx_pos_c602934cd6dc924e_134_fPart,"pi_xy.algo._Xiolin_Wu_Line.Xiolin_Wu_Line_Fields_","fPart",0x9902b455,"pi_xy.algo._Xiolin_Wu_Line.Xiolin_Wu_Line_Fields_.fPart","pi_xy/algo/Xiolin_Wu_Line.hx",134,0x67a2f821)
HX_LOCAL_STACK_FRAME(_hx_pos_c602934cd6dc924e_139_rfPart,"pi_xy.algo._Xiolin_Wu_Line.Xiolin_Wu_Line_Fields_","rfPart",0xb52aa56b,"pi_xy.algo._Xiolin_Wu_Line.Xiolin_Wu_Line_Fields_.rfPart","pi_xy/algo/Xiolin_Wu_Line.hx",139,0x67a2f821)
namespace pi_xy{
namespace algo{
namespace _Xiolin_Wu_Line{

void Xiolin_Wu_Line_Fields__obj::__construct() { }

Dynamic Xiolin_Wu_Line_Fields__obj::__CreateEmpty() { return new Xiolin_Wu_Line_Fields__obj; }

void *Xiolin_Wu_Line_Fields__obj::_hx_vtable = 0;

Dynamic Xiolin_Wu_Line_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Xiolin_Wu_Line_Fields__obj > _hx_result = new Xiolin_Wu_Line_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Xiolin_Wu_Line_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x448e7c3e;
}

void Xiolin_Wu_Line_Fields__obj::xWuLine( ::pi_xy::ImageStruct pixelImage,Float x0,Float y0,Float x1,Float y1,int color,::hx::Null< Float >  __o_brightRange){
            		Float brightRange = __o_brightRange.Default(((Float)0.25));
            	HX_STACKFRAME(&_hx_pos_c602934cd6dc924e_33_xWuLine)
HXLINE(  35)		int a = ((color >> 24) & 255);
HXLINE(  36)		int r = ((color >> 16) & 255);
HXLINE(  37)		int g = ((color >> 8) & 255);
HXLINE(  38)		int b = (color & 255);
HXLINE(  39)		bool steep = (::Math_obj::abs((y1 - y0)) > ::Math_obj::abs((x1 - x0)));
HXLINE(  40)		Float temp = ((Float)0.);
HXLINE(  41)		if (steep) {
HXLINE(  42)			temp = y0;
HXLINE(  43)			y0 = x0;
HXLINE(  44)			x0 = temp;
HXLINE(  45)			temp = y1;
HXLINE(  46)			y1 = x1;
HXLINE(  47)			x1 = temp;
            		}
HXLINE(  49)		if ((x0 > x1)) {
HXLINE(  50)			temp = x1;
HXLINE(  51)			x1 = x0;
HXLINE(  52)			x0 = temp;
HXLINE(  53)			temp = y1;
HXLINE(  54)			y1 = y0;
HXLINE(  55)			y0 = temp;
            		}
HXLINE(  57)		Float dx = (x1 - x0);
HXLINE(  58)		Float dy = (y1 - y0);
HXLINE(  59)		Float gradient;
HXDLIN(  59)		if ((dx == ((Float)0.0))) {
HXLINE(  59)			gradient = ((Float)1.);
            		}
            		else {
HXLINE(  59)			gradient = (dy / dx);
            		}
HXLINE(  60)		Float xend = (::Math_obj::floor(x0) + ((Float)0.5));
HXLINE(  61)		Float yend = (y0 + (gradient * (xend - x0)));
HXLINE(  62)		Float v = (x0 + ((Float)0.5));
HXDLIN(  62)		Float xgap = ((( (Float)(1) ) - v) + ::Math_obj::floor(v));
HXLINE(  63)		int xpxl1 = ::Std_obj::_hx_int(xend);
HXLINE(  64)		int ypxl1 = ::Math_obj::floor(yend);
HXLINE(  65)		int a0 = 0;
HXLINE(  67)		Float range = brightRange;
HXLINE(  68)		Float solid = (( (Float)(1) ) - range);
HXLINE(  69)		if (steep) {
HXLINE(  70)			int i = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * (((( (Float)(1) ) - yend) + ::Math_obj::floor(yend)) * xgap))));
HXDLIN(  70)			if ((i > 255)) {
HXLINE(  70)				i = 255;
            			}
HXDLIN(  70)			if ((i < 0)) {
HXLINE(  70)				i = 0;
            			}
HXDLIN(  70)			a0 = i;
HXLINE(  71)			{
HXLINE(  71)				int location;
HXDLIN(  71)				if (pixelImage->useVirtualPos) {
HXLINE(  71)					location = ::Std_obj::_hx_int(((((( (Float)(xpxl1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + ypxl1) - pixelImage->virtualX));
            				}
            				else {
HXLINE(  71)					location = ::Std_obj::_hx_int(( (Float)(((xpxl1 * pixelImage->width) + ypxl1)) ));
            				}
HXDLIN(  71)				bool _hx_tmp;
HXDLIN(  71)				if (pixelImage->transparent) {
HXLINE(  71)					_hx_tmp = (a0 < 254);
            				}
            				else {
HXLINE(  71)					_hx_tmp = false;
            				}
HXDLIN(  71)				if (_hx_tmp) {
HXLINE(  71)					int this1 = ::iterMagic::Iimg_obj::get(pixelImage->image,location);
HXDLIN(  71)					int old;
HXDLIN(  71)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  71)						old = ((((((this1 >> 24) & 255) << 24) | ((this1 & 255) << 16)) | (((this1 >> 8) & 255) << 8)) | ((this1 >> 16) & 255));
            					}
            					else {
HXLINE(  71)						old = this1;
            					}
HXDLIN(  71)					int rhs = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  71)					Float a1;
HXDLIN(  71)					int this2 = ((old >> 24) & 255);
HXDLIN(  71)					if ((this2 == 0)) {
HXLINE(  71)						a1 = ((Float)0.);
            					}
            					else {
HXLINE(  71)						a1 = (( (Float)(this2) ) / ( (Float)(255) ));
            					}
HXDLIN(  71)					Float r1;
HXDLIN(  71)					int this3 = ((old >> 16) & 255);
HXDLIN(  71)					if ((this3 == 0)) {
HXLINE(  71)						r1 = ((Float)0.);
            					}
            					else {
HXLINE(  71)						r1 = (( (Float)(this3) ) / ( (Float)(255) ));
            					}
HXDLIN(  71)					Float g1;
HXDLIN(  71)					int this4 = ((old >> 8) & 255);
HXDLIN(  71)					if ((this4 == 0)) {
HXLINE(  71)						g1 = ((Float)0.);
            					}
            					else {
HXLINE(  71)						g1 = (( (Float)(this4) ) / ( (Float)(255) ));
            					}
HXDLIN(  71)					Float b1;
HXDLIN(  71)					int this5 = (old & 255);
HXDLIN(  71)					if ((this5 == 0)) {
HXLINE(  71)						b1 = ((Float)0.);
            					}
            					else {
HXLINE(  71)						b1 = (( (Float)(this5) ) / ( (Float)(255) ));
            					}
HXDLIN(  71)					Float a2;
HXDLIN(  71)					int this6 = ((rhs >> 24) & 255);
HXDLIN(  71)					if ((this6 == 0)) {
HXLINE(  71)						a2 = ((Float)0.);
            					}
            					else {
HXLINE(  71)						a2 = (( (Float)(this6) ) / ( (Float)(255) ));
            					}
HXDLIN(  71)					Float r2;
HXDLIN(  71)					int this7 = ((rhs >> 16) & 255);
HXDLIN(  71)					if ((this7 == 0)) {
HXLINE(  71)						r2 = ((Float)0.);
            					}
            					else {
HXLINE(  71)						r2 = (( (Float)(this7) ) / ( (Float)(255) ));
            					}
HXDLIN(  71)					Float g2;
HXDLIN(  71)					int this8 = ((rhs >> 8) & 255);
HXDLIN(  71)					if ((this8 == 0)) {
HXLINE(  71)						g2 = ((Float)0.);
            					}
            					else {
HXLINE(  71)						g2 = (( (Float)(this8) ) / ( (Float)(255) ));
            					}
HXDLIN(  71)					Float b2;
HXDLIN(  71)					int this9 = (rhs & 255);
HXDLIN(  71)					if ((this9 == 0)) {
HXLINE(  71)						b2 = ((Float)0.);
            					}
            					else {
HXLINE(  71)						b2 = (( (Float)(this9) ) / ( (Float)(255) ));
            					}
HXDLIN(  71)					Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  71)					int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  71)					int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  71)					int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  71)					int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  71)					int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  71)					{
HXLINE(  71)						int _hx_tmp1;
HXDLIN(  71)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  71)							_hx_tmp1 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            						}
            						else {
HXLINE(  71)							_hx_tmp1 = blended;
            						}
HXDLIN(  71)						::iterMagic::Iimg_obj::set(pixelImage->image,location,_hx_tmp1);
            					}
            				}
            				else {
HXLINE(  71)					int value;
HXDLIN(  71)					if (pixelImage->isLittle) {
HXLINE(  71)						value = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            					}
            					else {
HXLINE(  71)						value = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            					}
HXDLIN(  71)					::iterMagic::Iimg_obj::set(pixelImage->image,location,value);
            				}
            			}
HXLINE(  72)			int i1 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * ((yend - ( (Float)(::Math_obj::floor(yend)) )) * xgap))));
HXDLIN(  72)			if ((i1 > 255)) {
HXLINE(  72)				i1 = 255;
            			}
HXDLIN(  72)			if ((i1 < 0)) {
HXLINE(  72)				i1 = 0;
            			}
HXDLIN(  72)			a0 = i1;
HXLINE(  73)			{
HXLINE(  73)				int x = (ypxl1 + 1);
HXDLIN(  73)				int location1;
HXDLIN(  73)				if (pixelImage->useVirtualPos) {
HXLINE(  73)					location1 = ::Std_obj::_hx_int(((((( (Float)(xpxl1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x) - pixelImage->virtualX));
            				}
            				else {
HXLINE(  73)					location1 = ::Std_obj::_hx_int(( (Float)(((xpxl1 * pixelImage->width) + x)) ));
            				}
HXDLIN(  73)				bool _hx_tmp2;
HXDLIN(  73)				if (pixelImage->transparent) {
HXLINE(  73)					_hx_tmp2 = (a0 < 254);
            				}
            				else {
HXLINE(  73)					_hx_tmp2 = false;
            				}
HXDLIN(  73)				if (_hx_tmp2) {
HXLINE(  73)					int this10 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  73)					int old1;
HXDLIN(  73)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)						old1 = ((((((this10 >> 24) & 255) << 24) | ((this10 & 255) << 16)) | (((this10 >> 8) & 255) << 8)) | ((this10 >> 16) & 255));
            					}
            					else {
HXLINE(  73)						old1 = this10;
            					}
HXDLIN(  73)					int rhs1 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)					Float a11;
HXDLIN(  73)					int this11 = ((old1 >> 24) & 255);
HXDLIN(  73)					if ((this11 == 0)) {
HXLINE(  73)						a11 = ((Float)0.);
            					}
            					else {
HXLINE(  73)						a11 = (( (Float)(this11) ) / ( (Float)(255) ));
            					}
HXDLIN(  73)					Float r11;
HXDLIN(  73)					int this12 = ((old1 >> 16) & 255);
HXDLIN(  73)					if ((this12 == 0)) {
HXLINE(  73)						r11 = ((Float)0.);
            					}
            					else {
HXLINE(  73)						r11 = (( (Float)(this12) ) / ( (Float)(255) ));
            					}
HXDLIN(  73)					Float g11;
HXDLIN(  73)					int this13 = ((old1 >> 8) & 255);
HXDLIN(  73)					if ((this13 == 0)) {
HXLINE(  73)						g11 = ((Float)0.);
            					}
            					else {
HXLINE(  73)						g11 = (( (Float)(this13) ) / ( (Float)(255) ));
            					}
HXDLIN(  73)					Float b11;
HXDLIN(  73)					int this14 = (old1 & 255);
HXDLIN(  73)					if ((this14 == 0)) {
HXLINE(  73)						b11 = ((Float)0.);
            					}
            					else {
HXLINE(  73)						b11 = (( (Float)(this14) ) / ( (Float)(255) ));
            					}
HXDLIN(  73)					Float a21;
HXDLIN(  73)					int this15 = ((rhs1 >> 24) & 255);
HXDLIN(  73)					if ((this15 == 0)) {
HXLINE(  73)						a21 = ((Float)0.);
            					}
            					else {
HXLINE(  73)						a21 = (( (Float)(this15) ) / ( (Float)(255) ));
            					}
HXDLIN(  73)					Float r21;
HXDLIN(  73)					int this16 = ((rhs1 >> 16) & 255);
HXDLIN(  73)					if ((this16 == 0)) {
HXLINE(  73)						r21 = ((Float)0.);
            					}
            					else {
HXLINE(  73)						r21 = (( (Float)(this16) ) / ( (Float)(255) ));
            					}
HXDLIN(  73)					Float g21;
HXDLIN(  73)					int this17 = ((rhs1 >> 8) & 255);
HXDLIN(  73)					if ((this17 == 0)) {
HXLINE(  73)						g21 = ((Float)0.);
            					}
            					else {
HXLINE(  73)						g21 = (( (Float)(this17) ) / ( (Float)(255) ));
            					}
HXDLIN(  73)					Float b21;
HXDLIN(  73)					int this18 = (rhs1 & 255);
HXDLIN(  73)					if ((this18 == 0)) {
HXLINE(  73)						b21 = ((Float)0.);
            					}
            					else {
HXLINE(  73)						b21 = (( (Float)(this18) ) / ( (Float)(255) ));
            					}
HXDLIN(  73)					Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  73)					int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  73)					int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  73)					int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a31) + (b21 * a21))));
HXDLIN(  73)					int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  73)					int blended1 = ((((a5 << 24) | (r4 << 16)) | (g4 << 8)) | b4);
HXDLIN(  73)					{
HXLINE(  73)						int _hx_tmp3;
HXDLIN(  73)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)							_hx_tmp3 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            						}
            						else {
HXLINE(  73)							_hx_tmp3 = blended1;
            						}
HXDLIN(  73)						::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp3);
            					}
            				}
            				else {
HXLINE(  73)					int value1;
HXDLIN(  73)					if (pixelImage->isLittle) {
HXLINE(  73)						value1 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            					}
            					else {
HXLINE(  73)						value1 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            					}
HXDLIN(  73)					::iterMagic::Iimg_obj::set(pixelImage->image,location1,value1);
            				}
            			}
            		}
            		else {
HXLINE(  75)			int i2 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * (((( (Float)(1) ) - yend) + ::Math_obj::floor(yend)) * xgap))));
HXDLIN(  75)			if ((i2 > 255)) {
HXLINE(  75)				i2 = 255;
            			}
HXDLIN(  75)			if ((i2 < 0)) {
HXLINE(  75)				i2 = 0;
            			}
HXDLIN(  75)			a0 = i2;
HXLINE(  76)			{
HXLINE(  76)				int location2;
HXDLIN(  76)				if (pixelImage->useVirtualPos) {
HXLINE(  76)					location2 = ::Std_obj::_hx_int(((((( (Float)(ypxl1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + xpxl1) - pixelImage->virtualX));
            				}
            				else {
HXLINE(  76)					location2 = ::Std_obj::_hx_int(( (Float)(((ypxl1 * pixelImage->width) + xpxl1)) ));
            				}
HXDLIN(  76)				bool _hx_tmp4;
HXDLIN(  76)				if (pixelImage->transparent) {
HXLINE(  76)					_hx_tmp4 = (a0 < 254);
            				}
            				else {
HXLINE(  76)					_hx_tmp4 = false;
            				}
HXDLIN(  76)				if (_hx_tmp4) {
HXLINE(  76)					int this19 = ::iterMagic::Iimg_obj::get(pixelImage->image,location2);
HXDLIN(  76)					int old2;
HXDLIN(  76)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  76)						old2 = ((((((this19 >> 24) & 255) << 24) | ((this19 & 255) << 16)) | (((this19 >> 8) & 255) << 8)) | ((this19 >> 16) & 255));
            					}
            					else {
HXLINE(  76)						old2 = this19;
            					}
HXDLIN(  76)					int rhs2 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  76)					Float a12;
HXDLIN(  76)					int this20 = ((old2 >> 24) & 255);
HXDLIN(  76)					if ((this20 == 0)) {
HXLINE(  76)						a12 = ((Float)0.);
            					}
            					else {
HXLINE(  76)						a12 = (( (Float)(this20) ) / ( (Float)(255) ));
            					}
HXDLIN(  76)					Float r12;
HXDLIN(  76)					int this21 = ((old2 >> 16) & 255);
HXDLIN(  76)					if ((this21 == 0)) {
HXLINE(  76)						r12 = ((Float)0.);
            					}
            					else {
HXLINE(  76)						r12 = (( (Float)(this21) ) / ( (Float)(255) ));
            					}
HXDLIN(  76)					Float g12;
HXDLIN(  76)					int this22 = ((old2 >> 8) & 255);
HXDLIN(  76)					if ((this22 == 0)) {
HXLINE(  76)						g12 = ((Float)0.);
            					}
            					else {
HXLINE(  76)						g12 = (( (Float)(this22) ) / ( (Float)(255) ));
            					}
HXDLIN(  76)					Float b12;
HXDLIN(  76)					int this23 = (old2 & 255);
HXDLIN(  76)					if ((this23 == 0)) {
HXLINE(  76)						b12 = ((Float)0.);
            					}
            					else {
HXLINE(  76)						b12 = (( (Float)(this23) ) / ( (Float)(255) ));
            					}
HXDLIN(  76)					Float a22;
HXDLIN(  76)					int this24 = ((rhs2 >> 24) & 255);
HXDLIN(  76)					if ((this24 == 0)) {
HXLINE(  76)						a22 = ((Float)0.);
            					}
            					else {
HXLINE(  76)						a22 = (( (Float)(this24) ) / ( (Float)(255) ));
            					}
HXDLIN(  76)					Float r22;
HXDLIN(  76)					int this25 = ((rhs2 >> 16) & 255);
HXDLIN(  76)					if ((this25 == 0)) {
HXLINE(  76)						r22 = ((Float)0.);
            					}
            					else {
HXLINE(  76)						r22 = (( (Float)(this25) ) / ( (Float)(255) ));
            					}
HXDLIN(  76)					Float g22;
HXDLIN(  76)					int this26 = ((rhs2 >> 8) & 255);
HXDLIN(  76)					if ((this26 == 0)) {
HXLINE(  76)						g22 = ((Float)0.);
            					}
            					else {
HXLINE(  76)						g22 = (( (Float)(this26) ) / ( (Float)(255) ));
            					}
HXDLIN(  76)					Float b22;
HXDLIN(  76)					int this27 = (rhs2 & 255);
HXDLIN(  76)					if ((this27 == 0)) {
HXLINE(  76)						b22 = ((Float)0.);
            					}
            					else {
HXLINE(  76)						b22 = (( (Float)(this27) ) / ( (Float)(255) ));
            					}
HXDLIN(  76)					Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  76)					int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  76)					int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  76)					int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a32) + (b22 * a22))));
HXDLIN(  76)					int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  76)					int blended2 = ((((a6 << 24) | (r5 << 16)) | (g5 << 8)) | b5);
HXDLIN(  76)					{
HXLINE(  76)						int _hx_tmp5;
HXDLIN(  76)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  76)							_hx_tmp5 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            						}
            						else {
HXLINE(  76)							_hx_tmp5 = blended2;
            						}
HXDLIN(  76)						::iterMagic::Iimg_obj::set(pixelImage->image,location2,_hx_tmp5);
            					}
            				}
            				else {
HXLINE(  76)					int value2;
HXDLIN(  76)					if (pixelImage->isLittle) {
HXLINE(  76)						value2 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            					}
            					else {
HXLINE(  76)						value2 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            					}
HXDLIN(  76)					::iterMagic::Iimg_obj::set(pixelImage->image,location2,value2);
            				}
            			}
HXLINE(  77)			int i3 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * ((yend - ( (Float)(::Math_obj::floor(yend)) )) * xgap))));
HXDLIN(  77)			if ((i3 > 255)) {
HXLINE(  77)				i3 = 255;
            			}
HXDLIN(  77)			if ((i3 < 0)) {
HXLINE(  77)				i3 = 0;
            			}
HXDLIN(  77)			a0 = i3;
HXLINE(  78)			{
HXLINE(  78)				int y = (ypxl1 + 1);
HXDLIN(  78)				int location3;
HXDLIN(  78)				if (pixelImage->useVirtualPos) {
HXLINE(  78)					location3 = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + xpxl1) - pixelImage->virtualX));
            				}
            				else {
HXLINE(  78)					location3 = ::Std_obj::_hx_int(( (Float)(((y * pixelImage->width) + xpxl1)) ));
            				}
HXDLIN(  78)				bool _hx_tmp6;
HXDLIN(  78)				if (pixelImage->transparent) {
HXLINE(  78)					_hx_tmp6 = (a0 < 254);
            				}
            				else {
HXLINE(  78)					_hx_tmp6 = false;
            				}
HXDLIN(  78)				if (_hx_tmp6) {
HXLINE(  78)					int this28 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN(  78)					int old3;
HXDLIN(  78)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)						old3 = ((((((this28 >> 24) & 255) << 24) | ((this28 & 255) << 16)) | (((this28 >> 8) & 255) << 8)) | ((this28 >> 16) & 255));
            					}
            					else {
HXLINE(  78)						old3 = this28;
            					}
HXDLIN(  78)					int rhs3 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  78)					Float a13;
HXDLIN(  78)					int this29 = ((old3 >> 24) & 255);
HXDLIN(  78)					if ((this29 == 0)) {
HXLINE(  78)						a13 = ((Float)0.);
            					}
            					else {
HXLINE(  78)						a13 = (( (Float)(this29) ) / ( (Float)(255) ));
            					}
HXDLIN(  78)					Float r13;
HXDLIN(  78)					int this30 = ((old3 >> 16) & 255);
HXDLIN(  78)					if ((this30 == 0)) {
HXLINE(  78)						r13 = ((Float)0.);
            					}
            					else {
HXLINE(  78)						r13 = (( (Float)(this30) ) / ( (Float)(255) ));
            					}
HXDLIN(  78)					Float g13;
HXDLIN(  78)					int this31 = ((old3 >> 8) & 255);
HXDLIN(  78)					if ((this31 == 0)) {
HXLINE(  78)						g13 = ((Float)0.);
            					}
            					else {
HXLINE(  78)						g13 = (( (Float)(this31) ) / ( (Float)(255) ));
            					}
HXDLIN(  78)					Float b13;
HXDLIN(  78)					int this32 = (old3 & 255);
HXDLIN(  78)					if ((this32 == 0)) {
HXLINE(  78)						b13 = ((Float)0.);
            					}
            					else {
HXLINE(  78)						b13 = (( (Float)(this32) ) / ( (Float)(255) ));
            					}
HXDLIN(  78)					Float a23;
HXDLIN(  78)					int this33 = ((rhs3 >> 24) & 255);
HXDLIN(  78)					if ((this33 == 0)) {
HXLINE(  78)						a23 = ((Float)0.);
            					}
            					else {
HXLINE(  78)						a23 = (( (Float)(this33) ) / ( (Float)(255) ));
            					}
HXDLIN(  78)					Float r23;
HXDLIN(  78)					int this34 = ((rhs3 >> 16) & 255);
HXDLIN(  78)					if ((this34 == 0)) {
HXLINE(  78)						r23 = ((Float)0.);
            					}
            					else {
HXLINE(  78)						r23 = (( (Float)(this34) ) / ( (Float)(255) ));
            					}
HXDLIN(  78)					Float g23;
HXDLIN(  78)					int this35 = ((rhs3 >> 8) & 255);
HXDLIN(  78)					if ((this35 == 0)) {
HXLINE(  78)						g23 = ((Float)0.);
            					}
            					else {
HXLINE(  78)						g23 = (( (Float)(this35) ) / ( (Float)(255) ));
            					}
HXDLIN(  78)					Float b23;
HXDLIN(  78)					int this36 = (rhs3 & 255);
HXDLIN(  78)					if ((this36 == 0)) {
HXLINE(  78)						b23 = ((Float)0.);
            					}
            					else {
HXLINE(  78)						b23 = (( (Float)(this36) ) / ( (Float)(255) ));
            					}
HXDLIN(  78)					Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  78)					int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  78)					int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  78)					int b6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a33) + (b23 * a23))));
HXDLIN(  78)					int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  78)					int blended3 = ((((a7 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  78)					{
HXLINE(  78)						int _hx_tmp7;
HXDLIN(  78)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)							_hx_tmp7 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            						}
            						else {
HXLINE(  78)							_hx_tmp7 = blended3;
            						}
HXDLIN(  78)						::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp7);
            					}
            				}
            				else {
HXLINE(  78)					int value3;
HXDLIN(  78)					if (pixelImage->isLittle) {
HXLINE(  78)						value3 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            					}
            					else {
HXLINE(  78)						value3 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            					}
HXDLIN(  78)					::iterMagic::Iimg_obj::set(pixelImage->image,location3,value3);
            				}
            			}
            		}
HXLINE(  85)		Float intery = (yend + gradient);
HXLINE(  86)		Float xend1 = (::Math_obj::floor(x1) + ((Float)0.5));
HXLINE(  87)		Float yend1 = (y1 + (gradient * (xend1 - x1)));
HXLINE(  88)		Float v1 = (x1 + ((Float)0.5));
HXDLIN(  88)		Float xgap1 = (v1 - ( (Float)(::Math_obj::floor(v1)) ));
HXLINE(  89)		int xpxl2 = ::Std_obj::_hx_int(xend1);
HXLINE(  90)		int ypxl2 = ::Math_obj::floor(yend1);
HXLINE(  91)		if (steep) {
HXLINE(  92)			int i4 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * (((( (Float)(1) ) - yend1) + ::Math_obj::floor(yend1)) * xgap1))));
HXDLIN(  92)			if ((i4 > 255)) {
HXLINE(  92)				i4 = 255;
            			}
HXDLIN(  92)			if ((i4 < 0)) {
HXLINE(  92)				i4 = 0;
            			}
HXDLIN(  92)			a0 = i4;
HXLINE(  93)			{
HXLINE(  93)				int location4;
HXDLIN(  93)				if (pixelImage->useVirtualPos) {
HXLINE(  93)					location4 = ::Std_obj::_hx_int(((((( (Float)(xpxl2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + ypxl2) - pixelImage->virtualX));
            				}
            				else {
HXLINE(  93)					location4 = ::Std_obj::_hx_int(( (Float)(((xpxl2 * pixelImage->width) + ypxl2)) ));
            				}
HXDLIN(  93)				bool _hx_tmp8;
HXDLIN(  93)				if (pixelImage->transparent) {
HXLINE(  93)					_hx_tmp8 = (a0 < 254);
            				}
            				else {
HXLINE(  93)					_hx_tmp8 = false;
            				}
HXDLIN(  93)				if (_hx_tmp8) {
HXLINE(  93)					int this37 = ::iterMagic::Iimg_obj::get(pixelImage->image,location4);
HXDLIN(  93)					int old4;
HXDLIN(  93)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  93)						old4 = ((((((this37 >> 24) & 255) << 24) | ((this37 & 255) << 16)) | (((this37 >> 8) & 255) << 8)) | ((this37 >> 16) & 255));
            					}
            					else {
HXLINE(  93)						old4 = this37;
            					}
HXDLIN(  93)					int rhs4 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  93)					Float a14;
HXDLIN(  93)					int this38 = ((old4 >> 24) & 255);
HXDLIN(  93)					if ((this38 == 0)) {
HXLINE(  93)						a14 = ((Float)0.);
            					}
            					else {
HXLINE(  93)						a14 = (( (Float)(this38) ) / ( (Float)(255) ));
            					}
HXDLIN(  93)					Float r14;
HXDLIN(  93)					int this39 = ((old4 >> 16) & 255);
HXDLIN(  93)					if ((this39 == 0)) {
HXLINE(  93)						r14 = ((Float)0.);
            					}
            					else {
HXLINE(  93)						r14 = (( (Float)(this39) ) / ( (Float)(255) ));
            					}
HXDLIN(  93)					Float g14;
HXDLIN(  93)					int this40 = ((old4 >> 8) & 255);
HXDLIN(  93)					if ((this40 == 0)) {
HXLINE(  93)						g14 = ((Float)0.);
            					}
            					else {
HXLINE(  93)						g14 = (( (Float)(this40) ) / ( (Float)(255) ));
            					}
HXDLIN(  93)					Float b14;
HXDLIN(  93)					int this41 = (old4 & 255);
HXDLIN(  93)					if ((this41 == 0)) {
HXLINE(  93)						b14 = ((Float)0.);
            					}
            					else {
HXLINE(  93)						b14 = (( (Float)(this41) ) / ( (Float)(255) ));
            					}
HXDLIN(  93)					Float a24;
HXDLIN(  93)					int this42 = ((rhs4 >> 24) & 255);
HXDLIN(  93)					if ((this42 == 0)) {
HXLINE(  93)						a24 = ((Float)0.);
            					}
            					else {
HXLINE(  93)						a24 = (( (Float)(this42) ) / ( (Float)(255) ));
            					}
HXDLIN(  93)					Float r24;
HXDLIN(  93)					int this43 = ((rhs4 >> 16) & 255);
HXDLIN(  93)					if ((this43 == 0)) {
HXLINE(  93)						r24 = ((Float)0.);
            					}
            					else {
HXLINE(  93)						r24 = (( (Float)(this43) ) / ( (Float)(255) ));
            					}
HXDLIN(  93)					Float g24;
HXDLIN(  93)					int this44 = ((rhs4 >> 8) & 255);
HXDLIN(  93)					if ((this44 == 0)) {
HXLINE(  93)						g24 = ((Float)0.);
            					}
            					else {
HXLINE(  93)						g24 = (( (Float)(this44) ) / ( (Float)(255) ));
            					}
HXDLIN(  93)					Float b24;
HXDLIN(  93)					int this45 = (rhs4 & 255);
HXDLIN(  93)					if ((this45 == 0)) {
HXLINE(  93)						b24 = ((Float)0.);
            					}
            					else {
HXLINE(  93)						b24 = (( (Float)(this45) ) / ( (Float)(255) ));
            					}
HXDLIN(  93)					Float a34 = (a14 * (( (Float)(1) ) - a24));
HXDLIN(  93)					int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  93)					int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  93)					int b7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a34) + (b24 * a24))));
HXDLIN(  93)					int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  93)					int blended4 = ((((a8 << 24) | (r7 << 16)) | (g7 << 8)) | b7);
HXDLIN(  93)					{
HXLINE(  93)						int _hx_tmp9;
HXDLIN(  93)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  93)							_hx_tmp9 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            						}
            						else {
HXLINE(  93)							_hx_tmp9 = blended4;
            						}
HXDLIN(  93)						::iterMagic::Iimg_obj::set(pixelImage->image,location4,_hx_tmp9);
            					}
            				}
            				else {
HXLINE(  93)					int value4;
HXDLIN(  93)					if (pixelImage->isLittle) {
HXLINE(  93)						value4 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            					}
            					else {
HXLINE(  93)						value4 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            					}
HXDLIN(  93)					::iterMagic::Iimg_obj::set(pixelImage->image,location4,value4);
            				}
            			}
HXLINE(  94)			int i5 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * ((yend1 - ( (Float)(::Math_obj::floor(yend1)) )) * xgap1))));
HXDLIN(  94)			if ((i5 > 255)) {
HXLINE(  94)				i5 = 255;
            			}
HXDLIN(  94)			if ((i5 < 0)) {
HXLINE(  94)				i5 = 0;
            			}
HXDLIN(  94)			a0 = i5;
HXLINE(  95)			{
HXLINE(  95)				int x2 = (ypxl2 + 1);
HXDLIN(  95)				int location5;
HXDLIN(  95)				if (pixelImage->useVirtualPos) {
HXLINE(  95)					location5 = ::Std_obj::_hx_int(((((( (Float)(xpxl2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x2) - pixelImage->virtualX));
            				}
            				else {
HXLINE(  95)					location5 = ::Std_obj::_hx_int(( (Float)(((xpxl2 * pixelImage->width) + x2)) ));
            				}
HXDLIN(  95)				bool _hx_tmp10;
HXDLIN(  95)				if (pixelImage->transparent) {
HXLINE(  95)					_hx_tmp10 = (a0 < 254);
            				}
            				else {
HXLINE(  95)					_hx_tmp10 = false;
            				}
HXDLIN(  95)				if (_hx_tmp10) {
HXLINE(  95)					int this46 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN(  95)					int old5;
HXDLIN(  95)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)						old5 = ((((((this46 >> 24) & 255) << 24) | ((this46 & 255) << 16)) | (((this46 >> 8) & 255) << 8)) | ((this46 >> 16) & 255));
            					}
            					else {
HXLINE(  95)						old5 = this46;
            					}
HXDLIN(  95)					int rhs5 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  95)					Float a15;
HXDLIN(  95)					int this47 = ((old5 >> 24) & 255);
HXDLIN(  95)					if ((this47 == 0)) {
HXLINE(  95)						a15 = ((Float)0.);
            					}
            					else {
HXLINE(  95)						a15 = (( (Float)(this47) ) / ( (Float)(255) ));
            					}
HXDLIN(  95)					Float r15;
HXDLIN(  95)					int this48 = ((old5 >> 16) & 255);
HXDLIN(  95)					if ((this48 == 0)) {
HXLINE(  95)						r15 = ((Float)0.);
            					}
            					else {
HXLINE(  95)						r15 = (( (Float)(this48) ) / ( (Float)(255) ));
            					}
HXDLIN(  95)					Float g15;
HXDLIN(  95)					int this49 = ((old5 >> 8) & 255);
HXDLIN(  95)					if ((this49 == 0)) {
HXLINE(  95)						g15 = ((Float)0.);
            					}
            					else {
HXLINE(  95)						g15 = (( (Float)(this49) ) / ( (Float)(255) ));
            					}
HXDLIN(  95)					Float b15;
HXDLIN(  95)					int this50 = (old5 & 255);
HXDLIN(  95)					if ((this50 == 0)) {
HXLINE(  95)						b15 = ((Float)0.);
            					}
            					else {
HXLINE(  95)						b15 = (( (Float)(this50) ) / ( (Float)(255) ));
            					}
HXDLIN(  95)					Float a25;
HXDLIN(  95)					int this51 = ((rhs5 >> 24) & 255);
HXDLIN(  95)					if ((this51 == 0)) {
HXLINE(  95)						a25 = ((Float)0.);
            					}
            					else {
HXLINE(  95)						a25 = (( (Float)(this51) ) / ( (Float)(255) ));
            					}
HXDLIN(  95)					Float r25;
HXDLIN(  95)					int this52 = ((rhs5 >> 16) & 255);
HXDLIN(  95)					if ((this52 == 0)) {
HXLINE(  95)						r25 = ((Float)0.);
            					}
            					else {
HXLINE(  95)						r25 = (( (Float)(this52) ) / ( (Float)(255) ));
            					}
HXDLIN(  95)					Float g25;
HXDLIN(  95)					int this53 = ((rhs5 >> 8) & 255);
HXDLIN(  95)					if ((this53 == 0)) {
HXLINE(  95)						g25 = ((Float)0.);
            					}
            					else {
HXLINE(  95)						g25 = (( (Float)(this53) ) / ( (Float)(255) ));
            					}
HXDLIN(  95)					Float b25;
HXDLIN(  95)					int this54 = (rhs5 & 255);
HXDLIN(  95)					if ((this54 == 0)) {
HXLINE(  95)						b25 = ((Float)0.);
            					}
            					else {
HXLINE(  95)						b25 = (( (Float)(this54) ) / ( (Float)(255) ));
            					}
HXDLIN(  95)					Float a35 = (a15 * (( (Float)(1) ) - a25));
HXDLIN(  95)					int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  95)					int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  95)					int b8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a35) + (b25 * a25))));
HXDLIN(  95)					int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  95)					int blended5 = ((((a9 << 24) | (r8 << 16)) | (g8 << 8)) | b8);
HXDLIN(  95)					{
HXLINE(  95)						int _hx_tmp11;
HXDLIN(  95)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  95)							_hx_tmp11 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            						}
            						else {
HXLINE(  95)							_hx_tmp11 = blended5;
            						}
HXDLIN(  95)						::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp11);
            					}
            				}
            				else {
HXLINE(  95)					int value5;
HXDLIN(  95)					if (pixelImage->isLittle) {
HXLINE(  95)						value5 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            					}
            					else {
HXLINE(  95)						value5 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            					}
HXDLIN(  95)					::iterMagic::Iimg_obj::set(pixelImage->image,location5,value5);
            				}
            			}
            		}
            		else {
HXLINE(  97)			int i6 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * (((( (Float)(1) ) - yend1) + ::Math_obj::floor(yend1)) * xgap1))));
HXDLIN(  97)			if ((i6 > 255)) {
HXLINE(  97)				i6 = 255;
            			}
HXDLIN(  97)			if ((i6 < 0)) {
HXLINE(  97)				i6 = 0;
            			}
HXDLIN(  97)			a0 = i6;
HXLINE(  98)			{
HXLINE(  98)				int location6;
HXDLIN(  98)				if (pixelImage->useVirtualPos) {
HXLINE(  98)					location6 = ::Std_obj::_hx_int(((((( (Float)(ypxl2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + xpxl2) - pixelImage->virtualX));
            				}
            				else {
HXLINE(  98)					location6 = ::Std_obj::_hx_int(( (Float)(((ypxl2 * pixelImage->width) + xpxl2)) ));
            				}
HXDLIN(  98)				bool _hx_tmp12;
HXDLIN(  98)				if (pixelImage->transparent) {
HXLINE(  98)					_hx_tmp12 = (a0 < 254);
            				}
            				else {
HXLINE(  98)					_hx_tmp12 = false;
            				}
HXDLIN(  98)				if (_hx_tmp12) {
HXLINE(  98)					int this55 = ::iterMagic::Iimg_obj::get(pixelImage->image,location6);
HXDLIN(  98)					int old6;
HXDLIN(  98)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)						old6 = ((((((this55 >> 24) & 255) << 24) | ((this55 & 255) << 16)) | (((this55 >> 8) & 255) << 8)) | ((this55 >> 16) & 255));
            					}
            					else {
HXLINE(  98)						old6 = this55;
            					}
HXDLIN(  98)					int rhs6 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  98)					Float a16;
HXDLIN(  98)					int this56 = ((old6 >> 24) & 255);
HXDLIN(  98)					if ((this56 == 0)) {
HXLINE(  98)						a16 = ((Float)0.);
            					}
            					else {
HXLINE(  98)						a16 = (( (Float)(this56) ) / ( (Float)(255) ));
            					}
HXDLIN(  98)					Float r16;
HXDLIN(  98)					int this57 = ((old6 >> 16) & 255);
HXDLIN(  98)					if ((this57 == 0)) {
HXLINE(  98)						r16 = ((Float)0.);
            					}
            					else {
HXLINE(  98)						r16 = (( (Float)(this57) ) / ( (Float)(255) ));
            					}
HXDLIN(  98)					Float g16;
HXDLIN(  98)					int this58 = ((old6 >> 8) & 255);
HXDLIN(  98)					if ((this58 == 0)) {
HXLINE(  98)						g16 = ((Float)0.);
            					}
            					else {
HXLINE(  98)						g16 = (( (Float)(this58) ) / ( (Float)(255) ));
            					}
HXDLIN(  98)					Float b16;
HXDLIN(  98)					int this59 = (old6 & 255);
HXDLIN(  98)					if ((this59 == 0)) {
HXLINE(  98)						b16 = ((Float)0.);
            					}
            					else {
HXLINE(  98)						b16 = (( (Float)(this59) ) / ( (Float)(255) ));
            					}
HXDLIN(  98)					Float a26;
HXDLIN(  98)					int this60 = ((rhs6 >> 24) & 255);
HXDLIN(  98)					if ((this60 == 0)) {
HXLINE(  98)						a26 = ((Float)0.);
            					}
            					else {
HXLINE(  98)						a26 = (( (Float)(this60) ) / ( (Float)(255) ));
            					}
HXDLIN(  98)					Float r26;
HXDLIN(  98)					int this61 = ((rhs6 >> 16) & 255);
HXDLIN(  98)					if ((this61 == 0)) {
HXLINE(  98)						r26 = ((Float)0.);
            					}
            					else {
HXLINE(  98)						r26 = (( (Float)(this61) ) / ( (Float)(255) ));
            					}
HXDLIN(  98)					Float g26;
HXDLIN(  98)					int this62 = ((rhs6 >> 8) & 255);
HXDLIN(  98)					if ((this62 == 0)) {
HXLINE(  98)						g26 = ((Float)0.);
            					}
            					else {
HXLINE(  98)						g26 = (( (Float)(this62) ) / ( (Float)(255) ));
            					}
HXDLIN(  98)					Float b26;
HXDLIN(  98)					int this63 = (rhs6 & 255);
HXDLIN(  98)					if ((this63 == 0)) {
HXLINE(  98)						b26 = ((Float)0.);
            					}
            					else {
HXLINE(  98)						b26 = (( (Float)(this63) ) / ( (Float)(255) ));
            					}
HXDLIN(  98)					Float a36 = (a16 * (( (Float)(1) ) - a26));
HXDLIN(  98)					int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN(  98)					int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN(  98)					int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b16 * a36) + (b26 * a26))));
HXDLIN(  98)					int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  98)					int blended6 = ((((a10 << 24) | (r9 << 16)) | (g9 << 8)) | b9);
HXDLIN(  98)					{
HXLINE(  98)						int _hx_tmp13;
HXDLIN(  98)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)							_hx_tmp13 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            						}
            						else {
HXLINE(  98)							_hx_tmp13 = blended6;
            						}
HXDLIN(  98)						::iterMagic::Iimg_obj::set(pixelImage->image,location6,_hx_tmp13);
            					}
            				}
            				else {
HXLINE(  98)					int value6;
HXDLIN(  98)					if (pixelImage->isLittle) {
HXLINE(  98)						value6 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            					}
            					else {
HXLINE(  98)						value6 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            					}
HXDLIN(  98)					::iterMagic::Iimg_obj::set(pixelImage->image,location6,value6);
            				}
            			}
HXLINE(  99)			int i7 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * ((yend1 - ( (Float)(::Math_obj::floor(yend1)) )) * xgap1))));
HXDLIN(  99)			if ((i7 > 255)) {
HXLINE(  99)				i7 = 255;
            			}
HXDLIN(  99)			if ((i7 < 0)) {
HXLINE(  99)				i7 = 0;
            			}
HXDLIN(  99)			a0 = i7;
HXLINE( 100)			{
HXLINE( 100)				int y2 = (ypxl2 + 1);
HXDLIN( 100)				int location7;
HXDLIN( 100)				if (pixelImage->useVirtualPos) {
HXLINE( 100)					location7 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + xpxl2) - pixelImage->virtualX));
            				}
            				else {
HXLINE( 100)					location7 = ::Std_obj::_hx_int(( (Float)(((y2 * pixelImage->width) + xpxl2)) ));
            				}
HXDLIN( 100)				bool _hx_tmp14;
HXDLIN( 100)				if (pixelImage->transparent) {
HXLINE( 100)					_hx_tmp14 = (a0 < 254);
            				}
            				else {
HXLINE( 100)					_hx_tmp14 = false;
            				}
HXDLIN( 100)				if (_hx_tmp14) {
HXLINE( 100)					int this64 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN( 100)					int old7;
HXDLIN( 100)					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 100)						old7 = ((((((this64 >> 24) & 255) << 24) | ((this64 & 255) << 16)) | (((this64 >> 8) & 255) << 8)) | ((this64 >> 16) & 255));
            					}
            					else {
HXLINE( 100)						old7 = this64;
            					}
HXDLIN( 100)					int rhs7 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 100)					Float a17;
HXDLIN( 100)					int this65 = ((old7 >> 24) & 255);
HXDLIN( 100)					if ((this65 == 0)) {
HXLINE( 100)						a17 = ((Float)0.);
            					}
            					else {
HXLINE( 100)						a17 = (( (Float)(this65) ) / ( (Float)(255) ));
            					}
HXDLIN( 100)					Float r17;
HXDLIN( 100)					int this66 = ((old7 >> 16) & 255);
HXDLIN( 100)					if ((this66 == 0)) {
HXLINE( 100)						r17 = ((Float)0.);
            					}
            					else {
HXLINE( 100)						r17 = (( (Float)(this66) ) / ( (Float)(255) ));
            					}
HXDLIN( 100)					Float g17;
HXDLIN( 100)					int this67 = ((old7 >> 8) & 255);
HXDLIN( 100)					if ((this67 == 0)) {
HXLINE( 100)						g17 = ((Float)0.);
            					}
            					else {
HXLINE( 100)						g17 = (( (Float)(this67) ) / ( (Float)(255) ));
            					}
HXDLIN( 100)					Float b17;
HXDLIN( 100)					int this68 = (old7 & 255);
HXDLIN( 100)					if ((this68 == 0)) {
HXLINE( 100)						b17 = ((Float)0.);
            					}
            					else {
HXLINE( 100)						b17 = (( (Float)(this68) ) / ( (Float)(255) ));
            					}
HXDLIN( 100)					Float a27;
HXDLIN( 100)					int this69 = ((rhs7 >> 24) & 255);
HXDLIN( 100)					if ((this69 == 0)) {
HXLINE( 100)						a27 = ((Float)0.);
            					}
            					else {
HXLINE( 100)						a27 = (( (Float)(this69) ) / ( (Float)(255) ));
            					}
HXDLIN( 100)					Float r27;
HXDLIN( 100)					int this70 = ((rhs7 >> 16) & 255);
HXDLIN( 100)					if ((this70 == 0)) {
HXLINE( 100)						r27 = ((Float)0.);
            					}
            					else {
HXLINE( 100)						r27 = (( (Float)(this70) ) / ( (Float)(255) ));
            					}
HXDLIN( 100)					Float g27;
HXDLIN( 100)					int this71 = ((rhs7 >> 8) & 255);
HXDLIN( 100)					if ((this71 == 0)) {
HXLINE( 100)						g27 = ((Float)0.);
            					}
            					else {
HXLINE( 100)						g27 = (( (Float)(this71) ) / ( (Float)(255) ));
            					}
HXDLIN( 100)					Float b27;
HXDLIN( 100)					int this72 = (rhs7 & 255);
HXDLIN( 100)					if ((this72 == 0)) {
HXLINE( 100)						b27 = ((Float)0.);
            					}
            					else {
HXLINE( 100)						b27 = (( (Float)(this72) ) / ( (Float)(255) ));
            					}
HXDLIN( 100)					Float a37 = (a17 * (( (Float)(1) ) - a27));
HXDLIN( 100)					int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN( 100)					int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN( 100)					int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b17 * a37) + (b27 * a27))));
HXDLIN( 100)					int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN( 100)					int blended7 = ((((a18 << 24) | (r10 << 16)) | (g10 << 8)) | b10);
HXDLIN( 100)					{
HXLINE( 100)						int _hx_tmp15;
HXDLIN( 100)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 100)							_hx_tmp15 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            						}
            						else {
HXLINE( 100)							_hx_tmp15 = blended7;
            						}
HXDLIN( 100)						::iterMagic::Iimg_obj::set(pixelImage->image,location7,_hx_tmp15);
            					}
            				}
            				else {
HXLINE( 100)					int value7;
HXDLIN( 100)					if (pixelImage->isLittle) {
HXLINE( 100)						value7 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            					}
            					else {
HXLINE( 100)						value7 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            					}
HXDLIN( 100)					::iterMagic::Iimg_obj::set(pixelImage->image,location7,value7);
            				}
            			}
            		}
HXLINE( 104)		int startX = (xpxl1 + 1);
HXLINE( 105)		int endX = (xpxl2 + 1);
HXLINE( 106)		if (steep) {
HXLINE( 107)			int _g = startX;
HXDLIN( 107)			int _g1 = endX;
HXDLIN( 107)			while((_g < _g1)){
HXLINE( 107)				_g = (_g + 1);
HXDLIN( 107)				int x3 = (_g - 1);
HXLINE( 109)				int i8 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * ((( (Float)(1) ) - intery) + ::Math_obj::floor(intery)))));
HXDLIN( 109)				if ((i8 > 255)) {
HXLINE( 109)					i8 = 255;
            				}
HXDLIN( 109)				if ((i8 < 0)) {
HXLINE( 109)					i8 = 0;
            				}
HXDLIN( 109)				a0 = i8;
HXLINE( 110)				{
HXLINE( 110)					int x4 = ::Math_obj::floor(intery);
HXDLIN( 110)					int location8;
HXDLIN( 110)					if (pixelImage->useVirtualPos) {
HXLINE( 110)						location8 = ::Std_obj::_hx_int(((((( (Float)(x3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x4) - pixelImage->virtualX));
            					}
            					else {
HXLINE( 110)						location8 = ::Std_obj::_hx_int(( (Float)(((x3 * pixelImage->width) + x4)) ));
            					}
HXDLIN( 110)					bool _hx_tmp16;
HXDLIN( 110)					if (pixelImage->transparent) {
HXLINE( 110)						_hx_tmp16 = (a0 < 254);
            					}
            					else {
HXLINE( 110)						_hx_tmp16 = false;
            					}
HXDLIN( 110)					if (_hx_tmp16) {
HXLINE( 110)						int this73 = ::iterMagic::Iimg_obj::get(pixelImage->image,location8);
HXDLIN( 110)						int old8;
HXDLIN( 110)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 110)							old8 = ((((((this73 >> 24) & 255) << 24) | ((this73 & 255) << 16)) | (((this73 >> 8) & 255) << 8)) | ((this73 >> 16) & 255));
            						}
            						else {
HXLINE( 110)							old8 = this73;
            						}
HXDLIN( 110)						int rhs8 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 110)						Float a19;
HXDLIN( 110)						int this74 = ((old8 >> 24) & 255);
HXDLIN( 110)						if ((this74 == 0)) {
HXLINE( 110)							a19 = ((Float)0.);
            						}
            						else {
HXLINE( 110)							a19 = (( (Float)(this74) ) / ( (Float)(255) ));
            						}
HXDLIN( 110)						Float r18;
HXDLIN( 110)						int this75 = ((old8 >> 16) & 255);
HXDLIN( 110)						if ((this75 == 0)) {
HXLINE( 110)							r18 = ((Float)0.);
            						}
            						else {
HXLINE( 110)							r18 = (( (Float)(this75) ) / ( (Float)(255) ));
            						}
HXDLIN( 110)						Float g18;
HXDLIN( 110)						int this76 = ((old8 >> 8) & 255);
HXDLIN( 110)						if ((this76 == 0)) {
HXLINE( 110)							g18 = ((Float)0.);
            						}
            						else {
HXLINE( 110)							g18 = (( (Float)(this76) ) / ( (Float)(255) ));
            						}
HXDLIN( 110)						Float b18;
HXDLIN( 110)						int this77 = (old8 & 255);
HXDLIN( 110)						if ((this77 == 0)) {
HXLINE( 110)							b18 = ((Float)0.);
            						}
            						else {
HXLINE( 110)							b18 = (( (Float)(this77) ) / ( (Float)(255) ));
            						}
HXDLIN( 110)						Float a28;
HXDLIN( 110)						int this78 = ((rhs8 >> 24) & 255);
HXDLIN( 110)						if ((this78 == 0)) {
HXLINE( 110)							a28 = ((Float)0.);
            						}
            						else {
HXLINE( 110)							a28 = (( (Float)(this78) ) / ( (Float)(255) ));
            						}
HXDLIN( 110)						Float r28;
HXDLIN( 110)						int this79 = ((rhs8 >> 16) & 255);
HXDLIN( 110)						if ((this79 == 0)) {
HXLINE( 110)							r28 = ((Float)0.);
            						}
            						else {
HXLINE( 110)							r28 = (( (Float)(this79) ) / ( (Float)(255) ));
            						}
HXDLIN( 110)						Float g28;
HXDLIN( 110)						int this80 = ((rhs8 >> 8) & 255);
HXDLIN( 110)						if ((this80 == 0)) {
HXLINE( 110)							g28 = ((Float)0.);
            						}
            						else {
HXLINE( 110)							g28 = (( (Float)(this80) ) / ( (Float)(255) ));
            						}
HXDLIN( 110)						Float b28;
HXDLIN( 110)						int this81 = (rhs8 & 255);
HXDLIN( 110)						if ((this81 == 0)) {
HXLINE( 110)							b28 = ((Float)0.);
            						}
            						else {
HXLINE( 110)							b28 = (( (Float)(this81) ) / ( (Float)(255) ));
            						}
HXDLIN( 110)						Float a38 = (a19 * (( (Float)(1) ) - a28));
HXDLIN( 110)						int r19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r28 * a28))));
HXDLIN( 110)						int g19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g28 * a28))));
HXDLIN( 110)						int b19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b18 * a38) + (b28 * a28))));
HXDLIN( 110)						int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a28)));
HXDLIN( 110)						int blended8 = ((((a20 << 24) | (r19 << 16)) | (g19 << 8)) | b19);
HXDLIN( 110)						{
HXLINE( 110)							int _hx_tmp17;
HXDLIN( 110)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 110)								_hx_tmp17 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            							}
            							else {
HXLINE( 110)								_hx_tmp17 = blended8;
            							}
HXDLIN( 110)							::iterMagic::Iimg_obj::set(pixelImage->image,location8,_hx_tmp17);
            						}
            					}
            					else {
HXLINE( 110)						int value8;
HXDLIN( 110)						if (pixelImage->isLittle) {
HXLINE( 110)							value8 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            						}
            						else {
HXLINE( 110)							value8 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            						}
HXDLIN( 110)						::iterMagic::Iimg_obj::set(pixelImage->image,location8,value8);
            					}
            				}
HXLINE( 111)				int i9 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * (intery - ( (Float)(::Math_obj::floor(intery)) )))));
HXDLIN( 111)				if ((i9 > 255)) {
HXLINE( 111)					i9 = 255;
            				}
HXDLIN( 111)				if ((i9 < 0)) {
HXLINE( 111)					i9 = 0;
            				}
HXDLIN( 111)				a0 = i9;
HXLINE( 112)				{
HXLINE( 112)					int x5 = (::Math_obj::floor(intery) + 1);
HXDLIN( 112)					int location9;
HXDLIN( 112)					if (pixelImage->useVirtualPos) {
HXLINE( 112)						location9 = ::Std_obj::_hx_int(((((( (Float)(x3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            					}
            					else {
HXLINE( 112)						location9 = ::Std_obj::_hx_int(( (Float)(((x3 * pixelImage->width) + x5)) ));
            					}
HXDLIN( 112)					bool _hx_tmp18;
HXDLIN( 112)					if (pixelImage->transparent) {
HXLINE( 112)						_hx_tmp18 = (a0 < 254);
            					}
            					else {
HXLINE( 112)						_hx_tmp18 = false;
            					}
HXDLIN( 112)					if (_hx_tmp18) {
HXLINE( 112)						int this82 = ::iterMagic::Iimg_obj::get(pixelImage->image,location9);
HXDLIN( 112)						int old9;
HXDLIN( 112)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)							old9 = ((((((this82 >> 24) & 255) << 24) | ((this82 & 255) << 16)) | (((this82 >> 8) & 255) << 8)) | ((this82 >> 16) & 255));
            						}
            						else {
HXLINE( 112)							old9 = this82;
            						}
HXDLIN( 112)						int rhs9 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 112)						Float a110;
HXDLIN( 112)						int this83 = ((old9 >> 24) & 255);
HXDLIN( 112)						if ((this83 == 0)) {
HXLINE( 112)							a110 = ((Float)0.);
            						}
            						else {
HXLINE( 112)							a110 = (( (Float)(this83) ) / ( (Float)(255) ));
            						}
HXDLIN( 112)						Float r110;
HXDLIN( 112)						int this84 = ((old9 >> 16) & 255);
HXDLIN( 112)						if ((this84 == 0)) {
HXLINE( 112)							r110 = ((Float)0.);
            						}
            						else {
HXLINE( 112)							r110 = (( (Float)(this84) ) / ( (Float)(255) ));
            						}
HXDLIN( 112)						Float g110;
HXDLIN( 112)						int this85 = ((old9 >> 8) & 255);
HXDLIN( 112)						if ((this85 == 0)) {
HXLINE( 112)							g110 = ((Float)0.);
            						}
            						else {
HXLINE( 112)							g110 = (( (Float)(this85) ) / ( (Float)(255) ));
            						}
HXDLIN( 112)						Float b110;
HXDLIN( 112)						int this86 = (old9 & 255);
HXDLIN( 112)						if ((this86 == 0)) {
HXLINE( 112)							b110 = ((Float)0.);
            						}
            						else {
HXLINE( 112)							b110 = (( (Float)(this86) ) / ( (Float)(255) ));
            						}
HXDLIN( 112)						Float a29;
HXDLIN( 112)						int this87 = ((rhs9 >> 24) & 255);
HXDLIN( 112)						if ((this87 == 0)) {
HXLINE( 112)							a29 = ((Float)0.);
            						}
            						else {
HXLINE( 112)							a29 = (( (Float)(this87) ) / ( (Float)(255) ));
            						}
HXDLIN( 112)						Float r29;
HXDLIN( 112)						int this88 = ((rhs9 >> 16) & 255);
HXDLIN( 112)						if ((this88 == 0)) {
HXLINE( 112)							r29 = ((Float)0.);
            						}
            						else {
HXLINE( 112)							r29 = (( (Float)(this88) ) / ( (Float)(255) ));
            						}
HXDLIN( 112)						Float g29;
HXDLIN( 112)						int this89 = ((rhs9 >> 8) & 255);
HXDLIN( 112)						if ((this89 == 0)) {
HXLINE( 112)							g29 = ((Float)0.);
            						}
            						else {
HXLINE( 112)							g29 = (( (Float)(this89) ) / ( (Float)(255) ));
            						}
HXDLIN( 112)						Float b29;
HXDLIN( 112)						int this90 = (rhs9 & 255);
HXDLIN( 112)						if ((this90 == 0)) {
HXLINE( 112)							b29 = ((Float)0.);
            						}
            						else {
HXLINE( 112)							b29 = (( (Float)(this90) ) / ( (Float)(255) ));
            						}
HXDLIN( 112)						Float a39 = (a110 * (( (Float)(1) ) - a29));
HXDLIN( 112)						int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a39) + (r29 * a29))));
HXDLIN( 112)						int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a39) + (g29 * a29))));
HXDLIN( 112)						int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a39) + (b29 * a29))));
HXDLIN( 112)						int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a29)));
HXDLIN( 112)						int blended9 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b20);
HXDLIN( 112)						{
HXLINE( 112)							int _hx_tmp19;
HXDLIN( 112)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)								_hx_tmp19 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            							}
            							else {
HXLINE( 112)								_hx_tmp19 = blended9;
            							}
HXDLIN( 112)							::iterMagic::Iimg_obj::set(pixelImage->image,location9,_hx_tmp19);
            						}
            					}
            					else {
HXLINE( 112)						int value9;
HXDLIN( 112)						if (pixelImage->isLittle) {
HXLINE( 112)							value9 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            						}
            						else {
HXLINE( 112)							value9 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            						}
HXDLIN( 112)						::iterMagic::Iimg_obj::set(pixelImage->image,location9,value9);
            					}
            				}
HXLINE( 113)				intery = (intery + gradient);
            			}
            		}
            		else {
HXLINE( 116)			int _g2 = startX;
HXDLIN( 116)			int _g3 = endX;
HXDLIN( 116)			while((_g2 < _g3)){
HXLINE( 116)				_g2 = (_g2 + 1);
HXDLIN( 116)				int x6 = (_g2 - 1);
HXLINE( 118)				int i10 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * ((( (Float)(1) ) - intery) + ::Math_obj::floor(intery)))));
HXDLIN( 118)				if ((i10 > 255)) {
HXLINE( 118)					i10 = 255;
            				}
HXDLIN( 118)				if ((i10 < 0)) {
HXLINE( 118)					i10 = 0;
            				}
HXDLIN( 118)				a0 = i10;
HXLINE( 119)				{
HXLINE( 119)					int y3 = ::Math_obj::floor(intery);
HXDLIN( 119)					int location10;
HXDLIN( 119)					if (pixelImage->useVirtualPos) {
HXLINE( 119)						location10 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x6) - pixelImage->virtualX));
            					}
            					else {
HXLINE( 119)						location10 = ::Std_obj::_hx_int(( (Float)(((y3 * pixelImage->width) + x6)) ));
            					}
HXDLIN( 119)					bool _hx_tmp20;
HXDLIN( 119)					if (pixelImage->transparent) {
HXLINE( 119)						_hx_tmp20 = (a0 < 254);
            					}
            					else {
HXLINE( 119)						_hx_tmp20 = false;
            					}
HXDLIN( 119)					if (_hx_tmp20) {
HXLINE( 119)						int this91 = ::iterMagic::Iimg_obj::get(pixelImage->image,location10);
HXDLIN( 119)						int old10;
HXDLIN( 119)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 119)							old10 = ((((((this91 >> 24) & 255) << 24) | ((this91 & 255) << 16)) | (((this91 >> 8) & 255) << 8)) | ((this91 >> 16) & 255));
            						}
            						else {
HXLINE( 119)							old10 = this91;
            						}
HXDLIN( 119)						int rhs10 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 119)						Float a111;
HXDLIN( 119)						int this92 = ((old10 >> 24) & 255);
HXDLIN( 119)						if ((this92 == 0)) {
HXLINE( 119)							a111 = ((Float)0.);
            						}
            						else {
HXLINE( 119)							a111 = (( (Float)(this92) ) / ( (Float)(255) ));
            						}
HXDLIN( 119)						Float r111;
HXDLIN( 119)						int this93 = ((old10 >> 16) & 255);
HXDLIN( 119)						if ((this93 == 0)) {
HXLINE( 119)							r111 = ((Float)0.);
            						}
            						else {
HXLINE( 119)							r111 = (( (Float)(this93) ) / ( (Float)(255) ));
            						}
HXDLIN( 119)						Float g111;
HXDLIN( 119)						int this94 = ((old10 >> 8) & 255);
HXDLIN( 119)						if ((this94 == 0)) {
HXLINE( 119)							g111 = ((Float)0.);
            						}
            						else {
HXLINE( 119)							g111 = (( (Float)(this94) ) / ( (Float)(255) ));
            						}
HXDLIN( 119)						Float b111;
HXDLIN( 119)						int this95 = (old10 & 255);
HXDLIN( 119)						if ((this95 == 0)) {
HXLINE( 119)							b111 = ((Float)0.);
            						}
            						else {
HXLINE( 119)							b111 = (( (Float)(this95) ) / ( (Float)(255) ));
            						}
HXDLIN( 119)						Float a210;
HXDLIN( 119)						int this96 = ((rhs10 >> 24) & 255);
HXDLIN( 119)						if ((this96 == 0)) {
HXLINE( 119)							a210 = ((Float)0.);
            						}
            						else {
HXLINE( 119)							a210 = (( (Float)(this96) ) / ( (Float)(255) ));
            						}
HXDLIN( 119)						Float r210;
HXDLIN( 119)						int this97 = ((rhs10 >> 16) & 255);
HXDLIN( 119)						if ((this97 == 0)) {
HXLINE( 119)							r210 = ((Float)0.);
            						}
            						else {
HXLINE( 119)							r210 = (( (Float)(this97) ) / ( (Float)(255) ));
            						}
HXDLIN( 119)						Float g210;
HXDLIN( 119)						int this98 = ((rhs10 >> 8) & 255);
HXDLIN( 119)						if ((this98 == 0)) {
HXLINE( 119)							g210 = ((Float)0.);
            						}
            						else {
HXLINE( 119)							g210 = (( (Float)(this98) ) / ( (Float)(255) ));
            						}
HXDLIN( 119)						Float b210;
HXDLIN( 119)						int this99 = (rhs10 & 255);
HXDLIN( 119)						if ((this99 == 0)) {
HXLINE( 119)							b210 = ((Float)0.);
            						}
            						else {
HXLINE( 119)							b210 = (( (Float)(this99) ) / ( (Float)(255) ));
            						}
HXDLIN( 119)						Float a310 = (a111 * (( (Float)(1) ) - a210));
HXDLIN( 119)						int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a310) + (r210 * a210))));
HXDLIN( 119)						int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a310) + (g210 * a210))));
HXDLIN( 119)						int b30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a310) + (b210 * a210))));
HXDLIN( 119)						int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a210)));
HXDLIN( 119)						int blended10 = ((((a40 << 24) | (r30 << 16)) | (g30 << 8)) | b30);
HXDLIN( 119)						{
HXLINE( 119)							int _hx_tmp21;
HXDLIN( 119)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 119)								_hx_tmp21 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            							}
            							else {
HXLINE( 119)								_hx_tmp21 = blended10;
            							}
HXDLIN( 119)							::iterMagic::Iimg_obj::set(pixelImage->image,location10,_hx_tmp21);
            						}
            					}
            					else {
HXLINE( 119)						int value10;
HXDLIN( 119)						if (pixelImage->isLittle) {
HXLINE( 119)							value10 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            						}
            						else {
HXLINE( 119)							value10 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            						}
HXDLIN( 119)						::iterMagic::Iimg_obj::set(pixelImage->image,location10,value10);
            					}
            				}
HXLINE( 120)				int i11 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * (intery - ( (Float)(::Math_obj::floor(intery)) )))));
HXDLIN( 120)				if ((i11 > 255)) {
HXLINE( 120)					i11 = 255;
            				}
HXDLIN( 120)				if ((i11 < 0)) {
HXLINE( 120)					i11 = 0;
            				}
HXDLIN( 120)				a0 = i11;
HXLINE( 121)				{
HXLINE( 121)					int y4 = (::Math_obj::floor(intery) + 1);
HXDLIN( 121)					int location11;
HXDLIN( 121)					if (pixelImage->useVirtualPos) {
HXLINE( 121)						location11 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x6) - pixelImage->virtualX));
            					}
            					else {
HXLINE( 121)						location11 = ::Std_obj::_hx_int(( (Float)(((y4 * pixelImage->width) + x6)) ));
            					}
HXDLIN( 121)					bool _hx_tmp22;
HXDLIN( 121)					if (pixelImage->transparent) {
HXLINE( 121)						_hx_tmp22 = (a0 < 254);
            					}
            					else {
HXLINE( 121)						_hx_tmp22 = false;
            					}
HXDLIN( 121)					if (_hx_tmp22) {
HXLINE( 121)						int this100 = ::iterMagic::Iimg_obj::get(pixelImage->image,location11);
HXDLIN( 121)						int old11;
HXDLIN( 121)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)							old11 = ((((((this100 >> 24) & 255) << 24) | ((this100 & 255) << 16)) | (((this100 >> 8) & 255) << 8)) | ((this100 >> 16) & 255));
            						}
            						else {
HXLINE( 121)							old11 = this100;
            						}
HXDLIN( 121)						int rhs11 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 121)						Float a112;
HXDLIN( 121)						int this101 = ((old11 >> 24) & 255);
HXDLIN( 121)						if ((this101 == 0)) {
HXLINE( 121)							a112 = ((Float)0.);
            						}
            						else {
HXLINE( 121)							a112 = (( (Float)(this101) ) / ( (Float)(255) ));
            						}
HXDLIN( 121)						Float r112;
HXDLIN( 121)						int this102 = ((old11 >> 16) & 255);
HXDLIN( 121)						if ((this102 == 0)) {
HXLINE( 121)							r112 = ((Float)0.);
            						}
            						else {
HXLINE( 121)							r112 = (( (Float)(this102) ) / ( (Float)(255) ));
            						}
HXDLIN( 121)						Float g112;
HXDLIN( 121)						int this103 = ((old11 >> 8) & 255);
HXDLIN( 121)						if ((this103 == 0)) {
HXLINE( 121)							g112 = ((Float)0.);
            						}
            						else {
HXLINE( 121)							g112 = (( (Float)(this103) ) / ( (Float)(255) ));
            						}
HXDLIN( 121)						Float b112;
HXDLIN( 121)						int this104 = (old11 & 255);
HXDLIN( 121)						if ((this104 == 0)) {
HXLINE( 121)							b112 = ((Float)0.);
            						}
            						else {
HXLINE( 121)							b112 = (( (Float)(this104) ) / ( (Float)(255) ));
            						}
HXDLIN( 121)						Float a211;
HXDLIN( 121)						int this105 = ((rhs11 >> 24) & 255);
HXDLIN( 121)						if ((this105 == 0)) {
HXLINE( 121)							a211 = ((Float)0.);
            						}
            						else {
HXLINE( 121)							a211 = (( (Float)(this105) ) / ( (Float)(255) ));
            						}
HXDLIN( 121)						Float r211;
HXDLIN( 121)						int this106 = ((rhs11 >> 16) & 255);
HXDLIN( 121)						if ((this106 == 0)) {
HXLINE( 121)							r211 = ((Float)0.);
            						}
            						else {
HXLINE( 121)							r211 = (( (Float)(this106) ) / ( (Float)(255) ));
            						}
HXDLIN( 121)						Float g211;
HXDLIN( 121)						int this107 = ((rhs11 >> 8) & 255);
HXDLIN( 121)						if ((this107 == 0)) {
HXLINE( 121)							g211 = ((Float)0.);
            						}
            						else {
HXLINE( 121)							g211 = (( (Float)(this107) ) / ( (Float)(255) ));
            						}
HXDLIN( 121)						Float b211;
HXDLIN( 121)						int this108 = (rhs11 & 255);
HXDLIN( 121)						if ((this108 == 0)) {
HXLINE( 121)							b211 = ((Float)0.);
            						}
            						else {
HXLINE( 121)							b211 = (( (Float)(this108) ) / ( (Float)(255) ));
            						}
HXDLIN( 121)						Float a311 = (a112 * (( (Float)(1) ) - a211));
HXDLIN( 121)						int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a311) + (r211 * a211))));
HXDLIN( 121)						int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a311) + (g211 * a211))));
HXDLIN( 121)						int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a311) + (b211 * a211))));
HXDLIN( 121)						int a41 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a211)));
HXDLIN( 121)						int blended11 = ((((a41 << 24) | (r31 << 16)) | (g31 << 8)) | b31);
HXDLIN( 121)						{
HXLINE( 121)							int _hx_tmp23;
HXDLIN( 121)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)								_hx_tmp23 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            							}
            							else {
HXLINE( 121)								_hx_tmp23 = blended11;
            							}
HXDLIN( 121)							::iterMagic::Iimg_obj::set(pixelImage->image,location11,_hx_tmp23);
            						}
            					}
            					else {
HXLINE( 121)						int value11;
HXDLIN( 121)						if (pixelImage->isLittle) {
HXLINE( 121)							value11 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            						}
            						else {
HXLINE( 121)							value11 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            						}
HXDLIN( 121)						::iterMagic::Iimg_obj::set(pixelImage->image,location11,value11);
            					}
            				}
HXLINE( 122)				intery = (intery + gradient);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Xiolin_Wu_Line_Fields__obj,xWuLine,(void))

Float Xiolin_Wu_Line_Fields__obj::roundFloor(Float v){
            	HX_STACKFRAME(&_hx_pos_c602934cd6dc924e_129_roundFloor)
HXDLIN( 129)		return (::Math_obj::floor(v) + ((Float)0.5));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Xiolin_Wu_Line_Fields__obj,roundFloor,return )

Float Xiolin_Wu_Line_Fields__obj::fPart(Float v){
            	HX_STACKFRAME(&_hx_pos_c602934cd6dc924e_134_fPart)
HXDLIN( 134)		return (v - ( (Float)(::Math_obj::floor(v)) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Xiolin_Wu_Line_Fields__obj,fPart,return )

Float Xiolin_Wu_Line_Fields__obj::rfPart(Float v){
            	HX_STACKFRAME(&_hx_pos_c602934cd6dc924e_139_rfPart)
HXDLIN( 139)		return ((( (Float)(1) ) - v) + ::Math_obj::floor(v));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Xiolin_Wu_Line_Fields__obj,rfPart,return )


Xiolin_Wu_Line_Fields__obj::Xiolin_Wu_Line_Fields__obj()
{
}

bool Xiolin_Wu_Line_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"fPart") ) { outValue = fPart_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rfPart") ) { outValue = rfPart_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"xWuLine") ) { outValue = xWuLine_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"roundFloor") ) { outValue = roundFloor_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Xiolin_Wu_Line_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Xiolin_Wu_Line_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Xiolin_Wu_Line_Fields__obj::__mClass;

static ::String Xiolin_Wu_Line_Fields__obj_sStaticFields[] = {
	HX_("xWuLine",ca,31,8a,d7),
	HX_("roundFloor",9e,6e,91,ab),
	HX_("fPart",79,3b,0a,f0),
	HX_("rfPart",c7,5d,b9,84),
	::String(null())
};

void Xiolin_Wu_Line_Fields__obj::__register()
{
	Xiolin_Wu_Line_Fields__obj _hx_dummy;
	Xiolin_Wu_Line_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo._Xiolin_Wu_Line.Xiolin_Wu_Line_Fields_",4a,8c,68,44);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Xiolin_Wu_Line_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Xiolin_Wu_Line_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Xiolin_Wu_Line_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Xiolin_Wu_Line_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Xiolin_Wu_Line_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
} // end namespace _Xiolin_Wu_Line
