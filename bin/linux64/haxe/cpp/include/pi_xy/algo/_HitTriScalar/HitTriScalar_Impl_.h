// Generated by Haxe 4.3.3
#ifndef INCLUDED_pi_xy_algo__HitTriScalar_HitTriScalar_Impl_
#define INCLUDED_pi_xy_algo__HitTriScalar_HitTriScalar_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(pi_xy,algo,Barycentric)
HX_DECLARE_CLASS2(pi_xy,algo,HitTri)
HX_DECLARE_CLASS2(pi_xy,algo,IhitObj)
HX_DECLARE_CLASS2(pi_xy,algo,SampleData)
HX_DECLARE_CLASS2(pi_xy,algo,TriPoints_)
HX_DECLARE_CLASS3(pi_xy,algo,_HitTriScalar,HitTriScalar_Impl_)

namespace pi_xy{
namespace algo{
namespace _HitTriScalar{


class HXCPP_CLASS_ATTRIBUTES HitTriScalar_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef HitTriScalar_Impl__obj OBJ_;
		HitTriScalar_Impl__obj();

	public:
		enum { _hx_ClassId = 0x0ac3906d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pi_xy.algo._HitTriScalar.HitTriScalar_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pi_xy.algo._HitTriScalar.HitTriScalar_Impl_"); }

		inline static ::hx::ObjectPtr< HitTriScalar_Impl__obj > __new() {
			::hx::ObjectPtr< HitTriScalar_Impl__obj > __this = new HitTriScalar_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< HitTriScalar_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			HitTriScalar_Impl__obj *__this = (HitTriScalar_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HitTriScalar_Impl__obj), false, "pi_xy.algo._HitTriScalar.HitTriScalar_Impl_"));
			*(void **)__this = HitTriScalar_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~HitTriScalar_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("HitTriScalar_Impl_",a4,11,fb,d1); }

		static Float get_centroidX( ::pi_xy::algo::HitTri this1);
		static ::Dynamic get_centroidX_dyn();

		static Float get_centroidY( ::pi_xy::algo::HitTri this1);
		static ::Dynamic get_centroidY_dyn();

		static Float medianABx( ::pi_xy::algo::HitTri this1);
		static ::Dynamic medianABx_dyn();

		static Float medianBCx( ::pi_xy::algo::HitTri this1);
		static ::Dynamic medianBCx_dyn();

		static Float medianCAx( ::pi_xy::algo::HitTri this1);
		static ::Dynamic medianCAx_dyn();

		static Float medianABy( ::pi_xy::algo::HitTri this1);
		static ::Dynamic medianABy_dyn();

		static Float medianBCy( ::pi_xy::algo::HitTri this1);
		static ::Dynamic medianBCy_dyn();

		static Float medianCAy( ::pi_xy::algo::HitTri this1);
		static ::Dynamic medianCAy_dyn();

		static  ::pi_xy::algo::HitTri scaled( ::pi_xy::algo::HitTri this1,Float scaleA,Float scaleB,Float scaleC);
		static ::Dynamic scaled_dyn();

		static Float scalePoint( ::pi_xy::algo::HitTri this1,Float point,Float scale,Float centre);
		static ::Dynamic scalePoint_dyn();

		static  ::pi_xy::algo::SampleData triangleSample( ::pi_xy::algo::HitTri this1,Float x,Float y);
		static ::Dynamic triangleSample_dyn();

		static  ::pi_xy::algo::SampleData squareSample( ::pi_xy::algo::HitTri this1,Float x,Float y);
		static ::Dynamic squareSample_dyn();

		static  ::pi_xy::algo::SampleData pentagonSample( ::pi_xy::algo::HitTri this1,Float x,Float y);
		static ::Dynamic pentagonSample_dyn();

		static  ::pi_xy::algo::Barycentric get_barycentric( ::pi_xy::algo::HitTri this1);
		static ::Dynamic get_barycentric_dyn();

};

} // end namespace pi_xy
} // end namespace algo
} // end namespace _HitTriScalar

#endif /* INCLUDED_pi_xy_algo__HitTriScalar_HitTriScalar_Impl_ */ 
