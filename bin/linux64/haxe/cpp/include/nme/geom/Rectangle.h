// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_geom_Rectangle
#define INCLUDED_nme_geom_Rectangle

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nme,geom,Matrix)
HX_DECLARE_CLASS2(nme,geom,Point)
HX_DECLARE_CLASS2(nme,geom,Rectangle)

namespace nme{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES Rectangle_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Rectangle_obj OBJ_;
		Rectangle_obj();

	public:
		enum { _hx_ClassId = 0x6920fe0d };

		void __construct( ::Dynamic inX, ::Dynamic inY, ::Dynamic inWidth, ::Dynamic inHeight);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nme.geom.Rectangle")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"nme.geom.Rectangle"); }
		static ::hx::ObjectPtr< Rectangle_obj > __new( ::Dynamic inX, ::Dynamic inY, ::Dynamic inWidth, ::Dynamic inHeight);
		static ::hx::ObjectPtr< Rectangle_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic inX, ::Dynamic inY, ::Dynamic inWidth, ::Dynamic inHeight);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Rectangle_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Rectangle",0f,b4,4f,bb); }

		Float height;
		Float width;
		Float x;
		Float y;
		virtual ::String toString();
		::Dynamic toString_dyn();

		void setTo(Float inX,Float inY,Float inWidth,Float inHeight);
		::Dynamic setTo_dyn();

		 ::nme::geom::Rectangle clone();
		::Dynamic clone_dyn();

		bool contains(Float inX,Float inY);
		::Dynamic contains_dyn();

		bool containsPoint( ::nme::geom::Point point);
		::Dynamic containsPoint_dyn();

		bool containsRect( ::nme::geom::Rectangle rect);
		::Dynamic containsRect_dyn();

		bool equals( ::nme::geom::Rectangle toCompare);
		::Dynamic equals_dyn();

		void extendBounds( ::nme::geom::Rectangle r);
		::Dynamic extendBounds_dyn();

		void inflate(Float dx,Float dy);
		::Dynamic inflate_dyn();

		void inflatePoint( ::nme::geom::Point point);
		::Dynamic inflatePoint_dyn();

		 ::nme::geom::Rectangle intersection( ::nme::geom::Rectangle toIntersect);
		::Dynamic intersection_dyn();

		bool intersects( ::nme::geom::Rectangle toIntersect);
		::Dynamic intersects_dyn();

		bool isEmpty();
		::Dynamic isEmpty_dyn();

		void offset(Float dx,Float dy);
		::Dynamic offset_dyn();

		void offsetPoint( ::nme::geom::Point point);
		::Dynamic offsetPoint_dyn();

		void setEmpty();
		::Dynamic setEmpty_dyn();

		 ::nme::geom::Rectangle transform( ::nme::geom::Matrix m);
		::Dynamic transform_dyn();

		 ::nme::geom::Rectangle _hx_union( ::nme::geom::Rectangle toUnion);
		::Dynamic _hx_union_dyn();

		void copyFrom( ::nme::geom::Rectangle sourceRect);
		::Dynamic copyFrom_dyn();

		Float get_bottom();
		::Dynamic get_bottom_dyn();

		Float set_bottom(Float b);
		::Dynamic set_bottom_dyn();

		 ::nme::geom::Point get_bottomRight();
		::Dynamic get_bottomRight_dyn();

		 ::nme::geom::Point set_bottomRight( ::nme::geom::Point p);
		::Dynamic set_bottomRight_dyn();

		Float get_left();
		::Dynamic get_left_dyn();

		Float set_left(Float l);
		::Dynamic set_left_dyn();

		Float get_right();
		::Dynamic get_right_dyn();

		Float set_right(Float r);
		::Dynamic set_right_dyn();

		 ::nme::geom::Point get_size();
		::Dynamic get_size_dyn();

		 ::nme::geom::Point set_size( ::nme::geom::Point p);
		::Dynamic set_size_dyn();

		Float get_top();
		::Dynamic get_top_dyn();

		Float set_top(Float t);
		::Dynamic set_top_dyn();

		 ::nme::geom::Point get_topLeft();
		::Dynamic get_topLeft_dyn();

		 ::nme::geom::Point set_topLeft( ::nme::geom::Point p);
		::Dynamic set_topLeft_dyn();

		 ::nme::geom::Point get_centre();
		::Dynamic get_centre_dyn();

		 ::nme::geom::Point set_centre( ::nme::geom::Point p);
		::Dynamic set_centre_dyn();

};

} // end namespace nme
} // end namespace geom

#endif /* INCLUDED_nme_geom_Rectangle */ 
