// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_events_DropEvent
#define INCLUDED_nme_events_DropEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_events_MouseEvent
#include <nme/events/MouseEvent.h>
#endif
#ifndef INCLUDED_140af2720004096a
#define INCLUDED_140af2720004096a
#include "nme/Event.h"
#endif
HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,InteractiveObject)
HX_DECLARE_CLASS2(nme,events,DropEvent)
HX_DECLARE_CLASS2(nme,events,Event)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,events,MouseEvent)
HX_DECLARE_CLASS2(nme,geom,Point)

namespace nme{
namespace events{


class HXCPP_CLASS_ATTRIBUTES DropEvent_obj : public  ::nme::events::MouseEvent_obj
{
	public:
		typedef  ::nme::events::MouseEvent_obj super;
		typedef DropEvent_obj OBJ_;
		DropEvent_obj();

	public:
		enum { _hx_ClassId = 0x6f29948c };

		void __construct(::String type, ::Dynamic bubbles, ::Dynamic cancelable, ::Dynamic localX, ::Dynamic localY, ::nme::display::InteractiveObject relatedObject, ::Dynamic ctrlKey, ::Dynamic altKey, ::Dynamic shiftKey, ::Dynamic buttonDown, ::Dynamic delta, ::Dynamic commandKey, ::Dynamic clickCount);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.events.DropEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.events.DropEvent"); }
		static ::hx::ObjectPtr< DropEvent_obj > __new(::String type, ::Dynamic bubbles, ::Dynamic cancelable, ::Dynamic localX, ::Dynamic localY, ::nme::display::InteractiveObject relatedObject, ::Dynamic ctrlKey, ::Dynamic altKey, ::Dynamic shiftKey, ::Dynamic buttonDown, ::Dynamic delta, ::Dynamic commandKey, ::Dynamic clickCount);
		static ::hx::ObjectPtr< DropEvent_obj > __alloc(::hx::Ctx *_hx_ctx,::String type, ::Dynamic bubbles, ::Dynamic cancelable, ::Dynamic localX, ::Dynamic localY, ::nme::display::InteractiveObject relatedObject, ::Dynamic ctrlKey, ::Dynamic altKey, ::Dynamic shiftKey, ::Dynamic buttonDown, ::Dynamic delta, ::Dynamic commandKey, ::Dynamic clickCount);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DropEvent_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DropEvent",4b,d5,4f,59); }

		static void __boot();
		static ::String DROP_FILES;
		static  ::nme::events::DropEvent nmeCreate(::String inType,::cpp::Pointer<  nme::Event > inEvent, ::nme::geom::Point inLocal, ::nme::display::InteractiveObject inTarget,::Array< ::String > inItems);
		static ::Dynamic nmeCreate_dyn();

		::Array< ::String > items;
		 ::nme::events::Event clone();

		virtual ::String toString();

};

} // end namespace nme
} // end namespace events

#endif /* INCLUDED_nme_events_DropEvent */ 
