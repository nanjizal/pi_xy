// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_IntIterator
#include <IntIterator.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_iterMagic_IntIterStart
#include <iterMagic/IntIterStart.h>
#endif
#ifndef INCLUDED_iterMagic_IntIterXY
#include <iterMagic/IntIterXY.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_004fae90682b8087_24_new,"iterMagic.IntIterXY","new",0xc7a9ae01,"iterMagic.IntIterXY.new","iterMagic/IteratorRangeXY.hx",24,0x59e34148)
namespace iterMagic{

void IntIterXY_obj::__construct( ::iterMagic::IntIterStart xRange_, ::iterMagic::IntIterStart yRange_){
            	HX_GC_STACKFRAME(&_hx_pos_004fae90682b8087_24_new)
HXLINE(  25)		this->x = xRange_->start;
HXLINE(  26)		this->y = (yRange_->start - 1);
HXLINE(  27)		this->xReset = this->x;
HXLINE(  28)		this->yReset = this->y;
HXLINE(  29)		this->xMax = (xRange_->max - 2);
HXLINE(  30)		this->yMax = (yRange_->max - 2);
HXLINE(  31)		this->iter =  ::IntIterator_obj::__alloc( HX_CTX ,0,::Std_obj::_hx_int(( (Float)(((xRange_->max - xRange_->start) * (yRange_->max - yRange_->start))) )));
            	}

Dynamic IntIterXY_obj::__CreateEmpty() { return new IntIterXY_obj; }

void *IntIterXY_obj::_hx_vtable = 0;

Dynamic IntIterXY_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< IntIterXY_obj > _hx_result = new IntIterXY_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool IntIterXY_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0a22ea3b;
}


::hx::ObjectPtr< IntIterXY_obj > IntIterXY_obj::__new( ::iterMagic::IntIterStart xRange_, ::iterMagic::IntIterStart yRange_) {
	::hx::ObjectPtr< IntIterXY_obj > __this = new IntIterXY_obj();
	__this->__construct(xRange_,yRange_);
	return __this;
}

::hx::ObjectPtr< IntIterXY_obj > IntIterXY_obj::__alloc(::hx::Ctx *_hx_ctx, ::iterMagic::IntIterStart xRange_, ::iterMagic::IntIterStart yRange_) {
	IntIterXY_obj *__this = (IntIterXY_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(IntIterXY_obj), true, "iterMagic.IntIterXY"));
	*(void **)__this = IntIterXY_obj::_hx_vtable;
	__this->__construct(xRange_,yRange_);
	return __this;
}

IntIterXY_obj::IntIterXY_obj()
{
}

void IntIterXY_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(IntIterXY);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(xMax,"xMax");
	HX_MARK_MEMBER_NAME(yMax,"yMax");
	HX_MARK_MEMBER_NAME(xReset,"xReset");
	HX_MARK_MEMBER_NAME(yReset,"yReset");
	HX_MARK_MEMBER_NAME(iter,"iter");
	HX_MARK_END_CLASS();
}

void IntIterXY_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(xMax,"xMax");
	HX_VISIT_MEMBER_NAME(yMax,"yMax");
	HX_VISIT_MEMBER_NAME(xReset,"xReset");
	HX_VISIT_MEMBER_NAME(yReset,"yReset");
	HX_VISIT_MEMBER_NAME(iter,"iter");
}

::hx::Val IntIterXY_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"xMax") ) { return ::hx::Val( xMax ); }
		if (HX_FIELD_EQ(inName,"yMax") ) { return ::hx::Val( yMax ); }
		if (HX_FIELD_EQ(inName,"iter") ) { return ::hx::Val( iter ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"xReset") ) { return ::hx::Val( xReset ); }
		if (HX_FIELD_EQ(inName,"yReset") ) { return ::hx::Val( yReset ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val IntIterXY_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"xMax") ) { xMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yMax") ) { yMax=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iter") ) { iter=inValue.Cast<  ::IntIterator >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"xReset") ) { xReset=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yReset") ) { yReset=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IntIterXY_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("xMax",0c,5d,8c,4f));
	outFields->push(HX_("yMax",ab,93,35,50));
	outFields->push(HX_("xReset",37,06,c9,74));
	outFields->push(HX_("yReset",96,62,24,db));
	outFields->push(HX_("iter",18,c5,bf,45));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo IntIterXY_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(IntIterXY_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsInt,(int)offsetof(IntIterXY_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsInt,(int)offsetof(IntIterXY_obj,xMax),HX_("xMax",0c,5d,8c,4f)},
	{::hx::fsInt,(int)offsetof(IntIterXY_obj,yMax),HX_("yMax",ab,93,35,50)},
	{::hx::fsInt,(int)offsetof(IntIterXY_obj,xReset),HX_("xReset",37,06,c9,74)},
	{::hx::fsInt,(int)offsetof(IntIterXY_obj,yReset),HX_("yReset",96,62,24,db)},
	{::hx::fsObject /*  ::IntIterator */ ,(int)offsetof(IntIterXY_obj,iter),HX_("iter",18,c5,bf,45)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *IntIterXY_obj_sStaticStorageInfo = 0;
#endif

static ::String IntIterXY_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("xMax",0c,5d,8c,4f),
	HX_("yMax",ab,93,35,50),
	HX_("xReset",37,06,c9,74),
	HX_("yReset",96,62,24,db),
	HX_("iter",18,c5,bf,45),
	::String(null()) };

::hx::Class IntIterXY_obj::__mClass;

void IntIterXY_obj::__register()
{
	IntIterXY_obj _hx_dummy;
	IntIterXY_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("iterMagic.IntIterXY",8f,99,e0,93);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(IntIterXY_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< IntIterXY_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IntIterXY_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IntIterXY_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iterMagic
