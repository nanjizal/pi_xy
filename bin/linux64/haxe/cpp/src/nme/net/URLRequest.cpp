// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_Loader
#include <nme/Loader.h>
#endif
#ifndef INCLUDED_nme_net_URLRequest
#include <nme/net/URLRequest.h>
#endif
#ifndef INCLUDED_nme_net_URLRequestHeader
#include <nme/net/URLRequestHeader.h>
#endif
#ifndef INCLUDED_nme_net_URLVariablesBase
#include <nme/net/URLVariablesBase.h>
#endif
#ifndef INCLUDED_nme_net__URLVariables_URLVariables_Impl_
#include <nme/net/_URLVariables/URLVariables_Impl_.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_33_new,"nme.net.URLRequest","new",0x9758ddcb,"nme.net.URLRequest.new","nme/net/URLRequest.hx",33,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_48_toString,"nme.net.URLRequest","toString",0x7b2a3f61,"nme.net.URLRequest.toString","nme/net/URLRequest.hx",48,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_52_launchBrowser,"nme.net.URLRequest","launchBrowser",0xc99e3ee0,"nme.net.URLRequest.launchBrowser","nme/net/URLRequest.hx",52,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_57_basicAuth,"nme.net.URLRequest","basicAuth",0x636594e1,"nme.net.URLRequest.basicAuth","nme/net/URLRequest.hx",57,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_63_digestAuth,"nme.net.URLRequest","digestAuth",0xf9b0c3c1,"nme.net.URLRequest.digestAuth","nme/net/URLRequest.hx",63,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_70_nmePrepare,"nme.net.URLRequest","nmePrepare",0x025b3cd6,"nme.net.URLRequest.nmePrepare","nme/net/URLRequest.hx",70,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_111_get_nmeBytes,"nme.net.URLRequest","get_nmeBytes",0xb7cca483,"nme.net.URLRequest.get_nmeBytes","nme/net/URLRequest.hx",111,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_112_set_nmeBytes,"nme.net.URLRequest","set_nmeBytes",0xccc5c7f7,"nme.net.URLRequest.set_nmeBytes","nme/net/URLRequest.hx",112,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_10_boot,"nme.net.URLRequest","boot",0xce823467,"nme.net.URLRequest.boot","nme/net/URLRequest.hx",10,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_11_boot,"nme.net.URLRequest","boot",0xce823467,"nme.net.URLRequest.boot","nme/net/URLRequest.hx",11,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_12_boot,"nme.net.URLRequest","boot",0xce823467,"nme.net.URLRequest.boot","nme/net/URLRequest.hx",12,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_13_boot,"nme.net.URLRequest","boot",0xce823467,"nme.net.URLRequest.boot","nme/net/URLRequest.hx",13,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_14_boot,"nme.net.URLRequest","boot",0xce823467,"nme.net.URLRequest.boot","nme/net/URLRequest.hx",14,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_15_boot,"nme.net.URLRequest","boot",0xce823467,"nme.net.URLRequest.boot","nme/net/URLRequest.hx",15,0xdb7c6643)
HX_LOCAL_STACK_FRAME(_hx_pos_2d0c14b0b10e82b4_114_boot,"nme.net.URLRequest","boot",0xce823467,"nme.net.URLRequest.boot","nme/net/URLRequest.hx",114,0xdb7c6643)
namespace nme{
namespace net{

void URLRequest_obj::__construct(::String inURL){
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_33_new)
HXLINE(  34)		if (::hx::IsNotNull( inURL )) {
HXLINE(  35)			this->url = inURL;
            		}
HXLINE(  37)		this->requestHeaders = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  38)		this->method = HX_("GET",76,1c,36,00);
HXLINE(  40)		this->verbose = false;
HXLINE(  41)		this->cookieString = HX_("",00,00,00,00);
HXLINE(  42)		this->authType = 0;
HXLINE(  43)		this->contentType = HX_("application/x-www-form-urlencoded",9e,61,91,fa);
HXLINE(  44)		this->credentials = HX_("",00,00,00,00);
HXLINE(  45)		this->followRedirects = true;
            	}

Dynamic URLRequest_obj::__CreateEmpty() { return new URLRequest_obj; }

void *URLRequest_obj::_hx_vtable = 0;

Dynamic URLRequest_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< URLRequest_obj > _hx_result = new URLRequest_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool URLRequest_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x11fd4b1f;
}

::String URLRequest_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_48_toString)
HXDLIN(  48)		return ((HX_("URLRequest(",68,70,cf,8a) + this->url) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLRequest_obj,toString,return )

void URLRequest_obj::launchBrowser(){
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_52_launchBrowser)
HXDLIN(  52)		::nme::net::URLRequest_obj::nme_get_url(this->url);
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLRequest_obj,launchBrowser,(void))

void URLRequest_obj::basicAuth(::String inUser,::String inPasswd){
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_57_basicAuth)
HXLINE(  58)		this->authType = 1;
HXLINE(  59)		this->credentials = ((inUser + HX_(":",3a,00,00,00)) + inPasswd);
            	}


HX_DEFINE_DYNAMIC_FUNC2(URLRequest_obj,basicAuth,(void))

void URLRequest_obj::digestAuth(::String inUser,::String inPasswd){
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_63_digestAuth)
HXLINE(  64)		this->authType = 2;
HXLINE(  65)		this->credentials = ((inUser + HX_(":",3a,00,00,00)) + inPasswd);
            	}


HX_DEFINE_DYNAMIC_FUNC2(URLRequest_obj,digestAuth,(void))

void URLRequest_obj::nmePrepare(){
            	HX_GC_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_70_nmePrepare)
HXDLIN(  70)		if (::hx::IsNull( this->data )) {
HXLINE(  72)			this->set_nmeBytes( ::nme::utils::ByteArray_obj::__alloc( HX_CTX ,null(),null()));
            		}
            		else {
HXLINE(  74)			if (::Std_obj::isOfType(this->data,::hx::ClassOf< ::nme::utils::ByteArray >())) {
HXLINE(  76)				this->set_nmeBytes(( ( ::nme::utils::ByteArray)(this->data) ));
            			}
            			else {
HXLINE(  79)				if (::Std_obj::isOfType(this->data,::hx::ClassOf< ::nme::net::URLVariablesBase >())) {
HXLINE(  81)					 ::nme::net::URLVariablesBase vars = ( ( ::nme::net::URLVariablesBase)(this->data) );
HXLINE(  82)					::String str = vars->toString();
HXLINE(  83)					this->set_nmeBytes( ::nme::utils::ByteArray_obj::__alloc( HX_CTX ,null(),null()));
HXLINE(  84)					this->get_nmeBytes()->writeUTFBytes(str);
            				}
            				else {
HXLINE(  87)					if (::Std_obj::isOfType(this->data,::hx::ClassOf< ::String >())) {
HXLINE(  89)						::String str1 = ( (::String)(this->data) );
HXLINE(  90)						this->set_nmeBytes( ::nme::utils::ByteArray_obj::__alloc( HX_CTX ,null(),null()));
HXLINE(  91)						this->get_nmeBytes()->writeUTFBytes(str1);
            					}
            					else {
HXLINE(  94)						if (::Std_obj::isOfType(this->data,::hx::ClassOf< ::Dynamic >())) {
HXLINE(  96)							 ::nme::net::URLVariablesBase vars1 = ::nme::net::_URLVariables::URLVariables_Impl__obj::_new(null());
HXLINE(  98)							{
HXLINE(  98)								int _g = 0;
HXDLIN(  98)								::Array< ::String > _g1 = ::Reflect_obj::fields(this->data);
HXDLIN(  98)								while((_g < _g1->length)){
HXLINE(  98)									::String i = _g1->__get(_g);
HXDLIN(  98)									_g = (_g + 1);
HXLINE(  99)									::Reflect_obj::setField(vars1,i,::Reflect_obj::field(this->data,i));
            								}
            							}
HXLINE( 101)							::String str2 = vars1->toString();
HXLINE( 102)							this->set_nmeBytes( ::nme::utils::ByteArray_obj::__alloc( HX_CTX ,null(),null()));
HXLINE( 103)							this->get_nmeBytes()->writeUTFBytes(str2);
            						}
            						else {
HXLINE( 107)							HX_STACK_DO_THROW(HX_("Unknown data type",3a,04,3d,a1));
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLRequest_obj,nmePrepare,(void))

 ::nme::utils::ByteArray URLRequest_obj::get_nmeBytes(){
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_111_get_nmeBytes)
HXDLIN( 111)		return this->_hx___bytes;
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLRequest_obj,get_nmeBytes,return )

 ::nme::utils::ByteArray URLRequest_obj::set_nmeBytes( ::nme::utils::ByteArray value){
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_112_set_nmeBytes)
HXDLIN( 112)		return (this->_hx___bytes = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(URLRequest_obj,set_nmeBytes,return )

int URLRequest_obj::AUTH_BASIC;

int URLRequest_obj::AUTH_DIGEST;

int URLRequest_obj::AUTH_GSSNEGOTIATE;

int URLRequest_obj::AUTH_NTLM;

int URLRequest_obj::AUTH_DIGEST_IE;

int URLRequest_obj::AUTH_DIGEST_ANY;

 ::Dynamic URLRequest_obj::nme_get_url;


::hx::ObjectPtr< URLRequest_obj > URLRequest_obj::__new(::String inURL) {
	::hx::ObjectPtr< URLRequest_obj > __this = new URLRequest_obj();
	__this->__construct(inURL);
	return __this;
}

::hx::ObjectPtr< URLRequest_obj > URLRequest_obj::__alloc(::hx::Ctx *_hx_ctx,::String inURL) {
	URLRequest_obj *__this = (URLRequest_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(URLRequest_obj), true, "nme.net.URLRequest"));
	*(void **)__this = URLRequest_obj::_hx_vtable;
	__this->__construct(inURL);
	return __this;
}

URLRequest_obj::URLRequest_obj()
{
}

void URLRequest_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(URLRequest);
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_MEMBER_NAME(userAgent,"userAgent");
	HX_MARK_MEMBER_NAME(requestHeaders,"requestHeaders");
	HX_MARK_MEMBER_NAME(authType,"authType");
	HX_MARK_MEMBER_NAME(cookieString,"cookieString");
	HX_MARK_MEMBER_NAME(verbose,"verbose");
	HX_MARK_MEMBER_NAME(method,"method");
	HX_MARK_MEMBER_NAME(contentType,"contentType");
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(credentials,"credentials");
	HX_MARK_MEMBER_NAME(followRedirects,"followRedirects");
	HX_MARK_MEMBER_NAME(_hx___bytes,"__bytes");
	HX_MARK_END_CLASS();
}

void URLRequest_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(url,"url");
	HX_VISIT_MEMBER_NAME(userAgent,"userAgent");
	HX_VISIT_MEMBER_NAME(requestHeaders,"requestHeaders");
	HX_VISIT_MEMBER_NAME(authType,"authType");
	HX_VISIT_MEMBER_NAME(cookieString,"cookieString");
	HX_VISIT_MEMBER_NAME(verbose,"verbose");
	HX_VISIT_MEMBER_NAME(method,"method");
	HX_VISIT_MEMBER_NAME(contentType,"contentType");
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(credentials,"credentials");
	HX_VISIT_MEMBER_NAME(followRedirects,"followRedirects");
	HX_VISIT_MEMBER_NAME(_hx___bytes,"__bytes");
}

::hx::Val URLRequest_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { return ::hx::Val( url ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"method") ) { return ::hx::Val( method ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"verbose") ) { return ::hx::Val( verbose ); }
		if (HX_FIELD_EQ(inName,"__bytes") ) { return ::hx::Val( _hx___bytes ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"authType") ) { return ::hx::Val( authType ); }
		if (HX_FIELD_EQ(inName,"nmeBytes") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_nmeBytes() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"userAgent") ) { return ::hx::Val( userAgent ); }
		if (HX_FIELD_EQ(inName,"basicAuth") ) { return ::hx::Val( basicAuth_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"digestAuth") ) { return ::hx::Val( digestAuth_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmePrepare") ) { return ::hx::Val( nmePrepare_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contentType") ) { return ::hx::Val( contentType ); }
		if (HX_FIELD_EQ(inName,"credentials") ) { return ::hx::Val( credentials ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cookieString") ) { return ::hx::Val( cookieString ); }
		if (HX_FIELD_EQ(inName,"get_nmeBytes") ) { return ::hx::Val( get_nmeBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_nmeBytes") ) { return ::hx::Val( set_nmeBytes_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"launchBrowser") ) { return ::hx::Val( launchBrowser_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"requestHeaders") ) { return ::hx::Val( requestHeaders ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"followRedirects") ) { return ::hx::Val( followRedirects ); }
	}
	return super::__Field(inName,inCallProp);
}

bool URLRequest_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"nme_get_url") ) { outValue = ( nme_get_url ); return true; }
	}
	return false;
}

::hx::Val URLRequest_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"method") ) { method=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"verbose") ) { verbose=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__bytes") ) { _hx___bytes=inValue.Cast<  ::nme::utils::ByteArray >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"authType") ) { authType=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeBytes") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_nmeBytes(inValue.Cast<  ::nme::utils::ByteArray >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"userAgent") ) { userAgent=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contentType") ) { contentType=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"credentials") ) { credentials=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"cookieString") ) { cookieString=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"requestHeaders") ) { requestHeaders=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"followRedirects") ) { followRedirects=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool URLRequest_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"nme_get_url") ) { nme_get_url=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void URLRequest_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("url",6f,2b,59,00));
	outFields->push(HX_("userAgent",7a,f0,12,c8));
	outFields->push(HX_("requestHeaders",b7,b2,4f,dc));
	outFields->push(HX_("authType",42,d2,60,28));
	outFields->push(HX_("cookieString",95,08,16,fc));
	outFields->push(HX_("verbose",82,d7,b9,71));
	outFields->push(HX_("method",e1,f6,5a,09));
	outFields->push(HX_("contentType",93,3c,7b,2a));
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("credentials",bc,12,86,7b));
	outFields->push(HX_("followRedirects",26,5a,40,75));
	outFields->push(HX_("__bytes",4b,61,f6,27));
	outFields->push(HX_("nmeBytes",45,83,21,fb));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo URLRequest_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(URLRequest_obj,url),HX_("url",6f,2b,59,00)},
	{::hx::fsString,(int)offsetof(URLRequest_obj,userAgent),HX_("userAgent",7a,f0,12,c8)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(URLRequest_obj,requestHeaders),HX_("requestHeaders",b7,b2,4f,dc)},
	{::hx::fsInt,(int)offsetof(URLRequest_obj,authType),HX_("authType",42,d2,60,28)},
	{::hx::fsString,(int)offsetof(URLRequest_obj,cookieString),HX_("cookieString",95,08,16,fc)},
	{::hx::fsBool,(int)offsetof(URLRequest_obj,verbose),HX_("verbose",82,d7,b9,71)},
	{::hx::fsString,(int)offsetof(URLRequest_obj,method),HX_("method",e1,f6,5a,09)},
	{::hx::fsString,(int)offsetof(URLRequest_obj,contentType),HX_("contentType",93,3c,7b,2a)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(URLRequest_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsString,(int)offsetof(URLRequest_obj,credentials),HX_("credentials",bc,12,86,7b)},
	{::hx::fsBool,(int)offsetof(URLRequest_obj,followRedirects),HX_("followRedirects",26,5a,40,75)},
	{::hx::fsObject /*  ::nme::utils::ByteArray */ ,(int)offsetof(URLRequest_obj,_hx___bytes),HX_("__bytes",4b,61,f6,27)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo URLRequest_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &URLRequest_obj::AUTH_BASIC,HX_("AUTH_BASIC",37,cf,36,7b)},
	{::hx::fsInt,(void *) &URLRequest_obj::AUTH_DIGEST,HX_("AUTH_DIGEST",7b,53,b8,b4)},
	{::hx::fsInt,(void *) &URLRequest_obj::AUTH_GSSNEGOTIATE,HX_("AUTH_GSSNEGOTIATE",0e,90,e4,a1)},
	{::hx::fsInt,(void *) &URLRequest_obj::AUTH_NTLM,HX_("AUTH_NTLM",be,3f,a8,e2)},
	{::hx::fsInt,(void *) &URLRequest_obj::AUTH_DIGEST_IE,HX_("AUTH_DIGEST_IE",60,21,93,3c)},
	{::hx::fsInt,(void *) &URLRequest_obj::AUTH_DIGEST_ANY,HX_("AUTH_DIGEST_ANY",c8,08,24,c4)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &URLRequest_obj::nme_get_url,HX_("nme_get_url",cd,da,0b,d9)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String URLRequest_obj_sMemberFields[] = {
	HX_("url",6f,2b,59,00),
	HX_("userAgent",7a,f0,12,c8),
	HX_("requestHeaders",b7,b2,4f,dc),
	HX_("authType",42,d2,60,28),
	HX_("cookieString",95,08,16,fc),
	HX_("verbose",82,d7,b9,71),
	HX_("method",e1,f6,5a,09),
	HX_("contentType",93,3c,7b,2a),
	HX_("data",2a,56,63,42),
	HX_("credentials",bc,12,86,7b),
	HX_("followRedirects",26,5a,40,75),
	HX_("__bytes",4b,61,f6,27),
	HX_("toString",ac,d0,6e,38),
	HX_("launchBrowser",b5,1d,f0,31),
	HX_("basicAuth",36,25,20,42),
	HX_("digestAuth",cc,7d,34,fe),
	HX_("nmePrepare",e1,f6,de,06),
	HX_("get_nmeBytes",4e,37,3b,b0),
	HX_("set_nmeBytes",c2,5a,34,c5),
	::String(null()) };

static void URLRequest_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(URLRequest_obj::AUTH_BASIC,"AUTH_BASIC");
	HX_MARK_MEMBER_NAME(URLRequest_obj::AUTH_DIGEST,"AUTH_DIGEST");
	HX_MARK_MEMBER_NAME(URLRequest_obj::AUTH_GSSNEGOTIATE,"AUTH_GSSNEGOTIATE");
	HX_MARK_MEMBER_NAME(URLRequest_obj::AUTH_NTLM,"AUTH_NTLM");
	HX_MARK_MEMBER_NAME(URLRequest_obj::AUTH_DIGEST_IE,"AUTH_DIGEST_IE");
	HX_MARK_MEMBER_NAME(URLRequest_obj::AUTH_DIGEST_ANY,"AUTH_DIGEST_ANY");
	HX_MARK_MEMBER_NAME(URLRequest_obj::nme_get_url,"nme_get_url");
};

#ifdef HXCPP_VISIT_ALLOCS
static void URLRequest_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(URLRequest_obj::AUTH_BASIC,"AUTH_BASIC");
	HX_VISIT_MEMBER_NAME(URLRequest_obj::AUTH_DIGEST,"AUTH_DIGEST");
	HX_VISIT_MEMBER_NAME(URLRequest_obj::AUTH_GSSNEGOTIATE,"AUTH_GSSNEGOTIATE");
	HX_VISIT_MEMBER_NAME(URLRequest_obj::AUTH_NTLM,"AUTH_NTLM");
	HX_VISIT_MEMBER_NAME(URLRequest_obj::AUTH_DIGEST_IE,"AUTH_DIGEST_IE");
	HX_VISIT_MEMBER_NAME(URLRequest_obj::AUTH_DIGEST_ANY,"AUTH_DIGEST_ANY");
	HX_VISIT_MEMBER_NAME(URLRequest_obj::nme_get_url,"nme_get_url");
};

#endif

::hx::Class URLRequest_obj::__mClass;

static ::String URLRequest_obj_sStaticFields[] = {
	HX_("AUTH_BASIC",37,cf,36,7b),
	HX_("AUTH_DIGEST",7b,53,b8,b4),
	HX_("AUTH_GSSNEGOTIATE",0e,90,e4,a1),
	HX_("AUTH_NTLM",be,3f,a8,e2),
	HX_("AUTH_DIGEST_IE",60,21,93,3c),
	HX_("AUTH_DIGEST_ANY",c8,08,24,c4),
	HX_("nme_get_url",cd,da,0b,d9),
	::String(null())
};

void URLRequest_obj::__register()
{
	URLRequest_obj _hx_dummy;
	URLRequest_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.net.URLRequest",59,9c,f5,98);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &URLRequest_obj::__GetStatic;
	__mClass->mSetStaticField = &URLRequest_obj::__SetStatic;
	__mClass->mMarkFunc = URLRequest_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(URLRequest_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(URLRequest_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< URLRequest_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = URLRequest_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = URLRequest_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = URLRequest_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void URLRequest_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_10_boot)
HXDLIN(  10)		AUTH_BASIC = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_11_boot)
HXDLIN(  11)		AUTH_DIGEST = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_12_boot)
HXDLIN(  12)		AUTH_GSSNEGOTIATE = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_13_boot)
HXDLIN(  13)		AUTH_NTLM = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_14_boot)
HXDLIN(  14)		AUTH_DIGEST_IE = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_15_boot)
HXDLIN(  15)		AUTH_DIGEST_ANY = 15;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2d0c14b0b10e82b4_114_boot)
HXDLIN( 114)		nme_get_url = ::nme::Loader_obj::load(HX_("nme_get_url",cd,da,0b,d9),1);
            	}
}

} // end namespace nme
} // end namespace net
