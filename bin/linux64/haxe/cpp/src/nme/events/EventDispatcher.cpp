// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_nme_events_ErrorEvent
#include <nme/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_EventPhase
#include <nme/events/EventPhase.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IOErrorEvent
#include <nme/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_nme_events_Listener
#include <nme/events/Listener.h>
#endif
#ifndef INCLUDED_nme_events_TextEvent
#include <nme/events/TextEvent.h>
#endif
#ifndef INCLUDED_nme_utils_WeakRef
#include <nme/utils/WeakRef.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e2a6813d697f8351_58_new,"nme.events.EventDispatcher","new",0x9707d606,"nme.events.EventDispatcher.new","nme/events/EventDispatcher.hx",58,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a6813d697f8351_64_addEventListener,"nme.events.EventDispatcher","addEventListener",0xd934f667,"nme.events.EventDispatcher.addEventListener","nme/events/EventDispatcher.hx",64,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a6813d697f8351_102_mightRespondTo,"nme.events.EventDispatcher","mightRespondTo",0xd7c399f3,"nme.events.EventDispatcher.mightRespondTo","nme/events/EventDispatcher.hx",102,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a6813d697f8351_124_DispatchCompleteEvent,"nme.events.EventDispatcher","DispatchCompleteEvent",0x8509e48d,"nme.events.EventDispatcher.DispatchCompleteEvent","nme/events/EventDispatcher.hx",124,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a6813d697f8351_130_dispatchEvent,"nme.events.EventDispatcher","dispatchEvent",0x2e6a9826,"nme.events.EventDispatcher.dispatchEvent","nme/events/EventDispatcher.hx",130,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a6813d697f8351_178_DispatchIOErrorEvent,"nme.events.EventDispatcher","DispatchIOErrorEvent",0x521dc02c,"nme.events.EventDispatcher.DispatchIOErrorEvent","nme/events/EventDispatcher.hx",178,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a6813d697f8351_184_hasEventListener,"nme.events.EventDispatcher","hasEventListener",0xf4bb198e,"nme.events.EventDispatcher.hasEventListener","nme/events/EventDispatcher.hx",184,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a6813d697f8351_201_removeEventListener,"nme.events.EventDispatcher","removeEventListener",0x415db970,"nme.events.EventDispatcher.removeEventListener","nme/events/EventDispatcher.hx",201,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a6813d697f8351_225_toString,"nme.events.EventDispatcher","toString",0xfd469146,"nme.events.EventDispatcher.toString","nme/events/EventDispatcher.hx",225,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a6813d697f8351_229_willTrigger,"nme.events.EventDispatcher","willTrigger",0xc28b0fec,"nme.events.EventDispatcher.willTrigger","nme/events/EventDispatcher.hx",229,0x1eb8c64a)
HX_LOCAL_STACK_FRAME(_hx_pos_e2a6813d697f8351_106_sortEvents,"nme.events.EventDispatcher","sortEvents",0x6e0c6031,"nme.events.EventDispatcher.sortEvents","nme/events/EventDispatcher.hx",106,0x1eb8c64a)
namespace nme{
namespace events{

void EventDispatcher_obj::__construct(::Dynamic target){
            	HX_STACKFRAME(&_hx_pos_e2a6813d697f8351_58_new)
HXLINE(  59)		::Dynamic _hx_tmp;
HXDLIN(  59)		if (::hx::IsNull( target )) {
HXLINE(  59)			_hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
            		}
            		else {
HXLINE(  59)			_hx_tmp = target;
            		}
HXDLIN(  59)		this->nmeTarget = _hx_tmp;
HXLINE(  60)		this->nmeEventMap = null();
            	}

Dynamic EventDispatcher_obj::__CreateEmpty() { return new EventDispatcher_obj; }

void *EventDispatcher_obj::_hx_vtable = 0;

Dynamic EventDispatcher_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EventDispatcher_obj > _hx_result = new EventDispatcher_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool EventDispatcher_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x169017a6;
}

static ::nme::events::IEventDispatcher_obj _hx_nme_events_EventDispatcher__hx_nme_events_IEventDispatcher= {
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ,::hx::Null< int > ,::hx::Null< bool > ))&::nme::events::EventDispatcher_obj::addEventListener,
	( bool (::hx::Object::*)( ::nme::events::Event))&::nme::events::EventDispatcher_obj::dispatchEvent,
	( bool (::hx::Object::*)(::String))&::nme::events::EventDispatcher_obj::hasEventListener,
	( void (::hx::Object::*)(::String, ::Dynamic,::hx::Null< bool > ))&::nme::events::EventDispatcher_obj::removeEventListener,
	( bool (::hx::Object::*)(::String))&::nme::events::EventDispatcher_obj::willTrigger,
};

void *EventDispatcher_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xc3e4c1b7: return &_hx_nme_events_EventDispatcher__hx_nme_events_IEventDispatcher;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void EventDispatcher_obj::addEventListener(::String type, ::Dynamic listener,::hx::Null< bool >  __o_useCapture,::hx::Null< int >  __o_priority,::hx::Null< bool >  __o_useWeakReference){
            		bool useCapture = __o_useCapture.Default(false);
            		int priority = __o_priority.Default(0);
            		bool useWeakReference = __o_useWeakReference.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_e2a6813d697f8351_64_addEventListener)
HXLINE(  65)		if (::hx::IsNull( this->nmeEventMap )) {
HXLINE(  66)			this->nmeEventMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
HXLINE(  68)		::Array< ::Dynamic> list = ( (::Array< ::Dynamic>)(this->nmeEventMap->get(type)) );
HXLINE(  69)		if (::hx::IsNull( list )) {
HXLINE(  71)			list = ::Array_obj< ::Dynamic>::__new();
HXLINE(  72)			this->nmeEventMap->set(type,list);
            		}
HXLINE(  75)		bool found = false;
HXLINE(  76)		 ::nme::events::Listener liNew =  ::nme::events::Listener_obj::__alloc( HX_CTX ,listener,useCapture,priority,useWeakReference);
HXLINE(  77)		{
HXLINE(  77)			int _g = 0;
HXDLIN(  77)			int _g1 = list->length;
HXDLIN(  77)			while((_g < _g1)){
HXLINE(  77)				_g = (_g + 1);
HXDLIN(  77)				int i = (_g - 1);
HXLINE(  79)				if (::hx::IsNotNull( list->__get(i).StaticCast<  ::nme::events::Listener >() )) {
HXLINE(  81)					 ::nme::events::Listener li = list->__get(i).StaticCast<  ::nme::events::Listener >();
HXLINE(  82)					if (li->Is(listener,useCapture)) {
HXLINE(  85)						list[i] = liNew;
HXLINE(  86)						found = true;
HXLINE(  87)						goto _hx_goto_1;
            					}
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE(  91)		if (!(found)) {
HXLINE(  92)			list->push(liNew);
            		}
HXLINE(  95)		if ((priority != 0)) {
HXLINE(  96)			list->sort(::nme::events::EventDispatcher_obj::sortEvents_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(EventDispatcher_obj,addEventListener,(void))

bool EventDispatcher_obj::mightRespondTo(::String type){
            	HX_STACKFRAME(&_hx_pos_e2a6813d697f8351_102_mightRespondTo)
HXDLIN( 102)		if (::hx::IsNotNull( this->nmeEventMap )) {
HXDLIN( 102)			return this->nmeEventMap->exists(type);
            		}
            		else {
HXDLIN( 102)			return false;
            		}
HXDLIN( 102)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventDispatcher_obj,mightRespondTo,return )

void EventDispatcher_obj::DispatchCompleteEvent(){
            	HX_GC_STACKFRAME(&_hx_pos_e2a6813d697f8351_124_DispatchCompleteEvent)
HXLINE( 125)		 ::nme::events::Event evt =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("complete",b9,00,c8,7f),null(),null());
HXLINE( 126)		this->dispatchEvent(evt);
            	}


HX_DEFINE_DYNAMIC_FUNC0(EventDispatcher_obj,DispatchCompleteEvent,(void))

bool EventDispatcher_obj::dispatchEvent( ::nme::events::Event event){
            	HX_STACKFRAME(&_hx_pos_e2a6813d697f8351_130_dispatchEvent)
HXLINE( 131)		if (::hx::IsNull( this->nmeEventMap )) {
HXLINE( 132)			return false;
            		}
HXLINE( 134)		if (::hx::IsNull( event->get_target() )) {
HXLINE( 135)			event->set_target(this->nmeTarget);
            		}
HXLINE( 137)		if (::hx::IsNull( event->get_currentTarget() )) {
HXLINE( 138)			event->set_currentTarget(this->nmeTarget);
            		}
HXLINE( 140)		 ::haxe::ds::StringMap list = this->nmeEventMap;
HXDLIN( 140)		::Array< ::Dynamic> list1 = ( (::Array< ::Dynamic>)(list->get(event->get_type())) );
HXLINE( 141)		int capture = event->get_eventPhase();
HXDLIN( 141)		bool capture1 = (capture == ::nme::events::EventPhase_obj::CAPTURING_PHASE);
HXLINE( 143)		if (::hx::IsNotNull( list1 )) {
HXLINE( 145)			int idx = 0;
HXLINE( 146)			int listLength = list1->length;
HXLINE( 147)			while((idx < listLength)){
HXLINE( 149)				 ::nme::events::Listener listener = list1->__get(idx).StaticCast<  ::nme::events::Listener >();
HXLINE( 150)				bool isValid;
HXDLIN( 150)				if (::hx::IsNotNull( listener )) {
HXLINE( 150)					isValid = ::hx::IsNotNull( listener->mListner->get() );
            				}
            				else {
HXLINE( 150)					isValid = false;
            				}
HXLINE( 152)				if (!(isValid)) {
HXLINE( 155)					list1->removeRange(idx,1);
HXLINE( 156)					listLength = list1->length;
            				}
            				else {
HXLINE( 160)					if ((listener->mUseCapture == capture1)) {
HXLINE( 162)						listener->dispatchEvent(event);
HXLINE( 163)						if (event->nmeGetIsCancelledNow()) {
HXLINE( 164)							return true;
            						}
            					}
HXLINE( 167)					idx = (idx + 1);
            				}
            			}
HXLINE( 171)			return true;
            		}
HXLINE( 174)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventDispatcher_obj,dispatchEvent,return )

void EventDispatcher_obj::DispatchIOErrorEvent(){
            	HX_GC_STACKFRAME(&_hx_pos_e2a6813d697f8351_178_DispatchIOErrorEvent)
HXLINE( 179)		 ::nme::events::IOErrorEvent evt =  ::nme::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),null(),null(),null(),null());
HXLINE( 180)		this->dispatchEvent(evt);
            	}


HX_DEFINE_DYNAMIC_FUNC0(EventDispatcher_obj,DispatchIOErrorEvent,(void))

bool EventDispatcher_obj::hasEventListener(::String type){
            	HX_STACKFRAME(&_hx_pos_e2a6813d697f8351_184_hasEventListener)
HXLINE( 185)		if (::hx::IsNull( this->nmeEventMap )) {
HXLINE( 186)			return false;
            		}
HXLINE( 188)		::Array< ::Dynamic> h = ( (::Array< ::Dynamic>)(this->nmeEventMap->get(type)) );
HXLINE( 189)		if (::hx::IsNotNull( h )) {
HXLINE( 191)			int _g = 0;
HXDLIN( 191)			while((_g < h->length)){
HXLINE( 191)				 ::nme::events::Listener item = h->__get(_g).StaticCast<  ::nme::events::Listener >();
HXDLIN( 191)				_g = (_g + 1);
HXLINE( 193)				if (::hx::IsNotNull( item )) {
HXLINE( 193)					return true;
            				}
            			}
            		}
HXLINE( 197)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventDispatcher_obj,hasEventListener,return )

void EventDispatcher_obj::removeEventListener(::String type, ::Dynamic listener,::hx::Null< bool >  __o_capture){
            		bool capture = __o_capture.Default(false);
            	HX_STACKFRAME(&_hx_pos_e2a6813d697f8351_201_removeEventListener)
HXLINE( 202)		if (::hx::IsNull( this->nmeEventMap )) {
HXLINE( 203)			return;
            		}
HXLINE( 205)		if (!(this->nmeEventMap->exists(type))) {
HXLINE( 205)			return;
            		}
HXLINE( 207)		::Array< ::Dynamic> list = ( (::Array< ::Dynamic>)(this->nmeEventMap->get(type)) );
HXLINE( 208)		{
HXLINE( 208)			int _g = 0;
HXDLIN( 208)			int _g1 = list->length;
HXDLIN( 208)			while((_g < _g1)){
HXLINE( 208)				_g = (_g + 1);
HXDLIN( 208)				int i = (_g - 1);
HXLINE( 210)				if (::hx::IsNotNull( list->__get(i).StaticCast<  ::nme::events::Listener >() )) {
HXLINE( 212)					 ::nme::events::Listener li = list->__get(i).StaticCast<  ::nme::events::Listener >();
HXLINE( 213)					if (li->Is(listener,capture)) {
HXLINE( 216)						list[i] = null();
HXLINE( 217)						return;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(EventDispatcher_obj,removeEventListener,(void))

::String EventDispatcher_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_e2a6813d697f8351_225_toString)
HXDLIN( 225)		return ((HX_("[object ",86,f9,3d,d7) + ::Type_obj::getClassName(::Type_obj::getClass(::hx::ObjectPtr<OBJ_>(this)))) + HX_("]",5d,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(EventDispatcher_obj,toString,return )

bool EventDispatcher_obj::willTrigger(::String type){
            	HX_STACKFRAME(&_hx_pos_e2a6813d697f8351_229_willTrigger)
HXLINE( 230)		if (::hx::IsNull( this->nmeEventMap )) {
HXLINE( 231)			return false;
            		}
HXLINE( 233)		return this->nmeEventMap->exists(type);
            	}


HX_DEFINE_DYNAMIC_FUNC1(EventDispatcher_obj,willTrigger,return )

int EventDispatcher_obj::sortEvents( ::nme::events::Listener a, ::nme::events::Listener b){
            	HX_STACKFRAME(&_hx_pos_e2a6813d697f8351_106_sortEvents)
HXLINE( 108)		bool _hx_tmp;
HXDLIN( 108)		if (::hx::IsNull( a )) {
HXLINE( 108)			_hx_tmp = ::hx::IsNull( b );
            		}
            		else {
HXLINE( 108)			_hx_tmp = false;
            		}
HXDLIN( 108)		if (_hx_tmp) {
HXLINE( 108)			return 0;
            		}
HXLINE( 109)		if (::hx::IsNull( a )) {
HXLINE( 109)			return -1;
            		}
HXLINE( 110)		if (::hx::IsNull( b )) {
HXLINE( 110)			return 1;
            		}
HXLINE( 111)		 ::Dynamic al = a->mListner->get();
HXLINE( 112)		 ::Dynamic bl = b->mListner->get();
HXLINE( 113)		bool _hx_tmp1;
HXDLIN( 113)		if (::hx::IsNotNull( al )) {
HXLINE( 113)			_hx_tmp1 = ::hx::IsNull( bl );
            		}
            		else {
HXLINE( 113)			_hx_tmp1 = true;
            		}
HXDLIN( 113)		if (_hx_tmp1) {
HXLINE( 113)			return 0;
            		}
HXLINE( 114)		if ((a->mPriority == b->mPriority)) {
HXLINE( 116)			if ((a->mID == b->mID)) {
HXLINE( 116)				return 0;
            			}
            			else {
HXLINE( 116)				if ((a->mID > b->mID)) {
HXLINE( 116)					return 1;
            				}
            				else {
HXLINE( 116)					return -1;
            				}
            			}
            		}
            		else {
HXLINE( 119)			if ((a->mPriority < b->mPriority)) {
HXLINE( 119)				return 1;
            			}
            			else {
HXLINE( 119)				return -1;
            			}
            		}
HXLINE( 114)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(EventDispatcher_obj,sortEvents,return )


::hx::ObjectPtr< EventDispatcher_obj > EventDispatcher_obj::__new(::Dynamic target) {
	::hx::ObjectPtr< EventDispatcher_obj > __this = new EventDispatcher_obj();
	__this->__construct(target);
	return __this;
}

::hx::ObjectPtr< EventDispatcher_obj > EventDispatcher_obj::__alloc(::hx::Ctx *_hx_ctx,::Dynamic target) {
	EventDispatcher_obj *__this = (EventDispatcher_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EventDispatcher_obj), true, "nme.events.EventDispatcher"));
	*(void **)__this = EventDispatcher_obj::_hx_vtable;
	__this->__construct(target);
	return __this;
}

EventDispatcher_obj::EventDispatcher_obj()
{
}

void EventDispatcher_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EventDispatcher);
	HX_MARK_MEMBER_NAME(nmeEventMap,"nmeEventMap");
	HX_MARK_MEMBER_NAME(nmeTarget,"nmeTarget");
	HX_MARK_END_CLASS();
}

void EventDispatcher_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nmeEventMap,"nmeEventMap");
	HX_VISIT_MEMBER_NAME(nmeTarget,"nmeTarget");
}

::hx::Val EventDispatcher_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nmeTarget") ) { return ::hx::Val( nmeTarget ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nmeEventMap") ) { return ::hx::Val( nmeEventMap ); }
		if (HX_FIELD_EQ(inName,"willTrigger") ) { return ::hx::Val( willTrigger_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"dispatchEvent") ) { return ::hx::Val( dispatchEvent_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"mightRespondTo") ) { return ::hx::Val( mightRespondTo_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return ::hx::Val( addEventListener_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasEventListener") ) { return ::hx::Val( hasEventListener_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"removeEventListener") ) { return ::hx::Val( removeEventListener_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"DispatchIOErrorEvent") ) { return ::hx::Val( DispatchIOErrorEvent_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"DispatchCompleteEvent") ) { return ::hx::Val( DispatchCompleteEvent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool EventDispatcher_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"sortEvents") ) { outValue = sortEvents_dyn(); return true; }
	}
	return false;
}

::hx::Val EventDispatcher_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"nmeTarget") ) { nmeTarget=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nmeEventMap") ) { nmeEventMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EventDispatcher_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("nmeEventMap",08,d0,09,13));
	outFields->push(HX_("nmeTarget",37,f7,ae,21));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EventDispatcher_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(EventDispatcher_obj,nmeEventMap),HX_("nmeEventMap",08,d0,09,13)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(EventDispatcher_obj,nmeTarget),HX_("nmeTarget",37,f7,ae,21)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *EventDispatcher_obj_sStaticStorageInfo = 0;
#endif

static ::String EventDispatcher_obj_sMemberFields[] = {
	HX_("nmeEventMap",08,d0,09,13),
	HX_("nmeTarget",37,f7,ae,21),
	HX_("addEventListener",cd,0b,64,f1),
	HX_("mightRespondTo",d9,69,b2,3a),
	HX_("DispatchCompleteEvent",67,7d,75,a9),
	HX_("dispatchEvent",00,c7,64,c6),
	HX_("DispatchIOErrorEvent",92,80,da,d2),
	HX_("hasEventListener",f4,2e,ea,0c),
	HX_("removeEventListener",ca,87,75,55),
	HX_("toString",ac,d0,6e,38),
	HX_("willTrigger",46,f4,3f,d8),
	::String(null()) };

::hx::Class EventDispatcher_obj::__mClass;

static ::String EventDispatcher_obj_sStaticFields[] = {
	HX_("sortEvents",17,c5,4f,f3),
	::String(null())
};

void EventDispatcher_obj::__register()
{
	EventDispatcher_obj _hx_dummy;
	EventDispatcher_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.EventDispatcher",14,1b,1f,a7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &EventDispatcher_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(EventDispatcher_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EventDispatcher_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EventDispatcher_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EventDispatcher_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EventDispatcher_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace events
