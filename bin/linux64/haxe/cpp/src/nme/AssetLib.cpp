// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_AssetLib
#include <nme/AssetLib.h>
#endif
#ifndef INCLUDED_nme_AssetType
#include <nme/AssetType.h>
#endif
#ifndef INCLUDED_nme_display_BitmapData
#include <nme/display/BitmapData.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObjectContainer
#include <nme/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_display_MovieClip
#include <nme/display/MovieClip.h>
#endif
#ifndef INCLUDED_nme_display_Sprite
#include <nme/display/Sprite.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_media_Sound
#include <nme/media/Sound.h>
#endif
#ifndef INCLUDED_nme_text_Font
#include <nme/text/Font.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_63989c3a34cceadb_16_new,"nme.AssetLib","new",0x57b8c0ef,"nme.AssetLib.new","nme/AssetLib.hx",16,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_18_exists,"nme.AssetLib","exists",0x20b6b0ad,"nme.AssetLib.exists","nme/AssetLib.hx",18,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_19_getBitmapData,"nme.AssetLib","getBitmapData",0x0d61eb3e,"nme.AssetLib.getBitmapData","nme/AssetLib.hx",19,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_20_getBytes,"nme.AssetLib","getBytes",0x4f2cc106,"nme.AssetLib.getBytes","nme/AssetLib.hx",20,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_21_getFont,"nme.AssetLib","getFont",0x712cf194,"nme.AssetLib.getFont","nme/AssetLib.hx",21,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_22_getMovieClip,"nme.AssetLib","getMovieClip",0xfd87a4bb,"nme.AssetLib.getMovieClip","nme/AssetLib.hx",22,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_23_getMusic,"nme.AssetLib","getMusic",0xa1ef8940,"nme.AssetLib.getMusic","nme/AssetLib.hx",23,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_24_getPath,"nme.AssetLib","getPath",0x77be796a,"nme.AssetLib.getPath","nme/AssetLib.hx",24,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_25_getSound,"nme.AssetLib","getSound",0x1261456a,"nme.AssetLib.getSound","nme/AssetLib.hx",25,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_27_getText,"nme.AssetLib","getText",0x7a666072,"nme.AssetLib.getText","nme/AssetLib.hx",27,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_34_isLocal,"nme.AssetLib","isLocal",0x70605130,"nme.AssetLib.isLocal","nme/AssetLib.hx",34,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_35_list,"nme.AssetLib","list",0x68a0a8ef,"nme.AssetLib.list","nme/AssetLib.hx",35,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_37_load,"nme.AssetLib","load",0x68a526b7,"nme.AssetLib.load","nme/AssetLib.hx",37,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_40_loadBitmapData,"nme.AssetLib","loadBitmapData",0xd6410b50,"nme.AssetLib.loadBitmapData","nme/AssetLib.hx",40,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_43_loadBytes,"nme.AssetLib","loadBytes",0x2d059a34,"nme.AssetLib.loadBytes","nme/AssetLib.hx",43,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_46_loadFont,"nme.AssetLib","loadFont",0xe61dd826,"nme.AssetLib.loadFont","nme/AssetLib.hx",46,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_49_loadMovieClip,"nme.AssetLib","loadMovieClip",0x17aface9,"nme.AssetLib.loadMovieClip","nme/AssetLib.hx",49,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_52_loadMusic,"nme.AssetLib","loadMusic",0x7fc8626e,"nme.AssetLib.loadMusic","nme/AssetLib.hx",52,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_55_loadSound,"nme.AssetLib","loadSound",0xf03a1e98,"nme.AssetLib.loadSound","nme/AssetLib.hx",55,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_60_loadText,"nme.AssetLib","loadText",0xef574704,"nme.AssetLib.loadText","nme/AssetLib.hx",60,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_59_loadText,"nme.AssetLib","loadText",0xef574704,"nme.AssetLib.loadText","nme/AssetLib.hx",59,0xdd1e5f00)
HX_LOCAL_STACK_FRAME(_hx_pos_63989c3a34cceadb_66_unload,"nme.AssetLib","unload",0xc66333d0,"nme.AssetLib.unload","nme/AssetLib.hx",66,0xdd1e5f00)
namespace nme{

void AssetLib_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_16_new)
            	}

Dynamic AssetLib_obj::__CreateEmpty() { return new AssetLib_obj; }

void *AssetLib_obj::_hx_vtable = 0;

Dynamic AssetLib_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AssetLib_obj > _hx_result = new AssetLib_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AssetLib_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x78fd3237;
}

bool AssetLib_obj::exists(::String id, ::nme::AssetType type){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_18_exists)
HXDLIN(  18)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLib_obj,exists,return )

 ::nme::display::BitmapData AssetLib_obj::getBitmapData(::String id){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_19_getBitmapData)
HXDLIN(  19)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLib_obj,getBitmapData,return )

 ::nme::utils::ByteArray AssetLib_obj::getBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_20_getBytes)
HXDLIN(  20)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLib_obj,getBytes,return )

 ::nme::text::Font AssetLib_obj::getFont(::String id){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_21_getFont)
HXDLIN(  21)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLib_obj,getFont,return )

 ::nme::display::MovieClip AssetLib_obj::getMovieClip(::String id){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_22_getMovieClip)
HXDLIN(  22)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLib_obj,getMovieClip,return )

 ::nme::media::Sound AssetLib_obj::getMusic(::String id){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_23_getMusic)
HXDLIN(  23)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLib_obj,getMusic,return )

::String AssetLib_obj::getPath(::String id){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_24_getPath)
HXDLIN(  24)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLib_obj,getPath,return )

 ::nme::media::Sound AssetLib_obj::getSound(::String id){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_25_getSound)
HXDLIN(  25)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLib_obj,getSound,return )

::String AssetLib_obj::getText(::String id){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_27_getText)
HXLINE(  28)		 ::nme::utils::ByteArray bytes = this->getBytes(id);
HXLINE(  29)		if (::hx::IsNull( bytes )) {
HXLINE(  30)			return null();
            		}
HXLINE(  32)		return bytes->readUTFBytes(bytes->length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLib_obj,getText,return )

bool AssetLib_obj::isLocal(::String id, ::nme::AssetType type){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_34_isLocal)
HXDLIN(  34)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLib_obj,isLocal,return )

::Array< ::String > AssetLib_obj::list( ::nme::AssetType type){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_35_list)
HXDLIN(  35)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLib_obj,list,return )

void AssetLib_obj::load( ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_37_load)
HXDLIN(  37)		handler(::hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC1(AssetLib_obj,load,(void))

void AssetLib_obj::loadBitmapData(::String id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_40_loadBitmapData)
HXDLIN(  40)		handler(this->getBitmapData(id));
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLib_obj,loadBitmapData,(void))

void AssetLib_obj::loadBytes(::String id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_43_loadBytes)
HXDLIN(  43)		handler(this->getBytes(id));
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLib_obj,loadBytes,(void))

void AssetLib_obj::loadFont(::String id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_46_loadFont)
HXDLIN(  46)		handler(this->getFont(id));
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLib_obj,loadFont,(void))

void AssetLib_obj::loadMovieClip(::String id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_49_loadMovieClip)
HXDLIN(  49)		handler(this->getMovieClip(id));
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLib_obj,loadMovieClip,(void))

void AssetLib_obj::loadMusic(::String id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_52_loadMusic)
HXDLIN(  52)		handler(this->getMusic(id));
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLib_obj,loadMusic,(void))

void AssetLib_obj::loadSound(::String id, ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_55_loadSound)
HXDLIN(  55)		handler(this->getSound(id));
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLib_obj,loadSound,(void))

void AssetLib_obj::loadText(::String id, ::Dynamic handler){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,handler) HXARGC(1)
            		void _hx_run( ::nme::utils::ByteArray bytes){
            			HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_60_loadText)
HXLINE(  60)			if (::hx::IsNull( bytes )) {
HXLINE(  61)				handler(null());
            			}
            			else {
HXLINE(  63)				 ::Dynamic handler1 = handler;
HXDLIN(  63)				handler1(bytes->readUTFBytes(bytes->length));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_59_loadText)
HXDLIN(  59)		this->loadBytes(id, ::Dynamic(new _hx_Closure_0(handler)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(AssetLib_obj,loadText,(void))

void AssetLib_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_63989c3a34cceadb_66_unload)
            	}


HX_DEFINE_DYNAMIC_FUNC0(AssetLib_obj,unload,(void))


::hx::ObjectPtr< AssetLib_obj > AssetLib_obj::__new() {
	::hx::ObjectPtr< AssetLib_obj > __this = new AssetLib_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< AssetLib_obj > AssetLib_obj::__alloc(::hx::Ctx *_hx_ctx) {
	AssetLib_obj *__this = (AssetLib_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AssetLib_obj), true, "nme.AssetLib"));
	*(void **)__this = AssetLib_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

AssetLib_obj::AssetLib_obj()
{
}

void AssetLib_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AssetLib);
	HX_MARK_MEMBER_NAME(eventCallback,"eventCallback");
	HX_MARK_END_CLASS();
}

void AssetLib_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(eventCallback,"eventCallback");
}

::hx::Val AssetLib_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"list") ) { return ::hx::Val( list_dyn() ); }
		if (HX_FIELD_EQ(inName,"load") ) { return ::hx::Val( load_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { return ::hx::Val( exists_dyn() ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return ::hx::Val( unload_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getFont") ) { return ::hx::Val( getFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPath") ) { return ::hx::Val( getPath_dyn() ); }
		if (HX_FIELD_EQ(inName,"getText") ) { return ::hx::Val( getText_dyn() ); }
		if (HX_FIELD_EQ(inName,"isLocal") ) { return ::hx::Val( isLocal_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getBytes") ) { return ::hx::Val( getBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"getMusic") ) { return ::hx::Val( getMusic_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSound") ) { return ::hx::Val( getSound_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadFont") ) { return ::hx::Val( loadFont_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadText") ) { return ::hx::Val( loadText_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"loadBytes") ) { return ::hx::Val( loadBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadMusic") ) { return ::hx::Val( loadMusic_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadSound") ) { return ::hx::Val( loadSound_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getMovieClip") ) { return ::hx::Val( getMovieClip_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"eventCallback") ) { return ::hx::Val( eventCallback ); }
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { return ::hx::Val( getBitmapData_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadMovieClip") ) { return ::hx::Val( loadMovieClip_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadBitmapData") ) { return ::hx::Val( loadBitmapData_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val AssetLib_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"eventCallback") ) { eventCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AssetLib_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("eventCallback",ff,c7,09,39));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo AssetLib_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(AssetLib_obj,eventCallback),HX_("eventCallback",ff,c7,09,39)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *AssetLib_obj_sStaticStorageInfo = 0;
#endif

static ::String AssetLib_obj_sMemberFields[] = {
	HX_("eventCallback",ff,c7,09,39),
	HX_("exists",dc,1d,e0,bf),
	HX_("getBitmapData",ef,11,33,90),
	HX_("getBytes",f5,17,6f,1d),
	HX_("getFont",85,0d,43,16),
	HX_("getMovieClip",2a,9f,71,27),
	HX_("getMusic",2f,e0,31,70),
	HX_("getPath",5b,95,d4,1c),
	HX_("getSound",59,9c,a3,e0),
	HX_("getText",63,7c,7c,1f),
	HX_("isLocal",21,6d,76,15),
	HX_("list",5e,1c,b3,47),
	HX_("load",26,9a,b7,47),
	HX_("loadBitmapData",7f,bf,71,ca),
	HX_("loadBytes",65,54,cf,d8),
	HX_("loadFont",15,2f,60,b4),
	HX_("loadMovieClip",9a,d3,80,9a),
	HX_("loadMusic",9f,1c,92,2b),
	HX_("loadSound",c9,d8,03,9c),
	HX_("loadText",f3,9d,99,bd),
	HX_("unload",ff,a0,8c,65),
	::String(null()) };

::hx::Class AssetLib_obj::__mClass;

void AssetLib_obj::__register()
{
	AssetLib_obj _hx_dummy;
	AssetLib_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.AssetLib",7d,1d,14,87);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(AssetLib_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< AssetLib_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AssetLib_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AssetLib_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
