// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nme_Assets
#include <nme/Assets.h>
#endif
#ifndef INCLUDED_nme_Loader
#include <nme/Loader.h>
#endif
#ifndef INCLUDED_nme_app_IAppEventHandler
#include <nme/app/IAppEventHandler.h>
#endif
#ifndef INCLUDED_nme_app_IPollClient
#include <nme/app/IPollClient.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObjectContainer
#include <nme/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_display_Stage
#include <nme/display/Stage.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_NetStatusEvent
#include <nme/events/NetStatusEvent.h>
#endif
#ifndef INCLUDED_nme_geom_Point
#include <nme/geom/Point.h>
#endif
#ifndef INCLUDED_nme_geom_Rectangle
#include <nme/geom/Rectangle.h>
#endif
#ifndef INCLUDED_nme_media_StageVideo
#include <nme/media/StageVideo.h>
#endif
#ifndef INCLUDED_nme_net_NetStream
#include <nme/net/NetStream.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_95e76489c5876d23_74_new,"nme.media.StageVideo","new",0x873b2ae1,"nme.media.StageVideo.new","nme/media/StageVideo.hx",74,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_87_get_colorSpaces,"nme.media.StageVideo","get_colorSpaces",0xcae48248,"nme.media.StageVideo.get_colorSpaces","nme/media/StageVideo.hx",87,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_96_attachNetStream,"nme.media.StageVideo","attachNetStream",0xae5cd839,"nme.media.StageVideo.attachNetStream","nme/media/StageVideo.hx",96,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_114_get_pan,"nme.media.StageVideo","get_pan",0x041748f5,"nme.media.StageVideo.get_pan","nme/media/StageVideo.hx",114,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_116_set_pan,"nme.media.StageVideo","set_pan",0xf718da01,"nme.media.StageVideo.set_pan","nme/media/StageVideo.hx",116,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_124_get_zoom,"nme.media.StageVideo","get_zoom",0x96ef507b,"nme.media.StageVideo.get_zoom","nme/media/StageVideo.hx",124,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_126_set_zoom,"nme.media.StageVideo","set_zoom",0x454ca9ef,"nme.media.StageVideo.set_zoom","nme/media/StageVideo.hx",126,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_135_get_viewPort,"nme.media.StageVideo","get_viewPort",0x347bf9ee,"nme.media.StageVideo.get_viewPort","nme/media/StageVideo.hx",135,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_137_set_viewPort,"nme.media.StageVideo","set_viewPort",0x49751d62,"nme.media.StageVideo.set_viewPort","nme/media/StageVideo.hx",137,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_148_nmeCreate,"nme.media.StageVideo","nmeCreate",0xc5091c23,"nme.media.StageVideo.nmeCreate","nme/media/StageVideo.hx",148,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_160_nmeDestroy,"nme.media.StageVideo","nmeDestroy",0xb60af9f3,"nme.media.StageVideo.nmeDestroy","nme/media/StageVideo.hx",160,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_172_nmeGetTime,"nme.media.StageVideo","nmeGetTime",0xb10448bc,"nme.media.StageVideo.nmeGetTime","nme/media/StageVideo.hx",172,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_179_nmeSeek,"nme.media.StageVideo","nmeSeek",0xaf0ed2df,"nme.media.StageVideo.nmeSeek","nme/media/StageVideo.hx",179,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_186_nmePlay,"nme.media.StageVideo","nmePlay",0xad187b5b,"nme.media.StageVideo.nmePlay","nme/media/StageVideo.hx",186,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_198_nmePause,"nme.media.StageVideo","nmePause",0xc11d43af,"nme.media.StageVideo.nmePause","nme/media/StageVideo.hx",198,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_204_nmeTogglePause,"nme.media.StageVideo","nmeTogglePause",0xa5bfcc3b,"nme.media.StageVideo.nmeTogglePause","nme/media/StageVideo.hx",204,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_210_nmeResume,"nme.media.StageVideo","nmeResume",0x517e1ed4,"nme.media.StageVideo.nmeResume","nme/media/StageVideo.hx",210,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_217_nmeSetVolume,"nme.media.StageVideo","nmeSetVolume",0x55075c55,"nme.media.StageVideo.nmeSetVolume","nme/media/StageVideo.hx",217,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_222_nmeGetBytesTotal,"nme.media.StageVideo","nmeGetBytesTotal",0xbbd30148,"nme.media.StageVideo.nmeGetBytesTotal","nme/media/StageVideo.hx",222,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_232_nmeGetDecodedFrames,"nme.media.StageVideo","nmeGetDecodedFrames",0x64c6412d,"nme.media.StageVideo.nmeGetDecodedFrames","nme/media/StageVideo.hx",232,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_237_nmeGetBytesLoaded,"nme.media.StageVideo","nmeGetBytesLoaded",0x5d666e01,"nme.media.StageVideo.nmeGetBytesLoaded","nme/media/StageVideo.hx",237,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_250_nmeSetSoundTransform,"nme.media.StageVideo","nmeSetSoundTransform",0x6d129418,"nme.media.StageVideo.nmeSetSoundTransform","nme/media/StageVideo.hx",250,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_257__native_meta_data,"nme.media.StageVideo","_native_meta_data",0xa43a0ddc,"nme.media.StageVideo._native_meta_data","nme/media/StageVideo.hx",257,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_266__native_set_data,"nme.media.StageVideo","_native_set_data",0x3ebed96f,"nme.media.StageVideo._native_set_data","nme/media/StageVideo.hx",266,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_275__native_play_status,"nme.media.StageVideo","_native_play_status",0x0e29e015,"nme.media.StageVideo._native_play_status","nme/media/StageVideo.hx",275,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_320__native_on_seek,"nme.media.StageVideo","_native_on_seek",0xb302c290,"nme.media.StageVideo._native_on_seek","nme/media/StageVideo.hx",320,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_342__native_on_seek_data,"nme.media.StageVideo","_native_on_seek_data",0xea966579,"nme.media.StageVideo._native_on_seek_data","nme/media/StageVideo.hx",342,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_27_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",27,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_28_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",28,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_29_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",29,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_30_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",30,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_31_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",31,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_34_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",34,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_35_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",35,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_37_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",37,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_38_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",38,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_39_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",39,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_41_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",41,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_43_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",43,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_44_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",44,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_45_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",45,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_47_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",47,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_48_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",48,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_50_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",50,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_51_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",51,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_52_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",52,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_53_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",53,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_54_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",54,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_55_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",55,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_56_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",56,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_58_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",58,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_59_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",59,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_60_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",60,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_350_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",350,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_351_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",351,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_352_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",352,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_353_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",353,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_354_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",354,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_355_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",355,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_356_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",356,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_357_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",357,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_358_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",358,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_359_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",359,0x88f583ad)
HX_LOCAL_STACK_FRAME(_hx_pos_95e76489c5876d23_360_boot,"nme.media.StageVideo","boot",0xc4a35a91,"nme.media.StageVideo.boot","nme/media/StageVideo.hx",360,0x88f583ad)
namespace nme{
namespace media{

void StageVideo_obj::__construct( ::nme::display::Stage inStage){
            	HX_GC_STACKFRAME(&_hx_pos_95e76489c5876d23_74_new)
HXLINE(  75)		super::__construct(null());
HXLINE(  76)		this->nmeStage = inStage;
HXLINE(  77)		this->depth = 0;
HXLINE(  78)		this->nmePan =  ::nme::geom::Point_obj::__alloc( HX_CTX ,0,0);
HXLINE(  79)		this->nmeZoom =  ::nme::geom::Point_obj::__alloc( HX_CTX ,1,1);
HXLINE(  80)		this->videoWidth = 0;
HXLINE(  81)		this->videoHeight = 0;
HXLINE(  82)		this->duration = ( (Float)(0) );
HXLINE(  83)		this->nmeViewport =  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,0,0);
            	}

Dynamic StageVideo_obj::__CreateEmpty() { return new StageVideo_obj; }

void *StageVideo_obj::_hx_vtable = 0;

Dynamic StageVideo_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StageVideo_obj > _hx_result = new StageVideo_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool StageVideo_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x169017a6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x169017a6;
	} else {
		return inClassId==(int)0x36efeb7f;
	}
}

::Array< ::String > StageVideo_obj::get_colorSpaces(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_87_get_colorSpaces)
HXLINE(  88)		 ::Dynamic length = null();
HXDLIN(  88)		::Array< ::String > this1 = ::Array_obj< ::String >::__new();
HXDLIN(  88)		bool _hx_tmp;
HXDLIN(  88)		if (::hx::IsNotNull( length )) {
HXLINE(  88)			_hx_tmp = ::hx::IsGreater( length,0 );
            		}
            		else {
HXLINE(  88)			_hx_tmp = false;
            		}
HXDLIN(  88)		if (_hx_tmp) {
HXLINE(  88)			_hx_array_set_size_exact(this1,( (int)(length) ));
            		}
HXDLIN(  88)		::Array< ::String > colorSpaces = this1;
HXLINE(  89)		colorSpaces->push(HX_("BT.709",64,41,c8,df));
HXLINE(  90)		return colorSpaces;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,get_colorSpaces,return )

void StageVideo_obj::attachNetStream( ::nme::net::NetStream inNetStream){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_96_attachNetStream)
HXLINE(  97)		if (::hx::IsNotNull( this->nmeNetStream )) {
HXLINE(  98)			this->nmeNetStream->nmeAttachedVideo = null();
            		}
HXLINE(  99)		this->nmeNetStream = inNetStream;
HXLINE( 100)		if (::hx::IsNotNull( this->nmeNetStream )) {
HXLINE( 102)			this->nmeNetStream->nmeAttachedVideo = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 103)			this->nmeCreate();
HXLINE( 104)			if (::hx::IsNotNull( this->nmeNetStream->nmeFilename )) {
HXLINE( 105)				Float _hx_tmp;
HXDLIN( 105)				if (this->nmeNetStream->nmePaused) {
HXLINE( 105)					_hx_tmp = ( (Float)(-3) );
            				}
            				else {
HXLINE( 105)					_hx_tmp = ( (Float)(-1) );
            				}
HXDLIN( 105)				this->nmePlay(this->nmeNetStream->nmeFilename,this->nmeNetStream->nmeSeek,_hx_tmp);
            			}
            		}
            		else {
HXLINE( 109)			this->nmeDestroy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageVideo_obj,attachNetStream,(void))

 ::nme::geom::Point StageVideo_obj::get_pan(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_114_get_pan)
HXDLIN( 114)		return this->nmePan->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,get_pan,return )

 ::nme::geom::Point StageVideo_obj::set_pan( ::nme::geom::Point inPan){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_116_set_pan)
HXLINE( 117)		this->nmePan = inPan->clone();
HXLINE( 118)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 119)			::nme::media::StageVideo_obj::nme_sv_pan(this->nmeHandle,inPan->x,inPan->y);
            		}
HXLINE( 121)		return inPan;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageVideo_obj,set_pan,return )

 ::nme::geom::Point StageVideo_obj::get_zoom(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_124_get_zoom)
HXDLIN( 124)		return this->nmeZoom->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,get_zoom,return )

 ::nme::geom::Point StageVideo_obj::set_zoom( ::nme::geom::Point inZoom){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_126_set_zoom)
HXLINE( 127)		this->nmeZoom = inZoom->clone();
HXLINE( 129)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 130)			::nme::media::StageVideo_obj::nme_sv_zoom(this->nmeHandle,this->nmeZoom->x,this->nmeZoom->y);
            		}
HXLINE( 132)		return inZoom;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageVideo_obj,set_zoom,return )

 ::nme::geom::Rectangle StageVideo_obj::get_viewPort(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_135_get_viewPort)
HXDLIN( 135)		return this->nmeViewport->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,get_viewPort,return )

 ::nme::geom::Rectangle StageVideo_obj::set_viewPort( ::nme::geom::Rectangle inVp){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_137_set_viewPort)
HXLINE( 138)		this->nmeViewport = inVp->clone();
HXLINE( 139)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 140)			::nme::media::StageVideo_obj::nme_sv_viewport(this->nmeHandle,inVp->x,inVp->y,inVp->width,inVp->height);
            		}
HXLINE( 141)		return inVp;
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageVideo_obj,set_viewPort,return )

bool StageVideo_obj::nmeCreate(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_148_nmeCreate)
HXLINE( 149)		if (::hx::IsNull( this->nmeHandle )) {
HXLINE( 154)			this->nmeHandle = ::nme::media::StageVideo_obj::nme_sv_create(this->nmeStage->nmeHandle,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 156)		return ::hx::IsNotNull( this->nmeHandle );
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,nmeCreate,return )

void StageVideo_obj::nmeDestroy(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_160_nmeDestroy)
HXLINE( 161)		bool _hx_tmp;
HXDLIN( 161)		if (::hx::IsNotNull( this->nmeNetStream )) {
HXLINE( 161)			_hx_tmp = ::hx::IsNotNull( this->nmeNetStream->nmeAttachedVideo );
            		}
            		else {
HXLINE( 161)			_hx_tmp = false;
            		}
HXDLIN( 161)		if (_hx_tmp) {
HXLINE( 162)			this->nmeNetStream->nmeAttachedVideo = null();
            		}
HXLINE( 163)		this->nmeNetStream = null();
HXLINE( 165)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 166)			::nme::media::StageVideo_obj::nme_sv_destroy(this->nmeHandle);
            		}
HXLINE( 168)		this->nmeHandle = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,nmeDestroy,(void))

Float StageVideo_obj::nmeGetTime(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_172_nmeGetTime)
HXLINE( 173)		if (::hx::IsNull( this->nmeHandle )) {
HXLINE( 174)			return ( (Float)(0) );
            		}
HXLINE( 175)		return ( (Float)(::nme::media::StageVideo_obj::nme_sv_get_time(this->nmeHandle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,nmeGetTime,return )

void StageVideo_obj::nmeSeek(Float inTime){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_179_nmeSeek)
HXLINE( 180)		if (::hx::IsNull( this->nmeHandle )) {
HXLINE( 181)			return;
            		}
HXLINE( 182)		::nme::media::StageVideo_obj::nme_sv_seek(this->nmeHandle,inTime);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageVideo_obj,nmeSeek,(void))

void StageVideo_obj::nmePlay(::String inUrl,::hx::Null< Float >  __o_inStart,::hx::Null< Float >  __o_inLength){
            		Float inStart = __o_inStart.Default(0);
            		Float inLength = __o_inLength.Default(-1);
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_186_nmePlay)
HXLINE( 187)		if (::hx::IsNull( this->nmeHandle )) {
HXLINE( 188)			this->nmeCreate();
            		}
HXLINE( 189)		if (::hx::IsNull( this->nmeHandle )) {
HXLINE( 190)			return;
            		}
HXLINE( 192)		::String localName = ::nme::Assets_obj::getAssetPath(inUrl);
HXLINE( 193)		::String _hx_tmp;
HXDLIN( 193)		if (::hx::IsNotNull( localName )) {
HXLINE( 193)			_hx_tmp = localName;
            		}
            		else {
HXLINE( 193)			_hx_tmp = inUrl;
            		}
HXDLIN( 193)		::nme::media::StageVideo_obj::nme_sv_play(this->nmeHandle,_hx_tmp,inStart,inLength);
            	}


HX_DEFINE_DYNAMIC_FUNC3(StageVideo_obj,nmePlay,(void))

void StageVideo_obj::nmePause(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_198_nmePause)
HXDLIN( 198)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 199)			::nme::media::StageVideo_obj::nme_sv_action(this->nmeHandle,0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,nmePause,(void))

void StageVideo_obj::nmeTogglePause(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_204_nmeTogglePause)
HXDLIN( 204)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 205)			::nme::media::StageVideo_obj::nme_sv_action(this->nmeHandle,2);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,nmeTogglePause,(void))

void StageVideo_obj::nmeResume(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_210_nmeResume)
HXDLIN( 210)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 211)			::nme::media::StageVideo_obj::nme_sv_action(this->nmeHandle,1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,nmeResume,(void))

void StageVideo_obj::nmeSetVolume(Float inVolume){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_217_nmeSetVolume)
HXDLIN( 217)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 218)			::nme::media::StageVideo_obj::nme_sv_set_sound_transform(this->nmeHandle,inVolume,((Float)0.0));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageVideo_obj,nmeSetVolume,(void))

int StageVideo_obj::nmeGetBytesTotal(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_222_nmeGetBytesTotal)
HXLINE( 223)		bool _hx_tmp;
HXDLIN( 223)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 223)			_hx_tmp = (this->duration > 0);
            		}
            		else {
HXLINE( 223)			_hx_tmp = false;
            		}
HXDLIN( 223)		if (_hx_tmp) {
HXLINE( 224)			return 100000;
            		}
HXLINE( 225)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,nmeGetBytesTotal,return )

int StageVideo_obj::nmeGetDecodedFrames(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_232_nmeGetDecodedFrames)
HXDLIN( 232)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,nmeGetDecodedFrames,return )

int StageVideo_obj::nmeGetBytesLoaded(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_237_nmeGetBytesLoaded)
HXLINE( 238)		bool _hx_tmp;
HXDLIN( 238)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 238)			_hx_tmp = (this->duration > 0);
            		}
            		else {
HXLINE( 238)			_hx_tmp = false;
            		}
HXDLIN( 238)		if (_hx_tmp) {
HXLINE( 240)			int percent = ( (int)(::nme::media::StageVideo_obj::nme_sv_get_buffered_percent(this->nmeHandle)) );
HXLINE( 241)			return ::Std_obj::_hx_int(( (Float)((1000 * percent)) ));
            		}
HXLINE( 243)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,nmeGetBytesLoaded,return )

void StageVideo_obj::nmeSetSoundTransform(Float inVolume,Float inRightness){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_250_nmeSetSoundTransform)
HXDLIN( 250)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 251)			::nme::media::StageVideo_obj::nme_sv_set_sound_transform(this->nmeHandle,inVolume,inRightness);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(StageVideo_obj,nmeSetSoundTransform,(void))

void StageVideo_obj::_native_meta_data(){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_257__native_meta_data)
HXDLIN( 257)		if (::hx::IsNotNull( this->nmeNetStream )) {
HXLINE( 259)			 ::Dynamic client = this->nmeNetStream->client;
HXLINE( 260)			bool _hx_tmp;
HXDLIN( 260)			if (::hx::IsNotNull( client )) {
HXLINE( 260)				_hx_tmp = ::hx::IsNotNull( client->__Field(HX_("onMetaData",ce,e7,a9,08),::hx::paccDynamic) );
            			}
            			else {
HXLINE( 260)				_hx_tmp = false;
            			}
HXDLIN( 260)			if (_hx_tmp) {
HXLINE( 261)				client->__Field(HX_("onMetaData",ce,e7,a9,08),::hx::paccDynamic)( ::Dynamic(::hx::Anon_obj::Create(3)
            					->setFixed(0,HX_("width",06,b6,62,ca),this->videoWidth)
            					->setFixed(1,HX_("height",e7,07,4c,02),this->videoHeight)
            					->setFixed(2,HX_("duration",54,0f,8e,14),this->duration)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,_native_meta_data,(void))

void StageVideo_obj::_native_set_data(int inWidth,int inHeight,Float inDuration){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_266__native_set_data)
HXLINE( 267)		this->videoWidth = inWidth;
HXLINE( 268)		this->videoHeight = inHeight;
HXLINE( 269)		this->duration = inDuration;
HXLINE( 270)		this->_native_meta_data();
            	}


HX_DEFINE_DYNAMIC_FUNC3(StageVideo_obj,_native_set_data,(void))

void StageVideo_obj::_native_play_status(int inStatus){
            	HX_GC_STACKFRAME(&_hx_pos_95e76489c5876d23_275__native_play_status)
HXDLIN( 275)		if (::hx::IsNotNull( this->nmeNetStream )) {
HXLINE( 277)			 ::Dynamic client = this->nmeNetStream->client;
HXLINE( 278)			bool _hx_tmp;
HXDLIN( 278)			if (::hx::IsNotNull( client )) {
HXLINE( 278)				_hx_tmp = ::hx::IsNotNull( client->__Field(HX_("onPlayStatus",45,1a,03,85),::hx::paccDynamic) );
            			}
            			else {
HXLINE( 278)				_hx_tmp = false;
            			}
HXDLIN( 278)			if (_hx_tmp) {
HXLINE( 280)				switch((int)(inStatus)){
            					case (int)0: {
HXLINE( 283)						client->__Field(HX_("onPlayStatus",45,1a,03,85),::hx::paccDynamic)(HX_("NetStream.Play.Complete",e2,ae,0c,40));
            					}
            					break;
            					case (int)1: {
HXLINE( 285)						client->__Field(HX_("onPlayStatus",45,1a,03,85),::hx::paccDynamic)(HX_("NetStream.Play.Switch",dd,eb,a2,ae));
            					}
            					break;
            					case (int)2: {
HXLINE( 287)						client->__Field(HX_("onPlayStatus",45,1a,03,85),::hx::paccDynamic)(HX_("NetStream.Play.TransitionComplete",d7,c2,49,44));
            					}
            					break;
            				}
            			}
HXLINE( 291)			 ::Dynamic info = null();
HXLINE( 292)			switch((int)(inStatus)){
            				case (int)0: {
HXLINE( 304)					info =  ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("code",2d,b1,c4,41),HX_("NetStream.Play.Complete",e2,ae,0c,40)));
            				}
            				break;
            				case (int)1: {
HXLINE( 306)					info =  ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("code",2d,b1,c4,41),HX_("NetStream.Play.Switch",dd,eb,a2,ae)));
            				}
            				break;
            				case (int)2: {
HXLINE( 308)					info =  ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("code",2d,b1,c4,41),HX_("NetStream.Play.TransitionComplete",d7,c2,49,44)));
            				}
            				break;
            				case (int)3: {
HXLINE( 297)					info =  ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("code",2d,b1,c4,41),HX_("NetStream.Play.Failed",a6,67,28,d1)));
            				}
            				break;
            				case (int)4: {
HXLINE( 295)					info =  ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("code",2d,b1,c4,41),HX_("NetStream.Play.StreamNotFound",b8,57,58,d4)));
            				}
            				break;
            				case (int)5: {
HXLINE( 299)					info =  ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("code",2d,b1,c4,41),HX_("NetStream.Play.Start",99,42,56,dc)));
            				}
            				break;
            				case (int)6: {
HXLINE( 301)					info =  ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("code",2d,b1,c4,41),HX_("NetStream.Play.Stop",ab,15,72,a7)));
            				}
            				break;
            			}
HXLINE( 310)			if (::hx::IsNotNull( info )) {
HXLINE( 312)				 ::nme::events::NetStatusEvent event =  ::nme::events::NetStatusEvent_obj::__alloc( HX_CTX ,HX_("netStatus",6f,4f,ec,46),false,false,info);
HXLINE( 313)				this->nmeNetStream->dispatchEvent(event);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(StageVideo_obj,_native_play_status,(void))

void StageVideo_obj::_native_on_seek(){
            	HX_GC_STACKFRAME(&_hx_pos_95e76489c5876d23_320__native_on_seek)
HXDLIN( 320)		if (::hx::IsNotNull( this->nmeNetStream )) {
HXLINE( 322)			 ::Dynamic info = null();
HXLINE( 323)			switch((int)(this->seekCode)){
            				case (int)0: {
HXLINE( 326)					info =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("seekPoint",b8,cb,3d,dd),this->seekFrom)
            						->setFixed(1,HX_("code",2d,b1,c4,41),HX_("NetStream.Seek.Notify",ae,dd,77,86)));
            				}
            				break;
            				case (int)1: {
HXLINE( 328)					info =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("details",c2,dc,56,ab),this->seekFrom)
            						->setFixed(1,HX_("code",2d,b1,c4,41),HX_("NetStream.Seek.InvalidTime",9f,79,5f,12)));
            				}
            				break;
            				case (int)2: {
HXLINE( 330)					info =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("seekPoint",b8,cb,3d,dd),this->seekFrom)
            						->setFixed(1,HX_("code",2d,b1,c4,41),HX_("NetStream.Seek.Failed",a2,c8,bd,3c)));
            				}
            				break;
            			}
HXLINE( 333)			if (::hx::IsNotNull( info )) {
HXLINE( 335)				 ::nme::events::NetStatusEvent event =  ::nme::events::NetStatusEvent_obj::__alloc( HX_CTX ,HX_("netStatus",6f,4f,ec,46),false,false,info);
HXLINE( 336)				this->nmeNetStream->dispatchEvent(event);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(StageVideo_obj,_native_on_seek,(void))

void StageVideo_obj::_native_on_seek_data(int inCode,Float inWhen){
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_342__native_on_seek_data)
HXLINE( 343)		this->seekCode = inCode;
HXLINE( 344)		this->seekFrom = inWhen;
HXLINE( 345)		this->_native_on_seek();
            	}


HX_DEFINE_DYNAMIC_FUNC2(StageVideo_obj,_native_on_seek_data,(void))

::String StageVideo_obj::playComplete;

::String StageVideo_obj::playSwitch;

::String StageVideo_obj::playTransitionComplete;

::String StageVideo_obj::playStart;

::String StageVideo_obj::playStop;

::String StageVideo_obj::playStreamNotFound;

::String StageVideo_obj::playFailed;

::String StageVideo_obj::seekFailed;

::String StageVideo_obj::seekNotify;

::String StageVideo_obj::seekInvalidTime;

::String StageVideo_obj::failed;

int StageVideo_obj::PAUSE;

int StageVideo_obj::RESUME;

int StageVideo_obj::TOGGLE;

int StageVideo_obj::PAUSE_LEN;

int StageVideo_obj::ALL_LEN;

int StageVideo_obj::PLAY_STATUS_COMPLETE;

int StageVideo_obj::PLAY_STATUS_SWITCH;

int StageVideo_obj::PLAY_STATUS_TRANSITION;

int StageVideo_obj::PLAY_STATUS_ERROR;

int StageVideo_obj::PLAY_STATUS_NOT_STARTED;

int StageVideo_obj::PLAY_STATUS_STARTED;

int StageVideo_obj::PLAY_STATUS_STOPPED;

int StageVideo_obj::SEEK_FINISHED_OK;

int StageVideo_obj::SEEK_FINISHED_EARLY;

int StageVideo_obj::SEEK_FINISHED_ERROR;

 ::Dynamic StageVideo_obj::nme_sv_create;

 ::Dynamic StageVideo_obj::nme_sv_destroy;

 ::Dynamic StageVideo_obj::nme_sv_action;

 ::Dynamic StageVideo_obj::nme_sv_play;

 ::Dynamic StageVideo_obj::nme_sv_seek;

 ::Dynamic StageVideo_obj::nme_sv_get_time;

 ::Dynamic StageVideo_obj::nme_sv_get_buffered_percent;

 ::Dynamic StageVideo_obj::nme_sv_viewport;

 ::Dynamic StageVideo_obj::nme_sv_pan;

 ::Dynamic StageVideo_obj::nme_sv_zoom;

 ::Dynamic StageVideo_obj::nme_sv_set_sound_transform;


::hx::ObjectPtr< StageVideo_obj > StageVideo_obj::__new( ::nme::display::Stage inStage) {
	::hx::ObjectPtr< StageVideo_obj > __this = new StageVideo_obj();
	__this->__construct(inStage);
	return __this;
}

::hx::ObjectPtr< StageVideo_obj > StageVideo_obj::__alloc(::hx::Ctx *_hx_ctx, ::nme::display::Stage inStage) {
	StageVideo_obj *__this = (StageVideo_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StageVideo_obj), true, "nme.media.StageVideo"));
	*(void **)__this = StageVideo_obj::_hx_vtable;
	__this->__construct(inStage);
	return __this;
}

StageVideo_obj::StageVideo_obj()
{
}

void StageVideo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StageVideo);
	HX_MARK_MEMBER_NAME(colorSpaces,"colorSpaces");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_MEMBER_NAME(videoHeight,"videoHeight");
	HX_MARK_MEMBER_NAME(videoWidth,"videoWidth");
	HX_MARK_MEMBER_NAME(duration,"duration");
	HX_MARK_MEMBER_NAME(seekFrom,"seekFrom");
	HX_MARK_MEMBER_NAME(seekCode,"seekCode");
	HX_MARK_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_MARK_MEMBER_NAME(nmePan,"nmePan");
	HX_MARK_MEMBER_NAME(nmeZoom,"nmeZoom");
	HX_MARK_MEMBER_NAME(nmeViewport,"nmeViewport");
	HX_MARK_MEMBER_NAME(nmeNetStream,"nmeNetStream");
	HX_MARK_MEMBER_NAME(nmeStage,"nmeStage");
	 ::nme::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StageVideo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(colorSpaces,"colorSpaces");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	HX_VISIT_MEMBER_NAME(videoHeight,"videoHeight");
	HX_VISIT_MEMBER_NAME(videoWidth,"videoWidth");
	HX_VISIT_MEMBER_NAME(duration,"duration");
	HX_VISIT_MEMBER_NAME(seekFrom,"seekFrom");
	HX_VISIT_MEMBER_NAME(seekCode,"seekCode");
	HX_VISIT_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_VISIT_MEMBER_NAME(nmePan,"nmePan");
	HX_VISIT_MEMBER_NAME(nmeZoom,"nmeZoom");
	HX_VISIT_MEMBER_NAME(nmeViewport,"nmeViewport");
	HX_VISIT_MEMBER_NAME(nmeNetStream,"nmeNetStream");
	HX_VISIT_MEMBER_NAME(nmeStage,"nmeStage");
	 ::nme::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val StageVideo_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pan") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_pan() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_zoom() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { return ::hx::Val( depth ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"nmePan") ) { return ::hx::Val( nmePan ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nmeZoom") ) { return ::hx::Val( nmeZoom ); }
		if (HX_FIELD_EQ(inName,"get_pan") ) { return ::hx::Val( get_pan_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pan") ) { return ::hx::Val( set_pan_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeSeek") ) { return ::hx::Val( nmeSeek_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmePlay") ) { return ::hx::Val( nmePlay_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { return ::hx::Val( duration ); }
		if (HX_FIELD_EQ(inName,"viewPort") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_viewPort() ); }
		if (HX_FIELD_EQ(inName,"seekFrom") ) { return ::hx::Val( seekFrom ); }
		if (HX_FIELD_EQ(inName,"seekCode") ) { return ::hx::Val( seekCode ); }
		if (HX_FIELD_EQ(inName,"nmeStage") ) { return ::hx::Val( nmeStage ); }
		if (HX_FIELD_EQ(inName,"get_zoom") ) { return ::hx::Val( get_zoom_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_zoom") ) { return ::hx::Val( set_zoom_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmePause") ) { return ::hx::Val( nmePause_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { return ::hx::Val( nmeHandle ); }
		if (HX_FIELD_EQ(inName,"nmeCreate") ) { return ::hx::Val( nmeCreate_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeResume") ) { return ::hx::Val( nmeResume_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"videoWidth") ) { return ::hx::Val( videoWidth ); }
		if (HX_FIELD_EQ(inName,"nmeDestroy") ) { return ::hx::Val( nmeDestroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeGetTime") ) { return ::hx::Val( nmeGetTime_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorSpaces") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_colorSpaces() : colorSpaces ); }
		if (HX_FIELD_EQ(inName,"videoHeight") ) { return ::hx::Val( videoHeight ); }
		if (HX_FIELD_EQ(inName,"nmeViewport") ) { return ::hx::Val( nmeViewport ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"nmeNetStream") ) { return ::hx::Val( nmeNetStream ); }
		if (HX_FIELD_EQ(inName,"get_viewPort") ) { return ::hx::Val( get_viewPort_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_viewPort") ) { return ::hx::Val( set_viewPort_dyn() ); }
		if (HX_FIELD_EQ(inName,"nmeSetVolume") ) { return ::hx::Val( nmeSetVolume_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"nmeTogglePause") ) { return ::hx::Val( nmeTogglePause_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_colorSpaces") ) { return ::hx::Val( get_colorSpaces_dyn() ); }
		if (HX_FIELD_EQ(inName,"attachNetStream") ) { return ::hx::Val( attachNetStream_dyn() ); }
		if (HX_FIELD_EQ(inName,"_native_on_seek") ) { return ::hx::Val( _native_on_seek_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nmeGetBytesTotal") ) { return ::hx::Val( nmeGetBytesTotal_dyn() ); }
		if (HX_FIELD_EQ(inName,"_native_set_data") ) { return ::hx::Val( _native_set_data_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nmeGetBytesLoaded") ) { return ::hx::Val( nmeGetBytesLoaded_dyn() ); }
		if (HX_FIELD_EQ(inName,"_native_meta_data") ) { return ::hx::Val( _native_meta_data_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"nmeGetDecodedFrames") ) { return ::hx::Val( nmeGetDecodedFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"_native_play_status") ) { return ::hx::Val( _native_play_status_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nmeSetSoundTransform") ) { return ::hx::Val( nmeSetSoundTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"_native_on_seek_data") ) { return ::hx::Val( _native_on_seek_data_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool StageVideo_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"nme_sv_pan") ) { outValue = ( nme_sv_pan ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nme_sv_play") ) { outValue = ( nme_sv_play ); return true; }
		if (HX_FIELD_EQ(inName,"nme_sv_seek") ) { outValue = ( nme_sv_seek ); return true; }
		if (HX_FIELD_EQ(inName,"nme_sv_zoom") ) { outValue = ( nme_sv_zoom ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"nme_sv_create") ) { outValue = ( nme_sv_create ); return true; }
		if (HX_FIELD_EQ(inName,"nme_sv_action") ) { outValue = ( nme_sv_action ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"nme_sv_destroy") ) { outValue = ( nme_sv_destroy ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nme_sv_get_time") ) { outValue = ( nme_sv_get_time ); return true; }
		if (HX_FIELD_EQ(inName,"nme_sv_viewport") ) { outValue = ( nme_sv_viewport ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nme_sv_set_sound_transform") ) { outValue = ( nme_sv_set_sound_transform ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_sv_get_buffered_percent") ) { outValue = ( nme_sv_get_buffered_percent ); return true; }
	}
	return false;
}

::hx::Val StageVideo_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"pan") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_pan(inValue.Cast<  ::nme::geom::Point >()) ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"zoom") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_zoom(inValue.Cast<  ::nme::geom::Point >()) ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"nmePan") ) { nmePan=inValue.Cast<  ::nme::geom::Point >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"nmeZoom") ) { nmeZoom=inValue.Cast<  ::nme::geom::Point >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"duration") ) { duration=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"viewPort") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_viewPort(inValue.Cast<  ::nme::geom::Rectangle >()) ); }
		if (HX_FIELD_EQ(inName,"seekFrom") ) { seekFrom=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"seekCode") ) { seekCode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeStage") ) { nmeStage=inValue.Cast<  ::nme::display::Stage >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { nmeHandle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"videoWidth") ) { videoWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"colorSpaces") ) { colorSpaces=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"videoHeight") ) { videoHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeViewport") ) { nmeViewport=inValue.Cast<  ::nme::geom::Rectangle >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"nmeNetStream") ) { nmeNetStream=inValue.Cast<  ::nme::net::NetStream >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool StageVideo_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"nme_sv_pan") ) { nme_sv_pan=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nme_sv_play") ) { nme_sv_play=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_sv_seek") ) { nme_sv_seek=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_sv_zoom") ) { nme_sv_zoom=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"nme_sv_create") ) { nme_sv_create=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_sv_action") ) { nme_sv_action=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"nme_sv_destroy") ) { nme_sv_destroy=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nme_sv_get_time") ) { nme_sv_get_time=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_sv_viewport") ) { nme_sv_viewport=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nme_sv_set_sound_transform") ) { nme_sv_set_sound_transform=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_sv_get_buffered_percent") ) { nme_sv_get_buffered_percent=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void StageVideo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("colorSpaces",b0,32,7d,72));
	outFields->push(HX_("depth",03,f1,29,d7));
	outFields->push(HX_("videoHeight",c2,9e,f3,7a));
	outFields->push(HX_("videoWidth",8b,f3,30,a6));
	outFields->push(HX_("duration",54,0f,8e,14));
	outFields->push(HX_("viewPort",86,78,7e,87));
	outFields->push(HX_("pan",5d,51,55,00));
	outFields->push(HX_("zoom",13,a3,f8,50));
	outFields->push(HX_("seekFrom",02,73,28,46));
	outFields->push(HX_("seekCode",c5,7e,2a,44));
	outFields->push(HX_("nmeHandle",8e,87,bf,52));
	outFields->push(HX_("nmePan",b7,81,ee,00));
	outFields->push(HX_("nmeZoom",79,c1,69,d6));
	outFields->push(HX_("nmeViewport",cc,95,dc,ee));
	outFields->push(HX_("nmeNetStream",97,6c,46,f0));
	outFields->push(HX_("nmeStage",98,e5,94,c1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StageVideo_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(StageVideo_obj,colorSpaces),HX_("colorSpaces",b0,32,7d,72)},
	{::hx::fsInt,(int)offsetof(StageVideo_obj,depth),HX_("depth",03,f1,29,d7)},
	{::hx::fsInt,(int)offsetof(StageVideo_obj,videoHeight),HX_("videoHeight",c2,9e,f3,7a)},
	{::hx::fsInt,(int)offsetof(StageVideo_obj,videoWidth),HX_("videoWidth",8b,f3,30,a6)},
	{::hx::fsFloat,(int)offsetof(StageVideo_obj,duration),HX_("duration",54,0f,8e,14)},
	{::hx::fsFloat,(int)offsetof(StageVideo_obj,seekFrom),HX_("seekFrom",02,73,28,46)},
	{::hx::fsInt,(int)offsetof(StageVideo_obj,seekCode),HX_("seekCode",c5,7e,2a,44)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(StageVideo_obj,nmeHandle),HX_("nmeHandle",8e,87,bf,52)},
	{::hx::fsObject /*  ::nme::geom::Point */ ,(int)offsetof(StageVideo_obj,nmePan),HX_("nmePan",b7,81,ee,00)},
	{::hx::fsObject /*  ::nme::geom::Point */ ,(int)offsetof(StageVideo_obj,nmeZoom),HX_("nmeZoom",79,c1,69,d6)},
	{::hx::fsObject /*  ::nme::geom::Rectangle */ ,(int)offsetof(StageVideo_obj,nmeViewport),HX_("nmeViewport",cc,95,dc,ee)},
	{::hx::fsObject /*  ::nme::net::NetStream */ ,(int)offsetof(StageVideo_obj,nmeNetStream),HX_("nmeNetStream",97,6c,46,f0)},
	{::hx::fsObject /*  ::nme::display::Stage */ ,(int)offsetof(StageVideo_obj,nmeStage),HX_("nmeStage",98,e5,94,c1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo StageVideo_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &StageVideo_obj::playComplete,HX_("playComplete",cd,fe,60,0b)},
	{::hx::fsString,(void *) &StageVideo_obj::playSwitch,HX_("playSwitch",08,db,3c,6c)},
	{::hx::fsString,(void *) &StageVideo_obj::playTransitionComplete,HX_("playTransitionComplete",82,46,e3,ef)},
	{::hx::fsString,(void *) &StageVideo_obj::playStart,HX_("playStart",ce,a1,ef,a4)},
	{::hx::fsString,(void *) &StageVideo_obj::playStop,HX_("playStop",16,54,6f,3c)},
	{::hx::fsString,(void *) &StageVideo_obj::playStreamNotFound,HX_("playStreamNotFound",e3,e9,85,22)},
	{::hx::fsString,(void *) &StageVideo_obj::playFailed,HX_("playFailed",d1,56,c2,8e)},
	{::hx::fsString,(void *) &StageVideo_obj::seekFailed,HX_("seekFailed",55,29,a5,a9)},
	{::hx::fsString,(void *) &StageVideo_obj::seekNotify,HX_("seekNotify",61,3e,5f,f3)},
	{::hx::fsString,(void *) &StageVideo_obj::seekInvalidTime,HX_("seekInvalidTime",0c,b0,9d,54)},
	{::hx::fsString,(void *) &StageVideo_obj::failed,HX_("failed",bd,c5,fe,e7)},
	{::hx::fsInt,(void *) &StageVideo_obj::PAUSE,HX_("PAUSE",d6,0e,46,3b)},
	{::hx::fsInt,(void *) &StageVideo_obj::RESUME,HX_("RESUME",ad,15,07,bb)},
	{::hx::fsInt,(void *) &StageVideo_obj::TOGGLE,HX_("TOGGLE",94,6b,c6,41)},
	{::hx::fsInt,(void *) &StageVideo_obj::PAUSE_LEN,HX_("PAUSE_LEN",8c,5e,2a,69)},
	{::hx::fsInt,(void *) &StageVideo_obj::ALL_LEN,HX_("ALL_LEN",37,d6,8b,f3)},
	{::hx::fsInt,(void *) &StageVideo_obj::PLAY_STATUS_COMPLETE,HX_("PLAY_STATUS_COMPLETE",1b,5f,5e,56)},
	{::hx::fsInt,(void *) &StageVideo_obj::PLAY_STATUS_SWITCH,HX_("PLAY_STATUS_SWITCH",d6,07,bb,b9)},
	{::hx::fsInt,(void *) &StageVideo_obj::PLAY_STATUS_TRANSITION,HX_("PLAY_STATUS_TRANSITION",77,ac,63,c8)},
	{::hx::fsInt,(void *) &StageVideo_obj::PLAY_STATUS_ERROR,HX_("PLAY_STATUS_ERROR",06,44,71,7d)},
	{::hx::fsInt,(void *) &StageVideo_obj::PLAY_STATUS_NOT_STARTED,HX_("PLAY_STATUS_NOT_STARTED",73,51,48,38)},
	{::hx::fsInt,(void *) &StageVideo_obj::PLAY_STATUS_STARTED,HX_("PLAY_STATUS_STARTED",ff,90,5f,fa)},
	{::hx::fsInt,(void *) &StageVideo_obj::PLAY_STATUS_STOPPED,HX_("PLAY_STATUS_STOPPED",cb,39,a6,08)},
	{::hx::fsInt,(void *) &StageVideo_obj::SEEK_FINISHED_OK,HX_("SEEK_FINISHED_OK",82,ba,9b,de)},
	{::hx::fsInt,(void *) &StageVideo_obj::SEEK_FINISHED_EARLY,HX_("SEEK_FINISHED_EARLY",dd,ce,82,73)},
	{::hx::fsInt,(void *) &StageVideo_obj::SEEK_FINISHED_ERROR,HX_("SEEK_FINISHED_ERROR",02,72,bf,7e)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &StageVideo_obj::nme_sv_create,HX_("nme_sv_create",df,a4,d3,34)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &StageVideo_obj::nme_sv_destroy,HX_("nme_sv_destroy",b7,15,78,17)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &StageVideo_obj::nme_sv_action,HX_("nme_sv_action",99,79,0a,cf)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &StageVideo_obj::nme_sv_play,HX_("nme_sv_play",17,1d,ea,8b)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &StageVideo_obj::nme_sv_seek,HX_("nme_sv_seek",9b,74,e0,8d)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &StageVideo_obj::nme_sv_get_time,HX_("nme_sv_get_time",39,44,71,6d)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &StageVideo_obj::nme_sv_get_buffered_percent,HX_("nme_sv_get_buffered_percent",d1,5a,62,33)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &StageVideo_obj::nme_sv_viewport,HX_("nme_sv_viewport",09,09,5f,3d)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &StageVideo_obj::nme_sv_pan,HX_("nme_sv_pan",9a,d7,9a,9b)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &StageVideo_obj::nme_sv_zoom,HX_("nme_sv_zoom",36,92,88,92)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &StageVideo_obj::nme_sv_set_sound_transform,HX_("nme_sv_set_sound_transform",1c,41,74,40)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String StageVideo_obj_sMemberFields[] = {
	HX_("colorSpaces",b0,32,7d,72),
	HX_("depth",03,f1,29,d7),
	HX_("videoHeight",c2,9e,f3,7a),
	HX_("videoWidth",8b,f3,30,a6),
	HX_("duration",54,0f,8e,14),
	HX_("seekFrom",02,73,28,46),
	HX_("seekCode",c5,7e,2a,44),
	HX_("nmeHandle",8e,87,bf,52),
	HX_("nmePan",b7,81,ee,00),
	HX_("nmeZoom",79,c1,69,d6),
	HX_("nmeViewport",cc,95,dc,ee),
	HX_("nmeNetStream",97,6c,46,f0),
	HX_("nmeStage",98,e5,94,c1),
	HX_("get_colorSpaces",47,ea,5e,33),
	HX_("attachNetStream",38,40,d7,16),
	HX_("get_pan",f4,19,ca,26),
	HX_("set_pan",00,ab,cb,19),
	HX_("get_zoom",9c,5e,b3,d0),
	HX_("set_zoom",10,b8,10,7f),
	HX_("get_viewPort",8f,2c,98,3c),
	HX_("set_viewPort",03,50,91,51),
	HX_("nmeCreate",e2,6a,d1,16),
	HX_("nmeDestroy",54,92,87,f3),
	HX_("nmeGetTime",1d,e1,80,ee),
	HX_("nmeSeek",de,a3,c1,d1),
	HX_("nmePlay",5a,4c,cb,cf),
	HX_("nmePause",d0,51,e1,fa),
	HX_("nmeTogglePause",1c,a9,46,13),
	HX_("nmeResume",93,6d,46,a3),
	HX_("nmeSetVolume",f6,8e,23,5d),
	HX_("nmeGetBytesTotal",69,98,73,be),
	HX_("nmeGetDecodedFrames",ac,14,2e,ab),
	HX_("nmeGetBytesLoaded",c0,13,4a,a7),
	HX_("nmeSetSoundTransform",b9,cf,83,c1),
	HX_("_native_meta_data",9b,b3,1d,ee),
	HX_("_native_set_data",90,70,5f,41),
	HX_("_native_play_status",94,b3,91,54),
	HX_("_native_on_seek",8f,2a,7d,1b),
	HX_("_native_on_seek_data",1a,a1,07,3f),
	::String(null()) };

static void StageVideo_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StageVideo_obj::playComplete,"playComplete");
	HX_MARK_MEMBER_NAME(StageVideo_obj::playSwitch,"playSwitch");
	HX_MARK_MEMBER_NAME(StageVideo_obj::playTransitionComplete,"playTransitionComplete");
	HX_MARK_MEMBER_NAME(StageVideo_obj::playStart,"playStart");
	HX_MARK_MEMBER_NAME(StageVideo_obj::playStop,"playStop");
	HX_MARK_MEMBER_NAME(StageVideo_obj::playStreamNotFound,"playStreamNotFound");
	HX_MARK_MEMBER_NAME(StageVideo_obj::playFailed,"playFailed");
	HX_MARK_MEMBER_NAME(StageVideo_obj::seekFailed,"seekFailed");
	HX_MARK_MEMBER_NAME(StageVideo_obj::seekNotify,"seekNotify");
	HX_MARK_MEMBER_NAME(StageVideo_obj::seekInvalidTime,"seekInvalidTime");
	HX_MARK_MEMBER_NAME(StageVideo_obj::failed,"failed");
	HX_MARK_MEMBER_NAME(StageVideo_obj::PAUSE,"PAUSE");
	HX_MARK_MEMBER_NAME(StageVideo_obj::RESUME,"RESUME");
	HX_MARK_MEMBER_NAME(StageVideo_obj::TOGGLE,"TOGGLE");
	HX_MARK_MEMBER_NAME(StageVideo_obj::PAUSE_LEN,"PAUSE_LEN");
	HX_MARK_MEMBER_NAME(StageVideo_obj::ALL_LEN,"ALL_LEN");
	HX_MARK_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_COMPLETE,"PLAY_STATUS_COMPLETE");
	HX_MARK_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_SWITCH,"PLAY_STATUS_SWITCH");
	HX_MARK_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_TRANSITION,"PLAY_STATUS_TRANSITION");
	HX_MARK_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_ERROR,"PLAY_STATUS_ERROR");
	HX_MARK_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_NOT_STARTED,"PLAY_STATUS_NOT_STARTED");
	HX_MARK_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_STARTED,"PLAY_STATUS_STARTED");
	HX_MARK_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_STOPPED,"PLAY_STATUS_STOPPED");
	HX_MARK_MEMBER_NAME(StageVideo_obj::SEEK_FINISHED_OK,"SEEK_FINISHED_OK");
	HX_MARK_MEMBER_NAME(StageVideo_obj::SEEK_FINISHED_EARLY,"SEEK_FINISHED_EARLY");
	HX_MARK_MEMBER_NAME(StageVideo_obj::SEEK_FINISHED_ERROR,"SEEK_FINISHED_ERROR");
	HX_MARK_MEMBER_NAME(StageVideo_obj::nme_sv_create,"nme_sv_create");
	HX_MARK_MEMBER_NAME(StageVideo_obj::nme_sv_destroy,"nme_sv_destroy");
	HX_MARK_MEMBER_NAME(StageVideo_obj::nme_sv_action,"nme_sv_action");
	HX_MARK_MEMBER_NAME(StageVideo_obj::nme_sv_play,"nme_sv_play");
	HX_MARK_MEMBER_NAME(StageVideo_obj::nme_sv_seek,"nme_sv_seek");
	HX_MARK_MEMBER_NAME(StageVideo_obj::nme_sv_get_time,"nme_sv_get_time");
	HX_MARK_MEMBER_NAME(StageVideo_obj::nme_sv_get_buffered_percent,"nme_sv_get_buffered_percent");
	HX_MARK_MEMBER_NAME(StageVideo_obj::nme_sv_viewport,"nme_sv_viewport");
	HX_MARK_MEMBER_NAME(StageVideo_obj::nme_sv_pan,"nme_sv_pan");
	HX_MARK_MEMBER_NAME(StageVideo_obj::nme_sv_zoom,"nme_sv_zoom");
	HX_MARK_MEMBER_NAME(StageVideo_obj::nme_sv_set_sound_transform,"nme_sv_set_sound_transform");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StageVideo_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StageVideo_obj::playComplete,"playComplete");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::playSwitch,"playSwitch");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::playTransitionComplete,"playTransitionComplete");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::playStart,"playStart");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::playStop,"playStop");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::playStreamNotFound,"playStreamNotFound");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::playFailed,"playFailed");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::seekFailed,"seekFailed");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::seekNotify,"seekNotify");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::seekInvalidTime,"seekInvalidTime");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::failed,"failed");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::PAUSE,"PAUSE");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::RESUME,"RESUME");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::TOGGLE,"TOGGLE");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::PAUSE_LEN,"PAUSE_LEN");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::ALL_LEN,"ALL_LEN");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_COMPLETE,"PLAY_STATUS_COMPLETE");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_SWITCH,"PLAY_STATUS_SWITCH");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_TRANSITION,"PLAY_STATUS_TRANSITION");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_ERROR,"PLAY_STATUS_ERROR");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_NOT_STARTED,"PLAY_STATUS_NOT_STARTED");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_STARTED,"PLAY_STATUS_STARTED");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::PLAY_STATUS_STOPPED,"PLAY_STATUS_STOPPED");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::SEEK_FINISHED_OK,"SEEK_FINISHED_OK");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::SEEK_FINISHED_EARLY,"SEEK_FINISHED_EARLY");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::SEEK_FINISHED_ERROR,"SEEK_FINISHED_ERROR");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::nme_sv_create,"nme_sv_create");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::nme_sv_destroy,"nme_sv_destroy");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::nme_sv_action,"nme_sv_action");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::nme_sv_play,"nme_sv_play");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::nme_sv_seek,"nme_sv_seek");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::nme_sv_get_time,"nme_sv_get_time");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::nme_sv_get_buffered_percent,"nme_sv_get_buffered_percent");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::nme_sv_viewport,"nme_sv_viewport");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::nme_sv_pan,"nme_sv_pan");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::nme_sv_zoom,"nme_sv_zoom");
	HX_VISIT_MEMBER_NAME(StageVideo_obj::nme_sv_set_sound_transform,"nme_sv_set_sound_transform");
};

#endif

::hx::Class StageVideo_obj::__mClass;

static ::String StageVideo_obj_sStaticFields[] = {
	HX_("playComplete",cd,fe,60,0b),
	HX_("playSwitch",08,db,3c,6c),
	HX_("playTransitionComplete",82,46,e3,ef),
	HX_("playStart",ce,a1,ef,a4),
	HX_("playStop",16,54,6f,3c),
	HX_("playStreamNotFound",e3,e9,85,22),
	HX_("playFailed",d1,56,c2,8e),
	HX_("seekFailed",55,29,a5,a9),
	HX_("seekNotify",61,3e,5f,f3),
	HX_("seekInvalidTime",0c,b0,9d,54),
	HX_("failed",bd,c5,fe,e7),
	HX_("PAUSE",d6,0e,46,3b),
	HX_("RESUME",ad,15,07,bb),
	HX_("TOGGLE",94,6b,c6,41),
	HX_("PAUSE_LEN",8c,5e,2a,69),
	HX_("ALL_LEN",37,d6,8b,f3),
	HX_("PLAY_STATUS_COMPLETE",1b,5f,5e,56),
	HX_("PLAY_STATUS_SWITCH",d6,07,bb,b9),
	HX_("PLAY_STATUS_TRANSITION",77,ac,63,c8),
	HX_("PLAY_STATUS_ERROR",06,44,71,7d),
	HX_("PLAY_STATUS_NOT_STARTED",73,51,48,38),
	HX_("PLAY_STATUS_STARTED",ff,90,5f,fa),
	HX_("PLAY_STATUS_STOPPED",cb,39,a6,08),
	HX_("SEEK_FINISHED_OK",82,ba,9b,de),
	HX_("SEEK_FINISHED_EARLY",dd,ce,82,73),
	HX_("SEEK_FINISHED_ERROR",02,72,bf,7e),
	HX_("nme_sv_create",df,a4,d3,34),
	HX_("nme_sv_destroy",b7,15,78,17),
	HX_("nme_sv_action",99,79,0a,cf),
	HX_("nme_sv_play",17,1d,ea,8b),
	HX_("nme_sv_seek",9b,74,e0,8d),
	HX_("nme_sv_get_time",39,44,71,6d),
	HX_("nme_sv_get_buffered_percent",d1,5a,62,33),
	HX_("nme_sv_viewport",09,09,5f,3d),
	HX_("nme_sv_pan",9a,d7,9a,9b),
	HX_("nme_sv_zoom",36,92,88,92),
	HX_("nme_sv_set_sound_transform",1c,41,74,40),
	::String(null())
};

void StageVideo_obj::__register()
{
	StageVideo_obj _hx_dummy;
	StageVideo_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.media.StageVideo",6f,26,fa,bf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StageVideo_obj::__GetStatic;
	__mClass->mSetStaticField = &StageVideo_obj::__SetStatic;
	__mClass->mMarkFunc = StageVideo_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(StageVideo_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StageVideo_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StageVideo_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StageVideo_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StageVideo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StageVideo_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void StageVideo_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_27_boot)
HXDLIN(  27)		playComplete = HX_("NetStream.Play.Complete",e2,ae,0c,40);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_28_boot)
HXDLIN(  28)		playSwitch = HX_("NetStream.Play.Switch",dd,eb,a2,ae);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_29_boot)
HXDLIN(  29)		playTransitionComplete = HX_("NetStream.Play.TransitionComplete",d7,c2,49,44);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_30_boot)
HXDLIN(  30)		playStart = HX_("NetStream.Play.Start",99,42,56,dc);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_31_boot)
HXDLIN(  31)		playStop = HX_("NetStream.Play.Stop",ab,15,72,a7);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_34_boot)
HXDLIN(  34)		playStreamNotFound = HX_("NetStream.Play.StreamNotFound",b8,57,58,d4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_35_boot)
HXDLIN(  35)		playFailed = HX_("NetStream.Play.Failed",a6,67,28,d1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_37_boot)
HXDLIN(  37)		seekFailed = HX_("NetStream.Seek.Failed",a2,c8,bd,3c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_38_boot)
HXDLIN(  38)		seekNotify = HX_("NetStream.Seek.Notify",ae,dd,77,86);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_39_boot)
HXDLIN(  39)		seekInvalidTime = HX_("NetStream.Seek.InvalidTime",9f,79,5f,12);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_41_boot)
HXDLIN(  41)		failed = HX_("NetStream.Failed",8e,b1,71,34);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_43_boot)
HXDLIN(  43)		PAUSE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_44_boot)
HXDLIN(  44)		RESUME = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_45_boot)
HXDLIN(  45)		TOGGLE = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_47_boot)
HXDLIN(  47)		PAUSE_LEN = -3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_48_boot)
HXDLIN(  48)		ALL_LEN = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_50_boot)
HXDLIN(  50)		PLAY_STATUS_COMPLETE = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_51_boot)
HXDLIN(  51)		PLAY_STATUS_SWITCH = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_52_boot)
HXDLIN(  52)		PLAY_STATUS_TRANSITION = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_53_boot)
HXDLIN(  53)		PLAY_STATUS_ERROR = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_54_boot)
HXDLIN(  54)		PLAY_STATUS_NOT_STARTED = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_55_boot)
HXDLIN(  55)		PLAY_STATUS_STARTED = 5;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_56_boot)
HXDLIN(  56)		PLAY_STATUS_STOPPED = 6;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_58_boot)
HXDLIN(  58)		SEEK_FINISHED_OK = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_59_boot)
HXDLIN(  59)		SEEK_FINISHED_EARLY = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_60_boot)
HXDLIN(  60)		SEEK_FINISHED_ERROR = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_350_boot)
HXDLIN( 350)		nme_sv_create = ::nme::Loader_obj::load(HX_("nme_sv_create",df,a4,d3,34),2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_351_boot)
HXDLIN( 351)		nme_sv_destroy = ::nme::Loader_obj::load(HX_("nme_sv_destroy",b7,15,78,17),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_352_boot)
HXDLIN( 352)		nme_sv_action = ::nme::Loader_obj::load(HX_("nme_sv_action",99,79,0a,cf),2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_353_boot)
HXDLIN( 353)		nme_sv_play = ::nme::Loader_obj::load(HX_("nme_sv_play",17,1d,ea,8b),4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_354_boot)
HXDLIN( 354)		nme_sv_seek = ::nme::Loader_obj::load(HX_("nme_sv_seek",9b,74,e0,8d),2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_355_boot)
HXDLIN( 355)		nme_sv_get_time = ::nme::Loader_obj::load(HX_("nme_sv_get_time",39,44,71,6d),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_356_boot)
HXDLIN( 356)		nme_sv_get_buffered_percent = ::nme::Loader_obj::load(HX_("nme_sv_get_buffered_percent",d1,5a,62,33),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_357_boot)
HXDLIN( 357)		nme_sv_viewport = ::nme::Loader_obj::load(HX_("nme_sv_viewport",09,09,5f,3d),5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_358_boot)
HXDLIN( 358)		nme_sv_pan = ::nme::Loader_obj::load(HX_("nme_sv_pan",9a,d7,9a,9b),3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_359_boot)
HXDLIN( 359)		nme_sv_zoom = ::nme::Loader_obj::load(HX_("nme_sv_zoom",36,92,88,92),3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_95e76489c5876d23_360_boot)
HXDLIN( 360)		nme_sv_set_sound_transform = ::nme::Loader_obj::load(HX_("nme_sv_set_sound_transform",1c,41,74,40),3);
            	}
}

} // end namespace nme
} // end namespace media
