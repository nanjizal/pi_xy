// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_app_Window
#define INCLUDED_nme_app_Window

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_140af2720004096a
#define INCLUDED_140af2720004096a
#include "nme/Event.h"
#endif
HX_DECLARE_CLASS2(nme,app,IAppEventHandler)
HX_DECLARE_CLASS2(nme,app,IPollClient)
HX_DECLARE_CLASS2(nme,app,MouseState)
HX_DECLARE_CLASS2(nme,app,Window)
HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,InteractiveObject)
HX_DECLARE_CLASS2(nme,display,Stage)
HX_DECLARE_CLASS2(nme,display,StageAlign)
HX_DECLARE_CLASS2(nme,display,StageDisplayState)
HX_DECLARE_CLASS2(nme,display,StageQuality)
HX_DECLARE_CLASS2(nme,display,StageScaleMode)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)

namespace nme{
namespace app{


class HXCPP_CLASS_ATTRIBUTES Window_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Window_obj OBJ_;
		Window_obj();

	public:
		enum { _hx_ClassId = 0x7d1446cf };

		void __construct( ::Dynamic inFrameHandle,int inWidth,int inHeight);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.app.Window")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.app.Window"); }
		static ::hx::ObjectPtr< Window_obj > __new( ::Dynamic inFrameHandle,int inWidth,int inHeight);
		static ::hx::ObjectPtr< Window_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic inFrameHandle,int inWidth,int inHeight);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Window_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Window",10,08,21,87); }

		static void __boot();
		static bool supportsSecondary;
		static bool get_supportsSecondary();
		static ::Dynamic get_supportsSecondary_dyn();

		static ::cpp::Function< void  ( ::hx::Object *,int,int) > nme_stage_resize_window;
		static Dynamic nme_stage_resize_window_dyn() { return nme_stage_resize_window;}
		static ::cpp::Function< bool  ( ::hx::Object *) > nme_stage_is_opengl;
		static Dynamic nme_stage_is_opengl_dyn() { return nme_stage_is_opengl;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_stage_get_stage_width;
		static Dynamic nme_stage_get_stage_width_dyn() { return nme_stage_get_stage_width;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_stage_get_stage_height;
		static Dynamic nme_stage_get_stage_height_dyn() { return nme_stage_get_stage_height;}
		static ::cpp::Function< Float  ( ::hx::Object *) > nme_stage_get_dpi_scale;
		static Dynamic nme_stage_get_dpi_scale_dyn() { return nme_stage_get_dpi_scale;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_stage_get_scale_mode;
		static Dynamic nme_stage_get_scale_mode_dyn() { return nme_stage_get_scale_mode;}
		static ::cpp::Function< void  ( ::hx::Object *,int) > nme_stage_set_scale_mode;
		static Dynamic nme_stage_set_scale_mode_dyn() { return nme_stage_set_scale_mode;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_stage_get_align;
		static Dynamic nme_stage_get_align_dyn() { return nme_stage_get_align;}
		static ::cpp::Function< void  ( ::hx::Object *,int) > nme_stage_set_align;
		static Dynamic nme_stage_set_align_dyn() { return nme_stage_set_align;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_stage_get_quality;
		static Dynamic nme_stage_get_quality_dyn() { return nme_stage_get_quality;}
		static ::cpp::Function< void  ( ::hx::Object *,int) > nme_stage_set_quality;
		static Dynamic nme_stage_set_quality_dyn() { return nme_stage_set_quality;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_stage_get_display_state;
		static Dynamic nme_stage_get_display_state_dyn() { return nme_stage_get_display_state;}
		static ::cpp::Function< void  ( ::hx::Object *,int) > nme_stage_set_display_state;
		static Dynamic nme_stage_set_display_state_dyn() { return nme_stage_set_display_state;}
		static ::cpp::Function< void  ( ::hx::Object *,int,int) > nme_stage_set_window_position;
		static Dynamic nme_stage_set_window_position_dyn() { return nme_stage_set_window_position;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_stage_get_window_x;
		static Dynamic nme_stage_get_window_x_dyn() { return nme_stage_get_window_x;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_stage_get_window_y;
		static Dynamic nme_stage_get_window_y_dyn() { return nme_stage_get_window_y;}
		static ::cpp::Function< void  ( ::hx::Object *,Float) > nme_stage_set_next_wake;
		static Dynamic nme_stage_set_next_wake_dyn() { return nme_stage_set_next_wake;}
		static ::cpp::Function< void  ( ::hx::Object *,bool) > nme_stage_begin_render;
		static Dynamic nme_stage_begin_render_dyn() { return nme_stage_begin_render;}
		static ::cpp::Function< void  ( ::hx::Object *) > nme_stage_end_render;
		static Dynamic nme_stage_end_render_dyn() { return nme_stage_end_render;}
		static ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > nme_get_frame_stage;
		static Dynamic nme_get_frame_stage_dyn() { return nme_get_frame_stage;}
		static  ::Dynamic nme_display_object_set_bg;
		static Dynamic nme_display_object_set_bg_dyn() { return nme_display_object_set_bg;}
		static ::cpp::Function< ::String  ( ::hx::Object *) > nme_stage_get_title;
		static Dynamic nme_stage_get_title_dyn() { return nme_stage_get_title;}
		static ::cpp::Function< void  ( ::hx::Object *,::String) > nme_stage_set_title;
		static Dynamic nme_stage_set_title_dyn() { return nme_stage_set_title;}
		static ::cpp::Function< void  ( ::hx::Object *) > nme_window_close;
		static Dynamic nme_window_close_dyn() { return nme_window_close;}
		static ::cpp::Function< bool  () > nme_window_supports_secondary;
		static Dynamic nme_window_supports_secondary_dyn() { return nme_window_supports_secondary;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > nme_stage_get_global_mouse_state;
		static Dynamic nme_stage_get_global_mouse_state_dyn() { return nme_stage_get_global_mouse_state;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int) > nme_set_stage_handler;
		static Dynamic nme_set_stage_handler_dyn() { return nme_set_stage_handler;}
		bool active;
		Float dpiScale;
		bool isOpenGL;
		int x;
		int y;
		int height;
		int width;
		bool autoClear;
		 ::Dynamic renderRequest;
		Dynamic renderRequest_dyn() { return renderRequest;}
		 ::Dynamic nextWakeHandler;
		Dynamic nextWakeHandler_dyn() { return nextWakeHandler;}
		 ::Dynamic beginRenderImmediate;
		Dynamic beginRenderImmediate_dyn() { return beginRenderImmediate;}
		 ::Dynamic endRenderImmediate;
		Dynamic endRenderImmediate_dyn() { return endRenderImmediate;}
		::Dynamic appEventHandler;
		 ::nme::display::Stage stage;
		 ::Dynamic onText;
		Dynamic onText_dyn() { return onText;}
		 ::Dynamic nmeHandle;
		 ::Dynamic nmeStageHandle;
		bool enterFramePending;
		 ::nme::app::MouseState get_globalMouseState();
		::Dynamic get_globalMouseState_dyn();

		bool close();
		::Dynamic close_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		bool shouldRenderNow();
		::Dynamic shouldRenderNow_dyn();

		void setBackground( ::Dynamic inBackground);
		::Dynamic setBackground_dyn();

		void onNewFrame();
		::Dynamic onNewFrame_dyn();

		void onInvalidFrame();
		::Dynamic onInvalidFrame_dyn();

		void nmeProcessWindowEvent( ::Dynamic inEvent);
		::Dynamic nmeProcessWindowEvent_dyn();

		void beginRender();
		::Dynamic beginRender_dyn();

		void endRender();
		::Dynamic endRender_dyn();

		 ::nme::display::StageAlign get_align();
		::Dynamic get_align_dyn();

		 ::nme::display::StageAlign set_align( ::nme::display::StageAlign inMode);
		::Dynamic set_align_dyn();

		 ::nme::display::StageDisplayState get_displayState();
		::Dynamic get_displayState_dyn();

		 ::nme::display::StageDisplayState set_displayState( ::nme::display::StageDisplayState inState);
		::Dynamic set_displayState_dyn();

		Float get_dpiScale();
		::Dynamic get_dpiScale_dyn();

		bool get_isOpenGL();
		::Dynamic get_isOpenGL_dyn();

		 ::nme::display::StageQuality get_quality();
		::Dynamic get_quality_dyn();

		 ::nme::display::StageQuality set_quality( ::nme::display::StageQuality inQuality);
		::Dynamic set_quality_dyn();

		 ::nme::display::StageScaleMode get_scaleMode();
		::Dynamic get_scaleMode_dyn();

		 ::nme::display::StageScaleMode set_scaleMode( ::nme::display::StageScaleMode inMode);
		::Dynamic set_scaleMode_dyn();

		int get_x();
		::Dynamic get_x_dyn();

		int get_y();
		::Dynamic get_y_dyn();

		int get_height();
		::Dynamic get_height_dyn();

		int get_width();
		::Dynamic get_width_dyn();

		void resize(int width,int height);
		::Dynamic resize_dyn();

		void setPosition(int x,int y);
		::Dynamic setPosition_dyn();

		::String get_title();
		::Dynamic get_title_dyn();

		::String set_title(::String inTitle);
		::Dynamic set_title_dyn();

};

} // end namespace nme
} // end namespace app

#endif /* INCLUDED_nme_app_Window */ 
