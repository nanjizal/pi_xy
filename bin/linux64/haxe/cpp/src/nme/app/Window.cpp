// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_140af2720004096a
#define INCLUDED_140af2720004096a
#include "nme/Event.h"
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_nme_Loader
#include <nme/Loader.h>
#endif
#ifndef INCLUDED_nme_NativeResource
#include <nme/NativeResource.h>
#endif
#ifndef INCLUDED_nme_app_Application
#include <nme/app/Application.h>
#endif
#ifndef INCLUDED_nme_app_IAppEventHandler
#include <nme/app/IAppEventHandler.h>
#endif
#ifndef INCLUDED_nme_app_IPollClient
#include <nme/app/IPollClient.h>
#endif
#ifndef INCLUDED_nme_app_MouseState
#include <nme/app/MouseState.h>
#endif
#ifndef INCLUDED_nme_app_Window
#include <nme/app/Window.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObjectContainer
#include <nme/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_display_Stage
#include <nme/display/Stage.h>
#endif
#ifndef INCLUDED_nme_display_StageAlign
#include <nme/display/StageAlign.h>
#endif
#ifndef INCLUDED_nme_display_StageDisplayState
#include <nme/display/StageDisplayState.h>
#endif
#ifndef INCLUDED_nme_display_StageQuality
#include <nme/display/StageQuality.h>
#endif
#ifndef INCLUDED_nme_display_StageScaleMode
#include <nme/display/StageScaleMode.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_989ffeb970fd979d_51_new,"nme.app.Window","new",0xecfca7d7,"nme.app.Window.new","nme/app/Window.hx",51,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_75_get_globalMouseState,"nme.app.Window","get_globalMouseState",0xea1a10a1,"nme.app.Window.get_globalMouseState","nme/app/Window.hx",75,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_82_close,"nme.app.Window","close",0x5289faef,"nme.app.Window.close","nme/app/Window.hx",82,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_104_toString,"nme.app.Window","toString",0xb9d289d5,"nme.app.Window.toString","nme/app/Window.hx",104,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_107_shouldRenderNow,"nme.app.Window","shouldRenderNow",0x970e26a4,"nme.app.Window.shouldRenderNow","nme/app/Window.hx",107,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_115_setBackground,"nme.app.Window","setBackground",0xc9b54467,"nme.app.Window.setBackground","nme/app/Window.hx",115,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_124_onNewFrame,"nme.app.Window","onNewFrame",0x7427a555,"nme.app.Window.onNewFrame","nme/app/Window.hx",124,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_145_onInvalidFrame,"nme.app.Window","onInvalidFrame",0xaf2ccb5e,"nme.app.Window.onInvalidFrame","nme/app/Window.hx",145,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_163_nmeProcessWindowEvent,"nme.app.Window","nmeProcessWindowEvent",0x7d0961f8,"nme.app.Window.nmeProcessWindowEvent","nme/app/Window.hx",163,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_346_beginRender,"nme.app.Window","beginRender",0x415ef4d6,"nme.app.Window.beginRender","nme/app/Window.hx",346,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_350_endRender,"nme.app.Window","endRender",0xfaea0448,"nme.app.Window.endRender","nme/app/Window.hx",350,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_355_get_align,"nme.app.Window","get_align",0x1b18fdd3,"nme.app.Window.get_align","nme/app/Window.hx",355,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_361_set_align,"nme.app.Window","set_align",0xfe69e9df,"nme.app.Window.set_align","nme/app/Window.hx",361,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_367_get_displayState,"nme.app.Window","get_displayState",0xeef1c321,"nme.app.Window.get_displayState","nme/app/Window.hx",367,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_373_set_displayState,"nme.app.Window","set_displayState",0x4533b095,"nme.app.Window.set_displayState","nme/app/Window.hx",373,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_380_get_dpiScale,"nme.app.Window","get_dpiScale",0x71495f9f,"nme.app.Window.get_dpiScale","nme/app/Window.hx",380,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_387_get_isOpenGL,"nme.app.Window","get_isOpenGL",0x5ab999ab,"nme.app.Window.get_isOpenGL","nme/app/Window.hx",387,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_391_get_quality,"nme.app.Window","get_quality",0x6c560b4d,"nme.app.Window.get_quality","nme/app/Window.hx",391,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_397_set_quality,"nme.app.Window","set_quality",0x76c31259,"nme.app.Window.set_quality","nme/app/Window.hx",397,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_403_get_scaleMode,"nme.app.Window","get_scaleMode",0xef57211b,"nme.app.Window.get_scaleMode","nme/app/Window.hx",403,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_409_set_scaleMode,"nme.app.Window","set_scaleMode",0x345d0327,"nme.app.Window.set_scaleMode","nme/app/Window.hx",409,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_416_get_x,"nme.app.Window","get_x",0x9b878886,"nme.app.Window.get_x","nme/app/Window.hx",416,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_421_get_y,"nme.app.Window","get_y",0x9b878887,"nme.app.Window.get_y","nme/app/Window.hx",421,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_428_get_height,"nme.app.Window","get_height",0x5f768d19,"nme.app.Window.get_height","nme/app/Window.hx",428,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_433_get_width,"nme.app.Window","get_width",0xc3ea5d14,"nme.app.Window.get_width","nme/app/Window.hx",433,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_439_resize,"nme.app.Window","resize",0xe05b46dd,"nme.app.Window.resize","nme/app/Window.hx",439,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_445_setPosition,"nme.app.Window","setPosition",0x9d6b10e2,"nme.app.Window.setPosition","nme/app/Window.hx",445,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_450_get_title,"nme.app.Window","get_title",0x09c2bca6,"nme.app.Window.get_title","nme/app/Window.hx",450,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_454_set_title,"nme.app.Window","set_title",0xed13a8b2,"nme.app.Window.set_title","nme/app/Window.hx",454,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_71_get_supportsSecondary,"nme.app.Window","get_supportsSecondary",0x90e0615e,"nme.app.Window.get_supportsSecondary","nme/app/Window.hx",71,0xb1f32ab7)
HX_LOCAL_STACK_FRAME(_hx_pos_154b8b6c40f42d67_9_boot,"nme.app.Window","boot",0x682f34db,"nme.app.Window.boot","nme/PrimeLoader.hx",9,0xcf416155)
HX_LOCAL_STACK_FRAME(_hx_pos_989ffeb970fd979d_486_boot,"nme.app.Window","boot",0x682f34db,"nme.app.Window.boot","nme/app/Window.hx",486,0xb1f32ab7)
namespace nme{
namespace app{

void Window_obj::__construct( ::Dynamic inFrameHandle,int inWidth,int inHeight){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_51_new)
HXLINE(  52)		this->appEventHandler = null();
HXLINE(  53)		this->active = true;
HXLINE(  54)		this->autoClear = true;
HXLINE(  55)		this->nmeHandle = inFrameHandle;
HXLINE(  61)		this->renderRequest = null();
HXLINE(  64)		this->nmeStageHandle = ( ( ::Dynamic)(::nme::app::Window_obj::nme_get_frame_stage(::hx::DynamicPtr(inFrameHandle))) );
HXLINE(  66)		::nme::app::Window_obj::nme_set_stage_handler(::hx::DynamicPtr(this->nmeStageHandle),::hx::DynamicPtr(this->nmeProcessWindowEvent_dyn()),inWidth,inHeight);
            	}

Dynamic Window_obj::__CreateEmpty() { return new Window_obj; }

void *Window_obj::_hx_vtable = 0;

Dynamic Window_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Window_obj > _hx_result = new Window_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Window_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7d1446cf;
}

 ::nme::app::MouseState Window_obj::get_globalMouseState(){
            	HX_GC_STACKFRAME(&_hx_pos_989ffeb970fd979d_75_get_globalMouseState)
HXLINE(  76)		 ::nme::app::MouseState m =  ::nme::app::MouseState_obj::__alloc( HX_CTX );
HXLINE(  77)		::nme::app::Window_obj::nme_stage_get_global_mouse_state(::hx::DynamicPtr(this->nmeStageHandle),::hx::DynamicPtr(m));
HXLINE(  78)		return m;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_globalMouseState,return )

bool Window_obj::close(){
            	HX_GC_STACKFRAME(&_hx_pos_989ffeb970fd979d_82_close)
HXLINE(  83)		if (::hx::IsNotNull( this->stage )) {
HXLINE(  85)			 ::nme::events::Event evt_before =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("beforeClose",b9,86,c0,cd),false,true);
HXLINE(  86)			evt_before->set_target(this->stage);
HXLINE(  87)			this->stage->dispatchEvent(evt_before);
HXLINE(  88)			if (evt_before->nmeGetIsCancelled()) {
HXLINE(  89)				return false;
            			}
HXLINE(  91)			 ::nme::events::Event evt_after =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("close",b8,17,63,48),false,false);
HXLINE(  92)			evt_after->set_target(this->stage);
HXLINE(  93)			this->stage->dispatchEvent(evt_after);
HXLINE(  95)			this->stage->dispose();
HXLINE(  96)			this->stage = null();
            		}
HXLINE(  98)		::nme::app::Window_obj::nme_window_close(::hx::DynamicPtr(this->nmeHandle));
HXLINE(  99)		{
HXLINE(  99)			 ::Dynamic handle = this->nmeHandle;
HXDLIN(  99)			if (::hx::IsNotNull( handle )) {
HXLINE(  99)				::nme::NativeResource_obj::nme_native_resource_dispose(::hx::DynamicPtr(handle));
            			}
            		}
HXLINE( 101)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,close,return )

::String Window_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_104_toString)
HXDLIN( 104)		return ((HX_("Window(",18,06,c6,b5) + this->get_title()) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,toString,return )

bool Window_obj::shouldRenderNow(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_107_shouldRenderNow)
HXLINE( 108)		if (::hx::IsNull( this->renderRequest )) {
HXLINE( 109)			return true;
            		}
HXLINE( 110)		return ( (bool)(this->renderRequest()) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,shouldRenderNow,return )

void Window_obj::setBackground( ::Dynamic inBackground){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_115_setBackground)
HXDLIN( 115)		if (::hx::IsNull( inBackground )) {
HXLINE( 116)			::nme::app::Window_obj::nme_display_object_set_bg(this->nmeStageHandle,0);
            		}
            		else {
HXLINE( 118)			::nme::app::Window_obj::nme_display_object_set_bg(this->nmeStageHandle,(( (int)(inBackground) ) | -16777216));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,setBackground,(void))

void Window_obj::onNewFrame(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_124_onNewFrame)
HXDLIN( 124)		if (this->shouldRenderNow()) {
HXLINE( 126)			if (::hx::IsNotNull( this->beginRenderImmediate )) {
HXLINE( 127)				this->beginRenderImmediate();
            			}
HXLINE( 128)			this->beginRender();
HXLINE( 129)			::nme::app::IAppEventHandler_obj::onRender(this->appEventHandler,true);
HXLINE( 130)			this->endRender();
HXLINE( 131)			if (::hx::IsNotNull( this->endRenderImmediate )) {
HXLINE( 132)				this->endRenderImmediate();
            			}
            		}
            		else {
HXLINE( 138)			this->enterFramePending = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,onNewFrame,(void))

void Window_obj::onInvalidFrame(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_145_onInvalidFrame)
HXDLIN( 145)		if (this->shouldRenderNow()) {
HXLINE( 147)			if (::hx::IsNotNull( this->beginRenderImmediate )) {
HXLINE( 148)				this->beginRenderImmediate();
            			}
HXLINE( 149)			this->beginRender();
HXLINE( 150)			::nme::app::IAppEventHandler_obj::onRender(this->appEventHandler,false);
HXLINE( 151)			this->endRender();
HXLINE( 152)			if (::hx::IsNotNull( this->endRenderImmediate )) {
HXLINE( 153)				this->endRenderImmediate();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,onInvalidFrame,(void))

void Window_obj::nmeProcessWindowEvent( ::Dynamic inEvent){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_163_nmeProcessWindowEvent)
HXLINE( 164)		if (::hx::IsNull( this->appEventHandler )) {
HXLINE( 165)			return;
            		}
HXLINE( 172)		::cpp::Pointer<  nme::Event > event = inEvent;
HXLINE( 173)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 179)			switch((int)(event->get_ref().type)){
            				case (int)1: {
HXLINE( 192)					::nme::app::IAppEventHandler_obj::onKey(this->appEventHandler,event,HX_("keyDown",a1,69,47,9c));
            				}
            				break;
            				case (int)2: {
HXLINE( 187)					if (::hx::IsNotNull( this->onText )) {
HXLINE( 188)						this->onText(event);
            					}
HXLINE( 189)					::nme::app::IAppEventHandler_obj::onText(this->appEventHandler,event,HX_("textInput",1d,54,0b,57));
            				}
            				break;
            				case (int)3: {
HXLINE( 195)					::nme::app::IAppEventHandler_obj::onKey(this->appEventHandler,event,HX_("keyUp",da,b9,fe,de));
            				}
            				break;
            				case (int)4: {
HXLINE( 198)					::nme::app::IAppEventHandler_obj::onMouse(this->appEventHandler,event,HX_("mouseMove",d6,9b,b5,f4),true);
            				}
            				break;
            				case (int)5: {
HXLINE( 201)					::nme::app::IAppEventHandler_obj::onMouse(this->appEventHandler,event,HX_("mouseDown",27,b1,c2,ee),true);
            				}
            				break;
            				case (int)6: {
HXLINE( 204)					::nme::app::IAppEventHandler_obj::onMouse(this->appEventHandler,event,HX_("click",48,7c,5e,48),true);
            				}
            				break;
            				case (int)7: {
HXLINE( 207)					::nme::app::IAppEventHandler_obj::onMouse(this->appEventHandler,event,HX_("mouseUp",e0,f3,72,c0),true);
            				}
            				break;
            				case (int)8: {
HXLINE( 210)					::Dynamic _hx_tmp = this->appEventHandler;
HXDLIN( 210)					int _hx_tmp1 = event->get_ref().x;
HXDLIN( 210)					::nme::app::IAppEventHandler_obj::onResize(_hx_tmp,_hx_tmp1,event->get_ref().y);
HXLINE( 211)					if (this->shouldRenderNow()) {
HXLINE( 213)						if (::hx::IsNotNull( this->beginRenderImmediate )) {
HXLINE( 214)							this->beginRenderImmediate();
            						}
HXLINE( 215)						this->beginRender();
HXLINE( 216)						::nme::app::IAppEventHandler_obj::onRender(this->appEventHandler,false);
HXLINE( 217)						this->endRender();
HXLINE( 218)						if (::hx::IsNotNull( this->endRenderImmediate )) {
HXLINE( 219)							this->endRenderImmediate();
            						}
            					}
            				}
            				break;
            				case (int)9: {
HXLINE( 182)					::nme::app::Application_obj::pollClients(event->get_ref().pollTime);
            				}
            				break;
            				case (int)10: {
HXLINE( 223)					if (::hx::IsNotNull( ::nme::app::Application_obj::onQuit )) {
HXLINE( 224)						::nme::app::Application_obj::onQuit();
            					}
            				}
            				break;
            				case (int)11: {
HXLINE( 227)					::nme::app::IAppEventHandler_obj::onDisplayObjectFocus(this->appEventHandler,event);
            				}
            				break;
            				case (int)12: {
            				}
            				break;
            				case (int)14: {
HXLINE( 233)					this->beginRender();
HXLINE( 234)					bool wasTimed = this->enterFramePending;
HXLINE( 235)					this->enterFramePending = false;
HXLINE( 236)					::nme::app::IAppEventHandler_obj::onRender(this->appEventHandler,wasTimed);
HXLINE( 237)					this->endRender();
            				}
            				break;
            				case (int)15: {
HXLINE( 240)					::nme::app::IAppEventHandler_obj::onTouch(this->appEventHandler,event,HX_("touchBegin",ea,cd,e6,a9));
HXLINE( 241)					if (((event->get_ref().flags & 32768) > 0)) {
HXLINE( 242)						::nme::app::IAppEventHandler_obj::onMouse(this->appEventHandler,event,HX_("mouseDown",27,b1,c2,ee),false);
            					}
            				}
            				break;
            				case (int)16: {
HXLINE( 245)					::nme::app::IAppEventHandler_obj::onTouch(this->appEventHandler,event,HX_("touchMove",70,72,cd,0d));
            				}
            				break;
            				case (int)17: {
HXLINE( 248)					::nme::app::IAppEventHandler_obj::onTouch(this->appEventHandler,event,HX_("touchEnd",5c,c5,09,00));
HXLINE( 249)					if (((event->get_ref().flags & 32768) > 0)) {
HXLINE( 250)						::nme::app::IAppEventHandler_obj::onMouse(this->appEventHandler,event,HX_("mouseUp",e0,f3,72,c0),false);
            					}
            				}
            				break;
            				case (int)18: {
HXLINE( 253)					::nme::app::IAppEventHandler_obj::onTouch(this->appEventHandler,event,HX_("touchTap",e4,1b,15,00));
            				}
            				break;
            				case (int)19: {
HXLINE( 256)					::nme::app::IAppEventHandler_obj::onChange(this->appEventHandler,event);
            				}
            				break;
            				case (int)20: {
HXLINE( 259)					::nme::app::IAppEventHandler_obj::onActive(this->appEventHandler,true);
            				}
            				break;
            				case (int)21: {
HXLINE( 262)					::nme::app::IAppEventHandler_obj::onActive(this->appEventHandler,false);
            				}
            				break;
            				case (int)22: {
HXLINE( 265)					::nme::app::IAppEventHandler_obj::onInputFocus(this->appEventHandler,true);
            				}
            				break;
            				case (int)23: {
HXLINE( 268)					::nme::app::IAppEventHandler_obj::onInputFocus(this->appEventHandler,false);
            				}
            				break;
            				case (int)24: {
HXLINE( 271)					::nme::app::IAppEventHandler_obj::onJoystick(this->appEventHandler,event,HX_("axisMove",52,90,f4,8f));
            				}
            				break;
            				case (int)25: {
HXLINE( 274)					::nme::app::IAppEventHandler_obj::onJoystick(this->appEventHandler,event,HX_("ballMove",b0,5c,fd,37));
            				}
            				break;
            				case (int)26: {
HXLINE( 277)					::nme::app::IAppEventHandler_obj::onJoystick(this->appEventHandler,event,HX_("hatMove",0c,98,0b,ab));
            				}
            				break;
            				case (int)27: {
HXLINE( 280)					::nme::app::IAppEventHandler_obj::onJoystick(this->appEventHandler,event,HX_("buttonDown",74,67,64,ac));
            				}
            				break;
            				case (int)28: {
HXLINE( 283)					::nme::app::IAppEventHandler_obj::onJoystick(this->appEventHandler,event,HX_("buttonUp",ed,8c,32,5c));
            				}
            				break;
            				case (int)29: {
HXLINE( 286)					::nme::app::IAppEventHandler_obj::onJoystick(this->appEventHandler,event,HX_("deviceAdded",4a,08,84,0b));
            				}
            				break;
            				case (int)30: {
HXLINE( 289)					::nme::app::IAppEventHandler_obj::onJoystick(this->appEventHandler,event,HX_("deviceRemoved",aa,c9,5b,59));
            				}
            				break;
            				case (int)31: {
HXLINE( 292)					::nme::app::IAppEventHandler_obj::onSysMessage(this->appEventHandler,event);
            				}
            				break;
            				case (int)32: {
HXLINE( 295)					::nme::app::IAppEventHandler_obj::onContextLost(this->appEventHandler);
            				}
            				break;
            				case (int)34: {
HXLINE( 301)					::nme::app::IAppEventHandler_obj::onScroll(this->appEventHandler,event);
            				}
            				break;
            				case (int)35: {
HXLINE( 298)					::nme::app::IAppEventHandler_obj::onAppLink(this->appEventHandler,event);
            				}
            				break;
            				case (int)36: {
HXLINE( 304)					::nme::app::IAppEventHandler_obj::onDpiChanged(this->appEventHandler,event);
            				}
            				break;
            				case (int)37: case (int)38: case (int)39: {
            				}
            				break;
            				case (int)40: {
HXLINE( 309)					::nme::app::IAppEventHandler_obj::onWindowClose(this->appEventHandler);
            				}
            				break;
            				case (int)41: {
HXLINE( 318)					::Dynamic _hx_tmp2 = this->appEventHandler;
HXDLIN( 318)					int _hx_tmp3 = event->get_ref().x;
HXDLIN( 318)					::nme::app::IAppEventHandler_obj::onWindowMoved(_hx_tmp2,_hx_tmp3,event->get_ref().y);
            				}
            				break;
            				case (int)42: {
HXLINE( 312)					::nme::app::IAppEventHandler_obj::onWindowEnter(this->appEventHandler);
            				}
            				break;
            				case (int)43: {
HXLINE( 315)					::nme::app::IAppEventHandler_obj::onWindowLeave(this->appEventHandler);
            				}
            				break;
            			}
HXLINE( 322)			Float nextWake = ::nme::app::Application_obj::getNextWake(event->get_ref().pollTime);
HXLINE( 323)			if (::hx::IsNotNull( this->nextWakeHandler )) {
HXLINE( 324)				this->nextWakeHandler(nextWake);
            			}
HXLINE( 327)			event->get_ref().pollTime = nextWake;
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 332)				{
HXLINE( 332)					null();
            				}
HXDLIN( 332)				 ::Dynamic e = _g;
HXLINE( 333)				{
HXLINE( 334)					::Array< ::Dynamic> stack = ::haxe::_CallStack::CallStack_Impl__obj::exceptionStack(null());
HXLINE( 335)					event->get_ref().pollTime = ( (Float)(0) );
HXLINE( 336)					::nme::app::IAppEventHandler_obj::onUnhandledException(this->appEventHandler,e,stack);
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,nmeProcessWindowEvent,(void))

void Window_obj::beginRender(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_346_beginRender)
HXDLIN( 346)		::nme::app::Window_obj::nme_stage_begin_render(::hx::DynamicPtr(this->nmeStageHandle),this->autoClear);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,beginRender,(void))

void Window_obj::endRender(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_350_endRender)
HXDLIN( 350)		::nme::app::Window_obj::nme_stage_end_render(::hx::DynamicPtr(this->nmeStageHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,endRender,(void))

 ::nme::display::StageAlign Window_obj::get_align(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_355_get_align)
HXLINE( 356)		int i = ::nme::app::Window_obj::nme_stage_get_align(::hx::DynamicPtr(this->nmeStageHandle));
HXLINE( 357)		return ::Type_obj::createEnumIndex(::hx::ClassOf< ::nme::display::StageAlign >(),i,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_align,return )

 ::nme::display::StageAlign Window_obj::set_align( ::nme::display::StageAlign inMode){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_361_set_align)
HXLINE( 362)		::cpp::Function< void  ( ::hx::Object *,int) > _hx_tmp = ::nme::app::Window_obj::nme_stage_set_align;
HXDLIN( 362)		 ::Dynamic _hx_tmp1 = this->nmeStageHandle;
HXDLIN( 362)		_hx_tmp(::hx::DynamicPtr(_hx_tmp1),_hx_getEnumValueIndex(inMode));
HXLINE( 363)		return inMode;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,set_align,return )

 ::nme::display::StageDisplayState Window_obj::get_displayState(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_367_get_displayState)
HXLINE( 368)		int i = ::nme::app::Window_obj::nme_stage_get_display_state(::hx::DynamicPtr(this->nmeStageHandle));
HXLINE( 369)		return ::Type_obj::createEnumIndex(::hx::ClassOf< ::nme::display::StageDisplayState >(),i,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_displayState,return )

 ::nme::display::StageDisplayState Window_obj::set_displayState( ::nme::display::StageDisplayState inState){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_373_set_displayState)
HXLINE( 374)		::cpp::Function< void  ( ::hx::Object *,int) > _hx_tmp = ::nme::app::Window_obj::nme_stage_set_display_state;
HXDLIN( 374)		 ::Dynamic _hx_tmp1 = this->nmeStageHandle;
HXDLIN( 374)		_hx_tmp(::hx::DynamicPtr(_hx_tmp1),_hx_getEnumValueIndex(inState));
HXLINE( 375)		return inState;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,set_displayState,return )

Float Window_obj::get_dpiScale(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_380_get_dpiScale)
HXDLIN( 380)		return ::nme::app::Window_obj::nme_stage_get_dpi_scale(::hx::DynamicPtr(this->nmeStageHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_dpiScale,return )

bool Window_obj::get_isOpenGL(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_387_get_isOpenGL)
HXDLIN( 387)		return ::nme::app::Window_obj::nme_stage_is_opengl(::hx::DynamicPtr(this->nmeStageHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_isOpenGL,return )

 ::nme::display::StageQuality Window_obj::get_quality(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_391_get_quality)
HXLINE( 392)		int i = ::nme::app::Window_obj::nme_stage_get_quality(::hx::DynamicPtr(this->nmeStageHandle));
HXLINE( 393)		return ::Type_obj::createEnumIndex(::hx::ClassOf< ::nme::display::StageQuality >(),i,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_quality,return )

 ::nme::display::StageQuality Window_obj::set_quality( ::nme::display::StageQuality inQuality){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_397_set_quality)
HXLINE( 398)		::cpp::Function< void  ( ::hx::Object *,int) > _hx_tmp = ::nme::app::Window_obj::nme_stage_set_quality;
HXDLIN( 398)		 ::Dynamic _hx_tmp1 = this->nmeStageHandle;
HXDLIN( 398)		_hx_tmp(::hx::DynamicPtr(_hx_tmp1),_hx_getEnumValueIndex(inQuality));
HXLINE( 399)		return inQuality;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,set_quality,return )

 ::nme::display::StageScaleMode Window_obj::get_scaleMode(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_403_get_scaleMode)
HXLINE( 404)		int i = ::nme::app::Window_obj::nme_stage_get_scale_mode(::hx::DynamicPtr(this->nmeStageHandle));
HXLINE( 405)		return ::Type_obj::createEnumIndex(::hx::ClassOf< ::nme::display::StageScaleMode >(),i,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_scaleMode,return )

 ::nme::display::StageScaleMode Window_obj::set_scaleMode( ::nme::display::StageScaleMode inMode){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_409_set_scaleMode)
HXLINE( 410)		::cpp::Function< void  ( ::hx::Object *,int) > _hx_tmp = ::nme::app::Window_obj::nme_stage_set_scale_mode;
HXDLIN( 410)		 ::Dynamic _hx_tmp1 = this->nmeStageHandle;
HXDLIN( 410)		_hx_tmp(::hx::DynamicPtr(_hx_tmp1),_hx_getEnumValueIndex(inMode));
HXLINE( 411)		return inMode;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,set_scaleMode,return )

int Window_obj::get_x(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_416_get_x)
HXDLIN( 416)		return ::nme::app::Window_obj::nme_stage_get_window_x(::hx::DynamicPtr(this->nmeStageHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_x,return )

int Window_obj::get_y(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_421_get_y)
HXDLIN( 421)		return ::nme::app::Window_obj::nme_stage_get_window_y(::hx::DynamicPtr(this->nmeStageHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_y,return )

int Window_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_428_get_height)
HXDLIN( 428)		return ::nme::app::Window_obj::nme_stage_get_stage_height(::hx::DynamicPtr(this->nmeStageHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_height,return )

int Window_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_433_get_width)
HXDLIN( 433)		return ::nme::app::Window_obj::nme_stage_get_stage_width(::hx::DynamicPtr(this->nmeStageHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_width,return )

void Window_obj::resize(int width,int height){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_439_resize)
HXDLIN( 439)		::nme::app::Window_obj::nme_stage_resize_window(::hx::DynamicPtr(this->nmeStageHandle),width,height);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Window_obj,resize,(void))

void Window_obj::setPosition(int x,int y){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_445_setPosition)
HXDLIN( 445)		::nme::app::Window_obj::nme_stage_set_window_position(::hx::DynamicPtr(this->nmeStageHandle),x,y);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Window_obj,setPosition,(void))

::String Window_obj::get_title(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_450_get_title)
HXDLIN( 450)		return ::nme::app::Window_obj::nme_stage_get_title(::hx::DynamicPtr(this->nmeStageHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_title,return )

::String Window_obj::set_title(::String inTitle){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_454_set_title)
HXLINE( 455)		::nme::app::Window_obj::nme_stage_set_title(::hx::DynamicPtr(this->nmeStageHandle),inTitle);
HXLINE( 456)		return inTitle;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Window_obj,set_title,return )

bool Window_obj::supportsSecondary;

bool Window_obj::get_supportsSecondary(){
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_71_get_supportsSecondary)
HXDLIN(  71)		return ::nme::app::Window_obj::nme_window_supports_secondary();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Window_obj,get_supportsSecondary,return )

::cpp::Function< void  ( ::hx::Object *,int,int) > Window_obj::nme_stage_resize_window;

::cpp::Function< bool  ( ::hx::Object *) > Window_obj::nme_stage_is_opengl;

::cpp::Function< int  ( ::hx::Object *) > Window_obj::nme_stage_get_stage_width;

::cpp::Function< int  ( ::hx::Object *) > Window_obj::nme_stage_get_stage_height;

::cpp::Function< Float  ( ::hx::Object *) > Window_obj::nme_stage_get_dpi_scale;

::cpp::Function< int  ( ::hx::Object *) > Window_obj::nme_stage_get_scale_mode;

::cpp::Function< void  ( ::hx::Object *,int) > Window_obj::nme_stage_set_scale_mode;

::cpp::Function< int  ( ::hx::Object *) > Window_obj::nme_stage_get_align;

::cpp::Function< void  ( ::hx::Object *,int) > Window_obj::nme_stage_set_align;

::cpp::Function< int  ( ::hx::Object *) > Window_obj::nme_stage_get_quality;

::cpp::Function< void  ( ::hx::Object *,int) > Window_obj::nme_stage_set_quality;

::cpp::Function< int  ( ::hx::Object *) > Window_obj::nme_stage_get_display_state;

::cpp::Function< void  ( ::hx::Object *,int) > Window_obj::nme_stage_set_display_state;

::cpp::Function< void  ( ::hx::Object *,int,int) > Window_obj::nme_stage_set_window_position;

::cpp::Function< int  ( ::hx::Object *) > Window_obj::nme_stage_get_window_x;

::cpp::Function< int  ( ::hx::Object *) > Window_obj::nme_stage_get_window_y;

::cpp::Function< void  ( ::hx::Object *,Float) > Window_obj::nme_stage_set_next_wake;

::cpp::Function< void  ( ::hx::Object *,bool) > Window_obj::nme_stage_begin_render;

::cpp::Function< void  ( ::hx::Object *) > Window_obj::nme_stage_end_render;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > Window_obj::nme_get_frame_stage;

 ::Dynamic Window_obj::nme_display_object_set_bg;

::cpp::Function< ::String  ( ::hx::Object *) > Window_obj::nme_stage_get_title;

::cpp::Function< void  ( ::hx::Object *,::String) > Window_obj::nme_stage_set_title;

::cpp::Function< void  ( ::hx::Object *) > Window_obj::nme_window_close;

::cpp::Function< bool  () > Window_obj::nme_window_supports_secondary;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > Window_obj::nme_stage_get_global_mouse_state;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int) > Window_obj::nme_set_stage_handler;


::hx::ObjectPtr< Window_obj > Window_obj::__new( ::Dynamic inFrameHandle,int inWidth,int inHeight) {
	::hx::ObjectPtr< Window_obj > __this = new Window_obj();
	__this->__construct(inFrameHandle,inWidth,inHeight);
	return __this;
}

::hx::ObjectPtr< Window_obj > Window_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic inFrameHandle,int inWidth,int inHeight) {
	Window_obj *__this = (Window_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Window_obj), true, "nme.app.Window"));
	*(void **)__this = Window_obj::_hx_vtable;
	__this->__construct(inFrameHandle,inWidth,inHeight);
	return __this;
}

Window_obj::Window_obj()
{
}

void Window_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Window);
	HX_MARK_MEMBER_NAME(active,"active");
	HX_MARK_MEMBER_NAME(dpiScale,"dpiScale");
	HX_MARK_MEMBER_NAME(isOpenGL,"isOpenGL");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(autoClear,"autoClear");
	HX_MARK_MEMBER_NAME(renderRequest,"renderRequest");
	HX_MARK_MEMBER_NAME(nextWakeHandler,"nextWakeHandler");
	HX_MARK_MEMBER_NAME(beginRenderImmediate,"beginRenderImmediate");
	HX_MARK_MEMBER_NAME(endRenderImmediate,"endRenderImmediate");
	HX_MARK_MEMBER_NAME(appEventHandler,"appEventHandler");
	HX_MARK_MEMBER_NAME(stage,"stage");
	HX_MARK_MEMBER_NAME(onText,"onText");
	HX_MARK_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_MARK_MEMBER_NAME(nmeStageHandle,"nmeStageHandle");
	HX_MARK_MEMBER_NAME(enterFramePending,"enterFramePending");
	HX_MARK_END_CLASS();
}

void Window_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(active,"active");
	HX_VISIT_MEMBER_NAME(dpiScale,"dpiScale");
	HX_VISIT_MEMBER_NAME(isOpenGL,"isOpenGL");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(autoClear,"autoClear");
	HX_VISIT_MEMBER_NAME(renderRequest,"renderRequest");
	HX_VISIT_MEMBER_NAME(nextWakeHandler,"nextWakeHandler");
	HX_VISIT_MEMBER_NAME(beginRenderImmediate,"beginRenderImmediate");
	HX_VISIT_MEMBER_NAME(endRenderImmediate,"endRenderImmediate");
	HX_VISIT_MEMBER_NAME(appEventHandler,"appEventHandler");
	HX_VISIT_MEMBER_NAME(stage,"stage");
	HX_VISIT_MEMBER_NAME(onText,"onText");
	HX_VISIT_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_VISIT_MEMBER_NAME(nmeStageHandle,"nmeStageHandle");
	HX_VISIT_MEMBER_NAME(enterFramePending,"enterFramePending");
}

::hx::Val Window_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_x() : x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_y() : y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_align() ); }
		if (HX_FIELD_EQ(inName,"title") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_title() ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_width() : width ); }
		if (HX_FIELD_EQ(inName,"stage") ) { return ::hx::Val( stage ); }
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_x") ) { return ::hx::Val( get_x_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_y") ) { return ::hx::Val( get_y_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { return ::hx::Val( active ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_height() : height ); }
		if (HX_FIELD_EQ(inName,"onText") ) { return ::hx::Val( onText ); }
		if (HX_FIELD_EQ(inName,"resize") ) { return ::hx::Val( resize_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_quality() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dpiScale") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_dpiScale() : dpiScale ); }
		if (HX_FIELD_EQ(inName,"isOpenGL") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_isOpenGL() : isOpenGL ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scaleMode") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_scaleMode() ); }
		if (HX_FIELD_EQ(inName,"autoClear") ) { return ::hx::Val( autoClear ); }
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { return ::hx::Val( nmeHandle ); }
		if (HX_FIELD_EQ(inName,"endRender") ) { return ::hx::Val( endRender_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_align") ) { return ::hx::Val( get_align_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_align") ) { return ::hx::Val( set_align_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return ::hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_title") ) { return ::hx::Val( get_title_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_title") ) { return ::hx::Val( set_title_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"onNewFrame") ) { return ::hx::Val( onNewFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return ::hx::Val( get_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"beginRender") ) { return ::hx::Val( beginRender_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_quality") ) { return ::hx::Val( get_quality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_quality") ) { return ::hx::Val( set_quality_dyn() ); }
		if (HX_FIELD_EQ(inName,"setPosition") ) { return ::hx::Val( setPosition_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_displayState() ); }
		if (HX_FIELD_EQ(inName,"get_dpiScale") ) { return ::hx::Val( get_dpiScale_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isOpenGL") ) { return ::hx::Val( get_isOpenGL_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"renderRequest") ) { return ::hx::Val( renderRequest ); }
		if (HX_FIELD_EQ(inName,"setBackground") ) { return ::hx::Val( setBackground_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaleMode") ) { return ::hx::Val( get_scaleMode_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_scaleMode") ) { return ::hx::Val( set_scaleMode_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"nmeStageHandle") ) { return ::hx::Val( nmeStageHandle ); }
		if (HX_FIELD_EQ(inName,"onInvalidFrame") ) { return ::hx::Val( onInvalidFrame_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nextWakeHandler") ) { return ::hx::Val( nextWakeHandler ); }
		if (HX_FIELD_EQ(inName,"appEventHandler") ) { return ::hx::Val( appEventHandler ); }
		if (HX_FIELD_EQ(inName,"shouldRenderNow") ) { return ::hx::Val( shouldRenderNow_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"globalMouseState") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_globalMouseState() ); }
		if (HX_FIELD_EQ(inName,"get_displayState") ) { return ::hx::Val( get_displayState_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_displayState") ) { return ::hx::Val( set_displayState_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"enterFramePending") ) { return ::hx::Val( enterFramePending ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"endRenderImmediate") ) { return ::hx::Val( endRenderImmediate ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"beginRenderImmediate") ) { return ::hx::Val( beginRenderImmediate ); }
		if (HX_FIELD_EQ(inName,"get_globalMouseState") ) { return ::hx::Val( get_globalMouseState_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"nmeProcessWindowEvent") ) { return ::hx::Val( nmeProcessWindowEvent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Window_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"nme_window_close") ) { outValue = ( nme_window_close ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"supportsSecondary") ) { outValue = ( inCallProp != ::hx::paccNever ? get_supportsSecondary() : supportsSecondary ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"nme_stage_is_opengl") ) { outValue = ( nme_stage_is_opengl ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_align") ) { outValue = ( nme_stage_get_align ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_align") ) { outValue = ( nme_stage_set_align ); return true; }
		if (HX_FIELD_EQ(inName,"nme_get_frame_stage") ) { outValue = ( nme_get_frame_stage ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_title") ) { outValue = ( nme_stage_get_title ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_title") ) { outValue = ( nme_stage_set_title ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nme_stage_end_render") ) { outValue = ( nme_stage_end_render ); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_supportsSecondary") ) { outValue = get_supportsSecondary_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_quality") ) { outValue = ( nme_stage_get_quality ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_quality") ) { outValue = ( nme_stage_set_quality ); return true; }
		if (HX_FIELD_EQ(inName,"nme_set_stage_handler") ) { outValue = ( nme_set_stage_handler ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_stage_get_window_x") ) { outValue = ( nme_stage_get_window_x ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_window_y") ) { outValue = ( nme_stage_get_window_y ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_begin_render") ) { outValue = ( nme_stage_begin_render ); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"nme_stage_resize_window") ) { outValue = ( nme_stage_resize_window ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_dpi_scale") ) { outValue = ( nme_stage_get_dpi_scale ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_next_wake") ) { outValue = ( nme_stage_set_next_wake ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"nme_stage_get_scale_mode") ) { outValue = ( nme_stage_get_scale_mode ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_scale_mode") ) { outValue = ( nme_stage_set_scale_mode ); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"nme_stage_get_stage_width") ) { outValue = ( nme_stage_get_stage_width ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_bg") ) { outValue = ( nme_display_object_set_bg ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nme_stage_get_stage_height") ) { outValue = ( nme_stage_get_stage_height ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_stage_get_display_state") ) { outValue = ( nme_stage_get_display_state ); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_display_state") ) { outValue = ( nme_stage_set_display_state ); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"nme_stage_set_window_position") ) { outValue = ( nme_stage_set_window_position ); return true; }
		if (HX_FIELD_EQ(inName,"nme_window_supports_secondary") ) { outValue = ( nme_window_supports_secondary ); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"nme_stage_get_global_mouse_state") ) { outValue = ( nme_stage_get_global_mouse_state ); return true; }
	}
	return false;
}

::hx::Val Window_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"align") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_align(inValue.Cast<  ::nme::display::StageAlign >()) ); }
		if (HX_FIELD_EQ(inName,"title") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_title(inValue.Cast< ::String >()) ); }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stage") ) { stage=inValue.Cast<  ::nme::display::Stage >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onText") ) { onText=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"quality") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_quality(inValue.Cast<  ::nme::display::StageQuality >()) ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dpiScale") ) { dpiScale=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isOpenGL") ) { isOpenGL=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scaleMode") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_scaleMode(inValue.Cast<  ::nme::display::StageScaleMode >()) ); }
		if (HX_FIELD_EQ(inName,"autoClear") ) { autoClear=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { nmeHandle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"displayState") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_displayState(inValue.Cast<  ::nme::display::StageDisplayState >()) ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"renderRequest") ) { renderRequest=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"nmeStageHandle") ) { nmeStageHandle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nextWakeHandler") ) { nextWakeHandler=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"appEventHandler") ) { appEventHandler=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"enterFramePending") ) { enterFramePending=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"endRenderImmediate") ) { endRenderImmediate=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"beginRenderImmediate") ) { beginRenderImmediate=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Window_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 16:
		if (HX_FIELD_EQ(inName,"nme_window_close") ) { nme_window_close=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *) > >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"supportsSecondary") ) { supportsSecondary=ioValue.Cast< bool >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"nme_stage_is_opengl") ) { nme_stage_is_opengl=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_align") ) { nme_stage_get_align=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_align") ) { nme_stage_set_align=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_get_frame_stage") ) { nme_get_frame_stage=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_title") ) { nme_stage_get_title=ioValue.Cast< ::cpp::Function< ::String  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_title") ) { nme_stage_set_title=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,::String) > >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nme_stage_end_render") ) { nme_stage_end_render=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *) > >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"nme_stage_get_quality") ) { nme_stage_get_quality=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_quality") ) { nme_stage_set_quality=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_set_stage_handler") ) { nme_set_stage_handler=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int) > >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_stage_get_window_x") ) { nme_stage_get_window_x=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_window_y") ) { nme_stage_get_window_y=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_begin_render") ) { nme_stage_begin_render=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,bool) > >(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"nme_stage_resize_window") ) { nme_stage_resize_window=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_get_dpi_scale") ) { nme_stage_get_dpi_scale=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_next_wake") ) { nme_stage_set_next_wake=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,Float) > >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"nme_stage_get_scale_mode") ) { nme_stage_get_scale_mode=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_scale_mode") ) { nme_stage_set_scale_mode=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int) > >(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"nme_stage_get_stage_width") ) { nme_stage_get_stage_width=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_bg") ) { nme_display_object_set_bg=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nme_stage_get_stage_height") ) { nme_stage_get_stage_height=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_stage_get_display_state") ) { nme_stage_get_display_state=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_stage_set_display_state") ) { nme_stage_set_display_state=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int) > >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"nme_stage_set_window_position") ) { nme_stage_set_window_position=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int,int) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_window_supports_secondary") ) { nme_window_supports_secondary=ioValue.Cast< ::cpp::Function< bool  () > >(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"nme_stage_get_global_mouse_state") ) { nme_stage_get_global_mouse_state=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
	}
	return false;
}

void Window_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("active",c6,41,46,16));
	outFields->push(HX_("align",c5,56,91,21));
	outFields->push(HX_("displayState",6f,4c,64,90));
	outFields->push(HX_("dpiScale",ed,a9,8d,90));
	outFields->push(HX_("isOpenGL",f9,e3,fd,79));
	outFields->push(HX_("quality",bf,04,4c,44));
	outFields->push(HX_("scaleMode",0d,db,d3,2b));
	outFields->push(HX_("globalMouseState",ef,58,46,fb));
	outFields->push(HX_("title",98,15,3b,10));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("autoClear",9e,af,66,26));
	outFields->push(HX_("appEventHandler",11,dd,9f,c1));
	outFields->push(HX_("stage",be,6a,0b,84));
	outFields->push(HX_("nmeHandle",8e,87,bf,52));
	outFields->push(HX_("nmeStageHandle",60,1f,1f,79));
	outFields->push(HX_("enterFramePending",e2,54,8b,35));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Window_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Window_obj,active),HX_("active",c6,41,46,16)},
	{::hx::fsFloat,(int)offsetof(Window_obj,dpiScale),HX_("dpiScale",ed,a9,8d,90)},
	{::hx::fsBool,(int)offsetof(Window_obj,isOpenGL),HX_("isOpenGL",f9,e3,fd,79)},
	{::hx::fsInt,(int)offsetof(Window_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsInt,(int)offsetof(Window_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsInt,(int)offsetof(Window_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsInt,(int)offsetof(Window_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsBool,(int)offsetof(Window_obj,autoClear),HX_("autoClear",9e,af,66,26)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Window_obj,renderRequest),HX_("renderRequest",99,52,72,40)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Window_obj,nextWakeHandler),HX_("nextWakeHandler",d3,a9,3b,c6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Window_obj,beginRenderImmediate),HX_("beginRenderImmediate",92,61,bd,fc)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Window_obj,endRenderImmediate),HX_("endRenderImmediate",20,00,27,6e)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(Window_obj,appEventHandler),HX_("appEventHandler",11,dd,9f,c1)},
	{::hx::fsObject /*  ::nme::display::Stage */ ,(int)offsetof(Window_obj,stage),HX_("stage",be,6a,0b,84)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Window_obj,onText),HX_("onText",6c,d5,83,ef)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Window_obj,nmeHandle),HX_("nmeHandle",8e,87,bf,52)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Window_obj,nmeStageHandle),HX_("nmeStageHandle",60,1f,1f,79)},
	{::hx::fsBool,(int)offsetof(Window_obj,enterFramePending),HX_("enterFramePending",e2,54,8b,35)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Window_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &Window_obj::supportsSecondary,HX_("supportsSecondary",50,5d,73,86)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int,int) > */ ,(void *) &Window_obj::nme_stage_resize_window,HX_("nme_stage_resize_window",e1,12,4e,c1)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_is_opengl,HX_("nme_stage_is_opengl",2a,51,df,94)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_get_stage_width,HX_("nme_stage_get_stage_width",62,e0,82,a4)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_get_stage_height,HX_("nme_stage_get_stage_height",0b,ee,50,04)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_get_dpi_scale,HX_("nme_stage_get_dpi_scale",85,71,6a,d6)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_get_scale_mode,HX_("nme_stage_get_scale_mode",3b,81,2e,c9)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int) > */ ,(void *) &Window_obj::nme_stage_set_scale_mode,HX_("nme_stage_set_scale_mode",af,69,4e,e9)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_get_align,HX_("nme_stage_get_align",e2,38,61,33)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int) > */ ,(void *) &Window_obj::nme_stage_set_align,HX_("nme_stage_set_align",ee,24,b2,16)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_get_quality,HX_("nme_stage_get_quality",1c,68,6e,53)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int) > */ ,(void *) &Window_obj::nme_stage_set_quality,HX_("nme_stage_set_quality",28,6f,db,5d)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_get_display_state,HX_("nme_stage_get_display_state",31,cc,9b,09)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int) > */ ,(void *) &Window_obj::nme_stage_set_display_state,HX_("nme_stage_set_display_state",3d,a4,09,2d)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int,int) > */ ,(void *) &Window_obj::nme_stage_set_window_position,HX_("nme_stage_set_window_position",81,81,37,52)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_get_window_x,HX_("nme_stage_get_window_x",2c,51,c2,ac)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_get_window_y,HX_("nme_stage_get_window_y",2d,51,c2,ac)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,Float) > */ ,(void *) &Window_obj::nme_stage_set_next_wake,HX_("nme_stage_set_next_wake",d9,b8,28,42)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,bool) > */ ,(void *) &Window_obj::nme_stage_begin_render,HX_("nme_stage_begin_render",e6,f3,2a,67)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_end_render,HX_("nme_stage_end_render",f4,01,00,e0)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_get_frame_stage,HX_("nme_get_frame_stage",4a,47,c4,7f)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Window_obj::nme_display_object_set_bg,HX_("nme_display_object_set_bg",4c,19,ad,3b)},
	{::hx::fsObject /* ::cpp::Function< ::String  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_get_title,HX_("nme_stage_get_title",b5,f7,0a,22)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,::String) > */ ,(void *) &Window_obj::nme_stage_set_title,HX_("nme_stage_set_title",c1,e3,5b,05)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *) > */ ,(void *) &Window_obj::nme_window_close,HX_("nme_window_close",c2,ae,cb,8d)},
	{::hx::fsObject /* ::cpp::Function< bool  () > */ ,(void *) &Window_obj::nme_window_supports_secondary,HX_("nme_window_supports_secondary",6f,24,69,a5)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &Window_obj::nme_stage_get_global_mouse_state,HX_("nme_stage_get_global_mouse_state",de,b4,25,ad)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *,int,int) > */ ,(void *) &Window_obj::nme_set_stage_handler,HX_("nme_set_stage_handler",f3,0a,dc,f6)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Window_obj_sMemberFields[] = {
	HX_("active",c6,41,46,16),
	HX_("dpiScale",ed,a9,8d,90),
	HX_("isOpenGL",f9,e3,fd,79),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("height",e7,07,4c,02),
	HX_("width",06,b6,62,ca),
	HX_("autoClear",9e,af,66,26),
	HX_("renderRequest",99,52,72,40),
	HX_("nextWakeHandler",d3,a9,3b,c6),
	HX_("beginRenderImmediate",92,61,bd,fc),
	HX_("endRenderImmediate",20,00,27,6e),
	HX_("appEventHandler",11,dd,9f,c1),
	HX_("stage",be,6a,0b,84),
	HX_("onText",6c,d5,83,ef),
	HX_("nmeHandle",8e,87,bf,52),
	HX_("nmeStageHandle",60,1f,1f,79),
	HX_("enterFramePending",e2,54,8b,35),
	HX_("get_globalMouseState",f8,bd,b0,19),
	HX_("close",b8,17,63,48),
	HX_("toString",ac,d0,6e,38),
	HX_("shouldRenderNow",ad,78,84,38),
	HX_("setBackground",30,d2,95,c7),
	HX_("onNewFrame",ec,8f,84,07),
	HX_("onInvalidFrame",75,4d,c8,d5),
	HX_("nmeProcessWindowEvent",c1,60,4a,f1),
	HX_("beginRender",5f,4e,4f,9f),
	HX_("endRender",91,b9,0b,45),
	HX_("get_align",1c,b3,3a,65),
	HX_("set_align",28,9f,8b,48),
	HX_("get_displayState",f8,38,03,95),
	HX_("set_displayState",6c,26,45,eb),
	HX_("get_dpiScale",f6,5d,a7,45),
	HX_("get_isOpenGL",02,98,17,2f),
	HX_("get_quality",d6,64,46,ca),
	HX_("set_quality",e2,6b,b3,d4),
	HX_("get_scaleMode",e4,ae,37,ed),
	HX_("set_scaleMode",f0,90,3d,32),
	HX_("get_x",4f,a5,60,91),
	HX_("get_y",50,a5,60,91),
	HX_("get_height",b0,77,d3,f2),
	HX_("get_width",5d,12,0c,0e),
	HX_("resize",f4,59,7b,08),
	HX_("setPosition",6b,6a,5b,fb),
	HX_("get_title",ef,71,e4,53),
	HX_("set_title",fb,5d,35,37),
	::String(null()) };

static void Window_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Window_obj::supportsSecondary,"supportsSecondary");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_resize_window,"nme_stage_resize_window");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_is_opengl,"nme_stage_is_opengl");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_get_stage_width,"nme_stage_get_stage_width");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_get_stage_height,"nme_stage_get_stage_height");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_get_dpi_scale,"nme_stage_get_dpi_scale");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_get_scale_mode,"nme_stage_get_scale_mode");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_set_scale_mode,"nme_stage_set_scale_mode");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_get_align,"nme_stage_get_align");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_set_align,"nme_stage_set_align");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_get_quality,"nme_stage_get_quality");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_set_quality,"nme_stage_set_quality");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_get_display_state,"nme_stage_get_display_state");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_set_display_state,"nme_stage_set_display_state");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_set_window_position,"nme_stage_set_window_position");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_get_window_x,"nme_stage_get_window_x");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_get_window_y,"nme_stage_get_window_y");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_set_next_wake,"nme_stage_set_next_wake");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_begin_render,"nme_stage_begin_render");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_end_render,"nme_stage_end_render");
	HX_MARK_MEMBER_NAME(Window_obj::nme_get_frame_stage,"nme_get_frame_stage");
	HX_MARK_MEMBER_NAME(Window_obj::nme_display_object_set_bg,"nme_display_object_set_bg");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_get_title,"nme_stage_get_title");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_set_title,"nme_stage_set_title");
	HX_MARK_MEMBER_NAME(Window_obj::nme_window_close,"nme_window_close");
	HX_MARK_MEMBER_NAME(Window_obj::nme_window_supports_secondary,"nme_window_supports_secondary");
	HX_MARK_MEMBER_NAME(Window_obj::nme_stage_get_global_mouse_state,"nme_stage_get_global_mouse_state");
	HX_MARK_MEMBER_NAME(Window_obj::nme_set_stage_handler,"nme_set_stage_handler");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Window_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Window_obj::supportsSecondary,"supportsSecondary");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_resize_window,"nme_stage_resize_window");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_is_opengl,"nme_stage_is_opengl");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_get_stage_width,"nme_stage_get_stage_width");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_get_stage_height,"nme_stage_get_stage_height");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_get_dpi_scale,"nme_stage_get_dpi_scale");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_get_scale_mode,"nme_stage_get_scale_mode");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_set_scale_mode,"nme_stage_set_scale_mode");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_get_align,"nme_stage_get_align");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_set_align,"nme_stage_set_align");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_get_quality,"nme_stage_get_quality");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_set_quality,"nme_stage_set_quality");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_get_display_state,"nme_stage_get_display_state");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_set_display_state,"nme_stage_set_display_state");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_set_window_position,"nme_stage_set_window_position");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_get_window_x,"nme_stage_get_window_x");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_get_window_y,"nme_stage_get_window_y");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_set_next_wake,"nme_stage_set_next_wake");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_begin_render,"nme_stage_begin_render");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_end_render,"nme_stage_end_render");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_get_frame_stage,"nme_get_frame_stage");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_display_object_set_bg,"nme_display_object_set_bg");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_get_title,"nme_stage_get_title");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_set_title,"nme_stage_set_title");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_window_close,"nme_window_close");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_window_supports_secondary,"nme_window_supports_secondary");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_stage_get_global_mouse_state,"nme_stage_get_global_mouse_state");
	HX_VISIT_MEMBER_NAME(Window_obj::nme_set_stage_handler,"nme_set_stage_handler");
};

#endif

::hx::Class Window_obj::__mClass;

static ::String Window_obj_sStaticFields[] = {
	HX_("supportsSecondary",50,5d,73,86),
	HX_("get_supportsSecondary",27,60,21,05),
	HX_("nme_stage_resize_window",e1,12,4e,c1),
	HX_("nme_stage_is_opengl",2a,51,df,94),
	HX_("nme_stage_get_stage_width",62,e0,82,a4),
	HX_("nme_stage_get_stage_height",0b,ee,50,04),
	HX_("nme_stage_get_dpi_scale",85,71,6a,d6),
	HX_("nme_stage_get_scale_mode",3b,81,2e,c9),
	HX_("nme_stage_set_scale_mode",af,69,4e,e9),
	HX_("nme_stage_get_align",e2,38,61,33),
	HX_("nme_stage_set_align",ee,24,b2,16),
	HX_("nme_stage_get_quality",1c,68,6e,53),
	HX_("nme_stage_set_quality",28,6f,db,5d),
	HX_("nme_stage_get_display_state",31,cc,9b,09),
	HX_("nme_stage_set_display_state",3d,a4,09,2d),
	HX_("nme_stage_set_window_position",81,81,37,52),
	HX_("nme_stage_get_window_x",2c,51,c2,ac),
	HX_("nme_stage_get_window_y",2d,51,c2,ac),
	HX_("nme_stage_set_next_wake",d9,b8,28,42),
	HX_("nme_stage_begin_render",e6,f3,2a,67),
	HX_("nme_stage_end_render",f4,01,00,e0),
	HX_("nme_get_frame_stage",4a,47,c4,7f),
	HX_("nme_display_object_set_bg",4c,19,ad,3b),
	HX_("nme_stage_get_title",b5,f7,0a,22),
	HX_("nme_stage_set_title",c1,e3,5b,05),
	HX_("nme_window_close",c2,ae,cb,8d),
	HX_("nme_window_supports_secondary",6f,24,69,a5),
	HX_("nme_stage_get_global_mouse_state",de,b4,25,ad),
	HX_("nme_set_stage_handler",f3,0a,dc,f6),
	::String(null())
};

void Window_obj::__register()
{
	Window_obj _hx_dummy;
	Window_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.app.Window",65,70,d0,9d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Window_obj::__GetStatic;
	__mClass->mSetStaticField = &Window_obj::__SetStatic;
	__mClass->mMarkFunc = Window_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Window_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Window_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Window_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Window_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Window_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Window_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Window_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_resize_window = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_resize_window",e1,12,4e,c1),HX_("oiiv",87,b7,ae,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_is_opengl = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_is_opengl",2a,51,df,94),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_get_stage_width = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_stage_width",62,e0,82,a4),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_get_stage_height = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_stage_height",0b,ee,50,04),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_get_dpi_scale = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_dpi_scale",85,71,6a,d6),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_get_scale_mode = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_scale_mode",3b,81,2e,c9),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_set_scale_mode = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_set_scale_mode",af,69,4e,e9),HX_("oiv",1c,96,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_get_align = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_align",e2,38,61,33),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_set_align = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_set_align",ee,24,b2,16),HX_("oiv",1c,96,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_get_quality = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_quality",1c,68,6e,53),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_set_quality = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_set_quality",28,6f,db,5d),HX_("oiv",1c,96,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_get_display_state = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_display_state",31,cc,9b,09),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_set_display_state = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_set_display_state",3d,a4,09,2d),HX_("oiv",1c,96,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_set_window_position = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_set_window_position",81,81,37,52),HX_("oiiv",87,b7,ae,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_get_window_x = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_window_x",2c,51,c2,ac),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_get_window_y = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_window_y",2d,51,c2,ac),HX_("oi",1a,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_set_next_wake = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_set_next_wake",d9,b8,28,42),HX_("odv",c1,91,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_begin_render = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_begin_render",e6,f3,2a,67),HX_("obv",03,90,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_end_render = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_end_render",f4,01,00,e0),HX_("ov",27,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_get_frame_stage = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_get_frame_stage",4a,47,c4,7f),HX_("oo",20,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_989ffeb970fd979d_486_boot)
HXDLIN( 486)		nme_display_object_set_bg = ::nme::Loader_obj::load(HX_("nme_display_object_set_bg",4c,19,ad,3b),2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_get_title = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_title",b5,f7,0a,22),HX_("os",24,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_set_title = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_set_title",c1,e3,5b,05),HX_("osv",d2,9e,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_window_close = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_window_close",c2,ae,cb,8d),HX_("ov",27,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_window_supports_secondary = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_window_supports_secondary",6f,24,69,a5),HX_("b",62,00,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_stage_get_global_mouse_state = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_stage_get_global_mouse_state",de,b4,25,ad),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_154b8b6c40f42d67_9_boot)
HXDLIN(   9)		nme_set_stage_handler = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_set_stage_handler_native",a3,64,8f,b0),HX_("ooiiv",76,1b,29,33),false);
            	}
}

} // end namespace nme
} // end namespace app
