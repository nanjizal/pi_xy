// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_cpp_Lib
#include <cpp/Lib.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_nme_Loader
#include <nme/Loader.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_fcab0addb50cda6d_35_findHaxeLib,"nme.Loader","findHaxeLib",0x6d6ccef3,"nme.Loader.findHaxeLib","nme/Loader.hx",35,0xb976d522)
HX_LOCAL_STACK_FRAME(_hx_pos_fcab0addb50cda6d_86_load,"nme.Loader","load",0xe58ecf19,"nme.Loader.load","nme/Loader.hx",86,0xb976d522)
HX_LOCAL_STACK_FRAME(_hx_pos_fcab0addb50cda6d_171_loaderTrace,"nme.Loader","loaderTrace",0x0e5a30df,"nme.Loader.loaderTrace","nme/Loader.hx",171,0xb976d522)
HX_LOCAL_STACK_FRAME(_hx_pos_fcab0addb50cda6d_191_sysName,"nme.Loader","sysName",0xdc807ae5,"nme.Loader.sysName","nme/Loader.hx",191,0xb976d522)
HX_LOCAL_STACK_FRAME(_hx_pos_fcab0addb50cda6d_196_tryLoad,"nme.Loader","tryLoad",0xacb60dee,"nme.Loader.tryLoad","nme/Loader.hx",196,0xb976d522)
HX_LOCAL_STACK_FRAME(_hx_pos_fcab0addb50cda6d_16_boot,"nme.Loader","boot",0xdef2b925,"nme.Loader.boot","nme/Loader.hx",16,0xb976d522)
HX_LOCAL_STACK_FRAME(_hx_pos_fcab0addb50cda6d_17_boot,"nme.Loader","boot",0xdef2b925,"nme.Loader.boot","nme/Loader.hx",17,0xb976d522)
HX_LOCAL_STACK_FRAME(_hx_pos_fcab0addb50cda6d_18_boot,"nme.Loader","boot",0xdef2b925,"nme.Loader.boot","nme/Loader.hx",18,0xb976d522)
namespace nme{

void Loader_obj::__construct() { }

Dynamic Loader_obj::__CreateEmpty() { return new Loader_obj; }

void *Loader_obj::_hx_vtable = 0;

Dynamic Loader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Loader_obj > _hx_result = new Loader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Loader_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x19cf5179;
}

bool Loader_obj::foundNdll;

bool Loader_obj::moduleInit;

::String Loader_obj::moduleName;

::String Loader_obj::findHaxeLib(::String inLib){
            	HX_GC_STACKFRAME(&_hx_pos_fcab0addb50cda6d_35_findHaxeLib)
HXLINE(  36)		::Sys_obj::setCwd(::Sys_obj::args()->__get((::Sys_obj::args()->length - 1)));
HXLINE(  37)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  39)			 ::sys::io::Process proc =  ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("haxelib",df,b6,80,08),::Array_obj< ::String >::__new(2)->init(0,HX_("path",a5,e5,51,4a))->init(1,inLib),null());
HXLINE(  41)			if (::hx::IsNotNull( proc )) {
HXLINE(  43)				 ::haxe::io::Input stream = proc->_hx_stdout;
HXLINE(  45)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  47)					while(true){
HXLINE(  49)						::String s = stream->readLine();
HXLINE(  51)						if ((s.substr(0,1) != HX_("-",2d,00,00,00))) {
HXLINE(  53)							stream->close();
HXLINE(  54)							proc->close();
HXLINE(  56)							::String parts = s.split(HX_("\\",5c,00,00,00))->join(HX_("/",2f,00,00,00));
HXLINE(  57)							::Array< ::String > parts1 = parts.split(HX_("/",2f,00,00,00));
HXLINE(  58)							while((parts1->length > 1)){
HXLINE(  60)								::String test = (parts1->join(HX_("/",2f,00,00,00)) + HX_("/ndll",e5,fb,d6,58));
HXLINE(  61)								if (::sys::FileSystem_obj::exists(test)) {
HXLINE(  63)									s = parts1->join(HX_("/",2f,00,00,00));
HXLINE(  64)									goto _hx_goto_1;
            								}
HXLINE(  66)								parts1->pop();
            							}
            							_hx_goto_1:;
HXLINE(  69)							::nme::Loader_obj::loaderTrace((HX_("Found haxelib ",1f,a6,4d,c9) + s));
HXLINE(  70)							return s;
            						}
            					}
            				} catch( ::Dynamic _hx_e) {
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic _g = _hx_e;
HXLINE(  74)						{
HXLINE(  74)							null();
            						}
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE(  76)				stream->close();
HXLINE(  77)				proc->close();
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g1 = _hx_e;
HXLINE(  80)				{
HXLINE(  80)					null();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  82)		return HX_("",00,00,00,00);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Loader_obj,findHaxeLib,return )

 ::Dynamic Loader_obj::load(::String func,int args){
            	HX_STACKFRAME(&_hx_pos_fcab0addb50cda6d_86_load)
HXLINE(  91)		if (::nme::Loader_obj::moduleInit) {
HXLINE(  93)			if (!(::nme::Loader_obj::foundNdll)) {
HXLINE(  94)				return null();
            			}
HXLINE( 104)			return ::cpp::Lib_obj::load(::nme::Loader_obj::moduleName,func,args);
            		}
HXLINE( 112)		::nme::Loader_obj::moduleInit = true;
HXLINE( 113)		::nme::Loader_obj::moduleName = HX_("nme",46,d7,53,00);
HXLINE( 116)		 ::Dynamic result = ::nme::Loader_obj::tryLoad(HX_("./nme",a5,8d,d3,9b),func,args);
HXLINE( 117)		if (::hx::IsNull( result )) {
HXLINE( 118)			result = ::nme::Loader_obj::tryLoad(HX_(".\\nme",98,27,92,b9),func,args);
            		}
HXLINE( 121)		if (::hx::IsNull( result )) {
HXLINE( 122)			result = ::nme::Loader_obj::tryLoad(HX_("nme",46,d7,53,00),func,args);
            		}
HXLINE( 125)		if (::hx::IsNull( result )) {
HXLINE( 127)			::String slash;
HXDLIN( 127)			if ((::nme::Loader_obj::sysName().substr(7,null()).toLowerCase() == HX_("windows",83,de,74,e8))) {
HXLINE( 127)				slash = HX_("\\",5c,00,00,00);
            			}
            			else {
HXLINE( 127)				slash = HX_("/",2f,00,00,00);
            			}
HXLINE( 128)			::String haxelib = ::nme::Loader_obj::findHaxeLib(HX_("nme",46,d7,53,00));
HXLINE( 130)			if ((haxelib != HX_("",00,00,00,00))) {
HXLINE( 132)				result = ::nme::Loader_obj::tryLoad(((((((haxelib + slash) + HX_("ndll",36,b8,01,49)) + slash) + ::nme::Loader_obj::sysName()) + slash) + HX_("nme",46,d7,53,00)),func,args);
HXLINE( 134)				if (::hx::IsNull( result )) {
HXLINE( 135)					result = ::nme::Loader_obj::tryLoad((((((((haxelib + slash) + HX_("ndll",36,b8,01,49)) + slash) + ::nme::Loader_obj::sysName()) + HX_("64",3e,2f,00,00)) + slash) + HX_("nme",46,d7,53,00)),func,args);
            				}
            			}
            		}
HXLINE( 139)		::nme::Loader_obj::loaderTrace((HX_("Result : ",e9,19,2c,14) + ::Std_obj::string(result)));
HXLINE( 141)		::nme::Loader_obj::foundNdll = ::hx::IsNotNull( result );
HXLINE( 147)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Loader_obj,load,return )

void Loader_obj::loaderTrace(::String inStr){
            	HX_STACKFRAME(&_hx_pos_fcab0addb50cda6d_171_loaderTrace)
HXLINE( 177)		bool debug = ::hx::IsNotNull( ::Sys_obj::getEnv(HX_("NME_LOAD_DEBUG",d3,d3,e9,e7)) );
HXLINE( 180)		if (debug) {
HXLINE( 181)			::cpp::Lib_obj::println(inStr);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Loader_obj,loaderTrace,(void))

::String Loader_obj::sysName(){
            	HX_STACKFRAME(&_hx_pos_fcab0addb50cda6d_191_sysName)
HXDLIN( 191)		return ::Sys_obj::systemName();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Loader_obj,sysName,return )

 ::Dynamic Loader_obj::tryLoad(::String inName,::String func,int args){
            	HX_STACKFRAME(&_hx_pos_fcab0addb50cda6d_196_tryLoad)
HXLINE( 197)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 199)			 ::Dynamic result = ::cpp::Lib_obj::load(inName,func,args);
HXLINE( 201)			if (::hx::IsNotNull( result )) {
HXLINE( 203)				::nme::Loader_obj::loaderTrace((HX_("Got result ",af,e9,02,45) + inName));
HXLINE( 204)				::nme::Loader_obj::moduleName = inName;
HXLINE( 205)				return result;
            			}
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE( 208)				{
HXLINE( 208)					null();
            				}
HXLINE( 210)				::nme::Loader_obj::loaderTrace((HX_("Failed to load : ",1e,ca,38,9b) + inName));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 213)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Loader_obj,tryLoad,return )


Loader_obj::Loader_obj()
{
}

bool Loader_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"sysName") ) { outValue = sysName_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tryLoad") ) { outValue = tryLoad_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"foundNdll") ) { outValue = ( foundNdll ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"moduleInit") ) { outValue = ( moduleInit ); return true; }
		if (HX_FIELD_EQ(inName,"moduleName") ) { outValue = ( moduleName ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"findHaxeLib") ) { outValue = findHaxeLib_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loaderTrace") ) { outValue = loaderTrace_dyn(); return true; }
	}
	return false;
}

bool Loader_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"foundNdll") ) { foundNdll=ioValue.Cast< bool >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"moduleInit") ) { moduleInit=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"moduleName") ) { moduleName=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Loader_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Loader_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &Loader_obj::foundNdll,HX_("foundNdll",98,2f,8d,9d)},
	{::hx::fsBool,(void *) &Loader_obj::moduleInit,HX_("moduleInit",dc,61,fd,35)},
	{::hx::fsString,(void *) &Loader_obj::moduleName,HX_("moduleName",17,99,41,39)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Loader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Loader_obj::foundNdll,"foundNdll");
	HX_MARK_MEMBER_NAME(Loader_obj::moduleInit,"moduleInit");
	HX_MARK_MEMBER_NAME(Loader_obj::moduleName,"moduleName");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Loader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Loader_obj::foundNdll,"foundNdll");
	HX_VISIT_MEMBER_NAME(Loader_obj::moduleInit,"moduleInit");
	HX_VISIT_MEMBER_NAME(Loader_obj::moduleName,"moduleName");
};

#endif

::hx::Class Loader_obj::__mClass;

static ::String Loader_obj_sStaticFields[] = {
	HX_("foundNdll",98,2f,8d,9d),
	HX_("moduleInit",dc,61,fd,35),
	HX_("moduleName",17,99,41,39),
	HX_("findHaxeLib",86,2f,53,08),
	HX_("load",26,9a,b7,47),
	HX_("loaderTrace",72,91,40,a9),
	HX_("sysName",f8,55,40,7a),
	HX_("tryLoad",01,e9,75,4a),
	::String(null())
};

void Loader_obj::__register()
{
	Loader_obj _hx_dummy;
	Loader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.Loader",5b,50,8f,07);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Loader_obj::__GetStatic;
	__mClass->mSetStaticField = &Loader_obj::__SetStatic;
	__mClass->mMarkFunc = Loader_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Loader_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Loader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Loader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Loader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Loader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Loader_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fcab0addb50cda6d_16_boot)
HXDLIN(  16)		foundNdll = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcab0addb50cda6d_17_boot)
HXDLIN(  17)		moduleInit = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcab0addb50cda6d_18_boot)
HXDLIN(  18)		moduleName = HX_("",00,00,00,00);
            	}
}

} // end namespace nme
