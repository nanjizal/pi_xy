// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitQuad
#include <pi_xy/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_QuadPoints_
#include <pi_xy/algo/QuadPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo__RoundRecPixel_RoundRecPixel_Fields_
#include <pi_xy/algo/_RoundRecPixel/RoundRecPixel_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5e9ae3e1c0a40e73_19_fillRoundRectangle,"pi_xy.algo._RoundRecPixel.RoundRecPixel_Fields_","fillRoundRectangle",0xcb45363c,"pi_xy.algo._RoundRecPixel.RoundRecPixel_Fields_.fillRoundRectangle","pi_xy/algo/RoundRecPixel.hx",19,0x925dc04e)
HX_LOCAL_STACK_FRAME(_hx_pos_5e9ae3e1c0a40e73_59_tileRoundRectangle,"pi_xy.algo._RoundRecPixel.RoundRecPixel_Fields_","tileRoundRectangle",0xb9dae827,"pi_xy.algo._RoundRecPixel.RoundRecPixel_Fields_.tileRoundRectangle","pi_xy/algo/RoundRecPixel.hx",59,0x925dc04e)
HX_LOCAL_STACK_FRAME(_hx_pos_5e9ae3e1c0a40e73_99_fillGrad4RoundRectangle,"pi_xy.algo._RoundRecPixel.RoundRecPixel_Fields_","fillGrad4RoundRectangle",0x46d3472c,"pi_xy.algo._RoundRecPixel.RoundRecPixel_Fields_.fillGrad4RoundRectangle","pi_xy/algo/RoundRecPixel.hx",99,0x925dc04e)
namespace pi_xy{
namespace algo{
namespace _RoundRecPixel{

void RoundRecPixel_Fields__obj::__construct() { }

Dynamic RoundRecPixel_Fields__obj::__CreateEmpty() { return new RoundRecPixel_Fields__obj; }

void *RoundRecPixel_Fields__obj::_hx_vtable = 0;

Dynamic RoundRecPixel_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< RoundRecPixel_Fields__obj > _hx_result = new RoundRecPixel_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool RoundRecPixel_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2001916c;
}

void RoundRecPixel_Fields__obj::fillRoundRectangle( ::pi_xy::ImageStruct pixelimage,Float x,Float y,Float wid,Float hi,int color, ::Dynamic __o_dx, ::Dynamic __o_dy, ::Dynamic __o_fat, ::Dynamic __o_tall){
            		 ::Dynamic dx = __o_dx;
            		if (::hx::IsNull(__o_dx)) dx = ((Float)-1.);
            		 ::Dynamic dy = __o_dy;
            		if (::hx::IsNull(__o_dy)) dy = ((Float)-1.);
            		 ::Dynamic fat = __o_fat;
            		if (::hx::IsNull(__o_fat)) fat = ((Float)-1.);
            		 ::Dynamic tall = __o_tall;
            		if (::hx::IsNull(__o_tall)) tall = ((Float)-1.);
            	HX_GC_STACKFRAME(&_hx_pos_5e9ae3e1c0a40e73_19_fillRoundRectangle)
HXLINE(  23)		if (::hx::IsLess( dx,((Float)0.) )) {
HXLINE(  24)			Float smallest;
HXDLIN(  24)			if ((hi < wid)) {
HXLINE(  24)				smallest = hi;
            			}
            			else {
HXLINE(  24)				smallest = wid;
            			}
HXLINE(  25)			Float goldenRatio = ((Float)1.61803398875);
HXLINE(  26)			dx = (smallest / (goldenRatio + 2));
            		}
HXLINE(  28)		if (::hx::IsLess( dy,((Float)0.) )) {
HXLINE(  28)			dy = dx;
            		}
HXLINE(  29)		if (::hx::IsLess( fat,((Float)0.) )) {
HXLINE(  29)			fat = (wid - (( (Float)(2) ) * ( (Float)(dx) )));
            		}
HXLINE(  30)		if (::hx::IsLess( tall,((Float)0.) )) {
HXLINE(  30)			tall = (hi - (( (Float)(2) ) * ( (Float)(dy) )));
            		}
HXLINE(  31)		Float rightRadius = ((wid - ( (Float)(fat) )) - ( (Float)(dx) ));
HXLINE(  32)		Float bottomRadius = ((hi - ( (Float)(tall) )) - ( (Float)(dy) ));
HXLINE(  33)		Float farX = ((x + dx) + fat);
HXLINE(  34)		Float lowerY = ((y + dy) + tall);
HXLINE(  36)		{
HXLINE(  36)			 ::pi_xy::ImageStruct this1 = pixelimage;
HXDLIN(  36)			Float cx = (x + dx);
HXDLIN(  36)			Float cy = (y + dy);
HXDLIN(  36)			Float rx = ( (Float)(dx) );
HXDLIN(  36)			Float ry = ( (Float)(dy) );
HXDLIN(  36)			{
HXLINE(  36)				 ::Dynamic targetError = ((Float)1.05);
HXDLIN(  36)				if (::hx::IsNull( targetError )) {
HXLINE( 113)					targetError = ((Float)1.05);
            				}
HXLINE(  36)				Float rSmall;
HXDLIN(  36)				if ((rx > ry)) {
HXLINE(  36)					rSmall = ry;
            				}
            				else {
HXLINE(  36)					rSmall = rx;
            				}
HXDLIN(  36)				 ::Dynamic targetE = ( (Float)(targetError) );
HXDLIN(  36)				if (::hx::IsNull( targetE )) {
HXLINE(  20)					targetE = ((Float)1.05);
            				}
HXLINE(  36)				int result = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE) ) / rSmall)))));
HXDLIN(  36)				int noSides;
HXDLIN(  36)				if ((result < 12)) {
HXLINE(  36)					noSides = 12;
            				}
            				else {
HXLINE(  36)					if ((result > 500)) {
HXLINE(  36)						noSides = 500;
            					}
            					else {
HXLINE(  36)						noSides = result;
            					}
            				}
HXDLIN(  36)				int sides = (::Math_obj::ceil((( (Float)(noSides) ) / ( (Float)(4) ))) * 4);
HXDLIN(  36)				Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides) ));
HXDLIN(  36)				Float omega = ::Math_obj::PI;
HXDLIN(  36)				int quarter = ::Std_obj::_hx_int((( (Float)(sides) ) / ( (Float)(4) )));
HXDLIN(  36)				Float lastX = ((Float)0.);
HXDLIN(  36)				Float lastY = ((Float)0.);
HXDLIN(  36)				{
HXLINE(  26)					lastX = (cx + (rx * ::Math_obj::cos(((( (Float)(sides) ) * theta) + omega))));
HXLINE(  27)					lastY = (cy + (ry * ::Math_obj::sin(((( (Float)(sides) ) * theta) + omega))));
            				}
HXLINE(  36)				{
HXLINE(  36)					int _g = 0;
HXDLIN(  36)					int _g1 = (quarter + 1);
HXDLIN(  36)					while((_g < _g1)){
HXLINE(  36)						_g = (_g + 1);
HXDLIN(  36)						int i = (_g - 1);
HXDLIN(  36)						Float nextX = (cx + (rx * ::Math_obj::cos((((( (Float)(i) ) * theta) + ((Float)0.0001)) + omega))));
HXDLIN(  36)						Float nextY = (cy + (ry * ::Math_obj::sin((((( (Float)(i) ) * theta) + ((Float)0.0001)) + omega))));
HXDLIN(  36)						{
HXLINE(  36)							 ::pi_xy::ImageStruct this2 = this1;
HXDLIN(  36)							bool hasHit = false;
HXDLIN(  36)							bool hasUndo = false;
HXDLIN(  36)							{
HXLINE(  36)								Float bx = lastX;
HXDLIN(  36)								Float by = lastY;
HXDLIN(  36)								Float cx1 = nextX;
HXDLIN(  36)								Float cy1 = nextY;
HXDLIN(  36)								bool adjustWinding = (((((cx * by) - (bx * cy)) + ((bx * cy1) - (cx1 * by))) + ((cx1 * cy) - (cx * cy1))) > 0);
HXDLIN(  36)								if (!(adjustWinding)) {
HXLINE(  36)									Float bx_ = bx;
HXDLIN(  36)									Float by_ = by;
HXLINE(  25)									bx = cx1;
HXLINE(  26)									by = cy1;
HXLINE(  27)									cx1 = bx_;
HXLINE(  28)									cy1 = by_;
            								}
HXLINE(  36)								{
HXLINE(  36)									Float s0 = ((cy * cx1) - (cx * cy1));
HXDLIN(  36)									Float sx = (cy1 - cy);
HXDLIN(  36)									Float sy = (cx - cx1);
HXDLIN(  36)									Float t0 = ((cx * by) - (cy * bx));
HXDLIN(  36)									Float tx = (cy - by);
HXDLIN(  36)									Float ty = (bx - cx);
HXDLIN(  36)									Float A = ((((-(by) * cx1) + (cy * (-(bx) + cx1))) + (cx * (by - cy1))) + (bx * cy1));
HXDLIN(  36)									 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  36)									if ((cx > bx)) {
HXLINE(  36)										if ((cx > cx1)) {
HXLINE(  36)											int min;
HXDLIN(  36)											if ((bx > cx1)) {
HXLINE(  36)												min = ::Math_obj::floor(cx1);
            											}
            											else {
HXLINE(  36)												min = ::Math_obj::floor(bx);
            											}
HXDLIN(  36)											int ii_min = min;
HXDLIN(  36)											int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  36)											xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            										}
            										else {
HXLINE(  36)											int ii_min1 = ::Math_obj::floor(bx);
HXDLIN(  36)											int ii_max1 = ::Math_obj::ceil(cx1);
HXDLIN(  36)											xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            										}
            									}
            									else {
HXLINE(  36)										if ((bx > cx1)) {
HXLINE(  36)											int min1;
HXDLIN(  36)											if ((cx > cx1)) {
HXLINE(  36)												min1 = ::Math_obj::floor(cx1);
            											}
            											else {
HXLINE(  36)												min1 = ::Math_obj::ceil(cx);
            											}
HXDLIN(  36)											int ii_min2 = min1;
HXDLIN(  36)											int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN(  36)											xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            										}
            										else {
HXLINE(  36)											int ii_min3 = ::Math_obj::floor(cx);
HXDLIN(  36)											int ii_max3 = ::Math_obj::ceil(cx1);
HXDLIN(  36)											xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            										}
            									}
HXDLIN(  36)									 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  36)									if ((cy > by)) {
HXLINE(  36)										if ((cy > cy1)) {
HXLINE(  36)											int min2;
HXDLIN(  36)											if ((by > cy1)) {
HXLINE(  36)												min2 = ::Math_obj::floor(cy1);
            											}
            											else {
HXLINE(  36)												min2 = ::Math_obj::floor(by);
            											}
HXDLIN(  36)											int ii_min4 = min2;
HXDLIN(  36)											int ii_max4 = ::Math_obj::ceil(cy);
HXDLIN(  36)											yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            										}
            										else {
HXLINE(  36)											int ii_min5 = ::Math_obj::floor(by);
HXDLIN(  36)											int ii_max5 = ::Math_obj::ceil(cy1);
HXDLIN(  36)											yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            										}
            									}
            									else {
HXLINE(  36)										if ((by > cy1)) {
HXLINE(  36)											int min3;
HXDLIN(  36)											if ((cy > cy1)) {
HXLINE(  36)												min3 = ::Math_obj::floor(cy1);
            											}
            											else {
HXLINE(  36)												min3 = ::Math_obj::ceil(cy);
            											}
HXDLIN(  36)											int ii_min6 = min3;
HXDLIN(  36)											int ii_max6 = ::Math_obj::ceil(by);
HXDLIN(  36)											yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            										}
            										else {
HXLINE(  36)											int ii_min7 = ::Math_obj::floor(cy);
HXDLIN(  36)											int ii_max7 = ::Math_obj::ceil(cy1);
HXDLIN(  36)											yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            										}
            									}
HXDLIN(  36)									 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  36)									if (hasUndo) {
HXLINE(  36)										int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  36)										int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  36)										 ::Dynamic imageType = null();
HXDLIN(  36)										 ::pi_xy::ImageStruct this3 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  36)										if (::hx::IsNull( imageType )) {
HXLINE(  54)											imageType = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  36)										::Dynamic undoImage1;
HXDLIN(  36)										switch((int)(( (int)(imageType) ))){
            											case (int)0: {
HXLINE(  36)												 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  36)												 ::iterMagic::BytesImg b = byt;
HXDLIN(  36)												{
HXLINE(  36)													b->width = width;
HXDLIN(  36)													b->height = height;
HXDLIN(  36)													b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  36)													b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  36)													{
HXLINE(  36)														int len = b->length;
HXDLIN(  36)														int w = 0;
HXDLIN(  36)														{
HXLINE(  36)															int _g2 = 0;
HXDLIN(  36)															int _g3 = b->height;
HXDLIN(  36)															while((_g2 < _g3)){
HXLINE(  36)																_g2 = (_g2 + 1);
HXDLIN(  36)																int y1 = (_g2 - 1);
HXDLIN(  36)																{
HXLINE(  36)																	int _g4 = 0;
HXDLIN(  36)																	int _g5 = b->width;
HXDLIN(  36)																	while((_g4 < _g5)){
HXLINE(  36)																		_g4 = (_g4 + 1);
HXDLIN(  36)																		int x1 = (_g4 - 1);
HXDLIN(  36)																		{
HXLINE(  36)																			w = (w + 1);
HXDLIN(  36)																			b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  36)																		{
HXLINE(  36)																			w = (w + 1);
HXDLIN(  36)																			b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  36)																		{
HXLINE(  36)																			w = (w + 1);
HXDLIN(  36)																			b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  36)																		{
HXLINE(  36)																			w = (w + 1);
HXDLIN(  36)																			b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  36)												undoImage1 = b;
            											}
            											break;
            											case (int)1: {
HXLINE(  36)												 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)												 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  36)												{
HXLINE(  36)													a->width = width;
HXDLIN(  36)													a->height = height;
HXDLIN(  36)													a->data = ::Array_obj< int >::__new(0);
HXDLIN(  36)													a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  36)													{
HXLINE(  36)														int _g6 = 0;
HXDLIN(  36)														int _g7 = a->length;
HXDLIN(  36)														while((_g6 < _g7)){
HXLINE(  36)															_g6 = (_g6 + 1);
HXDLIN(  36)															int i1 = (_g6 - 1);
HXDLIN(  36)															a->data[i1] = 0;
            														}
            													}
            												}
HXDLIN(  36)												undoImage1 = a;
            											}
            											break;
            											case (int)2: {
HXLINE(  36)												 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  36)												 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  36)												{
HXLINE(  36)													b1->width = width;
HXDLIN(  36)													b1->height = height;
HXDLIN(  36)													b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  36)													int size = (b1->length * 4);
HXDLIN(  36)													b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  36)													{
HXLINE(  36)														int _g8 = 0;
HXDLIN(  36)														int _g9 = b1->length;
HXDLIN(  36)														while((_g8 < _g9)){
HXLINE(  36)															_g8 = (_g8 + 1);
HXDLIN(  36)															int i2 = (_g8 - 1);
HXDLIN(  36)															{
HXLINE(  36)																 ::haxe::io::ArrayBufferViewImpl this4 = b1->data;
HXDLIN(  36)																bool undoImage2;
HXDLIN(  36)																if ((i2 >= 0)) {
HXLINE(  36)																	undoImage2 = (i2 < (this4->byteLength >> 2));
            																}
            																else {
HXLINE(  36)																	undoImage2 = false;
            																}
HXDLIN(  36)																if (undoImage2) {
HXLINE(  36)																	 ::haxe::io::Bytes _this = this4->bytes;
HXDLIN(  36)																	int pos = ((i2 << 2) + this4->byteOffset);
HXDLIN(  36)																	_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  36)																	_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  36)																	_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  36)																	_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  36)												undoImage1 = b1;
            											}
            											break;
            											case (int)3: {
HXLINE(  36)												 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)												 ::iterMagic::VecIntImg v = vec;
HXDLIN(  36)												{
HXLINE(  36)													v->width = width;
HXDLIN(  36)													v->height = height;
HXDLIN(  36)													v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  36)													v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  36)													{
HXLINE(  36)														int _g10 = 0;
HXDLIN(  36)														int _g11 = v->length;
HXDLIN(  36)														while((_g10 < _g11)){
HXLINE(  36)															_g10 = (_g10 + 1);
HXDLIN(  36)															int i3 = (_g10 - 1);
HXDLIN(  36)															v->data->__unsafe_set(i3,0);
            														}
            													}
            												}
HXDLIN(  36)												undoImage1 = v;
            											}
            											break;
            											case (int)4: {
HXLINE(  36)												 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)												 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  36)												{
HXLINE(  36)													b2->width = width;
HXDLIN(  36)													b2->height = height;
HXDLIN(  36)													b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  36)													b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  36)													{
HXLINE(  36)														int len1 = b2->length;
HXDLIN(  36)														 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  36)														if (::hx::IsNull( d->head )) {
HXLINE(  36)															int _g12 = 0;
HXDLIN(  36)															int _g13 = len1;
HXDLIN(  36)															while((_g12 < _g13)){
HXLINE(  36)																_g12 = (_g12 + 1);
HXDLIN(  36)																int i4 = (_g12 - 1);
HXDLIN(  36)																d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            															}
            														}
            														else {
HXLINE(  36)															int _g14 = 0;
HXDLIN(  36)															int _g15 = len1;
HXDLIN(  36)															while((_g14 < _g15)){
HXLINE(  36)																_g14 = (_g14 + 1);
HXDLIN(  36)																int i5 = (_g14 - 1);
HXDLIN(  36)																{
HXLINE(  36)																	 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  36)																	 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  36)																	{
HXLINE(  36)																		int _g16 = 0;
HXDLIN(  36)																		int _g17 = i5;
HXDLIN(  36)																		while((_g16 < _g17)){
HXLINE(  36)																			_g16 = (_g16 + 1);
HXDLIN(  36)																			int i6 = (_g16 - 1);
HXLINE( 345)																			prev = l;
HXLINE( 346)																			l = l->next;
            																		}
            																	}
HXLINE(  36)																	if (::hx::IsNull( prev )) {
HXLINE(  36)																		b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  36)																		l = null();
            																	}
            																	else {
HXLINE(  36)																		prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  36)																		l = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  36)												undoImage1 = b2;
            											}
            											break;
            										}
HXDLIN(  36)										this3->image = undoImage1;
HXDLIN(  36)										this3->width = width;
HXDLIN(  36)										this3->height = height;
HXDLIN(  36)										this3->imageType = ( (int)(imageType) );
HXDLIN(  36)										undoImage = this3;
HXDLIN(  36)										{
HXLINE(  36)											int rectLeft = xIter3->start;
HXDLIN(  36)											int rectTop = yIter3->start;
HXDLIN(  36)											int rectRight = xIter3->max;
HXDLIN(  36)											bool forceClear = false;
HXDLIN(  36)											{
HXLINE(  36)												int _g18 = rectTop;
HXDLIN(  36)												int _g19 = yIter3->max;
HXDLIN(  36)												while((_g18 < _g19)){
HXLINE(  36)													_g18 = (_g18 + 1);
HXDLIN(  36)													int dy1 = (_g18 - 1);
HXDLIN(  36)													{
HXLINE(  36)														int _g20 = rectLeft;
HXDLIN(  36)														int _g21 = rectRight;
HXDLIN(  36)														while((_g20 < _g21)){
HXLINE(  36)															_g20 = (_g20 + 1);
HXDLIN(  36)															int dx1 = (_g20 - 1);
HXDLIN(  36)															::Dynamic this5 = this2->image;
HXDLIN(  36)															int index;
HXDLIN(  36)															if (this2->useVirtualPos) {
HXLINE(  36)																index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx1) - this2->virtualX));
            															}
            															else {
HXLINE(  36)																index = ::Std_obj::_hx_int(( (Float)(((dy1 * this2->width) + dx1)) ));
            															}
HXDLIN(  36)															int c = ::iterMagic::Iimg_obj::get(this5,index);
HXDLIN(  36)															int col;
HXDLIN(  36)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  36)																col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE(  36)																col = c;
            															}
HXDLIN(  36)															bool _hx_tmp;
HXDLIN(  36)															if (this2->useMask) {
HXLINE(  36)																_hx_tmp = ::hx::IsNotNull( this2->mask );
            															}
            															else {
HXLINE(  36)																_hx_tmp = false;
            															}
HXDLIN(  36)															if (_hx_tmp) {
HXLINE(  36)																 ::pi_xy::ImageStruct this6 = this2->mask;
HXDLIN(  36)																::Dynamic this7 = this6->image;
HXDLIN(  36)																int index1;
HXDLIN(  36)																if (this6->useVirtualPos) {
HXLINE(  36)																	index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this6->virtualY) * ( (Float)(this6->width) )) + dx1) - this6->virtualX));
            																}
            																else {
HXLINE(  36)																	index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this6->width) + dx1)) ));
            																}
HXDLIN(  36)																int c1 = ::iterMagic::Iimg_obj::get(this7,index1);
HXDLIN(  36)																int v1;
HXDLIN(  36)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  36)																	v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            																}
            																else {
HXLINE(  36)																	v1 = c1;
            																}
HXDLIN(  36)																int maskPixel = v1;
HXDLIN(  36)																int this8 = col;
HXDLIN(  36)																if ((maskPixel == 0)) {
HXLINE(  36)																	col = this8;
            																}
            																else {
HXLINE(  36)																	Float m0;
HXDLIN(  36)																	int this9 = ((maskPixel >> 24) & 255);
HXDLIN(  36)																	if ((this9 == 0)) {
HXLINE(  36)																		m0 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		m0 = (( (Float)(this9) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float m1;
HXDLIN(  36)																	int this10 = ((maskPixel >> 16) & 255);
HXDLIN(  36)																	if ((this10 == 0)) {
HXLINE(  36)																		m1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		m1 = (( (Float)(this10) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float m2;
HXDLIN(  36)																	int this11 = ((maskPixel >> 8) & 255);
HXDLIN(  36)																	if ((this11 == 0)) {
HXLINE(  36)																		m2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		m2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float m3;
HXDLIN(  36)																	int this12 = (maskPixel & 255);
HXDLIN(  36)																	if ((this12 == 0)) {
HXLINE(  36)																		m3 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		m3 = (( (Float)(this12) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this8 >> 24) & 255)) )));
HXDLIN(  36)																	int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this8 >> 16) & 255)) )));
HXDLIN(  36)																	int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this8 >> 8) & 255)) )));
HXDLIN(  36)																	int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this8 & 255)) )));
HXDLIN(  36)																	col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  36)															if ((col != 0)) {
HXLINE(  36)																int x2 = (dx1 - rectLeft);
HXDLIN(  36)																int y2 = (dy1 - rectTop);
HXDLIN(  36)																int c2 = col;
HXDLIN(  36)																bool _hx_tmp1;
HXDLIN(  36)																if ((((c2 >> 24) & 255) < 254)) {
HXLINE(  36)																	_hx_tmp1 = undoImage->transparent;
            																}
            																else {
HXLINE(  36)																	_hx_tmp1 = false;
            																}
HXDLIN(  36)																if (_hx_tmp1) {
HXLINE(  36)																	int location;
HXDLIN(  36)																	if (undoImage->useVirtualPos) {
HXLINE(  36)																		location = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            																	}
            																	else {
HXLINE(  36)																		location = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            																	}
HXDLIN(  36)																	int this13 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  36)																	int this14;
HXDLIN(  36)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  36)																		this14 = ((((((this13 >> 24) & 255) << 24) | ((this13 & 255) << 16)) | (((this13 >> 8) & 255) << 8)) | ((this13 >> 16) & 255));
            																	}
            																	else {
HXLINE(  36)																		this14 = this13;
            																	}
HXDLIN(  36)																	Float a1;
HXDLIN(  36)																	int this15 = ((this14 >> 24) & 255);
HXDLIN(  36)																	if ((this15 == 0)) {
HXLINE(  36)																		a1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		a1 = (( (Float)(this15) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float r1;
HXDLIN(  36)																	int this16 = ((this14 >> 16) & 255);
HXDLIN(  36)																	if ((this16 == 0)) {
HXLINE(  36)																		r1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		r1 = (( (Float)(this16) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float g1;
HXDLIN(  36)																	int this17 = ((this14 >> 8) & 255);
HXDLIN(  36)																	if ((this17 == 0)) {
HXLINE(  36)																		g1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		g1 = (( (Float)(this17) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float b11;
HXDLIN(  36)																	int this18 = (this14 & 255);
HXDLIN(  36)																	if ((this18 == 0)) {
HXLINE(  36)																		b11 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		b11 = (( (Float)(this18) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float a2;
HXDLIN(  36)																	int this19 = ((col >> 24) & 255);
HXDLIN(  36)																	if ((this19 == 0)) {
HXLINE(  36)																		a2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		a2 = (( (Float)(this19) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float r2;
HXDLIN(  36)																	int this20 = ((col >> 16) & 255);
HXDLIN(  36)																	if ((this20 == 0)) {
HXLINE(  36)																		r2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		r2 = (( (Float)(this20) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float g2;
HXDLIN(  36)																	int this21 = ((col >> 8) & 255);
HXDLIN(  36)																	if ((this21 == 0)) {
HXLINE(  36)																		g2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		g2 = (( (Float)(this21) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float b21;
HXDLIN(  36)																	int this22 = (col & 255);
HXDLIN(  36)																	if ((this22 == 0)) {
HXLINE(  36)																		b21 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		b21 = (( (Float)(this22) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  36)																	int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  36)																	int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  36)																	int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  36)																	int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  36)																	int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  36)																	{
HXLINE(  36)																		int _hx_tmp2;
HXDLIN(  36)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  36)																			_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																		}
            																		else {
HXLINE(  36)																			_hx_tmp2 = blended;
            																		}
HXDLIN(  36)																		::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            																	}
            																}
            																else {
HXLINE(  36)																	::Dynamic this23 = undoImage->image;
HXDLIN(  36)																	int index2;
HXDLIN(  36)																	if (undoImage->useVirtualPos) {
HXLINE(  36)																		index2 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            																	}
            																	else {
HXLINE(  36)																		index2 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            																	}
HXDLIN(  36)																	int _hx_tmp3;
HXDLIN(  36)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  36)																		_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            																	}
            																	else {
HXLINE(  36)																		_hx_tmp3 = c2;
            																	}
HXDLIN(  36)																	::iterMagic::Iimg_obj::set(this23,index2,_hx_tmp3);
            																}
            															}
            															else {
HXLINE(  36)																if (forceClear) {
HXLINE(  36)																	::Dynamic this24 = undoImage->image;
HXDLIN(  36)																	int x3 = (dx1 - rectLeft);
HXDLIN(  36)																	int y3 = (dy1 - rectTop);
HXDLIN(  36)																	int index3;
HXDLIN(  36)																	if (undoImage->useVirtualPos) {
HXLINE(  36)																		index3 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x3) - undoImage->virtualX));
            																	}
            																	else {
HXLINE(  36)																		index3 = ::Std_obj::_hx_int(( (Float)(((y3 * undoImage->width) + x3)) ));
            																	}
HXDLIN(  36)																	::iterMagic::Iimg_obj::set(this24,index3,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  36)									bool found = false;
HXDLIN(  36)									Float s = ((Float)0.);
HXDLIN(  36)									Float t = ((Float)0.);
HXDLIN(  36)									Float sxx = ((Float)0.);
HXDLIN(  36)									Float txx = ((Float)0.);
HXDLIN(  36)									{
HXLINE(  36)										int _g_min = xIter3->start;
HXDLIN(  36)										int _g_max = xIter3->max;
HXDLIN(  36)										while((_g_min < _g_max)){
HXLINE(  36)											_g_min = (_g_min + 1);
HXDLIN(  36)											int x4 = (_g_min - 1);
HXLINE(  60)											sxx = (sx * ( (Float)(x4) ));
HXLINE(  61)											txx = (tx * ( (Float)(x4) ));
HXLINE(  62)											found = false;
HXLINE(  36)											{
HXLINE(  36)												int _g_min1 = yIter3->start;
HXDLIN(  36)												int _g_max1 = yIter3->max;
HXDLIN(  36)												while((_g_min1 < _g_max1)){
HXLINE(  36)													_g_min1 = (_g_min1 + 1);
HXDLIN(  36)													int y4 = (_g_min1 - 1);
HXLINE(  64)													s = ((s0 + sxx) + (sy * ( (Float)(y4) )));
HXLINE(  65)													t = ((t0 + txx) + (ty * ( (Float)(y4) )));
HXLINE(  36)													bool _hx_tmp4;
HXDLIN(  36)													if (!((s <= 0))) {
HXLINE(  36)														_hx_tmp4 = (t <= 0);
            													}
            													else {
HXLINE(  36)														_hx_tmp4 = true;
            													}
HXDLIN(  36)													if (_hx_tmp4) {
HXLINE(  36)														if (found) {
HXLINE(  36)															goto _hx_goto_12;
            														}
            													}
            													else {
HXLINE(  36)														if (((s + t) < A)) {
HXLINE(  36)															{
HXLINE(  36)																int c3 = color;
HXDLIN(  36)																bool _hx_tmp5;
HXDLIN(  36)																if ((((c3 >> 24) & 255) < 254)) {
HXLINE(  36)																	_hx_tmp5 = this2->transparent;
            																}
            																else {
HXLINE(  36)																	_hx_tmp5 = false;
            																}
HXDLIN(  36)																if (_hx_tmp5) {
HXLINE(  36)																	int location1;
HXDLIN(  36)																	if (this2->useVirtualPos) {
HXLINE(  36)																		location1 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - this2->virtualY) * ( (Float)(this2->width) )) + x4) - this2->virtualX));
            																	}
            																	else {
HXLINE(  36)																		location1 = ::Std_obj::_hx_int(( (Float)(((y4 * this2->width) + x4)) ));
            																	}
HXDLIN(  36)																	int this25 = ::iterMagic::Iimg_obj::get(this2->image,location1);
HXDLIN(  36)																	int this26;
HXDLIN(  36)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  36)																		this26 = ((((((this25 >> 24) & 255) << 24) | ((this25 & 255) << 16)) | (((this25 >> 8) & 255) << 8)) | ((this25 >> 16) & 255));
            																	}
            																	else {
HXLINE(  36)																		this26 = this25;
            																	}
HXDLIN(  36)																	Float a11;
HXDLIN(  36)																	int this27 = ((this26 >> 24) & 255);
HXDLIN(  36)																	if ((this27 == 0)) {
HXLINE(  36)																		a11 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		a11 = (( (Float)(this27) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float r11;
HXDLIN(  36)																	int this28 = ((this26 >> 16) & 255);
HXDLIN(  36)																	if ((this28 == 0)) {
HXLINE(  36)																		r11 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		r11 = (( (Float)(this28) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float g11;
HXDLIN(  36)																	int this29 = ((this26 >> 8) & 255);
HXDLIN(  36)																	if ((this29 == 0)) {
HXLINE(  36)																		g11 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		g11 = (( (Float)(this29) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float b12;
HXDLIN(  36)																	int this30 = (this26 & 255);
HXDLIN(  36)																	if ((this30 == 0)) {
HXLINE(  36)																		b12 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		b12 = (( (Float)(this30) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float a21;
HXDLIN(  36)																	int this31 = ((color >> 24) & 255);
HXDLIN(  36)																	if ((this31 == 0)) {
HXLINE(  36)																		a21 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		a21 = (( (Float)(this31) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float r21;
HXDLIN(  36)																	int this32 = ((color >> 16) & 255);
HXDLIN(  36)																	if ((this32 == 0)) {
HXLINE(  36)																		r21 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		r21 = (( (Float)(this32) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float g21;
HXDLIN(  36)																	int this33 = ((color >> 8) & 255);
HXDLIN(  36)																	if ((this33 == 0)) {
HXLINE(  36)																		g21 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		g21 = (( (Float)(this33) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float b22;
HXDLIN(  36)																	int this34 = (color & 255);
HXDLIN(  36)																	if ((this34 == 0)) {
HXLINE(  36)																		b22 = ((Float)0.);
            																	}
            																	else {
HXLINE(  36)																		b22 = (( (Float)(this34) ) / ( (Float)(255) ));
            																	}
HXDLIN(  36)																	Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  36)																	int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  36)																	int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  36)																	int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  36)																	int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  36)																	int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  36)																	{
HXLINE(  36)																		int _hx_tmp6;
HXDLIN(  36)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  36)																			_hx_tmp6 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            																		}
            																		else {
HXLINE(  36)																			_hx_tmp6 = blended1;
            																		}
HXDLIN(  36)																		::iterMagic::Iimg_obj::set(this2->image,location1,_hx_tmp6);
            																	}
            																}
            																else {
HXLINE(  36)																	::Dynamic this35 = this2->image;
HXDLIN(  36)																	int index4;
HXDLIN(  36)																	if (this2->useVirtualPos) {
HXLINE(  36)																		index4 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - this2->virtualY) * ( (Float)(this2->width) )) + x4) - this2->virtualX));
            																	}
            																	else {
HXLINE(  36)																		index4 = ::Std_obj::_hx_int(( (Float)(((y4 * this2->width) + x4)) ));
            																	}
HXDLIN(  36)																	int _hx_tmp7;
HXDLIN(  36)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  36)																		_hx_tmp7 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            																	}
            																	else {
HXLINE(  36)																		_hx_tmp7 = c3;
            																	}
HXDLIN(  36)																	::iterMagic::Iimg_obj::set(this35,index4,_hx_tmp7);
            																}
            															}
HXLINE(  73)															found = true;
            														}
            														else {
HXLINE(  36)															if (found) {
HXLINE(  36)																goto _hx_goto_12;
            															}
            														}
            													}
            												}
            												_hx_goto_12:;
            											}
            										}
            									}
HXDLIN(  36)									if ((hasHit == true)) {
HXLINE(  36)										 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,bx,by,cx1,cy1,true);
HXDLIN(  36)										if (hasUndo) {
HXLINE(  36)											v2->undoImage = undoImage;
HXDLIN(  36)											v2->undoX = xIter3->start;
HXDLIN(  36)											v2->undoY = yIter3->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  46)						lastX = nextX;
HXLINE(  47)						lastY = nextY;
            					}
            				}
            			}
            		}
HXLINE(  37)		{
HXLINE(  37)			int r_x = ::Std_obj::_hx_int((x + dx));
HXDLIN(  37)			int r_y = ::Std_obj::_hx_int(y);
HXDLIN(  37)			int r_w = ::Std_obj::_hx_int(( (Float)(fat) ));
HXDLIN(  37)			int r_h = ::Std_obj::_hx_int(( (Float)(dy) ));
HXDLIN(  37)			int xmax = ((r_x + r_w) + 1);
HXDLIN(  37)			int ymax = ((r_y + r_h) + 1);
HXDLIN(  37)			int ii_min8 = r_x;
HXDLIN(  37)			int ii_max8 = xmax;
HXDLIN(  37)			int xRange__start = ii_min8;
HXDLIN(  37)			int xRange__max = ii_max8;
HXDLIN(  37)			int ii_min9 = r_y;
HXDLIN(  37)			int ii_max9 = ymax;
HXDLIN(  37)			int yRange__start = ii_min9;
HXDLIN(  37)			int yRange__max = ii_max9;
HXDLIN(  37)			int range_x = xRange__start;
HXDLIN(  37)			int range_y = (yRange__start - 1);
HXDLIN(  37)			int range_xReset = range_x;
HXDLIN(  37)			int range_yReset = range_y;
HXDLIN(  37)			int range_xMax = (xRange__max - 2);
HXDLIN(  37)			int range_yMax = (yRange__max - 2);
HXDLIN(  37)			int _this_min = 0;
HXDLIN(  37)			int _this_max = ::Std_obj::_hx_int(( (Float)(((xRange__max - xRange__start) * (yRange__max - yRange__start))) ));
HXDLIN(  37)			while((_this_min < _this_max)){
HXLINE(  37)				_this_min = (_this_min + 1);
HXDLIN(  37)				int i7 = (_this_min - 1);
HXDLIN(  37)				if ((range_y > range_yMax)) {
HXLINE(  37)					range_y = range_yReset;
HXDLIN(  37)					range_x = (range_x + 1);
            				}
HXDLIN(  37)				range_y = (range_y + 1);
HXDLIN(  37)				int i8 = i7;
HXDLIN(  37)				{
HXLINE(  37)					int x5 = range_x;
HXDLIN(  37)					int y5 = range_y;
HXDLIN(  37)					int c4 = color;
HXDLIN(  37)					bool _hx_tmp8;
HXDLIN(  37)					if ((((c4 >> 24) & 255) < 254)) {
HXLINE(  37)						_hx_tmp8 = pixelimage->transparent;
            					}
            					else {
HXLINE(  37)						_hx_tmp8 = false;
            					}
HXDLIN(  37)					if (_hx_tmp8) {
HXLINE(  37)						int location2;
HXDLIN(  37)						if (pixelimage->useVirtualPos) {
HXLINE(  37)							location2 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelimage->virtualY) * ( (Float)(pixelimage->width) )) + x5) - pixelimage->virtualX));
            						}
            						else {
HXLINE(  37)							location2 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelimage->width) + x5)) ));
            						}
HXDLIN(  37)						int this36 = ::iterMagic::Iimg_obj::get(pixelimage->image,location2);
HXDLIN(  37)						int this37;
HXDLIN(  37)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)							this37 = ((((((this36 >> 24) & 255) << 24) | ((this36 & 255) << 16)) | (((this36 >> 8) & 255) << 8)) | ((this36 >> 16) & 255));
            						}
            						else {
HXLINE(  37)							this37 = this36;
            						}
HXDLIN(  37)						Float a12;
HXDLIN(  37)						int this38 = ((this37 >> 24) & 255);
HXDLIN(  37)						if ((this38 == 0)) {
HXLINE(  37)							a12 = ((Float)0.);
            						}
            						else {
HXLINE(  37)							a12 = (( (Float)(this38) ) / ( (Float)(255) ));
            						}
HXDLIN(  37)						Float r12;
HXDLIN(  37)						int this39 = ((this37 >> 16) & 255);
HXDLIN(  37)						if ((this39 == 0)) {
HXLINE(  37)							r12 = ((Float)0.);
            						}
            						else {
HXLINE(  37)							r12 = (( (Float)(this39) ) / ( (Float)(255) ));
            						}
HXDLIN(  37)						Float g12;
HXDLIN(  37)						int this40 = ((this37 >> 8) & 255);
HXDLIN(  37)						if ((this40 == 0)) {
HXLINE(  37)							g12 = ((Float)0.);
            						}
            						else {
HXLINE(  37)							g12 = (( (Float)(this40) ) / ( (Float)(255) ));
            						}
HXDLIN(  37)						Float b13;
HXDLIN(  37)						int this41 = (this37 & 255);
HXDLIN(  37)						if ((this41 == 0)) {
HXLINE(  37)							b13 = ((Float)0.);
            						}
            						else {
HXLINE(  37)							b13 = (( (Float)(this41) ) / ( (Float)(255) ));
            						}
HXDLIN(  37)						Float a22;
HXDLIN(  37)						int this42 = ((color >> 24) & 255);
HXDLIN(  37)						if ((this42 == 0)) {
HXLINE(  37)							a22 = ((Float)0.);
            						}
            						else {
HXLINE(  37)							a22 = (( (Float)(this42) ) / ( (Float)(255) ));
            						}
HXDLIN(  37)						Float r22;
HXDLIN(  37)						int this43 = ((color >> 16) & 255);
HXDLIN(  37)						if ((this43 == 0)) {
HXLINE(  37)							r22 = ((Float)0.);
            						}
            						else {
HXLINE(  37)							r22 = (( (Float)(this43) ) / ( (Float)(255) ));
            						}
HXDLIN(  37)						Float g22;
HXDLIN(  37)						int this44 = ((color >> 8) & 255);
HXDLIN(  37)						if ((this44 == 0)) {
HXLINE(  37)							g22 = ((Float)0.);
            						}
            						else {
HXLINE(  37)							g22 = (( (Float)(this44) ) / ( (Float)(255) ));
            						}
HXDLIN(  37)						Float b23;
HXDLIN(  37)						int this45 = (color & 255);
HXDLIN(  37)						if ((this45 == 0)) {
HXLINE(  37)							b23 = ((Float)0.);
            						}
            						else {
HXLINE(  37)							b23 = (( (Float)(this45) ) / ( (Float)(255) ));
            						}
HXDLIN(  37)						Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  37)						int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  37)						int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  37)						int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  37)						int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  37)						int blended2 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN(  37)						{
HXLINE(  37)							int _hx_tmp9;
HXDLIN(  37)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)								_hx_tmp9 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            							}
            							else {
HXLINE(  37)								_hx_tmp9 = blended2;
            							}
HXDLIN(  37)							::iterMagic::Iimg_obj::set(pixelimage->image,location2,_hx_tmp9);
            						}
            					}
            					else {
HXLINE(  37)						::Dynamic this46 = pixelimage->image;
HXDLIN(  37)						int index5;
HXDLIN(  37)						if (pixelimage->useVirtualPos) {
HXLINE(  37)							index5 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelimage->virtualY) * ( (Float)(pixelimage->width) )) + x5) - pixelimage->virtualX));
            						}
            						else {
HXLINE(  37)							index5 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelimage->width) + x5)) ));
            						}
HXDLIN(  37)						int _hx_tmp10;
HXDLIN(  37)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)							_hx_tmp10 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            						}
            						else {
HXLINE(  37)							_hx_tmp10 = c4;
            						}
HXDLIN(  37)						::iterMagic::Iimg_obj::set(this46,index5,_hx_tmp10);
            					}
            				}
            			}
            		}
HXLINE(  38)		{
HXLINE(  38)			 ::pi_xy::ImageStruct this47 = pixelimage;
HXDLIN(  38)			Float cy2 = (y + dy);
HXDLIN(  38)			Float ry1 = ( (Float)(dy) );
HXDLIN(  38)			{
HXLINE(  38)				 ::Dynamic targetError1 = ((Float)1.05);
HXDLIN(  38)				if (::hx::IsNull( targetError1 )) {
HXLINE( 113)					targetError1 = ((Float)1.05);
            				}
HXLINE(  38)				Float rSmall1;
HXDLIN(  38)				if ((rightRadius > ry1)) {
HXLINE(  38)					rSmall1 = ry1;
            				}
            				else {
HXLINE(  38)					rSmall1 = rightRadius;
            				}
HXDLIN(  38)				 ::Dynamic targetE1 = ( (Float)(targetError1) );
HXDLIN(  38)				if (::hx::IsNull( targetE1 )) {
HXLINE(  20)					targetE1 = ((Float)1.05);
            				}
HXLINE(  38)				int result1 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE1) ) / rSmall1)))));
HXDLIN(  38)				int noSides1;
HXDLIN(  38)				if ((result1 < 12)) {
HXLINE(  38)					noSides1 = 12;
            				}
            				else {
HXLINE(  38)					if ((result1 > 500)) {
HXLINE(  38)						noSides1 = 500;
            					}
            					else {
HXLINE(  38)						noSides1 = result1;
            					}
            				}
HXDLIN(  38)				int sides1 = (::Math_obj::ceil((( (Float)(noSides1) ) / ( (Float)(4) ))) * 4);
HXDLIN(  38)				Float theta1 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides1) ));
HXDLIN(  38)				Float omega1 = ((( (Float)(3) ) * ::Math_obj::PI) / ( (Float)(2) ));
HXDLIN(  38)				int quarter1 = ::Std_obj::_hx_int((( (Float)(sides1) ) / ( (Float)(4) )));
HXDLIN(  38)				Float lastX1 = ((Float)0.);
HXDLIN(  38)				Float lastY1 = ((Float)0.);
HXDLIN(  38)				{
HXLINE(  26)					lastX1 = (farX + (rightRadius * ::Math_obj::cos(((( (Float)(sides1) ) * theta1) + omega1))));
HXLINE(  27)					lastY1 = (cy2 + (ry1 * ::Math_obj::sin(((( (Float)(sides1) ) * theta1) + omega1))));
            				}
HXLINE(  38)				{
HXLINE(  38)					int _g22 = 0;
HXDLIN(  38)					int _g23 = (quarter1 + 1);
HXDLIN(  38)					while((_g22 < _g23)){
HXLINE(  38)						_g22 = (_g22 + 1);
HXDLIN(  38)						int i9 = (_g22 - 1);
HXDLIN(  38)						Float nextX1 = (farX + (rightRadius * ::Math_obj::cos((((( (Float)(i9) ) * theta1) + ((Float)0.0001)) + omega1))));
HXDLIN(  38)						Float nextY1 = (cy2 + (ry1 * ::Math_obj::sin((((( (Float)(i9) ) * theta1) + ((Float)0.0001)) + omega1))));
HXDLIN(  38)						{
HXLINE(  38)							 ::pi_xy::ImageStruct this48 = this47;
HXDLIN(  38)							bool hasHit1 = false;
HXDLIN(  38)							bool hasUndo1 = false;
HXDLIN(  38)							{
HXLINE(  38)								Float bx1 = lastX1;
HXDLIN(  38)								Float by1 = lastY1;
HXDLIN(  38)								Float cx2 = nextX1;
HXDLIN(  38)								Float cy3 = nextY1;
HXDLIN(  38)								bool adjustWinding1 = (((((farX * by1) - (bx1 * cy2)) + ((bx1 * cy3) - (cx2 * by1))) + ((cx2 * cy2) - (farX * cy3))) > 0);
HXDLIN(  38)								if (!(adjustWinding1)) {
HXLINE(  38)									Float bx_1 = bx1;
HXDLIN(  38)									Float by_1 = by1;
HXLINE(  25)									bx1 = cx2;
HXLINE(  26)									by1 = cy3;
HXLINE(  27)									cx2 = bx_1;
HXLINE(  28)									cy3 = by_1;
            								}
HXLINE(  38)								{
HXLINE(  38)									Float s01 = ((cy2 * cx2) - (farX * cy3));
HXDLIN(  38)									Float sx1 = (cy3 - cy2);
HXDLIN(  38)									Float sy1 = (farX - cx2);
HXDLIN(  38)									Float t01 = ((farX * by1) - (cy2 * bx1));
HXDLIN(  38)									Float tx1 = (cy2 - by1);
HXDLIN(  38)									Float ty1 = (bx1 - farX);
HXDLIN(  38)									Float A1 = ((((-(by1) * cx2) + (cy2 * (-(bx1) + cx2))) + (farX * (by1 - cy3))) + (bx1 * cy3));
HXDLIN(  38)									 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  38)									if ((farX > bx1)) {
HXLINE(  38)										if ((farX > cx2)) {
HXLINE(  38)											int min4;
HXDLIN(  38)											if ((bx1 > cx2)) {
HXLINE(  38)												min4 = ::Math_obj::floor(cx2);
            											}
            											else {
HXLINE(  38)												min4 = ::Math_obj::floor(bx1);
            											}
HXDLIN(  38)											int ii_min10 = min4;
HXDLIN(  38)											int ii_max10 = ::Math_obj::ceil(farX);
HXDLIN(  38)											xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            										}
            										else {
HXLINE(  38)											int ii_min11 = ::Math_obj::floor(bx1);
HXDLIN(  38)											int ii_max11 = ::Math_obj::ceil(cx2);
HXDLIN(  38)											xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            										}
            									}
            									else {
HXLINE(  38)										if ((bx1 > cx2)) {
HXLINE(  38)											int min5;
HXDLIN(  38)											if ((farX > cx2)) {
HXLINE(  38)												min5 = ::Math_obj::floor(cx2);
            											}
            											else {
HXLINE(  38)												min5 = ::Math_obj::ceil(farX);
            											}
HXDLIN(  38)											int ii_min12 = min5;
HXDLIN(  38)											int ii_max12 = ::Math_obj::ceil(bx1);
HXDLIN(  38)											xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            										}
            										else {
HXLINE(  38)											int ii_min13 = ::Math_obj::floor(farX);
HXDLIN(  38)											int ii_max13 = ::Math_obj::ceil(cx2);
HXDLIN(  38)											xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            										}
            									}
HXDLIN(  38)									 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  38)									if ((cy2 > by1)) {
HXLINE(  38)										if ((cy2 > cy3)) {
HXLINE(  38)											int min6;
HXDLIN(  38)											if ((by1 > cy3)) {
HXLINE(  38)												min6 = ::Math_obj::floor(cy3);
            											}
            											else {
HXLINE(  38)												min6 = ::Math_obj::floor(by1);
            											}
HXDLIN(  38)											int ii_min14 = min6;
HXDLIN(  38)											int ii_max14 = ::Math_obj::ceil(cy2);
HXDLIN(  38)											yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            										}
            										else {
HXLINE(  38)											int ii_min15 = ::Math_obj::floor(by1);
HXDLIN(  38)											int ii_max15 = ::Math_obj::ceil(cy3);
HXDLIN(  38)											yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            										}
            									}
            									else {
HXLINE(  38)										if ((by1 > cy3)) {
HXLINE(  38)											int min7;
HXDLIN(  38)											if ((cy2 > cy3)) {
HXLINE(  38)												min7 = ::Math_obj::floor(cy3);
            											}
            											else {
HXLINE(  38)												min7 = ::Math_obj::ceil(cy2);
            											}
HXDLIN(  38)											int ii_min16 = min7;
HXDLIN(  38)											int ii_max16 = ::Math_obj::ceil(by1);
HXDLIN(  38)											yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            										}
            										else {
HXLINE(  38)											int ii_min17 = ::Math_obj::floor(cy2);
HXDLIN(  38)											int ii_max17 = ::Math_obj::ceil(cy3);
HXDLIN(  38)											yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            										}
            									}
HXDLIN(  38)									 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  38)									if (hasUndo1) {
HXLINE(  38)										int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  38)										int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  38)										 ::Dynamic imageType1 = null();
HXDLIN(  38)										 ::pi_xy::ImageStruct this49 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  38)										if (::hx::IsNull( imageType1 )) {
HXLINE(  54)											imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  38)										::Dynamic undoImage4;
HXDLIN(  38)										switch((int)(( (int)(imageType1) ))){
            											case (int)0: {
HXLINE(  38)												 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  38)												 ::iterMagic::BytesImg b6 = byt1;
HXDLIN(  38)												{
HXLINE(  38)													b6->width = width1;
HXDLIN(  38)													b6->height = height1;
HXDLIN(  38)													b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  38)													b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN(  38)													{
HXLINE(  38)														int len2 = b6->length;
HXDLIN(  38)														int w1 = 0;
HXDLIN(  38)														{
HXLINE(  38)															int _g24 = 0;
HXDLIN(  38)															int _g25 = b6->height;
HXDLIN(  38)															while((_g24 < _g25)){
HXLINE(  38)																_g24 = (_g24 + 1);
HXDLIN(  38)																int y6 = (_g24 - 1);
HXDLIN(  38)																{
HXLINE(  38)																	int _g26 = 0;
HXDLIN(  38)																	int _g27 = b6->width;
HXDLIN(  38)																	while((_g26 < _g27)){
HXLINE(  38)																		_g26 = (_g26 + 1);
HXDLIN(  38)																		int x6 = (_g26 - 1);
HXDLIN(  38)																		{
HXLINE(  38)																			w1 = (w1 + 1);
HXDLIN(  38)																			b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  38)																		{
HXLINE(  38)																			w1 = (w1 + 1);
HXDLIN(  38)																			b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  38)																		{
HXLINE(  38)																			w1 = (w1 + 1);
HXDLIN(  38)																			b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  38)																		{
HXLINE(  38)																			w1 = (w1 + 1);
HXDLIN(  38)																			b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  38)												undoImage4 = b6;
            											}
            											break;
            											case (int)1: {
HXLINE(  38)												 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  38)												 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN(  38)												{
HXLINE(  38)													a7->width = width1;
HXDLIN(  38)													a7->height = height1;
HXDLIN(  38)													a7->data = ::Array_obj< int >::__new(0);
HXDLIN(  38)													a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  38)													{
HXLINE(  38)														int _g28 = 0;
HXDLIN(  38)														int _g29 = a7->length;
HXDLIN(  38)														while((_g28 < _g29)){
HXLINE(  38)															_g28 = (_g28 + 1);
HXDLIN(  38)															int i10 = (_g28 - 1);
HXDLIN(  38)															a7->data[i10] = 0;
            														}
            													}
            												}
HXDLIN(  38)												undoImage4 = a7;
            											}
            											break;
            											case (int)2: {
HXLINE(  38)												 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  38)												 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN(  38)												{
HXLINE(  38)													b7->width = width1;
HXDLIN(  38)													b7->height = height1;
HXDLIN(  38)													b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  38)													int size1 = (b7->length * 4);
HXDLIN(  38)													b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  38)													{
HXLINE(  38)														int _g30 = 0;
HXDLIN(  38)														int _g31 = b7->length;
HXDLIN(  38)														while((_g30 < _g31)){
HXLINE(  38)															_g30 = (_g30 + 1);
HXDLIN(  38)															int i11 = (_g30 - 1);
HXDLIN(  38)															{
HXLINE(  38)																 ::haxe::io::ArrayBufferViewImpl this50 = b7->data;
HXDLIN(  38)																bool undoImage5;
HXDLIN(  38)																if ((i11 >= 0)) {
HXLINE(  38)																	undoImage5 = (i11 < (this50->byteLength >> 2));
            																}
            																else {
HXLINE(  38)																	undoImage5 = false;
            																}
HXDLIN(  38)																if (undoImage5) {
HXLINE(  38)																	 ::haxe::io::Bytes _this1 = this50->bytes;
HXDLIN(  38)																	int pos1 = ((i11 << 2) + this50->byteOffset);
HXDLIN(  38)																	_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  38)																	_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  38)																	_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  38)																	_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  38)												undoImage4 = b7;
            											}
            											break;
            											case (int)3: {
HXLINE(  38)												 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  38)												 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN(  38)												{
HXLINE(  38)													v3->width = width1;
HXDLIN(  38)													v3->height = height1;
HXDLIN(  38)													v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  38)													v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN(  38)													{
HXLINE(  38)														int _g32 = 0;
HXDLIN(  38)														int _g33 = v3->length;
HXDLIN(  38)														while((_g32 < _g33)){
HXLINE(  38)															_g32 = (_g32 + 1);
HXDLIN(  38)															int i12 = (_g32 - 1);
HXDLIN(  38)															v3->data->__unsafe_set(i12,0);
            														}
            													}
            												}
HXDLIN(  38)												undoImage4 = v3;
            											}
            											break;
            											case (int)4: {
HXLINE(  38)												 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  38)												 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN(  38)												{
HXLINE(  38)													b8->width = width1;
HXDLIN(  38)													b8->height = height1;
HXDLIN(  38)													b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  38)													b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  38)													{
HXLINE(  38)														int len3 = b8->length;
HXDLIN(  38)														 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN(  38)														if (::hx::IsNull( d1->head )) {
HXLINE(  38)															int _g34 = 0;
HXDLIN(  38)															int _g35 = len3;
HXDLIN(  38)															while((_g34 < _g35)){
HXLINE(  38)																_g34 = (_g34 + 1);
HXDLIN(  38)																int i13 = (_g34 - 1);
HXDLIN(  38)																d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            															}
            														}
            														else {
HXLINE(  38)															int _g36 = 0;
HXDLIN(  38)															int _g37 = len3;
HXDLIN(  38)															while((_g36 < _g37)){
HXLINE(  38)																_g36 = (_g36 + 1);
HXDLIN(  38)																int i14 = (_g36 - 1);
HXDLIN(  38)																{
HXLINE(  38)																	 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN(  38)																	 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  38)																	{
HXLINE(  38)																		int _g38 = 0;
HXDLIN(  38)																		int _g39 = i14;
HXDLIN(  38)																		while((_g38 < _g39)){
HXLINE(  38)																			_g38 = (_g38 + 1);
HXDLIN(  38)																			int i15 = (_g38 - 1);
HXLINE( 345)																			prev1 = l1;
HXLINE( 346)																			l1 = l1->next;
            																		}
            																	}
HXLINE(  38)																	if (::hx::IsNull( prev1 )) {
HXLINE(  38)																		b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  38)																		l1 = null();
            																	}
            																	else {
HXLINE(  38)																		prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  38)																		l1 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  38)												undoImage4 = b8;
            											}
            											break;
            										}
HXDLIN(  38)										this49->image = undoImage4;
HXDLIN(  38)										this49->width = width1;
HXDLIN(  38)										this49->height = height1;
HXDLIN(  38)										this49->imageType = ( (int)(imageType1) );
HXDLIN(  38)										undoImage3 = this49;
HXDLIN(  38)										{
HXLINE(  38)											int rectLeft1 = xIter31->start;
HXDLIN(  38)											int rectTop1 = yIter31->start;
HXDLIN(  38)											int rectRight1 = xIter31->max;
HXDLIN(  38)											bool forceClear1 = false;
HXDLIN(  38)											{
HXLINE(  38)												int _g40 = rectTop1;
HXDLIN(  38)												int _g41 = yIter31->max;
HXDLIN(  38)												while((_g40 < _g41)){
HXLINE(  38)													_g40 = (_g40 + 1);
HXDLIN(  38)													int dy2 = (_g40 - 1);
HXDLIN(  38)													{
HXLINE(  38)														int _g42 = rectLeft1;
HXDLIN(  38)														int _g43 = rectRight1;
HXDLIN(  38)														while((_g42 < _g43)){
HXLINE(  38)															_g42 = (_g42 + 1);
HXDLIN(  38)															int dx2 = (_g42 - 1);
HXDLIN(  38)															::Dynamic this51 = this48->image;
HXDLIN(  38)															int index6;
HXDLIN(  38)															if (this48->useVirtualPos) {
HXLINE(  38)																index6 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this48->virtualY) * ( (Float)(this48->width) )) + dx2) - this48->virtualX));
            															}
            															else {
HXLINE(  38)																index6 = ::Std_obj::_hx_int(( (Float)(((dy2 * this48->width) + dx2)) ));
            															}
HXDLIN(  38)															int c5 = ::iterMagic::Iimg_obj::get(this51,index6);
HXDLIN(  38)															int col1;
HXDLIN(  38)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  38)																col1 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            															}
            															else {
HXLINE(  38)																col1 = c5;
            															}
HXDLIN(  38)															bool _hx_tmp11;
HXDLIN(  38)															if (this48->useMask) {
HXLINE(  38)																_hx_tmp11 = ::hx::IsNotNull( this48->mask );
            															}
            															else {
HXLINE(  38)																_hx_tmp11 = false;
            															}
HXDLIN(  38)															if (_hx_tmp11) {
HXLINE(  38)																 ::pi_xy::ImageStruct this52 = this48->mask;
HXDLIN(  38)																::Dynamic this53 = this52->image;
HXDLIN(  38)																int index7;
HXDLIN(  38)																if (this52->useVirtualPos) {
HXLINE(  38)																	index7 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this52->virtualY) * ( (Float)(this52->width) )) + dx2) - this52->virtualX));
            																}
            																else {
HXLINE(  38)																	index7 = ::Std_obj::_hx_int(( (Float)(((dy2 * this52->width) + dx2)) ));
            																}
HXDLIN(  38)																int c6 = ::iterMagic::Iimg_obj::get(this53,index7);
HXDLIN(  38)																int v4;
HXDLIN(  38)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  38)																	v4 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            																}
            																else {
HXLINE(  38)																	v4 = c6;
            																}
HXDLIN(  38)																int maskPixel1 = v4;
HXDLIN(  38)																int this54 = col1;
HXDLIN(  38)																if ((maskPixel1 == 0)) {
HXLINE(  38)																	col1 = this54;
            																}
            																else {
HXLINE(  38)																	Float m01;
HXDLIN(  38)																	int this55 = ((maskPixel1 >> 24) & 255);
HXDLIN(  38)																	if ((this55 == 0)) {
HXLINE(  38)																		m01 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		m01 = (( (Float)(this55) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float m11;
HXDLIN(  38)																	int this56 = ((maskPixel1 >> 16) & 255);
HXDLIN(  38)																	if ((this56 == 0)) {
HXLINE(  38)																		m11 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		m11 = (( (Float)(this56) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float m21;
HXDLIN(  38)																	int this57 = ((maskPixel1 >> 8) & 255);
HXDLIN(  38)																	if ((this57 == 0)) {
HXLINE(  38)																		m21 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		m21 = (( (Float)(this57) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float m31;
HXDLIN(  38)																	int this58 = (maskPixel1 & 255);
HXDLIN(  38)																	if ((this58 == 0)) {
HXLINE(  38)																		m31 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		m31 = (( (Float)(this58) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this54 >> 24) & 255)) )));
HXDLIN(  38)																	int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this54 >> 16) & 255)) )));
HXDLIN(  38)																	int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this54 >> 8) & 255)) )));
HXDLIN(  38)																	int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this54 & 255)) )));
HXDLIN(  38)																	col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  38)															if ((col1 != 0)) {
HXLINE(  38)																int x7 = (dx2 - rectLeft1);
HXDLIN(  38)																int y7 = (dy2 - rectTop1);
HXDLIN(  38)																int c7 = col1;
HXDLIN(  38)																bool _hx_tmp12;
HXDLIN(  38)																if ((((c7 >> 24) & 255) < 254)) {
HXLINE(  38)																	_hx_tmp12 = undoImage3->transparent;
            																}
            																else {
HXLINE(  38)																	_hx_tmp12 = false;
            																}
HXDLIN(  38)																if (_hx_tmp12) {
HXLINE(  38)																	int location3;
HXDLIN(  38)																	if (undoImage3->useVirtualPos) {
HXLINE(  38)																		location3 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x7) - undoImage3->virtualX));
            																	}
            																	else {
HXLINE(  38)																		location3 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage3->width) + x7)) ));
            																	}
HXDLIN(  38)																	int this59 = ::iterMagic::Iimg_obj::get(undoImage3->image,location3);
HXDLIN(  38)																	int this60;
HXDLIN(  38)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  38)																		this60 = ((((((this59 >> 24) & 255) << 24) | ((this59 & 255) << 16)) | (((this59 >> 8) & 255) << 8)) | ((this59 >> 16) & 255));
            																	}
            																	else {
HXLINE(  38)																		this60 = this59;
            																	}
HXDLIN(  38)																	Float a13;
HXDLIN(  38)																	int this61 = ((this60 >> 24) & 255);
HXDLIN(  38)																	if ((this61 == 0)) {
HXLINE(  38)																		a13 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		a13 = (( (Float)(this61) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float r13;
HXDLIN(  38)																	int this62 = ((this60 >> 16) & 255);
HXDLIN(  38)																	if ((this62 == 0)) {
HXLINE(  38)																		r13 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		r13 = (( (Float)(this62) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float g13;
HXDLIN(  38)																	int this63 = ((this60 >> 8) & 255);
HXDLIN(  38)																	if ((this63 == 0)) {
HXLINE(  38)																		g13 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		g13 = (( (Float)(this63) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float b14;
HXDLIN(  38)																	int this64 = (this60 & 255);
HXDLIN(  38)																	if ((this64 == 0)) {
HXLINE(  38)																		b14 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		b14 = (( (Float)(this64) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float a23;
HXDLIN(  38)																	int this65 = ((col1 >> 24) & 255);
HXDLIN(  38)																	if ((this65 == 0)) {
HXLINE(  38)																		a23 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		a23 = (( (Float)(this65) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float r23;
HXDLIN(  38)																	int this66 = ((col1 >> 16) & 255);
HXDLIN(  38)																	if ((this66 == 0)) {
HXLINE(  38)																		r23 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		r23 = (( (Float)(this66) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float g23;
HXDLIN(  38)																	int this67 = ((col1 >> 8) & 255);
HXDLIN(  38)																	if ((this67 == 0)) {
HXLINE(  38)																		g23 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		g23 = (( (Float)(this67) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float b24;
HXDLIN(  38)																	int this68 = (col1 & 255);
HXDLIN(  38)																	if ((this68 == 0)) {
HXLINE(  38)																		b24 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		b24 = (( (Float)(this68) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  38)																	int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  38)																	int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  38)																	int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN(  38)																	int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  38)																	int blended3 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN(  38)																	{
HXLINE(  38)																		int _hx_tmp13;
HXDLIN(  38)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  38)																			_hx_tmp13 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  38)																			_hx_tmp13 = blended3;
            																		}
HXDLIN(  38)																		::iterMagic::Iimg_obj::set(undoImage3->image,location3,_hx_tmp13);
            																	}
            																}
            																else {
HXLINE(  38)																	::Dynamic this69 = undoImage3->image;
HXDLIN(  38)																	int index8;
HXDLIN(  38)																	if (undoImage3->useVirtualPos) {
HXLINE(  38)																		index8 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x7) - undoImage3->virtualX));
            																	}
            																	else {
HXLINE(  38)																		index8 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage3->width) + x7)) ));
            																	}
HXDLIN(  38)																	int _hx_tmp14;
HXDLIN(  38)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  38)																		_hx_tmp14 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            																	}
            																	else {
HXLINE(  38)																		_hx_tmp14 = c7;
            																	}
HXDLIN(  38)																	::iterMagic::Iimg_obj::set(this69,index8,_hx_tmp14);
            																}
            															}
            															else {
HXLINE(  38)																if (forceClear1) {
HXLINE(  38)																	::Dynamic this70 = undoImage3->image;
HXDLIN(  38)																	int x8 = (dx2 - rectLeft1);
HXDLIN(  38)																	int y8 = (dy2 - rectTop1);
HXDLIN(  38)																	int index9;
HXDLIN(  38)																	if (undoImage3->useVirtualPos) {
HXLINE(  38)																		index9 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x8) - undoImage3->virtualX));
            																	}
            																	else {
HXLINE(  38)																		index9 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage3->width) + x8)) ));
            																	}
HXDLIN(  38)																	::iterMagic::Iimg_obj::set(this70,index9,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  38)									bool found1 = false;
HXDLIN(  38)									Float s1 = ((Float)0.);
HXDLIN(  38)									Float t1 = ((Float)0.);
HXDLIN(  38)									Float sxx1 = ((Float)0.);
HXDLIN(  38)									Float txx1 = ((Float)0.);
HXDLIN(  38)									{
HXLINE(  38)										int _g_min2 = xIter31->start;
HXDLIN(  38)										int _g_max2 = xIter31->max;
HXDLIN(  38)										while((_g_min2 < _g_max2)){
HXLINE(  38)											_g_min2 = (_g_min2 + 1);
HXDLIN(  38)											int x9 = (_g_min2 - 1);
HXLINE(  60)											sxx1 = (sx1 * ( (Float)(x9) ));
HXLINE(  61)											txx1 = (tx1 * ( (Float)(x9) ));
HXLINE(  62)											found1 = false;
HXLINE(  38)											{
HXLINE(  38)												int _g_min3 = yIter31->start;
HXDLIN(  38)												int _g_max3 = yIter31->max;
HXDLIN(  38)												while((_g_min3 < _g_max3)){
HXLINE(  38)													_g_min3 = (_g_min3 + 1);
HXDLIN(  38)													int y9 = (_g_min3 - 1);
HXLINE(  64)													s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y9) )));
HXLINE(  65)													t1 = ((t01 + txx1) + (ty1 * ( (Float)(y9) )));
HXLINE(  38)													bool _hx_tmp15;
HXDLIN(  38)													if (!((s1 <= 0))) {
HXLINE(  38)														_hx_tmp15 = (t1 <= 0);
            													}
            													else {
HXLINE(  38)														_hx_tmp15 = true;
            													}
HXDLIN(  38)													if (_hx_tmp15) {
HXLINE(  38)														if (found1) {
HXLINE(  38)															goto _hx_goto_26;
            														}
            													}
            													else {
HXLINE(  38)														if (((s1 + t1) < A1)) {
HXLINE(  38)															{
HXLINE(  38)																int c8 = color;
HXDLIN(  38)																bool _hx_tmp16;
HXDLIN(  38)																if ((((c8 >> 24) & 255) < 254)) {
HXLINE(  38)																	_hx_tmp16 = this48->transparent;
            																}
            																else {
HXLINE(  38)																	_hx_tmp16 = false;
            																}
HXDLIN(  38)																if (_hx_tmp16) {
HXLINE(  38)																	int location4;
HXDLIN(  38)																	if (this48->useVirtualPos) {
HXLINE(  38)																		location4 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - this48->virtualY) * ( (Float)(this48->width) )) + x9) - this48->virtualX));
            																	}
            																	else {
HXLINE(  38)																		location4 = ::Std_obj::_hx_int(( (Float)(((y9 * this48->width) + x9)) ));
            																	}
HXDLIN(  38)																	int this71 = ::iterMagic::Iimg_obj::get(this48->image,location4);
HXDLIN(  38)																	int this72;
HXDLIN(  38)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  38)																		this72 = ((((((this71 >> 24) & 255) << 24) | ((this71 & 255) << 16)) | (((this71 >> 8) & 255) << 8)) | ((this71 >> 16) & 255));
            																	}
            																	else {
HXLINE(  38)																		this72 = this71;
            																	}
HXDLIN(  38)																	Float a14;
HXDLIN(  38)																	int this73 = ((this72 >> 24) & 255);
HXDLIN(  38)																	if ((this73 == 0)) {
HXLINE(  38)																		a14 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		a14 = (( (Float)(this73) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float r14;
HXDLIN(  38)																	int this74 = ((this72 >> 16) & 255);
HXDLIN(  38)																	if ((this74 == 0)) {
HXLINE(  38)																		r14 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		r14 = (( (Float)(this74) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float g14;
HXDLIN(  38)																	int this75 = ((this72 >> 8) & 255);
HXDLIN(  38)																	if ((this75 == 0)) {
HXLINE(  38)																		g14 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		g14 = (( (Float)(this75) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float b15;
HXDLIN(  38)																	int this76 = (this72 & 255);
HXDLIN(  38)																	if ((this76 == 0)) {
HXLINE(  38)																		b15 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		b15 = (( (Float)(this76) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float a24;
HXDLIN(  38)																	int this77 = ((color >> 24) & 255);
HXDLIN(  38)																	if ((this77 == 0)) {
HXLINE(  38)																		a24 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		a24 = (( (Float)(this77) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float r24;
HXDLIN(  38)																	int this78 = ((color >> 16) & 255);
HXDLIN(  38)																	if ((this78 == 0)) {
HXLINE(  38)																		r24 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		r24 = (( (Float)(this78) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float g24;
HXDLIN(  38)																	int this79 = ((color >> 8) & 255);
HXDLIN(  38)																	if ((this79 == 0)) {
HXLINE(  38)																		g24 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		g24 = (( (Float)(this79) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float b25;
HXDLIN(  38)																	int this80 = (color & 255);
HXDLIN(  38)																	if ((this80 == 0)) {
HXLINE(  38)																		b25 = ((Float)0.);
            																	}
            																	else {
HXLINE(  38)																		b25 = (( (Float)(this80) ) / ( (Float)(255) ));
            																	}
HXDLIN(  38)																	Float a34 = (a14 * (( (Float)(1) ) - a24));
HXDLIN(  38)																	int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  38)																	int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  38)																	int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a34) + (b25 * a24))));
HXDLIN(  38)																	int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  38)																	int blended4 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN(  38)																	{
HXLINE(  38)																		int _hx_tmp17;
HXDLIN(  38)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  38)																			_hx_tmp17 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            																		}
            																		else {
HXLINE(  38)																			_hx_tmp17 = blended4;
            																		}
HXDLIN(  38)																		::iterMagic::Iimg_obj::set(this48->image,location4,_hx_tmp17);
            																	}
            																}
            																else {
HXLINE(  38)																	::Dynamic this81 = this48->image;
HXDLIN(  38)																	int index10;
HXDLIN(  38)																	if (this48->useVirtualPos) {
HXLINE(  38)																		index10 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - this48->virtualY) * ( (Float)(this48->width) )) + x9) - this48->virtualX));
            																	}
            																	else {
HXLINE(  38)																		index10 = ::Std_obj::_hx_int(( (Float)(((y9 * this48->width) + x9)) ));
            																	}
HXDLIN(  38)																	int _hx_tmp18;
HXDLIN(  38)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  38)																		_hx_tmp18 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            																	}
            																	else {
HXLINE(  38)																		_hx_tmp18 = c8;
            																	}
HXDLIN(  38)																	::iterMagic::Iimg_obj::set(this81,index10,_hx_tmp18);
            																}
            															}
HXLINE(  73)															found1 = true;
            														}
            														else {
HXLINE(  38)															if (found1) {
HXLINE(  38)																goto _hx_goto_26;
            															}
            														}
            													}
            												}
            												_hx_goto_26:;
            											}
            										}
            									}
HXDLIN(  38)									if ((hasHit1 == true)) {
HXLINE(  38)										 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX,cy2,bx1,by1,cx2,cy3,true);
HXDLIN(  38)										if (hasUndo1) {
HXLINE(  38)											v5->undoImage = undoImage3;
HXDLIN(  38)											v5->undoX = xIter31->start;
HXDLIN(  38)											v5->undoY = yIter31->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  46)						lastX1 = nextX1;
HXLINE(  47)						lastY1 = nextY1;
            					}
            				}
            			}
            		}
HXLINE(  40)		{
HXLINE(  40)			int r_x1 = ::Std_obj::_hx_int(x);
HXDLIN(  40)			int r_y1 = ::Std_obj::_hx_int((y + dy));
HXDLIN(  40)			int r_w1 = ::Std_obj::_hx_int(wid);
HXDLIN(  40)			int r_h1 = ::Std_obj::_hx_int(( (Float)(tall) ));
HXDLIN(  40)			int xmax1 = ((r_x1 + r_w1) + 1);
HXDLIN(  40)			int ymax1 = ((r_y1 + r_h1) + 1);
HXDLIN(  40)			int ii_min18 = r_x1;
HXDLIN(  40)			int ii_max18 = xmax1;
HXDLIN(  40)			int xRange__start1 = ii_min18;
HXDLIN(  40)			int xRange__max1 = ii_max18;
HXDLIN(  40)			int ii_min19 = r_y1;
HXDLIN(  40)			int ii_max19 = ymax1;
HXDLIN(  40)			int yRange__start1 = ii_min19;
HXDLIN(  40)			int yRange__max1 = ii_max19;
HXDLIN(  40)			int range_x1 = xRange__start1;
HXDLIN(  40)			int range_y1 = (yRange__start1 - 1);
HXDLIN(  40)			int range_xReset1 = range_x1;
HXDLIN(  40)			int range_yReset1 = range_y1;
HXDLIN(  40)			int range_xMax1 = (xRange__max1 - 2);
HXDLIN(  40)			int range_yMax1 = (yRange__max1 - 2);
HXDLIN(  40)			int _this_min1 = 0;
HXDLIN(  40)			int _this_max1 = ::Std_obj::_hx_int(( (Float)(((xRange__max1 - xRange__start1) * (yRange__max1 - yRange__start1))) ));
HXDLIN(  40)			while((_this_min1 < _this_max1)){
HXLINE(  40)				_this_min1 = (_this_min1 + 1);
HXDLIN(  40)				int i16 = (_this_min1 - 1);
HXDLIN(  40)				if ((range_y1 > range_yMax1)) {
HXLINE(  40)					range_y1 = range_yReset1;
HXDLIN(  40)					range_x1 = (range_x1 + 1);
            				}
HXDLIN(  40)				range_y1 = (range_y1 + 1);
HXDLIN(  40)				int i17 = i16;
HXDLIN(  40)				{
HXLINE(  40)					int x10 = range_x1;
HXDLIN(  40)					int y10 = range_y1;
HXDLIN(  40)					int c9 = color;
HXDLIN(  40)					bool _hx_tmp19;
HXDLIN(  40)					if ((((c9 >> 24) & 255) < 254)) {
HXLINE(  40)						_hx_tmp19 = pixelimage->transparent;
            					}
            					else {
HXLINE(  40)						_hx_tmp19 = false;
            					}
HXDLIN(  40)					if (_hx_tmp19) {
HXLINE(  40)						int location5;
HXDLIN(  40)						if (pixelimage->useVirtualPos) {
HXLINE(  40)							location5 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - pixelimage->virtualY) * ( (Float)(pixelimage->width) )) + x10) - pixelimage->virtualX));
            						}
            						else {
HXLINE(  40)							location5 = ::Std_obj::_hx_int(( (Float)(((y10 * pixelimage->width) + x10)) ));
            						}
HXDLIN(  40)						int this82 = ::iterMagic::Iimg_obj::get(pixelimage->image,location5);
HXDLIN(  40)						int this83;
HXDLIN(  40)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)							this83 = ((((((this82 >> 24) & 255) << 24) | ((this82 & 255) << 16)) | (((this82 >> 8) & 255) << 8)) | ((this82 >> 16) & 255));
            						}
            						else {
HXLINE(  40)							this83 = this82;
            						}
HXDLIN(  40)						Float a15;
HXDLIN(  40)						int this84 = ((this83 >> 24) & 255);
HXDLIN(  40)						if ((this84 == 0)) {
HXLINE(  40)							a15 = ((Float)0.);
            						}
            						else {
HXLINE(  40)							a15 = (( (Float)(this84) ) / ( (Float)(255) ));
            						}
HXDLIN(  40)						Float r15;
HXDLIN(  40)						int this85 = ((this83 >> 16) & 255);
HXDLIN(  40)						if ((this85 == 0)) {
HXLINE(  40)							r15 = ((Float)0.);
            						}
            						else {
HXLINE(  40)							r15 = (( (Float)(this85) ) / ( (Float)(255) ));
            						}
HXDLIN(  40)						Float g15;
HXDLIN(  40)						int this86 = ((this83 >> 8) & 255);
HXDLIN(  40)						if ((this86 == 0)) {
HXLINE(  40)							g15 = ((Float)0.);
            						}
            						else {
HXLINE(  40)							g15 = (( (Float)(this86) ) / ( (Float)(255) ));
            						}
HXDLIN(  40)						Float b16;
HXDLIN(  40)						int this87 = (this83 & 255);
HXDLIN(  40)						if ((this87 == 0)) {
HXLINE(  40)							b16 = ((Float)0.);
            						}
            						else {
HXLINE(  40)							b16 = (( (Float)(this87) ) / ( (Float)(255) ));
            						}
HXDLIN(  40)						Float a25;
HXDLIN(  40)						int this88 = ((color >> 24) & 255);
HXDLIN(  40)						if ((this88 == 0)) {
HXLINE(  40)							a25 = ((Float)0.);
            						}
            						else {
HXLINE(  40)							a25 = (( (Float)(this88) ) / ( (Float)(255) ));
            						}
HXDLIN(  40)						Float r25;
HXDLIN(  40)						int this89 = ((color >> 16) & 255);
HXDLIN(  40)						if ((this89 == 0)) {
HXLINE(  40)							r25 = ((Float)0.);
            						}
            						else {
HXLINE(  40)							r25 = (( (Float)(this89) ) / ( (Float)(255) ));
            						}
HXDLIN(  40)						Float g25;
HXDLIN(  40)						int this90 = ((color >> 8) & 255);
HXDLIN(  40)						if ((this90 == 0)) {
HXLINE(  40)							g25 = ((Float)0.);
            						}
            						else {
HXLINE(  40)							g25 = (( (Float)(this90) ) / ( (Float)(255) ));
            						}
HXDLIN(  40)						Float b26;
HXDLIN(  40)						int this91 = (color & 255);
HXDLIN(  40)						if ((this91 == 0)) {
HXLINE(  40)							b26 = ((Float)0.);
            						}
            						else {
HXLINE(  40)							b26 = (( (Float)(this91) ) / ( (Float)(255) ));
            						}
HXDLIN(  40)						Float a35 = (a15 * (( (Float)(1) ) - a25));
HXDLIN(  40)						int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  40)						int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  40)						int b17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b16 * a35) + (b26 * a25))));
HXDLIN(  40)						int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  40)						int blended5 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b17);
HXDLIN(  40)						{
HXLINE(  40)							int _hx_tmp20;
HXDLIN(  40)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)								_hx_tmp20 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            							}
            							else {
HXLINE(  40)								_hx_tmp20 = blended5;
            							}
HXDLIN(  40)							::iterMagic::Iimg_obj::set(pixelimage->image,location5,_hx_tmp20);
            						}
            					}
            					else {
HXLINE(  40)						::Dynamic this92 = pixelimage->image;
HXDLIN(  40)						int index11;
HXDLIN(  40)						if (pixelimage->useVirtualPos) {
HXLINE(  40)							index11 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - pixelimage->virtualY) * ( (Float)(pixelimage->width) )) + x10) - pixelimage->virtualX));
            						}
            						else {
HXLINE(  40)							index11 = ::Std_obj::_hx_int(( (Float)(((y10 * pixelimage->width) + x10)) ));
            						}
HXDLIN(  40)						int _hx_tmp21;
HXDLIN(  40)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)							_hx_tmp21 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            						}
            						else {
HXLINE(  40)							_hx_tmp21 = c9;
            						}
HXDLIN(  40)						::iterMagic::Iimg_obj::set(this92,index11,_hx_tmp21);
            					}
            				}
            			}
            		}
HXLINE(  42)		{
HXLINE(  42)			 ::pi_xy::ImageStruct this93 = pixelimage;
HXDLIN(  42)			Float cx3 = (x + dx);
HXDLIN(  42)			Float rx1 = ( (Float)(dx) );
HXDLIN(  42)			{
HXLINE(  42)				 ::Dynamic targetError2 = ((Float)1.05);
HXDLIN(  42)				if (::hx::IsNull( targetError2 )) {
HXLINE( 113)					targetError2 = ((Float)1.05);
            				}
HXLINE(  42)				Float rSmall2;
HXDLIN(  42)				if ((rx1 > bottomRadius)) {
HXLINE(  42)					rSmall2 = bottomRadius;
            				}
            				else {
HXLINE(  42)					rSmall2 = rx1;
            				}
HXDLIN(  42)				 ::Dynamic targetE2 = ( (Float)(targetError2) );
HXDLIN(  42)				if (::hx::IsNull( targetE2 )) {
HXLINE(  20)					targetE2 = ((Float)1.05);
            				}
HXLINE(  42)				int result2 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE2) ) / rSmall2)))));
HXDLIN(  42)				int noSides2;
HXDLIN(  42)				if ((result2 < 12)) {
HXLINE(  42)					noSides2 = 12;
            				}
            				else {
HXLINE(  42)					if ((result2 > 500)) {
HXLINE(  42)						noSides2 = 500;
            					}
            					else {
HXLINE(  42)						noSides2 = result2;
            					}
            				}
HXDLIN(  42)				int sides2 = (::Math_obj::ceil((( (Float)(noSides2) ) / ( (Float)(4) ))) * 4);
HXDLIN(  42)				Float theta2 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides2) ));
HXDLIN(  42)				Float omega2 = (::Math_obj::PI / ( (Float)(2) ));
HXDLIN(  42)				int quarter2 = ::Std_obj::_hx_int((( (Float)(sides2) ) / ( (Float)(4) )));
HXDLIN(  42)				Float lastX2 = ((Float)0.);
HXDLIN(  42)				Float lastY2 = ((Float)0.);
HXDLIN(  42)				{
HXLINE(  26)					lastX2 = (cx3 + (rx1 * ::Math_obj::cos(((( (Float)(sides2) ) * theta2) + omega2))));
HXLINE(  27)					lastY2 = (lowerY + (bottomRadius * ::Math_obj::sin(((( (Float)(sides2) ) * theta2) + omega2))));
            				}
HXLINE(  42)				{
HXLINE(  42)					int _g44 = 0;
HXDLIN(  42)					int _g45 = (quarter2 + 1);
HXDLIN(  42)					while((_g44 < _g45)){
HXLINE(  42)						_g44 = (_g44 + 1);
HXDLIN(  42)						int i18 = (_g44 - 1);
HXDLIN(  42)						Float nextX2 = (cx3 + (rx1 * ::Math_obj::cos((((( (Float)(i18) ) * theta2) + ((Float)0.0001)) + omega2))));
HXDLIN(  42)						Float nextY2 = (lowerY + (bottomRadius * ::Math_obj::sin((((( (Float)(i18) ) * theta2) + ((Float)0.0001)) + omega2))));
HXDLIN(  42)						{
HXLINE(  42)							 ::pi_xy::ImageStruct this94 = this93;
HXDLIN(  42)							bool hasHit2 = false;
HXDLIN(  42)							bool hasUndo2 = false;
HXDLIN(  42)							{
HXLINE(  42)								Float bx2 = lastX2;
HXDLIN(  42)								Float by2 = lastY2;
HXDLIN(  42)								Float cx4 = nextX2;
HXDLIN(  42)								Float cy4 = nextY2;
HXDLIN(  42)								bool adjustWinding2 = (((((cx3 * by2) - (bx2 * lowerY)) + ((bx2 * cy4) - (cx4 * by2))) + ((cx4 * lowerY) - (cx3 * cy4))) > 0);
HXDLIN(  42)								if (!(adjustWinding2)) {
HXLINE(  42)									Float bx_2 = bx2;
HXDLIN(  42)									Float by_2 = by2;
HXLINE(  25)									bx2 = cx4;
HXLINE(  26)									by2 = cy4;
HXLINE(  27)									cx4 = bx_2;
HXLINE(  28)									cy4 = by_2;
            								}
HXLINE(  42)								{
HXLINE(  42)									Float s02 = ((lowerY * cx4) - (cx3 * cy4));
HXDLIN(  42)									Float sx2 = (cy4 - lowerY);
HXDLIN(  42)									Float sy2 = (cx3 - cx4);
HXDLIN(  42)									Float t02 = ((cx3 * by2) - (lowerY * bx2));
HXDLIN(  42)									Float tx2 = (lowerY - by2);
HXDLIN(  42)									Float ty2 = (bx2 - cx3);
HXDLIN(  42)									Float A2 = ((((-(by2) * cx4) + (lowerY * (-(bx2) + cx4))) + (cx3 * (by2 - cy4))) + (bx2 * cy4));
HXDLIN(  42)									 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  42)									if ((cx3 > bx2)) {
HXLINE(  42)										if ((cx3 > cx4)) {
HXLINE(  42)											int min8;
HXDLIN(  42)											if ((bx2 > cx4)) {
HXLINE(  42)												min8 = ::Math_obj::floor(cx4);
            											}
            											else {
HXLINE(  42)												min8 = ::Math_obj::floor(bx2);
            											}
HXDLIN(  42)											int ii_min20 = min8;
HXDLIN(  42)											int ii_max20 = ::Math_obj::ceil(cx3);
HXDLIN(  42)											xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            										}
            										else {
HXLINE(  42)											int ii_min21 = ::Math_obj::floor(bx2);
HXDLIN(  42)											int ii_max21 = ::Math_obj::ceil(cx4);
HXDLIN(  42)											xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            										}
            									}
            									else {
HXLINE(  42)										if ((bx2 > cx4)) {
HXLINE(  42)											int min9;
HXDLIN(  42)											if ((cx3 > cx4)) {
HXLINE(  42)												min9 = ::Math_obj::floor(cx4);
            											}
            											else {
HXLINE(  42)												min9 = ::Math_obj::ceil(cx3);
            											}
HXDLIN(  42)											int ii_min22 = min9;
HXDLIN(  42)											int ii_max22 = ::Math_obj::ceil(bx2);
HXDLIN(  42)											xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            										}
            										else {
HXLINE(  42)											int ii_min23 = ::Math_obj::floor(cx3);
HXDLIN(  42)											int ii_max23 = ::Math_obj::ceil(cx4);
HXDLIN(  42)											xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            										}
            									}
HXDLIN(  42)									 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  42)									if ((lowerY > by2)) {
HXLINE(  42)										if ((lowerY > cy4)) {
HXLINE(  42)											int min10;
HXDLIN(  42)											if ((by2 > cy4)) {
HXLINE(  42)												min10 = ::Math_obj::floor(cy4);
            											}
            											else {
HXLINE(  42)												min10 = ::Math_obj::floor(by2);
            											}
HXDLIN(  42)											int ii_min24 = min10;
HXDLIN(  42)											int ii_max24 = ::Math_obj::ceil(lowerY);
HXDLIN(  42)											yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            										}
            										else {
HXLINE(  42)											int ii_min25 = ::Math_obj::floor(by2);
HXDLIN(  42)											int ii_max25 = ::Math_obj::ceil(cy4);
HXDLIN(  42)											yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            										}
            									}
            									else {
HXLINE(  42)										if ((by2 > cy4)) {
HXLINE(  42)											int min11;
HXDLIN(  42)											if ((lowerY > cy4)) {
HXLINE(  42)												min11 = ::Math_obj::floor(cy4);
            											}
            											else {
HXLINE(  42)												min11 = ::Math_obj::ceil(lowerY);
            											}
HXDLIN(  42)											int ii_min26 = min11;
HXDLIN(  42)											int ii_max26 = ::Math_obj::ceil(by2);
HXDLIN(  42)											yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            										}
            										else {
HXLINE(  42)											int ii_min27 = ::Math_obj::floor(lowerY);
HXDLIN(  42)											int ii_max27 = ::Math_obj::ceil(cy4);
HXDLIN(  42)											yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            										}
            									}
HXDLIN(  42)									 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  42)									if (hasUndo2) {
HXLINE(  42)										int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  42)										int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  42)										 ::Dynamic imageType2 = null();
HXDLIN(  42)										 ::pi_xy::ImageStruct this95 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  42)										if (::hx::IsNull( imageType2 )) {
HXLINE(  54)											imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  42)										::Dynamic undoImage7;
HXDLIN(  42)										switch((int)(( (int)(imageType2) ))){
            											case (int)0: {
HXLINE(  42)												 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  42)												 ::iterMagic::BytesImg b18 = byt2;
HXDLIN(  42)												{
HXLINE(  42)													b18->width = width2;
HXDLIN(  42)													b18->height = height2;
HXDLIN(  42)													b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  42)													b18->data = ::haxe::io::Bytes_obj::alloc((b18->length * 4));
HXDLIN(  42)													{
HXLINE(  42)														int len4 = b18->length;
HXDLIN(  42)														int w2 = 0;
HXDLIN(  42)														{
HXLINE(  42)															int _g46 = 0;
HXDLIN(  42)															int _g47 = b18->height;
HXDLIN(  42)															while((_g46 < _g47)){
HXLINE(  42)																_g46 = (_g46 + 1);
HXDLIN(  42)																int y11 = (_g46 - 1);
HXDLIN(  42)																{
HXLINE(  42)																	int _g48 = 0;
HXDLIN(  42)																	int _g49 = b18->width;
HXDLIN(  42)																	while((_g48 < _g49)){
HXLINE(  42)																		_g48 = (_g48 + 1);
HXDLIN(  42)																		int x11 = (_g48 - 1);
HXDLIN(  42)																		{
HXLINE(  42)																			w2 = (w2 + 1);
HXDLIN(  42)																			b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  42)																		{
HXLINE(  42)																			w2 = (w2 + 1);
HXDLIN(  42)																			b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  42)																		{
HXLINE(  42)																			w2 = (w2 + 1);
HXDLIN(  42)																			b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  42)																		{
HXLINE(  42)																			w2 = (w2 + 1);
HXDLIN(  42)																			b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  42)												undoImage7 = b18;
            											}
            											break;
            											case (int)1: {
HXLINE(  42)												 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  42)												 ::iterMagic::ArrIntImg a16 = arrI2;
HXDLIN(  42)												{
HXLINE(  42)													a16->width = width2;
HXDLIN(  42)													a16->height = height2;
HXDLIN(  42)													a16->data = ::Array_obj< int >::__new(0);
HXDLIN(  42)													a16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  42)													{
HXLINE(  42)														int _g50 = 0;
HXDLIN(  42)														int _g51 = a16->length;
HXDLIN(  42)														while((_g50 < _g51)){
HXLINE(  42)															_g50 = (_g50 + 1);
HXDLIN(  42)															int i19 = (_g50 - 1);
HXDLIN(  42)															a16->data[i19] = 0;
            														}
            													}
            												}
HXDLIN(  42)												undoImage7 = a16;
            											}
            											break;
            											case (int)2: {
HXLINE(  42)												 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  42)												 ::iterMagic::U32ArrImg b19 = u32a2;
HXDLIN(  42)												{
HXLINE(  42)													b19->width = width2;
HXDLIN(  42)													b19->height = height2;
HXDLIN(  42)													b19->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  42)													int size2 = (b19->length * 4);
HXDLIN(  42)													b19->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  42)													{
HXLINE(  42)														int _g52 = 0;
HXDLIN(  42)														int _g53 = b19->length;
HXDLIN(  42)														while((_g52 < _g53)){
HXLINE(  42)															_g52 = (_g52 + 1);
HXDLIN(  42)															int i20 = (_g52 - 1);
HXDLIN(  42)															{
HXLINE(  42)																 ::haxe::io::ArrayBufferViewImpl this96 = b19->data;
HXDLIN(  42)																bool undoImage8;
HXDLIN(  42)																if ((i20 >= 0)) {
HXLINE(  42)																	undoImage8 = (i20 < (this96->byteLength >> 2));
            																}
            																else {
HXLINE(  42)																	undoImage8 = false;
            																}
HXDLIN(  42)																if (undoImage8) {
HXLINE(  42)																	 ::haxe::io::Bytes _this2 = this96->bytes;
HXDLIN(  42)																	int pos2 = ((i20 << 2) + this96->byteOffset);
HXDLIN(  42)																	_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  42)																	_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  42)																	_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  42)																	_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  42)												undoImage7 = b19;
            											}
            											break;
            											case (int)3: {
HXLINE(  42)												 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  42)												 ::iterMagic::VecIntImg v6 = vec2;
HXDLIN(  42)												{
HXLINE(  42)													v6->width = width2;
HXDLIN(  42)													v6->height = height2;
HXDLIN(  42)													v6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  42)													v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN(  42)													{
HXLINE(  42)														int _g54 = 0;
HXDLIN(  42)														int _g55 = v6->length;
HXDLIN(  42)														while((_g54 < _g55)){
HXLINE(  42)															_g54 = (_g54 + 1);
HXDLIN(  42)															int i21 = (_g54 - 1);
HXDLIN(  42)															v6->data->__unsafe_set(i21,0);
            														}
            													}
            												}
HXDLIN(  42)												undoImage7 = v6;
            											}
            											break;
            											case (int)4: {
HXLINE(  42)												 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  42)												 ::iterMagic::StackIntImg b20 = sInt2;
HXDLIN(  42)												{
HXLINE(  42)													b20->width = width2;
HXDLIN(  42)													b20->height = height2;
HXDLIN(  42)													b20->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  42)													b20->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  42)													{
HXLINE(  42)														int len5 = b20->length;
HXDLIN(  42)														 ::haxe::ds::GenericStack_Int d2 = b20->data;
HXDLIN(  42)														if (::hx::IsNull( d2->head )) {
HXLINE(  42)															int _g56 = 0;
HXDLIN(  42)															int _g57 = len5;
HXDLIN(  42)															while((_g56 < _g57)){
HXLINE(  42)																_g56 = (_g56 + 1);
HXDLIN(  42)																int i22 = (_g56 - 1);
HXDLIN(  42)																d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            															}
            														}
            														else {
HXLINE(  42)															int _g58 = 0;
HXDLIN(  42)															int _g59 = len5;
HXDLIN(  42)															while((_g58 < _g59)){
HXLINE(  42)																_g58 = (_g58 + 1);
HXDLIN(  42)																int i23 = (_g58 - 1);
HXDLIN(  42)																{
HXLINE(  42)																	 ::haxe::ds::GenericCell_Int l2 = b20->data->head;
HXDLIN(  42)																	 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  42)																	{
HXLINE(  42)																		int _g60 = 0;
HXDLIN(  42)																		int _g61 = i23;
HXDLIN(  42)																		while((_g60 < _g61)){
HXLINE(  42)																			_g60 = (_g60 + 1);
HXDLIN(  42)																			int i24 = (_g60 - 1);
HXLINE( 345)																			prev2 = l2;
HXLINE( 346)																			l2 = l2->next;
            																		}
            																	}
HXLINE(  42)																	if (::hx::IsNull( prev2 )) {
HXLINE(  42)																		b20->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  42)																		l2 = null();
            																	}
            																	else {
HXLINE(  42)																		prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  42)																		l2 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  42)												undoImage7 = b20;
            											}
            											break;
            										}
HXDLIN(  42)										this95->image = undoImage7;
HXDLIN(  42)										this95->width = width2;
HXDLIN(  42)										this95->height = height2;
HXDLIN(  42)										this95->imageType = ( (int)(imageType2) );
HXDLIN(  42)										undoImage6 = this95;
HXDLIN(  42)										{
HXLINE(  42)											int rectLeft2 = xIter32->start;
HXDLIN(  42)											int rectTop2 = yIter32->start;
HXDLIN(  42)											int rectRight2 = xIter32->max;
HXDLIN(  42)											bool forceClear2 = false;
HXDLIN(  42)											{
HXLINE(  42)												int _g62 = rectTop2;
HXDLIN(  42)												int _g63 = yIter32->max;
HXDLIN(  42)												while((_g62 < _g63)){
HXLINE(  42)													_g62 = (_g62 + 1);
HXDLIN(  42)													int dy3 = (_g62 - 1);
HXDLIN(  42)													{
HXLINE(  42)														int _g64 = rectLeft2;
HXDLIN(  42)														int _g65 = rectRight2;
HXDLIN(  42)														while((_g64 < _g65)){
HXLINE(  42)															_g64 = (_g64 + 1);
HXDLIN(  42)															int dx3 = (_g64 - 1);
HXDLIN(  42)															::Dynamic this97 = this94->image;
HXDLIN(  42)															int index12;
HXDLIN(  42)															if (this94->useVirtualPos) {
HXLINE(  42)																index12 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this94->virtualY) * ( (Float)(this94->width) )) + dx3) - this94->virtualX));
            															}
            															else {
HXLINE(  42)																index12 = ::Std_obj::_hx_int(( (Float)(((dy3 * this94->width) + dx3)) ));
            															}
HXDLIN(  42)															int c10 = ::iterMagic::Iimg_obj::get(this97,index12);
HXDLIN(  42)															int col2;
HXDLIN(  42)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)																col2 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            															}
            															else {
HXLINE(  42)																col2 = c10;
            															}
HXDLIN(  42)															bool _hx_tmp22;
HXDLIN(  42)															if (this94->useMask) {
HXLINE(  42)																_hx_tmp22 = ::hx::IsNotNull( this94->mask );
            															}
            															else {
HXLINE(  42)																_hx_tmp22 = false;
            															}
HXDLIN(  42)															if (_hx_tmp22) {
HXLINE(  42)																 ::pi_xy::ImageStruct this98 = this94->mask;
HXDLIN(  42)																::Dynamic this99 = this98->image;
HXDLIN(  42)																int index13;
HXDLIN(  42)																if (this98->useVirtualPos) {
HXLINE(  42)																	index13 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this98->virtualY) * ( (Float)(this98->width) )) + dx3) - this98->virtualX));
            																}
            																else {
HXLINE(  42)																	index13 = ::Std_obj::_hx_int(( (Float)(((dy3 * this98->width) + dx3)) ));
            																}
HXDLIN(  42)																int c11 = ::iterMagic::Iimg_obj::get(this99,index13);
HXDLIN(  42)																int v7;
HXDLIN(  42)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)																	v7 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            																}
            																else {
HXLINE(  42)																	v7 = c11;
            																}
HXDLIN(  42)																int maskPixel2 = v7;
HXDLIN(  42)																int this100 = col2;
HXDLIN(  42)																if ((maskPixel2 == 0)) {
HXLINE(  42)																	col2 = this100;
            																}
            																else {
HXLINE(  42)																	Float m02;
HXDLIN(  42)																	int this101 = ((maskPixel2 >> 24) & 255);
HXDLIN(  42)																	if ((this101 == 0)) {
HXLINE(  42)																		m02 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		m02 = (( (Float)(this101) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float m12;
HXDLIN(  42)																	int this102 = ((maskPixel2 >> 16) & 255);
HXDLIN(  42)																	if ((this102 == 0)) {
HXLINE(  42)																		m12 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		m12 = (( (Float)(this102) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float m22;
HXDLIN(  42)																	int this103 = ((maskPixel2 >> 8) & 255);
HXDLIN(  42)																	if ((this103 == 0)) {
HXLINE(  42)																		m22 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		m22 = (( (Float)(this103) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float m32;
HXDLIN(  42)																	int this104 = (maskPixel2 & 255);
HXDLIN(  42)																	if ((this104 == 0)) {
HXLINE(  42)																		m32 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		m32 = (( (Float)(this104) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this100 >> 24) & 255)) )));
HXDLIN(  42)																	int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this100 >> 16) & 255)) )));
HXDLIN(  42)																	int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this100 >> 8) & 255)) )));
HXDLIN(  42)																	int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this100 & 255)) )));
HXDLIN(  42)																	col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  42)															if ((col2 != 0)) {
HXLINE(  42)																int x12 = (dx3 - rectLeft2);
HXDLIN(  42)																int y12 = (dy3 - rectTop2);
HXDLIN(  42)																int c12 = col2;
HXDLIN(  42)																bool _hx_tmp23;
HXDLIN(  42)																if ((((c12 >> 24) & 255) < 254)) {
HXLINE(  42)																	_hx_tmp23 = undoImage6->transparent;
            																}
            																else {
HXLINE(  42)																	_hx_tmp23 = false;
            																}
HXDLIN(  42)																if (_hx_tmp23) {
HXLINE(  42)																	int location6;
HXDLIN(  42)																	if (undoImage6->useVirtualPos) {
HXLINE(  42)																		location6 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x12) - undoImage6->virtualX));
            																	}
            																	else {
HXLINE(  42)																		location6 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage6->width) + x12)) ));
            																	}
HXDLIN(  42)																	int this105 = ::iterMagic::Iimg_obj::get(undoImage6->image,location6);
HXDLIN(  42)																	int this106;
HXDLIN(  42)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)																		this106 = ((((((this105 >> 24) & 255) << 24) | ((this105 & 255) << 16)) | (((this105 >> 8) & 255) << 8)) | ((this105 >> 16) & 255));
            																	}
            																	else {
HXLINE(  42)																		this106 = this105;
            																	}
HXDLIN(  42)																	Float a17;
HXDLIN(  42)																	int this107 = ((this106 >> 24) & 255);
HXDLIN(  42)																	if ((this107 == 0)) {
HXLINE(  42)																		a17 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		a17 = (( (Float)(this107) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float r16;
HXDLIN(  42)																	int this108 = ((this106 >> 16) & 255);
HXDLIN(  42)																	if ((this108 == 0)) {
HXLINE(  42)																		r16 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		r16 = (( (Float)(this108) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float g16;
HXDLIN(  42)																	int this109 = ((this106 >> 8) & 255);
HXDLIN(  42)																	if ((this109 == 0)) {
HXLINE(  42)																		g16 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		g16 = (( (Float)(this109) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float b110;
HXDLIN(  42)																	int this110 = (this106 & 255);
HXDLIN(  42)																	if ((this110 == 0)) {
HXLINE(  42)																		b110 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		b110 = (( (Float)(this110) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float a26;
HXDLIN(  42)																	int this111 = ((col2 >> 24) & 255);
HXDLIN(  42)																	if ((this111 == 0)) {
HXLINE(  42)																		a26 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		a26 = (( (Float)(this111) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float r26;
HXDLIN(  42)																	int this112 = ((col2 >> 16) & 255);
HXDLIN(  42)																	if ((this112 == 0)) {
HXLINE(  42)																		r26 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		r26 = (( (Float)(this112) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float g26;
HXDLIN(  42)																	int this113 = ((col2 >> 8) & 255);
HXDLIN(  42)																	if ((this113 == 0)) {
HXLINE(  42)																		g26 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		g26 = (( (Float)(this113) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float b27;
HXDLIN(  42)																	int this114 = (col2 & 255);
HXDLIN(  42)																	if ((this114 == 0)) {
HXLINE(  42)																		b27 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		b27 = (( (Float)(this114) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float a36 = (a17 * (( (Float)(1) ) - a26));
HXDLIN(  42)																	int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN(  42)																	int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN(  42)																	int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a36) + (b27 * a26))));
HXDLIN(  42)																	int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  42)																	int blended6 = ((((a18 << 24) | (r8 << 16)) | (g8 << 8)) | b28);
HXDLIN(  42)																	{
HXLINE(  42)																		int _hx_tmp24;
HXDLIN(  42)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)																			_hx_tmp24 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            																		}
            																		else {
HXLINE(  42)																			_hx_tmp24 = blended6;
            																		}
HXDLIN(  42)																		::iterMagic::Iimg_obj::set(undoImage6->image,location6,_hx_tmp24);
            																	}
            																}
            																else {
HXLINE(  42)																	::Dynamic this115 = undoImage6->image;
HXDLIN(  42)																	int index14;
HXDLIN(  42)																	if (undoImage6->useVirtualPos) {
HXLINE(  42)																		index14 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x12) - undoImage6->virtualX));
            																	}
            																	else {
HXLINE(  42)																		index14 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage6->width) + x12)) ));
            																	}
HXDLIN(  42)																	int _hx_tmp25;
HXDLIN(  42)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)																		_hx_tmp25 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            																	}
            																	else {
HXLINE(  42)																		_hx_tmp25 = c12;
            																	}
HXDLIN(  42)																	::iterMagic::Iimg_obj::set(this115,index14,_hx_tmp25);
            																}
            															}
            															else {
HXLINE(  42)																if (forceClear2) {
HXLINE(  42)																	::Dynamic this116 = undoImage6->image;
HXDLIN(  42)																	int x13 = (dx3 - rectLeft2);
HXDLIN(  42)																	int y13 = (dy3 - rectTop2);
HXDLIN(  42)																	int index15;
HXDLIN(  42)																	if (undoImage6->useVirtualPos) {
HXLINE(  42)																		index15 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x13) - undoImage6->virtualX));
            																	}
            																	else {
HXLINE(  42)																		index15 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage6->width) + x13)) ));
            																	}
HXDLIN(  42)																	::iterMagic::Iimg_obj::set(this116,index15,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  42)									bool found2 = false;
HXDLIN(  42)									Float s2 = ((Float)0.);
HXDLIN(  42)									Float t2 = ((Float)0.);
HXDLIN(  42)									Float sxx2 = ((Float)0.);
HXDLIN(  42)									Float txx2 = ((Float)0.);
HXDLIN(  42)									{
HXLINE(  42)										int _g_min4 = xIter32->start;
HXDLIN(  42)										int _g_max4 = xIter32->max;
HXDLIN(  42)										while((_g_min4 < _g_max4)){
HXLINE(  42)											_g_min4 = (_g_min4 + 1);
HXDLIN(  42)											int x14 = (_g_min4 - 1);
HXLINE(  60)											sxx2 = (sx2 * ( (Float)(x14) ));
HXLINE(  61)											txx2 = (tx2 * ( (Float)(x14) ));
HXLINE(  62)											found2 = false;
HXLINE(  42)											{
HXLINE(  42)												int _g_min5 = yIter32->start;
HXDLIN(  42)												int _g_max5 = yIter32->max;
HXDLIN(  42)												while((_g_min5 < _g_max5)){
HXLINE(  42)													_g_min5 = (_g_min5 + 1);
HXDLIN(  42)													int y14 = (_g_min5 - 1);
HXLINE(  64)													s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y14) )));
HXLINE(  65)													t2 = ((t02 + txx2) + (ty2 * ( (Float)(y14) )));
HXLINE(  42)													bool _hx_tmp26;
HXDLIN(  42)													if (!((s2 <= 0))) {
HXLINE(  42)														_hx_tmp26 = (t2 <= 0);
            													}
            													else {
HXLINE(  42)														_hx_tmp26 = true;
            													}
HXDLIN(  42)													if (_hx_tmp26) {
HXLINE(  42)														if (found2) {
HXLINE(  42)															goto _hx_goto_40;
            														}
            													}
            													else {
HXLINE(  42)														if (((s2 + t2) < A2)) {
HXLINE(  42)															{
HXLINE(  42)																int c13 = color;
HXDLIN(  42)																bool _hx_tmp27;
HXDLIN(  42)																if ((((c13 >> 24) & 255) < 254)) {
HXLINE(  42)																	_hx_tmp27 = this94->transparent;
            																}
            																else {
HXLINE(  42)																	_hx_tmp27 = false;
            																}
HXDLIN(  42)																if (_hx_tmp27) {
HXLINE(  42)																	int location7;
HXDLIN(  42)																	if (this94->useVirtualPos) {
HXLINE(  42)																		location7 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - this94->virtualY) * ( (Float)(this94->width) )) + x14) - this94->virtualX));
            																	}
            																	else {
HXLINE(  42)																		location7 = ::Std_obj::_hx_int(( (Float)(((y14 * this94->width) + x14)) ));
            																	}
HXDLIN(  42)																	int this117 = ::iterMagic::Iimg_obj::get(this94->image,location7);
HXDLIN(  42)																	int this118;
HXDLIN(  42)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)																		this118 = ((((((this117 >> 24) & 255) << 24) | ((this117 & 255) << 16)) | (((this117 >> 8) & 255) << 8)) | ((this117 >> 16) & 255));
            																	}
            																	else {
HXLINE(  42)																		this118 = this117;
            																	}
HXDLIN(  42)																	Float a19;
HXDLIN(  42)																	int this119 = ((this118 >> 24) & 255);
HXDLIN(  42)																	if ((this119 == 0)) {
HXLINE(  42)																		a19 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		a19 = (( (Float)(this119) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float r17;
HXDLIN(  42)																	int this120 = ((this118 >> 16) & 255);
HXDLIN(  42)																	if ((this120 == 0)) {
HXLINE(  42)																		r17 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		r17 = (( (Float)(this120) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float g17;
HXDLIN(  42)																	int this121 = ((this118 >> 8) & 255);
HXDLIN(  42)																	if ((this121 == 0)) {
HXLINE(  42)																		g17 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		g17 = (( (Float)(this121) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float b111;
HXDLIN(  42)																	int this122 = (this118 & 255);
HXDLIN(  42)																	if ((this122 == 0)) {
HXLINE(  42)																		b111 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		b111 = (( (Float)(this122) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float a27;
HXDLIN(  42)																	int this123 = ((color >> 24) & 255);
HXDLIN(  42)																	if ((this123 == 0)) {
HXLINE(  42)																		a27 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		a27 = (( (Float)(this123) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float r27;
HXDLIN(  42)																	int this124 = ((color >> 16) & 255);
HXDLIN(  42)																	if ((this124 == 0)) {
HXLINE(  42)																		r27 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		r27 = (( (Float)(this124) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float g27;
HXDLIN(  42)																	int this125 = ((color >> 8) & 255);
HXDLIN(  42)																	if ((this125 == 0)) {
HXLINE(  42)																		g27 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		g27 = (( (Float)(this125) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float b29;
HXDLIN(  42)																	int this126 = (color & 255);
HXDLIN(  42)																	if ((this126 == 0)) {
HXLINE(  42)																		b29 = ((Float)0.);
            																	}
            																	else {
HXLINE(  42)																		b29 = (( (Float)(this126) ) / ( (Float)(255) ));
            																	}
HXDLIN(  42)																	Float a37 = (a19 * (( (Float)(1) ) - a27));
HXDLIN(  42)																	int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN(  42)																	int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN(  42)																	int b30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a37) + (b29 * a27))));
HXDLIN(  42)																	int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN(  42)																	int blended7 = ((((a20 << 24) | (r9 << 16)) | (g9 << 8)) | b30);
HXDLIN(  42)																	{
HXLINE(  42)																		int _hx_tmp28;
HXDLIN(  42)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)																			_hx_tmp28 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            																		}
            																		else {
HXLINE(  42)																			_hx_tmp28 = blended7;
            																		}
HXDLIN(  42)																		::iterMagic::Iimg_obj::set(this94->image,location7,_hx_tmp28);
            																	}
            																}
            																else {
HXLINE(  42)																	::Dynamic this127 = this94->image;
HXDLIN(  42)																	int index16;
HXDLIN(  42)																	if (this94->useVirtualPos) {
HXLINE(  42)																		index16 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - this94->virtualY) * ( (Float)(this94->width) )) + x14) - this94->virtualX));
            																	}
            																	else {
HXLINE(  42)																		index16 = ::Std_obj::_hx_int(( (Float)(((y14 * this94->width) + x14)) ));
            																	}
HXDLIN(  42)																	int _hx_tmp29;
HXDLIN(  42)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  42)																		_hx_tmp29 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            																	}
            																	else {
HXLINE(  42)																		_hx_tmp29 = c13;
            																	}
HXDLIN(  42)																	::iterMagic::Iimg_obj::set(this127,index16,_hx_tmp29);
            																}
            															}
HXLINE(  73)															found2 = true;
            														}
            														else {
HXLINE(  42)															if (found2) {
HXLINE(  42)																goto _hx_goto_40;
            															}
            														}
            													}
            												}
            												_hx_goto_40:;
            											}
            										}
            									}
HXDLIN(  42)									if ((hasHit2 == true)) {
HXLINE(  42)										 ::pi_xy::algo::HitTri v8 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx3,lowerY,bx2,by2,cx4,cy4,true);
HXDLIN(  42)										if (hasUndo2) {
HXLINE(  42)											v8->undoImage = undoImage6;
HXDLIN(  42)											v8->undoX = xIter32->start;
HXDLIN(  42)											v8->undoY = yIter32->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  46)						lastX2 = nextX2;
HXLINE(  47)						lastY2 = nextY2;
            					}
            				}
            			}
            		}
HXLINE(  43)		{
HXLINE(  43)			int r_x2 = ::Std_obj::_hx_int((x + dx));
HXDLIN(  43)			int r_y2 = ::Std_obj::_hx_int(lowerY);
HXDLIN(  43)			int r_w2 = ::Std_obj::_hx_int(( (Float)(fat) ));
HXDLIN(  43)			int r_h2 = ::Std_obj::_hx_int(bottomRadius);
HXDLIN(  43)			int xmax2 = ((r_x2 + r_w2) + 1);
HXDLIN(  43)			int ymax2 = ((r_y2 + r_h2) + 1);
HXDLIN(  43)			int ii_min28 = r_x2;
HXDLIN(  43)			int ii_max28 = xmax2;
HXDLIN(  43)			int xRange__start2 = ii_min28;
HXDLIN(  43)			int xRange__max2 = ii_max28;
HXDLIN(  43)			int ii_min29 = r_y2;
HXDLIN(  43)			int ii_max29 = ymax2;
HXDLIN(  43)			int yRange__start2 = ii_min29;
HXDLIN(  43)			int yRange__max2 = ii_max29;
HXDLIN(  43)			int range_x2 = xRange__start2;
HXDLIN(  43)			int range_y2 = (yRange__start2 - 1);
HXDLIN(  43)			int range_xReset2 = range_x2;
HXDLIN(  43)			int range_yReset2 = range_y2;
HXDLIN(  43)			int range_xMax2 = (xRange__max2 - 2);
HXDLIN(  43)			int range_yMax2 = (yRange__max2 - 2);
HXDLIN(  43)			int _this_min2 = 0;
HXDLIN(  43)			int _this_max2 = ::Std_obj::_hx_int(( (Float)(((xRange__max2 - xRange__start2) * (yRange__max2 - yRange__start2))) ));
HXDLIN(  43)			while((_this_min2 < _this_max2)){
HXLINE(  43)				_this_min2 = (_this_min2 + 1);
HXDLIN(  43)				int i25 = (_this_min2 - 1);
HXDLIN(  43)				if ((range_y2 > range_yMax2)) {
HXLINE(  43)					range_y2 = range_yReset2;
HXDLIN(  43)					range_x2 = (range_x2 + 1);
            				}
HXDLIN(  43)				range_y2 = (range_y2 + 1);
HXDLIN(  43)				int i26 = i25;
HXDLIN(  43)				{
HXLINE(  43)					int x15 = range_x2;
HXDLIN(  43)					int y15 = range_y2;
HXDLIN(  43)					int c14 = color;
HXDLIN(  43)					bool _hx_tmp30;
HXDLIN(  43)					if ((((c14 >> 24) & 255) < 254)) {
HXLINE(  43)						_hx_tmp30 = pixelimage->transparent;
            					}
            					else {
HXLINE(  43)						_hx_tmp30 = false;
            					}
HXDLIN(  43)					if (_hx_tmp30) {
HXLINE(  43)						int location8;
HXDLIN(  43)						if (pixelimage->useVirtualPos) {
HXLINE(  43)							location8 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - pixelimage->virtualY) * ( (Float)(pixelimage->width) )) + x15) - pixelimage->virtualX));
            						}
            						else {
HXLINE(  43)							location8 = ::Std_obj::_hx_int(( (Float)(((y15 * pixelimage->width) + x15)) ));
            						}
HXDLIN(  43)						int this128 = ::iterMagic::Iimg_obj::get(pixelimage->image,location8);
HXDLIN(  43)						int this129;
HXDLIN(  43)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  43)							this129 = ((((((this128 >> 24) & 255) << 24) | ((this128 & 255) << 16)) | (((this128 >> 8) & 255) << 8)) | ((this128 >> 16) & 255));
            						}
            						else {
HXLINE(  43)							this129 = this128;
            						}
HXDLIN(  43)						Float a110;
HXDLIN(  43)						int this130 = ((this129 >> 24) & 255);
HXDLIN(  43)						if ((this130 == 0)) {
HXLINE(  43)							a110 = ((Float)0.);
            						}
            						else {
HXLINE(  43)							a110 = (( (Float)(this130) ) / ( (Float)(255) ));
            						}
HXDLIN(  43)						Float r18;
HXDLIN(  43)						int this131 = ((this129 >> 16) & 255);
HXDLIN(  43)						if ((this131 == 0)) {
HXLINE(  43)							r18 = ((Float)0.);
            						}
            						else {
HXLINE(  43)							r18 = (( (Float)(this131) ) / ( (Float)(255) ));
            						}
HXDLIN(  43)						Float g18;
HXDLIN(  43)						int this132 = ((this129 >> 8) & 255);
HXDLIN(  43)						if ((this132 == 0)) {
HXLINE(  43)							g18 = ((Float)0.);
            						}
            						else {
HXLINE(  43)							g18 = (( (Float)(this132) ) / ( (Float)(255) ));
            						}
HXDLIN(  43)						Float b112;
HXDLIN(  43)						int this133 = (this129 & 255);
HXDLIN(  43)						if ((this133 == 0)) {
HXLINE(  43)							b112 = ((Float)0.);
            						}
            						else {
HXLINE(  43)							b112 = (( (Float)(this133) ) / ( (Float)(255) ));
            						}
HXDLIN(  43)						Float a28;
HXDLIN(  43)						int this134 = ((color >> 24) & 255);
HXDLIN(  43)						if ((this134 == 0)) {
HXLINE(  43)							a28 = ((Float)0.);
            						}
            						else {
HXLINE(  43)							a28 = (( (Float)(this134) ) / ( (Float)(255) ));
            						}
HXDLIN(  43)						Float r28;
HXDLIN(  43)						int this135 = ((color >> 16) & 255);
HXDLIN(  43)						if ((this135 == 0)) {
HXLINE(  43)							r28 = ((Float)0.);
            						}
            						else {
HXLINE(  43)							r28 = (( (Float)(this135) ) / ( (Float)(255) ));
            						}
HXDLIN(  43)						Float g28;
HXDLIN(  43)						int this136 = ((color >> 8) & 255);
HXDLIN(  43)						if ((this136 == 0)) {
HXLINE(  43)							g28 = ((Float)0.);
            						}
            						else {
HXLINE(  43)							g28 = (( (Float)(this136) ) / ( (Float)(255) ));
            						}
HXDLIN(  43)						Float b210;
HXDLIN(  43)						int this137 = (color & 255);
HXDLIN(  43)						if ((this137 == 0)) {
HXLINE(  43)							b210 = ((Float)0.);
            						}
            						else {
HXLINE(  43)							b210 = (( (Float)(this137) ) / ( (Float)(255) ));
            						}
HXDLIN(  43)						Float a38 = (a110 * (( (Float)(1) ) - a28));
HXDLIN(  43)						int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r28 * a28))));
HXDLIN(  43)						int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g28 * a28))));
HXDLIN(  43)						int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a38) + (b210 * a28))));
HXDLIN(  43)						int a29 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a28)));
HXDLIN(  43)						int blended8 = ((((a29 << 24) | (r10 << 16)) | (g10 << 8)) | b31);
HXDLIN(  43)						{
HXLINE(  43)							int _hx_tmp31;
HXDLIN(  43)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  43)								_hx_tmp31 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            							}
            							else {
HXLINE(  43)								_hx_tmp31 = blended8;
            							}
HXDLIN(  43)							::iterMagic::Iimg_obj::set(pixelimage->image,location8,_hx_tmp31);
            						}
            					}
            					else {
HXLINE(  43)						::Dynamic this138 = pixelimage->image;
HXDLIN(  43)						int index17;
HXDLIN(  43)						if (pixelimage->useVirtualPos) {
HXLINE(  43)							index17 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - pixelimage->virtualY) * ( (Float)(pixelimage->width) )) + x15) - pixelimage->virtualX));
            						}
            						else {
HXLINE(  43)							index17 = ::Std_obj::_hx_int(( (Float)(((y15 * pixelimage->width) + x15)) ));
            						}
HXDLIN(  43)						int _hx_tmp32;
HXDLIN(  43)						if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  43)							_hx_tmp32 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            						}
            						else {
HXLINE(  43)							_hx_tmp32 = c14;
            						}
HXDLIN(  43)						::iterMagic::Iimg_obj::set(this138,index17,_hx_tmp32);
            					}
            				}
            			}
            		}
HXLINE(  44)		{
HXLINE(  44)			 ::pi_xy::ImageStruct this139 = pixelimage;
HXDLIN(  44)			{
HXLINE(  44)				 ::Dynamic targetError3 = ((Float)1.05);
HXDLIN(  44)				if (::hx::IsNull( targetError3 )) {
HXLINE( 113)					targetError3 = ((Float)1.05);
            				}
HXLINE(  44)				Float rSmall3;
HXDLIN(  44)				if ((rightRadius > bottomRadius)) {
HXLINE(  44)					rSmall3 = bottomRadius;
            				}
            				else {
HXLINE(  44)					rSmall3 = rightRadius;
            				}
HXDLIN(  44)				 ::Dynamic targetE3 = ( (Float)(targetError3) );
HXDLIN(  44)				if (::hx::IsNull( targetE3 )) {
HXLINE(  20)					targetE3 = ((Float)1.05);
            				}
HXLINE(  44)				int result3 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE3) ) / rSmall3)))));
HXDLIN(  44)				int noSides3;
HXDLIN(  44)				if ((result3 < 12)) {
HXLINE(  44)					noSides3 = 12;
            				}
            				else {
HXLINE(  44)					if ((result3 > 500)) {
HXLINE(  44)						noSides3 = 500;
            					}
            					else {
HXLINE(  44)						noSides3 = result3;
            					}
            				}
HXDLIN(  44)				int sides3 = (::Math_obj::ceil((( (Float)(noSides3) ) / ( (Float)(4) ))) * 4);
HXDLIN(  44)				Float theta3 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides3) ));
HXDLIN(  44)				Float omega3 = ( (Float)(0) );
HXDLIN(  44)				int quarter3 = ::Std_obj::_hx_int((( (Float)(sides3) ) / ( (Float)(4) )));
HXDLIN(  44)				Float lastX3 = ((Float)0.);
HXDLIN(  44)				Float lastY3 = ((Float)0.);
HXDLIN(  44)				{
HXLINE(  26)					lastX3 = (farX + (rightRadius * ::Math_obj::cos(((( (Float)(sides3) ) * theta3) + omega3))));
HXLINE(  27)					lastY3 = (lowerY + (bottomRadius * ::Math_obj::sin(((( (Float)(sides3) ) * theta3) + omega3))));
            				}
HXLINE(  44)				{
HXLINE(  44)					int _g66 = 0;
HXDLIN(  44)					int _g67 = (quarter3 + 1);
HXDLIN(  44)					while((_g66 < _g67)){
HXLINE(  44)						_g66 = (_g66 + 1);
HXDLIN(  44)						int i27 = (_g66 - 1);
HXDLIN(  44)						Float nextX3 = (farX + (rightRadius * ::Math_obj::cos((((( (Float)(i27) ) * theta3) + ((Float)0.0001)) + omega3))));
HXDLIN(  44)						Float nextY3 = (lowerY + (bottomRadius * ::Math_obj::sin((((( (Float)(i27) ) * theta3) + ((Float)0.0001)) + omega3))));
HXDLIN(  44)						{
HXLINE(  44)							 ::pi_xy::ImageStruct this140 = this139;
HXDLIN(  44)							bool hasHit3 = false;
HXDLIN(  44)							bool hasUndo3 = false;
HXDLIN(  44)							{
HXLINE(  44)								Float bx3 = lastX3;
HXDLIN(  44)								Float by3 = lastY3;
HXDLIN(  44)								Float cx5 = nextX3;
HXDLIN(  44)								Float cy5 = nextY3;
HXDLIN(  44)								bool adjustWinding3 = (((((farX * by3) - (bx3 * lowerY)) + ((bx3 * cy5) - (cx5 * by3))) + ((cx5 * lowerY) - (farX * cy5))) > 0);
HXDLIN(  44)								if (!(adjustWinding3)) {
HXLINE(  44)									Float bx_3 = bx3;
HXDLIN(  44)									Float by_3 = by3;
HXLINE(  25)									bx3 = cx5;
HXLINE(  26)									by3 = cy5;
HXLINE(  27)									cx5 = bx_3;
HXLINE(  28)									cy5 = by_3;
            								}
HXLINE(  44)								{
HXLINE(  44)									Float s03 = ((lowerY * cx5) - (farX * cy5));
HXDLIN(  44)									Float sx3 = (cy5 - lowerY);
HXDLIN(  44)									Float sy3 = (farX - cx5);
HXDLIN(  44)									Float t03 = ((farX * by3) - (lowerY * bx3));
HXDLIN(  44)									Float tx3 = (lowerY - by3);
HXDLIN(  44)									Float ty3 = (bx3 - farX);
HXDLIN(  44)									Float A3 = ((((-(by3) * cx5) + (lowerY * (-(bx3) + cx5))) + (farX * (by3 - cy5))) + (bx3 * cy5));
HXDLIN(  44)									 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  44)									if ((farX > bx3)) {
HXLINE(  44)										if ((farX > cx5)) {
HXLINE(  44)											int min12;
HXDLIN(  44)											if ((bx3 > cx5)) {
HXLINE(  44)												min12 = ::Math_obj::floor(cx5);
            											}
            											else {
HXLINE(  44)												min12 = ::Math_obj::floor(bx3);
            											}
HXDLIN(  44)											int ii_min30 = min12;
HXDLIN(  44)											int ii_max30 = ::Math_obj::ceil(farX);
HXDLIN(  44)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            										}
            										else {
HXLINE(  44)											int ii_min31 = ::Math_obj::floor(bx3);
HXDLIN(  44)											int ii_max31 = ::Math_obj::ceil(cx5);
HXDLIN(  44)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            										}
            									}
            									else {
HXLINE(  44)										if ((bx3 > cx5)) {
HXLINE(  44)											int min13;
HXDLIN(  44)											if ((farX > cx5)) {
HXLINE(  44)												min13 = ::Math_obj::floor(cx5);
            											}
            											else {
HXLINE(  44)												min13 = ::Math_obj::ceil(farX);
            											}
HXDLIN(  44)											int ii_min32 = min13;
HXDLIN(  44)											int ii_max32 = ::Math_obj::ceil(bx3);
HXDLIN(  44)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            										}
            										else {
HXLINE(  44)											int ii_min33 = ::Math_obj::floor(farX);
HXDLIN(  44)											int ii_max33 = ::Math_obj::ceil(cx5);
HXDLIN(  44)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            										}
            									}
HXDLIN(  44)									 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  44)									if ((lowerY > by3)) {
HXLINE(  44)										if ((lowerY > cy5)) {
HXLINE(  44)											int min14;
HXDLIN(  44)											if ((by3 > cy5)) {
HXLINE(  44)												min14 = ::Math_obj::floor(cy5);
            											}
            											else {
HXLINE(  44)												min14 = ::Math_obj::floor(by3);
            											}
HXDLIN(  44)											int ii_min34 = min14;
HXDLIN(  44)											int ii_max34 = ::Math_obj::ceil(lowerY);
HXDLIN(  44)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            										}
            										else {
HXLINE(  44)											int ii_min35 = ::Math_obj::floor(by3);
HXDLIN(  44)											int ii_max35 = ::Math_obj::ceil(cy5);
HXDLIN(  44)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            										}
            									}
            									else {
HXLINE(  44)										if ((by3 > cy5)) {
HXLINE(  44)											int min15;
HXDLIN(  44)											if ((lowerY > cy5)) {
HXLINE(  44)												min15 = ::Math_obj::floor(cy5);
            											}
            											else {
HXLINE(  44)												min15 = ::Math_obj::ceil(lowerY);
            											}
HXDLIN(  44)											int ii_min36 = min15;
HXDLIN(  44)											int ii_max36 = ::Math_obj::ceil(by3);
HXDLIN(  44)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            										}
            										else {
HXLINE(  44)											int ii_min37 = ::Math_obj::floor(lowerY);
HXDLIN(  44)											int ii_max37 = ::Math_obj::ceil(cy5);
HXDLIN(  44)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            										}
            									}
HXDLIN(  44)									 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  44)									if (hasUndo3) {
HXLINE(  44)										int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  44)										int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  44)										 ::Dynamic imageType3 = null();
HXDLIN(  44)										 ::pi_xy::ImageStruct this141 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  44)										if (::hx::IsNull( imageType3 )) {
HXLINE(  54)											imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  44)										::Dynamic undoImage10;
HXDLIN(  44)										switch((int)(( (int)(imageType3) ))){
            											case (int)0: {
HXLINE(  44)												 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  44)												 ::iterMagic::BytesImg b32 = byt3;
HXDLIN(  44)												{
HXLINE(  44)													b32->width = width3;
HXDLIN(  44)													b32->height = height3;
HXDLIN(  44)													b32->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  44)													b32->data = ::haxe::io::Bytes_obj::alloc((b32->length * 4));
HXDLIN(  44)													{
HXLINE(  44)														int len6 = b32->length;
HXDLIN(  44)														int w3 = 0;
HXDLIN(  44)														{
HXLINE(  44)															int _g68 = 0;
HXDLIN(  44)															int _g69 = b32->height;
HXDLIN(  44)															while((_g68 < _g69)){
HXLINE(  44)																_g68 = (_g68 + 1);
HXDLIN(  44)																int y16 = (_g68 - 1);
HXDLIN(  44)																{
HXLINE(  44)																	int _g70 = 0;
HXDLIN(  44)																	int _g71 = b32->width;
HXDLIN(  44)																	while((_g70 < _g71)){
HXLINE(  44)																		_g70 = (_g70 + 1);
HXDLIN(  44)																		int x16 = (_g70 - 1);
HXDLIN(  44)																		{
HXLINE(  44)																			w3 = (w3 + 1);
HXDLIN(  44)																			b32->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  44)																		{
HXLINE(  44)																			w3 = (w3 + 1);
HXDLIN(  44)																			b32->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  44)																		{
HXLINE(  44)																			w3 = (w3 + 1);
HXDLIN(  44)																			b32->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  44)																		{
HXLINE(  44)																			w3 = (w3 + 1);
HXDLIN(  44)																			b32->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  44)												undoImage10 = b32;
            											}
            											break;
            											case (int)1: {
HXLINE(  44)												 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  44)												 ::iterMagic::ArrIntImg a30 = arrI3;
HXDLIN(  44)												{
HXLINE(  44)													a30->width = width3;
HXDLIN(  44)													a30->height = height3;
HXDLIN(  44)													a30->data = ::Array_obj< int >::__new(0);
HXDLIN(  44)													a30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  44)													{
HXLINE(  44)														int _g72 = 0;
HXDLIN(  44)														int _g73 = a30->length;
HXDLIN(  44)														while((_g72 < _g73)){
HXLINE(  44)															_g72 = (_g72 + 1);
HXDLIN(  44)															int i28 = (_g72 - 1);
HXDLIN(  44)															a30->data[i28] = 0;
            														}
            													}
            												}
HXDLIN(  44)												undoImage10 = a30;
            											}
            											break;
            											case (int)2: {
HXLINE(  44)												 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  44)												 ::iterMagic::U32ArrImg b33 = u32a3;
HXDLIN(  44)												{
HXLINE(  44)													b33->width = width3;
HXDLIN(  44)													b33->height = height3;
HXDLIN(  44)													b33->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  44)													int size3 = (b33->length * 4);
HXDLIN(  44)													b33->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  44)													{
HXLINE(  44)														int _g74 = 0;
HXDLIN(  44)														int _g75 = b33->length;
HXDLIN(  44)														while((_g74 < _g75)){
HXLINE(  44)															_g74 = (_g74 + 1);
HXDLIN(  44)															int i29 = (_g74 - 1);
HXDLIN(  44)															{
HXLINE(  44)																 ::haxe::io::ArrayBufferViewImpl this142 = b33->data;
HXDLIN(  44)																bool undoImage11;
HXDLIN(  44)																if ((i29 >= 0)) {
HXLINE(  44)																	undoImage11 = (i29 < (this142->byteLength >> 2));
            																}
            																else {
HXLINE(  44)																	undoImage11 = false;
            																}
HXDLIN(  44)																if (undoImage11) {
HXLINE(  44)																	 ::haxe::io::Bytes _this3 = this142->bytes;
HXDLIN(  44)																	int pos3 = ((i29 << 2) + this142->byteOffset);
HXDLIN(  44)																	_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  44)																	_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  44)																	_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  44)																	_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  44)												undoImage10 = b33;
            											}
            											break;
            											case (int)3: {
HXLINE(  44)												 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  44)												 ::iterMagic::VecIntImg v9 = vec3;
HXDLIN(  44)												{
HXLINE(  44)													v9->width = width3;
HXDLIN(  44)													v9->height = height3;
HXDLIN(  44)													v9->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  44)													v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN(  44)													{
HXLINE(  44)														int _g76 = 0;
HXDLIN(  44)														int _g77 = v9->length;
HXDLIN(  44)														while((_g76 < _g77)){
HXLINE(  44)															_g76 = (_g76 + 1);
HXDLIN(  44)															int i30 = (_g76 - 1);
HXDLIN(  44)															v9->data->__unsafe_set(i30,0);
            														}
            													}
            												}
HXDLIN(  44)												undoImage10 = v9;
            											}
            											break;
            											case (int)4: {
HXLINE(  44)												 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  44)												 ::iterMagic::StackIntImg b34 = sInt3;
HXDLIN(  44)												{
HXLINE(  44)													b34->width = width3;
HXDLIN(  44)													b34->height = height3;
HXDLIN(  44)													b34->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  44)													b34->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  44)													{
HXLINE(  44)														int len7 = b34->length;
HXDLIN(  44)														 ::haxe::ds::GenericStack_Int d3 = b34->data;
HXDLIN(  44)														if (::hx::IsNull( d3->head )) {
HXLINE(  44)															int _g78 = 0;
HXDLIN(  44)															int _g79 = len7;
HXDLIN(  44)															while((_g78 < _g79)){
HXLINE(  44)																_g78 = (_g78 + 1);
HXDLIN(  44)																int i31 = (_g78 - 1);
HXDLIN(  44)																d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            															}
            														}
            														else {
HXLINE(  44)															int _g80 = 0;
HXDLIN(  44)															int _g81 = len7;
HXDLIN(  44)															while((_g80 < _g81)){
HXLINE(  44)																_g80 = (_g80 + 1);
HXDLIN(  44)																int i32 = (_g80 - 1);
HXDLIN(  44)																{
HXLINE(  44)																	 ::haxe::ds::GenericCell_Int l3 = b34->data->head;
HXDLIN(  44)																	 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  44)																	{
HXLINE(  44)																		int _g82 = 0;
HXDLIN(  44)																		int _g83 = i32;
HXDLIN(  44)																		while((_g82 < _g83)){
HXLINE(  44)																			_g82 = (_g82 + 1);
HXDLIN(  44)																			int i33 = (_g82 - 1);
HXLINE( 345)																			prev3 = l3;
HXLINE( 346)																			l3 = l3->next;
            																		}
            																	}
HXLINE(  44)																	if (::hx::IsNull( prev3 )) {
HXLINE(  44)																		b34->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  44)																		l3 = null();
            																	}
            																	else {
HXLINE(  44)																		prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  44)																		l3 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  44)												undoImage10 = b34;
            											}
            											break;
            										}
HXDLIN(  44)										this141->image = undoImage10;
HXDLIN(  44)										this141->width = width3;
HXDLIN(  44)										this141->height = height3;
HXDLIN(  44)										this141->imageType = ( (int)(imageType3) );
HXDLIN(  44)										undoImage9 = this141;
HXDLIN(  44)										{
HXLINE(  44)											int rectLeft3 = xIter33->start;
HXDLIN(  44)											int rectTop3 = yIter33->start;
HXDLIN(  44)											int rectRight3 = xIter33->max;
HXDLIN(  44)											bool forceClear3 = false;
HXDLIN(  44)											{
HXLINE(  44)												int _g84 = rectTop3;
HXDLIN(  44)												int _g85 = yIter33->max;
HXDLIN(  44)												while((_g84 < _g85)){
HXLINE(  44)													_g84 = (_g84 + 1);
HXDLIN(  44)													int dy4 = (_g84 - 1);
HXDLIN(  44)													{
HXLINE(  44)														int _g86 = rectLeft3;
HXDLIN(  44)														int _g87 = rectRight3;
HXDLIN(  44)														while((_g86 < _g87)){
HXLINE(  44)															_g86 = (_g86 + 1);
HXDLIN(  44)															int dx4 = (_g86 - 1);
HXDLIN(  44)															::Dynamic this143 = this140->image;
HXDLIN(  44)															int index18;
HXDLIN(  44)															if (this140->useVirtualPos) {
HXLINE(  44)																index18 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this140->virtualY) * ( (Float)(this140->width) )) + dx4) - this140->virtualX));
            															}
            															else {
HXLINE(  44)																index18 = ::Std_obj::_hx_int(( (Float)(((dy4 * this140->width) + dx4)) ));
            															}
HXDLIN(  44)															int c15 = ::iterMagic::Iimg_obj::get(this143,index18);
HXDLIN(  44)															int col3;
HXDLIN(  44)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)																col3 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            															}
            															else {
HXLINE(  44)																col3 = c15;
            															}
HXDLIN(  44)															bool _hx_tmp33;
HXDLIN(  44)															if (this140->useMask) {
HXLINE(  44)																_hx_tmp33 = ::hx::IsNotNull( this140->mask );
            															}
            															else {
HXLINE(  44)																_hx_tmp33 = false;
            															}
HXDLIN(  44)															if (_hx_tmp33) {
HXLINE(  44)																 ::pi_xy::ImageStruct this144 = this140->mask;
HXDLIN(  44)																::Dynamic this145 = this144->image;
HXDLIN(  44)																int index19;
HXDLIN(  44)																if (this144->useVirtualPos) {
HXLINE(  44)																	index19 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this144->virtualY) * ( (Float)(this144->width) )) + dx4) - this144->virtualX));
            																}
            																else {
HXLINE(  44)																	index19 = ::Std_obj::_hx_int(( (Float)(((dy4 * this144->width) + dx4)) ));
            																}
HXDLIN(  44)																int c16 = ::iterMagic::Iimg_obj::get(this145,index19);
HXDLIN(  44)																int v10;
HXDLIN(  44)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)																	v10 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            																}
            																else {
HXLINE(  44)																	v10 = c16;
            																}
HXDLIN(  44)																int maskPixel3 = v10;
HXDLIN(  44)																int this146 = col3;
HXDLIN(  44)																if ((maskPixel3 == 0)) {
HXLINE(  44)																	col3 = this146;
            																}
            																else {
HXLINE(  44)																	Float m03;
HXDLIN(  44)																	int this147 = ((maskPixel3 >> 24) & 255);
HXDLIN(  44)																	if ((this147 == 0)) {
HXLINE(  44)																		m03 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		m03 = (( (Float)(this147) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float m13;
HXDLIN(  44)																	int this148 = ((maskPixel3 >> 16) & 255);
HXDLIN(  44)																	if ((this148 == 0)) {
HXLINE(  44)																		m13 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		m13 = (( (Float)(this148) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float m23;
HXDLIN(  44)																	int this149 = ((maskPixel3 >> 8) & 255);
HXDLIN(  44)																	if ((this149 == 0)) {
HXLINE(  44)																		m23 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		m23 = (( (Float)(this149) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float m33;
HXDLIN(  44)																	int this150 = (maskPixel3 & 255);
HXDLIN(  44)																	if ((this150 == 0)) {
HXLINE(  44)																		m33 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		m33 = (( (Float)(this150) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this146 >> 24) & 255)) )));
HXDLIN(  44)																	int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this146 >> 16) & 255)) )));
HXDLIN(  44)																	int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this146 >> 8) & 255)) )));
HXDLIN(  44)																	int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this146 & 255)) )));
HXDLIN(  44)																	col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  44)															if ((col3 != 0)) {
HXLINE(  44)																int x17 = (dx4 - rectLeft3);
HXDLIN(  44)																int y17 = (dy4 - rectTop3);
HXDLIN(  44)																int c17 = col3;
HXDLIN(  44)																bool _hx_tmp34;
HXDLIN(  44)																if ((((c17 >> 24) & 255) < 254)) {
HXLINE(  44)																	_hx_tmp34 = undoImage9->transparent;
            																}
            																else {
HXLINE(  44)																	_hx_tmp34 = false;
            																}
HXDLIN(  44)																if (_hx_tmp34) {
HXLINE(  44)																	int location9;
HXDLIN(  44)																	if (undoImage9->useVirtualPos) {
HXLINE(  44)																		location9 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x17) - undoImage9->virtualX));
            																	}
            																	else {
HXLINE(  44)																		location9 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage9->width) + x17)) ));
            																	}
HXDLIN(  44)																	int this151 = ::iterMagic::Iimg_obj::get(undoImage9->image,location9);
HXDLIN(  44)																	int this152;
HXDLIN(  44)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)																		this152 = ((((((this151 >> 24) & 255) << 24) | ((this151 & 255) << 16)) | (((this151 >> 8) & 255) << 8)) | ((this151 >> 16) & 255));
            																	}
            																	else {
HXLINE(  44)																		this152 = this151;
            																	}
HXDLIN(  44)																	Float a111;
HXDLIN(  44)																	int this153 = ((this152 >> 24) & 255);
HXDLIN(  44)																	if ((this153 == 0)) {
HXLINE(  44)																		a111 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		a111 = (( (Float)(this153) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float r19;
HXDLIN(  44)																	int this154 = ((this152 >> 16) & 255);
HXDLIN(  44)																	if ((this154 == 0)) {
HXLINE(  44)																		r19 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		r19 = (( (Float)(this154) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float g19;
HXDLIN(  44)																	int this155 = ((this152 >> 8) & 255);
HXDLIN(  44)																	if ((this155 == 0)) {
HXLINE(  44)																		g19 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		g19 = (( (Float)(this155) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float b113;
HXDLIN(  44)																	int this156 = (this152 & 255);
HXDLIN(  44)																	if ((this156 == 0)) {
HXLINE(  44)																		b113 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		b113 = (( (Float)(this156) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float a210;
HXDLIN(  44)																	int this157 = ((col3 >> 24) & 255);
HXDLIN(  44)																	if ((this157 == 0)) {
HXLINE(  44)																		a210 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		a210 = (( (Float)(this157) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float r29;
HXDLIN(  44)																	int this158 = ((col3 >> 16) & 255);
HXDLIN(  44)																	if ((this158 == 0)) {
HXLINE(  44)																		r29 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		r29 = (( (Float)(this158) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float g29;
HXDLIN(  44)																	int this159 = ((col3 >> 8) & 255);
HXDLIN(  44)																	if ((this159 == 0)) {
HXLINE(  44)																		g29 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		g29 = (( (Float)(this159) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float b211;
HXDLIN(  44)																	int this160 = (col3 & 255);
HXDLIN(  44)																	if ((this160 == 0)) {
HXLINE(  44)																		b211 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		b211 = (( (Float)(this160) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float a39 = (a111 * (( (Float)(1) ) - a210));
HXDLIN(  44)																	int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a39) + (r29 * a210))));
HXDLIN(  44)																	int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a39) + (g29 * a210))));
HXDLIN(  44)																	int b35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a39) + (b211 * a210))));
HXDLIN(  44)																	int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a210)));
HXDLIN(  44)																	int blended9 = ((((a40 << 24) | (r20 << 16)) | (g20 << 8)) | b35);
HXDLIN(  44)																	{
HXLINE(  44)																		int _hx_tmp35;
HXDLIN(  44)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)																			_hx_tmp35 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            																		}
            																		else {
HXLINE(  44)																			_hx_tmp35 = blended9;
            																		}
HXDLIN(  44)																		::iterMagic::Iimg_obj::set(undoImage9->image,location9,_hx_tmp35);
            																	}
            																}
            																else {
HXLINE(  44)																	::Dynamic this161 = undoImage9->image;
HXDLIN(  44)																	int index20;
HXDLIN(  44)																	if (undoImage9->useVirtualPos) {
HXLINE(  44)																		index20 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x17) - undoImage9->virtualX));
            																	}
            																	else {
HXLINE(  44)																		index20 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage9->width) + x17)) ));
            																	}
HXDLIN(  44)																	int _hx_tmp36;
HXDLIN(  44)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)																		_hx_tmp36 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            																	}
            																	else {
HXLINE(  44)																		_hx_tmp36 = c17;
            																	}
HXDLIN(  44)																	::iterMagic::Iimg_obj::set(this161,index20,_hx_tmp36);
            																}
            															}
            															else {
HXLINE(  44)																if (forceClear3) {
HXLINE(  44)																	::Dynamic this162 = undoImage9->image;
HXDLIN(  44)																	int x18 = (dx4 - rectLeft3);
HXDLIN(  44)																	int y18 = (dy4 - rectTop3);
HXDLIN(  44)																	int index21;
HXDLIN(  44)																	if (undoImage9->useVirtualPos) {
HXLINE(  44)																		index21 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x18) - undoImage9->virtualX));
            																	}
            																	else {
HXLINE(  44)																		index21 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage9->width) + x18)) ));
            																	}
HXDLIN(  44)																	::iterMagic::Iimg_obj::set(this162,index21,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  44)									bool found3 = false;
HXDLIN(  44)									Float s3 = ((Float)0.);
HXDLIN(  44)									Float t3 = ((Float)0.);
HXDLIN(  44)									Float sxx3 = ((Float)0.);
HXDLIN(  44)									Float txx3 = ((Float)0.);
HXDLIN(  44)									{
HXLINE(  44)										int _g_min6 = xIter33->start;
HXDLIN(  44)										int _g_max6 = xIter33->max;
HXDLIN(  44)										while((_g_min6 < _g_max6)){
HXLINE(  44)											_g_min6 = (_g_min6 + 1);
HXDLIN(  44)											int x19 = (_g_min6 - 1);
HXLINE(  60)											sxx3 = (sx3 * ( (Float)(x19) ));
HXLINE(  61)											txx3 = (tx3 * ( (Float)(x19) ));
HXLINE(  62)											found3 = false;
HXLINE(  44)											{
HXLINE(  44)												int _g_min7 = yIter33->start;
HXDLIN(  44)												int _g_max7 = yIter33->max;
HXDLIN(  44)												while((_g_min7 < _g_max7)){
HXLINE(  44)													_g_min7 = (_g_min7 + 1);
HXDLIN(  44)													int y19 = (_g_min7 - 1);
HXLINE(  64)													s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y19) )));
HXLINE(  65)													t3 = ((t03 + txx3) + (ty3 * ( (Float)(y19) )));
HXLINE(  44)													bool _hx_tmp37;
HXDLIN(  44)													if (!((s3 <= 0))) {
HXLINE(  44)														_hx_tmp37 = (t3 <= 0);
            													}
            													else {
HXLINE(  44)														_hx_tmp37 = true;
            													}
HXDLIN(  44)													if (_hx_tmp37) {
HXLINE(  44)														if (found3) {
HXLINE(  44)															goto _hx_goto_54;
            														}
            													}
            													else {
HXLINE(  44)														if (((s3 + t3) < A3)) {
HXLINE(  44)															{
HXLINE(  44)																int c18 = color;
HXDLIN(  44)																bool _hx_tmp38;
HXDLIN(  44)																if ((((c18 >> 24) & 255) < 254)) {
HXLINE(  44)																	_hx_tmp38 = this140->transparent;
            																}
            																else {
HXLINE(  44)																	_hx_tmp38 = false;
            																}
HXDLIN(  44)																if (_hx_tmp38) {
HXLINE(  44)																	int location10;
HXDLIN(  44)																	if (this140->useVirtualPos) {
HXLINE(  44)																		location10 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - this140->virtualY) * ( (Float)(this140->width) )) + x19) - this140->virtualX));
            																	}
            																	else {
HXLINE(  44)																		location10 = ::Std_obj::_hx_int(( (Float)(((y19 * this140->width) + x19)) ));
            																	}
HXDLIN(  44)																	int this163 = ::iterMagic::Iimg_obj::get(this140->image,location10);
HXDLIN(  44)																	int this164;
HXDLIN(  44)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)																		this164 = ((((((this163 >> 24) & 255) << 24) | ((this163 & 255) << 16)) | (((this163 >> 8) & 255) << 8)) | ((this163 >> 16) & 255));
            																	}
            																	else {
HXLINE(  44)																		this164 = this163;
            																	}
HXDLIN(  44)																	Float a112;
HXDLIN(  44)																	int this165 = ((this164 >> 24) & 255);
HXDLIN(  44)																	if ((this165 == 0)) {
HXLINE(  44)																		a112 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		a112 = (( (Float)(this165) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float r110;
HXDLIN(  44)																	int this166 = ((this164 >> 16) & 255);
HXDLIN(  44)																	if ((this166 == 0)) {
HXLINE(  44)																		r110 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		r110 = (( (Float)(this166) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float g110;
HXDLIN(  44)																	int this167 = ((this164 >> 8) & 255);
HXDLIN(  44)																	if ((this167 == 0)) {
HXLINE(  44)																		g110 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		g110 = (( (Float)(this167) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float b114;
HXDLIN(  44)																	int this168 = (this164 & 255);
HXDLIN(  44)																	if ((this168 == 0)) {
HXLINE(  44)																		b114 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		b114 = (( (Float)(this168) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float a211;
HXDLIN(  44)																	int this169 = ((color >> 24) & 255);
HXDLIN(  44)																	if ((this169 == 0)) {
HXLINE(  44)																		a211 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		a211 = (( (Float)(this169) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float r210;
HXDLIN(  44)																	int this170 = ((color >> 16) & 255);
HXDLIN(  44)																	if ((this170 == 0)) {
HXLINE(  44)																		r210 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		r210 = (( (Float)(this170) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float g210;
HXDLIN(  44)																	int this171 = ((color >> 8) & 255);
HXDLIN(  44)																	if ((this171 == 0)) {
HXLINE(  44)																		g210 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		g210 = (( (Float)(this171) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float b212;
HXDLIN(  44)																	int this172 = (color & 255);
HXDLIN(  44)																	if ((this172 == 0)) {
HXLINE(  44)																		b212 = ((Float)0.);
            																	}
            																	else {
HXLINE(  44)																		b212 = (( (Float)(this172) ) / ( (Float)(255) ));
            																	}
HXDLIN(  44)																	Float a310 = (a112 * (( (Float)(1) ) - a211));
HXDLIN(  44)																	int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r210 * a211))));
HXDLIN(  44)																	int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g210 * a211))));
HXDLIN(  44)																	int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b212 * a211))));
HXDLIN(  44)																	int a41 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN(  44)																	int blended10 = ((((a41 << 24) | (r30 << 16)) | (g30 << 8)) | b36);
HXDLIN(  44)																	{
HXLINE(  44)																		int _hx_tmp39;
HXDLIN(  44)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)																			_hx_tmp39 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            																		}
            																		else {
HXLINE(  44)																			_hx_tmp39 = blended10;
            																		}
HXDLIN(  44)																		::iterMagic::Iimg_obj::set(this140->image,location10,_hx_tmp39);
            																	}
            																}
            																else {
HXLINE(  44)																	::Dynamic this173 = this140->image;
HXDLIN(  44)																	int index22;
HXDLIN(  44)																	if (this140->useVirtualPos) {
HXLINE(  44)																		index22 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - this140->virtualY) * ( (Float)(this140->width) )) + x19) - this140->virtualX));
            																	}
            																	else {
HXLINE(  44)																		index22 = ::Std_obj::_hx_int(( (Float)(((y19 * this140->width) + x19)) ));
            																	}
HXDLIN(  44)																	int _hx_tmp40;
HXDLIN(  44)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  44)																		_hx_tmp40 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            																	}
            																	else {
HXLINE(  44)																		_hx_tmp40 = c18;
            																	}
HXDLIN(  44)																	::iterMagic::Iimg_obj::set(this173,index22,_hx_tmp40);
            																}
            															}
HXLINE(  73)															found3 = true;
            														}
            														else {
HXLINE(  44)															if (found3) {
HXLINE(  44)																goto _hx_goto_54;
            															}
            														}
            													}
            												}
            												_hx_goto_54:;
            											}
            										}
            									}
HXDLIN(  44)									if ((hasHit3 == true)) {
HXLINE(  44)										 ::pi_xy::algo::HitTri v11 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX,lowerY,bx3,by3,cx5,cy5,true);
HXDLIN(  44)										if (hasUndo3) {
HXLINE(  44)											v11->undoImage = undoImage9;
HXDLIN(  44)											v11->undoX = xIter33->start;
HXDLIN(  44)											v11->undoY = yIter33->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  46)						lastX3 = nextX3;
HXLINE(  47)						lastY3 = nextY3;
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(RoundRecPixel_Fields__obj,fillRoundRectangle,(void))

void RoundRecPixel_Fields__obj::tileRoundRectangle( ::pi_xy::ImageStruct pixelimage,Float x,Float y,Float wid,Float hi, ::pi_xy::ImageStruct tileImage, ::Dynamic __o_dx, ::Dynamic __o_dy, ::Dynamic __o_fat, ::Dynamic __o_tall){
            		 ::Dynamic dx = __o_dx;
            		if (::hx::IsNull(__o_dx)) dx = ((Float)-1.);
            		 ::Dynamic dy = __o_dy;
            		if (::hx::IsNull(__o_dy)) dy = ((Float)-1.);
            		 ::Dynamic fat = __o_fat;
            		if (::hx::IsNull(__o_fat)) fat = ((Float)-1.);
            		 ::Dynamic tall = __o_tall;
            		if (::hx::IsNull(__o_tall)) tall = ((Float)-1.);
            	HX_GC_STACKFRAME(&_hx_pos_5e9ae3e1c0a40e73_59_tileRoundRectangle)
HXLINE(  63)		if (::hx::IsLess( dx,((Float)0.) )) {
HXLINE(  64)			Float smallest;
HXDLIN(  64)			if ((hi < wid)) {
HXLINE(  64)				smallest = hi;
            			}
            			else {
HXLINE(  64)				smallest = wid;
            			}
HXLINE(  65)			Float goldenRatio = ((Float)1.61803398875);
HXLINE(  66)			dx = (smallest / (goldenRatio + 2));
            		}
HXLINE(  68)		if (::hx::IsLess( dy,((Float)0.) )) {
HXLINE(  68)			dy = dx;
            		}
HXLINE(  69)		if (::hx::IsLess( fat,((Float)0.) )) {
HXLINE(  69)			fat = (wid - (( (Float)(2) ) * ( (Float)(dx) )));
            		}
HXLINE(  70)		if (::hx::IsLess( tall,((Float)0.) )) {
HXLINE(  70)			tall = (hi - (( (Float)(2) ) * ( (Float)(dy) )));
            		}
HXLINE(  71)		Float rightRadius = ((wid - ( (Float)(fat) )) - ( (Float)(dx) ));
HXLINE(  72)		Float bottomRadius = ((hi - ( (Float)(tall) )) - ( (Float)(dy) ));
HXLINE(  73)		Float farX = ((x + dx) + fat);
HXLINE(  74)		Float lowerY = ((y + dy) + tall);
HXLINE(  76)		{
HXLINE(  76)			 ::pi_xy::ImageStruct this1 = pixelimage;
HXDLIN(  76)			Float cx = (x + dx);
HXDLIN(  76)			Float cy = (y + dy);
HXDLIN(  76)			Float rx = ( (Float)(dx) );
HXDLIN(  76)			Float ry = ( (Float)(dy) );
HXDLIN(  76)			{
HXLINE(  76)				 ::Dynamic targetError = ((Float)1.05);
HXDLIN(  76)				if (::hx::IsNull( targetError )) {
HXLINE( 101)					targetError = ((Float)1.05);
            				}
HXLINE(  76)				Float rSmall;
HXDLIN(  76)				if ((rx > ry)) {
HXLINE(  76)					rSmall = ry;
            				}
            				else {
HXLINE(  76)					rSmall = rx;
            				}
HXDLIN(  76)				 ::Dynamic targetE = ( (Float)(targetError) );
HXDLIN(  76)				if (::hx::IsNull( targetE )) {
HXLINE(  20)					targetE = ((Float)1.05);
            				}
HXLINE(  76)				int result = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE) ) / rSmall)))));
HXDLIN(  76)				int noSides;
HXDLIN(  76)				if ((result < 12)) {
HXLINE(  76)					noSides = 12;
            				}
            				else {
HXLINE(  76)					if ((result > 500)) {
HXLINE(  76)						noSides = 500;
            					}
            					else {
HXLINE(  76)						noSides = result;
            					}
            				}
HXDLIN(  76)				int sides = (::Math_obj::ceil((( (Float)(noSides) ) / ( (Float)(4) ))) * 4);
HXDLIN(  76)				Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides) ));
HXDLIN(  76)				Float omega = ::Math_obj::PI;
HXDLIN(  76)				int quarter = ::Std_obj::_hx_int((( (Float)(sides) ) / ( (Float)(4) )));
HXDLIN(  76)				Float lastX = ((Float)0.);
HXDLIN(  76)				Float lastY = ((Float)0.);
HXDLIN(  76)				{
HXLINE(  73)					lastX = (cx + (rx * ::Math_obj::cos(((( (Float)(sides) ) * theta) + omega))));
HXLINE(  74)					lastY = (cy + (ry * ::Math_obj::sin(((( (Float)(sides) ) * theta) + omega))));
            				}
HXLINE(  76)				{
HXLINE(  76)					int _g = 0;
HXDLIN(  76)					int _g1 = (quarter + 1);
HXDLIN(  76)					while((_g < _g1)){
HXLINE(  76)						_g = (_g + 1);
HXDLIN(  76)						int i = (_g - 1);
HXDLIN(  76)						Float nextX = (cx + (rx * ::Math_obj::cos((((( (Float)(i) ) * theta) + ((Float)0.0001)) + omega))));
HXDLIN(  76)						Float nextY = (cy + (ry * ::Math_obj::sin((((( (Float)(i) ) * theta) + ((Float)0.0001)) + omega))));
HXDLIN(  76)						{
HXLINE(  76)							 ::pi_xy::ImageStruct this2 = this1;
HXDLIN(  76)							bool hasHit = false;
HXDLIN(  76)							{
HXLINE(  76)								Float bx = lastX;
HXDLIN(  76)								Float by = lastY;
HXDLIN(  76)								Float cx1 = nextX;
HXDLIN(  76)								Float cy1 = nextY;
HXDLIN(  76)								bool adjustWinding = (((((cx * by) - (bx * cy)) + ((bx * cy1) - (cx1 * by))) + ((cx1 * cy) - (cx * cy1))) > 0);
HXDLIN(  76)								if (!(adjustWinding)) {
HXLINE(  76)									Float bx_ = bx;
HXDLIN(  76)									Float by_ = by;
HXLINE( 187)									bx = cx1;
HXLINE( 188)									by = cy1;
HXLINE( 189)									cx1 = bx_;
HXLINE( 190)									cy1 = by_;
            								}
HXLINE(  76)								{
HXLINE(  76)									bool hasUndo = false;
HXDLIN(  76)									Float s0 = ((cy * cx1) - (cx * cy1));
HXDLIN(  76)									Float sx = (cy1 - cy);
HXDLIN(  76)									Float sy = (cx - cx1);
HXDLIN(  76)									Float t0 = ((cx * by) - (cy * bx));
HXDLIN(  76)									Float tx = (cy - by);
HXDLIN(  76)									Float ty = (bx - cx);
HXDLIN(  76)									Float A = ((((-(by) * cx1) + (cy * (-(bx) + cx1))) + (cx * (by - cy1))) + (bx * cy1));
HXDLIN(  76)									 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  76)									if ((cx > bx)) {
HXLINE(  76)										if ((cx > cx1)) {
HXLINE(  76)											int min;
HXDLIN(  76)											if ((bx > cx1)) {
HXLINE(  76)												min = ::Math_obj::floor(cx1);
            											}
            											else {
HXLINE(  76)												min = ::Math_obj::floor(bx);
            											}
HXDLIN(  76)											int ii_min = min;
HXDLIN(  76)											int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  76)											xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            										}
            										else {
HXLINE(  76)											int ii_min1 = ::Math_obj::floor(bx);
HXDLIN(  76)											int ii_max1 = ::Math_obj::ceil(cx1);
HXDLIN(  76)											xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            										}
            									}
            									else {
HXLINE(  76)										if ((bx > cx1)) {
HXLINE(  76)											int min1;
HXDLIN(  76)											if ((cx > cx1)) {
HXLINE(  76)												min1 = ::Math_obj::floor(cx1);
            											}
            											else {
HXLINE(  76)												min1 = ::Math_obj::ceil(cx);
            											}
HXDLIN(  76)											int ii_min2 = min1;
HXDLIN(  76)											int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN(  76)											xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            										}
            										else {
HXLINE(  76)											int ii_min3 = ::Math_obj::floor(cx);
HXDLIN(  76)											int ii_max3 = ::Math_obj::ceil(cx1);
HXDLIN(  76)											xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            										}
            									}
HXDLIN(  76)									 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  76)									if ((cy > by)) {
HXLINE(  76)										if ((cy > cy1)) {
HXLINE(  76)											int min2;
HXDLIN(  76)											if ((by > cy1)) {
HXLINE(  76)												min2 = ::Math_obj::floor(cy1);
            											}
            											else {
HXLINE(  76)												min2 = ::Math_obj::floor(by);
            											}
HXDLIN(  76)											int ii_min4 = min2;
HXDLIN(  76)											int ii_max4 = ::Math_obj::ceil(cy);
HXDLIN(  76)											yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            										}
            										else {
HXLINE(  76)											int ii_min5 = ::Math_obj::floor(by);
HXDLIN(  76)											int ii_max5 = ::Math_obj::ceil(cy1);
HXDLIN(  76)											yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            										}
            									}
            									else {
HXLINE(  76)										if ((by > cy1)) {
HXLINE(  76)											int min3;
HXDLIN(  76)											if ((cy > cy1)) {
HXLINE(  76)												min3 = ::Math_obj::floor(cy1);
            											}
            											else {
HXLINE(  76)												min3 = ::Math_obj::ceil(cy);
            											}
HXDLIN(  76)											int ii_min6 = min3;
HXDLIN(  76)											int ii_max6 = ::Math_obj::ceil(by);
HXDLIN(  76)											yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            										}
            										else {
HXLINE(  76)											int ii_min7 = ::Math_obj::floor(cy);
HXDLIN(  76)											int ii_max7 = ::Math_obj::ceil(cy1);
HXDLIN(  76)											yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            										}
            									}
HXDLIN(  76)									 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  76)									if (hasUndo) {
HXLINE(  76)										int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  76)										int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  76)										 ::Dynamic imageType = null();
HXDLIN(  76)										 ::pi_xy::ImageStruct this3 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  76)										if (::hx::IsNull( imageType )) {
HXLINE(  54)											imageType = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  76)										::Dynamic undoImage1;
HXDLIN(  76)										switch((int)(( (int)(imageType) ))){
            											case (int)0: {
HXLINE(  76)												 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  76)												 ::iterMagic::BytesImg b = byt;
HXDLIN(  76)												{
HXLINE(  76)													b->width = width;
HXDLIN(  76)													b->height = height;
HXDLIN(  76)													b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  76)													b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  76)													{
HXLINE(  76)														int len = b->length;
HXDLIN(  76)														int w = 0;
HXDLIN(  76)														{
HXLINE(  76)															int _g2 = 0;
HXDLIN(  76)															int _g3 = b->height;
HXDLIN(  76)															while((_g2 < _g3)){
HXLINE(  76)																_g2 = (_g2 + 1);
HXDLIN(  76)																int y1 = (_g2 - 1);
HXDLIN(  76)																{
HXLINE(  76)																	int _g4 = 0;
HXDLIN(  76)																	int _g5 = b->width;
HXDLIN(  76)																	while((_g4 < _g5)){
HXLINE(  76)																		_g4 = (_g4 + 1);
HXDLIN(  76)																		int x1 = (_g4 - 1);
HXDLIN(  76)																		{
HXLINE(  76)																			w = (w + 1);
HXDLIN(  76)																			b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  76)																		{
HXLINE(  76)																			w = (w + 1);
HXDLIN(  76)																			b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  76)																		{
HXLINE(  76)																			w = (w + 1);
HXDLIN(  76)																			b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  76)																		{
HXLINE(  76)																			w = (w + 1);
HXDLIN(  76)																			b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  76)												undoImage1 = b;
            											}
            											break;
            											case (int)1: {
HXLINE(  76)												 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  76)												 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  76)												{
HXLINE(  76)													a->width = width;
HXDLIN(  76)													a->height = height;
HXDLIN(  76)													a->data = ::Array_obj< int >::__new(0);
HXDLIN(  76)													a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  76)													{
HXLINE(  76)														int _g6 = 0;
HXDLIN(  76)														int _g7 = a->length;
HXDLIN(  76)														while((_g6 < _g7)){
HXLINE(  76)															_g6 = (_g6 + 1);
HXDLIN(  76)															int i1 = (_g6 - 1);
HXDLIN(  76)															a->data[i1] = 0;
            														}
            													}
            												}
HXDLIN(  76)												undoImage1 = a;
            											}
            											break;
            											case (int)2: {
HXLINE(  76)												 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  76)												 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  76)												{
HXLINE(  76)													b1->width = width;
HXDLIN(  76)													b1->height = height;
HXDLIN(  76)													b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  76)													int size = (b1->length * 4);
HXDLIN(  76)													b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  76)													{
HXLINE(  76)														int _g8 = 0;
HXDLIN(  76)														int _g9 = b1->length;
HXDLIN(  76)														while((_g8 < _g9)){
HXLINE(  76)															_g8 = (_g8 + 1);
HXDLIN(  76)															int i2 = (_g8 - 1);
HXDLIN(  76)															{
HXLINE(  76)																 ::haxe::io::ArrayBufferViewImpl this4 = b1->data;
HXDLIN(  76)																bool undoImage2;
HXDLIN(  76)																if ((i2 >= 0)) {
HXLINE(  76)																	undoImage2 = (i2 < (this4->byteLength >> 2));
            																}
            																else {
HXLINE(  76)																	undoImage2 = false;
            																}
HXDLIN(  76)																if (undoImage2) {
HXLINE(  76)																	 ::haxe::io::Bytes _this = this4->bytes;
HXDLIN(  76)																	int pos = ((i2 << 2) + this4->byteOffset);
HXDLIN(  76)																	_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  76)																	_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  76)																	_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  76)																	_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  76)												undoImage1 = b1;
            											}
            											break;
            											case (int)3: {
HXLINE(  76)												 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  76)												 ::iterMagic::VecIntImg v = vec;
HXDLIN(  76)												{
HXLINE(  76)													v->width = width;
HXDLIN(  76)													v->height = height;
HXDLIN(  76)													v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  76)													v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  76)													{
HXLINE(  76)														int _g10 = 0;
HXDLIN(  76)														int _g11 = v->length;
HXDLIN(  76)														while((_g10 < _g11)){
HXLINE(  76)															_g10 = (_g10 + 1);
HXDLIN(  76)															int i3 = (_g10 - 1);
HXDLIN(  76)															v->data->__unsafe_set(i3,0);
            														}
            													}
            												}
HXDLIN(  76)												undoImage1 = v;
            											}
            											break;
            											case (int)4: {
HXLINE(  76)												 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  76)												 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  76)												{
HXLINE(  76)													b2->width = width;
HXDLIN(  76)													b2->height = height;
HXDLIN(  76)													b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  76)													b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  76)													{
HXLINE(  76)														int len1 = b2->length;
HXDLIN(  76)														 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  76)														if (::hx::IsNull( d->head )) {
HXLINE(  76)															int _g12 = 0;
HXDLIN(  76)															int _g13 = len1;
HXDLIN(  76)															while((_g12 < _g13)){
HXLINE(  76)																_g12 = (_g12 + 1);
HXDLIN(  76)																int i4 = (_g12 - 1);
HXDLIN(  76)																d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            															}
            														}
            														else {
HXLINE(  76)															int _g14 = 0;
HXDLIN(  76)															int _g15 = len1;
HXDLIN(  76)															while((_g14 < _g15)){
HXLINE(  76)																_g14 = (_g14 + 1);
HXDLIN(  76)																int i5 = (_g14 - 1);
HXDLIN(  76)																{
HXLINE(  76)																	 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  76)																	 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  76)																	{
HXLINE(  76)																		int _g16 = 0;
HXDLIN(  76)																		int _g17 = i5;
HXDLIN(  76)																		while((_g16 < _g17)){
HXLINE(  76)																			_g16 = (_g16 + 1);
HXDLIN(  76)																			int i6 = (_g16 - 1);
HXLINE( 345)																			prev = l;
HXLINE( 346)																			l = l->next;
            																		}
            																	}
HXLINE(  76)																	if (::hx::IsNull( prev )) {
HXLINE(  76)																		b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  76)																		l = null();
            																	}
            																	else {
HXLINE(  76)																		prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  76)																		l = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  76)												undoImage1 = b2;
            											}
            											break;
            										}
HXDLIN(  76)										this3->image = undoImage1;
HXDLIN(  76)										this3->width = width;
HXDLIN(  76)										this3->height = height;
HXDLIN(  76)										this3->imageType = ( (int)(imageType) );
HXDLIN(  76)										undoImage = this3;
HXDLIN(  76)										{
HXLINE(  76)											int rectLeft = xIter3->start;
HXDLIN(  76)											int rectTop = yIter3->start;
HXDLIN(  76)											int rectRight = xIter3->max;
HXDLIN(  76)											bool forceClear = false;
HXDLIN(  76)											{
HXLINE(  76)												int _g18 = rectTop;
HXDLIN(  76)												int _g19 = yIter3->max;
HXDLIN(  76)												while((_g18 < _g19)){
HXLINE(  76)													_g18 = (_g18 + 1);
HXDLIN(  76)													int dy1 = (_g18 - 1);
HXDLIN(  76)													{
HXLINE(  76)														int _g20 = rectLeft;
HXDLIN(  76)														int _g21 = rectRight;
HXDLIN(  76)														while((_g20 < _g21)){
HXLINE(  76)															_g20 = (_g20 + 1);
HXDLIN(  76)															int dx1 = (_g20 - 1);
HXDLIN(  76)															::Dynamic this5 = this2->image;
HXDLIN(  76)															int index;
HXDLIN(  76)															if (this2->useVirtualPos) {
HXLINE(  76)																index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx1) - this2->virtualX));
            															}
            															else {
HXLINE(  76)																index = ::Std_obj::_hx_int(( (Float)(((dy1 * this2->width) + dx1)) ));
            															}
HXDLIN(  76)															int c = ::iterMagic::Iimg_obj::get(this5,index);
HXDLIN(  76)															int col;
HXDLIN(  76)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  76)																col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE(  76)																col = c;
            															}
HXDLIN(  76)															bool _hx_tmp;
HXDLIN(  76)															if (this2->useMask) {
HXLINE(  76)																_hx_tmp = ::hx::IsNotNull( this2->mask );
            															}
            															else {
HXLINE(  76)																_hx_tmp = false;
            															}
HXDLIN(  76)															if (_hx_tmp) {
HXLINE(  76)																 ::pi_xy::ImageStruct this6 = this2->mask;
HXDLIN(  76)																::Dynamic this7 = this6->image;
HXDLIN(  76)																int index1;
HXDLIN(  76)																if (this6->useVirtualPos) {
HXLINE(  76)																	index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this6->virtualY) * ( (Float)(this6->width) )) + dx1) - this6->virtualX));
            																}
            																else {
HXLINE(  76)																	index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this6->width) + dx1)) ));
            																}
HXDLIN(  76)																int c1 = ::iterMagic::Iimg_obj::get(this7,index1);
HXDLIN(  76)																int v1;
HXDLIN(  76)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  76)																	v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            																}
            																else {
HXLINE(  76)																	v1 = c1;
            																}
HXDLIN(  76)																int maskPixel = v1;
HXDLIN(  76)																int this8 = col;
HXDLIN(  76)																if ((maskPixel == 0)) {
HXLINE(  76)																	col = this8;
            																}
            																else {
HXLINE(  76)																	Float m0;
HXDLIN(  76)																	int this9 = ((maskPixel >> 24) & 255);
HXDLIN(  76)																	if ((this9 == 0)) {
HXLINE(  76)																		m0 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		m0 = (( (Float)(this9) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float m1;
HXDLIN(  76)																	int this10 = ((maskPixel >> 16) & 255);
HXDLIN(  76)																	if ((this10 == 0)) {
HXLINE(  76)																		m1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		m1 = (( (Float)(this10) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float m2;
HXDLIN(  76)																	int this11 = ((maskPixel >> 8) & 255);
HXDLIN(  76)																	if ((this11 == 0)) {
HXLINE(  76)																		m2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		m2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float m3;
HXDLIN(  76)																	int this12 = (maskPixel & 255);
HXDLIN(  76)																	if ((this12 == 0)) {
HXLINE(  76)																		m3 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		m3 = (( (Float)(this12) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this8 >> 24) & 255)) )));
HXDLIN(  76)																	int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this8 >> 16) & 255)) )));
HXDLIN(  76)																	int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this8 >> 8) & 255)) )));
HXDLIN(  76)																	int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this8 & 255)) )));
HXDLIN(  76)																	col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  76)															if ((col != 0)) {
HXLINE(  76)																int x2 = (dx1 - rectLeft);
HXDLIN(  76)																int y2 = (dy1 - rectTop);
HXDLIN(  76)																int c2 = col;
HXDLIN(  76)																bool _hx_tmp1;
HXDLIN(  76)																if ((((c2 >> 24) & 255) < 254)) {
HXLINE(  76)																	_hx_tmp1 = undoImage->transparent;
            																}
            																else {
HXLINE(  76)																	_hx_tmp1 = false;
            																}
HXDLIN(  76)																if (_hx_tmp1) {
HXLINE(  76)																	int location;
HXDLIN(  76)																	if (undoImage->useVirtualPos) {
HXLINE(  76)																		location = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            																	}
            																	else {
HXLINE(  76)																		location = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            																	}
HXDLIN(  76)																	int this13 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  76)																	int this14;
HXDLIN(  76)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  76)																		this14 = ((((((this13 >> 24) & 255) << 24) | ((this13 & 255) << 16)) | (((this13 >> 8) & 255) << 8)) | ((this13 >> 16) & 255));
            																	}
            																	else {
HXLINE(  76)																		this14 = this13;
            																	}
HXDLIN(  76)																	Float a1;
HXDLIN(  76)																	int this15 = ((this14 >> 24) & 255);
HXDLIN(  76)																	if ((this15 == 0)) {
HXLINE(  76)																		a1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		a1 = (( (Float)(this15) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float r1;
HXDLIN(  76)																	int this16 = ((this14 >> 16) & 255);
HXDLIN(  76)																	if ((this16 == 0)) {
HXLINE(  76)																		r1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		r1 = (( (Float)(this16) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float g1;
HXDLIN(  76)																	int this17 = ((this14 >> 8) & 255);
HXDLIN(  76)																	if ((this17 == 0)) {
HXLINE(  76)																		g1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		g1 = (( (Float)(this17) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float b11;
HXDLIN(  76)																	int this18 = (this14 & 255);
HXDLIN(  76)																	if ((this18 == 0)) {
HXLINE(  76)																		b11 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		b11 = (( (Float)(this18) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float a2;
HXDLIN(  76)																	int this19 = ((col >> 24) & 255);
HXDLIN(  76)																	if ((this19 == 0)) {
HXLINE(  76)																		a2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		a2 = (( (Float)(this19) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float r2;
HXDLIN(  76)																	int this20 = ((col >> 16) & 255);
HXDLIN(  76)																	if ((this20 == 0)) {
HXLINE(  76)																		r2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		r2 = (( (Float)(this20) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float g2;
HXDLIN(  76)																	int this21 = ((col >> 8) & 255);
HXDLIN(  76)																	if ((this21 == 0)) {
HXLINE(  76)																		g2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		g2 = (( (Float)(this21) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float b21;
HXDLIN(  76)																	int this22 = (col & 255);
HXDLIN(  76)																	if ((this22 == 0)) {
HXLINE(  76)																		b21 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		b21 = (( (Float)(this22) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  76)																	int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  76)																	int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  76)																	int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  76)																	int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  76)																	int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  76)																	{
HXLINE(  76)																		int _hx_tmp2;
HXDLIN(  76)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  76)																			_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																		}
            																		else {
HXLINE(  76)																			_hx_tmp2 = blended;
            																		}
HXDLIN(  76)																		::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            																	}
            																}
            																else {
HXLINE(  76)																	::Dynamic this23 = undoImage->image;
HXDLIN(  76)																	int index2;
HXDLIN(  76)																	if (undoImage->useVirtualPos) {
HXLINE(  76)																		index2 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            																	}
            																	else {
HXLINE(  76)																		index2 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            																	}
HXDLIN(  76)																	int _hx_tmp3;
HXDLIN(  76)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  76)																		_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            																	}
            																	else {
HXLINE(  76)																		_hx_tmp3 = c2;
            																	}
HXDLIN(  76)																	::iterMagic::Iimg_obj::set(this23,index2,_hx_tmp3);
            																}
            															}
            															else {
HXLINE(  76)																if (forceClear) {
HXLINE(  76)																	::Dynamic this24 = undoImage->image;
HXDLIN(  76)																	int x3 = (dx1 - rectLeft);
HXDLIN(  76)																	int y3 = (dy1 - rectTop);
HXDLIN(  76)																	int index3;
HXDLIN(  76)																	if (undoImage->useVirtualPos) {
HXLINE(  76)																		index3 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x3) - undoImage->virtualX));
            																	}
            																	else {
HXLINE(  76)																		index3 = ::Std_obj::_hx_int(( (Float)(((y3 * undoImage->width) + x3)) ));
            																	}
HXDLIN(  76)																	::iterMagic::Iimg_obj::set(this24,index3,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  76)									bool foundY = false;
HXDLIN(  76)									Float s = ((Float)0.);
HXDLIN(  76)									Float t = ((Float)0.);
HXDLIN(  76)									Float sxx = ((Float)0.);
HXDLIN(  76)									Float txx = ((Float)0.);
HXDLIN(  76)									{
HXLINE(  76)										int _g_min = xIter3->start;
HXDLIN(  76)										int _g_max = xIter3->max;
HXDLIN(  76)										while((_g_min < _g_max)){
HXLINE(  76)											_g_min = (_g_min + 1);
HXDLIN(  76)											int x4 = (_g_min - 1);
HXLINE( 222)											sxx = (sx * ( (Float)(x4) ));
HXLINE( 223)											txx = (tx * ( (Float)(x4) ));
HXLINE( 224)											foundY = false;
HXLINE(  76)											{
HXLINE(  76)												int _g_min1 = yIter3->start;
HXDLIN(  76)												int _g_max1 = yIter3->max;
HXDLIN(  76)												while((_g_min1 < _g_max1)){
HXLINE(  76)													_g_min1 = (_g_min1 + 1);
HXDLIN(  76)													int y4 = (_g_min1 - 1);
HXLINE( 226)													s = ((s0 + sxx) + (sy * ( (Float)(y4) )));
HXLINE( 227)													t = ((t0 + txx) + (ty * ( (Float)(y4) )));
HXLINE(  76)													bool _hx_tmp4;
HXDLIN(  76)													if (!((s <= 0))) {
HXLINE(  76)														_hx_tmp4 = (t <= 0);
            													}
            													else {
HXLINE(  76)														_hx_tmp4 = true;
            													}
HXDLIN(  76)													if (_hx_tmp4) {
HXLINE(  76)														if (foundY) {
HXLINE(  76)															goto _hx_goto_68;
            														}
            													}
            													else {
HXLINE(  76)														if (((s + t) < A)) {
HXLINE(  76)															int x5 = ::hx::Mod(x4,tileImage->width);
HXDLIN(  76)															int y5 = ::hx::Mod(y4,tileImage->height);
HXDLIN(  76)															::Dynamic this25 = tileImage->image;
HXDLIN(  76)															int index4;
HXDLIN(  76)															if (tileImage->useVirtualPos) {
HXLINE(  76)																index4 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x5) - tileImage->virtualX));
            															}
            															else {
HXLINE(  76)																index4 = ::Std_obj::_hx_int(( (Float)(((y5 * tileImage->width) + x5)) ));
            															}
HXDLIN(  76)															int c3 = ::iterMagic::Iimg_obj::get(this25,index4);
HXDLIN(  76)															int color;
HXDLIN(  76)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  76)																color = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            															}
            															else {
HXLINE(  76)																color = c3;
            															}
HXDLIN(  76)															{
HXLINE(  76)																int c4 = color;
HXDLIN(  76)																bool _hx_tmp5;
HXDLIN(  76)																if ((((c4 >> 24) & 255) < 254)) {
HXLINE(  76)																	_hx_tmp5 = this2->transparent;
            																}
            																else {
HXLINE(  76)																	_hx_tmp5 = false;
            																}
HXDLIN(  76)																if (_hx_tmp5) {
HXLINE(  76)																	int location1;
HXDLIN(  76)																	if (this2->useVirtualPos) {
HXLINE(  76)																		location1 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - this2->virtualY) * ( (Float)(this2->width) )) + x4) - this2->virtualX));
            																	}
            																	else {
HXLINE(  76)																		location1 = ::Std_obj::_hx_int(( (Float)(((y4 * this2->width) + x4)) ));
            																	}
HXDLIN(  76)																	int this26 = ::iterMagic::Iimg_obj::get(this2->image,location1);
HXDLIN(  76)																	int this27;
HXDLIN(  76)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  76)																		this27 = ((((((this26 >> 24) & 255) << 24) | ((this26 & 255) << 16)) | (((this26 >> 8) & 255) << 8)) | ((this26 >> 16) & 255));
            																	}
            																	else {
HXLINE(  76)																		this27 = this26;
            																	}
HXDLIN(  76)																	Float a11;
HXDLIN(  76)																	int this28 = ((this27 >> 24) & 255);
HXDLIN(  76)																	if ((this28 == 0)) {
HXLINE(  76)																		a11 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		a11 = (( (Float)(this28) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float r11;
HXDLIN(  76)																	int this29 = ((this27 >> 16) & 255);
HXDLIN(  76)																	if ((this29 == 0)) {
HXLINE(  76)																		r11 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		r11 = (( (Float)(this29) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float g11;
HXDLIN(  76)																	int this30 = ((this27 >> 8) & 255);
HXDLIN(  76)																	if ((this30 == 0)) {
HXLINE(  76)																		g11 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		g11 = (( (Float)(this30) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float b12;
HXDLIN(  76)																	int this31 = (this27 & 255);
HXDLIN(  76)																	if ((this31 == 0)) {
HXLINE(  76)																		b12 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		b12 = (( (Float)(this31) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float a21;
HXDLIN(  76)																	int this32 = ((color >> 24) & 255);
HXDLIN(  76)																	if ((this32 == 0)) {
HXLINE(  76)																		a21 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		a21 = (( (Float)(this32) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float r21;
HXDLIN(  76)																	int this33 = ((color >> 16) & 255);
HXDLIN(  76)																	if ((this33 == 0)) {
HXLINE(  76)																		r21 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		r21 = (( (Float)(this33) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float g21;
HXDLIN(  76)																	int this34 = ((color >> 8) & 255);
HXDLIN(  76)																	if ((this34 == 0)) {
HXLINE(  76)																		g21 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		g21 = (( (Float)(this34) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float b22;
HXDLIN(  76)																	int this35 = (color & 255);
HXDLIN(  76)																	if ((this35 == 0)) {
HXLINE(  76)																		b22 = ((Float)0.);
            																	}
            																	else {
HXLINE(  76)																		b22 = (( (Float)(this35) ) / ( (Float)(255) ));
            																	}
HXDLIN(  76)																	Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  76)																	int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  76)																	int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  76)																	int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  76)																	int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  76)																	int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  76)																	{
HXLINE(  76)																		int _hx_tmp6;
HXDLIN(  76)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  76)																			_hx_tmp6 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            																		}
            																		else {
HXLINE(  76)																			_hx_tmp6 = blended1;
            																		}
HXDLIN(  76)																		::iterMagic::Iimg_obj::set(this2->image,location1,_hx_tmp6);
            																	}
            																}
            																else {
HXLINE(  76)																	::Dynamic this36 = this2->image;
HXDLIN(  76)																	int index5;
HXDLIN(  76)																	if (this2->useVirtualPos) {
HXLINE(  76)																		index5 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - this2->virtualY) * ( (Float)(this2->width) )) + x4) - this2->virtualX));
            																	}
            																	else {
HXLINE(  76)																		index5 = ::Std_obj::_hx_int(( (Float)(((y4 * this2->width) + x4)) ));
            																	}
HXDLIN(  76)																	int _hx_tmp7;
HXDLIN(  76)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  76)																		_hx_tmp7 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            																	}
            																	else {
HXLINE(  76)																		_hx_tmp7 = c4;
            																	}
HXDLIN(  76)																	::iterMagic::Iimg_obj::set(this36,index5,_hx_tmp7);
            																}
            															}
HXLINE( 236)															foundY = true;
            														}
            														else {
HXLINE(  76)															if (foundY) {
HXLINE(  76)																goto _hx_goto_68;
            															}
            														}
            													}
            												}
            												_hx_goto_68:;
            											}
            										}
            									}
HXDLIN(  76)									if ((hasHit == false)) {
HXLINE(  76)										 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,bx,by,cx1,cy1,true);
HXDLIN(  76)										if (hasUndo) {
HXLINE(  76)											v2->undoImage = undoImage;
HXDLIN(  76)											v2->undoX = xIter3->start;
HXDLIN(  76)											v2->undoY = yIter3->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  93)						lastX = nextX;
HXLINE(  94)						lastY = nextY;
            					}
            				}
            			}
            		}
HXLINE(  77)		{
HXLINE(  77)			 ::pi_xy::ImageStruct this37 = pixelimage;
HXDLIN(  77)			Float x6 = (x + dx);
HXDLIN(  77)			bool hasHit1 = false;
HXDLIN(  77)			Float bx1 = (x6 + ( (Float)(fat) ));
HXDLIN(  77)			Float cy2 = (y + ( (Float)(dy) ));
HXDLIN(  77)			{
HXLINE(  77)				{
HXLINE(  77)					Float bx2 = bx1;
HXDLIN(  77)					Float by1 = y;
HXDLIN(  77)					Float cx2 = x6;
HXDLIN(  77)					Float cy3 = cy2;
HXDLIN(  77)					bool adjustWinding1 = (((((x6 * by1) - (bx2 * y)) + ((bx2 * cy3) - (cx2 * by1))) + ((cx2 * y) - (x6 * cy3))) > 0);
HXDLIN(  77)					if (!(adjustWinding1)) {
HXLINE(  77)						Float bx_1 = bx2;
HXDLIN(  77)						Float by_1 = by1;
HXLINE( 187)						bx2 = cx2;
HXLINE( 188)						by1 = cy3;
HXLINE( 189)						cx2 = bx_1;
HXLINE( 190)						cy3 = by_1;
            					}
HXLINE(  77)					{
HXLINE(  77)						bool hasUndo1 = false;
HXDLIN(  77)						Float s01 = ((y * cx2) - (x6 * cy3));
HXDLIN(  77)						Float sx1 = (cy3 - y);
HXDLIN(  77)						Float sy1 = (x6 - cx2);
HXDLIN(  77)						Float t01 = ((x6 * by1) - (y * bx2));
HXDLIN(  77)						Float tx1 = (y - by1);
HXDLIN(  77)						Float ty1 = (bx2 - x6);
HXDLIN(  77)						Float A1 = ((((-(by1) * cx2) + (y * (-(bx2) + cx2))) + (x6 * (by1 - cy3))) + (bx2 * cy3));
HXDLIN(  77)						 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  77)						if ((x6 > bx2)) {
HXLINE(  77)							if ((x6 > cx2)) {
HXLINE(  77)								int min4;
HXDLIN(  77)								if ((bx2 > cx2)) {
HXLINE(  77)									min4 = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE(  77)									min4 = ::Math_obj::floor(bx2);
            								}
HXDLIN(  77)								int ii_min8 = min4;
HXDLIN(  77)								int ii_max8 = ::Math_obj::ceil(x6);
HXDLIN(  77)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            							}
            							else {
HXLINE(  77)								int ii_min9 = ::Math_obj::floor(bx2);
HXDLIN(  77)								int ii_max9 = ::Math_obj::ceil(cx2);
HXDLIN(  77)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            							}
            						}
            						else {
HXLINE(  77)							if ((bx2 > cx2)) {
HXLINE(  77)								int min5;
HXDLIN(  77)								if ((x6 > cx2)) {
HXLINE(  77)									min5 = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE(  77)									min5 = ::Math_obj::ceil(x6);
            								}
HXDLIN(  77)								int ii_min10 = min5;
HXDLIN(  77)								int ii_max10 = ::Math_obj::ceil(bx2);
HXDLIN(  77)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            							}
            							else {
HXLINE(  77)								int ii_min11 = ::Math_obj::floor(x6);
HXDLIN(  77)								int ii_max11 = ::Math_obj::ceil(cx2);
HXDLIN(  77)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            							}
            						}
HXDLIN(  77)						 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  77)						if ((y > by1)) {
HXLINE(  77)							if ((y > cy3)) {
HXLINE(  77)								int min6;
HXDLIN(  77)								if ((by1 > cy3)) {
HXLINE(  77)									min6 = ::Math_obj::floor(cy3);
            								}
            								else {
HXLINE(  77)									min6 = ::Math_obj::floor(by1);
            								}
HXDLIN(  77)								int ii_min12 = min6;
HXDLIN(  77)								int ii_max12 = ::Math_obj::ceil(y);
HXDLIN(  77)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            							}
            							else {
HXLINE(  77)								int ii_min13 = ::Math_obj::floor(by1);
HXDLIN(  77)								int ii_max13 = ::Math_obj::ceil(cy3);
HXDLIN(  77)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            							}
            						}
            						else {
HXLINE(  77)							if ((by1 > cy3)) {
HXLINE(  77)								int min7;
HXDLIN(  77)								if ((y > cy3)) {
HXLINE(  77)									min7 = ::Math_obj::floor(cy3);
            								}
            								else {
HXLINE(  77)									min7 = ::Math_obj::ceil(y);
            								}
HXDLIN(  77)								int ii_min14 = min7;
HXDLIN(  77)								int ii_max14 = ::Math_obj::ceil(by1);
HXDLIN(  77)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            							}
            							else {
HXLINE(  77)								int ii_min15 = ::Math_obj::floor(y);
HXDLIN(  77)								int ii_max15 = ::Math_obj::ceil(cy3);
HXDLIN(  77)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            							}
            						}
HXDLIN(  77)						 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  77)						if (hasUndo1) {
HXLINE(  77)							int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  77)							int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  77)							 ::Dynamic imageType1 = null();
HXDLIN(  77)							 ::pi_xy::ImageStruct this38 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  77)							if (::hx::IsNull( imageType1 )) {
HXLINE(  54)								imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  77)							::Dynamic undoImage4;
HXDLIN(  77)							switch((int)(( (int)(imageType1) ))){
            								case (int)0: {
HXLINE(  77)									 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  77)									 ::iterMagic::BytesImg b5 = byt1;
HXDLIN(  77)									{
HXLINE(  77)										b5->width = width1;
HXDLIN(  77)										b5->height = height1;
HXDLIN(  77)										b5->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  77)										b5->data = ::haxe::io::Bytes_obj::alloc((b5->length * 4));
HXDLIN(  77)										{
HXLINE(  77)											int len2 = b5->length;
HXDLIN(  77)											int w1 = 0;
HXDLIN(  77)											{
HXLINE(  77)												int _g22 = 0;
HXDLIN(  77)												int _g23 = b5->height;
HXDLIN(  77)												while((_g22 < _g23)){
HXLINE(  77)													_g22 = (_g22 + 1);
HXDLIN(  77)													int y6 = (_g22 - 1);
HXDLIN(  77)													{
HXLINE(  77)														int _g24 = 0;
HXDLIN(  77)														int _g25 = b5->width;
HXDLIN(  77)														while((_g24 < _g25)){
HXLINE(  77)															_g24 = (_g24 + 1);
HXDLIN(  77)															int x7 = (_g24 - 1);
HXDLIN(  77)															{
HXLINE(  77)																w1 = (w1 + 1);
HXDLIN(  77)																b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  77)															{
HXLINE(  77)																w1 = (w1 + 1);
HXDLIN(  77)																b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  77)															{
HXLINE(  77)																w1 = (w1 + 1);
HXDLIN(  77)																b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  77)															{
HXLINE(  77)																w1 = (w1 + 1);
HXDLIN(  77)																b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  77)									undoImage4 = b5;
            								}
            								break;
            								case (int)1: {
HXLINE(  77)									 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  77)									 ::iterMagic::ArrIntImg a6 = arrI1;
HXDLIN(  77)									{
HXLINE(  77)										a6->width = width1;
HXDLIN(  77)										a6->height = height1;
HXDLIN(  77)										a6->data = ::Array_obj< int >::__new(0);
HXDLIN(  77)										a6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  77)										{
HXLINE(  77)											int _g26 = 0;
HXDLIN(  77)											int _g27 = a6->length;
HXDLIN(  77)											while((_g26 < _g27)){
HXLINE(  77)												_g26 = (_g26 + 1);
HXDLIN(  77)												int i7 = (_g26 - 1);
HXDLIN(  77)												a6->data[i7] = 0;
            											}
            										}
            									}
HXDLIN(  77)									undoImage4 = a6;
            								}
            								break;
            								case (int)2: {
HXLINE(  77)									 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  77)									 ::iterMagic::U32ArrImg b6 = u32a1;
HXDLIN(  77)									{
HXLINE(  77)										b6->width = width1;
HXDLIN(  77)										b6->height = height1;
HXDLIN(  77)										b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  77)										int size1 = (b6->length * 4);
HXDLIN(  77)										b6->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  77)										{
HXLINE(  77)											int _g28 = 0;
HXDLIN(  77)											int _g29 = b6->length;
HXDLIN(  77)											while((_g28 < _g29)){
HXLINE(  77)												_g28 = (_g28 + 1);
HXDLIN(  77)												int i8 = (_g28 - 1);
HXDLIN(  77)												{
HXLINE(  77)													 ::haxe::io::ArrayBufferViewImpl this39 = b6->data;
HXDLIN(  77)													bool undoImage5;
HXDLIN(  77)													if ((i8 >= 0)) {
HXLINE(  77)														undoImage5 = (i8 < (this39->byteLength >> 2));
            													}
            													else {
HXLINE(  77)														undoImage5 = false;
            													}
HXDLIN(  77)													if (undoImage5) {
HXLINE(  77)														 ::haxe::io::Bytes _this1 = this39->bytes;
HXDLIN(  77)														int pos1 = ((i8 << 2) + this39->byteOffset);
HXDLIN(  77)														_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  77)														_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  77)														_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  77)														_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  77)									undoImage4 = b6;
            								}
            								break;
            								case (int)3: {
HXLINE(  77)									 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  77)									 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN(  77)									{
HXLINE(  77)										v3->width = width1;
HXDLIN(  77)										v3->height = height1;
HXDLIN(  77)										v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  77)										v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN(  77)										{
HXLINE(  77)											int _g30 = 0;
HXDLIN(  77)											int _g31 = v3->length;
HXDLIN(  77)											while((_g30 < _g31)){
HXLINE(  77)												_g30 = (_g30 + 1);
HXDLIN(  77)												int i9 = (_g30 - 1);
HXDLIN(  77)												v3->data->__unsafe_set(i9,0);
            											}
            										}
            									}
HXDLIN(  77)									undoImage4 = v3;
            								}
            								break;
            								case (int)4: {
HXLINE(  77)									 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  77)									 ::iterMagic::StackIntImg b7 = sInt1;
HXDLIN(  77)									{
HXLINE(  77)										b7->width = width1;
HXDLIN(  77)										b7->height = height1;
HXDLIN(  77)										b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  77)										b7->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  77)										{
HXLINE(  77)											int len3 = b7->length;
HXDLIN(  77)											 ::haxe::ds::GenericStack_Int d1 = b7->data;
HXDLIN(  77)											if (::hx::IsNull( d1->head )) {
HXLINE(  77)												int _g32 = 0;
HXDLIN(  77)												int _g33 = len3;
HXDLIN(  77)												while((_g32 < _g33)){
HXLINE(  77)													_g32 = (_g32 + 1);
HXDLIN(  77)													int i10 = (_g32 - 1);
HXDLIN(  77)													d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            												}
            											}
            											else {
HXLINE(  77)												int _g34 = 0;
HXDLIN(  77)												int _g35 = len3;
HXDLIN(  77)												while((_g34 < _g35)){
HXLINE(  77)													_g34 = (_g34 + 1);
HXDLIN(  77)													int i11 = (_g34 - 1);
HXDLIN(  77)													{
HXLINE(  77)														 ::haxe::ds::GenericCell_Int l1 = b7->data->head;
HXDLIN(  77)														 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  77)														{
HXLINE(  77)															int _g36 = 0;
HXDLIN(  77)															int _g37 = i11;
HXDLIN(  77)															while((_g36 < _g37)){
HXLINE(  77)																_g36 = (_g36 + 1);
HXDLIN(  77)																int i12 = (_g36 - 1);
HXLINE( 345)																prev1 = l1;
HXLINE( 346)																l1 = l1->next;
            															}
            														}
HXLINE(  77)														if (::hx::IsNull( prev1 )) {
HXLINE(  77)															b7->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  77)															l1 = null();
            														}
            														else {
HXLINE(  77)															prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  77)															l1 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  77)									undoImage4 = b7;
            								}
            								break;
            							}
HXDLIN(  77)							this38->image = undoImage4;
HXDLIN(  77)							this38->width = width1;
HXDLIN(  77)							this38->height = height1;
HXDLIN(  77)							this38->imageType = ( (int)(imageType1) );
HXDLIN(  77)							undoImage3 = this38;
HXDLIN(  77)							{
HXLINE(  77)								int rectLeft1 = xIter31->start;
HXDLIN(  77)								int rectTop1 = yIter31->start;
HXDLIN(  77)								int rectRight1 = xIter31->max;
HXDLIN(  77)								bool forceClear1 = false;
HXDLIN(  77)								{
HXLINE(  77)									int _g38 = rectTop1;
HXDLIN(  77)									int _g39 = yIter31->max;
HXDLIN(  77)									while((_g38 < _g39)){
HXLINE(  77)										_g38 = (_g38 + 1);
HXDLIN(  77)										int dy2 = (_g38 - 1);
HXDLIN(  77)										{
HXLINE(  77)											int _g40 = rectLeft1;
HXDLIN(  77)											int _g41 = rectRight1;
HXDLIN(  77)											while((_g40 < _g41)){
HXLINE(  77)												_g40 = (_g40 + 1);
HXDLIN(  77)												int dx2 = (_g40 - 1);
HXDLIN(  77)												::Dynamic this40 = this37->image;
HXDLIN(  77)												int index6;
HXDLIN(  77)												if (this37->useVirtualPos) {
HXLINE(  77)													index6 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this37->virtualY) * ( (Float)(this37->width) )) + dx2) - this37->virtualX));
            												}
            												else {
HXLINE(  77)													index6 = ::Std_obj::_hx_int(( (Float)(((dy2 * this37->width) + dx2)) ));
            												}
HXDLIN(  77)												int c5 = ::iterMagic::Iimg_obj::get(this40,index6);
HXDLIN(  77)												int col1;
HXDLIN(  77)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)													col1 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            												}
            												else {
HXLINE(  77)													col1 = c5;
            												}
HXDLIN(  77)												bool _hx_tmp8;
HXDLIN(  77)												if (this37->useMask) {
HXLINE(  77)													_hx_tmp8 = ::hx::IsNotNull( this37->mask );
            												}
            												else {
HXLINE(  77)													_hx_tmp8 = false;
            												}
HXDLIN(  77)												if (_hx_tmp8) {
HXLINE(  77)													 ::pi_xy::ImageStruct this41 = this37->mask;
HXDLIN(  77)													::Dynamic this42 = this41->image;
HXDLIN(  77)													int index7;
HXDLIN(  77)													if (this41->useVirtualPos) {
HXLINE(  77)														index7 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this41->virtualY) * ( (Float)(this41->width) )) + dx2) - this41->virtualX));
            													}
            													else {
HXLINE(  77)														index7 = ::Std_obj::_hx_int(( (Float)(((dy2 * this41->width) + dx2)) ));
            													}
HXDLIN(  77)													int c6 = ::iterMagic::Iimg_obj::get(this42,index7);
HXDLIN(  77)													int v4;
HXDLIN(  77)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)														v4 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            													}
            													else {
HXLINE(  77)														v4 = c6;
            													}
HXDLIN(  77)													int maskPixel1 = v4;
HXDLIN(  77)													int this43 = col1;
HXDLIN(  77)													if ((maskPixel1 == 0)) {
HXLINE(  77)														col1 = this43;
            													}
            													else {
HXLINE(  77)														Float m01;
HXDLIN(  77)														int this44 = ((maskPixel1 >> 24) & 255);
HXDLIN(  77)														if ((this44 == 0)) {
HXLINE(  77)															m01 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															m01 = (( (Float)(this44) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float m11;
HXDLIN(  77)														int this45 = ((maskPixel1 >> 16) & 255);
HXDLIN(  77)														if ((this45 == 0)) {
HXLINE(  77)															m11 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															m11 = (( (Float)(this45) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float m21;
HXDLIN(  77)														int this46 = ((maskPixel1 >> 8) & 255);
HXDLIN(  77)														if ((this46 == 0)) {
HXLINE(  77)															m21 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															m21 = (( (Float)(this46) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float m31;
HXDLIN(  77)														int this47 = (maskPixel1 & 255);
HXDLIN(  77)														if ((this47 == 0)) {
HXLINE(  77)															m31 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															m31 = (( (Float)(this47) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this43 >> 24) & 255)) )));
HXDLIN(  77)														int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this43 >> 16) & 255)) )));
HXDLIN(  77)														int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this43 >> 8) & 255)) )));
HXDLIN(  77)														int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this43 & 255)) )));
HXDLIN(  77)														col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  77)												if ((col1 != 0)) {
HXLINE(  77)													int x8 = (dx2 - rectLeft1);
HXDLIN(  77)													int y7 = (dy2 - rectTop1);
HXDLIN(  77)													int c7 = col1;
HXDLIN(  77)													bool _hx_tmp9;
HXDLIN(  77)													if ((((c7 >> 24) & 255) < 254)) {
HXLINE(  77)														_hx_tmp9 = undoImage3->transparent;
            													}
            													else {
HXLINE(  77)														_hx_tmp9 = false;
            													}
HXDLIN(  77)													if (_hx_tmp9) {
HXLINE(  77)														int location2;
HXDLIN(  77)														if (undoImage3->useVirtualPos) {
HXLINE(  77)															location2 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x8) - undoImage3->virtualX));
            														}
            														else {
HXLINE(  77)															location2 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage3->width) + x8)) ));
            														}
HXDLIN(  77)														int this48 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN(  77)														int this49;
HXDLIN(  77)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)															this49 = ((((((this48 >> 24) & 255) << 24) | ((this48 & 255) << 16)) | (((this48 >> 8) & 255) << 8)) | ((this48 >> 16) & 255));
            														}
            														else {
HXLINE(  77)															this49 = this48;
            														}
HXDLIN(  77)														Float a12;
HXDLIN(  77)														int this50 = ((this49 >> 24) & 255);
HXDLIN(  77)														if ((this50 == 0)) {
HXLINE(  77)															a12 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															a12 = (( (Float)(this50) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float r12;
HXDLIN(  77)														int this51 = ((this49 >> 16) & 255);
HXDLIN(  77)														if ((this51 == 0)) {
HXLINE(  77)															r12 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															r12 = (( (Float)(this51) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float g12;
HXDLIN(  77)														int this52 = ((this49 >> 8) & 255);
HXDLIN(  77)														if ((this52 == 0)) {
HXLINE(  77)															g12 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															g12 = (( (Float)(this52) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float b13;
HXDLIN(  77)														int this53 = (this49 & 255);
HXDLIN(  77)														if ((this53 == 0)) {
HXLINE(  77)															b13 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															b13 = (( (Float)(this53) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float a22;
HXDLIN(  77)														int this54 = ((col1 >> 24) & 255);
HXDLIN(  77)														if ((this54 == 0)) {
HXLINE(  77)															a22 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															a22 = (( (Float)(this54) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float r22;
HXDLIN(  77)														int this55 = ((col1 >> 16) & 255);
HXDLIN(  77)														if ((this55 == 0)) {
HXLINE(  77)															r22 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															r22 = (( (Float)(this55) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float g22;
HXDLIN(  77)														int this56 = ((col1 >> 8) & 255);
HXDLIN(  77)														if ((this56 == 0)) {
HXLINE(  77)															g22 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															g22 = (( (Float)(this56) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float b23;
HXDLIN(  77)														int this57 = (col1 & 255);
HXDLIN(  77)														if ((this57 == 0)) {
HXLINE(  77)															b23 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															b23 = (( (Float)(this57) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  77)														int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  77)														int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  77)														int b8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  77)														int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  77)														int blended2 = ((((a7 << 24) | (r4 << 16)) | (g4 << 8)) | b8);
HXDLIN(  77)														{
HXLINE(  77)															int _hx_tmp10;
HXDLIN(  77)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)																_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            															}
            															else {
HXLINE(  77)																_hx_tmp10 = blended2;
            															}
HXDLIN(  77)															::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            														}
            													}
            													else {
HXLINE(  77)														::Dynamic this58 = undoImage3->image;
HXDLIN(  77)														int index8;
HXDLIN(  77)														if (undoImage3->useVirtualPos) {
HXLINE(  77)															index8 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x8) - undoImage3->virtualX));
            														}
            														else {
HXLINE(  77)															index8 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage3->width) + x8)) ));
            														}
HXDLIN(  77)														int _hx_tmp11;
HXDLIN(  77)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)															_hx_tmp11 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            														}
            														else {
HXLINE(  77)															_hx_tmp11 = c7;
            														}
HXDLIN(  77)														::iterMagic::Iimg_obj::set(this58,index8,_hx_tmp11);
            													}
            												}
            												else {
HXLINE(  77)													if (forceClear1) {
HXLINE(  77)														::Dynamic this59 = undoImage3->image;
HXDLIN(  77)														int x9 = (dx2 - rectLeft1);
HXDLIN(  77)														int y8 = (dy2 - rectTop1);
HXDLIN(  77)														int index9;
HXDLIN(  77)														if (undoImage3->useVirtualPos) {
HXLINE(  77)															index9 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x9) - undoImage3->virtualX));
            														}
            														else {
HXLINE(  77)															index9 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage3->width) + x9)) ));
            														}
HXDLIN(  77)														::iterMagic::Iimg_obj::set(this59,index9,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  77)						bool foundY1 = false;
HXDLIN(  77)						Float s1 = ((Float)0.);
HXDLIN(  77)						Float t1 = ((Float)0.);
HXDLIN(  77)						Float sxx1 = ((Float)0.);
HXDLIN(  77)						Float txx1 = ((Float)0.);
HXDLIN(  77)						{
HXLINE(  77)							int _g_min2 = xIter31->start;
HXDLIN(  77)							int _g_max2 = xIter31->max;
HXDLIN(  77)							while((_g_min2 < _g_max2)){
HXLINE(  77)								_g_min2 = (_g_min2 + 1);
HXDLIN(  77)								int x10 = (_g_min2 - 1);
HXLINE( 222)								sxx1 = (sx1 * ( (Float)(x10) ));
HXLINE( 223)								txx1 = (tx1 * ( (Float)(x10) ));
HXLINE( 224)								foundY1 = false;
HXLINE(  77)								{
HXLINE(  77)									int _g_min3 = yIter31->start;
HXDLIN(  77)									int _g_max3 = yIter31->max;
HXDLIN(  77)									while((_g_min3 < _g_max3)){
HXLINE(  77)										_g_min3 = (_g_min3 + 1);
HXDLIN(  77)										int y9 = (_g_min3 - 1);
HXLINE( 226)										s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y9) )));
HXLINE( 227)										t1 = ((t01 + txx1) + (ty1 * ( (Float)(y9) )));
HXLINE(  77)										bool _hx_tmp12;
HXDLIN(  77)										if (!((s1 <= 0))) {
HXLINE(  77)											_hx_tmp12 = (t1 <= 0);
            										}
            										else {
HXLINE(  77)											_hx_tmp12 = true;
            										}
HXDLIN(  77)										if (_hx_tmp12) {
HXLINE(  77)											if (foundY1) {
HXLINE(  77)												goto _hx_goto_80;
            											}
            										}
            										else {
HXLINE(  77)											if (((s1 + t1) < A1)) {
HXLINE(  77)												int x11 = ::hx::Mod(x10,tileImage->width);
HXDLIN(  77)												int y10 = ::hx::Mod(y9,tileImage->height);
HXDLIN(  77)												::Dynamic this60 = tileImage->image;
HXDLIN(  77)												int index10;
HXDLIN(  77)												if (tileImage->useVirtualPos) {
HXLINE(  77)													index10 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x11) - tileImage->virtualX));
            												}
            												else {
HXLINE(  77)													index10 = ::Std_obj::_hx_int(( (Float)(((y10 * tileImage->width) + x11)) ));
            												}
HXDLIN(  77)												int c8 = ::iterMagic::Iimg_obj::get(this60,index10);
HXDLIN(  77)												int color1;
HXDLIN(  77)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)													color1 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            												}
            												else {
HXLINE(  77)													color1 = c8;
            												}
HXDLIN(  77)												{
HXLINE(  77)													int c9 = color1;
HXDLIN(  77)													bool _hx_tmp13;
HXDLIN(  77)													if ((((c9 >> 24) & 255) < 254)) {
HXLINE(  77)														_hx_tmp13 = this37->transparent;
            													}
            													else {
HXLINE(  77)														_hx_tmp13 = false;
            													}
HXDLIN(  77)													if (_hx_tmp13) {
HXLINE(  77)														int location3;
HXDLIN(  77)														if (this37->useVirtualPos) {
HXLINE(  77)															location3 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - this37->virtualY) * ( (Float)(this37->width) )) + x10) - this37->virtualX));
            														}
            														else {
HXLINE(  77)															location3 = ::Std_obj::_hx_int(( (Float)(((y9 * this37->width) + x10)) ));
            														}
HXDLIN(  77)														int this61 = ::iterMagic::Iimg_obj::get(this37->image,location3);
HXDLIN(  77)														int this62;
HXDLIN(  77)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)															this62 = ((((((this61 >> 24) & 255) << 24) | ((this61 & 255) << 16)) | (((this61 >> 8) & 255) << 8)) | ((this61 >> 16) & 255));
            														}
            														else {
HXLINE(  77)															this62 = this61;
            														}
HXDLIN(  77)														Float a13;
HXDLIN(  77)														int this63 = ((this62 >> 24) & 255);
HXDLIN(  77)														if ((this63 == 0)) {
HXLINE(  77)															a13 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															a13 = (( (Float)(this63) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float r13;
HXDLIN(  77)														int this64 = ((this62 >> 16) & 255);
HXDLIN(  77)														if ((this64 == 0)) {
HXLINE(  77)															r13 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															r13 = (( (Float)(this64) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float g13;
HXDLIN(  77)														int this65 = ((this62 >> 8) & 255);
HXDLIN(  77)														if ((this65 == 0)) {
HXLINE(  77)															g13 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															g13 = (( (Float)(this65) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float b14;
HXDLIN(  77)														int this66 = (this62 & 255);
HXDLIN(  77)														if ((this66 == 0)) {
HXLINE(  77)															b14 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															b14 = (( (Float)(this66) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float a23;
HXDLIN(  77)														int this67 = ((color1 >> 24) & 255);
HXDLIN(  77)														if ((this67 == 0)) {
HXLINE(  77)															a23 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															a23 = (( (Float)(this67) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float r23;
HXDLIN(  77)														int this68 = ((color1 >> 16) & 255);
HXDLIN(  77)														if ((this68 == 0)) {
HXLINE(  77)															r23 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															r23 = (( (Float)(this68) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float g23;
HXDLIN(  77)														int this69 = ((color1 >> 8) & 255);
HXDLIN(  77)														if ((this69 == 0)) {
HXLINE(  77)															g23 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															g23 = (( (Float)(this69) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float b24;
HXDLIN(  77)														int this70 = (color1 & 255);
HXDLIN(  77)														if ((this70 == 0)) {
HXLINE(  77)															b24 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															b24 = (( (Float)(this70) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  77)														int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  77)														int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  77)														int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN(  77)														int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  77)														int blended3 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN(  77)														{
HXLINE(  77)															int _hx_tmp14;
HXDLIN(  77)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)																_hx_tmp14 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            															}
            															else {
HXLINE(  77)																_hx_tmp14 = blended3;
            															}
HXDLIN(  77)															::iterMagic::Iimg_obj::set(this37->image,location3,_hx_tmp14);
            														}
            													}
            													else {
HXLINE(  77)														::Dynamic this71 = this37->image;
HXDLIN(  77)														int index11;
HXDLIN(  77)														if (this37->useVirtualPos) {
HXLINE(  77)															index11 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - this37->virtualY) * ( (Float)(this37->width) )) + x10) - this37->virtualX));
            														}
            														else {
HXLINE(  77)															index11 = ::Std_obj::_hx_int(( (Float)(((y9 * this37->width) + x10)) ));
            														}
HXDLIN(  77)														int _hx_tmp15;
HXDLIN(  77)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)															_hx_tmp15 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            														}
            														else {
HXLINE(  77)															_hx_tmp15 = c9;
            														}
HXDLIN(  77)														::iterMagic::Iimg_obj::set(this71,index11,_hx_tmp15);
            													}
            												}
HXLINE( 236)												foundY1 = true;
            											}
            											else {
HXLINE(  77)												if (foundY1) {
HXLINE(  77)													goto _hx_goto_80;
            												}
            											}
            										}
            									}
            									_hx_goto_80:;
            								}
            							}
            						}
HXDLIN(  77)						if ((hasHit1 == false)) {
HXLINE(  77)							 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,x6,y,bx2,by1,cx2,cy3,true);
HXDLIN(  77)							if (hasUndo1) {
HXLINE(  77)								v5->undoImage = undoImage3;
HXDLIN(  77)								v5->undoX = xIter31->start;
HXDLIN(  77)								v5->undoY = yIter31->start;
            							}
            						}
            					}
            				}
HXDLIN(  77)				{
HXLINE(  77)					Float bx3 = bx1;
HXDLIN(  77)					Float by2 = cy2;
HXDLIN(  77)					Float cx3 = x6;
HXDLIN(  77)					Float cy4 = cy2;
HXDLIN(  77)					bool adjustWinding2 = (((((bx1 * by2) - (bx3 * y)) + ((bx3 * cy4) - (cx3 * by2))) + ((cx3 * y) - (bx1 * cy4))) > 0);
HXDLIN(  77)					if (!(adjustWinding2)) {
HXLINE(  77)						Float bx_2 = bx3;
HXDLIN(  77)						Float by_2 = by2;
HXLINE( 187)						bx3 = cx3;
HXLINE( 188)						by2 = cy4;
HXLINE( 189)						cx3 = bx_2;
HXLINE( 190)						cy4 = by_2;
            					}
HXLINE(  77)					{
HXLINE(  77)						bool hasUndo2 = false;
HXDLIN(  77)						Float s02 = ((y * cx3) - (bx1 * cy4));
HXDLIN(  77)						Float sx2 = (cy4 - y);
HXDLIN(  77)						Float sy2 = (bx1 - cx3);
HXDLIN(  77)						Float t02 = ((bx1 * by2) - (y * bx3));
HXDLIN(  77)						Float tx2 = (y - by2);
HXDLIN(  77)						Float ty2 = (bx3 - bx1);
HXDLIN(  77)						Float A2 = ((((-(by2) * cx3) + (y * (-(bx3) + cx3))) + (bx1 * (by2 - cy4))) + (bx3 * cy4));
HXDLIN(  77)						 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  77)						if ((bx1 > bx3)) {
HXLINE(  77)							if ((bx1 > cx3)) {
HXLINE(  77)								int min8;
HXDLIN(  77)								if ((bx3 > cx3)) {
HXLINE(  77)									min8 = ::Math_obj::floor(cx3);
            								}
            								else {
HXLINE(  77)									min8 = ::Math_obj::floor(bx3);
            								}
HXDLIN(  77)								int ii_min16 = min8;
HXDLIN(  77)								int ii_max16 = ::Math_obj::ceil(bx1);
HXDLIN(  77)								xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            							}
            							else {
HXLINE(  77)								int ii_min17 = ::Math_obj::floor(bx3);
HXDLIN(  77)								int ii_max17 = ::Math_obj::ceil(cx3);
HXDLIN(  77)								xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            							}
            						}
            						else {
HXLINE(  77)							if ((bx3 > cx3)) {
HXLINE(  77)								int min9;
HXDLIN(  77)								if ((bx1 > cx3)) {
HXLINE(  77)									min9 = ::Math_obj::floor(cx3);
            								}
            								else {
HXLINE(  77)									min9 = ::Math_obj::ceil(bx1);
            								}
HXDLIN(  77)								int ii_min18 = min9;
HXDLIN(  77)								int ii_max18 = ::Math_obj::ceil(bx3);
HXDLIN(  77)								xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            							}
            							else {
HXLINE(  77)								int ii_min19 = ::Math_obj::floor(bx1);
HXDLIN(  77)								int ii_max19 = ::Math_obj::ceil(cx3);
HXDLIN(  77)								xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            							}
            						}
HXDLIN(  77)						 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  77)						if ((y > by2)) {
HXLINE(  77)							if ((y > cy4)) {
HXLINE(  77)								int min10;
HXDLIN(  77)								if ((by2 > cy4)) {
HXLINE(  77)									min10 = ::Math_obj::floor(cy4);
            								}
            								else {
HXLINE(  77)									min10 = ::Math_obj::floor(by2);
            								}
HXDLIN(  77)								int ii_min20 = min10;
HXDLIN(  77)								int ii_max20 = ::Math_obj::ceil(y);
HXDLIN(  77)								yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            							}
            							else {
HXLINE(  77)								int ii_min21 = ::Math_obj::floor(by2);
HXDLIN(  77)								int ii_max21 = ::Math_obj::ceil(cy4);
HXDLIN(  77)								yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            							}
            						}
            						else {
HXLINE(  77)							if ((by2 > cy4)) {
HXLINE(  77)								int min11;
HXDLIN(  77)								if ((y > cy4)) {
HXLINE(  77)									min11 = ::Math_obj::floor(cy4);
            								}
            								else {
HXLINE(  77)									min11 = ::Math_obj::ceil(y);
            								}
HXDLIN(  77)								int ii_min22 = min11;
HXDLIN(  77)								int ii_max22 = ::Math_obj::ceil(by2);
HXDLIN(  77)								yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            							}
            							else {
HXLINE(  77)								int ii_min23 = ::Math_obj::floor(y);
HXDLIN(  77)								int ii_max23 = ::Math_obj::ceil(cy4);
HXDLIN(  77)								yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            							}
            						}
HXDLIN(  77)						 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  77)						if (hasUndo2) {
HXLINE(  77)							int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  77)							int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  77)							 ::Dynamic imageType2 = null();
HXDLIN(  77)							 ::pi_xy::ImageStruct this72 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  77)							if (::hx::IsNull( imageType2 )) {
HXLINE(  54)								imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  77)							::Dynamic undoImage7;
HXDLIN(  77)							switch((int)(( (int)(imageType2) ))){
            								case (int)0: {
HXLINE(  77)									 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  77)									 ::iterMagic::BytesImg b10 = byt2;
HXDLIN(  77)									{
HXLINE(  77)										b10->width = width2;
HXDLIN(  77)										b10->height = height2;
HXDLIN(  77)										b10->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  77)										b10->data = ::haxe::io::Bytes_obj::alloc((b10->length * 4));
HXDLIN(  77)										{
HXLINE(  77)											int len4 = b10->length;
HXDLIN(  77)											int w2 = 0;
HXDLIN(  77)											{
HXLINE(  77)												int _g42 = 0;
HXDLIN(  77)												int _g43 = b10->height;
HXDLIN(  77)												while((_g42 < _g43)){
HXLINE(  77)													_g42 = (_g42 + 1);
HXDLIN(  77)													int y11 = (_g42 - 1);
HXDLIN(  77)													{
HXLINE(  77)														int _g44 = 0;
HXDLIN(  77)														int _g45 = b10->width;
HXDLIN(  77)														while((_g44 < _g45)){
HXLINE(  77)															_g44 = (_g44 + 1);
HXDLIN(  77)															int x12 = (_g44 - 1);
HXDLIN(  77)															{
HXLINE(  77)																w2 = (w2 + 1);
HXDLIN(  77)																b10->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  77)															{
HXLINE(  77)																w2 = (w2 + 1);
HXDLIN(  77)																b10->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  77)															{
HXLINE(  77)																w2 = (w2 + 1);
HXDLIN(  77)																b10->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  77)															{
HXLINE(  77)																w2 = (w2 + 1);
HXDLIN(  77)																b10->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  77)									undoImage7 = b10;
            								}
            								break;
            								case (int)1: {
HXLINE(  77)									 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  77)									 ::iterMagic::ArrIntImg a9 = arrI2;
HXDLIN(  77)									{
HXLINE(  77)										a9->width = width2;
HXDLIN(  77)										a9->height = height2;
HXDLIN(  77)										a9->data = ::Array_obj< int >::__new(0);
HXDLIN(  77)										a9->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  77)										{
HXLINE(  77)											int _g46 = 0;
HXDLIN(  77)											int _g47 = a9->length;
HXDLIN(  77)											while((_g46 < _g47)){
HXLINE(  77)												_g46 = (_g46 + 1);
HXDLIN(  77)												int i13 = (_g46 - 1);
HXDLIN(  77)												a9->data[i13] = 0;
            											}
            										}
            									}
HXDLIN(  77)									undoImage7 = a9;
            								}
            								break;
            								case (int)2: {
HXLINE(  77)									 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  77)									 ::iterMagic::U32ArrImg b15 = u32a2;
HXDLIN(  77)									{
HXLINE(  77)										b15->width = width2;
HXDLIN(  77)										b15->height = height2;
HXDLIN(  77)										b15->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  77)										int size2 = (b15->length * 4);
HXDLIN(  77)										b15->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  77)										{
HXLINE(  77)											int _g48 = 0;
HXDLIN(  77)											int _g49 = b15->length;
HXDLIN(  77)											while((_g48 < _g49)){
HXLINE(  77)												_g48 = (_g48 + 1);
HXDLIN(  77)												int i14 = (_g48 - 1);
HXDLIN(  77)												{
HXLINE(  77)													 ::haxe::io::ArrayBufferViewImpl this73 = b15->data;
HXDLIN(  77)													bool undoImage8;
HXDLIN(  77)													if ((i14 >= 0)) {
HXLINE(  77)														undoImage8 = (i14 < (this73->byteLength >> 2));
            													}
            													else {
HXLINE(  77)														undoImage8 = false;
            													}
HXDLIN(  77)													if (undoImage8) {
HXLINE(  77)														 ::haxe::io::Bytes _this2 = this73->bytes;
HXDLIN(  77)														int pos2 = ((i14 << 2) + this73->byteOffset);
HXDLIN(  77)														_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  77)														_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  77)														_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  77)														_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  77)									undoImage7 = b15;
            								}
            								break;
            								case (int)3: {
HXLINE(  77)									 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  77)									 ::iterMagic::VecIntImg v6 = vec2;
HXDLIN(  77)									{
HXLINE(  77)										v6->width = width2;
HXDLIN(  77)										v6->height = height2;
HXDLIN(  77)										v6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  77)										v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN(  77)										{
HXLINE(  77)											int _g50 = 0;
HXDLIN(  77)											int _g51 = v6->length;
HXDLIN(  77)											while((_g50 < _g51)){
HXLINE(  77)												_g50 = (_g50 + 1);
HXDLIN(  77)												int i15 = (_g50 - 1);
HXDLIN(  77)												v6->data->__unsafe_set(i15,0);
            											}
            										}
            									}
HXDLIN(  77)									undoImage7 = v6;
            								}
            								break;
            								case (int)4: {
HXLINE(  77)									 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  77)									 ::iterMagic::StackIntImg b16 = sInt2;
HXDLIN(  77)									{
HXLINE(  77)										b16->width = width2;
HXDLIN(  77)										b16->height = height2;
HXDLIN(  77)										b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  77)										b16->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  77)										{
HXLINE(  77)											int len5 = b16->length;
HXDLIN(  77)											 ::haxe::ds::GenericStack_Int d2 = b16->data;
HXDLIN(  77)											if (::hx::IsNull( d2->head )) {
HXLINE(  77)												int _g52 = 0;
HXDLIN(  77)												int _g53 = len5;
HXDLIN(  77)												while((_g52 < _g53)){
HXLINE(  77)													_g52 = (_g52 + 1);
HXDLIN(  77)													int i16 = (_g52 - 1);
HXDLIN(  77)													d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            												}
            											}
            											else {
HXLINE(  77)												int _g54 = 0;
HXDLIN(  77)												int _g55 = len5;
HXDLIN(  77)												while((_g54 < _g55)){
HXLINE(  77)													_g54 = (_g54 + 1);
HXDLIN(  77)													int i17 = (_g54 - 1);
HXDLIN(  77)													{
HXLINE(  77)														 ::haxe::ds::GenericCell_Int l2 = b16->data->head;
HXDLIN(  77)														 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  77)														{
HXLINE(  77)															int _g56 = 0;
HXDLIN(  77)															int _g57 = i17;
HXDLIN(  77)															while((_g56 < _g57)){
HXLINE(  77)																_g56 = (_g56 + 1);
HXDLIN(  77)																int i18 = (_g56 - 1);
HXLINE( 345)																prev2 = l2;
HXLINE( 346)																l2 = l2->next;
            															}
            														}
HXLINE(  77)														if (::hx::IsNull( prev2 )) {
HXLINE(  77)															b16->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  77)															l2 = null();
            														}
            														else {
HXLINE(  77)															prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  77)															l2 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  77)									undoImage7 = b16;
            								}
            								break;
            							}
HXDLIN(  77)							this72->image = undoImage7;
HXDLIN(  77)							this72->width = width2;
HXDLIN(  77)							this72->height = height2;
HXDLIN(  77)							this72->imageType = ( (int)(imageType2) );
HXDLIN(  77)							undoImage6 = this72;
HXDLIN(  77)							{
HXLINE(  77)								int rectLeft2 = xIter32->start;
HXDLIN(  77)								int rectTop2 = yIter32->start;
HXDLIN(  77)								int rectRight2 = xIter32->max;
HXDLIN(  77)								bool forceClear2 = false;
HXDLIN(  77)								{
HXLINE(  77)									int _g58 = rectTop2;
HXDLIN(  77)									int _g59 = yIter32->max;
HXDLIN(  77)									while((_g58 < _g59)){
HXLINE(  77)										_g58 = (_g58 + 1);
HXDLIN(  77)										int dy3 = (_g58 - 1);
HXDLIN(  77)										{
HXLINE(  77)											int _g60 = rectLeft2;
HXDLIN(  77)											int _g61 = rectRight2;
HXDLIN(  77)											while((_g60 < _g61)){
HXLINE(  77)												_g60 = (_g60 + 1);
HXDLIN(  77)												int dx3 = (_g60 - 1);
HXDLIN(  77)												::Dynamic this74 = this37->image;
HXDLIN(  77)												int index12;
HXDLIN(  77)												if (this37->useVirtualPos) {
HXLINE(  77)													index12 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this37->virtualY) * ( (Float)(this37->width) )) + dx3) - this37->virtualX));
            												}
            												else {
HXLINE(  77)													index12 = ::Std_obj::_hx_int(( (Float)(((dy3 * this37->width) + dx3)) ));
            												}
HXDLIN(  77)												int c10 = ::iterMagic::Iimg_obj::get(this74,index12);
HXDLIN(  77)												int col2;
HXDLIN(  77)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)													col2 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            												}
            												else {
HXLINE(  77)													col2 = c10;
            												}
HXDLIN(  77)												bool _hx_tmp16;
HXDLIN(  77)												if (this37->useMask) {
HXLINE(  77)													_hx_tmp16 = ::hx::IsNotNull( this37->mask );
            												}
            												else {
HXLINE(  77)													_hx_tmp16 = false;
            												}
HXDLIN(  77)												if (_hx_tmp16) {
HXLINE(  77)													 ::pi_xy::ImageStruct this75 = this37->mask;
HXDLIN(  77)													::Dynamic this76 = this75->image;
HXDLIN(  77)													int index13;
HXDLIN(  77)													if (this75->useVirtualPos) {
HXLINE(  77)														index13 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this75->virtualY) * ( (Float)(this75->width) )) + dx3) - this75->virtualX));
            													}
            													else {
HXLINE(  77)														index13 = ::Std_obj::_hx_int(( (Float)(((dy3 * this75->width) + dx3)) ));
            													}
HXDLIN(  77)													int c11 = ::iterMagic::Iimg_obj::get(this76,index13);
HXDLIN(  77)													int v7;
HXDLIN(  77)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)														v7 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            													}
            													else {
HXLINE(  77)														v7 = c11;
            													}
HXDLIN(  77)													int maskPixel2 = v7;
HXDLIN(  77)													int this77 = col2;
HXDLIN(  77)													if ((maskPixel2 == 0)) {
HXLINE(  77)														col2 = this77;
            													}
            													else {
HXLINE(  77)														Float m02;
HXDLIN(  77)														int this78 = ((maskPixel2 >> 24) & 255);
HXDLIN(  77)														if ((this78 == 0)) {
HXLINE(  77)															m02 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															m02 = (( (Float)(this78) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float m12;
HXDLIN(  77)														int this79 = ((maskPixel2 >> 16) & 255);
HXDLIN(  77)														if ((this79 == 0)) {
HXLINE(  77)															m12 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															m12 = (( (Float)(this79) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float m22;
HXDLIN(  77)														int this80 = ((maskPixel2 >> 8) & 255);
HXDLIN(  77)														if ((this80 == 0)) {
HXLINE(  77)															m22 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															m22 = (( (Float)(this80) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float m32;
HXDLIN(  77)														int this81 = (maskPixel2 & 255);
HXDLIN(  77)														if ((this81 == 0)) {
HXLINE(  77)															m32 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															m32 = (( (Float)(this81) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this77 >> 24) & 255)) )));
HXDLIN(  77)														int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this77 >> 16) & 255)) )));
HXDLIN(  77)														int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this77 >> 8) & 255)) )));
HXDLIN(  77)														int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this77 & 255)) )));
HXDLIN(  77)														col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  77)												if ((col2 != 0)) {
HXLINE(  77)													int x13 = (dx3 - rectLeft2);
HXDLIN(  77)													int y12 = (dy3 - rectTop2);
HXDLIN(  77)													int c12 = col2;
HXDLIN(  77)													bool _hx_tmp17;
HXDLIN(  77)													if ((((c12 >> 24) & 255) < 254)) {
HXLINE(  77)														_hx_tmp17 = undoImage6->transparent;
            													}
            													else {
HXLINE(  77)														_hx_tmp17 = false;
            													}
HXDLIN(  77)													if (_hx_tmp17) {
HXLINE(  77)														int location4;
HXDLIN(  77)														if (undoImage6->useVirtualPos) {
HXLINE(  77)															location4 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x13) - undoImage6->virtualX));
            														}
            														else {
HXLINE(  77)															location4 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage6->width) + x13)) ));
            														}
HXDLIN(  77)														int this82 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN(  77)														int this83;
HXDLIN(  77)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)															this83 = ((((((this82 >> 24) & 255) << 24) | ((this82 & 255) << 16)) | (((this82 >> 8) & 255) << 8)) | ((this82 >> 16) & 255));
            														}
            														else {
HXLINE(  77)															this83 = this82;
            														}
HXDLIN(  77)														Float a14;
HXDLIN(  77)														int this84 = ((this83 >> 24) & 255);
HXDLIN(  77)														if ((this84 == 0)) {
HXLINE(  77)															a14 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															a14 = (( (Float)(this84) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float r14;
HXDLIN(  77)														int this85 = ((this83 >> 16) & 255);
HXDLIN(  77)														if ((this85 == 0)) {
HXLINE(  77)															r14 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															r14 = (( (Float)(this85) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float g14;
HXDLIN(  77)														int this86 = ((this83 >> 8) & 255);
HXDLIN(  77)														if ((this86 == 0)) {
HXLINE(  77)															g14 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															g14 = (( (Float)(this86) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float b17;
HXDLIN(  77)														int this87 = (this83 & 255);
HXDLIN(  77)														if ((this87 == 0)) {
HXLINE(  77)															b17 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															b17 = (( (Float)(this87) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float a24;
HXDLIN(  77)														int this88 = ((col2 >> 24) & 255);
HXDLIN(  77)														if ((this88 == 0)) {
HXLINE(  77)															a24 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															a24 = (( (Float)(this88) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float r24;
HXDLIN(  77)														int this89 = ((col2 >> 16) & 255);
HXDLIN(  77)														if ((this89 == 0)) {
HXLINE(  77)															r24 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															r24 = (( (Float)(this89) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float g24;
HXDLIN(  77)														int this90 = ((col2 >> 8) & 255);
HXDLIN(  77)														if ((this90 == 0)) {
HXLINE(  77)															g24 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															g24 = (( (Float)(this90) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float b25;
HXDLIN(  77)														int this91 = (col2 & 255);
HXDLIN(  77)														if ((this91 == 0)) {
HXLINE(  77)															b25 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															b25 = (( (Float)(this91) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float a34 = (a14 * (( (Float)(1) ) - a24));
HXDLIN(  77)														int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  77)														int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  77)														int b18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b17 * a34) + (b25 * a24))));
HXDLIN(  77)														int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  77)														int blended4 = ((((a10 << 24) | (r6 << 16)) | (g6 << 8)) | b18);
HXDLIN(  77)														{
HXLINE(  77)															int _hx_tmp18;
HXDLIN(  77)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)																_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            															}
            															else {
HXLINE(  77)																_hx_tmp18 = blended4;
            															}
HXDLIN(  77)															::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            														}
            													}
            													else {
HXLINE(  77)														::Dynamic this92 = undoImage6->image;
HXDLIN(  77)														int index14;
HXDLIN(  77)														if (undoImage6->useVirtualPos) {
HXLINE(  77)															index14 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x13) - undoImage6->virtualX));
            														}
            														else {
HXLINE(  77)															index14 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage6->width) + x13)) ));
            														}
HXDLIN(  77)														int _hx_tmp19;
HXDLIN(  77)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)															_hx_tmp19 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            														}
            														else {
HXLINE(  77)															_hx_tmp19 = c12;
            														}
HXDLIN(  77)														::iterMagic::Iimg_obj::set(this92,index14,_hx_tmp19);
            													}
            												}
            												else {
HXLINE(  77)													if (forceClear2) {
HXLINE(  77)														::Dynamic this93 = undoImage6->image;
HXDLIN(  77)														int x14 = (dx3 - rectLeft2);
HXDLIN(  77)														int y13 = (dy3 - rectTop2);
HXDLIN(  77)														int index15;
HXDLIN(  77)														if (undoImage6->useVirtualPos) {
HXLINE(  77)															index15 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x14) - undoImage6->virtualX));
            														}
            														else {
HXLINE(  77)															index15 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage6->width) + x14)) ));
            														}
HXDLIN(  77)														::iterMagic::Iimg_obj::set(this93,index15,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  77)						bool foundY2 = false;
HXDLIN(  77)						Float s2 = ((Float)0.);
HXDLIN(  77)						Float t2 = ((Float)0.);
HXDLIN(  77)						Float sxx2 = ((Float)0.);
HXDLIN(  77)						Float txx2 = ((Float)0.);
HXDLIN(  77)						{
HXLINE(  77)							int _g_min4 = xIter32->start;
HXDLIN(  77)							int _g_max4 = xIter32->max;
HXDLIN(  77)							while((_g_min4 < _g_max4)){
HXLINE(  77)								_g_min4 = (_g_min4 + 1);
HXDLIN(  77)								int x15 = (_g_min4 - 1);
HXLINE( 222)								sxx2 = (sx2 * ( (Float)(x15) ));
HXLINE( 223)								txx2 = (tx2 * ( (Float)(x15) ));
HXLINE( 224)								foundY2 = false;
HXLINE(  77)								{
HXLINE(  77)									int _g_min5 = yIter32->start;
HXDLIN(  77)									int _g_max5 = yIter32->max;
HXDLIN(  77)									while((_g_min5 < _g_max5)){
HXLINE(  77)										_g_min5 = (_g_min5 + 1);
HXDLIN(  77)										int y14 = (_g_min5 - 1);
HXLINE( 226)										s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y14) )));
HXLINE( 227)										t2 = ((t02 + txx2) + (ty2 * ( (Float)(y14) )));
HXLINE(  77)										bool _hx_tmp20;
HXDLIN(  77)										if (!((s2 <= 0))) {
HXLINE(  77)											_hx_tmp20 = (t2 <= 0);
            										}
            										else {
HXLINE(  77)											_hx_tmp20 = true;
            										}
HXDLIN(  77)										if (_hx_tmp20) {
HXLINE(  77)											if (foundY2) {
HXLINE(  77)												goto _hx_goto_92;
            											}
            										}
            										else {
HXLINE(  77)											if (((s2 + t2) < A2)) {
HXLINE(  77)												int x16 = ::hx::Mod(x15,tileImage->width);
HXDLIN(  77)												int y15 = ::hx::Mod(y14,tileImage->height);
HXDLIN(  77)												::Dynamic this94 = tileImage->image;
HXDLIN(  77)												int index16;
HXDLIN(  77)												if (tileImage->useVirtualPos) {
HXLINE(  77)													index16 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x16) - tileImage->virtualX));
            												}
            												else {
HXLINE(  77)													index16 = ::Std_obj::_hx_int(( (Float)(((y15 * tileImage->width) + x16)) ));
            												}
HXDLIN(  77)												int c13 = ::iterMagic::Iimg_obj::get(this94,index16);
HXDLIN(  77)												int color2;
HXDLIN(  77)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)													color2 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            												}
            												else {
HXLINE(  77)													color2 = c13;
            												}
HXDLIN(  77)												{
HXLINE(  77)													int c14 = color2;
HXDLIN(  77)													bool _hx_tmp21;
HXDLIN(  77)													if ((((c14 >> 24) & 255) < 254)) {
HXLINE(  77)														_hx_tmp21 = this37->transparent;
            													}
            													else {
HXLINE(  77)														_hx_tmp21 = false;
            													}
HXDLIN(  77)													if (_hx_tmp21) {
HXLINE(  77)														int location5;
HXDLIN(  77)														if (this37->useVirtualPos) {
HXLINE(  77)															location5 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - this37->virtualY) * ( (Float)(this37->width) )) + x15) - this37->virtualX));
            														}
            														else {
HXLINE(  77)															location5 = ::Std_obj::_hx_int(( (Float)(((y14 * this37->width) + x15)) ));
            														}
HXDLIN(  77)														int this95 = ::iterMagic::Iimg_obj::get(this37->image,location5);
HXDLIN(  77)														int this96;
HXDLIN(  77)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)															this96 = ((((((this95 >> 24) & 255) << 24) | ((this95 & 255) << 16)) | (((this95 >> 8) & 255) << 8)) | ((this95 >> 16) & 255));
            														}
            														else {
HXLINE(  77)															this96 = this95;
            														}
HXDLIN(  77)														Float a15;
HXDLIN(  77)														int this97 = ((this96 >> 24) & 255);
HXDLIN(  77)														if ((this97 == 0)) {
HXLINE(  77)															a15 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															a15 = (( (Float)(this97) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float r15;
HXDLIN(  77)														int this98 = ((this96 >> 16) & 255);
HXDLIN(  77)														if ((this98 == 0)) {
HXLINE(  77)															r15 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															r15 = (( (Float)(this98) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float g15;
HXDLIN(  77)														int this99 = ((this96 >> 8) & 255);
HXDLIN(  77)														if ((this99 == 0)) {
HXLINE(  77)															g15 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															g15 = (( (Float)(this99) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float b19;
HXDLIN(  77)														int this100 = (this96 & 255);
HXDLIN(  77)														if ((this100 == 0)) {
HXLINE(  77)															b19 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															b19 = (( (Float)(this100) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float a25;
HXDLIN(  77)														int this101 = ((color2 >> 24) & 255);
HXDLIN(  77)														if ((this101 == 0)) {
HXLINE(  77)															a25 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															a25 = (( (Float)(this101) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float r25;
HXDLIN(  77)														int this102 = ((color2 >> 16) & 255);
HXDLIN(  77)														if ((this102 == 0)) {
HXLINE(  77)															r25 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															r25 = (( (Float)(this102) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float g25;
HXDLIN(  77)														int this103 = ((color2 >> 8) & 255);
HXDLIN(  77)														if ((this103 == 0)) {
HXLINE(  77)															g25 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															g25 = (( (Float)(this103) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float b26;
HXDLIN(  77)														int this104 = (color2 & 255);
HXDLIN(  77)														if ((this104 == 0)) {
HXLINE(  77)															b26 = ((Float)0.);
            														}
            														else {
HXLINE(  77)															b26 = (( (Float)(this104) ) / ( (Float)(255) ));
            														}
HXDLIN(  77)														Float a35 = (a15 * (( (Float)(1) ) - a25));
HXDLIN(  77)														int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  77)														int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  77)														int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a35) + (b26 * a25))));
HXDLIN(  77)														int a16 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  77)														int blended5 = ((((a16 << 24) | (r7 << 16)) | (g7 << 8)) | b20);
HXDLIN(  77)														{
HXLINE(  77)															int _hx_tmp22;
HXDLIN(  77)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)																_hx_tmp22 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            															}
            															else {
HXLINE(  77)																_hx_tmp22 = blended5;
            															}
HXDLIN(  77)															::iterMagic::Iimg_obj::set(this37->image,location5,_hx_tmp22);
            														}
            													}
            													else {
HXLINE(  77)														::Dynamic this105 = this37->image;
HXDLIN(  77)														int index17;
HXDLIN(  77)														if (this37->useVirtualPos) {
HXLINE(  77)															index17 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - this37->virtualY) * ( (Float)(this37->width) )) + x15) - this37->virtualX));
            														}
            														else {
HXLINE(  77)															index17 = ::Std_obj::_hx_int(( (Float)(((y14 * this37->width) + x15)) ));
            														}
HXDLIN(  77)														int _hx_tmp23;
HXDLIN(  77)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  77)															_hx_tmp23 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            														}
            														else {
HXLINE(  77)															_hx_tmp23 = c14;
            														}
HXDLIN(  77)														::iterMagic::Iimg_obj::set(this105,index17,_hx_tmp23);
            													}
            												}
HXLINE( 236)												foundY2 = true;
            											}
            											else {
HXLINE(  77)												if (foundY2) {
HXLINE(  77)													goto _hx_goto_92;
            												}
            											}
            										}
            									}
            									_hx_goto_92:;
            								}
            							}
            						}
HXDLIN(  77)						if ((hasHit1 == false)) {
HXLINE(  77)							 ::pi_xy::algo::HitTri v8 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx1,y,bx3,by2,cx3,cy4,true);
HXDLIN(  77)							if (hasUndo2) {
HXLINE(  77)								v8->undoImage = undoImage6;
HXDLIN(  77)								v8->undoX = xIter32->start;
HXDLIN(  77)								v8->undoY = yIter32->start;
            							}
            						}
            					}
            				}
HXDLIN(  77)				if ((hasHit1 == true)) {
HXLINE(  77)					 ::pi_xy::algo::HitQuad v9 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,x6,y,bx1,y,bx1,cy2,x6,cy2,true);
            				}
            			}
            		}
HXLINE(  78)		{
HXLINE(  78)			 ::pi_xy::ImageStruct this106 = pixelimage;
HXDLIN(  78)			Float cy5 = (y + dy);
HXDLIN(  78)			Float ry1 = ( (Float)(dy) );
HXDLIN(  78)			{
HXLINE(  78)				 ::Dynamic targetError1 = ((Float)1.05);
HXDLIN(  78)				if (::hx::IsNull( targetError1 )) {
HXLINE( 101)					targetError1 = ((Float)1.05);
            				}
HXLINE(  78)				Float rSmall1;
HXDLIN(  78)				if ((rightRadius > ry1)) {
HXLINE(  78)					rSmall1 = ry1;
            				}
            				else {
HXLINE(  78)					rSmall1 = rightRadius;
            				}
HXDLIN(  78)				 ::Dynamic targetE1 = ( (Float)(targetError1) );
HXDLIN(  78)				if (::hx::IsNull( targetE1 )) {
HXLINE(  20)					targetE1 = ((Float)1.05);
            				}
HXLINE(  78)				int result1 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE1) ) / rSmall1)))));
HXDLIN(  78)				int noSides1;
HXDLIN(  78)				if ((result1 < 12)) {
HXLINE(  78)					noSides1 = 12;
            				}
            				else {
HXLINE(  78)					if ((result1 > 500)) {
HXLINE(  78)						noSides1 = 500;
            					}
            					else {
HXLINE(  78)						noSides1 = result1;
            					}
            				}
HXDLIN(  78)				int sides1 = (::Math_obj::ceil((( (Float)(noSides1) ) / ( (Float)(4) ))) * 4);
HXDLIN(  78)				Float theta1 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides1) ));
HXDLIN(  78)				Float omega1 = ((( (Float)(3) ) * ::Math_obj::PI) / ( (Float)(2) ));
HXDLIN(  78)				int quarter1 = ::Std_obj::_hx_int((( (Float)(sides1) ) / ( (Float)(4) )));
HXDLIN(  78)				Float lastX1 = ((Float)0.);
HXDLIN(  78)				Float lastY1 = ((Float)0.);
HXDLIN(  78)				{
HXLINE(  73)					lastX1 = (farX + (rightRadius * ::Math_obj::cos(((( (Float)(sides1) ) * theta1) + omega1))));
HXLINE(  74)					lastY1 = (cy5 + (ry1 * ::Math_obj::sin(((( (Float)(sides1) ) * theta1) + omega1))));
            				}
HXLINE(  78)				{
HXLINE(  78)					int _g62 = 0;
HXDLIN(  78)					int _g63 = (quarter1 + 1);
HXDLIN(  78)					while((_g62 < _g63)){
HXLINE(  78)						_g62 = (_g62 + 1);
HXDLIN(  78)						int i19 = (_g62 - 1);
HXDLIN(  78)						Float nextX1 = (farX + (rightRadius * ::Math_obj::cos((((( (Float)(i19) ) * theta1) + ((Float)0.0001)) + omega1))));
HXDLIN(  78)						Float nextY1 = (cy5 + (ry1 * ::Math_obj::sin((((( (Float)(i19) ) * theta1) + ((Float)0.0001)) + omega1))));
HXDLIN(  78)						{
HXLINE(  78)							 ::pi_xy::ImageStruct this107 = this106;
HXDLIN(  78)							bool hasHit2 = false;
HXDLIN(  78)							{
HXLINE(  78)								Float bx4 = lastX1;
HXDLIN(  78)								Float by3 = lastY1;
HXDLIN(  78)								Float cx4 = nextX1;
HXDLIN(  78)								Float cy6 = nextY1;
HXDLIN(  78)								bool adjustWinding3 = (((((farX * by3) - (bx4 * cy5)) + ((bx4 * cy6) - (cx4 * by3))) + ((cx4 * cy5) - (farX * cy6))) > 0);
HXDLIN(  78)								if (!(adjustWinding3)) {
HXLINE(  78)									Float bx_3 = bx4;
HXDLIN(  78)									Float by_3 = by3;
HXLINE( 187)									bx4 = cx4;
HXLINE( 188)									by3 = cy6;
HXLINE( 189)									cx4 = bx_3;
HXLINE( 190)									cy6 = by_3;
            								}
HXLINE(  78)								{
HXLINE(  78)									bool hasUndo3 = false;
HXDLIN(  78)									Float s03 = ((cy5 * cx4) - (farX * cy6));
HXDLIN(  78)									Float sx3 = (cy6 - cy5);
HXDLIN(  78)									Float sy3 = (farX - cx4);
HXDLIN(  78)									Float t03 = ((farX * by3) - (cy5 * bx4));
HXDLIN(  78)									Float tx3 = (cy5 - by3);
HXDLIN(  78)									Float ty3 = (bx4 - farX);
HXDLIN(  78)									Float A3 = ((((-(by3) * cx4) + (cy5 * (-(bx4) + cx4))) + (farX * (by3 - cy6))) + (bx4 * cy6));
HXDLIN(  78)									 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  78)									if ((farX > bx4)) {
HXLINE(  78)										if ((farX > cx4)) {
HXLINE(  78)											int min12;
HXDLIN(  78)											if ((bx4 > cx4)) {
HXLINE(  78)												min12 = ::Math_obj::floor(cx4);
            											}
            											else {
HXLINE(  78)												min12 = ::Math_obj::floor(bx4);
            											}
HXDLIN(  78)											int ii_min24 = min12;
HXDLIN(  78)											int ii_max24 = ::Math_obj::ceil(farX);
HXDLIN(  78)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            										}
            										else {
HXLINE(  78)											int ii_min25 = ::Math_obj::floor(bx4);
HXDLIN(  78)											int ii_max25 = ::Math_obj::ceil(cx4);
HXDLIN(  78)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            										}
            									}
            									else {
HXLINE(  78)										if ((bx4 > cx4)) {
HXLINE(  78)											int min13;
HXDLIN(  78)											if ((farX > cx4)) {
HXLINE(  78)												min13 = ::Math_obj::floor(cx4);
            											}
            											else {
HXLINE(  78)												min13 = ::Math_obj::ceil(farX);
            											}
HXDLIN(  78)											int ii_min26 = min13;
HXDLIN(  78)											int ii_max26 = ::Math_obj::ceil(bx4);
HXDLIN(  78)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            										}
            										else {
HXLINE(  78)											int ii_min27 = ::Math_obj::floor(farX);
HXDLIN(  78)											int ii_max27 = ::Math_obj::ceil(cx4);
HXDLIN(  78)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            										}
            									}
HXDLIN(  78)									 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  78)									if ((cy5 > by3)) {
HXLINE(  78)										if ((cy5 > cy6)) {
HXLINE(  78)											int min14;
HXDLIN(  78)											if ((by3 > cy6)) {
HXLINE(  78)												min14 = ::Math_obj::floor(cy6);
            											}
            											else {
HXLINE(  78)												min14 = ::Math_obj::floor(by3);
            											}
HXDLIN(  78)											int ii_min28 = min14;
HXDLIN(  78)											int ii_max28 = ::Math_obj::ceil(cy5);
HXDLIN(  78)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            										}
            										else {
HXLINE(  78)											int ii_min29 = ::Math_obj::floor(by3);
HXDLIN(  78)											int ii_max29 = ::Math_obj::ceil(cy6);
HXDLIN(  78)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            										}
            									}
            									else {
HXLINE(  78)										if ((by3 > cy6)) {
HXLINE(  78)											int min15;
HXDLIN(  78)											if ((cy5 > cy6)) {
HXLINE(  78)												min15 = ::Math_obj::floor(cy6);
            											}
            											else {
HXLINE(  78)												min15 = ::Math_obj::ceil(cy5);
            											}
HXDLIN(  78)											int ii_min30 = min15;
HXDLIN(  78)											int ii_max30 = ::Math_obj::ceil(by3);
HXDLIN(  78)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            										}
            										else {
HXLINE(  78)											int ii_min31 = ::Math_obj::floor(cy5);
HXDLIN(  78)											int ii_max31 = ::Math_obj::ceil(cy6);
HXDLIN(  78)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            										}
            									}
HXDLIN(  78)									 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  78)									if (hasUndo3) {
HXLINE(  78)										int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  78)										int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  78)										 ::Dynamic imageType3 = null();
HXDLIN(  78)										 ::pi_xy::ImageStruct this108 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  78)										if (::hx::IsNull( imageType3 )) {
HXLINE(  54)											imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  78)										::Dynamic undoImage10;
HXDLIN(  78)										switch((int)(( (int)(imageType3) ))){
            											case (int)0: {
HXLINE(  78)												 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  78)												 ::iterMagic::BytesImg b27 = byt3;
HXDLIN(  78)												{
HXLINE(  78)													b27->width = width3;
HXDLIN(  78)													b27->height = height3;
HXDLIN(  78)													b27->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  78)													b27->data = ::haxe::io::Bytes_obj::alloc((b27->length * 4));
HXDLIN(  78)													{
HXLINE(  78)														int len6 = b27->length;
HXDLIN(  78)														int w3 = 0;
HXDLIN(  78)														{
HXLINE(  78)															int _g64 = 0;
HXDLIN(  78)															int _g65 = b27->height;
HXDLIN(  78)															while((_g64 < _g65)){
HXLINE(  78)																_g64 = (_g64 + 1);
HXDLIN(  78)																int y16 = (_g64 - 1);
HXDLIN(  78)																{
HXLINE(  78)																	int _g66 = 0;
HXDLIN(  78)																	int _g67 = b27->width;
HXDLIN(  78)																	while((_g66 < _g67)){
HXLINE(  78)																		_g66 = (_g66 + 1);
HXDLIN(  78)																		int x17 = (_g66 - 1);
HXDLIN(  78)																		{
HXLINE(  78)																			w3 = (w3 + 1);
HXDLIN(  78)																			b27->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  78)																		{
HXLINE(  78)																			w3 = (w3 + 1);
HXDLIN(  78)																			b27->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  78)																		{
HXLINE(  78)																			w3 = (w3 + 1);
HXDLIN(  78)																			b27->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  78)																		{
HXLINE(  78)																			w3 = (w3 + 1);
HXDLIN(  78)																			b27->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  78)												undoImage10 = b27;
            											}
            											break;
            											case (int)1: {
HXLINE(  78)												 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  78)												 ::iterMagic::ArrIntImg a17 = arrI3;
HXDLIN(  78)												{
HXLINE(  78)													a17->width = width3;
HXDLIN(  78)													a17->height = height3;
HXDLIN(  78)													a17->data = ::Array_obj< int >::__new(0);
HXDLIN(  78)													a17->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  78)													{
HXLINE(  78)														int _g68 = 0;
HXDLIN(  78)														int _g69 = a17->length;
HXDLIN(  78)														while((_g68 < _g69)){
HXLINE(  78)															_g68 = (_g68 + 1);
HXDLIN(  78)															int i20 = (_g68 - 1);
HXDLIN(  78)															a17->data[i20] = 0;
            														}
            													}
            												}
HXDLIN(  78)												undoImage10 = a17;
            											}
            											break;
            											case (int)2: {
HXLINE(  78)												 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  78)												 ::iterMagic::U32ArrImg b28 = u32a3;
HXDLIN(  78)												{
HXLINE(  78)													b28->width = width3;
HXDLIN(  78)													b28->height = height3;
HXDLIN(  78)													b28->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  78)													int size3 = (b28->length * 4);
HXDLIN(  78)													b28->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  78)													{
HXLINE(  78)														int _g70 = 0;
HXDLIN(  78)														int _g71 = b28->length;
HXDLIN(  78)														while((_g70 < _g71)){
HXLINE(  78)															_g70 = (_g70 + 1);
HXDLIN(  78)															int i21 = (_g70 - 1);
HXDLIN(  78)															{
HXLINE(  78)																 ::haxe::io::ArrayBufferViewImpl this109 = b28->data;
HXDLIN(  78)																bool undoImage11;
HXDLIN(  78)																if ((i21 >= 0)) {
HXLINE(  78)																	undoImage11 = (i21 < (this109->byteLength >> 2));
            																}
            																else {
HXLINE(  78)																	undoImage11 = false;
            																}
HXDLIN(  78)																if (undoImage11) {
HXLINE(  78)																	 ::haxe::io::Bytes _this3 = this109->bytes;
HXDLIN(  78)																	int pos3 = ((i21 << 2) + this109->byteOffset);
HXDLIN(  78)																	_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  78)																	_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  78)																	_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  78)																	_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  78)												undoImage10 = b28;
            											}
            											break;
            											case (int)3: {
HXLINE(  78)												 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  78)												 ::iterMagic::VecIntImg v10 = vec3;
HXDLIN(  78)												{
HXLINE(  78)													v10->width = width3;
HXDLIN(  78)													v10->height = height3;
HXDLIN(  78)													v10->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  78)													v10->data = ::Array_obj< int >::__new(v10->length);
HXDLIN(  78)													{
HXLINE(  78)														int _g72 = 0;
HXDLIN(  78)														int _g73 = v10->length;
HXDLIN(  78)														while((_g72 < _g73)){
HXLINE(  78)															_g72 = (_g72 + 1);
HXDLIN(  78)															int i22 = (_g72 - 1);
HXDLIN(  78)															v10->data->__unsafe_set(i22,0);
            														}
            													}
            												}
HXDLIN(  78)												undoImage10 = v10;
            											}
            											break;
            											case (int)4: {
HXLINE(  78)												 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  78)												 ::iterMagic::StackIntImg b29 = sInt3;
HXDLIN(  78)												{
HXLINE(  78)													b29->width = width3;
HXDLIN(  78)													b29->height = height3;
HXDLIN(  78)													b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  78)													b29->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  78)													{
HXLINE(  78)														int len7 = b29->length;
HXDLIN(  78)														 ::haxe::ds::GenericStack_Int d3 = b29->data;
HXDLIN(  78)														if (::hx::IsNull( d3->head )) {
HXLINE(  78)															int _g74 = 0;
HXDLIN(  78)															int _g75 = len7;
HXDLIN(  78)															while((_g74 < _g75)){
HXLINE(  78)																_g74 = (_g74 + 1);
HXDLIN(  78)																int i23 = (_g74 - 1);
HXDLIN(  78)																d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            															}
            														}
            														else {
HXLINE(  78)															int _g76 = 0;
HXDLIN(  78)															int _g77 = len7;
HXDLIN(  78)															while((_g76 < _g77)){
HXLINE(  78)																_g76 = (_g76 + 1);
HXDLIN(  78)																int i24 = (_g76 - 1);
HXDLIN(  78)																{
HXLINE(  78)																	 ::haxe::ds::GenericCell_Int l3 = b29->data->head;
HXDLIN(  78)																	 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  78)																	{
HXLINE(  78)																		int _g78 = 0;
HXDLIN(  78)																		int _g79 = i24;
HXDLIN(  78)																		while((_g78 < _g79)){
HXLINE(  78)																			_g78 = (_g78 + 1);
HXDLIN(  78)																			int i25 = (_g78 - 1);
HXLINE( 345)																			prev3 = l3;
HXLINE( 346)																			l3 = l3->next;
            																		}
            																	}
HXLINE(  78)																	if (::hx::IsNull( prev3 )) {
HXLINE(  78)																		b29->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  78)																		l3 = null();
            																	}
            																	else {
HXLINE(  78)																		prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  78)																		l3 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  78)												undoImage10 = b29;
            											}
            											break;
            										}
HXDLIN(  78)										this108->image = undoImage10;
HXDLIN(  78)										this108->width = width3;
HXDLIN(  78)										this108->height = height3;
HXDLIN(  78)										this108->imageType = ( (int)(imageType3) );
HXDLIN(  78)										undoImage9 = this108;
HXDLIN(  78)										{
HXLINE(  78)											int rectLeft3 = xIter33->start;
HXDLIN(  78)											int rectTop3 = yIter33->start;
HXDLIN(  78)											int rectRight3 = xIter33->max;
HXDLIN(  78)											bool forceClear3 = false;
HXDLIN(  78)											{
HXLINE(  78)												int _g80 = rectTop3;
HXDLIN(  78)												int _g81 = yIter33->max;
HXDLIN(  78)												while((_g80 < _g81)){
HXLINE(  78)													_g80 = (_g80 + 1);
HXDLIN(  78)													int dy4 = (_g80 - 1);
HXDLIN(  78)													{
HXLINE(  78)														int _g82 = rectLeft3;
HXDLIN(  78)														int _g83 = rectRight3;
HXDLIN(  78)														while((_g82 < _g83)){
HXLINE(  78)															_g82 = (_g82 + 1);
HXDLIN(  78)															int dx4 = (_g82 - 1);
HXDLIN(  78)															::Dynamic this110 = this107->image;
HXDLIN(  78)															int index18;
HXDLIN(  78)															if (this107->useVirtualPos) {
HXLINE(  78)																index18 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this107->virtualY) * ( (Float)(this107->width) )) + dx4) - this107->virtualX));
            															}
            															else {
HXLINE(  78)																index18 = ::Std_obj::_hx_int(( (Float)(((dy4 * this107->width) + dx4)) ));
            															}
HXDLIN(  78)															int c15 = ::iterMagic::Iimg_obj::get(this110,index18);
HXDLIN(  78)															int col3;
HXDLIN(  78)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)																col3 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            															}
            															else {
HXLINE(  78)																col3 = c15;
            															}
HXDLIN(  78)															bool _hx_tmp24;
HXDLIN(  78)															if (this107->useMask) {
HXLINE(  78)																_hx_tmp24 = ::hx::IsNotNull( this107->mask );
            															}
            															else {
HXLINE(  78)																_hx_tmp24 = false;
            															}
HXDLIN(  78)															if (_hx_tmp24) {
HXLINE(  78)																 ::pi_xy::ImageStruct this111 = this107->mask;
HXDLIN(  78)																::Dynamic this112 = this111->image;
HXDLIN(  78)																int index19;
HXDLIN(  78)																if (this111->useVirtualPos) {
HXLINE(  78)																	index19 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this111->virtualY) * ( (Float)(this111->width) )) + dx4) - this111->virtualX));
            																}
            																else {
HXLINE(  78)																	index19 = ::Std_obj::_hx_int(( (Float)(((dy4 * this111->width) + dx4)) ));
            																}
HXDLIN(  78)																int c16 = ::iterMagic::Iimg_obj::get(this112,index19);
HXDLIN(  78)																int v11;
HXDLIN(  78)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)																	v11 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            																}
            																else {
HXLINE(  78)																	v11 = c16;
            																}
HXDLIN(  78)																int maskPixel3 = v11;
HXDLIN(  78)																int this113 = col3;
HXDLIN(  78)																if ((maskPixel3 == 0)) {
HXLINE(  78)																	col3 = this113;
            																}
            																else {
HXLINE(  78)																	Float m03;
HXDLIN(  78)																	int this114 = ((maskPixel3 >> 24) & 255);
HXDLIN(  78)																	if ((this114 == 0)) {
HXLINE(  78)																		m03 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		m03 = (( (Float)(this114) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float m13;
HXDLIN(  78)																	int this115 = ((maskPixel3 >> 16) & 255);
HXDLIN(  78)																	if ((this115 == 0)) {
HXLINE(  78)																		m13 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		m13 = (( (Float)(this115) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float m23;
HXDLIN(  78)																	int this116 = ((maskPixel3 >> 8) & 255);
HXDLIN(  78)																	if ((this116 == 0)) {
HXLINE(  78)																		m23 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		m23 = (( (Float)(this116) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float m33;
HXDLIN(  78)																	int this117 = (maskPixel3 & 255);
HXDLIN(  78)																	if ((this117 == 0)) {
HXLINE(  78)																		m33 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		m33 = (( (Float)(this117) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this113 >> 24) & 255)) )));
HXDLIN(  78)																	int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this113 >> 16) & 255)) )));
HXDLIN(  78)																	int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this113 >> 8) & 255)) )));
HXDLIN(  78)																	int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this113 & 255)) )));
HXDLIN(  78)																	col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  78)															if ((col3 != 0)) {
HXLINE(  78)																int x18 = (dx4 - rectLeft3);
HXDLIN(  78)																int y17 = (dy4 - rectTop3);
HXDLIN(  78)																int c17 = col3;
HXDLIN(  78)																bool _hx_tmp25;
HXDLIN(  78)																if ((((c17 >> 24) & 255) < 254)) {
HXLINE(  78)																	_hx_tmp25 = undoImage9->transparent;
            																}
            																else {
HXLINE(  78)																	_hx_tmp25 = false;
            																}
HXDLIN(  78)																if (_hx_tmp25) {
HXLINE(  78)																	int location6;
HXDLIN(  78)																	if (undoImage9->useVirtualPos) {
HXLINE(  78)																		location6 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x18) - undoImage9->virtualX));
            																	}
            																	else {
HXLINE(  78)																		location6 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage9->width) + x18)) ));
            																	}
HXDLIN(  78)																	int this118 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN(  78)																	int this119;
HXDLIN(  78)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)																		this119 = ((((((this118 >> 24) & 255) << 24) | ((this118 & 255) << 16)) | (((this118 >> 8) & 255) << 8)) | ((this118 >> 16) & 255));
            																	}
            																	else {
HXLINE(  78)																		this119 = this118;
            																	}
HXDLIN(  78)																	Float a18;
HXDLIN(  78)																	int this120 = ((this119 >> 24) & 255);
HXDLIN(  78)																	if ((this120 == 0)) {
HXLINE(  78)																		a18 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		a18 = (( (Float)(this120) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float r16;
HXDLIN(  78)																	int this121 = ((this119 >> 16) & 255);
HXDLIN(  78)																	if ((this121 == 0)) {
HXLINE(  78)																		r16 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		r16 = (( (Float)(this121) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float g16;
HXDLIN(  78)																	int this122 = ((this119 >> 8) & 255);
HXDLIN(  78)																	if ((this122 == 0)) {
HXLINE(  78)																		g16 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		g16 = (( (Float)(this122) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float b110;
HXDLIN(  78)																	int this123 = (this119 & 255);
HXDLIN(  78)																	if ((this123 == 0)) {
HXLINE(  78)																		b110 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		b110 = (( (Float)(this123) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float a26;
HXDLIN(  78)																	int this124 = ((col3 >> 24) & 255);
HXDLIN(  78)																	if ((this124 == 0)) {
HXLINE(  78)																		a26 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		a26 = (( (Float)(this124) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float r26;
HXDLIN(  78)																	int this125 = ((col3 >> 16) & 255);
HXDLIN(  78)																	if ((this125 == 0)) {
HXLINE(  78)																		r26 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		r26 = (( (Float)(this125) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float g26;
HXDLIN(  78)																	int this126 = ((col3 >> 8) & 255);
HXDLIN(  78)																	if ((this126 == 0)) {
HXLINE(  78)																		g26 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		g26 = (( (Float)(this126) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float b210;
HXDLIN(  78)																	int this127 = (col3 & 255);
HXDLIN(  78)																	if ((this127 == 0)) {
HXLINE(  78)																		b210 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		b210 = (( (Float)(this127) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float a36 = (a18 * (( (Float)(1) ) - a26));
HXDLIN(  78)																	int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN(  78)																	int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN(  78)																	int b30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a36) + (b210 * a26))));
HXDLIN(  78)																	int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  78)																	int blended6 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b30);
HXDLIN(  78)																	{
HXLINE(  78)																		int _hx_tmp26;
HXDLIN(  78)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)																			_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            																		}
            																		else {
HXLINE(  78)																			_hx_tmp26 = blended6;
            																		}
HXDLIN(  78)																		::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            																	}
            																}
            																else {
HXLINE(  78)																	::Dynamic this128 = undoImage9->image;
HXDLIN(  78)																	int index20;
HXDLIN(  78)																	if (undoImage9->useVirtualPos) {
HXLINE(  78)																		index20 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x18) - undoImage9->virtualX));
            																	}
            																	else {
HXLINE(  78)																		index20 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage9->width) + x18)) ));
            																	}
HXDLIN(  78)																	int _hx_tmp27;
HXDLIN(  78)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)																		_hx_tmp27 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            																	}
            																	else {
HXLINE(  78)																		_hx_tmp27 = c17;
            																	}
HXDLIN(  78)																	::iterMagic::Iimg_obj::set(this128,index20,_hx_tmp27);
            																}
            															}
            															else {
HXLINE(  78)																if (forceClear3) {
HXLINE(  78)																	::Dynamic this129 = undoImage9->image;
HXDLIN(  78)																	int x19 = (dx4 - rectLeft3);
HXDLIN(  78)																	int y18 = (dy4 - rectTop3);
HXDLIN(  78)																	int index21;
HXDLIN(  78)																	if (undoImage9->useVirtualPos) {
HXLINE(  78)																		index21 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x19) - undoImage9->virtualX));
            																	}
            																	else {
HXLINE(  78)																		index21 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage9->width) + x19)) ));
            																	}
HXDLIN(  78)																	::iterMagic::Iimg_obj::set(this129,index21,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  78)									bool foundY3 = false;
HXDLIN(  78)									Float s3 = ((Float)0.);
HXDLIN(  78)									Float t3 = ((Float)0.);
HXDLIN(  78)									Float sxx3 = ((Float)0.);
HXDLIN(  78)									Float txx3 = ((Float)0.);
HXDLIN(  78)									{
HXLINE(  78)										int _g_min6 = xIter33->start;
HXDLIN(  78)										int _g_max6 = xIter33->max;
HXDLIN(  78)										while((_g_min6 < _g_max6)){
HXLINE(  78)											_g_min6 = (_g_min6 + 1);
HXDLIN(  78)											int x20 = (_g_min6 - 1);
HXLINE( 222)											sxx3 = (sx3 * ( (Float)(x20) ));
HXLINE( 223)											txx3 = (tx3 * ( (Float)(x20) ));
HXLINE( 224)											foundY3 = false;
HXLINE(  78)											{
HXLINE(  78)												int _g_min7 = yIter33->start;
HXDLIN(  78)												int _g_max7 = yIter33->max;
HXDLIN(  78)												while((_g_min7 < _g_max7)){
HXLINE(  78)													_g_min7 = (_g_min7 + 1);
HXDLIN(  78)													int y19 = (_g_min7 - 1);
HXLINE( 226)													s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y19) )));
HXLINE( 227)													t3 = ((t03 + txx3) + (ty3 * ( (Float)(y19) )));
HXLINE(  78)													bool _hx_tmp28;
HXDLIN(  78)													if (!((s3 <= 0))) {
HXLINE(  78)														_hx_tmp28 = (t3 <= 0);
            													}
            													else {
HXLINE(  78)														_hx_tmp28 = true;
            													}
HXDLIN(  78)													if (_hx_tmp28) {
HXLINE(  78)														if (foundY3) {
HXLINE(  78)															goto _hx_goto_105;
            														}
            													}
            													else {
HXLINE(  78)														if (((s3 + t3) < A3)) {
HXLINE(  78)															int x21 = ::hx::Mod(x20,tileImage->width);
HXDLIN(  78)															int y20 = ::hx::Mod(y19,tileImage->height);
HXDLIN(  78)															::Dynamic this130 = tileImage->image;
HXDLIN(  78)															int index22;
HXDLIN(  78)															if (tileImage->useVirtualPos) {
HXLINE(  78)																index22 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x21) - tileImage->virtualX));
            															}
            															else {
HXLINE(  78)																index22 = ::Std_obj::_hx_int(( (Float)(((y20 * tileImage->width) + x21)) ));
            															}
HXDLIN(  78)															int c18 = ::iterMagic::Iimg_obj::get(this130,index22);
HXDLIN(  78)															int color3;
HXDLIN(  78)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)																color3 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            															}
            															else {
HXLINE(  78)																color3 = c18;
            															}
HXDLIN(  78)															{
HXLINE(  78)																int c19 = color3;
HXDLIN(  78)																bool _hx_tmp29;
HXDLIN(  78)																if ((((c19 >> 24) & 255) < 254)) {
HXLINE(  78)																	_hx_tmp29 = this107->transparent;
            																}
            																else {
HXLINE(  78)																	_hx_tmp29 = false;
            																}
HXDLIN(  78)																if (_hx_tmp29) {
HXLINE(  78)																	int location7;
HXDLIN(  78)																	if (this107->useVirtualPos) {
HXLINE(  78)																		location7 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - this107->virtualY) * ( (Float)(this107->width) )) + x20) - this107->virtualX));
            																	}
            																	else {
HXLINE(  78)																		location7 = ::Std_obj::_hx_int(( (Float)(((y19 * this107->width) + x20)) ));
            																	}
HXDLIN(  78)																	int this131 = ::iterMagic::Iimg_obj::get(this107->image,location7);
HXDLIN(  78)																	int this132;
HXDLIN(  78)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)																		this132 = ((((((this131 >> 24) & 255) << 24) | ((this131 & 255) << 16)) | (((this131 >> 8) & 255) << 8)) | ((this131 >> 16) & 255));
            																	}
            																	else {
HXLINE(  78)																		this132 = this131;
            																	}
HXDLIN(  78)																	Float a110;
HXDLIN(  78)																	int this133 = ((this132 >> 24) & 255);
HXDLIN(  78)																	if ((this133 == 0)) {
HXLINE(  78)																		a110 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		a110 = (( (Float)(this133) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float r17;
HXDLIN(  78)																	int this134 = ((this132 >> 16) & 255);
HXDLIN(  78)																	if ((this134 == 0)) {
HXLINE(  78)																		r17 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		r17 = (( (Float)(this134) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float g17;
HXDLIN(  78)																	int this135 = ((this132 >> 8) & 255);
HXDLIN(  78)																	if ((this135 == 0)) {
HXLINE(  78)																		g17 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		g17 = (( (Float)(this135) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float b111;
HXDLIN(  78)																	int this136 = (this132 & 255);
HXDLIN(  78)																	if ((this136 == 0)) {
HXLINE(  78)																		b111 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		b111 = (( (Float)(this136) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float a27;
HXDLIN(  78)																	int this137 = ((color3 >> 24) & 255);
HXDLIN(  78)																	if ((this137 == 0)) {
HXLINE(  78)																		a27 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		a27 = (( (Float)(this137) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float r27;
HXDLIN(  78)																	int this138 = ((color3 >> 16) & 255);
HXDLIN(  78)																	if ((this138 == 0)) {
HXLINE(  78)																		r27 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		r27 = (( (Float)(this138) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float g27;
HXDLIN(  78)																	int this139 = ((color3 >> 8) & 255);
HXDLIN(  78)																	if ((this139 == 0)) {
HXLINE(  78)																		g27 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		g27 = (( (Float)(this139) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float b211;
HXDLIN(  78)																	int this140 = (color3 & 255);
HXDLIN(  78)																	if ((this140 == 0)) {
HXLINE(  78)																		b211 = ((Float)0.);
            																	}
            																	else {
HXLINE(  78)																		b211 = (( (Float)(this140) ) / ( (Float)(255) ));
            																	}
HXDLIN(  78)																	Float a37 = (a110 * (( (Float)(1) ) - a27));
HXDLIN(  78)																	int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN(  78)																	int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN(  78)																	int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a37) + (b211 * a27))));
HXDLIN(  78)																	int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN(  78)																	int blended7 = ((((a20 << 24) | (r9 << 16)) | (g9 << 8)) | b31);
HXDLIN(  78)																	{
HXLINE(  78)																		int _hx_tmp30;
HXDLIN(  78)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)																			_hx_tmp30 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            																		}
            																		else {
HXLINE(  78)																			_hx_tmp30 = blended7;
            																		}
HXDLIN(  78)																		::iterMagic::Iimg_obj::set(this107->image,location7,_hx_tmp30);
            																	}
            																}
            																else {
HXLINE(  78)																	::Dynamic this141 = this107->image;
HXDLIN(  78)																	int index23;
HXDLIN(  78)																	if (this107->useVirtualPos) {
HXLINE(  78)																		index23 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - this107->virtualY) * ( (Float)(this107->width) )) + x20) - this107->virtualX));
            																	}
            																	else {
HXLINE(  78)																		index23 = ::Std_obj::_hx_int(( (Float)(((y19 * this107->width) + x20)) ));
            																	}
HXDLIN(  78)																	int _hx_tmp31;
HXDLIN(  78)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  78)																		_hx_tmp31 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            																	}
            																	else {
HXLINE(  78)																		_hx_tmp31 = c19;
            																	}
HXDLIN(  78)																	::iterMagic::Iimg_obj::set(this141,index23,_hx_tmp31);
            																}
            															}
HXLINE( 236)															foundY3 = true;
            														}
            														else {
HXLINE(  78)															if (foundY3) {
HXLINE(  78)																goto _hx_goto_105;
            															}
            														}
            													}
            												}
            												_hx_goto_105:;
            											}
            										}
            									}
HXDLIN(  78)									if ((hasHit2 == false)) {
HXLINE(  78)										 ::pi_xy::algo::HitTri v12 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX,cy5,bx4,by3,cx4,cy6,true);
HXDLIN(  78)										if (hasUndo3) {
HXLINE(  78)											v12->undoImage = undoImage9;
HXDLIN(  78)											v12->undoX = xIter33->start;
HXDLIN(  78)											v12->undoY = yIter33->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  93)						lastX1 = nextX1;
HXLINE(  94)						lastY1 = nextY1;
            					}
            				}
            			}
            		}
HXLINE(  80)		{
HXLINE(  80)			 ::pi_xy::ImageStruct this142 = pixelimage;
HXDLIN(  80)			Float y21 = (y + dy);
HXDLIN(  80)			bool hasHit3 = false;
HXDLIN(  80)			Float bx5 = (x + wid);
HXDLIN(  80)			Float cy7 = (y21 + ( (Float)(tall) ));
HXDLIN(  80)			{
HXLINE(  80)				{
HXLINE(  80)					Float bx6 = bx5;
HXDLIN(  80)					Float by4 = y21;
HXDLIN(  80)					Float cx5 = x;
HXDLIN(  80)					Float cy8 = cy7;
HXDLIN(  80)					bool adjustWinding4 = (((((x * by4) - (bx6 * y21)) + ((bx6 * cy8) - (cx5 * by4))) + ((cx5 * y21) - (x * cy8))) > 0);
HXDLIN(  80)					if (!(adjustWinding4)) {
HXLINE(  80)						Float bx_4 = bx6;
HXDLIN(  80)						Float by_4 = by4;
HXLINE( 187)						bx6 = cx5;
HXLINE( 188)						by4 = cy8;
HXLINE( 189)						cx5 = bx_4;
HXLINE( 190)						cy8 = by_4;
            					}
HXLINE(  80)					{
HXLINE(  80)						bool hasUndo4 = false;
HXDLIN(  80)						Float s04 = ((y21 * cx5) - (x * cy8));
HXDLIN(  80)						Float sx4 = (cy8 - y21);
HXDLIN(  80)						Float sy4 = (x - cx5);
HXDLIN(  80)						Float t04 = ((x * by4) - (y21 * bx6));
HXDLIN(  80)						Float tx4 = (y21 - by4);
HXDLIN(  80)						Float ty4 = (bx6 - x);
HXDLIN(  80)						Float A4 = ((((-(by4) * cx5) + (y21 * (-(bx6) + cx5))) + (x * (by4 - cy8))) + (bx6 * cy8));
HXDLIN(  80)						 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN(  80)						if ((x > bx6)) {
HXLINE(  80)							if ((x > cx5)) {
HXLINE(  80)								int min16;
HXDLIN(  80)								if ((bx6 > cx5)) {
HXLINE(  80)									min16 = ::Math_obj::floor(cx5);
            								}
            								else {
HXLINE(  80)									min16 = ::Math_obj::floor(bx6);
            								}
HXDLIN(  80)								int ii_min32 = min16;
HXDLIN(  80)								int ii_max32 = ::Math_obj::ceil(x);
HXDLIN(  80)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            							}
            							else {
HXLINE(  80)								int ii_min33 = ::Math_obj::floor(bx6);
HXDLIN(  80)								int ii_max33 = ::Math_obj::ceil(cx5);
HXDLIN(  80)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            							}
            						}
            						else {
HXLINE(  80)							if ((bx6 > cx5)) {
HXLINE(  80)								int min17;
HXDLIN(  80)								if ((x > cx5)) {
HXLINE(  80)									min17 = ::Math_obj::floor(cx5);
            								}
            								else {
HXLINE(  80)									min17 = ::Math_obj::ceil(x);
            								}
HXDLIN(  80)								int ii_min34 = min17;
HXDLIN(  80)								int ii_max34 = ::Math_obj::ceil(bx6);
HXDLIN(  80)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            							}
            							else {
HXLINE(  80)								int ii_min35 = ::Math_obj::floor(x);
HXDLIN(  80)								int ii_max35 = ::Math_obj::ceil(cx5);
HXDLIN(  80)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            							}
            						}
HXDLIN(  80)						 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN(  80)						if ((y21 > by4)) {
HXLINE(  80)							if ((y21 > cy8)) {
HXLINE(  80)								int min18;
HXDLIN(  80)								if ((by4 > cy8)) {
HXLINE(  80)									min18 = ::Math_obj::floor(cy8);
            								}
            								else {
HXLINE(  80)									min18 = ::Math_obj::floor(by4);
            								}
HXDLIN(  80)								int ii_min36 = min18;
HXDLIN(  80)								int ii_max36 = ::Math_obj::ceil(y21);
HXDLIN(  80)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            							}
            							else {
HXLINE(  80)								int ii_min37 = ::Math_obj::floor(by4);
HXDLIN(  80)								int ii_max37 = ::Math_obj::ceil(cy8);
HXDLIN(  80)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            							}
            						}
            						else {
HXLINE(  80)							if ((by4 > cy8)) {
HXLINE(  80)								int min19;
HXDLIN(  80)								if ((y21 > cy8)) {
HXLINE(  80)									min19 = ::Math_obj::floor(cy8);
            								}
            								else {
HXLINE(  80)									min19 = ::Math_obj::ceil(y21);
            								}
HXDLIN(  80)								int ii_min38 = min19;
HXDLIN(  80)								int ii_max38 = ::Math_obj::ceil(by4);
HXDLIN(  80)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            							}
            							else {
HXLINE(  80)								int ii_min39 = ::Math_obj::floor(y21);
HXDLIN(  80)								int ii_max39 = ::Math_obj::ceil(cy8);
HXDLIN(  80)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            							}
            						}
HXDLIN(  80)						 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN(  80)						if (hasUndo4) {
HXLINE(  80)							int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN(  80)							int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN(  80)							 ::Dynamic imageType4 = null();
HXDLIN(  80)							 ::pi_xy::ImageStruct this143 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  80)							if (::hx::IsNull( imageType4 )) {
HXLINE(  54)								imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  80)							::Dynamic undoImage13;
HXDLIN(  80)							switch((int)(( (int)(imageType4) ))){
            								case (int)0: {
HXLINE(  80)									 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::BytesImg b32 = byt4;
HXDLIN(  80)									{
HXLINE(  80)										b32->width = width4;
HXDLIN(  80)										b32->height = height4;
HXDLIN(  80)										b32->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  80)										b32->data = ::haxe::io::Bytes_obj::alloc((b32->length * 4));
HXDLIN(  80)										{
HXLINE(  80)											int len8 = b32->length;
HXDLIN(  80)											int w4 = 0;
HXDLIN(  80)											{
HXLINE(  80)												int _g84 = 0;
HXDLIN(  80)												int _g85 = b32->height;
HXDLIN(  80)												while((_g84 < _g85)){
HXLINE(  80)													_g84 = (_g84 + 1);
HXDLIN(  80)													int y22 = (_g84 - 1);
HXDLIN(  80)													{
HXLINE(  80)														int _g86 = 0;
HXDLIN(  80)														int _g87 = b32->width;
HXDLIN(  80)														while((_g86 < _g87)){
HXLINE(  80)															_g86 = (_g86 + 1);
HXDLIN(  80)															int x22 = (_g86 - 1);
HXDLIN(  80)															{
HXLINE(  80)																w4 = (w4 + 1);
HXDLIN(  80)																b32->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  80)															{
HXLINE(  80)																w4 = (w4 + 1);
HXDLIN(  80)																b32->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  80)															{
HXLINE(  80)																w4 = (w4 + 1);
HXDLIN(  80)																b32->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  80)															{
HXLINE(  80)																w4 = (w4 + 1);
HXDLIN(  80)																b32->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  80)									undoImage13 = b32;
            								}
            								break;
            								case (int)1: {
HXLINE(  80)									 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::ArrIntImg a28 = arrI4;
HXDLIN(  80)									{
HXLINE(  80)										a28->width = width4;
HXDLIN(  80)										a28->height = height4;
HXDLIN(  80)										a28->data = ::Array_obj< int >::__new(0);
HXDLIN(  80)										a28->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  80)										{
HXLINE(  80)											int _g88 = 0;
HXDLIN(  80)											int _g89 = a28->length;
HXDLIN(  80)											while((_g88 < _g89)){
HXLINE(  80)												_g88 = (_g88 + 1);
HXDLIN(  80)												int i26 = (_g88 - 1);
HXDLIN(  80)												a28->data[i26] = 0;
            											}
            										}
            									}
HXDLIN(  80)									undoImage13 = a28;
            								}
            								break;
            								case (int)2: {
HXLINE(  80)									 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::U32ArrImg b33 = u32a4;
HXDLIN(  80)									{
HXLINE(  80)										b33->width = width4;
HXDLIN(  80)										b33->height = height4;
HXDLIN(  80)										b33->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  80)										int size4 = (b33->length * 4);
HXDLIN(  80)										b33->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN(  80)										{
HXLINE(  80)											int _g90 = 0;
HXDLIN(  80)											int _g91 = b33->length;
HXDLIN(  80)											while((_g90 < _g91)){
HXLINE(  80)												_g90 = (_g90 + 1);
HXDLIN(  80)												int i27 = (_g90 - 1);
HXDLIN(  80)												{
HXLINE(  80)													 ::haxe::io::ArrayBufferViewImpl this144 = b33->data;
HXDLIN(  80)													bool undoImage14;
HXDLIN(  80)													if ((i27 >= 0)) {
HXLINE(  80)														undoImage14 = (i27 < (this144->byteLength >> 2));
            													}
            													else {
HXLINE(  80)														undoImage14 = false;
            													}
HXDLIN(  80)													if (undoImage14) {
HXLINE(  80)														 ::haxe::io::Bytes _this4 = this144->bytes;
HXDLIN(  80)														int pos4 = ((i27 << 2) + this144->byteOffset);
HXDLIN(  80)														_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN(  80)														_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN(  80)														_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN(  80)														_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  80)									undoImage13 = b33;
            								}
            								break;
            								case (int)3: {
HXLINE(  80)									 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::VecIntImg v13 = vec4;
HXDLIN(  80)									{
HXLINE(  80)										v13->width = width4;
HXDLIN(  80)										v13->height = height4;
HXDLIN(  80)										v13->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  80)										v13->data = ::Array_obj< int >::__new(v13->length);
HXDLIN(  80)										{
HXLINE(  80)											int _g92 = 0;
HXDLIN(  80)											int _g93 = v13->length;
HXDLIN(  80)											while((_g92 < _g93)){
HXLINE(  80)												_g92 = (_g92 + 1);
HXDLIN(  80)												int i28 = (_g92 - 1);
HXDLIN(  80)												v13->data->__unsafe_set(i28,0);
            											}
            										}
            									}
HXDLIN(  80)									undoImage13 = v13;
            								}
            								break;
            								case (int)4: {
HXLINE(  80)									 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::StackIntImg b34 = sInt4;
HXDLIN(  80)									{
HXLINE(  80)										b34->width = width4;
HXDLIN(  80)										b34->height = height4;
HXDLIN(  80)										b34->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  80)										b34->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  80)										{
HXLINE(  80)											int len9 = b34->length;
HXDLIN(  80)											 ::haxe::ds::GenericStack_Int d4 = b34->data;
HXDLIN(  80)											if (::hx::IsNull( d4->head )) {
HXLINE(  80)												int _g94 = 0;
HXDLIN(  80)												int _g95 = len9;
HXDLIN(  80)												while((_g94 < _g95)){
HXLINE(  80)													_g94 = (_g94 + 1);
HXDLIN(  80)													int i29 = (_g94 - 1);
HXDLIN(  80)													d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            												}
            											}
            											else {
HXLINE(  80)												int _g96 = 0;
HXDLIN(  80)												int _g97 = len9;
HXDLIN(  80)												while((_g96 < _g97)){
HXLINE(  80)													_g96 = (_g96 + 1);
HXDLIN(  80)													int i30 = (_g96 - 1);
HXDLIN(  80)													{
HXLINE(  80)														 ::haxe::ds::GenericCell_Int l4 = b34->data->head;
HXDLIN(  80)														 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN(  80)														{
HXLINE(  80)															int _g98 = 0;
HXDLIN(  80)															int _g99 = i30;
HXDLIN(  80)															while((_g98 < _g99)){
HXLINE(  80)																_g98 = (_g98 + 1);
HXDLIN(  80)																int i31 = (_g98 - 1);
HXLINE( 345)																prev4 = l4;
HXLINE( 346)																l4 = l4->next;
            															}
            														}
HXLINE(  80)														if (::hx::IsNull( prev4 )) {
HXLINE(  80)															b34->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  80)															l4 = null();
            														}
            														else {
HXLINE(  80)															prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  80)															l4 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  80)									undoImage13 = b34;
            								}
            								break;
            							}
HXDLIN(  80)							this143->image = undoImage13;
HXDLIN(  80)							this143->width = width4;
HXDLIN(  80)							this143->height = height4;
HXDLIN(  80)							this143->imageType = ( (int)(imageType4) );
HXDLIN(  80)							undoImage12 = this143;
HXDLIN(  80)							{
HXLINE(  80)								int rectLeft4 = xIter34->start;
HXDLIN(  80)								int rectTop4 = yIter34->start;
HXDLIN(  80)								int rectRight4 = xIter34->max;
HXDLIN(  80)								bool forceClear4 = false;
HXDLIN(  80)								{
HXLINE(  80)									int _g100 = rectTop4;
HXDLIN(  80)									int _g101 = yIter34->max;
HXDLIN(  80)									while((_g100 < _g101)){
HXLINE(  80)										_g100 = (_g100 + 1);
HXDLIN(  80)										int dy5 = (_g100 - 1);
HXDLIN(  80)										{
HXLINE(  80)											int _g102 = rectLeft4;
HXDLIN(  80)											int _g103 = rectRight4;
HXDLIN(  80)											while((_g102 < _g103)){
HXLINE(  80)												_g102 = (_g102 + 1);
HXDLIN(  80)												int dx5 = (_g102 - 1);
HXDLIN(  80)												::Dynamic this145 = this142->image;
HXDLIN(  80)												int index24;
HXDLIN(  80)												if (this142->useVirtualPos) {
HXLINE(  80)													index24 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this142->virtualY) * ( (Float)(this142->width) )) + dx5) - this142->virtualX));
            												}
            												else {
HXLINE(  80)													index24 = ::Std_obj::_hx_int(( (Float)(((dy5 * this142->width) + dx5)) ));
            												}
HXDLIN(  80)												int c20 = ::iterMagic::Iimg_obj::get(this145,index24);
HXDLIN(  80)												int col4;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													col4 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													col4 = c20;
            												}
HXDLIN(  80)												bool _hx_tmp32;
HXDLIN(  80)												if (this142->useMask) {
HXLINE(  80)													_hx_tmp32 = ::hx::IsNotNull( this142->mask );
            												}
            												else {
HXLINE(  80)													_hx_tmp32 = false;
            												}
HXDLIN(  80)												if (_hx_tmp32) {
HXLINE(  80)													 ::pi_xy::ImageStruct this146 = this142->mask;
HXDLIN(  80)													::Dynamic this147 = this146->image;
HXDLIN(  80)													int index25;
HXDLIN(  80)													if (this146->useVirtualPos) {
HXLINE(  80)														index25 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this146->virtualY) * ( (Float)(this146->width) )) + dx5) - this146->virtualX));
            													}
            													else {
HXLINE(  80)														index25 = ::Std_obj::_hx_int(( (Float)(((dy5 * this146->width) + dx5)) ));
            													}
HXDLIN(  80)													int c21 = ::iterMagic::Iimg_obj::get(this147,index25);
HXDLIN(  80)													int v14;
HXDLIN(  80)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)														v14 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            													}
            													else {
HXLINE(  80)														v14 = c21;
            													}
HXDLIN(  80)													int maskPixel4 = v14;
HXDLIN(  80)													int this148 = col4;
HXDLIN(  80)													if ((maskPixel4 == 0)) {
HXLINE(  80)														col4 = this148;
            													}
            													else {
HXLINE(  80)														Float m04;
HXDLIN(  80)														int this149 = ((maskPixel4 >> 24) & 255);
HXDLIN(  80)														if ((this149 == 0)) {
HXLINE(  80)															m04 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															m04 = (( (Float)(this149) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float m14;
HXDLIN(  80)														int this150 = ((maskPixel4 >> 16) & 255);
HXDLIN(  80)														if ((this150 == 0)) {
HXLINE(  80)															m14 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															m14 = (( (Float)(this150) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float m24;
HXDLIN(  80)														int this151 = ((maskPixel4 >> 8) & 255);
HXDLIN(  80)														if ((this151 == 0)) {
HXLINE(  80)															m24 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															m24 = (( (Float)(this151) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float m34;
HXDLIN(  80)														int this152 = (maskPixel4 & 255);
HXDLIN(  80)														if ((this152 == 0)) {
HXLINE(  80)															m34 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															m34 = (( (Float)(this152) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this148 >> 24) & 255)) )));
HXDLIN(  80)														int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this148 >> 16) & 255)) )));
HXDLIN(  80)														int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this148 >> 8) & 255)) )));
HXDLIN(  80)														int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this148 & 255)) )));
HXDLIN(  80)														col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  80)												if ((col4 != 0)) {
HXLINE(  80)													int x23 = (dx5 - rectLeft4);
HXDLIN(  80)													int y23 = (dy5 - rectTop4);
HXDLIN(  80)													int c22 = col4;
HXDLIN(  80)													bool _hx_tmp33;
HXDLIN(  80)													if ((((c22 >> 24) & 255) < 254)) {
HXLINE(  80)														_hx_tmp33 = undoImage12->transparent;
            													}
            													else {
HXLINE(  80)														_hx_tmp33 = false;
            													}
HXDLIN(  80)													if (_hx_tmp33) {
HXLINE(  80)														int location8;
HXDLIN(  80)														if (undoImage12->useVirtualPos) {
HXLINE(  80)															location8 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x23) - undoImage12->virtualX));
            														}
            														else {
HXLINE(  80)															location8 = ::Std_obj::_hx_int(( (Float)(((y23 * undoImage12->width) + x23)) ));
            														}
HXDLIN(  80)														int this153 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN(  80)														int this154;
HXDLIN(  80)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)															this154 = ((((((this153 >> 24) & 255) << 24) | ((this153 & 255) << 16)) | (((this153 >> 8) & 255) << 8)) | ((this153 >> 16) & 255));
            														}
            														else {
HXLINE(  80)															this154 = this153;
            														}
HXDLIN(  80)														Float a111;
HXDLIN(  80)														int this155 = ((this154 >> 24) & 255);
HXDLIN(  80)														if ((this155 == 0)) {
HXLINE(  80)															a111 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															a111 = (( (Float)(this155) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float r18;
HXDLIN(  80)														int this156 = ((this154 >> 16) & 255);
HXDLIN(  80)														if ((this156 == 0)) {
HXLINE(  80)															r18 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															r18 = (( (Float)(this156) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float g18;
HXDLIN(  80)														int this157 = ((this154 >> 8) & 255);
HXDLIN(  80)														if ((this157 == 0)) {
HXLINE(  80)															g18 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															g18 = (( (Float)(this157) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float b112;
HXDLIN(  80)														int this158 = (this154 & 255);
HXDLIN(  80)														if ((this158 == 0)) {
HXLINE(  80)															b112 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															b112 = (( (Float)(this158) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float a29;
HXDLIN(  80)														int this159 = ((col4 >> 24) & 255);
HXDLIN(  80)														if ((this159 == 0)) {
HXLINE(  80)															a29 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															a29 = (( (Float)(this159) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float r28;
HXDLIN(  80)														int this160 = ((col4 >> 16) & 255);
HXDLIN(  80)														if ((this160 == 0)) {
HXLINE(  80)															r28 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															r28 = (( (Float)(this160) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float g28;
HXDLIN(  80)														int this161 = ((col4 >> 8) & 255);
HXDLIN(  80)														if ((this161 == 0)) {
HXLINE(  80)															g28 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															g28 = (( (Float)(this161) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float b212;
HXDLIN(  80)														int this162 = (col4 & 255);
HXDLIN(  80)														if ((this162 == 0)) {
HXLINE(  80)															b212 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															b212 = (( (Float)(this162) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float a38 = (a111 * (( (Float)(1) ) - a29));
HXDLIN(  80)														int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r28 * a29))));
HXDLIN(  80)														int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g28 * a29))));
HXDLIN(  80)														int b35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a38) + (b212 * a29))));
HXDLIN(  80)														int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a29)));
HXDLIN(  80)														int blended8 = ((((a30 << 24) | (r10 << 16)) | (g10 << 8)) | b35);
HXDLIN(  80)														{
HXLINE(  80)															int _hx_tmp34;
HXDLIN(  80)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)																_hx_tmp34 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            															}
            															else {
HXLINE(  80)																_hx_tmp34 = blended8;
            															}
HXDLIN(  80)															::iterMagic::Iimg_obj::set(undoImage12->image,location8,_hx_tmp34);
            														}
            													}
            													else {
HXLINE(  80)														::Dynamic this163 = undoImage12->image;
HXDLIN(  80)														int index26;
HXDLIN(  80)														if (undoImage12->useVirtualPos) {
HXLINE(  80)															index26 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x23) - undoImage12->virtualX));
            														}
            														else {
HXLINE(  80)															index26 = ::Std_obj::_hx_int(( (Float)(((y23 * undoImage12->width) + x23)) ));
            														}
HXDLIN(  80)														int _hx_tmp35;
HXDLIN(  80)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)															_hx_tmp35 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            														}
            														else {
HXLINE(  80)															_hx_tmp35 = c22;
            														}
HXDLIN(  80)														::iterMagic::Iimg_obj::set(this163,index26,_hx_tmp35);
            													}
            												}
            												else {
HXLINE(  80)													if (forceClear4) {
HXLINE(  80)														::Dynamic this164 = undoImage12->image;
HXDLIN(  80)														int x24 = (dx5 - rectLeft4);
HXDLIN(  80)														int y24 = (dy5 - rectTop4);
HXDLIN(  80)														int index27;
HXDLIN(  80)														if (undoImage12->useVirtualPos) {
HXLINE(  80)															index27 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x24) - undoImage12->virtualX));
            														}
            														else {
HXLINE(  80)															index27 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage12->width) + x24)) ));
            														}
HXDLIN(  80)														::iterMagic::Iimg_obj::set(this164,index27,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  80)						bool foundY4 = false;
HXDLIN(  80)						Float s4 = ((Float)0.);
HXDLIN(  80)						Float t4 = ((Float)0.);
HXDLIN(  80)						Float sxx4 = ((Float)0.);
HXDLIN(  80)						Float txx4 = ((Float)0.);
HXDLIN(  80)						{
HXLINE(  80)							int _g_min8 = xIter34->start;
HXDLIN(  80)							int _g_max8 = xIter34->max;
HXDLIN(  80)							while((_g_min8 < _g_max8)){
HXLINE(  80)								_g_min8 = (_g_min8 + 1);
HXDLIN(  80)								int x25 = (_g_min8 - 1);
HXLINE( 222)								sxx4 = (sx4 * ( (Float)(x25) ));
HXLINE( 223)								txx4 = (tx4 * ( (Float)(x25) ));
HXLINE( 224)								foundY4 = false;
HXLINE(  80)								{
HXLINE(  80)									int _g_min9 = yIter34->start;
HXDLIN(  80)									int _g_max9 = yIter34->max;
HXDLIN(  80)									while((_g_min9 < _g_max9)){
HXLINE(  80)										_g_min9 = (_g_min9 + 1);
HXDLIN(  80)										int y25 = (_g_min9 - 1);
HXLINE( 226)										s4 = ((s04 + sxx4) + (sy4 * ( (Float)(y25) )));
HXLINE( 227)										t4 = ((t04 + txx4) + (ty4 * ( (Float)(y25) )));
HXLINE(  80)										bool _hx_tmp36;
HXDLIN(  80)										if (!((s4 <= 0))) {
HXLINE(  80)											_hx_tmp36 = (t4 <= 0);
            										}
            										else {
HXLINE(  80)											_hx_tmp36 = true;
            										}
HXDLIN(  80)										if (_hx_tmp36) {
HXLINE(  80)											if (foundY4) {
HXLINE(  80)												goto _hx_goto_117;
            											}
            										}
            										else {
HXLINE(  80)											if (((s4 + t4) < A4)) {
HXLINE(  80)												int x26 = ::hx::Mod(x25,tileImage->width);
HXDLIN(  80)												int y26 = ::hx::Mod(y25,tileImage->height);
HXDLIN(  80)												::Dynamic this165 = tileImage->image;
HXDLIN(  80)												int index28;
HXDLIN(  80)												if (tileImage->useVirtualPos) {
HXLINE(  80)													index28 = ::Std_obj::_hx_int(((((( (Float)(y26) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x26) - tileImage->virtualX));
            												}
            												else {
HXLINE(  80)													index28 = ::Std_obj::_hx_int(( (Float)(((y26 * tileImage->width) + x26)) ));
            												}
HXDLIN(  80)												int c23 = ::iterMagic::Iimg_obj::get(this165,index28);
HXDLIN(  80)												int color4;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													color4 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													color4 = c23;
            												}
HXDLIN(  80)												{
HXLINE(  80)													int c24 = color4;
HXDLIN(  80)													bool _hx_tmp37;
HXDLIN(  80)													if ((((c24 >> 24) & 255) < 254)) {
HXLINE(  80)														_hx_tmp37 = this142->transparent;
            													}
            													else {
HXLINE(  80)														_hx_tmp37 = false;
            													}
HXDLIN(  80)													if (_hx_tmp37) {
HXLINE(  80)														int location9;
HXDLIN(  80)														if (this142->useVirtualPos) {
HXLINE(  80)															location9 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - this142->virtualY) * ( (Float)(this142->width) )) + x25) - this142->virtualX));
            														}
            														else {
HXLINE(  80)															location9 = ::Std_obj::_hx_int(( (Float)(((y25 * this142->width) + x25)) ));
            														}
HXDLIN(  80)														int this166 = ::iterMagic::Iimg_obj::get(this142->image,location9);
HXDLIN(  80)														int this167;
HXDLIN(  80)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)															this167 = ((((((this166 >> 24) & 255) << 24) | ((this166 & 255) << 16)) | (((this166 >> 8) & 255) << 8)) | ((this166 >> 16) & 255));
            														}
            														else {
HXLINE(  80)															this167 = this166;
            														}
HXDLIN(  80)														Float a112;
HXDLIN(  80)														int this168 = ((this167 >> 24) & 255);
HXDLIN(  80)														if ((this168 == 0)) {
HXLINE(  80)															a112 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															a112 = (( (Float)(this168) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float r19;
HXDLIN(  80)														int this169 = ((this167 >> 16) & 255);
HXDLIN(  80)														if ((this169 == 0)) {
HXLINE(  80)															r19 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															r19 = (( (Float)(this169) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float g19;
HXDLIN(  80)														int this170 = ((this167 >> 8) & 255);
HXDLIN(  80)														if ((this170 == 0)) {
HXLINE(  80)															g19 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															g19 = (( (Float)(this170) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float b113;
HXDLIN(  80)														int this171 = (this167 & 255);
HXDLIN(  80)														if ((this171 == 0)) {
HXLINE(  80)															b113 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															b113 = (( (Float)(this171) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float a210;
HXDLIN(  80)														int this172 = ((color4 >> 24) & 255);
HXDLIN(  80)														if ((this172 == 0)) {
HXLINE(  80)															a210 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															a210 = (( (Float)(this172) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float r29;
HXDLIN(  80)														int this173 = ((color4 >> 16) & 255);
HXDLIN(  80)														if ((this173 == 0)) {
HXLINE(  80)															r29 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															r29 = (( (Float)(this173) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float g29;
HXDLIN(  80)														int this174 = ((color4 >> 8) & 255);
HXDLIN(  80)														if ((this174 == 0)) {
HXLINE(  80)															g29 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															g29 = (( (Float)(this174) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float b213;
HXDLIN(  80)														int this175 = (color4 & 255);
HXDLIN(  80)														if ((this175 == 0)) {
HXLINE(  80)															b213 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															b213 = (( (Float)(this175) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float a39 = (a112 * (( (Float)(1) ) - a210));
HXDLIN(  80)														int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a39) + (r29 * a210))));
HXDLIN(  80)														int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a39) + (g29 * a210))));
HXDLIN(  80)														int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a39) + (b213 * a210))));
HXDLIN(  80)														int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a210)));
HXDLIN(  80)														int blended9 = ((((a40 << 24) | (r20 << 16)) | (g20 << 8)) | b36);
HXDLIN(  80)														{
HXLINE(  80)															int _hx_tmp38;
HXDLIN(  80)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)																_hx_tmp38 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            															}
            															else {
HXLINE(  80)																_hx_tmp38 = blended9;
            															}
HXDLIN(  80)															::iterMagic::Iimg_obj::set(this142->image,location9,_hx_tmp38);
            														}
            													}
            													else {
HXLINE(  80)														::Dynamic this176 = this142->image;
HXDLIN(  80)														int index29;
HXDLIN(  80)														if (this142->useVirtualPos) {
HXLINE(  80)															index29 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - this142->virtualY) * ( (Float)(this142->width) )) + x25) - this142->virtualX));
            														}
            														else {
HXLINE(  80)															index29 = ::Std_obj::_hx_int(( (Float)(((y25 * this142->width) + x25)) ));
            														}
HXDLIN(  80)														int _hx_tmp39;
HXDLIN(  80)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)															_hx_tmp39 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            														}
            														else {
HXLINE(  80)															_hx_tmp39 = c24;
            														}
HXDLIN(  80)														::iterMagic::Iimg_obj::set(this176,index29,_hx_tmp39);
            													}
            												}
HXLINE( 236)												foundY4 = true;
            											}
            											else {
HXLINE(  80)												if (foundY4) {
HXLINE(  80)													goto _hx_goto_117;
            												}
            											}
            										}
            									}
            									_hx_goto_117:;
            								}
            							}
            						}
HXDLIN(  80)						if ((hasHit3 == false)) {
HXLINE(  80)							 ::pi_xy::algo::HitTri v15 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,x,y21,bx6,by4,cx5,cy8,true);
HXDLIN(  80)							if (hasUndo4) {
HXLINE(  80)								v15->undoImage = undoImage12;
HXDLIN(  80)								v15->undoX = xIter34->start;
HXDLIN(  80)								v15->undoY = yIter34->start;
            							}
            						}
            					}
            				}
HXDLIN(  80)				{
HXLINE(  80)					Float bx7 = bx5;
HXDLIN(  80)					Float by5 = cy7;
HXDLIN(  80)					Float cx6 = x;
HXDLIN(  80)					Float cy9 = cy7;
HXDLIN(  80)					bool adjustWinding5 = (((((bx5 * by5) - (bx7 * y21)) + ((bx7 * cy9) - (cx6 * by5))) + ((cx6 * y21) - (bx5 * cy9))) > 0);
HXDLIN(  80)					if (!(adjustWinding5)) {
HXLINE(  80)						Float bx_5 = bx7;
HXDLIN(  80)						Float by_5 = by5;
HXLINE( 187)						bx7 = cx6;
HXLINE( 188)						by5 = cy9;
HXLINE( 189)						cx6 = bx_5;
HXLINE( 190)						cy9 = by_5;
            					}
HXLINE(  80)					{
HXLINE(  80)						bool hasUndo5 = false;
HXDLIN(  80)						Float s05 = ((y21 * cx6) - (bx5 * cy9));
HXDLIN(  80)						Float sx5 = (cy9 - y21);
HXDLIN(  80)						Float sy5 = (bx5 - cx6);
HXDLIN(  80)						Float t05 = ((bx5 * by5) - (y21 * bx7));
HXDLIN(  80)						Float tx5 = (y21 - by5);
HXDLIN(  80)						Float ty5 = (bx7 - bx5);
HXDLIN(  80)						Float A5 = ((((-(by5) * cx6) + (y21 * (-(bx7) + cx6))) + (bx5 * (by5 - cy9))) + (bx7 * cy9));
HXDLIN(  80)						 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN(  80)						if ((bx5 > bx7)) {
HXLINE(  80)							if ((bx5 > cx6)) {
HXLINE(  80)								int min20;
HXDLIN(  80)								if ((bx7 > cx6)) {
HXLINE(  80)									min20 = ::Math_obj::floor(cx6);
            								}
            								else {
HXLINE(  80)									min20 = ::Math_obj::floor(bx7);
            								}
HXDLIN(  80)								int ii_min40 = min20;
HXDLIN(  80)								int ii_max40 = ::Math_obj::ceil(bx5);
HXDLIN(  80)								xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            							}
            							else {
HXLINE(  80)								int ii_min41 = ::Math_obj::floor(bx7);
HXDLIN(  80)								int ii_max41 = ::Math_obj::ceil(cx6);
HXDLIN(  80)								xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            							}
            						}
            						else {
HXLINE(  80)							if ((bx7 > cx6)) {
HXLINE(  80)								int min21;
HXDLIN(  80)								if ((bx5 > cx6)) {
HXLINE(  80)									min21 = ::Math_obj::floor(cx6);
            								}
            								else {
HXLINE(  80)									min21 = ::Math_obj::ceil(bx5);
            								}
HXDLIN(  80)								int ii_min42 = min21;
HXDLIN(  80)								int ii_max42 = ::Math_obj::ceil(bx7);
HXDLIN(  80)								xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            							}
            							else {
HXLINE(  80)								int ii_min43 = ::Math_obj::floor(bx5);
HXDLIN(  80)								int ii_max43 = ::Math_obj::ceil(cx6);
HXDLIN(  80)								xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            							}
            						}
HXDLIN(  80)						 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN(  80)						if ((y21 > by5)) {
HXLINE(  80)							if ((y21 > cy9)) {
HXLINE(  80)								int min22;
HXDLIN(  80)								if ((by5 > cy9)) {
HXLINE(  80)									min22 = ::Math_obj::floor(cy9);
            								}
            								else {
HXLINE(  80)									min22 = ::Math_obj::floor(by5);
            								}
HXDLIN(  80)								int ii_min44 = min22;
HXDLIN(  80)								int ii_max44 = ::Math_obj::ceil(y21);
HXDLIN(  80)								yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            							}
            							else {
HXLINE(  80)								int ii_min45 = ::Math_obj::floor(by5);
HXDLIN(  80)								int ii_max45 = ::Math_obj::ceil(cy9);
HXDLIN(  80)								yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            							}
            						}
            						else {
HXLINE(  80)							if ((by5 > cy9)) {
HXLINE(  80)								int min23;
HXDLIN(  80)								if ((y21 > cy9)) {
HXLINE(  80)									min23 = ::Math_obj::floor(cy9);
            								}
            								else {
HXLINE(  80)									min23 = ::Math_obj::ceil(y21);
            								}
HXDLIN(  80)								int ii_min46 = min23;
HXDLIN(  80)								int ii_max46 = ::Math_obj::ceil(by5);
HXDLIN(  80)								yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            							}
            							else {
HXLINE(  80)								int ii_min47 = ::Math_obj::floor(y21);
HXDLIN(  80)								int ii_max47 = ::Math_obj::ceil(cy9);
HXDLIN(  80)								yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            							}
            						}
HXDLIN(  80)						 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN(  80)						if (hasUndo5) {
HXLINE(  80)							int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN(  80)							int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN(  80)							 ::Dynamic imageType5 = null();
HXDLIN(  80)							 ::pi_xy::ImageStruct this177 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  80)							if (::hx::IsNull( imageType5 )) {
HXLINE(  54)								imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  80)							::Dynamic undoImage16;
HXDLIN(  80)							switch((int)(( (int)(imageType5) ))){
            								case (int)0: {
HXLINE(  80)									 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::BytesImg b37 = byt5;
HXDLIN(  80)									{
HXLINE(  80)										b37->width = width5;
HXDLIN(  80)										b37->height = height5;
HXDLIN(  80)										b37->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  80)										b37->data = ::haxe::io::Bytes_obj::alloc((b37->length * 4));
HXDLIN(  80)										{
HXLINE(  80)											int len10 = b37->length;
HXDLIN(  80)											int w5 = 0;
HXDLIN(  80)											{
HXLINE(  80)												int _g104 = 0;
HXDLIN(  80)												int _g105 = b37->height;
HXDLIN(  80)												while((_g104 < _g105)){
HXLINE(  80)													_g104 = (_g104 + 1);
HXDLIN(  80)													int y27 = (_g104 - 1);
HXDLIN(  80)													{
HXLINE(  80)														int _g106 = 0;
HXDLIN(  80)														int _g107 = b37->width;
HXDLIN(  80)														while((_g106 < _g107)){
HXLINE(  80)															_g106 = (_g106 + 1);
HXDLIN(  80)															int x27 = (_g106 - 1);
HXDLIN(  80)															{
HXLINE(  80)																w5 = (w5 + 1);
HXDLIN(  80)																b37->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  80)															{
HXLINE(  80)																w5 = (w5 + 1);
HXDLIN(  80)																b37->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  80)															{
HXLINE(  80)																w5 = (w5 + 1);
HXDLIN(  80)																b37->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  80)															{
HXLINE(  80)																w5 = (w5 + 1);
HXDLIN(  80)																b37->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  80)									undoImage16 = b37;
            								}
            								break;
            								case (int)1: {
HXLINE(  80)									 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::ArrIntImg a41 = arrI5;
HXDLIN(  80)									{
HXLINE(  80)										a41->width = width5;
HXDLIN(  80)										a41->height = height5;
HXDLIN(  80)										a41->data = ::Array_obj< int >::__new(0);
HXDLIN(  80)										a41->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  80)										{
HXLINE(  80)											int _g108 = 0;
HXDLIN(  80)											int _g109 = a41->length;
HXDLIN(  80)											while((_g108 < _g109)){
HXLINE(  80)												_g108 = (_g108 + 1);
HXDLIN(  80)												int i32 = (_g108 - 1);
HXDLIN(  80)												a41->data[i32] = 0;
            											}
            										}
            									}
HXDLIN(  80)									undoImage16 = a41;
            								}
            								break;
            								case (int)2: {
HXLINE(  80)									 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::U32ArrImg b38 = u32a5;
HXDLIN(  80)									{
HXLINE(  80)										b38->width = width5;
HXDLIN(  80)										b38->height = height5;
HXDLIN(  80)										b38->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  80)										int size5 = (b38->length * 4);
HXDLIN(  80)										b38->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN(  80)										{
HXLINE(  80)											int _g110 = 0;
HXDLIN(  80)											int _g111 = b38->length;
HXDLIN(  80)											while((_g110 < _g111)){
HXLINE(  80)												_g110 = (_g110 + 1);
HXDLIN(  80)												int i33 = (_g110 - 1);
HXDLIN(  80)												{
HXLINE(  80)													 ::haxe::io::ArrayBufferViewImpl this178 = b38->data;
HXDLIN(  80)													bool undoImage17;
HXDLIN(  80)													if ((i33 >= 0)) {
HXLINE(  80)														undoImage17 = (i33 < (this178->byteLength >> 2));
            													}
            													else {
HXLINE(  80)														undoImage17 = false;
            													}
HXDLIN(  80)													if (undoImage17) {
HXLINE(  80)														 ::haxe::io::Bytes _this5 = this178->bytes;
HXDLIN(  80)														int pos5 = ((i33 << 2) + this178->byteOffset);
HXDLIN(  80)														_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN(  80)														_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN(  80)														_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN(  80)														_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  80)									undoImage16 = b38;
            								}
            								break;
            								case (int)3: {
HXLINE(  80)									 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::VecIntImg v16 = vec5;
HXDLIN(  80)									{
HXLINE(  80)										v16->width = width5;
HXDLIN(  80)										v16->height = height5;
HXDLIN(  80)										v16->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  80)										v16->data = ::Array_obj< int >::__new(v16->length);
HXDLIN(  80)										{
HXLINE(  80)											int _g112 = 0;
HXDLIN(  80)											int _g113 = v16->length;
HXDLIN(  80)											while((_g112 < _g113)){
HXLINE(  80)												_g112 = (_g112 + 1);
HXDLIN(  80)												int i34 = (_g112 - 1);
HXDLIN(  80)												v16->data->__unsafe_set(i34,0);
            											}
            										}
            									}
HXDLIN(  80)									undoImage16 = v16;
            								}
            								break;
            								case (int)4: {
HXLINE(  80)									 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::StackIntImg b39 = sInt5;
HXDLIN(  80)									{
HXLINE(  80)										b39->width = width5;
HXDLIN(  80)										b39->height = height5;
HXDLIN(  80)										b39->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  80)										b39->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  80)										{
HXLINE(  80)											int len11 = b39->length;
HXDLIN(  80)											 ::haxe::ds::GenericStack_Int d5 = b39->data;
HXDLIN(  80)											if (::hx::IsNull( d5->head )) {
HXLINE(  80)												int _g114 = 0;
HXDLIN(  80)												int _g115 = len11;
HXDLIN(  80)												while((_g114 < _g115)){
HXLINE(  80)													_g114 = (_g114 + 1);
HXDLIN(  80)													int i35 = (_g114 - 1);
HXDLIN(  80)													d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            												}
            											}
            											else {
HXLINE(  80)												int _g116 = 0;
HXDLIN(  80)												int _g117 = len11;
HXDLIN(  80)												while((_g116 < _g117)){
HXLINE(  80)													_g116 = (_g116 + 1);
HXDLIN(  80)													int i36 = (_g116 - 1);
HXDLIN(  80)													{
HXLINE(  80)														 ::haxe::ds::GenericCell_Int l5 = b39->data->head;
HXDLIN(  80)														 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN(  80)														{
HXLINE(  80)															int _g118 = 0;
HXDLIN(  80)															int _g119 = i36;
HXDLIN(  80)															while((_g118 < _g119)){
HXLINE(  80)																_g118 = (_g118 + 1);
HXDLIN(  80)																int i37 = (_g118 - 1);
HXLINE( 345)																prev5 = l5;
HXLINE( 346)																l5 = l5->next;
            															}
            														}
HXLINE(  80)														if (::hx::IsNull( prev5 )) {
HXLINE(  80)															b39->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  80)															l5 = null();
            														}
            														else {
HXLINE(  80)															prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  80)															l5 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  80)									undoImage16 = b39;
            								}
            								break;
            							}
HXDLIN(  80)							this177->image = undoImage16;
HXDLIN(  80)							this177->width = width5;
HXDLIN(  80)							this177->height = height5;
HXDLIN(  80)							this177->imageType = ( (int)(imageType5) );
HXDLIN(  80)							undoImage15 = this177;
HXDLIN(  80)							{
HXLINE(  80)								int rectLeft5 = xIter35->start;
HXDLIN(  80)								int rectTop5 = yIter35->start;
HXDLIN(  80)								int rectRight5 = xIter35->max;
HXDLIN(  80)								bool forceClear5 = false;
HXDLIN(  80)								{
HXLINE(  80)									int _g120 = rectTop5;
HXDLIN(  80)									int _g121 = yIter35->max;
HXDLIN(  80)									while((_g120 < _g121)){
HXLINE(  80)										_g120 = (_g120 + 1);
HXDLIN(  80)										int dy6 = (_g120 - 1);
HXDLIN(  80)										{
HXLINE(  80)											int _g122 = rectLeft5;
HXDLIN(  80)											int _g123 = rectRight5;
HXDLIN(  80)											while((_g122 < _g123)){
HXLINE(  80)												_g122 = (_g122 + 1);
HXDLIN(  80)												int dx6 = (_g122 - 1);
HXDLIN(  80)												::Dynamic this179 = this142->image;
HXDLIN(  80)												int index30;
HXDLIN(  80)												if (this142->useVirtualPos) {
HXLINE(  80)													index30 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this142->virtualY) * ( (Float)(this142->width) )) + dx6) - this142->virtualX));
            												}
            												else {
HXLINE(  80)													index30 = ::Std_obj::_hx_int(( (Float)(((dy6 * this142->width) + dx6)) ));
            												}
HXDLIN(  80)												int c25 = ::iterMagic::Iimg_obj::get(this179,index30);
HXDLIN(  80)												int col5;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													col5 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													col5 = c25;
            												}
HXDLIN(  80)												bool _hx_tmp40;
HXDLIN(  80)												if (this142->useMask) {
HXLINE(  80)													_hx_tmp40 = ::hx::IsNotNull( this142->mask );
            												}
            												else {
HXLINE(  80)													_hx_tmp40 = false;
            												}
HXDLIN(  80)												if (_hx_tmp40) {
HXLINE(  80)													 ::pi_xy::ImageStruct this180 = this142->mask;
HXDLIN(  80)													::Dynamic this181 = this180->image;
HXDLIN(  80)													int index31;
HXDLIN(  80)													if (this180->useVirtualPos) {
HXLINE(  80)														index31 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this180->virtualY) * ( (Float)(this180->width) )) + dx6) - this180->virtualX));
            													}
            													else {
HXLINE(  80)														index31 = ::Std_obj::_hx_int(( (Float)(((dy6 * this180->width) + dx6)) ));
            													}
HXDLIN(  80)													int c26 = ::iterMagic::Iimg_obj::get(this181,index31);
HXDLIN(  80)													int v17;
HXDLIN(  80)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)														v17 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            													}
            													else {
HXLINE(  80)														v17 = c26;
            													}
HXDLIN(  80)													int maskPixel5 = v17;
HXDLIN(  80)													int this182 = col5;
HXDLIN(  80)													if ((maskPixel5 == 0)) {
HXLINE(  80)														col5 = this182;
            													}
            													else {
HXLINE(  80)														Float m05;
HXDLIN(  80)														int this183 = ((maskPixel5 >> 24) & 255);
HXDLIN(  80)														if ((this183 == 0)) {
HXLINE(  80)															m05 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															m05 = (( (Float)(this183) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float m15;
HXDLIN(  80)														int this184 = ((maskPixel5 >> 16) & 255);
HXDLIN(  80)														if ((this184 == 0)) {
HXLINE(  80)															m15 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															m15 = (( (Float)(this184) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float m25;
HXDLIN(  80)														int this185 = ((maskPixel5 >> 8) & 255);
HXDLIN(  80)														if ((this185 == 0)) {
HXLINE(  80)															m25 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															m25 = (( (Float)(this185) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float m35;
HXDLIN(  80)														int this186 = (maskPixel5 & 255);
HXDLIN(  80)														if ((this186 == 0)) {
HXLINE(  80)															m35 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															m35 = (( (Float)(this186) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this182 >> 24) & 255)) )));
HXDLIN(  80)														int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this182 >> 16) & 255)) )));
HXDLIN(  80)														int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this182 >> 8) & 255)) )));
HXDLIN(  80)														int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this182 & 255)) )));
HXDLIN(  80)														col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  80)												if ((col5 != 0)) {
HXLINE(  80)													int x28 = (dx6 - rectLeft5);
HXDLIN(  80)													int y28 = (dy6 - rectTop5);
HXDLIN(  80)													int c27 = col5;
HXDLIN(  80)													bool _hx_tmp41;
HXDLIN(  80)													if ((((c27 >> 24) & 255) < 254)) {
HXLINE(  80)														_hx_tmp41 = undoImage15->transparent;
            													}
            													else {
HXLINE(  80)														_hx_tmp41 = false;
            													}
HXDLIN(  80)													if (_hx_tmp41) {
HXLINE(  80)														int location10;
HXDLIN(  80)														if (undoImage15->useVirtualPos) {
HXLINE(  80)															location10 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x28) - undoImage15->virtualX));
            														}
            														else {
HXLINE(  80)															location10 = ::Std_obj::_hx_int(( (Float)(((y28 * undoImage15->width) + x28)) ));
            														}
HXDLIN(  80)														int this187 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN(  80)														int this188;
HXDLIN(  80)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)															this188 = ((((((this187 >> 24) & 255) << 24) | ((this187 & 255) << 16)) | (((this187 >> 8) & 255) << 8)) | ((this187 >> 16) & 255));
            														}
            														else {
HXLINE(  80)															this188 = this187;
            														}
HXDLIN(  80)														Float a113;
HXDLIN(  80)														int this189 = ((this188 >> 24) & 255);
HXDLIN(  80)														if ((this189 == 0)) {
HXLINE(  80)															a113 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															a113 = (( (Float)(this189) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float r110;
HXDLIN(  80)														int this190 = ((this188 >> 16) & 255);
HXDLIN(  80)														if ((this190 == 0)) {
HXLINE(  80)															r110 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															r110 = (( (Float)(this190) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float g110;
HXDLIN(  80)														int this191 = ((this188 >> 8) & 255);
HXDLIN(  80)														if ((this191 == 0)) {
HXLINE(  80)															g110 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															g110 = (( (Float)(this191) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float b114;
HXDLIN(  80)														int this192 = (this188 & 255);
HXDLIN(  80)														if ((this192 == 0)) {
HXLINE(  80)															b114 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															b114 = (( (Float)(this192) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float a211;
HXDLIN(  80)														int this193 = ((col5 >> 24) & 255);
HXDLIN(  80)														if ((this193 == 0)) {
HXLINE(  80)															a211 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															a211 = (( (Float)(this193) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float r210;
HXDLIN(  80)														int this194 = ((col5 >> 16) & 255);
HXDLIN(  80)														if ((this194 == 0)) {
HXLINE(  80)															r210 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															r210 = (( (Float)(this194) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float g210;
HXDLIN(  80)														int this195 = ((col5 >> 8) & 255);
HXDLIN(  80)														if ((this195 == 0)) {
HXLINE(  80)															g210 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															g210 = (( (Float)(this195) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float b214;
HXDLIN(  80)														int this196 = (col5 & 255);
HXDLIN(  80)														if ((this196 == 0)) {
HXLINE(  80)															b214 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															b214 = (( (Float)(this196) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN(  80)														int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r210 * a211))));
HXDLIN(  80)														int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g210 * a211))));
HXDLIN(  80)														int b40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b214 * a211))));
HXDLIN(  80)														int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN(  80)														int blended10 = ((((a42 << 24) | (r30 << 16)) | (g30 << 8)) | b40);
HXDLIN(  80)														{
HXLINE(  80)															int _hx_tmp42;
HXDLIN(  80)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)																_hx_tmp42 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            															}
            															else {
HXLINE(  80)																_hx_tmp42 = blended10;
            															}
HXDLIN(  80)															::iterMagic::Iimg_obj::set(undoImage15->image,location10,_hx_tmp42);
            														}
            													}
            													else {
HXLINE(  80)														::Dynamic this197 = undoImage15->image;
HXDLIN(  80)														int index32;
HXDLIN(  80)														if (undoImage15->useVirtualPos) {
HXLINE(  80)															index32 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x28) - undoImage15->virtualX));
            														}
            														else {
HXLINE(  80)															index32 = ::Std_obj::_hx_int(( (Float)(((y28 * undoImage15->width) + x28)) ));
            														}
HXDLIN(  80)														int _hx_tmp43;
HXDLIN(  80)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)															_hx_tmp43 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            														}
            														else {
HXLINE(  80)															_hx_tmp43 = c27;
            														}
HXDLIN(  80)														::iterMagic::Iimg_obj::set(this197,index32,_hx_tmp43);
            													}
            												}
            												else {
HXLINE(  80)													if (forceClear5) {
HXLINE(  80)														::Dynamic this198 = undoImage15->image;
HXDLIN(  80)														int x29 = (dx6 - rectLeft5);
HXDLIN(  80)														int y29 = (dy6 - rectTop5);
HXDLIN(  80)														int index33;
HXDLIN(  80)														if (undoImage15->useVirtualPos) {
HXLINE(  80)															index33 = ::Std_obj::_hx_int(((((( (Float)(y29) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x29) - undoImage15->virtualX));
            														}
            														else {
HXLINE(  80)															index33 = ::Std_obj::_hx_int(( (Float)(((y29 * undoImage15->width) + x29)) ));
            														}
HXDLIN(  80)														::iterMagic::Iimg_obj::set(this198,index33,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  80)						bool foundY5 = false;
HXDLIN(  80)						Float s5 = ((Float)0.);
HXDLIN(  80)						Float t5 = ((Float)0.);
HXDLIN(  80)						Float sxx5 = ((Float)0.);
HXDLIN(  80)						Float txx5 = ((Float)0.);
HXDLIN(  80)						{
HXLINE(  80)							int _g_min10 = xIter35->start;
HXDLIN(  80)							int _g_max10 = xIter35->max;
HXDLIN(  80)							while((_g_min10 < _g_max10)){
HXLINE(  80)								_g_min10 = (_g_min10 + 1);
HXDLIN(  80)								int x30 = (_g_min10 - 1);
HXLINE( 222)								sxx5 = (sx5 * ( (Float)(x30) ));
HXLINE( 223)								txx5 = (tx5 * ( (Float)(x30) ));
HXLINE( 224)								foundY5 = false;
HXLINE(  80)								{
HXLINE(  80)									int _g_min11 = yIter35->start;
HXDLIN(  80)									int _g_max11 = yIter35->max;
HXDLIN(  80)									while((_g_min11 < _g_max11)){
HXLINE(  80)										_g_min11 = (_g_min11 + 1);
HXDLIN(  80)										int y30 = (_g_min11 - 1);
HXLINE( 226)										s5 = ((s05 + sxx5) + (sy5 * ( (Float)(y30) )));
HXLINE( 227)										t5 = ((t05 + txx5) + (ty5 * ( (Float)(y30) )));
HXLINE(  80)										bool _hx_tmp44;
HXDLIN(  80)										if (!((s5 <= 0))) {
HXLINE(  80)											_hx_tmp44 = (t5 <= 0);
            										}
            										else {
HXLINE(  80)											_hx_tmp44 = true;
            										}
HXDLIN(  80)										if (_hx_tmp44) {
HXLINE(  80)											if (foundY5) {
HXLINE(  80)												goto _hx_goto_129;
            											}
            										}
            										else {
HXLINE(  80)											if (((s5 + t5) < A5)) {
HXLINE(  80)												int x31 = ::hx::Mod(x30,tileImage->width);
HXDLIN(  80)												int y31 = ::hx::Mod(y30,tileImage->height);
HXDLIN(  80)												::Dynamic this199 = tileImage->image;
HXDLIN(  80)												int index34;
HXDLIN(  80)												if (tileImage->useVirtualPos) {
HXLINE(  80)													index34 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x31) - tileImage->virtualX));
            												}
            												else {
HXLINE(  80)													index34 = ::Std_obj::_hx_int(( (Float)(((y31 * tileImage->width) + x31)) ));
            												}
HXDLIN(  80)												int c28 = ::iterMagic::Iimg_obj::get(this199,index34);
HXDLIN(  80)												int color5;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													color5 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													color5 = c28;
            												}
HXDLIN(  80)												{
HXLINE(  80)													int c29 = color5;
HXDLIN(  80)													bool _hx_tmp45;
HXDLIN(  80)													if ((((c29 >> 24) & 255) < 254)) {
HXLINE(  80)														_hx_tmp45 = this142->transparent;
            													}
            													else {
HXLINE(  80)														_hx_tmp45 = false;
            													}
HXDLIN(  80)													if (_hx_tmp45) {
HXLINE(  80)														int location11;
HXDLIN(  80)														if (this142->useVirtualPos) {
HXLINE(  80)															location11 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - this142->virtualY) * ( (Float)(this142->width) )) + x30) - this142->virtualX));
            														}
            														else {
HXLINE(  80)															location11 = ::Std_obj::_hx_int(( (Float)(((y30 * this142->width) + x30)) ));
            														}
HXDLIN(  80)														int this200 = ::iterMagic::Iimg_obj::get(this142->image,location11);
HXDLIN(  80)														int this201;
HXDLIN(  80)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)															this201 = ((((((this200 >> 24) & 255) << 24) | ((this200 & 255) << 16)) | (((this200 >> 8) & 255) << 8)) | ((this200 >> 16) & 255));
            														}
            														else {
HXLINE(  80)															this201 = this200;
            														}
HXDLIN(  80)														Float a114;
HXDLIN(  80)														int this202 = ((this201 >> 24) & 255);
HXDLIN(  80)														if ((this202 == 0)) {
HXLINE(  80)															a114 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															a114 = (( (Float)(this202) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float r111;
HXDLIN(  80)														int this203 = ((this201 >> 16) & 255);
HXDLIN(  80)														if ((this203 == 0)) {
HXLINE(  80)															r111 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															r111 = (( (Float)(this203) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float g111;
HXDLIN(  80)														int this204 = ((this201 >> 8) & 255);
HXDLIN(  80)														if ((this204 == 0)) {
HXLINE(  80)															g111 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															g111 = (( (Float)(this204) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float b115;
HXDLIN(  80)														int this205 = (this201 & 255);
HXDLIN(  80)														if ((this205 == 0)) {
HXLINE(  80)															b115 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															b115 = (( (Float)(this205) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float a212;
HXDLIN(  80)														int this206 = ((color5 >> 24) & 255);
HXDLIN(  80)														if ((this206 == 0)) {
HXLINE(  80)															a212 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															a212 = (( (Float)(this206) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float r211;
HXDLIN(  80)														int this207 = ((color5 >> 16) & 255);
HXDLIN(  80)														if ((this207 == 0)) {
HXLINE(  80)															r211 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															r211 = (( (Float)(this207) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float g211;
HXDLIN(  80)														int this208 = ((color5 >> 8) & 255);
HXDLIN(  80)														if ((this208 == 0)) {
HXLINE(  80)															g211 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															g211 = (( (Float)(this208) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float b215;
HXDLIN(  80)														int this209 = (color5 & 255);
HXDLIN(  80)														if ((this209 == 0)) {
HXLINE(  80)															b215 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															b215 = (( (Float)(this209) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN(  80)														int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a311) + (r211 * a212))));
HXDLIN(  80)														int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a311) + (g211 * a212))));
HXDLIN(  80)														int b41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b215 * a212))));
HXDLIN(  80)														int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN(  80)														int blended11 = ((((a43 << 24) | (r31 << 16)) | (g31 << 8)) | b41);
HXDLIN(  80)														{
HXLINE(  80)															int _hx_tmp46;
HXDLIN(  80)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)																_hx_tmp46 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            															}
            															else {
HXLINE(  80)																_hx_tmp46 = blended11;
            															}
HXDLIN(  80)															::iterMagic::Iimg_obj::set(this142->image,location11,_hx_tmp46);
            														}
            													}
            													else {
HXLINE(  80)														::Dynamic this210 = this142->image;
HXDLIN(  80)														int index35;
HXDLIN(  80)														if (this142->useVirtualPos) {
HXLINE(  80)															index35 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - this142->virtualY) * ( (Float)(this142->width) )) + x30) - this142->virtualX));
            														}
            														else {
HXLINE(  80)															index35 = ::Std_obj::_hx_int(( (Float)(((y30 * this142->width) + x30)) ));
            														}
HXDLIN(  80)														int _hx_tmp47;
HXDLIN(  80)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)															_hx_tmp47 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            														}
            														else {
HXLINE(  80)															_hx_tmp47 = c29;
            														}
HXDLIN(  80)														::iterMagic::Iimg_obj::set(this210,index35,_hx_tmp47);
            													}
            												}
HXLINE( 236)												foundY5 = true;
            											}
            											else {
HXLINE(  80)												if (foundY5) {
HXLINE(  80)													goto _hx_goto_129;
            												}
            											}
            										}
            									}
            									_hx_goto_129:;
            								}
            							}
            						}
HXDLIN(  80)						if ((hasHit3 == false)) {
HXLINE(  80)							 ::pi_xy::algo::HitTri v18 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx5,y21,bx7,by5,cx6,cy9,true);
HXDLIN(  80)							if (hasUndo5) {
HXLINE(  80)								v18->undoImage = undoImage15;
HXDLIN(  80)								v18->undoX = xIter35->start;
HXDLIN(  80)								v18->undoY = yIter35->start;
            							}
            						}
            					}
            				}
HXDLIN(  80)				if ((hasHit3 == true)) {
HXLINE(  80)					 ::pi_xy::algo::HitQuad v19 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,x,y21,bx5,y21,bx5,cy7,x,cy7,true);
            				}
            			}
            		}
HXLINE(  82)		{
HXLINE(  82)			 ::pi_xy::ImageStruct this211 = pixelimage;
HXDLIN(  82)			Float cx7 = (x + dx);
HXDLIN(  82)			Float rx1 = ( (Float)(dx) );
HXDLIN(  82)			{
HXLINE(  82)				 ::Dynamic targetError2 = ((Float)1.05);
HXDLIN(  82)				if (::hx::IsNull( targetError2 )) {
HXLINE( 101)					targetError2 = ((Float)1.05);
            				}
HXLINE(  82)				Float rSmall2;
HXDLIN(  82)				if ((rx1 > bottomRadius)) {
HXLINE(  82)					rSmall2 = bottomRadius;
            				}
            				else {
HXLINE(  82)					rSmall2 = rx1;
            				}
HXDLIN(  82)				 ::Dynamic targetE2 = ( (Float)(targetError2) );
HXDLIN(  82)				if (::hx::IsNull( targetE2 )) {
HXLINE(  20)					targetE2 = ((Float)1.05);
            				}
HXLINE(  82)				int result2 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE2) ) / rSmall2)))));
HXDLIN(  82)				int noSides2;
HXDLIN(  82)				if ((result2 < 12)) {
HXLINE(  82)					noSides2 = 12;
            				}
            				else {
HXLINE(  82)					if ((result2 > 500)) {
HXLINE(  82)						noSides2 = 500;
            					}
            					else {
HXLINE(  82)						noSides2 = result2;
            					}
            				}
HXDLIN(  82)				int sides2 = (::Math_obj::ceil((( (Float)(noSides2) ) / ( (Float)(4) ))) * 4);
HXDLIN(  82)				Float theta2 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides2) ));
HXDLIN(  82)				Float omega2 = (::Math_obj::PI / ( (Float)(2) ));
HXDLIN(  82)				int quarter2 = ::Std_obj::_hx_int((( (Float)(sides2) ) / ( (Float)(4) )));
HXDLIN(  82)				Float lastX2 = ((Float)0.);
HXDLIN(  82)				Float lastY2 = ((Float)0.);
HXDLIN(  82)				{
HXLINE(  73)					lastX2 = (cx7 + (rx1 * ::Math_obj::cos(((( (Float)(sides2) ) * theta2) + omega2))));
HXLINE(  74)					lastY2 = (lowerY + (bottomRadius * ::Math_obj::sin(((( (Float)(sides2) ) * theta2) + omega2))));
            				}
HXLINE(  82)				{
HXLINE(  82)					int _g124 = 0;
HXDLIN(  82)					int _g125 = (quarter2 + 1);
HXDLIN(  82)					while((_g124 < _g125)){
HXLINE(  82)						_g124 = (_g124 + 1);
HXDLIN(  82)						int i38 = (_g124 - 1);
HXDLIN(  82)						Float nextX2 = (cx7 + (rx1 * ::Math_obj::cos((((( (Float)(i38) ) * theta2) + ((Float)0.0001)) + omega2))));
HXDLIN(  82)						Float nextY2 = (lowerY + (bottomRadius * ::Math_obj::sin((((( (Float)(i38) ) * theta2) + ((Float)0.0001)) + omega2))));
HXDLIN(  82)						{
HXLINE(  82)							 ::pi_xy::ImageStruct this212 = this211;
HXDLIN(  82)							bool hasHit4 = false;
HXDLIN(  82)							{
HXLINE(  82)								Float bx8 = lastX2;
HXDLIN(  82)								Float by6 = lastY2;
HXDLIN(  82)								Float cx8 = nextX2;
HXDLIN(  82)								Float cy10 = nextY2;
HXDLIN(  82)								bool adjustWinding6 = (((((cx7 * by6) - (bx8 * lowerY)) + ((bx8 * cy10) - (cx8 * by6))) + ((cx8 * lowerY) - (cx7 * cy10))) > 0);
HXDLIN(  82)								if (!(adjustWinding6)) {
HXLINE(  82)									Float bx_6 = bx8;
HXDLIN(  82)									Float by_6 = by6;
HXLINE( 187)									bx8 = cx8;
HXLINE( 188)									by6 = cy10;
HXLINE( 189)									cx8 = bx_6;
HXLINE( 190)									cy10 = by_6;
            								}
HXLINE(  82)								{
HXLINE(  82)									bool hasUndo6 = false;
HXDLIN(  82)									Float s06 = ((lowerY * cx8) - (cx7 * cy10));
HXDLIN(  82)									Float sx6 = (cy10 - lowerY);
HXDLIN(  82)									Float sy6 = (cx7 - cx8);
HXDLIN(  82)									Float t06 = ((cx7 * by6) - (lowerY * bx8));
HXDLIN(  82)									Float tx6 = (lowerY - by6);
HXDLIN(  82)									Float ty6 = (bx8 - cx7);
HXDLIN(  82)									Float A6 = ((((-(by6) * cx8) + (lowerY * (-(bx8) + cx8))) + (cx7 * (by6 - cy10))) + (bx8 * cy10));
HXDLIN(  82)									 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN(  82)									if ((cx7 > bx8)) {
HXLINE(  82)										if ((cx7 > cx8)) {
HXLINE(  82)											int min24;
HXDLIN(  82)											if ((bx8 > cx8)) {
HXLINE(  82)												min24 = ::Math_obj::floor(cx8);
            											}
            											else {
HXLINE(  82)												min24 = ::Math_obj::floor(bx8);
            											}
HXDLIN(  82)											int ii_min48 = min24;
HXDLIN(  82)											int ii_max48 = ::Math_obj::ceil(cx7);
HXDLIN(  82)											xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            										}
            										else {
HXLINE(  82)											int ii_min49 = ::Math_obj::floor(bx8);
HXDLIN(  82)											int ii_max49 = ::Math_obj::ceil(cx8);
HXDLIN(  82)											xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            										}
            									}
            									else {
HXLINE(  82)										if ((bx8 > cx8)) {
HXLINE(  82)											int min25;
HXDLIN(  82)											if ((cx7 > cx8)) {
HXLINE(  82)												min25 = ::Math_obj::floor(cx8);
            											}
            											else {
HXLINE(  82)												min25 = ::Math_obj::ceil(cx7);
            											}
HXDLIN(  82)											int ii_min50 = min25;
HXDLIN(  82)											int ii_max50 = ::Math_obj::ceil(bx8);
HXDLIN(  82)											xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            										}
            										else {
HXLINE(  82)											int ii_min51 = ::Math_obj::floor(cx7);
HXDLIN(  82)											int ii_max51 = ::Math_obj::ceil(cx8);
HXDLIN(  82)											xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            										}
            									}
HXDLIN(  82)									 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN(  82)									if ((lowerY > by6)) {
HXLINE(  82)										if ((lowerY > cy10)) {
HXLINE(  82)											int min26;
HXDLIN(  82)											if ((by6 > cy10)) {
HXLINE(  82)												min26 = ::Math_obj::floor(cy10);
            											}
            											else {
HXLINE(  82)												min26 = ::Math_obj::floor(by6);
            											}
HXDLIN(  82)											int ii_min52 = min26;
HXDLIN(  82)											int ii_max52 = ::Math_obj::ceil(lowerY);
HXDLIN(  82)											yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            										}
            										else {
HXLINE(  82)											int ii_min53 = ::Math_obj::floor(by6);
HXDLIN(  82)											int ii_max53 = ::Math_obj::ceil(cy10);
HXDLIN(  82)											yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            										}
            									}
            									else {
HXLINE(  82)										if ((by6 > cy10)) {
HXLINE(  82)											int min27;
HXDLIN(  82)											if ((lowerY > cy10)) {
HXLINE(  82)												min27 = ::Math_obj::floor(cy10);
            											}
            											else {
HXLINE(  82)												min27 = ::Math_obj::ceil(lowerY);
            											}
HXDLIN(  82)											int ii_min54 = min27;
HXDLIN(  82)											int ii_max54 = ::Math_obj::ceil(by6);
HXDLIN(  82)											yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            										}
            										else {
HXLINE(  82)											int ii_min55 = ::Math_obj::floor(lowerY);
HXDLIN(  82)											int ii_max55 = ::Math_obj::ceil(cy10);
HXDLIN(  82)											yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            										}
            									}
HXDLIN(  82)									 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN(  82)									if (hasUndo6) {
HXLINE(  82)										int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN(  82)										int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN(  82)										 ::Dynamic imageType6 = null();
HXDLIN(  82)										 ::pi_xy::ImageStruct this213 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  82)										if (::hx::IsNull( imageType6 )) {
HXLINE(  54)											imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  82)										::Dynamic undoImage19;
HXDLIN(  82)										switch((int)(( (int)(imageType6) ))){
            											case (int)0: {
HXLINE(  82)												 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  82)												 ::iterMagic::BytesImg b42 = byt6;
HXDLIN(  82)												{
HXLINE(  82)													b42->width = width6;
HXDLIN(  82)													b42->height = height6;
HXDLIN(  82)													b42->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  82)													b42->data = ::haxe::io::Bytes_obj::alloc((b42->length * 4));
HXDLIN(  82)													{
HXLINE(  82)														int len12 = b42->length;
HXDLIN(  82)														int w6 = 0;
HXDLIN(  82)														{
HXLINE(  82)															int _g126 = 0;
HXDLIN(  82)															int _g127 = b42->height;
HXDLIN(  82)															while((_g126 < _g127)){
HXLINE(  82)																_g126 = (_g126 + 1);
HXDLIN(  82)																int y32 = (_g126 - 1);
HXDLIN(  82)																{
HXLINE(  82)																	int _g128 = 0;
HXDLIN(  82)																	int _g129 = b42->width;
HXDLIN(  82)																	while((_g128 < _g129)){
HXLINE(  82)																		_g128 = (_g128 + 1);
HXDLIN(  82)																		int x32 = (_g128 - 1);
HXDLIN(  82)																		{
HXLINE(  82)																			w6 = (w6 + 1);
HXDLIN(  82)																			b42->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  82)																		{
HXLINE(  82)																			w6 = (w6 + 1);
HXDLIN(  82)																			b42->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  82)																		{
HXLINE(  82)																			w6 = (w6 + 1);
HXDLIN(  82)																			b42->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  82)																		{
HXLINE(  82)																			w6 = (w6 + 1);
HXDLIN(  82)																			b42->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  82)												undoImage19 = b42;
            											}
            											break;
            											case (int)1: {
HXLINE(  82)												 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)												 ::iterMagic::ArrIntImg a44 = arrI6;
HXDLIN(  82)												{
HXLINE(  82)													a44->width = width6;
HXDLIN(  82)													a44->height = height6;
HXDLIN(  82)													a44->data = ::Array_obj< int >::__new(0);
HXDLIN(  82)													a44->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  82)													{
HXLINE(  82)														int _g130 = 0;
HXDLIN(  82)														int _g131 = a44->length;
HXDLIN(  82)														while((_g130 < _g131)){
HXLINE(  82)															_g130 = (_g130 + 1);
HXDLIN(  82)															int i39 = (_g130 - 1);
HXDLIN(  82)															a44->data[i39] = 0;
            														}
            													}
            												}
HXDLIN(  82)												undoImage19 = a44;
            											}
            											break;
            											case (int)2: {
HXLINE(  82)												 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  82)												 ::iterMagic::U32ArrImg b43 = u32a6;
HXDLIN(  82)												{
HXLINE(  82)													b43->width = width6;
HXDLIN(  82)													b43->height = height6;
HXDLIN(  82)													b43->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  82)													int size6 = (b43->length * 4);
HXDLIN(  82)													b43->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN(  82)													{
HXLINE(  82)														int _g132 = 0;
HXDLIN(  82)														int _g133 = b43->length;
HXDLIN(  82)														while((_g132 < _g133)){
HXLINE(  82)															_g132 = (_g132 + 1);
HXDLIN(  82)															int i40 = (_g132 - 1);
HXDLIN(  82)															{
HXLINE(  82)																 ::haxe::io::ArrayBufferViewImpl this214 = b43->data;
HXDLIN(  82)																bool undoImage20;
HXDLIN(  82)																if ((i40 >= 0)) {
HXLINE(  82)																	undoImage20 = (i40 < (this214->byteLength >> 2));
            																}
            																else {
HXLINE(  82)																	undoImage20 = false;
            																}
HXDLIN(  82)																if (undoImage20) {
HXLINE(  82)																	 ::haxe::io::Bytes _this6 = this214->bytes;
HXDLIN(  82)																	int pos6 = ((i40 << 2) + this214->byteOffset);
HXDLIN(  82)																	_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN(  82)																	_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN(  82)																	_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN(  82)																	_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  82)												undoImage19 = b43;
            											}
            											break;
            											case (int)3: {
HXLINE(  82)												 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)												 ::iterMagic::VecIntImg v20 = vec6;
HXDLIN(  82)												{
HXLINE(  82)													v20->width = width6;
HXDLIN(  82)													v20->height = height6;
HXDLIN(  82)													v20->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  82)													v20->data = ::Array_obj< int >::__new(v20->length);
HXDLIN(  82)													{
HXLINE(  82)														int _g134 = 0;
HXDLIN(  82)														int _g135 = v20->length;
HXDLIN(  82)														while((_g134 < _g135)){
HXLINE(  82)															_g134 = (_g134 + 1);
HXDLIN(  82)															int i41 = (_g134 - 1);
HXDLIN(  82)															v20->data->__unsafe_set(i41,0);
            														}
            													}
            												}
HXDLIN(  82)												undoImage19 = v20;
            											}
            											break;
            											case (int)4: {
HXLINE(  82)												 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)												 ::iterMagic::StackIntImg b44 = sInt6;
HXDLIN(  82)												{
HXLINE(  82)													b44->width = width6;
HXDLIN(  82)													b44->height = height6;
HXDLIN(  82)													b44->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  82)													b44->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  82)													{
HXLINE(  82)														int len13 = b44->length;
HXDLIN(  82)														 ::haxe::ds::GenericStack_Int d6 = b44->data;
HXDLIN(  82)														if (::hx::IsNull( d6->head )) {
HXLINE(  82)															int _g136 = 0;
HXDLIN(  82)															int _g137 = len13;
HXDLIN(  82)															while((_g136 < _g137)){
HXLINE(  82)																_g136 = (_g136 + 1);
HXDLIN(  82)																int i42 = (_g136 - 1);
HXDLIN(  82)																d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            															}
            														}
            														else {
HXLINE(  82)															int _g138 = 0;
HXDLIN(  82)															int _g139 = len13;
HXDLIN(  82)															while((_g138 < _g139)){
HXLINE(  82)																_g138 = (_g138 + 1);
HXDLIN(  82)																int i43 = (_g138 - 1);
HXDLIN(  82)																{
HXLINE(  82)																	 ::haxe::ds::GenericCell_Int l6 = b44->data->head;
HXDLIN(  82)																	 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN(  82)																	{
HXLINE(  82)																		int _g140 = 0;
HXDLIN(  82)																		int _g141 = i43;
HXDLIN(  82)																		while((_g140 < _g141)){
HXLINE(  82)																			_g140 = (_g140 + 1);
HXDLIN(  82)																			int i44 = (_g140 - 1);
HXLINE( 345)																			prev6 = l6;
HXLINE( 346)																			l6 = l6->next;
            																		}
            																	}
HXLINE(  82)																	if (::hx::IsNull( prev6 )) {
HXLINE(  82)																		b44->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  82)																		l6 = null();
            																	}
            																	else {
HXLINE(  82)																		prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  82)																		l6 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  82)												undoImage19 = b44;
            											}
            											break;
            										}
HXDLIN(  82)										this213->image = undoImage19;
HXDLIN(  82)										this213->width = width6;
HXDLIN(  82)										this213->height = height6;
HXDLIN(  82)										this213->imageType = ( (int)(imageType6) );
HXDLIN(  82)										undoImage18 = this213;
HXDLIN(  82)										{
HXLINE(  82)											int rectLeft6 = xIter36->start;
HXDLIN(  82)											int rectTop6 = yIter36->start;
HXDLIN(  82)											int rectRight6 = xIter36->max;
HXDLIN(  82)											bool forceClear6 = false;
HXDLIN(  82)											{
HXLINE(  82)												int _g142 = rectTop6;
HXDLIN(  82)												int _g143 = yIter36->max;
HXDLIN(  82)												while((_g142 < _g143)){
HXLINE(  82)													_g142 = (_g142 + 1);
HXDLIN(  82)													int dy7 = (_g142 - 1);
HXDLIN(  82)													{
HXLINE(  82)														int _g144 = rectLeft6;
HXDLIN(  82)														int _g145 = rectRight6;
HXDLIN(  82)														while((_g144 < _g145)){
HXLINE(  82)															_g144 = (_g144 + 1);
HXDLIN(  82)															int dx7 = (_g144 - 1);
HXDLIN(  82)															::Dynamic this215 = this212->image;
HXDLIN(  82)															int index36;
HXDLIN(  82)															if (this212->useVirtualPos) {
HXLINE(  82)																index36 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this212->virtualY) * ( (Float)(this212->width) )) + dx7) - this212->virtualX));
            															}
            															else {
HXLINE(  82)																index36 = ::Std_obj::_hx_int(( (Float)(((dy7 * this212->width) + dx7)) ));
            															}
HXDLIN(  82)															int c30 = ::iterMagic::Iimg_obj::get(this215,index36);
HXDLIN(  82)															int col6;
HXDLIN(  82)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																col6 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            															}
            															else {
HXLINE(  82)																col6 = c30;
            															}
HXDLIN(  82)															bool _hx_tmp48;
HXDLIN(  82)															if (this212->useMask) {
HXLINE(  82)																_hx_tmp48 = ::hx::IsNotNull( this212->mask );
            															}
            															else {
HXLINE(  82)																_hx_tmp48 = false;
            															}
HXDLIN(  82)															if (_hx_tmp48) {
HXLINE(  82)																 ::pi_xy::ImageStruct this216 = this212->mask;
HXDLIN(  82)																::Dynamic this217 = this216->image;
HXDLIN(  82)																int index37;
HXDLIN(  82)																if (this216->useVirtualPos) {
HXLINE(  82)																	index37 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this216->virtualY) * ( (Float)(this216->width) )) + dx7) - this216->virtualX));
            																}
            																else {
HXLINE(  82)																	index37 = ::Std_obj::_hx_int(( (Float)(((dy7 * this216->width) + dx7)) ));
            																}
HXDLIN(  82)																int c31 = ::iterMagic::Iimg_obj::get(this217,index37);
HXDLIN(  82)																int v21;
HXDLIN(  82)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																	v21 = ((((((c31 >> 24) & 255) << 24) | ((c31 & 255) << 16)) | (((c31 >> 8) & 255) << 8)) | ((c31 >> 16) & 255));
            																}
            																else {
HXLINE(  82)																	v21 = c31;
            																}
HXDLIN(  82)																int maskPixel6 = v21;
HXDLIN(  82)																int this218 = col6;
HXDLIN(  82)																if ((maskPixel6 == 0)) {
HXLINE(  82)																	col6 = this218;
            																}
            																else {
HXLINE(  82)																	Float m06;
HXDLIN(  82)																	int this219 = ((maskPixel6 >> 24) & 255);
HXDLIN(  82)																	if ((this219 == 0)) {
HXLINE(  82)																		m06 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		m06 = (( (Float)(this219) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float m16;
HXDLIN(  82)																	int this220 = ((maskPixel6 >> 16) & 255);
HXDLIN(  82)																	if ((this220 == 0)) {
HXLINE(  82)																		m16 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		m16 = (( (Float)(this220) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float m26;
HXDLIN(  82)																	int this221 = ((maskPixel6 >> 8) & 255);
HXDLIN(  82)																	if ((this221 == 0)) {
HXLINE(  82)																		m26 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		m26 = (( (Float)(this221) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float m36;
HXDLIN(  82)																	int this222 = (maskPixel6 & 255);
HXDLIN(  82)																	if ((this222 == 0)) {
HXLINE(  82)																		m36 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		m36 = (( (Float)(this222) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this218 >> 24) & 255)) )));
HXDLIN(  82)																	int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this218 >> 16) & 255)) )));
HXDLIN(  82)																	int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this218 >> 8) & 255)) )));
HXDLIN(  82)																	int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this218 & 255)) )));
HXDLIN(  82)																	col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  82)															if ((col6 != 0)) {
HXLINE(  82)																int x33 = (dx7 - rectLeft6);
HXDLIN(  82)																int y33 = (dy7 - rectTop6);
HXDLIN(  82)																int c32 = col6;
HXDLIN(  82)																bool _hx_tmp49;
HXDLIN(  82)																if ((((c32 >> 24) & 255) < 254)) {
HXLINE(  82)																	_hx_tmp49 = undoImage18->transparent;
            																}
            																else {
HXLINE(  82)																	_hx_tmp49 = false;
            																}
HXDLIN(  82)																if (_hx_tmp49) {
HXLINE(  82)																	int location12;
HXDLIN(  82)																	if (undoImage18->useVirtualPos) {
HXLINE(  82)																		location12 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x33) - undoImage18->virtualX));
            																	}
            																	else {
HXLINE(  82)																		location12 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage18->width) + x33)) ));
            																	}
HXDLIN(  82)																	int this223 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN(  82)																	int this224;
HXDLIN(  82)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																		this224 = ((((((this223 >> 24) & 255) << 24) | ((this223 & 255) << 16)) | (((this223 >> 8) & 255) << 8)) | ((this223 >> 16) & 255));
            																	}
            																	else {
HXLINE(  82)																		this224 = this223;
            																	}
HXDLIN(  82)																	Float a115;
HXDLIN(  82)																	int this225 = ((this224 >> 24) & 255);
HXDLIN(  82)																	if ((this225 == 0)) {
HXLINE(  82)																		a115 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		a115 = (( (Float)(this225) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float r112;
HXDLIN(  82)																	int this226 = ((this224 >> 16) & 255);
HXDLIN(  82)																	if ((this226 == 0)) {
HXLINE(  82)																		r112 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		r112 = (( (Float)(this226) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float g112;
HXDLIN(  82)																	int this227 = ((this224 >> 8) & 255);
HXDLIN(  82)																	if ((this227 == 0)) {
HXLINE(  82)																		g112 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		g112 = (( (Float)(this227) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float b116;
HXDLIN(  82)																	int this228 = (this224 & 255);
HXDLIN(  82)																	if ((this228 == 0)) {
HXLINE(  82)																		b116 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		b116 = (( (Float)(this228) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float a213;
HXDLIN(  82)																	int this229 = ((col6 >> 24) & 255);
HXDLIN(  82)																	if ((this229 == 0)) {
HXLINE(  82)																		a213 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		a213 = (( (Float)(this229) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float r212;
HXDLIN(  82)																	int this230 = ((col6 >> 16) & 255);
HXDLIN(  82)																	if ((this230 == 0)) {
HXLINE(  82)																		r212 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		r212 = (( (Float)(this230) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float g212;
HXDLIN(  82)																	int this231 = ((col6 >> 8) & 255);
HXDLIN(  82)																	if ((this231 == 0)) {
HXLINE(  82)																		g212 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		g212 = (( (Float)(this231) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float b216;
HXDLIN(  82)																	int this232 = (col6 & 255);
HXDLIN(  82)																	if ((this232 == 0)) {
HXLINE(  82)																		b216 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		b216 = (( (Float)(this232) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN(  82)																	int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a312) + (r212 * a213))));
HXDLIN(  82)																	int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a312) + (g212 * a213))));
HXDLIN(  82)																	int b45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b216 * a213))));
HXDLIN(  82)																	int a45 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN(  82)																	int blended12 = ((((a45 << 24) | (r32 << 16)) | (g32 << 8)) | b45);
HXDLIN(  82)																	{
HXLINE(  82)																		int _hx_tmp50;
HXDLIN(  82)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																			_hx_tmp50 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            																		}
            																		else {
HXLINE(  82)																			_hx_tmp50 = blended12;
            																		}
HXDLIN(  82)																		::iterMagic::Iimg_obj::set(undoImage18->image,location12,_hx_tmp50);
            																	}
            																}
            																else {
HXLINE(  82)																	::Dynamic this233 = undoImage18->image;
HXDLIN(  82)																	int index38;
HXDLIN(  82)																	if (undoImage18->useVirtualPos) {
HXLINE(  82)																		index38 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x33) - undoImage18->virtualX));
            																	}
            																	else {
HXLINE(  82)																		index38 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage18->width) + x33)) ));
            																	}
HXDLIN(  82)																	int _hx_tmp51;
HXDLIN(  82)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																		_hx_tmp51 = ((((((c32 >> 24) & 255) << 24) | ((c32 & 255) << 16)) | (((c32 >> 8) & 255) << 8)) | ((c32 >> 16) & 255));
            																	}
            																	else {
HXLINE(  82)																		_hx_tmp51 = c32;
            																	}
HXDLIN(  82)																	::iterMagic::Iimg_obj::set(this233,index38,_hx_tmp51);
            																}
            															}
            															else {
HXLINE(  82)																if (forceClear6) {
HXLINE(  82)																	::Dynamic this234 = undoImage18->image;
HXDLIN(  82)																	int x34 = (dx7 - rectLeft6);
HXDLIN(  82)																	int y34 = (dy7 - rectTop6);
HXDLIN(  82)																	int index39;
HXDLIN(  82)																	if (undoImage18->useVirtualPos) {
HXLINE(  82)																		index39 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x34) - undoImage18->virtualX));
            																	}
            																	else {
HXLINE(  82)																		index39 = ::Std_obj::_hx_int(( (Float)(((y34 * undoImage18->width) + x34)) ));
            																	}
HXDLIN(  82)																	::iterMagic::Iimg_obj::set(this234,index39,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  82)									bool foundY6 = false;
HXDLIN(  82)									Float s6 = ((Float)0.);
HXDLIN(  82)									Float t6 = ((Float)0.);
HXDLIN(  82)									Float sxx6 = ((Float)0.);
HXDLIN(  82)									Float txx6 = ((Float)0.);
HXDLIN(  82)									{
HXLINE(  82)										int _g_min12 = xIter36->start;
HXDLIN(  82)										int _g_max12 = xIter36->max;
HXDLIN(  82)										while((_g_min12 < _g_max12)){
HXLINE(  82)											_g_min12 = (_g_min12 + 1);
HXDLIN(  82)											int x35 = (_g_min12 - 1);
HXLINE( 222)											sxx6 = (sx6 * ( (Float)(x35) ));
HXLINE( 223)											txx6 = (tx6 * ( (Float)(x35) ));
HXLINE( 224)											foundY6 = false;
HXLINE(  82)											{
HXLINE(  82)												int _g_min13 = yIter36->start;
HXDLIN(  82)												int _g_max13 = yIter36->max;
HXDLIN(  82)												while((_g_min13 < _g_max13)){
HXLINE(  82)													_g_min13 = (_g_min13 + 1);
HXDLIN(  82)													int y35 = (_g_min13 - 1);
HXLINE( 226)													s6 = ((s06 + sxx6) + (sy6 * ( (Float)(y35) )));
HXLINE( 227)													t6 = ((t06 + txx6) + (ty6 * ( (Float)(y35) )));
HXLINE(  82)													bool _hx_tmp52;
HXDLIN(  82)													if (!((s6 <= 0))) {
HXLINE(  82)														_hx_tmp52 = (t6 <= 0);
            													}
            													else {
HXLINE(  82)														_hx_tmp52 = true;
            													}
HXDLIN(  82)													if (_hx_tmp52) {
HXLINE(  82)														if (foundY6) {
HXLINE(  82)															goto _hx_goto_142;
            														}
            													}
            													else {
HXLINE(  82)														if (((s6 + t6) < A6)) {
HXLINE(  82)															int x36 = ::hx::Mod(x35,tileImage->width);
HXDLIN(  82)															int y36 = ::hx::Mod(y35,tileImage->height);
HXDLIN(  82)															::Dynamic this235 = tileImage->image;
HXDLIN(  82)															int index40;
HXDLIN(  82)															if (tileImage->useVirtualPos) {
HXLINE(  82)																index40 = ::Std_obj::_hx_int(((((( (Float)(y36) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x36) - tileImage->virtualX));
            															}
            															else {
HXLINE(  82)																index40 = ::Std_obj::_hx_int(( (Float)(((y36 * tileImage->width) + x36)) ));
            															}
HXDLIN(  82)															int c33 = ::iterMagic::Iimg_obj::get(this235,index40);
HXDLIN(  82)															int color6;
HXDLIN(  82)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																color6 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            															}
            															else {
HXLINE(  82)																color6 = c33;
            															}
HXDLIN(  82)															{
HXLINE(  82)																int c34 = color6;
HXDLIN(  82)																bool _hx_tmp53;
HXDLIN(  82)																if ((((c34 >> 24) & 255) < 254)) {
HXLINE(  82)																	_hx_tmp53 = this212->transparent;
            																}
            																else {
HXLINE(  82)																	_hx_tmp53 = false;
            																}
HXDLIN(  82)																if (_hx_tmp53) {
HXLINE(  82)																	int location13;
HXDLIN(  82)																	if (this212->useVirtualPos) {
HXLINE(  82)																		location13 = ::Std_obj::_hx_int(((((( (Float)(y35) ) - this212->virtualY) * ( (Float)(this212->width) )) + x35) - this212->virtualX));
            																	}
            																	else {
HXLINE(  82)																		location13 = ::Std_obj::_hx_int(( (Float)(((y35 * this212->width) + x35)) ));
            																	}
HXDLIN(  82)																	int this236 = ::iterMagic::Iimg_obj::get(this212->image,location13);
HXDLIN(  82)																	int this237;
HXDLIN(  82)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																		this237 = ((((((this236 >> 24) & 255) << 24) | ((this236 & 255) << 16)) | (((this236 >> 8) & 255) << 8)) | ((this236 >> 16) & 255));
            																	}
            																	else {
HXLINE(  82)																		this237 = this236;
            																	}
HXDLIN(  82)																	Float a116;
HXDLIN(  82)																	int this238 = ((this237 >> 24) & 255);
HXDLIN(  82)																	if ((this238 == 0)) {
HXLINE(  82)																		a116 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		a116 = (( (Float)(this238) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float r113;
HXDLIN(  82)																	int this239 = ((this237 >> 16) & 255);
HXDLIN(  82)																	if ((this239 == 0)) {
HXLINE(  82)																		r113 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		r113 = (( (Float)(this239) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float g113;
HXDLIN(  82)																	int this240 = ((this237 >> 8) & 255);
HXDLIN(  82)																	if ((this240 == 0)) {
HXLINE(  82)																		g113 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		g113 = (( (Float)(this240) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float b117;
HXDLIN(  82)																	int this241 = (this237 & 255);
HXDLIN(  82)																	if ((this241 == 0)) {
HXLINE(  82)																		b117 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		b117 = (( (Float)(this241) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float a214;
HXDLIN(  82)																	int this242 = ((color6 >> 24) & 255);
HXDLIN(  82)																	if ((this242 == 0)) {
HXLINE(  82)																		a214 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		a214 = (( (Float)(this242) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float r213;
HXDLIN(  82)																	int this243 = ((color6 >> 16) & 255);
HXDLIN(  82)																	if ((this243 == 0)) {
HXLINE(  82)																		r213 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		r213 = (( (Float)(this243) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float g213;
HXDLIN(  82)																	int this244 = ((color6 >> 8) & 255);
HXDLIN(  82)																	if ((this244 == 0)) {
HXLINE(  82)																		g213 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		g213 = (( (Float)(this244) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float b217;
HXDLIN(  82)																	int this245 = (color6 & 255);
HXDLIN(  82)																	if ((this245 == 0)) {
HXLINE(  82)																		b217 = ((Float)0.);
            																	}
            																	else {
HXLINE(  82)																		b217 = (( (Float)(this245) ) / ( (Float)(255) ));
            																	}
HXDLIN(  82)																	Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN(  82)																	int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a313) + (r213 * a214))));
HXDLIN(  82)																	int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a313) + (g213 * a214))));
HXDLIN(  82)																	int b46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b217 * a214))));
HXDLIN(  82)																	int a46 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN(  82)																	int blended13 = ((((a46 << 24) | (r33 << 16)) | (g33 << 8)) | b46);
HXDLIN(  82)																	{
HXLINE(  82)																		int _hx_tmp54;
HXDLIN(  82)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																			_hx_tmp54 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            																		}
            																		else {
HXLINE(  82)																			_hx_tmp54 = blended13;
            																		}
HXDLIN(  82)																		::iterMagic::Iimg_obj::set(this212->image,location13,_hx_tmp54);
            																	}
            																}
            																else {
HXLINE(  82)																	::Dynamic this246 = this212->image;
HXDLIN(  82)																	int index41;
HXDLIN(  82)																	if (this212->useVirtualPos) {
HXLINE(  82)																		index41 = ::Std_obj::_hx_int(((((( (Float)(y35) ) - this212->virtualY) * ( (Float)(this212->width) )) + x35) - this212->virtualX));
            																	}
            																	else {
HXLINE(  82)																		index41 = ::Std_obj::_hx_int(( (Float)(((y35 * this212->width) + x35)) ));
            																	}
HXDLIN(  82)																	int _hx_tmp55;
HXDLIN(  82)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																		_hx_tmp55 = ((((((c34 >> 24) & 255) << 24) | ((c34 & 255) << 16)) | (((c34 >> 8) & 255) << 8)) | ((c34 >> 16) & 255));
            																	}
            																	else {
HXLINE(  82)																		_hx_tmp55 = c34;
            																	}
HXDLIN(  82)																	::iterMagic::Iimg_obj::set(this246,index41,_hx_tmp55);
            																}
            															}
HXLINE( 236)															foundY6 = true;
            														}
            														else {
HXLINE(  82)															if (foundY6) {
HXLINE(  82)																goto _hx_goto_142;
            															}
            														}
            													}
            												}
            												_hx_goto_142:;
            											}
            										}
            									}
HXDLIN(  82)									if ((hasHit4 == false)) {
HXLINE(  82)										 ::pi_xy::algo::HitTri v22 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx7,lowerY,bx8,by6,cx8,cy10,true);
HXDLIN(  82)										if (hasUndo6) {
HXLINE(  82)											v22->undoImage = undoImage18;
HXDLIN(  82)											v22->undoX = xIter36->start;
HXDLIN(  82)											v22->undoY = yIter36->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  93)						lastX2 = nextX2;
HXLINE(  94)						lastY2 = nextY2;
            					}
            				}
            			}
            		}
HXLINE(  83)		{
HXLINE(  83)			 ::pi_xy::ImageStruct this247 = pixelimage;
HXDLIN(  83)			Float x37 = (x + dx);
HXDLIN(  83)			bool hasHit5 = false;
HXDLIN(  83)			Float bx9 = (x37 + ( (Float)(fat) ));
HXDLIN(  83)			Float cy11 = (lowerY + bottomRadius);
HXDLIN(  83)			{
HXLINE(  83)				{
HXLINE(  83)					Float bx10 = bx9;
HXDLIN(  83)					Float by7 = lowerY;
HXDLIN(  83)					Float cx9 = x37;
HXDLIN(  83)					Float cy12 = cy11;
HXDLIN(  83)					bool adjustWinding7 = (((((x37 * by7) - (bx10 * lowerY)) + ((bx10 * cy12) - (cx9 * by7))) + ((cx9 * lowerY) - (x37 * cy12))) > 0);
HXDLIN(  83)					if (!(adjustWinding7)) {
HXLINE(  83)						Float bx_7 = bx10;
HXDLIN(  83)						Float by_7 = by7;
HXLINE( 187)						bx10 = cx9;
HXLINE( 188)						by7 = cy12;
HXLINE( 189)						cx9 = bx_7;
HXLINE( 190)						cy12 = by_7;
            					}
HXLINE(  83)					{
HXLINE(  83)						bool hasUndo7 = false;
HXDLIN(  83)						Float s07 = ((lowerY * cx9) - (x37 * cy12));
HXDLIN(  83)						Float sx7 = (cy12 - lowerY);
HXDLIN(  83)						Float sy7 = (x37 - cx9);
HXDLIN(  83)						Float t07 = ((x37 * by7) - (lowerY * bx10));
HXDLIN(  83)						Float tx7 = (lowerY - by7);
HXDLIN(  83)						Float ty7 = (bx10 - x37);
HXDLIN(  83)						Float A7 = ((((-(by7) * cx9) + (lowerY * (-(bx10) + cx9))) + (x37 * (by7 - cy12))) + (bx10 * cy12));
HXDLIN(  83)						 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN(  83)						if ((x37 > bx10)) {
HXLINE(  83)							if ((x37 > cx9)) {
HXLINE(  83)								int min28;
HXDLIN(  83)								if ((bx10 > cx9)) {
HXLINE(  83)									min28 = ::Math_obj::floor(cx9);
            								}
            								else {
HXLINE(  83)									min28 = ::Math_obj::floor(bx10);
            								}
HXDLIN(  83)								int ii_min56 = min28;
HXDLIN(  83)								int ii_max56 = ::Math_obj::ceil(x37);
HXDLIN(  83)								xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            							}
            							else {
HXLINE(  83)								int ii_min57 = ::Math_obj::floor(bx10);
HXDLIN(  83)								int ii_max57 = ::Math_obj::ceil(cx9);
HXDLIN(  83)								xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            							}
            						}
            						else {
HXLINE(  83)							if ((bx10 > cx9)) {
HXLINE(  83)								int min29;
HXDLIN(  83)								if ((x37 > cx9)) {
HXLINE(  83)									min29 = ::Math_obj::floor(cx9);
            								}
            								else {
HXLINE(  83)									min29 = ::Math_obj::ceil(x37);
            								}
HXDLIN(  83)								int ii_min58 = min29;
HXDLIN(  83)								int ii_max58 = ::Math_obj::ceil(bx10);
HXDLIN(  83)								xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            							}
            							else {
HXLINE(  83)								int ii_min59 = ::Math_obj::floor(x37);
HXDLIN(  83)								int ii_max59 = ::Math_obj::ceil(cx9);
HXDLIN(  83)								xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            							}
            						}
HXDLIN(  83)						 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN(  83)						if ((lowerY > by7)) {
HXLINE(  83)							if ((lowerY > cy12)) {
HXLINE(  83)								int min30;
HXDLIN(  83)								if ((by7 > cy12)) {
HXLINE(  83)									min30 = ::Math_obj::floor(cy12);
            								}
            								else {
HXLINE(  83)									min30 = ::Math_obj::floor(by7);
            								}
HXDLIN(  83)								int ii_min60 = min30;
HXDLIN(  83)								int ii_max60 = ::Math_obj::ceil(lowerY);
HXDLIN(  83)								yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            							}
            							else {
HXLINE(  83)								int ii_min61 = ::Math_obj::floor(by7);
HXDLIN(  83)								int ii_max61 = ::Math_obj::ceil(cy12);
HXDLIN(  83)								yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            							}
            						}
            						else {
HXLINE(  83)							if ((by7 > cy12)) {
HXLINE(  83)								int min31;
HXDLIN(  83)								if ((lowerY > cy12)) {
HXLINE(  83)									min31 = ::Math_obj::floor(cy12);
            								}
            								else {
HXLINE(  83)									min31 = ::Math_obj::ceil(lowerY);
            								}
HXDLIN(  83)								int ii_min62 = min31;
HXDLIN(  83)								int ii_max62 = ::Math_obj::ceil(by7);
HXDLIN(  83)								yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            							}
            							else {
HXLINE(  83)								int ii_min63 = ::Math_obj::floor(lowerY);
HXDLIN(  83)								int ii_max63 = ::Math_obj::ceil(cy12);
HXDLIN(  83)								yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            							}
            						}
HXDLIN(  83)						 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN(  83)						if (hasUndo7) {
HXLINE(  83)							int width7 = ((xIter37->max - xIter37->start) + 1);
HXDLIN(  83)							int height7 = ((yIter37->max - yIter37->start) + 1);
HXDLIN(  83)							 ::Dynamic imageType7 = null();
HXDLIN(  83)							 ::pi_xy::ImageStruct this248 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  83)							if (::hx::IsNull( imageType7 )) {
HXLINE(  54)								imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  83)							::Dynamic undoImage22;
HXDLIN(  83)							switch((int)(( (int)(imageType7) ))){
            								case (int)0: {
HXLINE(  83)									 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  83)									 ::iterMagic::BytesImg b47 = byt7;
HXDLIN(  83)									{
HXLINE(  83)										b47->width = width7;
HXDLIN(  83)										b47->height = height7;
HXDLIN(  83)										b47->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  83)										b47->data = ::haxe::io::Bytes_obj::alloc((b47->length * 4));
HXDLIN(  83)										{
HXLINE(  83)											int len14 = b47->length;
HXDLIN(  83)											int w7 = 0;
HXDLIN(  83)											{
HXLINE(  83)												int _g146 = 0;
HXDLIN(  83)												int _g147 = b47->height;
HXDLIN(  83)												while((_g146 < _g147)){
HXLINE(  83)													_g146 = (_g146 + 1);
HXDLIN(  83)													int y37 = (_g146 - 1);
HXDLIN(  83)													{
HXLINE(  83)														int _g148 = 0;
HXDLIN(  83)														int _g149 = b47->width;
HXDLIN(  83)														while((_g148 < _g149)){
HXLINE(  83)															_g148 = (_g148 + 1);
HXDLIN(  83)															int x38 = (_g148 - 1);
HXDLIN(  83)															{
HXLINE(  83)																w7 = (w7 + 1);
HXDLIN(  83)																b47->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  83)															{
HXLINE(  83)																w7 = (w7 + 1);
HXDLIN(  83)																b47->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  83)															{
HXLINE(  83)																w7 = (w7 + 1);
HXDLIN(  83)																b47->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  83)															{
HXLINE(  83)																w7 = (w7 + 1);
HXDLIN(  83)																b47->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  83)									undoImage22 = b47;
            								}
            								break;
            								case (int)1: {
HXLINE(  83)									 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  83)									 ::iterMagic::ArrIntImg a47 = arrI7;
HXDLIN(  83)									{
HXLINE(  83)										a47->width = width7;
HXDLIN(  83)										a47->height = height7;
HXDLIN(  83)										a47->data = ::Array_obj< int >::__new(0);
HXDLIN(  83)										a47->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  83)										{
HXLINE(  83)											int _g150 = 0;
HXDLIN(  83)											int _g151 = a47->length;
HXDLIN(  83)											while((_g150 < _g151)){
HXLINE(  83)												_g150 = (_g150 + 1);
HXDLIN(  83)												int i45 = (_g150 - 1);
HXDLIN(  83)												a47->data[i45] = 0;
            											}
            										}
            									}
HXDLIN(  83)									undoImage22 = a47;
            								}
            								break;
            								case (int)2: {
HXLINE(  83)									 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  83)									 ::iterMagic::U32ArrImg b48 = u32a7;
HXDLIN(  83)									{
HXLINE(  83)										b48->width = width7;
HXDLIN(  83)										b48->height = height7;
HXDLIN(  83)										b48->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  83)										int size7 = (b48->length * 4);
HXDLIN(  83)										b48->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN(  83)										{
HXLINE(  83)											int _g152 = 0;
HXDLIN(  83)											int _g153 = b48->length;
HXDLIN(  83)											while((_g152 < _g153)){
HXLINE(  83)												_g152 = (_g152 + 1);
HXDLIN(  83)												int i46 = (_g152 - 1);
HXDLIN(  83)												{
HXLINE(  83)													 ::haxe::io::ArrayBufferViewImpl this249 = b48->data;
HXDLIN(  83)													bool undoImage23;
HXDLIN(  83)													if ((i46 >= 0)) {
HXLINE(  83)														undoImage23 = (i46 < (this249->byteLength >> 2));
            													}
            													else {
HXLINE(  83)														undoImage23 = false;
            													}
HXDLIN(  83)													if (undoImage23) {
HXLINE(  83)														 ::haxe::io::Bytes _this7 = this249->bytes;
HXDLIN(  83)														int pos7 = ((i46 << 2) + this249->byteOffset);
HXDLIN(  83)														_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN(  83)														_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN(  83)														_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN(  83)														_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  83)									undoImage22 = b48;
            								}
            								break;
            								case (int)3: {
HXLINE(  83)									 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  83)									 ::iterMagic::VecIntImg v23 = vec7;
HXDLIN(  83)									{
HXLINE(  83)										v23->width = width7;
HXDLIN(  83)										v23->height = height7;
HXDLIN(  83)										v23->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  83)										v23->data = ::Array_obj< int >::__new(v23->length);
HXDLIN(  83)										{
HXLINE(  83)											int _g154 = 0;
HXDLIN(  83)											int _g155 = v23->length;
HXDLIN(  83)											while((_g154 < _g155)){
HXLINE(  83)												_g154 = (_g154 + 1);
HXDLIN(  83)												int i47 = (_g154 - 1);
HXDLIN(  83)												v23->data->__unsafe_set(i47,0);
            											}
            										}
            									}
HXDLIN(  83)									undoImage22 = v23;
            								}
            								break;
            								case (int)4: {
HXLINE(  83)									 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  83)									 ::iterMagic::StackIntImg b49 = sInt7;
HXDLIN(  83)									{
HXLINE(  83)										b49->width = width7;
HXDLIN(  83)										b49->height = height7;
HXDLIN(  83)										b49->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  83)										b49->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  83)										{
HXLINE(  83)											int len15 = b49->length;
HXDLIN(  83)											 ::haxe::ds::GenericStack_Int d7 = b49->data;
HXDLIN(  83)											if (::hx::IsNull( d7->head )) {
HXLINE(  83)												int _g156 = 0;
HXDLIN(  83)												int _g157 = len15;
HXDLIN(  83)												while((_g156 < _g157)){
HXLINE(  83)													_g156 = (_g156 + 1);
HXDLIN(  83)													int i48 = (_g156 - 1);
HXDLIN(  83)													d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            												}
            											}
            											else {
HXLINE(  83)												int _g158 = 0;
HXDLIN(  83)												int _g159 = len15;
HXDLIN(  83)												while((_g158 < _g159)){
HXLINE(  83)													_g158 = (_g158 + 1);
HXDLIN(  83)													int i49 = (_g158 - 1);
HXDLIN(  83)													{
HXLINE(  83)														 ::haxe::ds::GenericCell_Int l7 = b49->data->head;
HXDLIN(  83)														 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN(  83)														{
HXLINE(  83)															int _g160 = 0;
HXDLIN(  83)															int _g161 = i49;
HXDLIN(  83)															while((_g160 < _g161)){
HXLINE(  83)																_g160 = (_g160 + 1);
HXDLIN(  83)																int i50 = (_g160 - 1);
HXLINE( 345)																prev7 = l7;
HXLINE( 346)																l7 = l7->next;
            															}
            														}
HXLINE(  83)														if (::hx::IsNull( prev7 )) {
HXLINE(  83)															b49->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  83)															l7 = null();
            														}
            														else {
HXLINE(  83)															prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  83)															l7 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  83)									undoImage22 = b49;
            								}
            								break;
            							}
HXDLIN(  83)							this248->image = undoImage22;
HXDLIN(  83)							this248->width = width7;
HXDLIN(  83)							this248->height = height7;
HXDLIN(  83)							this248->imageType = ( (int)(imageType7) );
HXDLIN(  83)							undoImage21 = this248;
HXDLIN(  83)							{
HXLINE(  83)								int rectLeft7 = xIter37->start;
HXDLIN(  83)								int rectTop7 = yIter37->start;
HXDLIN(  83)								int rectRight7 = xIter37->max;
HXDLIN(  83)								bool forceClear7 = false;
HXDLIN(  83)								{
HXLINE(  83)									int _g162 = rectTop7;
HXDLIN(  83)									int _g163 = yIter37->max;
HXDLIN(  83)									while((_g162 < _g163)){
HXLINE(  83)										_g162 = (_g162 + 1);
HXDLIN(  83)										int dy8 = (_g162 - 1);
HXDLIN(  83)										{
HXLINE(  83)											int _g164 = rectLeft7;
HXDLIN(  83)											int _g165 = rectRight7;
HXDLIN(  83)											while((_g164 < _g165)){
HXLINE(  83)												_g164 = (_g164 + 1);
HXDLIN(  83)												int dx8 = (_g164 - 1);
HXDLIN(  83)												::Dynamic this250 = this247->image;
HXDLIN(  83)												int index42;
HXDLIN(  83)												if (this247->useVirtualPos) {
HXLINE(  83)													index42 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this247->virtualY) * ( (Float)(this247->width) )) + dx8) - this247->virtualX));
            												}
            												else {
HXLINE(  83)													index42 = ::Std_obj::_hx_int(( (Float)(((dy8 * this247->width) + dx8)) ));
            												}
HXDLIN(  83)												int c35 = ::iterMagic::Iimg_obj::get(this250,index42);
HXDLIN(  83)												int col7;
HXDLIN(  83)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)													col7 = ((((((c35 >> 24) & 255) << 24) | ((c35 & 255) << 16)) | (((c35 >> 8) & 255) << 8)) | ((c35 >> 16) & 255));
            												}
            												else {
HXLINE(  83)													col7 = c35;
            												}
HXDLIN(  83)												bool _hx_tmp56;
HXDLIN(  83)												if (this247->useMask) {
HXLINE(  83)													_hx_tmp56 = ::hx::IsNotNull( this247->mask );
            												}
            												else {
HXLINE(  83)													_hx_tmp56 = false;
            												}
HXDLIN(  83)												if (_hx_tmp56) {
HXLINE(  83)													 ::pi_xy::ImageStruct this251 = this247->mask;
HXDLIN(  83)													::Dynamic this252 = this251->image;
HXDLIN(  83)													int index43;
HXDLIN(  83)													if (this251->useVirtualPos) {
HXLINE(  83)														index43 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this251->virtualY) * ( (Float)(this251->width) )) + dx8) - this251->virtualX));
            													}
            													else {
HXLINE(  83)														index43 = ::Std_obj::_hx_int(( (Float)(((dy8 * this251->width) + dx8)) ));
            													}
HXDLIN(  83)													int c36 = ::iterMagic::Iimg_obj::get(this252,index43);
HXDLIN(  83)													int v24;
HXDLIN(  83)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)														v24 = ((((((c36 >> 24) & 255) << 24) | ((c36 & 255) << 16)) | (((c36 >> 8) & 255) << 8)) | ((c36 >> 16) & 255));
            													}
            													else {
HXLINE(  83)														v24 = c36;
            													}
HXDLIN(  83)													int maskPixel7 = v24;
HXDLIN(  83)													int this253 = col7;
HXDLIN(  83)													if ((maskPixel7 == 0)) {
HXLINE(  83)														col7 = this253;
            													}
            													else {
HXLINE(  83)														Float m07;
HXDLIN(  83)														int this254 = ((maskPixel7 >> 24) & 255);
HXDLIN(  83)														if ((this254 == 0)) {
HXLINE(  83)															m07 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															m07 = (( (Float)(this254) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float m17;
HXDLIN(  83)														int this255 = ((maskPixel7 >> 16) & 255);
HXDLIN(  83)														if ((this255 == 0)) {
HXLINE(  83)															m17 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															m17 = (( (Float)(this255) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float m27;
HXDLIN(  83)														int this256 = ((maskPixel7 >> 8) & 255);
HXDLIN(  83)														if ((this256 == 0)) {
HXLINE(  83)															m27 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															m27 = (( (Float)(this256) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float m37;
HXDLIN(  83)														int this257 = (maskPixel7 & 255);
HXDLIN(  83)														if ((this257 == 0)) {
HXLINE(  83)															m37 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															m37 = (( (Float)(this257) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this253 >> 24) & 255)) )));
HXDLIN(  83)														int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this253 >> 16) & 255)) )));
HXDLIN(  83)														int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this253 >> 8) & 255)) )));
HXDLIN(  83)														int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this253 & 255)) )));
HXDLIN(  83)														col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  83)												if ((col7 != 0)) {
HXLINE(  83)													int x39 = (dx8 - rectLeft7);
HXDLIN(  83)													int y38 = (dy8 - rectTop7);
HXDLIN(  83)													int c37 = col7;
HXDLIN(  83)													bool _hx_tmp57;
HXDLIN(  83)													if ((((c37 >> 24) & 255) < 254)) {
HXLINE(  83)														_hx_tmp57 = undoImage21->transparent;
            													}
            													else {
HXLINE(  83)														_hx_tmp57 = false;
            													}
HXDLIN(  83)													if (_hx_tmp57) {
HXLINE(  83)														int location14;
HXDLIN(  83)														if (undoImage21->useVirtualPos) {
HXLINE(  83)															location14 = ::Std_obj::_hx_int(((((( (Float)(y38) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x39) - undoImage21->virtualX));
            														}
            														else {
HXLINE(  83)															location14 = ::Std_obj::_hx_int(( (Float)(((y38 * undoImage21->width) + x39)) ));
            														}
HXDLIN(  83)														int this258 = ::iterMagic::Iimg_obj::get(undoImage21->image,location14);
HXDLIN(  83)														int this259;
HXDLIN(  83)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)															this259 = ((((((this258 >> 24) & 255) << 24) | ((this258 & 255) << 16)) | (((this258 >> 8) & 255) << 8)) | ((this258 >> 16) & 255));
            														}
            														else {
HXLINE(  83)															this259 = this258;
            														}
HXDLIN(  83)														Float a117;
HXDLIN(  83)														int this260 = ((this259 >> 24) & 255);
HXDLIN(  83)														if ((this260 == 0)) {
HXLINE(  83)															a117 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															a117 = (( (Float)(this260) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float r114;
HXDLIN(  83)														int this261 = ((this259 >> 16) & 255);
HXDLIN(  83)														if ((this261 == 0)) {
HXLINE(  83)															r114 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															r114 = (( (Float)(this261) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float g114;
HXDLIN(  83)														int this262 = ((this259 >> 8) & 255);
HXDLIN(  83)														if ((this262 == 0)) {
HXLINE(  83)															g114 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															g114 = (( (Float)(this262) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float b118;
HXDLIN(  83)														int this263 = (this259 & 255);
HXDLIN(  83)														if ((this263 == 0)) {
HXLINE(  83)															b118 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															b118 = (( (Float)(this263) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float a215;
HXDLIN(  83)														int this264 = ((col7 >> 24) & 255);
HXDLIN(  83)														if ((this264 == 0)) {
HXLINE(  83)															a215 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															a215 = (( (Float)(this264) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float r214;
HXDLIN(  83)														int this265 = ((col7 >> 16) & 255);
HXDLIN(  83)														if ((this265 == 0)) {
HXLINE(  83)															r214 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															r214 = (( (Float)(this265) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float g214;
HXDLIN(  83)														int this266 = ((col7 >> 8) & 255);
HXDLIN(  83)														if ((this266 == 0)) {
HXLINE(  83)															g214 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															g214 = (( (Float)(this266) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float b218;
HXDLIN(  83)														int this267 = (col7 & 255);
HXDLIN(  83)														if ((this267 == 0)) {
HXLINE(  83)															b218 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															b218 = (( (Float)(this267) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN(  83)														int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a314) + (r214 * a215))));
HXDLIN(  83)														int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a314) + (g214 * a215))));
HXDLIN(  83)														int b50 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b218 * a215))));
HXDLIN(  83)														int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN(  83)														int blended14 = ((((a48 << 24) | (r34 << 16)) | (g34 << 8)) | b50);
HXDLIN(  83)														{
HXLINE(  83)															int _hx_tmp58;
HXDLIN(  83)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)																_hx_tmp58 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            															}
            															else {
HXLINE(  83)																_hx_tmp58 = blended14;
            															}
HXDLIN(  83)															::iterMagic::Iimg_obj::set(undoImage21->image,location14,_hx_tmp58);
            														}
            													}
            													else {
HXLINE(  83)														::Dynamic this268 = undoImage21->image;
HXDLIN(  83)														int index44;
HXDLIN(  83)														if (undoImage21->useVirtualPos) {
HXLINE(  83)															index44 = ::Std_obj::_hx_int(((((( (Float)(y38) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x39) - undoImage21->virtualX));
            														}
            														else {
HXLINE(  83)															index44 = ::Std_obj::_hx_int(( (Float)(((y38 * undoImage21->width) + x39)) ));
            														}
HXDLIN(  83)														int _hx_tmp59;
HXDLIN(  83)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)															_hx_tmp59 = ((((((c37 >> 24) & 255) << 24) | ((c37 & 255) << 16)) | (((c37 >> 8) & 255) << 8)) | ((c37 >> 16) & 255));
            														}
            														else {
HXLINE(  83)															_hx_tmp59 = c37;
            														}
HXDLIN(  83)														::iterMagic::Iimg_obj::set(this268,index44,_hx_tmp59);
            													}
            												}
            												else {
HXLINE(  83)													if (forceClear7) {
HXLINE(  83)														::Dynamic this269 = undoImage21->image;
HXDLIN(  83)														int x40 = (dx8 - rectLeft7);
HXDLIN(  83)														int y39 = (dy8 - rectTop7);
HXDLIN(  83)														int index45;
HXDLIN(  83)														if (undoImage21->useVirtualPos) {
HXLINE(  83)															index45 = ::Std_obj::_hx_int(((((( (Float)(y39) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x40) - undoImage21->virtualX));
            														}
            														else {
HXLINE(  83)															index45 = ::Std_obj::_hx_int(( (Float)(((y39 * undoImage21->width) + x40)) ));
            														}
HXDLIN(  83)														::iterMagic::Iimg_obj::set(this269,index45,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  83)						bool foundY7 = false;
HXDLIN(  83)						Float s7 = ((Float)0.);
HXDLIN(  83)						Float t7 = ((Float)0.);
HXDLIN(  83)						Float sxx7 = ((Float)0.);
HXDLIN(  83)						Float txx7 = ((Float)0.);
HXDLIN(  83)						{
HXLINE(  83)							int _g_min14 = xIter37->start;
HXDLIN(  83)							int _g_max14 = xIter37->max;
HXDLIN(  83)							while((_g_min14 < _g_max14)){
HXLINE(  83)								_g_min14 = (_g_min14 + 1);
HXDLIN(  83)								int x41 = (_g_min14 - 1);
HXLINE( 222)								sxx7 = (sx7 * ( (Float)(x41) ));
HXLINE( 223)								txx7 = (tx7 * ( (Float)(x41) ));
HXLINE( 224)								foundY7 = false;
HXLINE(  83)								{
HXLINE(  83)									int _g_min15 = yIter37->start;
HXDLIN(  83)									int _g_max15 = yIter37->max;
HXDLIN(  83)									while((_g_min15 < _g_max15)){
HXLINE(  83)										_g_min15 = (_g_min15 + 1);
HXDLIN(  83)										int y40 = (_g_min15 - 1);
HXLINE( 226)										s7 = ((s07 + sxx7) + (sy7 * ( (Float)(y40) )));
HXLINE( 227)										t7 = ((t07 + txx7) + (ty7 * ( (Float)(y40) )));
HXLINE(  83)										bool _hx_tmp60;
HXDLIN(  83)										if (!((s7 <= 0))) {
HXLINE(  83)											_hx_tmp60 = (t7 <= 0);
            										}
            										else {
HXLINE(  83)											_hx_tmp60 = true;
            										}
HXDLIN(  83)										if (_hx_tmp60) {
HXLINE(  83)											if (foundY7) {
HXLINE(  83)												goto _hx_goto_154;
            											}
            										}
            										else {
HXLINE(  83)											if (((s7 + t7) < A7)) {
HXLINE(  83)												int x42 = ::hx::Mod(x41,tileImage->width);
HXDLIN(  83)												int y41 = ::hx::Mod(y40,tileImage->height);
HXDLIN(  83)												::Dynamic this270 = tileImage->image;
HXDLIN(  83)												int index46;
HXDLIN(  83)												if (tileImage->useVirtualPos) {
HXLINE(  83)													index46 = ::Std_obj::_hx_int(((((( (Float)(y41) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x42) - tileImage->virtualX));
            												}
            												else {
HXLINE(  83)													index46 = ::Std_obj::_hx_int(( (Float)(((y41 * tileImage->width) + x42)) ));
            												}
HXDLIN(  83)												int c38 = ::iterMagic::Iimg_obj::get(this270,index46);
HXDLIN(  83)												int color7;
HXDLIN(  83)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)													color7 = ((((((c38 >> 24) & 255) << 24) | ((c38 & 255) << 16)) | (((c38 >> 8) & 255) << 8)) | ((c38 >> 16) & 255));
            												}
            												else {
HXLINE(  83)													color7 = c38;
            												}
HXDLIN(  83)												{
HXLINE(  83)													int c39 = color7;
HXDLIN(  83)													bool _hx_tmp61;
HXDLIN(  83)													if ((((c39 >> 24) & 255) < 254)) {
HXLINE(  83)														_hx_tmp61 = this247->transparent;
            													}
            													else {
HXLINE(  83)														_hx_tmp61 = false;
            													}
HXDLIN(  83)													if (_hx_tmp61) {
HXLINE(  83)														int location15;
HXDLIN(  83)														if (this247->useVirtualPos) {
HXLINE(  83)															location15 = ::Std_obj::_hx_int(((((( (Float)(y40) ) - this247->virtualY) * ( (Float)(this247->width) )) + x41) - this247->virtualX));
            														}
            														else {
HXLINE(  83)															location15 = ::Std_obj::_hx_int(( (Float)(((y40 * this247->width) + x41)) ));
            														}
HXDLIN(  83)														int this271 = ::iterMagic::Iimg_obj::get(this247->image,location15);
HXDLIN(  83)														int this272;
HXDLIN(  83)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)															this272 = ((((((this271 >> 24) & 255) << 24) | ((this271 & 255) << 16)) | (((this271 >> 8) & 255) << 8)) | ((this271 >> 16) & 255));
            														}
            														else {
HXLINE(  83)															this272 = this271;
            														}
HXDLIN(  83)														Float a118;
HXDLIN(  83)														int this273 = ((this272 >> 24) & 255);
HXDLIN(  83)														if ((this273 == 0)) {
HXLINE(  83)															a118 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															a118 = (( (Float)(this273) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float r115;
HXDLIN(  83)														int this274 = ((this272 >> 16) & 255);
HXDLIN(  83)														if ((this274 == 0)) {
HXLINE(  83)															r115 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															r115 = (( (Float)(this274) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float g115;
HXDLIN(  83)														int this275 = ((this272 >> 8) & 255);
HXDLIN(  83)														if ((this275 == 0)) {
HXLINE(  83)															g115 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															g115 = (( (Float)(this275) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float b119;
HXDLIN(  83)														int this276 = (this272 & 255);
HXDLIN(  83)														if ((this276 == 0)) {
HXLINE(  83)															b119 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															b119 = (( (Float)(this276) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float a216;
HXDLIN(  83)														int this277 = ((color7 >> 24) & 255);
HXDLIN(  83)														if ((this277 == 0)) {
HXLINE(  83)															a216 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															a216 = (( (Float)(this277) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float r215;
HXDLIN(  83)														int this278 = ((color7 >> 16) & 255);
HXDLIN(  83)														if ((this278 == 0)) {
HXLINE(  83)															r215 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															r215 = (( (Float)(this278) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float g215;
HXDLIN(  83)														int this279 = ((color7 >> 8) & 255);
HXDLIN(  83)														if ((this279 == 0)) {
HXLINE(  83)															g215 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															g215 = (( (Float)(this279) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float b219;
HXDLIN(  83)														int this280 = (color7 & 255);
HXDLIN(  83)														if ((this280 == 0)) {
HXLINE(  83)															b219 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															b219 = (( (Float)(this280) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN(  83)														int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a315) + (r215 * a216))));
HXDLIN(  83)														int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a315) + (g215 * a216))));
HXDLIN(  83)														int b51 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b219 * a216))));
HXDLIN(  83)														int a49 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN(  83)														int blended15 = ((((a49 << 24) | (r35 << 16)) | (g35 << 8)) | b51);
HXDLIN(  83)														{
HXLINE(  83)															int _hx_tmp62;
HXDLIN(  83)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)																_hx_tmp62 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            															}
            															else {
HXLINE(  83)																_hx_tmp62 = blended15;
            															}
HXDLIN(  83)															::iterMagic::Iimg_obj::set(this247->image,location15,_hx_tmp62);
            														}
            													}
            													else {
HXLINE(  83)														::Dynamic this281 = this247->image;
HXDLIN(  83)														int index47;
HXDLIN(  83)														if (this247->useVirtualPos) {
HXLINE(  83)															index47 = ::Std_obj::_hx_int(((((( (Float)(y40) ) - this247->virtualY) * ( (Float)(this247->width) )) + x41) - this247->virtualX));
            														}
            														else {
HXLINE(  83)															index47 = ::Std_obj::_hx_int(( (Float)(((y40 * this247->width) + x41)) ));
            														}
HXDLIN(  83)														int _hx_tmp63;
HXDLIN(  83)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)															_hx_tmp63 = ((((((c39 >> 24) & 255) << 24) | ((c39 & 255) << 16)) | (((c39 >> 8) & 255) << 8)) | ((c39 >> 16) & 255));
            														}
            														else {
HXLINE(  83)															_hx_tmp63 = c39;
            														}
HXDLIN(  83)														::iterMagic::Iimg_obj::set(this281,index47,_hx_tmp63);
            													}
            												}
HXLINE( 236)												foundY7 = true;
            											}
            											else {
HXLINE(  83)												if (foundY7) {
HXLINE(  83)													goto _hx_goto_154;
            												}
            											}
            										}
            									}
            									_hx_goto_154:;
            								}
            							}
            						}
HXDLIN(  83)						if ((hasHit5 == false)) {
HXLINE(  83)							 ::pi_xy::algo::HitTri v25 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,x37,lowerY,bx10,by7,cx9,cy12,true);
HXDLIN(  83)							if (hasUndo7) {
HXLINE(  83)								v25->undoImage = undoImage21;
HXDLIN(  83)								v25->undoX = xIter37->start;
HXDLIN(  83)								v25->undoY = yIter37->start;
            							}
            						}
            					}
            				}
HXDLIN(  83)				{
HXLINE(  83)					Float bx11 = bx9;
HXDLIN(  83)					Float by8 = cy11;
HXDLIN(  83)					Float cx10 = x37;
HXDLIN(  83)					Float cy13 = cy11;
HXDLIN(  83)					bool adjustWinding8 = (((((bx9 * by8) - (bx11 * lowerY)) + ((bx11 * cy13) - (cx10 * by8))) + ((cx10 * lowerY) - (bx9 * cy13))) > 0);
HXDLIN(  83)					if (!(adjustWinding8)) {
HXLINE(  83)						Float bx_8 = bx11;
HXDLIN(  83)						Float by_8 = by8;
HXLINE( 187)						bx11 = cx10;
HXLINE( 188)						by8 = cy13;
HXLINE( 189)						cx10 = bx_8;
HXLINE( 190)						cy13 = by_8;
            					}
HXLINE(  83)					{
HXLINE(  83)						bool hasUndo8 = false;
HXDLIN(  83)						Float s08 = ((lowerY * cx10) - (bx9 * cy13));
HXDLIN(  83)						Float sx8 = (cy13 - lowerY);
HXDLIN(  83)						Float sy8 = (bx9 - cx10);
HXDLIN(  83)						Float t08 = ((bx9 * by8) - (lowerY * bx11));
HXDLIN(  83)						Float tx8 = (lowerY - by8);
HXDLIN(  83)						Float ty8 = (bx11 - bx9);
HXDLIN(  83)						Float A8 = ((((-(by8) * cx10) + (lowerY * (-(bx11) + cx10))) + (bx9 * (by8 - cy13))) + (bx11 * cy13));
HXDLIN(  83)						 ::pi_xy::iter::IntIterStart xIter38;
HXDLIN(  83)						if ((bx9 > bx11)) {
HXLINE(  83)							if ((bx9 > cx10)) {
HXLINE(  83)								int min32;
HXDLIN(  83)								if ((bx11 > cx10)) {
HXLINE(  83)									min32 = ::Math_obj::floor(cx10);
            								}
            								else {
HXLINE(  83)									min32 = ::Math_obj::floor(bx11);
            								}
HXDLIN(  83)								int ii_min64 = min32;
HXDLIN(  83)								int ii_max64 = ::Math_obj::ceil(bx9);
HXDLIN(  83)								xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min64,ii_max64);
            							}
            							else {
HXLINE(  83)								int ii_min65 = ::Math_obj::floor(bx11);
HXDLIN(  83)								int ii_max65 = ::Math_obj::ceil(cx10);
HXDLIN(  83)								xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min65,ii_max65);
            							}
            						}
            						else {
HXLINE(  83)							if ((bx11 > cx10)) {
HXLINE(  83)								int min33;
HXDLIN(  83)								if ((bx9 > cx10)) {
HXLINE(  83)									min33 = ::Math_obj::floor(cx10);
            								}
            								else {
HXLINE(  83)									min33 = ::Math_obj::ceil(bx9);
            								}
HXDLIN(  83)								int ii_min66 = min33;
HXDLIN(  83)								int ii_max66 = ::Math_obj::ceil(bx11);
HXDLIN(  83)								xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min66,ii_max66);
            							}
            							else {
HXLINE(  83)								int ii_min67 = ::Math_obj::floor(bx9);
HXDLIN(  83)								int ii_max67 = ::Math_obj::ceil(cx10);
HXDLIN(  83)								xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min67,ii_max67);
            							}
            						}
HXDLIN(  83)						 ::pi_xy::iter::IntIterStart yIter38;
HXDLIN(  83)						if ((lowerY > by8)) {
HXLINE(  83)							if ((lowerY > cy13)) {
HXLINE(  83)								int min34;
HXDLIN(  83)								if ((by8 > cy13)) {
HXLINE(  83)									min34 = ::Math_obj::floor(cy13);
            								}
            								else {
HXLINE(  83)									min34 = ::Math_obj::floor(by8);
            								}
HXDLIN(  83)								int ii_min68 = min34;
HXDLIN(  83)								int ii_max68 = ::Math_obj::ceil(lowerY);
HXDLIN(  83)								yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min68,ii_max68);
            							}
            							else {
HXLINE(  83)								int ii_min69 = ::Math_obj::floor(by8);
HXDLIN(  83)								int ii_max69 = ::Math_obj::ceil(cy13);
HXDLIN(  83)								yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min69,ii_max69);
            							}
            						}
            						else {
HXLINE(  83)							if ((by8 > cy13)) {
HXLINE(  83)								int min35;
HXDLIN(  83)								if ((lowerY > cy13)) {
HXLINE(  83)									min35 = ::Math_obj::floor(cy13);
            								}
            								else {
HXLINE(  83)									min35 = ::Math_obj::ceil(lowerY);
            								}
HXDLIN(  83)								int ii_min70 = min35;
HXDLIN(  83)								int ii_max70 = ::Math_obj::ceil(by8);
HXDLIN(  83)								yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min70,ii_max70);
            							}
            							else {
HXLINE(  83)								int ii_min71 = ::Math_obj::floor(lowerY);
HXDLIN(  83)								int ii_max71 = ::Math_obj::ceil(cy13);
HXDLIN(  83)								yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min71,ii_max71);
            							}
            						}
HXDLIN(  83)						 ::pi_xy::ImageStruct undoImage24 = null();
HXDLIN(  83)						if (hasUndo8) {
HXLINE(  83)							int width8 = ((xIter38->max - xIter38->start) + 1);
HXDLIN(  83)							int height8 = ((yIter38->max - yIter38->start) + 1);
HXDLIN(  83)							 ::Dynamic imageType8 = null();
HXDLIN(  83)							 ::pi_xy::ImageStruct this282 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  83)							if (::hx::IsNull( imageType8 )) {
HXLINE(  54)								imageType8 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  83)							::Dynamic undoImage25;
HXDLIN(  83)							switch((int)(( (int)(imageType8) ))){
            								case (int)0: {
HXLINE(  83)									 ::iterMagic::BytesImg byt8 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  83)									 ::iterMagic::BytesImg b52 = byt8;
HXDLIN(  83)									{
HXLINE(  83)										b52->width = width8;
HXDLIN(  83)										b52->height = height8;
HXDLIN(  83)										b52->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  83)										b52->data = ::haxe::io::Bytes_obj::alloc((b52->length * 4));
HXDLIN(  83)										{
HXLINE(  83)											int len16 = b52->length;
HXDLIN(  83)											int w8 = 0;
HXDLIN(  83)											{
HXLINE(  83)												int _g166 = 0;
HXDLIN(  83)												int _g167 = b52->height;
HXDLIN(  83)												while((_g166 < _g167)){
HXLINE(  83)													_g166 = (_g166 + 1);
HXDLIN(  83)													int y42 = (_g166 - 1);
HXDLIN(  83)													{
HXLINE(  83)														int _g168 = 0;
HXDLIN(  83)														int _g169 = b52->width;
HXDLIN(  83)														while((_g168 < _g169)){
HXLINE(  83)															_g168 = (_g168 + 1);
HXDLIN(  83)															int x43 = (_g168 - 1);
HXDLIN(  83)															{
HXLINE(  83)																w8 = (w8 + 1);
HXDLIN(  83)																b52->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  83)															{
HXLINE(  83)																w8 = (w8 + 1);
HXDLIN(  83)																b52->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  83)															{
HXLINE(  83)																w8 = (w8 + 1);
HXDLIN(  83)																b52->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  83)															{
HXLINE(  83)																w8 = (w8 + 1);
HXDLIN(  83)																b52->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  83)									undoImage25 = b52;
            								}
            								break;
            								case (int)1: {
HXLINE(  83)									 ::iterMagic::ArrIntImg arrI8 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  83)									 ::iterMagic::ArrIntImg a50 = arrI8;
HXDLIN(  83)									{
HXLINE(  83)										a50->width = width8;
HXDLIN(  83)										a50->height = height8;
HXDLIN(  83)										a50->data = ::Array_obj< int >::__new(0);
HXDLIN(  83)										a50->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  83)										{
HXLINE(  83)											int _g170 = 0;
HXDLIN(  83)											int _g171 = a50->length;
HXDLIN(  83)											while((_g170 < _g171)){
HXLINE(  83)												_g170 = (_g170 + 1);
HXDLIN(  83)												int i51 = (_g170 - 1);
HXDLIN(  83)												a50->data[i51] = 0;
            											}
            										}
            									}
HXDLIN(  83)									undoImage25 = a50;
            								}
            								break;
            								case (int)2: {
HXLINE(  83)									 ::iterMagic::U32ArrImg u32a8 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  83)									 ::iterMagic::U32ArrImg b53 = u32a8;
HXDLIN(  83)									{
HXLINE(  83)										b53->width = width8;
HXDLIN(  83)										b53->height = height8;
HXDLIN(  83)										b53->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  83)										int size8 = (b53->length * 4);
HXDLIN(  83)										b53->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size8),0,size8);
HXDLIN(  83)										{
HXLINE(  83)											int _g172 = 0;
HXDLIN(  83)											int _g173 = b53->length;
HXDLIN(  83)											while((_g172 < _g173)){
HXLINE(  83)												_g172 = (_g172 + 1);
HXDLIN(  83)												int i52 = (_g172 - 1);
HXDLIN(  83)												{
HXLINE(  83)													 ::haxe::io::ArrayBufferViewImpl this283 = b53->data;
HXDLIN(  83)													bool undoImage26;
HXDLIN(  83)													if ((i52 >= 0)) {
HXLINE(  83)														undoImage26 = (i52 < (this283->byteLength >> 2));
            													}
            													else {
HXLINE(  83)														undoImage26 = false;
            													}
HXDLIN(  83)													if (undoImage26) {
HXLINE(  83)														 ::haxe::io::Bytes _this8 = this283->bytes;
HXDLIN(  83)														int pos8 = ((i52 << 2) + this283->byteOffset);
HXDLIN(  83)														_this8->b[pos8] = ( (unsigned char)(0) );
HXDLIN(  83)														_this8->b[(pos8 + 1)] = ( (unsigned char)(0) );
HXDLIN(  83)														_this8->b[(pos8 + 2)] = ( (unsigned char)(0) );
HXDLIN(  83)														_this8->b[(pos8 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  83)									undoImage25 = b53;
            								}
            								break;
            								case (int)3: {
HXLINE(  83)									 ::iterMagic::VecIntImg vec8 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  83)									 ::iterMagic::VecIntImg v26 = vec8;
HXDLIN(  83)									{
HXLINE(  83)										v26->width = width8;
HXDLIN(  83)										v26->height = height8;
HXDLIN(  83)										v26->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  83)										v26->data = ::Array_obj< int >::__new(v26->length);
HXDLIN(  83)										{
HXLINE(  83)											int _g174 = 0;
HXDLIN(  83)											int _g175 = v26->length;
HXDLIN(  83)											while((_g174 < _g175)){
HXLINE(  83)												_g174 = (_g174 + 1);
HXDLIN(  83)												int i53 = (_g174 - 1);
HXDLIN(  83)												v26->data->__unsafe_set(i53,0);
            											}
            										}
            									}
HXDLIN(  83)									undoImage25 = v26;
            								}
            								break;
            								case (int)4: {
HXLINE(  83)									 ::iterMagic::StackIntImg sInt8 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  83)									 ::iterMagic::StackIntImg b54 = sInt8;
HXDLIN(  83)									{
HXLINE(  83)										b54->width = width8;
HXDLIN(  83)										b54->height = height8;
HXDLIN(  83)										b54->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  83)										b54->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  83)										{
HXLINE(  83)											int len17 = b54->length;
HXDLIN(  83)											 ::haxe::ds::GenericStack_Int d8 = b54->data;
HXDLIN(  83)											if (::hx::IsNull( d8->head )) {
HXLINE(  83)												int _g176 = 0;
HXDLIN(  83)												int _g177 = len17;
HXDLIN(  83)												while((_g176 < _g177)){
HXLINE(  83)													_g176 = (_g176 + 1);
HXDLIN(  83)													int i54 = (_g176 - 1);
HXDLIN(  83)													d8->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d8->head);
            												}
            											}
            											else {
HXLINE(  83)												int _g178 = 0;
HXDLIN(  83)												int _g179 = len17;
HXDLIN(  83)												while((_g178 < _g179)){
HXLINE(  83)													_g178 = (_g178 + 1);
HXDLIN(  83)													int i55 = (_g178 - 1);
HXDLIN(  83)													{
HXLINE(  83)														 ::haxe::ds::GenericCell_Int l8 = b54->data->head;
HXDLIN(  83)														 ::haxe::ds::GenericCell_Int prev8 = null();
HXDLIN(  83)														{
HXLINE(  83)															int _g180 = 0;
HXDLIN(  83)															int _g181 = i55;
HXDLIN(  83)															while((_g180 < _g181)){
HXLINE(  83)																_g180 = (_g180 + 1);
HXDLIN(  83)																int i56 = (_g180 - 1);
HXLINE( 345)																prev8 = l8;
HXLINE( 346)																l8 = l8->next;
            															}
            														}
HXLINE(  83)														if (::hx::IsNull( prev8 )) {
HXLINE(  83)															b54->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  83)															l8 = null();
            														}
            														else {
HXLINE(  83)															prev8->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  83)															l8 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  83)									undoImage25 = b54;
            								}
            								break;
            							}
HXDLIN(  83)							this282->image = undoImage25;
HXDLIN(  83)							this282->width = width8;
HXDLIN(  83)							this282->height = height8;
HXDLIN(  83)							this282->imageType = ( (int)(imageType8) );
HXDLIN(  83)							undoImage24 = this282;
HXDLIN(  83)							{
HXLINE(  83)								int rectLeft8 = xIter38->start;
HXDLIN(  83)								int rectTop8 = yIter38->start;
HXDLIN(  83)								int rectRight8 = xIter38->max;
HXDLIN(  83)								bool forceClear8 = false;
HXDLIN(  83)								{
HXLINE(  83)									int _g182 = rectTop8;
HXDLIN(  83)									int _g183 = yIter38->max;
HXDLIN(  83)									while((_g182 < _g183)){
HXLINE(  83)										_g182 = (_g182 + 1);
HXDLIN(  83)										int dy9 = (_g182 - 1);
HXDLIN(  83)										{
HXLINE(  83)											int _g184 = rectLeft8;
HXDLIN(  83)											int _g185 = rectRight8;
HXDLIN(  83)											while((_g184 < _g185)){
HXLINE(  83)												_g184 = (_g184 + 1);
HXDLIN(  83)												int dx9 = (_g184 - 1);
HXDLIN(  83)												::Dynamic this284 = this247->image;
HXDLIN(  83)												int index48;
HXDLIN(  83)												if (this247->useVirtualPos) {
HXLINE(  83)													index48 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this247->virtualY) * ( (Float)(this247->width) )) + dx9) - this247->virtualX));
            												}
            												else {
HXLINE(  83)													index48 = ::Std_obj::_hx_int(( (Float)(((dy9 * this247->width) + dx9)) ));
            												}
HXDLIN(  83)												int c40 = ::iterMagic::Iimg_obj::get(this284,index48);
HXDLIN(  83)												int col8;
HXDLIN(  83)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)													col8 = ((((((c40 >> 24) & 255) << 24) | ((c40 & 255) << 16)) | (((c40 >> 8) & 255) << 8)) | ((c40 >> 16) & 255));
            												}
            												else {
HXLINE(  83)													col8 = c40;
            												}
HXDLIN(  83)												bool _hx_tmp64;
HXDLIN(  83)												if (this247->useMask) {
HXLINE(  83)													_hx_tmp64 = ::hx::IsNotNull( this247->mask );
            												}
            												else {
HXLINE(  83)													_hx_tmp64 = false;
            												}
HXDLIN(  83)												if (_hx_tmp64) {
HXLINE(  83)													 ::pi_xy::ImageStruct this285 = this247->mask;
HXDLIN(  83)													::Dynamic this286 = this285->image;
HXDLIN(  83)													int index49;
HXDLIN(  83)													if (this285->useVirtualPos) {
HXLINE(  83)														index49 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this285->virtualY) * ( (Float)(this285->width) )) + dx9) - this285->virtualX));
            													}
            													else {
HXLINE(  83)														index49 = ::Std_obj::_hx_int(( (Float)(((dy9 * this285->width) + dx9)) ));
            													}
HXDLIN(  83)													int c41 = ::iterMagic::Iimg_obj::get(this286,index49);
HXDLIN(  83)													int v27;
HXDLIN(  83)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)														v27 = ((((((c41 >> 24) & 255) << 24) | ((c41 & 255) << 16)) | (((c41 >> 8) & 255) << 8)) | ((c41 >> 16) & 255));
            													}
            													else {
HXLINE(  83)														v27 = c41;
            													}
HXDLIN(  83)													int maskPixel8 = v27;
HXDLIN(  83)													int this287 = col8;
HXDLIN(  83)													if ((maskPixel8 == 0)) {
HXLINE(  83)														col8 = this287;
            													}
            													else {
HXLINE(  83)														Float m08;
HXDLIN(  83)														int this288 = ((maskPixel8 >> 24) & 255);
HXDLIN(  83)														if ((this288 == 0)) {
HXLINE(  83)															m08 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															m08 = (( (Float)(this288) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float m18;
HXDLIN(  83)														int this289 = ((maskPixel8 >> 16) & 255);
HXDLIN(  83)														if ((this289 == 0)) {
HXLINE(  83)															m18 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															m18 = (( (Float)(this289) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float m28;
HXDLIN(  83)														int this290 = ((maskPixel8 >> 8) & 255);
HXDLIN(  83)														if ((this290 == 0)) {
HXLINE(  83)															m28 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															m28 = (( (Float)(this290) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float m38;
HXDLIN(  83)														int this291 = (maskPixel8 & 255);
HXDLIN(  83)														if ((this291 == 0)) {
HXLINE(  83)															m38 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															m38 = (( (Float)(this291) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														int ch08 = ::Std_obj::_hx_int(((((Float)1.) - m08) * ( (Float)(((this287 >> 24) & 255)) )));
HXDLIN(  83)														int ch18 = ::Std_obj::_hx_int(((((Float)1.) - m18) * ( (Float)(((this287 >> 16) & 255)) )));
HXDLIN(  83)														int ch28 = ::Std_obj::_hx_int(((((Float)1.) - m28) * ( (Float)(((this287 >> 8) & 255)) )));
HXDLIN(  83)														int ch38 = ::Std_obj::_hx_int(((((Float)1.) - m38) * ( (Float)((this287 & 255)) )));
HXDLIN(  83)														col8 = ((((::Math_obj::round((( (Float)(ch08) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch18) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch28) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch38) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  83)												if ((col8 != 0)) {
HXLINE(  83)													int x44 = (dx9 - rectLeft8);
HXDLIN(  83)													int y43 = (dy9 - rectTop8);
HXDLIN(  83)													int c42 = col8;
HXDLIN(  83)													bool _hx_tmp65;
HXDLIN(  83)													if ((((c42 >> 24) & 255) < 254)) {
HXLINE(  83)														_hx_tmp65 = undoImage24->transparent;
            													}
            													else {
HXLINE(  83)														_hx_tmp65 = false;
            													}
HXDLIN(  83)													if (_hx_tmp65) {
HXLINE(  83)														int location16;
HXDLIN(  83)														if (undoImage24->useVirtualPos) {
HXLINE(  83)															location16 = ::Std_obj::_hx_int(((((( (Float)(y43) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x44) - undoImage24->virtualX));
            														}
            														else {
HXLINE(  83)															location16 = ::Std_obj::_hx_int(( (Float)(((y43 * undoImage24->width) + x44)) ));
            														}
HXDLIN(  83)														int this292 = ::iterMagic::Iimg_obj::get(undoImage24->image,location16);
HXDLIN(  83)														int this293;
HXDLIN(  83)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)															this293 = ((((((this292 >> 24) & 255) << 24) | ((this292 & 255) << 16)) | (((this292 >> 8) & 255) << 8)) | ((this292 >> 16) & 255));
            														}
            														else {
HXLINE(  83)															this293 = this292;
            														}
HXDLIN(  83)														Float a119;
HXDLIN(  83)														int this294 = ((this293 >> 24) & 255);
HXDLIN(  83)														if ((this294 == 0)) {
HXLINE(  83)															a119 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															a119 = (( (Float)(this294) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float r116;
HXDLIN(  83)														int this295 = ((this293 >> 16) & 255);
HXDLIN(  83)														if ((this295 == 0)) {
HXLINE(  83)															r116 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															r116 = (( (Float)(this295) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float g116;
HXDLIN(  83)														int this296 = ((this293 >> 8) & 255);
HXDLIN(  83)														if ((this296 == 0)) {
HXLINE(  83)															g116 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															g116 = (( (Float)(this296) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float b120;
HXDLIN(  83)														int this297 = (this293 & 255);
HXDLIN(  83)														if ((this297 == 0)) {
HXLINE(  83)															b120 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															b120 = (( (Float)(this297) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float a217;
HXDLIN(  83)														int this298 = ((col8 >> 24) & 255);
HXDLIN(  83)														if ((this298 == 0)) {
HXLINE(  83)															a217 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															a217 = (( (Float)(this298) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float r216;
HXDLIN(  83)														int this299 = ((col8 >> 16) & 255);
HXDLIN(  83)														if ((this299 == 0)) {
HXLINE(  83)															r216 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															r216 = (( (Float)(this299) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float g216;
HXDLIN(  83)														int this300 = ((col8 >> 8) & 255);
HXDLIN(  83)														if ((this300 == 0)) {
HXLINE(  83)															g216 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															g216 = (( (Float)(this300) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float b220;
HXDLIN(  83)														int this301 = (col8 & 255);
HXDLIN(  83)														if ((this301 == 0)) {
HXLINE(  83)															b220 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															b220 = (( (Float)(this301) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float a316 = (a119 * (( (Float)(1) ) - a217));
HXDLIN(  83)														int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a316) + (r216 * a217))));
HXDLIN(  83)														int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a316) + (g216 * a217))));
HXDLIN(  83)														int b55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a316) + (b220 * a217))));
HXDLIN(  83)														int a51 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN(  83)														int blended16 = ((((a51 << 24) | (r36 << 16)) | (g36 << 8)) | b55);
HXDLIN(  83)														{
HXLINE(  83)															int _hx_tmp66;
HXDLIN(  83)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)																_hx_tmp66 = ((((((blended16 >> 24) & 255) << 24) | ((blended16 & 255) << 16)) | (((blended16 >> 8) & 255) << 8)) | ((blended16 >> 16) & 255));
            															}
            															else {
HXLINE(  83)																_hx_tmp66 = blended16;
            															}
HXDLIN(  83)															::iterMagic::Iimg_obj::set(undoImage24->image,location16,_hx_tmp66);
            														}
            													}
            													else {
HXLINE(  83)														::Dynamic this302 = undoImage24->image;
HXDLIN(  83)														int index50;
HXDLIN(  83)														if (undoImage24->useVirtualPos) {
HXLINE(  83)															index50 = ::Std_obj::_hx_int(((((( (Float)(y43) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x44) - undoImage24->virtualX));
            														}
            														else {
HXLINE(  83)															index50 = ::Std_obj::_hx_int(( (Float)(((y43 * undoImage24->width) + x44)) ));
            														}
HXDLIN(  83)														int _hx_tmp67;
HXDLIN(  83)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)															_hx_tmp67 = ((((((c42 >> 24) & 255) << 24) | ((c42 & 255) << 16)) | (((c42 >> 8) & 255) << 8)) | ((c42 >> 16) & 255));
            														}
            														else {
HXLINE(  83)															_hx_tmp67 = c42;
            														}
HXDLIN(  83)														::iterMagic::Iimg_obj::set(this302,index50,_hx_tmp67);
            													}
            												}
            												else {
HXLINE(  83)													if (forceClear8) {
HXLINE(  83)														::Dynamic this303 = undoImage24->image;
HXDLIN(  83)														int x45 = (dx9 - rectLeft8);
HXDLIN(  83)														int y44 = (dy9 - rectTop8);
HXDLIN(  83)														int index51;
HXDLIN(  83)														if (undoImage24->useVirtualPos) {
HXLINE(  83)															index51 = ::Std_obj::_hx_int(((((( (Float)(y44) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x45) - undoImage24->virtualX));
            														}
            														else {
HXLINE(  83)															index51 = ::Std_obj::_hx_int(( (Float)(((y44 * undoImage24->width) + x45)) ));
            														}
HXDLIN(  83)														::iterMagic::Iimg_obj::set(this303,index51,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  83)						bool foundY8 = false;
HXDLIN(  83)						Float s8 = ((Float)0.);
HXDLIN(  83)						Float t8 = ((Float)0.);
HXDLIN(  83)						Float sxx8 = ((Float)0.);
HXDLIN(  83)						Float txx8 = ((Float)0.);
HXDLIN(  83)						{
HXLINE(  83)							int _g_min16 = xIter38->start;
HXDLIN(  83)							int _g_max16 = xIter38->max;
HXDLIN(  83)							while((_g_min16 < _g_max16)){
HXLINE(  83)								_g_min16 = (_g_min16 + 1);
HXDLIN(  83)								int x46 = (_g_min16 - 1);
HXLINE( 222)								sxx8 = (sx8 * ( (Float)(x46) ));
HXLINE( 223)								txx8 = (tx8 * ( (Float)(x46) ));
HXLINE( 224)								foundY8 = false;
HXLINE(  83)								{
HXLINE(  83)									int _g_min17 = yIter38->start;
HXDLIN(  83)									int _g_max17 = yIter38->max;
HXDLIN(  83)									while((_g_min17 < _g_max17)){
HXLINE(  83)										_g_min17 = (_g_min17 + 1);
HXDLIN(  83)										int y45 = (_g_min17 - 1);
HXLINE( 226)										s8 = ((s08 + sxx8) + (sy8 * ( (Float)(y45) )));
HXLINE( 227)										t8 = ((t08 + txx8) + (ty8 * ( (Float)(y45) )));
HXLINE(  83)										bool _hx_tmp68;
HXDLIN(  83)										if (!((s8 <= 0))) {
HXLINE(  83)											_hx_tmp68 = (t8 <= 0);
            										}
            										else {
HXLINE(  83)											_hx_tmp68 = true;
            										}
HXDLIN(  83)										if (_hx_tmp68) {
HXLINE(  83)											if (foundY8) {
HXLINE(  83)												goto _hx_goto_166;
            											}
            										}
            										else {
HXLINE(  83)											if (((s8 + t8) < A8)) {
HXLINE(  83)												int x47 = ::hx::Mod(x46,tileImage->width);
HXDLIN(  83)												int y46 = ::hx::Mod(y45,tileImage->height);
HXDLIN(  83)												::Dynamic this304 = tileImage->image;
HXDLIN(  83)												int index52;
HXDLIN(  83)												if (tileImage->useVirtualPos) {
HXLINE(  83)													index52 = ::Std_obj::_hx_int(((((( (Float)(y46) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x47) - tileImage->virtualX));
            												}
            												else {
HXLINE(  83)													index52 = ::Std_obj::_hx_int(( (Float)(((y46 * tileImage->width) + x47)) ));
            												}
HXDLIN(  83)												int c43 = ::iterMagic::Iimg_obj::get(this304,index52);
HXDLIN(  83)												int color8;
HXDLIN(  83)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)													color8 = ((((((c43 >> 24) & 255) << 24) | ((c43 & 255) << 16)) | (((c43 >> 8) & 255) << 8)) | ((c43 >> 16) & 255));
            												}
            												else {
HXLINE(  83)													color8 = c43;
            												}
HXDLIN(  83)												{
HXLINE(  83)													int c44 = color8;
HXDLIN(  83)													bool _hx_tmp69;
HXDLIN(  83)													if ((((c44 >> 24) & 255) < 254)) {
HXLINE(  83)														_hx_tmp69 = this247->transparent;
            													}
            													else {
HXLINE(  83)														_hx_tmp69 = false;
            													}
HXDLIN(  83)													if (_hx_tmp69) {
HXLINE(  83)														int location17;
HXDLIN(  83)														if (this247->useVirtualPos) {
HXLINE(  83)															location17 = ::Std_obj::_hx_int(((((( (Float)(y45) ) - this247->virtualY) * ( (Float)(this247->width) )) + x46) - this247->virtualX));
            														}
            														else {
HXLINE(  83)															location17 = ::Std_obj::_hx_int(( (Float)(((y45 * this247->width) + x46)) ));
            														}
HXDLIN(  83)														int this305 = ::iterMagic::Iimg_obj::get(this247->image,location17);
HXDLIN(  83)														int this306;
HXDLIN(  83)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)															this306 = ((((((this305 >> 24) & 255) << 24) | ((this305 & 255) << 16)) | (((this305 >> 8) & 255) << 8)) | ((this305 >> 16) & 255));
            														}
            														else {
HXLINE(  83)															this306 = this305;
            														}
HXDLIN(  83)														Float a120;
HXDLIN(  83)														int this307 = ((this306 >> 24) & 255);
HXDLIN(  83)														if ((this307 == 0)) {
HXLINE(  83)															a120 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															a120 = (( (Float)(this307) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float r117;
HXDLIN(  83)														int this308 = ((this306 >> 16) & 255);
HXDLIN(  83)														if ((this308 == 0)) {
HXLINE(  83)															r117 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															r117 = (( (Float)(this308) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float g117;
HXDLIN(  83)														int this309 = ((this306 >> 8) & 255);
HXDLIN(  83)														if ((this309 == 0)) {
HXLINE(  83)															g117 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															g117 = (( (Float)(this309) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float b121;
HXDLIN(  83)														int this310 = (this306 & 255);
HXDLIN(  83)														if ((this310 == 0)) {
HXLINE(  83)															b121 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															b121 = (( (Float)(this310) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float a218;
HXDLIN(  83)														int this311 = ((color8 >> 24) & 255);
HXDLIN(  83)														if ((this311 == 0)) {
HXLINE(  83)															a218 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															a218 = (( (Float)(this311) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float r217;
HXDLIN(  83)														int this312 = ((color8 >> 16) & 255);
HXDLIN(  83)														if ((this312 == 0)) {
HXLINE(  83)															r217 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															r217 = (( (Float)(this312) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float g217;
HXDLIN(  83)														int this313 = ((color8 >> 8) & 255);
HXDLIN(  83)														if ((this313 == 0)) {
HXLINE(  83)															g217 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															g217 = (( (Float)(this313) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float b221;
HXDLIN(  83)														int this314 = (color8 & 255);
HXDLIN(  83)														if ((this314 == 0)) {
HXLINE(  83)															b221 = ((Float)0.);
            														}
            														else {
HXLINE(  83)															b221 = (( (Float)(this314) ) / ( (Float)(255) ));
            														}
HXDLIN(  83)														Float a317 = (a120 * (( (Float)(1) ) - a218));
HXDLIN(  83)														int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a317) + (r217 * a218))));
HXDLIN(  83)														int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a317) + (g217 * a218))));
HXDLIN(  83)														int b56 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b121 * a317) + (b221 * a218))));
HXDLIN(  83)														int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a317 + a218)));
HXDLIN(  83)														int blended17 = ((((a52 << 24) | (r37 << 16)) | (g37 << 8)) | b56);
HXDLIN(  83)														{
HXLINE(  83)															int _hx_tmp70;
HXDLIN(  83)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)																_hx_tmp70 = ((((((blended17 >> 24) & 255) << 24) | ((blended17 & 255) << 16)) | (((blended17 >> 8) & 255) << 8)) | ((blended17 >> 16) & 255));
            															}
            															else {
HXLINE(  83)																_hx_tmp70 = blended17;
            															}
HXDLIN(  83)															::iterMagic::Iimg_obj::set(this247->image,location17,_hx_tmp70);
            														}
            													}
            													else {
HXLINE(  83)														::Dynamic this315 = this247->image;
HXDLIN(  83)														int index53;
HXDLIN(  83)														if (this247->useVirtualPos) {
HXLINE(  83)															index53 = ::Std_obj::_hx_int(((((( (Float)(y45) ) - this247->virtualY) * ( (Float)(this247->width) )) + x46) - this247->virtualX));
            														}
            														else {
HXLINE(  83)															index53 = ::Std_obj::_hx_int(( (Float)(((y45 * this247->width) + x46)) ));
            														}
HXDLIN(  83)														int _hx_tmp71;
HXDLIN(  83)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  83)															_hx_tmp71 = ((((((c44 >> 24) & 255) << 24) | ((c44 & 255) << 16)) | (((c44 >> 8) & 255) << 8)) | ((c44 >> 16) & 255));
            														}
            														else {
HXLINE(  83)															_hx_tmp71 = c44;
            														}
HXDLIN(  83)														::iterMagic::Iimg_obj::set(this315,index53,_hx_tmp71);
            													}
            												}
HXLINE( 236)												foundY8 = true;
            											}
            											else {
HXLINE(  83)												if (foundY8) {
HXLINE(  83)													goto _hx_goto_166;
            												}
            											}
            										}
            									}
            									_hx_goto_166:;
            								}
            							}
            						}
HXDLIN(  83)						if ((hasHit5 == false)) {
HXLINE(  83)							 ::pi_xy::algo::HitTri v28 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx9,lowerY,bx11,by8,cx10,cy13,true);
HXDLIN(  83)							if (hasUndo8) {
HXLINE(  83)								v28->undoImage = undoImage24;
HXDLIN(  83)								v28->undoX = xIter38->start;
HXDLIN(  83)								v28->undoY = yIter38->start;
            							}
            						}
            					}
            				}
HXDLIN(  83)				if ((hasHit5 == true)) {
HXLINE(  83)					 ::pi_xy::algo::HitQuad v29 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,x37,lowerY,bx9,lowerY,bx9,cy11,x37,cy11,true);
            				}
            			}
            		}
HXLINE(  84)		{
HXLINE(  84)			 ::pi_xy::ImageStruct this316 = pixelimage;
HXDLIN(  84)			{
HXLINE(  84)				 ::Dynamic targetError3 = ((Float)1.05);
HXDLIN(  84)				if (::hx::IsNull( targetError3 )) {
HXLINE( 101)					targetError3 = ((Float)1.05);
            				}
HXLINE(  84)				Float rSmall3;
HXDLIN(  84)				if ((rightRadius > bottomRadius)) {
HXLINE(  84)					rSmall3 = bottomRadius;
            				}
            				else {
HXLINE(  84)					rSmall3 = rightRadius;
            				}
HXDLIN(  84)				 ::Dynamic targetE3 = ( (Float)(targetError3) );
HXDLIN(  84)				if (::hx::IsNull( targetE3 )) {
HXLINE(  20)					targetE3 = ((Float)1.05);
            				}
HXLINE(  84)				int result3 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE3) ) / rSmall3)))));
HXDLIN(  84)				int noSides3;
HXDLIN(  84)				if ((result3 < 12)) {
HXLINE(  84)					noSides3 = 12;
            				}
            				else {
HXLINE(  84)					if ((result3 > 500)) {
HXLINE(  84)						noSides3 = 500;
            					}
            					else {
HXLINE(  84)						noSides3 = result3;
            					}
            				}
HXDLIN(  84)				int sides3 = (::Math_obj::ceil((( (Float)(noSides3) ) / ( (Float)(4) ))) * 4);
HXDLIN(  84)				Float theta3 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides3) ));
HXDLIN(  84)				Float omega3 = ( (Float)(0) );
HXDLIN(  84)				int quarter3 = ::Std_obj::_hx_int((( (Float)(sides3) ) / ( (Float)(4) )));
HXDLIN(  84)				Float lastX3 = ((Float)0.);
HXDLIN(  84)				Float lastY3 = ((Float)0.);
HXDLIN(  84)				{
HXLINE(  73)					lastX3 = (farX + (rightRadius * ::Math_obj::cos(((( (Float)(sides3) ) * theta3) + omega3))));
HXLINE(  74)					lastY3 = (lowerY + (bottomRadius * ::Math_obj::sin(((( (Float)(sides3) ) * theta3) + omega3))));
            				}
HXLINE(  84)				{
HXLINE(  84)					int _g186 = 0;
HXDLIN(  84)					int _g187 = (quarter3 + 1);
HXDLIN(  84)					while((_g186 < _g187)){
HXLINE(  84)						_g186 = (_g186 + 1);
HXDLIN(  84)						int i57 = (_g186 - 1);
HXDLIN(  84)						Float nextX3 = (farX + (rightRadius * ::Math_obj::cos((((( (Float)(i57) ) * theta3) + ((Float)0.0001)) + omega3))));
HXDLIN(  84)						Float nextY3 = (lowerY + (bottomRadius * ::Math_obj::sin((((( (Float)(i57) ) * theta3) + ((Float)0.0001)) + omega3))));
HXDLIN(  84)						{
HXLINE(  84)							 ::pi_xy::ImageStruct this317 = this316;
HXDLIN(  84)							bool hasHit6 = false;
HXDLIN(  84)							{
HXLINE(  84)								Float bx12 = lastX3;
HXDLIN(  84)								Float by9 = lastY3;
HXDLIN(  84)								Float cx11 = nextX3;
HXDLIN(  84)								Float cy14 = nextY3;
HXDLIN(  84)								bool adjustWinding9 = (((((farX * by9) - (bx12 * lowerY)) + ((bx12 * cy14) - (cx11 * by9))) + ((cx11 * lowerY) - (farX * cy14))) > 0);
HXDLIN(  84)								if (!(adjustWinding9)) {
HXLINE(  84)									Float bx_9 = bx12;
HXDLIN(  84)									Float by_9 = by9;
HXLINE( 187)									bx12 = cx11;
HXLINE( 188)									by9 = cy14;
HXLINE( 189)									cx11 = bx_9;
HXLINE( 190)									cy14 = by_9;
            								}
HXLINE(  84)								{
HXLINE(  84)									bool hasUndo9 = false;
HXDLIN(  84)									Float s09 = ((lowerY * cx11) - (farX * cy14));
HXDLIN(  84)									Float sx9 = (cy14 - lowerY);
HXDLIN(  84)									Float sy9 = (farX - cx11);
HXDLIN(  84)									Float t09 = ((farX * by9) - (lowerY * bx12));
HXDLIN(  84)									Float tx9 = (lowerY - by9);
HXDLIN(  84)									Float ty9 = (bx12 - farX);
HXDLIN(  84)									Float A9 = ((((-(by9) * cx11) + (lowerY * (-(bx12) + cx11))) + (farX * (by9 - cy14))) + (bx12 * cy14));
HXDLIN(  84)									 ::pi_xy::iter::IntIterStart xIter39;
HXDLIN(  84)									if ((farX > bx12)) {
HXLINE(  84)										if ((farX > cx11)) {
HXLINE(  84)											int min36;
HXDLIN(  84)											if ((bx12 > cx11)) {
HXLINE(  84)												min36 = ::Math_obj::floor(cx11);
            											}
            											else {
HXLINE(  84)												min36 = ::Math_obj::floor(bx12);
            											}
HXDLIN(  84)											int ii_min72 = min36;
HXDLIN(  84)											int ii_max72 = ::Math_obj::ceil(farX);
HXDLIN(  84)											xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min72,ii_max72);
            										}
            										else {
HXLINE(  84)											int ii_min73 = ::Math_obj::floor(bx12);
HXDLIN(  84)											int ii_max73 = ::Math_obj::ceil(cx11);
HXDLIN(  84)											xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min73,ii_max73);
            										}
            									}
            									else {
HXLINE(  84)										if ((bx12 > cx11)) {
HXLINE(  84)											int min37;
HXDLIN(  84)											if ((farX > cx11)) {
HXLINE(  84)												min37 = ::Math_obj::floor(cx11);
            											}
            											else {
HXLINE(  84)												min37 = ::Math_obj::ceil(farX);
            											}
HXDLIN(  84)											int ii_min74 = min37;
HXDLIN(  84)											int ii_max74 = ::Math_obj::ceil(bx12);
HXDLIN(  84)											xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min74,ii_max74);
            										}
            										else {
HXLINE(  84)											int ii_min75 = ::Math_obj::floor(farX);
HXDLIN(  84)											int ii_max75 = ::Math_obj::ceil(cx11);
HXDLIN(  84)											xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min75,ii_max75);
            										}
            									}
HXDLIN(  84)									 ::pi_xy::iter::IntIterStart yIter39;
HXDLIN(  84)									if ((lowerY > by9)) {
HXLINE(  84)										if ((lowerY > cy14)) {
HXLINE(  84)											int min38;
HXDLIN(  84)											if ((by9 > cy14)) {
HXLINE(  84)												min38 = ::Math_obj::floor(cy14);
            											}
            											else {
HXLINE(  84)												min38 = ::Math_obj::floor(by9);
            											}
HXDLIN(  84)											int ii_min76 = min38;
HXDLIN(  84)											int ii_max76 = ::Math_obj::ceil(lowerY);
HXDLIN(  84)											yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min76,ii_max76);
            										}
            										else {
HXLINE(  84)											int ii_min77 = ::Math_obj::floor(by9);
HXDLIN(  84)											int ii_max77 = ::Math_obj::ceil(cy14);
HXDLIN(  84)											yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min77,ii_max77);
            										}
            									}
            									else {
HXLINE(  84)										if ((by9 > cy14)) {
HXLINE(  84)											int min39;
HXDLIN(  84)											if ((lowerY > cy14)) {
HXLINE(  84)												min39 = ::Math_obj::floor(cy14);
            											}
            											else {
HXLINE(  84)												min39 = ::Math_obj::ceil(lowerY);
            											}
HXDLIN(  84)											int ii_min78 = min39;
HXDLIN(  84)											int ii_max78 = ::Math_obj::ceil(by9);
HXDLIN(  84)											yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min78,ii_max78);
            										}
            										else {
HXLINE(  84)											int ii_min79 = ::Math_obj::floor(lowerY);
HXDLIN(  84)											int ii_max79 = ::Math_obj::ceil(cy14);
HXDLIN(  84)											yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min79,ii_max79);
            										}
            									}
HXDLIN(  84)									 ::pi_xy::ImageStruct undoImage27 = null();
HXDLIN(  84)									if (hasUndo9) {
HXLINE(  84)										int width9 = ((xIter39->max - xIter39->start) + 1);
HXDLIN(  84)										int height9 = ((yIter39->max - yIter39->start) + 1);
HXDLIN(  84)										 ::Dynamic imageType9 = null();
HXDLIN(  84)										 ::pi_xy::ImageStruct this318 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  84)										if (::hx::IsNull( imageType9 )) {
HXLINE(  54)											imageType9 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  84)										::Dynamic undoImage28;
HXDLIN(  84)										switch((int)(( (int)(imageType9) ))){
            											case (int)0: {
HXLINE(  84)												 ::iterMagic::BytesImg byt9 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  84)												 ::iterMagic::BytesImg b57 = byt9;
HXDLIN(  84)												{
HXLINE(  84)													b57->width = width9;
HXDLIN(  84)													b57->height = height9;
HXDLIN(  84)													b57->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  84)													b57->data = ::haxe::io::Bytes_obj::alloc((b57->length * 4));
HXDLIN(  84)													{
HXLINE(  84)														int len18 = b57->length;
HXDLIN(  84)														int w9 = 0;
HXDLIN(  84)														{
HXLINE(  84)															int _g188 = 0;
HXDLIN(  84)															int _g189 = b57->height;
HXDLIN(  84)															while((_g188 < _g189)){
HXLINE(  84)																_g188 = (_g188 + 1);
HXDLIN(  84)																int y47 = (_g188 - 1);
HXDLIN(  84)																{
HXLINE(  84)																	int _g190 = 0;
HXDLIN(  84)																	int _g191 = b57->width;
HXDLIN(  84)																	while((_g190 < _g191)){
HXLINE(  84)																		_g190 = (_g190 + 1);
HXDLIN(  84)																		int x48 = (_g190 - 1);
HXDLIN(  84)																		{
HXLINE(  84)																			w9 = (w9 + 1);
HXDLIN(  84)																			b57->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  84)																		{
HXLINE(  84)																			w9 = (w9 + 1);
HXDLIN(  84)																			b57->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  84)																		{
HXLINE(  84)																			w9 = (w9 + 1);
HXDLIN(  84)																			b57->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  84)																		{
HXLINE(  84)																			w9 = (w9 + 1);
HXDLIN(  84)																			b57->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  84)												undoImage28 = b57;
            											}
            											break;
            											case (int)1: {
HXLINE(  84)												 ::iterMagic::ArrIntImg arrI9 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  84)												 ::iterMagic::ArrIntImg a53 = arrI9;
HXDLIN(  84)												{
HXLINE(  84)													a53->width = width9;
HXDLIN(  84)													a53->height = height9;
HXDLIN(  84)													a53->data = ::Array_obj< int >::__new(0);
HXDLIN(  84)													a53->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  84)													{
HXLINE(  84)														int _g192 = 0;
HXDLIN(  84)														int _g193 = a53->length;
HXDLIN(  84)														while((_g192 < _g193)){
HXLINE(  84)															_g192 = (_g192 + 1);
HXDLIN(  84)															int i58 = (_g192 - 1);
HXDLIN(  84)															a53->data[i58] = 0;
            														}
            													}
            												}
HXDLIN(  84)												undoImage28 = a53;
            											}
            											break;
            											case (int)2: {
HXLINE(  84)												 ::iterMagic::U32ArrImg u32a9 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  84)												 ::iterMagic::U32ArrImg b58 = u32a9;
HXDLIN(  84)												{
HXLINE(  84)													b58->width = width9;
HXDLIN(  84)													b58->height = height9;
HXDLIN(  84)													b58->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  84)													int size9 = (b58->length * 4);
HXDLIN(  84)													b58->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size9),0,size9);
HXDLIN(  84)													{
HXLINE(  84)														int _g194 = 0;
HXDLIN(  84)														int _g195 = b58->length;
HXDLIN(  84)														while((_g194 < _g195)){
HXLINE(  84)															_g194 = (_g194 + 1);
HXDLIN(  84)															int i59 = (_g194 - 1);
HXDLIN(  84)															{
HXLINE(  84)																 ::haxe::io::ArrayBufferViewImpl this319 = b58->data;
HXDLIN(  84)																bool undoImage29;
HXDLIN(  84)																if ((i59 >= 0)) {
HXLINE(  84)																	undoImage29 = (i59 < (this319->byteLength >> 2));
            																}
            																else {
HXLINE(  84)																	undoImage29 = false;
            																}
HXDLIN(  84)																if (undoImage29) {
HXLINE(  84)																	 ::haxe::io::Bytes _this9 = this319->bytes;
HXDLIN(  84)																	int pos9 = ((i59 << 2) + this319->byteOffset);
HXDLIN(  84)																	_this9->b[pos9] = ( (unsigned char)(0) );
HXDLIN(  84)																	_this9->b[(pos9 + 1)] = ( (unsigned char)(0) );
HXDLIN(  84)																	_this9->b[(pos9 + 2)] = ( (unsigned char)(0) );
HXDLIN(  84)																	_this9->b[(pos9 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  84)												undoImage28 = b58;
            											}
            											break;
            											case (int)3: {
HXLINE(  84)												 ::iterMagic::VecIntImg vec9 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  84)												 ::iterMagic::VecIntImg v30 = vec9;
HXDLIN(  84)												{
HXLINE(  84)													v30->width = width9;
HXDLIN(  84)													v30->height = height9;
HXDLIN(  84)													v30->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  84)													v30->data = ::Array_obj< int >::__new(v30->length);
HXDLIN(  84)													{
HXLINE(  84)														int _g196 = 0;
HXDLIN(  84)														int _g197 = v30->length;
HXDLIN(  84)														while((_g196 < _g197)){
HXLINE(  84)															_g196 = (_g196 + 1);
HXDLIN(  84)															int i60 = (_g196 - 1);
HXDLIN(  84)															v30->data->__unsafe_set(i60,0);
            														}
            													}
            												}
HXDLIN(  84)												undoImage28 = v30;
            											}
            											break;
            											case (int)4: {
HXLINE(  84)												 ::iterMagic::StackIntImg sInt9 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  84)												 ::iterMagic::StackIntImg b59 = sInt9;
HXDLIN(  84)												{
HXLINE(  84)													b59->width = width9;
HXDLIN(  84)													b59->height = height9;
HXDLIN(  84)													b59->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  84)													b59->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  84)													{
HXLINE(  84)														int len19 = b59->length;
HXDLIN(  84)														 ::haxe::ds::GenericStack_Int d9 = b59->data;
HXDLIN(  84)														if (::hx::IsNull( d9->head )) {
HXLINE(  84)															int _g198 = 0;
HXDLIN(  84)															int _g199 = len19;
HXDLIN(  84)															while((_g198 < _g199)){
HXLINE(  84)																_g198 = (_g198 + 1);
HXDLIN(  84)																int i61 = (_g198 - 1);
HXDLIN(  84)																d9->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d9->head);
            															}
            														}
            														else {
HXLINE(  84)															int _g200 = 0;
HXDLIN(  84)															int _g201 = len19;
HXDLIN(  84)															while((_g200 < _g201)){
HXLINE(  84)																_g200 = (_g200 + 1);
HXDLIN(  84)																int i62 = (_g200 - 1);
HXDLIN(  84)																{
HXLINE(  84)																	 ::haxe::ds::GenericCell_Int l9 = b59->data->head;
HXDLIN(  84)																	 ::haxe::ds::GenericCell_Int prev9 = null();
HXDLIN(  84)																	{
HXLINE(  84)																		int _g202 = 0;
HXDLIN(  84)																		int _g203 = i62;
HXDLIN(  84)																		while((_g202 < _g203)){
HXLINE(  84)																			_g202 = (_g202 + 1);
HXDLIN(  84)																			int i63 = (_g202 - 1);
HXLINE( 345)																			prev9 = l9;
HXLINE( 346)																			l9 = l9->next;
            																		}
            																	}
HXLINE(  84)																	if (::hx::IsNull( prev9 )) {
HXLINE(  84)																		b59->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN(  84)																		l9 = null();
            																	}
            																	else {
HXLINE(  84)																		prev9->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN(  84)																		l9 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  84)												undoImage28 = b59;
            											}
            											break;
            										}
HXDLIN(  84)										this318->image = undoImage28;
HXDLIN(  84)										this318->width = width9;
HXDLIN(  84)										this318->height = height9;
HXDLIN(  84)										this318->imageType = ( (int)(imageType9) );
HXDLIN(  84)										undoImage27 = this318;
HXDLIN(  84)										{
HXLINE(  84)											int rectLeft9 = xIter39->start;
HXDLIN(  84)											int rectTop9 = yIter39->start;
HXDLIN(  84)											int rectRight9 = xIter39->max;
HXDLIN(  84)											bool forceClear9 = false;
HXDLIN(  84)											{
HXLINE(  84)												int _g204 = rectTop9;
HXDLIN(  84)												int _g205 = yIter39->max;
HXDLIN(  84)												while((_g204 < _g205)){
HXLINE(  84)													_g204 = (_g204 + 1);
HXDLIN(  84)													int dy10 = (_g204 - 1);
HXDLIN(  84)													{
HXLINE(  84)														int _g206 = rectLeft9;
HXDLIN(  84)														int _g207 = rectRight9;
HXDLIN(  84)														while((_g206 < _g207)){
HXLINE(  84)															_g206 = (_g206 + 1);
HXDLIN(  84)															int dx10 = (_g206 - 1);
HXDLIN(  84)															::Dynamic this320 = this317->image;
HXDLIN(  84)															int index54;
HXDLIN(  84)															if (this317->useVirtualPos) {
HXLINE(  84)																index54 = ::Std_obj::_hx_int(((((( (Float)(dy10) ) - this317->virtualY) * ( (Float)(this317->width) )) + dx10) - this317->virtualX));
            															}
            															else {
HXLINE(  84)																index54 = ::Std_obj::_hx_int(( (Float)(((dy10 * this317->width) + dx10)) ));
            															}
HXDLIN(  84)															int c45 = ::iterMagic::Iimg_obj::get(this320,index54);
HXDLIN(  84)															int col9;
HXDLIN(  84)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)																col9 = ((((((c45 >> 24) & 255) << 24) | ((c45 & 255) << 16)) | (((c45 >> 8) & 255) << 8)) | ((c45 >> 16) & 255));
            															}
            															else {
HXLINE(  84)																col9 = c45;
            															}
HXDLIN(  84)															bool _hx_tmp72;
HXDLIN(  84)															if (this317->useMask) {
HXLINE(  84)																_hx_tmp72 = ::hx::IsNotNull( this317->mask );
            															}
            															else {
HXLINE(  84)																_hx_tmp72 = false;
            															}
HXDLIN(  84)															if (_hx_tmp72) {
HXLINE(  84)																 ::pi_xy::ImageStruct this321 = this317->mask;
HXDLIN(  84)																::Dynamic this322 = this321->image;
HXDLIN(  84)																int index55;
HXDLIN(  84)																if (this321->useVirtualPos) {
HXLINE(  84)																	index55 = ::Std_obj::_hx_int(((((( (Float)(dy10) ) - this321->virtualY) * ( (Float)(this321->width) )) + dx10) - this321->virtualX));
            																}
            																else {
HXLINE(  84)																	index55 = ::Std_obj::_hx_int(( (Float)(((dy10 * this321->width) + dx10)) ));
            																}
HXDLIN(  84)																int c46 = ::iterMagic::Iimg_obj::get(this322,index55);
HXDLIN(  84)																int v31;
HXDLIN(  84)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)																	v31 = ((((((c46 >> 24) & 255) << 24) | ((c46 & 255) << 16)) | (((c46 >> 8) & 255) << 8)) | ((c46 >> 16) & 255));
            																}
            																else {
HXLINE(  84)																	v31 = c46;
            																}
HXDLIN(  84)																int maskPixel9 = v31;
HXDLIN(  84)																int this323 = col9;
HXDLIN(  84)																if ((maskPixel9 == 0)) {
HXLINE(  84)																	col9 = this323;
            																}
            																else {
HXLINE(  84)																	Float m09;
HXDLIN(  84)																	int this324 = ((maskPixel9 >> 24) & 255);
HXDLIN(  84)																	if ((this324 == 0)) {
HXLINE(  84)																		m09 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		m09 = (( (Float)(this324) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float m19;
HXDLIN(  84)																	int this325 = ((maskPixel9 >> 16) & 255);
HXDLIN(  84)																	if ((this325 == 0)) {
HXLINE(  84)																		m19 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		m19 = (( (Float)(this325) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float m29;
HXDLIN(  84)																	int this326 = ((maskPixel9 >> 8) & 255);
HXDLIN(  84)																	if ((this326 == 0)) {
HXLINE(  84)																		m29 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		m29 = (( (Float)(this326) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float m39;
HXDLIN(  84)																	int this327 = (maskPixel9 & 255);
HXDLIN(  84)																	if ((this327 == 0)) {
HXLINE(  84)																		m39 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		m39 = (( (Float)(this327) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	int ch09 = ::Std_obj::_hx_int(((((Float)1.) - m09) * ( (Float)(((this323 >> 24) & 255)) )));
HXDLIN(  84)																	int ch19 = ::Std_obj::_hx_int(((((Float)1.) - m19) * ( (Float)(((this323 >> 16) & 255)) )));
HXDLIN(  84)																	int ch29 = ::Std_obj::_hx_int(((((Float)1.) - m29) * ( (Float)(((this323 >> 8) & 255)) )));
HXDLIN(  84)																	int ch39 = ::Std_obj::_hx_int(((((Float)1.) - m39) * ( (Float)((this323 & 255)) )));
HXDLIN(  84)																	col9 = ((((::Math_obj::round((( (Float)(ch09) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch19) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch29) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch39) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  84)															if ((col9 != 0)) {
HXLINE(  84)																int x49 = (dx10 - rectLeft9);
HXDLIN(  84)																int y48 = (dy10 - rectTop9);
HXDLIN(  84)																int c47 = col9;
HXDLIN(  84)																bool _hx_tmp73;
HXDLIN(  84)																if ((((c47 >> 24) & 255) < 254)) {
HXLINE(  84)																	_hx_tmp73 = undoImage27->transparent;
            																}
            																else {
HXLINE(  84)																	_hx_tmp73 = false;
            																}
HXDLIN(  84)																if (_hx_tmp73) {
HXLINE(  84)																	int location18;
HXDLIN(  84)																	if (undoImage27->useVirtualPos) {
HXLINE(  84)																		location18 = ::Std_obj::_hx_int(((((( (Float)(y48) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x49) - undoImage27->virtualX));
            																	}
            																	else {
HXLINE(  84)																		location18 = ::Std_obj::_hx_int(( (Float)(((y48 * undoImage27->width) + x49)) ));
            																	}
HXDLIN(  84)																	int this328 = ::iterMagic::Iimg_obj::get(undoImage27->image,location18);
HXDLIN(  84)																	int this329;
HXDLIN(  84)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)																		this329 = ((((((this328 >> 24) & 255) << 24) | ((this328 & 255) << 16)) | (((this328 >> 8) & 255) << 8)) | ((this328 >> 16) & 255));
            																	}
            																	else {
HXLINE(  84)																		this329 = this328;
            																	}
HXDLIN(  84)																	Float a121;
HXDLIN(  84)																	int this330 = ((this329 >> 24) & 255);
HXDLIN(  84)																	if ((this330 == 0)) {
HXLINE(  84)																		a121 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		a121 = (( (Float)(this330) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float r118;
HXDLIN(  84)																	int this331 = ((this329 >> 16) & 255);
HXDLIN(  84)																	if ((this331 == 0)) {
HXLINE(  84)																		r118 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		r118 = (( (Float)(this331) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float g118;
HXDLIN(  84)																	int this332 = ((this329 >> 8) & 255);
HXDLIN(  84)																	if ((this332 == 0)) {
HXLINE(  84)																		g118 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		g118 = (( (Float)(this332) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float b122;
HXDLIN(  84)																	int this333 = (this329 & 255);
HXDLIN(  84)																	if ((this333 == 0)) {
HXLINE(  84)																		b122 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		b122 = (( (Float)(this333) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float a219;
HXDLIN(  84)																	int this334 = ((col9 >> 24) & 255);
HXDLIN(  84)																	if ((this334 == 0)) {
HXLINE(  84)																		a219 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		a219 = (( (Float)(this334) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float r218;
HXDLIN(  84)																	int this335 = ((col9 >> 16) & 255);
HXDLIN(  84)																	if ((this335 == 0)) {
HXLINE(  84)																		r218 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		r218 = (( (Float)(this335) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float g218;
HXDLIN(  84)																	int this336 = ((col9 >> 8) & 255);
HXDLIN(  84)																	if ((this336 == 0)) {
HXLINE(  84)																		g218 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		g218 = (( (Float)(this336) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float b222;
HXDLIN(  84)																	int this337 = (col9 & 255);
HXDLIN(  84)																	if ((this337 == 0)) {
HXLINE(  84)																		b222 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		b222 = (( (Float)(this337) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float a318 = (a121 * (( (Float)(1) ) - a219));
HXDLIN(  84)																	int r38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r118 * a318) + (r218 * a219))));
HXDLIN(  84)																	int g38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g118 * a318) + (g218 * a219))));
HXDLIN(  84)																	int b60 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b122 * a318) + (b222 * a219))));
HXDLIN(  84)																	int a54 = ::Std_obj::_hx_int((( (Float)(255) ) * (a318 + a219)));
HXDLIN(  84)																	int blended18 = ((((a54 << 24) | (r38 << 16)) | (g38 << 8)) | b60);
HXDLIN(  84)																	{
HXLINE(  84)																		int _hx_tmp74;
HXDLIN(  84)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)																			_hx_tmp74 = ((((((blended18 >> 24) & 255) << 24) | ((blended18 & 255) << 16)) | (((blended18 >> 8) & 255) << 8)) | ((blended18 >> 16) & 255));
            																		}
            																		else {
HXLINE(  84)																			_hx_tmp74 = blended18;
            																		}
HXDLIN(  84)																		::iterMagic::Iimg_obj::set(undoImage27->image,location18,_hx_tmp74);
            																	}
            																}
            																else {
HXLINE(  84)																	::Dynamic this338 = undoImage27->image;
HXDLIN(  84)																	int index56;
HXDLIN(  84)																	if (undoImage27->useVirtualPos) {
HXLINE(  84)																		index56 = ::Std_obj::_hx_int(((((( (Float)(y48) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x49) - undoImage27->virtualX));
            																	}
            																	else {
HXLINE(  84)																		index56 = ::Std_obj::_hx_int(( (Float)(((y48 * undoImage27->width) + x49)) ));
            																	}
HXDLIN(  84)																	int _hx_tmp75;
HXDLIN(  84)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)																		_hx_tmp75 = ((((((c47 >> 24) & 255) << 24) | ((c47 & 255) << 16)) | (((c47 >> 8) & 255) << 8)) | ((c47 >> 16) & 255));
            																	}
            																	else {
HXLINE(  84)																		_hx_tmp75 = c47;
            																	}
HXDLIN(  84)																	::iterMagic::Iimg_obj::set(this338,index56,_hx_tmp75);
            																}
            															}
            															else {
HXLINE(  84)																if (forceClear9) {
HXLINE(  84)																	::Dynamic this339 = undoImage27->image;
HXDLIN(  84)																	int x50 = (dx10 - rectLeft9);
HXDLIN(  84)																	int y49 = (dy10 - rectTop9);
HXDLIN(  84)																	int index57;
HXDLIN(  84)																	if (undoImage27->useVirtualPos) {
HXLINE(  84)																		index57 = ::Std_obj::_hx_int(((((( (Float)(y49) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x50) - undoImage27->virtualX));
            																	}
            																	else {
HXLINE(  84)																		index57 = ::Std_obj::_hx_int(( (Float)(((y49 * undoImage27->width) + x50)) ));
            																	}
HXDLIN(  84)																	::iterMagic::Iimg_obj::set(this339,index57,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  84)									bool foundY9 = false;
HXDLIN(  84)									Float s9 = ((Float)0.);
HXDLIN(  84)									Float t9 = ((Float)0.);
HXDLIN(  84)									Float sxx9 = ((Float)0.);
HXDLIN(  84)									Float txx9 = ((Float)0.);
HXDLIN(  84)									{
HXLINE(  84)										int _g_min18 = xIter39->start;
HXDLIN(  84)										int _g_max18 = xIter39->max;
HXDLIN(  84)										while((_g_min18 < _g_max18)){
HXLINE(  84)											_g_min18 = (_g_min18 + 1);
HXDLIN(  84)											int x51 = (_g_min18 - 1);
HXLINE( 222)											sxx9 = (sx9 * ( (Float)(x51) ));
HXLINE( 223)											txx9 = (tx9 * ( (Float)(x51) ));
HXLINE( 224)											foundY9 = false;
HXLINE(  84)											{
HXLINE(  84)												int _g_min19 = yIter39->start;
HXDLIN(  84)												int _g_max19 = yIter39->max;
HXDLIN(  84)												while((_g_min19 < _g_max19)){
HXLINE(  84)													_g_min19 = (_g_min19 + 1);
HXDLIN(  84)													int y50 = (_g_min19 - 1);
HXLINE( 226)													s9 = ((s09 + sxx9) + (sy9 * ( (Float)(y50) )));
HXLINE( 227)													t9 = ((t09 + txx9) + (ty9 * ( (Float)(y50) )));
HXLINE(  84)													bool _hx_tmp76;
HXDLIN(  84)													if (!((s9 <= 0))) {
HXLINE(  84)														_hx_tmp76 = (t9 <= 0);
            													}
            													else {
HXLINE(  84)														_hx_tmp76 = true;
            													}
HXDLIN(  84)													if (_hx_tmp76) {
HXLINE(  84)														if (foundY9) {
HXLINE(  84)															goto _hx_goto_179;
            														}
            													}
            													else {
HXLINE(  84)														if (((s9 + t9) < A9)) {
HXLINE(  84)															int x52 = ::hx::Mod(x51,tileImage->width);
HXDLIN(  84)															int y51 = ::hx::Mod(y50,tileImage->height);
HXDLIN(  84)															::Dynamic this340 = tileImage->image;
HXDLIN(  84)															int index58;
HXDLIN(  84)															if (tileImage->useVirtualPos) {
HXLINE(  84)																index58 = ::Std_obj::_hx_int(((((( (Float)(y51) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x52) - tileImage->virtualX));
            															}
            															else {
HXLINE(  84)																index58 = ::Std_obj::_hx_int(( (Float)(((y51 * tileImage->width) + x52)) ));
            															}
HXDLIN(  84)															int c48 = ::iterMagic::Iimg_obj::get(this340,index58);
HXDLIN(  84)															int color9;
HXDLIN(  84)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)																color9 = ((((((c48 >> 24) & 255) << 24) | ((c48 & 255) << 16)) | (((c48 >> 8) & 255) << 8)) | ((c48 >> 16) & 255));
            															}
            															else {
HXLINE(  84)																color9 = c48;
            															}
HXDLIN(  84)															{
HXLINE(  84)																int c49 = color9;
HXDLIN(  84)																bool _hx_tmp77;
HXDLIN(  84)																if ((((c49 >> 24) & 255) < 254)) {
HXLINE(  84)																	_hx_tmp77 = this317->transparent;
            																}
            																else {
HXLINE(  84)																	_hx_tmp77 = false;
            																}
HXDLIN(  84)																if (_hx_tmp77) {
HXLINE(  84)																	int location19;
HXDLIN(  84)																	if (this317->useVirtualPos) {
HXLINE(  84)																		location19 = ::Std_obj::_hx_int(((((( (Float)(y50) ) - this317->virtualY) * ( (Float)(this317->width) )) + x51) - this317->virtualX));
            																	}
            																	else {
HXLINE(  84)																		location19 = ::Std_obj::_hx_int(( (Float)(((y50 * this317->width) + x51)) ));
            																	}
HXDLIN(  84)																	int this341 = ::iterMagic::Iimg_obj::get(this317->image,location19);
HXDLIN(  84)																	int this342;
HXDLIN(  84)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)																		this342 = ((((((this341 >> 24) & 255) << 24) | ((this341 & 255) << 16)) | (((this341 >> 8) & 255) << 8)) | ((this341 >> 16) & 255));
            																	}
            																	else {
HXLINE(  84)																		this342 = this341;
            																	}
HXDLIN(  84)																	Float a122;
HXDLIN(  84)																	int this343 = ((this342 >> 24) & 255);
HXDLIN(  84)																	if ((this343 == 0)) {
HXLINE(  84)																		a122 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		a122 = (( (Float)(this343) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float r119;
HXDLIN(  84)																	int this344 = ((this342 >> 16) & 255);
HXDLIN(  84)																	if ((this344 == 0)) {
HXLINE(  84)																		r119 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		r119 = (( (Float)(this344) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float g119;
HXDLIN(  84)																	int this345 = ((this342 >> 8) & 255);
HXDLIN(  84)																	if ((this345 == 0)) {
HXLINE(  84)																		g119 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		g119 = (( (Float)(this345) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float b123;
HXDLIN(  84)																	int this346 = (this342 & 255);
HXDLIN(  84)																	if ((this346 == 0)) {
HXLINE(  84)																		b123 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		b123 = (( (Float)(this346) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float a220;
HXDLIN(  84)																	int this347 = ((color9 >> 24) & 255);
HXDLIN(  84)																	if ((this347 == 0)) {
HXLINE(  84)																		a220 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		a220 = (( (Float)(this347) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float r219;
HXDLIN(  84)																	int this348 = ((color9 >> 16) & 255);
HXDLIN(  84)																	if ((this348 == 0)) {
HXLINE(  84)																		r219 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		r219 = (( (Float)(this348) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float g219;
HXDLIN(  84)																	int this349 = ((color9 >> 8) & 255);
HXDLIN(  84)																	if ((this349 == 0)) {
HXLINE(  84)																		g219 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		g219 = (( (Float)(this349) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float b223;
HXDLIN(  84)																	int this350 = (color9 & 255);
HXDLIN(  84)																	if ((this350 == 0)) {
HXLINE(  84)																		b223 = ((Float)0.);
            																	}
            																	else {
HXLINE(  84)																		b223 = (( (Float)(this350) ) / ( (Float)(255) ));
            																	}
HXDLIN(  84)																	Float a319 = (a122 * (( (Float)(1) ) - a220));
HXDLIN(  84)																	int r39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r119 * a319) + (r219 * a220))));
HXDLIN(  84)																	int g39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g119 * a319) + (g219 * a220))));
HXDLIN(  84)																	int b61 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b123 * a319) + (b223 * a220))));
HXDLIN(  84)																	int a55 = ::Std_obj::_hx_int((( (Float)(255) ) * (a319 + a220)));
HXDLIN(  84)																	int blended19 = ((((a55 << 24) | (r39 << 16)) | (g39 << 8)) | b61);
HXDLIN(  84)																	{
HXLINE(  84)																		int _hx_tmp78;
HXDLIN(  84)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)																			_hx_tmp78 = ((((((blended19 >> 24) & 255) << 24) | ((blended19 & 255) << 16)) | (((blended19 >> 8) & 255) << 8)) | ((blended19 >> 16) & 255));
            																		}
            																		else {
HXLINE(  84)																			_hx_tmp78 = blended19;
            																		}
HXDLIN(  84)																		::iterMagic::Iimg_obj::set(this317->image,location19,_hx_tmp78);
            																	}
            																}
            																else {
HXLINE(  84)																	::Dynamic this351 = this317->image;
HXDLIN(  84)																	int index59;
HXDLIN(  84)																	if (this317->useVirtualPos) {
HXLINE(  84)																		index59 = ::Std_obj::_hx_int(((((( (Float)(y50) ) - this317->virtualY) * ( (Float)(this317->width) )) + x51) - this317->virtualX));
            																	}
            																	else {
HXLINE(  84)																		index59 = ::Std_obj::_hx_int(( (Float)(((y50 * this317->width) + x51)) ));
            																	}
HXDLIN(  84)																	int _hx_tmp79;
HXDLIN(  84)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  84)																		_hx_tmp79 = ((((((c49 >> 24) & 255) << 24) | ((c49 & 255) << 16)) | (((c49 >> 8) & 255) << 8)) | ((c49 >> 16) & 255));
            																	}
            																	else {
HXLINE(  84)																		_hx_tmp79 = c49;
            																	}
HXDLIN(  84)																	::iterMagic::Iimg_obj::set(this351,index59,_hx_tmp79);
            																}
            															}
HXLINE( 236)															foundY9 = true;
            														}
            														else {
HXLINE(  84)															if (foundY9) {
HXLINE(  84)																goto _hx_goto_179;
            															}
            														}
            													}
            												}
            												_hx_goto_179:;
            											}
            										}
            									}
HXDLIN(  84)									if ((hasHit6 == false)) {
HXLINE(  84)										 ::pi_xy::algo::HitTri v32 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX,lowerY,bx12,by9,cx11,cy14,true);
HXDLIN(  84)										if (hasUndo9) {
HXLINE(  84)											v32->undoImage = undoImage27;
HXDLIN(  84)											v32->undoX = xIter39->start;
HXDLIN(  84)											v32->undoY = yIter39->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  93)						lastX3 = nextX3;
HXLINE(  94)						lastY3 = nextY3;
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(RoundRecPixel_Fields__obj,tileRoundRectangle,(void))

void RoundRecPixel_Fields__obj::fillGrad4RoundRectangle( ::pi_xy::ImageStruct pixelimage,Float x,Float y,Float hi,Float wid,int colorA,int colorB,int colorC,int colorD, ::Dynamic __o_dx, ::Dynamic __o_dy, ::Dynamic __o_fat, ::Dynamic __o_tall){
            		 ::Dynamic dx = __o_dx;
            		if (::hx::IsNull(__o_dx)) dx = ((Float)-1.);
            		 ::Dynamic dy = __o_dy;
            		if (::hx::IsNull(__o_dy)) dy = ((Float)-1.);
            		 ::Dynamic fat = __o_fat;
            		if (::hx::IsNull(__o_fat)) fat = ((Float)-1.);
            		 ::Dynamic tall = __o_tall;
            		if (::hx::IsNull(__o_tall)) tall = ((Float)-1.);
            	HX_GC_STACKFRAME(&_hx_pos_5e9ae3e1c0a40e73_99_fillGrad4RoundRectangle)
HXLINE( 103)		if (::hx::IsLess( dx,((Float)0.) )) {
HXLINE( 104)			Float smallest;
HXDLIN( 104)			if ((hi < wid)) {
HXLINE( 104)				smallest = hi;
            			}
            			else {
HXLINE( 104)				smallest = wid;
            			}
HXLINE( 105)			Float goldenRatio = ((Float)1.61803398875);
HXLINE( 106)			dx = (smallest / (goldenRatio + 2));
            		}
HXLINE( 108)		if (::hx::IsLess( dy,((Float)0.) )) {
HXLINE( 108)			dy = dx;
            		}
HXLINE( 109)		if (::hx::IsLess( fat,((Float)0.) )) {
HXLINE( 109)			fat = (wid - (( (Float)(2) ) * ( (Float)(dx) )));
            		}
HXLINE( 110)		if (::hx::IsLess( tall,((Float)0.) )) {
HXLINE( 110)			tall = (hi - (( (Float)(2) ) * ( (Float)(dy) )));
            		}
HXLINE( 111)		Float rightRadius = ((wid - ( (Float)(fat) )) - ( (Float)(dx) ));
HXLINE( 112)		Float bottomRadius = ((hi - ( (Float)(tall) )) - ( (Float)(dy) ));
HXLINE( 113)		Float farX = ((x + dx) + fat);
HXLINE( 114)		Float lowerY = ((y + dy) + tall);
HXLINE( 116)		{
HXLINE( 116)			 ::pi_xy::ImageStruct this1 = pixelimage;
HXDLIN( 116)			Float cx = (x + dx);
HXDLIN( 116)			Float cy = (y + dy);
HXDLIN( 116)			Float rx = ( (Float)(dx) );
HXDLIN( 116)			Float ry = ( (Float)(dy) );
HXDLIN( 116)			{
HXLINE( 116)				 ::Dynamic targetError = ((Float)1.05);
HXDLIN( 116)				if (::hx::IsNull( targetError )) {
HXLINE( 113)					targetError = ((Float)1.05);
            				}
HXLINE( 116)				Float rSmall;
HXDLIN( 116)				if ((rx > ry)) {
HXLINE( 116)					rSmall = ry;
            				}
            				else {
HXLINE( 116)					rSmall = rx;
            				}
HXDLIN( 116)				 ::Dynamic targetE = ( (Float)(targetError) );
HXDLIN( 116)				if (::hx::IsNull( targetE )) {
HXLINE(  20)					targetE = ((Float)1.05);
            				}
HXLINE( 116)				int result = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE) ) / rSmall)))));
HXDLIN( 116)				int noSides;
HXDLIN( 116)				if ((result < 12)) {
HXLINE( 116)					noSides = 12;
            				}
            				else {
HXLINE( 116)					if ((result > 500)) {
HXLINE( 116)						noSides = 500;
            					}
            					else {
HXLINE( 116)						noSides = result;
            					}
            				}
HXDLIN( 116)				int sides = (::Math_obj::ceil((( (Float)(noSides) ) / ( (Float)(4) ))) * 4);
HXDLIN( 116)				Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides) ));
HXDLIN( 116)				Float omega = ::Math_obj::PI;
HXDLIN( 116)				int quarter = ::Std_obj::_hx_int((( (Float)(sides) ) / ( (Float)(4) )));
HXDLIN( 116)				Float lastX = ((Float)0.);
HXDLIN( 116)				Float lastY = ((Float)0.);
HXDLIN( 116)				{
HXLINE(  26)					lastX = (cx + (rx * ::Math_obj::cos(((( (Float)(sides) ) * theta) + omega))));
HXLINE(  27)					lastY = (cy + (ry * ::Math_obj::sin(((( (Float)(sides) ) * theta) + omega))));
            				}
HXLINE( 116)				{
HXLINE( 116)					int _g = 0;
HXDLIN( 116)					int _g1 = (quarter + 1);
HXDLIN( 116)					while((_g < _g1)){
HXLINE( 116)						_g = (_g + 1);
HXDLIN( 116)						int i = (_g - 1);
HXDLIN( 116)						Float nextX = (cx + (rx * ::Math_obj::cos((((( (Float)(i) ) * theta) + ((Float)0.0001)) + omega))));
HXDLIN( 116)						Float nextY = (cy + (ry * ::Math_obj::sin((((( (Float)(i) ) * theta) + ((Float)0.0001)) + omega))));
HXDLIN( 116)						{
HXLINE( 116)							 ::pi_xy::ImageStruct this2 = this1;
HXDLIN( 116)							bool hasHit = false;
HXDLIN( 116)							bool hasUndo = false;
HXDLIN( 116)							{
HXLINE( 116)								Float bx = lastX;
HXDLIN( 116)								Float by = lastY;
HXDLIN( 116)								Float cx1 = nextX;
HXDLIN( 116)								Float cy1 = nextY;
HXDLIN( 116)								bool adjustWinding = (((((cx * by) - (bx * cy)) + ((bx * cy1) - (cx1 * by))) + ((cx1 * cy) - (cx * cy1))) > 0);
HXDLIN( 116)								if (!(adjustWinding)) {
HXLINE( 116)									Float bx_ = bx;
HXDLIN( 116)									Float by_ = by;
HXLINE(  25)									bx = cx1;
HXLINE(  26)									by = cy1;
HXLINE(  27)									cx1 = bx_;
HXLINE(  28)									cy1 = by_;
            								}
HXLINE( 116)								{
HXLINE( 116)									Float s0 = ((cy * cx1) - (cx * cy1));
HXDLIN( 116)									Float sx = (cy1 - cy);
HXDLIN( 116)									Float sy = (cx - cx1);
HXDLIN( 116)									Float t0 = ((cx * by) - (cy * bx));
HXDLIN( 116)									Float tx = (cy - by);
HXDLIN( 116)									Float ty = (bx - cx);
HXDLIN( 116)									Float A = ((((-(by) * cx1) + (cy * (-(bx) + cx1))) + (cx * (by - cy1))) + (bx * cy1));
HXDLIN( 116)									 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 116)									if ((cx > bx)) {
HXLINE( 116)										if ((cx > cx1)) {
HXLINE( 116)											int min;
HXDLIN( 116)											if ((bx > cx1)) {
HXLINE( 116)												min = ::Math_obj::floor(cx1);
            											}
            											else {
HXLINE( 116)												min = ::Math_obj::floor(bx);
            											}
HXDLIN( 116)											int ii_min = min;
HXDLIN( 116)											int ii_max = ::Math_obj::ceil(cx);
HXDLIN( 116)											xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            										}
            										else {
HXLINE( 116)											int ii_min1 = ::Math_obj::floor(bx);
HXDLIN( 116)											int ii_max1 = ::Math_obj::ceil(cx1);
HXDLIN( 116)											xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            										}
            									}
            									else {
HXLINE( 116)										if ((bx > cx1)) {
HXLINE( 116)											int min1;
HXDLIN( 116)											if ((cx > cx1)) {
HXLINE( 116)												min1 = ::Math_obj::floor(cx1);
            											}
            											else {
HXLINE( 116)												min1 = ::Math_obj::ceil(cx);
            											}
HXDLIN( 116)											int ii_min2 = min1;
HXDLIN( 116)											int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN( 116)											xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            										}
            										else {
HXLINE( 116)											int ii_min3 = ::Math_obj::floor(cx);
HXDLIN( 116)											int ii_max3 = ::Math_obj::ceil(cx1);
HXDLIN( 116)											xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            										}
            									}
HXDLIN( 116)									 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 116)									if ((cy > by)) {
HXLINE( 116)										if ((cy > cy1)) {
HXLINE( 116)											int min2;
HXDLIN( 116)											if ((by > cy1)) {
HXLINE( 116)												min2 = ::Math_obj::floor(cy1);
            											}
            											else {
HXLINE( 116)												min2 = ::Math_obj::floor(by);
            											}
HXDLIN( 116)											int ii_min4 = min2;
HXDLIN( 116)											int ii_max4 = ::Math_obj::ceil(cy);
HXDLIN( 116)											yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            										}
            										else {
HXLINE( 116)											int ii_min5 = ::Math_obj::floor(by);
HXDLIN( 116)											int ii_max5 = ::Math_obj::ceil(cy1);
HXDLIN( 116)											yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            										}
            									}
            									else {
HXLINE( 116)										if ((by > cy1)) {
HXLINE( 116)											int min3;
HXDLIN( 116)											if ((cy > cy1)) {
HXLINE( 116)												min3 = ::Math_obj::floor(cy1);
            											}
            											else {
HXLINE( 116)												min3 = ::Math_obj::ceil(cy);
            											}
HXDLIN( 116)											int ii_min6 = min3;
HXDLIN( 116)											int ii_max6 = ::Math_obj::ceil(by);
HXDLIN( 116)											yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            										}
            										else {
HXLINE( 116)											int ii_min7 = ::Math_obj::floor(cy);
HXDLIN( 116)											int ii_max7 = ::Math_obj::ceil(cy1);
HXDLIN( 116)											yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            										}
            									}
HXDLIN( 116)									 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 116)									if (hasUndo) {
HXLINE( 116)										int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 116)										int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 116)										 ::Dynamic imageType = null();
HXDLIN( 116)										 ::pi_xy::ImageStruct this3 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 116)										if (::hx::IsNull( imageType )) {
HXLINE(  54)											imageType = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE( 116)										::Dynamic undoImage1;
HXDLIN( 116)										switch((int)(( (int)(imageType) ))){
            											case (int)0: {
HXLINE( 116)												 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 116)												 ::iterMagic::BytesImg b = byt;
HXDLIN( 116)												{
HXLINE( 116)													b->width = width;
HXDLIN( 116)													b->height = height;
HXDLIN( 116)													b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 116)													b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 116)													{
HXLINE( 116)														int len = b->length;
HXDLIN( 116)														int w = 0;
HXDLIN( 116)														{
HXLINE( 116)															int _g2 = 0;
HXDLIN( 116)															int _g3 = b->height;
HXDLIN( 116)															while((_g2 < _g3)){
HXLINE( 116)																_g2 = (_g2 + 1);
HXDLIN( 116)																int y1 = (_g2 - 1);
HXDLIN( 116)																{
HXLINE( 116)																	int _g4 = 0;
HXDLIN( 116)																	int _g5 = b->width;
HXDLIN( 116)																	while((_g4 < _g5)){
HXLINE( 116)																		_g4 = (_g4 + 1);
HXDLIN( 116)																		int x1 = (_g4 - 1);
HXDLIN( 116)																		{
HXLINE( 116)																			w = (w + 1);
HXDLIN( 116)																			b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN( 116)																		{
HXLINE( 116)																			w = (w + 1);
HXDLIN( 116)																			b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN( 116)																		{
HXLINE( 116)																			w = (w + 1);
HXDLIN( 116)																			b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN( 116)																		{
HXLINE( 116)																			w = (w + 1);
HXDLIN( 116)																			b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN( 116)												undoImage1 = b;
            											}
            											break;
            											case (int)1: {
HXLINE( 116)												 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 116)												 ::iterMagic::ArrIntImg a = arrI;
HXDLIN( 116)												{
HXLINE( 116)													a->width = width;
HXDLIN( 116)													a->height = height;
HXDLIN( 116)													a->data = ::Array_obj< int >::__new(0);
HXDLIN( 116)													a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 116)													{
HXLINE( 116)														int _g6 = 0;
HXDLIN( 116)														int _g7 = a->length;
HXDLIN( 116)														while((_g6 < _g7)){
HXLINE( 116)															_g6 = (_g6 + 1);
HXDLIN( 116)															int i1 = (_g6 - 1);
HXDLIN( 116)															a->data[i1] = 0;
            														}
            													}
            												}
HXDLIN( 116)												undoImage1 = a;
            											}
            											break;
            											case (int)2: {
HXLINE( 116)												 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 116)												 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 116)												{
HXLINE( 116)													b1->width = width;
HXDLIN( 116)													b1->height = height;
HXDLIN( 116)													b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 116)													int size = (b1->length * 4);
HXDLIN( 116)													b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 116)													{
HXLINE( 116)														int _g8 = 0;
HXDLIN( 116)														int _g9 = b1->length;
HXDLIN( 116)														while((_g8 < _g9)){
HXLINE( 116)															_g8 = (_g8 + 1);
HXDLIN( 116)															int i2 = (_g8 - 1);
HXDLIN( 116)															{
HXLINE( 116)																 ::haxe::io::ArrayBufferViewImpl this4 = b1->data;
HXDLIN( 116)																bool undoImage2;
HXDLIN( 116)																if ((i2 >= 0)) {
HXLINE( 116)																	undoImage2 = (i2 < (this4->byteLength >> 2));
            																}
            																else {
HXLINE( 116)																	undoImage2 = false;
            																}
HXDLIN( 116)																if (undoImage2) {
HXLINE( 116)																	 ::haxe::io::Bytes _this = this4->bytes;
HXDLIN( 116)																	int pos = ((i2 << 2) + this4->byteOffset);
HXDLIN( 116)																	_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 116)																	_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 116)																	_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 116)																	_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN( 116)												undoImage1 = b1;
            											}
            											break;
            											case (int)3: {
HXLINE( 116)												 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 116)												 ::iterMagic::VecIntImg v = vec;
HXDLIN( 116)												{
HXLINE( 116)													v->width = width;
HXDLIN( 116)													v->height = height;
HXDLIN( 116)													v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 116)													v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 116)													{
HXLINE( 116)														int _g10 = 0;
HXDLIN( 116)														int _g11 = v->length;
HXDLIN( 116)														while((_g10 < _g11)){
HXLINE( 116)															_g10 = (_g10 + 1);
HXDLIN( 116)															int i3 = (_g10 - 1);
HXDLIN( 116)															v->data->__unsafe_set(i3,0);
            														}
            													}
            												}
HXDLIN( 116)												undoImage1 = v;
            											}
            											break;
            											case (int)4: {
HXLINE( 116)												 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 116)												 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 116)												{
HXLINE( 116)													b2->width = width;
HXDLIN( 116)													b2->height = height;
HXDLIN( 116)													b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 116)													b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 116)													{
HXLINE( 116)														int len1 = b2->length;
HXDLIN( 116)														 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 116)														if (::hx::IsNull( d->head )) {
HXLINE( 116)															int _g12 = 0;
HXDLIN( 116)															int _g13 = len1;
HXDLIN( 116)															while((_g12 < _g13)){
HXLINE( 116)																_g12 = (_g12 + 1);
HXDLIN( 116)																int i4 = (_g12 - 1);
HXDLIN( 116)																d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            															}
            														}
            														else {
HXLINE( 116)															int _g14 = 0;
HXDLIN( 116)															int _g15 = len1;
HXDLIN( 116)															while((_g14 < _g15)){
HXLINE( 116)																_g14 = (_g14 + 1);
HXDLIN( 116)																int i5 = (_g14 - 1);
HXDLIN( 116)																{
HXLINE( 116)																	 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 116)																	 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 116)																	{
HXLINE( 116)																		int _g16 = 0;
HXDLIN( 116)																		int _g17 = i5;
HXDLIN( 116)																		while((_g16 < _g17)){
HXLINE( 116)																			_g16 = (_g16 + 1);
HXDLIN( 116)																			int i6 = (_g16 - 1);
HXLINE( 345)																			prev = l;
HXLINE( 346)																			l = l->next;
            																		}
            																	}
HXLINE( 116)																	if (::hx::IsNull( prev )) {
HXLINE( 116)																		b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 116)																		l = null();
            																	}
            																	else {
HXLINE( 116)																		prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 116)																		l = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN( 116)												undoImage1 = b2;
            											}
            											break;
            										}
HXDLIN( 116)										this3->image = undoImage1;
HXDLIN( 116)										this3->width = width;
HXDLIN( 116)										this3->height = height;
HXDLIN( 116)										this3->imageType = ( (int)(imageType) );
HXDLIN( 116)										undoImage = this3;
HXDLIN( 116)										{
HXLINE( 116)											int rectLeft = xIter3->start;
HXDLIN( 116)											int rectTop = yIter3->start;
HXDLIN( 116)											int rectRight = xIter3->max;
HXDLIN( 116)											bool forceClear = false;
HXDLIN( 116)											{
HXLINE( 116)												int _g18 = rectTop;
HXDLIN( 116)												int _g19 = yIter3->max;
HXDLIN( 116)												while((_g18 < _g19)){
HXLINE( 116)													_g18 = (_g18 + 1);
HXDLIN( 116)													int dy1 = (_g18 - 1);
HXDLIN( 116)													{
HXLINE( 116)														int _g20 = rectLeft;
HXDLIN( 116)														int _g21 = rectRight;
HXDLIN( 116)														while((_g20 < _g21)){
HXLINE( 116)															_g20 = (_g20 + 1);
HXDLIN( 116)															int dx1 = (_g20 - 1);
HXDLIN( 116)															::Dynamic this5 = this2->image;
HXDLIN( 116)															int index;
HXDLIN( 116)															if (this2->useVirtualPos) {
HXLINE( 116)																index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx1) - this2->virtualX));
            															}
            															else {
HXLINE( 116)																index = ::Std_obj::_hx_int(( (Float)(((dy1 * this2->width) + dx1)) ));
            															}
HXDLIN( 116)															int c = ::iterMagic::Iimg_obj::get(this5,index);
HXDLIN( 116)															int col;
HXDLIN( 116)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 116)																col = c;
            															}
HXDLIN( 116)															bool _hx_tmp;
HXDLIN( 116)															if (this2->useMask) {
HXLINE( 116)																_hx_tmp = ::hx::IsNotNull( this2->mask );
            															}
            															else {
HXLINE( 116)																_hx_tmp = false;
            															}
HXDLIN( 116)															if (_hx_tmp) {
HXLINE( 116)																 ::pi_xy::ImageStruct this6 = this2->mask;
HXDLIN( 116)																::Dynamic this7 = this6->image;
HXDLIN( 116)																int index1;
HXDLIN( 116)																if (this6->useVirtualPos) {
HXLINE( 116)																	index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this6->virtualY) * ( (Float)(this6->width) )) + dx1) - this6->virtualX));
            																}
            																else {
HXLINE( 116)																	index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this6->width) + dx1)) ));
            																}
HXDLIN( 116)																int c1 = ::iterMagic::Iimg_obj::get(this7,index1);
HXDLIN( 116)																int v1;
HXDLIN( 116)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																	v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            																}
            																else {
HXLINE( 116)																	v1 = c1;
            																}
HXDLIN( 116)																int maskPixel = v1;
HXDLIN( 116)																int this8 = col;
HXDLIN( 116)																if ((maskPixel == 0)) {
HXLINE( 116)																	col = this8;
            																}
            																else {
HXLINE( 116)																	Float m0;
HXDLIN( 116)																	int this9 = ((maskPixel >> 24) & 255);
HXDLIN( 116)																	if ((this9 == 0)) {
HXLINE( 116)																		m0 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		m0 = (( (Float)(this9) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float m1;
HXDLIN( 116)																	int this10 = ((maskPixel >> 16) & 255);
HXDLIN( 116)																	if ((this10 == 0)) {
HXLINE( 116)																		m1 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		m1 = (( (Float)(this10) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float m2;
HXDLIN( 116)																	int this11 = ((maskPixel >> 8) & 255);
HXDLIN( 116)																	if ((this11 == 0)) {
HXLINE( 116)																		m2 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		m2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float m3;
HXDLIN( 116)																	int this12 = (maskPixel & 255);
HXDLIN( 116)																	if ((this12 == 0)) {
HXLINE( 116)																		m3 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		m3 = (( (Float)(this12) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this8 >> 24) & 255)) )));
HXDLIN( 116)																	int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this8 >> 16) & 255)) )));
HXDLIN( 116)																	int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this8 >> 8) & 255)) )));
HXDLIN( 116)																	int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this8 & 255)) )));
HXDLIN( 116)																	col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN( 116)															if ((col != 0)) {
HXLINE( 116)																int x2 = (dx1 - rectLeft);
HXDLIN( 116)																int y2 = (dy1 - rectTop);
HXDLIN( 116)																int c2 = col;
HXDLIN( 116)																bool _hx_tmp1;
HXDLIN( 116)																if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 116)																	_hx_tmp1 = undoImage->transparent;
            																}
            																else {
HXLINE( 116)																	_hx_tmp1 = false;
            																}
HXDLIN( 116)																if (_hx_tmp1) {
HXLINE( 116)																	int location;
HXDLIN( 116)																	if (undoImage->useVirtualPos) {
HXLINE( 116)																		location = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            																	}
            																	else {
HXLINE( 116)																		location = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            																	}
HXDLIN( 116)																	int this13 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 116)																	int this14;
HXDLIN( 116)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																		this14 = ((((((this13 >> 24) & 255) << 24) | ((this13 & 255) << 16)) | (((this13 >> 8) & 255) << 8)) | ((this13 >> 16) & 255));
            																	}
            																	else {
HXLINE( 116)																		this14 = this13;
            																	}
HXDLIN( 116)																	Float a1;
HXDLIN( 116)																	int this15 = ((this14 >> 24) & 255);
HXDLIN( 116)																	if ((this15 == 0)) {
HXLINE( 116)																		a1 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		a1 = (( (Float)(this15) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float r1;
HXDLIN( 116)																	int this16 = ((this14 >> 16) & 255);
HXDLIN( 116)																	if ((this16 == 0)) {
HXLINE( 116)																		r1 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		r1 = (( (Float)(this16) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float g1;
HXDLIN( 116)																	int this17 = ((this14 >> 8) & 255);
HXDLIN( 116)																	if ((this17 == 0)) {
HXLINE( 116)																		g1 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		g1 = (( (Float)(this17) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float b11;
HXDLIN( 116)																	int this18 = (this14 & 255);
HXDLIN( 116)																	if ((this18 == 0)) {
HXLINE( 116)																		b11 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		b11 = (( (Float)(this18) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float a2;
HXDLIN( 116)																	int this19 = ((col >> 24) & 255);
HXDLIN( 116)																	if ((this19 == 0)) {
HXLINE( 116)																		a2 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		a2 = (( (Float)(this19) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float r2;
HXDLIN( 116)																	int this20 = ((col >> 16) & 255);
HXDLIN( 116)																	if ((this20 == 0)) {
HXLINE( 116)																		r2 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		r2 = (( (Float)(this20) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float g2;
HXDLIN( 116)																	int this21 = ((col >> 8) & 255);
HXDLIN( 116)																	if ((this21 == 0)) {
HXLINE( 116)																		g2 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		g2 = (( (Float)(this21) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float b21;
HXDLIN( 116)																	int this22 = (col & 255);
HXDLIN( 116)																	if ((this22 == 0)) {
HXLINE( 116)																		b21 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		b21 = (( (Float)(this22) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 116)																	int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 116)																	int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 116)																	int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 116)																	int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 116)																	int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 116)																	{
HXLINE( 116)																		int _hx_tmp2;
HXDLIN( 116)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																			_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																		}
            																		else {
HXLINE( 116)																			_hx_tmp2 = blended;
            																		}
HXDLIN( 116)																		::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            																	}
            																}
            																else {
HXLINE( 116)																	::Dynamic this23 = undoImage->image;
HXDLIN( 116)																	int index2;
HXDLIN( 116)																	if (undoImage->useVirtualPos) {
HXLINE( 116)																		index2 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            																	}
            																	else {
HXLINE( 116)																		index2 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            																	}
HXDLIN( 116)																	int _hx_tmp3;
HXDLIN( 116)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																		_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            																	}
            																	else {
HXLINE( 116)																		_hx_tmp3 = c2;
            																	}
HXDLIN( 116)																	::iterMagic::Iimg_obj::set(this23,index2,_hx_tmp3);
            																}
            															}
            															else {
HXLINE( 116)																if (forceClear) {
HXLINE( 116)																	::Dynamic this24 = undoImage->image;
HXDLIN( 116)																	int x3 = (dx1 - rectLeft);
HXDLIN( 116)																	int y3 = (dy1 - rectTop);
HXDLIN( 116)																	int index3;
HXDLIN( 116)																	if (undoImage->useVirtualPos) {
HXLINE( 116)																		index3 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x3) - undoImage->virtualX));
            																	}
            																	else {
HXLINE( 116)																		index3 = ::Std_obj::_hx_int(( (Float)(((y3 * undoImage->width) + x3)) ));
            																	}
HXDLIN( 116)																	::iterMagic::Iimg_obj::set(this24,index3,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 116)									bool found = false;
HXDLIN( 116)									Float s = ((Float)0.);
HXDLIN( 116)									Float t = ((Float)0.);
HXDLIN( 116)									Float sxx = ((Float)0.);
HXDLIN( 116)									Float txx = ((Float)0.);
HXDLIN( 116)									{
HXLINE( 116)										int _g_min = xIter3->start;
HXDLIN( 116)										int _g_max = xIter3->max;
HXDLIN( 116)										while((_g_min < _g_max)){
HXLINE( 116)											_g_min = (_g_min + 1);
HXDLIN( 116)											int x4 = (_g_min - 1);
HXLINE(  60)											sxx = (sx * ( (Float)(x4) ));
HXLINE(  61)											txx = (tx * ( (Float)(x4) ));
HXLINE(  62)											found = false;
HXLINE( 116)											{
HXLINE( 116)												int _g_min1 = yIter3->start;
HXDLIN( 116)												int _g_max1 = yIter3->max;
HXDLIN( 116)												while((_g_min1 < _g_max1)){
HXLINE( 116)													_g_min1 = (_g_min1 + 1);
HXDLIN( 116)													int y4 = (_g_min1 - 1);
HXLINE(  64)													s = ((s0 + sxx) + (sy * ( (Float)(y4) )));
HXLINE(  65)													t = ((t0 + txx) + (ty * ( (Float)(y4) )));
HXLINE( 116)													bool _hx_tmp4;
HXDLIN( 116)													if (!((s <= 0))) {
HXLINE( 116)														_hx_tmp4 = (t <= 0);
            													}
            													else {
HXLINE( 116)														_hx_tmp4 = true;
            													}
HXDLIN( 116)													if (_hx_tmp4) {
HXLINE( 116)														if (found) {
HXLINE( 116)															goto _hx_goto_193;
            														}
            													}
            													else {
HXLINE( 116)														if (((s + t) < A)) {
HXLINE( 116)															{
HXLINE( 116)																int c3 = colorA;
HXDLIN( 116)																bool _hx_tmp5;
HXDLIN( 116)																if ((((c3 >> 24) & 255) < 254)) {
HXLINE( 116)																	_hx_tmp5 = this2->transparent;
            																}
            																else {
HXLINE( 116)																	_hx_tmp5 = false;
            																}
HXDLIN( 116)																if (_hx_tmp5) {
HXLINE( 116)																	int location1;
HXDLIN( 116)																	if (this2->useVirtualPos) {
HXLINE( 116)																		location1 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - this2->virtualY) * ( (Float)(this2->width) )) + x4) - this2->virtualX));
            																	}
            																	else {
HXLINE( 116)																		location1 = ::Std_obj::_hx_int(( (Float)(((y4 * this2->width) + x4)) ));
            																	}
HXDLIN( 116)																	int this25 = ::iterMagic::Iimg_obj::get(this2->image,location1);
HXDLIN( 116)																	int this26;
HXDLIN( 116)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																		this26 = ((((((this25 >> 24) & 255) << 24) | ((this25 & 255) << 16)) | (((this25 >> 8) & 255) << 8)) | ((this25 >> 16) & 255));
            																	}
            																	else {
HXLINE( 116)																		this26 = this25;
            																	}
HXDLIN( 116)																	Float a11;
HXDLIN( 116)																	int this27 = ((this26 >> 24) & 255);
HXDLIN( 116)																	if ((this27 == 0)) {
HXLINE( 116)																		a11 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		a11 = (( (Float)(this27) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float r11;
HXDLIN( 116)																	int this28 = ((this26 >> 16) & 255);
HXDLIN( 116)																	if ((this28 == 0)) {
HXLINE( 116)																		r11 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		r11 = (( (Float)(this28) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float g11;
HXDLIN( 116)																	int this29 = ((this26 >> 8) & 255);
HXDLIN( 116)																	if ((this29 == 0)) {
HXLINE( 116)																		g11 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		g11 = (( (Float)(this29) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float b12;
HXDLIN( 116)																	int this30 = (this26 & 255);
HXDLIN( 116)																	if ((this30 == 0)) {
HXLINE( 116)																		b12 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		b12 = (( (Float)(this30) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float a21;
HXDLIN( 116)																	int this31 = ((colorA >> 24) & 255);
HXDLIN( 116)																	if ((this31 == 0)) {
HXLINE( 116)																		a21 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		a21 = (( (Float)(this31) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float r21;
HXDLIN( 116)																	int this32 = ((colorA >> 16) & 255);
HXDLIN( 116)																	if ((this32 == 0)) {
HXLINE( 116)																		r21 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		r21 = (( (Float)(this32) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float g21;
HXDLIN( 116)																	int this33 = ((colorA >> 8) & 255);
HXDLIN( 116)																	if ((this33 == 0)) {
HXLINE( 116)																		g21 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		g21 = (( (Float)(this33) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float b22;
HXDLIN( 116)																	int this34 = (colorA & 255);
HXDLIN( 116)																	if ((this34 == 0)) {
HXLINE( 116)																		b22 = ((Float)0.);
            																	}
            																	else {
HXLINE( 116)																		b22 = (( (Float)(this34) ) / ( (Float)(255) ));
            																	}
HXDLIN( 116)																	Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN( 116)																	int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 116)																	int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 116)																	int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 116)																	int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 116)																	int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 116)																	{
HXLINE( 116)																		int _hx_tmp6;
HXDLIN( 116)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																			_hx_tmp6 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            																		}
            																		else {
HXLINE( 116)																			_hx_tmp6 = blended1;
            																		}
HXDLIN( 116)																		::iterMagic::Iimg_obj::set(this2->image,location1,_hx_tmp6);
            																	}
            																}
            																else {
HXLINE( 116)																	::Dynamic this35 = this2->image;
HXDLIN( 116)																	int index4;
HXDLIN( 116)																	if (this2->useVirtualPos) {
HXLINE( 116)																		index4 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - this2->virtualY) * ( (Float)(this2->width) )) + x4) - this2->virtualX));
            																	}
            																	else {
HXLINE( 116)																		index4 = ::Std_obj::_hx_int(( (Float)(((y4 * this2->width) + x4)) ));
            																	}
HXDLIN( 116)																	int _hx_tmp7;
HXDLIN( 116)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																		_hx_tmp7 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            																	}
            																	else {
HXLINE( 116)																		_hx_tmp7 = c3;
            																	}
HXDLIN( 116)																	::iterMagic::Iimg_obj::set(this35,index4,_hx_tmp7);
            																}
            															}
HXLINE(  73)															found = true;
            														}
            														else {
HXLINE( 116)															if (found) {
HXLINE( 116)																goto _hx_goto_193;
            															}
            														}
            													}
            												}
            												_hx_goto_193:;
            											}
            										}
            									}
HXDLIN( 116)									if ((hasHit == true)) {
HXLINE( 116)										 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,bx,by,cx1,cy1,true);
HXDLIN( 116)										if (hasUndo) {
HXLINE( 116)											v2->undoImage = undoImage;
HXDLIN( 116)											v2->undoX = xIter3->start;
HXDLIN( 116)											v2->undoY = yIter3->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  46)						lastX = nextX;
HXLINE(  47)						lastY = nextY;
            					}
            				}
            			}
            		}
HXLINE( 117)		 ::pi_xy::ImageStruct this36 = pixelimage;
HXDLIN( 117)		Float x5 = (x + dx);
HXDLIN( 117)		Float bx1 = (x5 + ( (Float)(fat) ));
HXDLIN( 117)		Float cy2 = (y + ( (Float)(dy) ));
HXDLIN( 117)		{
HXLINE( 117)			bool hasHit1 = true;
HXDLIN( 117)			{
HXLINE( 117)				{
HXLINE( 117)					bool hasUndo1 = false;
HXDLIN( 117)					int aA = ((colorB >> 24) & 255);
HXDLIN( 117)					int rA = ((colorB >> 16) & 255);
HXDLIN( 117)					int gA = ((colorB >> 8) & 255);
HXDLIN( 117)					int bA = (colorB & 255);
HXDLIN( 117)					int aB = ((colorA >> 24) & 255);
HXDLIN( 117)					int rB = ((colorA >> 16) & 255);
HXDLIN( 117)					int gB = ((colorA >> 8) & 255);
HXDLIN( 117)					int bB = (colorA & 255);
HXDLIN( 117)					int aC = ((colorA >> 24) & 255);
HXDLIN( 117)					int rC = ((colorA >> 16) & 255);
HXDLIN( 117)					int gC = ((colorA >> 8) & 255);
HXDLIN( 117)					int bC = (colorA & 255);
HXDLIN( 117)					Float bcx = (bx1 - x5);
HXDLIN( 117)					Float bcy = (y - cy2);
HXDLIN( 117)					Float acx = (x5 - x5);
HXDLIN( 117)					Float acy = (y - cy2);
HXDLIN( 117)					Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 117)					Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 117)					Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 117)					Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 117)					 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 117)					if ((x5 > bx1)) {
HXLINE( 117)						if ((x5 > x5)) {
HXLINE( 117)							int min4;
HXDLIN( 117)							if ((bx1 > x5)) {
HXLINE( 117)								min4 = ::Math_obj::floor(x5);
            							}
            							else {
HXLINE( 117)								min4 = ::Math_obj::floor(bx1);
            							}
HXDLIN( 117)							int ii_min8 = min4;
HXDLIN( 117)							int ii_max8 = ::Math_obj::ceil(x5);
HXDLIN( 117)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            						}
            						else {
HXLINE( 117)							int ii_min9 = ::Math_obj::floor(bx1);
HXDLIN( 117)							int ii_max9 = ::Math_obj::ceil(x5);
HXDLIN( 117)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            						}
            					}
            					else {
HXLINE( 117)						if ((bx1 > x5)) {
HXLINE( 117)							int min5;
HXDLIN( 117)							if ((x5 > x5)) {
HXLINE( 117)								min5 = ::Math_obj::floor(x5);
            							}
            							else {
HXLINE( 117)								min5 = ::Math_obj::ceil(x5);
            							}
HXDLIN( 117)							int ii_min10 = min5;
HXDLIN( 117)							int ii_max10 = ::Math_obj::ceil(bx1);
HXDLIN( 117)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            						}
            						else {
HXLINE( 117)							int ii_min11 = ::Math_obj::floor(x5);
HXDLIN( 117)							int ii_max11 = ::Math_obj::ceil(x5);
HXDLIN( 117)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            						}
            					}
HXDLIN( 117)					 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 117)					if ((y > y)) {
HXLINE( 117)						if ((y > cy2)) {
HXLINE( 117)							int min6;
HXDLIN( 117)							if ((y > cy2)) {
HXLINE( 117)								min6 = ::Math_obj::floor(cy2);
            							}
            							else {
HXLINE( 117)								min6 = ::Math_obj::floor(y);
            							}
HXDLIN( 117)							int ii_min12 = min6;
HXDLIN( 117)							int ii_max12 = ::Math_obj::ceil(y);
HXDLIN( 117)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            						}
            						else {
HXLINE( 117)							int ii_min13 = ::Math_obj::floor(y);
HXDLIN( 117)							int ii_max13 = ::Math_obj::ceil(cy2);
HXDLIN( 117)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            						}
            					}
            					else {
HXLINE( 117)						if ((y > cy2)) {
HXLINE( 117)							int min7;
HXDLIN( 117)							if ((y > cy2)) {
HXLINE( 117)								min7 = ::Math_obj::floor(cy2);
            							}
            							else {
HXLINE( 117)								min7 = ::Math_obj::ceil(y);
            							}
HXDLIN( 117)							int ii_min14 = min7;
HXDLIN( 117)							int ii_max14 = ::Math_obj::ceil(y);
HXDLIN( 117)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            						}
            						else {
HXLINE( 117)							int ii_min15 = ::Math_obj::floor(y);
HXDLIN( 117)							int ii_max15 = ::Math_obj::ceil(cy2);
HXDLIN( 117)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            						}
            					}
HXDLIN( 117)					 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 117)					if (hasUndo1) {
HXLINE( 117)						int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 117)						int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 117)						 ::Dynamic imageType1 = null();
HXDLIN( 117)						 ::pi_xy::ImageStruct this37 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 117)						if (::hx::IsNull( imageType1 )) {
HXLINE(  54)							imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 117)						::Dynamic undoImage4;
HXDLIN( 117)						switch((int)(( (int)(imageType1) ))){
            							case (int)0: {
HXLINE( 117)								 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 117)								 ::iterMagic::BytesImg b5 = byt1;
HXDLIN( 117)								{
HXLINE( 117)									b5->width = width1;
HXDLIN( 117)									b5->height = height1;
HXDLIN( 117)									b5->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 117)									b5->data = ::haxe::io::Bytes_obj::alloc((b5->length * 4));
HXDLIN( 117)									{
HXLINE( 117)										int len2 = b5->length;
HXDLIN( 117)										int w1 = 0;
HXDLIN( 117)										{
HXLINE( 117)											int _g22 = 0;
HXDLIN( 117)											int _g23 = b5->height;
HXDLIN( 117)											while((_g22 < _g23)){
HXLINE( 117)												_g22 = (_g22 + 1);
HXDLIN( 117)												int y5 = (_g22 - 1);
HXDLIN( 117)												{
HXLINE( 117)													int _g24 = 0;
HXDLIN( 117)													int _g25 = b5->width;
HXDLIN( 117)													while((_g24 < _g25)){
HXLINE( 117)														_g24 = (_g24 + 1);
HXDLIN( 117)														int x6 = (_g24 - 1);
HXDLIN( 117)														{
HXLINE( 117)															w1 = (w1 + 1);
HXDLIN( 117)															b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 117)														{
HXLINE( 117)															w1 = (w1 + 1);
HXDLIN( 117)															b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 117)														{
HXLINE( 117)															w1 = (w1 + 1);
HXDLIN( 117)															b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 117)														{
HXLINE( 117)															w1 = (w1 + 1);
HXDLIN( 117)															b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 117)								undoImage4 = b5;
            							}
            							break;
            							case (int)1: {
HXLINE( 117)								 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 117)								 ::iterMagic::ArrIntImg a6 = arrI1;
HXDLIN( 117)								{
HXLINE( 117)									a6->width = width1;
HXDLIN( 117)									a6->height = height1;
HXDLIN( 117)									a6->data = ::Array_obj< int >::__new(0);
HXDLIN( 117)									a6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 117)									{
HXLINE( 117)										int _g26 = 0;
HXDLIN( 117)										int _g27 = a6->length;
HXDLIN( 117)										while((_g26 < _g27)){
HXLINE( 117)											_g26 = (_g26 + 1);
HXDLIN( 117)											int i7 = (_g26 - 1);
HXDLIN( 117)											a6->data[i7] = 0;
            										}
            									}
            								}
HXDLIN( 117)								undoImage4 = a6;
            							}
            							break;
            							case (int)2: {
HXLINE( 117)								 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 117)								 ::iterMagic::U32ArrImg b6 = u32a1;
HXDLIN( 117)								{
HXLINE( 117)									b6->width = width1;
HXDLIN( 117)									b6->height = height1;
HXDLIN( 117)									b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 117)									int size1 = (b6->length * 4);
HXDLIN( 117)									b6->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 117)									{
HXLINE( 117)										int _g28 = 0;
HXDLIN( 117)										int _g29 = b6->length;
HXDLIN( 117)										while((_g28 < _g29)){
HXLINE( 117)											_g28 = (_g28 + 1);
HXDLIN( 117)											int i8 = (_g28 - 1);
HXDLIN( 117)											{
HXLINE( 117)												 ::haxe::io::ArrayBufferViewImpl this38 = b6->data;
HXDLIN( 117)												bool undoImage5;
HXDLIN( 117)												if ((i8 >= 0)) {
HXLINE( 117)													undoImage5 = (i8 < (this38->byteLength >> 2));
            												}
            												else {
HXLINE( 117)													undoImage5 = false;
            												}
HXDLIN( 117)												if (undoImage5) {
HXLINE( 117)													 ::haxe::io::Bytes _this1 = this38->bytes;
HXDLIN( 117)													int pos1 = ((i8 << 2) + this38->byteOffset);
HXDLIN( 117)													_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 117)													_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 117)													_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 117)													_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 117)								undoImage4 = b6;
            							}
            							break;
            							case (int)3: {
HXLINE( 117)								 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 117)								 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN( 117)								{
HXLINE( 117)									v3->width = width1;
HXDLIN( 117)									v3->height = height1;
HXDLIN( 117)									v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 117)									v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN( 117)									{
HXLINE( 117)										int _g30 = 0;
HXDLIN( 117)										int _g31 = v3->length;
HXDLIN( 117)										while((_g30 < _g31)){
HXLINE( 117)											_g30 = (_g30 + 1);
HXDLIN( 117)											int i9 = (_g30 - 1);
HXDLIN( 117)											v3->data->__unsafe_set(i9,0);
            										}
            									}
            								}
HXDLIN( 117)								undoImage4 = v3;
            							}
            							break;
            							case (int)4: {
HXLINE( 117)								 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 117)								 ::iterMagic::StackIntImg b7 = sInt1;
HXDLIN( 117)								{
HXLINE( 117)									b7->width = width1;
HXDLIN( 117)									b7->height = height1;
HXDLIN( 117)									b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 117)									b7->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 117)									{
HXLINE( 117)										int len3 = b7->length;
HXDLIN( 117)										 ::haxe::ds::GenericStack_Int d1 = b7->data;
HXDLIN( 117)										if (::hx::IsNull( d1->head )) {
HXLINE( 117)											int _g32 = 0;
HXDLIN( 117)											int _g33 = len3;
HXDLIN( 117)											while((_g32 < _g33)){
HXLINE( 117)												_g32 = (_g32 + 1);
HXDLIN( 117)												int i10 = (_g32 - 1);
HXDLIN( 117)												d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            											}
            										}
            										else {
HXLINE( 117)											int _g34 = 0;
HXDLIN( 117)											int _g35 = len3;
HXDLIN( 117)											while((_g34 < _g35)){
HXLINE( 117)												_g34 = (_g34 + 1);
HXDLIN( 117)												int i11 = (_g34 - 1);
HXDLIN( 117)												{
HXLINE( 117)													 ::haxe::ds::GenericCell_Int l1 = b7->data->head;
HXDLIN( 117)													 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 117)													{
HXLINE( 117)														int _g36 = 0;
HXDLIN( 117)														int _g37 = i11;
HXDLIN( 117)														while((_g36 < _g37)){
HXLINE( 117)															_g36 = (_g36 + 1);
HXDLIN( 117)															int i12 = (_g36 - 1);
HXLINE( 345)															prev1 = l1;
HXLINE( 346)															l1 = l1->next;
            														}
            													}
HXLINE( 117)													if (::hx::IsNull( prev1 )) {
HXLINE( 117)														b7->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 117)														l1 = null();
            													}
            													else {
HXLINE( 117)														prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 117)														l1 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 117)								undoImage4 = b7;
            							}
            							break;
            						}
HXDLIN( 117)						this37->image = undoImage4;
HXDLIN( 117)						this37->width = width1;
HXDLIN( 117)						this37->height = height1;
HXDLIN( 117)						this37->imageType = ( (int)(imageType1) );
HXDLIN( 117)						undoImage3 = this37;
HXDLIN( 117)						{
HXLINE( 117)							int rectLeft1 = xIter31->start;
HXDLIN( 117)							int rectTop1 = yIter31->start;
HXDLIN( 117)							int rectRight1 = xIter31->max;
HXDLIN( 117)							bool forceClear1 = false;
HXDLIN( 117)							{
HXLINE( 117)								int _g38 = rectTop1;
HXDLIN( 117)								int _g39 = yIter31->max;
HXDLIN( 117)								while((_g38 < _g39)){
HXLINE( 117)									_g38 = (_g38 + 1);
HXDLIN( 117)									int dy2 = (_g38 - 1);
HXDLIN( 117)									{
HXLINE( 117)										int _g40 = rectLeft1;
HXDLIN( 117)										int _g41 = rectRight1;
HXDLIN( 117)										while((_g40 < _g41)){
HXLINE( 117)											_g40 = (_g40 + 1);
HXDLIN( 117)											int dx2 = (_g40 - 1);
HXDLIN( 117)											::Dynamic this39 = this36->image;
HXDLIN( 117)											int index5;
HXDLIN( 117)											if (this36->useVirtualPos) {
HXLINE( 117)												index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this36->virtualY) * ( (Float)(this36->width) )) + dx2) - this36->virtualX));
            											}
            											else {
HXLINE( 117)												index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this36->width) + dx2)) ));
            											}
HXDLIN( 117)											int c4 = ::iterMagic::Iimg_obj::get(this39,index5);
HXDLIN( 117)											int col1;
HXDLIN( 117)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)												col1 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            											}
            											else {
HXLINE( 117)												col1 = c4;
            											}
HXDLIN( 117)											bool _hx_tmp8;
HXDLIN( 117)											if (this36->useMask) {
HXLINE( 117)												_hx_tmp8 = ::hx::IsNotNull( this36->mask );
            											}
            											else {
HXLINE( 117)												_hx_tmp8 = false;
            											}
HXDLIN( 117)											if (_hx_tmp8) {
HXLINE( 117)												 ::pi_xy::ImageStruct this40 = this36->mask;
HXDLIN( 117)												::Dynamic this41 = this40->image;
HXDLIN( 117)												int index6;
HXDLIN( 117)												if (this40->useVirtualPos) {
HXLINE( 117)													index6 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this40->virtualY) * ( (Float)(this40->width) )) + dx2) - this40->virtualX));
            												}
            												else {
HXLINE( 117)													index6 = ::Std_obj::_hx_int(( (Float)(((dy2 * this40->width) + dx2)) ));
            												}
HXDLIN( 117)												int c5 = ::iterMagic::Iimg_obj::get(this41,index6);
HXDLIN( 117)												int v4;
HXDLIN( 117)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)													v4 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            												}
            												else {
HXLINE( 117)													v4 = c5;
            												}
HXDLIN( 117)												int maskPixel1 = v4;
HXDLIN( 117)												int this42 = col1;
HXDLIN( 117)												if ((maskPixel1 == 0)) {
HXLINE( 117)													col1 = this42;
            												}
            												else {
HXLINE( 117)													Float m01;
HXDLIN( 117)													int this43 = ((maskPixel1 >> 24) & 255);
HXDLIN( 117)													if ((this43 == 0)) {
HXLINE( 117)														m01 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														m01 = (( (Float)(this43) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float m11;
HXDLIN( 117)													int this44 = ((maskPixel1 >> 16) & 255);
HXDLIN( 117)													if ((this44 == 0)) {
HXLINE( 117)														m11 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														m11 = (( (Float)(this44) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float m21;
HXDLIN( 117)													int this45 = ((maskPixel1 >> 8) & 255);
HXDLIN( 117)													if ((this45 == 0)) {
HXLINE( 117)														m21 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														m21 = (( (Float)(this45) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float m31;
HXDLIN( 117)													int this46 = (maskPixel1 & 255);
HXDLIN( 117)													if ((this46 == 0)) {
HXLINE( 117)														m31 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														m31 = (( (Float)(this46) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this42 >> 24) & 255)) )));
HXDLIN( 117)													int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this42 >> 16) & 255)) )));
HXDLIN( 117)													int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this42 >> 8) & 255)) )));
HXDLIN( 117)													int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this42 & 255)) )));
HXDLIN( 117)													col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 117)											if ((col1 != 0)) {
HXLINE( 117)												int x7 = (dx2 - rectLeft1);
HXDLIN( 117)												int y6 = (dy2 - rectTop1);
HXDLIN( 117)												int c6 = col1;
HXDLIN( 117)												bool _hx_tmp9;
HXDLIN( 117)												if ((((c6 >> 24) & 255) < 254)) {
HXLINE( 117)													_hx_tmp9 = undoImage3->transparent;
            												}
            												else {
HXLINE( 117)													_hx_tmp9 = false;
            												}
HXDLIN( 117)												if (_hx_tmp9) {
HXLINE( 117)													int location2;
HXDLIN( 117)													if (undoImage3->useVirtualPos) {
HXLINE( 117)														location2 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x7) - undoImage3->virtualX));
            													}
            													else {
HXLINE( 117)														location2 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x7)) ));
            													}
HXDLIN( 117)													int this47 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 117)													int this48;
HXDLIN( 117)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)														this48 = ((((((this47 >> 24) & 255) << 24) | ((this47 & 255) << 16)) | (((this47 >> 8) & 255) << 8)) | ((this47 >> 16) & 255));
            													}
            													else {
HXLINE( 117)														this48 = this47;
            													}
HXDLIN( 117)													Float a12;
HXDLIN( 117)													int this49 = ((this48 >> 24) & 255);
HXDLIN( 117)													if ((this49 == 0)) {
HXLINE( 117)														a12 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														a12 = (( (Float)(this49) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float r12;
HXDLIN( 117)													int this50 = ((this48 >> 16) & 255);
HXDLIN( 117)													if ((this50 == 0)) {
HXLINE( 117)														r12 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														r12 = (( (Float)(this50) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float g12;
HXDLIN( 117)													int this51 = ((this48 >> 8) & 255);
HXDLIN( 117)													if ((this51 == 0)) {
HXLINE( 117)														g12 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														g12 = (( (Float)(this51) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float b13;
HXDLIN( 117)													int this52 = (this48 & 255);
HXDLIN( 117)													if ((this52 == 0)) {
HXLINE( 117)														b13 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														b13 = (( (Float)(this52) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float a22;
HXDLIN( 117)													int this53 = ((col1 >> 24) & 255);
HXDLIN( 117)													if ((this53 == 0)) {
HXLINE( 117)														a22 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														a22 = (( (Float)(this53) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float r22;
HXDLIN( 117)													int this54 = ((col1 >> 16) & 255);
HXDLIN( 117)													if ((this54 == 0)) {
HXLINE( 117)														r22 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														r22 = (( (Float)(this54) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float g22;
HXDLIN( 117)													int this55 = ((col1 >> 8) & 255);
HXDLIN( 117)													if ((this55 == 0)) {
HXLINE( 117)														g22 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														g22 = (( (Float)(this55) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float b23;
HXDLIN( 117)													int this56 = (col1 & 255);
HXDLIN( 117)													if ((this56 == 0)) {
HXLINE( 117)														b23 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														b23 = (( (Float)(this56) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN( 117)													int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 117)													int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 117)													int b8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 117)													int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 117)													int blended2 = ((((a7 << 24) | (r4 << 16)) | (g4 << 8)) | b8);
HXDLIN( 117)													{
HXLINE( 117)														int _hx_tmp10;
HXDLIN( 117)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)															_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            														}
            														else {
HXLINE( 117)															_hx_tmp10 = blended2;
            														}
HXDLIN( 117)														::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            													}
            												}
            												else {
HXLINE( 117)													::Dynamic this57 = undoImage3->image;
HXDLIN( 117)													int index7;
HXDLIN( 117)													if (undoImage3->useVirtualPos) {
HXLINE( 117)														index7 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x7) - undoImage3->virtualX));
            													}
            													else {
HXLINE( 117)														index7 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x7)) ));
            													}
HXDLIN( 117)													int _hx_tmp11;
HXDLIN( 117)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)														_hx_tmp11 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            													}
            													else {
HXLINE( 117)														_hx_tmp11 = c6;
            													}
HXDLIN( 117)													::iterMagic::Iimg_obj::set(this57,index7,_hx_tmp11);
            												}
            											}
            											else {
HXLINE( 117)												if (forceClear1) {
HXLINE( 117)													::Dynamic this58 = undoImage3->image;
HXDLIN( 117)													int x8 = (dx2 - rectLeft1);
HXDLIN( 117)													int y7 = (dy2 - rectTop1);
HXDLIN( 117)													int index8;
HXDLIN( 117)													if (undoImage3->useVirtualPos) {
HXLINE( 117)														index8 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x8) - undoImage3->virtualX));
            													}
            													else {
HXLINE( 117)														index8 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage3->width) + x8)) ));
            													}
HXDLIN( 117)													::iterMagic::Iimg_obj::set(this58,index8,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 117)					{
HXLINE( 117)						int _g_min2 = xIter31->start;
HXDLIN( 117)						int _g_max2 = xIter31->max;
HXDLIN( 117)						while((_g_min2 < _g_max2)){
HXLINE( 117)							_g_min2 = (_g_min2 + 1);
HXDLIN( 117)							int px = (_g_min2 - 1);
HXDLIN( 117)							Float pcx = (( (Float)(px) ) - x5);
HXDLIN( 117)							{
HXLINE( 117)								int _g_min3 = yIter31->start;
HXDLIN( 117)								int _g_max3 = yIter31->max;
HXDLIN( 117)								while((_g_min3 < _g_max3)){
HXLINE( 117)									_g_min3 = (_g_min3 + 1);
HXDLIN( 117)									int py = (_g_min3 - 1);
HXDLIN( 117)									Float pcy = (( (Float)(py) ) - cy2);
HXDLIN( 117)									Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 117)									Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 117)									Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 117)									Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 117)									Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 117)									bool _hx_tmp12;
HXDLIN( 117)									bool _hx_tmp13;
HXDLIN( 117)									if ((ratioA >= 0)) {
HXLINE( 117)										_hx_tmp13 = (ratioB >= 0);
            									}
            									else {
HXLINE( 117)										_hx_tmp13 = false;
            									}
HXDLIN( 117)									if (_hx_tmp13) {
HXLINE( 117)										_hx_tmp12 = (ratioC >= 0);
            									}
            									else {
HXLINE( 117)										_hx_tmp12 = false;
            									}
HXDLIN( 117)									if (_hx_tmp12) {
HXLINE( 117)										int i13 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA) + (( (Float)(aB) ) * ratioB)) + (( (Float)(aC) ) * ratioC)));
HXDLIN( 117)										if ((i13 > 255)) {
HXLINE(  24)											i13 = 255;
            										}
HXLINE( 117)										if ((i13 < 0)) {
HXLINE(  25)											i13 = 0;
            										}
HXLINE( 117)										int a8 = i13;
HXDLIN( 117)										int i14 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA) + (( (Float)(rB) ) * ratioB)) + (( (Float)(rC) ) * ratioC)));
HXDLIN( 117)										if ((i14 > 255)) {
HXLINE(  24)											i14 = 255;
            										}
HXLINE( 117)										if ((i14 < 0)) {
HXLINE(  25)											i14 = 0;
            										}
HXLINE( 117)										int r5 = i14;
HXDLIN( 117)										int i15 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA) + (( (Float)(gB) ) * ratioB)) + (( (Float)(gC) ) * ratioC)));
HXDLIN( 117)										if ((i15 > 255)) {
HXLINE(  24)											i15 = 255;
            										}
HXLINE( 117)										if ((i15 < 0)) {
HXLINE(  25)											i15 = 0;
            										}
HXLINE( 117)										int g5 = i15;
HXDLIN( 117)										int i16 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA) + (( (Float)(bB) ) * ratioB)) + (( (Float)(bC) ) * ratioC)));
HXDLIN( 117)										if ((i16 > 255)) {
HXLINE(  24)											i16 = 255;
            										}
HXLINE( 117)										if ((i16 < 0)) {
HXLINE(  25)											i16 = 0;
            										}
HXLINE( 117)										int b9 = i16;
HXDLIN( 117)										{
HXLINE( 117)											int location3;
HXDLIN( 117)											if (this36->useVirtualPos) {
HXLINE( 117)												location3 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this36->virtualY) * ( (Float)(this36->width) )) + px) - this36->virtualX));
            											}
            											else {
HXLINE( 117)												location3 = ::Std_obj::_hx_int(( (Float)(((py * this36->width) + px)) ));
            											}
HXDLIN( 117)											bool _hx_tmp14;
HXDLIN( 117)											if (this36->transparent) {
HXLINE( 117)												_hx_tmp14 = (a8 < 254);
            											}
            											else {
HXLINE( 117)												_hx_tmp14 = false;
            											}
HXDLIN( 117)											if (_hx_tmp14) {
HXLINE( 117)												int this59 = ::iterMagic::Iimg_obj::get(this36->image,location3);
HXDLIN( 117)												int old;
HXDLIN( 117)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)													old = ((((((this59 >> 24) & 255) << 24) | ((this59 & 255) << 16)) | (((this59 >> 8) & 255) << 8)) | ((this59 >> 16) & 255));
            												}
            												else {
HXLINE( 117)													old = this59;
            												}
HXDLIN( 117)												int rhs = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN( 117)												Float a13;
HXDLIN( 117)												int this60 = ((old >> 24) & 255);
HXDLIN( 117)												if ((this60 == 0)) {
HXLINE( 117)													a13 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													a13 = (( (Float)(this60) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float r13;
HXDLIN( 117)												int this61 = ((old >> 16) & 255);
HXDLIN( 117)												if ((this61 == 0)) {
HXLINE( 117)													r13 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													r13 = (( (Float)(this61) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float g13;
HXDLIN( 117)												int this62 = ((old >> 8) & 255);
HXDLIN( 117)												if ((this62 == 0)) {
HXLINE( 117)													g13 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													g13 = (( (Float)(this62) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float b14;
HXDLIN( 117)												int this63 = (old & 255);
HXDLIN( 117)												if ((this63 == 0)) {
HXLINE( 117)													b14 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													b14 = (( (Float)(this63) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float a23;
HXDLIN( 117)												int this64 = ((rhs >> 24) & 255);
HXDLIN( 117)												if ((this64 == 0)) {
HXLINE( 117)													a23 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													a23 = (( (Float)(this64) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float r23;
HXDLIN( 117)												int this65 = ((rhs >> 16) & 255);
HXDLIN( 117)												if ((this65 == 0)) {
HXLINE( 117)													r23 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													r23 = (( (Float)(this65) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float g23;
HXDLIN( 117)												int this66 = ((rhs >> 8) & 255);
HXDLIN( 117)												if ((this66 == 0)) {
HXLINE( 117)													g23 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													g23 = (( (Float)(this66) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float b24;
HXDLIN( 117)												int this67 = (rhs & 255);
HXDLIN( 117)												if ((this67 == 0)) {
HXLINE( 117)													b24 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													b24 = (( (Float)(this67) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN( 117)												int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 117)												int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 117)												int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 117)												int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 117)												int blended3 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 117)												{
HXLINE( 117)													int _hx_tmp15;
HXDLIN( 117)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)														_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            													}
            													else {
HXLINE( 117)														_hx_tmp15 = blended3;
            													}
HXDLIN( 117)													::iterMagic::Iimg_obj::set(this36->image,location3,_hx_tmp15);
            												}
            											}
            											else {
HXLINE( 117)												int value;
HXDLIN( 117)												if (this36->isLittle) {
HXLINE( 117)													value = ((((a8 << 24) | (b9 << 16)) | (g5 << 8)) | r5);
            												}
            												else {
HXLINE( 117)													value = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
            												}
HXDLIN( 117)												::iterMagic::Iimg_obj::set(this36->image,location3,value);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 117)					if ((hasHit1 == false)) {
HXLINE( 117)						 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,x5,y,bx1,y,x5,cy2,true);
HXDLIN( 117)						if (hasUndo1) {
HXLINE( 117)							v5->undoImage = undoImage3;
HXDLIN( 117)							v5->undoX = xIter31->start;
HXDLIN( 117)							v5->undoY = yIter31->start;
            						}
            					}
            				}
HXDLIN( 117)				{
HXLINE( 117)					bool hasHit2 = false;
HXDLIN( 117)					bool hasUndo2 = false;
HXDLIN( 117)					int aA1 = ((colorB >> 24) & 255);
HXDLIN( 117)					int rA1 = ((colorB >> 16) & 255);
HXDLIN( 117)					int gA1 = ((colorB >> 8) & 255);
HXDLIN( 117)					int bA1 = (colorB & 255);
HXDLIN( 117)					int aB1 = ((colorB >> 24) & 255);
HXDLIN( 117)					int rB1 = ((colorB >> 16) & 255);
HXDLIN( 117)					int gB1 = ((colorB >> 8) & 255);
HXDLIN( 117)					int bB1 = (colorB & 255);
HXDLIN( 117)					int aC1 = ((colorA >> 24) & 255);
HXDLIN( 117)					int rC1 = ((colorA >> 16) & 255);
HXDLIN( 117)					int gC1 = ((colorA >> 8) & 255);
HXDLIN( 117)					int bC1 = (colorA & 255);
HXDLIN( 117)					Float bcx1 = (bx1 - x5);
HXDLIN( 117)					Float bcy1 = (cy2 - cy2);
HXDLIN( 117)					Float acx1 = (bx1 - x5);
HXDLIN( 117)					Float acy1 = (y - cy2);
HXDLIN( 117)					Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 117)					Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 117)					Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 117)					Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 117)					 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 117)					if ((bx1 > bx1)) {
HXLINE( 117)						if ((bx1 > x5)) {
HXLINE( 117)							int min8;
HXDLIN( 117)							if ((bx1 > x5)) {
HXLINE( 117)								min8 = ::Math_obj::floor(x5);
            							}
            							else {
HXLINE( 117)								min8 = ::Math_obj::floor(bx1);
            							}
HXDLIN( 117)							int ii_min16 = min8;
HXDLIN( 117)							int ii_max16 = ::Math_obj::ceil(bx1);
HXDLIN( 117)							xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            						}
            						else {
HXLINE( 117)							int ii_min17 = ::Math_obj::floor(bx1);
HXDLIN( 117)							int ii_max17 = ::Math_obj::ceil(x5);
HXDLIN( 117)							xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            						}
            					}
            					else {
HXLINE( 117)						if ((bx1 > x5)) {
HXLINE( 117)							int min9;
HXDLIN( 117)							if ((bx1 > x5)) {
HXLINE( 117)								min9 = ::Math_obj::floor(x5);
            							}
            							else {
HXLINE( 117)								min9 = ::Math_obj::ceil(bx1);
            							}
HXDLIN( 117)							int ii_min18 = min9;
HXDLIN( 117)							int ii_max18 = ::Math_obj::ceil(bx1);
HXDLIN( 117)							xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            						}
            						else {
HXLINE( 117)							int ii_min19 = ::Math_obj::floor(bx1);
HXDLIN( 117)							int ii_max19 = ::Math_obj::ceil(x5);
HXDLIN( 117)							xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            						}
            					}
HXDLIN( 117)					 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 117)					if ((y > cy2)) {
HXLINE( 117)						if ((y > cy2)) {
HXLINE( 117)							int min10;
HXDLIN( 117)							if ((cy2 > cy2)) {
HXLINE( 117)								min10 = ::Math_obj::floor(cy2);
            							}
            							else {
HXLINE( 117)								min10 = ::Math_obj::floor(cy2);
            							}
HXDLIN( 117)							int ii_min20 = min10;
HXDLIN( 117)							int ii_max20 = ::Math_obj::ceil(y);
HXDLIN( 117)							yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            						}
            						else {
HXLINE( 117)							int ii_min21 = ::Math_obj::floor(cy2);
HXDLIN( 117)							int ii_max21 = ::Math_obj::ceil(cy2);
HXDLIN( 117)							yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            						}
            					}
            					else {
HXLINE( 117)						if ((cy2 > cy2)) {
HXLINE( 117)							int min11;
HXDLIN( 117)							if ((y > cy2)) {
HXLINE( 117)								min11 = ::Math_obj::floor(cy2);
            							}
            							else {
HXLINE( 117)								min11 = ::Math_obj::ceil(y);
            							}
HXDLIN( 117)							int ii_min22 = min11;
HXDLIN( 117)							int ii_max22 = ::Math_obj::ceil(cy2);
HXDLIN( 117)							yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            						}
            						else {
HXLINE( 117)							int ii_min23 = ::Math_obj::floor(y);
HXDLIN( 117)							int ii_max23 = ::Math_obj::ceil(cy2);
HXDLIN( 117)							yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            						}
            					}
HXDLIN( 117)					 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 117)					if (hasUndo2) {
HXLINE( 117)						int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 117)						int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 117)						 ::Dynamic imageType2 = null();
HXDLIN( 117)						 ::pi_xy::ImageStruct this68 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 117)						if (::hx::IsNull( imageType2 )) {
HXLINE(  54)							imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 117)						::Dynamic undoImage7;
HXDLIN( 117)						switch((int)(( (int)(imageType2) ))){
            							case (int)0: {
HXLINE( 117)								 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 117)								 ::iterMagic::BytesImg b15 = byt2;
HXDLIN( 117)								{
HXLINE( 117)									b15->width = width2;
HXDLIN( 117)									b15->height = height2;
HXDLIN( 117)									b15->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 117)									b15->data = ::haxe::io::Bytes_obj::alloc((b15->length * 4));
HXDLIN( 117)									{
HXLINE( 117)										int len4 = b15->length;
HXDLIN( 117)										int w2 = 0;
HXDLIN( 117)										{
HXLINE( 117)											int _g42 = 0;
HXDLIN( 117)											int _g43 = b15->height;
HXDLIN( 117)											while((_g42 < _g43)){
HXLINE( 117)												_g42 = (_g42 + 1);
HXDLIN( 117)												int y8 = (_g42 - 1);
HXDLIN( 117)												{
HXLINE( 117)													int _g44 = 0;
HXDLIN( 117)													int _g45 = b15->width;
HXDLIN( 117)													while((_g44 < _g45)){
HXLINE( 117)														_g44 = (_g44 + 1);
HXDLIN( 117)														int x9 = (_g44 - 1);
HXDLIN( 117)														{
HXLINE( 117)															w2 = (w2 + 1);
HXDLIN( 117)															b15->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 117)														{
HXLINE( 117)															w2 = (w2 + 1);
HXDLIN( 117)															b15->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 117)														{
HXLINE( 117)															w2 = (w2 + 1);
HXDLIN( 117)															b15->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 117)														{
HXLINE( 117)															w2 = (w2 + 1);
HXDLIN( 117)															b15->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 117)								undoImage7 = b15;
            							}
            							break;
            							case (int)1: {
HXLINE( 117)								 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 117)								 ::iterMagic::ArrIntImg a10 = arrI2;
HXDLIN( 117)								{
HXLINE( 117)									a10->width = width2;
HXDLIN( 117)									a10->height = height2;
HXDLIN( 117)									a10->data = ::Array_obj< int >::__new(0);
HXDLIN( 117)									a10->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 117)									{
HXLINE( 117)										int _g46 = 0;
HXDLIN( 117)										int _g47 = a10->length;
HXDLIN( 117)										while((_g46 < _g47)){
HXLINE( 117)											_g46 = (_g46 + 1);
HXDLIN( 117)											int i17 = (_g46 - 1);
HXDLIN( 117)											a10->data[i17] = 0;
            										}
            									}
            								}
HXDLIN( 117)								undoImage7 = a10;
            							}
            							break;
            							case (int)2: {
HXLINE( 117)								 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 117)								 ::iterMagic::U32ArrImg b16 = u32a2;
HXDLIN( 117)								{
HXLINE( 117)									b16->width = width2;
HXDLIN( 117)									b16->height = height2;
HXDLIN( 117)									b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 117)									int size2 = (b16->length * 4);
HXDLIN( 117)									b16->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 117)									{
HXLINE( 117)										int _g48 = 0;
HXDLIN( 117)										int _g49 = b16->length;
HXDLIN( 117)										while((_g48 < _g49)){
HXLINE( 117)											_g48 = (_g48 + 1);
HXDLIN( 117)											int i18 = (_g48 - 1);
HXDLIN( 117)											{
HXLINE( 117)												 ::haxe::io::ArrayBufferViewImpl this69 = b16->data;
HXDLIN( 117)												bool undoImage8;
HXDLIN( 117)												if ((i18 >= 0)) {
HXLINE( 117)													undoImage8 = (i18 < (this69->byteLength >> 2));
            												}
            												else {
HXLINE( 117)													undoImage8 = false;
            												}
HXDLIN( 117)												if (undoImage8) {
HXLINE( 117)													 ::haxe::io::Bytes _this2 = this69->bytes;
HXDLIN( 117)													int pos2 = ((i18 << 2) + this69->byteOffset);
HXDLIN( 117)													_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 117)													_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 117)													_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 117)													_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 117)								undoImage7 = b16;
            							}
            							break;
            							case (int)3: {
HXLINE( 117)								 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 117)								 ::iterMagic::VecIntImg v6 = vec2;
HXDLIN( 117)								{
HXLINE( 117)									v6->width = width2;
HXDLIN( 117)									v6->height = height2;
HXDLIN( 117)									v6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 117)									v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN( 117)									{
HXLINE( 117)										int _g50 = 0;
HXDLIN( 117)										int _g51 = v6->length;
HXDLIN( 117)										while((_g50 < _g51)){
HXLINE( 117)											_g50 = (_g50 + 1);
HXDLIN( 117)											int i19 = (_g50 - 1);
HXDLIN( 117)											v6->data->__unsafe_set(i19,0);
            										}
            									}
            								}
HXDLIN( 117)								undoImage7 = v6;
            							}
            							break;
            							case (int)4: {
HXLINE( 117)								 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 117)								 ::iterMagic::StackIntImg b17 = sInt2;
HXDLIN( 117)								{
HXLINE( 117)									b17->width = width2;
HXDLIN( 117)									b17->height = height2;
HXDLIN( 117)									b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 117)									b17->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 117)									{
HXLINE( 117)										int len5 = b17->length;
HXDLIN( 117)										 ::haxe::ds::GenericStack_Int d2 = b17->data;
HXDLIN( 117)										if (::hx::IsNull( d2->head )) {
HXLINE( 117)											int _g52 = 0;
HXDLIN( 117)											int _g53 = len5;
HXDLIN( 117)											while((_g52 < _g53)){
HXLINE( 117)												_g52 = (_g52 + 1);
HXDLIN( 117)												int i20 = (_g52 - 1);
HXDLIN( 117)												d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            											}
            										}
            										else {
HXLINE( 117)											int _g54 = 0;
HXDLIN( 117)											int _g55 = len5;
HXDLIN( 117)											while((_g54 < _g55)){
HXLINE( 117)												_g54 = (_g54 + 1);
HXDLIN( 117)												int i21 = (_g54 - 1);
HXDLIN( 117)												{
HXLINE( 117)													 ::haxe::ds::GenericCell_Int l2 = b17->data->head;
HXDLIN( 117)													 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 117)													{
HXLINE( 117)														int _g56 = 0;
HXDLIN( 117)														int _g57 = i21;
HXDLIN( 117)														while((_g56 < _g57)){
HXLINE( 117)															_g56 = (_g56 + 1);
HXDLIN( 117)															int i22 = (_g56 - 1);
HXLINE( 345)															prev2 = l2;
HXLINE( 346)															l2 = l2->next;
            														}
            													}
HXLINE( 117)													if (::hx::IsNull( prev2 )) {
HXLINE( 117)														b17->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 117)														l2 = null();
            													}
            													else {
HXLINE( 117)														prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 117)														l2 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 117)								undoImage7 = b17;
            							}
            							break;
            						}
HXDLIN( 117)						this68->image = undoImage7;
HXDLIN( 117)						this68->width = width2;
HXDLIN( 117)						this68->height = height2;
HXDLIN( 117)						this68->imageType = ( (int)(imageType2) );
HXDLIN( 117)						undoImage6 = this68;
HXDLIN( 117)						{
HXLINE( 117)							int rectLeft2 = xIter32->start;
HXDLIN( 117)							int rectTop2 = yIter32->start;
HXDLIN( 117)							int rectRight2 = xIter32->max;
HXDLIN( 117)							bool forceClear2 = false;
HXDLIN( 117)							{
HXLINE( 117)								int _g58 = rectTop2;
HXDLIN( 117)								int _g59 = yIter32->max;
HXDLIN( 117)								while((_g58 < _g59)){
HXLINE( 117)									_g58 = (_g58 + 1);
HXDLIN( 117)									int dy3 = (_g58 - 1);
HXDLIN( 117)									{
HXLINE( 117)										int _g60 = rectLeft2;
HXDLIN( 117)										int _g61 = rectRight2;
HXDLIN( 117)										while((_g60 < _g61)){
HXLINE( 117)											_g60 = (_g60 + 1);
HXDLIN( 117)											int dx3 = (_g60 - 1);
HXDLIN( 117)											::Dynamic this70 = this36->image;
HXDLIN( 117)											int index9;
HXDLIN( 117)											if (this36->useVirtualPos) {
HXLINE( 117)												index9 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this36->virtualY) * ( (Float)(this36->width) )) + dx3) - this36->virtualX));
            											}
            											else {
HXLINE( 117)												index9 = ::Std_obj::_hx_int(( (Float)(((dy3 * this36->width) + dx3)) ));
            											}
HXDLIN( 117)											int c7 = ::iterMagic::Iimg_obj::get(this70,index9);
HXDLIN( 117)											int col2;
HXDLIN( 117)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)												col2 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            											}
            											else {
HXLINE( 117)												col2 = c7;
            											}
HXDLIN( 117)											bool _hx_tmp16;
HXDLIN( 117)											if (this36->useMask) {
HXLINE( 117)												_hx_tmp16 = ::hx::IsNotNull( this36->mask );
            											}
            											else {
HXLINE( 117)												_hx_tmp16 = false;
            											}
HXDLIN( 117)											if (_hx_tmp16) {
HXLINE( 117)												 ::pi_xy::ImageStruct this71 = this36->mask;
HXDLIN( 117)												::Dynamic this72 = this71->image;
HXDLIN( 117)												int index10;
HXDLIN( 117)												if (this71->useVirtualPos) {
HXLINE( 117)													index10 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this71->virtualY) * ( (Float)(this71->width) )) + dx3) - this71->virtualX));
            												}
            												else {
HXLINE( 117)													index10 = ::Std_obj::_hx_int(( (Float)(((dy3 * this71->width) + dx3)) ));
            												}
HXDLIN( 117)												int c8 = ::iterMagic::Iimg_obj::get(this72,index10);
HXDLIN( 117)												int v7;
HXDLIN( 117)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)													v7 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            												}
            												else {
HXLINE( 117)													v7 = c8;
            												}
HXDLIN( 117)												int maskPixel2 = v7;
HXDLIN( 117)												int this73 = col2;
HXDLIN( 117)												if ((maskPixel2 == 0)) {
HXLINE( 117)													col2 = this73;
            												}
            												else {
HXLINE( 117)													Float m02;
HXDLIN( 117)													int this74 = ((maskPixel2 >> 24) & 255);
HXDLIN( 117)													if ((this74 == 0)) {
HXLINE( 117)														m02 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														m02 = (( (Float)(this74) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float m12;
HXDLIN( 117)													int this75 = ((maskPixel2 >> 16) & 255);
HXDLIN( 117)													if ((this75 == 0)) {
HXLINE( 117)														m12 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														m12 = (( (Float)(this75) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float m22;
HXDLIN( 117)													int this76 = ((maskPixel2 >> 8) & 255);
HXDLIN( 117)													if ((this76 == 0)) {
HXLINE( 117)														m22 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														m22 = (( (Float)(this76) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float m32;
HXDLIN( 117)													int this77 = (maskPixel2 & 255);
HXDLIN( 117)													if ((this77 == 0)) {
HXLINE( 117)														m32 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														m32 = (( (Float)(this77) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this73 >> 24) & 255)) )));
HXDLIN( 117)													int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this73 >> 16) & 255)) )));
HXDLIN( 117)													int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this73 >> 8) & 255)) )));
HXDLIN( 117)													int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this73 & 255)) )));
HXDLIN( 117)													col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 117)											if ((col2 != 0)) {
HXLINE( 117)												int x10 = (dx3 - rectLeft2);
HXDLIN( 117)												int y9 = (dy3 - rectTop2);
HXDLIN( 117)												int c9 = col2;
HXDLIN( 117)												bool _hx_tmp17;
HXDLIN( 117)												if ((((c9 >> 24) & 255) < 254)) {
HXLINE( 117)													_hx_tmp17 = undoImage6->transparent;
            												}
            												else {
HXLINE( 117)													_hx_tmp17 = false;
            												}
HXDLIN( 117)												if (_hx_tmp17) {
HXLINE( 117)													int location4;
HXDLIN( 117)													if (undoImage6->useVirtualPos) {
HXLINE( 117)														location4 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x10) - undoImage6->virtualX));
            													}
            													else {
HXLINE( 117)														location4 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x10)) ));
            													}
HXDLIN( 117)													int this78 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 117)													int this79;
HXDLIN( 117)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)														this79 = ((((((this78 >> 24) & 255) << 24) | ((this78 & 255) << 16)) | (((this78 >> 8) & 255) << 8)) | ((this78 >> 16) & 255));
            													}
            													else {
HXLINE( 117)														this79 = this78;
            													}
HXDLIN( 117)													Float a14;
HXDLIN( 117)													int this80 = ((this79 >> 24) & 255);
HXDLIN( 117)													if ((this80 == 0)) {
HXLINE( 117)														a14 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														a14 = (( (Float)(this80) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float r14;
HXDLIN( 117)													int this81 = ((this79 >> 16) & 255);
HXDLIN( 117)													if ((this81 == 0)) {
HXLINE( 117)														r14 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														r14 = (( (Float)(this81) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float g14;
HXDLIN( 117)													int this82 = ((this79 >> 8) & 255);
HXDLIN( 117)													if ((this82 == 0)) {
HXLINE( 117)														g14 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														g14 = (( (Float)(this82) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float b18;
HXDLIN( 117)													int this83 = (this79 & 255);
HXDLIN( 117)													if ((this83 == 0)) {
HXLINE( 117)														b18 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														b18 = (( (Float)(this83) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float a24;
HXDLIN( 117)													int this84 = ((col2 >> 24) & 255);
HXDLIN( 117)													if ((this84 == 0)) {
HXLINE( 117)														a24 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														a24 = (( (Float)(this84) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float r24;
HXDLIN( 117)													int this85 = ((col2 >> 16) & 255);
HXDLIN( 117)													if ((this85 == 0)) {
HXLINE( 117)														r24 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														r24 = (( (Float)(this85) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float g24;
HXDLIN( 117)													int this86 = ((col2 >> 8) & 255);
HXDLIN( 117)													if ((this86 == 0)) {
HXLINE( 117)														g24 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														g24 = (( (Float)(this86) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float b25;
HXDLIN( 117)													int this87 = (col2 & 255);
HXDLIN( 117)													if ((this87 == 0)) {
HXLINE( 117)														b25 = ((Float)0.);
            													}
            													else {
HXLINE( 117)														b25 = (( (Float)(this87) ) / ( (Float)(255) ));
            													}
HXDLIN( 117)													Float a34 = (a14 * (( (Float)(1) ) - a24));
HXDLIN( 117)													int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 117)													int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 117)													int b19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b18 * a34) + (b25 * a24))));
HXDLIN( 117)													int a15 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 117)													int blended4 = ((((a15 << 24) | (r7 << 16)) | (g7 << 8)) | b19);
HXDLIN( 117)													{
HXLINE( 117)														int _hx_tmp18;
HXDLIN( 117)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)															_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            														}
            														else {
HXLINE( 117)															_hx_tmp18 = blended4;
            														}
HXDLIN( 117)														::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            													}
            												}
            												else {
HXLINE( 117)													::Dynamic this88 = undoImage6->image;
HXDLIN( 117)													int index11;
HXDLIN( 117)													if (undoImage6->useVirtualPos) {
HXLINE( 117)														index11 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x10) - undoImage6->virtualX));
            													}
            													else {
HXLINE( 117)														index11 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x10)) ));
            													}
HXDLIN( 117)													int _hx_tmp19;
HXDLIN( 117)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)														_hx_tmp19 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            													}
            													else {
HXLINE( 117)														_hx_tmp19 = c9;
            													}
HXDLIN( 117)													::iterMagic::Iimg_obj::set(this88,index11,_hx_tmp19);
            												}
            											}
            											else {
HXLINE( 117)												if (forceClear2) {
HXLINE( 117)													::Dynamic this89 = undoImage6->image;
HXDLIN( 117)													int x11 = (dx3 - rectLeft2);
HXDLIN( 117)													int y10 = (dy3 - rectTop2);
HXDLIN( 117)													int index12;
HXDLIN( 117)													if (undoImage6->useVirtualPos) {
HXLINE( 117)														index12 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x11) - undoImage6->virtualX));
            													}
            													else {
HXLINE( 117)														index12 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage6->width) + x11)) ));
            													}
HXDLIN( 117)													::iterMagic::Iimg_obj::set(this89,index12,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 117)					{
HXLINE( 117)						int _g_min4 = xIter32->start;
HXDLIN( 117)						int _g_max4 = xIter32->max;
HXDLIN( 117)						while((_g_min4 < _g_max4)){
HXLINE( 117)							_g_min4 = (_g_min4 + 1);
HXDLIN( 117)							int px1 = (_g_min4 - 1);
HXDLIN( 117)							Float pcx1 = (( (Float)(px1) ) - x5);
HXDLIN( 117)							{
HXLINE( 117)								int _g_min5 = yIter32->start;
HXDLIN( 117)								int _g_max5 = yIter32->max;
HXDLIN( 117)								while((_g_min5 < _g_max5)){
HXLINE( 117)									_g_min5 = (_g_min5 + 1);
HXDLIN( 117)									int py1 = (_g_min5 - 1);
HXDLIN( 117)									Float pcy1 = (( (Float)(py1) ) - cy2);
HXDLIN( 117)									Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 117)									Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 117)									Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 117)									Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 117)									Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 117)									bool _hx_tmp20;
HXDLIN( 117)									bool _hx_tmp21;
HXDLIN( 117)									if ((ratioA1 >= 0)) {
HXLINE( 117)										_hx_tmp21 = (ratioB1 >= 0);
            									}
            									else {
HXLINE( 117)										_hx_tmp21 = false;
            									}
HXDLIN( 117)									if (_hx_tmp21) {
HXLINE( 117)										_hx_tmp20 = (ratioC1 >= 0);
            									}
            									else {
HXLINE( 117)										_hx_tmp20 = false;
            									}
HXDLIN( 117)									if (_hx_tmp20) {
HXLINE( 117)										int i23 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA1) + (( (Float)(aB1) ) * ratioB1)) + (( (Float)(aC1) ) * ratioC1)));
HXDLIN( 117)										if ((i23 > 255)) {
HXLINE(  24)											i23 = 255;
            										}
HXLINE( 117)										if ((i23 < 0)) {
HXLINE(  25)											i23 = 0;
            										}
HXLINE( 117)										int a16 = i23;
HXDLIN( 117)										int i24 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA1) + (( (Float)(rB1) ) * ratioB1)) + (( (Float)(rC1) ) * ratioC1)));
HXDLIN( 117)										if ((i24 > 255)) {
HXLINE(  24)											i24 = 255;
            										}
HXLINE( 117)										if ((i24 < 0)) {
HXLINE(  25)											i24 = 0;
            										}
HXLINE( 117)										int r8 = i24;
HXDLIN( 117)										int i25 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA1) + (( (Float)(gB1) ) * ratioB1)) + (( (Float)(gC1) ) * ratioC1)));
HXDLIN( 117)										if ((i25 > 255)) {
HXLINE(  24)											i25 = 255;
            										}
HXLINE( 117)										if ((i25 < 0)) {
HXLINE(  25)											i25 = 0;
            										}
HXLINE( 117)										int g8 = i25;
HXDLIN( 117)										int i26 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA1) + (( (Float)(bB1) ) * ratioB1)) + (( (Float)(bC1) ) * ratioC1)));
HXDLIN( 117)										if ((i26 > 255)) {
HXLINE(  24)											i26 = 255;
            										}
HXLINE( 117)										if ((i26 < 0)) {
HXLINE(  25)											i26 = 0;
            										}
HXLINE( 117)										int b20 = i26;
HXDLIN( 117)										{
HXLINE( 117)											int location5;
HXDLIN( 117)											if (this36->useVirtualPos) {
HXLINE( 117)												location5 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this36->virtualY) * ( (Float)(this36->width) )) + px1) - this36->virtualX));
            											}
            											else {
HXLINE( 117)												location5 = ::Std_obj::_hx_int(( (Float)(((py1 * this36->width) + px1)) ));
            											}
HXDLIN( 117)											bool _hx_tmp22;
HXDLIN( 117)											if (this36->transparent) {
HXLINE( 117)												_hx_tmp22 = (a16 < 254);
            											}
            											else {
HXLINE( 117)												_hx_tmp22 = false;
            											}
HXDLIN( 117)											if (_hx_tmp22) {
HXLINE( 117)												int this90 = ::iterMagic::Iimg_obj::get(this36->image,location5);
HXDLIN( 117)												int old1;
HXDLIN( 117)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)													old1 = ((((((this90 >> 24) & 255) << 24) | ((this90 & 255) << 16)) | (((this90 >> 8) & 255) << 8)) | ((this90 >> 16) & 255));
            												}
            												else {
HXLINE( 117)													old1 = this90;
            												}
HXDLIN( 117)												int rhs1 = ((((a16 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN( 117)												Float a17;
HXDLIN( 117)												int this91 = ((old1 >> 24) & 255);
HXDLIN( 117)												if ((this91 == 0)) {
HXLINE( 117)													a17 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													a17 = (( (Float)(this91) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float r15;
HXDLIN( 117)												int this92 = ((old1 >> 16) & 255);
HXDLIN( 117)												if ((this92 == 0)) {
HXLINE( 117)													r15 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													r15 = (( (Float)(this92) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float g15;
HXDLIN( 117)												int this93 = ((old1 >> 8) & 255);
HXDLIN( 117)												if ((this93 == 0)) {
HXLINE( 117)													g15 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													g15 = (( (Float)(this93) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float b110;
HXDLIN( 117)												int this94 = (old1 & 255);
HXDLIN( 117)												if ((this94 == 0)) {
HXLINE( 117)													b110 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													b110 = (( (Float)(this94) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float a25;
HXDLIN( 117)												int this95 = ((rhs1 >> 24) & 255);
HXDLIN( 117)												if ((this95 == 0)) {
HXLINE( 117)													a25 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													a25 = (( (Float)(this95) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float r25;
HXDLIN( 117)												int this96 = ((rhs1 >> 16) & 255);
HXDLIN( 117)												if ((this96 == 0)) {
HXLINE( 117)													r25 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													r25 = (( (Float)(this96) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float g25;
HXDLIN( 117)												int this97 = ((rhs1 >> 8) & 255);
HXDLIN( 117)												if ((this97 == 0)) {
HXLINE( 117)													g25 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													g25 = (( (Float)(this97) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float b26;
HXDLIN( 117)												int this98 = (rhs1 & 255);
HXDLIN( 117)												if ((this98 == 0)) {
HXLINE( 117)													b26 = ((Float)0.);
            												}
            												else {
HXLINE( 117)													b26 = (( (Float)(this98) ) / ( (Float)(255) ));
            												}
HXDLIN( 117)												Float a35 = (a17 * (( (Float)(1) ) - a25));
HXDLIN( 117)												int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 117)												int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 117)												int b27 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a35) + (b26 * a25))));
HXDLIN( 117)												int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 117)												int blended5 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b27);
HXDLIN( 117)												{
HXLINE( 117)													int _hx_tmp23;
HXDLIN( 117)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)														_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            													}
            													else {
HXLINE( 117)														_hx_tmp23 = blended5;
            													}
HXDLIN( 117)													::iterMagic::Iimg_obj::set(this36->image,location5,_hx_tmp23);
            												}
            											}
            											else {
HXLINE( 117)												int value1;
HXDLIN( 117)												if (this36->isLittle) {
HXLINE( 117)													value1 = ((((a16 << 24) | (b20 << 16)) | (g8 << 8)) | r8);
            												}
            												else {
HXLINE( 117)													value1 = ((((a16 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
            												}
HXDLIN( 117)												::iterMagic::Iimg_obj::set(this36->image,location5,value1);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 117)					if ((hasHit2 == false)) {
HXLINE( 117)						 ::pi_xy::algo::HitTri v8 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx1,y,bx1,cy2,x5,cy2,true);
HXDLIN( 117)						if (hasUndo2) {
HXLINE( 117)							v8->undoImage = undoImage6;
HXDLIN( 117)							v8->undoX = xIter32->start;
HXDLIN( 117)							v8->undoY = yIter32->start;
            						}
            					}
            				}
HXDLIN( 117)				if ((hasHit1 == true)) {
HXLINE( 117)					 ::pi_xy::algo::HitQuad v9 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,x5,y,bx1,y,bx1,cy2,x5,cy2,true);
            				}
            			}
            		}
HXDLIN( 117)		Float inlobj_ax = x5;
HXDLIN( 117)		Float inlobj_ay = y;
HXDLIN( 117)		Float inlobj_bx = bx1;
HXDLIN( 117)		Float inlobj_y = y;
HXDLIN( 117)		Float inlobj_cx = bx1;
HXDLIN( 117)		Float inlobj_cy = cy2;
HXDLIN( 117)		Float inlobj_x = x5;
HXDLIN( 117)		Float inlobj_dy = cy2;
HXLINE( 118)		{
HXLINE( 118)			 ::pi_xy::ImageStruct this99 = pixelimage;
HXDLIN( 118)			Float cy3 = (y + dy);
HXDLIN( 118)			Float ry1 = ( (Float)(dy) );
HXDLIN( 118)			{
HXLINE( 118)				 ::Dynamic targetError1 = ((Float)1.05);
HXDLIN( 118)				if (::hx::IsNull( targetError1 )) {
HXLINE( 113)					targetError1 = ((Float)1.05);
            				}
HXLINE( 118)				Float rSmall1;
HXDLIN( 118)				if ((rightRadius > ry1)) {
HXLINE( 118)					rSmall1 = ry1;
            				}
            				else {
HXLINE( 118)					rSmall1 = rightRadius;
            				}
HXDLIN( 118)				 ::Dynamic targetE1 = ( (Float)(targetError1) );
HXDLIN( 118)				if (::hx::IsNull( targetE1 )) {
HXLINE(  20)					targetE1 = ((Float)1.05);
            				}
HXLINE( 118)				int result1 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE1) ) / rSmall1)))));
HXDLIN( 118)				int noSides1;
HXDLIN( 118)				if ((result1 < 12)) {
HXLINE( 118)					noSides1 = 12;
            				}
            				else {
HXLINE( 118)					if ((result1 > 500)) {
HXLINE( 118)						noSides1 = 500;
            					}
            					else {
HXLINE( 118)						noSides1 = result1;
            					}
            				}
HXDLIN( 118)				int sides1 = (::Math_obj::ceil((( (Float)(noSides1) ) / ( (Float)(4) ))) * 4);
HXDLIN( 118)				Float theta1 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides1) ));
HXDLIN( 118)				Float omega1 = ((( (Float)(3) ) * ::Math_obj::PI) / ( (Float)(2) ));
HXDLIN( 118)				int quarter1 = ::Std_obj::_hx_int((( (Float)(sides1) ) / ( (Float)(4) )));
HXDLIN( 118)				Float lastX1 = ((Float)0.);
HXDLIN( 118)				Float lastY1 = ((Float)0.);
HXDLIN( 118)				{
HXLINE(  26)					lastX1 = (farX + (rightRadius * ::Math_obj::cos(((( (Float)(sides1) ) * theta1) + omega1))));
HXLINE(  27)					lastY1 = (cy3 + (ry1 * ::Math_obj::sin(((( (Float)(sides1) ) * theta1) + omega1))));
            				}
HXLINE( 118)				{
HXLINE( 118)					int _g62 = 0;
HXDLIN( 118)					int _g63 = (quarter1 + 1);
HXDLIN( 118)					while((_g62 < _g63)){
HXLINE( 118)						_g62 = (_g62 + 1);
HXDLIN( 118)						int i27 = (_g62 - 1);
HXDLIN( 118)						Float nextX1 = (farX + (rightRadius * ::Math_obj::cos((((( (Float)(i27) ) * theta1) + ((Float)0.0001)) + omega1))));
HXDLIN( 118)						Float nextY1 = (cy3 + (ry1 * ::Math_obj::sin((((( (Float)(i27) ) * theta1) + ((Float)0.0001)) + omega1))));
HXDLIN( 118)						{
HXLINE( 118)							 ::pi_xy::ImageStruct this100 = this99;
HXDLIN( 118)							bool hasHit3 = false;
HXDLIN( 118)							bool hasUndo3 = false;
HXDLIN( 118)							{
HXLINE( 118)								Float bx2 = lastX1;
HXDLIN( 118)								Float by1 = lastY1;
HXDLIN( 118)								Float cx2 = nextX1;
HXDLIN( 118)								Float cy4 = nextY1;
HXDLIN( 118)								bool adjustWinding1 = (((((farX * by1) - (bx2 * cy3)) + ((bx2 * cy4) - (cx2 * by1))) + ((cx2 * cy3) - (farX * cy4))) > 0);
HXDLIN( 118)								if (!(adjustWinding1)) {
HXLINE( 118)									Float bx_1 = bx2;
HXDLIN( 118)									Float by_1 = by1;
HXLINE(  25)									bx2 = cx2;
HXLINE(  26)									by1 = cy4;
HXLINE(  27)									cx2 = bx_1;
HXLINE(  28)									cy4 = by_1;
            								}
HXLINE( 118)								{
HXLINE( 118)									Float s01 = ((cy3 * cx2) - (farX * cy4));
HXDLIN( 118)									Float sx1 = (cy4 - cy3);
HXDLIN( 118)									Float sy1 = (farX - cx2);
HXDLIN( 118)									Float t01 = ((farX * by1) - (cy3 * bx2));
HXDLIN( 118)									Float tx1 = (cy3 - by1);
HXDLIN( 118)									Float ty1 = (bx2 - farX);
HXDLIN( 118)									Float A1 = ((((-(by1) * cx2) + (cy3 * (-(bx2) + cx2))) + (farX * (by1 - cy4))) + (bx2 * cy4));
HXDLIN( 118)									 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 118)									if ((farX > bx2)) {
HXLINE( 118)										if ((farX > cx2)) {
HXLINE( 118)											int min12;
HXDLIN( 118)											if ((bx2 > cx2)) {
HXLINE( 118)												min12 = ::Math_obj::floor(cx2);
            											}
            											else {
HXLINE( 118)												min12 = ::Math_obj::floor(bx2);
            											}
HXDLIN( 118)											int ii_min24 = min12;
HXDLIN( 118)											int ii_max24 = ::Math_obj::ceil(farX);
HXDLIN( 118)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            										}
            										else {
HXLINE( 118)											int ii_min25 = ::Math_obj::floor(bx2);
HXDLIN( 118)											int ii_max25 = ::Math_obj::ceil(cx2);
HXDLIN( 118)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            										}
            									}
            									else {
HXLINE( 118)										if ((bx2 > cx2)) {
HXLINE( 118)											int min13;
HXDLIN( 118)											if ((farX > cx2)) {
HXLINE( 118)												min13 = ::Math_obj::floor(cx2);
            											}
            											else {
HXLINE( 118)												min13 = ::Math_obj::ceil(farX);
            											}
HXDLIN( 118)											int ii_min26 = min13;
HXDLIN( 118)											int ii_max26 = ::Math_obj::ceil(bx2);
HXDLIN( 118)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            										}
            										else {
HXLINE( 118)											int ii_min27 = ::Math_obj::floor(farX);
HXDLIN( 118)											int ii_max27 = ::Math_obj::ceil(cx2);
HXDLIN( 118)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            										}
            									}
HXDLIN( 118)									 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 118)									if ((cy3 > by1)) {
HXLINE( 118)										if ((cy3 > cy4)) {
HXLINE( 118)											int min14;
HXDLIN( 118)											if ((by1 > cy4)) {
HXLINE( 118)												min14 = ::Math_obj::floor(cy4);
            											}
            											else {
HXLINE( 118)												min14 = ::Math_obj::floor(by1);
            											}
HXDLIN( 118)											int ii_min28 = min14;
HXDLIN( 118)											int ii_max28 = ::Math_obj::ceil(cy3);
HXDLIN( 118)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            										}
            										else {
HXLINE( 118)											int ii_min29 = ::Math_obj::floor(by1);
HXDLIN( 118)											int ii_max29 = ::Math_obj::ceil(cy4);
HXDLIN( 118)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            										}
            									}
            									else {
HXLINE( 118)										if ((by1 > cy4)) {
HXLINE( 118)											int min15;
HXDLIN( 118)											if ((cy3 > cy4)) {
HXLINE( 118)												min15 = ::Math_obj::floor(cy4);
            											}
            											else {
HXLINE( 118)												min15 = ::Math_obj::ceil(cy3);
            											}
HXDLIN( 118)											int ii_min30 = min15;
HXDLIN( 118)											int ii_max30 = ::Math_obj::ceil(by1);
HXDLIN( 118)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            										}
            										else {
HXLINE( 118)											int ii_min31 = ::Math_obj::floor(cy3);
HXDLIN( 118)											int ii_max31 = ::Math_obj::ceil(cy4);
HXDLIN( 118)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            										}
            									}
HXDLIN( 118)									 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 118)									if (hasUndo3) {
HXLINE( 118)										int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 118)										int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 118)										 ::Dynamic imageType3 = null();
HXDLIN( 118)										 ::pi_xy::ImageStruct this101 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 118)										if (::hx::IsNull( imageType3 )) {
HXLINE(  54)											imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE( 118)										::Dynamic undoImage10;
HXDLIN( 118)										switch((int)(( (int)(imageType3) ))){
            											case (int)0: {
HXLINE( 118)												 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 118)												 ::iterMagic::BytesImg b28 = byt3;
HXDLIN( 118)												{
HXLINE( 118)													b28->width = width3;
HXDLIN( 118)													b28->height = height3;
HXDLIN( 118)													b28->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 118)													b28->data = ::haxe::io::Bytes_obj::alloc((b28->length * 4));
HXDLIN( 118)													{
HXLINE( 118)														int len6 = b28->length;
HXDLIN( 118)														int w3 = 0;
HXDLIN( 118)														{
HXLINE( 118)															int _g64 = 0;
HXDLIN( 118)															int _g65 = b28->height;
HXDLIN( 118)															while((_g64 < _g65)){
HXLINE( 118)																_g64 = (_g64 + 1);
HXDLIN( 118)																int y11 = (_g64 - 1);
HXDLIN( 118)																{
HXLINE( 118)																	int _g66 = 0;
HXDLIN( 118)																	int _g67 = b28->width;
HXDLIN( 118)																	while((_g66 < _g67)){
HXLINE( 118)																		_g66 = (_g66 + 1);
HXDLIN( 118)																		int x12 = (_g66 - 1);
HXDLIN( 118)																		{
HXLINE( 118)																			w3 = (w3 + 1);
HXDLIN( 118)																			b28->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN( 118)																		{
HXLINE( 118)																			w3 = (w3 + 1);
HXDLIN( 118)																			b28->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN( 118)																		{
HXLINE( 118)																			w3 = (w3 + 1);
HXDLIN( 118)																			b28->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN( 118)																		{
HXLINE( 118)																			w3 = (w3 + 1);
HXDLIN( 118)																			b28->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN( 118)												undoImage10 = b28;
            											}
            											break;
            											case (int)1: {
HXLINE( 118)												 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 118)												 ::iterMagic::ArrIntImg a19 = arrI3;
HXDLIN( 118)												{
HXLINE( 118)													a19->width = width3;
HXDLIN( 118)													a19->height = height3;
HXDLIN( 118)													a19->data = ::Array_obj< int >::__new(0);
HXDLIN( 118)													a19->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 118)													{
HXLINE( 118)														int _g68 = 0;
HXDLIN( 118)														int _g69 = a19->length;
HXDLIN( 118)														while((_g68 < _g69)){
HXLINE( 118)															_g68 = (_g68 + 1);
HXDLIN( 118)															int i28 = (_g68 - 1);
HXDLIN( 118)															a19->data[i28] = 0;
            														}
            													}
            												}
HXDLIN( 118)												undoImage10 = a19;
            											}
            											break;
            											case (int)2: {
HXLINE( 118)												 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 118)												 ::iterMagic::U32ArrImg b29 = u32a3;
HXDLIN( 118)												{
HXLINE( 118)													b29->width = width3;
HXDLIN( 118)													b29->height = height3;
HXDLIN( 118)													b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 118)													int size3 = (b29->length * 4);
HXDLIN( 118)													b29->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 118)													{
HXLINE( 118)														int _g70 = 0;
HXDLIN( 118)														int _g71 = b29->length;
HXDLIN( 118)														while((_g70 < _g71)){
HXLINE( 118)															_g70 = (_g70 + 1);
HXDLIN( 118)															int i29 = (_g70 - 1);
HXDLIN( 118)															{
HXLINE( 118)																 ::haxe::io::ArrayBufferViewImpl this102 = b29->data;
HXDLIN( 118)																bool undoImage11;
HXDLIN( 118)																if ((i29 >= 0)) {
HXLINE( 118)																	undoImage11 = (i29 < (this102->byteLength >> 2));
            																}
            																else {
HXLINE( 118)																	undoImage11 = false;
            																}
HXDLIN( 118)																if (undoImage11) {
HXLINE( 118)																	 ::haxe::io::Bytes _this3 = this102->bytes;
HXDLIN( 118)																	int pos3 = ((i29 << 2) + this102->byteOffset);
HXDLIN( 118)																	_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 118)																	_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 118)																	_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 118)																	_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN( 118)												undoImage10 = b29;
            											}
            											break;
            											case (int)3: {
HXLINE( 118)												 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 118)												 ::iterMagic::VecIntImg v10 = vec3;
HXDLIN( 118)												{
HXLINE( 118)													v10->width = width3;
HXDLIN( 118)													v10->height = height3;
HXDLIN( 118)													v10->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 118)													v10->data = ::Array_obj< int >::__new(v10->length);
HXDLIN( 118)													{
HXLINE( 118)														int _g72 = 0;
HXDLIN( 118)														int _g73 = v10->length;
HXDLIN( 118)														while((_g72 < _g73)){
HXLINE( 118)															_g72 = (_g72 + 1);
HXDLIN( 118)															int i30 = (_g72 - 1);
HXDLIN( 118)															v10->data->__unsafe_set(i30,0);
            														}
            													}
            												}
HXDLIN( 118)												undoImage10 = v10;
            											}
            											break;
            											case (int)4: {
HXLINE( 118)												 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 118)												 ::iterMagic::StackIntImg b30 = sInt3;
HXDLIN( 118)												{
HXLINE( 118)													b30->width = width3;
HXDLIN( 118)													b30->height = height3;
HXDLIN( 118)													b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 118)													b30->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 118)													{
HXLINE( 118)														int len7 = b30->length;
HXDLIN( 118)														 ::haxe::ds::GenericStack_Int d3 = b30->data;
HXDLIN( 118)														if (::hx::IsNull( d3->head )) {
HXLINE( 118)															int _g74 = 0;
HXDLIN( 118)															int _g75 = len7;
HXDLIN( 118)															while((_g74 < _g75)){
HXLINE( 118)																_g74 = (_g74 + 1);
HXDLIN( 118)																int i31 = (_g74 - 1);
HXDLIN( 118)																d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            															}
            														}
            														else {
HXLINE( 118)															int _g76 = 0;
HXDLIN( 118)															int _g77 = len7;
HXDLIN( 118)															while((_g76 < _g77)){
HXLINE( 118)																_g76 = (_g76 + 1);
HXDLIN( 118)																int i32 = (_g76 - 1);
HXDLIN( 118)																{
HXLINE( 118)																	 ::haxe::ds::GenericCell_Int l3 = b30->data->head;
HXDLIN( 118)																	 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 118)																	{
HXLINE( 118)																		int _g78 = 0;
HXDLIN( 118)																		int _g79 = i32;
HXDLIN( 118)																		while((_g78 < _g79)){
HXLINE( 118)																			_g78 = (_g78 + 1);
HXDLIN( 118)																			int i33 = (_g78 - 1);
HXLINE( 345)																			prev3 = l3;
HXLINE( 346)																			l3 = l3->next;
            																		}
            																	}
HXLINE( 118)																	if (::hx::IsNull( prev3 )) {
HXLINE( 118)																		b30->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 118)																		l3 = null();
            																	}
            																	else {
HXLINE( 118)																		prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 118)																		l3 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN( 118)												undoImage10 = b30;
            											}
            											break;
            										}
HXDLIN( 118)										this101->image = undoImage10;
HXDLIN( 118)										this101->width = width3;
HXDLIN( 118)										this101->height = height3;
HXDLIN( 118)										this101->imageType = ( (int)(imageType3) );
HXDLIN( 118)										undoImage9 = this101;
HXDLIN( 118)										{
HXLINE( 118)											int rectLeft3 = xIter33->start;
HXDLIN( 118)											int rectTop3 = yIter33->start;
HXDLIN( 118)											int rectRight3 = xIter33->max;
HXDLIN( 118)											bool forceClear3 = false;
HXDLIN( 118)											{
HXLINE( 118)												int _g80 = rectTop3;
HXDLIN( 118)												int _g81 = yIter33->max;
HXDLIN( 118)												while((_g80 < _g81)){
HXLINE( 118)													_g80 = (_g80 + 1);
HXDLIN( 118)													int dy4 = (_g80 - 1);
HXDLIN( 118)													{
HXLINE( 118)														int _g82 = rectLeft3;
HXDLIN( 118)														int _g83 = rectRight3;
HXDLIN( 118)														while((_g82 < _g83)){
HXLINE( 118)															_g82 = (_g82 + 1);
HXDLIN( 118)															int dx4 = (_g82 - 1);
HXDLIN( 118)															::Dynamic this103 = this100->image;
HXDLIN( 118)															int index13;
HXDLIN( 118)															if (this100->useVirtualPos) {
HXLINE( 118)																index13 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this100->virtualY) * ( (Float)(this100->width) )) + dx4) - this100->virtualX));
            															}
            															else {
HXLINE( 118)																index13 = ::Std_obj::_hx_int(( (Float)(((dy4 * this100->width) + dx4)) ));
            															}
HXDLIN( 118)															int c10 = ::iterMagic::Iimg_obj::get(this103,index13);
HXDLIN( 118)															int col3;
HXDLIN( 118)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 118)																col3 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            															}
            															else {
HXLINE( 118)																col3 = c10;
            															}
HXDLIN( 118)															bool _hx_tmp24;
HXDLIN( 118)															if (this100->useMask) {
HXLINE( 118)																_hx_tmp24 = ::hx::IsNotNull( this100->mask );
            															}
            															else {
HXLINE( 118)																_hx_tmp24 = false;
            															}
HXDLIN( 118)															if (_hx_tmp24) {
HXLINE( 118)																 ::pi_xy::ImageStruct this104 = this100->mask;
HXDLIN( 118)																::Dynamic this105 = this104->image;
HXDLIN( 118)																int index14;
HXDLIN( 118)																if (this104->useVirtualPos) {
HXLINE( 118)																	index14 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this104->virtualY) * ( (Float)(this104->width) )) + dx4) - this104->virtualX));
            																}
            																else {
HXLINE( 118)																	index14 = ::Std_obj::_hx_int(( (Float)(((dy4 * this104->width) + dx4)) ));
            																}
HXDLIN( 118)																int c11 = ::iterMagic::Iimg_obj::get(this105,index14);
HXDLIN( 118)																int v11;
HXDLIN( 118)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 118)																	v11 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            																}
            																else {
HXLINE( 118)																	v11 = c11;
            																}
HXDLIN( 118)																int maskPixel3 = v11;
HXDLIN( 118)																int this106 = col3;
HXDLIN( 118)																if ((maskPixel3 == 0)) {
HXLINE( 118)																	col3 = this106;
            																}
            																else {
HXLINE( 118)																	Float m03;
HXDLIN( 118)																	int this107 = ((maskPixel3 >> 24) & 255);
HXDLIN( 118)																	if ((this107 == 0)) {
HXLINE( 118)																		m03 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		m03 = (( (Float)(this107) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float m13;
HXDLIN( 118)																	int this108 = ((maskPixel3 >> 16) & 255);
HXDLIN( 118)																	if ((this108 == 0)) {
HXLINE( 118)																		m13 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		m13 = (( (Float)(this108) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float m23;
HXDLIN( 118)																	int this109 = ((maskPixel3 >> 8) & 255);
HXDLIN( 118)																	if ((this109 == 0)) {
HXLINE( 118)																		m23 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		m23 = (( (Float)(this109) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float m33;
HXDLIN( 118)																	int this110 = (maskPixel3 & 255);
HXDLIN( 118)																	if ((this110 == 0)) {
HXLINE( 118)																		m33 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		m33 = (( (Float)(this110) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this106 >> 24) & 255)) )));
HXDLIN( 118)																	int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this106 >> 16) & 255)) )));
HXDLIN( 118)																	int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this106 >> 8) & 255)) )));
HXDLIN( 118)																	int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this106 & 255)) )));
HXDLIN( 118)																	col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN( 118)															if ((col3 != 0)) {
HXLINE( 118)																int x13 = (dx4 - rectLeft3);
HXDLIN( 118)																int y12 = (dy4 - rectTop3);
HXDLIN( 118)																int c12 = col3;
HXDLIN( 118)																bool _hx_tmp25;
HXDLIN( 118)																if ((((c12 >> 24) & 255) < 254)) {
HXLINE( 118)																	_hx_tmp25 = undoImage9->transparent;
            																}
            																else {
HXLINE( 118)																	_hx_tmp25 = false;
            																}
HXDLIN( 118)																if (_hx_tmp25) {
HXLINE( 118)																	int location6;
HXDLIN( 118)																	if (undoImage9->useVirtualPos) {
HXLINE( 118)																		location6 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x13) - undoImage9->virtualX));
            																	}
            																	else {
HXLINE( 118)																		location6 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage9->width) + x13)) ));
            																	}
HXDLIN( 118)																	int this111 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 118)																	int this112;
HXDLIN( 118)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 118)																		this112 = ((((((this111 >> 24) & 255) << 24) | ((this111 & 255) << 16)) | (((this111 >> 8) & 255) << 8)) | ((this111 >> 16) & 255));
            																	}
            																	else {
HXLINE( 118)																		this112 = this111;
            																	}
HXDLIN( 118)																	Float a110;
HXDLIN( 118)																	int this113 = ((this112 >> 24) & 255);
HXDLIN( 118)																	if ((this113 == 0)) {
HXLINE( 118)																		a110 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		a110 = (( (Float)(this113) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float r16;
HXDLIN( 118)																	int this114 = ((this112 >> 16) & 255);
HXDLIN( 118)																	if ((this114 == 0)) {
HXLINE( 118)																		r16 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		r16 = (( (Float)(this114) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float g16;
HXDLIN( 118)																	int this115 = ((this112 >> 8) & 255);
HXDLIN( 118)																	if ((this115 == 0)) {
HXLINE( 118)																		g16 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		g16 = (( (Float)(this115) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float b111;
HXDLIN( 118)																	int this116 = (this112 & 255);
HXDLIN( 118)																	if ((this116 == 0)) {
HXLINE( 118)																		b111 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		b111 = (( (Float)(this116) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float a26;
HXDLIN( 118)																	int this117 = ((col3 >> 24) & 255);
HXDLIN( 118)																	if ((this117 == 0)) {
HXLINE( 118)																		a26 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		a26 = (( (Float)(this117) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float r26;
HXDLIN( 118)																	int this118 = ((col3 >> 16) & 255);
HXDLIN( 118)																	if ((this118 == 0)) {
HXLINE( 118)																		r26 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		r26 = (( (Float)(this118) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float g26;
HXDLIN( 118)																	int this119 = ((col3 >> 8) & 255);
HXDLIN( 118)																	if ((this119 == 0)) {
HXLINE( 118)																		g26 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		g26 = (( (Float)(this119) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float b210;
HXDLIN( 118)																	int this120 = (col3 & 255);
HXDLIN( 118)																	if ((this120 == 0)) {
HXLINE( 118)																		b210 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		b210 = (( (Float)(this120) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float a36 = (a110 * (( (Float)(1) ) - a26));
HXDLIN( 118)																	int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN( 118)																	int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN( 118)																	int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a36) + (b210 * a26))));
HXDLIN( 118)																	int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN( 118)																	int blended6 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b31);
HXDLIN( 118)																	{
HXLINE( 118)																		int _hx_tmp26;
HXDLIN( 118)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 118)																			_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            																		}
            																		else {
HXLINE( 118)																			_hx_tmp26 = blended6;
            																		}
HXDLIN( 118)																		::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            																	}
            																}
            																else {
HXLINE( 118)																	::Dynamic this121 = undoImage9->image;
HXDLIN( 118)																	int index15;
HXDLIN( 118)																	if (undoImage9->useVirtualPos) {
HXLINE( 118)																		index15 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x13) - undoImage9->virtualX));
            																	}
            																	else {
HXLINE( 118)																		index15 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage9->width) + x13)) ));
            																	}
HXDLIN( 118)																	int _hx_tmp27;
HXDLIN( 118)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 118)																		_hx_tmp27 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            																	}
            																	else {
HXLINE( 118)																		_hx_tmp27 = c12;
            																	}
HXDLIN( 118)																	::iterMagic::Iimg_obj::set(this121,index15,_hx_tmp27);
            																}
            															}
            															else {
HXLINE( 118)																if (forceClear3) {
HXLINE( 118)																	::Dynamic this122 = undoImage9->image;
HXDLIN( 118)																	int x14 = (dx4 - rectLeft3);
HXDLIN( 118)																	int y13 = (dy4 - rectTop3);
HXDLIN( 118)																	int index16;
HXDLIN( 118)																	if (undoImage9->useVirtualPos) {
HXLINE( 118)																		index16 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x14) - undoImage9->virtualX));
            																	}
            																	else {
HXLINE( 118)																		index16 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage9->width) + x14)) ));
            																	}
HXDLIN( 118)																	::iterMagic::Iimg_obj::set(this122,index16,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 118)									bool found1 = false;
HXDLIN( 118)									Float s1 = ((Float)0.);
HXDLIN( 118)									Float t1 = ((Float)0.);
HXDLIN( 118)									Float sxx1 = ((Float)0.);
HXDLIN( 118)									Float txx1 = ((Float)0.);
HXDLIN( 118)									{
HXLINE( 118)										int _g_min6 = xIter33->start;
HXDLIN( 118)										int _g_max6 = xIter33->max;
HXDLIN( 118)										while((_g_min6 < _g_max6)){
HXLINE( 118)											_g_min6 = (_g_min6 + 1);
HXDLIN( 118)											int x15 = (_g_min6 - 1);
HXLINE(  60)											sxx1 = (sx1 * ( (Float)(x15) ));
HXLINE(  61)											txx1 = (tx1 * ( (Float)(x15) ));
HXLINE(  62)											found1 = false;
HXLINE( 118)											{
HXLINE( 118)												int _g_min7 = yIter33->start;
HXDLIN( 118)												int _g_max7 = yIter33->max;
HXDLIN( 118)												while((_g_min7 < _g_max7)){
HXLINE( 118)													_g_min7 = (_g_min7 + 1);
HXDLIN( 118)													int y14 = (_g_min7 - 1);
HXLINE(  64)													s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y14) )));
HXLINE(  65)													t1 = ((t01 + txx1) + (ty1 * ( (Float)(y14) )));
HXLINE( 118)													bool _hx_tmp28;
HXDLIN( 118)													if (!((s1 <= 0))) {
HXLINE( 118)														_hx_tmp28 = (t1 <= 0);
            													}
            													else {
HXLINE( 118)														_hx_tmp28 = true;
            													}
HXDLIN( 118)													if (_hx_tmp28) {
HXLINE( 118)														if (found1) {
HXLINE( 118)															goto _hx_goto_230;
            														}
            													}
            													else {
HXLINE( 118)														if (((s1 + t1) < A1)) {
HXLINE( 118)															{
HXLINE( 118)																int c13 = colorB;
HXDLIN( 118)																bool _hx_tmp29;
HXDLIN( 118)																if ((((c13 >> 24) & 255) < 254)) {
HXLINE( 118)																	_hx_tmp29 = this100->transparent;
            																}
            																else {
HXLINE( 118)																	_hx_tmp29 = false;
            																}
HXDLIN( 118)																if (_hx_tmp29) {
HXLINE( 118)																	int location7;
HXDLIN( 118)																	if (this100->useVirtualPos) {
HXLINE( 118)																		location7 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - this100->virtualY) * ( (Float)(this100->width) )) + x15) - this100->virtualX));
            																	}
            																	else {
HXLINE( 118)																		location7 = ::Std_obj::_hx_int(( (Float)(((y14 * this100->width) + x15)) ));
            																	}
HXDLIN( 118)																	int this123 = ::iterMagic::Iimg_obj::get(this100->image,location7);
HXDLIN( 118)																	int this124;
HXDLIN( 118)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 118)																		this124 = ((((((this123 >> 24) & 255) << 24) | ((this123 & 255) << 16)) | (((this123 >> 8) & 255) << 8)) | ((this123 >> 16) & 255));
            																	}
            																	else {
HXLINE( 118)																		this124 = this123;
            																	}
HXDLIN( 118)																	Float a111;
HXDLIN( 118)																	int this125 = ((this124 >> 24) & 255);
HXDLIN( 118)																	if ((this125 == 0)) {
HXLINE( 118)																		a111 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		a111 = (( (Float)(this125) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float r17;
HXDLIN( 118)																	int this126 = ((this124 >> 16) & 255);
HXDLIN( 118)																	if ((this126 == 0)) {
HXLINE( 118)																		r17 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		r17 = (( (Float)(this126) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float g17;
HXDLIN( 118)																	int this127 = ((this124 >> 8) & 255);
HXDLIN( 118)																	if ((this127 == 0)) {
HXLINE( 118)																		g17 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		g17 = (( (Float)(this127) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float b112;
HXDLIN( 118)																	int this128 = (this124 & 255);
HXDLIN( 118)																	if ((this128 == 0)) {
HXLINE( 118)																		b112 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		b112 = (( (Float)(this128) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float a27;
HXDLIN( 118)																	int this129 = ((colorB >> 24) & 255);
HXDLIN( 118)																	if ((this129 == 0)) {
HXLINE( 118)																		a27 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		a27 = (( (Float)(this129) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float r27;
HXDLIN( 118)																	int this130 = ((colorB >> 16) & 255);
HXDLIN( 118)																	if ((this130 == 0)) {
HXLINE( 118)																		r27 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		r27 = (( (Float)(this130) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float g27;
HXDLIN( 118)																	int this131 = ((colorB >> 8) & 255);
HXDLIN( 118)																	if ((this131 == 0)) {
HXLINE( 118)																		g27 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		g27 = (( (Float)(this131) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float b211;
HXDLIN( 118)																	int this132 = (colorB & 255);
HXDLIN( 118)																	if ((this132 == 0)) {
HXLINE( 118)																		b211 = ((Float)0.);
            																	}
            																	else {
HXLINE( 118)																		b211 = (( (Float)(this132) ) / ( (Float)(255) ));
            																	}
HXDLIN( 118)																	Float a37 = (a111 * (( (Float)(1) ) - a27));
HXDLIN( 118)																	int r18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN( 118)																	int g18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN( 118)																	int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a37) + (b211 * a27))));
HXDLIN( 118)																	int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN( 118)																	int blended7 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b32);
HXDLIN( 118)																	{
HXLINE( 118)																		int _hx_tmp30;
HXDLIN( 118)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 118)																			_hx_tmp30 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            																		}
            																		else {
HXLINE( 118)																			_hx_tmp30 = blended7;
            																		}
HXDLIN( 118)																		::iterMagic::Iimg_obj::set(this100->image,location7,_hx_tmp30);
            																	}
            																}
            																else {
HXLINE( 118)																	::Dynamic this133 = this100->image;
HXDLIN( 118)																	int index17;
HXDLIN( 118)																	if (this100->useVirtualPos) {
HXLINE( 118)																		index17 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - this100->virtualY) * ( (Float)(this100->width) )) + x15) - this100->virtualX));
            																	}
            																	else {
HXLINE( 118)																		index17 = ::Std_obj::_hx_int(( (Float)(((y14 * this100->width) + x15)) ));
            																	}
HXDLIN( 118)																	int _hx_tmp31;
HXDLIN( 118)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 118)																		_hx_tmp31 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            																	}
            																	else {
HXLINE( 118)																		_hx_tmp31 = c13;
            																	}
HXDLIN( 118)																	::iterMagic::Iimg_obj::set(this133,index17,_hx_tmp31);
            																}
            															}
HXLINE(  73)															found1 = true;
            														}
            														else {
HXLINE( 118)															if (found1) {
HXLINE( 118)																goto _hx_goto_230;
            															}
            														}
            													}
            												}
            												_hx_goto_230:;
            											}
            										}
            									}
HXDLIN( 118)									if ((hasHit3 == true)) {
HXLINE( 118)										 ::pi_xy::algo::HitTri v12 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX,cy3,bx2,by1,cx2,cy4,true);
HXDLIN( 118)										if (hasUndo3) {
HXLINE( 118)											v12->undoImage = undoImage9;
HXDLIN( 118)											v12->undoX = xIter33->start;
HXDLIN( 118)											v12->undoY = yIter33->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  46)						lastX1 = nextX1;
HXLINE(  47)						lastY1 = nextY1;
            					}
            				}
            			}
            		}
HXLINE( 120)		 ::pi_xy::ImageStruct this134 = pixelimage;
HXDLIN( 120)		Float y15 = (y + dy);
HXDLIN( 120)		Float bx3 = (x + ( (Float)(dx) ));
HXDLIN( 120)		Float cy5 = (y15 + ( (Float)(tall) ));
HXDLIN( 120)		{
HXLINE( 120)			bool hasHit4 = true;
HXDLIN( 120)			{
HXLINE( 120)				{
HXLINE( 120)					bool hasUndo4 = false;
HXDLIN( 120)					int aA2 = ((colorA >> 24) & 255);
HXDLIN( 120)					int rA2 = ((colorA >> 16) & 255);
HXDLIN( 120)					int gA2 = ((colorA >> 8) & 255);
HXDLIN( 120)					int bA2 = (colorA & 255);
HXDLIN( 120)					int aB2 = ((colorA >> 24) & 255);
HXDLIN( 120)					int rB2 = ((colorA >> 16) & 255);
HXDLIN( 120)					int gB2 = ((colorA >> 8) & 255);
HXDLIN( 120)					int bB2 = (colorA & 255);
HXDLIN( 120)					int aC2 = ((colorD >> 24) & 255);
HXDLIN( 120)					int rC2 = ((colorD >> 16) & 255);
HXDLIN( 120)					int gC2 = ((colorD >> 8) & 255);
HXDLIN( 120)					int bC2 = (colorD & 255);
HXDLIN( 120)					Float bcx2 = (bx3 - x);
HXDLIN( 120)					Float bcy2 = (y15 - cy5);
HXDLIN( 120)					Float acx2 = (x - x);
HXDLIN( 120)					Float acy2 = (y15 - cy5);
HXDLIN( 120)					Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 120)					Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 120)					Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 120)					Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 120)					 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN( 120)					if ((x > bx3)) {
HXLINE( 120)						if ((x > x)) {
HXLINE( 120)							int min16;
HXDLIN( 120)							if ((bx3 > x)) {
HXLINE( 120)								min16 = ::Math_obj::floor(x);
            							}
            							else {
HXLINE( 120)								min16 = ::Math_obj::floor(bx3);
            							}
HXDLIN( 120)							int ii_min32 = min16;
HXDLIN( 120)							int ii_max32 = ::Math_obj::ceil(x);
HXDLIN( 120)							xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            						}
            						else {
HXLINE( 120)							int ii_min33 = ::Math_obj::floor(bx3);
HXDLIN( 120)							int ii_max33 = ::Math_obj::ceil(x);
HXDLIN( 120)							xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            						}
            					}
            					else {
HXLINE( 120)						if ((bx3 > x)) {
HXLINE( 120)							int min17;
HXDLIN( 120)							if ((x > x)) {
HXLINE( 120)								min17 = ::Math_obj::floor(x);
            							}
            							else {
HXLINE( 120)								min17 = ::Math_obj::ceil(x);
            							}
HXDLIN( 120)							int ii_min34 = min17;
HXDLIN( 120)							int ii_max34 = ::Math_obj::ceil(bx3);
HXDLIN( 120)							xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            						}
            						else {
HXLINE( 120)							int ii_min35 = ::Math_obj::floor(x);
HXDLIN( 120)							int ii_max35 = ::Math_obj::ceil(x);
HXDLIN( 120)							xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            						}
            					}
HXDLIN( 120)					 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN( 120)					if ((y15 > y15)) {
HXLINE( 120)						if ((y15 > cy5)) {
HXLINE( 120)							int min18;
HXDLIN( 120)							if ((y15 > cy5)) {
HXLINE( 120)								min18 = ::Math_obj::floor(cy5);
            							}
            							else {
HXLINE( 120)								min18 = ::Math_obj::floor(y15);
            							}
HXDLIN( 120)							int ii_min36 = min18;
HXDLIN( 120)							int ii_max36 = ::Math_obj::ceil(y15);
HXDLIN( 120)							yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            						}
            						else {
HXLINE( 120)							int ii_min37 = ::Math_obj::floor(y15);
HXDLIN( 120)							int ii_max37 = ::Math_obj::ceil(cy5);
HXDLIN( 120)							yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            						}
            					}
            					else {
HXLINE( 120)						if ((y15 > cy5)) {
HXLINE( 120)							int min19;
HXDLIN( 120)							if ((y15 > cy5)) {
HXLINE( 120)								min19 = ::Math_obj::floor(cy5);
            							}
            							else {
HXLINE( 120)								min19 = ::Math_obj::ceil(y15);
            							}
HXDLIN( 120)							int ii_min38 = min19;
HXDLIN( 120)							int ii_max38 = ::Math_obj::ceil(y15);
HXDLIN( 120)							yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            						}
            						else {
HXLINE( 120)							int ii_min39 = ::Math_obj::floor(y15);
HXDLIN( 120)							int ii_max39 = ::Math_obj::ceil(cy5);
HXDLIN( 120)							yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            						}
            					}
HXDLIN( 120)					 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN( 120)					if (hasUndo4) {
HXLINE( 120)						int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN( 120)						int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN( 120)						 ::Dynamic imageType4 = null();
HXDLIN( 120)						 ::pi_xy::ImageStruct this135 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 120)						if (::hx::IsNull( imageType4 )) {
HXLINE(  54)							imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 120)						::Dynamic undoImage13;
HXDLIN( 120)						switch((int)(( (int)(imageType4) ))){
            							case (int)0: {
HXLINE( 120)								 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 120)								 ::iterMagic::BytesImg b33 = byt4;
HXDLIN( 120)								{
HXLINE( 120)									b33->width = width4;
HXDLIN( 120)									b33->height = height4;
HXDLIN( 120)									b33->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 120)									b33->data = ::haxe::io::Bytes_obj::alloc((b33->length * 4));
HXDLIN( 120)									{
HXLINE( 120)										int len8 = b33->length;
HXDLIN( 120)										int w4 = 0;
HXDLIN( 120)										{
HXLINE( 120)											int _g84 = 0;
HXDLIN( 120)											int _g85 = b33->height;
HXDLIN( 120)											while((_g84 < _g85)){
HXLINE( 120)												_g84 = (_g84 + 1);
HXDLIN( 120)												int y16 = (_g84 - 1);
HXDLIN( 120)												{
HXLINE( 120)													int _g86 = 0;
HXDLIN( 120)													int _g87 = b33->width;
HXDLIN( 120)													while((_g86 < _g87)){
HXLINE( 120)														_g86 = (_g86 + 1);
HXDLIN( 120)														int x16 = (_g86 - 1);
HXDLIN( 120)														{
HXLINE( 120)															w4 = (w4 + 1);
HXDLIN( 120)															b33->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 120)														{
HXLINE( 120)															w4 = (w4 + 1);
HXDLIN( 120)															b33->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 120)														{
HXLINE( 120)															w4 = (w4 + 1);
HXDLIN( 120)															b33->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 120)														{
HXLINE( 120)															w4 = (w4 + 1);
HXDLIN( 120)															b33->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 120)								undoImage13 = b33;
            							}
            							break;
            							case (int)1: {
HXLINE( 120)								 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 120)								 ::iterMagic::ArrIntImg a29 = arrI4;
HXDLIN( 120)								{
HXLINE( 120)									a29->width = width4;
HXDLIN( 120)									a29->height = height4;
HXDLIN( 120)									a29->data = ::Array_obj< int >::__new(0);
HXDLIN( 120)									a29->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 120)									{
HXLINE( 120)										int _g88 = 0;
HXDLIN( 120)										int _g89 = a29->length;
HXDLIN( 120)										while((_g88 < _g89)){
HXLINE( 120)											_g88 = (_g88 + 1);
HXDLIN( 120)											int i34 = (_g88 - 1);
HXDLIN( 120)											a29->data[i34] = 0;
            										}
            									}
            								}
HXDLIN( 120)								undoImage13 = a29;
            							}
            							break;
            							case (int)2: {
HXLINE( 120)								 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 120)								 ::iterMagic::U32ArrImg b34 = u32a4;
HXDLIN( 120)								{
HXLINE( 120)									b34->width = width4;
HXDLIN( 120)									b34->height = height4;
HXDLIN( 120)									b34->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 120)									int size4 = (b34->length * 4);
HXDLIN( 120)									b34->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN( 120)									{
HXLINE( 120)										int _g90 = 0;
HXDLIN( 120)										int _g91 = b34->length;
HXDLIN( 120)										while((_g90 < _g91)){
HXLINE( 120)											_g90 = (_g90 + 1);
HXDLIN( 120)											int i35 = (_g90 - 1);
HXDLIN( 120)											{
HXLINE( 120)												 ::haxe::io::ArrayBufferViewImpl this136 = b34->data;
HXDLIN( 120)												bool undoImage14;
HXDLIN( 120)												if ((i35 >= 0)) {
HXLINE( 120)													undoImage14 = (i35 < (this136->byteLength >> 2));
            												}
            												else {
HXLINE( 120)													undoImage14 = false;
            												}
HXDLIN( 120)												if (undoImage14) {
HXLINE( 120)													 ::haxe::io::Bytes _this4 = this136->bytes;
HXDLIN( 120)													int pos4 = ((i35 << 2) + this136->byteOffset);
HXDLIN( 120)													_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN( 120)													_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN( 120)													_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN( 120)													_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 120)								undoImage13 = b34;
            							}
            							break;
            							case (int)3: {
HXLINE( 120)								 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 120)								 ::iterMagic::VecIntImg v13 = vec4;
HXDLIN( 120)								{
HXLINE( 120)									v13->width = width4;
HXDLIN( 120)									v13->height = height4;
HXDLIN( 120)									v13->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 120)									v13->data = ::Array_obj< int >::__new(v13->length);
HXDLIN( 120)									{
HXLINE( 120)										int _g92 = 0;
HXDLIN( 120)										int _g93 = v13->length;
HXDLIN( 120)										while((_g92 < _g93)){
HXLINE( 120)											_g92 = (_g92 + 1);
HXDLIN( 120)											int i36 = (_g92 - 1);
HXDLIN( 120)											v13->data->__unsafe_set(i36,0);
            										}
            									}
            								}
HXDLIN( 120)								undoImage13 = v13;
            							}
            							break;
            							case (int)4: {
HXLINE( 120)								 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 120)								 ::iterMagic::StackIntImg b35 = sInt4;
HXDLIN( 120)								{
HXLINE( 120)									b35->width = width4;
HXDLIN( 120)									b35->height = height4;
HXDLIN( 120)									b35->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 120)									b35->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 120)									{
HXLINE( 120)										int len9 = b35->length;
HXDLIN( 120)										 ::haxe::ds::GenericStack_Int d4 = b35->data;
HXDLIN( 120)										if (::hx::IsNull( d4->head )) {
HXLINE( 120)											int _g94 = 0;
HXDLIN( 120)											int _g95 = len9;
HXDLIN( 120)											while((_g94 < _g95)){
HXLINE( 120)												_g94 = (_g94 + 1);
HXDLIN( 120)												int i37 = (_g94 - 1);
HXDLIN( 120)												d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            											}
            										}
            										else {
HXLINE( 120)											int _g96 = 0;
HXDLIN( 120)											int _g97 = len9;
HXDLIN( 120)											while((_g96 < _g97)){
HXLINE( 120)												_g96 = (_g96 + 1);
HXDLIN( 120)												int i38 = (_g96 - 1);
HXDLIN( 120)												{
HXLINE( 120)													 ::haxe::ds::GenericCell_Int l4 = b35->data->head;
HXDLIN( 120)													 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN( 120)													{
HXLINE( 120)														int _g98 = 0;
HXDLIN( 120)														int _g99 = i38;
HXDLIN( 120)														while((_g98 < _g99)){
HXLINE( 120)															_g98 = (_g98 + 1);
HXDLIN( 120)															int i39 = (_g98 - 1);
HXLINE( 345)															prev4 = l4;
HXLINE( 346)															l4 = l4->next;
            														}
            													}
HXLINE( 120)													if (::hx::IsNull( prev4 )) {
HXLINE( 120)														b35->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 120)														l4 = null();
            													}
            													else {
HXLINE( 120)														prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 120)														l4 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 120)								undoImage13 = b35;
            							}
            							break;
            						}
HXDLIN( 120)						this135->image = undoImage13;
HXDLIN( 120)						this135->width = width4;
HXDLIN( 120)						this135->height = height4;
HXDLIN( 120)						this135->imageType = ( (int)(imageType4) );
HXDLIN( 120)						undoImage12 = this135;
HXDLIN( 120)						{
HXLINE( 120)							int rectLeft4 = xIter34->start;
HXDLIN( 120)							int rectTop4 = yIter34->start;
HXDLIN( 120)							int rectRight4 = xIter34->max;
HXDLIN( 120)							bool forceClear4 = false;
HXDLIN( 120)							{
HXLINE( 120)								int _g100 = rectTop4;
HXDLIN( 120)								int _g101 = yIter34->max;
HXDLIN( 120)								while((_g100 < _g101)){
HXLINE( 120)									_g100 = (_g100 + 1);
HXDLIN( 120)									int dy5 = (_g100 - 1);
HXDLIN( 120)									{
HXLINE( 120)										int _g102 = rectLeft4;
HXDLIN( 120)										int _g103 = rectRight4;
HXDLIN( 120)										while((_g102 < _g103)){
HXLINE( 120)											_g102 = (_g102 + 1);
HXDLIN( 120)											int dx5 = (_g102 - 1);
HXDLIN( 120)											::Dynamic this137 = this134->image;
HXDLIN( 120)											int index18;
HXDLIN( 120)											if (this134->useVirtualPos) {
HXLINE( 120)												index18 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this134->virtualY) * ( (Float)(this134->width) )) + dx5) - this134->virtualX));
            											}
            											else {
HXLINE( 120)												index18 = ::Std_obj::_hx_int(( (Float)(((dy5 * this134->width) + dx5)) ));
            											}
HXDLIN( 120)											int c14 = ::iterMagic::Iimg_obj::get(this137,index18);
HXDLIN( 120)											int col4;
HXDLIN( 120)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)												col4 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            											}
            											else {
HXLINE( 120)												col4 = c14;
            											}
HXDLIN( 120)											bool _hx_tmp32;
HXDLIN( 120)											if (this134->useMask) {
HXLINE( 120)												_hx_tmp32 = ::hx::IsNotNull( this134->mask );
            											}
            											else {
HXLINE( 120)												_hx_tmp32 = false;
            											}
HXDLIN( 120)											if (_hx_tmp32) {
HXLINE( 120)												 ::pi_xy::ImageStruct this138 = this134->mask;
HXDLIN( 120)												::Dynamic this139 = this138->image;
HXDLIN( 120)												int index19;
HXDLIN( 120)												if (this138->useVirtualPos) {
HXLINE( 120)													index19 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this138->virtualY) * ( (Float)(this138->width) )) + dx5) - this138->virtualX));
            												}
            												else {
HXLINE( 120)													index19 = ::Std_obj::_hx_int(( (Float)(((dy5 * this138->width) + dx5)) ));
            												}
HXDLIN( 120)												int c15 = ::iterMagic::Iimg_obj::get(this139,index19);
HXDLIN( 120)												int v14;
HXDLIN( 120)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)													v14 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            												}
            												else {
HXLINE( 120)													v14 = c15;
            												}
HXDLIN( 120)												int maskPixel4 = v14;
HXDLIN( 120)												int this140 = col4;
HXDLIN( 120)												if ((maskPixel4 == 0)) {
HXLINE( 120)													col4 = this140;
            												}
            												else {
HXLINE( 120)													Float m04;
HXDLIN( 120)													int this141 = ((maskPixel4 >> 24) & 255);
HXDLIN( 120)													if ((this141 == 0)) {
HXLINE( 120)														m04 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														m04 = (( (Float)(this141) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float m14;
HXDLIN( 120)													int this142 = ((maskPixel4 >> 16) & 255);
HXDLIN( 120)													if ((this142 == 0)) {
HXLINE( 120)														m14 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														m14 = (( (Float)(this142) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float m24;
HXDLIN( 120)													int this143 = ((maskPixel4 >> 8) & 255);
HXDLIN( 120)													if ((this143 == 0)) {
HXLINE( 120)														m24 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														m24 = (( (Float)(this143) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float m34;
HXDLIN( 120)													int this144 = (maskPixel4 & 255);
HXDLIN( 120)													if ((this144 == 0)) {
HXLINE( 120)														m34 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														m34 = (( (Float)(this144) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this140 >> 24) & 255)) )));
HXDLIN( 120)													int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this140 >> 16) & 255)) )));
HXDLIN( 120)													int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this140 >> 8) & 255)) )));
HXDLIN( 120)													int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this140 & 255)) )));
HXDLIN( 120)													col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 120)											if ((col4 != 0)) {
HXLINE( 120)												int x17 = (dx5 - rectLeft4);
HXDLIN( 120)												int y17 = (dy5 - rectTop4);
HXDLIN( 120)												int c16 = col4;
HXDLIN( 120)												bool _hx_tmp33;
HXDLIN( 120)												if ((((c16 >> 24) & 255) < 254)) {
HXLINE( 120)													_hx_tmp33 = undoImage12->transparent;
            												}
            												else {
HXLINE( 120)													_hx_tmp33 = false;
            												}
HXDLIN( 120)												if (_hx_tmp33) {
HXLINE( 120)													int location8;
HXDLIN( 120)													if (undoImage12->useVirtualPos) {
HXLINE( 120)														location8 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x17) - undoImage12->virtualX));
            													}
            													else {
HXLINE( 120)														location8 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage12->width) + x17)) ));
            													}
HXDLIN( 120)													int this145 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN( 120)													int this146;
HXDLIN( 120)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)														this146 = ((((((this145 >> 24) & 255) << 24) | ((this145 & 255) << 16)) | (((this145 >> 8) & 255) << 8)) | ((this145 >> 16) & 255));
            													}
            													else {
HXLINE( 120)														this146 = this145;
            													}
HXDLIN( 120)													Float a112;
HXDLIN( 120)													int this147 = ((this146 >> 24) & 255);
HXDLIN( 120)													if ((this147 == 0)) {
HXLINE( 120)														a112 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														a112 = (( (Float)(this147) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float r19;
HXDLIN( 120)													int this148 = ((this146 >> 16) & 255);
HXDLIN( 120)													if ((this148 == 0)) {
HXLINE( 120)														r19 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														r19 = (( (Float)(this148) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float g19;
HXDLIN( 120)													int this149 = ((this146 >> 8) & 255);
HXDLIN( 120)													if ((this149 == 0)) {
HXLINE( 120)														g19 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														g19 = (( (Float)(this149) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float b113;
HXDLIN( 120)													int this150 = (this146 & 255);
HXDLIN( 120)													if ((this150 == 0)) {
HXLINE( 120)														b113 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														b113 = (( (Float)(this150) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float a210;
HXDLIN( 120)													int this151 = ((col4 >> 24) & 255);
HXDLIN( 120)													if ((this151 == 0)) {
HXLINE( 120)														a210 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														a210 = (( (Float)(this151) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float r28;
HXDLIN( 120)													int this152 = ((col4 >> 16) & 255);
HXDLIN( 120)													if ((this152 == 0)) {
HXLINE( 120)														r28 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														r28 = (( (Float)(this152) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float g28;
HXDLIN( 120)													int this153 = ((col4 >> 8) & 255);
HXDLIN( 120)													if ((this153 == 0)) {
HXLINE( 120)														g28 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														g28 = (( (Float)(this153) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float b212;
HXDLIN( 120)													int this154 = (col4 & 255);
HXDLIN( 120)													if ((this154 == 0)) {
HXLINE( 120)														b212 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														b212 = (( (Float)(this154) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float a38 = (a112 * (( (Float)(1) ) - a210));
HXDLIN( 120)													int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a38) + (r28 * a210))));
HXDLIN( 120)													int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a38) + (g28 * a210))));
HXDLIN( 120)													int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a38) + (b212 * a210))));
HXDLIN( 120)													int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a210)));
HXDLIN( 120)													int blended8 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b36);
HXDLIN( 120)													{
HXLINE( 120)														int _hx_tmp34;
HXDLIN( 120)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)															_hx_tmp34 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            														}
            														else {
HXLINE( 120)															_hx_tmp34 = blended8;
            														}
HXDLIN( 120)														::iterMagic::Iimg_obj::set(undoImage12->image,location8,_hx_tmp34);
            													}
            												}
            												else {
HXLINE( 120)													::Dynamic this155 = undoImage12->image;
HXDLIN( 120)													int index20;
HXDLIN( 120)													if (undoImage12->useVirtualPos) {
HXLINE( 120)														index20 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x17) - undoImage12->virtualX));
            													}
            													else {
HXLINE( 120)														index20 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage12->width) + x17)) ));
            													}
HXDLIN( 120)													int _hx_tmp35;
HXDLIN( 120)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)														_hx_tmp35 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            													}
            													else {
HXLINE( 120)														_hx_tmp35 = c16;
            													}
HXDLIN( 120)													::iterMagic::Iimg_obj::set(this155,index20,_hx_tmp35);
            												}
            											}
            											else {
HXLINE( 120)												if (forceClear4) {
HXLINE( 120)													::Dynamic this156 = undoImage12->image;
HXDLIN( 120)													int x18 = (dx5 - rectLeft4);
HXDLIN( 120)													int y18 = (dy5 - rectTop4);
HXDLIN( 120)													int index21;
HXDLIN( 120)													if (undoImage12->useVirtualPos) {
HXLINE( 120)														index21 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x18) - undoImage12->virtualX));
            													}
            													else {
HXLINE( 120)														index21 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage12->width) + x18)) ));
            													}
HXDLIN( 120)													::iterMagic::Iimg_obj::set(this156,index21,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 120)					{
HXLINE( 120)						int _g_min8 = xIter34->start;
HXDLIN( 120)						int _g_max8 = xIter34->max;
HXDLIN( 120)						while((_g_min8 < _g_max8)){
HXLINE( 120)							_g_min8 = (_g_min8 + 1);
HXDLIN( 120)							int px2 = (_g_min8 - 1);
HXDLIN( 120)							Float pcx2 = (( (Float)(px2) ) - x);
HXDLIN( 120)							{
HXLINE( 120)								int _g_min9 = yIter34->start;
HXDLIN( 120)								int _g_max9 = yIter34->max;
HXDLIN( 120)								while((_g_min9 < _g_max9)){
HXLINE( 120)									_g_min9 = (_g_min9 + 1);
HXDLIN( 120)									int py2 = (_g_min9 - 1);
HXDLIN( 120)									Float pcy2 = (( (Float)(py2) ) - cy5);
HXDLIN( 120)									Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 120)									Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 120)									Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 120)									Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 120)									Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 120)									bool _hx_tmp36;
HXDLIN( 120)									bool _hx_tmp37;
HXDLIN( 120)									if ((ratioA2 >= 0)) {
HXLINE( 120)										_hx_tmp37 = (ratioB2 >= 0);
            									}
            									else {
HXLINE( 120)										_hx_tmp37 = false;
            									}
HXDLIN( 120)									if (_hx_tmp37) {
HXLINE( 120)										_hx_tmp36 = (ratioC2 >= 0);
            									}
            									else {
HXLINE( 120)										_hx_tmp36 = false;
            									}
HXDLIN( 120)									if (_hx_tmp36) {
HXLINE( 120)										int i40 = ::Std_obj::_hx_int((((( (Float)(aA2) ) * ratioA2) + (( (Float)(aB2) ) * ratioB2)) + (( (Float)(aC2) ) * ratioC2)));
HXDLIN( 120)										if ((i40 > 255)) {
HXLINE(  24)											i40 = 255;
            										}
HXLINE( 120)										if ((i40 < 0)) {
HXLINE(  25)											i40 = 0;
            										}
HXLINE( 120)										int a39 = i40;
HXDLIN( 120)										int i41 = ::Std_obj::_hx_int((((( (Float)(rA2) ) * ratioA2) + (( (Float)(rB2) ) * ratioB2)) + (( (Float)(rC2) ) * ratioC2)));
HXDLIN( 120)										if ((i41 > 255)) {
HXLINE(  24)											i41 = 255;
            										}
HXLINE( 120)										if ((i41 < 0)) {
HXLINE(  25)											i41 = 0;
            										}
HXLINE( 120)										int r29 = i41;
HXDLIN( 120)										int i42 = ::Std_obj::_hx_int((((( (Float)(gA2) ) * ratioA2) + (( (Float)(gB2) ) * ratioB2)) + (( (Float)(gC2) ) * ratioC2)));
HXDLIN( 120)										if ((i42 > 255)) {
HXLINE(  24)											i42 = 255;
            										}
HXLINE( 120)										if ((i42 < 0)) {
HXLINE(  25)											i42 = 0;
            										}
HXLINE( 120)										int g29 = i42;
HXDLIN( 120)										int i43 = ::Std_obj::_hx_int((((( (Float)(bA2) ) * ratioA2) + (( (Float)(bB2) ) * ratioB2)) + (( (Float)(bC2) ) * ratioC2)));
HXDLIN( 120)										if ((i43 > 255)) {
HXLINE(  24)											i43 = 255;
            										}
HXLINE( 120)										if ((i43 < 0)) {
HXLINE(  25)											i43 = 0;
            										}
HXLINE( 120)										int b37 = i43;
HXDLIN( 120)										{
HXLINE( 120)											int location9;
HXDLIN( 120)											if (this134->useVirtualPos) {
HXLINE( 120)												location9 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this134->virtualY) * ( (Float)(this134->width) )) + px2) - this134->virtualX));
            											}
            											else {
HXLINE( 120)												location9 = ::Std_obj::_hx_int(( (Float)(((py2 * this134->width) + px2)) ));
            											}
HXDLIN( 120)											bool _hx_tmp38;
HXDLIN( 120)											if (this134->transparent) {
HXLINE( 120)												_hx_tmp38 = (a39 < 254);
            											}
            											else {
HXLINE( 120)												_hx_tmp38 = false;
            											}
HXDLIN( 120)											if (_hx_tmp38) {
HXLINE( 120)												int this157 = ::iterMagic::Iimg_obj::get(this134->image,location9);
HXDLIN( 120)												int old2;
HXDLIN( 120)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)													old2 = ((((((this157 >> 24) & 255) << 24) | ((this157 & 255) << 16)) | (((this157 >> 8) & 255) << 8)) | ((this157 >> 16) & 255));
            												}
            												else {
HXLINE( 120)													old2 = this157;
            												}
HXDLIN( 120)												int rhs2 = ((((a39 << 24) | (r29 << 16)) | (g29 << 8)) | b37);
HXDLIN( 120)												Float a113;
HXDLIN( 120)												int this158 = ((old2 >> 24) & 255);
HXDLIN( 120)												if ((this158 == 0)) {
HXLINE( 120)													a113 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													a113 = (( (Float)(this158) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float r110;
HXDLIN( 120)												int this159 = ((old2 >> 16) & 255);
HXDLIN( 120)												if ((this159 == 0)) {
HXLINE( 120)													r110 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													r110 = (( (Float)(this159) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float g110;
HXDLIN( 120)												int this160 = ((old2 >> 8) & 255);
HXDLIN( 120)												if ((this160 == 0)) {
HXLINE( 120)													g110 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													g110 = (( (Float)(this160) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float b114;
HXDLIN( 120)												int this161 = (old2 & 255);
HXDLIN( 120)												if ((this161 == 0)) {
HXLINE( 120)													b114 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													b114 = (( (Float)(this161) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float a211;
HXDLIN( 120)												int this162 = ((rhs2 >> 24) & 255);
HXDLIN( 120)												if ((this162 == 0)) {
HXLINE( 120)													a211 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													a211 = (( (Float)(this162) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float r210;
HXDLIN( 120)												int this163 = ((rhs2 >> 16) & 255);
HXDLIN( 120)												if ((this163 == 0)) {
HXLINE( 120)													r210 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													r210 = (( (Float)(this163) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float g210;
HXDLIN( 120)												int this164 = ((rhs2 >> 8) & 255);
HXDLIN( 120)												if ((this164 == 0)) {
HXLINE( 120)													g210 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													g210 = (( (Float)(this164) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float b213;
HXDLIN( 120)												int this165 = (rhs2 & 255);
HXDLIN( 120)												if ((this165 == 0)) {
HXLINE( 120)													b213 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													b213 = (( (Float)(this165) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN( 120)												int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r210 * a211))));
HXDLIN( 120)												int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g210 * a211))));
HXDLIN( 120)												int b38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b213 * a211))));
HXDLIN( 120)												int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN( 120)												int blended9 = ((((a40 << 24) | (r30 << 16)) | (g30 << 8)) | b38);
HXDLIN( 120)												{
HXLINE( 120)													int _hx_tmp39;
HXDLIN( 120)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)														_hx_tmp39 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            													}
            													else {
HXLINE( 120)														_hx_tmp39 = blended9;
            													}
HXDLIN( 120)													::iterMagic::Iimg_obj::set(this134->image,location9,_hx_tmp39);
            												}
            											}
            											else {
HXLINE( 120)												int value2;
HXDLIN( 120)												if (this134->isLittle) {
HXLINE( 120)													value2 = ((((a39 << 24) | (b37 << 16)) | (g29 << 8)) | r29);
            												}
            												else {
HXLINE( 120)													value2 = ((((a39 << 24) | (r29 << 16)) | (g29 << 8)) | b37);
            												}
HXDLIN( 120)												::iterMagic::Iimg_obj::set(this134->image,location9,value2);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 120)					if ((hasHit4 == false)) {
HXLINE( 120)						 ::pi_xy::algo::HitTri v15 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,x,y15,bx3,y15,x,cy5,true);
HXDLIN( 120)						if (hasUndo4) {
HXLINE( 120)							v15->undoImage = undoImage12;
HXDLIN( 120)							v15->undoX = xIter34->start;
HXDLIN( 120)							v15->undoY = yIter34->start;
            						}
            					}
            				}
HXDLIN( 120)				{
HXLINE( 120)					bool hasHit5 = false;
HXDLIN( 120)					bool hasUndo5 = false;
HXDLIN( 120)					int aA3 = ((colorD >> 24) & 255);
HXDLIN( 120)					int rA3 = ((colorD >> 16) & 255);
HXDLIN( 120)					int gA3 = ((colorD >> 8) & 255);
HXDLIN( 120)					int bA3 = (colorD & 255);
HXDLIN( 120)					int aB3 = ((colorA >> 24) & 255);
HXDLIN( 120)					int rB3 = ((colorA >> 16) & 255);
HXDLIN( 120)					int gB3 = ((colorA >> 8) & 255);
HXDLIN( 120)					int bB3 = (colorA & 255);
HXDLIN( 120)					int aC3 = ((colorD >> 24) & 255);
HXDLIN( 120)					int rC3 = ((colorD >> 16) & 255);
HXDLIN( 120)					int gC3 = ((colorD >> 8) & 255);
HXDLIN( 120)					int bC3 = (colorD & 255);
HXDLIN( 120)					Float bcx3 = (bx3 - x);
HXDLIN( 120)					Float bcy3 = (cy5 - cy5);
HXDLIN( 120)					Float acx3 = (bx3 - x);
HXDLIN( 120)					Float acy3 = (y15 - cy5);
HXDLIN( 120)					Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 120)					Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 120)					Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 120)					Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 120)					 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN( 120)					if ((bx3 > bx3)) {
HXLINE( 120)						if ((bx3 > x)) {
HXLINE( 120)							int min20;
HXDLIN( 120)							if ((bx3 > x)) {
HXLINE( 120)								min20 = ::Math_obj::floor(x);
            							}
            							else {
HXLINE( 120)								min20 = ::Math_obj::floor(bx3);
            							}
HXDLIN( 120)							int ii_min40 = min20;
HXDLIN( 120)							int ii_max40 = ::Math_obj::ceil(bx3);
HXDLIN( 120)							xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            						}
            						else {
HXLINE( 120)							int ii_min41 = ::Math_obj::floor(bx3);
HXDLIN( 120)							int ii_max41 = ::Math_obj::ceil(x);
HXDLIN( 120)							xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            						}
            					}
            					else {
HXLINE( 120)						if ((bx3 > x)) {
HXLINE( 120)							int min21;
HXDLIN( 120)							if ((bx3 > x)) {
HXLINE( 120)								min21 = ::Math_obj::floor(x);
            							}
            							else {
HXLINE( 120)								min21 = ::Math_obj::ceil(bx3);
            							}
HXDLIN( 120)							int ii_min42 = min21;
HXDLIN( 120)							int ii_max42 = ::Math_obj::ceil(bx3);
HXDLIN( 120)							xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            						}
            						else {
HXLINE( 120)							int ii_min43 = ::Math_obj::floor(bx3);
HXDLIN( 120)							int ii_max43 = ::Math_obj::ceil(x);
HXDLIN( 120)							xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            						}
            					}
HXDLIN( 120)					 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN( 120)					if ((y15 > cy5)) {
HXLINE( 120)						if ((y15 > cy5)) {
HXLINE( 120)							int min22;
HXDLIN( 120)							if ((cy5 > cy5)) {
HXLINE( 120)								min22 = ::Math_obj::floor(cy5);
            							}
            							else {
HXLINE( 120)								min22 = ::Math_obj::floor(cy5);
            							}
HXDLIN( 120)							int ii_min44 = min22;
HXDLIN( 120)							int ii_max44 = ::Math_obj::ceil(y15);
HXDLIN( 120)							yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            						}
            						else {
HXLINE( 120)							int ii_min45 = ::Math_obj::floor(cy5);
HXDLIN( 120)							int ii_max45 = ::Math_obj::ceil(cy5);
HXDLIN( 120)							yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            						}
            					}
            					else {
HXLINE( 120)						if ((cy5 > cy5)) {
HXLINE( 120)							int min23;
HXDLIN( 120)							if ((y15 > cy5)) {
HXLINE( 120)								min23 = ::Math_obj::floor(cy5);
            							}
            							else {
HXLINE( 120)								min23 = ::Math_obj::ceil(y15);
            							}
HXDLIN( 120)							int ii_min46 = min23;
HXDLIN( 120)							int ii_max46 = ::Math_obj::ceil(cy5);
HXDLIN( 120)							yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            						}
            						else {
HXLINE( 120)							int ii_min47 = ::Math_obj::floor(y15);
HXDLIN( 120)							int ii_max47 = ::Math_obj::ceil(cy5);
HXDLIN( 120)							yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            						}
            					}
HXDLIN( 120)					 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN( 120)					if (hasUndo5) {
HXLINE( 120)						int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN( 120)						int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN( 120)						 ::Dynamic imageType5 = null();
HXDLIN( 120)						 ::pi_xy::ImageStruct this166 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 120)						if (::hx::IsNull( imageType5 )) {
HXLINE(  54)							imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 120)						::Dynamic undoImage16;
HXDLIN( 120)						switch((int)(( (int)(imageType5) ))){
            							case (int)0: {
HXLINE( 120)								 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 120)								 ::iterMagic::BytesImg b39 = byt5;
HXDLIN( 120)								{
HXLINE( 120)									b39->width = width5;
HXDLIN( 120)									b39->height = height5;
HXDLIN( 120)									b39->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 120)									b39->data = ::haxe::io::Bytes_obj::alloc((b39->length * 4));
HXDLIN( 120)									{
HXLINE( 120)										int len10 = b39->length;
HXDLIN( 120)										int w5 = 0;
HXDLIN( 120)										{
HXLINE( 120)											int _g104 = 0;
HXDLIN( 120)											int _g105 = b39->height;
HXDLIN( 120)											while((_g104 < _g105)){
HXLINE( 120)												_g104 = (_g104 + 1);
HXDLIN( 120)												int y19 = (_g104 - 1);
HXDLIN( 120)												{
HXLINE( 120)													int _g106 = 0;
HXDLIN( 120)													int _g107 = b39->width;
HXDLIN( 120)													while((_g106 < _g107)){
HXLINE( 120)														_g106 = (_g106 + 1);
HXDLIN( 120)														int x19 = (_g106 - 1);
HXDLIN( 120)														{
HXLINE( 120)															w5 = (w5 + 1);
HXDLIN( 120)															b39->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 120)														{
HXLINE( 120)															w5 = (w5 + 1);
HXDLIN( 120)															b39->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 120)														{
HXLINE( 120)															w5 = (w5 + 1);
HXDLIN( 120)															b39->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 120)														{
HXLINE( 120)															w5 = (w5 + 1);
HXDLIN( 120)															b39->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 120)								undoImage16 = b39;
            							}
            							break;
            							case (int)1: {
HXLINE( 120)								 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 120)								 ::iterMagic::ArrIntImg a41 = arrI5;
HXDLIN( 120)								{
HXLINE( 120)									a41->width = width5;
HXDLIN( 120)									a41->height = height5;
HXDLIN( 120)									a41->data = ::Array_obj< int >::__new(0);
HXDLIN( 120)									a41->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 120)									{
HXLINE( 120)										int _g108 = 0;
HXDLIN( 120)										int _g109 = a41->length;
HXDLIN( 120)										while((_g108 < _g109)){
HXLINE( 120)											_g108 = (_g108 + 1);
HXDLIN( 120)											int i44 = (_g108 - 1);
HXDLIN( 120)											a41->data[i44] = 0;
            										}
            									}
            								}
HXDLIN( 120)								undoImage16 = a41;
            							}
            							break;
            							case (int)2: {
HXLINE( 120)								 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 120)								 ::iterMagic::U32ArrImg b40 = u32a5;
HXDLIN( 120)								{
HXLINE( 120)									b40->width = width5;
HXDLIN( 120)									b40->height = height5;
HXDLIN( 120)									b40->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 120)									int size5 = (b40->length * 4);
HXDLIN( 120)									b40->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN( 120)									{
HXLINE( 120)										int _g110 = 0;
HXDLIN( 120)										int _g111 = b40->length;
HXDLIN( 120)										while((_g110 < _g111)){
HXLINE( 120)											_g110 = (_g110 + 1);
HXDLIN( 120)											int i45 = (_g110 - 1);
HXDLIN( 120)											{
HXLINE( 120)												 ::haxe::io::ArrayBufferViewImpl this167 = b40->data;
HXDLIN( 120)												bool undoImage17;
HXDLIN( 120)												if ((i45 >= 0)) {
HXLINE( 120)													undoImage17 = (i45 < (this167->byteLength >> 2));
            												}
            												else {
HXLINE( 120)													undoImage17 = false;
            												}
HXDLIN( 120)												if (undoImage17) {
HXLINE( 120)													 ::haxe::io::Bytes _this5 = this167->bytes;
HXDLIN( 120)													int pos5 = ((i45 << 2) + this167->byteOffset);
HXDLIN( 120)													_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN( 120)													_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN( 120)													_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN( 120)													_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 120)								undoImage16 = b40;
            							}
            							break;
            							case (int)3: {
HXLINE( 120)								 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 120)								 ::iterMagic::VecIntImg v16 = vec5;
HXDLIN( 120)								{
HXLINE( 120)									v16->width = width5;
HXDLIN( 120)									v16->height = height5;
HXDLIN( 120)									v16->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 120)									v16->data = ::Array_obj< int >::__new(v16->length);
HXDLIN( 120)									{
HXLINE( 120)										int _g112 = 0;
HXDLIN( 120)										int _g113 = v16->length;
HXDLIN( 120)										while((_g112 < _g113)){
HXLINE( 120)											_g112 = (_g112 + 1);
HXDLIN( 120)											int i46 = (_g112 - 1);
HXDLIN( 120)											v16->data->__unsafe_set(i46,0);
            										}
            									}
            								}
HXDLIN( 120)								undoImage16 = v16;
            							}
            							break;
            							case (int)4: {
HXLINE( 120)								 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 120)								 ::iterMagic::StackIntImg b41 = sInt5;
HXDLIN( 120)								{
HXLINE( 120)									b41->width = width5;
HXDLIN( 120)									b41->height = height5;
HXDLIN( 120)									b41->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 120)									b41->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 120)									{
HXLINE( 120)										int len11 = b41->length;
HXDLIN( 120)										 ::haxe::ds::GenericStack_Int d5 = b41->data;
HXDLIN( 120)										if (::hx::IsNull( d5->head )) {
HXLINE( 120)											int _g114 = 0;
HXDLIN( 120)											int _g115 = len11;
HXDLIN( 120)											while((_g114 < _g115)){
HXLINE( 120)												_g114 = (_g114 + 1);
HXDLIN( 120)												int i47 = (_g114 - 1);
HXDLIN( 120)												d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            											}
            										}
            										else {
HXLINE( 120)											int _g116 = 0;
HXDLIN( 120)											int _g117 = len11;
HXDLIN( 120)											while((_g116 < _g117)){
HXLINE( 120)												_g116 = (_g116 + 1);
HXDLIN( 120)												int i48 = (_g116 - 1);
HXDLIN( 120)												{
HXLINE( 120)													 ::haxe::ds::GenericCell_Int l5 = b41->data->head;
HXDLIN( 120)													 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN( 120)													{
HXLINE( 120)														int _g118 = 0;
HXDLIN( 120)														int _g119 = i48;
HXDLIN( 120)														while((_g118 < _g119)){
HXLINE( 120)															_g118 = (_g118 + 1);
HXDLIN( 120)															int i49 = (_g118 - 1);
HXLINE( 345)															prev5 = l5;
HXLINE( 346)															l5 = l5->next;
            														}
            													}
HXLINE( 120)													if (::hx::IsNull( prev5 )) {
HXLINE( 120)														b41->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 120)														l5 = null();
            													}
            													else {
HXLINE( 120)														prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 120)														l5 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 120)								undoImage16 = b41;
            							}
            							break;
            						}
HXDLIN( 120)						this166->image = undoImage16;
HXDLIN( 120)						this166->width = width5;
HXDLIN( 120)						this166->height = height5;
HXDLIN( 120)						this166->imageType = ( (int)(imageType5) );
HXDLIN( 120)						undoImage15 = this166;
HXDLIN( 120)						{
HXLINE( 120)							int rectLeft5 = xIter35->start;
HXDLIN( 120)							int rectTop5 = yIter35->start;
HXDLIN( 120)							int rectRight5 = xIter35->max;
HXDLIN( 120)							bool forceClear5 = false;
HXDLIN( 120)							{
HXLINE( 120)								int _g120 = rectTop5;
HXDLIN( 120)								int _g121 = yIter35->max;
HXDLIN( 120)								while((_g120 < _g121)){
HXLINE( 120)									_g120 = (_g120 + 1);
HXDLIN( 120)									int dy6 = (_g120 - 1);
HXDLIN( 120)									{
HXLINE( 120)										int _g122 = rectLeft5;
HXDLIN( 120)										int _g123 = rectRight5;
HXDLIN( 120)										while((_g122 < _g123)){
HXLINE( 120)											_g122 = (_g122 + 1);
HXDLIN( 120)											int dx6 = (_g122 - 1);
HXDLIN( 120)											::Dynamic this168 = this134->image;
HXDLIN( 120)											int index22;
HXDLIN( 120)											if (this134->useVirtualPos) {
HXLINE( 120)												index22 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this134->virtualY) * ( (Float)(this134->width) )) + dx6) - this134->virtualX));
            											}
            											else {
HXLINE( 120)												index22 = ::Std_obj::_hx_int(( (Float)(((dy6 * this134->width) + dx6)) ));
            											}
HXDLIN( 120)											int c17 = ::iterMagic::Iimg_obj::get(this168,index22);
HXDLIN( 120)											int col5;
HXDLIN( 120)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)												col5 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            											}
            											else {
HXLINE( 120)												col5 = c17;
            											}
HXDLIN( 120)											bool _hx_tmp40;
HXDLIN( 120)											if (this134->useMask) {
HXLINE( 120)												_hx_tmp40 = ::hx::IsNotNull( this134->mask );
            											}
            											else {
HXLINE( 120)												_hx_tmp40 = false;
            											}
HXDLIN( 120)											if (_hx_tmp40) {
HXLINE( 120)												 ::pi_xy::ImageStruct this169 = this134->mask;
HXDLIN( 120)												::Dynamic this170 = this169->image;
HXDLIN( 120)												int index23;
HXDLIN( 120)												if (this169->useVirtualPos) {
HXLINE( 120)													index23 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this169->virtualY) * ( (Float)(this169->width) )) + dx6) - this169->virtualX));
            												}
            												else {
HXLINE( 120)													index23 = ::Std_obj::_hx_int(( (Float)(((dy6 * this169->width) + dx6)) ));
            												}
HXDLIN( 120)												int c18 = ::iterMagic::Iimg_obj::get(this170,index23);
HXDLIN( 120)												int v17;
HXDLIN( 120)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)													v17 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            												}
            												else {
HXLINE( 120)													v17 = c18;
            												}
HXDLIN( 120)												int maskPixel5 = v17;
HXDLIN( 120)												int this171 = col5;
HXDLIN( 120)												if ((maskPixel5 == 0)) {
HXLINE( 120)													col5 = this171;
            												}
            												else {
HXLINE( 120)													Float m05;
HXDLIN( 120)													int this172 = ((maskPixel5 >> 24) & 255);
HXDLIN( 120)													if ((this172 == 0)) {
HXLINE( 120)														m05 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														m05 = (( (Float)(this172) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float m15;
HXDLIN( 120)													int this173 = ((maskPixel5 >> 16) & 255);
HXDLIN( 120)													if ((this173 == 0)) {
HXLINE( 120)														m15 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														m15 = (( (Float)(this173) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float m25;
HXDLIN( 120)													int this174 = ((maskPixel5 >> 8) & 255);
HXDLIN( 120)													if ((this174 == 0)) {
HXLINE( 120)														m25 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														m25 = (( (Float)(this174) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float m35;
HXDLIN( 120)													int this175 = (maskPixel5 & 255);
HXDLIN( 120)													if ((this175 == 0)) {
HXLINE( 120)														m35 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														m35 = (( (Float)(this175) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this171 >> 24) & 255)) )));
HXDLIN( 120)													int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this171 >> 16) & 255)) )));
HXDLIN( 120)													int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this171 >> 8) & 255)) )));
HXDLIN( 120)													int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this171 & 255)) )));
HXDLIN( 120)													col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 120)											if ((col5 != 0)) {
HXLINE( 120)												int x20 = (dx6 - rectLeft5);
HXDLIN( 120)												int y20 = (dy6 - rectTop5);
HXDLIN( 120)												int c19 = col5;
HXDLIN( 120)												bool _hx_tmp41;
HXDLIN( 120)												if ((((c19 >> 24) & 255) < 254)) {
HXLINE( 120)													_hx_tmp41 = undoImage15->transparent;
            												}
            												else {
HXLINE( 120)													_hx_tmp41 = false;
            												}
HXDLIN( 120)												if (_hx_tmp41) {
HXLINE( 120)													int location10;
HXDLIN( 120)													if (undoImage15->useVirtualPos) {
HXLINE( 120)														location10 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x20) - undoImage15->virtualX));
            													}
            													else {
HXLINE( 120)														location10 = ::Std_obj::_hx_int(( (Float)(((y20 * undoImage15->width) + x20)) ));
            													}
HXDLIN( 120)													int this176 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN( 120)													int this177;
HXDLIN( 120)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)														this177 = ((((((this176 >> 24) & 255) << 24) | ((this176 & 255) << 16)) | (((this176 >> 8) & 255) << 8)) | ((this176 >> 16) & 255));
            													}
            													else {
HXLINE( 120)														this177 = this176;
            													}
HXDLIN( 120)													Float a114;
HXDLIN( 120)													int this178 = ((this177 >> 24) & 255);
HXDLIN( 120)													if ((this178 == 0)) {
HXLINE( 120)														a114 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														a114 = (( (Float)(this178) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float r111;
HXDLIN( 120)													int this179 = ((this177 >> 16) & 255);
HXDLIN( 120)													if ((this179 == 0)) {
HXLINE( 120)														r111 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														r111 = (( (Float)(this179) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float g111;
HXDLIN( 120)													int this180 = ((this177 >> 8) & 255);
HXDLIN( 120)													if ((this180 == 0)) {
HXLINE( 120)														g111 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														g111 = (( (Float)(this180) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float b115;
HXDLIN( 120)													int this181 = (this177 & 255);
HXDLIN( 120)													if ((this181 == 0)) {
HXLINE( 120)														b115 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														b115 = (( (Float)(this181) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float a212;
HXDLIN( 120)													int this182 = ((col5 >> 24) & 255);
HXDLIN( 120)													if ((this182 == 0)) {
HXLINE( 120)														a212 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														a212 = (( (Float)(this182) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float r211;
HXDLIN( 120)													int this183 = ((col5 >> 16) & 255);
HXDLIN( 120)													if ((this183 == 0)) {
HXLINE( 120)														r211 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														r211 = (( (Float)(this183) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float g211;
HXDLIN( 120)													int this184 = ((col5 >> 8) & 255);
HXDLIN( 120)													if ((this184 == 0)) {
HXLINE( 120)														g211 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														g211 = (( (Float)(this184) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float b214;
HXDLIN( 120)													int this185 = (col5 & 255);
HXDLIN( 120)													if ((this185 == 0)) {
HXLINE( 120)														b214 = ((Float)0.);
            													}
            													else {
HXLINE( 120)														b214 = (( (Float)(this185) ) / ( (Float)(255) ));
            													}
HXDLIN( 120)													Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN( 120)													int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a311) + (r211 * a212))));
HXDLIN( 120)													int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a311) + (g211 * a212))));
HXDLIN( 120)													int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b214 * a212))));
HXDLIN( 120)													int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN( 120)													int blended10 = ((((a42 << 24) | (r31 << 16)) | (g31 << 8)) | b42);
HXDLIN( 120)													{
HXLINE( 120)														int _hx_tmp42;
HXDLIN( 120)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)															_hx_tmp42 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            														}
            														else {
HXLINE( 120)															_hx_tmp42 = blended10;
            														}
HXDLIN( 120)														::iterMagic::Iimg_obj::set(undoImage15->image,location10,_hx_tmp42);
            													}
            												}
            												else {
HXLINE( 120)													::Dynamic this186 = undoImage15->image;
HXDLIN( 120)													int index24;
HXDLIN( 120)													if (undoImage15->useVirtualPos) {
HXLINE( 120)														index24 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x20) - undoImage15->virtualX));
            													}
            													else {
HXLINE( 120)														index24 = ::Std_obj::_hx_int(( (Float)(((y20 * undoImage15->width) + x20)) ));
            													}
HXDLIN( 120)													int _hx_tmp43;
HXDLIN( 120)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)														_hx_tmp43 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            													}
            													else {
HXLINE( 120)														_hx_tmp43 = c19;
            													}
HXDLIN( 120)													::iterMagic::Iimg_obj::set(this186,index24,_hx_tmp43);
            												}
            											}
            											else {
HXLINE( 120)												if (forceClear5) {
HXLINE( 120)													::Dynamic this187 = undoImage15->image;
HXDLIN( 120)													int x21 = (dx6 - rectLeft5);
HXDLIN( 120)													int y21 = (dy6 - rectTop5);
HXDLIN( 120)													int index25;
HXDLIN( 120)													if (undoImage15->useVirtualPos) {
HXLINE( 120)														index25 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x21) - undoImage15->virtualX));
            													}
            													else {
HXLINE( 120)														index25 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage15->width) + x21)) ));
            													}
HXDLIN( 120)													::iterMagic::Iimg_obj::set(this187,index25,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 120)					{
HXLINE( 120)						int _g_min10 = xIter35->start;
HXDLIN( 120)						int _g_max10 = xIter35->max;
HXDLIN( 120)						while((_g_min10 < _g_max10)){
HXLINE( 120)							_g_min10 = (_g_min10 + 1);
HXDLIN( 120)							int px3 = (_g_min10 - 1);
HXDLIN( 120)							Float pcx3 = (( (Float)(px3) ) - x);
HXDLIN( 120)							{
HXLINE( 120)								int _g_min11 = yIter35->start;
HXDLIN( 120)								int _g_max11 = yIter35->max;
HXDLIN( 120)								while((_g_min11 < _g_max11)){
HXLINE( 120)									_g_min11 = (_g_min11 + 1);
HXDLIN( 120)									int py3 = (_g_min11 - 1);
HXDLIN( 120)									Float pcy3 = (( (Float)(py3) ) - cy5);
HXDLIN( 120)									Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 120)									Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 120)									Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 120)									Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 120)									Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 120)									bool _hx_tmp44;
HXDLIN( 120)									bool _hx_tmp45;
HXDLIN( 120)									if ((ratioA3 >= 0)) {
HXLINE( 120)										_hx_tmp45 = (ratioB3 >= 0);
            									}
            									else {
HXLINE( 120)										_hx_tmp45 = false;
            									}
HXDLIN( 120)									if (_hx_tmp45) {
HXLINE( 120)										_hx_tmp44 = (ratioC3 >= 0);
            									}
            									else {
HXLINE( 120)										_hx_tmp44 = false;
            									}
HXDLIN( 120)									if (_hx_tmp44) {
HXLINE( 120)										int i50 = ::Std_obj::_hx_int((((( (Float)(aA3) ) * ratioA3) + (( (Float)(aB3) ) * ratioB3)) + (( (Float)(aC3) ) * ratioC3)));
HXDLIN( 120)										if ((i50 > 255)) {
HXLINE(  24)											i50 = 255;
            										}
HXLINE( 120)										if ((i50 < 0)) {
HXLINE(  25)											i50 = 0;
            										}
HXLINE( 120)										int a43 = i50;
HXDLIN( 120)										int i51 = ::Std_obj::_hx_int((((( (Float)(rA3) ) * ratioA3) + (( (Float)(rB3) ) * ratioB3)) + (( (Float)(rC3) ) * ratioC3)));
HXDLIN( 120)										if ((i51 > 255)) {
HXLINE(  24)											i51 = 255;
            										}
HXLINE( 120)										if ((i51 < 0)) {
HXLINE(  25)											i51 = 0;
            										}
HXLINE( 120)										int r32 = i51;
HXDLIN( 120)										int i52 = ::Std_obj::_hx_int((((( (Float)(gA3) ) * ratioA3) + (( (Float)(gB3) ) * ratioB3)) + (( (Float)(gC3) ) * ratioC3)));
HXDLIN( 120)										if ((i52 > 255)) {
HXLINE(  24)											i52 = 255;
            										}
HXLINE( 120)										if ((i52 < 0)) {
HXLINE(  25)											i52 = 0;
            										}
HXLINE( 120)										int g32 = i52;
HXDLIN( 120)										int i53 = ::Std_obj::_hx_int((((( (Float)(bA3) ) * ratioA3) + (( (Float)(bB3) ) * ratioB3)) + (( (Float)(bC3) ) * ratioC3)));
HXDLIN( 120)										if ((i53 > 255)) {
HXLINE(  24)											i53 = 255;
            										}
HXLINE( 120)										if ((i53 < 0)) {
HXLINE(  25)											i53 = 0;
            										}
HXLINE( 120)										int b43 = i53;
HXDLIN( 120)										{
HXLINE( 120)											int location11;
HXDLIN( 120)											if (this134->useVirtualPos) {
HXLINE( 120)												location11 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this134->virtualY) * ( (Float)(this134->width) )) + px3) - this134->virtualX));
            											}
            											else {
HXLINE( 120)												location11 = ::Std_obj::_hx_int(( (Float)(((py3 * this134->width) + px3)) ));
            											}
HXDLIN( 120)											bool _hx_tmp46;
HXDLIN( 120)											if (this134->transparent) {
HXLINE( 120)												_hx_tmp46 = (a43 < 254);
            											}
            											else {
HXLINE( 120)												_hx_tmp46 = false;
            											}
HXDLIN( 120)											if (_hx_tmp46) {
HXLINE( 120)												int this188 = ::iterMagic::Iimg_obj::get(this134->image,location11);
HXDLIN( 120)												int old3;
HXDLIN( 120)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)													old3 = ((((((this188 >> 24) & 255) << 24) | ((this188 & 255) << 16)) | (((this188 >> 8) & 255) << 8)) | ((this188 >> 16) & 255));
            												}
            												else {
HXLINE( 120)													old3 = this188;
            												}
HXDLIN( 120)												int rhs3 = ((((a43 << 24) | (r32 << 16)) | (g32 << 8)) | b43);
HXDLIN( 120)												Float a115;
HXDLIN( 120)												int this189 = ((old3 >> 24) & 255);
HXDLIN( 120)												if ((this189 == 0)) {
HXLINE( 120)													a115 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													a115 = (( (Float)(this189) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float r112;
HXDLIN( 120)												int this190 = ((old3 >> 16) & 255);
HXDLIN( 120)												if ((this190 == 0)) {
HXLINE( 120)													r112 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													r112 = (( (Float)(this190) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float g112;
HXDLIN( 120)												int this191 = ((old3 >> 8) & 255);
HXDLIN( 120)												if ((this191 == 0)) {
HXLINE( 120)													g112 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													g112 = (( (Float)(this191) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float b116;
HXDLIN( 120)												int this192 = (old3 & 255);
HXDLIN( 120)												if ((this192 == 0)) {
HXLINE( 120)													b116 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													b116 = (( (Float)(this192) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float a213;
HXDLIN( 120)												int this193 = ((rhs3 >> 24) & 255);
HXDLIN( 120)												if ((this193 == 0)) {
HXLINE( 120)													a213 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													a213 = (( (Float)(this193) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float r212;
HXDLIN( 120)												int this194 = ((rhs3 >> 16) & 255);
HXDLIN( 120)												if ((this194 == 0)) {
HXLINE( 120)													r212 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													r212 = (( (Float)(this194) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float g212;
HXDLIN( 120)												int this195 = ((rhs3 >> 8) & 255);
HXDLIN( 120)												if ((this195 == 0)) {
HXLINE( 120)													g212 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													g212 = (( (Float)(this195) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float b215;
HXDLIN( 120)												int this196 = (rhs3 & 255);
HXDLIN( 120)												if ((this196 == 0)) {
HXLINE( 120)													b215 = ((Float)0.);
            												}
            												else {
HXLINE( 120)													b215 = (( (Float)(this196) ) / ( (Float)(255) ));
            												}
HXDLIN( 120)												Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN( 120)												int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a312) + (r212 * a213))));
HXDLIN( 120)												int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a312) + (g212 * a213))));
HXDLIN( 120)												int b44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b215 * a213))));
HXDLIN( 120)												int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN( 120)												int blended11 = ((((a44 << 24) | (r33 << 16)) | (g33 << 8)) | b44);
HXDLIN( 120)												{
HXLINE( 120)													int _hx_tmp47;
HXDLIN( 120)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)														_hx_tmp47 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            													}
            													else {
HXLINE( 120)														_hx_tmp47 = blended11;
            													}
HXDLIN( 120)													::iterMagic::Iimg_obj::set(this134->image,location11,_hx_tmp47);
            												}
            											}
            											else {
HXLINE( 120)												int value3;
HXDLIN( 120)												if (this134->isLittle) {
HXLINE( 120)													value3 = ((((a43 << 24) | (b43 << 16)) | (g32 << 8)) | r32);
            												}
            												else {
HXLINE( 120)													value3 = ((((a43 << 24) | (r32 << 16)) | (g32 << 8)) | b43);
            												}
HXDLIN( 120)												::iterMagic::Iimg_obj::set(this134->image,location11,value3);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 120)					if ((hasHit5 == false)) {
HXLINE( 120)						 ::pi_xy::algo::HitTri v18 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx3,y15,bx3,cy5,x,cy5,true);
HXDLIN( 120)						if (hasUndo5) {
HXLINE( 120)							v18->undoImage = undoImage15;
HXDLIN( 120)							v18->undoX = xIter35->start;
HXDLIN( 120)							v18->undoY = yIter35->start;
            						}
            					}
            				}
HXDLIN( 120)				if ((hasHit4 == true)) {
HXLINE( 120)					 ::pi_xy::algo::HitQuad v19 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,x,y15,bx3,y15,bx3,cy5,x,cy5,true);
            				}
            			}
            		}
HXDLIN( 120)		Float inlobj_ax1 = x;
HXDLIN( 120)		Float inlobj_ay1 = y15;
HXDLIN( 120)		Float inlobj_bx1 = bx3;
HXDLIN( 120)		Float inlobj_y1 = y15;
HXDLIN( 120)		Float inlobj_cx1 = bx3;
HXDLIN( 120)		Float inlobj_cy1 = cy5;
HXDLIN( 120)		Float inlobj_x1 = x;
HXDLIN( 120)		Float inlobj_dy1 = cy5;
HXLINE( 121)		 ::pi_xy::ImageStruct this197 = pixelimage;
HXDLIN( 121)		Float x22 = (x + dx);
HXDLIN( 121)		Float y22 = (y + dy);
HXDLIN( 121)		Float bx4 = (x22 + ( (Float)(fat) ));
HXDLIN( 121)		Float cy6 = (y22 + ( (Float)(tall) ));
HXDLIN( 121)		{
HXLINE( 121)			bool hasHit6 = true;
HXDLIN( 121)			{
HXLINE( 121)				{
HXLINE( 121)					bool hasUndo6 = false;
HXDLIN( 121)					int aA4 = ((colorB >> 24) & 255);
HXDLIN( 121)					int rA4 = ((colorB >> 16) & 255);
HXDLIN( 121)					int gA4 = ((colorB >> 8) & 255);
HXDLIN( 121)					int bA4 = (colorB & 255);
HXDLIN( 121)					int aB4 = ((colorA >> 24) & 255);
HXDLIN( 121)					int rB4 = ((colorA >> 16) & 255);
HXDLIN( 121)					int gB4 = ((colorA >> 8) & 255);
HXDLIN( 121)					int bB4 = (colorA & 255);
HXDLIN( 121)					int aC4 = ((colorD >> 24) & 255);
HXDLIN( 121)					int rC4 = ((colorD >> 16) & 255);
HXDLIN( 121)					int gC4 = ((colorD >> 8) & 255);
HXDLIN( 121)					int bC4 = (colorD & 255);
HXDLIN( 121)					Float bcx4 = (bx4 - x22);
HXDLIN( 121)					Float bcy4 = (y22 - cy6);
HXDLIN( 121)					Float acx4 = (x22 - x22);
HXDLIN( 121)					Float acy4 = (y22 - cy6);
HXDLIN( 121)					Float dot114 = ((bcx4 * bcx4) + (bcy4 * bcy4));
HXDLIN( 121)					Float dot124 = ((bcx4 * acx4) + (bcy4 * acy4));
HXDLIN( 121)					Float dot224 = ((acx4 * acx4) + (acy4 * acy4));
HXDLIN( 121)					Float denom14 = (( (Float)(1) ) / ((dot114 * dot224) - (dot124 * dot124)));
HXDLIN( 121)					 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN( 121)					if ((x22 > bx4)) {
HXLINE( 121)						if ((x22 > x22)) {
HXLINE( 121)							int min24;
HXDLIN( 121)							if ((bx4 > x22)) {
HXLINE( 121)								min24 = ::Math_obj::floor(x22);
            							}
            							else {
HXLINE( 121)								min24 = ::Math_obj::floor(bx4);
            							}
HXDLIN( 121)							int ii_min48 = min24;
HXDLIN( 121)							int ii_max48 = ::Math_obj::ceil(x22);
HXDLIN( 121)							xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            						}
            						else {
HXLINE( 121)							int ii_min49 = ::Math_obj::floor(bx4);
HXDLIN( 121)							int ii_max49 = ::Math_obj::ceil(x22);
HXDLIN( 121)							xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            						}
            					}
            					else {
HXLINE( 121)						if ((bx4 > x22)) {
HXLINE( 121)							int min25;
HXDLIN( 121)							if ((x22 > x22)) {
HXLINE( 121)								min25 = ::Math_obj::floor(x22);
            							}
            							else {
HXLINE( 121)								min25 = ::Math_obj::ceil(x22);
            							}
HXDLIN( 121)							int ii_min50 = min25;
HXDLIN( 121)							int ii_max50 = ::Math_obj::ceil(bx4);
HXDLIN( 121)							xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            						}
            						else {
HXLINE( 121)							int ii_min51 = ::Math_obj::floor(x22);
HXDLIN( 121)							int ii_max51 = ::Math_obj::ceil(x22);
HXDLIN( 121)							xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            						}
            					}
HXDLIN( 121)					 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN( 121)					if ((y22 > y22)) {
HXLINE( 121)						if ((y22 > cy6)) {
HXLINE( 121)							int min26;
HXDLIN( 121)							if ((y22 > cy6)) {
HXLINE( 121)								min26 = ::Math_obj::floor(cy6);
            							}
            							else {
HXLINE( 121)								min26 = ::Math_obj::floor(y22);
            							}
HXDLIN( 121)							int ii_min52 = min26;
HXDLIN( 121)							int ii_max52 = ::Math_obj::ceil(y22);
HXDLIN( 121)							yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            						}
            						else {
HXLINE( 121)							int ii_min53 = ::Math_obj::floor(y22);
HXDLIN( 121)							int ii_max53 = ::Math_obj::ceil(cy6);
HXDLIN( 121)							yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            						}
            					}
            					else {
HXLINE( 121)						if ((y22 > cy6)) {
HXLINE( 121)							int min27;
HXDLIN( 121)							if ((y22 > cy6)) {
HXLINE( 121)								min27 = ::Math_obj::floor(cy6);
            							}
            							else {
HXLINE( 121)								min27 = ::Math_obj::ceil(y22);
            							}
HXDLIN( 121)							int ii_min54 = min27;
HXDLIN( 121)							int ii_max54 = ::Math_obj::ceil(y22);
HXDLIN( 121)							yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            						}
            						else {
HXLINE( 121)							int ii_min55 = ::Math_obj::floor(y22);
HXDLIN( 121)							int ii_max55 = ::Math_obj::ceil(cy6);
HXDLIN( 121)							yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            						}
            					}
HXDLIN( 121)					 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN( 121)					if (hasUndo6) {
HXLINE( 121)						int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN( 121)						int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN( 121)						 ::Dynamic imageType6 = null();
HXDLIN( 121)						 ::pi_xy::ImageStruct this198 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 121)						if (::hx::IsNull( imageType6 )) {
HXLINE(  54)							imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 121)						::Dynamic undoImage19;
HXDLIN( 121)						switch((int)(( (int)(imageType6) ))){
            							case (int)0: {
HXLINE( 121)								 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 121)								 ::iterMagic::BytesImg b45 = byt6;
HXDLIN( 121)								{
HXLINE( 121)									b45->width = width6;
HXDLIN( 121)									b45->height = height6;
HXDLIN( 121)									b45->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 121)									b45->data = ::haxe::io::Bytes_obj::alloc((b45->length * 4));
HXDLIN( 121)									{
HXLINE( 121)										int len12 = b45->length;
HXDLIN( 121)										int w6 = 0;
HXDLIN( 121)										{
HXLINE( 121)											int _g124 = 0;
HXDLIN( 121)											int _g125 = b45->height;
HXDLIN( 121)											while((_g124 < _g125)){
HXLINE( 121)												_g124 = (_g124 + 1);
HXDLIN( 121)												int y23 = (_g124 - 1);
HXDLIN( 121)												{
HXLINE( 121)													int _g126 = 0;
HXDLIN( 121)													int _g127 = b45->width;
HXDLIN( 121)													while((_g126 < _g127)){
HXLINE( 121)														_g126 = (_g126 + 1);
HXDLIN( 121)														int x23 = (_g126 - 1);
HXDLIN( 121)														{
HXLINE( 121)															w6 = (w6 + 1);
HXDLIN( 121)															b45->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 121)														{
HXLINE( 121)															w6 = (w6 + 1);
HXDLIN( 121)															b45->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 121)														{
HXLINE( 121)															w6 = (w6 + 1);
HXDLIN( 121)															b45->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 121)														{
HXLINE( 121)															w6 = (w6 + 1);
HXDLIN( 121)															b45->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 121)								undoImage19 = b45;
            							}
            							break;
            							case (int)1: {
HXLINE( 121)								 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 121)								 ::iterMagic::ArrIntImg a45 = arrI6;
HXDLIN( 121)								{
HXLINE( 121)									a45->width = width6;
HXDLIN( 121)									a45->height = height6;
HXDLIN( 121)									a45->data = ::Array_obj< int >::__new(0);
HXDLIN( 121)									a45->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 121)									{
HXLINE( 121)										int _g128 = 0;
HXDLIN( 121)										int _g129 = a45->length;
HXDLIN( 121)										while((_g128 < _g129)){
HXLINE( 121)											_g128 = (_g128 + 1);
HXDLIN( 121)											int i54 = (_g128 - 1);
HXDLIN( 121)											a45->data[i54] = 0;
            										}
            									}
            								}
HXDLIN( 121)								undoImage19 = a45;
            							}
            							break;
            							case (int)2: {
HXLINE( 121)								 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 121)								 ::iterMagic::U32ArrImg b46 = u32a6;
HXDLIN( 121)								{
HXLINE( 121)									b46->width = width6;
HXDLIN( 121)									b46->height = height6;
HXDLIN( 121)									b46->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 121)									int size6 = (b46->length * 4);
HXDLIN( 121)									b46->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN( 121)									{
HXLINE( 121)										int _g130 = 0;
HXDLIN( 121)										int _g131 = b46->length;
HXDLIN( 121)										while((_g130 < _g131)){
HXLINE( 121)											_g130 = (_g130 + 1);
HXDLIN( 121)											int i55 = (_g130 - 1);
HXDLIN( 121)											{
HXLINE( 121)												 ::haxe::io::ArrayBufferViewImpl this199 = b46->data;
HXDLIN( 121)												bool undoImage20;
HXDLIN( 121)												if ((i55 >= 0)) {
HXLINE( 121)													undoImage20 = (i55 < (this199->byteLength >> 2));
            												}
            												else {
HXLINE( 121)													undoImage20 = false;
            												}
HXDLIN( 121)												if (undoImage20) {
HXLINE( 121)													 ::haxe::io::Bytes _this6 = this199->bytes;
HXDLIN( 121)													int pos6 = ((i55 << 2) + this199->byteOffset);
HXDLIN( 121)													_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN( 121)													_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN( 121)													_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN( 121)													_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 121)								undoImage19 = b46;
            							}
            							break;
            							case (int)3: {
HXLINE( 121)								 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 121)								 ::iterMagic::VecIntImg v20 = vec6;
HXDLIN( 121)								{
HXLINE( 121)									v20->width = width6;
HXDLIN( 121)									v20->height = height6;
HXDLIN( 121)									v20->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 121)									v20->data = ::Array_obj< int >::__new(v20->length);
HXDLIN( 121)									{
HXLINE( 121)										int _g132 = 0;
HXDLIN( 121)										int _g133 = v20->length;
HXDLIN( 121)										while((_g132 < _g133)){
HXLINE( 121)											_g132 = (_g132 + 1);
HXDLIN( 121)											int i56 = (_g132 - 1);
HXDLIN( 121)											v20->data->__unsafe_set(i56,0);
            										}
            									}
            								}
HXDLIN( 121)								undoImage19 = v20;
            							}
            							break;
            							case (int)4: {
HXLINE( 121)								 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 121)								 ::iterMagic::StackIntImg b47 = sInt6;
HXDLIN( 121)								{
HXLINE( 121)									b47->width = width6;
HXDLIN( 121)									b47->height = height6;
HXDLIN( 121)									b47->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 121)									b47->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 121)									{
HXLINE( 121)										int len13 = b47->length;
HXDLIN( 121)										 ::haxe::ds::GenericStack_Int d6 = b47->data;
HXDLIN( 121)										if (::hx::IsNull( d6->head )) {
HXLINE( 121)											int _g134 = 0;
HXDLIN( 121)											int _g135 = len13;
HXDLIN( 121)											while((_g134 < _g135)){
HXLINE( 121)												_g134 = (_g134 + 1);
HXDLIN( 121)												int i57 = (_g134 - 1);
HXDLIN( 121)												d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            											}
            										}
            										else {
HXLINE( 121)											int _g136 = 0;
HXDLIN( 121)											int _g137 = len13;
HXDLIN( 121)											while((_g136 < _g137)){
HXLINE( 121)												_g136 = (_g136 + 1);
HXDLIN( 121)												int i58 = (_g136 - 1);
HXDLIN( 121)												{
HXLINE( 121)													 ::haxe::ds::GenericCell_Int l6 = b47->data->head;
HXDLIN( 121)													 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN( 121)													{
HXLINE( 121)														int _g138 = 0;
HXDLIN( 121)														int _g139 = i58;
HXDLIN( 121)														while((_g138 < _g139)){
HXLINE( 121)															_g138 = (_g138 + 1);
HXDLIN( 121)															int i59 = (_g138 - 1);
HXLINE( 345)															prev6 = l6;
HXLINE( 346)															l6 = l6->next;
            														}
            													}
HXLINE( 121)													if (::hx::IsNull( prev6 )) {
HXLINE( 121)														b47->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 121)														l6 = null();
            													}
            													else {
HXLINE( 121)														prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 121)														l6 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 121)								undoImage19 = b47;
            							}
            							break;
            						}
HXDLIN( 121)						this198->image = undoImage19;
HXDLIN( 121)						this198->width = width6;
HXDLIN( 121)						this198->height = height6;
HXDLIN( 121)						this198->imageType = ( (int)(imageType6) );
HXDLIN( 121)						undoImage18 = this198;
HXDLIN( 121)						{
HXLINE( 121)							int rectLeft6 = xIter36->start;
HXDLIN( 121)							int rectTop6 = yIter36->start;
HXDLIN( 121)							int rectRight6 = xIter36->max;
HXDLIN( 121)							bool forceClear6 = false;
HXDLIN( 121)							{
HXLINE( 121)								int _g140 = rectTop6;
HXDLIN( 121)								int _g141 = yIter36->max;
HXDLIN( 121)								while((_g140 < _g141)){
HXLINE( 121)									_g140 = (_g140 + 1);
HXDLIN( 121)									int dy7 = (_g140 - 1);
HXDLIN( 121)									{
HXLINE( 121)										int _g142 = rectLeft6;
HXDLIN( 121)										int _g143 = rectRight6;
HXDLIN( 121)										while((_g142 < _g143)){
HXLINE( 121)											_g142 = (_g142 + 1);
HXDLIN( 121)											int dx7 = (_g142 - 1);
HXDLIN( 121)											::Dynamic this200 = this197->image;
HXDLIN( 121)											int index26;
HXDLIN( 121)											if (this197->useVirtualPos) {
HXLINE( 121)												index26 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this197->virtualY) * ( (Float)(this197->width) )) + dx7) - this197->virtualX));
            											}
            											else {
HXLINE( 121)												index26 = ::Std_obj::_hx_int(( (Float)(((dy7 * this197->width) + dx7)) ));
            											}
HXDLIN( 121)											int c20 = ::iterMagic::Iimg_obj::get(this200,index26);
HXDLIN( 121)											int col6;
HXDLIN( 121)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)												col6 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            											}
            											else {
HXLINE( 121)												col6 = c20;
            											}
HXDLIN( 121)											bool _hx_tmp48;
HXDLIN( 121)											if (this197->useMask) {
HXLINE( 121)												_hx_tmp48 = ::hx::IsNotNull( this197->mask );
            											}
            											else {
HXLINE( 121)												_hx_tmp48 = false;
            											}
HXDLIN( 121)											if (_hx_tmp48) {
HXLINE( 121)												 ::pi_xy::ImageStruct this201 = this197->mask;
HXDLIN( 121)												::Dynamic this202 = this201->image;
HXDLIN( 121)												int index27;
HXDLIN( 121)												if (this201->useVirtualPos) {
HXLINE( 121)													index27 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this201->virtualY) * ( (Float)(this201->width) )) + dx7) - this201->virtualX));
            												}
            												else {
HXLINE( 121)													index27 = ::Std_obj::_hx_int(( (Float)(((dy7 * this201->width) + dx7)) ));
            												}
HXDLIN( 121)												int c21 = ::iterMagic::Iimg_obj::get(this202,index27);
HXDLIN( 121)												int v21;
HXDLIN( 121)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)													v21 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            												}
            												else {
HXLINE( 121)													v21 = c21;
            												}
HXDLIN( 121)												int maskPixel6 = v21;
HXDLIN( 121)												int this203 = col6;
HXDLIN( 121)												if ((maskPixel6 == 0)) {
HXLINE( 121)													col6 = this203;
            												}
            												else {
HXLINE( 121)													Float m06;
HXDLIN( 121)													int this204 = ((maskPixel6 >> 24) & 255);
HXDLIN( 121)													if ((this204 == 0)) {
HXLINE( 121)														m06 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														m06 = (( (Float)(this204) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float m16;
HXDLIN( 121)													int this205 = ((maskPixel6 >> 16) & 255);
HXDLIN( 121)													if ((this205 == 0)) {
HXLINE( 121)														m16 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														m16 = (( (Float)(this205) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float m26;
HXDLIN( 121)													int this206 = ((maskPixel6 >> 8) & 255);
HXDLIN( 121)													if ((this206 == 0)) {
HXLINE( 121)														m26 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														m26 = (( (Float)(this206) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float m36;
HXDLIN( 121)													int this207 = (maskPixel6 & 255);
HXDLIN( 121)													if ((this207 == 0)) {
HXLINE( 121)														m36 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														m36 = (( (Float)(this207) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this203 >> 24) & 255)) )));
HXDLIN( 121)													int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this203 >> 16) & 255)) )));
HXDLIN( 121)													int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this203 >> 8) & 255)) )));
HXDLIN( 121)													int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this203 & 255)) )));
HXDLIN( 121)													col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 121)											if ((col6 != 0)) {
HXLINE( 121)												int x24 = (dx7 - rectLeft6);
HXDLIN( 121)												int y24 = (dy7 - rectTop6);
HXDLIN( 121)												int c22 = col6;
HXDLIN( 121)												bool _hx_tmp49;
HXDLIN( 121)												if ((((c22 >> 24) & 255) < 254)) {
HXLINE( 121)													_hx_tmp49 = undoImage18->transparent;
            												}
            												else {
HXLINE( 121)													_hx_tmp49 = false;
            												}
HXDLIN( 121)												if (_hx_tmp49) {
HXLINE( 121)													int location12;
HXDLIN( 121)													if (undoImage18->useVirtualPos) {
HXLINE( 121)														location12 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x24) - undoImage18->virtualX));
            													}
            													else {
HXLINE( 121)														location12 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage18->width) + x24)) ));
            													}
HXDLIN( 121)													int this208 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN( 121)													int this209;
HXDLIN( 121)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)														this209 = ((((((this208 >> 24) & 255) << 24) | ((this208 & 255) << 16)) | (((this208 >> 8) & 255) << 8)) | ((this208 >> 16) & 255));
            													}
            													else {
HXLINE( 121)														this209 = this208;
            													}
HXDLIN( 121)													Float a116;
HXDLIN( 121)													int this210 = ((this209 >> 24) & 255);
HXDLIN( 121)													if ((this210 == 0)) {
HXLINE( 121)														a116 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														a116 = (( (Float)(this210) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float r113;
HXDLIN( 121)													int this211 = ((this209 >> 16) & 255);
HXDLIN( 121)													if ((this211 == 0)) {
HXLINE( 121)														r113 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														r113 = (( (Float)(this211) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float g113;
HXDLIN( 121)													int this212 = ((this209 >> 8) & 255);
HXDLIN( 121)													if ((this212 == 0)) {
HXLINE( 121)														g113 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														g113 = (( (Float)(this212) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float b117;
HXDLIN( 121)													int this213 = (this209 & 255);
HXDLIN( 121)													if ((this213 == 0)) {
HXLINE( 121)														b117 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														b117 = (( (Float)(this213) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float a214;
HXDLIN( 121)													int this214 = ((col6 >> 24) & 255);
HXDLIN( 121)													if ((this214 == 0)) {
HXLINE( 121)														a214 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														a214 = (( (Float)(this214) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float r213;
HXDLIN( 121)													int this215 = ((col6 >> 16) & 255);
HXDLIN( 121)													if ((this215 == 0)) {
HXLINE( 121)														r213 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														r213 = (( (Float)(this215) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float g213;
HXDLIN( 121)													int this216 = ((col6 >> 8) & 255);
HXDLIN( 121)													if ((this216 == 0)) {
HXLINE( 121)														g213 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														g213 = (( (Float)(this216) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float b216;
HXDLIN( 121)													int this217 = (col6 & 255);
HXDLIN( 121)													if ((this217 == 0)) {
HXLINE( 121)														b216 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														b216 = (( (Float)(this217) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN( 121)													int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a313) + (r213 * a214))));
HXDLIN( 121)													int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a313) + (g213 * a214))));
HXDLIN( 121)													int b48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b216 * a214))));
HXDLIN( 121)													int a46 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN( 121)													int blended12 = ((((a46 << 24) | (r34 << 16)) | (g34 << 8)) | b48);
HXDLIN( 121)													{
HXLINE( 121)														int _hx_tmp50;
HXDLIN( 121)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)															_hx_tmp50 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            														}
            														else {
HXLINE( 121)															_hx_tmp50 = blended12;
            														}
HXDLIN( 121)														::iterMagic::Iimg_obj::set(undoImage18->image,location12,_hx_tmp50);
            													}
            												}
            												else {
HXLINE( 121)													::Dynamic this218 = undoImage18->image;
HXDLIN( 121)													int index28;
HXDLIN( 121)													if (undoImage18->useVirtualPos) {
HXLINE( 121)														index28 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x24) - undoImage18->virtualX));
            													}
            													else {
HXLINE( 121)														index28 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage18->width) + x24)) ));
            													}
HXDLIN( 121)													int _hx_tmp51;
HXDLIN( 121)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)														_hx_tmp51 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            													}
            													else {
HXLINE( 121)														_hx_tmp51 = c22;
            													}
HXDLIN( 121)													::iterMagic::Iimg_obj::set(this218,index28,_hx_tmp51);
            												}
            											}
            											else {
HXLINE( 121)												if (forceClear6) {
HXLINE( 121)													::Dynamic this219 = undoImage18->image;
HXDLIN( 121)													int x25 = (dx7 - rectLeft6);
HXDLIN( 121)													int y25 = (dy7 - rectTop6);
HXDLIN( 121)													int index29;
HXDLIN( 121)													if (undoImage18->useVirtualPos) {
HXLINE( 121)														index29 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x25) - undoImage18->virtualX));
            													}
            													else {
HXLINE( 121)														index29 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage18->width) + x25)) ));
            													}
HXDLIN( 121)													::iterMagic::Iimg_obj::set(this219,index29,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 121)					{
HXLINE( 121)						int _g_min12 = xIter36->start;
HXDLIN( 121)						int _g_max12 = xIter36->max;
HXDLIN( 121)						while((_g_min12 < _g_max12)){
HXLINE( 121)							_g_min12 = (_g_min12 + 1);
HXDLIN( 121)							int px4 = (_g_min12 - 1);
HXDLIN( 121)							Float pcx4 = (( (Float)(px4) ) - x22);
HXDLIN( 121)							{
HXLINE( 121)								int _g_min13 = yIter36->start;
HXDLIN( 121)								int _g_max13 = yIter36->max;
HXDLIN( 121)								while((_g_min13 < _g_max13)){
HXLINE( 121)									_g_min13 = (_g_min13 + 1);
HXDLIN( 121)									int py4 = (_g_min13 - 1);
HXDLIN( 121)									Float pcy4 = (( (Float)(py4) ) - cy6);
HXDLIN( 121)									Float dot314 = ((pcx4 * bcx4) + (pcy4 * bcy4));
HXDLIN( 121)									Float dot324 = ((pcx4 * acx4) + (pcy4 * acy4));
HXDLIN( 121)									Float ratioA4 = (((dot224 * dot314) - (dot124 * dot324)) * denom14);
HXDLIN( 121)									Float ratioB4 = (((dot114 * dot324) - (dot124 * dot314)) * denom14);
HXDLIN( 121)									Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN( 121)									bool _hx_tmp52;
HXDLIN( 121)									bool _hx_tmp53;
HXDLIN( 121)									if ((ratioA4 >= 0)) {
HXLINE( 121)										_hx_tmp53 = (ratioB4 >= 0);
            									}
            									else {
HXLINE( 121)										_hx_tmp53 = false;
            									}
HXDLIN( 121)									if (_hx_tmp53) {
HXLINE( 121)										_hx_tmp52 = (ratioC4 >= 0);
            									}
            									else {
HXLINE( 121)										_hx_tmp52 = false;
            									}
HXDLIN( 121)									if (_hx_tmp52) {
HXLINE( 121)										int i60 = ::Std_obj::_hx_int((((( (Float)(aA4) ) * ratioA4) + (( (Float)(aB4) ) * ratioB4)) + (( (Float)(aC4) ) * ratioC4)));
HXDLIN( 121)										if ((i60 > 255)) {
HXLINE(  24)											i60 = 255;
            										}
HXLINE( 121)										if ((i60 < 0)) {
HXLINE(  25)											i60 = 0;
            										}
HXLINE( 121)										int a47 = i60;
HXDLIN( 121)										int i61 = ::Std_obj::_hx_int((((( (Float)(rA4) ) * ratioA4) + (( (Float)(rB4) ) * ratioB4)) + (( (Float)(rC4) ) * ratioC4)));
HXDLIN( 121)										if ((i61 > 255)) {
HXLINE(  24)											i61 = 255;
            										}
HXLINE( 121)										if ((i61 < 0)) {
HXLINE(  25)											i61 = 0;
            										}
HXLINE( 121)										int r35 = i61;
HXDLIN( 121)										int i62 = ::Std_obj::_hx_int((((( (Float)(gA4) ) * ratioA4) + (( (Float)(gB4) ) * ratioB4)) + (( (Float)(gC4) ) * ratioC4)));
HXDLIN( 121)										if ((i62 > 255)) {
HXLINE(  24)											i62 = 255;
            										}
HXLINE( 121)										if ((i62 < 0)) {
HXLINE(  25)											i62 = 0;
            										}
HXLINE( 121)										int g35 = i62;
HXDLIN( 121)										int i63 = ::Std_obj::_hx_int((((( (Float)(bA4) ) * ratioA4) + (( (Float)(bB4) ) * ratioB4)) + (( (Float)(bC4) ) * ratioC4)));
HXDLIN( 121)										if ((i63 > 255)) {
HXLINE(  24)											i63 = 255;
            										}
HXLINE( 121)										if ((i63 < 0)) {
HXLINE(  25)											i63 = 0;
            										}
HXLINE( 121)										int b49 = i63;
HXDLIN( 121)										{
HXLINE( 121)											int location13;
HXDLIN( 121)											if (this197->useVirtualPos) {
HXLINE( 121)												location13 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - this197->virtualY) * ( (Float)(this197->width) )) + px4) - this197->virtualX));
            											}
            											else {
HXLINE( 121)												location13 = ::Std_obj::_hx_int(( (Float)(((py4 * this197->width) + px4)) ));
            											}
HXDLIN( 121)											bool _hx_tmp54;
HXDLIN( 121)											if (this197->transparent) {
HXLINE( 121)												_hx_tmp54 = (a47 < 254);
            											}
            											else {
HXLINE( 121)												_hx_tmp54 = false;
            											}
HXDLIN( 121)											if (_hx_tmp54) {
HXLINE( 121)												int this220 = ::iterMagic::Iimg_obj::get(this197->image,location13);
HXDLIN( 121)												int old4;
HXDLIN( 121)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)													old4 = ((((((this220 >> 24) & 255) << 24) | ((this220 & 255) << 16)) | (((this220 >> 8) & 255) << 8)) | ((this220 >> 16) & 255));
            												}
            												else {
HXLINE( 121)													old4 = this220;
            												}
HXDLIN( 121)												int rhs4 = ((((a47 << 24) | (r35 << 16)) | (g35 << 8)) | b49);
HXDLIN( 121)												Float a117;
HXDLIN( 121)												int this221 = ((old4 >> 24) & 255);
HXDLIN( 121)												if ((this221 == 0)) {
HXLINE( 121)													a117 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													a117 = (( (Float)(this221) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float r114;
HXDLIN( 121)												int this222 = ((old4 >> 16) & 255);
HXDLIN( 121)												if ((this222 == 0)) {
HXLINE( 121)													r114 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													r114 = (( (Float)(this222) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float g114;
HXDLIN( 121)												int this223 = ((old4 >> 8) & 255);
HXDLIN( 121)												if ((this223 == 0)) {
HXLINE( 121)													g114 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													g114 = (( (Float)(this223) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float b118;
HXDLIN( 121)												int this224 = (old4 & 255);
HXDLIN( 121)												if ((this224 == 0)) {
HXLINE( 121)													b118 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													b118 = (( (Float)(this224) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float a215;
HXDLIN( 121)												int this225 = ((rhs4 >> 24) & 255);
HXDLIN( 121)												if ((this225 == 0)) {
HXLINE( 121)													a215 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													a215 = (( (Float)(this225) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float r214;
HXDLIN( 121)												int this226 = ((rhs4 >> 16) & 255);
HXDLIN( 121)												if ((this226 == 0)) {
HXLINE( 121)													r214 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													r214 = (( (Float)(this226) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float g214;
HXDLIN( 121)												int this227 = ((rhs4 >> 8) & 255);
HXDLIN( 121)												if ((this227 == 0)) {
HXLINE( 121)													g214 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													g214 = (( (Float)(this227) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float b217;
HXDLIN( 121)												int this228 = (rhs4 & 255);
HXDLIN( 121)												if ((this228 == 0)) {
HXLINE( 121)													b217 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													b217 = (( (Float)(this228) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN( 121)												int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a314) + (r214 * a215))));
HXDLIN( 121)												int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a314) + (g214 * a215))));
HXDLIN( 121)												int b50 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b217 * a215))));
HXDLIN( 121)												int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN( 121)												int blended13 = ((((a48 << 24) | (r36 << 16)) | (g36 << 8)) | b50);
HXDLIN( 121)												{
HXLINE( 121)													int _hx_tmp55;
HXDLIN( 121)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)														_hx_tmp55 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            													}
            													else {
HXLINE( 121)														_hx_tmp55 = blended13;
            													}
HXDLIN( 121)													::iterMagic::Iimg_obj::set(this197->image,location13,_hx_tmp55);
            												}
            											}
            											else {
HXLINE( 121)												int value4;
HXDLIN( 121)												if (this197->isLittle) {
HXLINE( 121)													value4 = ((((a47 << 24) | (b49 << 16)) | (g35 << 8)) | r35);
            												}
            												else {
HXLINE( 121)													value4 = ((((a47 << 24) | (r35 << 16)) | (g35 << 8)) | b49);
            												}
HXDLIN( 121)												::iterMagic::Iimg_obj::set(this197->image,location13,value4);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 121)					if ((hasHit6 == false)) {
HXLINE( 121)						 ::pi_xy::algo::HitTri v22 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,x22,y22,bx4,y22,x22,cy6,true);
HXDLIN( 121)						if (hasUndo6) {
HXLINE( 121)							v22->undoImage = undoImage18;
HXDLIN( 121)							v22->undoX = xIter36->start;
HXDLIN( 121)							v22->undoY = yIter36->start;
            						}
            					}
            				}
HXDLIN( 121)				{
HXLINE( 121)					bool hasHit7 = false;
HXDLIN( 121)					bool hasUndo7 = false;
HXDLIN( 121)					int aA5 = ((colorC >> 24) & 255);
HXDLIN( 121)					int rA5 = ((colorC >> 16) & 255);
HXDLIN( 121)					int gA5 = ((colorC >> 8) & 255);
HXDLIN( 121)					int bA5 = (colorC & 255);
HXDLIN( 121)					int aB5 = ((colorB >> 24) & 255);
HXDLIN( 121)					int rB5 = ((colorB >> 16) & 255);
HXDLIN( 121)					int gB5 = ((colorB >> 8) & 255);
HXDLIN( 121)					int bB5 = (colorB & 255);
HXDLIN( 121)					int aC5 = ((colorD >> 24) & 255);
HXDLIN( 121)					int rC5 = ((colorD >> 16) & 255);
HXDLIN( 121)					int gC5 = ((colorD >> 8) & 255);
HXDLIN( 121)					int bC5 = (colorD & 255);
HXDLIN( 121)					Float bcx5 = (bx4 - x22);
HXDLIN( 121)					Float bcy5 = (cy6 - cy6);
HXDLIN( 121)					Float acx5 = (bx4 - x22);
HXDLIN( 121)					Float acy5 = (y22 - cy6);
HXDLIN( 121)					Float dot115 = ((bcx5 * bcx5) + (bcy5 * bcy5));
HXDLIN( 121)					Float dot125 = ((bcx5 * acx5) + (bcy5 * acy5));
HXDLIN( 121)					Float dot225 = ((acx5 * acx5) + (acy5 * acy5));
HXDLIN( 121)					Float denom15 = (( (Float)(1) ) / ((dot115 * dot225) - (dot125 * dot125)));
HXDLIN( 121)					 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN( 121)					if ((bx4 > bx4)) {
HXLINE( 121)						if ((bx4 > x22)) {
HXLINE( 121)							int min28;
HXDLIN( 121)							if ((bx4 > x22)) {
HXLINE( 121)								min28 = ::Math_obj::floor(x22);
            							}
            							else {
HXLINE( 121)								min28 = ::Math_obj::floor(bx4);
            							}
HXDLIN( 121)							int ii_min56 = min28;
HXDLIN( 121)							int ii_max56 = ::Math_obj::ceil(bx4);
HXDLIN( 121)							xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            						}
            						else {
HXLINE( 121)							int ii_min57 = ::Math_obj::floor(bx4);
HXDLIN( 121)							int ii_max57 = ::Math_obj::ceil(x22);
HXDLIN( 121)							xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            						}
            					}
            					else {
HXLINE( 121)						if ((bx4 > x22)) {
HXLINE( 121)							int min29;
HXDLIN( 121)							if ((bx4 > x22)) {
HXLINE( 121)								min29 = ::Math_obj::floor(x22);
            							}
            							else {
HXLINE( 121)								min29 = ::Math_obj::ceil(bx4);
            							}
HXDLIN( 121)							int ii_min58 = min29;
HXDLIN( 121)							int ii_max58 = ::Math_obj::ceil(bx4);
HXDLIN( 121)							xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            						}
            						else {
HXLINE( 121)							int ii_min59 = ::Math_obj::floor(bx4);
HXDLIN( 121)							int ii_max59 = ::Math_obj::ceil(x22);
HXDLIN( 121)							xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            						}
            					}
HXDLIN( 121)					 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN( 121)					if ((y22 > cy6)) {
HXLINE( 121)						if ((y22 > cy6)) {
HXLINE( 121)							int min30;
HXDLIN( 121)							if ((cy6 > cy6)) {
HXLINE( 121)								min30 = ::Math_obj::floor(cy6);
            							}
            							else {
HXLINE( 121)								min30 = ::Math_obj::floor(cy6);
            							}
HXDLIN( 121)							int ii_min60 = min30;
HXDLIN( 121)							int ii_max60 = ::Math_obj::ceil(y22);
HXDLIN( 121)							yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            						}
            						else {
HXLINE( 121)							int ii_min61 = ::Math_obj::floor(cy6);
HXDLIN( 121)							int ii_max61 = ::Math_obj::ceil(cy6);
HXDLIN( 121)							yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            						}
            					}
            					else {
HXLINE( 121)						if ((cy6 > cy6)) {
HXLINE( 121)							int min31;
HXDLIN( 121)							if ((y22 > cy6)) {
HXLINE( 121)								min31 = ::Math_obj::floor(cy6);
            							}
            							else {
HXLINE( 121)								min31 = ::Math_obj::ceil(y22);
            							}
HXDLIN( 121)							int ii_min62 = min31;
HXDLIN( 121)							int ii_max62 = ::Math_obj::ceil(cy6);
HXDLIN( 121)							yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            						}
            						else {
HXLINE( 121)							int ii_min63 = ::Math_obj::floor(y22);
HXDLIN( 121)							int ii_max63 = ::Math_obj::ceil(cy6);
HXDLIN( 121)							yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            						}
            					}
HXDLIN( 121)					 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN( 121)					if (hasUndo7) {
HXLINE( 121)						int width7 = ((xIter37->max - xIter37->start) + 1);
HXDLIN( 121)						int height7 = ((yIter37->max - yIter37->start) + 1);
HXDLIN( 121)						 ::Dynamic imageType7 = null();
HXDLIN( 121)						 ::pi_xy::ImageStruct this229 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 121)						if (::hx::IsNull( imageType7 )) {
HXLINE(  54)							imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 121)						::Dynamic undoImage22;
HXDLIN( 121)						switch((int)(( (int)(imageType7) ))){
            							case (int)0: {
HXLINE( 121)								 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 121)								 ::iterMagic::BytesImg b51 = byt7;
HXDLIN( 121)								{
HXLINE( 121)									b51->width = width7;
HXDLIN( 121)									b51->height = height7;
HXDLIN( 121)									b51->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 121)									b51->data = ::haxe::io::Bytes_obj::alloc((b51->length * 4));
HXDLIN( 121)									{
HXLINE( 121)										int len14 = b51->length;
HXDLIN( 121)										int w7 = 0;
HXDLIN( 121)										{
HXLINE( 121)											int _g144 = 0;
HXDLIN( 121)											int _g145 = b51->height;
HXDLIN( 121)											while((_g144 < _g145)){
HXLINE( 121)												_g144 = (_g144 + 1);
HXDLIN( 121)												int y26 = (_g144 - 1);
HXDLIN( 121)												{
HXLINE( 121)													int _g146 = 0;
HXDLIN( 121)													int _g147 = b51->width;
HXDLIN( 121)													while((_g146 < _g147)){
HXLINE( 121)														_g146 = (_g146 + 1);
HXDLIN( 121)														int x26 = (_g146 - 1);
HXDLIN( 121)														{
HXLINE( 121)															w7 = (w7 + 1);
HXDLIN( 121)															b51->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 121)														{
HXLINE( 121)															w7 = (w7 + 1);
HXDLIN( 121)															b51->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 121)														{
HXLINE( 121)															w7 = (w7 + 1);
HXDLIN( 121)															b51->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 121)														{
HXLINE( 121)															w7 = (w7 + 1);
HXDLIN( 121)															b51->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 121)								undoImage22 = b51;
            							}
            							break;
            							case (int)1: {
HXLINE( 121)								 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 121)								 ::iterMagic::ArrIntImg a49 = arrI7;
HXDLIN( 121)								{
HXLINE( 121)									a49->width = width7;
HXDLIN( 121)									a49->height = height7;
HXDLIN( 121)									a49->data = ::Array_obj< int >::__new(0);
HXDLIN( 121)									a49->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 121)									{
HXLINE( 121)										int _g148 = 0;
HXDLIN( 121)										int _g149 = a49->length;
HXDLIN( 121)										while((_g148 < _g149)){
HXLINE( 121)											_g148 = (_g148 + 1);
HXDLIN( 121)											int i64 = (_g148 - 1);
HXDLIN( 121)											a49->data[i64] = 0;
            										}
            									}
            								}
HXDLIN( 121)								undoImage22 = a49;
            							}
            							break;
            							case (int)2: {
HXLINE( 121)								 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 121)								 ::iterMagic::U32ArrImg b52 = u32a7;
HXDLIN( 121)								{
HXLINE( 121)									b52->width = width7;
HXDLIN( 121)									b52->height = height7;
HXDLIN( 121)									b52->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 121)									int size7 = (b52->length * 4);
HXDLIN( 121)									b52->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN( 121)									{
HXLINE( 121)										int _g150 = 0;
HXDLIN( 121)										int _g151 = b52->length;
HXDLIN( 121)										while((_g150 < _g151)){
HXLINE( 121)											_g150 = (_g150 + 1);
HXDLIN( 121)											int i65 = (_g150 - 1);
HXDLIN( 121)											{
HXLINE( 121)												 ::haxe::io::ArrayBufferViewImpl this230 = b52->data;
HXDLIN( 121)												bool undoImage23;
HXDLIN( 121)												if ((i65 >= 0)) {
HXLINE( 121)													undoImage23 = (i65 < (this230->byteLength >> 2));
            												}
            												else {
HXLINE( 121)													undoImage23 = false;
            												}
HXDLIN( 121)												if (undoImage23) {
HXLINE( 121)													 ::haxe::io::Bytes _this7 = this230->bytes;
HXDLIN( 121)													int pos7 = ((i65 << 2) + this230->byteOffset);
HXDLIN( 121)													_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN( 121)													_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN( 121)													_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN( 121)													_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 121)								undoImage22 = b52;
            							}
            							break;
            							case (int)3: {
HXLINE( 121)								 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 121)								 ::iterMagic::VecIntImg v23 = vec7;
HXDLIN( 121)								{
HXLINE( 121)									v23->width = width7;
HXDLIN( 121)									v23->height = height7;
HXDLIN( 121)									v23->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 121)									v23->data = ::Array_obj< int >::__new(v23->length);
HXDLIN( 121)									{
HXLINE( 121)										int _g152 = 0;
HXDLIN( 121)										int _g153 = v23->length;
HXDLIN( 121)										while((_g152 < _g153)){
HXLINE( 121)											_g152 = (_g152 + 1);
HXDLIN( 121)											int i66 = (_g152 - 1);
HXDLIN( 121)											v23->data->__unsafe_set(i66,0);
            										}
            									}
            								}
HXDLIN( 121)								undoImage22 = v23;
            							}
            							break;
            							case (int)4: {
HXLINE( 121)								 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 121)								 ::iterMagic::StackIntImg b53 = sInt7;
HXDLIN( 121)								{
HXLINE( 121)									b53->width = width7;
HXDLIN( 121)									b53->height = height7;
HXDLIN( 121)									b53->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 121)									b53->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 121)									{
HXLINE( 121)										int len15 = b53->length;
HXDLIN( 121)										 ::haxe::ds::GenericStack_Int d7 = b53->data;
HXDLIN( 121)										if (::hx::IsNull( d7->head )) {
HXLINE( 121)											int _g154 = 0;
HXDLIN( 121)											int _g155 = len15;
HXDLIN( 121)											while((_g154 < _g155)){
HXLINE( 121)												_g154 = (_g154 + 1);
HXDLIN( 121)												int i67 = (_g154 - 1);
HXDLIN( 121)												d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            											}
            										}
            										else {
HXLINE( 121)											int _g156 = 0;
HXDLIN( 121)											int _g157 = len15;
HXDLIN( 121)											while((_g156 < _g157)){
HXLINE( 121)												_g156 = (_g156 + 1);
HXDLIN( 121)												int i68 = (_g156 - 1);
HXDLIN( 121)												{
HXLINE( 121)													 ::haxe::ds::GenericCell_Int l7 = b53->data->head;
HXDLIN( 121)													 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN( 121)													{
HXLINE( 121)														int _g158 = 0;
HXDLIN( 121)														int _g159 = i68;
HXDLIN( 121)														while((_g158 < _g159)){
HXLINE( 121)															_g158 = (_g158 + 1);
HXDLIN( 121)															int i69 = (_g158 - 1);
HXLINE( 345)															prev7 = l7;
HXLINE( 346)															l7 = l7->next;
            														}
            													}
HXLINE( 121)													if (::hx::IsNull( prev7 )) {
HXLINE( 121)														b53->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN( 121)														l7 = null();
            													}
            													else {
HXLINE( 121)														prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN( 121)														l7 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 121)								undoImage22 = b53;
            							}
            							break;
            						}
HXDLIN( 121)						this229->image = undoImage22;
HXDLIN( 121)						this229->width = width7;
HXDLIN( 121)						this229->height = height7;
HXDLIN( 121)						this229->imageType = ( (int)(imageType7) );
HXDLIN( 121)						undoImage21 = this229;
HXDLIN( 121)						{
HXLINE( 121)							int rectLeft7 = xIter37->start;
HXDLIN( 121)							int rectTop7 = yIter37->start;
HXDLIN( 121)							int rectRight7 = xIter37->max;
HXDLIN( 121)							bool forceClear7 = false;
HXDLIN( 121)							{
HXLINE( 121)								int _g160 = rectTop7;
HXDLIN( 121)								int _g161 = yIter37->max;
HXDLIN( 121)								while((_g160 < _g161)){
HXLINE( 121)									_g160 = (_g160 + 1);
HXDLIN( 121)									int dy8 = (_g160 - 1);
HXDLIN( 121)									{
HXLINE( 121)										int _g162 = rectLeft7;
HXDLIN( 121)										int _g163 = rectRight7;
HXDLIN( 121)										while((_g162 < _g163)){
HXLINE( 121)											_g162 = (_g162 + 1);
HXDLIN( 121)											int dx8 = (_g162 - 1);
HXDLIN( 121)											::Dynamic this231 = this197->image;
HXDLIN( 121)											int index30;
HXDLIN( 121)											if (this197->useVirtualPos) {
HXLINE( 121)												index30 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this197->virtualY) * ( (Float)(this197->width) )) + dx8) - this197->virtualX));
            											}
            											else {
HXLINE( 121)												index30 = ::Std_obj::_hx_int(( (Float)(((dy8 * this197->width) + dx8)) ));
            											}
HXDLIN( 121)											int c23 = ::iterMagic::Iimg_obj::get(this231,index30);
HXDLIN( 121)											int col7;
HXDLIN( 121)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)												col7 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            											}
            											else {
HXLINE( 121)												col7 = c23;
            											}
HXDLIN( 121)											bool _hx_tmp56;
HXDLIN( 121)											if (this197->useMask) {
HXLINE( 121)												_hx_tmp56 = ::hx::IsNotNull( this197->mask );
            											}
            											else {
HXLINE( 121)												_hx_tmp56 = false;
            											}
HXDLIN( 121)											if (_hx_tmp56) {
HXLINE( 121)												 ::pi_xy::ImageStruct this232 = this197->mask;
HXDLIN( 121)												::Dynamic this233 = this232->image;
HXDLIN( 121)												int index31;
HXDLIN( 121)												if (this232->useVirtualPos) {
HXLINE( 121)													index31 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this232->virtualY) * ( (Float)(this232->width) )) + dx8) - this232->virtualX));
            												}
            												else {
HXLINE( 121)													index31 = ::Std_obj::_hx_int(( (Float)(((dy8 * this232->width) + dx8)) ));
            												}
HXDLIN( 121)												int c24 = ::iterMagic::Iimg_obj::get(this233,index31);
HXDLIN( 121)												int v24;
HXDLIN( 121)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)													v24 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            												}
            												else {
HXLINE( 121)													v24 = c24;
            												}
HXDLIN( 121)												int maskPixel7 = v24;
HXDLIN( 121)												int this234 = col7;
HXDLIN( 121)												if ((maskPixel7 == 0)) {
HXLINE( 121)													col7 = this234;
            												}
            												else {
HXLINE( 121)													Float m07;
HXDLIN( 121)													int this235 = ((maskPixel7 >> 24) & 255);
HXDLIN( 121)													if ((this235 == 0)) {
HXLINE( 121)														m07 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														m07 = (( (Float)(this235) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float m17;
HXDLIN( 121)													int this236 = ((maskPixel7 >> 16) & 255);
HXDLIN( 121)													if ((this236 == 0)) {
HXLINE( 121)														m17 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														m17 = (( (Float)(this236) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float m27;
HXDLIN( 121)													int this237 = ((maskPixel7 >> 8) & 255);
HXDLIN( 121)													if ((this237 == 0)) {
HXLINE( 121)														m27 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														m27 = (( (Float)(this237) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float m37;
HXDLIN( 121)													int this238 = (maskPixel7 & 255);
HXDLIN( 121)													if ((this238 == 0)) {
HXLINE( 121)														m37 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														m37 = (( (Float)(this238) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this234 >> 24) & 255)) )));
HXDLIN( 121)													int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this234 >> 16) & 255)) )));
HXDLIN( 121)													int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this234 >> 8) & 255)) )));
HXDLIN( 121)													int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this234 & 255)) )));
HXDLIN( 121)													col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 121)											if ((col7 != 0)) {
HXLINE( 121)												int x27 = (dx8 - rectLeft7);
HXDLIN( 121)												int y27 = (dy8 - rectTop7);
HXDLIN( 121)												int c25 = col7;
HXDLIN( 121)												bool _hx_tmp57;
HXDLIN( 121)												if ((((c25 >> 24) & 255) < 254)) {
HXLINE( 121)													_hx_tmp57 = undoImage21->transparent;
            												}
            												else {
HXLINE( 121)													_hx_tmp57 = false;
            												}
HXDLIN( 121)												if (_hx_tmp57) {
HXLINE( 121)													int location14;
HXDLIN( 121)													if (undoImage21->useVirtualPos) {
HXLINE( 121)														location14 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x27) - undoImage21->virtualX));
            													}
            													else {
HXLINE( 121)														location14 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage21->width) + x27)) ));
            													}
HXDLIN( 121)													int this239 = ::iterMagic::Iimg_obj::get(undoImage21->image,location14);
HXDLIN( 121)													int this240;
HXDLIN( 121)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)														this240 = ((((((this239 >> 24) & 255) << 24) | ((this239 & 255) << 16)) | (((this239 >> 8) & 255) << 8)) | ((this239 >> 16) & 255));
            													}
            													else {
HXLINE( 121)														this240 = this239;
            													}
HXDLIN( 121)													Float a118;
HXDLIN( 121)													int this241 = ((this240 >> 24) & 255);
HXDLIN( 121)													if ((this241 == 0)) {
HXLINE( 121)														a118 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														a118 = (( (Float)(this241) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float r115;
HXDLIN( 121)													int this242 = ((this240 >> 16) & 255);
HXDLIN( 121)													if ((this242 == 0)) {
HXLINE( 121)														r115 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														r115 = (( (Float)(this242) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float g115;
HXDLIN( 121)													int this243 = ((this240 >> 8) & 255);
HXDLIN( 121)													if ((this243 == 0)) {
HXLINE( 121)														g115 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														g115 = (( (Float)(this243) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float b119;
HXDLIN( 121)													int this244 = (this240 & 255);
HXDLIN( 121)													if ((this244 == 0)) {
HXLINE( 121)														b119 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														b119 = (( (Float)(this244) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float a216;
HXDLIN( 121)													int this245 = ((col7 >> 24) & 255);
HXDLIN( 121)													if ((this245 == 0)) {
HXLINE( 121)														a216 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														a216 = (( (Float)(this245) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float r215;
HXDLIN( 121)													int this246 = ((col7 >> 16) & 255);
HXDLIN( 121)													if ((this246 == 0)) {
HXLINE( 121)														r215 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														r215 = (( (Float)(this246) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float g215;
HXDLIN( 121)													int this247 = ((col7 >> 8) & 255);
HXDLIN( 121)													if ((this247 == 0)) {
HXLINE( 121)														g215 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														g215 = (( (Float)(this247) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float b218;
HXDLIN( 121)													int this248 = (col7 & 255);
HXDLIN( 121)													if ((this248 == 0)) {
HXLINE( 121)														b218 = ((Float)0.);
            													}
            													else {
HXLINE( 121)														b218 = (( (Float)(this248) ) / ( (Float)(255) ));
            													}
HXDLIN( 121)													Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN( 121)													int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a315) + (r215 * a216))));
HXDLIN( 121)													int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a315) + (g215 * a216))));
HXDLIN( 121)													int b54 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b218 * a216))));
HXDLIN( 121)													int a50 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN( 121)													int blended14 = ((((a50 << 24) | (r37 << 16)) | (g37 << 8)) | b54);
HXDLIN( 121)													{
HXLINE( 121)														int _hx_tmp58;
HXDLIN( 121)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)															_hx_tmp58 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            														}
            														else {
HXLINE( 121)															_hx_tmp58 = blended14;
            														}
HXDLIN( 121)														::iterMagic::Iimg_obj::set(undoImage21->image,location14,_hx_tmp58);
            													}
            												}
            												else {
HXLINE( 121)													::Dynamic this249 = undoImage21->image;
HXDLIN( 121)													int index32;
HXDLIN( 121)													if (undoImage21->useVirtualPos) {
HXLINE( 121)														index32 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x27) - undoImage21->virtualX));
            													}
            													else {
HXLINE( 121)														index32 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage21->width) + x27)) ));
            													}
HXDLIN( 121)													int _hx_tmp59;
HXDLIN( 121)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)														_hx_tmp59 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            													}
            													else {
HXLINE( 121)														_hx_tmp59 = c25;
            													}
HXDLIN( 121)													::iterMagic::Iimg_obj::set(this249,index32,_hx_tmp59);
            												}
            											}
            											else {
HXLINE( 121)												if (forceClear7) {
HXLINE( 121)													::Dynamic this250 = undoImage21->image;
HXDLIN( 121)													int x28 = (dx8 - rectLeft7);
HXDLIN( 121)													int y28 = (dy8 - rectTop7);
HXDLIN( 121)													int index33;
HXDLIN( 121)													if (undoImage21->useVirtualPos) {
HXLINE( 121)														index33 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x28) - undoImage21->virtualX));
            													}
            													else {
HXLINE( 121)														index33 = ::Std_obj::_hx_int(( (Float)(((y28 * undoImage21->width) + x28)) ));
            													}
HXDLIN( 121)													::iterMagic::Iimg_obj::set(this250,index33,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 121)					{
HXLINE( 121)						int _g_min14 = xIter37->start;
HXDLIN( 121)						int _g_max14 = xIter37->max;
HXDLIN( 121)						while((_g_min14 < _g_max14)){
HXLINE( 121)							_g_min14 = (_g_min14 + 1);
HXDLIN( 121)							int px5 = (_g_min14 - 1);
HXDLIN( 121)							Float pcx5 = (( (Float)(px5) ) - x22);
HXDLIN( 121)							{
HXLINE( 121)								int _g_min15 = yIter37->start;
HXDLIN( 121)								int _g_max15 = yIter37->max;
HXDLIN( 121)								while((_g_min15 < _g_max15)){
HXLINE( 121)									_g_min15 = (_g_min15 + 1);
HXDLIN( 121)									int py5 = (_g_min15 - 1);
HXDLIN( 121)									Float pcy5 = (( (Float)(py5) ) - cy6);
HXDLIN( 121)									Float dot315 = ((pcx5 * bcx5) + (pcy5 * bcy5));
HXDLIN( 121)									Float dot325 = ((pcx5 * acx5) + (pcy5 * acy5));
HXDLIN( 121)									Float ratioA5 = (((dot225 * dot315) - (dot125 * dot325)) * denom15);
HXDLIN( 121)									Float ratioB5 = (((dot115 * dot325) - (dot125 * dot315)) * denom15);
HXDLIN( 121)									Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN( 121)									bool _hx_tmp60;
HXDLIN( 121)									bool _hx_tmp61;
HXDLIN( 121)									if ((ratioA5 >= 0)) {
HXLINE( 121)										_hx_tmp61 = (ratioB5 >= 0);
            									}
            									else {
HXLINE( 121)										_hx_tmp61 = false;
            									}
HXDLIN( 121)									if (_hx_tmp61) {
HXLINE( 121)										_hx_tmp60 = (ratioC5 >= 0);
            									}
            									else {
HXLINE( 121)										_hx_tmp60 = false;
            									}
HXDLIN( 121)									if (_hx_tmp60) {
HXLINE( 121)										int i70 = ::Std_obj::_hx_int((((( (Float)(aA5) ) * ratioA5) + (( (Float)(aB5) ) * ratioB5)) + (( (Float)(aC5) ) * ratioC5)));
HXDLIN( 121)										if ((i70 > 255)) {
HXLINE(  24)											i70 = 255;
            										}
HXLINE( 121)										if ((i70 < 0)) {
HXLINE(  25)											i70 = 0;
            										}
HXLINE( 121)										int a51 = i70;
HXDLIN( 121)										int i71 = ::Std_obj::_hx_int((((( (Float)(rA5) ) * ratioA5) + (( (Float)(rB5) ) * ratioB5)) + (( (Float)(rC5) ) * ratioC5)));
HXDLIN( 121)										if ((i71 > 255)) {
HXLINE(  24)											i71 = 255;
            										}
HXLINE( 121)										if ((i71 < 0)) {
HXLINE(  25)											i71 = 0;
            										}
HXLINE( 121)										int r38 = i71;
HXDLIN( 121)										int i72 = ::Std_obj::_hx_int((((( (Float)(gA5) ) * ratioA5) + (( (Float)(gB5) ) * ratioB5)) + (( (Float)(gC5) ) * ratioC5)));
HXDLIN( 121)										if ((i72 > 255)) {
HXLINE(  24)											i72 = 255;
            										}
HXLINE( 121)										if ((i72 < 0)) {
HXLINE(  25)											i72 = 0;
            										}
HXLINE( 121)										int g38 = i72;
HXDLIN( 121)										int i73 = ::Std_obj::_hx_int((((( (Float)(bA5) ) * ratioA5) + (( (Float)(bB5) ) * ratioB5)) + (( (Float)(bC5) ) * ratioC5)));
HXDLIN( 121)										if ((i73 > 255)) {
HXLINE(  24)											i73 = 255;
            										}
HXLINE( 121)										if ((i73 < 0)) {
HXLINE(  25)											i73 = 0;
            										}
HXLINE( 121)										int b55 = i73;
HXDLIN( 121)										{
HXLINE( 121)											int location15;
HXDLIN( 121)											if (this197->useVirtualPos) {
HXLINE( 121)												location15 = ::Std_obj::_hx_int(((((( (Float)(py5) ) - this197->virtualY) * ( (Float)(this197->width) )) + px5) - this197->virtualX));
            											}
            											else {
HXLINE( 121)												location15 = ::Std_obj::_hx_int(( (Float)(((py5 * this197->width) + px5)) ));
            											}
HXDLIN( 121)											bool _hx_tmp62;
HXDLIN( 121)											if (this197->transparent) {
HXLINE( 121)												_hx_tmp62 = (a51 < 254);
            											}
            											else {
HXLINE( 121)												_hx_tmp62 = false;
            											}
HXDLIN( 121)											if (_hx_tmp62) {
HXLINE( 121)												int this251 = ::iterMagic::Iimg_obj::get(this197->image,location15);
HXDLIN( 121)												int old5;
HXDLIN( 121)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)													old5 = ((((((this251 >> 24) & 255) << 24) | ((this251 & 255) << 16)) | (((this251 >> 8) & 255) << 8)) | ((this251 >> 16) & 255));
            												}
            												else {
HXLINE( 121)													old5 = this251;
            												}
HXDLIN( 121)												int rhs5 = ((((a51 << 24) | (r38 << 16)) | (g38 << 8)) | b55);
HXDLIN( 121)												Float a119;
HXDLIN( 121)												int this252 = ((old5 >> 24) & 255);
HXDLIN( 121)												if ((this252 == 0)) {
HXLINE( 121)													a119 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													a119 = (( (Float)(this252) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float r116;
HXDLIN( 121)												int this253 = ((old5 >> 16) & 255);
HXDLIN( 121)												if ((this253 == 0)) {
HXLINE( 121)													r116 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													r116 = (( (Float)(this253) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float g116;
HXDLIN( 121)												int this254 = ((old5 >> 8) & 255);
HXDLIN( 121)												if ((this254 == 0)) {
HXLINE( 121)													g116 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													g116 = (( (Float)(this254) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float b120;
HXDLIN( 121)												int this255 = (old5 & 255);
HXDLIN( 121)												if ((this255 == 0)) {
HXLINE( 121)													b120 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													b120 = (( (Float)(this255) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float a217;
HXDLIN( 121)												int this256 = ((rhs5 >> 24) & 255);
HXDLIN( 121)												if ((this256 == 0)) {
HXLINE( 121)													a217 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													a217 = (( (Float)(this256) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float r216;
HXDLIN( 121)												int this257 = ((rhs5 >> 16) & 255);
HXDLIN( 121)												if ((this257 == 0)) {
HXLINE( 121)													r216 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													r216 = (( (Float)(this257) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float g216;
HXDLIN( 121)												int this258 = ((rhs5 >> 8) & 255);
HXDLIN( 121)												if ((this258 == 0)) {
HXLINE( 121)													g216 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													g216 = (( (Float)(this258) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float b219;
HXDLIN( 121)												int this259 = (rhs5 & 255);
HXDLIN( 121)												if ((this259 == 0)) {
HXLINE( 121)													b219 = ((Float)0.);
            												}
            												else {
HXLINE( 121)													b219 = (( (Float)(this259) ) / ( (Float)(255) ));
            												}
HXDLIN( 121)												Float a316 = (a119 * (( (Float)(1) ) - a217));
HXDLIN( 121)												int r39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a316) + (r216 * a217))));
HXDLIN( 121)												int g39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a316) + (g216 * a217))));
HXDLIN( 121)												int b56 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a316) + (b219 * a217))));
HXDLIN( 121)												int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN( 121)												int blended15 = ((((a52 << 24) | (r39 << 16)) | (g39 << 8)) | b56);
HXDLIN( 121)												{
HXLINE( 121)													int _hx_tmp63;
HXDLIN( 121)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)														_hx_tmp63 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            													}
            													else {
HXLINE( 121)														_hx_tmp63 = blended15;
            													}
HXDLIN( 121)													::iterMagic::Iimg_obj::set(this197->image,location15,_hx_tmp63);
            												}
            											}
            											else {
HXLINE( 121)												int value5;
HXDLIN( 121)												if (this197->isLittle) {
HXLINE( 121)													value5 = ((((a51 << 24) | (b55 << 16)) | (g38 << 8)) | r38);
            												}
            												else {
HXLINE( 121)													value5 = ((((a51 << 24) | (r38 << 16)) | (g38 << 8)) | b55);
            												}
HXDLIN( 121)												::iterMagic::Iimg_obj::set(this197->image,location15,value5);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 121)					if ((hasHit7 == false)) {
HXLINE( 121)						 ::pi_xy::algo::HitTri v25 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx4,y22,bx4,cy6,x22,cy6,true);
HXDLIN( 121)						if (hasUndo7) {
HXLINE( 121)							v25->undoImage = undoImage21;
HXDLIN( 121)							v25->undoX = xIter37->start;
HXDLIN( 121)							v25->undoY = yIter37->start;
            						}
            					}
            				}
HXDLIN( 121)				if ((hasHit6 == true)) {
HXLINE( 121)					 ::pi_xy::algo::HitQuad v26 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,x22,y22,bx4,y22,bx4,cy6,x22,cy6,true);
            				}
            			}
            		}
HXDLIN( 121)		Float inlobj_ax2 = x22;
HXDLIN( 121)		Float inlobj_ay2 = y22;
HXDLIN( 121)		Float inlobj_bx2 = bx4;
HXDLIN( 121)		Float inlobj_y2 = y22;
HXDLIN( 121)		Float inlobj_cx2 = bx4;
HXDLIN( 121)		Float inlobj_cy2 = cy6;
HXDLIN( 121)		Float inlobj_x2 = x22;
HXDLIN( 121)		Float inlobj_dy2 = cy6;
HXLINE( 122)		 ::pi_xy::ImageStruct this260 = pixelimage;
HXDLIN( 122)		Float y29 = (y + dy);
HXDLIN( 122)		Float bx5 = (farX + rightRadius);
HXDLIN( 122)		Float cy7 = (y29 + ( (Float)(tall) ));
HXDLIN( 122)		{
HXLINE( 122)			bool hasHit8 = true;
HXDLIN( 122)			{
HXLINE( 122)				{
HXLINE( 122)					bool hasUndo8 = false;
HXDLIN( 122)					int aA6 = ((colorB >> 24) & 255);
HXDLIN( 122)					int rA6 = ((colorB >> 16) & 255);
HXDLIN( 122)					int gA6 = ((colorB >> 8) & 255);
HXDLIN( 122)					int bA6 = (colorB & 255);
HXDLIN( 122)					int aB6 = ((colorB >> 24) & 255);
HXDLIN( 122)					int rB6 = ((colorB >> 16) & 255);
HXDLIN( 122)					int gB6 = ((colorB >> 8) & 255);
HXDLIN( 122)					int bB6 = (colorB & 255);
HXDLIN( 122)					int aC6 = ((colorC >> 24) & 255);
HXDLIN( 122)					int rC6 = ((colorC >> 16) & 255);
HXDLIN( 122)					int gC6 = ((colorC >> 8) & 255);
HXDLIN( 122)					int bC6 = (colorC & 255);
HXDLIN( 122)					Float bcx6 = (bx5 - farX);
HXDLIN( 122)					Float bcy6 = (y29 - cy7);
HXDLIN( 122)					Float acx6 = (farX - farX);
HXDLIN( 122)					Float acy6 = (y29 - cy7);
HXDLIN( 122)					Float dot116 = ((bcx6 * bcx6) + (bcy6 * bcy6));
HXDLIN( 122)					Float dot126 = ((bcx6 * acx6) + (bcy6 * acy6));
HXDLIN( 122)					Float dot226 = ((acx6 * acx6) + (acy6 * acy6));
HXDLIN( 122)					Float denom16 = (( (Float)(1) ) / ((dot116 * dot226) - (dot126 * dot126)));
HXDLIN( 122)					 ::pi_xy::iter::IntIterStart xIter38;
HXDLIN( 122)					if ((farX > bx5)) {
HXLINE( 122)						if ((farX > farX)) {
HXLINE( 122)							int min32;
HXDLIN( 122)							if ((bx5 > farX)) {
HXLINE( 122)								min32 = ::Math_obj::floor(farX);
            							}
            							else {
HXLINE( 122)								min32 = ::Math_obj::floor(bx5);
            							}
HXDLIN( 122)							int ii_min64 = min32;
HXDLIN( 122)							int ii_max64 = ::Math_obj::ceil(farX);
HXDLIN( 122)							xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min64,ii_max64);
            						}
            						else {
HXLINE( 122)							int ii_min65 = ::Math_obj::floor(bx5);
HXDLIN( 122)							int ii_max65 = ::Math_obj::ceil(farX);
HXDLIN( 122)							xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min65,ii_max65);
            						}
            					}
            					else {
HXLINE( 122)						if ((bx5 > farX)) {
HXLINE( 122)							int min33;
HXDLIN( 122)							if ((farX > farX)) {
HXLINE( 122)								min33 = ::Math_obj::floor(farX);
            							}
            							else {
HXLINE( 122)								min33 = ::Math_obj::ceil(farX);
            							}
HXDLIN( 122)							int ii_min66 = min33;
HXDLIN( 122)							int ii_max66 = ::Math_obj::ceil(bx5);
HXDLIN( 122)							xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min66,ii_max66);
            						}
            						else {
HXLINE( 122)							int ii_min67 = ::Math_obj::floor(farX);
HXDLIN( 122)							int ii_max67 = ::Math_obj::ceil(farX);
HXDLIN( 122)							xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min67,ii_max67);
            						}
            					}
HXDLIN( 122)					 ::pi_xy::iter::IntIterStart yIter38;
HXDLIN( 122)					if ((y29 > y29)) {
HXLINE( 122)						if ((y29 > cy7)) {
HXLINE( 122)							int min34;
HXDLIN( 122)							if ((y29 > cy7)) {
HXLINE( 122)								min34 = ::Math_obj::floor(cy7);
            							}
            							else {
HXLINE( 122)								min34 = ::Math_obj::floor(y29);
            							}
HXDLIN( 122)							int ii_min68 = min34;
HXDLIN( 122)							int ii_max68 = ::Math_obj::ceil(y29);
HXDLIN( 122)							yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min68,ii_max68);
            						}
            						else {
HXLINE( 122)							int ii_min69 = ::Math_obj::floor(y29);
HXDLIN( 122)							int ii_max69 = ::Math_obj::ceil(cy7);
HXDLIN( 122)							yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min69,ii_max69);
            						}
            					}
            					else {
HXLINE( 122)						if ((y29 > cy7)) {
HXLINE( 122)							int min35;
HXDLIN( 122)							if ((y29 > cy7)) {
HXLINE( 122)								min35 = ::Math_obj::floor(cy7);
            							}
            							else {
HXLINE( 122)								min35 = ::Math_obj::ceil(y29);
            							}
HXDLIN( 122)							int ii_min70 = min35;
HXDLIN( 122)							int ii_max70 = ::Math_obj::ceil(y29);
HXDLIN( 122)							yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min70,ii_max70);
            						}
            						else {
HXLINE( 122)							int ii_min71 = ::Math_obj::floor(y29);
HXDLIN( 122)							int ii_max71 = ::Math_obj::ceil(cy7);
HXDLIN( 122)							yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min71,ii_max71);
            						}
            					}
HXDLIN( 122)					 ::pi_xy::ImageStruct undoImage24 = null();
HXDLIN( 122)					if (hasUndo8) {
HXLINE( 122)						int width8 = ((xIter38->max - xIter38->start) + 1);
HXDLIN( 122)						int height8 = ((yIter38->max - yIter38->start) + 1);
HXDLIN( 122)						 ::Dynamic imageType8 = null();
HXDLIN( 122)						 ::pi_xy::ImageStruct this261 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 122)						if (::hx::IsNull( imageType8 )) {
HXLINE(  54)							imageType8 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 122)						::Dynamic undoImage25;
HXDLIN( 122)						switch((int)(( (int)(imageType8) ))){
            							case (int)0: {
HXLINE( 122)								 ::iterMagic::BytesImg byt8 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 122)								 ::iterMagic::BytesImg b57 = byt8;
HXDLIN( 122)								{
HXLINE( 122)									b57->width = width8;
HXDLIN( 122)									b57->height = height8;
HXDLIN( 122)									b57->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 122)									b57->data = ::haxe::io::Bytes_obj::alloc((b57->length * 4));
HXDLIN( 122)									{
HXLINE( 122)										int len16 = b57->length;
HXDLIN( 122)										int w8 = 0;
HXDLIN( 122)										{
HXLINE( 122)											int _g164 = 0;
HXDLIN( 122)											int _g165 = b57->height;
HXDLIN( 122)											while((_g164 < _g165)){
HXLINE( 122)												_g164 = (_g164 + 1);
HXDLIN( 122)												int y30 = (_g164 - 1);
HXDLIN( 122)												{
HXLINE( 122)													int _g166 = 0;
HXDLIN( 122)													int _g167 = b57->width;
HXDLIN( 122)													while((_g166 < _g167)){
HXLINE( 122)														_g166 = (_g166 + 1);
HXDLIN( 122)														int x29 = (_g166 - 1);
HXDLIN( 122)														{
HXLINE( 122)															w8 = (w8 + 1);
HXDLIN( 122)															b57->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 122)														{
HXLINE( 122)															w8 = (w8 + 1);
HXDLIN( 122)															b57->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 122)														{
HXLINE( 122)															w8 = (w8 + 1);
HXDLIN( 122)															b57->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 122)														{
HXLINE( 122)															w8 = (w8 + 1);
HXDLIN( 122)															b57->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 122)								undoImage25 = b57;
            							}
            							break;
            							case (int)1: {
HXLINE( 122)								 ::iterMagic::ArrIntImg arrI8 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 122)								 ::iterMagic::ArrIntImg a53 = arrI8;
HXDLIN( 122)								{
HXLINE( 122)									a53->width = width8;
HXDLIN( 122)									a53->height = height8;
HXDLIN( 122)									a53->data = ::Array_obj< int >::__new(0);
HXDLIN( 122)									a53->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 122)									{
HXLINE( 122)										int _g168 = 0;
HXDLIN( 122)										int _g169 = a53->length;
HXDLIN( 122)										while((_g168 < _g169)){
HXLINE( 122)											_g168 = (_g168 + 1);
HXDLIN( 122)											int i74 = (_g168 - 1);
HXDLIN( 122)											a53->data[i74] = 0;
            										}
            									}
            								}
HXDLIN( 122)								undoImage25 = a53;
            							}
            							break;
            							case (int)2: {
HXLINE( 122)								 ::iterMagic::U32ArrImg u32a8 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 122)								 ::iterMagic::U32ArrImg b58 = u32a8;
HXDLIN( 122)								{
HXLINE( 122)									b58->width = width8;
HXDLIN( 122)									b58->height = height8;
HXDLIN( 122)									b58->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 122)									int size8 = (b58->length * 4);
HXDLIN( 122)									b58->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size8),0,size8);
HXDLIN( 122)									{
HXLINE( 122)										int _g170 = 0;
HXDLIN( 122)										int _g171 = b58->length;
HXDLIN( 122)										while((_g170 < _g171)){
HXLINE( 122)											_g170 = (_g170 + 1);
HXDLIN( 122)											int i75 = (_g170 - 1);
HXDLIN( 122)											{
HXLINE( 122)												 ::haxe::io::ArrayBufferViewImpl this262 = b58->data;
HXDLIN( 122)												bool undoImage26;
HXDLIN( 122)												if ((i75 >= 0)) {
HXLINE( 122)													undoImage26 = (i75 < (this262->byteLength >> 2));
            												}
            												else {
HXLINE( 122)													undoImage26 = false;
            												}
HXDLIN( 122)												if (undoImage26) {
HXLINE( 122)													 ::haxe::io::Bytes _this8 = this262->bytes;
HXDLIN( 122)													int pos8 = ((i75 << 2) + this262->byteOffset);
HXDLIN( 122)													_this8->b[pos8] = ( (unsigned char)(0) );
HXDLIN( 122)													_this8->b[(pos8 + 1)] = ( (unsigned char)(0) );
HXDLIN( 122)													_this8->b[(pos8 + 2)] = ( (unsigned char)(0) );
HXDLIN( 122)													_this8->b[(pos8 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 122)								undoImage25 = b58;
            							}
            							break;
            							case (int)3: {
HXLINE( 122)								 ::iterMagic::VecIntImg vec8 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 122)								 ::iterMagic::VecIntImg v27 = vec8;
HXDLIN( 122)								{
HXLINE( 122)									v27->width = width8;
HXDLIN( 122)									v27->height = height8;
HXDLIN( 122)									v27->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 122)									v27->data = ::Array_obj< int >::__new(v27->length);
HXDLIN( 122)									{
HXLINE( 122)										int _g172 = 0;
HXDLIN( 122)										int _g173 = v27->length;
HXDLIN( 122)										while((_g172 < _g173)){
HXLINE( 122)											_g172 = (_g172 + 1);
HXDLIN( 122)											int i76 = (_g172 - 1);
HXDLIN( 122)											v27->data->__unsafe_set(i76,0);
            										}
            									}
            								}
HXDLIN( 122)								undoImage25 = v27;
            							}
            							break;
            							case (int)4: {
HXLINE( 122)								 ::iterMagic::StackIntImg sInt8 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 122)								 ::iterMagic::StackIntImg b59 = sInt8;
HXDLIN( 122)								{
HXLINE( 122)									b59->width = width8;
HXDLIN( 122)									b59->height = height8;
HXDLIN( 122)									b59->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 122)									b59->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 122)									{
HXLINE( 122)										int len17 = b59->length;
HXDLIN( 122)										 ::haxe::ds::GenericStack_Int d8 = b59->data;
HXDLIN( 122)										if (::hx::IsNull( d8->head )) {
HXLINE( 122)											int _g174 = 0;
HXDLIN( 122)											int _g175 = len17;
HXDLIN( 122)											while((_g174 < _g175)){
HXLINE( 122)												_g174 = (_g174 + 1);
HXDLIN( 122)												int i77 = (_g174 - 1);
HXDLIN( 122)												d8->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d8->head);
            											}
            										}
            										else {
HXLINE( 122)											int _g176 = 0;
HXDLIN( 122)											int _g177 = len17;
HXDLIN( 122)											while((_g176 < _g177)){
HXLINE( 122)												_g176 = (_g176 + 1);
HXDLIN( 122)												int i78 = (_g176 - 1);
HXDLIN( 122)												{
HXLINE( 122)													 ::haxe::ds::GenericCell_Int l8 = b59->data->head;
HXDLIN( 122)													 ::haxe::ds::GenericCell_Int prev8 = null();
HXDLIN( 122)													{
HXLINE( 122)														int _g178 = 0;
HXDLIN( 122)														int _g179 = i78;
HXDLIN( 122)														while((_g178 < _g179)){
HXLINE( 122)															_g178 = (_g178 + 1);
HXDLIN( 122)															int i79 = (_g178 - 1);
HXLINE( 345)															prev8 = l8;
HXLINE( 346)															l8 = l8->next;
            														}
            													}
HXLINE( 122)													if (::hx::IsNull( prev8 )) {
HXLINE( 122)														b59->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN( 122)														l8 = null();
            													}
            													else {
HXLINE( 122)														prev8->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN( 122)														l8 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 122)								undoImage25 = b59;
            							}
            							break;
            						}
HXDLIN( 122)						this261->image = undoImage25;
HXDLIN( 122)						this261->width = width8;
HXDLIN( 122)						this261->height = height8;
HXDLIN( 122)						this261->imageType = ( (int)(imageType8) );
HXDLIN( 122)						undoImage24 = this261;
HXDLIN( 122)						{
HXLINE( 122)							int rectLeft8 = xIter38->start;
HXDLIN( 122)							int rectTop8 = yIter38->start;
HXDLIN( 122)							int rectRight8 = xIter38->max;
HXDLIN( 122)							bool forceClear8 = false;
HXDLIN( 122)							{
HXLINE( 122)								int _g180 = rectTop8;
HXDLIN( 122)								int _g181 = yIter38->max;
HXDLIN( 122)								while((_g180 < _g181)){
HXLINE( 122)									_g180 = (_g180 + 1);
HXDLIN( 122)									int dy9 = (_g180 - 1);
HXDLIN( 122)									{
HXLINE( 122)										int _g182 = rectLeft8;
HXDLIN( 122)										int _g183 = rectRight8;
HXDLIN( 122)										while((_g182 < _g183)){
HXLINE( 122)											_g182 = (_g182 + 1);
HXDLIN( 122)											int dx9 = (_g182 - 1);
HXDLIN( 122)											::Dynamic this263 = this260->image;
HXDLIN( 122)											int index34;
HXDLIN( 122)											if (this260->useVirtualPos) {
HXLINE( 122)												index34 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this260->virtualY) * ( (Float)(this260->width) )) + dx9) - this260->virtualX));
            											}
            											else {
HXLINE( 122)												index34 = ::Std_obj::_hx_int(( (Float)(((dy9 * this260->width) + dx9)) ));
            											}
HXDLIN( 122)											int c26 = ::iterMagic::Iimg_obj::get(this263,index34);
HXDLIN( 122)											int col8;
HXDLIN( 122)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)												col8 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            											}
            											else {
HXLINE( 122)												col8 = c26;
            											}
HXDLIN( 122)											bool _hx_tmp64;
HXDLIN( 122)											if (this260->useMask) {
HXLINE( 122)												_hx_tmp64 = ::hx::IsNotNull( this260->mask );
            											}
            											else {
HXLINE( 122)												_hx_tmp64 = false;
            											}
HXDLIN( 122)											if (_hx_tmp64) {
HXLINE( 122)												 ::pi_xy::ImageStruct this264 = this260->mask;
HXDLIN( 122)												::Dynamic this265 = this264->image;
HXDLIN( 122)												int index35;
HXDLIN( 122)												if (this264->useVirtualPos) {
HXLINE( 122)													index35 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this264->virtualY) * ( (Float)(this264->width) )) + dx9) - this264->virtualX));
            												}
            												else {
HXLINE( 122)													index35 = ::Std_obj::_hx_int(( (Float)(((dy9 * this264->width) + dx9)) ));
            												}
HXDLIN( 122)												int c27 = ::iterMagic::Iimg_obj::get(this265,index35);
HXDLIN( 122)												int v28;
HXDLIN( 122)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)													v28 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            												}
            												else {
HXLINE( 122)													v28 = c27;
            												}
HXDLIN( 122)												int maskPixel8 = v28;
HXDLIN( 122)												int this266 = col8;
HXDLIN( 122)												if ((maskPixel8 == 0)) {
HXLINE( 122)													col8 = this266;
            												}
            												else {
HXLINE( 122)													Float m08;
HXDLIN( 122)													int this267 = ((maskPixel8 >> 24) & 255);
HXDLIN( 122)													if ((this267 == 0)) {
HXLINE( 122)														m08 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														m08 = (( (Float)(this267) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float m18;
HXDLIN( 122)													int this268 = ((maskPixel8 >> 16) & 255);
HXDLIN( 122)													if ((this268 == 0)) {
HXLINE( 122)														m18 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														m18 = (( (Float)(this268) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float m28;
HXDLIN( 122)													int this269 = ((maskPixel8 >> 8) & 255);
HXDLIN( 122)													if ((this269 == 0)) {
HXLINE( 122)														m28 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														m28 = (( (Float)(this269) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float m38;
HXDLIN( 122)													int this270 = (maskPixel8 & 255);
HXDLIN( 122)													if ((this270 == 0)) {
HXLINE( 122)														m38 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														m38 = (( (Float)(this270) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													int ch08 = ::Std_obj::_hx_int(((((Float)1.) - m08) * ( (Float)(((this266 >> 24) & 255)) )));
HXDLIN( 122)													int ch18 = ::Std_obj::_hx_int(((((Float)1.) - m18) * ( (Float)(((this266 >> 16) & 255)) )));
HXDLIN( 122)													int ch28 = ::Std_obj::_hx_int(((((Float)1.) - m28) * ( (Float)(((this266 >> 8) & 255)) )));
HXDLIN( 122)													int ch38 = ::Std_obj::_hx_int(((((Float)1.) - m38) * ( (Float)((this266 & 255)) )));
HXDLIN( 122)													col8 = ((((::Math_obj::round((( (Float)(ch08) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch18) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch28) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch38) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 122)											if ((col8 != 0)) {
HXLINE( 122)												int x30 = (dx9 - rectLeft8);
HXDLIN( 122)												int y31 = (dy9 - rectTop8);
HXDLIN( 122)												int c28 = col8;
HXDLIN( 122)												bool _hx_tmp65;
HXDLIN( 122)												if ((((c28 >> 24) & 255) < 254)) {
HXLINE( 122)													_hx_tmp65 = undoImage24->transparent;
            												}
            												else {
HXLINE( 122)													_hx_tmp65 = false;
            												}
HXDLIN( 122)												if (_hx_tmp65) {
HXLINE( 122)													int location16;
HXDLIN( 122)													if (undoImage24->useVirtualPos) {
HXLINE( 122)														location16 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x30) - undoImage24->virtualX));
            													}
            													else {
HXLINE( 122)														location16 = ::Std_obj::_hx_int(( (Float)(((y31 * undoImage24->width) + x30)) ));
            													}
HXDLIN( 122)													int this271 = ::iterMagic::Iimg_obj::get(undoImage24->image,location16);
HXDLIN( 122)													int this272;
HXDLIN( 122)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)														this272 = ((((((this271 >> 24) & 255) << 24) | ((this271 & 255) << 16)) | (((this271 >> 8) & 255) << 8)) | ((this271 >> 16) & 255));
            													}
            													else {
HXLINE( 122)														this272 = this271;
            													}
HXDLIN( 122)													Float a120;
HXDLIN( 122)													int this273 = ((this272 >> 24) & 255);
HXDLIN( 122)													if ((this273 == 0)) {
HXLINE( 122)														a120 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														a120 = (( (Float)(this273) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float r117;
HXDLIN( 122)													int this274 = ((this272 >> 16) & 255);
HXDLIN( 122)													if ((this274 == 0)) {
HXLINE( 122)														r117 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														r117 = (( (Float)(this274) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float g117;
HXDLIN( 122)													int this275 = ((this272 >> 8) & 255);
HXDLIN( 122)													if ((this275 == 0)) {
HXLINE( 122)														g117 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														g117 = (( (Float)(this275) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float b121;
HXDLIN( 122)													int this276 = (this272 & 255);
HXDLIN( 122)													if ((this276 == 0)) {
HXLINE( 122)														b121 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														b121 = (( (Float)(this276) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float a218;
HXDLIN( 122)													int this277 = ((col8 >> 24) & 255);
HXDLIN( 122)													if ((this277 == 0)) {
HXLINE( 122)														a218 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														a218 = (( (Float)(this277) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float r217;
HXDLIN( 122)													int this278 = ((col8 >> 16) & 255);
HXDLIN( 122)													if ((this278 == 0)) {
HXLINE( 122)														r217 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														r217 = (( (Float)(this278) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float g217;
HXDLIN( 122)													int this279 = ((col8 >> 8) & 255);
HXDLIN( 122)													if ((this279 == 0)) {
HXLINE( 122)														g217 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														g217 = (( (Float)(this279) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float b220;
HXDLIN( 122)													int this280 = (col8 & 255);
HXDLIN( 122)													if ((this280 == 0)) {
HXLINE( 122)														b220 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														b220 = (( (Float)(this280) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float a317 = (a120 * (( (Float)(1) ) - a218));
HXDLIN( 122)													int r40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a317) + (r217 * a218))));
HXDLIN( 122)													int g40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a317) + (g217 * a218))));
HXDLIN( 122)													int b60 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b121 * a317) + (b220 * a218))));
HXDLIN( 122)													int a54 = ::Std_obj::_hx_int((( (Float)(255) ) * (a317 + a218)));
HXDLIN( 122)													int blended16 = ((((a54 << 24) | (r40 << 16)) | (g40 << 8)) | b60);
HXDLIN( 122)													{
HXLINE( 122)														int _hx_tmp66;
HXDLIN( 122)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)															_hx_tmp66 = ((((((blended16 >> 24) & 255) << 24) | ((blended16 & 255) << 16)) | (((blended16 >> 8) & 255) << 8)) | ((blended16 >> 16) & 255));
            														}
            														else {
HXLINE( 122)															_hx_tmp66 = blended16;
            														}
HXDLIN( 122)														::iterMagic::Iimg_obj::set(undoImage24->image,location16,_hx_tmp66);
            													}
            												}
            												else {
HXLINE( 122)													::Dynamic this281 = undoImage24->image;
HXDLIN( 122)													int index36;
HXDLIN( 122)													if (undoImage24->useVirtualPos) {
HXLINE( 122)														index36 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x30) - undoImage24->virtualX));
            													}
            													else {
HXLINE( 122)														index36 = ::Std_obj::_hx_int(( (Float)(((y31 * undoImage24->width) + x30)) ));
            													}
HXDLIN( 122)													int _hx_tmp67;
HXDLIN( 122)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)														_hx_tmp67 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            													}
            													else {
HXLINE( 122)														_hx_tmp67 = c28;
            													}
HXDLIN( 122)													::iterMagic::Iimg_obj::set(this281,index36,_hx_tmp67);
            												}
            											}
            											else {
HXLINE( 122)												if (forceClear8) {
HXLINE( 122)													::Dynamic this282 = undoImage24->image;
HXDLIN( 122)													int x31 = (dx9 - rectLeft8);
HXDLIN( 122)													int y32 = (dy9 - rectTop8);
HXDLIN( 122)													int index37;
HXDLIN( 122)													if (undoImage24->useVirtualPos) {
HXLINE( 122)														index37 = ::Std_obj::_hx_int(((((( (Float)(y32) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x31) - undoImage24->virtualX));
            													}
            													else {
HXLINE( 122)														index37 = ::Std_obj::_hx_int(( (Float)(((y32 * undoImage24->width) + x31)) ));
            													}
HXDLIN( 122)													::iterMagic::Iimg_obj::set(this282,index37,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 122)					{
HXLINE( 122)						int _g_min16 = xIter38->start;
HXDLIN( 122)						int _g_max16 = xIter38->max;
HXDLIN( 122)						while((_g_min16 < _g_max16)){
HXLINE( 122)							_g_min16 = (_g_min16 + 1);
HXDLIN( 122)							int px6 = (_g_min16 - 1);
HXDLIN( 122)							Float pcx6 = (( (Float)(px6) ) - farX);
HXDLIN( 122)							{
HXLINE( 122)								int _g_min17 = yIter38->start;
HXDLIN( 122)								int _g_max17 = yIter38->max;
HXDLIN( 122)								while((_g_min17 < _g_max17)){
HXLINE( 122)									_g_min17 = (_g_min17 + 1);
HXDLIN( 122)									int py6 = (_g_min17 - 1);
HXDLIN( 122)									Float pcy6 = (( (Float)(py6) ) - cy7);
HXDLIN( 122)									Float dot316 = ((pcx6 * bcx6) + (pcy6 * bcy6));
HXDLIN( 122)									Float dot326 = ((pcx6 * acx6) + (pcy6 * acy6));
HXDLIN( 122)									Float ratioA6 = (((dot226 * dot316) - (dot126 * dot326)) * denom16);
HXDLIN( 122)									Float ratioB6 = (((dot116 * dot326) - (dot126 * dot316)) * denom16);
HXDLIN( 122)									Float ratioC6 = ((((Float)1.0) - ratioB6) - ratioA6);
HXDLIN( 122)									bool _hx_tmp68;
HXDLIN( 122)									bool _hx_tmp69;
HXDLIN( 122)									if ((ratioA6 >= 0)) {
HXLINE( 122)										_hx_tmp69 = (ratioB6 >= 0);
            									}
            									else {
HXLINE( 122)										_hx_tmp69 = false;
            									}
HXDLIN( 122)									if (_hx_tmp69) {
HXLINE( 122)										_hx_tmp68 = (ratioC6 >= 0);
            									}
            									else {
HXLINE( 122)										_hx_tmp68 = false;
            									}
HXDLIN( 122)									if (_hx_tmp68) {
HXLINE( 122)										int i80 = ::Std_obj::_hx_int((((( (Float)(aA6) ) * ratioA6) + (( (Float)(aB6) ) * ratioB6)) + (( (Float)(aC6) ) * ratioC6)));
HXDLIN( 122)										if ((i80 > 255)) {
HXLINE(  24)											i80 = 255;
            										}
HXLINE( 122)										if ((i80 < 0)) {
HXLINE(  25)											i80 = 0;
            										}
HXLINE( 122)										int a55 = i80;
HXDLIN( 122)										int i81 = ::Std_obj::_hx_int((((( (Float)(rA6) ) * ratioA6) + (( (Float)(rB6) ) * ratioB6)) + (( (Float)(rC6) ) * ratioC6)));
HXDLIN( 122)										if ((i81 > 255)) {
HXLINE(  24)											i81 = 255;
            										}
HXLINE( 122)										if ((i81 < 0)) {
HXLINE(  25)											i81 = 0;
            										}
HXLINE( 122)										int r41 = i81;
HXDLIN( 122)										int i82 = ::Std_obj::_hx_int((((( (Float)(gA6) ) * ratioA6) + (( (Float)(gB6) ) * ratioB6)) + (( (Float)(gC6) ) * ratioC6)));
HXDLIN( 122)										if ((i82 > 255)) {
HXLINE(  24)											i82 = 255;
            										}
HXLINE( 122)										if ((i82 < 0)) {
HXLINE(  25)											i82 = 0;
            										}
HXLINE( 122)										int g41 = i82;
HXDLIN( 122)										int i83 = ::Std_obj::_hx_int((((( (Float)(bA6) ) * ratioA6) + (( (Float)(bB6) ) * ratioB6)) + (( (Float)(bC6) ) * ratioC6)));
HXDLIN( 122)										if ((i83 > 255)) {
HXLINE(  24)											i83 = 255;
            										}
HXLINE( 122)										if ((i83 < 0)) {
HXLINE(  25)											i83 = 0;
            										}
HXLINE( 122)										int b61 = i83;
HXDLIN( 122)										{
HXLINE( 122)											int location17;
HXDLIN( 122)											if (this260->useVirtualPos) {
HXLINE( 122)												location17 = ::Std_obj::_hx_int(((((( (Float)(py6) ) - this260->virtualY) * ( (Float)(this260->width) )) + px6) - this260->virtualX));
            											}
            											else {
HXLINE( 122)												location17 = ::Std_obj::_hx_int(( (Float)(((py6 * this260->width) + px6)) ));
            											}
HXDLIN( 122)											bool _hx_tmp70;
HXDLIN( 122)											if (this260->transparent) {
HXLINE( 122)												_hx_tmp70 = (a55 < 254);
            											}
            											else {
HXLINE( 122)												_hx_tmp70 = false;
            											}
HXDLIN( 122)											if (_hx_tmp70) {
HXLINE( 122)												int this283 = ::iterMagic::Iimg_obj::get(this260->image,location17);
HXDLIN( 122)												int old6;
HXDLIN( 122)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)													old6 = ((((((this283 >> 24) & 255) << 24) | ((this283 & 255) << 16)) | (((this283 >> 8) & 255) << 8)) | ((this283 >> 16) & 255));
            												}
            												else {
HXLINE( 122)													old6 = this283;
            												}
HXDLIN( 122)												int rhs6 = ((((a55 << 24) | (r41 << 16)) | (g41 << 8)) | b61);
HXDLIN( 122)												Float a121;
HXDLIN( 122)												int this284 = ((old6 >> 24) & 255);
HXDLIN( 122)												if ((this284 == 0)) {
HXLINE( 122)													a121 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													a121 = (( (Float)(this284) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float r118;
HXDLIN( 122)												int this285 = ((old6 >> 16) & 255);
HXDLIN( 122)												if ((this285 == 0)) {
HXLINE( 122)													r118 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													r118 = (( (Float)(this285) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float g118;
HXDLIN( 122)												int this286 = ((old6 >> 8) & 255);
HXDLIN( 122)												if ((this286 == 0)) {
HXLINE( 122)													g118 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													g118 = (( (Float)(this286) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float b122;
HXDLIN( 122)												int this287 = (old6 & 255);
HXDLIN( 122)												if ((this287 == 0)) {
HXLINE( 122)													b122 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													b122 = (( (Float)(this287) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float a219;
HXDLIN( 122)												int this288 = ((rhs6 >> 24) & 255);
HXDLIN( 122)												if ((this288 == 0)) {
HXLINE( 122)													a219 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													a219 = (( (Float)(this288) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float r218;
HXDLIN( 122)												int this289 = ((rhs6 >> 16) & 255);
HXDLIN( 122)												if ((this289 == 0)) {
HXLINE( 122)													r218 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													r218 = (( (Float)(this289) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float g218;
HXDLIN( 122)												int this290 = ((rhs6 >> 8) & 255);
HXDLIN( 122)												if ((this290 == 0)) {
HXLINE( 122)													g218 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													g218 = (( (Float)(this290) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float b221;
HXDLIN( 122)												int this291 = (rhs6 & 255);
HXDLIN( 122)												if ((this291 == 0)) {
HXLINE( 122)													b221 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													b221 = (( (Float)(this291) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float a318 = (a121 * (( (Float)(1) ) - a219));
HXDLIN( 122)												int r42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r118 * a318) + (r218 * a219))));
HXDLIN( 122)												int g42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g118 * a318) + (g218 * a219))));
HXDLIN( 122)												int b62 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b122 * a318) + (b221 * a219))));
HXDLIN( 122)												int a56 = ::Std_obj::_hx_int((( (Float)(255) ) * (a318 + a219)));
HXDLIN( 122)												int blended17 = ((((a56 << 24) | (r42 << 16)) | (g42 << 8)) | b62);
HXDLIN( 122)												{
HXLINE( 122)													int _hx_tmp71;
HXDLIN( 122)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)														_hx_tmp71 = ((((((blended17 >> 24) & 255) << 24) | ((blended17 & 255) << 16)) | (((blended17 >> 8) & 255) << 8)) | ((blended17 >> 16) & 255));
            													}
            													else {
HXLINE( 122)														_hx_tmp71 = blended17;
            													}
HXDLIN( 122)													::iterMagic::Iimg_obj::set(this260->image,location17,_hx_tmp71);
            												}
            											}
            											else {
HXLINE( 122)												int value6;
HXDLIN( 122)												if (this260->isLittle) {
HXLINE( 122)													value6 = ((((a55 << 24) | (b61 << 16)) | (g41 << 8)) | r41);
            												}
            												else {
HXLINE( 122)													value6 = ((((a55 << 24) | (r41 << 16)) | (g41 << 8)) | b61);
            												}
HXDLIN( 122)												::iterMagic::Iimg_obj::set(this260->image,location17,value6);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 122)					if ((hasHit8 == false)) {
HXLINE( 122)						 ::pi_xy::algo::HitTri v29 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX,y29,bx5,y29,farX,cy7,true);
HXDLIN( 122)						if (hasUndo8) {
HXLINE( 122)							v29->undoImage = undoImage24;
HXDLIN( 122)							v29->undoX = xIter38->start;
HXDLIN( 122)							v29->undoY = yIter38->start;
            						}
            					}
            				}
HXDLIN( 122)				{
HXLINE( 122)					bool hasHit9 = false;
HXDLIN( 122)					bool hasUndo9 = false;
HXDLIN( 122)					int aA7 = ((colorC >> 24) & 255);
HXDLIN( 122)					int rA7 = ((colorC >> 16) & 255);
HXDLIN( 122)					int gA7 = ((colorC >> 8) & 255);
HXDLIN( 122)					int bA7 = (colorC & 255);
HXDLIN( 122)					int aB7 = ((colorB >> 24) & 255);
HXDLIN( 122)					int rB7 = ((colorB >> 16) & 255);
HXDLIN( 122)					int gB7 = ((colorB >> 8) & 255);
HXDLIN( 122)					int bB7 = (colorB & 255);
HXDLIN( 122)					int aC7 = ((colorC >> 24) & 255);
HXDLIN( 122)					int rC7 = ((colorC >> 16) & 255);
HXDLIN( 122)					int gC7 = ((colorC >> 8) & 255);
HXDLIN( 122)					int bC7 = (colorC & 255);
HXDLIN( 122)					Float bcx7 = (bx5 - farX);
HXDLIN( 122)					Float bcy7 = (cy7 - cy7);
HXDLIN( 122)					Float acx7 = (bx5 - farX);
HXDLIN( 122)					Float acy7 = (y29 - cy7);
HXDLIN( 122)					Float dot117 = ((bcx7 * bcx7) + (bcy7 * bcy7));
HXDLIN( 122)					Float dot127 = ((bcx7 * acx7) + (bcy7 * acy7));
HXDLIN( 122)					Float dot227 = ((acx7 * acx7) + (acy7 * acy7));
HXDLIN( 122)					Float denom17 = (( (Float)(1) ) / ((dot117 * dot227) - (dot127 * dot127)));
HXDLIN( 122)					 ::pi_xy::iter::IntIterStart xIter39;
HXDLIN( 122)					if ((bx5 > bx5)) {
HXLINE( 122)						if ((bx5 > farX)) {
HXLINE( 122)							int min36;
HXDLIN( 122)							if ((bx5 > farX)) {
HXLINE( 122)								min36 = ::Math_obj::floor(farX);
            							}
            							else {
HXLINE( 122)								min36 = ::Math_obj::floor(bx5);
            							}
HXDLIN( 122)							int ii_min72 = min36;
HXDLIN( 122)							int ii_max72 = ::Math_obj::ceil(bx5);
HXDLIN( 122)							xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min72,ii_max72);
            						}
            						else {
HXLINE( 122)							int ii_min73 = ::Math_obj::floor(bx5);
HXDLIN( 122)							int ii_max73 = ::Math_obj::ceil(farX);
HXDLIN( 122)							xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min73,ii_max73);
            						}
            					}
            					else {
HXLINE( 122)						if ((bx5 > farX)) {
HXLINE( 122)							int min37;
HXDLIN( 122)							if ((bx5 > farX)) {
HXLINE( 122)								min37 = ::Math_obj::floor(farX);
            							}
            							else {
HXLINE( 122)								min37 = ::Math_obj::ceil(bx5);
            							}
HXDLIN( 122)							int ii_min74 = min37;
HXDLIN( 122)							int ii_max74 = ::Math_obj::ceil(bx5);
HXDLIN( 122)							xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min74,ii_max74);
            						}
            						else {
HXLINE( 122)							int ii_min75 = ::Math_obj::floor(bx5);
HXDLIN( 122)							int ii_max75 = ::Math_obj::ceil(farX);
HXDLIN( 122)							xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min75,ii_max75);
            						}
            					}
HXDLIN( 122)					 ::pi_xy::iter::IntIterStart yIter39;
HXDLIN( 122)					if ((y29 > cy7)) {
HXLINE( 122)						if ((y29 > cy7)) {
HXLINE( 122)							int min38;
HXDLIN( 122)							if ((cy7 > cy7)) {
HXLINE( 122)								min38 = ::Math_obj::floor(cy7);
            							}
            							else {
HXLINE( 122)								min38 = ::Math_obj::floor(cy7);
            							}
HXDLIN( 122)							int ii_min76 = min38;
HXDLIN( 122)							int ii_max76 = ::Math_obj::ceil(y29);
HXDLIN( 122)							yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min76,ii_max76);
            						}
            						else {
HXLINE( 122)							int ii_min77 = ::Math_obj::floor(cy7);
HXDLIN( 122)							int ii_max77 = ::Math_obj::ceil(cy7);
HXDLIN( 122)							yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min77,ii_max77);
            						}
            					}
            					else {
HXLINE( 122)						if ((cy7 > cy7)) {
HXLINE( 122)							int min39;
HXDLIN( 122)							if ((y29 > cy7)) {
HXLINE( 122)								min39 = ::Math_obj::floor(cy7);
            							}
            							else {
HXLINE( 122)								min39 = ::Math_obj::ceil(y29);
            							}
HXDLIN( 122)							int ii_min78 = min39;
HXDLIN( 122)							int ii_max78 = ::Math_obj::ceil(cy7);
HXDLIN( 122)							yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min78,ii_max78);
            						}
            						else {
HXLINE( 122)							int ii_min79 = ::Math_obj::floor(y29);
HXDLIN( 122)							int ii_max79 = ::Math_obj::ceil(cy7);
HXDLIN( 122)							yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min79,ii_max79);
            						}
            					}
HXDLIN( 122)					 ::pi_xy::ImageStruct undoImage27 = null();
HXDLIN( 122)					if (hasUndo9) {
HXLINE( 122)						int width9 = ((xIter39->max - xIter39->start) + 1);
HXDLIN( 122)						int height9 = ((yIter39->max - yIter39->start) + 1);
HXDLIN( 122)						 ::Dynamic imageType9 = null();
HXDLIN( 122)						 ::pi_xy::ImageStruct this292 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 122)						if (::hx::IsNull( imageType9 )) {
HXLINE(  54)							imageType9 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 122)						::Dynamic undoImage28;
HXDLIN( 122)						switch((int)(( (int)(imageType9) ))){
            							case (int)0: {
HXLINE( 122)								 ::iterMagic::BytesImg byt9 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 122)								 ::iterMagic::BytesImg b63 = byt9;
HXDLIN( 122)								{
HXLINE( 122)									b63->width = width9;
HXDLIN( 122)									b63->height = height9;
HXDLIN( 122)									b63->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 122)									b63->data = ::haxe::io::Bytes_obj::alloc((b63->length * 4));
HXDLIN( 122)									{
HXLINE( 122)										int len18 = b63->length;
HXDLIN( 122)										int w9 = 0;
HXDLIN( 122)										{
HXLINE( 122)											int _g184 = 0;
HXDLIN( 122)											int _g185 = b63->height;
HXDLIN( 122)											while((_g184 < _g185)){
HXLINE( 122)												_g184 = (_g184 + 1);
HXDLIN( 122)												int y33 = (_g184 - 1);
HXDLIN( 122)												{
HXLINE( 122)													int _g186 = 0;
HXDLIN( 122)													int _g187 = b63->width;
HXDLIN( 122)													while((_g186 < _g187)){
HXLINE( 122)														_g186 = (_g186 + 1);
HXDLIN( 122)														int x32 = (_g186 - 1);
HXDLIN( 122)														{
HXLINE( 122)															w9 = (w9 + 1);
HXDLIN( 122)															b63->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 122)														{
HXLINE( 122)															w9 = (w9 + 1);
HXDLIN( 122)															b63->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 122)														{
HXLINE( 122)															w9 = (w9 + 1);
HXDLIN( 122)															b63->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 122)														{
HXLINE( 122)															w9 = (w9 + 1);
HXDLIN( 122)															b63->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 122)								undoImage28 = b63;
            							}
            							break;
            							case (int)1: {
HXLINE( 122)								 ::iterMagic::ArrIntImg arrI9 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 122)								 ::iterMagic::ArrIntImg a57 = arrI9;
HXDLIN( 122)								{
HXLINE( 122)									a57->width = width9;
HXDLIN( 122)									a57->height = height9;
HXDLIN( 122)									a57->data = ::Array_obj< int >::__new(0);
HXDLIN( 122)									a57->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 122)									{
HXLINE( 122)										int _g188 = 0;
HXDLIN( 122)										int _g189 = a57->length;
HXDLIN( 122)										while((_g188 < _g189)){
HXLINE( 122)											_g188 = (_g188 + 1);
HXDLIN( 122)											int i84 = (_g188 - 1);
HXDLIN( 122)											a57->data[i84] = 0;
            										}
            									}
            								}
HXDLIN( 122)								undoImage28 = a57;
            							}
            							break;
            							case (int)2: {
HXLINE( 122)								 ::iterMagic::U32ArrImg u32a9 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 122)								 ::iterMagic::U32ArrImg b64 = u32a9;
HXDLIN( 122)								{
HXLINE( 122)									b64->width = width9;
HXDLIN( 122)									b64->height = height9;
HXDLIN( 122)									b64->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 122)									int size9 = (b64->length * 4);
HXDLIN( 122)									b64->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size9),0,size9);
HXDLIN( 122)									{
HXLINE( 122)										int _g190 = 0;
HXDLIN( 122)										int _g191 = b64->length;
HXDLIN( 122)										while((_g190 < _g191)){
HXLINE( 122)											_g190 = (_g190 + 1);
HXDLIN( 122)											int i85 = (_g190 - 1);
HXDLIN( 122)											{
HXLINE( 122)												 ::haxe::io::ArrayBufferViewImpl this293 = b64->data;
HXDLIN( 122)												bool undoImage29;
HXDLIN( 122)												if ((i85 >= 0)) {
HXLINE( 122)													undoImage29 = (i85 < (this293->byteLength >> 2));
            												}
            												else {
HXLINE( 122)													undoImage29 = false;
            												}
HXDLIN( 122)												if (undoImage29) {
HXLINE( 122)													 ::haxe::io::Bytes _this9 = this293->bytes;
HXDLIN( 122)													int pos9 = ((i85 << 2) + this293->byteOffset);
HXDLIN( 122)													_this9->b[pos9] = ( (unsigned char)(0) );
HXDLIN( 122)													_this9->b[(pos9 + 1)] = ( (unsigned char)(0) );
HXDLIN( 122)													_this9->b[(pos9 + 2)] = ( (unsigned char)(0) );
HXDLIN( 122)													_this9->b[(pos9 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 122)								undoImage28 = b64;
            							}
            							break;
            							case (int)3: {
HXLINE( 122)								 ::iterMagic::VecIntImg vec9 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 122)								 ::iterMagic::VecIntImg v30 = vec9;
HXDLIN( 122)								{
HXLINE( 122)									v30->width = width9;
HXDLIN( 122)									v30->height = height9;
HXDLIN( 122)									v30->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 122)									v30->data = ::Array_obj< int >::__new(v30->length);
HXDLIN( 122)									{
HXLINE( 122)										int _g192 = 0;
HXDLIN( 122)										int _g193 = v30->length;
HXDLIN( 122)										while((_g192 < _g193)){
HXLINE( 122)											_g192 = (_g192 + 1);
HXDLIN( 122)											int i86 = (_g192 - 1);
HXDLIN( 122)											v30->data->__unsafe_set(i86,0);
            										}
            									}
            								}
HXDLIN( 122)								undoImage28 = v30;
            							}
            							break;
            							case (int)4: {
HXLINE( 122)								 ::iterMagic::StackIntImg sInt9 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 122)								 ::iterMagic::StackIntImg b65 = sInt9;
HXDLIN( 122)								{
HXLINE( 122)									b65->width = width9;
HXDLIN( 122)									b65->height = height9;
HXDLIN( 122)									b65->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 122)									b65->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 122)									{
HXLINE( 122)										int len19 = b65->length;
HXDLIN( 122)										 ::haxe::ds::GenericStack_Int d9 = b65->data;
HXDLIN( 122)										if (::hx::IsNull( d9->head )) {
HXLINE( 122)											int _g194 = 0;
HXDLIN( 122)											int _g195 = len19;
HXDLIN( 122)											while((_g194 < _g195)){
HXLINE( 122)												_g194 = (_g194 + 1);
HXDLIN( 122)												int i87 = (_g194 - 1);
HXDLIN( 122)												d9->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d9->head);
            											}
            										}
            										else {
HXLINE( 122)											int _g196 = 0;
HXDLIN( 122)											int _g197 = len19;
HXDLIN( 122)											while((_g196 < _g197)){
HXLINE( 122)												_g196 = (_g196 + 1);
HXDLIN( 122)												int i88 = (_g196 - 1);
HXDLIN( 122)												{
HXLINE( 122)													 ::haxe::ds::GenericCell_Int l9 = b65->data->head;
HXDLIN( 122)													 ::haxe::ds::GenericCell_Int prev9 = null();
HXDLIN( 122)													{
HXLINE( 122)														int _g198 = 0;
HXDLIN( 122)														int _g199 = i88;
HXDLIN( 122)														while((_g198 < _g199)){
HXLINE( 122)															_g198 = (_g198 + 1);
HXDLIN( 122)															int i89 = (_g198 - 1);
HXLINE( 345)															prev9 = l9;
HXLINE( 346)															l9 = l9->next;
            														}
            													}
HXLINE( 122)													if (::hx::IsNull( prev9 )) {
HXLINE( 122)														b65->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN( 122)														l9 = null();
            													}
            													else {
HXLINE( 122)														prev9->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN( 122)														l9 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 122)								undoImage28 = b65;
            							}
            							break;
            						}
HXDLIN( 122)						this292->image = undoImage28;
HXDLIN( 122)						this292->width = width9;
HXDLIN( 122)						this292->height = height9;
HXDLIN( 122)						this292->imageType = ( (int)(imageType9) );
HXDLIN( 122)						undoImage27 = this292;
HXDLIN( 122)						{
HXLINE( 122)							int rectLeft9 = xIter39->start;
HXDLIN( 122)							int rectTop9 = yIter39->start;
HXDLIN( 122)							int rectRight9 = xIter39->max;
HXDLIN( 122)							bool forceClear9 = false;
HXDLIN( 122)							{
HXLINE( 122)								int _g200 = rectTop9;
HXDLIN( 122)								int _g201 = yIter39->max;
HXDLIN( 122)								while((_g200 < _g201)){
HXLINE( 122)									_g200 = (_g200 + 1);
HXDLIN( 122)									int dy10 = (_g200 - 1);
HXDLIN( 122)									{
HXLINE( 122)										int _g202 = rectLeft9;
HXDLIN( 122)										int _g203 = rectRight9;
HXDLIN( 122)										while((_g202 < _g203)){
HXLINE( 122)											_g202 = (_g202 + 1);
HXDLIN( 122)											int dx10 = (_g202 - 1);
HXDLIN( 122)											::Dynamic this294 = this260->image;
HXDLIN( 122)											int index38;
HXDLIN( 122)											if (this260->useVirtualPos) {
HXLINE( 122)												index38 = ::Std_obj::_hx_int(((((( (Float)(dy10) ) - this260->virtualY) * ( (Float)(this260->width) )) + dx10) - this260->virtualX));
            											}
            											else {
HXLINE( 122)												index38 = ::Std_obj::_hx_int(( (Float)(((dy10 * this260->width) + dx10)) ));
            											}
HXDLIN( 122)											int c29 = ::iterMagic::Iimg_obj::get(this294,index38);
HXDLIN( 122)											int col9;
HXDLIN( 122)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)												col9 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            											}
            											else {
HXLINE( 122)												col9 = c29;
            											}
HXDLIN( 122)											bool _hx_tmp72;
HXDLIN( 122)											if (this260->useMask) {
HXLINE( 122)												_hx_tmp72 = ::hx::IsNotNull( this260->mask );
            											}
            											else {
HXLINE( 122)												_hx_tmp72 = false;
            											}
HXDLIN( 122)											if (_hx_tmp72) {
HXLINE( 122)												 ::pi_xy::ImageStruct this295 = this260->mask;
HXDLIN( 122)												::Dynamic this296 = this295->image;
HXDLIN( 122)												int index39;
HXDLIN( 122)												if (this295->useVirtualPos) {
HXLINE( 122)													index39 = ::Std_obj::_hx_int(((((( (Float)(dy10) ) - this295->virtualY) * ( (Float)(this295->width) )) + dx10) - this295->virtualX));
            												}
            												else {
HXLINE( 122)													index39 = ::Std_obj::_hx_int(( (Float)(((dy10 * this295->width) + dx10)) ));
            												}
HXDLIN( 122)												int c30 = ::iterMagic::Iimg_obj::get(this296,index39);
HXDLIN( 122)												int v31;
HXDLIN( 122)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)													v31 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            												}
            												else {
HXLINE( 122)													v31 = c30;
            												}
HXDLIN( 122)												int maskPixel9 = v31;
HXDLIN( 122)												int this297 = col9;
HXDLIN( 122)												if ((maskPixel9 == 0)) {
HXLINE( 122)													col9 = this297;
            												}
            												else {
HXLINE( 122)													Float m09;
HXDLIN( 122)													int this298 = ((maskPixel9 >> 24) & 255);
HXDLIN( 122)													if ((this298 == 0)) {
HXLINE( 122)														m09 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														m09 = (( (Float)(this298) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float m19;
HXDLIN( 122)													int this299 = ((maskPixel9 >> 16) & 255);
HXDLIN( 122)													if ((this299 == 0)) {
HXLINE( 122)														m19 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														m19 = (( (Float)(this299) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float m29;
HXDLIN( 122)													int this300 = ((maskPixel9 >> 8) & 255);
HXDLIN( 122)													if ((this300 == 0)) {
HXLINE( 122)														m29 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														m29 = (( (Float)(this300) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float m39;
HXDLIN( 122)													int this301 = (maskPixel9 & 255);
HXDLIN( 122)													if ((this301 == 0)) {
HXLINE( 122)														m39 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														m39 = (( (Float)(this301) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													int ch09 = ::Std_obj::_hx_int(((((Float)1.) - m09) * ( (Float)(((this297 >> 24) & 255)) )));
HXDLIN( 122)													int ch19 = ::Std_obj::_hx_int(((((Float)1.) - m19) * ( (Float)(((this297 >> 16) & 255)) )));
HXDLIN( 122)													int ch29 = ::Std_obj::_hx_int(((((Float)1.) - m29) * ( (Float)(((this297 >> 8) & 255)) )));
HXDLIN( 122)													int ch39 = ::Std_obj::_hx_int(((((Float)1.) - m39) * ( (Float)((this297 & 255)) )));
HXDLIN( 122)													col9 = ((((::Math_obj::round((( (Float)(ch09) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch19) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch29) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch39) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 122)											if ((col9 != 0)) {
HXLINE( 122)												int x33 = (dx10 - rectLeft9);
HXDLIN( 122)												int y34 = (dy10 - rectTop9);
HXDLIN( 122)												int c31 = col9;
HXDLIN( 122)												bool _hx_tmp73;
HXDLIN( 122)												if ((((c31 >> 24) & 255) < 254)) {
HXLINE( 122)													_hx_tmp73 = undoImage27->transparent;
            												}
            												else {
HXLINE( 122)													_hx_tmp73 = false;
            												}
HXDLIN( 122)												if (_hx_tmp73) {
HXLINE( 122)													int location18;
HXDLIN( 122)													if (undoImage27->useVirtualPos) {
HXLINE( 122)														location18 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x33) - undoImage27->virtualX));
            													}
            													else {
HXLINE( 122)														location18 = ::Std_obj::_hx_int(( (Float)(((y34 * undoImage27->width) + x33)) ));
            													}
HXDLIN( 122)													int this302 = ::iterMagic::Iimg_obj::get(undoImage27->image,location18);
HXDLIN( 122)													int this303;
HXDLIN( 122)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)														this303 = ((((((this302 >> 24) & 255) << 24) | ((this302 & 255) << 16)) | (((this302 >> 8) & 255) << 8)) | ((this302 >> 16) & 255));
            													}
            													else {
HXLINE( 122)														this303 = this302;
            													}
HXDLIN( 122)													Float a122;
HXDLIN( 122)													int this304 = ((this303 >> 24) & 255);
HXDLIN( 122)													if ((this304 == 0)) {
HXLINE( 122)														a122 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														a122 = (( (Float)(this304) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float r119;
HXDLIN( 122)													int this305 = ((this303 >> 16) & 255);
HXDLIN( 122)													if ((this305 == 0)) {
HXLINE( 122)														r119 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														r119 = (( (Float)(this305) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float g119;
HXDLIN( 122)													int this306 = ((this303 >> 8) & 255);
HXDLIN( 122)													if ((this306 == 0)) {
HXLINE( 122)														g119 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														g119 = (( (Float)(this306) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float b123;
HXDLIN( 122)													int this307 = (this303 & 255);
HXDLIN( 122)													if ((this307 == 0)) {
HXLINE( 122)														b123 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														b123 = (( (Float)(this307) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float a220;
HXDLIN( 122)													int this308 = ((col9 >> 24) & 255);
HXDLIN( 122)													if ((this308 == 0)) {
HXLINE( 122)														a220 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														a220 = (( (Float)(this308) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float r219;
HXDLIN( 122)													int this309 = ((col9 >> 16) & 255);
HXDLIN( 122)													if ((this309 == 0)) {
HXLINE( 122)														r219 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														r219 = (( (Float)(this309) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float g219;
HXDLIN( 122)													int this310 = ((col9 >> 8) & 255);
HXDLIN( 122)													if ((this310 == 0)) {
HXLINE( 122)														g219 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														g219 = (( (Float)(this310) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float b222;
HXDLIN( 122)													int this311 = (col9 & 255);
HXDLIN( 122)													if ((this311 == 0)) {
HXLINE( 122)														b222 = ((Float)0.);
            													}
            													else {
HXLINE( 122)														b222 = (( (Float)(this311) ) / ( (Float)(255) ));
            													}
HXDLIN( 122)													Float a319 = (a122 * (( (Float)(1) ) - a220));
HXDLIN( 122)													int r43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r119 * a319) + (r219 * a220))));
HXDLIN( 122)													int g43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g119 * a319) + (g219 * a220))));
HXDLIN( 122)													int b66 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b123 * a319) + (b222 * a220))));
HXDLIN( 122)													int a58 = ::Std_obj::_hx_int((( (Float)(255) ) * (a319 + a220)));
HXDLIN( 122)													int blended18 = ((((a58 << 24) | (r43 << 16)) | (g43 << 8)) | b66);
HXDLIN( 122)													{
HXLINE( 122)														int _hx_tmp74;
HXDLIN( 122)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)															_hx_tmp74 = ((((((blended18 >> 24) & 255) << 24) | ((blended18 & 255) << 16)) | (((blended18 >> 8) & 255) << 8)) | ((blended18 >> 16) & 255));
            														}
            														else {
HXLINE( 122)															_hx_tmp74 = blended18;
            														}
HXDLIN( 122)														::iterMagic::Iimg_obj::set(undoImage27->image,location18,_hx_tmp74);
            													}
            												}
            												else {
HXLINE( 122)													::Dynamic this312 = undoImage27->image;
HXDLIN( 122)													int index40;
HXDLIN( 122)													if (undoImage27->useVirtualPos) {
HXLINE( 122)														index40 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x33) - undoImage27->virtualX));
            													}
            													else {
HXLINE( 122)														index40 = ::Std_obj::_hx_int(( (Float)(((y34 * undoImage27->width) + x33)) ));
            													}
HXDLIN( 122)													int _hx_tmp75;
HXDLIN( 122)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)														_hx_tmp75 = ((((((c31 >> 24) & 255) << 24) | ((c31 & 255) << 16)) | (((c31 >> 8) & 255) << 8)) | ((c31 >> 16) & 255));
            													}
            													else {
HXLINE( 122)														_hx_tmp75 = c31;
            													}
HXDLIN( 122)													::iterMagic::Iimg_obj::set(this312,index40,_hx_tmp75);
            												}
            											}
            											else {
HXLINE( 122)												if (forceClear9) {
HXLINE( 122)													::Dynamic this313 = undoImage27->image;
HXDLIN( 122)													int x34 = (dx10 - rectLeft9);
HXDLIN( 122)													int y35 = (dy10 - rectTop9);
HXDLIN( 122)													int index41;
HXDLIN( 122)													if (undoImage27->useVirtualPos) {
HXLINE( 122)														index41 = ::Std_obj::_hx_int(((((( (Float)(y35) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x34) - undoImage27->virtualX));
            													}
            													else {
HXLINE( 122)														index41 = ::Std_obj::_hx_int(( (Float)(((y35 * undoImage27->width) + x34)) ));
            													}
HXDLIN( 122)													::iterMagic::Iimg_obj::set(this313,index41,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 122)					{
HXLINE( 122)						int _g_min18 = xIter39->start;
HXDLIN( 122)						int _g_max18 = xIter39->max;
HXDLIN( 122)						while((_g_min18 < _g_max18)){
HXLINE( 122)							_g_min18 = (_g_min18 + 1);
HXDLIN( 122)							int px7 = (_g_min18 - 1);
HXDLIN( 122)							Float pcx7 = (( (Float)(px7) ) - farX);
HXDLIN( 122)							{
HXLINE( 122)								int _g_min19 = yIter39->start;
HXDLIN( 122)								int _g_max19 = yIter39->max;
HXDLIN( 122)								while((_g_min19 < _g_max19)){
HXLINE( 122)									_g_min19 = (_g_min19 + 1);
HXDLIN( 122)									int py7 = (_g_min19 - 1);
HXDLIN( 122)									Float pcy7 = (( (Float)(py7) ) - cy7);
HXDLIN( 122)									Float dot317 = ((pcx7 * bcx7) + (pcy7 * bcy7));
HXDLIN( 122)									Float dot327 = ((pcx7 * acx7) + (pcy7 * acy7));
HXDLIN( 122)									Float ratioA7 = (((dot227 * dot317) - (dot127 * dot327)) * denom17);
HXDLIN( 122)									Float ratioB7 = (((dot117 * dot327) - (dot127 * dot317)) * denom17);
HXDLIN( 122)									Float ratioC7 = ((((Float)1.0) - ratioB7) - ratioA7);
HXDLIN( 122)									bool _hx_tmp76;
HXDLIN( 122)									bool _hx_tmp77;
HXDLIN( 122)									if ((ratioA7 >= 0)) {
HXLINE( 122)										_hx_tmp77 = (ratioB7 >= 0);
            									}
            									else {
HXLINE( 122)										_hx_tmp77 = false;
            									}
HXDLIN( 122)									if (_hx_tmp77) {
HXLINE( 122)										_hx_tmp76 = (ratioC7 >= 0);
            									}
            									else {
HXLINE( 122)										_hx_tmp76 = false;
            									}
HXDLIN( 122)									if (_hx_tmp76) {
HXLINE( 122)										int i90 = ::Std_obj::_hx_int((((( (Float)(aA7) ) * ratioA7) + (( (Float)(aB7) ) * ratioB7)) + (( (Float)(aC7) ) * ratioC7)));
HXDLIN( 122)										if ((i90 > 255)) {
HXLINE(  24)											i90 = 255;
            										}
HXLINE( 122)										if ((i90 < 0)) {
HXLINE(  25)											i90 = 0;
            										}
HXLINE( 122)										int a59 = i90;
HXDLIN( 122)										int i91 = ::Std_obj::_hx_int((((( (Float)(rA7) ) * ratioA7) + (( (Float)(rB7) ) * ratioB7)) + (( (Float)(rC7) ) * ratioC7)));
HXDLIN( 122)										if ((i91 > 255)) {
HXLINE(  24)											i91 = 255;
            										}
HXLINE( 122)										if ((i91 < 0)) {
HXLINE(  25)											i91 = 0;
            										}
HXLINE( 122)										int r44 = i91;
HXDLIN( 122)										int i92 = ::Std_obj::_hx_int((((( (Float)(gA7) ) * ratioA7) + (( (Float)(gB7) ) * ratioB7)) + (( (Float)(gC7) ) * ratioC7)));
HXDLIN( 122)										if ((i92 > 255)) {
HXLINE(  24)											i92 = 255;
            										}
HXLINE( 122)										if ((i92 < 0)) {
HXLINE(  25)											i92 = 0;
            										}
HXLINE( 122)										int g44 = i92;
HXDLIN( 122)										int i93 = ::Std_obj::_hx_int((((( (Float)(bA7) ) * ratioA7) + (( (Float)(bB7) ) * ratioB7)) + (( (Float)(bC7) ) * ratioC7)));
HXDLIN( 122)										if ((i93 > 255)) {
HXLINE(  24)											i93 = 255;
            										}
HXLINE( 122)										if ((i93 < 0)) {
HXLINE(  25)											i93 = 0;
            										}
HXLINE( 122)										int b67 = i93;
HXDLIN( 122)										{
HXLINE( 122)											int location19;
HXDLIN( 122)											if (this260->useVirtualPos) {
HXLINE( 122)												location19 = ::Std_obj::_hx_int(((((( (Float)(py7) ) - this260->virtualY) * ( (Float)(this260->width) )) + px7) - this260->virtualX));
            											}
            											else {
HXLINE( 122)												location19 = ::Std_obj::_hx_int(( (Float)(((py7 * this260->width) + px7)) ));
            											}
HXDLIN( 122)											bool _hx_tmp78;
HXDLIN( 122)											if (this260->transparent) {
HXLINE( 122)												_hx_tmp78 = (a59 < 254);
            											}
            											else {
HXLINE( 122)												_hx_tmp78 = false;
            											}
HXDLIN( 122)											if (_hx_tmp78) {
HXLINE( 122)												int this314 = ::iterMagic::Iimg_obj::get(this260->image,location19);
HXDLIN( 122)												int old7;
HXDLIN( 122)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)													old7 = ((((((this314 >> 24) & 255) << 24) | ((this314 & 255) << 16)) | (((this314 >> 8) & 255) << 8)) | ((this314 >> 16) & 255));
            												}
            												else {
HXLINE( 122)													old7 = this314;
            												}
HXDLIN( 122)												int rhs7 = ((((a59 << 24) | (r44 << 16)) | (g44 << 8)) | b67);
HXDLIN( 122)												Float a123;
HXDLIN( 122)												int this315 = ((old7 >> 24) & 255);
HXDLIN( 122)												if ((this315 == 0)) {
HXLINE( 122)													a123 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													a123 = (( (Float)(this315) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float r120;
HXDLIN( 122)												int this316 = ((old7 >> 16) & 255);
HXDLIN( 122)												if ((this316 == 0)) {
HXLINE( 122)													r120 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													r120 = (( (Float)(this316) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float g120;
HXDLIN( 122)												int this317 = ((old7 >> 8) & 255);
HXDLIN( 122)												if ((this317 == 0)) {
HXLINE( 122)													g120 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													g120 = (( (Float)(this317) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float b124;
HXDLIN( 122)												int this318 = (old7 & 255);
HXDLIN( 122)												if ((this318 == 0)) {
HXLINE( 122)													b124 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													b124 = (( (Float)(this318) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float a221;
HXDLIN( 122)												int this319 = ((rhs7 >> 24) & 255);
HXDLIN( 122)												if ((this319 == 0)) {
HXLINE( 122)													a221 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													a221 = (( (Float)(this319) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float r220;
HXDLIN( 122)												int this320 = ((rhs7 >> 16) & 255);
HXDLIN( 122)												if ((this320 == 0)) {
HXLINE( 122)													r220 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													r220 = (( (Float)(this320) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float g220;
HXDLIN( 122)												int this321 = ((rhs7 >> 8) & 255);
HXDLIN( 122)												if ((this321 == 0)) {
HXLINE( 122)													g220 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													g220 = (( (Float)(this321) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float b223;
HXDLIN( 122)												int this322 = (rhs7 & 255);
HXDLIN( 122)												if ((this322 == 0)) {
HXLINE( 122)													b223 = ((Float)0.);
            												}
            												else {
HXLINE( 122)													b223 = (( (Float)(this322) ) / ( (Float)(255) ));
            												}
HXDLIN( 122)												Float a320 = (a123 * (( (Float)(1) ) - a221));
HXDLIN( 122)												int r45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r120 * a320) + (r220 * a221))));
HXDLIN( 122)												int g45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g120 * a320) + (g220 * a221))));
HXDLIN( 122)												int b68 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b124 * a320) + (b223 * a221))));
HXDLIN( 122)												int a60 = ::Std_obj::_hx_int((( (Float)(255) ) * (a320 + a221)));
HXDLIN( 122)												int blended19 = ((((a60 << 24) | (r45 << 16)) | (g45 << 8)) | b68);
HXDLIN( 122)												{
HXLINE( 122)													int _hx_tmp79;
HXDLIN( 122)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 122)														_hx_tmp79 = ((((((blended19 >> 24) & 255) << 24) | ((blended19 & 255) << 16)) | (((blended19 >> 8) & 255) << 8)) | ((blended19 >> 16) & 255));
            													}
            													else {
HXLINE( 122)														_hx_tmp79 = blended19;
            													}
HXDLIN( 122)													::iterMagic::Iimg_obj::set(this260->image,location19,_hx_tmp79);
            												}
            											}
            											else {
HXLINE( 122)												int value7;
HXDLIN( 122)												if (this260->isLittle) {
HXLINE( 122)													value7 = ((((a59 << 24) | (b67 << 16)) | (g44 << 8)) | r44);
            												}
            												else {
HXLINE( 122)													value7 = ((((a59 << 24) | (r44 << 16)) | (g44 << 8)) | b67);
            												}
HXDLIN( 122)												::iterMagic::Iimg_obj::set(this260->image,location19,value7);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 122)					if ((hasHit9 == false)) {
HXLINE( 122)						 ::pi_xy::algo::HitTri v32 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx5,y29,bx5,cy7,farX,cy7,true);
HXDLIN( 122)						if (hasUndo9) {
HXLINE( 122)							v32->undoImage = undoImage27;
HXDLIN( 122)							v32->undoX = xIter39->start;
HXDLIN( 122)							v32->undoY = yIter39->start;
            						}
            					}
            				}
HXDLIN( 122)				if ((hasHit8 == true)) {
HXLINE( 122)					 ::pi_xy::algo::HitQuad v33 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,farX,y29,bx5,y29,bx5,cy7,farX,cy7,true);
            				}
            			}
            		}
HXDLIN( 122)		Float inlobj_ax3 = farX;
HXDLIN( 122)		Float inlobj_ay3 = y29;
HXDLIN( 122)		Float inlobj_bx3 = bx5;
HXDLIN( 122)		Float inlobj_y3 = y29;
HXDLIN( 122)		Float inlobj_cx3 = bx5;
HXDLIN( 122)		Float inlobj_cy3 = cy7;
HXDLIN( 122)		Float inlobj_x3 = farX;
HXDLIN( 122)		Float inlobj_dy3 = cy7;
HXLINE( 124)		{
HXLINE( 124)			 ::pi_xy::ImageStruct this323 = pixelimage;
HXDLIN( 124)			Float cx3 = (x + dx);
HXDLIN( 124)			Float rx1 = ( (Float)(dx) );
HXDLIN( 124)			{
HXLINE( 124)				 ::Dynamic targetError2 = ((Float)1.05);
HXDLIN( 124)				if (::hx::IsNull( targetError2 )) {
HXLINE( 113)					targetError2 = ((Float)1.05);
            				}
HXLINE( 124)				Float rSmall2;
HXDLIN( 124)				if ((rx1 > bottomRadius)) {
HXLINE( 124)					rSmall2 = bottomRadius;
            				}
            				else {
HXLINE( 124)					rSmall2 = rx1;
            				}
HXDLIN( 124)				 ::Dynamic targetE2 = ( (Float)(targetError2) );
HXDLIN( 124)				if (::hx::IsNull( targetE2 )) {
HXLINE(  20)					targetE2 = ((Float)1.05);
            				}
HXLINE( 124)				int result2 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE2) ) / rSmall2)))));
HXDLIN( 124)				int noSides2;
HXDLIN( 124)				if ((result2 < 12)) {
HXLINE( 124)					noSides2 = 12;
            				}
            				else {
HXLINE( 124)					if ((result2 > 500)) {
HXLINE( 124)						noSides2 = 500;
            					}
            					else {
HXLINE( 124)						noSides2 = result2;
            					}
            				}
HXDLIN( 124)				int sides2 = (::Math_obj::ceil((( (Float)(noSides2) ) / ( (Float)(4) ))) * 4);
HXDLIN( 124)				Float theta2 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides2) ));
HXDLIN( 124)				Float omega2 = (::Math_obj::PI / ( (Float)(2) ));
HXDLIN( 124)				int quarter2 = ::Std_obj::_hx_int((( (Float)(sides2) ) / ( (Float)(4) )));
HXDLIN( 124)				Float lastX2 = ((Float)0.);
HXDLIN( 124)				Float lastY2 = ((Float)0.);
HXDLIN( 124)				{
HXLINE(  26)					lastX2 = (cx3 + (rx1 * ::Math_obj::cos(((( (Float)(sides2) ) * theta2) + omega2))));
HXLINE(  27)					lastY2 = (lowerY + (bottomRadius * ::Math_obj::sin(((( (Float)(sides2) ) * theta2) + omega2))));
            				}
HXLINE( 124)				{
HXLINE( 124)					int _g204 = 0;
HXDLIN( 124)					int _g205 = (quarter2 + 1);
HXDLIN( 124)					while((_g204 < _g205)){
HXLINE( 124)						_g204 = (_g204 + 1);
HXDLIN( 124)						int i94 = (_g204 - 1);
HXDLIN( 124)						Float nextX2 = (cx3 + (rx1 * ::Math_obj::cos((((( (Float)(i94) ) * theta2) + ((Float)0.0001)) + omega2))));
HXDLIN( 124)						Float nextY2 = (lowerY + (bottomRadius * ::Math_obj::sin((((( (Float)(i94) ) * theta2) + ((Float)0.0001)) + omega2))));
HXDLIN( 124)						{
HXLINE( 124)							 ::pi_xy::ImageStruct this324 = this323;
HXDLIN( 124)							bool hasHit10 = false;
HXDLIN( 124)							bool hasUndo10 = false;
HXDLIN( 124)							{
HXLINE( 124)								Float bx6 = lastX2;
HXDLIN( 124)								Float by2 = lastY2;
HXDLIN( 124)								Float cx4 = nextX2;
HXDLIN( 124)								Float cy8 = nextY2;
HXDLIN( 124)								bool adjustWinding2 = (((((cx3 * by2) - (bx6 * lowerY)) + ((bx6 * cy8) - (cx4 * by2))) + ((cx4 * lowerY) - (cx3 * cy8))) > 0);
HXDLIN( 124)								if (!(adjustWinding2)) {
HXLINE( 124)									Float bx_2 = bx6;
HXDLIN( 124)									Float by_2 = by2;
HXLINE(  25)									bx6 = cx4;
HXLINE(  26)									by2 = cy8;
HXLINE(  27)									cx4 = bx_2;
HXLINE(  28)									cy8 = by_2;
            								}
HXLINE( 124)								{
HXLINE( 124)									Float s02 = ((lowerY * cx4) - (cx3 * cy8));
HXDLIN( 124)									Float sx2 = (cy8 - lowerY);
HXDLIN( 124)									Float sy2 = (cx3 - cx4);
HXDLIN( 124)									Float t02 = ((cx3 * by2) - (lowerY * bx6));
HXDLIN( 124)									Float tx2 = (lowerY - by2);
HXDLIN( 124)									Float ty2 = (bx6 - cx3);
HXDLIN( 124)									Float A2 = ((((-(by2) * cx4) + (lowerY * (-(bx6) + cx4))) + (cx3 * (by2 - cy8))) + (bx6 * cy8));
HXDLIN( 124)									 ::pi_xy::iter::IntIterStart xIter310;
HXDLIN( 124)									if ((cx3 > bx6)) {
HXLINE( 124)										if ((cx3 > cx4)) {
HXLINE( 124)											int min40;
HXDLIN( 124)											if ((bx6 > cx4)) {
HXLINE( 124)												min40 = ::Math_obj::floor(cx4);
            											}
            											else {
HXLINE( 124)												min40 = ::Math_obj::floor(bx6);
            											}
HXDLIN( 124)											int ii_min80 = min40;
HXDLIN( 124)											int ii_max80 = ::Math_obj::ceil(cx3);
HXDLIN( 124)											xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min80,ii_max80);
            										}
            										else {
HXLINE( 124)											int ii_min81 = ::Math_obj::floor(bx6);
HXDLIN( 124)											int ii_max81 = ::Math_obj::ceil(cx4);
HXDLIN( 124)											xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min81,ii_max81);
            										}
            									}
            									else {
HXLINE( 124)										if ((bx6 > cx4)) {
HXLINE( 124)											int min41;
HXDLIN( 124)											if ((cx3 > cx4)) {
HXLINE( 124)												min41 = ::Math_obj::floor(cx4);
            											}
            											else {
HXLINE( 124)												min41 = ::Math_obj::ceil(cx3);
            											}
HXDLIN( 124)											int ii_min82 = min41;
HXDLIN( 124)											int ii_max82 = ::Math_obj::ceil(bx6);
HXDLIN( 124)											xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min82,ii_max82);
            										}
            										else {
HXLINE( 124)											int ii_min83 = ::Math_obj::floor(cx3);
HXDLIN( 124)											int ii_max83 = ::Math_obj::ceil(cx4);
HXDLIN( 124)											xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min83,ii_max83);
            										}
            									}
HXDLIN( 124)									 ::pi_xy::iter::IntIterStart yIter310;
HXDLIN( 124)									if ((lowerY > by2)) {
HXLINE( 124)										if ((lowerY > cy8)) {
HXLINE( 124)											int min42;
HXDLIN( 124)											if ((by2 > cy8)) {
HXLINE( 124)												min42 = ::Math_obj::floor(cy8);
            											}
            											else {
HXLINE( 124)												min42 = ::Math_obj::floor(by2);
            											}
HXDLIN( 124)											int ii_min84 = min42;
HXDLIN( 124)											int ii_max84 = ::Math_obj::ceil(lowerY);
HXDLIN( 124)											yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min84,ii_max84);
            										}
            										else {
HXLINE( 124)											int ii_min85 = ::Math_obj::floor(by2);
HXDLIN( 124)											int ii_max85 = ::Math_obj::ceil(cy8);
HXDLIN( 124)											yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min85,ii_max85);
            										}
            									}
            									else {
HXLINE( 124)										if ((by2 > cy8)) {
HXLINE( 124)											int min43;
HXDLIN( 124)											if ((lowerY > cy8)) {
HXLINE( 124)												min43 = ::Math_obj::floor(cy8);
            											}
            											else {
HXLINE( 124)												min43 = ::Math_obj::ceil(lowerY);
            											}
HXDLIN( 124)											int ii_min86 = min43;
HXDLIN( 124)											int ii_max86 = ::Math_obj::ceil(by2);
HXDLIN( 124)											yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min86,ii_max86);
            										}
            										else {
HXLINE( 124)											int ii_min87 = ::Math_obj::floor(lowerY);
HXDLIN( 124)											int ii_max87 = ::Math_obj::ceil(cy8);
HXDLIN( 124)											yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min87,ii_max87);
            										}
            									}
HXDLIN( 124)									 ::pi_xy::ImageStruct undoImage30 = null();
HXDLIN( 124)									if (hasUndo10) {
HXLINE( 124)										int width10 = ((xIter310->max - xIter310->start) + 1);
HXDLIN( 124)										int height10 = ((yIter310->max - yIter310->start) + 1);
HXDLIN( 124)										 ::Dynamic imageType10 = null();
HXDLIN( 124)										 ::pi_xy::ImageStruct this325 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 124)										if (::hx::IsNull( imageType10 )) {
HXLINE(  54)											imageType10 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE( 124)										::Dynamic undoImage31;
HXDLIN( 124)										switch((int)(( (int)(imageType10) ))){
            											case (int)0: {
HXLINE( 124)												 ::iterMagic::BytesImg byt10 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 124)												 ::iterMagic::BytesImg b69 = byt10;
HXDLIN( 124)												{
HXLINE( 124)													b69->width = width10;
HXDLIN( 124)													b69->height = height10;
HXDLIN( 124)													b69->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 124)													b69->data = ::haxe::io::Bytes_obj::alloc((b69->length * 4));
HXDLIN( 124)													{
HXLINE( 124)														int len20 = b69->length;
HXDLIN( 124)														int w10 = 0;
HXDLIN( 124)														{
HXLINE( 124)															int _g206 = 0;
HXDLIN( 124)															int _g207 = b69->height;
HXDLIN( 124)															while((_g206 < _g207)){
HXLINE( 124)																_g206 = (_g206 + 1);
HXDLIN( 124)																int y36 = (_g206 - 1);
HXDLIN( 124)																{
HXLINE( 124)																	int _g208 = 0;
HXDLIN( 124)																	int _g209 = b69->width;
HXDLIN( 124)																	while((_g208 < _g209)){
HXLINE( 124)																		_g208 = (_g208 + 1);
HXDLIN( 124)																		int x35 = (_g208 - 1);
HXDLIN( 124)																		{
HXLINE( 124)																			w10 = (w10 + 1);
HXDLIN( 124)																			b69->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN( 124)																		{
HXLINE( 124)																			w10 = (w10 + 1);
HXDLIN( 124)																			b69->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN( 124)																		{
HXLINE( 124)																			w10 = (w10 + 1);
HXDLIN( 124)																			b69->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN( 124)																		{
HXLINE( 124)																			w10 = (w10 + 1);
HXDLIN( 124)																			b69->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN( 124)												undoImage31 = b69;
            											}
            											break;
            											case (int)1: {
HXLINE( 124)												 ::iterMagic::ArrIntImg arrI10 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 124)												 ::iterMagic::ArrIntImg a61 = arrI10;
HXDLIN( 124)												{
HXLINE( 124)													a61->width = width10;
HXDLIN( 124)													a61->height = height10;
HXDLIN( 124)													a61->data = ::Array_obj< int >::__new(0);
HXDLIN( 124)													a61->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 124)													{
HXLINE( 124)														int _g210 = 0;
HXDLIN( 124)														int _g211 = a61->length;
HXDLIN( 124)														while((_g210 < _g211)){
HXLINE( 124)															_g210 = (_g210 + 1);
HXDLIN( 124)															int i95 = (_g210 - 1);
HXDLIN( 124)															a61->data[i95] = 0;
            														}
            													}
            												}
HXDLIN( 124)												undoImage31 = a61;
            											}
            											break;
            											case (int)2: {
HXLINE( 124)												 ::iterMagic::U32ArrImg u32a10 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 124)												 ::iterMagic::U32ArrImg b70 = u32a10;
HXDLIN( 124)												{
HXLINE( 124)													b70->width = width10;
HXDLIN( 124)													b70->height = height10;
HXDLIN( 124)													b70->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 124)													int size10 = (b70->length * 4);
HXDLIN( 124)													b70->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size10),0,size10);
HXDLIN( 124)													{
HXLINE( 124)														int _g212 = 0;
HXDLIN( 124)														int _g213 = b70->length;
HXDLIN( 124)														while((_g212 < _g213)){
HXLINE( 124)															_g212 = (_g212 + 1);
HXDLIN( 124)															int i96 = (_g212 - 1);
HXDLIN( 124)															{
HXLINE( 124)																 ::haxe::io::ArrayBufferViewImpl this326 = b70->data;
HXDLIN( 124)																bool undoImage32;
HXDLIN( 124)																if ((i96 >= 0)) {
HXLINE( 124)																	undoImage32 = (i96 < (this326->byteLength >> 2));
            																}
            																else {
HXLINE( 124)																	undoImage32 = false;
            																}
HXDLIN( 124)																if (undoImage32) {
HXLINE( 124)																	 ::haxe::io::Bytes _this10 = this326->bytes;
HXDLIN( 124)																	int pos10 = ((i96 << 2) + this326->byteOffset);
HXDLIN( 124)																	_this10->b[pos10] = ( (unsigned char)(0) );
HXDLIN( 124)																	_this10->b[(pos10 + 1)] = ( (unsigned char)(0) );
HXDLIN( 124)																	_this10->b[(pos10 + 2)] = ( (unsigned char)(0) );
HXDLIN( 124)																	_this10->b[(pos10 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN( 124)												undoImage31 = b70;
            											}
            											break;
            											case (int)3: {
HXLINE( 124)												 ::iterMagic::VecIntImg vec10 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 124)												 ::iterMagic::VecIntImg v34 = vec10;
HXDLIN( 124)												{
HXLINE( 124)													v34->width = width10;
HXDLIN( 124)													v34->height = height10;
HXDLIN( 124)													v34->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 124)													v34->data = ::Array_obj< int >::__new(v34->length);
HXDLIN( 124)													{
HXLINE( 124)														int _g214 = 0;
HXDLIN( 124)														int _g215 = v34->length;
HXDLIN( 124)														while((_g214 < _g215)){
HXLINE( 124)															_g214 = (_g214 + 1);
HXDLIN( 124)															int i97 = (_g214 - 1);
HXDLIN( 124)															v34->data->__unsafe_set(i97,0);
            														}
            													}
            												}
HXDLIN( 124)												undoImage31 = v34;
            											}
            											break;
            											case (int)4: {
HXLINE( 124)												 ::iterMagic::StackIntImg sInt10 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 124)												 ::iterMagic::StackIntImg b71 = sInt10;
HXDLIN( 124)												{
HXLINE( 124)													b71->width = width10;
HXDLIN( 124)													b71->height = height10;
HXDLIN( 124)													b71->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 124)													b71->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 124)													{
HXLINE( 124)														int len21 = b71->length;
HXDLIN( 124)														 ::haxe::ds::GenericStack_Int d10 = b71->data;
HXDLIN( 124)														if (::hx::IsNull( d10->head )) {
HXLINE( 124)															int _g216 = 0;
HXDLIN( 124)															int _g217 = len21;
HXDLIN( 124)															while((_g216 < _g217)){
HXLINE( 124)																_g216 = (_g216 + 1);
HXDLIN( 124)																int i98 = (_g216 - 1);
HXDLIN( 124)																d10->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d10->head);
            															}
            														}
            														else {
HXLINE( 124)															int _g218 = 0;
HXDLIN( 124)															int _g219 = len21;
HXDLIN( 124)															while((_g218 < _g219)){
HXLINE( 124)																_g218 = (_g218 + 1);
HXDLIN( 124)																int i99 = (_g218 - 1);
HXDLIN( 124)																{
HXLINE( 124)																	 ::haxe::ds::GenericCell_Int l10 = b71->data->head;
HXDLIN( 124)																	 ::haxe::ds::GenericCell_Int prev10 = null();
HXDLIN( 124)																	{
HXLINE( 124)																		int _g220 = 0;
HXDLIN( 124)																		int _g221 = i99;
HXDLIN( 124)																		while((_g220 < _g221)){
HXLINE( 124)																			_g220 = (_g220 + 1);
HXDLIN( 124)																			int i100 = (_g220 - 1);
HXLINE( 345)																			prev10 = l10;
HXLINE( 346)																			l10 = l10->next;
            																		}
            																	}
HXLINE( 124)																	if (::hx::IsNull( prev10 )) {
HXLINE( 124)																		b71->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l10->next);
HXDLIN( 124)																		l10 = null();
            																	}
            																	else {
HXLINE( 124)																		prev10->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l10->next);
HXDLIN( 124)																		l10 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN( 124)												undoImage31 = b71;
            											}
            											break;
            										}
HXDLIN( 124)										this325->image = undoImage31;
HXDLIN( 124)										this325->width = width10;
HXDLIN( 124)										this325->height = height10;
HXDLIN( 124)										this325->imageType = ( (int)(imageType10) );
HXDLIN( 124)										undoImage30 = this325;
HXDLIN( 124)										{
HXLINE( 124)											int rectLeft10 = xIter310->start;
HXDLIN( 124)											int rectTop10 = yIter310->start;
HXDLIN( 124)											int rectRight10 = xIter310->max;
HXDLIN( 124)											bool forceClear10 = false;
HXDLIN( 124)											{
HXLINE( 124)												int _g222 = rectTop10;
HXDLIN( 124)												int _g223 = yIter310->max;
HXDLIN( 124)												while((_g222 < _g223)){
HXLINE( 124)													_g222 = (_g222 + 1);
HXDLIN( 124)													int dy11 = (_g222 - 1);
HXDLIN( 124)													{
HXLINE( 124)														int _g224 = rectLeft10;
HXDLIN( 124)														int _g225 = rectRight10;
HXDLIN( 124)														while((_g224 < _g225)){
HXLINE( 124)															_g224 = (_g224 + 1);
HXDLIN( 124)															int dx11 = (_g224 - 1);
HXDLIN( 124)															::Dynamic this327 = this324->image;
HXDLIN( 124)															int index42;
HXDLIN( 124)															if (this324->useVirtualPos) {
HXLINE( 124)																index42 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - this324->virtualY) * ( (Float)(this324->width) )) + dx11) - this324->virtualX));
            															}
            															else {
HXLINE( 124)																index42 = ::Std_obj::_hx_int(( (Float)(((dy11 * this324->width) + dx11)) ));
            															}
HXDLIN( 124)															int c32 = ::iterMagic::Iimg_obj::get(this327,index42);
HXDLIN( 124)															int col10;
HXDLIN( 124)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																col10 = ((((((c32 >> 24) & 255) << 24) | ((c32 & 255) << 16)) | (((c32 >> 8) & 255) << 8)) | ((c32 >> 16) & 255));
            															}
            															else {
HXLINE( 124)																col10 = c32;
            															}
HXDLIN( 124)															bool _hx_tmp80;
HXDLIN( 124)															if (this324->useMask) {
HXLINE( 124)																_hx_tmp80 = ::hx::IsNotNull( this324->mask );
            															}
            															else {
HXLINE( 124)																_hx_tmp80 = false;
            															}
HXDLIN( 124)															if (_hx_tmp80) {
HXLINE( 124)																 ::pi_xy::ImageStruct this328 = this324->mask;
HXDLIN( 124)																::Dynamic this329 = this328->image;
HXDLIN( 124)																int index43;
HXDLIN( 124)																if (this328->useVirtualPos) {
HXLINE( 124)																	index43 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - this328->virtualY) * ( (Float)(this328->width) )) + dx11) - this328->virtualX));
            																}
            																else {
HXLINE( 124)																	index43 = ::Std_obj::_hx_int(( (Float)(((dy11 * this328->width) + dx11)) ));
            																}
HXDLIN( 124)																int c33 = ::iterMagic::Iimg_obj::get(this329,index43);
HXDLIN( 124)																int v35;
HXDLIN( 124)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																	v35 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            																}
            																else {
HXLINE( 124)																	v35 = c33;
            																}
HXDLIN( 124)																int maskPixel10 = v35;
HXDLIN( 124)																int this330 = col10;
HXDLIN( 124)																if ((maskPixel10 == 0)) {
HXLINE( 124)																	col10 = this330;
            																}
            																else {
HXLINE( 124)																	Float m010;
HXDLIN( 124)																	int this331 = ((maskPixel10 >> 24) & 255);
HXDLIN( 124)																	if ((this331 == 0)) {
HXLINE( 124)																		m010 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		m010 = (( (Float)(this331) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float m110;
HXDLIN( 124)																	int this332 = ((maskPixel10 >> 16) & 255);
HXDLIN( 124)																	if ((this332 == 0)) {
HXLINE( 124)																		m110 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		m110 = (( (Float)(this332) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float m210;
HXDLIN( 124)																	int this333 = ((maskPixel10 >> 8) & 255);
HXDLIN( 124)																	if ((this333 == 0)) {
HXLINE( 124)																		m210 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		m210 = (( (Float)(this333) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float m310;
HXDLIN( 124)																	int this334 = (maskPixel10 & 255);
HXDLIN( 124)																	if ((this334 == 0)) {
HXLINE( 124)																		m310 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		m310 = (( (Float)(this334) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	int ch010 = ::Std_obj::_hx_int(((((Float)1.) - m010) * ( (Float)(((this330 >> 24) & 255)) )));
HXDLIN( 124)																	int ch110 = ::Std_obj::_hx_int(((((Float)1.) - m110) * ( (Float)(((this330 >> 16) & 255)) )));
HXDLIN( 124)																	int ch210 = ::Std_obj::_hx_int(((((Float)1.) - m210) * ( (Float)(((this330 >> 8) & 255)) )));
HXDLIN( 124)																	int ch310 = ::Std_obj::_hx_int(((((Float)1.) - m310) * ( (Float)((this330 & 255)) )));
HXDLIN( 124)																	col10 = ((((::Math_obj::round((( (Float)(ch010) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch110) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch210) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch310) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN( 124)															if ((col10 != 0)) {
HXLINE( 124)																int x36 = (dx11 - rectLeft10);
HXDLIN( 124)																int y37 = (dy11 - rectTop10);
HXDLIN( 124)																int c34 = col10;
HXDLIN( 124)																bool _hx_tmp81;
HXDLIN( 124)																if ((((c34 >> 24) & 255) < 254)) {
HXLINE( 124)																	_hx_tmp81 = undoImage30->transparent;
            																}
            																else {
HXLINE( 124)																	_hx_tmp81 = false;
            																}
HXDLIN( 124)																if (_hx_tmp81) {
HXLINE( 124)																	int location20;
HXDLIN( 124)																	if (undoImage30->useVirtualPos) {
HXLINE( 124)																		location20 = ::Std_obj::_hx_int(((((( (Float)(y37) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x36) - undoImage30->virtualX));
            																	}
            																	else {
HXLINE( 124)																		location20 = ::Std_obj::_hx_int(( (Float)(((y37 * undoImage30->width) + x36)) ));
            																	}
HXDLIN( 124)																	int this335 = ::iterMagic::Iimg_obj::get(undoImage30->image,location20);
HXDLIN( 124)																	int this336;
HXDLIN( 124)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																		this336 = ((((((this335 >> 24) & 255) << 24) | ((this335 & 255) << 16)) | (((this335 >> 8) & 255) << 8)) | ((this335 >> 16) & 255));
            																	}
            																	else {
HXLINE( 124)																		this336 = this335;
            																	}
HXDLIN( 124)																	Float a124;
HXDLIN( 124)																	int this337 = ((this336 >> 24) & 255);
HXDLIN( 124)																	if ((this337 == 0)) {
HXLINE( 124)																		a124 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		a124 = (( (Float)(this337) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float r121;
HXDLIN( 124)																	int this338 = ((this336 >> 16) & 255);
HXDLIN( 124)																	if ((this338 == 0)) {
HXLINE( 124)																		r121 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		r121 = (( (Float)(this338) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float g121;
HXDLIN( 124)																	int this339 = ((this336 >> 8) & 255);
HXDLIN( 124)																	if ((this339 == 0)) {
HXLINE( 124)																		g121 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		g121 = (( (Float)(this339) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float b125;
HXDLIN( 124)																	int this340 = (this336 & 255);
HXDLIN( 124)																	if ((this340 == 0)) {
HXLINE( 124)																		b125 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		b125 = (( (Float)(this340) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float a222;
HXDLIN( 124)																	int this341 = ((col10 >> 24) & 255);
HXDLIN( 124)																	if ((this341 == 0)) {
HXLINE( 124)																		a222 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		a222 = (( (Float)(this341) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float r221;
HXDLIN( 124)																	int this342 = ((col10 >> 16) & 255);
HXDLIN( 124)																	if ((this342 == 0)) {
HXLINE( 124)																		r221 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		r221 = (( (Float)(this342) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float g221;
HXDLIN( 124)																	int this343 = ((col10 >> 8) & 255);
HXDLIN( 124)																	if ((this343 == 0)) {
HXLINE( 124)																		g221 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		g221 = (( (Float)(this343) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float b224;
HXDLIN( 124)																	int this344 = (col10 & 255);
HXDLIN( 124)																	if ((this344 == 0)) {
HXLINE( 124)																		b224 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		b224 = (( (Float)(this344) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float a321 = (a124 * (( (Float)(1) ) - a222));
HXDLIN( 124)																	int r46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r121 * a321) + (r221 * a222))));
HXDLIN( 124)																	int g46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g121 * a321) + (g221 * a222))));
HXDLIN( 124)																	int b72 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b125 * a321) + (b224 * a222))));
HXDLIN( 124)																	int a62 = ::Std_obj::_hx_int((( (Float)(255) ) * (a321 + a222)));
HXDLIN( 124)																	int blended20 = ((((a62 << 24) | (r46 << 16)) | (g46 << 8)) | b72);
HXDLIN( 124)																	{
HXLINE( 124)																		int _hx_tmp82;
HXDLIN( 124)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																			_hx_tmp82 = ((((((blended20 >> 24) & 255) << 24) | ((blended20 & 255) << 16)) | (((blended20 >> 8) & 255) << 8)) | ((blended20 >> 16) & 255));
            																		}
            																		else {
HXLINE( 124)																			_hx_tmp82 = blended20;
            																		}
HXDLIN( 124)																		::iterMagic::Iimg_obj::set(undoImage30->image,location20,_hx_tmp82);
            																	}
            																}
            																else {
HXLINE( 124)																	::Dynamic this345 = undoImage30->image;
HXDLIN( 124)																	int index44;
HXDLIN( 124)																	if (undoImage30->useVirtualPos) {
HXLINE( 124)																		index44 = ::Std_obj::_hx_int(((((( (Float)(y37) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x36) - undoImage30->virtualX));
            																	}
            																	else {
HXLINE( 124)																		index44 = ::Std_obj::_hx_int(( (Float)(((y37 * undoImage30->width) + x36)) ));
            																	}
HXDLIN( 124)																	int _hx_tmp83;
HXDLIN( 124)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																		_hx_tmp83 = ((((((c34 >> 24) & 255) << 24) | ((c34 & 255) << 16)) | (((c34 >> 8) & 255) << 8)) | ((c34 >> 16) & 255));
            																	}
            																	else {
HXLINE( 124)																		_hx_tmp83 = c34;
            																	}
HXDLIN( 124)																	::iterMagic::Iimg_obj::set(this345,index44,_hx_tmp83);
            																}
            															}
            															else {
HXLINE( 124)																if (forceClear10) {
HXLINE( 124)																	::Dynamic this346 = undoImage30->image;
HXDLIN( 124)																	int x37 = (dx11 - rectLeft10);
HXDLIN( 124)																	int y38 = (dy11 - rectTop10);
HXDLIN( 124)																	int index45;
HXDLIN( 124)																	if (undoImage30->useVirtualPos) {
HXLINE( 124)																		index45 = ::Std_obj::_hx_int(((((( (Float)(y38) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x37) - undoImage30->virtualX));
            																	}
            																	else {
HXLINE( 124)																		index45 = ::Std_obj::_hx_int(( (Float)(((y38 * undoImage30->width) + x37)) ));
            																	}
HXDLIN( 124)																	::iterMagic::Iimg_obj::set(this346,index45,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 124)									bool found2 = false;
HXDLIN( 124)									Float s2 = ((Float)0.);
HXDLIN( 124)									Float t2 = ((Float)0.);
HXDLIN( 124)									Float sxx2 = ((Float)0.);
HXDLIN( 124)									Float txx2 = ((Float)0.);
HXDLIN( 124)									{
HXLINE( 124)										int _g_min20 = xIter310->start;
HXDLIN( 124)										int _g_max20 = xIter310->max;
HXDLIN( 124)										while((_g_min20 < _g_max20)){
HXLINE( 124)											_g_min20 = (_g_min20 + 1);
HXDLIN( 124)											int x38 = (_g_min20 - 1);
HXLINE(  60)											sxx2 = (sx2 * ( (Float)(x38) ));
HXLINE(  61)											txx2 = (tx2 * ( (Float)(x38) ));
HXLINE(  62)											found2 = false;
HXLINE( 124)											{
HXLINE( 124)												int _g_min21 = yIter310->start;
HXDLIN( 124)												int _g_max21 = yIter310->max;
HXDLIN( 124)												while((_g_min21 < _g_max21)){
HXLINE( 124)													_g_min21 = (_g_min21 + 1);
HXDLIN( 124)													int y39 = (_g_min21 - 1);
HXLINE(  64)													s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y39) )));
HXLINE(  65)													t2 = ((t02 + txx2) + (ty2 * ( (Float)(y39) )));
HXLINE( 124)													bool _hx_tmp84;
HXDLIN( 124)													if (!((s2 <= 0))) {
HXLINE( 124)														_hx_tmp84 = (t2 <= 0);
            													}
            													else {
HXLINE( 124)														_hx_tmp84 = true;
            													}
HXDLIN( 124)													if (_hx_tmp84) {
HXLINE( 124)														if (found2) {
HXLINE( 124)															goto _hx_goto_315;
            														}
            													}
            													else {
HXLINE( 124)														if (((s2 + t2) < A2)) {
HXLINE( 124)															{
HXLINE( 124)																int c35 = colorD;
HXDLIN( 124)																bool _hx_tmp85;
HXDLIN( 124)																if ((((c35 >> 24) & 255) < 254)) {
HXLINE( 124)																	_hx_tmp85 = this324->transparent;
            																}
            																else {
HXLINE( 124)																	_hx_tmp85 = false;
            																}
HXDLIN( 124)																if (_hx_tmp85) {
HXLINE( 124)																	int location21;
HXDLIN( 124)																	if (this324->useVirtualPos) {
HXLINE( 124)																		location21 = ::Std_obj::_hx_int(((((( (Float)(y39) ) - this324->virtualY) * ( (Float)(this324->width) )) + x38) - this324->virtualX));
            																	}
            																	else {
HXLINE( 124)																		location21 = ::Std_obj::_hx_int(( (Float)(((y39 * this324->width) + x38)) ));
            																	}
HXDLIN( 124)																	int this347 = ::iterMagic::Iimg_obj::get(this324->image,location21);
HXDLIN( 124)																	int this348;
HXDLIN( 124)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																		this348 = ((((((this347 >> 24) & 255) << 24) | ((this347 & 255) << 16)) | (((this347 >> 8) & 255) << 8)) | ((this347 >> 16) & 255));
            																	}
            																	else {
HXLINE( 124)																		this348 = this347;
            																	}
HXDLIN( 124)																	Float a125;
HXDLIN( 124)																	int this349 = ((this348 >> 24) & 255);
HXDLIN( 124)																	if ((this349 == 0)) {
HXLINE( 124)																		a125 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		a125 = (( (Float)(this349) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float r122;
HXDLIN( 124)																	int this350 = ((this348 >> 16) & 255);
HXDLIN( 124)																	if ((this350 == 0)) {
HXLINE( 124)																		r122 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		r122 = (( (Float)(this350) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float g122;
HXDLIN( 124)																	int this351 = ((this348 >> 8) & 255);
HXDLIN( 124)																	if ((this351 == 0)) {
HXLINE( 124)																		g122 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		g122 = (( (Float)(this351) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float b126;
HXDLIN( 124)																	int this352 = (this348 & 255);
HXDLIN( 124)																	if ((this352 == 0)) {
HXLINE( 124)																		b126 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		b126 = (( (Float)(this352) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float a223;
HXDLIN( 124)																	int this353 = ((colorD >> 24) & 255);
HXDLIN( 124)																	if ((this353 == 0)) {
HXLINE( 124)																		a223 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		a223 = (( (Float)(this353) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float r222;
HXDLIN( 124)																	int this354 = ((colorD >> 16) & 255);
HXDLIN( 124)																	if ((this354 == 0)) {
HXLINE( 124)																		r222 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		r222 = (( (Float)(this354) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float g222;
HXDLIN( 124)																	int this355 = ((colorD >> 8) & 255);
HXDLIN( 124)																	if ((this355 == 0)) {
HXLINE( 124)																		g222 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		g222 = (( (Float)(this355) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float b225;
HXDLIN( 124)																	int this356 = (colorD & 255);
HXDLIN( 124)																	if ((this356 == 0)) {
HXLINE( 124)																		b225 = ((Float)0.);
            																	}
            																	else {
HXLINE( 124)																		b225 = (( (Float)(this356) ) / ( (Float)(255) ));
            																	}
HXDLIN( 124)																	Float a322 = (a125 * (( (Float)(1) ) - a223));
HXDLIN( 124)																	int r47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r122 * a322) + (r222 * a223))));
HXDLIN( 124)																	int g47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g122 * a322) + (g222 * a223))));
HXDLIN( 124)																	int b73 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b126 * a322) + (b225 * a223))));
HXDLIN( 124)																	int a63 = ::Std_obj::_hx_int((( (Float)(255) ) * (a322 + a223)));
HXDLIN( 124)																	int blended21 = ((((a63 << 24) | (r47 << 16)) | (g47 << 8)) | b73);
HXDLIN( 124)																	{
HXLINE( 124)																		int _hx_tmp86;
HXDLIN( 124)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																			_hx_tmp86 = ((((((blended21 >> 24) & 255) << 24) | ((blended21 & 255) << 16)) | (((blended21 >> 8) & 255) << 8)) | ((blended21 >> 16) & 255));
            																		}
            																		else {
HXLINE( 124)																			_hx_tmp86 = blended21;
            																		}
HXDLIN( 124)																		::iterMagic::Iimg_obj::set(this324->image,location21,_hx_tmp86);
            																	}
            																}
            																else {
HXLINE( 124)																	::Dynamic this357 = this324->image;
HXDLIN( 124)																	int index46;
HXDLIN( 124)																	if (this324->useVirtualPos) {
HXLINE( 124)																		index46 = ::Std_obj::_hx_int(((((( (Float)(y39) ) - this324->virtualY) * ( (Float)(this324->width) )) + x38) - this324->virtualX));
            																	}
            																	else {
HXLINE( 124)																		index46 = ::Std_obj::_hx_int(( (Float)(((y39 * this324->width) + x38)) ));
            																	}
HXDLIN( 124)																	int _hx_tmp87;
HXDLIN( 124)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																		_hx_tmp87 = ((((((c35 >> 24) & 255) << 24) | ((c35 & 255) << 16)) | (((c35 >> 8) & 255) << 8)) | ((c35 >> 16) & 255));
            																	}
            																	else {
HXLINE( 124)																		_hx_tmp87 = c35;
            																	}
HXDLIN( 124)																	::iterMagic::Iimg_obj::set(this357,index46,_hx_tmp87);
            																}
            															}
HXLINE(  73)															found2 = true;
            														}
            														else {
HXLINE( 124)															if (found2) {
HXLINE( 124)																goto _hx_goto_315;
            															}
            														}
            													}
            												}
            												_hx_goto_315:;
            											}
            										}
            									}
HXDLIN( 124)									if ((hasHit10 == true)) {
HXLINE( 124)										 ::pi_xy::algo::HitTri v36 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx3,lowerY,bx6,by2,cx4,cy8,true);
HXDLIN( 124)										if (hasUndo10) {
HXLINE( 124)											v36->undoImage = undoImage30;
HXDLIN( 124)											v36->undoX = xIter310->start;
HXDLIN( 124)											v36->undoY = yIter310->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  46)						lastX2 = nextX2;
HXLINE(  47)						lastY2 = nextY2;
            					}
            				}
            			}
            		}
HXLINE( 125)		 ::pi_xy::ImageStruct this358 = pixelimage;
HXDLIN( 125)		Float x39 = (x + dx);
HXDLIN( 125)		Float bx7 = (x39 + ( (Float)(fat) ));
HXDLIN( 125)		Float cy9 = (lowerY + bottomRadius);
HXDLIN( 125)		{
HXLINE( 125)			bool hasHit11 = true;
HXDLIN( 125)			{
HXLINE( 125)				{
HXLINE( 125)					bool hasUndo11 = false;
HXDLIN( 125)					int aA8 = ((colorC >> 24) & 255);
HXDLIN( 125)					int rA8 = ((colorC >> 16) & 255);
HXDLIN( 125)					int gA8 = ((colorC >> 8) & 255);
HXDLIN( 125)					int bA8 = (colorC & 255);
HXDLIN( 125)					int aB8 = ((colorD >> 24) & 255);
HXDLIN( 125)					int rB8 = ((colorD >> 16) & 255);
HXDLIN( 125)					int gB8 = ((colorD >> 8) & 255);
HXDLIN( 125)					int bB8 = (colorD & 255);
HXDLIN( 125)					int aC8 = ((colorD >> 24) & 255);
HXDLIN( 125)					int rC8 = ((colorD >> 16) & 255);
HXDLIN( 125)					int gC8 = ((colorD >> 8) & 255);
HXDLIN( 125)					int bC8 = (colorD & 255);
HXDLIN( 125)					Float bcx8 = (bx7 - x39);
HXDLIN( 125)					Float bcy8 = (lowerY - cy9);
HXDLIN( 125)					Float acx8 = (x39 - x39);
HXDLIN( 125)					Float acy8 = (lowerY - cy9);
HXDLIN( 125)					Float dot118 = ((bcx8 * bcx8) + (bcy8 * bcy8));
HXDLIN( 125)					Float dot128 = ((bcx8 * acx8) + (bcy8 * acy8));
HXDLIN( 125)					Float dot228 = ((acx8 * acx8) + (acy8 * acy8));
HXDLIN( 125)					Float denom18 = (( (Float)(1) ) / ((dot118 * dot228) - (dot128 * dot128)));
HXDLIN( 125)					 ::pi_xy::iter::IntIterStart xIter311;
HXDLIN( 125)					if ((x39 > bx7)) {
HXLINE( 125)						if ((x39 > x39)) {
HXLINE( 125)							int min44;
HXDLIN( 125)							if ((bx7 > x39)) {
HXLINE( 125)								min44 = ::Math_obj::floor(x39);
            							}
            							else {
HXLINE( 125)								min44 = ::Math_obj::floor(bx7);
            							}
HXDLIN( 125)							int ii_min88 = min44;
HXDLIN( 125)							int ii_max88 = ::Math_obj::ceil(x39);
HXDLIN( 125)							xIter311 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min88,ii_max88);
            						}
            						else {
HXLINE( 125)							int ii_min89 = ::Math_obj::floor(bx7);
HXDLIN( 125)							int ii_max89 = ::Math_obj::ceil(x39);
HXDLIN( 125)							xIter311 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min89,ii_max89);
            						}
            					}
            					else {
HXLINE( 125)						if ((bx7 > x39)) {
HXLINE( 125)							int min45;
HXDLIN( 125)							if ((x39 > x39)) {
HXLINE( 125)								min45 = ::Math_obj::floor(x39);
            							}
            							else {
HXLINE( 125)								min45 = ::Math_obj::ceil(x39);
            							}
HXDLIN( 125)							int ii_min90 = min45;
HXDLIN( 125)							int ii_max90 = ::Math_obj::ceil(bx7);
HXDLIN( 125)							xIter311 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min90,ii_max90);
            						}
            						else {
HXLINE( 125)							int ii_min91 = ::Math_obj::floor(x39);
HXDLIN( 125)							int ii_max91 = ::Math_obj::ceil(x39);
HXDLIN( 125)							xIter311 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min91,ii_max91);
            						}
            					}
HXDLIN( 125)					 ::pi_xy::iter::IntIterStart yIter311;
HXDLIN( 125)					if ((lowerY > lowerY)) {
HXLINE( 125)						if ((lowerY > cy9)) {
HXLINE( 125)							int min46;
HXDLIN( 125)							if ((lowerY > cy9)) {
HXLINE( 125)								min46 = ::Math_obj::floor(cy9);
            							}
            							else {
HXLINE( 125)								min46 = ::Math_obj::floor(lowerY);
            							}
HXDLIN( 125)							int ii_min92 = min46;
HXDLIN( 125)							int ii_max92 = ::Math_obj::ceil(lowerY);
HXDLIN( 125)							yIter311 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min92,ii_max92);
            						}
            						else {
HXLINE( 125)							int ii_min93 = ::Math_obj::floor(lowerY);
HXDLIN( 125)							int ii_max93 = ::Math_obj::ceil(cy9);
HXDLIN( 125)							yIter311 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min93,ii_max93);
            						}
            					}
            					else {
HXLINE( 125)						if ((lowerY > cy9)) {
HXLINE( 125)							int min47;
HXDLIN( 125)							if ((lowerY > cy9)) {
HXLINE( 125)								min47 = ::Math_obj::floor(cy9);
            							}
            							else {
HXLINE( 125)								min47 = ::Math_obj::ceil(lowerY);
            							}
HXDLIN( 125)							int ii_min94 = min47;
HXDLIN( 125)							int ii_max94 = ::Math_obj::ceil(lowerY);
HXDLIN( 125)							yIter311 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min94,ii_max94);
            						}
            						else {
HXLINE( 125)							int ii_min95 = ::Math_obj::floor(lowerY);
HXDLIN( 125)							int ii_max95 = ::Math_obj::ceil(cy9);
HXDLIN( 125)							yIter311 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min95,ii_max95);
            						}
            					}
HXDLIN( 125)					 ::pi_xy::ImageStruct undoImage33 = null();
HXDLIN( 125)					if (hasUndo11) {
HXLINE( 125)						int width11 = ((xIter311->max - xIter311->start) + 1);
HXDLIN( 125)						int height11 = ((yIter311->max - yIter311->start) + 1);
HXDLIN( 125)						 ::Dynamic imageType11 = null();
HXDLIN( 125)						 ::pi_xy::ImageStruct this359 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 125)						if (::hx::IsNull( imageType11 )) {
HXLINE(  54)							imageType11 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 125)						::Dynamic undoImage34;
HXDLIN( 125)						switch((int)(( (int)(imageType11) ))){
            							case (int)0: {
HXLINE( 125)								 ::iterMagic::BytesImg byt11 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 125)								 ::iterMagic::BytesImg b74 = byt11;
HXDLIN( 125)								{
HXLINE( 125)									b74->width = width11;
HXDLIN( 125)									b74->height = height11;
HXDLIN( 125)									b74->length = ::Std_obj::_hx_int(( (Float)((width11 * height11)) ));
HXDLIN( 125)									b74->data = ::haxe::io::Bytes_obj::alloc((b74->length * 4));
HXDLIN( 125)									{
HXLINE( 125)										int len22 = b74->length;
HXDLIN( 125)										int w11 = 0;
HXDLIN( 125)										{
HXLINE( 125)											int _g226 = 0;
HXDLIN( 125)											int _g227 = b74->height;
HXDLIN( 125)											while((_g226 < _g227)){
HXLINE( 125)												_g226 = (_g226 + 1);
HXDLIN( 125)												int y40 = (_g226 - 1);
HXDLIN( 125)												{
HXLINE( 125)													int _g228 = 0;
HXDLIN( 125)													int _g229 = b74->width;
HXDLIN( 125)													while((_g228 < _g229)){
HXLINE( 125)														_g228 = (_g228 + 1);
HXDLIN( 125)														int x40 = (_g228 - 1);
HXDLIN( 125)														{
HXLINE( 125)															w11 = (w11 + 1);
HXDLIN( 125)															b74->data->b[(w11 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 125)														{
HXLINE( 125)															w11 = (w11 + 1);
HXDLIN( 125)															b74->data->b[(w11 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 125)														{
HXLINE( 125)															w11 = (w11 + 1);
HXDLIN( 125)															b74->data->b[(w11 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 125)														{
HXLINE( 125)															w11 = (w11 + 1);
HXDLIN( 125)															b74->data->b[(w11 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 125)								undoImage34 = b74;
            							}
            							break;
            							case (int)1: {
HXLINE( 125)								 ::iterMagic::ArrIntImg arrI11 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 125)								 ::iterMagic::ArrIntImg a64 = arrI11;
HXDLIN( 125)								{
HXLINE( 125)									a64->width = width11;
HXDLIN( 125)									a64->height = height11;
HXDLIN( 125)									a64->data = ::Array_obj< int >::__new(0);
HXDLIN( 125)									a64->length = ::Std_obj::_hx_int(( (Float)((width11 * height11)) ));
HXDLIN( 125)									{
HXLINE( 125)										int _g230 = 0;
HXDLIN( 125)										int _g231 = a64->length;
HXDLIN( 125)										while((_g230 < _g231)){
HXLINE( 125)											_g230 = (_g230 + 1);
HXDLIN( 125)											int i101 = (_g230 - 1);
HXDLIN( 125)											a64->data[i101] = 0;
            										}
            									}
            								}
HXDLIN( 125)								undoImage34 = a64;
            							}
            							break;
            							case (int)2: {
HXLINE( 125)								 ::iterMagic::U32ArrImg u32a11 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 125)								 ::iterMagic::U32ArrImg b75 = u32a11;
HXDLIN( 125)								{
HXLINE( 125)									b75->width = width11;
HXDLIN( 125)									b75->height = height11;
HXDLIN( 125)									b75->length = ::Std_obj::_hx_int(( (Float)((width11 * height11)) ));
HXDLIN( 125)									int size11 = (b75->length * 4);
HXDLIN( 125)									b75->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size11),0,size11);
HXDLIN( 125)									{
HXLINE( 125)										int _g232 = 0;
HXDLIN( 125)										int _g233 = b75->length;
HXDLIN( 125)										while((_g232 < _g233)){
HXLINE( 125)											_g232 = (_g232 + 1);
HXDLIN( 125)											int i102 = (_g232 - 1);
HXDLIN( 125)											{
HXLINE( 125)												 ::haxe::io::ArrayBufferViewImpl this360 = b75->data;
HXDLIN( 125)												bool undoImage35;
HXDLIN( 125)												if ((i102 >= 0)) {
HXLINE( 125)													undoImage35 = (i102 < (this360->byteLength >> 2));
            												}
            												else {
HXLINE( 125)													undoImage35 = false;
            												}
HXDLIN( 125)												if (undoImage35) {
HXLINE( 125)													 ::haxe::io::Bytes _this11 = this360->bytes;
HXDLIN( 125)													int pos11 = ((i102 << 2) + this360->byteOffset);
HXDLIN( 125)													_this11->b[pos11] = ( (unsigned char)(0) );
HXDLIN( 125)													_this11->b[(pos11 + 1)] = ( (unsigned char)(0) );
HXDLIN( 125)													_this11->b[(pos11 + 2)] = ( (unsigned char)(0) );
HXDLIN( 125)													_this11->b[(pos11 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 125)								undoImage34 = b75;
            							}
            							break;
            							case (int)3: {
HXLINE( 125)								 ::iterMagic::VecIntImg vec11 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 125)								 ::iterMagic::VecIntImg v37 = vec11;
HXDLIN( 125)								{
HXLINE( 125)									v37->width = width11;
HXDLIN( 125)									v37->height = height11;
HXDLIN( 125)									v37->length = ::Std_obj::_hx_int(( (Float)((width11 * height11)) ));
HXDLIN( 125)									v37->data = ::Array_obj< int >::__new(v37->length);
HXDLIN( 125)									{
HXLINE( 125)										int _g234 = 0;
HXDLIN( 125)										int _g235 = v37->length;
HXDLIN( 125)										while((_g234 < _g235)){
HXLINE( 125)											_g234 = (_g234 + 1);
HXDLIN( 125)											int i103 = (_g234 - 1);
HXDLIN( 125)											v37->data->__unsafe_set(i103,0);
            										}
            									}
            								}
HXDLIN( 125)								undoImage34 = v37;
            							}
            							break;
            							case (int)4: {
HXLINE( 125)								 ::iterMagic::StackIntImg sInt11 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 125)								 ::iterMagic::StackIntImg b76 = sInt11;
HXDLIN( 125)								{
HXLINE( 125)									b76->width = width11;
HXDLIN( 125)									b76->height = height11;
HXDLIN( 125)									b76->length = ::Std_obj::_hx_int(( (Float)((width11 * height11)) ));
HXDLIN( 125)									b76->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 125)									{
HXLINE( 125)										int len23 = b76->length;
HXDLIN( 125)										 ::haxe::ds::GenericStack_Int d11 = b76->data;
HXDLIN( 125)										if (::hx::IsNull( d11->head )) {
HXLINE( 125)											int _g236 = 0;
HXDLIN( 125)											int _g237 = len23;
HXDLIN( 125)											while((_g236 < _g237)){
HXLINE( 125)												_g236 = (_g236 + 1);
HXDLIN( 125)												int i104 = (_g236 - 1);
HXDLIN( 125)												d11->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d11->head);
            											}
            										}
            										else {
HXLINE( 125)											int _g238 = 0;
HXDLIN( 125)											int _g239 = len23;
HXDLIN( 125)											while((_g238 < _g239)){
HXLINE( 125)												_g238 = (_g238 + 1);
HXDLIN( 125)												int i105 = (_g238 - 1);
HXDLIN( 125)												{
HXLINE( 125)													 ::haxe::ds::GenericCell_Int l11 = b76->data->head;
HXDLIN( 125)													 ::haxe::ds::GenericCell_Int prev11 = null();
HXDLIN( 125)													{
HXLINE( 125)														int _g240 = 0;
HXDLIN( 125)														int _g241 = i105;
HXDLIN( 125)														while((_g240 < _g241)){
HXLINE( 125)															_g240 = (_g240 + 1);
HXDLIN( 125)															int i106 = (_g240 - 1);
HXLINE( 345)															prev11 = l11;
HXLINE( 346)															l11 = l11->next;
            														}
            													}
HXLINE( 125)													if (::hx::IsNull( prev11 )) {
HXLINE( 125)														b76->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l11->next);
HXDLIN( 125)														l11 = null();
            													}
            													else {
HXLINE( 125)														prev11->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l11->next);
HXDLIN( 125)														l11 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 125)								undoImage34 = b76;
            							}
            							break;
            						}
HXDLIN( 125)						this359->image = undoImage34;
HXDLIN( 125)						this359->width = width11;
HXDLIN( 125)						this359->height = height11;
HXDLIN( 125)						this359->imageType = ( (int)(imageType11) );
HXDLIN( 125)						undoImage33 = this359;
HXDLIN( 125)						{
HXLINE( 125)							int rectLeft11 = xIter311->start;
HXDLIN( 125)							int rectTop11 = yIter311->start;
HXDLIN( 125)							int rectRight11 = xIter311->max;
HXDLIN( 125)							bool forceClear11 = false;
HXDLIN( 125)							{
HXLINE( 125)								int _g242 = rectTop11;
HXDLIN( 125)								int _g243 = yIter311->max;
HXDLIN( 125)								while((_g242 < _g243)){
HXLINE( 125)									_g242 = (_g242 + 1);
HXDLIN( 125)									int dy12 = (_g242 - 1);
HXDLIN( 125)									{
HXLINE( 125)										int _g244 = rectLeft11;
HXDLIN( 125)										int _g245 = rectRight11;
HXDLIN( 125)										while((_g244 < _g245)){
HXLINE( 125)											_g244 = (_g244 + 1);
HXDLIN( 125)											int dx12 = (_g244 - 1);
HXDLIN( 125)											::Dynamic this361 = this358->image;
HXDLIN( 125)											int index47;
HXDLIN( 125)											if (this358->useVirtualPos) {
HXLINE( 125)												index47 = ::Std_obj::_hx_int(((((( (Float)(dy12) ) - this358->virtualY) * ( (Float)(this358->width) )) + dx12) - this358->virtualX));
            											}
            											else {
HXLINE( 125)												index47 = ::Std_obj::_hx_int(( (Float)(((dy12 * this358->width) + dx12)) ));
            											}
HXDLIN( 125)											int c36 = ::iterMagic::Iimg_obj::get(this361,index47);
HXDLIN( 125)											int col11;
HXDLIN( 125)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)												col11 = ((((((c36 >> 24) & 255) << 24) | ((c36 & 255) << 16)) | (((c36 >> 8) & 255) << 8)) | ((c36 >> 16) & 255));
            											}
            											else {
HXLINE( 125)												col11 = c36;
            											}
HXDLIN( 125)											bool _hx_tmp88;
HXDLIN( 125)											if (this358->useMask) {
HXLINE( 125)												_hx_tmp88 = ::hx::IsNotNull( this358->mask );
            											}
            											else {
HXLINE( 125)												_hx_tmp88 = false;
            											}
HXDLIN( 125)											if (_hx_tmp88) {
HXLINE( 125)												 ::pi_xy::ImageStruct this362 = this358->mask;
HXDLIN( 125)												::Dynamic this363 = this362->image;
HXDLIN( 125)												int index48;
HXDLIN( 125)												if (this362->useVirtualPos) {
HXLINE( 125)													index48 = ::Std_obj::_hx_int(((((( (Float)(dy12) ) - this362->virtualY) * ( (Float)(this362->width) )) + dx12) - this362->virtualX));
            												}
            												else {
HXLINE( 125)													index48 = ::Std_obj::_hx_int(( (Float)(((dy12 * this362->width) + dx12)) ));
            												}
HXDLIN( 125)												int c37 = ::iterMagic::Iimg_obj::get(this363,index48);
HXDLIN( 125)												int v38;
HXDLIN( 125)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)													v38 = ((((((c37 >> 24) & 255) << 24) | ((c37 & 255) << 16)) | (((c37 >> 8) & 255) << 8)) | ((c37 >> 16) & 255));
            												}
            												else {
HXLINE( 125)													v38 = c37;
            												}
HXDLIN( 125)												int maskPixel11 = v38;
HXDLIN( 125)												int this364 = col11;
HXDLIN( 125)												if ((maskPixel11 == 0)) {
HXLINE( 125)													col11 = this364;
            												}
            												else {
HXLINE( 125)													Float m011;
HXDLIN( 125)													int this365 = ((maskPixel11 >> 24) & 255);
HXDLIN( 125)													if ((this365 == 0)) {
HXLINE( 125)														m011 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														m011 = (( (Float)(this365) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float m111;
HXDLIN( 125)													int this366 = ((maskPixel11 >> 16) & 255);
HXDLIN( 125)													if ((this366 == 0)) {
HXLINE( 125)														m111 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														m111 = (( (Float)(this366) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float m211;
HXDLIN( 125)													int this367 = ((maskPixel11 >> 8) & 255);
HXDLIN( 125)													if ((this367 == 0)) {
HXLINE( 125)														m211 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														m211 = (( (Float)(this367) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float m311;
HXDLIN( 125)													int this368 = (maskPixel11 & 255);
HXDLIN( 125)													if ((this368 == 0)) {
HXLINE( 125)														m311 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														m311 = (( (Float)(this368) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													int ch011 = ::Std_obj::_hx_int(((((Float)1.) - m011) * ( (Float)(((this364 >> 24) & 255)) )));
HXDLIN( 125)													int ch111 = ::Std_obj::_hx_int(((((Float)1.) - m111) * ( (Float)(((this364 >> 16) & 255)) )));
HXDLIN( 125)													int ch211 = ::Std_obj::_hx_int(((((Float)1.) - m211) * ( (Float)(((this364 >> 8) & 255)) )));
HXDLIN( 125)													int ch311 = ::Std_obj::_hx_int(((((Float)1.) - m311) * ( (Float)((this364 & 255)) )));
HXDLIN( 125)													col11 = ((((::Math_obj::round((( (Float)(ch011) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch111) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch211) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch311) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 125)											if ((col11 != 0)) {
HXLINE( 125)												int x41 = (dx12 - rectLeft11);
HXDLIN( 125)												int y41 = (dy12 - rectTop11);
HXDLIN( 125)												int c38 = col11;
HXDLIN( 125)												bool _hx_tmp89;
HXDLIN( 125)												if ((((c38 >> 24) & 255) < 254)) {
HXLINE( 125)													_hx_tmp89 = undoImage33->transparent;
            												}
            												else {
HXLINE( 125)													_hx_tmp89 = false;
            												}
HXDLIN( 125)												if (_hx_tmp89) {
HXLINE( 125)													int location22;
HXDLIN( 125)													if (undoImage33->useVirtualPos) {
HXLINE( 125)														location22 = ::Std_obj::_hx_int(((((( (Float)(y41) ) - undoImage33->virtualY) * ( (Float)(undoImage33->width) )) + x41) - undoImage33->virtualX));
            													}
            													else {
HXLINE( 125)														location22 = ::Std_obj::_hx_int(( (Float)(((y41 * undoImage33->width) + x41)) ));
            													}
HXDLIN( 125)													int this369 = ::iterMagic::Iimg_obj::get(undoImage33->image,location22);
HXDLIN( 125)													int this370;
HXDLIN( 125)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)														this370 = ((((((this369 >> 24) & 255) << 24) | ((this369 & 255) << 16)) | (((this369 >> 8) & 255) << 8)) | ((this369 >> 16) & 255));
            													}
            													else {
HXLINE( 125)														this370 = this369;
            													}
HXDLIN( 125)													Float a126;
HXDLIN( 125)													int this371 = ((this370 >> 24) & 255);
HXDLIN( 125)													if ((this371 == 0)) {
HXLINE( 125)														a126 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														a126 = (( (Float)(this371) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float r123;
HXDLIN( 125)													int this372 = ((this370 >> 16) & 255);
HXDLIN( 125)													if ((this372 == 0)) {
HXLINE( 125)														r123 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														r123 = (( (Float)(this372) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float g123;
HXDLIN( 125)													int this373 = ((this370 >> 8) & 255);
HXDLIN( 125)													if ((this373 == 0)) {
HXLINE( 125)														g123 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														g123 = (( (Float)(this373) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float b127;
HXDLIN( 125)													int this374 = (this370 & 255);
HXDLIN( 125)													if ((this374 == 0)) {
HXLINE( 125)														b127 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														b127 = (( (Float)(this374) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float a224;
HXDLIN( 125)													int this375 = ((col11 >> 24) & 255);
HXDLIN( 125)													if ((this375 == 0)) {
HXLINE( 125)														a224 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														a224 = (( (Float)(this375) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float r223;
HXDLIN( 125)													int this376 = ((col11 >> 16) & 255);
HXDLIN( 125)													if ((this376 == 0)) {
HXLINE( 125)														r223 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														r223 = (( (Float)(this376) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float g223;
HXDLIN( 125)													int this377 = ((col11 >> 8) & 255);
HXDLIN( 125)													if ((this377 == 0)) {
HXLINE( 125)														g223 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														g223 = (( (Float)(this377) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float b226;
HXDLIN( 125)													int this378 = (col11 & 255);
HXDLIN( 125)													if ((this378 == 0)) {
HXLINE( 125)														b226 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														b226 = (( (Float)(this378) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float a323 = (a126 * (( (Float)(1) ) - a224));
HXDLIN( 125)													int r48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r123 * a323) + (r223 * a224))));
HXDLIN( 125)													int g48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g123 * a323) + (g223 * a224))));
HXDLIN( 125)													int b77 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b127 * a323) + (b226 * a224))));
HXDLIN( 125)													int a65 = ::Std_obj::_hx_int((( (Float)(255) ) * (a323 + a224)));
HXDLIN( 125)													int blended22 = ((((a65 << 24) | (r48 << 16)) | (g48 << 8)) | b77);
HXDLIN( 125)													{
HXLINE( 125)														int _hx_tmp90;
HXDLIN( 125)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)															_hx_tmp90 = ((((((blended22 >> 24) & 255) << 24) | ((blended22 & 255) << 16)) | (((blended22 >> 8) & 255) << 8)) | ((blended22 >> 16) & 255));
            														}
            														else {
HXLINE( 125)															_hx_tmp90 = blended22;
            														}
HXDLIN( 125)														::iterMagic::Iimg_obj::set(undoImage33->image,location22,_hx_tmp90);
            													}
            												}
            												else {
HXLINE( 125)													::Dynamic this379 = undoImage33->image;
HXDLIN( 125)													int index49;
HXDLIN( 125)													if (undoImage33->useVirtualPos) {
HXLINE( 125)														index49 = ::Std_obj::_hx_int(((((( (Float)(y41) ) - undoImage33->virtualY) * ( (Float)(undoImage33->width) )) + x41) - undoImage33->virtualX));
            													}
            													else {
HXLINE( 125)														index49 = ::Std_obj::_hx_int(( (Float)(((y41 * undoImage33->width) + x41)) ));
            													}
HXDLIN( 125)													int _hx_tmp91;
HXDLIN( 125)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)														_hx_tmp91 = ((((((c38 >> 24) & 255) << 24) | ((c38 & 255) << 16)) | (((c38 >> 8) & 255) << 8)) | ((c38 >> 16) & 255));
            													}
            													else {
HXLINE( 125)														_hx_tmp91 = c38;
            													}
HXDLIN( 125)													::iterMagic::Iimg_obj::set(this379,index49,_hx_tmp91);
            												}
            											}
            											else {
HXLINE( 125)												if (forceClear11) {
HXLINE( 125)													::Dynamic this380 = undoImage33->image;
HXDLIN( 125)													int x42 = (dx12 - rectLeft11);
HXDLIN( 125)													int y42 = (dy12 - rectTop11);
HXDLIN( 125)													int index50;
HXDLIN( 125)													if (undoImage33->useVirtualPos) {
HXLINE( 125)														index50 = ::Std_obj::_hx_int(((((( (Float)(y42) ) - undoImage33->virtualY) * ( (Float)(undoImage33->width) )) + x42) - undoImage33->virtualX));
            													}
            													else {
HXLINE( 125)														index50 = ::Std_obj::_hx_int(( (Float)(((y42 * undoImage33->width) + x42)) ));
            													}
HXDLIN( 125)													::iterMagic::Iimg_obj::set(this380,index50,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 125)					{
HXLINE( 125)						int _g_min22 = xIter311->start;
HXDLIN( 125)						int _g_max22 = xIter311->max;
HXDLIN( 125)						while((_g_min22 < _g_max22)){
HXLINE( 125)							_g_min22 = (_g_min22 + 1);
HXDLIN( 125)							int px8 = (_g_min22 - 1);
HXDLIN( 125)							Float pcx8 = (( (Float)(px8) ) - x39);
HXDLIN( 125)							{
HXLINE( 125)								int _g_min23 = yIter311->start;
HXDLIN( 125)								int _g_max23 = yIter311->max;
HXDLIN( 125)								while((_g_min23 < _g_max23)){
HXLINE( 125)									_g_min23 = (_g_min23 + 1);
HXDLIN( 125)									int py8 = (_g_min23 - 1);
HXDLIN( 125)									Float pcy8 = (( (Float)(py8) ) - cy9);
HXDLIN( 125)									Float dot318 = ((pcx8 * bcx8) + (pcy8 * bcy8));
HXDLIN( 125)									Float dot328 = ((pcx8 * acx8) + (pcy8 * acy8));
HXDLIN( 125)									Float ratioA8 = (((dot228 * dot318) - (dot128 * dot328)) * denom18);
HXDLIN( 125)									Float ratioB8 = (((dot118 * dot328) - (dot128 * dot318)) * denom18);
HXDLIN( 125)									Float ratioC8 = ((((Float)1.0) - ratioB8) - ratioA8);
HXDLIN( 125)									bool _hx_tmp92;
HXDLIN( 125)									bool _hx_tmp93;
HXDLIN( 125)									if ((ratioA8 >= 0)) {
HXLINE( 125)										_hx_tmp93 = (ratioB8 >= 0);
            									}
            									else {
HXLINE( 125)										_hx_tmp93 = false;
            									}
HXDLIN( 125)									if (_hx_tmp93) {
HXLINE( 125)										_hx_tmp92 = (ratioC8 >= 0);
            									}
            									else {
HXLINE( 125)										_hx_tmp92 = false;
            									}
HXDLIN( 125)									if (_hx_tmp92) {
HXLINE( 125)										int i107 = ::Std_obj::_hx_int((((( (Float)(aA8) ) * ratioA8) + (( (Float)(aB8) ) * ratioB8)) + (( (Float)(aC8) ) * ratioC8)));
HXDLIN( 125)										if ((i107 > 255)) {
HXLINE(  24)											i107 = 255;
            										}
HXLINE( 125)										if ((i107 < 0)) {
HXLINE(  25)											i107 = 0;
            										}
HXLINE( 125)										int a66 = i107;
HXDLIN( 125)										int i108 = ::Std_obj::_hx_int((((( (Float)(rA8) ) * ratioA8) + (( (Float)(rB8) ) * ratioB8)) + (( (Float)(rC8) ) * ratioC8)));
HXDLIN( 125)										if ((i108 > 255)) {
HXLINE(  24)											i108 = 255;
            										}
HXLINE( 125)										if ((i108 < 0)) {
HXLINE(  25)											i108 = 0;
            										}
HXLINE( 125)										int r49 = i108;
HXDLIN( 125)										int i109 = ::Std_obj::_hx_int((((( (Float)(gA8) ) * ratioA8) + (( (Float)(gB8) ) * ratioB8)) + (( (Float)(gC8) ) * ratioC8)));
HXDLIN( 125)										if ((i109 > 255)) {
HXLINE(  24)											i109 = 255;
            										}
HXLINE( 125)										if ((i109 < 0)) {
HXLINE(  25)											i109 = 0;
            										}
HXLINE( 125)										int g49 = i109;
HXDLIN( 125)										int i110 = ::Std_obj::_hx_int((((( (Float)(bA8) ) * ratioA8) + (( (Float)(bB8) ) * ratioB8)) + (( (Float)(bC8) ) * ratioC8)));
HXDLIN( 125)										if ((i110 > 255)) {
HXLINE(  24)											i110 = 255;
            										}
HXLINE( 125)										if ((i110 < 0)) {
HXLINE(  25)											i110 = 0;
            										}
HXLINE( 125)										int b78 = i110;
HXDLIN( 125)										{
HXLINE( 125)											int location23;
HXDLIN( 125)											if (this358->useVirtualPos) {
HXLINE( 125)												location23 = ::Std_obj::_hx_int(((((( (Float)(py8) ) - this358->virtualY) * ( (Float)(this358->width) )) + px8) - this358->virtualX));
            											}
            											else {
HXLINE( 125)												location23 = ::Std_obj::_hx_int(( (Float)(((py8 * this358->width) + px8)) ));
            											}
HXDLIN( 125)											bool _hx_tmp94;
HXDLIN( 125)											if (this358->transparent) {
HXLINE( 125)												_hx_tmp94 = (a66 < 254);
            											}
            											else {
HXLINE( 125)												_hx_tmp94 = false;
            											}
HXDLIN( 125)											if (_hx_tmp94) {
HXLINE( 125)												int this381 = ::iterMagic::Iimg_obj::get(this358->image,location23);
HXDLIN( 125)												int old8;
HXDLIN( 125)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)													old8 = ((((((this381 >> 24) & 255) << 24) | ((this381 & 255) << 16)) | (((this381 >> 8) & 255) << 8)) | ((this381 >> 16) & 255));
            												}
            												else {
HXLINE( 125)													old8 = this381;
            												}
HXDLIN( 125)												int rhs8 = ((((a66 << 24) | (r49 << 16)) | (g49 << 8)) | b78);
HXDLIN( 125)												Float a127;
HXDLIN( 125)												int this382 = ((old8 >> 24) & 255);
HXDLIN( 125)												if ((this382 == 0)) {
HXLINE( 125)													a127 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													a127 = (( (Float)(this382) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float r124;
HXDLIN( 125)												int this383 = ((old8 >> 16) & 255);
HXDLIN( 125)												if ((this383 == 0)) {
HXLINE( 125)													r124 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													r124 = (( (Float)(this383) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float g124;
HXDLIN( 125)												int this384 = ((old8 >> 8) & 255);
HXDLIN( 125)												if ((this384 == 0)) {
HXLINE( 125)													g124 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													g124 = (( (Float)(this384) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float b128;
HXDLIN( 125)												int this385 = (old8 & 255);
HXDLIN( 125)												if ((this385 == 0)) {
HXLINE( 125)													b128 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													b128 = (( (Float)(this385) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float a225;
HXDLIN( 125)												int this386 = ((rhs8 >> 24) & 255);
HXDLIN( 125)												if ((this386 == 0)) {
HXLINE( 125)													a225 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													a225 = (( (Float)(this386) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float r224;
HXDLIN( 125)												int this387 = ((rhs8 >> 16) & 255);
HXDLIN( 125)												if ((this387 == 0)) {
HXLINE( 125)													r224 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													r224 = (( (Float)(this387) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float g224;
HXDLIN( 125)												int this388 = ((rhs8 >> 8) & 255);
HXDLIN( 125)												if ((this388 == 0)) {
HXLINE( 125)													g224 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													g224 = (( (Float)(this388) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float b227;
HXDLIN( 125)												int this389 = (rhs8 & 255);
HXDLIN( 125)												if ((this389 == 0)) {
HXLINE( 125)													b227 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													b227 = (( (Float)(this389) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float a324 = (a127 * (( (Float)(1) ) - a225));
HXDLIN( 125)												int r50 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r124 * a324) + (r224 * a225))));
HXDLIN( 125)												int g50 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g124 * a324) + (g224 * a225))));
HXDLIN( 125)												int b79 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b128 * a324) + (b227 * a225))));
HXDLIN( 125)												int a67 = ::Std_obj::_hx_int((( (Float)(255) ) * (a324 + a225)));
HXDLIN( 125)												int blended23 = ((((a67 << 24) | (r50 << 16)) | (g50 << 8)) | b79);
HXDLIN( 125)												{
HXLINE( 125)													int _hx_tmp95;
HXDLIN( 125)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)														_hx_tmp95 = ((((((blended23 >> 24) & 255) << 24) | ((blended23 & 255) << 16)) | (((blended23 >> 8) & 255) << 8)) | ((blended23 >> 16) & 255));
            													}
            													else {
HXLINE( 125)														_hx_tmp95 = blended23;
            													}
HXDLIN( 125)													::iterMagic::Iimg_obj::set(this358->image,location23,_hx_tmp95);
            												}
            											}
            											else {
HXLINE( 125)												int value8;
HXDLIN( 125)												if (this358->isLittle) {
HXLINE( 125)													value8 = ((((a66 << 24) | (b78 << 16)) | (g49 << 8)) | r49);
            												}
            												else {
HXLINE( 125)													value8 = ((((a66 << 24) | (r49 << 16)) | (g49 << 8)) | b78);
            												}
HXDLIN( 125)												::iterMagic::Iimg_obj::set(this358->image,location23,value8);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 125)					if ((hasHit11 == false)) {
HXLINE( 125)						 ::pi_xy::algo::HitTri v39 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,x39,lowerY,bx7,lowerY,x39,cy9,true);
HXDLIN( 125)						if (hasUndo11) {
HXLINE( 125)							v39->undoImage = undoImage33;
HXDLIN( 125)							v39->undoX = xIter311->start;
HXDLIN( 125)							v39->undoY = yIter311->start;
            						}
            					}
            				}
HXDLIN( 125)				{
HXLINE( 125)					bool hasHit12 = false;
HXDLIN( 125)					bool hasUndo12 = false;
HXDLIN( 125)					int aA9 = ((colorC >> 24) & 255);
HXDLIN( 125)					int rA9 = ((colorC >> 16) & 255);
HXDLIN( 125)					int gA9 = ((colorC >> 8) & 255);
HXDLIN( 125)					int bA9 = (colorC & 255);
HXDLIN( 125)					int aB9 = ((colorC >> 24) & 255);
HXDLIN( 125)					int rB9 = ((colorC >> 16) & 255);
HXDLIN( 125)					int gB9 = ((colorC >> 8) & 255);
HXDLIN( 125)					int bB9 = (colorC & 255);
HXDLIN( 125)					int aC9 = ((colorD >> 24) & 255);
HXDLIN( 125)					int rC9 = ((colorD >> 16) & 255);
HXDLIN( 125)					int gC9 = ((colorD >> 8) & 255);
HXDLIN( 125)					int bC9 = (colorD & 255);
HXDLIN( 125)					Float bcx9 = (bx7 - x39);
HXDLIN( 125)					Float bcy9 = (cy9 - cy9);
HXDLIN( 125)					Float acx9 = (bx7 - x39);
HXDLIN( 125)					Float acy9 = (lowerY - cy9);
HXDLIN( 125)					Float dot119 = ((bcx9 * bcx9) + (bcy9 * bcy9));
HXDLIN( 125)					Float dot129 = ((bcx9 * acx9) + (bcy9 * acy9));
HXDLIN( 125)					Float dot229 = ((acx9 * acx9) + (acy9 * acy9));
HXDLIN( 125)					Float denom19 = (( (Float)(1) ) / ((dot119 * dot229) - (dot129 * dot129)));
HXDLIN( 125)					 ::pi_xy::iter::IntIterStart xIter312;
HXDLIN( 125)					if ((bx7 > bx7)) {
HXLINE( 125)						if ((bx7 > x39)) {
HXLINE( 125)							int min48;
HXDLIN( 125)							if ((bx7 > x39)) {
HXLINE( 125)								min48 = ::Math_obj::floor(x39);
            							}
            							else {
HXLINE( 125)								min48 = ::Math_obj::floor(bx7);
            							}
HXDLIN( 125)							int ii_min96 = min48;
HXDLIN( 125)							int ii_max96 = ::Math_obj::ceil(bx7);
HXDLIN( 125)							xIter312 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min96,ii_max96);
            						}
            						else {
HXLINE( 125)							int ii_min97 = ::Math_obj::floor(bx7);
HXDLIN( 125)							int ii_max97 = ::Math_obj::ceil(x39);
HXDLIN( 125)							xIter312 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min97,ii_max97);
            						}
            					}
            					else {
HXLINE( 125)						if ((bx7 > x39)) {
HXLINE( 125)							int min49;
HXDLIN( 125)							if ((bx7 > x39)) {
HXLINE( 125)								min49 = ::Math_obj::floor(x39);
            							}
            							else {
HXLINE( 125)								min49 = ::Math_obj::ceil(bx7);
            							}
HXDLIN( 125)							int ii_min98 = min49;
HXDLIN( 125)							int ii_max98 = ::Math_obj::ceil(bx7);
HXDLIN( 125)							xIter312 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min98,ii_max98);
            						}
            						else {
HXLINE( 125)							int ii_min99 = ::Math_obj::floor(bx7);
HXDLIN( 125)							int ii_max99 = ::Math_obj::ceil(x39);
HXDLIN( 125)							xIter312 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min99,ii_max99);
            						}
            					}
HXDLIN( 125)					 ::pi_xy::iter::IntIterStart yIter312;
HXDLIN( 125)					if ((lowerY > cy9)) {
HXLINE( 125)						if ((lowerY > cy9)) {
HXLINE( 125)							int min50;
HXDLIN( 125)							if ((cy9 > cy9)) {
HXLINE( 125)								min50 = ::Math_obj::floor(cy9);
            							}
            							else {
HXLINE( 125)								min50 = ::Math_obj::floor(cy9);
            							}
HXDLIN( 125)							int ii_min100 = min50;
HXDLIN( 125)							int ii_max100 = ::Math_obj::ceil(lowerY);
HXDLIN( 125)							yIter312 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min100,ii_max100);
            						}
            						else {
HXLINE( 125)							int ii_min101 = ::Math_obj::floor(cy9);
HXDLIN( 125)							int ii_max101 = ::Math_obj::ceil(cy9);
HXDLIN( 125)							yIter312 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min101,ii_max101);
            						}
            					}
            					else {
HXLINE( 125)						if ((cy9 > cy9)) {
HXLINE( 125)							int min51;
HXDLIN( 125)							if ((lowerY > cy9)) {
HXLINE( 125)								min51 = ::Math_obj::floor(cy9);
            							}
            							else {
HXLINE( 125)								min51 = ::Math_obj::ceil(lowerY);
            							}
HXDLIN( 125)							int ii_min102 = min51;
HXDLIN( 125)							int ii_max102 = ::Math_obj::ceil(cy9);
HXDLIN( 125)							yIter312 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min102,ii_max102);
            						}
            						else {
HXLINE( 125)							int ii_min103 = ::Math_obj::floor(lowerY);
HXDLIN( 125)							int ii_max103 = ::Math_obj::ceil(cy9);
HXDLIN( 125)							yIter312 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min103,ii_max103);
            						}
            					}
HXDLIN( 125)					 ::pi_xy::ImageStruct undoImage36 = null();
HXDLIN( 125)					if (hasUndo12) {
HXLINE( 125)						int width12 = ((xIter312->max - xIter312->start) + 1);
HXDLIN( 125)						int height12 = ((yIter312->max - yIter312->start) + 1);
HXDLIN( 125)						 ::Dynamic imageType12 = null();
HXDLIN( 125)						 ::pi_xy::ImageStruct this390 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 125)						if (::hx::IsNull( imageType12 )) {
HXLINE(  54)							imageType12 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 125)						::Dynamic undoImage37;
HXDLIN( 125)						switch((int)(( (int)(imageType12) ))){
            							case (int)0: {
HXLINE( 125)								 ::iterMagic::BytesImg byt12 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 125)								 ::iterMagic::BytesImg b80 = byt12;
HXDLIN( 125)								{
HXLINE( 125)									b80->width = width12;
HXDLIN( 125)									b80->height = height12;
HXDLIN( 125)									b80->length = ::Std_obj::_hx_int(( (Float)((width12 * height12)) ));
HXDLIN( 125)									b80->data = ::haxe::io::Bytes_obj::alloc((b80->length * 4));
HXDLIN( 125)									{
HXLINE( 125)										int len24 = b80->length;
HXDLIN( 125)										int w12 = 0;
HXDLIN( 125)										{
HXLINE( 125)											int _g246 = 0;
HXDLIN( 125)											int _g247 = b80->height;
HXDLIN( 125)											while((_g246 < _g247)){
HXLINE( 125)												_g246 = (_g246 + 1);
HXDLIN( 125)												int y43 = (_g246 - 1);
HXDLIN( 125)												{
HXLINE( 125)													int _g248 = 0;
HXDLIN( 125)													int _g249 = b80->width;
HXDLIN( 125)													while((_g248 < _g249)){
HXLINE( 125)														_g248 = (_g248 + 1);
HXDLIN( 125)														int x43 = (_g248 - 1);
HXDLIN( 125)														{
HXLINE( 125)															w12 = (w12 + 1);
HXDLIN( 125)															b80->data->b[(w12 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 125)														{
HXLINE( 125)															w12 = (w12 + 1);
HXDLIN( 125)															b80->data->b[(w12 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 125)														{
HXLINE( 125)															w12 = (w12 + 1);
HXDLIN( 125)															b80->data->b[(w12 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 125)														{
HXLINE( 125)															w12 = (w12 + 1);
HXDLIN( 125)															b80->data->b[(w12 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 125)								undoImage37 = b80;
            							}
            							break;
            							case (int)1: {
HXLINE( 125)								 ::iterMagic::ArrIntImg arrI12 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 125)								 ::iterMagic::ArrIntImg a68 = arrI12;
HXDLIN( 125)								{
HXLINE( 125)									a68->width = width12;
HXDLIN( 125)									a68->height = height12;
HXDLIN( 125)									a68->data = ::Array_obj< int >::__new(0);
HXDLIN( 125)									a68->length = ::Std_obj::_hx_int(( (Float)((width12 * height12)) ));
HXDLIN( 125)									{
HXLINE( 125)										int _g250 = 0;
HXDLIN( 125)										int _g251 = a68->length;
HXDLIN( 125)										while((_g250 < _g251)){
HXLINE( 125)											_g250 = (_g250 + 1);
HXDLIN( 125)											int i111 = (_g250 - 1);
HXDLIN( 125)											a68->data[i111] = 0;
            										}
            									}
            								}
HXDLIN( 125)								undoImage37 = a68;
            							}
            							break;
            							case (int)2: {
HXLINE( 125)								 ::iterMagic::U32ArrImg u32a12 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 125)								 ::iterMagic::U32ArrImg b81 = u32a12;
HXDLIN( 125)								{
HXLINE( 125)									b81->width = width12;
HXDLIN( 125)									b81->height = height12;
HXDLIN( 125)									b81->length = ::Std_obj::_hx_int(( (Float)((width12 * height12)) ));
HXDLIN( 125)									int size12 = (b81->length * 4);
HXDLIN( 125)									b81->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size12),0,size12);
HXDLIN( 125)									{
HXLINE( 125)										int _g252 = 0;
HXDLIN( 125)										int _g253 = b81->length;
HXDLIN( 125)										while((_g252 < _g253)){
HXLINE( 125)											_g252 = (_g252 + 1);
HXDLIN( 125)											int i112 = (_g252 - 1);
HXDLIN( 125)											{
HXLINE( 125)												 ::haxe::io::ArrayBufferViewImpl this391 = b81->data;
HXDLIN( 125)												bool undoImage38;
HXDLIN( 125)												if ((i112 >= 0)) {
HXLINE( 125)													undoImage38 = (i112 < (this391->byteLength >> 2));
            												}
            												else {
HXLINE( 125)													undoImage38 = false;
            												}
HXDLIN( 125)												if (undoImage38) {
HXLINE( 125)													 ::haxe::io::Bytes _this12 = this391->bytes;
HXDLIN( 125)													int pos12 = ((i112 << 2) + this391->byteOffset);
HXDLIN( 125)													_this12->b[pos12] = ( (unsigned char)(0) );
HXDLIN( 125)													_this12->b[(pos12 + 1)] = ( (unsigned char)(0) );
HXDLIN( 125)													_this12->b[(pos12 + 2)] = ( (unsigned char)(0) );
HXDLIN( 125)													_this12->b[(pos12 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 125)								undoImage37 = b81;
            							}
            							break;
            							case (int)3: {
HXLINE( 125)								 ::iterMagic::VecIntImg vec12 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 125)								 ::iterMagic::VecIntImg v40 = vec12;
HXDLIN( 125)								{
HXLINE( 125)									v40->width = width12;
HXDLIN( 125)									v40->height = height12;
HXDLIN( 125)									v40->length = ::Std_obj::_hx_int(( (Float)((width12 * height12)) ));
HXDLIN( 125)									v40->data = ::Array_obj< int >::__new(v40->length);
HXDLIN( 125)									{
HXLINE( 125)										int _g254 = 0;
HXDLIN( 125)										int _g255 = v40->length;
HXDLIN( 125)										while((_g254 < _g255)){
HXLINE( 125)											_g254 = (_g254 + 1);
HXDLIN( 125)											int i113 = (_g254 - 1);
HXDLIN( 125)											v40->data->__unsafe_set(i113,0);
            										}
            									}
            								}
HXDLIN( 125)								undoImage37 = v40;
            							}
            							break;
            							case (int)4: {
HXLINE( 125)								 ::iterMagic::StackIntImg sInt12 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 125)								 ::iterMagic::StackIntImg b82 = sInt12;
HXDLIN( 125)								{
HXLINE( 125)									b82->width = width12;
HXDLIN( 125)									b82->height = height12;
HXDLIN( 125)									b82->length = ::Std_obj::_hx_int(( (Float)((width12 * height12)) ));
HXDLIN( 125)									b82->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 125)									{
HXLINE( 125)										int len25 = b82->length;
HXDLIN( 125)										 ::haxe::ds::GenericStack_Int d12 = b82->data;
HXDLIN( 125)										if (::hx::IsNull( d12->head )) {
HXLINE( 125)											int _g256 = 0;
HXDLIN( 125)											int _g257 = len25;
HXDLIN( 125)											while((_g256 < _g257)){
HXLINE( 125)												_g256 = (_g256 + 1);
HXDLIN( 125)												int i114 = (_g256 - 1);
HXDLIN( 125)												d12->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d12->head);
            											}
            										}
            										else {
HXLINE( 125)											int _g258 = 0;
HXDLIN( 125)											int _g259 = len25;
HXDLIN( 125)											while((_g258 < _g259)){
HXLINE( 125)												_g258 = (_g258 + 1);
HXDLIN( 125)												int i115 = (_g258 - 1);
HXDLIN( 125)												{
HXLINE( 125)													 ::haxe::ds::GenericCell_Int l12 = b82->data->head;
HXDLIN( 125)													 ::haxe::ds::GenericCell_Int prev12 = null();
HXDLIN( 125)													{
HXLINE( 125)														int _g260 = 0;
HXDLIN( 125)														int _g261 = i115;
HXDLIN( 125)														while((_g260 < _g261)){
HXLINE( 125)															_g260 = (_g260 + 1);
HXDLIN( 125)															int i116 = (_g260 - 1);
HXLINE( 345)															prev12 = l12;
HXLINE( 346)															l12 = l12->next;
            														}
            													}
HXLINE( 125)													if (::hx::IsNull( prev12 )) {
HXLINE( 125)														b82->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l12->next);
HXDLIN( 125)														l12 = null();
            													}
            													else {
HXLINE( 125)														prev12->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l12->next);
HXDLIN( 125)														l12 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 125)								undoImage37 = b82;
            							}
            							break;
            						}
HXDLIN( 125)						this390->image = undoImage37;
HXDLIN( 125)						this390->width = width12;
HXDLIN( 125)						this390->height = height12;
HXDLIN( 125)						this390->imageType = ( (int)(imageType12) );
HXDLIN( 125)						undoImage36 = this390;
HXDLIN( 125)						{
HXLINE( 125)							int rectLeft12 = xIter312->start;
HXDLIN( 125)							int rectTop12 = yIter312->start;
HXDLIN( 125)							int rectRight12 = xIter312->max;
HXDLIN( 125)							bool forceClear12 = false;
HXDLIN( 125)							{
HXLINE( 125)								int _g262 = rectTop12;
HXDLIN( 125)								int _g263 = yIter312->max;
HXDLIN( 125)								while((_g262 < _g263)){
HXLINE( 125)									_g262 = (_g262 + 1);
HXDLIN( 125)									int dy13 = (_g262 - 1);
HXDLIN( 125)									{
HXLINE( 125)										int _g264 = rectLeft12;
HXDLIN( 125)										int _g265 = rectRight12;
HXDLIN( 125)										while((_g264 < _g265)){
HXLINE( 125)											_g264 = (_g264 + 1);
HXDLIN( 125)											int dx13 = (_g264 - 1);
HXDLIN( 125)											::Dynamic this392 = this358->image;
HXDLIN( 125)											int index51;
HXDLIN( 125)											if (this358->useVirtualPos) {
HXLINE( 125)												index51 = ::Std_obj::_hx_int(((((( (Float)(dy13) ) - this358->virtualY) * ( (Float)(this358->width) )) + dx13) - this358->virtualX));
            											}
            											else {
HXLINE( 125)												index51 = ::Std_obj::_hx_int(( (Float)(((dy13 * this358->width) + dx13)) ));
            											}
HXDLIN( 125)											int c39 = ::iterMagic::Iimg_obj::get(this392,index51);
HXDLIN( 125)											int col12;
HXDLIN( 125)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)												col12 = ((((((c39 >> 24) & 255) << 24) | ((c39 & 255) << 16)) | (((c39 >> 8) & 255) << 8)) | ((c39 >> 16) & 255));
            											}
            											else {
HXLINE( 125)												col12 = c39;
            											}
HXDLIN( 125)											bool _hx_tmp96;
HXDLIN( 125)											if (this358->useMask) {
HXLINE( 125)												_hx_tmp96 = ::hx::IsNotNull( this358->mask );
            											}
            											else {
HXLINE( 125)												_hx_tmp96 = false;
            											}
HXDLIN( 125)											if (_hx_tmp96) {
HXLINE( 125)												 ::pi_xy::ImageStruct this393 = this358->mask;
HXDLIN( 125)												::Dynamic this394 = this393->image;
HXDLIN( 125)												int index52;
HXDLIN( 125)												if (this393->useVirtualPos) {
HXLINE( 125)													index52 = ::Std_obj::_hx_int(((((( (Float)(dy13) ) - this393->virtualY) * ( (Float)(this393->width) )) + dx13) - this393->virtualX));
            												}
            												else {
HXLINE( 125)													index52 = ::Std_obj::_hx_int(( (Float)(((dy13 * this393->width) + dx13)) ));
            												}
HXDLIN( 125)												int c40 = ::iterMagic::Iimg_obj::get(this394,index52);
HXDLIN( 125)												int v41;
HXDLIN( 125)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)													v41 = ((((((c40 >> 24) & 255) << 24) | ((c40 & 255) << 16)) | (((c40 >> 8) & 255) << 8)) | ((c40 >> 16) & 255));
            												}
            												else {
HXLINE( 125)													v41 = c40;
            												}
HXDLIN( 125)												int maskPixel12 = v41;
HXDLIN( 125)												int this395 = col12;
HXDLIN( 125)												if ((maskPixel12 == 0)) {
HXLINE( 125)													col12 = this395;
            												}
            												else {
HXLINE( 125)													Float m012;
HXDLIN( 125)													int this396 = ((maskPixel12 >> 24) & 255);
HXDLIN( 125)													if ((this396 == 0)) {
HXLINE( 125)														m012 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														m012 = (( (Float)(this396) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float m112;
HXDLIN( 125)													int this397 = ((maskPixel12 >> 16) & 255);
HXDLIN( 125)													if ((this397 == 0)) {
HXLINE( 125)														m112 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														m112 = (( (Float)(this397) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float m212;
HXDLIN( 125)													int this398 = ((maskPixel12 >> 8) & 255);
HXDLIN( 125)													if ((this398 == 0)) {
HXLINE( 125)														m212 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														m212 = (( (Float)(this398) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float m312;
HXDLIN( 125)													int this399 = (maskPixel12 & 255);
HXDLIN( 125)													if ((this399 == 0)) {
HXLINE( 125)														m312 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														m312 = (( (Float)(this399) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													int ch012 = ::Std_obj::_hx_int(((((Float)1.) - m012) * ( (Float)(((this395 >> 24) & 255)) )));
HXDLIN( 125)													int ch112 = ::Std_obj::_hx_int(((((Float)1.) - m112) * ( (Float)(((this395 >> 16) & 255)) )));
HXDLIN( 125)													int ch212 = ::Std_obj::_hx_int(((((Float)1.) - m212) * ( (Float)(((this395 >> 8) & 255)) )));
HXDLIN( 125)													int ch312 = ::Std_obj::_hx_int(((((Float)1.) - m312) * ( (Float)((this395 & 255)) )));
HXDLIN( 125)													col12 = ((((::Math_obj::round((( (Float)(ch012) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch112) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch212) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch312) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 125)											if ((col12 != 0)) {
HXLINE( 125)												int x44 = (dx13 - rectLeft12);
HXDLIN( 125)												int y44 = (dy13 - rectTop12);
HXDLIN( 125)												int c41 = col12;
HXDLIN( 125)												bool _hx_tmp97;
HXDLIN( 125)												if ((((c41 >> 24) & 255) < 254)) {
HXLINE( 125)													_hx_tmp97 = undoImage36->transparent;
            												}
            												else {
HXLINE( 125)													_hx_tmp97 = false;
            												}
HXDLIN( 125)												if (_hx_tmp97) {
HXLINE( 125)													int location24;
HXDLIN( 125)													if (undoImage36->useVirtualPos) {
HXLINE( 125)														location24 = ::Std_obj::_hx_int(((((( (Float)(y44) ) - undoImage36->virtualY) * ( (Float)(undoImage36->width) )) + x44) - undoImage36->virtualX));
            													}
            													else {
HXLINE( 125)														location24 = ::Std_obj::_hx_int(( (Float)(((y44 * undoImage36->width) + x44)) ));
            													}
HXDLIN( 125)													int this400 = ::iterMagic::Iimg_obj::get(undoImage36->image,location24);
HXDLIN( 125)													int this401;
HXDLIN( 125)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)														this401 = ((((((this400 >> 24) & 255) << 24) | ((this400 & 255) << 16)) | (((this400 >> 8) & 255) << 8)) | ((this400 >> 16) & 255));
            													}
            													else {
HXLINE( 125)														this401 = this400;
            													}
HXDLIN( 125)													Float a128;
HXDLIN( 125)													int this402 = ((this401 >> 24) & 255);
HXDLIN( 125)													if ((this402 == 0)) {
HXLINE( 125)														a128 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														a128 = (( (Float)(this402) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float r125;
HXDLIN( 125)													int this403 = ((this401 >> 16) & 255);
HXDLIN( 125)													if ((this403 == 0)) {
HXLINE( 125)														r125 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														r125 = (( (Float)(this403) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float g125;
HXDLIN( 125)													int this404 = ((this401 >> 8) & 255);
HXDLIN( 125)													if ((this404 == 0)) {
HXLINE( 125)														g125 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														g125 = (( (Float)(this404) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float b129;
HXDLIN( 125)													int this405 = (this401 & 255);
HXDLIN( 125)													if ((this405 == 0)) {
HXLINE( 125)														b129 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														b129 = (( (Float)(this405) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float a226;
HXDLIN( 125)													int this406 = ((col12 >> 24) & 255);
HXDLIN( 125)													if ((this406 == 0)) {
HXLINE( 125)														a226 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														a226 = (( (Float)(this406) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float r225;
HXDLIN( 125)													int this407 = ((col12 >> 16) & 255);
HXDLIN( 125)													if ((this407 == 0)) {
HXLINE( 125)														r225 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														r225 = (( (Float)(this407) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float g225;
HXDLIN( 125)													int this408 = ((col12 >> 8) & 255);
HXDLIN( 125)													if ((this408 == 0)) {
HXLINE( 125)														g225 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														g225 = (( (Float)(this408) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float b228;
HXDLIN( 125)													int this409 = (col12 & 255);
HXDLIN( 125)													if ((this409 == 0)) {
HXLINE( 125)														b228 = ((Float)0.);
            													}
            													else {
HXLINE( 125)														b228 = (( (Float)(this409) ) / ( (Float)(255) ));
            													}
HXDLIN( 125)													Float a325 = (a128 * (( (Float)(1) ) - a226));
HXDLIN( 125)													int r51 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r125 * a325) + (r225 * a226))));
HXDLIN( 125)													int g51 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g125 * a325) + (g225 * a226))));
HXDLIN( 125)													int b83 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b129 * a325) + (b228 * a226))));
HXDLIN( 125)													int a69 = ::Std_obj::_hx_int((( (Float)(255) ) * (a325 + a226)));
HXDLIN( 125)													int blended24 = ((((a69 << 24) | (r51 << 16)) | (g51 << 8)) | b83);
HXDLIN( 125)													{
HXLINE( 125)														int _hx_tmp98;
HXDLIN( 125)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)															_hx_tmp98 = ((((((blended24 >> 24) & 255) << 24) | ((blended24 & 255) << 16)) | (((blended24 >> 8) & 255) << 8)) | ((blended24 >> 16) & 255));
            														}
            														else {
HXLINE( 125)															_hx_tmp98 = blended24;
            														}
HXDLIN( 125)														::iterMagic::Iimg_obj::set(undoImage36->image,location24,_hx_tmp98);
            													}
            												}
            												else {
HXLINE( 125)													::Dynamic this410 = undoImage36->image;
HXDLIN( 125)													int index53;
HXDLIN( 125)													if (undoImage36->useVirtualPos) {
HXLINE( 125)														index53 = ::Std_obj::_hx_int(((((( (Float)(y44) ) - undoImage36->virtualY) * ( (Float)(undoImage36->width) )) + x44) - undoImage36->virtualX));
            													}
            													else {
HXLINE( 125)														index53 = ::Std_obj::_hx_int(( (Float)(((y44 * undoImage36->width) + x44)) ));
            													}
HXDLIN( 125)													int _hx_tmp99;
HXDLIN( 125)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)														_hx_tmp99 = ((((((c41 >> 24) & 255) << 24) | ((c41 & 255) << 16)) | (((c41 >> 8) & 255) << 8)) | ((c41 >> 16) & 255));
            													}
            													else {
HXLINE( 125)														_hx_tmp99 = c41;
            													}
HXDLIN( 125)													::iterMagic::Iimg_obj::set(this410,index53,_hx_tmp99);
            												}
            											}
            											else {
HXLINE( 125)												if (forceClear12) {
HXLINE( 125)													::Dynamic this411 = undoImage36->image;
HXDLIN( 125)													int x45 = (dx13 - rectLeft12);
HXDLIN( 125)													int y45 = (dy13 - rectTop12);
HXDLIN( 125)													int index54;
HXDLIN( 125)													if (undoImage36->useVirtualPos) {
HXLINE( 125)														index54 = ::Std_obj::_hx_int(((((( (Float)(y45) ) - undoImage36->virtualY) * ( (Float)(undoImage36->width) )) + x45) - undoImage36->virtualX));
            													}
            													else {
HXLINE( 125)														index54 = ::Std_obj::_hx_int(( (Float)(((y45 * undoImage36->width) + x45)) ));
            													}
HXDLIN( 125)													::iterMagic::Iimg_obj::set(this411,index54,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 125)					{
HXLINE( 125)						int _g_min24 = xIter312->start;
HXDLIN( 125)						int _g_max24 = xIter312->max;
HXDLIN( 125)						while((_g_min24 < _g_max24)){
HXLINE( 125)							_g_min24 = (_g_min24 + 1);
HXDLIN( 125)							int px9 = (_g_min24 - 1);
HXDLIN( 125)							Float pcx9 = (( (Float)(px9) ) - x39);
HXDLIN( 125)							{
HXLINE( 125)								int _g_min25 = yIter312->start;
HXDLIN( 125)								int _g_max25 = yIter312->max;
HXDLIN( 125)								while((_g_min25 < _g_max25)){
HXLINE( 125)									_g_min25 = (_g_min25 + 1);
HXDLIN( 125)									int py9 = (_g_min25 - 1);
HXDLIN( 125)									Float pcy9 = (( (Float)(py9) ) - cy9);
HXDLIN( 125)									Float dot319 = ((pcx9 * bcx9) + (pcy9 * bcy9));
HXDLIN( 125)									Float dot329 = ((pcx9 * acx9) + (pcy9 * acy9));
HXDLIN( 125)									Float ratioA9 = (((dot229 * dot319) - (dot129 * dot329)) * denom19);
HXDLIN( 125)									Float ratioB9 = (((dot119 * dot329) - (dot129 * dot319)) * denom19);
HXDLIN( 125)									Float ratioC9 = ((((Float)1.0) - ratioB9) - ratioA9);
HXDLIN( 125)									bool _hx_tmp100;
HXDLIN( 125)									bool _hx_tmp101;
HXDLIN( 125)									if ((ratioA9 >= 0)) {
HXLINE( 125)										_hx_tmp101 = (ratioB9 >= 0);
            									}
            									else {
HXLINE( 125)										_hx_tmp101 = false;
            									}
HXDLIN( 125)									if (_hx_tmp101) {
HXLINE( 125)										_hx_tmp100 = (ratioC9 >= 0);
            									}
            									else {
HXLINE( 125)										_hx_tmp100 = false;
            									}
HXDLIN( 125)									if (_hx_tmp100) {
HXLINE( 125)										int i117 = ::Std_obj::_hx_int((((( (Float)(aA9) ) * ratioA9) + (( (Float)(aB9) ) * ratioB9)) + (( (Float)(aC9) ) * ratioC9)));
HXDLIN( 125)										if ((i117 > 255)) {
HXLINE(  24)											i117 = 255;
            										}
HXLINE( 125)										if ((i117 < 0)) {
HXLINE(  25)											i117 = 0;
            										}
HXLINE( 125)										int a70 = i117;
HXDLIN( 125)										int i118 = ::Std_obj::_hx_int((((( (Float)(rA9) ) * ratioA9) + (( (Float)(rB9) ) * ratioB9)) + (( (Float)(rC9) ) * ratioC9)));
HXDLIN( 125)										if ((i118 > 255)) {
HXLINE(  24)											i118 = 255;
            										}
HXLINE( 125)										if ((i118 < 0)) {
HXLINE(  25)											i118 = 0;
            										}
HXLINE( 125)										int r52 = i118;
HXDLIN( 125)										int i119 = ::Std_obj::_hx_int((((( (Float)(gA9) ) * ratioA9) + (( (Float)(gB9) ) * ratioB9)) + (( (Float)(gC9) ) * ratioC9)));
HXDLIN( 125)										if ((i119 > 255)) {
HXLINE(  24)											i119 = 255;
            										}
HXLINE( 125)										if ((i119 < 0)) {
HXLINE(  25)											i119 = 0;
            										}
HXLINE( 125)										int g52 = i119;
HXDLIN( 125)										int i120 = ::Std_obj::_hx_int((((( (Float)(bA9) ) * ratioA9) + (( (Float)(bB9) ) * ratioB9)) + (( (Float)(bC9) ) * ratioC9)));
HXDLIN( 125)										if ((i120 > 255)) {
HXLINE(  24)											i120 = 255;
            										}
HXLINE( 125)										if ((i120 < 0)) {
HXLINE(  25)											i120 = 0;
            										}
HXLINE( 125)										int b84 = i120;
HXDLIN( 125)										{
HXLINE( 125)											int location25;
HXDLIN( 125)											if (this358->useVirtualPos) {
HXLINE( 125)												location25 = ::Std_obj::_hx_int(((((( (Float)(py9) ) - this358->virtualY) * ( (Float)(this358->width) )) + px9) - this358->virtualX));
            											}
            											else {
HXLINE( 125)												location25 = ::Std_obj::_hx_int(( (Float)(((py9 * this358->width) + px9)) ));
            											}
HXDLIN( 125)											bool _hx_tmp102;
HXDLIN( 125)											if (this358->transparent) {
HXLINE( 125)												_hx_tmp102 = (a70 < 254);
            											}
            											else {
HXLINE( 125)												_hx_tmp102 = false;
            											}
HXDLIN( 125)											if (_hx_tmp102) {
HXLINE( 125)												int this412 = ::iterMagic::Iimg_obj::get(this358->image,location25);
HXDLIN( 125)												int old9;
HXDLIN( 125)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)													old9 = ((((((this412 >> 24) & 255) << 24) | ((this412 & 255) << 16)) | (((this412 >> 8) & 255) << 8)) | ((this412 >> 16) & 255));
            												}
            												else {
HXLINE( 125)													old9 = this412;
            												}
HXDLIN( 125)												int rhs9 = ((((a70 << 24) | (r52 << 16)) | (g52 << 8)) | b84);
HXDLIN( 125)												Float a129;
HXDLIN( 125)												int this413 = ((old9 >> 24) & 255);
HXDLIN( 125)												if ((this413 == 0)) {
HXLINE( 125)													a129 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													a129 = (( (Float)(this413) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float r126;
HXDLIN( 125)												int this414 = ((old9 >> 16) & 255);
HXDLIN( 125)												if ((this414 == 0)) {
HXLINE( 125)													r126 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													r126 = (( (Float)(this414) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float g126;
HXDLIN( 125)												int this415 = ((old9 >> 8) & 255);
HXDLIN( 125)												if ((this415 == 0)) {
HXLINE( 125)													g126 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													g126 = (( (Float)(this415) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float b130;
HXDLIN( 125)												int this416 = (old9 & 255);
HXDLIN( 125)												if ((this416 == 0)) {
HXLINE( 125)													b130 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													b130 = (( (Float)(this416) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float a227;
HXDLIN( 125)												int this417 = ((rhs9 >> 24) & 255);
HXDLIN( 125)												if ((this417 == 0)) {
HXLINE( 125)													a227 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													a227 = (( (Float)(this417) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float r226;
HXDLIN( 125)												int this418 = ((rhs9 >> 16) & 255);
HXDLIN( 125)												if ((this418 == 0)) {
HXLINE( 125)													r226 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													r226 = (( (Float)(this418) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float g226;
HXDLIN( 125)												int this419 = ((rhs9 >> 8) & 255);
HXDLIN( 125)												if ((this419 == 0)) {
HXLINE( 125)													g226 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													g226 = (( (Float)(this419) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float b229;
HXDLIN( 125)												int this420 = (rhs9 & 255);
HXDLIN( 125)												if ((this420 == 0)) {
HXLINE( 125)													b229 = ((Float)0.);
            												}
            												else {
HXLINE( 125)													b229 = (( (Float)(this420) ) / ( (Float)(255) ));
            												}
HXDLIN( 125)												Float a326 = (a129 * (( (Float)(1) ) - a227));
HXDLIN( 125)												int r53 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r126 * a326) + (r226 * a227))));
HXDLIN( 125)												int g53 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g126 * a326) + (g226 * a227))));
HXDLIN( 125)												int b85 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b130 * a326) + (b229 * a227))));
HXDLIN( 125)												int a71 = ::Std_obj::_hx_int((( (Float)(255) ) * (a326 + a227)));
HXDLIN( 125)												int blended25 = ((((a71 << 24) | (r53 << 16)) | (g53 << 8)) | b85);
HXDLIN( 125)												{
HXLINE( 125)													int _hx_tmp103;
HXDLIN( 125)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)														_hx_tmp103 = ((((((blended25 >> 24) & 255) << 24) | ((blended25 & 255) << 16)) | (((blended25 >> 8) & 255) << 8)) | ((blended25 >> 16) & 255));
            													}
            													else {
HXLINE( 125)														_hx_tmp103 = blended25;
            													}
HXDLIN( 125)													::iterMagic::Iimg_obj::set(this358->image,location25,_hx_tmp103);
            												}
            											}
            											else {
HXLINE( 125)												int value9;
HXDLIN( 125)												if (this358->isLittle) {
HXLINE( 125)													value9 = ((((a70 << 24) | (b84 << 16)) | (g52 << 8)) | r52);
            												}
            												else {
HXLINE( 125)													value9 = ((((a70 << 24) | (r52 << 16)) | (g52 << 8)) | b84);
            												}
HXDLIN( 125)												::iterMagic::Iimg_obj::set(this358->image,location25,value9);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 125)					if ((hasHit12 == false)) {
HXLINE( 125)						 ::pi_xy::algo::HitTri v42 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx7,lowerY,bx7,cy9,x39,cy9,true);
HXDLIN( 125)						if (hasUndo12) {
HXLINE( 125)							v42->undoImage = undoImage36;
HXDLIN( 125)							v42->undoX = xIter312->start;
HXDLIN( 125)							v42->undoY = yIter312->start;
            						}
            					}
            				}
HXDLIN( 125)				if ((hasHit11 == true)) {
HXLINE( 125)					 ::pi_xy::algo::HitQuad v43 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,x39,lowerY,bx7,lowerY,bx7,cy9,x39,cy9,true);
            				}
            			}
            		}
HXDLIN( 125)		Float inlobj_ax4 = x39;
HXDLIN( 125)		Float inlobj_ay4 = lowerY;
HXDLIN( 125)		Float inlobj_bx4 = bx7;
HXDLIN( 125)		Float inlobj_y4 = lowerY;
HXDLIN( 125)		Float inlobj_cx4 = bx7;
HXDLIN( 125)		Float inlobj_cy4 = cy9;
HXDLIN( 125)		Float inlobj_x4 = x39;
HXDLIN( 125)		Float inlobj_dy4 = cy9;
HXLINE( 126)		{
HXLINE( 126)			 ::pi_xy::ImageStruct this421 = pixelimage;
HXDLIN( 126)			{
HXLINE( 126)				 ::Dynamic targetError3 = ((Float)1.05);
HXDLIN( 126)				if (::hx::IsNull( targetError3 )) {
HXLINE( 113)					targetError3 = ((Float)1.05);
            				}
HXLINE( 126)				Float rSmall3;
HXDLIN( 126)				if ((rightRadius > bottomRadius)) {
HXLINE( 126)					rSmall3 = bottomRadius;
            				}
            				else {
HXLINE( 126)					rSmall3 = rightRadius;
            				}
HXDLIN( 126)				 ::Dynamic targetE3 = ( (Float)(targetError3) );
HXDLIN( 126)				if (::hx::IsNull( targetE3 )) {
HXLINE(  20)					targetE3 = ((Float)1.05);
            				}
HXLINE( 126)				int result3 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE3) ) / rSmall3)))));
HXDLIN( 126)				int noSides3;
HXDLIN( 126)				if ((result3 < 12)) {
HXLINE( 126)					noSides3 = 12;
            				}
            				else {
HXLINE( 126)					if ((result3 > 500)) {
HXLINE( 126)						noSides3 = 500;
            					}
            					else {
HXLINE( 126)						noSides3 = result3;
            					}
            				}
HXDLIN( 126)				int sides3 = (::Math_obj::ceil((( (Float)(noSides3) ) / ( (Float)(4) ))) * 4);
HXDLIN( 126)				Float theta3 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides3) ));
HXDLIN( 126)				Float omega3 = ( (Float)(0) );
HXDLIN( 126)				int quarter3 = ::Std_obj::_hx_int((( (Float)(sides3) ) / ( (Float)(4) )));
HXDLIN( 126)				Float lastX3 = ((Float)0.);
HXDLIN( 126)				Float lastY3 = ((Float)0.);
HXDLIN( 126)				{
HXLINE(  26)					lastX3 = (farX + (rightRadius * ::Math_obj::cos(((( (Float)(sides3) ) * theta3) + omega3))));
HXLINE(  27)					lastY3 = (lowerY + (bottomRadius * ::Math_obj::sin(((( (Float)(sides3) ) * theta3) + omega3))));
            				}
HXLINE( 126)				{
HXLINE( 126)					int _g266 = 0;
HXDLIN( 126)					int _g267 = (quarter3 + 1);
HXDLIN( 126)					while((_g266 < _g267)){
HXLINE( 126)						_g266 = (_g266 + 1);
HXDLIN( 126)						int i121 = (_g266 - 1);
HXDLIN( 126)						Float nextX3 = (farX + (rightRadius * ::Math_obj::cos((((( (Float)(i121) ) * theta3) + ((Float)0.0001)) + omega3))));
HXDLIN( 126)						Float nextY3 = (lowerY + (bottomRadius * ::Math_obj::sin((((( (Float)(i121) ) * theta3) + ((Float)0.0001)) + omega3))));
HXDLIN( 126)						{
HXLINE( 126)							 ::pi_xy::ImageStruct this422 = this421;
HXDLIN( 126)							bool hasHit13 = false;
HXDLIN( 126)							bool hasUndo13 = false;
HXDLIN( 126)							{
HXLINE( 126)								Float bx8 = lastX3;
HXDLIN( 126)								Float by3 = lastY3;
HXDLIN( 126)								Float cx5 = nextX3;
HXDLIN( 126)								Float cy10 = nextY3;
HXDLIN( 126)								bool adjustWinding3 = (((((farX * by3) - (bx8 * lowerY)) + ((bx8 * cy10) - (cx5 * by3))) + ((cx5 * lowerY) - (farX * cy10))) > 0);
HXDLIN( 126)								if (!(adjustWinding3)) {
HXLINE( 126)									Float bx_3 = bx8;
HXDLIN( 126)									Float by_3 = by3;
HXLINE(  25)									bx8 = cx5;
HXLINE(  26)									by3 = cy10;
HXLINE(  27)									cx5 = bx_3;
HXLINE(  28)									cy10 = by_3;
            								}
HXLINE( 126)								{
HXLINE( 126)									Float s03 = ((lowerY * cx5) - (farX * cy10));
HXDLIN( 126)									Float sx3 = (cy10 - lowerY);
HXDLIN( 126)									Float sy3 = (farX - cx5);
HXDLIN( 126)									Float t03 = ((farX * by3) - (lowerY * bx8));
HXDLIN( 126)									Float tx3 = (lowerY - by3);
HXDLIN( 126)									Float ty3 = (bx8 - farX);
HXDLIN( 126)									Float A3 = ((((-(by3) * cx5) + (lowerY * (-(bx8) + cx5))) + (farX * (by3 - cy10))) + (bx8 * cy10));
HXDLIN( 126)									 ::pi_xy::iter::IntIterStart xIter313;
HXDLIN( 126)									if ((farX > bx8)) {
HXLINE( 126)										if ((farX > cx5)) {
HXLINE( 126)											int min52;
HXDLIN( 126)											if ((bx8 > cx5)) {
HXLINE( 126)												min52 = ::Math_obj::floor(cx5);
            											}
            											else {
HXLINE( 126)												min52 = ::Math_obj::floor(bx8);
            											}
HXDLIN( 126)											int ii_min104 = min52;
HXDLIN( 126)											int ii_max104 = ::Math_obj::ceil(farX);
HXDLIN( 126)											xIter313 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min104,ii_max104);
            										}
            										else {
HXLINE( 126)											int ii_min105 = ::Math_obj::floor(bx8);
HXDLIN( 126)											int ii_max105 = ::Math_obj::ceil(cx5);
HXDLIN( 126)											xIter313 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min105,ii_max105);
            										}
            									}
            									else {
HXLINE( 126)										if ((bx8 > cx5)) {
HXLINE( 126)											int min53;
HXDLIN( 126)											if ((farX > cx5)) {
HXLINE( 126)												min53 = ::Math_obj::floor(cx5);
            											}
            											else {
HXLINE( 126)												min53 = ::Math_obj::ceil(farX);
            											}
HXDLIN( 126)											int ii_min106 = min53;
HXDLIN( 126)											int ii_max106 = ::Math_obj::ceil(bx8);
HXDLIN( 126)											xIter313 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min106,ii_max106);
            										}
            										else {
HXLINE( 126)											int ii_min107 = ::Math_obj::floor(farX);
HXDLIN( 126)											int ii_max107 = ::Math_obj::ceil(cx5);
HXDLIN( 126)											xIter313 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min107,ii_max107);
            										}
            									}
HXDLIN( 126)									 ::pi_xy::iter::IntIterStart yIter313;
HXDLIN( 126)									if ((lowerY > by3)) {
HXLINE( 126)										if ((lowerY > cy10)) {
HXLINE( 126)											int min54;
HXDLIN( 126)											if ((by3 > cy10)) {
HXLINE( 126)												min54 = ::Math_obj::floor(cy10);
            											}
            											else {
HXLINE( 126)												min54 = ::Math_obj::floor(by3);
            											}
HXDLIN( 126)											int ii_min108 = min54;
HXDLIN( 126)											int ii_max108 = ::Math_obj::ceil(lowerY);
HXDLIN( 126)											yIter313 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min108,ii_max108);
            										}
            										else {
HXLINE( 126)											int ii_min109 = ::Math_obj::floor(by3);
HXDLIN( 126)											int ii_max109 = ::Math_obj::ceil(cy10);
HXDLIN( 126)											yIter313 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min109,ii_max109);
            										}
            									}
            									else {
HXLINE( 126)										if ((by3 > cy10)) {
HXLINE( 126)											int min55;
HXDLIN( 126)											if ((lowerY > cy10)) {
HXLINE( 126)												min55 = ::Math_obj::floor(cy10);
            											}
            											else {
HXLINE( 126)												min55 = ::Math_obj::ceil(lowerY);
            											}
HXDLIN( 126)											int ii_min110 = min55;
HXDLIN( 126)											int ii_max110 = ::Math_obj::ceil(by3);
HXDLIN( 126)											yIter313 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min110,ii_max110);
            										}
            										else {
HXLINE( 126)											int ii_min111 = ::Math_obj::floor(lowerY);
HXDLIN( 126)											int ii_max111 = ::Math_obj::ceil(cy10);
HXDLIN( 126)											yIter313 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min111,ii_max111);
            										}
            									}
HXDLIN( 126)									 ::pi_xy::ImageStruct undoImage39 = null();
HXDLIN( 126)									if (hasUndo13) {
HXLINE( 126)										int width13 = ((xIter313->max - xIter313->start) + 1);
HXDLIN( 126)										int height13 = ((yIter313->max - yIter313->start) + 1);
HXDLIN( 126)										 ::Dynamic imageType13 = null();
HXDLIN( 126)										 ::pi_xy::ImageStruct this423 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 126)										if (::hx::IsNull( imageType13 )) {
HXLINE(  54)											imageType13 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE( 126)										::Dynamic undoImage40;
HXDLIN( 126)										switch((int)(( (int)(imageType13) ))){
            											case (int)0: {
HXLINE( 126)												 ::iterMagic::BytesImg byt13 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 126)												 ::iterMagic::BytesImg b86 = byt13;
HXDLIN( 126)												{
HXLINE( 126)													b86->width = width13;
HXDLIN( 126)													b86->height = height13;
HXDLIN( 126)													b86->length = ::Std_obj::_hx_int(( (Float)((width13 * height13)) ));
HXDLIN( 126)													b86->data = ::haxe::io::Bytes_obj::alloc((b86->length * 4));
HXDLIN( 126)													{
HXLINE( 126)														int len26 = b86->length;
HXDLIN( 126)														int w13 = 0;
HXDLIN( 126)														{
HXLINE( 126)															int _g268 = 0;
HXDLIN( 126)															int _g269 = b86->height;
HXDLIN( 126)															while((_g268 < _g269)){
HXLINE( 126)																_g268 = (_g268 + 1);
HXDLIN( 126)																int y46 = (_g268 - 1);
HXDLIN( 126)																{
HXLINE( 126)																	int _g270 = 0;
HXDLIN( 126)																	int _g271 = b86->width;
HXDLIN( 126)																	while((_g270 < _g271)){
HXLINE( 126)																		_g270 = (_g270 + 1);
HXDLIN( 126)																		int x46 = (_g270 - 1);
HXDLIN( 126)																		{
HXLINE( 126)																			w13 = (w13 + 1);
HXDLIN( 126)																			b86->data->b[(w13 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN( 126)																		{
HXLINE( 126)																			w13 = (w13 + 1);
HXDLIN( 126)																			b86->data->b[(w13 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN( 126)																		{
HXLINE( 126)																			w13 = (w13 + 1);
HXDLIN( 126)																			b86->data->b[(w13 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN( 126)																		{
HXLINE( 126)																			w13 = (w13 + 1);
HXDLIN( 126)																			b86->data->b[(w13 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN( 126)												undoImage40 = b86;
            											}
            											break;
            											case (int)1: {
HXLINE( 126)												 ::iterMagic::ArrIntImg arrI13 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 126)												 ::iterMagic::ArrIntImg a72 = arrI13;
HXDLIN( 126)												{
HXLINE( 126)													a72->width = width13;
HXDLIN( 126)													a72->height = height13;
HXDLIN( 126)													a72->data = ::Array_obj< int >::__new(0);
HXDLIN( 126)													a72->length = ::Std_obj::_hx_int(( (Float)((width13 * height13)) ));
HXDLIN( 126)													{
HXLINE( 126)														int _g272 = 0;
HXDLIN( 126)														int _g273 = a72->length;
HXDLIN( 126)														while((_g272 < _g273)){
HXLINE( 126)															_g272 = (_g272 + 1);
HXDLIN( 126)															int i122 = (_g272 - 1);
HXDLIN( 126)															a72->data[i122] = 0;
            														}
            													}
            												}
HXDLIN( 126)												undoImage40 = a72;
            											}
            											break;
            											case (int)2: {
HXLINE( 126)												 ::iterMagic::U32ArrImg u32a13 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 126)												 ::iterMagic::U32ArrImg b87 = u32a13;
HXDLIN( 126)												{
HXLINE( 126)													b87->width = width13;
HXDLIN( 126)													b87->height = height13;
HXDLIN( 126)													b87->length = ::Std_obj::_hx_int(( (Float)((width13 * height13)) ));
HXDLIN( 126)													int size13 = (b87->length * 4);
HXDLIN( 126)													b87->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size13),0,size13);
HXDLIN( 126)													{
HXLINE( 126)														int _g274 = 0;
HXDLIN( 126)														int _g275 = b87->length;
HXDLIN( 126)														while((_g274 < _g275)){
HXLINE( 126)															_g274 = (_g274 + 1);
HXDLIN( 126)															int i123 = (_g274 - 1);
HXDLIN( 126)															{
HXLINE( 126)																 ::haxe::io::ArrayBufferViewImpl this424 = b87->data;
HXDLIN( 126)																bool undoImage41;
HXDLIN( 126)																if ((i123 >= 0)) {
HXLINE( 126)																	undoImage41 = (i123 < (this424->byteLength >> 2));
            																}
            																else {
HXLINE( 126)																	undoImage41 = false;
            																}
HXDLIN( 126)																if (undoImage41) {
HXLINE( 126)																	 ::haxe::io::Bytes _this13 = this424->bytes;
HXDLIN( 126)																	int pos13 = ((i123 << 2) + this424->byteOffset);
HXDLIN( 126)																	_this13->b[pos13] = ( (unsigned char)(0) );
HXDLIN( 126)																	_this13->b[(pos13 + 1)] = ( (unsigned char)(0) );
HXDLIN( 126)																	_this13->b[(pos13 + 2)] = ( (unsigned char)(0) );
HXDLIN( 126)																	_this13->b[(pos13 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN( 126)												undoImage40 = b87;
            											}
            											break;
            											case (int)3: {
HXLINE( 126)												 ::iterMagic::VecIntImg vec13 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 126)												 ::iterMagic::VecIntImg v44 = vec13;
HXDLIN( 126)												{
HXLINE( 126)													v44->width = width13;
HXDLIN( 126)													v44->height = height13;
HXDLIN( 126)													v44->length = ::Std_obj::_hx_int(( (Float)((width13 * height13)) ));
HXDLIN( 126)													v44->data = ::Array_obj< int >::__new(v44->length);
HXDLIN( 126)													{
HXLINE( 126)														int _g276 = 0;
HXDLIN( 126)														int _g277 = v44->length;
HXDLIN( 126)														while((_g276 < _g277)){
HXLINE( 126)															_g276 = (_g276 + 1);
HXDLIN( 126)															int i124 = (_g276 - 1);
HXDLIN( 126)															v44->data->__unsafe_set(i124,0);
            														}
            													}
            												}
HXDLIN( 126)												undoImage40 = v44;
            											}
            											break;
            											case (int)4: {
HXLINE( 126)												 ::iterMagic::StackIntImg sInt13 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 126)												 ::iterMagic::StackIntImg b88 = sInt13;
HXDLIN( 126)												{
HXLINE( 126)													b88->width = width13;
HXDLIN( 126)													b88->height = height13;
HXDLIN( 126)													b88->length = ::Std_obj::_hx_int(( (Float)((width13 * height13)) ));
HXDLIN( 126)													b88->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 126)													{
HXLINE( 126)														int len27 = b88->length;
HXDLIN( 126)														 ::haxe::ds::GenericStack_Int d13 = b88->data;
HXDLIN( 126)														if (::hx::IsNull( d13->head )) {
HXLINE( 126)															int _g278 = 0;
HXDLIN( 126)															int _g279 = len27;
HXDLIN( 126)															while((_g278 < _g279)){
HXLINE( 126)																_g278 = (_g278 + 1);
HXDLIN( 126)																int i125 = (_g278 - 1);
HXDLIN( 126)																d13->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d13->head);
            															}
            														}
            														else {
HXLINE( 126)															int _g280 = 0;
HXDLIN( 126)															int _g281 = len27;
HXDLIN( 126)															while((_g280 < _g281)){
HXLINE( 126)																_g280 = (_g280 + 1);
HXDLIN( 126)																int i126 = (_g280 - 1);
HXDLIN( 126)																{
HXLINE( 126)																	 ::haxe::ds::GenericCell_Int l13 = b88->data->head;
HXDLIN( 126)																	 ::haxe::ds::GenericCell_Int prev13 = null();
HXDLIN( 126)																	{
HXLINE( 126)																		int _g282 = 0;
HXDLIN( 126)																		int _g283 = i126;
HXDLIN( 126)																		while((_g282 < _g283)){
HXLINE( 126)																			_g282 = (_g282 + 1);
HXDLIN( 126)																			int i127 = (_g282 - 1);
HXLINE( 345)																			prev13 = l13;
HXLINE( 346)																			l13 = l13->next;
            																		}
            																	}
HXLINE( 126)																	if (::hx::IsNull( prev13 )) {
HXLINE( 126)																		b88->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l13->next);
HXDLIN( 126)																		l13 = null();
            																	}
            																	else {
HXLINE( 126)																		prev13->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l13->next);
HXDLIN( 126)																		l13 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN( 126)												undoImage40 = b88;
            											}
            											break;
            										}
HXDLIN( 126)										this423->image = undoImage40;
HXDLIN( 126)										this423->width = width13;
HXDLIN( 126)										this423->height = height13;
HXDLIN( 126)										this423->imageType = ( (int)(imageType13) );
HXDLIN( 126)										undoImage39 = this423;
HXDLIN( 126)										{
HXLINE( 126)											int rectLeft13 = xIter313->start;
HXDLIN( 126)											int rectTop13 = yIter313->start;
HXDLIN( 126)											int rectRight13 = xIter313->max;
HXDLIN( 126)											bool forceClear13 = false;
HXDLIN( 126)											{
HXLINE( 126)												int _g284 = rectTop13;
HXDLIN( 126)												int _g285 = yIter313->max;
HXDLIN( 126)												while((_g284 < _g285)){
HXLINE( 126)													_g284 = (_g284 + 1);
HXDLIN( 126)													int dy14 = (_g284 - 1);
HXDLIN( 126)													{
HXLINE( 126)														int _g286 = rectLeft13;
HXDLIN( 126)														int _g287 = rectRight13;
HXDLIN( 126)														while((_g286 < _g287)){
HXLINE( 126)															_g286 = (_g286 + 1);
HXDLIN( 126)															int dx14 = (_g286 - 1);
HXDLIN( 126)															::Dynamic this425 = this422->image;
HXDLIN( 126)															int index55;
HXDLIN( 126)															if (this422->useVirtualPos) {
HXLINE( 126)																index55 = ::Std_obj::_hx_int(((((( (Float)(dy14) ) - this422->virtualY) * ( (Float)(this422->width) )) + dx14) - this422->virtualX));
            															}
            															else {
HXLINE( 126)																index55 = ::Std_obj::_hx_int(( (Float)(((dy14 * this422->width) + dx14)) ));
            															}
HXDLIN( 126)															int c42 = ::iterMagic::Iimg_obj::get(this425,index55);
HXDLIN( 126)															int col13;
HXDLIN( 126)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																col13 = ((((((c42 >> 24) & 255) << 24) | ((c42 & 255) << 16)) | (((c42 >> 8) & 255) << 8)) | ((c42 >> 16) & 255));
            															}
            															else {
HXLINE( 126)																col13 = c42;
            															}
HXDLIN( 126)															bool _hx_tmp104;
HXDLIN( 126)															if (this422->useMask) {
HXLINE( 126)																_hx_tmp104 = ::hx::IsNotNull( this422->mask );
            															}
            															else {
HXLINE( 126)																_hx_tmp104 = false;
            															}
HXDLIN( 126)															if (_hx_tmp104) {
HXLINE( 126)																 ::pi_xy::ImageStruct this426 = this422->mask;
HXDLIN( 126)																::Dynamic this427 = this426->image;
HXDLIN( 126)																int index56;
HXDLIN( 126)																if (this426->useVirtualPos) {
HXLINE( 126)																	index56 = ::Std_obj::_hx_int(((((( (Float)(dy14) ) - this426->virtualY) * ( (Float)(this426->width) )) + dx14) - this426->virtualX));
            																}
            																else {
HXLINE( 126)																	index56 = ::Std_obj::_hx_int(( (Float)(((dy14 * this426->width) + dx14)) ));
            																}
HXDLIN( 126)																int c43 = ::iterMagic::Iimg_obj::get(this427,index56);
HXDLIN( 126)																int v45;
HXDLIN( 126)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																	v45 = ((((((c43 >> 24) & 255) << 24) | ((c43 & 255) << 16)) | (((c43 >> 8) & 255) << 8)) | ((c43 >> 16) & 255));
            																}
            																else {
HXLINE( 126)																	v45 = c43;
            																}
HXDLIN( 126)																int maskPixel13 = v45;
HXDLIN( 126)																int this428 = col13;
HXDLIN( 126)																if ((maskPixel13 == 0)) {
HXLINE( 126)																	col13 = this428;
            																}
            																else {
HXLINE( 126)																	Float m013;
HXDLIN( 126)																	int this429 = ((maskPixel13 >> 24) & 255);
HXDLIN( 126)																	if ((this429 == 0)) {
HXLINE( 126)																		m013 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		m013 = (( (Float)(this429) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float m113;
HXDLIN( 126)																	int this430 = ((maskPixel13 >> 16) & 255);
HXDLIN( 126)																	if ((this430 == 0)) {
HXLINE( 126)																		m113 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		m113 = (( (Float)(this430) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float m213;
HXDLIN( 126)																	int this431 = ((maskPixel13 >> 8) & 255);
HXDLIN( 126)																	if ((this431 == 0)) {
HXLINE( 126)																		m213 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		m213 = (( (Float)(this431) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float m313;
HXDLIN( 126)																	int this432 = (maskPixel13 & 255);
HXDLIN( 126)																	if ((this432 == 0)) {
HXLINE( 126)																		m313 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		m313 = (( (Float)(this432) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	int ch013 = ::Std_obj::_hx_int(((((Float)1.) - m013) * ( (Float)(((this428 >> 24) & 255)) )));
HXDLIN( 126)																	int ch113 = ::Std_obj::_hx_int(((((Float)1.) - m113) * ( (Float)(((this428 >> 16) & 255)) )));
HXDLIN( 126)																	int ch213 = ::Std_obj::_hx_int(((((Float)1.) - m213) * ( (Float)(((this428 >> 8) & 255)) )));
HXDLIN( 126)																	int ch313 = ::Std_obj::_hx_int(((((Float)1.) - m313) * ( (Float)((this428 & 255)) )));
HXDLIN( 126)																	col13 = ((((::Math_obj::round((( (Float)(ch013) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch113) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch213) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch313) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN( 126)															if ((col13 != 0)) {
HXLINE( 126)																int x47 = (dx14 - rectLeft13);
HXDLIN( 126)																int y47 = (dy14 - rectTop13);
HXDLIN( 126)																int c44 = col13;
HXDLIN( 126)																bool _hx_tmp105;
HXDLIN( 126)																if ((((c44 >> 24) & 255) < 254)) {
HXLINE( 126)																	_hx_tmp105 = undoImage39->transparent;
            																}
            																else {
HXLINE( 126)																	_hx_tmp105 = false;
            																}
HXDLIN( 126)																if (_hx_tmp105) {
HXLINE( 126)																	int location26;
HXDLIN( 126)																	if (undoImage39->useVirtualPos) {
HXLINE( 126)																		location26 = ::Std_obj::_hx_int(((((( (Float)(y47) ) - undoImage39->virtualY) * ( (Float)(undoImage39->width) )) + x47) - undoImage39->virtualX));
            																	}
            																	else {
HXLINE( 126)																		location26 = ::Std_obj::_hx_int(( (Float)(((y47 * undoImage39->width) + x47)) ));
            																	}
HXDLIN( 126)																	int this433 = ::iterMagic::Iimg_obj::get(undoImage39->image,location26);
HXDLIN( 126)																	int this434;
HXDLIN( 126)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																		this434 = ((((((this433 >> 24) & 255) << 24) | ((this433 & 255) << 16)) | (((this433 >> 8) & 255) << 8)) | ((this433 >> 16) & 255));
            																	}
            																	else {
HXLINE( 126)																		this434 = this433;
            																	}
HXDLIN( 126)																	Float a130;
HXDLIN( 126)																	int this435 = ((this434 >> 24) & 255);
HXDLIN( 126)																	if ((this435 == 0)) {
HXLINE( 126)																		a130 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		a130 = (( (Float)(this435) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float r127;
HXDLIN( 126)																	int this436 = ((this434 >> 16) & 255);
HXDLIN( 126)																	if ((this436 == 0)) {
HXLINE( 126)																		r127 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		r127 = (( (Float)(this436) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float g127;
HXDLIN( 126)																	int this437 = ((this434 >> 8) & 255);
HXDLIN( 126)																	if ((this437 == 0)) {
HXLINE( 126)																		g127 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		g127 = (( (Float)(this437) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float b131;
HXDLIN( 126)																	int this438 = (this434 & 255);
HXDLIN( 126)																	if ((this438 == 0)) {
HXLINE( 126)																		b131 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		b131 = (( (Float)(this438) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float a228;
HXDLIN( 126)																	int this439 = ((col13 >> 24) & 255);
HXDLIN( 126)																	if ((this439 == 0)) {
HXLINE( 126)																		a228 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		a228 = (( (Float)(this439) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float r227;
HXDLIN( 126)																	int this440 = ((col13 >> 16) & 255);
HXDLIN( 126)																	if ((this440 == 0)) {
HXLINE( 126)																		r227 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		r227 = (( (Float)(this440) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float g227;
HXDLIN( 126)																	int this441 = ((col13 >> 8) & 255);
HXDLIN( 126)																	if ((this441 == 0)) {
HXLINE( 126)																		g227 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		g227 = (( (Float)(this441) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float b230;
HXDLIN( 126)																	int this442 = (col13 & 255);
HXDLIN( 126)																	if ((this442 == 0)) {
HXLINE( 126)																		b230 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		b230 = (( (Float)(this442) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float a327 = (a130 * (( (Float)(1) ) - a228));
HXDLIN( 126)																	int r54 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r127 * a327) + (r227 * a228))));
HXDLIN( 126)																	int g54 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g127 * a327) + (g227 * a228))));
HXDLIN( 126)																	int b89 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b131 * a327) + (b230 * a228))));
HXDLIN( 126)																	int a73 = ::Std_obj::_hx_int((( (Float)(255) ) * (a327 + a228)));
HXDLIN( 126)																	int blended26 = ((((a73 << 24) | (r54 << 16)) | (g54 << 8)) | b89);
HXDLIN( 126)																	{
HXLINE( 126)																		int _hx_tmp106;
HXDLIN( 126)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																			_hx_tmp106 = ((((((blended26 >> 24) & 255) << 24) | ((blended26 & 255) << 16)) | (((blended26 >> 8) & 255) << 8)) | ((blended26 >> 16) & 255));
            																		}
            																		else {
HXLINE( 126)																			_hx_tmp106 = blended26;
            																		}
HXDLIN( 126)																		::iterMagic::Iimg_obj::set(undoImage39->image,location26,_hx_tmp106);
            																	}
            																}
            																else {
HXLINE( 126)																	::Dynamic this443 = undoImage39->image;
HXDLIN( 126)																	int index57;
HXDLIN( 126)																	if (undoImage39->useVirtualPos) {
HXLINE( 126)																		index57 = ::Std_obj::_hx_int(((((( (Float)(y47) ) - undoImage39->virtualY) * ( (Float)(undoImage39->width) )) + x47) - undoImage39->virtualX));
            																	}
            																	else {
HXLINE( 126)																		index57 = ::Std_obj::_hx_int(( (Float)(((y47 * undoImage39->width) + x47)) ));
            																	}
HXDLIN( 126)																	int _hx_tmp107;
HXDLIN( 126)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																		_hx_tmp107 = ((((((c44 >> 24) & 255) << 24) | ((c44 & 255) << 16)) | (((c44 >> 8) & 255) << 8)) | ((c44 >> 16) & 255));
            																	}
            																	else {
HXLINE( 126)																		_hx_tmp107 = c44;
            																	}
HXDLIN( 126)																	::iterMagic::Iimg_obj::set(this443,index57,_hx_tmp107);
            																}
            															}
            															else {
HXLINE( 126)																if (forceClear13) {
HXLINE( 126)																	::Dynamic this444 = undoImage39->image;
HXDLIN( 126)																	int x48 = (dx14 - rectLeft13);
HXDLIN( 126)																	int y48 = (dy14 - rectTop13);
HXDLIN( 126)																	int index58;
HXDLIN( 126)																	if (undoImage39->useVirtualPos) {
HXLINE( 126)																		index58 = ::Std_obj::_hx_int(((((( (Float)(y48) ) - undoImage39->virtualY) * ( (Float)(undoImage39->width) )) + x48) - undoImage39->virtualX));
            																	}
            																	else {
HXLINE( 126)																		index58 = ::Std_obj::_hx_int(( (Float)(((y48 * undoImage39->width) + x48)) ));
            																	}
HXDLIN( 126)																	::iterMagic::Iimg_obj::set(this444,index58,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 126)									bool found3 = false;
HXDLIN( 126)									Float s3 = ((Float)0.);
HXDLIN( 126)									Float t3 = ((Float)0.);
HXDLIN( 126)									Float sxx3 = ((Float)0.);
HXDLIN( 126)									Float txx3 = ((Float)0.);
HXDLIN( 126)									{
HXLINE( 126)										int _g_min26 = xIter313->start;
HXDLIN( 126)										int _g_max26 = xIter313->max;
HXDLIN( 126)										while((_g_min26 < _g_max26)){
HXLINE( 126)											_g_min26 = (_g_min26 + 1);
HXDLIN( 126)											int x49 = (_g_min26 - 1);
HXLINE(  60)											sxx3 = (sx3 * ( (Float)(x49) ));
HXLINE(  61)											txx3 = (tx3 * ( (Float)(x49) ));
HXLINE(  62)											found3 = false;
HXLINE( 126)											{
HXLINE( 126)												int _g_min27 = yIter313->start;
HXDLIN( 126)												int _g_max27 = yIter313->max;
HXDLIN( 126)												while((_g_min27 < _g_max27)){
HXLINE( 126)													_g_min27 = (_g_min27 + 1);
HXDLIN( 126)													int y49 = (_g_min27 - 1);
HXLINE(  64)													s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y49) )));
HXLINE(  65)													t3 = ((t03 + txx3) + (ty3 * ( (Float)(y49) )));
HXLINE( 126)													bool _hx_tmp108;
HXDLIN( 126)													if (!((s3 <= 0))) {
HXLINE( 126)														_hx_tmp108 = (t3 <= 0);
            													}
            													else {
HXLINE( 126)														_hx_tmp108 = true;
            													}
HXDLIN( 126)													if (_hx_tmp108) {
HXLINE( 126)														if (found3) {
HXLINE( 126)															goto _hx_goto_352;
            														}
            													}
            													else {
HXLINE( 126)														if (((s3 + t3) < A3)) {
HXLINE( 126)															{
HXLINE( 126)																int c45 = colorC;
HXDLIN( 126)																bool _hx_tmp109;
HXDLIN( 126)																if ((((c45 >> 24) & 255) < 254)) {
HXLINE( 126)																	_hx_tmp109 = this422->transparent;
            																}
            																else {
HXLINE( 126)																	_hx_tmp109 = false;
            																}
HXDLIN( 126)																if (_hx_tmp109) {
HXLINE( 126)																	int location27;
HXDLIN( 126)																	if (this422->useVirtualPos) {
HXLINE( 126)																		location27 = ::Std_obj::_hx_int(((((( (Float)(y49) ) - this422->virtualY) * ( (Float)(this422->width) )) + x49) - this422->virtualX));
            																	}
            																	else {
HXLINE( 126)																		location27 = ::Std_obj::_hx_int(( (Float)(((y49 * this422->width) + x49)) ));
            																	}
HXDLIN( 126)																	int this445 = ::iterMagic::Iimg_obj::get(this422->image,location27);
HXDLIN( 126)																	int this446;
HXDLIN( 126)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																		this446 = ((((((this445 >> 24) & 255) << 24) | ((this445 & 255) << 16)) | (((this445 >> 8) & 255) << 8)) | ((this445 >> 16) & 255));
            																	}
            																	else {
HXLINE( 126)																		this446 = this445;
            																	}
HXDLIN( 126)																	Float a131;
HXDLIN( 126)																	int this447 = ((this446 >> 24) & 255);
HXDLIN( 126)																	if ((this447 == 0)) {
HXLINE( 126)																		a131 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		a131 = (( (Float)(this447) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float r128;
HXDLIN( 126)																	int this448 = ((this446 >> 16) & 255);
HXDLIN( 126)																	if ((this448 == 0)) {
HXLINE( 126)																		r128 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		r128 = (( (Float)(this448) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float g128;
HXDLIN( 126)																	int this449 = ((this446 >> 8) & 255);
HXDLIN( 126)																	if ((this449 == 0)) {
HXLINE( 126)																		g128 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		g128 = (( (Float)(this449) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float b132;
HXDLIN( 126)																	int this450 = (this446 & 255);
HXDLIN( 126)																	if ((this450 == 0)) {
HXLINE( 126)																		b132 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		b132 = (( (Float)(this450) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float a229;
HXDLIN( 126)																	int this451 = ((colorC >> 24) & 255);
HXDLIN( 126)																	if ((this451 == 0)) {
HXLINE( 126)																		a229 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		a229 = (( (Float)(this451) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float r228;
HXDLIN( 126)																	int this452 = ((colorC >> 16) & 255);
HXDLIN( 126)																	if ((this452 == 0)) {
HXLINE( 126)																		r228 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		r228 = (( (Float)(this452) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float g228;
HXDLIN( 126)																	int this453 = ((colorC >> 8) & 255);
HXDLIN( 126)																	if ((this453 == 0)) {
HXLINE( 126)																		g228 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		g228 = (( (Float)(this453) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float b231;
HXDLIN( 126)																	int this454 = (colorC & 255);
HXDLIN( 126)																	if ((this454 == 0)) {
HXLINE( 126)																		b231 = ((Float)0.);
            																	}
            																	else {
HXLINE( 126)																		b231 = (( (Float)(this454) ) / ( (Float)(255) ));
            																	}
HXDLIN( 126)																	Float a328 = (a131 * (( (Float)(1) ) - a229));
HXDLIN( 126)																	int r55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r128 * a328) + (r228 * a229))));
HXDLIN( 126)																	int g55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g128 * a328) + (g228 * a229))));
HXDLIN( 126)																	int b90 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b132 * a328) + (b231 * a229))));
HXDLIN( 126)																	int a74 = ::Std_obj::_hx_int((( (Float)(255) ) * (a328 + a229)));
HXDLIN( 126)																	int blended27 = ((((a74 << 24) | (r55 << 16)) | (g55 << 8)) | b90);
HXDLIN( 126)																	{
HXLINE( 126)																		int _hx_tmp110;
HXDLIN( 126)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																			_hx_tmp110 = ((((((blended27 >> 24) & 255) << 24) | ((blended27 & 255) << 16)) | (((blended27 >> 8) & 255) << 8)) | ((blended27 >> 16) & 255));
            																		}
            																		else {
HXLINE( 126)																			_hx_tmp110 = blended27;
            																		}
HXDLIN( 126)																		::iterMagic::Iimg_obj::set(this422->image,location27,_hx_tmp110);
            																	}
            																}
            																else {
HXLINE( 126)																	::Dynamic this455 = this422->image;
HXDLIN( 126)																	int index59;
HXDLIN( 126)																	if (this422->useVirtualPos) {
HXLINE( 126)																		index59 = ::Std_obj::_hx_int(((((( (Float)(y49) ) - this422->virtualY) * ( (Float)(this422->width) )) + x49) - this422->virtualX));
            																	}
            																	else {
HXLINE( 126)																		index59 = ::Std_obj::_hx_int(( (Float)(((y49 * this422->width) + x49)) ));
            																	}
HXDLIN( 126)																	int _hx_tmp111;
HXDLIN( 126)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																		_hx_tmp111 = ((((((c45 >> 24) & 255) << 24) | ((c45 & 255) << 16)) | (((c45 >> 8) & 255) << 8)) | ((c45 >> 16) & 255));
            																	}
            																	else {
HXLINE( 126)																		_hx_tmp111 = c45;
            																	}
HXDLIN( 126)																	::iterMagic::Iimg_obj::set(this455,index59,_hx_tmp111);
            																}
            															}
HXLINE(  73)															found3 = true;
            														}
            														else {
HXLINE( 126)															if (found3) {
HXLINE( 126)																goto _hx_goto_352;
            															}
            														}
            													}
            												}
            												_hx_goto_352:;
            											}
            										}
            									}
HXDLIN( 126)									if ((hasHit13 == true)) {
HXLINE( 126)										 ::pi_xy::algo::HitTri v46 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX,lowerY,bx8,by3,cx5,cy10,true);
HXDLIN( 126)										if (hasUndo13) {
HXLINE( 126)											v46->undoImage = undoImage39;
HXDLIN( 126)											v46->undoX = xIter313->start;
HXDLIN( 126)											v46->undoY = yIter313->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  46)						lastX3 = nextX3;
HXLINE(  47)						lastY3 = nextY3;
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC13(RoundRecPixel_Fields__obj,fillGrad4RoundRectangle,(void))


RoundRecPixel_Fields__obj::RoundRecPixel_Fields__obj()
{
}

bool RoundRecPixel_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"fillRoundRectangle") ) { outValue = fillRoundRectangle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"tileRoundRectangle") ) { outValue = tileRoundRectangle_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"fillGrad4RoundRectangle") ) { outValue = fillGrad4RoundRectangle_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *RoundRecPixel_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *RoundRecPixel_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class RoundRecPixel_Fields__obj::__mClass;

static ::String RoundRecPixel_Fields__obj_sStaticFields[] = {
	HX_("fillRoundRectangle",e4,e3,bb,ca),
	HX_("tileRoundRectangle",cf,95,51,b9),
	HX_("fillGrad4RoundRectangle",84,18,fe,64),
	::String(null())
};

void RoundRecPixel_Fields__obj::__register()
{
	RoundRecPixel_Fields__obj _hx_dummy;
	RoundRecPixel_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo._RoundRecPixel.RoundRecPixel_Fields_",16,d7,b8,ad);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &RoundRecPixel_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(RoundRecPixel_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< RoundRecPixel_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = RoundRecPixel_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = RoundRecPixel_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
} // end namespace _RoundRecPixel
