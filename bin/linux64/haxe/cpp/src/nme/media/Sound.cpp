// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_Loader
#include <nme/Loader.h>
#endif
#ifndef INCLUDED_nme_NativeResource
#include <nme/NativeResource.h>
#endif
#ifndef INCLUDED_nme_errors_Error
#include <nme/errors/Error.h>
#endif
#ifndef INCLUDED_nme_events_ErrorEvent
#include <nme/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IOErrorEvent
#include <nme/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_nme_events_SampleDataEvent
#include <nme/events/SampleDataEvent.h>
#endif
#ifndef INCLUDED_nme_events_TextEvent
#include <nme/events/TextEvent.h>
#endif
#ifndef INCLUDED_nme_media_ID3Info
#include <nme/media/ID3Info.h>
#endif
#ifndef INCLUDED_nme_media_Sound
#include <nme/media/Sound.h>
#endif
#ifndef INCLUDED_nme_media_SoundChannel
#include <nme/media/SoundChannel.h>
#endif
#ifndef INCLUDED_nme_media_SoundLoaderContext
#include <nme/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_nme_media_SoundTransform
#include <nme/media/SoundTransform.h>
#endif
#ifndef INCLUDED_nme_net_URLRequest
#include <nme/net/URLRequest.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_12d17fb16aed4a89_31_new,"nme.media.Sound","new",0x2b69dbef,"nme.media.Sound.new","nme/media/Sound.hx",31,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_54_getEngine,"nme.media.Sound","getEngine",0xbf0871c7,"nme.media.Sound.getEngine","nme/media/Sound.hx",54,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_63_addEventListener,"nme.media.Sound","addEventListener",0x41f4b2de,"nme.media.Sound.addEventListener","nme/media/Sound.hx",63,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_77_close,"nme.media.Sound","close",0xedbe6507,"nme.media.Sound.close","nme/media/Sound.hx",77,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_87_load,"nme.media.Sound","load",0xcfebabb7,"nme.media.Sound.load","nme/media/Sound.hx",87,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_106_loadCompressedDataFromByteArray,"nme.media.Sound","loadCompressedDataFromByteArray",0x16d343e5,"nme.media.Sound.loadCompressedDataFromByteArray","nme/media/Sound.hx",106,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_121_loadPCMFromByteArray,"nme.media.Sound","loadPCMFromByteArray",0x52245504,"nme.media.Sound.loadPCMFromByteArray","nme/media/Sound.hx",121,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_167_nmeCheckLoading,"nme.media.Sound","nmeCheckLoading",0xdb692109,"nme.media.Sound.nmeCheckLoading","nme/media/Sound.hx",167,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_187_nmeOnError,"nme.media.Sound","nmeOnError",0xfa27e3d4,"nme.media.Sound.nmeOnError","nme/media/Sound.hx",187,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_193_play,"nme.media.Sound","play",0xd28e3f85,"nme.media.Sound.play","nme/media/Sound.hx",193,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_233_get_id3,"nme.media.Sound","get_id3",0x53894b9e,"nme.media.Sound.get_id3","nme/media/Sound.hx",233,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_245_get_isBuffering,"nme.media.Sound","get_isBuffering",0x00f2843e,"nme.media.Sound.get_isBuffering","nme/media/Sound.hx",245,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_251_get_length,"nme.media.Sound","get_length",0xb14e1900,"nme.media.Sound.get_length","nme/media/Sound.hx",251,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_59_suspend,"nme.media.Sound","suspend",0x2413ae8b,"nme.media.Sound.suspend","nme/media/Sound.hx",59,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_259_boot,"nme.media.Sound","boot",0xc94f95c3,"nme.media.Sound.boot","nme/media/Sound.hx",259,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_260_boot,"nme.media.Sound","boot",0xc94f95c3,"nme.media.Sound.boot","nme/media/Sound.hx",260,0x15773f23)
HX_LOCAL_STACK_FRAME(_hx_pos_aa8564e65f521248_9_boot,"nme.media.Sound","boot",0xc94f95c3,"nme.media.Sound.boot","nme/PrimeLoader.hx",9,0xcf416155)
HX_LOCAL_STACK_FRAME(_hx_pos_12d17fb16aed4a89_266_boot,"nme.media.Sound","boot",0xc94f95c3,"nme.media.Sound.boot","nme/media/Sound.hx",266,0x15773f23)
namespace nme{
namespace media{

void Sound_obj::__construct( ::nme::net::URLRequest stream, ::nme::media::SoundLoaderContext context,::hx::Null< bool >  __o_forcePlayAsMusic,::String inEngine){
            		bool forcePlayAsMusic = __o_forcePlayAsMusic.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_12d17fb16aed4a89_31_new)
HXLINE(  32)		super::__construct(null());
HXLINE(  34)		if (::hx::IsNull( stream )) {
HXLINE(  36)			::hx::Class className = ::Type_obj::getClass(::hx::ObjectPtr<OBJ_>(this));
HXLINE(  37)			if (::Reflect_obj::hasField(className,HX_("resourceName",39,7a,62,90))) {
HXLINE(  39)				stream =  ::nme::net::URLRequest_obj::__alloc( HX_CTX ,( (::String)(::Reflect_obj::field(className,HX_("resourceName",39,7a,62,90))) ));
HXLINE(  40)				forcePlayAsMusic = true;
            			}
            		}
HXLINE(  44)		this->bytesLoaded = (this->bytesTotal = 0);
HXLINE(  45)		this->nmeLoading = false;
HXLINE(  46)		this->nmeDynamicSound = false;
HXLINE(  48)		if (::hx::IsNotNull( stream )) {
HXLINE(  49)			this->load(stream,context,forcePlayAsMusic,inEngine);
            		}
            	}

Dynamic Sound_obj::__CreateEmpty() { return new Sound_obj; }

void *Sound_obj::_hx_vtable = 0;

Dynamic Sound_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Sound_obj > _hx_result = new Sound_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Sound_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x169017a6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x169017a6;
	} else {
		return inClassId==(int)0x7f5abc29;
	}
}

 ::Dynamic Sound_obj::getEngine(){
            	HX_STACKFRAME(&_hx_pos_12d17fb16aed4a89_54_getEngine)
HXDLIN(  54)		return ::nme::media::Sound_obj::nme_sound_get_engine(this->nmeHandle);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,getEngine,return )

void Sound_obj::addEventListener(::String type, ::Dynamic listener,::hx::Null< bool >  __o_useCapture,::hx::Null< int >  __o_priority,::hx::Null< bool >  __o_useWeakReference){
            		bool useCapture = __o_useCapture.Default(false);
            		int priority = __o_priority.Default(0);
            		bool useWeakReference = __o_useWeakReference.Default(false);
            	HX_STACKFRAME(&_hx_pos_12d17fb16aed4a89_63_addEventListener)
HXLINE(  64)		this->super::addEventListener(type,listener,useCapture,priority,useWeakReference);
HXLINE(  66)		if ((type == HX_("sampleData",74,3f,0b,5e))) {
HXLINE(  68)			if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE(  69)				HX_STACK_DO_THROW(HX_("Can't use dynamic sound once file loaded",98,42,ab,4b));
            			}
HXLINE(  71)			this->nmeDynamicSound = true;
HXLINE(  72)			this->nmeLoading = false;
            		}
            	}


void Sound_obj::close(){
            	HX_STACKFRAME(&_hx_pos_12d17fb16aed4a89_77_close)
HXLINE(  78)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE(  80)			::nme::media::Sound_obj::nme_sound_close(::hx::DynamicPtr(this->nmeHandle));
            		}
HXLINE(  82)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE(  82)			::nme::NativeResource_obj::nme_native_resource_dispose(::hx::DynamicPtr(this->nmeHandle));
HXDLIN(  82)			this->nmeHandle = null();
            		}
HXLINE(  83)		this->nmeLoading = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,close,(void))

void Sound_obj::load( ::nme::net::URLRequest stream, ::nme::media::SoundLoaderContext context,::hx::Null< bool >  __o_forcePlayAsMusic,::String inEngine){
            		bool forcePlayAsMusic = __o_forcePlayAsMusic.Default(false);
            	HX_STACKFRAME(&_hx_pos_12d17fb16aed4a89_87_load)
HXLINE(  88)		this->bytesLoaded = (this->bytesTotal = 0);
HXLINE(  89)		this->nmeHandle = ::nme::media::Sound_obj::nme_sound_from_file(stream->url,forcePlayAsMusic,inEngine);
HXLINE(  91)		if (::hx::IsNull( this->nmeHandle )) {
HXLINE(  93)			::String _hx_tmp;
HXDLIN(  93)			if (forcePlayAsMusic) {
HXLINE(  93)				_hx_tmp = HX_("music",a5,d0,5a,10);
            			}
            			else {
HXLINE(  93)				_hx_tmp = HX_("sound",cf,8c,cc,80);
            			}
HXDLIN(  93)			HX_STACK_DO_THROW((((HX_("Could not load ",6e,ae,9d,f1) + _hx_tmp) + HX_(":",3a,00,00,00)) + stream->url));
            		}
            		else {
HXLINE(  99)			this->url = stream->url;
HXLINE( 100)			this->nmeLoading = false;
HXLINE( 101)			this->nmeCheckLoading();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Sound_obj,load,(void))

void Sound_obj::loadCompressedDataFromByteArray( ::nme::utils::ByteArray bytes,int length,::hx::Null< bool >  __o_forcePlayAsMusic,::String inEngine){
            		bool forcePlayAsMusic = __o_forcePlayAsMusic.Default(false);
            	HX_STACKFRAME(&_hx_pos_12d17fb16aed4a89_106_loadCompressedDataFromByteArray)
HXLINE( 107)		this->bytesLoaded = (this->bytesTotal = length);
HXLINE( 108)		this->nmeHandle = ::nme::media::Sound_obj::nme_sound_from_data(bytes,length,forcePlayAsMusic,inEngine);
HXLINE( 110)		if (::hx::IsNull( this->nmeHandle )) {
HXLINE( 112)			HX_STACK_DO_THROW((HX_("Could not load buffer with length: ",b4,a8,96,d0) + length));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Sound_obj,loadCompressedDataFromByteArray,(void))

void Sound_obj::loadPCMFromByteArray( ::nme::utils::ByteArray Bytes,int samples,::String __o_format,::hx::Null< bool >  __o_stereo,::hx::Null< Float >  __o_sampleRate,::String inEngine){
            		::String format = __o_format;
            		if (::hx::IsNull(__o_format)) format = HX_("float",9c,c5,96,02);
            		bool stereo = __o_stereo.Default(true);
            		Float sampleRate = __o_sampleRate.Default(((Float)44100.0));
            	HX_GC_STACKFRAME(&_hx_pos_12d17fb16aed4a89_121_loadPCMFromByteArray)
HXLINE( 123)		 ::nme::utils::ByteArray wav =  ::nme::utils::ByteArray_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 124)		wav->set_endian(HX_("littleEndian",31,2e,7b,07));
HXLINE( 126)		int AudioFormat;
HXDLIN( 126)		::String _hx_switch_0 = format;
            		if (  (_hx_switch_0==HX_("float",9c,c5,96,02)) ){
HXLINE( 126)			AudioFormat = 3;
HXDLIN( 126)			goto _hx_goto_6;
            		}
            		if (  (_hx_switch_0==HX_("short",7c,84,27,7c)) ){
HXLINE( 126)			AudioFormat = 1;
HXDLIN( 126)			goto _hx_goto_6;
            		}
            		/* default */{
HXLINE( 130)			HX_STACK_DO_THROW( ::nme::errors::Error_obj::__alloc( HX_CTX ,(HX_("Unsupported format ",7e,06,66,fe) + format),null()));
            		}
            		_hx_goto_6:;
HXLINE( 133)		int NumChannels;
HXDLIN( 133)		if (stereo) {
HXLINE( 133)			NumChannels = 2;
            		}
            		else {
HXLINE( 133)			NumChannels = 1;
            		}
HXLINE( 134)		int SampleRate = ::Std_obj::_hx_int(sampleRate);
HXLINE( 135)		int BitsPerSample;
HXDLIN( 135)		::String _hx_switch_1 = format;
            		if (  (_hx_switch_1==HX_("float",9c,c5,96,02)) ){
HXLINE( 135)			BitsPerSample = 32;
HXDLIN( 135)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_1==HX_("short",7c,84,27,7c)) ){
HXLINE( 135)			BitsPerSample = 16;
HXDLIN( 135)			goto _hx_goto_7;
            		}
            		/* default */{
HXLINE( 139)			HX_STACK_DO_THROW( ::nme::errors::Error_obj::__alloc( HX_CTX ,(HX_("Unsupported format ",7e,06,66,fe) + format),null()));
            		}
            		_hx_goto_7:;
HXLINE( 142)		int ByteRate = ::Std_obj::_hx_int((( (Float)(((SampleRate * NumChannels) * BitsPerSample)) ) / ( (Float)(8) )));
HXLINE( 143)		int BlockAlign = ::Std_obj::_hx_int((( (Float)((NumChannels * BitsPerSample)) ) / ( (Float)(8) )));
HXLINE( 144)		int NumSamples = ::Std_obj::_hx_int((( (Float)(Bytes->length) ) / ( (Float)(BlockAlign) )));
HXLINE( 146)		wav->writeUTFBytes(HX_("RIFF",b7,20,6b,36));
HXLINE( 147)		wav->writeInt((36 + Bytes->length));
HXLINE( 148)		wav->writeUTFBytes(HX_("WAVE",b9,2d,b3,39));
HXLINE( 149)		wav->writeUTFBytes(HX_("fmt ",33,de,be,43));
HXLINE( 150)		wav->writeInt(16);
HXLINE( 151)		wav->writeShort(AudioFormat);
HXLINE( 152)		wav->writeShort(NumChannels);
HXLINE( 153)		wav->writeInt(SampleRate);
HXLINE( 154)		wav->writeInt(ByteRate);
HXLINE( 155)		wav->writeShort(BlockAlign);
HXLINE( 156)		wav->writeShort(BitsPerSample);
HXLINE( 157)		wav->writeUTFBytes(HX_("data",2a,56,63,42));
HXLINE( 158)		wav->writeInt(Bytes->length);
HXLINE( 159)		wav->writeBytes(Bytes,0,Bytes->length);
HXLINE( 161)		wav->position = 0;
HXLINE( 162)		this->loadCompressedDataFromByteArray(wav,wav->length,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC6(Sound_obj,loadPCMFromByteArray,(void))

void Sound_obj::nmeCheckLoading(){
            	HX_STACKFRAME(&_hx_pos_12d17fb16aed4a89_167_nmeCheckLoading)
HXDLIN( 167)		bool _hx_tmp;
HXDLIN( 167)		bool _hx_tmp1;
HXDLIN( 167)		if (!(this->nmeDynamicSound)) {
HXDLIN( 167)			_hx_tmp1 = this->nmeLoading;
            		}
            		else {
HXDLIN( 167)			_hx_tmp1 = false;
            		}
HXDLIN( 167)		if (_hx_tmp1) {
HXDLIN( 167)			_hx_tmp = ::hx::IsNotNull( this->nmeHandle );
            		}
            		else {
HXDLIN( 167)			_hx_tmp = false;
            		}
HXDLIN( 167)		if (_hx_tmp) {
HXLINE( 169)			 ::Dynamic status = ( ( ::Dynamic)(::nme::media::Sound_obj::nme_sound_get_status(::hx::DynamicPtr(this->nmeHandle))) );
HXLINE( 171)			if (::hx::IsNull( status )) {
HXLINE( 172)				HX_STACK_DO_THROW(HX_("Could not get sound status",79,41,e1,c3));
            			}
HXLINE( 174)			this->bytesLoaded = ( (int)(status->__Field(HX_("bytesLoaded",d0,66,ca,99),::hx::paccDynamic)) );
HXLINE( 175)			this->bytesTotal = ( (int)(status->__Field(HX_("bytesTotal",59,57,da,45),::hx::paccDynamic)) );
HXLINE( 177)			this->nmeLoading = (this->bytesLoaded < this->bytesTotal);
HXLINE( 179)			if (::hx::IsNotNull( status->__Field(HX_("error",c8,cb,29,73),::hx::paccDynamic) )) {
HXLINE( 181)				HX_STACK_DO_THROW( ::Dynamic(status->__Field(HX_("error",c8,cb,29,73),::hx::paccDynamic)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,nmeCheckLoading,(void))

void Sound_obj::nmeOnError(::String msg){
            	HX_GC_STACKFRAME(&_hx_pos_12d17fb16aed4a89_187_nmeOnError)
HXLINE( 188)		this->dispatchEvent( ::nme::events::IOErrorEvent_obj::__alloc( HX_CTX ,HX_("ioError",02,fe,41,76),true,false,msg,null()));
HXLINE( 189)		this->close();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sound_obj,nmeOnError,(void))

 ::nme::media::SoundChannel Sound_obj::play(::hx::Null< Float >  __o_startTime,::hx::Null< int >  __o_loops, ::nme::media::SoundTransform sndTransform){
            		Float startTime = __o_startTime.Default(0);
            		int loops = __o_loops.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_12d17fb16aed4a89_193_play)
HXLINE( 194)		this->nmeCheckLoading();
HXLINE( 196)		if (this->nmeDynamicSound) {
HXLINE( 198)			 ::nme::events::SampleDataEvent request =  ::nme::events::SampleDataEvent_obj::__alloc( HX_CTX ,HX_("sampleData",74,3f,0b,5e),null(),null());
HXLINE( 199)			this->dispatchEvent(request);
HXLINE( 201)			if ((request->data->length > 0)) {
HXLINE( 203)				this->nmeHandle = ( ( ::Dynamic)(::nme::media::Sound_obj::nme_sound_channel_create_dynamic(::hx::DynamicPtr(request->data),::hx::DynamicPtr(sndTransform))) );
            			}
HXLINE( 206)			if (::hx::IsNull( this->nmeHandle )) {
HXLINE( 207)				return null();
            			}
HXLINE( 209)			 ::nme::media::SoundChannel result = ::nme::media::SoundChannel_obj::createDynamic(this->nmeHandle,sndTransform,::hx::ObjectPtr<OBJ_>(this));
HXLINE( 214)			this->nmeHandle = null();
HXLINE( 216)			return result;
            		}
            		else {
HXLINE( 221)			bool _hx_tmp;
HXDLIN( 221)			if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 221)				_hx_tmp = this->nmeLoading;
            			}
            			else {
HXLINE( 221)				_hx_tmp = true;
            			}
HXDLIN( 221)			if (_hx_tmp) {
HXLINE( 222)				return null();
            			}
HXLINE( 224)			 ::nme::media::SoundChannel result1 =  ::nme::media::SoundChannel_obj::__alloc( HX_CTX ,this->nmeHandle,startTime,loops,sndTransform);
HXLINE( 225)			if (::hx::IsNull( result1->nmeHandle )) {
HXLINE( 226)				return null();
            			}
HXLINE( 227)			return result1;
            		}
HXLINE( 196)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC3(Sound_obj,play,return )

 ::nme::media::ID3Info Sound_obj::get_id3(){
            	HX_GC_STACKFRAME(&_hx_pos_12d17fb16aed4a89_233_get_id3)
HXLINE( 234)		this->nmeCheckLoading();
HXLINE( 236)		bool _hx_tmp;
HXDLIN( 236)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 236)			_hx_tmp = this->nmeLoading;
            		}
            		else {
HXLINE( 236)			_hx_tmp = true;
            		}
HXDLIN( 236)		if (_hx_tmp) {
HXLINE( 237)			return null();
            		}
HXLINE( 239)		 ::nme::media::ID3Info id3 =  ::nme::media::ID3Info_obj::__alloc( HX_CTX );
HXLINE( 240)		::nme::media::Sound_obj::nme_sound_get_id3(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(id3));
HXLINE( 241)		return id3;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,get_id3,return )

bool Sound_obj::get_isBuffering(){
            	HX_STACKFRAME(&_hx_pos_12d17fb16aed4a89_245_get_isBuffering)
HXLINE( 246)		this->nmeCheckLoading();
HXLINE( 247)		if (this->nmeLoading) {
HXLINE( 247)			return ::hx::IsNull( this->nmeHandle );
            		}
            		else {
HXLINE( 247)			return false;
            		}
HXDLIN( 247)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,get_isBuffering,return )

Float Sound_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_12d17fb16aed4a89_251_get_length)
HXLINE( 252)		bool _hx_tmp;
HXDLIN( 252)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 252)			_hx_tmp = this->nmeLoading;
            		}
            		else {
HXLINE( 252)			_hx_tmp = true;
            		}
HXDLIN( 252)		if (_hx_tmp) {
HXLINE( 253)			return ( (Float)(0) );
            		}
HXLINE( 255)		return ::nme::media::Sound_obj::nme_sound_get_length(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,get_length,return )

void Sound_obj::suspend(bool inSuspend,::hx::Null< int >  __o_inFlags){
            		int inFlags = __o_inFlags.Default(2);
            	HX_STACKFRAME(&_hx_pos_12d17fb16aed4a89_59_suspend)
HXDLIN(  59)		::nme::media::Sound_obj::nme_sound_suspend(inSuspend,inFlags);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Sound_obj,suspend,(void))

 ::Dynamic Sound_obj::nme_sound_from_file;

 ::Dynamic Sound_obj::nme_sound_from_data;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > Sound_obj::nme_sound_get_id3;

::cpp::Function< Float  ( ::hx::Object *) > Sound_obj::nme_sound_get_length;

::cpp::Function< void  ( ::hx::Object *) > Sound_obj::nme_sound_close;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > Sound_obj::nme_sound_get_status;

::cpp::Function< void  (bool,int) > Sound_obj::nme_sound_suspend;

 ::Dynamic Sound_obj::nme_sound_get_engine;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *) > Sound_obj::nme_sound_channel_create_dynamic;


::hx::ObjectPtr< Sound_obj > Sound_obj::__new( ::nme::net::URLRequest stream, ::nme::media::SoundLoaderContext context,::hx::Null< bool >  __o_forcePlayAsMusic,::String inEngine) {
	::hx::ObjectPtr< Sound_obj > __this = new Sound_obj();
	__this->__construct(stream,context,__o_forcePlayAsMusic,inEngine);
	return __this;
}

::hx::ObjectPtr< Sound_obj > Sound_obj::__alloc(::hx::Ctx *_hx_ctx, ::nme::net::URLRequest stream, ::nme::media::SoundLoaderContext context,::hx::Null< bool >  __o_forcePlayAsMusic,::String inEngine) {
	Sound_obj *__this = (Sound_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Sound_obj), true, "nme.media.Sound"));
	*(void **)__this = Sound_obj::_hx_vtable;
	__this->__construct(stream,context,__o_forcePlayAsMusic,inEngine);
	return __this;
}

Sound_obj::Sound_obj()
{
}

void Sound_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Sound);
	HX_MARK_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_MARK_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_MARK_MEMBER_NAME(id3,"id3");
	HX_MARK_MEMBER_NAME(isBuffering,"isBuffering");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_MARK_MEMBER_NAME(nmeLoading,"nmeLoading");
	HX_MARK_MEMBER_NAME(nmeDynamicSound,"nmeDynamicSound");
	 ::nme::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Sound_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bytesLoaded,"bytesLoaded");
	HX_VISIT_MEMBER_NAME(bytesTotal,"bytesTotal");
	HX_VISIT_MEMBER_NAME(id3,"id3");
	HX_VISIT_MEMBER_NAME(isBuffering,"isBuffering");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(url,"url");
	HX_VISIT_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_VISIT_MEMBER_NAME(nmeLoading,"nmeLoading");
	HX_VISIT_MEMBER_NAME(nmeDynamicSound,"nmeDynamicSound");
	 ::nme::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Sound_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"id3") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_id3() : id3 ); }
		if (HX_FIELD_EQ(inName,"url") ) { return ::hx::Val( url ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return ::hx::Val( load_dyn() ); }
		if (HX_FIELD_EQ(inName,"play") ) { return ::hx::Val( play_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return ::hx::Val( close_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_length() : length ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_id3") ) { return ::hx::Val( get_id3_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { return ::hx::Val( nmeHandle ); }
		if (HX_FIELD_EQ(inName,"getEngine") ) { return ::hx::Val( getEngine_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { return ::hx::Val( bytesTotal ); }
		if (HX_FIELD_EQ(inName,"nmeLoading") ) { return ::hx::Val( nmeLoading ); }
		if (HX_FIELD_EQ(inName,"nmeOnError") ) { return ::hx::Val( nmeOnError_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return ::hx::Val( get_length_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { return ::hx::Val( bytesLoaded ); }
		if (HX_FIELD_EQ(inName,"isBuffering") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_isBuffering() : isBuffering ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nmeDynamicSound") ) { return ::hx::Val( nmeDynamicSound ); }
		if (HX_FIELD_EQ(inName,"nmeCheckLoading") ) { return ::hx::Val( nmeCheckLoading_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_isBuffering") ) { return ::hx::Val( get_isBuffering_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addEventListener") ) { return ::hx::Val( addEventListener_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"loadPCMFromByteArray") ) { return ::hx::Val( loadPCMFromByteArray_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"loadCompressedDataFromByteArray") ) { return ::hx::Val( loadCompressedDataFromByteArray_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Sound_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"suspend") ) { outValue = suspend_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nme_sound_close") ) { outValue = ( nme_sound_close ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nme_sound_get_id3") ) { outValue = ( nme_sound_get_id3 ); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_suspend") ) { outValue = ( nme_sound_suspend ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"nme_sound_from_file") ) { outValue = ( nme_sound_from_file ); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_from_data") ) { outValue = ( nme_sound_from_data ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nme_sound_get_length") ) { outValue = ( nme_sound_get_length ); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_get_status") ) { outValue = ( nme_sound_get_status ); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_get_engine") ) { outValue = ( nme_sound_get_engine ); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_create_dynamic") ) { outValue = ( nme_sound_channel_create_dynamic ); return true; }
	}
	return false;
}

::hx::Val Sound_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"id3") ) { id3=inValue.Cast<  ::nme::media::ID3Info >(); return inValue; }
		if (HX_FIELD_EQ(inName,"url") ) { url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { nmeHandle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { bytesTotal=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeLoading") ) { nmeLoading=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { bytesLoaded=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isBuffering") ) { isBuffering=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nmeDynamicSound") ) { nmeDynamicSound=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Sound_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"nme_sound_close") ) { nme_sound_close=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *) > >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nme_sound_get_id3") ) { nme_sound_get_id3=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_suspend") ) { nme_sound_suspend=ioValue.Cast< ::cpp::Function< void  (bool,int) > >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"nme_sound_from_file") ) { nme_sound_from_file=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_from_data") ) { nme_sound_from_data=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nme_sound_get_length") ) { nme_sound_get_length=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_get_status") ) { nme_sound_get_status=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_get_engine") ) { nme_sound_get_engine=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_create_dynamic") ) { nme_sound_channel_create_dynamic=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
	}
	return false;
}

void Sound_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bytesLoaded",d0,66,ca,99));
	outFields->push(HX_("bytesTotal",59,57,da,45));
	outFields->push(HX_("id3",f8,03,50,00));
	outFields->push(HX_("isBuffering",98,26,10,90));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("url",6f,2b,59,00));
	outFields->push(HX_("nmeHandle",8e,87,bf,52));
	outFields->push(HX_("nmeLoading",d6,33,f4,d7));
	outFields->push(HX_("nmeDynamicSound",36,c5,65,6c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Sound_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Sound_obj,bytesLoaded),HX_("bytesLoaded",d0,66,ca,99)},
	{::hx::fsInt,(int)offsetof(Sound_obj,bytesTotal),HX_("bytesTotal",59,57,da,45)},
	{::hx::fsObject /*  ::nme::media::ID3Info */ ,(int)offsetof(Sound_obj,id3),HX_("id3",f8,03,50,00)},
	{::hx::fsBool,(int)offsetof(Sound_obj,isBuffering),HX_("isBuffering",98,26,10,90)},
	{::hx::fsFloat,(int)offsetof(Sound_obj,length),HX_("length",e6,94,07,9f)},
	{::hx::fsString,(int)offsetof(Sound_obj,url),HX_("url",6f,2b,59,00)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Sound_obj,nmeHandle),HX_("nmeHandle",8e,87,bf,52)},
	{::hx::fsBool,(int)offsetof(Sound_obj,nmeLoading),HX_("nmeLoading",d6,33,f4,d7)},
	{::hx::fsBool,(int)offsetof(Sound_obj,nmeDynamicSound),HX_("nmeDynamicSound",36,c5,65,6c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Sound_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Sound_obj::nme_sound_from_file,HX_("nme_sound_from_file",c8,ab,53,d7)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Sound_obj::nme_sound_from_data,HX_("nme_sound_from_data",76,33,fb,d5)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &Sound_obj::nme_sound_get_id3,HX_("nme_sound_get_id3",e6,4f,c7,3d)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &Sound_obj::nme_sound_get_length,HX_("nme_sound_get_length",b8,f1,41,16)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *) > */ ,(void *) &Sound_obj::nme_sound_close,HX_("nme_sound_close",4f,47,c9,95)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > */ ,(void *) &Sound_obj::nme_sound_get_status,HX_("nme_sound_get_status",04,44,36,7d)},
	{::hx::fsObject /* ::cpp::Function< void  (bool,int) > */ ,(void *) &Sound_obj::nme_sound_suspend,HX_("nme_sound_suspend",d3,b2,51,0e)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Sound_obj::nme_sound_get_engine,HX_("nme_sound_get_engine",94,a4,be,73)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &Sound_obj::nme_sound_channel_create_dynamic,HX_("nme_sound_channel_create_dynamic",c1,2d,7b,cc)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Sound_obj_sMemberFields[] = {
	HX_("bytesLoaded",d0,66,ca,99),
	HX_("bytesTotal",59,57,da,45),
	HX_("id3",f8,03,50,00),
	HX_("isBuffering",98,26,10,90),
	HX_("length",e6,94,07,9f),
	HX_("url",6f,2b,59,00),
	HX_("nmeHandle",8e,87,bf,52),
	HX_("nmeLoading",d6,33,f4,d7),
	HX_("nmeDynamicSound",36,c5,65,6c),
	HX_("getEngine",f8,d0,da,78),
	HX_("addEventListener",cd,0b,64,f1),
	HX_("close",b8,17,63,48),
	HX_("load",26,9a,b7,47),
	HX_("loadCompressedDataFromByteArray",d6,4f,5d,a0),
	HX_("loadPCMFromByteArray",73,51,e4,c4),
	HX_("nmeCheckLoading",fa,7a,68,2b),
	HX_("nmeOnError",83,cf,68,d8),
	HX_("play",f4,2d,5a,4a),
	HX_("get_id3",8f,cc,c4,26),
	HX_("get_isBuffering",2f,de,f1,50),
	HX_("get_length",af,04,8f,8f),
	::String(null()) };

static void Sound_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Sound_obj::nme_sound_from_file,"nme_sound_from_file");
	HX_MARK_MEMBER_NAME(Sound_obj::nme_sound_from_data,"nme_sound_from_data");
	HX_MARK_MEMBER_NAME(Sound_obj::nme_sound_get_id3,"nme_sound_get_id3");
	HX_MARK_MEMBER_NAME(Sound_obj::nme_sound_get_length,"nme_sound_get_length");
	HX_MARK_MEMBER_NAME(Sound_obj::nme_sound_close,"nme_sound_close");
	HX_MARK_MEMBER_NAME(Sound_obj::nme_sound_get_status,"nme_sound_get_status");
	HX_MARK_MEMBER_NAME(Sound_obj::nme_sound_suspend,"nme_sound_suspend");
	HX_MARK_MEMBER_NAME(Sound_obj::nme_sound_get_engine,"nme_sound_get_engine");
	HX_MARK_MEMBER_NAME(Sound_obj::nme_sound_channel_create_dynamic,"nme_sound_channel_create_dynamic");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Sound_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Sound_obj::nme_sound_from_file,"nme_sound_from_file");
	HX_VISIT_MEMBER_NAME(Sound_obj::nme_sound_from_data,"nme_sound_from_data");
	HX_VISIT_MEMBER_NAME(Sound_obj::nme_sound_get_id3,"nme_sound_get_id3");
	HX_VISIT_MEMBER_NAME(Sound_obj::nme_sound_get_length,"nme_sound_get_length");
	HX_VISIT_MEMBER_NAME(Sound_obj::nme_sound_close,"nme_sound_close");
	HX_VISIT_MEMBER_NAME(Sound_obj::nme_sound_get_status,"nme_sound_get_status");
	HX_VISIT_MEMBER_NAME(Sound_obj::nme_sound_suspend,"nme_sound_suspend");
	HX_VISIT_MEMBER_NAME(Sound_obj::nme_sound_get_engine,"nme_sound_get_engine");
	HX_VISIT_MEMBER_NAME(Sound_obj::nme_sound_channel_create_dynamic,"nme_sound_channel_create_dynamic");
};

#endif

::hx::Class Sound_obj::__mClass;

static ::String Sound_obj_sStaticFields[] = {
	HX_("suspend",7c,2f,4f,f7),
	HX_("nme_sound_from_file",c8,ab,53,d7),
	HX_("nme_sound_from_data",76,33,fb,d5),
	HX_("nme_sound_get_id3",e6,4f,c7,3d),
	HX_("nme_sound_get_length",b8,f1,41,16),
	HX_("nme_sound_close",4f,47,c9,95),
	HX_("nme_sound_get_status",04,44,36,7d),
	HX_("nme_sound_suspend",d3,b2,51,0e),
	HX_("nme_sound_get_engine",94,a4,be,73),
	HX_("nme_sound_channel_create_dynamic",c1,2d,7b,cc),
	::String(null())
};

void Sound_obj::__register()
{
	Sound_obj _hx_dummy;
	Sound_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.media.Sound",7d,b8,5b,0f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Sound_obj::__GetStatic;
	__mClass->mSetStaticField = &Sound_obj::__SetStatic;
	__mClass->mMarkFunc = Sound_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Sound_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Sound_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Sound_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Sound_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sound_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sound_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Sound_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_12d17fb16aed4a89_259_boot)
HXDLIN( 259)		nme_sound_from_file = ::nme::Loader_obj::load(HX_("nme_sound_from_file",c8,ab,53,d7),3);
            	}
{
            	HX_STACKFRAME(&_hx_pos_12d17fb16aed4a89_260_boot)
HXDLIN( 260)		nme_sound_from_data = ::nme::Loader_obj::load(HX_("nme_sound_from_data",76,33,fb,d5),4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_aa8564e65f521248_9_boot)
HXDLIN(   9)		nme_sound_get_id3 = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_get_id3",e6,4f,c7,3d),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_aa8564e65f521248_9_boot)
HXDLIN(   9)		nme_sound_get_length = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_get_length",b8,f1,41,16),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_aa8564e65f521248_9_boot)
HXDLIN(   9)		nme_sound_close = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_close",4f,47,c9,95),HX_("ov",27,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_aa8564e65f521248_9_boot)
HXDLIN(   9)		nme_sound_get_status = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_get_status",04,44,36,7d),HX_("oo",20,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_aa8564e65f521248_9_boot)
HXDLIN(   9)		nme_sound_suspend = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_suspend",d3,b2,51,0e),HX_("biv",cf,b8,4a,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_12d17fb16aed4a89_266_boot)
HXDLIN( 266)		nme_sound_get_engine = ::nme::Loader_obj::load(HX_("nme_sound_get_engine",94,a4,be,73),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_aa8564e65f521248_9_boot)
HXDLIN(   9)		nme_sound_channel_create_dynamic = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_create_dynamic",c1,2d,7b,cc),HX_("ooo",4f,9b,54,00),false);
            	}
}

} // end namespace nme
} // end namespace media
