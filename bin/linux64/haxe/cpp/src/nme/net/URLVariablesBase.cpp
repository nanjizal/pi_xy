// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_nme_net_URLVariablesBase
#include <nme/net/URLVariablesBase.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d9ec8bcfe3f9548_54_new,"nme.net.URLVariablesBase","new",0xddd840e4,"nme.net.URLVariablesBase.new","nme/net/URLVariables.hx",54,0xb81838db)
HX_LOCAL_STACK_FRAME(_hx_pos_9d9ec8bcfe3f9548_61_decode,"nme.net.URLVariablesBase","decode",0x310f172a,"nme.net.URLVariablesBase.decode","nme/net/URLVariables.hx",61,0xb81838db)
HX_LOCAL_STACK_FRAME(_hx_pos_9d9ec8bcfe3f9548_78_set,"nme.net.URLVariablesBase","set",0xdddc0c26,"nme.net.URLVariablesBase.set","nme/net/URLVariables.hx",78,0xb81838db)
HX_LOCAL_STACK_FRAME(_hx_pos_9d9ec8bcfe3f9548_85_get,"nme.net.URLVariablesBase","get",0xddd2f11a,"nme.net.URLVariablesBase.get","nme/net/URLVariables.hx",85,0xb81838db)
HX_LOCAL_STACK_FRAME(_hx_pos_9d9ec8bcfe3f9548_89_toString,"nme.net.URLVariablesBase","toString",0x9bf001a8,"nme.net.URLVariablesBase.toString","nme/net/URLVariables.hx",89,0xb81838db)
namespace nme{
namespace net{

void URLVariablesBase_obj::__construct(::String inEncoded){
            	HX_GC_STACKFRAME(&_hx_pos_9d9ec8bcfe3f9548_54_new)
HXDLIN(  54)		if (::hx::IsNotNull( inEncoded )) {
HXLINE(  55)			this->decode(inEncoded);
            		}
            		else {
HXLINE(  57)			this->fields =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            		}
            	}

Dynamic URLVariablesBase_obj::__CreateEmpty() { return new URLVariablesBase_obj; }

void *URLVariablesBase_obj::_hx_vtable = 0;

Dynamic URLVariablesBase_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< URLVariablesBase_obj > _hx_result = new URLVariablesBase_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool URLVariablesBase_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4f8f2970;
}

void URLVariablesBase_obj::decode(::String inVars){
            	HX_GC_STACKFRAME(&_hx_pos_9d9ec8bcfe3f9548_61_decode)
HXLINE(  62)		this->fields =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  64)		::Array< ::String > fieldStrings = inVars.split(HX_(";",3b,00,00,00))->join(HX_("&",26,00,00,00)).split(HX_("&",26,00,00,00));
HXLINE(  66)		{
HXLINE(  66)			int _g = 0;
HXDLIN(  66)			while((_g < fieldStrings->length)){
HXLINE(  66)				::String f = fieldStrings->__get(_g);
HXDLIN(  66)				_g = (_g + 1);
HXLINE(  68)				int eq = f.indexOf(HX_("=",3d,00,00,00),null());
HXLINE(  70)				if ((eq > 0)) {
HXLINE(  71)					::Dynamic this1 = this->fields;
HXDLIN(  71)					::String key = ::StringTools_obj::urlDecode(f.substr(0,eq));
HXDLIN(  71)					( ( ::haxe::ds::StringMap)(this1) )->set(key,::StringTools_obj::urlDecode(f.substr((eq + 1),null())));
            				}
            				else {
HXLINE(  72)					if ((eq != 0)) {
HXLINE(  73)						::Dynamic this2 = this->fields;
HXDLIN(  73)						( ( ::haxe::ds::StringMap)(this2) )->set(::StringTools_obj::urlDecode(f),HX_("",00,00,00,00));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(URLVariablesBase_obj,decode,(void))

::String URLVariablesBase_obj::set(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_9d9ec8bcfe3f9548_78_set)
HXLINE(  79)		this->fields->set(name,value);
HXLINE(  80)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(URLVariablesBase_obj,set,return )

::String URLVariablesBase_obj::get(::String name){
            	HX_STACKFRAME(&_hx_pos_9d9ec8bcfe3f9548_85_get)
HXDLIN(  85)		return this->fields->get_string(name);
            	}


HX_DEFINE_DYNAMIC_FUNC1(URLVariablesBase_obj,get,return )

::String URLVariablesBase_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_9d9ec8bcfe3f9548_89_toString)
HXLINE(  90)		::Array< ::String > result = ::Array_obj< ::String >::__new();
HXLINE(  92)		{
HXLINE(  92)			 ::Dynamic f = this->fields->keys();
HXDLIN(  92)			while(( (bool)(f->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  92)				::String f1 = ( (::String)(f->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  93)				::String _hx_tmp = (::StringTools_obj::urlEncode(f1) + HX_("=",3d,00,00,00));
HXDLIN(  93)				result->push((_hx_tmp + ::StringTools_obj::urlEncode(this->fields->get_string(f1))));
            			}
            		}
HXLINE(  95)		return result->join(HX_("&",26,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(URLVariablesBase_obj,toString,return )


::hx::ObjectPtr< URLVariablesBase_obj > URLVariablesBase_obj::__new(::String inEncoded) {
	::hx::ObjectPtr< URLVariablesBase_obj > __this = new URLVariablesBase_obj();
	__this->__construct(inEncoded);
	return __this;
}

::hx::ObjectPtr< URLVariablesBase_obj > URLVariablesBase_obj::__alloc(::hx::Ctx *_hx_ctx,::String inEncoded) {
	URLVariablesBase_obj *__this = (URLVariablesBase_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(URLVariablesBase_obj), true, "nme.net.URLVariablesBase"));
	*(void **)__this = URLVariablesBase_obj::_hx_vtable;
	__this->__construct(inEncoded);
	return __this;
}

URLVariablesBase_obj::URLVariablesBase_obj()
{
}

void URLVariablesBase_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(URLVariablesBase);
	HX_MARK_MEMBER_NAME(fields,"fields");
	HX_MARK_END_CLASS();
}

void URLVariablesBase_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fields,"fields");
}

::hx::Val URLVariablesBase_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"fields") ) { return ::hx::Val( fields ); }
		if (HX_FIELD_EQ(inName,"decode") ) { return ::hx::Val( decode_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val URLVariablesBase_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"fields") ) { fields=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void URLVariablesBase_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("fields",79,8e,8e,80));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo URLVariablesBase_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(URLVariablesBase_obj,fields),HX_("fields",79,8e,8e,80)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *URLVariablesBase_obj_sStaticStorageInfo = 0;
#endif

static ::String URLVariablesBase_obj_sMemberFields[] = {
	HX_("fields",79,8e,8e,80),
	HX_("decode",2e,5d,ed,64),
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class URLVariablesBase_obj::__mClass;

void URLVariablesBase_obj::__register()
{
	URLVariablesBase_obj _hx_dummy;
	URLVariablesBase_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.net.URLVariablesBase",f2,3e,ad,b5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(URLVariablesBase_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< URLVariablesBase_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = URLVariablesBase_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = URLVariablesBase_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace net
