// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_ui_GameInput
#define INCLUDED_nme_ui_GameInput

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,ui,GameInput)
HX_DECLARE_CLASS2(nme,ui,GameInputDevice)
HX_DECLARE_CLASS2(nme,ui,KeyboardInputDevice)

namespace nme{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES GameInput_obj : public  ::nme::events::EventDispatcher_obj
{
	public:
		typedef  ::nme::events::EventDispatcher_obj super;
		typedef GameInput_obj OBJ_;
		GameInput_obj();

	public:
		enum { _hx_ClassId = 0x0a8ca3e2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.ui.GameInput")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.ui.GameInput"); }
		static ::hx::ObjectPtr< GameInput_obj > __new();
		static ::hx::ObjectPtr< GameInput_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GameInput_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GameInput",98,92,0b,95); }

		static void __boot();
		static bool isSupported;
		static int numDevices;
		static ::Array< ::Dynamic> nmeDevices;
		static ::Array< ::Dynamic> nmeInstances;
		static ::Array< ::Dynamic> nmeKeyboardDevices;
		static bool hasInstances();
		static ::Dynamic hasInstances_dyn();

		static  ::nme::ui::GameInputDevice getBest();
		static ::Dynamic getBest_dyn();

		static  ::nme::ui::GameInputDevice getDeviceAt(int index);
		static ::Dynamic getDeviceAt_dyn();

		static ::String getGamepadGuid(int index);
		static ::Dynamic getGamepadGuid_dyn();

		static ::String getGamepadName(int index);
		static ::Dynamic getGamepadName_dyn();

		static  ::nme::ui::GameInputDevice _hx___getDevice(int index);
		static ::Dynamic _hx___getDevice_dyn();

		static void nmeGamepadConnect(int index);
		static ::Dynamic nmeGamepadConnect_dyn();

		static void nmeGamepadDisconnect(int index);
		static ::Dynamic nmeGamepadDisconnect_dyn();

		static void nmeGamepadAxisMove(int index,int axis,Float value);
		static ::Dynamic nmeGamepadAxisMove_dyn();

		static void nmeGamepadButton(int index,int button,int down);
		static ::Dynamic nmeGamepadButton_dyn();

		 ::nme::ui::GameInputDevice addKeyboardDevice0();
		::Dynamic addKeyboardDevice0_dyn();

		void addEventListener(::String type, ::Dynamic listener,::hx::Null< bool >  useCapture,::hx::Null< int >  priority,::hx::Null< bool >  useWeakReference);

};

} // end namespace nme
} // end namespace ui

#endif /* INCLUDED_nme_ui_GameInput */ 
