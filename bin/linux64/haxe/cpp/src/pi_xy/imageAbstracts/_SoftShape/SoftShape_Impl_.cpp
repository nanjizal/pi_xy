// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitQuad
#include <pi_xy/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTriArray
#include <pi_xy/algo/HitTriArray.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_QuadPoints_
#include <pi_xy/algo/QuadPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_imageAbstracts__SoftShape_SoftShape_Impl_
#include <pi_xy/imageAbstracts/_SoftShape/SoftShape_Impl_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_21__new,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","_new",0x0174ae1d,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_._new","pi_xy/imageAbstracts/SoftShape.hx",21,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_36_quint,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","quint",0xa67d9c4f,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.quint","pi_xy/imageAbstracts/SoftShape.hx",36,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_60_quad,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","quad",0x0d5fd183,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.quad","pi_xy/imageAbstracts/SoftShape.hx",60,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_86_quadFudge,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","quadFudge",0xad19a110,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.quadFudge","pi_xy/imageAbstracts/SoftShape.hx",86,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_112_quadQuarter,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","quadQuarter",0x761974e9,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.quadQuarter","pi_xy/imageAbstracts/SoftShape.hx",112,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_137_line,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","line",0x0a08b0b0,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.line","pi_xy/imageAbstracts/SoftShape.hx",137,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_165_lineLuxury,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","lineLuxury",0xa91a65dd,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.lineLuxury","pi_xy/imageAbstracts/SoftShape.hx",165,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_197_triangle,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","triangle",0xc61c6584,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.triangle","pi_xy/imageAbstracts/SoftShape.hx",197,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_217_arrow,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","arrow",0x6e1f858d,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.arrow","pi_xy/imageAbstracts/SoftShape.hx",217,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_232_arrowBoth,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","arrowBoth",0x103a84ae,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.arrowBoth","pi_xy/imageAbstracts/SoftShape.hx",232,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_249_fixArrow,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","fixArrow",0xc44e0a70,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.fixArrow","pi_xy/imageAbstracts/SoftShape.hx",249,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_268_fixArrowBoth,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","fixArrowBoth",0xadf0b711,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.fixArrowBoth","pi_xy/imageAbstracts/SoftShape.hx",268,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_285_ellipseTri,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","ellipseTri",0x453a0ca9,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.ellipseTri","pi_xy/imageAbstracts/SoftShape.hx",285,0x800b1d58)
HX_LOCAL_STACK_FRAME(_hx_pos_afea4fbe553791bf_305_polyBuild,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_","polyBuild",0x644db706,"pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_.polyBuild","pi_xy/imageAbstracts/SoftShape.hx",305,0x800b1d58)
namespace pi_xy{
namespace imageAbstracts{
namespace _SoftShape{

void SoftShape_Impl__obj::__construct() { }

Dynamic SoftShape_Impl__obj::__CreateEmpty() { return new SoftShape_Impl__obj; }

void *SoftShape_Impl__obj::_hx_vtable = 0;

Dynamic SoftShape_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SoftShape_Impl__obj > _hx_result = new SoftShape_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SoftShape_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3329bea6;
}

 ::pi_xy::ImageStruct SoftShape_Impl__obj::_new(int w,int h){
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_21__new)
HXLINE(  23)		 ::Dynamic imageType = null();
HXDLIN(  23)		 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  23)		if (::hx::IsNull( imageType )) {
HXLINE(  23)			imageType = ::pi_xy::ImageStruct_obj::defaultType;
            		}
HXDLIN(  23)		::Dynamic this2;
HXDLIN(  23)		switch((int)(( (int)(imageType) ))){
            			case (int)0: {
HXLINE(  23)				 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  23)				 ::iterMagic::BytesImg b = byt;
HXDLIN(  23)				{
HXLINE(  23)					b->width = w;
HXDLIN(  23)					b->height = h;
HXDLIN(  23)					b->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  23)					b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  23)					{
HXLINE(  23)						int len = b->length;
HXDLIN(  23)						int w1 = 0;
HXDLIN(  23)						{
HXLINE(  23)							int _g = 0;
HXDLIN(  23)							int _g1 = b->height;
HXDLIN(  23)							while((_g < _g1)){
HXLINE(  23)								_g = (_g + 1);
HXDLIN(  23)								int y = (_g - 1);
HXDLIN(  23)								{
HXLINE(  23)									int _g2 = 0;
HXDLIN(  23)									int _g3 = b->width;
HXDLIN(  23)									while((_g2 < _g3)){
HXLINE(  23)										_g2 = (_g2 + 1);
HXDLIN(  23)										int x = (_g2 - 1);
HXDLIN(  23)										{
HXLINE(  23)											w1 = (w1 + 1);
HXDLIN(  23)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  23)										{
HXLINE(  23)											w1 = (w1 + 1);
HXDLIN(  23)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  23)										{
HXLINE(  23)											w1 = (w1 + 1);
HXDLIN(  23)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  23)										{
HXLINE(  23)											w1 = (w1 + 1);
HXDLIN(  23)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  23)				this2 = b;
            			}
            			break;
            			case (int)1: {
HXLINE(  23)				 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  23)				 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  23)				{
HXLINE(  23)					a->width = w;
HXDLIN(  23)					a->height = h;
HXDLIN(  23)					a->data = ::Array_obj< int >::__new(0);
HXDLIN(  23)					a->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  23)					{
HXLINE(  23)						int _g4 = 0;
HXDLIN(  23)						int _g5 = a->length;
HXDLIN(  23)						while((_g4 < _g5)){
HXLINE(  23)							_g4 = (_g4 + 1);
HXDLIN(  23)							int i = (_g4 - 1);
HXDLIN(  23)							a->data[i] = 0;
            						}
            					}
            				}
HXDLIN(  23)				this2 = a;
            			}
            			break;
            			case (int)2: {
HXLINE(  23)				 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  23)				 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  23)				{
HXLINE(  23)					b1->width = w;
HXDLIN(  23)					b1->height = h;
HXDLIN(  23)					b1->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  23)					int size = (b1->length * 4);
HXDLIN(  23)					b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  23)					{
HXLINE(  23)						int _g6 = 0;
HXDLIN(  23)						int _g7 = b1->length;
HXDLIN(  23)						while((_g6 < _g7)){
HXLINE(  23)							_g6 = (_g6 + 1);
HXDLIN(  23)							int i1 = (_g6 - 1);
HXDLIN(  23)							{
HXLINE(  23)								 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN(  23)								bool this4;
HXDLIN(  23)								if ((i1 >= 0)) {
HXLINE(  23)									this4 = (i1 < (this3->byteLength >> 2));
            								}
            								else {
HXLINE(  23)									this4 = false;
            								}
HXDLIN(  23)								if (this4) {
HXLINE(  23)									 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN(  23)									int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN(  23)									_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  23)									_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  23)									_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  23)									_this->b[(pos + 3)] = ( (unsigned char)(0) );
            								}
            							}
            						}
            					}
            				}
HXDLIN(  23)				this2 = b1;
            			}
            			break;
            			case (int)3: {
HXLINE(  23)				 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  23)				 ::iterMagic::VecIntImg v = vec;
HXDLIN(  23)				{
HXLINE(  23)					v->width = w;
HXDLIN(  23)					v->height = h;
HXDLIN(  23)					v->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  23)					v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  23)					{
HXLINE(  23)						int _g8 = 0;
HXDLIN(  23)						int _g9 = v->length;
HXDLIN(  23)						while((_g8 < _g9)){
HXLINE(  23)							_g8 = (_g8 + 1);
HXDLIN(  23)							int i2 = (_g8 - 1);
HXDLIN(  23)							v->data->__unsafe_set(i2,0);
            						}
            					}
            				}
HXDLIN(  23)				this2 = v;
            			}
            			break;
            			case (int)4: {
HXLINE(  23)				 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  23)				 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  23)				{
HXLINE(  23)					b2->width = w;
HXDLIN(  23)					b2->height = h;
HXDLIN(  23)					b2->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  23)					b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  23)					{
HXLINE(  23)						int len1 = b2->length;
HXDLIN(  23)						 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  23)						if (::hx::IsNull( d->head )) {
HXLINE(  23)							int _g10 = 0;
HXDLIN(  23)							int _g11 = len1;
HXDLIN(  23)							while((_g10 < _g11)){
HXLINE(  23)								_g10 = (_g10 + 1);
HXDLIN(  23)								int i3 = (_g10 - 1);
HXDLIN(  23)								d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            							}
            						}
            						else {
HXLINE(  23)							int _g12 = 0;
HXDLIN(  23)							int _g13 = len1;
HXDLIN(  23)							while((_g12 < _g13)){
HXLINE(  23)								_g12 = (_g12 + 1);
HXDLIN(  23)								int i4 = (_g12 - 1);
HXDLIN(  23)								{
HXLINE(  23)									 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  23)									 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  23)									{
HXLINE(  23)										int _g14 = 0;
HXDLIN(  23)										int _g15 = i4;
HXDLIN(  23)										while((_g14 < _g15)){
HXLINE(  23)											_g14 = (_g14 + 1);
HXDLIN(  23)											int i5 = (_g14 - 1);
HXDLIN(  23)											prev = l;
HXDLIN(  23)											l = l->next;
            										}
            									}
HXDLIN(  23)									if (::hx::IsNull( prev )) {
HXLINE(  23)										b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  23)										l = null();
            									}
            									else {
HXLINE(  23)										prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  23)										l = null();
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  23)				this2 = b2;
            			}
            			break;
            		}
HXDLIN(  23)		this1->image = this2;
HXDLIN(  23)		this1->width = w;
HXDLIN(  23)		this1->height = h;
HXDLIN(  23)		this1->imageType = ( (int)(imageType) );
HXLINE(  21)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SoftShape_Impl__obj,_new,return )

 ::pi_xy::algo::HitQuad SoftShape_Impl__obj::quint( ::pi_xy::ImageStruct this1,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,int color,Float softC,::hx::Null< bool >  __o_hasHit){
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_36_quint)
HXDLIN(  36)		Float ex = ((((ax + bx) + cx) + dx) / ( (Float)(4) ));
HXDLIN(  36)		Float ey = ((((ay + by) + cy) + dy) / ( (Float)(4) ));
HXDLIN(  36)		{
HXDLIN(  36)			bool hasUndo = false;
HXDLIN(  36)			int aA = ((color >> 24) & 255);
HXDLIN(  36)			int rA = ((color >> 16) & 255);
HXDLIN(  36)			int gA = ((color >> 8) & 255);
HXDLIN(  36)			int bA = (color & 255);
HXDLIN(  36)			Float bcx = (ax - bx);
HXDLIN(  36)			Float bcy = (ay - by);
HXDLIN(  36)			Float acx = (ex - bx);
HXDLIN(  36)			Float acy = (ey - by);
HXDLIN(  36)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  36)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  36)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  36)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  36)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  36)			if ((ex > ax)) {
HXDLIN(  36)				if ((ex > bx)) {
HXDLIN(  36)					int min;
HXDLIN(  36)					if ((ax > bx)) {
HXDLIN(  36)						min = ::Math_obj::floor(bx);
            					}
            					else {
HXDLIN(  36)						min = ::Math_obj::floor(ax);
            					}
HXDLIN(  36)					int ii_min = min;
HXDLIN(  36)					int ii_max = ::Math_obj::ceil(ex);
HXDLIN(  36)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXDLIN(  36)					int ii_min1 = ::Math_obj::floor(ax);
HXDLIN(  36)					int ii_max1 = ::Math_obj::ceil(bx);
HXDLIN(  36)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXDLIN(  36)				if ((ax > bx)) {
HXDLIN(  36)					int min1;
HXDLIN(  36)					if ((ex > bx)) {
HXDLIN(  36)						min1 = ::Math_obj::floor(bx);
            					}
            					else {
HXDLIN(  36)						min1 = ::Math_obj::ceil(ex);
            					}
HXDLIN(  36)					int ii_min2 = min1;
HXDLIN(  36)					int ii_max2 = ::Math_obj::ceil(ax);
HXDLIN(  36)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXDLIN(  36)					int ii_min3 = ::Math_obj::floor(ex);
HXDLIN(  36)					int ii_max3 = ::Math_obj::ceil(bx);
HXDLIN(  36)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN(  36)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  36)			if ((ey > ay)) {
HXDLIN(  36)				if ((ey > by)) {
HXDLIN(  36)					int min2;
HXDLIN(  36)					if ((ay > by)) {
HXDLIN(  36)						min2 = ::Math_obj::floor(by);
            					}
            					else {
HXDLIN(  36)						min2 = ::Math_obj::floor(ay);
            					}
HXDLIN(  36)					int ii_min4 = min2;
HXDLIN(  36)					int ii_max4 = ::Math_obj::ceil(ey);
HXDLIN(  36)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXDLIN(  36)					int ii_min5 = ::Math_obj::floor(ay);
HXDLIN(  36)					int ii_max5 = ::Math_obj::ceil(by);
HXDLIN(  36)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXDLIN(  36)				if ((ay > by)) {
HXDLIN(  36)					int min3;
HXDLIN(  36)					if ((ey > by)) {
HXDLIN(  36)						min3 = ::Math_obj::floor(by);
            					}
            					else {
HXDLIN(  36)						min3 = ::Math_obj::ceil(ey);
            					}
HXDLIN(  36)					int ii_min6 = min3;
HXDLIN(  36)					int ii_max6 = ::Math_obj::ceil(ay);
HXDLIN(  36)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXDLIN(  36)					int ii_min7 = ::Math_obj::floor(ey);
HXDLIN(  36)					int ii_max7 = ::Math_obj::ceil(by);
HXDLIN(  36)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN(  36)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  36)			if (hasUndo) {
HXDLIN(  36)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  36)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  36)				 ::Dynamic imageType = null();
HXDLIN(  36)				 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  36)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  36)				::Dynamic undoImage1;
HXDLIN(  36)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXDLIN(  36)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::BytesImg b = byt;
HXDLIN(  36)						{
HXDLIN(  36)							b->width = width;
HXDLIN(  36)							b->height = height;
HXDLIN(  36)							b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  36)							b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  36)							{
HXDLIN(  36)								int len = b->length;
HXDLIN(  36)								int w = 0;
HXDLIN(  36)								{
HXDLIN(  36)									int _g = 0;
HXDLIN(  36)									int _g1 = b->height;
HXDLIN(  36)									while((_g < _g1)){
HXDLIN(  36)										_g = (_g + 1);
HXDLIN(  36)										int y = (_g - 1);
HXDLIN(  36)										{
HXDLIN(  36)											int _g2 = 0;
HXDLIN(  36)											int _g3 = b->width;
HXDLIN(  36)											while((_g2 < _g3)){
HXDLIN(  36)												_g2 = (_g2 + 1);
HXDLIN(  36)												int x = (_g2 - 1);
HXDLIN(  36)												{
HXDLIN(  36)													w = (w + 1);
HXDLIN(  36)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  36)												{
HXDLIN(  36)													w = (w + 1);
HXDLIN(  36)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  36)												{
HXDLIN(  36)													w = (w + 1);
HXDLIN(  36)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  36)												{
HXDLIN(  36)													w = (w + 1);
HXDLIN(  36)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  36)						undoImage1 = b;
            					}
            					break;
            					case (int)1: {
HXDLIN(  36)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  36)						{
HXDLIN(  36)							a->width = width;
HXDLIN(  36)							a->height = height;
HXDLIN(  36)							a->data = ::Array_obj< int >::__new(0);
HXDLIN(  36)							a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  36)							{
HXDLIN(  36)								int _g4 = 0;
HXDLIN(  36)								int _g5 = a->length;
HXDLIN(  36)								while((_g4 < _g5)){
HXDLIN(  36)									_g4 = (_g4 + 1);
HXDLIN(  36)									int i = (_g4 - 1);
HXDLIN(  36)									a->data[i] = 0;
            								}
            							}
            						}
HXDLIN(  36)						undoImage1 = a;
            					}
            					break;
            					case (int)2: {
HXDLIN(  36)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  36)						{
HXDLIN(  36)							b1->width = width;
HXDLIN(  36)							b1->height = height;
HXDLIN(  36)							b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  36)							int size = (b1->length * 4);
HXDLIN(  36)							b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  36)							{
HXDLIN(  36)								int _g6 = 0;
HXDLIN(  36)								int _g7 = b1->length;
HXDLIN(  36)								while((_g6 < _g7)){
HXDLIN(  36)									_g6 = (_g6 + 1);
HXDLIN(  36)									int i1 = (_g6 - 1);
HXDLIN(  36)									{
HXDLIN(  36)										 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN(  36)										bool undoImage2;
HXDLIN(  36)										if ((i1 >= 0)) {
HXDLIN(  36)											undoImage2 = (i1 < (this3->byteLength >> 2));
            										}
            										else {
HXDLIN(  36)											undoImage2 = false;
            										}
HXDLIN(  36)										if (undoImage2) {
HXDLIN(  36)											 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN(  36)											int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN(  36)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  36)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  36)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  36)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  36)						undoImage1 = b1;
            					}
            					break;
            					case (int)3: {
HXDLIN(  36)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::VecIntImg v = vec;
HXDLIN(  36)						{
HXDLIN(  36)							v->width = width;
HXDLIN(  36)							v->height = height;
HXDLIN(  36)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  36)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  36)							{
HXDLIN(  36)								int _g8 = 0;
HXDLIN(  36)								int _g9 = v->length;
HXDLIN(  36)								while((_g8 < _g9)){
HXDLIN(  36)									_g8 = (_g8 + 1);
HXDLIN(  36)									int i2 = (_g8 - 1);
HXDLIN(  36)									v->data->__unsafe_set(i2,0);
            								}
            							}
            						}
HXDLIN(  36)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXDLIN(  36)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  36)						{
HXDLIN(  36)							b2->width = width;
HXDLIN(  36)							b2->height = height;
HXDLIN(  36)							b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  36)							b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  36)							{
HXDLIN(  36)								int len1 = b2->length;
HXDLIN(  36)								 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  36)								if (::hx::IsNull( d->head )) {
HXDLIN(  36)									int _g10 = 0;
HXDLIN(  36)									int _g11 = len1;
HXDLIN(  36)									while((_g10 < _g11)){
HXDLIN(  36)										_g10 = (_g10 + 1);
HXDLIN(  36)										int i3 = (_g10 - 1);
HXDLIN(  36)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXDLIN(  36)									int _g12 = 0;
HXDLIN(  36)									int _g13 = len1;
HXDLIN(  36)									while((_g12 < _g13)){
HXDLIN(  36)										_g12 = (_g12 + 1);
HXDLIN(  36)										int i4 = (_g12 - 1);
HXDLIN(  36)										{
HXDLIN(  36)											 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  36)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  36)											{
HXDLIN(  36)												int _g14 = 0;
HXDLIN(  36)												int _g15 = i4;
HXDLIN(  36)												while((_g14 < _g15)){
HXDLIN(  36)													_g14 = (_g14 + 1);
HXDLIN(  36)													int i5 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE(  36)											if (::hx::IsNull( prev )) {
HXDLIN(  36)												b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  36)												l = null();
            											}
            											else {
HXDLIN(  36)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  36)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  36)						undoImage1 = b2;
            					}
            					break;
            				}
HXDLIN(  36)				this2->image = undoImage1;
HXDLIN(  36)				this2->width = width;
HXDLIN(  36)				this2->height = height;
HXDLIN(  36)				this2->imageType = ( (int)(imageType) );
HXDLIN(  36)				undoImage = this2;
HXDLIN(  36)				{
HXDLIN(  36)					int rectLeft = xIter3->start;
HXDLIN(  36)					int rectTop = yIter3->start;
HXDLIN(  36)					int rectRight = xIter3->max;
HXDLIN(  36)					bool forceClear = false;
HXDLIN(  36)					{
HXDLIN(  36)						int _g16 = rectTop;
HXDLIN(  36)						int _g17 = yIter3->max;
HXDLIN(  36)						while((_g16 < _g17)){
HXDLIN(  36)							_g16 = (_g16 + 1);
HXDLIN(  36)							int dy1 = (_g16 - 1);
HXDLIN(  36)							{
HXDLIN(  36)								int _g18 = rectLeft;
HXDLIN(  36)								int _g19 = rectRight;
HXDLIN(  36)								while((_g18 < _g19)){
HXDLIN(  36)									_g18 = (_g18 + 1);
HXDLIN(  36)									int dx1 = (_g18 - 1);
HXDLIN(  36)									::Dynamic this4 = this1->image;
HXDLIN(  36)									int index;
HXDLIN(  36)									if (this1->useVirtualPos) {
HXDLIN(  36)										index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx1) - this1->virtualX));
            									}
            									else {
HXDLIN(  36)										index = ::Std_obj::_hx_int(( (Float)(((dy1 * this1->width) + dx1)) ));
            									}
HXDLIN(  36)									int c = ::iterMagic::Iimg_obj::get(this4,index);
HXDLIN(  36)									int col;
HXDLIN(  36)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXDLIN(  36)										col = c;
            									}
HXDLIN(  36)									bool _hx_tmp;
HXDLIN(  36)									if (this1->useMask) {
HXDLIN(  36)										_hx_tmp = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN(  36)										_hx_tmp = false;
            									}
HXDLIN(  36)									if (_hx_tmp) {
HXDLIN(  36)										 ::pi_xy::ImageStruct this5 = this1->mask;
HXDLIN(  36)										::Dynamic this6 = this5->image;
HXDLIN(  36)										int index1;
HXDLIN(  36)										if (this5->useVirtualPos) {
HXDLIN(  36)											index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx1) - this5->virtualX));
            										}
            										else {
HXDLIN(  36)											index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this5->width) + dx1)) ));
            										}
HXDLIN(  36)										int c1 = ::iterMagic::Iimg_obj::get(this6,index1);
HXDLIN(  36)										int v1;
HXDLIN(  36)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)											v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXDLIN(  36)											v1 = c1;
            										}
HXDLIN(  36)										int maskPixel = v1;
HXDLIN(  36)										int this7 = col;
HXDLIN(  36)										if ((maskPixel == 0)) {
HXDLIN(  36)											col = this7;
            										}
            										else {
HXDLIN(  36)											Float m0;
HXDLIN(  36)											int this8 = ((maskPixel >> 24) & 255);
HXDLIN(  36)											if ((this8 == 0)) {
HXDLIN(  36)												m0 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m0 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float m1;
HXDLIN(  36)											int this9 = ((maskPixel >> 16) & 255);
HXDLIN(  36)											if ((this9 == 0)) {
HXDLIN(  36)												m1 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m1 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float m2;
HXDLIN(  36)											int this10 = ((maskPixel >> 8) & 255);
HXDLIN(  36)											if ((this10 == 0)) {
HXDLIN(  36)												m2 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float m3;
HXDLIN(  36)											int this11 = (maskPixel & 255);
HXDLIN(  36)											if ((this11 == 0)) {
HXDLIN(  36)												m3 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m3 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this7 >> 24) & 255)) )));
HXDLIN(  36)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this7 >> 16) & 255)) )));
HXDLIN(  36)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this7 >> 8) & 255)) )));
HXDLIN(  36)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this7 & 255)) )));
HXDLIN(  36)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  36)									if ((col != 0)) {
HXDLIN(  36)										int x1 = (dx1 - rectLeft);
HXDLIN(  36)										int y1 = (dy1 - rectTop);
HXDLIN(  36)										int c2 = col;
HXDLIN(  36)										bool _hx_tmp1;
HXDLIN(  36)										if ((((c2 >> 24) & 255) < 254)) {
HXDLIN(  36)											_hx_tmp1 = undoImage->transparent;
            										}
            										else {
HXDLIN(  36)											_hx_tmp1 = false;
            										}
HXDLIN(  36)										if (_hx_tmp1) {
HXDLIN(  36)											int location;
HXDLIN(  36)											if (undoImage->useVirtualPos) {
HXDLIN(  36)												location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXDLIN(  36)												location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN(  36)											int this12 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  36)											int this13;
HXDLIN(  36)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)												this13 = ((((((this12 >> 24) & 255) << 24) | ((this12 & 255) << 16)) | (((this12 >> 8) & 255) << 8)) | ((this12 >> 16) & 255));
            											}
            											else {
HXDLIN(  36)												this13 = this12;
            											}
HXDLIN(  36)											Float a1;
HXDLIN(  36)											int this14 = ((this13 >> 24) & 255);
HXDLIN(  36)											if ((this14 == 0)) {
HXDLIN(  36)												a1 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												a1 = (( (Float)(this14) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float r1;
HXDLIN(  36)											int this15 = ((this13 >> 16) & 255);
HXDLIN(  36)											if ((this15 == 0)) {
HXDLIN(  36)												r1 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float g1;
HXDLIN(  36)											int this16 = ((this13 >> 8) & 255);
HXDLIN(  36)											if ((this16 == 0)) {
HXDLIN(  36)												g1 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float b11;
HXDLIN(  36)											int this17 = (this13 & 255);
HXDLIN(  36)											if ((this17 == 0)) {
HXDLIN(  36)												b11 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float a2;
HXDLIN(  36)											int this18 = ((col >> 24) & 255);
HXDLIN(  36)											if ((this18 == 0)) {
HXDLIN(  36)												a2 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												a2 = (( (Float)(this18) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float r2;
HXDLIN(  36)											int this19 = ((col >> 16) & 255);
HXDLIN(  36)											if ((this19 == 0)) {
HXDLIN(  36)												r2 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float g2;
HXDLIN(  36)											int this20 = ((col >> 8) & 255);
HXDLIN(  36)											if ((this20 == 0)) {
HXDLIN(  36)												g2 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float b21;
HXDLIN(  36)											int this21 = (col & 255);
HXDLIN(  36)											if ((this21 == 0)) {
HXDLIN(  36)												b21 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  36)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  36)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  36)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  36)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  36)											int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  36)											{
HXDLIN(  36)												int _hx_tmp2;
HXDLIN(  36)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)													_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXDLIN(  36)													_hx_tmp2 = blended;
            												}
HXDLIN(  36)												::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            											}
            										}
            										else {
HXDLIN(  36)											::Dynamic this22 = undoImage->image;
HXDLIN(  36)											int index2;
HXDLIN(  36)											if (undoImage->useVirtualPos) {
HXDLIN(  36)												index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXDLIN(  36)												index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN(  36)											int _hx_tmp3;
HXDLIN(  36)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)												_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXDLIN(  36)												_hx_tmp3 = c2;
            											}
HXDLIN(  36)											::iterMagic::Iimg_obj::set(this22,index2,_hx_tmp3);
            										}
            									}
            									else {
HXDLIN(  36)										if (forceClear) {
HXDLIN(  36)											::Dynamic this23 = undoImage->image;
HXDLIN(  36)											int x2 = (dx1 - rectLeft);
HXDLIN(  36)											int y2 = (dy1 - rectTop);
HXDLIN(  36)											int index3;
HXDLIN(  36)											if (undoImage->useVirtualPos) {
HXDLIN(  36)												index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            											}
            											else {
HXDLIN(  36)												index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            											}
HXDLIN(  36)											::iterMagic::Iimg_obj::set(this23,index3,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  36)			bool found = false;
HXDLIN(  36)			{
HXDLIN(  36)				int _g_min = xIter3->start;
HXDLIN(  36)				int _g_max = xIter3->max;
HXDLIN(  36)				while((_g_min < _g_max)){
HXDLIN(  36)					_g_min = (_g_min + 1);
HXDLIN(  36)					int px = (_g_min - 1);
HXDLIN(  36)					Float pcx = (( (Float)(px) ) - bx);
HXLINE( 619)					found = false;
HXLINE(  36)					{
HXDLIN(  36)						int _g_min1 = yIter3->start;
HXDLIN(  36)						int _g_max1 = yIter3->max;
HXDLIN(  36)						while((_g_min1 < _g_max1)){
HXDLIN(  36)							_g_min1 = (_g_min1 + 1);
HXDLIN(  36)							int py = (_g_min1 - 1);
HXDLIN(  36)							Float pcy = (( (Float)(py) ) - by);
HXDLIN(  36)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  36)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  36)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  36)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  36)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  36)							bool _hx_tmp4;
HXDLIN(  36)							bool _hx_tmp5;
HXDLIN(  36)							if ((ratioA >= 0)) {
HXDLIN(  36)								_hx_tmp5 = (ratioB >= 0);
            							}
            							else {
HXDLIN(  36)								_hx_tmp5 = false;
            							}
HXDLIN(  36)							if (_hx_tmp5) {
HXDLIN(  36)								_hx_tmp4 = (ratioC >= 0);
            							}
            							else {
HXDLIN(  36)								_hx_tmp4 = false;
            							}
HXDLIN(  36)							if (_hx_tmp4) {
HXDLIN(  36)								int i6 = ::Std_obj::_hx_int((( (Float)(aA) ) * (softC * ratioB)));
HXDLIN(  36)								if ((i6 > 255)) {
HXLINE(  24)									i6 = 255;
            								}
HXLINE(  36)								if ((i6 < 0)) {
HXLINE(  25)									i6 = 0;
            								}
HXLINE(  36)								int a5 = i6;
HXDLIN(  36)								int i7 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN(  36)								if ((i7 > 255)) {
HXLINE(  24)									i7 = 255;
            								}
HXLINE(  36)								if ((i7 < 0)) {
HXLINE(  25)									i7 = 0;
            								}
HXLINE(  36)								int r3 = i7;
HXDLIN(  36)								int i8 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN(  36)								if ((i8 > 255)) {
HXLINE(  24)									i8 = 255;
            								}
HXLINE(  36)								if ((i8 < 0)) {
HXLINE(  25)									i8 = 0;
            								}
HXLINE(  36)								int g3 = i8;
HXDLIN(  36)								int i9 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN(  36)								if ((i9 > 255)) {
HXLINE(  24)									i9 = 255;
            								}
HXLINE(  36)								if ((i9 < 0)) {
HXLINE(  25)									i9 = 0;
            								}
HXLINE(  36)								int b4 = i9;
HXDLIN(  36)								{
HXDLIN(  36)									int location1;
HXDLIN(  36)									if (this1->useVirtualPos) {
HXDLIN(  36)										location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this1->virtualY) * ( (Float)(this1->width) )) + px) - this1->virtualX));
            									}
            									else {
HXDLIN(  36)										location1 = ::Std_obj::_hx_int(( (Float)(((py * this1->width) + px)) ));
            									}
HXDLIN(  36)									bool _hx_tmp6;
HXDLIN(  36)									if (this1->transparent) {
HXDLIN(  36)										_hx_tmp6 = (a5 < 254);
            									}
            									else {
HXDLIN(  36)										_hx_tmp6 = false;
            									}
HXDLIN(  36)									if (_hx_tmp6) {
HXDLIN(  36)										int this24 = ::iterMagic::Iimg_obj::get(this1->image,location1);
HXDLIN(  36)										int old;
HXDLIN(  36)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)											old = ((((((this24 >> 24) & 255) << 24) | ((this24 & 255) << 16)) | (((this24 >> 8) & 255) << 8)) | ((this24 >> 16) & 255));
            										}
            										else {
HXDLIN(  36)											old = this24;
            										}
HXDLIN(  36)										int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  36)										Float a11;
HXDLIN(  36)										int this25 = ((old >> 24) & 255);
HXDLIN(  36)										if ((this25 == 0)) {
HXDLIN(  36)											a11 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											a11 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float r11;
HXDLIN(  36)										int this26 = ((old >> 16) & 255);
HXDLIN(  36)										if ((this26 == 0)) {
HXDLIN(  36)											r11 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float g11;
HXDLIN(  36)										int this27 = ((old >> 8) & 255);
HXDLIN(  36)										if ((this27 == 0)) {
HXDLIN(  36)											g11 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float b12;
HXDLIN(  36)										int this28 = (old & 255);
HXDLIN(  36)										if ((this28 == 0)) {
HXDLIN(  36)											b12 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float a21;
HXDLIN(  36)										int this29 = ((rhs >> 24) & 255);
HXDLIN(  36)										if ((this29 == 0)) {
HXDLIN(  36)											a21 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float r21;
HXDLIN(  36)										int this30 = ((rhs >> 16) & 255);
HXDLIN(  36)										if ((this30 == 0)) {
HXDLIN(  36)											r21 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float g21;
HXDLIN(  36)										int this31 = ((rhs >> 8) & 255);
HXDLIN(  36)										if ((this31 == 0)) {
HXDLIN(  36)											g21 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float b22;
HXDLIN(  36)										int this32 = (rhs & 255);
HXDLIN(  36)										if ((this32 == 0)) {
HXDLIN(  36)											b22 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  36)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  36)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  36)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  36)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  36)										int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN(  36)										{
HXDLIN(  36)											int _hx_tmp7;
HXDLIN(  36)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXDLIN(  36)												_hx_tmp7 = blended1;
            											}
HXDLIN(  36)											::iterMagic::Iimg_obj::set(this1->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXDLIN(  36)										int value;
HXDLIN(  36)										if (this1->isLittle) {
HXDLIN(  36)											value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            										}
            										else {
HXDLIN(  36)											value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            										}
HXDLIN(  36)										::iterMagic::Iimg_obj::set(this1->image,location1,value);
            									}
            								}
HXLINE( 633)								found = true;
            							}
            							else {
HXDLIN(  36)								if (found) {
HXDLIN(  36)									goto _hx_goto_20;
            								}
            							}
            						}
            						_hx_goto_20:;
            					}
            				}
            			}
HXDLIN(  36)			if ((hasHit == false)) {
HXDLIN(  36)				 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,ax,ay,bx,by,true);
HXDLIN(  36)				if (hasUndo) {
HXDLIN(  36)					v2->undoImage = undoImage;
HXDLIN(  36)					v2->undoX = xIter3->start;
HXDLIN(  36)					v2->undoY = yIter3->start;
            				}
            			}
            		}
HXDLIN(  36)		{
HXDLIN(  36)			bool hasUndo1 = false;
HXDLIN(  36)			int aA1 = ((color >> 24) & 255);
HXDLIN(  36)			int rA1 = ((color >> 16) & 255);
HXDLIN(  36)			int gA1 = ((color >> 8) & 255);
HXDLIN(  36)			int bA1 = (color & 255);
HXDLIN(  36)			Float bcx1 = (bx - cx);
HXDLIN(  36)			Float bcy1 = (by - cy);
HXDLIN(  36)			Float acx1 = (ex - cx);
HXDLIN(  36)			Float acy1 = (ey - cy);
HXDLIN(  36)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  36)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  36)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  36)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  36)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  36)			if ((ex > bx)) {
HXDLIN(  36)				if ((ex > cx)) {
HXDLIN(  36)					int min4;
HXDLIN(  36)					if ((bx > cx)) {
HXDLIN(  36)						min4 = ::Math_obj::floor(cx);
            					}
            					else {
HXDLIN(  36)						min4 = ::Math_obj::floor(bx);
            					}
HXDLIN(  36)					int ii_min8 = min4;
HXDLIN(  36)					int ii_max8 = ::Math_obj::ceil(ex);
HXDLIN(  36)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXDLIN(  36)					int ii_min9 = ::Math_obj::floor(bx);
HXDLIN(  36)					int ii_max9 = ::Math_obj::ceil(cx);
HXDLIN(  36)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXDLIN(  36)				if ((bx > cx)) {
HXDLIN(  36)					int min5;
HXDLIN(  36)					if ((ex > cx)) {
HXDLIN(  36)						min5 = ::Math_obj::floor(cx);
            					}
            					else {
HXDLIN(  36)						min5 = ::Math_obj::ceil(ex);
            					}
HXDLIN(  36)					int ii_min10 = min5;
HXDLIN(  36)					int ii_max10 = ::Math_obj::ceil(bx);
HXDLIN(  36)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXDLIN(  36)					int ii_min11 = ::Math_obj::floor(ex);
HXDLIN(  36)					int ii_max11 = ::Math_obj::ceil(cx);
HXDLIN(  36)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN(  36)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  36)			if ((ey > by)) {
HXDLIN(  36)				if ((ey > cy)) {
HXDLIN(  36)					int min6;
HXDLIN(  36)					if ((by > cy)) {
HXDLIN(  36)						min6 = ::Math_obj::floor(cy);
            					}
            					else {
HXDLIN(  36)						min6 = ::Math_obj::floor(by);
            					}
HXDLIN(  36)					int ii_min12 = min6;
HXDLIN(  36)					int ii_max12 = ::Math_obj::ceil(ey);
HXDLIN(  36)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXDLIN(  36)					int ii_min13 = ::Math_obj::floor(by);
HXDLIN(  36)					int ii_max13 = ::Math_obj::ceil(cy);
HXDLIN(  36)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXDLIN(  36)				if ((by > cy)) {
HXDLIN(  36)					int min7;
HXDLIN(  36)					if ((ey > cy)) {
HXDLIN(  36)						min7 = ::Math_obj::floor(cy);
            					}
            					else {
HXDLIN(  36)						min7 = ::Math_obj::ceil(ey);
            					}
HXDLIN(  36)					int ii_min14 = min7;
HXDLIN(  36)					int ii_max14 = ::Math_obj::ceil(by);
HXDLIN(  36)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXDLIN(  36)					int ii_min15 = ::Math_obj::floor(ey);
HXDLIN(  36)					int ii_max15 = ::Math_obj::ceil(cy);
HXDLIN(  36)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN(  36)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  36)			if (hasUndo1) {
HXDLIN(  36)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  36)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  36)				 ::Dynamic imageType1 = null();
HXDLIN(  36)				 ::pi_xy::ImageStruct this33 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  36)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  36)				::Dynamic undoImage4;
HXDLIN(  36)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXDLIN(  36)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::BytesImg b6 = byt1;
HXDLIN(  36)						{
HXDLIN(  36)							b6->width = width1;
HXDLIN(  36)							b6->height = height1;
HXDLIN(  36)							b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  36)							b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN(  36)							{
HXDLIN(  36)								int len2 = b6->length;
HXDLIN(  36)								int w1 = 0;
HXDLIN(  36)								{
HXDLIN(  36)									int _g20 = 0;
HXDLIN(  36)									int _g21 = b6->height;
HXDLIN(  36)									while((_g20 < _g21)){
HXDLIN(  36)										_g20 = (_g20 + 1);
HXDLIN(  36)										int y3 = (_g20 - 1);
HXDLIN(  36)										{
HXDLIN(  36)											int _g22 = 0;
HXDLIN(  36)											int _g23 = b6->width;
HXDLIN(  36)											while((_g22 < _g23)){
HXDLIN(  36)												_g22 = (_g22 + 1);
HXDLIN(  36)												int x3 = (_g22 - 1);
HXDLIN(  36)												{
HXDLIN(  36)													w1 = (w1 + 1);
HXDLIN(  36)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  36)												{
HXDLIN(  36)													w1 = (w1 + 1);
HXDLIN(  36)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  36)												{
HXDLIN(  36)													w1 = (w1 + 1);
HXDLIN(  36)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  36)												{
HXDLIN(  36)													w1 = (w1 + 1);
HXDLIN(  36)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  36)						undoImage4 = b6;
            					}
            					break;
            					case (int)1: {
HXDLIN(  36)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN(  36)						{
HXDLIN(  36)							a7->width = width1;
HXDLIN(  36)							a7->height = height1;
HXDLIN(  36)							a7->data = ::Array_obj< int >::__new(0);
HXDLIN(  36)							a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  36)							{
HXDLIN(  36)								int _g24 = 0;
HXDLIN(  36)								int _g25 = a7->length;
HXDLIN(  36)								while((_g24 < _g25)){
HXDLIN(  36)									_g24 = (_g24 + 1);
HXDLIN(  36)									int i10 = (_g24 - 1);
HXDLIN(  36)									a7->data[i10] = 0;
            								}
            							}
            						}
HXDLIN(  36)						undoImage4 = a7;
            					}
            					break;
            					case (int)2: {
HXDLIN(  36)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN(  36)						{
HXDLIN(  36)							b7->width = width1;
HXDLIN(  36)							b7->height = height1;
HXDLIN(  36)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  36)							int size1 = (b7->length * 4);
HXDLIN(  36)							b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  36)							{
HXDLIN(  36)								int _g26 = 0;
HXDLIN(  36)								int _g27 = b7->length;
HXDLIN(  36)								while((_g26 < _g27)){
HXDLIN(  36)									_g26 = (_g26 + 1);
HXDLIN(  36)									int i11 = (_g26 - 1);
HXDLIN(  36)									{
HXDLIN(  36)										 ::haxe::io::ArrayBufferViewImpl this34 = b7->data;
HXDLIN(  36)										bool undoImage5;
HXDLIN(  36)										if ((i11 >= 0)) {
HXDLIN(  36)											undoImage5 = (i11 < (this34->byteLength >> 2));
            										}
            										else {
HXDLIN(  36)											undoImage5 = false;
            										}
HXDLIN(  36)										if (undoImage5) {
HXDLIN(  36)											 ::haxe::io::Bytes _this1 = this34->bytes;
HXDLIN(  36)											int pos1 = ((i11 << 2) + this34->byteOffset);
HXDLIN(  36)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  36)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  36)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  36)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  36)						undoImage4 = b7;
            					}
            					break;
            					case (int)3: {
HXDLIN(  36)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN(  36)						{
HXDLIN(  36)							v3->width = width1;
HXDLIN(  36)							v3->height = height1;
HXDLIN(  36)							v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  36)							v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN(  36)							{
HXDLIN(  36)								int _g28 = 0;
HXDLIN(  36)								int _g29 = v3->length;
HXDLIN(  36)								while((_g28 < _g29)){
HXDLIN(  36)									_g28 = (_g28 + 1);
HXDLIN(  36)									int i12 = (_g28 - 1);
HXDLIN(  36)									v3->data->__unsafe_set(i12,0);
            								}
            							}
            						}
HXDLIN(  36)						undoImage4 = v3;
            					}
            					break;
            					case (int)4: {
HXDLIN(  36)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN(  36)						{
HXDLIN(  36)							b8->width = width1;
HXDLIN(  36)							b8->height = height1;
HXDLIN(  36)							b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  36)							b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  36)							{
HXDLIN(  36)								int len3 = b8->length;
HXDLIN(  36)								 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN(  36)								if (::hx::IsNull( d1->head )) {
HXDLIN(  36)									int _g30 = 0;
HXDLIN(  36)									int _g31 = len3;
HXDLIN(  36)									while((_g30 < _g31)){
HXDLIN(  36)										_g30 = (_g30 + 1);
HXDLIN(  36)										int i13 = (_g30 - 1);
HXDLIN(  36)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXDLIN(  36)									int _g32 = 0;
HXDLIN(  36)									int _g33 = len3;
HXDLIN(  36)									while((_g32 < _g33)){
HXDLIN(  36)										_g32 = (_g32 + 1);
HXDLIN(  36)										int i14 = (_g32 - 1);
HXDLIN(  36)										{
HXDLIN(  36)											 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN(  36)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  36)											{
HXDLIN(  36)												int _g34 = 0;
HXDLIN(  36)												int _g35 = i14;
HXDLIN(  36)												while((_g34 < _g35)){
HXDLIN(  36)													_g34 = (_g34 + 1);
HXDLIN(  36)													int i15 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE(  36)											if (::hx::IsNull( prev1 )) {
HXDLIN(  36)												b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  36)												l1 = null();
            											}
            											else {
HXDLIN(  36)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  36)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  36)						undoImage4 = b8;
            					}
            					break;
            				}
HXDLIN(  36)				this33->image = undoImage4;
HXDLIN(  36)				this33->width = width1;
HXDLIN(  36)				this33->height = height1;
HXDLIN(  36)				this33->imageType = ( (int)(imageType1) );
HXDLIN(  36)				undoImage3 = this33;
HXDLIN(  36)				{
HXDLIN(  36)					int rectLeft1 = xIter31->start;
HXDLIN(  36)					int rectTop1 = yIter31->start;
HXDLIN(  36)					int rectRight1 = xIter31->max;
HXDLIN(  36)					bool forceClear1 = false;
HXDLIN(  36)					{
HXDLIN(  36)						int _g36 = rectTop1;
HXDLIN(  36)						int _g37 = yIter31->max;
HXDLIN(  36)						while((_g36 < _g37)){
HXDLIN(  36)							_g36 = (_g36 + 1);
HXDLIN(  36)							int dy2 = (_g36 - 1);
HXDLIN(  36)							{
HXDLIN(  36)								int _g38 = rectLeft1;
HXDLIN(  36)								int _g39 = rectRight1;
HXDLIN(  36)								while((_g38 < _g39)){
HXDLIN(  36)									_g38 = (_g38 + 1);
HXDLIN(  36)									int dx2 = (_g38 - 1);
HXDLIN(  36)									::Dynamic this35 = this1->image;
HXDLIN(  36)									int index4;
HXDLIN(  36)									if (this1->useVirtualPos) {
HXDLIN(  36)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx2) - this1->virtualX));
            									}
            									else {
HXDLIN(  36)										index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * this1->width) + dx2)) ));
            									}
HXDLIN(  36)									int c3 = ::iterMagic::Iimg_obj::get(this35,index4);
HXDLIN(  36)									int col1;
HXDLIN(  36)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)										col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXDLIN(  36)										col1 = c3;
            									}
HXDLIN(  36)									bool _hx_tmp8;
HXDLIN(  36)									if (this1->useMask) {
HXDLIN(  36)										_hx_tmp8 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN(  36)										_hx_tmp8 = false;
            									}
HXDLIN(  36)									if (_hx_tmp8) {
HXDLIN(  36)										 ::pi_xy::ImageStruct this36 = this1->mask;
HXDLIN(  36)										::Dynamic this37 = this36->image;
HXDLIN(  36)										int index5;
HXDLIN(  36)										if (this36->useVirtualPos) {
HXDLIN(  36)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this36->virtualY) * ( (Float)(this36->width) )) + dx2) - this36->virtualX));
            										}
            										else {
HXDLIN(  36)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this36->width) + dx2)) ));
            										}
HXDLIN(  36)										int c4 = ::iterMagic::Iimg_obj::get(this37,index5);
HXDLIN(  36)										int v4;
HXDLIN(  36)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)											v4 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXDLIN(  36)											v4 = c4;
            										}
HXDLIN(  36)										int maskPixel1 = v4;
HXDLIN(  36)										int this38 = col1;
HXDLIN(  36)										if ((maskPixel1 == 0)) {
HXDLIN(  36)											col1 = this38;
            										}
            										else {
HXDLIN(  36)											Float m01;
HXDLIN(  36)											int this39 = ((maskPixel1 >> 24) & 255);
HXDLIN(  36)											if ((this39 == 0)) {
HXDLIN(  36)												m01 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m01 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float m11;
HXDLIN(  36)											int this40 = ((maskPixel1 >> 16) & 255);
HXDLIN(  36)											if ((this40 == 0)) {
HXDLIN(  36)												m11 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m11 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float m21;
HXDLIN(  36)											int this41 = ((maskPixel1 >> 8) & 255);
HXDLIN(  36)											if ((this41 == 0)) {
HXDLIN(  36)												m21 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m21 = (( (Float)(this41) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float m31;
HXDLIN(  36)											int this42 = (maskPixel1 & 255);
HXDLIN(  36)											if ((this42 == 0)) {
HXDLIN(  36)												m31 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m31 = (( (Float)(this42) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this38 >> 24) & 255)) )));
HXDLIN(  36)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this38 >> 16) & 255)) )));
HXDLIN(  36)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this38 >> 8) & 255)) )));
HXDLIN(  36)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this38 & 255)) )));
HXDLIN(  36)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  36)									if ((col1 != 0)) {
HXDLIN(  36)										int x4 = (dx2 - rectLeft1);
HXDLIN(  36)										int y4 = (dy2 - rectTop1);
HXDLIN(  36)										int c5 = col1;
HXDLIN(  36)										bool _hx_tmp9;
HXDLIN(  36)										if ((((c5 >> 24) & 255) < 254)) {
HXDLIN(  36)											_hx_tmp9 = undoImage3->transparent;
            										}
            										else {
HXDLIN(  36)											_hx_tmp9 = false;
            										}
HXDLIN(  36)										if (_hx_tmp9) {
HXDLIN(  36)											int location2;
HXDLIN(  36)											if (undoImage3->useVirtualPos) {
HXDLIN(  36)												location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXDLIN(  36)												location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN(  36)											int this43 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN(  36)											int this44;
HXDLIN(  36)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)												this44 = ((((((this43 >> 24) & 255) << 24) | ((this43 & 255) << 16)) | (((this43 >> 8) & 255) << 8)) | ((this43 >> 16) & 255));
            											}
            											else {
HXDLIN(  36)												this44 = this43;
            											}
HXDLIN(  36)											Float a12;
HXDLIN(  36)											int this45 = ((this44 >> 24) & 255);
HXDLIN(  36)											if ((this45 == 0)) {
HXDLIN(  36)												a12 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												a12 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float r12;
HXDLIN(  36)											int this46 = ((this44 >> 16) & 255);
HXDLIN(  36)											if ((this46 == 0)) {
HXDLIN(  36)												r12 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												r12 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float g12;
HXDLIN(  36)											int this47 = ((this44 >> 8) & 255);
HXDLIN(  36)											if ((this47 == 0)) {
HXDLIN(  36)												g12 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												g12 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float b13;
HXDLIN(  36)											int this48 = (this44 & 255);
HXDLIN(  36)											if ((this48 == 0)) {
HXDLIN(  36)												b13 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												b13 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float a22;
HXDLIN(  36)											int this49 = ((col1 >> 24) & 255);
HXDLIN(  36)											if ((this49 == 0)) {
HXDLIN(  36)												a22 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												a22 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float r22;
HXDLIN(  36)											int this50 = ((col1 >> 16) & 255);
HXDLIN(  36)											if ((this50 == 0)) {
HXDLIN(  36)												r22 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												r22 = (( (Float)(this50) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float g22;
HXDLIN(  36)											int this51 = ((col1 >> 8) & 255);
HXDLIN(  36)											if ((this51 == 0)) {
HXDLIN(  36)												g22 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												g22 = (( (Float)(this51) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float b23;
HXDLIN(  36)											int this52 = (col1 & 255);
HXDLIN(  36)											if ((this52 == 0)) {
HXDLIN(  36)												b23 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												b23 = (( (Float)(this52) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  36)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  36)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  36)											int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  36)											int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  36)											int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN(  36)											{
HXDLIN(  36)												int _hx_tmp10;
HXDLIN(  36)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)													_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXDLIN(  36)													_hx_tmp10 = blended2;
            												}
HXDLIN(  36)												::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            											}
            										}
            										else {
HXDLIN(  36)											::Dynamic this53 = undoImage3->image;
HXDLIN(  36)											int index6;
HXDLIN(  36)											if (undoImage3->useVirtualPos) {
HXDLIN(  36)												index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXDLIN(  36)												index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN(  36)											int _hx_tmp11;
HXDLIN(  36)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)												_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXDLIN(  36)												_hx_tmp11 = c5;
            											}
HXDLIN(  36)											::iterMagic::Iimg_obj::set(this53,index6,_hx_tmp11);
            										}
            									}
            									else {
HXDLIN(  36)										if (forceClear1) {
HXDLIN(  36)											::Dynamic this54 = undoImage3->image;
HXDLIN(  36)											int x5 = (dx2 - rectLeft1);
HXDLIN(  36)											int y5 = (dy2 - rectTop1);
HXDLIN(  36)											int index7;
HXDLIN(  36)											if (undoImage3->useVirtualPos) {
HXDLIN(  36)												index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            											}
            											else {
HXDLIN(  36)												index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            											}
HXDLIN(  36)											::iterMagic::Iimg_obj::set(this54,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  36)			bool found1 = false;
HXDLIN(  36)			{
HXDLIN(  36)				int _g_min2 = xIter31->start;
HXDLIN(  36)				int _g_max2 = xIter31->max;
HXDLIN(  36)				while((_g_min2 < _g_max2)){
HXDLIN(  36)					_g_min2 = (_g_min2 + 1);
HXDLIN(  36)					int px1 = (_g_min2 - 1);
HXDLIN(  36)					Float pcx1 = (( (Float)(px1) ) - cx);
HXLINE( 619)					found1 = false;
HXLINE(  36)					{
HXDLIN(  36)						int _g_min3 = yIter31->start;
HXDLIN(  36)						int _g_max3 = yIter31->max;
HXDLIN(  36)						while((_g_min3 < _g_max3)){
HXDLIN(  36)							_g_min3 = (_g_min3 + 1);
HXDLIN(  36)							int py1 = (_g_min3 - 1);
HXDLIN(  36)							Float pcy1 = (( (Float)(py1) ) - cy);
HXDLIN(  36)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN(  36)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN(  36)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN(  36)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN(  36)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  36)							bool _hx_tmp12;
HXDLIN(  36)							bool _hx_tmp13;
HXDLIN(  36)							if ((ratioA1 >= 0)) {
HXDLIN(  36)								_hx_tmp13 = (ratioB1 >= 0);
            							}
            							else {
HXDLIN(  36)								_hx_tmp13 = false;
            							}
HXDLIN(  36)							if (_hx_tmp13) {
HXDLIN(  36)								_hx_tmp12 = (ratioC1 >= 0);
            							}
            							else {
HXDLIN(  36)								_hx_tmp12 = false;
            							}
HXDLIN(  36)							if (_hx_tmp12) {
HXDLIN(  36)								int i16 = ::Std_obj::_hx_int((( (Float)(aA1) ) * (softC * ratioB1)));
HXDLIN(  36)								if ((i16 > 255)) {
HXLINE(  24)									i16 = 255;
            								}
HXLINE(  36)								if ((i16 < 0)) {
HXLINE(  25)									i16 = 0;
            								}
HXLINE(  36)								int a9 = i16;
HXDLIN(  36)								int i17 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN(  36)								if ((i17 > 255)) {
HXLINE(  24)									i17 = 255;
            								}
HXLINE(  36)								if ((i17 < 0)) {
HXLINE(  25)									i17 = 0;
            								}
HXLINE(  36)								int r6 = i17;
HXDLIN(  36)								int i18 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN(  36)								if ((i18 > 255)) {
HXLINE(  24)									i18 = 255;
            								}
HXLINE(  36)								if ((i18 < 0)) {
HXLINE(  25)									i18 = 0;
            								}
HXLINE(  36)								int g6 = i18;
HXDLIN(  36)								int i19 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN(  36)								if ((i19 > 255)) {
HXLINE(  24)									i19 = 255;
            								}
HXLINE(  36)								if ((i19 < 0)) {
HXLINE(  25)									i19 = 0;
            								}
HXLINE(  36)								int b10 = i19;
HXDLIN(  36)								{
HXDLIN(  36)									int location3;
HXDLIN(  36)									if (this1->useVirtualPos) {
HXDLIN(  36)										location3 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            									}
            									else {
HXDLIN(  36)										location3 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            									}
HXDLIN(  36)									bool _hx_tmp14;
HXDLIN(  36)									if (this1->transparent) {
HXDLIN(  36)										_hx_tmp14 = (a9 < 254);
            									}
            									else {
HXDLIN(  36)										_hx_tmp14 = false;
            									}
HXDLIN(  36)									if (_hx_tmp14) {
HXDLIN(  36)										int this55 = ::iterMagic::Iimg_obj::get(this1->image,location3);
HXDLIN(  36)										int old1;
HXDLIN(  36)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)											old1 = ((((((this55 >> 24) & 255) << 24) | ((this55 & 255) << 16)) | (((this55 >> 8) & 255) << 8)) | ((this55 >> 16) & 255));
            										}
            										else {
HXDLIN(  36)											old1 = this55;
            										}
HXDLIN(  36)										int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN(  36)										Float a13;
HXDLIN(  36)										int this56 = ((old1 >> 24) & 255);
HXDLIN(  36)										if ((this56 == 0)) {
HXDLIN(  36)											a13 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											a13 = (( (Float)(this56) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float r13;
HXDLIN(  36)										int this57 = ((old1 >> 16) & 255);
HXDLIN(  36)										if ((this57 == 0)) {
HXDLIN(  36)											r13 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											r13 = (( (Float)(this57) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float g13;
HXDLIN(  36)										int this58 = ((old1 >> 8) & 255);
HXDLIN(  36)										if ((this58 == 0)) {
HXDLIN(  36)											g13 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											g13 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float b14;
HXDLIN(  36)										int this59 = (old1 & 255);
HXDLIN(  36)										if ((this59 == 0)) {
HXDLIN(  36)											b14 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											b14 = (( (Float)(this59) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float a23;
HXDLIN(  36)										int this60 = ((rhs1 >> 24) & 255);
HXDLIN(  36)										if ((this60 == 0)) {
HXDLIN(  36)											a23 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											a23 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float r23;
HXDLIN(  36)										int this61 = ((rhs1 >> 16) & 255);
HXDLIN(  36)										if ((this61 == 0)) {
HXDLIN(  36)											r23 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											r23 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float g23;
HXDLIN(  36)										int this62 = ((rhs1 >> 8) & 255);
HXDLIN(  36)										if ((this62 == 0)) {
HXDLIN(  36)											g23 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											g23 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float b24;
HXDLIN(  36)										int this63 = (rhs1 & 255);
HXDLIN(  36)										if ((this63 == 0)) {
HXDLIN(  36)											b24 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											b24 = (( (Float)(this63) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  36)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  36)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  36)										int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN(  36)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  36)										int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN(  36)										{
HXDLIN(  36)											int _hx_tmp15;
HXDLIN(  36)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)												_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXDLIN(  36)												_hx_tmp15 = blended3;
            											}
HXDLIN(  36)											::iterMagic::Iimg_obj::set(this1->image,location3,_hx_tmp15);
            										}
            									}
            									else {
HXDLIN(  36)										int value1;
HXDLIN(  36)										if (this1->isLittle) {
HXDLIN(  36)											value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXDLIN(  36)											value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            										}
HXDLIN(  36)										::iterMagic::Iimg_obj::set(this1->image,location3,value1);
            									}
            								}
HXLINE( 633)								found1 = true;
            							}
            							else {
HXDLIN(  36)								if (found1) {
HXDLIN(  36)									goto _hx_goto_32;
            								}
            							}
            						}
            						_hx_goto_32:;
            					}
            				}
            			}
HXDLIN(  36)			if ((hasHit == false)) {
HXDLIN(  36)				 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,bx,by,cx,cy,true);
HXDLIN(  36)				if (hasUndo1) {
HXDLIN(  36)					v5->undoImage = undoImage3;
HXDLIN(  36)					v5->undoX = xIter31->start;
HXDLIN(  36)					v5->undoY = yIter31->start;
            				}
            			}
            		}
HXDLIN(  36)		{
HXDLIN(  36)			bool hasUndo2 = false;
HXDLIN(  36)			int aA2 = ((color >> 24) & 255);
HXDLIN(  36)			int rA2 = ((color >> 16) & 255);
HXDLIN(  36)			int gA2 = ((color >> 8) & 255);
HXDLIN(  36)			int bA2 = (color & 255);
HXDLIN(  36)			Float bcx2 = (cx - dx);
HXDLIN(  36)			Float bcy2 = (cy - dy);
HXDLIN(  36)			Float acx2 = (ex - dx);
HXDLIN(  36)			Float acy2 = (ey - dy);
HXDLIN(  36)			Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN(  36)			Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN(  36)			Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN(  36)			Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN(  36)			 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  36)			if ((ex > cx)) {
HXDLIN(  36)				if ((ex > dx)) {
HXDLIN(  36)					int min8;
HXDLIN(  36)					if ((cx > dx)) {
HXDLIN(  36)						min8 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN(  36)						min8 = ::Math_obj::floor(cx);
            					}
HXDLIN(  36)					int ii_min16 = min8;
HXDLIN(  36)					int ii_max16 = ::Math_obj::ceil(ex);
HXDLIN(  36)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            				}
            				else {
HXDLIN(  36)					int ii_min17 = ::Math_obj::floor(cx);
HXDLIN(  36)					int ii_max17 = ::Math_obj::ceil(dx);
HXDLIN(  36)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            				}
            			}
            			else {
HXDLIN(  36)				if ((cx > dx)) {
HXDLIN(  36)					int min9;
HXDLIN(  36)					if ((ex > dx)) {
HXDLIN(  36)						min9 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN(  36)						min9 = ::Math_obj::ceil(ex);
            					}
HXDLIN(  36)					int ii_min18 = min9;
HXDLIN(  36)					int ii_max18 = ::Math_obj::ceil(cx);
HXDLIN(  36)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            				}
            				else {
HXDLIN(  36)					int ii_min19 = ::Math_obj::floor(ex);
HXDLIN(  36)					int ii_max19 = ::Math_obj::ceil(dx);
HXDLIN(  36)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            				}
            			}
HXDLIN(  36)			 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  36)			if ((ey > cy)) {
HXDLIN(  36)				if ((ey > dy)) {
HXDLIN(  36)					int min10;
HXDLIN(  36)					if ((cy > dy)) {
HXDLIN(  36)						min10 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN(  36)						min10 = ::Math_obj::floor(cy);
            					}
HXDLIN(  36)					int ii_min20 = min10;
HXDLIN(  36)					int ii_max20 = ::Math_obj::ceil(ey);
HXDLIN(  36)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            				}
            				else {
HXDLIN(  36)					int ii_min21 = ::Math_obj::floor(cy);
HXDLIN(  36)					int ii_max21 = ::Math_obj::ceil(dy);
HXDLIN(  36)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            				}
            			}
            			else {
HXDLIN(  36)				if ((cy > dy)) {
HXDLIN(  36)					int min11;
HXDLIN(  36)					if ((ey > dy)) {
HXDLIN(  36)						min11 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN(  36)						min11 = ::Math_obj::ceil(ey);
            					}
HXDLIN(  36)					int ii_min22 = min11;
HXDLIN(  36)					int ii_max22 = ::Math_obj::ceil(cy);
HXDLIN(  36)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            				}
            				else {
HXDLIN(  36)					int ii_min23 = ::Math_obj::floor(ey);
HXDLIN(  36)					int ii_max23 = ::Math_obj::ceil(dy);
HXDLIN(  36)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            				}
            			}
HXDLIN(  36)			 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  36)			if (hasUndo2) {
HXDLIN(  36)				int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  36)				int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  36)				 ::Dynamic imageType2 = null();
HXDLIN(  36)				 ::pi_xy::ImageStruct this64 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  36)				if (::hx::IsNull( imageType2 )) {
HXLINE(  54)					imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  36)				::Dynamic undoImage7;
HXDLIN(  36)				switch((int)(( (int)(imageType2) ))){
            					case (int)0: {
HXDLIN(  36)						 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::BytesImg b16 = byt2;
HXDLIN(  36)						{
HXDLIN(  36)							b16->width = width2;
HXDLIN(  36)							b16->height = height2;
HXDLIN(  36)							b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  36)							b16->data = ::haxe::io::Bytes_obj::alloc((b16->length * 4));
HXDLIN(  36)							{
HXDLIN(  36)								int len4 = b16->length;
HXDLIN(  36)								int w2 = 0;
HXDLIN(  36)								{
HXDLIN(  36)									int _g40 = 0;
HXDLIN(  36)									int _g41 = b16->height;
HXDLIN(  36)									while((_g40 < _g41)){
HXDLIN(  36)										_g40 = (_g40 + 1);
HXDLIN(  36)										int y6 = (_g40 - 1);
HXDLIN(  36)										{
HXDLIN(  36)											int _g42 = 0;
HXDLIN(  36)											int _g43 = b16->width;
HXDLIN(  36)											while((_g42 < _g43)){
HXDLIN(  36)												_g42 = (_g42 + 1);
HXDLIN(  36)												int x6 = (_g42 - 1);
HXDLIN(  36)												{
HXDLIN(  36)													w2 = (w2 + 1);
HXDLIN(  36)													b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  36)												{
HXDLIN(  36)													w2 = (w2 + 1);
HXDLIN(  36)													b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  36)												{
HXDLIN(  36)													w2 = (w2 + 1);
HXDLIN(  36)													b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  36)												{
HXDLIN(  36)													w2 = (w2 + 1);
HXDLIN(  36)													b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  36)						undoImage7 = b16;
            					}
            					break;
            					case (int)1: {
HXDLIN(  36)						 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::ArrIntImg a14 = arrI2;
HXDLIN(  36)						{
HXDLIN(  36)							a14->width = width2;
HXDLIN(  36)							a14->height = height2;
HXDLIN(  36)							a14->data = ::Array_obj< int >::__new(0);
HXDLIN(  36)							a14->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  36)							{
HXDLIN(  36)								int _g44 = 0;
HXDLIN(  36)								int _g45 = a14->length;
HXDLIN(  36)								while((_g44 < _g45)){
HXDLIN(  36)									_g44 = (_g44 + 1);
HXDLIN(  36)									int i20 = (_g44 - 1);
HXDLIN(  36)									a14->data[i20] = 0;
            								}
            							}
            						}
HXDLIN(  36)						undoImage7 = a14;
            					}
            					break;
            					case (int)2: {
HXDLIN(  36)						 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::U32ArrImg b17 = u32a2;
HXDLIN(  36)						{
HXDLIN(  36)							b17->width = width2;
HXDLIN(  36)							b17->height = height2;
HXDLIN(  36)							b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  36)							int size2 = (b17->length * 4);
HXDLIN(  36)							b17->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  36)							{
HXDLIN(  36)								int _g46 = 0;
HXDLIN(  36)								int _g47 = b17->length;
HXDLIN(  36)								while((_g46 < _g47)){
HXDLIN(  36)									_g46 = (_g46 + 1);
HXDLIN(  36)									int i21 = (_g46 - 1);
HXDLIN(  36)									{
HXDLIN(  36)										 ::haxe::io::ArrayBufferViewImpl this65 = b17->data;
HXDLIN(  36)										bool undoImage8;
HXDLIN(  36)										if ((i21 >= 0)) {
HXDLIN(  36)											undoImage8 = (i21 < (this65->byteLength >> 2));
            										}
            										else {
HXDLIN(  36)											undoImage8 = false;
            										}
HXDLIN(  36)										if (undoImage8) {
HXDLIN(  36)											 ::haxe::io::Bytes _this2 = this65->bytes;
HXDLIN(  36)											int pos2 = ((i21 << 2) + this65->byteOffset);
HXDLIN(  36)											_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  36)											_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  36)											_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  36)											_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  36)						undoImage7 = b17;
            					}
            					break;
            					case (int)3: {
HXDLIN(  36)						 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::VecIntImg v6 = vec2;
HXDLIN(  36)						{
HXDLIN(  36)							v6->width = width2;
HXDLIN(  36)							v6->height = height2;
HXDLIN(  36)							v6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  36)							v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN(  36)							{
HXDLIN(  36)								int _g48 = 0;
HXDLIN(  36)								int _g49 = v6->length;
HXDLIN(  36)								while((_g48 < _g49)){
HXDLIN(  36)									_g48 = (_g48 + 1);
HXDLIN(  36)									int i22 = (_g48 - 1);
HXDLIN(  36)									v6->data->__unsafe_set(i22,0);
            								}
            							}
            						}
HXDLIN(  36)						undoImage7 = v6;
            					}
            					break;
            					case (int)4: {
HXDLIN(  36)						 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::StackIntImg b18 = sInt2;
HXDLIN(  36)						{
HXDLIN(  36)							b18->width = width2;
HXDLIN(  36)							b18->height = height2;
HXDLIN(  36)							b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  36)							b18->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  36)							{
HXDLIN(  36)								int len5 = b18->length;
HXDLIN(  36)								 ::haxe::ds::GenericStack_Int d2 = b18->data;
HXDLIN(  36)								if (::hx::IsNull( d2->head )) {
HXDLIN(  36)									int _g50 = 0;
HXDLIN(  36)									int _g51 = len5;
HXDLIN(  36)									while((_g50 < _g51)){
HXDLIN(  36)										_g50 = (_g50 + 1);
HXDLIN(  36)										int i23 = (_g50 - 1);
HXDLIN(  36)										d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            									}
            								}
            								else {
HXDLIN(  36)									int _g52 = 0;
HXDLIN(  36)									int _g53 = len5;
HXDLIN(  36)									while((_g52 < _g53)){
HXDLIN(  36)										_g52 = (_g52 + 1);
HXDLIN(  36)										int i24 = (_g52 - 1);
HXDLIN(  36)										{
HXDLIN(  36)											 ::haxe::ds::GenericCell_Int l2 = b18->data->head;
HXDLIN(  36)											 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  36)											{
HXDLIN(  36)												int _g54 = 0;
HXDLIN(  36)												int _g55 = i24;
HXDLIN(  36)												while((_g54 < _g55)){
HXDLIN(  36)													_g54 = (_g54 + 1);
HXDLIN(  36)													int i25 = (_g54 - 1);
HXLINE( 345)													prev2 = l2;
HXLINE( 346)													l2 = l2->next;
            												}
            											}
HXLINE(  36)											if (::hx::IsNull( prev2 )) {
HXDLIN(  36)												b18->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  36)												l2 = null();
            											}
            											else {
HXDLIN(  36)												prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  36)												l2 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  36)						undoImage7 = b18;
            					}
            					break;
            				}
HXDLIN(  36)				this64->image = undoImage7;
HXDLIN(  36)				this64->width = width2;
HXDLIN(  36)				this64->height = height2;
HXDLIN(  36)				this64->imageType = ( (int)(imageType2) );
HXDLIN(  36)				undoImage6 = this64;
HXDLIN(  36)				{
HXDLIN(  36)					int rectLeft2 = xIter32->start;
HXDLIN(  36)					int rectTop2 = yIter32->start;
HXDLIN(  36)					int rectRight2 = xIter32->max;
HXDLIN(  36)					bool forceClear2 = false;
HXDLIN(  36)					{
HXDLIN(  36)						int _g56 = rectTop2;
HXDLIN(  36)						int _g57 = yIter32->max;
HXDLIN(  36)						while((_g56 < _g57)){
HXDLIN(  36)							_g56 = (_g56 + 1);
HXDLIN(  36)							int dy3 = (_g56 - 1);
HXDLIN(  36)							{
HXDLIN(  36)								int _g58 = rectLeft2;
HXDLIN(  36)								int _g59 = rectRight2;
HXDLIN(  36)								while((_g58 < _g59)){
HXDLIN(  36)									_g58 = (_g58 + 1);
HXDLIN(  36)									int dx3 = (_g58 - 1);
HXDLIN(  36)									::Dynamic this66 = this1->image;
HXDLIN(  36)									int index8;
HXDLIN(  36)									if (this1->useVirtualPos) {
HXDLIN(  36)										index8 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx3) - this1->virtualX));
            									}
            									else {
HXDLIN(  36)										index8 = ::Std_obj::_hx_int(( (Float)(((dy3 * this1->width) + dx3)) ));
            									}
HXDLIN(  36)									int c6 = ::iterMagic::Iimg_obj::get(this66,index8);
HXDLIN(  36)									int col2;
HXDLIN(  36)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)										col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            									}
            									else {
HXDLIN(  36)										col2 = c6;
            									}
HXDLIN(  36)									bool _hx_tmp16;
HXDLIN(  36)									if (this1->useMask) {
HXDLIN(  36)										_hx_tmp16 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN(  36)										_hx_tmp16 = false;
            									}
HXDLIN(  36)									if (_hx_tmp16) {
HXDLIN(  36)										 ::pi_xy::ImageStruct this67 = this1->mask;
HXDLIN(  36)										::Dynamic this68 = this67->image;
HXDLIN(  36)										int index9;
HXDLIN(  36)										if (this67->useVirtualPos) {
HXDLIN(  36)											index9 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this67->virtualY) * ( (Float)(this67->width) )) + dx3) - this67->virtualX));
            										}
            										else {
HXDLIN(  36)											index9 = ::Std_obj::_hx_int(( (Float)(((dy3 * this67->width) + dx3)) ));
            										}
HXDLIN(  36)										int c7 = ::iterMagic::Iimg_obj::get(this68,index9);
HXDLIN(  36)										int v7;
HXDLIN(  36)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)											v7 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            										}
            										else {
HXDLIN(  36)											v7 = c7;
            										}
HXDLIN(  36)										int maskPixel2 = v7;
HXDLIN(  36)										int this69 = col2;
HXDLIN(  36)										if ((maskPixel2 == 0)) {
HXDLIN(  36)											col2 = this69;
            										}
            										else {
HXDLIN(  36)											Float m02;
HXDLIN(  36)											int this70 = ((maskPixel2 >> 24) & 255);
HXDLIN(  36)											if ((this70 == 0)) {
HXDLIN(  36)												m02 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m02 = (( (Float)(this70) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float m12;
HXDLIN(  36)											int this71 = ((maskPixel2 >> 16) & 255);
HXDLIN(  36)											if ((this71 == 0)) {
HXDLIN(  36)												m12 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m12 = (( (Float)(this71) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float m22;
HXDLIN(  36)											int this72 = ((maskPixel2 >> 8) & 255);
HXDLIN(  36)											if ((this72 == 0)) {
HXDLIN(  36)												m22 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m22 = (( (Float)(this72) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float m32;
HXDLIN(  36)											int this73 = (maskPixel2 & 255);
HXDLIN(  36)											if ((this73 == 0)) {
HXDLIN(  36)												m32 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m32 = (( (Float)(this73) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this69 >> 24) & 255)) )));
HXDLIN(  36)											int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this69 >> 16) & 255)) )));
HXDLIN(  36)											int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this69 >> 8) & 255)) )));
HXDLIN(  36)											int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this69 & 255)) )));
HXDLIN(  36)											col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  36)									if ((col2 != 0)) {
HXDLIN(  36)										int x7 = (dx3 - rectLeft2);
HXDLIN(  36)										int y7 = (dy3 - rectTop2);
HXDLIN(  36)										int c8 = col2;
HXDLIN(  36)										bool _hx_tmp17;
HXDLIN(  36)										if ((((c8 >> 24) & 255) < 254)) {
HXDLIN(  36)											_hx_tmp17 = undoImage6->transparent;
            										}
            										else {
HXDLIN(  36)											_hx_tmp17 = false;
            										}
HXDLIN(  36)										if (_hx_tmp17) {
HXDLIN(  36)											int location4;
HXDLIN(  36)											if (undoImage6->useVirtualPos) {
HXDLIN(  36)												location4 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            											}
            											else {
HXDLIN(  36)												location4 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            											}
HXDLIN(  36)											int this74 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN(  36)											int this75;
HXDLIN(  36)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)												this75 = ((((((this74 >> 24) & 255) << 24) | ((this74 & 255) << 16)) | (((this74 >> 8) & 255) << 8)) | ((this74 >> 16) & 255));
            											}
            											else {
HXDLIN(  36)												this75 = this74;
            											}
HXDLIN(  36)											Float a15;
HXDLIN(  36)											int this76 = ((this75 >> 24) & 255);
HXDLIN(  36)											if ((this76 == 0)) {
HXDLIN(  36)												a15 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												a15 = (( (Float)(this76) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float r14;
HXDLIN(  36)											int this77 = ((this75 >> 16) & 255);
HXDLIN(  36)											if ((this77 == 0)) {
HXDLIN(  36)												r14 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												r14 = (( (Float)(this77) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float g14;
HXDLIN(  36)											int this78 = ((this75 >> 8) & 255);
HXDLIN(  36)											if ((this78 == 0)) {
HXDLIN(  36)												g14 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												g14 = (( (Float)(this78) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float b19;
HXDLIN(  36)											int this79 = (this75 & 255);
HXDLIN(  36)											if ((this79 == 0)) {
HXDLIN(  36)												b19 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												b19 = (( (Float)(this79) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float a24;
HXDLIN(  36)											int this80 = ((col2 >> 24) & 255);
HXDLIN(  36)											if ((this80 == 0)) {
HXDLIN(  36)												a24 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												a24 = (( (Float)(this80) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float r24;
HXDLIN(  36)											int this81 = ((col2 >> 16) & 255);
HXDLIN(  36)											if ((this81 == 0)) {
HXDLIN(  36)												r24 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												r24 = (( (Float)(this81) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float g24;
HXDLIN(  36)											int this82 = ((col2 >> 8) & 255);
HXDLIN(  36)											if ((this82 == 0)) {
HXDLIN(  36)												g24 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												g24 = (( (Float)(this82) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float b25;
HXDLIN(  36)											int this83 = (col2 & 255);
HXDLIN(  36)											if ((this83 == 0)) {
HXDLIN(  36)												b25 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												b25 = (( (Float)(this83) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float a34 = (a15 * (( (Float)(1) ) - a24));
HXDLIN(  36)											int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  36)											int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  36)											int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a34) + (b25 * a24))));
HXDLIN(  36)											int a16 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  36)											int blended4 = ((((a16 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN(  36)											{
HXDLIN(  36)												int _hx_tmp18;
HXDLIN(  36)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)													_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            												}
            												else {
HXDLIN(  36)													_hx_tmp18 = blended4;
            												}
HXDLIN(  36)												::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            											}
            										}
            										else {
HXDLIN(  36)											::Dynamic this84 = undoImage6->image;
HXDLIN(  36)											int index10;
HXDLIN(  36)											if (undoImage6->useVirtualPos) {
HXDLIN(  36)												index10 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            											}
            											else {
HXDLIN(  36)												index10 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            											}
HXDLIN(  36)											int _hx_tmp19;
HXDLIN(  36)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)												_hx_tmp19 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            											}
            											else {
HXDLIN(  36)												_hx_tmp19 = c8;
            											}
HXDLIN(  36)											::iterMagic::Iimg_obj::set(this84,index10,_hx_tmp19);
            										}
            									}
            									else {
HXDLIN(  36)										if (forceClear2) {
HXDLIN(  36)											::Dynamic this85 = undoImage6->image;
HXDLIN(  36)											int x8 = (dx3 - rectLeft2);
HXDLIN(  36)											int y8 = (dy3 - rectTop2);
HXDLIN(  36)											int index11;
HXDLIN(  36)											if (undoImage6->useVirtualPos) {
HXDLIN(  36)												index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            											}
            											else {
HXDLIN(  36)												index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            											}
HXDLIN(  36)											::iterMagic::Iimg_obj::set(this85,index11,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  36)			bool found2 = false;
HXDLIN(  36)			{
HXDLIN(  36)				int _g_min4 = xIter32->start;
HXDLIN(  36)				int _g_max4 = xIter32->max;
HXDLIN(  36)				while((_g_min4 < _g_max4)){
HXDLIN(  36)					_g_min4 = (_g_min4 + 1);
HXDLIN(  36)					int px2 = (_g_min4 - 1);
HXDLIN(  36)					Float pcx2 = (( (Float)(px2) ) - dx);
HXLINE( 619)					found2 = false;
HXLINE(  36)					{
HXDLIN(  36)						int _g_min5 = yIter32->start;
HXDLIN(  36)						int _g_max5 = yIter32->max;
HXDLIN(  36)						while((_g_min5 < _g_max5)){
HXDLIN(  36)							_g_min5 = (_g_min5 + 1);
HXDLIN(  36)							int py2 = (_g_min5 - 1);
HXDLIN(  36)							Float pcy2 = (( (Float)(py2) ) - dy);
HXDLIN(  36)							Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN(  36)							Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN(  36)							Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN(  36)							Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN(  36)							Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN(  36)							bool _hx_tmp20;
HXDLIN(  36)							bool _hx_tmp21;
HXDLIN(  36)							if ((ratioA2 >= 0)) {
HXDLIN(  36)								_hx_tmp21 = (ratioB2 >= 0);
            							}
            							else {
HXDLIN(  36)								_hx_tmp21 = false;
            							}
HXDLIN(  36)							if (_hx_tmp21) {
HXDLIN(  36)								_hx_tmp20 = (ratioC2 >= 0);
            							}
            							else {
HXDLIN(  36)								_hx_tmp20 = false;
            							}
HXDLIN(  36)							if (_hx_tmp20) {
HXDLIN(  36)								int i26 = ::Std_obj::_hx_int((( (Float)(aA2) ) * (softC * ratioB2)));
HXDLIN(  36)								if ((i26 > 255)) {
HXLINE(  24)									i26 = 255;
            								}
HXLINE(  36)								if ((i26 < 0)) {
HXLINE(  25)									i26 = 0;
            								}
HXLINE(  36)								int a17 = i26;
HXDLIN(  36)								int i27 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN(  36)								if ((i27 > 255)) {
HXLINE(  24)									i27 = 255;
            								}
HXLINE(  36)								if ((i27 < 0)) {
HXLINE(  25)									i27 = 0;
            								}
HXLINE(  36)								int r9 = i27;
HXDLIN(  36)								int i28 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN(  36)								if ((i28 > 255)) {
HXLINE(  24)									i28 = 255;
            								}
HXLINE(  36)								if ((i28 < 0)) {
HXLINE(  25)									i28 = 0;
            								}
HXLINE(  36)								int g9 = i28;
HXDLIN(  36)								int i29 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN(  36)								if ((i29 > 255)) {
HXLINE(  24)									i29 = 255;
            								}
HXLINE(  36)								if ((i29 < 0)) {
HXLINE(  25)									i29 = 0;
            								}
HXLINE(  36)								int b26 = i29;
HXDLIN(  36)								{
HXDLIN(  36)									int location5;
HXDLIN(  36)									if (this1->useVirtualPos) {
HXDLIN(  36)										location5 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this1->virtualY) * ( (Float)(this1->width) )) + px2) - this1->virtualX));
            									}
            									else {
HXDLIN(  36)										location5 = ::Std_obj::_hx_int(( (Float)(((py2 * this1->width) + px2)) ));
            									}
HXDLIN(  36)									bool _hx_tmp22;
HXDLIN(  36)									if (this1->transparent) {
HXDLIN(  36)										_hx_tmp22 = (a17 < 254);
            									}
            									else {
HXDLIN(  36)										_hx_tmp22 = false;
            									}
HXDLIN(  36)									if (_hx_tmp22) {
HXDLIN(  36)										int this86 = ::iterMagic::Iimg_obj::get(this1->image,location5);
HXDLIN(  36)										int old2;
HXDLIN(  36)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)											old2 = ((((((this86 >> 24) & 255) << 24) | ((this86 & 255) << 16)) | (((this86 >> 8) & 255) << 8)) | ((this86 >> 16) & 255));
            										}
            										else {
HXDLIN(  36)											old2 = this86;
            										}
HXDLIN(  36)										int rhs2 = ((((a17 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
HXDLIN(  36)										Float a18;
HXDLIN(  36)										int this87 = ((old2 >> 24) & 255);
HXDLIN(  36)										if ((this87 == 0)) {
HXDLIN(  36)											a18 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											a18 = (( (Float)(this87) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float r15;
HXDLIN(  36)										int this88 = ((old2 >> 16) & 255);
HXDLIN(  36)										if ((this88 == 0)) {
HXDLIN(  36)											r15 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											r15 = (( (Float)(this88) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float g15;
HXDLIN(  36)										int this89 = ((old2 >> 8) & 255);
HXDLIN(  36)										if ((this89 == 0)) {
HXDLIN(  36)											g15 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											g15 = (( (Float)(this89) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float b110;
HXDLIN(  36)										int this90 = (old2 & 255);
HXDLIN(  36)										if ((this90 == 0)) {
HXDLIN(  36)											b110 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											b110 = (( (Float)(this90) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float a25;
HXDLIN(  36)										int this91 = ((rhs2 >> 24) & 255);
HXDLIN(  36)										if ((this91 == 0)) {
HXDLIN(  36)											a25 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											a25 = (( (Float)(this91) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float r25;
HXDLIN(  36)										int this92 = ((rhs2 >> 16) & 255);
HXDLIN(  36)										if ((this92 == 0)) {
HXDLIN(  36)											r25 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											r25 = (( (Float)(this92) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float g25;
HXDLIN(  36)										int this93 = ((rhs2 >> 8) & 255);
HXDLIN(  36)										if ((this93 == 0)) {
HXDLIN(  36)											g25 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											g25 = (( (Float)(this93) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float b27;
HXDLIN(  36)										int this94 = (rhs2 & 255);
HXDLIN(  36)										if ((this94 == 0)) {
HXDLIN(  36)											b27 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											b27 = (( (Float)(this94) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float a35 = (a18 * (( (Float)(1) ) - a25));
HXDLIN(  36)										int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  36)										int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  36)										int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a35) + (b27 * a25))));
HXDLIN(  36)										int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  36)										int blended5 = ((((a19 << 24) | (r10 << 16)) | (g10 << 8)) | b28);
HXDLIN(  36)										{
HXDLIN(  36)											int _hx_tmp23;
HXDLIN(  36)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)												_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            											}
            											else {
HXDLIN(  36)												_hx_tmp23 = blended5;
            											}
HXDLIN(  36)											::iterMagic::Iimg_obj::set(this1->image,location5,_hx_tmp23);
            										}
            									}
            									else {
HXDLIN(  36)										int value2;
HXDLIN(  36)										if (this1->isLittle) {
HXDLIN(  36)											value2 = ((((a17 << 24) | (b26 << 16)) | (g9 << 8)) | r9);
            										}
            										else {
HXDLIN(  36)											value2 = ((((a17 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
            										}
HXDLIN(  36)										::iterMagic::Iimg_obj::set(this1->image,location5,value2);
            									}
            								}
HXLINE( 633)								found2 = true;
            							}
            							else {
HXDLIN(  36)								if (found2) {
HXDLIN(  36)									goto _hx_goto_44;
            								}
            							}
            						}
            						_hx_goto_44:;
            					}
            				}
            			}
HXDLIN(  36)			if ((hasHit == false)) {
HXDLIN(  36)				 ::pi_xy::algo::HitTri v8 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,cx,cy,dx,dy,true);
HXDLIN(  36)				if (hasUndo2) {
HXDLIN(  36)					v8->undoImage = undoImage6;
HXDLIN(  36)					v8->undoX = xIter32->start;
HXDLIN(  36)					v8->undoY = yIter32->start;
            				}
            			}
            		}
HXDLIN(  36)		{
HXDLIN(  36)			bool hasUndo3 = false;
HXDLIN(  36)			int aA3 = ((color >> 24) & 255);
HXDLIN(  36)			int rA3 = ((color >> 16) & 255);
HXDLIN(  36)			int gA3 = ((color >> 8) & 255);
HXDLIN(  36)			int bA3 = (color & 255);
HXDLIN(  36)			Float bcx3 = (dx - ax);
HXDLIN(  36)			Float bcy3 = (dy - ay);
HXDLIN(  36)			Float acx3 = (ex - ax);
HXDLIN(  36)			Float acy3 = (ey - ay);
HXDLIN(  36)			Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN(  36)			Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN(  36)			Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN(  36)			Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN(  36)			 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  36)			if ((ex > dx)) {
HXDLIN(  36)				if ((ex > ax)) {
HXDLIN(  36)					int min12;
HXDLIN(  36)					if ((dx > ax)) {
HXDLIN(  36)						min12 = ::Math_obj::floor(ax);
            					}
            					else {
HXDLIN(  36)						min12 = ::Math_obj::floor(dx);
            					}
HXDLIN(  36)					int ii_min24 = min12;
HXDLIN(  36)					int ii_max24 = ::Math_obj::ceil(ex);
HXDLIN(  36)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            				}
            				else {
HXDLIN(  36)					int ii_min25 = ::Math_obj::floor(dx);
HXDLIN(  36)					int ii_max25 = ::Math_obj::ceil(ax);
HXDLIN(  36)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            				}
            			}
            			else {
HXDLIN(  36)				if ((dx > ax)) {
HXDLIN(  36)					int min13;
HXDLIN(  36)					if ((ex > ax)) {
HXDLIN(  36)						min13 = ::Math_obj::floor(ax);
            					}
            					else {
HXDLIN(  36)						min13 = ::Math_obj::ceil(ex);
            					}
HXDLIN(  36)					int ii_min26 = min13;
HXDLIN(  36)					int ii_max26 = ::Math_obj::ceil(dx);
HXDLIN(  36)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            				}
            				else {
HXDLIN(  36)					int ii_min27 = ::Math_obj::floor(ex);
HXDLIN(  36)					int ii_max27 = ::Math_obj::ceil(ax);
HXDLIN(  36)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            				}
            			}
HXDLIN(  36)			 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  36)			if ((ey > dy)) {
HXDLIN(  36)				if ((ey > ay)) {
HXDLIN(  36)					int min14;
HXDLIN(  36)					if ((dy > ay)) {
HXDLIN(  36)						min14 = ::Math_obj::floor(ay);
            					}
            					else {
HXDLIN(  36)						min14 = ::Math_obj::floor(dy);
            					}
HXDLIN(  36)					int ii_min28 = min14;
HXDLIN(  36)					int ii_max28 = ::Math_obj::ceil(ey);
HXDLIN(  36)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            				}
            				else {
HXDLIN(  36)					int ii_min29 = ::Math_obj::floor(dy);
HXDLIN(  36)					int ii_max29 = ::Math_obj::ceil(ay);
HXDLIN(  36)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            				}
            			}
            			else {
HXDLIN(  36)				if ((dy > ay)) {
HXDLIN(  36)					int min15;
HXDLIN(  36)					if ((ey > ay)) {
HXDLIN(  36)						min15 = ::Math_obj::floor(ay);
            					}
            					else {
HXDLIN(  36)						min15 = ::Math_obj::ceil(ey);
            					}
HXDLIN(  36)					int ii_min30 = min15;
HXDLIN(  36)					int ii_max30 = ::Math_obj::ceil(dy);
HXDLIN(  36)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            				}
            				else {
HXDLIN(  36)					int ii_min31 = ::Math_obj::floor(ey);
HXDLIN(  36)					int ii_max31 = ::Math_obj::ceil(ay);
HXDLIN(  36)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            				}
            			}
HXDLIN(  36)			 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  36)			if (hasUndo3) {
HXDLIN(  36)				int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  36)				int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  36)				 ::Dynamic imageType3 = null();
HXDLIN(  36)				 ::pi_xy::ImageStruct this95 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  36)				if (::hx::IsNull( imageType3 )) {
HXLINE(  54)					imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  36)				::Dynamic undoImage10;
HXDLIN(  36)				switch((int)(( (int)(imageType3) ))){
            					case (int)0: {
HXDLIN(  36)						 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::BytesImg b29 = byt3;
HXDLIN(  36)						{
HXDLIN(  36)							b29->width = width3;
HXDLIN(  36)							b29->height = height3;
HXDLIN(  36)							b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  36)							b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN(  36)							{
HXDLIN(  36)								int len6 = b29->length;
HXDLIN(  36)								int w3 = 0;
HXDLIN(  36)								{
HXDLIN(  36)									int _g60 = 0;
HXDLIN(  36)									int _g61 = b29->height;
HXDLIN(  36)									while((_g60 < _g61)){
HXDLIN(  36)										_g60 = (_g60 + 1);
HXDLIN(  36)										int y9 = (_g60 - 1);
HXDLIN(  36)										{
HXDLIN(  36)											int _g62 = 0;
HXDLIN(  36)											int _g63 = b29->width;
HXDLIN(  36)											while((_g62 < _g63)){
HXDLIN(  36)												_g62 = (_g62 + 1);
HXDLIN(  36)												int x9 = (_g62 - 1);
HXDLIN(  36)												{
HXDLIN(  36)													w3 = (w3 + 1);
HXDLIN(  36)													b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  36)												{
HXDLIN(  36)													w3 = (w3 + 1);
HXDLIN(  36)													b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  36)												{
HXDLIN(  36)													w3 = (w3 + 1);
HXDLIN(  36)													b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  36)												{
HXDLIN(  36)													w3 = (w3 + 1);
HXDLIN(  36)													b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  36)						undoImage10 = b29;
            					}
            					break;
            					case (int)1: {
HXDLIN(  36)						 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::ArrIntImg a20 = arrI3;
HXDLIN(  36)						{
HXDLIN(  36)							a20->width = width3;
HXDLIN(  36)							a20->height = height3;
HXDLIN(  36)							a20->data = ::Array_obj< int >::__new(0);
HXDLIN(  36)							a20->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  36)							{
HXDLIN(  36)								int _g64 = 0;
HXDLIN(  36)								int _g65 = a20->length;
HXDLIN(  36)								while((_g64 < _g65)){
HXDLIN(  36)									_g64 = (_g64 + 1);
HXDLIN(  36)									int i30 = (_g64 - 1);
HXDLIN(  36)									a20->data[i30] = 0;
            								}
            							}
            						}
HXDLIN(  36)						undoImage10 = a20;
            					}
            					break;
            					case (int)2: {
HXDLIN(  36)						 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN(  36)						{
HXDLIN(  36)							b30->width = width3;
HXDLIN(  36)							b30->height = height3;
HXDLIN(  36)							b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  36)							int size3 = (b30->length * 4);
HXDLIN(  36)							b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  36)							{
HXDLIN(  36)								int _g66 = 0;
HXDLIN(  36)								int _g67 = b30->length;
HXDLIN(  36)								while((_g66 < _g67)){
HXDLIN(  36)									_g66 = (_g66 + 1);
HXDLIN(  36)									int i31 = (_g66 - 1);
HXDLIN(  36)									{
HXDLIN(  36)										 ::haxe::io::ArrayBufferViewImpl this96 = b30->data;
HXDLIN(  36)										bool undoImage11;
HXDLIN(  36)										if ((i31 >= 0)) {
HXDLIN(  36)											undoImage11 = (i31 < (this96->byteLength >> 2));
            										}
            										else {
HXDLIN(  36)											undoImage11 = false;
            										}
HXDLIN(  36)										if (undoImage11) {
HXDLIN(  36)											 ::haxe::io::Bytes _this3 = this96->bytes;
HXDLIN(  36)											int pos3 = ((i31 << 2) + this96->byteOffset);
HXDLIN(  36)											_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  36)											_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  36)											_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  36)											_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  36)						undoImage10 = b30;
            					}
            					break;
            					case (int)3: {
HXDLIN(  36)						 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::VecIntImg v9 = vec3;
HXDLIN(  36)						{
HXDLIN(  36)							v9->width = width3;
HXDLIN(  36)							v9->height = height3;
HXDLIN(  36)							v9->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  36)							v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN(  36)							{
HXDLIN(  36)								int _g68 = 0;
HXDLIN(  36)								int _g69 = v9->length;
HXDLIN(  36)								while((_g68 < _g69)){
HXDLIN(  36)									_g68 = (_g68 + 1);
HXDLIN(  36)									int i32 = (_g68 - 1);
HXDLIN(  36)									v9->data->__unsafe_set(i32,0);
            								}
            							}
            						}
HXDLIN(  36)						undoImage10 = v9;
            					}
            					break;
            					case (int)4: {
HXDLIN(  36)						 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  36)						 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN(  36)						{
HXDLIN(  36)							b31->width = width3;
HXDLIN(  36)							b31->height = height3;
HXDLIN(  36)							b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  36)							b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  36)							{
HXDLIN(  36)								int len7 = b31->length;
HXDLIN(  36)								 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN(  36)								if (::hx::IsNull( d3->head )) {
HXDLIN(  36)									int _g70 = 0;
HXDLIN(  36)									int _g71 = len7;
HXDLIN(  36)									while((_g70 < _g71)){
HXDLIN(  36)										_g70 = (_g70 + 1);
HXDLIN(  36)										int i33 = (_g70 - 1);
HXDLIN(  36)										d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            									}
            								}
            								else {
HXDLIN(  36)									int _g72 = 0;
HXDLIN(  36)									int _g73 = len7;
HXDLIN(  36)									while((_g72 < _g73)){
HXDLIN(  36)										_g72 = (_g72 + 1);
HXDLIN(  36)										int i34 = (_g72 - 1);
HXDLIN(  36)										{
HXDLIN(  36)											 ::haxe::ds::GenericCell_Int l3 = b31->data->head;
HXDLIN(  36)											 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  36)											{
HXDLIN(  36)												int _g74 = 0;
HXDLIN(  36)												int _g75 = i34;
HXDLIN(  36)												while((_g74 < _g75)){
HXDLIN(  36)													_g74 = (_g74 + 1);
HXDLIN(  36)													int i35 = (_g74 - 1);
HXLINE( 345)													prev3 = l3;
HXLINE( 346)													l3 = l3->next;
            												}
            											}
HXLINE(  36)											if (::hx::IsNull( prev3 )) {
HXDLIN(  36)												b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  36)												l3 = null();
            											}
            											else {
HXDLIN(  36)												prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  36)												l3 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  36)						undoImage10 = b31;
            					}
            					break;
            				}
HXDLIN(  36)				this95->image = undoImage10;
HXDLIN(  36)				this95->width = width3;
HXDLIN(  36)				this95->height = height3;
HXDLIN(  36)				this95->imageType = ( (int)(imageType3) );
HXDLIN(  36)				undoImage9 = this95;
HXDLIN(  36)				{
HXDLIN(  36)					int rectLeft3 = xIter33->start;
HXDLIN(  36)					int rectTop3 = yIter33->start;
HXDLIN(  36)					int rectRight3 = xIter33->max;
HXDLIN(  36)					bool forceClear3 = false;
HXDLIN(  36)					{
HXDLIN(  36)						int _g76 = rectTop3;
HXDLIN(  36)						int _g77 = yIter33->max;
HXDLIN(  36)						while((_g76 < _g77)){
HXDLIN(  36)							_g76 = (_g76 + 1);
HXDLIN(  36)							int dy4 = (_g76 - 1);
HXDLIN(  36)							{
HXDLIN(  36)								int _g78 = rectLeft3;
HXDLIN(  36)								int _g79 = rectRight3;
HXDLIN(  36)								while((_g78 < _g79)){
HXDLIN(  36)									_g78 = (_g78 + 1);
HXDLIN(  36)									int dx4 = (_g78 - 1);
HXDLIN(  36)									::Dynamic this97 = this1->image;
HXDLIN(  36)									int index12;
HXDLIN(  36)									if (this1->useVirtualPos) {
HXDLIN(  36)										index12 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx4) - this1->virtualX));
            									}
            									else {
HXDLIN(  36)										index12 = ::Std_obj::_hx_int(( (Float)(((dy4 * this1->width) + dx4)) ));
            									}
HXDLIN(  36)									int c9 = ::iterMagic::Iimg_obj::get(this97,index12);
HXDLIN(  36)									int col3;
HXDLIN(  36)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)										col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            									}
            									else {
HXDLIN(  36)										col3 = c9;
            									}
HXDLIN(  36)									bool _hx_tmp24;
HXDLIN(  36)									if (this1->useMask) {
HXDLIN(  36)										_hx_tmp24 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN(  36)										_hx_tmp24 = false;
            									}
HXDLIN(  36)									if (_hx_tmp24) {
HXDLIN(  36)										 ::pi_xy::ImageStruct this98 = this1->mask;
HXDLIN(  36)										::Dynamic this99 = this98->image;
HXDLIN(  36)										int index13;
HXDLIN(  36)										if (this98->useVirtualPos) {
HXDLIN(  36)											index13 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this98->virtualY) * ( (Float)(this98->width) )) + dx4) - this98->virtualX));
            										}
            										else {
HXDLIN(  36)											index13 = ::Std_obj::_hx_int(( (Float)(((dy4 * this98->width) + dx4)) ));
            										}
HXDLIN(  36)										int c10 = ::iterMagic::Iimg_obj::get(this99,index13);
HXDLIN(  36)										int v10;
HXDLIN(  36)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)											v10 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            										}
            										else {
HXDLIN(  36)											v10 = c10;
            										}
HXDLIN(  36)										int maskPixel3 = v10;
HXDLIN(  36)										int this100 = col3;
HXDLIN(  36)										if ((maskPixel3 == 0)) {
HXDLIN(  36)											col3 = this100;
            										}
            										else {
HXDLIN(  36)											Float m03;
HXDLIN(  36)											int this101 = ((maskPixel3 >> 24) & 255);
HXDLIN(  36)											if ((this101 == 0)) {
HXDLIN(  36)												m03 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m03 = (( (Float)(this101) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float m13;
HXDLIN(  36)											int this102 = ((maskPixel3 >> 16) & 255);
HXDLIN(  36)											if ((this102 == 0)) {
HXDLIN(  36)												m13 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m13 = (( (Float)(this102) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float m23;
HXDLIN(  36)											int this103 = ((maskPixel3 >> 8) & 255);
HXDLIN(  36)											if ((this103 == 0)) {
HXDLIN(  36)												m23 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m23 = (( (Float)(this103) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float m33;
HXDLIN(  36)											int this104 = (maskPixel3 & 255);
HXDLIN(  36)											if ((this104 == 0)) {
HXDLIN(  36)												m33 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												m33 = (( (Float)(this104) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this100 >> 24) & 255)) )));
HXDLIN(  36)											int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this100 >> 16) & 255)) )));
HXDLIN(  36)											int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this100 >> 8) & 255)) )));
HXDLIN(  36)											int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this100 & 255)) )));
HXDLIN(  36)											col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  36)									if ((col3 != 0)) {
HXDLIN(  36)										int x10 = (dx4 - rectLeft3);
HXDLIN(  36)										int y10 = (dy4 - rectTop3);
HXDLIN(  36)										int c11 = col3;
HXDLIN(  36)										bool _hx_tmp25;
HXDLIN(  36)										if ((((c11 >> 24) & 255) < 254)) {
HXDLIN(  36)											_hx_tmp25 = undoImage9->transparent;
            										}
            										else {
HXDLIN(  36)											_hx_tmp25 = false;
            										}
HXDLIN(  36)										if (_hx_tmp25) {
HXDLIN(  36)											int location6;
HXDLIN(  36)											if (undoImage9->useVirtualPos) {
HXDLIN(  36)												location6 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            											}
            											else {
HXDLIN(  36)												location6 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            											}
HXDLIN(  36)											int this105 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN(  36)											int this106;
HXDLIN(  36)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)												this106 = ((((((this105 >> 24) & 255) << 24) | ((this105 & 255) << 16)) | (((this105 >> 8) & 255) << 8)) | ((this105 >> 16) & 255));
            											}
            											else {
HXDLIN(  36)												this106 = this105;
            											}
HXDLIN(  36)											Float a110;
HXDLIN(  36)											int this107 = ((this106 >> 24) & 255);
HXDLIN(  36)											if ((this107 == 0)) {
HXDLIN(  36)												a110 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												a110 = (( (Float)(this107) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float r16;
HXDLIN(  36)											int this108 = ((this106 >> 16) & 255);
HXDLIN(  36)											if ((this108 == 0)) {
HXDLIN(  36)												r16 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												r16 = (( (Float)(this108) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float g16;
HXDLIN(  36)											int this109 = ((this106 >> 8) & 255);
HXDLIN(  36)											if ((this109 == 0)) {
HXDLIN(  36)												g16 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												g16 = (( (Float)(this109) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float b111;
HXDLIN(  36)											int this110 = (this106 & 255);
HXDLIN(  36)											if ((this110 == 0)) {
HXDLIN(  36)												b111 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												b111 = (( (Float)(this110) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float a26;
HXDLIN(  36)											int this111 = ((col3 >> 24) & 255);
HXDLIN(  36)											if ((this111 == 0)) {
HXDLIN(  36)												a26 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												a26 = (( (Float)(this111) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float r26;
HXDLIN(  36)											int this112 = ((col3 >> 16) & 255);
HXDLIN(  36)											if ((this112 == 0)) {
HXDLIN(  36)												r26 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												r26 = (( (Float)(this112) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float g26;
HXDLIN(  36)											int this113 = ((col3 >> 8) & 255);
HXDLIN(  36)											if ((this113 == 0)) {
HXDLIN(  36)												g26 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												g26 = (( (Float)(this113) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float b210;
HXDLIN(  36)											int this114 = (col3 & 255);
HXDLIN(  36)											if ((this114 == 0)) {
HXDLIN(  36)												b210 = ((Float)0.);
            											}
            											else {
HXDLIN(  36)												b210 = (( (Float)(this114) ) / ( (Float)(255) ));
            											}
HXDLIN(  36)											Float a36 = (a110 * (( (Float)(1) ) - a26));
HXDLIN(  36)											int r17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN(  36)											int g17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN(  36)											int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a36) + (b210 * a26))));
HXDLIN(  36)											int a27 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  36)											int blended6 = ((((a27 << 24) | (r17 << 16)) | (g17 << 8)) | b32);
HXDLIN(  36)											{
HXDLIN(  36)												int _hx_tmp26;
HXDLIN(  36)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)													_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            												}
            												else {
HXDLIN(  36)													_hx_tmp26 = blended6;
            												}
HXDLIN(  36)												::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            											}
            										}
            										else {
HXDLIN(  36)											::Dynamic this115 = undoImage9->image;
HXDLIN(  36)											int index14;
HXDLIN(  36)											if (undoImage9->useVirtualPos) {
HXDLIN(  36)												index14 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            											}
            											else {
HXDLIN(  36)												index14 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            											}
HXDLIN(  36)											int _hx_tmp27;
HXDLIN(  36)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)												_hx_tmp27 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            											}
            											else {
HXDLIN(  36)												_hx_tmp27 = c11;
            											}
HXDLIN(  36)											::iterMagic::Iimg_obj::set(this115,index14,_hx_tmp27);
            										}
            									}
            									else {
HXDLIN(  36)										if (forceClear3) {
HXDLIN(  36)											::Dynamic this116 = undoImage9->image;
HXDLIN(  36)											int x11 = (dx4 - rectLeft3);
HXDLIN(  36)											int y11 = (dy4 - rectTop3);
HXDLIN(  36)											int index15;
HXDLIN(  36)											if (undoImage9->useVirtualPos) {
HXDLIN(  36)												index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            											}
            											else {
HXDLIN(  36)												index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            											}
HXDLIN(  36)											::iterMagic::Iimg_obj::set(this116,index15,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  36)			bool found3 = false;
HXDLIN(  36)			{
HXDLIN(  36)				int _g_min6 = xIter33->start;
HXDLIN(  36)				int _g_max6 = xIter33->max;
HXDLIN(  36)				while((_g_min6 < _g_max6)){
HXDLIN(  36)					_g_min6 = (_g_min6 + 1);
HXDLIN(  36)					int px3 = (_g_min6 - 1);
HXDLIN(  36)					Float pcx3 = (( (Float)(px3) ) - ax);
HXLINE( 619)					found3 = false;
HXLINE(  36)					{
HXDLIN(  36)						int _g_min7 = yIter33->start;
HXDLIN(  36)						int _g_max7 = yIter33->max;
HXDLIN(  36)						while((_g_min7 < _g_max7)){
HXDLIN(  36)							_g_min7 = (_g_min7 + 1);
HXDLIN(  36)							int py3 = (_g_min7 - 1);
HXDLIN(  36)							Float pcy3 = (( (Float)(py3) ) - ay);
HXDLIN(  36)							Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN(  36)							Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN(  36)							Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN(  36)							Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN(  36)							Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  36)							bool _hx_tmp28;
HXDLIN(  36)							bool _hx_tmp29;
HXDLIN(  36)							if ((ratioA3 >= 0)) {
HXDLIN(  36)								_hx_tmp29 = (ratioB3 >= 0);
            							}
            							else {
HXDLIN(  36)								_hx_tmp29 = false;
            							}
HXDLIN(  36)							if (_hx_tmp29) {
HXDLIN(  36)								_hx_tmp28 = (ratioC3 >= 0);
            							}
            							else {
HXDLIN(  36)								_hx_tmp28 = false;
            							}
HXDLIN(  36)							if (_hx_tmp28) {
HXDLIN(  36)								int i36 = ::Std_obj::_hx_int((( (Float)(aA3) ) * (softC * ratioB3)));
HXDLIN(  36)								if ((i36 > 255)) {
HXLINE(  24)									i36 = 255;
            								}
HXLINE(  36)								if ((i36 < 0)) {
HXLINE(  25)									i36 = 0;
            								}
HXLINE(  36)								int a28 = i36;
HXDLIN(  36)								int i37 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN(  36)								if ((i37 > 255)) {
HXLINE(  24)									i37 = 255;
            								}
HXLINE(  36)								if ((i37 < 0)) {
HXLINE(  25)									i37 = 0;
            								}
HXLINE(  36)								int r18 = i37;
HXDLIN(  36)								int i38 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN(  36)								if ((i38 > 255)) {
HXLINE(  24)									i38 = 255;
            								}
HXLINE(  36)								if ((i38 < 0)) {
HXLINE(  25)									i38 = 0;
            								}
HXLINE(  36)								int g18 = i38;
HXDLIN(  36)								int i39 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN(  36)								if ((i39 > 255)) {
HXLINE(  24)									i39 = 255;
            								}
HXLINE(  36)								if ((i39 < 0)) {
HXLINE(  25)									i39 = 0;
            								}
HXLINE(  36)								int b33 = i39;
HXDLIN(  36)								{
HXDLIN(  36)									int location7;
HXDLIN(  36)									if (this1->useVirtualPos) {
HXDLIN(  36)										location7 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this1->virtualY) * ( (Float)(this1->width) )) + px3) - this1->virtualX));
            									}
            									else {
HXDLIN(  36)										location7 = ::Std_obj::_hx_int(( (Float)(((py3 * this1->width) + px3)) ));
            									}
HXDLIN(  36)									bool _hx_tmp30;
HXDLIN(  36)									if (this1->transparent) {
HXDLIN(  36)										_hx_tmp30 = (a28 < 254);
            									}
            									else {
HXDLIN(  36)										_hx_tmp30 = false;
            									}
HXDLIN(  36)									if (_hx_tmp30) {
HXDLIN(  36)										int this117 = ::iterMagic::Iimg_obj::get(this1->image,location7);
HXDLIN(  36)										int old3;
HXDLIN(  36)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)											old3 = ((((((this117 >> 24) & 255) << 24) | ((this117 & 255) << 16)) | (((this117 >> 8) & 255) << 8)) | ((this117 >> 16) & 255));
            										}
            										else {
HXDLIN(  36)											old3 = this117;
            										}
HXDLIN(  36)										int rhs3 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
HXDLIN(  36)										Float a111;
HXDLIN(  36)										int this118 = ((old3 >> 24) & 255);
HXDLIN(  36)										if ((this118 == 0)) {
HXDLIN(  36)											a111 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											a111 = (( (Float)(this118) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float r19;
HXDLIN(  36)										int this119 = ((old3 >> 16) & 255);
HXDLIN(  36)										if ((this119 == 0)) {
HXDLIN(  36)											r19 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											r19 = (( (Float)(this119) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float g19;
HXDLIN(  36)										int this120 = ((old3 >> 8) & 255);
HXDLIN(  36)										if ((this120 == 0)) {
HXDLIN(  36)											g19 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											g19 = (( (Float)(this120) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float b112;
HXDLIN(  36)										int this121 = (old3 & 255);
HXDLIN(  36)										if ((this121 == 0)) {
HXDLIN(  36)											b112 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											b112 = (( (Float)(this121) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float a29;
HXDLIN(  36)										int this122 = ((rhs3 >> 24) & 255);
HXDLIN(  36)										if ((this122 == 0)) {
HXDLIN(  36)											a29 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											a29 = (( (Float)(this122) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float r27;
HXDLIN(  36)										int this123 = ((rhs3 >> 16) & 255);
HXDLIN(  36)										if ((this123 == 0)) {
HXDLIN(  36)											r27 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											r27 = (( (Float)(this123) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float g27;
HXDLIN(  36)										int this124 = ((rhs3 >> 8) & 255);
HXDLIN(  36)										if ((this124 == 0)) {
HXDLIN(  36)											g27 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											g27 = (( (Float)(this124) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float b211;
HXDLIN(  36)										int this125 = (rhs3 & 255);
HXDLIN(  36)										if ((this125 == 0)) {
HXDLIN(  36)											b211 = ((Float)0.);
            										}
            										else {
HXDLIN(  36)											b211 = (( (Float)(this125) ) / ( (Float)(255) ));
            										}
HXDLIN(  36)										Float a37 = (a111 * (( (Float)(1) ) - a29));
HXDLIN(  36)										int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a37) + (r27 * a29))));
HXDLIN(  36)										int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a37) + (g27 * a29))));
HXDLIN(  36)										int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a37) + (b211 * a29))));
HXDLIN(  36)										int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a29)));
HXDLIN(  36)										int blended7 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b34);
HXDLIN(  36)										{
HXDLIN(  36)											int _hx_tmp31;
HXDLIN(  36)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  36)												_hx_tmp31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            											}
            											else {
HXDLIN(  36)												_hx_tmp31 = blended7;
            											}
HXDLIN(  36)											::iterMagic::Iimg_obj::set(this1->image,location7,_hx_tmp31);
            										}
            									}
            									else {
HXDLIN(  36)										int value3;
HXDLIN(  36)										if (this1->isLittle) {
HXDLIN(  36)											value3 = ((((a28 << 24) | (b33 << 16)) | (g18 << 8)) | r18);
            										}
            										else {
HXDLIN(  36)											value3 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
            										}
HXDLIN(  36)										::iterMagic::Iimg_obj::set(this1->image,location7,value3);
            									}
            								}
HXLINE( 633)								found3 = true;
            							}
            							else {
HXDLIN(  36)								if (found3) {
HXDLIN(  36)									goto _hx_goto_56;
            								}
            							}
            						}
            						_hx_goto_56:;
            					}
            				}
            			}
HXDLIN(  36)			if ((hasHit == false)) {
HXDLIN(  36)				 ::pi_xy::algo::HitTri v11 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,dx,dy,ax,ay,true);
HXDLIN(  36)				if (hasUndo3) {
HXDLIN(  36)					v11->undoImage = undoImage9;
HXDLIN(  36)					v11->undoX = xIter33->start;
HXDLIN(  36)					v11->undoY = yIter33->start;
            				}
            			}
            		}
HXDLIN(  36)		if ((hasHit == true)) {
HXDLIN(  36)			 ::pi_xy::algo::HitQuad v12 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN(  36)			return v12;
            		}
            		else {
HXDLIN(  36)			return null();
            		}
HXDLIN(  36)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC12(SoftShape_Impl__obj,quint,return )

 ::pi_xy::algo::HitQuad SoftShape_Impl__obj::quad( ::pi_xy::ImageStruct this1,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,int color,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_softAB,::hx::Null< bool >  __o_softBC,::hx::Null< bool >  __o_softCD,::hx::Null< bool >  __o_softDA,::hx::Null< bool >  __o_hasHit){
            		Float soft = __o_soft.Default(40);
            		bool softAB = __o_softAB.Default(true);
            		bool softBC = __o_softBC.Default(true);
            		bool softCD = __o_softCD.Default(true);
            		bool softDA = __o_softDA.Default(true);
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_60_quad)
HXDLIN(  60)		{
HXDLIN(  60)			bool hasUndo = true;
HXDLIN(  60)			int aA = ((color >> 24) & 255);
HXDLIN(  60)			int rA = ((color >> 16) & 255);
HXDLIN(  60)			int gA = ((color >> 8) & 255);
HXDLIN(  60)			int bA = (color & 255);
HXDLIN(  60)			Float bcx = (bx - dx);
HXDLIN(  60)			Float bcy = (by - dy);
HXDLIN(  60)			Float acx = (ax - dx);
HXDLIN(  60)			Float acy = (ay - dy);
HXDLIN(  60)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  60)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  60)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  60)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  60)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  60)			if ((ax > bx)) {
HXDLIN(  60)				if ((ax > dx)) {
HXDLIN(  60)					int min;
HXDLIN(  60)					if ((bx > dx)) {
HXDLIN(  60)						min = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN(  60)						min = ::Math_obj::floor(bx);
            					}
HXDLIN(  60)					int ii_min = min;
HXDLIN(  60)					int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  60)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXDLIN(  60)					int ii_min1 = ::Math_obj::floor(bx);
HXDLIN(  60)					int ii_max1 = ::Math_obj::ceil(dx);
HXDLIN(  60)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXDLIN(  60)				if ((bx > dx)) {
HXDLIN(  60)					int min1;
HXDLIN(  60)					if ((ax > dx)) {
HXDLIN(  60)						min1 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN(  60)						min1 = ::Math_obj::ceil(ax);
            					}
HXDLIN(  60)					int ii_min2 = min1;
HXDLIN(  60)					int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN(  60)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXDLIN(  60)					int ii_min3 = ::Math_obj::floor(ax);
HXDLIN(  60)					int ii_max3 = ::Math_obj::ceil(dx);
HXDLIN(  60)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN(  60)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  60)			if ((ay > by)) {
HXDLIN(  60)				if ((ay > dy)) {
HXDLIN(  60)					int min2;
HXDLIN(  60)					if ((by > dy)) {
HXDLIN(  60)						min2 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN(  60)						min2 = ::Math_obj::floor(by);
            					}
HXDLIN(  60)					int ii_min4 = min2;
HXDLIN(  60)					int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN(  60)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXDLIN(  60)					int ii_min5 = ::Math_obj::floor(by);
HXDLIN(  60)					int ii_max5 = ::Math_obj::ceil(dy);
HXDLIN(  60)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXDLIN(  60)				if ((by > dy)) {
HXDLIN(  60)					int min3;
HXDLIN(  60)					if ((ay > dy)) {
HXDLIN(  60)						min3 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN(  60)						min3 = ::Math_obj::ceil(ay);
            					}
HXDLIN(  60)					int ii_min6 = min3;
HXDLIN(  60)					int ii_max6 = ::Math_obj::ceil(by);
HXDLIN(  60)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXDLIN(  60)					int ii_min7 = ::Math_obj::floor(ay);
HXDLIN(  60)					int ii_max7 = ::Math_obj::ceil(dy);
HXDLIN(  60)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN(  60)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  60)			if (hasUndo) {
HXDLIN(  60)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  60)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  60)				 ::Dynamic imageType = null();
HXDLIN(  60)				 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  60)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  60)				::Dynamic undoImage1;
HXDLIN(  60)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXDLIN(  60)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  60)						 ::iterMagic::BytesImg b = byt;
HXDLIN(  60)						{
HXDLIN(  60)							b->width = width;
HXDLIN(  60)							b->height = height;
HXDLIN(  60)							b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  60)							b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  60)							{
HXDLIN(  60)								int len = b->length;
HXDLIN(  60)								int w = 0;
HXDLIN(  60)								{
HXDLIN(  60)									int _g = 0;
HXDLIN(  60)									int _g1 = b->height;
HXDLIN(  60)									while((_g < _g1)){
HXDLIN(  60)										_g = (_g + 1);
HXDLIN(  60)										int y = (_g - 1);
HXDLIN(  60)										{
HXDLIN(  60)											int _g2 = 0;
HXDLIN(  60)											int _g3 = b->width;
HXDLIN(  60)											while((_g2 < _g3)){
HXDLIN(  60)												_g2 = (_g2 + 1);
HXDLIN(  60)												int x = (_g2 - 1);
HXDLIN(  60)												{
HXDLIN(  60)													w = (w + 1);
HXDLIN(  60)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  60)												{
HXDLIN(  60)													w = (w + 1);
HXDLIN(  60)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  60)												{
HXDLIN(  60)													w = (w + 1);
HXDLIN(  60)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  60)												{
HXDLIN(  60)													w = (w + 1);
HXDLIN(  60)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  60)						undoImage1 = b;
            					}
            					break;
            					case (int)1: {
HXDLIN(  60)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  60)						 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  60)						{
HXDLIN(  60)							a->width = width;
HXDLIN(  60)							a->height = height;
HXDLIN(  60)							a->data = ::Array_obj< int >::__new(0);
HXDLIN(  60)							a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  60)							{
HXDLIN(  60)								int _g4 = 0;
HXDLIN(  60)								int _g5 = a->length;
HXDLIN(  60)								while((_g4 < _g5)){
HXDLIN(  60)									_g4 = (_g4 + 1);
HXDLIN(  60)									int i = (_g4 - 1);
HXDLIN(  60)									a->data[i] = 0;
            								}
            							}
            						}
HXDLIN(  60)						undoImage1 = a;
            					}
            					break;
            					case (int)2: {
HXDLIN(  60)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  60)						 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  60)						{
HXDLIN(  60)							b1->width = width;
HXDLIN(  60)							b1->height = height;
HXDLIN(  60)							b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  60)							int size = (b1->length * 4);
HXDLIN(  60)							b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  60)							{
HXDLIN(  60)								int _g6 = 0;
HXDLIN(  60)								int _g7 = b1->length;
HXDLIN(  60)								while((_g6 < _g7)){
HXDLIN(  60)									_g6 = (_g6 + 1);
HXDLIN(  60)									int i1 = (_g6 - 1);
HXDLIN(  60)									{
HXDLIN(  60)										 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN(  60)										bool undoImage2;
HXDLIN(  60)										if ((i1 >= 0)) {
HXDLIN(  60)											undoImage2 = (i1 < (this3->byteLength >> 2));
            										}
            										else {
HXDLIN(  60)											undoImage2 = false;
            										}
HXDLIN(  60)										if (undoImage2) {
HXDLIN(  60)											 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN(  60)											int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN(  60)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  60)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  60)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  60)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  60)						undoImage1 = b1;
            					}
            					break;
            					case (int)3: {
HXDLIN(  60)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  60)						 ::iterMagic::VecIntImg v = vec;
HXDLIN(  60)						{
HXDLIN(  60)							v->width = width;
HXDLIN(  60)							v->height = height;
HXDLIN(  60)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  60)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  60)							{
HXDLIN(  60)								int _g8 = 0;
HXDLIN(  60)								int _g9 = v->length;
HXDLIN(  60)								while((_g8 < _g9)){
HXDLIN(  60)									_g8 = (_g8 + 1);
HXDLIN(  60)									int i2 = (_g8 - 1);
HXDLIN(  60)									v->data->__unsafe_set(i2,0);
            								}
            							}
            						}
HXDLIN(  60)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXDLIN(  60)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  60)						 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  60)						{
HXDLIN(  60)							b2->width = width;
HXDLIN(  60)							b2->height = height;
HXDLIN(  60)							b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  60)							b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  60)							{
HXDLIN(  60)								int len1 = b2->length;
HXDLIN(  60)								 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  60)								if (::hx::IsNull( d->head )) {
HXDLIN(  60)									int _g10 = 0;
HXDLIN(  60)									int _g11 = len1;
HXDLIN(  60)									while((_g10 < _g11)){
HXDLIN(  60)										_g10 = (_g10 + 1);
HXDLIN(  60)										int i3 = (_g10 - 1);
HXDLIN(  60)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXDLIN(  60)									int _g12 = 0;
HXDLIN(  60)									int _g13 = len1;
HXDLIN(  60)									while((_g12 < _g13)){
HXDLIN(  60)										_g12 = (_g12 + 1);
HXDLIN(  60)										int i4 = (_g12 - 1);
HXDLIN(  60)										{
HXDLIN(  60)											 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  60)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  60)											{
HXDLIN(  60)												int _g14 = 0;
HXDLIN(  60)												int _g15 = i4;
HXDLIN(  60)												while((_g14 < _g15)){
HXDLIN(  60)													_g14 = (_g14 + 1);
HXDLIN(  60)													int i5 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE(  60)											if (::hx::IsNull( prev )) {
HXDLIN(  60)												b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  60)												l = null();
            											}
            											else {
HXDLIN(  60)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  60)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  60)						undoImage1 = b2;
            					}
            					break;
            				}
HXDLIN(  60)				this2->image = undoImage1;
HXDLIN(  60)				this2->width = width;
HXDLIN(  60)				this2->height = height;
HXDLIN(  60)				this2->imageType = ( (int)(imageType) );
HXDLIN(  60)				undoImage = this2;
HXDLIN(  60)				{
HXDLIN(  60)					int rectLeft = xIter3->start;
HXDLIN(  60)					int rectTop = yIter3->start;
HXDLIN(  60)					int rectRight = xIter3->max;
HXDLIN(  60)					bool forceClear = false;
HXDLIN(  60)					{
HXDLIN(  60)						int _g16 = rectTop;
HXDLIN(  60)						int _g17 = yIter3->max;
HXDLIN(  60)						while((_g16 < _g17)){
HXDLIN(  60)							_g16 = (_g16 + 1);
HXDLIN(  60)							int dy1 = (_g16 - 1);
HXDLIN(  60)							{
HXDLIN(  60)								int _g18 = rectLeft;
HXDLIN(  60)								int _g19 = rectRight;
HXDLIN(  60)								while((_g18 < _g19)){
HXDLIN(  60)									_g18 = (_g18 + 1);
HXDLIN(  60)									int dx1 = (_g18 - 1);
HXDLIN(  60)									::Dynamic this4 = this1->image;
HXDLIN(  60)									int index;
HXDLIN(  60)									if (this1->useVirtualPos) {
HXDLIN(  60)										index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx1) - this1->virtualX));
            									}
            									else {
HXDLIN(  60)										index = ::Std_obj::_hx_int(( (Float)(((dy1 * this1->width) + dx1)) ));
            									}
HXDLIN(  60)									int c = ::iterMagic::Iimg_obj::get(this4,index);
HXDLIN(  60)									int col;
HXDLIN(  60)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXDLIN(  60)										col = c;
            									}
HXDLIN(  60)									bool _hx_tmp;
HXDLIN(  60)									if (this1->useMask) {
HXDLIN(  60)										_hx_tmp = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN(  60)										_hx_tmp = false;
            									}
HXDLIN(  60)									if (_hx_tmp) {
HXDLIN(  60)										 ::pi_xy::ImageStruct this5 = this1->mask;
HXDLIN(  60)										::Dynamic this6 = this5->image;
HXDLIN(  60)										int index1;
HXDLIN(  60)										if (this5->useVirtualPos) {
HXDLIN(  60)											index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx1) - this5->virtualX));
            										}
            										else {
HXDLIN(  60)											index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this5->width) + dx1)) ));
            										}
HXDLIN(  60)										int c1 = ::iterMagic::Iimg_obj::get(this6,index1);
HXDLIN(  60)										int v1;
HXDLIN(  60)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)											v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXDLIN(  60)											v1 = c1;
            										}
HXDLIN(  60)										int maskPixel = v1;
HXDLIN(  60)										int this7 = col;
HXDLIN(  60)										if ((maskPixel == 0)) {
HXDLIN(  60)											col = this7;
            										}
            										else {
HXDLIN(  60)											Float m0;
HXDLIN(  60)											int this8 = ((maskPixel >> 24) & 255);
HXDLIN(  60)											if ((this8 == 0)) {
HXDLIN(  60)												m0 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												m0 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float m1;
HXDLIN(  60)											int this9 = ((maskPixel >> 16) & 255);
HXDLIN(  60)											if ((this9 == 0)) {
HXDLIN(  60)												m1 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												m1 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float m2;
HXDLIN(  60)											int this10 = ((maskPixel >> 8) & 255);
HXDLIN(  60)											if ((this10 == 0)) {
HXDLIN(  60)												m2 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												m2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float m3;
HXDLIN(  60)											int this11 = (maskPixel & 255);
HXDLIN(  60)											if ((this11 == 0)) {
HXDLIN(  60)												m3 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												m3 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this7 >> 24) & 255)) )));
HXDLIN(  60)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this7 >> 16) & 255)) )));
HXDLIN(  60)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this7 >> 8) & 255)) )));
HXDLIN(  60)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this7 & 255)) )));
HXDLIN(  60)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  60)									if ((col != 0)) {
HXDLIN(  60)										int x1 = (dx1 - rectLeft);
HXDLIN(  60)										int y1 = (dy1 - rectTop);
HXDLIN(  60)										int c2 = col;
HXDLIN(  60)										bool _hx_tmp1;
HXDLIN(  60)										if ((((c2 >> 24) & 255) < 254)) {
HXDLIN(  60)											_hx_tmp1 = undoImage->transparent;
            										}
            										else {
HXDLIN(  60)											_hx_tmp1 = false;
            										}
HXDLIN(  60)										if (_hx_tmp1) {
HXDLIN(  60)											int location;
HXDLIN(  60)											if (undoImage->useVirtualPos) {
HXDLIN(  60)												location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXDLIN(  60)												location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN(  60)											int this12 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  60)											int this13;
HXDLIN(  60)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)												this13 = ((((((this12 >> 24) & 255) << 24) | ((this12 & 255) << 16)) | (((this12 >> 8) & 255) << 8)) | ((this12 >> 16) & 255));
            											}
            											else {
HXDLIN(  60)												this13 = this12;
            											}
HXDLIN(  60)											Float a1;
HXDLIN(  60)											int this14 = ((this13 >> 24) & 255);
HXDLIN(  60)											if ((this14 == 0)) {
HXDLIN(  60)												a1 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												a1 = (( (Float)(this14) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float r1;
HXDLIN(  60)											int this15 = ((this13 >> 16) & 255);
HXDLIN(  60)											if ((this15 == 0)) {
HXDLIN(  60)												r1 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float g1;
HXDLIN(  60)											int this16 = ((this13 >> 8) & 255);
HXDLIN(  60)											if ((this16 == 0)) {
HXDLIN(  60)												g1 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float b11;
HXDLIN(  60)											int this17 = (this13 & 255);
HXDLIN(  60)											if ((this17 == 0)) {
HXDLIN(  60)												b11 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float a2;
HXDLIN(  60)											int this18 = ((col >> 24) & 255);
HXDLIN(  60)											if ((this18 == 0)) {
HXDLIN(  60)												a2 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												a2 = (( (Float)(this18) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float r2;
HXDLIN(  60)											int this19 = ((col >> 16) & 255);
HXDLIN(  60)											if ((this19 == 0)) {
HXDLIN(  60)												r2 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float g2;
HXDLIN(  60)											int this20 = ((col >> 8) & 255);
HXDLIN(  60)											if ((this20 == 0)) {
HXDLIN(  60)												g2 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float b21;
HXDLIN(  60)											int this21 = (col & 255);
HXDLIN(  60)											if ((this21 == 0)) {
HXDLIN(  60)												b21 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  60)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  60)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  60)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  60)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  60)											int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  60)											{
HXDLIN(  60)												int _hx_tmp2;
HXDLIN(  60)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)													_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXDLIN(  60)													_hx_tmp2 = blended;
            												}
HXDLIN(  60)												::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            											}
            										}
            										else {
HXDLIN(  60)											::Dynamic this22 = undoImage->image;
HXDLIN(  60)											int index2;
HXDLIN(  60)											if (undoImage->useVirtualPos) {
HXDLIN(  60)												index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXDLIN(  60)												index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN(  60)											int _hx_tmp3;
HXDLIN(  60)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)												_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXDLIN(  60)												_hx_tmp3 = c2;
            											}
HXDLIN(  60)											::iterMagic::Iimg_obj::set(this22,index2,_hx_tmp3);
            										}
            									}
            									else {
HXDLIN(  60)										if (forceClear) {
HXDLIN(  60)											::Dynamic this23 = undoImage->image;
HXDLIN(  60)											int x2 = (dx1 - rectLeft);
HXDLIN(  60)											int y2 = (dy1 - rectTop);
HXDLIN(  60)											int index3;
HXDLIN(  60)											if (undoImage->useVirtualPos) {
HXDLIN(  60)												index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            											}
            											else {
HXDLIN(  60)												index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            											}
HXDLIN(  60)											::iterMagic::Iimg_obj::set(this23,index3,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  60)			bool found = false;
HXDLIN(  60)			Float min4 = ( (Float)(0) );
HXDLIN(  60)			Float max = ( (Float)(0) );
HXDLIN(  60)			int a5 = 0;
HXDLIN(  60)			int r3 = 0;
HXDLIN(  60)			int g3 = 0;
HXDLIN(  60)			int b4 = 0;
HXDLIN(  60)			{
HXDLIN(  60)				int _g_min = xIter3->start;
HXDLIN(  60)				int _g_max = xIter3->max;
HXDLIN(  60)				while((_g_min < _g_max)){
HXDLIN(  60)					_g_min = (_g_min + 1);
HXDLIN(  60)					int px = (_g_min - 1);
HXDLIN(  60)					Float pcx = (( (Float)(px) ) - dx);
HXLINE( 695)					found = false;
HXLINE(  60)					{
HXDLIN(  60)						int _g_min1 = yIter3->start;
HXDLIN(  60)						int _g_max1 = yIter3->max;
HXDLIN(  60)						while((_g_min1 < _g_max1)){
HXDLIN(  60)							_g_min1 = (_g_min1 + 1);
HXDLIN(  60)							int py = (_g_min1 - 1);
HXDLIN(  60)							Float pcy = (( (Float)(py) ) - dy);
HXDLIN(  60)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  60)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  60)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  60)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  60)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  60)							bool _hx_tmp4;
HXDLIN(  60)							bool _hx_tmp5;
HXDLIN(  60)							if ((ratioA >= 0)) {
HXDLIN(  60)								_hx_tmp5 = (ratioB >= 0);
            							}
            							else {
HXDLIN(  60)								_hx_tmp5 = false;
            							}
HXDLIN(  60)							if (_hx_tmp5) {
HXDLIN(  60)								_hx_tmp4 = (ratioC >= 0);
            							}
            							else {
HXDLIN(  60)								_hx_tmp4 = false;
            							}
HXDLIN(  60)							if (_hx_tmp4) {
HXDLIN(  60)								if (softAB) {
HXDLIN(  60)									if (softDA) {
HXDLIN(  60)										if ((ratioA < ratioC)) {
HXDLIN(  60)											min4 = ratioA;
            										}
            										else {
HXDLIN(  60)											min4 = ratioC;
            										}
HXDLIN(  60)										if ((ratioA > ratioB)) {
HXDLIN(  60)											max = ratioA;
            										}
            										else {
HXDLIN(  60)											max = ratioB;
            										}
HXDLIN(  60)										if (!((max > ratioC))) {
HXDLIN(  60)											max = ratioC;
            										}
HXLINE( 728)										max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE(  60)										if (!((min4 < max))) {
HXDLIN(  60)											min4 = ((max + min4) / ( (Float)(2) ));
            										}
HXDLIN(  60)										int i6 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN(  60)										if ((i6 > 255)) {
HXLINE(  24)											i6 = 255;
            										}
HXLINE(  60)										if ((i6 < 0)) {
HXLINE(  25)											i6 = 0;
            										}
HXLINE(  60)										a5 = i6;
            									}
            									else {
HXLINE( 722)										min4 = ratioC;
HXLINE(  60)										int i7 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN(  60)										if ((i7 > 255)) {
HXLINE(  24)											i7 = 255;
            										}
HXLINE(  60)										if ((i7 < 0)) {
HXLINE(  25)											i7 = 0;
            										}
HXLINE(  60)										a5 = i7;
            									}
            								}
            								else {
HXDLIN(  60)									if (softDA) {
HXLINE( 709)										min4 = ratioA;
HXLINE(  60)										int i8 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN(  60)										if ((i8 > 255)) {
HXLINE(  24)											i8 = 255;
            										}
HXLINE(  60)										if ((i8 < 0)) {
HXLINE(  25)											i8 = 0;
            										}
HXLINE(  60)										a5 = i8;
            									}
            									else {
HXDLIN(  60)										int i9 = ::Std_obj::_hx_int(( (Float)(aA) ));
HXDLIN(  60)										if ((i9 > 255)) {
HXLINE(  24)											i9 = 255;
            										}
HXLINE(  60)										if ((i9 < 0)) {
HXLINE(  25)											i9 = 0;
            										}
HXLINE(  60)										a5 = i9;
            									}
            								}
HXDLIN(  60)								int i10 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN(  60)								if ((i10 > 255)) {
HXLINE(  24)									i10 = 255;
            								}
HXLINE(  60)								if ((i10 < 0)) {
HXLINE(  25)									i10 = 0;
            								}
HXLINE( 747)								r3 = i10;
HXLINE(  60)								int i11 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN(  60)								if ((i11 > 255)) {
HXLINE(  24)									i11 = 255;
            								}
HXLINE(  60)								if ((i11 < 0)) {
HXLINE(  25)									i11 = 0;
            								}
HXLINE( 748)								g3 = i11;
HXLINE(  60)								int i12 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN(  60)								if ((i12 > 255)) {
HXLINE(  24)									i12 = 255;
            								}
HXLINE(  60)								if ((i12 < 0)) {
HXLINE(  25)									i12 = 0;
            								}
HXLINE( 749)								b4 = i12;
HXLINE(  60)								{
HXDLIN(  60)									int location1;
HXDLIN(  60)									if (this1->useVirtualPos) {
HXDLIN(  60)										location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this1->virtualY) * ( (Float)(this1->width) )) + px) - this1->virtualX));
            									}
            									else {
HXDLIN(  60)										location1 = ::Std_obj::_hx_int(( (Float)(((py * this1->width) + px)) ));
            									}
HXDLIN(  60)									bool _hx_tmp6;
HXDLIN(  60)									if (this1->transparent) {
HXDLIN(  60)										_hx_tmp6 = (a5 < 254);
            									}
            									else {
HXDLIN(  60)										_hx_tmp6 = false;
            									}
HXDLIN(  60)									if (_hx_tmp6) {
HXDLIN(  60)										int this24 = ::iterMagic::Iimg_obj::get(this1->image,location1);
HXDLIN(  60)										int old;
HXDLIN(  60)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)											old = ((((((this24 >> 24) & 255) << 24) | ((this24 & 255) << 16)) | (((this24 >> 8) & 255) << 8)) | ((this24 >> 16) & 255));
            										}
            										else {
HXDLIN(  60)											old = this24;
            										}
HXDLIN(  60)										int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  60)										Float a11;
HXDLIN(  60)										int this25 = ((old >> 24) & 255);
HXDLIN(  60)										if ((this25 == 0)) {
HXDLIN(  60)											a11 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											a11 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float r11;
HXDLIN(  60)										int this26 = ((old >> 16) & 255);
HXDLIN(  60)										if ((this26 == 0)) {
HXDLIN(  60)											r11 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float g11;
HXDLIN(  60)										int this27 = ((old >> 8) & 255);
HXDLIN(  60)										if ((this27 == 0)) {
HXDLIN(  60)											g11 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float b12;
HXDLIN(  60)										int this28 = (old & 255);
HXDLIN(  60)										if ((this28 == 0)) {
HXDLIN(  60)											b12 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float a21;
HXDLIN(  60)										int this29 = ((rhs >> 24) & 255);
HXDLIN(  60)										if ((this29 == 0)) {
HXDLIN(  60)											a21 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float r21;
HXDLIN(  60)										int this30 = ((rhs >> 16) & 255);
HXDLIN(  60)										if ((this30 == 0)) {
HXDLIN(  60)											r21 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float g21;
HXDLIN(  60)										int this31 = ((rhs >> 8) & 255);
HXDLIN(  60)										if ((this31 == 0)) {
HXDLIN(  60)											g21 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float b22;
HXDLIN(  60)										int this32 = (rhs & 255);
HXDLIN(  60)										if ((this32 == 0)) {
HXDLIN(  60)											b22 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  60)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  60)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  60)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  60)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  60)										int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN(  60)										{
HXDLIN(  60)											int _hx_tmp7;
HXDLIN(  60)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXDLIN(  60)												_hx_tmp7 = blended1;
            											}
HXDLIN(  60)											::iterMagic::Iimg_obj::set(this1->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXDLIN(  60)										int value;
HXDLIN(  60)										if (this1->isLittle) {
HXDLIN(  60)											value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            										}
            										else {
HXDLIN(  60)											value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            										}
HXDLIN(  60)										::iterMagic::Iimg_obj::set(this1->image,location1,value);
            									}
            								}
HXLINE( 751)								found = true;
            							}
            							else {
HXDLIN(  60)								if (found) {
HXDLIN(  60)									goto _hx_goto_69;
            								}
            							}
            						}
            						_hx_goto_69:;
            					}
            				}
            			}
HXDLIN(  60)			if ((hasHit == false)) {
HXDLIN(  60)				 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,dx,dy,true);
HXDLIN(  60)				if (hasUndo) {
HXDLIN(  60)					v2->undoImage = undoImage;
HXDLIN(  60)					v2->undoX = xIter3->start;
HXDLIN(  60)					v2->undoY = yIter3->start;
            				}
            			}
            		}
HXDLIN(  60)		{
HXDLIN(  60)			bool hasUndo1 = true;
HXDLIN(  60)			int aA1 = ((color >> 24) & 255);
HXDLIN(  60)			int rA1 = ((color >> 16) & 255);
HXDLIN(  60)			int gA1 = ((color >> 8) & 255);
HXDLIN(  60)			int bA1 = (color & 255);
HXDLIN(  60)			Float bcx1 = (cx - dx);
HXDLIN(  60)			Float bcy1 = (cy - dy);
HXDLIN(  60)			Float acx1 = (bx - dx);
HXDLIN(  60)			Float acy1 = (by - dy);
HXDLIN(  60)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  60)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  60)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  60)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  60)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  60)			if ((bx > cx)) {
HXDLIN(  60)				if ((bx > dx)) {
HXDLIN(  60)					int min5;
HXDLIN(  60)					if ((cx > dx)) {
HXDLIN(  60)						min5 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN(  60)						min5 = ::Math_obj::floor(cx);
            					}
HXDLIN(  60)					int ii_min8 = min5;
HXDLIN(  60)					int ii_max8 = ::Math_obj::ceil(bx);
HXDLIN(  60)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXDLIN(  60)					int ii_min9 = ::Math_obj::floor(cx);
HXDLIN(  60)					int ii_max9 = ::Math_obj::ceil(dx);
HXDLIN(  60)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXDLIN(  60)				if ((cx > dx)) {
HXDLIN(  60)					int min6;
HXDLIN(  60)					if ((bx > dx)) {
HXDLIN(  60)						min6 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN(  60)						min6 = ::Math_obj::ceil(bx);
            					}
HXDLIN(  60)					int ii_min10 = min6;
HXDLIN(  60)					int ii_max10 = ::Math_obj::ceil(cx);
HXDLIN(  60)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXDLIN(  60)					int ii_min11 = ::Math_obj::floor(bx);
HXDLIN(  60)					int ii_max11 = ::Math_obj::ceil(dx);
HXDLIN(  60)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN(  60)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  60)			if ((by > cy)) {
HXDLIN(  60)				if ((by > dy)) {
HXDLIN(  60)					int min7;
HXDLIN(  60)					if ((cy > dy)) {
HXDLIN(  60)						min7 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN(  60)						min7 = ::Math_obj::floor(cy);
            					}
HXDLIN(  60)					int ii_min12 = min7;
HXDLIN(  60)					int ii_max12 = ::Math_obj::ceil(by);
HXDLIN(  60)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXDLIN(  60)					int ii_min13 = ::Math_obj::floor(cy);
HXDLIN(  60)					int ii_max13 = ::Math_obj::ceil(dy);
HXDLIN(  60)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXDLIN(  60)				if ((cy > dy)) {
HXDLIN(  60)					int min8;
HXDLIN(  60)					if ((by > dy)) {
HXDLIN(  60)						min8 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN(  60)						min8 = ::Math_obj::ceil(by);
            					}
HXDLIN(  60)					int ii_min14 = min8;
HXDLIN(  60)					int ii_max14 = ::Math_obj::ceil(cy);
HXDLIN(  60)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXDLIN(  60)					int ii_min15 = ::Math_obj::floor(by);
HXDLIN(  60)					int ii_max15 = ::Math_obj::ceil(dy);
HXDLIN(  60)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN(  60)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  60)			if (hasUndo1) {
HXDLIN(  60)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  60)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  60)				 ::Dynamic imageType1 = null();
HXDLIN(  60)				 ::pi_xy::ImageStruct this33 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  60)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  60)				::Dynamic undoImage4;
HXDLIN(  60)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXDLIN(  60)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  60)						 ::iterMagic::BytesImg b6 = byt1;
HXDLIN(  60)						{
HXDLIN(  60)							b6->width = width1;
HXDLIN(  60)							b6->height = height1;
HXDLIN(  60)							b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  60)							b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN(  60)							{
HXDLIN(  60)								int len2 = b6->length;
HXDLIN(  60)								int w1 = 0;
HXDLIN(  60)								{
HXDLIN(  60)									int _g20 = 0;
HXDLIN(  60)									int _g21 = b6->height;
HXDLIN(  60)									while((_g20 < _g21)){
HXDLIN(  60)										_g20 = (_g20 + 1);
HXDLIN(  60)										int y3 = (_g20 - 1);
HXDLIN(  60)										{
HXDLIN(  60)											int _g22 = 0;
HXDLIN(  60)											int _g23 = b6->width;
HXDLIN(  60)											while((_g22 < _g23)){
HXDLIN(  60)												_g22 = (_g22 + 1);
HXDLIN(  60)												int x3 = (_g22 - 1);
HXDLIN(  60)												{
HXDLIN(  60)													w1 = (w1 + 1);
HXDLIN(  60)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  60)												{
HXDLIN(  60)													w1 = (w1 + 1);
HXDLIN(  60)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  60)												{
HXDLIN(  60)													w1 = (w1 + 1);
HXDLIN(  60)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  60)												{
HXDLIN(  60)													w1 = (w1 + 1);
HXDLIN(  60)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  60)						undoImage4 = b6;
            					}
            					break;
            					case (int)1: {
HXDLIN(  60)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  60)						 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN(  60)						{
HXDLIN(  60)							a7->width = width1;
HXDLIN(  60)							a7->height = height1;
HXDLIN(  60)							a7->data = ::Array_obj< int >::__new(0);
HXDLIN(  60)							a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  60)							{
HXDLIN(  60)								int _g24 = 0;
HXDLIN(  60)								int _g25 = a7->length;
HXDLIN(  60)								while((_g24 < _g25)){
HXDLIN(  60)									_g24 = (_g24 + 1);
HXDLIN(  60)									int i13 = (_g24 - 1);
HXDLIN(  60)									a7->data[i13] = 0;
            								}
            							}
            						}
HXDLIN(  60)						undoImage4 = a7;
            					}
            					break;
            					case (int)2: {
HXDLIN(  60)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  60)						 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN(  60)						{
HXDLIN(  60)							b7->width = width1;
HXDLIN(  60)							b7->height = height1;
HXDLIN(  60)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  60)							int size1 = (b7->length * 4);
HXDLIN(  60)							b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  60)							{
HXDLIN(  60)								int _g26 = 0;
HXDLIN(  60)								int _g27 = b7->length;
HXDLIN(  60)								while((_g26 < _g27)){
HXDLIN(  60)									_g26 = (_g26 + 1);
HXDLIN(  60)									int i14 = (_g26 - 1);
HXDLIN(  60)									{
HXDLIN(  60)										 ::haxe::io::ArrayBufferViewImpl this34 = b7->data;
HXDLIN(  60)										bool undoImage5;
HXDLIN(  60)										if ((i14 >= 0)) {
HXDLIN(  60)											undoImage5 = (i14 < (this34->byteLength >> 2));
            										}
            										else {
HXDLIN(  60)											undoImage5 = false;
            										}
HXDLIN(  60)										if (undoImage5) {
HXDLIN(  60)											 ::haxe::io::Bytes _this1 = this34->bytes;
HXDLIN(  60)											int pos1 = ((i14 << 2) + this34->byteOffset);
HXDLIN(  60)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  60)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  60)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  60)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  60)						undoImage4 = b7;
            					}
            					break;
            					case (int)3: {
HXDLIN(  60)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  60)						 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN(  60)						{
HXDLIN(  60)							v3->width = width1;
HXDLIN(  60)							v3->height = height1;
HXDLIN(  60)							v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  60)							v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN(  60)							{
HXDLIN(  60)								int _g28 = 0;
HXDLIN(  60)								int _g29 = v3->length;
HXDLIN(  60)								while((_g28 < _g29)){
HXDLIN(  60)									_g28 = (_g28 + 1);
HXDLIN(  60)									int i15 = (_g28 - 1);
HXDLIN(  60)									v3->data->__unsafe_set(i15,0);
            								}
            							}
            						}
HXDLIN(  60)						undoImage4 = v3;
            					}
            					break;
            					case (int)4: {
HXDLIN(  60)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  60)						 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN(  60)						{
HXDLIN(  60)							b8->width = width1;
HXDLIN(  60)							b8->height = height1;
HXDLIN(  60)							b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  60)							b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  60)							{
HXDLIN(  60)								int len3 = b8->length;
HXDLIN(  60)								 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN(  60)								if (::hx::IsNull( d1->head )) {
HXDLIN(  60)									int _g30 = 0;
HXDLIN(  60)									int _g31 = len3;
HXDLIN(  60)									while((_g30 < _g31)){
HXDLIN(  60)										_g30 = (_g30 + 1);
HXDLIN(  60)										int i16 = (_g30 - 1);
HXDLIN(  60)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXDLIN(  60)									int _g32 = 0;
HXDLIN(  60)									int _g33 = len3;
HXDLIN(  60)									while((_g32 < _g33)){
HXDLIN(  60)										_g32 = (_g32 + 1);
HXDLIN(  60)										int i17 = (_g32 - 1);
HXDLIN(  60)										{
HXDLIN(  60)											 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN(  60)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  60)											{
HXDLIN(  60)												int _g34 = 0;
HXDLIN(  60)												int _g35 = i17;
HXDLIN(  60)												while((_g34 < _g35)){
HXDLIN(  60)													_g34 = (_g34 + 1);
HXDLIN(  60)													int i18 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE(  60)											if (::hx::IsNull( prev1 )) {
HXDLIN(  60)												b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  60)												l1 = null();
            											}
            											else {
HXDLIN(  60)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  60)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  60)						undoImage4 = b8;
            					}
            					break;
            				}
HXDLIN(  60)				this33->image = undoImage4;
HXDLIN(  60)				this33->width = width1;
HXDLIN(  60)				this33->height = height1;
HXDLIN(  60)				this33->imageType = ( (int)(imageType1) );
HXDLIN(  60)				undoImage3 = this33;
HXDLIN(  60)				{
HXDLIN(  60)					int rectLeft1 = xIter31->start;
HXDLIN(  60)					int rectTop1 = yIter31->start;
HXDLIN(  60)					int rectRight1 = xIter31->max;
HXDLIN(  60)					bool forceClear1 = false;
HXDLIN(  60)					{
HXDLIN(  60)						int _g36 = rectTop1;
HXDLIN(  60)						int _g37 = yIter31->max;
HXDLIN(  60)						while((_g36 < _g37)){
HXDLIN(  60)							_g36 = (_g36 + 1);
HXDLIN(  60)							int dy2 = (_g36 - 1);
HXDLIN(  60)							{
HXDLIN(  60)								int _g38 = rectLeft1;
HXDLIN(  60)								int _g39 = rectRight1;
HXDLIN(  60)								while((_g38 < _g39)){
HXDLIN(  60)									_g38 = (_g38 + 1);
HXDLIN(  60)									int dx2 = (_g38 - 1);
HXDLIN(  60)									::Dynamic this35 = this1->image;
HXDLIN(  60)									int index4;
HXDLIN(  60)									if (this1->useVirtualPos) {
HXDLIN(  60)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx2) - this1->virtualX));
            									}
            									else {
HXDLIN(  60)										index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * this1->width) + dx2)) ));
            									}
HXDLIN(  60)									int c3 = ::iterMagic::Iimg_obj::get(this35,index4);
HXDLIN(  60)									int col1;
HXDLIN(  60)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)										col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXDLIN(  60)										col1 = c3;
            									}
HXDLIN(  60)									bool _hx_tmp8;
HXDLIN(  60)									if (this1->useMask) {
HXDLIN(  60)										_hx_tmp8 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN(  60)										_hx_tmp8 = false;
            									}
HXDLIN(  60)									if (_hx_tmp8) {
HXDLIN(  60)										 ::pi_xy::ImageStruct this36 = this1->mask;
HXDLIN(  60)										::Dynamic this37 = this36->image;
HXDLIN(  60)										int index5;
HXDLIN(  60)										if (this36->useVirtualPos) {
HXDLIN(  60)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this36->virtualY) * ( (Float)(this36->width) )) + dx2) - this36->virtualX));
            										}
            										else {
HXDLIN(  60)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this36->width) + dx2)) ));
            										}
HXDLIN(  60)										int c4 = ::iterMagic::Iimg_obj::get(this37,index5);
HXDLIN(  60)										int v4;
HXDLIN(  60)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)											v4 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXDLIN(  60)											v4 = c4;
            										}
HXDLIN(  60)										int maskPixel1 = v4;
HXDLIN(  60)										int this38 = col1;
HXDLIN(  60)										if ((maskPixel1 == 0)) {
HXDLIN(  60)											col1 = this38;
            										}
            										else {
HXDLIN(  60)											Float m01;
HXDLIN(  60)											int this39 = ((maskPixel1 >> 24) & 255);
HXDLIN(  60)											if ((this39 == 0)) {
HXDLIN(  60)												m01 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												m01 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float m11;
HXDLIN(  60)											int this40 = ((maskPixel1 >> 16) & 255);
HXDLIN(  60)											if ((this40 == 0)) {
HXDLIN(  60)												m11 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												m11 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float m21;
HXDLIN(  60)											int this41 = ((maskPixel1 >> 8) & 255);
HXDLIN(  60)											if ((this41 == 0)) {
HXDLIN(  60)												m21 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												m21 = (( (Float)(this41) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float m31;
HXDLIN(  60)											int this42 = (maskPixel1 & 255);
HXDLIN(  60)											if ((this42 == 0)) {
HXDLIN(  60)												m31 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												m31 = (( (Float)(this42) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this38 >> 24) & 255)) )));
HXDLIN(  60)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this38 >> 16) & 255)) )));
HXDLIN(  60)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this38 >> 8) & 255)) )));
HXDLIN(  60)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this38 & 255)) )));
HXDLIN(  60)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  60)									if ((col1 != 0)) {
HXDLIN(  60)										int x4 = (dx2 - rectLeft1);
HXDLIN(  60)										int y4 = (dy2 - rectTop1);
HXDLIN(  60)										int c5 = col1;
HXDLIN(  60)										bool _hx_tmp9;
HXDLIN(  60)										if ((((c5 >> 24) & 255) < 254)) {
HXDLIN(  60)											_hx_tmp9 = undoImage3->transparent;
            										}
            										else {
HXDLIN(  60)											_hx_tmp9 = false;
            										}
HXDLIN(  60)										if (_hx_tmp9) {
HXDLIN(  60)											int location2;
HXDLIN(  60)											if (undoImage3->useVirtualPos) {
HXDLIN(  60)												location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXDLIN(  60)												location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN(  60)											int this43 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN(  60)											int this44;
HXDLIN(  60)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)												this44 = ((((((this43 >> 24) & 255) << 24) | ((this43 & 255) << 16)) | (((this43 >> 8) & 255) << 8)) | ((this43 >> 16) & 255));
            											}
            											else {
HXDLIN(  60)												this44 = this43;
            											}
HXDLIN(  60)											Float a12;
HXDLIN(  60)											int this45 = ((this44 >> 24) & 255);
HXDLIN(  60)											if ((this45 == 0)) {
HXDLIN(  60)												a12 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												a12 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float r12;
HXDLIN(  60)											int this46 = ((this44 >> 16) & 255);
HXDLIN(  60)											if ((this46 == 0)) {
HXDLIN(  60)												r12 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												r12 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float g12;
HXDLIN(  60)											int this47 = ((this44 >> 8) & 255);
HXDLIN(  60)											if ((this47 == 0)) {
HXDLIN(  60)												g12 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												g12 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float b13;
HXDLIN(  60)											int this48 = (this44 & 255);
HXDLIN(  60)											if ((this48 == 0)) {
HXDLIN(  60)												b13 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												b13 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float a22;
HXDLIN(  60)											int this49 = ((col1 >> 24) & 255);
HXDLIN(  60)											if ((this49 == 0)) {
HXDLIN(  60)												a22 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												a22 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float r22;
HXDLIN(  60)											int this50 = ((col1 >> 16) & 255);
HXDLIN(  60)											if ((this50 == 0)) {
HXDLIN(  60)												r22 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												r22 = (( (Float)(this50) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float g22;
HXDLIN(  60)											int this51 = ((col1 >> 8) & 255);
HXDLIN(  60)											if ((this51 == 0)) {
HXDLIN(  60)												g22 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												g22 = (( (Float)(this51) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float b23;
HXDLIN(  60)											int this52 = (col1 & 255);
HXDLIN(  60)											if ((this52 == 0)) {
HXDLIN(  60)												b23 = ((Float)0.);
            											}
            											else {
HXDLIN(  60)												b23 = (( (Float)(this52) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  60)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  60)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  60)											int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  60)											int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  60)											int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN(  60)											{
HXDLIN(  60)												int _hx_tmp10;
HXDLIN(  60)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)													_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXDLIN(  60)													_hx_tmp10 = blended2;
            												}
HXDLIN(  60)												::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            											}
            										}
            										else {
HXDLIN(  60)											::Dynamic this53 = undoImage3->image;
HXDLIN(  60)											int index6;
HXDLIN(  60)											if (undoImage3->useVirtualPos) {
HXDLIN(  60)												index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXDLIN(  60)												index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN(  60)											int _hx_tmp11;
HXDLIN(  60)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)												_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXDLIN(  60)												_hx_tmp11 = c5;
            											}
HXDLIN(  60)											::iterMagic::Iimg_obj::set(this53,index6,_hx_tmp11);
            										}
            									}
            									else {
HXDLIN(  60)										if (forceClear1) {
HXDLIN(  60)											::Dynamic this54 = undoImage3->image;
HXDLIN(  60)											int x5 = (dx2 - rectLeft1);
HXDLIN(  60)											int y5 = (dy2 - rectTop1);
HXDLIN(  60)											int index7;
HXDLIN(  60)											if (undoImage3->useVirtualPos) {
HXDLIN(  60)												index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            											}
            											else {
HXDLIN(  60)												index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            											}
HXDLIN(  60)											::iterMagic::Iimg_obj::set(this54,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  60)			bool found1 = false;
HXDLIN(  60)			Float min9 = ( (Float)(0) );
HXDLIN(  60)			Float max1 = ( (Float)(0) );
HXDLIN(  60)			int a9 = 0;
HXDLIN(  60)			int r6 = 0;
HXDLIN(  60)			int g6 = 0;
HXDLIN(  60)			int b10 = 0;
HXDLIN(  60)			{
HXDLIN(  60)				int _g_min2 = xIter31->start;
HXDLIN(  60)				int _g_max2 = xIter31->max;
HXDLIN(  60)				while((_g_min2 < _g_max2)){
HXDLIN(  60)					_g_min2 = (_g_min2 + 1);
HXDLIN(  60)					int px1 = (_g_min2 - 1);
HXDLIN(  60)					Float pcx1 = (( (Float)(px1) ) - dx);
HXLINE( 695)					found1 = false;
HXLINE(  60)					{
HXDLIN(  60)						int _g_min3 = yIter31->start;
HXDLIN(  60)						int _g_max3 = yIter31->max;
HXDLIN(  60)						while((_g_min3 < _g_max3)){
HXDLIN(  60)							_g_min3 = (_g_min3 + 1);
HXDLIN(  60)							int py1 = (_g_min3 - 1);
HXDLIN(  60)							Float pcy1 = (( (Float)(py1) ) - dy);
HXDLIN(  60)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN(  60)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN(  60)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN(  60)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN(  60)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  60)							bool _hx_tmp12;
HXDLIN(  60)							bool _hx_tmp13;
HXDLIN(  60)							if ((ratioA1 >= 0)) {
HXDLIN(  60)								_hx_tmp13 = (ratioB1 >= 0);
            							}
            							else {
HXDLIN(  60)								_hx_tmp13 = false;
            							}
HXDLIN(  60)							if (_hx_tmp13) {
HXDLIN(  60)								_hx_tmp12 = (ratioC1 >= 0);
            							}
            							else {
HXDLIN(  60)								_hx_tmp12 = false;
            							}
HXDLIN(  60)							if (_hx_tmp12) {
HXDLIN(  60)								if (softBC) {
HXDLIN(  60)									if (softCD) {
HXDLIN(  60)										if ((ratioB1 < ratioC1)) {
HXDLIN(  60)											min9 = ratioB1;
            										}
            										else {
HXDLIN(  60)											min9 = ratioC1;
            										}
HXDLIN(  60)										if ((ratioA1 > ratioB1)) {
HXDLIN(  60)											max1 = ratioA1;
            										}
            										else {
HXDLIN(  60)											max1 = ratioB1;
            										}
HXDLIN(  60)										if (!((max1 > ratioC1))) {
HXDLIN(  60)											max1 = ratioC1;
            										}
HXLINE( 735)										max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE(  60)										if (!((min9 < max1))) {
HXDLIN(  60)											min9 = ((max1 + min9) / ( (Float)(2) ));
            										}
HXDLIN(  60)										int i19 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN(  60)										if ((i19 > 255)) {
HXLINE(  24)											i19 = 255;
            										}
HXLINE(  60)										if ((i19 < 0)) {
HXLINE(  25)											i19 = 0;
            										}
HXLINE(  60)										a9 = i19;
            									}
            									else {
HXLINE( 722)										min9 = ratioC1;
HXLINE(  60)										int i20 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN(  60)										if ((i20 > 255)) {
HXLINE(  24)											i20 = 255;
            										}
HXLINE(  60)										if ((i20 < 0)) {
HXLINE(  25)											i20 = 0;
            										}
HXLINE(  60)										a9 = i20;
            									}
            								}
            								else {
HXDLIN(  60)									if (softCD) {
HXLINE( 712)										min9 = ratioB1;
HXLINE(  60)										int i21 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN(  60)										if ((i21 > 255)) {
HXLINE(  24)											i21 = 255;
            										}
HXLINE(  60)										if ((i21 < 0)) {
HXLINE(  25)											i21 = 0;
            										}
HXLINE(  60)										a9 = i21;
            									}
            									else {
HXDLIN(  60)										int i22 = ::Std_obj::_hx_int(( (Float)(aA1) ));
HXDLIN(  60)										if ((i22 > 255)) {
HXLINE(  24)											i22 = 255;
            										}
HXLINE(  60)										if ((i22 < 0)) {
HXLINE(  25)											i22 = 0;
            										}
HXLINE(  60)										a9 = i22;
            									}
            								}
HXDLIN(  60)								int i23 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN(  60)								if ((i23 > 255)) {
HXLINE(  24)									i23 = 255;
            								}
HXLINE(  60)								if ((i23 < 0)) {
HXLINE(  25)									i23 = 0;
            								}
HXLINE( 747)								r6 = i23;
HXLINE(  60)								int i24 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN(  60)								if ((i24 > 255)) {
HXLINE(  24)									i24 = 255;
            								}
HXLINE(  60)								if ((i24 < 0)) {
HXLINE(  25)									i24 = 0;
            								}
HXLINE( 748)								g6 = i24;
HXLINE(  60)								int i25 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN(  60)								if ((i25 > 255)) {
HXLINE(  24)									i25 = 255;
            								}
HXLINE(  60)								if ((i25 < 0)) {
HXLINE(  25)									i25 = 0;
            								}
HXLINE( 749)								b10 = i25;
HXLINE(  60)								{
HXDLIN(  60)									int location3;
HXDLIN(  60)									if (this1->useVirtualPos) {
HXDLIN(  60)										location3 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            									}
            									else {
HXDLIN(  60)										location3 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            									}
HXDLIN(  60)									bool _hx_tmp14;
HXDLIN(  60)									if (this1->transparent) {
HXDLIN(  60)										_hx_tmp14 = (a9 < 254);
            									}
            									else {
HXDLIN(  60)										_hx_tmp14 = false;
            									}
HXDLIN(  60)									if (_hx_tmp14) {
HXDLIN(  60)										int this55 = ::iterMagic::Iimg_obj::get(this1->image,location3);
HXDLIN(  60)										int old1;
HXDLIN(  60)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)											old1 = ((((((this55 >> 24) & 255) << 24) | ((this55 & 255) << 16)) | (((this55 >> 8) & 255) << 8)) | ((this55 >> 16) & 255));
            										}
            										else {
HXDLIN(  60)											old1 = this55;
            										}
HXDLIN(  60)										int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN(  60)										Float a13;
HXDLIN(  60)										int this56 = ((old1 >> 24) & 255);
HXDLIN(  60)										if ((this56 == 0)) {
HXDLIN(  60)											a13 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											a13 = (( (Float)(this56) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float r13;
HXDLIN(  60)										int this57 = ((old1 >> 16) & 255);
HXDLIN(  60)										if ((this57 == 0)) {
HXDLIN(  60)											r13 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											r13 = (( (Float)(this57) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float g13;
HXDLIN(  60)										int this58 = ((old1 >> 8) & 255);
HXDLIN(  60)										if ((this58 == 0)) {
HXDLIN(  60)											g13 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											g13 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float b14;
HXDLIN(  60)										int this59 = (old1 & 255);
HXDLIN(  60)										if ((this59 == 0)) {
HXDLIN(  60)											b14 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											b14 = (( (Float)(this59) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float a23;
HXDLIN(  60)										int this60 = ((rhs1 >> 24) & 255);
HXDLIN(  60)										if ((this60 == 0)) {
HXDLIN(  60)											a23 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											a23 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float r23;
HXDLIN(  60)										int this61 = ((rhs1 >> 16) & 255);
HXDLIN(  60)										if ((this61 == 0)) {
HXDLIN(  60)											r23 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											r23 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float g23;
HXDLIN(  60)										int this62 = ((rhs1 >> 8) & 255);
HXDLIN(  60)										if ((this62 == 0)) {
HXDLIN(  60)											g23 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											g23 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float b24;
HXDLIN(  60)										int this63 = (rhs1 & 255);
HXDLIN(  60)										if ((this63 == 0)) {
HXDLIN(  60)											b24 = ((Float)0.);
            										}
            										else {
HXDLIN(  60)											b24 = (( (Float)(this63) ) / ( (Float)(255) ));
            										}
HXDLIN(  60)										Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  60)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  60)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  60)										int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN(  60)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  60)										int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN(  60)										{
HXDLIN(  60)											int _hx_tmp15;
HXDLIN(  60)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  60)												_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXDLIN(  60)												_hx_tmp15 = blended3;
            											}
HXDLIN(  60)											::iterMagic::Iimg_obj::set(this1->image,location3,_hx_tmp15);
            										}
            									}
            									else {
HXDLIN(  60)										int value1;
HXDLIN(  60)										if (this1->isLittle) {
HXDLIN(  60)											value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXDLIN(  60)											value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            										}
HXDLIN(  60)										::iterMagic::Iimg_obj::set(this1->image,location3,value1);
            									}
            								}
HXLINE( 751)								found1 = true;
            							}
            							else {
HXDLIN(  60)								if (found1) {
HXDLIN(  60)									goto _hx_goto_81;
            								}
            							}
            						}
            						_hx_goto_81:;
            					}
            				}
            			}
HXDLIN(  60)			if ((hasHit == false)) {
HXDLIN(  60)				 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,cx,cy,dx,dy,true);
HXDLIN(  60)				if (hasUndo1) {
HXDLIN(  60)					v5->undoImage = undoImage3;
HXDLIN(  60)					v5->undoX = xIter31->start;
HXDLIN(  60)					v5->undoY = yIter31->start;
            				}
            			}
            		}
HXDLIN(  60)		if ((hasHit == true)) {
HXDLIN(  60)			 ::pi_xy::algo::HitQuad v6 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN(  60)			return v6;
            		}
            		else {
HXDLIN(  60)			return null();
            		}
HXDLIN(  60)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC16(SoftShape_Impl__obj,quad,return )

 ::pi_xy::algo::HitQuad SoftShape_Impl__obj::quadFudge( ::pi_xy::ImageStruct this1,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,int color,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_softAB,::hx::Null< bool >  __o_softBC,::hx::Null< bool >  __o_softCD,::hx::Null< bool >  __o_softDA,::hx::Null< bool >  __o_hasHit){
            		Float soft = __o_soft.Default(40);
            		bool softAB = __o_softAB.Default(true);
            		bool softBC = __o_softBC.Default(true);
            		bool softCD = __o_softCD.Default(true);
            		bool softDA = __o_softDA.Default(true);
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_86_quadFudge)
HXDLIN(  86)		{
HXDLIN(  86)			bool hasUndo = true;
HXDLIN(  86)			int aA = ((color >> 24) & 255);
HXDLIN(  86)			int rA = ((color >> 16) & 255);
HXDLIN(  86)			int gA = ((color >> 8) & 255);
HXDLIN(  86)			int bA = (color & 255);
HXDLIN(  86)			Float bcx = (bx - cx);
HXDLIN(  86)			Float bcy = (by - cy);
HXDLIN(  86)			Float acx = (ax - cx);
HXDLIN(  86)			Float acy = (ay - cy);
HXDLIN(  86)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  86)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  86)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  86)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  86)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  86)			if ((ax > bx)) {
HXDLIN(  86)				if ((ax > cx)) {
HXDLIN(  86)					int min;
HXDLIN(  86)					if ((bx > cx)) {
HXDLIN(  86)						min = ::Math_obj::floor(cx);
            					}
            					else {
HXDLIN(  86)						min = ::Math_obj::floor(bx);
            					}
HXDLIN(  86)					int ii_min = min;
HXDLIN(  86)					int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  86)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXDLIN(  86)					int ii_min1 = ::Math_obj::floor(bx);
HXDLIN(  86)					int ii_max1 = ::Math_obj::ceil(cx);
HXDLIN(  86)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXDLIN(  86)				if ((bx > cx)) {
HXDLIN(  86)					int min1;
HXDLIN(  86)					if ((ax > cx)) {
HXDLIN(  86)						min1 = ::Math_obj::floor(cx);
            					}
            					else {
HXDLIN(  86)						min1 = ::Math_obj::ceil(ax);
            					}
HXDLIN(  86)					int ii_min2 = min1;
HXDLIN(  86)					int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN(  86)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXDLIN(  86)					int ii_min3 = ::Math_obj::floor(ax);
HXDLIN(  86)					int ii_max3 = ::Math_obj::ceil(cx);
HXDLIN(  86)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN(  86)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  86)			if ((ay > by)) {
HXDLIN(  86)				if ((ay > cy)) {
HXDLIN(  86)					int min2;
HXDLIN(  86)					if ((by > cy)) {
HXDLIN(  86)						min2 = ::Math_obj::floor(cy);
            					}
            					else {
HXDLIN(  86)						min2 = ::Math_obj::floor(by);
            					}
HXDLIN(  86)					int ii_min4 = min2;
HXDLIN(  86)					int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN(  86)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXDLIN(  86)					int ii_min5 = ::Math_obj::floor(by);
HXDLIN(  86)					int ii_max5 = ::Math_obj::ceil(cy);
HXDLIN(  86)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXDLIN(  86)				if ((by > cy)) {
HXDLIN(  86)					int min3;
HXDLIN(  86)					if ((ay > cy)) {
HXDLIN(  86)						min3 = ::Math_obj::floor(cy);
            					}
            					else {
HXDLIN(  86)						min3 = ::Math_obj::ceil(ay);
            					}
HXDLIN(  86)					int ii_min6 = min3;
HXDLIN(  86)					int ii_max6 = ::Math_obj::ceil(by);
HXDLIN(  86)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXDLIN(  86)					int ii_min7 = ::Math_obj::floor(ay);
HXDLIN(  86)					int ii_max7 = ::Math_obj::ceil(cy);
HXDLIN(  86)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN(  86)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  86)			if (hasUndo) {
HXDLIN(  86)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  86)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  86)				 ::Dynamic imageType = null();
HXDLIN(  86)				 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  86)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  86)				::Dynamic undoImage1;
HXDLIN(  86)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXDLIN(  86)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  86)						 ::iterMagic::BytesImg b = byt;
HXDLIN(  86)						{
HXDLIN(  86)							b->width = width;
HXDLIN(  86)							b->height = height;
HXDLIN(  86)							b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  86)							b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  86)							{
HXDLIN(  86)								int len = b->length;
HXDLIN(  86)								int w = 0;
HXDLIN(  86)								{
HXDLIN(  86)									int _g = 0;
HXDLIN(  86)									int _g1 = b->height;
HXDLIN(  86)									while((_g < _g1)){
HXDLIN(  86)										_g = (_g + 1);
HXDLIN(  86)										int y = (_g - 1);
HXDLIN(  86)										{
HXDLIN(  86)											int _g2 = 0;
HXDLIN(  86)											int _g3 = b->width;
HXDLIN(  86)											while((_g2 < _g3)){
HXDLIN(  86)												_g2 = (_g2 + 1);
HXDLIN(  86)												int x = (_g2 - 1);
HXDLIN(  86)												{
HXDLIN(  86)													w = (w + 1);
HXDLIN(  86)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  86)												{
HXDLIN(  86)													w = (w + 1);
HXDLIN(  86)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  86)												{
HXDLIN(  86)													w = (w + 1);
HXDLIN(  86)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  86)												{
HXDLIN(  86)													w = (w + 1);
HXDLIN(  86)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  86)						undoImage1 = b;
            					}
            					break;
            					case (int)1: {
HXDLIN(  86)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  86)						 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  86)						{
HXDLIN(  86)							a->width = width;
HXDLIN(  86)							a->height = height;
HXDLIN(  86)							a->data = ::Array_obj< int >::__new(0);
HXDLIN(  86)							a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  86)							{
HXDLIN(  86)								int _g4 = 0;
HXDLIN(  86)								int _g5 = a->length;
HXDLIN(  86)								while((_g4 < _g5)){
HXDLIN(  86)									_g4 = (_g4 + 1);
HXDLIN(  86)									int i = (_g4 - 1);
HXDLIN(  86)									a->data[i] = 0;
            								}
            							}
            						}
HXDLIN(  86)						undoImage1 = a;
            					}
            					break;
            					case (int)2: {
HXDLIN(  86)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  86)						 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  86)						{
HXDLIN(  86)							b1->width = width;
HXDLIN(  86)							b1->height = height;
HXDLIN(  86)							b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  86)							int size = (b1->length * 4);
HXDLIN(  86)							b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  86)							{
HXDLIN(  86)								int _g6 = 0;
HXDLIN(  86)								int _g7 = b1->length;
HXDLIN(  86)								while((_g6 < _g7)){
HXDLIN(  86)									_g6 = (_g6 + 1);
HXDLIN(  86)									int i1 = (_g6 - 1);
HXDLIN(  86)									{
HXDLIN(  86)										 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN(  86)										bool undoImage2;
HXDLIN(  86)										if ((i1 >= 0)) {
HXDLIN(  86)											undoImage2 = (i1 < (this3->byteLength >> 2));
            										}
            										else {
HXDLIN(  86)											undoImage2 = false;
            										}
HXDLIN(  86)										if (undoImage2) {
HXDLIN(  86)											 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN(  86)											int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN(  86)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  86)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  86)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  86)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  86)						undoImage1 = b1;
            					}
            					break;
            					case (int)3: {
HXDLIN(  86)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  86)						 ::iterMagic::VecIntImg v = vec;
HXDLIN(  86)						{
HXDLIN(  86)							v->width = width;
HXDLIN(  86)							v->height = height;
HXDLIN(  86)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  86)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  86)							{
HXDLIN(  86)								int _g8 = 0;
HXDLIN(  86)								int _g9 = v->length;
HXDLIN(  86)								while((_g8 < _g9)){
HXDLIN(  86)									_g8 = (_g8 + 1);
HXDLIN(  86)									int i2 = (_g8 - 1);
HXDLIN(  86)									v->data->__unsafe_set(i2,0);
            								}
            							}
            						}
HXDLIN(  86)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXDLIN(  86)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  86)						 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  86)						{
HXDLIN(  86)							b2->width = width;
HXDLIN(  86)							b2->height = height;
HXDLIN(  86)							b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  86)							b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  86)							{
HXDLIN(  86)								int len1 = b2->length;
HXDLIN(  86)								 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  86)								if (::hx::IsNull( d->head )) {
HXDLIN(  86)									int _g10 = 0;
HXDLIN(  86)									int _g11 = len1;
HXDLIN(  86)									while((_g10 < _g11)){
HXDLIN(  86)										_g10 = (_g10 + 1);
HXDLIN(  86)										int i3 = (_g10 - 1);
HXDLIN(  86)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXDLIN(  86)									int _g12 = 0;
HXDLIN(  86)									int _g13 = len1;
HXDLIN(  86)									while((_g12 < _g13)){
HXDLIN(  86)										_g12 = (_g12 + 1);
HXDLIN(  86)										int i4 = (_g12 - 1);
HXDLIN(  86)										{
HXDLIN(  86)											 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  86)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  86)											{
HXDLIN(  86)												int _g14 = 0;
HXDLIN(  86)												int _g15 = i4;
HXDLIN(  86)												while((_g14 < _g15)){
HXDLIN(  86)													_g14 = (_g14 + 1);
HXDLIN(  86)													int i5 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE(  86)											if (::hx::IsNull( prev )) {
HXDLIN(  86)												b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  86)												l = null();
            											}
            											else {
HXDLIN(  86)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  86)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  86)						undoImage1 = b2;
            					}
            					break;
            				}
HXDLIN(  86)				this2->image = undoImage1;
HXDLIN(  86)				this2->width = width;
HXDLIN(  86)				this2->height = height;
HXDLIN(  86)				this2->imageType = ( (int)(imageType) );
HXDLIN(  86)				undoImage = this2;
HXDLIN(  86)				{
HXDLIN(  86)					int rectLeft = xIter3->start;
HXDLIN(  86)					int rectTop = yIter3->start;
HXDLIN(  86)					int rectRight = xIter3->max;
HXDLIN(  86)					bool forceClear = false;
HXDLIN(  86)					{
HXDLIN(  86)						int _g16 = rectTop;
HXDLIN(  86)						int _g17 = yIter3->max;
HXDLIN(  86)						while((_g16 < _g17)){
HXDLIN(  86)							_g16 = (_g16 + 1);
HXDLIN(  86)							int dy1 = (_g16 - 1);
HXDLIN(  86)							{
HXDLIN(  86)								int _g18 = rectLeft;
HXDLIN(  86)								int _g19 = rectRight;
HXDLIN(  86)								while((_g18 < _g19)){
HXDLIN(  86)									_g18 = (_g18 + 1);
HXDLIN(  86)									int dx1 = (_g18 - 1);
HXDLIN(  86)									::Dynamic this4 = this1->image;
HXDLIN(  86)									int index;
HXDLIN(  86)									if (this1->useVirtualPos) {
HXDLIN(  86)										index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx1) - this1->virtualX));
            									}
            									else {
HXDLIN(  86)										index = ::Std_obj::_hx_int(( (Float)(((dy1 * this1->width) + dx1)) ));
            									}
HXDLIN(  86)									int c = ::iterMagic::Iimg_obj::get(this4,index);
HXDLIN(  86)									int col;
HXDLIN(  86)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXDLIN(  86)										col = c;
            									}
HXDLIN(  86)									bool _hx_tmp;
HXDLIN(  86)									if (this1->useMask) {
HXDLIN(  86)										_hx_tmp = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN(  86)										_hx_tmp = false;
            									}
HXDLIN(  86)									if (_hx_tmp) {
HXDLIN(  86)										 ::pi_xy::ImageStruct this5 = this1->mask;
HXDLIN(  86)										::Dynamic this6 = this5->image;
HXDLIN(  86)										int index1;
HXDLIN(  86)										if (this5->useVirtualPos) {
HXDLIN(  86)											index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx1) - this5->virtualX));
            										}
            										else {
HXDLIN(  86)											index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this5->width) + dx1)) ));
            										}
HXDLIN(  86)										int c1 = ::iterMagic::Iimg_obj::get(this6,index1);
HXDLIN(  86)										int v1;
HXDLIN(  86)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)											v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXDLIN(  86)											v1 = c1;
            										}
HXDLIN(  86)										int maskPixel = v1;
HXDLIN(  86)										int this7 = col;
HXDLIN(  86)										if ((maskPixel == 0)) {
HXDLIN(  86)											col = this7;
            										}
            										else {
HXDLIN(  86)											Float m0;
HXDLIN(  86)											int this8 = ((maskPixel >> 24) & 255);
HXDLIN(  86)											if ((this8 == 0)) {
HXDLIN(  86)												m0 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												m0 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float m1;
HXDLIN(  86)											int this9 = ((maskPixel >> 16) & 255);
HXDLIN(  86)											if ((this9 == 0)) {
HXDLIN(  86)												m1 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												m1 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float m2;
HXDLIN(  86)											int this10 = ((maskPixel >> 8) & 255);
HXDLIN(  86)											if ((this10 == 0)) {
HXDLIN(  86)												m2 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												m2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float m3;
HXDLIN(  86)											int this11 = (maskPixel & 255);
HXDLIN(  86)											if ((this11 == 0)) {
HXDLIN(  86)												m3 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												m3 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this7 >> 24) & 255)) )));
HXDLIN(  86)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this7 >> 16) & 255)) )));
HXDLIN(  86)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this7 >> 8) & 255)) )));
HXDLIN(  86)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this7 & 255)) )));
HXDLIN(  86)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  86)									if ((col != 0)) {
HXDLIN(  86)										int x1 = (dx1 - rectLeft);
HXDLIN(  86)										int y1 = (dy1 - rectTop);
HXDLIN(  86)										int c2 = col;
HXDLIN(  86)										bool _hx_tmp1;
HXDLIN(  86)										if ((((c2 >> 24) & 255) < 254)) {
HXDLIN(  86)											_hx_tmp1 = undoImage->transparent;
            										}
            										else {
HXDLIN(  86)											_hx_tmp1 = false;
            										}
HXDLIN(  86)										if (_hx_tmp1) {
HXDLIN(  86)											int location;
HXDLIN(  86)											if (undoImage->useVirtualPos) {
HXDLIN(  86)												location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXDLIN(  86)												location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN(  86)											int this12 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  86)											int this13;
HXDLIN(  86)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)												this13 = ((((((this12 >> 24) & 255) << 24) | ((this12 & 255) << 16)) | (((this12 >> 8) & 255) << 8)) | ((this12 >> 16) & 255));
            											}
            											else {
HXDLIN(  86)												this13 = this12;
            											}
HXDLIN(  86)											Float a1;
HXDLIN(  86)											int this14 = ((this13 >> 24) & 255);
HXDLIN(  86)											if ((this14 == 0)) {
HXDLIN(  86)												a1 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												a1 = (( (Float)(this14) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float r1;
HXDLIN(  86)											int this15 = ((this13 >> 16) & 255);
HXDLIN(  86)											if ((this15 == 0)) {
HXDLIN(  86)												r1 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float g1;
HXDLIN(  86)											int this16 = ((this13 >> 8) & 255);
HXDLIN(  86)											if ((this16 == 0)) {
HXDLIN(  86)												g1 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float b11;
HXDLIN(  86)											int this17 = (this13 & 255);
HXDLIN(  86)											if ((this17 == 0)) {
HXDLIN(  86)												b11 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float a2;
HXDLIN(  86)											int this18 = ((col >> 24) & 255);
HXDLIN(  86)											if ((this18 == 0)) {
HXDLIN(  86)												a2 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												a2 = (( (Float)(this18) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float r2;
HXDLIN(  86)											int this19 = ((col >> 16) & 255);
HXDLIN(  86)											if ((this19 == 0)) {
HXDLIN(  86)												r2 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float g2;
HXDLIN(  86)											int this20 = ((col >> 8) & 255);
HXDLIN(  86)											if ((this20 == 0)) {
HXDLIN(  86)												g2 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float b21;
HXDLIN(  86)											int this21 = (col & 255);
HXDLIN(  86)											if ((this21 == 0)) {
HXDLIN(  86)												b21 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  86)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  86)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  86)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  86)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  86)											int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  86)											{
HXDLIN(  86)												int _hx_tmp2;
HXDLIN(  86)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)													_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXDLIN(  86)													_hx_tmp2 = blended;
            												}
HXDLIN(  86)												::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            											}
            										}
            										else {
HXDLIN(  86)											::Dynamic this22 = undoImage->image;
HXDLIN(  86)											int index2;
HXDLIN(  86)											if (undoImage->useVirtualPos) {
HXDLIN(  86)												index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXDLIN(  86)												index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN(  86)											int _hx_tmp3;
HXDLIN(  86)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)												_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXDLIN(  86)												_hx_tmp3 = c2;
            											}
HXDLIN(  86)											::iterMagic::Iimg_obj::set(this22,index2,_hx_tmp3);
            										}
            									}
            									else {
HXDLIN(  86)										if (forceClear) {
HXDLIN(  86)											::Dynamic this23 = undoImage->image;
HXDLIN(  86)											int x2 = (dx1 - rectLeft);
HXDLIN(  86)											int y2 = (dy1 - rectTop);
HXDLIN(  86)											int index3;
HXDLIN(  86)											if (undoImage->useVirtualPos) {
HXDLIN(  86)												index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            											}
            											else {
HXDLIN(  86)												index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            											}
HXDLIN(  86)											::iterMagic::Iimg_obj::set(this23,index3,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  86)			bool found = false;
HXDLIN(  86)			Float min4 = ( (Float)(0) );
HXDLIN(  86)			Float max = ( (Float)(0) );
HXDLIN(  86)			int a5 = 0;
HXDLIN(  86)			int r3 = 0;
HXDLIN(  86)			int g3 = 0;
HXDLIN(  86)			int b4 = 0;
HXDLIN(  86)			{
HXDLIN(  86)				int _g_min = xIter3->start;
HXDLIN(  86)				int _g_max = xIter3->max;
HXDLIN(  86)				while((_g_min < _g_max)){
HXDLIN(  86)					_g_min = (_g_min + 1);
HXDLIN(  86)					int px = (_g_min - 1);
HXDLIN(  86)					Float pcx = (( (Float)(px) ) - cx);
HXLINE( 695)					found = false;
HXLINE(  86)					{
HXDLIN(  86)						int _g_min1 = yIter3->start;
HXDLIN(  86)						int _g_max1 = yIter3->max;
HXDLIN(  86)						while((_g_min1 < _g_max1)){
HXDLIN(  86)							_g_min1 = (_g_min1 + 1);
HXDLIN(  86)							int py = (_g_min1 - 1);
HXDLIN(  86)							Float pcy = (( (Float)(py) ) - cy);
HXDLIN(  86)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  86)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  86)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  86)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  86)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  86)							bool _hx_tmp4;
HXDLIN(  86)							bool _hx_tmp5;
HXDLIN(  86)							if ((ratioA >= 0)) {
HXDLIN(  86)								_hx_tmp5 = (ratioB >= 0);
            							}
            							else {
HXDLIN(  86)								_hx_tmp5 = false;
            							}
HXDLIN(  86)							if (_hx_tmp5) {
HXDLIN(  86)								_hx_tmp4 = (ratioC >= 0);
            							}
            							else {
HXDLIN(  86)								_hx_tmp4 = false;
            							}
HXDLIN(  86)							if (_hx_tmp4) {
HXDLIN(  86)								if (softAB) {
HXDLIN(  86)									if (softBC) {
HXDLIN(  86)										if ((ratioB < ratioC)) {
HXDLIN(  86)											min4 = ratioB;
            										}
            										else {
HXDLIN(  86)											min4 = ratioC;
            										}
HXDLIN(  86)										if ((ratioA > ratioB)) {
HXDLIN(  86)											max = ratioA;
            										}
            										else {
HXDLIN(  86)											max = ratioB;
            										}
HXDLIN(  86)										if (!((max > ratioC))) {
HXDLIN(  86)											max = ratioC;
            										}
HXLINE( 735)										max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE(  86)										if (!((min4 < max))) {
HXDLIN(  86)											min4 = ((max + min4) / ( (Float)(2) ));
            										}
HXDLIN(  86)										int i6 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN(  86)										if ((i6 > 255)) {
HXLINE(  24)											i6 = 255;
            										}
HXLINE(  86)										if ((i6 < 0)) {
HXLINE(  25)											i6 = 0;
            										}
HXLINE(  86)										a5 = i6;
            									}
            									else {
HXLINE( 722)										min4 = ratioC;
HXLINE(  86)										int i7 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN(  86)										if ((i7 > 255)) {
HXLINE(  24)											i7 = 255;
            										}
HXLINE(  86)										if ((i7 < 0)) {
HXLINE(  25)											i7 = 0;
            										}
HXLINE(  86)										a5 = i7;
            									}
            								}
            								else {
HXDLIN(  86)									if (softBC) {
HXLINE( 712)										min4 = ratioB;
HXLINE(  86)										int i8 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN(  86)										if ((i8 > 255)) {
HXLINE(  24)											i8 = 255;
            										}
HXLINE(  86)										if ((i8 < 0)) {
HXLINE(  25)											i8 = 0;
            										}
HXLINE(  86)										a5 = i8;
            									}
            									else {
HXDLIN(  86)										int i9 = ::Std_obj::_hx_int(( (Float)(aA) ));
HXDLIN(  86)										if ((i9 > 255)) {
HXLINE(  24)											i9 = 255;
            										}
HXLINE(  86)										if ((i9 < 0)) {
HXLINE(  25)											i9 = 0;
            										}
HXLINE(  86)										a5 = i9;
            									}
            								}
HXDLIN(  86)								int i10 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN(  86)								if ((i10 > 255)) {
HXLINE(  24)									i10 = 255;
            								}
HXLINE(  86)								if ((i10 < 0)) {
HXLINE(  25)									i10 = 0;
            								}
HXLINE( 747)								r3 = i10;
HXLINE(  86)								int i11 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN(  86)								if ((i11 > 255)) {
HXLINE(  24)									i11 = 255;
            								}
HXLINE(  86)								if ((i11 < 0)) {
HXLINE(  25)									i11 = 0;
            								}
HXLINE( 748)								g3 = i11;
HXLINE(  86)								int i12 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN(  86)								if ((i12 > 255)) {
HXLINE(  24)									i12 = 255;
            								}
HXLINE(  86)								if ((i12 < 0)) {
HXLINE(  25)									i12 = 0;
            								}
HXLINE( 749)								b4 = i12;
HXLINE(  86)								{
HXDLIN(  86)									int location1;
HXDLIN(  86)									if (this1->useVirtualPos) {
HXDLIN(  86)										location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this1->virtualY) * ( (Float)(this1->width) )) + px) - this1->virtualX));
            									}
            									else {
HXDLIN(  86)										location1 = ::Std_obj::_hx_int(( (Float)(((py * this1->width) + px)) ));
            									}
HXDLIN(  86)									bool _hx_tmp6;
HXDLIN(  86)									if (this1->transparent) {
HXDLIN(  86)										_hx_tmp6 = (a5 < 254);
            									}
            									else {
HXDLIN(  86)										_hx_tmp6 = false;
            									}
HXDLIN(  86)									if (_hx_tmp6) {
HXDLIN(  86)										int this24 = ::iterMagic::Iimg_obj::get(this1->image,location1);
HXDLIN(  86)										int old;
HXDLIN(  86)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)											old = ((((((this24 >> 24) & 255) << 24) | ((this24 & 255) << 16)) | (((this24 >> 8) & 255) << 8)) | ((this24 >> 16) & 255));
            										}
            										else {
HXDLIN(  86)											old = this24;
            										}
HXDLIN(  86)										int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  86)										Float a11;
HXDLIN(  86)										int this25 = ((old >> 24) & 255);
HXDLIN(  86)										if ((this25 == 0)) {
HXDLIN(  86)											a11 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											a11 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float r11;
HXDLIN(  86)										int this26 = ((old >> 16) & 255);
HXDLIN(  86)										if ((this26 == 0)) {
HXDLIN(  86)											r11 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float g11;
HXDLIN(  86)										int this27 = ((old >> 8) & 255);
HXDLIN(  86)										if ((this27 == 0)) {
HXDLIN(  86)											g11 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float b12;
HXDLIN(  86)										int this28 = (old & 255);
HXDLIN(  86)										if ((this28 == 0)) {
HXDLIN(  86)											b12 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float a21;
HXDLIN(  86)										int this29 = ((rhs >> 24) & 255);
HXDLIN(  86)										if ((this29 == 0)) {
HXDLIN(  86)											a21 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float r21;
HXDLIN(  86)										int this30 = ((rhs >> 16) & 255);
HXDLIN(  86)										if ((this30 == 0)) {
HXDLIN(  86)											r21 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float g21;
HXDLIN(  86)										int this31 = ((rhs >> 8) & 255);
HXDLIN(  86)										if ((this31 == 0)) {
HXDLIN(  86)											g21 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float b22;
HXDLIN(  86)										int this32 = (rhs & 255);
HXDLIN(  86)										if ((this32 == 0)) {
HXDLIN(  86)											b22 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  86)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  86)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  86)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  86)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  86)										int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN(  86)										{
HXDLIN(  86)											int _hx_tmp7;
HXDLIN(  86)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXDLIN(  86)												_hx_tmp7 = blended1;
            											}
HXDLIN(  86)											::iterMagic::Iimg_obj::set(this1->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXDLIN(  86)										int value;
HXDLIN(  86)										if (this1->isLittle) {
HXDLIN(  86)											value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            										}
            										else {
HXDLIN(  86)											value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            										}
HXDLIN(  86)										::iterMagic::Iimg_obj::set(this1->image,location1,value);
            									}
            								}
HXLINE( 751)								found = true;
            							}
            							else {
HXDLIN(  86)								if (found) {
HXDLIN(  86)									goto _hx_goto_94;
            								}
            							}
            						}
            						_hx_goto_94:;
            					}
            				}
            			}
HXDLIN(  86)			if ((hasHit == false)) {
HXDLIN(  86)				 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXDLIN(  86)				if (hasUndo) {
HXDLIN(  86)					v2->undoImage = undoImage;
HXDLIN(  86)					v2->undoX = xIter3->start;
HXDLIN(  86)					v2->undoY = yIter3->start;
            				}
            			}
            		}
HXDLIN(  86)		{
HXDLIN(  86)			bool hasUndo1 = true;
HXDLIN(  86)			int aA1 = ((color >> 24) & 255);
HXDLIN(  86)			int rA1 = ((color >> 16) & 255);
HXDLIN(  86)			int gA1 = ((color >> 8) & 255);
HXDLIN(  86)			int bA1 = (color & 255);
HXDLIN(  86)			Float bcx1 = (cx - ax);
HXDLIN(  86)			Float bcy1 = (cy - ay);
HXDLIN(  86)			Float acx1 = (dx - ax);
HXDLIN(  86)			Float acy1 = (dy - ay);
HXDLIN(  86)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  86)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  86)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  86)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  86)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  86)			if ((dx > cx)) {
HXDLIN(  86)				if ((dx > ax)) {
HXDLIN(  86)					int min5;
HXDLIN(  86)					if ((cx > ax)) {
HXDLIN(  86)						min5 = ::Math_obj::floor(ax);
            					}
            					else {
HXDLIN(  86)						min5 = ::Math_obj::floor(cx);
            					}
HXDLIN(  86)					int ii_min8 = min5;
HXDLIN(  86)					int ii_max8 = ::Math_obj::ceil(dx);
HXDLIN(  86)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXDLIN(  86)					int ii_min9 = ::Math_obj::floor(cx);
HXDLIN(  86)					int ii_max9 = ::Math_obj::ceil(ax);
HXDLIN(  86)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXDLIN(  86)				if ((cx > ax)) {
HXDLIN(  86)					int min6;
HXDLIN(  86)					if ((dx > ax)) {
HXDLIN(  86)						min6 = ::Math_obj::floor(ax);
            					}
            					else {
HXDLIN(  86)						min6 = ::Math_obj::ceil(dx);
            					}
HXDLIN(  86)					int ii_min10 = min6;
HXDLIN(  86)					int ii_max10 = ::Math_obj::ceil(cx);
HXDLIN(  86)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXDLIN(  86)					int ii_min11 = ::Math_obj::floor(dx);
HXDLIN(  86)					int ii_max11 = ::Math_obj::ceil(ax);
HXDLIN(  86)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN(  86)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  86)			if ((dy > cy)) {
HXDLIN(  86)				if ((dy > ay)) {
HXDLIN(  86)					int min7;
HXDLIN(  86)					if ((cy > ay)) {
HXDLIN(  86)						min7 = ::Math_obj::floor(ay);
            					}
            					else {
HXDLIN(  86)						min7 = ::Math_obj::floor(cy);
            					}
HXDLIN(  86)					int ii_min12 = min7;
HXDLIN(  86)					int ii_max12 = ::Math_obj::ceil(dy);
HXDLIN(  86)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXDLIN(  86)					int ii_min13 = ::Math_obj::floor(cy);
HXDLIN(  86)					int ii_max13 = ::Math_obj::ceil(ay);
HXDLIN(  86)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXDLIN(  86)				if ((cy > ay)) {
HXDLIN(  86)					int min8;
HXDLIN(  86)					if ((dy > ay)) {
HXDLIN(  86)						min8 = ::Math_obj::floor(ay);
            					}
            					else {
HXDLIN(  86)						min8 = ::Math_obj::ceil(dy);
            					}
HXDLIN(  86)					int ii_min14 = min8;
HXDLIN(  86)					int ii_max14 = ::Math_obj::ceil(cy);
HXDLIN(  86)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXDLIN(  86)					int ii_min15 = ::Math_obj::floor(dy);
HXDLIN(  86)					int ii_max15 = ::Math_obj::ceil(ay);
HXDLIN(  86)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN(  86)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  86)			if (hasUndo1) {
HXDLIN(  86)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  86)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  86)				 ::Dynamic imageType1 = null();
HXDLIN(  86)				 ::pi_xy::ImageStruct this33 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  86)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  86)				::Dynamic undoImage4;
HXDLIN(  86)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXDLIN(  86)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  86)						 ::iterMagic::BytesImg b6 = byt1;
HXDLIN(  86)						{
HXDLIN(  86)							b6->width = width1;
HXDLIN(  86)							b6->height = height1;
HXDLIN(  86)							b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  86)							b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN(  86)							{
HXDLIN(  86)								int len2 = b6->length;
HXDLIN(  86)								int w1 = 0;
HXDLIN(  86)								{
HXDLIN(  86)									int _g20 = 0;
HXDLIN(  86)									int _g21 = b6->height;
HXDLIN(  86)									while((_g20 < _g21)){
HXDLIN(  86)										_g20 = (_g20 + 1);
HXDLIN(  86)										int y3 = (_g20 - 1);
HXDLIN(  86)										{
HXDLIN(  86)											int _g22 = 0;
HXDLIN(  86)											int _g23 = b6->width;
HXDLIN(  86)											while((_g22 < _g23)){
HXDLIN(  86)												_g22 = (_g22 + 1);
HXDLIN(  86)												int x3 = (_g22 - 1);
HXDLIN(  86)												{
HXDLIN(  86)													w1 = (w1 + 1);
HXDLIN(  86)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  86)												{
HXDLIN(  86)													w1 = (w1 + 1);
HXDLIN(  86)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  86)												{
HXDLIN(  86)													w1 = (w1 + 1);
HXDLIN(  86)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  86)												{
HXDLIN(  86)													w1 = (w1 + 1);
HXDLIN(  86)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  86)						undoImage4 = b6;
            					}
            					break;
            					case (int)1: {
HXDLIN(  86)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  86)						 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN(  86)						{
HXDLIN(  86)							a7->width = width1;
HXDLIN(  86)							a7->height = height1;
HXDLIN(  86)							a7->data = ::Array_obj< int >::__new(0);
HXDLIN(  86)							a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  86)							{
HXDLIN(  86)								int _g24 = 0;
HXDLIN(  86)								int _g25 = a7->length;
HXDLIN(  86)								while((_g24 < _g25)){
HXDLIN(  86)									_g24 = (_g24 + 1);
HXDLIN(  86)									int i13 = (_g24 - 1);
HXDLIN(  86)									a7->data[i13] = 0;
            								}
            							}
            						}
HXDLIN(  86)						undoImage4 = a7;
            					}
            					break;
            					case (int)2: {
HXDLIN(  86)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  86)						 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN(  86)						{
HXDLIN(  86)							b7->width = width1;
HXDLIN(  86)							b7->height = height1;
HXDLIN(  86)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  86)							int size1 = (b7->length * 4);
HXDLIN(  86)							b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  86)							{
HXDLIN(  86)								int _g26 = 0;
HXDLIN(  86)								int _g27 = b7->length;
HXDLIN(  86)								while((_g26 < _g27)){
HXDLIN(  86)									_g26 = (_g26 + 1);
HXDLIN(  86)									int i14 = (_g26 - 1);
HXDLIN(  86)									{
HXDLIN(  86)										 ::haxe::io::ArrayBufferViewImpl this34 = b7->data;
HXDLIN(  86)										bool undoImage5;
HXDLIN(  86)										if ((i14 >= 0)) {
HXDLIN(  86)											undoImage5 = (i14 < (this34->byteLength >> 2));
            										}
            										else {
HXDLIN(  86)											undoImage5 = false;
            										}
HXDLIN(  86)										if (undoImage5) {
HXDLIN(  86)											 ::haxe::io::Bytes _this1 = this34->bytes;
HXDLIN(  86)											int pos1 = ((i14 << 2) + this34->byteOffset);
HXDLIN(  86)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  86)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  86)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  86)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  86)						undoImage4 = b7;
            					}
            					break;
            					case (int)3: {
HXDLIN(  86)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  86)						 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN(  86)						{
HXDLIN(  86)							v3->width = width1;
HXDLIN(  86)							v3->height = height1;
HXDLIN(  86)							v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  86)							v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN(  86)							{
HXDLIN(  86)								int _g28 = 0;
HXDLIN(  86)								int _g29 = v3->length;
HXDLIN(  86)								while((_g28 < _g29)){
HXDLIN(  86)									_g28 = (_g28 + 1);
HXDLIN(  86)									int i15 = (_g28 - 1);
HXDLIN(  86)									v3->data->__unsafe_set(i15,0);
            								}
            							}
            						}
HXDLIN(  86)						undoImage4 = v3;
            					}
            					break;
            					case (int)4: {
HXDLIN(  86)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  86)						 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN(  86)						{
HXDLIN(  86)							b8->width = width1;
HXDLIN(  86)							b8->height = height1;
HXDLIN(  86)							b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  86)							b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  86)							{
HXDLIN(  86)								int len3 = b8->length;
HXDLIN(  86)								 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN(  86)								if (::hx::IsNull( d1->head )) {
HXDLIN(  86)									int _g30 = 0;
HXDLIN(  86)									int _g31 = len3;
HXDLIN(  86)									while((_g30 < _g31)){
HXDLIN(  86)										_g30 = (_g30 + 1);
HXDLIN(  86)										int i16 = (_g30 - 1);
HXDLIN(  86)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXDLIN(  86)									int _g32 = 0;
HXDLIN(  86)									int _g33 = len3;
HXDLIN(  86)									while((_g32 < _g33)){
HXDLIN(  86)										_g32 = (_g32 + 1);
HXDLIN(  86)										int i17 = (_g32 - 1);
HXDLIN(  86)										{
HXDLIN(  86)											 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN(  86)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  86)											{
HXDLIN(  86)												int _g34 = 0;
HXDLIN(  86)												int _g35 = i17;
HXDLIN(  86)												while((_g34 < _g35)){
HXDLIN(  86)													_g34 = (_g34 + 1);
HXDLIN(  86)													int i18 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE(  86)											if (::hx::IsNull( prev1 )) {
HXDLIN(  86)												b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  86)												l1 = null();
            											}
            											else {
HXDLIN(  86)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  86)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  86)						undoImage4 = b8;
            					}
            					break;
            				}
HXDLIN(  86)				this33->image = undoImage4;
HXDLIN(  86)				this33->width = width1;
HXDLIN(  86)				this33->height = height1;
HXDLIN(  86)				this33->imageType = ( (int)(imageType1) );
HXDLIN(  86)				undoImage3 = this33;
HXDLIN(  86)				{
HXDLIN(  86)					int rectLeft1 = xIter31->start;
HXDLIN(  86)					int rectTop1 = yIter31->start;
HXDLIN(  86)					int rectRight1 = xIter31->max;
HXDLIN(  86)					bool forceClear1 = false;
HXDLIN(  86)					{
HXDLIN(  86)						int _g36 = rectTop1;
HXDLIN(  86)						int _g37 = yIter31->max;
HXDLIN(  86)						while((_g36 < _g37)){
HXDLIN(  86)							_g36 = (_g36 + 1);
HXDLIN(  86)							int dy2 = (_g36 - 1);
HXDLIN(  86)							{
HXDLIN(  86)								int _g38 = rectLeft1;
HXDLIN(  86)								int _g39 = rectRight1;
HXDLIN(  86)								while((_g38 < _g39)){
HXDLIN(  86)									_g38 = (_g38 + 1);
HXDLIN(  86)									int dx2 = (_g38 - 1);
HXDLIN(  86)									::Dynamic this35 = this1->image;
HXDLIN(  86)									int index4;
HXDLIN(  86)									if (this1->useVirtualPos) {
HXDLIN(  86)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx2) - this1->virtualX));
            									}
            									else {
HXDLIN(  86)										index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * this1->width) + dx2)) ));
            									}
HXDLIN(  86)									int c3 = ::iterMagic::Iimg_obj::get(this35,index4);
HXDLIN(  86)									int col1;
HXDLIN(  86)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)										col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXDLIN(  86)										col1 = c3;
            									}
HXDLIN(  86)									bool _hx_tmp8;
HXDLIN(  86)									if (this1->useMask) {
HXDLIN(  86)										_hx_tmp8 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN(  86)										_hx_tmp8 = false;
            									}
HXDLIN(  86)									if (_hx_tmp8) {
HXDLIN(  86)										 ::pi_xy::ImageStruct this36 = this1->mask;
HXDLIN(  86)										::Dynamic this37 = this36->image;
HXDLIN(  86)										int index5;
HXDLIN(  86)										if (this36->useVirtualPos) {
HXDLIN(  86)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this36->virtualY) * ( (Float)(this36->width) )) + dx2) - this36->virtualX));
            										}
            										else {
HXDLIN(  86)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this36->width) + dx2)) ));
            										}
HXDLIN(  86)										int c4 = ::iterMagic::Iimg_obj::get(this37,index5);
HXDLIN(  86)										int v4;
HXDLIN(  86)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)											v4 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXDLIN(  86)											v4 = c4;
            										}
HXDLIN(  86)										int maskPixel1 = v4;
HXDLIN(  86)										int this38 = col1;
HXDLIN(  86)										if ((maskPixel1 == 0)) {
HXDLIN(  86)											col1 = this38;
            										}
            										else {
HXDLIN(  86)											Float m01;
HXDLIN(  86)											int this39 = ((maskPixel1 >> 24) & 255);
HXDLIN(  86)											if ((this39 == 0)) {
HXDLIN(  86)												m01 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												m01 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float m11;
HXDLIN(  86)											int this40 = ((maskPixel1 >> 16) & 255);
HXDLIN(  86)											if ((this40 == 0)) {
HXDLIN(  86)												m11 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												m11 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float m21;
HXDLIN(  86)											int this41 = ((maskPixel1 >> 8) & 255);
HXDLIN(  86)											if ((this41 == 0)) {
HXDLIN(  86)												m21 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												m21 = (( (Float)(this41) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float m31;
HXDLIN(  86)											int this42 = (maskPixel1 & 255);
HXDLIN(  86)											if ((this42 == 0)) {
HXDLIN(  86)												m31 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												m31 = (( (Float)(this42) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this38 >> 24) & 255)) )));
HXDLIN(  86)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this38 >> 16) & 255)) )));
HXDLIN(  86)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this38 >> 8) & 255)) )));
HXDLIN(  86)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this38 & 255)) )));
HXDLIN(  86)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  86)									if ((col1 != 0)) {
HXDLIN(  86)										int x4 = (dx2 - rectLeft1);
HXDLIN(  86)										int y4 = (dy2 - rectTop1);
HXDLIN(  86)										int c5 = col1;
HXDLIN(  86)										bool _hx_tmp9;
HXDLIN(  86)										if ((((c5 >> 24) & 255) < 254)) {
HXDLIN(  86)											_hx_tmp9 = undoImage3->transparent;
            										}
            										else {
HXDLIN(  86)											_hx_tmp9 = false;
            										}
HXDLIN(  86)										if (_hx_tmp9) {
HXDLIN(  86)											int location2;
HXDLIN(  86)											if (undoImage3->useVirtualPos) {
HXDLIN(  86)												location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXDLIN(  86)												location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN(  86)											int this43 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN(  86)											int this44;
HXDLIN(  86)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)												this44 = ((((((this43 >> 24) & 255) << 24) | ((this43 & 255) << 16)) | (((this43 >> 8) & 255) << 8)) | ((this43 >> 16) & 255));
            											}
            											else {
HXDLIN(  86)												this44 = this43;
            											}
HXDLIN(  86)											Float a12;
HXDLIN(  86)											int this45 = ((this44 >> 24) & 255);
HXDLIN(  86)											if ((this45 == 0)) {
HXDLIN(  86)												a12 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												a12 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float r12;
HXDLIN(  86)											int this46 = ((this44 >> 16) & 255);
HXDLIN(  86)											if ((this46 == 0)) {
HXDLIN(  86)												r12 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												r12 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float g12;
HXDLIN(  86)											int this47 = ((this44 >> 8) & 255);
HXDLIN(  86)											if ((this47 == 0)) {
HXDLIN(  86)												g12 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												g12 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float b13;
HXDLIN(  86)											int this48 = (this44 & 255);
HXDLIN(  86)											if ((this48 == 0)) {
HXDLIN(  86)												b13 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												b13 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float a22;
HXDLIN(  86)											int this49 = ((col1 >> 24) & 255);
HXDLIN(  86)											if ((this49 == 0)) {
HXDLIN(  86)												a22 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												a22 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float r22;
HXDLIN(  86)											int this50 = ((col1 >> 16) & 255);
HXDLIN(  86)											if ((this50 == 0)) {
HXDLIN(  86)												r22 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												r22 = (( (Float)(this50) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float g22;
HXDLIN(  86)											int this51 = ((col1 >> 8) & 255);
HXDLIN(  86)											if ((this51 == 0)) {
HXDLIN(  86)												g22 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												g22 = (( (Float)(this51) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float b23;
HXDLIN(  86)											int this52 = (col1 & 255);
HXDLIN(  86)											if ((this52 == 0)) {
HXDLIN(  86)												b23 = ((Float)0.);
            											}
            											else {
HXDLIN(  86)												b23 = (( (Float)(this52) ) / ( (Float)(255) ));
            											}
HXDLIN(  86)											Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  86)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  86)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  86)											int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  86)											int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  86)											int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN(  86)											{
HXDLIN(  86)												int _hx_tmp10;
HXDLIN(  86)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)													_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXDLIN(  86)													_hx_tmp10 = blended2;
            												}
HXDLIN(  86)												::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            											}
            										}
            										else {
HXDLIN(  86)											::Dynamic this53 = undoImage3->image;
HXDLIN(  86)											int index6;
HXDLIN(  86)											if (undoImage3->useVirtualPos) {
HXDLIN(  86)												index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXDLIN(  86)												index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN(  86)											int _hx_tmp11;
HXDLIN(  86)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)												_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXDLIN(  86)												_hx_tmp11 = c5;
            											}
HXDLIN(  86)											::iterMagic::Iimg_obj::set(this53,index6,_hx_tmp11);
            										}
            									}
            									else {
HXDLIN(  86)										if (forceClear1) {
HXDLIN(  86)											::Dynamic this54 = undoImage3->image;
HXDLIN(  86)											int x5 = (dx2 - rectLeft1);
HXDLIN(  86)											int y5 = (dy2 - rectTop1);
HXDLIN(  86)											int index7;
HXDLIN(  86)											if (undoImage3->useVirtualPos) {
HXDLIN(  86)												index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            											}
            											else {
HXDLIN(  86)												index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            											}
HXDLIN(  86)											::iterMagic::Iimg_obj::set(this54,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  86)			bool found1 = false;
HXDLIN(  86)			Float min9 = ( (Float)(0) );
HXDLIN(  86)			Float max1 = ( (Float)(0) );
HXDLIN(  86)			int a9 = 0;
HXDLIN(  86)			int r6 = 0;
HXDLIN(  86)			int g6 = 0;
HXDLIN(  86)			int b10 = 0;
HXDLIN(  86)			{
HXDLIN(  86)				int _g_min2 = xIter31->start;
HXDLIN(  86)				int _g_max2 = xIter31->max;
HXDLIN(  86)				while((_g_min2 < _g_max2)){
HXDLIN(  86)					_g_min2 = (_g_min2 + 1);
HXDLIN(  86)					int px1 = (_g_min2 - 1);
HXDLIN(  86)					Float pcx1 = (( (Float)(px1) ) - ax);
HXLINE( 695)					found1 = false;
HXLINE(  86)					{
HXDLIN(  86)						int _g_min3 = yIter31->start;
HXDLIN(  86)						int _g_max3 = yIter31->max;
HXDLIN(  86)						while((_g_min3 < _g_max3)){
HXDLIN(  86)							_g_min3 = (_g_min3 + 1);
HXDLIN(  86)							int py1 = (_g_min3 - 1);
HXDLIN(  86)							Float pcy1 = (( (Float)(py1) ) - ay);
HXDLIN(  86)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN(  86)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN(  86)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN(  86)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN(  86)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  86)							bool _hx_tmp12;
HXDLIN(  86)							bool _hx_tmp13;
HXDLIN(  86)							if ((ratioA1 >= 0)) {
HXDLIN(  86)								_hx_tmp13 = (ratioB1 >= 0);
            							}
            							else {
HXDLIN(  86)								_hx_tmp13 = false;
            							}
HXDLIN(  86)							if (_hx_tmp13) {
HXDLIN(  86)								_hx_tmp12 = (ratioC1 >= 0);
            							}
            							else {
HXDLIN(  86)								_hx_tmp12 = false;
            							}
HXDLIN(  86)							if (_hx_tmp12) {
HXDLIN(  86)								if (softCD) {
HXDLIN(  86)									if (softDA) {
HXDLIN(  86)										if ((ratioA1 < ratioC1)) {
HXDLIN(  86)											min9 = ratioA1;
            										}
            										else {
HXDLIN(  86)											min9 = ratioC1;
            										}
HXDLIN(  86)										if ((ratioA1 > ratioB1)) {
HXDLIN(  86)											max1 = ratioA1;
            										}
            										else {
HXDLIN(  86)											max1 = ratioB1;
            										}
HXDLIN(  86)										if (!((max1 > ratioC1))) {
HXDLIN(  86)											max1 = ratioC1;
            										}
HXLINE( 728)										max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE(  86)										if (!((min9 < max1))) {
HXDLIN(  86)											min9 = ((max1 + min9) / ( (Float)(2) ));
            										}
HXDLIN(  86)										int i19 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN(  86)										if ((i19 > 255)) {
HXLINE(  24)											i19 = 255;
            										}
HXLINE(  86)										if ((i19 < 0)) {
HXLINE(  25)											i19 = 0;
            										}
HXLINE(  86)										a9 = i19;
            									}
            									else {
HXLINE( 722)										min9 = ratioC1;
HXLINE(  86)										int i20 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN(  86)										if ((i20 > 255)) {
HXLINE(  24)											i20 = 255;
            										}
HXLINE(  86)										if ((i20 < 0)) {
HXLINE(  25)											i20 = 0;
            										}
HXLINE(  86)										a9 = i20;
            									}
            								}
            								else {
HXDLIN(  86)									if (softDA) {
HXLINE( 709)										min9 = ratioA1;
HXLINE(  86)										int i21 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN(  86)										if ((i21 > 255)) {
HXLINE(  24)											i21 = 255;
            										}
HXLINE(  86)										if ((i21 < 0)) {
HXLINE(  25)											i21 = 0;
            										}
HXLINE(  86)										a9 = i21;
            									}
            									else {
HXDLIN(  86)										int i22 = ::Std_obj::_hx_int(( (Float)(aA1) ));
HXDLIN(  86)										if ((i22 > 255)) {
HXLINE(  24)											i22 = 255;
            										}
HXLINE(  86)										if ((i22 < 0)) {
HXLINE(  25)											i22 = 0;
            										}
HXLINE(  86)										a9 = i22;
            									}
            								}
HXDLIN(  86)								int i23 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN(  86)								if ((i23 > 255)) {
HXLINE(  24)									i23 = 255;
            								}
HXLINE(  86)								if ((i23 < 0)) {
HXLINE(  25)									i23 = 0;
            								}
HXLINE( 747)								r6 = i23;
HXLINE(  86)								int i24 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN(  86)								if ((i24 > 255)) {
HXLINE(  24)									i24 = 255;
            								}
HXLINE(  86)								if ((i24 < 0)) {
HXLINE(  25)									i24 = 0;
            								}
HXLINE( 748)								g6 = i24;
HXLINE(  86)								int i25 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN(  86)								if ((i25 > 255)) {
HXLINE(  24)									i25 = 255;
            								}
HXLINE(  86)								if ((i25 < 0)) {
HXLINE(  25)									i25 = 0;
            								}
HXLINE( 749)								b10 = i25;
HXLINE(  86)								{
HXDLIN(  86)									int location3;
HXDLIN(  86)									if (this1->useVirtualPos) {
HXDLIN(  86)										location3 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            									}
            									else {
HXDLIN(  86)										location3 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            									}
HXDLIN(  86)									bool _hx_tmp14;
HXDLIN(  86)									if (this1->transparent) {
HXDLIN(  86)										_hx_tmp14 = (a9 < 254);
            									}
            									else {
HXDLIN(  86)										_hx_tmp14 = false;
            									}
HXDLIN(  86)									if (_hx_tmp14) {
HXDLIN(  86)										int this55 = ::iterMagic::Iimg_obj::get(this1->image,location3);
HXDLIN(  86)										int old1;
HXDLIN(  86)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)											old1 = ((((((this55 >> 24) & 255) << 24) | ((this55 & 255) << 16)) | (((this55 >> 8) & 255) << 8)) | ((this55 >> 16) & 255));
            										}
            										else {
HXDLIN(  86)											old1 = this55;
            										}
HXDLIN(  86)										int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN(  86)										Float a13;
HXDLIN(  86)										int this56 = ((old1 >> 24) & 255);
HXDLIN(  86)										if ((this56 == 0)) {
HXDLIN(  86)											a13 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											a13 = (( (Float)(this56) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float r13;
HXDLIN(  86)										int this57 = ((old1 >> 16) & 255);
HXDLIN(  86)										if ((this57 == 0)) {
HXDLIN(  86)											r13 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											r13 = (( (Float)(this57) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float g13;
HXDLIN(  86)										int this58 = ((old1 >> 8) & 255);
HXDLIN(  86)										if ((this58 == 0)) {
HXDLIN(  86)											g13 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											g13 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float b14;
HXDLIN(  86)										int this59 = (old1 & 255);
HXDLIN(  86)										if ((this59 == 0)) {
HXDLIN(  86)											b14 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											b14 = (( (Float)(this59) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float a23;
HXDLIN(  86)										int this60 = ((rhs1 >> 24) & 255);
HXDLIN(  86)										if ((this60 == 0)) {
HXDLIN(  86)											a23 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											a23 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float r23;
HXDLIN(  86)										int this61 = ((rhs1 >> 16) & 255);
HXDLIN(  86)										if ((this61 == 0)) {
HXDLIN(  86)											r23 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											r23 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float g23;
HXDLIN(  86)										int this62 = ((rhs1 >> 8) & 255);
HXDLIN(  86)										if ((this62 == 0)) {
HXDLIN(  86)											g23 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											g23 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float b24;
HXDLIN(  86)										int this63 = (rhs1 & 255);
HXDLIN(  86)										if ((this63 == 0)) {
HXDLIN(  86)											b24 = ((Float)0.);
            										}
            										else {
HXDLIN(  86)											b24 = (( (Float)(this63) ) / ( (Float)(255) ));
            										}
HXDLIN(  86)										Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  86)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  86)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  86)										int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN(  86)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  86)										int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN(  86)										{
HXDLIN(  86)											int _hx_tmp15;
HXDLIN(  86)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  86)												_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXDLIN(  86)												_hx_tmp15 = blended3;
            											}
HXDLIN(  86)											::iterMagic::Iimg_obj::set(this1->image,location3,_hx_tmp15);
            										}
            									}
            									else {
HXDLIN(  86)										int value1;
HXDLIN(  86)										if (this1->isLittle) {
HXDLIN(  86)											value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXDLIN(  86)											value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            										}
HXDLIN(  86)										::iterMagic::Iimg_obj::set(this1->image,location3,value1);
            									}
            								}
HXLINE( 751)								found1 = true;
            							}
            							else {
HXDLIN(  86)								if (found1) {
HXDLIN(  86)									goto _hx_goto_106;
            								}
            							}
            						}
            						_hx_goto_106:;
            					}
            				}
            			}
HXDLIN(  86)			if ((hasHit == false)) {
HXDLIN(  86)				 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,dx,dy,cx,cy,ax,ay,true);
HXDLIN(  86)				if (hasUndo1) {
HXDLIN(  86)					v5->undoImage = undoImage3;
HXDLIN(  86)					v5->undoX = xIter31->start;
HXDLIN(  86)					v5->undoY = yIter31->start;
            				}
            			}
            		}
HXDLIN(  86)		if ((hasHit == true)) {
HXDLIN(  86)			 ::pi_xy::algo::HitQuad v6 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN(  86)			return v6;
            		}
            		else {
HXDLIN(  86)			return null();
            		}
HXDLIN(  86)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC16(SoftShape_Impl__obj,quadFudge,return )

 ::pi_xy::algo::HitQuad SoftShape_Impl__obj::quadQuarter( ::pi_xy::ImageStruct this1,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,int color,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_softAB,::hx::Null< bool >  __o_softBC,::hx::Null< bool >  __o_softCD,::hx::Null< bool >  __o_softDA,::hx::Null< bool >  __o_hasHit){
            		Float soft = __o_soft.Default(40);
            		bool softAB = __o_softAB.Default(true);
            		bool softBC = __o_softBC.Default(true);
            		bool softCD = __o_softCD.Default(true);
            		bool softDA = __o_softDA.Default(true);
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_112_quadQuarter)
HXDLIN( 112)		{
HXDLIN( 112)			bool hasUndo = true;
HXDLIN( 112)			int aA = ((color >> 24) & 255);
HXDLIN( 112)			int rA = ((color >> 16) & 255);
HXDLIN( 112)			int gA = ((color >> 8) & 255);
HXDLIN( 112)			int bA = (color & 255);
HXDLIN( 112)			Float bcx = (bx - cx);
HXDLIN( 112)			Float bcy = (by - cy);
HXDLIN( 112)			Float acx = (ax - cx);
HXDLIN( 112)			Float acy = (ay - cy);
HXDLIN( 112)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 112)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 112)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 112)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 112)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 112)			if ((ax > bx)) {
HXDLIN( 112)				if ((ax > cx)) {
HXDLIN( 112)					int min;
HXDLIN( 112)					if ((bx > cx)) {
HXDLIN( 112)						min = ::Math_obj::floor(cx);
            					}
            					else {
HXDLIN( 112)						min = ::Math_obj::floor(bx);
            					}
HXDLIN( 112)					int ii_min = min;
HXDLIN( 112)					int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 112)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXDLIN( 112)					int ii_min1 = ::Math_obj::floor(bx);
HXDLIN( 112)					int ii_max1 = ::Math_obj::ceil(cx);
HXDLIN( 112)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXDLIN( 112)				if ((bx > cx)) {
HXDLIN( 112)					int min1;
HXDLIN( 112)					if ((ax > cx)) {
HXDLIN( 112)						min1 = ::Math_obj::floor(cx);
            					}
            					else {
HXDLIN( 112)						min1 = ::Math_obj::ceil(ax);
            					}
HXDLIN( 112)					int ii_min2 = min1;
HXDLIN( 112)					int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN( 112)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXDLIN( 112)					int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 112)					int ii_max3 = ::Math_obj::ceil(cx);
HXDLIN( 112)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN( 112)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 112)			if ((ay > by)) {
HXDLIN( 112)				if ((ay > cy)) {
HXDLIN( 112)					int min2;
HXDLIN( 112)					if ((by > cy)) {
HXDLIN( 112)						min2 = ::Math_obj::floor(cy);
            					}
            					else {
HXDLIN( 112)						min2 = ::Math_obj::floor(by);
            					}
HXDLIN( 112)					int ii_min4 = min2;
HXDLIN( 112)					int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 112)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXDLIN( 112)					int ii_min5 = ::Math_obj::floor(by);
HXDLIN( 112)					int ii_max5 = ::Math_obj::ceil(cy);
HXDLIN( 112)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXDLIN( 112)				if ((by > cy)) {
HXDLIN( 112)					int min3;
HXDLIN( 112)					if ((ay > cy)) {
HXDLIN( 112)						min3 = ::Math_obj::floor(cy);
            					}
            					else {
HXDLIN( 112)						min3 = ::Math_obj::ceil(ay);
            					}
HXDLIN( 112)					int ii_min6 = min3;
HXDLIN( 112)					int ii_max6 = ::Math_obj::ceil(by);
HXDLIN( 112)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXDLIN( 112)					int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 112)					int ii_max7 = ::Math_obj::ceil(cy);
HXDLIN( 112)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN( 112)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 112)			if (hasUndo) {
HXDLIN( 112)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 112)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 112)				 ::Dynamic imageType = null();
HXDLIN( 112)				 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 112)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 112)				::Dynamic undoImage1;
HXDLIN( 112)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXDLIN( 112)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::BytesImg b = byt;
HXDLIN( 112)						{
HXDLIN( 112)							b->width = width;
HXDLIN( 112)							b->height = height;
HXDLIN( 112)							b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 112)							b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 112)							{
HXDLIN( 112)								int len = b->length;
HXDLIN( 112)								int w = 0;
HXDLIN( 112)								{
HXDLIN( 112)									int _g = 0;
HXDLIN( 112)									int _g1 = b->height;
HXDLIN( 112)									while((_g < _g1)){
HXDLIN( 112)										_g = (_g + 1);
HXDLIN( 112)										int y = (_g - 1);
HXDLIN( 112)										{
HXDLIN( 112)											int _g2 = 0;
HXDLIN( 112)											int _g3 = b->width;
HXDLIN( 112)											while((_g2 < _g3)){
HXDLIN( 112)												_g2 = (_g2 + 1);
HXDLIN( 112)												int x = (_g2 - 1);
HXDLIN( 112)												{
HXDLIN( 112)													w = (w + 1);
HXDLIN( 112)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 112)												{
HXDLIN( 112)													w = (w + 1);
HXDLIN( 112)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 112)												{
HXDLIN( 112)													w = (w + 1);
HXDLIN( 112)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 112)												{
HXDLIN( 112)													w = (w + 1);
HXDLIN( 112)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 112)						undoImage1 = b;
            					}
            					break;
            					case (int)1: {
HXDLIN( 112)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::ArrIntImg a = arrI;
HXDLIN( 112)						{
HXDLIN( 112)							a->width = width;
HXDLIN( 112)							a->height = height;
HXDLIN( 112)							a->data = ::Array_obj< int >::__new(0);
HXDLIN( 112)							a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 112)							{
HXDLIN( 112)								int _g4 = 0;
HXDLIN( 112)								int _g5 = a->length;
HXDLIN( 112)								while((_g4 < _g5)){
HXDLIN( 112)									_g4 = (_g4 + 1);
HXDLIN( 112)									int i = (_g4 - 1);
HXDLIN( 112)									a->data[i] = 0;
            								}
            							}
            						}
HXDLIN( 112)						undoImage1 = a;
            					}
            					break;
            					case (int)2: {
HXDLIN( 112)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 112)						{
HXDLIN( 112)							b1->width = width;
HXDLIN( 112)							b1->height = height;
HXDLIN( 112)							b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 112)							int size = (b1->length * 4);
HXDLIN( 112)							b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 112)							{
HXDLIN( 112)								int _g6 = 0;
HXDLIN( 112)								int _g7 = b1->length;
HXDLIN( 112)								while((_g6 < _g7)){
HXDLIN( 112)									_g6 = (_g6 + 1);
HXDLIN( 112)									int i1 = (_g6 - 1);
HXDLIN( 112)									{
HXDLIN( 112)										 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN( 112)										bool undoImage2;
HXDLIN( 112)										if ((i1 >= 0)) {
HXDLIN( 112)											undoImage2 = (i1 < (this3->byteLength >> 2));
            										}
            										else {
HXDLIN( 112)											undoImage2 = false;
            										}
HXDLIN( 112)										if (undoImage2) {
HXDLIN( 112)											 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 112)											int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN( 112)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 112)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 112)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 112)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 112)						undoImage1 = b1;
            					}
            					break;
            					case (int)3: {
HXDLIN( 112)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::VecIntImg v = vec;
HXDLIN( 112)						{
HXDLIN( 112)							v->width = width;
HXDLIN( 112)							v->height = height;
HXDLIN( 112)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 112)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 112)							{
HXDLIN( 112)								int _g8 = 0;
HXDLIN( 112)								int _g9 = v->length;
HXDLIN( 112)								while((_g8 < _g9)){
HXDLIN( 112)									_g8 = (_g8 + 1);
HXDLIN( 112)									int i2 = (_g8 - 1);
HXDLIN( 112)									v->data->__unsafe_set(i2,0);
            								}
            							}
            						}
HXDLIN( 112)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXDLIN( 112)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 112)						{
HXDLIN( 112)							b2->width = width;
HXDLIN( 112)							b2->height = height;
HXDLIN( 112)							b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 112)							b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 112)							{
HXDLIN( 112)								int len1 = b2->length;
HXDLIN( 112)								 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 112)								if (::hx::IsNull( d->head )) {
HXDLIN( 112)									int _g10 = 0;
HXDLIN( 112)									int _g11 = len1;
HXDLIN( 112)									while((_g10 < _g11)){
HXDLIN( 112)										_g10 = (_g10 + 1);
HXDLIN( 112)										int i3 = (_g10 - 1);
HXDLIN( 112)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXDLIN( 112)									int _g12 = 0;
HXDLIN( 112)									int _g13 = len1;
HXDLIN( 112)									while((_g12 < _g13)){
HXDLIN( 112)										_g12 = (_g12 + 1);
HXDLIN( 112)										int i4 = (_g12 - 1);
HXDLIN( 112)										{
HXDLIN( 112)											 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 112)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 112)											{
HXDLIN( 112)												int _g14 = 0;
HXDLIN( 112)												int _g15 = i4;
HXDLIN( 112)												while((_g14 < _g15)){
HXDLIN( 112)													_g14 = (_g14 + 1);
HXDLIN( 112)													int i5 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE( 112)											if (::hx::IsNull( prev )) {
HXDLIN( 112)												b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 112)												l = null();
            											}
            											else {
HXDLIN( 112)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 112)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 112)						undoImage1 = b2;
            					}
            					break;
            				}
HXDLIN( 112)				this2->image = undoImage1;
HXDLIN( 112)				this2->width = width;
HXDLIN( 112)				this2->height = height;
HXDLIN( 112)				this2->imageType = ( (int)(imageType) );
HXDLIN( 112)				undoImage = this2;
HXDLIN( 112)				{
HXDLIN( 112)					int rectLeft = xIter3->start;
HXDLIN( 112)					int rectTop = yIter3->start;
HXDLIN( 112)					int rectRight = xIter3->max;
HXDLIN( 112)					bool forceClear = false;
HXDLIN( 112)					{
HXDLIN( 112)						int _g16 = rectTop;
HXDLIN( 112)						int _g17 = yIter3->max;
HXDLIN( 112)						while((_g16 < _g17)){
HXDLIN( 112)							_g16 = (_g16 + 1);
HXDLIN( 112)							int dy1 = (_g16 - 1);
HXDLIN( 112)							{
HXDLIN( 112)								int _g18 = rectLeft;
HXDLIN( 112)								int _g19 = rectRight;
HXDLIN( 112)								while((_g18 < _g19)){
HXDLIN( 112)									_g18 = (_g18 + 1);
HXDLIN( 112)									int dx1 = (_g18 - 1);
HXDLIN( 112)									::Dynamic this4 = this1->image;
HXDLIN( 112)									int index;
HXDLIN( 112)									if (this1->useVirtualPos) {
HXDLIN( 112)										index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx1) - this1->virtualX));
            									}
            									else {
HXDLIN( 112)										index = ::Std_obj::_hx_int(( (Float)(((dy1 * this1->width) + dx1)) ));
            									}
HXDLIN( 112)									int c = ::iterMagic::Iimg_obj::get(this4,index);
HXDLIN( 112)									int col;
HXDLIN( 112)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXDLIN( 112)										col = c;
            									}
HXDLIN( 112)									bool _hx_tmp;
HXDLIN( 112)									if (this1->useMask) {
HXDLIN( 112)										_hx_tmp = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN( 112)										_hx_tmp = false;
            									}
HXDLIN( 112)									if (_hx_tmp) {
HXDLIN( 112)										 ::pi_xy::ImageStruct this5 = this1->mask;
HXDLIN( 112)										::Dynamic this6 = this5->image;
HXDLIN( 112)										int index1;
HXDLIN( 112)										if (this5->useVirtualPos) {
HXDLIN( 112)											index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx1) - this5->virtualX));
            										}
            										else {
HXDLIN( 112)											index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this5->width) + dx1)) ));
            										}
HXDLIN( 112)										int c1 = ::iterMagic::Iimg_obj::get(this6,index1);
HXDLIN( 112)										int v1;
HXDLIN( 112)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)											v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXDLIN( 112)											v1 = c1;
            										}
HXDLIN( 112)										int maskPixel = v1;
HXDLIN( 112)										int this7 = col;
HXDLIN( 112)										if ((maskPixel == 0)) {
HXDLIN( 112)											col = this7;
            										}
            										else {
HXDLIN( 112)											Float m0;
HXDLIN( 112)											int this8 = ((maskPixel >> 24) & 255);
HXDLIN( 112)											if ((this8 == 0)) {
HXDLIN( 112)												m0 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m0 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m1;
HXDLIN( 112)											int this9 = ((maskPixel >> 16) & 255);
HXDLIN( 112)											if ((this9 == 0)) {
HXDLIN( 112)												m1 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m1 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m2;
HXDLIN( 112)											int this10 = ((maskPixel >> 8) & 255);
HXDLIN( 112)											if ((this10 == 0)) {
HXDLIN( 112)												m2 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m3;
HXDLIN( 112)											int this11 = (maskPixel & 255);
HXDLIN( 112)											if ((this11 == 0)) {
HXDLIN( 112)												m3 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m3 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this7 >> 24) & 255)) )));
HXDLIN( 112)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this7 >> 16) & 255)) )));
HXDLIN( 112)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this7 >> 8) & 255)) )));
HXDLIN( 112)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this7 & 255)) )));
HXDLIN( 112)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 112)									if ((col != 0)) {
HXDLIN( 112)										int x1 = (dx1 - rectLeft);
HXDLIN( 112)										int y1 = (dy1 - rectTop);
HXDLIN( 112)										int c2 = col;
HXDLIN( 112)										bool _hx_tmp1;
HXDLIN( 112)										if ((((c2 >> 24) & 255) < 254)) {
HXDLIN( 112)											_hx_tmp1 = undoImage->transparent;
            										}
            										else {
HXDLIN( 112)											_hx_tmp1 = false;
            										}
HXDLIN( 112)										if (_hx_tmp1) {
HXDLIN( 112)											int location;
HXDLIN( 112)											if (undoImage->useVirtualPos) {
HXDLIN( 112)												location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXDLIN( 112)												location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 112)											int this12 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 112)											int this13;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												this13 = ((((((this12 >> 24) & 255) << 24) | ((this12 & 255) << 16)) | (((this12 >> 8) & 255) << 8)) | ((this12 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												this13 = this12;
            											}
HXDLIN( 112)											Float a1;
HXDLIN( 112)											int this14 = ((this13 >> 24) & 255);
HXDLIN( 112)											if ((this14 == 0)) {
HXDLIN( 112)												a1 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a1 = (( (Float)(this14) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r1;
HXDLIN( 112)											int this15 = ((this13 >> 16) & 255);
HXDLIN( 112)											if ((this15 == 0)) {
HXDLIN( 112)												r1 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g1;
HXDLIN( 112)											int this16 = ((this13 >> 8) & 255);
HXDLIN( 112)											if ((this16 == 0)) {
HXDLIN( 112)												g1 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b11;
HXDLIN( 112)											int this17 = (this13 & 255);
HXDLIN( 112)											if ((this17 == 0)) {
HXDLIN( 112)												b11 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a2;
HXDLIN( 112)											int this18 = ((col >> 24) & 255);
HXDLIN( 112)											if ((this18 == 0)) {
HXDLIN( 112)												a2 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a2 = (( (Float)(this18) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r2;
HXDLIN( 112)											int this19 = ((col >> 16) & 255);
HXDLIN( 112)											if ((this19 == 0)) {
HXDLIN( 112)												r2 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g2;
HXDLIN( 112)											int this20 = ((col >> 8) & 255);
HXDLIN( 112)											if ((this20 == 0)) {
HXDLIN( 112)												g2 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b21;
HXDLIN( 112)											int this21 = (col & 255);
HXDLIN( 112)											if ((this21 == 0)) {
HXDLIN( 112)												b21 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 112)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 112)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 112)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 112)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 112)											int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 112)											{
HXDLIN( 112)												int _hx_tmp2;
HXDLIN( 112)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)													_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXDLIN( 112)													_hx_tmp2 = blended;
            												}
HXDLIN( 112)												::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            											}
            										}
            										else {
HXDLIN( 112)											::Dynamic this22 = undoImage->image;
HXDLIN( 112)											int index2;
HXDLIN( 112)											if (undoImage->useVirtualPos) {
HXDLIN( 112)												index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXDLIN( 112)												index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 112)											int _hx_tmp3;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												_hx_tmp3 = c2;
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this22,index2,_hx_tmp3);
            										}
            									}
            									else {
HXDLIN( 112)										if (forceClear) {
HXDLIN( 112)											::Dynamic this23 = undoImage->image;
HXDLIN( 112)											int x2 = (dx1 - rectLeft);
HXDLIN( 112)											int y2 = (dy1 - rectTop);
HXDLIN( 112)											int index3;
HXDLIN( 112)											if (undoImage->useVirtualPos) {
HXDLIN( 112)												index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            											}
            											else {
HXDLIN( 112)												index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this23,index3,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 112)			bool found = false;
HXDLIN( 112)			Float min4 = ( (Float)(0) );
HXDLIN( 112)			Float max = ( (Float)(0) );
HXDLIN( 112)			int a5 = 0;
HXDLIN( 112)			int r3 = 0;
HXDLIN( 112)			int g3 = 0;
HXDLIN( 112)			int b4 = 0;
HXDLIN( 112)			{
HXDLIN( 112)				int _g_min = xIter3->start;
HXDLIN( 112)				int _g_max = xIter3->max;
HXDLIN( 112)				while((_g_min < _g_max)){
HXDLIN( 112)					_g_min = (_g_min + 1);
HXDLIN( 112)					int px = (_g_min - 1);
HXDLIN( 112)					Float pcx = (( (Float)(px) ) - cx);
HXLINE( 812)					found = false;
HXLINE( 112)					{
HXDLIN( 112)						int _g_min1 = yIter3->start;
HXDLIN( 112)						int _g_max1 = yIter3->max;
HXDLIN( 112)						while((_g_min1 < _g_max1)){
HXDLIN( 112)							_g_min1 = (_g_min1 + 1);
HXDLIN( 112)							int py = (_g_min1 - 1);
HXDLIN( 112)							Float pcy = (( (Float)(py) ) - cy);
HXDLIN( 112)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 112)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 112)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 112)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 112)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 112)							bool _hx_tmp4;
HXDLIN( 112)							bool _hx_tmp5;
HXDLIN( 112)							if ((ratioA >= 0)) {
HXDLIN( 112)								_hx_tmp5 = (ratioB >= 0);
            							}
            							else {
HXDLIN( 112)								_hx_tmp5 = false;
            							}
HXDLIN( 112)							if (_hx_tmp5) {
HXDLIN( 112)								_hx_tmp4 = (ratioC >= 0);
            							}
            							else {
HXDLIN( 112)								_hx_tmp4 = false;
            							}
HXDLIN( 112)							if (_hx_tmp4) {
HXDLIN( 112)								int i6 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 112)								if ((i6 > 255)) {
HXLINE(  24)									i6 = 255;
            								}
HXLINE( 112)								if ((i6 < 0)) {
HXLINE(  25)									i6 = 0;
            								}
HXLINE( 821)								r3 = i6;
HXLINE( 112)								int i7 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 112)								if ((i7 > 255)) {
HXLINE(  24)									i7 = 255;
            								}
HXLINE( 112)								if ((i7 < 0)) {
HXLINE(  25)									i7 = 0;
            								}
HXLINE( 822)								g3 = i7;
HXLINE( 112)								int i8 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 112)								if ((i8 > 255)) {
HXLINE(  24)									i8 = 255;
            								}
HXLINE( 112)								if ((i8 < 0)) {
HXLINE(  25)									i8 = 0;
            								}
HXLINE( 823)								b4 = i8;
HXLINE( 112)								bool _hx_tmp6;
HXDLIN( 112)								bool _hx_tmp7;
HXDLIN( 112)								if ((softAB == true)) {
HXDLIN( 112)									_hx_tmp7 = (softBC == false);
            								}
            								else {
HXDLIN( 112)									_hx_tmp7 = false;
            								}
HXDLIN( 112)								if (_hx_tmp7) {
HXDLIN( 112)									_hx_tmp6 = false;
            								}
            								else {
HXDLIN( 112)									_hx_tmp6 = false;
            								}
HXDLIN( 112)								if (_hx_tmp6) {
HXDLIN( 112)									if ((ratioA < ratioC)) {
HXDLIN( 112)										min4 = ratioA;
            									}
            									else {
HXDLIN( 112)										min4 = ratioC;
            									}
HXDLIN( 112)									if ((ratioA > ratioB)) {
HXDLIN( 112)										max = ratioA;
            									}
            									else {
HXDLIN( 112)										max = ratioB;
            									}
HXDLIN( 112)									if (!((max > ratioC))) {
HXDLIN( 112)										max = ratioC;
            									}
HXLINE( 829)									max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE( 112)									if (!((min4 < max))) {
HXDLIN( 112)										min4 = ((max + min4) / ( (Float)(2) ));
            									}
HXDLIN( 112)									int i9 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN( 112)									if ((i9 > 255)) {
HXLINE(  24)										i9 = 255;
            									}
HXLINE( 112)									if ((i9 < 0)) {
HXLINE(  25)										i9 = 0;
            									}
HXLINE( 832)									a5 = i9;
HXLINE( 112)									{
HXDLIN( 112)										int location1;
HXDLIN( 112)										if (this1->useVirtualPos) {
HXDLIN( 112)											location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this1->virtualY) * ( (Float)(this1->width) )) + px) - this1->virtualX));
            										}
            										else {
HXDLIN( 112)											location1 = ::Std_obj::_hx_int(( (Float)(((py * this1->width) + px)) ));
            										}
HXDLIN( 112)										bool _hx_tmp8;
HXDLIN( 112)										if (this1->transparent) {
HXDLIN( 112)											_hx_tmp8 = (a5 < 254);
            										}
            										else {
HXDLIN( 112)											_hx_tmp8 = false;
            										}
HXDLIN( 112)										if (_hx_tmp8) {
HXDLIN( 112)											int this24 = ::iterMagic::Iimg_obj::get(this1->image,location1);
HXDLIN( 112)											int old;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												old = ((((((this24 >> 24) & 255) << 24) | ((this24 & 255) << 16)) | (((this24 >> 8) & 255) << 8)) | ((this24 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												old = this24;
            											}
HXDLIN( 112)											int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 112)											Float a11;
HXDLIN( 112)											int this25 = ((old >> 24) & 255);
HXDLIN( 112)											if ((this25 == 0)) {
HXDLIN( 112)												a11 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a11 = (( (Float)(this25) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r11;
HXDLIN( 112)											int this26 = ((old >> 16) & 255);
HXDLIN( 112)											if ((this26 == 0)) {
HXDLIN( 112)												r11 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g11;
HXDLIN( 112)											int this27 = ((old >> 8) & 255);
HXDLIN( 112)											if ((this27 == 0)) {
HXDLIN( 112)												g11 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b12;
HXDLIN( 112)											int this28 = (old & 255);
HXDLIN( 112)											if ((this28 == 0)) {
HXDLIN( 112)												b12 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a21;
HXDLIN( 112)											int this29 = ((rhs >> 24) & 255);
HXDLIN( 112)											if ((this29 == 0)) {
HXDLIN( 112)												a21 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r21;
HXDLIN( 112)											int this30 = ((rhs >> 16) & 255);
HXDLIN( 112)											if ((this30 == 0)) {
HXDLIN( 112)												r21 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g21;
HXDLIN( 112)											int this31 = ((rhs >> 8) & 255);
HXDLIN( 112)											if ((this31 == 0)) {
HXDLIN( 112)												g21 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b22;
HXDLIN( 112)											int this32 = (rhs & 255);
HXDLIN( 112)											if ((this32 == 0)) {
HXDLIN( 112)												b22 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN( 112)											int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 112)											int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 112)											int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 112)											int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 112)											int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 112)											{
HXDLIN( 112)												int _hx_tmp9;
HXDLIN( 112)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)													_hx_tmp9 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            												}
            												else {
HXDLIN( 112)													_hx_tmp9 = blended1;
            												}
HXDLIN( 112)												::iterMagic::Iimg_obj::set(this1->image,location1,_hx_tmp9);
            											}
            										}
            										else {
HXDLIN( 112)											int value;
HXDLIN( 112)											if (this1->isLittle) {
HXDLIN( 112)												value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            											}
            											else {
HXDLIN( 112)												value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this1->image,location1,value);
            										}
            									}
            								}
HXDLIN( 112)								bool _hx_tmp10;
HXDLIN( 112)								if ((softAB == true)) {
HXDLIN( 112)									_hx_tmp10 = (softBC == true);
            								}
            								else {
HXDLIN( 112)									_hx_tmp10 = false;
            								}
HXDLIN( 112)								if (_hx_tmp10) {
HXDLIN( 112)									if ((ratioB < ratioC)) {
HXDLIN( 112)										min4 = ratioB;
            									}
            									else {
HXDLIN( 112)										min4 = ratioC;
            									}
HXDLIN( 112)									if ((ratioA > ratioB)) {
HXDLIN( 112)										max = ratioA;
            									}
            									else {
HXDLIN( 112)										max = ratioB;
            									}
HXDLIN( 112)									if (!((max > ratioC))) {
HXDLIN( 112)										max = ratioC;
            									}
HXLINE( 842)									max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE( 112)									if (!((min4 < max))) {
HXDLIN( 112)										min4 = ((max + min4) / ( (Float)(2) ));
            									}
HXDLIN( 112)									int i10 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN( 112)									if ((i10 > 255)) {
HXLINE(  24)										i10 = 255;
            									}
HXLINE( 112)									if ((i10 < 0)) {
HXLINE(  25)										i10 = 0;
            									}
HXLINE( 845)									a5 = i10;
HXLINE( 112)									{
HXDLIN( 112)										int location2;
HXDLIN( 112)										if (this1->useVirtualPos) {
HXDLIN( 112)											location2 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this1->virtualY) * ( (Float)(this1->width) )) + px) - this1->virtualX));
            										}
            										else {
HXDLIN( 112)											location2 = ::Std_obj::_hx_int(( (Float)(((py * this1->width) + px)) ));
            										}
HXDLIN( 112)										bool _hx_tmp11;
HXDLIN( 112)										if (this1->transparent) {
HXDLIN( 112)											_hx_tmp11 = (a5 < 254);
            										}
            										else {
HXDLIN( 112)											_hx_tmp11 = false;
            										}
HXDLIN( 112)										if (_hx_tmp11) {
HXDLIN( 112)											int this33 = ::iterMagic::Iimg_obj::get(this1->image,location2);
HXDLIN( 112)											int old1;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												old1 = ((((((this33 >> 24) & 255) << 24) | ((this33 & 255) << 16)) | (((this33 >> 8) & 255) << 8)) | ((this33 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												old1 = this33;
            											}
HXDLIN( 112)											int rhs1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 112)											Float a12;
HXDLIN( 112)											int this34 = ((old1 >> 24) & 255);
HXDLIN( 112)											if ((this34 == 0)) {
HXDLIN( 112)												a12 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a12 = (( (Float)(this34) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r12;
HXDLIN( 112)											int this35 = ((old1 >> 16) & 255);
HXDLIN( 112)											if ((this35 == 0)) {
HXDLIN( 112)												r12 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r12 = (( (Float)(this35) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g12;
HXDLIN( 112)											int this36 = ((old1 >> 8) & 255);
HXDLIN( 112)											if ((this36 == 0)) {
HXDLIN( 112)												g12 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g12 = (( (Float)(this36) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b13;
HXDLIN( 112)											int this37 = (old1 & 255);
HXDLIN( 112)											if ((this37 == 0)) {
HXDLIN( 112)												b13 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b13 = (( (Float)(this37) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a22;
HXDLIN( 112)											int this38 = ((rhs1 >> 24) & 255);
HXDLIN( 112)											if ((this38 == 0)) {
HXDLIN( 112)												a22 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a22 = (( (Float)(this38) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r22;
HXDLIN( 112)											int this39 = ((rhs1 >> 16) & 255);
HXDLIN( 112)											if ((this39 == 0)) {
HXDLIN( 112)												r22 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r22 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g22;
HXDLIN( 112)											int this40 = ((rhs1 >> 8) & 255);
HXDLIN( 112)											if ((this40 == 0)) {
HXDLIN( 112)												g22 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g22 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b23;
HXDLIN( 112)											int this41 = (rhs1 & 255);
HXDLIN( 112)											if ((this41 == 0)) {
HXDLIN( 112)												b23 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b23 = (( (Float)(this41) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN( 112)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 112)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 112)											int b6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 112)											int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 112)											int blended2 = ((((a7 << 24) | (r5 << 16)) | (g5 << 8)) | b6);
HXDLIN( 112)											{
HXDLIN( 112)												int _hx_tmp12;
HXDLIN( 112)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)													_hx_tmp12 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXDLIN( 112)													_hx_tmp12 = blended2;
            												}
HXDLIN( 112)												::iterMagic::Iimg_obj::set(this1->image,location2,_hx_tmp12);
            											}
            										}
            										else {
HXDLIN( 112)											int value1;
HXDLIN( 112)											if (this1->isLittle) {
HXDLIN( 112)												value1 = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            											}
            											else {
HXDLIN( 112)												value1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this1->image,location2,value1);
            										}
            									}
            								}
HXLINE( 850)								found = true;
            							}
            							else {
HXDLIN( 112)								if (found) {
HXDLIN( 112)									goto _hx_goto_119;
            								}
            							}
            						}
            						_hx_goto_119:;
            					}
            				}
            			}
HXDLIN( 112)			if ((hasHit == false)) {
HXDLIN( 112)				 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXDLIN( 112)				if (hasUndo) {
HXDLIN( 112)					v2->undoImage = undoImage;
HXDLIN( 112)					v2->undoX = xIter3->start;
HXDLIN( 112)					v2->undoY = yIter3->start;
            				}
            			}
            		}
HXDLIN( 112)		{
HXDLIN( 112)			bool hasUndo1 = true;
HXDLIN( 112)			int aA1 = ((color >> 24) & 255);
HXDLIN( 112)			int rA1 = ((color >> 16) & 255);
HXDLIN( 112)			int gA1 = ((color >> 8) & 255);
HXDLIN( 112)			int bA1 = (color & 255);
HXDLIN( 112)			Float bcx1 = (cx - ax);
HXDLIN( 112)			Float bcy1 = (cy - ay);
HXDLIN( 112)			Float acx1 = (dx - ax);
HXDLIN( 112)			Float acy1 = (dy - ay);
HXDLIN( 112)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 112)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 112)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 112)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 112)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 112)			if ((dx > cx)) {
HXDLIN( 112)				if ((dx > ax)) {
HXDLIN( 112)					int min5;
HXDLIN( 112)					if ((cx > ax)) {
HXDLIN( 112)						min5 = ::Math_obj::floor(ax);
            					}
            					else {
HXDLIN( 112)						min5 = ::Math_obj::floor(cx);
            					}
HXDLIN( 112)					int ii_min8 = min5;
HXDLIN( 112)					int ii_max8 = ::Math_obj::ceil(dx);
HXDLIN( 112)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXDLIN( 112)					int ii_min9 = ::Math_obj::floor(cx);
HXDLIN( 112)					int ii_max9 = ::Math_obj::ceil(ax);
HXDLIN( 112)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXDLIN( 112)				if ((cx > ax)) {
HXDLIN( 112)					int min6;
HXDLIN( 112)					if ((dx > ax)) {
HXDLIN( 112)						min6 = ::Math_obj::floor(ax);
            					}
            					else {
HXDLIN( 112)						min6 = ::Math_obj::ceil(dx);
            					}
HXDLIN( 112)					int ii_min10 = min6;
HXDLIN( 112)					int ii_max10 = ::Math_obj::ceil(cx);
HXDLIN( 112)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXDLIN( 112)					int ii_min11 = ::Math_obj::floor(dx);
HXDLIN( 112)					int ii_max11 = ::Math_obj::ceil(ax);
HXDLIN( 112)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN( 112)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 112)			if ((dy > cy)) {
HXDLIN( 112)				if ((dy > ay)) {
HXDLIN( 112)					int min7;
HXDLIN( 112)					if ((cy > ay)) {
HXDLIN( 112)						min7 = ::Math_obj::floor(ay);
            					}
            					else {
HXDLIN( 112)						min7 = ::Math_obj::floor(cy);
            					}
HXDLIN( 112)					int ii_min12 = min7;
HXDLIN( 112)					int ii_max12 = ::Math_obj::ceil(dy);
HXDLIN( 112)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXDLIN( 112)					int ii_min13 = ::Math_obj::floor(cy);
HXDLIN( 112)					int ii_max13 = ::Math_obj::ceil(ay);
HXDLIN( 112)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXDLIN( 112)				if ((cy > ay)) {
HXDLIN( 112)					int min8;
HXDLIN( 112)					if ((dy > ay)) {
HXDLIN( 112)						min8 = ::Math_obj::floor(ay);
            					}
            					else {
HXDLIN( 112)						min8 = ::Math_obj::ceil(dy);
            					}
HXDLIN( 112)					int ii_min14 = min8;
HXDLIN( 112)					int ii_max14 = ::Math_obj::ceil(cy);
HXDLIN( 112)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXDLIN( 112)					int ii_min15 = ::Math_obj::floor(dy);
HXDLIN( 112)					int ii_max15 = ::Math_obj::ceil(ay);
HXDLIN( 112)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN( 112)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 112)			if (hasUndo1) {
HXDLIN( 112)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 112)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 112)				 ::Dynamic imageType1 = null();
HXDLIN( 112)				 ::pi_xy::ImageStruct this42 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 112)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 112)				::Dynamic undoImage4;
HXDLIN( 112)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXDLIN( 112)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::BytesImg b7 = byt1;
HXDLIN( 112)						{
HXDLIN( 112)							b7->width = width1;
HXDLIN( 112)							b7->height = height1;
HXDLIN( 112)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 112)							b7->data = ::haxe::io::Bytes_obj::alloc((b7->length * 4));
HXDLIN( 112)							{
HXDLIN( 112)								int len2 = b7->length;
HXDLIN( 112)								int w1 = 0;
HXDLIN( 112)								{
HXDLIN( 112)									int _g20 = 0;
HXDLIN( 112)									int _g21 = b7->height;
HXDLIN( 112)									while((_g20 < _g21)){
HXDLIN( 112)										_g20 = (_g20 + 1);
HXDLIN( 112)										int y3 = (_g20 - 1);
HXDLIN( 112)										{
HXDLIN( 112)											int _g22 = 0;
HXDLIN( 112)											int _g23 = b7->width;
HXDLIN( 112)											while((_g22 < _g23)){
HXDLIN( 112)												_g22 = (_g22 + 1);
HXDLIN( 112)												int x3 = (_g22 - 1);
HXDLIN( 112)												{
HXDLIN( 112)													w1 = (w1 + 1);
HXDLIN( 112)													b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 112)												{
HXDLIN( 112)													w1 = (w1 + 1);
HXDLIN( 112)													b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 112)												{
HXDLIN( 112)													w1 = (w1 + 1);
HXDLIN( 112)													b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 112)												{
HXDLIN( 112)													w1 = (w1 + 1);
HXDLIN( 112)													b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 112)						undoImage4 = b7;
            					}
            					break;
            					case (int)1: {
HXDLIN( 112)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::ArrIntImg a8 = arrI1;
HXDLIN( 112)						{
HXDLIN( 112)							a8->width = width1;
HXDLIN( 112)							a8->height = height1;
HXDLIN( 112)							a8->data = ::Array_obj< int >::__new(0);
HXDLIN( 112)							a8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 112)							{
HXDLIN( 112)								int _g24 = 0;
HXDLIN( 112)								int _g25 = a8->length;
HXDLIN( 112)								while((_g24 < _g25)){
HXDLIN( 112)									_g24 = (_g24 + 1);
HXDLIN( 112)									int i11 = (_g24 - 1);
HXDLIN( 112)									a8->data[i11] = 0;
            								}
            							}
            						}
HXDLIN( 112)						undoImage4 = a8;
            					}
            					break;
            					case (int)2: {
HXDLIN( 112)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::U32ArrImg b8 = u32a1;
HXDLIN( 112)						{
HXDLIN( 112)							b8->width = width1;
HXDLIN( 112)							b8->height = height1;
HXDLIN( 112)							b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 112)							int size1 = (b8->length * 4);
HXDLIN( 112)							b8->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 112)							{
HXDLIN( 112)								int _g26 = 0;
HXDLIN( 112)								int _g27 = b8->length;
HXDLIN( 112)								while((_g26 < _g27)){
HXDLIN( 112)									_g26 = (_g26 + 1);
HXDLIN( 112)									int i12 = (_g26 - 1);
HXDLIN( 112)									{
HXDLIN( 112)										 ::haxe::io::ArrayBufferViewImpl this43 = b8->data;
HXDLIN( 112)										bool undoImage5;
HXDLIN( 112)										if ((i12 >= 0)) {
HXDLIN( 112)											undoImage5 = (i12 < (this43->byteLength >> 2));
            										}
            										else {
HXDLIN( 112)											undoImage5 = false;
            										}
HXDLIN( 112)										if (undoImage5) {
HXDLIN( 112)											 ::haxe::io::Bytes _this1 = this43->bytes;
HXDLIN( 112)											int pos1 = ((i12 << 2) + this43->byteOffset);
HXDLIN( 112)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 112)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 112)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 112)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 112)						undoImage4 = b8;
            					}
            					break;
            					case (int)3: {
HXDLIN( 112)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN( 112)						{
HXDLIN( 112)							v3->width = width1;
HXDLIN( 112)							v3->height = height1;
HXDLIN( 112)							v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 112)							v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN( 112)							{
HXDLIN( 112)								int _g28 = 0;
HXDLIN( 112)								int _g29 = v3->length;
HXDLIN( 112)								while((_g28 < _g29)){
HXDLIN( 112)									_g28 = (_g28 + 1);
HXDLIN( 112)									int i13 = (_g28 - 1);
HXDLIN( 112)									v3->data->__unsafe_set(i13,0);
            								}
            							}
            						}
HXDLIN( 112)						undoImage4 = v3;
            					}
            					break;
            					case (int)4: {
HXDLIN( 112)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::StackIntImg b9 = sInt1;
HXDLIN( 112)						{
HXDLIN( 112)							b9->width = width1;
HXDLIN( 112)							b9->height = height1;
HXDLIN( 112)							b9->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 112)							b9->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 112)							{
HXDLIN( 112)								int len3 = b9->length;
HXDLIN( 112)								 ::haxe::ds::GenericStack_Int d1 = b9->data;
HXDLIN( 112)								if (::hx::IsNull( d1->head )) {
HXDLIN( 112)									int _g30 = 0;
HXDLIN( 112)									int _g31 = len3;
HXDLIN( 112)									while((_g30 < _g31)){
HXDLIN( 112)										_g30 = (_g30 + 1);
HXDLIN( 112)										int i14 = (_g30 - 1);
HXDLIN( 112)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXDLIN( 112)									int _g32 = 0;
HXDLIN( 112)									int _g33 = len3;
HXDLIN( 112)									while((_g32 < _g33)){
HXDLIN( 112)										_g32 = (_g32 + 1);
HXDLIN( 112)										int i15 = (_g32 - 1);
HXDLIN( 112)										{
HXDLIN( 112)											 ::haxe::ds::GenericCell_Int l1 = b9->data->head;
HXDLIN( 112)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 112)											{
HXDLIN( 112)												int _g34 = 0;
HXDLIN( 112)												int _g35 = i15;
HXDLIN( 112)												while((_g34 < _g35)){
HXDLIN( 112)													_g34 = (_g34 + 1);
HXDLIN( 112)													int i16 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE( 112)											if (::hx::IsNull( prev1 )) {
HXDLIN( 112)												b9->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 112)												l1 = null();
            											}
            											else {
HXDLIN( 112)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 112)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 112)						undoImage4 = b9;
            					}
            					break;
            				}
HXDLIN( 112)				this42->image = undoImage4;
HXDLIN( 112)				this42->width = width1;
HXDLIN( 112)				this42->height = height1;
HXDLIN( 112)				this42->imageType = ( (int)(imageType1) );
HXDLIN( 112)				undoImage3 = this42;
HXDLIN( 112)				{
HXDLIN( 112)					int rectLeft1 = xIter31->start;
HXDLIN( 112)					int rectTop1 = yIter31->start;
HXDLIN( 112)					int rectRight1 = xIter31->max;
HXDLIN( 112)					bool forceClear1 = false;
HXDLIN( 112)					{
HXDLIN( 112)						int _g36 = rectTop1;
HXDLIN( 112)						int _g37 = yIter31->max;
HXDLIN( 112)						while((_g36 < _g37)){
HXDLIN( 112)							_g36 = (_g36 + 1);
HXDLIN( 112)							int dy2 = (_g36 - 1);
HXDLIN( 112)							{
HXDLIN( 112)								int _g38 = rectLeft1;
HXDLIN( 112)								int _g39 = rectRight1;
HXDLIN( 112)								while((_g38 < _g39)){
HXDLIN( 112)									_g38 = (_g38 + 1);
HXDLIN( 112)									int dx2 = (_g38 - 1);
HXDLIN( 112)									::Dynamic this44 = this1->image;
HXDLIN( 112)									int index4;
HXDLIN( 112)									if (this1->useVirtualPos) {
HXDLIN( 112)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx2) - this1->virtualX));
            									}
            									else {
HXDLIN( 112)										index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * this1->width) + dx2)) ));
            									}
HXDLIN( 112)									int c3 = ::iterMagic::Iimg_obj::get(this44,index4);
HXDLIN( 112)									int col1;
HXDLIN( 112)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)										col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXDLIN( 112)										col1 = c3;
            									}
HXDLIN( 112)									bool _hx_tmp13;
HXDLIN( 112)									if (this1->useMask) {
HXDLIN( 112)										_hx_tmp13 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN( 112)										_hx_tmp13 = false;
            									}
HXDLIN( 112)									if (_hx_tmp13) {
HXDLIN( 112)										 ::pi_xy::ImageStruct this45 = this1->mask;
HXDLIN( 112)										::Dynamic this46 = this45->image;
HXDLIN( 112)										int index5;
HXDLIN( 112)										if (this45->useVirtualPos) {
HXDLIN( 112)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this45->virtualY) * ( (Float)(this45->width) )) + dx2) - this45->virtualX));
            										}
            										else {
HXDLIN( 112)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this45->width) + dx2)) ));
            										}
HXDLIN( 112)										int c4 = ::iterMagic::Iimg_obj::get(this46,index5);
HXDLIN( 112)										int v4;
HXDLIN( 112)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)											v4 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXDLIN( 112)											v4 = c4;
            										}
HXDLIN( 112)										int maskPixel1 = v4;
HXDLIN( 112)										int this47 = col1;
HXDLIN( 112)										if ((maskPixel1 == 0)) {
HXDLIN( 112)											col1 = this47;
            										}
            										else {
HXDLIN( 112)											Float m01;
HXDLIN( 112)											int this48 = ((maskPixel1 >> 24) & 255);
HXDLIN( 112)											if ((this48 == 0)) {
HXDLIN( 112)												m01 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m01 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m11;
HXDLIN( 112)											int this49 = ((maskPixel1 >> 16) & 255);
HXDLIN( 112)											if ((this49 == 0)) {
HXDLIN( 112)												m11 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m11 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m21;
HXDLIN( 112)											int this50 = ((maskPixel1 >> 8) & 255);
HXDLIN( 112)											if ((this50 == 0)) {
HXDLIN( 112)												m21 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m21 = (( (Float)(this50) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m31;
HXDLIN( 112)											int this51 = (maskPixel1 & 255);
HXDLIN( 112)											if ((this51 == 0)) {
HXDLIN( 112)												m31 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m31 = (( (Float)(this51) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this47 >> 24) & 255)) )));
HXDLIN( 112)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this47 >> 16) & 255)) )));
HXDLIN( 112)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this47 >> 8) & 255)) )));
HXDLIN( 112)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this47 & 255)) )));
HXDLIN( 112)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 112)									if ((col1 != 0)) {
HXDLIN( 112)										int x4 = (dx2 - rectLeft1);
HXDLIN( 112)										int y4 = (dy2 - rectTop1);
HXDLIN( 112)										int c5 = col1;
HXDLIN( 112)										bool _hx_tmp14;
HXDLIN( 112)										if ((((c5 >> 24) & 255) < 254)) {
HXDLIN( 112)											_hx_tmp14 = undoImage3->transparent;
            										}
            										else {
HXDLIN( 112)											_hx_tmp14 = false;
            										}
HXDLIN( 112)										if (_hx_tmp14) {
HXDLIN( 112)											int location3;
HXDLIN( 112)											if (undoImage3->useVirtualPos) {
HXDLIN( 112)												location3 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXDLIN( 112)												location3 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 112)											int this52 = ::iterMagic::Iimg_obj::get(undoImage3->image,location3);
HXDLIN( 112)											int this53;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												this53 = ((((((this52 >> 24) & 255) << 24) | ((this52 & 255) << 16)) | (((this52 >> 8) & 255) << 8)) | ((this52 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												this53 = this52;
            											}
HXDLIN( 112)											Float a13;
HXDLIN( 112)											int this54 = ((this53 >> 24) & 255);
HXDLIN( 112)											if ((this54 == 0)) {
HXDLIN( 112)												a13 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a13 = (( (Float)(this54) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r13;
HXDLIN( 112)											int this55 = ((this53 >> 16) & 255);
HXDLIN( 112)											if ((this55 == 0)) {
HXDLIN( 112)												r13 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r13 = (( (Float)(this55) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g13;
HXDLIN( 112)											int this56 = ((this53 >> 8) & 255);
HXDLIN( 112)											if ((this56 == 0)) {
HXDLIN( 112)												g13 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g13 = (( (Float)(this56) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b14;
HXDLIN( 112)											int this57 = (this53 & 255);
HXDLIN( 112)											if ((this57 == 0)) {
HXDLIN( 112)												b14 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b14 = (( (Float)(this57) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a23;
HXDLIN( 112)											int this58 = ((col1 >> 24) & 255);
HXDLIN( 112)											if ((this58 == 0)) {
HXDLIN( 112)												a23 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a23 = (( (Float)(this58) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r23;
HXDLIN( 112)											int this59 = ((col1 >> 16) & 255);
HXDLIN( 112)											if ((this59 == 0)) {
HXDLIN( 112)												r23 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r23 = (( (Float)(this59) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g23;
HXDLIN( 112)											int this60 = ((col1 >> 8) & 255);
HXDLIN( 112)											if ((this60 == 0)) {
HXDLIN( 112)												g23 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g23 = (( (Float)(this60) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b24;
HXDLIN( 112)											int this61 = (col1 & 255);
HXDLIN( 112)											if ((this61 == 0)) {
HXDLIN( 112)												b24 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b24 = (( (Float)(this61) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN( 112)											int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 112)											int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 112)											int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 112)											int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 112)											int blended3 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 112)											{
HXDLIN( 112)												int _hx_tmp15;
HXDLIN( 112)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)													_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            												}
            												else {
HXDLIN( 112)													_hx_tmp15 = blended3;
            												}
HXDLIN( 112)												::iterMagic::Iimg_obj::set(undoImage3->image,location3,_hx_tmp15);
            											}
            										}
            										else {
HXDLIN( 112)											::Dynamic this62 = undoImage3->image;
HXDLIN( 112)											int index6;
HXDLIN( 112)											if (undoImage3->useVirtualPos) {
HXDLIN( 112)												index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXDLIN( 112)												index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 112)											int _hx_tmp16;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												_hx_tmp16 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												_hx_tmp16 = c5;
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this62,index6,_hx_tmp16);
            										}
            									}
            									else {
HXDLIN( 112)										if (forceClear1) {
HXDLIN( 112)											::Dynamic this63 = undoImage3->image;
HXDLIN( 112)											int x5 = (dx2 - rectLeft1);
HXDLIN( 112)											int y5 = (dy2 - rectTop1);
HXDLIN( 112)											int index7;
HXDLIN( 112)											if (undoImage3->useVirtualPos) {
HXDLIN( 112)												index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            											}
            											else {
HXDLIN( 112)												index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this63,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 112)			bool found1 = false;
HXDLIN( 112)			Float min9 = ( (Float)(0) );
HXDLIN( 112)			Float max1 = ( (Float)(0) );
HXDLIN( 112)			int a10 = 0;
HXDLIN( 112)			int r7 = 0;
HXDLIN( 112)			int g7 = 0;
HXDLIN( 112)			int b15 = 0;
HXDLIN( 112)			{
HXDLIN( 112)				int _g_min2 = xIter31->start;
HXDLIN( 112)				int _g_max2 = xIter31->max;
HXDLIN( 112)				while((_g_min2 < _g_max2)){
HXDLIN( 112)					_g_min2 = (_g_min2 + 1);
HXDLIN( 112)					int px1 = (_g_min2 - 1);
HXDLIN( 112)					Float pcx1 = (( (Float)(px1) ) - ax);
HXLINE( 812)					found1 = false;
HXLINE( 112)					{
HXDLIN( 112)						int _g_min3 = yIter31->start;
HXDLIN( 112)						int _g_max3 = yIter31->max;
HXDLIN( 112)						while((_g_min3 < _g_max3)){
HXDLIN( 112)							_g_min3 = (_g_min3 + 1);
HXDLIN( 112)							int py1 = (_g_min3 - 1);
HXDLIN( 112)							Float pcy1 = (( (Float)(py1) ) - ay);
HXDLIN( 112)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 112)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 112)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 112)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 112)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 112)							bool _hx_tmp17;
HXDLIN( 112)							bool _hx_tmp18;
HXDLIN( 112)							if ((ratioA1 >= 0)) {
HXDLIN( 112)								_hx_tmp18 = (ratioB1 >= 0);
            							}
            							else {
HXDLIN( 112)								_hx_tmp18 = false;
            							}
HXDLIN( 112)							if (_hx_tmp18) {
HXDLIN( 112)								_hx_tmp17 = (ratioC1 >= 0);
            							}
            							else {
HXDLIN( 112)								_hx_tmp17 = false;
            							}
HXDLIN( 112)							if (_hx_tmp17) {
HXDLIN( 112)								int i17 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN( 112)								if ((i17 > 255)) {
HXLINE(  24)									i17 = 255;
            								}
HXLINE( 112)								if ((i17 < 0)) {
HXLINE(  25)									i17 = 0;
            								}
HXLINE( 821)								r7 = i17;
HXLINE( 112)								int i18 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN( 112)								if ((i18 > 255)) {
HXLINE(  24)									i18 = 255;
            								}
HXLINE( 112)								if ((i18 < 0)) {
HXLINE(  25)									i18 = 0;
            								}
HXLINE( 822)								g7 = i18;
HXLINE( 112)								int i19 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN( 112)								if ((i19 > 255)) {
HXLINE(  24)									i19 = 255;
            								}
HXLINE( 112)								if ((i19 < 0)) {
HXLINE(  25)									i19 = 0;
            								}
HXLINE( 823)								b15 = i19;
HXLINE( 112)								bool _hx_tmp19;
HXDLIN( 112)								if ((softCD == true)) {
HXDLIN( 112)									_hx_tmp19 = (softDA == true);
            								}
            								else {
HXDLIN( 112)									_hx_tmp19 = false;
            								}
HXDLIN( 112)								if (_hx_tmp19) {
HXDLIN( 112)									if ((ratioA1 < ratioC1)) {
HXDLIN( 112)										min9 = ratioA1;
            									}
            									else {
HXDLIN( 112)										min9 = ratioC1;
            									}
HXDLIN( 112)									if ((ratioA1 > ratioB1)) {
HXDLIN( 112)										max1 = ratioA1;
            									}
            									else {
HXDLIN( 112)										max1 = ratioB1;
            									}
HXDLIN( 112)									if (!((max1 > ratioC1))) {
HXDLIN( 112)										max1 = ratioC1;
            									}
HXLINE( 829)									max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE( 112)									if (!((min9 < max1))) {
HXDLIN( 112)										min9 = ((max1 + min9) / ( (Float)(2) ));
            									}
HXDLIN( 112)									int i20 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN( 112)									if ((i20 > 255)) {
HXLINE(  24)										i20 = 255;
            									}
HXLINE( 112)									if ((i20 < 0)) {
HXLINE(  25)										i20 = 0;
            									}
HXLINE( 832)									a10 = i20;
HXLINE( 112)									{
HXDLIN( 112)										int location4;
HXDLIN( 112)										if (this1->useVirtualPos) {
HXDLIN( 112)											location4 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            										}
            										else {
HXDLIN( 112)											location4 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            										}
HXDLIN( 112)										bool _hx_tmp20;
HXDLIN( 112)										if (this1->transparent) {
HXDLIN( 112)											_hx_tmp20 = (a10 < 254);
            										}
            										else {
HXDLIN( 112)											_hx_tmp20 = false;
            										}
HXDLIN( 112)										if (_hx_tmp20) {
HXDLIN( 112)											int this64 = ::iterMagic::Iimg_obj::get(this1->image,location4);
HXDLIN( 112)											int old2;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												old2 = ((((((this64 >> 24) & 255) << 24) | ((this64 & 255) << 16)) | (((this64 >> 8) & 255) << 8)) | ((this64 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												old2 = this64;
            											}
HXDLIN( 112)											int rhs2 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN( 112)											Float a14;
HXDLIN( 112)											int this65 = ((old2 >> 24) & 255);
HXDLIN( 112)											if ((this65 == 0)) {
HXDLIN( 112)												a14 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a14 = (( (Float)(this65) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r14;
HXDLIN( 112)											int this66 = ((old2 >> 16) & 255);
HXDLIN( 112)											if ((this66 == 0)) {
HXDLIN( 112)												r14 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r14 = (( (Float)(this66) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g14;
HXDLIN( 112)											int this67 = ((old2 >> 8) & 255);
HXDLIN( 112)											if ((this67 == 0)) {
HXDLIN( 112)												g14 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g14 = (( (Float)(this67) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b16;
HXDLIN( 112)											int this68 = (old2 & 255);
HXDLIN( 112)											if ((this68 == 0)) {
HXDLIN( 112)												b16 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b16 = (( (Float)(this68) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a24;
HXDLIN( 112)											int this69 = ((rhs2 >> 24) & 255);
HXDLIN( 112)											if ((this69 == 0)) {
HXDLIN( 112)												a24 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a24 = (( (Float)(this69) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r24;
HXDLIN( 112)											int this70 = ((rhs2 >> 16) & 255);
HXDLIN( 112)											if ((this70 == 0)) {
HXDLIN( 112)												r24 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r24 = (( (Float)(this70) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g24;
HXDLIN( 112)											int this71 = ((rhs2 >> 8) & 255);
HXDLIN( 112)											if ((this71 == 0)) {
HXDLIN( 112)												g24 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g24 = (( (Float)(this71) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b25;
HXDLIN( 112)											int this72 = (rhs2 & 255);
HXDLIN( 112)											if ((this72 == 0)) {
HXDLIN( 112)												b25 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b25 = (( (Float)(this72) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a34 = (a14 * (( (Float)(1) ) - a24));
HXDLIN( 112)											int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 112)											int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 112)											int b17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b16 * a34) + (b25 * a24))));
HXDLIN( 112)											int a15 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 112)											int blended4 = ((((a15 << 24) | (r8 << 16)) | (g8 << 8)) | b17);
HXDLIN( 112)											{
HXDLIN( 112)												int _hx_tmp21;
HXDLIN( 112)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)													_hx_tmp21 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            												}
            												else {
HXDLIN( 112)													_hx_tmp21 = blended4;
            												}
HXDLIN( 112)												::iterMagic::Iimg_obj::set(this1->image,location4,_hx_tmp21);
            											}
            										}
            										else {
HXDLIN( 112)											int value2;
HXDLIN( 112)											if (this1->isLittle) {
HXDLIN( 112)												value2 = ((((a10 << 24) | (b15 << 16)) | (g7 << 8)) | r7);
            											}
            											else {
HXDLIN( 112)												value2 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this1->image,location4,value2);
            										}
            									}
            								}
HXDLIN( 112)								bool _hx_tmp22;
HXDLIN( 112)								bool _hx_tmp23;
HXDLIN( 112)								if ((softCD == true)) {
HXDLIN( 112)									_hx_tmp23 = false;
            								}
            								else {
HXDLIN( 112)									_hx_tmp23 = false;
            								}
HXDLIN( 112)								if (_hx_tmp23) {
HXDLIN( 112)									_hx_tmp22 = (softDA == false);
            								}
            								else {
HXDLIN( 112)									_hx_tmp22 = false;
            								}
HXDLIN( 112)								if (_hx_tmp22) {
HXDLIN( 112)									if ((ratioB1 < ratioC1)) {
HXDLIN( 112)										min9 = ratioB1;
            									}
            									else {
HXDLIN( 112)										min9 = ratioC1;
            									}
HXDLIN( 112)									if ((ratioA1 > ratioB1)) {
HXDLIN( 112)										max1 = ratioA1;
            									}
            									else {
HXDLIN( 112)										max1 = ratioB1;
            									}
HXDLIN( 112)									if (!((max1 > ratioC1))) {
HXDLIN( 112)										max1 = ratioC1;
            									}
HXLINE( 842)									max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE( 112)									if (!((min9 < max1))) {
HXDLIN( 112)										min9 = ((max1 + min9) / ( (Float)(2) ));
            									}
HXDLIN( 112)									int i21 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN( 112)									if ((i21 > 255)) {
HXLINE(  24)										i21 = 255;
            									}
HXLINE( 112)									if ((i21 < 0)) {
HXLINE(  25)										i21 = 0;
            									}
HXLINE( 845)									a10 = i21;
HXLINE( 112)									{
HXDLIN( 112)										int location5;
HXDLIN( 112)										if (this1->useVirtualPos) {
HXDLIN( 112)											location5 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            										}
            										else {
HXDLIN( 112)											location5 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            										}
HXDLIN( 112)										bool _hx_tmp24;
HXDLIN( 112)										if (this1->transparent) {
HXDLIN( 112)											_hx_tmp24 = (a10 < 254);
            										}
            										else {
HXDLIN( 112)											_hx_tmp24 = false;
            										}
HXDLIN( 112)										if (_hx_tmp24) {
HXDLIN( 112)											int this73 = ::iterMagic::Iimg_obj::get(this1->image,location5);
HXDLIN( 112)											int old3;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												old3 = ((((((this73 >> 24) & 255) << 24) | ((this73 & 255) << 16)) | (((this73 >> 8) & 255) << 8)) | ((this73 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												old3 = this73;
            											}
HXDLIN( 112)											int rhs3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN( 112)											Float a16;
HXDLIN( 112)											int this74 = ((old3 >> 24) & 255);
HXDLIN( 112)											if ((this74 == 0)) {
HXDLIN( 112)												a16 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a16 = (( (Float)(this74) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r15;
HXDLIN( 112)											int this75 = ((old3 >> 16) & 255);
HXDLIN( 112)											if ((this75 == 0)) {
HXDLIN( 112)												r15 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r15 = (( (Float)(this75) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g15;
HXDLIN( 112)											int this76 = ((old3 >> 8) & 255);
HXDLIN( 112)											if ((this76 == 0)) {
HXDLIN( 112)												g15 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g15 = (( (Float)(this76) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b18;
HXDLIN( 112)											int this77 = (old3 & 255);
HXDLIN( 112)											if ((this77 == 0)) {
HXDLIN( 112)												b18 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b18 = (( (Float)(this77) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a25;
HXDLIN( 112)											int this78 = ((rhs3 >> 24) & 255);
HXDLIN( 112)											if ((this78 == 0)) {
HXDLIN( 112)												a25 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a25 = (( (Float)(this78) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r25;
HXDLIN( 112)											int this79 = ((rhs3 >> 16) & 255);
HXDLIN( 112)											if ((this79 == 0)) {
HXDLIN( 112)												r25 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r25 = (( (Float)(this79) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g25;
HXDLIN( 112)											int this80 = ((rhs3 >> 8) & 255);
HXDLIN( 112)											if ((this80 == 0)) {
HXDLIN( 112)												g25 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g25 = (( (Float)(this80) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b26;
HXDLIN( 112)											int this81 = (rhs3 & 255);
HXDLIN( 112)											if ((this81 == 0)) {
HXDLIN( 112)												b26 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b26 = (( (Float)(this81) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a35 = (a16 * (( (Float)(1) ) - a25));
HXDLIN( 112)											int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 112)											int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 112)											int b19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b18 * a35) + (b26 * a25))));
HXDLIN( 112)											int a17 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 112)											int blended5 = ((((a17 << 24) | (r9 << 16)) | (g9 << 8)) | b19);
HXDLIN( 112)											{
HXDLIN( 112)												int _hx_tmp25;
HXDLIN( 112)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)													_hx_tmp25 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            												}
            												else {
HXDLIN( 112)													_hx_tmp25 = blended5;
            												}
HXDLIN( 112)												::iterMagic::Iimg_obj::set(this1->image,location5,_hx_tmp25);
            											}
            										}
            										else {
HXDLIN( 112)											int value3;
HXDLIN( 112)											if (this1->isLittle) {
HXDLIN( 112)												value3 = ((((a10 << 24) | (b15 << 16)) | (g7 << 8)) | r7);
            											}
            											else {
HXDLIN( 112)												value3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this1->image,location5,value3);
            										}
            									}
            								}
HXLINE( 850)								found1 = true;
            							}
            							else {
HXDLIN( 112)								if (found1) {
HXDLIN( 112)									goto _hx_goto_131;
            								}
            							}
            						}
            						_hx_goto_131:;
            					}
            				}
            			}
HXDLIN( 112)			if ((hasHit == false)) {
HXDLIN( 112)				 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,dx,dy,cx,cy,ax,ay,true);
HXDLIN( 112)				if (hasUndo1) {
HXDLIN( 112)					v5->undoImage = undoImage3;
HXDLIN( 112)					v5->undoX = xIter31->start;
HXDLIN( 112)					v5->undoY = yIter31->start;
            				}
            			}
            		}
HXDLIN( 112)		{
HXDLIN( 112)			bool hasUndo2 = true;
HXDLIN( 112)			int aA2 = ((color >> 24) & 255);
HXDLIN( 112)			int rA2 = ((color >> 16) & 255);
HXDLIN( 112)			int gA2 = ((color >> 8) & 255);
HXDLIN( 112)			int bA2 = (color & 255);
HXDLIN( 112)			Float bcx2 = (bx - dx);
HXDLIN( 112)			Float bcy2 = (by - dy);
HXDLIN( 112)			Float acx2 = (ax - dx);
HXDLIN( 112)			Float acy2 = (ay - dy);
HXDLIN( 112)			Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 112)			Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 112)			Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 112)			Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 112)			 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 112)			if ((ax > bx)) {
HXDLIN( 112)				if ((ax > dx)) {
HXDLIN( 112)					int min10;
HXDLIN( 112)					if ((bx > dx)) {
HXDLIN( 112)						min10 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN( 112)						min10 = ::Math_obj::floor(bx);
            					}
HXDLIN( 112)					int ii_min16 = min10;
HXDLIN( 112)					int ii_max16 = ::Math_obj::ceil(ax);
HXDLIN( 112)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            				}
            				else {
HXDLIN( 112)					int ii_min17 = ::Math_obj::floor(bx);
HXDLIN( 112)					int ii_max17 = ::Math_obj::ceil(dx);
HXDLIN( 112)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            				}
            			}
            			else {
HXDLIN( 112)				if ((bx > dx)) {
HXDLIN( 112)					int min11;
HXDLIN( 112)					if ((ax > dx)) {
HXDLIN( 112)						min11 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN( 112)						min11 = ::Math_obj::ceil(ax);
            					}
HXDLIN( 112)					int ii_min18 = min11;
HXDLIN( 112)					int ii_max18 = ::Math_obj::ceil(bx);
HXDLIN( 112)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            				}
            				else {
HXDLIN( 112)					int ii_min19 = ::Math_obj::floor(ax);
HXDLIN( 112)					int ii_max19 = ::Math_obj::ceil(dx);
HXDLIN( 112)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            				}
            			}
HXDLIN( 112)			 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 112)			if ((ay > by)) {
HXDLIN( 112)				if ((ay > dy)) {
HXDLIN( 112)					int min12;
HXDLIN( 112)					if ((by > dy)) {
HXDLIN( 112)						min12 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN( 112)						min12 = ::Math_obj::floor(by);
            					}
HXDLIN( 112)					int ii_min20 = min12;
HXDLIN( 112)					int ii_max20 = ::Math_obj::ceil(ay);
HXDLIN( 112)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            				}
            				else {
HXDLIN( 112)					int ii_min21 = ::Math_obj::floor(by);
HXDLIN( 112)					int ii_max21 = ::Math_obj::ceil(dy);
HXDLIN( 112)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            				}
            			}
            			else {
HXDLIN( 112)				if ((by > dy)) {
HXDLIN( 112)					int min13;
HXDLIN( 112)					if ((ay > dy)) {
HXDLIN( 112)						min13 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN( 112)						min13 = ::Math_obj::ceil(ay);
            					}
HXDLIN( 112)					int ii_min22 = min13;
HXDLIN( 112)					int ii_max22 = ::Math_obj::ceil(by);
HXDLIN( 112)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            				}
            				else {
HXDLIN( 112)					int ii_min23 = ::Math_obj::floor(ay);
HXDLIN( 112)					int ii_max23 = ::Math_obj::ceil(dy);
HXDLIN( 112)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            				}
            			}
HXDLIN( 112)			 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 112)			if (hasUndo2) {
HXDLIN( 112)				int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 112)				int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 112)				 ::Dynamic imageType2 = null();
HXDLIN( 112)				 ::pi_xy::ImageStruct this82 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 112)				if (::hx::IsNull( imageType2 )) {
HXLINE(  54)					imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 112)				::Dynamic undoImage7;
HXDLIN( 112)				switch((int)(( (int)(imageType2) ))){
            					case (int)0: {
HXDLIN( 112)						 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::BytesImg b20 = byt2;
HXDLIN( 112)						{
HXDLIN( 112)							b20->width = width2;
HXDLIN( 112)							b20->height = height2;
HXDLIN( 112)							b20->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 112)							b20->data = ::haxe::io::Bytes_obj::alloc((b20->length * 4));
HXDLIN( 112)							{
HXDLIN( 112)								int len4 = b20->length;
HXDLIN( 112)								int w2 = 0;
HXDLIN( 112)								{
HXDLIN( 112)									int _g40 = 0;
HXDLIN( 112)									int _g41 = b20->height;
HXDLIN( 112)									while((_g40 < _g41)){
HXDLIN( 112)										_g40 = (_g40 + 1);
HXDLIN( 112)										int y6 = (_g40 - 1);
HXDLIN( 112)										{
HXDLIN( 112)											int _g42 = 0;
HXDLIN( 112)											int _g43 = b20->width;
HXDLIN( 112)											while((_g42 < _g43)){
HXDLIN( 112)												_g42 = (_g42 + 1);
HXDLIN( 112)												int x6 = (_g42 - 1);
HXDLIN( 112)												{
HXDLIN( 112)													w2 = (w2 + 1);
HXDLIN( 112)													b20->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 112)												{
HXDLIN( 112)													w2 = (w2 + 1);
HXDLIN( 112)													b20->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 112)												{
HXDLIN( 112)													w2 = (w2 + 1);
HXDLIN( 112)													b20->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 112)												{
HXDLIN( 112)													w2 = (w2 + 1);
HXDLIN( 112)													b20->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 112)						undoImage7 = b20;
            					}
            					break;
            					case (int)1: {
HXDLIN( 112)						 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::ArrIntImg a18 = arrI2;
HXDLIN( 112)						{
HXDLIN( 112)							a18->width = width2;
HXDLIN( 112)							a18->height = height2;
HXDLIN( 112)							a18->data = ::Array_obj< int >::__new(0);
HXDLIN( 112)							a18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 112)							{
HXDLIN( 112)								int _g44 = 0;
HXDLIN( 112)								int _g45 = a18->length;
HXDLIN( 112)								while((_g44 < _g45)){
HXDLIN( 112)									_g44 = (_g44 + 1);
HXDLIN( 112)									int i22 = (_g44 - 1);
HXDLIN( 112)									a18->data[i22] = 0;
            								}
            							}
            						}
HXDLIN( 112)						undoImage7 = a18;
            					}
            					break;
            					case (int)2: {
HXDLIN( 112)						 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::U32ArrImg b27 = u32a2;
HXDLIN( 112)						{
HXDLIN( 112)							b27->width = width2;
HXDLIN( 112)							b27->height = height2;
HXDLIN( 112)							b27->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 112)							int size2 = (b27->length * 4);
HXDLIN( 112)							b27->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 112)							{
HXDLIN( 112)								int _g46 = 0;
HXDLIN( 112)								int _g47 = b27->length;
HXDLIN( 112)								while((_g46 < _g47)){
HXDLIN( 112)									_g46 = (_g46 + 1);
HXDLIN( 112)									int i23 = (_g46 - 1);
HXDLIN( 112)									{
HXDLIN( 112)										 ::haxe::io::ArrayBufferViewImpl this83 = b27->data;
HXDLIN( 112)										bool undoImage8;
HXDLIN( 112)										if ((i23 >= 0)) {
HXDLIN( 112)											undoImage8 = (i23 < (this83->byteLength >> 2));
            										}
            										else {
HXDLIN( 112)											undoImage8 = false;
            										}
HXDLIN( 112)										if (undoImage8) {
HXDLIN( 112)											 ::haxe::io::Bytes _this2 = this83->bytes;
HXDLIN( 112)											int pos2 = ((i23 << 2) + this83->byteOffset);
HXDLIN( 112)											_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 112)											_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 112)											_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 112)											_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 112)						undoImage7 = b27;
            					}
            					break;
            					case (int)3: {
HXDLIN( 112)						 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::VecIntImg v6 = vec2;
HXDLIN( 112)						{
HXDLIN( 112)							v6->width = width2;
HXDLIN( 112)							v6->height = height2;
HXDLIN( 112)							v6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 112)							v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN( 112)							{
HXDLIN( 112)								int _g48 = 0;
HXDLIN( 112)								int _g49 = v6->length;
HXDLIN( 112)								while((_g48 < _g49)){
HXDLIN( 112)									_g48 = (_g48 + 1);
HXDLIN( 112)									int i24 = (_g48 - 1);
HXDLIN( 112)									v6->data->__unsafe_set(i24,0);
            								}
            							}
            						}
HXDLIN( 112)						undoImage7 = v6;
            					}
            					break;
            					case (int)4: {
HXDLIN( 112)						 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::StackIntImg b28 = sInt2;
HXDLIN( 112)						{
HXDLIN( 112)							b28->width = width2;
HXDLIN( 112)							b28->height = height2;
HXDLIN( 112)							b28->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 112)							b28->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 112)							{
HXDLIN( 112)								int len5 = b28->length;
HXDLIN( 112)								 ::haxe::ds::GenericStack_Int d2 = b28->data;
HXDLIN( 112)								if (::hx::IsNull( d2->head )) {
HXDLIN( 112)									int _g50 = 0;
HXDLIN( 112)									int _g51 = len5;
HXDLIN( 112)									while((_g50 < _g51)){
HXDLIN( 112)										_g50 = (_g50 + 1);
HXDLIN( 112)										int i25 = (_g50 - 1);
HXDLIN( 112)										d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            									}
            								}
            								else {
HXDLIN( 112)									int _g52 = 0;
HXDLIN( 112)									int _g53 = len5;
HXDLIN( 112)									while((_g52 < _g53)){
HXDLIN( 112)										_g52 = (_g52 + 1);
HXDLIN( 112)										int i26 = (_g52 - 1);
HXDLIN( 112)										{
HXDLIN( 112)											 ::haxe::ds::GenericCell_Int l2 = b28->data->head;
HXDLIN( 112)											 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 112)											{
HXDLIN( 112)												int _g54 = 0;
HXDLIN( 112)												int _g55 = i26;
HXDLIN( 112)												while((_g54 < _g55)){
HXDLIN( 112)													_g54 = (_g54 + 1);
HXDLIN( 112)													int i27 = (_g54 - 1);
HXLINE( 345)													prev2 = l2;
HXLINE( 346)													l2 = l2->next;
            												}
            											}
HXLINE( 112)											if (::hx::IsNull( prev2 )) {
HXDLIN( 112)												b28->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 112)												l2 = null();
            											}
            											else {
HXDLIN( 112)												prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 112)												l2 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 112)						undoImage7 = b28;
            					}
            					break;
            				}
HXDLIN( 112)				this82->image = undoImage7;
HXDLIN( 112)				this82->width = width2;
HXDLIN( 112)				this82->height = height2;
HXDLIN( 112)				this82->imageType = ( (int)(imageType2) );
HXDLIN( 112)				undoImage6 = this82;
HXDLIN( 112)				{
HXDLIN( 112)					int rectLeft2 = xIter32->start;
HXDLIN( 112)					int rectTop2 = yIter32->start;
HXDLIN( 112)					int rectRight2 = xIter32->max;
HXDLIN( 112)					bool forceClear2 = false;
HXDLIN( 112)					{
HXDLIN( 112)						int _g56 = rectTop2;
HXDLIN( 112)						int _g57 = yIter32->max;
HXDLIN( 112)						while((_g56 < _g57)){
HXDLIN( 112)							_g56 = (_g56 + 1);
HXDLIN( 112)							int dy3 = (_g56 - 1);
HXDLIN( 112)							{
HXDLIN( 112)								int _g58 = rectLeft2;
HXDLIN( 112)								int _g59 = rectRight2;
HXDLIN( 112)								while((_g58 < _g59)){
HXDLIN( 112)									_g58 = (_g58 + 1);
HXDLIN( 112)									int dx3 = (_g58 - 1);
HXDLIN( 112)									::Dynamic this84 = this1->image;
HXDLIN( 112)									int index8;
HXDLIN( 112)									if (this1->useVirtualPos) {
HXDLIN( 112)										index8 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx3) - this1->virtualX));
            									}
            									else {
HXDLIN( 112)										index8 = ::Std_obj::_hx_int(( (Float)(((dy3 * this1->width) + dx3)) ));
            									}
HXDLIN( 112)									int c6 = ::iterMagic::Iimg_obj::get(this84,index8);
HXDLIN( 112)									int col2;
HXDLIN( 112)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)										col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            									}
            									else {
HXDLIN( 112)										col2 = c6;
            									}
HXDLIN( 112)									bool _hx_tmp26;
HXDLIN( 112)									if (this1->useMask) {
HXDLIN( 112)										_hx_tmp26 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN( 112)										_hx_tmp26 = false;
            									}
HXDLIN( 112)									if (_hx_tmp26) {
HXDLIN( 112)										 ::pi_xy::ImageStruct this85 = this1->mask;
HXDLIN( 112)										::Dynamic this86 = this85->image;
HXDLIN( 112)										int index9;
HXDLIN( 112)										if (this85->useVirtualPos) {
HXDLIN( 112)											index9 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this85->virtualY) * ( (Float)(this85->width) )) + dx3) - this85->virtualX));
            										}
            										else {
HXDLIN( 112)											index9 = ::Std_obj::_hx_int(( (Float)(((dy3 * this85->width) + dx3)) ));
            										}
HXDLIN( 112)										int c7 = ::iterMagic::Iimg_obj::get(this86,index9);
HXDLIN( 112)										int v7;
HXDLIN( 112)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)											v7 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            										}
            										else {
HXDLIN( 112)											v7 = c7;
            										}
HXDLIN( 112)										int maskPixel2 = v7;
HXDLIN( 112)										int this87 = col2;
HXDLIN( 112)										if ((maskPixel2 == 0)) {
HXDLIN( 112)											col2 = this87;
            										}
            										else {
HXDLIN( 112)											Float m02;
HXDLIN( 112)											int this88 = ((maskPixel2 >> 24) & 255);
HXDLIN( 112)											if ((this88 == 0)) {
HXDLIN( 112)												m02 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m02 = (( (Float)(this88) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m12;
HXDLIN( 112)											int this89 = ((maskPixel2 >> 16) & 255);
HXDLIN( 112)											if ((this89 == 0)) {
HXDLIN( 112)												m12 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m12 = (( (Float)(this89) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m22;
HXDLIN( 112)											int this90 = ((maskPixel2 >> 8) & 255);
HXDLIN( 112)											if ((this90 == 0)) {
HXDLIN( 112)												m22 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m22 = (( (Float)(this90) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m32;
HXDLIN( 112)											int this91 = (maskPixel2 & 255);
HXDLIN( 112)											if ((this91 == 0)) {
HXDLIN( 112)												m32 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m32 = (( (Float)(this91) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this87 >> 24) & 255)) )));
HXDLIN( 112)											int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this87 >> 16) & 255)) )));
HXDLIN( 112)											int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this87 >> 8) & 255)) )));
HXDLIN( 112)											int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this87 & 255)) )));
HXDLIN( 112)											col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 112)									if ((col2 != 0)) {
HXDLIN( 112)										int x7 = (dx3 - rectLeft2);
HXDLIN( 112)										int y7 = (dy3 - rectTop2);
HXDLIN( 112)										int c8 = col2;
HXDLIN( 112)										bool _hx_tmp27;
HXDLIN( 112)										if ((((c8 >> 24) & 255) < 254)) {
HXDLIN( 112)											_hx_tmp27 = undoImage6->transparent;
            										}
            										else {
HXDLIN( 112)											_hx_tmp27 = false;
            										}
HXDLIN( 112)										if (_hx_tmp27) {
HXDLIN( 112)											int location6;
HXDLIN( 112)											if (undoImage6->useVirtualPos) {
HXDLIN( 112)												location6 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            											}
            											else {
HXDLIN( 112)												location6 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            											}
HXDLIN( 112)											int this92 = ::iterMagic::Iimg_obj::get(undoImage6->image,location6);
HXDLIN( 112)											int this93;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												this93 = ((((((this92 >> 24) & 255) << 24) | ((this92 & 255) << 16)) | (((this92 >> 8) & 255) << 8)) | ((this92 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												this93 = this92;
            											}
HXDLIN( 112)											Float a19;
HXDLIN( 112)											int this94 = ((this93 >> 24) & 255);
HXDLIN( 112)											if ((this94 == 0)) {
HXDLIN( 112)												a19 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a19 = (( (Float)(this94) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r16;
HXDLIN( 112)											int this95 = ((this93 >> 16) & 255);
HXDLIN( 112)											if ((this95 == 0)) {
HXDLIN( 112)												r16 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r16 = (( (Float)(this95) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g16;
HXDLIN( 112)											int this96 = ((this93 >> 8) & 255);
HXDLIN( 112)											if ((this96 == 0)) {
HXDLIN( 112)												g16 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g16 = (( (Float)(this96) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b110;
HXDLIN( 112)											int this97 = (this93 & 255);
HXDLIN( 112)											if ((this97 == 0)) {
HXDLIN( 112)												b110 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b110 = (( (Float)(this97) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a26;
HXDLIN( 112)											int this98 = ((col2 >> 24) & 255);
HXDLIN( 112)											if ((this98 == 0)) {
HXDLIN( 112)												a26 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a26 = (( (Float)(this98) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r26;
HXDLIN( 112)											int this99 = ((col2 >> 16) & 255);
HXDLIN( 112)											if ((this99 == 0)) {
HXDLIN( 112)												r26 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r26 = (( (Float)(this99) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g26;
HXDLIN( 112)											int this100 = ((col2 >> 8) & 255);
HXDLIN( 112)											if ((this100 == 0)) {
HXDLIN( 112)												g26 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g26 = (( (Float)(this100) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b29;
HXDLIN( 112)											int this101 = (col2 & 255);
HXDLIN( 112)											if ((this101 == 0)) {
HXDLIN( 112)												b29 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b29 = (( (Float)(this101) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a36 = (a19 * (( (Float)(1) ) - a26));
HXDLIN( 112)											int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN( 112)											int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN( 112)											int b30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a36) + (b29 * a26))));
HXDLIN( 112)											int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN( 112)											int blended6 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b30);
HXDLIN( 112)											{
HXDLIN( 112)												int _hx_tmp28;
HXDLIN( 112)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)													_hx_tmp28 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            												}
            												else {
HXDLIN( 112)													_hx_tmp28 = blended6;
            												}
HXDLIN( 112)												::iterMagic::Iimg_obj::set(undoImage6->image,location6,_hx_tmp28);
            											}
            										}
            										else {
HXDLIN( 112)											::Dynamic this102 = undoImage6->image;
HXDLIN( 112)											int index10;
HXDLIN( 112)											if (undoImage6->useVirtualPos) {
HXDLIN( 112)												index10 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            											}
            											else {
HXDLIN( 112)												index10 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            											}
HXDLIN( 112)											int _hx_tmp29;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												_hx_tmp29 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												_hx_tmp29 = c8;
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this102,index10,_hx_tmp29);
            										}
            									}
            									else {
HXDLIN( 112)										if (forceClear2) {
HXDLIN( 112)											::Dynamic this103 = undoImage6->image;
HXDLIN( 112)											int x8 = (dx3 - rectLeft2);
HXDLIN( 112)											int y8 = (dy3 - rectTop2);
HXDLIN( 112)											int index11;
HXDLIN( 112)											if (undoImage6->useVirtualPos) {
HXDLIN( 112)												index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            											}
            											else {
HXDLIN( 112)												index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this103,index11,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 112)			bool found2 = false;
HXDLIN( 112)			Float min14 = ( (Float)(0) );
HXDLIN( 112)			Float max2 = ( (Float)(0) );
HXDLIN( 112)			int a27 = 0;
HXDLIN( 112)			int r17 = 0;
HXDLIN( 112)			int g17 = 0;
HXDLIN( 112)			int b31 = 0;
HXDLIN( 112)			{
HXDLIN( 112)				int _g_min4 = xIter32->start;
HXDLIN( 112)				int _g_max4 = xIter32->max;
HXDLIN( 112)				while((_g_min4 < _g_max4)){
HXDLIN( 112)					_g_min4 = (_g_min4 + 1);
HXDLIN( 112)					int px2 = (_g_min4 - 1);
HXDLIN( 112)					Float pcx2 = (( (Float)(px2) ) - dx);
HXLINE( 812)					found2 = false;
HXLINE( 112)					{
HXDLIN( 112)						int _g_min5 = yIter32->start;
HXDLIN( 112)						int _g_max5 = yIter32->max;
HXDLIN( 112)						while((_g_min5 < _g_max5)){
HXDLIN( 112)							_g_min5 = (_g_min5 + 1);
HXDLIN( 112)							int py2 = (_g_min5 - 1);
HXDLIN( 112)							Float pcy2 = (( (Float)(py2) ) - dy);
HXDLIN( 112)							Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 112)							Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 112)							Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 112)							Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 112)							Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 112)							bool _hx_tmp30;
HXDLIN( 112)							bool _hx_tmp31;
HXDLIN( 112)							if ((ratioA2 >= 0)) {
HXDLIN( 112)								_hx_tmp31 = (ratioB2 >= 0);
            							}
            							else {
HXDLIN( 112)								_hx_tmp31 = false;
            							}
HXDLIN( 112)							if (_hx_tmp31) {
HXDLIN( 112)								_hx_tmp30 = (ratioC2 >= 0);
            							}
            							else {
HXDLIN( 112)								_hx_tmp30 = false;
            							}
HXDLIN( 112)							if (_hx_tmp30) {
HXDLIN( 112)								int i28 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN( 112)								if ((i28 > 255)) {
HXLINE(  24)									i28 = 255;
            								}
HXLINE( 112)								if ((i28 < 0)) {
HXLINE(  25)									i28 = 0;
            								}
HXLINE( 821)								r17 = i28;
HXLINE( 112)								int i29 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN( 112)								if ((i29 > 255)) {
HXLINE(  24)									i29 = 255;
            								}
HXLINE( 112)								if ((i29 < 0)) {
HXLINE(  25)									i29 = 0;
            								}
HXLINE( 822)								g17 = i29;
HXLINE( 112)								int i30 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN( 112)								if ((i30 > 255)) {
HXLINE(  24)									i30 = 255;
            								}
HXLINE( 112)								if ((i30 < 0)) {
HXLINE(  25)									i30 = 0;
            								}
HXLINE( 823)								b31 = i30;
HXLINE( 112)								bool _hx_tmp32;
HXDLIN( 112)								if ((softAB == true)) {
HXDLIN( 112)									_hx_tmp32 = (softDA == true);
            								}
            								else {
HXDLIN( 112)									_hx_tmp32 = false;
            								}
HXDLIN( 112)								if (_hx_tmp32) {
HXDLIN( 112)									if ((ratioA2 < ratioC2)) {
HXDLIN( 112)										min14 = ratioA2;
            									}
            									else {
HXDLIN( 112)										min14 = ratioC2;
            									}
HXDLIN( 112)									if ((ratioA2 > ratioB2)) {
HXDLIN( 112)										max2 = ratioA2;
            									}
            									else {
HXDLIN( 112)										max2 = ratioB2;
            									}
HXDLIN( 112)									if (!((max2 > ratioC2))) {
HXDLIN( 112)										max2 = ratioC2;
            									}
HXLINE( 829)									max2 = ((( (Float)(1) ) - max2) / ( (Float)(2) ));
HXLINE( 112)									if (!((min14 < max2))) {
HXDLIN( 112)										min14 = ((max2 + min14) / ( (Float)(2) ));
            									}
HXDLIN( 112)									int i31 = ::Std_obj::_hx_int(((( (Float)(aA2) ) * soft) * min14));
HXDLIN( 112)									if ((i31 > 255)) {
HXLINE(  24)										i31 = 255;
            									}
HXLINE( 112)									if ((i31 < 0)) {
HXLINE(  25)										i31 = 0;
            									}
HXLINE( 832)									a27 = i31;
HXLINE( 112)									{
HXDLIN( 112)										int location7;
HXDLIN( 112)										if (this1->useVirtualPos) {
HXDLIN( 112)											location7 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this1->virtualY) * ( (Float)(this1->width) )) + px2) - this1->virtualX));
            										}
            										else {
HXDLIN( 112)											location7 = ::Std_obj::_hx_int(( (Float)(((py2 * this1->width) + px2)) ));
            										}
HXDLIN( 112)										bool _hx_tmp33;
HXDLIN( 112)										if (this1->transparent) {
HXDLIN( 112)											_hx_tmp33 = (a27 < 254);
            										}
            										else {
HXDLIN( 112)											_hx_tmp33 = false;
            										}
HXDLIN( 112)										if (_hx_tmp33) {
HXDLIN( 112)											int this104 = ::iterMagic::Iimg_obj::get(this1->image,location7);
HXDLIN( 112)											int old4;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												old4 = ((((((this104 >> 24) & 255) << 24) | ((this104 & 255) << 16)) | (((this104 >> 8) & 255) << 8)) | ((this104 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												old4 = this104;
            											}
HXDLIN( 112)											int rhs4 = ((((a27 << 24) | (r17 << 16)) | (g17 << 8)) | b31);
HXDLIN( 112)											Float a110;
HXDLIN( 112)											int this105 = ((old4 >> 24) & 255);
HXDLIN( 112)											if ((this105 == 0)) {
HXDLIN( 112)												a110 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a110 = (( (Float)(this105) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r18;
HXDLIN( 112)											int this106 = ((old4 >> 16) & 255);
HXDLIN( 112)											if ((this106 == 0)) {
HXDLIN( 112)												r18 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r18 = (( (Float)(this106) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g18;
HXDLIN( 112)											int this107 = ((old4 >> 8) & 255);
HXDLIN( 112)											if ((this107 == 0)) {
HXDLIN( 112)												g18 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g18 = (( (Float)(this107) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b111;
HXDLIN( 112)											int this108 = (old4 & 255);
HXDLIN( 112)											if ((this108 == 0)) {
HXDLIN( 112)												b111 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b111 = (( (Float)(this108) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a28;
HXDLIN( 112)											int this109 = ((rhs4 >> 24) & 255);
HXDLIN( 112)											if ((this109 == 0)) {
HXDLIN( 112)												a28 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a28 = (( (Float)(this109) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r27;
HXDLIN( 112)											int this110 = ((rhs4 >> 16) & 255);
HXDLIN( 112)											if ((this110 == 0)) {
HXDLIN( 112)												r27 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r27 = (( (Float)(this110) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g27;
HXDLIN( 112)											int this111 = ((rhs4 >> 8) & 255);
HXDLIN( 112)											if ((this111 == 0)) {
HXDLIN( 112)												g27 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g27 = (( (Float)(this111) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b210;
HXDLIN( 112)											int this112 = (rhs4 & 255);
HXDLIN( 112)											if ((this112 == 0)) {
HXDLIN( 112)												b210 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b210 = (( (Float)(this112) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a37 = (a110 * (( (Float)(1) ) - a28));
HXDLIN( 112)											int r19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a37) + (r27 * a28))));
HXDLIN( 112)											int g19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a37) + (g27 * a28))));
HXDLIN( 112)											int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a37) + (b210 * a28))));
HXDLIN( 112)											int a29 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a28)));
HXDLIN( 112)											int blended7 = ((((a29 << 24) | (r19 << 16)) | (g19 << 8)) | b32);
HXDLIN( 112)											{
HXDLIN( 112)												int _hx_tmp34;
HXDLIN( 112)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)													_hx_tmp34 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            												}
            												else {
HXDLIN( 112)													_hx_tmp34 = blended7;
            												}
HXDLIN( 112)												::iterMagic::Iimg_obj::set(this1->image,location7,_hx_tmp34);
            											}
            										}
            										else {
HXDLIN( 112)											int value4;
HXDLIN( 112)											if (this1->isLittle) {
HXDLIN( 112)												value4 = ((((a27 << 24) | (b31 << 16)) | (g17 << 8)) | r17);
            											}
            											else {
HXDLIN( 112)												value4 = ((((a27 << 24) | (r17 << 16)) | (g17 << 8)) | b31);
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this1->image,location7,value4);
            										}
            									}
            								}
HXDLIN( 112)								bool _hx_tmp35;
HXDLIN( 112)								bool _hx_tmp36;
HXDLIN( 112)								if ((softAB == true)) {
HXDLIN( 112)									_hx_tmp36 = false;
            								}
            								else {
HXDLIN( 112)									_hx_tmp36 = false;
            								}
HXDLIN( 112)								if (_hx_tmp36) {
HXDLIN( 112)									_hx_tmp35 = (softDA == false);
            								}
            								else {
HXDLIN( 112)									_hx_tmp35 = false;
            								}
HXDLIN( 112)								if (_hx_tmp35) {
HXDLIN( 112)									if ((ratioB2 < ratioC2)) {
HXDLIN( 112)										min14 = ratioB2;
            									}
            									else {
HXDLIN( 112)										min14 = ratioC2;
            									}
HXDLIN( 112)									if ((ratioA2 > ratioB2)) {
HXDLIN( 112)										max2 = ratioA2;
            									}
            									else {
HXDLIN( 112)										max2 = ratioB2;
            									}
HXDLIN( 112)									if (!((max2 > ratioC2))) {
HXDLIN( 112)										max2 = ratioC2;
            									}
HXLINE( 842)									max2 = ((( (Float)(1) ) - max2) / ( (Float)(2) ));
HXLINE( 112)									if (!((min14 < max2))) {
HXDLIN( 112)										min14 = ((max2 + min14) / ( (Float)(2) ));
            									}
HXDLIN( 112)									int i32 = ::Std_obj::_hx_int(((( (Float)(aA2) ) * soft) * min14));
HXDLIN( 112)									if ((i32 > 255)) {
HXLINE(  24)										i32 = 255;
            									}
HXLINE( 112)									if ((i32 < 0)) {
HXLINE(  25)										i32 = 0;
            									}
HXLINE( 845)									a27 = i32;
HXLINE( 112)									{
HXDLIN( 112)										int location8;
HXDLIN( 112)										if (this1->useVirtualPos) {
HXDLIN( 112)											location8 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this1->virtualY) * ( (Float)(this1->width) )) + px2) - this1->virtualX));
            										}
            										else {
HXDLIN( 112)											location8 = ::Std_obj::_hx_int(( (Float)(((py2 * this1->width) + px2)) ));
            										}
HXDLIN( 112)										bool _hx_tmp37;
HXDLIN( 112)										if (this1->transparent) {
HXDLIN( 112)											_hx_tmp37 = (a27 < 254);
            										}
            										else {
HXDLIN( 112)											_hx_tmp37 = false;
            										}
HXDLIN( 112)										if (_hx_tmp37) {
HXDLIN( 112)											int this113 = ::iterMagic::Iimg_obj::get(this1->image,location8);
HXDLIN( 112)											int old5;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												old5 = ((((((this113 >> 24) & 255) << 24) | ((this113 & 255) << 16)) | (((this113 >> 8) & 255) << 8)) | ((this113 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												old5 = this113;
            											}
HXDLIN( 112)											int rhs5 = ((((a27 << 24) | (r17 << 16)) | (g17 << 8)) | b31);
HXDLIN( 112)											Float a111;
HXDLIN( 112)											int this114 = ((old5 >> 24) & 255);
HXDLIN( 112)											if ((this114 == 0)) {
HXDLIN( 112)												a111 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a111 = (( (Float)(this114) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r110;
HXDLIN( 112)											int this115 = ((old5 >> 16) & 255);
HXDLIN( 112)											if ((this115 == 0)) {
HXDLIN( 112)												r110 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r110 = (( (Float)(this115) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g110;
HXDLIN( 112)											int this116 = ((old5 >> 8) & 255);
HXDLIN( 112)											if ((this116 == 0)) {
HXDLIN( 112)												g110 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g110 = (( (Float)(this116) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b112;
HXDLIN( 112)											int this117 = (old5 & 255);
HXDLIN( 112)											if ((this117 == 0)) {
HXDLIN( 112)												b112 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b112 = (( (Float)(this117) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a210;
HXDLIN( 112)											int this118 = ((rhs5 >> 24) & 255);
HXDLIN( 112)											if ((this118 == 0)) {
HXDLIN( 112)												a210 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a210 = (( (Float)(this118) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r28;
HXDLIN( 112)											int this119 = ((rhs5 >> 16) & 255);
HXDLIN( 112)											if ((this119 == 0)) {
HXDLIN( 112)												r28 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r28 = (( (Float)(this119) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g28;
HXDLIN( 112)											int this120 = ((rhs5 >> 8) & 255);
HXDLIN( 112)											if ((this120 == 0)) {
HXDLIN( 112)												g28 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g28 = (( (Float)(this120) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b211;
HXDLIN( 112)											int this121 = (rhs5 & 255);
HXDLIN( 112)											if ((this121 == 0)) {
HXDLIN( 112)												b211 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b211 = (( (Float)(this121) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a38 = (a111 * (( (Float)(1) ) - a210));
HXDLIN( 112)											int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a38) + (r28 * a210))));
HXDLIN( 112)											int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a38) + (g28 * a210))));
HXDLIN( 112)											int b33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a38) + (b211 * a210))));
HXDLIN( 112)											int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a210)));
HXDLIN( 112)											int blended8 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b33);
HXDLIN( 112)											{
HXDLIN( 112)												int _hx_tmp38;
HXDLIN( 112)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)													_hx_tmp38 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            												}
            												else {
HXDLIN( 112)													_hx_tmp38 = blended8;
            												}
HXDLIN( 112)												::iterMagic::Iimg_obj::set(this1->image,location8,_hx_tmp38);
            											}
            										}
            										else {
HXDLIN( 112)											int value5;
HXDLIN( 112)											if (this1->isLittle) {
HXDLIN( 112)												value5 = ((((a27 << 24) | (b31 << 16)) | (g17 << 8)) | r17);
            											}
            											else {
HXDLIN( 112)												value5 = ((((a27 << 24) | (r17 << 16)) | (g17 << 8)) | b31);
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this1->image,location8,value5);
            										}
            									}
            								}
HXLINE( 850)								found2 = true;
            							}
            							else {
HXDLIN( 112)								if (found2) {
HXDLIN( 112)									goto _hx_goto_143;
            								}
            							}
            						}
            						_hx_goto_143:;
            					}
            				}
            			}
HXDLIN( 112)			if ((hasHit == false)) {
HXDLIN( 112)				 ::pi_xy::algo::HitTri v8 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,dx,dy,true);
HXDLIN( 112)				if (hasUndo2) {
HXDLIN( 112)					v8->undoImage = undoImage6;
HXDLIN( 112)					v8->undoX = xIter32->start;
HXDLIN( 112)					v8->undoY = yIter32->start;
            				}
            			}
            		}
HXDLIN( 112)		{
HXDLIN( 112)			bool hasUndo3 = true;
HXDLIN( 112)			int aA3 = ((color >> 24) & 255);
HXDLIN( 112)			int rA3 = ((color >> 16) & 255);
HXDLIN( 112)			int gA3 = ((color >> 8) & 255);
HXDLIN( 112)			int bA3 = (color & 255);
HXDLIN( 112)			Float bcx3 = (cx - dx);
HXDLIN( 112)			Float bcy3 = (cy - dy);
HXDLIN( 112)			Float acx3 = (bx - dx);
HXDLIN( 112)			Float acy3 = (by - dy);
HXDLIN( 112)			Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 112)			Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 112)			Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 112)			Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 112)			 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 112)			if ((bx > cx)) {
HXDLIN( 112)				if ((bx > dx)) {
HXDLIN( 112)					int min15;
HXDLIN( 112)					if ((cx > dx)) {
HXDLIN( 112)						min15 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN( 112)						min15 = ::Math_obj::floor(cx);
            					}
HXDLIN( 112)					int ii_min24 = min15;
HXDLIN( 112)					int ii_max24 = ::Math_obj::ceil(bx);
HXDLIN( 112)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            				}
            				else {
HXDLIN( 112)					int ii_min25 = ::Math_obj::floor(cx);
HXDLIN( 112)					int ii_max25 = ::Math_obj::ceil(dx);
HXDLIN( 112)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            				}
            			}
            			else {
HXDLIN( 112)				if ((cx > dx)) {
HXDLIN( 112)					int min16;
HXDLIN( 112)					if ((bx > dx)) {
HXDLIN( 112)						min16 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN( 112)						min16 = ::Math_obj::ceil(bx);
            					}
HXDLIN( 112)					int ii_min26 = min16;
HXDLIN( 112)					int ii_max26 = ::Math_obj::ceil(cx);
HXDLIN( 112)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            				}
            				else {
HXDLIN( 112)					int ii_min27 = ::Math_obj::floor(bx);
HXDLIN( 112)					int ii_max27 = ::Math_obj::ceil(dx);
HXDLIN( 112)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            				}
            			}
HXDLIN( 112)			 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 112)			if ((by > cy)) {
HXDLIN( 112)				if ((by > dy)) {
HXDLIN( 112)					int min17;
HXDLIN( 112)					if ((cy > dy)) {
HXDLIN( 112)						min17 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN( 112)						min17 = ::Math_obj::floor(cy);
            					}
HXDLIN( 112)					int ii_min28 = min17;
HXDLIN( 112)					int ii_max28 = ::Math_obj::ceil(by);
HXDLIN( 112)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            				}
            				else {
HXDLIN( 112)					int ii_min29 = ::Math_obj::floor(cy);
HXDLIN( 112)					int ii_max29 = ::Math_obj::ceil(dy);
HXDLIN( 112)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            				}
            			}
            			else {
HXDLIN( 112)				if ((cy > dy)) {
HXDLIN( 112)					int min18;
HXDLIN( 112)					if ((by > dy)) {
HXDLIN( 112)						min18 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN( 112)						min18 = ::Math_obj::ceil(by);
            					}
HXDLIN( 112)					int ii_min30 = min18;
HXDLIN( 112)					int ii_max30 = ::Math_obj::ceil(cy);
HXDLIN( 112)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            				}
            				else {
HXDLIN( 112)					int ii_min31 = ::Math_obj::floor(by);
HXDLIN( 112)					int ii_max31 = ::Math_obj::ceil(dy);
HXDLIN( 112)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            				}
            			}
HXDLIN( 112)			 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 112)			if (hasUndo3) {
HXDLIN( 112)				int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 112)				int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 112)				 ::Dynamic imageType3 = null();
HXDLIN( 112)				 ::pi_xy::ImageStruct this122 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 112)				if (::hx::IsNull( imageType3 )) {
HXLINE(  54)					imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 112)				::Dynamic undoImage10;
HXDLIN( 112)				switch((int)(( (int)(imageType3) ))){
            					case (int)0: {
HXDLIN( 112)						 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::BytesImg b34 = byt3;
HXDLIN( 112)						{
HXDLIN( 112)							b34->width = width3;
HXDLIN( 112)							b34->height = height3;
HXDLIN( 112)							b34->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 112)							b34->data = ::haxe::io::Bytes_obj::alloc((b34->length * 4));
HXDLIN( 112)							{
HXDLIN( 112)								int len6 = b34->length;
HXDLIN( 112)								int w3 = 0;
HXDLIN( 112)								{
HXDLIN( 112)									int _g60 = 0;
HXDLIN( 112)									int _g61 = b34->height;
HXDLIN( 112)									while((_g60 < _g61)){
HXDLIN( 112)										_g60 = (_g60 + 1);
HXDLIN( 112)										int y9 = (_g60 - 1);
HXDLIN( 112)										{
HXDLIN( 112)											int _g62 = 0;
HXDLIN( 112)											int _g63 = b34->width;
HXDLIN( 112)											while((_g62 < _g63)){
HXDLIN( 112)												_g62 = (_g62 + 1);
HXDLIN( 112)												int x9 = (_g62 - 1);
HXDLIN( 112)												{
HXDLIN( 112)													w3 = (w3 + 1);
HXDLIN( 112)													b34->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 112)												{
HXDLIN( 112)													w3 = (w3 + 1);
HXDLIN( 112)													b34->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 112)												{
HXDLIN( 112)													w3 = (w3 + 1);
HXDLIN( 112)													b34->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 112)												{
HXDLIN( 112)													w3 = (w3 + 1);
HXDLIN( 112)													b34->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 112)						undoImage10 = b34;
            					}
            					break;
            					case (int)1: {
HXDLIN( 112)						 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::ArrIntImg a39 = arrI3;
HXDLIN( 112)						{
HXDLIN( 112)							a39->width = width3;
HXDLIN( 112)							a39->height = height3;
HXDLIN( 112)							a39->data = ::Array_obj< int >::__new(0);
HXDLIN( 112)							a39->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 112)							{
HXDLIN( 112)								int _g64 = 0;
HXDLIN( 112)								int _g65 = a39->length;
HXDLIN( 112)								while((_g64 < _g65)){
HXDLIN( 112)									_g64 = (_g64 + 1);
HXDLIN( 112)									int i33 = (_g64 - 1);
HXDLIN( 112)									a39->data[i33] = 0;
            								}
            							}
            						}
HXDLIN( 112)						undoImage10 = a39;
            					}
            					break;
            					case (int)2: {
HXDLIN( 112)						 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::U32ArrImg b35 = u32a3;
HXDLIN( 112)						{
HXDLIN( 112)							b35->width = width3;
HXDLIN( 112)							b35->height = height3;
HXDLIN( 112)							b35->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 112)							int size3 = (b35->length * 4);
HXDLIN( 112)							b35->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 112)							{
HXDLIN( 112)								int _g66 = 0;
HXDLIN( 112)								int _g67 = b35->length;
HXDLIN( 112)								while((_g66 < _g67)){
HXDLIN( 112)									_g66 = (_g66 + 1);
HXDLIN( 112)									int i34 = (_g66 - 1);
HXDLIN( 112)									{
HXDLIN( 112)										 ::haxe::io::ArrayBufferViewImpl this123 = b35->data;
HXDLIN( 112)										bool undoImage11;
HXDLIN( 112)										if ((i34 >= 0)) {
HXDLIN( 112)											undoImage11 = (i34 < (this123->byteLength >> 2));
            										}
            										else {
HXDLIN( 112)											undoImage11 = false;
            										}
HXDLIN( 112)										if (undoImage11) {
HXDLIN( 112)											 ::haxe::io::Bytes _this3 = this123->bytes;
HXDLIN( 112)											int pos3 = ((i34 << 2) + this123->byteOffset);
HXDLIN( 112)											_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 112)											_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 112)											_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 112)											_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 112)						undoImage10 = b35;
            					}
            					break;
            					case (int)3: {
HXDLIN( 112)						 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::VecIntImg v9 = vec3;
HXDLIN( 112)						{
HXDLIN( 112)							v9->width = width3;
HXDLIN( 112)							v9->height = height3;
HXDLIN( 112)							v9->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 112)							v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN( 112)							{
HXDLIN( 112)								int _g68 = 0;
HXDLIN( 112)								int _g69 = v9->length;
HXDLIN( 112)								while((_g68 < _g69)){
HXDLIN( 112)									_g68 = (_g68 + 1);
HXDLIN( 112)									int i35 = (_g68 - 1);
HXDLIN( 112)									v9->data->__unsafe_set(i35,0);
            								}
            							}
            						}
HXDLIN( 112)						undoImage10 = v9;
            					}
            					break;
            					case (int)4: {
HXDLIN( 112)						 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 112)						 ::iterMagic::StackIntImg b36 = sInt3;
HXDLIN( 112)						{
HXDLIN( 112)							b36->width = width3;
HXDLIN( 112)							b36->height = height3;
HXDLIN( 112)							b36->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 112)							b36->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 112)							{
HXDLIN( 112)								int len7 = b36->length;
HXDLIN( 112)								 ::haxe::ds::GenericStack_Int d3 = b36->data;
HXDLIN( 112)								if (::hx::IsNull( d3->head )) {
HXDLIN( 112)									int _g70 = 0;
HXDLIN( 112)									int _g71 = len7;
HXDLIN( 112)									while((_g70 < _g71)){
HXDLIN( 112)										_g70 = (_g70 + 1);
HXDLIN( 112)										int i36 = (_g70 - 1);
HXDLIN( 112)										d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            									}
            								}
            								else {
HXDLIN( 112)									int _g72 = 0;
HXDLIN( 112)									int _g73 = len7;
HXDLIN( 112)									while((_g72 < _g73)){
HXDLIN( 112)										_g72 = (_g72 + 1);
HXDLIN( 112)										int i37 = (_g72 - 1);
HXDLIN( 112)										{
HXDLIN( 112)											 ::haxe::ds::GenericCell_Int l3 = b36->data->head;
HXDLIN( 112)											 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 112)											{
HXDLIN( 112)												int _g74 = 0;
HXDLIN( 112)												int _g75 = i37;
HXDLIN( 112)												while((_g74 < _g75)){
HXDLIN( 112)													_g74 = (_g74 + 1);
HXDLIN( 112)													int i38 = (_g74 - 1);
HXLINE( 345)													prev3 = l3;
HXLINE( 346)													l3 = l3->next;
            												}
            											}
HXLINE( 112)											if (::hx::IsNull( prev3 )) {
HXDLIN( 112)												b36->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 112)												l3 = null();
            											}
            											else {
HXDLIN( 112)												prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 112)												l3 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 112)						undoImage10 = b36;
            					}
            					break;
            				}
HXDLIN( 112)				this122->image = undoImage10;
HXDLIN( 112)				this122->width = width3;
HXDLIN( 112)				this122->height = height3;
HXDLIN( 112)				this122->imageType = ( (int)(imageType3) );
HXDLIN( 112)				undoImage9 = this122;
HXDLIN( 112)				{
HXDLIN( 112)					int rectLeft3 = xIter33->start;
HXDLIN( 112)					int rectTop3 = yIter33->start;
HXDLIN( 112)					int rectRight3 = xIter33->max;
HXDLIN( 112)					bool forceClear3 = false;
HXDLIN( 112)					{
HXDLIN( 112)						int _g76 = rectTop3;
HXDLIN( 112)						int _g77 = yIter33->max;
HXDLIN( 112)						while((_g76 < _g77)){
HXDLIN( 112)							_g76 = (_g76 + 1);
HXDLIN( 112)							int dy4 = (_g76 - 1);
HXDLIN( 112)							{
HXDLIN( 112)								int _g78 = rectLeft3;
HXDLIN( 112)								int _g79 = rectRight3;
HXDLIN( 112)								while((_g78 < _g79)){
HXDLIN( 112)									_g78 = (_g78 + 1);
HXDLIN( 112)									int dx4 = (_g78 - 1);
HXDLIN( 112)									::Dynamic this124 = this1->image;
HXDLIN( 112)									int index12;
HXDLIN( 112)									if (this1->useVirtualPos) {
HXDLIN( 112)										index12 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx4) - this1->virtualX));
            									}
            									else {
HXDLIN( 112)										index12 = ::Std_obj::_hx_int(( (Float)(((dy4 * this1->width) + dx4)) ));
            									}
HXDLIN( 112)									int c9 = ::iterMagic::Iimg_obj::get(this124,index12);
HXDLIN( 112)									int col3;
HXDLIN( 112)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)										col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            									}
            									else {
HXDLIN( 112)										col3 = c9;
            									}
HXDLIN( 112)									bool _hx_tmp39;
HXDLIN( 112)									if (this1->useMask) {
HXDLIN( 112)										_hx_tmp39 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN( 112)										_hx_tmp39 = false;
            									}
HXDLIN( 112)									if (_hx_tmp39) {
HXDLIN( 112)										 ::pi_xy::ImageStruct this125 = this1->mask;
HXDLIN( 112)										::Dynamic this126 = this125->image;
HXDLIN( 112)										int index13;
HXDLIN( 112)										if (this125->useVirtualPos) {
HXDLIN( 112)											index13 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this125->virtualY) * ( (Float)(this125->width) )) + dx4) - this125->virtualX));
            										}
            										else {
HXDLIN( 112)											index13 = ::Std_obj::_hx_int(( (Float)(((dy4 * this125->width) + dx4)) ));
            										}
HXDLIN( 112)										int c10 = ::iterMagic::Iimg_obj::get(this126,index13);
HXDLIN( 112)										int v10;
HXDLIN( 112)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)											v10 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            										}
            										else {
HXDLIN( 112)											v10 = c10;
            										}
HXDLIN( 112)										int maskPixel3 = v10;
HXDLIN( 112)										int this127 = col3;
HXDLIN( 112)										if ((maskPixel3 == 0)) {
HXDLIN( 112)											col3 = this127;
            										}
            										else {
HXDLIN( 112)											Float m03;
HXDLIN( 112)											int this128 = ((maskPixel3 >> 24) & 255);
HXDLIN( 112)											if ((this128 == 0)) {
HXDLIN( 112)												m03 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m03 = (( (Float)(this128) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m13;
HXDLIN( 112)											int this129 = ((maskPixel3 >> 16) & 255);
HXDLIN( 112)											if ((this129 == 0)) {
HXDLIN( 112)												m13 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m13 = (( (Float)(this129) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m23;
HXDLIN( 112)											int this130 = ((maskPixel3 >> 8) & 255);
HXDLIN( 112)											if ((this130 == 0)) {
HXDLIN( 112)												m23 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m23 = (( (Float)(this130) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m33;
HXDLIN( 112)											int this131 = (maskPixel3 & 255);
HXDLIN( 112)											if ((this131 == 0)) {
HXDLIN( 112)												m33 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												m33 = (( (Float)(this131) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this127 >> 24) & 255)) )));
HXDLIN( 112)											int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this127 >> 16) & 255)) )));
HXDLIN( 112)											int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this127 >> 8) & 255)) )));
HXDLIN( 112)											int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this127 & 255)) )));
HXDLIN( 112)											col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 112)									if ((col3 != 0)) {
HXDLIN( 112)										int x10 = (dx4 - rectLeft3);
HXDLIN( 112)										int y10 = (dy4 - rectTop3);
HXDLIN( 112)										int c11 = col3;
HXDLIN( 112)										bool _hx_tmp40;
HXDLIN( 112)										if ((((c11 >> 24) & 255) < 254)) {
HXDLIN( 112)											_hx_tmp40 = undoImage9->transparent;
            										}
            										else {
HXDLIN( 112)											_hx_tmp40 = false;
            										}
HXDLIN( 112)										if (_hx_tmp40) {
HXDLIN( 112)											int location9;
HXDLIN( 112)											if (undoImage9->useVirtualPos) {
HXDLIN( 112)												location9 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            											}
            											else {
HXDLIN( 112)												location9 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            											}
HXDLIN( 112)											int this132 = ::iterMagic::Iimg_obj::get(undoImage9->image,location9);
HXDLIN( 112)											int this133;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												this133 = ((((((this132 >> 24) & 255) << 24) | ((this132 & 255) << 16)) | (((this132 >> 8) & 255) << 8)) | ((this132 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												this133 = this132;
            											}
HXDLIN( 112)											Float a112;
HXDLIN( 112)											int this134 = ((this133 >> 24) & 255);
HXDLIN( 112)											if ((this134 == 0)) {
HXDLIN( 112)												a112 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a112 = (( (Float)(this134) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r111;
HXDLIN( 112)											int this135 = ((this133 >> 16) & 255);
HXDLIN( 112)											if ((this135 == 0)) {
HXDLIN( 112)												r111 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r111 = (( (Float)(this135) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g111;
HXDLIN( 112)											int this136 = ((this133 >> 8) & 255);
HXDLIN( 112)											if ((this136 == 0)) {
HXDLIN( 112)												g111 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g111 = (( (Float)(this136) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b113;
HXDLIN( 112)											int this137 = (this133 & 255);
HXDLIN( 112)											if ((this137 == 0)) {
HXDLIN( 112)												b113 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b113 = (( (Float)(this137) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a211;
HXDLIN( 112)											int this138 = ((col3 >> 24) & 255);
HXDLIN( 112)											if ((this138 == 0)) {
HXDLIN( 112)												a211 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a211 = (( (Float)(this138) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r29;
HXDLIN( 112)											int this139 = ((col3 >> 16) & 255);
HXDLIN( 112)											if ((this139 == 0)) {
HXDLIN( 112)												r29 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r29 = (( (Float)(this139) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g29;
HXDLIN( 112)											int this140 = ((col3 >> 8) & 255);
HXDLIN( 112)											if ((this140 == 0)) {
HXDLIN( 112)												g29 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g29 = (( (Float)(this140) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b212;
HXDLIN( 112)											int this141 = (col3 & 255);
HXDLIN( 112)											if ((this141 == 0)) {
HXDLIN( 112)												b212 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b212 = (( (Float)(this141) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a310 = (a112 * (( (Float)(1) ) - a211));
HXDLIN( 112)											int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a310) + (r29 * a211))));
HXDLIN( 112)											int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a310) + (g29 * a211))));
HXDLIN( 112)											int b37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a310) + (b212 * a211))));
HXDLIN( 112)											int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN( 112)											int blended9 = ((((a40 << 24) | (r30 << 16)) | (g30 << 8)) | b37);
HXDLIN( 112)											{
HXDLIN( 112)												int _hx_tmp41;
HXDLIN( 112)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)													_hx_tmp41 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            												}
            												else {
HXDLIN( 112)													_hx_tmp41 = blended9;
            												}
HXDLIN( 112)												::iterMagic::Iimg_obj::set(undoImage9->image,location9,_hx_tmp41);
            											}
            										}
            										else {
HXDLIN( 112)											::Dynamic this142 = undoImage9->image;
HXDLIN( 112)											int index14;
HXDLIN( 112)											if (undoImage9->useVirtualPos) {
HXDLIN( 112)												index14 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            											}
            											else {
HXDLIN( 112)												index14 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            											}
HXDLIN( 112)											int _hx_tmp42;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												_hx_tmp42 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												_hx_tmp42 = c11;
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this142,index14,_hx_tmp42);
            										}
            									}
            									else {
HXDLIN( 112)										if (forceClear3) {
HXDLIN( 112)											::Dynamic this143 = undoImage9->image;
HXDLIN( 112)											int x11 = (dx4 - rectLeft3);
HXDLIN( 112)											int y11 = (dy4 - rectTop3);
HXDLIN( 112)											int index15;
HXDLIN( 112)											if (undoImage9->useVirtualPos) {
HXDLIN( 112)												index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            											}
            											else {
HXDLIN( 112)												index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this143,index15,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 112)			bool found3 = false;
HXDLIN( 112)			Float min19 = ( (Float)(0) );
HXDLIN( 112)			Float max3 = ( (Float)(0) );
HXDLIN( 112)			int a41 = 0;
HXDLIN( 112)			int r31 = 0;
HXDLIN( 112)			int g31 = 0;
HXDLIN( 112)			int b38 = 0;
HXDLIN( 112)			{
HXDLIN( 112)				int _g_min6 = xIter33->start;
HXDLIN( 112)				int _g_max6 = xIter33->max;
HXDLIN( 112)				while((_g_min6 < _g_max6)){
HXDLIN( 112)					_g_min6 = (_g_min6 + 1);
HXDLIN( 112)					int px3 = (_g_min6 - 1);
HXDLIN( 112)					Float pcx3 = (( (Float)(px3) ) - dx);
HXLINE( 812)					found3 = false;
HXLINE( 112)					{
HXDLIN( 112)						int _g_min7 = yIter33->start;
HXDLIN( 112)						int _g_max7 = yIter33->max;
HXDLIN( 112)						while((_g_min7 < _g_max7)){
HXDLIN( 112)							_g_min7 = (_g_min7 + 1);
HXDLIN( 112)							int py3 = (_g_min7 - 1);
HXDLIN( 112)							Float pcy3 = (( (Float)(py3) ) - dy);
HXDLIN( 112)							Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 112)							Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 112)							Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 112)							Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 112)							Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 112)							bool _hx_tmp43;
HXDLIN( 112)							bool _hx_tmp44;
HXDLIN( 112)							if ((ratioA3 >= 0)) {
HXDLIN( 112)								_hx_tmp44 = (ratioB3 >= 0);
            							}
            							else {
HXDLIN( 112)								_hx_tmp44 = false;
            							}
HXDLIN( 112)							if (_hx_tmp44) {
HXDLIN( 112)								_hx_tmp43 = (ratioC3 >= 0);
            							}
            							else {
HXDLIN( 112)								_hx_tmp43 = false;
            							}
HXDLIN( 112)							if (_hx_tmp43) {
HXDLIN( 112)								int i39 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN( 112)								if ((i39 > 255)) {
HXLINE(  24)									i39 = 255;
            								}
HXLINE( 112)								if ((i39 < 0)) {
HXLINE(  25)									i39 = 0;
            								}
HXLINE( 821)								r31 = i39;
HXLINE( 112)								int i40 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN( 112)								if ((i40 > 255)) {
HXLINE(  24)									i40 = 255;
            								}
HXLINE( 112)								if ((i40 < 0)) {
HXLINE(  25)									i40 = 0;
            								}
HXLINE( 822)								g31 = i40;
HXLINE( 112)								int i41 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN( 112)								if ((i41 > 255)) {
HXLINE(  24)									i41 = 255;
            								}
HXLINE( 112)								if ((i41 < 0)) {
HXLINE(  25)									i41 = 0;
            								}
HXLINE( 823)								b38 = i41;
HXLINE( 112)								bool _hx_tmp45;
HXDLIN( 112)								bool _hx_tmp46;
HXDLIN( 112)								if ((softBC == true)) {
HXDLIN( 112)									_hx_tmp46 = (softCD == false);
            								}
            								else {
HXDLIN( 112)									_hx_tmp46 = false;
            								}
HXDLIN( 112)								if (_hx_tmp46) {
HXDLIN( 112)									_hx_tmp45 = false;
            								}
            								else {
HXDLIN( 112)									_hx_tmp45 = false;
            								}
HXDLIN( 112)								if (_hx_tmp45) {
HXDLIN( 112)									if ((ratioA3 < ratioC3)) {
HXDLIN( 112)										min19 = ratioA3;
            									}
            									else {
HXDLIN( 112)										min19 = ratioC3;
            									}
HXDLIN( 112)									if ((ratioA3 > ratioB3)) {
HXDLIN( 112)										max3 = ratioA3;
            									}
            									else {
HXDLIN( 112)										max3 = ratioB3;
            									}
HXDLIN( 112)									if (!((max3 > ratioC3))) {
HXDLIN( 112)										max3 = ratioC3;
            									}
HXLINE( 829)									max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE( 112)									if (!((min19 < max3))) {
HXDLIN( 112)										min19 = ((max3 + min19) / ( (Float)(2) ));
            									}
HXDLIN( 112)									int i42 = ::Std_obj::_hx_int(((( (Float)(aA3) ) * soft) * min19));
HXDLIN( 112)									if ((i42 > 255)) {
HXLINE(  24)										i42 = 255;
            									}
HXLINE( 112)									if ((i42 < 0)) {
HXLINE(  25)										i42 = 0;
            									}
HXLINE( 832)									a41 = i42;
HXLINE( 112)									{
HXDLIN( 112)										int location10;
HXDLIN( 112)										if (this1->useVirtualPos) {
HXDLIN( 112)											location10 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this1->virtualY) * ( (Float)(this1->width) )) + px3) - this1->virtualX));
            										}
            										else {
HXDLIN( 112)											location10 = ::Std_obj::_hx_int(( (Float)(((py3 * this1->width) + px3)) ));
            										}
HXDLIN( 112)										bool _hx_tmp47;
HXDLIN( 112)										if (this1->transparent) {
HXDLIN( 112)											_hx_tmp47 = (a41 < 254);
            										}
            										else {
HXDLIN( 112)											_hx_tmp47 = false;
            										}
HXDLIN( 112)										if (_hx_tmp47) {
HXDLIN( 112)											int this144 = ::iterMagic::Iimg_obj::get(this1->image,location10);
HXDLIN( 112)											int old6;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												old6 = ((((((this144 >> 24) & 255) << 24) | ((this144 & 255) << 16)) | (((this144 >> 8) & 255) << 8)) | ((this144 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												old6 = this144;
            											}
HXDLIN( 112)											int rhs6 = ((((a41 << 24) | (r31 << 16)) | (g31 << 8)) | b38);
HXDLIN( 112)											Float a113;
HXDLIN( 112)											int this145 = ((old6 >> 24) & 255);
HXDLIN( 112)											if ((this145 == 0)) {
HXDLIN( 112)												a113 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a113 = (( (Float)(this145) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r112;
HXDLIN( 112)											int this146 = ((old6 >> 16) & 255);
HXDLIN( 112)											if ((this146 == 0)) {
HXDLIN( 112)												r112 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r112 = (( (Float)(this146) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g112;
HXDLIN( 112)											int this147 = ((old6 >> 8) & 255);
HXDLIN( 112)											if ((this147 == 0)) {
HXDLIN( 112)												g112 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g112 = (( (Float)(this147) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b114;
HXDLIN( 112)											int this148 = (old6 & 255);
HXDLIN( 112)											if ((this148 == 0)) {
HXDLIN( 112)												b114 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b114 = (( (Float)(this148) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a212;
HXDLIN( 112)											int this149 = ((rhs6 >> 24) & 255);
HXDLIN( 112)											if ((this149 == 0)) {
HXDLIN( 112)												a212 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a212 = (( (Float)(this149) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r210;
HXDLIN( 112)											int this150 = ((rhs6 >> 16) & 255);
HXDLIN( 112)											if ((this150 == 0)) {
HXDLIN( 112)												r210 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r210 = (( (Float)(this150) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g210;
HXDLIN( 112)											int this151 = ((rhs6 >> 8) & 255);
HXDLIN( 112)											if ((this151 == 0)) {
HXDLIN( 112)												g210 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g210 = (( (Float)(this151) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b213;
HXDLIN( 112)											int this152 = (rhs6 & 255);
HXDLIN( 112)											if ((this152 == 0)) {
HXDLIN( 112)												b213 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b213 = (( (Float)(this152) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a311 = (a113 * (( (Float)(1) ) - a212));
HXDLIN( 112)											int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a311) + (r210 * a212))));
HXDLIN( 112)											int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a311) + (g210 * a212))));
HXDLIN( 112)											int b39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a311) + (b213 * a212))));
HXDLIN( 112)											int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN( 112)											int blended10 = ((((a42 << 24) | (r32 << 16)) | (g32 << 8)) | b39);
HXDLIN( 112)											{
HXDLIN( 112)												int _hx_tmp48;
HXDLIN( 112)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)													_hx_tmp48 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            												}
            												else {
HXDLIN( 112)													_hx_tmp48 = blended10;
            												}
HXDLIN( 112)												::iterMagic::Iimg_obj::set(this1->image,location10,_hx_tmp48);
            											}
            										}
            										else {
HXDLIN( 112)											int value6;
HXDLIN( 112)											if (this1->isLittle) {
HXDLIN( 112)												value6 = ((((a41 << 24) | (b38 << 16)) | (g31 << 8)) | r31);
            											}
            											else {
HXDLIN( 112)												value6 = ((((a41 << 24) | (r31 << 16)) | (g31 << 8)) | b38);
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this1->image,location10,value6);
            										}
            									}
            								}
HXDLIN( 112)								bool _hx_tmp49;
HXDLIN( 112)								if ((softBC == true)) {
HXDLIN( 112)									_hx_tmp49 = (softCD == true);
            								}
            								else {
HXDLIN( 112)									_hx_tmp49 = false;
            								}
HXDLIN( 112)								if (_hx_tmp49) {
HXDLIN( 112)									if ((ratioB3 < ratioC3)) {
HXDLIN( 112)										min19 = ratioB3;
            									}
            									else {
HXDLIN( 112)										min19 = ratioC3;
            									}
HXDLIN( 112)									if ((ratioA3 > ratioB3)) {
HXDLIN( 112)										max3 = ratioA3;
            									}
            									else {
HXDLIN( 112)										max3 = ratioB3;
            									}
HXDLIN( 112)									if (!((max3 > ratioC3))) {
HXDLIN( 112)										max3 = ratioC3;
            									}
HXLINE( 842)									max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE( 112)									if (!((min19 < max3))) {
HXDLIN( 112)										min19 = ((max3 + min19) / ( (Float)(2) ));
            									}
HXDLIN( 112)									int i43 = ::Std_obj::_hx_int(((( (Float)(aA3) ) * soft) * min19));
HXDLIN( 112)									if ((i43 > 255)) {
HXLINE(  24)										i43 = 255;
            									}
HXLINE( 112)									if ((i43 < 0)) {
HXLINE(  25)										i43 = 0;
            									}
HXLINE( 845)									a41 = i43;
HXLINE( 112)									{
HXDLIN( 112)										int location11;
HXDLIN( 112)										if (this1->useVirtualPos) {
HXDLIN( 112)											location11 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this1->virtualY) * ( (Float)(this1->width) )) + px3) - this1->virtualX));
            										}
            										else {
HXDLIN( 112)											location11 = ::Std_obj::_hx_int(( (Float)(((py3 * this1->width) + px3)) ));
            										}
HXDLIN( 112)										bool _hx_tmp50;
HXDLIN( 112)										if (this1->transparent) {
HXDLIN( 112)											_hx_tmp50 = (a41 < 254);
            										}
            										else {
HXDLIN( 112)											_hx_tmp50 = false;
            										}
HXDLIN( 112)										if (_hx_tmp50) {
HXDLIN( 112)											int this153 = ::iterMagic::Iimg_obj::get(this1->image,location11);
HXDLIN( 112)											int old7;
HXDLIN( 112)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)												old7 = ((((((this153 >> 24) & 255) << 24) | ((this153 & 255) << 16)) | (((this153 >> 8) & 255) << 8)) | ((this153 >> 16) & 255));
            											}
            											else {
HXDLIN( 112)												old7 = this153;
            											}
HXDLIN( 112)											int rhs7 = ((((a41 << 24) | (r31 << 16)) | (g31 << 8)) | b38);
HXDLIN( 112)											Float a114;
HXDLIN( 112)											int this154 = ((old7 >> 24) & 255);
HXDLIN( 112)											if ((this154 == 0)) {
HXDLIN( 112)												a114 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a114 = (( (Float)(this154) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r113;
HXDLIN( 112)											int this155 = ((old7 >> 16) & 255);
HXDLIN( 112)											if ((this155 == 0)) {
HXDLIN( 112)												r113 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r113 = (( (Float)(this155) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g113;
HXDLIN( 112)											int this156 = ((old7 >> 8) & 255);
HXDLIN( 112)											if ((this156 == 0)) {
HXDLIN( 112)												g113 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g113 = (( (Float)(this156) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b115;
HXDLIN( 112)											int this157 = (old7 & 255);
HXDLIN( 112)											if ((this157 == 0)) {
HXDLIN( 112)												b115 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b115 = (( (Float)(this157) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a213;
HXDLIN( 112)											int this158 = ((rhs7 >> 24) & 255);
HXDLIN( 112)											if ((this158 == 0)) {
HXDLIN( 112)												a213 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												a213 = (( (Float)(this158) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r211;
HXDLIN( 112)											int this159 = ((rhs7 >> 16) & 255);
HXDLIN( 112)											if ((this159 == 0)) {
HXDLIN( 112)												r211 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												r211 = (( (Float)(this159) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g211;
HXDLIN( 112)											int this160 = ((rhs7 >> 8) & 255);
HXDLIN( 112)											if ((this160 == 0)) {
HXDLIN( 112)												g211 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												g211 = (( (Float)(this160) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b214;
HXDLIN( 112)											int this161 = (rhs7 & 255);
HXDLIN( 112)											if ((this161 == 0)) {
HXDLIN( 112)												b214 = ((Float)0.);
            											}
            											else {
HXDLIN( 112)												b214 = (( (Float)(this161) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a312 = (a114 * (( (Float)(1) ) - a213));
HXDLIN( 112)											int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a312) + (r211 * a213))));
HXDLIN( 112)											int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a312) + (g211 * a213))));
HXDLIN( 112)											int b40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a312) + (b214 * a213))));
HXDLIN( 112)											int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN( 112)											int blended11 = ((((a43 << 24) | (r33 << 16)) | (g33 << 8)) | b40);
HXDLIN( 112)											{
HXDLIN( 112)												int _hx_tmp51;
HXDLIN( 112)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 112)													_hx_tmp51 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            												}
            												else {
HXDLIN( 112)													_hx_tmp51 = blended11;
            												}
HXDLIN( 112)												::iterMagic::Iimg_obj::set(this1->image,location11,_hx_tmp51);
            											}
            										}
            										else {
HXDLIN( 112)											int value7;
HXDLIN( 112)											if (this1->isLittle) {
HXDLIN( 112)												value7 = ((((a41 << 24) | (b38 << 16)) | (g31 << 8)) | r31);
            											}
            											else {
HXDLIN( 112)												value7 = ((((a41 << 24) | (r31 << 16)) | (g31 << 8)) | b38);
            											}
HXDLIN( 112)											::iterMagic::Iimg_obj::set(this1->image,location11,value7);
            										}
            									}
            								}
HXLINE( 850)								found3 = true;
            							}
            							else {
HXDLIN( 112)								if (found3) {
HXDLIN( 112)									goto _hx_goto_155;
            								}
            							}
            						}
            						_hx_goto_155:;
            					}
            				}
            			}
HXDLIN( 112)			if ((hasHit == false)) {
HXDLIN( 112)				 ::pi_xy::algo::HitTri v11 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,cx,cy,dx,dy,true);
HXDLIN( 112)				if (hasUndo3) {
HXDLIN( 112)					v11->undoImage = undoImage9;
HXDLIN( 112)					v11->undoX = xIter33->start;
HXDLIN( 112)					v11->undoY = yIter33->start;
            				}
            			}
            		}
HXDLIN( 112)		if ((hasHit == true)) {
HXDLIN( 112)			 ::pi_xy::algo::HitQuad v12 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 112)			return v12;
            		}
            		else {
HXDLIN( 112)			return null();
            		}
HXDLIN( 112)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC16(SoftShape_Impl__obj,quadQuarter,return )

 ::pi_xy::algo::HitQuad SoftShape_Impl__obj::line( ::pi_xy::ImageStruct this1,Float px,Float py,Float qx,Float qy,Float thick,int color,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_softAB,::hx::Null< bool >  __o_softBC,::hx::Null< bool >  __o_softCD,::hx::Null< bool >  __o_softDA,::hx::Null< bool >  __o_hasHit, ::Dynamic __o_debugCorners){
            		Float soft = __o_soft.Default(40);
            		bool softAB = __o_softAB.Default(true);
            		bool softBC = __o_softBC.Default(true);
            		bool softCD = __o_softCD.Default(true);
            		bool softDA = __o_softDA.Default(true);
            		bool hasHit = __o_hasHit.Default(true);
            		 ::Dynamic debugCorners = __o_debugCorners;
            		if (::hx::IsNull(__o_debugCorners)) debugCorners = false;
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_137_line)
HXLINE( 138)		Float o = (qy - py);
HXLINE( 139)		Float a = (qx - px);
HXLINE( 140)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE( 141)		Float theta = ::Math_obj::atan2(o,a);
HXLINE( 142)		 ::Dynamic debugCorners1 = debugCorners;
HXLINE( 151)		if (::hx::IsNull( debugCorners1 )) {
HXLINE( 151)			debugCorners1 = false;
            		}
HXLINE( 142)		Float sin = ::Math_obj::sin(theta);
HXDLIN( 142)		Float cos = ::Math_obj::cos(theta);
HXDLIN( 142)		Float radius = (thick / ( (Float)(2) ));
HXDLIN( 142)		Float dx = ((Float)0.1);
HXDLIN( 142)		Float dy = radius;
HXDLIN( 142)		Float cx = h;
HXDLIN( 142)		Float cy = radius;
HXDLIN( 142)		Float bx = h;
HXDLIN( 142)		Float by = -(radius);
HXDLIN( 142)		Float ax = ((Float)0.1);
HXDLIN( 142)		Float ay = -(radius);
HXDLIN( 142)		Float temp = ((Float)0.);
HXLINE(  82)		temp = (px + ((ax * cos) - (ay * sin)));
HXLINE(  83)		ay = (py + ((ay * cos) + (ax * sin)));
HXLINE(  84)		ax = temp;
HXLINE(  86)		temp = (px + ((bx * cos) - (by * sin)));
HXLINE(  87)		by = (py + ((by * cos) + (bx * sin)));
HXLINE(  88)		bx = temp;
HXLINE(  90)		temp = (px + ((cx * cos) - (cy * sin)));
HXLINE(  91)		cy = (py + ((cy * cos) + (cx * sin)));
HXLINE(  92)		cx = temp;
HXLINE(  94)		temp = (px + ((dx * cos) - (dy * sin)));
HXLINE(  95)		dy = (py + ((dy * cos) + (dx * sin)));
HXLINE(  96)		dx = temp;
HXLINE( 142)		if (( (bool)(debugCorners1) )) {
HXLINE( 142)			{
HXLINE( 142)				 ::pi_xy::ImageStruct this2 = this1;
HXDLIN( 142)				{
HXLINE( 142)					int r_x = ::Std_obj::_hx_int((ax - ((Float)6.)));
HXDLIN( 142)					int r_y = ::Std_obj::_hx_int((ay - ((Float)6.)));
HXDLIN( 142)					int r_w = 12;
HXDLIN( 142)					int r_h = 12;
HXDLIN( 142)					int xmax = ((r_x + r_w) + 1);
HXDLIN( 142)					int ymax = ((r_y + r_h) + 1);
HXDLIN( 142)					int ii_min = r_x;
HXDLIN( 142)					int ii_max = xmax;
HXDLIN( 142)					int xRange__start = ii_min;
HXDLIN( 142)					int xRange__max = ii_max;
HXDLIN( 142)					int ii_min1 = r_y;
HXDLIN( 142)					int ii_max1 = ymax;
HXDLIN( 142)					int yRange__start = ii_min1;
HXDLIN( 142)					int yRange__max = ii_max1;
HXDLIN( 142)					int range_x = xRange__start;
HXDLIN( 142)					int range_y = (yRange__start - 1);
HXDLIN( 142)					int range_xReset = range_x;
HXDLIN( 142)					int range_yReset = range_y;
HXDLIN( 142)					int range_xMax = (xRange__max - 2);
HXDLIN( 142)					int range_yMax = (yRange__max - 2);
HXDLIN( 142)					int _this_min = 0;
HXDLIN( 142)					int _this_max = ::Std_obj::_hx_int(( (Float)(((xRange__max - xRange__start) * (yRange__max - yRange__start))) ));
HXDLIN( 142)					while((_this_min < _this_max)){
HXLINE( 142)						_this_min = (_this_min + 1);
HXDLIN( 142)						int i = (_this_min - 1);
HXDLIN( 142)						if ((range_y > range_yMax)) {
HXLINE( 142)							range_y = range_yReset;
HXDLIN( 142)							range_x = (range_x + 1);
            						}
HXDLIN( 142)						range_y = (range_y + 1);
HXDLIN( 142)						int i1 = i;
HXDLIN( 142)						{
HXLINE( 142)							int x = range_x;
HXDLIN( 142)							int y = range_y;
HXDLIN( 142)							int c = -65536;
HXDLIN( 142)							bool _hx_tmp;
HXDLIN( 142)							if ((((c >> 24) & 255) < 254)) {
HXLINE( 142)								_hx_tmp = this2->transparent;
            							}
            							else {
HXLINE( 142)								_hx_tmp = false;
            							}
HXDLIN( 142)							if (_hx_tmp) {
HXLINE( 142)								int location;
HXDLIN( 142)								if (this2->useVirtualPos) {
HXLINE( 142)									location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this2->virtualY) * ( (Float)(this2->width) )) + x) - this2->virtualX));
            								}
            								else {
HXLINE( 142)									location = ::Std_obj::_hx_int(( (Float)(((y * this2->width) + x)) ));
            								}
HXDLIN( 142)								int this3 = ::iterMagic::Iimg_obj::get(this2->image,location);
HXDLIN( 142)								int this4;
HXDLIN( 142)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)									this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            								}
            								else {
HXLINE( 142)									this4 = this3;
            								}
HXDLIN( 142)								Float a1;
HXDLIN( 142)								int this5 = ((this4 >> 24) & 255);
HXDLIN( 142)								if ((this5 == 0)) {
HXLINE( 142)									a1 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float r1;
HXDLIN( 142)								int this6 = ((this4 >> 16) & 255);
HXDLIN( 142)								if ((this6 == 0)) {
HXLINE( 142)									r1 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float g1;
HXDLIN( 142)								int this7 = ((this4 >> 8) & 255);
HXDLIN( 142)								if ((this7 == 0)) {
HXLINE( 142)									g1 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float b1;
HXDLIN( 142)								int this8 = (this4 & 255);
HXDLIN( 142)								if ((this8 == 0)) {
HXLINE( 142)									b1 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float a2;
HXDLIN( 142)								int this9 = ((-65536 >> 24) & 255);
HXDLIN( 142)								if ((this9 == 0)) {
HXLINE( 142)									a2 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float r2;
HXDLIN( 142)								int this10 = ((-65536 >> 16) & 255);
HXDLIN( 142)								if ((this10 == 0)) {
HXLINE( 142)									r2 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float g2;
HXDLIN( 142)								int this11 = ((-65536 >> 8) & 255);
HXDLIN( 142)								if ((this11 == 0)) {
HXLINE( 142)									g2 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float b2;
HXDLIN( 142)								int this12 = (-65536 & 255);
HXDLIN( 142)								if ((this12 == 0)) {
HXLINE( 142)									b2 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 142)								int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 142)								int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 142)								int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 142)								int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 142)								int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 142)								{
HXLINE( 142)									int _hx_tmp1;
HXDLIN( 142)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)										_hx_tmp1 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            									}
            									else {
HXLINE( 142)										_hx_tmp1 = blended;
            									}
HXDLIN( 142)									::iterMagic::Iimg_obj::set(this2->image,location,_hx_tmp1);
            								}
            							}
            							else {
HXLINE( 142)								::Dynamic this13 = this2->image;
HXDLIN( 142)								int index;
HXDLIN( 142)								if (this2->useVirtualPos) {
HXLINE( 142)									index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this2->virtualY) * ( (Float)(this2->width) )) + x) - this2->virtualX));
            								}
            								else {
HXLINE( 142)									index = ::Std_obj::_hx_int(( (Float)(((y * this2->width) + x)) ));
            								}
HXDLIN( 142)								int _hx_tmp2;
HXDLIN( 142)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)									_hx_tmp2 = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 142)									_hx_tmp2 = c;
            								}
HXDLIN( 142)								::iterMagic::Iimg_obj::set(this13,index,_hx_tmp2);
            							}
            						}
            					}
            				}
            			}
HXDLIN( 142)			{
HXLINE( 142)				 ::pi_xy::ImageStruct this14 = this1;
HXDLIN( 142)				{
HXLINE( 142)					int r_x1 = ::Std_obj::_hx_int((bx - ((Float)6.)));
HXDLIN( 142)					int r_y1 = ::Std_obj::_hx_int((by - ((Float)6.)));
HXDLIN( 142)					int r_w1 = 12;
HXDLIN( 142)					int r_h1 = 12;
HXDLIN( 142)					int xmax1 = ((r_x1 + r_w1) + 1);
HXDLIN( 142)					int ymax1 = ((r_y1 + r_h1) + 1);
HXDLIN( 142)					int ii_min2 = r_x1;
HXDLIN( 142)					int ii_max2 = xmax1;
HXDLIN( 142)					int xRange__start1 = ii_min2;
HXDLIN( 142)					int xRange__max1 = ii_max2;
HXDLIN( 142)					int ii_min3 = r_y1;
HXDLIN( 142)					int ii_max3 = ymax1;
HXDLIN( 142)					int yRange__start1 = ii_min3;
HXDLIN( 142)					int yRange__max1 = ii_max3;
HXDLIN( 142)					int range_x1 = xRange__start1;
HXDLIN( 142)					int range_y1 = (yRange__start1 - 1);
HXDLIN( 142)					int range_xReset1 = range_x1;
HXDLIN( 142)					int range_yReset1 = range_y1;
HXDLIN( 142)					int range_xMax1 = (xRange__max1 - 2);
HXDLIN( 142)					int range_yMax1 = (yRange__max1 - 2);
HXDLIN( 142)					int _this_min1 = 0;
HXDLIN( 142)					int _this_max1 = ::Std_obj::_hx_int(( (Float)(((xRange__max1 - xRange__start1) * (yRange__max1 - yRange__start1))) ));
HXDLIN( 142)					while((_this_min1 < _this_max1)){
HXLINE( 142)						_this_min1 = (_this_min1 + 1);
HXDLIN( 142)						int i2 = (_this_min1 - 1);
HXDLIN( 142)						if ((range_y1 > range_yMax1)) {
HXLINE( 142)							range_y1 = range_yReset1;
HXDLIN( 142)							range_x1 = (range_x1 + 1);
            						}
HXDLIN( 142)						range_y1 = (range_y1 + 1);
HXDLIN( 142)						int i3 = i2;
HXDLIN( 142)						{
HXLINE( 142)							int x1 = range_x1;
HXDLIN( 142)							int y1 = range_y1;
HXDLIN( 142)							int c1 = -16711936;
HXDLIN( 142)							bool _hx_tmp3;
HXDLIN( 142)							if ((((c1 >> 24) & 255) < 254)) {
HXLINE( 142)								_hx_tmp3 = this14->transparent;
            							}
            							else {
HXLINE( 142)								_hx_tmp3 = false;
            							}
HXDLIN( 142)							if (_hx_tmp3) {
HXLINE( 142)								int location1;
HXDLIN( 142)								if (this14->useVirtualPos) {
HXLINE( 142)									location1 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - this14->virtualY) * ( (Float)(this14->width) )) + x1) - this14->virtualX));
            								}
            								else {
HXLINE( 142)									location1 = ::Std_obj::_hx_int(( (Float)(((y1 * this14->width) + x1)) ));
            								}
HXDLIN( 142)								int this15 = ::iterMagic::Iimg_obj::get(this14->image,location1);
HXDLIN( 142)								int this16;
HXDLIN( 142)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)									this16 = ((((((this15 >> 24) & 255) << 24) | ((this15 & 255) << 16)) | (((this15 >> 8) & 255) << 8)) | ((this15 >> 16) & 255));
            								}
            								else {
HXLINE( 142)									this16 = this15;
            								}
HXDLIN( 142)								Float a11;
HXDLIN( 142)								int this17 = ((this16 >> 24) & 255);
HXDLIN( 142)								if ((this17 == 0)) {
HXLINE( 142)									a11 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									a11 = (( (Float)(this17) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float r11;
HXDLIN( 142)								int this18 = ((this16 >> 16) & 255);
HXDLIN( 142)								if ((this18 == 0)) {
HXLINE( 142)									r11 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									r11 = (( (Float)(this18) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float g11;
HXDLIN( 142)								int this19 = ((this16 >> 8) & 255);
HXDLIN( 142)								if ((this19 == 0)) {
HXLINE( 142)									g11 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									g11 = (( (Float)(this19) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float b11;
HXDLIN( 142)								int this20 = (this16 & 255);
HXDLIN( 142)								if ((this20 == 0)) {
HXLINE( 142)									b11 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									b11 = (( (Float)(this20) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float a21;
HXDLIN( 142)								int this21 = ((-16711936 >> 24) & 255);
HXDLIN( 142)								if ((this21 == 0)) {
HXLINE( 142)									a21 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									a21 = (( (Float)(this21) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float r21;
HXDLIN( 142)								int this22 = ((-16711936 >> 16) & 255);
HXDLIN( 142)								if ((this22 == 0)) {
HXLINE( 142)									r21 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									r21 = (( (Float)(this22) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float g21;
HXDLIN( 142)								int this23 = ((-16711936 >> 8) & 255);
HXDLIN( 142)								if ((this23 == 0)) {
HXLINE( 142)									g21 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									g21 = (( (Float)(this23) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float b21;
HXDLIN( 142)								int this24 = (-16711936 & 255);
HXDLIN( 142)								if ((this24 == 0)) {
HXLINE( 142)									b21 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									b21 = (( (Float)(this24) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN( 142)								int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 142)								int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 142)								int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a31) + (b21 * a21))));
HXDLIN( 142)								int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 142)								int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN( 142)								{
HXLINE( 142)									int _hx_tmp4;
HXDLIN( 142)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)										_hx_tmp4 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            									}
            									else {
HXLINE( 142)										_hx_tmp4 = blended1;
            									}
HXDLIN( 142)									::iterMagic::Iimg_obj::set(this14->image,location1,_hx_tmp4);
            								}
            							}
            							else {
HXLINE( 142)								::Dynamic this25 = this14->image;
HXDLIN( 142)								int index1;
HXDLIN( 142)								if (this14->useVirtualPos) {
HXLINE( 142)									index1 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - this14->virtualY) * ( (Float)(this14->width) )) + x1) - this14->virtualX));
            								}
            								else {
HXLINE( 142)									index1 = ::Std_obj::_hx_int(( (Float)(((y1 * this14->width) + x1)) ));
            								}
HXDLIN( 142)								int _hx_tmp5;
HXDLIN( 142)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)									_hx_tmp5 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            								}
            								else {
HXLINE( 142)									_hx_tmp5 = c1;
            								}
HXDLIN( 142)								::iterMagic::Iimg_obj::set(this25,index1,_hx_tmp5);
            							}
            						}
            					}
            				}
            			}
HXDLIN( 142)			{
HXLINE( 142)				 ::pi_xy::ImageStruct this26 = this1;
HXDLIN( 142)				{
HXLINE( 142)					int r_x2 = ::Std_obj::_hx_int((cx - ((Float)6.)));
HXDLIN( 142)					int r_y2 = ::Std_obj::_hx_int((cy - ((Float)6.)));
HXDLIN( 142)					int r_w2 = 12;
HXDLIN( 142)					int r_h2 = 12;
HXDLIN( 142)					int xmax2 = ((r_x2 + r_w2) + 1);
HXDLIN( 142)					int ymax2 = ((r_y2 + r_h2) + 1);
HXDLIN( 142)					int ii_min4 = r_x2;
HXDLIN( 142)					int ii_max4 = xmax2;
HXDLIN( 142)					int xRange__start2 = ii_min4;
HXDLIN( 142)					int xRange__max2 = ii_max4;
HXDLIN( 142)					int ii_min5 = r_y2;
HXDLIN( 142)					int ii_max5 = ymax2;
HXDLIN( 142)					int yRange__start2 = ii_min5;
HXDLIN( 142)					int yRange__max2 = ii_max5;
HXDLIN( 142)					int range_x2 = xRange__start2;
HXDLIN( 142)					int range_y2 = (yRange__start2 - 1);
HXDLIN( 142)					int range_xReset2 = range_x2;
HXDLIN( 142)					int range_yReset2 = range_y2;
HXDLIN( 142)					int range_xMax2 = (xRange__max2 - 2);
HXDLIN( 142)					int range_yMax2 = (yRange__max2 - 2);
HXDLIN( 142)					int _this_min2 = 0;
HXDLIN( 142)					int _this_max2 = ::Std_obj::_hx_int(( (Float)(((xRange__max2 - xRange__start2) * (yRange__max2 - yRange__start2))) ));
HXDLIN( 142)					while((_this_min2 < _this_max2)){
HXLINE( 142)						_this_min2 = (_this_min2 + 1);
HXDLIN( 142)						int i4 = (_this_min2 - 1);
HXDLIN( 142)						if ((range_y2 > range_yMax2)) {
HXLINE( 142)							range_y2 = range_yReset2;
HXDLIN( 142)							range_x2 = (range_x2 + 1);
            						}
HXDLIN( 142)						range_y2 = (range_y2 + 1);
HXDLIN( 142)						int i5 = i4;
HXDLIN( 142)						{
HXLINE( 142)							int x2 = range_x2;
HXDLIN( 142)							int y2 = range_y2;
HXDLIN( 142)							int c2 = -16776961;
HXDLIN( 142)							bool _hx_tmp6;
HXDLIN( 142)							if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 142)								_hx_tmp6 = this26->transparent;
            							}
            							else {
HXLINE( 142)								_hx_tmp6 = false;
            							}
HXDLIN( 142)							if (_hx_tmp6) {
HXLINE( 142)								int location2;
HXDLIN( 142)								if (this26->useVirtualPos) {
HXLINE( 142)									location2 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - this26->virtualY) * ( (Float)(this26->width) )) + x2) - this26->virtualX));
            								}
            								else {
HXLINE( 142)									location2 = ::Std_obj::_hx_int(( (Float)(((y2 * this26->width) + x2)) ));
            								}
HXDLIN( 142)								int this27 = ::iterMagic::Iimg_obj::get(this26->image,location2);
HXDLIN( 142)								int this28;
HXDLIN( 142)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)									this28 = ((((((this27 >> 24) & 255) << 24) | ((this27 & 255) << 16)) | (((this27 >> 8) & 255) << 8)) | ((this27 >> 16) & 255));
            								}
            								else {
HXLINE( 142)									this28 = this27;
            								}
HXDLIN( 142)								Float a12;
HXDLIN( 142)								int this29 = ((this28 >> 24) & 255);
HXDLIN( 142)								if ((this29 == 0)) {
HXLINE( 142)									a12 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									a12 = (( (Float)(this29) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float r12;
HXDLIN( 142)								int this30 = ((this28 >> 16) & 255);
HXDLIN( 142)								if ((this30 == 0)) {
HXLINE( 142)									r12 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									r12 = (( (Float)(this30) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float g12;
HXDLIN( 142)								int this31 = ((this28 >> 8) & 255);
HXDLIN( 142)								if ((this31 == 0)) {
HXLINE( 142)									g12 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									g12 = (( (Float)(this31) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float b12;
HXDLIN( 142)								int this32 = (this28 & 255);
HXDLIN( 142)								if ((this32 == 0)) {
HXLINE( 142)									b12 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									b12 = (( (Float)(this32) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float a22;
HXDLIN( 142)								int this33 = ((-16776961 >> 24) & 255);
HXDLIN( 142)								if ((this33 == 0)) {
HXLINE( 142)									a22 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									a22 = (( (Float)(this33) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float r22;
HXDLIN( 142)								int this34 = ((-16776961 >> 16) & 255);
HXDLIN( 142)								if ((this34 == 0)) {
HXLINE( 142)									r22 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									r22 = (( (Float)(this34) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float g22;
HXDLIN( 142)								int this35 = ((-16776961 >> 8) & 255);
HXDLIN( 142)								if ((this35 == 0)) {
HXLINE( 142)									g22 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									g22 = (( (Float)(this35) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float b22;
HXDLIN( 142)								int this36 = (-16776961 & 255);
HXDLIN( 142)								if ((this36 == 0)) {
HXLINE( 142)									b22 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									b22 = (( (Float)(this36) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN( 142)								int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 142)								int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 142)								int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a32) + (b22 * a22))));
HXDLIN( 142)								int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 142)								int blended2 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b4);
HXDLIN( 142)								{
HXLINE( 142)									int _hx_tmp7;
HXDLIN( 142)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)										_hx_tmp7 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            									}
            									else {
HXLINE( 142)										_hx_tmp7 = blended2;
            									}
HXDLIN( 142)									::iterMagic::Iimg_obj::set(this26->image,location2,_hx_tmp7);
            								}
            							}
            							else {
HXLINE( 142)								::Dynamic this37 = this26->image;
HXDLIN( 142)								int index2;
HXDLIN( 142)								if (this26->useVirtualPos) {
HXLINE( 142)									index2 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - this26->virtualY) * ( (Float)(this26->width) )) + x2) - this26->virtualX));
            								}
            								else {
HXLINE( 142)									index2 = ::Std_obj::_hx_int(( (Float)(((y2 * this26->width) + x2)) ));
            								}
HXDLIN( 142)								int _hx_tmp8;
HXDLIN( 142)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)									_hx_tmp8 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            								}
            								else {
HXLINE( 142)									_hx_tmp8 = c2;
            								}
HXDLIN( 142)								::iterMagic::Iimg_obj::set(this37,index2,_hx_tmp8);
            							}
            						}
            					}
            				}
            			}
HXDLIN( 142)			{
HXLINE( 142)				 ::pi_xy::ImageStruct this38 = this1;
HXDLIN( 142)				{
HXLINE( 142)					int r_x3 = ::Std_obj::_hx_int((dx - ((Float)6.)));
HXDLIN( 142)					int r_y3 = ::Std_obj::_hx_int((dy - ((Float)6.)));
HXDLIN( 142)					int r_w3 = 12;
HXDLIN( 142)					int r_h3 = 12;
HXDLIN( 142)					int xmax3 = ((r_x3 + r_w3) + 1);
HXDLIN( 142)					int ymax3 = ((r_y3 + r_h3) + 1);
HXDLIN( 142)					int ii_min6 = r_x3;
HXDLIN( 142)					int ii_max6 = xmax3;
HXDLIN( 142)					int xRange__start3 = ii_min6;
HXDLIN( 142)					int xRange__max3 = ii_max6;
HXDLIN( 142)					int ii_min7 = r_y3;
HXDLIN( 142)					int ii_max7 = ymax3;
HXDLIN( 142)					int yRange__start3 = ii_min7;
HXDLIN( 142)					int yRange__max3 = ii_max7;
HXDLIN( 142)					int range_x3 = xRange__start3;
HXDLIN( 142)					int range_y3 = (yRange__start3 - 1);
HXDLIN( 142)					int range_xReset3 = range_x3;
HXDLIN( 142)					int range_yReset3 = range_y3;
HXDLIN( 142)					int range_xMax3 = (xRange__max3 - 2);
HXDLIN( 142)					int range_yMax3 = (yRange__max3 - 2);
HXDLIN( 142)					int _this_min3 = 0;
HXDLIN( 142)					int _this_max3 = ::Std_obj::_hx_int(( (Float)(((xRange__max3 - xRange__start3) * (yRange__max3 - yRange__start3))) ));
HXDLIN( 142)					while((_this_min3 < _this_max3)){
HXLINE( 142)						_this_min3 = (_this_min3 + 1);
HXDLIN( 142)						int i6 = (_this_min3 - 1);
HXDLIN( 142)						if ((range_y3 > range_yMax3)) {
HXLINE( 142)							range_y3 = range_yReset3;
HXDLIN( 142)							range_x3 = (range_x3 + 1);
            						}
HXDLIN( 142)						range_y3 = (range_y3 + 1);
HXDLIN( 142)						int i7 = i6;
HXDLIN( 142)						{
HXLINE( 142)							int x3 = range_x3;
HXDLIN( 142)							int y3 = range_y3;
HXDLIN( 142)							int c3 = -1048336;
HXDLIN( 142)							bool _hx_tmp9;
HXDLIN( 142)							if ((((c3 >> 24) & 255) < 254)) {
HXLINE( 142)								_hx_tmp9 = this38->transparent;
            							}
            							else {
HXLINE( 142)								_hx_tmp9 = false;
            							}
HXDLIN( 142)							if (_hx_tmp9) {
HXLINE( 142)								int location3;
HXDLIN( 142)								if (this38->useVirtualPos) {
HXLINE( 142)									location3 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - this38->virtualY) * ( (Float)(this38->width) )) + x3) - this38->virtualX));
            								}
            								else {
HXLINE( 142)									location3 = ::Std_obj::_hx_int(( (Float)(((y3 * this38->width) + x3)) ));
            								}
HXDLIN( 142)								int this39 = ::iterMagic::Iimg_obj::get(this38->image,location3);
HXDLIN( 142)								int this40;
HXDLIN( 142)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)									this40 = ((((((this39 >> 24) & 255) << 24) | ((this39 & 255) << 16)) | (((this39 >> 8) & 255) << 8)) | ((this39 >> 16) & 255));
            								}
            								else {
HXLINE( 142)									this40 = this39;
            								}
HXDLIN( 142)								Float a13;
HXDLIN( 142)								int this41 = ((this40 >> 24) & 255);
HXDLIN( 142)								if ((this41 == 0)) {
HXLINE( 142)									a13 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									a13 = (( (Float)(this41) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float r13;
HXDLIN( 142)								int this42 = ((this40 >> 16) & 255);
HXDLIN( 142)								if ((this42 == 0)) {
HXLINE( 142)									r13 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									r13 = (( (Float)(this42) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float g13;
HXDLIN( 142)								int this43 = ((this40 >> 8) & 255);
HXDLIN( 142)								if ((this43 == 0)) {
HXLINE( 142)									g13 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									g13 = (( (Float)(this43) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float b13;
HXDLIN( 142)								int this44 = (this40 & 255);
HXDLIN( 142)								if ((this44 == 0)) {
HXLINE( 142)									b13 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									b13 = (( (Float)(this44) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float a23;
HXDLIN( 142)								int this45 = ((-1048336 >> 24) & 255);
HXDLIN( 142)								if ((this45 == 0)) {
HXLINE( 142)									a23 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									a23 = (( (Float)(this45) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float r23;
HXDLIN( 142)								int this46 = ((-1048336 >> 16) & 255);
HXDLIN( 142)								if ((this46 == 0)) {
HXLINE( 142)									r23 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									r23 = (( (Float)(this46) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float g23;
HXDLIN( 142)								int this47 = ((-1048336 >> 8) & 255);
HXDLIN( 142)								if ((this47 == 0)) {
HXLINE( 142)									g23 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									g23 = (( (Float)(this47) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float b23;
HXDLIN( 142)								int this48 = (-1048336 & 255);
HXDLIN( 142)								if ((this48 == 0)) {
HXLINE( 142)									b23 = ((Float)0.);
            								}
            								else {
HXLINE( 142)									b23 = (( (Float)(this48) ) / ( (Float)(255) ));
            								}
HXDLIN( 142)								Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN( 142)								int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 142)								int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 142)								int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a33) + (b23 * a23))));
HXDLIN( 142)								int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 142)								int blended3 = ((((a7 << 24) | (r5 << 16)) | (g5 << 8)) | b5);
HXDLIN( 142)								{
HXLINE( 142)									int _hx_tmp10;
HXDLIN( 142)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)										_hx_tmp10 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            									}
            									else {
HXLINE( 142)										_hx_tmp10 = blended3;
            									}
HXDLIN( 142)									::iterMagic::Iimg_obj::set(this38->image,location3,_hx_tmp10);
            								}
            							}
            							else {
HXLINE( 142)								::Dynamic this49 = this38->image;
HXDLIN( 142)								int index3;
HXDLIN( 142)								if (this38->useVirtualPos) {
HXLINE( 142)									index3 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - this38->virtualY) * ( (Float)(this38->width) )) + x3) - this38->virtualX));
            								}
            								else {
HXLINE( 142)									index3 = ::Std_obj::_hx_int(( (Float)(((y3 * this38->width) + x3)) ));
            								}
HXDLIN( 142)								int _hx_tmp11;
HXDLIN( 142)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)									_hx_tmp11 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            								}
            								else {
HXLINE( 142)									_hx_tmp11 = c3;
            								}
HXDLIN( 142)								::iterMagic::Iimg_obj::set(this49,index3,_hx_tmp11);
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 142)		{
HXLINE( 142)			bool hasUndo = true;
HXDLIN( 142)			int aA = ((color >> 24) & 255);
HXDLIN( 142)			int rA = ((color >> 16) & 255);
HXDLIN( 142)			int gA = ((color >> 8) & 255);
HXDLIN( 142)			int bA = (color & 255);
HXDLIN( 142)			Float bcx = (bx - dx);
HXDLIN( 142)			Float bcy = (by - dy);
HXDLIN( 142)			Float acx = (ax - dx);
HXDLIN( 142)			Float acy = (ay - dy);
HXDLIN( 142)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 142)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 142)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 142)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 142)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 142)			if ((ax > bx)) {
HXLINE( 142)				if ((ax > dx)) {
HXLINE( 142)					int min;
HXDLIN( 142)					if ((bx > dx)) {
HXLINE( 142)						min = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 142)						min = ::Math_obj::floor(bx);
            					}
HXDLIN( 142)					int ii_min8 = min;
HXDLIN( 142)					int ii_max8 = ::Math_obj::ceil(ax);
HXDLIN( 142)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXLINE( 142)					int ii_min9 = ::Math_obj::floor(bx);
HXDLIN( 142)					int ii_max9 = ::Math_obj::ceil(dx);
HXDLIN( 142)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXLINE( 142)				if ((bx > dx)) {
HXLINE( 142)					int min1;
HXDLIN( 142)					if ((ax > dx)) {
HXLINE( 142)						min1 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 142)						min1 = ::Math_obj::ceil(ax);
            					}
HXDLIN( 142)					int ii_min10 = min1;
HXDLIN( 142)					int ii_max10 = ::Math_obj::ceil(bx);
HXDLIN( 142)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXLINE( 142)					int ii_min11 = ::Math_obj::floor(ax);
HXDLIN( 142)					int ii_max11 = ::Math_obj::ceil(dx);
HXDLIN( 142)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN( 142)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 142)			if ((ay > by)) {
HXLINE( 142)				if ((ay > dy)) {
HXLINE( 142)					int min2;
HXDLIN( 142)					if ((by > dy)) {
HXLINE( 142)						min2 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 142)						min2 = ::Math_obj::floor(by);
            					}
HXDLIN( 142)					int ii_min12 = min2;
HXDLIN( 142)					int ii_max12 = ::Math_obj::ceil(ay);
HXDLIN( 142)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXLINE( 142)					int ii_min13 = ::Math_obj::floor(by);
HXDLIN( 142)					int ii_max13 = ::Math_obj::ceil(dy);
HXDLIN( 142)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXLINE( 142)				if ((by > dy)) {
HXLINE( 142)					int min3;
HXDLIN( 142)					if ((ay > dy)) {
HXLINE( 142)						min3 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 142)						min3 = ::Math_obj::ceil(ay);
            					}
HXDLIN( 142)					int ii_min14 = min3;
HXDLIN( 142)					int ii_max14 = ::Math_obj::ceil(by);
HXDLIN( 142)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXLINE( 142)					int ii_min15 = ::Math_obj::floor(ay);
HXDLIN( 142)					int ii_max15 = ::Math_obj::ceil(dy);
HXDLIN( 142)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN( 142)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 142)			if (hasUndo) {
HXLINE( 142)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 142)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 142)				 ::Dynamic imageType = null();
HXDLIN( 142)				 ::pi_xy::ImageStruct this50 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 142)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 142)				::Dynamic undoImage1;
HXDLIN( 142)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXLINE( 142)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 142)						 ::iterMagic::BytesImg b6 = byt;
HXDLIN( 142)						{
HXLINE( 142)							b6->width = width;
HXDLIN( 142)							b6->height = height;
HXDLIN( 142)							b6->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 142)							b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 142)							{
HXLINE( 142)								int len = b6->length;
HXDLIN( 142)								int w = 0;
HXDLIN( 142)								{
HXLINE( 142)									int _g = 0;
HXDLIN( 142)									int _g1 = b6->height;
HXDLIN( 142)									while((_g < _g1)){
HXLINE( 142)										_g = (_g + 1);
HXDLIN( 142)										int y4 = (_g - 1);
HXDLIN( 142)										{
HXLINE( 142)											int _g2 = 0;
HXDLIN( 142)											int _g3 = b6->width;
HXDLIN( 142)											while((_g2 < _g3)){
HXLINE( 142)												_g2 = (_g2 + 1);
HXDLIN( 142)												int x4 = (_g2 - 1);
HXDLIN( 142)												{
HXLINE( 142)													w = (w + 1);
HXDLIN( 142)													b6->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 142)												{
HXLINE( 142)													w = (w + 1);
HXDLIN( 142)													b6->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 142)												{
HXLINE( 142)													w = (w + 1);
HXDLIN( 142)													b6->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 142)												{
HXLINE( 142)													w = (w + 1);
HXDLIN( 142)													b6->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 142)						undoImage1 = b6;
            					}
            					break;
            					case (int)1: {
HXLINE( 142)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 142)						 ::iterMagic::ArrIntImg a8 = arrI;
HXDLIN( 142)						{
HXLINE( 142)							a8->width = width;
HXDLIN( 142)							a8->height = height;
HXDLIN( 142)							a8->data = ::Array_obj< int >::__new(0);
HXDLIN( 142)							a8->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 142)							{
HXLINE( 142)								int _g4 = 0;
HXDLIN( 142)								int _g5 = a8->length;
HXDLIN( 142)								while((_g4 < _g5)){
HXLINE( 142)									_g4 = (_g4 + 1);
HXDLIN( 142)									int i8 = (_g4 - 1);
HXDLIN( 142)									a8->data[i8] = 0;
            								}
            							}
            						}
HXDLIN( 142)						undoImage1 = a8;
            					}
            					break;
            					case (int)2: {
HXLINE( 142)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 142)						 ::iterMagic::U32ArrImg b7 = u32a;
HXDLIN( 142)						{
HXLINE( 142)							b7->width = width;
HXDLIN( 142)							b7->height = height;
HXDLIN( 142)							b7->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 142)							int size = (b7->length * 4);
HXDLIN( 142)							b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 142)							{
HXLINE( 142)								int _g6 = 0;
HXDLIN( 142)								int _g7 = b7->length;
HXDLIN( 142)								while((_g6 < _g7)){
HXLINE( 142)									_g6 = (_g6 + 1);
HXDLIN( 142)									int i9 = (_g6 - 1);
HXDLIN( 142)									{
HXLINE( 142)										 ::haxe::io::ArrayBufferViewImpl this51 = b7->data;
HXDLIN( 142)										bool undoImage2;
HXDLIN( 142)										if ((i9 >= 0)) {
HXLINE( 142)											undoImage2 = (i9 < (this51->byteLength >> 2));
            										}
            										else {
HXLINE( 142)											undoImage2 = false;
            										}
HXDLIN( 142)										if (undoImage2) {
HXLINE( 142)											 ::haxe::io::Bytes _this = this51->bytes;
HXDLIN( 142)											int pos = ((i9 << 2) + this51->byteOffset);
HXDLIN( 142)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 142)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 142)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 142)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 142)						undoImage1 = b7;
            					}
            					break;
            					case (int)3: {
HXLINE( 142)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 142)						 ::iterMagic::VecIntImg v = vec;
HXDLIN( 142)						{
HXLINE( 142)							v->width = width;
HXDLIN( 142)							v->height = height;
HXDLIN( 142)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 142)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 142)							{
HXLINE( 142)								int _g8 = 0;
HXDLIN( 142)								int _g9 = v->length;
HXDLIN( 142)								while((_g8 < _g9)){
HXLINE( 142)									_g8 = (_g8 + 1);
HXDLIN( 142)									int i10 = (_g8 - 1);
HXDLIN( 142)									v->data->__unsafe_set(i10,0);
            								}
            							}
            						}
HXDLIN( 142)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXLINE( 142)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 142)						 ::iterMagic::StackIntImg b8 = sInt;
HXDLIN( 142)						{
HXLINE( 142)							b8->width = width;
HXDLIN( 142)							b8->height = height;
HXDLIN( 142)							b8->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 142)							b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 142)							{
HXLINE( 142)								int len1 = b8->length;
HXDLIN( 142)								 ::haxe::ds::GenericStack_Int d = b8->data;
HXDLIN( 142)								if (::hx::IsNull( d->head )) {
HXLINE( 142)									int _g10 = 0;
HXDLIN( 142)									int _g11 = len1;
HXDLIN( 142)									while((_g10 < _g11)){
HXLINE( 142)										_g10 = (_g10 + 1);
HXDLIN( 142)										int i11 = (_g10 - 1);
HXDLIN( 142)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXLINE( 142)									int _g12 = 0;
HXDLIN( 142)									int _g13 = len1;
HXDLIN( 142)									while((_g12 < _g13)){
HXLINE( 142)										_g12 = (_g12 + 1);
HXDLIN( 142)										int i12 = (_g12 - 1);
HXDLIN( 142)										{
HXLINE( 142)											 ::haxe::ds::GenericCell_Int l = b8->data->head;
HXDLIN( 142)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 142)											{
HXLINE( 142)												int _g14 = 0;
HXDLIN( 142)												int _g15 = i12;
HXDLIN( 142)												while((_g14 < _g15)){
HXLINE( 142)													_g14 = (_g14 + 1);
HXDLIN( 142)													int i13 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE( 142)											if (::hx::IsNull( prev )) {
HXLINE( 142)												b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 142)												l = null();
            											}
            											else {
HXLINE( 142)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 142)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 142)						undoImage1 = b8;
            					}
            					break;
            				}
HXDLIN( 142)				this50->image = undoImage1;
HXDLIN( 142)				this50->width = width;
HXDLIN( 142)				this50->height = height;
HXDLIN( 142)				this50->imageType = ( (int)(imageType) );
HXDLIN( 142)				undoImage = this50;
HXDLIN( 142)				{
HXLINE( 142)					int rectLeft = xIter3->start;
HXDLIN( 142)					int rectTop = yIter3->start;
HXDLIN( 142)					int rectRight = xIter3->max;
HXDLIN( 142)					bool forceClear = false;
HXDLIN( 142)					{
HXLINE( 142)						int _g16 = rectTop;
HXDLIN( 142)						int _g17 = yIter3->max;
HXDLIN( 142)						while((_g16 < _g17)){
HXLINE( 142)							_g16 = (_g16 + 1);
HXDLIN( 142)							int dy1 = (_g16 - 1);
HXDLIN( 142)							{
HXLINE( 142)								int _g18 = rectLeft;
HXDLIN( 142)								int _g19 = rectRight;
HXDLIN( 142)								while((_g18 < _g19)){
HXLINE( 142)									_g18 = (_g18 + 1);
HXDLIN( 142)									int dx1 = (_g18 - 1);
HXDLIN( 142)									::Dynamic this52 = this1->image;
HXDLIN( 142)									int index4;
HXDLIN( 142)									if (this1->useVirtualPos) {
HXLINE( 142)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx1) - this1->virtualX));
            									}
            									else {
HXLINE( 142)										index4 = ::Std_obj::_hx_int(( (Float)(((dy1 * this1->width) + dx1)) ));
            									}
HXDLIN( 142)									int c4 = ::iterMagic::Iimg_obj::get(this52,index4);
HXDLIN( 142)									int col;
HXDLIN( 142)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)										col = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            									}
            									else {
HXLINE( 142)										col = c4;
            									}
HXDLIN( 142)									bool _hx_tmp12;
HXDLIN( 142)									if (this1->useMask) {
HXLINE( 142)										_hx_tmp12 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXLINE( 142)										_hx_tmp12 = false;
            									}
HXDLIN( 142)									if (_hx_tmp12) {
HXLINE( 142)										 ::pi_xy::ImageStruct this53 = this1->mask;
HXDLIN( 142)										::Dynamic this54 = this53->image;
HXDLIN( 142)										int index5;
HXDLIN( 142)										if (this53->useVirtualPos) {
HXLINE( 142)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this53->virtualY) * ( (Float)(this53->width) )) + dx1) - this53->virtualX));
            										}
            										else {
HXLINE( 142)											index5 = ::Std_obj::_hx_int(( (Float)(((dy1 * this53->width) + dx1)) ));
            										}
HXDLIN( 142)										int c5 = ::iterMagic::Iimg_obj::get(this54,index5);
HXDLIN( 142)										int v1;
HXDLIN( 142)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)											v1 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            										}
            										else {
HXLINE( 142)											v1 = c5;
            										}
HXDLIN( 142)										int maskPixel = v1;
HXDLIN( 142)										int this55 = col;
HXDLIN( 142)										if ((maskPixel == 0)) {
HXLINE( 142)											col = this55;
            										}
            										else {
HXLINE( 142)											Float m0;
HXDLIN( 142)											int this56 = ((maskPixel >> 24) & 255);
HXDLIN( 142)											if ((this56 == 0)) {
HXLINE( 142)												m0 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												m0 = (( (Float)(this56) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float m1;
HXDLIN( 142)											int this57 = ((maskPixel >> 16) & 255);
HXDLIN( 142)											if ((this57 == 0)) {
HXLINE( 142)												m1 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												m1 = (( (Float)(this57) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float m2;
HXDLIN( 142)											int this58 = ((maskPixel >> 8) & 255);
HXDLIN( 142)											if ((this58 == 0)) {
HXLINE( 142)												m2 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												m2 = (( (Float)(this58) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float m3;
HXDLIN( 142)											int this59 = (maskPixel & 255);
HXDLIN( 142)											if ((this59 == 0)) {
HXLINE( 142)												m3 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												m3 = (( (Float)(this59) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this55 >> 24) & 255)) )));
HXDLIN( 142)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this55 >> 16) & 255)) )));
HXDLIN( 142)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this55 >> 8) & 255)) )));
HXDLIN( 142)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this55 & 255)) )));
HXDLIN( 142)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 142)									if ((col != 0)) {
HXLINE( 142)										int x5 = (dx1 - rectLeft);
HXDLIN( 142)										int y5 = (dy1 - rectTop);
HXDLIN( 142)										int c6 = col;
HXDLIN( 142)										bool _hx_tmp13;
HXDLIN( 142)										if ((((c6 >> 24) & 255) < 254)) {
HXLINE( 142)											_hx_tmp13 = undoImage->transparent;
            										}
            										else {
HXLINE( 142)											_hx_tmp13 = false;
            										}
HXDLIN( 142)										if (_hx_tmp13) {
HXLINE( 142)											int location4;
HXDLIN( 142)											if (undoImage->useVirtualPos) {
HXLINE( 142)												location4 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x5) - undoImage->virtualX));
            											}
            											else {
HXLINE( 142)												location4 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage->width) + x5)) ));
            											}
HXDLIN( 142)											int this60 = ::iterMagic::Iimg_obj::get(undoImage->image,location4);
HXDLIN( 142)											int this61;
HXDLIN( 142)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)												this61 = ((((((this60 >> 24) & 255) << 24) | ((this60 & 255) << 16)) | (((this60 >> 8) & 255) << 8)) | ((this60 >> 16) & 255));
            											}
            											else {
HXLINE( 142)												this61 = this60;
            											}
HXDLIN( 142)											Float a14;
HXDLIN( 142)											int this62 = ((this61 >> 24) & 255);
HXDLIN( 142)											if ((this62 == 0)) {
HXLINE( 142)												a14 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												a14 = (( (Float)(this62) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float r14;
HXDLIN( 142)											int this63 = ((this61 >> 16) & 255);
HXDLIN( 142)											if ((this63 == 0)) {
HXLINE( 142)												r14 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												r14 = (( (Float)(this63) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float g14;
HXDLIN( 142)											int this64 = ((this61 >> 8) & 255);
HXDLIN( 142)											if ((this64 == 0)) {
HXLINE( 142)												g14 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												g14 = (( (Float)(this64) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float b14;
HXDLIN( 142)											int this65 = (this61 & 255);
HXDLIN( 142)											if ((this65 == 0)) {
HXLINE( 142)												b14 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												b14 = (( (Float)(this65) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float a24;
HXDLIN( 142)											int this66 = ((col >> 24) & 255);
HXDLIN( 142)											if ((this66 == 0)) {
HXLINE( 142)												a24 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												a24 = (( (Float)(this66) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float r24;
HXDLIN( 142)											int this67 = ((col >> 16) & 255);
HXDLIN( 142)											if ((this67 == 0)) {
HXLINE( 142)												r24 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												r24 = (( (Float)(this67) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float g24;
HXDLIN( 142)											int this68 = ((col >> 8) & 255);
HXDLIN( 142)											if ((this68 == 0)) {
HXLINE( 142)												g24 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												g24 = (( (Float)(this68) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float b24;
HXDLIN( 142)											int this69 = (col & 255);
HXDLIN( 142)											if ((this69 == 0)) {
HXLINE( 142)												b24 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												b24 = (( (Float)(this69) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float a34 = (a14 * (( (Float)(1) ) - a24));
HXDLIN( 142)											int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 142)											int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 142)											int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a34) + (b24 * a24))));
HXDLIN( 142)											int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 142)											int blended4 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b9);
HXDLIN( 142)											{
HXLINE( 142)												int _hx_tmp14;
HXDLIN( 142)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)													_hx_tmp14 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            												}
            												else {
HXLINE( 142)													_hx_tmp14 = blended4;
            												}
HXDLIN( 142)												::iterMagic::Iimg_obj::set(undoImage->image,location4,_hx_tmp14);
            											}
            										}
            										else {
HXLINE( 142)											::Dynamic this70 = undoImage->image;
HXDLIN( 142)											int index6;
HXDLIN( 142)											if (undoImage->useVirtualPos) {
HXLINE( 142)												index6 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x5) - undoImage->virtualX));
            											}
            											else {
HXLINE( 142)												index6 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage->width) + x5)) ));
            											}
HXDLIN( 142)											int _hx_tmp15;
HXDLIN( 142)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)												_hx_tmp15 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            											}
            											else {
HXLINE( 142)												_hx_tmp15 = c6;
            											}
HXDLIN( 142)											::iterMagic::Iimg_obj::set(this70,index6,_hx_tmp15);
            										}
            									}
            									else {
HXLINE( 142)										if (forceClear) {
HXLINE( 142)											::Dynamic this71 = undoImage->image;
HXDLIN( 142)											int x6 = (dx1 - rectLeft);
HXDLIN( 142)											int y6 = (dy1 - rectTop);
HXDLIN( 142)											int index7;
HXDLIN( 142)											if (undoImage->useVirtualPos) {
HXLINE( 142)												index7 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x6) - undoImage->virtualX));
            											}
            											else {
HXLINE( 142)												index7 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage->width) + x6)) ));
            											}
HXDLIN( 142)											::iterMagic::Iimg_obj::set(this71,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 142)			bool found = false;
HXDLIN( 142)			Float min4 = ( (Float)(0) );
HXDLIN( 142)			Float max = ( (Float)(0) );
HXDLIN( 142)			int a10 = 0;
HXDLIN( 142)			int r7 = 0;
HXDLIN( 142)			int g7 = 0;
HXDLIN( 142)			int b10 = 0;
HXDLIN( 142)			{
HXLINE( 142)				int _g_min = xIter3->start;
HXDLIN( 142)				int _g_max = xIter3->max;
HXDLIN( 142)				while((_g_min < _g_max)){
HXLINE( 142)					_g_min = (_g_min + 1);
HXDLIN( 142)					int px1 = (_g_min - 1);
HXDLIN( 142)					Float pcx = (( (Float)(px1) ) - dx);
HXLINE( 695)					found = false;
HXLINE( 142)					{
HXLINE( 142)						int _g_min1 = yIter3->start;
HXDLIN( 142)						int _g_max1 = yIter3->max;
HXDLIN( 142)						while((_g_min1 < _g_max1)){
HXLINE( 142)							_g_min1 = (_g_min1 + 1);
HXDLIN( 142)							int py1 = (_g_min1 - 1);
HXDLIN( 142)							Float pcy = (( (Float)(py1) ) - dy);
HXDLIN( 142)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 142)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 142)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 142)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 142)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 142)							bool _hx_tmp16;
HXDLIN( 142)							bool _hx_tmp17;
HXDLIN( 142)							if ((ratioA >= 0)) {
HXLINE( 142)								_hx_tmp17 = (ratioB >= 0);
            							}
            							else {
HXLINE( 142)								_hx_tmp17 = false;
            							}
HXDLIN( 142)							if (_hx_tmp17) {
HXLINE( 142)								_hx_tmp16 = (ratioC >= 0);
            							}
            							else {
HXLINE( 142)								_hx_tmp16 = false;
            							}
HXDLIN( 142)							if (_hx_tmp16) {
HXLINE( 142)								if (softAB) {
HXLINE( 142)									if (softDA) {
HXLINE( 142)										if ((ratioA < ratioC)) {
HXLINE( 142)											min4 = ratioA;
            										}
            										else {
HXLINE( 142)											min4 = ratioC;
            										}
HXDLIN( 142)										if ((ratioA > ratioB)) {
HXLINE( 142)											max = ratioA;
            										}
            										else {
HXLINE( 142)											max = ratioB;
            										}
HXDLIN( 142)										if (!((max > ratioC))) {
HXLINE( 142)											max = ratioC;
            										}
HXLINE( 728)										max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE( 142)										if (!((min4 < max))) {
HXLINE( 142)											min4 = ((max + min4) / ( (Float)(2) ));
            										}
HXDLIN( 142)										int i14 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN( 142)										if ((i14 > 255)) {
HXLINE(  24)											i14 = 255;
            										}
HXLINE( 142)										if ((i14 < 0)) {
HXLINE(  25)											i14 = 0;
            										}
HXLINE( 142)										a10 = i14;
            									}
            									else {
HXLINE( 722)										min4 = ratioC;
HXLINE( 142)										int i15 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN( 142)										if ((i15 > 255)) {
HXLINE(  24)											i15 = 255;
            										}
HXLINE( 142)										if ((i15 < 0)) {
HXLINE(  25)											i15 = 0;
            										}
HXLINE( 142)										a10 = i15;
            									}
            								}
            								else {
HXLINE( 142)									if (softDA) {
HXLINE( 709)										min4 = ratioA;
HXLINE( 142)										int i16 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN( 142)										if ((i16 > 255)) {
HXLINE(  24)											i16 = 255;
            										}
HXLINE( 142)										if ((i16 < 0)) {
HXLINE(  25)											i16 = 0;
            										}
HXLINE( 142)										a10 = i16;
            									}
            									else {
HXLINE( 142)										int i17 = ::Std_obj::_hx_int(( (Float)(aA) ));
HXDLIN( 142)										if ((i17 > 255)) {
HXLINE(  24)											i17 = 255;
            										}
HXLINE( 142)										if ((i17 < 0)) {
HXLINE(  25)											i17 = 0;
            										}
HXLINE( 142)										a10 = i17;
            									}
            								}
HXDLIN( 142)								int i18 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 142)								if ((i18 > 255)) {
HXLINE(  24)									i18 = 255;
            								}
HXLINE( 142)								if ((i18 < 0)) {
HXLINE(  25)									i18 = 0;
            								}
HXLINE( 747)								r7 = i18;
HXLINE( 142)								int i19 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 142)								if ((i19 > 255)) {
HXLINE(  24)									i19 = 255;
            								}
HXLINE( 142)								if ((i19 < 0)) {
HXLINE(  25)									i19 = 0;
            								}
HXLINE( 748)								g7 = i19;
HXLINE( 142)								int i20 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 142)								if ((i20 > 255)) {
HXLINE(  24)									i20 = 255;
            								}
HXLINE( 142)								if ((i20 < 0)) {
HXLINE(  25)									i20 = 0;
            								}
HXLINE( 749)								b10 = i20;
HXLINE( 142)								{
HXLINE( 142)									int location5;
HXDLIN( 142)									if (this1->useVirtualPos) {
HXLINE( 142)										location5 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            									}
            									else {
HXLINE( 142)										location5 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            									}
HXDLIN( 142)									bool _hx_tmp18;
HXDLIN( 142)									if (this1->transparent) {
HXLINE( 142)										_hx_tmp18 = (a10 < 254);
            									}
            									else {
HXLINE( 142)										_hx_tmp18 = false;
            									}
HXDLIN( 142)									if (_hx_tmp18) {
HXLINE( 142)										int this72 = ::iterMagic::Iimg_obj::get(this1->image,location5);
HXDLIN( 142)										int old;
HXDLIN( 142)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)											old = ((((((this72 >> 24) & 255) << 24) | ((this72 & 255) << 16)) | (((this72 >> 8) & 255) << 8)) | ((this72 >> 16) & 255));
            										}
            										else {
HXLINE( 142)											old = this72;
            										}
HXDLIN( 142)										int rhs = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b10);
HXDLIN( 142)										Float a15;
HXDLIN( 142)										int this73 = ((old >> 24) & 255);
HXDLIN( 142)										if ((this73 == 0)) {
HXLINE( 142)											a15 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											a15 = (( (Float)(this73) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float r15;
HXDLIN( 142)										int this74 = ((old >> 16) & 255);
HXDLIN( 142)										if ((this74 == 0)) {
HXLINE( 142)											r15 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											r15 = (( (Float)(this74) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float g15;
HXDLIN( 142)										int this75 = ((old >> 8) & 255);
HXDLIN( 142)										if ((this75 == 0)) {
HXLINE( 142)											g15 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											g15 = (( (Float)(this75) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float b15;
HXDLIN( 142)										int this76 = (old & 255);
HXDLIN( 142)										if ((this76 == 0)) {
HXLINE( 142)											b15 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											b15 = (( (Float)(this76) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float a25;
HXDLIN( 142)										int this77 = ((rhs >> 24) & 255);
HXDLIN( 142)										if ((this77 == 0)) {
HXLINE( 142)											a25 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											a25 = (( (Float)(this77) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float r25;
HXDLIN( 142)										int this78 = ((rhs >> 16) & 255);
HXDLIN( 142)										if ((this78 == 0)) {
HXLINE( 142)											r25 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											r25 = (( (Float)(this78) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float g25;
HXDLIN( 142)										int this79 = ((rhs >> 8) & 255);
HXDLIN( 142)										if ((this79 == 0)) {
HXLINE( 142)											g25 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											g25 = (( (Float)(this79) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float b25;
HXDLIN( 142)										int this80 = (rhs & 255);
HXDLIN( 142)										if ((this80 == 0)) {
HXLINE( 142)											b25 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											b25 = (( (Float)(this80) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float a35 = (a15 * (( (Float)(1) ) - a25));
HXDLIN( 142)										int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 142)										int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 142)										int b16 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a35) + (b25 * a25))));
HXDLIN( 142)										int a16 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 142)										int blended5 = ((((a16 << 24) | (r8 << 16)) | (g8 << 8)) | b16);
HXDLIN( 142)										{
HXLINE( 142)											int _hx_tmp19;
HXDLIN( 142)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)												_hx_tmp19 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            											}
            											else {
HXLINE( 142)												_hx_tmp19 = blended5;
            											}
HXDLIN( 142)											::iterMagic::Iimg_obj::set(this1->image,location5,_hx_tmp19);
            										}
            									}
            									else {
HXLINE( 142)										int value;
HXDLIN( 142)										if (this1->isLittle) {
HXLINE( 142)											value = ((((a10 << 24) | (b10 << 16)) | (g7 << 8)) | r7);
            										}
            										else {
HXLINE( 142)											value = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b10);
            										}
HXDLIN( 142)										::iterMagic::Iimg_obj::set(this1->image,location5,value);
            									}
            								}
HXLINE( 751)								found = true;
            							}
            							else {
HXLINE( 142)								if (found) {
HXLINE( 142)									goto _hx_goto_172;
            								}
            							}
            						}
            						_hx_goto_172:;
            					}
            				}
            			}
HXDLIN( 142)			if ((hasHit == false)) {
HXLINE( 142)				 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,dx,dy,true);
HXDLIN( 142)				if (hasUndo) {
HXLINE( 142)					v2->undoImage = undoImage;
HXDLIN( 142)					v2->undoX = xIter3->start;
HXDLIN( 142)					v2->undoY = yIter3->start;
            				}
            			}
            		}
HXDLIN( 142)		{
HXLINE( 142)			bool hasUndo1 = true;
HXDLIN( 142)			int aA1 = ((color >> 24) & 255);
HXDLIN( 142)			int rA1 = ((color >> 16) & 255);
HXDLIN( 142)			int gA1 = ((color >> 8) & 255);
HXDLIN( 142)			int bA1 = (color & 255);
HXDLIN( 142)			Float bcx1 = (cx - dx);
HXDLIN( 142)			Float bcy1 = (cy - dy);
HXDLIN( 142)			Float acx1 = (bx - dx);
HXDLIN( 142)			Float acy1 = (by - dy);
HXDLIN( 142)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 142)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 142)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 142)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 142)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 142)			if ((bx > cx)) {
HXLINE( 142)				if ((bx > dx)) {
HXLINE( 142)					int min5;
HXDLIN( 142)					if ((cx > dx)) {
HXLINE( 142)						min5 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 142)						min5 = ::Math_obj::floor(cx);
            					}
HXDLIN( 142)					int ii_min16 = min5;
HXDLIN( 142)					int ii_max16 = ::Math_obj::ceil(bx);
HXDLIN( 142)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            				}
            				else {
HXLINE( 142)					int ii_min17 = ::Math_obj::floor(cx);
HXDLIN( 142)					int ii_max17 = ::Math_obj::ceil(dx);
HXDLIN( 142)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            				}
            			}
            			else {
HXLINE( 142)				if ((cx > dx)) {
HXLINE( 142)					int min6;
HXDLIN( 142)					if ((bx > dx)) {
HXLINE( 142)						min6 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 142)						min6 = ::Math_obj::ceil(bx);
            					}
HXDLIN( 142)					int ii_min18 = min6;
HXDLIN( 142)					int ii_max18 = ::Math_obj::ceil(cx);
HXDLIN( 142)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            				}
            				else {
HXLINE( 142)					int ii_min19 = ::Math_obj::floor(bx);
HXDLIN( 142)					int ii_max19 = ::Math_obj::ceil(dx);
HXDLIN( 142)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            				}
            			}
HXDLIN( 142)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 142)			if ((by > cy)) {
HXLINE( 142)				if ((by > dy)) {
HXLINE( 142)					int min7;
HXDLIN( 142)					if ((cy > dy)) {
HXLINE( 142)						min7 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 142)						min7 = ::Math_obj::floor(cy);
            					}
HXDLIN( 142)					int ii_min20 = min7;
HXDLIN( 142)					int ii_max20 = ::Math_obj::ceil(by);
HXDLIN( 142)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            				}
            				else {
HXLINE( 142)					int ii_min21 = ::Math_obj::floor(cy);
HXDLIN( 142)					int ii_max21 = ::Math_obj::ceil(dy);
HXDLIN( 142)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            				}
            			}
            			else {
HXLINE( 142)				if ((cy > dy)) {
HXLINE( 142)					int min8;
HXDLIN( 142)					if ((by > dy)) {
HXLINE( 142)						min8 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 142)						min8 = ::Math_obj::ceil(by);
            					}
HXDLIN( 142)					int ii_min22 = min8;
HXDLIN( 142)					int ii_max22 = ::Math_obj::ceil(cy);
HXDLIN( 142)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            				}
            				else {
HXLINE( 142)					int ii_min23 = ::Math_obj::floor(by);
HXDLIN( 142)					int ii_max23 = ::Math_obj::ceil(dy);
HXDLIN( 142)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            				}
            			}
HXDLIN( 142)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 142)			if (hasUndo1) {
HXLINE( 142)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 142)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 142)				 ::Dynamic imageType1 = null();
HXDLIN( 142)				 ::pi_xy::ImageStruct this81 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 142)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 142)				::Dynamic undoImage4;
HXDLIN( 142)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXLINE( 142)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 142)						 ::iterMagic::BytesImg b17 = byt1;
HXDLIN( 142)						{
HXLINE( 142)							b17->width = width1;
HXDLIN( 142)							b17->height = height1;
HXDLIN( 142)							b17->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 142)							b17->data = ::haxe::io::Bytes_obj::alloc((b17->length * 4));
HXDLIN( 142)							{
HXLINE( 142)								int len2 = b17->length;
HXDLIN( 142)								int w1 = 0;
HXDLIN( 142)								{
HXLINE( 142)									int _g20 = 0;
HXDLIN( 142)									int _g21 = b17->height;
HXDLIN( 142)									while((_g20 < _g21)){
HXLINE( 142)										_g20 = (_g20 + 1);
HXDLIN( 142)										int y7 = (_g20 - 1);
HXDLIN( 142)										{
HXLINE( 142)											int _g22 = 0;
HXDLIN( 142)											int _g23 = b17->width;
HXDLIN( 142)											while((_g22 < _g23)){
HXLINE( 142)												_g22 = (_g22 + 1);
HXDLIN( 142)												int x7 = (_g22 - 1);
HXDLIN( 142)												{
HXLINE( 142)													w1 = (w1 + 1);
HXDLIN( 142)													b17->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 142)												{
HXLINE( 142)													w1 = (w1 + 1);
HXDLIN( 142)													b17->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 142)												{
HXLINE( 142)													w1 = (w1 + 1);
HXDLIN( 142)													b17->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 142)												{
HXLINE( 142)													w1 = (w1 + 1);
HXDLIN( 142)													b17->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 142)						undoImage4 = b17;
            					}
            					break;
            					case (int)1: {
HXLINE( 142)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 142)						 ::iterMagic::ArrIntImg a17 = arrI1;
HXDLIN( 142)						{
HXLINE( 142)							a17->width = width1;
HXDLIN( 142)							a17->height = height1;
HXDLIN( 142)							a17->data = ::Array_obj< int >::__new(0);
HXDLIN( 142)							a17->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 142)							{
HXLINE( 142)								int _g24 = 0;
HXDLIN( 142)								int _g25 = a17->length;
HXDLIN( 142)								while((_g24 < _g25)){
HXLINE( 142)									_g24 = (_g24 + 1);
HXDLIN( 142)									int i21 = (_g24 - 1);
HXDLIN( 142)									a17->data[i21] = 0;
            								}
            							}
            						}
HXDLIN( 142)						undoImage4 = a17;
            					}
            					break;
            					case (int)2: {
HXLINE( 142)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 142)						 ::iterMagic::U32ArrImg b18 = u32a1;
HXDLIN( 142)						{
HXLINE( 142)							b18->width = width1;
HXDLIN( 142)							b18->height = height1;
HXDLIN( 142)							b18->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 142)							int size1 = (b18->length * 4);
HXDLIN( 142)							b18->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 142)							{
HXLINE( 142)								int _g26 = 0;
HXDLIN( 142)								int _g27 = b18->length;
HXDLIN( 142)								while((_g26 < _g27)){
HXLINE( 142)									_g26 = (_g26 + 1);
HXDLIN( 142)									int i22 = (_g26 - 1);
HXDLIN( 142)									{
HXLINE( 142)										 ::haxe::io::ArrayBufferViewImpl this82 = b18->data;
HXDLIN( 142)										bool undoImage5;
HXDLIN( 142)										if ((i22 >= 0)) {
HXLINE( 142)											undoImage5 = (i22 < (this82->byteLength >> 2));
            										}
            										else {
HXLINE( 142)											undoImage5 = false;
            										}
HXDLIN( 142)										if (undoImage5) {
HXLINE( 142)											 ::haxe::io::Bytes _this1 = this82->bytes;
HXDLIN( 142)											int pos1 = ((i22 << 2) + this82->byteOffset);
HXDLIN( 142)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 142)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 142)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 142)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 142)						undoImage4 = b18;
            					}
            					break;
            					case (int)3: {
HXLINE( 142)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 142)						 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN( 142)						{
HXLINE( 142)							v3->width = width1;
HXDLIN( 142)							v3->height = height1;
HXDLIN( 142)							v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 142)							v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN( 142)							{
HXLINE( 142)								int _g28 = 0;
HXDLIN( 142)								int _g29 = v3->length;
HXDLIN( 142)								while((_g28 < _g29)){
HXLINE( 142)									_g28 = (_g28 + 1);
HXDLIN( 142)									int i23 = (_g28 - 1);
HXDLIN( 142)									v3->data->__unsafe_set(i23,0);
            								}
            							}
            						}
HXDLIN( 142)						undoImage4 = v3;
            					}
            					break;
            					case (int)4: {
HXLINE( 142)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 142)						 ::iterMagic::StackIntImg b19 = sInt1;
HXDLIN( 142)						{
HXLINE( 142)							b19->width = width1;
HXDLIN( 142)							b19->height = height1;
HXDLIN( 142)							b19->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 142)							b19->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 142)							{
HXLINE( 142)								int len3 = b19->length;
HXDLIN( 142)								 ::haxe::ds::GenericStack_Int d1 = b19->data;
HXDLIN( 142)								if (::hx::IsNull( d1->head )) {
HXLINE( 142)									int _g30 = 0;
HXDLIN( 142)									int _g31 = len3;
HXDLIN( 142)									while((_g30 < _g31)){
HXLINE( 142)										_g30 = (_g30 + 1);
HXDLIN( 142)										int i24 = (_g30 - 1);
HXDLIN( 142)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXLINE( 142)									int _g32 = 0;
HXDLIN( 142)									int _g33 = len3;
HXDLIN( 142)									while((_g32 < _g33)){
HXLINE( 142)										_g32 = (_g32 + 1);
HXDLIN( 142)										int i25 = (_g32 - 1);
HXDLIN( 142)										{
HXLINE( 142)											 ::haxe::ds::GenericCell_Int l1 = b19->data->head;
HXDLIN( 142)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 142)											{
HXLINE( 142)												int _g34 = 0;
HXDLIN( 142)												int _g35 = i25;
HXDLIN( 142)												while((_g34 < _g35)){
HXLINE( 142)													_g34 = (_g34 + 1);
HXDLIN( 142)													int i26 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE( 142)											if (::hx::IsNull( prev1 )) {
HXLINE( 142)												b19->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 142)												l1 = null();
            											}
            											else {
HXLINE( 142)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 142)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 142)						undoImage4 = b19;
            					}
            					break;
            				}
HXDLIN( 142)				this81->image = undoImage4;
HXDLIN( 142)				this81->width = width1;
HXDLIN( 142)				this81->height = height1;
HXDLIN( 142)				this81->imageType = ( (int)(imageType1) );
HXDLIN( 142)				undoImage3 = this81;
HXDLIN( 142)				{
HXLINE( 142)					int rectLeft1 = xIter31->start;
HXDLIN( 142)					int rectTop1 = yIter31->start;
HXDLIN( 142)					int rectRight1 = xIter31->max;
HXDLIN( 142)					bool forceClear1 = false;
HXDLIN( 142)					{
HXLINE( 142)						int _g36 = rectTop1;
HXDLIN( 142)						int _g37 = yIter31->max;
HXDLIN( 142)						while((_g36 < _g37)){
HXLINE( 142)							_g36 = (_g36 + 1);
HXDLIN( 142)							int dy2 = (_g36 - 1);
HXDLIN( 142)							{
HXLINE( 142)								int _g38 = rectLeft1;
HXDLIN( 142)								int _g39 = rectRight1;
HXDLIN( 142)								while((_g38 < _g39)){
HXLINE( 142)									_g38 = (_g38 + 1);
HXDLIN( 142)									int dx2 = (_g38 - 1);
HXDLIN( 142)									::Dynamic this83 = this1->image;
HXDLIN( 142)									int index8;
HXDLIN( 142)									if (this1->useVirtualPos) {
HXLINE( 142)										index8 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx2) - this1->virtualX));
            									}
            									else {
HXLINE( 142)										index8 = ::Std_obj::_hx_int(( (Float)(((dy2 * this1->width) + dx2)) ));
            									}
HXDLIN( 142)									int c7 = ::iterMagic::Iimg_obj::get(this83,index8);
HXDLIN( 142)									int col1;
HXDLIN( 142)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)										col1 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            									}
            									else {
HXLINE( 142)										col1 = c7;
            									}
HXDLIN( 142)									bool _hx_tmp20;
HXDLIN( 142)									if (this1->useMask) {
HXLINE( 142)										_hx_tmp20 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXLINE( 142)										_hx_tmp20 = false;
            									}
HXDLIN( 142)									if (_hx_tmp20) {
HXLINE( 142)										 ::pi_xy::ImageStruct this84 = this1->mask;
HXDLIN( 142)										::Dynamic this85 = this84->image;
HXDLIN( 142)										int index9;
HXDLIN( 142)										if (this84->useVirtualPos) {
HXLINE( 142)											index9 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this84->virtualY) * ( (Float)(this84->width) )) + dx2) - this84->virtualX));
            										}
            										else {
HXLINE( 142)											index9 = ::Std_obj::_hx_int(( (Float)(((dy2 * this84->width) + dx2)) ));
            										}
HXDLIN( 142)										int c8 = ::iterMagic::Iimg_obj::get(this85,index9);
HXDLIN( 142)										int v4;
HXDLIN( 142)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)											v4 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            										}
            										else {
HXLINE( 142)											v4 = c8;
            										}
HXDLIN( 142)										int maskPixel1 = v4;
HXDLIN( 142)										int this86 = col1;
HXDLIN( 142)										if ((maskPixel1 == 0)) {
HXLINE( 142)											col1 = this86;
            										}
            										else {
HXLINE( 142)											Float m01;
HXDLIN( 142)											int this87 = ((maskPixel1 >> 24) & 255);
HXDLIN( 142)											if ((this87 == 0)) {
HXLINE( 142)												m01 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												m01 = (( (Float)(this87) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float m11;
HXDLIN( 142)											int this88 = ((maskPixel1 >> 16) & 255);
HXDLIN( 142)											if ((this88 == 0)) {
HXLINE( 142)												m11 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												m11 = (( (Float)(this88) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float m21;
HXDLIN( 142)											int this89 = ((maskPixel1 >> 8) & 255);
HXDLIN( 142)											if ((this89 == 0)) {
HXLINE( 142)												m21 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												m21 = (( (Float)(this89) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float m31;
HXDLIN( 142)											int this90 = (maskPixel1 & 255);
HXDLIN( 142)											if ((this90 == 0)) {
HXLINE( 142)												m31 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												m31 = (( (Float)(this90) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this86 >> 24) & 255)) )));
HXDLIN( 142)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this86 >> 16) & 255)) )));
HXDLIN( 142)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this86 >> 8) & 255)) )));
HXDLIN( 142)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this86 & 255)) )));
HXDLIN( 142)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 142)									if ((col1 != 0)) {
HXLINE( 142)										int x8 = (dx2 - rectLeft1);
HXDLIN( 142)										int y8 = (dy2 - rectTop1);
HXDLIN( 142)										int c9 = col1;
HXDLIN( 142)										bool _hx_tmp21;
HXDLIN( 142)										if ((((c9 >> 24) & 255) < 254)) {
HXLINE( 142)											_hx_tmp21 = undoImage3->transparent;
            										}
            										else {
HXLINE( 142)											_hx_tmp21 = false;
            										}
HXDLIN( 142)										if (_hx_tmp21) {
HXLINE( 142)											int location6;
HXDLIN( 142)											if (undoImage3->useVirtualPos) {
HXLINE( 142)												location6 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x8) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 142)												location6 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage3->width) + x8)) ));
            											}
HXDLIN( 142)											int this91 = ::iterMagic::Iimg_obj::get(undoImage3->image,location6);
HXDLIN( 142)											int this92;
HXDLIN( 142)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)												this92 = ((((((this91 >> 24) & 255) << 24) | ((this91 & 255) << 16)) | (((this91 >> 8) & 255) << 8)) | ((this91 >> 16) & 255));
            											}
            											else {
HXLINE( 142)												this92 = this91;
            											}
HXDLIN( 142)											Float a18;
HXDLIN( 142)											int this93 = ((this92 >> 24) & 255);
HXDLIN( 142)											if ((this93 == 0)) {
HXLINE( 142)												a18 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												a18 = (( (Float)(this93) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float r16;
HXDLIN( 142)											int this94 = ((this92 >> 16) & 255);
HXDLIN( 142)											if ((this94 == 0)) {
HXLINE( 142)												r16 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												r16 = (( (Float)(this94) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float g16;
HXDLIN( 142)											int this95 = ((this92 >> 8) & 255);
HXDLIN( 142)											if ((this95 == 0)) {
HXLINE( 142)												g16 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												g16 = (( (Float)(this95) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float b110;
HXDLIN( 142)											int this96 = (this92 & 255);
HXDLIN( 142)											if ((this96 == 0)) {
HXLINE( 142)												b110 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												b110 = (( (Float)(this96) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float a26;
HXDLIN( 142)											int this97 = ((col1 >> 24) & 255);
HXDLIN( 142)											if ((this97 == 0)) {
HXLINE( 142)												a26 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												a26 = (( (Float)(this97) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float r26;
HXDLIN( 142)											int this98 = ((col1 >> 16) & 255);
HXDLIN( 142)											if ((this98 == 0)) {
HXLINE( 142)												r26 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												r26 = (( (Float)(this98) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float g26;
HXDLIN( 142)											int this99 = ((col1 >> 8) & 255);
HXDLIN( 142)											if ((this99 == 0)) {
HXLINE( 142)												g26 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												g26 = (( (Float)(this99) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float b26;
HXDLIN( 142)											int this100 = (col1 & 255);
HXDLIN( 142)											if ((this100 == 0)) {
HXLINE( 142)												b26 = ((Float)0.);
            											}
            											else {
HXLINE( 142)												b26 = (( (Float)(this100) ) / ( (Float)(255) ));
            											}
HXDLIN( 142)											Float a36 = (a18 * (( (Float)(1) ) - a26));
HXDLIN( 142)											int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN( 142)											int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN( 142)											int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a36) + (b26 * a26))));
HXDLIN( 142)											int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN( 142)											int blended6 = ((((a19 << 24) | (r9 << 16)) | (g9 << 8)) | b20);
HXDLIN( 142)											{
HXLINE( 142)												int _hx_tmp22;
HXDLIN( 142)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)													_hx_tmp22 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            												}
            												else {
HXLINE( 142)													_hx_tmp22 = blended6;
            												}
HXDLIN( 142)												::iterMagic::Iimg_obj::set(undoImage3->image,location6,_hx_tmp22);
            											}
            										}
            										else {
HXLINE( 142)											::Dynamic this101 = undoImage3->image;
HXDLIN( 142)											int index10;
HXDLIN( 142)											if (undoImage3->useVirtualPos) {
HXLINE( 142)												index10 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x8) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 142)												index10 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage3->width) + x8)) ));
            											}
HXDLIN( 142)											int _hx_tmp23;
HXDLIN( 142)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)												_hx_tmp23 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            											}
            											else {
HXLINE( 142)												_hx_tmp23 = c9;
            											}
HXDLIN( 142)											::iterMagic::Iimg_obj::set(this101,index10,_hx_tmp23);
            										}
            									}
            									else {
HXLINE( 142)										if (forceClear1) {
HXLINE( 142)											::Dynamic this102 = undoImage3->image;
HXDLIN( 142)											int x9 = (dx2 - rectLeft1);
HXDLIN( 142)											int y9 = (dy2 - rectTop1);
HXDLIN( 142)											int index11;
HXDLIN( 142)											if (undoImage3->useVirtualPos) {
HXLINE( 142)												index11 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x9) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 142)												index11 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage3->width) + x9)) ));
            											}
HXDLIN( 142)											::iterMagic::Iimg_obj::set(this102,index11,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 142)			bool found1 = false;
HXDLIN( 142)			Float min9 = ( (Float)(0) );
HXDLIN( 142)			Float max1 = ( (Float)(0) );
HXDLIN( 142)			int a20 = 0;
HXDLIN( 142)			int r10 = 0;
HXDLIN( 142)			int g10 = 0;
HXDLIN( 142)			int b27 = 0;
HXDLIN( 142)			{
HXLINE( 142)				int _g_min2 = xIter31->start;
HXDLIN( 142)				int _g_max2 = xIter31->max;
HXDLIN( 142)				while((_g_min2 < _g_max2)){
HXLINE( 142)					_g_min2 = (_g_min2 + 1);
HXDLIN( 142)					int px2 = (_g_min2 - 1);
HXDLIN( 142)					Float pcx1 = (( (Float)(px2) ) - dx);
HXLINE( 695)					found1 = false;
HXLINE( 142)					{
HXLINE( 142)						int _g_min3 = yIter31->start;
HXDLIN( 142)						int _g_max3 = yIter31->max;
HXDLIN( 142)						while((_g_min3 < _g_max3)){
HXLINE( 142)							_g_min3 = (_g_min3 + 1);
HXDLIN( 142)							int py2 = (_g_min3 - 1);
HXDLIN( 142)							Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN( 142)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 142)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 142)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 142)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 142)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 142)							bool _hx_tmp24;
HXDLIN( 142)							bool _hx_tmp25;
HXDLIN( 142)							if ((ratioA1 >= 0)) {
HXLINE( 142)								_hx_tmp25 = (ratioB1 >= 0);
            							}
            							else {
HXLINE( 142)								_hx_tmp25 = false;
            							}
HXDLIN( 142)							if (_hx_tmp25) {
HXLINE( 142)								_hx_tmp24 = (ratioC1 >= 0);
            							}
            							else {
HXLINE( 142)								_hx_tmp24 = false;
            							}
HXDLIN( 142)							if (_hx_tmp24) {
HXLINE( 142)								if (softBC) {
HXLINE( 142)									if (softCD) {
HXLINE( 142)										if ((ratioB1 < ratioC1)) {
HXLINE( 142)											min9 = ratioB1;
            										}
            										else {
HXLINE( 142)											min9 = ratioC1;
            										}
HXDLIN( 142)										if ((ratioA1 > ratioB1)) {
HXLINE( 142)											max1 = ratioA1;
            										}
            										else {
HXLINE( 142)											max1 = ratioB1;
            										}
HXDLIN( 142)										if (!((max1 > ratioC1))) {
HXLINE( 142)											max1 = ratioC1;
            										}
HXLINE( 735)										max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE( 142)										if (!((min9 < max1))) {
HXLINE( 142)											min9 = ((max1 + min9) / ( (Float)(2) ));
            										}
HXDLIN( 142)										int i27 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN( 142)										if ((i27 > 255)) {
HXLINE(  24)											i27 = 255;
            										}
HXLINE( 142)										if ((i27 < 0)) {
HXLINE(  25)											i27 = 0;
            										}
HXLINE( 142)										a20 = i27;
            									}
            									else {
HXLINE( 722)										min9 = ratioC1;
HXLINE( 142)										int i28 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN( 142)										if ((i28 > 255)) {
HXLINE(  24)											i28 = 255;
            										}
HXLINE( 142)										if ((i28 < 0)) {
HXLINE(  25)											i28 = 0;
            										}
HXLINE( 142)										a20 = i28;
            									}
            								}
            								else {
HXLINE( 142)									if (softCD) {
HXLINE( 712)										min9 = ratioB1;
HXLINE( 142)										int i29 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN( 142)										if ((i29 > 255)) {
HXLINE(  24)											i29 = 255;
            										}
HXLINE( 142)										if ((i29 < 0)) {
HXLINE(  25)											i29 = 0;
            										}
HXLINE( 142)										a20 = i29;
            									}
            									else {
HXLINE( 142)										int i30 = ::Std_obj::_hx_int(( (Float)(aA1) ));
HXDLIN( 142)										if ((i30 > 255)) {
HXLINE(  24)											i30 = 255;
            										}
HXLINE( 142)										if ((i30 < 0)) {
HXLINE(  25)											i30 = 0;
            										}
HXLINE( 142)										a20 = i30;
            									}
            								}
HXDLIN( 142)								int i31 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN( 142)								if ((i31 > 255)) {
HXLINE(  24)									i31 = 255;
            								}
HXLINE( 142)								if ((i31 < 0)) {
HXLINE(  25)									i31 = 0;
            								}
HXLINE( 747)								r10 = i31;
HXLINE( 142)								int i32 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN( 142)								if ((i32 > 255)) {
HXLINE(  24)									i32 = 255;
            								}
HXLINE( 142)								if ((i32 < 0)) {
HXLINE(  25)									i32 = 0;
            								}
HXLINE( 748)								g10 = i32;
HXLINE( 142)								int i33 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN( 142)								if ((i33 > 255)) {
HXLINE(  24)									i33 = 255;
            								}
HXLINE( 142)								if ((i33 < 0)) {
HXLINE(  25)									i33 = 0;
            								}
HXLINE( 749)								b27 = i33;
HXLINE( 142)								{
HXLINE( 142)									int location7;
HXDLIN( 142)									if (this1->useVirtualPos) {
HXLINE( 142)										location7 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this1->virtualY) * ( (Float)(this1->width) )) + px2) - this1->virtualX));
            									}
            									else {
HXLINE( 142)										location7 = ::Std_obj::_hx_int(( (Float)(((py2 * this1->width) + px2)) ));
            									}
HXDLIN( 142)									bool _hx_tmp26;
HXDLIN( 142)									if (this1->transparent) {
HXLINE( 142)										_hx_tmp26 = (a20 < 254);
            									}
            									else {
HXLINE( 142)										_hx_tmp26 = false;
            									}
HXDLIN( 142)									if (_hx_tmp26) {
HXLINE( 142)										int this103 = ::iterMagic::Iimg_obj::get(this1->image,location7);
HXDLIN( 142)										int old1;
HXDLIN( 142)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)											old1 = ((((((this103 >> 24) & 255) << 24) | ((this103 & 255) << 16)) | (((this103 >> 8) & 255) << 8)) | ((this103 >> 16) & 255));
            										}
            										else {
HXLINE( 142)											old1 = this103;
            										}
HXDLIN( 142)										int rhs1 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b27);
HXDLIN( 142)										Float a110;
HXDLIN( 142)										int this104 = ((old1 >> 24) & 255);
HXDLIN( 142)										if ((this104 == 0)) {
HXLINE( 142)											a110 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											a110 = (( (Float)(this104) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float r17;
HXDLIN( 142)										int this105 = ((old1 >> 16) & 255);
HXDLIN( 142)										if ((this105 == 0)) {
HXLINE( 142)											r17 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											r17 = (( (Float)(this105) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float g17;
HXDLIN( 142)										int this106 = ((old1 >> 8) & 255);
HXDLIN( 142)										if ((this106 == 0)) {
HXLINE( 142)											g17 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											g17 = (( (Float)(this106) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float b111;
HXDLIN( 142)										int this107 = (old1 & 255);
HXDLIN( 142)										if ((this107 == 0)) {
HXLINE( 142)											b111 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											b111 = (( (Float)(this107) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float a27;
HXDLIN( 142)										int this108 = ((rhs1 >> 24) & 255);
HXDLIN( 142)										if ((this108 == 0)) {
HXLINE( 142)											a27 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											a27 = (( (Float)(this108) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float r27;
HXDLIN( 142)										int this109 = ((rhs1 >> 16) & 255);
HXDLIN( 142)										if ((this109 == 0)) {
HXLINE( 142)											r27 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											r27 = (( (Float)(this109) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float g27;
HXDLIN( 142)										int this110 = ((rhs1 >> 8) & 255);
HXDLIN( 142)										if ((this110 == 0)) {
HXLINE( 142)											g27 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											g27 = (( (Float)(this110) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float b28;
HXDLIN( 142)										int this111 = (rhs1 & 255);
HXDLIN( 142)										if ((this111 == 0)) {
HXLINE( 142)											b28 = ((Float)0.);
            										}
            										else {
HXLINE( 142)											b28 = (( (Float)(this111) ) / ( (Float)(255) ));
            										}
HXDLIN( 142)										Float a37 = (a110 * (( (Float)(1) ) - a27));
HXDLIN( 142)										int r18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN( 142)										int g18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN( 142)										int b29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a37) + (b28 * a27))));
HXDLIN( 142)										int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN( 142)										int blended7 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b29);
HXDLIN( 142)										{
HXLINE( 142)											int _hx_tmp27;
HXDLIN( 142)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 142)												_hx_tmp27 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            											}
            											else {
HXLINE( 142)												_hx_tmp27 = blended7;
            											}
HXDLIN( 142)											::iterMagic::Iimg_obj::set(this1->image,location7,_hx_tmp27);
            										}
            									}
            									else {
HXLINE( 142)										int value1;
HXDLIN( 142)										if (this1->isLittle) {
HXLINE( 142)											value1 = ((((a20 << 24) | (b27 << 16)) | (g10 << 8)) | r10);
            										}
            										else {
HXLINE( 142)											value1 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b27);
            										}
HXDLIN( 142)										::iterMagic::Iimg_obj::set(this1->image,location7,value1);
            									}
            								}
HXLINE( 751)								found1 = true;
            							}
            							else {
HXLINE( 142)								if (found1) {
HXLINE( 142)									goto _hx_goto_184;
            								}
            							}
            						}
            						_hx_goto_184:;
            					}
            				}
            			}
HXDLIN( 142)			if ((hasHit == false)) {
HXLINE( 142)				 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,cx,cy,dx,dy,true);
HXDLIN( 142)				if (hasUndo1) {
HXLINE( 142)					v5->undoImage = undoImage3;
HXDLIN( 142)					v5->undoX = xIter31->start;
HXDLIN( 142)					v5->undoY = yIter31->start;
            				}
            			}
            		}
HXDLIN( 142)		if ((hasHit == true)) {
HXLINE( 142)			 ::pi_xy::algo::HitQuad v6 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 142)			return v6;
            		}
            		else {
HXLINE( 142)			return null();
            		}
HXDLIN( 142)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC14(SoftShape_Impl__obj,line,return )

 ::pi_xy::algo::HitQuad SoftShape_Impl__obj::lineLuxury( ::pi_xy::ImageStruct this1,Float px,Float py,Float qx,Float qy,Float thick,int color,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_softAB,::hx::Null< bool >  __o_softBC,::hx::Null< bool >  __o_softCD,::hx::Null< bool >  __o_softDA,::hx::Null< bool >  __o_hasHit, ::Dynamic __o_debugCorners){
            		Float soft = __o_soft.Default(40);
            		bool softAB = __o_softAB.Default(true);
            		bool softBC = __o_softBC.Default(true);
            		bool softCD = __o_softCD.Default(true);
            		bool softDA = __o_softDA.Default(true);
            		bool hasHit = __o_hasHit.Default(true);
            		 ::Dynamic debugCorners = __o_debugCorners;
            		if (::hx::IsNull(__o_debugCorners)) debugCorners = false;
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_165_lineLuxury)
HXLINE( 166)		Float o = (qy - py);
HXLINE( 167)		Float a = (qx - px);
HXLINE( 168)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE( 169)		Float theta = ::Math_obj::atan2(o,a);
HXLINE( 170)		 ::Dynamic debugCorners1 = debugCorners;
HXLINE( 179)		if (::hx::IsNull( debugCorners1 )) {
HXLINE( 179)			debugCorners1 = false;
            		}
HXLINE( 170)		Float sin = ::Math_obj::sin(theta);
HXDLIN( 170)		Float cos = ::Math_obj::cos(theta);
HXDLIN( 170)		Float radius = (thick / ( (Float)(2) ));
HXDLIN( 170)		Float dx = ((Float)0.1);
HXDLIN( 170)		Float dy = radius;
HXDLIN( 170)		Float cx = h;
HXDLIN( 170)		Float cy = radius;
HXDLIN( 170)		Float bx = h;
HXDLIN( 170)		Float by = -(radius);
HXDLIN( 170)		Float ax = ((Float)0.1);
HXDLIN( 170)		Float ay = -(radius);
HXDLIN( 170)		Float temp = ((Float)0.);
HXLINE( 136)		temp = (px + ((ax * cos) - (ay * sin)));
HXLINE( 137)		ay = (py + ((ay * cos) + (ax * sin)));
HXLINE( 138)		ax = temp;
HXLINE( 140)		temp = (px + ((bx * cos) - (by * sin)));
HXLINE( 141)		by = (py + ((by * cos) + (bx * sin)));
HXLINE( 142)		bx = temp;
HXLINE( 144)		temp = (px + ((cx * cos) - (cy * sin)));
HXLINE( 145)		cy = (py + ((cy * cos) + (cx * sin)));
HXLINE( 146)		cx = temp;
HXLINE( 148)		temp = (px + ((dx * cos) - (dy * sin)));
HXLINE( 149)		dy = (py + ((dy * cos) + (dx * sin)));
HXLINE( 150)		dx = temp;
HXLINE( 170)		if (( (bool)(debugCorners1) )) {
HXLINE( 170)			{
HXLINE( 170)				 ::pi_xy::ImageStruct this2 = this1;
HXDLIN( 170)				{
HXLINE( 170)					int r_x = ::Std_obj::_hx_int((ax - ((Float)6.)));
HXDLIN( 170)					int r_y = ::Std_obj::_hx_int((ay - ((Float)6.)));
HXDLIN( 170)					int r_w = 12;
HXDLIN( 170)					int r_h = 12;
HXDLIN( 170)					int xmax = ((r_x + r_w) + 1);
HXDLIN( 170)					int ymax = ((r_y + r_h) + 1);
HXDLIN( 170)					int ii_min = r_x;
HXDLIN( 170)					int ii_max = xmax;
HXDLIN( 170)					int xRange__start = ii_min;
HXDLIN( 170)					int xRange__max = ii_max;
HXDLIN( 170)					int ii_min1 = r_y;
HXDLIN( 170)					int ii_max1 = ymax;
HXDLIN( 170)					int yRange__start = ii_min1;
HXDLIN( 170)					int yRange__max = ii_max1;
HXDLIN( 170)					int range_x = xRange__start;
HXDLIN( 170)					int range_y = (yRange__start - 1);
HXDLIN( 170)					int range_xReset = range_x;
HXDLIN( 170)					int range_yReset = range_y;
HXDLIN( 170)					int range_xMax = (xRange__max - 2);
HXDLIN( 170)					int range_yMax = (yRange__max - 2);
HXDLIN( 170)					int _this_min = 0;
HXDLIN( 170)					int _this_max = ::Std_obj::_hx_int(( (Float)(((xRange__max - xRange__start) * (yRange__max - yRange__start))) ));
HXDLIN( 170)					while((_this_min < _this_max)){
HXLINE( 170)						_this_min = (_this_min + 1);
HXDLIN( 170)						int i = (_this_min - 1);
HXDLIN( 170)						if ((range_y > range_yMax)) {
HXLINE( 170)							range_y = range_yReset;
HXDLIN( 170)							range_x = (range_x + 1);
            						}
HXDLIN( 170)						range_y = (range_y + 1);
HXDLIN( 170)						int i1 = i;
HXDLIN( 170)						{
HXLINE( 170)							int x = range_x;
HXDLIN( 170)							int y = range_y;
HXDLIN( 170)							int c = -65536;
HXDLIN( 170)							bool _hx_tmp;
HXDLIN( 170)							if ((((c >> 24) & 255) < 254)) {
HXLINE( 170)								_hx_tmp = this2->transparent;
            							}
            							else {
HXLINE( 170)								_hx_tmp = false;
            							}
HXDLIN( 170)							if (_hx_tmp) {
HXLINE( 170)								int location;
HXDLIN( 170)								if (this2->useVirtualPos) {
HXLINE( 170)									location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this2->virtualY) * ( (Float)(this2->width) )) + x) - this2->virtualX));
            								}
            								else {
HXLINE( 170)									location = ::Std_obj::_hx_int(( (Float)(((y * this2->width) + x)) ));
            								}
HXDLIN( 170)								int this3 = ::iterMagic::Iimg_obj::get(this2->image,location);
HXDLIN( 170)								int this4;
HXDLIN( 170)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)									this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            								}
            								else {
HXLINE( 170)									this4 = this3;
            								}
HXDLIN( 170)								Float a1;
HXDLIN( 170)								int this5 = ((this4 >> 24) & 255);
HXDLIN( 170)								if ((this5 == 0)) {
HXLINE( 170)									a1 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float r1;
HXDLIN( 170)								int this6 = ((this4 >> 16) & 255);
HXDLIN( 170)								if ((this6 == 0)) {
HXLINE( 170)									r1 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float g1;
HXDLIN( 170)								int this7 = ((this4 >> 8) & 255);
HXDLIN( 170)								if ((this7 == 0)) {
HXLINE( 170)									g1 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float b1;
HXDLIN( 170)								int this8 = (this4 & 255);
HXDLIN( 170)								if ((this8 == 0)) {
HXLINE( 170)									b1 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float a2;
HXDLIN( 170)								int this9 = ((-65536 >> 24) & 255);
HXDLIN( 170)								if ((this9 == 0)) {
HXLINE( 170)									a2 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float r2;
HXDLIN( 170)								int this10 = ((-65536 >> 16) & 255);
HXDLIN( 170)								if ((this10 == 0)) {
HXLINE( 170)									r2 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float g2;
HXDLIN( 170)								int this11 = ((-65536 >> 8) & 255);
HXDLIN( 170)								if ((this11 == 0)) {
HXLINE( 170)									g2 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float b2;
HXDLIN( 170)								int this12 = (-65536 & 255);
HXDLIN( 170)								if ((this12 == 0)) {
HXLINE( 170)									b2 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 170)								int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 170)								int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 170)								int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 170)								int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 170)								int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 170)								{
HXLINE( 170)									int _hx_tmp1;
HXDLIN( 170)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)										_hx_tmp1 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            									}
            									else {
HXLINE( 170)										_hx_tmp1 = blended;
            									}
HXDLIN( 170)									::iterMagic::Iimg_obj::set(this2->image,location,_hx_tmp1);
            								}
            							}
            							else {
HXLINE( 170)								::Dynamic this13 = this2->image;
HXDLIN( 170)								int index;
HXDLIN( 170)								if (this2->useVirtualPos) {
HXLINE( 170)									index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this2->virtualY) * ( (Float)(this2->width) )) + x) - this2->virtualX));
            								}
            								else {
HXLINE( 170)									index = ::Std_obj::_hx_int(( (Float)(((y * this2->width) + x)) ));
            								}
HXDLIN( 170)								int _hx_tmp2;
HXDLIN( 170)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)									_hx_tmp2 = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 170)									_hx_tmp2 = c;
            								}
HXDLIN( 170)								::iterMagic::Iimg_obj::set(this13,index,_hx_tmp2);
            							}
            						}
            					}
            				}
            			}
HXDLIN( 170)			{
HXLINE( 170)				 ::pi_xy::ImageStruct this14 = this1;
HXDLIN( 170)				{
HXLINE( 170)					int r_x1 = ::Std_obj::_hx_int((bx - ((Float)6.)));
HXDLIN( 170)					int r_y1 = ::Std_obj::_hx_int((by - ((Float)6.)));
HXDLIN( 170)					int r_w1 = 12;
HXDLIN( 170)					int r_h1 = 12;
HXDLIN( 170)					int xmax1 = ((r_x1 + r_w1) + 1);
HXDLIN( 170)					int ymax1 = ((r_y1 + r_h1) + 1);
HXDLIN( 170)					int ii_min2 = r_x1;
HXDLIN( 170)					int ii_max2 = xmax1;
HXDLIN( 170)					int xRange__start1 = ii_min2;
HXDLIN( 170)					int xRange__max1 = ii_max2;
HXDLIN( 170)					int ii_min3 = r_y1;
HXDLIN( 170)					int ii_max3 = ymax1;
HXDLIN( 170)					int yRange__start1 = ii_min3;
HXDLIN( 170)					int yRange__max1 = ii_max3;
HXDLIN( 170)					int range_x1 = xRange__start1;
HXDLIN( 170)					int range_y1 = (yRange__start1 - 1);
HXDLIN( 170)					int range_xReset1 = range_x1;
HXDLIN( 170)					int range_yReset1 = range_y1;
HXDLIN( 170)					int range_xMax1 = (xRange__max1 - 2);
HXDLIN( 170)					int range_yMax1 = (yRange__max1 - 2);
HXDLIN( 170)					int _this_min1 = 0;
HXDLIN( 170)					int _this_max1 = ::Std_obj::_hx_int(( (Float)(((xRange__max1 - xRange__start1) * (yRange__max1 - yRange__start1))) ));
HXDLIN( 170)					while((_this_min1 < _this_max1)){
HXLINE( 170)						_this_min1 = (_this_min1 + 1);
HXDLIN( 170)						int i2 = (_this_min1 - 1);
HXDLIN( 170)						if ((range_y1 > range_yMax1)) {
HXLINE( 170)							range_y1 = range_yReset1;
HXDLIN( 170)							range_x1 = (range_x1 + 1);
            						}
HXDLIN( 170)						range_y1 = (range_y1 + 1);
HXDLIN( 170)						int i3 = i2;
HXDLIN( 170)						{
HXLINE( 170)							int x1 = range_x1;
HXDLIN( 170)							int y1 = range_y1;
HXDLIN( 170)							int c1 = -16711936;
HXDLIN( 170)							bool _hx_tmp3;
HXDLIN( 170)							if ((((c1 >> 24) & 255) < 254)) {
HXLINE( 170)								_hx_tmp3 = this14->transparent;
            							}
            							else {
HXLINE( 170)								_hx_tmp3 = false;
            							}
HXDLIN( 170)							if (_hx_tmp3) {
HXLINE( 170)								int location1;
HXDLIN( 170)								if (this14->useVirtualPos) {
HXLINE( 170)									location1 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - this14->virtualY) * ( (Float)(this14->width) )) + x1) - this14->virtualX));
            								}
            								else {
HXLINE( 170)									location1 = ::Std_obj::_hx_int(( (Float)(((y1 * this14->width) + x1)) ));
            								}
HXDLIN( 170)								int this15 = ::iterMagic::Iimg_obj::get(this14->image,location1);
HXDLIN( 170)								int this16;
HXDLIN( 170)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)									this16 = ((((((this15 >> 24) & 255) << 24) | ((this15 & 255) << 16)) | (((this15 >> 8) & 255) << 8)) | ((this15 >> 16) & 255));
            								}
            								else {
HXLINE( 170)									this16 = this15;
            								}
HXDLIN( 170)								Float a11;
HXDLIN( 170)								int this17 = ((this16 >> 24) & 255);
HXDLIN( 170)								if ((this17 == 0)) {
HXLINE( 170)									a11 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									a11 = (( (Float)(this17) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float r11;
HXDLIN( 170)								int this18 = ((this16 >> 16) & 255);
HXDLIN( 170)								if ((this18 == 0)) {
HXLINE( 170)									r11 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									r11 = (( (Float)(this18) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float g11;
HXDLIN( 170)								int this19 = ((this16 >> 8) & 255);
HXDLIN( 170)								if ((this19 == 0)) {
HXLINE( 170)									g11 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									g11 = (( (Float)(this19) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float b11;
HXDLIN( 170)								int this20 = (this16 & 255);
HXDLIN( 170)								if ((this20 == 0)) {
HXLINE( 170)									b11 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									b11 = (( (Float)(this20) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float a21;
HXDLIN( 170)								int this21 = ((-16711936 >> 24) & 255);
HXDLIN( 170)								if ((this21 == 0)) {
HXLINE( 170)									a21 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									a21 = (( (Float)(this21) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float r21;
HXDLIN( 170)								int this22 = ((-16711936 >> 16) & 255);
HXDLIN( 170)								if ((this22 == 0)) {
HXLINE( 170)									r21 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									r21 = (( (Float)(this22) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float g21;
HXDLIN( 170)								int this23 = ((-16711936 >> 8) & 255);
HXDLIN( 170)								if ((this23 == 0)) {
HXLINE( 170)									g21 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									g21 = (( (Float)(this23) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float b21;
HXDLIN( 170)								int this24 = (-16711936 & 255);
HXDLIN( 170)								if ((this24 == 0)) {
HXLINE( 170)									b21 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									b21 = (( (Float)(this24) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN( 170)								int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 170)								int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 170)								int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a31) + (b21 * a21))));
HXDLIN( 170)								int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 170)								int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN( 170)								{
HXLINE( 170)									int _hx_tmp4;
HXDLIN( 170)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)										_hx_tmp4 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            									}
            									else {
HXLINE( 170)										_hx_tmp4 = blended1;
            									}
HXDLIN( 170)									::iterMagic::Iimg_obj::set(this14->image,location1,_hx_tmp4);
            								}
            							}
            							else {
HXLINE( 170)								::Dynamic this25 = this14->image;
HXDLIN( 170)								int index1;
HXDLIN( 170)								if (this14->useVirtualPos) {
HXLINE( 170)									index1 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - this14->virtualY) * ( (Float)(this14->width) )) + x1) - this14->virtualX));
            								}
            								else {
HXLINE( 170)									index1 = ::Std_obj::_hx_int(( (Float)(((y1 * this14->width) + x1)) ));
            								}
HXDLIN( 170)								int _hx_tmp5;
HXDLIN( 170)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)									_hx_tmp5 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            								}
            								else {
HXLINE( 170)									_hx_tmp5 = c1;
            								}
HXDLIN( 170)								::iterMagic::Iimg_obj::set(this25,index1,_hx_tmp5);
            							}
            						}
            					}
            				}
            			}
HXDLIN( 170)			{
HXLINE( 170)				 ::pi_xy::ImageStruct this26 = this1;
HXDLIN( 170)				{
HXLINE( 170)					int r_x2 = ::Std_obj::_hx_int((cx - ((Float)6.)));
HXDLIN( 170)					int r_y2 = ::Std_obj::_hx_int((cy - ((Float)6.)));
HXDLIN( 170)					int r_w2 = 12;
HXDLIN( 170)					int r_h2 = 12;
HXDLIN( 170)					int xmax2 = ((r_x2 + r_w2) + 1);
HXDLIN( 170)					int ymax2 = ((r_y2 + r_h2) + 1);
HXDLIN( 170)					int ii_min4 = r_x2;
HXDLIN( 170)					int ii_max4 = xmax2;
HXDLIN( 170)					int xRange__start2 = ii_min4;
HXDLIN( 170)					int xRange__max2 = ii_max4;
HXDLIN( 170)					int ii_min5 = r_y2;
HXDLIN( 170)					int ii_max5 = ymax2;
HXDLIN( 170)					int yRange__start2 = ii_min5;
HXDLIN( 170)					int yRange__max2 = ii_max5;
HXDLIN( 170)					int range_x2 = xRange__start2;
HXDLIN( 170)					int range_y2 = (yRange__start2 - 1);
HXDLIN( 170)					int range_xReset2 = range_x2;
HXDLIN( 170)					int range_yReset2 = range_y2;
HXDLIN( 170)					int range_xMax2 = (xRange__max2 - 2);
HXDLIN( 170)					int range_yMax2 = (yRange__max2 - 2);
HXDLIN( 170)					int _this_min2 = 0;
HXDLIN( 170)					int _this_max2 = ::Std_obj::_hx_int(( (Float)(((xRange__max2 - xRange__start2) * (yRange__max2 - yRange__start2))) ));
HXDLIN( 170)					while((_this_min2 < _this_max2)){
HXLINE( 170)						_this_min2 = (_this_min2 + 1);
HXDLIN( 170)						int i4 = (_this_min2 - 1);
HXDLIN( 170)						if ((range_y2 > range_yMax2)) {
HXLINE( 170)							range_y2 = range_yReset2;
HXDLIN( 170)							range_x2 = (range_x2 + 1);
            						}
HXDLIN( 170)						range_y2 = (range_y2 + 1);
HXDLIN( 170)						int i5 = i4;
HXDLIN( 170)						{
HXLINE( 170)							int x2 = range_x2;
HXDLIN( 170)							int y2 = range_y2;
HXDLIN( 170)							int c2 = -16776961;
HXDLIN( 170)							bool _hx_tmp6;
HXDLIN( 170)							if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 170)								_hx_tmp6 = this26->transparent;
            							}
            							else {
HXLINE( 170)								_hx_tmp6 = false;
            							}
HXDLIN( 170)							if (_hx_tmp6) {
HXLINE( 170)								int location2;
HXDLIN( 170)								if (this26->useVirtualPos) {
HXLINE( 170)									location2 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - this26->virtualY) * ( (Float)(this26->width) )) + x2) - this26->virtualX));
            								}
            								else {
HXLINE( 170)									location2 = ::Std_obj::_hx_int(( (Float)(((y2 * this26->width) + x2)) ));
            								}
HXDLIN( 170)								int this27 = ::iterMagic::Iimg_obj::get(this26->image,location2);
HXDLIN( 170)								int this28;
HXDLIN( 170)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)									this28 = ((((((this27 >> 24) & 255) << 24) | ((this27 & 255) << 16)) | (((this27 >> 8) & 255) << 8)) | ((this27 >> 16) & 255));
            								}
            								else {
HXLINE( 170)									this28 = this27;
            								}
HXDLIN( 170)								Float a12;
HXDLIN( 170)								int this29 = ((this28 >> 24) & 255);
HXDLIN( 170)								if ((this29 == 0)) {
HXLINE( 170)									a12 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									a12 = (( (Float)(this29) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float r12;
HXDLIN( 170)								int this30 = ((this28 >> 16) & 255);
HXDLIN( 170)								if ((this30 == 0)) {
HXLINE( 170)									r12 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									r12 = (( (Float)(this30) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float g12;
HXDLIN( 170)								int this31 = ((this28 >> 8) & 255);
HXDLIN( 170)								if ((this31 == 0)) {
HXLINE( 170)									g12 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									g12 = (( (Float)(this31) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float b12;
HXDLIN( 170)								int this32 = (this28 & 255);
HXDLIN( 170)								if ((this32 == 0)) {
HXLINE( 170)									b12 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									b12 = (( (Float)(this32) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float a22;
HXDLIN( 170)								int this33 = ((-16776961 >> 24) & 255);
HXDLIN( 170)								if ((this33 == 0)) {
HXLINE( 170)									a22 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									a22 = (( (Float)(this33) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float r22;
HXDLIN( 170)								int this34 = ((-16776961 >> 16) & 255);
HXDLIN( 170)								if ((this34 == 0)) {
HXLINE( 170)									r22 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									r22 = (( (Float)(this34) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float g22;
HXDLIN( 170)								int this35 = ((-16776961 >> 8) & 255);
HXDLIN( 170)								if ((this35 == 0)) {
HXLINE( 170)									g22 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									g22 = (( (Float)(this35) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float b22;
HXDLIN( 170)								int this36 = (-16776961 & 255);
HXDLIN( 170)								if ((this36 == 0)) {
HXLINE( 170)									b22 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									b22 = (( (Float)(this36) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN( 170)								int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 170)								int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 170)								int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a32) + (b22 * a22))));
HXDLIN( 170)								int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 170)								int blended2 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b4);
HXDLIN( 170)								{
HXLINE( 170)									int _hx_tmp7;
HXDLIN( 170)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)										_hx_tmp7 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            									}
            									else {
HXLINE( 170)										_hx_tmp7 = blended2;
            									}
HXDLIN( 170)									::iterMagic::Iimg_obj::set(this26->image,location2,_hx_tmp7);
            								}
            							}
            							else {
HXLINE( 170)								::Dynamic this37 = this26->image;
HXDLIN( 170)								int index2;
HXDLIN( 170)								if (this26->useVirtualPos) {
HXLINE( 170)									index2 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - this26->virtualY) * ( (Float)(this26->width) )) + x2) - this26->virtualX));
            								}
            								else {
HXLINE( 170)									index2 = ::Std_obj::_hx_int(( (Float)(((y2 * this26->width) + x2)) ));
            								}
HXDLIN( 170)								int _hx_tmp8;
HXDLIN( 170)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)									_hx_tmp8 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            								}
            								else {
HXLINE( 170)									_hx_tmp8 = c2;
            								}
HXDLIN( 170)								::iterMagic::Iimg_obj::set(this37,index2,_hx_tmp8);
            							}
            						}
            					}
            				}
            			}
HXDLIN( 170)			{
HXLINE( 170)				 ::pi_xy::ImageStruct this38 = this1;
HXDLIN( 170)				{
HXLINE( 170)					int r_x3 = ::Std_obj::_hx_int((dx - ((Float)6.)));
HXDLIN( 170)					int r_y3 = ::Std_obj::_hx_int((dy - ((Float)6.)));
HXDLIN( 170)					int r_w3 = 12;
HXDLIN( 170)					int r_h3 = 12;
HXDLIN( 170)					int xmax3 = ((r_x3 + r_w3) + 1);
HXDLIN( 170)					int ymax3 = ((r_y3 + r_h3) + 1);
HXDLIN( 170)					int ii_min6 = r_x3;
HXDLIN( 170)					int ii_max6 = xmax3;
HXDLIN( 170)					int xRange__start3 = ii_min6;
HXDLIN( 170)					int xRange__max3 = ii_max6;
HXDLIN( 170)					int ii_min7 = r_y3;
HXDLIN( 170)					int ii_max7 = ymax3;
HXDLIN( 170)					int yRange__start3 = ii_min7;
HXDLIN( 170)					int yRange__max3 = ii_max7;
HXDLIN( 170)					int range_x3 = xRange__start3;
HXDLIN( 170)					int range_y3 = (yRange__start3 - 1);
HXDLIN( 170)					int range_xReset3 = range_x3;
HXDLIN( 170)					int range_yReset3 = range_y3;
HXDLIN( 170)					int range_xMax3 = (xRange__max3 - 2);
HXDLIN( 170)					int range_yMax3 = (yRange__max3 - 2);
HXDLIN( 170)					int _this_min3 = 0;
HXDLIN( 170)					int _this_max3 = ::Std_obj::_hx_int(( (Float)(((xRange__max3 - xRange__start3) * (yRange__max3 - yRange__start3))) ));
HXDLIN( 170)					while((_this_min3 < _this_max3)){
HXLINE( 170)						_this_min3 = (_this_min3 + 1);
HXDLIN( 170)						int i6 = (_this_min3 - 1);
HXDLIN( 170)						if ((range_y3 > range_yMax3)) {
HXLINE( 170)							range_y3 = range_yReset3;
HXDLIN( 170)							range_x3 = (range_x3 + 1);
            						}
HXDLIN( 170)						range_y3 = (range_y3 + 1);
HXDLIN( 170)						int i7 = i6;
HXDLIN( 170)						{
HXLINE( 170)							int x3 = range_x3;
HXDLIN( 170)							int y3 = range_y3;
HXDLIN( 170)							int c3 = -1048336;
HXDLIN( 170)							bool _hx_tmp9;
HXDLIN( 170)							if ((((c3 >> 24) & 255) < 254)) {
HXLINE( 170)								_hx_tmp9 = this38->transparent;
            							}
            							else {
HXLINE( 170)								_hx_tmp9 = false;
            							}
HXDLIN( 170)							if (_hx_tmp9) {
HXLINE( 170)								int location3;
HXDLIN( 170)								if (this38->useVirtualPos) {
HXLINE( 170)									location3 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - this38->virtualY) * ( (Float)(this38->width) )) + x3) - this38->virtualX));
            								}
            								else {
HXLINE( 170)									location3 = ::Std_obj::_hx_int(( (Float)(((y3 * this38->width) + x3)) ));
            								}
HXDLIN( 170)								int this39 = ::iterMagic::Iimg_obj::get(this38->image,location3);
HXDLIN( 170)								int this40;
HXDLIN( 170)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)									this40 = ((((((this39 >> 24) & 255) << 24) | ((this39 & 255) << 16)) | (((this39 >> 8) & 255) << 8)) | ((this39 >> 16) & 255));
            								}
            								else {
HXLINE( 170)									this40 = this39;
            								}
HXDLIN( 170)								Float a13;
HXDLIN( 170)								int this41 = ((this40 >> 24) & 255);
HXDLIN( 170)								if ((this41 == 0)) {
HXLINE( 170)									a13 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									a13 = (( (Float)(this41) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float r13;
HXDLIN( 170)								int this42 = ((this40 >> 16) & 255);
HXDLIN( 170)								if ((this42 == 0)) {
HXLINE( 170)									r13 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									r13 = (( (Float)(this42) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float g13;
HXDLIN( 170)								int this43 = ((this40 >> 8) & 255);
HXDLIN( 170)								if ((this43 == 0)) {
HXLINE( 170)									g13 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									g13 = (( (Float)(this43) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float b13;
HXDLIN( 170)								int this44 = (this40 & 255);
HXDLIN( 170)								if ((this44 == 0)) {
HXLINE( 170)									b13 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									b13 = (( (Float)(this44) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float a23;
HXDLIN( 170)								int this45 = ((-1048336 >> 24) & 255);
HXDLIN( 170)								if ((this45 == 0)) {
HXLINE( 170)									a23 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									a23 = (( (Float)(this45) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float r23;
HXDLIN( 170)								int this46 = ((-1048336 >> 16) & 255);
HXDLIN( 170)								if ((this46 == 0)) {
HXLINE( 170)									r23 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									r23 = (( (Float)(this46) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float g23;
HXDLIN( 170)								int this47 = ((-1048336 >> 8) & 255);
HXDLIN( 170)								if ((this47 == 0)) {
HXLINE( 170)									g23 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									g23 = (( (Float)(this47) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float b23;
HXDLIN( 170)								int this48 = (-1048336 & 255);
HXDLIN( 170)								if ((this48 == 0)) {
HXLINE( 170)									b23 = ((Float)0.);
            								}
            								else {
HXLINE( 170)									b23 = (( (Float)(this48) ) / ( (Float)(255) ));
            								}
HXDLIN( 170)								Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN( 170)								int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 170)								int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 170)								int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a33) + (b23 * a23))));
HXDLIN( 170)								int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 170)								int blended3 = ((((a7 << 24) | (r5 << 16)) | (g5 << 8)) | b5);
HXDLIN( 170)								{
HXLINE( 170)									int _hx_tmp10;
HXDLIN( 170)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)										_hx_tmp10 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            									}
            									else {
HXLINE( 170)										_hx_tmp10 = blended3;
            									}
HXDLIN( 170)									::iterMagic::Iimg_obj::set(this38->image,location3,_hx_tmp10);
            								}
            							}
            							else {
HXLINE( 170)								::Dynamic this49 = this38->image;
HXDLIN( 170)								int index3;
HXDLIN( 170)								if (this38->useVirtualPos) {
HXLINE( 170)									index3 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - this38->virtualY) * ( (Float)(this38->width) )) + x3) - this38->virtualX));
            								}
            								else {
HXLINE( 170)									index3 = ::Std_obj::_hx_int(( (Float)(((y3 * this38->width) + x3)) ));
            								}
HXDLIN( 170)								int _hx_tmp11;
HXDLIN( 170)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)									_hx_tmp11 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            								}
            								else {
HXLINE( 170)									_hx_tmp11 = c3;
            								}
HXDLIN( 170)								::iterMagic::Iimg_obj::set(this49,index3,_hx_tmp11);
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 170)		{
HXLINE( 170)			bool hasUndo = true;
HXDLIN( 170)			int aA = ((color >> 24) & 255);
HXDLIN( 170)			int rA = ((color >> 16) & 255);
HXDLIN( 170)			int gA = ((color >> 8) & 255);
HXDLIN( 170)			int bA = (color & 255);
HXDLIN( 170)			Float bcx = (bx - cx);
HXDLIN( 170)			Float bcy = (by - cy);
HXDLIN( 170)			Float acx = (ax - cx);
HXDLIN( 170)			Float acy = (ay - cy);
HXDLIN( 170)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 170)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 170)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 170)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 170)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 170)			if ((ax > bx)) {
HXLINE( 170)				if ((ax > cx)) {
HXLINE( 170)					int min;
HXDLIN( 170)					if ((bx > cx)) {
HXLINE( 170)						min = ::Math_obj::floor(cx);
            					}
            					else {
HXLINE( 170)						min = ::Math_obj::floor(bx);
            					}
HXDLIN( 170)					int ii_min8 = min;
HXDLIN( 170)					int ii_max8 = ::Math_obj::ceil(ax);
HXDLIN( 170)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXLINE( 170)					int ii_min9 = ::Math_obj::floor(bx);
HXDLIN( 170)					int ii_max9 = ::Math_obj::ceil(cx);
HXDLIN( 170)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXLINE( 170)				if ((bx > cx)) {
HXLINE( 170)					int min1;
HXDLIN( 170)					if ((ax > cx)) {
HXLINE( 170)						min1 = ::Math_obj::floor(cx);
            					}
            					else {
HXLINE( 170)						min1 = ::Math_obj::ceil(ax);
            					}
HXDLIN( 170)					int ii_min10 = min1;
HXDLIN( 170)					int ii_max10 = ::Math_obj::ceil(bx);
HXDLIN( 170)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXLINE( 170)					int ii_min11 = ::Math_obj::floor(ax);
HXDLIN( 170)					int ii_max11 = ::Math_obj::ceil(cx);
HXDLIN( 170)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN( 170)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 170)			if ((ay > by)) {
HXLINE( 170)				if ((ay > cy)) {
HXLINE( 170)					int min2;
HXDLIN( 170)					if ((by > cy)) {
HXLINE( 170)						min2 = ::Math_obj::floor(cy);
            					}
            					else {
HXLINE( 170)						min2 = ::Math_obj::floor(by);
            					}
HXDLIN( 170)					int ii_min12 = min2;
HXDLIN( 170)					int ii_max12 = ::Math_obj::ceil(ay);
HXDLIN( 170)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXLINE( 170)					int ii_min13 = ::Math_obj::floor(by);
HXDLIN( 170)					int ii_max13 = ::Math_obj::ceil(cy);
HXDLIN( 170)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXLINE( 170)				if ((by > cy)) {
HXLINE( 170)					int min3;
HXDLIN( 170)					if ((ay > cy)) {
HXLINE( 170)						min3 = ::Math_obj::floor(cy);
            					}
            					else {
HXLINE( 170)						min3 = ::Math_obj::ceil(ay);
            					}
HXDLIN( 170)					int ii_min14 = min3;
HXDLIN( 170)					int ii_max14 = ::Math_obj::ceil(by);
HXDLIN( 170)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXLINE( 170)					int ii_min15 = ::Math_obj::floor(ay);
HXDLIN( 170)					int ii_max15 = ::Math_obj::ceil(cy);
HXDLIN( 170)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN( 170)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 170)			if (hasUndo) {
HXLINE( 170)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 170)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 170)				 ::Dynamic imageType = null();
HXDLIN( 170)				 ::pi_xy::ImageStruct this50 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 170)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 170)				::Dynamic undoImage1;
HXDLIN( 170)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXLINE( 170)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::BytesImg b6 = byt;
HXDLIN( 170)						{
HXLINE( 170)							b6->width = width;
HXDLIN( 170)							b6->height = height;
HXDLIN( 170)							b6->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 170)							b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 170)							{
HXLINE( 170)								int len = b6->length;
HXDLIN( 170)								int w = 0;
HXDLIN( 170)								{
HXLINE( 170)									int _g = 0;
HXDLIN( 170)									int _g1 = b6->height;
HXDLIN( 170)									while((_g < _g1)){
HXLINE( 170)										_g = (_g + 1);
HXDLIN( 170)										int y4 = (_g - 1);
HXDLIN( 170)										{
HXLINE( 170)											int _g2 = 0;
HXDLIN( 170)											int _g3 = b6->width;
HXDLIN( 170)											while((_g2 < _g3)){
HXLINE( 170)												_g2 = (_g2 + 1);
HXDLIN( 170)												int x4 = (_g2 - 1);
HXDLIN( 170)												{
HXLINE( 170)													w = (w + 1);
HXDLIN( 170)													b6->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 170)												{
HXLINE( 170)													w = (w + 1);
HXDLIN( 170)													b6->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 170)												{
HXLINE( 170)													w = (w + 1);
HXDLIN( 170)													b6->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 170)												{
HXLINE( 170)													w = (w + 1);
HXDLIN( 170)													b6->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 170)						undoImage1 = b6;
            					}
            					break;
            					case (int)1: {
HXLINE( 170)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::ArrIntImg a8 = arrI;
HXDLIN( 170)						{
HXLINE( 170)							a8->width = width;
HXDLIN( 170)							a8->height = height;
HXDLIN( 170)							a8->data = ::Array_obj< int >::__new(0);
HXDLIN( 170)							a8->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 170)							{
HXLINE( 170)								int _g4 = 0;
HXDLIN( 170)								int _g5 = a8->length;
HXDLIN( 170)								while((_g4 < _g5)){
HXLINE( 170)									_g4 = (_g4 + 1);
HXDLIN( 170)									int i8 = (_g4 - 1);
HXDLIN( 170)									a8->data[i8] = 0;
            								}
            							}
            						}
HXDLIN( 170)						undoImage1 = a8;
            					}
            					break;
            					case (int)2: {
HXLINE( 170)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::U32ArrImg b7 = u32a;
HXDLIN( 170)						{
HXLINE( 170)							b7->width = width;
HXDLIN( 170)							b7->height = height;
HXDLIN( 170)							b7->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 170)							int size = (b7->length * 4);
HXDLIN( 170)							b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 170)							{
HXLINE( 170)								int _g6 = 0;
HXDLIN( 170)								int _g7 = b7->length;
HXDLIN( 170)								while((_g6 < _g7)){
HXLINE( 170)									_g6 = (_g6 + 1);
HXDLIN( 170)									int i9 = (_g6 - 1);
HXDLIN( 170)									{
HXLINE( 170)										 ::haxe::io::ArrayBufferViewImpl this51 = b7->data;
HXDLIN( 170)										bool undoImage2;
HXDLIN( 170)										if ((i9 >= 0)) {
HXLINE( 170)											undoImage2 = (i9 < (this51->byteLength >> 2));
            										}
            										else {
HXLINE( 170)											undoImage2 = false;
            										}
HXDLIN( 170)										if (undoImage2) {
HXLINE( 170)											 ::haxe::io::Bytes _this = this51->bytes;
HXDLIN( 170)											int pos = ((i9 << 2) + this51->byteOffset);
HXDLIN( 170)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 170)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 170)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 170)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 170)						undoImage1 = b7;
            					}
            					break;
            					case (int)3: {
HXLINE( 170)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::VecIntImg v = vec;
HXDLIN( 170)						{
HXLINE( 170)							v->width = width;
HXDLIN( 170)							v->height = height;
HXDLIN( 170)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 170)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 170)							{
HXLINE( 170)								int _g8 = 0;
HXDLIN( 170)								int _g9 = v->length;
HXDLIN( 170)								while((_g8 < _g9)){
HXLINE( 170)									_g8 = (_g8 + 1);
HXDLIN( 170)									int i10 = (_g8 - 1);
HXDLIN( 170)									v->data->__unsafe_set(i10,0);
            								}
            							}
            						}
HXDLIN( 170)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXLINE( 170)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::StackIntImg b8 = sInt;
HXDLIN( 170)						{
HXLINE( 170)							b8->width = width;
HXDLIN( 170)							b8->height = height;
HXDLIN( 170)							b8->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 170)							b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 170)							{
HXLINE( 170)								int len1 = b8->length;
HXDLIN( 170)								 ::haxe::ds::GenericStack_Int d = b8->data;
HXDLIN( 170)								if (::hx::IsNull( d->head )) {
HXLINE( 170)									int _g10 = 0;
HXDLIN( 170)									int _g11 = len1;
HXDLIN( 170)									while((_g10 < _g11)){
HXLINE( 170)										_g10 = (_g10 + 1);
HXDLIN( 170)										int i11 = (_g10 - 1);
HXDLIN( 170)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXLINE( 170)									int _g12 = 0;
HXDLIN( 170)									int _g13 = len1;
HXDLIN( 170)									while((_g12 < _g13)){
HXLINE( 170)										_g12 = (_g12 + 1);
HXDLIN( 170)										int i12 = (_g12 - 1);
HXDLIN( 170)										{
HXLINE( 170)											 ::haxe::ds::GenericCell_Int l = b8->data->head;
HXDLIN( 170)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 170)											{
HXLINE( 170)												int _g14 = 0;
HXDLIN( 170)												int _g15 = i12;
HXDLIN( 170)												while((_g14 < _g15)){
HXLINE( 170)													_g14 = (_g14 + 1);
HXDLIN( 170)													int i13 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE( 170)											if (::hx::IsNull( prev )) {
HXLINE( 170)												b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 170)												l = null();
            											}
            											else {
HXLINE( 170)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 170)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 170)						undoImage1 = b8;
            					}
            					break;
            				}
HXDLIN( 170)				this50->image = undoImage1;
HXDLIN( 170)				this50->width = width;
HXDLIN( 170)				this50->height = height;
HXDLIN( 170)				this50->imageType = ( (int)(imageType) );
HXDLIN( 170)				undoImage = this50;
HXDLIN( 170)				{
HXLINE( 170)					int rectLeft = xIter3->start;
HXDLIN( 170)					int rectTop = yIter3->start;
HXDLIN( 170)					int rectRight = xIter3->max;
HXDLIN( 170)					bool forceClear = false;
HXDLIN( 170)					{
HXLINE( 170)						int _g16 = rectTop;
HXDLIN( 170)						int _g17 = yIter3->max;
HXDLIN( 170)						while((_g16 < _g17)){
HXLINE( 170)							_g16 = (_g16 + 1);
HXDLIN( 170)							int dy1 = (_g16 - 1);
HXDLIN( 170)							{
HXLINE( 170)								int _g18 = rectLeft;
HXDLIN( 170)								int _g19 = rectRight;
HXDLIN( 170)								while((_g18 < _g19)){
HXLINE( 170)									_g18 = (_g18 + 1);
HXDLIN( 170)									int dx1 = (_g18 - 1);
HXDLIN( 170)									::Dynamic this52 = this1->image;
HXDLIN( 170)									int index4;
HXDLIN( 170)									if (this1->useVirtualPos) {
HXLINE( 170)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx1) - this1->virtualX));
            									}
            									else {
HXLINE( 170)										index4 = ::Std_obj::_hx_int(( (Float)(((dy1 * this1->width) + dx1)) ));
            									}
HXDLIN( 170)									int c4 = ::iterMagic::Iimg_obj::get(this52,index4);
HXDLIN( 170)									int col;
HXDLIN( 170)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)										col = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            									}
            									else {
HXLINE( 170)										col = c4;
            									}
HXDLIN( 170)									bool _hx_tmp12;
HXDLIN( 170)									if (this1->useMask) {
HXLINE( 170)										_hx_tmp12 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXLINE( 170)										_hx_tmp12 = false;
            									}
HXDLIN( 170)									if (_hx_tmp12) {
HXLINE( 170)										 ::pi_xy::ImageStruct this53 = this1->mask;
HXDLIN( 170)										::Dynamic this54 = this53->image;
HXDLIN( 170)										int index5;
HXDLIN( 170)										if (this53->useVirtualPos) {
HXLINE( 170)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this53->virtualY) * ( (Float)(this53->width) )) + dx1) - this53->virtualX));
            										}
            										else {
HXLINE( 170)											index5 = ::Std_obj::_hx_int(( (Float)(((dy1 * this53->width) + dx1)) ));
            										}
HXDLIN( 170)										int c5 = ::iterMagic::Iimg_obj::get(this54,index5);
HXDLIN( 170)										int v1;
HXDLIN( 170)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)											v1 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            										}
            										else {
HXLINE( 170)											v1 = c5;
            										}
HXDLIN( 170)										int maskPixel = v1;
HXDLIN( 170)										int this55 = col;
HXDLIN( 170)										if ((maskPixel == 0)) {
HXLINE( 170)											col = this55;
            										}
            										else {
HXLINE( 170)											Float m0;
HXDLIN( 170)											int this56 = ((maskPixel >> 24) & 255);
HXDLIN( 170)											if ((this56 == 0)) {
HXLINE( 170)												m0 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m0 = (( (Float)(this56) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float m1;
HXDLIN( 170)											int this57 = ((maskPixel >> 16) & 255);
HXDLIN( 170)											if ((this57 == 0)) {
HXLINE( 170)												m1 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m1 = (( (Float)(this57) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float m2;
HXDLIN( 170)											int this58 = ((maskPixel >> 8) & 255);
HXDLIN( 170)											if ((this58 == 0)) {
HXLINE( 170)												m2 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m2 = (( (Float)(this58) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float m3;
HXDLIN( 170)											int this59 = (maskPixel & 255);
HXDLIN( 170)											if ((this59 == 0)) {
HXLINE( 170)												m3 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m3 = (( (Float)(this59) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this55 >> 24) & 255)) )));
HXDLIN( 170)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this55 >> 16) & 255)) )));
HXDLIN( 170)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this55 >> 8) & 255)) )));
HXDLIN( 170)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this55 & 255)) )));
HXDLIN( 170)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 170)									if ((col != 0)) {
HXLINE( 170)										int x5 = (dx1 - rectLeft);
HXDLIN( 170)										int y5 = (dy1 - rectTop);
HXDLIN( 170)										int c6 = col;
HXDLIN( 170)										bool _hx_tmp13;
HXDLIN( 170)										if ((((c6 >> 24) & 255) < 254)) {
HXLINE( 170)											_hx_tmp13 = undoImage->transparent;
            										}
            										else {
HXLINE( 170)											_hx_tmp13 = false;
            										}
HXDLIN( 170)										if (_hx_tmp13) {
HXLINE( 170)											int location4;
HXDLIN( 170)											if (undoImage->useVirtualPos) {
HXLINE( 170)												location4 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x5) - undoImage->virtualX));
            											}
            											else {
HXLINE( 170)												location4 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage->width) + x5)) ));
            											}
HXDLIN( 170)											int this60 = ::iterMagic::Iimg_obj::get(undoImage->image,location4);
HXDLIN( 170)											int this61;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												this61 = ((((((this60 >> 24) & 255) << 24) | ((this60 & 255) << 16)) | (((this60 >> 8) & 255) << 8)) | ((this60 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												this61 = this60;
            											}
HXDLIN( 170)											Float a14;
HXDLIN( 170)											int this62 = ((this61 >> 24) & 255);
HXDLIN( 170)											if ((this62 == 0)) {
HXLINE( 170)												a14 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a14 = (( (Float)(this62) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r14;
HXDLIN( 170)											int this63 = ((this61 >> 16) & 255);
HXDLIN( 170)											if ((this63 == 0)) {
HXLINE( 170)												r14 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r14 = (( (Float)(this63) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g14;
HXDLIN( 170)											int this64 = ((this61 >> 8) & 255);
HXDLIN( 170)											if ((this64 == 0)) {
HXLINE( 170)												g14 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g14 = (( (Float)(this64) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b14;
HXDLIN( 170)											int this65 = (this61 & 255);
HXDLIN( 170)											if ((this65 == 0)) {
HXLINE( 170)												b14 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b14 = (( (Float)(this65) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a24;
HXDLIN( 170)											int this66 = ((col >> 24) & 255);
HXDLIN( 170)											if ((this66 == 0)) {
HXLINE( 170)												a24 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a24 = (( (Float)(this66) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r24;
HXDLIN( 170)											int this67 = ((col >> 16) & 255);
HXDLIN( 170)											if ((this67 == 0)) {
HXLINE( 170)												r24 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r24 = (( (Float)(this67) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g24;
HXDLIN( 170)											int this68 = ((col >> 8) & 255);
HXDLIN( 170)											if ((this68 == 0)) {
HXLINE( 170)												g24 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g24 = (( (Float)(this68) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b24;
HXDLIN( 170)											int this69 = (col & 255);
HXDLIN( 170)											if ((this69 == 0)) {
HXLINE( 170)												b24 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b24 = (( (Float)(this69) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a34 = (a14 * (( (Float)(1) ) - a24));
HXDLIN( 170)											int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 170)											int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 170)											int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a34) + (b24 * a24))));
HXDLIN( 170)											int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 170)											int blended4 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b9);
HXDLIN( 170)											{
HXLINE( 170)												int _hx_tmp14;
HXDLIN( 170)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)													_hx_tmp14 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            												}
            												else {
HXLINE( 170)													_hx_tmp14 = blended4;
            												}
HXDLIN( 170)												::iterMagic::Iimg_obj::set(undoImage->image,location4,_hx_tmp14);
            											}
            										}
            										else {
HXLINE( 170)											::Dynamic this70 = undoImage->image;
HXDLIN( 170)											int index6;
HXDLIN( 170)											if (undoImage->useVirtualPos) {
HXLINE( 170)												index6 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x5) - undoImage->virtualX));
            											}
            											else {
HXLINE( 170)												index6 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage->width) + x5)) ));
            											}
HXDLIN( 170)											int _hx_tmp15;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												_hx_tmp15 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												_hx_tmp15 = c6;
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this70,index6,_hx_tmp15);
            										}
            									}
            									else {
HXLINE( 170)										if (forceClear) {
HXLINE( 170)											::Dynamic this71 = undoImage->image;
HXDLIN( 170)											int x6 = (dx1 - rectLeft);
HXDLIN( 170)											int y6 = (dy1 - rectTop);
HXDLIN( 170)											int index7;
HXDLIN( 170)											if (undoImage->useVirtualPos) {
HXLINE( 170)												index7 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x6) - undoImage->virtualX));
            											}
            											else {
HXLINE( 170)												index7 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage->width) + x6)) ));
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this71,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 170)			bool found = false;
HXDLIN( 170)			Float min4 = ( (Float)(0) );
HXDLIN( 170)			Float max = ( (Float)(0) );
HXDLIN( 170)			int a10 = 0;
HXDLIN( 170)			int r7 = 0;
HXDLIN( 170)			int g7 = 0;
HXDLIN( 170)			int b10 = 0;
HXDLIN( 170)			{
HXLINE( 170)				int _g_min = xIter3->start;
HXDLIN( 170)				int _g_max = xIter3->max;
HXDLIN( 170)				while((_g_min < _g_max)){
HXLINE( 170)					_g_min = (_g_min + 1);
HXDLIN( 170)					int px1 = (_g_min - 1);
HXDLIN( 170)					Float pcx = (( (Float)(px1) ) - cx);
HXLINE( 812)					found = false;
HXLINE( 170)					{
HXLINE( 170)						int _g_min1 = yIter3->start;
HXDLIN( 170)						int _g_max1 = yIter3->max;
HXDLIN( 170)						while((_g_min1 < _g_max1)){
HXLINE( 170)							_g_min1 = (_g_min1 + 1);
HXDLIN( 170)							int py1 = (_g_min1 - 1);
HXDLIN( 170)							Float pcy = (( (Float)(py1) ) - cy);
HXDLIN( 170)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 170)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 170)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 170)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 170)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 170)							bool _hx_tmp16;
HXDLIN( 170)							bool _hx_tmp17;
HXDLIN( 170)							if ((ratioA >= 0)) {
HXLINE( 170)								_hx_tmp17 = (ratioB >= 0);
            							}
            							else {
HXLINE( 170)								_hx_tmp17 = false;
            							}
HXDLIN( 170)							if (_hx_tmp17) {
HXLINE( 170)								_hx_tmp16 = (ratioC >= 0);
            							}
            							else {
HXLINE( 170)								_hx_tmp16 = false;
            							}
HXDLIN( 170)							if (_hx_tmp16) {
HXLINE( 170)								int i14 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 170)								if ((i14 > 255)) {
HXLINE(  24)									i14 = 255;
            								}
HXLINE( 170)								if ((i14 < 0)) {
HXLINE(  25)									i14 = 0;
            								}
HXLINE( 821)								r7 = i14;
HXLINE( 170)								int i15 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 170)								if ((i15 > 255)) {
HXLINE(  24)									i15 = 255;
            								}
HXLINE( 170)								if ((i15 < 0)) {
HXLINE(  25)									i15 = 0;
            								}
HXLINE( 822)								g7 = i15;
HXLINE( 170)								int i16 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 170)								if ((i16 > 255)) {
HXLINE(  24)									i16 = 255;
            								}
HXLINE( 170)								if ((i16 < 0)) {
HXLINE(  25)									i16 = 0;
            								}
HXLINE( 823)								b10 = i16;
HXLINE( 170)								bool _hx_tmp18;
HXDLIN( 170)								bool _hx_tmp19;
HXDLIN( 170)								if ((softAB == true)) {
HXLINE( 170)									_hx_tmp19 = (softBC == false);
            								}
            								else {
HXLINE( 170)									_hx_tmp19 = false;
            								}
HXDLIN( 170)								if (_hx_tmp19) {
HXLINE( 170)									_hx_tmp18 = false;
            								}
            								else {
HXLINE( 170)									_hx_tmp18 = false;
            								}
HXDLIN( 170)								if (_hx_tmp18) {
HXLINE( 170)									if ((ratioA < ratioC)) {
HXLINE( 170)										min4 = ratioA;
            									}
            									else {
HXLINE( 170)										min4 = ratioC;
            									}
HXDLIN( 170)									if ((ratioA > ratioB)) {
HXLINE( 170)										max = ratioA;
            									}
            									else {
HXLINE( 170)										max = ratioB;
            									}
HXDLIN( 170)									if (!((max > ratioC))) {
HXLINE( 170)										max = ratioC;
            									}
HXLINE( 829)									max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE( 170)									if (!((min4 < max))) {
HXLINE( 170)										min4 = ((max + min4) / ( (Float)(2) ));
            									}
HXDLIN( 170)									int i17 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN( 170)									if ((i17 > 255)) {
HXLINE(  24)										i17 = 255;
            									}
HXLINE( 170)									if ((i17 < 0)) {
HXLINE(  25)										i17 = 0;
            									}
HXLINE( 832)									a10 = i17;
HXLINE( 170)									{
HXLINE( 170)										int location5;
HXDLIN( 170)										if (this1->useVirtualPos) {
HXLINE( 170)											location5 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            										}
            										else {
HXLINE( 170)											location5 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            										}
HXDLIN( 170)										bool _hx_tmp20;
HXDLIN( 170)										if (this1->transparent) {
HXLINE( 170)											_hx_tmp20 = (a10 < 254);
            										}
            										else {
HXLINE( 170)											_hx_tmp20 = false;
            										}
HXDLIN( 170)										if (_hx_tmp20) {
HXLINE( 170)											int this72 = ::iterMagic::Iimg_obj::get(this1->image,location5);
HXDLIN( 170)											int old;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												old = ((((((this72 >> 24) & 255) << 24) | ((this72 & 255) << 16)) | (((this72 >> 8) & 255) << 8)) | ((this72 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												old = this72;
            											}
HXDLIN( 170)											int rhs = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b10);
HXDLIN( 170)											Float a15;
HXDLIN( 170)											int this73 = ((old >> 24) & 255);
HXDLIN( 170)											if ((this73 == 0)) {
HXLINE( 170)												a15 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a15 = (( (Float)(this73) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r15;
HXDLIN( 170)											int this74 = ((old >> 16) & 255);
HXDLIN( 170)											if ((this74 == 0)) {
HXLINE( 170)												r15 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r15 = (( (Float)(this74) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g15;
HXDLIN( 170)											int this75 = ((old >> 8) & 255);
HXDLIN( 170)											if ((this75 == 0)) {
HXLINE( 170)												g15 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g15 = (( (Float)(this75) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b15;
HXDLIN( 170)											int this76 = (old & 255);
HXDLIN( 170)											if ((this76 == 0)) {
HXLINE( 170)												b15 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b15 = (( (Float)(this76) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a25;
HXDLIN( 170)											int this77 = ((rhs >> 24) & 255);
HXDLIN( 170)											if ((this77 == 0)) {
HXLINE( 170)												a25 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a25 = (( (Float)(this77) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r25;
HXDLIN( 170)											int this78 = ((rhs >> 16) & 255);
HXDLIN( 170)											if ((this78 == 0)) {
HXLINE( 170)												r25 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r25 = (( (Float)(this78) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g25;
HXDLIN( 170)											int this79 = ((rhs >> 8) & 255);
HXDLIN( 170)											if ((this79 == 0)) {
HXLINE( 170)												g25 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g25 = (( (Float)(this79) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b25;
HXDLIN( 170)											int this80 = (rhs & 255);
HXDLIN( 170)											if ((this80 == 0)) {
HXLINE( 170)												b25 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b25 = (( (Float)(this80) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a35 = (a15 * (( (Float)(1) ) - a25));
HXDLIN( 170)											int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 170)											int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 170)											int b16 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a35) + (b25 * a25))));
HXDLIN( 170)											int a16 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 170)											int blended5 = ((((a16 << 24) | (r8 << 16)) | (g8 << 8)) | b16);
HXDLIN( 170)											{
HXLINE( 170)												int _hx_tmp21;
HXDLIN( 170)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)													_hx_tmp21 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            												}
            												else {
HXLINE( 170)													_hx_tmp21 = blended5;
            												}
HXDLIN( 170)												::iterMagic::Iimg_obj::set(this1->image,location5,_hx_tmp21);
            											}
            										}
            										else {
HXLINE( 170)											int value;
HXDLIN( 170)											if (this1->isLittle) {
HXLINE( 170)												value = ((((a10 << 24) | (b10 << 16)) | (g7 << 8)) | r7);
            											}
            											else {
HXLINE( 170)												value = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b10);
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this1->image,location5,value);
            										}
            									}
            								}
HXDLIN( 170)								bool _hx_tmp22;
HXDLIN( 170)								if ((softAB == true)) {
HXLINE( 170)									_hx_tmp22 = (softBC == true);
            								}
            								else {
HXLINE( 170)									_hx_tmp22 = false;
            								}
HXDLIN( 170)								if (_hx_tmp22) {
HXLINE( 170)									if ((ratioB < ratioC)) {
HXLINE( 170)										min4 = ratioB;
            									}
            									else {
HXLINE( 170)										min4 = ratioC;
            									}
HXDLIN( 170)									if ((ratioA > ratioB)) {
HXLINE( 170)										max = ratioA;
            									}
            									else {
HXLINE( 170)										max = ratioB;
            									}
HXDLIN( 170)									if (!((max > ratioC))) {
HXLINE( 170)										max = ratioC;
            									}
HXLINE( 842)									max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE( 170)									if (!((min4 < max))) {
HXLINE( 170)										min4 = ((max + min4) / ( (Float)(2) ));
            									}
HXDLIN( 170)									int i18 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN( 170)									if ((i18 > 255)) {
HXLINE(  24)										i18 = 255;
            									}
HXLINE( 170)									if ((i18 < 0)) {
HXLINE(  25)										i18 = 0;
            									}
HXLINE( 845)									a10 = i18;
HXLINE( 170)									{
HXLINE( 170)										int location6;
HXDLIN( 170)										if (this1->useVirtualPos) {
HXLINE( 170)											location6 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            										}
            										else {
HXLINE( 170)											location6 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            										}
HXDLIN( 170)										bool _hx_tmp23;
HXDLIN( 170)										if (this1->transparent) {
HXLINE( 170)											_hx_tmp23 = (a10 < 254);
            										}
            										else {
HXLINE( 170)											_hx_tmp23 = false;
            										}
HXDLIN( 170)										if (_hx_tmp23) {
HXLINE( 170)											int this81 = ::iterMagic::Iimg_obj::get(this1->image,location6);
HXDLIN( 170)											int old1;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												old1 = ((((((this81 >> 24) & 255) << 24) | ((this81 & 255) << 16)) | (((this81 >> 8) & 255) << 8)) | ((this81 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												old1 = this81;
            											}
HXDLIN( 170)											int rhs1 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b10);
HXDLIN( 170)											Float a17;
HXDLIN( 170)											int this82 = ((old1 >> 24) & 255);
HXDLIN( 170)											if ((this82 == 0)) {
HXLINE( 170)												a17 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a17 = (( (Float)(this82) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r16;
HXDLIN( 170)											int this83 = ((old1 >> 16) & 255);
HXDLIN( 170)											if ((this83 == 0)) {
HXLINE( 170)												r16 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r16 = (( (Float)(this83) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g16;
HXDLIN( 170)											int this84 = ((old1 >> 8) & 255);
HXDLIN( 170)											if ((this84 == 0)) {
HXLINE( 170)												g16 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g16 = (( (Float)(this84) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b17;
HXDLIN( 170)											int this85 = (old1 & 255);
HXDLIN( 170)											if ((this85 == 0)) {
HXLINE( 170)												b17 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b17 = (( (Float)(this85) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a26;
HXDLIN( 170)											int this86 = ((rhs1 >> 24) & 255);
HXDLIN( 170)											if ((this86 == 0)) {
HXLINE( 170)												a26 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a26 = (( (Float)(this86) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r26;
HXDLIN( 170)											int this87 = ((rhs1 >> 16) & 255);
HXDLIN( 170)											if ((this87 == 0)) {
HXLINE( 170)												r26 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r26 = (( (Float)(this87) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g26;
HXDLIN( 170)											int this88 = ((rhs1 >> 8) & 255);
HXDLIN( 170)											if ((this88 == 0)) {
HXLINE( 170)												g26 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g26 = (( (Float)(this88) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b26;
HXDLIN( 170)											int this89 = (rhs1 & 255);
HXDLIN( 170)											if ((this89 == 0)) {
HXLINE( 170)												b26 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b26 = (( (Float)(this89) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a36 = (a17 * (( (Float)(1) ) - a26));
HXDLIN( 170)											int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN( 170)											int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN( 170)											int b18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b17 * a36) + (b26 * a26))));
HXDLIN( 170)											int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN( 170)											int blended6 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b18);
HXDLIN( 170)											{
HXLINE( 170)												int _hx_tmp24;
HXDLIN( 170)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)													_hx_tmp24 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            												}
            												else {
HXLINE( 170)													_hx_tmp24 = blended6;
            												}
HXDLIN( 170)												::iterMagic::Iimg_obj::set(this1->image,location6,_hx_tmp24);
            											}
            										}
            										else {
HXLINE( 170)											int value1;
HXDLIN( 170)											if (this1->isLittle) {
HXLINE( 170)												value1 = ((((a10 << 24) | (b10 << 16)) | (g7 << 8)) | r7);
            											}
            											else {
HXLINE( 170)												value1 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b10);
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this1->image,location6,value1);
            										}
            									}
            								}
HXLINE( 850)								found = true;
            							}
            							else {
HXLINE( 170)								if (found) {
HXLINE( 170)									goto _hx_goto_201;
            								}
            							}
            						}
            						_hx_goto_201:;
            					}
            				}
            			}
HXDLIN( 170)			if ((hasHit == false)) {
HXLINE( 170)				 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXDLIN( 170)				if (hasUndo) {
HXLINE( 170)					v2->undoImage = undoImage;
HXDLIN( 170)					v2->undoX = xIter3->start;
HXDLIN( 170)					v2->undoY = yIter3->start;
            				}
            			}
            		}
HXDLIN( 170)		{
HXLINE( 170)			bool hasUndo1 = true;
HXDLIN( 170)			int aA1 = ((color >> 24) & 255);
HXDLIN( 170)			int rA1 = ((color >> 16) & 255);
HXDLIN( 170)			int gA1 = ((color >> 8) & 255);
HXDLIN( 170)			int bA1 = (color & 255);
HXDLIN( 170)			Float bcx1 = (cx - ax);
HXDLIN( 170)			Float bcy1 = (cy - ay);
HXDLIN( 170)			Float acx1 = (dx - ax);
HXDLIN( 170)			Float acy1 = (dy - ay);
HXDLIN( 170)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 170)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 170)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 170)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 170)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 170)			if ((dx > cx)) {
HXLINE( 170)				if ((dx > ax)) {
HXLINE( 170)					int min5;
HXDLIN( 170)					if ((cx > ax)) {
HXLINE( 170)						min5 = ::Math_obj::floor(ax);
            					}
            					else {
HXLINE( 170)						min5 = ::Math_obj::floor(cx);
            					}
HXDLIN( 170)					int ii_min16 = min5;
HXDLIN( 170)					int ii_max16 = ::Math_obj::ceil(dx);
HXDLIN( 170)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            				}
            				else {
HXLINE( 170)					int ii_min17 = ::Math_obj::floor(cx);
HXDLIN( 170)					int ii_max17 = ::Math_obj::ceil(ax);
HXDLIN( 170)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            				}
            			}
            			else {
HXLINE( 170)				if ((cx > ax)) {
HXLINE( 170)					int min6;
HXDLIN( 170)					if ((dx > ax)) {
HXLINE( 170)						min6 = ::Math_obj::floor(ax);
            					}
            					else {
HXLINE( 170)						min6 = ::Math_obj::ceil(dx);
            					}
HXDLIN( 170)					int ii_min18 = min6;
HXDLIN( 170)					int ii_max18 = ::Math_obj::ceil(cx);
HXDLIN( 170)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            				}
            				else {
HXLINE( 170)					int ii_min19 = ::Math_obj::floor(dx);
HXDLIN( 170)					int ii_max19 = ::Math_obj::ceil(ax);
HXDLIN( 170)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            				}
            			}
HXDLIN( 170)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 170)			if ((dy > cy)) {
HXLINE( 170)				if ((dy > ay)) {
HXLINE( 170)					int min7;
HXDLIN( 170)					if ((cy > ay)) {
HXLINE( 170)						min7 = ::Math_obj::floor(ay);
            					}
            					else {
HXLINE( 170)						min7 = ::Math_obj::floor(cy);
            					}
HXDLIN( 170)					int ii_min20 = min7;
HXDLIN( 170)					int ii_max20 = ::Math_obj::ceil(dy);
HXDLIN( 170)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            				}
            				else {
HXLINE( 170)					int ii_min21 = ::Math_obj::floor(cy);
HXDLIN( 170)					int ii_max21 = ::Math_obj::ceil(ay);
HXDLIN( 170)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            				}
            			}
            			else {
HXLINE( 170)				if ((cy > ay)) {
HXLINE( 170)					int min8;
HXDLIN( 170)					if ((dy > ay)) {
HXLINE( 170)						min8 = ::Math_obj::floor(ay);
            					}
            					else {
HXLINE( 170)						min8 = ::Math_obj::ceil(dy);
            					}
HXDLIN( 170)					int ii_min22 = min8;
HXDLIN( 170)					int ii_max22 = ::Math_obj::ceil(cy);
HXDLIN( 170)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            				}
            				else {
HXLINE( 170)					int ii_min23 = ::Math_obj::floor(dy);
HXDLIN( 170)					int ii_max23 = ::Math_obj::ceil(ay);
HXDLIN( 170)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            				}
            			}
HXDLIN( 170)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 170)			if (hasUndo1) {
HXLINE( 170)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 170)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 170)				 ::Dynamic imageType1 = null();
HXDLIN( 170)				 ::pi_xy::ImageStruct this90 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 170)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 170)				::Dynamic undoImage4;
HXDLIN( 170)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXLINE( 170)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::BytesImg b19 = byt1;
HXDLIN( 170)						{
HXLINE( 170)							b19->width = width1;
HXDLIN( 170)							b19->height = height1;
HXDLIN( 170)							b19->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 170)							b19->data = ::haxe::io::Bytes_obj::alloc((b19->length * 4));
HXDLIN( 170)							{
HXLINE( 170)								int len2 = b19->length;
HXDLIN( 170)								int w1 = 0;
HXDLIN( 170)								{
HXLINE( 170)									int _g20 = 0;
HXDLIN( 170)									int _g21 = b19->height;
HXDLIN( 170)									while((_g20 < _g21)){
HXLINE( 170)										_g20 = (_g20 + 1);
HXDLIN( 170)										int y7 = (_g20 - 1);
HXDLIN( 170)										{
HXLINE( 170)											int _g22 = 0;
HXDLIN( 170)											int _g23 = b19->width;
HXDLIN( 170)											while((_g22 < _g23)){
HXLINE( 170)												_g22 = (_g22 + 1);
HXDLIN( 170)												int x7 = (_g22 - 1);
HXDLIN( 170)												{
HXLINE( 170)													w1 = (w1 + 1);
HXDLIN( 170)													b19->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 170)												{
HXLINE( 170)													w1 = (w1 + 1);
HXDLIN( 170)													b19->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 170)												{
HXLINE( 170)													w1 = (w1 + 1);
HXDLIN( 170)													b19->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 170)												{
HXLINE( 170)													w1 = (w1 + 1);
HXDLIN( 170)													b19->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 170)						undoImage4 = b19;
            					}
            					break;
            					case (int)1: {
HXLINE( 170)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::ArrIntImg a19 = arrI1;
HXDLIN( 170)						{
HXLINE( 170)							a19->width = width1;
HXDLIN( 170)							a19->height = height1;
HXDLIN( 170)							a19->data = ::Array_obj< int >::__new(0);
HXDLIN( 170)							a19->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 170)							{
HXLINE( 170)								int _g24 = 0;
HXDLIN( 170)								int _g25 = a19->length;
HXDLIN( 170)								while((_g24 < _g25)){
HXLINE( 170)									_g24 = (_g24 + 1);
HXDLIN( 170)									int i19 = (_g24 - 1);
HXDLIN( 170)									a19->data[i19] = 0;
            								}
            							}
            						}
HXDLIN( 170)						undoImage4 = a19;
            					}
            					break;
            					case (int)2: {
HXLINE( 170)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::U32ArrImg b20 = u32a1;
HXDLIN( 170)						{
HXLINE( 170)							b20->width = width1;
HXDLIN( 170)							b20->height = height1;
HXDLIN( 170)							b20->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 170)							int size1 = (b20->length * 4);
HXDLIN( 170)							b20->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 170)							{
HXLINE( 170)								int _g26 = 0;
HXDLIN( 170)								int _g27 = b20->length;
HXDLIN( 170)								while((_g26 < _g27)){
HXLINE( 170)									_g26 = (_g26 + 1);
HXDLIN( 170)									int i20 = (_g26 - 1);
HXDLIN( 170)									{
HXLINE( 170)										 ::haxe::io::ArrayBufferViewImpl this91 = b20->data;
HXDLIN( 170)										bool undoImage5;
HXDLIN( 170)										if ((i20 >= 0)) {
HXLINE( 170)											undoImage5 = (i20 < (this91->byteLength >> 2));
            										}
            										else {
HXLINE( 170)											undoImage5 = false;
            										}
HXDLIN( 170)										if (undoImage5) {
HXLINE( 170)											 ::haxe::io::Bytes _this1 = this91->bytes;
HXDLIN( 170)											int pos1 = ((i20 << 2) + this91->byteOffset);
HXDLIN( 170)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 170)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 170)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 170)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 170)						undoImage4 = b20;
            					}
            					break;
            					case (int)3: {
HXLINE( 170)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN( 170)						{
HXLINE( 170)							v3->width = width1;
HXDLIN( 170)							v3->height = height1;
HXDLIN( 170)							v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 170)							v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN( 170)							{
HXLINE( 170)								int _g28 = 0;
HXDLIN( 170)								int _g29 = v3->length;
HXDLIN( 170)								while((_g28 < _g29)){
HXLINE( 170)									_g28 = (_g28 + 1);
HXDLIN( 170)									int i21 = (_g28 - 1);
HXDLIN( 170)									v3->data->__unsafe_set(i21,0);
            								}
            							}
            						}
HXDLIN( 170)						undoImage4 = v3;
            					}
            					break;
            					case (int)4: {
HXLINE( 170)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::StackIntImg b27 = sInt1;
HXDLIN( 170)						{
HXLINE( 170)							b27->width = width1;
HXDLIN( 170)							b27->height = height1;
HXDLIN( 170)							b27->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 170)							b27->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 170)							{
HXLINE( 170)								int len3 = b27->length;
HXDLIN( 170)								 ::haxe::ds::GenericStack_Int d1 = b27->data;
HXDLIN( 170)								if (::hx::IsNull( d1->head )) {
HXLINE( 170)									int _g30 = 0;
HXDLIN( 170)									int _g31 = len3;
HXDLIN( 170)									while((_g30 < _g31)){
HXLINE( 170)										_g30 = (_g30 + 1);
HXDLIN( 170)										int i22 = (_g30 - 1);
HXDLIN( 170)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXLINE( 170)									int _g32 = 0;
HXDLIN( 170)									int _g33 = len3;
HXDLIN( 170)									while((_g32 < _g33)){
HXLINE( 170)										_g32 = (_g32 + 1);
HXDLIN( 170)										int i23 = (_g32 - 1);
HXDLIN( 170)										{
HXLINE( 170)											 ::haxe::ds::GenericCell_Int l1 = b27->data->head;
HXDLIN( 170)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 170)											{
HXLINE( 170)												int _g34 = 0;
HXDLIN( 170)												int _g35 = i23;
HXDLIN( 170)												while((_g34 < _g35)){
HXLINE( 170)													_g34 = (_g34 + 1);
HXDLIN( 170)													int i24 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE( 170)											if (::hx::IsNull( prev1 )) {
HXLINE( 170)												b27->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 170)												l1 = null();
            											}
            											else {
HXLINE( 170)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 170)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 170)						undoImage4 = b27;
            					}
            					break;
            				}
HXDLIN( 170)				this90->image = undoImage4;
HXDLIN( 170)				this90->width = width1;
HXDLIN( 170)				this90->height = height1;
HXDLIN( 170)				this90->imageType = ( (int)(imageType1) );
HXDLIN( 170)				undoImage3 = this90;
HXDLIN( 170)				{
HXLINE( 170)					int rectLeft1 = xIter31->start;
HXDLIN( 170)					int rectTop1 = yIter31->start;
HXDLIN( 170)					int rectRight1 = xIter31->max;
HXDLIN( 170)					bool forceClear1 = false;
HXDLIN( 170)					{
HXLINE( 170)						int _g36 = rectTop1;
HXDLIN( 170)						int _g37 = yIter31->max;
HXDLIN( 170)						while((_g36 < _g37)){
HXLINE( 170)							_g36 = (_g36 + 1);
HXDLIN( 170)							int dy2 = (_g36 - 1);
HXDLIN( 170)							{
HXLINE( 170)								int _g38 = rectLeft1;
HXDLIN( 170)								int _g39 = rectRight1;
HXDLIN( 170)								while((_g38 < _g39)){
HXLINE( 170)									_g38 = (_g38 + 1);
HXDLIN( 170)									int dx2 = (_g38 - 1);
HXDLIN( 170)									::Dynamic this92 = this1->image;
HXDLIN( 170)									int index8;
HXDLIN( 170)									if (this1->useVirtualPos) {
HXLINE( 170)										index8 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx2) - this1->virtualX));
            									}
            									else {
HXLINE( 170)										index8 = ::Std_obj::_hx_int(( (Float)(((dy2 * this1->width) + dx2)) ));
            									}
HXDLIN( 170)									int c7 = ::iterMagic::Iimg_obj::get(this92,index8);
HXDLIN( 170)									int col1;
HXDLIN( 170)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)										col1 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            									}
            									else {
HXLINE( 170)										col1 = c7;
            									}
HXDLIN( 170)									bool _hx_tmp25;
HXDLIN( 170)									if (this1->useMask) {
HXLINE( 170)										_hx_tmp25 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXLINE( 170)										_hx_tmp25 = false;
            									}
HXDLIN( 170)									if (_hx_tmp25) {
HXLINE( 170)										 ::pi_xy::ImageStruct this93 = this1->mask;
HXDLIN( 170)										::Dynamic this94 = this93->image;
HXDLIN( 170)										int index9;
HXDLIN( 170)										if (this93->useVirtualPos) {
HXLINE( 170)											index9 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this93->virtualY) * ( (Float)(this93->width) )) + dx2) - this93->virtualX));
            										}
            										else {
HXLINE( 170)											index9 = ::Std_obj::_hx_int(( (Float)(((dy2 * this93->width) + dx2)) ));
            										}
HXDLIN( 170)										int c8 = ::iterMagic::Iimg_obj::get(this94,index9);
HXDLIN( 170)										int v4;
HXDLIN( 170)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)											v4 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            										}
            										else {
HXLINE( 170)											v4 = c8;
            										}
HXDLIN( 170)										int maskPixel1 = v4;
HXDLIN( 170)										int this95 = col1;
HXDLIN( 170)										if ((maskPixel1 == 0)) {
HXLINE( 170)											col1 = this95;
            										}
            										else {
HXLINE( 170)											Float m01;
HXDLIN( 170)											int this96 = ((maskPixel1 >> 24) & 255);
HXDLIN( 170)											if ((this96 == 0)) {
HXLINE( 170)												m01 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m01 = (( (Float)(this96) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float m11;
HXDLIN( 170)											int this97 = ((maskPixel1 >> 16) & 255);
HXDLIN( 170)											if ((this97 == 0)) {
HXLINE( 170)												m11 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m11 = (( (Float)(this97) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float m21;
HXDLIN( 170)											int this98 = ((maskPixel1 >> 8) & 255);
HXDLIN( 170)											if ((this98 == 0)) {
HXLINE( 170)												m21 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m21 = (( (Float)(this98) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float m31;
HXDLIN( 170)											int this99 = (maskPixel1 & 255);
HXDLIN( 170)											if ((this99 == 0)) {
HXLINE( 170)												m31 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m31 = (( (Float)(this99) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this95 >> 24) & 255)) )));
HXDLIN( 170)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this95 >> 16) & 255)) )));
HXDLIN( 170)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this95 >> 8) & 255)) )));
HXDLIN( 170)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this95 & 255)) )));
HXDLIN( 170)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 170)									if ((col1 != 0)) {
HXLINE( 170)										int x8 = (dx2 - rectLeft1);
HXDLIN( 170)										int y8 = (dy2 - rectTop1);
HXDLIN( 170)										int c9 = col1;
HXDLIN( 170)										bool _hx_tmp26;
HXDLIN( 170)										if ((((c9 >> 24) & 255) < 254)) {
HXLINE( 170)											_hx_tmp26 = undoImage3->transparent;
            										}
            										else {
HXLINE( 170)											_hx_tmp26 = false;
            										}
HXDLIN( 170)										if (_hx_tmp26) {
HXLINE( 170)											int location7;
HXDLIN( 170)											if (undoImage3->useVirtualPos) {
HXLINE( 170)												location7 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x8) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 170)												location7 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage3->width) + x8)) ));
            											}
HXDLIN( 170)											int this100 = ::iterMagic::Iimg_obj::get(undoImage3->image,location7);
HXDLIN( 170)											int this101;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												this101 = ((((((this100 >> 24) & 255) << 24) | ((this100 & 255) << 16)) | (((this100 >> 8) & 255) << 8)) | ((this100 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												this101 = this100;
            											}
HXDLIN( 170)											Float a110;
HXDLIN( 170)											int this102 = ((this101 >> 24) & 255);
HXDLIN( 170)											if ((this102 == 0)) {
HXLINE( 170)												a110 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a110 = (( (Float)(this102) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r17;
HXDLIN( 170)											int this103 = ((this101 >> 16) & 255);
HXDLIN( 170)											if ((this103 == 0)) {
HXLINE( 170)												r17 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r17 = (( (Float)(this103) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g17;
HXDLIN( 170)											int this104 = ((this101 >> 8) & 255);
HXDLIN( 170)											if ((this104 == 0)) {
HXLINE( 170)												g17 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g17 = (( (Float)(this104) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b110;
HXDLIN( 170)											int this105 = (this101 & 255);
HXDLIN( 170)											if ((this105 == 0)) {
HXLINE( 170)												b110 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b110 = (( (Float)(this105) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a27;
HXDLIN( 170)											int this106 = ((col1 >> 24) & 255);
HXDLIN( 170)											if ((this106 == 0)) {
HXLINE( 170)												a27 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a27 = (( (Float)(this106) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r27;
HXDLIN( 170)											int this107 = ((col1 >> 16) & 255);
HXDLIN( 170)											if ((this107 == 0)) {
HXLINE( 170)												r27 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r27 = (( (Float)(this107) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g27;
HXDLIN( 170)											int this108 = ((col1 >> 8) & 255);
HXDLIN( 170)											if ((this108 == 0)) {
HXLINE( 170)												g27 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g27 = (( (Float)(this108) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b28;
HXDLIN( 170)											int this109 = (col1 & 255);
HXDLIN( 170)											if ((this109 == 0)) {
HXLINE( 170)												b28 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b28 = (( (Float)(this109) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a37 = (a110 * (( (Float)(1) ) - a27));
HXDLIN( 170)											int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN( 170)											int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN( 170)											int b29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a37) + (b28 * a27))));
HXDLIN( 170)											int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN( 170)											int blended7 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b29);
HXDLIN( 170)											{
HXLINE( 170)												int _hx_tmp27;
HXDLIN( 170)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)													_hx_tmp27 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            												}
            												else {
HXLINE( 170)													_hx_tmp27 = blended7;
            												}
HXDLIN( 170)												::iterMagic::Iimg_obj::set(undoImage3->image,location7,_hx_tmp27);
            											}
            										}
            										else {
HXLINE( 170)											::Dynamic this110 = undoImage3->image;
HXDLIN( 170)											int index10;
HXDLIN( 170)											if (undoImage3->useVirtualPos) {
HXLINE( 170)												index10 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x8) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 170)												index10 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage3->width) + x8)) ));
            											}
HXDLIN( 170)											int _hx_tmp28;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												_hx_tmp28 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												_hx_tmp28 = c9;
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this110,index10,_hx_tmp28);
            										}
            									}
            									else {
HXLINE( 170)										if (forceClear1) {
HXLINE( 170)											::Dynamic this111 = undoImage3->image;
HXDLIN( 170)											int x9 = (dx2 - rectLeft1);
HXDLIN( 170)											int y9 = (dy2 - rectTop1);
HXDLIN( 170)											int index11;
HXDLIN( 170)											if (undoImage3->useVirtualPos) {
HXLINE( 170)												index11 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x9) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 170)												index11 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage3->width) + x9)) ));
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this111,index11,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 170)			bool found1 = false;
HXDLIN( 170)			Float min9 = ( (Float)(0) );
HXDLIN( 170)			Float max1 = ( (Float)(0) );
HXDLIN( 170)			int a28 = 0;
HXDLIN( 170)			int r18 = 0;
HXDLIN( 170)			int g18 = 0;
HXDLIN( 170)			int b30 = 0;
HXDLIN( 170)			{
HXLINE( 170)				int _g_min2 = xIter31->start;
HXDLIN( 170)				int _g_max2 = xIter31->max;
HXDLIN( 170)				while((_g_min2 < _g_max2)){
HXLINE( 170)					_g_min2 = (_g_min2 + 1);
HXDLIN( 170)					int px2 = (_g_min2 - 1);
HXDLIN( 170)					Float pcx1 = (( (Float)(px2) ) - ax);
HXLINE( 812)					found1 = false;
HXLINE( 170)					{
HXLINE( 170)						int _g_min3 = yIter31->start;
HXDLIN( 170)						int _g_max3 = yIter31->max;
HXDLIN( 170)						while((_g_min3 < _g_max3)){
HXLINE( 170)							_g_min3 = (_g_min3 + 1);
HXDLIN( 170)							int py2 = (_g_min3 - 1);
HXDLIN( 170)							Float pcy1 = (( (Float)(py2) ) - ay);
HXDLIN( 170)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 170)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 170)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 170)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 170)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 170)							bool _hx_tmp29;
HXDLIN( 170)							bool _hx_tmp30;
HXDLIN( 170)							if ((ratioA1 >= 0)) {
HXLINE( 170)								_hx_tmp30 = (ratioB1 >= 0);
            							}
            							else {
HXLINE( 170)								_hx_tmp30 = false;
            							}
HXDLIN( 170)							if (_hx_tmp30) {
HXLINE( 170)								_hx_tmp29 = (ratioC1 >= 0);
            							}
            							else {
HXLINE( 170)								_hx_tmp29 = false;
            							}
HXDLIN( 170)							if (_hx_tmp29) {
HXLINE( 170)								int i25 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN( 170)								if ((i25 > 255)) {
HXLINE(  24)									i25 = 255;
            								}
HXLINE( 170)								if ((i25 < 0)) {
HXLINE(  25)									i25 = 0;
            								}
HXLINE( 821)								r18 = i25;
HXLINE( 170)								int i26 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN( 170)								if ((i26 > 255)) {
HXLINE(  24)									i26 = 255;
            								}
HXLINE( 170)								if ((i26 < 0)) {
HXLINE(  25)									i26 = 0;
            								}
HXLINE( 822)								g18 = i26;
HXLINE( 170)								int i27 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN( 170)								if ((i27 > 255)) {
HXLINE(  24)									i27 = 255;
            								}
HXLINE( 170)								if ((i27 < 0)) {
HXLINE(  25)									i27 = 0;
            								}
HXLINE( 823)								b30 = i27;
HXLINE( 170)								bool _hx_tmp31;
HXDLIN( 170)								if ((softCD == true)) {
HXLINE( 170)									_hx_tmp31 = (softDA == true);
            								}
            								else {
HXLINE( 170)									_hx_tmp31 = false;
            								}
HXDLIN( 170)								if (_hx_tmp31) {
HXLINE( 170)									if ((ratioA1 < ratioC1)) {
HXLINE( 170)										min9 = ratioA1;
            									}
            									else {
HXLINE( 170)										min9 = ratioC1;
            									}
HXDLIN( 170)									if ((ratioA1 > ratioB1)) {
HXLINE( 170)										max1 = ratioA1;
            									}
            									else {
HXLINE( 170)										max1 = ratioB1;
            									}
HXDLIN( 170)									if (!((max1 > ratioC1))) {
HXLINE( 170)										max1 = ratioC1;
            									}
HXLINE( 829)									max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE( 170)									if (!((min9 < max1))) {
HXLINE( 170)										min9 = ((max1 + min9) / ( (Float)(2) ));
            									}
HXDLIN( 170)									int i28 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN( 170)									if ((i28 > 255)) {
HXLINE(  24)										i28 = 255;
            									}
HXLINE( 170)									if ((i28 < 0)) {
HXLINE(  25)										i28 = 0;
            									}
HXLINE( 832)									a28 = i28;
HXLINE( 170)									{
HXLINE( 170)										int location8;
HXDLIN( 170)										if (this1->useVirtualPos) {
HXLINE( 170)											location8 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this1->virtualY) * ( (Float)(this1->width) )) + px2) - this1->virtualX));
            										}
            										else {
HXLINE( 170)											location8 = ::Std_obj::_hx_int(( (Float)(((py2 * this1->width) + px2)) ));
            										}
HXDLIN( 170)										bool _hx_tmp32;
HXDLIN( 170)										if (this1->transparent) {
HXLINE( 170)											_hx_tmp32 = (a28 < 254);
            										}
            										else {
HXLINE( 170)											_hx_tmp32 = false;
            										}
HXDLIN( 170)										if (_hx_tmp32) {
HXLINE( 170)											int this112 = ::iterMagic::Iimg_obj::get(this1->image,location8);
HXDLIN( 170)											int old2;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												old2 = ((((((this112 >> 24) & 255) << 24) | ((this112 & 255) << 16)) | (((this112 >> 8) & 255) << 8)) | ((this112 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												old2 = this112;
            											}
HXDLIN( 170)											int rhs2 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b30);
HXDLIN( 170)											Float a111;
HXDLIN( 170)											int this113 = ((old2 >> 24) & 255);
HXDLIN( 170)											if ((this113 == 0)) {
HXLINE( 170)												a111 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a111 = (( (Float)(this113) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r19;
HXDLIN( 170)											int this114 = ((old2 >> 16) & 255);
HXDLIN( 170)											if ((this114 == 0)) {
HXLINE( 170)												r19 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r19 = (( (Float)(this114) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g19;
HXDLIN( 170)											int this115 = ((old2 >> 8) & 255);
HXDLIN( 170)											if ((this115 == 0)) {
HXLINE( 170)												g19 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g19 = (( (Float)(this115) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b111;
HXDLIN( 170)											int this116 = (old2 & 255);
HXDLIN( 170)											if ((this116 == 0)) {
HXLINE( 170)												b111 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b111 = (( (Float)(this116) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a29;
HXDLIN( 170)											int this117 = ((rhs2 >> 24) & 255);
HXDLIN( 170)											if ((this117 == 0)) {
HXLINE( 170)												a29 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a29 = (( (Float)(this117) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r28;
HXDLIN( 170)											int this118 = ((rhs2 >> 16) & 255);
HXDLIN( 170)											if ((this118 == 0)) {
HXLINE( 170)												r28 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r28 = (( (Float)(this118) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g28;
HXDLIN( 170)											int this119 = ((rhs2 >> 8) & 255);
HXDLIN( 170)											if ((this119 == 0)) {
HXLINE( 170)												g28 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g28 = (( (Float)(this119) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b210;
HXDLIN( 170)											int this120 = (rhs2 & 255);
HXDLIN( 170)											if ((this120 == 0)) {
HXLINE( 170)												b210 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b210 = (( (Float)(this120) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a38 = (a111 * (( (Float)(1) ) - a29));
HXDLIN( 170)											int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a38) + (r28 * a29))));
HXDLIN( 170)											int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a38) + (g28 * a29))));
HXDLIN( 170)											int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a38) + (b210 * a29))));
HXDLIN( 170)											int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a29)));
HXDLIN( 170)											int blended8 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b31);
HXDLIN( 170)											{
HXLINE( 170)												int _hx_tmp33;
HXDLIN( 170)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)													_hx_tmp33 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            												}
            												else {
HXLINE( 170)													_hx_tmp33 = blended8;
            												}
HXDLIN( 170)												::iterMagic::Iimg_obj::set(this1->image,location8,_hx_tmp33);
            											}
            										}
            										else {
HXLINE( 170)											int value2;
HXDLIN( 170)											if (this1->isLittle) {
HXLINE( 170)												value2 = ((((a28 << 24) | (b30 << 16)) | (g18 << 8)) | r18);
            											}
            											else {
HXLINE( 170)												value2 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b30);
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this1->image,location8,value2);
            										}
            									}
            								}
HXDLIN( 170)								bool _hx_tmp34;
HXDLIN( 170)								bool _hx_tmp35;
HXDLIN( 170)								if ((softCD == true)) {
HXLINE( 170)									_hx_tmp35 = false;
            								}
            								else {
HXLINE( 170)									_hx_tmp35 = false;
            								}
HXDLIN( 170)								if (_hx_tmp35) {
HXLINE( 170)									_hx_tmp34 = (softDA == false);
            								}
            								else {
HXLINE( 170)									_hx_tmp34 = false;
            								}
HXDLIN( 170)								if (_hx_tmp34) {
HXLINE( 170)									if ((ratioB1 < ratioC1)) {
HXLINE( 170)										min9 = ratioB1;
            									}
            									else {
HXLINE( 170)										min9 = ratioC1;
            									}
HXDLIN( 170)									if ((ratioA1 > ratioB1)) {
HXLINE( 170)										max1 = ratioA1;
            									}
            									else {
HXLINE( 170)										max1 = ratioB1;
            									}
HXDLIN( 170)									if (!((max1 > ratioC1))) {
HXLINE( 170)										max1 = ratioC1;
            									}
HXLINE( 842)									max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE( 170)									if (!((min9 < max1))) {
HXLINE( 170)										min9 = ((max1 + min9) / ( (Float)(2) ));
            									}
HXDLIN( 170)									int i29 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN( 170)									if ((i29 > 255)) {
HXLINE(  24)										i29 = 255;
            									}
HXLINE( 170)									if ((i29 < 0)) {
HXLINE(  25)										i29 = 0;
            									}
HXLINE( 845)									a28 = i29;
HXLINE( 170)									{
HXLINE( 170)										int location9;
HXDLIN( 170)										if (this1->useVirtualPos) {
HXLINE( 170)											location9 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this1->virtualY) * ( (Float)(this1->width) )) + px2) - this1->virtualX));
            										}
            										else {
HXLINE( 170)											location9 = ::Std_obj::_hx_int(( (Float)(((py2 * this1->width) + px2)) ));
            										}
HXDLIN( 170)										bool _hx_tmp36;
HXDLIN( 170)										if (this1->transparent) {
HXLINE( 170)											_hx_tmp36 = (a28 < 254);
            										}
            										else {
HXLINE( 170)											_hx_tmp36 = false;
            										}
HXDLIN( 170)										if (_hx_tmp36) {
HXLINE( 170)											int this121 = ::iterMagic::Iimg_obj::get(this1->image,location9);
HXDLIN( 170)											int old3;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												old3 = ((((((this121 >> 24) & 255) << 24) | ((this121 & 255) << 16)) | (((this121 >> 8) & 255) << 8)) | ((this121 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												old3 = this121;
            											}
HXDLIN( 170)											int rhs3 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b30);
HXDLIN( 170)											Float a112;
HXDLIN( 170)											int this122 = ((old3 >> 24) & 255);
HXDLIN( 170)											if ((this122 == 0)) {
HXLINE( 170)												a112 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a112 = (( (Float)(this122) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r110;
HXDLIN( 170)											int this123 = ((old3 >> 16) & 255);
HXDLIN( 170)											if ((this123 == 0)) {
HXLINE( 170)												r110 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r110 = (( (Float)(this123) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g110;
HXDLIN( 170)											int this124 = ((old3 >> 8) & 255);
HXDLIN( 170)											if ((this124 == 0)) {
HXLINE( 170)												g110 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g110 = (( (Float)(this124) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b112;
HXDLIN( 170)											int this125 = (old3 & 255);
HXDLIN( 170)											if ((this125 == 0)) {
HXLINE( 170)												b112 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b112 = (( (Float)(this125) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a210;
HXDLIN( 170)											int this126 = ((rhs3 >> 24) & 255);
HXDLIN( 170)											if ((this126 == 0)) {
HXLINE( 170)												a210 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a210 = (( (Float)(this126) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r29;
HXDLIN( 170)											int this127 = ((rhs3 >> 16) & 255);
HXDLIN( 170)											if ((this127 == 0)) {
HXLINE( 170)												r29 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r29 = (( (Float)(this127) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g29;
HXDLIN( 170)											int this128 = ((rhs3 >> 8) & 255);
HXDLIN( 170)											if ((this128 == 0)) {
HXLINE( 170)												g29 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g29 = (( (Float)(this128) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b211;
HXDLIN( 170)											int this129 = (rhs3 & 255);
HXDLIN( 170)											if ((this129 == 0)) {
HXLINE( 170)												b211 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b211 = (( (Float)(this129) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a39 = (a112 * (( (Float)(1) ) - a210));
HXDLIN( 170)											int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a39) + (r29 * a210))));
HXDLIN( 170)											int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a39) + (g29 * a210))));
HXDLIN( 170)											int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a39) + (b211 * a210))));
HXDLIN( 170)											int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a210)));
HXDLIN( 170)											int blended9 = ((((a40 << 24) | (r30 << 16)) | (g30 << 8)) | b32);
HXDLIN( 170)											{
HXLINE( 170)												int _hx_tmp37;
HXDLIN( 170)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)													_hx_tmp37 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            												}
            												else {
HXLINE( 170)													_hx_tmp37 = blended9;
            												}
HXDLIN( 170)												::iterMagic::Iimg_obj::set(this1->image,location9,_hx_tmp37);
            											}
            										}
            										else {
HXLINE( 170)											int value3;
HXDLIN( 170)											if (this1->isLittle) {
HXLINE( 170)												value3 = ((((a28 << 24) | (b30 << 16)) | (g18 << 8)) | r18);
            											}
            											else {
HXLINE( 170)												value3 = ((((a28 << 24) | (r18 << 16)) | (g18 << 8)) | b30);
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this1->image,location9,value3);
            										}
            									}
            								}
HXLINE( 850)								found1 = true;
            							}
            							else {
HXLINE( 170)								if (found1) {
HXLINE( 170)									goto _hx_goto_213;
            								}
            							}
            						}
            						_hx_goto_213:;
            					}
            				}
            			}
HXDLIN( 170)			if ((hasHit == false)) {
HXLINE( 170)				 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,dx,dy,cx,cy,ax,ay,true);
HXDLIN( 170)				if (hasUndo1) {
HXLINE( 170)					v5->undoImage = undoImage3;
HXDLIN( 170)					v5->undoX = xIter31->start;
HXDLIN( 170)					v5->undoY = yIter31->start;
            				}
            			}
            		}
HXDLIN( 170)		{
HXLINE( 170)			bool hasUndo2 = true;
HXDLIN( 170)			int aA2 = ((color >> 24) & 255);
HXDLIN( 170)			int rA2 = ((color >> 16) & 255);
HXDLIN( 170)			int gA2 = ((color >> 8) & 255);
HXDLIN( 170)			int bA2 = (color & 255);
HXDLIN( 170)			Float bcx2 = (bx - dx);
HXDLIN( 170)			Float bcy2 = (by - dy);
HXDLIN( 170)			Float acx2 = (ax - dx);
HXDLIN( 170)			Float acy2 = (ay - dy);
HXDLIN( 170)			Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 170)			Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 170)			Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 170)			Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 170)			 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 170)			if ((ax > bx)) {
HXLINE( 170)				if ((ax > dx)) {
HXLINE( 170)					int min10;
HXDLIN( 170)					if ((bx > dx)) {
HXLINE( 170)						min10 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 170)						min10 = ::Math_obj::floor(bx);
            					}
HXDLIN( 170)					int ii_min24 = min10;
HXDLIN( 170)					int ii_max24 = ::Math_obj::ceil(ax);
HXDLIN( 170)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            				}
            				else {
HXLINE( 170)					int ii_min25 = ::Math_obj::floor(bx);
HXDLIN( 170)					int ii_max25 = ::Math_obj::ceil(dx);
HXDLIN( 170)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            				}
            			}
            			else {
HXLINE( 170)				if ((bx > dx)) {
HXLINE( 170)					int min11;
HXDLIN( 170)					if ((ax > dx)) {
HXLINE( 170)						min11 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 170)						min11 = ::Math_obj::ceil(ax);
            					}
HXDLIN( 170)					int ii_min26 = min11;
HXDLIN( 170)					int ii_max26 = ::Math_obj::ceil(bx);
HXDLIN( 170)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            				}
            				else {
HXLINE( 170)					int ii_min27 = ::Math_obj::floor(ax);
HXDLIN( 170)					int ii_max27 = ::Math_obj::ceil(dx);
HXDLIN( 170)					xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            				}
            			}
HXDLIN( 170)			 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 170)			if ((ay > by)) {
HXLINE( 170)				if ((ay > dy)) {
HXLINE( 170)					int min12;
HXDLIN( 170)					if ((by > dy)) {
HXLINE( 170)						min12 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 170)						min12 = ::Math_obj::floor(by);
            					}
HXDLIN( 170)					int ii_min28 = min12;
HXDLIN( 170)					int ii_max28 = ::Math_obj::ceil(ay);
HXDLIN( 170)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            				}
            				else {
HXLINE( 170)					int ii_min29 = ::Math_obj::floor(by);
HXDLIN( 170)					int ii_max29 = ::Math_obj::ceil(dy);
HXDLIN( 170)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            				}
            			}
            			else {
HXLINE( 170)				if ((by > dy)) {
HXLINE( 170)					int min13;
HXDLIN( 170)					if ((ay > dy)) {
HXLINE( 170)						min13 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 170)						min13 = ::Math_obj::ceil(ay);
            					}
HXDLIN( 170)					int ii_min30 = min13;
HXDLIN( 170)					int ii_max30 = ::Math_obj::ceil(by);
HXDLIN( 170)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            				}
            				else {
HXLINE( 170)					int ii_min31 = ::Math_obj::floor(ay);
HXDLIN( 170)					int ii_max31 = ::Math_obj::ceil(dy);
HXDLIN( 170)					yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            				}
            			}
HXDLIN( 170)			 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 170)			if (hasUndo2) {
HXLINE( 170)				int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 170)				int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 170)				 ::Dynamic imageType2 = null();
HXDLIN( 170)				 ::pi_xy::ImageStruct this130 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 170)				if (::hx::IsNull( imageType2 )) {
HXLINE(  54)					imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 170)				::Dynamic undoImage7;
HXDLIN( 170)				switch((int)(( (int)(imageType2) ))){
            					case (int)0: {
HXLINE( 170)						 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::BytesImg b33 = byt2;
HXDLIN( 170)						{
HXLINE( 170)							b33->width = width2;
HXDLIN( 170)							b33->height = height2;
HXDLIN( 170)							b33->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 170)							b33->data = ::haxe::io::Bytes_obj::alloc((b33->length * 4));
HXDLIN( 170)							{
HXLINE( 170)								int len4 = b33->length;
HXDLIN( 170)								int w2 = 0;
HXDLIN( 170)								{
HXLINE( 170)									int _g40 = 0;
HXDLIN( 170)									int _g41 = b33->height;
HXDLIN( 170)									while((_g40 < _g41)){
HXLINE( 170)										_g40 = (_g40 + 1);
HXDLIN( 170)										int y10 = (_g40 - 1);
HXDLIN( 170)										{
HXLINE( 170)											int _g42 = 0;
HXDLIN( 170)											int _g43 = b33->width;
HXDLIN( 170)											while((_g42 < _g43)){
HXLINE( 170)												_g42 = (_g42 + 1);
HXDLIN( 170)												int x10 = (_g42 - 1);
HXDLIN( 170)												{
HXLINE( 170)													w2 = (w2 + 1);
HXDLIN( 170)													b33->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 170)												{
HXLINE( 170)													w2 = (w2 + 1);
HXDLIN( 170)													b33->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 170)												{
HXLINE( 170)													w2 = (w2 + 1);
HXDLIN( 170)													b33->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 170)												{
HXLINE( 170)													w2 = (w2 + 1);
HXDLIN( 170)													b33->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 170)						undoImage7 = b33;
            					}
            					break;
            					case (int)1: {
HXLINE( 170)						 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::ArrIntImg a41 = arrI2;
HXDLIN( 170)						{
HXLINE( 170)							a41->width = width2;
HXDLIN( 170)							a41->height = height2;
HXDLIN( 170)							a41->data = ::Array_obj< int >::__new(0);
HXDLIN( 170)							a41->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 170)							{
HXLINE( 170)								int _g44 = 0;
HXDLIN( 170)								int _g45 = a41->length;
HXDLIN( 170)								while((_g44 < _g45)){
HXLINE( 170)									_g44 = (_g44 + 1);
HXDLIN( 170)									int i30 = (_g44 - 1);
HXDLIN( 170)									a41->data[i30] = 0;
            								}
            							}
            						}
HXDLIN( 170)						undoImage7 = a41;
            					}
            					break;
            					case (int)2: {
HXLINE( 170)						 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::U32ArrImg b34 = u32a2;
HXDLIN( 170)						{
HXLINE( 170)							b34->width = width2;
HXDLIN( 170)							b34->height = height2;
HXDLIN( 170)							b34->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 170)							int size2 = (b34->length * 4);
HXDLIN( 170)							b34->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 170)							{
HXLINE( 170)								int _g46 = 0;
HXDLIN( 170)								int _g47 = b34->length;
HXDLIN( 170)								while((_g46 < _g47)){
HXLINE( 170)									_g46 = (_g46 + 1);
HXDLIN( 170)									int i31 = (_g46 - 1);
HXDLIN( 170)									{
HXLINE( 170)										 ::haxe::io::ArrayBufferViewImpl this131 = b34->data;
HXDLIN( 170)										bool undoImage8;
HXDLIN( 170)										if ((i31 >= 0)) {
HXLINE( 170)											undoImage8 = (i31 < (this131->byteLength >> 2));
            										}
            										else {
HXLINE( 170)											undoImage8 = false;
            										}
HXDLIN( 170)										if (undoImage8) {
HXLINE( 170)											 ::haxe::io::Bytes _this2 = this131->bytes;
HXDLIN( 170)											int pos2 = ((i31 << 2) + this131->byteOffset);
HXDLIN( 170)											_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 170)											_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 170)											_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 170)											_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 170)						undoImage7 = b34;
            					}
            					break;
            					case (int)3: {
HXLINE( 170)						 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::VecIntImg v6 = vec2;
HXDLIN( 170)						{
HXLINE( 170)							v6->width = width2;
HXDLIN( 170)							v6->height = height2;
HXDLIN( 170)							v6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 170)							v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN( 170)							{
HXLINE( 170)								int _g48 = 0;
HXDLIN( 170)								int _g49 = v6->length;
HXDLIN( 170)								while((_g48 < _g49)){
HXLINE( 170)									_g48 = (_g48 + 1);
HXDLIN( 170)									int i32 = (_g48 - 1);
HXDLIN( 170)									v6->data->__unsafe_set(i32,0);
            								}
            							}
            						}
HXDLIN( 170)						undoImage7 = v6;
            					}
            					break;
            					case (int)4: {
HXLINE( 170)						 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::StackIntImg b35 = sInt2;
HXDLIN( 170)						{
HXLINE( 170)							b35->width = width2;
HXDLIN( 170)							b35->height = height2;
HXDLIN( 170)							b35->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 170)							b35->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 170)							{
HXLINE( 170)								int len5 = b35->length;
HXDLIN( 170)								 ::haxe::ds::GenericStack_Int d2 = b35->data;
HXDLIN( 170)								if (::hx::IsNull( d2->head )) {
HXLINE( 170)									int _g50 = 0;
HXDLIN( 170)									int _g51 = len5;
HXDLIN( 170)									while((_g50 < _g51)){
HXLINE( 170)										_g50 = (_g50 + 1);
HXDLIN( 170)										int i33 = (_g50 - 1);
HXDLIN( 170)										d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            									}
            								}
            								else {
HXLINE( 170)									int _g52 = 0;
HXDLIN( 170)									int _g53 = len5;
HXDLIN( 170)									while((_g52 < _g53)){
HXLINE( 170)										_g52 = (_g52 + 1);
HXDLIN( 170)										int i34 = (_g52 - 1);
HXDLIN( 170)										{
HXLINE( 170)											 ::haxe::ds::GenericCell_Int l2 = b35->data->head;
HXDLIN( 170)											 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 170)											{
HXLINE( 170)												int _g54 = 0;
HXDLIN( 170)												int _g55 = i34;
HXDLIN( 170)												while((_g54 < _g55)){
HXLINE( 170)													_g54 = (_g54 + 1);
HXDLIN( 170)													int i35 = (_g54 - 1);
HXLINE( 345)													prev2 = l2;
HXLINE( 346)													l2 = l2->next;
            												}
            											}
HXLINE( 170)											if (::hx::IsNull( prev2 )) {
HXLINE( 170)												b35->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 170)												l2 = null();
            											}
            											else {
HXLINE( 170)												prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 170)												l2 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 170)						undoImage7 = b35;
            					}
            					break;
            				}
HXDLIN( 170)				this130->image = undoImage7;
HXDLIN( 170)				this130->width = width2;
HXDLIN( 170)				this130->height = height2;
HXDLIN( 170)				this130->imageType = ( (int)(imageType2) );
HXDLIN( 170)				undoImage6 = this130;
HXDLIN( 170)				{
HXLINE( 170)					int rectLeft2 = xIter32->start;
HXDLIN( 170)					int rectTop2 = yIter32->start;
HXDLIN( 170)					int rectRight2 = xIter32->max;
HXDLIN( 170)					bool forceClear2 = false;
HXDLIN( 170)					{
HXLINE( 170)						int _g56 = rectTop2;
HXDLIN( 170)						int _g57 = yIter32->max;
HXDLIN( 170)						while((_g56 < _g57)){
HXLINE( 170)							_g56 = (_g56 + 1);
HXDLIN( 170)							int dy3 = (_g56 - 1);
HXDLIN( 170)							{
HXLINE( 170)								int _g58 = rectLeft2;
HXDLIN( 170)								int _g59 = rectRight2;
HXDLIN( 170)								while((_g58 < _g59)){
HXLINE( 170)									_g58 = (_g58 + 1);
HXDLIN( 170)									int dx3 = (_g58 - 1);
HXDLIN( 170)									::Dynamic this132 = this1->image;
HXDLIN( 170)									int index12;
HXDLIN( 170)									if (this1->useVirtualPos) {
HXLINE( 170)										index12 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx3) - this1->virtualX));
            									}
            									else {
HXLINE( 170)										index12 = ::Std_obj::_hx_int(( (Float)(((dy3 * this1->width) + dx3)) ));
            									}
HXDLIN( 170)									int c10 = ::iterMagic::Iimg_obj::get(this132,index12);
HXDLIN( 170)									int col2;
HXDLIN( 170)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)										col2 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            									}
            									else {
HXLINE( 170)										col2 = c10;
            									}
HXDLIN( 170)									bool _hx_tmp38;
HXDLIN( 170)									if (this1->useMask) {
HXLINE( 170)										_hx_tmp38 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXLINE( 170)										_hx_tmp38 = false;
            									}
HXDLIN( 170)									if (_hx_tmp38) {
HXLINE( 170)										 ::pi_xy::ImageStruct this133 = this1->mask;
HXDLIN( 170)										::Dynamic this134 = this133->image;
HXDLIN( 170)										int index13;
HXDLIN( 170)										if (this133->useVirtualPos) {
HXLINE( 170)											index13 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this133->virtualY) * ( (Float)(this133->width) )) + dx3) - this133->virtualX));
            										}
            										else {
HXLINE( 170)											index13 = ::Std_obj::_hx_int(( (Float)(((dy3 * this133->width) + dx3)) ));
            										}
HXDLIN( 170)										int c11 = ::iterMagic::Iimg_obj::get(this134,index13);
HXDLIN( 170)										int v7;
HXDLIN( 170)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)											v7 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            										}
            										else {
HXLINE( 170)											v7 = c11;
            										}
HXDLIN( 170)										int maskPixel2 = v7;
HXDLIN( 170)										int this135 = col2;
HXDLIN( 170)										if ((maskPixel2 == 0)) {
HXLINE( 170)											col2 = this135;
            										}
            										else {
HXLINE( 170)											Float m02;
HXDLIN( 170)											int this136 = ((maskPixel2 >> 24) & 255);
HXDLIN( 170)											if ((this136 == 0)) {
HXLINE( 170)												m02 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m02 = (( (Float)(this136) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float m12;
HXDLIN( 170)											int this137 = ((maskPixel2 >> 16) & 255);
HXDLIN( 170)											if ((this137 == 0)) {
HXLINE( 170)												m12 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m12 = (( (Float)(this137) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float m22;
HXDLIN( 170)											int this138 = ((maskPixel2 >> 8) & 255);
HXDLIN( 170)											if ((this138 == 0)) {
HXLINE( 170)												m22 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m22 = (( (Float)(this138) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float m32;
HXDLIN( 170)											int this139 = (maskPixel2 & 255);
HXDLIN( 170)											if ((this139 == 0)) {
HXLINE( 170)												m32 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m32 = (( (Float)(this139) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this135 >> 24) & 255)) )));
HXDLIN( 170)											int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this135 >> 16) & 255)) )));
HXDLIN( 170)											int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this135 >> 8) & 255)) )));
HXDLIN( 170)											int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this135 & 255)) )));
HXDLIN( 170)											col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 170)									if ((col2 != 0)) {
HXLINE( 170)										int x11 = (dx3 - rectLeft2);
HXDLIN( 170)										int y11 = (dy3 - rectTop2);
HXDLIN( 170)										int c12 = col2;
HXDLIN( 170)										bool _hx_tmp39;
HXDLIN( 170)										if ((((c12 >> 24) & 255) < 254)) {
HXLINE( 170)											_hx_tmp39 = undoImage6->transparent;
            										}
            										else {
HXLINE( 170)											_hx_tmp39 = false;
            										}
HXDLIN( 170)										if (_hx_tmp39) {
HXLINE( 170)											int location10;
HXDLIN( 170)											if (undoImage6->useVirtualPos) {
HXLINE( 170)												location10 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x11) - undoImage6->virtualX));
            											}
            											else {
HXLINE( 170)												location10 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage6->width) + x11)) ));
            											}
HXDLIN( 170)											int this140 = ::iterMagic::Iimg_obj::get(undoImage6->image,location10);
HXDLIN( 170)											int this141;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												this141 = ((((((this140 >> 24) & 255) << 24) | ((this140 & 255) << 16)) | (((this140 >> 8) & 255) << 8)) | ((this140 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												this141 = this140;
            											}
HXDLIN( 170)											Float a113;
HXDLIN( 170)											int this142 = ((this141 >> 24) & 255);
HXDLIN( 170)											if ((this142 == 0)) {
HXLINE( 170)												a113 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a113 = (( (Float)(this142) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r111;
HXDLIN( 170)											int this143 = ((this141 >> 16) & 255);
HXDLIN( 170)											if ((this143 == 0)) {
HXLINE( 170)												r111 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r111 = (( (Float)(this143) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g111;
HXDLIN( 170)											int this144 = ((this141 >> 8) & 255);
HXDLIN( 170)											if ((this144 == 0)) {
HXLINE( 170)												g111 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g111 = (( (Float)(this144) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b113;
HXDLIN( 170)											int this145 = (this141 & 255);
HXDLIN( 170)											if ((this145 == 0)) {
HXLINE( 170)												b113 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b113 = (( (Float)(this145) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a211;
HXDLIN( 170)											int this146 = ((col2 >> 24) & 255);
HXDLIN( 170)											if ((this146 == 0)) {
HXLINE( 170)												a211 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a211 = (( (Float)(this146) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r210;
HXDLIN( 170)											int this147 = ((col2 >> 16) & 255);
HXDLIN( 170)											if ((this147 == 0)) {
HXLINE( 170)												r210 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r210 = (( (Float)(this147) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g210;
HXDLIN( 170)											int this148 = ((col2 >> 8) & 255);
HXDLIN( 170)											if ((this148 == 0)) {
HXLINE( 170)												g210 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g210 = (( (Float)(this148) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b212;
HXDLIN( 170)											int this149 = (col2 & 255);
HXDLIN( 170)											if ((this149 == 0)) {
HXLINE( 170)												b212 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b212 = (( (Float)(this149) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN( 170)											int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a310) + (r210 * a211))));
HXDLIN( 170)											int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a310) + (g210 * a211))));
HXDLIN( 170)											int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a310) + (b212 * a211))));
HXDLIN( 170)											int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN( 170)											int blended10 = ((((a42 << 24) | (r31 << 16)) | (g31 << 8)) | b36);
HXDLIN( 170)											{
HXLINE( 170)												int _hx_tmp40;
HXDLIN( 170)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)													_hx_tmp40 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            												}
            												else {
HXLINE( 170)													_hx_tmp40 = blended10;
            												}
HXDLIN( 170)												::iterMagic::Iimg_obj::set(undoImage6->image,location10,_hx_tmp40);
            											}
            										}
            										else {
HXLINE( 170)											::Dynamic this150 = undoImage6->image;
HXDLIN( 170)											int index14;
HXDLIN( 170)											if (undoImage6->useVirtualPos) {
HXLINE( 170)												index14 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x11) - undoImage6->virtualX));
            											}
            											else {
HXLINE( 170)												index14 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage6->width) + x11)) ));
            											}
HXDLIN( 170)											int _hx_tmp41;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												_hx_tmp41 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												_hx_tmp41 = c12;
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this150,index14,_hx_tmp41);
            										}
            									}
            									else {
HXLINE( 170)										if (forceClear2) {
HXLINE( 170)											::Dynamic this151 = undoImage6->image;
HXDLIN( 170)											int x12 = (dx3 - rectLeft2);
HXDLIN( 170)											int y12 = (dy3 - rectTop2);
HXDLIN( 170)											int index15;
HXDLIN( 170)											if (undoImage6->useVirtualPos) {
HXLINE( 170)												index15 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x12) - undoImage6->virtualX));
            											}
            											else {
HXLINE( 170)												index15 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage6->width) + x12)) ));
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this151,index15,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 170)			bool found2 = false;
HXDLIN( 170)			Float min14 = ( (Float)(0) );
HXDLIN( 170)			Float max2 = ( (Float)(0) );
HXDLIN( 170)			int a43 = 0;
HXDLIN( 170)			int r32 = 0;
HXDLIN( 170)			int g32 = 0;
HXDLIN( 170)			int b37 = 0;
HXDLIN( 170)			{
HXLINE( 170)				int _g_min4 = xIter32->start;
HXDLIN( 170)				int _g_max4 = xIter32->max;
HXDLIN( 170)				while((_g_min4 < _g_max4)){
HXLINE( 170)					_g_min4 = (_g_min4 + 1);
HXDLIN( 170)					int px3 = (_g_min4 - 1);
HXDLIN( 170)					Float pcx2 = (( (Float)(px3) ) - dx);
HXLINE( 812)					found2 = false;
HXLINE( 170)					{
HXLINE( 170)						int _g_min5 = yIter32->start;
HXDLIN( 170)						int _g_max5 = yIter32->max;
HXDLIN( 170)						while((_g_min5 < _g_max5)){
HXLINE( 170)							_g_min5 = (_g_min5 + 1);
HXDLIN( 170)							int py3 = (_g_min5 - 1);
HXDLIN( 170)							Float pcy2 = (( (Float)(py3) ) - dy);
HXDLIN( 170)							Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 170)							Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 170)							Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 170)							Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 170)							Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 170)							bool _hx_tmp42;
HXDLIN( 170)							bool _hx_tmp43;
HXDLIN( 170)							if ((ratioA2 >= 0)) {
HXLINE( 170)								_hx_tmp43 = (ratioB2 >= 0);
            							}
            							else {
HXLINE( 170)								_hx_tmp43 = false;
            							}
HXDLIN( 170)							if (_hx_tmp43) {
HXLINE( 170)								_hx_tmp42 = (ratioC2 >= 0);
            							}
            							else {
HXLINE( 170)								_hx_tmp42 = false;
            							}
HXDLIN( 170)							if (_hx_tmp42) {
HXLINE( 170)								int i36 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN( 170)								if ((i36 > 255)) {
HXLINE(  24)									i36 = 255;
            								}
HXLINE( 170)								if ((i36 < 0)) {
HXLINE(  25)									i36 = 0;
            								}
HXLINE( 821)								r32 = i36;
HXLINE( 170)								int i37 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN( 170)								if ((i37 > 255)) {
HXLINE(  24)									i37 = 255;
            								}
HXLINE( 170)								if ((i37 < 0)) {
HXLINE(  25)									i37 = 0;
            								}
HXLINE( 822)								g32 = i37;
HXLINE( 170)								int i38 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN( 170)								if ((i38 > 255)) {
HXLINE(  24)									i38 = 255;
            								}
HXLINE( 170)								if ((i38 < 0)) {
HXLINE(  25)									i38 = 0;
            								}
HXLINE( 823)								b37 = i38;
HXLINE( 170)								bool _hx_tmp44;
HXDLIN( 170)								if ((softAB == true)) {
HXLINE( 170)									_hx_tmp44 = (softDA == true);
            								}
            								else {
HXLINE( 170)									_hx_tmp44 = false;
            								}
HXDLIN( 170)								if (_hx_tmp44) {
HXLINE( 170)									if ((ratioA2 < ratioC2)) {
HXLINE( 170)										min14 = ratioA2;
            									}
            									else {
HXLINE( 170)										min14 = ratioC2;
            									}
HXDLIN( 170)									if ((ratioA2 > ratioB2)) {
HXLINE( 170)										max2 = ratioA2;
            									}
            									else {
HXLINE( 170)										max2 = ratioB2;
            									}
HXDLIN( 170)									if (!((max2 > ratioC2))) {
HXLINE( 170)										max2 = ratioC2;
            									}
HXLINE( 829)									max2 = ((( (Float)(1) ) - max2) / ( (Float)(2) ));
HXLINE( 170)									if (!((min14 < max2))) {
HXLINE( 170)										min14 = ((max2 + min14) / ( (Float)(2) ));
            									}
HXDLIN( 170)									int i39 = ::Std_obj::_hx_int(((( (Float)(aA2) ) * soft) * min14));
HXDLIN( 170)									if ((i39 > 255)) {
HXLINE(  24)										i39 = 255;
            									}
HXLINE( 170)									if ((i39 < 0)) {
HXLINE(  25)										i39 = 0;
            									}
HXLINE( 832)									a43 = i39;
HXLINE( 170)									{
HXLINE( 170)										int location11;
HXDLIN( 170)										if (this1->useVirtualPos) {
HXLINE( 170)											location11 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this1->virtualY) * ( (Float)(this1->width) )) + px3) - this1->virtualX));
            										}
            										else {
HXLINE( 170)											location11 = ::Std_obj::_hx_int(( (Float)(((py3 * this1->width) + px3)) ));
            										}
HXDLIN( 170)										bool _hx_tmp45;
HXDLIN( 170)										if (this1->transparent) {
HXLINE( 170)											_hx_tmp45 = (a43 < 254);
            										}
            										else {
HXLINE( 170)											_hx_tmp45 = false;
            										}
HXDLIN( 170)										if (_hx_tmp45) {
HXLINE( 170)											int this152 = ::iterMagic::Iimg_obj::get(this1->image,location11);
HXDLIN( 170)											int old4;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												old4 = ((((((this152 >> 24) & 255) << 24) | ((this152 & 255) << 16)) | (((this152 >> 8) & 255) << 8)) | ((this152 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												old4 = this152;
            											}
HXDLIN( 170)											int rhs4 = ((((a43 << 24) | (r32 << 16)) | (g32 << 8)) | b37);
HXDLIN( 170)											Float a114;
HXDLIN( 170)											int this153 = ((old4 >> 24) & 255);
HXDLIN( 170)											if ((this153 == 0)) {
HXLINE( 170)												a114 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a114 = (( (Float)(this153) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r112;
HXDLIN( 170)											int this154 = ((old4 >> 16) & 255);
HXDLIN( 170)											if ((this154 == 0)) {
HXLINE( 170)												r112 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r112 = (( (Float)(this154) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g112;
HXDLIN( 170)											int this155 = ((old4 >> 8) & 255);
HXDLIN( 170)											if ((this155 == 0)) {
HXLINE( 170)												g112 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g112 = (( (Float)(this155) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b114;
HXDLIN( 170)											int this156 = (old4 & 255);
HXDLIN( 170)											if ((this156 == 0)) {
HXLINE( 170)												b114 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b114 = (( (Float)(this156) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a212;
HXDLIN( 170)											int this157 = ((rhs4 >> 24) & 255);
HXDLIN( 170)											if ((this157 == 0)) {
HXLINE( 170)												a212 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a212 = (( (Float)(this157) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r211;
HXDLIN( 170)											int this158 = ((rhs4 >> 16) & 255);
HXDLIN( 170)											if ((this158 == 0)) {
HXLINE( 170)												r211 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r211 = (( (Float)(this158) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g211;
HXDLIN( 170)											int this159 = ((rhs4 >> 8) & 255);
HXDLIN( 170)											if ((this159 == 0)) {
HXLINE( 170)												g211 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g211 = (( (Float)(this159) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b213;
HXDLIN( 170)											int this160 = (rhs4 & 255);
HXDLIN( 170)											if ((this160 == 0)) {
HXLINE( 170)												b213 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b213 = (( (Float)(this160) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN( 170)											int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a311) + (r211 * a212))));
HXDLIN( 170)											int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a311) + (g211 * a212))));
HXDLIN( 170)											int b38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a311) + (b213 * a212))));
HXDLIN( 170)											int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN( 170)											int blended11 = ((((a44 << 24) | (r33 << 16)) | (g33 << 8)) | b38);
HXDLIN( 170)											{
HXLINE( 170)												int _hx_tmp46;
HXDLIN( 170)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)													_hx_tmp46 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            												}
            												else {
HXLINE( 170)													_hx_tmp46 = blended11;
            												}
HXDLIN( 170)												::iterMagic::Iimg_obj::set(this1->image,location11,_hx_tmp46);
            											}
            										}
            										else {
HXLINE( 170)											int value4;
HXDLIN( 170)											if (this1->isLittle) {
HXLINE( 170)												value4 = ((((a43 << 24) | (b37 << 16)) | (g32 << 8)) | r32);
            											}
            											else {
HXLINE( 170)												value4 = ((((a43 << 24) | (r32 << 16)) | (g32 << 8)) | b37);
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this1->image,location11,value4);
            										}
            									}
            								}
HXDLIN( 170)								bool _hx_tmp47;
HXDLIN( 170)								bool _hx_tmp48;
HXDLIN( 170)								if ((softAB == true)) {
HXLINE( 170)									_hx_tmp48 = false;
            								}
            								else {
HXLINE( 170)									_hx_tmp48 = false;
            								}
HXDLIN( 170)								if (_hx_tmp48) {
HXLINE( 170)									_hx_tmp47 = (softDA == false);
            								}
            								else {
HXLINE( 170)									_hx_tmp47 = false;
            								}
HXDLIN( 170)								if (_hx_tmp47) {
HXLINE( 170)									if ((ratioB2 < ratioC2)) {
HXLINE( 170)										min14 = ratioB2;
            									}
            									else {
HXLINE( 170)										min14 = ratioC2;
            									}
HXDLIN( 170)									if ((ratioA2 > ratioB2)) {
HXLINE( 170)										max2 = ratioA2;
            									}
            									else {
HXLINE( 170)										max2 = ratioB2;
            									}
HXDLIN( 170)									if (!((max2 > ratioC2))) {
HXLINE( 170)										max2 = ratioC2;
            									}
HXLINE( 842)									max2 = ((( (Float)(1) ) - max2) / ( (Float)(2) ));
HXLINE( 170)									if (!((min14 < max2))) {
HXLINE( 170)										min14 = ((max2 + min14) / ( (Float)(2) ));
            									}
HXDLIN( 170)									int i40 = ::Std_obj::_hx_int(((( (Float)(aA2) ) * soft) * min14));
HXDLIN( 170)									if ((i40 > 255)) {
HXLINE(  24)										i40 = 255;
            									}
HXLINE( 170)									if ((i40 < 0)) {
HXLINE(  25)										i40 = 0;
            									}
HXLINE( 845)									a43 = i40;
HXLINE( 170)									{
HXLINE( 170)										int location12;
HXDLIN( 170)										if (this1->useVirtualPos) {
HXLINE( 170)											location12 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this1->virtualY) * ( (Float)(this1->width) )) + px3) - this1->virtualX));
            										}
            										else {
HXLINE( 170)											location12 = ::Std_obj::_hx_int(( (Float)(((py3 * this1->width) + px3)) ));
            										}
HXDLIN( 170)										bool _hx_tmp49;
HXDLIN( 170)										if (this1->transparent) {
HXLINE( 170)											_hx_tmp49 = (a43 < 254);
            										}
            										else {
HXLINE( 170)											_hx_tmp49 = false;
            										}
HXDLIN( 170)										if (_hx_tmp49) {
HXLINE( 170)											int this161 = ::iterMagic::Iimg_obj::get(this1->image,location12);
HXDLIN( 170)											int old5;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												old5 = ((((((this161 >> 24) & 255) << 24) | ((this161 & 255) << 16)) | (((this161 >> 8) & 255) << 8)) | ((this161 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												old5 = this161;
            											}
HXDLIN( 170)											int rhs5 = ((((a43 << 24) | (r32 << 16)) | (g32 << 8)) | b37);
HXDLIN( 170)											Float a115;
HXDLIN( 170)											int this162 = ((old5 >> 24) & 255);
HXDLIN( 170)											if ((this162 == 0)) {
HXLINE( 170)												a115 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a115 = (( (Float)(this162) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r113;
HXDLIN( 170)											int this163 = ((old5 >> 16) & 255);
HXDLIN( 170)											if ((this163 == 0)) {
HXLINE( 170)												r113 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r113 = (( (Float)(this163) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g113;
HXDLIN( 170)											int this164 = ((old5 >> 8) & 255);
HXDLIN( 170)											if ((this164 == 0)) {
HXLINE( 170)												g113 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g113 = (( (Float)(this164) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b115;
HXDLIN( 170)											int this165 = (old5 & 255);
HXDLIN( 170)											if ((this165 == 0)) {
HXLINE( 170)												b115 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b115 = (( (Float)(this165) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a213;
HXDLIN( 170)											int this166 = ((rhs5 >> 24) & 255);
HXDLIN( 170)											if ((this166 == 0)) {
HXLINE( 170)												a213 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a213 = (( (Float)(this166) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r212;
HXDLIN( 170)											int this167 = ((rhs5 >> 16) & 255);
HXDLIN( 170)											if ((this167 == 0)) {
HXLINE( 170)												r212 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r212 = (( (Float)(this167) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g212;
HXDLIN( 170)											int this168 = ((rhs5 >> 8) & 255);
HXDLIN( 170)											if ((this168 == 0)) {
HXLINE( 170)												g212 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g212 = (( (Float)(this168) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b214;
HXDLIN( 170)											int this169 = (rhs5 & 255);
HXDLIN( 170)											if ((this169 == 0)) {
HXLINE( 170)												b214 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b214 = (( (Float)(this169) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN( 170)											int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a312) + (r212 * a213))));
HXDLIN( 170)											int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a312) + (g212 * a213))));
HXDLIN( 170)											int b39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a312) + (b214 * a213))));
HXDLIN( 170)											int a45 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN( 170)											int blended12 = ((((a45 << 24) | (r34 << 16)) | (g34 << 8)) | b39);
HXDLIN( 170)											{
HXLINE( 170)												int _hx_tmp50;
HXDLIN( 170)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)													_hx_tmp50 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            												}
            												else {
HXLINE( 170)													_hx_tmp50 = blended12;
            												}
HXDLIN( 170)												::iterMagic::Iimg_obj::set(this1->image,location12,_hx_tmp50);
            											}
            										}
            										else {
HXLINE( 170)											int value5;
HXDLIN( 170)											if (this1->isLittle) {
HXLINE( 170)												value5 = ((((a43 << 24) | (b37 << 16)) | (g32 << 8)) | r32);
            											}
            											else {
HXLINE( 170)												value5 = ((((a43 << 24) | (r32 << 16)) | (g32 << 8)) | b37);
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this1->image,location12,value5);
            										}
            									}
            								}
HXLINE( 850)								found2 = true;
            							}
            							else {
HXLINE( 170)								if (found2) {
HXLINE( 170)									goto _hx_goto_225;
            								}
            							}
            						}
            						_hx_goto_225:;
            					}
            				}
            			}
HXDLIN( 170)			if ((hasHit == false)) {
HXLINE( 170)				 ::pi_xy::algo::HitTri v8 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,dx,dy,true);
HXDLIN( 170)				if (hasUndo2) {
HXLINE( 170)					v8->undoImage = undoImage6;
HXDLIN( 170)					v8->undoX = xIter32->start;
HXDLIN( 170)					v8->undoY = yIter32->start;
            				}
            			}
            		}
HXDLIN( 170)		{
HXLINE( 170)			bool hasUndo3 = true;
HXDLIN( 170)			int aA3 = ((color >> 24) & 255);
HXDLIN( 170)			int rA3 = ((color >> 16) & 255);
HXDLIN( 170)			int gA3 = ((color >> 8) & 255);
HXDLIN( 170)			int bA3 = (color & 255);
HXDLIN( 170)			Float bcx3 = (cx - dx);
HXDLIN( 170)			Float bcy3 = (cy - dy);
HXDLIN( 170)			Float acx3 = (bx - dx);
HXDLIN( 170)			Float acy3 = (by - dy);
HXDLIN( 170)			Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 170)			Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 170)			Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 170)			Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 170)			 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 170)			if ((bx > cx)) {
HXLINE( 170)				if ((bx > dx)) {
HXLINE( 170)					int min15;
HXDLIN( 170)					if ((cx > dx)) {
HXLINE( 170)						min15 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 170)						min15 = ::Math_obj::floor(cx);
            					}
HXDLIN( 170)					int ii_min32 = min15;
HXDLIN( 170)					int ii_max32 = ::Math_obj::ceil(bx);
HXDLIN( 170)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            				}
            				else {
HXLINE( 170)					int ii_min33 = ::Math_obj::floor(cx);
HXDLIN( 170)					int ii_max33 = ::Math_obj::ceil(dx);
HXDLIN( 170)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            				}
            			}
            			else {
HXLINE( 170)				if ((cx > dx)) {
HXLINE( 170)					int min16;
HXDLIN( 170)					if ((bx > dx)) {
HXLINE( 170)						min16 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 170)						min16 = ::Math_obj::ceil(bx);
            					}
HXDLIN( 170)					int ii_min34 = min16;
HXDLIN( 170)					int ii_max34 = ::Math_obj::ceil(cx);
HXDLIN( 170)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            				}
            				else {
HXLINE( 170)					int ii_min35 = ::Math_obj::floor(bx);
HXDLIN( 170)					int ii_max35 = ::Math_obj::ceil(dx);
HXDLIN( 170)					xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            				}
            			}
HXDLIN( 170)			 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 170)			if ((by > cy)) {
HXLINE( 170)				if ((by > dy)) {
HXLINE( 170)					int min17;
HXDLIN( 170)					if ((cy > dy)) {
HXLINE( 170)						min17 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 170)						min17 = ::Math_obj::floor(cy);
            					}
HXDLIN( 170)					int ii_min36 = min17;
HXDLIN( 170)					int ii_max36 = ::Math_obj::ceil(by);
HXDLIN( 170)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            				}
            				else {
HXLINE( 170)					int ii_min37 = ::Math_obj::floor(cy);
HXDLIN( 170)					int ii_max37 = ::Math_obj::ceil(dy);
HXDLIN( 170)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            				}
            			}
            			else {
HXLINE( 170)				if ((cy > dy)) {
HXLINE( 170)					int min18;
HXDLIN( 170)					if ((by > dy)) {
HXLINE( 170)						min18 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 170)						min18 = ::Math_obj::ceil(by);
            					}
HXDLIN( 170)					int ii_min38 = min18;
HXDLIN( 170)					int ii_max38 = ::Math_obj::ceil(cy);
HXDLIN( 170)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            				}
            				else {
HXLINE( 170)					int ii_min39 = ::Math_obj::floor(by);
HXDLIN( 170)					int ii_max39 = ::Math_obj::ceil(dy);
HXDLIN( 170)					yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            				}
            			}
HXDLIN( 170)			 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 170)			if (hasUndo3) {
HXLINE( 170)				int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 170)				int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 170)				 ::Dynamic imageType3 = null();
HXDLIN( 170)				 ::pi_xy::ImageStruct this170 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 170)				if (::hx::IsNull( imageType3 )) {
HXLINE(  54)					imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 170)				::Dynamic undoImage10;
HXDLIN( 170)				switch((int)(( (int)(imageType3) ))){
            					case (int)0: {
HXLINE( 170)						 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::BytesImg b40 = byt3;
HXDLIN( 170)						{
HXLINE( 170)							b40->width = width3;
HXDLIN( 170)							b40->height = height3;
HXDLIN( 170)							b40->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 170)							b40->data = ::haxe::io::Bytes_obj::alloc((b40->length * 4));
HXDLIN( 170)							{
HXLINE( 170)								int len6 = b40->length;
HXDLIN( 170)								int w3 = 0;
HXDLIN( 170)								{
HXLINE( 170)									int _g60 = 0;
HXDLIN( 170)									int _g61 = b40->height;
HXDLIN( 170)									while((_g60 < _g61)){
HXLINE( 170)										_g60 = (_g60 + 1);
HXDLIN( 170)										int y13 = (_g60 - 1);
HXDLIN( 170)										{
HXLINE( 170)											int _g62 = 0;
HXDLIN( 170)											int _g63 = b40->width;
HXDLIN( 170)											while((_g62 < _g63)){
HXLINE( 170)												_g62 = (_g62 + 1);
HXDLIN( 170)												int x13 = (_g62 - 1);
HXDLIN( 170)												{
HXLINE( 170)													w3 = (w3 + 1);
HXDLIN( 170)													b40->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 170)												{
HXLINE( 170)													w3 = (w3 + 1);
HXDLIN( 170)													b40->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 170)												{
HXLINE( 170)													w3 = (w3 + 1);
HXDLIN( 170)													b40->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 170)												{
HXLINE( 170)													w3 = (w3 + 1);
HXDLIN( 170)													b40->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 170)						undoImage10 = b40;
            					}
            					break;
            					case (int)1: {
HXLINE( 170)						 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::ArrIntImg a46 = arrI3;
HXDLIN( 170)						{
HXLINE( 170)							a46->width = width3;
HXDLIN( 170)							a46->height = height3;
HXDLIN( 170)							a46->data = ::Array_obj< int >::__new(0);
HXDLIN( 170)							a46->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 170)							{
HXLINE( 170)								int _g64 = 0;
HXDLIN( 170)								int _g65 = a46->length;
HXDLIN( 170)								while((_g64 < _g65)){
HXLINE( 170)									_g64 = (_g64 + 1);
HXDLIN( 170)									int i41 = (_g64 - 1);
HXDLIN( 170)									a46->data[i41] = 0;
            								}
            							}
            						}
HXDLIN( 170)						undoImage10 = a46;
            					}
            					break;
            					case (int)2: {
HXLINE( 170)						 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::U32ArrImg b41 = u32a3;
HXDLIN( 170)						{
HXLINE( 170)							b41->width = width3;
HXDLIN( 170)							b41->height = height3;
HXDLIN( 170)							b41->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 170)							int size3 = (b41->length * 4);
HXDLIN( 170)							b41->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 170)							{
HXLINE( 170)								int _g66 = 0;
HXDLIN( 170)								int _g67 = b41->length;
HXDLIN( 170)								while((_g66 < _g67)){
HXLINE( 170)									_g66 = (_g66 + 1);
HXDLIN( 170)									int i42 = (_g66 - 1);
HXDLIN( 170)									{
HXLINE( 170)										 ::haxe::io::ArrayBufferViewImpl this171 = b41->data;
HXDLIN( 170)										bool undoImage11;
HXDLIN( 170)										if ((i42 >= 0)) {
HXLINE( 170)											undoImage11 = (i42 < (this171->byteLength >> 2));
            										}
            										else {
HXLINE( 170)											undoImage11 = false;
            										}
HXDLIN( 170)										if (undoImage11) {
HXLINE( 170)											 ::haxe::io::Bytes _this3 = this171->bytes;
HXDLIN( 170)											int pos3 = ((i42 << 2) + this171->byteOffset);
HXDLIN( 170)											_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 170)											_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 170)											_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 170)											_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 170)						undoImage10 = b41;
            					}
            					break;
            					case (int)3: {
HXLINE( 170)						 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::VecIntImg v9 = vec3;
HXDLIN( 170)						{
HXLINE( 170)							v9->width = width3;
HXDLIN( 170)							v9->height = height3;
HXDLIN( 170)							v9->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 170)							v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN( 170)							{
HXLINE( 170)								int _g68 = 0;
HXDLIN( 170)								int _g69 = v9->length;
HXDLIN( 170)								while((_g68 < _g69)){
HXLINE( 170)									_g68 = (_g68 + 1);
HXDLIN( 170)									int i43 = (_g68 - 1);
HXDLIN( 170)									v9->data->__unsafe_set(i43,0);
            								}
            							}
            						}
HXDLIN( 170)						undoImage10 = v9;
            					}
            					break;
            					case (int)4: {
HXLINE( 170)						 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 170)						 ::iterMagic::StackIntImg b42 = sInt3;
HXDLIN( 170)						{
HXLINE( 170)							b42->width = width3;
HXDLIN( 170)							b42->height = height3;
HXDLIN( 170)							b42->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 170)							b42->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 170)							{
HXLINE( 170)								int len7 = b42->length;
HXDLIN( 170)								 ::haxe::ds::GenericStack_Int d3 = b42->data;
HXDLIN( 170)								if (::hx::IsNull( d3->head )) {
HXLINE( 170)									int _g70 = 0;
HXDLIN( 170)									int _g71 = len7;
HXDLIN( 170)									while((_g70 < _g71)){
HXLINE( 170)										_g70 = (_g70 + 1);
HXDLIN( 170)										int i44 = (_g70 - 1);
HXDLIN( 170)										d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            									}
            								}
            								else {
HXLINE( 170)									int _g72 = 0;
HXDLIN( 170)									int _g73 = len7;
HXDLIN( 170)									while((_g72 < _g73)){
HXLINE( 170)										_g72 = (_g72 + 1);
HXDLIN( 170)										int i45 = (_g72 - 1);
HXDLIN( 170)										{
HXLINE( 170)											 ::haxe::ds::GenericCell_Int l3 = b42->data->head;
HXDLIN( 170)											 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 170)											{
HXLINE( 170)												int _g74 = 0;
HXDLIN( 170)												int _g75 = i45;
HXDLIN( 170)												while((_g74 < _g75)){
HXLINE( 170)													_g74 = (_g74 + 1);
HXDLIN( 170)													int i46 = (_g74 - 1);
HXLINE( 345)													prev3 = l3;
HXLINE( 346)													l3 = l3->next;
            												}
            											}
HXLINE( 170)											if (::hx::IsNull( prev3 )) {
HXLINE( 170)												b42->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 170)												l3 = null();
            											}
            											else {
HXLINE( 170)												prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 170)												l3 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 170)						undoImage10 = b42;
            					}
            					break;
            				}
HXDLIN( 170)				this170->image = undoImage10;
HXDLIN( 170)				this170->width = width3;
HXDLIN( 170)				this170->height = height3;
HXDLIN( 170)				this170->imageType = ( (int)(imageType3) );
HXDLIN( 170)				undoImage9 = this170;
HXDLIN( 170)				{
HXLINE( 170)					int rectLeft3 = xIter33->start;
HXDLIN( 170)					int rectTop3 = yIter33->start;
HXDLIN( 170)					int rectRight3 = xIter33->max;
HXDLIN( 170)					bool forceClear3 = false;
HXDLIN( 170)					{
HXLINE( 170)						int _g76 = rectTop3;
HXDLIN( 170)						int _g77 = yIter33->max;
HXDLIN( 170)						while((_g76 < _g77)){
HXLINE( 170)							_g76 = (_g76 + 1);
HXDLIN( 170)							int dy4 = (_g76 - 1);
HXDLIN( 170)							{
HXLINE( 170)								int _g78 = rectLeft3;
HXDLIN( 170)								int _g79 = rectRight3;
HXDLIN( 170)								while((_g78 < _g79)){
HXLINE( 170)									_g78 = (_g78 + 1);
HXDLIN( 170)									int dx4 = (_g78 - 1);
HXDLIN( 170)									::Dynamic this172 = this1->image;
HXDLIN( 170)									int index16;
HXDLIN( 170)									if (this1->useVirtualPos) {
HXLINE( 170)										index16 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx4) - this1->virtualX));
            									}
            									else {
HXLINE( 170)										index16 = ::Std_obj::_hx_int(( (Float)(((dy4 * this1->width) + dx4)) ));
            									}
HXDLIN( 170)									int c13 = ::iterMagic::Iimg_obj::get(this172,index16);
HXDLIN( 170)									int col3;
HXDLIN( 170)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)										col3 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            									}
            									else {
HXLINE( 170)										col3 = c13;
            									}
HXDLIN( 170)									bool _hx_tmp51;
HXDLIN( 170)									if (this1->useMask) {
HXLINE( 170)										_hx_tmp51 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXLINE( 170)										_hx_tmp51 = false;
            									}
HXDLIN( 170)									if (_hx_tmp51) {
HXLINE( 170)										 ::pi_xy::ImageStruct this173 = this1->mask;
HXDLIN( 170)										::Dynamic this174 = this173->image;
HXDLIN( 170)										int index17;
HXDLIN( 170)										if (this173->useVirtualPos) {
HXLINE( 170)											index17 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this173->virtualY) * ( (Float)(this173->width) )) + dx4) - this173->virtualX));
            										}
            										else {
HXLINE( 170)											index17 = ::Std_obj::_hx_int(( (Float)(((dy4 * this173->width) + dx4)) ));
            										}
HXDLIN( 170)										int c14 = ::iterMagic::Iimg_obj::get(this174,index17);
HXDLIN( 170)										int v10;
HXDLIN( 170)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)											v10 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            										}
            										else {
HXLINE( 170)											v10 = c14;
            										}
HXDLIN( 170)										int maskPixel3 = v10;
HXDLIN( 170)										int this175 = col3;
HXDLIN( 170)										if ((maskPixel3 == 0)) {
HXLINE( 170)											col3 = this175;
            										}
            										else {
HXLINE( 170)											Float m03;
HXDLIN( 170)											int this176 = ((maskPixel3 >> 24) & 255);
HXDLIN( 170)											if ((this176 == 0)) {
HXLINE( 170)												m03 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m03 = (( (Float)(this176) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float m13;
HXDLIN( 170)											int this177 = ((maskPixel3 >> 16) & 255);
HXDLIN( 170)											if ((this177 == 0)) {
HXLINE( 170)												m13 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m13 = (( (Float)(this177) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float m23;
HXDLIN( 170)											int this178 = ((maskPixel3 >> 8) & 255);
HXDLIN( 170)											if ((this178 == 0)) {
HXLINE( 170)												m23 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m23 = (( (Float)(this178) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float m33;
HXDLIN( 170)											int this179 = (maskPixel3 & 255);
HXDLIN( 170)											if ((this179 == 0)) {
HXLINE( 170)												m33 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												m33 = (( (Float)(this179) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this175 >> 24) & 255)) )));
HXDLIN( 170)											int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this175 >> 16) & 255)) )));
HXDLIN( 170)											int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this175 >> 8) & 255)) )));
HXDLIN( 170)											int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this175 & 255)) )));
HXDLIN( 170)											col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 170)									if ((col3 != 0)) {
HXLINE( 170)										int x14 = (dx4 - rectLeft3);
HXDLIN( 170)										int y14 = (dy4 - rectTop3);
HXDLIN( 170)										int c15 = col3;
HXDLIN( 170)										bool _hx_tmp52;
HXDLIN( 170)										if ((((c15 >> 24) & 255) < 254)) {
HXLINE( 170)											_hx_tmp52 = undoImage9->transparent;
            										}
            										else {
HXLINE( 170)											_hx_tmp52 = false;
            										}
HXDLIN( 170)										if (_hx_tmp52) {
HXLINE( 170)											int location13;
HXDLIN( 170)											if (undoImage9->useVirtualPos) {
HXLINE( 170)												location13 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x14) - undoImage9->virtualX));
            											}
            											else {
HXLINE( 170)												location13 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage9->width) + x14)) ));
            											}
HXDLIN( 170)											int this180 = ::iterMagic::Iimg_obj::get(undoImage9->image,location13);
HXDLIN( 170)											int this181;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												this181 = ((((((this180 >> 24) & 255) << 24) | ((this180 & 255) << 16)) | (((this180 >> 8) & 255) << 8)) | ((this180 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												this181 = this180;
            											}
HXDLIN( 170)											Float a116;
HXDLIN( 170)											int this182 = ((this181 >> 24) & 255);
HXDLIN( 170)											if ((this182 == 0)) {
HXLINE( 170)												a116 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a116 = (( (Float)(this182) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r114;
HXDLIN( 170)											int this183 = ((this181 >> 16) & 255);
HXDLIN( 170)											if ((this183 == 0)) {
HXLINE( 170)												r114 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r114 = (( (Float)(this183) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g114;
HXDLIN( 170)											int this184 = ((this181 >> 8) & 255);
HXDLIN( 170)											if ((this184 == 0)) {
HXLINE( 170)												g114 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g114 = (( (Float)(this184) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b116;
HXDLIN( 170)											int this185 = (this181 & 255);
HXDLIN( 170)											if ((this185 == 0)) {
HXLINE( 170)												b116 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b116 = (( (Float)(this185) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a214;
HXDLIN( 170)											int this186 = ((col3 >> 24) & 255);
HXDLIN( 170)											if ((this186 == 0)) {
HXLINE( 170)												a214 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a214 = (( (Float)(this186) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r213;
HXDLIN( 170)											int this187 = ((col3 >> 16) & 255);
HXDLIN( 170)											if ((this187 == 0)) {
HXLINE( 170)												r213 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r213 = (( (Float)(this187) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g213;
HXDLIN( 170)											int this188 = ((col3 >> 8) & 255);
HXDLIN( 170)											if ((this188 == 0)) {
HXLINE( 170)												g213 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g213 = (( (Float)(this188) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b215;
HXDLIN( 170)											int this189 = (col3 & 255);
HXDLIN( 170)											if ((this189 == 0)) {
HXLINE( 170)												b215 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b215 = (( (Float)(this189) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN( 170)											int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a313) + (r213 * a214))));
HXDLIN( 170)											int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a313) + (g213 * a214))));
HXDLIN( 170)											int b43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a313) + (b215 * a214))));
HXDLIN( 170)											int a47 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN( 170)											int blended13 = ((((a47 << 24) | (r35 << 16)) | (g35 << 8)) | b43);
HXDLIN( 170)											{
HXLINE( 170)												int _hx_tmp53;
HXDLIN( 170)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)													_hx_tmp53 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            												}
            												else {
HXLINE( 170)													_hx_tmp53 = blended13;
            												}
HXDLIN( 170)												::iterMagic::Iimg_obj::set(undoImage9->image,location13,_hx_tmp53);
            											}
            										}
            										else {
HXLINE( 170)											::Dynamic this190 = undoImage9->image;
HXDLIN( 170)											int index18;
HXDLIN( 170)											if (undoImage9->useVirtualPos) {
HXLINE( 170)												index18 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x14) - undoImage9->virtualX));
            											}
            											else {
HXLINE( 170)												index18 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage9->width) + x14)) ));
            											}
HXDLIN( 170)											int _hx_tmp54;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												_hx_tmp54 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												_hx_tmp54 = c15;
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this190,index18,_hx_tmp54);
            										}
            									}
            									else {
HXLINE( 170)										if (forceClear3) {
HXLINE( 170)											::Dynamic this191 = undoImage9->image;
HXDLIN( 170)											int x15 = (dx4 - rectLeft3);
HXDLIN( 170)											int y15 = (dy4 - rectTop3);
HXDLIN( 170)											int index19;
HXDLIN( 170)											if (undoImage9->useVirtualPos) {
HXLINE( 170)												index19 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x15) - undoImage9->virtualX));
            											}
            											else {
HXLINE( 170)												index19 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage9->width) + x15)) ));
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this191,index19,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 170)			bool found3 = false;
HXDLIN( 170)			Float min19 = ( (Float)(0) );
HXDLIN( 170)			Float max3 = ( (Float)(0) );
HXDLIN( 170)			int a48 = 0;
HXDLIN( 170)			int r36 = 0;
HXDLIN( 170)			int g36 = 0;
HXDLIN( 170)			int b44 = 0;
HXDLIN( 170)			{
HXLINE( 170)				int _g_min6 = xIter33->start;
HXDLIN( 170)				int _g_max6 = xIter33->max;
HXDLIN( 170)				while((_g_min6 < _g_max6)){
HXLINE( 170)					_g_min6 = (_g_min6 + 1);
HXDLIN( 170)					int px4 = (_g_min6 - 1);
HXDLIN( 170)					Float pcx3 = (( (Float)(px4) ) - dx);
HXLINE( 812)					found3 = false;
HXLINE( 170)					{
HXLINE( 170)						int _g_min7 = yIter33->start;
HXDLIN( 170)						int _g_max7 = yIter33->max;
HXDLIN( 170)						while((_g_min7 < _g_max7)){
HXLINE( 170)							_g_min7 = (_g_min7 + 1);
HXDLIN( 170)							int py4 = (_g_min7 - 1);
HXDLIN( 170)							Float pcy3 = (( (Float)(py4) ) - dy);
HXDLIN( 170)							Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 170)							Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 170)							Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 170)							Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 170)							Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 170)							bool _hx_tmp55;
HXDLIN( 170)							bool _hx_tmp56;
HXDLIN( 170)							if ((ratioA3 >= 0)) {
HXLINE( 170)								_hx_tmp56 = (ratioB3 >= 0);
            							}
            							else {
HXLINE( 170)								_hx_tmp56 = false;
            							}
HXDLIN( 170)							if (_hx_tmp56) {
HXLINE( 170)								_hx_tmp55 = (ratioC3 >= 0);
            							}
            							else {
HXLINE( 170)								_hx_tmp55 = false;
            							}
HXDLIN( 170)							if (_hx_tmp55) {
HXLINE( 170)								int i47 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN( 170)								if ((i47 > 255)) {
HXLINE(  24)									i47 = 255;
            								}
HXLINE( 170)								if ((i47 < 0)) {
HXLINE(  25)									i47 = 0;
            								}
HXLINE( 821)								r36 = i47;
HXLINE( 170)								int i48 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN( 170)								if ((i48 > 255)) {
HXLINE(  24)									i48 = 255;
            								}
HXLINE( 170)								if ((i48 < 0)) {
HXLINE(  25)									i48 = 0;
            								}
HXLINE( 822)								g36 = i48;
HXLINE( 170)								int i49 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN( 170)								if ((i49 > 255)) {
HXLINE(  24)									i49 = 255;
            								}
HXLINE( 170)								if ((i49 < 0)) {
HXLINE(  25)									i49 = 0;
            								}
HXLINE( 823)								b44 = i49;
HXLINE( 170)								bool _hx_tmp57;
HXDLIN( 170)								bool _hx_tmp58;
HXDLIN( 170)								if ((softBC == true)) {
HXLINE( 170)									_hx_tmp58 = (softCD == false);
            								}
            								else {
HXLINE( 170)									_hx_tmp58 = false;
            								}
HXDLIN( 170)								if (_hx_tmp58) {
HXLINE( 170)									_hx_tmp57 = false;
            								}
            								else {
HXLINE( 170)									_hx_tmp57 = false;
            								}
HXDLIN( 170)								if (_hx_tmp57) {
HXLINE( 170)									if ((ratioA3 < ratioC3)) {
HXLINE( 170)										min19 = ratioA3;
            									}
            									else {
HXLINE( 170)										min19 = ratioC3;
            									}
HXDLIN( 170)									if ((ratioA3 > ratioB3)) {
HXLINE( 170)										max3 = ratioA3;
            									}
            									else {
HXLINE( 170)										max3 = ratioB3;
            									}
HXDLIN( 170)									if (!((max3 > ratioC3))) {
HXLINE( 170)										max3 = ratioC3;
            									}
HXLINE( 829)									max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE( 170)									if (!((min19 < max3))) {
HXLINE( 170)										min19 = ((max3 + min19) / ( (Float)(2) ));
            									}
HXDLIN( 170)									int i50 = ::Std_obj::_hx_int(((( (Float)(aA3) ) * soft) * min19));
HXDLIN( 170)									if ((i50 > 255)) {
HXLINE(  24)										i50 = 255;
            									}
HXLINE( 170)									if ((i50 < 0)) {
HXLINE(  25)										i50 = 0;
            									}
HXLINE( 832)									a48 = i50;
HXLINE( 170)									{
HXLINE( 170)										int location14;
HXDLIN( 170)										if (this1->useVirtualPos) {
HXLINE( 170)											location14 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - this1->virtualY) * ( (Float)(this1->width) )) + px4) - this1->virtualX));
            										}
            										else {
HXLINE( 170)											location14 = ::Std_obj::_hx_int(( (Float)(((py4 * this1->width) + px4)) ));
            										}
HXDLIN( 170)										bool _hx_tmp59;
HXDLIN( 170)										if (this1->transparent) {
HXLINE( 170)											_hx_tmp59 = (a48 < 254);
            										}
            										else {
HXLINE( 170)											_hx_tmp59 = false;
            										}
HXDLIN( 170)										if (_hx_tmp59) {
HXLINE( 170)											int this192 = ::iterMagic::Iimg_obj::get(this1->image,location14);
HXDLIN( 170)											int old6;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												old6 = ((((((this192 >> 24) & 255) << 24) | ((this192 & 255) << 16)) | (((this192 >> 8) & 255) << 8)) | ((this192 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												old6 = this192;
            											}
HXDLIN( 170)											int rhs6 = ((((a48 << 24) | (r36 << 16)) | (g36 << 8)) | b44);
HXDLIN( 170)											Float a117;
HXDLIN( 170)											int this193 = ((old6 >> 24) & 255);
HXDLIN( 170)											if ((this193 == 0)) {
HXLINE( 170)												a117 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a117 = (( (Float)(this193) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r115;
HXDLIN( 170)											int this194 = ((old6 >> 16) & 255);
HXDLIN( 170)											if ((this194 == 0)) {
HXLINE( 170)												r115 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r115 = (( (Float)(this194) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g115;
HXDLIN( 170)											int this195 = ((old6 >> 8) & 255);
HXDLIN( 170)											if ((this195 == 0)) {
HXLINE( 170)												g115 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g115 = (( (Float)(this195) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b117;
HXDLIN( 170)											int this196 = (old6 & 255);
HXDLIN( 170)											if ((this196 == 0)) {
HXLINE( 170)												b117 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b117 = (( (Float)(this196) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a215;
HXDLIN( 170)											int this197 = ((rhs6 >> 24) & 255);
HXDLIN( 170)											if ((this197 == 0)) {
HXLINE( 170)												a215 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a215 = (( (Float)(this197) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r214;
HXDLIN( 170)											int this198 = ((rhs6 >> 16) & 255);
HXDLIN( 170)											if ((this198 == 0)) {
HXLINE( 170)												r214 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r214 = (( (Float)(this198) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g214;
HXDLIN( 170)											int this199 = ((rhs6 >> 8) & 255);
HXDLIN( 170)											if ((this199 == 0)) {
HXLINE( 170)												g214 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g214 = (( (Float)(this199) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b216;
HXDLIN( 170)											int this200 = (rhs6 & 255);
HXDLIN( 170)											if ((this200 == 0)) {
HXLINE( 170)												b216 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b216 = (( (Float)(this200) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN( 170)											int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a314) + (r214 * a215))));
HXDLIN( 170)											int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a314) + (g214 * a215))));
HXDLIN( 170)											int b45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a314) + (b216 * a215))));
HXDLIN( 170)											int a49 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN( 170)											int blended14 = ((((a49 << 24) | (r37 << 16)) | (g37 << 8)) | b45);
HXDLIN( 170)											{
HXLINE( 170)												int _hx_tmp60;
HXDLIN( 170)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)													_hx_tmp60 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            												}
            												else {
HXLINE( 170)													_hx_tmp60 = blended14;
            												}
HXDLIN( 170)												::iterMagic::Iimg_obj::set(this1->image,location14,_hx_tmp60);
            											}
            										}
            										else {
HXLINE( 170)											int value6;
HXDLIN( 170)											if (this1->isLittle) {
HXLINE( 170)												value6 = ((((a48 << 24) | (b44 << 16)) | (g36 << 8)) | r36);
            											}
            											else {
HXLINE( 170)												value6 = ((((a48 << 24) | (r36 << 16)) | (g36 << 8)) | b44);
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this1->image,location14,value6);
            										}
            									}
            								}
HXDLIN( 170)								bool _hx_tmp61;
HXDLIN( 170)								if ((softBC == true)) {
HXLINE( 170)									_hx_tmp61 = (softCD == true);
            								}
            								else {
HXLINE( 170)									_hx_tmp61 = false;
            								}
HXDLIN( 170)								if (_hx_tmp61) {
HXLINE( 170)									if ((ratioB3 < ratioC3)) {
HXLINE( 170)										min19 = ratioB3;
            									}
            									else {
HXLINE( 170)										min19 = ratioC3;
            									}
HXDLIN( 170)									if ((ratioA3 > ratioB3)) {
HXLINE( 170)										max3 = ratioA3;
            									}
            									else {
HXLINE( 170)										max3 = ratioB3;
            									}
HXDLIN( 170)									if (!((max3 > ratioC3))) {
HXLINE( 170)										max3 = ratioC3;
            									}
HXLINE( 842)									max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE( 170)									if (!((min19 < max3))) {
HXLINE( 170)										min19 = ((max3 + min19) / ( (Float)(2) ));
            									}
HXDLIN( 170)									int i51 = ::Std_obj::_hx_int(((( (Float)(aA3) ) * soft) * min19));
HXDLIN( 170)									if ((i51 > 255)) {
HXLINE(  24)										i51 = 255;
            									}
HXLINE( 170)									if ((i51 < 0)) {
HXLINE(  25)										i51 = 0;
            									}
HXLINE( 845)									a48 = i51;
HXLINE( 170)									{
HXLINE( 170)										int location15;
HXDLIN( 170)										if (this1->useVirtualPos) {
HXLINE( 170)											location15 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - this1->virtualY) * ( (Float)(this1->width) )) + px4) - this1->virtualX));
            										}
            										else {
HXLINE( 170)											location15 = ::Std_obj::_hx_int(( (Float)(((py4 * this1->width) + px4)) ));
            										}
HXDLIN( 170)										bool _hx_tmp62;
HXDLIN( 170)										if (this1->transparent) {
HXLINE( 170)											_hx_tmp62 = (a48 < 254);
            										}
            										else {
HXLINE( 170)											_hx_tmp62 = false;
            										}
HXDLIN( 170)										if (_hx_tmp62) {
HXLINE( 170)											int this201 = ::iterMagic::Iimg_obj::get(this1->image,location15);
HXDLIN( 170)											int old7;
HXDLIN( 170)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)												old7 = ((((((this201 >> 24) & 255) << 24) | ((this201 & 255) << 16)) | (((this201 >> 8) & 255) << 8)) | ((this201 >> 16) & 255));
            											}
            											else {
HXLINE( 170)												old7 = this201;
            											}
HXDLIN( 170)											int rhs7 = ((((a48 << 24) | (r36 << 16)) | (g36 << 8)) | b44);
HXDLIN( 170)											Float a118;
HXDLIN( 170)											int this202 = ((old7 >> 24) & 255);
HXDLIN( 170)											if ((this202 == 0)) {
HXLINE( 170)												a118 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a118 = (( (Float)(this202) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r116;
HXDLIN( 170)											int this203 = ((old7 >> 16) & 255);
HXDLIN( 170)											if ((this203 == 0)) {
HXLINE( 170)												r116 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r116 = (( (Float)(this203) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g116;
HXDLIN( 170)											int this204 = ((old7 >> 8) & 255);
HXDLIN( 170)											if ((this204 == 0)) {
HXLINE( 170)												g116 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g116 = (( (Float)(this204) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b118;
HXDLIN( 170)											int this205 = (old7 & 255);
HXDLIN( 170)											if ((this205 == 0)) {
HXLINE( 170)												b118 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b118 = (( (Float)(this205) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a216;
HXDLIN( 170)											int this206 = ((rhs7 >> 24) & 255);
HXDLIN( 170)											if ((this206 == 0)) {
HXLINE( 170)												a216 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												a216 = (( (Float)(this206) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float r215;
HXDLIN( 170)											int this207 = ((rhs7 >> 16) & 255);
HXDLIN( 170)											if ((this207 == 0)) {
HXLINE( 170)												r215 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												r215 = (( (Float)(this207) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float g215;
HXDLIN( 170)											int this208 = ((rhs7 >> 8) & 255);
HXDLIN( 170)											if ((this208 == 0)) {
HXLINE( 170)												g215 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												g215 = (( (Float)(this208) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float b217;
HXDLIN( 170)											int this209 = (rhs7 & 255);
HXDLIN( 170)											if ((this209 == 0)) {
HXLINE( 170)												b217 = ((Float)0.);
            											}
            											else {
HXLINE( 170)												b217 = (( (Float)(this209) ) / ( (Float)(255) ));
            											}
HXDLIN( 170)											Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN( 170)											int r38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a315) + (r215 * a216))));
HXDLIN( 170)											int g38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a315) + (g215 * a216))));
HXDLIN( 170)											int b46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a315) + (b217 * a216))));
HXDLIN( 170)											int a50 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN( 170)											int blended15 = ((((a50 << 24) | (r38 << 16)) | (g38 << 8)) | b46);
HXDLIN( 170)											{
HXLINE( 170)												int _hx_tmp63;
HXDLIN( 170)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 170)													_hx_tmp63 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            												}
            												else {
HXLINE( 170)													_hx_tmp63 = blended15;
            												}
HXDLIN( 170)												::iterMagic::Iimg_obj::set(this1->image,location15,_hx_tmp63);
            											}
            										}
            										else {
HXLINE( 170)											int value7;
HXDLIN( 170)											if (this1->isLittle) {
HXLINE( 170)												value7 = ((((a48 << 24) | (b44 << 16)) | (g36 << 8)) | r36);
            											}
            											else {
HXLINE( 170)												value7 = ((((a48 << 24) | (r36 << 16)) | (g36 << 8)) | b44);
            											}
HXDLIN( 170)											::iterMagic::Iimg_obj::set(this1->image,location15,value7);
            										}
            									}
            								}
HXLINE( 850)								found3 = true;
            							}
            							else {
HXLINE( 170)								if (found3) {
HXLINE( 170)									goto _hx_goto_237;
            								}
            							}
            						}
            						_hx_goto_237:;
            					}
            				}
            			}
HXDLIN( 170)			if ((hasHit == false)) {
HXLINE( 170)				 ::pi_xy::algo::HitTri v11 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,cx,cy,dx,dy,true);
HXDLIN( 170)				if (hasUndo3) {
HXLINE( 170)					v11->undoImage = undoImage9;
HXDLIN( 170)					v11->undoX = xIter33->start;
HXDLIN( 170)					v11->undoY = yIter33->start;
            				}
            			}
            		}
HXDLIN( 170)		if ((hasHit == true)) {
HXLINE( 170)			 ::pi_xy::algo::HitQuad v12 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 170)			return v12;
            		}
            		else {
HXLINE( 170)			return null();
            		}
HXDLIN( 170)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC14(SoftShape_Impl__obj,lineLuxury,return )

 ::pi_xy::algo::HitTri SoftShape_Impl__obj::triangle( ::pi_xy::ImageStruct this1,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,Float soft3,::hx::Null< bool >  __o_softAB,::hx::Null< bool >  __o_softBC,::hx::Null< bool >  __o_softCA,::hx::Null< bool >  __o_hasHit){
            		bool softAB = __o_softAB.Default(true);
            		bool softBC = __o_softBC.Default(true);
            		bool softCA = __o_softCA.Default(true);
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_197_triangle)
HXDLIN( 197)		bool hasUndo = true;
HXDLIN( 197)		int aA = ((color >> 24) & 255);
HXDLIN( 197)		int rA = ((color >> 16) & 255);
HXDLIN( 197)		int gA = ((color >> 8) & 255);
HXDLIN( 197)		int bA = (color & 255);
HXDLIN( 197)		Float bcx = (bx - cx);
HXDLIN( 197)		Float bcy = (by - cy);
HXDLIN( 197)		Float acx = (ax - cx);
HXDLIN( 197)		Float acy = (ay - cy);
HXDLIN( 197)		Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 197)		Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 197)		Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 197)		Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 197)		 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 197)		if ((ax > bx)) {
HXDLIN( 197)			if ((ax > cx)) {
HXDLIN( 197)				int min;
HXDLIN( 197)				if ((bx > cx)) {
HXDLIN( 197)					min = ::Math_obj::floor(cx);
            				}
            				else {
HXDLIN( 197)					min = ::Math_obj::floor(bx);
            				}
HXDLIN( 197)				int ii_min = min;
HXDLIN( 197)				int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 197)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            			}
            			else {
HXDLIN( 197)				int ii_min1 = ::Math_obj::floor(bx);
HXDLIN( 197)				int ii_max1 = ::Math_obj::ceil(cx);
HXDLIN( 197)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            			}
            		}
            		else {
HXDLIN( 197)			if ((bx > cx)) {
HXDLIN( 197)				int min1;
HXDLIN( 197)				if ((ax > cx)) {
HXDLIN( 197)					min1 = ::Math_obj::floor(cx);
            				}
            				else {
HXDLIN( 197)					min1 = ::Math_obj::ceil(ax);
            				}
HXDLIN( 197)				int ii_min2 = min1;
HXDLIN( 197)				int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN( 197)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            			}
            			else {
HXDLIN( 197)				int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 197)				int ii_max3 = ::Math_obj::ceil(cx);
HXDLIN( 197)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            			}
            		}
HXDLIN( 197)		 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 197)		if ((ay > by)) {
HXDLIN( 197)			if ((ay > cy)) {
HXDLIN( 197)				int min2;
HXDLIN( 197)				if ((by > cy)) {
HXDLIN( 197)					min2 = ::Math_obj::floor(cy);
            				}
            				else {
HXDLIN( 197)					min2 = ::Math_obj::floor(by);
            				}
HXDLIN( 197)				int ii_min4 = min2;
HXDLIN( 197)				int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 197)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            			}
            			else {
HXDLIN( 197)				int ii_min5 = ::Math_obj::floor(by);
HXDLIN( 197)				int ii_max5 = ::Math_obj::ceil(cy);
HXDLIN( 197)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            			}
            		}
            		else {
HXDLIN( 197)			if ((by > cy)) {
HXDLIN( 197)				int min3;
HXDLIN( 197)				if ((ay > cy)) {
HXDLIN( 197)					min3 = ::Math_obj::floor(cy);
            				}
            				else {
HXDLIN( 197)					min3 = ::Math_obj::ceil(ay);
            				}
HXDLIN( 197)				int ii_min6 = min3;
HXDLIN( 197)				int ii_max6 = ::Math_obj::ceil(by);
HXDLIN( 197)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            			}
            			else {
HXDLIN( 197)				int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 197)				int ii_max7 = ::Math_obj::ceil(cy);
HXDLIN( 197)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            			}
            		}
HXDLIN( 197)		 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 197)		if (hasUndo) {
HXDLIN( 197)			int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 197)			int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 197)			 ::Dynamic imageType = null();
HXDLIN( 197)			 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 197)			if (::hx::IsNull( imageType )) {
HXLINE(  54)				imageType = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 197)			::Dynamic undoImage1;
HXDLIN( 197)			switch((int)(( (int)(imageType) ))){
            				case (int)0: {
HXDLIN( 197)					 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 197)					 ::iterMagic::BytesImg b = byt;
HXDLIN( 197)					{
HXDLIN( 197)						b->width = width;
HXDLIN( 197)						b->height = height;
HXDLIN( 197)						b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 197)						b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 197)						{
HXDLIN( 197)							int len = b->length;
HXDLIN( 197)							int w = 0;
HXDLIN( 197)							{
HXDLIN( 197)								int _g = 0;
HXDLIN( 197)								int _g1 = b->height;
HXDLIN( 197)								while((_g < _g1)){
HXDLIN( 197)									_g = (_g + 1);
HXDLIN( 197)									int y = (_g - 1);
HXDLIN( 197)									{
HXDLIN( 197)										int _g2 = 0;
HXDLIN( 197)										int _g3 = b->width;
HXDLIN( 197)										while((_g2 < _g3)){
HXDLIN( 197)											_g2 = (_g2 + 1);
HXDLIN( 197)											int x = (_g2 - 1);
HXDLIN( 197)											{
HXDLIN( 197)												w = (w + 1);
HXDLIN( 197)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 197)											{
HXDLIN( 197)												w = (w + 1);
HXDLIN( 197)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 197)											{
HXDLIN( 197)												w = (w + 1);
HXDLIN( 197)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 197)											{
HXDLIN( 197)												w = (w + 1);
HXDLIN( 197)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 197)					undoImage1 = b;
            				}
            				break;
            				case (int)1: {
HXDLIN( 197)					 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 197)					 ::iterMagic::ArrIntImg a = arrI;
HXDLIN( 197)					{
HXDLIN( 197)						a->width = width;
HXDLIN( 197)						a->height = height;
HXDLIN( 197)						a->data = ::Array_obj< int >::__new(0);
HXDLIN( 197)						a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 197)						{
HXDLIN( 197)							int _g4 = 0;
HXDLIN( 197)							int _g5 = a->length;
HXDLIN( 197)							while((_g4 < _g5)){
HXDLIN( 197)								_g4 = (_g4 + 1);
HXDLIN( 197)								int i = (_g4 - 1);
HXDLIN( 197)								a->data[i] = 0;
            							}
            						}
            					}
HXDLIN( 197)					undoImage1 = a;
            				}
            				break;
            				case (int)2: {
HXDLIN( 197)					 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 197)					 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 197)					{
HXDLIN( 197)						b1->width = width;
HXDLIN( 197)						b1->height = height;
HXDLIN( 197)						b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 197)						int size = (b1->length * 4);
HXDLIN( 197)						b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 197)						{
HXDLIN( 197)							int _g6 = 0;
HXDLIN( 197)							int _g7 = b1->length;
HXDLIN( 197)							while((_g6 < _g7)){
HXDLIN( 197)								_g6 = (_g6 + 1);
HXDLIN( 197)								int i1 = (_g6 - 1);
HXDLIN( 197)								{
HXDLIN( 197)									 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN( 197)									bool undoImage2;
HXDLIN( 197)									if ((i1 >= 0)) {
HXDLIN( 197)										undoImage2 = (i1 < (this3->byteLength >> 2));
            									}
            									else {
HXDLIN( 197)										undoImage2 = false;
            									}
HXDLIN( 197)									if (undoImage2) {
HXDLIN( 197)										 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 197)										int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN( 197)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 197)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 197)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 197)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 197)					undoImage1 = b1;
            				}
            				break;
            				case (int)3: {
HXDLIN( 197)					 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 197)					 ::iterMagic::VecIntImg v = vec;
HXDLIN( 197)					{
HXDLIN( 197)						v->width = width;
HXDLIN( 197)						v->height = height;
HXDLIN( 197)						v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 197)						v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 197)						{
HXDLIN( 197)							int _g8 = 0;
HXDLIN( 197)							int _g9 = v->length;
HXDLIN( 197)							while((_g8 < _g9)){
HXDLIN( 197)								_g8 = (_g8 + 1);
HXDLIN( 197)								int i2 = (_g8 - 1);
HXDLIN( 197)								v->data->__unsafe_set(i2,0);
            							}
            						}
            					}
HXDLIN( 197)					undoImage1 = v;
            				}
            				break;
            				case (int)4: {
HXDLIN( 197)					 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 197)					 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 197)					{
HXDLIN( 197)						b2->width = width;
HXDLIN( 197)						b2->height = height;
HXDLIN( 197)						b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 197)						b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 197)						{
HXDLIN( 197)							int len1 = b2->length;
HXDLIN( 197)							 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 197)							if (::hx::IsNull( d->head )) {
HXDLIN( 197)								int _g10 = 0;
HXDLIN( 197)								int _g11 = len1;
HXDLIN( 197)								while((_g10 < _g11)){
HXDLIN( 197)									_g10 = (_g10 + 1);
HXDLIN( 197)									int i3 = (_g10 - 1);
HXDLIN( 197)									d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            								}
            							}
            							else {
HXDLIN( 197)								int _g12 = 0;
HXDLIN( 197)								int _g13 = len1;
HXDLIN( 197)								while((_g12 < _g13)){
HXDLIN( 197)									_g12 = (_g12 + 1);
HXDLIN( 197)									int i4 = (_g12 - 1);
HXDLIN( 197)									{
HXDLIN( 197)										 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 197)										 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 197)										{
HXDLIN( 197)											int _g14 = 0;
HXDLIN( 197)											int _g15 = i4;
HXDLIN( 197)											while((_g14 < _g15)){
HXDLIN( 197)												_g14 = (_g14 + 1);
HXDLIN( 197)												int i5 = (_g14 - 1);
HXLINE( 345)												prev = l;
HXLINE( 346)												l = l->next;
            											}
            										}
HXLINE( 197)										if (::hx::IsNull( prev )) {
HXDLIN( 197)											b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 197)											l = null();
            										}
            										else {
HXDLIN( 197)											prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 197)											l = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 197)					undoImage1 = b2;
            				}
            				break;
            			}
HXDLIN( 197)			this2->image = undoImage1;
HXDLIN( 197)			this2->width = width;
HXDLIN( 197)			this2->height = height;
HXDLIN( 197)			this2->imageType = ( (int)(imageType) );
HXDLIN( 197)			undoImage = this2;
HXDLIN( 197)			{
HXDLIN( 197)				int rectLeft = xIter3->start;
HXDLIN( 197)				int rectTop = yIter3->start;
HXDLIN( 197)				int rectRight = xIter3->max;
HXDLIN( 197)				bool forceClear = false;
HXDLIN( 197)				{
HXDLIN( 197)					int _g16 = rectTop;
HXDLIN( 197)					int _g17 = yIter3->max;
HXDLIN( 197)					while((_g16 < _g17)){
HXDLIN( 197)						_g16 = (_g16 + 1);
HXDLIN( 197)						int dy = (_g16 - 1);
HXDLIN( 197)						{
HXDLIN( 197)							int _g18 = rectLeft;
HXDLIN( 197)							int _g19 = rectRight;
HXDLIN( 197)							while((_g18 < _g19)){
HXDLIN( 197)								_g18 = (_g18 + 1);
HXDLIN( 197)								int dx = (_g18 - 1);
HXDLIN( 197)								::Dynamic this4 = this1->image;
HXDLIN( 197)								int index;
HXDLIN( 197)								if (this1->useVirtualPos) {
HXDLIN( 197)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            								}
            								else {
HXDLIN( 197)									index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            								}
HXDLIN( 197)								int c = ::iterMagic::Iimg_obj::get(this4,index);
HXDLIN( 197)								int col;
HXDLIN( 197)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 197)									col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXDLIN( 197)									col = c;
            								}
HXDLIN( 197)								bool _hx_tmp;
HXDLIN( 197)								if (this1->useMask) {
HXDLIN( 197)									_hx_tmp = ::hx::IsNotNull( this1->mask );
            								}
            								else {
HXDLIN( 197)									_hx_tmp = false;
            								}
HXDLIN( 197)								if (_hx_tmp) {
HXDLIN( 197)									 ::pi_xy::ImageStruct this5 = this1->mask;
HXDLIN( 197)									::Dynamic this6 = this5->image;
HXDLIN( 197)									int index1;
HXDLIN( 197)									if (this5->useVirtualPos) {
HXDLIN( 197)										index1 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx) - this5->virtualX));
            									}
            									else {
HXDLIN( 197)										index1 = ::Std_obj::_hx_int(( (Float)(((dy * this5->width) + dx)) ));
            									}
HXDLIN( 197)									int c1 = ::iterMagic::Iimg_obj::get(this6,index1);
HXDLIN( 197)									int v1;
HXDLIN( 197)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 197)										v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            									}
            									else {
HXDLIN( 197)										v1 = c1;
            									}
HXDLIN( 197)									int maskPixel = v1;
HXDLIN( 197)									int this7 = col;
HXDLIN( 197)									if ((maskPixel == 0)) {
HXDLIN( 197)										col = this7;
            									}
            									else {
HXDLIN( 197)										Float m0;
HXDLIN( 197)										int this8 = ((maskPixel >> 24) & 255);
HXDLIN( 197)										if ((this8 == 0)) {
HXDLIN( 197)											m0 = ((Float)0.);
            										}
            										else {
HXDLIN( 197)											m0 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 197)										Float m1;
HXDLIN( 197)										int this9 = ((maskPixel >> 16) & 255);
HXDLIN( 197)										if ((this9 == 0)) {
HXDLIN( 197)											m1 = ((Float)0.);
            										}
            										else {
HXDLIN( 197)											m1 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 197)										Float m2;
HXDLIN( 197)										int this10 = ((maskPixel >> 8) & 255);
HXDLIN( 197)										if ((this10 == 0)) {
HXDLIN( 197)											m2 = ((Float)0.);
            										}
            										else {
HXDLIN( 197)											m2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 197)										Float m3;
HXDLIN( 197)										int this11 = (maskPixel & 255);
HXDLIN( 197)										if ((this11 == 0)) {
HXDLIN( 197)											m3 = ((Float)0.);
            										}
            										else {
HXDLIN( 197)											m3 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN( 197)										int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this7 >> 24) & 255)) )));
HXDLIN( 197)										int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this7 >> 16) & 255)) )));
HXDLIN( 197)										int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this7 >> 8) & 255)) )));
HXDLIN( 197)										int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this7 & 255)) )));
HXDLIN( 197)										col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 197)								if ((col != 0)) {
HXDLIN( 197)									int x1 = (dx - rectLeft);
HXDLIN( 197)									int y1 = (dy - rectTop);
HXDLIN( 197)									int c2 = col;
HXDLIN( 197)									bool _hx_tmp1;
HXDLIN( 197)									if ((((c2 >> 24) & 255) < 254)) {
HXDLIN( 197)										_hx_tmp1 = undoImage->transparent;
            									}
            									else {
HXDLIN( 197)										_hx_tmp1 = false;
            									}
HXDLIN( 197)									if (_hx_tmp1) {
HXDLIN( 197)										int location;
HXDLIN( 197)										if (undoImage->useVirtualPos) {
HXDLIN( 197)											location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            										}
            										else {
HXDLIN( 197)											location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            										}
HXDLIN( 197)										int this12 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 197)										int this13;
HXDLIN( 197)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 197)											this13 = ((((((this12 >> 24) & 255) << 24) | ((this12 & 255) << 16)) | (((this12 >> 8) & 255) << 8)) | ((this12 >> 16) & 255));
            										}
            										else {
HXDLIN( 197)											this13 = this12;
            										}
HXDLIN( 197)										Float a1;
HXDLIN( 197)										int this14 = ((this13 >> 24) & 255);
HXDLIN( 197)										if ((this14 == 0)) {
HXDLIN( 197)											a1 = ((Float)0.);
            										}
            										else {
HXDLIN( 197)											a1 = (( (Float)(this14) ) / ( (Float)(255) ));
            										}
HXDLIN( 197)										Float r1;
HXDLIN( 197)										int this15 = ((this13 >> 16) & 255);
HXDLIN( 197)										if ((this15 == 0)) {
HXDLIN( 197)											r1 = ((Float)0.);
            										}
            										else {
HXDLIN( 197)											r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            										}
HXDLIN( 197)										Float g1;
HXDLIN( 197)										int this16 = ((this13 >> 8) & 255);
HXDLIN( 197)										if ((this16 == 0)) {
HXDLIN( 197)											g1 = ((Float)0.);
            										}
            										else {
HXDLIN( 197)											g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            										}
HXDLIN( 197)										Float b11;
HXDLIN( 197)										int this17 = (this13 & 255);
HXDLIN( 197)										if ((this17 == 0)) {
HXDLIN( 197)											b11 = ((Float)0.);
            										}
            										else {
HXDLIN( 197)											b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            										}
HXDLIN( 197)										Float a2;
HXDLIN( 197)										int this18 = ((col >> 24) & 255);
HXDLIN( 197)										if ((this18 == 0)) {
HXDLIN( 197)											a2 = ((Float)0.);
            										}
            										else {
HXDLIN( 197)											a2 = (( (Float)(this18) ) / ( (Float)(255) ));
            										}
HXDLIN( 197)										Float r2;
HXDLIN( 197)										int this19 = ((col >> 16) & 255);
HXDLIN( 197)										if ((this19 == 0)) {
HXDLIN( 197)											r2 = ((Float)0.);
            										}
            										else {
HXDLIN( 197)											r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            										}
HXDLIN( 197)										Float g2;
HXDLIN( 197)										int this20 = ((col >> 8) & 255);
HXDLIN( 197)										if ((this20 == 0)) {
HXDLIN( 197)											g2 = ((Float)0.);
            										}
            										else {
HXDLIN( 197)											g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            										}
HXDLIN( 197)										Float b21;
HXDLIN( 197)										int this21 = (col & 255);
HXDLIN( 197)										if ((this21 == 0)) {
HXDLIN( 197)											b21 = ((Float)0.);
            										}
            										else {
HXDLIN( 197)											b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            										}
HXDLIN( 197)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 197)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 197)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 197)										int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 197)										int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 197)										int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 197)										{
HXDLIN( 197)											int _hx_tmp2;
HXDLIN( 197)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 197)												_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXDLIN( 197)												_hx_tmp2 = blended;
            											}
HXDLIN( 197)											::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            										}
            									}
            									else {
HXDLIN( 197)										::Dynamic this22 = undoImage->image;
HXDLIN( 197)										int index2;
HXDLIN( 197)										if (undoImage->useVirtualPos) {
HXDLIN( 197)											index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            										}
            										else {
HXDLIN( 197)											index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            										}
HXDLIN( 197)										int _hx_tmp3;
HXDLIN( 197)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 197)											_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            										}
            										else {
HXDLIN( 197)											_hx_tmp3 = c2;
            										}
HXDLIN( 197)										::iterMagic::Iimg_obj::set(this22,index2,_hx_tmp3);
            									}
            								}
            								else {
HXDLIN( 197)									if (forceClear) {
HXDLIN( 197)										::Dynamic this23 = undoImage->image;
HXDLIN( 197)										int x2 = (dx - rectLeft);
HXDLIN( 197)										int y2 = (dy - rectTop);
HXDLIN( 197)										int index3;
HXDLIN( 197)										if (undoImage->useVirtualPos) {
HXDLIN( 197)											index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            										}
            										else {
HXDLIN( 197)											index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            										}
HXDLIN( 197)										::iterMagic::Iimg_obj::set(this23,index3,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 197)		bool found = false;
HXDLIN( 197)		Float min4 = ( (Float)(0) );
HXDLIN( 197)		Float max = ( (Float)(0) );
HXDLIN( 197)		int a5 = 0;
HXDLIN( 197)		int r3 = 0;
HXDLIN( 197)		int g3 = 0;
HXDLIN( 197)		int b4 = 0;
HXDLIN( 197)		{
HXDLIN( 197)			int _g_min = xIter3->start;
HXDLIN( 197)			int _g_max = xIter3->max;
HXDLIN( 197)			while((_g_min < _g_max)){
HXDLIN( 197)				_g_min = (_g_min + 1);
HXDLIN( 197)				int px = (_g_min - 1);
HXDLIN( 197)				Float pcx = (( (Float)(px) ) - cx);
HXLINE( 695)				found = false;
HXLINE( 197)				{
HXDLIN( 197)					int _g_min1 = yIter3->start;
HXDLIN( 197)					int _g_max1 = yIter3->max;
HXDLIN( 197)					while((_g_min1 < _g_max1)){
HXDLIN( 197)						_g_min1 = (_g_min1 + 1);
HXDLIN( 197)						int py = (_g_min1 - 1);
HXDLIN( 197)						Float pcy = (( (Float)(py) ) - cy);
HXDLIN( 197)						Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 197)						Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 197)						Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 197)						Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 197)						Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 197)						bool _hx_tmp4;
HXDLIN( 197)						bool _hx_tmp5;
HXDLIN( 197)						if ((ratioA >= 0)) {
HXDLIN( 197)							_hx_tmp5 = (ratioB >= 0);
            						}
            						else {
HXDLIN( 197)							_hx_tmp5 = false;
            						}
HXDLIN( 197)						if (_hx_tmp5) {
HXDLIN( 197)							_hx_tmp4 = (ratioC >= 0);
            						}
            						else {
HXDLIN( 197)							_hx_tmp4 = false;
            						}
HXDLIN( 197)						if (_hx_tmp4) {
HXDLIN( 197)							if (softAB) {
HXDLIN( 197)								if (softBC) {
HXDLIN( 197)									if (softCA) {
HXDLIN( 197)										Float min5;
HXDLIN( 197)										if ((ratioA < ratioB)) {
HXDLIN( 197)											min5 = ratioA;
            										}
            										else {
HXDLIN( 197)											min5 = ratioB;
            										}
HXDLIN( 197)										if (!((min5 < ratioC))) {
HXDLIN( 197)											min5 = ratioC;
            										}
HXDLIN( 197)										Float max1;
HXDLIN( 197)										if ((ratioA > ratioB)) {
HXDLIN( 197)											max1 = ratioA;
            										}
            										else {
HXDLIN( 197)											max1 = ratioB;
            										}
HXDLIN( 197)										if (!((max1 > ratioC))) {
HXDLIN( 197)											max1 = ratioC;
            										}
HXLINE( 743)										max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE( 197)										Float min6;
HXDLIN( 197)										if ((min5 < max1)) {
HXDLIN( 197)											min6 = min5;
            										}
            										else {
HXDLIN( 197)											min6 = ((max1 + min5) / ( (Float)(2) ));
            										}
HXDLIN( 197)										int i6 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft3) * min6));
HXDLIN( 197)										if ((i6 > 255)) {
HXLINE(  24)											i6 = 255;
            										}
HXLINE( 197)										if ((i6 < 0)) {
HXLINE(  25)											i6 = 0;
            										}
HXLINE( 197)										a5 = i6;
            									}
            									else {
HXDLIN( 197)										if ((ratioB < ratioC)) {
HXDLIN( 197)											min4 = ratioB;
            										}
            										else {
HXDLIN( 197)											min4 = ratioC;
            										}
HXDLIN( 197)										if ((ratioA > ratioB)) {
HXDLIN( 197)											max = ratioA;
            										}
            										else {
HXDLIN( 197)											max = ratioB;
            										}
HXDLIN( 197)										if (!((max > ratioC))) {
HXDLIN( 197)											max = ratioC;
            										}
HXLINE( 735)										max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE( 197)										if (!((min4 < max))) {
HXDLIN( 197)											min4 = ((max + min4) / ( (Float)(2) ));
            										}
HXDLIN( 197)										int i7 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft3) * min4));
HXDLIN( 197)										if ((i7 > 255)) {
HXLINE(  24)											i7 = 255;
            										}
HXLINE( 197)										if ((i7 < 0)) {
HXLINE(  25)											i7 = 0;
            										}
HXLINE( 197)										a5 = i7;
            									}
            								}
            								else {
HXDLIN( 197)									if (softCA) {
HXDLIN( 197)										if ((ratioA < ratioC)) {
HXDLIN( 197)											min4 = ratioA;
            										}
            										else {
HXDLIN( 197)											min4 = ratioC;
            										}
HXDLIN( 197)										if ((ratioA > ratioB)) {
HXDLIN( 197)											max = ratioA;
            										}
            										else {
HXDLIN( 197)											max = ratioB;
            										}
HXDLIN( 197)										if (!((max > ratioC))) {
HXDLIN( 197)											max = ratioC;
            										}
HXLINE( 728)										max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE( 197)										if (!((min4 < max))) {
HXDLIN( 197)											min4 = ((max + min4) / ( (Float)(2) ));
            										}
HXDLIN( 197)										int i8 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft3) * min4));
HXDLIN( 197)										if ((i8 > 255)) {
HXLINE(  24)											i8 = 255;
            										}
HXLINE( 197)										if ((i8 < 0)) {
HXLINE(  25)											i8 = 0;
            										}
HXLINE( 197)										a5 = i8;
            									}
            									else {
HXLINE( 722)										min4 = ratioC;
HXLINE( 197)										int i9 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft3) * min4));
HXDLIN( 197)										if ((i9 > 255)) {
HXLINE(  24)											i9 = 255;
            										}
HXLINE( 197)										if ((i9 < 0)) {
HXLINE(  25)											i9 = 0;
            										}
HXLINE( 197)										a5 = i9;
            									}
            								}
            							}
            							else {
HXDLIN( 197)								if (softBC) {
HXDLIN( 197)									if (softCA) {
HXDLIN( 197)										if ((ratioA < ratioB)) {
HXDLIN( 197)											min4 = ratioA;
            										}
            										else {
HXDLIN( 197)											min4 = ratioB;
            										}
HXDLIN( 197)										if ((ratioA > ratioB)) {
HXDLIN( 197)											max = ratioA;
            										}
            										else {
HXDLIN( 197)											max = ratioB;
            										}
HXDLIN( 197)										if (!((max > ratioC))) {
HXDLIN( 197)											max = ratioC;
            										}
HXLINE( 718)										max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE( 197)										if (!((min4 < max))) {
HXDLIN( 197)											min4 = ((max + min4) / ( (Float)(2) ));
            										}
HXDLIN( 197)										int i10 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft3) * min4));
HXDLIN( 197)										if ((i10 > 255)) {
HXLINE(  24)											i10 = 255;
            										}
HXLINE( 197)										if ((i10 < 0)) {
HXLINE(  25)											i10 = 0;
            										}
HXLINE( 197)										a5 = i10;
            									}
            									else {
HXLINE( 712)										min4 = ratioB;
HXLINE( 197)										int i11 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft3) * min4));
HXDLIN( 197)										if ((i11 > 255)) {
HXLINE(  24)											i11 = 255;
            										}
HXLINE( 197)										if ((i11 < 0)) {
HXLINE(  25)											i11 = 0;
            										}
HXLINE( 197)										a5 = i11;
            									}
            								}
            								else {
HXDLIN( 197)									if (softCA) {
HXLINE( 709)										min4 = ratioA;
HXLINE( 197)										int i12 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft3) * min4));
HXDLIN( 197)										if ((i12 > 255)) {
HXLINE(  24)											i12 = 255;
            										}
HXLINE( 197)										if ((i12 < 0)) {
HXLINE(  25)											i12 = 0;
            										}
HXLINE( 197)										a5 = i12;
            									}
            									else {
HXDLIN( 197)										int i13 = ::Std_obj::_hx_int(( (Float)(aA) ));
HXDLIN( 197)										if ((i13 > 255)) {
HXLINE(  24)											i13 = 255;
            										}
HXLINE( 197)										if ((i13 < 0)) {
HXLINE(  25)											i13 = 0;
            										}
HXLINE( 197)										a5 = i13;
            									}
            								}
            							}
HXDLIN( 197)							int i14 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 197)							if ((i14 > 255)) {
HXLINE(  24)								i14 = 255;
            							}
HXLINE( 197)							if ((i14 < 0)) {
HXLINE(  25)								i14 = 0;
            							}
HXLINE( 747)							r3 = i14;
HXLINE( 197)							int i15 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 197)							if ((i15 > 255)) {
HXLINE(  24)								i15 = 255;
            							}
HXLINE( 197)							if ((i15 < 0)) {
HXLINE(  25)								i15 = 0;
            							}
HXLINE( 748)							g3 = i15;
HXLINE( 197)							int i16 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 197)							if ((i16 > 255)) {
HXLINE(  24)								i16 = 255;
            							}
HXLINE( 197)							if ((i16 < 0)) {
HXLINE(  25)								i16 = 0;
            							}
HXLINE( 749)							b4 = i16;
HXLINE( 197)							{
HXDLIN( 197)								int location1;
HXDLIN( 197)								if (this1->useVirtualPos) {
HXDLIN( 197)									location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this1->virtualY) * ( (Float)(this1->width) )) + px) - this1->virtualX));
            								}
            								else {
HXDLIN( 197)									location1 = ::Std_obj::_hx_int(( (Float)(((py * this1->width) + px)) ));
            								}
HXDLIN( 197)								bool _hx_tmp6;
HXDLIN( 197)								if (this1->transparent) {
HXDLIN( 197)									_hx_tmp6 = (a5 < 254);
            								}
            								else {
HXDLIN( 197)									_hx_tmp6 = false;
            								}
HXDLIN( 197)								if (_hx_tmp6) {
HXDLIN( 197)									int this24 = ::iterMagic::Iimg_obj::get(this1->image,location1);
HXDLIN( 197)									int old;
HXDLIN( 197)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 197)										old = ((((((this24 >> 24) & 255) << 24) | ((this24 & 255) << 16)) | (((this24 >> 8) & 255) << 8)) | ((this24 >> 16) & 255));
            									}
            									else {
HXDLIN( 197)										old = this24;
            									}
HXDLIN( 197)									int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 197)									Float a11;
HXDLIN( 197)									int this25 = ((old >> 24) & 255);
HXDLIN( 197)									if ((this25 == 0)) {
HXDLIN( 197)										a11 = ((Float)0.);
            									}
            									else {
HXDLIN( 197)										a11 = (( (Float)(this25) ) / ( (Float)(255) ));
            									}
HXDLIN( 197)									Float r11;
HXDLIN( 197)									int this26 = ((old >> 16) & 255);
HXDLIN( 197)									if ((this26 == 0)) {
HXDLIN( 197)										r11 = ((Float)0.);
            									}
            									else {
HXDLIN( 197)										r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            									}
HXDLIN( 197)									Float g11;
HXDLIN( 197)									int this27 = ((old >> 8) & 255);
HXDLIN( 197)									if ((this27 == 0)) {
HXDLIN( 197)										g11 = ((Float)0.);
            									}
            									else {
HXDLIN( 197)										g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            									}
HXDLIN( 197)									Float b12;
HXDLIN( 197)									int this28 = (old & 255);
HXDLIN( 197)									if ((this28 == 0)) {
HXDLIN( 197)										b12 = ((Float)0.);
            									}
            									else {
HXDLIN( 197)										b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            									}
HXDLIN( 197)									Float a21;
HXDLIN( 197)									int this29 = ((rhs >> 24) & 255);
HXDLIN( 197)									if ((this29 == 0)) {
HXDLIN( 197)										a21 = ((Float)0.);
            									}
            									else {
HXDLIN( 197)										a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            									}
HXDLIN( 197)									Float r21;
HXDLIN( 197)									int this30 = ((rhs >> 16) & 255);
HXDLIN( 197)									if ((this30 == 0)) {
HXDLIN( 197)										r21 = ((Float)0.);
            									}
            									else {
HXDLIN( 197)										r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            									}
HXDLIN( 197)									Float g21;
HXDLIN( 197)									int this31 = ((rhs >> 8) & 255);
HXDLIN( 197)									if ((this31 == 0)) {
HXDLIN( 197)										g21 = ((Float)0.);
            									}
            									else {
HXDLIN( 197)										g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            									}
HXDLIN( 197)									Float b22;
HXDLIN( 197)									int this32 = (rhs & 255);
HXDLIN( 197)									if ((this32 == 0)) {
HXDLIN( 197)										b22 = ((Float)0.);
            									}
            									else {
HXDLIN( 197)										b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            									}
HXDLIN( 197)									Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN( 197)									int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 197)									int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 197)									int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 197)									int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 197)									int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 197)									{
HXDLIN( 197)										int _hx_tmp7;
HXDLIN( 197)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 197)											_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            										}
            										else {
HXDLIN( 197)											_hx_tmp7 = blended1;
            										}
HXDLIN( 197)										::iterMagic::Iimg_obj::set(this1->image,location1,_hx_tmp7);
            									}
            								}
            								else {
HXDLIN( 197)									int value;
HXDLIN( 197)									if (this1->isLittle) {
HXDLIN( 197)										value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            									}
            									else {
HXDLIN( 197)										value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            									}
HXDLIN( 197)									::iterMagic::Iimg_obj::set(this1->image,location1,value);
            								}
            							}
HXLINE( 751)							found = true;
            						}
            						else {
HXDLIN( 197)							if (found) {
HXDLIN( 197)								goto _hx_goto_250;
            							}
            						}
            					}
            					_hx_goto_250:;
            				}
            			}
            		}
HXDLIN( 197)		if ((hasHit == false)) {
HXDLIN( 197)			 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXDLIN( 197)			if (hasUndo) {
HXDLIN( 197)				v2->undoImage = undoImage;
HXDLIN( 197)				v2->undoX = xIter3->start;
HXDLIN( 197)				v2->undoY = yIter3->start;
            			}
HXDLIN( 197)			return v2;
            		}
            		else {
HXDLIN( 197)			return null();
            		}
HXDLIN( 197)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC13(SoftShape_Impl__obj,triangle,return )

 ::pi_xy::algo::HitTriArray SoftShape_Impl__obj::arrow( ::pi_xy::ImageStruct this1,Float px,Float py,Float qx,Float qy,Float thick,int color,::hx::Null< bool >  __o_flare,::hx::Null< bool >  __o_reverseFlare,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_hasHit){
            		bool flare = __o_flare.Default(false);
            		bool reverseFlare = __o_reverseFlare.Default(false);
            		Float soft = __o_soft.Default(((Float)40.));
            		bool hasHit = __o_hasHit.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_217_arrow)
HXDLIN( 217)		Float goldenRatio = ((Float)1.61803398875);
HXDLIN( 217)		Float o = (qy - py);
HXDLIN( 217)		Float a = (qx - px);
HXDLIN( 217)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN( 217)		Float theta = ::Math_obj::atan2(o,a);
HXDLIN( 217)		Float thicker = ((( (Float)(2) ) * thick) * goldenRatio);
HXDLIN( 217)		Float sin = ::Math_obj::sin(theta);
HXDLIN( 217)		Float cos = ::Math_obj::cos(theta);
HXDLIN( 217)		Float radius = (thick / ( (Float)(2) ));
HXDLIN( 217)		Float radius2 = (thicker / ( (Float)(2) ));
HXDLIN( 217)		Float h2 = (h / goldenRatio);
HXDLIN( 217)		 ::pi_xy::algo::HitQuad hitQuad;
HXDLIN( 217)		if (flare) {
HXDLIN( 217)			if (reverseFlare) {
HXDLIN( 217)				Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 217)				Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 217)				Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 217)				Float radius21 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN( 217)				Float dx = ((Float)0.1);
HXDLIN( 217)				Float dy = radius1;
HXDLIN( 217)				Float cx = h2;
HXDLIN( 217)				Float cy = radius21;
HXDLIN( 217)				Float bx = h2;
HXDLIN( 217)				Float by = -(radius21);
HXDLIN( 217)				Float ax = ((Float)0.1);
HXDLIN( 217)				Float ay = -(radius1);
HXDLIN( 217)				Float temp = ((Float)0.);
HXLINE( 288)				temp = (px + ((ax * cos1) - (ay * sin1)));
HXLINE( 289)				ay = (py + ((ay * cos1) + (ax * sin1)));
HXLINE( 290)				ax = temp;
HXLINE( 292)				temp = (px + ((bx * cos1) - (by * sin1)));
HXLINE( 293)				by = (py + ((by * cos1) + (bx * sin1)));
HXLINE( 294)				bx = temp;
HXLINE( 296)				temp = (px + ((cx * cos1) - (cy * sin1)));
HXLINE( 297)				cy = (py + ((cy * cos1) + (cx * sin1)));
HXLINE( 298)				cx = temp;
HXLINE( 300)				temp = (px + ((dx * cos1) - (dy * sin1)));
HXLINE( 301)				dy = (py + ((dy * cos1) + (dx * sin1)));
HXLINE( 302)				dx = temp;
HXLINE( 217)				Float ex = ((((ax + bx) + cx) + dx) / ( (Float)(4) ));
HXDLIN( 217)				Float ey = ((((ay + by) + cy) + dy) / ( (Float)(4) ));
HXDLIN( 217)				{
HXDLIN( 217)					Float bx1 = ax;
HXDLIN( 217)					Float by1 = ay;
HXDLIN( 217)					Float cx1 = bx;
HXDLIN( 217)					Float cy1 = by;
HXDLIN( 217)					bool hasUndo = false;
HXDLIN( 217)					bool adjustWinding = (((((ex * by1) - (bx1 * ey)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ey) - (ex * cy1))) > 0);
HXDLIN( 217)					if (!(adjustWinding)) {
HXDLIN( 217)						Float bx_ = bx1;
HXDLIN( 217)						Float by_ = by1;
HXLINE(  25)						bx1 = cx1;
HXLINE(  26)						by1 = cy1;
HXLINE(  27)						cx1 = bx_;
HXLINE(  28)						cy1 = by_;
            					}
HXLINE( 217)					{
HXDLIN( 217)						Float s0 = ((ey * cx1) - (ex * cy1));
HXDLIN( 217)						Float sx = (cy1 - ey);
HXDLIN( 217)						Float sy = (ex - cx1);
HXDLIN( 217)						Float t0 = ((ex * by1) - (ey * bx1));
HXDLIN( 217)						Float tx = (ey - by1);
HXDLIN( 217)						Float ty = (bx1 - ex);
HXDLIN( 217)						Float A = ((((-(by1) * cx1) + (ey * (-(bx1) + cx1))) + (ex * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 217)						 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 217)						if ((ex > bx1)) {
HXDLIN( 217)							if ((ex > cx1)) {
HXDLIN( 217)								int min;
HXDLIN( 217)								if ((bx1 > cx1)) {
HXDLIN( 217)									min = ::Math_obj::floor(cx1);
            								}
            								else {
HXDLIN( 217)									min = ::Math_obj::floor(bx1);
            								}
HXDLIN( 217)								int ii_min = min;
HXDLIN( 217)								int ii_max = ::Math_obj::ceil(ex);
HXDLIN( 217)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            							}
            							else {
HXDLIN( 217)								int ii_min1 = ::Math_obj::floor(bx1);
HXDLIN( 217)								int ii_max1 = ::Math_obj::ceil(cx1);
HXDLIN( 217)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            							}
            						}
            						else {
HXDLIN( 217)							if ((bx1 > cx1)) {
HXDLIN( 217)								int min1;
HXDLIN( 217)								if ((ex > cx1)) {
HXDLIN( 217)									min1 = ::Math_obj::floor(cx1);
            								}
            								else {
HXDLIN( 217)									min1 = ::Math_obj::ceil(ex);
            								}
HXDLIN( 217)								int ii_min2 = min1;
HXDLIN( 217)								int ii_max2 = ::Math_obj::ceil(bx1);
HXDLIN( 217)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            							}
            							else {
HXDLIN( 217)								int ii_min3 = ::Math_obj::floor(ex);
HXDLIN( 217)								int ii_max3 = ::Math_obj::ceil(cx1);
HXDLIN( 217)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            							}
            						}
HXDLIN( 217)						 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 217)						if ((ey > by1)) {
HXDLIN( 217)							if ((ey > cy1)) {
HXDLIN( 217)								int min2;
HXDLIN( 217)								if ((by1 > cy1)) {
HXDLIN( 217)									min2 = ::Math_obj::floor(cy1);
            								}
            								else {
HXDLIN( 217)									min2 = ::Math_obj::floor(by1);
            								}
HXDLIN( 217)								int ii_min4 = min2;
HXDLIN( 217)								int ii_max4 = ::Math_obj::ceil(ey);
HXDLIN( 217)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            							}
            							else {
HXDLIN( 217)								int ii_min5 = ::Math_obj::floor(by1);
HXDLIN( 217)								int ii_max5 = ::Math_obj::ceil(cy1);
HXDLIN( 217)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            							}
            						}
            						else {
HXDLIN( 217)							if ((by1 > cy1)) {
HXDLIN( 217)								int min3;
HXDLIN( 217)								if ((ey > cy1)) {
HXDLIN( 217)									min3 = ::Math_obj::floor(cy1);
            								}
            								else {
HXDLIN( 217)									min3 = ::Math_obj::ceil(ey);
            								}
HXDLIN( 217)								int ii_min6 = min3;
HXDLIN( 217)								int ii_max6 = ::Math_obj::ceil(by1);
HXDLIN( 217)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            							}
            							else {
HXDLIN( 217)								int ii_min7 = ::Math_obj::floor(ey);
HXDLIN( 217)								int ii_max7 = ::Math_obj::ceil(cy1);
HXDLIN( 217)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            							}
            						}
HXDLIN( 217)						 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 217)						if (hasUndo) {
HXDLIN( 217)							int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 217)							int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 217)							 ::Dynamic imageType = null();
HXDLIN( 217)							 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 217)							if (::hx::IsNull( imageType )) {
HXLINE(  54)								imageType = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE( 217)							::Dynamic undoImage1;
HXDLIN( 217)							switch((int)(( (int)(imageType) ))){
            								case (int)0: {
HXDLIN( 217)									 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 217)									 ::iterMagic::BytesImg b = byt;
HXDLIN( 217)									{
HXDLIN( 217)										b->width = width;
HXDLIN( 217)										b->height = height;
HXDLIN( 217)										b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 217)										b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 217)										{
HXDLIN( 217)											int len = b->length;
HXDLIN( 217)											int w = 0;
HXDLIN( 217)											{
HXDLIN( 217)												int _g = 0;
HXDLIN( 217)												int _g1 = b->height;
HXDLIN( 217)												while((_g < _g1)){
HXDLIN( 217)													_g = (_g + 1);
HXDLIN( 217)													int y = (_g - 1);
HXDLIN( 217)													{
HXDLIN( 217)														int _g2 = 0;
HXDLIN( 217)														int _g3 = b->width;
HXDLIN( 217)														while((_g2 < _g3)){
HXDLIN( 217)															_g2 = (_g2 + 1);
HXDLIN( 217)															int x = (_g2 - 1);
HXDLIN( 217)															{
HXDLIN( 217)																w = (w + 1);
HXDLIN( 217)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 217)															{
HXDLIN( 217)																w = (w + 1);
HXDLIN( 217)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 217)															{
HXDLIN( 217)																w = (w + 1);
HXDLIN( 217)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 217)															{
HXDLIN( 217)																w = (w + 1);
HXDLIN( 217)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 217)									undoImage1 = b;
            								}
            								break;
            								case (int)1: {
HXDLIN( 217)									 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)									 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 217)									{
HXDLIN( 217)										a1->width = width;
HXDLIN( 217)										a1->height = height;
HXDLIN( 217)										a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 217)										a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 217)										{
HXDLIN( 217)											int _g4 = 0;
HXDLIN( 217)											int _g5 = a1->length;
HXDLIN( 217)											while((_g4 < _g5)){
HXDLIN( 217)												_g4 = (_g4 + 1);
HXDLIN( 217)												int i = (_g4 - 1);
HXDLIN( 217)												a1->data[i] = 0;
            											}
            										}
            									}
HXDLIN( 217)									undoImage1 = a1;
            								}
            								break;
            								case (int)2: {
HXDLIN( 217)									 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 217)									 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 217)									{
HXDLIN( 217)										b1->width = width;
HXDLIN( 217)										b1->height = height;
HXDLIN( 217)										b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 217)										int size = (b1->length * 4);
HXDLIN( 217)										b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 217)										{
HXDLIN( 217)											int _g6 = 0;
HXDLIN( 217)											int _g7 = b1->length;
HXDLIN( 217)											while((_g6 < _g7)){
HXDLIN( 217)												_g6 = (_g6 + 1);
HXDLIN( 217)												int i1 = (_g6 - 1);
HXDLIN( 217)												{
HXDLIN( 217)													 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN( 217)													bool undoImage2;
HXDLIN( 217)													if ((i1 >= 0)) {
HXDLIN( 217)														undoImage2 = (i1 < (this3->byteLength >> 2));
            													}
            													else {
HXDLIN( 217)														undoImage2 = false;
            													}
HXDLIN( 217)													if (undoImage2) {
HXDLIN( 217)														 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 217)														int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN( 217)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 217)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 217)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 217)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN( 217)									undoImage1 = b1;
            								}
            								break;
            								case (int)3: {
HXDLIN( 217)									 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)									 ::iterMagic::VecIntImg v = vec;
HXDLIN( 217)									{
HXDLIN( 217)										v->width = width;
HXDLIN( 217)										v->height = height;
HXDLIN( 217)										v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 217)										v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 217)										{
HXDLIN( 217)											int _g8 = 0;
HXDLIN( 217)											int _g9 = v->length;
HXDLIN( 217)											while((_g8 < _g9)){
HXDLIN( 217)												_g8 = (_g8 + 1);
HXDLIN( 217)												int i2 = (_g8 - 1);
HXDLIN( 217)												v->data->__unsafe_set(i2,0);
            											}
            										}
            									}
HXDLIN( 217)									undoImage1 = v;
            								}
            								break;
            								case (int)4: {
HXDLIN( 217)									 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)									 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 217)									{
HXDLIN( 217)										b2->width = width;
HXDLIN( 217)										b2->height = height;
HXDLIN( 217)										b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 217)										b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 217)										{
HXDLIN( 217)											int len1 = b2->length;
HXDLIN( 217)											 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 217)											if (::hx::IsNull( d->head )) {
HXDLIN( 217)												int _g10 = 0;
HXDLIN( 217)												int _g11 = len1;
HXDLIN( 217)												while((_g10 < _g11)){
HXDLIN( 217)													_g10 = (_g10 + 1);
HXDLIN( 217)													int i3 = (_g10 - 1);
HXDLIN( 217)													d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            												}
            											}
            											else {
HXDLIN( 217)												int _g12 = 0;
HXDLIN( 217)												int _g13 = len1;
HXDLIN( 217)												while((_g12 < _g13)){
HXDLIN( 217)													_g12 = (_g12 + 1);
HXDLIN( 217)													int i4 = (_g12 - 1);
HXDLIN( 217)													{
HXDLIN( 217)														 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 217)														 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 217)														{
HXDLIN( 217)															int _g14 = 0;
HXDLIN( 217)															int _g15 = i4;
HXDLIN( 217)															while((_g14 < _g15)){
HXDLIN( 217)																_g14 = (_g14 + 1);
HXDLIN( 217)																int i5 = (_g14 - 1);
HXLINE( 345)																prev = l;
HXLINE( 346)																l = l->next;
            															}
            														}
HXLINE( 217)														if (::hx::IsNull( prev )) {
HXDLIN( 217)															b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 217)															l = null();
            														}
            														else {
HXDLIN( 217)															prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 217)															l = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 217)									undoImage1 = b2;
            								}
            								break;
            							}
HXDLIN( 217)							this2->image = undoImage1;
HXDLIN( 217)							this2->width = width;
HXDLIN( 217)							this2->height = height;
HXDLIN( 217)							this2->imageType = ( (int)(imageType) );
HXDLIN( 217)							undoImage = this2;
HXDLIN( 217)							{
HXDLIN( 217)								int rectLeft = xIter3->start;
HXDLIN( 217)								int rectTop = yIter3->start;
HXDLIN( 217)								int rectRight = xIter3->max;
HXDLIN( 217)								bool forceClear = false;
HXDLIN( 217)								{
HXDLIN( 217)									int _g16 = rectTop;
HXDLIN( 217)									int _g17 = yIter3->max;
HXDLIN( 217)									while((_g16 < _g17)){
HXDLIN( 217)										_g16 = (_g16 + 1);
HXDLIN( 217)										int dy1 = (_g16 - 1);
HXDLIN( 217)										{
HXDLIN( 217)											int _g18 = rectLeft;
HXDLIN( 217)											int _g19 = rectRight;
HXDLIN( 217)											while((_g18 < _g19)){
HXDLIN( 217)												_g18 = (_g18 + 1);
HXDLIN( 217)												int dx1 = (_g18 - 1);
HXDLIN( 217)												::Dynamic this4 = this1->image;
HXDLIN( 217)												int index;
HXDLIN( 217)												if (this1->useVirtualPos) {
HXDLIN( 217)													index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx1) - this1->virtualX));
            												}
            												else {
HXDLIN( 217)													index = ::Std_obj::_hx_int(( (Float)(((dy1 * this1->width) + dx1)) ));
            												}
HXDLIN( 217)												int c = ::iterMagic::Iimg_obj::get(this4,index);
HXDLIN( 217)												int col;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													col = c;
            												}
HXDLIN( 217)												bool hitQuad1;
HXDLIN( 217)												if (this1->useMask) {
HXDLIN( 217)													hitQuad1 = ::hx::IsNotNull( this1->mask );
            												}
            												else {
HXDLIN( 217)													hitQuad1 = false;
            												}
HXDLIN( 217)												if (hitQuad1) {
HXDLIN( 217)													 ::pi_xy::ImageStruct this5 = this1->mask;
HXDLIN( 217)													::Dynamic this6 = this5->image;
HXDLIN( 217)													int index1;
HXDLIN( 217)													if (this5->useVirtualPos) {
HXDLIN( 217)														index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx1) - this5->virtualX));
            													}
            													else {
HXDLIN( 217)														index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this5->width) + dx1)) ));
            													}
HXDLIN( 217)													int c1 = ::iterMagic::Iimg_obj::get(this6,index1);
HXDLIN( 217)													int v1;
HXDLIN( 217)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)														v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            													}
            													else {
HXDLIN( 217)														v1 = c1;
            													}
HXDLIN( 217)													int maskPixel = v1;
HXDLIN( 217)													int this7 = col;
HXDLIN( 217)													if ((maskPixel == 0)) {
HXDLIN( 217)														col = this7;
            													}
            													else {
HXDLIN( 217)														Float m0;
HXDLIN( 217)														int this8 = ((maskPixel >> 24) & 255);
HXDLIN( 217)														if ((this8 == 0)) {
HXDLIN( 217)															m0 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															m0 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float m1;
HXDLIN( 217)														int this9 = ((maskPixel >> 16) & 255);
HXDLIN( 217)														if ((this9 == 0)) {
HXDLIN( 217)															m1 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															m1 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float m2;
HXDLIN( 217)														int this10 = ((maskPixel >> 8) & 255);
HXDLIN( 217)														if ((this10 == 0)) {
HXDLIN( 217)															m2 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															m2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float m3;
HXDLIN( 217)														int this11 = (maskPixel & 255);
HXDLIN( 217)														if ((this11 == 0)) {
HXDLIN( 217)															m3 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															m3 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this7 >> 24) & 255)) )));
HXDLIN( 217)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this7 >> 16) & 255)) )));
HXDLIN( 217)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this7 >> 8) & 255)) )));
HXDLIN( 217)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this7 & 255)) )));
HXDLIN( 217)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 217)												if ((col != 0)) {
HXDLIN( 217)													int x1 = (dx1 - rectLeft);
HXDLIN( 217)													int y1 = (dy1 - rectTop);
HXDLIN( 217)													int c2 = col;
HXDLIN( 217)													bool hitQuad2;
HXDLIN( 217)													if ((((c2 >> 24) & 255) < 254)) {
HXDLIN( 217)														hitQuad2 = undoImage->transparent;
            													}
            													else {
HXDLIN( 217)														hitQuad2 = false;
            													}
HXDLIN( 217)													if (hitQuad2) {
HXDLIN( 217)														int location;
HXDLIN( 217)														if (undoImage->useVirtualPos) {
HXDLIN( 217)															location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            														}
            														else {
HXDLIN( 217)															location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            														}
HXDLIN( 217)														int this12 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 217)														int this13;
HXDLIN( 217)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)															this13 = ((((((this12 >> 24) & 255) << 24) | ((this12 & 255) << 16)) | (((this12 >> 8) & 255) << 8)) | ((this12 >> 16) & 255));
            														}
            														else {
HXDLIN( 217)															this13 = this12;
            														}
HXDLIN( 217)														Float a11;
HXDLIN( 217)														int this14 = ((this13 >> 24) & 255);
HXDLIN( 217)														if ((this14 == 0)) {
HXDLIN( 217)															a11 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															a11 = (( (Float)(this14) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float r1;
HXDLIN( 217)														int this15 = ((this13 >> 16) & 255);
HXDLIN( 217)														if ((this15 == 0)) {
HXDLIN( 217)															r1 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float g1;
HXDLIN( 217)														int this16 = ((this13 >> 8) & 255);
HXDLIN( 217)														if ((this16 == 0)) {
HXDLIN( 217)															g1 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float b11;
HXDLIN( 217)														int this17 = (this13 & 255);
HXDLIN( 217)														if ((this17 == 0)) {
HXDLIN( 217)															b11 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float a2;
HXDLIN( 217)														int this18 = ((col >> 24) & 255);
HXDLIN( 217)														if ((this18 == 0)) {
HXDLIN( 217)															a2 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															a2 = (( (Float)(this18) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float r2;
HXDLIN( 217)														int this19 = ((col >> 16) & 255);
HXDLIN( 217)														if ((this19 == 0)) {
HXDLIN( 217)															r2 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float g2;
HXDLIN( 217)														int this20 = ((col >> 8) & 255);
HXDLIN( 217)														if ((this20 == 0)) {
HXDLIN( 217)															g2 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float b21;
HXDLIN( 217)														int this21 = (col & 255);
HXDLIN( 217)														if ((this21 == 0)) {
HXDLIN( 217)															b21 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 217)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 217)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 217)														int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 217)														int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 217)														int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 217)														{
HXDLIN( 217)															int hitQuad3;
HXDLIN( 217)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)																hitQuad3 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXDLIN( 217)																hitQuad3 = blended;
            															}
HXDLIN( 217)															::iterMagic::Iimg_obj::set(undoImage->image,location,hitQuad3);
            														}
            													}
            													else {
HXDLIN( 217)														::Dynamic this22 = undoImage->image;
HXDLIN( 217)														int index2;
HXDLIN( 217)														if (undoImage->useVirtualPos) {
HXDLIN( 217)															index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            														}
            														else {
HXDLIN( 217)															index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            														}
HXDLIN( 217)														int hitQuad4;
HXDLIN( 217)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)															hitQuad4 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            														}
            														else {
HXDLIN( 217)															hitQuad4 = c2;
            														}
HXDLIN( 217)														::iterMagic::Iimg_obj::set(this22,index2,hitQuad4);
            													}
            												}
            												else {
HXDLIN( 217)													if (forceClear) {
HXDLIN( 217)														::Dynamic this23 = undoImage->image;
HXDLIN( 217)														int x2 = (dx1 - rectLeft);
HXDLIN( 217)														int y2 = (dy1 - rectTop);
HXDLIN( 217)														int index3;
HXDLIN( 217)														if (undoImage->useVirtualPos) {
HXDLIN( 217)															index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            														}
            														else {
HXDLIN( 217)															index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            														}
HXDLIN( 217)														::iterMagic::Iimg_obj::set(this23,index3,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 217)						bool found = false;
HXDLIN( 217)						Float s = ((Float)0.);
HXDLIN( 217)						Float t = ((Float)0.);
HXDLIN( 217)						Float sxx = ((Float)0.);
HXDLIN( 217)						Float txx = ((Float)0.);
HXDLIN( 217)						{
HXDLIN( 217)							int _g_min = xIter3->start;
HXDLIN( 217)							int _g_max = xIter3->max;
HXDLIN( 217)							while((_g_min < _g_max)){
HXDLIN( 217)								_g_min = (_g_min + 1);
HXDLIN( 217)								int x3 = (_g_min - 1);
HXLINE(  60)								sxx = (sx * ( (Float)(x3) ));
HXLINE(  61)								txx = (tx * ( (Float)(x3) ));
HXLINE(  62)								found = false;
HXLINE( 217)								{
HXDLIN( 217)									int _g_min1 = yIter3->start;
HXDLIN( 217)									int _g_max1 = yIter3->max;
HXDLIN( 217)									while((_g_min1 < _g_max1)){
HXDLIN( 217)										_g_min1 = (_g_min1 + 1);
HXDLIN( 217)										int y3 = (_g_min1 - 1);
HXLINE(  64)										s = ((s0 + sxx) + (sy * ( (Float)(y3) )));
HXLINE(  65)										t = ((t0 + txx) + (ty * ( (Float)(y3) )));
HXLINE( 217)										bool hitQuad5;
HXDLIN( 217)										if (!((s <= 0))) {
HXDLIN( 217)											hitQuad5 = (t <= 0);
            										}
            										else {
HXDLIN( 217)											hitQuad5 = true;
            										}
HXDLIN( 217)										if (hitQuad5) {
HXDLIN( 217)											if (found) {
HXDLIN( 217)												goto _hx_goto_263;
            											}
            										}
            										else {
HXDLIN( 217)											if (((s + t) < A)) {
HXDLIN( 217)												{
HXDLIN( 217)													int c3 = color;
HXDLIN( 217)													bool hitQuad6;
HXDLIN( 217)													if ((((c3 >> 24) & 255) < 254)) {
HXDLIN( 217)														hitQuad6 = this1->transparent;
            													}
            													else {
HXDLIN( 217)														hitQuad6 = false;
            													}
HXDLIN( 217)													if (hitQuad6) {
HXDLIN( 217)														int location1;
HXDLIN( 217)														if (this1->useVirtualPos) {
HXDLIN( 217)															location1 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - this1->virtualY) * ( (Float)(this1->width) )) + x3) - this1->virtualX));
            														}
            														else {
HXDLIN( 217)															location1 = ::Std_obj::_hx_int(( (Float)(((y3 * this1->width) + x3)) ));
            														}
HXDLIN( 217)														int this24 = ::iterMagic::Iimg_obj::get(this1->image,location1);
HXDLIN( 217)														int this25;
HXDLIN( 217)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)															this25 = ((((((this24 >> 24) & 255) << 24) | ((this24 & 255) << 16)) | (((this24 >> 8) & 255) << 8)) | ((this24 >> 16) & 255));
            														}
            														else {
HXDLIN( 217)															this25 = this24;
            														}
HXDLIN( 217)														Float a12;
HXDLIN( 217)														int this26 = ((this25 >> 24) & 255);
HXDLIN( 217)														if ((this26 == 0)) {
HXDLIN( 217)															a12 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															a12 = (( (Float)(this26) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float r11;
HXDLIN( 217)														int this27 = ((this25 >> 16) & 255);
HXDLIN( 217)														if ((this27 == 0)) {
HXDLIN( 217)															r11 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															r11 = (( (Float)(this27) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float g11;
HXDLIN( 217)														int this28 = ((this25 >> 8) & 255);
HXDLIN( 217)														if ((this28 == 0)) {
HXDLIN( 217)															g11 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															g11 = (( (Float)(this28) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float b12;
HXDLIN( 217)														int this29 = (this25 & 255);
HXDLIN( 217)														if ((this29 == 0)) {
HXDLIN( 217)															b12 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															b12 = (( (Float)(this29) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float a21;
HXDLIN( 217)														int this30 = ((color >> 24) & 255);
HXDLIN( 217)														if ((this30 == 0)) {
HXDLIN( 217)															a21 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															a21 = (( (Float)(this30) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float r21;
HXDLIN( 217)														int this31 = ((color >> 16) & 255);
HXDLIN( 217)														if ((this31 == 0)) {
HXDLIN( 217)															r21 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															r21 = (( (Float)(this31) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float g21;
HXDLIN( 217)														int this32 = ((color >> 8) & 255);
HXDLIN( 217)														if ((this32 == 0)) {
HXDLIN( 217)															g21 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															g21 = (( (Float)(this32) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float b22;
HXDLIN( 217)														int this33 = (color & 255);
HXDLIN( 217)														if ((this33 == 0)) {
HXDLIN( 217)															b22 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															b22 = (( (Float)(this33) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 217)														int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 217)														int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 217)														int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 217)														int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 217)														int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 217)														{
HXDLIN( 217)															int hitQuad7;
HXDLIN( 217)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)																hitQuad7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            															}
            															else {
HXDLIN( 217)																hitQuad7 = blended1;
            															}
HXDLIN( 217)															::iterMagic::Iimg_obj::set(this1->image,location1,hitQuad7);
            														}
            													}
            													else {
HXDLIN( 217)														::Dynamic this34 = this1->image;
HXDLIN( 217)														int index4;
HXDLIN( 217)														if (this1->useVirtualPos) {
HXDLIN( 217)															index4 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - this1->virtualY) * ( (Float)(this1->width) )) + x3) - this1->virtualX));
            														}
            														else {
HXDLIN( 217)															index4 = ::Std_obj::_hx_int(( (Float)(((y3 * this1->width) + x3)) ));
            														}
HXDLIN( 217)														int hitQuad8;
HXDLIN( 217)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)															hitQuad8 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            														}
            														else {
HXDLIN( 217)															hitQuad8 = c3;
            														}
HXDLIN( 217)														::iterMagic::Iimg_obj::set(this34,index4,hitQuad8);
            													}
            												}
HXLINE(  73)												found = true;
            											}
            											else {
HXDLIN( 217)												if (found) {
HXDLIN( 217)													goto _hx_goto_263;
            												}
            											}
            										}
            									}
            									_hx_goto_263:;
            								}
            							}
            						}
            					}
            				}
HXDLIN( 217)				bool hasUndo1 = false;
HXDLIN( 217)				int aA = ((color >> 24) & 255);
HXDLIN( 217)				int rA = ((color >> 16) & 255);
HXDLIN( 217)				int gA = ((color >> 8) & 255);
HXDLIN( 217)				int bA = (color & 255);
HXDLIN( 217)				Float bcx = (bx - cx);
HXDLIN( 217)				Float bcy = (by - cy);
HXDLIN( 217)				Float acx = (ex - cx);
HXDLIN( 217)				Float acy = (ey - cy);
HXDLIN( 217)				Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 217)				Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 217)				Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 217)				Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 217)				if ((ex > bx)) {
HXDLIN( 217)					if ((ex > cx)) {
HXDLIN( 217)						int min4;
HXDLIN( 217)						if ((bx > cx)) {
HXDLIN( 217)							min4 = ::Math_obj::floor(cx);
            						}
            						else {
HXDLIN( 217)							min4 = ::Math_obj::floor(bx);
            						}
HXDLIN( 217)						int ii_min8 = min4;
HXDLIN( 217)						int ii_max8 = ::Math_obj::ceil(ex);
HXDLIN( 217)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            					}
            					else {
HXDLIN( 217)						int ii_min9 = ::Math_obj::floor(bx);
HXDLIN( 217)						int ii_max9 = ::Math_obj::ceil(cx);
HXDLIN( 217)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            					}
            				}
            				else {
HXDLIN( 217)					if ((bx > cx)) {
HXDLIN( 217)						int min5;
HXDLIN( 217)						if ((ex > cx)) {
HXDLIN( 217)							min5 = ::Math_obj::floor(cx);
            						}
            						else {
HXDLIN( 217)							min5 = ::Math_obj::ceil(ex);
            						}
HXDLIN( 217)						int ii_min10 = min5;
HXDLIN( 217)						int ii_max10 = ::Math_obj::ceil(bx);
HXDLIN( 217)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            					}
            					else {
HXDLIN( 217)						int ii_min11 = ::Math_obj::floor(ex);
HXDLIN( 217)						int ii_max11 = ::Math_obj::ceil(cx);
HXDLIN( 217)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 217)				if ((ey > by)) {
HXDLIN( 217)					if ((ey > cy)) {
HXDLIN( 217)						int min6;
HXDLIN( 217)						if ((by > cy)) {
HXDLIN( 217)							min6 = ::Math_obj::floor(cy);
            						}
            						else {
HXDLIN( 217)							min6 = ::Math_obj::floor(by);
            						}
HXDLIN( 217)						int ii_min12 = min6;
HXDLIN( 217)						int ii_max12 = ::Math_obj::ceil(ey);
HXDLIN( 217)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            					}
            					else {
HXDLIN( 217)						int ii_min13 = ::Math_obj::floor(by);
HXDLIN( 217)						int ii_max13 = ::Math_obj::ceil(cy);
HXDLIN( 217)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            					}
            				}
            				else {
HXDLIN( 217)					if ((by > cy)) {
HXDLIN( 217)						int min7;
HXDLIN( 217)						if ((ey > cy)) {
HXDLIN( 217)							min7 = ::Math_obj::floor(cy);
            						}
            						else {
HXDLIN( 217)							min7 = ::Math_obj::ceil(ey);
            						}
HXDLIN( 217)						int ii_min14 = min7;
HXDLIN( 217)						int ii_max14 = ::Math_obj::ceil(by);
HXDLIN( 217)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            					}
            					else {
HXDLIN( 217)						int ii_min15 = ::Math_obj::floor(ey);
HXDLIN( 217)						int ii_max15 = ::Math_obj::ceil(cy);
HXDLIN( 217)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 217)				if (hasUndo1) {
HXDLIN( 217)					int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 217)					int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 217)					 ::Dynamic imageType1 = null();
HXDLIN( 217)					 ::pi_xy::ImageStruct this35 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 217)					if (::hx::IsNull( imageType1 )) {
HXLINE(  54)						imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 217)					::Dynamic undoImage4;
HXDLIN( 217)					switch((int)(( (int)(imageType1) ))){
            						case (int)0: {
HXDLIN( 217)							 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::BytesImg b5 = byt1;
HXDLIN( 217)							{
HXDLIN( 217)								b5->width = width1;
HXDLIN( 217)								b5->height = height1;
HXDLIN( 217)								b5->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 217)								b5->data = ::haxe::io::Bytes_obj::alloc((b5->length * 4));
HXDLIN( 217)								{
HXDLIN( 217)									int len2 = b5->length;
HXDLIN( 217)									int w1 = 0;
HXDLIN( 217)									{
HXDLIN( 217)										int _g20 = 0;
HXDLIN( 217)										int _g21 = b5->height;
HXDLIN( 217)										while((_g20 < _g21)){
HXDLIN( 217)											_g20 = (_g20 + 1);
HXDLIN( 217)											int y4 = (_g20 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												int _g22 = 0;
HXDLIN( 217)												int _g23 = b5->width;
HXDLIN( 217)												while((_g22 < _g23)){
HXDLIN( 217)													_g22 = (_g22 + 1);
HXDLIN( 217)													int x4 = (_g22 - 1);
HXDLIN( 217)													{
HXDLIN( 217)														w1 = (w1 + 1);
HXDLIN( 217)														b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w1 = (w1 + 1);
HXDLIN( 217)														b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w1 = (w1 + 1);
HXDLIN( 217)														b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w1 = (w1 + 1);
HXDLIN( 217)														b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage4 = b5;
            						}
            						break;
            						case (int)1: {
HXDLIN( 217)							 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::ArrIntImg a6 = arrI1;
HXDLIN( 217)							{
HXDLIN( 217)								a6->width = width1;
HXDLIN( 217)								a6->height = height1;
HXDLIN( 217)								a6->data = ::Array_obj< int >::__new(0);
HXDLIN( 217)								a6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 217)								{
HXDLIN( 217)									int _g24 = 0;
HXDLIN( 217)									int _g25 = a6->length;
HXDLIN( 217)									while((_g24 < _g25)){
HXDLIN( 217)										_g24 = (_g24 + 1);
HXDLIN( 217)										int i6 = (_g24 - 1);
HXDLIN( 217)										a6->data[i6] = 0;
            									}
            								}
            							}
HXDLIN( 217)							undoImage4 = a6;
            						}
            						break;
            						case (int)2: {
HXDLIN( 217)							 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::U32ArrImg b6 = u32a1;
HXDLIN( 217)							{
HXDLIN( 217)								b6->width = width1;
HXDLIN( 217)								b6->height = height1;
HXDLIN( 217)								b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 217)								int size1 = (b6->length * 4);
HXDLIN( 217)								b6->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 217)								{
HXDLIN( 217)									int _g26 = 0;
HXDLIN( 217)									int _g27 = b6->length;
HXDLIN( 217)									while((_g26 < _g27)){
HXDLIN( 217)										_g26 = (_g26 + 1);
HXDLIN( 217)										int i7 = (_g26 - 1);
HXDLIN( 217)										{
HXDLIN( 217)											 ::haxe::io::ArrayBufferViewImpl this36 = b6->data;
HXDLIN( 217)											bool undoImage5;
HXDLIN( 217)											if ((i7 >= 0)) {
HXDLIN( 217)												undoImage5 = (i7 < (this36->byteLength >> 2));
            											}
            											else {
HXDLIN( 217)												undoImage5 = false;
            											}
HXDLIN( 217)											if (undoImage5) {
HXDLIN( 217)												 ::haxe::io::Bytes _this1 = this36->bytes;
HXDLIN( 217)												int pos1 = ((i7 << 2) + this36->byteOffset);
HXDLIN( 217)												_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 217)												_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage4 = b6;
            						}
            						break;
            						case (int)3: {
HXDLIN( 217)							 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 217)							{
HXDLIN( 217)								v2->width = width1;
HXDLIN( 217)								v2->height = height1;
HXDLIN( 217)								v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 217)								v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 217)								{
HXDLIN( 217)									int _g28 = 0;
HXDLIN( 217)									int _g29 = v2->length;
HXDLIN( 217)									while((_g28 < _g29)){
HXDLIN( 217)										_g28 = (_g28 + 1);
HXDLIN( 217)										int i8 = (_g28 - 1);
HXDLIN( 217)										v2->data->__unsafe_set(i8,0);
            									}
            								}
            							}
HXDLIN( 217)							undoImage4 = v2;
            						}
            						break;
            						case (int)4: {
HXDLIN( 217)							 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::StackIntImg b7 = sInt1;
HXDLIN( 217)							{
HXDLIN( 217)								b7->width = width1;
HXDLIN( 217)								b7->height = height1;
HXDLIN( 217)								b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 217)								b7->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 217)								{
HXDLIN( 217)									int len3 = b7->length;
HXDLIN( 217)									 ::haxe::ds::GenericStack_Int d1 = b7->data;
HXDLIN( 217)									if (::hx::IsNull( d1->head )) {
HXDLIN( 217)										int _g30 = 0;
HXDLIN( 217)										int _g31 = len3;
HXDLIN( 217)										while((_g30 < _g31)){
HXDLIN( 217)											_g30 = (_g30 + 1);
HXDLIN( 217)											int i9 = (_g30 - 1);
HXDLIN( 217)											d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            										}
            									}
            									else {
HXDLIN( 217)										int _g32 = 0;
HXDLIN( 217)										int _g33 = len3;
HXDLIN( 217)										while((_g32 < _g33)){
HXDLIN( 217)											_g32 = (_g32 + 1);
HXDLIN( 217)											int i10 = (_g32 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int l1 = b7->data->head;
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 217)												{
HXDLIN( 217)													int _g34 = 0;
HXDLIN( 217)													int _g35 = i10;
HXDLIN( 217)													while((_g34 < _g35)){
HXDLIN( 217)														_g34 = (_g34 + 1);
HXDLIN( 217)														int i11 = (_g34 - 1);
HXLINE( 345)														prev1 = l1;
HXLINE( 346)														l1 = l1->next;
            													}
            												}
HXLINE( 217)												if (::hx::IsNull( prev1 )) {
HXDLIN( 217)													b7->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 217)													l1 = null();
            												}
            												else {
HXDLIN( 217)													prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 217)													l1 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage4 = b7;
            						}
            						break;
            					}
HXDLIN( 217)					this35->image = undoImage4;
HXDLIN( 217)					this35->width = width1;
HXDLIN( 217)					this35->height = height1;
HXDLIN( 217)					this35->imageType = ( (int)(imageType1) );
HXDLIN( 217)					undoImage3 = this35;
HXDLIN( 217)					{
HXDLIN( 217)						int rectLeft1 = xIter31->start;
HXDLIN( 217)						int rectTop1 = yIter31->start;
HXDLIN( 217)						int rectRight1 = xIter31->max;
HXDLIN( 217)						bool forceClear1 = false;
HXDLIN( 217)						{
HXDLIN( 217)							int _g36 = rectTop1;
HXDLIN( 217)							int _g37 = yIter31->max;
HXDLIN( 217)							while((_g36 < _g37)){
HXDLIN( 217)								_g36 = (_g36 + 1);
HXDLIN( 217)								int dy2 = (_g36 - 1);
HXDLIN( 217)								{
HXDLIN( 217)									int _g38 = rectLeft1;
HXDLIN( 217)									int _g39 = rectRight1;
HXDLIN( 217)									while((_g38 < _g39)){
HXDLIN( 217)										_g38 = (_g38 + 1);
HXDLIN( 217)										int dx2 = (_g38 - 1);
HXDLIN( 217)										::Dynamic this37 = this1->image;
HXDLIN( 217)										int index5;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx2) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this1->width) + dx2)) ));
            										}
HXDLIN( 217)										int c4 = ::iterMagic::Iimg_obj::get(this37,index5);
HXDLIN( 217)										int col1;
HXDLIN( 217)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)											col1 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXDLIN( 217)											col1 = c4;
            										}
HXDLIN( 217)										bool hitQuad9;
HXDLIN( 217)										if (this1->useMask) {
HXDLIN( 217)											hitQuad9 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 217)											hitQuad9 = false;
            										}
HXDLIN( 217)										if (hitQuad9) {
HXDLIN( 217)											 ::pi_xy::ImageStruct this38 = this1->mask;
HXDLIN( 217)											::Dynamic this39 = this38->image;
HXDLIN( 217)											int index6;
HXDLIN( 217)											if (this38->useVirtualPos) {
HXDLIN( 217)												index6 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this38->virtualY) * ( (Float)(this38->width) )) + dx2) - this38->virtualX));
            											}
            											else {
HXDLIN( 217)												index6 = ::Std_obj::_hx_int(( (Float)(((dy2 * this38->width) + dx2)) ));
            											}
HXDLIN( 217)											int c5 = ::iterMagic::Iimg_obj::get(this39,index6);
HXDLIN( 217)											int v3;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												v3 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												v3 = c5;
            											}
HXDLIN( 217)											int maskPixel1 = v3;
HXDLIN( 217)											int this40 = col1;
HXDLIN( 217)											if ((maskPixel1 == 0)) {
HXDLIN( 217)												col1 = this40;
            											}
            											else {
HXDLIN( 217)												Float m01;
HXDLIN( 217)												int this41 = ((maskPixel1 >> 24) & 255);
HXDLIN( 217)												if ((this41 == 0)) {
HXDLIN( 217)													m01 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m01 = (( (Float)(this41) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m11;
HXDLIN( 217)												int this42 = ((maskPixel1 >> 16) & 255);
HXDLIN( 217)												if ((this42 == 0)) {
HXDLIN( 217)													m11 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m11 = (( (Float)(this42) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m21;
HXDLIN( 217)												int this43 = ((maskPixel1 >> 8) & 255);
HXDLIN( 217)												if ((this43 == 0)) {
HXDLIN( 217)													m21 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m21 = (( (Float)(this43) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m31;
HXDLIN( 217)												int this44 = (maskPixel1 & 255);
HXDLIN( 217)												if ((this44 == 0)) {
HXDLIN( 217)													m31 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m31 = (( (Float)(this44) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this40 >> 24) & 255)) )));
HXDLIN( 217)												int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this40 >> 16) & 255)) )));
HXDLIN( 217)												int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this40 >> 8) & 255)) )));
HXDLIN( 217)												int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this40 & 255)) )));
HXDLIN( 217)												col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 217)										if ((col1 != 0)) {
HXDLIN( 217)											int x5 = (dx2 - rectLeft1);
HXDLIN( 217)											int y5 = (dy2 - rectTop1);
HXDLIN( 217)											int c6 = col1;
HXDLIN( 217)											bool hitQuad10;
HXDLIN( 217)											if ((((c6 >> 24) & 255) < 254)) {
HXDLIN( 217)												hitQuad10 = undoImage3->transparent;
            											}
            											else {
HXDLIN( 217)												hitQuad10 = false;
            											}
HXDLIN( 217)											if (hitQuad10) {
HXDLIN( 217)												int location2;
HXDLIN( 217)												if (undoImage3->useVirtualPos) {
HXDLIN( 217)													location2 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            												}
            												else {
HXDLIN( 217)													location2 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            												}
HXDLIN( 217)												int this45 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 217)												int this46;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													this46 = ((((((this45 >> 24) & 255) << 24) | ((this45 & 255) << 16)) | (((this45 >> 8) & 255) << 8)) | ((this45 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													this46 = this45;
            												}
HXDLIN( 217)												Float a13;
HXDLIN( 217)												int this47 = ((this46 >> 24) & 255);
HXDLIN( 217)												if ((this47 == 0)) {
HXDLIN( 217)													a13 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a13 = (( (Float)(this47) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r12;
HXDLIN( 217)												int this48 = ((this46 >> 16) & 255);
HXDLIN( 217)												if ((this48 == 0)) {
HXDLIN( 217)													r12 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r12 = (( (Float)(this48) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g12;
HXDLIN( 217)												int this49 = ((this46 >> 8) & 255);
HXDLIN( 217)												if ((this49 == 0)) {
HXDLIN( 217)													g12 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g12 = (( (Float)(this49) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b13;
HXDLIN( 217)												int this50 = (this46 & 255);
HXDLIN( 217)												if ((this50 == 0)) {
HXDLIN( 217)													b13 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b13 = (( (Float)(this50) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a22;
HXDLIN( 217)												int this51 = ((col1 >> 24) & 255);
HXDLIN( 217)												if ((this51 == 0)) {
HXDLIN( 217)													a22 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a22 = (( (Float)(this51) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r22;
HXDLIN( 217)												int this52 = ((col1 >> 16) & 255);
HXDLIN( 217)												if ((this52 == 0)) {
HXDLIN( 217)													r22 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r22 = (( (Float)(this52) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g22;
HXDLIN( 217)												int this53 = ((col1 >> 8) & 255);
HXDLIN( 217)												if ((this53 == 0)) {
HXDLIN( 217)													g22 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g22 = (( (Float)(this53) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b23;
HXDLIN( 217)												int this54 = (col1 & 255);
HXDLIN( 217)												if ((this54 == 0)) {
HXDLIN( 217)													b23 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b23 = (( (Float)(this54) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 217)												int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 217)												int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 217)												int b8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 217)												int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 217)												int blended2 = ((((a7 << 24) | (r4 << 16)) | (g4 << 8)) | b8);
HXDLIN( 217)												{
HXDLIN( 217)													int hitQuad11;
HXDLIN( 217)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)														hitQuad11 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            													}
            													else {
HXDLIN( 217)														hitQuad11 = blended2;
            													}
HXDLIN( 217)													::iterMagic::Iimg_obj::set(undoImage3->image,location2,hitQuad11);
            												}
            											}
            											else {
HXDLIN( 217)												::Dynamic this55 = undoImage3->image;
HXDLIN( 217)												int index7;
HXDLIN( 217)												if (undoImage3->useVirtualPos) {
HXDLIN( 217)													index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            												}
            												else {
HXDLIN( 217)													index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            												}
HXDLIN( 217)												int hitQuad12;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad12 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad12 = c6;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this55,index7,hitQuad12);
            											}
            										}
            										else {
HXDLIN( 217)											if (forceClear1) {
HXDLIN( 217)												::Dynamic this56 = undoImage3->image;
HXDLIN( 217)												int x6 = (dx2 - rectLeft1);
HXDLIN( 217)												int y6 = (dy2 - rectTop1);
HXDLIN( 217)												int index8;
HXDLIN( 217)												if (undoImage3->useVirtualPos) {
HXDLIN( 217)													index8 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x6) - undoImage3->virtualX));
            												}
            												else {
HXDLIN( 217)													index8 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x6)) ));
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this56,index8,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 217)				bool found1 = false;
HXDLIN( 217)				{
HXDLIN( 217)					int _g_min2 = xIter31->start;
HXDLIN( 217)					int _g_max2 = xIter31->max;
HXDLIN( 217)					while((_g_min2 < _g_max2)){
HXDLIN( 217)						_g_min2 = (_g_min2 + 1);
HXDLIN( 217)						int px1 = (_g_min2 - 1);
HXDLIN( 217)						Float pcx = (( (Float)(px1) ) - cx);
HXLINE( 619)						found1 = false;
HXLINE( 217)						{
HXDLIN( 217)							int _g_min3 = yIter31->start;
HXDLIN( 217)							int _g_max3 = yIter31->max;
HXDLIN( 217)							while((_g_min3 < _g_max3)){
HXDLIN( 217)								_g_min3 = (_g_min3 + 1);
HXDLIN( 217)								int py1 = (_g_min3 - 1);
HXDLIN( 217)								Float pcy = (( (Float)(py1) ) - cy);
HXDLIN( 217)								Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 217)								Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 217)								Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 217)								Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 217)								Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 217)								bool hitQuad13;
HXDLIN( 217)								bool hitQuad14;
HXDLIN( 217)								if ((ratioA >= 0)) {
HXDLIN( 217)									hitQuad14 = (ratioB >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad14 = false;
            								}
HXDLIN( 217)								if (hitQuad14) {
HXDLIN( 217)									hitQuad13 = (ratioC >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad13 = false;
            								}
HXDLIN( 217)								if (hitQuad13) {
HXDLIN( 217)									int i12 = ::Std_obj::_hx_int((( (Float)(aA) ) * (soft * ratioB)));
HXDLIN( 217)									if ((i12 > 255)) {
HXLINE(  24)										i12 = 255;
            									}
HXLINE( 217)									if ((i12 < 0)) {
HXLINE(  25)										i12 = 0;
            									}
HXLINE( 217)									int a8 = i12;
HXDLIN( 217)									int i13 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 217)									if ((i13 > 255)) {
HXLINE(  24)										i13 = 255;
            									}
HXLINE( 217)									if ((i13 < 0)) {
HXLINE(  25)										i13 = 0;
            									}
HXLINE( 217)									int r5 = i13;
HXDLIN( 217)									int i14 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 217)									if ((i14 > 255)) {
HXLINE(  24)										i14 = 255;
            									}
HXLINE( 217)									if ((i14 < 0)) {
HXLINE(  25)										i14 = 0;
            									}
HXLINE( 217)									int g5 = i14;
HXDLIN( 217)									int i15 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 217)									if ((i15 > 255)) {
HXLINE(  24)										i15 = 255;
            									}
HXLINE( 217)									if ((i15 < 0)) {
HXLINE(  25)										i15 = 0;
            									}
HXLINE( 217)									int b9 = i15;
HXDLIN( 217)									{
HXDLIN( 217)										int location3;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											location3 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											location3 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            										}
HXDLIN( 217)										bool hitQuad15;
HXDLIN( 217)										if (this1->transparent) {
HXDLIN( 217)											hitQuad15 = (a8 < 254);
            										}
            										else {
HXDLIN( 217)											hitQuad15 = false;
            										}
HXDLIN( 217)										if (hitQuad15) {
HXDLIN( 217)											int this57 = ::iterMagic::Iimg_obj::get(this1->image,location3);
HXDLIN( 217)											int old;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												old = ((((((this57 >> 24) & 255) << 24) | ((this57 & 255) << 16)) | (((this57 >> 8) & 255) << 8)) | ((this57 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												old = this57;
            											}
HXDLIN( 217)											int rhs = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN( 217)											Float a14;
HXDLIN( 217)											int this58 = ((old >> 24) & 255);
HXDLIN( 217)											if ((this58 == 0)) {
HXDLIN( 217)												a14 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a14 = (( (Float)(this58) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r13;
HXDLIN( 217)											int this59 = ((old >> 16) & 255);
HXDLIN( 217)											if ((this59 == 0)) {
HXDLIN( 217)												r13 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r13 = (( (Float)(this59) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g13;
HXDLIN( 217)											int this60 = ((old >> 8) & 255);
HXDLIN( 217)											if ((this60 == 0)) {
HXDLIN( 217)												g13 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g13 = (( (Float)(this60) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b14;
HXDLIN( 217)											int this61 = (old & 255);
HXDLIN( 217)											if ((this61 == 0)) {
HXDLIN( 217)												b14 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b14 = (( (Float)(this61) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a23;
HXDLIN( 217)											int this62 = ((rhs >> 24) & 255);
HXDLIN( 217)											if ((this62 == 0)) {
HXDLIN( 217)												a23 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a23 = (( (Float)(this62) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r23;
HXDLIN( 217)											int this63 = ((rhs >> 16) & 255);
HXDLIN( 217)											if ((this63 == 0)) {
HXDLIN( 217)												r23 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r23 = (( (Float)(this63) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g23;
HXDLIN( 217)											int this64 = ((rhs >> 8) & 255);
HXDLIN( 217)											if ((this64 == 0)) {
HXDLIN( 217)												g23 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g23 = (( (Float)(this64) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b24;
HXDLIN( 217)											int this65 = (rhs & 255);
HXDLIN( 217)											if ((this65 == 0)) {
HXDLIN( 217)												b24 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b24 = (( (Float)(this65) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 217)											int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 217)											int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 217)											int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 217)											int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 217)											int blended3 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 217)											{
HXDLIN( 217)												int hitQuad16;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad16 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad16 = blended3;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this1->image,location3,hitQuad16);
            											}
            										}
            										else {
HXDLIN( 217)											int value;
HXDLIN( 217)											if (this1->isLittle) {
HXDLIN( 217)												value = ((((a8 << 24) | (b9 << 16)) | (g5 << 8)) | r5);
            											}
            											else {
HXDLIN( 217)												value = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
            											}
HXDLIN( 217)											::iterMagic::Iimg_obj::set(this1->image,location3,value);
            										}
            									}
HXLINE( 633)									found1 = true;
            								}
            								else {
HXDLIN( 217)									if (found1) {
HXDLIN( 217)										goto _hx_goto_275;
            									}
            								}
            							}
            							_hx_goto_275:;
            						}
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN( 217)				int v_undoY;
HXDLIN( 217)				int v_undoX;
HXDLIN( 217)				Float v_ty;
HXDLIN( 217)				Float v_tx;
HXDLIN( 217)				Float v_t0;
HXDLIN( 217)				Float v_sy;
HXDLIN( 217)				Float v_sx;
HXDLIN( 217)				Float v_s0;
HXDLIN( 217)				Float v_A;
HXDLIN( 217)				Float ax1 = ex;
HXDLIN( 217)				Float ay1 = ey;
HXDLIN( 217)				 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN( 217)				Float bx2 = bx;
HXDLIN( 217)				Float by2 = by;
HXDLIN( 217)				Float cx2 = cx;
HXDLIN( 217)				Float cy2 = cy;
HXDLIN( 217)				bool adjustWinding1 = (((((ax1 * by2) - (bx2 * ay1)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay1) - (ax1 * cy2))) > 0);
HXDLIN( 217)				if (!(adjustWinding1)) {
HXDLIN( 217)					Float bx_1 = bx2;
HXDLIN( 217)					Float by_1 = by2;
HXLINE(  24)					bx2 = cx2;
HXLINE(  25)					by2 = cy2;
HXLINE(  26)					cx2 = bx_1;
HXLINE(  27)					cy2 = by_1;
            				}
HXLINE( 217)				Float v_ax = ax1;
HXDLIN( 217)				Float v_ay = ay1;
HXDLIN( 217)				Float v_bx = bx2;
HXDLIN( 217)				Float v_by = by2;
HXDLIN( 217)				Float v_cx = cx2;
HXDLIN( 217)				Float v_cy = cy2;
HXDLIN( 217)				bool v_preCalculated = true;
HXDLIN( 217)				{
HXDLIN( 217)					v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN( 217)					v_sx = (v_cy - v_ay);
HXDLIN( 217)					v_sy = (v_ax - v_cx);
HXDLIN( 217)					v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN( 217)					v_tx = (v_ay - v_by);
HXDLIN( 217)					v_ty = (v_bx - v_ax);
HXDLIN( 217)					v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN( 217)					Float a10 = v_ax;
HXDLIN( 217)					Float b15 = v_bx;
HXDLIN( 217)					Float c7 = v_cx;
HXDLIN( 217)					if ((a10 > b15)) {
HXDLIN( 217)						if ((a10 > c7)) {
HXDLIN( 217)							int min8;
HXDLIN( 217)							if ((b15 > c7)) {
HXDLIN( 217)								min8 = ::Math_obj::floor(c7);
            							}
            							else {
HXDLIN( 217)								min8 = ::Math_obj::floor(b15);
            							}
HXDLIN( 217)							int ii_min16 = min8;
HXDLIN( 217)							int ii_max16 = ::Math_obj::ceil(a10);
HXDLIN( 217)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            						}
            						else {
HXDLIN( 217)							int ii_min17 = ::Math_obj::floor(b15);
HXDLIN( 217)							int ii_max17 = ::Math_obj::ceil(c7);
HXDLIN( 217)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            						}
            					}
            					else {
HXDLIN( 217)						if ((b15 > c7)) {
HXDLIN( 217)							int min9;
HXDLIN( 217)							if ((a10 > c7)) {
HXDLIN( 217)								min9 = ::Math_obj::floor(c7);
            							}
            							else {
HXDLIN( 217)								min9 = ::Math_obj::ceil(a10);
            							}
HXDLIN( 217)							int ii_min18 = min9;
HXDLIN( 217)							int ii_max18 = ::Math_obj::ceil(b15);
HXDLIN( 217)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            						}
            						else {
HXDLIN( 217)							int ii_min19 = ::Math_obj::floor(a10);
HXDLIN( 217)							int ii_max19 = ::Math_obj::ceil(c7);
HXDLIN( 217)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            						}
            					}
HXDLIN( 217)					Float a15 = v_ay;
HXDLIN( 217)					Float b16 = v_by;
HXDLIN( 217)					Float c8 = v_cy;
HXDLIN( 217)					if ((a15 > b16)) {
HXDLIN( 217)						if ((a15 > c8)) {
HXDLIN( 217)							int min10;
HXDLIN( 217)							if ((b16 > c8)) {
HXDLIN( 217)								min10 = ::Math_obj::floor(c8);
            							}
            							else {
HXDLIN( 217)								min10 = ::Math_obj::floor(b16);
            							}
HXDLIN( 217)							int ii_min20 = min10;
HXDLIN( 217)							int ii_max20 = ::Math_obj::ceil(a15);
HXDLIN( 217)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            						}
            						else {
HXDLIN( 217)							int ii_min21 = ::Math_obj::floor(b16);
HXDLIN( 217)							int ii_max21 = ::Math_obj::ceil(c8);
HXDLIN( 217)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            						}
            					}
            					else {
HXDLIN( 217)						if ((b16 > c8)) {
HXDLIN( 217)							int min11;
HXDLIN( 217)							if ((a15 > c8)) {
HXDLIN( 217)								min11 = ::Math_obj::floor(c8);
            							}
            							else {
HXDLIN( 217)								min11 = ::Math_obj::ceil(a15);
            							}
HXDLIN( 217)							int ii_min22 = min11;
HXDLIN( 217)							int ii_max22 = ::Math_obj::ceil(b16);
HXDLIN( 217)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            						}
            						else {
HXDLIN( 217)							int ii_min23 = ::Math_obj::floor(a15);
HXDLIN( 217)							int ii_max23 = ::Math_obj::ceil(c8);
HXDLIN( 217)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            						}
            					}
            				}
HXDLIN( 217)				if (hasUndo1) {
HXDLIN( 217)					v_undoImage = undoImage3;
HXDLIN( 217)					v_undoX = xIter31->start;
HXDLIN( 217)					v_undoY = yIter31->start;
            				}
HXDLIN( 217)				bool hasUndo2 = false;
HXDLIN( 217)				int aA1 = ((color >> 24) & 255);
HXDLIN( 217)				int rA1 = ((color >> 16) & 255);
HXDLIN( 217)				int gA1 = ((color >> 8) & 255);
HXDLIN( 217)				int bA1 = (color & 255);
HXDLIN( 217)				Float bcx1 = (cx - dx);
HXDLIN( 217)				Float bcy1 = (cy - dy);
HXDLIN( 217)				Float acx1 = (ex - dx);
HXDLIN( 217)				Float acy1 = (ey - dy);
HXDLIN( 217)				Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 217)				Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 217)				Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 217)				Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 217)				if ((ex > cx)) {
HXDLIN( 217)					if ((ex > dx)) {
HXDLIN( 217)						int min12;
HXDLIN( 217)						if ((cx > dx)) {
HXDLIN( 217)							min12 = ::Math_obj::floor(dx);
            						}
            						else {
HXDLIN( 217)							min12 = ::Math_obj::floor(cx);
            						}
HXDLIN( 217)						int ii_min24 = min12;
HXDLIN( 217)						int ii_max24 = ::Math_obj::ceil(ex);
HXDLIN( 217)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            					}
            					else {
HXDLIN( 217)						int ii_min25 = ::Math_obj::floor(cx);
HXDLIN( 217)						int ii_max25 = ::Math_obj::ceil(dx);
HXDLIN( 217)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            					}
            				}
            				else {
HXDLIN( 217)					if ((cx > dx)) {
HXDLIN( 217)						int min13;
HXDLIN( 217)						if ((ex > dx)) {
HXDLIN( 217)							min13 = ::Math_obj::floor(dx);
            						}
            						else {
HXDLIN( 217)							min13 = ::Math_obj::ceil(ex);
            						}
HXDLIN( 217)						int ii_min26 = min13;
HXDLIN( 217)						int ii_max26 = ::Math_obj::ceil(cx);
HXDLIN( 217)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            					}
            					else {
HXDLIN( 217)						int ii_min27 = ::Math_obj::floor(ex);
HXDLIN( 217)						int ii_max27 = ::Math_obj::ceil(dx);
HXDLIN( 217)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 217)				if ((ey > cy)) {
HXDLIN( 217)					if ((ey > dy)) {
HXDLIN( 217)						int min14;
HXDLIN( 217)						if ((cy > dy)) {
HXDLIN( 217)							min14 = ::Math_obj::floor(dy);
            						}
            						else {
HXDLIN( 217)							min14 = ::Math_obj::floor(cy);
            						}
HXDLIN( 217)						int ii_min28 = min14;
HXDLIN( 217)						int ii_max28 = ::Math_obj::ceil(ey);
HXDLIN( 217)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            					}
            					else {
HXDLIN( 217)						int ii_min29 = ::Math_obj::floor(cy);
HXDLIN( 217)						int ii_max29 = ::Math_obj::ceil(dy);
HXDLIN( 217)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            					}
            				}
            				else {
HXDLIN( 217)					if ((cy > dy)) {
HXDLIN( 217)						int min15;
HXDLIN( 217)						if ((ey > dy)) {
HXDLIN( 217)							min15 = ::Math_obj::floor(dy);
            						}
            						else {
HXDLIN( 217)							min15 = ::Math_obj::ceil(ey);
            						}
HXDLIN( 217)						int ii_min30 = min15;
HXDLIN( 217)						int ii_max30 = ::Math_obj::ceil(cy);
HXDLIN( 217)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            					}
            					else {
HXDLIN( 217)						int ii_min31 = ::Math_obj::floor(ey);
HXDLIN( 217)						int ii_max31 = ::Math_obj::ceil(dy);
HXDLIN( 217)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 217)				if (hasUndo2) {
HXDLIN( 217)					int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 217)					int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 217)					 ::Dynamic imageType2 = null();
HXDLIN( 217)					 ::pi_xy::ImageStruct this66 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 217)					if (::hx::IsNull( imageType2 )) {
HXLINE(  54)						imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 217)					::Dynamic undoImage7;
HXDLIN( 217)					switch((int)(( (int)(imageType2) ))){
            						case (int)0: {
HXDLIN( 217)							 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::BytesImg b17 = byt2;
HXDLIN( 217)							{
HXDLIN( 217)								b17->width = width2;
HXDLIN( 217)								b17->height = height2;
HXDLIN( 217)								b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 217)								b17->data = ::haxe::io::Bytes_obj::alloc((b17->length * 4));
HXDLIN( 217)								{
HXDLIN( 217)									int len4 = b17->length;
HXDLIN( 217)									int w2 = 0;
HXDLIN( 217)									{
HXDLIN( 217)										int _g40 = 0;
HXDLIN( 217)										int _g41 = b17->height;
HXDLIN( 217)										while((_g40 < _g41)){
HXDLIN( 217)											_g40 = (_g40 + 1);
HXDLIN( 217)											int y7 = (_g40 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												int _g42 = 0;
HXDLIN( 217)												int _g43 = b17->width;
HXDLIN( 217)												while((_g42 < _g43)){
HXDLIN( 217)													_g42 = (_g42 + 1);
HXDLIN( 217)													int x7 = (_g42 - 1);
HXDLIN( 217)													{
HXDLIN( 217)														w2 = (w2 + 1);
HXDLIN( 217)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w2 = (w2 + 1);
HXDLIN( 217)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w2 = (w2 + 1);
HXDLIN( 217)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w2 = (w2 + 1);
HXDLIN( 217)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage7 = b17;
            						}
            						break;
            						case (int)1: {
HXDLIN( 217)							 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::ArrIntImg a16 = arrI2;
HXDLIN( 217)							{
HXDLIN( 217)								a16->width = width2;
HXDLIN( 217)								a16->height = height2;
HXDLIN( 217)								a16->data = ::Array_obj< int >::__new(0);
HXDLIN( 217)								a16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 217)								{
HXDLIN( 217)									int _g44 = 0;
HXDLIN( 217)									int _g45 = a16->length;
HXDLIN( 217)									while((_g44 < _g45)){
HXDLIN( 217)										_g44 = (_g44 + 1);
HXDLIN( 217)										int i16 = (_g44 - 1);
HXDLIN( 217)										a16->data[i16] = 0;
            									}
            								}
            							}
HXDLIN( 217)							undoImage7 = a16;
            						}
            						break;
            						case (int)2: {
HXDLIN( 217)							 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::U32ArrImg b18 = u32a2;
HXDLIN( 217)							{
HXDLIN( 217)								b18->width = width2;
HXDLIN( 217)								b18->height = height2;
HXDLIN( 217)								b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 217)								int size2 = (b18->length * 4);
HXDLIN( 217)								b18->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 217)								{
HXDLIN( 217)									int _g46 = 0;
HXDLIN( 217)									int _g47 = b18->length;
HXDLIN( 217)									while((_g46 < _g47)){
HXDLIN( 217)										_g46 = (_g46 + 1);
HXDLIN( 217)										int i17 = (_g46 - 1);
HXDLIN( 217)										{
HXDLIN( 217)											 ::haxe::io::ArrayBufferViewImpl this67 = b18->data;
HXDLIN( 217)											bool undoImage8;
HXDLIN( 217)											if ((i17 >= 0)) {
HXDLIN( 217)												undoImage8 = (i17 < (this67->byteLength >> 2));
            											}
            											else {
HXDLIN( 217)												undoImage8 = false;
            											}
HXDLIN( 217)											if (undoImage8) {
HXDLIN( 217)												 ::haxe::io::Bytes _this2 = this67->bytes;
HXDLIN( 217)												int pos2 = ((i17 << 2) + this67->byteOffset);
HXDLIN( 217)												_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 217)												_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage7 = b18;
            						}
            						break;
            						case (int)3: {
HXDLIN( 217)							 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::VecIntImg v4 = vec2;
HXDLIN( 217)							{
HXDLIN( 217)								v4->width = width2;
HXDLIN( 217)								v4->height = height2;
HXDLIN( 217)								v4->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 217)								v4->data = ::Array_obj< int >::__new(v4->length);
HXDLIN( 217)								{
HXDLIN( 217)									int _g48 = 0;
HXDLIN( 217)									int _g49 = v4->length;
HXDLIN( 217)									while((_g48 < _g49)){
HXDLIN( 217)										_g48 = (_g48 + 1);
HXDLIN( 217)										int i18 = (_g48 - 1);
HXDLIN( 217)										v4->data->__unsafe_set(i18,0);
            									}
            								}
            							}
HXDLIN( 217)							undoImage7 = v4;
            						}
            						break;
            						case (int)4: {
HXDLIN( 217)							 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::StackIntImg b19 = sInt2;
HXDLIN( 217)							{
HXDLIN( 217)								b19->width = width2;
HXDLIN( 217)								b19->height = height2;
HXDLIN( 217)								b19->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 217)								b19->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 217)								{
HXDLIN( 217)									int len5 = b19->length;
HXDLIN( 217)									 ::haxe::ds::GenericStack_Int d2 = b19->data;
HXDLIN( 217)									if (::hx::IsNull( d2->head )) {
HXDLIN( 217)										int _g50 = 0;
HXDLIN( 217)										int _g51 = len5;
HXDLIN( 217)										while((_g50 < _g51)){
HXDLIN( 217)											_g50 = (_g50 + 1);
HXDLIN( 217)											int i19 = (_g50 - 1);
HXDLIN( 217)											d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            										}
            									}
            									else {
HXDLIN( 217)										int _g52 = 0;
HXDLIN( 217)										int _g53 = len5;
HXDLIN( 217)										while((_g52 < _g53)){
HXDLIN( 217)											_g52 = (_g52 + 1);
HXDLIN( 217)											int i20 = (_g52 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int l2 = b19->data->head;
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 217)												{
HXDLIN( 217)													int _g54 = 0;
HXDLIN( 217)													int _g55 = i20;
HXDLIN( 217)													while((_g54 < _g55)){
HXDLIN( 217)														_g54 = (_g54 + 1);
HXDLIN( 217)														int i21 = (_g54 - 1);
HXLINE( 345)														prev2 = l2;
HXLINE( 346)														l2 = l2->next;
            													}
            												}
HXLINE( 217)												if (::hx::IsNull( prev2 )) {
HXDLIN( 217)													b19->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 217)													l2 = null();
            												}
            												else {
HXDLIN( 217)													prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 217)													l2 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage7 = b19;
            						}
            						break;
            					}
HXDLIN( 217)					this66->image = undoImage7;
HXDLIN( 217)					this66->width = width2;
HXDLIN( 217)					this66->height = height2;
HXDLIN( 217)					this66->imageType = ( (int)(imageType2) );
HXDLIN( 217)					undoImage6 = this66;
HXDLIN( 217)					{
HXDLIN( 217)						int rectLeft2 = xIter32->start;
HXDLIN( 217)						int rectTop2 = yIter32->start;
HXDLIN( 217)						int rectRight2 = xIter32->max;
HXDLIN( 217)						bool forceClear2 = false;
HXDLIN( 217)						{
HXDLIN( 217)							int _g56 = rectTop2;
HXDLIN( 217)							int _g57 = yIter32->max;
HXDLIN( 217)							while((_g56 < _g57)){
HXDLIN( 217)								_g56 = (_g56 + 1);
HXDLIN( 217)								int dy3 = (_g56 - 1);
HXDLIN( 217)								{
HXDLIN( 217)									int _g58 = rectLeft2;
HXDLIN( 217)									int _g59 = rectRight2;
HXDLIN( 217)									while((_g58 < _g59)){
HXDLIN( 217)										_g58 = (_g58 + 1);
HXDLIN( 217)										int dx3 = (_g58 - 1);
HXDLIN( 217)										::Dynamic this68 = this1->image;
HXDLIN( 217)										int index9;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											index9 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx3) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											index9 = ::Std_obj::_hx_int(( (Float)(((dy3 * this1->width) + dx3)) ));
            										}
HXDLIN( 217)										int c9 = ::iterMagic::Iimg_obj::get(this68,index9);
HXDLIN( 217)										int col2;
HXDLIN( 217)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)											col2 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            										}
            										else {
HXDLIN( 217)											col2 = c9;
            										}
HXDLIN( 217)										bool hitQuad17;
HXDLIN( 217)										if (this1->useMask) {
HXDLIN( 217)											hitQuad17 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 217)											hitQuad17 = false;
            										}
HXDLIN( 217)										if (hitQuad17) {
HXDLIN( 217)											 ::pi_xy::ImageStruct this69 = this1->mask;
HXDLIN( 217)											::Dynamic this70 = this69->image;
HXDLIN( 217)											int index10;
HXDLIN( 217)											if (this69->useVirtualPos) {
HXDLIN( 217)												index10 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this69->virtualY) * ( (Float)(this69->width) )) + dx3) - this69->virtualX));
            											}
            											else {
HXDLIN( 217)												index10 = ::Std_obj::_hx_int(( (Float)(((dy3 * this69->width) + dx3)) ));
            											}
HXDLIN( 217)											int c10 = ::iterMagic::Iimg_obj::get(this70,index10);
HXDLIN( 217)											int v5;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												v5 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												v5 = c10;
            											}
HXDLIN( 217)											int maskPixel2 = v5;
HXDLIN( 217)											int this71 = col2;
HXDLIN( 217)											if ((maskPixel2 == 0)) {
HXDLIN( 217)												col2 = this71;
            											}
            											else {
HXDLIN( 217)												Float m02;
HXDLIN( 217)												int this72 = ((maskPixel2 >> 24) & 255);
HXDLIN( 217)												if ((this72 == 0)) {
HXDLIN( 217)													m02 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m02 = (( (Float)(this72) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m12;
HXDLIN( 217)												int this73 = ((maskPixel2 >> 16) & 255);
HXDLIN( 217)												if ((this73 == 0)) {
HXDLIN( 217)													m12 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m12 = (( (Float)(this73) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m22;
HXDLIN( 217)												int this74 = ((maskPixel2 >> 8) & 255);
HXDLIN( 217)												if ((this74 == 0)) {
HXDLIN( 217)													m22 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m22 = (( (Float)(this74) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m32;
HXDLIN( 217)												int this75 = (maskPixel2 & 255);
HXDLIN( 217)												if ((this75 == 0)) {
HXDLIN( 217)													m32 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m32 = (( (Float)(this75) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this71 >> 24) & 255)) )));
HXDLIN( 217)												int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this71 >> 16) & 255)) )));
HXDLIN( 217)												int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this71 >> 8) & 255)) )));
HXDLIN( 217)												int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this71 & 255)) )));
HXDLIN( 217)												col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 217)										if ((col2 != 0)) {
HXDLIN( 217)											int x8 = (dx3 - rectLeft2);
HXDLIN( 217)											int y8 = (dy3 - rectTop2);
HXDLIN( 217)											int c11 = col2;
HXDLIN( 217)											bool hitQuad18;
HXDLIN( 217)											if ((((c11 >> 24) & 255) < 254)) {
HXDLIN( 217)												hitQuad18 = undoImage6->transparent;
            											}
            											else {
HXDLIN( 217)												hitQuad18 = false;
            											}
HXDLIN( 217)											if (hitQuad18) {
HXDLIN( 217)												int location4;
HXDLIN( 217)												if (undoImage6->useVirtualPos) {
HXDLIN( 217)													location4 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            												}
            												else {
HXDLIN( 217)													location4 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            												}
HXDLIN( 217)												int this76 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 217)												int this77;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													this77 = ((((((this76 >> 24) & 255) << 24) | ((this76 & 255) << 16)) | (((this76 >> 8) & 255) << 8)) | ((this76 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													this77 = this76;
            												}
HXDLIN( 217)												Float a17;
HXDLIN( 217)												int this78 = ((this77 >> 24) & 255);
HXDLIN( 217)												if ((this78 == 0)) {
HXDLIN( 217)													a17 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a17 = (( (Float)(this78) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r14;
HXDLIN( 217)												int this79 = ((this77 >> 16) & 255);
HXDLIN( 217)												if ((this79 == 0)) {
HXDLIN( 217)													r14 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r14 = (( (Float)(this79) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g14;
HXDLIN( 217)												int this80 = ((this77 >> 8) & 255);
HXDLIN( 217)												if ((this80 == 0)) {
HXDLIN( 217)													g14 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g14 = (( (Float)(this80) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b110;
HXDLIN( 217)												int this81 = (this77 & 255);
HXDLIN( 217)												if ((this81 == 0)) {
HXDLIN( 217)													b110 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b110 = (( (Float)(this81) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a24;
HXDLIN( 217)												int this82 = ((col2 >> 24) & 255);
HXDLIN( 217)												if ((this82 == 0)) {
HXDLIN( 217)													a24 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a24 = (( (Float)(this82) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r24;
HXDLIN( 217)												int this83 = ((col2 >> 16) & 255);
HXDLIN( 217)												if ((this83 == 0)) {
HXDLIN( 217)													r24 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r24 = (( (Float)(this83) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g24;
HXDLIN( 217)												int this84 = ((col2 >> 8) & 255);
HXDLIN( 217)												if ((this84 == 0)) {
HXDLIN( 217)													g24 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g24 = (( (Float)(this84) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b25;
HXDLIN( 217)												int this85 = (col2 & 255);
HXDLIN( 217)												if ((this85 == 0)) {
HXDLIN( 217)													b25 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b25 = (( (Float)(this85) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a34 = (a17 * (( (Float)(1) ) - a24));
HXDLIN( 217)												int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 217)												int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 217)												int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a34) + (b25 * a24))));
HXDLIN( 217)												int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 217)												int blended4 = ((((a18 << 24) | (r7 << 16)) | (g7 << 8)) | b20);
HXDLIN( 217)												{
HXDLIN( 217)													int hitQuad19;
HXDLIN( 217)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)														hitQuad19 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            													}
            													else {
HXDLIN( 217)														hitQuad19 = blended4;
            													}
HXDLIN( 217)													::iterMagic::Iimg_obj::set(undoImage6->image,location4,hitQuad19);
            												}
            											}
            											else {
HXDLIN( 217)												::Dynamic this86 = undoImage6->image;
HXDLIN( 217)												int index11;
HXDLIN( 217)												if (undoImage6->useVirtualPos) {
HXDLIN( 217)													index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            												}
            												else {
HXDLIN( 217)													index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            												}
HXDLIN( 217)												int hitQuad20;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad20 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad20 = c11;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this86,index11,hitQuad20);
            											}
            										}
            										else {
HXDLIN( 217)											if (forceClear2) {
HXDLIN( 217)												::Dynamic this87 = undoImage6->image;
HXDLIN( 217)												int x9 = (dx3 - rectLeft2);
HXDLIN( 217)												int y9 = (dy3 - rectTop2);
HXDLIN( 217)												int index12;
HXDLIN( 217)												if (undoImage6->useVirtualPos) {
HXDLIN( 217)													index12 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            												}
            												else {
HXDLIN( 217)													index12 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this87,index12,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 217)				bool found2 = false;
HXDLIN( 217)				{
HXDLIN( 217)					int _g_min4 = xIter32->start;
HXDLIN( 217)					int _g_max4 = xIter32->max;
HXDLIN( 217)					while((_g_min4 < _g_max4)){
HXDLIN( 217)						_g_min4 = (_g_min4 + 1);
HXDLIN( 217)						int px2 = (_g_min4 - 1);
HXDLIN( 217)						Float pcx1 = (( (Float)(px2) ) - dx);
HXLINE( 619)						found2 = false;
HXLINE( 217)						{
HXDLIN( 217)							int _g_min5 = yIter32->start;
HXDLIN( 217)							int _g_max5 = yIter32->max;
HXDLIN( 217)							while((_g_min5 < _g_max5)){
HXDLIN( 217)								_g_min5 = (_g_min5 + 1);
HXDLIN( 217)								int py2 = (_g_min5 - 1);
HXDLIN( 217)								Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN( 217)								Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 217)								Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 217)								Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 217)								Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 217)								Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 217)								bool hitQuad21;
HXDLIN( 217)								bool hitQuad22;
HXDLIN( 217)								if ((ratioA1 >= 0)) {
HXDLIN( 217)									hitQuad22 = (ratioB1 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad22 = false;
            								}
HXDLIN( 217)								if (hitQuad22) {
HXDLIN( 217)									hitQuad21 = (ratioC1 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad21 = false;
            								}
HXDLIN( 217)								if (hitQuad21) {
HXDLIN( 217)									int i22 = ::Std_obj::_hx_int((( (Float)(aA1) ) * (soft * ratioB1)));
HXDLIN( 217)									if ((i22 > 255)) {
HXLINE(  24)										i22 = 255;
            									}
HXLINE( 217)									if ((i22 < 0)) {
HXLINE(  25)										i22 = 0;
            									}
HXLINE( 217)									int a19 = i22;
HXDLIN( 217)									int i23 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN( 217)									if ((i23 > 255)) {
HXLINE(  24)										i23 = 255;
            									}
HXLINE( 217)									if ((i23 < 0)) {
HXLINE(  25)										i23 = 0;
            									}
HXLINE( 217)									int r8 = i23;
HXDLIN( 217)									int i24 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN( 217)									if ((i24 > 255)) {
HXLINE(  24)										i24 = 255;
            									}
HXLINE( 217)									if ((i24 < 0)) {
HXLINE(  25)										i24 = 0;
            									}
HXLINE( 217)									int g8 = i24;
HXDLIN( 217)									int i25 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN( 217)									if ((i25 > 255)) {
HXLINE(  24)										i25 = 255;
            									}
HXLINE( 217)									if ((i25 < 0)) {
HXLINE(  25)										i25 = 0;
            									}
HXLINE( 217)									int b26 = i25;
HXDLIN( 217)									{
HXDLIN( 217)										int location5;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											location5 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this1->virtualY) * ( (Float)(this1->width) )) + px2) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											location5 = ::Std_obj::_hx_int(( (Float)(((py2 * this1->width) + px2)) ));
            										}
HXDLIN( 217)										bool hitQuad23;
HXDLIN( 217)										if (this1->transparent) {
HXDLIN( 217)											hitQuad23 = (a19 < 254);
            										}
            										else {
HXDLIN( 217)											hitQuad23 = false;
            										}
HXDLIN( 217)										if (hitQuad23) {
HXDLIN( 217)											int this88 = ::iterMagic::Iimg_obj::get(this1->image,location5);
HXDLIN( 217)											int old1;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												old1 = ((((((this88 >> 24) & 255) << 24) | ((this88 & 255) << 16)) | (((this88 >> 8) & 255) << 8)) | ((this88 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												old1 = this88;
            											}
HXDLIN( 217)											int rhs1 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b26);
HXDLIN( 217)											Float a110;
HXDLIN( 217)											int this89 = ((old1 >> 24) & 255);
HXDLIN( 217)											if ((this89 == 0)) {
HXDLIN( 217)												a110 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a110 = (( (Float)(this89) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r15;
HXDLIN( 217)											int this90 = ((old1 >> 16) & 255);
HXDLIN( 217)											if ((this90 == 0)) {
HXDLIN( 217)												r15 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r15 = (( (Float)(this90) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g15;
HXDLIN( 217)											int this91 = ((old1 >> 8) & 255);
HXDLIN( 217)											if ((this91 == 0)) {
HXDLIN( 217)												g15 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g15 = (( (Float)(this91) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b111;
HXDLIN( 217)											int this92 = (old1 & 255);
HXDLIN( 217)											if ((this92 == 0)) {
HXDLIN( 217)												b111 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b111 = (( (Float)(this92) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a25;
HXDLIN( 217)											int this93 = ((rhs1 >> 24) & 255);
HXDLIN( 217)											if ((this93 == 0)) {
HXDLIN( 217)												a25 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a25 = (( (Float)(this93) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r25;
HXDLIN( 217)											int this94 = ((rhs1 >> 16) & 255);
HXDLIN( 217)											if ((this94 == 0)) {
HXDLIN( 217)												r25 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r25 = (( (Float)(this94) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g25;
HXDLIN( 217)											int this95 = ((rhs1 >> 8) & 255);
HXDLIN( 217)											if ((this95 == 0)) {
HXDLIN( 217)												g25 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g25 = (( (Float)(this95) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b27;
HXDLIN( 217)											int this96 = (rhs1 & 255);
HXDLIN( 217)											if ((this96 == 0)) {
HXDLIN( 217)												b27 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b27 = (( (Float)(this96) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a35 = (a110 * (( (Float)(1) ) - a25));
HXDLIN( 217)											int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 217)											int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 217)											int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a35) + (b27 * a25))));
HXDLIN( 217)											int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 217)											int blended5 = ((((a20 << 24) | (r9 << 16)) | (g9 << 8)) | b28);
HXDLIN( 217)											{
HXDLIN( 217)												int hitQuad24;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad24 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad24 = blended5;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this1->image,location5,hitQuad24);
            											}
            										}
            										else {
HXDLIN( 217)											int value1;
HXDLIN( 217)											if (this1->isLittle) {
HXDLIN( 217)												value1 = ((((a19 << 24) | (b26 << 16)) | (g8 << 8)) | r8);
            											}
            											else {
HXDLIN( 217)												value1 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b26);
            											}
HXDLIN( 217)											::iterMagic::Iimg_obj::set(this1->image,location5,value1);
            										}
            									}
HXLINE( 633)									found2 = true;
            								}
            								else {
HXDLIN( 217)									if (found2) {
HXDLIN( 217)										goto _hx_goto_287;
            									}
            								}
            							}
            							_hx_goto_287:;
            						}
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart v_yIter31;
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart v_xIter31;
HXDLIN( 217)				int v_undoY1;
HXDLIN( 217)				int v_undoX1;
HXDLIN( 217)				Float v_ty1;
HXDLIN( 217)				Float v_tx1;
HXDLIN( 217)				Float v_t01;
HXDLIN( 217)				Float v_sy1;
HXDLIN( 217)				Float v_sx1;
HXDLIN( 217)				Float v_s01;
HXDLIN( 217)				Float v_A1;
HXDLIN( 217)				Float ax2 = ex;
HXDLIN( 217)				Float ay2 = ey;
HXDLIN( 217)				 ::pi_xy::ImageStruct v_undoImage1 = null();
HXDLIN( 217)				Float bx3 = cx;
HXDLIN( 217)				Float by3 = cy;
HXDLIN( 217)				Float cx3 = dx;
HXDLIN( 217)				Float cy3 = dy;
HXDLIN( 217)				bool adjustWinding2 = (((((ax2 * by3) - (bx3 * ay2)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * ay2) - (ax2 * cy3))) > 0);
HXDLIN( 217)				if (!(adjustWinding2)) {
HXDLIN( 217)					Float bx_2 = bx3;
HXDLIN( 217)					Float by_2 = by3;
HXLINE(  24)					bx3 = cx3;
HXLINE(  25)					by3 = cy3;
HXLINE(  26)					cx3 = bx_2;
HXLINE(  27)					cy3 = by_2;
            				}
HXLINE( 217)				Float v_ax1 = ax2;
HXDLIN( 217)				Float v_ay1 = ay2;
HXDLIN( 217)				Float v_bx1 = bx3;
HXDLIN( 217)				Float v_by1 = by3;
HXDLIN( 217)				Float v_cx1 = cx3;
HXDLIN( 217)				Float v_cy1 = cy3;
HXDLIN( 217)				bool v_preCalculated1 = true;
HXDLIN( 217)				{
HXDLIN( 217)					v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN( 217)					v_sx1 = (v_cy1 - v_ay1);
HXDLIN( 217)					v_sy1 = (v_ax1 - v_cx1);
HXDLIN( 217)					v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN( 217)					v_tx1 = (v_ay1 - v_by1);
HXDLIN( 217)					v_ty1 = (v_bx1 - v_ax1);
HXDLIN( 217)					v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN( 217)					Float a26 = v_ax1;
HXDLIN( 217)					Float b29 = v_bx1;
HXDLIN( 217)					Float c12 = v_cx1;
HXDLIN( 217)					if ((a26 > b29)) {
HXDLIN( 217)						if ((a26 > c12)) {
HXDLIN( 217)							int min16;
HXDLIN( 217)							if ((b29 > c12)) {
HXDLIN( 217)								min16 = ::Math_obj::floor(c12);
            							}
            							else {
HXDLIN( 217)								min16 = ::Math_obj::floor(b29);
            							}
HXDLIN( 217)							int ii_min32 = min16;
HXDLIN( 217)							int ii_max32 = ::Math_obj::ceil(a26);
HXDLIN( 217)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            						}
            						else {
HXDLIN( 217)							int ii_min33 = ::Math_obj::floor(b29);
HXDLIN( 217)							int ii_max33 = ::Math_obj::ceil(c12);
HXDLIN( 217)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            						}
            					}
            					else {
HXDLIN( 217)						if ((b29 > c12)) {
HXDLIN( 217)							int min17;
HXDLIN( 217)							if ((a26 > c12)) {
HXDLIN( 217)								min17 = ::Math_obj::floor(c12);
            							}
            							else {
HXDLIN( 217)								min17 = ::Math_obj::ceil(a26);
            							}
HXDLIN( 217)							int ii_min34 = min17;
HXDLIN( 217)							int ii_max34 = ::Math_obj::ceil(b29);
HXDLIN( 217)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            						}
            						else {
HXDLIN( 217)							int ii_min35 = ::Math_obj::floor(a26);
HXDLIN( 217)							int ii_max35 = ::Math_obj::ceil(c12);
HXDLIN( 217)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            						}
            					}
HXDLIN( 217)					Float a27 = v_ay1;
HXDLIN( 217)					Float b30 = v_by1;
HXDLIN( 217)					Float c13 = v_cy1;
HXDLIN( 217)					if ((a27 > b30)) {
HXDLIN( 217)						if ((a27 > c13)) {
HXDLIN( 217)							int min18;
HXDLIN( 217)							if ((b30 > c13)) {
HXDLIN( 217)								min18 = ::Math_obj::floor(c13);
            							}
            							else {
HXDLIN( 217)								min18 = ::Math_obj::floor(b30);
            							}
HXDLIN( 217)							int ii_min36 = min18;
HXDLIN( 217)							int ii_max36 = ::Math_obj::ceil(a27);
HXDLIN( 217)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            						}
            						else {
HXDLIN( 217)							int ii_min37 = ::Math_obj::floor(b30);
HXDLIN( 217)							int ii_max37 = ::Math_obj::ceil(c13);
HXDLIN( 217)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            						}
            					}
            					else {
HXDLIN( 217)						if ((b30 > c13)) {
HXDLIN( 217)							int min19;
HXDLIN( 217)							if ((a27 > c13)) {
HXDLIN( 217)								min19 = ::Math_obj::floor(c13);
            							}
            							else {
HXDLIN( 217)								min19 = ::Math_obj::ceil(a27);
            							}
HXDLIN( 217)							int ii_min38 = min19;
HXDLIN( 217)							int ii_max38 = ::Math_obj::ceil(b30);
HXDLIN( 217)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            						}
            						else {
HXDLIN( 217)							int ii_min39 = ::Math_obj::floor(a27);
HXDLIN( 217)							int ii_max39 = ::Math_obj::ceil(c13);
HXDLIN( 217)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            						}
            					}
            				}
HXDLIN( 217)				if (hasUndo2) {
HXDLIN( 217)					v_undoImage1 = undoImage6;
HXDLIN( 217)					v_undoX1 = xIter32->start;
HXDLIN( 217)					v_undoY1 = yIter32->start;
            				}
HXDLIN( 217)				bool hasUndo3 = false;
HXDLIN( 217)				int aA2 = ((color >> 24) & 255);
HXDLIN( 217)				int rA2 = ((color >> 16) & 255);
HXDLIN( 217)				int gA2 = ((color >> 8) & 255);
HXDLIN( 217)				int bA2 = (color & 255);
HXDLIN( 217)				Float bcx2 = (dx - ax);
HXDLIN( 217)				Float bcy2 = (dy - ay);
HXDLIN( 217)				Float acx2 = (ex - ax);
HXDLIN( 217)				Float acy2 = (ey - ay);
HXDLIN( 217)				Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 217)				Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 217)				Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 217)				Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 217)				if ((ex > dx)) {
HXDLIN( 217)					if ((ex > ax)) {
HXDLIN( 217)						int min20;
HXDLIN( 217)						if ((dx > ax)) {
HXDLIN( 217)							min20 = ::Math_obj::floor(ax);
            						}
            						else {
HXDLIN( 217)							min20 = ::Math_obj::floor(dx);
            						}
HXDLIN( 217)						int ii_min40 = min20;
HXDLIN( 217)						int ii_max40 = ::Math_obj::ceil(ex);
HXDLIN( 217)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            					}
            					else {
HXDLIN( 217)						int ii_min41 = ::Math_obj::floor(dx);
HXDLIN( 217)						int ii_max41 = ::Math_obj::ceil(ax);
HXDLIN( 217)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            					}
            				}
            				else {
HXDLIN( 217)					if ((dx > ax)) {
HXDLIN( 217)						int min21;
HXDLIN( 217)						if ((ex > ax)) {
HXDLIN( 217)							min21 = ::Math_obj::floor(ax);
            						}
            						else {
HXDLIN( 217)							min21 = ::Math_obj::ceil(ex);
            						}
HXDLIN( 217)						int ii_min42 = min21;
HXDLIN( 217)						int ii_max42 = ::Math_obj::ceil(dx);
HXDLIN( 217)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            					}
            					else {
HXDLIN( 217)						int ii_min43 = ::Math_obj::floor(ex);
HXDLIN( 217)						int ii_max43 = ::Math_obj::ceil(ax);
HXDLIN( 217)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 217)				if ((ey > dy)) {
HXDLIN( 217)					if ((ey > ay)) {
HXDLIN( 217)						int min22;
HXDLIN( 217)						if ((dy > ay)) {
HXDLIN( 217)							min22 = ::Math_obj::floor(ay);
            						}
            						else {
HXDLIN( 217)							min22 = ::Math_obj::floor(dy);
            						}
HXDLIN( 217)						int ii_min44 = min22;
HXDLIN( 217)						int ii_max44 = ::Math_obj::ceil(ey);
HXDLIN( 217)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            					}
            					else {
HXDLIN( 217)						int ii_min45 = ::Math_obj::floor(dy);
HXDLIN( 217)						int ii_max45 = ::Math_obj::ceil(ay);
HXDLIN( 217)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            					}
            				}
            				else {
HXDLIN( 217)					if ((dy > ay)) {
HXDLIN( 217)						int min23;
HXDLIN( 217)						if ((ey > ay)) {
HXDLIN( 217)							min23 = ::Math_obj::floor(ay);
            						}
            						else {
HXDLIN( 217)							min23 = ::Math_obj::ceil(ey);
            						}
HXDLIN( 217)						int ii_min46 = min23;
HXDLIN( 217)						int ii_max46 = ::Math_obj::ceil(dy);
HXDLIN( 217)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            					}
            					else {
HXDLIN( 217)						int ii_min47 = ::Math_obj::floor(ey);
HXDLIN( 217)						int ii_max47 = ::Math_obj::ceil(ay);
HXDLIN( 217)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 217)				if (hasUndo3) {
HXDLIN( 217)					int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 217)					int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 217)					 ::Dynamic imageType3 = null();
HXDLIN( 217)					 ::pi_xy::ImageStruct this97 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 217)					if (::hx::IsNull( imageType3 )) {
HXLINE(  54)						imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 217)					::Dynamic undoImage10;
HXDLIN( 217)					switch((int)(( (int)(imageType3) ))){
            						case (int)0: {
HXDLIN( 217)							 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::BytesImg b31 = byt3;
HXDLIN( 217)							{
HXDLIN( 217)								b31->width = width3;
HXDLIN( 217)								b31->height = height3;
HXDLIN( 217)								b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 217)								b31->data = ::haxe::io::Bytes_obj::alloc((b31->length * 4));
HXDLIN( 217)								{
HXDLIN( 217)									int len6 = b31->length;
HXDLIN( 217)									int w3 = 0;
HXDLIN( 217)									{
HXDLIN( 217)										int _g60 = 0;
HXDLIN( 217)										int _g61 = b31->height;
HXDLIN( 217)										while((_g60 < _g61)){
HXDLIN( 217)											_g60 = (_g60 + 1);
HXDLIN( 217)											int y10 = (_g60 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												int _g62 = 0;
HXDLIN( 217)												int _g63 = b31->width;
HXDLIN( 217)												while((_g62 < _g63)){
HXDLIN( 217)													_g62 = (_g62 + 1);
HXDLIN( 217)													int x10 = (_g62 - 1);
HXDLIN( 217)													{
HXDLIN( 217)														w3 = (w3 + 1);
HXDLIN( 217)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w3 = (w3 + 1);
HXDLIN( 217)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w3 = (w3 + 1);
HXDLIN( 217)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w3 = (w3 + 1);
HXDLIN( 217)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage10 = b31;
            						}
            						break;
            						case (int)1: {
HXDLIN( 217)							 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::ArrIntImg a28 = arrI3;
HXDLIN( 217)							{
HXDLIN( 217)								a28->width = width3;
HXDLIN( 217)								a28->height = height3;
HXDLIN( 217)								a28->data = ::Array_obj< int >::__new(0);
HXDLIN( 217)								a28->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 217)								{
HXDLIN( 217)									int _g64 = 0;
HXDLIN( 217)									int _g65 = a28->length;
HXDLIN( 217)									while((_g64 < _g65)){
HXDLIN( 217)										_g64 = (_g64 + 1);
HXDLIN( 217)										int i26 = (_g64 - 1);
HXDLIN( 217)										a28->data[i26] = 0;
            									}
            								}
            							}
HXDLIN( 217)							undoImage10 = a28;
            						}
            						break;
            						case (int)2: {
HXDLIN( 217)							 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::U32ArrImg b32 = u32a3;
HXDLIN( 217)							{
HXDLIN( 217)								b32->width = width3;
HXDLIN( 217)								b32->height = height3;
HXDLIN( 217)								b32->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 217)								int size3 = (b32->length * 4);
HXDLIN( 217)								b32->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 217)								{
HXDLIN( 217)									int _g66 = 0;
HXDLIN( 217)									int _g67 = b32->length;
HXDLIN( 217)									while((_g66 < _g67)){
HXDLIN( 217)										_g66 = (_g66 + 1);
HXDLIN( 217)										int i27 = (_g66 - 1);
HXDLIN( 217)										{
HXDLIN( 217)											 ::haxe::io::ArrayBufferViewImpl this98 = b32->data;
HXDLIN( 217)											bool undoImage11;
HXDLIN( 217)											if ((i27 >= 0)) {
HXDLIN( 217)												undoImage11 = (i27 < (this98->byteLength >> 2));
            											}
            											else {
HXDLIN( 217)												undoImage11 = false;
            											}
HXDLIN( 217)											if (undoImage11) {
HXDLIN( 217)												 ::haxe::io::Bytes _this3 = this98->bytes;
HXDLIN( 217)												int pos3 = ((i27 << 2) + this98->byteOffset);
HXDLIN( 217)												_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 217)												_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage10 = b32;
            						}
            						break;
            						case (int)3: {
HXDLIN( 217)							 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::VecIntImg v6 = vec3;
HXDLIN( 217)							{
HXDLIN( 217)								v6->width = width3;
HXDLIN( 217)								v6->height = height3;
HXDLIN( 217)								v6->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 217)								v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN( 217)								{
HXDLIN( 217)									int _g68 = 0;
HXDLIN( 217)									int _g69 = v6->length;
HXDLIN( 217)									while((_g68 < _g69)){
HXDLIN( 217)										_g68 = (_g68 + 1);
HXDLIN( 217)										int i28 = (_g68 - 1);
HXDLIN( 217)										v6->data->__unsafe_set(i28,0);
            									}
            								}
            							}
HXDLIN( 217)							undoImage10 = v6;
            						}
            						break;
            						case (int)4: {
HXDLIN( 217)							 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::StackIntImg b33 = sInt3;
HXDLIN( 217)							{
HXDLIN( 217)								b33->width = width3;
HXDLIN( 217)								b33->height = height3;
HXDLIN( 217)								b33->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 217)								b33->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 217)								{
HXDLIN( 217)									int len7 = b33->length;
HXDLIN( 217)									 ::haxe::ds::GenericStack_Int d3 = b33->data;
HXDLIN( 217)									if (::hx::IsNull( d3->head )) {
HXDLIN( 217)										int _g70 = 0;
HXDLIN( 217)										int _g71 = len7;
HXDLIN( 217)										while((_g70 < _g71)){
HXDLIN( 217)											_g70 = (_g70 + 1);
HXDLIN( 217)											int i29 = (_g70 - 1);
HXDLIN( 217)											d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            										}
            									}
            									else {
HXDLIN( 217)										int _g72 = 0;
HXDLIN( 217)										int _g73 = len7;
HXDLIN( 217)										while((_g72 < _g73)){
HXDLIN( 217)											_g72 = (_g72 + 1);
HXDLIN( 217)											int i30 = (_g72 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int l3 = b33->data->head;
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 217)												{
HXDLIN( 217)													int _g74 = 0;
HXDLIN( 217)													int _g75 = i30;
HXDLIN( 217)													while((_g74 < _g75)){
HXDLIN( 217)														_g74 = (_g74 + 1);
HXDLIN( 217)														int i31 = (_g74 - 1);
HXLINE( 345)														prev3 = l3;
HXLINE( 346)														l3 = l3->next;
            													}
            												}
HXLINE( 217)												if (::hx::IsNull( prev3 )) {
HXDLIN( 217)													b33->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 217)													l3 = null();
            												}
            												else {
HXDLIN( 217)													prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 217)													l3 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage10 = b33;
            						}
            						break;
            					}
HXDLIN( 217)					this97->image = undoImage10;
HXDLIN( 217)					this97->width = width3;
HXDLIN( 217)					this97->height = height3;
HXDLIN( 217)					this97->imageType = ( (int)(imageType3) );
HXDLIN( 217)					undoImage9 = this97;
HXDLIN( 217)					{
HXDLIN( 217)						int rectLeft3 = xIter33->start;
HXDLIN( 217)						int rectTop3 = yIter33->start;
HXDLIN( 217)						int rectRight3 = xIter33->max;
HXDLIN( 217)						bool forceClear3 = false;
HXDLIN( 217)						{
HXDLIN( 217)							int _g76 = rectTop3;
HXDLIN( 217)							int _g77 = yIter33->max;
HXDLIN( 217)							while((_g76 < _g77)){
HXDLIN( 217)								_g76 = (_g76 + 1);
HXDLIN( 217)								int dy4 = (_g76 - 1);
HXDLIN( 217)								{
HXDLIN( 217)									int _g78 = rectLeft3;
HXDLIN( 217)									int _g79 = rectRight3;
HXDLIN( 217)									while((_g78 < _g79)){
HXDLIN( 217)										_g78 = (_g78 + 1);
HXDLIN( 217)										int dx4 = (_g78 - 1);
HXDLIN( 217)										::Dynamic this99 = this1->image;
HXDLIN( 217)										int index13;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											index13 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx4) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											index13 = ::Std_obj::_hx_int(( (Float)(((dy4 * this1->width) + dx4)) ));
            										}
HXDLIN( 217)										int c14 = ::iterMagic::Iimg_obj::get(this99,index13);
HXDLIN( 217)										int col3;
HXDLIN( 217)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)											col3 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            										}
            										else {
HXDLIN( 217)											col3 = c14;
            										}
HXDLIN( 217)										bool hitQuad25;
HXDLIN( 217)										if (this1->useMask) {
HXDLIN( 217)											hitQuad25 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 217)											hitQuad25 = false;
            										}
HXDLIN( 217)										if (hitQuad25) {
HXDLIN( 217)											 ::pi_xy::ImageStruct this100 = this1->mask;
HXDLIN( 217)											::Dynamic this101 = this100->image;
HXDLIN( 217)											int index14;
HXDLIN( 217)											if (this100->useVirtualPos) {
HXDLIN( 217)												index14 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this100->virtualY) * ( (Float)(this100->width) )) + dx4) - this100->virtualX));
            											}
            											else {
HXDLIN( 217)												index14 = ::Std_obj::_hx_int(( (Float)(((dy4 * this100->width) + dx4)) ));
            											}
HXDLIN( 217)											int c15 = ::iterMagic::Iimg_obj::get(this101,index14);
HXDLIN( 217)											int v7;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												v7 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												v7 = c15;
            											}
HXDLIN( 217)											int maskPixel3 = v7;
HXDLIN( 217)											int this102 = col3;
HXDLIN( 217)											if ((maskPixel3 == 0)) {
HXDLIN( 217)												col3 = this102;
            											}
            											else {
HXDLIN( 217)												Float m03;
HXDLIN( 217)												int this103 = ((maskPixel3 >> 24) & 255);
HXDLIN( 217)												if ((this103 == 0)) {
HXDLIN( 217)													m03 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m03 = (( (Float)(this103) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m13;
HXDLIN( 217)												int this104 = ((maskPixel3 >> 16) & 255);
HXDLIN( 217)												if ((this104 == 0)) {
HXDLIN( 217)													m13 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m13 = (( (Float)(this104) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m23;
HXDLIN( 217)												int this105 = ((maskPixel3 >> 8) & 255);
HXDLIN( 217)												if ((this105 == 0)) {
HXDLIN( 217)													m23 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m23 = (( (Float)(this105) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m33;
HXDLIN( 217)												int this106 = (maskPixel3 & 255);
HXDLIN( 217)												if ((this106 == 0)) {
HXDLIN( 217)													m33 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m33 = (( (Float)(this106) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this102 >> 24) & 255)) )));
HXDLIN( 217)												int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this102 >> 16) & 255)) )));
HXDLIN( 217)												int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this102 >> 8) & 255)) )));
HXDLIN( 217)												int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this102 & 255)) )));
HXDLIN( 217)												col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 217)										if ((col3 != 0)) {
HXDLIN( 217)											int x11 = (dx4 - rectLeft3);
HXDLIN( 217)											int y11 = (dy4 - rectTop3);
HXDLIN( 217)											int c16 = col3;
HXDLIN( 217)											bool hitQuad26;
HXDLIN( 217)											if ((((c16 >> 24) & 255) < 254)) {
HXDLIN( 217)												hitQuad26 = undoImage9->transparent;
            											}
            											else {
HXDLIN( 217)												hitQuad26 = false;
            											}
HXDLIN( 217)											if (hitQuad26) {
HXDLIN( 217)												int location6;
HXDLIN( 217)												if (undoImage9->useVirtualPos) {
HXDLIN( 217)													location6 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            												}
            												else {
HXDLIN( 217)													location6 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            												}
HXDLIN( 217)												int this107 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 217)												int this108;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													this108 = ((((((this107 >> 24) & 255) << 24) | ((this107 & 255) << 16)) | (((this107 >> 8) & 255) << 8)) | ((this107 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													this108 = this107;
            												}
HXDLIN( 217)												Float a111;
HXDLIN( 217)												int this109 = ((this108 >> 24) & 255);
HXDLIN( 217)												if ((this109 == 0)) {
HXDLIN( 217)													a111 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a111 = (( (Float)(this109) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r16;
HXDLIN( 217)												int this110 = ((this108 >> 16) & 255);
HXDLIN( 217)												if ((this110 == 0)) {
HXDLIN( 217)													r16 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r16 = (( (Float)(this110) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g16;
HXDLIN( 217)												int this111 = ((this108 >> 8) & 255);
HXDLIN( 217)												if ((this111 == 0)) {
HXDLIN( 217)													g16 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g16 = (( (Float)(this111) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b112;
HXDLIN( 217)												int this112 = (this108 & 255);
HXDLIN( 217)												if ((this112 == 0)) {
HXDLIN( 217)													b112 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b112 = (( (Float)(this112) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a29;
HXDLIN( 217)												int this113 = ((col3 >> 24) & 255);
HXDLIN( 217)												if ((this113 == 0)) {
HXDLIN( 217)													a29 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a29 = (( (Float)(this113) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r26;
HXDLIN( 217)												int this114 = ((col3 >> 16) & 255);
HXDLIN( 217)												if ((this114 == 0)) {
HXDLIN( 217)													r26 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r26 = (( (Float)(this114) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g26;
HXDLIN( 217)												int this115 = ((col3 >> 8) & 255);
HXDLIN( 217)												if ((this115 == 0)) {
HXDLIN( 217)													g26 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g26 = (( (Float)(this115) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b210;
HXDLIN( 217)												int this116 = (col3 & 255);
HXDLIN( 217)												if ((this116 == 0)) {
HXDLIN( 217)													b210 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b210 = (( (Float)(this116) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a36 = (a111 * (( (Float)(1) ) - a29));
HXDLIN( 217)												int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a29))));
HXDLIN( 217)												int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a29))));
HXDLIN( 217)												int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a36) + (b210 * a29))));
HXDLIN( 217)												int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a29)));
HXDLIN( 217)												int blended6 = ((((a30 << 24) | (r10 << 16)) | (g10 << 8)) | b34);
HXDLIN( 217)												{
HXDLIN( 217)													int hitQuad27;
HXDLIN( 217)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)														hitQuad27 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            													}
            													else {
HXDLIN( 217)														hitQuad27 = blended6;
            													}
HXDLIN( 217)													::iterMagic::Iimg_obj::set(undoImage9->image,location6,hitQuad27);
            												}
            											}
            											else {
HXDLIN( 217)												::Dynamic this117 = undoImage9->image;
HXDLIN( 217)												int index15;
HXDLIN( 217)												if (undoImage9->useVirtualPos) {
HXDLIN( 217)													index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            												}
            												else {
HXDLIN( 217)													index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            												}
HXDLIN( 217)												int hitQuad28;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad28 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad28 = c16;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this117,index15,hitQuad28);
            											}
            										}
            										else {
HXDLIN( 217)											if (forceClear3) {
HXDLIN( 217)												::Dynamic this118 = undoImage9->image;
HXDLIN( 217)												int x12 = (dx4 - rectLeft3);
HXDLIN( 217)												int y12 = (dy4 - rectTop3);
HXDLIN( 217)												int index16;
HXDLIN( 217)												if (undoImage9->useVirtualPos) {
HXDLIN( 217)													index16 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x12) - undoImage9->virtualX));
            												}
            												else {
HXDLIN( 217)													index16 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage9->width) + x12)) ));
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this118,index16,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 217)				bool found3 = false;
HXDLIN( 217)				{
HXDLIN( 217)					int _g_min6 = xIter33->start;
HXDLIN( 217)					int _g_max6 = xIter33->max;
HXDLIN( 217)					while((_g_min6 < _g_max6)){
HXDLIN( 217)						_g_min6 = (_g_min6 + 1);
HXDLIN( 217)						int px3 = (_g_min6 - 1);
HXDLIN( 217)						Float pcx2 = (( (Float)(px3) ) - ax);
HXLINE( 619)						found3 = false;
HXLINE( 217)						{
HXDLIN( 217)							int _g_min7 = yIter33->start;
HXDLIN( 217)							int _g_max7 = yIter33->max;
HXDLIN( 217)							while((_g_min7 < _g_max7)){
HXDLIN( 217)								_g_min7 = (_g_min7 + 1);
HXDLIN( 217)								int py3 = (_g_min7 - 1);
HXDLIN( 217)								Float pcy2 = (( (Float)(py3) ) - ay);
HXDLIN( 217)								Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 217)								Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 217)								Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 217)								Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 217)								Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 217)								bool hitQuad29;
HXDLIN( 217)								bool hitQuad30;
HXDLIN( 217)								if ((ratioA2 >= 0)) {
HXDLIN( 217)									hitQuad30 = (ratioB2 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad30 = false;
            								}
HXDLIN( 217)								if (hitQuad30) {
HXDLIN( 217)									hitQuad29 = (ratioC2 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad29 = false;
            								}
HXDLIN( 217)								if (hitQuad29) {
HXDLIN( 217)									int i32 = ::Std_obj::_hx_int((( (Float)(aA2) ) * (soft * ratioB2)));
HXDLIN( 217)									if ((i32 > 255)) {
HXLINE(  24)										i32 = 255;
            									}
HXLINE( 217)									if ((i32 < 0)) {
HXLINE(  25)										i32 = 0;
            									}
HXLINE( 217)									int a37 = i32;
HXDLIN( 217)									int i33 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN( 217)									if ((i33 > 255)) {
HXLINE(  24)										i33 = 255;
            									}
HXLINE( 217)									if ((i33 < 0)) {
HXLINE(  25)										i33 = 0;
            									}
HXLINE( 217)									int r17 = i33;
HXDLIN( 217)									int i34 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN( 217)									if ((i34 > 255)) {
HXLINE(  24)										i34 = 255;
            									}
HXLINE( 217)									if ((i34 < 0)) {
HXLINE(  25)										i34 = 0;
            									}
HXLINE( 217)									int g17 = i34;
HXDLIN( 217)									int i35 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN( 217)									if ((i35 > 255)) {
HXLINE(  24)										i35 = 255;
            									}
HXLINE( 217)									if ((i35 < 0)) {
HXLINE(  25)										i35 = 0;
            									}
HXLINE( 217)									int b35 = i35;
HXDLIN( 217)									{
HXDLIN( 217)										int location7;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											location7 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this1->virtualY) * ( (Float)(this1->width) )) + px3) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											location7 = ::Std_obj::_hx_int(( (Float)(((py3 * this1->width) + px3)) ));
            										}
HXDLIN( 217)										bool hitQuad31;
HXDLIN( 217)										if (this1->transparent) {
HXDLIN( 217)											hitQuad31 = (a37 < 254);
            										}
            										else {
HXDLIN( 217)											hitQuad31 = false;
            										}
HXDLIN( 217)										if (hitQuad31) {
HXDLIN( 217)											int this119 = ::iterMagic::Iimg_obj::get(this1->image,location7);
HXDLIN( 217)											int old2;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												old2 = ((((((this119 >> 24) & 255) << 24) | ((this119 & 255) << 16)) | (((this119 >> 8) & 255) << 8)) | ((this119 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												old2 = this119;
            											}
HXDLIN( 217)											int rhs2 = ((((a37 << 24) | (r17 << 16)) | (g17 << 8)) | b35);
HXDLIN( 217)											Float a112;
HXDLIN( 217)											int this120 = ((old2 >> 24) & 255);
HXDLIN( 217)											if ((this120 == 0)) {
HXDLIN( 217)												a112 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a112 = (( (Float)(this120) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r18;
HXDLIN( 217)											int this121 = ((old2 >> 16) & 255);
HXDLIN( 217)											if ((this121 == 0)) {
HXDLIN( 217)												r18 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r18 = (( (Float)(this121) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g18;
HXDLIN( 217)											int this122 = ((old2 >> 8) & 255);
HXDLIN( 217)											if ((this122 == 0)) {
HXDLIN( 217)												g18 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g18 = (( (Float)(this122) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b113;
HXDLIN( 217)											int this123 = (old2 & 255);
HXDLIN( 217)											if ((this123 == 0)) {
HXDLIN( 217)												b113 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b113 = (( (Float)(this123) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a210;
HXDLIN( 217)											int this124 = ((rhs2 >> 24) & 255);
HXDLIN( 217)											if ((this124 == 0)) {
HXDLIN( 217)												a210 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a210 = (( (Float)(this124) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r27;
HXDLIN( 217)											int this125 = ((rhs2 >> 16) & 255);
HXDLIN( 217)											if ((this125 == 0)) {
HXDLIN( 217)												r27 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r27 = (( (Float)(this125) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g27;
HXDLIN( 217)											int this126 = ((rhs2 >> 8) & 255);
HXDLIN( 217)											if ((this126 == 0)) {
HXDLIN( 217)												g27 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g27 = (( (Float)(this126) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b211;
HXDLIN( 217)											int this127 = (rhs2 & 255);
HXDLIN( 217)											if ((this127 == 0)) {
HXDLIN( 217)												b211 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b211 = (( (Float)(this127) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a38 = (a112 * (( (Float)(1) ) - a210));
HXDLIN( 217)											int r19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r27 * a210))));
HXDLIN( 217)											int g19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g27 * a210))));
HXDLIN( 217)											int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a38) + (b211 * a210))));
HXDLIN( 217)											int a39 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a210)));
HXDLIN( 217)											int blended7 = ((((a39 << 24) | (r19 << 16)) | (g19 << 8)) | b36);
HXDLIN( 217)											{
HXDLIN( 217)												int hitQuad32;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad32 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad32 = blended7;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this1->image,location7,hitQuad32);
            											}
            										}
            										else {
HXDLIN( 217)											int value2;
HXDLIN( 217)											if (this1->isLittle) {
HXDLIN( 217)												value2 = ((((a37 << 24) | (b35 << 16)) | (g17 << 8)) | r17);
            											}
            											else {
HXDLIN( 217)												value2 = ((((a37 << 24) | (r17 << 16)) | (g17 << 8)) | b35);
            											}
HXDLIN( 217)											::iterMagic::Iimg_obj::set(this1->image,location7,value2);
            										}
            									}
HXLINE( 633)									found3 = true;
            								}
            								else {
HXDLIN( 217)									if (found3) {
HXDLIN( 217)										goto _hx_goto_299;
            									}
            								}
            							}
            							_hx_goto_299:;
            						}
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart v_yIter32;
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart v_xIter32;
HXDLIN( 217)				int v_undoY2;
HXDLIN( 217)				int v_undoX2;
HXDLIN( 217)				Float v_ty2;
HXDLIN( 217)				Float v_tx2;
HXDLIN( 217)				Float v_t02;
HXDLIN( 217)				Float v_sy2;
HXDLIN( 217)				Float v_sx2;
HXDLIN( 217)				Float v_s02;
HXDLIN( 217)				Float v_A2;
HXDLIN( 217)				Float ax3 = ex;
HXDLIN( 217)				Float ay3 = ey;
HXDLIN( 217)				 ::pi_xy::ImageStruct v_undoImage2 = null();
HXDLIN( 217)				Float bx4 = dx;
HXDLIN( 217)				Float by4 = dy;
HXDLIN( 217)				Float cx4 = ax;
HXDLIN( 217)				Float cy4 = ay;
HXDLIN( 217)				bool adjustWinding3 = (((((ax3 * by4) - (bx4 * ay3)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay3) - (ax3 * cy4))) > 0);
HXDLIN( 217)				if (!(adjustWinding3)) {
HXDLIN( 217)					Float bx_3 = bx4;
HXDLIN( 217)					Float by_3 = by4;
HXLINE(  24)					bx4 = cx4;
HXLINE(  25)					by4 = cy4;
HXLINE(  26)					cx4 = bx_3;
HXLINE(  27)					cy4 = by_3;
            				}
HXLINE( 217)				Float v_ax2 = ax3;
HXDLIN( 217)				Float v_ay2 = ay3;
HXDLIN( 217)				Float v_bx2 = bx4;
HXDLIN( 217)				Float v_by2 = by4;
HXDLIN( 217)				Float v_cx2 = cx4;
HXDLIN( 217)				Float v_cy2 = cy4;
HXDLIN( 217)				bool v_preCalculated2 = true;
HXDLIN( 217)				{
HXDLIN( 217)					v_s02 = ((v_ay2 * v_cx2) - (v_ax2 * v_cy2));
HXDLIN( 217)					v_sx2 = (v_cy2 - v_ay2);
HXDLIN( 217)					v_sy2 = (v_ax2 - v_cx2);
HXDLIN( 217)					v_t02 = ((v_ax2 * v_by2) - (v_ay2 * v_bx2));
HXDLIN( 217)					v_tx2 = (v_ay2 - v_by2);
HXDLIN( 217)					v_ty2 = (v_bx2 - v_ax2);
HXDLIN( 217)					v_A2 = ((((-(v_by2) * v_cx2) + (v_ay2 * (-(v_bx2) + v_cx2))) + (v_ax2 * (v_by2 - v_cy2))) + (v_bx2 * v_cy2));
HXDLIN( 217)					Float a40 = v_ax2;
HXDLIN( 217)					Float b37 = v_bx2;
HXDLIN( 217)					Float c17 = v_cx2;
HXDLIN( 217)					if ((a40 > b37)) {
HXDLIN( 217)						if ((a40 > c17)) {
HXDLIN( 217)							int min24;
HXDLIN( 217)							if ((b37 > c17)) {
HXDLIN( 217)								min24 = ::Math_obj::floor(c17);
            							}
            							else {
HXDLIN( 217)								min24 = ::Math_obj::floor(b37);
            							}
HXDLIN( 217)							int ii_min48 = min24;
HXDLIN( 217)							int ii_max48 = ::Math_obj::ceil(a40);
HXDLIN( 217)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            						}
            						else {
HXDLIN( 217)							int ii_min49 = ::Math_obj::floor(b37);
HXDLIN( 217)							int ii_max49 = ::Math_obj::ceil(c17);
HXDLIN( 217)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            						}
            					}
            					else {
HXDLIN( 217)						if ((b37 > c17)) {
HXDLIN( 217)							int min25;
HXDLIN( 217)							if ((a40 > c17)) {
HXDLIN( 217)								min25 = ::Math_obj::floor(c17);
            							}
            							else {
HXDLIN( 217)								min25 = ::Math_obj::ceil(a40);
            							}
HXDLIN( 217)							int ii_min50 = min25;
HXDLIN( 217)							int ii_max50 = ::Math_obj::ceil(b37);
HXDLIN( 217)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            						}
            						else {
HXDLIN( 217)							int ii_min51 = ::Math_obj::floor(a40);
HXDLIN( 217)							int ii_max51 = ::Math_obj::ceil(c17);
HXDLIN( 217)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            						}
            					}
HXDLIN( 217)					Float a41 = v_ay2;
HXDLIN( 217)					Float b38 = v_by2;
HXDLIN( 217)					Float c18 = v_cy2;
HXDLIN( 217)					if ((a41 > b38)) {
HXDLIN( 217)						if ((a41 > c18)) {
HXDLIN( 217)							int min26;
HXDLIN( 217)							if ((b38 > c18)) {
HXDLIN( 217)								min26 = ::Math_obj::floor(c18);
            							}
            							else {
HXDLIN( 217)								min26 = ::Math_obj::floor(b38);
            							}
HXDLIN( 217)							int ii_min52 = min26;
HXDLIN( 217)							int ii_max52 = ::Math_obj::ceil(a41);
HXDLIN( 217)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            						}
            						else {
HXDLIN( 217)							int ii_min53 = ::Math_obj::floor(b38);
HXDLIN( 217)							int ii_max53 = ::Math_obj::ceil(c18);
HXDLIN( 217)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            						}
            					}
            					else {
HXDLIN( 217)						if ((b38 > c18)) {
HXDLIN( 217)							int min27;
HXDLIN( 217)							if ((a41 > c18)) {
HXDLIN( 217)								min27 = ::Math_obj::floor(c18);
            							}
            							else {
HXDLIN( 217)								min27 = ::Math_obj::ceil(a41);
            							}
HXDLIN( 217)							int ii_min54 = min27;
HXDLIN( 217)							int ii_max54 = ::Math_obj::ceil(b38);
HXDLIN( 217)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            						}
            						else {
HXDLIN( 217)							int ii_min55 = ::Math_obj::floor(a41);
HXDLIN( 217)							int ii_max55 = ::Math_obj::ceil(c18);
HXDLIN( 217)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            						}
            					}
            				}
HXDLIN( 217)				if (hasUndo3) {
HXDLIN( 217)					v_undoImage2 = undoImage9;
HXDLIN( 217)					v_undoX2 = xIter33->start;
HXDLIN( 217)					v_undoY2 = yIter33->start;
            				}
HXDLIN( 217)				 ::pi_xy::algo::HitQuad v8 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 217)				hitQuad = v8;
            			}
            			else {
HXDLIN( 217)				Float sin2 = ::Math_obj::sin(theta);
HXDLIN( 217)				Float cos2 = ::Math_obj::cos(theta);
HXDLIN( 217)				Float radius11 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN( 217)				Float radius22 = (thick / ( (Float)(2) ));
HXDLIN( 217)				Float dx5 = ((Float)0.1);
HXDLIN( 217)				Float dy5 = radius11;
HXDLIN( 217)				Float cx5 = h2;
HXDLIN( 217)				Float cy5 = radius22;
HXDLIN( 217)				Float bx5 = h2;
HXDLIN( 217)				Float by5 = -(radius22);
HXDLIN( 217)				Float ax4 = ((Float)0.1);
HXDLIN( 217)				Float ay4 = -(radius11);
HXDLIN( 217)				Float temp1 = ((Float)0.);
HXLINE( 288)				temp1 = (px + ((ax4 * cos2) - (ay4 * sin2)));
HXLINE( 289)				ay4 = (py + ((ay4 * cos2) + (ax4 * sin2)));
HXLINE( 290)				ax4 = temp1;
HXLINE( 292)				temp1 = (px + ((bx5 * cos2) - (by5 * sin2)));
HXLINE( 293)				by5 = (py + ((by5 * cos2) + (bx5 * sin2)));
HXLINE( 294)				bx5 = temp1;
HXLINE( 296)				temp1 = (px + ((cx5 * cos2) - (cy5 * sin2)));
HXLINE( 297)				cy5 = (py + ((cy5 * cos2) + (cx5 * sin2)));
HXLINE( 298)				cx5 = temp1;
HXLINE( 300)				temp1 = (px + ((dx5 * cos2) - (dy5 * sin2)));
HXLINE( 301)				dy5 = (py + ((dy5 * cos2) + (dx5 * sin2)));
HXLINE( 302)				dx5 = temp1;
HXLINE( 217)				Float ex1 = ((((ax4 + bx5) + cx5) + dx5) / ( (Float)(4) ));
HXDLIN( 217)				Float ey1 = ((((ay4 + by5) + cy5) + dy5) / ( (Float)(4) ));
HXDLIN( 217)				{
HXDLIN( 217)					Float bx6 = ax4;
HXDLIN( 217)					Float by6 = ay4;
HXDLIN( 217)					Float cx6 = bx5;
HXDLIN( 217)					Float cy6 = by5;
HXDLIN( 217)					bool hasUndo4 = false;
HXDLIN( 217)					bool adjustWinding4 = (((((ex1 * by6) - (bx6 * ey1)) + ((bx6 * cy6) - (cx6 * by6))) + ((cx6 * ey1) - (ex1 * cy6))) > 0);
HXDLIN( 217)					if (!(adjustWinding4)) {
HXDLIN( 217)						Float bx_4 = bx6;
HXDLIN( 217)						Float by_4 = by6;
HXLINE(  25)						bx6 = cx6;
HXLINE(  26)						by6 = cy6;
HXLINE(  27)						cx6 = bx_4;
HXLINE(  28)						cy6 = by_4;
            					}
HXLINE( 217)					{
HXDLIN( 217)						Float s01 = ((ey1 * cx6) - (ex1 * cy6));
HXDLIN( 217)						Float sx1 = (cy6 - ey1);
HXDLIN( 217)						Float sy1 = (ex1 - cx6);
HXDLIN( 217)						Float t01 = ((ex1 * by6) - (ey1 * bx6));
HXDLIN( 217)						Float tx1 = (ey1 - by6);
HXDLIN( 217)						Float ty1 = (bx6 - ex1);
HXDLIN( 217)						Float A1 = ((((-(by6) * cx6) + (ey1 * (-(bx6) + cx6))) + (ex1 * (by6 - cy6))) + (bx6 * cy6));
HXDLIN( 217)						 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN( 217)						if ((ex1 > bx6)) {
HXDLIN( 217)							if ((ex1 > cx6)) {
HXDLIN( 217)								int min28;
HXDLIN( 217)								if ((bx6 > cx6)) {
HXDLIN( 217)									min28 = ::Math_obj::floor(cx6);
            								}
            								else {
HXDLIN( 217)									min28 = ::Math_obj::floor(bx6);
            								}
HXDLIN( 217)								int ii_min56 = min28;
HXDLIN( 217)								int ii_max56 = ::Math_obj::ceil(ex1);
HXDLIN( 217)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            							}
            							else {
HXDLIN( 217)								int ii_min57 = ::Math_obj::floor(bx6);
HXDLIN( 217)								int ii_max57 = ::Math_obj::ceil(cx6);
HXDLIN( 217)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            							}
            						}
            						else {
HXDLIN( 217)							if ((bx6 > cx6)) {
HXDLIN( 217)								int min29;
HXDLIN( 217)								if ((ex1 > cx6)) {
HXDLIN( 217)									min29 = ::Math_obj::floor(cx6);
            								}
            								else {
HXDLIN( 217)									min29 = ::Math_obj::ceil(ex1);
            								}
HXDLIN( 217)								int ii_min58 = min29;
HXDLIN( 217)								int ii_max58 = ::Math_obj::ceil(bx6);
HXDLIN( 217)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            							}
            							else {
HXDLIN( 217)								int ii_min59 = ::Math_obj::floor(ex1);
HXDLIN( 217)								int ii_max59 = ::Math_obj::ceil(cx6);
HXDLIN( 217)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            							}
            						}
HXDLIN( 217)						 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN( 217)						if ((ey1 > by6)) {
HXDLIN( 217)							if ((ey1 > cy6)) {
HXDLIN( 217)								int min30;
HXDLIN( 217)								if ((by6 > cy6)) {
HXDLIN( 217)									min30 = ::Math_obj::floor(cy6);
            								}
            								else {
HXDLIN( 217)									min30 = ::Math_obj::floor(by6);
            								}
HXDLIN( 217)								int ii_min60 = min30;
HXDLIN( 217)								int ii_max60 = ::Math_obj::ceil(ey1);
HXDLIN( 217)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            							}
            							else {
HXDLIN( 217)								int ii_min61 = ::Math_obj::floor(by6);
HXDLIN( 217)								int ii_max61 = ::Math_obj::ceil(cy6);
HXDLIN( 217)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            							}
            						}
            						else {
HXDLIN( 217)							if ((by6 > cy6)) {
HXDLIN( 217)								int min31;
HXDLIN( 217)								if ((ey1 > cy6)) {
HXDLIN( 217)									min31 = ::Math_obj::floor(cy6);
            								}
            								else {
HXDLIN( 217)									min31 = ::Math_obj::ceil(ey1);
            								}
HXDLIN( 217)								int ii_min62 = min31;
HXDLIN( 217)								int ii_max62 = ::Math_obj::ceil(by6);
HXDLIN( 217)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            							}
            							else {
HXDLIN( 217)								int ii_min63 = ::Math_obj::floor(ey1);
HXDLIN( 217)								int ii_max63 = ::Math_obj::ceil(cy6);
HXDLIN( 217)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            							}
            						}
HXDLIN( 217)						 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN( 217)						if (hasUndo4) {
HXDLIN( 217)							int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN( 217)							int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN( 217)							 ::Dynamic imageType4 = null();
HXDLIN( 217)							 ::pi_xy::ImageStruct this128 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 217)							if (::hx::IsNull( imageType4 )) {
HXLINE(  54)								imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE( 217)							::Dynamic undoImage13;
HXDLIN( 217)							switch((int)(( (int)(imageType4) ))){
            								case (int)0: {
HXDLIN( 217)									 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 217)									 ::iterMagic::BytesImg b39 = byt4;
HXDLIN( 217)									{
HXDLIN( 217)										b39->width = width4;
HXDLIN( 217)										b39->height = height4;
HXDLIN( 217)										b39->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 217)										b39->data = ::haxe::io::Bytes_obj::alloc((b39->length * 4));
HXDLIN( 217)										{
HXDLIN( 217)											int len8 = b39->length;
HXDLIN( 217)											int w4 = 0;
HXDLIN( 217)											{
HXDLIN( 217)												int _g80 = 0;
HXDLIN( 217)												int _g81 = b39->height;
HXDLIN( 217)												while((_g80 < _g81)){
HXDLIN( 217)													_g80 = (_g80 + 1);
HXDLIN( 217)													int y13 = (_g80 - 1);
HXDLIN( 217)													{
HXDLIN( 217)														int _g82 = 0;
HXDLIN( 217)														int _g83 = b39->width;
HXDLIN( 217)														while((_g82 < _g83)){
HXDLIN( 217)															_g82 = (_g82 + 1);
HXDLIN( 217)															int x13 = (_g82 - 1);
HXDLIN( 217)															{
HXDLIN( 217)																w4 = (w4 + 1);
HXDLIN( 217)																b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 217)															{
HXDLIN( 217)																w4 = (w4 + 1);
HXDLIN( 217)																b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 217)															{
HXDLIN( 217)																w4 = (w4 + 1);
HXDLIN( 217)																b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 217)															{
HXDLIN( 217)																w4 = (w4 + 1);
HXDLIN( 217)																b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 217)									undoImage13 = b39;
            								}
            								break;
            								case (int)1: {
HXDLIN( 217)									 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)									 ::iterMagic::ArrIntImg a42 = arrI4;
HXDLIN( 217)									{
HXDLIN( 217)										a42->width = width4;
HXDLIN( 217)										a42->height = height4;
HXDLIN( 217)										a42->data = ::Array_obj< int >::__new(0);
HXDLIN( 217)										a42->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 217)										{
HXDLIN( 217)											int _g84 = 0;
HXDLIN( 217)											int _g85 = a42->length;
HXDLIN( 217)											while((_g84 < _g85)){
HXDLIN( 217)												_g84 = (_g84 + 1);
HXDLIN( 217)												int i36 = (_g84 - 1);
HXDLIN( 217)												a42->data[i36] = 0;
            											}
            										}
            									}
HXDLIN( 217)									undoImage13 = a42;
            								}
            								break;
            								case (int)2: {
HXDLIN( 217)									 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 217)									 ::iterMagic::U32ArrImg b40 = u32a4;
HXDLIN( 217)									{
HXDLIN( 217)										b40->width = width4;
HXDLIN( 217)										b40->height = height4;
HXDLIN( 217)										b40->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 217)										int size4 = (b40->length * 4);
HXDLIN( 217)										b40->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN( 217)										{
HXDLIN( 217)											int _g86 = 0;
HXDLIN( 217)											int _g87 = b40->length;
HXDLIN( 217)											while((_g86 < _g87)){
HXDLIN( 217)												_g86 = (_g86 + 1);
HXDLIN( 217)												int i37 = (_g86 - 1);
HXDLIN( 217)												{
HXDLIN( 217)													 ::haxe::io::ArrayBufferViewImpl this129 = b40->data;
HXDLIN( 217)													bool undoImage14;
HXDLIN( 217)													if ((i37 >= 0)) {
HXDLIN( 217)														undoImage14 = (i37 < (this129->byteLength >> 2));
            													}
            													else {
HXDLIN( 217)														undoImage14 = false;
            													}
HXDLIN( 217)													if (undoImage14) {
HXDLIN( 217)														 ::haxe::io::Bytes _this4 = this129->bytes;
HXDLIN( 217)														int pos4 = ((i37 << 2) + this129->byteOffset);
HXDLIN( 217)														_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN( 217)														_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN( 217)														_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN( 217)														_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN( 217)									undoImage13 = b40;
            								}
            								break;
            								case (int)3: {
HXDLIN( 217)									 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)									 ::iterMagic::VecIntImg v9 = vec4;
HXDLIN( 217)									{
HXDLIN( 217)										v9->width = width4;
HXDLIN( 217)										v9->height = height4;
HXDLIN( 217)										v9->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 217)										v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN( 217)										{
HXDLIN( 217)											int _g88 = 0;
HXDLIN( 217)											int _g89 = v9->length;
HXDLIN( 217)											while((_g88 < _g89)){
HXDLIN( 217)												_g88 = (_g88 + 1);
HXDLIN( 217)												int i38 = (_g88 - 1);
HXDLIN( 217)												v9->data->__unsafe_set(i38,0);
            											}
            										}
            									}
HXDLIN( 217)									undoImage13 = v9;
            								}
            								break;
            								case (int)4: {
HXDLIN( 217)									 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)									 ::iterMagic::StackIntImg b41 = sInt4;
HXDLIN( 217)									{
HXDLIN( 217)										b41->width = width4;
HXDLIN( 217)										b41->height = height4;
HXDLIN( 217)										b41->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 217)										b41->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 217)										{
HXDLIN( 217)											int len9 = b41->length;
HXDLIN( 217)											 ::haxe::ds::GenericStack_Int d4 = b41->data;
HXDLIN( 217)											if (::hx::IsNull( d4->head )) {
HXDLIN( 217)												int _g90 = 0;
HXDLIN( 217)												int _g91 = len9;
HXDLIN( 217)												while((_g90 < _g91)){
HXDLIN( 217)													_g90 = (_g90 + 1);
HXDLIN( 217)													int i39 = (_g90 - 1);
HXDLIN( 217)													d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            												}
            											}
            											else {
HXDLIN( 217)												int _g92 = 0;
HXDLIN( 217)												int _g93 = len9;
HXDLIN( 217)												while((_g92 < _g93)){
HXDLIN( 217)													_g92 = (_g92 + 1);
HXDLIN( 217)													int i40 = (_g92 - 1);
HXDLIN( 217)													{
HXDLIN( 217)														 ::haxe::ds::GenericCell_Int l4 = b41->data->head;
HXDLIN( 217)														 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN( 217)														{
HXDLIN( 217)															int _g94 = 0;
HXDLIN( 217)															int _g95 = i40;
HXDLIN( 217)															while((_g94 < _g95)){
HXDLIN( 217)																_g94 = (_g94 + 1);
HXDLIN( 217)																int i41 = (_g94 - 1);
HXLINE( 345)																prev4 = l4;
HXLINE( 346)																l4 = l4->next;
            															}
            														}
HXLINE( 217)														if (::hx::IsNull( prev4 )) {
HXDLIN( 217)															b41->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 217)															l4 = null();
            														}
            														else {
HXDLIN( 217)															prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 217)															l4 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 217)									undoImage13 = b41;
            								}
            								break;
            							}
HXDLIN( 217)							this128->image = undoImage13;
HXDLIN( 217)							this128->width = width4;
HXDLIN( 217)							this128->height = height4;
HXDLIN( 217)							this128->imageType = ( (int)(imageType4) );
HXDLIN( 217)							undoImage12 = this128;
HXDLIN( 217)							{
HXDLIN( 217)								int rectLeft4 = xIter34->start;
HXDLIN( 217)								int rectTop4 = yIter34->start;
HXDLIN( 217)								int rectRight4 = xIter34->max;
HXDLIN( 217)								bool forceClear4 = false;
HXDLIN( 217)								{
HXDLIN( 217)									int _g96 = rectTop4;
HXDLIN( 217)									int _g97 = yIter34->max;
HXDLIN( 217)									while((_g96 < _g97)){
HXDLIN( 217)										_g96 = (_g96 + 1);
HXDLIN( 217)										int dy6 = (_g96 - 1);
HXDLIN( 217)										{
HXDLIN( 217)											int _g98 = rectLeft4;
HXDLIN( 217)											int _g99 = rectRight4;
HXDLIN( 217)											while((_g98 < _g99)){
HXDLIN( 217)												_g98 = (_g98 + 1);
HXDLIN( 217)												int dx6 = (_g98 - 1);
HXDLIN( 217)												::Dynamic this130 = this1->image;
HXDLIN( 217)												int index17;
HXDLIN( 217)												if (this1->useVirtualPos) {
HXDLIN( 217)													index17 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx6) - this1->virtualX));
            												}
            												else {
HXDLIN( 217)													index17 = ::Std_obj::_hx_int(( (Float)(((dy6 * this1->width) + dx6)) ));
            												}
HXDLIN( 217)												int c19 = ::iterMagic::Iimg_obj::get(this130,index17);
HXDLIN( 217)												int col4;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													col4 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													col4 = c19;
            												}
HXDLIN( 217)												bool hitQuad33;
HXDLIN( 217)												if (this1->useMask) {
HXDLIN( 217)													hitQuad33 = ::hx::IsNotNull( this1->mask );
            												}
            												else {
HXDLIN( 217)													hitQuad33 = false;
            												}
HXDLIN( 217)												if (hitQuad33) {
HXDLIN( 217)													 ::pi_xy::ImageStruct this131 = this1->mask;
HXDLIN( 217)													::Dynamic this132 = this131->image;
HXDLIN( 217)													int index18;
HXDLIN( 217)													if (this131->useVirtualPos) {
HXDLIN( 217)														index18 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this131->virtualY) * ( (Float)(this131->width) )) + dx6) - this131->virtualX));
            													}
            													else {
HXDLIN( 217)														index18 = ::Std_obj::_hx_int(( (Float)(((dy6 * this131->width) + dx6)) ));
            													}
HXDLIN( 217)													int c20 = ::iterMagic::Iimg_obj::get(this132,index18);
HXDLIN( 217)													int v10;
HXDLIN( 217)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)														v10 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            													}
            													else {
HXDLIN( 217)														v10 = c20;
            													}
HXDLIN( 217)													int maskPixel4 = v10;
HXDLIN( 217)													int this133 = col4;
HXDLIN( 217)													if ((maskPixel4 == 0)) {
HXDLIN( 217)														col4 = this133;
            													}
            													else {
HXDLIN( 217)														Float m04;
HXDLIN( 217)														int this134 = ((maskPixel4 >> 24) & 255);
HXDLIN( 217)														if ((this134 == 0)) {
HXDLIN( 217)															m04 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															m04 = (( (Float)(this134) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float m14;
HXDLIN( 217)														int this135 = ((maskPixel4 >> 16) & 255);
HXDLIN( 217)														if ((this135 == 0)) {
HXDLIN( 217)															m14 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															m14 = (( (Float)(this135) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float m24;
HXDLIN( 217)														int this136 = ((maskPixel4 >> 8) & 255);
HXDLIN( 217)														if ((this136 == 0)) {
HXDLIN( 217)															m24 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															m24 = (( (Float)(this136) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float m34;
HXDLIN( 217)														int this137 = (maskPixel4 & 255);
HXDLIN( 217)														if ((this137 == 0)) {
HXDLIN( 217)															m34 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															m34 = (( (Float)(this137) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this133 >> 24) & 255)) )));
HXDLIN( 217)														int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this133 >> 16) & 255)) )));
HXDLIN( 217)														int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this133 >> 8) & 255)) )));
HXDLIN( 217)														int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this133 & 255)) )));
HXDLIN( 217)														col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 217)												if ((col4 != 0)) {
HXDLIN( 217)													int x14 = (dx6 - rectLeft4);
HXDLIN( 217)													int y14 = (dy6 - rectTop4);
HXDLIN( 217)													int c21 = col4;
HXDLIN( 217)													bool hitQuad34;
HXDLIN( 217)													if ((((c21 >> 24) & 255) < 254)) {
HXDLIN( 217)														hitQuad34 = undoImage12->transparent;
            													}
            													else {
HXDLIN( 217)														hitQuad34 = false;
            													}
HXDLIN( 217)													if (hitQuad34) {
HXDLIN( 217)														int location8;
HXDLIN( 217)														if (undoImage12->useVirtualPos) {
HXDLIN( 217)															location8 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x14) - undoImage12->virtualX));
            														}
            														else {
HXDLIN( 217)															location8 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage12->width) + x14)) ));
            														}
HXDLIN( 217)														int this138 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN( 217)														int this139;
HXDLIN( 217)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)															this139 = ((((((this138 >> 24) & 255) << 24) | ((this138 & 255) << 16)) | (((this138 >> 8) & 255) << 8)) | ((this138 >> 16) & 255));
            														}
            														else {
HXDLIN( 217)															this139 = this138;
            														}
HXDLIN( 217)														Float a113;
HXDLIN( 217)														int this140 = ((this139 >> 24) & 255);
HXDLIN( 217)														if ((this140 == 0)) {
HXDLIN( 217)															a113 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															a113 = (( (Float)(this140) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float r110;
HXDLIN( 217)														int this141 = ((this139 >> 16) & 255);
HXDLIN( 217)														if ((this141 == 0)) {
HXDLIN( 217)															r110 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															r110 = (( (Float)(this141) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float g110;
HXDLIN( 217)														int this142 = ((this139 >> 8) & 255);
HXDLIN( 217)														if ((this142 == 0)) {
HXDLIN( 217)															g110 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															g110 = (( (Float)(this142) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float b114;
HXDLIN( 217)														int this143 = (this139 & 255);
HXDLIN( 217)														if ((this143 == 0)) {
HXDLIN( 217)															b114 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															b114 = (( (Float)(this143) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float a211;
HXDLIN( 217)														int this144 = ((col4 >> 24) & 255);
HXDLIN( 217)														if ((this144 == 0)) {
HXDLIN( 217)															a211 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															a211 = (( (Float)(this144) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float r28;
HXDLIN( 217)														int this145 = ((col4 >> 16) & 255);
HXDLIN( 217)														if ((this145 == 0)) {
HXDLIN( 217)															r28 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															r28 = (( (Float)(this145) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float g28;
HXDLIN( 217)														int this146 = ((col4 >> 8) & 255);
HXDLIN( 217)														if ((this146 == 0)) {
HXDLIN( 217)															g28 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															g28 = (( (Float)(this146) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float b212;
HXDLIN( 217)														int this147 = (col4 & 255);
HXDLIN( 217)														if ((this147 == 0)) {
HXDLIN( 217)															b212 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															b212 = (( (Float)(this147) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN( 217)														int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r28 * a211))));
HXDLIN( 217)														int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g28 * a211))));
HXDLIN( 217)														int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b212 * a211))));
HXDLIN( 217)														int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN( 217)														int blended8 = ((((a43 << 24) | (r20 << 16)) | (g20 << 8)) | b42);
HXDLIN( 217)														{
HXDLIN( 217)															int hitQuad35;
HXDLIN( 217)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)																hitQuad35 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            															}
            															else {
HXDLIN( 217)																hitQuad35 = blended8;
            															}
HXDLIN( 217)															::iterMagic::Iimg_obj::set(undoImage12->image,location8,hitQuad35);
            														}
            													}
            													else {
HXDLIN( 217)														::Dynamic this148 = undoImage12->image;
HXDLIN( 217)														int index19;
HXDLIN( 217)														if (undoImage12->useVirtualPos) {
HXDLIN( 217)															index19 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x14) - undoImage12->virtualX));
            														}
            														else {
HXDLIN( 217)															index19 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage12->width) + x14)) ));
            														}
HXDLIN( 217)														int hitQuad36;
HXDLIN( 217)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)															hitQuad36 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            														}
            														else {
HXDLIN( 217)															hitQuad36 = c21;
            														}
HXDLIN( 217)														::iterMagic::Iimg_obj::set(this148,index19,hitQuad36);
            													}
            												}
            												else {
HXDLIN( 217)													if (forceClear4) {
HXDLIN( 217)														::Dynamic this149 = undoImage12->image;
HXDLIN( 217)														int x15 = (dx6 - rectLeft4);
HXDLIN( 217)														int y15 = (dy6 - rectTop4);
HXDLIN( 217)														int index20;
HXDLIN( 217)														if (undoImage12->useVirtualPos) {
HXDLIN( 217)															index20 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x15) - undoImage12->virtualX));
            														}
            														else {
HXDLIN( 217)															index20 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage12->width) + x15)) ));
            														}
HXDLIN( 217)														::iterMagic::Iimg_obj::set(this149,index20,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 217)						bool found4 = false;
HXDLIN( 217)						Float s1 = ((Float)0.);
HXDLIN( 217)						Float t1 = ((Float)0.);
HXDLIN( 217)						Float sxx1 = ((Float)0.);
HXDLIN( 217)						Float txx1 = ((Float)0.);
HXDLIN( 217)						{
HXDLIN( 217)							int _g_min8 = xIter34->start;
HXDLIN( 217)							int _g_max8 = xIter34->max;
HXDLIN( 217)							while((_g_min8 < _g_max8)){
HXDLIN( 217)								_g_min8 = (_g_min8 + 1);
HXDLIN( 217)								int x16 = (_g_min8 - 1);
HXLINE(  60)								sxx1 = (sx1 * ( (Float)(x16) ));
HXLINE(  61)								txx1 = (tx1 * ( (Float)(x16) ));
HXLINE(  62)								found4 = false;
HXLINE( 217)								{
HXDLIN( 217)									int _g_min9 = yIter34->start;
HXDLIN( 217)									int _g_max9 = yIter34->max;
HXDLIN( 217)									while((_g_min9 < _g_max9)){
HXDLIN( 217)										_g_min9 = (_g_min9 + 1);
HXDLIN( 217)										int y16 = (_g_min9 - 1);
HXLINE(  64)										s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y16) )));
HXLINE(  65)										t1 = ((t01 + txx1) + (ty1 * ( (Float)(y16) )));
HXLINE( 217)										bool hitQuad37;
HXDLIN( 217)										if (!((s1 <= 0))) {
HXDLIN( 217)											hitQuad37 = (t1 <= 0);
            										}
            										else {
HXDLIN( 217)											hitQuad37 = true;
            										}
HXDLIN( 217)										if (hitQuad37) {
HXDLIN( 217)											if (found4) {
HXDLIN( 217)												goto _hx_goto_311;
            											}
            										}
            										else {
HXDLIN( 217)											if (((s1 + t1) < A1)) {
HXDLIN( 217)												{
HXDLIN( 217)													int c22 = color;
HXDLIN( 217)													bool hitQuad38;
HXDLIN( 217)													if ((((c22 >> 24) & 255) < 254)) {
HXDLIN( 217)														hitQuad38 = this1->transparent;
            													}
            													else {
HXDLIN( 217)														hitQuad38 = false;
            													}
HXDLIN( 217)													if (hitQuad38) {
HXDLIN( 217)														int location9;
HXDLIN( 217)														if (this1->useVirtualPos) {
HXDLIN( 217)															location9 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - this1->virtualY) * ( (Float)(this1->width) )) + x16) - this1->virtualX));
            														}
            														else {
HXDLIN( 217)															location9 = ::Std_obj::_hx_int(( (Float)(((y16 * this1->width) + x16)) ));
            														}
HXDLIN( 217)														int this150 = ::iterMagic::Iimg_obj::get(this1->image,location9);
HXDLIN( 217)														int this151;
HXDLIN( 217)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)															this151 = ((((((this150 >> 24) & 255) << 24) | ((this150 & 255) << 16)) | (((this150 >> 8) & 255) << 8)) | ((this150 >> 16) & 255));
            														}
            														else {
HXDLIN( 217)															this151 = this150;
            														}
HXDLIN( 217)														Float a114;
HXDLIN( 217)														int this152 = ((this151 >> 24) & 255);
HXDLIN( 217)														if ((this152 == 0)) {
HXDLIN( 217)															a114 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															a114 = (( (Float)(this152) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float r111;
HXDLIN( 217)														int this153 = ((this151 >> 16) & 255);
HXDLIN( 217)														if ((this153 == 0)) {
HXDLIN( 217)															r111 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															r111 = (( (Float)(this153) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float g111;
HXDLIN( 217)														int this154 = ((this151 >> 8) & 255);
HXDLIN( 217)														if ((this154 == 0)) {
HXDLIN( 217)															g111 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															g111 = (( (Float)(this154) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float b115;
HXDLIN( 217)														int this155 = (this151 & 255);
HXDLIN( 217)														if ((this155 == 0)) {
HXDLIN( 217)															b115 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															b115 = (( (Float)(this155) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float a212;
HXDLIN( 217)														int this156 = ((color >> 24) & 255);
HXDLIN( 217)														if ((this156 == 0)) {
HXDLIN( 217)															a212 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															a212 = (( (Float)(this156) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float r29;
HXDLIN( 217)														int this157 = ((color >> 16) & 255);
HXDLIN( 217)														if ((this157 == 0)) {
HXDLIN( 217)															r29 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															r29 = (( (Float)(this157) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float g29;
HXDLIN( 217)														int this158 = ((color >> 8) & 255);
HXDLIN( 217)														if ((this158 == 0)) {
HXDLIN( 217)															g29 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															g29 = (( (Float)(this158) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float b213;
HXDLIN( 217)														int this159 = (color & 255);
HXDLIN( 217)														if ((this159 == 0)) {
HXDLIN( 217)															b213 = ((Float)0.);
            														}
            														else {
HXDLIN( 217)															b213 = (( (Float)(this159) ) / ( (Float)(255) ));
            														}
HXDLIN( 217)														Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN( 217)														int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a311) + (r29 * a212))));
HXDLIN( 217)														int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a311) + (g29 * a212))));
HXDLIN( 217)														int b43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b213 * a212))));
HXDLIN( 217)														int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN( 217)														int blended9 = ((((a44 << 24) | (r30 << 16)) | (g30 << 8)) | b43);
HXDLIN( 217)														{
HXDLIN( 217)															int hitQuad39;
HXDLIN( 217)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)																hitQuad39 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            															}
            															else {
HXDLIN( 217)																hitQuad39 = blended9;
            															}
HXDLIN( 217)															::iterMagic::Iimg_obj::set(this1->image,location9,hitQuad39);
            														}
            													}
            													else {
HXDLIN( 217)														::Dynamic this160 = this1->image;
HXDLIN( 217)														int index21;
HXDLIN( 217)														if (this1->useVirtualPos) {
HXDLIN( 217)															index21 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - this1->virtualY) * ( (Float)(this1->width) )) + x16) - this1->virtualX));
            														}
            														else {
HXDLIN( 217)															index21 = ::Std_obj::_hx_int(( (Float)(((y16 * this1->width) + x16)) ));
            														}
HXDLIN( 217)														int hitQuad40;
HXDLIN( 217)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)															hitQuad40 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            														}
            														else {
HXDLIN( 217)															hitQuad40 = c22;
            														}
HXDLIN( 217)														::iterMagic::Iimg_obj::set(this160,index21,hitQuad40);
            													}
            												}
HXLINE(  73)												found4 = true;
            											}
            											else {
HXDLIN( 217)												if (found4) {
HXDLIN( 217)													goto _hx_goto_311;
            												}
            											}
            										}
            									}
            									_hx_goto_311:;
            								}
            							}
            						}
            					}
            				}
HXDLIN( 217)				bool hasUndo5 = false;
HXDLIN( 217)				int aA3 = ((color >> 24) & 255);
HXDLIN( 217)				int rA3 = ((color >> 16) & 255);
HXDLIN( 217)				int gA3 = ((color >> 8) & 255);
HXDLIN( 217)				int bA3 = (color & 255);
HXDLIN( 217)				Float bcx3 = (bx5 - cx5);
HXDLIN( 217)				Float bcy3 = (by5 - cy5);
HXDLIN( 217)				Float acx3 = (ex1 - cx5);
HXDLIN( 217)				Float acy3 = (ey1 - cy5);
HXDLIN( 217)				Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 217)				Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 217)				Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 217)				Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN( 217)				if ((ex1 > bx5)) {
HXDLIN( 217)					if ((ex1 > cx5)) {
HXDLIN( 217)						int min32;
HXDLIN( 217)						if ((bx5 > cx5)) {
HXDLIN( 217)							min32 = ::Math_obj::floor(cx5);
            						}
            						else {
HXDLIN( 217)							min32 = ::Math_obj::floor(bx5);
            						}
HXDLIN( 217)						int ii_min64 = min32;
HXDLIN( 217)						int ii_max64 = ::Math_obj::ceil(ex1);
HXDLIN( 217)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min64,ii_max64);
            					}
            					else {
HXDLIN( 217)						int ii_min65 = ::Math_obj::floor(bx5);
HXDLIN( 217)						int ii_max65 = ::Math_obj::ceil(cx5);
HXDLIN( 217)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min65,ii_max65);
            					}
            				}
            				else {
HXDLIN( 217)					if ((bx5 > cx5)) {
HXDLIN( 217)						int min33;
HXDLIN( 217)						if ((ex1 > cx5)) {
HXDLIN( 217)							min33 = ::Math_obj::floor(cx5);
            						}
            						else {
HXDLIN( 217)							min33 = ::Math_obj::ceil(ex1);
            						}
HXDLIN( 217)						int ii_min66 = min33;
HXDLIN( 217)						int ii_max66 = ::Math_obj::ceil(bx5);
HXDLIN( 217)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min66,ii_max66);
            					}
            					else {
HXDLIN( 217)						int ii_min67 = ::Math_obj::floor(ex1);
HXDLIN( 217)						int ii_max67 = ::Math_obj::ceil(cx5);
HXDLIN( 217)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min67,ii_max67);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN( 217)				if ((ey1 > by5)) {
HXDLIN( 217)					if ((ey1 > cy5)) {
HXDLIN( 217)						int min34;
HXDLIN( 217)						if ((by5 > cy5)) {
HXDLIN( 217)							min34 = ::Math_obj::floor(cy5);
            						}
            						else {
HXDLIN( 217)							min34 = ::Math_obj::floor(by5);
            						}
HXDLIN( 217)						int ii_min68 = min34;
HXDLIN( 217)						int ii_max68 = ::Math_obj::ceil(ey1);
HXDLIN( 217)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min68,ii_max68);
            					}
            					else {
HXDLIN( 217)						int ii_min69 = ::Math_obj::floor(by5);
HXDLIN( 217)						int ii_max69 = ::Math_obj::ceil(cy5);
HXDLIN( 217)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min69,ii_max69);
            					}
            				}
            				else {
HXDLIN( 217)					if ((by5 > cy5)) {
HXDLIN( 217)						int min35;
HXDLIN( 217)						if ((ey1 > cy5)) {
HXDLIN( 217)							min35 = ::Math_obj::floor(cy5);
            						}
            						else {
HXDLIN( 217)							min35 = ::Math_obj::ceil(ey1);
            						}
HXDLIN( 217)						int ii_min70 = min35;
HXDLIN( 217)						int ii_max70 = ::Math_obj::ceil(by5);
HXDLIN( 217)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min70,ii_max70);
            					}
            					else {
HXDLIN( 217)						int ii_min71 = ::Math_obj::floor(ey1);
HXDLIN( 217)						int ii_max71 = ::Math_obj::ceil(cy5);
HXDLIN( 217)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min71,ii_max71);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN( 217)				if (hasUndo5) {
HXDLIN( 217)					int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN( 217)					int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN( 217)					 ::Dynamic imageType5 = null();
HXDLIN( 217)					 ::pi_xy::ImageStruct this161 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 217)					if (::hx::IsNull( imageType5 )) {
HXLINE(  54)						imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 217)					::Dynamic undoImage16;
HXDLIN( 217)					switch((int)(( (int)(imageType5) ))){
            						case (int)0: {
HXDLIN( 217)							 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::BytesImg b44 = byt5;
HXDLIN( 217)							{
HXDLIN( 217)								b44->width = width5;
HXDLIN( 217)								b44->height = height5;
HXDLIN( 217)								b44->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 217)								b44->data = ::haxe::io::Bytes_obj::alloc((b44->length * 4));
HXDLIN( 217)								{
HXDLIN( 217)									int len10 = b44->length;
HXDLIN( 217)									int w5 = 0;
HXDLIN( 217)									{
HXDLIN( 217)										int _g100 = 0;
HXDLIN( 217)										int _g101 = b44->height;
HXDLIN( 217)										while((_g100 < _g101)){
HXDLIN( 217)											_g100 = (_g100 + 1);
HXDLIN( 217)											int y17 = (_g100 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												int _g102 = 0;
HXDLIN( 217)												int _g103 = b44->width;
HXDLIN( 217)												while((_g102 < _g103)){
HXDLIN( 217)													_g102 = (_g102 + 1);
HXDLIN( 217)													int x17 = (_g102 - 1);
HXDLIN( 217)													{
HXDLIN( 217)														w5 = (w5 + 1);
HXDLIN( 217)														b44->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w5 = (w5 + 1);
HXDLIN( 217)														b44->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w5 = (w5 + 1);
HXDLIN( 217)														b44->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w5 = (w5 + 1);
HXDLIN( 217)														b44->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage16 = b44;
            						}
            						break;
            						case (int)1: {
HXDLIN( 217)							 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::ArrIntImg a45 = arrI5;
HXDLIN( 217)							{
HXDLIN( 217)								a45->width = width5;
HXDLIN( 217)								a45->height = height5;
HXDLIN( 217)								a45->data = ::Array_obj< int >::__new(0);
HXDLIN( 217)								a45->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 217)								{
HXDLIN( 217)									int _g104 = 0;
HXDLIN( 217)									int _g105 = a45->length;
HXDLIN( 217)									while((_g104 < _g105)){
HXDLIN( 217)										_g104 = (_g104 + 1);
HXDLIN( 217)										int i42 = (_g104 - 1);
HXDLIN( 217)										a45->data[i42] = 0;
            									}
            								}
            							}
HXDLIN( 217)							undoImage16 = a45;
            						}
            						break;
            						case (int)2: {
HXDLIN( 217)							 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::U32ArrImg b45 = u32a5;
HXDLIN( 217)							{
HXDLIN( 217)								b45->width = width5;
HXDLIN( 217)								b45->height = height5;
HXDLIN( 217)								b45->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 217)								int size5 = (b45->length * 4);
HXDLIN( 217)								b45->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN( 217)								{
HXDLIN( 217)									int _g106 = 0;
HXDLIN( 217)									int _g107 = b45->length;
HXDLIN( 217)									while((_g106 < _g107)){
HXDLIN( 217)										_g106 = (_g106 + 1);
HXDLIN( 217)										int i43 = (_g106 - 1);
HXDLIN( 217)										{
HXDLIN( 217)											 ::haxe::io::ArrayBufferViewImpl this162 = b45->data;
HXDLIN( 217)											bool undoImage17;
HXDLIN( 217)											if ((i43 >= 0)) {
HXDLIN( 217)												undoImage17 = (i43 < (this162->byteLength >> 2));
            											}
            											else {
HXDLIN( 217)												undoImage17 = false;
            											}
HXDLIN( 217)											if (undoImage17) {
HXDLIN( 217)												 ::haxe::io::Bytes _this5 = this162->bytes;
HXDLIN( 217)												int pos5 = ((i43 << 2) + this162->byteOffset);
HXDLIN( 217)												_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN( 217)												_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage16 = b45;
            						}
            						break;
            						case (int)3: {
HXDLIN( 217)							 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::VecIntImg v11 = vec5;
HXDLIN( 217)							{
HXDLIN( 217)								v11->width = width5;
HXDLIN( 217)								v11->height = height5;
HXDLIN( 217)								v11->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 217)								v11->data = ::Array_obj< int >::__new(v11->length);
HXDLIN( 217)								{
HXDLIN( 217)									int _g108 = 0;
HXDLIN( 217)									int _g109 = v11->length;
HXDLIN( 217)									while((_g108 < _g109)){
HXDLIN( 217)										_g108 = (_g108 + 1);
HXDLIN( 217)										int i44 = (_g108 - 1);
HXDLIN( 217)										v11->data->__unsafe_set(i44,0);
            									}
            								}
            							}
HXDLIN( 217)							undoImage16 = v11;
            						}
            						break;
            						case (int)4: {
HXDLIN( 217)							 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::StackIntImg b46 = sInt5;
HXDLIN( 217)							{
HXDLIN( 217)								b46->width = width5;
HXDLIN( 217)								b46->height = height5;
HXDLIN( 217)								b46->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 217)								b46->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 217)								{
HXDLIN( 217)									int len11 = b46->length;
HXDLIN( 217)									 ::haxe::ds::GenericStack_Int d5 = b46->data;
HXDLIN( 217)									if (::hx::IsNull( d5->head )) {
HXDLIN( 217)										int _g110 = 0;
HXDLIN( 217)										int _g111 = len11;
HXDLIN( 217)										while((_g110 < _g111)){
HXDLIN( 217)											_g110 = (_g110 + 1);
HXDLIN( 217)											int i45 = (_g110 - 1);
HXDLIN( 217)											d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            										}
            									}
            									else {
HXDLIN( 217)										int _g112 = 0;
HXDLIN( 217)										int _g113 = len11;
HXDLIN( 217)										while((_g112 < _g113)){
HXDLIN( 217)											_g112 = (_g112 + 1);
HXDLIN( 217)											int i46 = (_g112 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int l5 = b46->data->head;
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN( 217)												{
HXDLIN( 217)													int _g114 = 0;
HXDLIN( 217)													int _g115 = i46;
HXDLIN( 217)													while((_g114 < _g115)){
HXDLIN( 217)														_g114 = (_g114 + 1);
HXDLIN( 217)														int i47 = (_g114 - 1);
HXLINE( 345)														prev5 = l5;
HXLINE( 346)														l5 = l5->next;
            													}
            												}
HXLINE( 217)												if (::hx::IsNull( prev5 )) {
HXDLIN( 217)													b46->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 217)													l5 = null();
            												}
            												else {
HXDLIN( 217)													prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 217)													l5 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage16 = b46;
            						}
            						break;
            					}
HXDLIN( 217)					this161->image = undoImage16;
HXDLIN( 217)					this161->width = width5;
HXDLIN( 217)					this161->height = height5;
HXDLIN( 217)					this161->imageType = ( (int)(imageType5) );
HXDLIN( 217)					undoImage15 = this161;
HXDLIN( 217)					{
HXDLIN( 217)						int rectLeft5 = xIter35->start;
HXDLIN( 217)						int rectTop5 = yIter35->start;
HXDLIN( 217)						int rectRight5 = xIter35->max;
HXDLIN( 217)						bool forceClear5 = false;
HXDLIN( 217)						{
HXDLIN( 217)							int _g116 = rectTop5;
HXDLIN( 217)							int _g117 = yIter35->max;
HXDLIN( 217)							while((_g116 < _g117)){
HXDLIN( 217)								_g116 = (_g116 + 1);
HXDLIN( 217)								int dy7 = (_g116 - 1);
HXDLIN( 217)								{
HXDLIN( 217)									int _g118 = rectLeft5;
HXDLIN( 217)									int _g119 = rectRight5;
HXDLIN( 217)									while((_g118 < _g119)){
HXDLIN( 217)										_g118 = (_g118 + 1);
HXDLIN( 217)										int dx7 = (_g118 - 1);
HXDLIN( 217)										::Dynamic this163 = this1->image;
HXDLIN( 217)										int index22;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											index22 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx7) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											index22 = ::Std_obj::_hx_int(( (Float)(((dy7 * this1->width) + dx7)) ));
            										}
HXDLIN( 217)										int c23 = ::iterMagic::Iimg_obj::get(this163,index22);
HXDLIN( 217)										int col5;
HXDLIN( 217)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)											col5 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            										}
            										else {
HXDLIN( 217)											col5 = c23;
            										}
HXDLIN( 217)										bool hitQuad41;
HXDLIN( 217)										if (this1->useMask) {
HXDLIN( 217)											hitQuad41 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 217)											hitQuad41 = false;
            										}
HXDLIN( 217)										if (hitQuad41) {
HXDLIN( 217)											 ::pi_xy::ImageStruct this164 = this1->mask;
HXDLIN( 217)											::Dynamic this165 = this164->image;
HXDLIN( 217)											int index23;
HXDLIN( 217)											if (this164->useVirtualPos) {
HXDLIN( 217)												index23 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this164->virtualY) * ( (Float)(this164->width) )) + dx7) - this164->virtualX));
            											}
            											else {
HXDLIN( 217)												index23 = ::Std_obj::_hx_int(( (Float)(((dy7 * this164->width) + dx7)) ));
            											}
HXDLIN( 217)											int c24 = ::iterMagic::Iimg_obj::get(this165,index23);
HXDLIN( 217)											int v12;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												v12 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												v12 = c24;
            											}
HXDLIN( 217)											int maskPixel5 = v12;
HXDLIN( 217)											int this166 = col5;
HXDLIN( 217)											if ((maskPixel5 == 0)) {
HXDLIN( 217)												col5 = this166;
            											}
            											else {
HXDLIN( 217)												Float m05;
HXDLIN( 217)												int this167 = ((maskPixel5 >> 24) & 255);
HXDLIN( 217)												if ((this167 == 0)) {
HXDLIN( 217)													m05 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m05 = (( (Float)(this167) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m15;
HXDLIN( 217)												int this168 = ((maskPixel5 >> 16) & 255);
HXDLIN( 217)												if ((this168 == 0)) {
HXDLIN( 217)													m15 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m15 = (( (Float)(this168) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m25;
HXDLIN( 217)												int this169 = ((maskPixel5 >> 8) & 255);
HXDLIN( 217)												if ((this169 == 0)) {
HXDLIN( 217)													m25 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m25 = (( (Float)(this169) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m35;
HXDLIN( 217)												int this170 = (maskPixel5 & 255);
HXDLIN( 217)												if ((this170 == 0)) {
HXDLIN( 217)													m35 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m35 = (( (Float)(this170) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this166 >> 24) & 255)) )));
HXDLIN( 217)												int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this166 >> 16) & 255)) )));
HXDLIN( 217)												int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this166 >> 8) & 255)) )));
HXDLIN( 217)												int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this166 & 255)) )));
HXDLIN( 217)												col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 217)										if ((col5 != 0)) {
HXDLIN( 217)											int x18 = (dx7 - rectLeft5);
HXDLIN( 217)											int y18 = (dy7 - rectTop5);
HXDLIN( 217)											int c25 = col5;
HXDLIN( 217)											bool hitQuad42;
HXDLIN( 217)											if ((((c25 >> 24) & 255) < 254)) {
HXDLIN( 217)												hitQuad42 = undoImage15->transparent;
            											}
            											else {
HXDLIN( 217)												hitQuad42 = false;
            											}
HXDLIN( 217)											if (hitQuad42) {
HXDLIN( 217)												int location10;
HXDLIN( 217)												if (undoImage15->useVirtualPos) {
HXDLIN( 217)													location10 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x18) - undoImage15->virtualX));
            												}
            												else {
HXDLIN( 217)													location10 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage15->width) + x18)) ));
            												}
HXDLIN( 217)												int this171 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN( 217)												int this172;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													this172 = ((((((this171 >> 24) & 255) << 24) | ((this171 & 255) << 16)) | (((this171 >> 8) & 255) << 8)) | ((this171 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													this172 = this171;
            												}
HXDLIN( 217)												Float a115;
HXDLIN( 217)												int this173 = ((this172 >> 24) & 255);
HXDLIN( 217)												if ((this173 == 0)) {
HXDLIN( 217)													a115 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a115 = (( (Float)(this173) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r112;
HXDLIN( 217)												int this174 = ((this172 >> 16) & 255);
HXDLIN( 217)												if ((this174 == 0)) {
HXDLIN( 217)													r112 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r112 = (( (Float)(this174) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g112;
HXDLIN( 217)												int this175 = ((this172 >> 8) & 255);
HXDLIN( 217)												if ((this175 == 0)) {
HXDLIN( 217)													g112 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g112 = (( (Float)(this175) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b116;
HXDLIN( 217)												int this176 = (this172 & 255);
HXDLIN( 217)												if ((this176 == 0)) {
HXDLIN( 217)													b116 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b116 = (( (Float)(this176) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a213;
HXDLIN( 217)												int this177 = ((col5 >> 24) & 255);
HXDLIN( 217)												if ((this177 == 0)) {
HXDLIN( 217)													a213 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a213 = (( (Float)(this177) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r210;
HXDLIN( 217)												int this178 = ((col5 >> 16) & 255);
HXDLIN( 217)												if ((this178 == 0)) {
HXDLIN( 217)													r210 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r210 = (( (Float)(this178) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g210;
HXDLIN( 217)												int this179 = ((col5 >> 8) & 255);
HXDLIN( 217)												if ((this179 == 0)) {
HXDLIN( 217)													g210 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g210 = (( (Float)(this179) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b214;
HXDLIN( 217)												int this180 = (col5 & 255);
HXDLIN( 217)												if ((this180 == 0)) {
HXDLIN( 217)													b214 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b214 = (( (Float)(this180) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN( 217)												int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a312) + (r210 * a213))));
HXDLIN( 217)												int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a312) + (g210 * a213))));
HXDLIN( 217)												int b47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b214 * a213))));
HXDLIN( 217)												int a46 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN( 217)												int blended10 = ((((a46 << 24) | (r31 << 16)) | (g31 << 8)) | b47);
HXDLIN( 217)												{
HXDLIN( 217)													int hitQuad43;
HXDLIN( 217)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)														hitQuad43 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            													}
            													else {
HXDLIN( 217)														hitQuad43 = blended10;
            													}
HXDLIN( 217)													::iterMagic::Iimg_obj::set(undoImage15->image,location10,hitQuad43);
            												}
            											}
            											else {
HXDLIN( 217)												::Dynamic this181 = undoImage15->image;
HXDLIN( 217)												int index24;
HXDLIN( 217)												if (undoImage15->useVirtualPos) {
HXDLIN( 217)													index24 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x18) - undoImage15->virtualX));
            												}
            												else {
HXDLIN( 217)													index24 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage15->width) + x18)) ));
            												}
HXDLIN( 217)												int hitQuad44;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad44 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad44 = c25;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this181,index24,hitQuad44);
            											}
            										}
            										else {
HXDLIN( 217)											if (forceClear5) {
HXDLIN( 217)												::Dynamic this182 = undoImage15->image;
HXDLIN( 217)												int x19 = (dx7 - rectLeft5);
HXDLIN( 217)												int y19 = (dy7 - rectTop5);
HXDLIN( 217)												int index25;
HXDLIN( 217)												if (undoImage15->useVirtualPos) {
HXDLIN( 217)													index25 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x19) - undoImage15->virtualX));
            												}
            												else {
HXDLIN( 217)													index25 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage15->width) + x19)) ));
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this182,index25,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 217)				bool found5 = false;
HXDLIN( 217)				{
HXDLIN( 217)					int _g_min10 = xIter35->start;
HXDLIN( 217)					int _g_max10 = xIter35->max;
HXDLIN( 217)					while((_g_min10 < _g_max10)){
HXDLIN( 217)						_g_min10 = (_g_min10 + 1);
HXDLIN( 217)						int px4 = (_g_min10 - 1);
HXDLIN( 217)						Float pcx3 = (( (Float)(px4) ) - cx5);
HXLINE( 619)						found5 = false;
HXLINE( 217)						{
HXDLIN( 217)							int _g_min11 = yIter35->start;
HXDLIN( 217)							int _g_max11 = yIter35->max;
HXDLIN( 217)							while((_g_min11 < _g_max11)){
HXDLIN( 217)								_g_min11 = (_g_min11 + 1);
HXDLIN( 217)								int py4 = (_g_min11 - 1);
HXDLIN( 217)								Float pcy3 = (( (Float)(py4) ) - cy5);
HXDLIN( 217)								Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 217)								Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 217)								Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 217)								Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 217)								Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 217)								bool hitQuad45;
HXDLIN( 217)								bool hitQuad46;
HXDLIN( 217)								if ((ratioA3 >= 0)) {
HXDLIN( 217)									hitQuad46 = (ratioB3 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad46 = false;
            								}
HXDLIN( 217)								if (hitQuad46) {
HXDLIN( 217)									hitQuad45 = (ratioC3 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad45 = false;
            								}
HXDLIN( 217)								if (hitQuad45) {
HXDLIN( 217)									int i48 = ::Std_obj::_hx_int((( (Float)(aA3) ) * (soft * ratioB3)));
HXDLIN( 217)									if ((i48 > 255)) {
HXLINE(  24)										i48 = 255;
            									}
HXLINE( 217)									if ((i48 < 0)) {
HXLINE(  25)										i48 = 0;
            									}
HXLINE( 217)									int a47 = i48;
HXDLIN( 217)									int i49 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN( 217)									if ((i49 > 255)) {
HXLINE(  24)										i49 = 255;
            									}
HXLINE( 217)									if ((i49 < 0)) {
HXLINE(  25)										i49 = 0;
            									}
HXLINE( 217)									int r32 = i49;
HXDLIN( 217)									int i50 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN( 217)									if ((i50 > 255)) {
HXLINE(  24)										i50 = 255;
            									}
HXLINE( 217)									if ((i50 < 0)) {
HXLINE(  25)										i50 = 0;
            									}
HXLINE( 217)									int g32 = i50;
HXDLIN( 217)									int i51 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN( 217)									if ((i51 > 255)) {
HXLINE(  24)										i51 = 255;
            									}
HXLINE( 217)									if ((i51 < 0)) {
HXLINE(  25)										i51 = 0;
            									}
HXLINE( 217)									int b48 = i51;
HXDLIN( 217)									{
HXDLIN( 217)										int location11;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											location11 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - this1->virtualY) * ( (Float)(this1->width) )) + px4) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											location11 = ::Std_obj::_hx_int(( (Float)(((py4 * this1->width) + px4)) ));
            										}
HXDLIN( 217)										bool hitQuad47;
HXDLIN( 217)										if (this1->transparent) {
HXDLIN( 217)											hitQuad47 = (a47 < 254);
            										}
            										else {
HXDLIN( 217)											hitQuad47 = false;
            										}
HXDLIN( 217)										if (hitQuad47) {
HXDLIN( 217)											int this183 = ::iterMagic::Iimg_obj::get(this1->image,location11);
HXDLIN( 217)											int old3;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												old3 = ((((((this183 >> 24) & 255) << 24) | ((this183 & 255) << 16)) | (((this183 >> 8) & 255) << 8)) | ((this183 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												old3 = this183;
            											}
HXDLIN( 217)											int rhs3 = ((((a47 << 24) | (r32 << 16)) | (g32 << 8)) | b48);
HXDLIN( 217)											Float a116;
HXDLIN( 217)											int this184 = ((old3 >> 24) & 255);
HXDLIN( 217)											if ((this184 == 0)) {
HXDLIN( 217)												a116 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a116 = (( (Float)(this184) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r113;
HXDLIN( 217)											int this185 = ((old3 >> 16) & 255);
HXDLIN( 217)											if ((this185 == 0)) {
HXDLIN( 217)												r113 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r113 = (( (Float)(this185) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g113;
HXDLIN( 217)											int this186 = ((old3 >> 8) & 255);
HXDLIN( 217)											if ((this186 == 0)) {
HXDLIN( 217)												g113 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g113 = (( (Float)(this186) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b117;
HXDLIN( 217)											int this187 = (old3 & 255);
HXDLIN( 217)											if ((this187 == 0)) {
HXDLIN( 217)												b117 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b117 = (( (Float)(this187) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a214;
HXDLIN( 217)											int this188 = ((rhs3 >> 24) & 255);
HXDLIN( 217)											if ((this188 == 0)) {
HXDLIN( 217)												a214 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a214 = (( (Float)(this188) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r211;
HXDLIN( 217)											int this189 = ((rhs3 >> 16) & 255);
HXDLIN( 217)											if ((this189 == 0)) {
HXDLIN( 217)												r211 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r211 = (( (Float)(this189) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g211;
HXDLIN( 217)											int this190 = ((rhs3 >> 8) & 255);
HXDLIN( 217)											if ((this190 == 0)) {
HXDLIN( 217)												g211 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g211 = (( (Float)(this190) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b215;
HXDLIN( 217)											int this191 = (rhs3 & 255);
HXDLIN( 217)											if ((this191 == 0)) {
HXDLIN( 217)												b215 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b215 = (( (Float)(this191) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN( 217)											int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a313) + (r211 * a214))));
HXDLIN( 217)											int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a313) + (g211 * a214))));
HXDLIN( 217)											int b49 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b215 * a214))));
HXDLIN( 217)											int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN( 217)											int blended11 = ((((a48 << 24) | (r33 << 16)) | (g33 << 8)) | b49);
HXDLIN( 217)											{
HXDLIN( 217)												int hitQuad48;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad48 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad48 = blended11;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this1->image,location11,hitQuad48);
            											}
            										}
            										else {
HXDLIN( 217)											int value3;
HXDLIN( 217)											if (this1->isLittle) {
HXDLIN( 217)												value3 = ((((a47 << 24) | (b48 << 16)) | (g32 << 8)) | r32);
            											}
            											else {
HXDLIN( 217)												value3 = ((((a47 << 24) | (r32 << 16)) | (g32 << 8)) | b48);
            											}
HXDLIN( 217)											::iterMagic::Iimg_obj::set(this1->image,location11,value3);
            										}
            									}
HXLINE( 633)									found5 = true;
            								}
            								else {
HXDLIN( 217)									if (found5) {
HXDLIN( 217)										goto _hx_goto_323;
            									}
            								}
            							}
            							_hx_goto_323:;
            						}
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart v_yIter33;
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart v_xIter33;
HXDLIN( 217)				int v_undoY3;
HXDLIN( 217)				int v_undoX3;
HXDLIN( 217)				Float v_ty3;
HXDLIN( 217)				Float v_tx3;
HXDLIN( 217)				Float v_t03;
HXDLIN( 217)				Float v_sy3;
HXDLIN( 217)				Float v_sx3;
HXDLIN( 217)				Float v_s03;
HXDLIN( 217)				Float v_A3;
HXDLIN( 217)				Float ax5 = ex1;
HXDLIN( 217)				Float ay5 = ey1;
HXDLIN( 217)				 ::pi_xy::ImageStruct v_undoImage3 = null();
HXDLIN( 217)				Float bx7 = bx5;
HXDLIN( 217)				Float by7 = by5;
HXDLIN( 217)				Float cx7 = cx5;
HXDLIN( 217)				Float cy7 = cy5;
HXDLIN( 217)				bool adjustWinding5 = (((((ax5 * by7) - (bx7 * ay5)) + ((bx7 * cy7) - (cx7 * by7))) + ((cx7 * ay5) - (ax5 * cy7))) > 0);
HXDLIN( 217)				if (!(adjustWinding5)) {
HXDLIN( 217)					Float bx_5 = bx7;
HXDLIN( 217)					Float by_5 = by7;
HXLINE(  24)					bx7 = cx7;
HXLINE(  25)					by7 = cy7;
HXLINE(  26)					cx7 = bx_5;
HXLINE(  27)					cy7 = by_5;
            				}
HXLINE( 217)				Float v_ax3 = ax5;
HXDLIN( 217)				Float v_ay3 = ay5;
HXDLIN( 217)				Float v_bx3 = bx7;
HXDLIN( 217)				Float v_by3 = by7;
HXDLIN( 217)				Float v_cx3 = cx7;
HXDLIN( 217)				Float v_cy3 = cy7;
HXDLIN( 217)				bool v_preCalculated3 = true;
HXDLIN( 217)				{
HXDLIN( 217)					v_s03 = ((v_ay3 * v_cx3) - (v_ax3 * v_cy3));
HXDLIN( 217)					v_sx3 = (v_cy3 - v_ay3);
HXDLIN( 217)					v_sy3 = (v_ax3 - v_cx3);
HXDLIN( 217)					v_t03 = ((v_ax3 * v_by3) - (v_ay3 * v_bx3));
HXDLIN( 217)					v_tx3 = (v_ay3 - v_by3);
HXDLIN( 217)					v_ty3 = (v_bx3 - v_ax3);
HXDLIN( 217)					v_A3 = ((((-(v_by3) * v_cx3) + (v_ay3 * (-(v_bx3) + v_cx3))) + (v_ax3 * (v_by3 - v_cy3))) + (v_bx3 * v_cy3));
HXDLIN( 217)					Float a49 = v_ax3;
HXDLIN( 217)					Float b50 = v_bx3;
HXDLIN( 217)					Float c26 = v_cx3;
HXDLIN( 217)					if ((a49 > b50)) {
HXDLIN( 217)						if ((a49 > c26)) {
HXDLIN( 217)							int min36;
HXDLIN( 217)							if ((b50 > c26)) {
HXDLIN( 217)								min36 = ::Math_obj::floor(c26);
            							}
            							else {
HXDLIN( 217)								min36 = ::Math_obj::floor(b50);
            							}
HXDLIN( 217)							int ii_min72 = min36;
HXDLIN( 217)							int ii_max72 = ::Math_obj::ceil(a49);
HXDLIN( 217)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min72,ii_max72);
            						}
            						else {
HXDLIN( 217)							int ii_min73 = ::Math_obj::floor(b50);
HXDLIN( 217)							int ii_max73 = ::Math_obj::ceil(c26);
HXDLIN( 217)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min73,ii_max73);
            						}
            					}
            					else {
HXDLIN( 217)						if ((b50 > c26)) {
HXDLIN( 217)							int min37;
HXDLIN( 217)							if ((a49 > c26)) {
HXDLIN( 217)								min37 = ::Math_obj::floor(c26);
            							}
            							else {
HXDLIN( 217)								min37 = ::Math_obj::ceil(a49);
            							}
HXDLIN( 217)							int ii_min74 = min37;
HXDLIN( 217)							int ii_max74 = ::Math_obj::ceil(b50);
HXDLIN( 217)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min74,ii_max74);
            						}
            						else {
HXDLIN( 217)							int ii_min75 = ::Math_obj::floor(a49);
HXDLIN( 217)							int ii_max75 = ::Math_obj::ceil(c26);
HXDLIN( 217)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min75,ii_max75);
            						}
            					}
HXDLIN( 217)					Float a50 = v_ay3;
HXDLIN( 217)					Float b51 = v_by3;
HXDLIN( 217)					Float c27 = v_cy3;
HXDLIN( 217)					if ((a50 > b51)) {
HXDLIN( 217)						if ((a50 > c27)) {
HXDLIN( 217)							int min38;
HXDLIN( 217)							if ((b51 > c27)) {
HXDLIN( 217)								min38 = ::Math_obj::floor(c27);
            							}
            							else {
HXDLIN( 217)								min38 = ::Math_obj::floor(b51);
            							}
HXDLIN( 217)							int ii_min76 = min38;
HXDLIN( 217)							int ii_max76 = ::Math_obj::ceil(a50);
HXDLIN( 217)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min76,ii_max76);
            						}
            						else {
HXDLIN( 217)							int ii_min77 = ::Math_obj::floor(b51);
HXDLIN( 217)							int ii_max77 = ::Math_obj::ceil(c27);
HXDLIN( 217)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min77,ii_max77);
            						}
            					}
            					else {
HXDLIN( 217)						if ((b51 > c27)) {
HXDLIN( 217)							int min39;
HXDLIN( 217)							if ((a50 > c27)) {
HXDLIN( 217)								min39 = ::Math_obj::floor(c27);
            							}
            							else {
HXDLIN( 217)								min39 = ::Math_obj::ceil(a50);
            							}
HXDLIN( 217)							int ii_min78 = min39;
HXDLIN( 217)							int ii_max78 = ::Math_obj::ceil(b51);
HXDLIN( 217)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min78,ii_max78);
            						}
            						else {
HXDLIN( 217)							int ii_min79 = ::Math_obj::floor(a50);
HXDLIN( 217)							int ii_max79 = ::Math_obj::ceil(c27);
HXDLIN( 217)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min79,ii_max79);
            						}
            					}
            				}
HXDLIN( 217)				if (hasUndo5) {
HXDLIN( 217)					v_undoImage3 = undoImage15;
HXDLIN( 217)					v_undoX3 = xIter35->start;
HXDLIN( 217)					v_undoY3 = yIter35->start;
            				}
HXDLIN( 217)				bool hasUndo6 = false;
HXDLIN( 217)				int aA4 = ((color >> 24) & 255);
HXDLIN( 217)				int rA4 = ((color >> 16) & 255);
HXDLIN( 217)				int gA4 = ((color >> 8) & 255);
HXDLIN( 217)				int bA4 = (color & 255);
HXDLIN( 217)				Float bcx4 = (cx5 - dx5);
HXDLIN( 217)				Float bcy4 = (cy5 - dy5);
HXDLIN( 217)				Float acx4 = (ex1 - dx5);
HXDLIN( 217)				Float acy4 = (ey1 - dy5);
HXDLIN( 217)				Float dot114 = ((bcx4 * bcx4) + (bcy4 * bcy4));
HXDLIN( 217)				Float dot124 = ((bcx4 * acx4) + (bcy4 * acy4));
HXDLIN( 217)				Float dot224 = ((acx4 * acx4) + (acy4 * acy4));
HXDLIN( 217)				Float denom14 = (( (Float)(1) ) / ((dot114 * dot224) - (dot124 * dot124)));
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN( 217)				if ((ex1 > cx5)) {
HXDLIN( 217)					if ((ex1 > dx5)) {
HXDLIN( 217)						int min40;
HXDLIN( 217)						if ((cx5 > dx5)) {
HXDLIN( 217)							min40 = ::Math_obj::floor(dx5);
            						}
            						else {
HXDLIN( 217)							min40 = ::Math_obj::floor(cx5);
            						}
HXDLIN( 217)						int ii_min80 = min40;
HXDLIN( 217)						int ii_max80 = ::Math_obj::ceil(ex1);
HXDLIN( 217)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min80,ii_max80);
            					}
            					else {
HXDLIN( 217)						int ii_min81 = ::Math_obj::floor(cx5);
HXDLIN( 217)						int ii_max81 = ::Math_obj::ceil(dx5);
HXDLIN( 217)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min81,ii_max81);
            					}
            				}
            				else {
HXDLIN( 217)					if ((cx5 > dx5)) {
HXDLIN( 217)						int min41;
HXDLIN( 217)						if ((ex1 > dx5)) {
HXDLIN( 217)							min41 = ::Math_obj::floor(dx5);
            						}
            						else {
HXDLIN( 217)							min41 = ::Math_obj::ceil(ex1);
            						}
HXDLIN( 217)						int ii_min82 = min41;
HXDLIN( 217)						int ii_max82 = ::Math_obj::ceil(cx5);
HXDLIN( 217)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min82,ii_max82);
            					}
            					else {
HXDLIN( 217)						int ii_min83 = ::Math_obj::floor(ex1);
HXDLIN( 217)						int ii_max83 = ::Math_obj::ceil(dx5);
HXDLIN( 217)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min83,ii_max83);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN( 217)				if ((ey1 > cy5)) {
HXDLIN( 217)					if ((ey1 > dy5)) {
HXDLIN( 217)						int min42;
HXDLIN( 217)						if ((cy5 > dy5)) {
HXDLIN( 217)							min42 = ::Math_obj::floor(dy5);
            						}
            						else {
HXDLIN( 217)							min42 = ::Math_obj::floor(cy5);
            						}
HXDLIN( 217)						int ii_min84 = min42;
HXDLIN( 217)						int ii_max84 = ::Math_obj::ceil(ey1);
HXDLIN( 217)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min84,ii_max84);
            					}
            					else {
HXDLIN( 217)						int ii_min85 = ::Math_obj::floor(cy5);
HXDLIN( 217)						int ii_max85 = ::Math_obj::ceil(dy5);
HXDLIN( 217)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min85,ii_max85);
            					}
            				}
            				else {
HXDLIN( 217)					if ((cy5 > dy5)) {
HXDLIN( 217)						int min43;
HXDLIN( 217)						if ((ey1 > dy5)) {
HXDLIN( 217)							min43 = ::Math_obj::floor(dy5);
            						}
            						else {
HXDLIN( 217)							min43 = ::Math_obj::ceil(ey1);
            						}
HXDLIN( 217)						int ii_min86 = min43;
HXDLIN( 217)						int ii_max86 = ::Math_obj::ceil(cy5);
HXDLIN( 217)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min86,ii_max86);
            					}
            					else {
HXDLIN( 217)						int ii_min87 = ::Math_obj::floor(ey1);
HXDLIN( 217)						int ii_max87 = ::Math_obj::ceil(dy5);
HXDLIN( 217)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min87,ii_max87);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN( 217)				if (hasUndo6) {
HXDLIN( 217)					int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN( 217)					int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN( 217)					 ::Dynamic imageType6 = null();
HXDLIN( 217)					 ::pi_xy::ImageStruct this192 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 217)					if (::hx::IsNull( imageType6 )) {
HXLINE(  54)						imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 217)					::Dynamic undoImage19;
HXDLIN( 217)					switch((int)(( (int)(imageType6) ))){
            						case (int)0: {
HXDLIN( 217)							 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::BytesImg b52 = byt6;
HXDLIN( 217)							{
HXDLIN( 217)								b52->width = width6;
HXDLIN( 217)								b52->height = height6;
HXDLIN( 217)								b52->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 217)								b52->data = ::haxe::io::Bytes_obj::alloc((b52->length * 4));
HXDLIN( 217)								{
HXDLIN( 217)									int len12 = b52->length;
HXDLIN( 217)									int w6 = 0;
HXDLIN( 217)									{
HXDLIN( 217)										int _g120 = 0;
HXDLIN( 217)										int _g121 = b52->height;
HXDLIN( 217)										while((_g120 < _g121)){
HXDLIN( 217)											_g120 = (_g120 + 1);
HXDLIN( 217)											int y20 = (_g120 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												int _g122 = 0;
HXDLIN( 217)												int _g123 = b52->width;
HXDLIN( 217)												while((_g122 < _g123)){
HXDLIN( 217)													_g122 = (_g122 + 1);
HXDLIN( 217)													int x20 = (_g122 - 1);
HXDLIN( 217)													{
HXDLIN( 217)														w6 = (w6 + 1);
HXDLIN( 217)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w6 = (w6 + 1);
HXDLIN( 217)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w6 = (w6 + 1);
HXDLIN( 217)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w6 = (w6 + 1);
HXDLIN( 217)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage19 = b52;
            						}
            						break;
            						case (int)1: {
HXDLIN( 217)							 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::ArrIntImg a51 = arrI6;
HXDLIN( 217)							{
HXDLIN( 217)								a51->width = width6;
HXDLIN( 217)								a51->height = height6;
HXDLIN( 217)								a51->data = ::Array_obj< int >::__new(0);
HXDLIN( 217)								a51->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 217)								{
HXDLIN( 217)									int _g124 = 0;
HXDLIN( 217)									int _g125 = a51->length;
HXDLIN( 217)									while((_g124 < _g125)){
HXDLIN( 217)										_g124 = (_g124 + 1);
HXDLIN( 217)										int i52 = (_g124 - 1);
HXDLIN( 217)										a51->data[i52] = 0;
            									}
            								}
            							}
HXDLIN( 217)							undoImage19 = a51;
            						}
            						break;
            						case (int)2: {
HXDLIN( 217)							 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::U32ArrImg b53 = u32a6;
HXDLIN( 217)							{
HXDLIN( 217)								b53->width = width6;
HXDLIN( 217)								b53->height = height6;
HXDLIN( 217)								b53->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 217)								int size6 = (b53->length * 4);
HXDLIN( 217)								b53->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN( 217)								{
HXDLIN( 217)									int _g126 = 0;
HXDLIN( 217)									int _g127 = b53->length;
HXDLIN( 217)									while((_g126 < _g127)){
HXDLIN( 217)										_g126 = (_g126 + 1);
HXDLIN( 217)										int i53 = (_g126 - 1);
HXDLIN( 217)										{
HXDLIN( 217)											 ::haxe::io::ArrayBufferViewImpl this193 = b53->data;
HXDLIN( 217)											bool undoImage20;
HXDLIN( 217)											if ((i53 >= 0)) {
HXDLIN( 217)												undoImage20 = (i53 < (this193->byteLength >> 2));
            											}
            											else {
HXDLIN( 217)												undoImage20 = false;
            											}
HXDLIN( 217)											if (undoImage20) {
HXDLIN( 217)												 ::haxe::io::Bytes _this6 = this193->bytes;
HXDLIN( 217)												int pos6 = ((i53 << 2) + this193->byteOffset);
HXDLIN( 217)												_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN( 217)												_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage19 = b53;
            						}
            						break;
            						case (int)3: {
HXDLIN( 217)							 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::VecIntImg v13 = vec6;
HXDLIN( 217)							{
HXDLIN( 217)								v13->width = width6;
HXDLIN( 217)								v13->height = height6;
HXDLIN( 217)								v13->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 217)								v13->data = ::Array_obj< int >::__new(v13->length);
HXDLIN( 217)								{
HXDLIN( 217)									int _g128 = 0;
HXDLIN( 217)									int _g129 = v13->length;
HXDLIN( 217)									while((_g128 < _g129)){
HXDLIN( 217)										_g128 = (_g128 + 1);
HXDLIN( 217)										int i54 = (_g128 - 1);
HXDLIN( 217)										v13->data->__unsafe_set(i54,0);
            									}
            								}
            							}
HXDLIN( 217)							undoImage19 = v13;
            						}
            						break;
            						case (int)4: {
HXDLIN( 217)							 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::StackIntImg b54 = sInt6;
HXDLIN( 217)							{
HXDLIN( 217)								b54->width = width6;
HXDLIN( 217)								b54->height = height6;
HXDLIN( 217)								b54->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 217)								b54->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 217)								{
HXDLIN( 217)									int len13 = b54->length;
HXDLIN( 217)									 ::haxe::ds::GenericStack_Int d6 = b54->data;
HXDLIN( 217)									if (::hx::IsNull( d6->head )) {
HXDLIN( 217)										int _g130 = 0;
HXDLIN( 217)										int _g131 = len13;
HXDLIN( 217)										while((_g130 < _g131)){
HXDLIN( 217)											_g130 = (_g130 + 1);
HXDLIN( 217)											int i55 = (_g130 - 1);
HXDLIN( 217)											d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            										}
            									}
            									else {
HXDLIN( 217)										int _g132 = 0;
HXDLIN( 217)										int _g133 = len13;
HXDLIN( 217)										while((_g132 < _g133)){
HXDLIN( 217)											_g132 = (_g132 + 1);
HXDLIN( 217)											int i56 = (_g132 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int l6 = b54->data->head;
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN( 217)												{
HXDLIN( 217)													int _g134 = 0;
HXDLIN( 217)													int _g135 = i56;
HXDLIN( 217)													while((_g134 < _g135)){
HXDLIN( 217)														_g134 = (_g134 + 1);
HXDLIN( 217)														int i57 = (_g134 - 1);
HXLINE( 345)														prev6 = l6;
HXLINE( 346)														l6 = l6->next;
            													}
            												}
HXLINE( 217)												if (::hx::IsNull( prev6 )) {
HXDLIN( 217)													b54->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 217)													l6 = null();
            												}
            												else {
HXDLIN( 217)													prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 217)													l6 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage19 = b54;
            						}
            						break;
            					}
HXDLIN( 217)					this192->image = undoImage19;
HXDLIN( 217)					this192->width = width6;
HXDLIN( 217)					this192->height = height6;
HXDLIN( 217)					this192->imageType = ( (int)(imageType6) );
HXDLIN( 217)					undoImage18 = this192;
HXDLIN( 217)					{
HXDLIN( 217)						int rectLeft6 = xIter36->start;
HXDLIN( 217)						int rectTop6 = yIter36->start;
HXDLIN( 217)						int rectRight6 = xIter36->max;
HXDLIN( 217)						bool forceClear6 = false;
HXDLIN( 217)						{
HXDLIN( 217)							int _g136 = rectTop6;
HXDLIN( 217)							int _g137 = yIter36->max;
HXDLIN( 217)							while((_g136 < _g137)){
HXDLIN( 217)								_g136 = (_g136 + 1);
HXDLIN( 217)								int dy8 = (_g136 - 1);
HXDLIN( 217)								{
HXDLIN( 217)									int _g138 = rectLeft6;
HXDLIN( 217)									int _g139 = rectRight6;
HXDLIN( 217)									while((_g138 < _g139)){
HXDLIN( 217)										_g138 = (_g138 + 1);
HXDLIN( 217)										int dx8 = (_g138 - 1);
HXDLIN( 217)										::Dynamic this194 = this1->image;
HXDLIN( 217)										int index26;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											index26 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx8) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											index26 = ::Std_obj::_hx_int(( (Float)(((dy8 * this1->width) + dx8)) ));
            										}
HXDLIN( 217)										int c28 = ::iterMagic::Iimg_obj::get(this194,index26);
HXDLIN( 217)										int col6;
HXDLIN( 217)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)											col6 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            										}
            										else {
HXDLIN( 217)											col6 = c28;
            										}
HXDLIN( 217)										bool hitQuad49;
HXDLIN( 217)										if (this1->useMask) {
HXDLIN( 217)											hitQuad49 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 217)											hitQuad49 = false;
            										}
HXDLIN( 217)										if (hitQuad49) {
HXDLIN( 217)											 ::pi_xy::ImageStruct this195 = this1->mask;
HXDLIN( 217)											::Dynamic this196 = this195->image;
HXDLIN( 217)											int index27;
HXDLIN( 217)											if (this195->useVirtualPos) {
HXDLIN( 217)												index27 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this195->virtualY) * ( (Float)(this195->width) )) + dx8) - this195->virtualX));
            											}
            											else {
HXDLIN( 217)												index27 = ::Std_obj::_hx_int(( (Float)(((dy8 * this195->width) + dx8)) ));
            											}
HXDLIN( 217)											int c29 = ::iterMagic::Iimg_obj::get(this196,index27);
HXDLIN( 217)											int v14;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												v14 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												v14 = c29;
            											}
HXDLIN( 217)											int maskPixel6 = v14;
HXDLIN( 217)											int this197 = col6;
HXDLIN( 217)											if ((maskPixel6 == 0)) {
HXDLIN( 217)												col6 = this197;
            											}
            											else {
HXDLIN( 217)												Float m06;
HXDLIN( 217)												int this198 = ((maskPixel6 >> 24) & 255);
HXDLIN( 217)												if ((this198 == 0)) {
HXDLIN( 217)													m06 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m06 = (( (Float)(this198) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m16;
HXDLIN( 217)												int this199 = ((maskPixel6 >> 16) & 255);
HXDLIN( 217)												if ((this199 == 0)) {
HXDLIN( 217)													m16 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m16 = (( (Float)(this199) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m26;
HXDLIN( 217)												int this200 = ((maskPixel6 >> 8) & 255);
HXDLIN( 217)												if ((this200 == 0)) {
HXDLIN( 217)													m26 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m26 = (( (Float)(this200) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m36;
HXDLIN( 217)												int this201 = (maskPixel6 & 255);
HXDLIN( 217)												if ((this201 == 0)) {
HXDLIN( 217)													m36 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m36 = (( (Float)(this201) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this197 >> 24) & 255)) )));
HXDLIN( 217)												int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this197 >> 16) & 255)) )));
HXDLIN( 217)												int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this197 >> 8) & 255)) )));
HXDLIN( 217)												int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this197 & 255)) )));
HXDLIN( 217)												col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 217)										if ((col6 != 0)) {
HXDLIN( 217)											int x21 = (dx8 - rectLeft6);
HXDLIN( 217)											int y21 = (dy8 - rectTop6);
HXDLIN( 217)											int c30 = col6;
HXDLIN( 217)											bool hitQuad50;
HXDLIN( 217)											if ((((c30 >> 24) & 255) < 254)) {
HXDLIN( 217)												hitQuad50 = undoImage18->transparent;
            											}
            											else {
HXDLIN( 217)												hitQuad50 = false;
            											}
HXDLIN( 217)											if (hitQuad50) {
HXDLIN( 217)												int location12;
HXDLIN( 217)												if (undoImage18->useVirtualPos) {
HXDLIN( 217)													location12 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x21) - undoImage18->virtualX));
            												}
            												else {
HXDLIN( 217)													location12 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage18->width) + x21)) ));
            												}
HXDLIN( 217)												int this202 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN( 217)												int this203;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													this203 = ((((((this202 >> 24) & 255) << 24) | ((this202 & 255) << 16)) | (((this202 >> 8) & 255) << 8)) | ((this202 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													this203 = this202;
            												}
HXDLIN( 217)												Float a117;
HXDLIN( 217)												int this204 = ((this203 >> 24) & 255);
HXDLIN( 217)												if ((this204 == 0)) {
HXDLIN( 217)													a117 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a117 = (( (Float)(this204) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r114;
HXDLIN( 217)												int this205 = ((this203 >> 16) & 255);
HXDLIN( 217)												if ((this205 == 0)) {
HXDLIN( 217)													r114 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r114 = (( (Float)(this205) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g114;
HXDLIN( 217)												int this206 = ((this203 >> 8) & 255);
HXDLIN( 217)												if ((this206 == 0)) {
HXDLIN( 217)													g114 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g114 = (( (Float)(this206) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b118;
HXDLIN( 217)												int this207 = (this203 & 255);
HXDLIN( 217)												if ((this207 == 0)) {
HXDLIN( 217)													b118 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b118 = (( (Float)(this207) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a215;
HXDLIN( 217)												int this208 = ((col6 >> 24) & 255);
HXDLIN( 217)												if ((this208 == 0)) {
HXDLIN( 217)													a215 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a215 = (( (Float)(this208) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r212;
HXDLIN( 217)												int this209 = ((col6 >> 16) & 255);
HXDLIN( 217)												if ((this209 == 0)) {
HXDLIN( 217)													r212 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r212 = (( (Float)(this209) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g212;
HXDLIN( 217)												int this210 = ((col6 >> 8) & 255);
HXDLIN( 217)												if ((this210 == 0)) {
HXDLIN( 217)													g212 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g212 = (( (Float)(this210) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b216;
HXDLIN( 217)												int this211 = (col6 & 255);
HXDLIN( 217)												if ((this211 == 0)) {
HXDLIN( 217)													b216 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b216 = (( (Float)(this211) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN( 217)												int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a314) + (r212 * a215))));
HXDLIN( 217)												int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a314) + (g212 * a215))));
HXDLIN( 217)												int b55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b216 * a215))));
HXDLIN( 217)												int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN( 217)												int blended12 = ((((a52 << 24) | (r34 << 16)) | (g34 << 8)) | b55);
HXDLIN( 217)												{
HXDLIN( 217)													int hitQuad51;
HXDLIN( 217)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)														hitQuad51 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            													}
            													else {
HXDLIN( 217)														hitQuad51 = blended12;
            													}
HXDLIN( 217)													::iterMagic::Iimg_obj::set(undoImage18->image,location12,hitQuad51);
            												}
            											}
            											else {
HXDLIN( 217)												::Dynamic this212 = undoImage18->image;
HXDLIN( 217)												int index28;
HXDLIN( 217)												if (undoImage18->useVirtualPos) {
HXDLIN( 217)													index28 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x21) - undoImage18->virtualX));
            												}
            												else {
HXDLIN( 217)													index28 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage18->width) + x21)) ));
            												}
HXDLIN( 217)												int hitQuad52;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad52 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad52 = c30;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this212,index28,hitQuad52);
            											}
            										}
            										else {
HXDLIN( 217)											if (forceClear6) {
HXDLIN( 217)												::Dynamic this213 = undoImage18->image;
HXDLIN( 217)												int x22 = (dx8 - rectLeft6);
HXDLIN( 217)												int y22 = (dy8 - rectTop6);
HXDLIN( 217)												int index29;
HXDLIN( 217)												if (undoImage18->useVirtualPos) {
HXDLIN( 217)													index29 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x22) - undoImage18->virtualX));
            												}
            												else {
HXDLIN( 217)													index29 = ::Std_obj::_hx_int(( (Float)(((y22 * undoImage18->width) + x22)) ));
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this213,index29,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 217)				bool found6 = false;
HXDLIN( 217)				{
HXDLIN( 217)					int _g_min12 = xIter36->start;
HXDLIN( 217)					int _g_max12 = xIter36->max;
HXDLIN( 217)					while((_g_min12 < _g_max12)){
HXDLIN( 217)						_g_min12 = (_g_min12 + 1);
HXDLIN( 217)						int px5 = (_g_min12 - 1);
HXDLIN( 217)						Float pcx4 = (( (Float)(px5) ) - dx5);
HXLINE( 619)						found6 = false;
HXLINE( 217)						{
HXDLIN( 217)							int _g_min13 = yIter36->start;
HXDLIN( 217)							int _g_max13 = yIter36->max;
HXDLIN( 217)							while((_g_min13 < _g_max13)){
HXDLIN( 217)								_g_min13 = (_g_min13 + 1);
HXDLIN( 217)								int py5 = (_g_min13 - 1);
HXDLIN( 217)								Float pcy4 = (( (Float)(py5) ) - dy5);
HXDLIN( 217)								Float dot314 = ((pcx4 * bcx4) + (pcy4 * bcy4));
HXDLIN( 217)								Float dot324 = ((pcx4 * acx4) + (pcy4 * acy4));
HXDLIN( 217)								Float ratioA4 = (((dot224 * dot314) - (dot124 * dot324)) * denom14);
HXDLIN( 217)								Float ratioB4 = (((dot114 * dot324) - (dot124 * dot314)) * denom14);
HXDLIN( 217)								Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN( 217)								bool hitQuad53;
HXDLIN( 217)								bool hitQuad54;
HXDLIN( 217)								if ((ratioA4 >= 0)) {
HXDLIN( 217)									hitQuad54 = (ratioB4 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad54 = false;
            								}
HXDLIN( 217)								if (hitQuad54) {
HXDLIN( 217)									hitQuad53 = (ratioC4 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad53 = false;
            								}
HXDLIN( 217)								if (hitQuad53) {
HXDLIN( 217)									int i58 = ::Std_obj::_hx_int((( (Float)(aA4) ) * (soft * ratioB4)));
HXDLIN( 217)									if ((i58 > 255)) {
HXLINE(  24)										i58 = 255;
            									}
HXLINE( 217)									if ((i58 < 0)) {
HXLINE(  25)										i58 = 0;
            									}
HXLINE( 217)									int a53 = i58;
HXDLIN( 217)									int i59 = ::Std_obj::_hx_int(( (Float)(rA4) ));
HXDLIN( 217)									if ((i59 > 255)) {
HXLINE(  24)										i59 = 255;
            									}
HXLINE( 217)									if ((i59 < 0)) {
HXLINE(  25)										i59 = 0;
            									}
HXLINE( 217)									int r35 = i59;
HXDLIN( 217)									int i60 = ::Std_obj::_hx_int(( (Float)(gA4) ));
HXDLIN( 217)									if ((i60 > 255)) {
HXLINE(  24)										i60 = 255;
            									}
HXLINE( 217)									if ((i60 < 0)) {
HXLINE(  25)										i60 = 0;
            									}
HXLINE( 217)									int g35 = i60;
HXDLIN( 217)									int i61 = ::Std_obj::_hx_int(( (Float)(bA4) ));
HXDLIN( 217)									if ((i61 > 255)) {
HXLINE(  24)										i61 = 255;
            									}
HXLINE( 217)									if ((i61 < 0)) {
HXLINE(  25)										i61 = 0;
            									}
HXLINE( 217)									int b56 = i61;
HXDLIN( 217)									{
HXDLIN( 217)										int location13;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											location13 = ::Std_obj::_hx_int(((((( (Float)(py5) ) - this1->virtualY) * ( (Float)(this1->width) )) + px5) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											location13 = ::Std_obj::_hx_int(( (Float)(((py5 * this1->width) + px5)) ));
            										}
HXDLIN( 217)										bool hitQuad55;
HXDLIN( 217)										if (this1->transparent) {
HXDLIN( 217)											hitQuad55 = (a53 < 254);
            										}
            										else {
HXDLIN( 217)											hitQuad55 = false;
            										}
HXDLIN( 217)										if (hitQuad55) {
HXDLIN( 217)											int this214 = ::iterMagic::Iimg_obj::get(this1->image,location13);
HXDLIN( 217)											int old4;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												old4 = ((((((this214 >> 24) & 255) << 24) | ((this214 & 255) << 16)) | (((this214 >> 8) & 255) << 8)) | ((this214 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												old4 = this214;
            											}
HXDLIN( 217)											int rhs4 = ((((a53 << 24) | (r35 << 16)) | (g35 << 8)) | b56);
HXDLIN( 217)											Float a118;
HXDLIN( 217)											int this215 = ((old4 >> 24) & 255);
HXDLIN( 217)											if ((this215 == 0)) {
HXDLIN( 217)												a118 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a118 = (( (Float)(this215) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r115;
HXDLIN( 217)											int this216 = ((old4 >> 16) & 255);
HXDLIN( 217)											if ((this216 == 0)) {
HXDLIN( 217)												r115 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r115 = (( (Float)(this216) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g115;
HXDLIN( 217)											int this217 = ((old4 >> 8) & 255);
HXDLIN( 217)											if ((this217 == 0)) {
HXDLIN( 217)												g115 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g115 = (( (Float)(this217) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b119;
HXDLIN( 217)											int this218 = (old4 & 255);
HXDLIN( 217)											if ((this218 == 0)) {
HXDLIN( 217)												b119 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b119 = (( (Float)(this218) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a216;
HXDLIN( 217)											int this219 = ((rhs4 >> 24) & 255);
HXDLIN( 217)											if ((this219 == 0)) {
HXDLIN( 217)												a216 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a216 = (( (Float)(this219) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r213;
HXDLIN( 217)											int this220 = ((rhs4 >> 16) & 255);
HXDLIN( 217)											if ((this220 == 0)) {
HXDLIN( 217)												r213 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r213 = (( (Float)(this220) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g213;
HXDLIN( 217)											int this221 = ((rhs4 >> 8) & 255);
HXDLIN( 217)											if ((this221 == 0)) {
HXDLIN( 217)												g213 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g213 = (( (Float)(this221) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b217;
HXDLIN( 217)											int this222 = (rhs4 & 255);
HXDLIN( 217)											if ((this222 == 0)) {
HXDLIN( 217)												b217 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b217 = (( (Float)(this222) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN( 217)											int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a315) + (r213 * a216))));
HXDLIN( 217)											int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a315) + (g213 * a216))));
HXDLIN( 217)											int b57 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b217 * a216))));
HXDLIN( 217)											int a54 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN( 217)											int blended13 = ((((a54 << 24) | (r36 << 16)) | (g36 << 8)) | b57);
HXDLIN( 217)											{
HXDLIN( 217)												int hitQuad56;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad56 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad56 = blended13;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this1->image,location13,hitQuad56);
            											}
            										}
            										else {
HXDLIN( 217)											int value4;
HXDLIN( 217)											if (this1->isLittle) {
HXDLIN( 217)												value4 = ((((a53 << 24) | (b56 << 16)) | (g35 << 8)) | r35);
            											}
            											else {
HXDLIN( 217)												value4 = ((((a53 << 24) | (r35 << 16)) | (g35 << 8)) | b56);
            											}
HXDLIN( 217)											::iterMagic::Iimg_obj::set(this1->image,location13,value4);
            										}
            									}
HXLINE( 633)									found6 = true;
            								}
            								else {
HXDLIN( 217)									if (found6) {
HXDLIN( 217)										goto _hx_goto_335;
            									}
            								}
            							}
            							_hx_goto_335:;
            						}
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart v_yIter34;
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart v_xIter34;
HXDLIN( 217)				int v_undoY4;
HXDLIN( 217)				int v_undoX4;
HXDLIN( 217)				Float v_ty4;
HXDLIN( 217)				Float v_tx4;
HXDLIN( 217)				Float v_t04;
HXDLIN( 217)				Float v_sy4;
HXDLIN( 217)				Float v_sx4;
HXDLIN( 217)				Float v_s04;
HXDLIN( 217)				Float v_A4;
HXDLIN( 217)				Float ax6 = ex1;
HXDLIN( 217)				Float ay6 = ey1;
HXDLIN( 217)				 ::pi_xy::ImageStruct v_undoImage4 = null();
HXDLIN( 217)				Float bx8 = cx5;
HXDLIN( 217)				Float by8 = cy5;
HXDLIN( 217)				Float cx8 = dx5;
HXDLIN( 217)				Float cy8 = dy5;
HXDLIN( 217)				bool adjustWinding6 = (((((ax6 * by8) - (bx8 * ay6)) + ((bx8 * cy8) - (cx8 * by8))) + ((cx8 * ay6) - (ax6 * cy8))) > 0);
HXDLIN( 217)				if (!(adjustWinding6)) {
HXDLIN( 217)					Float bx_6 = bx8;
HXDLIN( 217)					Float by_6 = by8;
HXLINE(  24)					bx8 = cx8;
HXLINE(  25)					by8 = cy8;
HXLINE(  26)					cx8 = bx_6;
HXLINE(  27)					cy8 = by_6;
            				}
HXLINE( 217)				Float v_ax4 = ax6;
HXDLIN( 217)				Float v_ay4 = ay6;
HXDLIN( 217)				Float v_bx4 = bx8;
HXDLIN( 217)				Float v_by4 = by8;
HXDLIN( 217)				Float v_cx4 = cx8;
HXDLIN( 217)				Float v_cy4 = cy8;
HXDLIN( 217)				bool v_preCalculated4 = true;
HXDLIN( 217)				{
HXDLIN( 217)					v_s04 = ((v_ay4 * v_cx4) - (v_ax4 * v_cy4));
HXDLIN( 217)					v_sx4 = (v_cy4 - v_ay4);
HXDLIN( 217)					v_sy4 = (v_ax4 - v_cx4);
HXDLIN( 217)					v_t04 = ((v_ax4 * v_by4) - (v_ay4 * v_bx4));
HXDLIN( 217)					v_tx4 = (v_ay4 - v_by4);
HXDLIN( 217)					v_ty4 = (v_bx4 - v_ax4);
HXDLIN( 217)					v_A4 = ((((-(v_by4) * v_cx4) + (v_ay4 * (-(v_bx4) + v_cx4))) + (v_ax4 * (v_by4 - v_cy4))) + (v_bx4 * v_cy4));
HXDLIN( 217)					Float a55 = v_ax4;
HXDLIN( 217)					Float b58 = v_bx4;
HXDLIN( 217)					Float c31 = v_cx4;
HXDLIN( 217)					if ((a55 > b58)) {
HXDLIN( 217)						if ((a55 > c31)) {
HXDLIN( 217)							int min44;
HXDLIN( 217)							if ((b58 > c31)) {
HXDLIN( 217)								min44 = ::Math_obj::floor(c31);
            							}
            							else {
HXDLIN( 217)								min44 = ::Math_obj::floor(b58);
            							}
HXDLIN( 217)							int ii_min88 = min44;
HXDLIN( 217)							int ii_max88 = ::Math_obj::ceil(a55);
HXDLIN( 217)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min88,ii_max88);
            						}
            						else {
HXDLIN( 217)							int ii_min89 = ::Math_obj::floor(b58);
HXDLIN( 217)							int ii_max89 = ::Math_obj::ceil(c31);
HXDLIN( 217)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min89,ii_max89);
            						}
            					}
            					else {
HXDLIN( 217)						if ((b58 > c31)) {
HXDLIN( 217)							int min45;
HXDLIN( 217)							if ((a55 > c31)) {
HXDLIN( 217)								min45 = ::Math_obj::floor(c31);
            							}
            							else {
HXDLIN( 217)								min45 = ::Math_obj::ceil(a55);
            							}
HXDLIN( 217)							int ii_min90 = min45;
HXDLIN( 217)							int ii_max90 = ::Math_obj::ceil(b58);
HXDLIN( 217)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min90,ii_max90);
            						}
            						else {
HXDLIN( 217)							int ii_min91 = ::Math_obj::floor(a55);
HXDLIN( 217)							int ii_max91 = ::Math_obj::ceil(c31);
HXDLIN( 217)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min91,ii_max91);
            						}
            					}
HXDLIN( 217)					Float a56 = v_ay4;
HXDLIN( 217)					Float b59 = v_by4;
HXDLIN( 217)					Float c32 = v_cy4;
HXDLIN( 217)					if ((a56 > b59)) {
HXDLIN( 217)						if ((a56 > c32)) {
HXDLIN( 217)							int min46;
HXDLIN( 217)							if ((b59 > c32)) {
HXDLIN( 217)								min46 = ::Math_obj::floor(c32);
            							}
            							else {
HXDLIN( 217)								min46 = ::Math_obj::floor(b59);
            							}
HXDLIN( 217)							int ii_min92 = min46;
HXDLIN( 217)							int ii_max92 = ::Math_obj::ceil(a56);
HXDLIN( 217)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min92,ii_max92);
            						}
            						else {
HXDLIN( 217)							int ii_min93 = ::Math_obj::floor(b59);
HXDLIN( 217)							int ii_max93 = ::Math_obj::ceil(c32);
HXDLIN( 217)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min93,ii_max93);
            						}
            					}
            					else {
HXDLIN( 217)						if ((b59 > c32)) {
HXDLIN( 217)							int min47;
HXDLIN( 217)							if ((a56 > c32)) {
HXDLIN( 217)								min47 = ::Math_obj::floor(c32);
            							}
            							else {
HXDLIN( 217)								min47 = ::Math_obj::ceil(a56);
            							}
HXDLIN( 217)							int ii_min94 = min47;
HXDLIN( 217)							int ii_max94 = ::Math_obj::ceil(b59);
HXDLIN( 217)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min94,ii_max94);
            						}
            						else {
HXDLIN( 217)							int ii_min95 = ::Math_obj::floor(a56);
HXDLIN( 217)							int ii_max95 = ::Math_obj::ceil(c32);
HXDLIN( 217)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min95,ii_max95);
            						}
            					}
            				}
HXDLIN( 217)				if (hasUndo6) {
HXDLIN( 217)					v_undoImage4 = undoImage18;
HXDLIN( 217)					v_undoX4 = xIter36->start;
HXDLIN( 217)					v_undoY4 = yIter36->start;
            				}
HXDLIN( 217)				bool hasUndo7 = false;
HXDLIN( 217)				int aA5 = ((color >> 24) & 255);
HXDLIN( 217)				int rA5 = ((color >> 16) & 255);
HXDLIN( 217)				int gA5 = ((color >> 8) & 255);
HXDLIN( 217)				int bA5 = (color & 255);
HXDLIN( 217)				Float bcx5 = (dx5 - ax4);
HXDLIN( 217)				Float bcy5 = (dy5 - ay4);
HXDLIN( 217)				Float acx5 = (ex1 - ax4);
HXDLIN( 217)				Float acy5 = (ey1 - ay4);
HXDLIN( 217)				Float dot115 = ((bcx5 * bcx5) + (bcy5 * bcy5));
HXDLIN( 217)				Float dot125 = ((bcx5 * acx5) + (bcy5 * acy5));
HXDLIN( 217)				Float dot225 = ((acx5 * acx5) + (acy5 * acy5));
HXDLIN( 217)				Float denom15 = (( (Float)(1) ) / ((dot115 * dot225) - (dot125 * dot125)));
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN( 217)				if ((ex1 > dx5)) {
HXDLIN( 217)					if ((ex1 > ax4)) {
HXDLIN( 217)						int min48;
HXDLIN( 217)						if ((dx5 > ax4)) {
HXDLIN( 217)							min48 = ::Math_obj::floor(ax4);
            						}
            						else {
HXDLIN( 217)							min48 = ::Math_obj::floor(dx5);
            						}
HXDLIN( 217)						int ii_min96 = min48;
HXDLIN( 217)						int ii_max96 = ::Math_obj::ceil(ex1);
HXDLIN( 217)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min96,ii_max96);
            					}
            					else {
HXDLIN( 217)						int ii_min97 = ::Math_obj::floor(dx5);
HXDLIN( 217)						int ii_max97 = ::Math_obj::ceil(ax4);
HXDLIN( 217)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min97,ii_max97);
            					}
            				}
            				else {
HXDLIN( 217)					if ((dx5 > ax4)) {
HXDLIN( 217)						int min49;
HXDLIN( 217)						if ((ex1 > ax4)) {
HXDLIN( 217)							min49 = ::Math_obj::floor(ax4);
            						}
            						else {
HXDLIN( 217)							min49 = ::Math_obj::ceil(ex1);
            						}
HXDLIN( 217)						int ii_min98 = min49;
HXDLIN( 217)						int ii_max98 = ::Math_obj::ceil(dx5);
HXDLIN( 217)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min98,ii_max98);
            					}
            					else {
HXDLIN( 217)						int ii_min99 = ::Math_obj::floor(ex1);
HXDLIN( 217)						int ii_max99 = ::Math_obj::ceil(ax4);
HXDLIN( 217)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min99,ii_max99);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN( 217)				if ((ey1 > dy5)) {
HXDLIN( 217)					if ((ey1 > ay4)) {
HXDLIN( 217)						int min50;
HXDLIN( 217)						if ((dy5 > ay4)) {
HXDLIN( 217)							min50 = ::Math_obj::floor(ay4);
            						}
            						else {
HXDLIN( 217)							min50 = ::Math_obj::floor(dy5);
            						}
HXDLIN( 217)						int ii_min100 = min50;
HXDLIN( 217)						int ii_max100 = ::Math_obj::ceil(ey1);
HXDLIN( 217)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min100,ii_max100);
            					}
            					else {
HXDLIN( 217)						int ii_min101 = ::Math_obj::floor(dy5);
HXDLIN( 217)						int ii_max101 = ::Math_obj::ceil(ay4);
HXDLIN( 217)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min101,ii_max101);
            					}
            				}
            				else {
HXDLIN( 217)					if ((dy5 > ay4)) {
HXDLIN( 217)						int min51;
HXDLIN( 217)						if ((ey1 > ay4)) {
HXDLIN( 217)							min51 = ::Math_obj::floor(ay4);
            						}
            						else {
HXDLIN( 217)							min51 = ::Math_obj::ceil(ey1);
            						}
HXDLIN( 217)						int ii_min102 = min51;
HXDLIN( 217)						int ii_max102 = ::Math_obj::ceil(dy5);
HXDLIN( 217)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min102,ii_max102);
            					}
            					else {
HXDLIN( 217)						int ii_min103 = ::Math_obj::floor(ey1);
HXDLIN( 217)						int ii_max103 = ::Math_obj::ceil(ay4);
HXDLIN( 217)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min103,ii_max103);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN( 217)				if (hasUndo7) {
HXDLIN( 217)					int width7 = ((xIter37->max - xIter37->start) + 1);
HXDLIN( 217)					int height7 = ((yIter37->max - yIter37->start) + 1);
HXDLIN( 217)					 ::Dynamic imageType7 = null();
HXDLIN( 217)					 ::pi_xy::ImageStruct this223 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 217)					if (::hx::IsNull( imageType7 )) {
HXLINE(  54)						imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 217)					::Dynamic undoImage22;
HXDLIN( 217)					switch((int)(( (int)(imageType7) ))){
            						case (int)0: {
HXDLIN( 217)							 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::BytesImg b60 = byt7;
HXDLIN( 217)							{
HXDLIN( 217)								b60->width = width7;
HXDLIN( 217)								b60->height = height7;
HXDLIN( 217)								b60->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 217)								b60->data = ::haxe::io::Bytes_obj::alloc((b60->length * 4));
HXDLIN( 217)								{
HXDLIN( 217)									int len14 = b60->length;
HXDLIN( 217)									int w7 = 0;
HXDLIN( 217)									{
HXDLIN( 217)										int _g140 = 0;
HXDLIN( 217)										int _g141 = b60->height;
HXDLIN( 217)										while((_g140 < _g141)){
HXDLIN( 217)											_g140 = (_g140 + 1);
HXDLIN( 217)											int y23 = (_g140 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												int _g142 = 0;
HXDLIN( 217)												int _g143 = b60->width;
HXDLIN( 217)												while((_g142 < _g143)){
HXDLIN( 217)													_g142 = (_g142 + 1);
HXDLIN( 217)													int x23 = (_g142 - 1);
HXDLIN( 217)													{
HXDLIN( 217)														w7 = (w7 + 1);
HXDLIN( 217)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w7 = (w7 + 1);
HXDLIN( 217)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w7 = (w7 + 1);
HXDLIN( 217)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w7 = (w7 + 1);
HXDLIN( 217)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage22 = b60;
            						}
            						break;
            						case (int)1: {
HXDLIN( 217)							 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::ArrIntImg a57 = arrI7;
HXDLIN( 217)							{
HXDLIN( 217)								a57->width = width7;
HXDLIN( 217)								a57->height = height7;
HXDLIN( 217)								a57->data = ::Array_obj< int >::__new(0);
HXDLIN( 217)								a57->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 217)								{
HXDLIN( 217)									int _g144 = 0;
HXDLIN( 217)									int _g145 = a57->length;
HXDLIN( 217)									while((_g144 < _g145)){
HXDLIN( 217)										_g144 = (_g144 + 1);
HXDLIN( 217)										int i62 = (_g144 - 1);
HXDLIN( 217)										a57->data[i62] = 0;
            									}
            								}
            							}
HXDLIN( 217)							undoImage22 = a57;
            						}
            						break;
            						case (int)2: {
HXDLIN( 217)							 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::U32ArrImg b61 = u32a7;
HXDLIN( 217)							{
HXDLIN( 217)								b61->width = width7;
HXDLIN( 217)								b61->height = height7;
HXDLIN( 217)								b61->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 217)								int size7 = (b61->length * 4);
HXDLIN( 217)								b61->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN( 217)								{
HXDLIN( 217)									int _g146 = 0;
HXDLIN( 217)									int _g147 = b61->length;
HXDLIN( 217)									while((_g146 < _g147)){
HXDLIN( 217)										_g146 = (_g146 + 1);
HXDLIN( 217)										int i63 = (_g146 - 1);
HXDLIN( 217)										{
HXDLIN( 217)											 ::haxe::io::ArrayBufferViewImpl this224 = b61->data;
HXDLIN( 217)											bool undoImage23;
HXDLIN( 217)											if ((i63 >= 0)) {
HXDLIN( 217)												undoImage23 = (i63 < (this224->byteLength >> 2));
            											}
            											else {
HXDLIN( 217)												undoImage23 = false;
            											}
HXDLIN( 217)											if (undoImage23) {
HXDLIN( 217)												 ::haxe::io::Bytes _this7 = this224->bytes;
HXDLIN( 217)												int pos7 = ((i63 << 2) + this224->byteOffset);
HXDLIN( 217)												_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN( 217)												_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage22 = b61;
            						}
            						break;
            						case (int)3: {
HXDLIN( 217)							 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::VecIntImg v15 = vec7;
HXDLIN( 217)							{
HXDLIN( 217)								v15->width = width7;
HXDLIN( 217)								v15->height = height7;
HXDLIN( 217)								v15->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 217)								v15->data = ::Array_obj< int >::__new(v15->length);
HXDLIN( 217)								{
HXDLIN( 217)									int _g148 = 0;
HXDLIN( 217)									int _g149 = v15->length;
HXDLIN( 217)									while((_g148 < _g149)){
HXDLIN( 217)										_g148 = (_g148 + 1);
HXDLIN( 217)										int i64 = (_g148 - 1);
HXDLIN( 217)										v15->data->__unsafe_set(i64,0);
            									}
            								}
            							}
HXDLIN( 217)							undoImage22 = v15;
            						}
            						break;
            						case (int)4: {
HXDLIN( 217)							 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::StackIntImg b62 = sInt7;
HXDLIN( 217)							{
HXDLIN( 217)								b62->width = width7;
HXDLIN( 217)								b62->height = height7;
HXDLIN( 217)								b62->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 217)								b62->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 217)								{
HXDLIN( 217)									int len15 = b62->length;
HXDLIN( 217)									 ::haxe::ds::GenericStack_Int d7 = b62->data;
HXDLIN( 217)									if (::hx::IsNull( d7->head )) {
HXDLIN( 217)										int _g150 = 0;
HXDLIN( 217)										int _g151 = len15;
HXDLIN( 217)										while((_g150 < _g151)){
HXDLIN( 217)											_g150 = (_g150 + 1);
HXDLIN( 217)											int i65 = (_g150 - 1);
HXDLIN( 217)											d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            										}
            									}
            									else {
HXDLIN( 217)										int _g152 = 0;
HXDLIN( 217)										int _g153 = len15;
HXDLIN( 217)										while((_g152 < _g153)){
HXDLIN( 217)											_g152 = (_g152 + 1);
HXDLIN( 217)											int i66 = (_g152 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int l7 = b62->data->head;
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN( 217)												{
HXDLIN( 217)													int _g154 = 0;
HXDLIN( 217)													int _g155 = i66;
HXDLIN( 217)													while((_g154 < _g155)){
HXDLIN( 217)														_g154 = (_g154 + 1);
HXDLIN( 217)														int i67 = (_g154 - 1);
HXLINE( 345)														prev7 = l7;
HXLINE( 346)														l7 = l7->next;
            													}
            												}
HXLINE( 217)												if (::hx::IsNull( prev7 )) {
HXDLIN( 217)													b62->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN( 217)													l7 = null();
            												}
            												else {
HXDLIN( 217)													prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN( 217)													l7 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage22 = b62;
            						}
            						break;
            					}
HXDLIN( 217)					this223->image = undoImage22;
HXDLIN( 217)					this223->width = width7;
HXDLIN( 217)					this223->height = height7;
HXDLIN( 217)					this223->imageType = ( (int)(imageType7) );
HXDLIN( 217)					undoImage21 = this223;
HXDLIN( 217)					{
HXDLIN( 217)						int rectLeft7 = xIter37->start;
HXDLIN( 217)						int rectTop7 = yIter37->start;
HXDLIN( 217)						int rectRight7 = xIter37->max;
HXDLIN( 217)						bool forceClear7 = false;
HXDLIN( 217)						{
HXDLIN( 217)							int _g156 = rectTop7;
HXDLIN( 217)							int _g157 = yIter37->max;
HXDLIN( 217)							while((_g156 < _g157)){
HXDLIN( 217)								_g156 = (_g156 + 1);
HXDLIN( 217)								int dy9 = (_g156 - 1);
HXDLIN( 217)								{
HXDLIN( 217)									int _g158 = rectLeft7;
HXDLIN( 217)									int _g159 = rectRight7;
HXDLIN( 217)									while((_g158 < _g159)){
HXDLIN( 217)										_g158 = (_g158 + 1);
HXDLIN( 217)										int dx9 = (_g158 - 1);
HXDLIN( 217)										::Dynamic this225 = this1->image;
HXDLIN( 217)										int index30;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											index30 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx9) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											index30 = ::Std_obj::_hx_int(( (Float)(((dy9 * this1->width) + dx9)) ));
            										}
HXDLIN( 217)										int c33 = ::iterMagic::Iimg_obj::get(this225,index30);
HXDLIN( 217)										int col7;
HXDLIN( 217)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)											col7 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            										}
            										else {
HXDLIN( 217)											col7 = c33;
            										}
HXDLIN( 217)										bool hitQuad57;
HXDLIN( 217)										if (this1->useMask) {
HXDLIN( 217)											hitQuad57 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 217)											hitQuad57 = false;
            										}
HXDLIN( 217)										if (hitQuad57) {
HXDLIN( 217)											 ::pi_xy::ImageStruct this226 = this1->mask;
HXDLIN( 217)											::Dynamic this227 = this226->image;
HXDLIN( 217)											int index31;
HXDLIN( 217)											if (this226->useVirtualPos) {
HXDLIN( 217)												index31 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this226->virtualY) * ( (Float)(this226->width) )) + dx9) - this226->virtualX));
            											}
            											else {
HXDLIN( 217)												index31 = ::Std_obj::_hx_int(( (Float)(((dy9 * this226->width) + dx9)) ));
            											}
HXDLIN( 217)											int c34 = ::iterMagic::Iimg_obj::get(this227,index31);
HXDLIN( 217)											int v16;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												v16 = ((((((c34 >> 24) & 255) << 24) | ((c34 & 255) << 16)) | (((c34 >> 8) & 255) << 8)) | ((c34 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												v16 = c34;
            											}
HXDLIN( 217)											int maskPixel7 = v16;
HXDLIN( 217)											int this228 = col7;
HXDLIN( 217)											if ((maskPixel7 == 0)) {
HXDLIN( 217)												col7 = this228;
            											}
            											else {
HXDLIN( 217)												Float m07;
HXDLIN( 217)												int this229 = ((maskPixel7 >> 24) & 255);
HXDLIN( 217)												if ((this229 == 0)) {
HXDLIN( 217)													m07 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m07 = (( (Float)(this229) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m17;
HXDLIN( 217)												int this230 = ((maskPixel7 >> 16) & 255);
HXDLIN( 217)												if ((this230 == 0)) {
HXDLIN( 217)													m17 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m17 = (( (Float)(this230) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m27;
HXDLIN( 217)												int this231 = ((maskPixel7 >> 8) & 255);
HXDLIN( 217)												if ((this231 == 0)) {
HXDLIN( 217)													m27 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m27 = (( (Float)(this231) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m37;
HXDLIN( 217)												int this232 = (maskPixel7 & 255);
HXDLIN( 217)												if ((this232 == 0)) {
HXDLIN( 217)													m37 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m37 = (( (Float)(this232) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this228 >> 24) & 255)) )));
HXDLIN( 217)												int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this228 >> 16) & 255)) )));
HXDLIN( 217)												int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this228 >> 8) & 255)) )));
HXDLIN( 217)												int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this228 & 255)) )));
HXDLIN( 217)												col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 217)										if ((col7 != 0)) {
HXDLIN( 217)											int x24 = (dx9 - rectLeft7);
HXDLIN( 217)											int y24 = (dy9 - rectTop7);
HXDLIN( 217)											int c35 = col7;
HXDLIN( 217)											bool hitQuad58;
HXDLIN( 217)											if ((((c35 >> 24) & 255) < 254)) {
HXDLIN( 217)												hitQuad58 = undoImage21->transparent;
            											}
            											else {
HXDLIN( 217)												hitQuad58 = false;
            											}
HXDLIN( 217)											if (hitQuad58) {
HXDLIN( 217)												int location14;
HXDLIN( 217)												if (undoImage21->useVirtualPos) {
HXDLIN( 217)													location14 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x24) - undoImage21->virtualX));
            												}
            												else {
HXDLIN( 217)													location14 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage21->width) + x24)) ));
            												}
HXDLIN( 217)												int this233 = ::iterMagic::Iimg_obj::get(undoImage21->image,location14);
HXDLIN( 217)												int this234;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													this234 = ((((((this233 >> 24) & 255) << 24) | ((this233 & 255) << 16)) | (((this233 >> 8) & 255) << 8)) | ((this233 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													this234 = this233;
            												}
HXDLIN( 217)												Float a119;
HXDLIN( 217)												int this235 = ((this234 >> 24) & 255);
HXDLIN( 217)												if ((this235 == 0)) {
HXDLIN( 217)													a119 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a119 = (( (Float)(this235) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r116;
HXDLIN( 217)												int this236 = ((this234 >> 16) & 255);
HXDLIN( 217)												if ((this236 == 0)) {
HXDLIN( 217)													r116 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r116 = (( (Float)(this236) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g116;
HXDLIN( 217)												int this237 = ((this234 >> 8) & 255);
HXDLIN( 217)												if ((this237 == 0)) {
HXDLIN( 217)													g116 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g116 = (( (Float)(this237) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b120;
HXDLIN( 217)												int this238 = (this234 & 255);
HXDLIN( 217)												if ((this238 == 0)) {
HXDLIN( 217)													b120 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b120 = (( (Float)(this238) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a217;
HXDLIN( 217)												int this239 = ((col7 >> 24) & 255);
HXDLIN( 217)												if ((this239 == 0)) {
HXDLIN( 217)													a217 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a217 = (( (Float)(this239) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r214;
HXDLIN( 217)												int this240 = ((col7 >> 16) & 255);
HXDLIN( 217)												if ((this240 == 0)) {
HXDLIN( 217)													r214 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r214 = (( (Float)(this240) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g214;
HXDLIN( 217)												int this241 = ((col7 >> 8) & 255);
HXDLIN( 217)												if ((this241 == 0)) {
HXDLIN( 217)													g214 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g214 = (( (Float)(this241) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b218;
HXDLIN( 217)												int this242 = (col7 & 255);
HXDLIN( 217)												if ((this242 == 0)) {
HXDLIN( 217)													b218 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b218 = (( (Float)(this242) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a316 = (a119 * (( (Float)(1) ) - a217));
HXDLIN( 217)												int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a316) + (r214 * a217))));
HXDLIN( 217)												int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a316) + (g214 * a217))));
HXDLIN( 217)												int b63 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a316) + (b218 * a217))));
HXDLIN( 217)												int a58 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN( 217)												int blended14 = ((((a58 << 24) | (r37 << 16)) | (g37 << 8)) | b63);
HXDLIN( 217)												{
HXDLIN( 217)													int hitQuad59;
HXDLIN( 217)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)														hitQuad59 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            													}
            													else {
HXDLIN( 217)														hitQuad59 = blended14;
            													}
HXDLIN( 217)													::iterMagic::Iimg_obj::set(undoImage21->image,location14,hitQuad59);
            												}
            											}
            											else {
HXDLIN( 217)												::Dynamic this243 = undoImage21->image;
HXDLIN( 217)												int index32;
HXDLIN( 217)												if (undoImage21->useVirtualPos) {
HXDLIN( 217)													index32 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x24) - undoImage21->virtualX));
            												}
            												else {
HXDLIN( 217)													index32 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage21->width) + x24)) ));
            												}
HXDLIN( 217)												int hitQuad60;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad60 = ((((((c35 >> 24) & 255) << 24) | ((c35 & 255) << 16)) | (((c35 >> 8) & 255) << 8)) | ((c35 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad60 = c35;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this243,index32,hitQuad60);
            											}
            										}
            										else {
HXDLIN( 217)											if (forceClear7) {
HXDLIN( 217)												::Dynamic this244 = undoImage21->image;
HXDLIN( 217)												int x25 = (dx9 - rectLeft7);
HXDLIN( 217)												int y25 = (dy9 - rectTop7);
HXDLIN( 217)												int index33;
HXDLIN( 217)												if (undoImage21->useVirtualPos) {
HXDLIN( 217)													index33 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x25) - undoImage21->virtualX));
            												}
            												else {
HXDLIN( 217)													index33 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage21->width) + x25)) ));
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this244,index33,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 217)				bool found7 = false;
HXDLIN( 217)				{
HXDLIN( 217)					int _g_min14 = xIter37->start;
HXDLIN( 217)					int _g_max14 = xIter37->max;
HXDLIN( 217)					while((_g_min14 < _g_max14)){
HXDLIN( 217)						_g_min14 = (_g_min14 + 1);
HXDLIN( 217)						int px6 = (_g_min14 - 1);
HXDLIN( 217)						Float pcx5 = (( (Float)(px6) ) - ax4);
HXLINE( 619)						found7 = false;
HXLINE( 217)						{
HXDLIN( 217)							int _g_min15 = yIter37->start;
HXDLIN( 217)							int _g_max15 = yIter37->max;
HXDLIN( 217)							while((_g_min15 < _g_max15)){
HXDLIN( 217)								_g_min15 = (_g_min15 + 1);
HXDLIN( 217)								int py6 = (_g_min15 - 1);
HXDLIN( 217)								Float pcy5 = (( (Float)(py6) ) - ay4);
HXDLIN( 217)								Float dot315 = ((pcx5 * bcx5) + (pcy5 * bcy5));
HXDLIN( 217)								Float dot325 = ((pcx5 * acx5) + (pcy5 * acy5));
HXDLIN( 217)								Float ratioA5 = (((dot225 * dot315) - (dot125 * dot325)) * denom15);
HXDLIN( 217)								Float ratioB5 = (((dot115 * dot325) - (dot125 * dot315)) * denom15);
HXDLIN( 217)								Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN( 217)								bool hitQuad61;
HXDLIN( 217)								bool hitQuad62;
HXDLIN( 217)								if ((ratioA5 >= 0)) {
HXDLIN( 217)									hitQuad62 = (ratioB5 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad62 = false;
            								}
HXDLIN( 217)								if (hitQuad62) {
HXDLIN( 217)									hitQuad61 = (ratioC5 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad61 = false;
            								}
HXDLIN( 217)								if (hitQuad61) {
HXDLIN( 217)									int i68 = ::Std_obj::_hx_int((( (Float)(aA5) ) * (soft * ratioB5)));
HXDLIN( 217)									if ((i68 > 255)) {
HXLINE(  24)										i68 = 255;
            									}
HXLINE( 217)									if ((i68 < 0)) {
HXLINE(  25)										i68 = 0;
            									}
HXLINE( 217)									int a59 = i68;
HXDLIN( 217)									int i69 = ::Std_obj::_hx_int(( (Float)(rA5) ));
HXDLIN( 217)									if ((i69 > 255)) {
HXLINE(  24)										i69 = 255;
            									}
HXLINE( 217)									if ((i69 < 0)) {
HXLINE(  25)										i69 = 0;
            									}
HXLINE( 217)									int r38 = i69;
HXDLIN( 217)									int i70 = ::Std_obj::_hx_int(( (Float)(gA5) ));
HXDLIN( 217)									if ((i70 > 255)) {
HXLINE(  24)										i70 = 255;
            									}
HXLINE( 217)									if ((i70 < 0)) {
HXLINE(  25)										i70 = 0;
            									}
HXLINE( 217)									int g38 = i70;
HXDLIN( 217)									int i71 = ::Std_obj::_hx_int(( (Float)(bA5) ));
HXDLIN( 217)									if ((i71 > 255)) {
HXLINE(  24)										i71 = 255;
            									}
HXLINE( 217)									if ((i71 < 0)) {
HXLINE(  25)										i71 = 0;
            									}
HXLINE( 217)									int b64 = i71;
HXDLIN( 217)									{
HXDLIN( 217)										int location15;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											location15 = ::Std_obj::_hx_int(((((( (Float)(py6) ) - this1->virtualY) * ( (Float)(this1->width) )) + px6) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											location15 = ::Std_obj::_hx_int(( (Float)(((py6 * this1->width) + px6)) ));
            										}
HXDLIN( 217)										bool hitQuad63;
HXDLIN( 217)										if (this1->transparent) {
HXDLIN( 217)											hitQuad63 = (a59 < 254);
            										}
            										else {
HXDLIN( 217)											hitQuad63 = false;
            										}
HXDLIN( 217)										if (hitQuad63) {
HXDLIN( 217)											int this245 = ::iterMagic::Iimg_obj::get(this1->image,location15);
HXDLIN( 217)											int old5;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												old5 = ((((((this245 >> 24) & 255) << 24) | ((this245 & 255) << 16)) | (((this245 >> 8) & 255) << 8)) | ((this245 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												old5 = this245;
            											}
HXDLIN( 217)											int rhs5 = ((((a59 << 24) | (r38 << 16)) | (g38 << 8)) | b64);
HXDLIN( 217)											Float a120;
HXDLIN( 217)											int this246 = ((old5 >> 24) & 255);
HXDLIN( 217)											if ((this246 == 0)) {
HXDLIN( 217)												a120 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a120 = (( (Float)(this246) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r117;
HXDLIN( 217)											int this247 = ((old5 >> 16) & 255);
HXDLIN( 217)											if ((this247 == 0)) {
HXDLIN( 217)												r117 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r117 = (( (Float)(this247) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g117;
HXDLIN( 217)											int this248 = ((old5 >> 8) & 255);
HXDLIN( 217)											if ((this248 == 0)) {
HXDLIN( 217)												g117 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g117 = (( (Float)(this248) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b121;
HXDLIN( 217)											int this249 = (old5 & 255);
HXDLIN( 217)											if ((this249 == 0)) {
HXDLIN( 217)												b121 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b121 = (( (Float)(this249) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a218;
HXDLIN( 217)											int this250 = ((rhs5 >> 24) & 255);
HXDLIN( 217)											if ((this250 == 0)) {
HXDLIN( 217)												a218 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a218 = (( (Float)(this250) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r215;
HXDLIN( 217)											int this251 = ((rhs5 >> 16) & 255);
HXDLIN( 217)											if ((this251 == 0)) {
HXDLIN( 217)												r215 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r215 = (( (Float)(this251) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g215;
HXDLIN( 217)											int this252 = ((rhs5 >> 8) & 255);
HXDLIN( 217)											if ((this252 == 0)) {
HXDLIN( 217)												g215 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g215 = (( (Float)(this252) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b219;
HXDLIN( 217)											int this253 = (rhs5 & 255);
HXDLIN( 217)											if ((this253 == 0)) {
HXDLIN( 217)												b219 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b219 = (( (Float)(this253) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a317 = (a120 * (( (Float)(1) ) - a218));
HXDLIN( 217)											int r39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a317) + (r215 * a218))));
HXDLIN( 217)											int g39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a317) + (g215 * a218))));
HXDLIN( 217)											int b65 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b121 * a317) + (b219 * a218))));
HXDLIN( 217)											int a60 = ::Std_obj::_hx_int((( (Float)(255) ) * (a317 + a218)));
HXDLIN( 217)											int blended15 = ((((a60 << 24) | (r39 << 16)) | (g39 << 8)) | b65);
HXDLIN( 217)											{
HXDLIN( 217)												int hitQuad64;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad64 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad64 = blended15;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this1->image,location15,hitQuad64);
            											}
            										}
            										else {
HXDLIN( 217)											int value5;
HXDLIN( 217)											if (this1->isLittle) {
HXDLIN( 217)												value5 = ((((a59 << 24) | (b64 << 16)) | (g38 << 8)) | r38);
            											}
            											else {
HXDLIN( 217)												value5 = ((((a59 << 24) | (r38 << 16)) | (g38 << 8)) | b64);
            											}
HXDLIN( 217)											::iterMagic::Iimg_obj::set(this1->image,location15,value5);
            										}
            									}
HXLINE( 633)									found7 = true;
            								}
            								else {
HXDLIN( 217)									if (found7) {
HXDLIN( 217)										goto _hx_goto_347;
            									}
            								}
            							}
            							_hx_goto_347:;
            						}
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart v_yIter35;
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart v_xIter35;
HXDLIN( 217)				int v_undoY5;
HXDLIN( 217)				int v_undoX5;
HXDLIN( 217)				Float v_ty5;
HXDLIN( 217)				Float v_tx5;
HXDLIN( 217)				Float v_t05;
HXDLIN( 217)				Float v_sy5;
HXDLIN( 217)				Float v_sx5;
HXDLIN( 217)				Float v_s05;
HXDLIN( 217)				Float v_A5;
HXDLIN( 217)				Float ax7 = ex1;
HXDLIN( 217)				Float ay7 = ey1;
HXDLIN( 217)				 ::pi_xy::ImageStruct v_undoImage5 = null();
HXDLIN( 217)				Float bx9 = dx5;
HXDLIN( 217)				Float by9 = dy5;
HXDLIN( 217)				Float cx9 = ax4;
HXDLIN( 217)				Float cy9 = ay4;
HXDLIN( 217)				bool adjustWinding7 = (((((ax7 * by9) - (bx9 * ay7)) + ((bx9 * cy9) - (cx9 * by9))) + ((cx9 * ay7) - (ax7 * cy9))) > 0);
HXDLIN( 217)				if (!(adjustWinding7)) {
HXDLIN( 217)					Float bx_7 = bx9;
HXDLIN( 217)					Float by_7 = by9;
HXLINE(  24)					bx9 = cx9;
HXLINE(  25)					by9 = cy9;
HXLINE(  26)					cx9 = bx_7;
HXLINE(  27)					cy9 = by_7;
            				}
HXLINE( 217)				Float v_ax5 = ax7;
HXDLIN( 217)				Float v_ay5 = ay7;
HXDLIN( 217)				Float v_bx5 = bx9;
HXDLIN( 217)				Float v_by5 = by9;
HXDLIN( 217)				Float v_cx5 = cx9;
HXDLIN( 217)				Float v_cy5 = cy9;
HXDLIN( 217)				bool v_preCalculated5 = true;
HXDLIN( 217)				{
HXDLIN( 217)					v_s05 = ((v_ay5 * v_cx5) - (v_ax5 * v_cy5));
HXDLIN( 217)					v_sx5 = (v_cy5 - v_ay5);
HXDLIN( 217)					v_sy5 = (v_ax5 - v_cx5);
HXDLIN( 217)					v_t05 = ((v_ax5 * v_by5) - (v_ay5 * v_bx5));
HXDLIN( 217)					v_tx5 = (v_ay5 - v_by5);
HXDLIN( 217)					v_ty5 = (v_bx5 - v_ax5);
HXDLIN( 217)					v_A5 = ((((-(v_by5) * v_cx5) + (v_ay5 * (-(v_bx5) + v_cx5))) + (v_ax5 * (v_by5 - v_cy5))) + (v_bx5 * v_cy5));
HXDLIN( 217)					Float a61 = v_ax5;
HXDLIN( 217)					Float b66 = v_bx5;
HXDLIN( 217)					Float c36 = v_cx5;
HXDLIN( 217)					if ((a61 > b66)) {
HXDLIN( 217)						if ((a61 > c36)) {
HXDLIN( 217)							int min52;
HXDLIN( 217)							if ((b66 > c36)) {
HXDLIN( 217)								min52 = ::Math_obj::floor(c36);
            							}
            							else {
HXDLIN( 217)								min52 = ::Math_obj::floor(b66);
            							}
HXDLIN( 217)							int ii_min104 = min52;
HXDLIN( 217)							int ii_max104 = ::Math_obj::ceil(a61);
HXDLIN( 217)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min104,ii_max104);
            						}
            						else {
HXDLIN( 217)							int ii_min105 = ::Math_obj::floor(b66);
HXDLIN( 217)							int ii_max105 = ::Math_obj::ceil(c36);
HXDLIN( 217)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min105,ii_max105);
            						}
            					}
            					else {
HXDLIN( 217)						if ((b66 > c36)) {
HXDLIN( 217)							int min53;
HXDLIN( 217)							if ((a61 > c36)) {
HXDLIN( 217)								min53 = ::Math_obj::floor(c36);
            							}
            							else {
HXDLIN( 217)								min53 = ::Math_obj::ceil(a61);
            							}
HXDLIN( 217)							int ii_min106 = min53;
HXDLIN( 217)							int ii_max106 = ::Math_obj::ceil(b66);
HXDLIN( 217)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min106,ii_max106);
            						}
            						else {
HXDLIN( 217)							int ii_min107 = ::Math_obj::floor(a61);
HXDLIN( 217)							int ii_max107 = ::Math_obj::ceil(c36);
HXDLIN( 217)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min107,ii_max107);
            						}
            					}
HXDLIN( 217)					Float a62 = v_ay5;
HXDLIN( 217)					Float b67 = v_by5;
HXDLIN( 217)					Float c37 = v_cy5;
HXDLIN( 217)					if ((a62 > b67)) {
HXDLIN( 217)						if ((a62 > c37)) {
HXDLIN( 217)							int min54;
HXDLIN( 217)							if ((b67 > c37)) {
HXDLIN( 217)								min54 = ::Math_obj::floor(c37);
            							}
            							else {
HXDLIN( 217)								min54 = ::Math_obj::floor(b67);
            							}
HXDLIN( 217)							int ii_min108 = min54;
HXDLIN( 217)							int ii_max108 = ::Math_obj::ceil(a62);
HXDLIN( 217)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min108,ii_max108);
            						}
            						else {
HXDLIN( 217)							int ii_min109 = ::Math_obj::floor(b67);
HXDLIN( 217)							int ii_max109 = ::Math_obj::ceil(c37);
HXDLIN( 217)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min109,ii_max109);
            						}
            					}
            					else {
HXDLIN( 217)						if ((b67 > c37)) {
HXDLIN( 217)							int min55;
HXDLIN( 217)							if ((a62 > c37)) {
HXDLIN( 217)								min55 = ::Math_obj::floor(c37);
            							}
            							else {
HXDLIN( 217)								min55 = ::Math_obj::ceil(a62);
            							}
HXDLIN( 217)							int ii_min110 = min55;
HXDLIN( 217)							int ii_max110 = ::Math_obj::ceil(b67);
HXDLIN( 217)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min110,ii_max110);
            						}
            						else {
HXDLIN( 217)							int ii_min111 = ::Math_obj::floor(a62);
HXDLIN( 217)							int ii_max111 = ::Math_obj::ceil(c37);
HXDLIN( 217)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min111,ii_max111);
            						}
            					}
            				}
HXDLIN( 217)				if (hasUndo7) {
HXDLIN( 217)					v_undoImage5 = undoImage21;
HXDLIN( 217)					v_undoX5 = xIter37->start;
HXDLIN( 217)					v_undoY5 = yIter37->start;
            				}
HXDLIN( 217)				 ::pi_xy::algo::HitQuad v17 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax4,ay4,bx5,by5,cx5,cy5,dx5,dy5,true);
HXDLIN( 217)				hitQuad = v17;
            			}
            		}
            		else {
HXDLIN( 217)			Float sin3 = ::Math_obj::sin(theta);
HXDLIN( 217)			Float cos3 = ::Math_obj::cos(theta);
HXDLIN( 217)			Float radius3 = (thick / ( (Float)(2) ));
HXDLIN( 217)			Float dx10 = ((Float)0.1);
HXDLIN( 217)			Float dy10 = radius3;
HXDLIN( 217)			Float cx10 = h2;
HXDLIN( 217)			Float cy10 = radius3;
HXDLIN( 217)			Float bx10 = h2;
HXDLIN( 217)			Float by10 = -(radius3);
HXDLIN( 217)			Float ax8 = ((Float)0.1);
HXDLIN( 217)			Float ay8 = -(radius3);
HXDLIN( 217)			Float temp2 = ((Float)0.);
HXLINE(  82)			temp2 = (px + ((ax8 * cos3) - (ay8 * sin3)));
HXLINE(  83)			ay8 = (py + ((ay8 * cos3) + (ax8 * sin3)));
HXLINE(  84)			ax8 = temp2;
HXLINE(  86)			temp2 = (px + ((bx10 * cos3) - (by10 * sin3)));
HXLINE(  87)			by10 = (py + ((by10 * cos3) + (bx10 * sin3)));
HXLINE(  88)			bx10 = temp2;
HXLINE(  90)			temp2 = (px + ((cx10 * cos3) - (cy10 * sin3)));
HXLINE(  91)			cy10 = (py + ((cy10 * cos3) + (cx10 * sin3)));
HXLINE(  92)			cx10 = temp2;
HXLINE(  94)			temp2 = (px + ((dx10 * cos3) - (dy10 * sin3)));
HXLINE(  95)			dy10 = (py + ((dy10 * cos3) + (dx10 * sin3)));
HXLINE(  96)			dx10 = temp2;
HXLINE( 217)			{
HXDLIN( 217)				bool hasUndo8 = true;
HXDLIN( 217)				int aA6 = ((color >> 24) & 255);
HXDLIN( 217)				int rA6 = ((color >> 16) & 255);
HXDLIN( 217)				int gA6 = ((color >> 8) & 255);
HXDLIN( 217)				int bA6 = (color & 255);
HXDLIN( 217)				Float bcx6 = (bx10 - dx10);
HXDLIN( 217)				Float bcy6 = (by10 - dy10);
HXDLIN( 217)				Float acx6 = (ax8 - dx10);
HXDLIN( 217)				Float acy6 = (ay8 - dy10);
HXDLIN( 217)				Float dot116 = ((bcx6 * bcx6) + (bcy6 * bcy6));
HXDLIN( 217)				Float dot126 = ((bcx6 * acx6) + (bcy6 * acy6));
HXDLIN( 217)				Float dot226 = ((acx6 * acx6) + (acy6 * acy6));
HXDLIN( 217)				Float denom16 = (( (Float)(1) ) / ((dot116 * dot226) - (dot126 * dot126)));
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart xIter38;
HXDLIN( 217)				if ((ax8 > bx10)) {
HXDLIN( 217)					if ((ax8 > dx10)) {
HXDLIN( 217)						int min56;
HXDLIN( 217)						if ((bx10 > dx10)) {
HXDLIN( 217)							min56 = ::Math_obj::floor(dx10);
            						}
            						else {
HXDLIN( 217)							min56 = ::Math_obj::floor(bx10);
            						}
HXDLIN( 217)						int ii_min112 = min56;
HXDLIN( 217)						int ii_max112 = ::Math_obj::ceil(ax8);
HXDLIN( 217)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min112,ii_max112);
            					}
            					else {
HXDLIN( 217)						int ii_min113 = ::Math_obj::floor(bx10);
HXDLIN( 217)						int ii_max113 = ::Math_obj::ceil(dx10);
HXDLIN( 217)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min113,ii_max113);
            					}
            				}
            				else {
HXDLIN( 217)					if ((bx10 > dx10)) {
HXDLIN( 217)						int min57;
HXDLIN( 217)						if ((ax8 > dx10)) {
HXDLIN( 217)							min57 = ::Math_obj::floor(dx10);
            						}
            						else {
HXDLIN( 217)							min57 = ::Math_obj::ceil(ax8);
            						}
HXDLIN( 217)						int ii_min114 = min57;
HXDLIN( 217)						int ii_max114 = ::Math_obj::ceil(bx10);
HXDLIN( 217)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min114,ii_max114);
            					}
            					else {
HXDLIN( 217)						int ii_min115 = ::Math_obj::floor(ax8);
HXDLIN( 217)						int ii_max115 = ::Math_obj::ceil(dx10);
HXDLIN( 217)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min115,ii_max115);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart yIter38;
HXDLIN( 217)				if ((ay8 > by10)) {
HXDLIN( 217)					if ((ay8 > dy10)) {
HXDLIN( 217)						int min58;
HXDLIN( 217)						if ((by10 > dy10)) {
HXDLIN( 217)							min58 = ::Math_obj::floor(dy10);
            						}
            						else {
HXDLIN( 217)							min58 = ::Math_obj::floor(by10);
            						}
HXDLIN( 217)						int ii_min116 = min58;
HXDLIN( 217)						int ii_max116 = ::Math_obj::ceil(ay8);
HXDLIN( 217)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min116,ii_max116);
            					}
            					else {
HXDLIN( 217)						int ii_min117 = ::Math_obj::floor(by10);
HXDLIN( 217)						int ii_max117 = ::Math_obj::ceil(dy10);
HXDLIN( 217)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min117,ii_max117);
            					}
            				}
            				else {
HXDLIN( 217)					if ((by10 > dy10)) {
HXDLIN( 217)						int min59;
HXDLIN( 217)						if ((ay8 > dy10)) {
HXDLIN( 217)							min59 = ::Math_obj::floor(dy10);
            						}
            						else {
HXDLIN( 217)							min59 = ::Math_obj::ceil(ay8);
            						}
HXDLIN( 217)						int ii_min118 = min59;
HXDLIN( 217)						int ii_max118 = ::Math_obj::ceil(by10);
HXDLIN( 217)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min118,ii_max118);
            					}
            					else {
HXDLIN( 217)						int ii_min119 = ::Math_obj::floor(ay8);
HXDLIN( 217)						int ii_max119 = ::Math_obj::ceil(dy10);
HXDLIN( 217)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min119,ii_max119);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::ImageStruct undoImage24 = null();
HXDLIN( 217)				if (hasUndo8) {
HXDLIN( 217)					int width8 = ((xIter38->max - xIter38->start) + 1);
HXDLIN( 217)					int height8 = ((yIter38->max - yIter38->start) + 1);
HXDLIN( 217)					 ::Dynamic imageType8 = null();
HXDLIN( 217)					 ::pi_xy::ImageStruct this254 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 217)					if (::hx::IsNull( imageType8 )) {
HXLINE(  54)						imageType8 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 217)					::Dynamic undoImage25;
HXDLIN( 217)					switch((int)(( (int)(imageType8) ))){
            						case (int)0: {
HXDLIN( 217)							 ::iterMagic::BytesImg byt8 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::BytesImg b68 = byt8;
HXDLIN( 217)							{
HXDLIN( 217)								b68->width = width8;
HXDLIN( 217)								b68->height = height8;
HXDLIN( 217)								b68->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 217)								b68->data = ::haxe::io::Bytes_obj::alloc((b68->length * 4));
HXDLIN( 217)								{
HXDLIN( 217)									int len16 = b68->length;
HXDLIN( 217)									int w8 = 0;
HXDLIN( 217)									{
HXDLIN( 217)										int _g160 = 0;
HXDLIN( 217)										int _g161 = b68->height;
HXDLIN( 217)										while((_g160 < _g161)){
HXDLIN( 217)											_g160 = (_g160 + 1);
HXDLIN( 217)											int y26 = (_g160 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												int _g162 = 0;
HXDLIN( 217)												int _g163 = b68->width;
HXDLIN( 217)												while((_g162 < _g163)){
HXDLIN( 217)													_g162 = (_g162 + 1);
HXDLIN( 217)													int x26 = (_g162 - 1);
HXDLIN( 217)													{
HXDLIN( 217)														w8 = (w8 + 1);
HXDLIN( 217)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w8 = (w8 + 1);
HXDLIN( 217)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w8 = (w8 + 1);
HXDLIN( 217)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w8 = (w8 + 1);
HXDLIN( 217)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage25 = b68;
            						}
            						break;
            						case (int)1: {
HXDLIN( 217)							 ::iterMagic::ArrIntImg arrI8 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::ArrIntImg a63 = arrI8;
HXDLIN( 217)							{
HXDLIN( 217)								a63->width = width8;
HXDLIN( 217)								a63->height = height8;
HXDLIN( 217)								a63->data = ::Array_obj< int >::__new(0);
HXDLIN( 217)								a63->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 217)								{
HXDLIN( 217)									int _g164 = 0;
HXDLIN( 217)									int _g165 = a63->length;
HXDLIN( 217)									while((_g164 < _g165)){
HXDLIN( 217)										_g164 = (_g164 + 1);
HXDLIN( 217)										int i72 = (_g164 - 1);
HXDLIN( 217)										a63->data[i72] = 0;
            									}
            								}
            							}
HXDLIN( 217)							undoImage25 = a63;
            						}
            						break;
            						case (int)2: {
HXDLIN( 217)							 ::iterMagic::U32ArrImg u32a8 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::U32ArrImg b69 = u32a8;
HXDLIN( 217)							{
HXDLIN( 217)								b69->width = width8;
HXDLIN( 217)								b69->height = height8;
HXDLIN( 217)								b69->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 217)								int size8 = (b69->length * 4);
HXDLIN( 217)								b69->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size8),0,size8);
HXDLIN( 217)								{
HXDLIN( 217)									int _g166 = 0;
HXDLIN( 217)									int _g167 = b69->length;
HXDLIN( 217)									while((_g166 < _g167)){
HXDLIN( 217)										_g166 = (_g166 + 1);
HXDLIN( 217)										int i73 = (_g166 - 1);
HXDLIN( 217)										{
HXDLIN( 217)											 ::haxe::io::ArrayBufferViewImpl this255 = b69->data;
HXDLIN( 217)											bool undoImage26;
HXDLIN( 217)											if ((i73 >= 0)) {
HXDLIN( 217)												undoImage26 = (i73 < (this255->byteLength >> 2));
            											}
            											else {
HXDLIN( 217)												undoImage26 = false;
            											}
HXDLIN( 217)											if (undoImage26) {
HXDLIN( 217)												 ::haxe::io::Bytes _this8 = this255->bytes;
HXDLIN( 217)												int pos8 = ((i73 << 2) + this255->byteOffset);
HXDLIN( 217)												_this8->b[pos8] = ( (unsigned char)(0) );
HXDLIN( 217)												_this8->b[(pos8 + 1)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this8->b[(pos8 + 2)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this8->b[(pos8 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage25 = b69;
            						}
            						break;
            						case (int)3: {
HXDLIN( 217)							 ::iterMagic::VecIntImg vec8 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::VecIntImg v18 = vec8;
HXDLIN( 217)							{
HXDLIN( 217)								v18->width = width8;
HXDLIN( 217)								v18->height = height8;
HXDLIN( 217)								v18->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 217)								v18->data = ::Array_obj< int >::__new(v18->length);
HXDLIN( 217)								{
HXDLIN( 217)									int _g168 = 0;
HXDLIN( 217)									int _g169 = v18->length;
HXDLIN( 217)									while((_g168 < _g169)){
HXDLIN( 217)										_g168 = (_g168 + 1);
HXDLIN( 217)										int i74 = (_g168 - 1);
HXDLIN( 217)										v18->data->__unsafe_set(i74,0);
            									}
            								}
            							}
HXDLIN( 217)							undoImage25 = v18;
            						}
            						break;
            						case (int)4: {
HXDLIN( 217)							 ::iterMagic::StackIntImg sInt8 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::StackIntImg b70 = sInt8;
HXDLIN( 217)							{
HXDLIN( 217)								b70->width = width8;
HXDLIN( 217)								b70->height = height8;
HXDLIN( 217)								b70->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 217)								b70->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 217)								{
HXDLIN( 217)									int len17 = b70->length;
HXDLIN( 217)									 ::haxe::ds::GenericStack_Int d8 = b70->data;
HXDLIN( 217)									if (::hx::IsNull( d8->head )) {
HXDLIN( 217)										int _g170 = 0;
HXDLIN( 217)										int _g171 = len17;
HXDLIN( 217)										while((_g170 < _g171)){
HXDLIN( 217)											_g170 = (_g170 + 1);
HXDLIN( 217)											int i75 = (_g170 - 1);
HXDLIN( 217)											d8->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d8->head);
            										}
            									}
            									else {
HXDLIN( 217)										int _g172 = 0;
HXDLIN( 217)										int _g173 = len17;
HXDLIN( 217)										while((_g172 < _g173)){
HXDLIN( 217)											_g172 = (_g172 + 1);
HXDLIN( 217)											int i76 = (_g172 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int l8 = b70->data->head;
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int prev8 = null();
HXDLIN( 217)												{
HXDLIN( 217)													int _g174 = 0;
HXDLIN( 217)													int _g175 = i76;
HXDLIN( 217)													while((_g174 < _g175)){
HXDLIN( 217)														_g174 = (_g174 + 1);
HXDLIN( 217)														int i77 = (_g174 - 1);
HXLINE( 345)														prev8 = l8;
HXLINE( 346)														l8 = l8->next;
            													}
            												}
HXLINE( 217)												if (::hx::IsNull( prev8 )) {
HXDLIN( 217)													b70->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN( 217)													l8 = null();
            												}
            												else {
HXDLIN( 217)													prev8->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN( 217)													l8 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage25 = b70;
            						}
            						break;
            					}
HXDLIN( 217)					this254->image = undoImage25;
HXDLIN( 217)					this254->width = width8;
HXDLIN( 217)					this254->height = height8;
HXDLIN( 217)					this254->imageType = ( (int)(imageType8) );
HXDLIN( 217)					undoImage24 = this254;
HXDLIN( 217)					{
HXDLIN( 217)						int rectLeft8 = xIter38->start;
HXDLIN( 217)						int rectTop8 = yIter38->start;
HXDLIN( 217)						int rectRight8 = xIter38->max;
HXDLIN( 217)						bool forceClear8 = false;
HXDLIN( 217)						{
HXDLIN( 217)							int _g176 = rectTop8;
HXDLIN( 217)							int _g177 = yIter38->max;
HXDLIN( 217)							while((_g176 < _g177)){
HXDLIN( 217)								_g176 = (_g176 + 1);
HXDLIN( 217)								int dy11 = (_g176 - 1);
HXDLIN( 217)								{
HXDLIN( 217)									int _g178 = rectLeft8;
HXDLIN( 217)									int _g179 = rectRight8;
HXDLIN( 217)									while((_g178 < _g179)){
HXDLIN( 217)										_g178 = (_g178 + 1);
HXDLIN( 217)										int dx11 = (_g178 - 1);
HXDLIN( 217)										::Dynamic this256 = this1->image;
HXDLIN( 217)										int index34;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											index34 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx11) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											index34 = ::Std_obj::_hx_int(( (Float)(((dy11 * this1->width) + dx11)) ));
            										}
HXDLIN( 217)										int c38 = ::iterMagic::Iimg_obj::get(this256,index34);
HXDLIN( 217)										int col8;
HXDLIN( 217)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)											col8 = ((((((c38 >> 24) & 255) << 24) | ((c38 & 255) << 16)) | (((c38 >> 8) & 255) << 8)) | ((c38 >> 16) & 255));
            										}
            										else {
HXDLIN( 217)											col8 = c38;
            										}
HXDLIN( 217)										bool hitQuad65;
HXDLIN( 217)										if (this1->useMask) {
HXDLIN( 217)											hitQuad65 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 217)											hitQuad65 = false;
            										}
HXDLIN( 217)										if (hitQuad65) {
HXDLIN( 217)											 ::pi_xy::ImageStruct this257 = this1->mask;
HXDLIN( 217)											::Dynamic this258 = this257->image;
HXDLIN( 217)											int index35;
HXDLIN( 217)											if (this257->useVirtualPos) {
HXDLIN( 217)												index35 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - this257->virtualY) * ( (Float)(this257->width) )) + dx11) - this257->virtualX));
            											}
            											else {
HXDLIN( 217)												index35 = ::Std_obj::_hx_int(( (Float)(((dy11 * this257->width) + dx11)) ));
            											}
HXDLIN( 217)											int c39 = ::iterMagic::Iimg_obj::get(this258,index35);
HXDLIN( 217)											int v19;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												v19 = ((((((c39 >> 24) & 255) << 24) | ((c39 & 255) << 16)) | (((c39 >> 8) & 255) << 8)) | ((c39 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												v19 = c39;
            											}
HXDLIN( 217)											int maskPixel8 = v19;
HXDLIN( 217)											int this259 = col8;
HXDLIN( 217)											if ((maskPixel8 == 0)) {
HXDLIN( 217)												col8 = this259;
            											}
            											else {
HXDLIN( 217)												Float m08;
HXDLIN( 217)												int this260 = ((maskPixel8 >> 24) & 255);
HXDLIN( 217)												if ((this260 == 0)) {
HXDLIN( 217)													m08 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m08 = (( (Float)(this260) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m18;
HXDLIN( 217)												int this261 = ((maskPixel8 >> 16) & 255);
HXDLIN( 217)												if ((this261 == 0)) {
HXDLIN( 217)													m18 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m18 = (( (Float)(this261) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m28;
HXDLIN( 217)												int this262 = ((maskPixel8 >> 8) & 255);
HXDLIN( 217)												if ((this262 == 0)) {
HXDLIN( 217)													m28 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m28 = (( (Float)(this262) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m38;
HXDLIN( 217)												int this263 = (maskPixel8 & 255);
HXDLIN( 217)												if ((this263 == 0)) {
HXDLIN( 217)													m38 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m38 = (( (Float)(this263) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												int ch08 = ::Std_obj::_hx_int(((((Float)1.) - m08) * ( (Float)(((this259 >> 24) & 255)) )));
HXDLIN( 217)												int ch18 = ::Std_obj::_hx_int(((((Float)1.) - m18) * ( (Float)(((this259 >> 16) & 255)) )));
HXDLIN( 217)												int ch28 = ::Std_obj::_hx_int(((((Float)1.) - m28) * ( (Float)(((this259 >> 8) & 255)) )));
HXDLIN( 217)												int ch38 = ::Std_obj::_hx_int(((((Float)1.) - m38) * ( (Float)((this259 & 255)) )));
HXDLIN( 217)												col8 = ((((::Math_obj::round((( (Float)(ch08) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch18) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch28) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch38) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 217)										if ((col8 != 0)) {
HXDLIN( 217)											int x27 = (dx11 - rectLeft8);
HXDLIN( 217)											int y27 = (dy11 - rectTop8);
HXDLIN( 217)											int c40 = col8;
HXDLIN( 217)											bool hitQuad66;
HXDLIN( 217)											if ((((c40 >> 24) & 255) < 254)) {
HXDLIN( 217)												hitQuad66 = undoImage24->transparent;
            											}
            											else {
HXDLIN( 217)												hitQuad66 = false;
            											}
HXDLIN( 217)											if (hitQuad66) {
HXDLIN( 217)												int location16;
HXDLIN( 217)												if (undoImage24->useVirtualPos) {
HXDLIN( 217)													location16 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x27) - undoImage24->virtualX));
            												}
            												else {
HXDLIN( 217)													location16 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage24->width) + x27)) ));
            												}
HXDLIN( 217)												int this264 = ::iterMagic::Iimg_obj::get(undoImage24->image,location16);
HXDLIN( 217)												int this265;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													this265 = ((((((this264 >> 24) & 255) << 24) | ((this264 & 255) << 16)) | (((this264 >> 8) & 255) << 8)) | ((this264 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													this265 = this264;
            												}
HXDLIN( 217)												Float a121;
HXDLIN( 217)												int this266 = ((this265 >> 24) & 255);
HXDLIN( 217)												if ((this266 == 0)) {
HXDLIN( 217)													a121 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a121 = (( (Float)(this266) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r118;
HXDLIN( 217)												int this267 = ((this265 >> 16) & 255);
HXDLIN( 217)												if ((this267 == 0)) {
HXDLIN( 217)													r118 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r118 = (( (Float)(this267) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g118;
HXDLIN( 217)												int this268 = ((this265 >> 8) & 255);
HXDLIN( 217)												if ((this268 == 0)) {
HXDLIN( 217)													g118 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g118 = (( (Float)(this268) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b122;
HXDLIN( 217)												int this269 = (this265 & 255);
HXDLIN( 217)												if ((this269 == 0)) {
HXDLIN( 217)													b122 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b122 = (( (Float)(this269) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a219;
HXDLIN( 217)												int this270 = ((col8 >> 24) & 255);
HXDLIN( 217)												if ((this270 == 0)) {
HXDLIN( 217)													a219 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a219 = (( (Float)(this270) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r216;
HXDLIN( 217)												int this271 = ((col8 >> 16) & 255);
HXDLIN( 217)												if ((this271 == 0)) {
HXDLIN( 217)													r216 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r216 = (( (Float)(this271) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g216;
HXDLIN( 217)												int this272 = ((col8 >> 8) & 255);
HXDLIN( 217)												if ((this272 == 0)) {
HXDLIN( 217)													g216 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g216 = (( (Float)(this272) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b220;
HXDLIN( 217)												int this273 = (col8 & 255);
HXDLIN( 217)												if ((this273 == 0)) {
HXDLIN( 217)													b220 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b220 = (( (Float)(this273) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a318 = (a121 * (( (Float)(1) ) - a219));
HXDLIN( 217)												int r40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r118 * a318) + (r216 * a219))));
HXDLIN( 217)												int g40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g118 * a318) + (g216 * a219))));
HXDLIN( 217)												int b71 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b122 * a318) + (b220 * a219))));
HXDLIN( 217)												int a64 = ::Std_obj::_hx_int((( (Float)(255) ) * (a318 + a219)));
HXDLIN( 217)												int blended16 = ((((a64 << 24) | (r40 << 16)) | (g40 << 8)) | b71);
HXDLIN( 217)												{
HXDLIN( 217)													int hitQuad67;
HXDLIN( 217)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)														hitQuad67 = ((((((blended16 >> 24) & 255) << 24) | ((blended16 & 255) << 16)) | (((blended16 >> 8) & 255) << 8)) | ((blended16 >> 16) & 255));
            													}
            													else {
HXDLIN( 217)														hitQuad67 = blended16;
            													}
HXDLIN( 217)													::iterMagic::Iimg_obj::set(undoImage24->image,location16,hitQuad67);
            												}
            											}
            											else {
HXDLIN( 217)												::Dynamic this274 = undoImage24->image;
HXDLIN( 217)												int index36;
HXDLIN( 217)												if (undoImage24->useVirtualPos) {
HXDLIN( 217)													index36 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x27) - undoImage24->virtualX));
            												}
            												else {
HXDLIN( 217)													index36 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage24->width) + x27)) ));
            												}
HXDLIN( 217)												int hitQuad68;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad68 = ((((((c40 >> 24) & 255) << 24) | ((c40 & 255) << 16)) | (((c40 >> 8) & 255) << 8)) | ((c40 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad68 = c40;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this274,index36,hitQuad68);
            											}
            										}
            										else {
HXDLIN( 217)											if (forceClear8) {
HXDLIN( 217)												::Dynamic this275 = undoImage24->image;
HXDLIN( 217)												int x28 = (dx11 - rectLeft8);
HXDLIN( 217)												int y28 = (dy11 - rectTop8);
HXDLIN( 217)												int index37;
HXDLIN( 217)												if (undoImage24->useVirtualPos) {
HXDLIN( 217)													index37 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x28) - undoImage24->virtualX));
            												}
            												else {
HXDLIN( 217)													index37 = ::Std_obj::_hx_int(( (Float)(((y28 * undoImage24->width) + x28)) ));
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this275,index37,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 217)				bool found8 = false;
HXDLIN( 217)				Float min60 = ( (Float)(0) );
HXDLIN( 217)				Float max = ( (Float)(0) );
HXDLIN( 217)				int a65 = 0;
HXDLIN( 217)				int r41 = 0;
HXDLIN( 217)				int g41 = 0;
HXDLIN( 217)				int b72 = 0;
HXDLIN( 217)				{
HXDLIN( 217)					int _g_min16 = xIter38->start;
HXDLIN( 217)					int _g_max16 = xIter38->max;
HXDLIN( 217)					while((_g_min16 < _g_max16)){
HXDLIN( 217)						_g_min16 = (_g_min16 + 1);
HXDLIN( 217)						int px7 = (_g_min16 - 1);
HXDLIN( 217)						Float pcx6 = (( (Float)(px7) ) - dx10);
HXLINE( 695)						found8 = false;
HXLINE( 217)						{
HXDLIN( 217)							int _g_min17 = yIter38->start;
HXDLIN( 217)							int _g_max17 = yIter38->max;
HXDLIN( 217)							while((_g_min17 < _g_max17)){
HXDLIN( 217)								_g_min17 = (_g_min17 + 1);
HXDLIN( 217)								int py7 = (_g_min17 - 1);
HXDLIN( 217)								Float pcy6 = (( (Float)(py7) ) - dy10);
HXDLIN( 217)								Float dot316 = ((pcx6 * bcx6) + (pcy6 * bcy6));
HXDLIN( 217)								Float dot326 = ((pcx6 * acx6) + (pcy6 * acy6));
HXDLIN( 217)								Float ratioA6 = (((dot226 * dot316) - (dot126 * dot326)) * denom16);
HXDLIN( 217)								Float ratioB6 = (((dot116 * dot326) - (dot126 * dot316)) * denom16);
HXDLIN( 217)								Float ratioC6 = ((((Float)1.0) - ratioB6) - ratioA6);
HXDLIN( 217)								bool hitQuad69;
HXDLIN( 217)								bool hitQuad70;
HXDLIN( 217)								if ((ratioA6 >= 0)) {
HXDLIN( 217)									hitQuad70 = (ratioB6 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad70 = false;
            								}
HXDLIN( 217)								if (hitQuad70) {
HXDLIN( 217)									hitQuad69 = (ratioC6 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad69 = false;
            								}
HXDLIN( 217)								if (hitQuad69) {
HXLINE( 709)									min60 = ratioA6;
HXLINE( 217)									int i78 = ::Std_obj::_hx_int(((( (Float)(aA6) ) * soft) * min60));
HXDLIN( 217)									if ((i78 > 255)) {
HXLINE(  24)										i78 = 255;
            									}
HXLINE( 217)									if ((i78 < 0)) {
HXLINE(  25)										i78 = 0;
            									}
HXLINE( 217)									a65 = i78;
HXDLIN( 217)									int i79 = ::Std_obj::_hx_int(( (Float)(rA6) ));
HXDLIN( 217)									if ((i79 > 255)) {
HXLINE(  24)										i79 = 255;
            									}
HXLINE( 217)									if ((i79 < 0)) {
HXLINE(  25)										i79 = 0;
            									}
HXLINE( 747)									r41 = i79;
HXLINE( 217)									int i80 = ::Std_obj::_hx_int(( (Float)(gA6) ));
HXDLIN( 217)									if ((i80 > 255)) {
HXLINE(  24)										i80 = 255;
            									}
HXLINE( 217)									if ((i80 < 0)) {
HXLINE(  25)										i80 = 0;
            									}
HXLINE( 748)									g41 = i80;
HXLINE( 217)									int i81 = ::Std_obj::_hx_int(( (Float)(bA6) ));
HXDLIN( 217)									if ((i81 > 255)) {
HXLINE(  24)										i81 = 255;
            									}
HXLINE( 217)									if ((i81 < 0)) {
HXLINE(  25)										i81 = 0;
            									}
HXLINE( 749)									b72 = i81;
HXLINE( 217)									{
HXDLIN( 217)										int location17;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											location17 = ::Std_obj::_hx_int(((((( (Float)(py7) ) - this1->virtualY) * ( (Float)(this1->width) )) + px7) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											location17 = ::Std_obj::_hx_int(( (Float)(((py7 * this1->width) + px7)) ));
            										}
HXDLIN( 217)										bool hitQuad71;
HXDLIN( 217)										if (this1->transparent) {
HXDLIN( 217)											hitQuad71 = (a65 < 254);
            										}
            										else {
HXDLIN( 217)											hitQuad71 = false;
            										}
HXDLIN( 217)										if (hitQuad71) {
HXDLIN( 217)											int this276 = ::iterMagic::Iimg_obj::get(this1->image,location17);
HXDLIN( 217)											int old6;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												old6 = ((((((this276 >> 24) & 255) << 24) | ((this276 & 255) << 16)) | (((this276 >> 8) & 255) << 8)) | ((this276 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												old6 = this276;
            											}
HXDLIN( 217)											int rhs6 = ((((a65 << 24) | (r41 << 16)) | (g41 << 8)) | b72);
HXDLIN( 217)											Float a122;
HXDLIN( 217)											int this277 = ((old6 >> 24) & 255);
HXDLIN( 217)											if ((this277 == 0)) {
HXDLIN( 217)												a122 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a122 = (( (Float)(this277) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r119;
HXDLIN( 217)											int this278 = ((old6 >> 16) & 255);
HXDLIN( 217)											if ((this278 == 0)) {
HXDLIN( 217)												r119 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r119 = (( (Float)(this278) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g119;
HXDLIN( 217)											int this279 = ((old6 >> 8) & 255);
HXDLIN( 217)											if ((this279 == 0)) {
HXDLIN( 217)												g119 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g119 = (( (Float)(this279) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b123;
HXDLIN( 217)											int this280 = (old6 & 255);
HXDLIN( 217)											if ((this280 == 0)) {
HXDLIN( 217)												b123 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b123 = (( (Float)(this280) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a220;
HXDLIN( 217)											int this281 = ((rhs6 >> 24) & 255);
HXDLIN( 217)											if ((this281 == 0)) {
HXDLIN( 217)												a220 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a220 = (( (Float)(this281) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r217;
HXDLIN( 217)											int this282 = ((rhs6 >> 16) & 255);
HXDLIN( 217)											if ((this282 == 0)) {
HXDLIN( 217)												r217 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r217 = (( (Float)(this282) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g217;
HXDLIN( 217)											int this283 = ((rhs6 >> 8) & 255);
HXDLIN( 217)											if ((this283 == 0)) {
HXDLIN( 217)												g217 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g217 = (( (Float)(this283) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b221;
HXDLIN( 217)											int this284 = (rhs6 & 255);
HXDLIN( 217)											if ((this284 == 0)) {
HXDLIN( 217)												b221 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b221 = (( (Float)(this284) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a319 = (a122 * (( (Float)(1) ) - a220));
HXDLIN( 217)											int r42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r119 * a319) + (r217 * a220))));
HXDLIN( 217)											int g42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g119 * a319) + (g217 * a220))));
HXDLIN( 217)											int b73 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b123 * a319) + (b221 * a220))));
HXDLIN( 217)											int a66 = ::Std_obj::_hx_int((( (Float)(255) ) * (a319 + a220)));
HXDLIN( 217)											int blended17 = ((((a66 << 24) | (r42 << 16)) | (g42 << 8)) | b73);
HXDLIN( 217)											{
HXDLIN( 217)												int hitQuad72;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad72 = ((((((blended17 >> 24) & 255) << 24) | ((blended17 & 255) << 16)) | (((blended17 >> 8) & 255) << 8)) | ((blended17 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad72 = blended17;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this1->image,location17,hitQuad72);
            											}
            										}
            										else {
HXDLIN( 217)											int value6;
HXDLIN( 217)											if (this1->isLittle) {
HXDLIN( 217)												value6 = ((((a65 << 24) | (b72 << 16)) | (g41 << 8)) | r41);
            											}
            											else {
HXDLIN( 217)												value6 = ((((a65 << 24) | (r41 << 16)) | (g41 << 8)) | b72);
            											}
HXDLIN( 217)											::iterMagic::Iimg_obj::set(this1->image,location17,value6);
            										}
            									}
HXLINE( 751)									found8 = true;
            								}
            								else {
HXDLIN( 217)									if (found8) {
HXDLIN( 217)										goto _hx_goto_359;
            									}
            								}
            							}
            							_hx_goto_359:;
            						}
            					}
            				}
            			}
HXDLIN( 217)			{
HXDLIN( 217)				bool hasUndo9 = true;
HXDLIN( 217)				int aA7 = ((color >> 24) & 255);
HXDLIN( 217)				int rA7 = ((color >> 16) & 255);
HXDLIN( 217)				int gA7 = ((color >> 8) & 255);
HXDLIN( 217)				int bA7 = (color & 255);
HXDLIN( 217)				Float bcx7 = (cx10 - dx10);
HXDLIN( 217)				Float bcy7 = (cy10 - dy10);
HXDLIN( 217)				Float acx7 = (bx10 - dx10);
HXDLIN( 217)				Float acy7 = (by10 - dy10);
HXDLIN( 217)				Float dot117 = ((bcx7 * bcx7) + (bcy7 * bcy7));
HXDLIN( 217)				Float dot127 = ((bcx7 * acx7) + (bcy7 * acy7));
HXDLIN( 217)				Float dot227 = ((acx7 * acx7) + (acy7 * acy7));
HXDLIN( 217)				Float denom17 = (( (Float)(1) ) / ((dot117 * dot227) - (dot127 * dot127)));
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart xIter39;
HXDLIN( 217)				if ((bx10 > cx10)) {
HXDLIN( 217)					if ((bx10 > dx10)) {
HXDLIN( 217)						int min61;
HXDLIN( 217)						if ((cx10 > dx10)) {
HXDLIN( 217)							min61 = ::Math_obj::floor(dx10);
            						}
            						else {
HXDLIN( 217)							min61 = ::Math_obj::floor(cx10);
            						}
HXDLIN( 217)						int ii_min120 = min61;
HXDLIN( 217)						int ii_max120 = ::Math_obj::ceil(bx10);
HXDLIN( 217)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min120,ii_max120);
            					}
            					else {
HXDLIN( 217)						int ii_min121 = ::Math_obj::floor(cx10);
HXDLIN( 217)						int ii_max121 = ::Math_obj::ceil(dx10);
HXDLIN( 217)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min121,ii_max121);
            					}
            				}
            				else {
HXDLIN( 217)					if ((cx10 > dx10)) {
HXDLIN( 217)						int min62;
HXDLIN( 217)						if ((bx10 > dx10)) {
HXDLIN( 217)							min62 = ::Math_obj::floor(dx10);
            						}
            						else {
HXDLIN( 217)							min62 = ::Math_obj::ceil(bx10);
            						}
HXDLIN( 217)						int ii_min122 = min62;
HXDLIN( 217)						int ii_max122 = ::Math_obj::ceil(cx10);
HXDLIN( 217)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min122,ii_max122);
            					}
            					else {
HXDLIN( 217)						int ii_min123 = ::Math_obj::floor(bx10);
HXDLIN( 217)						int ii_max123 = ::Math_obj::ceil(dx10);
HXDLIN( 217)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min123,ii_max123);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::iter::IntIterStart yIter39;
HXDLIN( 217)				if ((by10 > cy10)) {
HXDLIN( 217)					if ((by10 > dy10)) {
HXDLIN( 217)						int min63;
HXDLIN( 217)						if ((cy10 > dy10)) {
HXDLIN( 217)							min63 = ::Math_obj::floor(dy10);
            						}
            						else {
HXDLIN( 217)							min63 = ::Math_obj::floor(cy10);
            						}
HXDLIN( 217)						int ii_min124 = min63;
HXDLIN( 217)						int ii_max124 = ::Math_obj::ceil(by10);
HXDLIN( 217)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min124,ii_max124);
            					}
            					else {
HXDLIN( 217)						int ii_min125 = ::Math_obj::floor(cy10);
HXDLIN( 217)						int ii_max125 = ::Math_obj::ceil(dy10);
HXDLIN( 217)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min125,ii_max125);
            					}
            				}
            				else {
HXDLIN( 217)					if ((cy10 > dy10)) {
HXDLIN( 217)						int min64;
HXDLIN( 217)						if ((by10 > dy10)) {
HXDLIN( 217)							min64 = ::Math_obj::floor(dy10);
            						}
            						else {
HXDLIN( 217)							min64 = ::Math_obj::ceil(by10);
            						}
HXDLIN( 217)						int ii_min126 = min64;
HXDLIN( 217)						int ii_max126 = ::Math_obj::ceil(cy10);
HXDLIN( 217)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min126,ii_max126);
            					}
            					else {
HXDLIN( 217)						int ii_min127 = ::Math_obj::floor(by10);
HXDLIN( 217)						int ii_max127 = ::Math_obj::ceil(dy10);
HXDLIN( 217)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min127,ii_max127);
            					}
            				}
HXDLIN( 217)				 ::pi_xy::ImageStruct undoImage27 = null();
HXDLIN( 217)				if (hasUndo9) {
HXDLIN( 217)					int width9 = ((xIter39->max - xIter39->start) + 1);
HXDLIN( 217)					int height9 = ((yIter39->max - yIter39->start) + 1);
HXDLIN( 217)					 ::Dynamic imageType9 = null();
HXDLIN( 217)					 ::pi_xy::ImageStruct this285 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 217)					if (::hx::IsNull( imageType9 )) {
HXLINE(  54)						imageType9 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 217)					::Dynamic undoImage28;
HXDLIN( 217)					switch((int)(( (int)(imageType9) ))){
            						case (int)0: {
HXDLIN( 217)							 ::iterMagic::BytesImg byt9 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::BytesImg b74 = byt9;
HXDLIN( 217)							{
HXDLIN( 217)								b74->width = width9;
HXDLIN( 217)								b74->height = height9;
HXDLIN( 217)								b74->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 217)								b74->data = ::haxe::io::Bytes_obj::alloc((b74->length * 4));
HXDLIN( 217)								{
HXDLIN( 217)									int len18 = b74->length;
HXDLIN( 217)									int w9 = 0;
HXDLIN( 217)									{
HXDLIN( 217)										int _g180 = 0;
HXDLIN( 217)										int _g181 = b74->height;
HXDLIN( 217)										while((_g180 < _g181)){
HXDLIN( 217)											_g180 = (_g180 + 1);
HXDLIN( 217)											int y29 = (_g180 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												int _g182 = 0;
HXDLIN( 217)												int _g183 = b74->width;
HXDLIN( 217)												while((_g182 < _g183)){
HXDLIN( 217)													_g182 = (_g182 + 1);
HXDLIN( 217)													int x29 = (_g182 - 1);
HXDLIN( 217)													{
HXDLIN( 217)														w9 = (w9 + 1);
HXDLIN( 217)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w9 = (w9 + 1);
HXDLIN( 217)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w9 = (w9 + 1);
HXDLIN( 217)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 217)													{
HXDLIN( 217)														w9 = (w9 + 1);
HXDLIN( 217)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage28 = b74;
            						}
            						break;
            						case (int)1: {
HXDLIN( 217)							 ::iterMagic::ArrIntImg arrI9 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::ArrIntImg a67 = arrI9;
HXDLIN( 217)							{
HXDLIN( 217)								a67->width = width9;
HXDLIN( 217)								a67->height = height9;
HXDLIN( 217)								a67->data = ::Array_obj< int >::__new(0);
HXDLIN( 217)								a67->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 217)								{
HXDLIN( 217)									int _g184 = 0;
HXDLIN( 217)									int _g185 = a67->length;
HXDLIN( 217)									while((_g184 < _g185)){
HXDLIN( 217)										_g184 = (_g184 + 1);
HXDLIN( 217)										int i82 = (_g184 - 1);
HXDLIN( 217)										a67->data[i82] = 0;
            									}
            								}
            							}
HXDLIN( 217)							undoImage28 = a67;
            						}
            						break;
            						case (int)2: {
HXDLIN( 217)							 ::iterMagic::U32ArrImg u32a9 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::U32ArrImg b75 = u32a9;
HXDLIN( 217)							{
HXDLIN( 217)								b75->width = width9;
HXDLIN( 217)								b75->height = height9;
HXDLIN( 217)								b75->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 217)								int size9 = (b75->length * 4);
HXDLIN( 217)								b75->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size9),0,size9);
HXDLIN( 217)								{
HXDLIN( 217)									int _g186 = 0;
HXDLIN( 217)									int _g187 = b75->length;
HXDLIN( 217)									while((_g186 < _g187)){
HXDLIN( 217)										_g186 = (_g186 + 1);
HXDLIN( 217)										int i83 = (_g186 - 1);
HXDLIN( 217)										{
HXDLIN( 217)											 ::haxe::io::ArrayBufferViewImpl this286 = b75->data;
HXDLIN( 217)											bool undoImage29;
HXDLIN( 217)											if ((i83 >= 0)) {
HXDLIN( 217)												undoImage29 = (i83 < (this286->byteLength >> 2));
            											}
            											else {
HXDLIN( 217)												undoImage29 = false;
            											}
HXDLIN( 217)											if (undoImage29) {
HXDLIN( 217)												 ::haxe::io::Bytes _this9 = this286->bytes;
HXDLIN( 217)												int pos9 = ((i83 << 2) + this286->byteOffset);
HXDLIN( 217)												_this9->b[pos9] = ( (unsigned char)(0) );
HXDLIN( 217)												_this9->b[(pos9 + 1)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this9->b[(pos9 + 2)] = ( (unsigned char)(0) );
HXDLIN( 217)												_this9->b[(pos9 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage28 = b75;
            						}
            						break;
            						case (int)3: {
HXDLIN( 217)							 ::iterMagic::VecIntImg vec9 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::VecIntImg v20 = vec9;
HXDLIN( 217)							{
HXDLIN( 217)								v20->width = width9;
HXDLIN( 217)								v20->height = height9;
HXDLIN( 217)								v20->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 217)								v20->data = ::Array_obj< int >::__new(v20->length);
HXDLIN( 217)								{
HXDLIN( 217)									int _g188 = 0;
HXDLIN( 217)									int _g189 = v20->length;
HXDLIN( 217)									while((_g188 < _g189)){
HXDLIN( 217)										_g188 = (_g188 + 1);
HXDLIN( 217)										int i84 = (_g188 - 1);
HXDLIN( 217)										v20->data->__unsafe_set(i84,0);
            									}
            								}
            							}
HXDLIN( 217)							undoImage28 = v20;
            						}
            						break;
            						case (int)4: {
HXDLIN( 217)							 ::iterMagic::StackIntImg sInt9 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)							 ::iterMagic::StackIntImg b76 = sInt9;
HXDLIN( 217)							{
HXDLIN( 217)								b76->width = width9;
HXDLIN( 217)								b76->height = height9;
HXDLIN( 217)								b76->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 217)								b76->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 217)								{
HXDLIN( 217)									int len19 = b76->length;
HXDLIN( 217)									 ::haxe::ds::GenericStack_Int d9 = b76->data;
HXDLIN( 217)									if (::hx::IsNull( d9->head )) {
HXDLIN( 217)										int _g190 = 0;
HXDLIN( 217)										int _g191 = len19;
HXDLIN( 217)										while((_g190 < _g191)){
HXDLIN( 217)											_g190 = (_g190 + 1);
HXDLIN( 217)											int i85 = (_g190 - 1);
HXDLIN( 217)											d9->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d9->head);
            										}
            									}
            									else {
HXDLIN( 217)										int _g192 = 0;
HXDLIN( 217)										int _g193 = len19;
HXDLIN( 217)										while((_g192 < _g193)){
HXDLIN( 217)											_g192 = (_g192 + 1);
HXDLIN( 217)											int i86 = (_g192 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int l9 = b76->data->head;
HXDLIN( 217)												 ::haxe::ds::GenericCell_Int prev9 = null();
HXDLIN( 217)												{
HXDLIN( 217)													int _g194 = 0;
HXDLIN( 217)													int _g195 = i86;
HXDLIN( 217)													while((_g194 < _g195)){
HXDLIN( 217)														_g194 = (_g194 + 1);
HXDLIN( 217)														int i87 = (_g194 - 1);
HXLINE( 345)														prev9 = l9;
HXLINE( 346)														l9 = l9->next;
            													}
            												}
HXLINE( 217)												if (::hx::IsNull( prev9 )) {
HXDLIN( 217)													b76->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN( 217)													l9 = null();
            												}
            												else {
HXDLIN( 217)													prev9->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN( 217)													l9 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 217)							undoImage28 = b76;
            						}
            						break;
            					}
HXDLIN( 217)					this285->image = undoImage28;
HXDLIN( 217)					this285->width = width9;
HXDLIN( 217)					this285->height = height9;
HXDLIN( 217)					this285->imageType = ( (int)(imageType9) );
HXDLIN( 217)					undoImage27 = this285;
HXDLIN( 217)					{
HXDLIN( 217)						int rectLeft9 = xIter39->start;
HXDLIN( 217)						int rectTop9 = yIter39->start;
HXDLIN( 217)						int rectRight9 = xIter39->max;
HXDLIN( 217)						bool forceClear9 = false;
HXDLIN( 217)						{
HXDLIN( 217)							int _g196 = rectTop9;
HXDLIN( 217)							int _g197 = yIter39->max;
HXDLIN( 217)							while((_g196 < _g197)){
HXDLIN( 217)								_g196 = (_g196 + 1);
HXDLIN( 217)								int dy12 = (_g196 - 1);
HXDLIN( 217)								{
HXDLIN( 217)									int _g198 = rectLeft9;
HXDLIN( 217)									int _g199 = rectRight9;
HXDLIN( 217)									while((_g198 < _g199)){
HXDLIN( 217)										_g198 = (_g198 + 1);
HXDLIN( 217)										int dx12 = (_g198 - 1);
HXDLIN( 217)										::Dynamic this287 = this1->image;
HXDLIN( 217)										int index38;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											index38 = ::Std_obj::_hx_int(((((( (Float)(dy12) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx12) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											index38 = ::Std_obj::_hx_int(( (Float)(((dy12 * this1->width) + dx12)) ));
            										}
HXDLIN( 217)										int c41 = ::iterMagic::Iimg_obj::get(this287,index38);
HXDLIN( 217)										int col9;
HXDLIN( 217)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)											col9 = ((((((c41 >> 24) & 255) << 24) | ((c41 & 255) << 16)) | (((c41 >> 8) & 255) << 8)) | ((c41 >> 16) & 255));
            										}
            										else {
HXDLIN( 217)											col9 = c41;
            										}
HXDLIN( 217)										bool hitQuad73;
HXDLIN( 217)										if (this1->useMask) {
HXDLIN( 217)											hitQuad73 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 217)											hitQuad73 = false;
            										}
HXDLIN( 217)										if (hitQuad73) {
HXDLIN( 217)											 ::pi_xy::ImageStruct this288 = this1->mask;
HXDLIN( 217)											::Dynamic this289 = this288->image;
HXDLIN( 217)											int index39;
HXDLIN( 217)											if (this288->useVirtualPos) {
HXDLIN( 217)												index39 = ::Std_obj::_hx_int(((((( (Float)(dy12) ) - this288->virtualY) * ( (Float)(this288->width) )) + dx12) - this288->virtualX));
            											}
            											else {
HXDLIN( 217)												index39 = ::Std_obj::_hx_int(( (Float)(((dy12 * this288->width) + dx12)) ));
            											}
HXDLIN( 217)											int c42 = ::iterMagic::Iimg_obj::get(this289,index39);
HXDLIN( 217)											int v21;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												v21 = ((((((c42 >> 24) & 255) << 24) | ((c42 & 255) << 16)) | (((c42 >> 8) & 255) << 8)) | ((c42 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												v21 = c42;
            											}
HXDLIN( 217)											int maskPixel9 = v21;
HXDLIN( 217)											int this290 = col9;
HXDLIN( 217)											if ((maskPixel9 == 0)) {
HXDLIN( 217)												col9 = this290;
            											}
            											else {
HXDLIN( 217)												Float m09;
HXDLIN( 217)												int this291 = ((maskPixel9 >> 24) & 255);
HXDLIN( 217)												if ((this291 == 0)) {
HXDLIN( 217)													m09 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m09 = (( (Float)(this291) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m19;
HXDLIN( 217)												int this292 = ((maskPixel9 >> 16) & 255);
HXDLIN( 217)												if ((this292 == 0)) {
HXDLIN( 217)													m19 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m19 = (( (Float)(this292) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m29;
HXDLIN( 217)												int this293 = ((maskPixel9 >> 8) & 255);
HXDLIN( 217)												if ((this293 == 0)) {
HXDLIN( 217)													m29 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m29 = (( (Float)(this293) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float m39;
HXDLIN( 217)												int this294 = (maskPixel9 & 255);
HXDLIN( 217)												if ((this294 == 0)) {
HXDLIN( 217)													m39 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													m39 = (( (Float)(this294) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												int ch09 = ::Std_obj::_hx_int(((((Float)1.) - m09) * ( (Float)(((this290 >> 24) & 255)) )));
HXDLIN( 217)												int ch19 = ::Std_obj::_hx_int(((((Float)1.) - m19) * ( (Float)(((this290 >> 16) & 255)) )));
HXDLIN( 217)												int ch29 = ::Std_obj::_hx_int(((((Float)1.) - m29) * ( (Float)(((this290 >> 8) & 255)) )));
HXDLIN( 217)												int ch39 = ::Std_obj::_hx_int(((((Float)1.) - m39) * ( (Float)((this290 & 255)) )));
HXDLIN( 217)												col9 = ((((::Math_obj::round((( (Float)(ch09) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch19) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch29) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch39) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 217)										if ((col9 != 0)) {
HXDLIN( 217)											int x30 = (dx12 - rectLeft9);
HXDLIN( 217)											int y30 = (dy12 - rectTop9);
HXDLIN( 217)											int c43 = col9;
HXDLIN( 217)											bool hitQuad74;
HXDLIN( 217)											if ((((c43 >> 24) & 255) < 254)) {
HXDLIN( 217)												hitQuad74 = undoImage27->transparent;
            											}
            											else {
HXDLIN( 217)												hitQuad74 = false;
            											}
HXDLIN( 217)											if (hitQuad74) {
HXDLIN( 217)												int location18;
HXDLIN( 217)												if (undoImage27->useVirtualPos) {
HXDLIN( 217)													location18 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x30) - undoImage27->virtualX));
            												}
            												else {
HXDLIN( 217)													location18 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage27->width) + x30)) ));
            												}
HXDLIN( 217)												int this295 = ::iterMagic::Iimg_obj::get(undoImage27->image,location18);
HXDLIN( 217)												int this296;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													this296 = ((((((this295 >> 24) & 255) << 24) | ((this295 & 255) << 16)) | (((this295 >> 8) & 255) << 8)) | ((this295 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													this296 = this295;
            												}
HXDLIN( 217)												Float a123;
HXDLIN( 217)												int this297 = ((this296 >> 24) & 255);
HXDLIN( 217)												if ((this297 == 0)) {
HXDLIN( 217)													a123 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a123 = (( (Float)(this297) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r120;
HXDLIN( 217)												int this298 = ((this296 >> 16) & 255);
HXDLIN( 217)												if ((this298 == 0)) {
HXDLIN( 217)													r120 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r120 = (( (Float)(this298) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g120;
HXDLIN( 217)												int this299 = ((this296 >> 8) & 255);
HXDLIN( 217)												if ((this299 == 0)) {
HXDLIN( 217)													g120 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g120 = (( (Float)(this299) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b124;
HXDLIN( 217)												int this300 = (this296 & 255);
HXDLIN( 217)												if ((this300 == 0)) {
HXDLIN( 217)													b124 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b124 = (( (Float)(this300) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a221;
HXDLIN( 217)												int this301 = ((col9 >> 24) & 255);
HXDLIN( 217)												if ((this301 == 0)) {
HXDLIN( 217)													a221 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													a221 = (( (Float)(this301) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float r218;
HXDLIN( 217)												int this302 = ((col9 >> 16) & 255);
HXDLIN( 217)												if ((this302 == 0)) {
HXDLIN( 217)													r218 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													r218 = (( (Float)(this302) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float g218;
HXDLIN( 217)												int this303 = ((col9 >> 8) & 255);
HXDLIN( 217)												if ((this303 == 0)) {
HXDLIN( 217)													g218 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													g218 = (( (Float)(this303) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float b222;
HXDLIN( 217)												int this304 = (col9 & 255);
HXDLIN( 217)												if ((this304 == 0)) {
HXDLIN( 217)													b222 = ((Float)0.);
            												}
            												else {
HXDLIN( 217)													b222 = (( (Float)(this304) ) / ( (Float)(255) ));
            												}
HXDLIN( 217)												Float a320 = (a123 * (( (Float)(1) ) - a221));
HXDLIN( 217)												int r43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r120 * a320) + (r218 * a221))));
HXDLIN( 217)												int g43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g120 * a320) + (g218 * a221))));
HXDLIN( 217)												int b77 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b124 * a320) + (b222 * a221))));
HXDLIN( 217)												int a68 = ::Std_obj::_hx_int((( (Float)(255) ) * (a320 + a221)));
HXDLIN( 217)												int blended18 = ((((a68 << 24) | (r43 << 16)) | (g43 << 8)) | b77);
HXDLIN( 217)												{
HXDLIN( 217)													int hitQuad75;
HXDLIN( 217)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)														hitQuad75 = ((((((blended18 >> 24) & 255) << 24) | ((blended18 & 255) << 16)) | (((blended18 >> 8) & 255) << 8)) | ((blended18 >> 16) & 255));
            													}
            													else {
HXDLIN( 217)														hitQuad75 = blended18;
            													}
HXDLIN( 217)													::iterMagic::Iimg_obj::set(undoImage27->image,location18,hitQuad75);
            												}
            											}
            											else {
HXDLIN( 217)												::Dynamic this305 = undoImage27->image;
HXDLIN( 217)												int index40;
HXDLIN( 217)												if (undoImage27->useVirtualPos) {
HXDLIN( 217)													index40 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x30) - undoImage27->virtualX));
            												}
            												else {
HXDLIN( 217)													index40 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage27->width) + x30)) ));
            												}
HXDLIN( 217)												int hitQuad76;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad76 = ((((((c43 >> 24) & 255) << 24) | ((c43 & 255) << 16)) | (((c43 >> 8) & 255) << 8)) | ((c43 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad76 = c43;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this305,index40,hitQuad76);
            											}
            										}
            										else {
HXDLIN( 217)											if (forceClear9) {
HXDLIN( 217)												::Dynamic this306 = undoImage27->image;
HXDLIN( 217)												int x31 = (dx12 - rectLeft9);
HXDLIN( 217)												int y31 = (dy12 - rectTop9);
HXDLIN( 217)												int index41;
HXDLIN( 217)												if (undoImage27->useVirtualPos) {
HXDLIN( 217)													index41 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x31) - undoImage27->virtualX));
            												}
            												else {
HXDLIN( 217)													index41 = ::Std_obj::_hx_int(( (Float)(((y31 * undoImage27->width) + x31)) ));
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this306,index41,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 217)				bool found9 = false;
HXDLIN( 217)				Float min65 = ( (Float)(0) );
HXDLIN( 217)				Float max1 = ( (Float)(0) );
HXDLIN( 217)				int a69 = 0;
HXDLIN( 217)				int r44 = 0;
HXDLIN( 217)				int g44 = 0;
HXDLIN( 217)				int b78 = 0;
HXDLIN( 217)				{
HXDLIN( 217)					int _g_min18 = xIter39->start;
HXDLIN( 217)					int _g_max18 = xIter39->max;
HXDLIN( 217)					while((_g_min18 < _g_max18)){
HXDLIN( 217)						_g_min18 = (_g_min18 + 1);
HXDLIN( 217)						int px8 = (_g_min18 - 1);
HXDLIN( 217)						Float pcx7 = (( (Float)(px8) ) - dx10);
HXLINE( 695)						found9 = false;
HXLINE( 217)						{
HXDLIN( 217)							int _g_min19 = yIter39->start;
HXDLIN( 217)							int _g_max19 = yIter39->max;
HXDLIN( 217)							while((_g_min19 < _g_max19)){
HXDLIN( 217)								_g_min19 = (_g_min19 + 1);
HXDLIN( 217)								int py8 = (_g_min19 - 1);
HXDLIN( 217)								Float pcy7 = (( (Float)(py8) ) - dy10);
HXDLIN( 217)								Float dot317 = ((pcx7 * bcx7) + (pcy7 * bcy7));
HXDLIN( 217)								Float dot327 = ((pcx7 * acx7) + (pcy7 * acy7));
HXDLIN( 217)								Float ratioA7 = (((dot227 * dot317) - (dot127 * dot327)) * denom17);
HXDLIN( 217)								Float ratioB7 = (((dot117 * dot327) - (dot127 * dot317)) * denom17);
HXDLIN( 217)								Float ratioC7 = ((((Float)1.0) - ratioB7) - ratioA7);
HXDLIN( 217)								bool hitQuad77;
HXDLIN( 217)								bool hitQuad78;
HXDLIN( 217)								if ((ratioA7 >= 0)) {
HXDLIN( 217)									hitQuad78 = (ratioB7 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad78 = false;
            								}
HXDLIN( 217)								if (hitQuad78) {
HXDLIN( 217)									hitQuad77 = (ratioC7 >= 0);
            								}
            								else {
HXDLIN( 217)									hitQuad77 = false;
            								}
HXDLIN( 217)								if (hitQuad77) {
HXDLIN( 217)									if ((ratioB7 < ratioC7)) {
HXDLIN( 217)										min65 = ratioB7;
            									}
            									else {
HXDLIN( 217)										min65 = ratioC7;
            									}
HXDLIN( 217)									if ((ratioA7 > ratioB7)) {
HXDLIN( 217)										max1 = ratioA7;
            									}
            									else {
HXDLIN( 217)										max1 = ratioB7;
            									}
HXDLIN( 217)									if (!((max1 > ratioC7))) {
HXDLIN( 217)										max1 = ratioC7;
            									}
HXLINE( 735)									max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE( 217)									if (!((min65 < max1))) {
HXDLIN( 217)										min65 = ((max1 + min65) / ( (Float)(2) ));
            									}
HXDLIN( 217)									int i88 = ::Std_obj::_hx_int(((( (Float)(aA7) ) * soft) * min65));
HXDLIN( 217)									if ((i88 > 255)) {
HXLINE(  24)										i88 = 255;
            									}
HXLINE( 217)									if ((i88 < 0)) {
HXLINE(  25)										i88 = 0;
            									}
HXLINE( 217)									a69 = i88;
HXDLIN( 217)									int i89 = ::Std_obj::_hx_int(( (Float)(rA7) ));
HXDLIN( 217)									if ((i89 > 255)) {
HXLINE(  24)										i89 = 255;
            									}
HXLINE( 217)									if ((i89 < 0)) {
HXLINE(  25)										i89 = 0;
            									}
HXLINE( 747)									r44 = i89;
HXLINE( 217)									int i90 = ::Std_obj::_hx_int(( (Float)(gA7) ));
HXDLIN( 217)									if ((i90 > 255)) {
HXLINE(  24)										i90 = 255;
            									}
HXLINE( 217)									if ((i90 < 0)) {
HXLINE(  25)										i90 = 0;
            									}
HXLINE( 748)									g44 = i90;
HXLINE( 217)									int i91 = ::Std_obj::_hx_int(( (Float)(bA7) ));
HXDLIN( 217)									if ((i91 > 255)) {
HXLINE(  24)										i91 = 255;
            									}
HXLINE( 217)									if ((i91 < 0)) {
HXLINE(  25)										i91 = 0;
            									}
HXLINE( 749)									b78 = i91;
HXLINE( 217)									{
HXDLIN( 217)										int location19;
HXDLIN( 217)										if (this1->useVirtualPos) {
HXDLIN( 217)											location19 = ::Std_obj::_hx_int(((((( (Float)(py8) ) - this1->virtualY) * ( (Float)(this1->width) )) + px8) - this1->virtualX));
            										}
            										else {
HXDLIN( 217)											location19 = ::Std_obj::_hx_int(( (Float)(((py8 * this1->width) + px8)) ));
            										}
HXDLIN( 217)										bool hitQuad79;
HXDLIN( 217)										if (this1->transparent) {
HXDLIN( 217)											hitQuad79 = (a69 < 254);
            										}
            										else {
HXDLIN( 217)											hitQuad79 = false;
            										}
HXDLIN( 217)										if (hitQuad79) {
HXDLIN( 217)											int this307 = ::iterMagic::Iimg_obj::get(this1->image,location19);
HXDLIN( 217)											int old7;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												old7 = ((((((this307 >> 24) & 255) << 24) | ((this307 & 255) << 16)) | (((this307 >> 8) & 255) << 8)) | ((this307 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												old7 = this307;
            											}
HXDLIN( 217)											int rhs7 = ((((a69 << 24) | (r44 << 16)) | (g44 << 8)) | b78);
HXDLIN( 217)											Float a124;
HXDLIN( 217)											int this308 = ((old7 >> 24) & 255);
HXDLIN( 217)											if ((this308 == 0)) {
HXDLIN( 217)												a124 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a124 = (( (Float)(this308) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r121;
HXDLIN( 217)											int this309 = ((old7 >> 16) & 255);
HXDLIN( 217)											if ((this309 == 0)) {
HXDLIN( 217)												r121 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r121 = (( (Float)(this309) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g121;
HXDLIN( 217)											int this310 = ((old7 >> 8) & 255);
HXDLIN( 217)											if ((this310 == 0)) {
HXDLIN( 217)												g121 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g121 = (( (Float)(this310) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b125;
HXDLIN( 217)											int this311 = (old7 & 255);
HXDLIN( 217)											if ((this311 == 0)) {
HXDLIN( 217)												b125 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b125 = (( (Float)(this311) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a222;
HXDLIN( 217)											int this312 = ((rhs7 >> 24) & 255);
HXDLIN( 217)											if ((this312 == 0)) {
HXDLIN( 217)												a222 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												a222 = (( (Float)(this312) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float r219;
HXDLIN( 217)											int this313 = ((rhs7 >> 16) & 255);
HXDLIN( 217)											if ((this313 == 0)) {
HXDLIN( 217)												r219 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												r219 = (( (Float)(this313) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float g219;
HXDLIN( 217)											int this314 = ((rhs7 >> 8) & 255);
HXDLIN( 217)											if ((this314 == 0)) {
HXDLIN( 217)												g219 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												g219 = (( (Float)(this314) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float b223;
HXDLIN( 217)											int this315 = (rhs7 & 255);
HXDLIN( 217)											if ((this315 == 0)) {
HXDLIN( 217)												b223 = ((Float)0.);
            											}
            											else {
HXDLIN( 217)												b223 = (( (Float)(this315) ) / ( (Float)(255) ));
            											}
HXDLIN( 217)											Float a321 = (a124 * (( (Float)(1) ) - a222));
HXDLIN( 217)											int r45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r121 * a321) + (r219 * a222))));
HXDLIN( 217)											int g45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g121 * a321) + (g219 * a222))));
HXDLIN( 217)											int b79 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b125 * a321) + (b223 * a222))));
HXDLIN( 217)											int a70 = ::Std_obj::_hx_int((( (Float)(255) ) * (a321 + a222)));
HXDLIN( 217)											int blended19 = ((((a70 << 24) | (r45 << 16)) | (g45 << 8)) | b79);
HXDLIN( 217)											{
HXDLIN( 217)												int hitQuad80;
HXDLIN( 217)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)													hitQuad80 = ((((((blended19 >> 24) & 255) << 24) | ((blended19 & 255) << 16)) | (((blended19 >> 8) & 255) << 8)) | ((blended19 >> 16) & 255));
            												}
            												else {
HXDLIN( 217)													hitQuad80 = blended19;
            												}
HXDLIN( 217)												::iterMagic::Iimg_obj::set(this1->image,location19,hitQuad80);
            											}
            										}
            										else {
HXDLIN( 217)											int value7;
HXDLIN( 217)											if (this1->isLittle) {
HXDLIN( 217)												value7 = ((((a69 << 24) | (b78 << 16)) | (g44 << 8)) | r44);
            											}
            											else {
HXDLIN( 217)												value7 = ((((a69 << 24) | (r44 << 16)) | (g44 << 8)) | b78);
            											}
HXDLIN( 217)											::iterMagic::Iimg_obj::set(this1->image,location19,value7);
            										}
            									}
HXLINE( 751)									found9 = true;
            								}
            								else {
HXDLIN( 217)									if (found9) {
HXDLIN( 217)										goto _hx_goto_371;
            									}
            								}
            							}
            							_hx_goto_371:;
            						}
            					}
            				}
            			}
HXDLIN( 217)			 ::pi_xy::algo::HitQuad v22 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax8,ay8,bx10,by10,cx10,cy10,dx10,dy10,true);
HXDLIN( 217)			hitQuad = v22;
            		}
HXDLIN( 217)		Float cx11 = h2;
HXDLIN( 217)		Float cy11 = radius2;
HXDLIN( 217)		Float bx11 = h2;
HXDLIN( 217)		Float by11 = -(radius2);
HXDLIN( 217)		Float temp3 = ((Float)0.);
HXLINE(  92)		temp3 = (px + ((bx11 * cos) - (by11 * sin)));
HXLINE(  93)		by11 = (py + ((by11 * cos) + (bx11 * sin)));
HXLINE(  94)		bx11 = temp3;
HXLINE(  95)		temp3 = (px + ((cx11 * cos) - (cy11 * sin)));
HXLINE(  96)		cy11 = (py + ((cy11 * cos) + (cx11 * sin)));
HXLINE(  97)		cx11 = temp3;
HXLINE( 217)		bool hasUndo10 = true;
HXDLIN( 217)		int aA8 = ((color >> 24) & 255);
HXDLIN( 217)		int rA8 = ((color >> 16) & 255);
HXDLIN( 217)		int gA8 = ((color >> 8) & 255);
HXDLIN( 217)		int bA8 = (color & 255);
HXDLIN( 217)		Float bcx8 = (bx11 - cx11);
HXDLIN( 217)		Float bcy8 = (by11 - cy11);
HXDLIN( 217)		Float acx8 = (qx - cx11);
HXDLIN( 217)		Float acy8 = (qy - cy11);
HXDLIN( 217)		Float dot118 = ((bcx8 * bcx8) + (bcy8 * bcy8));
HXDLIN( 217)		Float dot128 = ((bcx8 * acx8) + (bcy8 * acy8));
HXDLIN( 217)		Float dot228 = ((acx8 * acx8) + (acy8 * acy8));
HXDLIN( 217)		Float denom18 = (( (Float)(1) ) / ((dot118 * dot228) - (dot128 * dot128)));
HXDLIN( 217)		 ::pi_xy::iter::IntIterStart xIter310;
HXDLIN( 217)		if ((qx > bx11)) {
HXDLIN( 217)			if ((qx > cx11)) {
HXDLIN( 217)				int min66;
HXDLIN( 217)				if ((bx11 > cx11)) {
HXDLIN( 217)					min66 = ::Math_obj::floor(cx11);
            				}
            				else {
HXDLIN( 217)					min66 = ::Math_obj::floor(bx11);
            				}
HXDLIN( 217)				int ii_min128 = min66;
HXDLIN( 217)				int ii_max128 = ::Math_obj::ceil(qx);
HXDLIN( 217)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min128,ii_max128);
            			}
            			else {
HXDLIN( 217)				int ii_min129 = ::Math_obj::floor(bx11);
HXDLIN( 217)				int ii_max129 = ::Math_obj::ceil(cx11);
HXDLIN( 217)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min129,ii_max129);
            			}
            		}
            		else {
HXDLIN( 217)			if ((bx11 > cx11)) {
HXDLIN( 217)				int min67;
HXDLIN( 217)				if ((qx > cx11)) {
HXDLIN( 217)					min67 = ::Math_obj::floor(cx11);
            				}
            				else {
HXDLIN( 217)					min67 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 217)				int ii_min130 = min67;
HXDLIN( 217)				int ii_max130 = ::Math_obj::ceil(bx11);
HXDLIN( 217)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min130,ii_max130);
            			}
            			else {
HXDLIN( 217)				int ii_min131 = ::Math_obj::floor(qx);
HXDLIN( 217)				int ii_max131 = ::Math_obj::ceil(cx11);
HXDLIN( 217)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min131,ii_max131);
            			}
            		}
HXDLIN( 217)		 ::pi_xy::iter::IntIterStart yIter310;
HXDLIN( 217)		if ((qy > by11)) {
HXDLIN( 217)			if ((qy > cy11)) {
HXDLIN( 217)				int min68;
HXDLIN( 217)				if ((by11 > cy11)) {
HXDLIN( 217)					min68 = ::Math_obj::floor(cy11);
            				}
            				else {
HXDLIN( 217)					min68 = ::Math_obj::floor(by11);
            				}
HXDLIN( 217)				int ii_min132 = min68;
HXDLIN( 217)				int ii_max132 = ::Math_obj::ceil(qy);
HXDLIN( 217)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min132,ii_max132);
            			}
            			else {
HXDLIN( 217)				int ii_min133 = ::Math_obj::floor(by11);
HXDLIN( 217)				int ii_max133 = ::Math_obj::ceil(cy11);
HXDLIN( 217)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min133,ii_max133);
            			}
            		}
            		else {
HXDLIN( 217)			if ((by11 > cy11)) {
HXDLIN( 217)				int min69;
HXDLIN( 217)				if ((qy > cy11)) {
HXDLIN( 217)					min69 = ::Math_obj::floor(cy11);
            				}
            				else {
HXDLIN( 217)					min69 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 217)				int ii_min134 = min69;
HXDLIN( 217)				int ii_max134 = ::Math_obj::ceil(by11);
HXDLIN( 217)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min134,ii_max134);
            			}
            			else {
HXDLIN( 217)				int ii_min135 = ::Math_obj::floor(qy);
HXDLIN( 217)				int ii_max135 = ::Math_obj::ceil(cy11);
HXDLIN( 217)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min135,ii_max135);
            			}
            		}
HXDLIN( 217)		 ::pi_xy::ImageStruct undoImage30 = null();
HXDLIN( 217)		if (hasUndo10) {
HXDLIN( 217)			int width10 = ((xIter310->max - xIter310->start) + 1);
HXDLIN( 217)			int height10 = ((yIter310->max - yIter310->start) + 1);
HXDLIN( 217)			 ::Dynamic imageType10 = null();
HXDLIN( 217)			 ::pi_xy::ImageStruct this316 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 217)			if (::hx::IsNull( imageType10 )) {
HXLINE(  54)				imageType10 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 217)			::Dynamic undoImage31;
HXDLIN( 217)			switch((int)(( (int)(imageType10) ))){
            				case (int)0: {
HXDLIN( 217)					 ::iterMagic::BytesImg byt10 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 217)					 ::iterMagic::BytesImg b80 = byt10;
HXDLIN( 217)					{
HXDLIN( 217)						b80->width = width10;
HXDLIN( 217)						b80->height = height10;
HXDLIN( 217)						b80->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 217)						b80->data = ::haxe::io::Bytes_obj::alloc((b80->length * 4));
HXDLIN( 217)						{
HXDLIN( 217)							int len20 = b80->length;
HXDLIN( 217)							int w10 = 0;
HXDLIN( 217)							{
HXDLIN( 217)								int _g200 = 0;
HXDLIN( 217)								int _g201 = b80->height;
HXDLIN( 217)								while((_g200 < _g201)){
HXDLIN( 217)									_g200 = (_g200 + 1);
HXDLIN( 217)									int y32 = (_g200 - 1);
HXDLIN( 217)									{
HXDLIN( 217)										int _g202 = 0;
HXDLIN( 217)										int _g203 = b80->width;
HXDLIN( 217)										while((_g202 < _g203)){
HXDLIN( 217)											_g202 = (_g202 + 1);
HXDLIN( 217)											int x32 = (_g202 - 1);
HXDLIN( 217)											{
HXDLIN( 217)												w10 = (w10 + 1);
HXDLIN( 217)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 217)											{
HXDLIN( 217)												w10 = (w10 + 1);
HXDLIN( 217)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 217)											{
HXDLIN( 217)												w10 = (w10 + 1);
HXDLIN( 217)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 217)											{
HXDLIN( 217)												w10 = (w10 + 1);
HXDLIN( 217)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 217)					undoImage31 = b80;
            				}
            				break;
            				case (int)1: {
HXDLIN( 217)					 ::iterMagic::ArrIntImg arrI10 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)					 ::iterMagic::ArrIntImg a71 = arrI10;
HXDLIN( 217)					{
HXDLIN( 217)						a71->width = width10;
HXDLIN( 217)						a71->height = height10;
HXDLIN( 217)						a71->data = ::Array_obj< int >::__new(0);
HXDLIN( 217)						a71->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 217)						{
HXDLIN( 217)							int _g204 = 0;
HXDLIN( 217)							int _g205 = a71->length;
HXDLIN( 217)							while((_g204 < _g205)){
HXDLIN( 217)								_g204 = (_g204 + 1);
HXDLIN( 217)								int i92 = (_g204 - 1);
HXDLIN( 217)								a71->data[i92] = 0;
            							}
            						}
            					}
HXDLIN( 217)					undoImage31 = a71;
            				}
            				break;
            				case (int)2: {
HXDLIN( 217)					 ::iterMagic::U32ArrImg u32a10 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 217)					 ::iterMagic::U32ArrImg b81 = u32a10;
HXDLIN( 217)					{
HXDLIN( 217)						b81->width = width10;
HXDLIN( 217)						b81->height = height10;
HXDLIN( 217)						b81->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 217)						int size10 = (b81->length * 4);
HXDLIN( 217)						b81->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size10),0,size10);
HXDLIN( 217)						{
HXDLIN( 217)							int _g206 = 0;
HXDLIN( 217)							int _g207 = b81->length;
HXDLIN( 217)							while((_g206 < _g207)){
HXDLIN( 217)								_g206 = (_g206 + 1);
HXDLIN( 217)								int i93 = (_g206 - 1);
HXDLIN( 217)								{
HXDLIN( 217)									 ::haxe::io::ArrayBufferViewImpl this317 = b81->data;
HXDLIN( 217)									bool undoImage32;
HXDLIN( 217)									if ((i93 >= 0)) {
HXDLIN( 217)										undoImage32 = (i93 < (this317->byteLength >> 2));
            									}
            									else {
HXDLIN( 217)										undoImage32 = false;
            									}
HXDLIN( 217)									if (undoImage32) {
HXDLIN( 217)										 ::haxe::io::Bytes _this10 = this317->bytes;
HXDLIN( 217)										int pos10 = ((i93 << 2) + this317->byteOffset);
HXDLIN( 217)										_this10->b[pos10] = ( (unsigned char)(0) );
HXDLIN( 217)										_this10->b[(pos10 + 1)] = ( (unsigned char)(0) );
HXDLIN( 217)										_this10->b[(pos10 + 2)] = ( (unsigned char)(0) );
HXDLIN( 217)										_this10->b[(pos10 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 217)					undoImage31 = b81;
            				}
            				break;
            				case (int)3: {
HXDLIN( 217)					 ::iterMagic::VecIntImg vec10 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)					 ::iterMagic::VecIntImg v23 = vec10;
HXDLIN( 217)					{
HXDLIN( 217)						v23->width = width10;
HXDLIN( 217)						v23->height = height10;
HXDLIN( 217)						v23->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 217)						v23->data = ::Array_obj< int >::__new(v23->length);
HXDLIN( 217)						{
HXDLIN( 217)							int _g208 = 0;
HXDLIN( 217)							int _g209 = v23->length;
HXDLIN( 217)							while((_g208 < _g209)){
HXDLIN( 217)								_g208 = (_g208 + 1);
HXDLIN( 217)								int i94 = (_g208 - 1);
HXDLIN( 217)								v23->data->__unsafe_set(i94,0);
            							}
            						}
            					}
HXDLIN( 217)					undoImage31 = v23;
            				}
            				break;
            				case (int)4: {
HXDLIN( 217)					 ::iterMagic::StackIntImg sInt10 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 217)					 ::iterMagic::StackIntImg b82 = sInt10;
HXDLIN( 217)					{
HXDLIN( 217)						b82->width = width10;
HXDLIN( 217)						b82->height = height10;
HXDLIN( 217)						b82->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 217)						b82->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 217)						{
HXDLIN( 217)							int len21 = b82->length;
HXDLIN( 217)							 ::haxe::ds::GenericStack_Int d10 = b82->data;
HXDLIN( 217)							if (::hx::IsNull( d10->head )) {
HXDLIN( 217)								int _g210 = 0;
HXDLIN( 217)								int _g211 = len21;
HXDLIN( 217)								while((_g210 < _g211)){
HXDLIN( 217)									_g210 = (_g210 + 1);
HXDLIN( 217)									int i95 = (_g210 - 1);
HXDLIN( 217)									d10->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d10->head);
            								}
            							}
            							else {
HXDLIN( 217)								int _g212 = 0;
HXDLIN( 217)								int _g213 = len21;
HXDLIN( 217)								while((_g212 < _g213)){
HXDLIN( 217)									_g212 = (_g212 + 1);
HXDLIN( 217)									int i96 = (_g212 - 1);
HXDLIN( 217)									{
HXDLIN( 217)										 ::haxe::ds::GenericCell_Int l10 = b82->data->head;
HXDLIN( 217)										 ::haxe::ds::GenericCell_Int prev10 = null();
HXDLIN( 217)										{
HXDLIN( 217)											int _g214 = 0;
HXDLIN( 217)											int _g215 = i96;
HXDLIN( 217)											while((_g214 < _g215)){
HXDLIN( 217)												_g214 = (_g214 + 1);
HXDLIN( 217)												int i97 = (_g214 - 1);
HXLINE( 345)												prev10 = l10;
HXLINE( 346)												l10 = l10->next;
            											}
            										}
HXLINE( 217)										if (::hx::IsNull( prev10 )) {
HXDLIN( 217)											b82->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l10->next);
HXDLIN( 217)											l10 = null();
            										}
            										else {
HXDLIN( 217)											prev10->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l10->next);
HXDLIN( 217)											l10 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 217)					undoImage31 = b82;
            				}
            				break;
            			}
HXDLIN( 217)			this316->image = undoImage31;
HXDLIN( 217)			this316->width = width10;
HXDLIN( 217)			this316->height = height10;
HXDLIN( 217)			this316->imageType = ( (int)(imageType10) );
HXDLIN( 217)			undoImage30 = this316;
HXDLIN( 217)			{
HXDLIN( 217)				int rectLeft10 = xIter310->start;
HXDLIN( 217)				int rectTop10 = yIter310->start;
HXDLIN( 217)				int rectRight10 = xIter310->max;
HXDLIN( 217)				bool forceClear10 = false;
HXDLIN( 217)				{
HXDLIN( 217)					int _g216 = rectTop10;
HXDLIN( 217)					int _g217 = yIter310->max;
HXDLIN( 217)					while((_g216 < _g217)){
HXDLIN( 217)						_g216 = (_g216 + 1);
HXDLIN( 217)						int dy13 = (_g216 - 1);
HXDLIN( 217)						{
HXDLIN( 217)							int _g218 = rectLeft10;
HXDLIN( 217)							int _g219 = rectRight10;
HXDLIN( 217)							while((_g218 < _g219)){
HXDLIN( 217)								_g218 = (_g218 + 1);
HXDLIN( 217)								int dx13 = (_g218 - 1);
HXDLIN( 217)								::Dynamic this318 = this1->image;
HXDLIN( 217)								int index42;
HXDLIN( 217)								if (this1->useVirtualPos) {
HXDLIN( 217)									index42 = ::Std_obj::_hx_int(((((( (Float)(dy13) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx13) - this1->virtualX));
            								}
            								else {
HXDLIN( 217)									index42 = ::Std_obj::_hx_int(( (Float)(((dy13 * this1->width) + dx13)) ));
            								}
HXDLIN( 217)								int c44 = ::iterMagic::Iimg_obj::get(this318,index42);
HXDLIN( 217)								int col10;
HXDLIN( 217)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)									col10 = ((((((c44 >> 24) & 255) << 24) | ((c44 & 255) << 16)) | (((c44 >> 8) & 255) << 8)) | ((c44 >> 16) & 255));
            								}
            								else {
HXDLIN( 217)									col10 = c44;
            								}
HXDLIN( 217)								bool _hx_tmp;
HXDLIN( 217)								if (this1->useMask) {
HXDLIN( 217)									_hx_tmp = ::hx::IsNotNull( this1->mask );
            								}
            								else {
HXDLIN( 217)									_hx_tmp = false;
            								}
HXDLIN( 217)								if (_hx_tmp) {
HXDLIN( 217)									 ::pi_xy::ImageStruct this319 = this1->mask;
HXDLIN( 217)									::Dynamic this320 = this319->image;
HXDLIN( 217)									int index43;
HXDLIN( 217)									if (this319->useVirtualPos) {
HXDLIN( 217)										index43 = ::Std_obj::_hx_int(((((( (Float)(dy13) ) - this319->virtualY) * ( (Float)(this319->width) )) + dx13) - this319->virtualX));
            									}
            									else {
HXDLIN( 217)										index43 = ::Std_obj::_hx_int(( (Float)(((dy13 * this319->width) + dx13)) ));
            									}
HXDLIN( 217)									int c45 = ::iterMagic::Iimg_obj::get(this320,index43);
HXDLIN( 217)									int v24;
HXDLIN( 217)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)										v24 = ((((((c45 >> 24) & 255) << 24) | ((c45 & 255) << 16)) | (((c45 >> 8) & 255) << 8)) | ((c45 >> 16) & 255));
            									}
            									else {
HXDLIN( 217)										v24 = c45;
            									}
HXDLIN( 217)									int maskPixel10 = v24;
HXDLIN( 217)									int this321 = col10;
HXDLIN( 217)									if ((maskPixel10 == 0)) {
HXDLIN( 217)										col10 = this321;
            									}
            									else {
HXDLIN( 217)										Float m010;
HXDLIN( 217)										int this322 = ((maskPixel10 >> 24) & 255);
HXDLIN( 217)										if ((this322 == 0)) {
HXDLIN( 217)											m010 = ((Float)0.);
            										}
            										else {
HXDLIN( 217)											m010 = (( (Float)(this322) ) / ( (Float)(255) ));
            										}
HXDLIN( 217)										Float m110;
HXDLIN( 217)										int this323 = ((maskPixel10 >> 16) & 255);
HXDLIN( 217)										if ((this323 == 0)) {
HXDLIN( 217)											m110 = ((Float)0.);
            										}
            										else {
HXDLIN( 217)											m110 = (( (Float)(this323) ) / ( (Float)(255) ));
            										}
HXDLIN( 217)										Float m210;
HXDLIN( 217)										int this324 = ((maskPixel10 >> 8) & 255);
HXDLIN( 217)										if ((this324 == 0)) {
HXDLIN( 217)											m210 = ((Float)0.);
            										}
            										else {
HXDLIN( 217)											m210 = (( (Float)(this324) ) / ( (Float)(255) ));
            										}
HXDLIN( 217)										Float m310;
HXDLIN( 217)										int this325 = (maskPixel10 & 255);
HXDLIN( 217)										if ((this325 == 0)) {
HXDLIN( 217)											m310 = ((Float)0.);
            										}
            										else {
HXDLIN( 217)											m310 = (( (Float)(this325) ) / ( (Float)(255) ));
            										}
HXDLIN( 217)										int ch010 = ::Std_obj::_hx_int(((((Float)1.) - m010) * ( (Float)(((this321 >> 24) & 255)) )));
HXDLIN( 217)										int ch110 = ::Std_obj::_hx_int(((((Float)1.) - m110) * ( (Float)(((this321 >> 16) & 255)) )));
HXDLIN( 217)										int ch210 = ::Std_obj::_hx_int(((((Float)1.) - m210) * ( (Float)(((this321 >> 8) & 255)) )));
HXDLIN( 217)										int ch310 = ::Std_obj::_hx_int(((((Float)1.) - m310) * ( (Float)((this321 & 255)) )));
HXDLIN( 217)										col10 = ((((::Math_obj::round((( (Float)(ch010) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch110) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch210) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch310) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 217)								if ((col10 != 0)) {
HXDLIN( 217)									int x33 = (dx13 - rectLeft10);
HXDLIN( 217)									int y33 = (dy13 - rectTop10);
HXDLIN( 217)									int c46 = col10;
HXDLIN( 217)									bool _hx_tmp1;
HXDLIN( 217)									if ((((c46 >> 24) & 255) < 254)) {
HXDLIN( 217)										_hx_tmp1 = undoImage30->transparent;
            									}
            									else {
HXDLIN( 217)										_hx_tmp1 = false;
            									}
HXDLIN( 217)									if (_hx_tmp1) {
HXDLIN( 217)										int location20;
HXDLIN( 217)										if (undoImage30->useVirtualPos) {
HXDLIN( 217)											location20 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x33) - undoImage30->virtualX));
            										}
            										else {
HXDLIN( 217)											location20 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage30->width) + x33)) ));
            										}
HXDLIN( 217)										int this326 = ::iterMagic::Iimg_obj::get(undoImage30->image,location20);
HXDLIN( 217)										int this327;
HXDLIN( 217)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)											this327 = ((((((this326 >> 24) & 255) << 24) | ((this326 & 255) << 16)) | (((this326 >> 8) & 255) << 8)) | ((this326 >> 16) & 255));
            										}
            										else {
HXDLIN( 217)											this327 = this326;
            										}
HXDLIN( 217)										Float a125;
HXDLIN( 217)										int this328 = ((this327 >> 24) & 255);
HXDLIN( 217)										if ((this328 == 0)) {
HXDLIN( 217)											a125 = ((Float)0.);
            										}
            										else {
HXDLIN( 217)											a125 = (( (Float)(this328) ) / ( (Float)(255) ));
            										}
HXDLIN( 217)										Float r122;
HXDLIN( 217)										int this329 = ((this327 >> 16) & 255);
HXDLIN( 217)										if ((this329 == 0)) {
HXDLIN( 217)											r122 = ((Float)0.);
            										}
            										else {
HXDLIN( 217)											r122 = (( (Float)(this329) ) / ( (Float)(255) ));
            										}
HXDLIN( 217)										Float g122;
HXDLIN( 217)										int this330 = ((this327 >> 8) & 255);
HXDLIN( 217)										if ((this330 == 0)) {
HXDLIN( 217)											g122 = ((Float)0.);
            										}
            										else {
HXDLIN( 217)											g122 = (( (Float)(this330) ) / ( (Float)(255) ));
            										}
HXDLIN( 217)										Float b126;
HXDLIN( 217)										int this331 = (this327 & 255);
HXDLIN( 217)										if ((this331 == 0)) {
HXDLIN( 217)											b126 = ((Float)0.);
            										}
            										else {
HXDLIN( 217)											b126 = (( (Float)(this331) ) / ( (Float)(255) ));
            										}
HXDLIN( 217)										Float a223;
HXDLIN( 217)										int this332 = ((col10 >> 24) & 255);
HXDLIN( 217)										if ((this332 == 0)) {
HXDLIN( 217)											a223 = ((Float)0.);
            										}
            										else {
HXDLIN( 217)											a223 = (( (Float)(this332) ) / ( (Float)(255) ));
            										}
HXDLIN( 217)										Float r220;
HXDLIN( 217)										int this333 = ((col10 >> 16) & 255);
HXDLIN( 217)										if ((this333 == 0)) {
HXDLIN( 217)											r220 = ((Float)0.);
            										}
            										else {
HXDLIN( 217)											r220 = (( (Float)(this333) ) / ( (Float)(255) ));
            										}
HXDLIN( 217)										Float g220;
HXDLIN( 217)										int this334 = ((col10 >> 8) & 255);
HXDLIN( 217)										if ((this334 == 0)) {
HXDLIN( 217)											g220 = ((Float)0.);
            										}
            										else {
HXDLIN( 217)											g220 = (( (Float)(this334) ) / ( (Float)(255) ));
            										}
HXDLIN( 217)										Float b224;
HXDLIN( 217)										int this335 = (col10 & 255);
HXDLIN( 217)										if ((this335 == 0)) {
HXDLIN( 217)											b224 = ((Float)0.);
            										}
            										else {
HXDLIN( 217)											b224 = (( (Float)(this335) ) / ( (Float)(255) ));
            										}
HXDLIN( 217)										Float a322 = (a125 * (( (Float)(1) ) - a223));
HXDLIN( 217)										int r46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r122 * a322) + (r220 * a223))));
HXDLIN( 217)										int g46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g122 * a322) + (g220 * a223))));
HXDLIN( 217)										int b83 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b126 * a322) + (b224 * a223))));
HXDLIN( 217)										int a72 = ::Std_obj::_hx_int((( (Float)(255) ) * (a322 + a223)));
HXDLIN( 217)										int blended20 = ((((a72 << 24) | (r46 << 16)) | (g46 << 8)) | b83);
HXDLIN( 217)										{
HXDLIN( 217)											int _hx_tmp2;
HXDLIN( 217)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)												_hx_tmp2 = ((((((blended20 >> 24) & 255) << 24) | ((blended20 & 255) << 16)) | (((blended20 >> 8) & 255) << 8)) | ((blended20 >> 16) & 255));
            											}
            											else {
HXDLIN( 217)												_hx_tmp2 = blended20;
            											}
HXDLIN( 217)											::iterMagic::Iimg_obj::set(undoImage30->image,location20,_hx_tmp2);
            										}
            									}
            									else {
HXDLIN( 217)										::Dynamic this336 = undoImage30->image;
HXDLIN( 217)										int index44;
HXDLIN( 217)										if (undoImage30->useVirtualPos) {
HXDLIN( 217)											index44 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x33) - undoImage30->virtualX));
            										}
            										else {
HXDLIN( 217)											index44 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage30->width) + x33)) ));
            										}
HXDLIN( 217)										int _hx_tmp3;
HXDLIN( 217)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)											_hx_tmp3 = ((((((c46 >> 24) & 255) << 24) | ((c46 & 255) << 16)) | (((c46 >> 8) & 255) << 8)) | ((c46 >> 16) & 255));
            										}
            										else {
HXDLIN( 217)											_hx_tmp3 = c46;
            										}
HXDLIN( 217)										::iterMagic::Iimg_obj::set(this336,index44,_hx_tmp3);
            									}
            								}
            								else {
HXDLIN( 217)									if (forceClear10) {
HXDLIN( 217)										::Dynamic this337 = undoImage30->image;
HXDLIN( 217)										int x34 = (dx13 - rectLeft10);
HXDLIN( 217)										int y34 = (dy13 - rectTop10);
HXDLIN( 217)										int index45;
HXDLIN( 217)										if (undoImage30->useVirtualPos) {
HXDLIN( 217)											index45 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x34) - undoImage30->virtualX));
            										}
            										else {
HXDLIN( 217)											index45 = ::Std_obj::_hx_int(( (Float)(((y34 * undoImage30->width) + x34)) ));
            										}
HXDLIN( 217)										::iterMagic::Iimg_obj::set(this337,index45,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 217)		bool found10 = false;
HXDLIN( 217)		Float min70 = ( (Float)(0) );
HXDLIN( 217)		Float max2 = ( (Float)(0) );
HXDLIN( 217)		int a73 = 0;
HXDLIN( 217)		int r47 = 0;
HXDLIN( 217)		int g47 = 0;
HXDLIN( 217)		int b84 = 0;
HXDLIN( 217)		{
HXDLIN( 217)			int _g_min20 = xIter310->start;
HXDLIN( 217)			int _g_max20 = xIter310->max;
HXDLIN( 217)			while((_g_min20 < _g_max20)){
HXDLIN( 217)				_g_min20 = (_g_min20 + 1);
HXDLIN( 217)				int px9 = (_g_min20 - 1);
HXDLIN( 217)				Float pcx8 = (( (Float)(px9) ) - cx11);
HXLINE( 695)				found10 = false;
HXLINE( 217)				{
HXDLIN( 217)					int _g_min21 = yIter310->start;
HXDLIN( 217)					int _g_max21 = yIter310->max;
HXDLIN( 217)					while((_g_min21 < _g_max21)){
HXDLIN( 217)						_g_min21 = (_g_min21 + 1);
HXDLIN( 217)						int py9 = (_g_min21 - 1);
HXDLIN( 217)						Float pcy8 = (( (Float)(py9) ) - cy11);
HXDLIN( 217)						Float dot318 = ((pcx8 * bcx8) + (pcy8 * bcy8));
HXDLIN( 217)						Float dot328 = ((pcx8 * acx8) + (pcy8 * acy8));
HXDLIN( 217)						Float ratioA8 = (((dot228 * dot318) - (dot128 * dot328)) * denom18);
HXDLIN( 217)						Float ratioB8 = (((dot118 * dot328) - (dot128 * dot318)) * denom18);
HXDLIN( 217)						Float ratioC8 = ((((Float)1.0) - ratioB8) - ratioA8);
HXDLIN( 217)						bool _hx_tmp4;
HXDLIN( 217)						bool _hx_tmp5;
HXDLIN( 217)						if ((ratioA8 >= 0)) {
HXDLIN( 217)							_hx_tmp5 = (ratioB8 >= 0);
            						}
            						else {
HXDLIN( 217)							_hx_tmp5 = false;
            						}
HXDLIN( 217)						if (_hx_tmp5) {
HXDLIN( 217)							_hx_tmp4 = (ratioC8 >= 0);
            						}
            						else {
HXDLIN( 217)							_hx_tmp4 = false;
            						}
HXDLIN( 217)						if (_hx_tmp4) {
HXDLIN( 217)							Float min71;
HXDLIN( 217)							if ((ratioA8 < ratioB8)) {
HXDLIN( 217)								min71 = ratioA8;
            							}
            							else {
HXDLIN( 217)								min71 = ratioB8;
            							}
HXDLIN( 217)							if (!((min71 < ratioC8))) {
HXDLIN( 217)								min71 = ratioC8;
            							}
HXDLIN( 217)							Float max3;
HXDLIN( 217)							if ((ratioA8 > ratioB8)) {
HXDLIN( 217)								max3 = ratioA8;
            							}
            							else {
HXDLIN( 217)								max3 = ratioB8;
            							}
HXDLIN( 217)							if (!((max3 > ratioC8))) {
HXDLIN( 217)								max3 = ratioC8;
            							}
HXLINE( 743)							max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE( 217)							Float min72;
HXDLIN( 217)							if ((min71 < max3)) {
HXDLIN( 217)								min72 = min71;
            							}
            							else {
HXDLIN( 217)								min72 = ((max3 + min71) / ( (Float)(2) ));
            							}
HXDLIN( 217)							int i98 = ::Std_obj::_hx_int(((( (Float)(aA8) ) * soft) * min72));
HXDLIN( 217)							if ((i98 > 255)) {
HXLINE(  24)								i98 = 255;
            							}
HXLINE( 217)							if ((i98 < 0)) {
HXLINE(  25)								i98 = 0;
            							}
HXLINE( 217)							a73 = i98;
HXDLIN( 217)							int i99 = ::Std_obj::_hx_int(( (Float)(rA8) ));
HXDLIN( 217)							if ((i99 > 255)) {
HXLINE(  24)								i99 = 255;
            							}
HXLINE( 217)							if ((i99 < 0)) {
HXLINE(  25)								i99 = 0;
            							}
HXLINE( 747)							r47 = i99;
HXLINE( 217)							int i100 = ::Std_obj::_hx_int(( (Float)(gA8) ));
HXDLIN( 217)							if ((i100 > 255)) {
HXLINE(  24)								i100 = 255;
            							}
HXLINE( 217)							if ((i100 < 0)) {
HXLINE(  25)								i100 = 0;
            							}
HXLINE( 748)							g47 = i100;
HXLINE( 217)							int i101 = ::Std_obj::_hx_int(( (Float)(bA8) ));
HXDLIN( 217)							if ((i101 > 255)) {
HXLINE(  24)								i101 = 255;
            							}
HXLINE( 217)							if ((i101 < 0)) {
HXLINE(  25)								i101 = 0;
            							}
HXLINE( 749)							b84 = i101;
HXLINE( 217)							{
HXDLIN( 217)								int location21;
HXDLIN( 217)								if (this1->useVirtualPos) {
HXDLIN( 217)									location21 = ::Std_obj::_hx_int(((((( (Float)(py9) ) - this1->virtualY) * ( (Float)(this1->width) )) + px9) - this1->virtualX));
            								}
            								else {
HXDLIN( 217)									location21 = ::Std_obj::_hx_int(( (Float)(((py9 * this1->width) + px9)) ));
            								}
HXDLIN( 217)								bool _hx_tmp6;
HXDLIN( 217)								if (this1->transparent) {
HXDLIN( 217)									_hx_tmp6 = (a73 < 254);
            								}
            								else {
HXDLIN( 217)									_hx_tmp6 = false;
            								}
HXDLIN( 217)								if (_hx_tmp6) {
HXDLIN( 217)									int this338 = ::iterMagic::Iimg_obj::get(this1->image,location21);
HXDLIN( 217)									int old8;
HXDLIN( 217)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)										old8 = ((((((this338 >> 24) & 255) << 24) | ((this338 & 255) << 16)) | (((this338 >> 8) & 255) << 8)) | ((this338 >> 16) & 255));
            									}
            									else {
HXDLIN( 217)										old8 = this338;
            									}
HXDLIN( 217)									int rhs8 = ((((a73 << 24) | (r47 << 16)) | (g47 << 8)) | b84);
HXDLIN( 217)									Float a126;
HXDLIN( 217)									int this339 = ((old8 >> 24) & 255);
HXDLIN( 217)									if ((this339 == 0)) {
HXDLIN( 217)										a126 = ((Float)0.);
            									}
            									else {
HXDLIN( 217)										a126 = (( (Float)(this339) ) / ( (Float)(255) ));
            									}
HXDLIN( 217)									Float r123;
HXDLIN( 217)									int this340 = ((old8 >> 16) & 255);
HXDLIN( 217)									if ((this340 == 0)) {
HXDLIN( 217)										r123 = ((Float)0.);
            									}
            									else {
HXDLIN( 217)										r123 = (( (Float)(this340) ) / ( (Float)(255) ));
            									}
HXDLIN( 217)									Float g123;
HXDLIN( 217)									int this341 = ((old8 >> 8) & 255);
HXDLIN( 217)									if ((this341 == 0)) {
HXDLIN( 217)										g123 = ((Float)0.);
            									}
            									else {
HXDLIN( 217)										g123 = (( (Float)(this341) ) / ( (Float)(255) ));
            									}
HXDLIN( 217)									Float b127;
HXDLIN( 217)									int this342 = (old8 & 255);
HXDLIN( 217)									if ((this342 == 0)) {
HXDLIN( 217)										b127 = ((Float)0.);
            									}
            									else {
HXDLIN( 217)										b127 = (( (Float)(this342) ) / ( (Float)(255) ));
            									}
HXDLIN( 217)									Float a224;
HXDLIN( 217)									int this343 = ((rhs8 >> 24) & 255);
HXDLIN( 217)									if ((this343 == 0)) {
HXDLIN( 217)										a224 = ((Float)0.);
            									}
            									else {
HXDLIN( 217)										a224 = (( (Float)(this343) ) / ( (Float)(255) ));
            									}
HXDLIN( 217)									Float r221;
HXDLIN( 217)									int this344 = ((rhs8 >> 16) & 255);
HXDLIN( 217)									if ((this344 == 0)) {
HXDLIN( 217)										r221 = ((Float)0.);
            									}
            									else {
HXDLIN( 217)										r221 = (( (Float)(this344) ) / ( (Float)(255) ));
            									}
HXDLIN( 217)									Float g221;
HXDLIN( 217)									int this345 = ((rhs8 >> 8) & 255);
HXDLIN( 217)									if ((this345 == 0)) {
HXDLIN( 217)										g221 = ((Float)0.);
            									}
            									else {
HXDLIN( 217)										g221 = (( (Float)(this345) ) / ( (Float)(255) ));
            									}
HXDLIN( 217)									Float b225;
HXDLIN( 217)									int this346 = (rhs8 & 255);
HXDLIN( 217)									if ((this346 == 0)) {
HXDLIN( 217)										b225 = ((Float)0.);
            									}
            									else {
HXDLIN( 217)										b225 = (( (Float)(this346) ) / ( (Float)(255) ));
            									}
HXDLIN( 217)									Float a323 = (a126 * (( (Float)(1) ) - a224));
HXDLIN( 217)									int r48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r123 * a323) + (r221 * a224))));
HXDLIN( 217)									int g48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g123 * a323) + (g221 * a224))));
HXDLIN( 217)									int b85 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b127 * a323) + (b225 * a224))));
HXDLIN( 217)									int a74 = ::Std_obj::_hx_int((( (Float)(255) ) * (a323 + a224)));
HXDLIN( 217)									int blended21 = ((((a74 << 24) | (r48 << 16)) | (g48 << 8)) | b85);
HXDLIN( 217)									{
HXDLIN( 217)										int _hx_tmp7;
HXDLIN( 217)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 217)											_hx_tmp7 = ((((((blended21 >> 24) & 255) << 24) | ((blended21 & 255) << 16)) | (((blended21 >> 8) & 255) << 8)) | ((blended21 >> 16) & 255));
            										}
            										else {
HXDLIN( 217)											_hx_tmp7 = blended21;
            										}
HXDLIN( 217)										::iterMagic::Iimg_obj::set(this1->image,location21,_hx_tmp7);
            									}
            								}
            								else {
HXDLIN( 217)									int value8;
HXDLIN( 217)									if (this1->isLittle) {
HXDLIN( 217)										value8 = ((((a73 << 24) | (b84 << 16)) | (g47 << 8)) | r47);
            									}
            									else {
HXDLIN( 217)										value8 = ((((a73 << 24) | (r47 << 16)) | (g47 << 8)) | b84);
            									}
HXDLIN( 217)									::iterMagic::Iimg_obj::set(this1->image,location21,value8);
            								}
            							}
HXLINE( 751)							found10 = true;
            						}
            						else {
HXDLIN( 217)							if (found10) {
HXDLIN( 217)								goto _hx_goto_383;
            							}
            						}
            					}
            					_hx_goto_383:;
            				}
            			}
            		}
HXDLIN( 217)		 ::pi_xy::algo::HitTri hitTri;
HXDLIN( 217)		if ((hasHit == false)) {
HXDLIN( 217)			 ::pi_xy::algo::HitTri v25 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx11,by11,cx11,cy11,true);
HXDLIN( 217)			if (hasUndo10) {
HXDLIN( 217)				v25->undoImage = undoImage30;
HXDLIN( 217)				v25->undoX = xIter310->start;
HXDLIN( 217)				v25->undoY = yIter310->start;
            			}
HXDLIN( 217)			hitTri = v25;
            		}
            		else {
HXDLIN( 217)			hitTri = null();
            		}
HXDLIN( 217)		if (hasHit) {
HXDLIN( 217)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(1)->init(0,hitTri));
HXDLIN( 217)			if (::hx::IsNotNull( hitQuad )) {
HXDLIN( 217)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXDLIN( 217)			hitArr->triArr->push(hitQuad->triBCD);
HXDLIN( 217)			return hitArr;
            		}
            		else {
HXDLIN( 217)			return null();
            		}
HXDLIN( 217)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(SoftShape_Impl__obj,arrow,return )

 ::pi_xy::algo::HitTriArray SoftShape_Impl__obj::arrowBoth( ::pi_xy::ImageStruct this1,Float px,Float py,Float qx,Float qy,Float thick,int color,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_hasHit){
            		Float soft = __o_soft.Default(((Float)40.));
            		bool hasHit = __o_hasHit.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_232_arrowBoth)
HXDLIN( 232)		Float goldenRatio = ((Float)1.61803398875);
HXDLIN( 232)		Float o = (qy - py);
HXDLIN( 232)		Float a = (qx - px);
HXDLIN( 232)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN( 232)		Float theta = ::Math_obj::atan2(o,a);
HXDLIN( 232)		Float thicker = ((( (Float)(2) ) * thick) * goldenRatio);
HXDLIN( 232)		Float sin = ::Math_obj::sin(theta);
HXDLIN( 232)		Float cos = ::Math_obj::cos(theta);
HXDLIN( 232)		Float radius = (thick / ( (Float)(2) ));
HXDLIN( 232)		Float radius2 = (thicker / ( (Float)(2) ));
HXDLIN( 232)		Float h2 = (h / goldenRatio);
HXDLIN( 232)		Float hSmall = (h - h2);
HXDLIN( 232)		Float px_ = hSmall;
HXDLIN( 232)		Float py_ = ((Float)0.);
HXDLIN( 232)		Float temp = ((Float)0.);
HXLINE( 254)		temp = (px + ((px_ * cos) - (py_ * sin)));
HXLINE( 255)		py_ = (py + ((py_ * cos) + (px_ * sin)));
HXLINE( 256)		px_ = temp;
HXLINE( 232)		Float h1 = (h2 - hSmall);
HXDLIN( 232)		Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 232)		Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 232)		Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 232)		Float dx = ((Float)0.1);
HXDLIN( 232)		Float dy = radius1;
HXDLIN( 232)		Float cx = h1;
HXDLIN( 232)		Float cy = radius1;
HXDLIN( 232)		Float bx = h1;
HXDLIN( 232)		Float by = -(radius1);
HXDLIN( 232)		Float ax = ((Float)0.1);
HXDLIN( 232)		Float ay = -(radius1);
HXDLIN( 232)		Float temp1 = ((Float)0.);
HXLINE(  82)		temp1 = (px_ + ((ax * cos1) - (ay * sin1)));
HXLINE(  83)		ay = (py_ + ((ay * cos1) + (ax * sin1)));
HXLINE(  84)		ax = temp1;
HXLINE(  86)		temp1 = (px_ + ((bx * cos1) - (by * sin1)));
HXLINE(  87)		by = (py_ + ((by * cos1) + (bx * sin1)));
HXLINE(  88)		bx = temp1;
HXLINE(  90)		temp1 = (px_ + ((cx * cos1) - (cy * sin1)));
HXLINE(  91)		cy = (py_ + ((cy * cos1) + (cx * sin1)));
HXLINE(  92)		cx = temp1;
HXLINE(  94)		temp1 = (px_ + ((dx * cos1) - (dy * sin1)));
HXLINE(  95)		dy = (py_ + ((dy * cos1) + (dx * sin1)));
HXLINE(  96)		dx = temp1;
HXLINE( 232)		{
HXDLIN( 232)			bool hasUndo = true;
HXDLIN( 232)			int aA = ((color >> 24) & 255);
HXDLIN( 232)			int rA = ((color >> 16) & 255);
HXDLIN( 232)			int gA = ((color >> 8) & 255);
HXDLIN( 232)			int bA = (color & 255);
HXDLIN( 232)			Float bcx = (bx - dx);
HXDLIN( 232)			Float bcy = (by - dy);
HXDLIN( 232)			Float acx = (ax - dx);
HXDLIN( 232)			Float acy = (ay - dy);
HXDLIN( 232)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 232)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 232)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 232)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 232)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 232)			if ((ax > bx)) {
HXDLIN( 232)				if ((ax > dx)) {
HXDLIN( 232)					int min;
HXDLIN( 232)					if ((bx > dx)) {
HXDLIN( 232)						min = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN( 232)						min = ::Math_obj::floor(bx);
            					}
HXDLIN( 232)					int ii_min = min;
HXDLIN( 232)					int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 232)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXDLIN( 232)					int ii_min1 = ::Math_obj::floor(bx);
HXDLIN( 232)					int ii_max1 = ::Math_obj::ceil(dx);
HXDLIN( 232)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXDLIN( 232)				if ((bx > dx)) {
HXDLIN( 232)					int min1;
HXDLIN( 232)					if ((ax > dx)) {
HXDLIN( 232)						min1 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN( 232)						min1 = ::Math_obj::ceil(ax);
            					}
HXDLIN( 232)					int ii_min2 = min1;
HXDLIN( 232)					int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN( 232)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXDLIN( 232)					int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 232)					int ii_max3 = ::Math_obj::ceil(dx);
HXDLIN( 232)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN( 232)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 232)			if ((ay > by)) {
HXDLIN( 232)				if ((ay > dy)) {
HXDLIN( 232)					int min2;
HXDLIN( 232)					if ((by > dy)) {
HXDLIN( 232)						min2 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN( 232)						min2 = ::Math_obj::floor(by);
            					}
HXDLIN( 232)					int ii_min4 = min2;
HXDLIN( 232)					int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 232)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXDLIN( 232)					int ii_min5 = ::Math_obj::floor(by);
HXDLIN( 232)					int ii_max5 = ::Math_obj::ceil(dy);
HXDLIN( 232)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXDLIN( 232)				if ((by > dy)) {
HXDLIN( 232)					int min3;
HXDLIN( 232)					if ((ay > dy)) {
HXDLIN( 232)						min3 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN( 232)						min3 = ::Math_obj::ceil(ay);
            					}
HXDLIN( 232)					int ii_min6 = min3;
HXDLIN( 232)					int ii_max6 = ::Math_obj::ceil(by);
HXDLIN( 232)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXDLIN( 232)					int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 232)					int ii_max7 = ::Math_obj::ceil(dy);
HXDLIN( 232)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN( 232)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 232)			if (hasUndo) {
HXDLIN( 232)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 232)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 232)				 ::Dynamic imageType = null();
HXDLIN( 232)				 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 232)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 232)				::Dynamic undoImage1;
HXDLIN( 232)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXDLIN( 232)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 232)						 ::iterMagic::BytesImg b = byt;
HXDLIN( 232)						{
HXDLIN( 232)							b->width = width;
HXDLIN( 232)							b->height = height;
HXDLIN( 232)							b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 232)							b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 232)							{
HXDLIN( 232)								int len = b->length;
HXDLIN( 232)								int w = 0;
HXDLIN( 232)								{
HXDLIN( 232)									int _g = 0;
HXDLIN( 232)									int _g1 = b->height;
HXDLIN( 232)									while((_g < _g1)){
HXDLIN( 232)										_g = (_g + 1);
HXDLIN( 232)										int y = (_g - 1);
HXDLIN( 232)										{
HXDLIN( 232)											int _g2 = 0;
HXDLIN( 232)											int _g3 = b->width;
HXDLIN( 232)											while((_g2 < _g3)){
HXDLIN( 232)												_g2 = (_g2 + 1);
HXDLIN( 232)												int x = (_g2 - 1);
HXDLIN( 232)												{
HXDLIN( 232)													w = (w + 1);
HXDLIN( 232)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 232)												{
HXDLIN( 232)													w = (w + 1);
HXDLIN( 232)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 232)												{
HXDLIN( 232)													w = (w + 1);
HXDLIN( 232)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 232)												{
HXDLIN( 232)													w = (w + 1);
HXDLIN( 232)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 232)						undoImage1 = b;
            					}
            					break;
            					case (int)1: {
HXDLIN( 232)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 232)						 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 232)						{
HXDLIN( 232)							a1->width = width;
HXDLIN( 232)							a1->height = height;
HXDLIN( 232)							a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 232)							a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 232)							{
HXDLIN( 232)								int _g4 = 0;
HXDLIN( 232)								int _g5 = a1->length;
HXDLIN( 232)								while((_g4 < _g5)){
HXDLIN( 232)									_g4 = (_g4 + 1);
HXDLIN( 232)									int i = (_g4 - 1);
HXDLIN( 232)									a1->data[i] = 0;
            								}
            							}
            						}
HXDLIN( 232)						undoImage1 = a1;
            					}
            					break;
            					case (int)2: {
HXDLIN( 232)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 232)						 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 232)						{
HXDLIN( 232)							b1->width = width;
HXDLIN( 232)							b1->height = height;
HXDLIN( 232)							b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 232)							int size = (b1->length * 4);
HXDLIN( 232)							b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 232)							{
HXDLIN( 232)								int _g6 = 0;
HXDLIN( 232)								int _g7 = b1->length;
HXDLIN( 232)								while((_g6 < _g7)){
HXDLIN( 232)									_g6 = (_g6 + 1);
HXDLIN( 232)									int i1 = (_g6 - 1);
HXDLIN( 232)									{
HXDLIN( 232)										 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN( 232)										bool undoImage2;
HXDLIN( 232)										if ((i1 >= 0)) {
HXDLIN( 232)											undoImage2 = (i1 < (this3->byteLength >> 2));
            										}
            										else {
HXDLIN( 232)											undoImage2 = false;
            										}
HXDLIN( 232)										if (undoImage2) {
HXDLIN( 232)											 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 232)											int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN( 232)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 232)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 232)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 232)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 232)						undoImage1 = b1;
            					}
            					break;
            					case (int)3: {
HXDLIN( 232)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 232)						 ::iterMagic::VecIntImg v = vec;
HXDLIN( 232)						{
HXDLIN( 232)							v->width = width;
HXDLIN( 232)							v->height = height;
HXDLIN( 232)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 232)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 232)							{
HXDLIN( 232)								int _g8 = 0;
HXDLIN( 232)								int _g9 = v->length;
HXDLIN( 232)								while((_g8 < _g9)){
HXDLIN( 232)									_g8 = (_g8 + 1);
HXDLIN( 232)									int i2 = (_g8 - 1);
HXDLIN( 232)									v->data->__unsafe_set(i2,0);
            								}
            							}
            						}
HXDLIN( 232)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXDLIN( 232)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 232)						 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 232)						{
HXDLIN( 232)							b2->width = width;
HXDLIN( 232)							b2->height = height;
HXDLIN( 232)							b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 232)							b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 232)							{
HXDLIN( 232)								int len1 = b2->length;
HXDLIN( 232)								 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 232)								if (::hx::IsNull( d->head )) {
HXDLIN( 232)									int _g10 = 0;
HXDLIN( 232)									int _g11 = len1;
HXDLIN( 232)									while((_g10 < _g11)){
HXDLIN( 232)										_g10 = (_g10 + 1);
HXDLIN( 232)										int i3 = (_g10 - 1);
HXDLIN( 232)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXDLIN( 232)									int _g12 = 0;
HXDLIN( 232)									int _g13 = len1;
HXDLIN( 232)									while((_g12 < _g13)){
HXDLIN( 232)										_g12 = (_g12 + 1);
HXDLIN( 232)										int i4 = (_g12 - 1);
HXDLIN( 232)										{
HXDLIN( 232)											 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 232)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 232)											{
HXDLIN( 232)												int _g14 = 0;
HXDLIN( 232)												int _g15 = i4;
HXDLIN( 232)												while((_g14 < _g15)){
HXDLIN( 232)													_g14 = (_g14 + 1);
HXDLIN( 232)													int i5 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE( 232)											if (::hx::IsNull( prev )) {
HXDLIN( 232)												b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 232)												l = null();
            											}
            											else {
HXDLIN( 232)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 232)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 232)						undoImage1 = b2;
            					}
            					break;
            				}
HXDLIN( 232)				this2->image = undoImage1;
HXDLIN( 232)				this2->width = width;
HXDLIN( 232)				this2->height = height;
HXDLIN( 232)				this2->imageType = ( (int)(imageType) );
HXDLIN( 232)				undoImage = this2;
HXDLIN( 232)				{
HXDLIN( 232)					int rectLeft = xIter3->start;
HXDLIN( 232)					int rectTop = yIter3->start;
HXDLIN( 232)					int rectRight = xIter3->max;
HXDLIN( 232)					bool forceClear = false;
HXDLIN( 232)					{
HXDLIN( 232)						int _g16 = rectTop;
HXDLIN( 232)						int _g17 = yIter3->max;
HXDLIN( 232)						while((_g16 < _g17)){
HXDLIN( 232)							_g16 = (_g16 + 1);
HXDLIN( 232)							int dy1 = (_g16 - 1);
HXDLIN( 232)							{
HXDLIN( 232)								int _g18 = rectLeft;
HXDLIN( 232)								int _g19 = rectRight;
HXDLIN( 232)								while((_g18 < _g19)){
HXDLIN( 232)									_g18 = (_g18 + 1);
HXDLIN( 232)									int dx1 = (_g18 - 1);
HXDLIN( 232)									::Dynamic this4 = this1->image;
HXDLIN( 232)									int index;
HXDLIN( 232)									if (this1->useVirtualPos) {
HXDLIN( 232)										index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx1) - this1->virtualX));
            									}
            									else {
HXDLIN( 232)										index = ::Std_obj::_hx_int(( (Float)(((dy1 * this1->width) + dx1)) ));
            									}
HXDLIN( 232)									int c = ::iterMagic::Iimg_obj::get(this4,index);
HXDLIN( 232)									int col;
HXDLIN( 232)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXDLIN( 232)										col = c;
            									}
HXDLIN( 232)									bool _hx_tmp;
HXDLIN( 232)									if (this1->useMask) {
HXDLIN( 232)										_hx_tmp = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN( 232)										_hx_tmp = false;
            									}
HXDLIN( 232)									if (_hx_tmp) {
HXDLIN( 232)										 ::pi_xy::ImageStruct this5 = this1->mask;
HXDLIN( 232)										::Dynamic this6 = this5->image;
HXDLIN( 232)										int index1;
HXDLIN( 232)										if (this5->useVirtualPos) {
HXDLIN( 232)											index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx1) - this5->virtualX));
            										}
            										else {
HXDLIN( 232)											index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this5->width) + dx1)) ));
            										}
HXDLIN( 232)										int c1 = ::iterMagic::Iimg_obj::get(this6,index1);
HXDLIN( 232)										int v1;
HXDLIN( 232)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)											v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXDLIN( 232)											v1 = c1;
            										}
HXDLIN( 232)										int maskPixel = v1;
HXDLIN( 232)										int this7 = col;
HXDLIN( 232)										if ((maskPixel == 0)) {
HXDLIN( 232)											col = this7;
            										}
            										else {
HXDLIN( 232)											Float m0;
HXDLIN( 232)											int this8 = ((maskPixel >> 24) & 255);
HXDLIN( 232)											if ((this8 == 0)) {
HXDLIN( 232)												m0 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												m0 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float m1;
HXDLIN( 232)											int this9 = ((maskPixel >> 16) & 255);
HXDLIN( 232)											if ((this9 == 0)) {
HXDLIN( 232)												m1 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												m1 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float m2;
HXDLIN( 232)											int this10 = ((maskPixel >> 8) & 255);
HXDLIN( 232)											if ((this10 == 0)) {
HXDLIN( 232)												m2 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												m2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float m3;
HXDLIN( 232)											int this11 = (maskPixel & 255);
HXDLIN( 232)											if ((this11 == 0)) {
HXDLIN( 232)												m3 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												m3 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this7 >> 24) & 255)) )));
HXDLIN( 232)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this7 >> 16) & 255)) )));
HXDLIN( 232)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this7 >> 8) & 255)) )));
HXDLIN( 232)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this7 & 255)) )));
HXDLIN( 232)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 232)									if ((col != 0)) {
HXDLIN( 232)										int x1 = (dx1 - rectLeft);
HXDLIN( 232)										int y1 = (dy1 - rectTop);
HXDLIN( 232)										int c2 = col;
HXDLIN( 232)										bool _hx_tmp1;
HXDLIN( 232)										if ((((c2 >> 24) & 255) < 254)) {
HXDLIN( 232)											_hx_tmp1 = undoImage->transparent;
            										}
            										else {
HXDLIN( 232)											_hx_tmp1 = false;
            										}
HXDLIN( 232)										if (_hx_tmp1) {
HXDLIN( 232)											int location;
HXDLIN( 232)											if (undoImage->useVirtualPos) {
HXDLIN( 232)												location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXDLIN( 232)												location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 232)											int this12 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 232)											int this13;
HXDLIN( 232)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)												this13 = ((((((this12 >> 24) & 255) << 24) | ((this12 & 255) << 16)) | (((this12 >> 8) & 255) << 8)) | ((this12 >> 16) & 255));
            											}
            											else {
HXDLIN( 232)												this13 = this12;
            											}
HXDLIN( 232)											Float a11;
HXDLIN( 232)											int this14 = ((this13 >> 24) & 255);
HXDLIN( 232)											if ((this14 == 0)) {
HXDLIN( 232)												a11 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												a11 = (( (Float)(this14) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float r1;
HXDLIN( 232)											int this15 = ((this13 >> 16) & 255);
HXDLIN( 232)											if ((this15 == 0)) {
HXDLIN( 232)												r1 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float g1;
HXDLIN( 232)											int this16 = ((this13 >> 8) & 255);
HXDLIN( 232)											if ((this16 == 0)) {
HXDLIN( 232)												g1 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float b11;
HXDLIN( 232)											int this17 = (this13 & 255);
HXDLIN( 232)											if ((this17 == 0)) {
HXDLIN( 232)												b11 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float a2;
HXDLIN( 232)											int this18 = ((col >> 24) & 255);
HXDLIN( 232)											if ((this18 == 0)) {
HXDLIN( 232)												a2 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												a2 = (( (Float)(this18) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float r2;
HXDLIN( 232)											int this19 = ((col >> 16) & 255);
HXDLIN( 232)											if ((this19 == 0)) {
HXDLIN( 232)												r2 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float g2;
HXDLIN( 232)											int this20 = ((col >> 8) & 255);
HXDLIN( 232)											if ((this20 == 0)) {
HXDLIN( 232)												g2 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float b21;
HXDLIN( 232)											int this21 = (col & 255);
HXDLIN( 232)											if ((this21 == 0)) {
HXDLIN( 232)												b21 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 232)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 232)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 232)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 232)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 232)											int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 232)											{
HXDLIN( 232)												int _hx_tmp2;
HXDLIN( 232)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)													_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXDLIN( 232)													_hx_tmp2 = blended;
            												}
HXDLIN( 232)												::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            											}
            										}
            										else {
HXDLIN( 232)											::Dynamic this22 = undoImage->image;
HXDLIN( 232)											int index2;
HXDLIN( 232)											if (undoImage->useVirtualPos) {
HXDLIN( 232)												index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXDLIN( 232)												index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 232)											int _hx_tmp3;
HXDLIN( 232)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)												_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXDLIN( 232)												_hx_tmp3 = c2;
            											}
HXDLIN( 232)											::iterMagic::Iimg_obj::set(this22,index2,_hx_tmp3);
            										}
            									}
            									else {
HXDLIN( 232)										if (forceClear) {
HXDLIN( 232)											::Dynamic this23 = undoImage->image;
HXDLIN( 232)											int x2 = (dx1 - rectLeft);
HXDLIN( 232)											int y2 = (dy1 - rectTop);
HXDLIN( 232)											int index3;
HXDLIN( 232)											if (undoImage->useVirtualPos) {
HXDLIN( 232)												index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            											}
            											else {
HXDLIN( 232)												index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            											}
HXDLIN( 232)											::iterMagic::Iimg_obj::set(this23,index3,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 232)			bool found = false;
HXDLIN( 232)			Float min4 = ( (Float)(0) );
HXDLIN( 232)			Float max = ( (Float)(0) );
HXDLIN( 232)			int a5 = 0;
HXDLIN( 232)			int r3 = 0;
HXDLIN( 232)			int g3 = 0;
HXDLIN( 232)			int b4 = 0;
HXDLIN( 232)			{
HXDLIN( 232)				int _g_min = xIter3->start;
HXDLIN( 232)				int _g_max = xIter3->max;
HXDLIN( 232)				while((_g_min < _g_max)){
HXDLIN( 232)					_g_min = (_g_min + 1);
HXDLIN( 232)					int px1 = (_g_min - 1);
HXDLIN( 232)					Float pcx = (( (Float)(px1) ) - dx);
HXLINE( 695)					found = false;
HXLINE( 232)					{
HXDLIN( 232)						int _g_min1 = yIter3->start;
HXDLIN( 232)						int _g_max1 = yIter3->max;
HXDLIN( 232)						while((_g_min1 < _g_max1)){
HXDLIN( 232)							_g_min1 = (_g_min1 + 1);
HXDLIN( 232)							int py1 = (_g_min1 - 1);
HXDLIN( 232)							Float pcy = (( (Float)(py1) ) - dy);
HXDLIN( 232)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 232)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 232)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 232)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 232)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 232)							bool _hx_tmp4;
HXDLIN( 232)							bool _hx_tmp5;
HXDLIN( 232)							if ((ratioA >= 0)) {
HXDLIN( 232)								_hx_tmp5 = (ratioB >= 0);
            							}
            							else {
HXDLIN( 232)								_hx_tmp5 = false;
            							}
HXDLIN( 232)							if (_hx_tmp5) {
HXDLIN( 232)								_hx_tmp4 = (ratioC >= 0);
            							}
            							else {
HXDLIN( 232)								_hx_tmp4 = false;
            							}
HXDLIN( 232)							if (_hx_tmp4) {
HXLINE( 709)								min4 = ratioA;
HXLINE( 232)								int i6 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN( 232)								if ((i6 > 255)) {
HXLINE(  24)									i6 = 255;
            								}
HXLINE( 232)								if ((i6 < 0)) {
HXLINE(  25)									i6 = 0;
            								}
HXLINE( 232)								a5 = i6;
HXDLIN( 232)								int i7 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 232)								if ((i7 > 255)) {
HXLINE(  24)									i7 = 255;
            								}
HXLINE( 232)								if ((i7 < 0)) {
HXLINE(  25)									i7 = 0;
            								}
HXLINE( 747)								r3 = i7;
HXLINE( 232)								int i8 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 232)								if ((i8 > 255)) {
HXLINE(  24)									i8 = 255;
            								}
HXLINE( 232)								if ((i8 < 0)) {
HXLINE(  25)									i8 = 0;
            								}
HXLINE( 748)								g3 = i8;
HXLINE( 232)								int i9 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 232)								if ((i9 > 255)) {
HXLINE(  24)									i9 = 255;
            								}
HXLINE( 232)								if ((i9 < 0)) {
HXLINE(  25)									i9 = 0;
            								}
HXLINE( 749)								b4 = i9;
HXLINE( 232)								{
HXDLIN( 232)									int location1;
HXDLIN( 232)									if (this1->useVirtualPos) {
HXDLIN( 232)										location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            									}
            									else {
HXDLIN( 232)										location1 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            									}
HXDLIN( 232)									bool _hx_tmp6;
HXDLIN( 232)									if (this1->transparent) {
HXDLIN( 232)										_hx_tmp6 = (a5 < 254);
            									}
            									else {
HXDLIN( 232)										_hx_tmp6 = false;
            									}
HXDLIN( 232)									if (_hx_tmp6) {
HXDLIN( 232)										int this24 = ::iterMagic::Iimg_obj::get(this1->image,location1);
HXDLIN( 232)										int old;
HXDLIN( 232)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)											old = ((((((this24 >> 24) & 255) << 24) | ((this24 & 255) << 16)) | (((this24 >> 8) & 255) << 8)) | ((this24 >> 16) & 255));
            										}
            										else {
HXDLIN( 232)											old = this24;
            										}
HXDLIN( 232)										int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 232)										Float a12;
HXDLIN( 232)										int this25 = ((old >> 24) & 255);
HXDLIN( 232)										if ((this25 == 0)) {
HXDLIN( 232)											a12 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											a12 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float r11;
HXDLIN( 232)										int this26 = ((old >> 16) & 255);
HXDLIN( 232)										if ((this26 == 0)) {
HXDLIN( 232)											r11 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float g11;
HXDLIN( 232)										int this27 = ((old >> 8) & 255);
HXDLIN( 232)										if ((this27 == 0)) {
HXDLIN( 232)											g11 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float b12;
HXDLIN( 232)										int this28 = (old & 255);
HXDLIN( 232)										if ((this28 == 0)) {
HXDLIN( 232)											b12 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float a21;
HXDLIN( 232)										int this29 = ((rhs >> 24) & 255);
HXDLIN( 232)										if ((this29 == 0)) {
HXDLIN( 232)											a21 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float r21;
HXDLIN( 232)										int this30 = ((rhs >> 16) & 255);
HXDLIN( 232)										if ((this30 == 0)) {
HXDLIN( 232)											r21 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float g21;
HXDLIN( 232)										int this31 = ((rhs >> 8) & 255);
HXDLIN( 232)										if ((this31 == 0)) {
HXDLIN( 232)											g21 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float b22;
HXDLIN( 232)										int this32 = (rhs & 255);
HXDLIN( 232)										if ((this32 == 0)) {
HXDLIN( 232)											b22 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 232)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 232)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 232)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 232)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 232)										int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 232)										{
HXDLIN( 232)											int _hx_tmp7;
HXDLIN( 232)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXDLIN( 232)												_hx_tmp7 = blended1;
            											}
HXDLIN( 232)											::iterMagic::Iimg_obj::set(this1->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXDLIN( 232)										int value;
HXDLIN( 232)										if (this1->isLittle) {
HXDLIN( 232)											value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            										}
            										else {
HXDLIN( 232)											value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            										}
HXDLIN( 232)										::iterMagic::Iimg_obj::set(this1->image,location1,value);
            									}
            								}
HXLINE( 751)								found = true;
            							}
            							else {
HXDLIN( 232)								if (found) {
HXDLIN( 232)									goto _hx_goto_396;
            								}
            							}
            						}
            						_hx_goto_396:;
            					}
            				}
            			}
            		}
HXDLIN( 232)		{
HXDLIN( 232)			bool hasUndo1 = true;
HXDLIN( 232)			int aA1 = ((color >> 24) & 255);
HXDLIN( 232)			int rA1 = ((color >> 16) & 255);
HXDLIN( 232)			int gA1 = ((color >> 8) & 255);
HXDLIN( 232)			int bA1 = (color & 255);
HXDLIN( 232)			Float bcx1 = (cx - dx);
HXDLIN( 232)			Float bcy1 = (cy - dy);
HXDLIN( 232)			Float acx1 = (bx - dx);
HXDLIN( 232)			Float acy1 = (by - dy);
HXDLIN( 232)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 232)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 232)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 232)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 232)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 232)			if ((bx > cx)) {
HXDLIN( 232)				if ((bx > dx)) {
HXDLIN( 232)					int min5;
HXDLIN( 232)					if ((cx > dx)) {
HXDLIN( 232)						min5 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN( 232)						min5 = ::Math_obj::floor(cx);
            					}
HXDLIN( 232)					int ii_min8 = min5;
HXDLIN( 232)					int ii_max8 = ::Math_obj::ceil(bx);
HXDLIN( 232)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXDLIN( 232)					int ii_min9 = ::Math_obj::floor(cx);
HXDLIN( 232)					int ii_max9 = ::Math_obj::ceil(dx);
HXDLIN( 232)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXDLIN( 232)				if ((cx > dx)) {
HXDLIN( 232)					int min6;
HXDLIN( 232)					if ((bx > dx)) {
HXDLIN( 232)						min6 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN( 232)						min6 = ::Math_obj::ceil(bx);
            					}
HXDLIN( 232)					int ii_min10 = min6;
HXDLIN( 232)					int ii_max10 = ::Math_obj::ceil(cx);
HXDLIN( 232)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXDLIN( 232)					int ii_min11 = ::Math_obj::floor(bx);
HXDLIN( 232)					int ii_max11 = ::Math_obj::ceil(dx);
HXDLIN( 232)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN( 232)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 232)			if ((by > cy)) {
HXDLIN( 232)				if ((by > dy)) {
HXDLIN( 232)					int min7;
HXDLIN( 232)					if ((cy > dy)) {
HXDLIN( 232)						min7 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN( 232)						min7 = ::Math_obj::floor(cy);
            					}
HXDLIN( 232)					int ii_min12 = min7;
HXDLIN( 232)					int ii_max12 = ::Math_obj::ceil(by);
HXDLIN( 232)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXDLIN( 232)					int ii_min13 = ::Math_obj::floor(cy);
HXDLIN( 232)					int ii_max13 = ::Math_obj::ceil(dy);
HXDLIN( 232)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXDLIN( 232)				if ((cy > dy)) {
HXDLIN( 232)					int min8;
HXDLIN( 232)					if ((by > dy)) {
HXDLIN( 232)						min8 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN( 232)						min8 = ::Math_obj::ceil(by);
            					}
HXDLIN( 232)					int ii_min14 = min8;
HXDLIN( 232)					int ii_max14 = ::Math_obj::ceil(cy);
HXDLIN( 232)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXDLIN( 232)					int ii_min15 = ::Math_obj::floor(by);
HXDLIN( 232)					int ii_max15 = ::Math_obj::ceil(dy);
HXDLIN( 232)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN( 232)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 232)			if (hasUndo1) {
HXDLIN( 232)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 232)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 232)				 ::Dynamic imageType1 = null();
HXDLIN( 232)				 ::pi_xy::ImageStruct this33 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 232)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 232)				::Dynamic undoImage4;
HXDLIN( 232)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXDLIN( 232)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 232)						 ::iterMagic::BytesImg b6 = byt1;
HXDLIN( 232)						{
HXDLIN( 232)							b6->width = width1;
HXDLIN( 232)							b6->height = height1;
HXDLIN( 232)							b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 232)							b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 232)							{
HXDLIN( 232)								int len2 = b6->length;
HXDLIN( 232)								int w1 = 0;
HXDLIN( 232)								{
HXDLIN( 232)									int _g20 = 0;
HXDLIN( 232)									int _g21 = b6->height;
HXDLIN( 232)									while((_g20 < _g21)){
HXDLIN( 232)										_g20 = (_g20 + 1);
HXDLIN( 232)										int y3 = (_g20 - 1);
HXDLIN( 232)										{
HXDLIN( 232)											int _g22 = 0;
HXDLIN( 232)											int _g23 = b6->width;
HXDLIN( 232)											while((_g22 < _g23)){
HXDLIN( 232)												_g22 = (_g22 + 1);
HXDLIN( 232)												int x3 = (_g22 - 1);
HXDLIN( 232)												{
HXDLIN( 232)													w1 = (w1 + 1);
HXDLIN( 232)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 232)												{
HXDLIN( 232)													w1 = (w1 + 1);
HXDLIN( 232)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 232)												{
HXDLIN( 232)													w1 = (w1 + 1);
HXDLIN( 232)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 232)												{
HXDLIN( 232)													w1 = (w1 + 1);
HXDLIN( 232)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 232)						undoImage4 = b6;
            					}
            					break;
            					case (int)1: {
HXDLIN( 232)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 232)						 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN( 232)						{
HXDLIN( 232)							a7->width = width1;
HXDLIN( 232)							a7->height = height1;
HXDLIN( 232)							a7->data = ::Array_obj< int >::__new(0);
HXDLIN( 232)							a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 232)							{
HXDLIN( 232)								int _g24 = 0;
HXDLIN( 232)								int _g25 = a7->length;
HXDLIN( 232)								while((_g24 < _g25)){
HXDLIN( 232)									_g24 = (_g24 + 1);
HXDLIN( 232)									int i10 = (_g24 - 1);
HXDLIN( 232)									a7->data[i10] = 0;
            								}
            							}
            						}
HXDLIN( 232)						undoImage4 = a7;
            					}
            					break;
            					case (int)2: {
HXDLIN( 232)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 232)						 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN( 232)						{
HXDLIN( 232)							b7->width = width1;
HXDLIN( 232)							b7->height = height1;
HXDLIN( 232)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 232)							int size1 = (b7->length * 4);
HXDLIN( 232)							b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 232)							{
HXDLIN( 232)								int _g26 = 0;
HXDLIN( 232)								int _g27 = b7->length;
HXDLIN( 232)								while((_g26 < _g27)){
HXDLIN( 232)									_g26 = (_g26 + 1);
HXDLIN( 232)									int i11 = (_g26 - 1);
HXDLIN( 232)									{
HXDLIN( 232)										 ::haxe::io::ArrayBufferViewImpl this34 = b7->data;
HXDLIN( 232)										bool undoImage5;
HXDLIN( 232)										if ((i11 >= 0)) {
HXDLIN( 232)											undoImage5 = (i11 < (this34->byteLength >> 2));
            										}
            										else {
HXDLIN( 232)											undoImage5 = false;
            										}
HXDLIN( 232)										if (undoImage5) {
HXDLIN( 232)											 ::haxe::io::Bytes _this1 = this34->bytes;
HXDLIN( 232)											int pos1 = ((i11 << 2) + this34->byteOffset);
HXDLIN( 232)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 232)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 232)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 232)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 232)						undoImage4 = b7;
            					}
            					break;
            					case (int)3: {
HXDLIN( 232)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 232)						 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 232)						{
HXDLIN( 232)							v2->width = width1;
HXDLIN( 232)							v2->height = height1;
HXDLIN( 232)							v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 232)							v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 232)							{
HXDLIN( 232)								int _g28 = 0;
HXDLIN( 232)								int _g29 = v2->length;
HXDLIN( 232)								while((_g28 < _g29)){
HXDLIN( 232)									_g28 = (_g28 + 1);
HXDLIN( 232)									int i12 = (_g28 - 1);
HXDLIN( 232)									v2->data->__unsafe_set(i12,0);
            								}
            							}
            						}
HXDLIN( 232)						undoImage4 = v2;
            					}
            					break;
            					case (int)4: {
HXDLIN( 232)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 232)						 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN( 232)						{
HXDLIN( 232)							b8->width = width1;
HXDLIN( 232)							b8->height = height1;
HXDLIN( 232)							b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 232)							b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 232)							{
HXDLIN( 232)								int len3 = b8->length;
HXDLIN( 232)								 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN( 232)								if (::hx::IsNull( d1->head )) {
HXDLIN( 232)									int _g30 = 0;
HXDLIN( 232)									int _g31 = len3;
HXDLIN( 232)									while((_g30 < _g31)){
HXDLIN( 232)										_g30 = (_g30 + 1);
HXDLIN( 232)										int i13 = (_g30 - 1);
HXDLIN( 232)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXDLIN( 232)									int _g32 = 0;
HXDLIN( 232)									int _g33 = len3;
HXDLIN( 232)									while((_g32 < _g33)){
HXDLIN( 232)										_g32 = (_g32 + 1);
HXDLIN( 232)										int i14 = (_g32 - 1);
HXDLIN( 232)										{
HXDLIN( 232)											 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN( 232)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 232)											{
HXDLIN( 232)												int _g34 = 0;
HXDLIN( 232)												int _g35 = i14;
HXDLIN( 232)												while((_g34 < _g35)){
HXDLIN( 232)													_g34 = (_g34 + 1);
HXDLIN( 232)													int i15 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE( 232)											if (::hx::IsNull( prev1 )) {
HXDLIN( 232)												b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 232)												l1 = null();
            											}
            											else {
HXDLIN( 232)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 232)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 232)						undoImage4 = b8;
            					}
            					break;
            				}
HXDLIN( 232)				this33->image = undoImage4;
HXDLIN( 232)				this33->width = width1;
HXDLIN( 232)				this33->height = height1;
HXDLIN( 232)				this33->imageType = ( (int)(imageType1) );
HXDLIN( 232)				undoImage3 = this33;
HXDLIN( 232)				{
HXDLIN( 232)					int rectLeft1 = xIter31->start;
HXDLIN( 232)					int rectTop1 = yIter31->start;
HXDLIN( 232)					int rectRight1 = xIter31->max;
HXDLIN( 232)					bool forceClear1 = false;
HXDLIN( 232)					{
HXDLIN( 232)						int _g36 = rectTop1;
HXDLIN( 232)						int _g37 = yIter31->max;
HXDLIN( 232)						while((_g36 < _g37)){
HXDLIN( 232)							_g36 = (_g36 + 1);
HXDLIN( 232)							int dy2 = (_g36 - 1);
HXDLIN( 232)							{
HXDLIN( 232)								int _g38 = rectLeft1;
HXDLIN( 232)								int _g39 = rectRight1;
HXDLIN( 232)								while((_g38 < _g39)){
HXDLIN( 232)									_g38 = (_g38 + 1);
HXDLIN( 232)									int dx2 = (_g38 - 1);
HXDLIN( 232)									::Dynamic this35 = this1->image;
HXDLIN( 232)									int index4;
HXDLIN( 232)									if (this1->useVirtualPos) {
HXDLIN( 232)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx2) - this1->virtualX));
            									}
            									else {
HXDLIN( 232)										index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * this1->width) + dx2)) ));
            									}
HXDLIN( 232)									int c3 = ::iterMagic::Iimg_obj::get(this35,index4);
HXDLIN( 232)									int col1;
HXDLIN( 232)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)										col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXDLIN( 232)										col1 = c3;
            									}
HXDLIN( 232)									bool _hx_tmp8;
HXDLIN( 232)									if (this1->useMask) {
HXDLIN( 232)										_hx_tmp8 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN( 232)										_hx_tmp8 = false;
            									}
HXDLIN( 232)									if (_hx_tmp8) {
HXDLIN( 232)										 ::pi_xy::ImageStruct this36 = this1->mask;
HXDLIN( 232)										::Dynamic this37 = this36->image;
HXDLIN( 232)										int index5;
HXDLIN( 232)										if (this36->useVirtualPos) {
HXDLIN( 232)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this36->virtualY) * ( (Float)(this36->width) )) + dx2) - this36->virtualX));
            										}
            										else {
HXDLIN( 232)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this36->width) + dx2)) ));
            										}
HXDLIN( 232)										int c4 = ::iterMagic::Iimg_obj::get(this37,index5);
HXDLIN( 232)										int v3;
HXDLIN( 232)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)											v3 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXDLIN( 232)											v3 = c4;
            										}
HXDLIN( 232)										int maskPixel1 = v3;
HXDLIN( 232)										int this38 = col1;
HXDLIN( 232)										if ((maskPixel1 == 0)) {
HXDLIN( 232)											col1 = this38;
            										}
            										else {
HXDLIN( 232)											Float m01;
HXDLIN( 232)											int this39 = ((maskPixel1 >> 24) & 255);
HXDLIN( 232)											if ((this39 == 0)) {
HXDLIN( 232)												m01 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												m01 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float m11;
HXDLIN( 232)											int this40 = ((maskPixel1 >> 16) & 255);
HXDLIN( 232)											if ((this40 == 0)) {
HXDLIN( 232)												m11 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												m11 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float m21;
HXDLIN( 232)											int this41 = ((maskPixel1 >> 8) & 255);
HXDLIN( 232)											if ((this41 == 0)) {
HXDLIN( 232)												m21 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												m21 = (( (Float)(this41) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float m31;
HXDLIN( 232)											int this42 = (maskPixel1 & 255);
HXDLIN( 232)											if ((this42 == 0)) {
HXDLIN( 232)												m31 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												m31 = (( (Float)(this42) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this38 >> 24) & 255)) )));
HXDLIN( 232)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this38 >> 16) & 255)) )));
HXDLIN( 232)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this38 >> 8) & 255)) )));
HXDLIN( 232)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this38 & 255)) )));
HXDLIN( 232)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 232)									if ((col1 != 0)) {
HXDLIN( 232)										int x4 = (dx2 - rectLeft1);
HXDLIN( 232)										int y4 = (dy2 - rectTop1);
HXDLIN( 232)										int c5 = col1;
HXDLIN( 232)										bool _hx_tmp9;
HXDLIN( 232)										if ((((c5 >> 24) & 255) < 254)) {
HXDLIN( 232)											_hx_tmp9 = undoImage3->transparent;
            										}
            										else {
HXDLIN( 232)											_hx_tmp9 = false;
            										}
HXDLIN( 232)										if (_hx_tmp9) {
HXDLIN( 232)											int location2;
HXDLIN( 232)											if (undoImage3->useVirtualPos) {
HXDLIN( 232)												location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXDLIN( 232)												location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 232)											int this43 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 232)											int this44;
HXDLIN( 232)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)												this44 = ((((((this43 >> 24) & 255) << 24) | ((this43 & 255) << 16)) | (((this43 >> 8) & 255) << 8)) | ((this43 >> 16) & 255));
            											}
            											else {
HXDLIN( 232)												this44 = this43;
            											}
HXDLIN( 232)											Float a13;
HXDLIN( 232)											int this45 = ((this44 >> 24) & 255);
HXDLIN( 232)											if ((this45 == 0)) {
HXDLIN( 232)												a13 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												a13 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float r12;
HXDLIN( 232)											int this46 = ((this44 >> 16) & 255);
HXDLIN( 232)											if ((this46 == 0)) {
HXDLIN( 232)												r12 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												r12 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float g12;
HXDLIN( 232)											int this47 = ((this44 >> 8) & 255);
HXDLIN( 232)											if ((this47 == 0)) {
HXDLIN( 232)												g12 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												g12 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float b13;
HXDLIN( 232)											int this48 = (this44 & 255);
HXDLIN( 232)											if ((this48 == 0)) {
HXDLIN( 232)												b13 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												b13 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float a22;
HXDLIN( 232)											int this49 = ((col1 >> 24) & 255);
HXDLIN( 232)											if ((this49 == 0)) {
HXDLIN( 232)												a22 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												a22 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float r22;
HXDLIN( 232)											int this50 = ((col1 >> 16) & 255);
HXDLIN( 232)											if ((this50 == 0)) {
HXDLIN( 232)												r22 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												r22 = (( (Float)(this50) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float g22;
HXDLIN( 232)											int this51 = ((col1 >> 8) & 255);
HXDLIN( 232)											if ((this51 == 0)) {
HXDLIN( 232)												g22 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												g22 = (( (Float)(this51) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float b23;
HXDLIN( 232)											int this52 = (col1 & 255);
HXDLIN( 232)											if ((this52 == 0)) {
HXDLIN( 232)												b23 = ((Float)0.);
            											}
            											else {
HXDLIN( 232)												b23 = (( (Float)(this52) ) / ( (Float)(255) ));
            											}
HXDLIN( 232)											Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 232)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 232)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 232)											int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 232)											int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 232)											int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN( 232)											{
HXDLIN( 232)												int _hx_tmp10;
HXDLIN( 232)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)													_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXDLIN( 232)													_hx_tmp10 = blended2;
            												}
HXDLIN( 232)												::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            											}
            										}
            										else {
HXDLIN( 232)											::Dynamic this53 = undoImage3->image;
HXDLIN( 232)											int index6;
HXDLIN( 232)											if (undoImage3->useVirtualPos) {
HXDLIN( 232)												index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXDLIN( 232)												index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 232)											int _hx_tmp11;
HXDLIN( 232)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)												_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXDLIN( 232)												_hx_tmp11 = c5;
            											}
HXDLIN( 232)											::iterMagic::Iimg_obj::set(this53,index6,_hx_tmp11);
            										}
            									}
            									else {
HXDLIN( 232)										if (forceClear1) {
HXDLIN( 232)											::Dynamic this54 = undoImage3->image;
HXDLIN( 232)											int x5 = (dx2 - rectLeft1);
HXDLIN( 232)											int y5 = (dy2 - rectTop1);
HXDLIN( 232)											int index7;
HXDLIN( 232)											if (undoImage3->useVirtualPos) {
HXDLIN( 232)												index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            											}
            											else {
HXDLIN( 232)												index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            											}
HXDLIN( 232)											::iterMagic::Iimg_obj::set(this54,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 232)			bool found1 = false;
HXDLIN( 232)			Float min9 = ( (Float)(0) );
HXDLIN( 232)			Float max1 = ( (Float)(0) );
HXDLIN( 232)			int a9 = 0;
HXDLIN( 232)			int r6 = 0;
HXDLIN( 232)			int g6 = 0;
HXDLIN( 232)			int b10 = 0;
HXDLIN( 232)			{
HXDLIN( 232)				int _g_min2 = xIter31->start;
HXDLIN( 232)				int _g_max2 = xIter31->max;
HXDLIN( 232)				while((_g_min2 < _g_max2)){
HXDLIN( 232)					_g_min2 = (_g_min2 + 1);
HXDLIN( 232)					int px2 = (_g_min2 - 1);
HXDLIN( 232)					Float pcx1 = (( (Float)(px2) ) - dx);
HXLINE( 695)					found1 = false;
HXLINE( 232)					{
HXDLIN( 232)						int _g_min3 = yIter31->start;
HXDLIN( 232)						int _g_max3 = yIter31->max;
HXDLIN( 232)						while((_g_min3 < _g_max3)){
HXDLIN( 232)							_g_min3 = (_g_min3 + 1);
HXDLIN( 232)							int py2 = (_g_min3 - 1);
HXDLIN( 232)							Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN( 232)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 232)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 232)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 232)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 232)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 232)							bool _hx_tmp12;
HXDLIN( 232)							bool _hx_tmp13;
HXDLIN( 232)							if ((ratioA1 >= 0)) {
HXDLIN( 232)								_hx_tmp13 = (ratioB1 >= 0);
            							}
            							else {
HXDLIN( 232)								_hx_tmp13 = false;
            							}
HXDLIN( 232)							if (_hx_tmp13) {
HXDLIN( 232)								_hx_tmp12 = (ratioC1 >= 0);
            							}
            							else {
HXDLIN( 232)								_hx_tmp12 = false;
            							}
HXDLIN( 232)							if (_hx_tmp12) {
HXLINE( 722)								min9 = ratioC1;
HXLINE( 232)								int i16 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN( 232)								if ((i16 > 255)) {
HXLINE(  24)									i16 = 255;
            								}
HXLINE( 232)								if ((i16 < 0)) {
HXLINE(  25)									i16 = 0;
            								}
HXLINE( 232)								a9 = i16;
HXDLIN( 232)								int i17 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN( 232)								if ((i17 > 255)) {
HXLINE(  24)									i17 = 255;
            								}
HXLINE( 232)								if ((i17 < 0)) {
HXLINE(  25)									i17 = 0;
            								}
HXLINE( 747)								r6 = i17;
HXLINE( 232)								int i18 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN( 232)								if ((i18 > 255)) {
HXLINE(  24)									i18 = 255;
            								}
HXLINE( 232)								if ((i18 < 0)) {
HXLINE(  25)									i18 = 0;
            								}
HXLINE( 748)								g6 = i18;
HXLINE( 232)								int i19 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN( 232)								if ((i19 > 255)) {
HXLINE(  24)									i19 = 255;
            								}
HXLINE( 232)								if ((i19 < 0)) {
HXLINE(  25)									i19 = 0;
            								}
HXLINE( 749)								b10 = i19;
HXLINE( 232)								{
HXDLIN( 232)									int location3;
HXDLIN( 232)									if (this1->useVirtualPos) {
HXDLIN( 232)										location3 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this1->virtualY) * ( (Float)(this1->width) )) + px2) - this1->virtualX));
            									}
            									else {
HXDLIN( 232)										location3 = ::Std_obj::_hx_int(( (Float)(((py2 * this1->width) + px2)) ));
            									}
HXDLIN( 232)									bool _hx_tmp14;
HXDLIN( 232)									if (this1->transparent) {
HXDLIN( 232)										_hx_tmp14 = (a9 < 254);
            									}
            									else {
HXDLIN( 232)										_hx_tmp14 = false;
            									}
HXDLIN( 232)									if (_hx_tmp14) {
HXDLIN( 232)										int this55 = ::iterMagic::Iimg_obj::get(this1->image,location3);
HXDLIN( 232)										int old1;
HXDLIN( 232)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)											old1 = ((((((this55 >> 24) & 255) << 24) | ((this55 & 255) << 16)) | (((this55 >> 8) & 255) << 8)) | ((this55 >> 16) & 255));
            										}
            										else {
HXDLIN( 232)											old1 = this55;
            										}
HXDLIN( 232)										int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 232)										Float a14;
HXDLIN( 232)										int this56 = ((old1 >> 24) & 255);
HXDLIN( 232)										if ((this56 == 0)) {
HXDLIN( 232)											a14 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											a14 = (( (Float)(this56) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float r13;
HXDLIN( 232)										int this57 = ((old1 >> 16) & 255);
HXDLIN( 232)										if ((this57 == 0)) {
HXDLIN( 232)											r13 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											r13 = (( (Float)(this57) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float g13;
HXDLIN( 232)										int this58 = ((old1 >> 8) & 255);
HXDLIN( 232)										if ((this58 == 0)) {
HXDLIN( 232)											g13 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											g13 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float b14;
HXDLIN( 232)										int this59 = (old1 & 255);
HXDLIN( 232)										if ((this59 == 0)) {
HXDLIN( 232)											b14 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											b14 = (( (Float)(this59) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float a23;
HXDLIN( 232)										int this60 = ((rhs1 >> 24) & 255);
HXDLIN( 232)										if ((this60 == 0)) {
HXDLIN( 232)											a23 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											a23 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float r23;
HXDLIN( 232)										int this61 = ((rhs1 >> 16) & 255);
HXDLIN( 232)										if ((this61 == 0)) {
HXDLIN( 232)											r23 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											r23 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float g23;
HXDLIN( 232)										int this62 = ((rhs1 >> 8) & 255);
HXDLIN( 232)										if ((this62 == 0)) {
HXDLIN( 232)											g23 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											g23 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float b24;
HXDLIN( 232)										int this63 = (rhs1 & 255);
HXDLIN( 232)										if ((this63 == 0)) {
HXDLIN( 232)											b24 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											b24 = (( (Float)(this63) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 232)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 232)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 232)										int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 232)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 232)										int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN( 232)										{
HXDLIN( 232)											int _hx_tmp15;
HXDLIN( 232)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)												_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXDLIN( 232)												_hx_tmp15 = blended3;
            											}
HXDLIN( 232)											::iterMagic::Iimg_obj::set(this1->image,location3,_hx_tmp15);
            										}
            									}
            									else {
HXDLIN( 232)										int value1;
HXDLIN( 232)										if (this1->isLittle) {
HXDLIN( 232)											value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXDLIN( 232)											value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            										}
HXDLIN( 232)										::iterMagic::Iimg_obj::set(this1->image,location3,value1);
            									}
            								}
HXLINE( 751)								found1 = true;
            							}
            							else {
HXDLIN( 232)								if (found1) {
HXDLIN( 232)									goto _hx_goto_408;
            								}
            							}
            						}
            						_hx_goto_408:;
            					}
            				}
            			}
            		}
HXDLIN( 232)		 ::pi_xy::algo::HitQuad v4 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 232)		 ::pi_xy::algo::HitQuad hitQuad = v4;
HXDLIN( 232)		Float cx1 = h2;
HXDLIN( 232)		Float cy1 = radius2;
HXDLIN( 232)		Float bx1 = h2;
HXDLIN( 232)		Float by1 = -(radius2);
HXDLIN( 232)		Float dx3 = hSmall;
HXDLIN( 232)		Float dy3 = radius2;
HXDLIN( 232)		Float ax1 = hSmall;
HXDLIN( 232)		Float ay1 = -(radius2);
HXLINE( 269)		temp = (px + ((bx1 * cos) - (by1 * sin)));
HXLINE( 270)		by1 = (py + ((by1 * cos) + (bx1 * sin)));
HXLINE( 271)		bx1 = temp;
HXLINE( 272)		temp = (px + ((cx1 * cos) - (cy1 * sin)));
HXLINE( 273)		cy1 = (py + ((cy1 * cos) + (cx1 * sin)));
HXLINE( 274)		cx1 = temp;
HXLINE( 276)		temp = (px + ((ax1 * cos) - (ay1 * sin)));
HXLINE( 277)		ay1 = (py + ((ay1 * cos) + (ax1 * sin)));
HXLINE( 278)		ax1 = temp;
HXLINE( 280)		temp = (px + ((dx3 * cos) - (dy3 * sin)));
HXLINE( 281)		dy3 = (py + ((dy3 * cos) + (dx3 * sin)));
HXLINE( 282)		dx3 = temp;
HXLINE( 232)		bool hasUndo2 = true;
HXDLIN( 232)		int aA2 = ((color >> 24) & 255);
HXDLIN( 232)		int rA2 = ((color >> 16) & 255);
HXDLIN( 232)		int gA2 = ((color >> 8) & 255);
HXDLIN( 232)		int bA2 = (color & 255);
HXDLIN( 232)		Float bcx2 = (bx1 - cx1);
HXDLIN( 232)		Float bcy2 = (by1 - cy1);
HXDLIN( 232)		Float acx2 = (qx - cx1);
HXDLIN( 232)		Float acy2 = (qy - cy1);
HXDLIN( 232)		Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 232)		Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 232)		Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 232)		Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 232)		 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 232)		if ((qx > bx1)) {
HXDLIN( 232)			if ((qx > cx1)) {
HXDLIN( 232)				int min10;
HXDLIN( 232)				if ((bx1 > cx1)) {
HXDLIN( 232)					min10 = ::Math_obj::floor(cx1);
            				}
            				else {
HXDLIN( 232)					min10 = ::Math_obj::floor(bx1);
            				}
HXDLIN( 232)				int ii_min16 = min10;
HXDLIN( 232)				int ii_max16 = ::Math_obj::ceil(qx);
HXDLIN( 232)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            			}
            			else {
HXDLIN( 232)				int ii_min17 = ::Math_obj::floor(bx1);
HXDLIN( 232)				int ii_max17 = ::Math_obj::ceil(cx1);
HXDLIN( 232)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            			}
            		}
            		else {
HXDLIN( 232)			if ((bx1 > cx1)) {
HXDLIN( 232)				int min11;
HXDLIN( 232)				if ((qx > cx1)) {
HXDLIN( 232)					min11 = ::Math_obj::floor(cx1);
            				}
            				else {
HXDLIN( 232)					min11 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 232)				int ii_min18 = min11;
HXDLIN( 232)				int ii_max18 = ::Math_obj::ceil(bx1);
HXDLIN( 232)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            			}
            			else {
HXDLIN( 232)				int ii_min19 = ::Math_obj::floor(qx);
HXDLIN( 232)				int ii_max19 = ::Math_obj::ceil(cx1);
HXDLIN( 232)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            			}
            		}
HXDLIN( 232)		 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 232)		if ((qy > by1)) {
HXDLIN( 232)			if ((qy > cy1)) {
HXDLIN( 232)				int min12;
HXDLIN( 232)				if ((by1 > cy1)) {
HXDLIN( 232)					min12 = ::Math_obj::floor(cy1);
            				}
            				else {
HXDLIN( 232)					min12 = ::Math_obj::floor(by1);
            				}
HXDLIN( 232)				int ii_min20 = min12;
HXDLIN( 232)				int ii_max20 = ::Math_obj::ceil(qy);
HXDLIN( 232)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            			}
            			else {
HXDLIN( 232)				int ii_min21 = ::Math_obj::floor(by1);
HXDLIN( 232)				int ii_max21 = ::Math_obj::ceil(cy1);
HXDLIN( 232)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            			}
            		}
            		else {
HXDLIN( 232)			if ((by1 > cy1)) {
HXDLIN( 232)				int min13;
HXDLIN( 232)				if ((qy > cy1)) {
HXDLIN( 232)					min13 = ::Math_obj::floor(cy1);
            				}
            				else {
HXDLIN( 232)					min13 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 232)				int ii_min22 = min13;
HXDLIN( 232)				int ii_max22 = ::Math_obj::ceil(by1);
HXDLIN( 232)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            			}
            			else {
HXDLIN( 232)				int ii_min23 = ::Math_obj::floor(qy);
HXDLIN( 232)				int ii_max23 = ::Math_obj::ceil(cy1);
HXDLIN( 232)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            			}
            		}
HXDLIN( 232)		 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 232)		if (hasUndo2) {
HXDLIN( 232)			int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 232)			int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 232)			 ::Dynamic imageType2 = null();
HXDLIN( 232)			 ::pi_xy::ImageStruct this64 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 232)			if (::hx::IsNull( imageType2 )) {
HXLINE(  54)				imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 232)			::Dynamic undoImage7;
HXDLIN( 232)			switch((int)(( (int)(imageType2) ))){
            				case (int)0: {
HXDLIN( 232)					 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 232)					 ::iterMagic::BytesImg b16 = byt2;
HXDLIN( 232)					{
HXDLIN( 232)						b16->width = width2;
HXDLIN( 232)						b16->height = height2;
HXDLIN( 232)						b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 232)						b16->data = ::haxe::io::Bytes_obj::alloc((b16->length * 4));
HXDLIN( 232)						{
HXDLIN( 232)							int len4 = b16->length;
HXDLIN( 232)							int w2 = 0;
HXDLIN( 232)							{
HXDLIN( 232)								int _g40 = 0;
HXDLIN( 232)								int _g41 = b16->height;
HXDLIN( 232)								while((_g40 < _g41)){
HXDLIN( 232)									_g40 = (_g40 + 1);
HXDLIN( 232)									int y6 = (_g40 - 1);
HXDLIN( 232)									{
HXDLIN( 232)										int _g42 = 0;
HXDLIN( 232)										int _g43 = b16->width;
HXDLIN( 232)										while((_g42 < _g43)){
HXDLIN( 232)											_g42 = (_g42 + 1);
HXDLIN( 232)											int x6 = (_g42 - 1);
HXDLIN( 232)											{
HXDLIN( 232)												w2 = (w2 + 1);
HXDLIN( 232)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 232)											{
HXDLIN( 232)												w2 = (w2 + 1);
HXDLIN( 232)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 232)											{
HXDLIN( 232)												w2 = (w2 + 1);
HXDLIN( 232)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 232)											{
HXDLIN( 232)												w2 = (w2 + 1);
HXDLIN( 232)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 232)					undoImage7 = b16;
            				}
            				break;
            				case (int)1: {
HXDLIN( 232)					 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 232)					 ::iterMagic::ArrIntImg a15 = arrI2;
HXDLIN( 232)					{
HXDLIN( 232)						a15->width = width2;
HXDLIN( 232)						a15->height = height2;
HXDLIN( 232)						a15->data = ::Array_obj< int >::__new(0);
HXDLIN( 232)						a15->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 232)						{
HXDLIN( 232)							int _g44 = 0;
HXDLIN( 232)							int _g45 = a15->length;
HXDLIN( 232)							while((_g44 < _g45)){
HXDLIN( 232)								_g44 = (_g44 + 1);
HXDLIN( 232)								int i20 = (_g44 - 1);
HXDLIN( 232)								a15->data[i20] = 0;
            							}
            						}
            					}
HXDLIN( 232)					undoImage7 = a15;
            				}
            				break;
            				case (int)2: {
HXDLIN( 232)					 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 232)					 ::iterMagic::U32ArrImg b17 = u32a2;
HXDLIN( 232)					{
HXDLIN( 232)						b17->width = width2;
HXDLIN( 232)						b17->height = height2;
HXDLIN( 232)						b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 232)						int size2 = (b17->length * 4);
HXDLIN( 232)						b17->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 232)						{
HXDLIN( 232)							int _g46 = 0;
HXDLIN( 232)							int _g47 = b17->length;
HXDLIN( 232)							while((_g46 < _g47)){
HXDLIN( 232)								_g46 = (_g46 + 1);
HXDLIN( 232)								int i21 = (_g46 - 1);
HXDLIN( 232)								{
HXDLIN( 232)									 ::haxe::io::ArrayBufferViewImpl this65 = b17->data;
HXDLIN( 232)									bool undoImage8;
HXDLIN( 232)									if ((i21 >= 0)) {
HXDLIN( 232)										undoImage8 = (i21 < (this65->byteLength >> 2));
            									}
            									else {
HXDLIN( 232)										undoImage8 = false;
            									}
HXDLIN( 232)									if (undoImage8) {
HXDLIN( 232)										 ::haxe::io::Bytes _this2 = this65->bytes;
HXDLIN( 232)										int pos2 = ((i21 << 2) + this65->byteOffset);
HXDLIN( 232)										_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 232)										_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 232)										_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 232)										_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 232)					undoImage7 = b17;
            				}
            				break;
            				case (int)3: {
HXDLIN( 232)					 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 232)					 ::iterMagic::VecIntImg v5 = vec2;
HXDLIN( 232)					{
HXDLIN( 232)						v5->width = width2;
HXDLIN( 232)						v5->height = height2;
HXDLIN( 232)						v5->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 232)						v5->data = ::Array_obj< int >::__new(v5->length);
HXDLIN( 232)						{
HXDLIN( 232)							int _g48 = 0;
HXDLIN( 232)							int _g49 = v5->length;
HXDLIN( 232)							while((_g48 < _g49)){
HXDLIN( 232)								_g48 = (_g48 + 1);
HXDLIN( 232)								int i22 = (_g48 - 1);
HXDLIN( 232)								v5->data->__unsafe_set(i22,0);
            							}
            						}
            					}
HXDLIN( 232)					undoImage7 = v5;
            				}
            				break;
            				case (int)4: {
HXDLIN( 232)					 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 232)					 ::iterMagic::StackIntImg b18 = sInt2;
HXDLIN( 232)					{
HXDLIN( 232)						b18->width = width2;
HXDLIN( 232)						b18->height = height2;
HXDLIN( 232)						b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 232)						b18->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 232)						{
HXDLIN( 232)							int len5 = b18->length;
HXDLIN( 232)							 ::haxe::ds::GenericStack_Int d2 = b18->data;
HXDLIN( 232)							if (::hx::IsNull( d2->head )) {
HXDLIN( 232)								int _g50 = 0;
HXDLIN( 232)								int _g51 = len5;
HXDLIN( 232)								while((_g50 < _g51)){
HXDLIN( 232)									_g50 = (_g50 + 1);
HXDLIN( 232)									int i23 = (_g50 - 1);
HXDLIN( 232)									d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            								}
            							}
            							else {
HXDLIN( 232)								int _g52 = 0;
HXDLIN( 232)								int _g53 = len5;
HXDLIN( 232)								while((_g52 < _g53)){
HXDLIN( 232)									_g52 = (_g52 + 1);
HXDLIN( 232)									int i24 = (_g52 - 1);
HXDLIN( 232)									{
HXDLIN( 232)										 ::haxe::ds::GenericCell_Int l2 = b18->data->head;
HXDLIN( 232)										 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 232)										{
HXDLIN( 232)											int _g54 = 0;
HXDLIN( 232)											int _g55 = i24;
HXDLIN( 232)											while((_g54 < _g55)){
HXDLIN( 232)												_g54 = (_g54 + 1);
HXDLIN( 232)												int i25 = (_g54 - 1);
HXLINE( 345)												prev2 = l2;
HXLINE( 346)												l2 = l2->next;
            											}
            										}
HXLINE( 232)										if (::hx::IsNull( prev2 )) {
HXDLIN( 232)											b18->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 232)											l2 = null();
            										}
            										else {
HXDLIN( 232)											prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 232)											l2 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 232)					undoImage7 = b18;
            				}
            				break;
            			}
HXDLIN( 232)			this64->image = undoImage7;
HXDLIN( 232)			this64->width = width2;
HXDLIN( 232)			this64->height = height2;
HXDLIN( 232)			this64->imageType = ( (int)(imageType2) );
HXDLIN( 232)			undoImage6 = this64;
HXDLIN( 232)			{
HXDLIN( 232)				int rectLeft2 = xIter32->start;
HXDLIN( 232)				int rectTop2 = yIter32->start;
HXDLIN( 232)				int rectRight2 = xIter32->max;
HXDLIN( 232)				bool forceClear2 = false;
HXDLIN( 232)				{
HXDLIN( 232)					int _g56 = rectTop2;
HXDLIN( 232)					int _g57 = yIter32->max;
HXDLIN( 232)					while((_g56 < _g57)){
HXDLIN( 232)						_g56 = (_g56 + 1);
HXDLIN( 232)						int dy4 = (_g56 - 1);
HXDLIN( 232)						{
HXDLIN( 232)							int _g58 = rectLeft2;
HXDLIN( 232)							int _g59 = rectRight2;
HXDLIN( 232)							while((_g58 < _g59)){
HXDLIN( 232)								_g58 = (_g58 + 1);
HXDLIN( 232)								int dx4 = (_g58 - 1);
HXDLIN( 232)								::Dynamic this66 = this1->image;
HXDLIN( 232)								int index8;
HXDLIN( 232)								if (this1->useVirtualPos) {
HXDLIN( 232)									index8 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx4) - this1->virtualX));
            								}
            								else {
HXDLIN( 232)									index8 = ::Std_obj::_hx_int(( (Float)(((dy4 * this1->width) + dx4)) ));
            								}
HXDLIN( 232)								int c6 = ::iterMagic::Iimg_obj::get(this66,index8);
HXDLIN( 232)								int col2;
HXDLIN( 232)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)									col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            								}
            								else {
HXDLIN( 232)									col2 = c6;
            								}
HXDLIN( 232)								bool _hx_tmp16;
HXDLIN( 232)								if (this1->useMask) {
HXDLIN( 232)									_hx_tmp16 = ::hx::IsNotNull( this1->mask );
            								}
            								else {
HXDLIN( 232)									_hx_tmp16 = false;
            								}
HXDLIN( 232)								if (_hx_tmp16) {
HXDLIN( 232)									 ::pi_xy::ImageStruct this67 = this1->mask;
HXDLIN( 232)									::Dynamic this68 = this67->image;
HXDLIN( 232)									int index9;
HXDLIN( 232)									if (this67->useVirtualPos) {
HXDLIN( 232)										index9 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this67->virtualY) * ( (Float)(this67->width) )) + dx4) - this67->virtualX));
            									}
            									else {
HXDLIN( 232)										index9 = ::Std_obj::_hx_int(( (Float)(((dy4 * this67->width) + dx4)) ));
            									}
HXDLIN( 232)									int c7 = ::iterMagic::Iimg_obj::get(this68,index9);
HXDLIN( 232)									int v6;
HXDLIN( 232)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)										v6 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            									}
            									else {
HXDLIN( 232)										v6 = c7;
            									}
HXDLIN( 232)									int maskPixel2 = v6;
HXDLIN( 232)									int this69 = col2;
HXDLIN( 232)									if ((maskPixel2 == 0)) {
HXDLIN( 232)										col2 = this69;
            									}
            									else {
HXDLIN( 232)										Float m02;
HXDLIN( 232)										int this70 = ((maskPixel2 >> 24) & 255);
HXDLIN( 232)										if ((this70 == 0)) {
HXDLIN( 232)											m02 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											m02 = (( (Float)(this70) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float m12;
HXDLIN( 232)										int this71 = ((maskPixel2 >> 16) & 255);
HXDLIN( 232)										if ((this71 == 0)) {
HXDLIN( 232)											m12 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											m12 = (( (Float)(this71) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float m22;
HXDLIN( 232)										int this72 = ((maskPixel2 >> 8) & 255);
HXDLIN( 232)										if ((this72 == 0)) {
HXDLIN( 232)											m22 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											m22 = (( (Float)(this72) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float m32;
HXDLIN( 232)										int this73 = (maskPixel2 & 255);
HXDLIN( 232)										if ((this73 == 0)) {
HXDLIN( 232)											m32 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											m32 = (( (Float)(this73) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this69 >> 24) & 255)) )));
HXDLIN( 232)										int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this69 >> 16) & 255)) )));
HXDLIN( 232)										int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this69 >> 8) & 255)) )));
HXDLIN( 232)										int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this69 & 255)) )));
HXDLIN( 232)										col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 232)								if ((col2 != 0)) {
HXDLIN( 232)									int x7 = (dx4 - rectLeft2);
HXDLIN( 232)									int y7 = (dy4 - rectTop2);
HXDLIN( 232)									int c8 = col2;
HXDLIN( 232)									bool _hx_tmp17;
HXDLIN( 232)									if ((((c8 >> 24) & 255) < 254)) {
HXDLIN( 232)										_hx_tmp17 = undoImage6->transparent;
            									}
            									else {
HXDLIN( 232)										_hx_tmp17 = false;
            									}
HXDLIN( 232)									if (_hx_tmp17) {
HXDLIN( 232)										int location4;
HXDLIN( 232)										if (undoImage6->useVirtualPos) {
HXDLIN( 232)											location4 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            										}
            										else {
HXDLIN( 232)											location4 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            										}
HXDLIN( 232)										int this74 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 232)										int this75;
HXDLIN( 232)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)											this75 = ((((((this74 >> 24) & 255) << 24) | ((this74 & 255) << 16)) | (((this74 >> 8) & 255) << 8)) | ((this74 >> 16) & 255));
            										}
            										else {
HXDLIN( 232)											this75 = this74;
            										}
HXDLIN( 232)										Float a16;
HXDLIN( 232)										int this76 = ((this75 >> 24) & 255);
HXDLIN( 232)										if ((this76 == 0)) {
HXDLIN( 232)											a16 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											a16 = (( (Float)(this76) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float r14;
HXDLIN( 232)										int this77 = ((this75 >> 16) & 255);
HXDLIN( 232)										if ((this77 == 0)) {
HXDLIN( 232)											r14 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											r14 = (( (Float)(this77) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float g14;
HXDLIN( 232)										int this78 = ((this75 >> 8) & 255);
HXDLIN( 232)										if ((this78 == 0)) {
HXDLIN( 232)											g14 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											g14 = (( (Float)(this78) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float b19;
HXDLIN( 232)										int this79 = (this75 & 255);
HXDLIN( 232)										if ((this79 == 0)) {
HXDLIN( 232)											b19 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											b19 = (( (Float)(this79) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float a24;
HXDLIN( 232)										int this80 = ((col2 >> 24) & 255);
HXDLIN( 232)										if ((this80 == 0)) {
HXDLIN( 232)											a24 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											a24 = (( (Float)(this80) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float r24;
HXDLIN( 232)										int this81 = ((col2 >> 16) & 255);
HXDLIN( 232)										if ((this81 == 0)) {
HXDLIN( 232)											r24 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											r24 = (( (Float)(this81) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float g24;
HXDLIN( 232)										int this82 = ((col2 >> 8) & 255);
HXDLIN( 232)										if ((this82 == 0)) {
HXDLIN( 232)											g24 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											g24 = (( (Float)(this82) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float b25;
HXDLIN( 232)										int this83 = (col2 & 255);
HXDLIN( 232)										if ((this83 == 0)) {
HXDLIN( 232)											b25 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											b25 = (( (Float)(this83) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float a34 = (a16 * (( (Float)(1) ) - a24));
HXDLIN( 232)										int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 232)										int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 232)										int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a34) + (b25 * a24))));
HXDLIN( 232)										int a17 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 232)										int blended4 = ((((a17 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN( 232)										{
HXDLIN( 232)											int _hx_tmp18;
HXDLIN( 232)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)												_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            											}
            											else {
HXDLIN( 232)												_hx_tmp18 = blended4;
            											}
HXDLIN( 232)											::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            										}
            									}
            									else {
HXDLIN( 232)										::Dynamic this84 = undoImage6->image;
HXDLIN( 232)										int index10;
HXDLIN( 232)										if (undoImage6->useVirtualPos) {
HXDLIN( 232)											index10 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            										}
            										else {
HXDLIN( 232)											index10 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            										}
HXDLIN( 232)										int _hx_tmp19;
HXDLIN( 232)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)											_hx_tmp19 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            										}
            										else {
HXDLIN( 232)											_hx_tmp19 = c8;
            										}
HXDLIN( 232)										::iterMagic::Iimg_obj::set(this84,index10,_hx_tmp19);
            									}
            								}
            								else {
HXDLIN( 232)									if (forceClear2) {
HXDLIN( 232)										::Dynamic this85 = undoImage6->image;
HXDLIN( 232)										int x8 = (dx4 - rectLeft2);
HXDLIN( 232)										int y8 = (dy4 - rectTop2);
HXDLIN( 232)										int index11;
HXDLIN( 232)										if (undoImage6->useVirtualPos) {
HXDLIN( 232)											index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            										}
            										else {
HXDLIN( 232)											index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            										}
HXDLIN( 232)										::iterMagic::Iimg_obj::set(this85,index11,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 232)		bool found2 = false;
HXDLIN( 232)		Float min14 = ( (Float)(0) );
HXDLIN( 232)		Float max2 = ( (Float)(0) );
HXDLIN( 232)		int a18 = 0;
HXDLIN( 232)		int r9 = 0;
HXDLIN( 232)		int g9 = 0;
HXDLIN( 232)		int b26 = 0;
HXDLIN( 232)		{
HXDLIN( 232)			int _g_min4 = xIter32->start;
HXDLIN( 232)			int _g_max4 = xIter32->max;
HXDLIN( 232)			while((_g_min4 < _g_max4)){
HXDLIN( 232)				_g_min4 = (_g_min4 + 1);
HXDLIN( 232)				int px3 = (_g_min4 - 1);
HXDLIN( 232)				Float pcx2 = (( (Float)(px3) ) - cx1);
HXLINE( 695)				found2 = false;
HXLINE( 232)				{
HXDLIN( 232)					int _g_min5 = yIter32->start;
HXDLIN( 232)					int _g_max5 = yIter32->max;
HXDLIN( 232)					while((_g_min5 < _g_max5)){
HXDLIN( 232)						_g_min5 = (_g_min5 + 1);
HXDLIN( 232)						int py3 = (_g_min5 - 1);
HXDLIN( 232)						Float pcy2 = (( (Float)(py3) ) - cy1);
HXDLIN( 232)						Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 232)						Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 232)						Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 232)						Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 232)						Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 232)						bool _hx_tmp20;
HXDLIN( 232)						bool _hx_tmp21;
HXDLIN( 232)						if ((ratioA2 >= 0)) {
HXDLIN( 232)							_hx_tmp21 = (ratioB2 >= 0);
            						}
            						else {
HXDLIN( 232)							_hx_tmp21 = false;
            						}
HXDLIN( 232)						if (_hx_tmp21) {
HXDLIN( 232)							_hx_tmp20 = (ratioC2 >= 0);
            						}
            						else {
HXDLIN( 232)							_hx_tmp20 = false;
            						}
HXDLIN( 232)						if (_hx_tmp20) {
HXDLIN( 232)							Float min15;
HXDLIN( 232)							if ((ratioA2 < ratioB2)) {
HXDLIN( 232)								min15 = ratioA2;
            							}
            							else {
HXDLIN( 232)								min15 = ratioB2;
            							}
HXDLIN( 232)							if (!((min15 < ratioC2))) {
HXDLIN( 232)								min15 = ratioC2;
            							}
HXDLIN( 232)							Float max3;
HXDLIN( 232)							if ((ratioA2 > ratioB2)) {
HXDLIN( 232)								max3 = ratioA2;
            							}
            							else {
HXDLIN( 232)								max3 = ratioB2;
            							}
HXDLIN( 232)							if (!((max3 > ratioC2))) {
HXDLIN( 232)								max3 = ratioC2;
            							}
HXLINE( 743)							max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE( 232)							Float min16;
HXDLIN( 232)							if ((min15 < max3)) {
HXDLIN( 232)								min16 = min15;
            							}
            							else {
HXDLIN( 232)								min16 = ((max3 + min15) / ( (Float)(2) ));
            							}
HXDLIN( 232)							int i26 = ::Std_obj::_hx_int(((( (Float)(aA2) ) * soft) * min16));
HXDLIN( 232)							if ((i26 > 255)) {
HXLINE(  24)								i26 = 255;
            							}
HXLINE( 232)							if ((i26 < 0)) {
HXLINE(  25)								i26 = 0;
            							}
HXLINE( 232)							a18 = i26;
HXDLIN( 232)							int i27 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN( 232)							if ((i27 > 255)) {
HXLINE(  24)								i27 = 255;
            							}
HXLINE( 232)							if ((i27 < 0)) {
HXLINE(  25)								i27 = 0;
            							}
HXLINE( 747)							r9 = i27;
HXLINE( 232)							int i28 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN( 232)							if ((i28 > 255)) {
HXLINE(  24)								i28 = 255;
            							}
HXLINE( 232)							if ((i28 < 0)) {
HXLINE(  25)								i28 = 0;
            							}
HXLINE( 748)							g9 = i28;
HXLINE( 232)							int i29 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN( 232)							if ((i29 > 255)) {
HXLINE(  24)								i29 = 255;
            							}
HXLINE( 232)							if ((i29 < 0)) {
HXLINE(  25)								i29 = 0;
            							}
HXLINE( 749)							b26 = i29;
HXLINE( 232)							{
HXDLIN( 232)								int location5;
HXDLIN( 232)								if (this1->useVirtualPos) {
HXDLIN( 232)									location5 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this1->virtualY) * ( (Float)(this1->width) )) + px3) - this1->virtualX));
            								}
            								else {
HXDLIN( 232)									location5 = ::Std_obj::_hx_int(( (Float)(((py3 * this1->width) + px3)) ));
            								}
HXDLIN( 232)								bool _hx_tmp22;
HXDLIN( 232)								if (this1->transparent) {
HXDLIN( 232)									_hx_tmp22 = (a18 < 254);
            								}
            								else {
HXDLIN( 232)									_hx_tmp22 = false;
            								}
HXDLIN( 232)								if (_hx_tmp22) {
HXDLIN( 232)									int this86 = ::iterMagic::Iimg_obj::get(this1->image,location5);
HXDLIN( 232)									int old2;
HXDLIN( 232)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)										old2 = ((((((this86 >> 24) & 255) << 24) | ((this86 & 255) << 16)) | (((this86 >> 8) & 255) << 8)) | ((this86 >> 16) & 255));
            									}
            									else {
HXDLIN( 232)										old2 = this86;
            									}
HXDLIN( 232)									int rhs2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
HXDLIN( 232)									Float a19;
HXDLIN( 232)									int this87 = ((old2 >> 24) & 255);
HXDLIN( 232)									if ((this87 == 0)) {
HXDLIN( 232)										a19 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										a19 = (( (Float)(this87) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float r15;
HXDLIN( 232)									int this88 = ((old2 >> 16) & 255);
HXDLIN( 232)									if ((this88 == 0)) {
HXDLIN( 232)										r15 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										r15 = (( (Float)(this88) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float g15;
HXDLIN( 232)									int this89 = ((old2 >> 8) & 255);
HXDLIN( 232)									if ((this89 == 0)) {
HXDLIN( 232)										g15 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										g15 = (( (Float)(this89) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float b110;
HXDLIN( 232)									int this90 = (old2 & 255);
HXDLIN( 232)									if ((this90 == 0)) {
HXDLIN( 232)										b110 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										b110 = (( (Float)(this90) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float a25;
HXDLIN( 232)									int this91 = ((rhs2 >> 24) & 255);
HXDLIN( 232)									if ((this91 == 0)) {
HXDLIN( 232)										a25 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										a25 = (( (Float)(this91) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float r25;
HXDLIN( 232)									int this92 = ((rhs2 >> 16) & 255);
HXDLIN( 232)									if ((this92 == 0)) {
HXDLIN( 232)										r25 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										r25 = (( (Float)(this92) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float g25;
HXDLIN( 232)									int this93 = ((rhs2 >> 8) & 255);
HXDLIN( 232)									if ((this93 == 0)) {
HXDLIN( 232)										g25 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										g25 = (( (Float)(this93) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float b27;
HXDLIN( 232)									int this94 = (rhs2 & 255);
HXDLIN( 232)									if ((this94 == 0)) {
HXDLIN( 232)										b27 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										b27 = (( (Float)(this94) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float a35 = (a19 * (( (Float)(1) ) - a25));
HXDLIN( 232)									int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 232)									int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 232)									int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a35) + (b27 * a25))));
HXDLIN( 232)									int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 232)									int blended5 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b28);
HXDLIN( 232)									{
HXDLIN( 232)										int _hx_tmp23;
HXDLIN( 232)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)											_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            										}
            										else {
HXDLIN( 232)											_hx_tmp23 = blended5;
            										}
HXDLIN( 232)										::iterMagic::Iimg_obj::set(this1->image,location5,_hx_tmp23);
            									}
            								}
            								else {
HXDLIN( 232)									int value2;
HXDLIN( 232)									if (this1->isLittle) {
HXDLIN( 232)										value2 = ((((a18 << 24) | (b26 << 16)) | (g9 << 8)) | r9);
            									}
            									else {
HXDLIN( 232)										value2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
            									}
HXDLIN( 232)									::iterMagic::Iimg_obj::set(this1->image,location5,value2);
            								}
            							}
HXLINE( 751)							found2 = true;
            						}
            						else {
HXDLIN( 232)							if (found2) {
HXDLIN( 232)								goto _hx_goto_420;
            							}
            						}
            					}
            					_hx_goto_420:;
            				}
            			}
            		}
HXDLIN( 232)		 ::pi_xy::algo::HitTri hitTriTop;
HXDLIN( 232)		if ((hasHit == false)) {
HXDLIN( 232)			 ::pi_xy::algo::HitTri v7 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx1,by1,cx1,cy1,true);
HXDLIN( 232)			if (hasUndo2) {
HXDLIN( 232)				v7->undoImage = undoImage6;
HXDLIN( 232)				v7->undoX = xIter32->start;
HXDLIN( 232)				v7->undoY = yIter32->start;
            			}
HXDLIN( 232)			hitTriTop = v7;
            		}
            		else {
HXDLIN( 232)			hitTriTop = null();
            		}
HXDLIN( 232)		Float soft3 = ( (Float)(40) );
HXDLIN( 232)		bool hasUndo3 = true;
HXDLIN( 232)		int aA3 = ((color >> 24) & 255);
HXDLIN( 232)		int rA3 = ((color >> 16) & 255);
HXDLIN( 232)		int gA3 = ((color >> 8) & 255);
HXDLIN( 232)		int bA3 = (color & 255);
HXDLIN( 232)		Float bcx3 = (ax1 - dx3);
HXDLIN( 232)		Float bcy3 = (ay1 - dy3);
HXDLIN( 232)		Float acx3 = (px - dx3);
HXDLIN( 232)		Float acy3 = (py - dy3);
HXDLIN( 232)		Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 232)		Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 232)		Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 232)		Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 232)		 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 232)		if ((px > ax1)) {
HXDLIN( 232)			if ((px > dx3)) {
HXDLIN( 232)				int min17;
HXDLIN( 232)				if ((ax1 > dx3)) {
HXDLIN( 232)					min17 = ::Math_obj::floor(dx3);
            				}
            				else {
HXDLIN( 232)					min17 = ::Math_obj::floor(ax1);
            				}
HXDLIN( 232)				int ii_min24 = min17;
HXDLIN( 232)				int ii_max24 = ::Math_obj::ceil(px);
HXDLIN( 232)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            			}
            			else {
HXDLIN( 232)				int ii_min25 = ::Math_obj::floor(ax1);
HXDLIN( 232)				int ii_max25 = ::Math_obj::ceil(dx3);
HXDLIN( 232)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            			}
            		}
            		else {
HXDLIN( 232)			if ((ax1 > dx3)) {
HXDLIN( 232)				int min18;
HXDLIN( 232)				if ((px > dx3)) {
HXDLIN( 232)					min18 = ::Math_obj::floor(dx3);
            				}
            				else {
HXDLIN( 232)					min18 = ::Math_obj::ceil(px);
            				}
HXDLIN( 232)				int ii_min26 = min18;
HXDLIN( 232)				int ii_max26 = ::Math_obj::ceil(ax1);
HXDLIN( 232)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            			}
            			else {
HXDLIN( 232)				int ii_min27 = ::Math_obj::floor(px);
HXDLIN( 232)				int ii_max27 = ::Math_obj::ceil(dx3);
HXDLIN( 232)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            			}
            		}
HXDLIN( 232)		 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 232)		if ((py > ay1)) {
HXDLIN( 232)			if ((py > dy3)) {
HXDLIN( 232)				int min19;
HXDLIN( 232)				if ((ay1 > dy3)) {
HXDLIN( 232)					min19 = ::Math_obj::floor(dy3);
            				}
            				else {
HXDLIN( 232)					min19 = ::Math_obj::floor(ay1);
            				}
HXDLIN( 232)				int ii_min28 = min19;
HXDLIN( 232)				int ii_max28 = ::Math_obj::ceil(py);
HXDLIN( 232)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            			}
            			else {
HXDLIN( 232)				int ii_min29 = ::Math_obj::floor(ay1);
HXDLIN( 232)				int ii_max29 = ::Math_obj::ceil(dy3);
HXDLIN( 232)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            			}
            		}
            		else {
HXDLIN( 232)			if ((ay1 > dy3)) {
HXDLIN( 232)				int min20;
HXDLIN( 232)				if ((py > dy3)) {
HXDLIN( 232)					min20 = ::Math_obj::floor(dy3);
            				}
            				else {
HXDLIN( 232)					min20 = ::Math_obj::ceil(py);
            				}
HXDLIN( 232)				int ii_min30 = min20;
HXDLIN( 232)				int ii_max30 = ::Math_obj::ceil(ay1);
HXDLIN( 232)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            			}
            			else {
HXDLIN( 232)				int ii_min31 = ::Math_obj::floor(py);
HXDLIN( 232)				int ii_max31 = ::Math_obj::ceil(dy3);
HXDLIN( 232)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            			}
            		}
HXDLIN( 232)		 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 232)		if (hasUndo3) {
HXDLIN( 232)			int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 232)			int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 232)			 ::Dynamic imageType3 = null();
HXDLIN( 232)			 ::pi_xy::ImageStruct this95 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 232)			if (::hx::IsNull( imageType3 )) {
HXLINE(  54)				imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 232)			::Dynamic undoImage10;
HXDLIN( 232)			switch((int)(( (int)(imageType3) ))){
            				case (int)0: {
HXDLIN( 232)					 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 232)					 ::iterMagic::BytesImg b29 = byt3;
HXDLIN( 232)					{
HXDLIN( 232)						b29->width = width3;
HXDLIN( 232)						b29->height = height3;
HXDLIN( 232)						b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 232)						b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN( 232)						{
HXDLIN( 232)							int len6 = b29->length;
HXDLIN( 232)							int w3 = 0;
HXDLIN( 232)							{
HXDLIN( 232)								int _g60 = 0;
HXDLIN( 232)								int _g61 = b29->height;
HXDLIN( 232)								while((_g60 < _g61)){
HXDLIN( 232)									_g60 = (_g60 + 1);
HXDLIN( 232)									int y9 = (_g60 - 1);
HXDLIN( 232)									{
HXDLIN( 232)										int _g62 = 0;
HXDLIN( 232)										int _g63 = b29->width;
HXDLIN( 232)										while((_g62 < _g63)){
HXDLIN( 232)											_g62 = (_g62 + 1);
HXDLIN( 232)											int x9 = (_g62 - 1);
HXDLIN( 232)											{
HXDLIN( 232)												w3 = (w3 + 1);
HXDLIN( 232)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 232)											{
HXDLIN( 232)												w3 = (w3 + 1);
HXDLIN( 232)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 232)											{
HXDLIN( 232)												w3 = (w3 + 1);
HXDLIN( 232)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 232)											{
HXDLIN( 232)												w3 = (w3 + 1);
HXDLIN( 232)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 232)					undoImage10 = b29;
            				}
            				break;
            				case (int)1: {
HXDLIN( 232)					 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 232)					 ::iterMagic::ArrIntImg a26 = arrI3;
HXDLIN( 232)					{
HXDLIN( 232)						a26->width = width3;
HXDLIN( 232)						a26->height = height3;
HXDLIN( 232)						a26->data = ::Array_obj< int >::__new(0);
HXDLIN( 232)						a26->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 232)						{
HXDLIN( 232)							int _g64 = 0;
HXDLIN( 232)							int _g65 = a26->length;
HXDLIN( 232)							while((_g64 < _g65)){
HXDLIN( 232)								_g64 = (_g64 + 1);
HXDLIN( 232)								int i30 = (_g64 - 1);
HXDLIN( 232)								a26->data[i30] = 0;
            							}
            						}
            					}
HXDLIN( 232)					undoImage10 = a26;
            				}
            				break;
            				case (int)2: {
HXDLIN( 232)					 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 232)					 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN( 232)					{
HXDLIN( 232)						b30->width = width3;
HXDLIN( 232)						b30->height = height3;
HXDLIN( 232)						b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 232)						int size3 = (b30->length * 4);
HXDLIN( 232)						b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 232)						{
HXDLIN( 232)							int _g66 = 0;
HXDLIN( 232)							int _g67 = b30->length;
HXDLIN( 232)							while((_g66 < _g67)){
HXDLIN( 232)								_g66 = (_g66 + 1);
HXDLIN( 232)								int i31 = (_g66 - 1);
HXDLIN( 232)								{
HXDLIN( 232)									 ::haxe::io::ArrayBufferViewImpl this96 = b30->data;
HXDLIN( 232)									bool undoImage11;
HXDLIN( 232)									if ((i31 >= 0)) {
HXDLIN( 232)										undoImage11 = (i31 < (this96->byteLength >> 2));
            									}
            									else {
HXDLIN( 232)										undoImage11 = false;
            									}
HXDLIN( 232)									if (undoImage11) {
HXDLIN( 232)										 ::haxe::io::Bytes _this3 = this96->bytes;
HXDLIN( 232)										int pos3 = ((i31 << 2) + this96->byteOffset);
HXDLIN( 232)										_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 232)										_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 232)										_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 232)										_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 232)					undoImage10 = b30;
            				}
            				break;
            				case (int)3: {
HXDLIN( 232)					 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 232)					 ::iterMagic::VecIntImg v8 = vec3;
HXDLIN( 232)					{
HXDLIN( 232)						v8->width = width3;
HXDLIN( 232)						v8->height = height3;
HXDLIN( 232)						v8->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 232)						v8->data = ::Array_obj< int >::__new(v8->length);
HXDLIN( 232)						{
HXDLIN( 232)							int _g68 = 0;
HXDLIN( 232)							int _g69 = v8->length;
HXDLIN( 232)							while((_g68 < _g69)){
HXDLIN( 232)								_g68 = (_g68 + 1);
HXDLIN( 232)								int i32 = (_g68 - 1);
HXDLIN( 232)								v8->data->__unsafe_set(i32,0);
            							}
            						}
            					}
HXDLIN( 232)					undoImage10 = v8;
            				}
            				break;
            				case (int)4: {
HXDLIN( 232)					 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 232)					 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN( 232)					{
HXDLIN( 232)						b31->width = width3;
HXDLIN( 232)						b31->height = height3;
HXDLIN( 232)						b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 232)						b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 232)						{
HXDLIN( 232)							int len7 = b31->length;
HXDLIN( 232)							 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN( 232)							if (::hx::IsNull( d3->head )) {
HXDLIN( 232)								int _g70 = 0;
HXDLIN( 232)								int _g71 = len7;
HXDLIN( 232)								while((_g70 < _g71)){
HXDLIN( 232)									_g70 = (_g70 + 1);
HXDLIN( 232)									int i33 = (_g70 - 1);
HXDLIN( 232)									d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            								}
            							}
            							else {
HXDLIN( 232)								int _g72 = 0;
HXDLIN( 232)								int _g73 = len7;
HXDLIN( 232)								while((_g72 < _g73)){
HXDLIN( 232)									_g72 = (_g72 + 1);
HXDLIN( 232)									int i34 = (_g72 - 1);
HXDLIN( 232)									{
HXDLIN( 232)										 ::haxe::ds::GenericCell_Int l3 = b31->data->head;
HXDLIN( 232)										 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 232)										{
HXDLIN( 232)											int _g74 = 0;
HXDLIN( 232)											int _g75 = i34;
HXDLIN( 232)											while((_g74 < _g75)){
HXDLIN( 232)												_g74 = (_g74 + 1);
HXDLIN( 232)												int i35 = (_g74 - 1);
HXLINE( 345)												prev3 = l3;
HXLINE( 346)												l3 = l3->next;
            											}
            										}
HXLINE( 232)										if (::hx::IsNull( prev3 )) {
HXDLIN( 232)											b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 232)											l3 = null();
            										}
            										else {
HXDLIN( 232)											prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 232)											l3 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 232)					undoImage10 = b31;
            				}
            				break;
            			}
HXDLIN( 232)			this95->image = undoImage10;
HXDLIN( 232)			this95->width = width3;
HXDLIN( 232)			this95->height = height3;
HXDLIN( 232)			this95->imageType = ( (int)(imageType3) );
HXDLIN( 232)			undoImage9 = this95;
HXDLIN( 232)			{
HXDLIN( 232)				int rectLeft3 = xIter33->start;
HXDLIN( 232)				int rectTop3 = yIter33->start;
HXDLIN( 232)				int rectRight3 = xIter33->max;
HXDLIN( 232)				bool forceClear3 = false;
HXDLIN( 232)				{
HXDLIN( 232)					int _g76 = rectTop3;
HXDLIN( 232)					int _g77 = yIter33->max;
HXDLIN( 232)					while((_g76 < _g77)){
HXDLIN( 232)						_g76 = (_g76 + 1);
HXDLIN( 232)						int dy5 = (_g76 - 1);
HXDLIN( 232)						{
HXDLIN( 232)							int _g78 = rectLeft3;
HXDLIN( 232)							int _g79 = rectRight3;
HXDLIN( 232)							while((_g78 < _g79)){
HXDLIN( 232)								_g78 = (_g78 + 1);
HXDLIN( 232)								int dx5 = (_g78 - 1);
HXDLIN( 232)								::Dynamic this97 = this1->image;
HXDLIN( 232)								int index12;
HXDLIN( 232)								if (this1->useVirtualPos) {
HXDLIN( 232)									index12 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx5) - this1->virtualX));
            								}
            								else {
HXDLIN( 232)									index12 = ::Std_obj::_hx_int(( (Float)(((dy5 * this1->width) + dx5)) ));
            								}
HXDLIN( 232)								int c9 = ::iterMagic::Iimg_obj::get(this97,index12);
HXDLIN( 232)								int col3;
HXDLIN( 232)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)									col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            								}
            								else {
HXDLIN( 232)									col3 = c9;
            								}
HXDLIN( 232)								bool _hx_tmp24;
HXDLIN( 232)								if (this1->useMask) {
HXDLIN( 232)									_hx_tmp24 = ::hx::IsNotNull( this1->mask );
            								}
            								else {
HXDLIN( 232)									_hx_tmp24 = false;
            								}
HXDLIN( 232)								if (_hx_tmp24) {
HXDLIN( 232)									 ::pi_xy::ImageStruct this98 = this1->mask;
HXDLIN( 232)									::Dynamic this99 = this98->image;
HXDLIN( 232)									int index13;
HXDLIN( 232)									if (this98->useVirtualPos) {
HXDLIN( 232)										index13 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this98->virtualY) * ( (Float)(this98->width) )) + dx5) - this98->virtualX));
            									}
            									else {
HXDLIN( 232)										index13 = ::Std_obj::_hx_int(( (Float)(((dy5 * this98->width) + dx5)) ));
            									}
HXDLIN( 232)									int c10 = ::iterMagic::Iimg_obj::get(this99,index13);
HXDLIN( 232)									int v9;
HXDLIN( 232)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)										v9 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            									}
            									else {
HXDLIN( 232)										v9 = c10;
            									}
HXDLIN( 232)									int maskPixel3 = v9;
HXDLIN( 232)									int this100 = col3;
HXDLIN( 232)									if ((maskPixel3 == 0)) {
HXDLIN( 232)										col3 = this100;
            									}
            									else {
HXDLIN( 232)										Float m03;
HXDLIN( 232)										int this101 = ((maskPixel3 >> 24) & 255);
HXDLIN( 232)										if ((this101 == 0)) {
HXDLIN( 232)											m03 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											m03 = (( (Float)(this101) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float m13;
HXDLIN( 232)										int this102 = ((maskPixel3 >> 16) & 255);
HXDLIN( 232)										if ((this102 == 0)) {
HXDLIN( 232)											m13 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											m13 = (( (Float)(this102) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float m23;
HXDLIN( 232)										int this103 = ((maskPixel3 >> 8) & 255);
HXDLIN( 232)										if ((this103 == 0)) {
HXDLIN( 232)											m23 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											m23 = (( (Float)(this103) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float m33;
HXDLIN( 232)										int this104 = (maskPixel3 & 255);
HXDLIN( 232)										if ((this104 == 0)) {
HXDLIN( 232)											m33 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											m33 = (( (Float)(this104) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this100 >> 24) & 255)) )));
HXDLIN( 232)										int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this100 >> 16) & 255)) )));
HXDLIN( 232)										int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this100 >> 8) & 255)) )));
HXDLIN( 232)										int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this100 & 255)) )));
HXDLIN( 232)										col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 232)								if ((col3 != 0)) {
HXDLIN( 232)									int x10 = (dx5 - rectLeft3);
HXDLIN( 232)									int y10 = (dy5 - rectTop3);
HXDLIN( 232)									int c11 = col3;
HXDLIN( 232)									bool _hx_tmp25;
HXDLIN( 232)									if ((((c11 >> 24) & 255) < 254)) {
HXDLIN( 232)										_hx_tmp25 = undoImage9->transparent;
            									}
            									else {
HXDLIN( 232)										_hx_tmp25 = false;
            									}
HXDLIN( 232)									if (_hx_tmp25) {
HXDLIN( 232)										int location6;
HXDLIN( 232)										if (undoImage9->useVirtualPos) {
HXDLIN( 232)											location6 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            										}
            										else {
HXDLIN( 232)											location6 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            										}
HXDLIN( 232)										int this105 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 232)										int this106;
HXDLIN( 232)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)											this106 = ((((((this105 >> 24) & 255) << 24) | ((this105 & 255) << 16)) | (((this105 >> 8) & 255) << 8)) | ((this105 >> 16) & 255));
            										}
            										else {
HXDLIN( 232)											this106 = this105;
            										}
HXDLIN( 232)										Float a110;
HXDLIN( 232)										int this107 = ((this106 >> 24) & 255);
HXDLIN( 232)										if ((this107 == 0)) {
HXDLIN( 232)											a110 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											a110 = (( (Float)(this107) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float r16;
HXDLIN( 232)										int this108 = ((this106 >> 16) & 255);
HXDLIN( 232)										if ((this108 == 0)) {
HXDLIN( 232)											r16 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											r16 = (( (Float)(this108) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float g16;
HXDLIN( 232)										int this109 = ((this106 >> 8) & 255);
HXDLIN( 232)										if ((this109 == 0)) {
HXDLIN( 232)											g16 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											g16 = (( (Float)(this109) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float b111;
HXDLIN( 232)										int this110 = (this106 & 255);
HXDLIN( 232)										if ((this110 == 0)) {
HXDLIN( 232)											b111 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											b111 = (( (Float)(this110) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float a27;
HXDLIN( 232)										int this111 = ((col3 >> 24) & 255);
HXDLIN( 232)										if ((this111 == 0)) {
HXDLIN( 232)											a27 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											a27 = (( (Float)(this111) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float r26;
HXDLIN( 232)										int this112 = ((col3 >> 16) & 255);
HXDLIN( 232)										if ((this112 == 0)) {
HXDLIN( 232)											r26 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											r26 = (( (Float)(this112) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float g26;
HXDLIN( 232)										int this113 = ((col3 >> 8) & 255);
HXDLIN( 232)										if ((this113 == 0)) {
HXDLIN( 232)											g26 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											g26 = (( (Float)(this113) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float b210;
HXDLIN( 232)										int this114 = (col3 & 255);
HXDLIN( 232)										if ((this114 == 0)) {
HXDLIN( 232)											b210 = ((Float)0.);
            										}
            										else {
HXDLIN( 232)											b210 = (( (Float)(this114) ) / ( (Float)(255) ));
            										}
HXDLIN( 232)										Float a36 = (a110 * (( (Float)(1) ) - a27));
HXDLIN( 232)										int r17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a27))));
HXDLIN( 232)										int g17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a27))));
HXDLIN( 232)										int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a36) + (b210 * a27))));
HXDLIN( 232)										int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a27)));
HXDLIN( 232)										int blended6 = ((((a28 << 24) | (r17 << 16)) | (g17 << 8)) | b32);
HXDLIN( 232)										{
HXDLIN( 232)											int _hx_tmp26;
HXDLIN( 232)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)												_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            											}
            											else {
HXDLIN( 232)												_hx_tmp26 = blended6;
            											}
HXDLIN( 232)											::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            										}
            									}
            									else {
HXDLIN( 232)										::Dynamic this115 = undoImage9->image;
HXDLIN( 232)										int index14;
HXDLIN( 232)										if (undoImage9->useVirtualPos) {
HXDLIN( 232)											index14 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            										}
            										else {
HXDLIN( 232)											index14 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            										}
HXDLIN( 232)										int _hx_tmp27;
HXDLIN( 232)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)											_hx_tmp27 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            										}
            										else {
HXDLIN( 232)											_hx_tmp27 = c11;
            										}
HXDLIN( 232)										::iterMagic::Iimg_obj::set(this115,index14,_hx_tmp27);
            									}
            								}
            								else {
HXDLIN( 232)									if (forceClear3) {
HXDLIN( 232)										::Dynamic this116 = undoImage9->image;
HXDLIN( 232)										int x11 = (dx5 - rectLeft3);
HXDLIN( 232)										int y11 = (dy5 - rectTop3);
HXDLIN( 232)										int index15;
HXDLIN( 232)										if (undoImage9->useVirtualPos) {
HXDLIN( 232)											index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            										}
            										else {
HXDLIN( 232)											index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            										}
HXDLIN( 232)										::iterMagic::Iimg_obj::set(this116,index15,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 232)		bool found3 = false;
HXDLIN( 232)		Float min21 = ( (Float)(0) );
HXDLIN( 232)		Float max4 = ( (Float)(0) );
HXDLIN( 232)		int a29 = 0;
HXDLIN( 232)		int r18 = 0;
HXDLIN( 232)		int g18 = 0;
HXDLIN( 232)		int b33 = 0;
HXDLIN( 232)		{
HXDLIN( 232)			int _g_min6 = xIter33->start;
HXDLIN( 232)			int _g_max6 = xIter33->max;
HXDLIN( 232)			while((_g_min6 < _g_max6)){
HXDLIN( 232)				_g_min6 = (_g_min6 + 1);
HXDLIN( 232)				int px4 = (_g_min6 - 1);
HXDLIN( 232)				Float pcx3 = (( (Float)(px4) ) - dx3);
HXLINE( 695)				found3 = false;
HXLINE( 232)				{
HXDLIN( 232)					int _g_min7 = yIter33->start;
HXDLIN( 232)					int _g_max7 = yIter33->max;
HXDLIN( 232)					while((_g_min7 < _g_max7)){
HXDLIN( 232)						_g_min7 = (_g_min7 + 1);
HXDLIN( 232)						int py4 = (_g_min7 - 1);
HXDLIN( 232)						Float pcy3 = (( (Float)(py4) ) - dy3);
HXDLIN( 232)						Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 232)						Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 232)						Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 232)						Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 232)						Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 232)						bool _hx_tmp28;
HXDLIN( 232)						bool _hx_tmp29;
HXDLIN( 232)						if ((ratioA3 >= 0)) {
HXDLIN( 232)							_hx_tmp29 = (ratioB3 >= 0);
            						}
            						else {
HXDLIN( 232)							_hx_tmp29 = false;
            						}
HXDLIN( 232)						if (_hx_tmp29) {
HXDLIN( 232)							_hx_tmp28 = (ratioC3 >= 0);
            						}
            						else {
HXDLIN( 232)							_hx_tmp28 = false;
            						}
HXDLIN( 232)						if (_hx_tmp28) {
HXDLIN( 232)							Float min22;
HXDLIN( 232)							if ((ratioA3 < ratioB3)) {
HXDLIN( 232)								min22 = ratioA3;
            							}
            							else {
HXDLIN( 232)								min22 = ratioB3;
            							}
HXDLIN( 232)							if (!((min22 < ratioC3))) {
HXDLIN( 232)								min22 = ratioC3;
            							}
HXDLIN( 232)							Float max5;
HXDLIN( 232)							if ((ratioA3 > ratioB3)) {
HXDLIN( 232)								max5 = ratioA3;
            							}
            							else {
HXDLIN( 232)								max5 = ratioB3;
            							}
HXDLIN( 232)							if (!((max5 > ratioC3))) {
HXDLIN( 232)								max5 = ratioC3;
            							}
HXLINE( 743)							max5 = ((( (Float)(1) ) - max5) / ( (Float)(2) ));
HXLINE( 232)							Float min23;
HXDLIN( 232)							if ((min22 < max5)) {
HXDLIN( 232)								min23 = min22;
            							}
            							else {
HXDLIN( 232)								min23 = ((max5 + min22) / ( (Float)(2) ));
            							}
HXDLIN( 232)							int i36 = ::Std_obj::_hx_int(((( (Float)(aA3) ) * soft3) * min23));
HXDLIN( 232)							if ((i36 > 255)) {
HXLINE(  24)								i36 = 255;
            							}
HXLINE( 232)							if ((i36 < 0)) {
HXLINE(  25)								i36 = 0;
            							}
HXLINE( 232)							a29 = i36;
HXDLIN( 232)							int i37 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN( 232)							if ((i37 > 255)) {
HXLINE(  24)								i37 = 255;
            							}
HXLINE( 232)							if ((i37 < 0)) {
HXLINE(  25)								i37 = 0;
            							}
HXLINE( 747)							r18 = i37;
HXLINE( 232)							int i38 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN( 232)							if ((i38 > 255)) {
HXLINE(  24)								i38 = 255;
            							}
HXLINE( 232)							if ((i38 < 0)) {
HXLINE(  25)								i38 = 0;
            							}
HXLINE( 748)							g18 = i38;
HXLINE( 232)							int i39 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN( 232)							if ((i39 > 255)) {
HXLINE(  24)								i39 = 255;
            							}
HXLINE( 232)							if ((i39 < 0)) {
HXLINE(  25)								i39 = 0;
            							}
HXLINE( 749)							b33 = i39;
HXLINE( 232)							{
HXDLIN( 232)								int location7;
HXDLIN( 232)								if (this1->useVirtualPos) {
HXDLIN( 232)									location7 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - this1->virtualY) * ( (Float)(this1->width) )) + px4) - this1->virtualX));
            								}
            								else {
HXDLIN( 232)									location7 = ::Std_obj::_hx_int(( (Float)(((py4 * this1->width) + px4)) ));
            								}
HXDLIN( 232)								bool _hx_tmp30;
HXDLIN( 232)								if (this1->transparent) {
HXDLIN( 232)									_hx_tmp30 = (a29 < 254);
            								}
            								else {
HXDLIN( 232)									_hx_tmp30 = false;
            								}
HXDLIN( 232)								if (_hx_tmp30) {
HXDLIN( 232)									int this117 = ::iterMagic::Iimg_obj::get(this1->image,location7);
HXDLIN( 232)									int old3;
HXDLIN( 232)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)										old3 = ((((((this117 >> 24) & 255) << 24) | ((this117 & 255) << 16)) | (((this117 >> 8) & 255) << 8)) | ((this117 >> 16) & 255));
            									}
            									else {
HXDLIN( 232)										old3 = this117;
            									}
HXDLIN( 232)									int rhs3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
HXDLIN( 232)									Float a111;
HXDLIN( 232)									int this118 = ((old3 >> 24) & 255);
HXDLIN( 232)									if ((this118 == 0)) {
HXDLIN( 232)										a111 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										a111 = (( (Float)(this118) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float r19;
HXDLIN( 232)									int this119 = ((old3 >> 16) & 255);
HXDLIN( 232)									if ((this119 == 0)) {
HXDLIN( 232)										r19 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										r19 = (( (Float)(this119) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float g19;
HXDLIN( 232)									int this120 = ((old3 >> 8) & 255);
HXDLIN( 232)									if ((this120 == 0)) {
HXDLIN( 232)										g19 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										g19 = (( (Float)(this120) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float b112;
HXDLIN( 232)									int this121 = (old3 & 255);
HXDLIN( 232)									if ((this121 == 0)) {
HXDLIN( 232)										b112 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										b112 = (( (Float)(this121) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float a210;
HXDLIN( 232)									int this122 = ((rhs3 >> 24) & 255);
HXDLIN( 232)									if ((this122 == 0)) {
HXDLIN( 232)										a210 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										a210 = (( (Float)(this122) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float r27;
HXDLIN( 232)									int this123 = ((rhs3 >> 16) & 255);
HXDLIN( 232)									if ((this123 == 0)) {
HXDLIN( 232)										r27 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										r27 = (( (Float)(this123) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float g27;
HXDLIN( 232)									int this124 = ((rhs3 >> 8) & 255);
HXDLIN( 232)									if ((this124 == 0)) {
HXDLIN( 232)										g27 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										g27 = (( (Float)(this124) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float b211;
HXDLIN( 232)									int this125 = (rhs3 & 255);
HXDLIN( 232)									if ((this125 == 0)) {
HXDLIN( 232)										b211 = ((Float)0.);
            									}
            									else {
HXDLIN( 232)										b211 = (( (Float)(this125) ) / ( (Float)(255) ));
            									}
HXDLIN( 232)									Float a37 = (a111 * (( (Float)(1) ) - a210));
HXDLIN( 232)									int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a37) + (r27 * a210))));
HXDLIN( 232)									int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a37) + (g27 * a210))));
HXDLIN( 232)									int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a37) + (b211 * a210))));
HXDLIN( 232)									int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a210)));
HXDLIN( 232)									int blended7 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b34);
HXDLIN( 232)									{
HXDLIN( 232)										int _hx_tmp31;
HXDLIN( 232)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 232)											_hx_tmp31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            										}
            										else {
HXDLIN( 232)											_hx_tmp31 = blended7;
            										}
HXDLIN( 232)										::iterMagic::Iimg_obj::set(this1->image,location7,_hx_tmp31);
            									}
            								}
            								else {
HXDLIN( 232)									int value3;
HXDLIN( 232)									if (this1->isLittle) {
HXDLIN( 232)										value3 = ((((a29 << 24) | (b33 << 16)) | (g18 << 8)) | r18);
            									}
            									else {
HXDLIN( 232)										value3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
            									}
HXDLIN( 232)									::iterMagic::Iimg_obj::set(this1->image,location7,value3);
            								}
            							}
HXLINE( 751)							found3 = true;
            						}
            						else {
HXDLIN( 232)							if (found3) {
HXDLIN( 232)								goto _hx_goto_432;
            							}
            						}
            					}
            					_hx_goto_432:;
            				}
            			}
            		}
HXDLIN( 232)		 ::pi_xy::algo::HitTri hitTriBottom;
HXDLIN( 232)		if ((hasHit == false)) {
HXDLIN( 232)			 ::pi_xy::algo::HitTri v10 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,px,py,ax1,ay1,dx3,dy3,true);
HXDLIN( 232)			if (hasUndo3) {
HXDLIN( 232)				v10->undoImage = undoImage9;
HXDLIN( 232)				v10->undoX = xIter33->start;
HXDLIN( 232)				v10->undoY = yIter33->start;
            			}
HXDLIN( 232)			hitTriBottom = v10;
            		}
            		else {
HXDLIN( 232)			hitTriBottom = null();
            		}
HXDLIN( 232)		if (hasHit) {
HXDLIN( 232)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(2)->init(0,hitTriTop)->init(1,hitTriBottom));
HXDLIN( 232)			if (::hx::IsNotNull( hitQuad )) {
HXDLIN( 232)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXDLIN( 232)			hitArr->triArr->push(hitQuad->triBCD);
HXDLIN( 232)			return hitArr;
            		}
            		else {
HXDLIN( 232)			return null();
            		}
HXDLIN( 232)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(SoftShape_Impl__obj,arrowBoth,return )

 ::pi_xy::algo::HitTriArray SoftShape_Impl__obj::fixArrow( ::pi_xy::ImageStruct this1,Float px,Float py,Float qx,Float qy,Float arrowWidth,Float arrowHeight,Float thick,int color,::hx::Null< bool >  __o_flare,::hx::Null< bool >  __o_reverseFlare,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_hasHit){
            		bool flare = __o_flare.Default(false);
            		bool reverseFlare = __o_reverseFlare.Default(false);
            		Float soft = __o_soft.Default(((Float)40.));
            		bool hasHit = __o_hasHit.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_249_fixArrow)
HXDLIN( 249)		Float goldenRatio = ((Float)1.61803398875);
HXDLIN( 249)		Float o = (qy - py);
HXDLIN( 249)		Float a = (qx - px);
HXDLIN( 249)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN( 249)		Float theta = ::Math_obj::atan2(o,a);
HXDLIN( 249)		Float thicker;
HXDLIN( 249)		if ((arrowWidth > (thick * ((Float)1.1)))) {
HXDLIN( 249)			thicker = arrowWidth;
            		}
            		else {
HXDLIN( 249)			thicker = ((( (Float)(2) ) * thick) * goldenRatio);
            		}
HXDLIN( 249)		Float sin = ::Math_obj::sin(theta);
HXDLIN( 249)		Float cos = ::Math_obj::cos(theta);
HXDLIN( 249)		Float radius = (thick / ( (Float)(2) ));
HXDLIN( 249)		Float radius2 = (thicker / ( (Float)(2) ));
HXDLIN( 249)		Float h2;
HXDLIN( 249)		if ((arrowHeight < (h * ((Float)1.1)))) {
HXDLIN( 249)			h2 = (h - arrowHeight);
            		}
            		else {
HXDLIN( 249)			h2 = (h / goldenRatio);
            		}
HXDLIN( 249)		 ::pi_xy::algo::HitQuad hitQuad;
HXDLIN( 249)		if (flare) {
HXDLIN( 249)			if (reverseFlare) {
HXDLIN( 249)				Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 249)				Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 249)				Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 249)				Float radius21 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN( 249)				Float dx = ((Float)0.1);
HXDLIN( 249)				Float dy = radius1;
HXDLIN( 249)				Float cx = h2;
HXDLIN( 249)				Float cy = radius21;
HXDLIN( 249)				Float bx = h2;
HXDLIN( 249)				Float by = -(radius21);
HXDLIN( 249)				Float ax = ((Float)0.1);
HXDLIN( 249)				Float ay = -(radius1);
HXDLIN( 249)				Float temp = ((Float)0.);
HXLINE( 288)				temp = (px + ((ax * cos1) - (ay * sin1)));
HXLINE( 289)				ay = (py + ((ay * cos1) + (ax * sin1)));
HXLINE( 290)				ax = temp;
HXLINE( 292)				temp = (px + ((bx * cos1) - (by * sin1)));
HXLINE( 293)				by = (py + ((by * cos1) + (bx * sin1)));
HXLINE( 294)				bx = temp;
HXLINE( 296)				temp = (px + ((cx * cos1) - (cy * sin1)));
HXLINE( 297)				cy = (py + ((cy * cos1) + (cx * sin1)));
HXLINE( 298)				cx = temp;
HXLINE( 300)				temp = (px + ((dx * cos1) - (dy * sin1)));
HXLINE( 301)				dy = (py + ((dy * cos1) + (dx * sin1)));
HXLINE( 302)				dx = temp;
HXLINE( 249)				Float ex = ((((ax + bx) + cx) + dx) / ( (Float)(4) ));
HXDLIN( 249)				Float ey = ((((ay + by) + cy) + dy) / ( (Float)(4) ));
HXDLIN( 249)				bool hasUndo = false;
HXDLIN( 249)				int aA = ((color >> 24) & 255);
HXDLIN( 249)				int rA = ((color >> 16) & 255);
HXDLIN( 249)				int gA = ((color >> 8) & 255);
HXDLIN( 249)				int bA = (color & 255);
HXDLIN( 249)				Float bcx = (ax - bx);
HXDLIN( 249)				Float bcy = (ay - by);
HXDLIN( 249)				Float acx = (ex - bx);
HXDLIN( 249)				Float acy = (ey - by);
HXDLIN( 249)				Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 249)				Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 249)				Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 249)				Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 249)				if ((ex > ax)) {
HXDLIN( 249)					if ((ex > bx)) {
HXDLIN( 249)						int min;
HXDLIN( 249)						if ((ax > bx)) {
HXDLIN( 249)							min = ::Math_obj::floor(bx);
            						}
            						else {
HXDLIN( 249)							min = ::Math_obj::floor(ax);
            						}
HXDLIN( 249)						int ii_min = min;
HXDLIN( 249)						int ii_max = ::Math_obj::ceil(ex);
HXDLIN( 249)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            					}
            					else {
HXDLIN( 249)						int ii_min1 = ::Math_obj::floor(ax);
HXDLIN( 249)						int ii_max1 = ::Math_obj::ceil(bx);
HXDLIN( 249)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            					}
            				}
            				else {
HXDLIN( 249)					if ((ax > bx)) {
HXDLIN( 249)						int min1;
HXDLIN( 249)						if ((ex > bx)) {
HXDLIN( 249)							min1 = ::Math_obj::floor(bx);
            						}
            						else {
HXDLIN( 249)							min1 = ::Math_obj::ceil(ex);
            						}
HXDLIN( 249)						int ii_min2 = min1;
HXDLIN( 249)						int ii_max2 = ::Math_obj::ceil(ax);
HXDLIN( 249)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            					}
            					else {
HXDLIN( 249)						int ii_min3 = ::Math_obj::floor(ex);
HXDLIN( 249)						int ii_max3 = ::Math_obj::ceil(bx);
HXDLIN( 249)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 249)				if ((ey > ay)) {
HXDLIN( 249)					if ((ey > by)) {
HXDLIN( 249)						int min2;
HXDLIN( 249)						if ((ay > by)) {
HXDLIN( 249)							min2 = ::Math_obj::floor(by);
            						}
            						else {
HXDLIN( 249)							min2 = ::Math_obj::floor(ay);
            						}
HXDLIN( 249)						int ii_min4 = min2;
HXDLIN( 249)						int ii_max4 = ::Math_obj::ceil(ey);
HXDLIN( 249)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            					}
            					else {
HXDLIN( 249)						int ii_min5 = ::Math_obj::floor(ay);
HXDLIN( 249)						int ii_max5 = ::Math_obj::ceil(by);
HXDLIN( 249)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            					}
            				}
            				else {
HXDLIN( 249)					if ((ay > by)) {
HXDLIN( 249)						int min3;
HXDLIN( 249)						if ((ey > by)) {
HXDLIN( 249)							min3 = ::Math_obj::floor(by);
            						}
            						else {
HXDLIN( 249)							min3 = ::Math_obj::ceil(ey);
            						}
HXDLIN( 249)						int ii_min6 = min3;
HXDLIN( 249)						int ii_max6 = ::Math_obj::ceil(ay);
HXDLIN( 249)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            					}
            					else {
HXDLIN( 249)						int ii_min7 = ::Math_obj::floor(ey);
HXDLIN( 249)						int ii_max7 = ::Math_obj::ceil(by);
HXDLIN( 249)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 249)				if (hasUndo) {
HXDLIN( 249)					int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 249)					int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 249)					 ::Dynamic imageType = null();
HXDLIN( 249)					 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 249)					if (::hx::IsNull( imageType )) {
HXLINE(  54)						imageType = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 249)					::Dynamic undoImage1;
HXDLIN( 249)					switch((int)(( (int)(imageType) ))){
            						case (int)0: {
HXDLIN( 249)							 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::BytesImg b = byt;
HXDLIN( 249)							{
HXDLIN( 249)								b->width = width;
HXDLIN( 249)								b->height = height;
HXDLIN( 249)								b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 249)								b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 249)								{
HXDLIN( 249)									int len = b->length;
HXDLIN( 249)									int w = 0;
HXDLIN( 249)									{
HXDLIN( 249)										int _g = 0;
HXDLIN( 249)										int _g1 = b->height;
HXDLIN( 249)										while((_g < _g1)){
HXDLIN( 249)											_g = (_g + 1);
HXDLIN( 249)											int y = (_g - 1);
HXDLIN( 249)											{
HXDLIN( 249)												int _g2 = 0;
HXDLIN( 249)												int _g3 = b->width;
HXDLIN( 249)												while((_g2 < _g3)){
HXDLIN( 249)													_g2 = (_g2 + 1);
HXDLIN( 249)													int x = (_g2 - 1);
HXDLIN( 249)													{
HXDLIN( 249)														w = (w + 1);
HXDLIN( 249)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w = (w + 1);
HXDLIN( 249)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w = (w + 1);
HXDLIN( 249)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w = (w + 1);
HXDLIN( 249)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage1 = b;
            						}
            						break;
            						case (int)1: {
HXDLIN( 249)							 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 249)							{
HXDLIN( 249)								a1->width = width;
HXDLIN( 249)								a1->height = height;
HXDLIN( 249)								a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 249)								a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 249)								{
HXDLIN( 249)									int _g4 = 0;
HXDLIN( 249)									int _g5 = a1->length;
HXDLIN( 249)									while((_g4 < _g5)){
HXDLIN( 249)										_g4 = (_g4 + 1);
HXDLIN( 249)										int i = (_g4 - 1);
HXDLIN( 249)										a1->data[i] = 0;
            									}
            								}
            							}
HXDLIN( 249)							undoImage1 = a1;
            						}
            						break;
            						case (int)2: {
HXDLIN( 249)							 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 249)							{
HXDLIN( 249)								b1->width = width;
HXDLIN( 249)								b1->height = height;
HXDLIN( 249)								b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 249)								int size = (b1->length * 4);
HXDLIN( 249)								b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 249)								{
HXDLIN( 249)									int _g6 = 0;
HXDLIN( 249)									int _g7 = b1->length;
HXDLIN( 249)									while((_g6 < _g7)){
HXDLIN( 249)										_g6 = (_g6 + 1);
HXDLIN( 249)										int i1 = (_g6 - 1);
HXDLIN( 249)										{
HXDLIN( 249)											 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN( 249)											bool undoImage2;
HXDLIN( 249)											if ((i1 >= 0)) {
HXDLIN( 249)												undoImage2 = (i1 < (this3->byteLength >> 2));
            											}
            											else {
HXDLIN( 249)												undoImage2 = false;
            											}
HXDLIN( 249)											if (undoImage2) {
HXDLIN( 249)												 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 249)												int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN( 249)												_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 249)												_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this->b[(pos + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage1 = b1;
            						}
            						break;
            						case (int)3: {
HXDLIN( 249)							 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::VecIntImg v = vec;
HXDLIN( 249)							{
HXDLIN( 249)								v->width = width;
HXDLIN( 249)								v->height = height;
HXDLIN( 249)								v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 249)								v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 249)								{
HXDLIN( 249)									int _g8 = 0;
HXDLIN( 249)									int _g9 = v->length;
HXDLIN( 249)									while((_g8 < _g9)){
HXDLIN( 249)										_g8 = (_g8 + 1);
HXDLIN( 249)										int i2 = (_g8 - 1);
HXDLIN( 249)										v->data->__unsafe_set(i2,0);
            									}
            								}
            							}
HXDLIN( 249)							undoImage1 = v;
            						}
            						break;
            						case (int)4: {
HXDLIN( 249)							 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 249)							{
HXDLIN( 249)								b2->width = width;
HXDLIN( 249)								b2->height = height;
HXDLIN( 249)								b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 249)								b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 249)								{
HXDLIN( 249)									int len1 = b2->length;
HXDLIN( 249)									 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 249)									if (::hx::IsNull( d->head )) {
HXDLIN( 249)										int _g10 = 0;
HXDLIN( 249)										int _g11 = len1;
HXDLIN( 249)										while((_g10 < _g11)){
HXDLIN( 249)											_g10 = (_g10 + 1);
HXDLIN( 249)											int i3 = (_g10 - 1);
HXDLIN( 249)											d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            										}
            									}
            									else {
HXDLIN( 249)										int _g12 = 0;
HXDLIN( 249)										int _g13 = len1;
HXDLIN( 249)										while((_g12 < _g13)){
HXDLIN( 249)											_g12 = (_g12 + 1);
HXDLIN( 249)											int i4 = (_g12 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 249)												{
HXDLIN( 249)													int _g14 = 0;
HXDLIN( 249)													int _g15 = i4;
HXDLIN( 249)													while((_g14 < _g15)){
HXDLIN( 249)														_g14 = (_g14 + 1);
HXDLIN( 249)														int i5 = (_g14 - 1);
HXLINE( 345)														prev = l;
HXLINE( 346)														l = l->next;
            													}
            												}
HXLINE( 249)												if (::hx::IsNull( prev )) {
HXDLIN( 249)													b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 249)													l = null();
            												}
            												else {
HXDLIN( 249)													prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 249)													l = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage1 = b2;
            						}
            						break;
            					}
HXDLIN( 249)					this2->image = undoImage1;
HXDLIN( 249)					this2->width = width;
HXDLIN( 249)					this2->height = height;
HXDLIN( 249)					this2->imageType = ( (int)(imageType) );
HXDLIN( 249)					undoImage = this2;
HXDLIN( 249)					{
HXDLIN( 249)						int rectLeft = xIter3->start;
HXDLIN( 249)						int rectTop = yIter3->start;
HXDLIN( 249)						int rectRight = xIter3->max;
HXDLIN( 249)						bool forceClear = false;
HXDLIN( 249)						{
HXDLIN( 249)							int _g16 = rectTop;
HXDLIN( 249)							int _g17 = yIter3->max;
HXDLIN( 249)							while((_g16 < _g17)){
HXDLIN( 249)								_g16 = (_g16 + 1);
HXDLIN( 249)								int dy1 = (_g16 - 1);
HXDLIN( 249)								{
HXDLIN( 249)									int _g18 = rectLeft;
HXDLIN( 249)									int _g19 = rectRight;
HXDLIN( 249)									while((_g18 < _g19)){
HXDLIN( 249)										_g18 = (_g18 + 1);
HXDLIN( 249)										int dx1 = (_g18 - 1);
HXDLIN( 249)										::Dynamic this4 = this1->image;
HXDLIN( 249)										int index;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx1) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											index = ::Std_obj::_hx_int(( (Float)(((dy1 * this1->width) + dx1)) ));
            										}
HXDLIN( 249)										int c = ::iterMagic::Iimg_obj::get(this4,index);
HXDLIN( 249)										int col;
HXDLIN( 249)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)											col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXDLIN( 249)											col = c;
            										}
HXDLIN( 249)										bool hitQuad1;
HXDLIN( 249)										if (this1->useMask) {
HXDLIN( 249)											hitQuad1 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 249)											hitQuad1 = false;
            										}
HXDLIN( 249)										if (hitQuad1) {
HXDLIN( 249)											 ::pi_xy::ImageStruct this5 = this1->mask;
HXDLIN( 249)											::Dynamic this6 = this5->image;
HXDLIN( 249)											int index1;
HXDLIN( 249)											if (this5->useVirtualPos) {
HXDLIN( 249)												index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx1) - this5->virtualX));
            											}
            											else {
HXDLIN( 249)												index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this5->width) + dx1)) ));
            											}
HXDLIN( 249)											int c1 = ::iterMagic::Iimg_obj::get(this6,index1);
HXDLIN( 249)											int v1;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												v1 = c1;
            											}
HXDLIN( 249)											int maskPixel = v1;
HXDLIN( 249)											int this7 = col;
HXDLIN( 249)											if ((maskPixel == 0)) {
HXDLIN( 249)												col = this7;
            											}
            											else {
HXDLIN( 249)												Float m0;
HXDLIN( 249)												int this8 = ((maskPixel >> 24) & 255);
HXDLIN( 249)												if ((this8 == 0)) {
HXDLIN( 249)													m0 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m0 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m1;
HXDLIN( 249)												int this9 = ((maskPixel >> 16) & 255);
HXDLIN( 249)												if ((this9 == 0)) {
HXDLIN( 249)													m1 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m1 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m2;
HXDLIN( 249)												int this10 = ((maskPixel >> 8) & 255);
HXDLIN( 249)												if ((this10 == 0)) {
HXDLIN( 249)													m2 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m2 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m3;
HXDLIN( 249)												int this11 = (maskPixel & 255);
HXDLIN( 249)												if ((this11 == 0)) {
HXDLIN( 249)													m3 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m3 = (( (Float)(this11) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this7 >> 24) & 255)) )));
HXDLIN( 249)												int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this7 >> 16) & 255)) )));
HXDLIN( 249)												int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this7 >> 8) & 255)) )));
HXDLIN( 249)												int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this7 & 255)) )));
HXDLIN( 249)												col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 249)										if ((col != 0)) {
HXDLIN( 249)											int x1 = (dx1 - rectLeft);
HXDLIN( 249)											int y1 = (dy1 - rectTop);
HXDLIN( 249)											int c2 = col;
HXDLIN( 249)											bool hitQuad2;
HXDLIN( 249)											if ((((c2 >> 24) & 255) < 254)) {
HXDLIN( 249)												hitQuad2 = undoImage->transparent;
            											}
            											else {
HXDLIN( 249)												hitQuad2 = false;
            											}
HXDLIN( 249)											if (hitQuad2) {
HXDLIN( 249)												int location;
HXDLIN( 249)												if (undoImage->useVirtualPos) {
HXDLIN( 249)													location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            												}
            												else {
HXDLIN( 249)													location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            												}
HXDLIN( 249)												int this12 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 249)												int this13;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													this13 = ((((((this12 >> 24) & 255) << 24) | ((this12 & 255) << 16)) | (((this12 >> 8) & 255) << 8)) | ((this12 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													this13 = this12;
            												}
HXDLIN( 249)												Float a11;
HXDLIN( 249)												int this14 = ((this13 >> 24) & 255);
HXDLIN( 249)												if ((this14 == 0)) {
HXDLIN( 249)													a11 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a11 = (( (Float)(this14) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r1;
HXDLIN( 249)												int this15 = ((this13 >> 16) & 255);
HXDLIN( 249)												if ((this15 == 0)) {
HXDLIN( 249)													r1 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g1;
HXDLIN( 249)												int this16 = ((this13 >> 8) & 255);
HXDLIN( 249)												if ((this16 == 0)) {
HXDLIN( 249)													g1 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b11;
HXDLIN( 249)												int this17 = (this13 & 255);
HXDLIN( 249)												if ((this17 == 0)) {
HXDLIN( 249)													b11 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a2;
HXDLIN( 249)												int this18 = ((col >> 24) & 255);
HXDLIN( 249)												if ((this18 == 0)) {
HXDLIN( 249)													a2 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a2 = (( (Float)(this18) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r2;
HXDLIN( 249)												int this19 = ((col >> 16) & 255);
HXDLIN( 249)												if ((this19 == 0)) {
HXDLIN( 249)													r2 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g2;
HXDLIN( 249)												int this20 = ((col >> 8) & 255);
HXDLIN( 249)												if ((this20 == 0)) {
HXDLIN( 249)													g2 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b21;
HXDLIN( 249)												int this21 = (col & 255);
HXDLIN( 249)												if ((this21 == 0)) {
HXDLIN( 249)													b21 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 249)												int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 249)												int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 249)												int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 249)												int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 249)												int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 249)												{
HXDLIN( 249)													int hitQuad3;
HXDLIN( 249)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)														hitQuad3 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXDLIN( 249)														hitQuad3 = blended;
            													}
HXDLIN( 249)													::iterMagic::Iimg_obj::set(undoImage->image,location,hitQuad3);
            												}
            											}
            											else {
HXDLIN( 249)												::Dynamic this22 = undoImage->image;
HXDLIN( 249)												int index2;
HXDLIN( 249)												if (undoImage->useVirtualPos) {
HXDLIN( 249)													index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            												}
            												else {
HXDLIN( 249)													index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            												}
HXDLIN( 249)												int hitQuad4;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad4 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad4 = c2;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this22,index2,hitQuad4);
            											}
            										}
            										else {
HXDLIN( 249)											if (forceClear) {
HXDLIN( 249)												::Dynamic this23 = undoImage->image;
HXDLIN( 249)												int x2 = (dx1 - rectLeft);
HXDLIN( 249)												int y2 = (dy1 - rectTop);
HXDLIN( 249)												int index3;
HXDLIN( 249)												if (undoImage->useVirtualPos) {
HXDLIN( 249)													index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            												}
            												else {
HXDLIN( 249)													index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this23,index3,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 249)				bool found = false;
HXDLIN( 249)				{
HXDLIN( 249)					int _g_min = xIter3->start;
HXDLIN( 249)					int _g_max = xIter3->max;
HXDLIN( 249)					while((_g_min < _g_max)){
HXDLIN( 249)						_g_min = (_g_min + 1);
HXDLIN( 249)						int px1 = (_g_min - 1);
HXDLIN( 249)						Float pcx = (( (Float)(px1) ) - bx);
HXLINE( 619)						found = false;
HXLINE( 249)						{
HXDLIN( 249)							int _g_min1 = yIter3->start;
HXDLIN( 249)							int _g_max1 = yIter3->max;
HXDLIN( 249)							while((_g_min1 < _g_max1)){
HXDLIN( 249)								_g_min1 = (_g_min1 + 1);
HXDLIN( 249)								int py1 = (_g_min1 - 1);
HXDLIN( 249)								Float pcy = (( (Float)(py1) ) - by);
HXDLIN( 249)								Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 249)								Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 249)								Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 249)								Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 249)								Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 249)								bool hitQuad5;
HXDLIN( 249)								bool hitQuad6;
HXDLIN( 249)								if ((ratioA >= 0)) {
HXDLIN( 249)									hitQuad6 = (ratioB >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad6 = false;
            								}
HXDLIN( 249)								if (hitQuad6) {
HXDLIN( 249)									hitQuad5 = (ratioC >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad5 = false;
            								}
HXDLIN( 249)								if (hitQuad5) {
HXDLIN( 249)									int i6 = ::Std_obj::_hx_int((( (Float)(aA) ) * (soft * ratioB)));
HXDLIN( 249)									if ((i6 > 255)) {
HXLINE(  24)										i6 = 255;
            									}
HXLINE( 249)									if ((i6 < 0)) {
HXLINE(  25)										i6 = 0;
            									}
HXLINE( 249)									int a5 = i6;
HXDLIN( 249)									int i7 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 249)									if ((i7 > 255)) {
HXLINE(  24)										i7 = 255;
            									}
HXLINE( 249)									if ((i7 < 0)) {
HXLINE(  25)										i7 = 0;
            									}
HXLINE( 249)									int r3 = i7;
HXDLIN( 249)									int i8 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 249)									if ((i8 > 255)) {
HXLINE(  24)										i8 = 255;
            									}
HXLINE( 249)									if ((i8 < 0)) {
HXLINE(  25)										i8 = 0;
            									}
HXLINE( 249)									int g3 = i8;
HXDLIN( 249)									int i9 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 249)									if ((i9 > 255)) {
HXLINE(  24)										i9 = 255;
            									}
HXLINE( 249)									if ((i9 < 0)) {
HXLINE(  25)										i9 = 0;
            									}
HXLINE( 249)									int b4 = i9;
HXDLIN( 249)									{
HXDLIN( 249)										int location1;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											location1 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            										}
HXDLIN( 249)										bool hitQuad7;
HXDLIN( 249)										if (this1->transparent) {
HXDLIN( 249)											hitQuad7 = (a5 < 254);
            										}
            										else {
HXDLIN( 249)											hitQuad7 = false;
            										}
HXDLIN( 249)										if (hitQuad7) {
HXDLIN( 249)											int this24 = ::iterMagic::Iimg_obj::get(this1->image,location1);
HXDLIN( 249)											int old;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												old = ((((((this24 >> 24) & 255) << 24) | ((this24 & 255) << 16)) | (((this24 >> 8) & 255) << 8)) | ((this24 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												old = this24;
            											}
HXDLIN( 249)											int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 249)											Float a12;
HXDLIN( 249)											int this25 = ((old >> 24) & 255);
HXDLIN( 249)											if ((this25 == 0)) {
HXDLIN( 249)												a12 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a12 = (( (Float)(this25) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r11;
HXDLIN( 249)											int this26 = ((old >> 16) & 255);
HXDLIN( 249)											if ((this26 == 0)) {
HXDLIN( 249)												r11 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g11;
HXDLIN( 249)											int this27 = ((old >> 8) & 255);
HXDLIN( 249)											if ((this27 == 0)) {
HXDLIN( 249)												g11 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b12;
HXDLIN( 249)											int this28 = (old & 255);
HXDLIN( 249)											if ((this28 == 0)) {
HXDLIN( 249)												b12 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a21;
HXDLIN( 249)											int this29 = ((rhs >> 24) & 255);
HXDLIN( 249)											if ((this29 == 0)) {
HXDLIN( 249)												a21 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r21;
HXDLIN( 249)											int this30 = ((rhs >> 16) & 255);
HXDLIN( 249)											if ((this30 == 0)) {
HXDLIN( 249)												r21 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g21;
HXDLIN( 249)											int this31 = ((rhs >> 8) & 255);
HXDLIN( 249)											if ((this31 == 0)) {
HXDLIN( 249)												g21 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b22;
HXDLIN( 249)											int this32 = (rhs & 255);
HXDLIN( 249)											if ((this32 == 0)) {
HXDLIN( 249)												b22 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 249)											int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 249)											int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 249)											int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 249)											int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 249)											int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 249)											{
HXDLIN( 249)												int hitQuad8;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad8 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad8 = blended1;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this1->image,location1,hitQuad8);
            											}
            										}
            										else {
HXDLIN( 249)											int value;
HXDLIN( 249)											if (this1->isLittle) {
HXDLIN( 249)												value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            											}
            											else {
HXDLIN( 249)												value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            											}
HXDLIN( 249)											::iterMagic::Iimg_obj::set(this1->image,location1,value);
            										}
            									}
HXLINE( 633)									found = true;
            								}
            								else {
HXDLIN( 249)									if (found) {
HXDLIN( 249)										goto _hx_goto_445;
            									}
            								}
            							}
            							_hx_goto_445:;
            						}
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN( 249)				int v_undoY;
HXDLIN( 249)				int v_undoX;
HXDLIN( 249)				Float v_ty;
HXDLIN( 249)				Float v_tx;
HXDLIN( 249)				Float v_t0;
HXDLIN( 249)				Float v_sy;
HXDLIN( 249)				Float v_sx;
HXDLIN( 249)				Float v_s0;
HXDLIN( 249)				Float v_A;
HXDLIN( 249)				Float ax1 = ex;
HXDLIN( 249)				Float ay1 = ey;
HXDLIN( 249)				 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN( 249)				Float bx1 = ax;
HXDLIN( 249)				Float by1 = ay;
HXDLIN( 249)				Float cx1 = bx;
HXDLIN( 249)				Float cy1 = by;
HXDLIN( 249)				bool adjustWinding = (((((ax1 * by1) - (bx1 * ay1)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay1) - (ax1 * cy1))) > 0);
HXDLIN( 249)				if (!(adjustWinding)) {
HXDLIN( 249)					Float bx_ = bx1;
HXDLIN( 249)					Float by_ = by1;
HXLINE(  24)					bx1 = cx1;
HXLINE(  25)					by1 = cy1;
HXLINE(  26)					cx1 = bx_;
HXLINE(  27)					cy1 = by_;
            				}
HXLINE( 249)				Float v_ax = ax1;
HXDLIN( 249)				Float v_ay = ay1;
HXDLIN( 249)				Float v_bx = bx1;
HXDLIN( 249)				Float v_by = by1;
HXDLIN( 249)				Float v_cx = cx1;
HXDLIN( 249)				Float v_cy = cy1;
HXDLIN( 249)				bool v_preCalculated = true;
HXDLIN( 249)				{
HXDLIN( 249)					v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN( 249)					v_sx = (v_cy - v_ay);
HXDLIN( 249)					v_sy = (v_ax - v_cx);
HXDLIN( 249)					v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN( 249)					v_tx = (v_ay - v_by);
HXDLIN( 249)					v_ty = (v_bx - v_ax);
HXDLIN( 249)					v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN( 249)					Float a7 = v_ax;
HXDLIN( 249)					Float b6 = v_bx;
HXDLIN( 249)					Float c3 = v_cx;
HXDLIN( 249)					if ((a7 > b6)) {
HXDLIN( 249)						if ((a7 > c3)) {
HXDLIN( 249)							int min4;
HXDLIN( 249)							if ((b6 > c3)) {
HXDLIN( 249)								min4 = ::Math_obj::floor(c3);
            							}
            							else {
HXDLIN( 249)								min4 = ::Math_obj::floor(b6);
            							}
HXDLIN( 249)							int ii_min8 = min4;
HXDLIN( 249)							int ii_max8 = ::Math_obj::ceil(a7);
HXDLIN( 249)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            						}
            						else {
HXDLIN( 249)							int ii_min9 = ::Math_obj::floor(b6);
HXDLIN( 249)							int ii_max9 = ::Math_obj::ceil(c3);
HXDLIN( 249)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            						}
            					}
            					else {
HXDLIN( 249)						if ((b6 > c3)) {
HXDLIN( 249)							int min5;
HXDLIN( 249)							if ((a7 > c3)) {
HXDLIN( 249)								min5 = ::Math_obj::floor(c3);
            							}
            							else {
HXDLIN( 249)								min5 = ::Math_obj::ceil(a7);
            							}
HXDLIN( 249)							int ii_min10 = min5;
HXDLIN( 249)							int ii_max10 = ::Math_obj::ceil(b6);
HXDLIN( 249)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            						}
            						else {
HXDLIN( 249)							int ii_min11 = ::Math_obj::floor(a7);
HXDLIN( 249)							int ii_max11 = ::Math_obj::ceil(c3);
HXDLIN( 249)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            						}
            					}
HXDLIN( 249)					Float a8 = v_ay;
HXDLIN( 249)					Float b7 = v_by;
HXDLIN( 249)					Float c4 = v_cy;
HXDLIN( 249)					if ((a8 > b7)) {
HXDLIN( 249)						if ((a8 > c4)) {
HXDLIN( 249)							int min6;
HXDLIN( 249)							if ((b7 > c4)) {
HXDLIN( 249)								min6 = ::Math_obj::floor(c4);
            							}
            							else {
HXDLIN( 249)								min6 = ::Math_obj::floor(b7);
            							}
HXDLIN( 249)							int ii_min12 = min6;
HXDLIN( 249)							int ii_max12 = ::Math_obj::ceil(a8);
HXDLIN( 249)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            						}
            						else {
HXDLIN( 249)							int ii_min13 = ::Math_obj::floor(b7);
HXDLIN( 249)							int ii_max13 = ::Math_obj::ceil(c4);
HXDLIN( 249)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            						}
            					}
            					else {
HXDLIN( 249)						if ((b7 > c4)) {
HXDLIN( 249)							int min7;
HXDLIN( 249)							if ((a8 > c4)) {
HXDLIN( 249)								min7 = ::Math_obj::floor(c4);
            							}
            							else {
HXDLIN( 249)								min7 = ::Math_obj::ceil(a8);
            							}
HXDLIN( 249)							int ii_min14 = min7;
HXDLIN( 249)							int ii_max14 = ::Math_obj::ceil(b7);
HXDLIN( 249)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            						}
            						else {
HXDLIN( 249)							int ii_min15 = ::Math_obj::floor(a8);
HXDLIN( 249)							int ii_max15 = ::Math_obj::ceil(c4);
HXDLIN( 249)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            						}
            					}
            				}
HXDLIN( 249)				if (hasUndo) {
HXDLIN( 249)					v_undoImage = undoImage;
HXDLIN( 249)					v_undoX = xIter3->start;
HXDLIN( 249)					v_undoY = yIter3->start;
            				}
HXDLIN( 249)				{
HXDLIN( 249)					Float bx2 = bx;
HXDLIN( 249)					Float by2 = by;
HXDLIN( 249)					Float cx2 = cx;
HXDLIN( 249)					Float cy2 = cy;
HXDLIN( 249)					bool hasUndo1 = false;
HXDLIN( 249)					bool adjustWinding1 = (((((ex * by2) - (bx2 * ey)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ey) - (ex * cy2))) > 0);
HXDLIN( 249)					if (!(adjustWinding1)) {
HXDLIN( 249)						Float bx_1 = bx2;
HXDLIN( 249)						Float by_1 = by2;
HXLINE(  25)						bx2 = cx2;
HXLINE(  26)						by2 = cy2;
HXLINE(  27)						cx2 = bx_1;
HXLINE(  28)						cy2 = by_1;
            					}
HXLINE( 249)					{
HXDLIN( 249)						Float s0 = ((ey * cx2) - (ex * cy2));
HXDLIN( 249)						Float sx = (cy2 - ey);
HXDLIN( 249)						Float sy = (ex - cx2);
HXDLIN( 249)						Float t0 = ((ex * by2) - (ey * bx2));
HXDLIN( 249)						Float tx = (ey - by2);
HXDLIN( 249)						Float ty = (bx2 - ex);
HXDLIN( 249)						Float A = ((((-(by2) * cx2) + (ey * (-(bx2) + cx2))) + (ex * (by2 - cy2))) + (bx2 * cy2));
HXDLIN( 249)						 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 249)						if ((ex > bx2)) {
HXDLIN( 249)							if ((ex > cx2)) {
HXDLIN( 249)								int min8;
HXDLIN( 249)								if ((bx2 > cx2)) {
HXDLIN( 249)									min8 = ::Math_obj::floor(cx2);
            								}
            								else {
HXDLIN( 249)									min8 = ::Math_obj::floor(bx2);
            								}
HXDLIN( 249)								int ii_min16 = min8;
HXDLIN( 249)								int ii_max16 = ::Math_obj::ceil(ex);
HXDLIN( 249)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            							}
            							else {
HXDLIN( 249)								int ii_min17 = ::Math_obj::floor(bx2);
HXDLIN( 249)								int ii_max17 = ::Math_obj::ceil(cx2);
HXDLIN( 249)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            							}
            						}
            						else {
HXDLIN( 249)							if ((bx2 > cx2)) {
HXDLIN( 249)								int min9;
HXDLIN( 249)								if ((ex > cx2)) {
HXDLIN( 249)									min9 = ::Math_obj::floor(cx2);
            								}
            								else {
HXDLIN( 249)									min9 = ::Math_obj::ceil(ex);
            								}
HXDLIN( 249)								int ii_min18 = min9;
HXDLIN( 249)								int ii_max18 = ::Math_obj::ceil(bx2);
HXDLIN( 249)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            							}
            							else {
HXDLIN( 249)								int ii_min19 = ::Math_obj::floor(ex);
HXDLIN( 249)								int ii_max19 = ::Math_obj::ceil(cx2);
HXDLIN( 249)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            							}
            						}
HXDLIN( 249)						 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 249)						if ((ey > by2)) {
HXDLIN( 249)							if ((ey > cy2)) {
HXDLIN( 249)								int min10;
HXDLIN( 249)								if ((by2 > cy2)) {
HXDLIN( 249)									min10 = ::Math_obj::floor(cy2);
            								}
            								else {
HXDLIN( 249)									min10 = ::Math_obj::floor(by2);
            								}
HXDLIN( 249)								int ii_min20 = min10;
HXDLIN( 249)								int ii_max20 = ::Math_obj::ceil(ey);
HXDLIN( 249)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            							}
            							else {
HXDLIN( 249)								int ii_min21 = ::Math_obj::floor(by2);
HXDLIN( 249)								int ii_max21 = ::Math_obj::ceil(cy2);
HXDLIN( 249)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            							}
            						}
            						else {
HXDLIN( 249)							if ((by2 > cy2)) {
HXDLIN( 249)								int min11;
HXDLIN( 249)								if ((ey > cy2)) {
HXDLIN( 249)									min11 = ::Math_obj::floor(cy2);
            								}
            								else {
HXDLIN( 249)									min11 = ::Math_obj::ceil(ey);
            								}
HXDLIN( 249)								int ii_min22 = min11;
HXDLIN( 249)								int ii_max22 = ::Math_obj::ceil(by2);
HXDLIN( 249)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            							}
            							else {
HXDLIN( 249)								int ii_min23 = ::Math_obj::floor(ey);
HXDLIN( 249)								int ii_max23 = ::Math_obj::ceil(cy2);
HXDLIN( 249)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            							}
            						}
HXDLIN( 249)						 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 249)						if (hasUndo1) {
HXDLIN( 249)							int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 249)							int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 249)							 ::Dynamic imageType1 = null();
HXDLIN( 249)							 ::pi_xy::ImageStruct this33 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 249)							if (::hx::IsNull( imageType1 )) {
HXLINE(  54)								imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE( 249)							::Dynamic undoImage4;
HXDLIN( 249)							switch((int)(( (int)(imageType1) ))){
            								case (int)0: {
HXDLIN( 249)									 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 249)									 ::iterMagic::BytesImg b8 = byt1;
HXDLIN( 249)									{
HXDLIN( 249)										b8->width = width1;
HXDLIN( 249)										b8->height = height1;
HXDLIN( 249)										b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 249)										b8->data = ::haxe::io::Bytes_obj::alloc((b8->length * 4));
HXDLIN( 249)										{
HXDLIN( 249)											int len2 = b8->length;
HXDLIN( 249)											int w1 = 0;
HXDLIN( 249)											{
HXDLIN( 249)												int _g20 = 0;
HXDLIN( 249)												int _g21 = b8->height;
HXDLIN( 249)												while((_g20 < _g21)){
HXDLIN( 249)													_g20 = (_g20 + 1);
HXDLIN( 249)													int y3 = (_g20 - 1);
HXDLIN( 249)													{
HXDLIN( 249)														int _g22 = 0;
HXDLIN( 249)														int _g23 = b8->width;
HXDLIN( 249)														while((_g22 < _g23)){
HXDLIN( 249)															_g22 = (_g22 + 1);
HXDLIN( 249)															int x3 = (_g22 - 1);
HXDLIN( 249)															{
HXDLIN( 249)																w1 = (w1 + 1);
HXDLIN( 249)																b8->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 249)															{
HXDLIN( 249)																w1 = (w1 + 1);
HXDLIN( 249)																b8->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 249)															{
HXDLIN( 249)																w1 = (w1 + 1);
HXDLIN( 249)																b8->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 249)															{
HXDLIN( 249)																w1 = (w1 + 1);
HXDLIN( 249)																b8->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 249)									undoImage4 = b8;
            								}
            								break;
            								case (int)1: {
HXDLIN( 249)									 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)									 ::iterMagic::ArrIntImg a9 = arrI1;
HXDLIN( 249)									{
HXDLIN( 249)										a9->width = width1;
HXDLIN( 249)										a9->height = height1;
HXDLIN( 249)										a9->data = ::Array_obj< int >::__new(0);
HXDLIN( 249)										a9->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 249)										{
HXDLIN( 249)											int _g24 = 0;
HXDLIN( 249)											int _g25 = a9->length;
HXDLIN( 249)											while((_g24 < _g25)){
HXDLIN( 249)												_g24 = (_g24 + 1);
HXDLIN( 249)												int i10 = (_g24 - 1);
HXDLIN( 249)												a9->data[i10] = 0;
            											}
            										}
            									}
HXDLIN( 249)									undoImage4 = a9;
            								}
            								break;
            								case (int)2: {
HXDLIN( 249)									 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 249)									 ::iterMagic::U32ArrImg b9 = u32a1;
HXDLIN( 249)									{
HXDLIN( 249)										b9->width = width1;
HXDLIN( 249)										b9->height = height1;
HXDLIN( 249)										b9->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 249)										int size1 = (b9->length * 4);
HXDLIN( 249)										b9->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 249)										{
HXDLIN( 249)											int _g26 = 0;
HXDLIN( 249)											int _g27 = b9->length;
HXDLIN( 249)											while((_g26 < _g27)){
HXDLIN( 249)												_g26 = (_g26 + 1);
HXDLIN( 249)												int i11 = (_g26 - 1);
HXDLIN( 249)												{
HXDLIN( 249)													 ::haxe::io::ArrayBufferViewImpl this34 = b9->data;
HXDLIN( 249)													bool undoImage5;
HXDLIN( 249)													if ((i11 >= 0)) {
HXDLIN( 249)														undoImage5 = (i11 < (this34->byteLength >> 2));
            													}
            													else {
HXDLIN( 249)														undoImage5 = false;
            													}
HXDLIN( 249)													if (undoImage5) {
HXDLIN( 249)														 ::haxe::io::Bytes _this1 = this34->bytes;
HXDLIN( 249)														int pos1 = ((i11 << 2) + this34->byteOffset);
HXDLIN( 249)														_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 249)														_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 249)														_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 249)														_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN( 249)									undoImage4 = b9;
            								}
            								break;
            								case (int)3: {
HXDLIN( 249)									 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)									 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 249)									{
HXDLIN( 249)										v2->width = width1;
HXDLIN( 249)										v2->height = height1;
HXDLIN( 249)										v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 249)										v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 249)										{
HXDLIN( 249)											int _g28 = 0;
HXDLIN( 249)											int _g29 = v2->length;
HXDLIN( 249)											while((_g28 < _g29)){
HXDLIN( 249)												_g28 = (_g28 + 1);
HXDLIN( 249)												int i12 = (_g28 - 1);
HXDLIN( 249)												v2->data->__unsafe_set(i12,0);
            											}
            										}
            									}
HXDLIN( 249)									undoImage4 = v2;
            								}
            								break;
            								case (int)4: {
HXDLIN( 249)									 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)									 ::iterMagic::StackIntImg b10 = sInt1;
HXDLIN( 249)									{
HXDLIN( 249)										b10->width = width1;
HXDLIN( 249)										b10->height = height1;
HXDLIN( 249)										b10->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 249)										b10->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 249)										{
HXDLIN( 249)											int len3 = b10->length;
HXDLIN( 249)											 ::haxe::ds::GenericStack_Int d1 = b10->data;
HXDLIN( 249)											if (::hx::IsNull( d1->head )) {
HXDLIN( 249)												int _g30 = 0;
HXDLIN( 249)												int _g31 = len3;
HXDLIN( 249)												while((_g30 < _g31)){
HXDLIN( 249)													_g30 = (_g30 + 1);
HXDLIN( 249)													int i13 = (_g30 - 1);
HXDLIN( 249)													d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            												}
            											}
            											else {
HXDLIN( 249)												int _g32 = 0;
HXDLIN( 249)												int _g33 = len3;
HXDLIN( 249)												while((_g32 < _g33)){
HXDLIN( 249)													_g32 = (_g32 + 1);
HXDLIN( 249)													int i14 = (_g32 - 1);
HXDLIN( 249)													{
HXDLIN( 249)														 ::haxe::ds::GenericCell_Int l1 = b10->data->head;
HXDLIN( 249)														 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 249)														{
HXDLIN( 249)															int _g34 = 0;
HXDLIN( 249)															int _g35 = i14;
HXDLIN( 249)															while((_g34 < _g35)){
HXDLIN( 249)																_g34 = (_g34 + 1);
HXDLIN( 249)																int i15 = (_g34 - 1);
HXLINE( 345)																prev1 = l1;
HXLINE( 346)																l1 = l1->next;
            															}
            														}
HXLINE( 249)														if (::hx::IsNull( prev1 )) {
HXDLIN( 249)															b10->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 249)															l1 = null();
            														}
            														else {
HXDLIN( 249)															prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 249)															l1 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 249)									undoImage4 = b10;
            								}
            								break;
            							}
HXDLIN( 249)							this33->image = undoImage4;
HXDLIN( 249)							this33->width = width1;
HXDLIN( 249)							this33->height = height1;
HXDLIN( 249)							this33->imageType = ( (int)(imageType1) );
HXDLIN( 249)							undoImage3 = this33;
HXDLIN( 249)							{
HXDLIN( 249)								int rectLeft1 = xIter31->start;
HXDLIN( 249)								int rectTop1 = yIter31->start;
HXDLIN( 249)								int rectRight1 = xIter31->max;
HXDLIN( 249)								bool forceClear1 = false;
HXDLIN( 249)								{
HXDLIN( 249)									int _g36 = rectTop1;
HXDLIN( 249)									int _g37 = yIter31->max;
HXDLIN( 249)									while((_g36 < _g37)){
HXDLIN( 249)										_g36 = (_g36 + 1);
HXDLIN( 249)										int dy2 = (_g36 - 1);
HXDLIN( 249)										{
HXDLIN( 249)											int _g38 = rectLeft1;
HXDLIN( 249)											int _g39 = rectRight1;
HXDLIN( 249)											while((_g38 < _g39)){
HXDLIN( 249)												_g38 = (_g38 + 1);
HXDLIN( 249)												int dx2 = (_g38 - 1);
HXDLIN( 249)												::Dynamic this35 = this1->image;
HXDLIN( 249)												int index4;
HXDLIN( 249)												if (this1->useVirtualPos) {
HXDLIN( 249)													index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx2) - this1->virtualX));
            												}
            												else {
HXDLIN( 249)													index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * this1->width) + dx2)) ));
            												}
HXDLIN( 249)												int c5 = ::iterMagic::Iimg_obj::get(this35,index4);
HXDLIN( 249)												int col1;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													col1 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													col1 = c5;
            												}
HXDLIN( 249)												bool hitQuad9;
HXDLIN( 249)												if (this1->useMask) {
HXDLIN( 249)													hitQuad9 = ::hx::IsNotNull( this1->mask );
            												}
            												else {
HXDLIN( 249)													hitQuad9 = false;
            												}
HXDLIN( 249)												if (hitQuad9) {
HXDLIN( 249)													 ::pi_xy::ImageStruct this36 = this1->mask;
HXDLIN( 249)													::Dynamic this37 = this36->image;
HXDLIN( 249)													int index5;
HXDLIN( 249)													if (this36->useVirtualPos) {
HXDLIN( 249)														index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this36->virtualY) * ( (Float)(this36->width) )) + dx2) - this36->virtualX));
            													}
            													else {
HXDLIN( 249)														index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this36->width) + dx2)) ));
            													}
HXDLIN( 249)													int c6 = ::iterMagic::Iimg_obj::get(this37,index5);
HXDLIN( 249)													int v3;
HXDLIN( 249)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)														v3 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            													}
            													else {
HXDLIN( 249)														v3 = c6;
            													}
HXDLIN( 249)													int maskPixel1 = v3;
HXDLIN( 249)													int this38 = col1;
HXDLIN( 249)													if ((maskPixel1 == 0)) {
HXDLIN( 249)														col1 = this38;
            													}
            													else {
HXDLIN( 249)														Float m01;
HXDLIN( 249)														int this39 = ((maskPixel1 >> 24) & 255);
HXDLIN( 249)														if ((this39 == 0)) {
HXDLIN( 249)															m01 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															m01 = (( (Float)(this39) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float m11;
HXDLIN( 249)														int this40 = ((maskPixel1 >> 16) & 255);
HXDLIN( 249)														if ((this40 == 0)) {
HXDLIN( 249)															m11 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															m11 = (( (Float)(this40) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float m21;
HXDLIN( 249)														int this41 = ((maskPixel1 >> 8) & 255);
HXDLIN( 249)														if ((this41 == 0)) {
HXDLIN( 249)															m21 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															m21 = (( (Float)(this41) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float m31;
HXDLIN( 249)														int this42 = (maskPixel1 & 255);
HXDLIN( 249)														if ((this42 == 0)) {
HXDLIN( 249)															m31 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															m31 = (( (Float)(this42) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this38 >> 24) & 255)) )));
HXDLIN( 249)														int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this38 >> 16) & 255)) )));
HXDLIN( 249)														int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this38 >> 8) & 255)) )));
HXDLIN( 249)														int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this38 & 255)) )));
HXDLIN( 249)														col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 249)												if ((col1 != 0)) {
HXDLIN( 249)													int x4 = (dx2 - rectLeft1);
HXDLIN( 249)													int y4 = (dy2 - rectTop1);
HXDLIN( 249)													int c7 = col1;
HXDLIN( 249)													bool hitQuad10;
HXDLIN( 249)													if ((((c7 >> 24) & 255) < 254)) {
HXDLIN( 249)														hitQuad10 = undoImage3->transparent;
            													}
            													else {
HXDLIN( 249)														hitQuad10 = false;
            													}
HXDLIN( 249)													if (hitQuad10) {
HXDLIN( 249)														int location2;
HXDLIN( 249)														if (undoImage3->useVirtualPos) {
HXDLIN( 249)															location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            														}
            														else {
HXDLIN( 249)															location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            														}
HXDLIN( 249)														int this43 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 249)														int this44;
HXDLIN( 249)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)															this44 = ((((((this43 >> 24) & 255) << 24) | ((this43 & 255) << 16)) | (((this43 >> 8) & 255) << 8)) | ((this43 >> 16) & 255));
            														}
            														else {
HXDLIN( 249)															this44 = this43;
            														}
HXDLIN( 249)														Float a13;
HXDLIN( 249)														int this45 = ((this44 >> 24) & 255);
HXDLIN( 249)														if ((this45 == 0)) {
HXDLIN( 249)															a13 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															a13 = (( (Float)(this45) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float r12;
HXDLIN( 249)														int this46 = ((this44 >> 16) & 255);
HXDLIN( 249)														if ((this46 == 0)) {
HXDLIN( 249)															r12 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															r12 = (( (Float)(this46) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float g12;
HXDLIN( 249)														int this47 = ((this44 >> 8) & 255);
HXDLIN( 249)														if ((this47 == 0)) {
HXDLIN( 249)															g12 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															g12 = (( (Float)(this47) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float b13;
HXDLIN( 249)														int this48 = (this44 & 255);
HXDLIN( 249)														if ((this48 == 0)) {
HXDLIN( 249)															b13 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															b13 = (( (Float)(this48) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float a22;
HXDLIN( 249)														int this49 = ((col1 >> 24) & 255);
HXDLIN( 249)														if ((this49 == 0)) {
HXDLIN( 249)															a22 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															a22 = (( (Float)(this49) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float r22;
HXDLIN( 249)														int this50 = ((col1 >> 16) & 255);
HXDLIN( 249)														if ((this50 == 0)) {
HXDLIN( 249)															r22 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															r22 = (( (Float)(this50) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float g22;
HXDLIN( 249)														int this51 = ((col1 >> 8) & 255);
HXDLIN( 249)														if ((this51 == 0)) {
HXDLIN( 249)															g22 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															g22 = (( (Float)(this51) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float b23;
HXDLIN( 249)														int this52 = (col1 & 255);
HXDLIN( 249)														if ((this52 == 0)) {
HXDLIN( 249)															b23 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															b23 = (( (Float)(this52) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 249)														int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 249)														int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 249)														int b14 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 249)														int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 249)														int blended2 = ((((a10 << 24) | (r5 << 16)) | (g5 << 8)) | b14);
HXDLIN( 249)														{
HXDLIN( 249)															int hitQuad11;
HXDLIN( 249)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)																hitQuad11 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            															}
            															else {
HXDLIN( 249)																hitQuad11 = blended2;
            															}
HXDLIN( 249)															::iterMagic::Iimg_obj::set(undoImage3->image,location2,hitQuad11);
            														}
            													}
            													else {
HXDLIN( 249)														::Dynamic this53 = undoImage3->image;
HXDLIN( 249)														int index6;
HXDLIN( 249)														if (undoImage3->useVirtualPos) {
HXDLIN( 249)															index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            														}
            														else {
HXDLIN( 249)															index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            														}
HXDLIN( 249)														int hitQuad12;
HXDLIN( 249)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)															hitQuad12 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            														}
            														else {
HXDLIN( 249)															hitQuad12 = c7;
            														}
HXDLIN( 249)														::iterMagic::Iimg_obj::set(this53,index6,hitQuad12);
            													}
            												}
            												else {
HXDLIN( 249)													if (forceClear1) {
HXDLIN( 249)														::Dynamic this54 = undoImage3->image;
HXDLIN( 249)														int x5 = (dx2 - rectLeft1);
HXDLIN( 249)														int y5 = (dy2 - rectTop1);
HXDLIN( 249)														int index7;
HXDLIN( 249)														if (undoImage3->useVirtualPos) {
HXDLIN( 249)															index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            														}
            														else {
HXDLIN( 249)															index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            														}
HXDLIN( 249)														::iterMagic::Iimg_obj::set(this54,index7,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 249)						bool found1 = false;
HXDLIN( 249)						Float s = ((Float)0.);
HXDLIN( 249)						Float t = ((Float)0.);
HXDLIN( 249)						Float sxx = ((Float)0.);
HXDLIN( 249)						Float txx = ((Float)0.);
HXDLIN( 249)						{
HXDLIN( 249)							int _g_min2 = xIter31->start;
HXDLIN( 249)							int _g_max2 = xIter31->max;
HXDLIN( 249)							while((_g_min2 < _g_max2)){
HXDLIN( 249)								_g_min2 = (_g_min2 + 1);
HXDLIN( 249)								int x6 = (_g_min2 - 1);
HXLINE(  60)								sxx = (sx * ( (Float)(x6) ));
HXLINE(  61)								txx = (tx * ( (Float)(x6) ));
HXLINE(  62)								found1 = false;
HXLINE( 249)								{
HXDLIN( 249)									int _g_min3 = yIter31->start;
HXDLIN( 249)									int _g_max3 = yIter31->max;
HXDLIN( 249)									while((_g_min3 < _g_max3)){
HXDLIN( 249)										_g_min3 = (_g_min3 + 1);
HXDLIN( 249)										int y6 = (_g_min3 - 1);
HXLINE(  64)										s = ((s0 + sxx) + (sy * ( (Float)(y6) )));
HXLINE(  65)										t = ((t0 + txx) + (ty * ( (Float)(y6) )));
HXLINE( 249)										bool hitQuad13;
HXDLIN( 249)										if (!((s <= 0))) {
HXDLIN( 249)											hitQuad13 = (t <= 0);
            										}
            										else {
HXDLIN( 249)											hitQuad13 = true;
            										}
HXDLIN( 249)										if (hitQuad13) {
HXDLIN( 249)											if (found1) {
HXDLIN( 249)												goto _hx_goto_457;
            											}
            										}
            										else {
HXDLIN( 249)											if (((s + t) < A)) {
HXDLIN( 249)												{
HXDLIN( 249)													int c8 = color;
HXDLIN( 249)													bool hitQuad14;
HXDLIN( 249)													if ((((c8 >> 24) & 255) < 254)) {
HXDLIN( 249)														hitQuad14 = this1->transparent;
            													}
            													else {
HXDLIN( 249)														hitQuad14 = false;
            													}
HXDLIN( 249)													if (hitQuad14) {
HXDLIN( 249)														int location3;
HXDLIN( 249)														if (this1->useVirtualPos) {
HXDLIN( 249)															location3 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - this1->virtualY) * ( (Float)(this1->width) )) + x6) - this1->virtualX));
            														}
            														else {
HXDLIN( 249)															location3 = ::Std_obj::_hx_int(( (Float)(((y6 * this1->width) + x6)) ));
            														}
HXDLIN( 249)														int this55 = ::iterMagic::Iimg_obj::get(this1->image,location3);
HXDLIN( 249)														int this56;
HXDLIN( 249)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)															this56 = ((((((this55 >> 24) & 255) << 24) | ((this55 & 255) << 16)) | (((this55 >> 8) & 255) << 8)) | ((this55 >> 16) & 255));
            														}
            														else {
HXDLIN( 249)															this56 = this55;
            														}
HXDLIN( 249)														Float a14;
HXDLIN( 249)														int this57 = ((this56 >> 24) & 255);
HXDLIN( 249)														if ((this57 == 0)) {
HXDLIN( 249)															a14 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															a14 = (( (Float)(this57) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float r13;
HXDLIN( 249)														int this58 = ((this56 >> 16) & 255);
HXDLIN( 249)														if ((this58 == 0)) {
HXDLIN( 249)															r13 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															r13 = (( (Float)(this58) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float g13;
HXDLIN( 249)														int this59 = ((this56 >> 8) & 255);
HXDLIN( 249)														if ((this59 == 0)) {
HXDLIN( 249)															g13 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															g13 = (( (Float)(this59) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float b15;
HXDLIN( 249)														int this60 = (this56 & 255);
HXDLIN( 249)														if ((this60 == 0)) {
HXDLIN( 249)															b15 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															b15 = (( (Float)(this60) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float a23;
HXDLIN( 249)														int this61 = ((color >> 24) & 255);
HXDLIN( 249)														if ((this61 == 0)) {
HXDLIN( 249)															a23 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															a23 = (( (Float)(this61) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float r23;
HXDLIN( 249)														int this62 = ((color >> 16) & 255);
HXDLIN( 249)														if ((this62 == 0)) {
HXDLIN( 249)															r23 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															r23 = (( (Float)(this62) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float g23;
HXDLIN( 249)														int this63 = ((color >> 8) & 255);
HXDLIN( 249)														if ((this63 == 0)) {
HXDLIN( 249)															g23 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															g23 = (( (Float)(this63) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float b24;
HXDLIN( 249)														int this64 = (color & 255);
HXDLIN( 249)														if ((this64 == 0)) {
HXDLIN( 249)															b24 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															b24 = (( (Float)(this64) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 249)														int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 249)														int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 249)														int b16 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a33) + (b24 * a23))));
HXDLIN( 249)														int a15 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 249)														int blended3 = ((((a15 << 24) | (r6 << 16)) | (g6 << 8)) | b16);
HXDLIN( 249)														{
HXDLIN( 249)															int hitQuad15;
HXDLIN( 249)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)																hitQuad15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            															}
            															else {
HXDLIN( 249)																hitQuad15 = blended3;
            															}
HXDLIN( 249)															::iterMagic::Iimg_obj::set(this1->image,location3,hitQuad15);
            														}
            													}
            													else {
HXDLIN( 249)														::Dynamic this65 = this1->image;
HXDLIN( 249)														int index8;
HXDLIN( 249)														if (this1->useVirtualPos) {
HXDLIN( 249)															index8 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - this1->virtualY) * ( (Float)(this1->width) )) + x6) - this1->virtualX));
            														}
            														else {
HXDLIN( 249)															index8 = ::Std_obj::_hx_int(( (Float)(((y6 * this1->width) + x6)) ));
            														}
HXDLIN( 249)														int hitQuad16;
HXDLIN( 249)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)															hitQuad16 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            														}
            														else {
HXDLIN( 249)															hitQuad16 = c8;
            														}
HXDLIN( 249)														::iterMagic::Iimg_obj::set(this65,index8,hitQuad16);
            													}
            												}
HXLINE(  73)												found1 = true;
            											}
            											else {
HXDLIN( 249)												if (found1) {
HXDLIN( 249)													goto _hx_goto_457;
            												}
            											}
            										}
            									}
            									_hx_goto_457:;
            								}
            							}
            						}
            					}
            				}
HXDLIN( 249)				bool hasUndo2 = false;
HXDLIN( 249)				int aA1 = ((color >> 24) & 255);
HXDLIN( 249)				int rA1 = ((color >> 16) & 255);
HXDLIN( 249)				int gA1 = ((color >> 8) & 255);
HXDLIN( 249)				int bA1 = (color & 255);
HXDLIN( 249)				Float bcx1 = (cx - dx);
HXDLIN( 249)				Float bcy1 = (cy - dy);
HXDLIN( 249)				Float acx1 = (ex - dx);
HXDLIN( 249)				Float acy1 = (ey - dy);
HXDLIN( 249)				Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 249)				Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 249)				Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 249)				Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 249)				if ((ex > cx)) {
HXDLIN( 249)					if ((ex > dx)) {
HXDLIN( 249)						int min12;
HXDLIN( 249)						if ((cx > dx)) {
HXDLIN( 249)							min12 = ::Math_obj::floor(dx);
            						}
            						else {
HXDLIN( 249)							min12 = ::Math_obj::floor(cx);
            						}
HXDLIN( 249)						int ii_min24 = min12;
HXDLIN( 249)						int ii_max24 = ::Math_obj::ceil(ex);
HXDLIN( 249)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            					}
            					else {
HXDLIN( 249)						int ii_min25 = ::Math_obj::floor(cx);
HXDLIN( 249)						int ii_max25 = ::Math_obj::ceil(dx);
HXDLIN( 249)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            					}
            				}
            				else {
HXDLIN( 249)					if ((cx > dx)) {
HXDLIN( 249)						int min13;
HXDLIN( 249)						if ((ex > dx)) {
HXDLIN( 249)							min13 = ::Math_obj::floor(dx);
            						}
            						else {
HXDLIN( 249)							min13 = ::Math_obj::ceil(ex);
            						}
HXDLIN( 249)						int ii_min26 = min13;
HXDLIN( 249)						int ii_max26 = ::Math_obj::ceil(cx);
HXDLIN( 249)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            					}
            					else {
HXDLIN( 249)						int ii_min27 = ::Math_obj::floor(ex);
HXDLIN( 249)						int ii_max27 = ::Math_obj::ceil(dx);
HXDLIN( 249)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 249)				if ((ey > cy)) {
HXDLIN( 249)					if ((ey > dy)) {
HXDLIN( 249)						int min14;
HXDLIN( 249)						if ((cy > dy)) {
HXDLIN( 249)							min14 = ::Math_obj::floor(dy);
            						}
            						else {
HXDLIN( 249)							min14 = ::Math_obj::floor(cy);
            						}
HXDLIN( 249)						int ii_min28 = min14;
HXDLIN( 249)						int ii_max28 = ::Math_obj::ceil(ey);
HXDLIN( 249)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            					}
            					else {
HXDLIN( 249)						int ii_min29 = ::Math_obj::floor(cy);
HXDLIN( 249)						int ii_max29 = ::Math_obj::ceil(dy);
HXDLIN( 249)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            					}
            				}
            				else {
HXDLIN( 249)					if ((cy > dy)) {
HXDLIN( 249)						int min15;
HXDLIN( 249)						if ((ey > dy)) {
HXDLIN( 249)							min15 = ::Math_obj::floor(dy);
            						}
            						else {
HXDLIN( 249)							min15 = ::Math_obj::ceil(ey);
            						}
HXDLIN( 249)						int ii_min30 = min15;
HXDLIN( 249)						int ii_max30 = ::Math_obj::ceil(cy);
HXDLIN( 249)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            					}
            					else {
HXDLIN( 249)						int ii_min31 = ::Math_obj::floor(ey);
HXDLIN( 249)						int ii_max31 = ::Math_obj::ceil(dy);
HXDLIN( 249)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 249)				if (hasUndo2) {
HXDLIN( 249)					int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 249)					int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 249)					 ::Dynamic imageType2 = null();
HXDLIN( 249)					 ::pi_xy::ImageStruct this66 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 249)					if (::hx::IsNull( imageType2 )) {
HXLINE(  54)						imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 249)					::Dynamic undoImage7;
HXDLIN( 249)					switch((int)(( (int)(imageType2) ))){
            						case (int)0: {
HXDLIN( 249)							 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::BytesImg b17 = byt2;
HXDLIN( 249)							{
HXDLIN( 249)								b17->width = width2;
HXDLIN( 249)								b17->height = height2;
HXDLIN( 249)								b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 249)								b17->data = ::haxe::io::Bytes_obj::alloc((b17->length * 4));
HXDLIN( 249)								{
HXDLIN( 249)									int len4 = b17->length;
HXDLIN( 249)									int w2 = 0;
HXDLIN( 249)									{
HXDLIN( 249)										int _g40 = 0;
HXDLIN( 249)										int _g41 = b17->height;
HXDLIN( 249)										while((_g40 < _g41)){
HXDLIN( 249)											_g40 = (_g40 + 1);
HXDLIN( 249)											int y7 = (_g40 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												int _g42 = 0;
HXDLIN( 249)												int _g43 = b17->width;
HXDLIN( 249)												while((_g42 < _g43)){
HXDLIN( 249)													_g42 = (_g42 + 1);
HXDLIN( 249)													int x7 = (_g42 - 1);
HXDLIN( 249)													{
HXDLIN( 249)														w2 = (w2 + 1);
HXDLIN( 249)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w2 = (w2 + 1);
HXDLIN( 249)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w2 = (w2 + 1);
HXDLIN( 249)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w2 = (w2 + 1);
HXDLIN( 249)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage7 = b17;
            						}
            						break;
            						case (int)1: {
HXDLIN( 249)							 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::ArrIntImg a16 = arrI2;
HXDLIN( 249)							{
HXDLIN( 249)								a16->width = width2;
HXDLIN( 249)								a16->height = height2;
HXDLIN( 249)								a16->data = ::Array_obj< int >::__new(0);
HXDLIN( 249)								a16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 249)								{
HXDLIN( 249)									int _g44 = 0;
HXDLIN( 249)									int _g45 = a16->length;
HXDLIN( 249)									while((_g44 < _g45)){
HXDLIN( 249)										_g44 = (_g44 + 1);
HXDLIN( 249)										int i16 = (_g44 - 1);
HXDLIN( 249)										a16->data[i16] = 0;
            									}
            								}
            							}
HXDLIN( 249)							undoImage7 = a16;
            						}
            						break;
            						case (int)2: {
HXDLIN( 249)							 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::U32ArrImg b18 = u32a2;
HXDLIN( 249)							{
HXDLIN( 249)								b18->width = width2;
HXDLIN( 249)								b18->height = height2;
HXDLIN( 249)								b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 249)								int size2 = (b18->length * 4);
HXDLIN( 249)								b18->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 249)								{
HXDLIN( 249)									int _g46 = 0;
HXDLIN( 249)									int _g47 = b18->length;
HXDLIN( 249)									while((_g46 < _g47)){
HXDLIN( 249)										_g46 = (_g46 + 1);
HXDLIN( 249)										int i17 = (_g46 - 1);
HXDLIN( 249)										{
HXDLIN( 249)											 ::haxe::io::ArrayBufferViewImpl this67 = b18->data;
HXDLIN( 249)											bool undoImage8;
HXDLIN( 249)											if ((i17 >= 0)) {
HXDLIN( 249)												undoImage8 = (i17 < (this67->byteLength >> 2));
            											}
            											else {
HXDLIN( 249)												undoImage8 = false;
            											}
HXDLIN( 249)											if (undoImage8) {
HXDLIN( 249)												 ::haxe::io::Bytes _this2 = this67->bytes;
HXDLIN( 249)												int pos2 = ((i17 << 2) + this67->byteOffset);
HXDLIN( 249)												_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 249)												_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage7 = b18;
            						}
            						break;
            						case (int)3: {
HXDLIN( 249)							 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::VecIntImg v4 = vec2;
HXDLIN( 249)							{
HXDLIN( 249)								v4->width = width2;
HXDLIN( 249)								v4->height = height2;
HXDLIN( 249)								v4->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 249)								v4->data = ::Array_obj< int >::__new(v4->length);
HXDLIN( 249)								{
HXDLIN( 249)									int _g48 = 0;
HXDLIN( 249)									int _g49 = v4->length;
HXDLIN( 249)									while((_g48 < _g49)){
HXDLIN( 249)										_g48 = (_g48 + 1);
HXDLIN( 249)										int i18 = (_g48 - 1);
HXDLIN( 249)										v4->data->__unsafe_set(i18,0);
            									}
            								}
            							}
HXDLIN( 249)							undoImage7 = v4;
            						}
            						break;
            						case (int)4: {
HXDLIN( 249)							 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::StackIntImg b19 = sInt2;
HXDLIN( 249)							{
HXDLIN( 249)								b19->width = width2;
HXDLIN( 249)								b19->height = height2;
HXDLIN( 249)								b19->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 249)								b19->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 249)								{
HXDLIN( 249)									int len5 = b19->length;
HXDLIN( 249)									 ::haxe::ds::GenericStack_Int d2 = b19->data;
HXDLIN( 249)									if (::hx::IsNull( d2->head )) {
HXDLIN( 249)										int _g50 = 0;
HXDLIN( 249)										int _g51 = len5;
HXDLIN( 249)										while((_g50 < _g51)){
HXDLIN( 249)											_g50 = (_g50 + 1);
HXDLIN( 249)											int i19 = (_g50 - 1);
HXDLIN( 249)											d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            										}
            									}
            									else {
HXDLIN( 249)										int _g52 = 0;
HXDLIN( 249)										int _g53 = len5;
HXDLIN( 249)										while((_g52 < _g53)){
HXDLIN( 249)											_g52 = (_g52 + 1);
HXDLIN( 249)											int i20 = (_g52 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int l2 = b19->data->head;
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 249)												{
HXDLIN( 249)													int _g54 = 0;
HXDLIN( 249)													int _g55 = i20;
HXDLIN( 249)													while((_g54 < _g55)){
HXDLIN( 249)														_g54 = (_g54 + 1);
HXDLIN( 249)														int i21 = (_g54 - 1);
HXLINE( 345)														prev2 = l2;
HXLINE( 346)														l2 = l2->next;
            													}
            												}
HXLINE( 249)												if (::hx::IsNull( prev2 )) {
HXDLIN( 249)													b19->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 249)													l2 = null();
            												}
            												else {
HXDLIN( 249)													prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 249)													l2 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage7 = b19;
            						}
            						break;
            					}
HXDLIN( 249)					this66->image = undoImage7;
HXDLIN( 249)					this66->width = width2;
HXDLIN( 249)					this66->height = height2;
HXDLIN( 249)					this66->imageType = ( (int)(imageType2) );
HXDLIN( 249)					undoImage6 = this66;
HXDLIN( 249)					{
HXDLIN( 249)						int rectLeft2 = xIter32->start;
HXDLIN( 249)						int rectTop2 = yIter32->start;
HXDLIN( 249)						int rectRight2 = xIter32->max;
HXDLIN( 249)						bool forceClear2 = false;
HXDLIN( 249)						{
HXDLIN( 249)							int _g56 = rectTop2;
HXDLIN( 249)							int _g57 = yIter32->max;
HXDLIN( 249)							while((_g56 < _g57)){
HXDLIN( 249)								_g56 = (_g56 + 1);
HXDLIN( 249)								int dy3 = (_g56 - 1);
HXDLIN( 249)								{
HXDLIN( 249)									int _g58 = rectLeft2;
HXDLIN( 249)									int _g59 = rectRight2;
HXDLIN( 249)									while((_g58 < _g59)){
HXDLIN( 249)										_g58 = (_g58 + 1);
HXDLIN( 249)										int dx3 = (_g58 - 1);
HXDLIN( 249)										::Dynamic this68 = this1->image;
HXDLIN( 249)										int index9;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											index9 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx3) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											index9 = ::Std_obj::_hx_int(( (Float)(((dy3 * this1->width) + dx3)) ));
            										}
HXDLIN( 249)										int c9 = ::iterMagic::Iimg_obj::get(this68,index9);
HXDLIN( 249)										int col2;
HXDLIN( 249)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)											col2 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            										}
            										else {
HXDLIN( 249)											col2 = c9;
            										}
HXDLIN( 249)										bool hitQuad17;
HXDLIN( 249)										if (this1->useMask) {
HXDLIN( 249)											hitQuad17 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 249)											hitQuad17 = false;
            										}
HXDLIN( 249)										if (hitQuad17) {
HXDLIN( 249)											 ::pi_xy::ImageStruct this69 = this1->mask;
HXDLIN( 249)											::Dynamic this70 = this69->image;
HXDLIN( 249)											int index10;
HXDLIN( 249)											if (this69->useVirtualPos) {
HXDLIN( 249)												index10 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this69->virtualY) * ( (Float)(this69->width) )) + dx3) - this69->virtualX));
            											}
            											else {
HXDLIN( 249)												index10 = ::Std_obj::_hx_int(( (Float)(((dy3 * this69->width) + dx3)) ));
            											}
HXDLIN( 249)											int c10 = ::iterMagic::Iimg_obj::get(this70,index10);
HXDLIN( 249)											int v5;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												v5 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												v5 = c10;
            											}
HXDLIN( 249)											int maskPixel2 = v5;
HXDLIN( 249)											int this71 = col2;
HXDLIN( 249)											if ((maskPixel2 == 0)) {
HXDLIN( 249)												col2 = this71;
            											}
            											else {
HXDLIN( 249)												Float m02;
HXDLIN( 249)												int this72 = ((maskPixel2 >> 24) & 255);
HXDLIN( 249)												if ((this72 == 0)) {
HXDLIN( 249)													m02 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m02 = (( (Float)(this72) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m12;
HXDLIN( 249)												int this73 = ((maskPixel2 >> 16) & 255);
HXDLIN( 249)												if ((this73 == 0)) {
HXDLIN( 249)													m12 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m12 = (( (Float)(this73) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m22;
HXDLIN( 249)												int this74 = ((maskPixel2 >> 8) & 255);
HXDLIN( 249)												if ((this74 == 0)) {
HXDLIN( 249)													m22 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m22 = (( (Float)(this74) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m32;
HXDLIN( 249)												int this75 = (maskPixel2 & 255);
HXDLIN( 249)												if ((this75 == 0)) {
HXDLIN( 249)													m32 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m32 = (( (Float)(this75) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this71 >> 24) & 255)) )));
HXDLIN( 249)												int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this71 >> 16) & 255)) )));
HXDLIN( 249)												int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this71 >> 8) & 255)) )));
HXDLIN( 249)												int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this71 & 255)) )));
HXDLIN( 249)												col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 249)										if ((col2 != 0)) {
HXDLIN( 249)											int x8 = (dx3 - rectLeft2);
HXDLIN( 249)											int y8 = (dy3 - rectTop2);
HXDLIN( 249)											int c11 = col2;
HXDLIN( 249)											bool hitQuad18;
HXDLIN( 249)											if ((((c11 >> 24) & 255) < 254)) {
HXDLIN( 249)												hitQuad18 = undoImage6->transparent;
            											}
            											else {
HXDLIN( 249)												hitQuad18 = false;
            											}
HXDLIN( 249)											if (hitQuad18) {
HXDLIN( 249)												int location4;
HXDLIN( 249)												if (undoImage6->useVirtualPos) {
HXDLIN( 249)													location4 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            												}
            												else {
HXDLIN( 249)													location4 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            												}
HXDLIN( 249)												int this76 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 249)												int this77;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													this77 = ((((((this76 >> 24) & 255) << 24) | ((this76 & 255) << 16)) | (((this76 >> 8) & 255) << 8)) | ((this76 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													this77 = this76;
            												}
HXDLIN( 249)												Float a17;
HXDLIN( 249)												int this78 = ((this77 >> 24) & 255);
HXDLIN( 249)												if ((this78 == 0)) {
HXDLIN( 249)													a17 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a17 = (( (Float)(this78) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r14;
HXDLIN( 249)												int this79 = ((this77 >> 16) & 255);
HXDLIN( 249)												if ((this79 == 0)) {
HXDLIN( 249)													r14 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r14 = (( (Float)(this79) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g14;
HXDLIN( 249)												int this80 = ((this77 >> 8) & 255);
HXDLIN( 249)												if ((this80 == 0)) {
HXDLIN( 249)													g14 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g14 = (( (Float)(this80) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b110;
HXDLIN( 249)												int this81 = (this77 & 255);
HXDLIN( 249)												if ((this81 == 0)) {
HXDLIN( 249)													b110 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b110 = (( (Float)(this81) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a24;
HXDLIN( 249)												int this82 = ((col2 >> 24) & 255);
HXDLIN( 249)												if ((this82 == 0)) {
HXDLIN( 249)													a24 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a24 = (( (Float)(this82) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r24;
HXDLIN( 249)												int this83 = ((col2 >> 16) & 255);
HXDLIN( 249)												if ((this83 == 0)) {
HXDLIN( 249)													r24 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r24 = (( (Float)(this83) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g24;
HXDLIN( 249)												int this84 = ((col2 >> 8) & 255);
HXDLIN( 249)												if ((this84 == 0)) {
HXDLIN( 249)													g24 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g24 = (( (Float)(this84) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b25;
HXDLIN( 249)												int this85 = (col2 & 255);
HXDLIN( 249)												if ((this85 == 0)) {
HXDLIN( 249)													b25 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b25 = (( (Float)(this85) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a34 = (a17 * (( (Float)(1) ) - a24));
HXDLIN( 249)												int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 249)												int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 249)												int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a34) + (b25 * a24))));
HXDLIN( 249)												int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 249)												int blended4 = ((((a18 << 24) | (r7 << 16)) | (g7 << 8)) | b20);
HXDLIN( 249)												{
HXDLIN( 249)													int hitQuad19;
HXDLIN( 249)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)														hitQuad19 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            													}
            													else {
HXDLIN( 249)														hitQuad19 = blended4;
            													}
HXDLIN( 249)													::iterMagic::Iimg_obj::set(undoImage6->image,location4,hitQuad19);
            												}
            											}
            											else {
HXDLIN( 249)												::Dynamic this86 = undoImage6->image;
HXDLIN( 249)												int index11;
HXDLIN( 249)												if (undoImage6->useVirtualPos) {
HXDLIN( 249)													index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            												}
            												else {
HXDLIN( 249)													index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            												}
HXDLIN( 249)												int hitQuad20;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad20 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad20 = c11;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this86,index11,hitQuad20);
            											}
            										}
            										else {
HXDLIN( 249)											if (forceClear2) {
HXDLIN( 249)												::Dynamic this87 = undoImage6->image;
HXDLIN( 249)												int x9 = (dx3 - rectLeft2);
HXDLIN( 249)												int y9 = (dy3 - rectTop2);
HXDLIN( 249)												int index12;
HXDLIN( 249)												if (undoImage6->useVirtualPos) {
HXDLIN( 249)													index12 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            												}
            												else {
HXDLIN( 249)													index12 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this87,index12,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 249)				bool found2 = false;
HXDLIN( 249)				{
HXDLIN( 249)					int _g_min4 = xIter32->start;
HXDLIN( 249)					int _g_max4 = xIter32->max;
HXDLIN( 249)					while((_g_min4 < _g_max4)){
HXDLIN( 249)						_g_min4 = (_g_min4 + 1);
HXDLIN( 249)						int px2 = (_g_min4 - 1);
HXDLIN( 249)						Float pcx1 = (( (Float)(px2) ) - dx);
HXLINE( 619)						found2 = false;
HXLINE( 249)						{
HXDLIN( 249)							int _g_min5 = yIter32->start;
HXDLIN( 249)							int _g_max5 = yIter32->max;
HXDLIN( 249)							while((_g_min5 < _g_max5)){
HXDLIN( 249)								_g_min5 = (_g_min5 + 1);
HXDLIN( 249)								int py2 = (_g_min5 - 1);
HXDLIN( 249)								Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN( 249)								Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 249)								Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 249)								Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 249)								Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 249)								Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 249)								bool hitQuad21;
HXDLIN( 249)								bool hitQuad22;
HXDLIN( 249)								if ((ratioA1 >= 0)) {
HXDLIN( 249)									hitQuad22 = (ratioB1 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad22 = false;
            								}
HXDLIN( 249)								if (hitQuad22) {
HXDLIN( 249)									hitQuad21 = (ratioC1 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad21 = false;
            								}
HXDLIN( 249)								if (hitQuad21) {
HXDLIN( 249)									int i22 = ::Std_obj::_hx_int((( (Float)(aA1) ) * (soft * ratioB1)));
HXDLIN( 249)									if ((i22 > 255)) {
HXLINE(  24)										i22 = 255;
            									}
HXLINE( 249)									if ((i22 < 0)) {
HXLINE(  25)										i22 = 0;
            									}
HXLINE( 249)									int a19 = i22;
HXDLIN( 249)									int i23 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN( 249)									if ((i23 > 255)) {
HXLINE(  24)										i23 = 255;
            									}
HXLINE( 249)									if ((i23 < 0)) {
HXLINE(  25)										i23 = 0;
            									}
HXLINE( 249)									int r8 = i23;
HXDLIN( 249)									int i24 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN( 249)									if ((i24 > 255)) {
HXLINE(  24)										i24 = 255;
            									}
HXLINE( 249)									if ((i24 < 0)) {
HXLINE(  25)										i24 = 0;
            									}
HXLINE( 249)									int g8 = i24;
HXDLIN( 249)									int i25 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN( 249)									if ((i25 > 255)) {
HXLINE(  24)										i25 = 255;
            									}
HXLINE( 249)									if ((i25 < 0)) {
HXLINE(  25)										i25 = 0;
            									}
HXLINE( 249)									int b26 = i25;
HXDLIN( 249)									{
HXDLIN( 249)										int location5;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											location5 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this1->virtualY) * ( (Float)(this1->width) )) + px2) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											location5 = ::Std_obj::_hx_int(( (Float)(((py2 * this1->width) + px2)) ));
            										}
HXDLIN( 249)										bool hitQuad23;
HXDLIN( 249)										if (this1->transparent) {
HXDLIN( 249)											hitQuad23 = (a19 < 254);
            										}
            										else {
HXDLIN( 249)											hitQuad23 = false;
            										}
HXDLIN( 249)										if (hitQuad23) {
HXDLIN( 249)											int this88 = ::iterMagic::Iimg_obj::get(this1->image,location5);
HXDLIN( 249)											int old1;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												old1 = ((((((this88 >> 24) & 255) << 24) | ((this88 & 255) << 16)) | (((this88 >> 8) & 255) << 8)) | ((this88 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												old1 = this88;
            											}
HXDLIN( 249)											int rhs1 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b26);
HXDLIN( 249)											Float a110;
HXDLIN( 249)											int this89 = ((old1 >> 24) & 255);
HXDLIN( 249)											if ((this89 == 0)) {
HXDLIN( 249)												a110 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a110 = (( (Float)(this89) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r15;
HXDLIN( 249)											int this90 = ((old1 >> 16) & 255);
HXDLIN( 249)											if ((this90 == 0)) {
HXDLIN( 249)												r15 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r15 = (( (Float)(this90) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g15;
HXDLIN( 249)											int this91 = ((old1 >> 8) & 255);
HXDLIN( 249)											if ((this91 == 0)) {
HXDLIN( 249)												g15 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g15 = (( (Float)(this91) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b111;
HXDLIN( 249)											int this92 = (old1 & 255);
HXDLIN( 249)											if ((this92 == 0)) {
HXDLIN( 249)												b111 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b111 = (( (Float)(this92) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a25;
HXDLIN( 249)											int this93 = ((rhs1 >> 24) & 255);
HXDLIN( 249)											if ((this93 == 0)) {
HXDLIN( 249)												a25 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a25 = (( (Float)(this93) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r25;
HXDLIN( 249)											int this94 = ((rhs1 >> 16) & 255);
HXDLIN( 249)											if ((this94 == 0)) {
HXDLIN( 249)												r25 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r25 = (( (Float)(this94) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g25;
HXDLIN( 249)											int this95 = ((rhs1 >> 8) & 255);
HXDLIN( 249)											if ((this95 == 0)) {
HXDLIN( 249)												g25 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g25 = (( (Float)(this95) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b27;
HXDLIN( 249)											int this96 = (rhs1 & 255);
HXDLIN( 249)											if ((this96 == 0)) {
HXDLIN( 249)												b27 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b27 = (( (Float)(this96) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a35 = (a110 * (( (Float)(1) ) - a25));
HXDLIN( 249)											int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 249)											int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 249)											int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a35) + (b27 * a25))));
HXDLIN( 249)											int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 249)											int blended5 = ((((a20 << 24) | (r9 << 16)) | (g9 << 8)) | b28);
HXDLIN( 249)											{
HXDLIN( 249)												int hitQuad24;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad24 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad24 = blended5;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this1->image,location5,hitQuad24);
            											}
            										}
            										else {
HXDLIN( 249)											int value1;
HXDLIN( 249)											if (this1->isLittle) {
HXDLIN( 249)												value1 = ((((a19 << 24) | (b26 << 16)) | (g8 << 8)) | r8);
            											}
            											else {
HXDLIN( 249)												value1 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b26);
            											}
HXDLIN( 249)											::iterMagic::Iimg_obj::set(this1->image,location5,value1);
            										}
            									}
HXLINE( 633)									found2 = true;
            								}
            								else {
HXDLIN( 249)									if (found2) {
HXDLIN( 249)										goto _hx_goto_469;
            									}
            								}
            							}
            							_hx_goto_469:;
            						}
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart v_yIter31;
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart v_xIter31;
HXDLIN( 249)				int v_undoY1;
HXDLIN( 249)				int v_undoX1;
HXDLIN( 249)				Float v_ty1;
HXDLIN( 249)				Float v_tx1;
HXDLIN( 249)				Float v_t01;
HXDLIN( 249)				Float v_sy1;
HXDLIN( 249)				Float v_sx1;
HXDLIN( 249)				Float v_s01;
HXDLIN( 249)				Float v_A1;
HXDLIN( 249)				Float ax2 = ex;
HXDLIN( 249)				Float ay2 = ey;
HXDLIN( 249)				 ::pi_xy::ImageStruct v_undoImage1 = null();
HXDLIN( 249)				Float bx3 = cx;
HXDLIN( 249)				Float by3 = cy;
HXDLIN( 249)				Float cx3 = dx;
HXDLIN( 249)				Float cy3 = dy;
HXDLIN( 249)				bool adjustWinding2 = (((((ax2 * by3) - (bx3 * ay2)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * ay2) - (ax2 * cy3))) > 0);
HXDLIN( 249)				if (!(adjustWinding2)) {
HXDLIN( 249)					Float bx_2 = bx3;
HXDLIN( 249)					Float by_2 = by3;
HXLINE(  24)					bx3 = cx3;
HXLINE(  25)					by3 = cy3;
HXLINE(  26)					cx3 = bx_2;
HXLINE(  27)					cy3 = by_2;
            				}
HXLINE( 249)				Float v_ax1 = ax2;
HXDLIN( 249)				Float v_ay1 = ay2;
HXDLIN( 249)				Float v_bx1 = bx3;
HXDLIN( 249)				Float v_by1 = by3;
HXDLIN( 249)				Float v_cx1 = cx3;
HXDLIN( 249)				Float v_cy1 = cy3;
HXDLIN( 249)				bool v_preCalculated1 = true;
HXDLIN( 249)				{
HXDLIN( 249)					v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN( 249)					v_sx1 = (v_cy1 - v_ay1);
HXDLIN( 249)					v_sy1 = (v_ax1 - v_cx1);
HXDLIN( 249)					v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN( 249)					v_tx1 = (v_ay1 - v_by1);
HXDLIN( 249)					v_ty1 = (v_bx1 - v_ax1);
HXDLIN( 249)					v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN( 249)					Float a26 = v_ax1;
HXDLIN( 249)					Float b29 = v_bx1;
HXDLIN( 249)					Float c12 = v_cx1;
HXDLIN( 249)					if ((a26 > b29)) {
HXDLIN( 249)						if ((a26 > c12)) {
HXDLIN( 249)							int min16;
HXDLIN( 249)							if ((b29 > c12)) {
HXDLIN( 249)								min16 = ::Math_obj::floor(c12);
            							}
            							else {
HXDLIN( 249)								min16 = ::Math_obj::floor(b29);
            							}
HXDLIN( 249)							int ii_min32 = min16;
HXDLIN( 249)							int ii_max32 = ::Math_obj::ceil(a26);
HXDLIN( 249)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            						}
            						else {
HXDLIN( 249)							int ii_min33 = ::Math_obj::floor(b29);
HXDLIN( 249)							int ii_max33 = ::Math_obj::ceil(c12);
HXDLIN( 249)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            						}
            					}
            					else {
HXDLIN( 249)						if ((b29 > c12)) {
HXDLIN( 249)							int min17;
HXDLIN( 249)							if ((a26 > c12)) {
HXDLIN( 249)								min17 = ::Math_obj::floor(c12);
            							}
            							else {
HXDLIN( 249)								min17 = ::Math_obj::ceil(a26);
            							}
HXDLIN( 249)							int ii_min34 = min17;
HXDLIN( 249)							int ii_max34 = ::Math_obj::ceil(b29);
HXDLIN( 249)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            						}
            						else {
HXDLIN( 249)							int ii_min35 = ::Math_obj::floor(a26);
HXDLIN( 249)							int ii_max35 = ::Math_obj::ceil(c12);
HXDLIN( 249)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            						}
            					}
HXDLIN( 249)					Float a27 = v_ay1;
HXDLIN( 249)					Float b30 = v_by1;
HXDLIN( 249)					Float c13 = v_cy1;
HXDLIN( 249)					if ((a27 > b30)) {
HXDLIN( 249)						if ((a27 > c13)) {
HXDLIN( 249)							int min18;
HXDLIN( 249)							if ((b30 > c13)) {
HXDLIN( 249)								min18 = ::Math_obj::floor(c13);
            							}
            							else {
HXDLIN( 249)								min18 = ::Math_obj::floor(b30);
            							}
HXDLIN( 249)							int ii_min36 = min18;
HXDLIN( 249)							int ii_max36 = ::Math_obj::ceil(a27);
HXDLIN( 249)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            						}
            						else {
HXDLIN( 249)							int ii_min37 = ::Math_obj::floor(b30);
HXDLIN( 249)							int ii_max37 = ::Math_obj::ceil(c13);
HXDLIN( 249)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            						}
            					}
            					else {
HXDLIN( 249)						if ((b30 > c13)) {
HXDLIN( 249)							int min19;
HXDLIN( 249)							if ((a27 > c13)) {
HXDLIN( 249)								min19 = ::Math_obj::floor(c13);
            							}
            							else {
HXDLIN( 249)								min19 = ::Math_obj::ceil(a27);
            							}
HXDLIN( 249)							int ii_min38 = min19;
HXDLIN( 249)							int ii_max38 = ::Math_obj::ceil(b30);
HXDLIN( 249)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            						}
            						else {
HXDLIN( 249)							int ii_min39 = ::Math_obj::floor(a27);
HXDLIN( 249)							int ii_max39 = ::Math_obj::ceil(c13);
HXDLIN( 249)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            						}
            					}
            				}
HXDLIN( 249)				if (hasUndo2) {
HXDLIN( 249)					v_undoImage1 = undoImage6;
HXDLIN( 249)					v_undoX1 = xIter32->start;
HXDLIN( 249)					v_undoY1 = yIter32->start;
            				}
HXDLIN( 249)				bool hasUndo3 = false;
HXDLIN( 249)				int aA2 = ((color >> 24) & 255);
HXDLIN( 249)				int rA2 = ((color >> 16) & 255);
HXDLIN( 249)				int gA2 = ((color >> 8) & 255);
HXDLIN( 249)				int bA2 = (color & 255);
HXDLIN( 249)				Float bcx2 = (dx - ax);
HXDLIN( 249)				Float bcy2 = (dy - ay);
HXDLIN( 249)				Float acx2 = (ex - ax);
HXDLIN( 249)				Float acy2 = (ey - ay);
HXDLIN( 249)				Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 249)				Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 249)				Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 249)				Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 249)				if ((ex > dx)) {
HXDLIN( 249)					if ((ex > ax)) {
HXDLIN( 249)						int min20;
HXDLIN( 249)						if ((dx > ax)) {
HXDLIN( 249)							min20 = ::Math_obj::floor(ax);
            						}
            						else {
HXDLIN( 249)							min20 = ::Math_obj::floor(dx);
            						}
HXDLIN( 249)						int ii_min40 = min20;
HXDLIN( 249)						int ii_max40 = ::Math_obj::ceil(ex);
HXDLIN( 249)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            					}
            					else {
HXDLIN( 249)						int ii_min41 = ::Math_obj::floor(dx);
HXDLIN( 249)						int ii_max41 = ::Math_obj::ceil(ax);
HXDLIN( 249)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            					}
            				}
            				else {
HXDLIN( 249)					if ((dx > ax)) {
HXDLIN( 249)						int min21;
HXDLIN( 249)						if ((ex > ax)) {
HXDLIN( 249)							min21 = ::Math_obj::floor(ax);
            						}
            						else {
HXDLIN( 249)							min21 = ::Math_obj::ceil(ex);
            						}
HXDLIN( 249)						int ii_min42 = min21;
HXDLIN( 249)						int ii_max42 = ::Math_obj::ceil(dx);
HXDLIN( 249)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            					}
            					else {
HXDLIN( 249)						int ii_min43 = ::Math_obj::floor(ex);
HXDLIN( 249)						int ii_max43 = ::Math_obj::ceil(ax);
HXDLIN( 249)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 249)				if ((ey > dy)) {
HXDLIN( 249)					if ((ey > ay)) {
HXDLIN( 249)						int min22;
HXDLIN( 249)						if ((dy > ay)) {
HXDLIN( 249)							min22 = ::Math_obj::floor(ay);
            						}
            						else {
HXDLIN( 249)							min22 = ::Math_obj::floor(dy);
            						}
HXDLIN( 249)						int ii_min44 = min22;
HXDLIN( 249)						int ii_max44 = ::Math_obj::ceil(ey);
HXDLIN( 249)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            					}
            					else {
HXDLIN( 249)						int ii_min45 = ::Math_obj::floor(dy);
HXDLIN( 249)						int ii_max45 = ::Math_obj::ceil(ay);
HXDLIN( 249)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            					}
            				}
            				else {
HXDLIN( 249)					if ((dy > ay)) {
HXDLIN( 249)						int min23;
HXDLIN( 249)						if ((ey > ay)) {
HXDLIN( 249)							min23 = ::Math_obj::floor(ay);
            						}
            						else {
HXDLIN( 249)							min23 = ::Math_obj::ceil(ey);
            						}
HXDLIN( 249)						int ii_min46 = min23;
HXDLIN( 249)						int ii_max46 = ::Math_obj::ceil(dy);
HXDLIN( 249)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            					}
            					else {
HXDLIN( 249)						int ii_min47 = ::Math_obj::floor(ey);
HXDLIN( 249)						int ii_max47 = ::Math_obj::ceil(ay);
HXDLIN( 249)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 249)				if (hasUndo3) {
HXDLIN( 249)					int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 249)					int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 249)					 ::Dynamic imageType3 = null();
HXDLIN( 249)					 ::pi_xy::ImageStruct this97 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 249)					if (::hx::IsNull( imageType3 )) {
HXLINE(  54)						imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 249)					::Dynamic undoImage10;
HXDLIN( 249)					switch((int)(( (int)(imageType3) ))){
            						case (int)0: {
HXDLIN( 249)							 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::BytesImg b31 = byt3;
HXDLIN( 249)							{
HXDLIN( 249)								b31->width = width3;
HXDLIN( 249)								b31->height = height3;
HXDLIN( 249)								b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 249)								b31->data = ::haxe::io::Bytes_obj::alloc((b31->length * 4));
HXDLIN( 249)								{
HXDLIN( 249)									int len6 = b31->length;
HXDLIN( 249)									int w3 = 0;
HXDLIN( 249)									{
HXDLIN( 249)										int _g60 = 0;
HXDLIN( 249)										int _g61 = b31->height;
HXDLIN( 249)										while((_g60 < _g61)){
HXDLIN( 249)											_g60 = (_g60 + 1);
HXDLIN( 249)											int y10 = (_g60 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												int _g62 = 0;
HXDLIN( 249)												int _g63 = b31->width;
HXDLIN( 249)												while((_g62 < _g63)){
HXDLIN( 249)													_g62 = (_g62 + 1);
HXDLIN( 249)													int x10 = (_g62 - 1);
HXDLIN( 249)													{
HXDLIN( 249)														w3 = (w3 + 1);
HXDLIN( 249)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w3 = (w3 + 1);
HXDLIN( 249)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w3 = (w3 + 1);
HXDLIN( 249)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w3 = (w3 + 1);
HXDLIN( 249)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage10 = b31;
            						}
            						break;
            						case (int)1: {
HXDLIN( 249)							 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::ArrIntImg a28 = arrI3;
HXDLIN( 249)							{
HXDLIN( 249)								a28->width = width3;
HXDLIN( 249)								a28->height = height3;
HXDLIN( 249)								a28->data = ::Array_obj< int >::__new(0);
HXDLIN( 249)								a28->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 249)								{
HXDLIN( 249)									int _g64 = 0;
HXDLIN( 249)									int _g65 = a28->length;
HXDLIN( 249)									while((_g64 < _g65)){
HXDLIN( 249)										_g64 = (_g64 + 1);
HXDLIN( 249)										int i26 = (_g64 - 1);
HXDLIN( 249)										a28->data[i26] = 0;
            									}
            								}
            							}
HXDLIN( 249)							undoImage10 = a28;
            						}
            						break;
            						case (int)2: {
HXDLIN( 249)							 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::U32ArrImg b32 = u32a3;
HXDLIN( 249)							{
HXDLIN( 249)								b32->width = width3;
HXDLIN( 249)								b32->height = height3;
HXDLIN( 249)								b32->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 249)								int size3 = (b32->length * 4);
HXDLIN( 249)								b32->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 249)								{
HXDLIN( 249)									int _g66 = 0;
HXDLIN( 249)									int _g67 = b32->length;
HXDLIN( 249)									while((_g66 < _g67)){
HXDLIN( 249)										_g66 = (_g66 + 1);
HXDLIN( 249)										int i27 = (_g66 - 1);
HXDLIN( 249)										{
HXDLIN( 249)											 ::haxe::io::ArrayBufferViewImpl this98 = b32->data;
HXDLIN( 249)											bool undoImage11;
HXDLIN( 249)											if ((i27 >= 0)) {
HXDLIN( 249)												undoImage11 = (i27 < (this98->byteLength >> 2));
            											}
            											else {
HXDLIN( 249)												undoImage11 = false;
            											}
HXDLIN( 249)											if (undoImage11) {
HXDLIN( 249)												 ::haxe::io::Bytes _this3 = this98->bytes;
HXDLIN( 249)												int pos3 = ((i27 << 2) + this98->byteOffset);
HXDLIN( 249)												_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 249)												_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage10 = b32;
            						}
            						break;
            						case (int)3: {
HXDLIN( 249)							 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::VecIntImg v6 = vec3;
HXDLIN( 249)							{
HXDLIN( 249)								v6->width = width3;
HXDLIN( 249)								v6->height = height3;
HXDLIN( 249)								v6->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 249)								v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN( 249)								{
HXDLIN( 249)									int _g68 = 0;
HXDLIN( 249)									int _g69 = v6->length;
HXDLIN( 249)									while((_g68 < _g69)){
HXDLIN( 249)										_g68 = (_g68 + 1);
HXDLIN( 249)										int i28 = (_g68 - 1);
HXDLIN( 249)										v6->data->__unsafe_set(i28,0);
            									}
            								}
            							}
HXDLIN( 249)							undoImage10 = v6;
            						}
            						break;
            						case (int)4: {
HXDLIN( 249)							 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::StackIntImg b33 = sInt3;
HXDLIN( 249)							{
HXDLIN( 249)								b33->width = width3;
HXDLIN( 249)								b33->height = height3;
HXDLIN( 249)								b33->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 249)								b33->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 249)								{
HXDLIN( 249)									int len7 = b33->length;
HXDLIN( 249)									 ::haxe::ds::GenericStack_Int d3 = b33->data;
HXDLIN( 249)									if (::hx::IsNull( d3->head )) {
HXDLIN( 249)										int _g70 = 0;
HXDLIN( 249)										int _g71 = len7;
HXDLIN( 249)										while((_g70 < _g71)){
HXDLIN( 249)											_g70 = (_g70 + 1);
HXDLIN( 249)											int i29 = (_g70 - 1);
HXDLIN( 249)											d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            										}
            									}
            									else {
HXDLIN( 249)										int _g72 = 0;
HXDLIN( 249)										int _g73 = len7;
HXDLIN( 249)										while((_g72 < _g73)){
HXDLIN( 249)											_g72 = (_g72 + 1);
HXDLIN( 249)											int i30 = (_g72 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int l3 = b33->data->head;
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 249)												{
HXDLIN( 249)													int _g74 = 0;
HXDLIN( 249)													int _g75 = i30;
HXDLIN( 249)													while((_g74 < _g75)){
HXDLIN( 249)														_g74 = (_g74 + 1);
HXDLIN( 249)														int i31 = (_g74 - 1);
HXLINE( 345)														prev3 = l3;
HXLINE( 346)														l3 = l3->next;
            													}
            												}
HXLINE( 249)												if (::hx::IsNull( prev3 )) {
HXDLIN( 249)													b33->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 249)													l3 = null();
            												}
            												else {
HXDLIN( 249)													prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 249)													l3 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage10 = b33;
            						}
            						break;
            					}
HXDLIN( 249)					this97->image = undoImage10;
HXDLIN( 249)					this97->width = width3;
HXDLIN( 249)					this97->height = height3;
HXDLIN( 249)					this97->imageType = ( (int)(imageType3) );
HXDLIN( 249)					undoImage9 = this97;
HXDLIN( 249)					{
HXDLIN( 249)						int rectLeft3 = xIter33->start;
HXDLIN( 249)						int rectTop3 = yIter33->start;
HXDLIN( 249)						int rectRight3 = xIter33->max;
HXDLIN( 249)						bool forceClear3 = false;
HXDLIN( 249)						{
HXDLIN( 249)							int _g76 = rectTop3;
HXDLIN( 249)							int _g77 = yIter33->max;
HXDLIN( 249)							while((_g76 < _g77)){
HXDLIN( 249)								_g76 = (_g76 + 1);
HXDLIN( 249)								int dy4 = (_g76 - 1);
HXDLIN( 249)								{
HXDLIN( 249)									int _g78 = rectLeft3;
HXDLIN( 249)									int _g79 = rectRight3;
HXDLIN( 249)									while((_g78 < _g79)){
HXDLIN( 249)										_g78 = (_g78 + 1);
HXDLIN( 249)										int dx4 = (_g78 - 1);
HXDLIN( 249)										::Dynamic this99 = this1->image;
HXDLIN( 249)										int index13;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											index13 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx4) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											index13 = ::Std_obj::_hx_int(( (Float)(((dy4 * this1->width) + dx4)) ));
            										}
HXDLIN( 249)										int c14 = ::iterMagic::Iimg_obj::get(this99,index13);
HXDLIN( 249)										int col3;
HXDLIN( 249)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)											col3 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            										}
            										else {
HXDLIN( 249)											col3 = c14;
            										}
HXDLIN( 249)										bool hitQuad25;
HXDLIN( 249)										if (this1->useMask) {
HXDLIN( 249)											hitQuad25 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 249)											hitQuad25 = false;
            										}
HXDLIN( 249)										if (hitQuad25) {
HXDLIN( 249)											 ::pi_xy::ImageStruct this100 = this1->mask;
HXDLIN( 249)											::Dynamic this101 = this100->image;
HXDLIN( 249)											int index14;
HXDLIN( 249)											if (this100->useVirtualPos) {
HXDLIN( 249)												index14 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this100->virtualY) * ( (Float)(this100->width) )) + dx4) - this100->virtualX));
            											}
            											else {
HXDLIN( 249)												index14 = ::Std_obj::_hx_int(( (Float)(((dy4 * this100->width) + dx4)) ));
            											}
HXDLIN( 249)											int c15 = ::iterMagic::Iimg_obj::get(this101,index14);
HXDLIN( 249)											int v7;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												v7 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												v7 = c15;
            											}
HXDLIN( 249)											int maskPixel3 = v7;
HXDLIN( 249)											int this102 = col3;
HXDLIN( 249)											if ((maskPixel3 == 0)) {
HXDLIN( 249)												col3 = this102;
            											}
            											else {
HXDLIN( 249)												Float m03;
HXDLIN( 249)												int this103 = ((maskPixel3 >> 24) & 255);
HXDLIN( 249)												if ((this103 == 0)) {
HXDLIN( 249)													m03 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m03 = (( (Float)(this103) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m13;
HXDLIN( 249)												int this104 = ((maskPixel3 >> 16) & 255);
HXDLIN( 249)												if ((this104 == 0)) {
HXDLIN( 249)													m13 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m13 = (( (Float)(this104) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m23;
HXDLIN( 249)												int this105 = ((maskPixel3 >> 8) & 255);
HXDLIN( 249)												if ((this105 == 0)) {
HXDLIN( 249)													m23 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m23 = (( (Float)(this105) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m33;
HXDLIN( 249)												int this106 = (maskPixel3 & 255);
HXDLIN( 249)												if ((this106 == 0)) {
HXDLIN( 249)													m33 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m33 = (( (Float)(this106) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this102 >> 24) & 255)) )));
HXDLIN( 249)												int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this102 >> 16) & 255)) )));
HXDLIN( 249)												int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this102 >> 8) & 255)) )));
HXDLIN( 249)												int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this102 & 255)) )));
HXDLIN( 249)												col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 249)										if ((col3 != 0)) {
HXDLIN( 249)											int x11 = (dx4 - rectLeft3);
HXDLIN( 249)											int y11 = (dy4 - rectTop3);
HXDLIN( 249)											int c16 = col3;
HXDLIN( 249)											bool hitQuad26;
HXDLIN( 249)											if ((((c16 >> 24) & 255) < 254)) {
HXDLIN( 249)												hitQuad26 = undoImage9->transparent;
            											}
            											else {
HXDLIN( 249)												hitQuad26 = false;
            											}
HXDLIN( 249)											if (hitQuad26) {
HXDLIN( 249)												int location6;
HXDLIN( 249)												if (undoImage9->useVirtualPos) {
HXDLIN( 249)													location6 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            												}
            												else {
HXDLIN( 249)													location6 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            												}
HXDLIN( 249)												int this107 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 249)												int this108;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													this108 = ((((((this107 >> 24) & 255) << 24) | ((this107 & 255) << 16)) | (((this107 >> 8) & 255) << 8)) | ((this107 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													this108 = this107;
            												}
HXDLIN( 249)												Float a111;
HXDLIN( 249)												int this109 = ((this108 >> 24) & 255);
HXDLIN( 249)												if ((this109 == 0)) {
HXDLIN( 249)													a111 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a111 = (( (Float)(this109) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r16;
HXDLIN( 249)												int this110 = ((this108 >> 16) & 255);
HXDLIN( 249)												if ((this110 == 0)) {
HXDLIN( 249)													r16 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r16 = (( (Float)(this110) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g16;
HXDLIN( 249)												int this111 = ((this108 >> 8) & 255);
HXDLIN( 249)												if ((this111 == 0)) {
HXDLIN( 249)													g16 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g16 = (( (Float)(this111) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b112;
HXDLIN( 249)												int this112 = (this108 & 255);
HXDLIN( 249)												if ((this112 == 0)) {
HXDLIN( 249)													b112 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b112 = (( (Float)(this112) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a29;
HXDLIN( 249)												int this113 = ((col3 >> 24) & 255);
HXDLIN( 249)												if ((this113 == 0)) {
HXDLIN( 249)													a29 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a29 = (( (Float)(this113) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r26;
HXDLIN( 249)												int this114 = ((col3 >> 16) & 255);
HXDLIN( 249)												if ((this114 == 0)) {
HXDLIN( 249)													r26 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r26 = (( (Float)(this114) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g26;
HXDLIN( 249)												int this115 = ((col3 >> 8) & 255);
HXDLIN( 249)												if ((this115 == 0)) {
HXDLIN( 249)													g26 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g26 = (( (Float)(this115) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b210;
HXDLIN( 249)												int this116 = (col3 & 255);
HXDLIN( 249)												if ((this116 == 0)) {
HXDLIN( 249)													b210 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b210 = (( (Float)(this116) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a36 = (a111 * (( (Float)(1) ) - a29));
HXDLIN( 249)												int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a29))));
HXDLIN( 249)												int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a29))));
HXDLIN( 249)												int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a36) + (b210 * a29))));
HXDLIN( 249)												int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a29)));
HXDLIN( 249)												int blended6 = ((((a30 << 24) | (r10 << 16)) | (g10 << 8)) | b34);
HXDLIN( 249)												{
HXDLIN( 249)													int hitQuad27;
HXDLIN( 249)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)														hitQuad27 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            													}
            													else {
HXDLIN( 249)														hitQuad27 = blended6;
            													}
HXDLIN( 249)													::iterMagic::Iimg_obj::set(undoImage9->image,location6,hitQuad27);
            												}
            											}
            											else {
HXDLIN( 249)												::Dynamic this117 = undoImage9->image;
HXDLIN( 249)												int index15;
HXDLIN( 249)												if (undoImage9->useVirtualPos) {
HXDLIN( 249)													index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            												}
            												else {
HXDLIN( 249)													index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            												}
HXDLIN( 249)												int hitQuad28;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad28 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad28 = c16;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this117,index15,hitQuad28);
            											}
            										}
            										else {
HXDLIN( 249)											if (forceClear3) {
HXDLIN( 249)												::Dynamic this118 = undoImage9->image;
HXDLIN( 249)												int x12 = (dx4 - rectLeft3);
HXDLIN( 249)												int y12 = (dy4 - rectTop3);
HXDLIN( 249)												int index16;
HXDLIN( 249)												if (undoImage9->useVirtualPos) {
HXDLIN( 249)													index16 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x12) - undoImage9->virtualX));
            												}
            												else {
HXDLIN( 249)													index16 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage9->width) + x12)) ));
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this118,index16,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 249)				bool found3 = false;
HXDLIN( 249)				{
HXDLIN( 249)					int _g_min6 = xIter33->start;
HXDLIN( 249)					int _g_max6 = xIter33->max;
HXDLIN( 249)					while((_g_min6 < _g_max6)){
HXDLIN( 249)						_g_min6 = (_g_min6 + 1);
HXDLIN( 249)						int px3 = (_g_min6 - 1);
HXDLIN( 249)						Float pcx2 = (( (Float)(px3) ) - ax);
HXLINE( 619)						found3 = false;
HXLINE( 249)						{
HXDLIN( 249)							int _g_min7 = yIter33->start;
HXDLIN( 249)							int _g_max7 = yIter33->max;
HXDLIN( 249)							while((_g_min7 < _g_max7)){
HXDLIN( 249)								_g_min7 = (_g_min7 + 1);
HXDLIN( 249)								int py3 = (_g_min7 - 1);
HXDLIN( 249)								Float pcy2 = (( (Float)(py3) ) - ay);
HXDLIN( 249)								Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 249)								Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 249)								Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 249)								Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 249)								Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 249)								bool hitQuad29;
HXDLIN( 249)								bool hitQuad30;
HXDLIN( 249)								if ((ratioA2 >= 0)) {
HXDLIN( 249)									hitQuad30 = (ratioB2 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad30 = false;
            								}
HXDLIN( 249)								if (hitQuad30) {
HXDLIN( 249)									hitQuad29 = (ratioC2 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad29 = false;
            								}
HXDLIN( 249)								if (hitQuad29) {
HXDLIN( 249)									int i32 = ::Std_obj::_hx_int((( (Float)(aA2) ) * (soft * ratioB2)));
HXDLIN( 249)									if ((i32 > 255)) {
HXLINE(  24)										i32 = 255;
            									}
HXLINE( 249)									if ((i32 < 0)) {
HXLINE(  25)										i32 = 0;
            									}
HXLINE( 249)									int a37 = i32;
HXDLIN( 249)									int i33 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN( 249)									if ((i33 > 255)) {
HXLINE(  24)										i33 = 255;
            									}
HXLINE( 249)									if ((i33 < 0)) {
HXLINE(  25)										i33 = 0;
            									}
HXLINE( 249)									int r17 = i33;
HXDLIN( 249)									int i34 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN( 249)									if ((i34 > 255)) {
HXLINE(  24)										i34 = 255;
            									}
HXLINE( 249)									if ((i34 < 0)) {
HXLINE(  25)										i34 = 0;
            									}
HXLINE( 249)									int g17 = i34;
HXDLIN( 249)									int i35 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN( 249)									if ((i35 > 255)) {
HXLINE(  24)										i35 = 255;
            									}
HXLINE( 249)									if ((i35 < 0)) {
HXLINE(  25)										i35 = 0;
            									}
HXLINE( 249)									int b35 = i35;
HXDLIN( 249)									{
HXDLIN( 249)										int location7;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											location7 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this1->virtualY) * ( (Float)(this1->width) )) + px3) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											location7 = ::Std_obj::_hx_int(( (Float)(((py3 * this1->width) + px3)) ));
            										}
HXDLIN( 249)										bool hitQuad31;
HXDLIN( 249)										if (this1->transparent) {
HXDLIN( 249)											hitQuad31 = (a37 < 254);
            										}
            										else {
HXDLIN( 249)											hitQuad31 = false;
            										}
HXDLIN( 249)										if (hitQuad31) {
HXDLIN( 249)											int this119 = ::iterMagic::Iimg_obj::get(this1->image,location7);
HXDLIN( 249)											int old2;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												old2 = ((((((this119 >> 24) & 255) << 24) | ((this119 & 255) << 16)) | (((this119 >> 8) & 255) << 8)) | ((this119 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												old2 = this119;
            											}
HXDLIN( 249)											int rhs2 = ((((a37 << 24) | (r17 << 16)) | (g17 << 8)) | b35);
HXDLIN( 249)											Float a112;
HXDLIN( 249)											int this120 = ((old2 >> 24) & 255);
HXDLIN( 249)											if ((this120 == 0)) {
HXDLIN( 249)												a112 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a112 = (( (Float)(this120) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r18;
HXDLIN( 249)											int this121 = ((old2 >> 16) & 255);
HXDLIN( 249)											if ((this121 == 0)) {
HXDLIN( 249)												r18 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r18 = (( (Float)(this121) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g18;
HXDLIN( 249)											int this122 = ((old2 >> 8) & 255);
HXDLIN( 249)											if ((this122 == 0)) {
HXDLIN( 249)												g18 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g18 = (( (Float)(this122) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b113;
HXDLIN( 249)											int this123 = (old2 & 255);
HXDLIN( 249)											if ((this123 == 0)) {
HXDLIN( 249)												b113 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b113 = (( (Float)(this123) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a210;
HXDLIN( 249)											int this124 = ((rhs2 >> 24) & 255);
HXDLIN( 249)											if ((this124 == 0)) {
HXDLIN( 249)												a210 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a210 = (( (Float)(this124) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r27;
HXDLIN( 249)											int this125 = ((rhs2 >> 16) & 255);
HXDLIN( 249)											if ((this125 == 0)) {
HXDLIN( 249)												r27 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r27 = (( (Float)(this125) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g27;
HXDLIN( 249)											int this126 = ((rhs2 >> 8) & 255);
HXDLIN( 249)											if ((this126 == 0)) {
HXDLIN( 249)												g27 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g27 = (( (Float)(this126) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b211;
HXDLIN( 249)											int this127 = (rhs2 & 255);
HXDLIN( 249)											if ((this127 == 0)) {
HXDLIN( 249)												b211 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b211 = (( (Float)(this127) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a38 = (a112 * (( (Float)(1) ) - a210));
HXDLIN( 249)											int r19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r27 * a210))));
HXDLIN( 249)											int g19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g27 * a210))));
HXDLIN( 249)											int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a38) + (b211 * a210))));
HXDLIN( 249)											int a39 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a210)));
HXDLIN( 249)											int blended7 = ((((a39 << 24) | (r19 << 16)) | (g19 << 8)) | b36);
HXDLIN( 249)											{
HXDLIN( 249)												int hitQuad32;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad32 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad32 = blended7;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this1->image,location7,hitQuad32);
            											}
            										}
            										else {
HXDLIN( 249)											int value2;
HXDLIN( 249)											if (this1->isLittle) {
HXDLIN( 249)												value2 = ((((a37 << 24) | (b35 << 16)) | (g17 << 8)) | r17);
            											}
            											else {
HXDLIN( 249)												value2 = ((((a37 << 24) | (r17 << 16)) | (g17 << 8)) | b35);
            											}
HXDLIN( 249)											::iterMagic::Iimg_obj::set(this1->image,location7,value2);
            										}
            									}
HXLINE( 633)									found3 = true;
            								}
            								else {
HXDLIN( 249)									if (found3) {
HXDLIN( 249)										goto _hx_goto_481;
            									}
            								}
            							}
            							_hx_goto_481:;
            						}
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart v_yIter32;
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart v_xIter32;
HXDLIN( 249)				int v_undoY2;
HXDLIN( 249)				int v_undoX2;
HXDLIN( 249)				Float v_ty2;
HXDLIN( 249)				Float v_tx2;
HXDLIN( 249)				Float v_t02;
HXDLIN( 249)				Float v_sy2;
HXDLIN( 249)				Float v_sx2;
HXDLIN( 249)				Float v_s02;
HXDLIN( 249)				Float v_A2;
HXDLIN( 249)				Float ax3 = ex;
HXDLIN( 249)				Float ay3 = ey;
HXDLIN( 249)				 ::pi_xy::ImageStruct v_undoImage2 = null();
HXDLIN( 249)				Float bx4 = dx;
HXDLIN( 249)				Float by4 = dy;
HXDLIN( 249)				Float cx4 = ax;
HXDLIN( 249)				Float cy4 = ay;
HXDLIN( 249)				bool adjustWinding3 = (((((ax3 * by4) - (bx4 * ay3)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay3) - (ax3 * cy4))) > 0);
HXDLIN( 249)				if (!(adjustWinding3)) {
HXDLIN( 249)					Float bx_3 = bx4;
HXDLIN( 249)					Float by_3 = by4;
HXLINE(  24)					bx4 = cx4;
HXLINE(  25)					by4 = cy4;
HXLINE(  26)					cx4 = bx_3;
HXLINE(  27)					cy4 = by_3;
            				}
HXLINE( 249)				Float v_ax2 = ax3;
HXDLIN( 249)				Float v_ay2 = ay3;
HXDLIN( 249)				Float v_bx2 = bx4;
HXDLIN( 249)				Float v_by2 = by4;
HXDLIN( 249)				Float v_cx2 = cx4;
HXDLIN( 249)				Float v_cy2 = cy4;
HXDLIN( 249)				bool v_preCalculated2 = true;
HXDLIN( 249)				{
HXDLIN( 249)					v_s02 = ((v_ay2 * v_cx2) - (v_ax2 * v_cy2));
HXDLIN( 249)					v_sx2 = (v_cy2 - v_ay2);
HXDLIN( 249)					v_sy2 = (v_ax2 - v_cx2);
HXDLIN( 249)					v_t02 = ((v_ax2 * v_by2) - (v_ay2 * v_bx2));
HXDLIN( 249)					v_tx2 = (v_ay2 - v_by2);
HXDLIN( 249)					v_ty2 = (v_bx2 - v_ax2);
HXDLIN( 249)					v_A2 = ((((-(v_by2) * v_cx2) + (v_ay2 * (-(v_bx2) + v_cx2))) + (v_ax2 * (v_by2 - v_cy2))) + (v_bx2 * v_cy2));
HXDLIN( 249)					Float a40 = v_ax2;
HXDLIN( 249)					Float b37 = v_bx2;
HXDLIN( 249)					Float c17 = v_cx2;
HXDLIN( 249)					if ((a40 > b37)) {
HXDLIN( 249)						if ((a40 > c17)) {
HXDLIN( 249)							int min24;
HXDLIN( 249)							if ((b37 > c17)) {
HXDLIN( 249)								min24 = ::Math_obj::floor(c17);
            							}
            							else {
HXDLIN( 249)								min24 = ::Math_obj::floor(b37);
            							}
HXDLIN( 249)							int ii_min48 = min24;
HXDLIN( 249)							int ii_max48 = ::Math_obj::ceil(a40);
HXDLIN( 249)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            						}
            						else {
HXDLIN( 249)							int ii_min49 = ::Math_obj::floor(b37);
HXDLIN( 249)							int ii_max49 = ::Math_obj::ceil(c17);
HXDLIN( 249)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            						}
            					}
            					else {
HXDLIN( 249)						if ((b37 > c17)) {
HXDLIN( 249)							int min25;
HXDLIN( 249)							if ((a40 > c17)) {
HXDLIN( 249)								min25 = ::Math_obj::floor(c17);
            							}
            							else {
HXDLIN( 249)								min25 = ::Math_obj::ceil(a40);
            							}
HXDLIN( 249)							int ii_min50 = min25;
HXDLIN( 249)							int ii_max50 = ::Math_obj::ceil(b37);
HXDLIN( 249)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            						}
            						else {
HXDLIN( 249)							int ii_min51 = ::Math_obj::floor(a40);
HXDLIN( 249)							int ii_max51 = ::Math_obj::ceil(c17);
HXDLIN( 249)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            						}
            					}
HXDLIN( 249)					Float a41 = v_ay2;
HXDLIN( 249)					Float b38 = v_by2;
HXDLIN( 249)					Float c18 = v_cy2;
HXDLIN( 249)					if ((a41 > b38)) {
HXDLIN( 249)						if ((a41 > c18)) {
HXDLIN( 249)							int min26;
HXDLIN( 249)							if ((b38 > c18)) {
HXDLIN( 249)								min26 = ::Math_obj::floor(c18);
            							}
            							else {
HXDLIN( 249)								min26 = ::Math_obj::floor(b38);
            							}
HXDLIN( 249)							int ii_min52 = min26;
HXDLIN( 249)							int ii_max52 = ::Math_obj::ceil(a41);
HXDLIN( 249)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            						}
            						else {
HXDLIN( 249)							int ii_min53 = ::Math_obj::floor(b38);
HXDLIN( 249)							int ii_max53 = ::Math_obj::ceil(c18);
HXDLIN( 249)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            						}
            					}
            					else {
HXDLIN( 249)						if ((b38 > c18)) {
HXDLIN( 249)							int min27;
HXDLIN( 249)							if ((a41 > c18)) {
HXDLIN( 249)								min27 = ::Math_obj::floor(c18);
            							}
            							else {
HXDLIN( 249)								min27 = ::Math_obj::ceil(a41);
            							}
HXDLIN( 249)							int ii_min54 = min27;
HXDLIN( 249)							int ii_max54 = ::Math_obj::ceil(b38);
HXDLIN( 249)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            						}
            						else {
HXDLIN( 249)							int ii_min55 = ::Math_obj::floor(a41);
HXDLIN( 249)							int ii_max55 = ::Math_obj::ceil(c18);
HXDLIN( 249)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            						}
            					}
            				}
HXDLIN( 249)				if (hasUndo3) {
HXDLIN( 249)					v_undoImage2 = undoImage9;
HXDLIN( 249)					v_undoX2 = xIter33->start;
HXDLIN( 249)					v_undoY2 = yIter33->start;
            				}
HXDLIN( 249)				 ::pi_xy::algo::HitQuad v8 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 249)				hitQuad = v8;
            			}
            			else {
HXDLIN( 249)				Float sin2 = ::Math_obj::sin(theta);
HXDLIN( 249)				Float cos2 = ::Math_obj::cos(theta);
HXDLIN( 249)				Float radius11 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN( 249)				Float radius22 = (thick / ( (Float)(2) ));
HXDLIN( 249)				Float dx5 = ((Float)0.1);
HXDLIN( 249)				Float dy5 = radius11;
HXDLIN( 249)				Float cx5 = h2;
HXDLIN( 249)				Float cy5 = radius22;
HXDLIN( 249)				Float bx5 = h2;
HXDLIN( 249)				Float by5 = -(radius22);
HXDLIN( 249)				Float ax4 = ((Float)0.1);
HXDLIN( 249)				Float ay4 = -(radius11);
HXDLIN( 249)				Float temp1 = ((Float)0.);
HXLINE( 288)				temp1 = (px + ((ax4 * cos2) - (ay4 * sin2)));
HXLINE( 289)				ay4 = (py + ((ay4 * cos2) + (ax4 * sin2)));
HXLINE( 290)				ax4 = temp1;
HXLINE( 292)				temp1 = (px + ((bx5 * cos2) - (by5 * sin2)));
HXLINE( 293)				by5 = (py + ((by5 * cos2) + (bx5 * sin2)));
HXLINE( 294)				bx5 = temp1;
HXLINE( 296)				temp1 = (px + ((cx5 * cos2) - (cy5 * sin2)));
HXLINE( 297)				cy5 = (py + ((cy5 * cos2) + (cx5 * sin2)));
HXLINE( 298)				cx5 = temp1;
HXLINE( 300)				temp1 = (px + ((dx5 * cos2) - (dy5 * sin2)));
HXLINE( 301)				dy5 = (py + ((dy5 * cos2) + (dx5 * sin2)));
HXLINE( 302)				dx5 = temp1;
HXLINE( 249)				Float ex1 = ((((ax4 + bx5) + cx5) + dx5) / ( (Float)(4) ));
HXDLIN( 249)				Float ey1 = ((((ay4 + by5) + cy5) + dy5) / ( (Float)(4) ));
HXDLIN( 249)				bool hasUndo4 = false;
HXDLIN( 249)				int aA3 = ((color >> 24) & 255);
HXDLIN( 249)				int rA3 = ((color >> 16) & 255);
HXDLIN( 249)				int gA3 = ((color >> 8) & 255);
HXDLIN( 249)				int bA3 = (color & 255);
HXDLIN( 249)				Float bcx3 = (ax4 - bx5);
HXDLIN( 249)				Float bcy3 = (ay4 - by5);
HXDLIN( 249)				Float acx3 = (ex1 - bx5);
HXDLIN( 249)				Float acy3 = (ey1 - by5);
HXDLIN( 249)				Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 249)				Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 249)				Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 249)				Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN( 249)				if ((ex1 > ax4)) {
HXDLIN( 249)					if ((ex1 > bx5)) {
HXDLIN( 249)						int min28;
HXDLIN( 249)						if ((ax4 > bx5)) {
HXDLIN( 249)							min28 = ::Math_obj::floor(bx5);
            						}
            						else {
HXDLIN( 249)							min28 = ::Math_obj::floor(ax4);
            						}
HXDLIN( 249)						int ii_min56 = min28;
HXDLIN( 249)						int ii_max56 = ::Math_obj::ceil(ex1);
HXDLIN( 249)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            					}
            					else {
HXDLIN( 249)						int ii_min57 = ::Math_obj::floor(ax4);
HXDLIN( 249)						int ii_max57 = ::Math_obj::ceil(bx5);
HXDLIN( 249)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            					}
            				}
            				else {
HXDLIN( 249)					if ((ax4 > bx5)) {
HXDLIN( 249)						int min29;
HXDLIN( 249)						if ((ex1 > bx5)) {
HXDLIN( 249)							min29 = ::Math_obj::floor(bx5);
            						}
            						else {
HXDLIN( 249)							min29 = ::Math_obj::ceil(ex1);
            						}
HXDLIN( 249)						int ii_min58 = min29;
HXDLIN( 249)						int ii_max58 = ::Math_obj::ceil(ax4);
HXDLIN( 249)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            					}
            					else {
HXDLIN( 249)						int ii_min59 = ::Math_obj::floor(ex1);
HXDLIN( 249)						int ii_max59 = ::Math_obj::ceil(bx5);
HXDLIN( 249)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN( 249)				if ((ey1 > ay4)) {
HXDLIN( 249)					if ((ey1 > by5)) {
HXDLIN( 249)						int min30;
HXDLIN( 249)						if ((ay4 > by5)) {
HXDLIN( 249)							min30 = ::Math_obj::floor(by5);
            						}
            						else {
HXDLIN( 249)							min30 = ::Math_obj::floor(ay4);
            						}
HXDLIN( 249)						int ii_min60 = min30;
HXDLIN( 249)						int ii_max60 = ::Math_obj::ceil(ey1);
HXDLIN( 249)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            					}
            					else {
HXDLIN( 249)						int ii_min61 = ::Math_obj::floor(ay4);
HXDLIN( 249)						int ii_max61 = ::Math_obj::ceil(by5);
HXDLIN( 249)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            					}
            				}
            				else {
HXDLIN( 249)					if ((ay4 > by5)) {
HXDLIN( 249)						int min31;
HXDLIN( 249)						if ((ey1 > by5)) {
HXDLIN( 249)							min31 = ::Math_obj::floor(by5);
            						}
            						else {
HXDLIN( 249)							min31 = ::Math_obj::ceil(ey1);
            						}
HXDLIN( 249)						int ii_min62 = min31;
HXDLIN( 249)						int ii_max62 = ::Math_obj::ceil(ay4);
HXDLIN( 249)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            					}
            					else {
HXDLIN( 249)						int ii_min63 = ::Math_obj::floor(ey1);
HXDLIN( 249)						int ii_max63 = ::Math_obj::ceil(by5);
HXDLIN( 249)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN( 249)				if (hasUndo4) {
HXDLIN( 249)					int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN( 249)					int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN( 249)					 ::Dynamic imageType4 = null();
HXDLIN( 249)					 ::pi_xy::ImageStruct this128 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 249)					if (::hx::IsNull( imageType4 )) {
HXLINE(  54)						imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 249)					::Dynamic undoImage13;
HXDLIN( 249)					switch((int)(( (int)(imageType4) ))){
            						case (int)0: {
HXDLIN( 249)							 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::BytesImg b39 = byt4;
HXDLIN( 249)							{
HXDLIN( 249)								b39->width = width4;
HXDLIN( 249)								b39->height = height4;
HXDLIN( 249)								b39->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 249)								b39->data = ::haxe::io::Bytes_obj::alloc((b39->length * 4));
HXDLIN( 249)								{
HXDLIN( 249)									int len8 = b39->length;
HXDLIN( 249)									int w4 = 0;
HXDLIN( 249)									{
HXDLIN( 249)										int _g80 = 0;
HXDLIN( 249)										int _g81 = b39->height;
HXDLIN( 249)										while((_g80 < _g81)){
HXDLIN( 249)											_g80 = (_g80 + 1);
HXDLIN( 249)											int y13 = (_g80 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												int _g82 = 0;
HXDLIN( 249)												int _g83 = b39->width;
HXDLIN( 249)												while((_g82 < _g83)){
HXDLIN( 249)													_g82 = (_g82 + 1);
HXDLIN( 249)													int x13 = (_g82 - 1);
HXDLIN( 249)													{
HXDLIN( 249)														w4 = (w4 + 1);
HXDLIN( 249)														b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w4 = (w4 + 1);
HXDLIN( 249)														b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w4 = (w4 + 1);
HXDLIN( 249)														b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w4 = (w4 + 1);
HXDLIN( 249)														b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage13 = b39;
            						}
            						break;
            						case (int)1: {
HXDLIN( 249)							 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::ArrIntImg a42 = arrI4;
HXDLIN( 249)							{
HXDLIN( 249)								a42->width = width4;
HXDLIN( 249)								a42->height = height4;
HXDLIN( 249)								a42->data = ::Array_obj< int >::__new(0);
HXDLIN( 249)								a42->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 249)								{
HXDLIN( 249)									int _g84 = 0;
HXDLIN( 249)									int _g85 = a42->length;
HXDLIN( 249)									while((_g84 < _g85)){
HXDLIN( 249)										_g84 = (_g84 + 1);
HXDLIN( 249)										int i36 = (_g84 - 1);
HXDLIN( 249)										a42->data[i36] = 0;
            									}
            								}
            							}
HXDLIN( 249)							undoImage13 = a42;
            						}
            						break;
            						case (int)2: {
HXDLIN( 249)							 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::U32ArrImg b40 = u32a4;
HXDLIN( 249)							{
HXDLIN( 249)								b40->width = width4;
HXDLIN( 249)								b40->height = height4;
HXDLIN( 249)								b40->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 249)								int size4 = (b40->length * 4);
HXDLIN( 249)								b40->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN( 249)								{
HXDLIN( 249)									int _g86 = 0;
HXDLIN( 249)									int _g87 = b40->length;
HXDLIN( 249)									while((_g86 < _g87)){
HXDLIN( 249)										_g86 = (_g86 + 1);
HXDLIN( 249)										int i37 = (_g86 - 1);
HXDLIN( 249)										{
HXDLIN( 249)											 ::haxe::io::ArrayBufferViewImpl this129 = b40->data;
HXDLIN( 249)											bool undoImage14;
HXDLIN( 249)											if ((i37 >= 0)) {
HXDLIN( 249)												undoImage14 = (i37 < (this129->byteLength >> 2));
            											}
            											else {
HXDLIN( 249)												undoImage14 = false;
            											}
HXDLIN( 249)											if (undoImage14) {
HXDLIN( 249)												 ::haxe::io::Bytes _this4 = this129->bytes;
HXDLIN( 249)												int pos4 = ((i37 << 2) + this129->byteOffset);
HXDLIN( 249)												_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN( 249)												_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage13 = b40;
            						}
            						break;
            						case (int)3: {
HXDLIN( 249)							 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::VecIntImg v9 = vec4;
HXDLIN( 249)							{
HXDLIN( 249)								v9->width = width4;
HXDLIN( 249)								v9->height = height4;
HXDLIN( 249)								v9->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 249)								v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN( 249)								{
HXDLIN( 249)									int _g88 = 0;
HXDLIN( 249)									int _g89 = v9->length;
HXDLIN( 249)									while((_g88 < _g89)){
HXDLIN( 249)										_g88 = (_g88 + 1);
HXDLIN( 249)										int i38 = (_g88 - 1);
HXDLIN( 249)										v9->data->__unsafe_set(i38,0);
            									}
            								}
            							}
HXDLIN( 249)							undoImage13 = v9;
            						}
            						break;
            						case (int)4: {
HXDLIN( 249)							 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::StackIntImg b41 = sInt4;
HXDLIN( 249)							{
HXDLIN( 249)								b41->width = width4;
HXDLIN( 249)								b41->height = height4;
HXDLIN( 249)								b41->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 249)								b41->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 249)								{
HXDLIN( 249)									int len9 = b41->length;
HXDLIN( 249)									 ::haxe::ds::GenericStack_Int d4 = b41->data;
HXDLIN( 249)									if (::hx::IsNull( d4->head )) {
HXDLIN( 249)										int _g90 = 0;
HXDLIN( 249)										int _g91 = len9;
HXDLIN( 249)										while((_g90 < _g91)){
HXDLIN( 249)											_g90 = (_g90 + 1);
HXDLIN( 249)											int i39 = (_g90 - 1);
HXDLIN( 249)											d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            										}
            									}
            									else {
HXDLIN( 249)										int _g92 = 0;
HXDLIN( 249)										int _g93 = len9;
HXDLIN( 249)										while((_g92 < _g93)){
HXDLIN( 249)											_g92 = (_g92 + 1);
HXDLIN( 249)											int i40 = (_g92 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int l4 = b41->data->head;
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN( 249)												{
HXDLIN( 249)													int _g94 = 0;
HXDLIN( 249)													int _g95 = i40;
HXDLIN( 249)													while((_g94 < _g95)){
HXDLIN( 249)														_g94 = (_g94 + 1);
HXDLIN( 249)														int i41 = (_g94 - 1);
HXLINE( 345)														prev4 = l4;
HXLINE( 346)														l4 = l4->next;
            													}
            												}
HXLINE( 249)												if (::hx::IsNull( prev4 )) {
HXDLIN( 249)													b41->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 249)													l4 = null();
            												}
            												else {
HXDLIN( 249)													prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 249)													l4 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage13 = b41;
            						}
            						break;
            					}
HXDLIN( 249)					this128->image = undoImage13;
HXDLIN( 249)					this128->width = width4;
HXDLIN( 249)					this128->height = height4;
HXDLIN( 249)					this128->imageType = ( (int)(imageType4) );
HXDLIN( 249)					undoImage12 = this128;
HXDLIN( 249)					{
HXDLIN( 249)						int rectLeft4 = xIter34->start;
HXDLIN( 249)						int rectTop4 = yIter34->start;
HXDLIN( 249)						int rectRight4 = xIter34->max;
HXDLIN( 249)						bool forceClear4 = false;
HXDLIN( 249)						{
HXDLIN( 249)							int _g96 = rectTop4;
HXDLIN( 249)							int _g97 = yIter34->max;
HXDLIN( 249)							while((_g96 < _g97)){
HXDLIN( 249)								_g96 = (_g96 + 1);
HXDLIN( 249)								int dy6 = (_g96 - 1);
HXDLIN( 249)								{
HXDLIN( 249)									int _g98 = rectLeft4;
HXDLIN( 249)									int _g99 = rectRight4;
HXDLIN( 249)									while((_g98 < _g99)){
HXDLIN( 249)										_g98 = (_g98 + 1);
HXDLIN( 249)										int dx6 = (_g98 - 1);
HXDLIN( 249)										::Dynamic this130 = this1->image;
HXDLIN( 249)										int index17;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											index17 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx6) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											index17 = ::Std_obj::_hx_int(( (Float)(((dy6 * this1->width) + dx6)) ));
            										}
HXDLIN( 249)										int c19 = ::iterMagic::Iimg_obj::get(this130,index17);
HXDLIN( 249)										int col4;
HXDLIN( 249)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)											col4 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            										}
            										else {
HXDLIN( 249)											col4 = c19;
            										}
HXDLIN( 249)										bool hitQuad33;
HXDLIN( 249)										if (this1->useMask) {
HXDLIN( 249)											hitQuad33 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 249)											hitQuad33 = false;
            										}
HXDLIN( 249)										if (hitQuad33) {
HXDLIN( 249)											 ::pi_xy::ImageStruct this131 = this1->mask;
HXDLIN( 249)											::Dynamic this132 = this131->image;
HXDLIN( 249)											int index18;
HXDLIN( 249)											if (this131->useVirtualPos) {
HXDLIN( 249)												index18 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this131->virtualY) * ( (Float)(this131->width) )) + dx6) - this131->virtualX));
            											}
            											else {
HXDLIN( 249)												index18 = ::Std_obj::_hx_int(( (Float)(((dy6 * this131->width) + dx6)) ));
            											}
HXDLIN( 249)											int c20 = ::iterMagic::Iimg_obj::get(this132,index18);
HXDLIN( 249)											int v10;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												v10 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												v10 = c20;
            											}
HXDLIN( 249)											int maskPixel4 = v10;
HXDLIN( 249)											int this133 = col4;
HXDLIN( 249)											if ((maskPixel4 == 0)) {
HXDLIN( 249)												col4 = this133;
            											}
            											else {
HXDLIN( 249)												Float m04;
HXDLIN( 249)												int this134 = ((maskPixel4 >> 24) & 255);
HXDLIN( 249)												if ((this134 == 0)) {
HXDLIN( 249)													m04 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m04 = (( (Float)(this134) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m14;
HXDLIN( 249)												int this135 = ((maskPixel4 >> 16) & 255);
HXDLIN( 249)												if ((this135 == 0)) {
HXDLIN( 249)													m14 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m14 = (( (Float)(this135) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m24;
HXDLIN( 249)												int this136 = ((maskPixel4 >> 8) & 255);
HXDLIN( 249)												if ((this136 == 0)) {
HXDLIN( 249)													m24 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m24 = (( (Float)(this136) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m34;
HXDLIN( 249)												int this137 = (maskPixel4 & 255);
HXDLIN( 249)												if ((this137 == 0)) {
HXDLIN( 249)													m34 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m34 = (( (Float)(this137) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this133 >> 24) & 255)) )));
HXDLIN( 249)												int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this133 >> 16) & 255)) )));
HXDLIN( 249)												int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this133 >> 8) & 255)) )));
HXDLIN( 249)												int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this133 & 255)) )));
HXDLIN( 249)												col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 249)										if ((col4 != 0)) {
HXDLIN( 249)											int x14 = (dx6 - rectLeft4);
HXDLIN( 249)											int y14 = (dy6 - rectTop4);
HXDLIN( 249)											int c21 = col4;
HXDLIN( 249)											bool hitQuad34;
HXDLIN( 249)											if ((((c21 >> 24) & 255) < 254)) {
HXDLIN( 249)												hitQuad34 = undoImage12->transparent;
            											}
            											else {
HXDLIN( 249)												hitQuad34 = false;
            											}
HXDLIN( 249)											if (hitQuad34) {
HXDLIN( 249)												int location8;
HXDLIN( 249)												if (undoImage12->useVirtualPos) {
HXDLIN( 249)													location8 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x14) - undoImage12->virtualX));
            												}
            												else {
HXDLIN( 249)													location8 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage12->width) + x14)) ));
            												}
HXDLIN( 249)												int this138 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN( 249)												int this139;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													this139 = ((((((this138 >> 24) & 255) << 24) | ((this138 & 255) << 16)) | (((this138 >> 8) & 255) << 8)) | ((this138 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													this139 = this138;
            												}
HXDLIN( 249)												Float a113;
HXDLIN( 249)												int this140 = ((this139 >> 24) & 255);
HXDLIN( 249)												if ((this140 == 0)) {
HXDLIN( 249)													a113 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a113 = (( (Float)(this140) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r110;
HXDLIN( 249)												int this141 = ((this139 >> 16) & 255);
HXDLIN( 249)												if ((this141 == 0)) {
HXDLIN( 249)													r110 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r110 = (( (Float)(this141) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g110;
HXDLIN( 249)												int this142 = ((this139 >> 8) & 255);
HXDLIN( 249)												if ((this142 == 0)) {
HXDLIN( 249)													g110 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g110 = (( (Float)(this142) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b114;
HXDLIN( 249)												int this143 = (this139 & 255);
HXDLIN( 249)												if ((this143 == 0)) {
HXDLIN( 249)													b114 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b114 = (( (Float)(this143) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a211;
HXDLIN( 249)												int this144 = ((col4 >> 24) & 255);
HXDLIN( 249)												if ((this144 == 0)) {
HXDLIN( 249)													a211 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a211 = (( (Float)(this144) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r28;
HXDLIN( 249)												int this145 = ((col4 >> 16) & 255);
HXDLIN( 249)												if ((this145 == 0)) {
HXDLIN( 249)													r28 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r28 = (( (Float)(this145) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g28;
HXDLIN( 249)												int this146 = ((col4 >> 8) & 255);
HXDLIN( 249)												if ((this146 == 0)) {
HXDLIN( 249)													g28 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g28 = (( (Float)(this146) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b212;
HXDLIN( 249)												int this147 = (col4 & 255);
HXDLIN( 249)												if ((this147 == 0)) {
HXDLIN( 249)													b212 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b212 = (( (Float)(this147) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN( 249)												int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r28 * a211))));
HXDLIN( 249)												int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g28 * a211))));
HXDLIN( 249)												int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b212 * a211))));
HXDLIN( 249)												int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN( 249)												int blended8 = ((((a43 << 24) | (r20 << 16)) | (g20 << 8)) | b42);
HXDLIN( 249)												{
HXDLIN( 249)													int hitQuad35;
HXDLIN( 249)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)														hitQuad35 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            													}
            													else {
HXDLIN( 249)														hitQuad35 = blended8;
            													}
HXDLIN( 249)													::iterMagic::Iimg_obj::set(undoImage12->image,location8,hitQuad35);
            												}
            											}
            											else {
HXDLIN( 249)												::Dynamic this148 = undoImage12->image;
HXDLIN( 249)												int index19;
HXDLIN( 249)												if (undoImage12->useVirtualPos) {
HXDLIN( 249)													index19 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x14) - undoImage12->virtualX));
            												}
            												else {
HXDLIN( 249)													index19 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage12->width) + x14)) ));
            												}
HXDLIN( 249)												int hitQuad36;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad36 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad36 = c21;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this148,index19,hitQuad36);
            											}
            										}
            										else {
HXDLIN( 249)											if (forceClear4) {
HXDLIN( 249)												::Dynamic this149 = undoImage12->image;
HXDLIN( 249)												int x15 = (dx6 - rectLeft4);
HXDLIN( 249)												int y15 = (dy6 - rectTop4);
HXDLIN( 249)												int index20;
HXDLIN( 249)												if (undoImage12->useVirtualPos) {
HXDLIN( 249)													index20 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x15) - undoImage12->virtualX));
            												}
            												else {
HXDLIN( 249)													index20 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage12->width) + x15)) ));
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this149,index20,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 249)				bool found4 = false;
HXDLIN( 249)				{
HXDLIN( 249)					int _g_min8 = xIter34->start;
HXDLIN( 249)					int _g_max8 = xIter34->max;
HXDLIN( 249)					while((_g_min8 < _g_max8)){
HXDLIN( 249)						_g_min8 = (_g_min8 + 1);
HXDLIN( 249)						int px4 = (_g_min8 - 1);
HXDLIN( 249)						Float pcx3 = (( (Float)(px4) ) - bx5);
HXLINE( 619)						found4 = false;
HXLINE( 249)						{
HXDLIN( 249)							int _g_min9 = yIter34->start;
HXDLIN( 249)							int _g_max9 = yIter34->max;
HXDLIN( 249)							while((_g_min9 < _g_max9)){
HXDLIN( 249)								_g_min9 = (_g_min9 + 1);
HXDLIN( 249)								int py4 = (_g_min9 - 1);
HXDLIN( 249)								Float pcy3 = (( (Float)(py4) ) - by5);
HXDLIN( 249)								Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 249)								Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 249)								Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 249)								Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 249)								Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 249)								bool hitQuad37;
HXDLIN( 249)								bool hitQuad38;
HXDLIN( 249)								if ((ratioA3 >= 0)) {
HXDLIN( 249)									hitQuad38 = (ratioB3 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad38 = false;
            								}
HXDLIN( 249)								if (hitQuad38) {
HXDLIN( 249)									hitQuad37 = (ratioC3 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad37 = false;
            								}
HXDLIN( 249)								if (hitQuad37) {
HXDLIN( 249)									int i42 = ::Std_obj::_hx_int((( (Float)(aA3) ) * (soft * ratioB3)));
HXDLIN( 249)									if ((i42 > 255)) {
HXLINE(  24)										i42 = 255;
            									}
HXLINE( 249)									if ((i42 < 0)) {
HXLINE(  25)										i42 = 0;
            									}
HXLINE( 249)									int a44 = i42;
HXDLIN( 249)									int i43 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN( 249)									if ((i43 > 255)) {
HXLINE(  24)										i43 = 255;
            									}
HXLINE( 249)									if ((i43 < 0)) {
HXLINE(  25)										i43 = 0;
            									}
HXLINE( 249)									int r29 = i43;
HXDLIN( 249)									int i44 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN( 249)									if ((i44 > 255)) {
HXLINE(  24)										i44 = 255;
            									}
HXLINE( 249)									if ((i44 < 0)) {
HXLINE(  25)										i44 = 0;
            									}
HXLINE( 249)									int g29 = i44;
HXDLIN( 249)									int i45 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN( 249)									if ((i45 > 255)) {
HXLINE(  24)										i45 = 255;
            									}
HXLINE( 249)									if ((i45 < 0)) {
HXLINE(  25)										i45 = 0;
            									}
HXLINE( 249)									int b43 = i45;
HXDLIN( 249)									{
HXDLIN( 249)										int location9;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											location9 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - this1->virtualY) * ( (Float)(this1->width) )) + px4) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											location9 = ::Std_obj::_hx_int(( (Float)(((py4 * this1->width) + px4)) ));
            										}
HXDLIN( 249)										bool hitQuad39;
HXDLIN( 249)										if (this1->transparent) {
HXDLIN( 249)											hitQuad39 = (a44 < 254);
            										}
            										else {
HXDLIN( 249)											hitQuad39 = false;
            										}
HXDLIN( 249)										if (hitQuad39) {
HXDLIN( 249)											int this150 = ::iterMagic::Iimg_obj::get(this1->image,location9);
HXDLIN( 249)											int old3;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												old3 = ((((((this150 >> 24) & 255) << 24) | ((this150 & 255) << 16)) | (((this150 >> 8) & 255) << 8)) | ((this150 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												old3 = this150;
            											}
HXDLIN( 249)											int rhs3 = ((((a44 << 24) | (r29 << 16)) | (g29 << 8)) | b43);
HXDLIN( 249)											Float a114;
HXDLIN( 249)											int this151 = ((old3 >> 24) & 255);
HXDLIN( 249)											if ((this151 == 0)) {
HXDLIN( 249)												a114 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a114 = (( (Float)(this151) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r111;
HXDLIN( 249)											int this152 = ((old3 >> 16) & 255);
HXDLIN( 249)											if ((this152 == 0)) {
HXDLIN( 249)												r111 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r111 = (( (Float)(this152) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g111;
HXDLIN( 249)											int this153 = ((old3 >> 8) & 255);
HXDLIN( 249)											if ((this153 == 0)) {
HXDLIN( 249)												g111 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g111 = (( (Float)(this153) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b115;
HXDLIN( 249)											int this154 = (old3 & 255);
HXDLIN( 249)											if ((this154 == 0)) {
HXDLIN( 249)												b115 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b115 = (( (Float)(this154) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a212;
HXDLIN( 249)											int this155 = ((rhs3 >> 24) & 255);
HXDLIN( 249)											if ((this155 == 0)) {
HXDLIN( 249)												a212 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a212 = (( (Float)(this155) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r210;
HXDLIN( 249)											int this156 = ((rhs3 >> 16) & 255);
HXDLIN( 249)											if ((this156 == 0)) {
HXDLIN( 249)												r210 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r210 = (( (Float)(this156) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g210;
HXDLIN( 249)											int this157 = ((rhs3 >> 8) & 255);
HXDLIN( 249)											if ((this157 == 0)) {
HXDLIN( 249)												g210 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g210 = (( (Float)(this157) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b213;
HXDLIN( 249)											int this158 = (rhs3 & 255);
HXDLIN( 249)											if ((this158 == 0)) {
HXDLIN( 249)												b213 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b213 = (( (Float)(this158) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN( 249)											int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a311) + (r210 * a212))));
HXDLIN( 249)											int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a311) + (g210 * a212))));
HXDLIN( 249)											int b44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b213 * a212))));
HXDLIN( 249)											int a45 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN( 249)											int blended9 = ((((a45 << 24) | (r30 << 16)) | (g30 << 8)) | b44);
HXDLIN( 249)											{
HXDLIN( 249)												int hitQuad40;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad40 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad40 = blended9;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this1->image,location9,hitQuad40);
            											}
            										}
            										else {
HXDLIN( 249)											int value3;
HXDLIN( 249)											if (this1->isLittle) {
HXDLIN( 249)												value3 = ((((a44 << 24) | (b43 << 16)) | (g29 << 8)) | r29);
            											}
            											else {
HXDLIN( 249)												value3 = ((((a44 << 24) | (r29 << 16)) | (g29 << 8)) | b43);
            											}
HXDLIN( 249)											::iterMagic::Iimg_obj::set(this1->image,location9,value3);
            										}
            									}
HXLINE( 633)									found4 = true;
            								}
            								else {
HXDLIN( 249)									if (found4) {
HXDLIN( 249)										goto _hx_goto_493;
            									}
            								}
            							}
            							_hx_goto_493:;
            						}
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart v_yIter33;
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart v_xIter33;
HXDLIN( 249)				int v_undoY3;
HXDLIN( 249)				int v_undoX3;
HXDLIN( 249)				Float v_ty3;
HXDLIN( 249)				Float v_tx3;
HXDLIN( 249)				Float v_t03;
HXDLIN( 249)				Float v_sy3;
HXDLIN( 249)				Float v_sx3;
HXDLIN( 249)				Float v_s03;
HXDLIN( 249)				Float v_A3;
HXDLIN( 249)				Float ax5 = ex1;
HXDLIN( 249)				Float ay5 = ey1;
HXDLIN( 249)				 ::pi_xy::ImageStruct v_undoImage3 = null();
HXDLIN( 249)				Float bx6 = ax4;
HXDLIN( 249)				Float by6 = ay4;
HXDLIN( 249)				Float cx6 = bx5;
HXDLIN( 249)				Float cy6 = by5;
HXDLIN( 249)				bool adjustWinding4 = (((((ax5 * by6) - (bx6 * ay5)) + ((bx6 * cy6) - (cx6 * by6))) + ((cx6 * ay5) - (ax5 * cy6))) > 0);
HXDLIN( 249)				if (!(adjustWinding4)) {
HXDLIN( 249)					Float bx_4 = bx6;
HXDLIN( 249)					Float by_4 = by6;
HXLINE(  24)					bx6 = cx6;
HXLINE(  25)					by6 = cy6;
HXLINE(  26)					cx6 = bx_4;
HXLINE(  27)					cy6 = by_4;
            				}
HXLINE( 249)				Float v_ax3 = ax5;
HXDLIN( 249)				Float v_ay3 = ay5;
HXDLIN( 249)				Float v_bx3 = bx6;
HXDLIN( 249)				Float v_by3 = by6;
HXDLIN( 249)				Float v_cx3 = cx6;
HXDLIN( 249)				Float v_cy3 = cy6;
HXDLIN( 249)				bool v_preCalculated3 = true;
HXDLIN( 249)				{
HXDLIN( 249)					v_s03 = ((v_ay3 * v_cx3) - (v_ax3 * v_cy3));
HXDLIN( 249)					v_sx3 = (v_cy3 - v_ay3);
HXDLIN( 249)					v_sy3 = (v_ax3 - v_cx3);
HXDLIN( 249)					v_t03 = ((v_ax3 * v_by3) - (v_ay3 * v_bx3));
HXDLIN( 249)					v_tx3 = (v_ay3 - v_by3);
HXDLIN( 249)					v_ty3 = (v_bx3 - v_ax3);
HXDLIN( 249)					v_A3 = ((((-(v_by3) * v_cx3) + (v_ay3 * (-(v_bx3) + v_cx3))) + (v_ax3 * (v_by3 - v_cy3))) + (v_bx3 * v_cy3));
HXDLIN( 249)					Float a46 = v_ax3;
HXDLIN( 249)					Float b45 = v_bx3;
HXDLIN( 249)					Float c22 = v_cx3;
HXDLIN( 249)					if ((a46 > b45)) {
HXDLIN( 249)						if ((a46 > c22)) {
HXDLIN( 249)							int min32;
HXDLIN( 249)							if ((b45 > c22)) {
HXDLIN( 249)								min32 = ::Math_obj::floor(c22);
            							}
            							else {
HXDLIN( 249)								min32 = ::Math_obj::floor(b45);
            							}
HXDLIN( 249)							int ii_min64 = min32;
HXDLIN( 249)							int ii_max64 = ::Math_obj::ceil(a46);
HXDLIN( 249)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min64,ii_max64);
            						}
            						else {
HXDLIN( 249)							int ii_min65 = ::Math_obj::floor(b45);
HXDLIN( 249)							int ii_max65 = ::Math_obj::ceil(c22);
HXDLIN( 249)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min65,ii_max65);
            						}
            					}
            					else {
HXDLIN( 249)						if ((b45 > c22)) {
HXDLIN( 249)							int min33;
HXDLIN( 249)							if ((a46 > c22)) {
HXDLIN( 249)								min33 = ::Math_obj::floor(c22);
            							}
            							else {
HXDLIN( 249)								min33 = ::Math_obj::ceil(a46);
            							}
HXDLIN( 249)							int ii_min66 = min33;
HXDLIN( 249)							int ii_max66 = ::Math_obj::ceil(b45);
HXDLIN( 249)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min66,ii_max66);
            						}
            						else {
HXDLIN( 249)							int ii_min67 = ::Math_obj::floor(a46);
HXDLIN( 249)							int ii_max67 = ::Math_obj::ceil(c22);
HXDLIN( 249)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min67,ii_max67);
            						}
            					}
HXDLIN( 249)					Float a47 = v_ay3;
HXDLIN( 249)					Float b46 = v_by3;
HXDLIN( 249)					Float c23 = v_cy3;
HXDLIN( 249)					if ((a47 > b46)) {
HXDLIN( 249)						if ((a47 > c23)) {
HXDLIN( 249)							int min34;
HXDLIN( 249)							if ((b46 > c23)) {
HXDLIN( 249)								min34 = ::Math_obj::floor(c23);
            							}
            							else {
HXDLIN( 249)								min34 = ::Math_obj::floor(b46);
            							}
HXDLIN( 249)							int ii_min68 = min34;
HXDLIN( 249)							int ii_max68 = ::Math_obj::ceil(a47);
HXDLIN( 249)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min68,ii_max68);
            						}
            						else {
HXDLIN( 249)							int ii_min69 = ::Math_obj::floor(b46);
HXDLIN( 249)							int ii_max69 = ::Math_obj::ceil(c23);
HXDLIN( 249)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min69,ii_max69);
            						}
            					}
            					else {
HXDLIN( 249)						if ((b46 > c23)) {
HXDLIN( 249)							int min35;
HXDLIN( 249)							if ((a47 > c23)) {
HXDLIN( 249)								min35 = ::Math_obj::floor(c23);
            							}
            							else {
HXDLIN( 249)								min35 = ::Math_obj::ceil(a47);
            							}
HXDLIN( 249)							int ii_min70 = min35;
HXDLIN( 249)							int ii_max70 = ::Math_obj::ceil(b46);
HXDLIN( 249)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min70,ii_max70);
            						}
            						else {
HXDLIN( 249)							int ii_min71 = ::Math_obj::floor(a47);
HXDLIN( 249)							int ii_max71 = ::Math_obj::ceil(c23);
HXDLIN( 249)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min71,ii_max71);
            						}
            					}
            				}
HXDLIN( 249)				if (hasUndo4) {
HXDLIN( 249)					v_undoImage3 = undoImage12;
HXDLIN( 249)					v_undoX3 = xIter34->start;
HXDLIN( 249)					v_undoY3 = yIter34->start;
            				}
HXDLIN( 249)				{
HXDLIN( 249)					Float bx7 = bx5;
HXDLIN( 249)					Float by7 = by5;
HXDLIN( 249)					Float cx7 = cx5;
HXDLIN( 249)					Float cy7 = cy5;
HXDLIN( 249)					bool hasUndo5 = false;
HXDLIN( 249)					bool adjustWinding5 = (((((ex1 * by7) - (bx7 * ey1)) + ((bx7 * cy7) - (cx7 * by7))) + ((cx7 * ey1) - (ex1 * cy7))) > 0);
HXDLIN( 249)					if (!(adjustWinding5)) {
HXDLIN( 249)						Float bx_5 = bx7;
HXDLIN( 249)						Float by_5 = by7;
HXLINE(  25)						bx7 = cx7;
HXLINE(  26)						by7 = cy7;
HXLINE(  27)						cx7 = bx_5;
HXLINE(  28)						cy7 = by_5;
            					}
HXLINE( 249)					{
HXDLIN( 249)						Float s01 = ((ey1 * cx7) - (ex1 * cy7));
HXDLIN( 249)						Float sx1 = (cy7 - ey1);
HXDLIN( 249)						Float sy1 = (ex1 - cx7);
HXDLIN( 249)						Float t01 = ((ex1 * by7) - (ey1 * bx7));
HXDLIN( 249)						Float tx1 = (ey1 - by7);
HXDLIN( 249)						Float ty1 = (bx7 - ex1);
HXDLIN( 249)						Float A1 = ((((-(by7) * cx7) + (ey1 * (-(bx7) + cx7))) + (ex1 * (by7 - cy7))) + (bx7 * cy7));
HXDLIN( 249)						 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN( 249)						if ((ex1 > bx7)) {
HXDLIN( 249)							if ((ex1 > cx7)) {
HXDLIN( 249)								int min36;
HXDLIN( 249)								if ((bx7 > cx7)) {
HXDLIN( 249)									min36 = ::Math_obj::floor(cx7);
            								}
            								else {
HXDLIN( 249)									min36 = ::Math_obj::floor(bx7);
            								}
HXDLIN( 249)								int ii_min72 = min36;
HXDLIN( 249)								int ii_max72 = ::Math_obj::ceil(ex1);
HXDLIN( 249)								xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min72,ii_max72);
            							}
            							else {
HXDLIN( 249)								int ii_min73 = ::Math_obj::floor(bx7);
HXDLIN( 249)								int ii_max73 = ::Math_obj::ceil(cx7);
HXDLIN( 249)								xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min73,ii_max73);
            							}
            						}
            						else {
HXDLIN( 249)							if ((bx7 > cx7)) {
HXDLIN( 249)								int min37;
HXDLIN( 249)								if ((ex1 > cx7)) {
HXDLIN( 249)									min37 = ::Math_obj::floor(cx7);
            								}
            								else {
HXDLIN( 249)									min37 = ::Math_obj::ceil(ex1);
            								}
HXDLIN( 249)								int ii_min74 = min37;
HXDLIN( 249)								int ii_max74 = ::Math_obj::ceil(bx7);
HXDLIN( 249)								xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min74,ii_max74);
            							}
            							else {
HXDLIN( 249)								int ii_min75 = ::Math_obj::floor(ex1);
HXDLIN( 249)								int ii_max75 = ::Math_obj::ceil(cx7);
HXDLIN( 249)								xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min75,ii_max75);
            							}
            						}
HXDLIN( 249)						 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN( 249)						if ((ey1 > by7)) {
HXDLIN( 249)							if ((ey1 > cy7)) {
HXDLIN( 249)								int min38;
HXDLIN( 249)								if ((by7 > cy7)) {
HXDLIN( 249)									min38 = ::Math_obj::floor(cy7);
            								}
            								else {
HXDLIN( 249)									min38 = ::Math_obj::floor(by7);
            								}
HXDLIN( 249)								int ii_min76 = min38;
HXDLIN( 249)								int ii_max76 = ::Math_obj::ceil(ey1);
HXDLIN( 249)								yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min76,ii_max76);
            							}
            							else {
HXDLIN( 249)								int ii_min77 = ::Math_obj::floor(by7);
HXDLIN( 249)								int ii_max77 = ::Math_obj::ceil(cy7);
HXDLIN( 249)								yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min77,ii_max77);
            							}
            						}
            						else {
HXDLIN( 249)							if ((by7 > cy7)) {
HXDLIN( 249)								int min39;
HXDLIN( 249)								if ((ey1 > cy7)) {
HXDLIN( 249)									min39 = ::Math_obj::floor(cy7);
            								}
            								else {
HXDLIN( 249)									min39 = ::Math_obj::ceil(ey1);
            								}
HXDLIN( 249)								int ii_min78 = min39;
HXDLIN( 249)								int ii_max78 = ::Math_obj::ceil(by7);
HXDLIN( 249)								yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min78,ii_max78);
            							}
            							else {
HXDLIN( 249)								int ii_min79 = ::Math_obj::floor(ey1);
HXDLIN( 249)								int ii_max79 = ::Math_obj::ceil(cy7);
HXDLIN( 249)								yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min79,ii_max79);
            							}
            						}
HXDLIN( 249)						 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN( 249)						if (hasUndo5) {
HXDLIN( 249)							int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN( 249)							int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN( 249)							 ::Dynamic imageType5 = null();
HXDLIN( 249)							 ::pi_xy::ImageStruct this159 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 249)							if (::hx::IsNull( imageType5 )) {
HXLINE(  54)								imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE( 249)							::Dynamic undoImage16;
HXDLIN( 249)							switch((int)(( (int)(imageType5) ))){
            								case (int)0: {
HXDLIN( 249)									 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 249)									 ::iterMagic::BytesImg b47 = byt5;
HXDLIN( 249)									{
HXDLIN( 249)										b47->width = width5;
HXDLIN( 249)										b47->height = height5;
HXDLIN( 249)										b47->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 249)										b47->data = ::haxe::io::Bytes_obj::alloc((b47->length * 4));
HXDLIN( 249)										{
HXDLIN( 249)											int len10 = b47->length;
HXDLIN( 249)											int w5 = 0;
HXDLIN( 249)											{
HXDLIN( 249)												int _g100 = 0;
HXDLIN( 249)												int _g101 = b47->height;
HXDLIN( 249)												while((_g100 < _g101)){
HXDLIN( 249)													_g100 = (_g100 + 1);
HXDLIN( 249)													int y16 = (_g100 - 1);
HXDLIN( 249)													{
HXDLIN( 249)														int _g102 = 0;
HXDLIN( 249)														int _g103 = b47->width;
HXDLIN( 249)														while((_g102 < _g103)){
HXDLIN( 249)															_g102 = (_g102 + 1);
HXDLIN( 249)															int x16 = (_g102 - 1);
HXDLIN( 249)															{
HXDLIN( 249)																w5 = (w5 + 1);
HXDLIN( 249)																b47->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 249)															{
HXDLIN( 249)																w5 = (w5 + 1);
HXDLIN( 249)																b47->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 249)															{
HXDLIN( 249)																w5 = (w5 + 1);
HXDLIN( 249)																b47->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 249)															{
HXDLIN( 249)																w5 = (w5 + 1);
HXDLIN( 249)																b47->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 249)									undoImage16 = b47;
            								}
            								break;
            								case (int)1: {
HXDLIN( 249)									 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)									 ::iterMagic::ArrIntImg a48 = arrI5;
HXDLIN( 249)									{
HXDLIN( 249)										a48->width = width5;
HXDLIN( 249)										a48->height = height5;
HXDLIN( 249)										a48->data = ::Array_obj< int >::__new(0);
HXDLIN( 249)										a48->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 249)										{
HXDLIN( 249)											int _g104 = 0;
HXDLIN( 249)											int _g105 = a48->length;
HXDLIN( 249)											while((_g104 < _g105)){
HXDLIN( 249)												_g104 = (_g104 + 1);
HXDLIN( 249)												int i46 = (_g104 - 1);
HXDLIN( 249)												a48->data[i46] = 0;
            											}
            										}
            									}
HXDLIN( 249)									undoImage16 = a48;
            								}
            								break;
            								case (int)2: {
HXDLIN( 249)									 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 249)									 ::iterMagic::U32ArrImg b48 = u32a5;
HXDLIN( 249)									{
HXDLIN( 249)										b48->width = width5;
HXDLIN( 249)										b48->height = height5;
HXDLIN( 249)										b48->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 249)										int size5 = (b48->length * 4);
HXDLIN( 249)										b48->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN( 249)										{
HXDLIN( 249)											int _g106 = 0;
HXDLIN( 249)											int _g107 = b48->length;
HXDLIN( 249)											while((_g106 < _g107)){
HXDLIN( 249)												_g106 = (_g106 + 1);
HXDLIN( 249)												int i47 = (_g106 - 1);
HXDLIN( 249)												{
HXDLIN( 249)													 ::haxe::io::ArrayBufferViewImpl this160 = b48->data;
HXDLIN( 249)													bool undoImage17;
HXDLIN( 249)													if ((i47 >= 0)) {
HXDLIN( 249)														undoImage17 = (i47 < (this160->byteLength >> 2));
            													}
            													else {
HXDLIN( 249)														undoImage17 = false;
            													}
HXDLIN( 249)													if (undoImage17) {
HXDLIN( 249)														 ::haxe::io::Bytes _this5 = this160->bytes;
HXDLIN( 249)														int pos5 = ((i47 << 2) + this160->byteOffset);
HXDLIN( 249)														_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN( 249)														_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN( 249)														_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN( 249)														_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN( 249)									undoImage16 = b48;
            								}
            								break;
            								case (int)3: {
HXDLIN( 249)									 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)									 ::iterMagic::VecIntImg v11 = vec5;
HXDLIN( 249)									{
HXDLIN( 249)										v11->width = width5;
HXDLIN( 249)										v11->height = height5;
HXDLIN( 249)										v11->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 249)										v11->data = ::Array_obj< int >::__new(v11->length);
HXDLIN( 249)										{
HXDLIN( 249)											int _g108 = 0;
HXDLIN( 249)											int _g109 = v11->length;
HXDLIN( 249)											while((_g108 < _g109)){
HXDLIN( 249)												_g108 = (_g108 + 1);
HXDLIN( 249)												int i48 = (_g108 - 1);
HXDLIN( 249)												v11->data->__unsafe_set(i48,0);
            											}
            										}
            									}
HXDLIN( 249)									undoImage16 = v11;
            								}
            								break;
            								case (int)4: {
HXDLIN( 249)									 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)									 ::iterMagic::StackIntImg b49 = sInt5;
HXDLIN( 249)									{
HXDLIN( 249)										b49->width = width5;
HXDLIN( 249)										b49->height = height5;
HXDLIN( 249)										b49->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 249)										b49->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 249)										{
HXDLIN( 249)											int len11 = b49->length;
HXDLIN( 249)											 ::haxe::ds::GenericStack_Int d5 = b49->data;
HXDLIN( 249)											if (::hx::IsNull( d5->head )) {
HXDLIN( 249)												int _g110 = 0;
HXDLIN( 249)												int _g111 = len11;
HXDLIN( 249)												while((_g110 < _g111)){
HXDLIN( 249)													_g110 = (_g110 + 1);
HXDLIN( 249)													int i49 = (_g110 - 1);
HXDLIN( 249)													d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            												}
            											}
            											else {
HXDLIN( 249)												int _g112 = 0;
HXDLIN( 249)												int _g113 = len11;
HXDLIN( 249)												while((_g112 < _g113)){
HXDLIN( 249)													_g112 = (_g112 + 1);
HXDLIN( 249)													int i50 = (_g112 - 1);
HXDLIN( 249)													{
HXDLIN( 249)														 ::haxe::ds::GenericCell_Int l5 = b49->data->head;
HXDLIN( 249)														 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN( 249)														{
HXDLIN( 249)															int _g114 = 0;
HXDLIN( 249)															int _g115 = i50;
HXDLIN( 249)															while((_g114 < _g115)){
HXDLIN( 249)																_g114 = (_g114 + 1);
HXDLIN( 249)																int i51 = (_g114 - 1);
HXLINE( 345)																prev5 = l5;
HXLINE( 346)																l5 = l5->next;
            															}
            														}
HXLINE( 249)														if (::hx::IsNull( prev5 )) {
HXDLIN( 249)															b49->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 249)															l5 = null();
            														}
            														else {
HXDLIN( 249)															prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 249)															l5 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 249)									undoImage16 = b49;
            								}
            								break;
            							}
HXDLIN( 249)							this159->image = undoImage16;
HXDLIN( 249)							this159->width = width5;
HXDLIN( 249)							this159->height = height5;
HXDLIN( 249)							this159->imageType = ( (int)(imageType5) );
HXDLIN( 249)							undoImage15 = this159;
HXDLIN( 249)							{
HXDLIN( 249)								int rectLeft5 = xIter35->start;
HXDLIN( 249)								int rectTop5 = yIter35->start;
HXDLIN( 249)								int rectRight5 = xIter35->max;
HXDLIN( 249)								bool forceClear5 = false;
HXDLIN( 249)								{
HXDLIN( 249)									int _g116 = rectTop5;
HXDLIN( 249)									int _g117 = yIter35->max;
HXDLIN( 249)									while((_g116 < _g117)){
HXDLIN( 249)										_g116 = (_g116 + 1);
HXDLIN( 249)										int dy7 = (_g116 - 1);
HXDLIN( 249)										{
HXDLIN( 249)											int _g118 = rectLeft5;
HXDLIN( 249)											int _g119 = rectRight5;
HXDLIN( 249)											while((_g118 < _g119)){
HXDLIN( 249)												_g118 = (_g118 + 1);
HXDLIN( 249)												int dx7 = (_g118 - 1);
HXDLIN( 249)												::Dynamic this161 = this1->image;
HXDLIN( 249)												int index21;
HXDLIN( 249)												if (this1->useVirtualPos) {
HXDLIN( 249)													index21 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx7) - this1->virtualX));
            												}
            												else {
HXDLIN( 249)													index21 = ::Std_obj::_hx_int(( (Float)(((dy7 * this1->width) + dx7)) ));
            												}
HXDLIN( 249)												int c24 = ::iterMagic::Iimg_obj::get(this161,index21);
HXDLIN( 249)												int col5;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													col5 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													col5 = c24;
            												}
HXDLIN( 249)												bool hitQuad41;
HXDLIN( 249)												if (this1->useMask) {
HXDLIN( 249)													hitQuad41 = ::hx::IsNotNull( this1->mask );
            												}
            												else {
HXDLIN( 249)													hitQuad41 = false;
            												}
HXDLIN( 249)												if (hitQuad41) {
HXDLIN( 249)													 ::pi_xy::ImageStruct this162 = this1->mask;
HXDLIN( 249)													::Dynamic this163 = this162->image;
HXDLIN( 249)													int index22;
HXDLIN( 249)													if (this162->useVirtualPos) {
HXDLIN( 249)														index22 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this162->virtualY) * ( (Float)(this162->width) )) + dx7) - this162->virtualX));
            													}
            													else {
HXDLIN( 249)														index22 = ::Std_obj::_hx_int(( (Float)(((dy7 * this162->width) + dx7)) ));
            													}
HXDLIN( 249)													int c25 = ::iterMagic::Iimg_obj::get(this163,index22);
HXDLIN( 249)													int v12;
HXDLIN( 249)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)														v12 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            													}
            													else {
HXDLIN( 249)														v12 = c25;
            													}
HXDLIN( 249)													int maskPixel5 = v12;
HXDLIN( 249)													int this164 = col5;
HXDLIN( 249)													if ((maskPixel5 == 0)) {
HXDLIN( 249)														col5 = this164;
            													}
            													else {
HXDLIN( 249)														Float m05;
HXDLIN( 249)														int this165 = ((maskPixel5 >> 24) & 255);
HXDLIN( 249)														if ((this165 == 0)) {
HXDLIN( 249)															m05 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															m05 = (( (Float)(this165) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float m15;
HXDLIN( 249)														int this166 = ((maskPixel5 >> 16) & 255);
HXDLIN( 249)														if ((this166 == 0)) {
HXDLIN( 249)															m15 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															m15 = (( (Float)(this166) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float m25;
HXDLIN( 249)														int this167 = ((maskPixel5 >> 8) & 255);
HXDLIN( 249)														if ((this167 == 0)) {
HXDLIN( 249)															m25 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															m25 = (( (Float)(this167) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float m35;
HXDLIN( 249)														int this168 = (maskPixel5 & 255);
HXDLIN( 249)														if ((this168 == 0)) {
HXDLIN( 249)															m35 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															m35 = (( (Float)(this168) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this164 >> 24) & 255)) )));
HXDLIN( 249)														int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this164 >> 16) & 255)) )));
HXDLIN( 249)														int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this164 >> 8) & 255)) )));
HXDLIN( 249)														int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this164 & 255)) )));
HXDLIN( 249)														col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 249)												if ((col5 != 0)) {
HXDLIN( 249)													int x17 = (dx7 - rectLeft5);
HXDLIN( 249)													int y17 = (dy7 - rectTop5);
HXDLIN( 249)													int c26 = col5;
HXDLIN( 249)													bool hitQuad42;
HXDLIN( 249)													if ((((c26 >> 24) & 255) < 254)) {
HXDLIN( 249)														hitQuad42 = undoImage15->transparent;
            													}
            													else {
HXDLIN( 249)														hitQuad42 = false;
            													}
HXDLIN( 249)													if (hitQuad42) {
HXDLIN( 249)														int location10;
HXDLIN( 249)														if (undoImage15->useVirtualPos) {
HXDLIN( 249)															location10 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x17) - undoImage15->virtualX));
            														}
            														else {
HXDLIN( 249)															location10 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage15->width) + x17)) ));
            														}
HXDLIN( 249)														int this169 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN( 249)														int this170;
HXDLIN( 249)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)															this170 = ((((((this169 >> 24) & 255) << 24) | ((this169 & 255) << 16)) | (((this169 >> 8) & 255) << 8)) | ((this169 >> 16) & 255));
            														}
            														else {
HXDLIN( 249)															this170 = this169;
            														}
HXDLIN( 249)														Float a115;
HXDLIN( 249)														int this171 = ((this170 >> 24) & 255);
HXDLIN( 249)														if ((this171 == 0)) {
HXDLIN( 249)															a115 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															a115 = (( (Float)(this171) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float r112;
HXDLIN( 249)														int this172 = ((this170 >> 16) & 255);
HXDLIN( 249)														if ((this172 == 0)) {
HXDLIN( 249)															r112 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															r112 = (( (Float)(this172) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float g112;
HXDLIN( 249)														int this173 = ((this170 >> 8) & 255);
HXDLIN( 249)														if ((this173 == 0)) {
HXDLIN( 249)															g112 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															g112 = (( (Float)(this173) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float b116;
HXDLIN( 249)														int this174 = (this170 & 255);
HXDLIN( 249)														if ((this174 == 0)) {
HXDLIN( 249)															b116 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															b116 = (( (Float)(this174) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float a213;
HXDLIN( 249)														int this175 = ((col5 >> 24) & 255);
HXDLIN( 249)														if ((this175 == 0)) {
HXDLIN( 249)															a213 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															a213 = (( (Float)(this175) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float r211;
HXDLIN( 249)														int this176 = ((col5 >> 16) & 255);
HXDLIN( 249)														if ((this176 == 0)) {
HXDLIN( 249)															r211 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															r211 = (( (Float)(this176) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float g211;
HXDLIN( 249)														int this177 = ((col5 >> 8) & 255);
HXDLIN( 249)														if ((this177 == 0)) {
HXDLIN( 249)															g211 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															g211 = (( (Float)(this177) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float b214;
HXDLIN( 249)														int this178 = (col5 & 255);
HXDLIN( 249)														if ((this178 == 0)) {
HXDLIN( 249)															b214 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															b214 = (( (Float)(this178) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN( 249)														int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a312) + (r211 * a213))));
HXDLIN( 249)														int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a312) + (g211 * a213))));
HXDLIN( 249)														int b50 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b214 * a213))));
HXDLIN( 249)														int a49 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN( 249)														int blended10 = ((((a49 << 24) | (r31 << 16)) | (g31 << 8)) | b50);
HXDLIN( 249)														{
HXDLIN( 249)															int hitQuad43;
HXDLIN( 249)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)																hitQuad43 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            															}
            															else {
HXDLIN( 249)																hitQuad43 = blended10;
            															}
HXDLIN( 249)															::iterMagic::Iimg_obj::set(undoImage15->image,location10,hitQuad43);
            														}
            													}
            													else {
HXDLIN( 249)														::Dynamic this179 = undoImage15->image;
HXDLIN( 249)														int index23;
HXDLIN( 249)														if (undoImage15->useVirtualPos) {
HXDLIN( 249)															index23 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x17) - undoImage15->virtualX));
            														}
            														else {
HXDLIN( 249)															index23 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage15->width) + x17)) ));
            														}
HXDLIN( 249)														int hitQuad44;
HXDLIN( 249)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)															hitQuad44 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            														}
            														else {
HXDLIN( 249)															hitQuad44 = c26;
            														}
HXDLIN( 249)														::iterMagic::Iimg_obj::set(this179,index23,hitQuad44);
            													}
            												}
            												else {
HXDLIN( 249)													if (forceClear5) {
HXDLIN( 249)														::Dynamic this180 = undoImage15->image;
HXDLIN( 249)														int x18 = (dx7 - rectLeft5);
HXDLIN( 249)														int y18 = (dy7 - rectTop5);
HXDLIN( 249)														int index24;
HXDLIN( 249)														if (undoImage15->useVirtualPos) {
HXDLIN( 249)															index24 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x18) - undoImage15->virtualX));
            														}
            														else {
HXDLIN( 249)															index24 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage15->width) + x18)) ));
            														}
HXDLIN( 249)														::iterMagic::Iimg_obj::set(this180,index24,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 249)						bool found5 = false;
HXDLIN( 249)						Float s1 = ((Float)0.);
HXDLIN( 249)						Float t1 = ((Float)0.);
HXDLIN( 249)						Float sxx1 = ((Float)0.);
HXDLIN( 249)						Float txx1 = ((Float)0.);
HXDLIN( 249)						{
HXDLIN( 249)							int _g_min10 = xIter35->start;
HXDLIN( 249)							int _g_max10 = xIter35->max;
HXDLIN( 249)							while((_g_min10 < _g_max10)){
HXDLIN( 249)								_g_min10 = (_g_min10 + 1);
HXDLIN( 249)								int x19 = (_g_min10 - 1);
HXLINE(  60)								sxx1 = (sx1 * ( (Float)(x19) ));
HXLINE(  61)								txx1 = (tx1 * ( (Float)(x19) ));
HXLINE(  62)								found5 = false;
HXLINE( 249)								{
HXDLIN( 249)									int _g_min11 = yIter35->start;
HXDLIN( 249)									int _g_max11 = yIter35->max;
HXDLIN( 249)									while((_g_min11 < _g_max11)){
HXDLIN( 249)										_g_min11 = (_g_min11 + 1);
HXDLIN( 249)										int y19 = (_g_min11 - 1);
HXLINE(  64)										s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y19) )));
HXLINE(  65)										t1 = ((t01 + txx1) + (ty1 * ( (Float)(y19) )));
HXLINE( 249)										bool hitQuad45;
HXDLIN( 249)										if (!((s1 <= 0))) {
HXDLIN( 249)											hitQuad45 = (t1 <= 0);
            										}
            										else {
HXDLIN( 249)											hitQuad45 = true;
            										}
HXDLIN( 249)										if (hitQuad45) {
HXDLIN( 249)											if (found5) {
HXDLIN( 249)												goto _hx_goto_505;
            											}
            										}
            										else {
HXDLIN( 249)											if (((s1 + t1) < A1)) {
HXDLIN( 249)												{
HXDLIN( 249)													int c27 = color;
HXDLIN( 249)													bool hitQuad46;
HXDLIN( 249)													if ((((c27 >> 24) & 255) < 254)) {
HXDLIN( 249)														hitQuad46 = this1->transparent;
            													}
            													else {
HXDLIN( 249)														hitQuad46 = false;
            													}
HXDLIN( 249)													if (hitQuad46) {
HXDLIN( 249)														int location11;
HXDLIN( 249)														if (this1->useVirtualPos) {
HXDLIN( 249)															location11 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - this1->virtualY) * ( (Float)(this1->width) )) + x19) - this1->virtualX));
            														}
            														else {
HXDLIN( 249)															location11 = ::Std_obj::_hx_int(( (Float)(((y19 * this1->width) + x19)) ));
            														}
HXDLIN( 249)														int this181 = ::iterMagic::Iimg_obj::get(this1->image,location11);
HXDLIN( 249)														int this182;
HXDLIN( 249)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)															this182 = ((((((this181 >> 24) & 255) << 24) | ((this181 & 255) << 16)) | (((this181 >> 8) & 255) << 8)) | ((this181 >> 16) & 255));
            														}
            														else {
HXDLIN( 249)															this182 = this181;
            														}
HXDLIN( 249)														Float a116;
HXDLIN( 249)														int this183 = ((this182 >> 24) & 255);
HXDLIN( 249)														if ((this183 == 0)) {
HXDLIN( 249)															a116 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															a116 = (( (Float)(this183) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float r113;
HXDLIN( 249)														int this184 = ((this182 >> 16) & 255);
HXDLIN( 249)														if ((this184 == 0)) {
HXDLIN( 249)															r113 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															r113 = (( (Float)(this184) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float g113;
HXDLIN( 249)														int this185 = ((this182 >> 8) & 255);
HXDLIN( 249)														if ((this185 == 0)) {
HXDLIN( 249)															g113 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															g113 = (( (Float)(this185) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float b117;
HXDLIN( 249)														int this186 = (this182 & 255);
HXDLIN( 249)														if ((this186 == 0)) {
HXDLIN( 249)															b117 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															b117 = (( (Float)(this186) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float a214;
HXDLIN( 249)														int this187 = ((color >> 24) & 255);
HXDLIN( 249)														if ((this187 == 0)) {
HXDLIN( 249)															a214 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															a214 = (( (Float)(this187) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float r212;
HXDLIN( 249)														int this188 = ((color >> 16) & 255);
HXDLIN( 249)														if ((this188 == 0)) {
HXDLIN( 249)															r212 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															r212 = (( (Float)(this188) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float g212;
HXDLIN( 249)														int this189 = ((color >> 8) & 255);
HXDLIN( 249)														if ((this189 == 0)) {
HXDLIN( 249)															g212 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															g212 = (( (Float)(this189) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float b215;
HXDLIN( 249)														int this190 = (color & 255);
HXDLIN( 249)														if ((this190 == 0)) {
HXDLIN( 249)															b215 = ((Float)0.);
            														}
            														else {
HXDLIN( 249)															b215 = (( (Float)(this190) ) / ( (Float)(255) ));
            														}
HXDLIN( 249)														Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN( 249)														int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a313) + (r212 * a214))));
HXDLIN( 249)														int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a313) + (g212 * a214))));
HXDLIN( 249)														int b51 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b215 * a214))));
HXDLIN( 249)														int a50 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN( 249)														int blended11 = ((((a50 << 24) | (r32 << 16)) | (g32 << 8)) | b51);
HXDLIN( 249)														{
HXDLIN( 249)															int hitQuad47;
HXDLIN( 249)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)																hitQuad47 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            															}
            															else {
HXDLIN( 249)																hitQuad47 = blended11;
            															}
HXDLIN( 249)															::iterMagic::Iimg_obj::set(this1->image,location11,hitQuad47);
            														}
            													}
            													else {
HXDLIN( 249)														::Dynamic this191 = this1->image;
HXDLIN( 249)														int index25;
HXDLIN( 249)														if (this1->useVirtualPos) {
HXDLIN( 249)															index25 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - this1->virtualY) * ( (Float)(this1->width) )) + x19) - this1->virtualX));
            														}
            														else {
HXDLIN( 249)															index25 = ::Std_obj::_hx_int(( (Float)(((y19 * this1->width) + x19)) ));
            														}
HXDLIN( 249)														int hitQuad48;
HXDLIN( 249)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)															hitQuad48 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            														}
            														else {
HXDLIN( 249)															hitQuad48 = c27;
            														}
HXDLIN( 249)														::iterMagic::Iimg_obj::set(this191,index25,hitQuad48);
            													}
            												}
HXLINE(  73)												found5 = true;
            											}
            											else {
HXDLIN( 249)												if (found5) {
HXDLIN( 249)													goto _hx_goto_505;
            												}
            											}
            										}
            									}
            									_hx_goto_505:;
            								}
            							}
            						}
            					}
            				}
HXDLIN( 249)				bool hasUndo6 = false;
HXDLIN( 249)				int aA4 = ((color >> 24) & 255);
HXDLIN( 249)				int rA4 = ((color >> 16) & 255);
HXDLIN( 249)				int gA4 = ((color >> 8) & 255);
HXDLIN( 249)				int bA4 = (color & 255);
HXDLIN( 249)				Float bcx4 = (cx5 - dx5);
HXDLIN( 249)				Float bcy4 = (cy5 - dy5);
HXDLIN( 249)				Float acx4 = (ex1 - dx5);
HXDLIN( 249)				Float acy4 = (ey1 - dy5);
HXDLIN( 249)				Float dot114 = ((bcx4 * bcx4) + (bcy4 * bcy4));
HXDLIN( 249)				Float dot124 = ((bcx4 * acx4) + (bcy4 * acy4));
HXDLIN( 249)				Float dot224 = ((acx4 * acx4) + (acy4 * acy4));
HXDLIN( 249)				Float denom14 = (( (Float)(1) ) / ((dot114 * dot224) - (dot124 * dot124)));
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN( 249)				if ((ex1 > cx5)) {
HXDLIN( 249)					if ((ex1 > dx5)) {
HXDLIN( 249)						int min40;
HXDLIN( 249)						if ((cx5 > dx5)) {
HXDLIN( 249)							min40 = ::Math_obj::floor(dx5);
            						}
            						else {
HXDLIN( 249)							min40 = ::Math_obj::floor(cx5);
            						}
HXDLIN( 249)						int ii_min80 = min40;
HXDLIN( 249)						int ii_max80 = ::Math_obj::ceil(ex1);
HXDLIN( 249)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min80,ii_max80);
            					}
            					else {
HXDLIN( 249)						int ii_min81 = ::Math_obj::floor(cx5);
HXDLIN( 249)						int ii_max81 = ::Math_obj::ceil(dx5);
HXDLIN( 249)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min81,ii_max81);
            					}
            				}
            				else {
HXDLIN( 249)					if ((cx5 > dx5)) {
HXDLIN( 249)						int min41;
HXDLIN( 249)						if ((ex1 > dx5)) {
HXDLIN( 249)							min41 = ::Math_obj::floor(dx5);
            						}
            						else {
HXDLIN( 249)							min41 = ::Math_obj::ceil(ex1);
            						}
HXDLIN( 249)						int ii_min82 = min41;
HXDLIN( 249)						int ii_max82 = ::Math_obj::ceil(cx5);
HXDLIN( 249)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min82,ii_max82);
            					}
            					else {
HXDLIN( 249)						int ii_min83 = ::Math_obj::floor(ex1);
HXDLIN( 249)						int ii_max83 = ::Math_obj::ceil(dx5);
HXDLIN( 249)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min83,ii_max83);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN( 249)				if ((ey1 > cy5)) {
HXDLIN( 249)					if ((ey1 > dy5)) {
HXDLIN( 249)						int min42;
HXDLIN( 249)						if ((cy5 > dy5)) {
HXDLIN( 249)							min42 = ::Math_obj::floor(dy5);
            						}
            						else {
HXDLIN( 249)							min42 = ::Math_obj::floor(cy5);
            						}
HXDLIN( 249)						int ii_min84 = min42;
HXDLIN( 249)						int ii_max84 = ::Math_obj::ceil(ey1);
HXDLIN( 249)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min84,ii_max84);
            					}
            					else {
HXDLIN( 249)						int ii_min85 = ::Math_obj::floor(cy5);
HXDLIN( 249)						int ii_max85 = ::Math_obj::ceil(dy5);
HXDLIN( 249)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min85,ii_max85);
            					}
            				}
            				else {
HXDLIN( 249)					if ((cy5 > dy5)) {
HXDLIN( 249)						int min43;
HXDLIN( 249)						if ((ey1 > dy5)) {
HXDLIN( 249)							min43 = ::Math_obj::floor(dy5);
            						}
            						else {
HXDLIN( 249)							min43 = ::Math_obj::ceil(ey1);
            						}
HXDLIN( 249)						int ii_min86 = min43;
HXDLIN( 249)						int ii_max86 = ::Math_obj::ceil(cy5);
HXDLIN( 249)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min86,ii_max86);
            					}
            					else {
HXDLIN( 249)						int ii_min87 = ::Math_obj::floor(ey1);
HXDLIN( 249)						int ii_max87 = ::Math_obj::ceil(dy5);
HXDLIN( 249)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min87,ii_max87);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN( 249)				if (hasUndo6) {
HXDLIN( 249)					int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN( 249)					int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN( 249)					 ::Dynamic imageType6 = null();
HXDLIN( 249)					 ::pi_xy::ImageStruct this192 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 249)					if (::hx::IsNull( imageType6 )) {
HXLINE(  54)						imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 249)					::Dynamic undoImage19;
HXDLIN( 249)					switch((int)(( (int)(imageType6) ))){
            						case (int)0: {
HXDLIN( 249)							 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::BytesImg b52 = byt6;
HXDLIN( 249)							{
HXDLIN( 249)								b52->width = width6;
HXDLIN( 249)								b52->height = height6;
HXDLIN( 249)								b52->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 249)								b52->data = ::haxe::io::Bytes_obj::alloc((b52->length * 4));
HXDLIN( 249)								{
HXDLIN( 249)									int len12 = b52->length;
HXDLIN( 249)									int w6 = 0;
HXDLIN( 249)									{
HXDLIN( 249)										int _g120 = 0;
HXDLIN( 249)										int _g121 = b52->height;
HXDLIN( 249)										while((_g120 < _g121)){
HXDLIN( 249)											_g120 = (_g120 + 1);
HXDLIN( 249)											int y20 = (_g120 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												int _g122 = 0;
HXDLIN( 249)												int _g123 = b52->width;
HXDLIN( 249)												while((_g122 < _g123)){
HXDLIN( 249)													_g122 = (_g122 + 1);
HXDLIN( 249)													int x20 = (_g122 - 1);
HXDLIN( 249)													{
HXDLIN( 249)														w6 = (w6 + 1);
HXDLIN( 249)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w6 = (w6 + 1);
HXDLIN( 249)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w6 = (w6 + 1);
HXDLIN( 249)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w6 = (w6 + 1);
HXDLIN( 249)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage19 = b52;
            						}
            						break;
            						case (int)1: {
HXDLIN( 249)							 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::ArrIntImg a51 = arrI6;
HXDLIN( 249)							{
HXDLIN( 249)								a51->width = width6;
HXDLIN( 249)								a51->height = height6;
HXDLIN( 249)								a51->data = ::Array_obj< int >::__new(0);
HXDLIN( 249)								a51->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 249)								{
HXDLIN( 249)									int _g124 = 0;
HXDLIN( 249)									int _g125 = a51->length;
HXDLIN( 249)									while((_g124 < _g125)){
HXDLIN( 249)										_g124 = (_g124 + 1);
HXDLIN( 249)										int i52 = (_g124 - 1);
HXDLIN( 249)										a51->data[i52] = 0;
            									}
            								}
            							}
HXDLIN( 249)							undoImage19 = a51;
            						}
            						break;
            						case (int)2: {
HXDLIN( 249)							 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::U32ArrImg b53 = u32a6;
HXDLIN( 249)							{
HXDLIN( 249)								b53->width = width6;
HXDLIN( 249)								b53->height = height6;
HXDLIN( 249)								b53->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 249)								int size6 = (b53->length * 4);
HXDLIN( 249)								b53->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN( 249)								{
HXDLIN( 249)									int _g126 = 0;
HXDLIN( 249)									int _g127 = b53->length;
HXDLIN( 249)									while((_g126 < _g127)){
HXDLIN( 249)										_g126 = (_g126 + 1);
HXDLIN( 249)										int i53 = (_g126 - 1);
HXDLIN( 249)										{
HXDLIN( 249)											 ::haxe::io::ArrayBufferViewImpl this193 = b53->data;
HXDLIN( 249)											bool undoImage20;
HXDLIN( 249)											if ((i53 >= 0)) {
HXDLIN( 249)												undoImage20 = (i53 < (this193->byteLength >> 2));
            											}
            											else {
HXDLIN( 249)												undoImage20 = false;
            											}
HXDLIN( 249)											if (undoImage20) {
HXDLIN( 249)												 ::haxe::io::Bytes _this6 = this193->bytes;
HXDLIN( 249)												int pos6 = ((i53 << 2) + this193->byteOffset);
HXDLIN( 249)												_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN( 249)												_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage19 = b53;
            						}
            						break;
            						case (int)3: {
HXDLIN( 249)							 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::VecIntImg v13 = vec6;
HXDLIN( 249)							{
HXDLIN( 249)								v13->width = width6;
HXDLIN( 249)								v13->height = height6;
HXDLIN( 249)								v13->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 249)								v13->data = ::Array_obj< int >::__new(v13->length);
HXDLIN( 249)								{
HXDLIN( 249)									int _g128 = 0;
HXDLIN( 249)									int _g129 = v13->length;
HXDLIN( 249)									while((_g128 < _g129)){
HXDLIN( 249)										_g128 = (_g128 + 1);
HXDLIN( 249)										int i54 = (_g128 - 1);
HXDLIN( 249)										v13->data->__unsafe_set(i54,0);
            									}
            								}
            							}
HXDLIN( 249)							undoImage19 = v13;
            						}
            						break;
            						case (int)4: {
HXDLIN( 249)							 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::StackIntImg b54 = sInt6;
HXDLIN( 249)							{
HXDLIN( 249)								b54->width = width6;
HXDLIN( 249)								b54->height = height6;
HXDLIN( 249)								b54->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 249)								b54->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 249)								{
HXDLIN( 249)									int len13 = b54->length;
HXDLIN( 249)									 ::haxe::ds::GenericStack_Int d6 = b54->data;
HXDLIN( 249)									if (::hx::IsNull( d6->head )) {
HXDLIN( 249)										int _g130 = 0;
HXDLIN( 249)										int _g131 = len13;
HXDLIN( 249)										while((_g130 < _g131)){
HXDLIN( 249)											_g130 = (_g130 + 1);
HXDLIN( 249)											int i55 = (_g130 - 1);
HXDLIN( 249)											d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            										}
            									}
            									else {
HXDLIN( 249)										int _g132 = 0;
HXDLIN( 249)										int _g133 = len13;
HXDLIN( 249)										while((_g132 < _g133)){
HXDLIN( 249)											_g132 = (_g132 + 1);
HXDLIN( 249)											int i56 = (_g132 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int l6 = b54->data->head;
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN( 249)												{
HXDLIN( 249)													int _g134 = 0;
HXDLIN( 249)													int _g135 = i56;
HXDLIN( 249)													while((_g134 < _g135)){
HXDLIN( 249)														_g134 = (_g134 + 1);
HXDLIN( 249)														int i57 = (_g134 - 1);
HXLINE( 345)														prev6 = l6;
HXLINE( 346)														l6 = l6->next;
            													}
            												}
HXLINE( 249)												if (::hx::IsNull( prev6 )) {
HXDLIN( 249)													b54->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 249)													l6 = null();
            												}
            												else {
HXDLIN( 249)													prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 249)													l6 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage19 = b54;
            						}
            						break;
            					}
HXDLIN( 249)					this192->image = undoImage19;
HXDLIN( 249)					this192->width = width6;
HXDLIN( 249)					this192->height = height6;
HXDLIN( 249)					this192->imageType = ( (int)(imageType6) );
HXDLIN( 249)					undoImage18 = this192;
HXDLIN( 249)					{
HXDLIN( 249)						int rectLeft6 = xIter36->start;
HXDLIN( 249)						int rectTop6 = yIter36->start;
HXDLIN( 249)						int rectRight6 = xIter36->max;
HXDLIN( 249)						bool forceClear6 = false;
HXDLIN( 249)						{
HXDLIN( 249)							int _g136 = rectTop6;
HXDLIN( 249)							int _g137 = yIter36->max;
HXDLIN( 249)							while((_g136 < _g137)){
HXDLIN( 249)								_g136 = (_g136 + 1);
HXDLIN( 249)								int dy8 = (_g136 - 1);
HXDLIN( 249)								{
HXDLIN( 249)									int _g138 = rectLeft6;
HXDLIN( 249)									int _g139 = rectRight6;
HXDLIN( 249)									while((_g138 < _g139)){
HXDLIN( 249)										_g138 = (_g138 + 1);
HXDLIN( 249)										int dx8 = (_g138 - 1);
HXDLIN( 249)										::Dynamic this194 = this1->image;
HXDLIN( 249)										int index26;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											index26 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx8) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											index26 = ::Std_obj::_hx_int(( (Float)(((dy8 * this1->width) + dx8)) ));
            										}
HXDLIN( 249)										int c28 = ::iterMagic::Iimg_obj::get(this194,index26);
HXDLIN( 249)										int col6;
HXDLIN( 249)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)											col6 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            										}
            										else {
HXDLIN( 249)											col6 = c28;
            										}
HXDLIN( 249)										bool hitQuad49;
HXDLIN( 249)										if (this1->useMask) {
HXDLIN( 249)											hitQuad49 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 249)											hitQuad49 = false;
            										}
HXDLIN( 249)										if (hitQuad49) {
HXDLIN( 249)											 ::pi_xy::ImageStruct this195 = this1->mask;
HXDLIN( 249)											::Dynamic this196 = this195->image;
HXDLIN( 249)											int index27;
HXDLIN( 249)											if (this195->useVirtualPos) {
HXDLIN( 249)												index27 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this195->virtualY) * ( (Float)(this195->width) )) + dx8) - this195->virtualX));
            											}
            											else {
HXDLIN( 249)												index27 = ::Std_obj::_hx_int(( (Float)(((dy8 * this195->width) + dx8)) ));
            											}
HXDLIN( 249)											int c29 = ::iterMagic::Iimg_obj::get(this196,index27);
HXDLIN( 249)											int v14;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												v14 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												v14 = c29;
            											}
HXDLIN( 249)											int maskPixel6 = v14;
HXDLIN( 249)											int this197 = col6;
HXDLIN( 249)											if ((maskPixel6 == 0)) {
HXDLIN( 249)												col6 = this197;
            											}
            											else {
HXDLIN( 249)												Float m06;
HXDLIN( 249)												int this198 = ((maskPixel6 >> 24) & 255);
HXDLIN( 249)												if ((this198 == 0)) {
HXDLIN( 249)													m06 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m06 = (( (Float)(this198) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m16;
HXDLIN( 249)												int this199 = ((maskPixel6 >> 16) & 255);
HXDLIN( 249)												if ((this199 == 0)) {
HXDLIN( 249)													m16 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m16 = (( (Float)(this199) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m26;
HXDLIN( 249)												int this200 = ((maskPixel6 >> 8) & 255);
HXDLIN( 249)												if ((this200 == 0)) {
HXDLIN( 249)													m26 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m26 = (( (Float)(this200) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m36;
HXDLIN( 249)												int this201 = (maskPixel6 & 255);
HXDLIN( 249)												if ((this201 == 0)) {
HXDLIN( 249)													m36 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m36 = (( (Float)(this201) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this197 >> 24) & 255)) )));
HXDLIN( 249)												int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this197 >> 16) & 255)) )));
HXDLIN( 249)												int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this197 >> 8) & 255)) )));
HXDLIN( 249)												int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this197 & 255)) )));
HXDLIN( 249)												col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 249)										if ((col6 != 0)) {
HXDLIN( 249)											int x21 = (dx8 - rectLeft6);
HXDLIN( 249)											int y21 = (dy8 - rectTop6);
HXDLIN( 249)											int c30 = col6;
HXDLIN( 249)											bool hitQuad50;
HXDLIN( 249)											if ((((c30 >> 24) & 255) < 254)) {
HXDLIN( 249)												hitQuad50 = undoImage18->transparent;
            											}
            											else {
HXDLIN( 249)												hitQuad50 = false;
            											}
HXDLIN( 249)											if (hitQuad50) {
HXDLIN( 249)												int location12;
HXDLIN( 249)												if (undoImage18->useVirtualPos) {
HXDLIN( 249)													location12 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x21) - undoImage18->virtualX));
            												}
            												else {
HXDLIN( 249)													location12 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage18->width) + x21)) ));
            												}
HXDLIN( 249)												int this202 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN( 249)												int this203;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													this203 = ((((((this202 >> 24) & 255) << 24) | ((this202 & 255) << 16)) | (((this202 >> 8) & 255) << 8)) | ((this202 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													this203 = this202;
            												}
HXDLIN( 249)												Float a117;
HXDLIN( 249)												int this204 = ((this203 >> 24) & 255);
HXDLIN( 249)												if ((this204 == 0)) {
HXDLIN( 249)													a117 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a117 = (( (Float)(this204) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r114;
HXDLIN( 249)												int this205 = ((this203 >> 16) & 255);
HXDLIN( 249)												if ((this205 == 0)) {
HXDLIN( 249)													r114 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r114 = (( (Float)(this205) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g114;
HXDLIN( 249)												int this206 = ((this203 >> 8) & 255);
HXDLIN( 249)												if ((this206 == 0)) {
HXDLIN( 249)													g114 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g114 = (( (Float)(this206) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b118;
HXDLIN( 249)												int this207 = (this203 & 255);
HXDLIN( 249)												if ((this207 == 0)) {
HXDLIN( 249)													b118 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b118 = (( (Float)(this207) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a215;
HXDLIN( 249)												int this208 = ((col6 >> 24) & 255);
HXDLIN( 249)												if ((this208 == 0)) {
HXDLIN( 249)													a215 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a215 = (( (Float)(this208) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r213;
HXDLIN( 249)												int this209 = ((col6 >> 16) & 255);
HXDLIN( 249)												if ((this209 == 0)) {
HXDLIN( 249)													r213 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r213 = (( (Float)(this209) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g213;
HXDLIN( 249)												int this210 = ((col6 >> 8) & 255);
HXDLIN( 249)												if ((this210 == 0)) {
HXDLIN( 249)													g213 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g213 = (( (Float)(this210) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b216;
HXDLIN( 249)												int this211 = (col6 & 255);
HXDLIN( 249)												if ((this211 == 0)) {
HXDLIN( 249)													b216 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b216 = (( (Float)(this211) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN( 249)												int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a314) + (r213 * a215))));
HXDLIN( 249)												int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a314) + (g213 * a215))));
HXDLIN( 249)												int b55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b216 * a215))));
HXDLIN( 249)												int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN( 249)												int blended12 = ((((a52 << 24) | (r33 << 16)) | (g33 << 8)) | b55);
HXDLIN( 249)												{
HXDLIN( 249)													int hitQuad51;
HXDLIN( 249)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)														hitQuad51 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            													}
            													else {
HXDLIN( 249)														hitQuad51 = blended12;
            													}
HXDLIN( 249)													::iterMagic::Iimg_obj::set(undoImage18->image,location12,hitQuad51);
            												}
            											}
            											else {
HXDLIN( 249)												::Dynamic this212 = undoImage18->image;
HXDLIN( 249)												int index28;
HXDLIN( 249)												if (undoImage18->useVirtualPos) {
HXDLIN( 249)													index28 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x21) - undoImage18->virtualX));
            												}
            												else {
HXDLIN( 249)													index28 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage18->width) + x21)) ));
            												}
HXDLIN( 249)												int hitQuad52;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad52 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad52 = c30;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this212,index28,hitQuad52);
            											}
            										}
            										else {
HXDLIN( 249)											if (forceClear6) {
HXDLIN( 249)												::Dynamic this213 = undoImage18->image;
HXDLIN( 249)												int x22 = (dx8 - rectLeft6);
HXDLIN( 249)												int y22 = (dy8 - rectTop6);
HXDLIN( 249)												int index29;
HXDLIN( 249)												if (undoImage18->useVirtualPos) {
HXDLIN( 249)													index29 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x22) - undoImage18->virtualX));
            												}
            												else {
HXDLIN( 249)													index29 = ::Std_obj::_hx_int(( (Float)(((y22 * undoImage18->width) + x22)) ));
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this213,index29,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 249)				bool found6 = false;
HXDLIN( 249)				{
HXDLIN( 249)					int _g_min12 = xIter36->start;
HXDLIN( 249)					int _g_max12 = xIter36->max;
HXDLIN( 249)					while((_g_min12 < _g_max12)){
HXDLIN( 249)						_g_min12 = (_g_min12 + 1);
HXDLIN( 249)						int px5 = (_g_min12 - 1);
HXDLIN( 249)						Float pcx4 = (( (Float)(px5) ) - dx5);
HXLINE( 619)						found6 = false;
HXLINE( 249)						{
HXDLIN( 249)							int _g_min13 = yIter36->start;
HXDLIN( 249)							int _g_max13 = yIter36->max;
HXDLIN( 249)							while((_g_min13 < _g_max13)){
HXDLIN( 249)								_g_min13 = (_g_min13 + 1);
HXDLIN( 249)								int py5 = (_g_min13 - 1);
HXDLIN( 249)								Float pcy4 = (( (Float)(py5) ) - dy5);
HXDLIN( 249)								Float dot314 = ((pcx4 * bcx4) + (pcy4 * bcy4));
HXDLIN( 249)								Float dot324 = ((pcx4 * acx4) + (pcy4 * acy4));
HXDLIN( 249)								Float ratioA4 = (((dot224 * dot314) - (dot124 * dot324)) * denom14);
HXDLIN( 249)								Float ratioB4 = (((dot114 * dot324) - (dot124 * dot314)) * denom14);
HXDLIN( 249)								Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN( 249)								bool hitQuad53;
HXDLIN( 249)								bool hitQuad54;
HXDLIN( 249)								if ((ratioA4 >= 0)) {
HXDLIN( 249)									hitQuad54 = (ratioB4 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad54 = false;
            								}
HXDLIN( 249)								if (hitQuad54) {
HXDLIN( 249)									hitQuad53 = (ratioC4 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad53 = false;
            								}
HXDLIN( 249)								if (hitQuad53) {
HXDLIN( 249)									int i58 = ::Std_obj::_hx_int((( (Float)(aA4) ) * (soft * ratioB4)));
HXDLIN( 249)									if ((i58 > 255)) {
HXLINE(  24)										i58 = 255;
            									}
HXLINE( 249)									if ((i58 < 0)) {
HXLINE(  25)										i58 = 0;
            									}
HXLINE( 249)									int a53 = i58;
HXDLIN( 249)									int i59 = ::Std_obj::_hx_int(( (Float)(rA4) ));
HXDLIN( 249)									if ((i59 > 255)) {
HXLINE(  24)										i59 = 255;
            									}
HXLINE( 249)									if ((i59 < 0)) {
HXLINE(  25)										i59 = 0;
            									}
HXLINE( 249)									int r34 = i59;
HXDLIN( 249)									int i60 = ::Std_obj::_hx_int(( (Float)(gA4) ));
HXDLIN( 249)									if ((i60 > 255)) {
HXLINE(  24)										i60 = 255;
            									}
HXLINE( 249)									if ((i60 < 0)) {
HXLINE(  25)										i60 = 0;
            									}
HXLINE( 249)									int g34 = i60;
HXDLIN( 249)									int i61 = ::Std_obj::_hx_int(( (Float)(bA4) ));
HXDLIN( 249)									if ((i61 > 255)) {
HXLINE(  24)										i61 = 255;
            									}
HXLINE( 249)									if ((i61 < 0)) {
HXLINE(  25)										i61 = 0;
            									}
HXLINE( 249)									int b56 = i61;
HXDLIN( 249)									{
HXDLIN( 249)										int location13;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											location13 = ::Std_obj::_hx_int(((((( (Float)(py5) ) - this1->virtualY) * ( (Float)(this1->width) )) + px5) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											location13 = ::Std_obj::_hx_int(( (Float)(((py5 * this1->width) + px5)) ));
            										}
HXDLIN( 249)										bool hitQuad55;
HXDLIN( 249)										if (this1->transparent) {
HXDLIN( 249)											hitQuad55 = (a53 < 254);
            										}
            										else {
HXDLIN( 249)											hitQuad55 = false;
            										}
HXDLIN( 249)										if (hitQuad55) {
HXDLIN( 249)											int this214 = ::iterMagic::Iimg_obj::get(this1->image,location13);
HXDLIN( 249)											int old4;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												old4 = ((((((this214 >> 24) & 255) << 24) | ((this214 & 255) << 16)) | (((this214 >> 8) & 255) << 8)) | ((this214 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												old4 = this214;
            											}
HXDLIN( 249)											int rhs4 = ((((a53 << 24) | (r34 << 16)) | (g34 << 8)) | b56);
HXDLIN( 249)											Float a118;
HXDLIN( 249)											int this215 = ((old4 >> 24) & 255);
HXDLIN( 249)											if ((this215 == 0)) {
HXDLIN( 249)												a118 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a118 = (( (Float)(this215) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r115;
HXDLIN( 249)											int this216 = ((old4 >> 16) & 255);
HXDLIN( 249)											if ((this216 == 0)) {
HXDLIN( 249)												r115 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r115 = (( (Float)(this216) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g115;
HXDLIN( 249)											int this217 = ((old4 >> 8) & 255);
HXDLIN( 249)											if ((this217 == 0)) {
HXDLIN( 249)												g115 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g115 = (( (Float)(this217) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b119;
HXDLIN( 249)											int this218 = (old4 & 255);
HXDLIN( 249)											if ((this218 == 0)) {
HXDLIN( 249)												b119 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b119 = (( (Float)(this218) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a216;
HXDLIN( 249)											int this219 = ((rhs4 >> 24) & 255);
HXDLIN( 249)											if ((this219 == 0)) {
HXDLIN( 249)												a216 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a216 = (( (Float)(this219) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r214;
HXDLIN( 249)											int this220 = ((rhs4 >> 16) & 255);
HXDLIN( 249)											if ((this220 == 0)) {
HXDLIN( 249)												r214 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r214 = (( (Float)(this220) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g214;
HXDLIN( 249)											int this221 = ((rhs4 >> 8) & 255);
HXDLIN( 249)											if ((this221 == 0)) {
HXDLIN( 249)												g214 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g214 = (( (Float)(this221) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b217;
HXDLIN( 249)											int this222 = (rhs4 & 255);
HXDLIN( 249)											if ((this222 == 0)) {
HXDLIN( 249)												b217 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b217 = (( (Float)(this222) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN( 249)											int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a315) + (r214 * a216))));
HXDLIN( 249)											int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a315) + (g214 * a216))));
HXDLIN( 249)											int b57 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b217 * a216))));
HXDLIN( 249)											int a54 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN( 249)											int blended13 = ((((a54 << 24) | (r35 << 16)) | (g35 << 8)) | b57);
HXDLIN( 249)											{
HXDLIN( 249)												int hitQuad56;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad56 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad56 = blended13;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this1->image,location13,hitQuad56);
            											}
            										}
            										else {
HXDLIN( 249)											int value4;
HXDLIN( 249)											if (this1->isLittle) {
HXDLIN( 249)												value4 = ((((a53 << 24) | (b56 << 16)) | (g34 << 8)) | r34);
            											}
            											else {
HXDLIN( 249)												value4 = ((((a53 << 24) | (r34 << 16)) | (g34 << 8)) | b56);
            											}
HXDLIN( 249)											::iterMagic::Iimg_obj::set(this1->image,location13,value4);
            										}
            									}
HXLINE( 633)									found6 = true;
            								}
            								else {
HXDLIN( 249)									if (found6) {
HXDLIN( 249)										goto _hx_goto_517;
            									}
            								}
            							}
            							_hx_goto_517:;
            						}
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart v_yIter34;
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart v_xIter34;
HXDLIN( 249)				int v_undoY4;
HXDLIN( 249)				int v_undoX4;
HXDLIN( 249)				Float v_ty4;
HXDLIN( 249)				Float v_tx4;
HXDLIN( 249)				Float v_t04;
HXDLIN( 249)				Float v_sy4;
HXDLIN( 249)				Float v_sx4;
HXDLIN( 249)				Float v_s04;
HXDLIN( 249)				Float v_A4;
HXDLIN( 249)				Float ax6 = ex1;
HXDLIN( 249)				Float ay6 = ey1;
HXDLIN( 249)				 ::pi_xy::ImageStruct v_undoImage4 = null();
HXDLIN( 249)				Float bx8 = cx5;
HXDLIN( 249)				Float by8 = cy5;
HXDLIN( 249)				Float cx8 = dx5;
HXDLIN( 249)				Float cy8 = dy5;
HXDLIN( 249)				bool adjustWinding6 = (((((ax6 * by8) - (bx8 * ay6)) + ((bx8 * cy8) - (cx8 * by8))) + ((cx8 * ay6) - (ax6 * cy8))) > 0);
HXDLIN( 249)				if (!(adjustWinding6)) {
HXDLIN( 249)					Float bx_6 = bx8;
HXDLIN( 249)					Float by_6 = by8;
HXLINE(  24)					bx8 = cx8;
HXLINE(  25)					by8 = cy8;
HXLINE(  26)					cx8 = bx_6;
HXLINE(  27)					cy8 = by_6;
            				}
HXLINE( 249)				Float v_ax4 = ax6;
HXDLIN( 249)				Float v_ay4 = ay6;
HXDLIN( 249)				Float v_bx4 = bx8;
HXDLIN( 249)				Float v_by4 = by8;
HXDLIN( 249)				Float v_cx4 = cx8;
HXDLIN( 249)				Float v_cy4 = cy8;
HXDLIN( 249)				bool v_preCalculated4 = true;
HXDLIN( 249)				{
HXDLIN( 249)					v_s04 = ((v_ay4 * v_cx4) - (v_ax4 * v_cy4));
HXDLIN( 249)					v_sx4 = (v_cy4 - v_ay4);
HXDLIN( 249)					v_sy4 = (v_ax4 - v_cx4);
HXDLIN( 249)					v_t04 = ((v_ax4 * v_by4) - (v_ay4 * v_bx4));
HXDLIN( 249)					v_tx4 = (v_ay4 - v_by4);
HXDLIN( 249)					v_ty4 = (v_bx4 - v_ax4);
HXDLIN( 249)					v_A4 = ((((-(v_by4) * v_cx4) + (v_ay4 * (-(v_bx4) + v_cx4))) + (v_ax4 * (v_by4 - v_cy4))) + (v_bx4 * v_cy4));
HXDLIN( 249)					Float a55 = v_ax4;
HXDLIN( 249)					Float b58 = v_bx4;
HXDLIN( 249)					Float c31 = v_cx4;
HXDLIN( 249)					if ((a55 > b58)) {
HXDLIN( 249)						if ((a55 > c31)) {
HXDLIN( 249)							int min44;
HXDLIN( 249)							if ((b58 > c31)) {
HXDLIN( 249)								min44 = ::Math_obj::floor(c31);
            							}
            							else {
HXDLIN( 249)								min44 = ::Math_obj::floor(b58);
            							}
HXDLIN( 249)							int ii_min88 = min44;
HXDLIN( 249)							int ii_max88 = ::Math_obj::ceil(a55);
HXDLIN( 249)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min88,ii_max88);
            						}
            						else {
HXDLIN( 249)							int ii_min89 = ::Math_obj::floor(b58);
HXDLIN( 249)							int ii_max89 = ::Math_obj::ceil(c31);
HXDLIN( 249)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min89,ii_max89);
            						}
            					}
            					else {
HXDLIN( 249)						if ((b58 > c31)) {
HXDLIN( 249)							int min45;
HXDLIN( 249)							if ((a55 > c31)) {
HXDLIN( 249)								min45 = ::Math_obj::floor(c31);
            							}
            							else {
HXDLIN( 249)								min45 = ::Math_obj::ceil(a55);
            							}
HXDLIN( 249)							int ii_min90 = min45;
HXDLIN( 249)							int ii_max90 = ::Math_obj::ceil(b58);
HXDLIN( 249)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min90,ii_max90);
            						}
            						else {
HXDLIN( 249)							int ii_min91 = ::Math_obj::floor(a55);
HXDLIN( 249)							int ii_max91 = ::Math_obj::ceil(c31);
HXDLIN( 249)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min91,ii_max91);
            						}
            					}
HXDLIN( 249)					Float a56 = v_ay4;
HXDLIN( 249)					Float b59 = v_by4;
HXDLIN( 249)					Float c32 = v_cy4;
HXDLIN( 249)					if ((a56 > b59)) {
HXDLIN( 249)						if ((a56 > c32)) {
HXDLIN( 249)							int min46;
HXDLIN( 249)							if ((b59 > c32)) {
HXDLIN( 249)								min46 = ::Math_obj::floor(c32);
            							}
            							else {
HXDLIN( 249)								min46 = ::Math_obj::floor(b59);
            							}
HXDLIN( 249)							int ii_min92 = min46;
HXDLIN( 249)							int ii_max92 = ::Math_obj::ceil(a56);
HXDLIN( 249)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min92,ii_max92);
            						}
            						else {
HXDLIN( 249)							int ii_min93 = ::Math_obj::floor(b59);
HXDLIN( 249)							int ii_max93 = ::Math_obj::ceil(c32);
HXDLIN( 249)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min93,ii_max93);
            						}
            					}
            					else {
HXDLIN( 249)						if ((b59 > c32)) {
HXDLIN( 249)							int min47;
HXDLIN( 249)							if ((a56 > c32)) {
HXDLIN( 249)								min47 = ::Math_obj::floor(c32);
            							}
            							else {
HXDLIN( 249)								min47 = ::Math_obj::ceil(a56);
            							}
HXDLIN( 249)							int ii_min94 = min47;
HXDLIN( 249)							int ii_max94 = ::Math_obj::ceil(b59);
HXDLIN( 249)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min94,ii_max94);
            						}
            						else {
HXDLIN( 249)							int ii_min95 = ::Math_obj::floor(a56);
HXDLIN( 249)							int ii_max95 = ::Math_obj::ceil(c32);
HXDLIN( 249)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min95,ii_max95);
            						}
            					}
            				}
HXDLIN( 249)				if (hasUndo6) {
HXDLIN( 249)					v_undoImage4 = undoImage18;
HXDLIN( 249)					v_undoX4 = xIter36->start;
HXDLIN( 249)					v_undoY4 = yIter36->start;
            				}
HXDLIN( 249)				bool hasUndo7 = false;
HXDLIN( 249)				int aA5 = ((color >> 24) & 255);
HXDLIN( 249)				int rA5 = ((color >> 16) & 255);
HXDLIN( 249)				int gA5 = ((color >> 8) & 255);
HXDLIN( 249)				int bA5 = (color & 255);
HXDLIN( 249)				Float bcx5 = (dx5 - ax4);
HXDLIN( 249)				Float bcy5 = (dy5 - ay4);
HXDLIN( 249)				Float acx5 = (ex1 - ax4);
HXDLIN( 249)				Float acy5 = (ey1 - ay4);
HXDLIN( 249)				Float dot115 = ((bcx5 * bcx5) + (bcy5 * bcy5));
HXDLIN( 249)				Float dot125 = ((bcx5 * acx5) + (bcy5 * acy5));
HXDLIN( 249)				Float dot225 = ((acx5 * acx5) + (acy5 * acy5));
HXDLIN( 249)				Float denom15 = (( (Float)(1) ) / ((dot115 * dot225) - (dot125 * dot125)));
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN( 249)				if ((ex1 > dx5)) {
HXDLIN( 249)					if ((ex1 > ax4)) {
HXDLIN( 249)						int min48;
HXDLIN( 249)						if ((dx5 > ax4)) {
HXDLIN( 249)							min48 = ::Math_obj::floor(ax4);
            						}
            						else {
HXDLIN( 249)							min48 = ::Math_obj::floor(dx5);
            						}
HXDLIN( 249)						int ii_min96 = min48;
HXDLIN( 249)						int ii_max96 = ::Math_obj::ceil(ex1);
HXDLIN( 249)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min96,ii_max96);
            					}
            					else {
HXDLIN( 249)						int ii_min97 = ::Math_obj::floor(dx5);
HXDLIN( 249)						int ii_max97 = ::Math_obj::ceil(ax4);
HXDLIN( 249)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min97,ii_max97);
            					}
            				}
            				else {
HXDLIN( 249)					if ((dx5 > ax4)) {
HXDLIN( 249)						int min49;
HXDLIN( 249)						if ((ex1 > ax4)) {
HXDLIN( 249)							min49 = ::Math_obj::floor(ax4);
            						}
            						else {
HXDLIN( 249)							min49 = ::Math_obj::ceil(ex1);
            						}
HXDLIN( 249)						int ii_min98 = min49;
HXDLIN( 249)						int ii_max98 = ::Math_obj::ceil(dx5);
HXDLIN( 249)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min98,ii_max98);
            					}
            					else {
HXDLIN( 249)						int ii_min99 = ::Math_obj::floor(ex1);
HXDLIN( 249)						int ii_max99 = ::Math_obj::ceil(ax4);
HXDLIN( 249)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min99,ii_max99);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN( 249)				if ((ey1 > dy5)) {
HXDLIN( 249)					if ((ey1 > ay4)) {
HXDLIN( 249)						int min50;
HXDLIN( 249)						if ((dy5 > ay4)) {
HXDLIN( 249)							min50 = ::Math_obj::floor(ay4);
            						}
            						else {
HXDLIN( 249)							min50 = ::Math_obj::floor(dy5);
            						}
HXDLIN( 249)						int ii_min100 = min50;
HXDLIN( 249)						int ii_max100 = ::Math_obj::ceil(ey1);
HXDLIN( 249)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min100,ii_max100);
            					}
            					else {
HXDLIN( 249)						int ii_min101 = ::Math_obj::floor(dy5);
HXDLIN( 249)						int ii_max101 = ::Math_obj::ceil(ay4);
HXDLIN( 249)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min101,ii_max101);
            					}
            				}
            				else {
HXDLIN( 249)					if ((dy5 > ay4)) {
HXDLIN( 249)						int min51;
HXDLIN( 249)						if ((ey1 > ay4)) {
HXDLIN( 249)							min51 = ::Math_obj::floor(ay4);
            						}
            						else {
HXDLIN( 249)							min51 = ::Math_obj::ceil(ey1);
            						}
HXDLIN( 249)						int ii_min102 = min51;
HXDLIN( 249)						int ii_max102 = ::Math_obj::ceil(dy5);
HXDLIN( 249)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min102,ii_max102);
            					}
            					else {
HXDLIN( 249)						int ii_min103 = ::Math_obj::floor(ey1);
HXDLIN( 249)						int ii_max103 = ::Math_obj::ceil(ay4);
HXDLIN( 249)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min103,ii_max103);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN( 249)				if (hasUndo7) {
HXDLIN( 249)					int width7 = ((xIter37->max - xIter37->start) + 1);
HXDLIN( 249)					int height7 = ((yIter37->max - yIter37->start) + 1);
HXDLIN( 249)					 ::Dynamic imageType7 = null();
HXDLIN( 249)					 ::pi_xy::ImageStruct this223 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 249)					if (::hx::IsNull( imageType7 )) {
HXLINE(  54)						imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 249)					::Dynamic undoImage22;
HXDLIN( 249)					switch((int)(( (int)(imageType7) ))){
            						case (int)0: {
HXDLIN( 249)							 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::BytesImg b60 = byt7;
HXDLIN( 249)							{
HXDLIN( 249)								b60->width = width7;
HXDLIN( 249)								b60->height = height7;
HXDLIN( 249)								b60->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 249)								b60->data = ::haxe::io::Bytes_obj::alloc((b60->length * 4));
HXDLIN( 249)								{
HXDLIN( 249)									int len14 = b60->length;
HXDLIN( 249)									int w7 = 0;
HXDLIN( 249)									{
HXDLIN( 249)										int _g140 = 0;
HXDLIN( 249)										int _g141 = b60->height;
HXDLIN( 249)										while((_g140 < _g141)){
HXDLIN( 249)											_g140 = (_g140 + 1);
HXDLIN( 249)											int y23 = (_g140 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												int _g142 = 0;
HXDLIN( 249)												int _g143 = b60->width;
HXDLIN( 249)												while((_g142 < _g143)){
HXDLIN( 249)													_g142 = (_g142 + 1);
HXDLIN( 249)													int x23 = (_g142 - 1);
HXDLIN( 249)													{
HXDLIN( 249)														w7 = (w7 + 1);
HXDLIN( 249)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w7 = (w7 + 1);
HXDLIN( 249)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w7 = (w7 + 1);
HXDLIN( 249)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w7 = (w7 + 1);
HXDLIN( 249)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage22 = b60;
            						}
            						break;
            						case (int)1: {
HXDLIN( 249)							 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::ArrIntImg a57 = arrI7;
HXDLIN( 249)							{
HXDLIN( 249)								a57->width = width7;
HXDLIN( 249)								a57->height = height7;
HXDLIN( 249)								a57->data = ::Array_obj< int >::__new(0);
HXDLIN( 249)								a57->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 249)								{
HXDLIN( 249)									int _g144 = 0;
HXDLIN( 249)									int _g145 = a57->length;
HXDLIN( 249)									while((_g144 < _g145)){
HXDLIN( 249)										_g144 = (_g144 + 1);
HXDLIN( 249)										int i62 = (_g144 - 1);
HXDLIN( 249)										a57->data[i62] = 0;
            									}
            								}
            							}
HXDLIN( 249)							undoImage22 = a57;
            						}
            						break;
            						case (int)2: {
HXDLIN( 249)							 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::U32ArrImg b61 = u32a7;
HXDLIN( 249)							{
HXDLIN( 249)								b61->width = width7;
HXDLIN( 249)								b61->height = height7;
HXDLIN( 249)								b61->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 249)								int size7 = (b61->length * 4);
HXDLIN( 249)								b61->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN( 249)								{
HXDLIN( 249)									int _g146 = 0;
HXDLIN( 249)									int _g147 = b61->length;
HXDLIN( 249)									while((_g146 < _g147)){
HXDLIN( 249)										_g146 = (_g146 + 1);
HXDLIN( 249)										int i63 = (_g146 - 1);
HXDLIN( 249)										{
HXDLIN( 249)											 ::haxe::io::ArrayBufferViewImpl this224 = b61->data;
HXDLIN( 249)											bool undoImage23;
HXDLIN( 249)											if ((i63 >= 0)) {
HXDLIN( 249)												undoImage23 = (i63 < (this224->byteLength >> 2));
            											}
            											else {
HXDLIN( 249)												undoImage23 = false;
            											}
HXDLIN( 249)											if (undoImage23) {
HXDLIN( 249)												 ::haxe::io::Bytes _this7 = this224->bytes;
HXDLIN( 249)												int pos7 = ((i63 << 2) + this224->byteOffset);
HXDLIN( 249)												_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN( 249)												_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage22 = b61;
            						}
            						break;
            						case (int)3: {
HXDLIN( 249)							 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::VecIntImg v15 = vec7;
HXDLIN( 249)							{
HXDLIN( 249)								v15->width = width7;
HXDLIN( 249)								v15->height = height7;
HXDLIN( 249)								v15->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 249)								v15->data = ::Array_obj< int >::__new(v15->length);
HXDLIN( 249)								{
HXDLIN( 249)									int _g148 = 0;
HXDLIN( 249)									int _g149 = v15->length;
HXDLIN( 249)									while((_g148 < _g149)){
HXDLIN( 249)										_g148 = (_g148 + 1);
HXDLIN( 249)										int i64 = (_g148 - 1);
HXDLIN( 249)										v15->data->__unsafe_set(i64,0);
            									}
            								}
            							}
HXDLIN( 249)							undoImage22 = v15;
            						}
            						break;
            						case (int)4: {
HXDLIN( 249)							 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::StackIntImg b62 = sInt7;
HXDLIN( 249)							{
HXDLIN( 249)								b62->width = width7;
HXDLIN( 249)								b62->height = height7;
HXDLIN( 249)								b62->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 249)								b62->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 249)								{
HXDLIN( 249)									int len15 = b62->length;
HXDLIN( 249)									 ::haxe::ds::GenericStack_Int d7 = b62->data;
HXDLIN( 249)									if (::hx::IsNull( d7->head )) {
HXDLIN( 249)										int _g150 = 0;
HXDLIN( 249)										int _g151 = len15;
HXDLIN( 249)										while((_g150 < _g151)){
HXDLIN( 249)											_g150 = (_g150 + 1);
HXDLIN( 249)											int i65 = (_g150 - 1);
HXDLIN( 249)											d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            										}
            									}
            									else {
HXDLIN( 249)										int _g152 = 0;
HXDLIN( 249)										int _g153 = len15;
HXDLIN( 249)										while((_g152 < _g153)){
HXDLIN( 249)											_g152 = (_g152 + 1);
HXDLIN( 249)											int i66 = (_g152 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int l7 = b62->data->head;
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN( 249)												{
HXDLIN( 249)													int _g154 = 0;
HXDLIN( 249)													int _g155 = i66;
HXDLIN( 249)													while((_g154 < _g155)){
HXDLIN( 249)														_g154 = (_g154 + 1);
HXDLIN( 249)														int i67 = (_g154 - 1);
HXLINE( 345)														prev7 = l7;
HXLINE( 346)														l7 = l7->next;
            													}
            												}
HXLINE( 249)												if (::hx::IsNull( prev7 )) {
HXDLIN( 249)													b62->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN( 249)													l7 = null();
            												}
            												else {
HXDLIN( 249)													prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN( 249)													l7 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage22 = b62;
            						}
            						break;
            					}
HXDLIN( 249)					this223->image = undoImage22;
HXDLIN( 249)					this223->width = width7;
HXDLIN( 249)					this223->height = height7;
HXDLIN( 249)					this223->imageType = ( (int)(imageType7) );
HXDLIN( 249)					undoImage21 = this223;
HXDLIN( 249)					{
HXDLIN( 249)						int rectLeft7 = xIter37->start;
HXDLIN( 249)						int rectTop7 = yIter37->start;
HXDLIN( 249)						int rectRight7 = xIter37->max;
HXDLIN( 249)						bool forceClear7 = false;
HXDLIN( 249)						{
HXDLIN( 249)							int _g156 = rectTop7;
HXDLIN( 249)							int _g157 = yIter37->max;
HXDLIN( 249)							while((_g156 < _g157)){
HXDLIN( 249)								_g156 = (_g156 + 1);
HXDLIN( 249)								int dy9 = (_g156 - 1);
HXDLIN( 249)								{
HXDLIN( 249)									int _g158 = rectLeft7;
HXDLIN( 249)									int _g159 = rectRight7;
HXDLIN( 249)									while((_g158 < _g159)){
HXDLIN( 249)										_g158 = (_g158 + 1);
HXDLIN( 249)										int dx9 = (_g158 - 1);
HXDLIN( 249)										::Dynamic this225 = this1->image;
HXDLIN( 249)										int index30;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											index30 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx9) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											index30 = ::Std_obj::_hx_int(( (Float)(((dy9 * this1->width) + dx9)) ));
            										}
HXDLIN( 249)										int c33 = ::iterMagic::Iimg_obj::get(this225,index30);
HXDLIN( 249)										int col7;
HXDLIN( 249)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)											col7 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            										}
            										else {
HXDLIN( 249)											col7 = c33;
            										}
HXDLIN( 249)										bool hitQuad57;
HXDLIN( 249)										if (this1->useMask) {
HXDLIN( 249)											hitQuad57 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 249)											hitQuad57 = false;
            										}
HXDLIN( 249)										if (hitQuad57) {
HXDLIN( 249)											 ::pi_xy::ImageStruct this226 = this1->mask;
HXDLIN( 249)											::Dynamic this227 = this226->image;
HXDLIN( 249)											int index31;
HXDLIN( 249)											if (this226->useVirtualPos) {
HXDLIN( 249)												index31 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this226->virtualY) * ( (Float)(this226->width) )) + dx9) - this226->virtualX));
            											}
            											else {
HXDLIN( 249)												index31 = ::Std_obj::_hx_int(( (Float)(((dy9 * this226->width) + dx9)) ));
            											}
HXDLIN( 249)											int c34 = ::iterMagic::Iimg_obj::get(this227,index31);
HXDLIN( 249)											int v16;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												v16 = ((((((c34 >> 24) & 255) << 24) | ((c34 & 255) << 16)) | (((c34 >> 8) & 255) << 8)) | ((c34 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												v16 = c34;
            											}
HXDLIN( 249)											int maskPixel7 = v16;
HXDLIN( 249)											int this228 = col7;
HXDLIN( 249)											if ((maskPixel7 == 0)) {
HXDLIN( 249)												col7 = this228;
            											}
            											else {
HXDLIN( 249)												Float m07;
HXDLIN( 249)												int this229 = ((maskPixel7 >> 24) & 255);
HXDLIN( 249)												if ((this229 == 0)) {
HXDLIN( 249)													m07 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m07 = (( (Float)(this229) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m17;
HXDLIN( 249)												int this230 = ((maskPixel7 >> 16) & 255);
HXDLIN( 249)												if ((this230 == 0)) {
HXDLIN( 249)													m17 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m17 = (( (Float)(this230) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m27;
HXDLIN( 249)												int this231 = ((maskPixel7 >> 8) & 255);
HXDLIN( 249)												if ((this231 == 0)) {
HXDLIN( 249)													m27 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m27 = (( (Float)(this231) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m37;
HXDLIN( 249)												int this232 = (maskPixel7 & 255);
HXDLIN( 249)												if ((this232 == 0)) {
HXDLIN( 249)													m37 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m37 = (( (Float)(this232) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this228 >> 24) & 255)) )));
HXDLIN( 249)												int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this228 >> 16) & 255)) )));
HXDLIN( 249)												int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this228 >> 8) & 255)) )));
HXDLIN( 249)												int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this228 & 255)) )));
HXDLIN( 249)												col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 249)										if ((col7 != 0)) {
HXDLIN( 249)											int x24 = (dx9 - rectLeft7);
HXDLIN( 249)											int y24 = (dy9 - rectTop7);
HXDLIN( 249)											int c35 = col7;
HXDLIN( 249)											bool hitQuad58;
HXDLIN( 249)											if ((((c35 >> 24) & 255) < 254)) {
HXDLIN( 249)												hitQuad58 = undoImage21->transparent;
            											}
            											else {
HXDLIN( 249)												hitQuad58 = false;
            											}
HXDLIN( 249)											if (hitQuad58) {
HXDLIN( 249)												int location14;
HXDLIN( 249)												if (undoImage21->useVirtualPos) {
HXDLIN( 249)													location14 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x24) - undoImage21->virtualX));
            												}
            												else {
HXDLIN( 249)													location14 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage21->width) + x24)) ));
            												}
HXDLIN( 249)												int this233 = ::iterMagic::Iimg_obj::get(undoImage21->image,location14);
HXDLIN( 249)												int this234;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													this234 = ((((((this233 >> 24) & 255) << 24) | ((this233 & 255) << 16)) | (((this233 >> 8) & 255) << 8)) | ((this233 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													this234 = this233;
            												}
HXDLIN( 249)												Float a119;
HXDLIN( 249)												int this235 = ((this234 >> 24) & 255);
HXDLIN( 249)												if ((this235 == 0)) {
HXDLIN( 249)													a119 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a119 = (( (Float)(this235) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r116;
HXDLIN( 249)												int this236 = ((this234 >> 16) & 255);
HXDLIN( 249)												if ((this236 == 0)) {
HXDLIN( 249)													r116 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r116 = (( (Float)(this236) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g116;
HXDLIN( 249)												int this237 = ((this234 >> 8) & 255);
HXDLIN( 249)												if ((this237 == 0)) {
HXDLIN( 249)													g116 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g116 = (( (Float)(this237) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b120;
HXDLIN( 249)												int this238 = (this234 & 255);
HXDLIN( 249)												if ((this238 == 0)) {
HXDLIN( 249)													b120 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b120 = (( (Float)(this238) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a217;
HXDLIN( 249)												int this239 = ((col7 >> 24) & 255);
HXDLIN( 249)												if ((this239 == 0)) {
HXDLIN( 249)													a217 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a217 = (( (Float)(this239) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r215;
HXDLIN( 249)												int this240 = ((col7 >> 16) & 255);
HXDLIN( 249)												if ((this240 == 0)) {
HXDLIN( 249)													r215 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r215 = (( (Float)(this240) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g215;
HXDLIN( 249)												int this241 = ((col7 >> 8) & 255);
HXDLIN( 249)												if ((this241 == 0)) {
HXDLIN( 249)													g215 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g215 = (( (Float)(this241) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b218;
HXDLIN( 249)												int this242 = (col7 & 255);
HXDLIN( 249)												if ((this242 == 0)) {
HXDLIN( 249)													b218 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b218 = (( (Float)(this242) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a316 = (a119 * (( (Float)(1) ) - a217));
HXDLIN( 249)												int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a316) + (r215 * a217))));
HXDLIN( 249)												int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a316) + (g215 * a217))));
HXDLIN( 249)												int b63 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a316) + (b218 * a217))));
HXDLIN( 249)												int a58 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN( 249)												int blended14 = ((((a58 << 24) | (r36 << 16)) | (g36 << 8)) | b63);
HXDLIN( 249)												{
HXDLIN( 249)													int hitQuad59;
HXDLIN( 249)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)														hitQuad59 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            													}
            													else {
HXDLIN( 249)														hitQuad59 = blended14;
            													}
HXDLIN( 249)													::iterMagic::Iimg_obj::set(undoImage21->image,location14,hitQuad59);
            												}
            											}
            											else {
HXDLIN( 249)												::Dynamic this243 = undoImage21->image;
HXDLIN( 249)												int index32;
HXDLIN( 249)												if (undoImage21->useVirtualPos) {
HXDLIN( 249)													index32 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x24) - undoImage21->virtualX));
            												}
            												else {
HXDLIN( 249)													index32 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage21->width) + x24)) ));
            												}
HXDLIN( 249)												int hitQuad60;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad60 = ((((((c35 >> 24) & 255) << 24) | ((c35 & 255) << 16)) | (((c35 >> 8) & 255) << 8)) | ((c35 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad60 = c35;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this243,index32,hitQuad60);
            											}
            										}
            										else {
HXDLIN( 249)											if (forceClear7) {
HXDLIN( 249)												::Dynamic this244 = undoImage21->image;
HXDLIN( 249)												int x25 = (dx9 - rectLeft7);
HXDLIN( 249)												int y25 = (dy9 - rectTop7);
HXDLIN( 249)												int index33;
HXDLIN( 249)												if (undoImage21->useVirtualPos) {
HXDLIN( 249)													index33 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x25) - undoImage21->virtualX));
            												}
            												else {
HXDLIN( 249)													index33 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage21->width) + x25)) ));
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this244,index33,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 249)				bool found7 = false;
HXDLIN( 249)				{
HXDLIN( 249)					int _g_min14 = xIter37->start;
HXDLIN( 249)					int _g_max14 = xIter37->max;
HXDLIN( 249)					while((_g_min14 < _g_max14)){
HXDLIN( 249)						_g_min14 = (_g_min14 + 1);
HXDLIN( 249)						int px6 = (_g_min14 - 1);
HXDLIN( 249)						Float pcx5 = (( (Float)(px6) ) - ax4);
HXLINE( 619)						found7 = false;
HXLINE( 249)						{
HXDLIN( 249)							int _g_min15 = yIter37->start;
HXDLIN( 249)							int _g_max15 = yIter37->max;
HXDLIN( 249)							while((_g_min15 < _g_max15)){
HXDLIN( 249)								_g_min15 = (_g_min15 + 1);
HXDLIN( 249)								int py6 = (_g_min15 - 1);
HXDLIN( 249)								Float pcy5 = (( (Float)(py6) ) - ay4);
HXDLIN( 249)								Float dot315 = ((pcx5 * bcx5) + (pcy5 * bcy5));
HXDLIN( 249)								Float dot325 = ((pcx5 * acx5) + (pcy5 * acy5));
HXDLIN( 249)								Float ratioA5 = (((dot225 * dot315) - (dot125 * dot325)) * denom15);
HXDLIN( 249)								Float ratioB5 = (((dot115 * dot325) - (dot125 * dot315)) * denom15);
HXDLIN( 249)								Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN( 249)								bool hitQuad61;
HXDLIN( 249)								bool hitQuad62;
HXDLIN( 249)								if ((ratioA5 >= 0)) {
HXDLIN( 249)									hitQuad62 = (ratioB5 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad62 = false;
            								}
HXDLIN( 249)								if (hitQuad62) {
HXDLIN( 249)									hitQuad61 = (ratioC5 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad61 = false;
            								}
HXDLIN( 249)								if (hitQuad61) {
HXDLIN( 249)									int i68 = ::Std_obj::_hx_int((( (Float)(aA5) ) * (soft * ratioB5)));
HXDLIN( 249)									if ((i68 > 255)) {
HXLINE(  24)										i68 = 255;
            									}
HXLINE( 249)									if ((i68 < 0)) {
HXLINE(  25)										i68 = 0;
            									}
HXLINE( 249)									int a59 = i68;
HXDLIN( 249)									int i69 = ::Std_obj::_hx_int(( (Float)(rA5) ));
HXDLIN( 249)									if ((i69 > 255)) {
HXLINE(  24)										i69 = 255;
            									}
HXLINE( 249)									if ((i69 < 0)) {
HXLINE(  25)										i69 = 0;
            									}
HXLINE( 249)									int r37 = i69;
HXDLIN( 249)									int i70 = ::Std_obj::_hx_int(( (Float)(gA5) ));
HXDLIN( 249)									if ((i70 > 255)) {
HXLINE(  24)										i70 = 255;
            									}
HXLINE( 249)									if ((i70 < 0)) {
HXLINE(  25)										i70 = 0;
            									}
HXLINE( 249)									int g37 = i70;
HXDLIN( 249)									int i71 = ::Std_obj::_hx_int(( (Float)(bA5) ));
HXDLIN( 249)									if ((i71 > 255)) {
HXLINE(  24)										i71 = 255;
            									}
HXLINE( 249)									if ((i71 < 0)) {
HXLINE(  25)										i71 = 0;
            									}
HXLINE( 249)									int b64 = i71;
HXDLIN( 249)									{
HXDLIN( 249)										int location15;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											location15 = ::Std_obj::_hx_int(((((( (Float)(py6) ) - this1->virtualY) * ( (Float)(this1->width) )) + px6) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											location15 = ::Std_obj::_hx_int(( (Float)(((py6 * this1->width) + px6)) ));
            										}
HXDLIN( 249)										bool hitQuad63;
HXDLIN( 249)										if (this1->transparent) {
HXDLIN( 249)											hitQuad63 = (a59 < 254);
            										}
            										else {
HXDLIN( 249)											hitQuad63 = false;
            										}
HXDLIN( 249)										if (hitQuad63) {
HXDLIN( 249)											int this245 = ::iterMagic::Iimg_obj::get(this1->image,location15);
HXDLIN( 249)											int old5;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												old5 = ((((((this245 >> 24) & 255) << 24) | ((this245 & 255) << 16)) | (((this245 >> 8) & 255) << 8)) | ((this245 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												old5 = this245;
            											}
HXDLIN( 249)											int rhs5 = ((((a59 << 24) | (r37 << 16)) | (g37 << 8)) | b64);
HXDLIN( 249)											Float a120;
HXDLIN( 249)											int this246 = ((old5 >> 24) & 255);
HXDLIN( 249)											if ((this246 == 0)) {
HXDLIN( 249)												a120 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a120 = (( (Float)(this246) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r117;
HXDLIN( 249)											int this247 = ((old5 >> 16) & 255);
HXDLIN( 249)											if ((this247 == 0)) {
HXDLIN( 249)												r117 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r117 = (( (Float)(this247) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g117;
HXDLIN( 249)											int this248 = ((old5 >> 8) & 255);
HXDLIN( 249)											if ((this248 == 0)) {
HXDLIN( 249)												g117 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g117 = (( (Float)(this248) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b121;
HXDLIN( 249)											int this249 = (old5 & 255);
HXDLIN( 249)											if ((this249 == 0)) {
HXDLIN( 249)												b121 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b121 = (( (Float)(this249) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a218;
HXDLIN( 249)											int this250 = ((rhs5 >> 24) & 255);
HXDLIN( 249)											if ((this250 == 0)) {
HXDLIN( 249)												a218 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a218 = (( (Float)(this250) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r216;
HXDLIN( 249)											int this251 = ((rhs5 >> 16) & 255);
HXDLIN( 249)											if ((this251 == 0)) {
HXDLIN( 249)												r216 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r216 = (( (Float)(this251) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g216;
HXDLIN( 249)											int this252 = ((rhs5 >> 8) & 255);
HXDLIN( 249)											if ((this252 == 0)) {
HXDLIN( 249)												g216 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g216 = (( (Float)(this252) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b219;
HXDLIN( 249)											int this253 = (rhs5 & 255);
HXDLIN( 249)											if ((this253 == 0)) {
HXDLIN( 249)												b219 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b219 = (( (Float)(this253) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a317 = (a120 * (( (Float)(1) ) - a218));
HXDLIN( 249)											int r38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a317) + (r216 * a218))));
HXDLIN( 249)											int g38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a317) + (g216 * a218))));
HXDLIN( 249)											int b65 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b121 * a317) + (b219 * a218))));
HXDLIN( 249)											int a60 = ::Std_obj::_hx_int((( (Float)(255) ) * (a317 + a218)));
HXDLIN( 249)											int blended15 = ((((a60 << 24) | (r38 << 16)) | (g38 << 8)) | b65);
HXDLIN( 249)											{
HXDLIN( 249)												int hitQuad64;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad64 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad64 = blended15;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this1->image,location15,hitQuad64);
            											}
            										}
            										else {
HXDLIN( 249)											int value5;
HXDLIN( 249)											if (this1->isLittle) {
HXDLIN( 249)												value5 = ((((a59 << 24) | (b64 << 16)) | (g37 << 8)) | r37);
            											}
            											else {
HXDLIN( 249)												value5 = ((((a59 << 24) | (r37 << 16)) | (g37 << 8)) | b64);
            											}
HXDLIN( 249)											::iterMagic::Iimg_obj::set(this1->image,location15,value5);
            										}
            									}
HXLINE( 633)									found7 = true;
            								}
            								else {
HXDLIN( 249)									if (found7) {
HXDLIN( 249)										goto _hx_goto_529;
            									}
            								}
            							}
            							_hx_goto_529:;
            						}
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart v_yIter35;
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart v_xIter35;
HXDLIN( 249)				int v_undoY5;
HXDLIN( 249)				int v_undoX5;
HXDLIN( 249)				Float v_ty5;
HXDLIN( 249)				Float v_tx5;
HXDLIN( 249)				Float v_t05;
HXDLIN( 249)				Float v_sy5;
HXDLIN( 249)				Float v_sx5;
HXDLIN( 249)				Float v_s05;
HXDLIN( 249)				Float v_A5;
HXDLIN( 249)				Float ax7 = ex1;
HXDLIN( 249)				Float ay7 = ey1;
HXDLIN( 249)				 ::pi_xy::ImageStruct v_undoImage5 = null();
HXDLIN( 249)				Float bx9 = dx5;
HXDLIN( 249)				Float by9 = dy5;
HXDLIN( 249)				Float cx9 = ax4;
HXDLIN( 249)				Float cy9 = ay4;
HXDLIN( 249)				bool adjustWinding7 = (((((ax7 * by9) - (bx9 * ay7)) + ((bx9 * cy9) - (cx9 * by9))) + ((cx9 * ay7) - (ax7 * cy9))) > 0);
HXDLIN( 249)				if (!(adjustWinding7)) {
HXDLIN( 249)					Float bx_7 = bx9;
HXDLIN( 249)					Float by_7 = by9;
HXLINE(  24)					bx9 = cx9;
HXLINE(  25)					by9 = cy9;
HXLINE(  26)					cx9 = bx_7;
HXLINE(  27)					cy9 = by_7;
            				}
HXLINE( 249)				Float v_ax5 = ax7;
HXDLIN( 249)				Float v_ay5 = ay7;
HXDLIN( 249)				Float v_bx5 = bx9;
HXDLIN( 249)				Float v_by5 = by9;
HXDLIN( 249)				Float v_cx5 = cx9;
HXDLIN( 249)				Float v_cy5 = cy9;
HXDLIN( 249)				bool v_preCalculated5 = true;
HXDLIN( 249)				{
HXDLIN( 249)					v_s05 = ((v_ay5 * v_cx5) - (v_ax5 * v_cy5));
HXDLIN( 249)					v_sx5 = (v_cy5 - v_ay5);
HXDLIN( 249)					v_sy5 = (v_ax5 - v_cx5);
HXDLIN( 249)					v_t05 = ((v_ax5 * v_by5) - (v_ay5 * v_bx5));
HXDLIN( 249)					v_tx5 = (v_ay5 - v_by5);
HXDLIN( 249)					v_ty5 = (v_bx5 - v_ax5);
HXDLIN( 249)					v_A5 = ((((-(v_by5) * v_cx5) + (v_ay5 * (-(v_bx5) + v_cx5))) + (v_ax5 * (v_by5 - v_cy5))) + (v_bx5 * v_cy5));
HXDLIN( 249)					Float a61 = v_ax5;
HXDLIN( 249)					Float b66 = v_bx5;
HXDLIN( 249)					Float c36 = v_cx5;
HXDLIN( 249)					if ((a61 > b66)) {
HXDLIN( 249)						if ((a61 > c36)) {
HXDLIN( 249)							int min52;
HXDLIN( 249)							if ((b66 > c36)) {
HXDLIN( 249)								min52 = ::Math_obj::floor(c36);
            							}
            							else {
HXDLIN( 249)								min52 = ::Math_obj::floor(b66);
            							}
HXDLIN( 249)							int ii_min104 = min52;
HXDLIN( 249)							int ii_max104 = ::Math_obj::ceil(a61);
HXDLIN( 249)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min104,ii_max104);
            						}
            						else {
HXDLIN( 249)							int ii_min105 = ::Math_obj::floor(b66);
HXDLIN( 249)							int ii_max105 = ::Math_obj::ceil(c36);
HXDLIN( 249)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min105,ii_max105);
            						}
            					}
            					else {
HXDLIN( 249)						if ((b66 > c36)) {
HXDLIN( 249)							int min53;
HXDLIN( 249)							if ((a61 > c36)) {
HXDLIN( 249)								min53 = ::Math_obj::floor(c36);
            							}
            							else {
HXDLIN( 249)								min53 = ::Math_obj::ceil(a61);
            							}
HXDLIN( 249)							int ii_min106 = min53;
HXDLIN( 249)							int ii_max106 = ::Math_obj::ceil(b66);
HXDLIN( 249)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min106,ii_max106);
            						}
            						else {
HXDLIN( 249)							int ii_min107 = ::Math_obj::floor(a61);
HXDLIN( 249)							int ii_max107 = ::Math_obj::ceil(c36);
HXDLIN( 249)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min107,ii_max107);
            						}
            					}
HXDLIN( 249)					Float a62 = v_ay5;
HXDLIN( 249)					Float b67 = v_by5;
HXDLIN( 249)					Float c37 = v_cy5;
HXDLIN( 249)					if ((a62 > b67)) {
HXDLIN( 249)						if ((a62 > c37)) {
HXDLIN( 249)							int min54;
HXDLIN( 249)							if ((b67 > c37)) {
HXDLIN( 249)								min54 = ::Math_obj::floor(c37);
            							}
            							else {
HXDLIN( 249)								min54 = ::Math_obj::floor(b67);
            							}
HXDLIN( 249)							int ii_min108 = min54;
HXDLIN( 249)							int ii_max108 = ::Math_obj::ceil(a62);
HXDLIN( 249)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min108,ii_max108);
            						}
            						else {
HXDLIN( 249)							int ii_min109 = ::Math_obj::floor(b67);
HXDLIN( 249)							int ii_max109 = ::Math_obj::ceil(c37);
HXDLIN( 249)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min109,ii_max109);
            						}
            					}
            					else {
HXDLIN( 249)						if ((b67 > c37)) {
HXDLIN( 249)							int min55;
HXDLIN( 249)							if ((a62 > c37)) {
HXDLIN( 249)								min55 = ::Math_obj::floor(c37);
            							}
            							else {
HXDLIN( 249)								min55 = ::Math_obj::ceil(a62);
            							}
HXDLIN( 249)							int ii_min110 = min55;
HXDLIN( 249)							int ii_max110 = ::Math_obj::ceil(b67);
HXDLIN( 249)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min110,ii_max110);
            						}
            						else {
HXDLIN( 249)							int ii_min111 = ::Math_obj::floor(a62);
HXDLIN( 249)							int ii_max111 = ::Math_obj::ceil(c37);
HXDLIN( 249)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min111,ii_max111);
            						}
            					}
            				}
HXDLIN( 249)				if (hasUndo7) {
HXDLIN( 249)					v_undoImage5 = undoImage21;
HXDLIN( 249)					v_undoX5 = xIter37->start;
HXDLIN( 249)					v_undoY5 = yIter37->start;
            				}
HXDLIN( 249)				 ::pi_xy::algo::HitQuad v17 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax4,ay4,bx5,by5,cx5,cy5,dx5,dy5,true);
HXDLIN( 249)				hitQuad = v17;
            			}
            		}
            		else {
HXDLIN( 249)			Float sin3 = ::Math_obj::sin(theta);
HXDLIN( 249)			Float cos3 = ::Math_obj::cos(theta);
HXDLIN( 249)			Float radius3 = (thick / ( (Float)(2) ));
HXDLIN( 249)			Float dx10 = ((Float)0.1);
HXDLIN( 249)			Float dy10 = radius3;
HXDLIN( 249)			Float cx10 = h2;
HXDLIN( 249)			Float cy10 = radius3;
HXDLIN( 249)			Float bx10 = h2;
HXDLIN( 249)			Float by10 = -(radius3);
HXDLIN( 249)			Float ax8 = ((Float)0.1);
HXDLIN( 249)			Float ay8 = -(radius3);
HXDLIN( 249)			Float temp2 = ((Float)0.);
HXLINE(  82)			temp2 = (px + ((ax8 * cos3) - (ay8 * sin3)));
HXLINE(  83)			ay8 = (py + ((ay8 * cos3) + (ax8 * sin3)));
HXLINE(  84)			ax8 = temp2;
HXLINE(  86)			temp2 = (px + ((bx10 * cos3) - (by10 * sin3)));
HXLINE(  87)			by10 = (py + ((by10 * cos3) + (bx10 * sin3)));
HXLINE(  88)			bx10 = temp2;
HXLINE(  90)			temp2 = (px + ((cx10 * cos3) - (cy10 * sin3)));
HXLINE(  91)			cy10 = (py + ((cy10 * cos3) + (cx10 * sin3)));
HXLINE(  92)			cx10 = temp2;
HXLINE(  94)			temp2 = (px + ((dx10 * cos3) - (dy10 * sin3)));
HXLINE(  95)			dy10 = (py + ((dy10 * cos3) + (dx10 * sin3)));
HXLINE(  96)			dx10 = temp2;
HXLINE( 249)			{
HXDLIN( 249)				bool hasUndo8 = true;
HXDLIN( 249)				int aA6 = ((color >> 24) & 255);
HXDLIN( 249)				int rA6 = ((color >> 16) & 255);
HXDLIN( 249)				int gA6 = ((color >> 8) & 255);
HXDLIN( 249)				int bA6 = (color & 255);
HXDLIN( 249)				Float bcx6 = (bx10 - dx10);
HXDLIN( 249)				Float bcy6 = (by10 - dy10);
HXDLIN( 249)				Float acx6 = (ax8 - dx10);
HXDLIN( 249)				Float acy6 = (ay8 - dy10);
HXDLIN( 249)				Float dot116 = ((bcx6 * bcx6) + (bcy6 * bcy6));
HXDLIN( 249)				Float dot126 = ((bcx6 * acx6) + (bcy6 * acy6));
HXDLIN( 249)				Float dot226 = ((acx6 * acx6) + (acy6 * acy6));
HXDLIN( 249)				Float denom16 = (( (Float)(1) ) / ((dot116 * dot226) - (dot126 * dot126)));
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart xIter38;
HXDLIN( 249)				if ((ax8 > bx10)) {
HXDLIN( 249)					if ((ax8 > dx10)) {
HXDLIN( 249)						int min56;
HXDLIN( 249)						if ((bx10 > dx10)) {
HXDLIN( 249)							min56 = ::Math_obj::floor(dx10);
            						}
            						else {
HXDLIN( 249)							min56 = ::Math_obj::floor(bx10);
            						}
HXDLIN( 249)						int ii_min112 = min56;
HXDLIN( 249)						int ii_max112 = ::Math_obj::ceil(ax8);
HXDLIN( 249)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min112,ii_max112);
            					}
            					else {
HXDLIN( 249)						int ii_min113 = ::Math_obj::floor(bx10);
HXDLIN( 249)						int ii_max113 = ::Math_obj::ceil(dx10);
HXDLIN( 249)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min113,ii_max113);
            					}
            				}
            				else {
HXDLIN( 249)					if ((bx10 > dx10)) {
HXDLIN( 249)						int min57;
HXDLIN( 249)						if ((ax8 > dx10)) {
HXDLIN( 249)							min57 = ::Math_obj::floor(dx10);
            						}
            						else {
HXDLIN( 249)							min57 = ::Math_obj::ceil(ax8);
            						}
HXDLIN( 249)						int ii_min114 = min57;
HXDLIN( 249)						int ii_max114 = ::Math_obj::ceil(bx10);
HXDLIN( 249)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min114,ii_max114);
            					}
            					else {
HXDLIN( 249)						int ii_min115 = ::Math_obj::floor(ax8);
HXDLIN( 249)						int ii_max115 = ::Math_obj::ceil(dx10);
HXDLIN( 249)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min115,ii_max115);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart yIter38;
HXDLIN( 249)				if ((ay8 > by10)) {
HXDLIN( 249)					if ((ay8 > dy10)) {
HXDLIN( 249)						int min58;
HXDLIN( 249)						if ((by10 > dy10)) {
HXDLIN( 249)							min58 = ::Math_obj::floor(dy10);
            						}
            						else {
HXDLIN( 249)							min58 = ::Math_obj::floor(by10);
            						}
HXDLIN( 249)						int ii_min116 = min58;
HXDLIN( 249)						int ii_max116 = ::Math_obj::ceil(ay8);
HXDLIN( 249)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min116,ii_max116);
            					}
            					else {
HXDLIN( 249)						int ii_min117 = ::Math_obj::floor(by10);
HXDLIN( 249)						int ii_max117 = ::Math_obj::ceil(dy10);
HXDLIN( 249)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min117,ii_max117);
            					}
            				}
            				else {
HXDLIN( 249)					if ((by10 > dy10)) {
HXDLIN( 249)						int min59;
HXDLIN( 249)						if ((ay8 > dy10)) {
HXDLIN( 249)							min59 = ::Math_obj::floor(dy10);
            						}
            						else {
HXDLIN( 249)							min59 = ::Math_obj::ceil(ay8);
            						}
HXDLIN( 249)						int ii_min118 = min59;
HXDLIN( 249)						int ii_max118 = ::Math_obj::ceil(by10);
HXDLIN( 249)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min118,ii_max118);
            					}
            					else {
HXDLIN( 249)						int ii_min119 = ::Math_obj::floor(ay8);
HXDLIN( 249)						int ii_max119 = ::Math_obj::ceil(dy10);
HXDLIN( 249)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min119,ii_max119);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::ImageStruct undoImage24 = null();
HXDLIN( 249)				if (hasUndo8) {
HXDLIN( 249)					int width8 = ((xIter38->max - xIter38->start) + 1);
HXDLIN( 249)					int height8 = ((yIter38->max - yIter38->start) + 1);
HXDLIN( 249)					 ::Dynamic imageType8 = null();
HXDLIN( 249)					 ::pi_xy::ImageStruct this254 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 249)					if (::hx::IsNull( imageType8 )) {
HXLINE(  54)						imageType8 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 249)					::Dynamic undoImage25;
HXDLIN( 249)					switch((int)(( (int)(imageType8) ))){
            						case (int)0: {
HXDLIN( 249)							 ::iterMagic::BytesImg byt8 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::BytesImg b68 = byt8;
HXDLIN( 249)							{
HXDLIN( 249)								b68->width = width8;
HXDLIN( 249)								b68->height = height8;
HXDLIN( 249)								b68->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 249)								b68->data = ::haxe::io::Bytes_obj::alloc((b68->length * 4));
HXDLIN( 249)								{
HXDLIN( 249)									int len16 = b68->length;
HXDLIN( 249)									int w8 = 0;
HXDLIN( 249)									{
HXDLIN( 249)										int _g160 = 0;
HXDLIN( 249)										int _g161 = b68->height;
HXDLIN( 249)										while((_g160 < _g161)){
HXDLIN( 249)											_g160 = (_g160 + 1);
HXDLIN( 249)											int y26 = (_g160 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												int _g162 = 0;
HXDLIN( 249)												int _g163 = b68->width;
HXDLIN( 249)												while((_g162 < _g163)){
HXDLIN( 249)													_g162 = (_g162 + 1);
HXDLIN( 249)													int x26 = (_g162 - 1);
HXDLIN( 249)													{
HXDLIN( 249)														w8 = (w8 + 1);
HXDLIN( 249)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w8 = (w8 + 1);
HXDLIN( 249)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w8 = (w8 + 1);
HXDLIN( 249)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w8 = (w8 + 1);
HXDLIN( 249)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage25 = b68;
            						}
            						break;
            						case (int)1: {
HXDLIN( 249)							 ::iterMagic::ArrIntImg arrI8 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::ArrIntImg a63 = arrI8;
HXDLIN( 249)							{
HXDLIN( 249)								a63->width = width8;
HXDLIN( 249)								a63->height = height8;
HXDLIN( 249)								a63->data = ::Array_obj< int >::__new(0);
HXDLIN( 249)								a63->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 249)								{
HXDLIN( 249)									int _g164 = 0;
HXDLIN( 249)									int _g165 = a63->length;
HXDLIN( 249)									while((_g164 < _g165)){
HXDLIN( 249)										_g164 = (_g164 + 1);
HXDLIN( 249)										int i72 = (_g164 - 1);
HXDLIN( 249)										a63->data[i72] = 0;
            									}
            								}
            							}
HXDLIN( 249)							undoImage25 = a63;
            						}
            						break;
            						case (int)2: {
HXDLIN( 249)							 ::iterMagic::U32ArrImg u32a8 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::U32ArrImg b69 = u32a8;
HXDLIN( 249)							{
HXDLIN( 249)								b69->width = width8;
HXDLIN( 249)								b69->height = height8;
HXDLIN( 249)								b69->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 249)								int size8 = (b69->length * 4);
HXDLIN( 249)								b69->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size8),0,size8);
HXDLIN( 249)								{
HXDLIN( 249)									int _g166 = 0;
HXDLIN( 249)									int _g167 = b69->length;
HXDLIN( 249)									while((_g166 < _g167)){
HXDLIN( 249)										_g166 = (_g166 + 1);
HXDLIN( 249)										int i73 = (_g166 - 1);
HXDLIN( 249)										{
HXDLIN( 249)											 ::haxe::io::ArrayBufferViewImpl this255 = b69->data;
HXDLIN( 249)											bool undoImage26;
HXDLIN( 249)											if ((i73 >= 0)) {
HXDLIN( 249)												undoImage26 = (i73 < (this255->byteLength >> 2));
            											}
            											else {
HXDLIN( 249)												undoImage26 = false;
            											}
HXDLIN( 249)											if (undoImage26) {
HXDLIN( 249)												 ::haxe::io::Bytes _this8 = this255->bytes;
HXDLIN( 249)												int pos8 = ((i73 << 2) + this255->byteOffset);
HXDLIN( 249)												_this8->b[pos8] = ( (unsigned char)(0) );
HXDLIN( 249)												_this8->b[(pos8 + 1)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this8->b[(pos8 + 2)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this8->b[(pos8 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage25 = b69;
            						}
            						break;
            						case (int)3: {
HXDLIN( 249)							 ::iterMagic::VecIntImg vec8 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::VecIntImg v18 = vec8;
HXDLIN( 249)							{
HXDLIN( 249)								v18->width = width8;
HXDLIN( 249)								v18->height = height8;
HXDLIN( 249)								v18->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 249)								v18->data = ::Array_obj< int >::__new(v18->length);
HXDLIN( 249)								{
HXDLIN( 249)									int _g168 = 0;
HXDLIN( 249)									int _g169 = v18->length;
HXDLIN( 249)									while((_g168 < _g169)){
HXDLIN( 249)										_g168 = (_g168 + 1);
HXDLIN( 249)										int i74 = (_g168 - 1);
HXDLIN( 249)										v18->data->__unsafe_set(i74,0);
            									}
            								}
            							}
HXDLIN( 249)							undoImage25 = v18;
            						}
            						break;
            						case (int)4: {
HXDLIN( 249)							 ::iterMagic::StackIntImg sInt8 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::StackIntImg b70 = sInt8;
HXDLIN( 249)							{
HXDLIN( 249)								b70->width = width8;
HXDLIN( 249)								b70->height = height8;
HXDLIN( 249)								b70->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 249)								b70->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 249)								{
HXDLIN( 249)									int len17 = b70->length;
HXDLIN( 249)									 ::haxe::ds::GenericStack_Int d8 = b70->data;
HXDLIN( 249)									if (::hx::IsNull( d8->head )) {
HXDLIN( 249)										int _g170 = 0;
HXDLIN( 249)										int _g171 = len17;
HXDLIN( 249)										while((_g170 < _g171)){
HXDLIN( 249)											_g170 = (_g170 + 1);
HXDLIN( 249)											int i75 = (_g170 - 1);
HXDLIN( 249)											d8->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d8->head);
            										}
            									}
            									else {
HXDLIN( 249)										int _g172 = 0;
HXDLIN( 249)										int _g173 = len17;
HXDLIN( 249)										while((_g172 < _g173)){
HXDLIN( 249)											_g172 = (_g172 + 1);
HXDLIN( 249)											int i76 = (_g172 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int l8 = b70->data->head;
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int prev8 = null();
HXDLIN( 249)												{
HXDLIN( 249)													int _g174 = 0;
HXDLIN( 249)													int _g175 = i76;
HXDLIN( 249)													while((_g174 < _g175)){
HXDLIN( 249)														_g174 = (_g174 + 1);
HXDLIN( 249)														int i77 = (_g174 - 1);
HXLINE( 345)														prev8 = l8;
HXLINE( 346)														l8 = l8->next;
            													}
            												}
HXLINE( 249)												if (::hx::IsNull( prev8 )) {
HXDLIN( 249)													b70->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN( 249)													l8 = null();
            												}
            												else {
HXDLIN( 249)													prev8->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN( 249)													l8 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage25 = b70;
            						}
            						break;
            					}
HXDLIN( 249)					this254->image = undoImage25;
HXDLIN( 249)					this254->width = width8;
HXDLIN( 249)					this254->height = height8;
HXDLIN( 249)					this254->imageType = ( (int)(imageType8) );
HXDLIN( 249)					undoImage24 = this254;
HXDLIN( 249)					{
HXDLIN( 249)						int rectLeft8 = xIter38->start;
HXDLIN( 249)						int rectTop8 = yIter38->start;
HXDLIN( 249)						int rectRight8 = xIter38->max;
HXDLIN( 249)						bool forceClear8 = false;
HXDLIN( 249)						{
HXDLIN( 249)							int _g176 = rectTop8;
HXDLIN( 249)							int _g177 = yIter38->max;
HXDLIN( 249)							while((_g176 < _g177)){
HXDLIN( 249)								_g176 = (_g176 + 1);
HXDLIN( 249)								int dy11 = (_g176 - 1);
HXDLIN( 249)								{
HXDLIN( 249)									int _g178 = rectLeft8;
HXDLIN( 249)									int _g179 = rectRight8;
HXDLIN( 249)									while((_g178 < _g179)){
HXDLIN( 249)										_g178 = (_g178 + 1);
HXDLIN( 249)										int dx11 = (_g178 - 1);
HXDLIN( 249)										::Dynamic this256 = this1->image;
HXDLIN( 249)										int index34;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											index34 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx11) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											index34 = ::Std_obj::_hx_int(( (Float)(((dy11 * this1->width) + dx11)) ));
            										}
HXDLIN( 249)										int c38 = ::iterMagic::Iimg_obj::get(this256,index34);
HXDLIN( 249)										int col8;
HXDLIN( 249)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)											col8 = ((((((c38 >> 24) & 255) << 24) | ((c38 & 255) << 16)) | (((c38 >> 8) & 255) << 8)) | ((c38 >> 16) & 255));
            										}
            										else {
HXDLIN( 249)											col8 = c38;
            										}
HXDLIN( 249)										bool hitQuad65;
HXDLIN( 249)										if (this1->useMask) {
HXDLIN( 249)											hitQuad65 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 249)											hitQuad65 = false;
            										}
HXDLIN( 249)										if (hitQuad65) {
HXDLIN( 249)											 ::pi_xy::ImageStruct this257 = this1->mask;
HXDLIN( 249)											::Dynamic this258 = this257->image;
HXDLIN( 249)											int index35;
HXDLIN( 249)											if (this257->useVirtualPos) {
HXDLIN( 249)												index35 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - this257->virtualY) * ( (Float)(this257->width) )) + dx11) - this257->virtualX));
            											}
            											else {
HXDLIN( 249)												index35 = ::Std_obj::_hx_int(( (Float)(((dy11 * this257->width) + dx11)) ));
            											}
HXDLIN( 249)											int c39 = ::iterMagic::Iimg_obj::get(this258,index35);
HXDLIN( 249)											int v19;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												v19 = ((((((c39 >> 24) & 255) << 24) | ((c39 & 255) << 16)) | (((c39 >> 8) & 255) << 8)) | ((c39 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												v19 = c39;
            											}
HXDLIN( 249)											int maskPixel8 = v19;
HXDLIN( 249)											int this259 = col8;
HXDLIN( 249)											if ((maskPixel8 == 0)) {
HXDLIN( 249)												col8 = this259;
            											}
            											else {
HXDLIN( 249)												Float m08;
HXDLIN( 249)												int this260 = ((maskPixel8 >> 24) & 255);
HXDLIN( 249)												if ((this260 == 0)) {
HXDLIN( 249)													m08 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m08 = (( (Float)(this260) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m18;
HXDLIN( 249)												int this261 = ((maskPixel8 >> 16) & 255);
HXDLIN( 249)												if ((this261 == 0)) {
HXDLIN( 249)													m18 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m18 = (( (Float)(this261) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m28;
HXDLIN( 249)												int this262 = ((maskPixel8 >> 8) & 255);
HXDLIN( 249)												if ((this262 == 0)) {
HXDLIN( 249)													m28 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m28 = (( (Float)(this262) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m38;
HXDLIN( 249)												int this263 = (maskPixel8 & 255);
HXDLIN( 249)												if ((this263 == 0)) {
HXDLIN( 249)													m38 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m38 = (( (Float)(this263) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												int ch08 = ::Std_obj::_hx_int(((((Float)1.) - m08) * ( (Float)(((this259 >> 24) & 255)) )));
HXDLIN( 249)												int ch18 = ::Std_obj::_hx_int(((((Float)1.) - m18) * ( (Float)(((this259 >> 16) & 255)) )));
HXDLIN( 249)												int ch28 = ::Std_obj::_hx_int(((((Float)1.) - m28) * ( (Float)(((this259 >> 8) & 255)) )));
HXDLIN( 249)												int ch38 = ::Std_obj::_hx_int(((((Float)1.) - m38) * ( (Float)((this259 & 255)) )));
HXDLIN( 249)												col8 = ((((::Math_obj::round((( (Float)(ch08) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch18) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch28) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch38) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 249)										if ((col8 != 0)) {
HXDLIN( 249)											int x27 = (dx11 - rectLeft8);
HXDLIN( 249)											int y27 = (dy11 - rectTop8);
HXDLIN( 249)											int c40 = col8;
HXDLIN( 249)											bool hitQuad66;
HXDLIN( 249)											if ((((c40 >> 24) & 255) < 254)) {
HXDLIN( 249)												hitQuad66 = undoImage24->transparent;
            											}
            											else {
HXDLIN( 249)												hitQuad66 = false;
            											}
HXDLIN( 249)											if (hitQuad66) {
HXDLIN( 249)												int location16;
HXDLIN( 249)												if (undoImage24->useVirtualPos) {
HXDLIN( 249)													location16 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x27) - undoImage24->virtualX));
            												}
            												else {
HXDLIN( 249)													location16 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage24->width) + x27)) ));
            												}
HXDLIN( 249)												int this264 = ::iterMagic::Iimg_obj::get(undoImage24->image,location16);
HXDLIN( 249)												int this265;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													this265 = ((((((this264 >> 24) & 255) << 24) | ((this264 & 255) << 16)) | (((this264 >> 8) & 255) << 8)) | ((this264 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													this265 = this264;
            												}
HXDLIN( 249)												Float a121;
HXDLIN( 249)												int this266 = ((this265 >> 24) & 255);
HXDLIN( 249)												if ((this266 == 0)) {
HXDLIN( 249)													a121 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a121 = (( (Float)(this266) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r118;
HXDLIN( 249)												int this267 = ((this265 >> 16) & 255);
HXDLIN( 249)												if ((this267 == 0)) {
HXDLIN( 249)													r118 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r118 = (( (Float)(this267) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g118;
HXDLIN( 249)												int this268 = ((this265 >> 8) & 255);
HXDLIN( 249)												if ((this268 == 0)) {
HXDLIN( 249)													g118 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g118 = (( (Float)(this268) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b122;
HXDLIN( 249)												int this269 = (this265 & 255);
HXDLIN( 249)												if ((this269 == 0)) {
HXDLIN( 249)													b122 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b122 = (( (Float)(this269) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a219;
HXDLIN( 249)												int this270 = ((col8 >> 24) & 255);
HXDLIN( 249)												if ((this270 == 0)) {
HXDLIN( 249)													a219 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a219 = (( (Float)(this270) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r217;
HXDLIN( 249)												int this271 = ((col8 >> 16) & 255);
HXDLIN( 249)												if ((this271 == 0)) {
HXDLIN( 249)													r217 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r217 = (( (Float)(this271) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g217;
HXDLIN( 249)												int this272 = ((col8 >> 8) & 255);
HXDLIN( 249)												if ((this272 == 0)) {
HXDLIN( 249)													g217 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g217 = (( (Float)(this272) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b220;
HXDLIN( 249)												int this273 = (col8 & 255);
HXDLIN( 249)												if ((this273 == 0)) {
HXDLIN( 249)													b220 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b220 = (( (Float)(this273) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a318 = (a121 * (( (Float)(1) ) - a219));
HXDLIN( 249)												int r39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r118 * a318) + (r217 * a219))));
HXDLIN( 249)												int g39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g118 * a318) + (g217 * a219))));
HXDLIN( 249)												int b71 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b122 * a318) + (b220 * a219))));
HXDLIN( 249)												int a64 = ::Std_obj::_hx_int((( (Float)(255) ) * (a318 + a219)));
HXDLIN( 249)												int blended16 = ((((a64 << 24) | (r39 << 16)) | (g39 << 8)) | b71);
HXDLIN( 249)												{
HXDLIN( 249)													int hitQuad67;
HXDLIN( 249)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)														hitQuad67 = ((((((blended16 >> 24) & 255) << 24) | ((blended16 & 255) << 16)) | (((blended16 >> 8) & 255) << 8)) | ((blended16 >> 16) & 255));
            													}
            													else {
HXDLIN( 249)														hitQuad67 = blended16;
            													}
HXDLIN( 249)													::iterMagic::Iimg_obj::set(undoImage24->image,location16,hitQuad67);
            												}
            											}
            											else {
HXDLIN( 249)												::Dynamic this274 = undoImage24->image;
HXDLIN( 249)												int index36;
HXDLIN( 249)												if (undoImage24->useVirtualPos) {
HXDLIN( 249)													index36 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x27) - undoImage24->virtualX));
            												}
            												else {
HXDLIN( 249)													index36 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage24->width) + x27)) ));
            												}
HXDLIN( 249)												int hitQuad68;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad68 = ((((((c40 >> 24) & 255) << 24) | ((c40 & 255) << 16)) | (((c40 >> 8) & 255) << 8)) | ((c40 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad68 = c40;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this274,index36,hitQuad68);
            											}
            										}
            										else {
HXDLIN( 249)											if (forceClear8) {
HXDLIN( 249)												::Dynamic this275 = undoImage24->image;
HXDLIN( 249)												int x28 = (dx11 - rectLeft8);
HXDLIN( 249)												int y28 = (dy11 - rectTop8);
HXDLIN( 249)												int index37;
HXDLIN( 249)												if (undoImage24->useVirtualPos) {
HXDLIN( 249)													index37 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x28) - undoImage24->virtualX));
            												}
            												else {
HXDLIN( 249)													index37 = ::Std_obj::_hx_int(( (Float)(((y28 * undoImage24->width) + x28)) ));
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this275,index37,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 249)				bool found8 = false;
HXDLIN( 249)				Float min60 = ( (Float)(0) );
HXDLIN( 249)				Float max = ( (Float)(0) );
HXDLIN( 249)				int a65 = 0;
HXDLIN( 249)				int r40 = 0;
HXDLIN( 249)				int g40 = 0;
HXDLIN( 249)				int b72 = 0;
HXDLIN( 249)				{
HXDLIN( 249)					int _g_min16 = xIter38->start;
HXDLIN( 249)					int _g_max16 = xIter38->max;
HXDLIN( 249)					while((_g_min16 < _g_max16)){
HXDLIN( 249)						_g_min16 = (_g_min16 + 1);
HXDLIN( 249)						int px7 = (_g_min16 - 1);
HXDLIN( 249)						Float pcx6 = (( (Float)(px7) ) - dx10);
HXLINE( 695)						found8 = false;
HXLINE( 249)						{
HXDLIN( 249)							int _g_min17 = yIter38->start;
HXDLIN( 249)							int _g_max17 = yIter38->max;
HXDLIN( 249)							while((_g_min17 < _g_max17)){
HXDLIN( 249)								_g_min17 = (_g_min17 + 1);
HXDLIN( 249)								int py7 = (_g_min17 - 1);
HXDLIN( 249)								Float pcy6 = (( (Float)(py7) ) - dy10);
HXDLIN( 249)								Float dot316 = ((pcx6 * bcx6) + (pcy6 * bcy6));
HXDLIN( 249)								Float dot326 = ((pcx6 * acx6) + (pcy6 * acy6));
HXDLIN( 249)								Float ratioA6 = (((dot226 * dot316) - (dot126 * dot326)) * denom16);
HXDLIN( 249)								Float ratioB6 = (((dot116 * dot326) - (dot126 * dot316)) * denom16);
HXDLIN( 249)								Float ratioC6 = ((((Float)1.0) - ratioB6) - ratioA6);
HXDLIN( 249)								bool hitQuad69;
HXDLIN( 249)								bool hitQuad70;
HXDLIN( 249)								if ((ratioA6 >= 0)) {
HXDLIN( 249)									hitQuad70 = (ratioB6 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad70 = false;
            								}
HXDLIN( 249)								if (hitQuad70) {
HXDLIN( 249)									hitQuad69 = (ratioC6 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad69 = false;
            								}
HXDLIN( 249)								if (hitQuad69) {
HXDLIN( 249)									if ((ratioA6 < ratioC6)) {
HXDLIN( 249)										min60 = ratioA6;
            									}
            									else {
HXDLIN( 249)										min60 = ratioC6;
            									}
HXDLIN( 249)									if ((ratioA6 > ratioB6)) {
HXDLIN( 249)										max = ratioA6;
            									}
            									else {
HXDLIN( 249)										max = ratioB6;
            									}
HXDLIN( 249)									if (!((max > ratioC6))) {
HXDLIN( 249)										max = ratioC6;
            									}
HXLINE( 728)									max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE( 249)									if (!((min60 < max))) {
HXDLIN( 249)										min60 = ((max + min60) / ( (Float)(2) ));
            									}
HXDLIN( 249)									int i78 = ::Std_obj::_hx_int(((( (Float)(aA6) ) * soft) * min60));
HXDLIN( 249)									if ((i78 > 255)) {
HXLINE(  24)										i78 = 255;
            									}
HXLINE( 249)									if ((i78 < 0)) {
HXLINE(  25)										i78 = 0;
            									}
HXLINE( 249)									a65 = i78;
HXDLIN( 249)									int i79 = ::Std_obj::_hx_int(( (Float)(rA6) ));
HXDLIN( 249)									if ((i79 > 255)) {
HXLINE(  24)										i79 = 255;
            									}
HXLINE( 249)									if ((i79 < 0)) {
HXLINE(  25)										i79 = 0;
            									}
HXLINE( 747)									r40 = i79;
HXLINE( 249)									int i80 = ::Std_obj::_hx_int(( (Float)(gA6) ));
HXDLIN( 249)									if ((i80 > 255)) {
HXLINE(  24)										i80 = 255;
            									}
HXLINE( 249)									if ((i80 < 0)) {
HXLINE(  25)										i80 = 0;
            									}
HXLINE( 748)									g40 = i80;
HXLINE( 249)									int i81 = ::Std_obj::_hx_int(( (Float)(bA6) ));
HXDLIN( 249)									if ((i81 > 255)) {
HXLINE(  24)										i81 = 255;
            									}
HXLINE( 249)									if ((i81 < 0)) {
HXLINE(  25)										i81 = 0;
            									}
HXLINE( 749)									b72 = i81;
HXLINE( 249)									{
HXDLIN( 249)										int location17;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											location17 = ::Std_obj::_hx_int(((((( (Float)(py7) ) - this1->virtualY) * ( (Float)(this1->width) )) + px7) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											location17 = ::Std_obj::_hx_int(( (Float)(((py7 * this1->width) + px7)) ));
            										}
HXDLIN( 249)										bool hitQuad71;
HXDLIN( 249)										if (this1->transparent) {
HXDLIN( 249)											hitQuad71 = (a65 < 254);
            										}
            										else {
HXDLIN( 249)											hitQuad71 = false;
            										}
HXDLIN( 249)										if (hitQuad71) {
HXDLIN( 249)											int this276 = ::iterMagic::Iimg_obj::get(this1->image,location17);
HXDLIN( 249)											int old6;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												old6 = ((((((this276 >> 24) & 255) << 24) | ((this276 & 255) << 16)) | (((this276 >> 8) & 255) << 8)) | ((this276 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												old6 = this276;
            											}
HXDLIN( 249)											int rhs6 = ((((a65 << 24) | (r40 << 16)) | (g40 << 8)) | b72);
HXDLIN( 249)											Float a122;
HXDLIN( 249)											int this277 = ((old6 >> 24) & 255);
HXDLIN( 249)											if ((this277 == 0)) {
HXDLIN( 249)												a122 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a122 = (( (Float)(this277) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r119;
HXDLIN( 249)											int this278 = ((old6 >> 16) & 255);
HXDLIN( 249)											if ((this278 == 0)) {
HXDLIN( 249)												r119 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r119 = (( (Float)(this278) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g119;
HXDLIN( 249)											int this279 = ((old6 >> 8) & 255);
HXDLIN( 249)											if ((this279 == 0)) {
HXDLIN( 249)												g119 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g119 = (( (Float)(this279) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b123;
HXDLIN( 249)											int this280 = (old6 & 255);
HXDLIN( 249)											if ((this280 == 0)) {
HXDLIN( 249)												b123 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b123 = (( (Float)(this280) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a220;
HXDLIN( 249)											int this281 = ((rhs6 >> 24) & 255);
HXDLIN( 249)											if ((this281 == 0)) {
HXDLIN( 249)												a220 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a220 = (( (Float)(this281) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r218;
HXDLIN( 249)											int this282 = ((rhs6 >> 16) & 255);
HXDLIN( 249)											if ((this282 == 0)) {
HXDLIN( 249)												r218 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r218 = (( (Float)(this282) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g218;
HXDLIN( 249)											int this283 = ((rhs6 >> 8) & 255);
HXDLIN( 249)											if ((this283 == 0)) {
HXDLIN( 249)												g218 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g218 = (( (Float)(this283) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b221;
HXDLIN( 249)											int this284 = (rhs6 & 255);
HXDLIN( 249)											if ((this284 == 0)) {
HXDLIN( 249)												b221 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b221 = (( (Float)(this284) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a319 = (a122 * (( (Float)(1) ) - a220));
HXDLIN( 249)											int r41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r119 * a319) + (r218 * a220))));
HXDLIN( 249)											int g41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g119 * a319) + (g218 * a220))));
HXDLIN( 249)											int b73 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b123 * a319) + (b221 * a220))));
HXDLIN( 249)											int a66 = ::Std_obj::_hx_int((( (Float)(255) ) * (a319 + a220)));
HXDLIN( 249)											int blended17 = ((((a66 << 24) | (r41 << 16)) | (g41 << 8)) | b73);
HXDLIN( 249)											{
HXDLIN( 249)												int hitQuad72;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad72 = ((((((blended17 >> 24) & 255) << 24) | ((blended17 & 255) << 16)) | (((blended17 >> 8) & 255) << 8)) | ((blended17 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad72 = blended17;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this1->image,location17,hitQuad72);
            											}
            										}
            										else {
HXDLIN( 249)											int value6;
HXDLIN( 249)											if (this1->isLittle) {
HXDLIN( 249)												value6 = ((((a65 << 24) | (b72 << 16)) | (g40 << 8)) | r40);
            											}
            											else {
HXDLIN( 249)												value6 = ((((a65 << 24) | (r40 << 16)) | (g40 << 8)) | b72);
            											}
HXDLIN( 249)											::iterMagic::Iimg_obj::set(this1->image,location17,value6);
            										}
            									}
HXLINE( 751)									found8 = true;
            								}
            								else {
HXDLIN( 249)									if (found8) {
HXDLIN( 249)										goto _hx_goto_541;
            									}
            								}
            							}
            							_hx_goto_541:;
            						}
            					}
            				}
            			}
HXDLIN( 249)			{
HXDLIN( 249)				bool hasUndo9 = true;
HXDLIN( 249)				int aA7 = ((color >> 24) & 255);
HXDLIN( 249)				int rA7 = ((color >> 16) & 255);
HXDLIN( 249)				int gA7 = ((color >> 8) & 255);
HXDLIN( 249)				int bA7 = (color & 255);
HXDLIN( 249)				Float bcx7 = (cx10 - dx10);
HXDLIN( 249)				Float bcy7 = (cy10 - dy10);
HXDLIN( 249)				Float acx7 = (bx10 - dx10);
HXDLIN( 249)				Float acy7 = (by10 - dy10);
HXDLIN( 249)				Float dot117 = ((bcx7 * bcx7) + (bcy7 * bcy7));
HXDLIN( 249)				Float dot127 = ((bcx7 * acx7) + (bcy7 * acy7));
HXDLIN( 249)				Float dot227 = ((acx7 * acx7) + (acy7 * acy7));
HXDLIN( 249)				Float denom17 = (( (Float)(1) ) / ((dot117 * dot227) - (dot127 * dot127)));
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart xIter39;
HXDLIN( 249)				if ((bx10 > cx10)) {
HXDLIN( 249)					if ((bx10 > dx10)) {
HXDLIN( 249)						int min61;
HXDLIN( 249)						if ((cx10 > dx10)) {
HXDLIN( 249)							min61 = ::Math_obj::floor(dx10);
            						}
            						else {
HXDLIN( 249)							min61 = ::Math_obj::floor(cx10);
            						}
HXDLIN( 249)						int ii_min120 = min61;
HXDLIN( 249)						int ii_max120 = ::Math_obj::ceil(bx10);
HXDLIN( 249)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min120,ii_max120);
            					}
            					else {
HXDLIN( 249)						int ii_min121 = ::Math_obj::floor(cx10);
HXDLIN( 249)						int ii_max121 = ::Math_obj::ceil(dx10);
HXDLIN( 249)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min121,ii_max121);
            					}
            				}
            				else {
HXDLIN( 249)					if ((cx10 > dx10)) {
HXDLIN( 249)						int min62;
HXDLIN( 249)						if ((bx10 > dx10)) {
HXDLIN( 249)							min62 = ::Math_obj::floor(dx10);
            						}
            						else {
HXDLIN( 249)							min62 = ::Math_obj::ceil(bx10);
            						}
HXDLIN( 249)						int ii_min122 = min62;
HXDLIN( 249)						int ii_max122 = ::Math_obj::ceil(cx10);
HXDLIN( 249)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min122,ii_max122);
            					}
            					else {
HXDLIN( 249)						int ii_min123 = ::Math_obj::floor(bx10);
HXDLIN( 249)						int ii_max123 = ::Math_obj::ceil(dx10);
HXDLIN( 249)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min123,ii_max123);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::iter::IntIterStart yIter39;
HXDLIN( 249)				if ((by10 > cy10)) {
HXDLIN( 249)					if ((by10 > dy10)) {
HXDLIN( 249)						int min63;
HXDLIN( 249)						if ((cy10 > dy10)) {
HXDLIN( 249)							min63 = ::Math_obj::floor(dy10);
            						}
            						else {
HXDLIN( 249)							min63 = ::Math_obj::floor(cy10);
            						}
HXDLIN( 249)						int ii_min124 = min63;
HXDLIN( 249)						int ii_max124 = ::Math_obj::ceil(by10);
HXDLIN( 249)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min124,ii_max124);
            					}
            					else {
HXDLIN( 249)						int ii_min125 = ::Math_obj::floor(cy10);
HXDLIN( 249)						int ii_max125 = ::Math_obj::ceil(dy10);
HXDLIN( 249)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min125,ii_max125);
            					}
            				}
            				else {
HXDLIN( 249)					if ((cy10 > dy10)) {
HXDLIN( 249)						int min64;
HXDLIN( 249)						if ((by10 > dy10)) {
HXDLIN( 249)							min64 = ::Math_obj::floor(dy10);
            						}
            						else {
HXDLIN( 249)							min64 = ::Math_obj::ceil(by10);
            						}
HXDLIN( 249)						int ii_min126 = min64;
HXDLIN( 249)						int ii_max126 = ::Math_obj::ceil(cy10);
HXDLIN( 249)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min126,ii_max126);
            					}
            					else {
HXDLIN( 249)						int ii_min127 = ::Math_obj::floor(by10);
HXDLIN( 249)						int ii_max127 = ::Math_obj::ceil(dy10);
HXDLIN( 249)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min127,ii_max127);
            					}
            				}
HXDLIN( 249)				 ::pi_xy::ImageStruct undoImage27 = null();
HXDLIN( 249)				if (hasUndo9) {
HXDLIN( 249)					int width9 = ((xIter39->max - xIter39->start) + 1);
HXDLIN( 249)					int height9 = ((yIter39->max - yIter39->start) + 1);
HXDLIN( 249)					 ::Dynamic imageType9 = null();
HXDLIN( 249)					 ::pi_xy::ImageStruct this285 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 249)					if (::hx::IsNull( imageType9 )) {
HXLINE(  54)						imageType9 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 249)					::Dynamic undoImage28;
HXDLIN( 249)					switch((int)(( (int)(imageType9) ))){
            						case (int)0: {
HXDLIN( 249)							 ::iterMagic::BytesImg byt9 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::BytesImg b74 = byt9;
HXDLIN( 249)							{
HXDLIN( 249)								b74->width = width9;
HXDLIN( 249)								b74->height = height9;
HXDLIN( 249)								b74->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 249)								b74->data = ::haxe::io::Bytes_obj::alloc((b74->length * 4));
HXDLIN( 249)								{
HXDLIN( 249)									int len18 = b74->length;
HXDLIN( 249)									int w9 = 0;
HXDLIN( 249)									{
HXDLIN( 249)										int _g180 = 0;
HXDLIN( 249)										int _g181 = b74->height;
HXDLIN( 249)										while((_g180 < _g181)){
HXDLIN( 249)											_g180 = (_g180 + 1);
HXDLIN( 249)											int y29 = (_g180 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												int _g182 = 0;
HXDLIN( 249)												int _g183 = b74->width;
HXDLIN( 249)												while((_g182 < _g183)){
HXDLIN( 249)													_g182 = (_g182 + 1);
HXDLIN( 249)													int x29 = (_g182 - 1);
HXDLIN( 249)													{
HXDLIN( 249)														w9 = (w9 + 1);
HXDLIN( 249)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w9 = (w9 + 1);
HXDLIN( 249)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w9 = (w9 + 1);
HXDLIN( 249)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 249)													{
HXDLIN( 249)														w9 = (w9 + 1);
HXDLIN( 249)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage28 = b74;
            						}
            						break;
            						case (int)1: {
HXDLIN( 249)							 ::iterMagic::ArrIntImg arrI9 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::ArrIntImg a67 = arrI9;
HXDLIN( 249)							{
HXDLIN( 249)								a67->width = width9;
HXDLIN( 249)								a67->height = height9;
HXDLIN( 249)								a67->data = ::Array_obj< int >::__new(0);
HXDLIN( 249)								a67->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 249)								{
HXDLIN( 249)									int _g184 = 0;
HXDLIN( 249)									int _g185 = a67->length;
HXDLIN( 249)									while((_g184 < _g185)){
HXDLIN( 249)										_g184 = (_g184 + 1);
HXDLIN( 249)										int i82 = (_g184 - 1);
HXDLIN( 249)										a67->data[i82] = 0;
            									}
            								}
            							}
HXDLIN( 249)							undoImage28 = a67;
            						}
            						break;
            						case (int)2: {
HXDLIN( 249)							 ::iterMagic::U32ArrImg u32a9 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::U32ArrImg b75 = u32a9;
HXDLIN( 249)							{
HXDLIN( 249)								b75->width = width9;
HXDLIN( 249)								b75->height = height9;
HXDLIN( 249)								b75->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 249)								int size9 = (b75->length * 4);
HXDLIN( 249)								b75->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size9),0,size9);
HXDLIN( 249)								{
HXDLIN( 249)									int _g186 = 0;
HXDLIN( 249)									int _g187 = b75->length;
HXDLIN( 249)									while((_g186 < _g187)){
HXDLIN( 249)										_g186 = (_g186 + 1);
HXDLIN( 249)										int i83 = (_g186 - 1);
HXDLIN( 249)										{
HXDLIN( 249)											 ::haxe::io::ArrayBufferViewImpl this286 = b75->data;
HXDLIN( 249)											bool undoImage29;
HXDLIN( 249)											if ((i83 >= 0)) {
HXDLIN( 249)												undoImage29 = (i83 < (this286->byteLength >> 2));
            											}
            											else {
HXDLIN( 249)												undoImage29 = false;
            											}
HXDLIN( 249)											if (undoImage29) {
HXDLIN( 249)												 ::haxe::io::Bytes _this9 = this286->bytes;
HXDLIN( 249)												int pos9 = ((i83 << 2) + this286->byteOffset);
HXDLIN( 249)												_this9->b[pos9] = ( (unsigned char)(0) );
HXDLIN( 249)												_this9->b[(pos9 + 1)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this9->b[(pos9 + 2)] = ( (unsigned char)(0) );
HXDLIN( 249)												_this9->b[(pos9 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage28 = b75;
            						}
            						break;
            						case (int)3: {
HXDLIN( 249)							 ::iterMagic::VecIntImg vec9 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::VecIntImg v20 = vec9;
HXDLIN( 249)							{
HXDLIN( 249)								v20->width = width9;
HXDLIN( 249)								v20->height = height9;
HXDLIN( 249)								v20->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 249)								v20->data = ::Array_obj< int >::__new(v20->length);
HXDLIN( 249)								{
HXDLIN( 249)									int _g188 = 0;
HXDLIN( 249)									int _g189 = v20->length;
HXDLIN( 249)									while((_g188 < _g189)){
HXDLIN( 249)										_g188 = (_g188 + 1);
HXDLIN( 249)										int i84 = (_g188 - 1);
HXDLIN( 249)										v20->data->__unsafe_set(i84,0);
            									}
            								}
            							}
HXDLIN( 249)							undoImage28 = v20;
            						}
            						break;
            						case (int)4: {
HXDLIN( 249)							 ::iterMagic::StackIntImg sInt9 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)							 ::iterMagic::StackIntImg b76 = sInt9;
HXDLIN( 249)							{
HXDLIN( 249)								b76->width = width9;
HXDLIN( 249)								b76->height = height9;
HXDLIN( 249)								b76->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 249)								b76->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 249)								{
HXDLIN( 249)									int len19 = b76->length;
HXDLIN( 249)									 ::haxe::ds::GenericStack_Int d9 = b76->data;
HXDLIN( 249)									if (::hx::IsNull( d9->head )) {
HXDLIN( 249)										int _g190 = 0;
HXDLIN( 249)										int _g191 = len19;
HXDLIN( 249)										while((_g190 < _g191)){
HXDLIN( 249)											_g190 = (_g190 + 1);
HXDLIN( 249)											int i85 = (_g190 - 1);
HXDLIN( 249)											d9->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d9->head);
            										}
            									}
            									else {
HXDLIN( 249)										int _g192 = 0;
HXDLIN( 249)										int _g193 = len19;
HXDLIN( 249)										while((_g192 < _g193)){
HXDLIN( 249)											_g192 = (_g192 + 1);
HXDLIN( 249)											int i86 = (_g192 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int l9 = b76->data->head;
HXDLIN( 249)												 ::haxe::ds::GenericCell_Int prev9 = null();
HXDLIN( 249)												{
HXDLIN( 249)													int _g194 = 0;
HXDLIN( 249)													int _g195 = i86;
HXDLIN( 249)													while((_g194 < _g195)){
HXDLIN( 249)														_g194 = (_g194 + 1);
HXDLIN( 249)														int i87 = (_g194 - 1);
HXLINE( 345)														prev9 = l9;
HXLINE( 346)														l9 = l9->next;
            													}
            												}
HXLINE( 249)												if (::hx::IsNull( prev9 )) {
HXDLIN( 249)													b76->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN( 249)													l9 = null();
            												}
            												else {
HXDLIN( 249)													prev9->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN( 249)													l9 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 249)							undoImage28 = b76;
            						}
            						break;
            					}
HXDLIN( 249)					this285->image = undoImage28;
HXDLIN( 249)					this285->width = width9;
HXDLIN( 249)					this285->height = height9;
HXDLIN( 249)					this285->imageType = ( (int)(imageType9) );
HXDLIN( 249)					undoImage27 = this285;
HXDLIN( 249)					{
HXDLIN( 249)						int rectLeft9 = xIter39->start;
HXDLIN( 249)						int rectTop9 = yIter39->start;
HXDLIN( 249)						int rectRight9 = xIter39->max;
HXDLIN( 249)						bool forceClear9 = false;
HXDLIN( 249)						{
HXDLIN( 249)							int _g196 = rectTop9;
HXDLIN( 249)							int _g197 = yIter39->max;
HXDLIN( 249)							while((_g196 < _g197)){
HXDLIN( 249)								_g196 = (_g196 + 1);
HXDLIN( 249)								int dy12 = (_g196 - 1);
HXDLIN( 249)								{
HXDLIN( 249)									int _g198 = rectLeft9;
HXDLIN( 249)									int _g199 = rectRight9;
HXDLIN( 249)									while((_g198 < _g199)){
HXDLIN( 249)										_g198 = (_g198 + 1);
HXDLIN( 249)										int dx12 = (_g198 - 1);
HXDLIN( 249)										::Dynamic this287 = this1->image;
HXDLIN( 249)										int index38;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											index38 = ::Std_obj::_hx_int(((((( (Float)(dy12) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx12) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											index38 = ::Std_obj::_hx_int(( (Float)(((dy12 * this1->width) + dx12)) ));
            										}
HXDLIN( 249)										int c41 = ::iterMagic::Iimg_obj::get(this287,index38);
HXDLIN( 249)										int col9;
HXDLIN( 249)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)											col9 = ((((((c41 >> 24) & 255) << 24) | ((c41 & 255) << 16)) | (((c41 >> 8) & 255) << 8)) | ((c41 >> 16) & 255));
            										}
            										else {
HXDLIN( 249)											col9 = c41;
            										}
HXDLIN( 249)										bool hitQuad73;
HXDLIN( 249)										if (this1->useMask) {
HXDLIN( 249)											hitQuad73 = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXDLIN( 249)											hitQuad73 = false;
            										}
HXDLIN( 249)										if (hitQuad73) {
HXDLIN( 249)											 ::pi_xy::ImageStruct this288 = this1->mask;
HXDLIN( 249)											::Dynamic this289 = this288->image;
HXDLIN( 249)											int index39;
HXDLIN( 249)											if (this288->useVirtualPos) {
HXDLIN( 249)												index39 = ::Std_obj::_hx_int(((((( (Float)(dy12) ) - this288->virtualY) * ( (Float)(this288->width) )) + dx12) - this288->virtualX));
            											}
            											else {
HXDLIN( 249)												index39 = ::Std_obj::_hx_int(( (Float)(((dy12 * this288->width) + dx12)) ));
            											}
HXDLIN( 249)											int c42 = ::iterMagic::Iimg_obj::get(this289,index39);
HXDLIN( 249)											int v21;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												v21 = ((((((c42 >> 24) & 255) << 24) | ((c42 & 255) << 16)) | (((c42 >> 8) & 255) << 8)) | ((c42 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												v21 = c42;
            											}
HXDLIN( 249)											int maskPixel9 = v21;
HXDLIN( 249)											int this290 = col9;
HXDLIN( 249)											if ((maskPixel9 == 0)) {
HXDLIN( 249)												col9 = this290;
            											}
            											else {
HXDLIN( 249)												Float m09;
HXDLIN( 249)												int this291 = ((maskPixel9 >> 24) & 255);
HXDLIN( 249)												if ((this291 == 0)) {
HXDLIN( 249)													m09 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m09 = (( (Float)(this291) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m19;
HXDLIN( 249)												int this292 = ((maskPixel9 >> 16) & 255);
HXDLIN( 249)												if ((this292 == 0)) {
HXDLIN( 249)													m19 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m19 = (( (Float)(this292) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m29;
HXDLIN( 249)												int this293 = ((maskPixel9 >> 8) & 255);
HXDLIN( 249)												if ((this293 == 0)) {
HXDLIN( 249)													m29 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m29 = (( (Float)(this293) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float m39;
HXDLIN( 249)												int this294 = (maskPixel9 & 255);
HXDLIN( 249)												if ((this294 == 0)) {
HXDLIN( 249)													m39 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													m39 = (( (Float)(this294) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												int ch09 = ::Std_obj::_hx_int(((((Float)1.) - m09) * ( (Float)(((this290 >> 24) & 255)) )));
HXDLIN( 249)												int ch19 = ::Std_obj::_hx_int(((((Float)1.) - m19) * ( (Float)(((this290 >> 16) & 255)) )));
HXDLIN( 249)												int ch29 = ::Std_obj::_hx_int(((((Float)1.) - m29) * ( (Float)(((this290 >> 8) & 255)) )));
HXDLIN( 249)												int ch39 = ::Std_obj::_hx_int(((((Float)1.) - m39) * ( (Float)((this290 & 255)) )));
HXDLIN( 249)												col9 = ((((::Math_obj::round((( (Float)(ch09) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch19) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch29) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch39) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 249)										if ((col9 != 0)) {
HXDLIN( 249)											int x30 = (dx12 - rectLeft9);
HXDLIN( 249)											int y30 = (dy12 - rectTop9);
HXDLIN( 249)											int c43 = col9;
HXDLIN( 249)											bool hitQuad74;
HXDLIN( 249)											if ((((c43 >> 24) & 255) < 254)) {
HXDLIN( 249)												hitQuad74 = undoImage27->transparent;
            											}
            											else {
HXDLIN( 249)												hitQuad74 = false;
            											}
HXDLIN( 249)											if (hitQuad74) {
HXDLIN( 249)												int location18;
HXDLIN( 249)												if (undoImage27->useVirtualPos) {
HXDLIN( 249)													location18 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x30) - undoImage27->virtualX));
            												}
            												else {
HXDLIN( 249)													location18 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage27->width) + x30)) ));
            												}
HXDLIN( 249)												int this295 = ::iterMagic::Iimg_obj::get(undoImage27->image,location18);
HXDLIN( 249)												int this296;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													this296 = ((((((this295 >> 24) & 255) << 24) | ((this295 & 255) << 16)) | (((this295 >> 8) & 255) << 8)) | ((this295 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													this296 = this295;
            												}
HXDLIN( 249)												Float a123;
HXDLIN( 249)												int this297 = ((this296 >> 24) & 255);
HXDLIN( 249)												if ((this297 == 0)) {
HXDLIN( 249)													a123 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a123 = (( (Float)(this297) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r120;
HXDLIN( 249)												int this298 = ((this296 >> 16) & 255);
HXDLIN( 249)												if ((this298 == 0)) {
HXDLIN( 249)													r120 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r120 = (( (Float)(this298) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g120;
HXDLIN( 249)												int this299 = ((this296 >> 8) & 255);
HXDLIN( 249)												if ((this299 == 0)) {
HXDLIN( 249)													g120 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g120 = (( (Float)(this299) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b124;
HXDLIN( 249)												int this300 = (this296 & 255);
HXDLIN( 249)												if ((this300 == 0)) {
HXDLIN( 249)													b124 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b124 = (( (Float)(this300) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a221;
HXDLIN( 249)												int this301 = ((col9 >> 24) & 255);
HXDLIN( 249)												if ((this301 == 0)) {
HXDLIN( 249)													a221 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													a221 = (( (Float)(this301) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float r219;
HXDLIN( 249)												int this302 = ((col9 >> 16) & 255);
HXDLIN( 249)												if ((this302 == 0)) {
HXDLIN( 249)													r219 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													r219 = (( (Float)(this302) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float g219;
HXDLIN( 249)												int this303 = ((col9 >> 8) & 255);
HXDLIN( 249)												if ((this303 == 0)) {
HXDLIN( 249)													g219 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													g219 = (( (Float)(this303) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float b222;
HXDLIN( 249)												int this304 = (col9 & 255);
HXDLIN( 249)												if ((this304 == 0)) {
HXDLIN( 249)													b222 = ((Float)0.);
            												}
            												else {
HXDLIN( 249)													b222 = (( (Float)(this304) ) / ( (Float)(255) ));
            												}
HXDLIN( 249)												Float a320 = (a123 * (( (Float)(1) ) - a221));
HXDLIN( 249)												int r42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r120 * a320) + (r219 * a221))));
HXDLIN( 249)												int g42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g120 * a320) + (g219 * a221))));
HXDLIN( 249)												int b77 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b124 * a320) + (b222 * a221))));
HXDLIN( 249)												int a68 = ::Std_obj::_hx_int((( (Float)(255) ) * (a320 + a221)));
HXDLIN( 249)												int blended18 = ((((a68 << 24) | (r42 << 16)) | (g42 << 8)) | b77);
HXDLIN( 249)												{
HXDLIN( 249)													int hitQuad75;
HXDLIN( 249)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)														hitQuad75 = ((((((blended18 >> 24) & 255) << 24) | ((blended18 & 255) << 16)) | (((blended18 >> 8) & 255) << 8)) | ((blended18 >> 16) & 255));
            													}
            													else {
HXDLIN( 249)														hitQuad75 = blended18;
            													}
HXDLIN( 249)													::iterMagic::Iimg_obj::set(undoImage27->image,location18,hitQuad75);
            												}
            											}
            											else {
HXDLIN( 249)												::Dynamic this305 = undoImage27->image;
HXDLIN( 249)												int index40;
HXDLIN( 249)												if (undoImage27->useVirtualPos) {
HXDLIN( 249)													index40 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x30) - undoImage27->virtualX));
            												}
            												else {
HXDLIN( 249)													index40 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage27->width) + x30)) ));
            												}
HXDLIN( 249)												int hitQuad76;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad76 = ((((((c43 >> 24) & 255) << 24) | ((c43 & 255) << 16)) | (((c43 >> 8) & 255) << 8)) | ((c43 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad76 = c43;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this305,index40,hitQuad76);
            											}
            										}
            										else {
HXDLIN( 249)											if (forceClear9) {
HXDLIN( 249)												::Dynamic this306 = undoImage27->image;
HXDLIN( 249)												int x31 = (dx12 - rectLeft9);
HXDLIN( 249)												int y31 = (dy12 - rectTop9);
HXDLIN( 249)												int index41;
HXDLIN( 249)												if (undoImage27->useVirtualPos) {
HXDLIN( 249)													index41 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x31) - undoImage27->virtualX));
            												}
            												else {
HXDLIN( 249)													index41 = ::Std_obj::_hx_int(( (Float)(((y31 * undoImage27->width) + x31)) ));
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this306,index41,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 249)				bool found9 = false;
HXDLIN( 249)				Float min65 = ( (Float)(0) );
HXDLIN( 249)				Float max1 = ( (Float)(0) );
HXDLIN( 249)				int a69 = 0;
HXDLIN( 249)				int r43 = 0;
HXDLIN( 249)				int g43 = 0;
HXDLIN( 249)				int b78 = 0;
HXDLIN( 249)				{
HXDLIN( 249)					int _g_min18 = xIter39->start;
HXDLIN( 249)					int _g_max18 = xIter39->max;
HXDLIN( 249)					while((_g_min18 < _g_max18)){
HXDLIN( 249)						_g_min18 = (_g_min18 + 1);
HXDLIN( 249)						int px8 = (_g_min18 - 1);
HXDLIN( 249)						Float pcx7 = (( (Float)(px8) ) - dx10);
HXLINE( 695)						found9 = false;
HXLINE( 249)						{
HXDLIN( 249)							int _g_min19 = yIter39->start;
HXDLIN( 249)							int _g_max19 = yIter39->max;
HXDLIN( 249)							while((_g_min19 < _g_max19)){
HXDLIN( 249)								_g_min19 = (_g_min19 + 1);
HXDLIN( 249)								int py8 = (_g_min19 - 1);
HXDLIN( 249)								Float pcy7 = (( (Float)(py8) ) - dy10);
HXDLIN( 249)								Float dot317 = ((pcx7 * bcx7) + (pcy7 * bcy7));
HXDLIN( 249)								Float dot327 = ((pcx7 * acx7) + (pcy7 * acy7));
HXDLIN( 249)								Float ratioA7 = (((dot227 * dot317) - (dot127 * dot327)) * denom17);
HXDLIN( 249)								Float ratioB7 = (((dot117 * dot327) - (dot127 * dot317)) * denom17);
HXDLIN( 249)								Float ratioC7 = ((((Float)1.0) - ratioB7) - ratioA7);
HXDLIN( 249)								bool hitQuad77;
HXDLIN( 249)								bool hitQuad78;
HXDLIN( 249)								if ((ratioA7 >= 0)) {
HXDLIN( 249)									hitQuad78 = (ratioB7 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad78 = false;
            								}
HXDLIN( 249)								if (hitQuad78) {
HXDLIN( 249)									hitQuad77 = (ratioC7 >= 0);
            								}
            								else {
HXDLIN( 249)									hitQuad77 = false;
            								}
HXDLIN( 249)								if (hitQuad77) {
HXLINE( 712)									min65 = ratioB7;
HXLINE( 249)									int i88 = ::Std_obj::_hx_int(((( (Float)(aA7) ) * soft) * min65));
HXDLIN( 249)									if ((i88 > 255)) {
HXLINE(  24)										i88 = 255;
            									}
HXLINE( 249)									if ((i88 < 0)) {
HXLINE(  25)										i88 = 0;
            									}
HXLINE( 249)									a69 = i88;
HXDLIN( 249)									int i89 = ::Std_obj::_hx_int(( (Float)(rA7) ));
HXDLIN( 249)									if ((i89 > 255)) {
HXLINE(  24)										i89 = 255;
            									}
HXLINE( 249)									if ((i89 < 0)) {
HXLINE(  25)										i89 = 0;
            									}
HXLINE( 747)									r43 = i89;
HXLINE( 249)									int i90 = ::Std_obj::_hx_int(( (Float)(gA7) ));
HXDLIN( 249)									if ((i90 > 255)) {
HXLINE(  24)										i90 = 255;
            									}
HXLINE( 249)									if ((i90 < 0)) {
HXLINE(  25)										i90 = 0;
            									}
HXLINE( 748)									g43 = i90;
HXLINE( 249)									int i91 = ::Std_obj::_hx_int(( (Float)(bA7) ));
HXDLIN( 249)									if ((i91 > 255)) {
HXLINE(  24)										i91 = 255;
            									}
HXLINE( 249)									if ((i91 < 0)) {
HXLINE(  25)										i91 = 0;
            									}
HXLINE( 749)									b78 = i91;
HXLINE( 249)									{
HXDLIN( 249)										int location19;
HXDLIN( 249)										if (this1->useVirtualPos) {
HXDLIN( 249)											location19 = ::Std_obj::_hx_int(((((( (Float)(py8) ) - this1->virtualY) * ( (Float)(this1->width) )) + px8) - this1->virtualX));
            										}
            										else {
HXDLIN( 249)											location19 = ::Std_obj::_hx_int(( (Float)(((py8 * this1->width) + px8)) ));
            										}
HXDLIN( 249)										bool hitQuad79;
HXDLIN( 249)										if (this1->transparent) {
HXDLIN( 249)											hitQuad79 = (a69 < 254);
            										}
            										else {
HXDLIN( 249)											hitQuad79 = false;
            										}
HXDLIN( 249)										if (hitQuad79) {
HXDLIN( 249)											int this307 = ::iterMagic::Iimg_obj::get(this1->image,location19);
HXDLIN( 249)											int old7;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												old7 = ((((((this307 >> 24) & 255) << 24) | ((this307 & 255) << 16)) | (((this307 >> 8) & 255) << 8)) | ((this307 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												old7 = this307;
            											}
HXDLIN( 249)											int rhs7 = ((((a69 << 24) | (r43 << 16)) | (g43 << 8)) | b78);
HXDLIN( 249)											Float a124;
HXDLIN( 249)											int this308 = ((old7 >> 24) & 255);
HXDLIN( 249)											if ((this308 == 0)) {
HXDLIN( 249)												a124 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a124 = (( (Float)(this308) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r121;
HXDLIN( 249)											int this309 = ((old7 >> 16) & 255);
HXDLIN( 249)											if ((this309 == 0)) {
HXDLIN( 249)												r121 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r121 = (( (Float)(this309) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g121;
HXDLIN( 249)											int this310 = ((old7 >> 8) & 255);
HXDLIN( 249)											if ((this310 == 0)) {
HXDLIN( 249)												g121 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g121 = (( (Float)(this310) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b125;
HXDLIN( 249)											int this311 = (old7 & 255);
HXDLIN( 249)											if ((this311 == 0)) {
HXDLIN( 249)												b125 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b125 = (( (Float)(this311) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a222;
HXDLIN( 249)											int this312 = ((rhs7 >> 24) & 255);
HXDLIN( 249)											if ((this312 == 0)) {
HXDLIN( 249)												a222 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												a222 = (( (Float)(this312) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float r220;
HXDLIN( 249)											int this313 = ((rhs7 >> 16) & 255);
HXDLIN( 249)											if ((this313 == 0)) {
HXDLIN( 249)												r220 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												r220 = (( (Float)(this313) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float g220;
HXDLIN( 249)											int this314 = ((rhs7 >> 8) & 255);
HXDLIN( 249)											if ((this314 == 0)) {
HXDLIN( 249)												g220 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												g220 = (( (Float)(this314) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float b223;
HXDLIN( 249)											int this315 = (rhs7 & 255);
HXDLIN( 249)											if ((this315 == 0)) {
HXDLIN( 249)												b223 = ((Float)0.);
            											}
            											else {
HXDLIN( 249)												b223 = (( (Float)(this315) ) / ( (Float)(255) ));
            											}
HXDLIN( 249)											Float a321 = (a124 * (( (Float)(1) ) - a222));
HXDLIN( 249)											int r44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r121 * a321) + (r220 * a222))));
HXDLIN( 249)											int g44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g121 * a321) + (g220 * a222))));
HXDLIN( 249)											int b79 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b125 * a321) + (b223 * a222))));
HXDLIN( 249)											int a70 = ::Std_obj::_hx_int((( (Float)(255) ) * (a321 + a222)));
HXDLIN( 249)											int blended19 = ((((a70 << 24) | (r44 << 16)) | (g44 << 8)) | b79);
HXDLIN( 249)											{
HXDLIN( 249)												int hitQuad80;
HXDLIN( 249)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)													hitQuad80 = ((((((blended19 >> 24) & 255) << 24) | ((blended19 & 255) << 16)) | (((blended19 >> 8) & 255) << 8)) | ((blended19 >> 16) & 255));
            												}
            												else {
HXDLIN( 249)													hitQuad80 = blended19;
            												}
HXDLIN( 249)												::iterMagic::Iimg_obj::set(this1->image,location19,hitQuad80);
            											}
            										}
            										else {
HXDLIN( 249)											int value7;
HXDLIN( 249)											if (this1->isLittle) {
HXDLIN( 249)												value7 = ((((a69 << 24) | (b78 << 16)) | (g43 << 8)) | r43);
            											}
            											else {
HXDLIN( 249)												value7 = ((((a69 << 24) | (r43 << 16)) | (g43 << 8)) | b78);
            											}
HXDLIN( 249)											::iterMagic::Iimg_obj::set(this1->image,location19,value7);
            										}
            									}
HXLINE( 751)									found9 = true;
            								}
            								else {
HXDLIN( 249)									if (found9) {
HXDLIN( 249)										goto _hx_goto_553;
            									}
            								}
            							}
            							_hx_goto_553:;
            						}
            					}
            				}
            			}
HXDLIN( 249)			 ::pi_xy::algo::HitQuad v22 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax8,ay8,bx10,by10,cx10,cy10,dx10,dy10,true);
HXDLIN( 249)			hitQuad = v22;
            		}
HXDLIN( 249)		Float cx11 = h2;
HXDLIN( 249)		Float cy11 = radius2;
HXDLIN( 249)		Float bx11 = h2;
HXDLIN( 249)		Float by11 = -(radius2);
HXDLIN( 249)		Float temp3 = ((Float)0.);
HXLINE( 468)		temp3 = (px + ((bx11 * cos) - (by11 * sin)));
HXLINE( 469)		by11 = (py + ((by11 * cos) + (bx11 * sin)));
HXLINE( 470)		bx11 = temp3;
HXLINE( 471)		temp3 = (px + ((cx11 * cos) - (cy11 * sin)));
HXLINE( 472)		cy11 = (py + ((cy11 * cos) + (cx11 * sin)));
HXLINE( 473)		cx11 = temp3;
HXLINE( 249)		bool hasUndo10 = true;
HXDLIN( 249)		int aA8 = ((color >> 24) & 255);
HXDLIN( 249)		int rA8 = ((color >> 16) & 255);
HXDLIN( 249)		int gA8 = ((color >> 8) & 255);
HXDLIN( 249)		int bA8 = (color & 255);
HXDLIN( 249)		Float bcx8 = (bx11 - cx11);
HXDLIN( 249)		Float bcy8 = (by11 - cy11);
HXDLIN( 249)		Float acx8 = (qx - cx11);
HXDLIN( 249)		Float acy8 = (qy - cy11);
HXDLIN( 249)		Float dot118 = ((bcx8 * bcx8) + (bcy8 * bcy8));
HXDLIN( 249)		Float dot128 = ((bcx8 * acx8) + (bcy8 * acy8));
HXDLIN( 249)		Float dot228 = ((acx8 * acx8) + (acy8 * acy8));
HXDLIN( 249)		Float denom18 = (( (Float)(1) ) / ((dot118 * dot228) - (dot128 * dot128)));
HXDLIN( 249)		 ::pi_xy::iter::IntIterStart xIter310;
HXDLIN( 249)		if ((qx > bx11)) {
HXDLIN( 249)			if ((qx > cx11)) {
HXDLIN( 249)				int min66;
HXDLIN( 249)				if ((bx11 > cx11)) {
HXDLIN( 249)					min66 = ::Math_obj::floor(cx11);
            				}
            				else {
HXDLIN( 249)					min66 = ::Math_obj::floor(bx11);
            				}
HXDLIN( 249)				int ii_min128 = min66;
HXDLIN( 249)				int ii_max128 = ::Math_obj::ceil(qx);
HXDLIN( 249)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min128,ii_max128);
            			}
            			else {
HXDLIN( 249)				int ii_min129 = ::Math_obj::floor(bx11);
HXDLIN( 249)				int ii_max129 = ::Math_obj::ceil(cx11);
HXDLIN( 249)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min129,ii_max129);
            			}
            		}
            		else {
HXDLIN( 249)			if ((bx11 > cx11)) {
HXDLIN( 249)				int min67;
HXDLIN( 249)				if ((qx > cx11)) {
HXDLIN( 249)					min67 = ::Math_obj::floor(cx11);
            				}
            				else {
HXDLIN( 249)					min67 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 249)				int ii_min130 = min67;
HXDLIN( 249)				int ii_max130 = ::Math_obj::ceil(bx11);
HXDLIN( 249)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min130,ii_max130);
            			}
            			else {
HXDLIN( 249)				int ii_min131 = ::Math_obj::floor(qx);
HXDLIN( 249)				int ii_max131 = ::Math_obj::ceil(cx11);
HXDLIN( 249)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min131,ii_max131);
            			}
            		}
HXDLIN( 249)		 ::pi_xy::iter::IntIterStart yIter310;
HXDLIN( 249)		if ((qy > by11)) {
HXDLIN( 249)			if ((qy > cy11)) {
HXDLIN( 249)				int min68;
HXDLIN( 249)				if ((by11 > cy11)) {
HXDLIN( 249)					min68 = ::Math_obj::floor(cy11);
            				}
            				else {
HXDLIN( 249)					min68 = ::Math_obj::floor(by11);
            				}
HXDLIN( 249)				int ii_min132 = min68;
HXDLIN( 249)				int ii_max132 = ::Math_obj::ceil(qy);
HXDLIN( 249)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min132,ii_max132);
            			}
            			else {
HXDLIN( 249)				int ii_min133 = ::Math_obj::floor(by11);
HXDLIN( 249)				int ii_max133 = ::Math_obj::ceil(cy11);
HXDLIN( 249)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min133,ii_max133);
            			}
            		}
            		else {
HXDLIN( 249)			if ((by11 > cy11)) {
HXDLIN( 249)				int min69;
HXDLIN( 249)				if ((qy > cy11)) {
HXDLIN( 249)					min69 = ::Math_obj::floor(cy11);
            				}
            				else {
HXDLIN( 249)					min69 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 249)				int ii_min134 = min69;
HXDLIN( 249)				int ii_max134 = ::Math_obj::ceil(by11);
HXDLIN( 249)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min134,ii_max134);
            			}
            			else {
HXDLIN( 249)				int ii_min135 = ::Math_obj::floor(qy);
HXDLIN( 249)				int ii_max135 = ::Math_obj::ceil(cy11);
HXDLIN( 249)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min135,ii_max135);
            			}
            		}
HXDLIN( 249)		 ::pi_xy::ImageStruct undoImage30 = null();
HXDLIN( 249)		if (hasUndo10) {
HXDLIN( 249)			int width10 = ((xIter310->max - xIter310->start) + 1);
HXDLIN( 249)			int height10 = ((yIter310->max - yIter310->start) + 1);
HXDLIN( 249)			 ::Dynamic imageType10 = null();
HXDLIN( 249)			 ::pi_xy::ImageStruct this316 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 249)			if (::hx::IsNull( imageType10 )) {
HXLINE(  54)				imageType10 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 249)			::Dynamic undoImage31;
HXDLIN( 249)			switch((int)(( (int)(imageType10) ))){
            				case (int)0: {
HXDLIN( 249)					 ::iterMagic::BytesImg byt10 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 249)					 ::iterMagic::BytesImg b80 = byt10;
HXDLIN( 249)					{
HXDLIN( 249)						b80->width = width10;
HXDLIN( 249)						b80->height = height10;
HXDLIN( 249)						b80->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 249)						b80->data = ::haxe::io::Bytes_obj::alloc((b80->length * 4));
HXDLIN( 249)						{
HXDLIN( 249)							int len20 = b80->length;
HXDLIN( 249)							int w10 = 0;
HXDLIN( 249)							{
HXDLIN( 249)								int _g200 = 0;
HXDLIN( 249)								int _g201 = b80->height;
HXDLIN( 249)								while((_g200 < _g201)){
HXDLIN( 249)									_g200 = (_g200 + 1);
HXDLIN( 249)									int y32 = (_g200 - 1);
HXDLIN( 249)									{
HXDLIN( 249)										int _g202 = 0;
HXDLIN( 249)										int _g203 = b80->width;
HXDLIN( 249)										while((_g202 < _g203)){
HXDLIN( 249)											_g202 = (_g202 + 1);
HXDLIN( 249)											int x32 = (_g202 - 1);
HXDLIN( 249)											{
HXDLIN( 249)												w10 = (w10 + 1);
HXDLIN( 249)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 249)											{
HXDLIN( 249)												w10 = (w10 + 1);
HXDLIN( 249)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 249)											{
HXDLIN( 249)												w10 = (w10 + 1);
HXDLIN( 249)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 249)											{
HXDLIN( 249)												w10 = (w10 + 1);
HXDLIN( 249)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 249)					undoImage31 = b80;
            				}
            				break;
            				case (int)1: {
HXDLIN( 249)					 ::iterMagic::ArrIntImg arrI10 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)					 ::iterMagic::ArrIntImg a71 = arrI10;
HXDLIN( 249)					{
HXDLIN( 249)						a71->width = width10;
HXDLIN( 249)						a71->height = height10;
HXDLIN( 249)						a71->data = ::Array_obj< int >::__new(0);
HXDLIN( 249)						a71->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 249)						{
HXDLIN( 249)							int _g204 = 0;
HXDLIN( 249)							int _g205 = a71->length;
HXDLIN( 249)							while((_g204 < _g205)){
HXDLIN( 249)								_g204 = (_g204 + 1);
HXDLIN( 249)								int i92 = (_g204 - 1);
HXDLIN( 249)								a71->data[i92] = 0;
            							}
            						}
            					}
HXDLIN( 249)					undoImage31 = a71;
            				}
            				break;
            				case (int)2: {
HXDLIN( 249)					 ::iterMagic::U32ArrImg u32a10 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 249)					 ::iterMagic::U32ArrImg b81 = u32a10;
HXDLIN( 249)					{
HXDLIN( 249)						b81->width = width10;
HXDLIN( 249)						b81->height = height10;
HXDLIN( 249)						b81->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 249)						int size10 = (b81->length * 4);
HXDLIN( 249)						b81->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size10),0,size10);
HXDLIN( 249)						{
HXDLIN( 249)							int _g206 = 0;
HXDLIN( 249)							int _g207 = b81->length;
HXDLIN( 249)							while((_g206 < _g207)){
HXDLIN( 249)								_g206 = (_g206 + 1);
HXDLIN( 249)								int i93 = (_g206 - 1);
HXDLIN( 249)								{
HXDLIN( 249)									 ::haxe::io::ArrayBufferViewImpl this317 = b81->data;
HXDLIN( 249)									bool undoImage32;
HXDLIN( 249)									if ((i93 >= 0)) {
HXDLIN( 249)										undoImage32 = (i93 < (this317->byteLength >> 2));
            									}
            									else {
HXDLIN( 249)										undoImage32 = false;
            									}
HXDLIN( 249)									if (undoImage32) {
HXDLIN( 249)										 ::haxe::io::Bytes _this10 = this317->bytes;
HXDLIN( 249)										int pos10 = ((i93 << 2) + this317->byteOffset);
HXDLIN( 249)										_this10->b[pos10] = ( (unsigned char)(0) );
HXDLIN( 249)										_this10->b[(pos10 + 1)] = ( (unsigned char)(0) );
HXDLIN( 249)										_this10->b[(pos10 + 2)] = ( (unsigned char)(0) );
HXDLIN( 249)										_this10->b[(pos10 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 249)					undoImage31 = b81;
            				}
            				break;
            				case (int)3: {
HXDLIN( 249)					 ::iterMagic::VecIntImg vec10 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)					 ::iterMagic::VecIntImg v23 = vec10;
HXDLIN( 249)					{
HXDLIN( 249)						v23->width = width10;
HXDLIN( 249)						v23->height = height10;
HXDLIN( 249)						v23->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 249)						v23->data = ::Array_obj< int >::__new(v23->length);
HXDLIN( 249)						{
HXDLIN( 249)							int _g208 = 0;
HXDLIN( 249)							int _g209 = v23->length;
HXDLIN( 249)							while((_g208 < _g209)){
HXDLIN( 249)								_g208 = (_g208 + 1);
HXDLIN( 249)								int i94 = (_g208 - 1);
HXDLIN( 249)								v23->data->__unsafe_set(i94,0);
            							}
            						}
            					}
HXDLIN( 249)					undoImage31 = v23;
            				}
            				break;
            				case (int)4: {
HXDLIN( 249)					 ::iterMagic::StackIntImg sInt10 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 249)					 ::iterMagic::StackIntImg b82 = sInt10;
HXDLIN( 249)					{
HXDLIN( 249)						b82->width = width10;
HXDLIN( 249)						b82->height = height10;
HXDLIN( 249)						b82->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 249)						b82->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 249)						{
HXDLIN( 249)							int len21 = b82->length;
HXDLIN( 249)							 ::haxe::ds::GenericStack_Int d10 = b82->data;
HXDLIN( 249)							if (::hx::IsNull( d10->head )) {
HXDLIN( 249)								int _g210 = 0;
HXDLIN( 249)								int _g211 = len21;
HXDLIN( 249)								while((_g210 < _g211)){
HXDLIN( 249)									_g210 = (_g210 + 1);
HXDLIN( 249)									int i95 = (_g210 - 1);
HXDLIN( 249)									d10->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d10->head);
            								}
            							}
            							else {
HXDLIN( 249)								int _g212 = 0;
HXDLIN( 249)								int _g213 = len21;
HXDLIN( 249)								while((_g212 < _g213)){
HXDLIN( 249)									_g212 = (_g212 + 1);
HXDLIN( 249)									int i96 = (_g212 - 1);
HXDLIN( 249)									{
HXDLIN( 249)										 ::haxe::ds::GenericCell_Int l10 = b82->data->head;
HXDLIN( 249)										 ::haxe::ds::GenericCell_Int prev10 = null();
HXDLIN( 249)										{
HXDLIN( 249)											int _g214 = 0;
HXDLIN( 249)											int _g215 = i96;
HXDLIN( 249)											while((_g214 < _g215)){
HXDLIN( 249)												_g214 = (_g214 + 1);
HXDLIN( 249)												int i97 = (_g214 - 1);
HXLINE( 345)												prev10 = l10;
HXLINE( 346)												l10 = l10->next;
            											}
            										}
HXLINE( 249)										if (::hx::IsNull( prev10 )) {
HXDLIN( 249)											b82->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l10->next);
HXDLIN( 249)											l10 = null();
            										}
            										else {
HXDLIN( 249)											prev10->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l10->next);
HXDLIN( 249)											l10 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 249)					undoImage31 = b82;
            				}
            				break;
            			}
HXDLIN( 249)			this316->image = undoImage31;
HXDLIN( 249)			this316->width = width10;
HXDLIN( 249)			this316->height = height10;
HXDLIN( 249)			this316->imageType = ( (int)(imageType10) );
HXDLIN( 249)			undoImage30 = this316;
HXDLIN( 249)			{
HXDLIN( 249)				int rectLeft10 = xIter310->start;
HXDLIN( 249)				int rectTop10 = yIter310->start;
HXDLIN( 249)				int rectRight10 = xIter310->max;
HXDLIN( 249)				bool forceClear10 = false;
HXDLIN( 249)				{
HXDLIN( 249)					int _g216 = rectTop10;
HXDLIN( 249)					int _g217 = yIter310->max;
HXDLIN( 249)					while((_g216 < _g217)){
HXDLIN( 249)						_g216 = (_g216 + 1);
HXDLIN( 249)						int dy13 = (_g216 - 1);
HXDLIN( 249)						{
HXDLIN( 249)							int _g218 = rectLeft10;
HXDLIN( 249)							int _g219 = rectRight10;
HXDLIN( 249)							while((_g218 < _g219)){
HXDLIN( 249)								_g218 = (_g218 + 1);
HXDLIN( 249)								int dx13 = (_g218 - 1);
HXDLIN( 249)								::Dynamic this318 = this1->image;
HXDLIN( 249)								int index42;
HXDLIN( 249)								if (this1->useVirtualPos) {
HXDLIN( 249)									index42 = ::Std_obj::_hx_int(((((( (Float)(dy13) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx13) - this1->virtualX));
            								}
            								else {
HXDLIN( 249)									index42 = ::Std_obj::_hx_int(( (Float)(((dy13 * this1->width) + dx13)) ));
            								}
HXDLIN( 249)								int c44 = ::iterMagic::Iimg_obj::get(this318,index42);
HXDLIN( 249)								int col10;
HXDLIN( 249)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)									col10 = ((((((c44 >> 24) & 255) << 24) | ((c44 & 255) << 16)) | (((c44 >> 8) & 255) << 8)) | ((c44 >> 16) & 255));
            								}
            								else {
HXDLIN( 249)									col10 = c44;
            								}
HXDLIN( 249)								bool _hx_tmp;
HXDLIN( 249)								if (this1->useMask) {
HXDLIN( 249)									_hx_tmp = ::hx::IsNotNull( this1->mask );
            								}
            								else {
HXDLIN( 249)									_hx_tmp = false;
            								}
HXDLIN( 249)								if (_hx_tmp) {
HXDLIN( 249)									 ::pi_xy::ImageStruct this319 = this1->mask;
HXDLIN( 249)									::Dynamic this320 = this319->image;
HXDLIN( 249)									int index43;
HXDLIN( 249)									if (this319->useVirtualPos) {
HXDLIN( 249)										index43 = ::Std_obj::_hx_int(((((( (Float)(dy13) ) - this319->virtualY) * ( (Float)(this319->width) )) + dx13) - this319->virtualX));
            									}
            									else {
HXDLIN( 249)										index43 = ::Std_obj::_hx_int(( (Float)(((dy13 * this319->width) + dx13)) ));
            									}
HXDLIN( 249)									int c45 = ::iterMagic::Iimg_obj::get(this320,index43);
HXDLIN( 249)									int v24;
HXDLIN( 249)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)										v24 = ((((((c45 >> 24) & 255) << 24) | ((c45 & 255) << 16)) | (((c45 >> 8) & 255) << 8)) | ((c45 >> 16) & 255));
            									}
            									else {
HXDLIN( 249)										v24 = c45;
            									}
HXDLIN( 249)									int maskPixel10 = v24;
HXDLIN( 249)									int this321 = col10;
HXDLIN( 249)									if ((maskPixel10 == 0)) {
HXDLIN( 249)										col10 = this321;
            									}
            									else {
HXDLIN( 249)										Float m010;
HXDLIN( 249)										int this322 = ((maskPixel10 >> 24) & 255);
HXDLIN( 249)										if ((this322 == 0)) {
HXDLIN( 249)											m010 = ((Float)0.);
            										}
            										else {
HXDLIN( 249)											m010 = (( (Float)(this322) ) / ( (Float)(255) ));
            										}
HXDLIN( 249)										Float m110;
HXDLIN( 249)										int this323 = ((maskPixel10 >> 16) & 255);
HXDLIN( 249)										if ((this323 == 0)) {
HXDLIN( 249)											m110 = ((Float)0.);
            										}
            										else {
HXDLIN( 249)											m110 = (( (Float)(this323) ) / ( (Float)(255) ));
            										}
HXDLIN( 249)										Float m210;
HXDLIN( 249)										int this324 = ((maskPixel10 >> 8) & 255);
HXDLIN( 249)										if ((this324 == 0)) {
HXDLIN( 249)											m210 = ((Float)0.);
            										}
            										else {
HXDLIN( 249)											m210 = (( (Float)(this324) ) / ( (Float)(255) ));
            										}
HXDLIN( 249)										Float m310;
HXDLIN( 249)										int this325 = (maskPixel10 & 255);
HXDLIN( 249)										if ((this325 == 0)) {
HXDLIN( 249)											m310 = ((Float)0.);
            										}
            										else {
HXDLIN( 249)											m310 = (( (Float)(this325) ) / ( (Float)(255) ));
            										}
HXDLIN( 249)										int ch010 = ::Std_obj::_hx_int(((((Float)1.) - m010) * ( (Float)(((this321 >> 24) & 255)) )));
HXDLIN( 249)										int ch110 = ::Std_obj::_hx_int(((((Float)1.) - m110) * ( (Float)(((this321 >> 16) & 255)) )));
HXDLIN( 249)										int ch210 = ::Std_obj::_hx_int(((((Float)1.) - m210) * ( (Float)(((this321 >> 8) & 255)) )));
HXDLIN( 249)										int ch310 = ::Std_obj::_hx_int(((((Float)1.) - m310) * ( (Float)((this321 & 255)) )));
HXDLIN( 249)										col10 = ((((::Math_obj::round((( (Float)(ch010) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch110) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch210) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch310) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 249)								if ((col10 != 0)) {
HXDLIN( 249)									int x33 = (dx13 - rectLeft10);
HXDLIN( 249)									int y33 = (dy13 - rectTop10);
HXDLIN( 249)									int c46 = col10;
HXDLIN( 249)									bool _hx_tmp1;
HXDLIN( 249)									if ((((c46 >> 24) & 255) < 254)) {
HXDLIN( 249)										_hx_tmp1 = undoImage30->transparent;
            									}
            									else {
HXDLIN( 249)										_hx_tmp1 = false;
            									}
HXDLIN( 249)									if (_hx_tmp1) {
HXDLIN( 249)										int location20;
HXDLIN( 249)										if (undoImage30->useVirtualPos) {
HXDLIN( 249)											location20 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x33) - undoImage30->virtualX));
            										}
            										else {
HXDLIN( 249)											location20 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage30->width) + x33)) ));
            										}
HXDLIN( 249)										int this326 = ::iterMagic::Iimg_obj::get(undoImage30->image,location20);
HXDLIN( 249)										int this327;
HXDLIN( 249)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)											this327 = ((((((this326 >> 24) & 255) << 24) | ((this326 & 255) << 16)) | (((this326 >> 8) & 255) << 8)) | ((this326 >> 16) & 255));
            										}
            										else {
HXDLIN( 249)											this327 = this326;
            										}
HXDLIN( 249)										Float a125;
HXDLIN( 249)										int this328 = ((this327 >> 24) & 255);
HXDLIN( 249)										if ((this328 == 0)) {
HXDLIN( 249)											a125 = ((Float)0.);
            										}
            										else {
HXDLIN( 249)											a125 = (( (Float)(this328) ) / ( (Float)(255) ));
            										}
HXDLIN( 249)										Float r122;
HXDLIN( 249)										int this329 = ((this327 >> 16) & 255);
HXDLIN( 249)										if ((this329 == 0)) {
HXDLIN( 249)											r122 = ((Float)0.);
            										}
            										else {
HXDLIN( 249)											r122 = (( (Float)(this329) ) / ( (Float)(255) ));
            										}
HXDLIN( 249)										Float g122;
HXDLIN( 249)										int this330 = ((this327 >> 8) & 255);
HXDLIN( 249)										if ((this330 == 0)) {
HXDLIN( 249)											g122 = ((Float)0.);
            										}
            										else {
HXDLIN( 249)											g122 = (( (Float)(this330) ) / ( (Float)(255) ));
            										}
HXDLIN( 249)										Float b126;
HXDLIN( 249)										int this331 = (this327 & 255);
HXDLIN( 249)										if ((this331 == 0)) {
HXDLIN( 249)											b126 = ((Float)0.);
            										}
            										else {
HXDLIN( 249)											b126 = (( (Float)(this331) ) / ( (Float)(255) ));
            										}
HXDLIN( 249)										Float a223;
HXDLIN( 249)										int this332 = ((col10 >> 24) & 255);
HXDLIN( 249)										if ((this332 == 0)) {
HXDLIN( 249)											a223 = ((Float)0.);
            										}
            										else {
HXDLIN( 249)											a223 = (( (Float)(this332) ) / ( (Float)(255) ));
            										}
HXDLIN( 249)										Float r221;
HXDLIN( 249)										int this333 = ((col10 >> 16) & 255);
HXDLIN( 249)										if ((this333 == 0)) {
HXDLIN( 249)											r221 = ((Float)0.);
            										}
            										else {
HXDLIN( 249)											r221 = (( (Float)(this333) ) / ( (Float)(255) ));
            										}
HXDLIN( 249)										Float g221;
HXDLIN( 249)										int this334 = ((col10 >> 8) & 255);
HXDLIN( 249)										if ((this334 == 0)) {
HXDLIN( 249)											g221 = ((Float)0.);
            										}
            										else {
HXDLIN( 249)											g221 = (( (Float)(this334) ) / ( (Float)(255) ));
            										}
HXDLIN( 249)										Float b224;
HXDLIN( 249)										int this335 = (col10 & 255);
HXDLIN( 249)										if ((this335 == 0)) {
HXDLIN( 249)											b224 = ((Float)0.);
            										}
            										else {
HXDLIN( 249)											b224 = (( (Float)(this335) ) / ( (Float)(255) ));
            										}
HXDLIN( 249)										Float a322 = (a125 * (( (Float)(1) ) - a223));
HXDLIN( 249)										int r45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r122 * a322) + (r221 * a223))));
HXDLIN( 249)										int g45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g122 * a322) + (g221 * a223))));
HXDLIN( 249)										int b83 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b126 * a322) + (b224 * a223))));
HXDLIN( 249)										int a72 = ::Std_obj::_hx_int((( (Float)(255) ) * (a322 + a223)));
HXDLIN( 249)										int blended20 = ((((a72 << 24) | (r45 << 16)) | (g45 << 8)) | b83);
HXDLIN( 249)										{
HXDLIN( 249)											int _hx_tmp2;
HXDLIN( 249)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)												_hx_tmp2 = ((((((blended20 >> 24) & 255) << 24) | ((blended20 & 255) << 16)) | (((blended20 >> 8) & 255) << 8)) | ((blended20 >> 16) & 255));
            											}
            											else {
HXDLIN( 249)												_hx_tmp2 = blended20;
            											}
HXDLIN( 249)											::iterMagic::Iimg_obj::set(undoImage30->image,location20,_hx_tmp2);
            										}
            									}
            									else {
HXDLIN( 249)										::Dynamic this336 = undoImage30->image;
HXDLIN( 249)										int index44;
HXDLIN( 249)										if (undoImage30->useVirtualPos) {
HXDLIN( 249)											index44 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x33) - undoImage30->virtualX));
            										}
            										else {
HXDLIN( 249)											index44 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage30->width) + x33)) ));
            										}
HXDLIN( 249)										int _hx_tmp3;
HXDLIN( 249)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)											_hx_tmp3 = ((((((c46 >> 24) & 255) << 24) | ((c46 & 255) << 16)) | (((c46 >> 8) & 255) << 8)) | ((c46 >> 16) & 255));
            										}
            										else {
HXDLIN( 249)											_hx_tmp3 = c46;
            										}
HXDLIN( 249)										::iterMagic::Iimg_obj::set(this336,index44,_hx_tmp3);
            									}
            								}
            								else {
HXDLIN( 249)									if (forceClear10) {
HXDLIN( 249)										::Dynamic this337 = undoImage30->image;
HXDLIN( 249)										int x34 = (dx13 - rectLeft10);
HXDLIN( 249)										int y34 = (dy13 - rectTop10);
HXDLIN( 249)										int index45;
HXDLIN( 249)										if (undoImage30->useVirtualPos) {
HXDLIN( 249)											index45 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x34) - undoImage30->virtualX));
            										}
            										else {
HXDLIN( 249)											index45 = ::Std_obj::_hx_int(( (Float)(((y34 * undoImage30->width) + x34)) ));
            										}
HXDLIN( 249)										::iterMagic::Iimg_obj::set(this337,index45,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 249)		bool found10 = false;
HXDLIN( 249)		Float min70 = ( (Float)(0) );
HXDLIN( 249)		Float max2 = ( (Float)(0) );
HXDLIN( 249)		int a73 = 0;
HXDLIN( 249)		int r46 = 0;
HXDLIN( 249)		int g46 = 0;
HXDLIN( 249)		int b84 = 0;
HXDLIN( 249)		{
HXDLIN( 249)			int _g_min20 = xIter310->start;
HXDLIN( 249)			int _g_max20 = xIter310->max;
HXDLIN( 249)			while((_g_min20 < _g_max20)){
HXDLIN( 249)				_g_min20 = (_g_min20 + 1);
HXDLIN( 249)				int px9 = (_g_min20 - 1);
HXDLIN( 249)				Float pcx8 = (( (Float)(px9) ) - cx11);
HXLINE( 695)				found10 = false;
HXLINE( 249)				{
HXDLIN( 249)					int _g_min21 = yIter310->start;
HXDLIN( 249)					int _g_max21 = yIter310->max;
HXDLIN( 249)					while((_g_min21 < _g_max21)){
HXDLIN( 249)						_g_min21 = (_g_min21 + 1);
HXDLIN( 249)						int py9 = (_g_min21 - 1);
HXDLIN( 249)						Float pcy8 = (( (Float)(py9) ) - cy11);
HXDLIN( 249)						Float dot318 = ((pcx8 * bcx8) + (pcy8 * bcy8));
HXDLIN( 249)						Float dot328 = ((pcx8 * acx8) + (pcy8 * acy8));
HXDLIN( 249)						Float ratioA8 = (((dot228 * dot318) - (dot128 * dot328)) * denom18);
HXDLIN( 249)						Float ratioB8 = (((dot118 * dot328) - (dot128 * dot318)) * denom18);
HXDLIN( 249)						Float ratioC8 = ((((Float)1.0) - ratioB8) - ratioA8);
HXDLIN( 249)						bool _hx_tmp4;
HXDLIN( 249)						bool _hx_tmp5;
HXDLIN( 249)						if ((ratioA8 >= 0)) {
HXDLIN( 249)							_hx_tmp5 = (ratioB8 >= 0);
            						}
            						else {
HXDLIN( 249)							_hx_tmp5 = false;
            						}
HXDLIN( 249)						if (_hx_tmp5) {
HXDLIN( 249)							_hx_tmp4 = (ratioC8 >= 0);
            						}
            						else {
HXDLIN( 249)							_hx_tmp4 = false;
            						}
HXDLIN( 249)						if (_hx_tmp4) {
HXDLIN( 249)							Float min71;
HXDLIN( 249)							if ((ratioA8 < ratioB8)) {
HXDLIN( 249)								min71 = ratioA8;
            							}
            							else {
HXDLIN( 249)								min71 = ratioB8;
            							}
HXDLIN( 249)							if (!((min71 < ratioC8))) {
HXDLIN( 249)								min71 = ratioC8;
            							}
HXDLIN( 249)							Float max3;
HXDLIN( 249)							if ((ratioA8 > ratioB8)) {
HXDLIN( 249)								max3 = ratioA8;
            							}
            							else {
HXDLIN( 249)								max3 = ratioB8;
            							}
HXDLIN( 249)							if (!((max3 > ratioC8))) {
HXDLIN( 249)								max3 = ratioC8;
            							}
HXLINE( 743)							max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE( 249)							Float min72;
HXDLIN( 249)							if ((min71 < max3)) {
HXDLIN( 249)								min72 = min71;
            							}
            							else {
HXDLIN( 249)								min72 = ((max3 + min71) / ( (Float)(2) ));
            							}
HXDLIN( 249)							int i98 = ::Std_obj::_hx_int(((( (Float)(aA8) ) * soft) * min72));
HXDLIN( 249)							if ((i98 > 255)) {
HXLINE(  24)								i98 = 255;
            							}
HXLINE( 249)							if ((i98 < 0)) {
HXLINE(  25)								i98 = 0;
            							}
HXLINE( 249)							a73 = i98;
HXDLIN( 249)							int i99 = ::Std_obj::_hx_int(( (Float)(rA8) ));
HXDLIN( 249)							if ((i99 > 255)) {
HXLINE(  24)								i99 = 255;
            							}
HXLINE( 249)							if ((i99 < 0)) {
HXLINE(  25)								i99 = 0;
            							}
HXLINE( 747)							r46 = i99;
HXLINE( 249)							int i100 = ::Std_obj::_hx_int(( (Float)(gA8) ));
HXDLIN( 249)							if ((i100 > 255)) {
HXLINE(  24)								i100 = 255;
            							}
HXLINE( 249)							if ((i100 < 0)) {
HXLINE(  25)								i100 = 0;
            							}
HXLINE( 748)							g46 = i100;
HXLINE( 249)							int i101 = ::Std_obj::_hx_int(( (Float)(bA8) ));
HXDLIN( 249)							if ((i101 > 255)) {
HXLINE(  24)								i101 = 255;
            							}
HXLINE( 249)							if ((i101 < 0)) {
HXLINE(  25)								i101 = 0;
            							}
HXLINE( 749)							b84 = i101;
HXLINE( 249)							{
HXDLIN( 249)								int location21;
HXDLIN( 249)								if (this1->useVirtualPos) {
HXDLIN( 249)									location21 = ::Std_obj::_hx_int(((((( (Float)(py9) ) - this1->virtualY) * ( (Float)(this1->width) )) + px9) - this1->virtualX));
            								}
            								else {
HXDLIN( 249)									location21 = ::Std_obj::_hx_int(( (Float)(((py9 * this1->width) + px9)) ));
            								}
HXDLIN( 249)								bool _hx_tmp6;
HXDLIN( 249)								if (this1->transparent) {
HXDLIN( 249)									_hx_tmp6 = (a73 < 254);
            								}
            								else {
HXDLIN( 249)									_hx_tmp6 = false;
            								}
HXDLIN( 249)								if (_hx_tmp6) {
HXDLIN( 249)									int this338 = ::iterMagic::Iimg_obj::get(this1->image,location21);
HXDLIN( 249)									int old8;
HXDLIN( 249)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)										old8 = ((((((this338 >> 24) & 255) << 24) | ((this338 & 255) << 16)) | (((this338 >> 8) & 255) << 8)) | ((this338 >> 16) & 255));
            									}
            									else {
HXDLIN( 249)										old8 = this338;
            									}
HXDLIN( 249)									int rhs8 = ((((a73 << 24) | (r46 << 16)) | (g46 << 8)) | b84);
HXDLIN( 249)									Float a126;
HXDLIN( 249)									int this339 = ((old8 >> 24) & 255);
HXDLIN( 249)									if ((this339 == 0)) {
HXDLIN( 249)										a126 = ((Float)0.);
            									}
            									else {
HXDLIN( 249)										a126 = (( (Float)(this339) ) / ( (Float)(255) ));
            									}
HXDLIN( 249)									Float r123;
HXDLIN( 249)									int this340 = ((old8 >> 16) & 255);
HXDLIN( 249)									if ((this340 == 0)) {
HXDLIN( 249)										r123 = ((Float)0.);
            									}
            									else {
HXDLIN( 249)										r123 = (( (Float)(this340) ) / ( (Float)(255) ));
            									}
HXDLIN( 249)									Float g123;
HXDLIN( 249)									int this341 = ((old8 >> 8) & 255);
HXDLIN( 249)									if ((this341 == 0)) {
HXDLIN( 249)										g123 = ((Float)0.);
            									}
            									else {
HXDLIN( 249)										g123 = (( (Float)(this341) ) / ( (Float)(255) ));
            									}
HXDLIN( 249)									Float b127;
HXDLIN( 249)									int this342 = (old8 & 255);
HXDLIN( 249)									if ((this342 == 0)) {
HXDLIN( 249)										b127 = ((Float)0.);
            									}
            									else {
HXDLIN( 249)										b127 = (( (Float)(this342) ) / ( (Float)(255) ));
            									}
HXDLIN( 249)									Float a224;
HXDLIN( 249)									int this343 = ((rhs8 >> 24) & 255);
HXDLIN( 249)									if ((this343 == 0)) {
HXDLIN( 249)										a224 = ((Float)0.);
            									}
            									else {
HXDLIN( 249)										a224 = (( (Float)(this343) ) / ( (Float)(255) ));
            									}
HXDLIN( 249)									Float r222;
HXDLIN( 249)									int this344 = ((rhs8 >> 16) & 255);
HXDLIN( 249)									if ((this344 == 0)) {
HXDLIN( 249)										r222 = ((Float)0.);
            									}
            									else {
HXDLIN( 249)										r222 = (( (Float)(this344) ) / ( (Float)(255) ));
            									}
HXDLIN( 249)									Float g222;
HXDLIN( 249)									int this345 = ((rhs8 >> 8) & 255);
HXDLIN( 249)									if ((this345 == 0)) {
HXDLIN( 249)										g222 = ((Float)0.);
            									}
            									else {
HXDLIN( 249)										g222 = (( (Float)(this345) ) / ( (Float)(255) ));
            									}
HXDLIN( 249)									Float b225;
HXDLIN( 249)									int this346 = (rhs8 & 255);
HXDLIN( 249)									if ((this346 == 0)) {
HXDLIN( 249)										b225 = ((Float)0.);
            									}
            									else {
HXDLIN( 249)										b225 = (( (Float)(this346) ) / ( (Float)(255) ));
            									}
HXDLIN( 249)									Float a323 = (a126 * (( (Float)(1) ) - a224));
HXDLIN( 249)									int r47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r123 * a323) + (r222 * a224))));
HXDLIN( 249)									int g47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g123 * a323) + (g222 * a224))));
HXDLIN( 249)									int b85 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b127 * a323) + (b225 * a224))));
HXDLIN( 249)									int a74 = ::Std_obj::_hx_int((( (Float)(255) ) * (a323 + a224)));
HXDLIN( 249)									int blended21 = ((((a74 << 24) | (r47 << 16)) | (g47 << 8)) | b85);
HXDLIN( 249)									{
HXDLIN( 249)										int _hx_tmp7;
HXDLIN( 249)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 249)											_hx_tmp7 = ((((((blended21 >> 24) & 255) << 24) | ((blended21 & 255) << 16)) | (((blended21 >> 8) & 255) << 8)) | ((blended21 >> 16) & 255));
            										}
            										else {
HXDLIN( 249)											_hx_tmp7 = blended21;
            										}
HXDLIN( 249)										::iterMagic::Iimg_obj::set(this1->image,location21,_hx_tmp7);
            									}
            								}
            								else {
HXDLIN( 249)									int value8;
HXDLIN( 249)									if (this1->isLittle) {
HXDLIN( 249)										value8 = ((((a73 << 24) | (b84 << 16)) | (g46 << 8)) | r46);
            									}
            									else {
HXDLIN( 249)										value8 = ((((a73 << 24) | (r46 << 16)) | (g46 << 8)) | b84);
            									}
HXDLIN( 249)									::iterMagic::Iimg_obj::set(this1->image,location21,value8);
            								}
            							}
HXLINE( 751)							found10 = true;
            						}
            						else {
HXDLIN( 249)							if (found10) {
HXDLIN( 249)								goto _hx_goto_565;
            							}
            						}
            					}
            					_hx_goto_565:;
            				}
            			}
            		}
HXDLIN( 249)		 ::pi_xy::algo::HitTri hitTri;
HXDLIN( 249)		if ((hasHit == false)) {
HXDLIN( 249)			 ::pi_xy::algo::HitTri v25 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx11,by11,cx11,cy11,true);
HXDLIN( 249)			if (hasUndo10) {
HXDLIN( 249)				v25->undoImage = undoImage30;
HXDLIN( 249)				v25->undoX = xIter310->start;
HXDLIN( 249)				v25->undoY = yIter310->start;
            			}
HXDLIN( 249)			hitTri = v25;
            		}
            		else {
HXDLIN( 249)			hitTri = null();
            		}
HXDLIN( 249)		if (hasHit) {
HXDLIN( 249)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(1)->init(0,hitTri));
HXDLIN( 249)			if (::hx::IsNotNull( hitQuad )) {
HXDLIN( 249)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXDLIN( 249)			hitArr->triArr->push(hitQuad->triBCD);
HXDLIN( 249)			return hitArr;
            		}
            		else {
HXDLIN( 249)			return null();
            		}
HXDLIN( 249)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC13(SoftShape_Impl__obj,fixArrow,return )

 ::pi_xy::algo::HitTriArray SoftShape_Impl__obj::fixArrowBoth( ::pi_xy::ImageStruct this1,Float px,Float py,Float qx,Float qy,Float arrowWidth,Float arrowHeight,Float thick,int color,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_hasHit){
            		Float soft = __o_soft.Default(((Float)40.));
            		bool hasHit = __o_hasHit.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_268_fixArrowBoth)
HXDLIN( 268)		Float goldenRatio = ((Float)1.61803398875);
HXDLIN( 268)		Float o = (qy - py);
HXDLIN( 268)		Float a = (qx - px);
HXDLIN( 268)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN( 268)		Float theta = ::Math_obj::atan2(o,a);
HXDLIN( 268)		Float thicker;
HXDLIN( 268)		if ((arrowWidth > (thick * ((Float)1.1)))) {
HXDLIN( 268)			thicker = arrowWidth;
            		}
            		else {
HXDLIN( 268)			thicker = ((( (Float)(2) ) * thick) * goldenRatio);
            		}
HXDLIN( 268)		Float sin = ::Math_obj::sin(theta);
HXDLIN( 268)		Float cos = ::Math_obj::cos(theta);
HXDLIN( 268)		Float radius = (thick / ( (Float)(2) ));
HXDLIN( 268)		Float radius2 = (thicker / ( (Float)(2) ));
HXDLIN( 268)		Float h2;
HXDLIN( 268)		if ((arrowHeight < (h * ((Float)1.1)))) {
HXDLIN( 268)			h2 = (h - arrowHeight);
            		}
            		else {
HXDLIN( 268)			h2 = (h / goldenRatio);
            		}
HXDLIN( 268)		Float hSmall = (h - h2);
HXDLIN( 268)		Float px_ = hSmall;
HXDLIN( 268)		Float py_ = ((Float)0.);
HXDLIN( 268)		Float temp = ((Float)0.);
HXLINE( 654)		temp = (px + ((px_ * cos) - (py_ * sin)));
HXLINE( 655)		py_ = (py + ((py_ * cos) + (px_ * sin)));
HXLINE( 656)		px_ = temp;
HXLINE( 268)		Float h1 = (h2 - hSmall);
HXDLIN( 268)		Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 268)		Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 268)		Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 268)		Float dx = ((Float)0.1);
HXDLIN( 268)		Float dy = radius1;
HXDLIN( 268)		Float cx = h1;
HXDLIN( 268)		Float cy = radius1;
HXDLIN( 268)		Float bx = h1;
HXDLIN( 268)		Float by = -(radius1);
HXDLIN( 268)		Float ax = ((Float)0.1);
HXDLIN( 268)		Float ay = -(radius1);
HXDLIN( 268)		Float temp1 = ((Float)0.);
HXLINE(  82)		temp1 = (px_ + ((ax * cos1) - (ay * sin1)));
HXLINE(  83)		ay = (py_ + ((ay * cos1) + (ax * sin1)));
HXLINE(  84)		ax = temp1;
HXLINE(  86)		temp1 = (px_ + ((bx * cos1) - (by * sin1)));
HXLINE(  87)		by = (py_ + ((by * cos1) + (bx * sin1)));
HXLINE(  88)		bx = temp1;
HXLINE(  90)		temp1 = (px_ + ((cx * cos1) - (cy * sin1)));
HXLINE(  91)		cy = (py_ + ((cy * cos1) + (cx * sin1)));
HXLINE(  92)		cx = temp1;
HXLINE(  94)		temp1 = (px_ + ((dx * cos1) - (dy * sin1)));
HXLINE(  95)		dy = (py_ + ((dy * cos1) + (dx * sin1)));
HXLINE(  96)		dx = temp1;
HXLINE( 268)		{
HXDLIN( 268)			bool hasUndo = true;
HXDLIN( 268)			int aA = ((color >> 24) & 255);
HXDLIN( 268)			int rA = ((color >> 16) & 255);
HXDLIN( 268)			int gA = ((color >> 8) & 255);
HXDLIN( 268)			int bA = (color & 255);
HXDLIN( 268)			Float bcx = (bx - dx);
HXDLIN( 268)			Float bcy = (by - dy);
HXDLIN( 268)			Float acx = (ax - dx);
HXDLIN( 268)			Float acy = (ay - dy);
HXDLIN( 268)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 268)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 268)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 268)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 268)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 268)			if ((ax > bx)) {
HXDLIN( 268)				if ((ax > dx)) {
HXDLIN( 268)					int min;
HXDLIN( 268)					if ((bx > dx)) {
HXDLIN( 268)						min = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN( 268)						min = ::Math_obj::floor(bx);
            					}
HXDLIN( 268)					int ii_min = min;
HXDLIN( 268)					int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 268)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXDLIN( 268)					int ii_min1 = ::Math_obj::floor(bx);
HXDLIN( 268)					int ii_max1 = ::Math_obj::ceil(dx);
HXDLIN( 268)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXDLIN( 268)				if ((bx > dx)) {
HXDLIN( 268)					int min1;
HXDLIN( 268)					if ((ax > dx)) {
HXDLIN( 268)						min1 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN( 268)						min1 = ::Math_obj::ceil(ax);
            					}
HXDLIN( 268)					int ii_min2 = min1;
HXDLIN( 268)					int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN( 268)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXDLIN( 268)					int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 268)					int ii_max3 = ::Math_obj::ceil(dx);
HXDLIN( 268)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN( 268)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 268)			if ((ay > by)) {
HXDLIN( 268)				if ((ay > dy)) {
HXDLIN( 268)					int min2;
HXDLIN( 268)					if ((by > dy)) {
HXDLIN( 268)						min2 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN( 268)						min2 = ::Math_obj::floor(by);
            					}
HXDLIN( 268)					int ii_min4 = min2;
HXDLIN( 268)					int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 268)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXDLIN( 268)					int ii_min5 = ::Math_obj::floor(by);
HXDLIN( 268)					int ii_max5 = ::Math_obj::ceil(dy);
HXDLIN( 268)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXDLIN( 268)				if ((by > dy)) {
HXDLIN( 268)					int min3;
HXDLIN( 268)					if ((ay > dy)) {
HXDLIN( 268)						min3 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN( 268)						min3 = ::Math_obj::ceil(ay);
            					}
HXDLIN( 268)					int ii_min6 = min3;
HXDLIN( 268)					int ii_max6 = ::Math_obj::ceil(by);
HXDLIN( 268)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXDLIN( 268)					int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 268)					int ii_max7 = ::Math_obj::ceil(dy);
HXDLIN( 268)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN( 268)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 268)			if (hasUndo) {
HXDLIN( 268)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 268)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 268)				 ::Dynamic imageType = null();
HXDLIN( 268)				 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 268)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 268)				::Dynamic undoImage1;
HXDLIN( 268)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXDLIN( 268)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 268)						 ::iterMagic::BytesImg b = byt;
HXDLIN( 268)						{
HXDLIN( 268)							b->width = width;
HXDLIN( 268)							b->height = height;
HXDLIN( 268)							b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 268)							b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 268)							{
HXDLIN( 268)								int len = b->length;
HXDLIN( 268)								int w = 0;
HXDLIN( 268)								{
HXDLIN( 268)									int _g = 0;
HXDLIN( 268)									int _g1 = b->height;
HXDLIN( 268)									while((_g < _g1)){
HXDLIN( 268)										_g = (_g + 1);
HXDLIN( 268)										int y = (_g - 1);
HXDLIN( 268)										{
HXDLIN( 268)											int _g2 = 0;
HXDLIN( 268)											int _g3 = b->width;
HXDLIN( 268)											while((_g2 < _g3)){
HXDLIN( 268)												_g2 = (_g2 + 1);
HXDLIN( 268)												int x = (_g2 - 1);
HXDLIN( 268)												{
HXDLIN( 268)													w = (w + 1);
HXDLIN( 268)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 268)												{
HXDLIN( 268)													w = (w + 1);
HXDLIN( 268)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 268)												{
HXDLIN( 268)													w = (w + 1);
HXDLIN( 268)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 268)												{
HXDLIN( 268)													w = (w + 1);
HXDLIN( 268)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 268)						undoImage1 = b;
            					}
            					break;
            					case (int)1: {
HXDLIN( 268)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 268)						 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 268)						{
HXDLIN( 268)							a1->width = width;
HXDLIN( 268)							a1->height = height;
HXDLIN( 268)							a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 268)							a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 268)							{
HXDLIN( 268)								int _g4 = 0;
HXDLIN( 268)								int _g5 = a1->length;
HXDLIN( 268)								while((_g4 < _g5)){
HXDLIN( 268)									_g4 = (_g4 + 1);
HXDLIN( 268)									int i = (_g4 - 1);
HXDLIN( 268)									a1->data[i] = 0;
            								}
            							}
            						}
HXDLIN( 268)						undoImage1 = a1;
            					}
            					break;
            					case (int)2: {
HXDLIN( 268)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 268)						 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 268)						{
HXDLIN( 268)							b1->width = width;
HXDLIN( 268)							b1->height = height;
HXDLIN( 268)							b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 268)							int size = (b1->length * 4);
HXDLIN( 268)							b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 268)							{
HXDLIN( 268)								int _g6 = 0;
HXDLIN( 268)								int _g7 = b1->length;
HXDLIN( 268)								while((_g6 < _g7)){
HXDLIN( 268)									_g6 = (_g6 + 1);
HXDLIN( 268)									int i1 = (_g6 - 1);
HXDLIN( 268)									{
HXDLIN( 268)										 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN( 268)										bool undoImage2;
HXDLIN( 268)										if ((i1 >= 0)) {
HXDLIN( 268)											undoImage2 = (i1 < (this3->byteLength >> 2));
            										}
            										else {
HXDLIN( 268)											undoImage2 = false;
            										}
HXDLIN( 268)										if (undoImage2) {
HXDLIN( 268)											 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 268)											int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN( 268)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 268)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 268)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 268)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 268)						undoImage1 = b1;
            					}
            					break;
            					case (int)3: {
HXDLIN( 268)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 268)						 ::iterMagic::VecIntImg v = vec;
HXDLIN( 268)						{
HXDLIN( 268)							v->width = width;
HXDLIN( 268)							v->height = height;
HXDLIN( 268)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 268)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 268)							{
HXDLIN( 268)								int _g8 = 0;
HXDLIN( 268)								int _g9 = v->length;
HXDLIN( 268)								while((_g8 < _g9)){
HXDLIN( 268)									_g8 = (_g8 + 1);
HXDLIN( 268)									int i2 = (_g8 - 1);
HXDLIN( 268)									v->data->__unsafe_set(i2,0);
            								}
            							}
            						}
HXDLIN( 268)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXDLIN( 268)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 268)						 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 268)						{
HXDLIN( 268)							b2->width = width;
HXDLIN( 268)							b2->height = height;
HXDLIN( 268)							b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 268)							b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 268)							{
HXDLIN( 268)								int len1 = b2->length;
HXDLIN( 268)								 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 268)								if (::hx::IsNull( d->head )) {
HXDLIN( 268)									int _g10 = 0;
HXDLIN( 268)									int _g11 = len1;
HXDLIN( 268)									while((_g10 < _g11)){
HXDLIN( 268)										_g10 = (_g10 + 1);
HXDLIN( 268)										int i3 = (_g10 - 1);
HXDLIN( 268)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXDLIN( 268)									int _g12 = 0;
HXDLIN( 268)									int _g13 = len1;
HXDLIN( 268)									while((_g12 < _g13)){
HXDLIN( 268)										_g12 = (_g12 + 1);
HXDLIN( 268)										int i4 = (_g12 - 1);
HXDLIN( 268)										{
HXDLIN( 268)											 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 268)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 268)											{
HXDLIN( 268)												int _g14 = 0;
HXDLIN( 268)												int _g15 = i4;
HXDLIN( 268)												while((_g14 < _g15)){
HXDLIN( 268)													_g14 = (_g14 + 1);
HXDLIN( 268)													int i5 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE( 268)											if (::hx::IsNull( prev )) {
HXDLIN( 268)												b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 268)												l = null();
            											}
            											else {
HXDLIN( 268)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 268)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 268)						undoImage1 = b2;
            					}
            					break;
            				}
HXDLIN( 268)				this2->image = undoImage1;
HXDLIN( 268)				this2->width = width;
HXDLIN( 268)				this2->height = height;
HXDLIN( 268)				this2->imageType = ( (int)(imageType) );
HXDLIN( 268)				undoImage = this2;
HXDLIN( 268)				{
HXDLIN( 268)					int rectLeft = xIter3->start;
HXDLIN( 268)					int rectTop = yIter3->start;
HXDLIN( 268)					int rectRight = xIter3->max;
HXDLIN( 268)					bool forceClear = false;
HXDLIN( 268)					{
HXDLIN( 268)						int _g16 = rectTop;
HXDLIN( 268)						int _g17 = yIter3->max;
HXDLIN( 268)						while((_g16 < _g17)){
HXDLIN( 268)							_g16 = (_g16 + 1);
HXDLIN( 268)							int dy1 = (_g16 - 1);
HXDLIN( 268)							{
HXDLIN( 268)								int _g18 = rectLeft;
HXDLIN( 268)								int _g19 = rectRight;
HXDLIN( 268)								while((_g18 < _g19)){
HXDLIN( 268)									_g18 = (_g18 + 1);
HXDLIN( 268)									int dx1 = (_g18 - 1);
HXDLIN( 268)									::Dynamic this4 = this1->image;
HXDLIN( 268)									int index;
HXDLIN( 268)									if (this1->useVirtualPos) {
HXDLIN( 268)										index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx1) - this1->virtualX));
            									}
            									else {
HXDLIN( 268)										index = ::Std_obj::_hx_int(( (Float)(((dy1 * this1->width) + dx1)) ));
            									}
HXDLIN( 268)									int c = ::iterMagic::Iimg_obj::get(this4,index);
HXDLIN( 268)									int col;
HXDLIN( 268)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXDLIN( 268)										col = c;
            									}
HXDLIN( 268)									bool _hx_tmp;
HXDLIN( 268)									if (this1->useMask) {
HXDLIN( 268)										_hx_tmp = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN( 268)										_hx_tmp = false;
            									}
HXDLIN( 268)									if (_hx_tmp) {
HXDLIN( 268)										 ::pi_xy::ImageStruct this5 = this1->mask;
HXDLIN( 268)										::Dynamic this6 = this5->image;
HXDLIN( 268)										int index1;
HXDLIN( 268)										if (this5->useVirtualPos) {
HXDLIN( 268)											index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx1) - this5->virtualX));
            										}
            										else {
HXDLIN( 268)											index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this5->width) + dx1)) ));
            										}
HXDLIN( 268)										int c1 = ::iterMagic::Iimg_obj::get(this6,index1);
HXDLIN( 268)										int v1;
HXDLIN( 268)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)											v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXDLIN( 268)											v1 = c1;
            										}
HXDLIN( 268)										int maskPixel = v1;
HXDLIN( 268)										int this7 = col;
HXDLIN( 268)										if ((maskPixel == 0)) {
HXDLIN( 268)											col = this7;
            										}
            										else {
HXDLIN( 268)											Float m0;
HXDLIN( 268)											int this8 = ((maskPixel >> 24) & 255);
HXDLIN( 268)											if ((this8 == 0)) {
HXDLIN( 268)												m0 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												m0 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float m1;
HXDLIN( 268)											int this9 = ((maskPixel >> 16) & 255);
HXDLIN( 268)											if ((this9 == 0)) {
HXDLIN( 268)												m1 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												m1 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float m2;
HXDLIN( 268)											int this10 = ((maskPixel >> 8) & 255);
HXDLIN( 268)											if ((this10 == 0)) {
HXDLIN( 268)												m2 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												m2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float m3;
HXDLIN( 268)											int this11 = (maskPixel & 255);
HXDLIN( 268)											if ((this11 == 0)) {
HXDLIN( 268)												m3 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												m3 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this7 >> 24) & 255)) )));
HXDLIN( 268)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this7 >> 16) & 255)) )));
HXDLIN( 268)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this7 >> 8) & 255)) )));
HXDLIN( 268)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this7 & 255)) )));
HXDLIN( 268)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 268)									if ((col != 0)) {
HXDLIN( 268)										int x1 = (dx1 - rectLeft);
HXDLIN( 268)										int y1 = (dy1 - rectTop);
HXDLIN( 268)										int c2 = col;
HXDLIN( 268)										bool _hx_tmp1;
HXDLIN( 268)										if ((((c2 >> 24) & 255) < 254)) {
HXDLIN( 268)											_hx_tmp1 = undoImage->transparent;
            										}
            										else {
HXDLIN( 268)											_hx_tmp1 = false;
            										}
HXDLIN( 268)										if (_hx_tmp1) {
HXDLIN( 268)											int location;
HXDLIN( 268)											if (undoImage->useVirtualPos) {
HXDLIN( 268)												location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXDLIN( 268)												location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 268)											int this12 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 268)											int this13;
HXDLIN( 268)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)												this13 = ((((((this12 >> 24) & 255) << 24) | ((this12 & 255) << 16)) | (((this12 >> 8) & 255) << 8)) | ((this12 >> 16) & 255));
            											}
            											else {
HXDLIN( 268)												this13 = this12;
            											}
HXDLIN( 268)											Float a11;
HXDLIN( 268)											int this14 = ((this13 >> 24) & 255);
HXDLIN( 268)											if ((this14 == 0)) {
HXDLIN( 268)												a11 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												a11 = (( (Float)(this14) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float r1;
HXDLIN( 268)											int this15 = ((this13 >> 16) & 255);
HXDLIN( 268)											if ((this15 == 0)) {
HXDLIN( 268)												r1 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float g1;
HXDLIN( 268)											int this16 = ((this13 >> 8) & 255);
HXDLIN( 268)											if ((this16 == 0)) {
HXDLIN( 268)												g1 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float b11;
HXDLIN( 268)											int this17 = (this13 & 255);
HXDLIN( 268)											if ((this17 == 0)) {
HXDLIN( 268)												b11 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float a2;
HXDLIN( 268)											int this18 = ((col >> 24) & 255);
HXDLIN( 268)											if ((this18 == 0)) {
HXDLIN( 268)												a2 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												a2 = (( (Float)(this18) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float r2;
HXDLIN( 268)											int this19 = ((col >> 16) & 255);
HXDLIN( 268)											if ((this19 == 0)) {
HXDLIN( 268)												r2 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float g2;
HXDLIN( 268)											int this20 = ((col >> 8) & 255);
HXDLIN( 268)											if ((this20 == 0)) {
HXDLIN( 268)												g2 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float b21;
HXDLIN( 268)											int this21 = (col & 255);
HXDLIN( 268)											if ((this21 == 0)) {
HXDLIN( 268)												b21 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 268)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 268)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 268)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 268)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 268)											int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 268)											{
HXDLIN( 268)												int _hx_tmp2;
HXDLIN( 268)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)													_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXDLIN( 268)													_hx_tmp2 = blended;
            												}
HXDLIN( 268)												::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            											}
            										}
            										else {
HXDLIN( 268)											::Dynamic this22 = undoImage->image;
HXDLIN( 268)											int index2;
HXDLIN( 268)											if (undoImage->useVirtualPos) {
HXDLIN( 268)												index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXDLIN( 268)												index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 268)											int _hx_tmp3;
HXDLIN( 268)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)												_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXDLIN( 268)												_hx_tmp3 = c2;
            											}
HXDLIN( 268)											::iterMagic::Iimg_obj::set(this22,index2,_hx_tmp3);
            										}
            									}
            									else {
HXDLIN( 268)										if (forceClear) {
HXDLIN( 268)											::Dynamic this23 = undoImage->image;
HXDLIN( 268)											int x2 = (dx1 - rectLeft);
HXDLIN( 268)											int y2 = (dy1 - rectTop);
HXDLIN( 268)											int index3;
HXDLIN( 268)											if (undoImage->useVirtualPos) {
HXDLIN( 268)												index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            											}
            											else {
HXDLIN( 268)												index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            											}
HXDLIN( 268)											::iterMagic::Iimg_obj::set(this23,index3,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 268)			bool found = false;
HXDLIN( 268)			Float min4 = ( (Float)(0) );
HXDLIN( 268)			Float max = ( (Float)(0) );
HXDLIN( 268)			int a5 = 0;
HXDLIN( 268)			int r3 = 0;
HXDLIN( 268)			int g3 = 0;
HXDLIN( 268)			int b4 = 0;
HXDLIN( 268)			{
HXDLIN( 268)				int _g_min = xIter3->start;
HXDLIN( 268)				int _g_max = xIter3->max;
HXDLIN( 268)				while((_g_min < _g_max)){
HXDLIN( 268)					_g_min = (_g_min + 1);
HXDLIN( 268)					int px1 = (_g_min - 1);
HXDLIN( 268)					Float pcx = (( (Float)(px1) ) - dx);
HXLINE( 695)					found = false;
HXLINE( 268)					{
HXDLIN( 268)						int _g_min1 = yIter3->start;
HXDLIN( 268)						int _g_max1 = yIter3->max;
HXDLIN( 268)						while((_g_min1 < _g_max1)){
HXDLIN( 268)							_g_min1 = (_g_min1 + 1);
HXDLIN( 268)							int py1 = (_g_min1 - 1);
HXDLIN( 268)							Float pcy = (( (Float)(py1) ) - dy);
HXDLIN( 268)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 268)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 268)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 268)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 268)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 268)							bool _hx_tmp4;
HXDLIN( 268)							bool _hx_tmp5;
HXDLIN( 268)							if ((ratioA >= 0)) {
HXDLIN( 268)								_hx_tmp5 = (ratioB >= 0);
            							}
            							else {
HXDLIN( 268)								_hx_tmp5 = false;
            							}
HXDLIN( 268)							if (_hx_tmp5) {
HXDLIN( 268)								_hx_tmp4 = (ratioC >= 0);
            							}
            							else {
HXDLIN( 268)								_hx_tmp4 = false;
            							}
HXDLIN( 268)							if (_hx_tmp4) {
HXLINE( 722)								min4 = ratioC;
HXLINE( 268)								int i6 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN( 268)								if ((i6 > 255)) {
HXLINE(  24)									i6 = 255;
            								}
HXLINE( 268)								if ((i6 < 0)) {
HXLINE(  25)									i6 = 0;
            								}
HXLINE( 268)								a5 = i6;
HXDLIN( 268)								int i7 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 268)								if ((i7 > 255)) {
HXLINE(  24)									i7 = 255;
            								}
HXLINE( 268)								if ((i7 < 0)) {
HXLINE(  25)									i7 = 0;
            								}
HXLINE( 747)								r3 = i7;
HXLINE( 268)								int i8 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 268)								if ((i8 > 255)) {
HXLINE(  24)									i8 = 255;
            								}
HXLINE( 268)								if ((i8 < 0)) {
HXLINE(  25)									i8 = 0;
            								}
HXLINE( 748)								g3 = i8;
HXLINE( 268)								int i9 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 268)								if ((i9 > 255)) {
HXLINE(  24)									i9 = 255;
            								}
HXLINE( 268)								if ((i9 < 0)) {
HXLINE(  25)									i9 = 0;
            								}
HXLINE( 749)								b4 = i9;
HXLINE( 268)								{
HXDLIN( 268)									int location1;
HXDLIN( 268)									if (this1->useVirtualPos) {
HXDLIN( 268)										location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            									}
            									else {
HXDLIN( 268)										location1 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            									}
HXDLIN( 268)									bool _hx_tmp6;
HXDLIN( 268)									if (this1->transparent) {
HXDLIN( 268)										_hx_tmp6 = (a5 < 254);
            									}
            									else {
HXDLIN( 268)										_hx_tmp6 = false;
            									}
HXDLIN( 268)									if (_hx_tmp6) {
HXDLIN( 268)										int this24 = ::iterMagic::Iimg_obj::get(this1->image,location1);
HXDLIN( 268)										int old;
HXDLIN( 268)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)											old = ((((((this24 >> 24) & 255) << 24) | ((this24 & 255) << 16)) | (((this24 >> 8) & 255) << 8)) | ((this24 >> 16) & 255));
            										}
            										else {
HXDLIN( 268)											old = this24;
            										}
HXDLIN( 268)										int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 268)										Float a12;
HXDLIN( 268)										int this25 = ((old >> 24) & 255);
HXDLIN( 268)										if ((this25 == 0)) {
HXDLIN( 268)											a12 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											a12 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float r11;
HXDLIN( 268)										int this26 = ((old >> 16) & 255);
HXDLIN( 268)										if ((this26 == 0)) {
HXDLIN( 268)											r11 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float g11;
HXDLIN( 268)										int this27 = ((old >> 8) & 255);
HXDLIN( 268)										if ((this27 == 0)) {
HXDLIN( 268)											g11 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float b12;
HXDLIN( 268)										int this28 = (old & 255);
HXDLIN( 268)										if ((this28 == 0)) {
HXDLIN( 268)											b12 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float a21;
HXDLIN( 268)										int this29 = ((rhs >> 24) & 255);
HXDLIN( 268)										if ((this29 == 0)) {
HXDLIN( 268)											a21 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float r21;
HXDLIN( 268)										int this30 = ((rhs >> 16) & 255);
HXDLIN( 268)										if ((this30 == 0)) {
HXDLIN( 268)											r21 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float g21;
HXDLIN( 268)										int this31 = ((rhs >> 8) & 255);
HXDLIN( 268)										if ((this31 == 0)) {
HXDLIN( 268)											g21 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float b22;
HXDLIN( 268)										int this32 = (rhs & 255);
HXDLIN( 268)										if ((this32 == 0)) {
HXDLIN( 268)											b22 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 268)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 268)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 268)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 268)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 268)										int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 268)										{
HXDLIN( 268)											int _hx_tmp7;
HXDLIN( 268)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXDLIN( 268)												_hx_tmp7 = blended1;
            											}
HXDLIN( 268)											::iterMagic::Iimg_obj::set(this1->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXDLIN( 268)										int value;
HXDLIN( 268)										if (this1->isLittle) {
HXDLIN( 268)											value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            										}
            										else {
HXDLIN( 268)											value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            										}
HXDLIN( 268)										::iterMagic::Iimg_obj::set(this1->image,location1,value);
            									}
            								}
HXLINE( 751)								found = true;
            							}
            							else {
HXDLIN( 268)								if (found) {
HXDLIN( 268)									goto _hx_goto_578;
            								}
            							}
            						}
            						_hx_goto_578:;
            					}
            				}
            			}
            		}
HXDLIN( 268)		{
HXDLIN( 268)			bool hasUndo1 = true;
HXDLIN( 268)			int aA1 = ((color >> 24) & 255);
HXDLIN( 268)			int rA1 = ((color >> 16) & 255);
HXDLIN( 268)			int gA1 = ((color >> 8) & 255);
HXDLIN( 268)			int bA1 = (color & 255);
HXDLIN( 268)			Float bcx1 = (cx - dx);
HXDLIN( 268)			Float bcy1 = (cy - dy);
HXDLIN( 268)			Float acx1 = (bx - dx);
HXDLIN( 268)			Float acy1 = (by - dy);
HXDLIN( 268)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 268)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 268)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 268)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 268)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 268)			if ((bx > cx)) {
HXDLIN( 268)				if ((bx > dx)) {
HXDLIN( 268)					int min5;
HXDLIN( 268)					if ((cx > dx)) {
HXDLIN( 268)						min5 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN( 268)						min5 = ::Math_obj::floor(cx);
            					}
HXDLIN( 268)					int ii_min8 = min5;
HXDLIN( 268)					int ii_max8 = ::Math_obj::ceil(bx);
HXDLIN( 268)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXDLIN( 268)					int ii_min9 = ::Math_obj::floor(cx);
HXDLIN( 268)					int ii_max9 = ::Math_obj::ceil(dx);
HXDLIN( 268)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXDLIN( 268)				if ((cx > dx)) {
HXDLIN( 268)					int min6;
HXDLIN( 268)					if ((bx > dx)) {
HXDLIN( 268)						min6 = ::Math_obj::floor(dx);
            					}
            					else {
HXDLIN( 268)						min6 = ::Math_obj::ceil(bx);
            					}
HXDLIN( 268)					int ii_min10 = min6;
HXDLIN( 268)					int ii_max10 = ::Math_obj::ceil(cx);
HXDLIN( 268)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXDLIN( 268)					int ii_min11 = ::Math_obj::floor(bx);
HXDLIN( 268)					int ii_max11 = ::Math_obj::ceil(dx);
HXDLIN( 268)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN( 268)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 268)			if ((by > cy)) {
HXDLIN( 268)				if ((by > dy)) {
HXDLIN( 268)					int min7;
HXDLIN( 268)					if ((cy > dy)) {
HXDLIN( 268)						min7 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN( 268)						min7 = ::Math_obj::floor(cy);
            					}
HXDLIN( 268)					int ii_min12 = min7;
HXDLIN( 268)					int ii_max12 = ::Math_obj::ceil(by);
HXDLIN( 268)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXDLIN( 268)					int ii_min13 = ::Math_obj::floor(cy);
HXDLIN( 268)					int ii_max13 = ::Math_obj::ceil(dy);
HXDLIN( 268)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXDLIN( 268)				if ((cy > dy)) {
HXDLIN( 268)					int min8;
HXDLIN( 268)					if ((by > dy)) {
HXDLIN( 268)						min8 = ::Math_obj::floor(dy);
            					}
            					else {
HXDLIN( 268)						min8 = ::Math_obj::ceil(by);
            					}
HXDLIN( 268)					int ii_min14 = min8;
HXDLIN( 268)					int ii_max14 = ::Math_obj::ceil(cy);
HXDLIN( 268)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXDLIN( 268)					int ii_min15 = ::Math_obj::floor(by);
HXDLIN( 268)					int ii_max15 = ::Math_obj::ceil(dy);
HXDLIN( 268)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN( 268)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 268)			if (hasUndo1) {
HXDLIN( 268)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 268)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 268)				 ::Dynamic imageType1 = null();
HXDLIN( 268)				 ::pi_xy::ImageStruct this33 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 268)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 268)				::Dynamic undoImage4;
HXDLIN( 268)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXDLIN( 268)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 268)						 ::iterMagic::BytesImg b6 = byt1;
HXDLIN( 268)						{
HXDLIN( 268)							b6->width = width1;
HXDLIN( 268)							b6->height = height1;
HXDLIN( 268)							b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 268)							b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 268)							{
HXDLIN( 268)								int len2 = b6->length;
HXDLIN( 268)								int w1 = 0;
HXDLIN( 268)								{
HXDLIN( 268)									int _g20 = 0;
HXDLIN( 268)									int _g21 = b6->height;
HXDLIN( 268)									while((_g20 < _g21)){
HXDLIN( 268)										_g20 = (_g20 + 1);
HXDLIN( 268)										int y3 = (_g20 - 1);
HXDLIN( 268)										{
HXDLIN( 268)											int _g22 = 0;
HXDLIN( 268)											int _g23 = b6->width;
HXDLIN( 268)											while((_g22 < _g23)){
HXDLIN( 268)												_g22 = (_g22 + 1);
HXDLIN( 268)												int x3 = (_g22 - 1);
HXDLIN( 268)												{
HXDLIN( 268)													w1 = (w1 + 1);
HXDLIN( 268)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 268)												{
HXDLIN( 268)													w1 = (w1 + 1);
HXDLIN( 268)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 268)												{
HXDLIN( 268)													w1 = (w1 + 1);
HXDLIN( 268)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 268)												{
HXDLIN( 268)													w1 = (w1 + 1);
HXDLIN( 268)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 268)						undoImage4 = b6;
            					}
            					break;
            					case (int)1: {
HXDLIN( 268)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 268)						 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN( 268)						{
HXDLIN( 268)							a7->width = width1;
HXDLIN( 268)							a7->height = height1;
HXDLIN( 268)							a7->data = ::Array_obj< int >::__new(0);
HXDLIN( 268)							a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 268)							{
HXDLIN( 268)								int _g24 = 0;
HXDLIN( 268)								int _g25 = a7->length;
HXDLIN( 268)								while((_g24 < _g25)){
HXDLIN( 268)									_g24 = (_g24 + 1);
HXDLIN( 268)									int i10 = (_g24 - 1);
HXDLIN( 268)									a7->data[i10] = 0;
            								}
            							}
            						}
HXDLIN( 268)						undoImage4 = a7;
            					}
            					break;
            					case (int)2: {
HXDLIN( 268)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 268)						 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN( 268)						{
HXDLIN( 268)							b7->width = width1;
HXDLIN( 268)							b7->height = height1;
HXDLIN( 268)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 268)							int size1 = (b7->length * 4);
HXDLIN( 268)							b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 268)							{
HXDLIN( 268)								int _g26 = 0;
HXDLIN( 268)								int _g27 = b7->length;
HXDLIN( 268)								while((_g26 < _g27)){
HXDLIN( 268)									_g26 = (_g26 + 1);
HXDLIN( 268)									int i11 = (_g26 - 1);
HXDLIN( 268)									{
HXDLIN( 268)										 ::haxe::io::ArrayBufferViewImpl this34 = b7->data;
HXDLIN( 268)										bool undoImage5;
HXDLIN( 268)										if ((i11 >= 0)) {
HXDLIN( 268)											undoImage5 = (i11 < (this34->byteLength >> 2));
            										}
            										else {
HXDLIN( 268)											undoImage5 = false;
            										}
HXDLIN( 268)										if (undoImage5) {
HXDLIN( 268)											 ::haxe::io::Bytes _this1 = this34->bytes;
HXDLIN( 268)											int pos1 = ((i11 << 2) + this34->byteOffset);
HXDLIN( 268)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 268)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 268)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 268)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 268)						undoImage4 = b7;
            					}
            					break;
            					case (int)3: {
HXDLIN( 268)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 268)						 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 268)						{
HXDLIN( 268)							v2->width = width1;
HXDLIN( 268)							v2->height = height1;
HXDLIN( 268)							v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 268)							v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 268)							{
HXDLIN( 268)								int _g28 = 0;
HXDLIN( 268)								int _g29 = v2->length;
HXDLIN( 268)								while((_g28 < _g29)){
HXDLIN( 268)									_g28 = (_g28 + 1);
HXDLIN( 268)									int i12 = (_g28 - 1);
HXDLIN( 268)									v2->data->__unsafe_set(i12,0);
            								}
            							}
            						}
HXDLIN( 268)						undoImage4 = v2;
            					}
            					break;
            					case (int)4: {
HXDLIN( 268)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 268)						 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN( 268)						{
HXDLIN( 268)							b8->width = width1;
HXDLIN( 268)							b8->height = height1;
HXDLIN( 268)							b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 268)							b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 268)							{
HXDLIN( 268)								int len3 = b8->length;
HXDLIN( 268)								 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN( 268)								if (::hx::IsNull( d1->head )) {
HXDLIN( 268)									int _g30 = 0;
HXDLIN( 268)									int _g31 = len3;
HXDLIN( 268)									while((_g30 < _g31)){
HXDLIN( 268)										_g30 = (_g30 + 1);
HXDLIN( 268)										int i13 = (_g30 - 1);
HXDLIN( 268)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXDLIN( 268)									int _g32 = 0;
HXDLIN( 268)									int _g33 = len3;
HXDLIN( 268)									while((_g32 < _g33)){
HXDLIN( 268)										_g32 = (_g32 + 1);
HXDLIN( 268)										int i14 = (_g32 - 1);
HXDLIN( 268)										{
HXDLIN( 268)											 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN( 268)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 268)											{
HXDLIN( 268)												int _g34 = 0;
HXDLIN( 268)												int _g35 = i14;
HXDLIN( 268)												while((_g34 < _g35)){
HXDLIN( 268)													_g34 = (_g34 + 1);
HXDLIN( 268)													int i15 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE( 268)											if (::hx::IsNull( prev1 )) {
HXDLIN( 268)												b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 268)												l1 = null();
            											}
            											else {
HXDLIN( 268)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 268)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 268)						undoImage4 = b8;
            					}
            					break;
            				}
HXDLIN( 268)				this33->image = undoImage4;
HXDLIN( 268)				this33->width = width1;
HXDLIN( 268)				this33->height = height1;
HXDLIN( 268)				this33->imageType = ( (int)(imageType1) );
HXDLIN( 268)				undoImage3 = this33;
HXDLIN( 268)				{
HXDLIN( 268)					int rectLeft1 = xIter31->start;
HXDLIN( 268)					int rectTop1 = yIter31->start;
HXDLIN( 268)					int rectRight1 = xIter31->max;
HXDLIN( 268)					bool forceClear1 = false;
HXDLIN( 268)					{
HXDLIN( 268)						int _g36 = rectTop1;
HXDLIN( 268)						int _g37 = yIter31->max;
HXDLIN( 268)						while((_g36 < _g37)){
HXDLIN( 268)							_g36 = (_g36 + 1);
HXDLIN( 268)							int dy2 = (_g36 - 1);
HXDLIN( 268)							{
HXDLIN( 268)								int _g38 = rectLeft1;
HXDLIN( 268)								int _g39 = rectRight1;
HXDLIN( 268)								while((_g38 < _g39)){
HXDLIN( 268)									_g38 = (_g38 + 1);
HXDLIN( 268)									int dx2 = (_g38 - 1);
HXDLIN( 268)									::Dynamic this35 = this1->image;
HXDLIN( 268)									int index4;
HXDLIN( 268)									if (this1->useVirtualPos) {
HXDLIN( 268)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx2) - this1->virtualX));
            									}
            									else {
HXDLIN( 268)										index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * this1->width) + dx2)) ));
            									}
HXDLIN( 268)									int c3 = ::iterMagic::Iimg_obj::get(this35,index4);
HXDLIN( 268)									int col1;
HXDLIN( 268)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)										col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXDLIN( 268)										col1 = c3;
            									}
HXDLIN( 268)									bool _hx_tmp8;
HXDLIN( 268)									if (this1->useMask) {
HXDLIN( 268)										_hx_tmp8 = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXDLIN( 268)										_hx_tmp8 = false;
            									}
HXDLIN( 268)									if (_hx_tmp8) {
HXDLIN( 268)										 ::pi_xy::ImageStruct this36 = this1->mask;
HXDLIN( 268)										::Dynamic this37 = this36->image;
HXDLIN( 268)										int index5;
HXDLIN( 268)										if (this36->useVirtualPos) {
HXDLIN( 268)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this36->virtualY) * ( (Float)(this36->width) )) + dx2) - this36->virtualX));
            										}
            										else {
HXDLIN( 268)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this36->width) + dx2)) ));
            										}
HXDLIN( 268)										int c4 = ::iterMagic::Iimg_obj::get(this37,index5);
HXDLIN( 268)										int v3;
HXDLIN( 268)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)											v3 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXDLIN( 268)											v3 = c4;
            										}
HXDLIN( 268)										int maskPixel1 = v3;
HXDLIN( 268)										int this38 = col1;
HXDLIN( 268)										if ((maskPixel1 == 0)) {
HXDLIN( 268)											col1 = this38;
            										}
            										else {
HXDLIN( 268)											Float m01;
HXDLIN( 268)											int this39 = ((maskPixel1 >> 24) & 255);
HXDLIN( 268)											if ((this39 == 0)) {
HXDLIN( 268)												m01 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												m01 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float m11;
HXDLIN( 268)											int this40 = ((maskPixel1 >> 16) & 255);
HXDLIN( 268)											if ((this40 == 0)) {
HXDLIN( 268)												m11 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												m11 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float m21;
HXDLIN( 268)											int this41 = ((maskPixel1 >> 8) & 255);
HXDLIN( 268)											if ((this41 == 0)) {
HXDLIN( 268)												m21 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												m21 = (( (Float)(this41) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float m31;
HXDLIN( 268)											int this42 = (maskPixel1 & 255);
HXDLIN( 268)											if ((this42 == 0)) {
HXDLIN( 268)												m31 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												m31 = (( (Float)(this42) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this38 >> 24) & 255)) )));
HXDLIN( 268)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this38 >> 16) & 255)) )));
HXDLIN( 268)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this38 >> 8) & 255)) )));
HXDLIN( 268)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this38 & 255)) )));
HXDLIN( 268)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 268)									if ((col1 != 0)) {
HXDLIN( 268)										int x4 = (dx2 - rectLeft1);
HXDLIN( 268)										int y4 = (dy2 - rectTop1);
HXDLIN( 268)										int c5 = col1;
HXDLIN( 268)										bool _hx_tmp9;
HXDLIN( 268)										if ((((c5 >> 24) & 255) < 254)) {
HXDLIN( 268)											_hx_tmp9 = undoImage3->transparent;
            										}
            										else {
HXDLIN( 268)											_hx_tmp9 = false;
            										}
HXDLIN( 268)										if (_hx_tmp9) {
HXDLIN( 268)											int location2;
HXDLIN( 268)											if (undoImage3->useVirtualPos) {
HXDLIN( 268)												location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXDLIN( 268)												location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 268)											int this43 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 268)											int this44;
HXDLIN( 268)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)												this44 = ((((((this43 >> 24) & 255) << 24) | ((this43 & 255) << 16)) | (((this43 >> 8) & 255) << 8)) | ((this43 >> 16) & 255));
            											}
            											else {
HXDLIN( 268)												this44 = this43;
            											}
HXDLIN( 268)											Float a13;
HXDLIN( 268)											int this45 = ((this44 >> 24) & 255);
HXDLIN( 268)											if ((this45 == 0)) {
HXDLIN( 268)												a13 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												a13 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float r12;
HXDLIN( 268)											int this46 = ((this44 >> 16) & 255);
HXDLIN( 268)											if ((this46 == 0)) {
HXDLIN( 268)												r12 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												r12 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float g12;
HXDLIN( 268)											int this47 = ((this44 >> 8) & 255);
HXDLIN( 268)											if ((this47 == 0)) {
HXDLIN( 268)												g12 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												g12 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float b13;
HXDLIN( 268)											int this48 = (this44 & 255);
HXDLIN( 268)											if ((this48 == 0)) {
HXDLIN( 268)												b13 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												b13 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float a22;
HXDLIN( 268)											int this49 = ((col1 >> 24) & 255);
HXDLIN( 268)											if ((this49 == 0)) {
HXDLIN( 268)												a22 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												a22 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float r22;
HXDLIN( 268)											int this50 = ((col1 >> 16) & 255);
HXDLIN( 268)											if ((this50 == 0)) {
HXDLIN( 268)												r22 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												r22 = (( (Float)(this50) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float g22;
HXDLIN( 268)											int this51 = ((col1 >> 8) & 255);
HXDLIN( 268)											if ((this51 == 0)) {
HXDLIN( 268)												g22 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												g22 = (( (Float)(this51) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float b23;
HXDLIN( 268)											int this52 = (col1 & 255);
HXDLIN( 268)											if ((this52 == 0)) {
HXDLIN( 268)												b23 = ((Float)0.);
            											}
            											else {
HXDLIN( 268)												b23 = (( (Float)(this52) ) / ( (Float)(255) ));
            											}
HXDLIN( 268)											Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 268)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 268)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 268)											int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 268)											int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 268)											int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN( 268)											{
HXDLIN( 268)												int _hx_tmp10;
HXDLIN( 268)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)													_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXDLIN( 268)													_hx_tmp10 = blended2;
            												}
HXDLIN( 268)												::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            											}
            										}
            										else {
HXDLIN( 268)											::Dynamic this53 = undoImage3->image;
HXDLIN( 268)											int index6;
HXDLIN( 268)											if (undoImage3->useVirtualPos) {
HXDLIN( 268)												index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXDLIN( 268)												index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 268)											int _hx_tmp11;
HXDLIN( 268)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)												_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXDLIN( 268)												_hx_tmp11 = c5;
            											}
HXDLIN( 268)											::iterMagic::Iimg_obj::set(this53,index6,_hx_tmp11);
            										}
            									}
            									else {
HXDLIN( 268)										if (forceClear1) {
HXDLIN( 268)											::Dynamic this54 = undoImage3->image;
HXDLIN( 268)											int x5 = (dx2 - rectLeft1);
HXDLIN( 268)											int y5 = (dy2 - rectTop1);
HXDLIN( 268)											int index7;
HXDLIN( 268)											if (undoImage3->useVirtualPos) {
HXDLIN( 268)												index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            											}
            											else {
HXDLIN( 268)												index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            											}
HXDLIN( 268)											::iterMagic::Iimg_obj::set(this54,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 268)			bool found1 = false;
HXDLIN( 268)			Float min9 = ( (Float)(0) );
HXDLIN( 268)			Float max1 = ( (Float)(0) );
HXDLIN( 268)			int a9 = 0;
HXDLIN( 268)			int r6 = 0;
HXDLIN( 268)			int g6 = 0;
HXDLIN( 268)			int b10 = 0;
HXDLIN( 268)			{
HXDLIN( 268)				int _g_min2 = xIter31->start;
HXDLIN( 268)				int _g_max2 = xIter31->max;
HXDLIN( 268)				while((_g_min2 < _g_max2)){
HXDLIN( 268)					_g_min2 = (_g_min2 + 1);
HXDLIN( 268)					int px2 = (_g_min2 - 1);
HXDLIN( 268)					Float pcx1 = (( (Float)(px2) ) - dx);
HXLINE( 695)					found1 = false;
HXLINE( 268)					{
HXDLIN( 268)						int _g_min3 = yIter31->start;
HXDLIN( 268)						int _g_max3 = yIter31->max;
HXDLIN( 268)						while((_g_min3 < _g_max3)){
HXDLIN( 268)							_g_min3 = (_g_min3 + 1);
HXDLIN( 268)							int py2 = (_g_min3 - 1);
HXDLIN( 268)							Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN( 268)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 268)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 268)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 268)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 268)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 268)							bool _hx_tmp12;
HXDLIN( 268)							bool _hx_tmp13;
HXDLIN( 268)							if ((ratioA1 >= 0)) {
HXDLIN( 268)								_hx_tmp13 = (ratioB1 >= 0);
            							}
            							else {
HXDLIN( 268)								_hx_tmp13 = false;
            							}
HXDLIN( 268)							if (_hx_tmp13) {
HXDLIN( 268)								_hx_tmp12 = (ratioC1 >= 0);
            							}
            							else {
HXDLIN( 268)								_hx_tmp12 = false;
            							}
HXDLIN( 268)							if (_hx_tmp12) {
HXLINE( 712)								min9 = ratioB1;
HXLINE( 268)								int i16 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN( 268)								if ((i16 > 255)) {
HXLINE(  24)									i16 = 255;
            								}
HXLINE( 268)								if ((i16 < 0)) {
HXLINE(  25)									i16 = 0;
            								}
HXLINE( 268)								a9 = i16;
HXDLIN( 268)								int i17 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN( 268)								if ((i17 > 255)) {
HXLINE(  24)									i17 = 255;
            								}
HXLINE( 268)								if ((i17 < 0)) {
HXLINE(  25)									i17 = 0;
            								}
HXLINE( 747)								r6 = i17;
HXLINE( 268)								int i18 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN( 268)								if ((i18 > 255)) {
HXLINE(  24)									i18 = 255;
            								}
HXLINE( 268)								if ((i18 < 0)) {
HXLINE(  25)									i18 = 0;
            								}
HXLINE( 748)								g6 = i18;
HXLINE( 268)								int i19 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN( 268)								if ((i19 > 255)) {
HXLINE(  24)									i19 = 255;
            								}
HXLINE( 268)								if ((i19 < 0)) {
HXLINE(  25)									i19 = 0;
            								}
HXLINE( 749)								b10 = i19;
HXLINE( 268)								{
HXDLIN( 268)									int location3;
HXDLIN( 268)									if (this1->useVirtualPos) {
HXDLIN( 268)										location3 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this1->virtualY) * ( (Float)(this1->width) )) + px2) - this1->virtualX));
            									}
            									else {
HXDLIN( 268)										location3 = ::Std_obj::_hx_int(( (Float)(((py2 * this1->width) + px2)) ));
            									}
HXDLIN( 268)									bool _hx_tmp14;
HXDLIN( 268)									if (this1->transparent) {
HXDLIN( 268)										_hx_tmp14 = (a9 < 254);
            									}
            									else {
HXDLIN( 268)										_hx_tmp14 = false;
            									}
HXDLIN( 268)									if (_hx_tmp14) {
HXDLIN( 268)										int this55 = ::iterMagic::Iimg_obj::get(this1->image,location3);
HXDLIN( 268)										int old1;
HXDLIN( 268)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)											old1 = ((((((this55 >> 24) & 255) << 24) | ((this55 & 255) << 16)) | (((this55 >> 8) & 255) << 8)) | ((this55 >> 16) & 255));
            										}
            										else {
HXDLIN( 268)											old1 = this55;
            										}
HXDLIN( 268)										int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 268)										Float a14;
HXDLIN( 268)										int this56 = ((old1 >> 24) & 255);
HXDLIN( 268)										if ((this56 == 0)) {
HXDLIN( 268)											a14 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											a14 = (( (Float)(this56) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float r13;
HXDLIN( 268)										int this57 = ((old1 >> 16) & 255);
HXDLIN( 268)										if ((this57 == 0)) {
HXDLIN( 268)											r13 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											r13 = (( (Float)(this57) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float g13;
HXDLIN( 268)										int this58 = ((old1 >> 8) & 255);
HXDLIN( 268)										if ((this58 == 0)) {
HXDLIN( 268)											g13 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											g13 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float b14;
HXDLIN( 268)										int this59 = (old1 & 255);
HXDLIN( 268)										if ((this59 == 0)) {
HXDLIN( 268)											b14 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											b14 = (( (Float)(this59) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float a23;
HXDLIN( 268)										int this60 = ((rhs1 >> 24) & 255);
HXDLIN( 268)										if ((this60 == 0)) {
HXDLIN( 268)											a23 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											a23 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float r23;
HXDLIN( 268)										int this61 = ((rhs1 >> 16) & 255);
HXDLIN( 268)										if ((this61 == 0)) {
HXDLIN( 268)											r23 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											r23 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float g23;
HXDLIN( 268)										int this62 = ((rhs1 >> 8) & 255);
HXDLIN( 268)										if ((this62 == 0)) {
HXDLIN( 268)											g23 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											g23 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float b24;
HXDLIN( 268)										int this63 = (rhs1 & 255);
HXDLIN( 268)										if ((this63 == 0)) {
HXDLIN( 268)											b24 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											b24 = (( (Float)(this63) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 268)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 268)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 268)										int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 268)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 268)										int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN( 268)										{
HXDLIN( 268)											int _hx_tmp15;
HXDLIN( 268)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)												_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXDLIN( 268)												_hx_tmp15 = blended3;
            											}
HXDLIN( 268)											::iterMagic::Iimg_obj::set(this1->image,location3,_hx_tmp15);
            										}
            									}
            									else {
HXDLIN( 268)										int value1;
HXDLIN( 268)										if (this1->isLittle) {
HXDLIN( 268)											value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXDLIN( 268)											value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            										}
HXDLIN( 268)										::iterMagic::Iimg_obj::set(this1->image,location3,value1);
            									}
            								}
HXLINE( 751)								found1 = true;
            							}
            							else {
HXDLIN( 268)								if (found1) {
HXDLIN( 268)									goto _hx_goto_590;
            								}
            							}
            						}
            						_hx_goto_590:;
            					}
            				}
            			}
            		}
HXDLIN( 268)		 ::pi_xy::algo::HitQuad v4 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 268)		 ::pi_xy::algo::HitQuad hitQuad = v4;
HXDLIN( 268)		Float cx1 = h2;
HXDLIN( 268)		Float cy1 = radius2;
HXDLIN( 268)		Float bx1 = h2;
HXDLIN( 268)		Float by1 = -(radius2);
HXDLIN( 268)		Float dx3 = hSmall;
HXDLIN( 268)		Float dy3 = radius2;
HXDLIN( 268)		Float ax1 = hSmall;
HXDLIN( 268)		Float ay1 = -(radius2);
HXLINE( 669)		temp = (px + ((bx1 * cos) - (by1 * sin)));
HXLINE( 670)		by1 = (py + ((by1 * cos) + (bx1 * sin)));
HXLINE( 671)		bx1 = temp;
HXLINE( 672)		temp = (px + ((cx1 * cos) - (cy1 * sin)));
HXLINE( 673)		cy1 = (py + ((cy1 * cos) + (cx1 * sin)));
HXLINE( 674)		cx1 = temp;
HXLINE( 676)		temp = (px + ((ax1 * cos) - (ay1 * sin)));
HXLINE( 677)		ay1 = (py + ((ay1 * cos) + (ax1 * sin)));
HXLINE( 678)		ax1 = temp;
HXLINE( 680)		temp = (px + ((dx3 * cos) - (dy3 * sin)));
HXLINE( 681)		dy3 = (py + ((dy3 * cos) + (dx3 * sin)));
HXLINE( 682)		dx3 = temp;
HXLINE( 268)		Float soft3 = ( (Float)(40) );
HXDLIN( 268)		bool hasUndo2 = true;
HXDLIN( 268)		int aA2 = ((color >> 24) & 255);
HXDLIN( 268)		int rA2 = ((color >> 16) & 255);
HXDLIN( 268)		int gA2 = ((color >> 8) & 255);
HXDLIN( 268)		int bA2 = (color & 255);
HXDLIN( 268)		Float bcx2 = (bx1 - cx1);
HXDLIN( 268)		Float bcy2 = (by1 - cy1);
HXDLIN( 268)		Float acx2 = (qx - cx1);
HXDLIN( 268)		Float acy2 = (qy - cy1);
HXDLIN( 268)		Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 268)		Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 268)		Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 268)		Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 268)		 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 268)		if ((qx > bx1)) {
HXDLIN( 268)			if ((qx > cx1)) {
HXDLIN( 268)				int min10;
HXDLIN( 268)				if ((bx1 > cx1)) {
HXDLIN( 268)					min10 = ::Math_obj::floor(cx1);
            				}
            				else {
HXDLIN( 268)					min10 = ::Math_obj::floor(bx1);
            				}
HXDLIN( 268)				int ii_min16 = min10;
HXDLIN( 268)				int ii_max16 = ::Math_obj::ceil(qx);
HXDLIN( 268)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            			}
            			else {
HXDLIN( 268)				int ii_min17 = ::Math_obj::floor(bx1);
HXDLIN( 268)				int ii_max17 = ::Math_obj::ceil(cx1);
HXDLIN( 268)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            			}
            		}
            		else {
HXDLIN( 268)			if ((bx1 > cx1)) {
HXDLIN( 268)				int min11;
HXDLIN( 268)				if ((qx > cx1)) {
HXDLIN( 268)					min11 = ::Math_obj::floor(cx1);
            				}
            				else {
HXDLIN( 268)					min11 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 268)				int ii_min18 = min11;
HXDLIN( 268)				int ii_max18 = ::Math_obj::ceil(bx1);
HXDLIN( 268)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            			}
            			else {
HXDLIN( 268)				int ii_min19 = ::Math_obj::floor(qx);
HXDLIN( 268)				int ii_max19 = ::Math_obj::ceil(cx1);
HXDLIN( 268)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            			}
            		}
HXDLIN( 268)		 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 268)		if ((qy > by1)) {
HXDLIN( 268)			if ((qy > cy1)) {
HXDLIN( 268)				int min12;
HXDLIN( 268)				if ((by1 > cy1)) {
HXDLIN( 268)					min12 = ::Math_obj::floor(cy1);
            				}
            				else {
HXDLIN( 268)					min12 = ::Math_obj::floor(by1);
            				}
HXDLIN( 268)				int ii_min20 = min12;
HXDLIN( 268)				int ii_max20 = ::Math_obj::ceil(qy);
HXDLIN( 268)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            			}
            			else {
HXDLIN( 268)				int ii_min21 = ::Math_obj::floor(by1);
HXDLIN( 268)				int ii_max21 = ::Math_obj::ceil(cy1);
HXDLIN( 268)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            			}
            		}
            		else {
HXDLIN( 268)			if ((by1 > cy1)) {
HXDLIN( 268)				int min13;
HXDLIN( 268)				if ((qy > cy1)) {
HXDLIN( 268)					min13 = ::Math_obj::floor(cy1);
            				}
            				else {
HXDLIN( 268)					min13 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 268)				int ii_min22 = min13;
HXDLIN( 268)				int ii_max22 = ::Math_obj::ceil(by1);
HXDLIN( 268)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            			}
            			else {
HXDLIN( 268)				int ii_min23 = ::Math_obj::floor(qy);
HXDLIN( 268)				int ii_max23 = ::Math_obj::ceil(cy1);
HXDLIN( 268)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            			}
            		}
HXDLIN( 268)		 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 268)		if (hasUndo2) {
HXDLIN( 268)			int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 268)			int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 268)			 ::Dynamic imageType2 = null();
HXDLIN( 268)			 ::pi_xy::ImageStruct this64 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 268)			if (::hx::IsNull( imageType2 )) {
HXLINE(  54)				imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 268)			::Dynamic undoImage7;
HXDLIN( 268)			switch((int)(( (int)(imageType2) ))){
            				case (int)0: {
HXDLIN( 268)					 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 268)					 ::iterMagic::BytesImg b16 = byt2;
HXDLIN( 268)					{
HXDLIN( 268)						b16->width = width2;
HXDLIN( 268)						b16->height = height2;
HXDLIN( 268)						b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 268)						b16->data = ::haxe::io::Bytes_obj::alloc((b16->length * 4));
HXDLIN( 268)						{
HXDLIN( 268)							int len4 = b16->length;
HXDLIN( 268)							int w2 = 0;
HXDLIN( 268)							{
HXDLIN( 268)								int _g40 = 0;
HXDLIN( 268)								int _g41 = b16->height;
HXDLIN( 268)								while((_g40 < _g41)){
HXDLIN( 268)									_g40 = (_g40 + 1);
HXDLIN( 268)									int y6 = (_g40 - 1);
HXDLIN( 268)									{
HXDLIN( 268)										int _g42 = 0;
HXDLIN( 268)										int _g43 = b16->width;
HXDLIN( 268)										while((_g42 < _g43)){
HXDLIN( 268)											_g42 = (_g42 + 1);
HXDLIN( 268)											int x6 = (_g42 - 1);
HXDLIN( 268)											{
HXDLIN( 268)												w2 = (w2 + 1);
HXDLIN( 268)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 268)											{
HXDLIN( 268)												w2 = (w2 + 1);
HXDLIN( 268)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 268)											{
HXDLIN( 268)												w2 = (w2 + 1);
HXDLIN( 268)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 268)											{
HXDLIN( 268)												w2 = (w2 + 1);
HXDLIN( 268)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 268)					undoImage7 = b16;
            				}
            				break;
            				case (int)1: {
HXDLIN( 268)					 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 268)					 ::iterMagic::ArrIntImg a15 = arrI2;
HXDLIN( 268)					{
HXDLIN( 268)						a15->width = width2;
HXDLIN( 268)						a15->height = height2;
HXDLIN( 268)						a15->data = ::Array_obj< int >::__new(0);
HXDLIN( 268)						a15->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 268)						{
HXDLIN( 268)							int _g44 = 0;
HXDLIN( 268)							int _g45 = a15->length;
HXDLIN( 268)							while((_g44 < _g45)){
HXDLIN( 268)								_g44 = (_g44 + 1);
HXDLIN( 268)								int i20 = (_g44 - 1);
HXDLIN( 268)								a15->data[i20] = 0;
            							}
            						}
            					}
HXDLIN( 268)					undoImage7 = a15;
            				}
            				break;
            				case (int)2: {
HXDLIN( 268)					 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 268)					 ::iterMagic::U32ArrImg b17 = u32a2;
HXDLIN( 268)					{
HXDLIN( 268)						b17->width = width2;
HXDLIN( 268)						b17->height = height2;
HXDLIN( 268)						b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 268)						int size2 = (b17->length * 4);
HXDLIN( 268)						b17->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 268)						{
HXDLIN( 268)							int _g46 = 0;
HXDLIN( 268)							int _g47 = b17->length;
HXDLIN( 268)							while((_g46 < _g47)){
HXDLIN( 268)								_g46 = (_g46 + 1);
HXDLIN( 268)								int i21 = (_g46 - 1);
HXDLIN( 268)								{
HXDLIN( 268)									 ::haxe::io::ArrayBufferViewImpl this65 = b17->data;
HXDLIN( 268)									bool undoImage8;
HXDLIN( 268)									if ((i21 >= 0)) {
HXDLIN( 268)										undoImage8 = (i21 < (this65->byteLength >> 2));
            									}
            									else {
HXDLIN( 268)										undoImage8 = false;
            									}
HXDLIN( 268)									if (undoImage8) {
HXDLIN( 268)										 ::haxe::io::Bytes _this2 = this65->bytes;
HXDLIN( 268)										int pos2 = ((i21 << 2) + this65->byteOffset);
HXDLIN( 268)										_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 268)										_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 268)										_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 268)										_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 268)					undoImage7 = b17;
            				}
            				break;
            				case (int)3: {
HXDLIN( 268)					 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 268)					 ::iterMagic::VecIntImg v5 = vec2;
HXDLIN( 268)					{
HXDLIN( 268)						v5->width = width2;
HXDLIN( 268)						v5->height = height2;
HXDLIN( 268)						v5->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 268)						v5->data = ::Array_obj< int >::__new(v5->length);
HXDLIN( 268)						{
HXDLIN( 268)							int _g48 = 0;
HXDLIN( 268)							int _g49 = v5->length;
HXDLIN( 268)							while((_g48 < _g49)){
HXDLIN( 268)								_g48 = (_g48 + 1);
HXDLIN( 268)								int i22 = (_g48 - 1);
HXDLIN( 268)								v5->data->__unsafe_set(i22,0);
            							}
            						}
            					}
HXDLIN( 268)					undoImage7 = v5;
            				}
            				break;
            				case (int)4: {
HXDLIN( 268)					 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 268)					 ::iterMagic::StackIntImg b18 = sInt2;
HXDLIN( 268)					{
HXDLIN( 268)						b18->width = width2;
HXDLIN( 268)						b18->height = height2;
HXDLIN( 268)						b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 268)						b18->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 268)						{
HXDLIN( 268)							int len5 = b18->length;
HXDLIN( 268)							 ::haxe::ds::GenericStack_Int d2 = b18->data;
HXDLIN( 268)							if (::hx::IsNull( d2->head )) {
HXDLIN( 268)								int _g50 = 0;
HXDLIN( 268)								int _g51 = len5;
HXDLIN( 268)								while((_g50 < _g51)){
HXDLIN( 268)									_g50 = (_g50 + 1);
HXDLIN( 268)									int i23 = (_g50 - 1);
HXDLIN( 268)									d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            								}
            							}
            							else {
HXDLIN( 268)								int _g52 = 0;
HXDLIN( 268)								int _g53 = len5;
HXDLIN( 268)								while((_g52 < _g53)){
HXDLIN( 268)									_g52 = (_g52 + 1);
HXDLIN( 268)									int i24 = (_g52 - 1);
HXDLIN( 268)									{
HXDLIN( 268)										 ::haxe::ds::GenericCell_Int l2 = b18->data->head;
HXDLIN( 268)										 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 268)										{
HXDLIN( 268)											int _g54 = 0;
HXDLIN( 268)											int _g55 = i24;
HXDLIN( 268)											while((_g54 < _g55)){
HXDLIN( 268)												_g54 = (_g54 + 1);
HXDLIN( 268)												int i25 = (_g54 - 1);
HXLINE( 345)												prev2 = l2;
HXLINE( 346)												l2 = l2->next;
            											}
            										}
HXLINE( 268)										if (::hx::IsNull( prev2 )) {
HXDLIN( 268)											b18->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 268)											l2 = null();
            										}
            										else {
HXDLIN( 268)											prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 268)											l2 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 268)					undoImage7 = b18;
            				}
            				break;
            			}
HXDLIN( 268)			this64->image = undoImage7;
HXDLIN( 268)			this64->width = width2;
HXDLIN( 268)			this64->height = height2;
HXDLIN( 268)			this64->imageType = ( (int)(imageType2) );
HXDLIN( 268)			undoImage6 = this64;
HXDLIN( 268)			{
HXDLIN( 268)				int rectLeft2 = xIter32->start;
HXDLIN( 268)				int rectTop2 = yIter32->start;
HXDLIN( 268)				int rectRight2 = xIter32->max;
HXDLIN( 268)				bool forceClear2 = false;
HXDLIN( 268)				{
HXDLIN( 268)					int _g56 = rectTop2;
HXDLIN( 268)					int _g57 = yIter32->max;
HXDLIN( 268)					while((_g56 < _g57)){
HXDLIN( 268)						_g56 = (_g56 + 1);
HXDLIN( 268)						int dy4 = (_g56 - 1);
HXDLIN( 268)						{
HXDLIN( 268)							int _g58 = rectLeft2;
HXDLIN( 268)							int _g59 = rectRight2;
HXDLIN( 268)							while((_g58 < _g59)){
HXDLIN( 268)								_g58 = (_g58 + 1);
HXDLIN( 268)								int dx4 = (_g58 - 1);
HXDLIN( 268)								::Dynamic this66 = this1->image;
HXDLIN( 268)								int index8;
HXDLIN( 268)								if (this1->useVirtualPos) {
HXDLIN( 268)									index8 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx4) - this1->virtualX));
            								}
            								else {
HXDLIN( 268)									index8 = ::Std_obj::_hx_int(( (Float)(((dy4 * this1->width) + dx4)) ));
            								}
HXDLIN( 268)								int c6 = ::iterMagic::Iimg_obj::get(this66,index8);
HXDLIN( 268)								int col2;
HXDLIN( 268)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)									col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            								}
            								else {
HXDLIN( 268)									col2 = c6;
            								}
HXDLIN( 268)								bool _hx_tmp16;
HXDLIN( 268)								if (this1->useMask) {
HXDLIN( 268)									_hx_tmp16 = ::hx::IsNotNull( this1->mask );
            								}
            								else {
HXDLIN( 268)									_hx_tmp16 = false;
            								}
HXDLIN( 268)								if (_hx_tmp16) {
HXDLIN( 268)									 ::pi_xy::ImageStruct this67 = this1->mask;
HXDLIN( 268)									::Dynamic this68 = this67->image;
HXDLIN( 268)									int index9;
HXDLIN( 268)									if (this67->useVirtualPos) {
HXDLIN( 268)										index9 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this67->virtualY) * ( (Float)(this67->width) )) + dx4) - this67->virtualX));
            									}
            									else {
HXDLIN( 268)										index9 = ::Std_obj::_hx_int(( (Float)(((dy4 * this67->width) + dx4)) ));
            									}
HXDLIN( 268)									int c7 = ::iterMagic::Iimg_obj::get(this68,index9);
HXDLIN( 268)									int v6;
HXDLIN( 268)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)										v6 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            									}
            									else {
HXDLIN( 268)										v6 = c7;
            									}
HXDLIN( 268)									int maskPixel2 = v6;
HXDLIN( 268)									int this69 = col2;
HXDLIN( 268)									if ((maskPixel2 == 0)) {
HXDLIN( 268)										col2 = this69;
            									}
            									else {
HXDLIN( 268)										Float m02;
HXDLIN( 268)										int this70 = ((maskPixel2 >> 24) & 255);
HXDLIN( 268)										if ((this70 == 0)) {
HXDLIN( 268)											m02 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											m02 = (( (Float)(this70) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float m12;
HXDLIN( 268)										int this71 = ((maskPixel2 >> 16) & 255);
HXDLIN( 268)										if ((this71 == 0)) {
HXDLIN( 268)											m12 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											m12 = (( (Float)(this71) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float m22;
HXDLIN( 268)										int this72 = ((maskPixel2 >> 8) & 255);
HXDLIN( 268)										if ((this72 == 0)) {
HXDLIN( 268)											m22 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											m22 = (( (Float)(this72) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float m32;
HXDLIN( 268)										int this73 = (maskPixel2 & 255);
HXDLIN( 268)										if ((this73 == 0)) {
HXDLIN( 268)											m32 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											m32 = (( (Float)(this73) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this69 >> 24) & 255)) )));
HXDLIN( 268)										int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this69 >> 16) & 255)) )));
HXDLIN( 268)										int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this69 >> 8) & 255)) )));
HXDLIN( 268)										int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this69 & 255)) )));
HXDLIN( 268)										col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 268)								if ((col2 != 0)) {
HXDLIN( 268)									int x7 = (dx4 - rectLeft2);
HXDLIN( 268)									int y7 = (dy4 - rectTop2);
HXDLIN( 268)									int c8 = col2;
HXDLIN( 268)									bool _hx_tmp17;
HXDLIN( 268)									if ((((c8 >> 24) & 255) < 254)) {
HXDLIN( 268)										_hx_tmp17 = undoImage6->transparent;
            									}
            									else {
HXDLIN( 268)										_hx_tmp17 = false;
            									}
HXDLIN( 268)									if (_hx_tmp17) {
HXDLIN( 268)										int location4;
HXDLIN( 268)										if (undoImage6->useVirtualPos) {
HXDLIN( 268)											location4 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            										}
            										else {
HXDLIN( 268)											location4 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            										}
HXDLIN( 268)										int this74 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 268)										int this75;
HXDLIN( 268)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)											this75 = ((((((this74 >> 24) & 255) << 24) | ((this74 & 255) << 16)) | (((this74 >> 8) & 255) << 8)) | ((this74 >> 16) & 255));
            										}
            										else {
HXDLIN( 268)											this75 = this74;
            										}
HXDLIN( 268)										Float a16;
HXDLIN( 268)										int this76 = ((this75 >> 24) & 255);
HXDLIN( 268)										if ((this76 == 0)) {
HXDLIN( 268)											a16 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											a16 = (( (Float)(this76) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float r14;
HXDLIN( 268)										int this77 = ((this75 >> 16) & 255);
HXDLIN( 268)										if ((this77 == 0)) {
HXDLIN( 268)											r14 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											r14 = (( (Float)(this77) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float g14;
HXDLIN( 268)										int this78 = ((this75 >> 8) & 255);
HXDLIN( 268)										if ((this78 == 0)) {
HXDLIN( 268)											g14 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											g14 = (( (Float)(this78) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float b19;
HXDLIN( 268)										int this79 = (this75 & 255);
HXDLIN( 268)										if ((this79 == 0)) {
HXDLIN( 268)											b19 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											b19 = (( (Float)(this79) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float a24;
HXDLIN( 268)										int this80 = ((col2 >> 24) & 255);
HXDLIN( 268)										if ((this80 == 0)) {
HXDLIN( 268)											a24 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											a24 = (( (Float)(this80) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float r24;
HXDLIN( 268)										int this81 = ((col2 >> 16) & 255);
HXDLIN( 268)										if ((this81 == 0)) {
HXDLIN( 268)											r24 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											r24 = (( (Float)(this81) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float g24;
HXDLIN( 268)										int this82 = ((col2 >> 8) & 255);
HXDLIN( 268)										if ((this82 == 0)) {
HXDLIN( 268)											g24 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											g24 = (( (Float)(this82) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float b25;
HXDLIN( 268)										int this83 = (col2 & 255);
HXDLIN( 268)										if ((this83 == 0)) {
HXDLIN( 268)											b25 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											b25 = (( (Float)(this83) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float a34 = (a16 * (( (Float)(1) ) - a24));
HXDLIN( 268)										int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 268)										int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 268)										int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a34) + (b25 * a24))));
HXDLIN( 268)										int a17 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 268)										int blended4 = ((((a17 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN( 268)										{
HXDLIN( 268)											int _hx_tmp18;
HXDLIN( 268)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)												_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            											}
            											else {
HXDLIN( 268)												_hx_tmp18 = blended4;
            											}
HXDLIN( 268)											::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            										}
            									}
            									else {
HXDLIN( 268)										::Dynamic this84 = undoImage6->image;
HXDLIN( 268)										int index10;
HXDLIN( 268)										if (undoImage6->useVirtualPos) {
HXDLIN( 268)											index10 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            										}
            										else {
HXDLIN( 268)											index10 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            										}
HXDLIN( 268)										int _hx_tmp19;
HXDLIN( 268)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)											_hx_tmp19 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            										}
            										else {
HXDLIN( 268)											_hx_tmp19 = c8;
            										}
HXDLIN( 268)										::iterMagic::Iimg_obj::set(this84,index10,_hx_tmp19);
            									}
            								}
            								else {
HXDLIN( 268)									if (forceClear2) {
HXDLIN( 268)										::Dynamic this85 = undoImage6->image;
HXDLIN( 268)										int x8 = (dx4 - rectLeft2);
HXDLIN( 268)										int y8 = (dy4 - rectTop2);
HXDLIN( 268)										int index11;
HXDLIN( 268)										if (undoImage6->useVirtualPos) {
HXDLIN( 268)											index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            										}
            										else {
HXDLIN( 268)											index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            										}
HXDLIN( 268)										::iterMagic::Iimg_obj::set(this85,index11,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 268)		bool found2 = false;
HXDLIN( 268)		Float min14 = ( (Float)(0) );
HXDLIN( 268)		Float max2 = ( (Float)(0) );
HXDLIN( 268)		int a18 = 0;
HXDLIN( 268)		int r9 = 0;
HXDLIN( 268)		int g9 = 0;
HXDLIN( 268)		int b26 = 0;
HXDLIN( 268)		{
HXDLIN( 268)			int _g_min4 = xIter32->start;
HXDLIN( 268)			int _g_max4 = xIter32->max;
HXDLIN( 268)			while((_g_min4 < _g_max4)){
HXDLIN( 268)				_g_min4 = (_g_min4 + 1);
HXDLIN( 268)				int px3 = (_g_min4 - 1);
HXDLIN( 268)				Float pcx2 = (( (Float)(px3) ) - cx1);
HXLINE( 695)				found2 = false;
HXLINE( 268)				{
HXDLIN( 268)					int _g_min5 = yIter32->start;
HXDLIN( 268)					int _g_max5 = yIter32->max;
HXDLIN( 268)					while((_g_min5 < _g_max5)){
HXDLIN( 268)						_g_min5 = (_g_min5 + 1);
HXDLIN( 268)						int py3 = (_g_min5 - 1);
HXDLIN( 268)						Float pcy2 = (( (Float)(py3) ) - cy1);
HXDLIN( 268)						Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 268)						Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 268)						Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 268)						Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 268)						Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 268)						bool _hx_tmp20;
HXDLIN( 268)						bool _hx_tmp21;
HXDLIN( 268)						if ((ratioA2 >= 0)) {
HXDLIN( 268)							_hx_tmp21 = (ratioB2 >= 0);
            						}
            						else {
HXDLIN( 268)							_hx_tmp21 = false;
            						}
HXDLIN( 268)						if (_hx_tmp21) {
HXDLIN( 268)							_hx_tmp20 = (ratioC2 >= 0);
            						}
            						else {
HXDLIN( 268)							_hx_tmp20 = false;
            						}
HXDLIN( 268)						if (_hx_tmp20) {
HXDLIN( 268)							Float min15;
HXDLIN( 268)							if ((ratioA2 < ratioB2)) {
HXDLIN( 268)								min15 = ratioA2;
            							}
            							else {
HXDLIN( 268)								min15 = ratioB2;
            							}
HXDLIN( 268)							if (!((min15 < ratioC2))) {
HXDLIN( 268)								min15 = ratioC2;
            							}
HXDLIN( 268)							Float max3;
HXDLIN( 268)							if ((ratioA2 > ratioB2)) {
HXDLIN( 268)								max3 = ratioA2;
            							}
            							else {
HXDLIN( 268)								max3 = ratioB2;
            							}
HXDLIN( 268)							if (!((max3 > ratioC2))) {
HXDLIN( 268)								max3 = ratioC2;
            							}
HXLINE( 743)							max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE( 268)							Float min16;
HXDLIN( 268)							if ((min15 < max3)) {
HXDLIN( 268)								min16 = min15;
            							}
            							else {
HXDLIN( 268)								min16 = ((max3 + min15) / ( (Float)(2) ));
            							}
HXDLIN( 268)							int i26 = ::Std_obj::_hx_int(((( (Float)(aA2) ) * soft3) * min16));
HXDLIN( 268)							if ((i26 > 255)) {
HXLINE(  24)								i26 = 255;
            							}
HXLINE( 268)							if ((i26 < 0)) {
HXLINE(  25)								i26 = 0;
            							}
HXLINE( 268)							a18 = i26;
HXDLIN( 268)							int i27 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN( 268)							if ((i27 > 255)) {
HXLINE(  24)								i27 = 255;
            							}
HXLINE( 268)							if ((i27 < 0)) {
HXLINE(  25)								i27 = 0;
            							}
HXLINE( 747)							r9 = i27;
HXLINE( 268)							int i28 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN( 268)							if ((i28 > 255)) {
HXLINE(  24)								i28 = 255;
            							}
HXLINE( 268)							if ((i28 < 0)) {
HXLINE(  25)								i28 = 0;
            							}
HXLINE( 748)							g9 = i28;
HXLINE( 268)							int i29 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN( 268)							if ((i29 > 255)) {
HXLINE(  24)								i29 = 255;
            							}
HXLINE( 268)							if ((i29 < 0)) {
HXLINE(  25)								i29 = 0;
            							}
HXLINE( 749)							b26 = i29;
HXLINE( 268)							{
HXDLIN( 268)								int location5;
HXDLIN( 268)								if (this1->useVirtualPos) {
HXDLIN( 268)									location5 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this1->virtualY) * ( (Float)(this1->width) )) + px3) - this1->virtualX));
            								}
            								else {
HXDLIN( 268)									location5 = ::Std_obj::_hx_int(( (Float)(((py3 * this1->width) + px3)) ));
            								}
HXDLIN( 268)								bool _hx_tmp22;
HXDLIN( 268)								if (this1->transparent) {
HXDLIN( 268)									_hx_tmp22 = (a18 < 254);
            								}
            								else {
HXDLIN( 268)									_hx_tmp22 = false;
            								}
HXDLIN( 268)								if (_hx_tmp22) {
HXDLIN( 268)									int this86 = ::iterMagic::Iimg_obj::get(this1->image,location5);
HXDLIN( 268)									int old2;
HXDLIN( 268)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)										old2 = ((((((this86 >> 24) & 255) << 24) | ((this86 & 255) << 16)) | (((this86 >> 8) & 255) << 8)) | ((this86 >> 16) & 255));
            									}
            									else {
HXDLIN( 268)										old2 = this86;
            									}
HXDLIN( 268)									int rhs2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
HXDLIN( 268)									Float a19;
HXDLIN( 268)									int this87 = ((old2 >> 24) & 255);
HXDLIN( 268)									if ((this87 == 0)) {
HXDLIN( 268)										a19 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										a19 = (( (Float)(this87) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float r15;
HXDLIN( 268)									int this88 = ((old2 >> 16) & 255);
HXDLIN( 268)									if ((this88 == 0)) {
HXDLIN( 268)										r15 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										r15 = (( (Float)(this88) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float g15;
HXDLIN( 268)									int this89 = ((old2 >> 8) & 255);
HXDLIN( 268)									if ((this89 == 0)) {
HXDLIN( 268)										g15 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										g15 = (( (Float)(this89) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float b110;
HXDLIN( 268)									int this90 = (old2 & 255);
HXDLIN( 268)									if ((this90 == 0)) {
HXDLIN( 268)										b110 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										b110 = (( (Float)(this90) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float a25;
HXDLIN( 268)									int this91 = ((rhs2 >> 24) & 255);
HXDLIN( 268)									if ((this91 == 0)) {
HXDLIN( 268)										a25 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										a25 = (( (Float)(this91) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float r25;
HXDLIN( 268)									int this92 = ((rhs2 >> 16) & 255);
HXDLIN( 268)									if ((this92 == 0)) {
HXDLIN( 268)										r25 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										r25 = (( (Float)(this92) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float g25;
HXDLIN( 268)									int this93 = ((rhs2 >> 8) & 255);
HXDLIN( 268)									if ((this93 == 0)) {
HXDLIN( 268)										g25 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										g25 = (( (Float)(this93) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float b27;
HXDLIN( 268)									int this94 = (rhs2 & 255);
HXDLIN( 268)									if ((this94 == 0)) {
HXDLIN( 268)										b27 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										b27 = (( (Float)(this94) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float a35 = (a19 * (( (Float)(1) ) - a25));
HXDLIN( 268)									int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 268)									int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 268)									int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a35) + (b27 * a25))));
HXDLIN( 268)									int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 268)									int blended5 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b28);
HXDLIN( 268)									{
HXDLIN( 268)										int _hx_tmp23;
HXDLIN( 268)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)											_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            										}
            										else {
HXDLIN( 268)											_hx_tmp23 = blended5;
            										}
HXDLIN( 268)										::iterMagic::Iimg_obj::set(this1->image,location5,_hx_tmp23);
            									}
            								}
            								else {
HXDLIN( 268)									int value2;
HXDLIN( 268)									if (this1->isLittle) {
HXDLIN( 268)										value2 = ((((a18 << 24) | (b26 << 16)) | (g9 << 8)) | r9);
            									}
            									else {
HXDLIN( 268)										value2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
            									}
HXDLIN( 268)									::iterMagic::Iimg_obj::set(this1->image,location5,value2);
            								}
            							}
HXLINE( 751)							found2 = true;
            						}
            						else {
HXDLIN( 268)							if (found2) {
HXDLIN( 268)								goto _hx_goto_602;
            							}
            						}
            					}
            					_hx_goto_602:;
            				}
            			}
            		}
HXDLIN( 268)		 ::pi_xy::algo::HitTri hitTriTop;
HXDLIN( 268)		if ((hasHit == false)) {
HXDLIN( 268)			 ::pi_xy::algo::HitTri v7 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx1,by1,cx1,cy1,true);
HXDLIN( 268)			if (hasUndo2) {
HXDLIN( 268)				v7->undoImage = undoImage6;
HXDLIN( 268)				v7->undoX = xIter32->start;
HXDLIN( 268)				v7->undoY = yIter32->start;
            			}
HXDLIN( 268)			hitTriTop = v7;
            		}
            		else {
HXDLIN( 268)			hitTriTop = null();
            		}
HXDLIN( 268)		Float soft31 = ( (Float)(40) );
HXDLIN( 268)		bool hasUndo3 = true;
HXDLIN( 268)		int aA3 = ((color >> 24) & 255);
HXDLIN( 268)		int rA3 = ((color >> 16) & 255);
HXDLIN( 268)		int gA3 = ((color >> 8) & 255);
HXDLIN( 268)		int bA3 = (color & 255);
HXDLIN( 268)		Float bcx3 = (ax1 - dx3);
HXDLIN( 268)		Float bcy3 = (ay1 - dy3);
HXDLIN( 268)		Float acx3 = (px - dx3);
HXDLIN( 268)		Float acy3 = (py - dy3);
HXDLIN( 268)		Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 268)		Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 268)		Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 268)		Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 268)		 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 268)		if ((px > ax1)) {
HXDLIN( 268)			if ((px > dx3)) {
HXDLIN( 268)				int min17;
HXDLIN( 268)				if ((ax1 > dx3)) {
HXDLIN( 268)					min17 = ::Math_obj::floor(dx3);
            				}
            				else {
HXDLIN( 268)					min17 = ::Math_obj::floor(ax1);
            				}
HXDLIN( 268)				int ii_min24 = min17;
HXDLIN( 268)				int ii_max24 = ::Math_obj::ceil(px);
HXDLIN( 268)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            			}
            			else {
HXDLIN( 268)				int ii_min25 = ::Math_obj::floor(ax1);
HXDLIN( 268)				int ii_max25 = ::Math_obj::ceil(dx3);
HXDLIN( 268)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            			}
            		}
            		else {
HXDLIN( 268)			if ((ax1 > dx3)) {
HXDLIN( 268)				int min18;
HXDLIN( 268)				if ((px > dx3)) {
HXDLIN( 268)					min18 = ::Math_obj::floor(dx3);
            				}
            				else {
HXDLIN( 268)					min18 = ::Math_obj::ceil(px);
            				}
HXDLIN( 268)				int ii_min26 = min18;
HXDLIN( 268)				int ii_max26 = ::Math_obj::ceil(ax1);
HXDLIN( 268)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            			}
            			else {
HXDLIN( 268)				int ii_min27 = ::Math_obj::floor(px);
HXDLIN( 268)				int ii_max27 = ::Math_obj::ceil(dx3);
HXDLIN( 268)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            			}
            		}
HXDLIN( 268)		 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 268)		if ((py > ay1)) {
HXDLIN( 268)			if ((py > dy3)) {
HXDLIN( 268)				int min19;
HXDLIN( 268)				if ((ay1 > dy3)) {
HXDLIN( 268)					min19 = ::Math_obj::floor(dy3);
            				}
            				else {
HXDLIN( 268)					min19 = ::Math_obj::floor(ay1);
            				}
HXDLIN( 268)				int ii_min28 = min19;
HXDLIN( 268)				int ii_max28 = ::Math_obj::ceil(py);
HXDLIN( 268)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            			}
            			else {
HXDLIN( 268)				int ii_min29 = ::Math_obj::floor(ay1);
HXDLIN( 268)				int ii_max29 = ::Math_obj::ceil(dy3);
HXDLIN( 268)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            			}
            		}
            		else {
HXDLIN( 268)			if ((ay1 > dy3)) {
HXDLIN( 268)				int min20;
HXDLIN( 268)				if ((py > dy3)) {
HXDLIN( 268)					min20 = ::Math_obj::floor(dy3);
            				}
            				else {
HXDLIN( 268)					min20 = ::Math_obj::ceil(py);
            				}
HXDLIN( 268)				int ii_min30 = min20;
HXDLIN( 268)				int ii_max30 = ::Math_obj::ceil(ay1);
HXDLIN( 268)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            			}
            			else {
HXDLIN( 268)				int ii_min31 = ::Math_obj::floor(py);
HXDLIN( 268)				int ii_max31 = ::Math_obj::ceil(dy3);
HXDLIN( 268)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            			}
            		}
HXDLIN( 268)		 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 268)		if (hasUndo3) {
HXDLIN( 268)			int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 268)			int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 268)			 ::Dynamic imageType3 = null();
HXDLIN( 268)			 ::pi_xy::ImageStruct this95 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 268)			if (::hx::IsNull( imageType3 )) {
HXLINE(  54)				imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 268)			::Dynamic undoImage10;
HXDLIN( 268)			switch((int)(( (int)(imageType3) ))){
            				case (int)0: {
HXDLIN( 268)					 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 268)					 ::iterMagic::BytesImg b29 = byt3;
HXDLIN( 268)					{
HXDLIN( 268)						b29->width = width3;
HXDLIN( 268)						b29->height = height3;
HXDLIN( 268)						b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 268)						b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN( 268)						{
HXDLIN( 268)							int len6 = b29->length;
HXDLIN( 268)							int w3 = 0;
HXDLIN( 268)							{
HXDLIN( 268)								int _g60 = 0;
HXDLIN( 268)								int _g61 = b29->height;
HXDLIN( 268)								while((_g60 < _g61)){
HXDLIN( 268)									_g60 = (_g60 + 1);
HXDLIN( 268)									int y9 = (_g60 - 1);
HXDLIN( 268)									{
HXDLIN( 268)										int _g62 = 0;
HXDLIN( 268)										int _g63 = b29->width;
HXDLIN( 268)										while((_g62 < _g63)){
HXDLIN( 268)											_g62 = (_g62 + 1);
HXDLIN( 268)											int x9 = (_g62 - 1);
HXDLIN( 268)											{
HXDLIN( 268)												w3 = (w3 + 1);
HXDLIN( 268)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 268)											{
HXDLIN( 268)												w3 = (w3 + 1);
HXDLIN( 268)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 268)											{
HXDLIN( 268)												w3 = (w3 + 1);
HXDLIN( 268)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 268)											{
HXDLIN( 268)												w3 = (w3 + 1);
HXDLIN( 268)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 268)					undoImage10 = b29;
            				}
            				break;
            				case (int)1: {
HXDLIN( 268)					 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 268)					 ::iterMagic::ArrIntImg a26 = arrI3;
HXDLIN( 268)					{
HXDLIN( 268)						a26->width = width3;
HXDLIN( 268)						a26->height = height3;
HXDLIN( 268)						a26->data = ::Array_obj< int >::__new(0);
HXDLIN( 268)						a26->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 268)						{
HXDLIN( 268)							int _g64 = 0;
HXDLIN( 268)							int _g65 = a26->length;
HXDLIN( 268)							while((_g64 < _g65)){
HXDLIN( 268)								_g64 = (_g64 + 1);
HXDLIN( 268)								int i30 = (_g64 - 1);
HXDLIN( 268)								a26->data[i30] = 0;
            							}
            						}
            					}
HXDLIN( 268)					undoImage10 = a26;
            				}
            				break;
            				case (int)2: {
HXDLIN( 268)					 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 268)					 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN( 268)					{
HXDLIN( 268)						b30->width = width3;
HXDLIN( 268)						b30->height = height3;
HXDLIN( 268)						b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 268)						int size3 = (b30->length * 4);
HXDLIN( 268)						b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 268)						{
HXDLIN( 268)							int _g66 = 0;
HXDLIN( 268)							int _g67 = b30->length;
HXDLIN( 268)							while((_g66 < _g67)){
HXDLIN( 268)								_g66 = (_g66 + 1);
HXDLIN( 268)								int i31 = (_g66 - 1);
HXDLIN( 268)								{
HXDLIN( 268)									 ::haxe::io::ArrayBufferViewImpl this96 = b30->data;
HXDLIN( 268)									bool undoImage11;
HXDLIN( 268)									if ((i31 >= 0)) {
HXDLIN( 268)										undoImage11 = (i31 < (this96->byteLength >> 2));
            									}
            									else {
HXDLIN( 268)										undoImage11 = false;
            									}
HXDLIN( 268)									if (undoImage11) {
HXDLIN( 268)										 ::haxe::io::Bytes _this3 = this96->bytes;
HXDLIN( 268)										int pos3 = ((i31 << 2) + this96->byteOffset);
HXDLIN( 268)										_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 268)										_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 268)										_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 268)										_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 268)					undoImage10 = b30;
            				}
            				break;
            				case (int)3: {
HXDLIN( 268)					 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 268)					 ::iterMagic::VecIntImg v8 = vec3;
HXDLIN( 268)					{
HXDLIN( 268)						v8->width = width3;
HXDLIN( 268)						v8->height = height3;
HXDLIN( 268)						v8->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 268)						v8->data = ::Array_obj< int >::__new(v8->length);
HXDLIN( 268)						{
HXDLIN( 268)							int _g68 = 0;
HXDLIN( 268)							int _g69 = v8->length;
HXDLIN( 268)							while((_g68 < _g69)){
HXDLIN( 268)								_g68 = (_g68 + 1);
HXDLIN( 268)								int i32 = (_g68 - 1);
HXDLIN( 268)								v8->data->__unsafe_set(i32,0);
            							}
            						}
            					}
HXDLIN( 268)					undoImage10 = v8;
            				}
            				break;
            				case (int)4: {
HXDLIN( 268)					 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 268)					 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN( 268)					{
HXDLIN( 268)						b31->width = width3;
HXDLIN( 268)						b31->height = height3;
HXDLIN( 268)						b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 268)						b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 268)						{
HXDLIN( 268)							int len7 = b31->length;
HXDLIN( 268)							 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN( 268)							if (::hx::IsNull( d3->head )) {
HXDLIN( 268)								int _g70 = 0;
HXDLIN( 268)								int _g71 = len7;
HXDLIN( 268)								while((_g70 < _g71)){
HXDLIN( 268)									_g70 = (_g70 + 1);
HXDLIN( 268)									int i33 = (_g70 - 1);
HXDLIN( 268)									d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            								}
            							}
            							else {
HXDLIN( 268)								int _g72 = 0;
HXDLIN( 268)								int _g73 = len7;
HXDLIN( 268)								while((_g72 < _g73)){
HXDLIN( 268)									_g72 = (_g72 + 1);
HXDLIN( 268)									int i34 = (_g72 - 1);
HXDLIN( 268)									{
HXDLIN( 268)										 ::haxe::ds::GenericCell_Int l3 = b31->data->head;
HXDLIN( 268)										 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 268)										{
HXDLIN( 268)											int _g74 = 0;
HXDLIN( 268)											int _g75 = i34;
HXDLIN( 268)											while((_g74 < _g75)){
HXDLIN( 268)												_g74 = (_g74 + 1);
HXDLIN( 268)												int i35 = (_g74 - 1);
HXLINE( 345)												prev3 = l3;
HXLINE( 346)												l3 = l3->next;
            											}
            										}
HXLINE( 268)										if (::hx::IsNull( prev3 )) {
HXDLIN( 268)											b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 268)											l3 = null();
            										}
            										else {
HXDLIN( 268)											prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 268)											l3 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 268)					undoImage10 = b31;
            				}
            				break;
            			}
HXDLIN( 268)			this95->image = undoImage10;
HXDLIN( 268)			this95->width = width3;
HXDLIN( 268)			this95->height = height3;
HXDLIN( 268)			this95->imageType = ( (int)(imageType3) );
HXDLIN( 268)			undoImage9 = this95;
HXDLIN( 268)			{
HXDLIN( 268)				int rectLeft3 = xIter33->start;
HXDLIN( 268)				int rectTop3 = yIter33->start;
HXDLIN( 268)				int rectRight3 = xIter33->max;
HXDLIN( 268)				bool forceClear3 = false;
HXDLIN( 268)				{
HXDLIN( 268)					int _g76 = rectTop3;
HXDLIN( 268)					int _g77 = yIter33->max;
HXDLIN( 268)					while((_g76 < _g77)){
HXDLIN( 268)						_g76 = (_g76 + 1);
HXDLIN( 268)						int dy5 = (_g76 - 1);
HXDLIN( 268)						{
HXDLIN( 268)							int _g78 = rectLeft3;
HXDLIN( 268)							int _g79 = rectRight3;
HXDLIN( 268)							while((_g78 < _g79)){
HXDLIN( 268)								_g78 = (_g78 + 1);
HXDLIN( 268)								int dx5 = (_g78 - 1);
HXDLIN( 268)								::Dynamic this97 = this1->image;
HXDLIN( 268)								int index12;
HXDLIN( 268)								if (this1->useVirtualPos) {
HXDLIN( 268)									index12 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx5) - this1->virtualX));
            								}
            								else {
HXDLIN( 268)									index12 = ::Std_obj::_hx_int(( (Float)(((dy5 * this1->width) + dx5)) ));
            								}
HXDLIN( 268)								int c9 = ::iterMagic::Iimg_obj::get(this97,index12);
HXDLIN( 268)								int col3;
HXDLIN( 268)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)									col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            								}
            								else {
HXDLIN( 268)									col3 = c9;
            								}
HXDLIN( 268)								bool _hx_tmp24;
HXDLIN( 268)								if (this1->useMask) {
HXDLIN( 268)									_hx_tmp24 = ::hx::IsNotNull( this1->mask );
            								}
            								else {
HXDLIN( 268)									_hx_tmp24 = false;
            								}
HXDLIN( 268)								if (_hx_tmp24) {
HXDLIN( 268)									 ::pi_xy::ImageStruct this98 = this1->mask;
HXDLIN( 268)									::Dynamic this99 = this98->image;
HXDLIN( 268)									int index13;
HXDLIN( 268)									if (this98->useVirtualPos) {
HXDLIN( 268)										index13 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this98->virtualY) * ( (Float)(this98->width) )) + dx5) - this98->virtualX));
            									}
            									else {
HXDLIN( 268)										index13 = ::Std_obj::_hx_int(( (Float)(((dy5 * this98->width) + dx5)) ));
            									}
HXDLIN( 268)									int c10 = ::iterMagic::Iimg_obj::get(this99,index13);
HXDLIN( 268)									int v9;
HXDLIN( 268)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)										v9 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            									}
            									else {
HXDLIN( 268)										v9 = c10;
            									}
HXDLIN( 268)									int maskPixel3 = v9;
HXDLIN( 268)									int this100 = col3;
HXDLIN( 268)									if ((maskPixel3 == 0)) {
HXDLIN( 268)										col3 = this100;
            									}
            									else {
HXDLIN( 268)										Float m03;
HXDLIN( 268)										int this101 = ((maskPixel3 >> 24) & 255);
HXDLIN( 268)										if ((this101 == 0)) {
HXDLIN( 268)											m03 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											m03 = (( (Float)(this101) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float m13;
HXDLIN( 268)										int this102 = ((maskPixel3 >> 16) & 255);
HXDLIN( 268)										if ((this102 == 0)) {
HXDLIN( 268)											m13 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											m13 = (( (Float)(this102) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float m23;
HXDLIN( 268)										int this103 = ((maskPixel3 >> 8) & 255);
HXDLIN( 268)										if ((this103 == 0)) {
HXDLIN( 268)											m23 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											m23 = (( (Float)(this103) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float m33;
HXDLIN( 268)										int this104 = (maskPixel3 & 255);
HXDLIN( 268)										if ((this104 == 0)) {
HXDLIN( 268)											m33 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											m33 = (( (Float)(this104) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this100 >> 24) & 255)) )));
HXDLIN( 268)										int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this100 >> 16) & 255)) )));
HXDLIN( 268)										int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this100 >> 8) & 255)) )));
HXDLIN( 268)										int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this100 & 255)) )));
HXDLIN( 268)										col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 268)								if ((col3 != 0)) {
HXDLIN( 268)									int x10 = (dx5 - rectLeft3);
HXDLIN( 268)									int y10 = (dy5 - rectTop3);
HXDLIN( 268)									int c11 = col3;
HXDLIN( 268)									bool _hx_tmp25;
HXDLIN( 268)									if ((((c11 >> 24) & 255) < 254)) {
HXDLIN( 268)										_hx_tmp25 = undoImage9->transparent;
            									}
            									else {
HXDLIN( 268)										_hx_tmp25 = false;
            									}
HXDLIN( 268)									if (_hx_tmp25) {
HXDLIN( 268)										int location6;
HXDLIN( 268)										if (undoImage9->useVirtualPos) {
HXDLIN( 268)											location6 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            										}
            										else {
HXDLIN( 268)											location6 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            										}
HXDLIN( 268)										int this105 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 268)										int this106;
HXDLIN( 268)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)											this106 = ((((((this105 >> 24) & 255) << 24) | ((this105 & 255) << 16)) | (((this105 >> 8) & 255) << 8)) | ((this105 >> 16) & 255));
            										}
            										else {
HXDLIN( 268)											this106 = this105;
            										}
HXDLIN( 268)										Float a110;
HXDLIN( 268)										int this107 = ((this106 >> 24) & 255);
HXDLIN( 268)										if ((this107 == 0)) {
HXDLIN( 268)											a110 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											a110 = (( (Float)(this107) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float r16;
HXDLIN( 268)										int this108 = ((this106 >> 16) & 255);
HXDLIN( 268)										if ((this108 == 0)) {
HXDLIN( 268)											r16 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											r16 = (( (Float)(this108) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float g16;
HXDLIN( 268)										int this109 = ((this106 >> 8) & 255);
HXDLIN( 268)										if ((this109 == 0)) {
HXDLIN( 268)											g16 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											g16 = (( (Float)(this109) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float b111;
HXDLIN( 268)										int this110 = (this106 & 255);
HXDLIN( 268)										if ((this110 == 0)) {
HXDLIN( 268)											b111 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											b111 = (( (Float)(this110) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float a27;
HXDLIN( 268)										int this111 = ((col3 >> 24) & 255);
HXDLIN( 268)										if ((this111 == 0)) {
HXDLIN( 268)											a27 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											a27 = (( (Float)(this111) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float r26;
HXDLIN( 268)										int this112 = ((col3 >> 16) & 255);
HXDLIN( 268)										if ((this112 == 0)) {
HXDLIN( 268)											r26 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											r26 = (( (Float)(this112) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float g26;
HXDLIN( 268)										int this113 = ((col3 >> 8) & 255);
HXDLIN( 268)										if ((this113 == 0)) {
HXDLIN( 268)											g26 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											g26 = (( (Float)(this113) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float b210;
HXDLIN( 268)										int this114 = (col3 & 255);
HXDLIN( 268)										if ((this114 == 0)) {
HXDLIN( 268)											b210 = ((Float)0.);
            										}
            										else {
HXDLIN( 268)											b210 = (( (Float)(this114) ) / ( (Float)(255) ));
            										}
HXDLIN( 268)										Float a36 = (a110 * (( (Float)(1) ) - a27));
HXDLIN( 268)										int r17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a27))));
HXDLIN( 268)										int g17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a27))));
HXDLIN( 268)										int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a36) + (b210 * a27))));
HXDLIN( 268)										int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a27)));
HXDLIN( 268)										int blended6 = ((((a28 << 24) | (r17 << 16)) | (g17 << 8)) | b32);
HXDLIN( 268)										{
HXDLIN( 268)											int _hx_tmp26;
HXDLIN( 268)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)												_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            											}
            											else {
HXDLIN( 268)												_hx_tmp26 = blended6;
            											}
HXDLIN( 268)											::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            										}
            									}
            									else {
HXDLIN( 268)										::Dynamic this115 = undoImage9->image;
HXDLIN( 268)										int index14;
HXDLIN( 268)										if (undoImage9->useVirtualPos) {
HXDLIN( 268)											index14 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            										}
            										else {
HXDLIN( 268)											index14 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            										}
HXDLIN( 268)										int _hx_tmp27;
HXDLIN( 268)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)											_hx_tmp27 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            										}
            										else {
HXDLIN( 268)											_hx_tmp27 = c11;
            										}
HXDLIN( 268)										::iterMagic::Iimg_obj::set(this115,index14,_hx_tmp27);
            									}
            								}
            								else {
HXDLIN( 268)									if (forceClear3) {
HXDLIN( 268)										::Dynamic this116 = undoImage9->image;
HXDLIN( 268)										int x11 = (dx5 - rectLeft3);
HXDLIN( 268)										int y11 = (dy5 - rectTop3);
HXDLIN( 268)										int index15;
HXDLIN( 268)										if (undoImage9->useVirtualPos) {
HXDLIN( 268)											index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            										}
            										else {
HXDLIN( 268)											index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            										}
HXDLIN( 268)										::iterMagic::Iimg_obj::set(this116,index15,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 268)		bool found3 = false;
HXDLIN( 268)		Float min21 = ( (Float)(0) );
HXDLIN( 268)		Float max4 = ( (Float)(0) );
HXDLIN( 268)		int a29 = 0;
HXDLIN( 268)		int r18 = 0;
HXDLIN( 268)		int g18 = 0;
HXDLIN( 268)		int b33 = 0;
HXDLIN( 268)		{
HXDLIN( 268)			int _g_min6 = xIter33->start;
HXDLIN( 268)			int _g_max6 = xIter33->max;
HXDLIN( 268)			while((_g_min6 < _g_max6)){
HXDLIN( 268)				_g_min6 = (_g_min6 + 1);
HXDLIN( 268)				int px4 = (_g_min6 - 1);
HXDLIN( 268)				Float pcx3 = (( (Float)(px4) ) - dx3);
HXLINE( 695)				found3 = false;
HXLINE( 268)				{
HXDLIN( 268)					int _g_min7 = yIter33->start;
HXDLIN( 268)					int _g_max7 = yIter33->max;
HXDLIN( 268)					while((_g_min7 < _g_max7)){
HXDLIN( 268)						_g_min7 = (_g_min7 + 1);
HXDLIN( 268)						int py4 = (_g_min7 - 1);
HXDLIN( 268)						Float pcy3 = (( (Float)(py4) ) - dy3);
HXDLIN( 268)						Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 268)						Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 268)						Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 268)						Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 268)						Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 268)						bool _hx_tmp28;
HXDLIN( 268)						bool _hx_tmp29;
HXDLIN( 268)						if ((ratioA3 >= 0)) {
HXDLIN( 268)							_hx_tmp29 = (ratioB3 >= 0);
            						}
            						else {
HXDLIN( 268)							_hx_tmp29 = false;
            						}
HXDLIN( 268)						if (_hx_tmp29) {
HXDLIN( 268)							_hx_tmp28 = (ratioC3 >= 0);
            						}
            						else {
HXDLIN( 268)							_hx_tmp28 = false;
            						}
HXDLIN( 268)						if (_hx_tmp28) {
HXDLIN( 268)							Float min22;
HXDLIN( 268)							if ((ratioA3 < ratioB3)) {
HXDLIN( 268)								min22 = ratioA3;
            							}
            							else {
HXDLIN( 268)								min22 = ratioB3;
            							}
HXDLIN( 268)							if (!((min22 < ratioC3))) {
HXDLIN( 268)								min22 = ratioC3;
            							}
HXDLIN( 268)							Float max5;
HXDLIN( 268)							if ((ratioA3 > ratioB3)) {
HXDLIN( 268)								max5 = ratioA3;
            							}
            							else {
HXDLIN( 268)								max5 = ratioB3;
            							}
HXDLIN( 268)							if (!((max5 > ratioC3))) {
HXDLIN( 268)								max5 = ratioC3;
            							}
HXLINE( 743)							max5 = ((( (Float)(1) ) - max5) / ( (Float)(2) ));
HXLINE( 268)							Float min23;
HXDLIN( 268)							if ((min22 < max5)) {
HXDLIN( 268)								min23 = min22;
            							}
            							else {
HXDLIN( 268)								min23 = ((max5 + min22) / ( (Float)(2) ));
            							}
HXDLIN( 268)							int i36 = ::Std_obj::_hx_int(((( (Float)(aA3) ) * soft31) * min23));
HXDLIN( 268)							if ((i36 > 255)) {
HXLINE(  24)								i36 = 255;
            							}
HXLINE( 268)							if ((i36 < 0)) {
HXLINE(  25)								i36 = 0;
            							}
HXLINE( 268)							a29 = i36;
HXDLIN( 268)							int i37 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN( 268)							if ((i37 > 255)) {
HXLINE(  24)								i37 = 255;
            							}
HXLINE( 268)							if ((i37 < 0)) {
HXLINE(  25)								i37 = 0;
            							}
HXLINE( 747)							r18 = i37;
HXLINE( 268)							int i38 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN( 268)							if ((i38 > 255)) {
HXLINE(  24)								i38 = 255;
            							}
HXLINE( 268)							if ((i38 < 0)) {
HXLINE(  25)								i38 = 0;
            							}
HXLINE( 748)							g18 = i38;
HXLINE( 268)							int i39 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN( 268)							if ((i39 > 255)) {
HXLINE(  24)								i39 = 255;
            							}
HXLINE( 268)							if ((i39 < 0)) {
HXLINE(  25)								i39 = 0;
            							}
HXLINE( 749)							b33 = i39;
HXLINE( 268)							{
HXDLIN( 268)								int location7;
HXDLIN( 268)								if (this1->useVirtualPos) {
HXDLIN( 268)									location7 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - this1->virtualY) * ( (Float)(this1->width) )) + px4) - this1->virtualX));
            								}
            								else {
HXDLIN( 268)									location7 = ::Std_obj::_hx_int(( (Float)(((py4 * this1->width) + px4)) ));
            								}
HXDLIN( 268)								bool _hx_tmp30;
HXDLIN( 268)								if (this1->transparent) {
HXDLIN( 268)									_hx_tmp30 = (a29 < 254);
            								}
            								else {
HXDLIN( 268)									_hx_tmp30 = false;
            								}
HXDLIN( 268)								if (_hx_tmp30) {
HXDLIN( 268)									int this117 = ::iterMagic::Iimg_obj::get(this1->image,location7);
HXDLIN( 268)									int old3;
HXDLIN( 268)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)										old3 = ((((((this117 >> 24) & 255) << 24) | ((this117 & 255) << 16)) | (((this117 >> 8) & 255) << 8)) | ((this117 >> 16) & 255));
            									}
            									else {
HXDLIN( 268)										old3 = this117;
            									}
HXDLIN( 268)									int rhs3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
HXDLIN( 268)									Float a111;
HXDLIN( 268)									int this118 = ((old3 >> 24) & 255);
HXDLIN( 268)									if ((this118 == 0)) {
HXDLIN( 268)										a111 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										a111 = (( (Float)(this118) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float r19;
HXDLIN( 268)									int this119 = ((old3 >> 16) & 255);
HXDLIN( 268)									if ((this119 == 0)) {
HXDLIN( 268)										r19 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										r19 = (( (Float)(this119) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float g19;
HXDLIN( 268)									int this120 = ((old3 >> 8) & 255);
HXDLIN( 268)									if ((this120 == 0)) {
HXDLIN( 268)										g19 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										g19 = (( (Float)(this120) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float b112;
HXDLIN( 268)									int this121 = (old3 & 255);
HXDLIN( 268)									if ((this121 == 0)) {
HXDLIN( 268)										b112 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										b112 = (( (Float)(this121) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float a210;
HXDLIN( 268)									int this122 = ((rhs3 >> 24) & 255);
HXDLIN( 268)									if ((this122 == 0)) {
HXDLIN( 268)										a210 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										a210 = (( (Float)(this122) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float r27;
HXDLIN( 268)									int this123 = ((rhs3 >> 16) & 255);
HXDLIN( 268)									if ((this123 == 0)) {
HXDLIN( 268)										r27 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										r27 = (( (Float)(this123) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float g27;
HXDLIN( 268)									int this124 = ((rhs3 >> 8) & 255);
HXDLIN( 268)									if ((this124 == 0)) {
HXDLIN( 268)										g27 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										g27 = (( (Float)(this124) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float b211;
HXDLIN( 268)									int this125 = (rhs3 & 255);
HXDLIN( 268)									if ((this125 == 0)) {
HXDLIN( 268)										b211 = ((Float)0.);
            									}
            									else {
HXDLIN( 268)										b211 = (( (Float)(this125) ) / ( (Float)(255) ));
            									}
HXDLIN( 268)									Float a37 = (a111 * (( (Float)(1) ) - a210));
HXDLIN( 268)									int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a37) + (r27 * a210))));
HXDLIN( 268)									int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a37) + (g27 * a210))));
HXDLIN( 268)									int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a37) + (b211 * a210))));
HXDLIN( 268)									int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a210)));
HXDLIN( 268)									int blended7 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b34);
HXDLIN( 268)									{
HXDLIN( 268)										int _hx_tmp31;
HXDLIN( 268)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 268)											_hx_tmp31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            										}
            										else {
HXDLIN( 268)											_hx_tmp31 = blended7;
            										}
HXDLIN( 268)										::iterMagic::Iimg_obj::set(this1->image,location7,_hx_tmp31);
            									}
            								}
            								else {
HXDLIN( 268)									int value3;
HXDLIN( 268)									if (this1->isLittle) {
HXDLIN( 268)										value3 = ((((a29 << 24) | (b33 << 16)) | (g18 << 8)) | r18);
            									}
            									else {
HXDLIN( 268)										value3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
            									}
HXDLIN( 268)									::iterMagic::Iimg_obj::set(this1->image,location7,value3);
            								}
            							}
HXLINE( 751)							found3 = true;
            						}
            						else {
HXDLIN( 268)							if (found3) {
HXDLIN( 268)								goto _hx_goto_614;
            							}
            						}
            					}
            					_hx_goto_614:;
            				}
            			}
            		}
HXDLIN( 268)		 ::pi_xy::algo::HitTri hitTriBottom;
HXDLIN( 268)		if ((hasHit == false)) {
HXDLIN( 268)			 ::pi_xy::algo::HitTri v10 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,px,py,ax1,ay1,dx3,dy3,true);
HXDLIN( 268)			if (hasUndo3) {
HXDLIN( 268)				v10->undoImage = undoImage9;
HXDLIN( 268)				v10->undoX = xIter33->start;
HXDLIN( 268)				v10->undoY = yIter33->start;
            			}
HXDLIN( 268)			hitTriBottom = v10;
            		}
            		else {
HXDLIN( 268)			hitTriBottom = null();
            		}
HXDLIN( 268)		if (hasHit) {
HXDLIN( 268)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(2)->init(0,hitTriTop)->init(1,hitTriBottom));
HXDLIN( 268)			if (::hx::IsNotNull( hitQuad )) {
HXDLIN( 268)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXDLIN( 268)			hitArr->triArr->push(hitQuad->triBCD);
HXDLIN( 268)			return hitArr;
            		}
            		else {
HXDLIN( 268)			return null();
            		}
HXDLIN( 268)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(SoftShape_Impl__obj,fixArrowBoth,return )

void SoftShape_Impl__obj::ellipseTri( ::pi_xy::ImageStruct this1,Float cx,Float cy,Float rx,Float ry,int color,::hx::Null< Float >  __o_phi,::hx::Null< Float >  __o_softC,::hx::Null< bool >  __o_printSides,::hx::Null< Float >  __o_targetError){
            		Float phi = __o_phi.Default(0);
            		Float softC = __o_softC.Default(10);
            		bool printSides = __o_printSides.Default(false);
            		Float targetError = __o_targetError.Default(((Float)1.05));
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_285_ellipseTri)
HXLINE( 286)		Float rSmall;
HXDLIN( 286)		if ((rx > ry)) {
HXLINE( 286)			rSmall = ry;
            		}
            		else {
HXLINE( 286)			rSmall = rx;
            		}
HXLINE( 287)		 ::Dynamic targetE = targetError;
HXDLIN( 287)		if (::hx::IsNull( targetE )) {
HXLINE( 287)			targetE = ((Float)1.05);
            		}
HXDLIN( 287)		int result = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE) ) / rSmall)))));
HXDLIN( 287)		int noSides;
HXDLIN( 287)		if ((result < 12)) {
HXLINE( 287)			noSides = 12;
            		}
            		else {
HXLINE( 287)			if ((result > 500)) {
HXLINE( 287)				noSides = 500;
            			}
            			else {
HXLINE( 287)				noSides = result;
            			}
            		}
HXLINE( 288)		if (printSides) {
HXLINE( 288)			::haxe::Log_obj::trace(noSides,::hx::SourceInfo(HX_("src/pi_xy/imageAbstracts/SoftShape.hx",2d,e2,54,28),288,HX_("pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_",32,81,5d,50),HX_("ellipseTri",ed,3e,df,4c)));
            		}
HXLINE( 289)		{
HXLINE( 289)			 ::Dynamic phi1 = phi;
HXDLIN( 289)			 ::Dynamic sides = noSides;
HXLINE( 293)			if (::hx::IsNull( sides )) {
HXLINE( 293)				sides = 36;
            			}
HXLINE( 292)			if (::hx::IsNull( phi1 )) {
HXLINE( 292)				phi1 = ((Float)0.);
            			}
HXLINE( 289)			{
HXLINE( 289)				 ::Dynamic phi2 = phi1;
HXDLIN( 289)				 ::Dynamic sides1 = sides;
HXDLIN( 289)				if (::hx::IsNull( sides1 )) {
HXLINE( 310)					sides1 = 36;
            				}
HXLINE( 289)				if (::hx::IsNull( phi2 )) {
HXLINE( 309)					phi2 = ((Float)0.);
            				}
HXLINE( 289)				Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides1) ));
HXDLIN( 289)				Float omega;
HXDLIN( 289)				omega = ((Float)0.);
HXDLIN( 289)				Float lastX = ((Float)0.);
HXDLIN( 289)				Float lastY = ((Float)0.);
HXDLIN( 289)				if (::hx::IsNotEq( phi2,0 )) {
HXLINE(  95)					lastX = ((((rx * ::Math_obj::cos(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::cos(( (Float)(phi2) ))) - ((ry * ::Math_obj::sin(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::sin(( (Float)(phi2) )))) + cx);
HXLINE(  96)					lastY = ((((rx * ::Math_obj::cos(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::sin(( (Float)(phi2) ))) + ((ry * ::Math_obj::sin(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::cos(( (Float)(phi2) )))) + cy);
            				}
            				else {
HXLINE(  98)					lastX = (cx + (rx * ::Math_obj::cos(((( (Float)(sides1) ) * theta) + omega))));
HXLINE(  99)					lastY = (cy + (ry * ::Math_obj::sin(((( (Float)(sides1) ) * theta) + omega))));
            				}
HXLINE( 289)				if (::hx::IsNotEq( phi2,0 )) {
HXLINE( 289)					Float cphi = ::Math_obj::cos(( (Float)(phi2) ));
HXDLIN( 289)					Float sphi = ::Math_obj::sin(( (Float)(phi2) ));
HXDLIN( 289)					{
HXLINE( 289)						int _g = 0;
HXDLIN( 289)						int _g1 = (sides1 + 1);
HXDLIN( 289)						while((_g < _g1)){
HXLINE( 289)							_g = (_g + 1);
HXDLIN( 289)							int i = (_g - 1);
HXDLIN( 289)							Float stheta = ::Math_obj::sin((((( (Float)(i) ) * theta) + omega) + ((Float)0.01)));
HXDLIN( 289)							Float ctheta = ::Math_obj::cos((((( (Float)(i) ) * theta) + omega) + ((Float)0.01)));
HXDLIN( 289)							Float nextX = ((((rx * ctheta) * cphi) - ((ry * stheta) * sphi)) + cx);
HXDLIN( 289)							Float nextY = ((((rx * ctheta) * sphi) + ((ry * stheta) * cphi)) + cy);
HXDLIN( 289)							{
HXLINE( 289)								bool hasHit = false;
HXDLIN( 289)								bool hasUndo = false;
HXDLIN( 289)								int aA = ((color >> 24) & 255);
HXDLIN( 289)								int rA = ((color >> 16) & 255);
HXDLIN( 289)								int gA = ((color >> 8) & 255);
HXDLIN( 289)								int bA = (color & 255);
HXDLIN( 289)								Float bcx = (lastX - nextX);
HXDLIN( 289)								Float bcy = (lastY - nextY);
HXDLIN( 289)								Float acx = (cx - nextX);
HXDLIN( 289)								Float acy = (cy - nextY);
HXDLIN( 289)								Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 289)								Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 289)								Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 289)								Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 289)								 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 289)								if ((cx > lastX)) {
HXLINE( 289)									if ((cx > nextX)) {
HXLINE( 289)										int min;
HXDLIN( 289)										if ((lastX > nextX)) {
HXLINE( 289)											min = ::Math_obj::floor(nextX);
            										}
            										else {
HXLINE( 289)											min = ::Math_obj::floor(lastX);
            										}
HXDLIN( 289)										int ii_min = min;
HXDLIN( 289)										int ii_max = ::Math_obj::ceil(cx);
HXDLIN( 289)										xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            									}
            									else {
HXLINE( 289)										int ii_min1 = ::Math_obj::floor(lastX);
HXDLIN( 289)										int ii_max1 = ::Math_obj::ceil(nextX);
HXDLIN( 289)										xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            									}
            								}
            								else {
HXLINE( 289)									if ((lastX > nextX)) {
HXLINE( 289)										int min1;
HXDLIN( 289)										if ((cx > nextX)) {
HXLINE( 289)											min1 = ::Math_obj::floor(nextX);
            										}
            										else {
HXLINE( 289)											min1 = ::Math_obj::ceil(cx);
            										}
HXDLIN( 289)										int ii_min2 = min1;
HXDLIN( 289)										int ii_max2 = ::Math_obj::ceil(lastX);
HXDLIN( 289)										xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            									}
            									else {
HXLINE( 289)										int ii_min3 = ::Math_obj::floor(cx);
HXDLIN( 289)										int ii_max3 = ::Math_obj::ceil(nextX);
HXDLIN( 289)										xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            									}
            								}
HXDLIN( 289)								 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 289)								if ((cy > lastY)) {
HXLINE( 289)									if ((cy > nextY)) {
HXLINE( 289)										int min2;
HXDLIN( 289)										if ((lastY > nextY)) {
HXLINE( 289)											min2 = ::Math_obj::floor(nextY);
            										}
            										else {
HXLINE( 289)											min2 = ::Math_obj::floor(lastY);
            										}
HXDLIN( 289)										int ii_min4 = min2;
HXDLIN( 289)										int ii_max4 = ::Math_obj::ceil(cy);
HXDLIN( 289)										yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            									}
            									else {
HXLINE( 289)										int ii_min5 = ::Math_obj::floor(lastY);
HXDLIN( 289)										int ii_max5 = ::Math_obj::ceil(nextY);
HXDLIN( 289)										yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            									}
            								}
            								else {
HXLINE( 289)									if ((lastY > nextY)) {
HXLINE( 289)										int min3;
HXDLIN( 289)										if ((cy > nextY)) {
HXLINE( 289)											min3 = ::Math_obj::floor(nextY);
            										}
            										else {
HXLINE( 289)											min3 = ::Math_obj::ceil(cy);
            										}
HXDLIN( 289)										int ii_min6 = min3;
HXDLIN( 289)										int ii_max6 = ::Math_obj::ceil(lastY);
HXDLIN( 289)										yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            									}
            									else {
HXLINE( 289)										int ii_min7 = ::Math_obj::floor(cy);
HXDLIN( 289)										int ii_max7 = ::Math_obj::ceil(nextY);
HXDLIN( 289)										yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            									}
            								}
HXDLIN( 289)								 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 289)								if (hasUndo) {
HXLINE( 289)									int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 289)									int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 289)									 ::Dynamic imageType = null();
HXDLIN( 289)									 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 289)									if (::hx::IsNull( imageType )) {
HXLINE(  54)										imageType = ::pi_xy::ImageStruct_obj::defaultType;
            									}
HXLINE( 289)									::Dynamic undoImage1;
HXDLIN( 289)									switch((int)(( (int)(imageType) ))){
            										case (int)0: {
HXLINE( 289)											 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 289)											 ::iterMagic::BytesImg b = byt;
HXDLIN( 289)											{
HXLINE( 289)												b->width = width;
HXDLIN( 289)												b->height = height;
HXDLIN( 289)												b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 289)												b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 289)												{
HXLINE( 289)													int len = b->length;
HXDLIN( 289)													int w = 0;
HXDLIN( 289)													{
HXLINE( 289)														int _g2 = 0;
HXDLIN( 289)														int _g3 = b->height;
HXDLIN( 289)														while((_g2 < _g3)){
HXLINE( 289)															_g2 = (_g2 + 1);
HXDLIN( 289)															int y = (_g2 - 1);
HXDLIN( 289)															{
HXLINE( 289)																int _g4 = 0;
HXDLIN( 289)																int _g5 = b->width;
HXDLIN( 289)																while((_g4 < _g5)){
HXLINE( 289)																	_g4 = (_g4 + 1);
HXDLIN( 289)																	int x = (_g4 - 1);
HXDLIN( 289)																	{
HXLINE( 289)																		w = (w + 1);
HXDLIN( 289)																		b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN( 289)																	{
HXLINE( 289)																		w = (w + 1);
HXDLIN( 289)																		b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN( 289)																	{
HXLINE( 289)																		w = (w + 1);
HXDLIN( 289)																		b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN( 289)																	{
HXLINE( 289)																		w = (w + 1);
HXDLIN( 289)																		b->data->b[(w - 1)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN( 289)											undoImage1 = b;
            										}
            										break;
            										case (int)1: {
HXLINE( 289)											 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 289)											 ::iterMagic::ArrIntImg a = arrI;
HXDLIN( 289)											{
HXLINE( 289)												a->width = width;
HXDLIN( 289)												a->height = height;
HXDLIN( 289)												a->data = ::Array_obj< int >::__new(0);
HXDLIN( 289)												a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 289)												{
HXLINE( 289)													int _g6 = 0;
HXDLIN( 289)													int _g7 = a->length;
HXDLIN( 289)													while((_g6 < _g7)){
HXLINE( 289)														_g6 = (_g6 + 1);
HXDLIN( 289)														int i1 = (_g6 - 1);
HXDLIN( 289)														a->data[i1] = 0;
            													}
            												}
            											}
HXDLIN( 289)											undoImage1 = a;
            										}
            										break;
            										case (int)2: {
HXLINE( 289)											 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 289)											 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 289)											{
HXLINE( 289)												b1->width = width;
HXDLIN( 289)												b1->height = height;
HXDLIN( 289)												b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 289)												int size = (b1->length * 4);
HXDLIN( 289)												b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 289)												{
HXLINE( 289)													int _g8 = 0;
HXDLIN( 289)													int _g9 = b1->length;
HXDLIN( 289)													while((_g8 < _g9)){
HXLINE( 289)														_g8 = (_g8 + 1);
HXDLIN( 289)														int i2 = (_g8 - 1);
HXDLIN( 289)														{
HXLINE( 289)															 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN( 289)															bool undoImage2;
HXDLIN( 289)															if ((i2 >= 0)) {
HXLINE( 289)																undoImage2 = (i2 < (this3->byteLength >> 2));
            															}
            															else {
HXLINE( 289)																undoImage2 = false;
            															}
HXDLIN( 289)															if (undoImage2) {
HXLINE( 289)																 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 289)																int pos = ((i2 << 2) + this3->byteOffset);
HXDLIN( 289)																_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 289)																_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 289)																_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 289)																_this->b[(pos + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
HXDLIN( 289)											undoImage1 = b1;
            										}
            										break;
            										case (int)3: {
HXLINE( 289)											 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 289)											 ::iterMagic::VecIntImg v = vec;
HXDLIN( 289)											{
HXLINE( 289)												v->width = width;
HXDLIN( 289)												v->height = height;
HXDLIN( 289)												v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 289)												v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 289)												{
HXLINE( 289)													int _g10 = 0;
HXDLIN( 289)													int _g11 = v->length;
HXDLIN( 289)													while((_g10 < _g11)){
HXLINE( 289)														_g10 = (_g10 + 1);
HXDLIN( 289)														int i3 = (_g10 - 1);
HXDLIN( 289)														v->data->__unsafe_set(i3,0);
            													}
            												}
            											}
HXDLIN( 289)											undoImage1 = v;
            										}
            										break;
            										case (int)4: {
HXLINE( 289)											 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 289)											 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 289)											{
HXLINE( 289)												b2->width = width;
HXDLIN( 289)												b2->height = height;
HXDLIN( 289)												b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 289)												b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 289)												{
HXLINE( 289)													int len1 = b2->length;
HXDLIN( 289)													 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 289)													if (::hx::IsNull( d->head )) {
HXLINE( 289)														int _g12 = 0;
HXDLIN( 289)														int _g13 = len1;
HXDLIN( 289)														while((_g12 < _g13)){
HXLINE( 289)															_g12 = (_g12 + 1);
HXDLIN( 289)															int i4 = (_g12 - 1);
HXDLIN( 289)															d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            														}
            													}
            													else {
HXLINE( 289)														int _g14 = 0;
HXDLIN( 289)														int _g15 = len1;
HXDLIN( 289)														while((_g14 < _g15)){
HXLINE( 289)															_g14 = (_g14 + 1);
HXDLIN( 289)															int i5 = (_g14 - 1);
HXDLIN( 289)															{
HXLINE( 289)																 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 289)																 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 289)																{
HXLINE( 289)																	int _g16 = 0;
HXDLIN( 289)																	int _g17 = i5;
HXDLIN( 289)																	while((_g16 < _g17)){
HXLINE( 289)																		_g16 = (_g16 + 1);
HXDLIN( 289)																		int i6 = (_g16 - 1);
HXLINE( 345)																		prev = l;
HXLINE( 346)																		l = l->next;
            																	}
            																}
HXLINE( 289)																if (::hx::IsNull( prev )) {
HXLINE( 289)																	b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 289)																	l = null();
            																}
            																else {
HXLINE( 289)																	prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 289)																	l = null();
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN( 289)											undoImage1 = b2;
            										}
            										break;
            									}
HXDLIN( 289)									this2->image = undoImage1;
HXDLIN( 289)									this2->width = width;
HXDLIN( 289)									this2->height = height;
HXDLIN( 289)									this2->imageType = ( (int)(imageType) );
HXDLIN( 289)									undoImage = this2;
HXDLIN( 289)									{
HXLINE( 289)										int rectLeft = xIter3->start;
HXDLIN( 289)										int rectTop = yIter3->start;
HXDLIN( 289)										int rectRight = xIter3->max;
HXDLIN( 289)										bool forceClear = false;
HXDLIN( 289)										{
HXLINE( 289)											int _g18 = rectTop;
HXDLIN( 289)											int _g19 = yIter3->max;
HXDLIN( 289)											while((_g18 < _g19)){
HXLINE( 289)												_g18 = (_g18 + 1);
HXDLIN( 289)												int dy = (_g18 - 1);
HXDLIN( 289)												{
HXLINE( 289)													int _g20 = rectLeft;
HXDLIN( 289)													int _g21 = rectRight;
HXDLIN( 289)													while((_g20 < _g21)){
HXLINE( 289)														_g20 = (_g20 + 1);
HXDLIN( 289)														int dx = (_g20 - 1);
HXDLIN( 289)														::Dynamic this4 = this1->image;
HXDLIN( 289)														int index;
HXDLIN( 289)														if (this1->useVirtualPos) {
HXLINE( 289)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            														}
            														else {
HXLINE( 289)															index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            														}
HXDLIN( 289)														int c = ::iterMagic::Iimg_obj::get(this4,index);
HXDLIN( 289)														int col;
HXDLIN( 289)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)															col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 289)															col = c;
            														}
HXDLIN( 289)														bool _hx_tmp;
HXDLIN( 289)														if (this1->useMask) {
HXLINE( 289)															_hx_tmp = ::hx::IsNotNull( this1->mask );
            														}
            														else {
HXLINE( 289)															_hx_tmp = false;
            														}
HXDLIN( 289)														if (_hx_tmp) {
HXLINE( 289)															 ::pi_xy::ImageStruct this5 = this1->mask;
HXDLIN( 289)															::Dynamic this6 = this5->image;
HXDLIN( 289)															int index1;
HXDLIN( 289)															if (this5->useVirtualPos) {
HXLINE( 289)																index1 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx) - this5->virtualX));
            															}
            															else {
HXLINE( 289)																index1 = ::Std_obj::_hx_int(( (Float)(((dy * this5->width) + dx)) ));
            															}
HXDLIN( 289)															int c1 = ::iterMagic::Iimg_obj::get(this6,index1);
HXDLIN( 289)															int v1;
HXDLIN( 289)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)																v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            															}
            															else {
HXLINE( 289)																v1 = c1;
            															}
HXDLIN( 289)															int maskPixel = v1;
HXDLIN( 289)															int this7 = col;
HXDLIN( 289)															if ((maskPixel == 0)) {
HXLINE( 289)																col = this7;
            															}
            															else {
HXLINE( 289)																Float m0;
HXDLIN( 289)																int this8 = ((maskPixel >> 24) & 255);
HXDLIN( 289)																if ((this8 == 0)) {
HXLINE( 289)																	m0 = ((Float)0.);
            																}
            																else {
HXLINE( 289)																	m0 = (( (Float)(this8) ) / ( (Float)(255) ));
            																}
HXDLIN( 289)																Float m1;
HXDLIN( 289)																int this9 = ((maskPixel >> 16) & 255);
HXDLIN( 289)																if ((this9 == 0)) {
HXLINE( 289)																	m1 = ((Float)0.);
            																}
            																else {
HXLINE( 289)																	m1 = (( (Float)(this9) ) / ( (Float)(255) ));
            																}
HXDLIN( 289)																Float m2;
HXDLIN( 289)																int this10 = ((maskPixel >> 8) & 255);
HXDLIN( 289)																if ((this10 == 0)) {
HXLINE( 289)																	m2 = ((Float)0.);
            																}
            																else {
HXLINE( 289)																	m2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																}
HXDLIN( 289)																Float m3;
HXDLIN( 289)																int this11 = (maskPixel & 255);
HXDLIN( 289)																if ((this11 == 0)) {
HXLINE( 289)																	m3 = ((Float)0.);
            																}
            																else {
HXLINE( 289)																	m3 = (( (Float)(this11) ) / ( (Float)(255) ));
            																}
HXDLIN( 289)																int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this7 >> 24) & 255)) )));
HXDLIN( 289)																int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this7 >> 16) & 255)) )));
HXDLIN( 289)																int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this7 >> 8) & 255)) )));
HXDLIN( 289)																int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this7 & 255)) )));
HXDLIN( 289)																col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN( 289)														if ((col != 0)) {
HXLINE( 289)															int x1 = (dx - rectLeft);
HXDLIN( 289)															int y1 = (dy - rectTop);
HXDLIN( 289)															int c2 = col;
HXDLIN( 289)															bool _hx_tmp1;
HXDLIN( 289)															if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 289)																_hx_tmp1 = undoImage->transparent;
            															}
            															else {
HXLINE( 289)																_hx_tmp1 = false;
            															}
HXDLIN( 289)															if (_hx_tmp1) {
HXLINE( 289)																int location;
HXDLIN( 289)																if (undoImage->useVirtualPos) {
HXLINE( 289)																	location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            																}
            																else {
HXLINE( 289)																	location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            																}
HXDLIN( 289)																int this12 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 289)																int this13;
HXDLIN( 289)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)																	this13 = ((((((this12 >> 24) & 255) << 24) | ((this12 & 255) << 16)) | (((this12 >> 8) & 255) << 8)) | ((this12 >> 16) & 255));
            																}
            																else {
HXLINE( 289)																	this13 = this12;
            																}
HXDLIN( 289)																Float a1;
HXDLIN( 289)																int this14 = ((this13 >> 24) & 255);
HXDLIN( 289)																if ((this14 == 0)) {
HXLINE( 289)																	a1 = ((Float)0.);
            																}
            																else {
HXLINE( 289)																	a1 = (( (Float)(this14) ) / ( (Float)(255) ));
            																}
HXDLIN( 289)																Float r1;
HXDLIN( 289)																int this15 = ((this13 >> 16) & 255);
HXDLIN( 289)																if ((this15 == 0)) {
HXLINE( 289)																	r1 = ((Float)0.);
            																}
            																else {
HXLINE( 289)																	r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            																}
HXDLIN( 289)																Float g1;
HXDLIN( 289)																int this16 = ((this13 >> 8) & 255);
HXDLIN( 289)																if ((this16 == 0)) {
HXLINE( 289)																	g1 = ((Float)0.);
            																}
            																else {
HXLINE( 289)																	g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            																}
HXDLIN( 289)																Float b11;
HXDLIN( 289)																int this17 = (this13 & 255);
HXDLIN( 289)																if ((this17 == 0)) {
HXLINE( 289)																	b11 = ((Float)0.);
            																}
            																else {
HXLINE( 289)																	b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            																}
HXDLIN( 289)																Float a2;
HXDLIN( 289)																int this18 = ((col >> 24) & 255);
HXDLIN( 289)																if ((this18 == 0)) {
HXLINE( 289)																	a2 = ((Float)0.);
            																}
            																else {
HXLINE( 289)																	a2 = (( (Float)(this18) ) / ( (Float)(255) ));
            																}
HXDLIN( 289)																Float r2;
HXDLIN( 289)																int this19 = ((col >> 16) & 255);
HXDLIN( 289)																if ((this19 == 0)) {
HXLINE( 289)																	r2 = ((Float)0.);
            																}
            																else {
HXLINE( 289)																	r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            																}
HXDLIN( 289)																Float g2;
HXDLIN( 289)																int this20 = ((col >> 8) & 255);
HXDLIN( 289)																if ((this20 == 0)) {
HXLINE( 289)																	g2 = ((Float)0.);
            																}
            																else {
HXLINE( 289)																	g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            																}
HXDLIN( 289)																Float b21;
HXDLIN( 289)																int this21 = (col & 255);
HXDLIN( 289)																if ((this21 == 0)) {
HXLINE( 289)																	b21 = ((Float)0.);
            																}
            																else {
HXLINE( 289)																	b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            																}
HXDLIN( 289)																Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 289)																int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 289)																int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 289)																int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 289)																int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 289)																int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 289)																{
HXLINE( 289)																	int _hx_tmp2;
HXDLIN( 289)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)																		_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																	}
            																	else {
HXLINE( 289)																		_hx_tmp2 = blended;
            																	}
HXDLIN( 289)																	::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            																}
            															}
            															else {
HXLINE( 289)																::Dynamic this22 = undoImage->image;
HXDLIN( 289)																int index2;
HXDLIN( 289)																if (undoImage->useVirtualPos) {
HXLINE( 289)																	index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            																}
            																else {
HXLINE( 289)																	index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            																}
HXDLIN( 289)																int _hx_tmp3;
HXDLIN( 289)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)																	_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            																}
            																else {
HXLINE( 289)																	_hx_tmp3 = c2;
            																}
HXDLIN( 289)																::iterMagic::Iimg_obj::set(this22,index2,_hx_tmp3);
            															}
            														}
            														else {
HXLINE( 289)															if (forceClear) {
HXLINE( 289)																::Dynamic this23 = undoImage->image;
HXDLIN( 289)																int x2 = (dx - rectLeft);
HXDLIN( 289)																int y2 = (dy - rectTop);
HXDLIN( 289)																int index3;
HXDLIN( 289)																if (undoImage->useVirtualPos) {
HXLINE( 289)																	index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            																}
            																else {
HXLINE( 289)																	index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            																}
HXDLIN( 289)																::iterMagic::Iimg_obj::set(this23,index3,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 289)								bool found = false;
HXDLIN( 289)								{
HXLINE( 289)									int _g_min = xIter3->start;
HXDLIN( 289)									int _g_max = xIter3->max;
HXDLIN( 289)									while((_g_min < _g_max)){
HXLINE( 289)										_g_min = (_g_min + 1);
HXDLIN( 289)										int px = (_g_min - 1);
HXDLIN( 289)										Float pcx = (( (Float)(px) ) - nextX);
HXLINE( 619)										found = false;
HXLINE( 289)										{
HXLINE( 289)											int _g_min1 = yIter3->start;
HXDLIN( 289)											int _g_max1 = yIter3->max;
HXDLIN( 289)											while((_g_min1 < _g_max1)){
HXLINE( 289)												_g_min1 = (_g_min1 + 1);
HXDLIN( 289)												int py = (_g_min1 - 1);
HXDLIN( 289)												Float pcy = (( (Float)(py) ) - nextY);
HXDLIN( 289)												Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 289)												Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 289)												Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 289)												Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 289)												Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 289)												bool _hx_tmp4;
HXDLIN( 289)												bool _hx_tmp5;
HXDLIN( 289)												if ((ratioA >= 0)) {
HXLINE( 289)													_hx_tmp5 = (ratioB >= 0);
            												}
            												else {
HXLINE( 289)													_hx_tmp5 = false;
            												}
HXDLIN( 289)												if (_hx_tmp5) {
HXLINE( 289)													_hx_tmp4 = (ratioC >= 0);
            												}
            												else {
HXLINE( 289)													_hx_tmp4 = false;
            												}
HXDLIN( 289)												if (_hx_tmp4) {
HXLINE( 289)													int i7 = ::Std_obj::_hx_int((( (Float)(aA) ) * (softC * ratioB)));
HXDLIN( 289)													if ((i7 > 255)) {
HXLINE(  24)														i7 = 255;
            													}
HXLINE( 289)													if ((i7 < 0)) {
HXLINE(  25)														i7 = 0;
            													}
HXLINE( 289)													int a5 = i7;
HXDLIN( 289)													int i8 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 289)													if ((i8 > 255)) {
HXLINE(  24)														i8 = 255;
            													}
HXLINE( 289)													if ((i8 < 0)) {
HXLINE(  25)														i8 = 0;
            													}
HXLINE( 289)													int r3 = i8;
HXDLIN( 289)													int i9 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 289)													if ((i9 > 255)) {
HXLINE(  24)														i9 = 255;
            													}
HXLINE( 289)													if ((i9 < 0)) {
HXLINE(  25)														i9 = 0;
            													}
HXLINE( 289)													int g3 = i9;
HXDLIN( 289)													int i10 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 289)													if ((i10 > 255)) {
HXLINE(  24)														i10 = 255;
            													}
HXLINE( 289)													if ((i10 < 0)) {
HXLINE(  25)														i10 = 0;
            													}
HXLINE( 289)													int b4 = i10;
HXDLIN( 289)													{
HXLINE( 289)														int location1;
HXDLIN( 289)														if (this1->useVirtualPos) {
HXLINE( 289)															location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this1->virtualY) * ( (Float)(this1->width) )) + px) - this1->virtualX));
            														}
            														else {
HXLINE( 289)															location1 = ::Std_obj::_hx_int(( (Float)(((py * this1->width) + px)) ));
            														}
HXDLIN( 289)														bool _hx_tmp6;
HXDLIN( 289)														if (this1->transparent) {
HXLINE( 289)															_hx_tmp6 = (a5 < 254);
            														}
            														else {
HXLINE( 289)															_hx_tmp6 = false;
            														}
HXDLIN( 289)														if (_hx_tmp6) {
HXLINE( 289)															int this24 = ::iterMagic::Iimg_obj::get(this1->image,location1);
HXDLIN( 289)															int old;
HXDLIN( 289)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)																old = ((((((this24 >> 24) & 255) << 24) | ((this24 & 255) << 16)) | (((this24 >> 8) & 255) << 8)) | ((this24 >> 16) & 255));
            															}
            															else {
HXLINE( 289)																old = this24;
            															}
HXDLIN( 289)															int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 289)															Float a11;
HXDLIN( 289)															int this25 = ((old >> 24) & 255);
HXDLIN( 289)															if ((this25 == 0)) {
HXLINE( 289)																a11 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																a11 = (( (Float)(this25) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float r11;
HXDLIN( 289)															int this26 = ((old >> 16) & 255);
HXDLIN( 289)															if ((this26 == 0)) {
HXLINE( 289)																r11 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float g11;
HXDLIN( 289)															int this27 = ((old >> 8) & 255);
HXDLIN( 289)															if ((this27 == 0)) {
HXLINE( 289)																g11 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float b12;
HXDLIN( 289)															int this28 = (old & 255);
HXDLIN( 289)															if ((this28 == 0)) {
HXLINE( 289)																b12 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float a21;
HXDLIN( 289)															int this29 = ((rhs >> 24) & 255);
HXDLIN( 289)															if ((this29 == 0)) {
HXLINE( 289)																a21 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float r21;
HXDLIN( 289)															int this30 = ((rhs >> 16) & 255);
HXDLIN( 289)															if ((this30 == 0)) {
HXLINE( 289)																r21 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float g21;
HXDLIN( 289)															int this31 = ((rhs >> 8) & 255);
HXDLIN( 289)															if ((this31 == 0)) {
HXLINE( 289)																g21 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float b22;
HXDLIN( 289)															int this32 = (rhs & 255);
HXDLIN( 289)															if ((this32 == 0)) {
HXLINE( 289)																b22 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN( 289)															int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 289)															int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 289)															int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 289)															int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 289)															int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 289)															{
HXLINE( 289)																int _hx_tmp7;
HXDLIN( 289)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)																	_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            																}
            																else {
HXLINE( 289)																	_hx_tmp7 = blended1;
            																}
HXDLIN( 289)																::iterMagic::Iimg_obj::set(this1->image,location1,_hx_tmp7);
            															}
            														}
            														else {
HXLINE( 289)															int value;
HXDLIN( 289)															if (this1->isLittle) {
HXLINE( 289)																value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            															}
            															else {
HXLINE( 289)																value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            															}
HXDLIN( 289)															::iterMagic::Iimg_obj::set(this1->image,location1,value);
            														}
            													}
HXLINE( 633)													found = true;
            												}
            												else {
HXLINE( 289)													if (found) {
HXLINE( 289)														goto _hx_goto_628;
            													}
            												}
            											}
            											_hx_goto_628:;
            										}
            									}
            								}
HXDLIN( 289)								if ((hasHit == false)) {
HXLINE( 289)									 ::pi_xy::algo::HitTri v2 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,lastX,lastY,nextX,nextY,true);
HXDLIN( 289)									if (hasUndo) {
HXLINE( 289)										v2->undoImage = undoImage;
HXDLIN( 289)										v2->undoX = xIter3->start;
HXDLIN( 289)										v2->undoY = yIter3->start;
            									}
            								}
            							}
HXLINE( 110)							lastX = nextX;
HXLINE( 111)							lastY = nextY;
            						}
            					}
            				}
            				else {
HXLINE( 289)					int _g22 = 0;
HXDLIN( 289)					int _g23 = (sides1 + 1);
HXDLIN( 289)					while((_g22 < _g23)){
HXLINE( 289)						_g22 = (_g22 + 1);
HXDLIN( 289)						int i11 = (_g22 - 1);
HXDLIN( 289)						Float nextX1 = (cx + (rx * ::Math_obj::cos((((( (Float)(i11) ) * theta) + omega) + ((Float)0.01)))));
HXDLIN( 289)						Float nextY1 = (cy + (ry * ::Math_obj::sin((((( (Float)(i11) ) * theta) + omega) + ((Float)0.01)))));
HXDLIN( 289)						{
HXLINE( 289)							bool hasHit1 = false;
HXDLIN( 289)							bool hasUndo1 = false;
HXDLIN( 289)							int aA1 = ((color >> 24) & 255);
HXDLIN( 289)							int rA1 = ((color >> 16) & 255);
HXDLIN( 289)							int gA1 = ((color >> 8) & 255);
HXDLIN( 289)							int bA1 = (color & 255);
HXDLIN( 289)							Float bcx1 = (lastX - nextX1);
HXDLIN( 289)							Float bcy1 = (lastY - nextY1);
HXDLIN( 289)							Float acx1 = (cx - nextX1);
HXDLIN( 289)							Float acy1 = (cy - nextY1);
HXDLIN( 289)							Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 289)							Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 289)							Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 289)							Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 289)							 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 289)							if ((cx > lastX)) {
HXLINE( 289)								if ((cx > nextX1)) {
HXLINE( 289)									int min4;
HXDLIN( 289)									if ((lastX > nextX1)) {
HXLINE( 289)										min4 = ::Math_obj::floor(nextX1);
            									}
            									else {
HXLINE( 289)										min4 = ::Math_obj::floor(lastX);
            									}
HXDLIN( 289)									int ii_min8 = min4;
HXDLIN( 289)									int ii_max8 = ::Math_obj::ceil(cx);
HXDLIN( 289)									xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            								}
            								else {
HXLINE( 289)									int ii_min9 = ::Math_obj::floor(lastX);
HXDLIN( 289)									int ii_max9 = ::Math_obj::ceil(nextX1);
HXDLIN( 289)									xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            								}
            							}
            							else {
HXLINE( 289)								if ((lastX > nextX1)) {
HXLINE( 289)									int min5;
HXDLIN( 289)									if ((cx > nextX1)) {
HXLINE( 289)										min5 = ::Math_obj::floor(nextX1);
            									}
            									else {
HXLINE( 289)										min5 = ::Math_obj::ceil(cx);
            									}
HXDLIN( 289)									int ii_min10 = min5;
HXDLIN( 289)									int ii_max10 = ::Math_obj::ceil(lastX);
HXDLIN( 289)									xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            								}
            								else {
HXLINE( 289)									int ii_min11 = ::Math_obj::floor(cx);
HXDLIN( 289)									int ii_max11 = ::Math_obj::ceil(nextX1);
HXDLIN( 289)									xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            								}
            							}
HXDLIN( 289)							 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 289)							if ((cy > lastY)) {
HXLINE( 289)								if ((cy > nextY1)) {
HXLINE( 289)									int min6;
HXDLIN( 289)									if ((lastY > nextY1)) {
HXLINE( 289)										min6 = ::Math_obj::floor(nextY1);
            									}
            									else {
HXLINE( 289)										min6 = ::Math_obj::floor(lastY);
            									}
HXDLIN( 289)									int ii_min12 = min6;
HXDLIN( 289)									int ii_max12 = ::Math_obj::ceil(cy);
HXDLIN( 289)									yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            								}
            								else {
HXLINE( 289)									int ii_min13 = ::Math_obj::floor(lastY);
HXDLIN( 289)									int ii_max13 = ::Math_obj::ceil(nextY1);
HXDLIN( 289)									yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            								}
            							}
            							else {
HXLINE( 289)								if ((lastY > nextY1)) {
HXLINE( 289)									int min7;
HXDLIN( 289)									if ((cy > nextY1)) {
HXLINE( 289)										min7 = ::Math_obj::floor(nextY1);
            									}
            									else {
HXLINE( 289)										min7 = ::Math_obj::ceil(cy);
            									}
HXDLIN( 289)									int ii_min14 = min7;
HXDLIN( 289)									int ii_max14 = ::Math_obj::ceil(lastY);
HXDLIN( 289)									yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            								}
            								else {
HXLINE( 289)									int ii_min15 = ::Math_obj::floor(cy);
HXDLIN( 289)									int ii_max15 = ::Math_obj::ceil(nextY1);
HXDLIN( 289)									yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            								}
            							}
HXDLIN( 289)							 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 289)							if (hasUndo1) {
HXLINE( 289)								int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 289)								int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 289)								 ::Dynamic imageType1 = null();
HXDLIN( 289)								 ::pi_xy::ImageStruct this33 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 289)								if (::hx::IsNull( imageType1 )) {
HXLINE(  54)									imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            								}
HXLINE( 289)								::Dynamic undoImage4;
HXDLIN( 289)								switch((int)(( (int)(imageType1) ))){
            									case (int)0: {
HXLINE( 289)										 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 289)										 ::iterMagic::BytesImg b6 = byt1;
HXDLIN( 289)										{
HXLINE( 289)											b6->width = width1;
HXDLIN( 289)											b6->height = height1;
HXDLIN( 289)											b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 289)											b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 289)											{
HXLINE( 289)												int len2 = b6->length;
HXDLIN( 289)												int w1 = 0;
HXDLIN( 289)												{
HXLINE( 289)													int _g24 = 0;
HXDLIN( 289)													int _g25 = b6->height;
HXDLIN( 289)													while((_g24 < _g25)){
HXLINE( 289)														_g24 = (_g24 + 1);
HXDLIN( 289)														int y3 = (_g24 - 1);
HXDLIN( 289)														{
HXLINE( 289)															int _g26 = 0;
HXDLIN( 289)															int _g27 = b6->width;
HXDLIN( 289)															while((_g26 < _g27)){
HXLINE( 289)																_g26 = (_g26 + 1);
HXDLIN( 289)																int x3 = (_g26 - 1);
HXDLIN( 289)																{
HXLINE( 289)																	w1 = (w1 + 1);
HXDLIN( 289)																	b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN( 289)																{
HXLINE( 289)																	w1 = (w1 + 1);
HXDLIN( 289)																	b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN( 289)																{
HXLINE( 289)																	w1 = (w1 + 1);
HXDLIN( 289)																	b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN( 289)																{
HXLINE( 289)																	w1 = (w1 + 1);
HXDLIN( 289)																	b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN( 289)										undoImage4 = b6;
            									}
            									break;
            									case (int)1: {
HXLINE( 289)										 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 289)										 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN( 289)										{
HXLINE( 289)											a7->width = width1;
HXDLIN( 289)											a7->height = height1;
HXDLIN( 289)											a7->data = ::Array_obj< int >::__new(0);
HXDLIN( 289)											a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 289)											{
HXLINE( 289)												int _g28 = 0;
HXDLIN( 289)												int _g29 = a7->length;
HXDLIN( 289)												while((_g28 < _g29)){
HXLINE( 289)													_g28 = (_g28 + 1);
HXDLIN( 289)													int i12 = (_g28 - 1);
HXDLIN( 289)													a7->data[i12] = 0;
            												}
            											}
            										}
HXDLIN( 289)										undoImage4 = a7;
            									}
            									break;
            									case (int)2: {
HXLINE( 289)										 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 289)										 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN( 289)										{
HXLINE( 289)											b7->width = width1;
HXDLIN( 289)											b7->height = height1;
HXDLIN( 289)											b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 289)											int size1 = (b7->length * 4);
HXDLIN( 289)											b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 289)											{
HXLINE( 289)												int _g30 = 0;
HXDLIN( 289)												int _g31 = b7->length;
HXDLIN( 289)												while((_g30 < _g31)){
HXLINE( 289)													_g30 = (_g30 + 1);
HXDLIN( 289)													int i13 = (_g30 - 1);
HXDLIN( 289)													{
HXLINE( 289)														 ::haxe::io::ArrayBufferViewImpl this34 = b7->data;
HXDLIN( 289)														bool undoImage5;
HXDLIN( 289)														if ((i13 >= 0)) {
HXLINE( 289)															undoImage5 = (i13 < (this34->byteLength >> 2));
            														}
            														else {
HXLINE( 289)															undoImage5 = false;
            														}
HXDLIN( 289)														if (undoImage5) {
HXLINE( 289)															 ::haxe::io::Bytes _this1 = this34->bytes;
HXDLIN( 289)															int pos1 = ((i13 << 2) + this34->byteOffset);
HXDLIN( 289)															_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 289)															_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 289)															_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 289)															_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
HXDLIN( 289)										undoImage4 = b7;
            									}
            									break;
            									case (int)3: {
HXLINE( 289)										 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 289)										 ::iterMagic::VecIntImg v3 = vec1;
HXDLIN( 289)										{
HXLINE( 289)											v3->width = width1;
HXDLIN( 289)											v3->height = height1;
HXDLIN( 289)											v3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 289)											v3->data = ::Array_obj< int >::__new(v3->length);
HXDLIN( 289)											{
HXLINE( 289)												int _g32 = 0;
HXDLIN( 289)												int _g33 = v3->length;
HXDLIN( 289)												while((_g32 < _g33)){
HXLINE( 289)													_g32 = (_g32 + 1);
HXDLIN( 289)													int i14 = (_g32 - 1);
HXDLIN( 289)													v3->data->__unsafe_set(i14,0);
            												}
            											}
            										}
HXDLIN( 289)										undoImage4 = v3;
            									}
            									break;
            									case (int)4: {
HXLINE( 289)										 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 289)										 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN( 289)										{
HXLINE( 289)											b8->width = width1;
HXDLIN( 289)											b8->height = height1;
HXDLIN( 289)											b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 289)											b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 289)											{
HXLINE( 289)												int len3 = b8->length;
HXDLIN( 289)												 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN( 289)												if (::hx::IsNull( d1->head )) {
HXLINE( 289)													int _g34 = 0;
HXDLIN( 289)													int _g35 = len3;
HXDLIN( 289)													while((_g34 < _g35)){
HXLINE( 289)														_g34 = (_g34 + 1);
HXDLIN( 289)														int i15 = (_g34 - 1);
HXDLIN( 289)														d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            													}
            												}
            												else {
HXLINE( 289)													int _g36 = 0;
HXDLIN( 289)													int _g37 = len3;
HXDLIN( 289)													while((_g36 < _g37)){
HXLINE( 289)														_g36 = (_g36 + 1);
HXDLIN( 289)														int i16 = (_g36 - 1);
HXDLIN( 289)														{
HXLINE( 289)															 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN( 289)															 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 289)															{
HXLINE( 289)																int _g38 = 0;
HXDLIN( 289)																int _g39 = i16;
HXDLIN( 289)																while((_g38 < _g39)){
HXLINE( 289)																	_g38 = (_g38 + 1);
HXDLIN( 289)																	int i17 = (_g38 - 1);
HXLINE( 345)																	prev1 = l1;
HXLINE( 346)																	l1 = l1->next;
            																}
            															}
HXLINE( 289)															if (::hx::IsNull( prev1 )) {
HXLINE( 289)																b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 289)																l1 = null();
            															}
            															else {
HXLINE( 289)																prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 289)																l1 = null();
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN( 289)										undoImage4 = b8;
            									}
            									break;
            								}
HXDLIN( 289)								this33->image = undoImage4;
HXDLIN( 289)								this33->width = width1;
HXDLIN( 289)								this33->height = height1;
HXDLIN( 289)								this33->imageType = ( (int)(imageType1) );
HXDLIN( 289)								undoImage3 = this33;
HXDLIN( 289)								{
HXLINE( 289)									int rectLeft1 = xIter31->start;
HXDLIN( 289)									int rectTop1 = yIter31->start;
HXDLIN( 289)									int rectRight1 = xIter31->max;
HXDLIN( 289)									bool forceClear1 = false;
HXDLIN( 289)									{
HXLINE( 289)										int _g40 = rectTop1;
HXDLIN( 289)										int _g41 = yIter31->max;
HXDLIN( 289)										while((_g40 < _g41)){
HXLINE( 289)											_g40 = (_g40 + 1);
HXDLIN( 289)											int dy1 = (_g40 - 1);
HXDLIN( 289)											{
HXLINE( 289)												int _g42 = rectLeft1;
HXDLIN( 289)												int _g43 = rectRight1;
HXDLIN( 289)												while((_g42 < _g43)){
HXLINE( 289)													_g42 = (_g42 + 1);
HXDLIN( 289)													int dx1 = (_g42 - 1);
HXDLIN( 289)													::Dynamic this35 = this1->image;
HXDLIN( 289)													int index4;
HXDLIN( 289)													if (this1->useVirtualPos) {
HXLINE( 289)														index4 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx1) - this1->virtualX));
            													}
            													else {
HXLINE( 289)														index4 = ::Std_obj::_hx_int(( (Float)(((dy1 * this1->width) + dx1)) ));
            													}
HXDLIN( 289)													int c3 = ::iterMagic::Iimg_obj::get(this35,index4);
HXDLIN( 289)													int col1;
HXDLIN( 289)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)														col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            													}
            													else {
HXLINE( 289)														col1 = c3;
            													}
HXDLIN( 289)													bool _hx_tmp8;
HXDLIN( 289)													if (this1->useMask) {
HXLINE( 289)														_hx_tmp8 = ::hx::IsNotNull( this1->mask );
            													}
            													else {
HXLINE( 289)														_hx_tmp8 = false;
            													}
HXDLIN( 289)													if (_hx_tmp8) {
HXLINE( 289)														 ::pi_xy::ImageStruct this36 = this1->mask;
HXDLIN( 289)														::Dynamic this37 = this36->image;
HXDLIN( 289)														int index5;
HXDLIN( 289)														if (this36->useVirtualPos) {
HXLINE( 289)															index5 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this36->virtualY) * ( (Float)(this36->width) )) + dx1) - this36->virtualX));
            														}
            														else {
HXLINE( 289)															index5 = ::Std_obj::_hx_int(( (Float)(((dy1 * this36->width) + dx1)) ));
            														}
HXDLIN( 289)														int c4 = ::iterMagic::Iimg_obj::get(this37,index5);
HXDLIN( 289)														int v4;
HXDLIN( 289)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)															v4 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            														}
            														else {
HXLINE( 289)															v4 = c4;
            														}
HXDLIN( 289)														int maskPixel1 = v4;
HXDLIN( 289)														int this38 = col1;
HXDLIN( 289)														if ((maskPixel1 == 0)) {
HXLINE( 289)															col1 = this38;
            														}
            														else {
HXLINE( 289)															Float m01;
HXDLIN( 289)															int this39 = ((maskPixel1 >> 24) & 255);
HXDLIN( 289)															if ((this39 == 0)) {
HXLINE( 289)																m01 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																m01 = (( (Float)(this39) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float m11;
HXDLIN( 289)															int this40 = ((maskPixel1 >> 16) & 255);
HXDLIN( 289)															if ((this40 == 0)) {
HXLINE( 289)																m11 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																m11 = (( (Float)(this40) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float m21;
HXDLIN( 289)															int this41 = ((maskPixel1 >> 8) & 255);
HXDLIN( 289)															if ((this41 == 0)) {
HXLINE( 289)																m21 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																m21 = (( (Float)(this41) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float m31;
HXDLIN( 289)															int this42 = (maskPixel1 & 255);
HXDLIN( 289)															if ((this42 == 0)) {
HXLINE( 289)																m31 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																m31 = (( (Float)(this42) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this38 >> 24) & 255)) )));
HXDLIN( 289)															int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this38 >> 16) & 255)) )));
HXDLIN( 289)															int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this38 >> 8) & 255)) )));
HXDLIN( 289)															int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this38 & 255)) )));
HXDLIN( 289)															col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN( 289)													if ((col1 != 0)) {
HXLINE( 289)														int x4 = (dx1 - rectLeft1);
HXDLIN( 289)														int y4 = (dy1 - rectTop1);
HXDLIN( 289)														int c5 = col1;
HXDLIN( 289)														bool _hx_tmp9;
HXDLIN( 289)														if ((((c5 >> 24) & 255) < 254)) {
HXLINE( 289)															_hx_tmp9 = undoImage3->transparent;
            														}
            														else {
HXLINE( 289)															_hx_tmp9 = false;
            														}
HXDLIN( 289)														if (_hx_tmp9) {
HXLINE( 289)															int location2;
HXDLIN( 289)															if (undoImage3->useVirtualPos) {
HXLINE( 289)																location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            															}
            															else {
HXLINE( 289)																location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            															}
HXDLIN( 289)															int this43 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 289)															int this44;
HXDLIN( 289)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)																this44 = ((((((this43 >> 24) & 255) << 24) | ((this43 & 255) << 16)) | (((this43 >> 8) & 255) << 8)) | ((this43 >> 16) & 255));
            															}
            															else {
HXLINE( 289)																this44 = this43;
            															}
HXDLIN( 289)															Float a12;
HXDLIN( 289)															int this45 = ((this44 >> 24) & 255);
HXDLIN( 289)															if ((this45 == 0)) {
HXLINE( 289)																a12 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																a12 = (( (Float)(this45) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float r12;
HXDLIN( 289)															int this46 = ((this44 >> 16) & 255);
HXDLIN( 289)															if ((this46 == 0)) {
HXLINE( 289)																r12 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																r12 = (( (Float)(this46) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float g12;
HXDLIN( 289)															int this47 = ((this44 >> 8) & 255);
HXDLIN( 289)															if ((this47 == 0)) {
HXLINE( 289)																g12 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																g12 = (( (Float)(this47) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float b13;
HXDLIN( 289)															int this48 = (this44 & 255);
HXDLIN( 289)															if ((this48 == 0)) {
HXLINE( 289)																b13 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																b13 = (( (Float)(this48) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float a22;
HXDLIN( 289)															int this49 = ((col1 >> 24) & 255);
HXDLIN( 289)															if ((this49 == 0)) {
HXLINE( 289)																a22 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																a22 = (( (Float)(this49) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float r22;
HXDLIN( 289)															int this50 = ((col1 >> 16) & 255);
HXDLIN( 289)															if ((this50 == 0)) {
HXLINE( 289)																r22 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																r22 = (( (Float)(this50) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float g22;
HXDLIN( 289)															int this51 = ((col1 >> 8) & 255);
HXDLIN( 289)															if ((this51 == 0)) {
HXLINE( 289)																g22 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																g22 = (( (Float)(this51) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float b23;
HXDLIN( 289)															int this52 = (col1 & 255);
HXDLIN( 289)															if ((this52 == 0)) {
HXLINE( 289)																b23 = ((Float)0.);
            															}
            															else {
HXLINE( 289)																b23 = (( (Float)(this52) ) / ( (Float)(255) ));
            															}
HXDLIN( 289)															Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN( 289)															int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 289)															int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 289)															int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 289)															int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 289)															int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN( 289)															{
HXLINE( 289)																int _hx_tmp10;
HXDLIN( 289)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)																	_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            																}
            																else {
HXLINE( 289)																	_hx_tmp10 = blended2;
            																}
HXDLIN( 289)																::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            															}
            														}
            														else {
HXLINE( 289)															::Dynamic this53 = undoImage3->image;
HXDLIN( 289)															int index6;
HXDLIN( 289)															if (undoImage3->useVirtualPos) {
HXLINE( 289)																index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            															}
            															else {
HXLINE( 289)																index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            															}
HXDLIN( 289)															int _hx_tmp11;
HXDLIN( 289)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)																_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            															}
            															else {
HXLINE( 289)																_hx_tmp11 = c5;
            															}
HXDLIN( 289)															::iterMagic::Iimg_obj::set(this53,index6,_hx_tmp11);
            														}
            													}
            													else {
HXLINE( 289)														if (forceClear1) {
HXLINE( 289)															::Dynamic this54 = undoImage3->image;
HXDLIN( 289)															int x5 = (dx1 - rectLeft1);
HXDLIN( 289)															int y5 = (dy1 - rectTop1);
HXDLIN( 289)															int index7;
HXDLIN( 289)															if (undoImage3->useVirtualPos) {
HXLINE( 289)																index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            															}
            															else {
HXLINE( 289)																index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            															}
HXDLIN( 289)															::iterMagic::Iimg_obj::set(this54,index7,0);
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 289)							bool found1 = false;
HXDLIN( 289)							{
HXLINE( 289)								int _g_min2 = xIter31->start;
HXDLIN( 289)								int _g_max2 = xIter31->max;
HXDLIN( 289)								while((_g_min2 < _g_max2)){
HXLINE( 289)									_g_min2 = (_g_min2 + 1);
HXDLIN( 289)									int px1 = (_g_min2 - 1);
HXDLIN( 289)									Float pcx1 = (( (Float)(px1) ) - nextX1);
HXLINE( 619)									found1 = false;
HXLINE( 289)									{
HXLINE( 289)										int _g_min3 = yIter31->start;
HXDLIN( 289)										int _g_max3 = yIter31->max;
HXDLIN( 289)										while((_g_min3 < _g_max3)){
HXLINE( 289)											_g_min3 = (_g_min3 + 1);
HXDLIN( 289)											int py1 = (_g_min3 - 1);
HXDLIN( 289)											Float pcy1 = (( (Float)(py1) ) - nextY1);
HXDLIN( 289)											Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 289)											Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 289)											Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 289)											Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 289)											Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 289)											bool _hx_tmp12;
HXDLIN( 289)											bool _hx_tmp13;
HXDLIN( 289)											if ((ratioA1 >= 0)) {
HXLINE( 289)												_hx_tmp13 = (ratioB1 >= 0);
            											}
            											else {
HXLINE( 289)												_hx_tmp13 = false;
            											}
HXDLIN( 289)											if (_hx_tmp13) {
HXLINE( 289)												_hx_tmp12 = (ratioC1 >= 0);
            											}
            											else {
HXLINE( 289)												_hx_tmp12 = false;
            											}
HXDLIN( 289)											if (_hx_tmp12) {
HXLINE( 289)												int i18 = ::Std_obj::_hx_int((( (Float)(aA1) ) * (softC * ratioB1)));
HXDLIN( 289)												if ((i18 > 255)) {
HXLINE(  24)													i18 = 255;
            												}
HXLINE( 289)												if ((i18 < 0)) {
HXLINE(  25)													i18 = 0;
            												}
HXLINE( 289)												int a9 = i18;
HXDLIN( 289)												int i19 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN( 289)												if ((i19 > 255)) {
HXLINE(  24)													i19 = 255;
            												}
HXLINE( 289)												if ((i19 < 0)) {
HXLINE(  25)													i19 = 0;
            												}
HXLINE( 289)												int r6 = i19;
HXDLIN( 289)												int i20 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN( 289)												if ((i20 > 255)) {
HXLINE(  24)													i20 = 255;
            												}
HXLINE( 289)												if ((i20 < 0)) {
HXLINE(  25)													i20 = 0;
            												}
HXLINE( 289)												int g6 = i20;
HXDLIN( 289)												int i21 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN( 289)												if ((i21 > 255)) {
HXLINE(  24)													i21 = 255;
            												}
HXLINE( 289)												if ((i21 < 0)) {
HXLINE(  25)													i21 = 0;
            												}
HXLINE( 289)												int b10 = i21;
HXDLIN( 289)												{
HXLINE( 289)													int location3;
HXDLIN( 289)													if (this1->useVirtualPos) {
HXLINE( 289)														location3 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            													}
            													else {
HXLINE( 289)														location3 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            													}
HXDLIN( 289)													bool _hx_tmp14;
HXDLIN( 289)													if (this1->transparent) {
HXLINE( 289)														_hx_tmp14 = (a9 < 254);
            													}
            													else {
HXLINE( 289)														_hx_tmp14 = false;
            													}
HXDLIN( 289)													if (_hx_tmp14) {
HXLINE( 289)														int this55 = ::iterMagic::Iimg_obj::get(this1->image,location3);
HXDLIN( 289)														int old1;
HXDLIN( 289)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)															old1 = ((((((this55 >> 24) & 255) << 24) | ((this55 & 255) << 16)) | (((this55 >> 8) & 255) << 8)) | ((this55 >> 16) & 255));
            														}
            														else {
HXLINE( 289)															old1 = this55;
            														}
HXDLIN( 289)														int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 289)														Float a13;
HXDLIN( 289)														int this56 = ((old1 >> 24) & 255);
HXDLIN( 289)														if ((this56 == 0)) {
HXLINE( 289)															a13 = ((Float)0.);
            														}
            														else {
HXLINE( 289)															a13 = (( (Float)(this56) ) / ( (Float)(255) ));
            														}
HXDLIN( 289)														Float r13;
HXDLIN( 289)														int this57 = ((old1 >> 16) & 255);
HXDLIN( 289)														if ((this57 == 0)) {
HXLINE( 289)															r13 = ((Float)0.);
            														}
            														else {
HXLINE( 289)															r13 = (( (Float)(this57) ) / ( (Float)(255) ));
            														}
HXDLIN( 289)														Float g13;
HXDLIN( 289)														int this58 = ((old1 >> 8) & 255);
HXDLIN( 289)														if ((this58 == 0)) {
HXLINE( 289)															g13 = ((Float)0.);
            														}
            														else {
HXLINE( 289)															g13 = (( (Float)(this58) ) / ( (Float)(255) ));
            														}
HXDLIN( 289)														Float b14;
HXDLIN( 289)														int this59 = (old1 & 255);
HXDLIN( 289)														if ((this59 == 0)) {
HXLINE( 289)															b14 = ((Float)0.);
            														}
            														else {
HXLINE( 289)															b14 = (( (Float)(this59) ) / ( (Float)(255) ));
            														}
HXDLIN( 289)														Float a23;
HXDLIN( 289)														int this60 = ((rhs1 >> 24) & 255);
HXDLIN( 289)														if ((this60 == 0)) {
HXLINE( 289)															a23 = ((Float)0.);
            														}
            														else {
HXLINE( 289)															a23 = (( (Float)(this60) ) / ( (Float)(255) ));
            														}
HXDLIN( 289)														Float r23;
HXDLIN( 289)														int this61 = ((rhs1 >> 16) & 255);
HXDLIN( 289)														if ((this61 == 0)) {
HXLINE( 289)															r23 = ((Float)0.);
            														}
            														else {
HXLINE( 289)															r23 = (( (Float)(this61) ) / ( (Float)(255) ));
            														}
HXDLIN( 289)														Float g23;
HXDLIN( 289)														int this62 = ((rhs1 >> 8) & 255);
HXDLIN( 289)														if ((this62 == 0)) {
HXLINE( 289)															g23 = ((Float)0.);
            														}
            														else {
HXLINE( 289)															g23 = (( (Float)(this62) ) / ( (Float)(255) ));
            														}
HXDLIN( 289)														Float b24;
HXDLIN( 289)														int this63 = (rhs1 & 255);
HXDLIN( 289)														if ((this63 == 0)) {
HXLINE( 289)															b24 = ((Float)0.);
            														}
            														else {
HXLINE( 289)															b24 = (( (Float)(this63) ) / ( (Float)(255) ));
            														}
HXDLIN( 289)														Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN( 289)														int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 289)														int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 289)														int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 289)														int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 289)														int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN( 289)														{
HXLINE( 289)															int _hx_tmp15;
HXDLIN( 289)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 289)																_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            															}
            															else {
HXLINE( 289)																_hx_tmp15 = blended3;
            															}
HXDLIN( 289)															::iterMagic::Iimg_obj::set(this1->image,location3,_hx_tmp15);
            														}
            													}
            													else {
HXLINE( 289)														int value1;
HXDLIN( 289)														if (this1->isLittle) {
HXLINE( 289)															value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            														}
            														else {
HXLINE( 289)															value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            														}
HXDLIN( 289)														::iterMagic::Iimg_obj::set(this1->image,location3,value1);
            													}
            												}
HXLINE( 633)												found1 = true;
            											}
            											else {
HXLINE( 289)												if (found1) {
HXLINE( 289)													goto _hx_goto_641;
            												}
            											}
            										}
            										_hx_goto_641:;
            									}
            								}
            							}
HXDLIN( 289)							if ((hasHit1 == false)) {
HXLINE( 289)								 ::pi_xy::algo::HitTri v5 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,lastX,lastY,nextX1,nextY1,true);
HXDLIN( 289)								if (hasUndo1) {
HXLINE( 289)									v5->undoImage = undoImage3;
HXDLIN( 289)									v5->undoX = xIter31->start;
HXDLIN( 289)									v5->undoY = yIter31->start;
            								}
            							}
            						}
HXLINE( 119)						lastX = nextX1;
HXLINE( 120)						lastY = nextY1;
            					}
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(SoftShape_Impl__obj,ellipseTri,(void))

void SoftShape_Impl__obj::polyBuild( ::pi_xy::ImageStruct this1,Float cx,Float cy,Float rx,Float ry,int color, ::Dynamic __o_phi, ::Dynamic __o_sides,::hx::Null< Float >  __o_softC,::hx::Null< bool >  __o_cornerUp){
            		 ::Dynamic phi = __o_phi;
            		if (::hx::IsNull(__o_phi)) phi = ((Float)0.);
            		 ::Dynamic sides = __o_sides;
            		if (::hx::IsNull(__o_sides)) sides = 36;
            		Float softC = __o_softC.Default(((Float)10.));
            		bool cornerUp = __o_cornerUp.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_afea4fbe553791bf_305_polyBuild)
HXDLIN( 305)		 ::Dynamic phi1 = phi;
HXDLIN( 305)		 ::Dynamic sides1 = sides;
HXLINE( 310)		if (::hx::IsNull( sides1 )) {
HXLINE( 310)			sides1 = 36;
            		}
HXLINE( 309)		if (::hx::IsNull( phi1 )) {
HXLINE( 309)			phi1 = ((Float)0.);
            		}
HXLINE( 305)		Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides1) ));
HXDLIN( 305)		Float omega;
HXDLIN( 305)		if (cornerUp) {
HXDLIN( 305)			omega = ((Float)0.);
            		}
            		else {
HXDLIN( 305)			if ((::Std_obj::_hx_int((( (Float)(sides1) ) / ( (Float)(2) ))) == (( (Float)(sides1) ) / ( (Float)(2) )))) {
HXDLIN( 305)				omega = (::Math_obj::PI / ( (Float)(sides1) ));
            			}
            			else {
HXDLIN( 305)				Float v = ((( (Float)(sides1) ) / ( (Float)(2) )) - ((Float)0.5));
HXDLIN( 305)				if ((::Std_obj::_hx_int((v / ( (Float)(2) ))) == (v / ( (Float)(2) )))) {
HXDLIN( 305)					omega = (((((Float)0.5) * ::Math_obj::PI) / ( (Float)(sides1) )) - ::Math_obj::PI);
            				}
            				else {
HXDLIN( 305)					omega = ((((Float)0.5) * ::Math_obj::PI) / ( (Float)(sides1) ));
            				}
            			}
            		}
HXDLIN( 305)		Float lastX = ((Float)0.);
HXDLIN( 305)		Float lastY = ((Float)0.);
HXDLIN( 305)		if (::hx::IsNotEq( phi1,0 )) {
HXLINE(  95)			lastX = ((((rx * ::Math_obj::cos(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::cos(( (Float)(phi1) ))) - ((ry * ::Math_obj::sin(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::sin(( (Float)(phi1) )))) + cx);
HXLINE(  96)			lastY = ((((rx * ::Math_obj::cos(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::sin(( (Float)(phi1) ))) + ((ry * ::Math_obj::sin(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::cos(( (Float)(phi1) )))) + cy);
            		}
            		else {
HXLINE(  98)			lastX = (cx + (rx * ::Math_obj::cos(((( (Float)(sides1) ) * theta) + omega))));
HXLINE(  99)			lastY = (cy + (ry * ::Math_obj::sin(((( (Float)(sides1) ) * theta) + omega))));
            		}
HXLINE( 305)		if (::hx::IsNotEq( phi1,0 )) {
HXDLIN( 305)			Float cphi = ::Math_obj::cos(( (Float)(phi1) ));
HXDLIN( 305)			Float sphi = ::Math_obj::sin(( (Float)(phi1) ));
HXDLIN( 305)			{
HXDLIN( 305)				int _g = 0;
HXDLIN( 305)				int _g1 = (sides1 + 1);
HXDLIN( 305)				while((_g < _g1)){
HXDLIN( 305)					_g = (_g + 1);
HXDLIN( 305)					int i = (_g - 1);
HXDLIN( 305)					Float stheta = ::Math_obj::sin((((( (Float)(i) ) * theta) + omega) + ((Float)0.01)));
HXDLIN( 305)					Float ctheta = ::Math_obj::cos((((( (Float)(i) ) * theta) + omega) + ((Float)0.01)));
HXDLIN( 305)					Float nextX = ((((rx * ctheta) * cphi) - ((ry * stheta) * sphi)) + cx);
HXDLIN( 305)					Float nextY = ((((rx * ctheta) * sphi) + ((ry * stheta) * cphi)) + cy);
HXDLIN( 305)					{
HXDLIN( 305)						bool hasHit = false;
HXDLIN( 305)						bool hasUndo = false;
HXDLIN( 305)						int aA = ((color >> 24) & 255);
HXDLIN( 305)						int rA = ((color >> 16) & 255);
HXDLIN( 305)						int gA = ((color >> 8) & 255);
HXDLIN( 305)						int bA = (color & 255);
HXDLIN( 305)						Float bcx = (lastX - nextX);
HXDLIN( 305)						Float bcy = (lastY - nextY);
HXDLIN( 305)						Float acx = (cx - nextX);
HXDLIN( 305)						Float acy = (cy - nextY);
HXDLIN( 305)						Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 305)						Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 305)						Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 305)						Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 305)						 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 305)						if ((cx > lastX)) {
HXDLIN( 305)							if ((cx > nextX)) {
HXDLIN( 305)								int min;
HXDLIN( 305)								if ((lastX > nextX)) {
HXDLIN( 305)									min = ::Math_obj::floor(nextX);
            								}
            								else {
HXDLIN( 305)									min = ::Math_obj::floor(lastX);
            								}
HXDLIN( 305)								int ii_min = min;
HXDLIN( 305)								int ii_max = ::Math_obj::ceil(cx);
HXDLIN( 305)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            							}
            							else {
HXDLIN( 305)								int ii_min1 = ::Math_obj::floor(lastX);
HXDLIN( 305)								int ii_max1 = ::Math_obj::ceil(nextX);
HXDLIN( 305)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            							}
            						}
            						else {
HXDLIN( 305)							if ((lastX > nextX)) {
HXDLIN( 305)								int min1;
HXDLIN( 305)								if ((cx > nextX)) {
HXDLIN( 305)									min1 = ::Math_obj::floor(nextX);
            								}
            								else {
HXDLIN( 305)									min1 = ::Math_obj::ceil(cx);
            								}
HXDLIN( 305)								int ii_min2 = min1;
HXDLIN( 305)								int ii_max2 = ::Math_obj::ceil(lastX);
HXDLIN( 305)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            							}
            							else {
HXDLIN( 305)								int ii_min3 = ::Math_obj::floor(cx);
HXDLIN( 305)								int ii_max3 = ::Math_obj::ceil(nextX);
HXDLIN( 305)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            							}
            						}
HXDLIN( 305)						 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 305)						if ((cy > lastY)) {
HXDLIN( 305)							if ((cy > nextY)) {
HXDLIN( 305)								int min2;
HXDLIN( 305)								if ((lastY > nextY)) {
HXDLIN( 305)									min2 = ::Math_obj::floor(nextY);
            								}
            								else {
HXDLIN( 305)									min2 = ::Math_obj::floor(lastY);
            								}
HXDLIN( 305)								int ii_min4 = min2;
HXDLIN( 305)								int ii_max4 = ::Math_obj::ceil(cy);
HXDLIN( 305)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            							}
            							else {
HXDLIN( 305)								int ii_min5 = ::Math_obj::floor(lastY);
HXDLIN( 305)								int ii_max5 = ::Math_obj::ceil(nextY);
HXDLIN( 305)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            							}
            						}
            						else {
HXDLIN( 305)							if ((lastY > nextY)) {
HXDLIN( 305)								int min3;
HXDLIN( 305)								if ((cy > nextY)) {
HXDLIN( 305)									min3 = ::Math_obj::floor(nextY);
            								}
            								else {
HXDLIN( 305)									min3 = ::Math_obj::ceil(cy);
            								}
HXDLIN( 305)								int ii_min6 = min3;
HXDLIN( 305)								int ii_max6 = ::Math_obj::ceil(lastY);
HXDLIN( 305)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            							}
            							else {
HXDLIN( 305)								int ii_min7 = ::Math_obj::floor(cy);
HXDLIN( 305)								int ii_max7 = ::Math_obj::ceil(nextY);
HXDLIN( 305)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            							}
            						}
HXDLIN( 305)						 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 305)						if (hasUndo) {
HXDLIN( 305)							int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 305)							int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 305)							 ::Dynamic imageType = null();
HXDLIN( 305)							 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 305)							if (::hx::IsNull( imageType )) {
HXLINE(  54)								imageType = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE( 305)							::Dynamic undoImage1;
HXDLIN( 305)							switch((int)(( (int)(imageType) ))){
            								case (int)0: {
HXDLIN( 305)									 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 305)									 ::iterMagic::BytesImg b = byt;
HXDLIN( 305)									{
HXDLIN( 305)										b->width = width;
HXDLIN( 305)										b->height = height;
HXDLIN( 305)										b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 305)										b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 305)										{
HXDLIN( 305)											int len = b->length;
HXDLIN( 305)											int w = 0;
HXDLIN( 305)											{
HXDLIN( 305)												int _g2 = 0;
HXDLIN( 305)												int _g3 = b->height;
HXDLIN( 305)												while((_g2 < _g3)){
HXDLIN( 305)													_g2 = (_g2 + 1);
HXDLIN( 305)													int y = (_g2 - 1);
HXDLIN( 305)													{
HXDLIN( 305)														int _g4 = 0;
HXDLIN( 305)														int _g5 = b->width;
HXDLIN( 305)														while((_g4 < _g5)){
HXDLIN( 305)															_g4 = (_g4 + 1);
HXDLIN( 305)															int x = (_g4 - 1);
HXDLIN( 305)															{
HXDLIN( 305)																w = (w + 1);
HXDLIN( 305)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 305)															{
HXDLIN( 305)																w = (w + 1);
HXDLIN( 305)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 305)															{
HXDLIN( 305)																w = (w + 1);
HXDLIN( 305)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 305)															{
HXDLIN( 305)																w = (w + 1);
HXDLIN( 305)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 305)									undoImage1 = b;
            								}
            								break;
            								case (int)1: {
HXDLIN( 305)									 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 305)									 ::iterMagic::ArrIntImg a = arrI;
HXDLIN( 305)									{
HXDLIN( 305)										a->width = width;
HXDLIN( 305)										a->height = height;
HXDLIN( 305)										a->data = ::Array_obj< int >::__new(0);
HXDLIN( 305)										a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 305)										{
HXDLIN( 305)											int _g6 = 0;
HXDLIN( 305)											int _g7 = a->length;
HXDLIN( 305)											while((_g6 < _g7)){
HXDLIN( 305)												_g6 = (_g6 + 1);
HXDLIN( 305)												int i1 = (_g6 - 1);
HXDLIN( 305)												a->data[i1] = 0;
            											}
            										}
            									}
HXDLIN( 305)									undoImage1 = a;
            								}
            								break;
            								case (int)2: {
HXDLIN( 305)									 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 305)									 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 305)									{
HXDLIN( 305)										b1->width = width;
HXDLIN( 305)										b1->height = height;
HXDLIN( 305)										b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 305)										int size = (b1->length * 4);
HXDLIN( 305)										b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 305)										{
HXDLIN( 305)											int _g8 = 0;
HXDLIN( 305)											int _g9 = b1->length;
HXDLIN( 305)											while((_g8 < _g9)){
HXDLIN( 305)												_g8 = (_g8 + 1);
HXDLIN( 305)												int i2 = (_g8 - 1);
HXDLIN( 305)												{
HXDLIN( 305)													 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN( 305)													bool undoImage2;
HXDLIN( 305)													if ((i2 >= 0)) {
HXDLIN( 305)														undoImage2 = (i2 < (this3->byteLength >> 2));
            													}
            													else {
HXDLIN( 305)														undoImage2 = false;
            													}
HXDLIN( 305)													if (undoImage2) {
HXDLIN( 305)														 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 305)														int pos = ((i2 << 2) + this3->byteOffset);
HXDLIN( 305)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 305)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 305)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 305)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN( 305)									undoImage1 = b1;
            								}
            								break;
            								case (int)3: {
HXDLIN( 305)									 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 305)									 ::iterMagic::VecIntImg v1 = vec;
HXDLIN( 305)									{
HXDLIN( 305)										v1->width = width;
HXDLIN( 305)										v1->height = height;
HXDLIN( 305)										v1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 305)										v1->data = ::Array_obj< int >::__new(v1->length);
HXDLIN( 305)										{
HXDLIN( 305)											int _g10 = 0;
HXDLIN( 305)											int _g11 = v1->length;
HXDLIN( 305)											while((_g10 < _g11)){
HXDLIN( 305)												_g10 = (_g10 + 1);
HXDLIN( 305)												int i3 = (_g10 - 1);
HXDLIN( 305)												v1->data->__unsafe_set(i3,0);
            											}
            										}
            									}
HXDLIN( 305)									undoImage1 = v1;
            								}
            								break;
            								case (int)4: {
HXDLIN( 305)									 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 305)									 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 305)									{
HXDLIN( 305)										b2->width = width;
HXDLIN( 305)										b2->height = height;
HXDLIN( 305)										b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 305)										b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 305)										{
HXDLIN( 305)											int len1 = b2->length;
HXDLIN( 305)											 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 305)											if (::hx::IsNull( d->head )) {
HXDLIN( 305)												int _g12 = 0;
HXDLIN( 305)												int _g13 = len1;
HXDLIN( 305)												while((_g12 < _g13)){
HXDLIN( 305)													_g12 = (_g12 + 1);
HXDLIN( 305)													int i4 = (_g12 - 1);
HXDLIN( 305)													d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            												}
            											}
            											else {
HXDLIN( 305)												int _g14 = 0;
HXDLIN( 305)												int _g15 = len1;
HXDLIN( 305)												while((_g14 < _g15)){
HXDLIN( 305)													_g14 = (_g14 + 1);
HXDLIN( 305)													int i5 = (_g14 - 1);
HXDLIN( 305)													{
HXDLIN( 305)														 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 305)														 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 305)														{
HXDLIN( 305)															int _g16 = 0;
HXDLIN( 305)															int _g17 = i5;
HXDLIN( 305)															while((_g16 < _g17)){
HXDLIN( 305)																_g16 = (_g16 + 1);
HXDLIN( 305)																int i6 = (_g16 - 1);
HXLINE( 345)																prev = l;
HXLINE( 346)																l = l->next;
            															}
            														}
HXLINE( 305)														if (::hx::IsNull( prev )) {
HXDLIN( 305)															b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 305)															l = null();
            														}
            														else {
HXDLIN( 305)															prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 305)															l = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 305)									undoImage1 = b2;
            								}
            								break;
            							}
HXDLIN( 305)							this2->image = undoImage1;
HXDLIN( 305)							this2->width = width;
HXDLIN( 305)							this2->height = height;
HXDLIN( 305)							this2->imageType = ( (int)(imageType) );
HXDLIN( 305)							undoImage = this2;
HXDLIN( 305)							{
HXDLIN( 305)								int rectLeft = xIter3->start;
HXDLIN( 305)								int rectTop = yIter3->start;
HXDLIN( 305)								int rectRight = xIter3->max;
HXDLIN( 305)								bool forceClear = false;
HXDLIN( 305)								{
HXDLIN( 305)									int _g18 = rectTop;
HXDLIN( 305)									int _g19 = yIter3->max;
HXDLIN( 305)									while((_g18 < _g19)){
HXDLIN( 305)										_g18 = (_g18 + 1);
HXDLIN( 305)										int dy = (_g18 - 1);
HXDLIN( 305)										{
HXDLIN( 305)											int _g20 = rectLeft;
HXDLIN( 305)											int _g21 = rectRight;
HXDLIN( 305)											while((_g20 < _g21)){
HXDLIN( 305)												_g20 = (_g20 + 1);
HXDLIN( 305)												int dx = (_g20 - 1);
HXDLIN( 305)												::Dynamic this4 = this1->image;
HXDLIN( 305)												int index;
HXDLIN( 305)												if (this1->useVirtualPos) {
HXDLIN( 305)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXDLIN( 305)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN( 305)												int c = ::iterMagic::Iimg_obj::get(this4,index);
HXDLIN( 305)												int col;
HXDLIN( 305)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXDLIN( 305)													col = c;
            												}
HXDLIN( 305)												bool _hx_tmp;
HXDLIN( 305)												if (this1->useMask) {
HXDLIN( 305)													_hx_tmp = ::hx::IsNotNull( this1->mask );
            												}
            												else {
HXDLIN( 305)													_hx_tmp = false;
            												}
HXDLIN( 305)												if (_hx_tmp) {
HXDLIN( 305)													 ::pi_xy::ImageStruct this5 = this1->mask;
HXDLIN( 305)													::Dynamic this6 = this5->image;
HXDLIN( 305)													int index1;
HXDLIN( 305)													if (this5->useVirtualPos) {
HXDLIN( 305)														index1 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx) - this5->virtualX));
            													}
            													else {
HXDLIN( 305)														index1 = ::Std_obj::_hx_int(( (Float)(((dy * this5->width) + dx)) ));
            													}
HXDLIN( 305)													int c1 = ::iterMagic::Iimg_obj::get(this6,index1);
HXDLIN( 305)													int v2;
HXDLIN( 305)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)														v2 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            													}
            													else {
HXDLIN( 305)														v2 = c1;
            													}
HXDLIN( 305)													int maskPixel = v2;
HXDLIN( 305)													int this7 = col;
HXDLIN( 305)													if ((maskPixel == 0)) {
HXDLIN( 305)														col = this7;
            													}
            													else {
HXDLIN( 305)														Float m0;
HXDLIN( 305)														int this8 = ((maskPixel >> 24) & 255);
HXDLIN( 305)														if ((this8 == 0)) {
HXDLIN( 305)															m0 = ((Float)0.);
            														}
            														else {
HXDLIN( 305)															m0 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 305)														Float m1;
HXDLIN( 305)														int this9 = ((maskPixel >> 16) & 255);
HXDLIN( 305)														if ((this9 == 0)) {
HXDLIN( 305)															m1 = ((Float)0.);
            														}
            														else {
HXDLIN( 305)															m1 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 305)														Float m2;
HXDLIN( 305)														int this10 = ((maskPixel >> 8) & 255);
HXDLIN( 305)														if ((this10 == 0)) {
HXDLIN( 305)															m2 = ((Float)0.);
            														}
            														else {
HXDLIN( 305)															m2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 305)														Float m3;
HXDLIN( 305)														int this11 = (maskPixel & 255);
HXDLIN( 305)														if ((this11 == 0)) {
HXDLIN( 305)															m3 = ((Float)0.);
            														}
            														else {
HXDLIN( 305)															m3 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 305)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this7 >> 24) & 255)) )));
HXDLIN( 305)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this7 >> 16) & 255)) )));
HXDLIN( 305)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this7 >> 8) & 255)) )));
HXDLIN( 305)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this7 & 255)) )));
HXDLIN( 305)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 305)												if ((col != 0)) {
HXDLIN( 305)													int x1 = (dx - rectLeft);
HXDLIN( 305)													int y1 = (dy - rectTop);
HXDLIN( 305)													int c2 = col;
HXDLIN( 305)													bool _hx_tmp1;
HXDLIN( 305)													if ((((c2 >> 24) & 255) < 254)) {
HXDLIN( 305)														_hx_tmp1 = undoImage->transparent;
            													}
            													else {
HXDLIN( 305)														_hx_tmp1 = false;
            													}
HXDLIN( 305)													if (_hx_tmp1) {
HXDLIN( 305)														int location;
HXDLIN( 305)														if (undoImage->useVirtualPos) {
HXDLIN( 305)															location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            														}
            														else {
HXDLIN( 305)															location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            														}
HXDLIN( 305)														int this12 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 305)														int this13;
HXDLIN( 305)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)															this13 = ((((((this12 >> 24) & 255) << 24) | ((this12 & 255) << 16)) | (((this12 >> 8) & 255) << 8)) | ((this12 >> 16) & 255));
            														}
            														else {
HXDLIN( 305)															this13 = this12;
            														}
HXDLIN( 305)														Float a1;
HXDLIN( 305)														int this14 = ((this13 >> 24) & 255);
HXDLIN( 305)														if ((this14 == 0)) {
HXDLIN( 305)															a1 = ((Float)0.);
            														}
            														else {
HXDLIN( 305)															a1 = (( (Float)(this14) ) / ( (Float)(255) ));
            														}
HXDLIN( 305)														Float r1;
HXDLIN( 305)														int this15 = ((this13 >> 16) & 255);
HXDLIN( 305)														if ((this15 == 0)) {
HXDLIN( 305)															r1 = ((Float)0.);
            														}
            														else {
HXDLIN( 305)															r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            														}
HXDLIN( 305)														Float g1;
HXDLIN( 305)														int this16 = ((this13 >> 8) & 255);
HXDLIN( 305)														if ((this16 == 0)) {
HXDLIN( 305)															g1 = ((Float)0.);
            														}
            														else {
HXDLIN( 305)															g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            														}
HXDLIN( 305)														Float b11;
HXDLIN( 305)														int this17 = (this13 & 255);
HXDLIN( 305)														if ((this17 == 0)) {
HXDLIN( 305)															b11 = ((Float)0.);
            														}
            														else {
HXDLIN( 305)															b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            														}
HXDLIN( 305)														Float a2;
HXDLIN( 305)														int this18 = ((col >> 24) & 255);
HXDLIN( 305)														if ((this18 == 0)) {
HXDLIN( 305)															a2 = ((Float)0.);
            														}
            														else {
HXDLIN( 305)															a2 = (( (Float)(this18) ) / ( (Float)(255) ));
            														}
HXDLIN( 305)														Float r2;
HXDLIN( 305)														int this19 = ((col >> 16) & 255);
HXDLIN( 305)														if ((this19 == 0)) {
HXDLIN( 305)															r2 = ((Float)0.);
            														}
            														else {
HXDLIN( 305)															r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            														}
HXDLIN( 305)														Float g2;
HXDLIN( 305)														int this20 = ((col >> 8) & 255);
HXDLIN( 305)														if ((this20 == 0)) {
HXDLIN( 305)															g2 = ((Float)0.);
            														}
            														else {
HXDLIN( 305)															g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            														}
HXDLIN( 305)														Float b21;
HXDLIN( 305)														int this21 = (col & 255);
HXDLIN( 305)														if ((this21 == 0)) {
HXDLIN( 305)															b21 = ((Float)0.);
            														}
            														else {
HXDLIN( 305)															b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            														}
HXDLIN( 305)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 305)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 305)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 305)														int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 305)														int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 305)														int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 305)														{
HXDLIN( 305)															int _hx_tmp2;
HXDLIN( 305)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)																_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXDLIN( 305)																_hx_tmp2 = blended;
            															}
HXDLIN( 305)															::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            														}
            													}
            													else {
HXDLIN( 305)														::Dynamic this22 = undoImage->image;
HXDLIN( 305)														int index2;
HXDLIN( 305)														if (undoImage->useVirtualPos) {
HXDLIN( 305)															index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            														}
            														else {
HXDLIN( 305)															index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            														}
HXDLIN( 305)														int _hx_tmp3;
HXDLIN( 305)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)															_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            														}
            														else {
HXDLIN( 305)															_hx_tmp3 = c2;
            														}
HXDLIN( 305)														::iterMagic::Iimg_obj::set(this22,index2,_hx_tmp3);
            													}
            												}
            												else {
HXDLIN( 305)													if (forceClear) {
HXDLIN( 305)														::Dynamic this23 = undoImage->image;
HXDLIN( 305)														int x2 = (dx - rectLeft);
HXDLIN( 305)														int y2 = (dy - rectTop);
HXDLIN( 305)														int index3;
HXDLIN( 305)														if (undoImage->useVirtualPos) {
HXDLIN( 305)															index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            														}
            														else {
HXDLIN( 305)															index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            														}
HXDLIN( 305)														::iterMagic::Iimg_obj::set(this23,index3,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 305)						bool found = false;
HXDLIN( 305)						{
HXDLIN( 305)							int _g_min = xIter3->start;
HXDLIN( 305)							int _g_max = xIter3->max;
HXDLIN( 305)							while((_g_min < _g_max)){
HXDLIN( 305)								_g_min = (_g_min + 1);
HXDLIN( 305)								int px = (_g_min - 1);
HXDLIN( 305)								Float pcx = (( (Float)(px) ) - nextX);
HXLINE( 619)								found = false;
HXLINE( 305)								{
HXDLIN( 305)									int _g_min1 = yIter3->start;
HXDLIN( 305)									int _g_max1 = yIter3->max;
HXDLIN( 305)									while((_g_min1 < _g_max1)){
HXDLIN( 305)										_g_min1 = (_g_min1 + 1);
HXDLIN( 305)										int py = (_g_min1 - 1);
HXDLIN( 305)										Float pcy = (( (Float)(py) ) - nextY);
HXDLIN( 305)										Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 305)										Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 305)										Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 305)										Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 305)										Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 305)										bool _hx_tmp4;
HXDLIN( 305)										bool _hx_tmp5;
HXDLIN( 305)										if ((ratioA >= 0)) {
HXDLIN( 305)											_hx_tmp5 = (ratioB >= 0);
            										}
            										else {
HXDLIN( 305)											_hx_tmp5 = false;
            										}
HXDLIN( 305)										if (_hx_tmp5) {
HXDLIN( 305)											_hx_tmp4 = (ratioC >= 0);
            										}
            										else {
HXDLIN( 305)											_hx_tmp4 = false;
            										}
HXDLIN( 305)										if (_hx_tmp4) {
HXDLIN( 305)											int i7 = ::Std_obj::_hx_int((( (Float)(aA) ) * (softC * ratioB)));
HXDLIN( 305)											if ((i7 > 255)) {
HXLINE(  24)												i7 = 255;
            											}
HXLINE( 305)											if ((i7 < 0)) {
HXLINE(  25)												i7 = 0;
            											}
HXLINE( 305)											int a5 = i7;
HXDLIN( 305)											int i8 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 305)											if ((i8 > 255)) {
HXLINE(  24)												i8 = 255;
            											}
HXLINE( 305)											if ((i8 < 0)) {
HXLINE(  25)												i8 = 0;
            											}
HXLINE( 305)											int r3 = i8;
HXDLIN( 305)											int i9 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 305)											if ((i9 > 255)) {
HXLINE(  24)												i9 = 255;
            											}
HXLINE( 305)											if ((i9 < 0)) {
HXLINE(  25)												i9 = 0;
            											}
HXLINE( 305)											int g3 = i9;
HXDLIN( 305)											int i10 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 305)											if ((i10 > 255)) {
HXLINE(  24)												i10 = 255;
            											}
HXLINE( 305)											if ((i10 < 0)) {
HXLINE(  25)												i10 = 0;
            											}
HXLINE( 305)											int b4 = i10;
HXDLIN( 305)											{
HXDLIN( 305)												int location1;
HXDLIN( 305)												if (this1->useVirtualPos) {
HXDLIN( 305)													location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this1->virtualY) * ( (Float)(this1->width) )) + px) - this1->virtualX));
            												}
            												else {
HXDLIN( 305)													location1 = ::Std_obj::_hx_int(( (Float)(((py * this1->width) + px)) ));
            												}
HXDLIN( 305)												bool _hx_tmp6;
HXDLIN( 305)												if (this1->transparent) {
HXDLIN( 305)													_hx_tmp6 = (a5 < 254);
            												}
            												else {
HXDLIN( 305)													_hx_tmp6 = false;
            												}
HXDLIN( 305)												if (_hx_tmp6) {
HXDLIN( 305)													int this24 = ::iterMagic::Iimg_obj::get(this1->image,location1);
HXDLIN( 305)													int old;
HXDLIN( 305)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)														old = ((((((this24 >> 24) & 255) << 24) | ((this24 & 255) << 16)) | (((this24 >> 8) & 255) << 8)) | ((this24 >> 16) & 255));
            													}
            													else {
HXDLIN( 305)														old = this24;
            													}
HXDLIN( 305)													int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 305)													Float a11;
HXDLIN( 305)													int this25 = ((old >> 24) & 255);
HXDLIN( 305)													if ((this25 == 0)) {
HXDLIN( 305)														a11 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														a11 = (( (Float)(this25) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float r11;
HXDLIN( 305)													int this26 = ((old >> 16) & 255);
HXDLIN( 305)													if ((this26 == 0)) {
HXDLIN( 305)														r11 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float g11;
HXDLIN( 305)													int this27 = ((old >> 8) & 255);
HXDLIN( 305)													if ((this27 == 0)) {
HXDLIN( 305)														g11 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float b12;
HXDLIN( 305)													int this28 = (old & 255);
HXDLIN( 305)													if ((this28 == 0)) {
HXDLIN( 305)														b12 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float a21;
HXDLIN( 305)													int this29 = ((rhs >> 24) & 255);
HXDLIN( 305)													if ((this29 == 0)) {
HXDLIN( 305)														a21 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float r21;
HXDLIN( 305)													int this30 = ((rhs >> 16) & 255);
HXDLIN( 305)													if ((this30 == 0)) {
HXDLIN( 305)														r21 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float g21;
HXDLIN( 305)													int this31 = ((rhs >> 8) & 255);
HXDLIN( 305)													if ((this31 == 0)) {
HXDLIN( 305)														g21 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float b22;
HXDLIN( 305)													int this32 = (rhs & 255);
HXDLIN( 305)													if ((this32 == 0)) {
HXDLIN( 305)														b22 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN( 305)													int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 305)													int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 305)													int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 305)													int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 305)													int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 305)													{
HXDLIN( 305)														int _hx_tmp7;
HXDLIN( 305)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)															_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            														}
            														else {
HXDLIN( 305)															_hx_tmp7 = blended1;
            														}
HXDLIN( 305)														::iterMagic::Iimg_obj::set(this1->image,location1,_hx_tmp7);
            													}
            												}
            												else {
HXDLIN( 305)													int value;
HXDLIN( 305)													if (this1->isLittle) {
HXDLIN( 305)														value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            													}
            													else {
HXDLIN( 305)														value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            													}
HXDLIN( 305)													::iterMagic::Iimg_obj::set(this1->image,location1,value);
            												}
            											}
HXLINE( 633)											found = true;
            										}
            										else {
HXDLIN( 305)											if (found) {
HXDLIN( 305)												goto _hx_goto_655;
            											}
            										}
            									}
            									_hx_goto_655:;
            								}
            							}
            						}
HXDLIN( 305)						if ((hasHit == false)) {
HXDLIN( 305)							 ::pi_xy::algo::HitTri v3 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,lastX,lastY,nextX,nextY,true);
HXDLIN( 305)							if (hasUndo) {
HXDLIN( 305)								v3->undoImage = undoImage;
HXDLIN( 305)								v3->undoX = xIter3->start;
HXDLIN( 305)								v3->undoY = yIter3->start;
            							}
            						}
            					}
HXLINE( 110)					lastX = nextX;
HXLINE( 111)					lastY = nextY;
            				}
            			}
            		}
            		else {
HXDLIN( 305)			int _g22 = 0;
HXDLIN( 305)			int _g23 = (sides1 + 1);
HXDLIN( 305)			while((_g22 < _g23)){
HXDLIN( 305)				_g22 = (_g22 + 1);
HXDLIN( 305)				int i11 = (_g22 - 1);
HXDLIN( 305)				Float nextX1 = (cx + (rx * ::Math_obj::cos((((( (Float)(i11) ) * theta) + omega) + ((Float)0.01)))));
HXDLIN( 305)				Float nextY1 = (cy + (ry * ::Math_obj::sin((((( (Float)(i11) ) * theta) + omega) + ((Float)0.01)))));
HXDLIN( 305)				{
HXDLIN( 305)					bool hasHit1 = false;
HXDLIN( 305)					bool hasUndo1 = false;
HXDLIN( 305)					int aA1 = ((color >> 24) & 255);
HXDLIN( 305)					int rA1 = ((color >> 16) & 255);
HXDLIN( 305)					int gA1 = ((color >> 8) & 255);
HXDLIN( 305)					int bA1 = (color & 255);
HXDLIN( 305)					Float bcx1 = (lastX - nextX1);
HXDLIN( 305)					Float bcy1 = (lastY - nextY1);
HXDLIN( 305)					Float acx1 = (cx - nextX1);
HXDLIN( 305)					Float acy1 = (cy - nextY1);
HXDLIN( 305)					Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 305)					Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 305)					Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 305)					Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 305)					 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 305)					if ((cx > lastX)) {
HXDLIN( 305)						if ((cx > nextX1)) {
HXDLIN( 305)							int min4;
HXDLIN( 305)							if ((lastX > nextX1)) {
HXDLIN( 305)								min4 = ::Math_obj::floor(nextX1);
            							}
            							else {
HXDLIN( 305)								min4 = ::Math_obj::floor(lastX);
            							}
HXDLIN( 305)							int ii_min8 = min4;
HXDLIN( 305)							int ii_max8 = ::Math_obj::ceil(cx);
HXDLIN( 305)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            						}
            						else {
HXDLIN( 305)							int ii_min9 = ::Math_obj::floor(lastX);
HXDLIN( 305)							int ii_max9 = ::Math_obj::ceil(nextX1);
HXDLIN( 305)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            						}
            					}
            					else {
HXDLIN( 305)						if ((lastX > nextX1)) {
HXDLIN( 305)							int min5;
HXDLIN( 305)							if ((cx > nextX1)) {
HXDLIN( 305)								min5 = ::Math_obj::floor(nextX1);
            							}
            							else {
HXDLIN( 305)								min5 = ::Math_obj::ceil(cx);
            							}
HXDLIN( 305)							int ii_min10 = min5;
HXDLIN( 305)							int ii_max10 = ::Math_obj::ceil(lastX);
HXDLIN( 305)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            						}
            						else {
HXDLIN( 305)							int ii_min11 = ::Math_obj::floor(cx);
HXDLIN( 305)							int ii_max11 = ::Math_obj::ceil(nextX1);
HXDLIN( 305)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            						}
            					}
HXDLIN( 305)					 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 305)					if ((cy > lastY)) {
HXDLIN( 305)						if ((cy > nextY1)) {
HXDLIN( 305)							int min6;
HXDLIN( 305)							if ((lastY > nextY1)) {
HXDLIN( 305)								min6 = ::Math_obj::floor(nextY1);
            							}
            							else {
HXDLIN( 305)								min6 = ::Math_obj::floor(lastY);
            							}
HXDLIN( 305)							int ii_min12 = min6;
HXDLIN( 305)							int ii_max12 = ::Math_obj::ceil(cy);
HXDLIN( 305)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            						}
            						else {
HXDLIN( 305)							int ii_min13 = ::Math_obj::floor(lastY);
HXDLIN( 305)							int ii_max13 = ::Math_obj::ceil(nextY1);
HXDLIN( 305)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            						}
            					}
            					else {
HXDLIN( 305)						if ((lastY > nextY1)) {
HXDLIN( 305)							int min7;
HXDLIN( 305)							if ((cy > nextY1)) {
HXDLIN( 305)								min7 = ::Math_obj::floor(nextY1);
            							}
            							else {
HXDLIN( 305)								min7 = ::Math_obj::ceil(cy);
            							}
HXDLIN( 305)							int ii_min14 = min7;
HXDLIN( 305)							int ii_max14 = ::Math_obj::ceil(lastY);
HXDLIN( 305)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            						}
            						else {
HXDLIN( 305)							int ii_min15 = ::Math_obj::floor(cy);
HXDLIN( 305)							int ii_max15 = ::Math_obj::ceil(nextY1);
HXDLIN( 305)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            						}
            					}
HXDLIN( 305)					 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 305)					if (hasUndo1) {
HXDLIN( 305)						int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 305)						int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 305)						 ::Dynamic imageType1 = null();
HXDLIN( 305)						 ::pi_xy::ImageStruct this33 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 305)						if (::hx::IsNull( imageType1 )) {
HXLINE(  54)							imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 305)						::Dynamic undoImage4;
HXDLIN( 305)						switch((int)(( (int)(imageType1) ))){
            							case (int)0: {
HXDLIN( 305)								 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 305)								 ::iterMagic::BytesImg b6 = byt1;
HXDLIN( 305)								{
HXDLIN( 305)									b6->width = width1;
HXDLIN( 305)									b6->height = height1;
HXDLIN( 305)									b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 305)									b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 305)									{
HXDLIN( 305)										int len2 = b6->length;
HXDLIN( 305)										int w1 = 0;
HXDLIN( 305)										{
HXDLIN( 305)											int _g24 = 0;
HXDLIN( 305)											int _g25 = b6->height;
HXDLIN( 305)											while((_g24 < _g25)){
HXDLIN( 305)												_g24 = (_g24 + 1);
HXDLIN( 305)												int y3 = (_g24 - 1);
HXDLIN( 305)												{
HXDLIN( 305)													int _g26 = 0;
HXDLIN( 305)													int _g27 = b6->width;
HXDLIN( 305)													while((_g26 < _g27)){
HXDLIN( 305)														_g26 = (_g26 + 1);
HXDLIN( 305)														int x3 = (_g26 - 1);
HXDLIN( 305)														{
HXDLIN( 305)															w1 = (w1 + 1);
HXDLIN( 305)															b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 305)														{
HXDLIN( 305)															w1 = (w1 + 1);
HXDLIN( 305)															b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 305)														{
HXDLIN( 305)															w1 = (w1 + 1);
HXDLIN( 305)															b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 305)														{
HXDLIN( 305)															w1 = (w1 + 1);
HXDLIN( 305)															b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 305)								undoImage4 = b6;
            							}
            							break;
            							case (int)1: {
HXDLIN( 305)								 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 305)								 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN( 305)								{
HXDLIN( 305)									a7->width = width1;
HXDLIN( 305)									a7->height = height1;
HXDLIN( 305)									a7->data = ::Array_obj< int >::__new(0);
HXDLIN( 305)									a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 305)									{
HXDLIN( 305)										int _g28 = 0;
HXDLIN( 305)										int _g29 = a7->length;
HXDLIN( 305)										while((_g28 < _g29)){
HXDLIN( 305)											_g28 = (_g28 + 1);
HXDLIN( 305)											int i12 = (_g28 - 1);
HXDLIN( 305)											a7->data[i12] = 0;
            										}
            									}
            								}
HXDLIN( 305)								undoImage4 = a7;
            							}
            							break;
            							case (int)2: {
HXDLIN( 305)								 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 305)								 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN( 305)								{
HXDLIN( 305)									b7->width = width1;
HXDLIN( 305)									b7->height = height1;
HXDLIN( 305)									b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 305)									int size1 = (b7->length * 4);
HXDLIN( 305)									b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 305)									{
HXDLIN( 305)										int _g30 = 0;
HXDLIN( 305)										int _g31 = b7->length;
HXDLIN( 305)										while((_g30 < _g31)){
HXDLIN( 305)											_g30 = (_g30 + 1);
HXDLIN( 305)											int i13 = (_g30 - 1);
HXDLIN( 305)											{
HXDLIN( 305)												 ::haxe::io::ArrayBufferViewImpl this34 = b7->data;
HXDLIN( 305)												bool undoImage5;
HXDLIN( 305)												if ((i13 >= 0)) {
HXDLIN( 305)													undoImage5 = (i13 < (this34->byteLength >> 2));
            												}
            												else {
HXDLIN( 305)													undoImage5 = false;
            												}
HXDLIN( 305)												if (undoImage5) {
HXDLIN( 305)													 ::haxe::io::Bytes _this1 = this34->bytes;
HXDLIN( 305)													int pos1 = ((i13 << 2) + this34->byteOffset);
HXDLIN( 305)													_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 305)													_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 305)													_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 305)													_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 305)								undoImage4 = b7;
            							}
            							break;
            							case (int)3: {
HXDLIN( 305)								 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 305)								 ::iterMagic::VecIntImg v4 = vec1;
HXDLIN( 305)								{
HXDLIN( 305)									v4->width = width1;
HXDLIN( 305)									v4->height = height1;
HXDLIN( 305)									v4->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 305)									v4->data = ::Array_obj< int >::__new(v4->length);
HXDLIN( 305)									{
HXDLIN( 305)										int _g32 = 0;
HXDLIN( 305)										int _g33 = v4->length;
HXDLIN( 305)										while((_g32 < _g33)){
HXDLIN( 305)											_g32 = (_g32 + 1);
HXDLIN( 305)											int i14 = (_g32 - 1);
HXDLIN( 305)											v4->data->__unsafe_set(i14,0);
            										}
            									}
            								}
HXDLIN( 305)								undoImage4 = v4;
            							}
            							break;
            							case (int)4: {
HXDLIN( 305)								 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 305)								 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN( 305)								{
HXDLIN( 305)									b8->width = width1;
HXDLIN( 305)									b8->height = height1;
HXDLIN( 305)									b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 305)									b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 305)									{
HXDLIN( 305)										int len3 = b8->length;
HXDLIN( 305)										 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN( 305)										if (::hx::IsNull( d1->head )) {
HXDLIN( 305)											int _g34 = 0;
HXDLIN( 305)											int _g35 = len3;
HXDLIN( 305)											while((_g34 < _g35)){
HXDLIN( 305)												_g34 = (_g34 + 1);
HXDLIN( 305)												int i15 = (_g34 - 1);
HXDLIN( 305)												d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            											}
            										}
            										else {
HXDLIN( 305)											int _g36 = 0;
HXDLIN( 305)											int _g37 = len3;
HXDLIN( 305)											while((_g36 < _g37)){
HXDLIN( 305)												_g36 = (_g36 + 1);
HXDLIN( 305)												int i16 = (_g36 - 1);
HXDLIN( 305)												{
HXDLIN( 305)													 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN( 305)													 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 305)													{
HXDLIN( 305)														int _g38 = 0;
HXDLIN( 305)														int _g39 = i16;
HXDLIN( 305)														while((_g38 < _g39)){
HXDLIN( 305)															_g38 = (_g38 + 1);
HXDLIN( 305)															int i17 = (_g38 - 1);
HXLINE( 345)															prev1 = l1;
HXLINE( 346)															l1 = l1->next;
            														}
            													}
HXLINE( 305)													if (::hx::IsNull( prev1 )) {
HXDLIN( 305)														b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 305)														l1 = null();
            													}
            													else {
HXDLIN( 305)														prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 305)														l1 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 305)								undoImage4 = b8;
            							}
            							break;
            						}
HXDLIN( 305)						this33->image = undoImage4;
HXDLIN( 305)						this33->width = width1;
HXDLIN( 305)						this33->height = height1;
HXDLIN( 305)						this33->imageType = ( (int)(imageType1) );
HXDLIN( 305)						undoImage3 = this33;
HXDLIN( 305)						{
HXDLIN( 305)							int rectLeft1 = xIter31->start;
HXDLIN( 305)							int rectTop1 = yIter31->start;
HXDLIN( 305)							int rectRight1 = xIter31->max;
HXDLIN( 305)							bool forceClear1 = false;
HXDLIN( 305)							{
HXDLIN( 305)								int _g40 = rectTop1;
HXDLIN( 305)								int _g41 = yIter31->max;
HXDLIN( 305)								while((_g40 < _g41)){
HXDLIN( 305)									_g40 = (_g40 + 1);
HXDLIN( 305)									int dy1 = (_g40 - 1);
HXDLIN( 305)									{
HXDLIN( 305)										int _g42 = rectLeft1;
HXDLIN( 305)										int _g43 = rectRight1;
HXDLIN( 305)										while((_g42 < _g43)){
HXDLIN( 305)											_g42 = (_g42 + 1);
HXDLIN( 305)											int dx1 = (_g42 - 1);
HXDLIN( 305)											::Dynamic this35 = this1->image;
HXDLIN( 305)											int index4;
HXDLIN( 305)											if (this1->useVirtualPos) {
HXDLIN( 305)												index4 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx1) - this1->virtualX));
            											}
            											else {
HXDLIN( 305)												index4 = ::Std_obj::_hx_int(( (Float)(((dy1 * this1->width) + dx1)) ));
            											}
HXDLIN( 305)											int c3 = ::iterMagic::Iimg_obj::get(this35,index4);
HXDLIN( 305)											int col1;
HXDLIN( 305)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)												col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            											}
            											else {
HXDLIN( 305)												col1 = c3;
            											}
HXDLIN( 305)											bool _hx_tmp8;
HXDLIN( 305)											if (this1->useMask) {
HXDLIN( 305)												_hx_tmp8 = ::hx::IsNotNull( this1->mask );
            											}
            											else {
HXDLIN( 305)												_hx_tmp8 = false;
            											}
HXDLIN( 305)											if (_hx_tmp8) {
HXDLIN( 305)												 ::pi_xy::ImageStruct this36 = this1->mask;
HXDLIN( 305)												::Dynamic this37 = this36->image;
HXDLIN( 305)												int index5;
HXDLIN( 305)												if (this36->useVirtualPos) {
HXDLIN( 305)													index5 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this36->virtualY) * ( (Float)(this36->width) )) + dx1) - this36->virtualX));
            												}
            												else {
HXDLIN( 305)													index5 = ::Std_obj::_hx_int(( (Float)(((dy1 * this36->width) + dx1)) ));
            												}
HXDLIN( 305)												int c4 = ::iterMagic::Iimg_obj::get(this37,index5);
HXDLIN( 305)												int v5;
HXDLIN( 305)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)													v5 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            												}
            												else {
HXDLIN( 305)													v5 = c4;
            												}
HXDLIN( 305)												int maskPixel1 = v5;
HXDLIN( 305)												int this38 = col1;
HXDLIN( 305)												if ((maskPixel1 == 0)) {
HXDLIN( 305)													col1 = this38;
            												}
            												else {
HXDLIN( 305)													Float m01;
HXDLIN( 305)													int this39 = ((maskPixel1 >> 24) & 255);
HXDLIN( 305)													if ((this39 == 0)) {
HXDLIN( 305)														m01 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														m01 = (( (Float)(this39) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float m11;
HXDLIN( 305)													int this40 = ((maskPixel1 >> 16) & 255);
HXDLIN( 305)													if ((this40 == 0)) {
HXDLIN( 305)														m11 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														m11 = (( (Float)(this40) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float m21;
HXDLIN( 305)													int this41 = ((maskPixel1 >> 8) & 255);
HXDLIN( 305)													if ((this41 == 0)) {
HXDLIN( 305)														m21 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														m21 = (( (Float)(this41) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float m31;
HXDLIN( 305)													int this42 = (maskPixel1 & 255);
HXDLIN( 305)													if ((this42 == 0)) {
HXDLIN( 305)														m31 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														m31 = (( (Float)(this42) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this38 >> 24) & 255)) )));
HXDLIN( 305)													int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this38 >> 16) & 255)) )));
HXDLIN( 305)													int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this38 >> 8) & 255)) )));
HXDLIN( 305)													int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this38 & 255)) )));
HXDLIN( 305)													col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 305)											if ((col1 != 0)) {
HXDLIN( 305)												int x4 = (dx1 - rectLeft1);
HXDLIN( 305)												int y4 = (dy1 - rectTop1);
HXDLIN( 305)												int c5 = col1;
HXDLIN( 305)												bool _hx_tmp9;
HXDLIN( 305)												if ((((c5 >> 24) & 255) < 254)) {
HXDLIN( 305)													_hx_tmp9 = undoImage3->transparent;
            												}
            												else {
HXDLIN( 305)													_hx_tmp9 = false;
            												}
HXDLIN( 305)												if (_hx_tmp9) {
HXDLIN( 305)													int location2;
HXDLIN( 305)													if (undoImage3->useVirtualPos) {
HXDLIN( 305)														location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            													}
            													else {
HXDLIN( 305)														location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            													}
HXDLIN( 305)													int this43 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 305)													int this44;
HXDLIN( 305)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)														this44 = ((((((this43 >> 24) & 255) << 24) | ((this43 & 255) << 16)) | (((this43 >> 8) & 255) << 8)) | ((this43 >> 16) & 255));
            													}
            													else {
HXDLIN( 305)														this44 = this43;
            													}
HXDLIN( 305)													Float a12;
HXDLIN( 305)													int this45 = ((this44 >> 24) & 255);
HXDLIN( 305)													if ((this45 == 0)) {
HXDLIN( 305)														a12 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														a12 = (( (Float)(this45) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float r12;
HXDLIN( 305)													int this46 = ((this44 >> 16) & 255);
HXDLIN( 305)													if ((this46 == 0)) {
HXDLIN( 305)														r12 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														r12 = (( (Float)(this46) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float g12;
HXDLIN( 305)													int this47 = ((this44 >> 8) & 255);
HXDLIN( 305)													if ((this47 == 0)) {
HXDLIN( 305)														g12 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														g12 = (( (Float)(this47) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float b13;
HXDLIN( 305)													int this48 = (this44 & 255);
HXDLIN( 305)													if ((this48 == 0)) {
HXDLIN( 305)														b13 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														b13 = (( (Float)(this48) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float a22;
HXDLIN( 305)													int this49 = ((col1 >> 24) & 255);
HXDLIN( 305)													if ((this49 == 0)) {
HXDLIN( 305)														a22 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														a22 = (( (Float)(this49) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float r22;
HXDLIN( 305)													int this50 = ((col1 >> 16) & 255);
HXDLIN( 305)													if ((this50 == 0)) {
HXDLIN( 305)														r22 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														r22 = (( (Float)(this50) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float g22;
HXDLIN( 305)													int this51 = ((col1 >> 8) & 255);
HXDLIN( 305)													if ((this51 == 0)) {
HXDLIN( 305)														g22 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														g22 = (( (Float)(this51) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float b23;
HXDLIN( 305)													int this52 = (col1 & 255);
HXDLIN( 305)													if ((this52 == 0)) {
HXDLIN( 305)														b23 = ((Float)0.);
            													}
            													else {
HXDLIN( 305)														b23 = (( (Float)(this52) ) / ( (Float)(255) ));
            													}
HXDLIN( 305)													Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN( 305)													int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 305)													int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 305)													int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 305)													int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 305)													int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN( 305)													{
HXDLIN( 305)														int _hx_tmp10;
HXDLIN( 305)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)															_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            														}
            														else {
HXDLIN( 305)															_hx_tmp10 = blended2;
            														}
HXDLIN( 305)														::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            													}
            												}
            												else {
HXDLIN( 305)													::Dynamic this53 = undoImage3->image;
HXDLIN( 305)													int index6;
HXDLIN( 305)													if (undoImage3->useVirtualPos) {
HXDLIN( 305)														index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            													}
            													else {
HXDLIN( 305)														index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            													}
HXDLIN( 305)													int _hx_tmp11;
HXDLIN( 305)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)														_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            													}
            													else {
HXDLIN( 305)														_hx_tmp11 = c5;
            													}
HXDLIN( 305)													::iterMagic::Iimg_obj::set(this53,index6,_hx_tmp11);
            												}
            											}
            											else {
HXDLIN( 305)												if (forceClear1) {
HXDLIN( 305)													::Dynamic this54 = undoImage3->image;
HXDLIN( 305)													int x5 = (dx1 - rectLeft1);
HXDLIN( 305)													int y5 = (dy1 - rectTop1);
HXDLIN( 305)													int index7;
HXDLIN( 305)													if (undoImage3->useVirtualPos) {
HXDLIN( 305)														index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            													}
            													else {
HXDLIN( 305)														index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            													}
HXDLIN( 305)													::iterMagic::Iimg_obj::set(this54,index7,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 305)					bool found1 = false;
HXDLIN( 305)					{
HXDLIN( 305)						int _g_min2 = xIter31->start;
HXDLIN( 305)						int _g_max2 = xIter31->max;
HXDLIN( 305)						while((_g_min2 < _g_max2)){
HXDLIN( 305)							_g_min2 = (_g_min2 + 1);
HXDLIN( 305)							int px1 = (_g_min2 - 1);
HXDLIN( 305)							Float pcx1 = (( (Float)(px1) ) - nextX1);
HXLINE( 619)							found1 = false;
HXLINE( 305)							{
HXDLIN( 305)								int _g_min3 = yIter31->start;
HXDLIN( 305)								int _g_max3 = yIter31->max;
HXDLIN( 305)								while((_g_min3 < _g_max3)){
HXDLIN( 305)									_g_min3 = (_g_min3 + 1);
HXDLIN( 305)									int py1 = (_g_min3 - 1);
HXDLIN( 305)									Float pcy1 = (( (Float)(py1) ) - nextY1);
HXDLIN( 305)									Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 305)									Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 305)									Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 305)									Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 305)									Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 305)									bool _hx_tmp12;
HXDLIN( 305)									bool _hx_tmp13;
HXDLIN( 305)									if ((ratioA1 >= 0)) {
HXDLIN( 305)										_hx_tmp13 = (ratioB1 >= 0);
            									}
            									else {
HXDLIN( 305)										_hx_tmp13 = false;
            									}
HXDLIN( 305)									if (_hx_tmp13) {
HXDLIN( 305)										_hx_tmp12 = (ratioC1 >= 0);
            									}
            									else {
HXDLIN( 305)										_hx_tmp12 = false;
            									}
HXDLIN( 305)									if (_hx_tmp12) {
HXDLIN( 305)										int i18 = ::Std_obj::_hx_int((( (Float)(aA1) ) * (softC * ratioB1)));
HXDLIN( 305)										if ((i18 > 255)) {
HXLINE(  24)											i18 = 255;
            										}
HXLINE( 305)										if ((i18 < 0)) {
HXLINE(  25)											i18 = 0;
            										}
HXLINE( 305)										int a9 = i18;
HXDLIN( 305)										int i19 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN( 305)										if ((i19 > 255)) {
HXLINE(  24)											i19 = 255;
            										}
HXLINE( 305)										if ((i19 < 0)) {
HXLINE(  25)											i19 = 0;
            										}
HXLINE( 305)										int r6 = i19;
HXDLIN( 305)										int i20 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN( 305)										if ((i20 > 255)) {
HXLINE(  24)											i20 = 255;
            										}
HXLINE( 305)										if ((i20 < 0)) {
HXLINE(  25)											i20 = 0;
            										}
HXLINE( 305)										int g6 = i20;
HXDLIN( 305)										int i21 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN( 305)										if ((i21 > 255)) {
HXLINE(  24)											i21 = 255;
            										}
HXLINE( 305)										if ((i21 < 0)) {
HXLINE(  25)											i21 = 0;
            										}
HXLINE( 305)										int b10 = i21;
HXDLIN( 305)										{
HXDLIN( 305)											int location3;
HXDLIN( 305)											if (this1->useVirtualPos) {
HXDLIN( 305)												location3 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this1->virtualY) * ( (Float)(this1->width) )) + px1) - this1->virtualX));
            											}
            											else {
HXDLIN( 305)												location3 = ::Std_obj::_hx_int(( (Float)(((py1 * this1->width) + px1)) ));
            											}
HXDLIN( 305)											bool _hx_tmp14;
HXDLIN( 305)											if (this1->transparent) {
HXDLIN( 305)												_hx_tmp14 = (a9 < 254);
            											}
            											else {
HXDLIN( 305)												_hx_tmp14 = false;
            											}
HXDLIN( 305)											if (_hx_tmp14) {
HXDLIN( 305)												int this55 = ::iterMagic::Iimg_obj::get(this1->image,location3);
HXDLIN( 305)												int old1;
HXDLIN( 305)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)													old1 = ((((((this55 >> 24) & 255) << 24) | ((this55 & 255) << 16)) | (((this55 >> 8) & 255) << 8)) | ((this55 >> 16) & 255));
            												}
            												else {
HXDLIN( 305)													old1 = this55;
            												}
HXDLIN( 305)												int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 305)												Float a13;
HXDLIN( 305)												int this56 = ((old1 >> 24) & 255);
HXDLIN( 305)												if ((this56 == 0)) {
HXDLIN( 305)													a13 = ((Float)0.);
            												}
            												else {
HXDLIN( 305)													a13 = (( (Float)(this56) ) / ( (Float)(255) ));
            												}
HXDLIN( 305)												Float r13;
HXDLIN( 305)												int this57 = ((old1 >> 16) & 255);
HXDLIN( 305)												if ((this57 == 0)) {
HXDLIN( 305)													r13 = ((Float)0.);
            												}
            												else {
HXDLIN( 305)													r13 = (( (Float)(this57) ) / ( (Float)(255) ));
            												}
HXDLIN( 305)												Float g13;
HXDLIN( 305)												int this58 = ((old1 >> 8) & 255);
HXDLIN( 305)												if ((this58 == 0)) {
HXDLIN( 305)													g13 = ((Float)0.);
            												}
            												else {
HXDLIN( 305)													g13 = (( (Float)(this58) ) / ( (Float)(255) ));
            												}
HXDLIN( 305)												Float b14;
HXDLIN( 305)												int this59 = (old1 & 255);
HXDLIN( 305)												if ((this59 == 0)) {
HXDLIN( 305)													b14 = ((Float)0.);
            												}
            												else {
HXDLIN( 305)													b14 = (( (Float)(this59) ) / ( (Float)(255) ));
            												}
HXDLIN( 305)												Float a23;
HXDLIN( 305)												int this60 = ((rhs1 >> 24) & 255);
HXDLIN( 305)												if ((this60 == 0)) {
HXDLIN( 305)													a23 = ((Float)0.);
            												}
            												else {
HXDLIN( 305)													a23 = (( (Float)(this60) ) / ( (Float)(255) ));
            												}
HXDLIN( 305)												Float r23;
HXDLIN( 305)												int this61 = ((rhs1 >> 16) & 255);
HXDLIN( 305)												if ((this61 == 0)) {
HXDLIN( 305)													r23 = ((Float)0.);
            												}
            												else {
HXDLIN( 305)													r23 = (( (Float)(this61) ) / ( (Float)(255) ));
            												}
HXDLIN( 305)												Float g23;
HXDLIN( 305)												int this62 = ((rhs1 >> 8) & 255);
HXDLIN( 305)												if ((this62 == 0)) {
HXDLIN( 305)													g23 = ((Float)0.);
            												}
            												else {
HXDLIN( 305)													g23 = (( (Float)(this62) ) / ( (Float)(255) ));
            												}
HXDLIN( 305)												Float b24;
HXDLIN( 305)												int this63 = (rhs1 & 255);
HXDLIN( 305)												if ((this63 == 0)) {
HXDLIN( 305)													b24 = ((Float)0.);
            												}
            												else {
HXDLIN( 305)													b24 = (( (Float)(this63) ) / ( (Float)(255) ));
            												}
HXDLIN( 305)												Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN( 305)												int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 305)												int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 305)												int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 305)												int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 305)												int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN( 305)												{
HXDLIN( 305)													int _hx_tmp15;
HXDLIN( 305)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN( 305)														_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            													}
            													else {
HXDLIN( 305)														_hx_tmp15 = blended3;
            													}
HXDLIN( 305)													::iterMagic::Iimg_obj::set(this1->image,location3,_hx_tmp15);
            												}
            											}
            											else {
HXDLIN( 305)												int value1;
HXDLIN( 305)												if (this1->isLittle) {
HXDLIN( 305)													value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            												}
            												else {
HXDLIN( 305)													value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            												}
HXDLIN( 305)												::iterMagic::Iimg_obj::set(this1->image,location3,value1);
            											}
            										}
HXLINE( 633)										found1 = true;
            									}
            									else {
HXDLIN( 305)										if (found1) {
HXDLIN( 305)											goto _hx_goto_668;
            										}
            									}
            								}
            								_hx_goto_668:;
            							}
            						}
            					}
HXDLIN( 305)					if ((hasHit1 == false)) {
HXDLIN( 305)						 ::pi_xy::algo::HitTri v6 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,lastX,lastY,nextX1,nextY1,true);
HXDLIN( 305)						if (hasUndo1) {
HXDLIN( 305)							v6->undoImage = undoImage3;
HXDLIN( 305)							v6->undoX = xIter31->start;
HXDLIN( 305)							v6->undoY = yIter31->start;
            						}
            					}
            				}
HXLINE( 119)				lastX = nextX1;
HXLINE( 120)				lastY = nextY1;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(SoftShape_Impl__obj,polyBuild,(void))


SoftShape_Impl__obj::SoftShape_Impl__obj()
{
}

bool SoftShape_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quad") ) { outValue = quad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"line") ) { outValue = line_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"quint") ) { outValue = quint_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"arrow") ) { outValue = arrow_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"triangle") ) { outValue = triangle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fixArrow") ) { outValue = fixArrow_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"quadFudge") ) { outValue = quadFudge_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"arrowBoth") ) { outValue = arrowBoth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"polyBuild") ) { outValue = polyBuild_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lineLuxury") ) { outValue = lineLuxury_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ellipseTri") ) { outValue = ellipseTri_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"quadQuarter") ) { outValue = quadQuarter_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fixArrowBoth") ) { outValue = fixArrowBoth_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *SoftShape_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *SoftShape_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class SoftShape_Impl__obj::__mClass;

static ::String SoftShape_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("quint",8b,90,ed,5d),
	HX_("quad",c7,38,0a,4b),
	HX_("quadFudge",4c,63,9e,99),
	HX_("quadQuarter",25,3e,00,1f),
	HX_("line",f4,17,b3,47),
	HX_("lineLuxury",21,98,bf,b0),
	HX_("triangle",c8,be,c5,8d),
	HX_("arrow",c9,79,8f,25),
	HX_("arrowBoth",ea,46,bf,fc),
	HX_("fixArrow",b4,63,f7,8b),
	HX_("fixArrowBoth",55,02,fa,ce),
	HX_("ellipseTri",ed,3e,df,4c),
	HX_("polyBuild",42,79,d2,50),
	::String(null())
};

void SoftShape_Impl__obj::__register()
{
	SoftShape_Impl__obj _hx_dummy;
	SoftShape_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.imageAbstracts._SoftShape.SoftShape_Impl_",32,81,5d,50);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SoftShape_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SoftShape_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< SoftShape_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SoftShape_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SoftShape_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace imageAbstracts
} // end namespace _SoftShape
