// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3e62ac313eb87ffe_9_new,"pi_xy.iter.IntIterStart","new",0x5f2ba0fc,"pi_xy.iter.IntIterStart.new","pi_xy/iter/IteratorRange.hx",9,0xd40332de)
namespace pi_xy{
namespace iter{

void IntIterStart_obj::__construct(int min_,int max_){
            	HX_STACKFRAME(&_hx_pos_3e62ac313eb87ffe_9_new)
HXLINE(  10)		this->start = min_;
HXLINE(  11)		this->max = max_;
            	}

Dynamic IntIterStart_obj::__CreateEmpty() { return new IntIterStart_obj; }

void *IntIterStart_obj::_hx_vtable = 0;

Dynamic IntIterStart_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< IntIterStart_obj > _hx_result = new IntIterStart_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool IntIterStart_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0586677a;
}


IntIterStart_obj::IntIterStart_obj()
{
}

::hx::Val IntIterStart_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { return ::hx::Val( max ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val IntIterStart_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"max") ) { max=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void IntIterStart_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("start",62,74,0b,84));
	outFields->push(HX_("max",a4,0a,53,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo IntIterStart_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(IntIterStart_obj,start),HX_("start",62,74,0b,84)},
	{::hx::fsInt,(int)offsetof(IntIterStart_obj,max),HX_("max",a4,0a,53,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *IntIterStart_obj_sStaticStorageInfo = 0;
#endif

static ::String IntIterStart_obj_sMemberFields[] = {
	HX_("start",62,74,0b,84),
	HX_("max",a4,0a,53,00),
	::String(null()) };

::hx::Class IntIterStart_obj::__mClass;

void IntIterStart_obj::__register()
{
	IntIterStart_obj _hx_dummy;
	IntIterStart_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.iter.IntIterStart",0a,b3,98,98);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(IntIterStart_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< IntIterStart_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = IntIterStart_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = IntIterStart_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace iter
