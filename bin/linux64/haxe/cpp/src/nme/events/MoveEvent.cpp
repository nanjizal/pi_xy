// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_MoveEvent
#include <nme/events/MoveEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d8bd557586f9e450_17_new,"nme.events.MoveEvent","new",0x26f50eae,"nme.events.MoveEvent.new","nme/events/MoveEvent.hx",17,0x2a9902a2)
HX_LOCAL_STACK_FRAME(_hx_pos_d8bd557586f9e450_24_clone,"nme.events.MoveEvent","clone",0x488b012b,"nme.events.MoveEvent.clone","nme/events/MoveEvent.hx",24,0x2a9902a2)
HX_LOCAL_STACK_FRAME(_hx_pos_d8bd557586f9e450_31_toString,"nme.events.MoveEvent","toString",0xba62f79e,"nme.events.MoveEvent.toString","nme/events/MoveEvent.hx",31,0x2a9902a2)
HX_LOCAL_STACK_FRAME(_hx_pos_d8bd557586f9e450_14_boot,"nme.events.MoveEvent","boot",0xe790ca24,"nme.events.MoveEvent.boot","nme/events/MoveEvent.hx",14,0x2a9902a2)
namespace nme{
namespace events{

void MoveEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_inX,::hx::Null< int >  __o_inY){
            		bool bubbles = __o_bubbles.Default(true);
            		bool cancelable = __o_cancelable.Default(false);
            		int inX = __o_inX.Default(0);
            		int inY = __o_inY.Default(0);
            	HX_STACKFRAME(&_hx_pos_d8bd557586f9e450_17_new)
HXLINE(  18)		super::__construct(type,bubbles,cancelable);
HXLINE(  19)		this->x = inX;
HXLINE(  20)		this->y = inY;
            	}

Dynamic MoveEvent_obj::__CreateEmpty() { return new MoveEvent_obj; }

void *MoveEvent_obj::_hx_vtable = 0;

Dynamic MoveEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MoveEvent_obj > _hx_result = new MoveEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool MoveEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x113d0d1f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x113d0d1f;
	} else {
		return inClassId==(int)0x720b42ce;
	}
}

 ::nme::events::Event MoveEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_d8bd557586f9e450_24_clone)
HXLINE(  25)		::String e = this->get_type();
HXDLIN(  25)		bool e1 = this->get_bubbles();
HXDLIN(  25)		bool e2 = this->get_cancelable();
HXDLIN(  25)		 ::nme::events::MoveEvent e3 =  ::nme::events::MoveEvent_obj::__alloc( HX_CTX ,e,e1,e2,this->x,this->y);
HXLINE(  26)		return e3;
            	}


::String MoveEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_d8bd557586f9e450_31_toString)
HXDLIN(  31)		::String _hx_tmp = ((HX_("MoveEvent(",df,cc,49,dd) + this->get_type()) + HX_(",",2c,00,00,00));
HXDLIN(  31)		return ((((_hx_tmp + this->x) + HX_(",",2c,00,00,00)) + this->y) + HX_(")",29,00,00,00));
            	}


::String MoveEvent_obj::WINDOW_MOVED;


MoveEvent_obj::MoveEvent_obj()
{
}

::hx::Val MoveEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MoveEvent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"WINDOW_MOVED") ) { outValue = ( WINDOW_MOVED ); return true; }
	}
	return false;
}

::hx::Val MoveEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MoveEvent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"WINDOW_MOVED") ) { WINDOW_MOVED=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void MoveEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MoveEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(MoveEvent_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsInt,(int)offsetof(MoveEvent_obj,y),HX_("y",79,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MoveEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &MoveEvent_obj::WINDOW_MOVED,HX_("WINDOW_MOVED",44,1f,e3,04)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MoveEvent_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("clone",5d,13,63,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void MoveEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MoveEvent_obj::WINDOW_MOVED,"WINDOW_MOVED");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MoveEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MoveEvent_obj::WINDOW_MOVED,"WINDOW_MOVED");
};

#endif

::hx::Class MoveEvent_obj::__mClass;

static ::String MoveEvent_obj_sStaticFields[] = {
	HX_("WINDOW_MOVED",44,1f,e3,04),
	::String(null())
};

void MoveEvent_obj::__register()
{
	MoveEvent_obj _hx_dummy;
	MoveEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.MoveEvent",bc,df,88,09);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MoveEvent_obj::__GetStatic;
	__mClass->mSetStaticField = &MoveEvent_obj::__SetStatic;
	__mClass->mMarkFunc = MoveEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MoveEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MoveEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MoveEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MoveEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MoveEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MoveEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MoveEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d8bd557586f9e450_14_boot)
HXDLIN(  14)		WINDOW_MOVED = HX_("windowMoved",23,62,38,fd);
            	}
}

} // end namespace nme
} // end namespace events
