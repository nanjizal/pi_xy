// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_geom_ColorTransform
#include <nme/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_nme_geom_Matrix
#include <nme/geom/Matrix.h>
#endif
#ifndef INCLUDED_nme_geom_Rectangle
#include <nme/geom/Rectangle.h>
#endif
#ifndef INCLUDED_nme_geom_Transform
#include <nme/geom/Transform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f4e315b57d7f1149_18_new,"nme.geom.Transform","new",0x4f5e3f34,"nme.geom.Transform.new","nme/geom/Transform.hx",18,0xe6d90f1c)
HX_LOCAL_STACK_FRAME(_hx_pos_f4e315b57d7f1149_22_get_colorTransform,"nme.geom.Transform","get_colorTransform",0x1a9d17fe,"nme.geom.Transform.get_colorTransform","nme/geom/Transform.hx",22,0xe6d90f1c)
HX_LOCAL_STACK_FRAME(_hx_pos_f4e315b57d7f1149_23_set_colorTransform,"nme.geom.Transform","set_colorTransform",0xf74c4a72,"nme.geom.Transform.set_colorTransform","nme/geom/Transform.hx",23,0xe6d90f1c)
HX_LOCAL_STACK_FRAME(_hx_pos_f4e315b57d7f1149_24_get_concatenatedColorTransform,"nme.geom.Transform","get_concatenatedColorTransform",0xfc9184ed,"nme.geom.Transform.get_concatenatedColorTransform","nme/geom/Transform.hx",24,0xe6d90f1c)
HX_LOCAL_STACK_FRAME(_hx_pos_f4e315b57d7f1149_25_get_concatenatedMatrix,"nme.geom.Transform","get_concatenatedMatrix",0xdb7bdfa5,"nme.geom.Transform.get_concatenatedMatrix","nme/geom/Transform.hx",25,0xe6d90f1c)
HX_LOCAL_STACK_FRAME(_hx_pos_f4e315b57d7f1149_26_get_matrix,"nme.geom.Transform","get_matrix",0xbd5579b6,"nme.geom.Transform.get_matrix","nme/geom/Transform.hx",26,0xe6d90f1c)
HX_LOCAL_STACK_FRAME(_hx_pos_f4e315b57d7f1149_27_set_matrix,"nme.geom.Transform","set_matrix",0xc0d3182a,"nme.geom.Transform.set_matrix","nme/geom/Transform.hx",27,0xe6d90f1c)
HX_LOCAL_STACK_FRAME(_hx_pos_f4e315b57d7f1149_28_get_pixelBounds,"nme.geom.Transform","get_pixelBounds",0xc7eb7e06,"nme.geom.Transform.get_pixelBounds","nme/geom/Transform.hx",28,0xe6d90f1c)
namespace nme{
namespace geom{

void Transform_obj::__construct( ::nme::display::DisplayObject inParent){
            	HX_STACKFRAME(&_hx_pos_f4e315b57d7f1149_18_new)
HXDLIN(  18)		this->nmeObj = inParent;
            	}

Dynamic Transform_obj::__CreateEmpty() { return new Transform_obj; }

void *Transform_obj::_hx_vtable = 0;

Dynamic Transform_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Transform_obj > _hx_result = new Transform_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Transform_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c3ddba2;
}

 ::nme::geom::ColorTransform Transform_obj::get_colorTransform(){
            	HX_STACKFRAME(&_hx_pos_f4e315b57d7f1149_22_get_colorTransform)
HXDLIN(  22)		return this->nmeObj->nmeGetColorTransform();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,get_colorTransform,return )

 ::nme::geom::ColorTransform Transform_obj::set_colorTransform( ::nme::geom::ColorTransform inTrans){
            	HX_STACKFRAME(&_hx_pos_f4e315b57d7f1149_23_set_colorTransform)
HXDLIN(  23)		this->nmeObj->nmeSetColorTransform(inTrans);
HXDLIN(  23)		return inTrans;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,set_colorTransform,return )

 ::nme::geom::ColorTransform Transform_obj::get_concatenatedColorTransform(){
            	HX_STACKFRAME(&_hx_pos_f4e315b57d7f1149_24_get_concatenatedColorTransform)
HXDLIN(  24)		return this->nmeObj->nmeGetConcatenatedColorTransform();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,get_concatenatedColorTransform,return )

 ::nme::geom::Matrix Transform_obj::get_concatenatedMatrix(){
            	HX_STACKFRAME(&_hx_pos_f4e315b57d7f1149_25_get_concatenatedMatrix)
HXDLIN(  25)		return this->nmeObj->nmeGetConcatenatedMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,get_concatenatedMatrix,return )

 ::nme::geom::Matrix Transform_obj::get_matrix(){
            	HX_STACKFRAME(&_hx_pos_f4e315b57d7f1149_26_get_matrix)
HXDLIN(  26)		return this->nmeObj->nmeGetMatrix();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,get_matrix,return )

 ::nme::geom::Matrix Transform_obj::set_matrix( ::nme::geom::Matrix inMatrix){
            	HX_STACKFRAME(&_hx_pos_f4e315b57d7f1149_27_set_matrix)
HXDLIN(  27)		this->nmeObj->nmeSetMatrix(inMatrix);
HXDLIN(  27)		return inMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Transform_obj,set_matrix,return )

 ::nme::geom::Rectangle Transform_obj::get_pixelBounds(){
            	HX_STACKFRAME(&_hx_pos_f4e315b57d7f1149_28_get_pixelBounds)
HXDLIN(  28)		return this->nmeObj->nmeGetPixelBounds();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Transform_obj,get_pixelBounds,return )


::hx::ObjectPtr< Transform_obj > Transform_obj::__new( ::nme::display::DisplayObject inParent) {
	::hx::ObjectPtr< Transform_obj > __this = new Transform_obj();
	__this->__construct(inParent);
	return __this;
}

::hx::ObjectPtr< Transform_obj > Transform_obj::__alloc(::hx::Ctx *_hx_ctx, ::nme::display::DisplayObject inParent) {
	Transform_obj *__this = (Transform_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Transform_obj), true, "nme.geom.Transform"));
	*(void **)__this = Transform_obj::_hx_vtable;
	__this->__construct(inParent);
	return __this;
}

Transform_obj::Transform_obj()
{
}

void Transform_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Transform);
	HX_MARK_MEMBER_NAME(concatenatedColorTransform,"concatenatedColorTransform");
	HX_MARK_MEMBER_NAME(concatenatedMatrix,"concatenatedMatrix");
	HX_MARK_MEMBER_NAME(pixelBounds,"pixelBounds");
	HX_MARK_MEMBER_NAME(nmeObj,"nmeObj");
	HX_MARK_END_CLASS();
}

void Transform_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(concatenatedColorTransform,"concatenatedColorTransform");
	HX_VISIT_MEMBER_NAME(concatenatedMatrix,"concatenatedMatrix");
	HX_VISIT_MEMBER_NAME(pixelBounds,"pixelBounds");
	HX_VISIT_MEMBER_NAME(nmeObj,"nmeObj");
}

::hx::Val Transform_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_matrix() ); }
		if (HX_FIELD_EQ(inName,"nmeObj") ) { return ::hx::Val( nmeObj ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_matrix") ) { return ::hx::Val( get_matrix_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_matrix") ) { return ::hx::Val( set_matrix_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pixelBounds") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_pixelBounds() : pixelBounds ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_colorTransform() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"get_pixelBounds") ) { return ::hx::Val( get_pixelBounds_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"concatenatedMatrix") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_concatenatedMatrix() : concatenatedMatrix ); }
		if (HX_FIELD_EQ(inName,"get_colorTransform") ) { return ::hx::Val( get_colorTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_colorTransform") ) { return ::hx::Val( set_colorTransform_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_concatenatedMatrix") ) { return ::hx::Val( get_concatenatedMatrix_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"concatenatedColorTransform") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_concatenatedColorTransform() : concatenatedColorTransform ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"get_concatenatedColorTransform") ) { return ::hx::Val( get_concatenatedColorTransform_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Transform_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"matrix") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_matrix(inValue.Cast<  ::nme::geom::Matrix >()) ); }
		if (HX_FIELD_EQ(inName,"nmeObj") ) { nmeObj=inValue.Cast<  ::nme::display::DisplayObject >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pixelBounds") ) { pixelBounds=inValue.Cast<  ::nme::geom::Rectangle >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_colorTransform(inValue.Cast<  ::nme::geom::ColorTransform >()) ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"concatenatedMatrix") ) { concatenatedMatrix=inValue.Cast<  ::nme::geom::Matrix >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"concatenatedColorTransform") ) { concatenatedColorTransform=inValue.Cast<  ::nme::geom::ColorTransform >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Transform_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("colorTransform",89,d7,3f,ad));
	outFields->push(HX_("concatenatedColorTransform",f8,e8,5a,77));
	outFields->push(HX_("concatenatedMatrix",b0,c0,9c,f8));
	outFields->push(HX_("matrix",41,36,c8,bb));
	outFields->push(HX_("pixelBounds",9b,69,aa,d7));
	outFields->push(HX_("nmeObj",51,c0,ed,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Transform_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::nme::geom::ColorTransform */ ,(int)offsetof(Transform_obj,concatenatedColorTransform),HX_("concatenatedColorTransform",f8,e8,5a,77)},
	{::hx::fsObject /*  ::nme::geom::Matrix */ ,(int)offsetof(Transform_obj,concatenatedMatrix),HX_("concatenatedMatrix",b0,c0,9c,f8)},
	{::hx::fsObject /*  ::nme::geom::Rectangle */ ,(int)offsetof(Transform_obj,pixelBounds),HX_("pixelBounds",9b,69,aa,d7)},
	{::hx::fsObject /*  ::nme::display::DisplayObject */ ,(int)offsetof(Transform_obj,nmeObj),HX_("nmeObj",51,c0,ed,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Transform_obj_sStaticStorageInfo = 0;
#endif

static ::String Transform_obj_sMemberFields[] = {
	HX_("concatenatedColorTransform",f8,e8,5a,77),
	HX_("concatenatedMatrix",b0,c0,9c,f8),
	HX_("pixelBounds",9b,69,aa,d7),
	HX_("nmeObj",51,c0,ed,00),
	HX_("get_colorTransform",52,b8,d9,48),
	HX_("set_colorTransform",c6,ea,88,25),
	HX_("get_concatenatedColorTransform",41,53,67,c6),
	HX_("get_concatenatedMatrix",f9,39,31,52),
	HX_("get_matrix",0a,a6,4f,ac),
	HX_("set_matrix",7e,44,cd,af),
	HX_("get_pixelBounds",32,21,8c,98),
	::String(null()) };

::hx::Class Transform_obj::__mClass;

void Transform_obj::__register()
{
	Transform_obj _hx_dummy;
	Transform_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.geom.Transform",42,d5,21,b2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Transform_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Transform_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Transform_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Transform_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace geom
