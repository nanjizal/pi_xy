// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_AlphaMode
#include <nme/AlphaMode.h>
#endif
namespace nme{

::nme::AlphaMode AlphaMode_obj::AlphaDefault;

::nme::AlphaMode AlphaMode_obj::AlphaIsPremultiplied;

::nme::AlphaMode AlphaMode_obj::AlphaPostprocess;

::nme::AlphaMode AlphaMode_obj::AlphaPreprocess;

::nme::AlphaMode AlphaMode_obj::AlphaUnmultiplied;

bool AlphaMode_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("AlphaDefault",23,6d,49,f7)) { outValue = AlphaMode_obj::AlphaDefault; return true; }
	if (inName==HX_("AlphaIsPremultiplied",6e,01,f4,b4)) { outValue = AlphaMode_obj::AlphaIsPremultiplied; return true; }
	if (inName==HX_("AlphaPostprocess",71,d7,55,1d)) { outValue = AlphaMode_obj::AlphaPostprocess; return true; }
	if (inName==HX_("AlphaPreprocess",8a,b1,3c,8c)) { outValue = AlphaMode_obj::AlphaPreprocess; return true; }
	if (inName==HX_("AlphaUnmultiplied",6a,5f,e3,2f)) { outValue = AlphaMode_obj::AlphaUnmultiplied; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(AlphaMode_obj)

int AlphaMode_obj::__FindIndex(::String inName)
{
	if (inName==HX_("AlphaDefault",23,6d,49,f7)) return 0;
	if (inName==HX_("AlphaIsPremultiplied",6e,01,f4,b4)) return 2;
	if (inName==HX_("AlphaPostprocess",71,d7,55,1d)) return 4;
	if (inName==HX_("AlphaPreprocess",8a,b1,3c,8c)) return 3;
	if (inName==HX_("AlphaUnmultiplied",6a,5f,e3,2f)) return 1;
	return super::__FindIndex(inName);
}

int AlphaMode_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("AlphaDefault",23,6d,49,f7)) return 0;
	if (inName==HX_("AlphaIsPremultiplied",6e,01,f4,b4)) return 0;
	if (inName==HX_("AlphaPostprocess",71,d7,55,1d)) return 0;
	if (inName==HX_("AlphaPreprocess",8a,b1,3c,8c)) return 0;
	if (inName==HX_("AlphaUnmultiplied",6a,5f,e3,2f)) return 0;
	return super::__FindArgCount(inName);
}

::hx::Val AlphaMode_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	if (inName==HX_("AlphaDefault",23,6d,49,f7)) return AlphaDefault;
	if (inName==HX_("AlphaIsPremultiplied",6e,01,f4,b4)) return AlphaIsPremultiplied;
	if (inName==HX_("AlphaPostprocess",71,d7,55,1d)) return AlphaPostprocess;
	if (inName==HX_("AlphaPreprocess",8a,b1,3c,8c)) return AlphaPreprocess;
	if (inName==HX_("AlphaUnmultiplied",6a,5f,e3,2f)) return AlphaUnmultiplied;
	return super::__Field(inName,inCallProp);
}

static ::String AlphaMode_obj_sStaticFields[] = {
	HX_("AlphaDefault",23,6d,49,f7),
	HX_("AlphaUnmultiplied",6a,5f,e3,2f),
	HX_("AlphaIsPremultiplied",6e,01,f4,b4),
	HX_("AlphaPreprocess",8a,b1,3c,8c),
	HX_("AlphaPostprocess",71,d7,55,1d),
	::String(null())
};

::hx::Class AlphaMode_obj::__mClass;

Dynamic __Create_AlphaMode_obj() { return new AlphaMode_obj; }

void AlphaMode_obj::__register()
{

::hx::Static(__mClass) = ::hx::_hx_RegisterClass(HX_("nme.AlphaMode",99,02,87,e0), ::hx::TCanCast< AlphaMode_obj >,AlphaMode_obj_sStaticFields,0,
	&__Create_AlphaMode_obj, &__Create,
	&super::__SGetClass(), &CreateAlphaMode_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &AlphaMode_obj::__GetStatic;
}

void AlphaMode_obj::__boot()
{
AlphaDefault = ::hx::CreateConstEnum< AlphaMode_obj >(HX_("AlphaDefault",23,6d,49,f7),0);
AlphaIsPremultiplied = ::hx::CreateConstEnum< AlphaMode_obj >(HX_("AlphaIsPremultiplied",6e,01,f4,b4),2);
AlphaPostprocess = ::hx::CreateConstEnum< AlphaMode_obj >(HX_("AlphaPostprocess",71,d7,55,1d),4);
AlphaPreprocess = ::hx::CreateConstEnum< AlphaMode_obj >(HX_("AlphaPreprocess",8a,b1,3c,8c),3);
AlphaUnmultiplied = ::hx::CreateConstEnum< AlphaMode_obj >(HX_("AlphaUnmultiplied",6a,5f,e3,2f),1);
}


} // end namespace nme
