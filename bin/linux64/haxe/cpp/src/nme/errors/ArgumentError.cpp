// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_errors_ArgumentError
#include <nme/errors/ArgumentError.h>
#endif
#ifndef INCLUDED_nme_errors_Error
#include <nme/errors/Error.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1e2df6490b12befb_4_new,"nme.errors.ArgumentError","new",0x7c3b5f02,"nme.errors.ArgumentError.new","nme/errors/ArgumentError.hx",4,0x3fd1a8ce)
namespace nme{
namespace errors{

void ArgumentError_obj::__construct( ::Dynamic inMessage, ::Dynamic id){
            	HX_STACKFRAME(&_hx_pos_1e2df6490b12befb_4_new)
HXDLIN(   4)		super::__construct(inMessage,id);
            	}

Dynamic ArgumentError_obj::__CreateEmpty() { return new ArgumentError_obj; }

void *ArgumentError_obj::_hx_vtable = 0;

Dynamic ArgumentError_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ArgumentError_obj > _hx_result = new ArgumentError_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ArgumentError_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1fc64822) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x1fc64822;
	} else {
		return inClassId==(int)0x46636817;
	}
}


ArgumentError_obj::ArgumentError_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ArgumentError_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ArgumentError_obj_sStaticStorageInfo = 0;
#endif

::hx::Class ArgumentError_obj::__mClass;

void ArgumentError_obj::__register()
{
	ArgumentError_obj _hx_dummy;
	ArgumentError_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.errors.ArgumentError",10,76,23,11);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ArgumentError_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArgumentError_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArgumentError_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace errors
