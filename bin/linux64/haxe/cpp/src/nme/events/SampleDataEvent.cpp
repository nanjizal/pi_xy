// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_SampleDataEvent
#include <nme/events/SampleDataEvent.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_84bc45207a6dc3b3_15_new,"nme.events.SampleDataEvent","new",0x88e7062b,"nme.events.SampleDataEvent.new","nme/events/SampleDataEvent.hx",15,0xb199a1c5)
HX_LOCAL_STACK_FRAME(_hx_pos_84bc45207a6dc3b3_25_clone,"nme.events.SampleDataEvent","clone",0x848791e8,"nme.events.SampleDataEvent.clone","nme/events/SampleDataEvent.hx",25,0xb199a1c5)
HX_LOCAL_STACK_FRAME(_hx_pos_84bc45207a6dc3b3_30_toString,"nme.events.SampleDataEvent","toString",0xcf8dbb01,"nme.events.SampleDataEvent.toString","nme/events/SampleDataEvent.hx",30,0xb199a1c5)
HX_LOCAL_STACK_FRAME(_hx_pos_84bc45207a6dc3b3_9_boot,"nme.events.SampleDataEvent","boot",0x39576007,"nme.events.SampleDataEvent.boot","nme/events/SampleDataEvent.hx",9,0xb199a1c5)
namespace nme{
namespace events{

void SampleDataEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable){
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_84bc45207a6dc3b3_15_new)
HXLINE(  16)		super::__construct(type,bubbles,cancelable);
HXLINE(  18)		this->data =  ::nme::utils::ByteArray_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  19)		this->data->bigEndian = false;
HXLINE(  20)		this->position = ((Float)0.0);
            	}

Dynamic SampleDataEvent_obj::__CreateEmpty() { return new SampleDataEvent_obj; }

void *SampleDataEvent_obj::_hx_vtable = 0;

Dynamic SampleDataEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SampleDataEvent_obj > _hx_result = new SampleDataEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool SampleDataEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x113d0d1f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x113d0d1f;
	} else {
		return inClassId==(int)0x26edf013;
	}
}

 ::nme::events::Event SampleDataEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_84bc45207a6dc3b3_25_clone)
HXDLIN(  25)		::String _hx_tmp = this->get_type();
HXDLIN(  25)		bool _hx_tmp1 = this->get_bubbles();
HXDLIN(  25)		return  ::nme::events::SampleDataEvent_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,this->get_cancelable());
            	}


::String SampleDataEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_84bc45207a6dc3b3_30_toString)
HXDLIN(  30)		::String _hx_tmp = ((HX_("[SampleDataEvent type=",4e,d8,16,fa) + this->get_type()) + HX_(" bubbles=",16,5f,ba,28));
HXDLIN(  30)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->get_bubbles())) + HX_(" cancelable=",89,25,e0,5d));
HXDLIN(  30)		return ((_hx_tmp1 + ::Std_obj::string(this->get_cancelable())) + HX_("]",5d,00,00,00));
            	}


::String SampleDataEvent_obj::SAMPLE_DATA;


::hx::ObjectPtr< SampleDataEvent_obj > SampleDataEvent_obj::__new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable) {
	::hx::ObjectPtr< SampleDataEvent_obj > __this = new SampleDataEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable);
	return __this;
}

::hx::ObjectPtr< SampleDataEvent_obj > SampleDataEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable) {
	SampleDataEvent_obj *__this = (SampleDataEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SampleDataEvent_obj), true, "nme.events.SampleDataEvent"));
	*(void **)__this = SampleDataEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable);
	return __this;
}

SampleDataEvent_obj::SampleDataEvent_obj()
{
}

void SampleDataEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SampleDataEvent);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(position,"position");
	 ::nme::events::Event_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SampleDataEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(position,"position");
	 ::nme::events::Event_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SampleDataEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return ::hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SampleDataEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::nme::utils::ByteArray >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SampleDataEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("position",a9,a0,fa,ca));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SampleDataEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::nme::utils::ByteArray */ ,(int)offsetof(SampleDataEvent_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsFloat,(int)offsetof(SampleDataEvent_obj,position),HX_("position",a9,a0,fa,ca)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo SampleDataEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &SampleDataEvent_obj::SAMPLE_DATA,HX_("SAMPLE_DATA",9f,d5,99,bc)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String SampleDataEvent_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("position",a9,a0,fa,ca),
	HX_("clone",5d,13,63,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void SampleDataEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SampleDataEvent_obj::SAMPLE_DATA,"SAMPLE_DATA");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SampleDataEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SampleDataEvent_obj::SAMPLE_DATA,"SAMPLE_DATA");
};

#endif

::hx::Class SampleDataEvent_obj::__mClass;

static ::String SampleDataEvent_obj_sStaticFields[] = {
	HX_("SAMPLE_DATA",9f,d5,99,bc),
	::String(null())
};

void SampleDataEvent_obj::__register()
{
	SampleDataEvent_obj _hx_dummy;
	SampleDataEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.SampleDataEvent",b9,14,70,69);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SampleDataEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SampleDataEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SampleDataEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SampleDataEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SampleDataEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SampleDataEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SampleDataEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SampleDataEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_84bc45207a6dc3b3_9_boot)
HXDLIN(   9)		SAMPLE_DATA = HX_("sampleData",74,3f,0b,5e);
            	}
}

} // end namespace nme
} // end namespace events
