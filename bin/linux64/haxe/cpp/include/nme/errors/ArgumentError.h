// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_errors_ArgumentError
#define INCLUDED_nme_errors_ArgumentError

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_errors_Error
#include <nme/errors/Error.h>
#endif
HX_DECLARE_STACK_FRAME(_hx_pos_1e2df6490b12befb_4_new)
HX_DECLARE_CLASS2(nme,errors,ArgumentError)
HX_DECLARE_CLASS2(nme,errors,Error)

namespace nme{
namespace errors{


class HXCPP_CLASS_ATTRIBUTES ArgumentError_obj : public  ::nme::errors::Error_obj
{
	public:
		typedef  ::nme::errors::Error_obj super;
		typedef ArgumentError_obj OBJ_;
		ArgumentError_obj();

	public:
		enum { _hx_ClassId = 0x1fc64822 };

		void __construct( ::Dynamic inMessage, ::Dynamic id);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.errors.ArgumentError")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.errors.ArgumentError"); }

		inline static ::hx::ObjectPtr< ArgumentError_obj > __new( ::Dynamic inMessage, ::Dynamic id) {
			::hx::ObjectPtr< ArgumentError_obj > __this = new ArgumentError_obj();
			__this->__construct(inMessage,id);
			return __this;
		}

		inline static ::hx::ObjectPtr< ArgumentError_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic inMessage, ::Dynamic id) {
			ArgumentError_obj *__this = (ArgumentError_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ArgumentError_obj), true, "nme.errors.ArgumentError"));
			*(void **)__this = ArgumentError_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_1e2df6490b12befb_4_new)
HXDLIN(   4)		__this->super::__construct(inMessage,id);
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ArgumentError_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ArgumentError",eb,77,4b,60); }

};

} // end namespace nme
} // end namespace errors

#endif /* INCLUDED_nme_errors_ArgumentError */ 
