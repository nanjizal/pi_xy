// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_geom_Point
#define INCLUDED_nme_geom_Point

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nme,geom,Point)

namespace nme{
namespace geom{


class HXCPP_CLASS_ATTRIBUTES Point_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Point_obj OBJ_;
		Point_obj();

	public:
		enum { _hx_ClassId = 0x7aecdaa6 };

		void __construct(::hx::Null< Float >  __o_inX,::hx::Null< Float >  __o_inY);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nme.geom.Point")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"nme.geom.Point"); }
		static ::hx::ObjectPtr< Point_obj > __new(::hx::Null< Float >  __o_inX,::hx::Null< Float >  __o_inY);
		static ::hx::ObjectPtr< Point_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_inX,::hx::Null< Float >  __o_inY);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Point_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Point",30,24,bd,59); }

		static Float distance( ::nme::geom::Point pt1, ::nme::geom::Point pt2);
		static ::Dynamic distance_dyn();

		static  ::nme::geom::Point interpolate( ::nme::geom::Point pt1, ::nme::geom::Point pt2,Float f);
		static ::Dynamic interpolate_dyn();

		static  ::nme::geom::Point polar(Float len,Float angle);
		static ::Dynamic polar_dyn();

		Float x;
		Float y;
		 ::nme::geom::Point add( ::nme::geom::Point v);
		::Dynamic add_dyn();

		 ::nme::geom::Point scaled(Float scale);
		::Dynamic scaled_dyn();

		 ::nme::geom::Point clone();
		::Dynamic clone_dyn();

		 ::nme::geom::Point setTo(Float inX,Float inY);
		::Dynamic setTo_dyn();

		void copyFrom( ::nme::geom::Point sourcePoint);
		::Dynamic copyFrom_dyn();

		Float dist( ::nme::geom::Point pt2);
		::Dynamic dist_dyn();

		Float dist2( ::nme::geom::Point pt2);
		::Dynamic dist2_dyn();

		bool equals( ::nme::geom::Point toCompare);
		::Dynamic equals_dyn();

		void normalize(Float thickness);
		::Dynamic normalize_dyn();

		void offset(Float dx,Float dy);
		::Dynamic offset_dyn();

		 ::nme::geom::Point subtract( ::nme::geom::Point v);
		::Dynamic subtract_dyn();

		virtual ::String toString();
		::Dynamic toString_dyn();

		Float get_length();
		::Dynamic get_length_dyn();

};

} // end namespace nme
} // end namespace geom

#endif /* INCLUDED_nme_geom_Point */ 
