// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_EllipseForm
#include <pi_xy/triangleGML/EllipseForm.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_BasicShape
#include <pi_xy/triangleGML/triGML/BasicShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_FillForm
#include <pi_xy/triangleGML/triGML/FillForm.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_GroupShape
#include <pi_xy/triangleGML/triGML/GroupShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_ShapeInterface
#include <pi_xy/triangleGML/triGML/ShapeInterface.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_shape_form_EllipseForm_
#include <pi_xy/triangleGML/triGML/shape/form/EllipseForm_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4bc4c2a1462e423f_6_new,"pi_xy.triangleGML.EllipseForm","new",0x98c7fa1d,"pi_xy.triangleGML.EllipseForm.new","pi_xy/triangleGML/EllipseForm.hx",6,0x468dd4f5)
HX_LOCAL_STACK_FRAME(_hx_pos_4bc4c2a1462e423f_7_render,"pi_xy.triangleGML.EllipseForm","render",0xc3e235b9,"pi_xy.triangleGML.EllipseForm.render","pi_xy/triangleGML/EllipseForm.hx",7,0x468dd4f5)
namespace pi_xy{
namespace triangleGML{

void EllipseForm_obj::__construct( ::Dynamic opacity, ::Dynamic visibility, ::Dynamic strokeColor, ::Dynamic strokeWidth,::Array< ::String > strokeDashGapArray, ::Dynamic fill, ::Dynamic left, ::Dynamic top, ::Dynamic width, ::Dynamic height){
            	HX_STACKFRAME(&_hx_pos_4bc4c2a1462e423f_6_new)
HXDLIN(   6)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,fill,left,top,width,height);
            	}

Dynamic EllipseForm_obj::__CreateEmpty() { return new EllipseForm_obj; }

void *EllipseForm_obj::_hx_vtable = 0;

Dynamic EllipseForm_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EllipseForm_obj > _hx_result = new EllipseForm_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9]);
	return _hx_result;
}

bool EllipseForm_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4f186619) {
		if (inClassId<=(int)0x1bfcc98b) {
			if (inClassId<=(int)0x1a0bd5c0) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x1a0bd5c0;
			} else {
				return inClassId==(int)0x1bfcc98b;
			}
		} else {
			return inClassId==(int)0x4f186619;
		}
	} else {
		return inClassId==(int)0x76428c00 || inClassId==(int)0x7ff8cec5;
	}
}

 ::Dynamic EllipseForm_obj::render( ::Dynamic _tmp_pixelImage){
            	HX_GC_STACKFRAME(&_hx_pos_4bc4c2a1462e423f_7_render)
HXLINE(   8)		 ::pi_xy::ImageStruct pixelImage = ( ( ::pi_xy::ImageStruct)(_tmp_pixelImage) );
HXDLIN(   8)		int width = ::Math_obj::ceil(this->width);
HXDLIN(   8)		int height = ::Math_obj::ceil(this->height);
HXDLIN(   8)		 ::Dynamic imageType = null();
HXDLIN(   8)		 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(   8)		if (::hx::IsNull( imageType )) {
HXLINE(  54)			imageType = ::pi_xy::ImageStruct_obj::defaultType;
            		}
HXLINE(   8)		::Dynamic _hx_tmp;
HXDLIN(   8)		switch((int)(( (int)(imageType) ))){
            			case (int)0: {
HXLINE(   8)				 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(   8)				 ::iterMagic::BytesImg b = byt;
HXDLIN(   8)				{
HXLINE(   8)					b->width = width;
HXDLIN(   8)					b->height = height;
HXDLIN(   8)					b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(   8)					b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(   8)					{
HXLINE(   8)						int len = b->length;
HXDLIN(   8)						int w = 0;
HXDLIN(   8)						{
HXLINE(   8)							int _g = 0;
HXDLIN(   8)							int _g1 = b->height;
HXDLIN(   8)							while((_g < _g1)){
HXLINE(   8)								_g = (_g + 1);
HXDLIN(   8)								int y = (_g - 1);
HXDLIN(   8)								{
HXLINE(   8)									int _g2 = 0;
HXDLIN(   8)									int _g3 = b->width;
HXDLIN(   8)									while((_g2 < _g3)){
HXLINE(   8)										_g2 = (_g2 + 1);
HXDLIN(   8)										int x = (_g2 - 1);
HXDLIN(   8)										{
HXLINE(   8)											w = (w + 1);
HXDLIN(   8)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(   8)										{
HXLINE(   8)											w = (w + 1);
HXDLIN(   8)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(   8)										{
HXLINE(   8)											w = (w + 1);
HXDLIN(   8)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(   8)										{
HXLINE(   8)											w = (w + 1);
HXDLIN(   8)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(   8)				_hx_tmp = b;
            			}
            			break;
            			case (int)1: {
HXLINE(   8)				 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(   8)				 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(   8)				{
HXLINE(   8)					a->width = width;
HXDLIN(   8)					a->height = height;
HXDLIN(   8)					a->data = ::Array_obj< int >::__new(0);
HXDLIN(   8)					a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(   8)					{
HXLINE(   8)						int _g4 = 0;
HXDLIN(   8)						int _g5 = a->length;
HXDLIN(   8)						while((_g4 < _g5)){
HXLINE(   8)							_g4 = (_g4 + 1);
HXDLIN(   8)							int i = (_g4 - 1);
HXDLIN(   8)							a->data[i] = 0;
            						}
            					}
            				}
HXDLIN(   8)				_hx_tmp = a;
            			}
            			break;
            			case (int)2: {
HXLINE(   8)				 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(   8)				 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(   8)				{
HXLINE(   8)					b1->width = width;
HXDLIN(   8)					b1->height = height;
HXDLIN(   8)					b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(   8)					int size = (b1->length * 4);
HXDLIN(   8)					b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(   8)					{
HXLINE(   8)						int _g6 = 0;
HXDLIN(   8)						int _g7 = b1->length;
HXDLIN(   8)						while((_g6 < _g7)){
HXLINE(   8)							_g6 = (_g6 + 1);
HXDLIN(   8)							int i1 = (_g6 - 1);
HXDLIN(   8)							{
HXLINE(   8)								 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN(   8)								bool _hx_tmp1;
HXDLIN(   8)								if ((i1 >= 0)) {
HXLINE(   8)									_hx_tmp1 = (i1 < (this2->byteLength >> 2));
            								}
            								else {
HXLINE(   8)									_hx_tmp1 = false;
            								}
HXDLIN(   8)								if (_hx_tmp1) {
HXLINE(   8)									 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN(   8)									int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN(   8)									_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(   8)									_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(   8)									_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(   8)									_this->b[(pos + 3)] = ( (unsigned char)(0) );
            								}
            							}
            						}
            					}
            				}
HXDLIN(   8)				_hx_tmp = b1;
            			}
            			break;
            			case (int)3: {
HXLINE(   8)				 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(   8)				 ::iterMagic::VecIntImg v = vec;
HXDLIN(   8)				{
HXLINE(   8)					v->width = width;
HXDLIN(   8)					v->height = height;
HXDLIN(   8)					v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(   8)					v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(   8)					{
HXLINE(   8)						int _g8 = 0;
HXDLIN(   8)						int _g9 = v->length;
HXDLIN(   8)						while((_g8 < _g9)){
HXLINE(   8)							_g8 = (_g8 + 1);
HXDLIN(   8)							int i2 = (_g8 - 1);
HXDLIN(   8)							v->data->__unsafe_set(i2,0);
            						}
            					}
            				}
HXDLIN(   8)				_hx_tmp = v;
            			}
            			break;
            			case (int)4: {
HXLINE(   8)				 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(   8)				 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(   8)				{
HXLINE(   8)					b2->width = width;
HXDLIN(   8)					b2->height = height;
HXDLIN(   8)					b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(   8)					b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(   8)					{
HXLINE(   8)						int len1 = b2->length;
HXDLIN(   8)						 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(   8)						if (::hx::IsNull( d->head )) {
HXLINE(   8)							int _g10 = 0;
HXDLIN(   8)							int _g11 = len1;
HXDLIN(   8)							while((_g10 < _g11)){
HXLINE(   8)								_g10 = (_g10 + 1);
HXDLIN(   8)								int i3 = (_g10 - 1);
HXDLIN(   8)								d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            							}
            						}
            						else {
HXLINE(   8)							int _g12 = 0;
HXDLIN(   8)							int _g13 = len1;
HXDLIN(   8)							while((_g12 < _g13)){
HXLINE(   8)								_g12 = (_g12 + 1);
HXDLIN(   8)								int i4 = (_g12 - 1);
HXDLIN(   8)								{
HXLINE(   8)									 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(   8)									 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(   8)									{
HXLINE(   8)										int _g14 = 0;
HXDLIN(   8)										int _g15 = i4;
HXDLIN(   8)										while((_g14 < _g15)){
HXLINE(   8)											_g14 = (_g14 + 1);
HXDLIN(   8)											int i5 = (_g14 - 1);
HXLINE( 345)											prev = l;
HXLINE( 346)											l = l->next;
            										}
            									}
HXLINE(   8)									if (::hx::IsNull( prev )) {
HXLINE(   8)										b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(   8)										l = null();
            									}
            									else {
HXLINE(   8)										prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(   8)										l = null();
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(   8)				_hx_tmp = b2;
            			}
            			break;
            		}
HXDLIN(   8)		this1->image = _hx_tmp;
HXDLIN(   8)		this1->width = width;
HXDLIN(   8)		this1->height = height;
HXDLIN(   8)		this1->imageType = ( (int)(imageType) );
HXDLIN(   8)		 ::pi_xy::ImageStruct temp = this1;
HXLINE(   9)		temp->transparent = false;
HXLINE(  10)		Float rW = (this->width / ( (Float)(2) ));
HXLINE(  11)		Float rH = (this->height / ( (Float)(2) ));
HXLINE(  12)		Float innerRw = (rW - (this->strokeWidth / ( (Float)(2) )));
HXLINE(  13)		Float innerRh = (rH - (this->strokeWidth / ( (Float)(2) )));
HXLINE(  14)		Float cx = rW;
HXLINE(  15)		Float cy = rH;
HXLINE(  16)		int phi = 0;
HXLINE(  17)		Float innerCx = (cx + this->strokeWidth);
HXLINE(  18)		Float innerCy = (cy + this->strokeWidth);
HXLINE(  19)		if ((this->edgeSoft == ((Float)0.))) {
HXLINE(  20)			{
HXLINE(  20)				 ::pi_xy::ImageStruct this3 = temp;
HXDLIN(  20)				int color = this->strokeColor;
HXDLIN(  20)				 ::Dynamic phi1 = phi;
HXDLIN(  20)				if (::hx::IsNull( phi1 )) {
HXLINE(  20)					phi1 = 0;
            				}
HXDLIN(  20)				Float rSmall;
HXDLIN(  20)				if ((rW > rH)) {
HXLINE(  20)					rSmall = rH;
            				}
            				else {
HXLINE(  20)					rSmall = rW;
            				}
HXDLIN(  20)				 ::Dynamic targetE = ((Float)1.05);
HXDLIN(  20)				if (::hx::IsNull( targetE )) {
HXLINE( 534)					targetE = ((Float)1.05);
            				}
HXLINE(  20)				int result = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE) ) / rSmall)))));
HXDLIN(  20)				int noSides;
HXDLIN(  20)				if ((result < 12)) {
HXLINE(  20)					noSides = 12;
            				}
            				else {
HXLINE(  20)					if ((result > 500)) {
HXLINE(  20)						noSides = 500;
            					}
            					else {
HXLINE(  20)						noSides = result;
            					}
            				}
HXDLIN(  20)				{
HXLINE(  20)					 ::Dynamic phi2 = phi1;
HXDLIN(  20)					 ::Dynamic sides = noSides;
HXDLIN(  20)					if (::hx::IsNull( sides )) {
HXLINE( 540)						sides = 36;
            					}
HXLINE(  20)					if (::hx::IsNull( phi2 )) {
HXLINE( 539)						phi2 = ((Float)0.);
            					}
HXLINE(  20)					{
HXLINE(  20)						 ::Dynamic phi3 = phi2;
HXDLIN(  20)						 ::Dynamic sides1 = sides;
HXDLIN(  20)						if (::hx::IsNull( sides1 )) {
HXLINE( 212)							sides1 = 36;
            						}
HXLINE(  20)						if (::hx::IsNull( phi3 )) {
HXLINE( 211)							phi3 = ((Float)0.);
            						}
HXLINE(  20)						Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides1) ));
HXDLIN(  20)						Float omega;
HXDLIN(  20)						omega = ((Float)0.);
HXDLIN(  20)						Float lastX = ((Float)0.);
HXDLIN(  20)						Float lastY = ((Float)0.);
HXDLIN(  20)						if (::hx::IsNotEq( phi3,0 )) {
HXLINE(  35)							lastX = ((((rW * ::Math_obj::cos(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::cos(( (Float)(phi3) ))) - ((rH * ::Math_obj::sin(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::sin(( (Float)(phi3) )))) + cx);
HXLINE(  36)							lastY = ((((rW * ::Math_obj::cos(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::sin(( (Float)(phi3) ))) + ((rH * ::Math_obj::sin(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::cos(( (Float)(phi3) )))) + cy);
            						}
            						else {
HXLINE(  38)							lastX = (cx + (rW * ::Math_obj::cos(((( (Float)(sides1) ) * theta) + omega))));
HXLINE(  39)							lastY = (cy + (rH * ::Math_obj::sin(((( (Float)(sides1) ) * theta) + omega))));
            						}
HXLINE(  20)						if (::hx::IsNotEq( phi3,0 )) {
HXLINE(  20)							Float cphi = ::Math_obj::cos(( (Float)(phi3) ));
HXDLIN(  20)							Float sphi = ::Math_obj::sin(( (Float)(phi3) ));
HXDLIN(  20)							{
HXLINE(  20)								int _g16 = 0;
HXDLIN(  20)								int _g17 = (sides1 + 1);
HXDLIN(  20)								while((_g16 < _g17)){
HXLINE(  20)									_g16 = (_g16 + 1);
HXDLIN(  20)									int i6 = (_g16 - 1);
HXDLIN(  20)									Float stheta = ::Math_obj::sin((((( (Float)(i6) ) * theta) + omega) + ((Float)0.01)));
HXDLIN(  20)									Float ctheta = ::Math_obj::cos((((( (Float)(i6) ) * theta) + omega) + ((Float)0.01)));
HXDLIN(  20)									Float nextX = ((((rW * ctheta) * cphi) - ((rH * stheta) * sphi)) + cx);
HXDLIN(  20)									Float nextY = ((((rW * ctheta) * sphi) + ((rH * stheta) * cphi)) + cy);
HXDLIN(  20)									{
HXLINE(  20)										 ::pi_xy::ImageStruct this4 = this3;
HXDLIN(  20)										bool hasHit = false;
HXDLIN(  20)										bool hasUndo = false;
HXDLIN(  20)										{
HXLINE(  20)											Float bx = lastX;
HXDLIN(  20)											Float by = lastY;
HXDLIN(  20)											Float cx1 = nextX;
HXDLIN(  20)											Float cy1 = nextY;
HXDLIN(  20)											bool adjustWinding = (((((cx * by) - (bx * cy)) + ((bx * cy1) - (cx1 * by))) + ((cx1 * cy) - (cx * cy1))) > 0);
HXDLIN(  20)											if (!(adjustWinding)) {
HXLINE(  20)												Float bx_ = bx;
HXDLIN(  20)												Float by_ = by;
HXLINE(  25)												bx = cx1;
HXLINE(  26)												by = cy1;
HXLINE(  27)												cx1 = bx_;
HXLINE(  28)												cy1 = by_;
            											}
HXLINE(  20)											{
HXLINE(  20)												Float s0 = ((cy * cx1) - (cx * cy1));
HXDLIN(  20)												Float sx = (cy1 - cy);
HXDLIN(  20)												Float sy = (cx - cx1);
HXDLIN(  20)												Float t0 = ((cx * by) - (cy * bx));
HXDLIN(  20)												Float tx = (cy - by);
HXDLIN(  20)												Float ty = (bx - cx);
HXDLIN(  20)												Float A = ((((-(by) * cx1) + (cy * (-(bx) + cx1))) + (cx * (by - cy1))) + (bx * cy1));
HXDLIN(  20)												 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  20)												if ((cx > bx)) {
HXLINE(  20)													if ((cx > cx1)) {
HXLINE(  20)														int min;
HXDLIN(  20)														if ((bx > cx1)) {
HXLINE(  20)															min = ::Math_obj::floor(cx1);
            														}
            														else {
HXLINE(  20)															min = ::Math_obj::floor(bx);
            														}
HXDLIN(  20)														int ii_min = min;
HXDLIN(  20)														int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  20)														xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            													}
            													else {
HXLINE(  20)														int ii_min1 = ::Math_obj::floor(bx);
HXDLIN(  20)														int ii_max1 = ::Math_obj::ceil(cx1);
HXDLIN(  20)														xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            													}
            												}
            												else {
HXLINE(  20)													if ((bx > cx1)) {
HXLINE(  20)														int min1;
HXDLIN(  20)														if ((cx > cx1)) {
HXLINE(  20)															min1 = ::Math_obj::floor(cx1);
            														}
            														else {
HXLINE(  20)															min1 = ::Math_obj::ceil(cx);
            														}
HXDLIN(  20)														int ii_min2 = min1;
HXDLIN(  20)														int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN(  20)														xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            													}
            													else {
HXLINE(  20)														int ii_min3 = ::Math_obj::floor(cx);
HXDLIN(  20)														int ii_max3 = ::Math_obj::ceil(cx1);
HXDLIN(  20)														xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            													}
            												}
HXDLIN(  20)												 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  20)												if ((cy > by)) {
HXLINE(  20)													if ((cy > cy1)) {
HXLINE(  20)														int min2;
HXDLIN(  20)														if ((by > cy1)) {
HXLINE(  20)															min2 = ::Math_obj::floor(cy1);
            														}
            														else {
HXLINE(  20)															min2 = ::Math_obj::floor(by);
            														}
HXDLIN(  20)														int ii_min4 = min2;
HXDLIN(  20)														int ii_max4 = ::Math_obj::ceil(cy);
HXDLIN(  20)														yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            													}
            													else {
HXLINE(  20)														int ii_min5 = ::Math_obj::floor(by);
HXDLIN(  20)														int ii_max5 = ::Math_obj::ceil(cy1);
HXDLIN(  20)														yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            													}
            												}
            												else {
HXLINE(  20)													if ((by > cy1)) {
HXLINE(  20)														int min3;
HXDLIN(  20)														if ((cy > cy1)) {
HXLINE(  20)															min3 = ::Math_obj::floor(cy1);
            														}
            														else {
HXLINE(  20)															min3 = ::Math_obj::ceil(cy);
            														}
HXDLIN(  20)														int ii_min6 = min3;
HXDLIN(  20)														int ii_max6 = ::Math_obj::ceil(by);
HXDLIN(  20)														yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            													}
            													else {
HXLINE(  20)														int ii_min7 = ::Math_obj::floor(cy);
HXDLIN(  20)														int ii_max7 = ::Math_obj::ceil(cy1);
HXDLIN(  20)														yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            													}
            												}
HXDLIN(  20)												 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  20)												if (hasUndo) {
HXLINE(  20)													int width1 = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  20)													int height1 = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  20)													 ::Dynamic imageType1 = null();
HXDLIN(  20)													 ::pi_xy::ImageStruct this5 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  20)													if (::hx::IsNull( imageType1 )) {
HXLINE(  54)														imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            													}
HXLINE(  20)													::Dynamic undoImage1;
HXDLIN(  20)													switch((int)(( (int)(imageType1) ))){
            														case (int)0: {
HXLINE(  20)															 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  20)															 ::iterMagic::BytesImg b3 = byt1;
HXDLIN(  20)															{
HXLINE(  20)																b3->width = width1;
HXDLIN(  20)																b3->height = height1;
HXDLIN(  20)																b3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  20)																b3->data = ::haxe::io::Bytes_obj::alloc((b3->length * 4));
HXDLIN(  20)																{
HXLINE(  20)																	int len2 = b3->length;
HXDLIN(  20)																	int w1 = 0;
HXDLIN(  20)																	{
HXLINE(  20)																		int _g18 = 0;
HXDLIN(  20)																		int _g19 = b3->height;
HXDLIN(  20)																		while((_g18 < _g19)){
HXLINE(  20)																			_g18 = (_g18 + 1);
HXDLIN(  20)																			int y1 = (_g18 - 1);
HXDLIN(  20)																			{
HXLINE(  20)																				int _g20 = 0;
HXDLIN(  20)																				int _g21 = b3->width;
HXDLIN(  20)																				while((_g20 < _g21)){
HXLINE(  20)																					_g20 = (_g20 + 1);
HXDLIN(  20)																					int x1 = (_g20 - 1);
HXDLIN(  20)																					{
HXLINE(  20)																						w1 = (w1 + 1);
HXDLIN(  20)																						b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																					}
HXDLIN(  20)																					{
HXLINE(  20)																						w1 = (w1 + 1);
HXDLIN(  20)																						b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																					}
HXDLIN(  20)																					{
HXLINE(  20)																						w1 = (w1 + 1);
HXDLIN(  20)																						b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																					}
HXDLIN(  20)																					{
HXLINE(  20)																						w1 = (w1 + 1);
HXDLIN(  20)																						b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																					}
            																				}
            																			}
            																		}
            																	}
            																}
            															}
HXDLIN(  20)															undoImage1 = b3;
            														}
            														break;
            														case (int)1: {
HXLINE(  20)															 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)															 ::iterMagic::ArrIntImg a1 = arrI1;
HXDLIN(  20)															{
HXLINE(  20)																a1->width = width1;
HXDLIN(  20)																a1->height = height1;
HXDLIN(  20)																a1->data = ::Array_obj< int >::__new(0);
HXDLIN(  20)																a1->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  20)																{
HXLINE(  20)																	int _g22 = 0;
HXDLIN(  20)																	int _g23 = a1->length;
HXDLIN(  20)																	while((_g22 < _g23)){
HXLINE(  20)																		_g22 = (_g22 + 1);
HXDLIN(  20)																		int i7 = (_g22 - 1);
HXDLIN(  20)																		a1->data[i7] = 0;
            																	}
            																}
            															}
HXDLIN(  20)															undoImage1 = a1;
            														}
            														break;
            														case (int)2: {
HXLINE(  20)															 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  20)															 ::iterMagic::U32ArrImg b4 = u32a1;
HXDLIN(  20)															{
HXLINE(  20)																b4->width = width1;
HXDLIN(  20)																b4->height = height1;
HXDLIN(  20)																b4->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  20)																int size1 = (b4->length * 4);
HXDLIN(  20)																b4->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  20)																{
HXLINE(  20)																	int _g24 = 0;
HXDLIN(  20)																	int _g25 = b4->length;
HXDLIN(  20)																	while((_g24 < _g25)){
HXLINE(  20)																		_g24 = (_g24 + 1);
HXDLIN(  20)																		int i8 = (_g24 - 1);
HXDLIN(  20)																		{
HXLINE(  20)																			 ::haxe::io::ArrayBufferViewImpl this6 = b4->data;
HXDLIN(  20)																			bool undoImage2;
HXDLIN(  20)																			if ((i8 >= 0)) {
HXLINE(  20)																				undoImage2 = (i8 < (this6->byteLength >> 2));
            																			}
            																			else {
HXLINE(  20)																				undoImage2 = false;
            																			}
HXDLIN(  20)																			if (undoImage2) {
HXLINE(  20)																				 ::haxe::io::Bytes _this1 = this6->bytes;
HXDLIN(  20)																				int pos1 = ((i8 << 2) + this6->byteOffset);
HXDLIN(  20)																				_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  20)																				_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  20)																				_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  20)																				_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
HXDLIN(  20)															undoImage1 = b4;
            														}
            														break;
            														case (int)3: {
HXLINE(  20)															 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)															 ::iterMagic::VecIntImg v1 = vec1;
HXDLIN(  20)															{
HXLINE(  20)																v1->width = width1;
HXDLIN(  20)																v1->height = height1;
HXDLIN(  20)																v1->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  20)																v1->data = ::Array_obj< int >::__new(v1->length);
HXDLIN(  20)																{
HXLINE(  20)																	int _g26 = 0;
HXDLIN(  20)																	int _g27 = v1->length;
HXDLIN(  20)																	while((_g26 < _g27)){
HXLINE(  20)																		_g26 = (_g26 + 1);
HXDLIN(  20)																		int i9 = (_g26 - 1);
HXDLIN(  20)																		v1->data->__unsafe_set(i9,0);
            																	}
            																}
            															}
HXDLIN(  20)															undoImage1 = v1;
            														}
            														break;
            														case (int)4: {
HXLINE(  20)															 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)															 ::iterMagic::StackIntImg b5 = sInt1;
HXDLIN(  20)															{
HXLINE(  20)																b5->width = width1;
HXDLIN(  20)																b5->height = height1;
HXDLIN(  20)																b5->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  20)																b5->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  20)																{
HXLINE(  20)																	int len3 = b5->length;
HXDLIN(  20)																	 ::haxe::ds::GenericStack_Int d1 = b5->data;
HXDLIN(  20)																	if (::hx::IsNull( d1->head )) {
HXLINE(  20)																		int _g28 = 0;
HXDLIN(  20)																		int _g29 = len3;
HXDLIN(  20)																		while((_g28 < _g29)){
HXLINE(  20)																			_g28 = (_g28 + 1);
HXDLIN(  20)																			int i10 = (_g28 - 1);
HXDLIN(  20)																			d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            																		}
            																	}
            																	else {
HXLINE(  20)																		int _g30 = 0;
HXDLIN(  20)																		int _g31 = len3;
HXDLIN(  20)																		while((_g30 < _g31)){
HXLINE(  20)																			_g30 = (_g30 + 1);
HXDLIN(  20)																			int i11 = (_g30 - 1);
HXDLIN(  20)																			{
HXLINE(  20)																				 ::haxe::ds::GenericCell_Int l1 = b5->data->head;
HXDLIN(  20)																				 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  20)																				{
HXLINE(  20)																					int _g32 = 0;
HXDLIN(  20)																					int _g33 = i11;
HXDLIN(  20)																					while((_g32 < _g33)){
HXLINE(  20)																						_g32 = (_g32 + 1);
HXDLIN(  20)																						int i12 = (_g32 - 1);
HXLINE( 345)																						prev1 = l1;
HXLINE( 346)																						l1 = l1->next;
            																					}
            																				}
HXLINE(  20)																				if (::hx::IsNull( prev1 )) {
HXLINE(  20)																					b5->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  20)																					l1 = null();
            																				}
            																				else {
HXLINE(  20)																					prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  20)																					l1 = null();
            																				}
            																			}
            																		}
            																	}
            																}
            															}
HXDLIN(  20)															undoImage1 = b5;
            														}
            														break;
            													}
HXDLIN(  20)													this5->image = undoImage1;
HXDLIN(  20)													this5->width = width1;
HXDLIN(  20)													this5->height = height1;
HXDLIN(  20)													this5->imageType = ( (int)(imageType1) );
HXDLIN(  20)													undoImage = this5;
HXDLIN(  20)													{
HXLINE(  20)														int rectLeft = xIter3->start;
HXDLIN(  20)														int rectTop = yIter3->start;
HXDLIN(  20)														int rectRight = xIter3->max;
HXDLIN(  20)														bool forceClear = false;
HXDLIN(  20)														{
HXLINE(  20)															int _g34 = rectTop;
HXDLIN(  20)															int _g35 = yIter3->max;
HXDLIN(  20)															while((_g34 < _g35)){
HXLINE(  20)																_g34 = (_g34 + 1);
HXDLIN(  20)																int dy = (_g34 - 1);
HXDLIN(  20)																{
HXLINE(  20)																	int _g36 = rectLeft;
HXDLIN(  20)																	int _g37 = rectRight;
HXDLIN(  20)																	while((_g36 < _g37)){
HXLINE(  20)																		_g36 = (_g36 + 1);
HXDLIN(  20)																		int dx = (_g36 - 1);
HXDLIN(  20)																		::Dynamic this7 = this4->image;
HXDLIN(  20)																		int index;
HXDLIN(  20)																		if (this4->useVirtualPos) {
HXLINE(  20)																			index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx) - this4->virtualX));
            																		}
            																		else {
HXLINE(  20)																			index = ::Std_obj::_hx_int(( (Float)(((dy * this4->width) + dx)) ));
            																		}
HXDLIN(  20)																		int c = ::iterMagic::Iimg_obj::get(this7,index);
HXDLIN(  20)																		int col;
HXDLIN(  20)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																			col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  20)																			col = c;
            																		}
HXDLIN(  20)																		bool _hx_tmp2;
HXDLIN(  20)																		if (this4->useMask) {
HXLINE(  20)																			_hx_tmp2 = ::hx::IsNotNull( this4->mask );
            																		}
            																		else {
HXLINE(  20)																			_hx_tmp2 = false;
            																		}
HXDLIN(  20)																		if (_hx_tmp2) {
HXLINE(  20)																			 ::pi_xy::ImageStruct this8 = this4->mask;
HXDLIN(  20)																			::Dynamic this9 = this8->image;
HXDLIN(  20)																			int index1;
HXDLIN(  20)																			if (this8->useVirtualPos) {
HXLINE(  20)																				index1 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this8->virtualY) * ( (Float)(this8->width) )) + dx) - this8->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index1 = ::Std_obj::_hx_int(( (Float)(((dy * this8->width) + dx)) ));
            																			}
HXDLIN(  20)																			int c1 = ::iterMagic::Iimg_obj::get(this9,index1);
HXDLIN(  20)																			int v2;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				v2 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				v2 = c1;
            																			}
HXDLIN(  20)																			int maskPixel = v2;
HXDLIN(  20)																			int this10 = col;
HXDLIN(  20)																			if ((maskPixel == 0)) {
HXLINE(  20)																				col = this10;
            																			}
            																			else {
HXLINE(  20)																				Float m0;
HXDLIN(  20)																				int this11 = ((maskPixel >> 24) & 255);
HXDLIN(  20)																				if ((this11 == 0)) {
HXLINE(  20)																					m0 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					m0 = (( (Float)(this11) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float m1;
HXDLIN(  20)																				int this12 = ((maskPixel >> 16) & 255);
HXDLIN(  20)																				if ((this12 == 0)) {
HXLINE(  20)																					m1 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					m1 = (( (Float)(this12) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float m2;
HXDLIN(  20)																				int this13 = ((maskPixel >> 8) & 255);
HXDLIN(  20)																				if ((this13 == 0)) {
HXLINE(  20)																					m2 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					m2 = (( (Float)(this13) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float m3;
HXDLIN(  20)																				int this14 = (maskPixel & 255);
HXDLIN(  20)																				if ((this14 == 0)) {
HXLINE(  20)																					m3 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					m3 = (( (Float)(this14) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this10 >> 24) & 255)) )));
HXDLIN(  20)																				int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this10 >> 16) & 255)) )));
HXDLIN(  20)																				int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this10 >> 8) & 255)) )));
HXDLIN(  20)																				int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this10 & 255)) )));
HXDLIN(  20)																				col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																			}
            																		}
HXDLIN(  20)																		if ((col != 0)) {
HXLINE(  20)																			int x2 = (dx - rectLeft);
HXDLIN(  20)																			int y2 = (dy - rectTop);
HXDLIN(  20)																			int c2 = col;
HXDLIN(  20)																			bool _hx_tmp3;
HXDLIN(  20)																			if ((((c2 >> 24) & 255) < 254)) {
HXLINE(  20)																				_hx_tmp3 = undoImage->transparent;
            																			}
            																			else {
HXLINE(  20)																				_hx_tmp3 = false;
            																			}
HXDLIN(  20)																			if (_hx_tmp3) {
HXLINE(  20)																				int location;
HXDLIN(  20)																				if (undoImage->useVirtualPos) {
HXLINE(  20)																					location = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            																				}
            																				else {
HXLINE(  20)																					location = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            																				}
HXDLIN(  20)																				int this15 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  20)																				int this16;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					this16 = ((((((this15 >> 24) & 255) << 24) | ((this15 & 255) << 16)) | (((this15 >> 8) & 255) << 8)) | ((this15 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					this16 = this15;
            																				}
HXDLIN(  20)																				Float a11;
HXDLIN(  20)																				int this17 = ((this16 >> 24) & 255);
HXDLIN(  20)																				if ((this17 == 0)) {
HXLINE(  20)																					a11 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					a11 = (( (Float)(this17) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float r1;
HXDLIN(  20)																				int this18 = ((this16 >> 16) & 255);
HXDLIN(  20)																				if ((this18 == 0)) {
HXLINE(  20)																					r1 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					r1 = (( (Float)(this18) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float g1;
HXDLIN(  20)																				int this19 = ((this16 >> 8) & 255);
HXDLIN(  20)																				if ((this19 == 0)) {
HXLINE(  20)																					g1 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					g1 = (( (Float)(this19) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float b11;
HXDLIN(  20)																				int this20 = (this16 & 255);
HXDLIN(  20)																				if ((this20 == 0)) {
HXLINE(  20)																					b11 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					b11 = (( (Float)(this20) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float a2;
HXDLIN(  20)																				int this21 = ((col >> 24) & 255);
HXDLIN(  20)																				if ((this21 == 0)) {
HXLINE(  20)																					a2 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					a2 = (( (Float)(this21) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float r2;
HXDLIN(  20)																				int this22 = ((col >> 16) & 255);
HXDLIN(  20)																				if ((this22 == 0)) {
HXLINE(  20)																					r2 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					r2 = (( (Float)(this22) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float g2;
HXDLIN(  20)																				int this23 = ((col >> 8) & 255);
HXDLIN(  20)																				if ((this23 == 0)) {
HXLINE(  20)																					g2 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					g2 = (( (Float)(this23) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float b21;
HXDLIN(  20)																				int this24 = (col & 255);
HXDLIN(  20)																				if ((this24 == 0)) {
HXLINE(  20)																					b21 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					b21 = (( (Float)(this24) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN(  20)																				int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  20)																				int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  20)																				int b6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  20)																				int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  20)																				int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b6);
HXDLIN(  20)																				{
HXLINE(  20)																					int _hx_tmp4;
HXDLIN(  20)																					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																						_hx_tmp4 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																					}
            																					else {
HXLINE(  20)																						_hx_tmp4 = blended;
            																					}
HXDLIN(  20)																					::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp4);
            																				}
            																			}
            																			else {
HXLINE(  20)																				::Dynamic this25 = undoImage->image;
HXDLIN(  20)																				int index2;
HXDLIN(  20)																				if (undoImage->useVirtualPos) {
HXLINE(  20)																					index2 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            																				}
            																				else {
HXLINE(  20)																					index2 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            																				}
HXDLIN(  20)																				int _hx_tmp5;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					_hx_tmp5 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					_hx_tmp5 = c2;
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(this25,index2,_hx_tmp5);
            																			}
            																		}
            																		else {
HXLINE(  20)																			if (forceClear) {
HXLINE(  20)																				::Dynamic this26 = undoImage->image;
HXDLIN(  20)																				int x3 = (dx - rectLeft);
HXDLIN(  20)																				int y3 = (dy - rectTop);
HXDLIN(  20)																				int index3;
HXDLIN(  20)																				if (undoImage->useVirtualPos) {
HXLINE(  20)																					index3 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x3) - undoImage->virtualX));
            																				}
            																				else {
HXLINE(  20)																					index3 = ::Std_obj::_hx_int(( (Float)(((y3 * undoImage->width) + x3)) ));
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(this26,index3,0);
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  20)												bool found = false;
HXDLIN(  20)												Float s = ((Float)0.);
HXDLIN(  20)												Float t = ((Float)0.);
HXDLIN(  20)												Float sxx = ((Float)0.);
HXDLIN(  20)												Float txx = ((Float)0.);
HXDLIN(  20)												{
HXLINE(  20)													int _g_min = xIter3->start;
HXDLIN(  20)													int _g_max = xIter3->max;
HXDLIN(  20)													while((_g_min < _g_max)){
HXLINE(  20)														_g_min = (_g_min + 1);
HXDLIN(  20)														int x4 = (_g_min - 1);
HXLINE(  60)														sxx = (sx * ( (Float)(x4) ));
HXLINE(  61)														txx = (tx * ( (Float)(x4) ));
HXLINE(  62)														found = false;
HXLINE(  20)														{
HXLINE(  20)															int _g_min1 = yIter3->start;
HXDLIN(  20)															int _g_max1 = yIter3->max;
HXDLIN(  20)															while((_g_min1 < _g_max1)){
HXLINE(  20)																_g_min1 = (_g_min1 + 1);
HXDLIN(  20)																int y4 = (_g_min1 - 1);
HXLINE(  64)																s = ((s0 + sxx) + (sy * ( (Float)(y4) )));
HXLINE(  65)																t = ((t0 + txx) + (ty * ( (Float)(y4) )));
HXLINE(  20)																bool _hx_tmp6;
HXDLIN(  20)																if (!((s <= 0))) {
HXLINE(  20)																	_hx_tmp6 = (t <= 0);
            																}
            																else {
HXLINE(  20)																	_hx_tmp6 = true;
            																}
HXDLIN(  20)																if (_hx_tmp6) {
HXLINE(  20)																	if (found) {
HXLINE(  20)																		goto _hx_goto_21;
            																	}
            																}
            																else {
HXLINE(  20)																	if (((s + t) < A)) {
HXLINE(  20)																		{
HXLINE(  20)																			int c3 = color;
HXDLIN(  20)																			bool _hx_tmp7;
HXDLIN(  20)																			if ((((c3 >> 24) & 255) < 254)) {
HXLINE(  20)																				_hx_tmp7 = this4->transparent;
            																			}
            																			else {
HXLINE(  20)																				_hx_tmp7 = false;
            																			}
HXDLIN(  20)																			if (_hx_tmp7) {
HXLINE(  20)																				int location1;
HXDLIN(  20)																				if (this4->useVirtualPos) {
HXLINE(  20)																					location1 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - this4->virtualY) * ( (Float)(this4->width) )) + x4) - this4->virtualX));
            																				}
            																				else {
HXLINE(  20)																					location1 = ::Std_obj::_hx_int(( (Float)(((y4 * this4->width) + x4)) ));
            																				}
HXDLIN(  20)																				int this27 = ::iterMagic::Iimg_obj::get(this4->image,location1);
HXDLIN(  20)																				int this28;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					this28 = ((((((this27 >> 24) & 255) << 24) | ((this27 & 255) << 16)) | (((this27 >> 8) & 255) << 8)) | ((this27 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					this28 = this27;
            																				}
HXDLIN(  20)																				Float a12;
HXDLIN(  20)																				int this29 = ((this28 >> 24) & 255);
HXDLIN(  20)																				if ((this29 == 0)) {
HXLINE(  20)																					a12 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					a12 = (( (Float)(this29) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float r11;
HXDLIN(  20)																				int this30 = ((this28 >> 16) & 255);
HXDLIN(  20)																				if ((this30 == 0)) {
HXLINE(  20)																					r11 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					r11 = (( (Float)(this30) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float g11;
HXDLIN(  20)																				int this31 = ((this28 >> 8) & 255);
HXDLIN(  20)																				if ((this31 == 0)) {
HXLINE(  20)																					g11 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					g11 = (( (Float)(this31) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float b12;
HXDLIN(  20)																				int this32 = (this28 & 255);
HXDLIN(  20)																				if ((this32 == 0)) {
HXLINE(  20)																					b12 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					b12 = (( (Float)(this32) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float a21;
HXDLIN(  20)																				int this33 = ((color >> 24) & 255);
HXDLIN(  20)																				if ((this33 == 0)) {
HXLINE(  20)																					a21 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					a21 = (( (Float)(this33) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float r21;
HXDLIN(  20)																				int this34 = ((color >> 16) & 255);
HXDLIN(  20)																				if ((this34 == 0)) {
HXLINE(  20)																					r21 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					r21 = (( (Float)(this34) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float g21;
HXDLIN(  20)																				int this35 = ((color >> 8) & 255);
HXDLIN(  20)																				if ((this35 == 0)) {
HXLINE(  20)																					g21 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					g21 = (( (Float)(this35) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float b22;
HXDLIN(  20)																				int this36 = (color & 255);
HXDLIN(  20)																				if ((this36 == 0)) {
HXLINE(  20)																					b22 = ((Float)0.);
            																				}
            																				else {
HXLINE(  20)																					b22 = (( (Float)(this36) ) / ( (Float)(255) ));
            																				}
HXDLIN(  20)																				Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN(  20)																				int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  20)																				int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  20)																				int b7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  20)																				int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  20)																				int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b7);
HXDLIN(  20)																				{
HXLINE(  20)																					int _hx_tmp8;
HXDLIN(  20)																					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																						_hx_tmp8 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            																					}
            																					else {
HXLINE(  20)																						_hx_tmp8 = blended1;
            																					}
HXDLIN(  20)																					::iterMagic::Iimg_obj::set(this4->image,location1,_hx_tmp8);
            																				}
            																			}
            																			else {
HXLINE(  20)																				::Dynamic this37 = this4->image;
HXDLIN(  20)																				int index4;
HXDLIN(  20)																				if (this4->useVirtualPos) {
HXLINE(  20)																					index4 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - this4->virtualY) * ( (Float)(this4->width) )) + x4) - this4->virtualX));
            																				}
            																				else {
HXLINE(  20)																					index4 = ::Std_obj::_hx_int(( (Float)(((y4 * this4->width) + x4)) ));
            																				}
HXDLIN(  20)																				int _hx_tmp9;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					_hx_tmp9 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					_hx_tmp9 = c3;
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(this37,index4,_hx_tmp9);
            																			}
            																		}
HXLINE(  73)																		found = true;
            																	}
            																	else {
HXLINE(  20)																		if (found) {
HXLINE(  20)																			goto _hx_goto_21;
            																		}
            																	}
            																}
            															}
            															_hx_goto_21:;
            														}
            													}
            												}
HXDLIN(  20)												if ((hasHit == true)) {
HXLINE(  20)													 ::pi_xy::algo::HitTri v3 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,bx,by,cx1,cy1,true);
HXDLIN(  20)													if (hasUndo) {
HXLINE(  20)														v3->undoImage = undoImage;
HXDLIN(  20)														v3->undoX = xIter3->start;
HXDLIN(  20)														v3->undoY = yIter3->start;
            													}
            												}
            											}
            										}
            									}
HXLINE(  51)									lastX = nextX;
HXLINE(  52)									lastY = nextY;
            								}
            							}
            						}
            						else {
HXLINE(  20)							int _g38 = 0;
HXDLIN(  20)							int _g39 = (sides1 + 1);
HXDLIN(  20)							while((_g38 < _g39)){
HXLINE(  20)								_g38 = (_g38 + 1);
HXDLIN(  20)								int i13 = (_g38 - 1);
HXDLIN(  20)								Float nextX1 = (cx + (rW * ::Math_obj::cos((((( (Float)(i13) ) * theta) + omega) + ((Float)0.01)))));
HXDLIN(  20)								Float nextY1 = (cy + (rH * ::Math_obj::sin((((( (Float)(i13) ) * theta) + omega) + ((Float)0.01)))));
HXDLIN(  20)								{
HXLINE(  20)									 ::pi_xy::ImageStruct this38 = this3;
HXDLIN(  20)									bool hasHit1 = false;
HXDLIN(  20)									bool hasUndo1 = false;
HXDLIN(  20)									{
HXLINE(  20)										Float bx1 = lastX;
HXDLIN(  20)										Float by1 = lastY;
HXDLIN(  20)										Float cx2 = nextX1;
HXDLIN(  20)										Float cy2 = nextY1;
HXDLIN(  20)										bool adjustWinding1 = (((((cx * by1) - (bx1 * cy)) + ((bx1 * cy2) - (cx2 * by1))) + ((cx2 * cy) - (cx * cy2))) > 0);
HXDLIN(  20)										if (!(adjustWinding1)) {
HXLINE(  20)											Float bx_1 = bx1;
HXDLIN(  20)											Float by_1 = by1;
HXLINE(  25)											bx1 = cx2;
HXLINE(  26)											by1 = cy2;
HXLINE(  27)											cx2 = bx_1;
HXLINE(  28)											cy2 = by_1;
            										}
HXLINE(  20)										{
HXLINE(  20)											Float s01 = ((cy * cx2) - (cx * cy2));
HXDLIN(  20)											Float sx1 = (cy2 - cy);
HXDLIN(  20)											Float sy1 = (cx - cx2);
HXDLIN(  20)											Float t01 = ((cx * by1) - (cy * bx1));
HXDLIN(  20)											Float tx1 = (cy - by1);
HXDLIN(  20)											Float ty1 = (bx1 - cx);
HXDLIN(  20)											Float A1 = ((((-(by1) * cx2) + (cy * (-(bx1) + cx2))) + (cx * (by1 - cy2))) + (bx1 * cy2));
HXDLIN(  20)											 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  20)											if ((cx > bx1)) {
HXLINE(  20)												if ((cx > cx2)) {
HXLINE(  20)													int min4;
HXDLIN(  20)													if ((bx1 > cx2)) {
HXLINE(  20)														min4 = ::Math_obj::floor(cx2);
            													}
            													else {
HXLINE(  20)														min4 = ::Math_obj::floor(bx1);
            													}
HXDLIN(  20)													int ii_min8 = min4;
HXDLIN(  20)													int ii_max8 = ::Math_obj::ceil(cx);
HXDLIN(  20)													xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            												}
            												else {
HXLINE(  20)													int ii_min9 = ::Math_obj::floor(bx1);
HXDLIN(  20)													int ii_max9 = ::Math_obj::ceil(cx2);
HXDLIN(  20)													xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            												}
            											}
            											else {
HXLINE(  20)												if ((bx1 > cx2)) {
HXLINE(  20)													int min5;
HXDLIN(  20)													if ((cx > cx2)) {
HXLINE(  20)														min5 = ::Math_obj::floor(cx2);
            													}
            													else {
HXLINE(  20)														min5 = ::Math_obj::ceil(cx);
            													}
HXDLIN(  20)													int ii_min10 = min5;
HXDLIN(  20)													int ii_max10 = ::Math_obj::ceil(bx1);
HXDLIN(  20)													xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            												}
            												else {
HXLINE(  20)													int ii_min11 = ::Math_obj::floor(cx);
HXDLIN(  20)													int ii_max11 = ::Math_obj::ceil(cx2);
HXDLIN(  20)													xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            												}
            											}
HXDLIN(  20)											 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  20)											if ((cy > by1)) {
HXLINE(  20)												if ((cy > cy2)) {
HXLINE(  20)													int min6;
HXDLIN(  20)													if ((by1 > cy2)) {
HXLINE(  20)														min6 = ::Math_obj::floor(cy2);
            													}
            													else {
HXLINE(  20)														min6 = ::Math_obj::floor(by1);
            													}
HXDLIN(  20)													int ii_min12 = min6;
HXDLIN(  20)													int ii_max12 = ::Math_obj::ceil(cy);
HXDLIN(  20)													yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            												}
            												else {
HXLINE(  20)													int ii_min13 = ::Math_obj::floor(by1);
HXDLIN(  20)													int ii_max13 = ::Math_obj::ceil(cy2);
HXDLIN(  20)													yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            												}
            											}
            											else {
HXLINE(  20)												if ((by1 > cy2)) {
HXLINE(  20)													int min7;
HXDLIN(  20)													if ((cy > cy2)) {
HXLINE(  20)														min7 = ::Math_obj::floor(cy2);
            													}
            													else {
HXLINE(  20)														min7 = ::Math_obj::ceil(cy);
            													}
HXDLIN(  20)													int ii_min14 = min7;
HXDLIN(  20)													int ii_max14 = ::Math_obj::ceil(by1);
HXDLIN(  20)													yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            												}
            												else {
HXLINE(  20)													int ii_min15 = ::Math_obj::floor(cy);
HXDLIN(  20)													int ii_max15 = ::Math_obj::ceil(cy2);
HXDLIN(  20)													yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            												}
            											}
HXDLIN(  20)											 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  20)											if (hasUndo1) {
HXLINE(  20)												int width2 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  20)												int height2 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  20)												 ::Dynamic imageType2 = null();
HXDLIN(  20)												 ::pi_xy::ImageStruct this39 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  20)												if (::hx::IsNull( imageType2 )) {
HXLINE(  54)													imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE(  20)												::Dynamic undoImage4;
HXDLIN(  20)												switch((int)(( (int)(imageType2) ))){
            													case (int)0: {
HXLINE(  20)														 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::BytesImg b8 = byt2;
HXDLIN(  20)														{
HXLINE(  20)															b8->width = width2;
HXDLIN(  20)															b8->height = height2;
HXDLIN(  20)															b8->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  20)															b8->data = ::haxe::io::Bytes_obj::alloc((b8->length * 4));
HXDLIN(  20)															{
HXLINE(  20)																int len4 = b8->length;
HXDLIN(  20)																int w2 = 0;
HXDLIN(  20)																{
HXLINE(  20)																	int _g40 = 0;
HXDLIN(  20)																	int _g41 = b8->height;
HXDLIN(  20)																	while((_g40 < _g41)){
HXLINE(  20)																		_g40 = (_g40 + 1);
HXDLIN(  20)																		int y5 = (_g40 - 1);
HXDLIN(  20)																		{
HXLINE(  20)																			int _g42 = 0;
HXDLIN(  20)																			int _g43 = b8->width;
HXDLIN(  20)																			while((_g42 < _g43)){
HXLINE(  20)																				_g42 = (_g42 + 1);
HXDLIN(  20)																				int x5 = (_g42 - 1);
HXDLIN(  20)																				{
HXLINE(  20)																					w2 = (w2 + 1);
HXDLIN(  20)																					b8->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w2 = (w2 + 1);
HXDLIN(  20)																					b8->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w2 = (w2 + 1);
HXDLIN(  20)																					b8->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  20)																				{
HXLINE(  20)																					w2 = (w2 + 1);
HXDLIN(  20)																					b8->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage4 = b8;
            													}
            													break;
            													case (int)1: {
HXLINE(  20)														 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::ArrIntImg a6 = arrI2;
HXDLIN(  20)														{
HXLINE(  20)															a6->width = width2;
HXDLIN(  20)															a6->height = height2;
HXDLIN(  20)															a6->data = ::Array_obj< int >::__new(0);
HXDLIN(  20)															a6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  20)															{
HXLINE(  20)																int _g44 = 0;
HXDLIN(  20)																int _g45 = a6->length;
HXDLIN(  20)																while((_g44 < _g45)){
HXLINE(  20)																	_g44 = (_g44 + 1);
HXDLIN(  20)																	int i14 = (_g44 - 1);
HXDLIN(  20)																	a6->data[i14] = 0;
            																}
            															}
            														}
HXDLIN(  20)														undoImage4 = a6;
            													}
            													break;
            													case (int)2: {
HXLINE(  20)														 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::U32ArrImg b9 = u32a2;
HXDLIN(  20)														{
HXLINE(  20)															b9->width = width2;
HXDLIN(  20)															b9->height = height2;
HXDLIN(  20)															b9->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  20)															int size2 = (b9->length * 4);
HXDLIN(  20)															b9->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  20)															{
HXLINE(  20)																int _g46 = 0;
HXDLIN(  20)																int _g47 = b9->length;
HXDLIN(  20)																while((_g46 < _g47)){
HXLINE(  20)																	_g46 = (_g46 + 1);
HXDLIN(  20)																	int i15 = (_g46 - 1);
HXDLIN(  20)																	{
HXLINE(  20)																		 ::haxe::io::ArrayBufferViewImpl this40 = b9->data;
HXDLIN(  20)																		bool undoImage5;
HXDLIN(  20)																		if ((i15 >= 0)) {
HXLINE(  20)																			undoImage5 = (i15 < (this40->byteLength >> 2));
            																		}
            																		else {
HXLINE(  20)																			undoImage5 = false;
            																		}
HXDLIN(  20)																		if (undoImage5) {
HXLINE(  20)																			 ::haxe::io::Bytes _this2 = this40->bytes;
HXDLIN(  20)																			int pos2 = ((i15 << 2) + this40->byteOffset);
HXDLIN(  20)																			_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  20)																			_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage4 = b9;
            													}
            													break;
            													case (int)3: {
HXLINE(  20)														 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::VecIntImg v4 = vec2;
HXDLIN(  20)														{
HXLINE(  20)															v4->width = width2;
HXDLIN(  20)															v4->height = height2;
HXDLIN(  20)															v4->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  20)															v4->data = ::Array_obj< int >::__new(v4->length);
HXDLIN(  20)															{
HXLINE(  20)																int _g48 = 0;
HXDLIN(  20)																int _g49 = v4->length;
HXDLIN(  20)																while((_g48 < _g49)){
HXLINE(  20)																	_g48 = (_g48 + 1);
HXDLIN(  20)																	int i16 = (_g48 - 1);
HXDLIN(  20)																	v4->data->__unsafe_set(i16,0);
            																}
            															}
            														}
HXDLIN(  20)														undoImage4 = v4;
            													}
            													break;
            													case (int)4: {
HXLINE(  20)														 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  20)														 ::iterMagic::StackIntImg b10 = sInt2;
HXDLIN(  20)														{
HXLINE(  20)															b10->width = width2;
HXDLIN(  20)															b10->height = height2;
HXDLIN(  20)															b10->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  20)															b10->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  20)															{
HXLINE(  20)																int len5 = b10->length;
HXDLIN(  20)																 ::haxe::ds::GenericStack_Int d2 = b10->data;
HXDLIN(  20)																if (::hx::IsNull( d2->head )) {
HXLINE(  20)																	int _g50 = 0;
HXDLIN(  20)																	int _g51 = len5;
HXDLIN(  20)																	while((_g50 < _g51)){
HXLINE(  20)																		_g50 = (_g50 + 1);
HXDLIN(  20)																		int i17 = (_g50 - 1);
HXDLIN(  20)																		d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            																	}
            																}
            																else {
HXLINE(  20)																	int _g52 = 0;
HXDLIN(  20)																	int _g53 = len5;
HXDLIN(  20)																	while((_g52 < _g53)){
HXLINE(  20)																		_g52 = (_g52 + 1);
HXDLIN(  20)																		int i18 = (_g52 - 1);
HXDLIN(  20)																		{
HXLINE(  20)																			 ::haxe::ds::GenericCell_Int l2 = b10->data->head;
HXDLIN(  20)																			 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  20)																			{
HXLINE(  20)																				int _g54 = 0;
HXDLIN(  20)																				int _g55 = i18;
HXDLIN(  20)																				while((_g54 < _g55)){
HXLINE(  20)																					_g54 = (_g54 + 1);
HXDLIN(  20)																					int i19 = (_g54 - 1);
HXLINE( 345)																					prev2 = l2;
HXLINE( 346)																					l2 = l2->next;
            																				}
            																			}
HXLINE(  20)																			if (::hx::IsNull( prev2 )) {
HXLINE(  20)																				b10->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  20)																				l2 = null();
            																			}
            																			else {
HXLINE(  20)																				prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  20)																				l2 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  20)														undoImage4 = b10;
            													}
            													break;
            												}
HXDLIN(  20)												this39->image = undoImage4;
HXDLIN(  20)												this39->width = width2;
HXDLIN(  20)												this39->height = height2;
HXDLIN(  20)												this39->imageType = ( (int)(imageType2) );
HXDLIN(  20)												undoImage3 = this39;
HXDLIN(  20)												{
HXLINE(  20)													int rectLeft1 = xIter31->start;
HXDLIN(  20)													int rectTop1 = yIter31->start;
HXDLIN(  20)													int rectRight1 = xIter31->max;
HXDLIN(  20)													bool forceClear1 = false;
HXDLIN(  20)													{
HXLINE(  20)														int _g56 = rectTop1;
HXDLIN(  20)														int _g57 = yIter31->max;
HXDLIN(  20)														while((_g56 < _g57)){
HXLINE(  20)															_g56 = (_g56 + 1);
HXDLIN(  20)															int dy1 = (_g56 - 1);
HXDLIN(  20)															{
HXLINE(  20)																int _g58 = rectLeft1;
HXDLIN(  20)																int _g59 = rectRight1;
HXDLIN(  20)																while((_g58 < _g59)){
HXLINE(  20)																	_g58 = (_g58 + 1);
HXDLIN(  20)																	int dx1 = (_g58 - 1);
HXDLIN(  20)																	::Dynamic this41 = this38->image;
HXDLIN(  20)																	int index5;
HXDLIN(  20)																	if (this38->useVirtualPos) {
HXLINE(  20)																		index5 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this38->virtualY) * ( (Float)(this38->width) )) + dx1) - this38->virtualX));
            																	}
            																	else {
HXLINE(  20)																		index5 = ::Std_obj::_hx_int(( (Float)(((dy1 * this38->width) + dx1)) ));
            																	}
HXDLIN(  20)																	int c4 = ::iterMagic::Iimg_obj::get(this41,index5);
HXDLIN(  20)																	int col1;
HXDLIN(  20)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																		col1 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            																	}
            																	else {
HXLINE(  20)																		col1 = c4;
            																	}
HXDLIN(  20)																	bool _hx_tmp10;
HXDLIN(  20)																	if (this38->useMask) {
HXLINE(  20)																		_hx_tmp10 = ::hx::IsNotNull( this38->mask );
            																	}
            																	else {
HXLINE(  20)																		_hx_tmp10 = false;
            																	}
HXDLIN(  20)																	if (_hx_tmp10) {
HXLINE(  20)																		 ::pi_xy::ImageStruct this42 = this38->mask;
HXDLIN(  20)																		::Dynamic this43 = this42->image;
HXDLIN(  20)																		int index6;
HXDLIN(  20)																		if (this42->useVirtualPos) {
HXLINE(  20)																			index6 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this42->virtualY) * ( (Float)(this42->width) )) + dx1) - this42->virtualX));
            																		}
            																		else {
HXLINE(  20)																			index6 = ::Std_obj::_hx_int(( (Float)(((dy1 * this42->width) + dx1)) ));
            																		}
HXDLIN(  20)																		int c5 = ::iterMagic::Iimg_obj::get(this43,index6);
HXDLIN(  20)																		int v5;
HXDLIN(  20)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																			v5 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            																		}
            																		else {
HXLINE(  20)																			v5 = c5;
            																		}
HXDLIN(  20)																		int maskPixel1 = v5;
HXDLIN(  20)																		int this44 = col1;
HXDLIN(  20)																		if ((maskPixel1 == 0)) {
HXLINE(  20)																			col1 = this44;
            																		}
            																		else {
HXLINE(  20)																			Float m01;
HXDLIN(  20)																			int this45 = ((maskPixel1 >> 24) & 255);
HXDLIN(  20)																			if ((this45 == 0)) {
HXLINE(  20)																				m01 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m01 = (( (Float)(this45) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m11;
HXDLIN(  20)																			int this46 = ((maskPixel1 >> 16) & 255);
HXDLIN(  20)																			if ((this46 == 0)) {
HXLINE(  20)																				m11 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m11 = (( (Float)(this46) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m21;
HXDLIN(  20)																			int this47 = ((maskPixel1 >> 8) & 255);
HXDLIN(  20)																			if ((this47 == 0)) {
HXLINE(  20)																				m21 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m21 = (( (Float)(this47) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float m31;
HXDLIN(  20)																			int this48 = (maskPixel1 & 255);
HXDLIN(  20)																			if ((this48 == 0)) {
HXLINE(  20)																				m31 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				m31 = (( (Float)(this48) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this44 >> 24) & 255)) )));
HXDLIN(  20)																			int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this44 >> 16) & 255)) )));
HXDLIN(  20)																			int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this44 >> 8) & 255)) )));
HXDLIN(  20)																			int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this44 & 255)) )));
HXDLIN(  20)																			col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN(  20)																	if ((col1 != 0)) {
HXLINE(  20)																		int x6 = (dx1 - rectLeft1);
HXDLIN(  20)																		int y6 = (dy1 - rectTop1);
HXDLIN(  20)																		int c6 = col1;
HXDLIN(  20)																		bool _hx_tmp11;
HXDLIN(  20)																		if ((((c6 >> 24) & 255) < 254)) {
HXLINE(  20)																			_hx_tmp11 = undoImage3->transparent;
            																		}
            																		else {
HXLINE(  20)																			_hx_tmp11 = false;
            																		}
HXDLIN(  20)																		if (_hx_tmp11) {
HXLINE(  20)																			int location2;
HXDLIN(  20)																			if (undoImage3->useVirtualPos) {
HXLINE(  20)																				location2 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x6) - undoImage3->virtualX));
            																			}
            																			else {
HXLINE(  20)																				location2 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x6)) ));
            																			}
HXDLIN(  20)																			int this49 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN(  20)																			int this50;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				this50 = ((((((this49 >> 24) & 255) << 24) | ((this49 & 255) << 16)) | (((this49 >> 8) & 255) << 8)) | ((this49 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				this50 = this49;
            																			}
HXDLIN(  20)																			Float a13;
HXDLIN(  20)																			int this51 = ((this50 >> 24) & 255);
HXDLIN(  20)																			if ((this51 == 0)) {
HXLINE(  20)																				a13 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a13 = (( (Float)(this51) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r12;
HXDLIN(  20)																			int this52 = ((this50 >> 16) & 255);
HXDLIN(  20)																			if ((this52 == 0)) {
HXLINE(  20)																				r12 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r12 = (( (Float)(this52) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g12;
HXDLIN(  20)																			int this53 = ((this50 >> 8) & 255);
HXDLIN(  20)																			if ((this53 == 0)) {
HXLINE(  20)																				g12 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g12 = (( (Float)(this53) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b13;
HXDLIN(  20)																			int this54 = (this50 & 255);
HXDLIN(  20)																			if ((this54 == 0)) {
HXLINE(  20)																				b13 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b13 = (( (Float)(this54) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a22;
HXDLIN(  20)																			int this55 = ((col1 >> 24) & 255);
HXDLIN(  20)																			if ((this55 == 0)) {
HXLINE(  20)																				a22 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a22 = (( (Float)(this55) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r22;
HXDLIN(  20)																			int this56 = ((col1 >> 16) & 255);
HXDLIN(  20)																			if ((this56 == 0)) {
HXLINE(  20)																				r22 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r22 = (( (Float)(this56) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g22;
HXDLIN(  20)																			int this57 = ((col1 >> 8) & 255);
HXDLIN(  20)																			if ((this57 == 0)) {
HXLINE(  20)																				g22 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g22 = (( (Float)(this57) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b23;
HXDLIN(  20)																			int this58 = (col1 & 255);
HXDLIN(  20)																			if ((this58 == 0)) {
HXLINE(  20)																				b23 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b23 = (( (Float)(this58) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN(  20)																			int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  20)																			int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  20)																			int b14 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  20)																			int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  20)																			int blended2 = ((((a7 << 24) | (r4 << 16)) | (g4 << 8)) | b14);
HXDLIN(  20)																			{
HXLINE(  20)																				int _hx_tmp12;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					_hx_tmp12 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					_hx_tmp12 = blended2;
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp12);
            																			}
            																		}
            																		else {
HXLINE(  20)																			::Dynamic this59 = undoImage3->image;
HXDLIN(  20)																			int index7;
HXDLIN(  20)																			if (undoImage3->useVirtualPos) {
HXLINE(  20)																				index7 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x6) - undoImage3->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index7 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x6)) ));
            																			}
HXDLIN(  20)																			int _hx_tmp13;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				_hx_tmp13 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				_hx_tmp13 = c6;
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this59,index7,_hx_tmp13);
            																		}
            																	}
            																	else {
HXLINE(  20)																		if (forceClear1) {
HXLINE(  20)																			::Dynamic this60 = undoImage3->image;
HXDLIN(  20)																			int x7 = (dx1 - rectLeft1);
HXDLIN(  20)																			int y7 = (dy1 - rectTop1);
HXDLIN(  20)																			int index8;
HXDLIN(  20)																			if (undoImage3->useVirtualPos) {
HXLINE(  20)																				index8 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x7) - undoImage3->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index8 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage3->width) + x7)) ));
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this60,index8,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  20)											bool found1 = false;
HXDLIN(  20)											Float s1 = ((Float)0.);
HXDLIN(  20)											Float t1 = ((Float)0.);
HXDLIN(  20)											Float sxx1 = ((Float)0.);
HXDLIN(  20)											Float txx1 = ((Float)0.);
HXDLIN(  20)											{
HXLINE(  20)												int _g_min2 = xIter31->start;
HXDLIN(  20)												int _g_max2 = xIter31->max;
HXDLIN(  20)												while((_g_min2 < _g_max2)){
HXLINE(  20)													_g_min2 = (_g_min2 + 1);
HXDLIN(  20)													int x8 = (_g_min2 - 1);
HXLINE(  60)													sxx1 = (sx1 * ( (Float)(x8) ));
HXLINE(  61)													txx1 = (tx1 * ( (Float)(x8) ));
HXLINE(  62)													found1 = false;
HXLINE(  20)													{
HXLINE(  20)														int _g_min3 = yIter31->start;
HXDLIN(  20)														int _g_max3 = yIter31->max;
HXDLIN(  20)														while((_g_min3 < _g_max3)){
HXLINE(  20)															_g_min3 = (_g_min3 + 1);
HXDLIN(  20)															int y8 = (_g_min3 - 1);
HXLINE(  64)															s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y8) )));
HXLINE(  65)															t1 = ((t01 + txx1) + (ty1 * ( (Float)(y8) )));
HXLINE(  20)															bool _hx_tmp14;
HXDLIN(  20)															if (!((s1 <= 0))) {
HXLINE(  20)																_hx_tmp14 = (t1 <= 0);
            															}
            															else {
HXLINE(  20)																_hx_tmp14 = true;
            															}
HXDLIN(  20)															if (_hx_tmp14) {
HXLINE(  20)																if (found1) {
HXLINE(  20)																	goto _hx_goto_34;
            																}
            															}
            															else {
HXLINE(  20)																if (((s1 + t1) < A1)) {
HXLINE(  20)																	{
HXLINE(  20)																		int c7 = color;
HXDLIN(  20)																		bool _hx_tmp15;
HXDLIN(  20)																		if ((((c7 >> 24) & 255) < 254)) {
HXLINE(  20)																			_hx_tmp15 = this38->transparent;
            																		}
            																		else {
HXLINE(  20)																			_hx_tmp15 = false;
            																		}
HXDLIN(  20)																		if (_hx_tmp15) {
HXLINE(  20)																			int location3;
HXDLIN(  20)																			if (this38->useVirtualPos) {
HXLINE(  20)																				location3 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - this38->virtualY) * ( (Float)(this38->width) )) + x8) - this38->virtualX));
            																			}
            																			else {
HXLINE(  20)																				location3 = ::Std_obj::_hx_int(( (Float)(((y8 * this38->width) + x8)) ));
            																			}
HXDLIN(  20)																			int this61 = ::iterMagic::Iimg_obj::get(this38->image,location3);
HXDLIN(  20)																			int this62;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				this62 = ((((((this61 >> 24) & 255) << 24) | ((this61 & 255) << 16)) | (((this61 >> 8) & 255) << 8)) | ((this61 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				this62 = this61;
            																			}
HXDLIN(  20)																			Float a14;
HXDLIN(  20)																			int this63 = ((this62 >> 24) & 255);
HXDLIN(  20)																			if ((this63 == 0)) {
HXLINE(  20)																				a14 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a14 = (( (Float)(this63) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r13;
HXDLIN(  20)																			int this64 = ((this62 >> 16) & 255);
HXDLIN(  20)																			if ((this64 == 0)) {
HXLINE(  20)																				r13 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r13 = (( (Float)(this64) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g13;
HXDLIN(  20)																			int this65 = ((this62 >> 8) & 255);
HXDLIN(  20)																			if ((this65 == 0)) {
HXLINE(  20)																				g13 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g13 = (( (Float)(this65) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b15;
HXDLIN(  20)																			int this66 = (this62 & 255);
HXDLIN(  20)																			if ((this66 == 0)) {
HXLINE(  20)																				b15 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b15 = (( (Float)(this66) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a23;
HXDLIN(  20)																			int this67 = ((color >> 24) & 255);
HXDLIN(  20)																			if ((this67 == 0)) {
HXLINE(  20)																				a23 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				a23 = (( (Float)(this67) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float r23;
HXDLIN(  20)																			int this68 = ((color >> 16) & 255);
HXDLIN(  20)																			if ((this68 == 0)) {
HXLINE(  20)																				r23 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				r23 = (( (Float)(this68) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float g23;
HXDLIN(  20)																			int this69 = ((color >> 8) & 255);
HXDLIN(  20)																			if ((this69 == 0)) {
HXLINE(  20)																				g23 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				g23 = (( (Float)(this69) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float b24;
HXDLIN(  20)																			int this70 = (color & 255);
HXDLIN(  20)																			if ((this70 == 0)) {
HXLINE(  20)																				b24 = ((Float)0.);
            																			}
            																			else {
HXLINE(  20)																				b24 = (( (Float)(this70) ) / ( (Float)(255) ));
            																			}
HXDLIN(  20)																			Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN(  20)																			int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  20)																			int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  20)																			int b16 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a33) + (b24 * a23))));
HXDLIN(  20)																			int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  20)																			int blended3 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b16);
HXDLIN(  20)																			{
HXLINE(  20)																				int _hx_tmp16;
HXDLIN(  20)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																					_hx_tmp16 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            																				}
            																				else {
HXLINE(  20)																					_hx_tmp16 = blended3;
            																				}
HXDLIN(  20)																				::iterMagic::Iimg_obj::set(this38->image,location3,_hx_tmp16);
            																			}
            																		}
            																		else {
HXLINE(  20)																			::Dynamic this71 = this38->image;
HXDLIN(  20)																			int index9;
HXDLIN(  20)																			if (this38->useVirtualPos) {
HXLINE(  20)																				index9 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - this38->virtualY) * ( (Float)(this38->width) )) + x8) - this38->virtualX));
            																			}
            																			else {
HXLINE(  20)																				index9 = ::Std_obj::_hx_int(( (Float)(((y8 * this38->width) + x8)) ));
            																			}
HXDLIN(  20)																			int _hx_tmp17;
HXDLIN(  20)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  20)																				_hx_tmp17 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            																			}
            																			else {
HXLINE(  20)																				_hx_tmp17 = c7;
            																			}
HXDLIN(  20)																			::iterMagic::Iimg_obj::set(this71,index9,_hx_tmp17);
            																		}
            																	}
HXLINE(  73)																	found1 = true;
            																}
            																else {
HXLINE(  20)																	if (found1) {
HXLINE(  20)																		goto _hx_goto_34;
            																	}
            																}
            															}
            														}
            														_hx_goto_34:;
            													}
            												}
            											}
HXDLIN(  20)											if ((hasHit1 == true)) {
HXLINE(  20)												 ::pi_xy::algo::HitTri v6 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,bx1,by1,cx2,cy2,true);
HXDLIN(  20)												if (hasUndo1) {
HXLINE(  20)													v6->undoImage = undoImage3;
HXDLIN(  20)													v6->undoX = xIter31->start;
HXDLIN(  20)													v6->undoY = yIter31->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  59)								lastX = nextX1;
HXLINE(  60)								lastY = nextY1;
            							}
            						}
            					}
            				}
            			}
HXLINE(  21)			{
HXLINE(  21)				 ::pi_xy::ImageStruct this72 = temp;
HXDLIN(  21)				int color1 = this->fill;
HXDLIN(  21)				 ::Dynamic phi4 = phi;
HXDLIN(  21)				if (::hx::IsNull( phi4 )) {
HXLINE(  21)					phi4 = 0;
            				}
HXDLIN(  21)				Float rSmall1;
HXDLIN(  21)				if ((innerRw > innerRh)) {
HXLINE(  21)					rSmall1 = innerRh;
            				}
            				else {
HXLINE(  21)					rSmall1 = innerRw;
            				}
HXDLIN(  21)				 ::Dynamic targetE1 = ((Float)1.05);
HXDLIN(  21)				if (::hx::IsNull( targetE1 )) {
HXLINE( 534)					targetE1 = ((Float)1.05);
            				}
HXLINE(  21)				int result1 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE1) ) / rSmall1)))));
HXDLIN(  21)				int noSides1;
HXDLIN(  21)				if ((result1 < 12)) {
HXLINE(  21)					noSides1 = 12;
            				}
            				else {
HXLINE(  21)					if ((result1 > 500)) {
HXLINE(  21)						noSides1 = 500;
            					}
            					else {
HXLINE(  21)						noSides1 = result1;
            					}
            				}
HXDLIN(  21)				{
HXLINE(  21)					 ::Dynamic phi5 = phi4;
HXDLIN(  21)					 ::Dynamic sides2 = noSides1;
HXDLIN(  21)					if (::hx::IsNull( sides2 )) {
HXLINE( 540)						sides2 = 36;
            					}
HXLINE(  21)					if (::hx::IsNull( phi5 )) {
HXLINE( 539)						phi5 = ((Float)0.);
            					}
HXLINE(  21)					{
HXLINE(  21)						 ::Dynamic phi6 = phi5;
HXDLIN(  21)						 ::Dynamic sides3 = sides2;
HXDLIN(  21)						if (::hx::IsNull( sides3 )) {
HXLINE( 212)							sides3 = 36;
            						}
HXLINE(  21)						if (::hx::IsNull( phi6 )) {
HXLINE( 211)							phi6 = ((Float)0.);
            						}
HXLINE(  21)						Float theta1 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides3) ));
HXDLIN(  21)						Float omega1;
HXDLIN(  21)						omega1 = ((Float)0.);
HXDLIN(  21)						Float lastX1 = ((Float)0.);
HXDLIN(  21)						Float lastY1 = ((Float)0.);
HXDLIN(  21)						if (::hx::IsNotEq( phi6,0 )) {
HXLINE(  35)							lastX1 = ((((innerRw * ::Math_obj::cos(((( (Float)(sides3) ) * theta1) + omega1))) * ::Math_obj::cos(( (Float)(phi6) ))) - ((innerRh * ::Math_obj::sin(((( (Float)(sides3) ) * theta1) + omega1))) * ::Math_obj::sin(( (Float)(phi6) )))) + innerCx);
HXLINE(  36)							lastY1 = ((((innerRw * ::Math_obj::cos(((( (Float)(sides3) ) * theta1) + omega1))) * ::Math_obj::sin(( (Float)(phi6) ))) + ((innerRh * ::Math_obj::sin(((( (Float)(sides3) ) * theta1) + omega1))) * ::Math_obj::cos(( (Float)(phi6) )))) + innerCy);
            						}
            						else {
HXLINE(  38)							lastX1 = (innerCx + (innerRw * ::Math_obj::cos(((( (Float)(sides3) ) * theta1) + omega1))));
HXLINE(  39)							lastY1 = (innerCy + (innerRh * ::Math_obj::sin(((( (Float)(sides3) ) * theta1) + omega1))));
            						}
HXLINE(  21)						if (::hx::IsNotEq( phi6,0 )) {
HXLINE(  21)							Float cphi1 = ::Math_obj::cos(( (Float)(phi6) ));
HXDLIN(  21)							Float sphi1 = ::Math_obj::sin(( (Float)(phi6) ));
HXDLIN(  21)							{
HXLINE(  21)								int _g60 = 0;
HXDLIN(  21)								int _g61 = (sides3 + 1);
HXDLIN(  21)								while((_g60 < _g61)){
HXLINE(  21)									_g60 = (_g60 + 1);
HXDLIN(  21)									int i20 = (_g60 - 1);
HXDLIN(  21)									Float stheta1 = ::Math_obj::sin((((( (Float)(i20) ) * theta1) + omega1) + ((Float)0.01)));
HXDLIN(  21)									Float ctheta1 = ::Math_obj::cos((((( (Float)(i20) ) * theta1) + omega1) + ((Float)0.01)));
HXDLIN(  21)									Float nextX2 = ((((innerRw * ctheta1) * cphi1) - ((innerRh * stheta1) * sphi1)) + innerCx);
HXDLIN(  21)									Float nextY2 = ((((innerRw * ctheta1) * sphi1) + ((innerRh * stheta1) * cphi1)) + innerCy);
HXDLIN(  21)									{
HXLINE(  21)										 ::pi_xy::ImageStruct this73 = this72;
HXDLIN(  21)										bool hasHit2 = false;
HXDLIN(  21)										bool hasUndo2 = false;
HXDLIN(  21)										{
HXLINE(  21)											Float bx2 = lastX1;
HXDLIN(  21)											Float by2 = lastY1;
HXDLIN(  21)											Float cx3 = nextX2;
HXDLIN(  21)											Float cy3 = nextY2;
HXDLIN(  21)											bool adjustWinding2 = (((((innerCx * by2) - (bx2 * innerCy)) + ((bx2 * cy3) - (cx3 * by2))) + ((cx3 * innerCy) - (innerCx * cy3))) > 0);
HXDLIN(  21)											if (!(adjustWinding2)) {
HXLINE(  21)												Float bx_2 = bx2;
HXDLIN(  21)												Float by_2 = by2;
HXLINE(  25)												bx2 = cx3;
HXLINE(  26)												by2 = cy3;
HXLINE(  27)												cx3 = bx_2;
HXLINE(  28)												cy3 = by_2;
            											}
HXLINE(  21)											{
HXLINE(  21)												Float s02 = ((innerCy * cx3) - (innerCx * cy3));
HXDLIN(  21)												Float sx2 = (cy3 - innerCy);
HXDLIN(  21)												Float sy2 = (innerCx - cx3);
HXDLIN(  21)												Float t02 = ((innerCx * by2) - (innerCy * bx2));
HXDLIN(  21)												Float tx2 = (innerCy - by2);
HXDLIN(  21)												Float ty2 = (bx2 - innerCx);
HXDLIN(  21)												Float A2 = ((((-(by2) * cx3) + (innerCy * (-(bx2) + cx3))) + (innerCx * (by2 - cy3))) + (bx2 * cy3));
HXDLIN(  21)												 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  21)												if ((innerCx > bx2)) {
HXLINE(  21)													if ((innerCx > cx3)) {
HXLINE(  21)														int min8;
HXDLIN(  21)														if ((bx2 > cx3)) {
HXLINE(  21)															min8 = ::Math_obj::floor(cx3);
            														}
            														else {
HXLINE(  21)															min8 = ::Math_obj::floor(bx2);
            														}
HXDLIN(  21)														int ii_min16 = min8;
HXDLIN(  21)														int ii_max16 = ::Math_obj::ceil(innerCx);
HXDLIN(  21)														xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            													}
            													else {
HXLINE(  21)														int ii_min17 = ::Math_obj::floor(bx2);
HXDLIN(  21)														int ii_max17 = ::Math_obj::ceil(cx3);
HXDLIN(  21)														xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            													}
            												}
            												else {
HXLINE(  21)													if ((bx2 > cx3)) {
HXLINE(  21)														int min9;
HXDLIN(  21)														if ((innerCx > cx3)) {
HXLINE(  21)															min9 = ::Math_obj::floor(cx3);
            														}
            														else {
HXLINE(  21)															min9 = ::Math_obj::ceil(innerCx);
            														}
HXDLIN(  21)														int ii_min18 = min9;
HXDLIN(  21)														int ii_max18 = ::Math_obj::ceil(bx2);
HXDLIN(  21)														xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            													}
            													else {
HXLINE(  21)														int ii_min19 = ::Math_obj::floor(innerCx);
HXDLIN(  21)														int ii_max19 = ::Math_obj::ceil(cx3);
HXDLIN(  21)														xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            													}
            												}
HXDLIN(  21)												 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  21)												if ((innerCy > by2)) {
HXLINE(  21)													if ((innerCy > cy3)) {
HXLINE(  21)														int min10;
HXDLIN(  21)														if ((by2 > cy3)) {
HXLINE(  21)															min10 = ::Math_obj::floor(cy3);
            														}
            														else {
HXLINE(  21)															min10 = ::Math_obj::floor(by2);
            														}
HXDLIN(  21)														int ii_min20 = min10;
HXDLIN(  21)														int ii_max20 = ::Math_obj::ceil(innerCy);
HXDLIN(  21)														yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            													}
            													else {
HXLINE(  21)														int ii_min21 = ::Math_obj::floor(by2);
HXDLIN(  21)														int ii_max21 = ::Math_obj::ceil(cy3);
HXDLIN(  21)														yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            													}
            												}
            												else {
HXLINE(  21)													if ((by2 > cy3)) {
HXLINE(  21)														int min11;
HXDLIN(  21)														if ((innerCy > cy3)) {
HXLINE(  21)															min11 = ::Math_obj::floor(cy3);
            														}
            														else {
HXLINE(  21)															min11 = ::Math_obj::ceil(innerCy);
            														}
HXDLIN(  21)														int ii_min22 = min11;
HXDLIN(  21)														int ii_max22 = ::Math_obj::ceil(by2);
HXDLIN(  21)														yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            													}
            													else {
HXLINE(  21)														int ii_min23 = ::Math_obj::floor(innerCy);
HXDLIN(  21)														int ii_max23 = ::Math_obj::ceil(cy3);
HXDLIN(  21)														yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            													}
            												}
HXDLIN(  21)												 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  21)												if (hasUndo2) {
HXLINE(  21)													int width3 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  21)													int height3 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  21)													 ::Dynamic imageType3 = null();
HXDLIN(  21)													 ::pi_xy::ImageStruct this74 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  21)													if (::hx::IsNull( imageType3 )) {
HXLINE(  54)														imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            													}
HXLINE(  21)													::Dynamic undoImage7;
HXDLIN(  21)													switch((int)(( (int)(imageType3) ))){
            														case (int)0: {
HXLINE(  21)															 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  21)															 ::iterMagic::BytesImg b17 = byt3;
HXDLIN(  21)															{
HXLINE(  21)																b17->width = width3;
HXDLIN(  21)																b17->height = height3;
HXDLIN(  21)																b17->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  21)																b17->data = ::haxe::io::Bytes_obj::alloc((b17->length * 4));
HXDLIN(  21)																{
HXLINE(  21)																	int len6 = b17->length;
HXDLIN(  21)																	int w3 = 0;
HXDLIN(  21)																	{
HXLINE(  21)																		int _g62 = 0;
HXDLIN(  21)																		int _g63 = b17->height;
HXDLIN(  21)																		while((_g62 < _g63)){
HXLINE(  21)																			_g62 = (_g62 + 1);
HXDLIN(  21)																			int y9 = (_g62 - 1);
HXDLIN(  21)																			{
HXLINE(  21)																				int _g64 = 0;
HXDLIN(  21)																				int _g65 = b17->width;
HXDLIN(  21)																				while((_g64 < _g65)){
HXLINE(  21)																					_g64 = (_g64 + 1);
HXDLIN(  21)																					int x9 = (_g64 - 1);
HXDLIN(  21)																					{
HXLINE(  21)																						w3 = (w3 + 1);
HXDLIN(  21)																						b17->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																					}
HXDLIN(  21)																					{
HXLINE(  21)																						w3 = (w3 + 1);
HXDLIN(  21)																						b17->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																					}
HXDLIN(  21)																					{
HXLINE(  21)																						w3 = (w3 + 1);
HXDLIN(  21)																						b17->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																					}
HXDLIN(  21)																					{
HXLINE(  21)																						w3 = (w3 + 1);
HXDLIN(  21)																						b17->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																					}
            																				}
            																			}
            																		}
            																	}
            																}
            															}
HXDLIN(  21)															undoImage7 = b17;
            														}
            														break;
            														case (int)1: {
HXLINE(  21)															 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)															 ::iterMagic::ArrIntImg a9 = arrI3;
HXDLIN(  21)															{
HXLINE(  21)																a9->width = width3;
HXDLIN(  21)																a9->height = height3;
HXDLIN(  21)																a9->data = ::Array_obj< int >::__new(0);
HXDLIN(  21)																a9->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  21)																{
HXLINE(  21)																	int _g66 = 0;
HXDLIN(  21)																	int _g67 = a9->length;
HXDLIN(  21)																	while((_g66 < _g67)){
HXLINE(  21)																		_g66 = (_g66 + 1);
HXDLIN(  21)																		int i21 = (_g66 - 1);
HXDLIN(  21)																		a9->data[i21] = 0;
            																	}
            																}
            															}
HXDLIN(  21)															undoImage7 = a9;
            														}
            														break;
            														case (int)2: {
HXLINE(  21)															 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  21)															 ::iterMagic::U32ArrImg b18 = u32a3;
HXDLIN(  21)															{
HXLINE(  21)																b18->width = width3;
HXDLIN(  21)																b18->height = height3;
HXDLIN(  21)																b18->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  21)																int size3 = (b18->length * 4);
HXDLIN(  21)																b18->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  21)																{
HXLINE(  21)																	int _g68 = 0;
HXDLIN(  21)																	int _g69 = b18->length;
HXDLIN(  21)																	while((_g68 < _g69)){
HXLINE(  21)																		_g68 = (_g68 + 1);
HXDLIN(  21)																		int i22 = (_g68 - 1);
HXDLIN(  21)																		{
HXLINE(  21)																			 ::haxe::io::ArrayBufferViewImpl this75 = b18->data;
HXDLIN(  21)																			bool undoImage8;
HXDLIN(  21)																			if ((i22 >= 0)) {
HXLINE(  21)																				undoImage8 = (i22 < (this75->byteLength >> 2));
            																			}
            																			else {
HXLINE(  21)																				undoImage8 = false;
            																			}
HXDLIN(  21)																			if (undoImage8) {
HXLINE(  21)																				 ::haxe::io::Bytes _this3 = this75->bytes;
HXDLIN(  21)																				int pos3 = ((i22 << 2) + this75->byteOffset);
HXDLIN(  21)																				_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  21)																				_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  21)																				_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  21)																				_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
HXDLIN(  21)															undoImage7 = b18;
            														}
            														break;
            														case (int)3: {
HXLINE(  21)															 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)															 ::iterMagic::VecIntImg v7 = vec3;
HXDLIN(  21)															{
HXLINE(  21)																v7->width = width3;
HXDLIN(  21)																v7->height = height3;
HXDLIN(  21)																v7->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  21)																v7->data = ::Array_obj< int >::__new(v7->length);
HXDLIN(  21)																{
HXLINE(  21)																	int _g70 = 0;
HXDLIN(  21)																	int _g71 = v7->length;
HXDLIN(  21)																	while((_g70 < _g71)){
HXLINE(  21)																		_g70 = (_g70 + 1);
HXDLIN(  21)																		int i23 = (_g70 - 1);
HXDLIN(  21)																		v7->data->__unsafe_set(i23,0);
            																	}
            																}
            															}
HXDLIN(  21)															undoImage7 = v7;
            														}
            														break;
            														case (int)4: {
HXLINE(  21)															 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)															 ::iterMagic::StackIntImg b19 = sInt3;
HXDLIN(  21)															{
HXLINE(  21)																b19->width = width3;
HXDLIN(  21)																b19->height = height3;
HXDLIN(  21)																b19->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  21)																b19->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  21)																{
HXLINE(  21)																	int len7 = b19->length;
HXDLIN(  21)																	 ::haxe::ds::GenericStack_Int d3 = b19->data;
HXDLIN(  21)																	if (::hx::IsNull( d3->head )) {
HXLINE(  21)																		int _g72 = 0;
HXDLIN(  21)																		int _g73 = len7;
HXDLIN(  21)																		while((_g72 < _g73)){
HXLINE(  21)																			_g72 = (_g72 + 1);
HXDLIN(  21)																			int i24 = (_g72 - 1);
HXDLIN(  21)																			d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            																		}
            																	}
            																	else {
HXLINE(  21)																		int _g74 = 0;
HXDLIN(  21)																		int _g75 = len7;
HXDLIN(  21)																		while((_g74 < _g75)){
HXLINE(  21)																			_g74 = (_g74 + 1);
HXDLIN(  21)																			int i25 = (_g74 - 1);
HXDLIN(  21)																			{
HXLINE(  21)																				 ::haxe::ds::GenericCell_Int l3 = b19->data->head;
HXDLIN(  21)																				 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  21)																				{
HXLINE(  21)																					int _g76 = 0;
HXDLIN(  21)																					int _g77 = i25;
HXDLIN(  21)																					while((_g76 < _g77)){
HXLINE(  21)																						_g76 = (_g76 + 1);
HXDLIN(  21)																						int i26 = (_g76 - 1);
HXLINE( 345)																						prev3 = l3;
HXLINE( 346)																						l3 = l3->next;
            																					}
            																				}
HXLINE(  21)																				if (::hx::IsNull( prev3 )) {
HXLINE(  21)																					b19->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  21)																					l3 = null();
            																				}
            																				else {
HXLINE(  21)																					prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  21)																					l3 = null();
            																				}
            																			}
            																		}
            																	}
            																}
            															}
HXDLIN(  21)															undoImage7 = b19;
            														}
            														break;
            													}
HXDLIN(  21)													this74->image = undoImage7;
HXDLIN(  21)													this74->width = width3;
HXDLIN(  21)													this74->height = height3;
HXDLIN(  21)													this74->imageType = ( (int)(imageType3) );
HXDLIN(  21)													undoImage6 = this74;
HXDLIN(  21)													{
HXLINE(  21)														int rectLeft2 = xIter32->start;
HXDLIN(  21)														int rectTop2 = yIter32->start;
HXDLIN(  21)														int rectRight2 = xIter32->max;
HXDLIN(  21)														bool forceClear2 = false;
HXDLIN(  21)														{
HXLINE(  21)															int _g78 = rectTop2;
HXDLIN(  21)															int _g79 = yIter32->max;
HXDLIN(  21)															while((_g78 < _g79)){
HXLINE(  21)																_g78 = (_g78 + 1);
HXDLIN(  21)																int dy2 = (_g78 - 1);
HXDLIN(  21)																{
HXLINE(  21)																	int _g80 = rectLeft2;
HXDLIN(  21)																	int _g81 = rectRight2;
HXDLIN(  21)																	while((_g80 < _g81)){
HXLINE(  21)																		_g80 = (_g80 + 1);
HXDLIN(  21)																		int dx2 = (_g80 - 1);
HXDLIN(  21)																		::Dynamic this76 = this73->image;
HXDLIN(  21)																		int index10;
HXDLIN(  21)																		if (this73->useVirtualPos) {
HXLINE(  21)																			index10 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this73->virtualY) * ( (Float)(this73->width) )) + dx2) - this73->virtualX));
            																		}
            																		else {
HXLINE(  21)																			index10 = ::Std_obj::_hx_int(( (Float)(((dy2 * this73->width) + dx2)) ));
            																		}
HXDLIN(  21)																		int c8 = ::iterMagic::Iimg_obj::get(this76,index10);
HXDLIN(  21)																		int col2;
HXDLIN(  21)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																			col2 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            																		}
            																		else {
HXLINE(  21)																			col2 = c8;
            																		}
HXDLIN(  21)																		bool _hx_tmp18;
HXDLIN(  21)																		if (this73->useMask) {
HXLINE(  21)																			_hx_tmp18 = ::hx::IsNotNull( this73->mask );
            																		}
            																		else {
HXLINE(  21)																			_hx_tmp18 = false;
            																		}
HXDLIN(  21)																		if (_hx_tmp18) {
HXLINE(  21)																			 ::pi_xy::ImageStruct this77 = this73->mask;
HXDLIN(  21)																			::Dynamic this78 = this77->image;
HXDLIN(  21)																			int index11;
HXDLIN(  21)																			if (this77->useVirtualPos) {
HXLINE(  21)																				index11 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this77->virtualY) * ( (Float)(this77->width) )) + dx2) - this77->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index11 = ::Std_obj::_hx_int(( (Float)(((dy2 * this77->width) + dx2)) ));
            																			}
HXDLIN(  21)																			int c9 = ::iterMagic::Iimg_obj::get(this78,index11);
HXDLIN(  21)																			int v8;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				v8 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				v8 = c9;
            																			}
HXDLIN(  21)																			int maskPixel2 = v8;
HXDLIN(  21)																			int this79 = col2;
HXDLIN(  21)																			if ((maskPixel2 == 0)) {
HXLINE(  21)																				col2 = this79;
            																			}
            																			else {
HXLINE(  21)																				Float m02;
HXDLIN(  21)																				int this80 = ((maskPixel2 >> 24) & 255);
HXDLIN(  21)																				if ((this80 == 0)) {
HXLINE(  21)																					m02 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					m02 = (( (Float)(this80) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float m12;
HXDLIN(  21)																				int this81 = ((maskPixel2 >> 16) & 255);
HXDLIN(  21)																				if ((this81 == 0)) {
HXLINE(  21)																					m12 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					m12 = (( (Float)(this81) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float m22;
HXDLIN(  21)																				int this82 = ((maskPixel2 >> 8) & 255);
HXDLIN(  21)																				if ((this82 == 0)) {
HXLINE(  21)																					m22 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					m22 = (( (Float)(this82) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float m32;
HXDLIN(  21)																				int this83 = (maskPixel2 & 255);
HXDLIN(  21)																				if ((this83 == 0)) {
HXLINE(  21)																					m32 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					m32 = (( (Float)(this83) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this79 >> 24) & 255)) )));
HXDLIN(  21)																				int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this79 >> 16) & 255)) )));
HXDLIN(  21)																				int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this79 >> 8) & 255)) )));
HXDLIN(  21)																				int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this79 & 255)) )));
HXDLIN(  21)																				col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            																			}
            																		}
HXDLIN(  21)																		if ((col2 != 0)) {
HXLINE(  21)																			int x10 = (dx2 - rectLeft2);
HXDLIN(  21)																			int y10 = (dy2 - rectTop2);
HXDLIN(  21)																			int c10 = col2;
HXDLIN(  21)																			bool _hx_tmp19;
HXDLIN(  21)																			if ((((c10 >> 24) & 255) < 254)) {
HXLINE(  21)																				_hx_tmp19 = undoImage6->transparent;
            																			}
            																			else {
HXLINE(  21)																				_hx_tmp19 = false;
            																			}
HXDLIN(  21)																			if (_hx_tmp19) {
HXLINE(  21)																				int location4;
HXDLIN(  21)																				if (undoImage6->useVirtualPos) {
HXLINE(  21)																					location4 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x10) - undoImage6->virtualX));
            																				}
            																				else {
HXLINE(  21)																					location4 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage6->width) + x10)) ));
            																				}
HXDLIN(  21)																				int this84 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN(  21)																				int this85;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					this85 = ((((((this84 >> 24) & 255) << 24) | ((this84 & 255) << 16)) | (((this84 >> 8) & 255) << 8)) | ((this84 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					this85 = this84;
            																				}
HXDLIN(  21)																				Float a15;
HXDLIN(  21)																				int this86 = ((this85 >> 24) & 255);
HXDLIN(  21)																				if ((this86 == 0)) {
HXLINE(  21)																					a15 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					a15 = (( (Float)(this86) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float r14;
HXDLIN(  21)																				int this87 = ((this85 >> 16) & 255);
HXDLIN(  21)																				if ((this87 == 0)) {
HXLINE(  21)																					r14 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					r14 = (( (Float)(this87) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float g14;
HXDLIN(  21)																				int this88 = ((this85 >> 8) & 255);
HXDLIN(  21)																				if ((this88 == 0)) {
HXLINE(  21)																					g14 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					g14 = (( (Float)(this88) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float b110;
HXDLIN(  21)																				int this89 = (this85 & 255);
HXDLIN(  21)																				if ((this89 == 0)) {
HXLINE(  21)																					b110 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					b110 = (( (Float)(this89) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float a24;
HXDLIN(  21)																				int this90 = ((col2 >> 24) & 255);
HXDLIN(  21)																				if ((this90 == 0)) {
HXLINE(  21)																					a24 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					a24 = (( (Float)(this90) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float r24;
HXDLIN(  21)																				int this91 = ((col2 >> 16) & 255);
HXDLIN(  21)																				if ((this91 == 0)) {
HXLINE(  21)																					r24 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					r24 = (( (Float)(this91) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float g24;
HXDLIN(  21)																				int this92 = ((col2 >> 8) & 255);
HXDLIN(  21)																				if ((this92 == 0)) {
HXLINE(  21)																					g24 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					g24 = (( (Float)(this92) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float b25;
HXDLIN(  21)																				int this93 = (col2 & 255);
HXDLIN(  21)																				if ((this93 == 0)) {
HXLINE(  21)																					b25 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					b25 = (( (Float)(this93) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float a34 = (a15 * (( (Float)(1) ) - a24));
HXDLIN(  21)																				int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  21)																				int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  21)																				int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a34) + (b25 * a24))));
HXDLIN(  21)																				int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  21)																				int blended4 = ((((a10 << 24) | (r6 << 16)) | (g6 << 8)) | b20);
HXDLIN(  21)																				{
HXLINE(  21)																					int _hx_tmp20;
HXDLIN(  21)																					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																						_hx_tmp20 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            																					}
            																					else {
HXLINE(  21)																						_hx_tmp20 = blended4;
            																					}
HXDLIN(  21)																					::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp20);
            																				}
            																			}
            																			else {
HXLINE(  21)																				::Dynamic this94 = undoImage6->image;
HXDLIN(  21)																				int index12;
HXDLIN(  21)																				if (undoImage6->useVirtualPos) {
HXLINE(  21)																					index12 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x10) - undoImage6->virtualX));
            																				}
            																				else {
HXLINE(  21)																					index12 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage6->width) + x10)) ));
            																				}
HXDLIN(  21)																				int _hx_tmp21;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					_hx_tmp21 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					_hx_tmp21 = c10;
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(this94,index12,_hx_tmp21);
            																			}
            																		}
            																		else {
HXLINE(  21)																			if (forceClear2) {
HXLINE(  21)																				::Dynamic this95 = undoImage6->image;
HXDLIN(  21)																				int x11 = (dx2 - rectLeft2);
HXDLIN(  21)																				int y11 = (dy2 - rectTop2);
HXDLIN(  21)																				int index13;
HXDLIN(  21)																				if (undoImage6->useVirtualPos) {
HXLINE(  21)																					index13 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x11) - undoImage6->virtualX));
            																				}
            																				else {
HXLINE(  21)																					index13 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage6->width) + x11)) ));
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(this95,index13,0);
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  21)												bool found2 = false;
HXDLIN(  21)												Float s2 = ((Float)0.);
HXDLIN(  21)												Float t2 = ((Float)0.);
HXDLIN(  21)												Float sxx2 = ((Float)0.);
HXDLIN(  21)												Float txx2 = ((Float)0.);
HXDLIN(  21)												{
HXLINE(  21)													int _g_min4 = xIter32->start;
HXDLIN(  21)													int _g_max4 = xIter32->max;
HXDLIN(  21)													while((_g_min4 < _g_max4)){
HXLINE(  21)														_g_min4 = (_g_min4 + 1);
HXDLIN(  21)														int x12 = (_g_min4 - 1);
HXLINE(  60)														sxx2 = (sx2 * ( (Float)(x12) ));
HXLINE(  61)														txx2 = (tx2 * ( (Float)(x12) ));
HXLINE(  62)														found2 = false;
HXLINE(  21)														{
HXLINE(  21)															int _g_min5 = yIter32->start;
HXDLIN(  21)															int _g_max5 = yIter32->max;
HXDLIN(  21)															while((_g_min5 < _g_max5)){
HXLINE(  21)																_g_min5 = (_g_min5 + 1);
HXDLIN(  21)																int y12 = (_g_min5 - 1);
HXLINE(  64)																s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y12) )));
HXLINE(  65)																t2 = ((t02 + txx2) + (ty2 * ( (Float)(y12) )));
HXLINE(  21)																bool _hx_tmp22;
HXDLIN(  21)																if (!((s2 <= 0))) {
HXLINE(  21)																	_hx_tmp22 = (t2 <= 0);
            																}
            																else {
HXLINE(  21)																	_hx_tmp22 = true;
            																}
HXDLIN(  21)																if (_hx_tmp22) {
HXLINE(  21)																	if (found2) {
HXLINE(  21)																		goto _hx_goto_47;
            																	}
            																}
            																else {
HXLINE(  21)																	if (((s2 + t2) < A2)) {
HXLINE(  21)																		{
HXLINE(  21)																			int c11 = color1;
HXDLIN(  21)																			bool _hx_tmp23;
HXDLIN(  21)																			if ((((c11 >> 24) & 255) < 254)) {
HXLINE(  21)																				_hx_tmp23 = this73->transparent;
            																			}
            																			else {
HXLINE(  21)																				_hx_tmp23 = false;
            																			}
HXDLIN(  21)																			if (_hx_tmp23) {
HXLINE(  21)																				int location5;
HXDLIN(  21)																				if (this73->useVirtualPos) {
HXLINE(  21)																					location5 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - this73->virtualY) * ( (Float)(this73->width) )) + x12) - this73->virtualX));
            																				}
            																				else {
HXLINE(  21)																					location5 = ::Std_obj::_hx_int(( (Float)(((y12 * this73->width) + x12)) ));
            																				}
HXDLIN(  21)																				int this96 = ::iterMagic::Iimg_obj::get(this73->image,location5);
HXDLIN(  21)																				int this97;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					this97 = ((((((this96 >> 24) & 255) << 24) | ((this96 & 255) << 16)) | (((this96 >> 8) & 255) << 8)) | ((this96 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					this97 = this96;
            																				}
HXDLIN(  21)																				Float a16;
HXDLIN(  21)																				int this98 = ((this97 >> 24) & 255);
HXDLIN(  21)																				if ((this98 == 0)) {
HXLINE(  21)																					a16 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					a16 = (( (Float)(this98) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float r15;
HXDLIN(  21)																				int this99 = ((this97 >> 16) & 255);
HXDLIN(  21)																				if ((this99 == 0)) {
HXLINE(  21)																					r15 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					r15 = (( (Float)(this99) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float g15;
HXDLIN(  21)																				int this100 = ((this97 >> 8) & 255);
HXDLIN(  21)																				if ((this100 == 0)) {
HXLINE(  21)																					g15 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					g15 = (( (Float)(this100) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float b111;
HXDLIN(  21)																				int this101 = (this97 & 255);
HXDLIN(  21)																				if ((this101 == 0)) {
HXLINE(  21)																					b111 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					b111 = (( (Float)(this101) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float a25;
HXDLIN(  21)																				int this102 = ((color1 >> 24) & 255);
HXDLIN(  21)																				if ((this102 == 0)) {
HXLINE(  21)																					a25 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					a25 = (( (Float)(this102) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float r25;
HXDLIN(  21)																				int this103 = ((color1 >> 16) & 255);
HXDLIN(  21)																				if ((this103 == 0)) {
HXLINE(  21)																					r25 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					r25 = (( (Float)(this103) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float g25;
HXDLIN(  21)																				int this104 = ((color1 >> 8) & 255);
HXDLIN(  21)																				if ((this104 == 0)) {
HXLINE(  21)																					g25 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					g25 = (( (Float)(this104) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float b26;
HXDLIN(  21)																				int this105 = (color1 & 255);
HXDLIN(  21)																				if ((this105 == 0)) {
HXLINE(  21)																					b26 = ((Float)0.);
            																				}
            																				else {
HXLINE(  21)																					b26 = (( (Float)(this105) ) / ( (Float)(255) ));
            																				}
HXDLIN(  21)																				Float a35 = (a16 * (( (Float)(1) ) - a25));
HXDLIN(  21)																				int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  21)																				int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  21)																				int b27 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a35) + (b26 * a25))));
HXDLIN(  21)																				int a17 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  21)																				int blended5 = ((((a17 << 24) | (r7 << 16)) | (g7 << 8)) | b27);
HXDLIN(  21)																				{
HXLINE(  21)																					int _hx_tmp24;
HXDLIN(  21)																					if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																						_hx_tmp24 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            																					}
            																					else {
HXLINE(  21)																						_hx_tmp24 = blended5;
            																					}
HXDLIN(  21)																					::iterMagic::Iimg_obj::set(this73->image,location5,_hx_tmp24);
            																				}
            																			}
            																			else {
HXLINE(  21)																				::Dynamic this106 = this73->image;
HXDLIN(  21)																				int index14;
HXDLIN(  21)																				if (this73->useVirtualPos) {
HXLINE(  21)																					index14 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - this73->virtualY) * ( (Float)(this73->width) )) + x12) - this73->virtualX));
            																				}
            																				else {
HXLINE(  21)																					index14 = ::Std_obj::_hx_int(( (Float)(((y12 * this73->width) + x12)) ));
            																				}
HXDLIN(  21)																				int _hx_tmp25;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					_hx_tmp25 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					_hx_tmp25 = c11;
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(this106,index14,_hx_tmp25);
            																			}
            																		}
HXLINE(  73)																		found2 = true;
            																	}
            																	else {
HXLINE(  21)																		if (found2) {
HXLINE(  21)																			goto _hx_goto_47;
            																		}
            																	}
            																}
            															}
            															_hx_goto_47:;
            														}
            													}
            												}
HXDLIN(  21)												if ((hasHit2 == true)) {
HXLINE(  21)													 ::pi_xy::algo::HitTri v9 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,innerCx,innerCy,bx2,by2,cx3,cy3,true);
HXDLIN(  21)													if (hasUndo2) {
HXLINE(  21)														v9->undoImage = undoImage6;
HXDLIN(  21)														v9->undoX = xIter32->start;
HXDLIN(  21)														v9->undoY = yIter32->start;
            													}
            												}
            											}
            										}
            									}
HXLINE(  51)									lastX1 = nextX2;
HXLINE(  52)									lastY1 = nextY2;
            								}
            							}
            						}
            						else {
HXLINE(  21)							int _g82 = 0;
HXDLIN(  21)							int _g83 = (sides3 + 1);
HXDLIN(  21)							while((_g82 < _g83)){
HXLINE(  21)								_g82 = (_g82 + 1);
HXDLIN(  21)								int i27 = (_g82 - 1);
HXDLIN(  21)								Float nextX3 = (innerCx + (innerRw * ::Math_obj::cos((((( (Float)(i27) ) * theta1) + omega1) + ((Float)0.01)))));
HXDLIN(  21)								Float nextY3 = (innerCy + (innerRh * ::Math_obj::sin((((( (Float)(i27) ) * theta1) + omega1) + ((Float)0.01)))));
HXDLIN(  21)								{
HXLINE(  21)									 ::pi_xy::ImageStruct this107 = this72;
HXDLIN(  21)									bool hasHit3 = false;
HXDLIN(  21)									bool hasUndo3 = false;
HXDLIN(  21)									{
HXLINE(  21)										Float bx3 = lastX1;
HXDLIN(  21)										Float by3 = lastY1;
HXDLIN(  21)										Float cx4 = nextX3;
HXDLIN(  21)										Float cy4 = nextY3;
HXDLIN(  21)										bool adjustWinding3 = (((((innerCx * by3) - (bx3 * innerCy)) + ((bx3 * cy4) - (cx4 * by3))) + ((cx4 * innerCy) - (innerCx * cy4))) > 0);
HXDLIN(  21)										if (!(adjustWinding3)) {
HXLINE(  21)											Float bx_3 = bx3;
HXDLIN(  21)											Float by_3 = by3;
HXLINE(  25)											bx3 = cx4;
HXLINE(  26)											by3 = cy4;
HXLINE(  27)											cx4 = bx_3;
HXLINE(  28)											cy4 = by_3;
            										}
HXLINE(  21)										{
HXLINE(  21)											Float s03 = ((innerCy * cx4) - (innerCx * cy4));
HXDLIN(  21)											Float sx3 = (cy4 - innerCy);
HXDLIN(  21)											Float sy3 = (innerCx - cx4);
HXDLIN(  21)											Float t03 = ((innerCx * by3) - (innerCy * bx3));
HXDLIN(  21)											Float tx3 = (innerCy - by3);
HXDLIN(  21)											Float ty3 = (bx3 - innerCx);
HXDLIN(  21)											Float A3 = ((((-(by3) * cx4) + (innerCy * (-(bx3) + cx4))) + (innerCx * (by3 - cy4))) + (bx3 * cy4));
HXDLIN(  21)											 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  21)											if ((innerCx > bx3)) {
HXLINE(  21)												if ((innerCx > cx4)) {
HXLINE(  21)													int min12;
HXDLIN(  21)													if ((bx3 > cx4)) {
HXLINE(  21)														min12 = ::Math_obj::floor(cx4);
            													}
            													else {
HXLINE(  21)														min12 = ::Math_obj::floor(bx3);
            													}
HXDLIN(  21)													int ii_min24 = min12;
HXDLIN(  21)													int ii_max24 = ::Math_obj::ceil(innerCx);
HXDLIN(  21)													xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            												}
            												else {
HXLINE(  21)													int ii_min25 = ::Math_obj::floor(bx3);
HXDLIN(  21)													int ii_max25 = ::Math_obj::ceil(cx4);
HXDLIN(  21)													xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            												}
            											}
            											else {
HXLINE(  21)												if ((bx3 > cx4)) {
HXLINE(  21)													int min13;
HXDLIN(  21)													if ((innerCx > cx4)) {
HXLINE(  21)														min13 = ::Math_obj::floor(cx4);
            													}
            													else {
HXLINE(  21)														min13 = ::Math_obj::ceil(innerCx);
            													}
HXDLIN(  21)													int ii_min26 = min13;
HXDLIN(  21)													int ii_max26 = ::Math_obj::ceil(bx3);
HXDLIN(  21)													xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            												}
            												else {
HXLINE(  21)													int ii_min27 = ::Math_obj::floor(innerCx);
HXDLIN(  21)													int ii_max27 = ::Math_obj::ceil(cx4);
HXDLIN(  21)													xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            												}
            											}
HXDLIN(  21)											 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  21)											if ((innerCy > by3)) {
HXLINE(  21)												if ((innerCy > cy4)) {
HXLINE(  21)													int min14;
HXDLIN(  21)													if ((by3 > cy4)) {
HXLINE(  21)														min14 = ::Math_obj::floor(cy4);
            													}
            													else {
HXLINE(  21)														min14 = ::Math_obj::floor(by3);
            													}
HXDLIN(  21)													int ii_min28 = min14;
HXDLIN(  21)													int ii_max28 = ::Math_obj::ceil(innerCy);
HXDLIN(  21)													yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            												}
            												else {
HXLINE(  21)													int ii_min29 = ::Math_obj::floor(by3);
HXDLIN(  21)													int ii_max29 = ::Math_obj::ceil(cy4);
HXDLIN(  21)													yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            												}
            											}
            											else {
HXLINE(  21)												if ((by3 > cy4)) {
HXLINE(  21)													int min15;
HXDLIN(  21)													if ((innerCy > cy4)) {
HXLINE(  21)														min15 = ::Math_obj::floor(cy4);
            													}
            													else {
HXLINE(  21)														min15 = ::Math_obj::ceil(innerCy);
            													}
HXDLIN(  21)													int ii_min30 = min15;
HXDLIN(  21)													int ii_max30 = ::Math_obj::ceil(by3);
HXDLIN(  21)													yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            												}
            												else {
HXLINE(  21)													int ii_min31 = ::Math_obj::floor(innerCy);
HXDLIN(  21)													int ii_max31 = ::Math_obj::ceil(cy4);
HXDLIN(  21)													yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            												}
            											}
HXDLIN(  21)											 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  21)											if (hasUndo3) {
HXLINE(  21)												int width4 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  21)												int height4 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  21)												 ::Dynamic imageType4 = null();
HXDLIN(  21)												 ::pi_xy::ImageStruct this108 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  21)												if (::hx::IsNull( imageType4 )) {
HXLINE(  54)													imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE(  21)												::Dynamic undoImage10;
HXDLIN(  21)												switch((int)(( (int)(imageType4) ))){
            													case (int)0: {
HXLINE(  21)														 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::BytesImg b28 = byt4;
HXDLIN(  21)														{
HXLINE(  21)															b28->width = width4;
HXDLIN(  21)															b28->height = height4;
HXDLIN(  21)															b28->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  21)															b28->data = ::haxe::io::Bytes_obj::alloc((b28->length * 4));
HXDLIN(  21)															{
HXLINE(  21)																int len8 = b28->length;
HXDLIN(  21)																int w4 = 0;
HXDLIN(  21)																{
HXLINE(  21)																	int _g84 = 0;
HXDLIN(  21)																	int _g85 = b28->height;
HXDLIN(  21)																	while((_g84 < _g85)){
HXLINE(  21)																		_g84 = (_g84 + 1);
HXDLIN(  21)																		int y13 = (_g84 - 1);
HXDLIN(  21)																		{
HXLINE(  21)																			int _g86 = 0;
HXDLIN(  21)																			int _g87 = b28->width;
HXDLIN(  21)																			while((_g86 < _g87)){
HXLINE(  21)																				_g86 = (_g86 + 1);
HXDLIN(  21)																				int x13 = (_g86 - 1);
HXDLIN(  21)																				{
HXLINE(  21)																					w4 = (w4 + 1);
HXDLIN(  21)																					b28->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w4 = (w4 + 1);
HXDLIN(  21)																					b28->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w4 = (w4 + 1);
HXDLIN(  21)																					b28->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  21)																				{
HXLINE(  21)																					w4 = (w4 + 1);
HXDLIN(  21)																					b28->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage10 = b28;
            													}
            													break;
            													case (int)1: {
HXLINE(  21)														 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::ArrIntImg a18 = arrI4;
HXDLIN(  21)														{
HXLINE(  21)															a18->width = width4;
HXDLIN(  21)															a18->height = height4;
HXDLIN(  21)															a18->data = ::Array_obj< int >::__new(0);
HXDLIN(  21)															a18->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  21)															{
HXLINE(  21)																int _g88 = 0;
HXDLIN(  21)																int _g89 = a18->length;
HXDLIN(  21)																while((_g88 < _g89)){
HXLINE(  21)																	_g88 = (_g88 + 1);
HXDLIN(  21)																	int i28 = (_g88 - 1);
HXDLIN(  21)																	a18->data[i28] = 0;
            																}
            															}
            														}
HXDLIN(  21)														undoImage10 = a18;
            													}
            													break;
            													case (int)2: {
HXLINE(  21)														 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::U32ArrImg b29 = u32a4;
HXDLIN(  21)														{
HXLINE(  21)															b29->width = width4;
HXDLIN(  21)															b29->height = height4;
HXDLIN(  21)															b29->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  21)															int size4 = (b29->length * 4);
HXDLIN(  21)															b29->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN(  21)															{
HXLINE(  21)																int _g90 = 0;
HXDLIN(  21)																int _g91 = b29->length;
HXDLIN(  21)																while((_g90 < _g91)){
HXLINE(  21)																	_g90 = (_g90 + 1);
HXDLIN(  21)																	int i29 = (_g90 - 1);
HXDLIN(  21)																	{
HXLINE(  21)																		 ::haxe::io::ArrayBufferViewImpl this109 = b29->data;
HXDLIN(  21)																		bool undoImage11;
HXDLIN(  21)																		if ((i29 >= 0)) {
HXLINE(  21)																			undoImage11 = (i29 < (this109->byteLength >> 2));
            																		}
            																		else {
HXLINE(  21)																			undoImage11 = false;
            																		}
HXDLIN(  21)																		if (undoImage11) {
HXLINE(  21)																			 ::haxe::io::Bytes _this4 = this109->bytes;
HXDLIN(  21)																			int pos4 = ((i29 << 2) + this109->byteOffset);
HXDLIN(  21)																			_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN(  21)																			_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage10 = b29;
            													}
            													break;
            													case (int)3: {
HXLINE(  21)														 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::VecIntImg v10 = vec4;
HXDLIN(  21)														{
HXLINE(  21)															v10->width = width4;
HXDLIN(  21)															v10->height = height4;
HXDLIN(  21)															v10->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  21)															v10->data = ::Array_obj< int >::__new(v10->length);
HXDLIN(  21)															{
HXLINE(  21)																int _g92 = 0;
HXDLIN(  21)																int _g93 = v10->length;
HXDLIN(  21)																while((_g92 < _g93)){
HXLINE(  21)																	_g92 = (_g92 + 1);
HXDLIN(  21)																	int i30 = (_g92 - 1);
HXDLIN(  21)																	v10->data->__unsafe_set(i30,0);
            																}
            															}
            														}
HXDLIN(  21)														undoImage10 = v10;
            													}
            													break;
            													case (int)4: {
HXLINE(  21)														 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)														 ::iterMagic::StackIntImg b30 = sInt4;
HXDLIN(  21)														{
HXLINE(  21)															b30->width = width4;
HXDLIN(  21)															b30->height = height4;
HXDLIN(  21)															b30->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  21)															b30->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  21)															{
HXLINE(  21)																int len9 = b30->length;
HXDLIN(  21)																 ::haxe::ds::GenericStack_Int d4 = b30->data;
HXDLIN(  21)																if (::hx::IsNull( d4->head )) {
HXLINE(  21)																	int _g94 = 0;
HXDLIN(  21)																	int _g95 = len9;
HXDLIN(  21)																	while((_g94 < _g95)){
HXLINE(  21)																		_g94 = (_g94 + 1);
HXDLIN(  21)																		int i31 = (_g94 - 1);
HXDLIN(  21)																		d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            																	}
            																}
            																else {
HXLINE(  21)																	int _g96 = 0;
HXDLIN(  21)																	int _g97 = len9;
HXDLIN(  21)																	while((_g96 < _g97)){
HXLINE(  21)																		_g96 = (_g96 + 1);
HXDLIN(  21)																		int i32 = (_g96 - 1);
HXDLIN(  21)																		{
HXLINE(  21)																			 ::haxe::ds::GenericCell_Int l4 = b30->data->head;
HXDLIN(  21)																			 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN(  21)																			{
HXLINE(  21)																				int _g98 = 0;
HXDLIN(  21)																				int _g99 = i32;
HXDLIN(  21)																				while((_g98 < _g99)){
HXLINE(  21)																					_g98 = (_g98 + 1);
HXDLIN(  21)																					int i33 = (_g98 - 1);
HXLINE( 345)																					prev4 = l4;
HXLINE( 346)																					l4 = l4->next;
            																				}
            																			}
HXLINE(  21)																			if (::hx::IsNull( prev4 )) {
HXLINE(  21)																				b30->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  21)																				l4 = null();
            																			}
            																			else {
HXLINE(  21)																				prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  21)																				l4 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  21)														undoImage10 = b30;
            													}
            													break;
            												}
HXDLIN(  21)												this108->image = undoImage10;
HXDLIN(  21)												this108->width = width4;
HXDLIN(  21)												this108->height = height4;
HXDLIN(  21)												this108->imageType = ( (int)(imageType4) );
HXDLIN(  21)												undoImage9 = this108;
HXDLIN(  21)												{
HXLINE(  21)													int rectLeft3 = xIter33->start;
HXDLIN(  21)													int rectTop3 = yIter33->start;
HXDLIN(  21)													int rectRight3 = xIter33->max;
HXDLIN(  21)													bool forceClear3 = false;
HXDLIN(  21)													{
HXLINE(  21)														int _g100 = rectTop3;
HXDLIN(  21)														int _g101 = yIter33->max;
HXDLIN(  21)														while((_g100 < _g101)){
HXLINE(  21)															_g100 = (_g100 + 1);
HXDLIN(  21)															int dy3 = (_g100 - 1);
HXDLIN(  21)															{
HXLINE(  21)																int _g102 = rectLeft3;
HXDLIN(  21)																int _g103 = rectRight3;
HXDLIN(  21)																while((_g102 < _g103)){
HXLINE(  21)																	_g102 = (_g102 + 1);
HXDLIN(  21)																	int dx3 = (_g102 - 1);
HXDLIN(  21)																	::Dynamic this110 = this107->image;
HXDLIN(  21)																	int index15;
HXDLIN(  21)																	if (this107->useVirtualPos) {
HXLINE(  21)																		index15 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this107->virtualY) * ( (Float)(this107->width) )) + dx3) - this107->virtualX));
            																	}
            																	else {
HXLINE(  21)																		index15 = ::Std_obj::_hx_int(( (Float)(((dy3 * this107->width) + dx3)) ));
            																	}
HXDLIN(  21)																	int c12 = ::iterMagic::Iimg_obj::get(this110,index15);
HXDLIN(  21)																	int col3;
HXDLIN(  21)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																		col3 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            																	}
            																	else {
HXLINE(  21)																		col3 = c12;
            																	}
HXDLIN(  21)																	bool _hx_tmp26;
HXDLIN(  21)																	if (this107->useMask) {
HXLINE(  21)																		_hx_tmp26 = ::hx::IsNotNull( this107->mask );
            																	}
            																	else {
HXLINE(  21)																		_hx_tmp26 = false;
            																	}
HXDLIN(  21)																	if (_hx_tmp26) {
HXLINE(  21)																		 ::pi_xy::ImageStruct this111 = this107->mask;
HXDLIN(  21)																		::Dynamic this112 = this111->image;
HXDLIN(  21)																		int index16;
HXDLIN(  21)																		if (this111->useVirtualPos) {
HXLINE(  21)																			index16 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this111->virtualY) * ( (Float)(this111->width) )) + dx3) - this111->virtualX));
            																		}
            																		else {
HXLINE(  21)																			index16 = ::Std_obj::_hx_int(( (Float)(((dy3 * this111->width) + dx3)) ));
            																		}
HXDLIN(  21)																		int c13 = ::iterMagic::Iimg_obj::get(this112,index16);
HXDLIN(  21)																		int v11;
HXDLIN(  21)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																			v11 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            																		}
            																		else {
HXLINE(  21)																			v11 = c13;
            																		}
HXDLIN(  21)																		int maskPixel3 = v11;
HXDLIN(  21)																		int this113 = col3;
HXDLIN(  21)																		if ((maskPixel3 == 0)) {
HXLINE(  21)																			col3 = this113;
            																		}
            																		else {
HXLINE(  21)																			Float m03;
HXDLIN(  21)																			int this114 = ((maskPixel3 >> 24) & 255);
HXDLIN(  21)																			if ((this114 == 0)) {
HXLINE(  21)																				m03 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m03 = (( (Float)(this114) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m13;
HXDLIN(  21)																			int this115 = ((maskPixel3 >> 16) & 255);
HXDLIN(  21)																			if ((this115 == 0)) {
HXLINE(  21)																				m13 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m13 = (( (Float)(this115) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m23;
HXDLIN(  21)																			int this116 = ((maskPixel3 >> 8) & 255);
HXDLIN(  21)																			if ((this116 == 0)) {
HXLINE(  21)																				m23 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m23 = (( (Float)(this116) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float m33;
HXDLIN(  21)																			int this117 = (maskPixel3 & 255);
HXDLIN(  21)																			if ((this117 == 0)) {
HXLINE(  21)																				m33 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				m33 = (( (Float)(this117) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this113 >> 24) & 255)) )));
HXDLIN(  21)																			int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this113 >> 16) & 255)) )));
HXDLIN(  21)																			int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this113 >> 8) & 255)) )));
HXDLIN(  21)																			int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this113 & 255)) )));
HXDLIN(  21)																			col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN(  21)																	if ((col3 != 0)) {
HXLINE(  21)																		int x14 = (dx3 - rectLeft3);
HXDLIN(  21)																		int y14 = (dy3 - rectTop3);
HXDLIN(  21)																		int c14 = col3;
HXDLIN(  21)																		bool _hx_tmp27;
HXDLIN(  21)																		if ((((c14 >> 24) & 255) < 254)) {
HXLINE(  21)																			_hx_tmp27 = undoImage9->transparent;
            																		}
            																		else {
HXLINE(  21)																			_hx_tmp27 = false;
            																		}
HXDLIN(  21)																		if (_hx_tmp27) {
HXLINE(  21)																			int location6;
HXDLIN(  21)																			if (undoImage9->useVirtualPos) {
HXLINE(  21)																				location6 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x14) - undoImage9->virtualX));
            																			}
            																			else {
HXLINE(  21)																				location6 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage9->width) + x14)) ));
            																			}
HXDLIN(  21)																			int this118 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN(  21)																			int this119;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				this119 = ((((((this118 >> 24) & 255) << 24) | ((this118 & 255) << 16)) | (((this118 >> 8) & 255) << 8)) | ((this118 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				this119 = this118;
            																			}
HXDLIN(  21)																			Float a19;
HXDLIN(  21)																			int this120 = ((this119 >> 24) & 255);
HXDLIN(  21)																			if ((this120 == 0)) {
HXLINE(  21)																				a19 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a19 = (( (Float)(this120) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r16;
HXDLIN(  21)																			int this121 = ((this119 >> 16) & 255);
HXDLIN(  21)																			if ((this121 == 0)) {
HXLINE(  21)																				r16 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r16 = (( (Float)(this121) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g16;
HXDLIN(  21)																			int this122 = ((this119 >> 8) & 255);
HXDLIN(  21)																			if ((this122 == 0)) {
HXLINE(  21)																				g16 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g16 = (( (Float)(this122) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b112;
HXDLIN(  21)																			int this123 = (this119 & 255);
HXDLIN(  21)																			if ((this123 == 0)) {
HXLINE(  21)																				b112 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b112 = (( (Float)(this123) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a26;
HXDLIN(  21)																			int this124 = ((col3 >> 24) & 255);
HXDLIN(  21)																			if ((this124 == 0)) {
HXLINE(  21)																				a26 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a26 = (( (Float)(this124) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r26;
HXDLIN(  21)																			int this125 = ((col3 >> 16) & 255);
HXDLIN(  21)																			if ((this125 == 0)) {
HXLINE(  21)																				r26 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r26 = (( (Float)(this125) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g26;
HXDLIN(  21)																			int this126 = ((col3 >> 8) & 255);
HXDLIN(  21)																			if ((this126 == 0)) {
HXLINE(  21)																				g26 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g26 = (( (Float)(this126) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b210;
HXDLIN(  21)																			int this127 = (col3 & 255);
HXDLIN(  21)																			if ((this127 == 0)) {
HXLINE(  21)																				b210 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b210 = (( (Float)(this127) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a36 = (a19 * (( (Float)(1) ) - a26));
HXDLIN(  21)																			int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN(  21)																			int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN(  21)																			int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a36) + (b210 * a26))));
HXDLIN(  21)																			int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  21)																			int blended6 = ((((a20 << 24) | (r8 << 16)) | (g8 << 8)) | b31);
HXDLIN(  21)																			{
HXLINE(  21)																				int _hx_tmp28;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					_hx_tmp28 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					_hx_tmp28 = blended6;
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp28);
            																			}
            																		}
            																		else {
HXLINE(  21)																			::Dynamic this128 = undoImage9->image;
HXDLIN(  21)																			int index17;
HXDLIN(  21)																			if (undoImage9->useVirtualPos) {
HXLINE(  21)																				index17 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x14) - undoImage9->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index17 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage9->width) + x14)) ));
            																			}
HXDLIN(  21)																			int _hx_tmp29;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				_hx_tmp29 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				_hx_tmp29 = c14;
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this128,index17,_hx_tmp29);
            																		}
            																	}
            																	else {
HXLINE(  21)																		if (forceClear3) {
HXLINE(  21)																			::Dynamic this129 = undoImage9->image;
HXDLIN(  21)																			int x15 = (dx3 - rectLeft3);
HXDLIN(  21)																			int y15 = (dy3 - rectTop3);
HXDLIN(  21)																			int index18;
HXDLIN(  21)																			if (undoImage9->useVirtualPos) {
HXLINE(  21)																				index18 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x15) - undoImage9->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index18 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage9->width) + x15)) ));
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this129,index18,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  21)											bool found3 = false;
HXDLIN(  21)											Float s3 = ((Float)0.);
HXDLIN(  21)											Float t3 = ((Float)0.);
HXDLIN(  21)											Float sxx3 = ((Float)0.);
HXDLIN(  21)											Float txx3 = ((Float)0.);
HXDLIN(  21)											{
HXLINE(  21)												int _g_min6 = xIter33->start;
HXDLIN(  21)												int _g_max6 = xIter33->max;
HXDLIN(  21)												while((_g_min6 < _g_max6)){
HXLINE(  21)													_g_min6 = (_g_min6 + 1);
HXDLIN(  21)													int x16 = (_g_min6 - 1);
HXLINE(  60)													sxx3 = (sx3 * ( (Float)(x16) ));
HXLINE(  61)													txx3 = (tx3 * ( (Float)(x16) ));
HXLINE(  62)													found3 = false;
HXLINE(  21)													{
HXLINE(  21)														int _g_min7 = yIter33->start;
HXDLIN(  21)														int _g_max7 = yIter33->max;
HXDLIN(  21)														while((_g_min7 < _g_max7)){
HXLINE(  21)															_g_min7 = (_g_min7 + 1);
HXDLIN(  21)															int y16 = (_g_min7 - 1);
HXLINE(  64)															s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y16) )));
HXLINE(  65)															t3 = ((t03 + txx3) + (ty3 * ( (Float)(y16) )));
HXLINE(  21)															bool _hx_tmp30;
HXDLIN(  21)															if (!((s3 <= 0))) {
HXLINE(  21)																_hx_tmp30 = (t3 <= 0);
            															}
            															else {
HXLINE(  21)																_hx_tmp30 = true;
            															}
HXDLIN(  21)															if (_hx_tmp30) {
HXLINE(  21)																if (found3) {
HXLINE(  21)																	goto _hx_goto_60;
            																}
            															}
            															else {
HXLINE(  21)																if (((s3 + t3) < A3)) {
HXLINE(  21)																	{
HXLINE(  21)																		int c15 = color1;
HXDLIN(  21)																		bool _hx_tmp31;
HXDLIN(  21)																		if ((((c15 >> 24) & 255) < 254)) {
HXLINE(  21)																			_hx_tmp31 = this107->transparent;
            																		}
            																		else {
HXLINE(  21)																			_hx_tmp31 = false;
            																		}
HXDLIN(  21)																		if (_hx_tmp31) {
HXLINE(  21)																			int location7;
HXDLIN(  21)																			if (this107->useVirtualPos) {
HXLINE(  21)																				location7 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - this107->virtualY) * ( (Float)(this107->width) )) + x16) - this107->virtualX));
            																			}
            																			else {
HXLINE(  21)																				location7 = ::Std_obj::_hx_int(( (Float)(((y16 * this107->width) + x16)) ));
            																			}
HXDLIN(  21)																			int this130 = ::iterMagic::Iimg_obj::get(this107->image,location7);
HXDLIN(  21)																			int this131;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				this131 = ((((((this130 >> 24) & 255) << 24) | ((this130 & 255) << 16)) | (((this130 >> 8) & 255) << 8)) | ((this130 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				this131 = this130;
            																			}
HXDLIN(  21)																			Float a110;
HXDLIN(  21)																			int this132 = ((this131 >> 24) & 255);
HXDLIN(  21)																			if ((this132 == 0)) {
HXLINE(  21)																				a110 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a110 = (( (Float)(this132) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r17;
HXDLIN(  21)																			int this133 = ((this131 >> 16) & 255);
HXDLIN(  21)																			if ((this133 == 0)) {
HXLINE(  21)																				r17 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r17 = (( (Float)(this133) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g17;
HXDLIN(  21)																			int this134 = ((this131 >> 8) & 255);
HXDLIN(  21)																			if ((this134 == 0)) {
HXLINE(  21)																				g17 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g17 = (( (Float)(this134) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b113;
HXDLIN(  21)																			int this135 = (this131 & 255);
HXDLIN(  21)																			if ((this135 == 0)) {
HXLINE(  21)																				b113 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b113 = (( (Float)(this135) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a27;
HXDLIN(  21)																			int this136 = ((color1 >> 24) & 255);
HXDLIN(  21)																			if ((this136 == 0)) {
HXLINE(  21)																				a27 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				a27 = (( (Float)(this136) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float r27;
HXDLIN(  21)																			int this137 = ((color1 >> 16) & 255);
HXDLIN(  21)																			if ((this137 == 0)) {
HXLINE(  21)																				r27 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				r27 = (( (Float)(this137) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float g27;
HXDLIN(  21)																			int this138 = ((color1 >> 8) & 255);
HXDLIN(  21)																			if ((this138 == 0)) {
HXLINE(  21)																				g27 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				g27 = (( (Float)(this138) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float b211;
HXDLIN(  21)																			int this139 = (color1 & 255);
HXDLIN(  21)																			if ((this139 == 0)) {
HXLINE(  21)																				b211 = ((Float)0.);
            																			}
            																			else {
HXLINE(  21)																				b211 = (( (Float)(this139) ) / ( (Float)(255) ));
            																			}
HXDLIN(  21)																			Float a37 = (a110 * (( (Float)(1) ) - a27));
HXDLIN(  21)																			int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN(  21)																			int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN(  21)																			int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a37) + (b211 * a27))));
HXDLIN(  21)																			int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN(  21)																			int blended7 = ((((a28 << 24) | (r9 << 16)) | (g9 << 8)) | b32);
HXDLIN(  21)																			{
HXLINE(  21)																				int _hx_tmp32;
HXDLIN(  21)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																					_hx_tmp32 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            																				}
            																				else {
HXLINE(  21)																					_hx_tmp32 = blended7;
            																				}
HXDLIN(  21)																				::iterMagic::Iimg_obj::set(this107->image,location7,_hx_tmp32);
            																			}
            																		}
            																		else {
HXLINE(  21)																			::Dynamic this140 = this107->image;
HXDLIN(  21)																			int index19;
HXDLIN(  21)																			if (this107->useVirtualPos) {
HXLINE(  21)																				index19 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - this107->virtualY) * ( (Float)(this107->width) )) + x16) - this107->virtualX));
            																			}
            																			else {
HXLINE(  21)																				index19 = ::Std_obj::_hx_int(( (Float)(((y16 * this107->width) + x16)) ));
            																			}
HXDLIN(  21)																			int _hx_tmp33;
HXDLIN(  21)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  21)																				_hx_tmp33 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            																			}
            																			else {
HXLINE(  21)																				_hx_tmp33 = c15;
            																			}
HXDLIN(  21)																			::iterMagic::Iimg_obj::set(this140,index19,_hx_tmp33);
            																		}
            																	}
HXLINE(  73)																	found3 = true;
            																}
            																else {
HXLINE(  21)																	if (found3) {
HXLINE(  21)																		goto _hx_goto_60;
            																	}
            																}
            															}
            														}
            														_hx_goto_60:;
            													}
            												}
            											}
HXDLIN(  21)											if ((hasHit3 == true)) {
HXLINE(  21)												 ::pi_xy::algo::HitTri v12 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,innerCx,innerCy,bx3,by3,cx4,cy4,true);
HXDLIN(  21)												if (hasUndo3) {
HXLINE(  21)													v12->undoImage = undoImage9;
HXDLIN(  21)													v12->undoX = xIter33->start;
HXDLIN(  21)													v12->undoY = yIter33->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  59)								lastX1 = nextX3;
HXLINE(  60)								lastY1 = nextY3;
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(  23)			{
HXLINE(  23)				 ::pi_xy::ImageStruct this141 = temp;
HXDLIN(  23)				int color2 = this->strokeColor;
HXDLIN(  23)				Float softC = this->edgeSoft;
HXDLIN(  23)				Float rSmall2;
HXDLIN(  23)				if ((rW > rH)) {
HXLINE(  23)					rSmall2 = rH;
            				}
            				else {
HXLINE(  23)					rSmall2 = rW;
            				}
HXDLIN(  23)				 ::Dynamic targetE2 = ((Float)1.05);
HXDLIN(  23)				if (::hx::IsNull( targetE2 )) {
HXLINE( 287)					targetE2 = ((Float)1.05);
            				}
HXLINE(  23)				int result2 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE2) ) / rSmall2)))));
HXDLIN(  23)				int noSides2;
HXDLIN(  23)				if ((result2 < 12)) {
HXLINE(  23)					noSides2 = 12;
            				}
            				else {
HXLINE(  23)					if ((result2 > 500)) {
HXLINE(  23)						noSides2 = 500;
            					}
            					else {
HXLINE(  23)						noSides2 = result2;
            					}
            				}
HXDLIN(  23)				{
HXLINE(  23)					 ::Dynamic phi7 = phi;
HXDLIN(  23)					 ::Dynamic sides4 = noSides2;
HXDLIN(  23)					if (::hx::IsNull( sides4 )) {
HXLINE( 293)						sides4 = 36;
            					}
HXLINE(  23)					if (::hx::IsNull( phi7 )) {
HXLINE( 292)						phi7 = ((Float)0.);
            					}
HXLINE(  23)					{
HXLINE(  23)						 ::Dynamic phi8 = phi7;
HXDLIN(  23)						 ::Dynamic sides5 = sides4;
HXDLIN(  23)						if (::hx::IsNull( sides5 )) {
HXLINE( 310)							sides5 = 36;
            						}
HXLINE(  23)						if (::hx::IsNull( phi8 )) {
HXLINE( 309)							phi8 = ((Float)0.);
            						}
HXLINE(  23)						Float theta2 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides5) ));
HXDLIN(  23)						Float omega2;
HXDLIN(  23)						omega2 = ((Float)0.);
HXDLIN(  23)						Float lastX2 = ((Float)0.);
HXDLIN(  23)						Float lastY2 = ((Float)0.);
HXDLIN(  23)						if (::hx::IsNotEq( phi8,0 )) {
HXLINE(  95)							lastX2 = ((((rW * ::Math_obj::cos(((( (Float)(sides5) ) * theta2) + omega2))) * ::Math_obj::cos(( (Float)(phi8) ))) - ((rH * ::Math_obj::sin(((( (Float)(sides5) ) * theta2) + omega2))) * ::Math_obj::sin(( (Float)(phi8) )))) + cx);
HXLINE(  96)							lastY2 = ((((rW * ::Math_obj::cos(((( (Float)(sides5) ) * theta2) + omega2))) * ::Math_obj::sin(( (Float)(phi8) ))) + ((rH * ::Math_obj::sin(((( (Float)(sides5) ) * theta2) + omega2))) * ::Math_obj::cos(( (Float)(phi8) )))) + cy);
            						}
            						else {
HXLINE(  98)							lastX2 = (cx + (rW * ::Math_obj::cos(((( (Float)(sides5) ) * theta2) + omega2))));
HXLINE(  99)							lastY2 = (cy + (rH * ::Math_obj::sin(((( (Float)(sides5) ) * theta2) + omega2))));
            						}
HXLINE(  23)						if (::hx::IsNotEq( phi8,0 )) {
HXLINE(  23)							Float cphi2 = ::Math_obj::cos(( (Float)(phi8) ));
HXDLIN(  23)							Float sphi2 = ::Math_obj::sin(( (Float)(phi8) ));
HXDLIN(  23)							{
HXLINE(  23)								int _g104 = 0;
HXDLIN(  23)								int _g105 = (sides5 + 1);
HXDLIN(  23)								while((_g104 < _g105)){
HXLINE(  23)									_g104 = (_g104 + 1);
HXDLIN(  23)									int i34 = (_g104 - 1);
HXDLIN(  23)									Float stheta2 = ::Math_obj::sin((((( (Float)(i34) ) * theta2) + omega2) + ((Float)0.01)));
HXDLIN(  23)									Float ctheta2 = ::Math_obj::cos((((( (Float)(i34) ) * theta2) + omega2) + ((Float)0.01)));
HXDLIN(  23)									Float nextX4 = ((((rW * ctheta2) * cphi2) - ((rH * stheta2) * sphi2)) + cx);
HXDLIN(  23)									Float nextY4 = ((((rW * ctheta2) * sphi2) + ((rH * stheta2) * cphi2)) + cy);
HXDLIN(  23)									{
HXLINE(  23)										bool hasHit4 = false;
HXDLIN(  23)										bool hasUndo4 = false;
HXDLIN(  23)										int aA = ((color2 >> 24) & 255);
HXDLIN(  23)										int rA = ((color2 >> 16) & 255);
HXDLIN(  23)										int gA = ((color2 >> 8) & 255);
HXDLIN(  23)										int bA = (color2 & 255);
HXDLIN(  23)										Float bcx = (lastX2 - nextX4);
HXDLIN(  23)										Float bcy = (lastY2 - nextY4);
HXDLIN(  23)										Float acx = (cx - nextX4);
HXDLIN(  23)										Float acy = (cy - nextY4);
HXDLIN(  23)										Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  23)										Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  23)										Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  23)										Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  23)										 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN(  23)										if ((cx > lastX2)) {
HXLINE(  23)											if ((cx > nextX4)) {
HXLINE(  23)												int min16;
HXDLIN(  23)												if ((lastX2 > nextX4)) {
HXLINE(  23)													min16 = ::Math_obj::floor(nextX4);
            												}
            												else {
HXLINE(  23)													min16 = ::Math_obj::floor(lastX2);
            												}
HXDLIN(  23)												int ii_min32 = min16;
HXDLIN(  23)												int ii_max32 = ::Math_obj::ceil(cx);
HXDLIN(  23)												xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            											}
            											else {
HXLINE(  23)												int ii_min33 = ::Math_obj::floor(lastX2);
HXDLIN(  23)												int ii_max33 = ::Math_obj::ceil(nextX4);
HXDLIN(  23)												xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            											}
            										}
            										else {
HXLINE(  23)											if ((lastX2 > nextX4)) {
HXLINE(  23)												int min17;
HXDLIN(  23)												if ((cx > nextX4)) {
HXLINE(  23)													min17 = ::Math_obj::floor(nextX4);
            												}
            												else {
HXLINE(  23)													min17 = ::Math_obj::ceil(cx);
            												}
HXDLIN(  23)												int ii_min34 = min17;
HXDLIN(  23)												int ii_max34 = ::Math_obj::ceil(lastX2);
HXDLIN(  23)												xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            											}
            											else {
HXLINE(  23)												int ii_min35 = ::Math_obj::floor(cx);
HXDLIN(  23)												int ii_max35 = ::Math_obj::ceil(nextX4);
HXDLIN(  23)												xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            											}
            										}
HXDLIN(  23)										 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN(  23)										if ((cy > lastY2)) {
HXLINE(  23)											if ((cy > nextY4)) {
HXLINE(  23)												int min18;
HXDLIN(  23)												if ((lastY2 > nextY4)) {
HXLINE(  23)													min18 = ::Math_obj::floor(nextY4);
            												}
            												else {
HXLINE(  23)													min18 = ::Math_obj::floor(lastY2);
            												}
HXDLIN(  23)												int ii_min36 = min18;
HXDLIN(  23)												int ii_max36 = ::Math_obj::ceil(cy);
HXDLIN(  23)												yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            											}
            											else {
HXLINE(  23)												int ii_min37 = ::Math_obj::floor(lastY2);
HXDLIN(  23)												int ii_max37 = ::Math_obj::ceil(nextY4);
HXDLIN(  23)												yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            											}
            										}
            										else {
HXLINE(  23)											if ((lastY2 > nextY4)) {
HXLINE(  23)												int min19;
HXDLIN(  23)												if ((cy > nextY4)) {
HXLINE(  23)													min19 = ::Math_obj::floor(nextY4);
            												}
            												else {
HXLINE(  23)													min19 = ::Math_obj::ceil(cy);
            												}
HXDLIN(  23)												int ii_min38 = min19;
HXDLIN(  23)												int ii_max38 = ::Math_obj::ceil(lastY2);
HXDLIN(  23)												yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            											}
            											else {
HXLINE(  23)												int ii_min39 = ::Math_obj::floor(cy);
HXDLIN(  23)												int ii_max39 = ::Math_obj::ceil(nextY4);
HXDLIN(  23)												yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            											}
            										}
HXDLIN(  23)										 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN(  23)										if (hasUndo4) {
HXLINE(  23)											int width5 = ((xIter34->max - xIter34->start) + 1);
HXDLIN(  23)											int height5 = ((yIter34->max - yIter34->start) + 1);
HXDLIN(  23)											 ::Dynamic imageType5 = null();
HXDLIN(  23)											 ::pi_xy::ImageStruct this142 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  23)											if (::hx::IsNull( imageType5 )) {
HXLINE(  54)												imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  23)											::Dynamic undoImage13;
HXDLIN(  23)											switch((int)(( (int)(imageType5) ))){
            												case (int)0: {
HXLINE(  23)													 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  23)													 ::iterMagic::BytesImg b33 = byt5;
HXDLIN(  23)													{
HXLINE(  23)														b33->width = width5;
HXDLIN(  23)														b33->height = height5;
HXDLIN(  23)														b33->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  23)														b33->data = ::haxe::io::Bytes_obj::alloc((b33->length * 4));
HXDLIN(  23)														{
HXLINE(  23)															int len10 = b33->length;
HXDLIN(  23)															int w5 = 0;
HXDLIN(  23)															{
HXLINE(  23)																int _g106 = 0;
HXDLIN(  23)																int _g107 = b33->height;
HXDLIN(  23)																while((_g106 < _g107)){
HXLINE(  23)																	_g106 = (_g106 + 1);
HXDLIN(  23)																	int y17 = (_g106 - 1);
HXDLIN(  23)																	{
HXLINE(  23)																		int _g108 = 0;
HXDLIN(  23)																		int _g109 = b33->width;
HXDLIN(  23)																		while((_g108 < _g109)){
HXLINE(  23)																			_g108 = (_g108 + 1);
HXDLIN(  23)																			int x17 = (_g108 - 1);
HXDLIN(  23)																			{
HXLINE(  23)																				w5 = (w5 + 1);
HXDLIN(  23)																				b33->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  23)																			{
HXLINE(  23)																				w5 = (w5 + 1);
HXDLIN(  23)																				b33->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  23)																			{
HXLINE(  23)																				w5 = (w5 + 1);
HXDLIN(  23)																				b33->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  23)																			{
HXLINE(  23)																				w5 = (w5 + 1);
HXDLIN(  23)																				b33->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  23)													undoImage13 = b33;
            												}
            												break;
            												case (int)1: {
HXLINE(  23)													 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  23)													 ::iterMagic::ArrIntImg a29 = arrI5;
HXDLIN(  23)													{
HXLINE(  23)														a29->width = width5;
HXDLIN(  23)														a29->height = height5;
HXDLIN(  23)														a29->data = ::Array_obj< int >::__new(0);
HXDLIN(  23)														a29->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  23)														{
HXLINE(  23)															int _g110 = 0;
HXDLIN(  23)															int _g111 = a29->length;
HXDLIN(  23)															while((_g110 < _g111)){
HXLINE(  23)																_g110 = (_g110 + 1);
HXDLIN(  23)																int i35 = (_g110 - 1);
HXDLIN(  23)																a29->data[i35] = 0;
            															}
            														}
            													}
HXDLIN(  23)													undoImage13 = a29;
            												}
            												break;
            												case (int)2: {
HXLINE(  23)													 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  23)													 ::iterMagic::U32ArrImg b34 = u32a5;
HXDLIN(  23)													{
HXLINE(  23)														b34->width = width5;
HXDLIN(  23)														b34->height = height5;
HXDLIN(  23)														b34->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  23)														int size5 = (b34->length * 4);
HXDLIN(  23)														b34->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN(  23)														{
HXLINE(  23)															int _g112 = 0;
HXDLIN(  23)															int _g113 = b34->length;
HXDLIN(  23)															while((_g112 < _g113)){
HXLINE(  23)																_g112 = (_g112 + 1);
HXDLIN(  23)																int i36 = (_g112 - 1);
HXDLIN(  23)																{
HXLINE(  23)																	 ::haxe::io::ArrayBufferViewImpl this143 = b34->data;
HXDLIN(  23)																	bool undoImage14;
HXDLIN(  23)																	if ((i36 >= 0)) {
HXLINE(  23)																		undoImage14 = (i36 < (this143->byteLength >> 2));
            																	}
            																	else {
HXLINE(  23)																		undoImage14 = false;
            																	}
HXDLIN(  23)																	if (undoImage14) {
HXLINE(  23)																		 ::haxe::io::Bytes _this5 = this143->bytes;
HXDLIN(  23)																		int pos5 = ((i36 << 2) + this143->byteOffset);
HXDLIN(  23)																		_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN(  23)																		_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN(  23)																		_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN(  23)																		_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  23)													undoImage13 = b34;
            												}
            												break;
            												case (int)3: {
HXLINE(  23)													 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  23)													 ::iterMagic::VecIntImg v13 = vec5;
HXDLIN(  23)													{
HXLINE(  23)														v13->width = width5;
HXDLIN(  23)														v13->height = height5;
HXDLIN(  23)														v13->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  23)														v13->data = ::Array_obj< int >::__new(v13->length);
HXDLIN(  23)														{
HXLINE(  23)															int _g114 = 0;
HXDLIN(  23)															int _g115 = v13->length;
HXDLIN(  23)															while((_g114 < _g115)){
HXLINE(  23)																_g114 = (_g114 + 1);
HXDLIN(  23)																int i37 = (_g114 - 1);
HXDLIN(  23)																v13->data->__unsafe_set(i37,0);
            															}
            														}
            													}
HXDLIN(  23)													undoImage13 = v13;
            												}
            												break;
            												case (int)4: {
HXLINE(  23)													 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  23)													 ::iterMagic::StackIntImg b35 = sInt5;
HXDLIN(  23)													{
HXLINE(  23)														b35->width = width5;
HXDLIN(  23)														b35->height = height5;
HXDLIN(  23)														b35->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  23)														b35->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  23)														{
HXLINE(  23)															int len11 = b35->length;
HXDLIN(  23)															 ::haxe::ds::GenericStack_Int d5 = b35->data;
HXDLIN(  23)															if (::hx::IsNull( d5->head )) {
HXLINE(  23)																int _g116 = 0;
HXDLIN(  23)																int _g117 = len11;
HXDLIN(  23)																while((_g116 < _g117)){
HXLINE(  23)																	_g116 = (_g116 + 1);
HXDLIN(  23)																	int i38 = (_g116 - 1);
HXDLIN(  23)																	d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            																}
            															}
            															else {
HXLINE(  23)																int _g118 = 0;
HXDLIN(  23)																int _g119 = len11;
HXDLIN(  23)																while((_g118 < _g119)){
HXLINE(  23)																	_g118 = (_g118 + 1);
HXDLIN(  23)																	int i39 = (_g118 - 1);
HXDLIN(  23)																	{
HXLINE(  23)																		 ::haxe::ds::GenericCell_Int l5 = b35->data->head;
HXDLIN(  23)																		 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN(  23)																		{
HXLINE(  23)																			int _g120 = 0;
HXDLIN(  23)																			int _g121 = i39;
HXDLIN(  23)																			while((_g120 < _g121)){
HXLINE(  23)																				_g120 = (_g120 + 1);
HXDLIN(  23)																				int i40 = (_g120 - 1);
HXLINE( 345)																				prev5 = l5;
HXLINE( 346)																				l5 = l5->next;
            																			}
            																		}
HXLINE(  23)																		if (::hx::IsNull( prev5 )) {
HXLINE(  23)																			b35->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  23)																			l5 = null();
            																		}
            																		else {
HXLINE(  23)																			prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  23)																			l5 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  23)													undoImage13 = b35;
            												}
            												break;
            											}
HXDLIN(  23)											this142->image = undoImage13;
HXDLIN(  23)											this142->width = width5;
HXDLIN(  23)											this142->height = height5;
HXDLIN(  23)											this142->imageType = ( (int)(imageType5) );
HXDLIN(  23)											undoImage12 = this142;
HXDLIN(  23)											{
HXLINE(  23)												int rectLeft4 = xIter34->start;
HXDLIN(  23)												int rectTop4 = yIter34->start;
HXDLIN(  23)												int rectRight4 = xIter34->max;
HXDLIN(  23)												bool forceClear4 = false;
HXDLIN(  23)												{
HXLINE(  23)													int _g122 = rectTop4;
HXDLIN(  23)													int _g123 = yIter34->max;
HXDLIN(  23)													while((_g122 < _g123)){
HXLINE(  23)														_g122 = (_g122 + 1);
HXDLIN(  23)														int dy4 = (_g122 - 1);
HXDLIN(  23)														{
HXLINE(  23)															int _g124 = rectLeft4;
HXDLIN(  23)															int _g125 = rectRight4;
HXDLIN(  23)															while((_g124 < _g125)){
HXLINE(  23)																_g124 = (_g124 + 1);
HXDLIN(  23)																int dx4 = (_g124 - 1);
HXDLIN(  23)																::Dynamic this144 = this141->image;
HXDLIN(  23)																int index20;
HXDLIN(  23)																if (this141->useVirtualPos) {
HXLINE(  23)																	index20 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this141->virtualY) * ( (Float)(this141->width) )) + dx4) - this141->virtualX));
            																}
            																else {
HXLINE(  23)																	index20 = ::Std_obj::_hx_int(( (Float)(((dy4 * this141->width) + dx4)) ));
            																}
HXDLIN(  23)																int c16 = ::iterMagic::Iimg_obj::get(this144,index20);
HXDLIN(  23)																int col4;
HXDLIN(  23)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																	col4 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            																}
            																else {
HXLINE(  23)																	col4 = c16;
            																}
HXDLIN(  23)																bool _hx_tmp34;
HXDLIN(  23)																if (this141->useMask) {
HXLINE(  23)																	_hx_tmp34 = ::hx::IsNotNull( this141->mask );
            																}
            																else {
HXLINE(  23)																	_hx_tmp34 = false;
            																}
HXDLIN(  23)																if (_hx_tmp34) {
HXLINE(  23)																	 ::pi_xy::ImageStruct this145 = this141->mask;
HXDLIN(  23)																	::Dynamic this146 = this145->image;
HXDLIN(  23)																	int index21;
HXDLIN(  23)																	if (this145->useVirtualPos) {
HXLINE(  23)																		index21 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this145->virtualY) * ( (Float)(this145->width) )) + dx4) - this145->virtualX));
            																	}
            																	else {
HXLINE(  23)																		index21 = ::Std_obj::_hx_int(( (Float)(((dy4 * this145->width) + dx4)) ));
            																	}
HXDLIN(  23)																	int c17 = ::iterMagic::Iimg_obj::get(this146,index21);
HXDLIN(  23)																	int v14;
HXDLIN(  23)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																		v14 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            																	}
            																	else {
HXLINE(  23)																		v14 = c17;
            																	}
HXDLIN(  23)																	int maskPixel4 = v14;
HXDLIN(  23)																	int this147 = col4;
HXDLIN(  23)																	if ((maskPixel4 == 0)) {
HXLINE(  23)																		col4 = this147;
            																	}
            																	else {
HXLINE(  23)																		Float m04;
HXDLIN(  23)																		int this148 = ((maskPixel4 >> 24) & 255);
HXDLIN(  23)																		if ((this148 == 0)) {
HXLINE(  23)																			m04 = ((Float)0.);
            																		}
            																		else {
HXLINE(  23)																			m04 = (( (Float)(this148) ) / ( (Float)(255) ));
            																		}
HXDLIN(  23)																		Float m14;
HXDLIN(  23)																		int this149 = ((maskPixel4 >> 16) & 255);
HXDLIN(  23)																		if ((this149 == 0)) {
HXLINE(  23)																			m14 = ((Float)0.);
            																		}
            																		else {
HXLINE(  23)																			m14 = (( (Float)(this149) ) / ( (Float)(255) ));
            																		}
HXDLIN(  23)																		Float m24;
HXDLIN(  23)																		int this150 = ((maskPixel4 >> 8) & 255);
HXDLIN(  23)																		if ((this150 == 0)) {
HXLINE(  23)																			m24 = ((Float)0.);
            																		}
            																		else {
HXLINE(  23)																			m24 = (( (Float)(this150) ) / ( (Float)(255) ));
            																		}
HXDLIN(  23)																		Float m34;
HXDLIN(  23)																		int this151 = (maskPixel4 & 255);
HXDLIN(  23)																		if ((this151 == 0)) {
HXLINE(  23)																			m34 = ((Float)0.);
            																		}
            																		else {
HXLINE(  23)																			m34 = (( (Float)(this151) ) / ( (Float)(255) ));
            																		}
HXDLIN(  23)																		int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this147 >> 24) & 255)) )));
HXDLIN(  23)																		int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this147 >> 16) & 255)) )));
HXDLIN(  23)																		int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this147 >> 8) & 255)) )));
HXDLIN(  23)																		int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this147 & 255)) )));
HXDLIN(  23)																		col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  23)																if ((col4 != 0)) {
HXLINE(  23)																	int x18 = (dx4 - rectLeft4);
HXDLIN(  23)																	int y18 = (dy4 - rectTop4);
HXDLIN(  23)																	int c18 = col4;
HXDLIN(  23)																	bool _hx_tmp35;
HXDLIN(  23)																	if ((((c18 >> 24) & 255) < 254)) {
HXLINE(  23)																		_hx_tmp35 = undoImage12->transparent;
            																	}
            																	else {
HXLINE(  23)																		_hx_tmp35 = false;
            																	}
HXDLIN(  23)																	if (_hx_tmp35) {
HXLINE(  23)																		int location8;
HXDLIN(  23)																		if (undoImage12->useVirtualPos) {
HXLINE(  23)																			location8 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x18) - undoImage12->virtualX));
            																		}
            																		else {
HXLINE(  23)																			location8 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage12->width) + x18)) ));
            																		}
HXDLIN(  23)																		int this152 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN(  23)																		int this153;
HXDLIN(  23)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																			this153 = ((((((this152 >> 24) & 255) << 24) | ((this152 & 255) << 16)) | (((this152 >> 8) & 255) << 8)) | ((this152 >> 16) & 255));
            																		}
            																		else {
HXLINE(  23)																			this153 = this152;
            																		}
HXDLIN(  23)																		Float a111;
HXDLIN(  23)																		int this154 = ((this153 >> 24) & 255);
HXDLIN(  23)																		if ((this154 == 0)) {
HXLINE(  23)																			a111 = ((Float)0.);
            																		}
            																		else {
HXLINE(  23)																			a111 = (( (Float)(this154) ) / ( (Float)(255) ));
            																		}
HXDLIN(  23)																		Float r18;
HXDLIN(  23)																		int this155 = ((this153 >> 16) & 255);
HXDLIN(  23)																		if ((this155 == 0)) {
HXLINE(  23)																			r18 = ((Float)0.);
            																		}
            																		else {
HXLINE(  23)																			r18 = (( (Float)(this155) ) / ( (Float)(255) ));
            																		}
HXDLIN(  23)																		Float g18;
HXDLIN(  23)																		int this156 = ((this153 >> 8) & 255);
HXDLIN(  23)																		if ((this156 == 0)) {
HXLINE(  23)																			g18 = ((Float)0.);
            																		}
            																		else {
HXLINE(  23)																			g18 = (( (Float)(this156) ) / ( (Float)(255) ));
            																		}
HXDLIN(  23)																		Float b114;
HXDLIN(  23)																		int this157 = (this153 & 255);
HXDLIN(  23)																		if ((this157 == 0)) {
HXLINE(  23)																			b114 = ((Float)0.);
            																		}
            																		else {
HXLINE(  23)																			b114 = (( (Float)(this157) ) / ( (Float)(255) ));
            																		}
HXDLIN(  23)																		Float a210;
HXDLIN(  23)																		int this158 = ((col4 >> 24) & 255);
HXDLIN(  23)																		if ((this158 == 0)) {
HXLINE(  23)																			a210 = ((Float)0.);
            																		}
            																		else {
HXLINE(  23)																			a210 = (( (Float)(this158) ) / ( (Float)(255) ));
            																		}
HXDLIN(  23)																		Float r28;
HXDLIN(  23)																		int this159 = ((col4 >> 16) & 255);
HXDLIN(  23)																		if ((this159 == 0)) {
HXLINE(  23)																			r28 = ((Float)0.);
            																		}
            																		else {
HXLINE(  23)																			r28 = (( (Float)(this159) ) / ( (Float)(255) ));
            																		}
HXDLIN(  23)																		Float g28;
HXDLIN(  23)																		int this160 = ((col4 >> 8) & 255);
HXDLIN(  23)																		if ((this160 == 0)) {
HXLINE(  23)																			g28 = ((Float)0.);
            																		}
            																		else {
HXLINE(  23)																			g28 = (( (Float)(this160) ) / ( (Float)(255) ));
            																		}
HXDLIN(  23)																		Float b212;
HXDLIN(  23)																		int this161 = (col4 & 255);
HXDLIN(  23)																		if ((this161 == 0)) {
HXLINE(  23)																			b212 = ((Float)0.);
            																		}
            																		else {
HXLINE(  23)																			b212 = (( (Float)(this161) ) / ( (Float)(255) ));
            																		}
HXDLIN(  23)																		Float a38 = (a111 * (( (Float)(1) ) - a210));
HXDLIN(  23)																		int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r28 * a210))));
HXDLIN(  23)																		int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g28 * a210))));
HXDLIN(  23)																		int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a38) + (b212 * a210))));
HXDLIN(  23)																		int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a210)));
HXDLIN(  23)																		int blended8 = ((((a30 << 24) | (r10 << 16)) | (g10 << 8)) | b36);
HXDLIN(  23)																		{
HXLINE(  23)																			int _hx_tmp36;
HXDLIN(  23)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																				_hx_tmp36 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            																			}
            																			else {
HXLINE(  23)																				_hx_tmp36 = blended8;
            																			}
HXDLIN(  23)																			::iterMagic::Iimg_obj::set(undoImage12->image,location8,_hx_tmp36);
            																		}
            																	}
            																	else {
HXLINE(  23)																		::Dynamic this162 = undoImage12->image;
HXDLIN(  23)																		int index22;
HXDLIN(  23)																		if (undoImage12->useVirtualPos) {
HXLINE(  23)																			index22 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x18) - undoImage12->virtualX));
            																		}
            																		else {
HXLINE(  23)																			index22 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage12->width) + x18)) ));
            																		}
HXDLIN(  23)																		int _hx_tmp37;
HXDLIN(  23)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																			_hx_tmp37 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            																		}
            																		else {
HXLINE(  23)																			_hx_tmp37 = c18;
            																		}
HXDLIN(  23)																		::iterMagic::Iimg_obj::set(this162,index22,_hx_tmp37);
            																	}
            																}
            																else {
HXLINE(  23)																	if (forceClear4) {
HXLINE(  23)																		::Dynamic this163 = undoImage12->image;
HXDLIN(  23)																		int x19 = (dx4 - rectLeft4);
HXDLIN(  23)																		int y19 = (dy4 - rectTop4);
HXDLIN(  23)																		int index23;
HXDLIN(  23)																		if (undoImage12->useVirtualPos) {
HXLINE(  23)																			index23 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x19) - undoImage12->virtualX));
            																		}
            																		else {
HXLINE(  23)																			index23 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage12->width) + x19)) ));
            																		}
HXDLIN(  23)																		::iterMagic::Iimg_obj::set(this163,index23,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  23)										bool found4 = false;
HXDLIN(  23)										{
HXLINE(  23)											int _g_min8 = xIter34->start;
HXDLIN(  23)											int _g_max8 = xIter34->max;
HXDLIN(  23)											while((_g_min8 < _g_max8)){
HXLINE(  23)												_g_min8 = (_g_min8 + 1);
HXDLIN(  23)												int px = (_g_min8 - 1);
HXDLIN(  23)												Float pcx = (( (Float)(px) ) - nextX4);
HXLINE( 619)												found4 = false;
HXLINE(  23)												{
HXLINE(  23)													int _g_min9 = yIter34->start;
HXDLIN(  23)													int _g_max9 = yIter34->max;
HXDLIN(  23)													while((_g_min9 < _g_max9)){
HXLINE(  23)														_g_min9 = (_g_min9 + 1);
HXDLIN(  23)														int py = (_g_min9 - 1);
HXDLIN(  23)														Float pcy = (( (Float)(py) ) - nextY4);
HXDLIN(  23)														Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  23)														Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  23)														Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  23)														Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  23)														Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  23)														bool _hx_tmp38;
HXDLIN(  23)														bool _hx_tmp39;
HXDLIN(  23)														if ((ratioA >= 0)) {
HXLINE(  23)															_hx_tmp39 = (ratioB >= 0);
            														}
            														else {
HXLINE(  23)															_hx_tmp39 = false;
            														}
HXDLIN(  23)														if (_hx_tmp39) {
HXLINE(  23)															_hx_tmp38 = (ratioC >= 0);
            														}
            														else {
HXLINE(  23)															_hx_tmp38 = false;
            														}
HXDLIN(  23)														if (_hx_tmp38) {
HXLINE(  23)															int i41 = ::Std_obj::_hx_int((( (Float)(aA) ) * (softC * ratioB)));
HXDLIN(  23)															if ((i41 > 255)) {
HXLINE(  24)																i41 = 255;
            															}
HXLINE(  23)															if ((i41 < 0)) {
HXLINE(  25)																i41 = 0;
            															}
HXLINE(  23)															int a39 = i41;
HXDLIN(  23)															int i42 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN(  23)															if ((i42 > 255)) {
HXLINE(  24)																i42 = 255;
            															}
HXLINE(  23)															if ((i42 < 0)) {
HXLINE(  25)																i42 = 0;
            															}
HXLINE(  23)															int r19 = i42;
HXDLIN(  23)															int i43 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN(  23)															if ((i43 > 255)) {
HXLINE(  24)																i43 = 255;
            															}
HXLINE(  23)															if ((i43 < 0)) {
HXLINE(  25)																i43 = 0;
            															}
HXLINE(  23)															int g19 = i43;
HXDLIN(  23)															int i44 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN(  23)															if ((i44 > 255)) {
HXLINE(  24)																i44 = 255;
            															}
HXLINE(  23)															if ((i44 < 0)) {
HXLINE(  25)																i44 = 0;
            															}
HXLINE(  23)															int b37 = i44;
HXDLIN(  23)															{
HXLINE(  23)																int location9;
HXDLIN(  23)																if (this141->useVirtualPos) {
HXLINE(  23)																	location9 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this141->virtualY) * ( (Float)(this141->width) )) + px) - this141->virtualX));
            																}
            																else {
HXLINE(  23)																	location9 = ::Std_obj::_hx_int(( (Float)(((py * this141->width) + px)) ));
            																}
HXDLIN(  23)																bool _hx_tmp40;
HXDLIN(  23)																if (this141->transparent) {
HXLINE(  23)																	_hx_tmp40 = (a39 < 254);
            																}
            																else {
HXLINE(  23)																	_hx_tmp40 = false;
            																}
HXDLIN(  23)																if (_hx_tmp40) {
HXLINE(  23)																	int this164 = ::iterMagic::Iimg_obj::get(this141->image,location9);
HXDLIN(  23)																	int old;
HXDLIN(  23)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																		old = ((((((this164 >> 24) & 255) << 24) | ((this164 & 255) << 16)) | (((this164 >> 8) & 255) << 8)) | ((this164 >> 16) & 255));
            																	}
            																	else {
HXLINE(  23)																		old = this164;
            																	}
HXDLIN(  23)																	int rhs = ((((a39 << 24) | (r19 << 16)) | (g19 << 8)) | b37);
HXDLIN(  23)																	Float a112;
HXDLIN(  23)																	int this165 = ((old >> 24) & 255);
HXDLIN(  23)																	if ((this165 == 0)) {
HXLINE(  23)																		a112 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		a112 = (( (Float)(this165) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float r110;
HXDLIN(  23)																	int this166 = ((old >> 16) & 255);
HXDLIN(  23)																	if ((this166 == 0)) {
HXLINE(  23)																		r110 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		r110 = (( (Float)(this166) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float g110;
HXDLIN(  23)																	int this167 = ((old >> 8) & 255);
HXDLIN(  23)																	if ((this167 == 0)) {
HXLINE(  23)																		g110 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		g110 = (( (Float)(this167) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float b115;
HXDLIN(  23)																	int this168 = (old & 255);
HXDLIN(  23)																	if ((this168 == 0)) {
HXLINE(  23)																		b115 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		b115 = (( (Float)(this168) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float a211;
HXDLIN(  23)																	int this169 = ((rhs >> 24) & 255);
HXDLIN(  23)																	if ((this169 == 0)) {
HXLINE(  23)																		a211 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		a211 = (( (Float)(this169) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float r29;
HXDLIN(  23)																	int this170 = ((rhs >> 16) & 255);
HXDLIN(  23)																	if ((this170 == 0)) {
HXLINE(  23)																		r29 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		r29 = (( (Float)(this170) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float g29;
HXDLIN(  23)																	int this171 = ((rhs >> 8) & 255);
HXDLIN(  23)																	if ((this171 == 0)) {
HXLINE(  23)																		g29 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		g29 = (( (Float)(this171) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float b213;
HXDLIN(  23)																	int this172 = (rhs & 255);
HXDLIN(  23)																	if ((this172 == 0)) {
HXLINE(  23)																		b213 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		b213 = (( (Float)(this172) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float a310 = (a112 * (( (Float)(1) ) - a211));
HXDLIN(  23)																	int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r29 * a211))));
HXDLIN(  23)																	int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g29 * a211))));
HXDLIN(  23)																	int b38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a310) + (b213 * a211))));
HXDLIN(  23)																	int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN(  23)																	int blended9 = ((((a40 << 24) | (r20 << 16)) | (g20 << 8)) | b38);
HXDLIN(  23)																	{
HXLINE(  23)																		int _hx_tmp41;
HXDLIN(  23)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																			_hx_tmp41 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            																		}
            																		else {
HXLINE(  23)																			_hx_tmp41 = blended9;
            																		}
HXDLIN(  23)																		::iterMagic::Iimg_obj::set(this141->image,location9,_hx_tmp41);
            																	}
            																}
            																else {
HXLINE(  23)																	int value;
HXDLIN(  23)																	if (this141->isLittle) {
HXLINE(  23)																		value = ((((a39 << 24) | (b37 << 16)) | (g19 << 8)) | r19);
            																	}
            																	else {
HXLINE(  23)																		value = ((((a39 << 24) | (r19 << 16)) | (g19 << 8)) | b37);
            																	}
HXDLIN(  23)																	::iterMagic::Iimg_obj::set(this141->image,location9,value);
            																}
            															}
HXLINE( 633)															found4 = true;
            														}
            														else {
HXLINE(  23)															if (found4) {
HXLINE(  23)																goto _hx_goto_73;
            															}
            														}
            													}
            													_hx_goto_73:;
            												}
            											}
            										}
HXDLIN(  23)										if ((hasHit4 == false)) {
HXLINE(  23)											 ::pi_xy::algo::HitTri v15 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,lastX2,lastY2,nextX4,nextY4,true);
HXDLIN(  23)											if (hasUndo4) {
HXLINE(  23)												v15->undoImage = undoImage12;
HXDLIN(  23)												v15->undoX = xIter34->start;
HXDLIN(  23)												v15->undoY = yIter34->start;
            											}
            										}
            									}
HXLINE( 110)									lastX2 = nextX4;
HXLINE( 111)									lastY2 = nextY4;
            								}
            							}
            						}
            						else {
HXLINE(  23)							int _g126 = 0;
HXDLIN(  23)							int _g127 = (sides5 + 1);
HXDLIN(  23)							while((_g126 < _g127)){
HXLINE(  23)								_g126 = (_g126 + 1);
HXDLIN(  23)								int i45 = (_g126 - 1);
HXDLIN(  23)								Float nextX5 = (cx + (rW * ::Math_obj::cos((((( (Float)(i45) ) * theta2) + omega2) + ((Float)0.01)))));
HXDLIN(  23)								Float nextY5 = (cy + (rH * ::Math_obj::sin((((( (Float)(i45) ) * theta2) + omega2) + ((Float)0.01)))));
HXDLIN(  23)								{
HXLINE(  23)									bool hasHit5 = false;
HXDLIN(  23)									bool hasUndo5 = false;
HXDLIN(  23)									int aA1 = ((color2 >> 24) & 255);
HXDLIN(  23)									int rA1 = ((color2 >> 16) & 255);
HXDLIN(  23)									int gA1 = ((color2 >> 8) & 255);
HXDLIN(  23)									int bA1 = (color2 & 255);
HXDLIN(  23)									Float bcx1 = (lastX2 - nextX5);
HXDLIN(  23)									Float bcy1 = (lastY2 - nextY5);
HXDLIN(  23)									Float acx1 = (cx - nextX5);
HXDLIN(  23)									Float acy1 = (cy - nextY5);
HXDLIN(  23)									Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  23)									Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  23)									Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  23)									Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  23)									 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN(  23)									if ((cx > lastX2)) {
HXLINE(  23)										if ((cx > nextX5)) {
HXLINE(  23)											int min20;
HXDLIN(  23)											if ((lastX2 > nextX5)) {
HXLINE(  23)												min20 = ::Math_obj::floor(nextX5);
            											}
            											else {
HXLINE(  23)												min20 = ::Math_obj::floor(lastX2);
            											}
HXDLIN(  23)											int ii_min40 = min20;
HXDLIN(  23)											int ii_max40 = ::Math_obj::ceil(cx);
HXDLIN(  23)											xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            										}
            										else {
HXLINE(  23)											int ii_min41 = ::Math_obj::floor(lastX2);
HXDLIN(  23)											int ii_max41 = ::Math_obj::ceil(nextX5);
HXDLIN(  23)											xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            										}
            									}
            									else {
HXLINE(  23)										if ((lastX2 > nextX5)) {
HXLINE(  23)											int min21;
HXDLIN(  23)											if ((cx > nextX5)) {
HXLINE(  23)												min21 = ::Math_obj::floor(nextX5);
            											}
            											else {
HXLINE(  23)												min21 = ::Math_obj::ceil(cx);
            											}
HXDLIN(  23)											int ii_min42 = min21;
HXDLIN(  23)											int ii_max42 = ::Math_obj::ceil(lastX2);
HXDLIN(  23)											xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            										}
            										else {
HXLINE(  23)											int ii_min43 = ::Math_obj::floor(cx);
HXDLIN(  23)											int ii_max43 = ::Math_obj::ceil(nextX5);
HXDLIN(  23)											xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            										}
            									}
HXDLIN(  23)									 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN(  23)									if ((cy > lastY2)) {
HXLINE(  23)										if ((cy > nextY5)) {
HXLINE(  23)											int min22;
HXDLIN(  23)											if ((lastY2 > nextY5)) {
HXLINE(  23)												min22 = ::Math_obj::floor(nextY5);
            											}
            											else {
HXLINE(  23)												min22 = ::Math_obj::floor(lastY2);
            											}
HXDLIN(  23)											int ii_min44 = min22;
HXDLIN(  23)											int ii_max44 = ::Math_obj::ceil(cy);
HXDLIN(  23)											yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            										}
            										else {
HXLINE(  23)											int ii_min45 = ::Math_obj::floor(lastY2);
HXDLIN(  23)											int ii_max45 = ::Math_obj::ceil(nextY5);
HXDLIN(  23)											yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            										}
            									}
            									else {
HXLINE(  23)										if ((lastY2 > nextY5)) {
HXLINE(  23)											int min23;
HXDLIN(  23)											if ((cy > nextY5)) {
HXLINE(  23)												min23 = ::Math_obj::floor(nextY5);
            											}
            											else {
HXLINE(  23)												min23 = ::Math_obj::ceil(cy);
            											}
HXDLIN(  23)											int ii_min46 = min23;
HXDLIN(  23)											int ii_max46 = ::Math_obj::ceil(lastY2);
HXDLIN(  23)											yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            										}
            										else {
HXLINE(  23)											int ii_min47 = ::Math_obj::floor(cy);
HXDLIN(  23)											int ii_max47 = ::Math_obj::ceil(nextY5);
HXDLIN(  23)											yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            										}
            									}
HXDLIN(  23)									 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN(  23)									if (hasUndo5) {
HXLINE(  23)										int width6 = ((xIter35->max - xIter35->start) + 1);
HXDLIN(  23)										int height6 = ((yIter35->max - yIter35->start) + 1);
HXDLIN(  23)										 ::Dynamic imageType6 = null();
HXDLIN(  23)										 ::pi_xy::ImageStruct this173 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  23)										if (::hx::IsNull( imageType6 )) {
HXLINE(  54)											imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  23)										::Dynamic undoImage16;
HXDLIN(  23)										switch((int)(( (int)(imageType6) ))){
            											case (int)0: {
HXLINE(  23)												 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  23)												 ::iterMagic::BytesImg b39 = byt6;
HXDLIN(  23)												{
HXLINE(  23)													b39->width = width6;
HXDLIN(  23)													b39->height = height6;
HXDLIN(  23)													b39->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  23)													b39->data = ::haxe::io::Bytes_obj::alloc((b39->length * 4));
HXDLIN(  23)													{
HXLINE(  23)														int len12 = b39->length;
HXDLIN(  23)														int w6 = 0;
HXDLIN(  23)														{
HXLINE(  23)															int _g128 = 0;
HXDLIN(  23)															int _g129 = b39->height;
HXDLIN(  23)															while((_g128 < _g129)){
HXLINE(  23)																_g128 = (_g128 + 1);
HXDLIN(  23)																int y20 = (_g128 - 1);
HXDLIN(  23)																{
HXLINE(  23)																	int _g130 = 0;
HXDLIN(  23)																	int _g131 = b39->width;
HXDLIN(  23)																	while((_g130 < _g131)){
HXLINE(  23)																		_g130 = (_g130 + 1);
HXDLIN(  23)																		int x20 = (_g130 - 1);
HXDLIN(  23)																		{
HXLINE(  23)																			w6 = (w6 + 1);
HXDLIN(  23)																			b39->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  23)																		{
HXLINE(  23)																			w6 = (w6 + 1);
HXDLIN(  23)																			b39->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  23)																		{
HXLINE(  23)																			w6 = (w6 + 1);
HXDLIN(  23)																			b39->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  23)																		{
HXLINE(  23)																			w6 = (w6 + 1);
HXDLIN(  23)																			b39->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  23)												undoImage16 = b39;
            											}
            											break;
            											case (int)1: {
HXLINE(  23)												 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  23)												 ::iterMagic::ArrIntImg a41 = arrI6;
HXDLIN(  23)												{
HXLINE(  23)													a41->width = width6;
HXDLIN(  23)													a41->height = height6;
HXDLIN(  23)													a41->data = ::Array_obj< int >::__new(0);
HXDLIN(  23)													a41->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  23)													{
HXLINE(  23)														int _g132 = 0;
HXDLIN(  23)														int _g133 = a41->length;
HXDLIN(  23)														while((_g132 < _g133)){
HXLINE(  23)															_g132 = (_g132 + 1);
HXDLIN(  23)															int i46 = (_g132 - 1);
HXDLIN(  23)															a41->data[i46] = 0;
            														}
            													}
            												}
HXDLIN(  23)												undoImage16 = a41;
            											}
            											break;
            											case (int)2: {
HXLINE(  23)												 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  23)												 ::iterMagic::U32ArrImg b40 = u32a6;
HXDLIN(  23)												{
HXLINE(  23)													b40->width = width6;
HXDLIN(  23)													b40->height = height6;
HXDLIN(  23)													b40->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  23)													int size6 = (b40->length * 4);
HXDLIN(  23)													b40->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN(  23)													{
HXLINE(  23)														int _g134 = 0;
HXDLIN(  23)														int _g135 = b40->length;
HXDLIN(  23)														while((_g134 < _g135)){
HXLINE(  23)															_g134 = (_g134 + 1);
HXDLIN(  23)															int i47 = (_g134 - 1);
HXDLIN(  23)															{
HXLINE(  23)																 ::haxe::io::ArrayBufferViewImpl this174 = b40->data;
HXDLIN(  23)																bool undoImage17;
HXDLIN(  23)																if ((i47 >= 0)) {
HXLINE(  23)																	undoImage17 = (i47 < (this174->byteLength >> 2));
            																}
            																else {
HXLINE(  23)																	undoImage17 = false;
            																}
HXDLIN(  23)																if (undoImage17) {
HXLINE(  23)																	 ::haxe::io::Bytes _this6 = this174->bytes;
HXDLIN(  23)																	int pos6 = ((i47 << 2) + this174->byteOffset);
HXDLIN(  23)																	_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN(  23)																	_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN(  23)																	_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN(  23)																	_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  23)												undoImage16 = b40;
            											}
            											break;
            											case (int)3: {
HXLINE(  23)												 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  23)												 ::iterMagic::VecIntImg v16 = vec6;
HXDLIN(  23)												{
HXLINE(  23)													v16->width = width6;
HXDLIN(  23)													v16->height = height6;
HXDLIN(  23)													v16->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  23)													v16->data = ::Array_obj< int >::__new(v16->length);
HXDLIN(  23)													{
HXLINE(  23)														int _g136 = 0;
HXDLIN(  23)														int _g137 = v16->length;
HXDLIN(  23)														while((_g136 < _g137)){
HXLINE(  23)															_g136 = (_g136 + 1);
HXDLIN(  23)															int i48 = (_g136 - 1);
HXDLIN(  23)															v16->data->__unsafe_set(i48,0);
            														}
            													}
            												}
HXDLIN(  23)												undoImage16 = v16;
            											}
            											break;
            											case (int)4: {
HXLINE(  23)												 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  23)												 ::iterMagic::StackIntImg b41 = sInt6;
HXDLIN(  23)												{
HXLINE(  23)													b41->width = width6;
HXDLIN(  23)													b41->height = height6;
HXDLIN(  23)													b41->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  23)													b41->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  23)													{
HXLINE(  23)														int len13 = b41->length;
HXDLIN(  23)														 ::haxe::ds::GenericStack_Int d6 = b41->data;
HXDLIN(  23)														if (::hx::IsNull( d6->head )) {
HXLINE(  23)															int _g138 = 0;
HXDLIN(  23)															int _g139 = len13;
HXDLIN(  23)															while((_g138 < _g139)){
HXLINE(  23)																_g138 = (_g138 + 1);
HXDLIN(  23)																int i49 = (_g138 - 1);
HXDLIN(  23)																d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            															}
            														}
            														else {
HXLINE(  23)															int _g140 = 0;
HXDLIN(  23)															int _g141 = len13;
HXDLIN(  23)															while((_g140 < _g141)){
HXLINE(  23)																_g140 = (_g140 + 1);
HXDLIN(  23)																int i50 = (_g140 - 1);
HXDLIN(  23)																{
HXLINE(  23)																	 ::haxe::ds::GenericCell_Int l6 = b41->data->head;
HXDLIN(  23)																	 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN(  23)																	{
HXLINE(  23)																		int _g142 = 0;
HXDLIN(  23)																		int _g143 = i50;
HXDLIN(  23)																		while((_g142 < _g143)){
HXLINE(  23)																			_g142 = (_g142 + 1);
HXDLIN(  23)																			int i51 = (_g142 - 1);
HXLINE( 345)																			prev6 = l6;
HXLINE( 346)																			l6 = l6->next;
            																		}
            																	}
HXLINE(  23)																	if (::hx::IsNull( prev6 )) {
HXLINE(  23)																		b41->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  23)																		l6 = null();
            																	}
            																	else {
HXLINE(  23)																		prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  23)																		l6 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  23)												undoImage16 = b41;
            											}
            											break;
            										}
HXDLIN(  23)										this173->image = undoImage16;
HXDLIN(  23)										this173->width = width6;
HXDLIN(  23)										this173->height = height6;
HXDLIN(  23)										this173->imageType = ( (int)(imageType6) );
HXDLIN(  23)										undoImage15 = this173;
HXDLIN(  23)										{
HXLINE(  23)											int rectLeft5 = xIter35->start;
HXDLIN(  23)											int rectTop5 = yIter35->start;
HXDLIN(  23)											int rectRight5 = xIter35->max;
HXDLIN(  23)											bool forceClear5 = false;
HXDLIN(  23)											{
HXLINE(  23)												int _g144 = rectTop5;
HXDLIN(  23)												int _g145 = yIter35->max;
HXDLIN(  23)												while((_g144 < _g145)){
HXLINE(  23)													_g144 = (_g144 + 1);
HXDLIN(  23)													int dy5 = (_g144 - 1);
HXDLIN(  23)													{
HXLINE(  23)														int _g146 = rectLeft5;
HXDLIN(  23)														int _g147 = rectRight5;
HXDLIN(  23)														while((_g146 < _g147)){
HXLINE(  23)															_g146 = (_g146 + 1);
HXDLIN(  23)															int dx5 = (_g146 - 1);
HXDLIN(  23)															::Dynamic this175 = this141->image;
HXDLIN(  23)															int index24;
HXDLIN(  23)															if (this141->useVirtualPos) {
HXLINE(  23)																index24 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this141->virtualY) * ( (Float)(this141->width) )) + dx5) - this141->virtualX));
            															}
            															else {
HXLINE(  23)																index24 = ::Std_obj::_hx_int(( (Float)(((dy5 * this141->width) + dx5)) ));
            															}
HXDLIN(  23)															int c19 = ::iterMagic::Iimg_obj::get(this175,index24);
HXDLIN(  23)															int col5;
HXDLIN(  23)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																col5 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            															}
            															else {
HXLINE(  23)																col5 = c19;
            															}
HXDLIN(  23)															bool _hx_tmp42;
HXDLIN(  23)															if (this141->useMask) {
HXLINE(  23)																_hx_tmp42 = ::hx::IsNotNull( this141->mask );
            															}
            															else {
HXLINE(  23)																_hx_tmp42 = false;
            															}
HXDLIN(  23)															if (_hx_tmp42) {
HXLINE(  23)																 ::pi_xy::ImageStruct this176 = this141->mask;
HXDLIN(  23)																::Dynamic this177 = this176->image;
HXDLIN(  23)																int index25;
HXDLIN(  23)																if (this176->useVirtualPos) {
HXLINE(  23)																	index25 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this176->virtualY) * ( (Float)(this176->width) )) + dx5) - this176->virtualX));
            																}
            																else {
HXLINE(  23)																	index25 = ::Std_obj::_hx_int(( (Float)(((dy5 * this176->width) + dx5)) ));
            																}
HXDLIN(  23)																int c20 = ::iterMagic::Iimg_obj::get(this177,index25);
HXDLIN(  23)																int v17;
HXDLIN(  23)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																	v17 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            																}
            																else {
HXLINE(  23)																	v17 = c20;
            																}
HXDLIN(  23)																int maskPixel5 = v17;
HXDLIN(  23)																int this178 = col5;
HXDLIN(  23)																if ((maskPixel5 == 0)) {
HXLINE(  23)																	col5 = this178;
            																}
            																else {
HXLINE(  23)																	Float m05;
HXDLIN(  23)																	int this179 = ((maskPixel5 >> 24) & 255);
HXDLIN(  23)																	if ((this179 == 0)) {
HXLINE(  23)																		m05 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		m05 = (( (Float)(this179) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float m15;
HXDLIN(  23)																	int this180 = ((maskPixel5 >> 16) & 255);
HXDLIN(  23)																	if ((this180 == 0)) {
HXLINE(  23)																		m15 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		m15 = (( (Float)(this180) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float m25;
HXDLIN(  23)																	int this181 = ((maskPixel5 >> 8) & 255);
HXDLIN(  23)																	if ((this181 == 0)) {
HXLINE(  23)																		m25 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		m25 = (( (Float)(this181) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float m35;
HXDLIN(  23)																	int this182 = (maskPixel5 & 255);
HXDLIN(  23)																	if ((this182 == 0)) {
HXLINE(  23)																		m35 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		m35 = (( (Float)(this182) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this178 >> 24) & 255)) )));
HXDLIN(  23)																	int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this178 >> 16) & 255)) )));
HXDLIN(  23)																	int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this178 >> 8) & 255)) )));
HXDLIN(  23)																	int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this178 & 255)) )));
HXDLIN(  23)																	col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  23)															if ((col5 != 0)) {
HXLINE(  23)																int x21 = (dx5 - rectLeft5);
HXDLIN(  23)																int y21 = (dy5 - rectTop5);
HXDLIN(  23)																int c21 = col5;
HXDLIN(  23)																bool _hx_tmp43;
HXDLIN(  23)																if ((((c21 >> 24) & 255) < 254)) {
HXLINE(  23)																	_hx_tmp43 = undoImage15->transparent;
            																}
            																else {
HXLINE(  23)																	_hx_tmp43 = false;
            																}
HXDLIN(  23)																if (_hx_tmp43) {
HXLINE(  23)																	int location10;
HXDLIN(  23)																	if (undoImage15->useVirtualPos) {
HXLINE(  23)																		location10 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x21) - undoImage15->virtualX));
            																	}
            																	else {
HXLINE(  23)																		location10 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage15->width) + x21)) ));
            																	}
HXDLIN(  23)																	int this183 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN(  23)																	int this184;
HXDLIN(  23)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																		this184 = ((((((this183 >> 24) & 255) << 24) | ((this183 & 255) << 16)) | (((this183 >> 8) & 255) << 8)) | ((this183 >> 16) & 255));
            																	}
            																	else {
HXLINE(  23)																		this184 = this183;
            																	}
HXDLIN(  23)																	Float a113;
HXDLIN(  23)																	int this185 = ((this184 >> 24) & 255);
HXDLIN(  23)																	if ((this185 == 0)) {
HXLINE(  23)																		a113 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		a113 = (( (Float)(this185) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float r111;
HXDLIN(  23)																	int this186 = ((this184 >> 16) & 255);
HXDLIN(  23)																	if ((this186 == 0)) {
HXLINE(  23)																		r111 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		r111 = (( (Float)(this186) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float g111;
HXDLIN(  23)																	int this187 = ((this184 >> 8) & 255);
HXDLIN(  23)																	if ((this187 == 0)) {
HXLINE(  23)																		g111 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		g111 = (( (Float)(this187) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float b116;
HXDLIN(  23)																	int this188 = (this184 & 255);
HXDLIN(  23)																	if ((this188 == 0)) {
HXLINE(  23)																		b116 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		b116 = (( (Float)(this188) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float a212;
HXDLIN(  23)																	int this189 = ((col5 >> 24) & 255);
HXDLIN(  23)																	if ((this189 == 0)) {
HXLINE(  23)																		a212 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		a212 = (( (Float)(this189) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float r210;
HXDLIN(  23)																	int this190 = ((col5 >> 16) & 255);
HXDLIN(  23)																	if ((this190 == 0)) {
HXLINE(  23)																		r210 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		r210 = (( (Float)(this190) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float g210;
HXDLIN(  23)																	int this191 = ((col5 >> 8) & 255);
HXDLIN(  23)																	if ((this191 == 0)) {
HXLINE(  23)																		g210 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		g210 = (( (Float)(this191) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float b214;
HXDLIN(  23)																	int this192 = (col5 & 255);
HXDLIN(  23)																	if ((this192 == 0)) {
HXLINE(  23)																		b214 = ((Float)0.);
            																	}
            																	else {
HXLINE(  23)																		b214 = (( (Float)(this192) ) / ( (Float)(255) ));
            																	}
HXDLIN(  23)																	Float a311 = (a113 * (( (Float)(1) ) - a212));
HXDLIN(  23)																	int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a311) + (r210 * a212))));
HXDLIN(  23)																	int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a311) + (g210 * a212))));
HXDLIN(  23)																	int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a311) + (b214 * a212))));
HXDLIN(  23)																	int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN(  23)																	int blended10 = ((((a42 << 24) | (r30 << 16)) | (g30 << 8)) | b42);
HXDLIN(  23)																	{
HXLINE(  23)																		int _hx_tmp44;
HXDLIN(  23)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																			_hx_tmp44 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            																		}
            																		else {
HXLINE(  23)																			_hx_tmp44 = blended10;
            																		}
HXDLIN(  23)																		::iterMagic::Iimg_obj::set(undoImage15->image,location10,_hx_tmp44);
            																	}
            																}
            																else {
HXLINE(  23)																	::Dynamic this193 = undoImage15->image;
HXDLIN(  23)																	int index26;
HXDLIN(  23)																	if (undoImage15->useVirtualPos) {
HXLINE(  23)																		index26 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x21) - undoImage15->virtualX));
            																	}
            																	else {
HXLINE(  23)																		index26 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage15->width) + x21)) ));
            																	}
HXDLIN(  23)																	int _hx_tmp45;
HXDLIN(  23)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																		_hx_tmp45 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            																	}
            																	else {
HXLINE(  23)																		_hx_tmp45 = c21;
            																	}
HXDLIN(  23)																	::iterMagic::Iimg_obj::set(this193,index26,_hx_tmp45);
            																}
            															}
            															else {
HXLINE(  23)																if (forceClear5) {
HXLINE(  23)																	::Dynamic this194 = undoImage15->image;
HXDLIN(  23)																	int x22 = (dx5 - rectLeft5);
HXDLIN(  23)																	int y22 = (dy5 - rectTop5);
HXDLIN(  23)																	int index27;
HXDLIN(  23)																	if (undoImage15->useVirtualPos) {
HXLINE(  23)																		index27 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x22) - undoImage15->virtualX));
            																	}
            																	else {
HXLINE(  23)																		index27 = ::Std_obj::_hx_int(( (Float)(((y22 * undoImage15->width) + x22)) ));
            																	}
HXDLIN(  23)																	::iterMagic::Iimg_obj::set(this194,index27,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  23)									bool found5 = false;
HXDLIN(  23)									{
HXLINE(  23)										int _g_min10 = xIter35->start;
HXDLIN(  23)										int _g_max10 = xIter35->max;
HXDLIN(  23)										while((_g_min10 < _g_max10)){
HXLINE(  23)											_g_min10 = (_g_min10 + 1);
HXDLIN(  23)											int px1 = (_g_min10 - 1);
HXDLIN(  23)											Float pcx1 = (( (Float)(px1) ) - nextX5);
HXLINE( 619)											found5 = false;
HXLINE(  23)											{
HXLINE(  23)												int _g_min11 = yIter35->start;
HXDLIN(  23)												int _g_max11 = yIter35->max;
HXDLIN(  23)												while((_g_min11 < _g_max11)){
HXLINE(  23)													_g_min11 = (_g_min11 + 1);
HXDLIN(  23)													int py1 = (_g_min11 - 1);
HXDLIN(  23)													Float pcy1 = (( (Float)(py1) ) - nextY5);
HXDLIN(  23)													Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN(  23)													Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN(  23)													Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN(  23)													Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN(  23)													Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  23)													bool _hx_tmp46;
HXDLIN(  23)													bool _hx_tmp47;
HXDLIN(  23)													if ((ratioA1 >= 0)) {
HXLINE(  23)														_hx_tmp47 = (ratioB1 >= 0);
            													}
            													else {
HXLINE(  23)														_hx_tmp47 = false;
            													}
HXDLIN(  23)													if (_hx_tmp47) {
HXLINE(  23)														_hx_tmp46 = (ratioC1 >= 0);
            													}
            													else {
HXLINE(  23)														_hx_tmp46 = false;
            													}
HXDLIN(  23)													if (_hx_tmp46) {
HXLINE(  23)														int i52 = ::Std_obj::_hx_int((( (Float)(aA1) ) * (softC * ratioB1)));
HXDLIN(  23)														if ((i52 > 255)) {
HXLINE(  24)															i52 = 255;
            														}
HXLINE(  23)														if ((i52 < 0)) {
HXLINE(  25)															i52 = 0;
            														}
HXLINE(  23)														int a43 = i52;
HXDLIN(  23)														int i53 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN(  23)														if ((i53 > 255)) {
HXLINE(  24)															i53 = 255;
            														}
HXLINE(  23)														if ((i53 < 0)) {
HXLINE(  25)															i53 = 0;
            														}
HXLINE(  23)														int r31 = i53;
HXDLIN(  23)														int i54 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN(  23)														if ((i54 > 255)) {
HXLINE(  24)															i54 = 255;
            														}
HXLINE(  23)														if ((i54 < 0)) {
HXLINE(  25)															i54 = 0;
            														}
HXLINE(  23)														int g31 = i54;
HXDLIN(  23)														int i55 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN(  23)														if ((i55 > 255)) {
HXLINE(  24)															i55 = 255;
            														}
HXLINE(  23)														if ((i55 < 0)) {
HXLINE(  25)															i55 = 0;
            														}
HXLINE(  23)														int b43 = i55;
HXDLIN(  23)														{
HXLINE(  23)															int location11;
HXDLIN(  23)															if (this141->useVirtualPos) {
HXLINE(  23)																location11 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this141->virtualY) * ( (Float)(this141->width) )) + px1) - this141->virtualX));
            															}
            															else {
HXLINE(  23)																location11 = ::Std_obj::_hx_int(( (Float)(((py1 * this141->width) + px1)) ));
            															}
HXDLIN(  23)															bool _hx_tmp48;
HXDLIN(  23)															if (this141->transparent) {
HXLINE(  23)																_hx_tmp48 = (a43 < 254);
            															}
            															else {
HXLINE(  23)																_hx_tmp48 = false;
            															}
HXDLIN(  23)															if (_hx_tmp48) {
HXLINE(  23)																int this195 = ::iterMagic::Iimg_obj::get(this141->image,location11);
HXDLIN(  23)																int old1;
HXDLIN(  23)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																	old1 = ((((((this195 >> 24) & 255) << 24) | ((this195 & 255) << 16)) | (((this195 >> 8) & 255) << 8)) | ((this195 >> 16) & 255));
            																}
            																else {
HXLINE(  23)																	old1 = this195;
            																}
HXDLIN(  23)																int rhs1 = ((((a43 << 24) | (r31 << 16)) | (g31 << 8)) | b43);
HXDLIN(  23)																Float a114;
HXDLIN(  23)																int this196 = ((old1 >> 24) & 255);
HXDLIN(  23)																if ((this196 == 0)) {
HXLINE(  23)																	a114 = ((Float)0.);
            																}
            																else {
HXLINE(  23)																	a114 = (( (Float)(this196) ) / ( (Float)(255) ));
            																}
HXDLIN(  23)																Float r112;
HXDLIN(  23)																int this197 = ((old1 >> 16) & 255);
HXDLIN(  23)																if ((this197 == 0)) {
HXLINE(  23)																	r112 = ((Float)0.);
            																}
            																else {
HXLINE(  23)																	r112 = (( (Float)(this197) ) / ( (Float)(255) ));
            																}
HXDLIN(  23)																Float g112;
HXDLIN(  23)																int this198 = ((old1 >> 8) & 255);
HXDLIN(  23)																if ((this198 == 0)) {
HXLINE(  23)																	g112 = ((Float)0.);
            																}
            																else {
HXLINE(  23)																	g112 = (( (Float)(this198) ) / ( (Float)(255) ));
            																}
HXDLIN(  23)																Float b117;
HXDLIN(  23)																int this199 = (old1 & 255);
HXDLIN(  23)																if ((this199 == 0)) {
HXLINE(  23)																	b117 = ((Float)0.);
            																}
            																else {
HXLINE(  23)																	b117 = (( (Float)(this199) ) / ( (Float)(255) ));
            																}
HXDLIN(  23)																Float a213;
HXDLIN(  23)																int this200 = ((rhs1 >> 24) & 255);
HXDLIN(  23)																if ((this200 == 0)) {
HXLINE(  23)																	a213 = ((Float)0.);
            																}
            																else {
HXLINE(  23)																	a213 = (( (Float)(this200) ) / ( (Float)(255) ));
            																}
HXDLIN(  23)																Float r211;
HXDLIN(  23)																int this201 = ((rhs1 >> 16) & 255);
HXDLIN(  23)																if ((this201 == 0)) {
HXLINE(  23)																	r211 = ((Float)0.);
            																}
            																else {
HXLINE(  23)																	r211 = (( (Float)(this201) ) / ( (Float)(255) ));
            																}
HXDLIN(  23)																Float g211;
HXDLIN(  23)																int this202 = ((rhs1 >> 8) & 255);
HXDLIN(  23)																if ((this202 == 0)) {
HXLINE(  23)																	g211 = ((Float)0.);
            																}
            																else {
HXLINE(  23)																	g211 = (( (Float)(this202) ) / ( (Float)(255) ));
            																}
HXDLIN(  23)																Float b215;
HXDLIN(  23)																int this203 = (rhs1 & 255);
HXDLIN(  23)																if ((this203 == 0)) {
HXLINE(  23)																	b215 = ((Float)0.);
            																}
            																else {
HXLINE(  23)																	b215 = (( (Float)(this203) ) / ( (Float)(255) ));
            																}
HXDLIN(  23)																Float a312 = (a114 * (( (Float)(1) ) - a213));
HXDLIN(  23)																int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a312) + (r211 * a213))));
HXDLIN(  23)																int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a312) + (g211 * a213))));
HXDLIN(  23)																int b44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a312) + (b215 * a213))));
HXDLIN(  23)																int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN(  23)																int blended11 = ((((a44 << 24) | (r32 << 16)) | (g32 << 8)) | b44);
HXDLIN(  23)																{
HXLINE(  23)																	int _hx_tmp49;
HXDLIN(  23)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  23)																		_hx_tmp49 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            																	}
            																	else {
HXLINE(  23)																		_hx_tmp49 = blended11;
            																	}
HXDLIN(  23)																	::iterMagic::Iimg_obj::set(this141->image,location11,_hx_tmp49);
            																}
            															}
            															else {
HXLINE(  23)																int value1;
HXDLIN(  23)																if (this141->isLittle) {
HXLINE(  23)																	value1 = ((((a43 << 24) | (b43 << 16)) | (g31 << 8)) | r31);
            																}
            																else {
HXLINE(  23)																	value1 = ((((a43 << 24) | (r31 << 16)) | (g31 << 8)) | b43);
            																}
HXDLIN(  23)																::iterMagic::Iimg_obj::set(this141->image,location11,value1);
            															}
            														}
HXLINE( 633)														found5 = true;
            													}
            													else {
HXLINE(  23)														if (found5) {
HXLINE(  23)															goto _hx_goto_86;
            														}
            													}
            												}
            												_hx_goto_86:;
            											}
            										}
            									}
HXDLIN(  23)									if ((hasHit5 == false)) {
HXLINE(  23)										 ::pi_xy::algo::HitTri v18 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,lastX2,lastY2,nextX5,nextY5,true);
HXDLIN(  23)										if (hasUndo5) {
HXLINE(  23)											v18->undoImage = undoImage15;
HXDLIN(  23)											v18->undoX = xIter35->start;
HXDLIN(  23)											v18->undoY = yIter35->start;
            										}
            									}
            								}
HXLINE( 119)								lastX2 = nextX5;
HXLINE( 120)								lastY2 = nextY5;
            							}
            						}
            					}
            				}
            			}
HXLINE(  24)			{
HXLINE(  24)				 ::pi_xy::ImageStruct this204 = temp;
HXDLIN(  24)				int color3 = this->fill;
HXDLIN(  24)				Float softC1 = this->edgeSoft;
HXDLIN(  24)				Float rSmall3;
HXDLIN(  24)				if ((innerRw > innerRh)) {
HXLINE(  24)					rSmall3 = innerRh;
            				}
            				else {
HXLINE(  24)					rSmall3 = innerRw;
            				}
HXDLIN(  24)				 ::Dynamic targetE3 = ((Float)1.05);
HXDLIN(  24)				if (::hx::IsNull( targetE3 )) {
HXLINE( 287)					targetE3 = ((Float)1.05);
            				}
HXLINE(  24)				int result3 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE3) ) / rSmall3)))));
HXDLIN(  24)				int noSides3;
HXDLIN(  24)				if ((result3 < 12)) {
HXLINE(  24)					noSides3 = 12;
            				}
            				else {
HXLINE(  24)					if ((result3 > 500)) {
HXLINE(  24)						noSides3 = 500;
            					}
            					else {
HXLINE(  24)						noSides3 = result3;
            					}
            				}
HXDLIN(  24)				{
HXLINE(  24)					 ::Dynamic phi9 = phi;
HXDLIN(  24)					 ::Dynamic sides6 = noSides3;
HXDLIN(  24)					if (::hx::IsNull( sides6 )) {
HXLINE( 293)						sides6 = 36;
            					}
HXLINE(  24)					if (::hx::IsNull( phi9 )) {
HXLINE( 292)						phi9 = ((Float)0.);
            					}
HXLINE(  24)					{
HXLINE(  24)						 ::Dynamic phi10 = phi9;
HXDLIN(  24)						 ::Dynamic sides7 = sides6;
HXDLIN(  24)						if (::hx::IsNull( sides7 )) {
HXLINE( 310)							sides7 = 36;
            						}
HXLINE(  24)						if (::hx::IsNull( phi10 )) {
HXLINE( 309)							phi10 = ((Float)0.);
            						}
HXLINE(  24)						Float theta3 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides7) ));
HXDLIN(  24)						Float omega3;
HXDLIN(  24)						omega3 = ((Float)0.);
HXDLIN(  24)						Float lastX3 = ((Float)0.);
HXDLIN(  24)						Float lastY3 = ((Float)0.);
HXDLIN(  24)						if (::hx::IsNotEq( phi10,0 )) {
HXLINE(  95)							lastX3 = ((((innerRw * ::Math_obj::cos(((( (Float)(sides7) ) * theta3) + omega3))) * ::Math_obj::cos(( (Float)(phi10) ))) - ((innerRh * ::Math_obj::sin(((( (Float)(sides7) ) * theta3) + omega3))) * ::Math_obj::sin(( (Float)(phi10) )))) + innerCx);
HXLINE(  96)							lastY3 = ((((innerRw * ::Math_obj::cos(((( (Float)(sides7) ) * theta3) + omega3))) * ::Math_obj::sin(( (Float)(phi10) ))) + ((innerRh * ::Math_obj::sin(((( (Float)(sides7) ) * theta3) + omega3))) * ::Math_obj::cos(( (Float)(phi10) )))) + innerCy);
            						}
            						else {
HXLINE(  98)							lastX3 = (innerCx + (innerRw * ::Math_obj::cos(((( (Float)(sides7) ) * theta3) + omega3))));
HXLINE(  99)							lastY3 = (innerCy + (innerRh * ::Math_obj::sin(((( (Float)(sides7) ) * theta3) + omega3))));
            						}
HXLINE(  24)						if (::hx::IsNotEq( phi10,0 )) {
HXLINE(  24)							Float cphi3 = ::Math_obj::cos(( (Float)(phi10) ));
HXDLIN(  24)							Float sphi3 = ::Math_obj::sin(( (Float)(phi10) ));
HXDLIN(  24)							{
HXLINE(  24)								int _g148 = 0;
HXDLIN(  24)								int _g149 = (sides7 + 1);
HXDLIN(  24)								while((_g148 < _g149)){
HXLINE(  24)									_g148 = (_g148 + 1);
HXDLIN(  24)									int i56 = (_g148 - 1);
HXDLIN(  24)									Float stheta3 = ::Math_obj::sin((((( (Float)(i56) ) * theta3) + omega3) + ((Float)0.01)));
HXDLIN(  24)									Float ctheta3 = ::Math_obj::cos((((( (Float)(i56) ) * theta3) + omega3) + ((Float)0.01)));
HXDLIN(  24)									Float nextX6 = ((((innerRw * ctheta3) * cphi3) - ((innerRh * stheta3) * sphi3)) + innerCx);
HXDLIN(  24)									Float nextY6 = ((((innerRw * ctheta3) * sphi3) + ((innerRh * stheta3) * cphi3)) + innerCy);
HXDLIN(  24)									{
HXLINE(  24)										bool hasHit6 = false;
HXDLIN(  24)										bool hasUndo6 = false;
HXDLIN(  24)										int aA2 = ((color3 >> 24) & 255);
HXDLIN(  24)										int rA2 = ((color3 >> 16) & 255);
HXDLIN(  24)										int gA2 = ((color3 >> 8) & 255);
HXDLIN(  24)										int bA2 = (color3 & 255);
HXDLIN(  24)										Float bcx2 = (lastX3 - nextX6);
HXDLIN(  24)										Float bcy2 = (lastY3 - nextY6);
HXDLIN(  24)										Float acx2 = (innerCx - nextX6);
HXDLIN(  24)										Float acy2 = (innerCy - nextY6);
HXDLIN(  24)										Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN(  24)										Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN(  24)										Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN(  24)										Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN(  24)										if ((innerCx > lastX3)) {
HXLINE(  24)											if ((innerCx > nextX6)) {
HXLINE(  24)												int min24;
HXDLIN(  24)												if ((lastX3 > nextX6)) {
HXLINE(  24)													min24 = ::Math_obj::floor(nextX6);
            												}
            												else {
HXLINE(  24)													min24 = ::Math_obj::floor(lastX3);
            												}
HXDLIN(  24)												int ii_min48 = min24;
HXDLIN(  24)												int ii_max48 = ::Math_obj::ceil(innerCx);
HXDLIN(  24)												xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            											}
            											else {
HXLINE(  24)												int ii_min49 = ::Math_obj::floor(lastX3);
HXDLIN(  24)												int ii_max49 = ::Math_obj::ceil(nextX6);
HXDLIN(  24)												xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            											}
            										}
            										else {
HXLINE(  24)											if ((lastX3 > nextX6)) {
HXLINE(  24)												int min25;
HXDLIN(  24)												if ((innerCx > nextX6)) {
HXLINE(  24)													min25 = ::Math_obj::floor(nextX6);
            												}
            												else {
HXLINE(  24)													min25 = ::Math_obj::ceil(innerCx);
            												}
HXDLIN(  24)												int ii_min50 = min25;
HXDLIN(  24)												int ii_max50 = ::Math_obj::ceil(lastX3);
HXDLIN(  24)												xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            											}
            											else {
HXLINE(  24)												int ii_min51 = ::Math_obj::floor(innerCx);
HXDLIN(  24)												int ii_max51 = ::Math_obj::ceil(nextX6);
HXDLIN(  24)												xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            											}
            										}
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN(  24)										if ((innerCy > lastY3)) {
HXLINE(  24)											if ((innerCy > nextY6)) {
HXLINE(  24)												int min26;
HXDLIN(  24)												if ((lastY3 > nextY6)) {
HXLINE(  24)													min26 = ::Math_obj::floor(nextY6);
            												}
            												else {
HXLINE(  24)													min26 = ::Math_obj::floor(lastY3);
            												}
HXDLIN(  24)												int ii_min52 = min26;
HXDLIN(  24)												int ii_max52 = ::Math_obj::ceil(innerCy);
HXDLIN(  24)												yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            											}
            											else {
HXLINE(  24)												int ii_min53 = ::Math_obj::floor(lastY3);
HXDLIN(  24)												int ii_max53 = ::Math_obj::ceil(nextY6);
HXDLIN(  24)												yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            											}
            										}
            										else {
HXLINE(  24)											if ((lastY3 > nextY6)) {
HXLINE(  24)												int min27;
HXDLIN(  24)												if ((innerCy > nextY6)) {
HXLINE(  24)													min27 = ::Math_obj::floor(nextY6);
            												}
            												else {
HXLINE(  24)													min27 = ::Math_obj::ceil(innerCy);
            												}
HXDLIN(  24)												int ii_min54 = min27;
HXDLIN(  24)												int ii_max54 = ::Math_obj::ceil(lastY3);
HXDLIN(  24)												yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            											}
            											else {
HXLINE(  24)												int ii_min55 = ::Math_obj::floor(innerCy);
HXDLIN(  24)												int ii_max55 = ::Math_obj::ceil(nextY6);
HXDLIN(  24)												yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            											}
            										}
HXDLIN(  24)										 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN(  24)										if (hasUndo6) {
HXLINE(  24)											int width7 = ((xIter36->max - xIter36->start) + 1);
HXDLIN(  24)											int height7 = ((yIter36->max - yIter36->start) + 1);
HXDLIN(  24)											 ::Dynamic imageType7 = null();
HXDLIN(  24)											 ::pi_xy::ImageStruct this205 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  24)											if (::hx::IsNull( imageType7 )) {
HXLINE(  54)												imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  24)											::Dynamic undoImage19;
HXDLIN(  24)											switch((int)(( (int)(imageType7) ))){
            												case (int)0: {
HXLINE(  24)													 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::BytesImg b45 = byt7;
HXDLIN(  24)													{
HXLINE(  24)														b45->width = width7;
HXDLIN(  24)														b45->height = height7;
HXDLIN(  24)														b45->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  24)														b45->data = ::haxe::io::Bytes_obj::alloc((b45->length * 4));
HXDLIN(  24)														{
HXLINE(  24)															int len14 = b45->length;
HXDLIN(  24)															int w7 = 0;
HXDLIN(  24)															{
HXLINE(  24)																int _g150 = 0;
HXDLIN(  24)																int _g151 = b45->height;
HXDLIN(  24)																while((_g150 < _g151)){
HXLINE(  24)																	_g150 = (_g150 + 1);
HXDLIN(  24)																	int y23 = (_g150 - 1);
HXDLIN(  24)																	{
HXLINE(  24)																		int _g152 = 0;
HXDLIN(  24)																		int _g153 = b45->width;
HXDLIN(  24)																		while((_g152 < _g153)){
HXLINE(  24)																			_g152 = (_g152 + 1);
HXDLIN(  24)																			int x23 = (_g152 - 1);
HXDLIN(  24)																			{
HXLINE(  24)																				w7 = (w7 + 1);
HXDLIN(  24)																				b45->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w7 = (w7 + 1);
HXDLIN(  24)																				b45->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w7 = (w7 + 1);
HXDLIN(  24)																				b45->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w7 = (w7 + 1);
HXDLIN(  24)																				b45->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage19 = b45;
            												}
            												break;
            												case (int)1: {
HXLINE(  24)													 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::ArrIntImg a45 = arrI7;
HXDLIN(  24)													{
HXLINE(  24)														a45->width = width7;
HXDLIN(  24)														a45->height = height7;
HXDLIN(  24)														a45->data = ::Array_obj< int >::__new(0);
HXDLIN(  24)														a45->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  24)														{
HXLINE(  24)															int _g154 = 0;
HXDLIN(  24)															int _g155 = a45->length;
HXDLIN(  24)															while((_g154 < _g155)){
HXLINE(  24)																_g154 = (_g154 + 1);
HXDLIN(  24)																int i57 = (_g154 - 1);
HXDLIN(  24)																a45->data[i57] = 0;
            															}
            														}
            													}
HXDLIN(  24)													undoImage19 = a45;
            												}
            												break;
            												case (int)2: {
HXLINE(  24)													 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::U32ArrImg b46 = u32a7;
HXDLIN(  24)													{
HXLINE(  24)														b46->width = width7;
HXDLIN(  24)														b46->height = height7;
HXDLIN(  24)														b46->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  24)														int size7 = (b46->length * 4);
HXDLIN(  24)														b46->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN(  24)														{
HXLINE(  24)															int _g156 = 0;
HXDLIN(  24)															int _g157 = b46->length;
HXDLIN(  24)															while((_g156 < _g157)){
HXLINE(  24)																_g156 = (_g156 + 1);
HXDLIN(  24)																int i58 = (_g156 - 1);
HXDLIN(  24)																{
HXLINE(  24)																	 ::haxe::io::ArrayBufferViewImpl this206 = b46->data;
HXDLIN(  24)																	bool undoImage20;
HXDLIN(  24)																	if ((i58 >= 0)) {
HXLINE(  24)																		undoImage20 = (i58 < (this206->byteLength >> 2));
            																	}
            																	else {
HXLINE(  24)																		undoImage20 = false;
            																	}
HXDLIN(  24)																	if (undoImage20) {
HXLINE(  24)																		 ::haxe::io::Bytes _this7 = this206->bytes;
HXDLIN(  24)																		int pos7 = ((i58 << 2) + this206->byteOffset);
HXDLIN(  24)																		_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage19 = b46;
            												}
            												break;
            												case (int)3: {
HXLINE(  24)													 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::VecIntImg v19 = vec7;
HXDLIN(  24)													{
HXLINE(  24)														v19->width = width7;
HXDLIN(  24)														v19->height = height7;
HXDLIN(  24)														v19->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  24)														v19->data = ::Array_obj< int >::__new(v19->length);
HXDLIN(  24)														{
HXLINE(  24)															int _g158 = 0;
HXDLIN(  24)															int _g159 = v19->length;
HXDLIN(  24)															while((_g158 < _g159)){
HXLINE(  24)																_g158 = (_g158 + 1);
HXDLIN(  24)																int i59 = (_g158 - 1);
HXDLIN(  24)																v19->data->__unsafe_set(i59,0);
            															}
            														}
            													}
HXDLIN(  24)													undoImage19 = v19;
            												}
            												break;
            												case (int)4: {
HXLINE(  24)													 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::StackIntImg b47 = sInt7;
HXDLIN(  24)													{
HXLINE(  24)														b47->width = width7;
HXDLIN(  24)														b47->height = height7;
HXDLIN(  24)														b47->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  24)														b47->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  24)														{
HXLINE(  24)															int len15 = b47->length;
HXDLIN(  24)															 ::haxe::ds::GenericStack_Int d7 = b47->data;
HXDLIN(  24)															if (::hx::IsNull( d7->head )) {
HXLINE(  24)																int _g160 = 0;
HXDLIN(  24)																int _g161 = len15;
HXDLIN(  24)																while((_g160 < _g161)){
HXLINE(  24)																	_g160 = (_g160 + 1);
HXDLIN(  24)																	int i60 = (_g160 - 1);
HXDLIN(  24)																	d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            																}
            															}
            															else {
HXLINE(  24)																int _g162 = 0;
HXDLIN(  24)																int _g163 = len15;
HXDLIN(  24)																while((_g162 < _g163)){
HXLINE(  24)																	_g162 = (_g162 + 1);
HXDLIN(  24)																	int i61 = (_g162 - 1);
HXDLIN(  24)																	{
HXLINE(  24)																		 ::haxe::ds::GenericCell_Int l7 = b47->data->head;
HXDLIN(  24)																		 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN(  24)																		{
HXLINE(  24)																			int _g164 = 0;
HXDLIN(  24)																			int _g165 = i61;
HXDLIN(  24)																			while((_g164 < _g165)){
HXLINE(  24)																				_g164 = (_g164 + 1);
HXDLIN(  24)																				int i62 = (_g164 - 1);
HXLINE( 345)																				prev7 = l7;
HXLINE( 346)																				l7 = l7->next;
            																			}
            																		}
HXLINE(  24)																		if (::hx::IsNull( prev7 )) {
HXLINE(  24)																			b47->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  24)																			l7 = null();
            																		}
            																		else {
HXLINE(  24)																			prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  24)																			l7 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage19 = b47;
            												}
            												break;
            											}
HXDLIN(  24)											this205->image = undoImage19;
HXDLIN(  24)											this205->width = width7;
HXDLIN(  24)											this205->height = height7;
HXDLIN(  24)											this205->imageType = ( (int)(imageType7) );
HXDLIN(  24)											undoImage18 = this205;
HXDLIN(  24)											{
HXLINE(  24)												int rectLeft6 = xIter36->start;
HXDLIN(  24)												int rectTop6 = yIter36->start;
HXDLIN(  24)												int rectRight6 = xIter36->max;
HXDLIN(  24)												bool forceClear6 = false;
HXDLIN(  24)												{
HXLINE(  24)													int _g166 = rectTop6;
HXDLIN(  24)													int _g167 = yIter36->max;
HXDLIN(  24)													while((_g166 < _g167)){
HXLINE(  24)														_g166 = (_g166 + 1);
HXDLIN(  24)														int dy6 = (_g166 - 1);
HXDLIN(  24)														{
HXLINE(  24)															int _g168 = rectLeft6;
HXDLIN(  24)															int _g169 = rectRight6;
HXDLIN(  24)															while((_g168 < _g169)){
HXLINE(  24)																_g168 = (_g168 + 1);
HXDLIN(  24)																int dx6 = (_g168 - 1);
HXDLIN(  24)																::Dynamic this207 = this204->image;
HXDLIN(  24)																int index28;
HXDLIN(  24)																if (this204->useVirtualPos) {
HXLINE(  24)																	index28 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this204->virtualY) * ( (Float)(this204->width) )) + dx6) - this204->virtualX));
            																}
            																else {
HXLINE(  24)																	index28 = ::Std_obj::_hx_int(( (Float)(((dy6 * this204->width) + dx6)) ));
            																}
HXDLIN(  24)																int c22 = ::iterMagic::Iimg_obj::get(this207,index28);
HXDLIN(  24)																int col6;
HXDLIN(  24)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																	col6 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            																}
            																else {
HXLINE(  24)																	col6 = c22;
            																}
HXDLIN(  24)																bool _hx_tmp50;
HXDLIN(  24)																if (this204->useMask) {
HXLINE(  24)																	_hx_tmp50 = ::hx::IsNotNull( this204->mask );
            																}
            																else {
HXLINE(  24)																	_hx_tmp50 = false;
            																}
HXDLIN(  24)																if (_hx_tmp50) {
HXLINE(  24)																	 ::pi_xy::ImageStruct this208 = this204->mask;
HXDLIN(  24)																	::Dynamic this209 = this208->image;
HXDLIN(  24)																	int index29;
HXDLIN(  24)																	if (this208->useVirtualPos) {
HXLINE(  24)																		index29 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this208->virtualY) * ( (Float)(this208->width) )) + dx6) - this208->virtualX));
            																	}
            																	else {
HXLINE(  24)																		index29 = ::Std_obj::_hx_int(( (Float)(((dy6 * this208->width) + dx6)) ));
            																	}
HXDLIN(  24)																	int c23 = ::iterMagic::Iimg_obj::get(this209,index29);
HXDLIN(  24)																	int v20;
HXDLIN(  24)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																		v20 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            																	}
            																	else {
HXLINE(  24)																		v20 = c23;
            																	}
HXDLIN(  24)																	int maskPixel6 = v20;
HXDLIN(  24)																	int this210 = col6;
HXDLIN(  24)																	if ((maskPixel6 == 0)) {
HXLINE(  24)																		col6 = this210;
            																	}
            																	else {
HXLINE(  24)																		Float m06;
HXDLIN(  24)																		int this211 = ((maskPixel6 >> 24) & 255);
HXDLIN(  24)																		if ((this211 == 0)) {
HXLINE(  24)																			m06 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m06 = (( (Float)(this211) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m16;
HXDLIN(  24)																		int this212 = ((maskPixel6 >> 16) & 255);
HXDLIN(  24)																		if ((this212 == 0)) {
HXLINE(  24)																			m16 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m16 = (( (Float)(this212) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m26;
HXDLIN(  24)																		int this213 = ((maskPixel6 >> 8) & 255);
HXDLIN(  24)																		if ((this213 == 0)) {
HXLINE(  24)																			m26 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m26 = (( (Float)(this213) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m36;
HXDLIN(  24)																		int this214 = (maskPixel6 & 255);
HXDLIN(  24)																		if ((this214 == 0)) {
HXLINE(  24)																			m36 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m36 = (( (Float)(this214) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this210 >> 24) & 255)) )));
HXDLIN(  24)																		int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this210 >> 16) & 255)) )));
HXDLIN(  24)																		int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this210 >> 8) & 255)) )));
HXDLIN(  24)																		int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this210 & 255)) )));
HXDLIN(  24)																		col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  24)																if ((col6 != 0)) {
HXLINE(  24)																	int x24 = (dx6 - rectLeft6);
HXDLIN(  24)																	int y24 = (dy6 - rectTop6);
HXDLIN(  24)																	int c24 = col6;
HXDLIN(  24)																	bool _hx_tmp51;
HXDLIN(  24)																	if ((((c24 >> 24) & 255) < 254)) {
HXLINE(  24)																		_hx_tmp51 = undoImage18->transparent;
            																	}
            																	else {
HXLINE(  24)																		_hx_tmp51 = false;
            																	}
HXDLIN(  24)																	if (_hx_tmp51) {
HXLINE(  24)																		int location12;
HXDLIN(  24)																		if (undoImage18->useVirtualPos) {
HXLINE(  24)																			location12 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x24) - undoImage18->virtualX));
            																		}
            																		else {
HXLINE(  24)																			location12 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage18->width) + x24)) ));
            																		}
HXDLIN(  24)																		int this215 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN(  24)																		int this216;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			this216 = ((((((this215 >> 24) & 255) << 24) | ((this215 & 255) << 16)) | (((this215 >> 8) & 255) << 8)) | ((this215 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			this216 = this215;
            																		}
HXDLIN(  24)																		Float a115;
HXDLIN(  24)																		int this217 = ((this216 >> 24) & 255);
HXDLIN(  24)																		if ((this217 == 0)) {
HXLINE(  24)																			a115 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a115 = (( (Float)(this217) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r113;
HXDLIN(  24)																		int this218 = ((this216 >> 16) & 255);
HXDLIN(  24)																		if ((this218 == 0)) {
HXLINE(  24)																			r113 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r113 = (( (Float)(this218) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g113;
HXDLIN(  24)																		int this219 = ((this216 >> 8) & 255);
HXDLIN(  24)																		if ((this219 == 0)) {
HXLINE(  24)																			g113 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g113 = (( (Float)(this219) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b118;
HXDLIN(  24)																		int this220 = (this216 & 255);
HXDLIN(  24)																		if ((this220 == 0)) {
HXLINE(  24)																			b118 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b118 = (( (Float)(this220) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a214;
HXDLIN(  24)																		int this221 = ((col6 >> 24) & 255);
HXDLIN(  24)																		if ((this221 == 0)) {
HXLINE(  24)																			a214 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a214 = (( (Float)(this221) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r212;
HXDLIN(  24)																		int this222 = ((col6 >> 16) & 255);
HXDLIN(  24)																		if ((this222 == 0)) {
HXLINE(  24)																			r212 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r212 = (( (Float)(this222) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g212;
HXDLIN(  24)																		int this223 = ((col6 >> 8) & 255);
HXDLIN(  24)																		if ((this223 == 0)) {
HXLINE(  24)																			g212 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g212 = (( (Float)(this223) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b216;
HXDLIN(  24)																		int this224 = (col6 & 255);
HXDLIN(  24)																		if ((this224 == 0)) {
HXLINE(  24)																			b216 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b216 = (( (Float)(this224) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a313 = (a115 * (( (Float)(1) ) - a214));
HXDLIN(  24)																		int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a313) + (r212 * a214))));
HXDLIN(  24)																		int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a313) + (g212 * a214))));
HXDLIN(  24)																		int b48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a313) + (b216 * a214))));
HXDLIN(  24)																		int a46 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN(  24)																		int blended12 = ((((a46 << 24) | (r33 << 16)) | (g33 << 8)) | b48);
HXDLIN(  24)																		{
HXLINE(  24)																			int _hx_tmp52;
HXDLIN(  24)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																				_hx_tmp52 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            																			}
            																			else {
HXLINE(  24)																				_hx_tmp52 = blended12;
            																			}
HXDLIN(  24)																			::iterMagic::Iimg_obj::set(undoImage18->image,location12,_hx_tmp52);
            																		}
            																	}
            																	else {
HXLINE(  24)																		::Dynamic this225 = undoImage18->image;
HXDLIN(  24)																		int index30;
HXDLIN(  24)																		if (undoImage18->useVirtualPos) {
HXLINE(  24)																			index30 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x24) - undoImage18->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index30 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage18->width) + x24)) ));
            																		}
HXDLIN(  24)																		int _hx_tmp53;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			_hx_tmp53 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			_hx_tmp53 = c24;
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this225,index30,_hx_tmp53);
            																	}
            																}
            																else {
HXLINE(  24)																	if (forceClear6) {
HXLINE(  24)																		::Dynamic this226 = undoImage18->image;
HXDLIN(  24)																		int x25 = (dx6 - rectLeft6);
HXDLIN(  24)																		int y25 = (dy6 - rectTop6);
HXDLIN(  24)																		int index31;
HXDLIN(  24)																		if (undoImage18->useVirtualPos) {
HXLINE(  24)																			index31 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x25) - undoImage18->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index31 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage18->width) + x25)) ));
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this226,index31,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  24)										bool found6 = false;
HXDLIN(  24)										{
HXLINE(  24)											int _g_min12 = xIter36->start;
HXDLIN(  24)											int _g_max12 = xIter36->max;
HXDLIN(  24)											while((_g_min12 < _g_max12)){
HXLINE(  24)												_g_min12 = (_g_min12 + 1);
HXDLIN(  24)												int px2 = (_g_min12 - 1);
HXDLIN(  24)												Float pcx2 = (( (Float)(px2) ) - nextX6);
HXLINE( 619)												found6 = false;
HXLINE(  24)												{
HXLINE(  24)													int _g_min13 = yIter36->start;
HXDLIN(  24)													int _g_max13 = yIter36->max;
HXDLIN(  24)													while((_g_min13 < _g_max13)){
HXLINE(  24)														_g_min13 = (_g_min13 + 1);
HXDLIN(  24)														int py2 = (_g_min13 - 1);
HXDLIN(  24)														Float pcy2 = (( (Float)(py2) ) - nextY6);
HXDLIN(  24)														Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN(  24)														Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN(  24)														Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN(  24)														Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN(  24)														Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN(  24)														bool _hx_tmp54;
HXDLIN(  24)														bool _hx_tmp55;
HXDLIN(  24)														if ((ratioA2 >= 0)) {
HXLINE(  24)															_hx_tmp55 = (ratioB2 >= 0);
            														}
            														else {
HXLINE(  24)															_hx_tmp55 = false;
            														}
HXDLIN(  24)														if (_hx_tmp55) {
HXLINE(  24)															_hx_tmp54 = (ratioC2 >= 0);
            														}
            														else {
HXLINE(  24)															_hx_tmp54 = false;
            														}
HXDLIN(  24)														if (_hx_tmp54) {
HXLINE(  24)															int i63 = ::Std_obj::_hx_int((( (Float)(aA2) ) * (softC1 * ratioB2)));
HXDLIN(  24)															if ((i63 > 255)) {
HXLINE(  24)																i63 = 255;
            															}
HXDLIN(  24)															if ((i63 < 0)) {
HXLINE(  25)																i63 = 0;
            															}
HXLINE(  24)															int a47 = i63;
HXDLIN(  24)															int i64 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN(  24)															if ((i64 > 255)) {
HXLINE(  24)																i64 = 255;
            															}
HXDLIN(  24)															if ((i64 < 0)) {
HXLINE(  25)																i64 = 0;
            															}
HXLINE(  24)															int r34 = i64;
HXDLIN(  24)															int i65 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN(  24)															if ((i65 > 255)) {
HXLINE(  24)																i65 = 255;
            															}
HXDLIN(  24)															if ((i65 < 0)) {
HXLINE(  25)																i65 = 0;
            															}
HXLINE(  24)															int g34 = i65;
HXDLIN(  24)															int i66 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN(  24)															if ((i66 > 255)) {
HXLINE(  24)																i66 = 255;
            															}
HXDLIN(  24)															if ((i66 < 0)) {
HXLINE(  25)																i66 = 0;
            															}
HXLINE(  24)															int b49 = i66;
HXDLIN(  24)															{
HXLINE(  24)																int location13;
HXDLIN(  24)																if (this204->useVirtualPos) {
HXLINE(  24)																	location13 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this204->virtualY) * ( (Float)(this204->width) )) + px2) - this204->virtualX));
            																}
            																else {
HXLINE(  24)																	location13 = ::Std_obj::_hx_int(( (Float)(((py2 * this204->width) + px2)) ));
            																}
HXDLIN(  24)																bool _hx_tmp56;
HXDLIN(  24)																if (this204->transparent) {
HXLINE(  24)																	_hx_tmp56 = (a47 < 254);
            																}
            																else {
HXLINE(  24)																	_hx_tmp56 = false;
            																}
HXDLIN(  24)																if (_hx_tmp56) {
HXLINE(  24)																	int this227 = ::iterMagic::Iimg_obj::get(this204->image,location13);
HXDLIN(  24)																	int old2;
HXDLIN(  24)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																		old2 = ((((((this227 >> 24) & 255) << 24) | ((this227 & 255) << 16)) | (((this227 >> 8) & 255) << 8)) | ((this227 >> 16) & 255));
            																	}
            																	else {
HXLINE(  24)																		old2 = this227;
            																	}
HXDLIN(  24)																	int rhs2 = ((((a47 << 24) | (r34 << 16)) | (g34 << 8)) | b49);
HXDLIN(  24)																	Float a116;
HXDLIN(  24)																	int this228 = ((old2 >> 24) & 255);
HXDLIN(  24)																	if ((this228 == 0)) {
HXLINE(  24)																		a116 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		a116 = (( (Float)(this228) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float r114;
HXDLIN(  24)																	int this229 = ((old2 >> 16) & 255);
HXDLIN(  24)																	if ((this229 == 0)) {
HXLINE(  24)																		r114 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		r114 = (( (Float)(this229) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float g114;
HXDLIN(  24)																	int this230 = ((old2 >> 8) & 255);
HXDLIN(  24)																	if ((this230 == 0)) {
HXLINE(  24)																		g114 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		g114 = (( (Float)(this230) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float b119;
HXDLIN(  24)																	int this231 = (old2 & 255);
HXDLIN(  24)																	if ((this231 == 0)) {
HXLINE(  24)																		b119 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		b119 = (( (Float)(this231) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float a215;
HXDLIN(  24)																	int this232 = ((rhs2 >> 24) & 255);
HXDLIN(  24)																	if ((this232 == 0)) {
HXLINE(  24)																		a215 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		a215 = (( (Float)(this232) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float r213;
HXDLIN(  24)																	int this233 = ((rhs2 >> 16) & 255);
HXDLIN(  24)																	if ((this233 == 0)) {
HXLINE(  24)																		r213 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		r213 = (( (Float)(this233) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float g213;
HXDLIN(  24)																	int this234 = ((rhs2 >> 8) & 255);
HXDLIN(  24)																	if ((this234 == 0)) {
HXLINE(  24)																		g213 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		g213 = (( (Float)(this234) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float b217;
HXDLIN(  24)																	int this235 = (rhs2 & 255);
HXDLIN(  24)																	if ((this235 == 0)) {
HXLINE(  24)																		b217 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		b217 = (( (Float)(this235) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float a314 = (a116 * (( (Float)(1) ) - a215));
HXDLIN(  24)																	int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a314) + (r213 * a215))));
HXDLIN(  24)																	int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a314) + (g213 * a215))));
HXDLIN(  24)																	int b50 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a314) + (b217 * a215))));
HXDLIN(  24)																	int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN(  24)																	int blended13 = ((((a48 << 24) | (r35 << 16)) | (g35 << 8)) | b50);
HXDLIN(  24)																	{
HXLINE(  24)																		int _hx_tmp57;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			_hx_tmp57 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			_hx_tmp57 = blended13;
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this204->image,location13,_hx_tmp57);
            																	}
            																}
            																else {
HXLINE(  24)																	int value2;
HXDLIN(  24)																	if (this204->isLittle) {
HXLINE(  24)																		value2 = ((((a47 << 24) | (b49 << 16)) | (g34 << 8)) | r34);
            																	}
            																	else {
HXLINE(  24)																		value2 = ((((a47 << 24) | (r34 << 16)) | (g34 << 8)) | b49);
            																	}
HXDLIN(  24)																	::iterMagic::Iimg_obj::set(this204->image,location13,value2);
            																}
            															}
HXLINE( 633)															found6 = true;
            														}
            														else {
HXLINE(  24)															if (found6) {
HXLINE(  24)																goto _hx_goto_99;
            															}
            														}
            													}
            													_hx_goto_99:;
            												}
            											}
            										}
HXDLIN(  24)										if ((hasHit6 == false)) {
HXLINE(  24)											 ::pi_xy::algo::HitTri v21 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,innerCx,innerCy,lastX3,lastY3,nextX6,nextY6,true);
HXDLIN(  24)											if (hasUndo6) {
HXLINE(  24)												v21->undoImage = undoImage18;
HXDLIN(  24)												v21->undoX = xIter36->start;
HXDLIN(  24)												v21->undoY = yIter36->start;
            											}
            										}
            									}
HXLINE( 110)									lastX3 = nextX6;
HXLINE( 111)									lastY3 = nextY6;
            								}
            							}
            						}
            						else {
HXLINE(  24)							int _g170 = 0;
HXDLIN(  24)							int _g171 = (sides7 + 1);
HXDLIN(  24)							while((_g170 < _g171)){
HXLINE(  24)								_g170 = (_g170 + 1);
HXDLIN(  24)								int i67 = (_g170 - 1);
HXDLIN(  24)								Float nextX7 = (innerCx + (innerRw * ::Math_obj::cos((((( (Float)(i67) ) * theta3) + omega3) + ((Float)0.01)))));
HXDLIN(  24)								Float nextY7 = (innerCy + (innerRh * ::Math_obj::sin((((( (Float)(i67) ) * theta3) + omega3) + ((Float)0.01)))));
HXDLIN(  24)								{
HXLINE(  24)									bool hasHit7 = false;
HXDLIN(  24)									bool hasUndo7 = false;
HXDLIN(  24)									int aA3 = ((color3 >> 24) & 255);
HXDLIN(  24)									int rA3 = ((color3 >> 16) & 255);
HXDLIN(  24)									int gA3 = ((color3 >> 8) & 255);
HXDLIN(  24)									int bA3 = (color3 & 255);
HXDLIN(  24)									Float bcx3 = (lastX3 - nextX7);
HXDLIN(  24)									Float bcy3 = (lastY3 - nextY7);
HXDLIN(  24)									Float acx3 = (innerCx - nextX7);
HXDLIN(  24)									Float acy3 = (innerCy - nextY7);
HXDLIN(  24)									Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN(  24)									Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN(  24)									Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN(  24)									Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN(  24)									 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN(  24)									if ((innerCx > lastX3)) {
HXLINE(  24)										if ((innerCx > nextX7)) {
HXLINE(  24)											int min28;
HXDLIN(  24)											if ((lastX3 > nextX7)) {
HXLINE(  24)												min28 = ::Math_obj::floor(nextX7);
            											}
            											else {
HXLINE(  24)												min28 = ::Math_obj::floor(lastX3);
            											}
HXDLIN(  24)											int ii_min56 = min28;
HXDLIN(  24)											int ii_max56 = ::Math_obj::ceil(innerCx);
HXDLIN(  24)											xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            										}
            										else {
HXLINE(  24)											int ii_min57 = ::Math_obj::floor(lastX3);
HXDLIN(  24)											int ii_max57 = ::Math_obj::ceil(nextX7);
HXDLIN(  24)											xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            										}
            									}
            									else {
HXLINE(  24)										if ((lastX3 > nextX7)) {
HXLINE(  24)											int min29;
HXDLIN(  24)											if ((innerCx > nextX7)) {
HXLINE(  24)												min29 = ::Math_obj::floor(nextX7);
            											}
            											else {
HXLINE(  24)												min29 = ::Math_obj::ceil(innerCx);
            											}
HXDLIN(  24)											int ii_min58 = min29;
HXDLIN(  24)											int ii_max58 = ::Math_obj::ceil(lastX3);
HXDLIN(  24)											xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            										}
            										else {
HXLINE(  24)											int ii_min59 = ::Math_obj::floor(innerCx);
HXDLIN(  24)											int ii_max59 = ::Math_obj::ceil(nextX7);
HXDLIN(  24)											xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            										}
            									}
HXDLIN(  24)									 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN(  24)									if ((innerCy > lastY3)) {
HXLINE(  24)										if ((innerCy > nextY7)) {
HXLINE(  24)											int min30;
HXDLIN(  24)											if ((lastY3 > nextY7)) {
HXLINE(  24)												min30 = ::Math_obj::floor(nextY7);
            											}
            											else {
HXLINE(  24)												min30 = ::Math_obj::floor(lastY3);
            											}
HXDLIN(  24)											int ii_min60 = min30;
HXDLIN(  24)											int ii_max60 = ::Math_obj::ceil(innerCy);
HXDLIN(  24)											yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            										}
            										else {
HXLINE(  24)											int ii_min61 = ::Math_obj::floor(lastY3);
HXDLIN(  24)											int ii_max61 = ::Math_obj::ceil(nextY7);
HXDLIN(  24)											yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            										}
            									}
            									else {
HXLINE(  24)										if ((lastY3 > nextY7)) {
HXLINE(  24)											int min31;
HXDLIN(  24)											if ((innerCy > nextY7)) {
HXLINE(  24)												min31 = ::Math_obj::floor(nextY7);
            											}
            											else {
HXLINE(  24)												min31 = ::Math_obj::ceil(innerCy);
            											}
HXDLIN(  24)											int ii_min62 = min31;
HXDLIN(  24)											int ii_max62 = ::Math_obj::ceil(lastY3);
HXDLIN(  24)											yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            										}
            										else {
HXLINE(  24)											int ii_min63 = ::Math_obj::floor(innerCy);
HXDLIN(  24)											int ii_max63 = ::Math_obj::ceil(nextY7);
HXDLIN(  24)											yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            										}
            									}
HXDLIN(  24)									 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN(  24)									if (hasUndo7) {
HXLINE(  24)										int width8 = ((xIter37->max - xIter37->start) + 1);
HXDLIN(  24)										int height8 = ((yIter37->max - yIter37->start) + 1);
HXDLIN(  24)										 ::Dynamic imageType8 = null();
HXDLIN(  24)										 ::pi_xy::ImageStruct this236 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  24)										if (::hx::IsNull( imageType8 )) {
HXLINE(  54)											imageType8 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  24)										::Dynamic undoImage22;
HXDLIN(  24)										switch((int)(( (int)(imageType8) ))){
            											case (int)0: {
HXLINE(  24)												 ::iterMagic::BytesImg byt8 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  24)												 ::iterMagic::BytesImg b51 = byt8;
HXDLIN(  24)												{
HXLINE(  24)													b51->width = width8;
HXDLIN(  24)													b51->height = height8;
HXDLIN(  24)													b51->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  24)													b51->data = ::haxe::io::Bytes_obj::alloc((b51->length * 4));
HXDLIN(  24)													{
HXLINE(  24)														int len16 = b51->length;
HXDLIN(  24)														int w8 = 0;
HXDLIN(  24)														{
HXLINE(  24)															int _g172 = 0;
HXDLIN(  24)															int _g173 = b51->height;
HXDLIN(  24)															while((_g172 < _g173)){
HXLINE(  24)																_g172 = (_g172 + 1);
HXDLIN(  24)																int y26 = (_g172 - 1);
HXDLIN(  24)																{
HXLINE(  24)																	int _g174 = 0;
HXDLIN(  24)																	int _g175 = b51->width;
HXDLIN(  24)																	while((_g174 < _g175)){
HXLINE(  24)																		_g174 = (_g174 + 1);
HXDLIN(  24)																		int x26 = (_g174 - 1);
HXDLIN(  24)																		{
HXLINE(  24)																			w8 = (w8 + 1);
HXDLIN(  24)																			b51->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  24)																		{
HXLINE(  24)																			w8 = (w8 + 1);
HXDLIN(  24)																			b51->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  24)																		{
HXLINE(  24)																			w8 = (w8 + 1);
HXDLIN(  24)																			b51->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  24)																		{
HXLINE(  24)																			w8 = (w8 + 1);
HXDLIN(  24)																			b51->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  24)												undoImage22 = b51;
            											}
            											break;
            											case (int)1: {
HXLINE(  24)												 ::iterMagic::ArrIntImg arrI8 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)												 ::iterMagic::ArrIntImg a49 = arrI8;
HXDLIN(  24)												{
HXLINE(  24)													a49->width = width8;
HXDLIN(  24)													a49->height = height8;
HXDLIN(  24)													a49->data = ::Array_obj< int >::__new(0);
HXDLIN(  24)													a49->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  24)													{
HXLINE(  24)														int _g176 = 0;
HXDLIN(  24)														int _g177 = a49->length;
HXDLIN(  24)														while((_g176 < _g177)){
HXLINE(  24)															_g176 = (_g176 + 1);
HXDLIN(  24)															int i68 = (_g176 - 1);
HXDLIN(  24)															a49->data[i68] = 0;
            														}
            													}
            												}
HXDLIN(  24)												undoImage22 = a49;
            											}
            											break;
            											case (int)2: {
HXLINE(  24)												 ::iterMagic::U32ArrImg u32a8 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  24)												 ::iterMagic::U32ArrImg b52 = u32a8;
HXDLIN(  24)												{
HXLINE(  24)													b52->width = width8;
HXDLIN(  24)													b52->height = height8;
HXDLIN(  24)													b52->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  24)													int size8 = (b52->length * 4);
HXDLIN(  24)													b52->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size8),0,size8);
HXDLIN(  24)													{
HXLINE(  24)														int _g178 = 0;
HXDLIN(  24)														int _g179 = b52->length;
HXDLIN(  24)														while((_g178 < _g179)){
HXLINE(  24)															_g178 = (_g178 + 1);
HXDLIN(  24)															int i69 = (_g178 - 1);
HXDLIN(  24)															{
HXLINE(  24)																 ::haxe::io::ArrayBufferViewImpl this237 = b52->data;
HXDLIN(  24)																bool undoImage23;
HXDLIN(  24)																if ((i69 >= 0)) {
HXLINE(  24)																	undoImage23 = (i69 < (this237->byteLength >> 2));
            																}
            																else {
HXLINE(  24)																	undoImage23 = false;
            																}
HXDLIN(  24)																if (undoImage23) {
HXLINE(  24)																	 ::haxe::io::Bytes _this8 = this237->bytes;
HXDLIN(  24)																	int pos8 = ((i69 << 2) + this237->byteOffset);
HXDLIN(  24)																	_this8->b[pos8] = ( (unsigned char)(0) );
HXDLIN(  24)																	_this8->b[(pos8 + 1)] = ( (unsigned char)(0) );
HXDLIN(  24)																	_this8->b[(pos8 + 2)] = ( (unsigned char)(0) );
HXDLIN(  24)																	_this8->b[(pos8 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  24)												undoImage22 = b52;
            											}
            											break;
            											case (int)3: {
HXLINE(  24)												 ::iterMagic::VecIntImg vec8 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)												 ::iterMagic::VecIntImg v22 = vec8;
HXDLIN(  24)												{
HXLINE(  24)													v22->width = width8;
HXDLIN(  24)													v22->height = height8;
HXDLIN(  24)													v22->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  24)													v22->data = ::Array_obj< int >::__new(v22->length);
HXDLIN(  24)													{
HXLINE(  24)														int _g180 = 0;
HXDLIN(  24)														int _g181 = v22->length;
HXDLIN(  24)														while((_g180 < _g181)){
HXLINE(  24)															_g180 = (_g180 + 1);
HXDLIN(  24)															int i70 = (_g180 - 1);
HXDLIN(  24)															v22->data->__unsafe_set(i70,0);
            														}
            													}
            												}
HXDLIN(  24)												undoImage22 = v22;
            											}
            											break;
            											case (int)4: {
HXLINE(  24)												 ::iterMagic::StackIntImg sInt8 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)												 ::iterMagic::StackIntImg b53 = sInt8;
HXDLIN(  24)												{
HXLINE(  24)													b53->width = width8;
HXDLIN(  24)													b53->height = height8;
HXDLIN(  24)													b53->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  24)													b53->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  24)													{
HXLINE(  24)														int len17 = b53->length;
HXDLIN(  24)														 ::haxe::ds::GenericStack_Int d8 = b53->data;
HXDLIN(  24)														if (::hx::IsNull( d8->head )) {
HXLINE(  24)															int _g182 = 0;
HXDLIN(  24)															int _g183 = len17;
HXDLIN(  24)															while((_g182 < _g183)){
HXLINE(  24)																_g182 = (_g182 + 1);
HXDLIN(  24)																int i71 = (_g182 - 1);
HXDLIN(  24)																d8->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d8->head);
            															}
            														}
            														else {
HXLINE(  24)															int _g184 = 0;
HXDLIN(  24)															int _g185 = len17;
HXDLIN(  24)															while((_g184 < _g185)){
HXLINE(  24)																_g184 = (_g184 + 1);
HXDLIN(  24)																int i72 = (_g184 - 1);
HXDLIN(  24)																{
HXLINE(  24)																	 ::haxe::ds::GenericCell_Int l8 = b53->data->head;
HXDLIN(  24)																	 ::haxe::ds::GenericCell_Int prev8 = null();
HXDLIN(  24)																	{
HXLINE(  24)																		int _g186 = 0;
HXDLIN(  24)																		int _g187 = i72;
HXDLIN(  24)																		while((_g186 < _g187)){
HXLINE(  24)																			_g186 = (_g186 + 1);
HXDLIN(  24)																			int i73 = (_g186 - 1);
HXLINE( 345)																			prev8 = l8;
HXLINE( 346)																			l8 = l8->next;
            																		}
            																	}
HXLINE(  24)																	if (::hx::IsNull( prev8 )) {
HXLINE(  24)																		b53->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  24)																		l8 = null();
            																	}
            																	else {
HXLINE(  24)																		prev8->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  24)																		l8 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  24)												undoImage22 = b53;
            											}
            											break;
            										}
HXDLIN(  24)										this236->image = undoImage22;
HXDLIN(  24)										this236->width = width8;
HXDLIN(  24)										this236->height = height8;
HXDLIN(  24)										this236->imageType = ( (int)(imageType8) );
HXDLIN(  24)										undoImage21 = this236;
HXDLIN(  24)										{
HXLINE(  24)											int rectLeft7 = xIter37->start;
HXDLIN(  24)											int rectTop7 = yIter37->start;
HXDLIN(  24)											int rectRight7 = xIter37->max;
HXDLIN(  24)											bool forceClear7 = false;
HXDLIN(  24)											{
HXLINE(  24)												int _g188 = rectTop7;
HXDLIN(  24)												int _g189 = yIter37->max;
HXDLIN(  24)												while((_g188 < _g189)){
HXLINE(  24)													_g188 = (_g188 + 1);
HXDLIN(  24)													int dy7 = (_g188 - 1);
HXDLIN(  24)													{
HXLINE(  24)														int _g190 = rectLeft7;
HXDLIN(  24)														int _g191 = rectRight7;
HXDLIN(  24)														while((_g190 < _g191)){
HXLINE(  24)															_g190 = (_g190 + 1);
HXDLIN(  24)															int dx7 = (_g190 - 1);
HXDLIN(  24)															::Dynamic this238 = this204->image;
HXDLIN(  24)															int index32;
HXDLIN(  24)															if (this204->useVirtualPos) {
HXLINE(  24)																index32 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this204->virtualY) * ( (Float)(this204->width) )) + dx7) - this204->virtualX));
            															}
            															else {
HXLINE(  24)																index32 = ::Std_obj::_hx_int(( (Float)(((dy7 * this204->width) + dx7)) ));
            															}
HXDLIN(  24)															int c25 = ::iterMagic::Iimg_obj::get(this238,index32);
HXDLIN(  24)															int col7;
HXDLIN(  24)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																col7 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            															}
            															else {
HXLINE(  24)																col7 = c25;
            															}
HXDLIN(  24)															bool _hx_tmp58;
HXDLIN(  24)															if (this204->useMask) {
HXLINE(  24)																_hx_tmp58 = ::hx::IsNotNull( this204->mask );
            															}
            															else {
HXLINE(  24)																_hx_tmp58 = false;
            															}
HXDLIN(  24)															if (_hx_tmp58) {
HXLINE(  24)																 ::pi_xy::ImageStruct this239 = this204->mask;
HXDLIN(  24)																::Dynamic this240 = this239->image;
HXDLIN(  24)																int index33;
HXDLIN(  24)																if (this239->useVirtualPos) {
HXLINE(  24)																	index33 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this239->virtualY) * ( (Float)(this239->width) )) + dx7) - this239->virtualX));
            																}
            																else {
HXLINE(  24)																	index33 = ::Std_obj::_hx_int(( (Float)(((dy7 * this239->width) + dx7)) ));
            																}
HXDLIN(  24)																int c26 = ::iterMagic::Iimg_obj::get(this240,index33);
HXDLIN(  24)																int v23;
HXDLIN(  24)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																	v23 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            																}
            																else {
HXLINE(  24)																	v23 = c26;
            																}
HXDLIN(  24)																int maskPixel7 = v23;
HXDLIN(  24)																int this241 = col7;
HXDLIN(  24)																if ((maskPixel7 == 0)) {
HXLINE(  24)																	col7 = this241;
            																}
            																else {
HXLINE(  24)																	Float m07;
HXDLIN(  24)																	int this242 = ((maskPixel7 >> 24) & 255);
HXDLIN(  24)																	if ((this242 == 0)) {
HXLINE(  24)																		m07 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		m07 = (( (Float)(this242) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float m17;
HXDLIN(  24)																	int this243 = ((maskPixel7 >> 16) & 255);
HXDLIN(  24)																	if ((this243 == 0)) {
HXLINE(  24)																		m17 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		m17 = (( (Float)(this243) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float m27;
HXDLIN(  24)																	int this244 = ((maskPixel7 >> 8) & 255);
HXDLIN(  24)																	if ((this244 == 0)) {
HXLINE(  24)																		m27 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		m27 = (( (Float)(this244) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float m37;
HXDLIN(  24)																	int this245 = (maskPixel7 & 255);
HXDLIN(  24)																	if ((this245 == 0)) {
HXLINE(  24)																		m37 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		m37 = (( (Float)(this245) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this241 >> 24) & 255)) )));
HXDLIN(  24)																	int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this241 >> 16) & 255)) )));
HXDLIN(  24)																	int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this241 >> 8) & 255)) )));
HXDLIN(  24)																	int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this241 & 255)) )));
HXDLIN(  24)																	col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  24)															if ((col7 != 0)) {
HXLINE(  24)																int x27 = (dx7 - rectLeft7);
HXDLIN(  24)																int y27 = (dy7 - rectTop7);
HXDLIN(  24)																int c27 = col7;
HXDLIN(  24)																bool _hx_tmp59;
HXDLIN(  24)																if ((((c27 >> 24) & 255) < 254)) {
HXLINE(  24)																	_hx_tmp59 = undoImage21->transparent;
            																}
            																else {
HXLINE(  24)																	_hx_tmp59 = false;
            																}
HXDLIN(  24)																if (_hx_tmp59) {
HXLINE(  24)																	int location14;
HXDLIN(  24)																	if (undoImage21->useVirtualPos) {
HXLINE(  24)																		location14 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x27) - undoImage21->virtualX));
            																	}
            																	else {
HXLINE(  24)																		location14 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage21->width) + x27)) ));
            																	}
HXDLIN(  24)																	int this246 = ::iterMagic::Iimg_obj::get(undoImage21->image,location14);
HXDLIN(  24)																	int this247;
HXDLIN(  24)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																		this247 = ((((((this246 >> 24) & 255) << 24) | ((this246 & 255) << 16)) | (((this246 >> 8) & 255) << 8)) | ((this246 >> 16) & 255));
            																	}
            																	else {
HXLINE(  24)																		this247 = this246;
            																	}
HXDLIN(  24)																	Float a117;
HXDLIN(  24)																	int this248 = ((this247 >> 24) & 255);
HXDLIN(  24)																	if ((this248 == 0)) {
HXLINE(  24)																		a117 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		a117 = (( (Float)(this248) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float r115;
HXDLIN(  24)																	int this249 = ((this247 >> 16) & 255);
HXDLIN(  24)																	if ((this249 == 0)) {
HXLINE(  24)																		r115 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		r115 = (( (Float)(this249) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float g115;
HXDLIN(  24)																	int this250 = ((this247 >> 8) & 255);
HXDLIN(  24)																	if ((this250 == 0)) {
HXLINE(  24)																		g115 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		g115 = (( (Float)(this250) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float b120;
HXDLIN(  24)																	int this251 = (this247 & 255);
HXDLIN(  24)																	if ((this251 == 0)) {
HXLINE(  24)																		b120 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		b120 = (( (Float)(this251) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float a216;
HXDLIN(  24)																	int this252 = ((col7 >> 24) & 255);
HXDLIN(  24)																	if ((this252 == 0)) {
HXLINE(  24)																		a216 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		a216 = (( (Float)(this252) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float r214;
HXDLIN(  24)																	int this253 = ((col7 >> 16) & 255);
HXDLIN(  24)																	if ((this253 == 0)) {
HXLINE(  24)																		r214 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		r214 = (( (Float)(this253) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float g214;
HXDLIN(  24)																	int this254 = ((col7 >> 8) & 255);
HXDLIN(  24)																	if ((this254 == 0)) {
HXLINE(  24)																		g214 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		g214 = (( (Float)(this254) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float b218;
HXDLIN(  24)																	int this255 = (col7 & 255);
HXDLIN(  24)																	if ((this255 == 0)) {
HXLINE(  24)																		b218 = ((Float)0.);
            																	}
            																	else {
HXLINE(  24)																		b218 = (( (Float)(this255) ) / ( (Float)(255) ));
            																	}
HXDLIN(  24)																	Float a315 = (a117 * (( (Float)(1) ) - a216));
HXDLIN(  24)																	int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a315) + (r214 * a216))));
HXDLIN(  24)																	int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a315) + (g214 * a216))));
HXDLIN(  24)																	int b54 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a315) + (b218 * a216))));
HXDLIN(  24)																	int a50 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN(  24)																	int blended14 = ((((a50 << 24) | (r36 << 16)) | (g36 << 8)) | b54);
HXDLIN(  24)																	{
HXLINE(  24)																		int _hx_tmp60;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			_hx_tmp60 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			_hx_tmp60 = blended14;
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(undoImage21->image,location14,_hx_tmp60);
            																	}
            																}
            																else {
HXLINE(  24)																	::Dynamic this256 = undoImage21->image;
HXDLIN(  24)																	int index34;
HXDLIN(  24)																	if (undoImage21->useVirtualPos) {
HXLINE(  24)																		index34 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x27) - undoImage21->virtualX));
            																	}
            																	else {
HXLINE(  24)																		index34 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage21->width) + x27)) ));
            																	}
HXDLIN(  24)																	int _hx_tmp61;
HXDLIN(  24)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																		_hx_tmp61 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            																	}
            																	else {
HXLINE(  24)																		_hx_tmp61 = c27;
            																	}
HXDLIN(  24)																	::iterMagic::Iimg_obj::set(this256,index34,_hx_tmp61);
            																}
            															}
            															else {
HXLINE(  24)																if (forceClear7) {
HXLINE(  24)																	::Dynamic this257 = undoImage21->image;
HXDLIN(  24)																	int x28 = (dx7 - rectLeft7);
HXDLIN(  24)																	int y28 = (dy7 - rectTop7);
HXDLIN(  24)																	int index35;
HXDLIN(  24)																	if (undoImage21->useVirtualPos) {
HXLINE(  24)																		index35 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x28) - undoImage21->virtualX));
            																	}
            																	else {
HXLINE(  24)																		index35 = ::Std_obj::_hx_int(( (Float)(((y28 * undoImage21->width) + x28)) ));
            																	}
HXDLIN(  24)																	::iterMagic::Iimg_obj::set(this257,index35,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  24)									bool found7 = false;
HXDLIN(  24)									{
HXLINE(  24)										int _g_min14 = xIter37->start;
HXDLIN(  24)										int _g_max14 = xIter37->max;
HXDLIN(  24)										while((_g_min14 < _g_max14)){
HXLINE(  24)											_g_min14 = (_g_min14 + 1);
HXDLIN(  24)											int px3 = (_g_min14 - 1);
HXDLIN(  24)											Float pcx3 = (( (Float)(px3) ) - nextX7);
HXLINE( 619)											found7 = false;
HXLINE(  24)											{
HXLINE(  24)												int _g_min15 = yIter37->start;
HXDLIN(  24)												int _g_max15 = yIter37->max;
HXDLIN(  24)												while((_g_min15 < _g_max15)){
HXLINE(  24)													_g_min15 = (_g_min15 + 1);
HXDLIN(  24)													int py3 = (_g_min15 - 1);
HXDLIN(  24)													Float pcy3 = (( (Float)(py3) ) - nextY7);
HXDLIN(  24)													Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN(  24)													Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN(  24)													Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN(  24)													Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN(  24)													Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  24)													bool _hx_tmp62;
HXDLIN(  24)													bool _hx_tmp63;
HXDLIN(  24)													if ((ratioA3 >= 0)) {
HXLINE(  24)														_hx_tmp63 = (ratioB3 >= 0);
            													}
            													else {
HXLINE(  24)														_hx_tmp63 = false;
            													}
HXDLIN(  24)													if (_hx_tmp63) {
HXLINE(  24)														_hx_tmp62 = (ratioC3 >= 0);
            													}
            													else {
HXLINE(  24)														_hx_tmp62 = false;
            													}
HXDLIN(  24)													if (_hx_tmp62) {
HXLINE(  24)														int i74 = ::Std_obj::_hx_int((( (Float)(aA3) ) * (softC1 * ratioB3)));
HXDLIN(  24)														if ((i74 > 255)) {
HXLINE(  24)															i74 = 255;
            														}
HXDLIN(  24)														if ((i74 < 0)) {
HXLINE(  25)															i74 = 0;
            														}
HXLINE(  24)														int a51 = i74;
HXDLIN(  24)														int i75 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN(  24)														if ((i75 > 255)) {
HXLINE(  24)															i75 = 255;
            														}
HXDLIN(  24)														if ((i75 < 0)) {
HXLINE(  25)															i75 = 0;
            														}
HXLINE(  24)														int r37 = i75;
HXDLIN(  24)														int i76 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN(  24)														if ((i76 > 255)) {
HXLINE(  24)															i76 = 255;
            														}
HXDLIN(  24)														if ((i76 < 0)) {
HXLINE(  25)															i76 = 0;
            														}
HXLINE(  24)														int g37 = i76;
HXDLIN(  24)														int i77 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN(  24)														if ((i77 > 255)) {
HXLINE(  24)															i77 = 255;
            														}
HXDLIN(  24)														if ((i77 < 0)) {
HXLINE(  25)															i77 = 0;
            														}
HXLINE(  24)														int b55 = i77;
HXDLIN(  24)														{
HXLINE(  24)															int location15;
HXDLIN(  24)															if (this204->useVirtualPos) {
HXLINE(  24)																location15 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this204->virtualY) * ( (Float)(this204->width) )) + px3) - this204->virtualX));
            															}
            															else {
HXLINE(  24)																location15 = ::Std_obj::_hx_int(( (Float)(((py3 * this204->width) + px3)) ));
            															}
HXDLIN(  24)															bool _hx_tmp64;
HXDLIN(  24)															if (this204->transparent) {
HXLINE(  24)																_hx_tmp64 = (a51 < 254);
            															}
            															else {
HXLINE(  24)																_hx_tmp64 = false;
            															}
HXDLIN(  24)															if (_hx_tmp64) {
HXLINE(  24)																int this258 = ::iterMagic::Iimg_obj::get(this204->image,location15);
HXDLIN(  24)																int old3;
HXDLIN(  24)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																	old3 = ((((((this258 >> 24) & 255) << 24) | ((this258 & 255) << 16)) | (((this258 >> 8) & 255) << 8)) | ((this258 >> 16) & 255));
            																}
            																else {
HXLINE(  24)																	old3 = this258;
            																}
HXDLIN(  24)																int rhs3 = ((((a51 << 24) | (r37 << 16)) | (g37 << 8)) | b55);
HXDLIN(  24)																Float a118;
HXDLIN(  24)																int this259 = ((old3 >> 24) & 255);
HXDLIN(  24)																if ((this259 == 0)) {
HXLINE(  24)																	a118 = ((Float)0.);
            																}
            																else {
HXLINE(  24)																	a118 = (( (Float)(this259) ) / ( (Float)(255) ));
            																}
HXDLIN(  24)																Float r116;
HXDLIN(  24)																int this260 = ((old3 >> 16) & 255);
HXDLIN(  24)																if ((this260 == 0)) {
HXLINE(  24)																	r116 = ((Float)0.);
            																}
            																else {
HXLINE(  24)																	r116 = (( (Float)(this260) ) / ( (Float)(255) ));
            																}
HXDLIN(  24)																Float g116;
HXDLIN(  24)																int this261 = ((old3 >> 8) & 255);
HXDLIN(  24)																if ((this261 == 0)) {
HXLINE(  24)																	g116 = ((Float)0.);
            																}
            																else {
HXLINE(  24)																	g116 = (( (Float)(this261) ) / ( (Float)(255) ));
            																}
HXDLIN(  24)																Float b121;
HXDLIN(  24)																int this262 = (old3 & 255);
HXDLIN(  24)																if ((this262 == 0)) {
HXLINE(  24)																	b121 = ((Float)0.);
            																}
            																else {
HXLINE(  24)																	b121 = (( (Float)(this262) ) / ( (Float)(255) ));
            																}
HXDLIN(  24)																Float a217;
HXDLIN(  24)																int this263 = ((rhs3 >> 24) & 255);
HXDLIN(  24)																if ((this263 == 0)) {
HXLINE(  24)																	a217 = ((Float)0.);
            																}
            																else {
HXLINE(  24)																	a217 = (( (Float)(this263) ) / ( (Float)(255) ));
            																}
HXDLIN(  24)																Float r215;
HXDLIN(  24)																int this264 = ((rhs3 >> 16) & 255);
HXDLIN(  24)																if ((this264 == 0)) {
HXLINE(  24)																	r215 = ((Float)0.);
            																}
            																else {
HXLINE(  24)																	r215 = (( (Float)(this264) ) / ( (Float)(255) ));
            																}
HXDLIN(  24)																Float g215;
HXDLIN(  24)																int this265 = ((rhs3 >> 8) & 255);
HXDLIN(  24)																if ((this265 == 0)) {
HXLINE(  24)																	g215 = ((Float)0.);
            																}
            																else {
HXLINE(  24)																	g215 = (( (Float)(this265) ) / ( (Float)(255) ));
            																}
HXDLIN(  24)																Float b219;
HXDLIN(  24)																int this266 = (rhs3 & 255);
HXDLIN(  24)																if ((this266 == 0)) {
HXLINE(  24)																	b219 = ((Float)0.);
            																}
            																else {
HXLINE(  24)																	b219 = (( (Float)(this266) ) / ( (Float)(255) ));
            																}
HXDLIN(  24)																Float a316 = (a118 * (( (Float)(1) ) - a217));
HXDLIN(  24)																int r38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a316) + (r215 * a217))));
HXDLIN(  24)																int g38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a316) + (g215 * a217))));
HXDLIN(  24)																int b56 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b121 * a316) + (b219 * a217))));
HXDLIN(  24)																int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN(  24)																int blended15 = ((((a52 << 24) | (r38 << 16)) | (g38 << 8)) | b56);
HXDLIN(  24)																{
HXLINE(  24)																	int _hx_tmp65;
HXDLIN(  24)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																		_hx_tmp65 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            																	}
            																	else {
HXLINE(  24)																		_hx_tmp65 = blended15;
            																	}
HXDLIN(  24)																	::iterMagic::Iimg_obj::set(this204->image,location15,_hx_tmp65);
            																}
            															}
            															else {
HXLINE(  24)																int value3;
HXDLIN(  24)																if (this204->isLittle) {
HXLINE(  24)																	value3 = ((((a51 << 24) | (b55 << 16)) | (g37 << 8)) | r37);
            																}
            																else {
HXLINE(  24)																	value3 = ((((a51 << 24) | (r37 << 16)) | (g37 << 8)) | b55);
            																}
HXDLIN(  24)																::iterMagic::Iimg_obj::set(this204->image,location15,value3);
            															}
            														}
HXLINE( 633)														found7 = true;
            													}
            													else {
HXLINE(  24)														if (found7) {
HXLINE(  24)															goto _hx_goto_112;
            														}
            													}
            												}
            												_hx_goto_112:;
            											}
            										}
            									}
HXDLIN(  24)									if ((hasHit7 == false)) {
HXLINE(  24)										 ::pi_xy::algo::HitTri v24 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,innerCx,innerCy,lastX3,lastY3,nextX7,nextY7,true);
HXDLIN(  24)										if (hasUndo7) {
HXLINE(  24)											v24->undoImage = undoImage21;
HXDLIN(  24)											v24->undoX = xIter37->start;
HXDLIN(  24)											v24->undoY = yIter37->start;
            										}
            									}
            								}
HXLINE( 119)								lastX3 = nextX7;
HXLINE( 120)								lastY3 = nextY7;
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  26)		{
HXLINE(  26)			int x29 = ::Std_obj::_hx_int((this->left + this->offX));
HXDLIN(  26)			int y29 = ::Std_obj::_hx_int((this->top + this->offY));
HXDLIN(  26)			bool forceClear8 = false;
HXDLIN(  26)			{
HXLINE(  26)				int _g192 = 0;
HXDLIN(  26)				int _g193 = temp->height;
HXDLIN(  26)				while((_g192 < _g193)){
HXLINE(  26)					_g192 = (_g192 + 1);
HXDLIN(  26)					int dy8 = (_g192 - 1);
HXDLIN(  26)					{
HXLINE(  26)						int _g194 = 0;
HXDLIN(  26)						int _g195 = temp->width;
HXDLIN(  26)						while((_g194 < _g195)){
HXLINE(  26)							_g194 = (_g194 + 1);
HXDLIN(  26)							int dx8 = (_g194 - 1);
HXDLIN(  26)							::Dynamic this267 = temp->image;
HXDLIN(  26)							int index36;
HXDLIN(  26)							if (temp->useVirtualPos) {
HXLINE(  26)								index36 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx8) - temp->virtualX));
            							}
            							else {
HXLINE(  26)								index36 = ::Std_obj::_hx_int(( (Float)(((dy8 * temp->width) + dx8)) ));
            							}
HXDLIN(  26)							int c28 = ::iterMagic::Iimg_obj::get(this267,index36);
HXDLIN(  26)							int col8;
HXDLIN(  26)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  26)								col8 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            							}
            							else {
HXLINE(  26)								col8 = c28;
            							}
HXDLIN(  26)							bool _hx_tmp66;
HXDLIN(  26)							if (temp->useMask) {
HXLINE(  26)								_hx_tmp66 = ::hx::IsNotNull( temp->mask );
            							}
            							else {
HXLINE(  26)								_hx_tmp66 = false;
            							}
HXDLIN(  26)							if (_hx_tmp66) {
HXLINE(  26)								 ::pi_xy::ImageStruct this268 = temp->mask;
HXDLIN(  26)								::Dynamic this269 = this268->image;
HXDLIN(  26)								int index37;
HXDLIN(  26)								if (this268->useVirtualPos) {
HXLINE(  26)									index37 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this268->virtualY) * ( (Float)(this268->width) )) + dx8) - this268->virtualX));
            								}
            								else {
HXLINE(  26)									index37 = ::Std_obj::_hx_int(( (Float)(((dy8 * this268->width) + dx8)) ));
            								}
HXDLIN(  26)								int c29 = ::iterMagic::Iimg_obj::get(this269,index37);
HXDLIN(  26)								int v25;
HXDLIN(  26)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  26)									v25 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            								}
            								else {
HXLINE(  26)									v25 = c29;
            								}
HXDLIN(  26)								int maskPixel8 = v25;
HXDLIN(  26)								int this270 = col8;
HXDLIN(  26)								if ((maskPixel8 == 0)) {
HXLINE(  26)									col8 = this270;
            								}
            								else {
HXLINE(  26)									Float m08;
HXDLIN(  26)									int this271 = ((maskPixel8 >> 24) & 255);
HXDLIN(  26)									if ((this271 == 0)) {
HXLINE(  26)										m08 = ((Float)0.);
            									}
            									else {
HXLINE(  26)										m08 = (( (Float)(this271) ) / ( (Float)(255) ));
            									}
HXDLIN(  26)									Float m18;
HXDLIN(  26)									int this272 = ((maskPixel8 >> 16) & 255);
HXDLIN(  26)									if ((this272 == 0)) {
HXLINE(  26)										m18 = ((Float)0.);
            									}
            									else {
HXLINE(  26)										m18 = (( (Float)(this272) ) / ( (Float)(255) ));
            									}
HXDLIN(  26)									Float m28;
HXDLIN(  26)									int this273 = ((maskPixel8 >> 8) & 255);
HXDLIN(  26)									if ((this273 == 0)) {
HXLINE(  26)										m28 = ((Float)0.);
            									}
            									else {
HXLINE(  26)										m28 = (( (Float)(this273) ) / ( (Float)(255) ));
            									}
HXDLIN(  26)									Float m38;
HXDLIN(  26)									int this274 = (maskPixel8 & 255);
HXDLIN(  26)									if ((this274 == 0)) {
HXLINE(  26)										m38 = ((Float)0.);
            									}
            									else {
HXLINE(  26)										m38 = (( (Float)(this274) ) / ( (Float)(255) ));
            									}
HXDLIN(  26)									int ch08 = ::Std_obj::_hx_int(((((Float)1.) - m08) * ( (Float)(((this270 >> 24) & 255)) )));
HXDLIN(  26)									int ch18 = ::Std_obj::_hx_int(((((Float)1.) - m18) * ( (Float)(((this270 >> 16) & 255)) )));
HXDLIN(  26)									int ch28 = ::Std_obj::_hx_int(((((Float)1.) - m28) * ( (Float)(((this270 >> 8) & 255)) )));
HXDLIN(  26)									int ch38 = ::Std_obj::_hx_int(((((Float)1.) - m38) * ( (Float)((this270 & 255)) )));
HXDLIN(  26)									col8 = ((((::Math_obj::round((( (Float)(ch08) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch18) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch28) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch38) ) * ( (Float)(255) ))));
            								}
            							}
HXDLIN(  26)							if ((col8 != 0)) {
HXLINE(  26)								int x30 = (x29 + dx8);
HXDLIN(  26)								int y30 = (y29 + dy8);
HXDLIN(  26)								int c30 = col8;
HXDLIN(  26)								bool _hx_tmp67;
HXDLIN(  26)								if ((((c30 >> 24) & 255) < 254)) {
HXLINE(  26)									_hx_tmp67 = pixelImage->transparent;
            								}
            								else {
HXLINE(  26)									_hx_tmp67 = false;
            								}
HXDLIN(  26)								if (_hx_tmp67) {
HXLINE(  26)									int location16;
HXDLIN(  26)									if (pixelImage->useVirtualPos) {
HXLINE(  26)										location16 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x30) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  26)										location16 = ::Std_obj::_hx_int(( (Float)(((y30 * pixelImage->width) + x30)) ));
            									}
HXDLIN(  26)									int this275 = ::iterMagic::Iimg_obj::get(pixelImage->image,location16);
HXDLIN(  26)									int this276;
HXDLIN(  26)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  26)										this276 = ((((((this275 >> 24) & 255) << 24) | ((this275 & 255) << 16)) | (((this275 >> 8) & 255) << 8)) | ((this275 >> 16) & 255));
            									}
            									else {
HXLINE(  26)										this276 = this275;
            									}
HXDLIN(  26)									Float a119;
HXDLIN(  26)									int this277 = ((this276 >> 24) & 255);
HXDLIN(  26)									if ((this277 == 0)) {
HXLINE(  26)										a119 = ((Float)0.);
            									}
            									else {
HXLINE(  26)										a119 = (( (Float)(this277) ) / ( (Float)(255) ));
            									}
HXDLIN(  26)									Float r117;
HXDLIN(  26)									int this278 = ((this276 >> 16) & 255);
HXDLIN(  26)									if ((this278 == 0)) {
HXLINE(  26)										r117 = ((Float)0.);
            									}
            									else {
HXLINE(  26)										r117 = (( (Float)(this278) ) / ( (Float)(255) ));
            									}
HXDLIN(  26)									Float g117;
HXDLIN(  26)									int this279 = ((this276 >> 8) & 255);
HXDLIN(  26)									if ((this279 == 0)) {
HXLINE(  26)										g117 = ((Float)0.);
            									}
            									else {
HXLINE(  26)										g117 = (( (Float)(this279) ) / ( (Float)(255) ));
            									}
HXDLIN(  26)									Float b122;
HXDLIN(  26)									int this280 = (this276 & 255);
HXDLIN(  26)									if ((this280 == 0)) {
HXLINE(  26)										b122 = ((Float)0.);
            									}
            									else {
HXLINE(  26)										b122 = (( (Float)(this280) ) / ( (Float)(255) ));
            									}
HXDLIN(  26)									Float a218;
HXDLIN(  26)									int this281 = ((col8 >> 24) & 255);
HXDLIN(  26)									if ((this281 == 0)) {
HXLINE(  26)										a218 = ((Float)0.);
            									}
            									else {
HXLINE(  26)										a218 = (( (Float)(this281) ) / ( (Float)(255) ));
            									}
HXDLIN(  26)									Float r216;
HXDLIN(  26)									int this282 = ((col8 >> 16) & 255);
HXDLIN(  26)									if ((this282 == 0)) {
HXLINE(  26)										r216 = ((Float)0.);
            									}
            									else {
HXLINE(  26)										r216 = (( (Float)(this282) ) / ( (Float)(255) ));
            									}
HXDLIN(  26)									Float g216;
HXDLIN(  26)									int this283 = ((col8 >> 8) & 255);
HXDLIN(  26)									if ((this283 == 0)) {
HXLINE(  26)										g216 = ((Float)0.);
            									}
            									else {
HXLINE(  26)										g216 = (( (Float)(this283) ) / ( (Float)(255) ));
            									}
HXDLIN(  26)									Float b220;
HXDLIN(  26)									int this284 = (col8 & 255);
HXDLIN(  26)									if ((this284 == 0)) {
HXLINE(  26)										b220 = ((Float)0.);
            									}
            									else {
HXLINE(  26)										b220 = (( (Float)(this284) ) / ( (Float)(255) ));
            									}
HXDLIN(  26)									Float a317 = (a119 * (( (Float)(1) ) - a218));
HXDLIN(  26)									int r39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a317) + (r216 * a218))));
HXDLIN(  26)									int g39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a317) + (g216 * a218))));
HXDLIN(  26)									int b57 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b122 * a317) + (b220 * a218))));
HXDLIN(  26)									int a53 = ::Std_obj::_hx_int((( (Float)(255) ) * (a317 + a218)));
HXDLIN(  26)									int blended16 = ((((a53 << 24) | (r39 << 16)) | (g39 << 8)) | b57);
HXDLIN(  26)									{
HXLINE(  26)										int _hx_tmp68;
HXDLIN(  26)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  26)											_hx_tmp68 = ((((((blended16 >> 24) & 255) << 24) | ((blended16 & 255) << 16)) | (((blended16 >> 8) & 255) << 8)) | ((blended16 >> 16) & 255));
            										}
            										else {
HXLINE(  26)											_hx_tmp68 = blended16;
            										}
HXDLIN(  26)										::iterMagic::Iimg_obj::set(pixelImage->image,location16,_hx_tmp68);
            									}
            								}
            								else {
HXLINE(  26)									::Dynamic this285 = pixelImage->image;
HXDLIN(  26)									int index38;
HXDLIN(  26)									if (pixelImage->useVirtualPos) {
HXLINE(  26)										index38 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x30) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  26)										index38 = ::Std_obj::_hx_int(( (Float)(((y30 * pixelImage->width) + x30)) ));
            									}
HXDLIN(  26)									int _hx_tmp69;
HXDLIN(  26)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  26)										_hx_tmp69 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            									}
            									else {
HXLINE(  26)										_hx_tmp69 = c30;
            									}
HXDLIN(  26)									::iterMagic::Iimg_obj::set(this285,index38,_hx_tmp69);
            								}
            							}
            							else {
HXLINE(  26)								if (forceClear8) {
HXLINE(  26)									::Dynamic this286 = pixelImage->image;
HXDLIN(  26)									int x31 = (x29 + dx8);
HXDLIN(  26)									int y31 = (y29 + dy8);
HXDLIN(  26)									int index39;
HXDLIN(  26)									if (pixelImage->useVirtualPos) {
HXLINE(  26)										index39 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x31) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  26)										index39 = ::Std_obj::_hx_int(( (Float)(((y31 * pixelImage->width) + x31)) ));
            									}
HXDLIN(  26)									::iterMagic::Iimg_obj::set(this286,index39,0);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  27)		temp = null();
HXLINE(  28)		return pixelImage;
            	}



::hx::ObjectPtr< EllipseForm_obj > EllipseForm_obj::__new( ::Dynamic opacity, ::Dynamic visibility, ::Dynamic strokeColor, ::Dynamic strokeWidth,::Array< ::String > strokeDashGapArray, ::Dynamic fill, ::Dynamic left, ::Dynamic top, ::Dynamic width, ::Dynamic height) {
	::hx::ObjectPtr< EllipseForm_obj > __this = new EllipseForm_obj();
	__this->__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,fill,left,top,width,height);
	return __this;
}

::hx::ObjectPtr< EllipseForm_obj > EllipseForm_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic opacity, ::Dynamic visibility, ::Dynamic strokeColor, ::Dynamic strokeWidth,::Array< ::String > strokeDashGapArray, ::Dynamic fill, ::Dynamic left, ::Dynamic top, ::Dynamic width, ::Dynamic height) {
	EllipseForm_obj *__this = (EllipseForm_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EllipseForm_obj), true, "pi_xy.triangleGML.EllipseForm"));
	*(void **)__this = EllipseForm_obj::_hx_vtable;
	__this->__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,fill,left,top,width,height);
	return __this;
}

EllipseForm_obj::EllipseForm_obj()
{
}

::hx::Val EllipseForm_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *EllipseForm_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *EllipseForm_obj_sStaticStorageInfo = 0;
#endif

static ::String EllipseForm_obj_sMemberFields[] = {
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class EllipseForm_obj::__mClass;

void EllipseForm_obj::__register()
{
	EllipseForm_obj _hx_dummy;
	EllipseForm_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.triangleGML.EllipseForm",ab,a7,27,7a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EllipseForm_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EllipseForm_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EllipseForm_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EllipseForm_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace triangleGML
