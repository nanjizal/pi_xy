// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_BasicShape
#include <pi_xy/triangleGML/triGML/BasicShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_GroupShape
#include <pi_xy/triangleGML/triGML/GroupShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_ShapeInterface
#include <pi_xy/triangleGML/triGML/ShapeInterface.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_shape_contour_LineGridShape_
#include <pi_xy/triangleGML/triGML/shape/contour/LineGridShape_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0f654bc9587cb7c6_25_new,"pi_xy.triangleGML.triGML.shape.contour.LineGridShape_","new",0xab667ea7,"pi_xy.triangleGML.triGML.shape.contour.LineGridShape_.new","pi_xy/triangleGML/triGML/shape/contour/LineGridShape_.hx",25,0x1a351188)
HX_LOCAL_STACK_FRAME(_hx_pos_0f654bc9587cb7c6_35_setParameter,"pi_xy.triangleGML.triGML.shape.contour.LineGridShape_","setParameter",0xc1cec680,"pi_xy.triangleGML.triGML.shape.contour.LineGridShape_.setParameter","pi_xy/triangleGML/triGML/shape/contour/LineGridShape_.hx",35,0x1a351188)
namespace pi_xy{
namespace triangleGML{
namespace triGML{
namespace shape{
namespace contour{

void LineGridShape__obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< Float >  __o_left,::hx::Null< Float >  __o_top,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height,::hx::Null< Float >  __o_delta,::hx::Null< Float >  __o_deltaH){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(-1048576);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            		Float left = __o_left.Default(((Float)0.));
            		Float top = __o_top.Default(((Float)0.));
            		Float width = __o_width.Default(((Float)1.));
            		Float height = __o_height.Default(((Float)1.));
            		Float delta = __o_delta.Default(((Float)1.));
            		Float deltaH = __o_deltaH.Default(((Float)0.));
            	HX_STACKFRAME(&_hx_pos_0f654bc9587cb7c6_25_new)
HXLINE(  26)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray);
HXLINE(  27)		this->left = left;
HXLINE(  28)		this->top = top;
HXLINE(  29)		this->width = width;
HXLINE(  30)		this->height = height;
HXLINE(  31)		this->delta = delta;
HXLINE(  32)		this->deltaH = deltaH;
            	}

bool LineGridShape__obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1d577963) {
		if (inClassId<=(int)0x1a0bd5c0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1a0bd5c0;
		} else {
			return inClassId==(int)0x1d577963;
		}
	} else {
		return inClassId==(int)0x7ff8cec5;
	}
}

void LineGridShape__obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_0f654bc9587cb7c6_35_setParameter)
HXDLIN(  35)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("delta",f8,e7,26,d7)) ){
HXLINE(  45)			this->delta = ::Std_obj::parseFloat(value);
HXDLIN(  45)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("deltaH",50,11,e4,6a)) ){
HXLINE(  47)			this->deltaH = ::Std_obj::parseFloat(value);
HXDLIN(  47)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(  43)			this->height = ::Std_obj::parseFloat(value);
HXDLIN(  43)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(  37)			this->left = ::Std_obj::parseFloat(value);
HXDLIN(  37)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(  39)			this->top = ::Std_obj::parseFloat(value);
HXDLIN(  39)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(  41)			this->width = ::Std_obj::parseFloat(value);
HXDLIN(  41)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  49)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}



LineGridShape__obj::LineGridShape__obj()
{
}

::hx::Val LineGridShape__obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { return ::hx::Val( top ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"delta") ) { return ::hx::Val( delta ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"deltaH") ) { return ::hx::Val( deltaH ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LineGridShape__obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { top=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"delta") ) { delta=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"deltaH") ) { deltaH=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LineGridShape__obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("delta",f8,e7,26,d7));
	outFields->push(HX_("deltaH",50,11,e4,6a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LineGridShape__obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(LineGridShape__obj,left),HX_("left",07,08,b0,47)},
	{::hx::fsFloat,(int)offsetof(LineGridShape__obj,top),HX_("top",95,66,58,00)},
	{::hx::fsFloat,(int)offsetof(LineGridShape__obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsFloat,(int)offsetof(LineGridShape__obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsFloat,(int)offsetof(LineGridShape__obj,delta),HX_("delta",f8,e7,26,d7)},
	{::hx::fsFloat,(int)offsetof(LineGridShape__obj,deltaH),HX_("deltaH",50,11,e4,6a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LineGridShape__obj_sStaticStorageInfo = 0;
#endif

static ::String LineGridShape__obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("top",95,66,58,00),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("delta",f8,e7,26,d7),
	HX_("deltaH",50,11,e4,6a),
	HX_("setParameter",a7,f5,ff,6c),
	::String(null()) };

::hx::Class LineGridShape__obj::__mClass;

void LineGridShape__obj::__register()
{
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.triangleGML.triGML.shape.contour.LineGridShape_",35,9f,32,d1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LineGridShape__obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LineGridShape__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LineGridShape__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LineGridShape__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace triangleGML
} // end namespace triGML
} // end namespace shape
} // end namespace contour
