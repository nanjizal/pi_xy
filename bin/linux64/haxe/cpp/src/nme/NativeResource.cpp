// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_nme_NativeResource
#include <nme/NativeResource.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_102_setAutoClearHandler,"nme.NativeResource","setAutoClearHandler",0xa9295e6d,"nme.NativeResource.setAutoClearHandler","nme/NativeResource.hx",102,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_103_setWriteOnlyHandler,"nme.NativeResource","setWriteOnlyHandler",0x8d4327c0,"nme.NativeResource.setWriteOnlyHandler","nme/NativeResource.hx",103,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_104_lockHandler,"nme.NativeResource","lockHandler",0xab6172fe,"nme.NativeResource.lockHandler","nme/NativeResource.hx",104,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_105_unlockHandler,"nme.NativeResource","unlockHandler",0x5a2fdf05,"nme.NativeResource.unlockHandler","nme/NativeResource.hx",105,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_107_setAutoClear,"nme.NativeResource","setAutoClear",0xc0ddbedd,"nme.NativeResource.setAutoClear","nme/NativeResource.hx",107,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_108_setWriteOnly,"nme.NativeResource","setWriteOnly",0xecdd892a,"nme.NativeResource.setWriteOnly","nme/NativeResource.hx",108,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_109_lock,"nme.NativeResource","lock",0xd77d422c,"nme.NativeResource.lock","nme/NativeResource.hx",109,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_110_unlock,"nme.NativeResource","unlock",0xaeb91b45,"nme.NativeResource.unlock","nme/NativeResource.hx",110,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_111_releaseTempRefs,"nme.NativeResource","releaseTempRefs",0x66fb293a,"nme.NativeResource.releaseTempRefs","nme/NativeResource.hx",111,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_116_disposeHandler,"nme.NativeResource","disposeHandler",0x22c99a6c,"nme.NativeResource.disposeHandler","nme/NativeResource.hx",116,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_122_dispose,"nme.NativeResource","dispose",0x790978fe,"nme.NativeResource.dispose","nme/NativeResource.hx",122,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_20_boot,"nme.NativeResource","boot",0xd0e12a73,"nme.NativeResource.boot","nme/NativeResource.hx",20,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_02974b12e16d2e66_21_boot,"nme.NativeResource","boot",0xd0e12a73,"nme.NativeResource.boot","nme/NativeResource.hx",21,0xae682df0)
HX_LOCAL_STACK_FRAME(_hx_pos_6337c3c7c1c65019_9_boot,"nme.NativeResource","boot",0xd0e12a73,"nme.NativeResource.boot","nme/PrimeLoader.hx",9,0xcf416155)
namespace nme{

void NativeResource_obj::__construct() { }

Dynamic NativeResource_obj::__CreateEmpty() { return new NativeResource_obj; }

void *NativeResource_obj::_hx_vtable = 0;

Dynamic NativeResource_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NativeResource_obj > _hx_result = new NativeResource_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool NativeResource_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2c85b0eb;
}

int NativeResource_obj::AUTO_CLEAR;

int NativeResource_obj::WRITE_ONLY;

void NativeResource_obj::setAutoClearHandler( ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_102_setAutoClearHandler)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeResource_obj,setAutoClearHandler,(void))

void NativeResource_obj::setWriteOnlyHandler( ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_103_setWriteOnlyHandler)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeResource_obj,setWriteOnlyHandler,(void))

void NativeResource_obj::lockHandler( ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_104_lockHandler)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeResource_obj,lockHandler,(void))

void NativeResource_obj::unlockHandler( ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_105_unlockHandler)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeResource_obj,unlockHandler,(void))

void NativeResource_obj::setAutoClear( ::Dynamic handle){
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_107_setAutoClear)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeResource_obj,setAutoClear,(void))

void NativeResource_obj::setWriteOnly( ::Dynamic handle){
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_108_setWriteOnly)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeResource_obj,setWriteOnly,(void))

void NativeResource_obj::lock( ::Dynamic handle){
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_109_lock)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeResource_obj,lock,(void))

void NativeResource_obj::unlock( ::Dynamic handle){
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_110_unlock)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeResource_obj,unlock,(void))

void NativeResource_obj::releaseTempRefs(){
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_111_releaseTempRefs)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(NativeResource_obj,releaseTempRefs,(void))

void NativeResource_obj::disposeHandler( ::Dynamic handler){
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_116_disposeHandler)
HXDLIN( 116)		if (::hx::IsNotNull( handler->__Field(HX_("nmeHandle",8e,87,bf,52),::hx::paccDynamic) )) {
HXLINE( 118)			::nme::NativeResource_obj::nme_native_resource_dispose(::hx::DynamicPtr(handler->__Field(HX_("nmeHandle",8e,87,bf,52),::hx::paccDynamic)));
HXLINE( 119)			handler->__SetField(HX_("nmeHandle",8e,87,bf,52),null(),::hx::paccDynamic);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeResource_obj,disposeHandler,(void))

 ::Dynamic NativeResource_obj::dispose( ::Dynamic handle){
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_122_dispose)
HXLINE( 123)		if (::hx::IsNotNull( handle )) {
HXLINE( 124)			::nme::NativeResource_obj::nme_native_resource_dispose(::hx::DynamicPtr(handle));
            		}
HXLINE( 125)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(NativeResource_obj,dispose,return )

::cpp::Function< void  ( ::hx::Object *) > NativeResource_obj::nme_native_resource_dispose;


NativeResource_obj::NativeResource_obj()
{
}

bool NativeResource_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"lock") ) { outValue = lock_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"unlock") ) { outValue = unlock_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"dispose") ) { outValue = dispose_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lockHandler") ) { outValue = lockHandler_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setAutoClear") ) { outValue = setAutoClear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setWriteOnly") ) { outValue = setWriteOnly_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"unlockHandler") ) { outValue = unlockHandler_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"disposeHandler") ) { outValue = disposeHandler_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"releaseTempRefs") ) { outValue = releaseTempRefs_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setAutoClearHandler") ) { outValue = setAutoClearHandler_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setWriteOnlyHandler") ) { outValue = setWriteOnlyHandler_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_native_resource_dispose") ) { outValue = ( nme_native_resource_dispose ); return true; }
	}
	return false;
}

bool NativeResource_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 27:
		if (HX_FIELD_EQ(inName,"nme_native_resource_dispose") ) { nme_native_resource_dispose=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *) > >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *NativeResource_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo NativeResource_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &NativeResource_obj::AUTO_CLEAR,HX_("AUTO_CLEAR",5d,55,ee,38)},
	{::hx::fsInt,(void *) &NativeResource_obj::WRITE_ONLY,HX_("WRITE_ONLY",2c,30,34,5d)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *) > */ ,(void *) &NativeResource_obj::nme_native_resource_dispose,HX_("nme_native_resource_dispose",9d,c4,73,64)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void NativeResource_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NativeResource_obj::AUTO_CLEAR,"AUTO_CLEAR");
	HX_MARK_MEMBER_NAME(NativeResource_obj::WRITE_ONLY,"WRITE_ONLY");
	HX_MARK_MEMBER_NAME(NativeResource_obj::nme_native_resource_dispose,"nme_native_resource_dispose");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NativeResource_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NativeResource_obj::AUTO_CLEAR,"AUTO_CLEAR");
	HX_VISIT_MEMBER_NAME(NativeResource_obj::WRITE_ONLY,"WRITE_ONLY");
	HX_VISIT_MEMBER_NAME(NativeResource_obj::nme_native_resource_dispose,"nme_native_resource_dispose");
};

#endif

::hx::Class NativeResource_obj::__mClass;

static ::String NativeResource_obj_sStaticFields[] = {
	HX_("AUTO_CLEAR",5d,55,ee,38),
	HX_("WRITE_ONLY",2c,30,34,5d),
	HX_("setAutoClearHandler",8e,d3,69,e5),
	HX_("setWriteOnlyHandler",e1,9c,83,c9),
	HX_("lockHandler",1f,5f,b7,4c),
	HX_("unlockHandler",66,d5,f1,6d),
	HX_("setAutoClear",9c,6f,b6,4a),
	HX_("setWriteOnly",e9,39,b6,76),
	HX_("lock",eb,9b,b7,47),
	HX_("unlock",c4,a2,8c,65),
	HX_("releaseTempRefs",db,39,f0,67),
	HX_("disposeHandler",eb,38,bf,58),
	HX_("dispose",9f,80,4c,bb),
	HX_("nme_native_resource_dispose",9d,c4,73,64),
	::String(null())
};

void NativeResource_obj::__register()
{
	NativeResource_obj _hx_dummy;
	NativeResource_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.NativeResource",cd,61,92,30);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &NativeResource_obj::__GetStatic;
	__mClass->mSetStaticField = &NativeResource_obj::__SetStatic;
	__mClass->mMarkFunc = NativeResource_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(NativeResource_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< NativeResource_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NativeResource_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NativeResource_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NativeResource_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NativeResource_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_20_boot)
HXDLIN(  20)		AUTO_CLEAR = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_02974b12e16d2e66_21_boot)
HXDLIN(  21)		WRITE_ONLY = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_6337c3c7c1c65019_9_boot)
HXDLIN(   9)		nme_native_resource_dispose = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_native_resource_dispose",9d,c4,73,64),HX_("ov",27,61,00,00),false);
            	}
}

} // end namespace nme
