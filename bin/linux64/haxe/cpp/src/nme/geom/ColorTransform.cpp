// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nme_geom_ColorTransform
#include <nme/geom/ColorTransform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_66a962d348c8519b_18_new,"nme.geom.ColorTransform","new",0xc43d1e65,"nme.geom.ColorTransform.new","nme/geom/ColorTransform.hx",18,0x6a242c4b)
HX_LOCAL_STACK_FRAME(_hx_pos_66a962d348c8519b_30_concat,"nme.geom.ColorTransform","concat",0x2d798c2f,"nme.geom.ColorTransform.concat","nme/geom/ColorTransform.hx",30,0x6a242c4b)
HX_LOCAL_STACK_FRAME(_hx_pos_66a962d348c8519b_40_get_color,"nme.geom.ColorTransform","get_color",0x00c8ed7f,"nme.geom.ColorTransform.get_color","nme/geom/ColorTransform.hx",40,0x6a242c4b)
HX_LOCAL_STACK_FRAME(_hx_pos_66a962d348c8519b_44_set_color,"nme.geom.ColorTransform","set_color",0xe419d98b,"nme.geom.ColorTransform.set_color","nme/geom/ColorTransform.hx",44,0x6a242c4b)
namespace nme{
namespace geom{

void ColorTransform_obj::__construct(::hx::Null< Float >  __o_inRedMultiplier,::hx::Null< Float >  __o_inGreenMultiplier,::hx::Null< Float >  __o_inBlueMultiplier,::hx::Null< Float >  __o_inAlphaMultiplier,::hx::Null< Float >  __o_inRedOffset,::hx::Null< Float >  __o_inGreenOffset,::hx::Null< Float >  __o_inBlueOffset,::hx::Null< Float >  __o_inAlphaOffset){
            		Float inRedMultiplier = __o_inRedMultiplier.Default(((Float)1.0));
            		Float inGreenMultiplier = __o_inGreenMultiplier.Default(((Float)1.0));
            		Float inBlueMultiplier = __o_inBlueMultiplier.Default(((Float)1.0));
            		Float inAlphaMultiplier = __o_inAlphaMultiplier.Default(((Float)1.0));
            		Float inRedOffset = __o_inRedOffset.Default(((Float)0.0));
            		Float inGreenOffset = __o_inGreenOffset.Default(((Float)0.0));
            		Float inBlueOffset = __o_inBlueOffset.Default(((Float)0.0));
            		Float inAlphaOffset = __o_inAlphaOffset.Default(((Float)0.0));
            	HX_STACKFRAME(&_hx_pos_66a962d348c8519b_18_new)
HXLINE(  19)		this->redMultiplier = inRedMultiplier;
HXLINE(  20)		this->greenMultiplier = inGreenMultiplier;
HXLINE(  21)		this->blueMultiplier = inBlueMultiplier;
HXLINE(  22)		this->alphaMultiplier = inAlphaMultiplier;
HXLINE(  23)		this->redOffset = inRedOffset;
HXLINE(  24)		this->greenOffset = inGreenOffset;
HXLINE(  25)		this->blueOffset = inBlueOffset;
HXLINE(  26)		this->alphaOffset = inAlphaOffset;
            	}

Dynamic ColorTransform_obj::__CreateEmpty() { return new ColorTransform_obj; }

void *ColorTransform_obj::_hx_vtable = 0;

Dynamic ColorTransform_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ColorTransform_obj > _hx_result = new ColorTransform_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7]);
	return _hx_result;
}

bool ColorTransform_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6f8cbd23;
}

void ColorTransform_obj::concat( ::nme::geom::ColorTransform second){
            	HX_STACKFRAME(&_hx_pos_66a962d348c8519b_30_concat)
HXLINE(  31)		 ::nme::geom::ColorTransform _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  31)		_hx_tmp->redMultiplier = (_hx_tmp->redMultiplier + second->redMultiplier);
HXLINE(  32)		 ::nme::geom::ColorTransform _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  32)		_hx_tmp1->greenMultiplier = (_hx_tmp1->greenMultiplier + second->greenMultiplier);
HXLINE(  33)		 ::nme::geom::ColorTransform _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  33)		_hx_tmp2->blueMultiplier = (_hx_tmp2->blueMultiplier + second->blueMultiplier);
HXLINE(  34)		 ::nme::geom::ColorTransform _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  34)		_hx_tmp3->alphaMultiplier = (_hx_tmp3->alphaMultiplier + second->alphaMultiplier);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorTransform_obj,concat,(void))

int ColorTransform_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_66a962d348c8519b_40_get_color)
HXDLIN(  40)		int _hx_tmp = (::Std_obj::_hx_int(this->redOffset) << 16);
HXDLIN(  40)		int _hx_tmp1 = (_hx_tmp | (::Std_obj::_hx_int(this->greenOffset) << 8));
HXDLIN(  40)		return (_hx_tmp1 | ::Std_obj::_hx_int(this->blueOffset));
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColorTransform_obj,get_color,return )

int ColorTransform_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_66a962d348c8519b_44_set_color)
HXLINE(  45)		this->redOffset = ( (Float)(((value >> 16) & 255)) );
HXLINE(  46)		this->greenOffset = ( (Float)(((value >> 8) & 255)) );
HXLINE(  47)		this->blueOffset = ( (Float)((value & 255)) );
HXLINE(  49)		this->redMultiplier = ( (Float)(0) );
HXLINE(  50)		this->greenMultiplier = ( (Float)(0) );
HXLINE(  51)		this->blueMultiplier = ( (Float)(0) );
HXLINE(  53)		return this->get_color();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColorTransform_obj,set_color,return )


::hx::ObjectPtr< ColorTransform_obj > ColorTransform_obj::__new(::hx::Null< Float >  __o_inRedMultiplier,::hx::Null< Float >  __o_inGreenMultiplier,::hx::Null< Float >  __o_inBlueMultiplier,::hx::Null< Float >  __o_inAlphaMultiplier,::hx::Null< Float >  __o_inRedOffset,::hx::Null< Float >  __o_inGreenOffset,::hx::Null< Float >  __o_inBlueOffset,::hx::Null< Float >  __o_inAlphaOffset) {
	::hx::ObjectPtr< ColorTransform_obj > __this = new ColorTransform_obj();
	__this->__construct(__o_inRedMultiplier,__o_inGreenMultiplier,__o_inBlueMultiplier,__o_inAlphaMultiplier,__o_inRedOffset,__o_inGreenOffset,__o_inBlueOffset,__o_inAlphaOffset);
	return __this;
}

::hx::ObjectPtr< ColorTransform_obj > ColorTransform_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_inRedMultiplier,::hx::Null< Float >  __o_inGreenMultiplier,::hx::Null< Float >  __o_inBlueMultiplier,::hx::Null< Float >  __o_inAlphaMultiplier,::hx::Null< Float >  __o_inRedOffset,::hx::Null< Float >  __o_inGreenOffset,::hx::Null< Float >  __o_inBlueOffset,::hx::Null< Float >  __o_inAlphaOffset) {
	ColorTransform_obj *__this = (ColorTransform_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ColorTransform_obj), false, "nme.geom.ColorTransform"));
	*(void **)__this = ColorTransform_obj::_hx_vtable;
	__this->__construct(__o_inRedMultiplier,__o_inGreenMultiplier,__o_inBlueMultiplier,__o_inAlphaMultiplier,__o_inRedOffset,__o_inGreenOffset,__o_inBlueOffset,__o_inAlphaOffset);
	return __this;
}

ColorTransform_obj::ColorTransform_obj()
{
}

::hx::Val ColorTransform_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_color() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"concat") ) { return ::hx::Val( concat_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"redOffset") ) { return ::hx::Val( redOffset ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return ::hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return ::hx::Val( set_color_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"blueOffset") ) { return ::hx::Val( blueOffset ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"alphaOffset") ) { return ::hx::Val( alphaOffset ); }
		if (HX_FIELD_EQ(inName,"greenOffset") ) { return ::hx::Val( greenOffset ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"redMultiplier") ) { return ::hx::Val( redMultiplier ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"blueMultiplier") ) { return ::hx::Val( blueMultiplier ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"alphaMultiplier") ) { return ::hx::Val( alphaMultiplier ); }
		if (HX_FIELD_EQ(inName,"greenMultiplier") ) { return ::hx::Val( greenMultiplier ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ColorTransform_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_color(inValue.Cast< int >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"redOffset") ) { redOffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"blueOffset") ) { blueOffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"alphaOffset") ) { alphaOffset=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"greenOffset") ) { greenOffset=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"redMultiplier") ) { redMultiplier=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"blueMultiplier") ) { blueMultiplier=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"alphaMultiplier") ) { alphaMultiplier=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"greenMultiplier") ) { greenMultiplier=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ColorTransform_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("alphaMultiplier",7f,b4,82,9a));
	outFields->push(HX_("alphaOffset",91,8d,43,d0));
	outFields->push(HX_("blueMultiplier",bb,32,96,cf));
	outFields->push(HX_("blueOffset",cd,3d,34,bb));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("greenMultiplier",24,2c,40,6f));
	outFields->push(HX_("greenOffset",b6,0e,d9,b7));
	outFields->push(HX_("redMultiplier",32,f4,e9,4e));
	outFields->push(HX_("redOffset",c4,37,9e,53));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ColorTransform_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(ColorTransform_obj,alphaMultiplier),HX_("alphaMultiplier",7f,b4,82,9a)},
	{::hx::fsFloat,(int)offsetof(ColorTransform_obj,alphaOffset),HX_("alphaOffset",91,8d,43,d0)},
	{::hx::fsFloat,(int)offsetof(ColorTransform_obj,blueMultiplier),HX_("blueMultiplier",bb,32,96,cf)},
	{::hx::fsFloat,(int)offsetof(ColorTransform_obj,blueOffset),HX_("blueOffset",cd,3d,34,bb)},
	{::hx::fsFloat,(int)offsetof(ColorTransform_obj,greenMultiplier),HX_("greenMultiplier",24,2c,40,6f)},
	{::hx::fsFloat,(int)offsetof(ColorTransform_obj,greenOffset),HX_("greenOffset",b6,0e,d9,b7)},
	{::hx::fsFloat,(int)offsetof(ColorTransform_obj,redMultiplier),HX_("redMultiplier",32,f4,e9,4e)},
	{::hx::fsFloat,(int)offsetof(ColorTransform_obj,redOffset),HX_("redOffset",c4,37,9e,53)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ColorTransform_obj_sStaticStorageInfo = 0;
#endif

static ::String ColorTransform_obj_sMemberFields[] = {
	HX_("alphaMultiplier",7f,b4,82,9a),
	HX_("alphaOffset",91,8d,43,d0),
	HX_("blueMultiplier",bb,32,96,cf),
	HX_("blueOffset",cd,3d,34,bb),
	HX_("greenMultiplier",24,2c,40,6f),
	HX_("greenOffset",b6,0e,d9,b7),
	HX_("redMultiplier",32,f4,e9,4e),
	HX_("redOffset",c4,37,9e,53),
	HX_("concat",14,09,d0,c7),
	HX_("get_color",ba,cd,05,8e),
	HX_("set_color",c6,b9,56,71),
	::String(null()) };

::hx::Class ColorTransform_obj::__mClass;

void ColorTransform_obj::__register()
{
	ColorTransform_obj _hx_dummy;
	ColorTransform_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.geom.ColorTransform",f3,07,93,27);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ColorTransform_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ColorTransform_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColorTransform_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColorTransform_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace geom
