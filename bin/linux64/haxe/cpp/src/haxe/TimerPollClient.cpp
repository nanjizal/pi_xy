// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_TimerPollClient
#include <haxe/TimerPollClient.h>
#endif
#ifndef INCLUDED_nme_app_IPollClient
#include <nme/app/IPollClient.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cfd9e11cc7006e39_101_new,"haxe.TimerPollClient","new",0xb5354e19,"haxe.TimerPollClient.new","haxe/Timer.hx",101,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd9e11cc7006e39_102_onPoll,"haxe.TimerPollClient","onPoll",0xd499a2e5,"haxe.TimerPollClient.onPoll","haxe/Timer.hx",102,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_cfd9e11cc7006e39_104_getNextWake,"haxe.TimerPollClient","getNextWake",0x6f4e2426,"haxe.TimerPollClient.getNextWake","haxe/Timer.hx",104,0x1a690682)
namespace haxe{

void TimerPollClient_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_cfd9e11cc7006e39_101_new)
            	}

Dynamic TimerPollClient_obj::__CreateEmpty() { return new TimerPollClient_obj; }

void *TimerPollClient_obj::_hx_vtable = 0;

Dynamic TimerPollClient_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TimerPollClient_obj > _hx_result = new TimerPollClient_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TimerPollClient_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x26138589;
}

static ::nme::app::IPollClient_obj _hx_haxe_TimerPollClient__hx_nme_app_IPollClient= {
	( void (::hx::Object::*)(Float))&::haxe::TimerPollClient_obj::onPoll,
	( Float (::hx::Object::*)(Float,Float))&::haxe::TimerPollClient_obj::getNextWake,
};

void *TimerPollClient_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x83491b18: return &_hx_haxe_TimerPollClient__hx_nme_app_IPollClient;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void TimerPollClient_obj::onPoll(Float timestamp){
            	HX_STACKFRAME(&_hx_pos_cfd9e11cc7006e39_102_onPoll)
HXDLIN( 102)		::haxe::Timer_obj::nmeCheckTimers(timestamp);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TimerPollClient_obj,onPoll,(void))

Float TimerPollClient_obj::getNextWake(Float defaultWake,Float timestamp){
            	HX_STACKFRAME(&_hx_pos_cfd9e11cc7006e39_104_getNextWake)
HXDLIN( 104)		return ::haxe::Timer_obj::nmeGetNextWake(defaultWake,timestamp);
            	}


HX_DEFINE_DYNAMIC_FUNC2(TimerPollClient_obj,getNextWake,return )


::hx::ObjectPtr< TimerPollClient_obj > TimerPollClient_obj::__new() {
	::hx::ObjectPtr< TimerPollClient_obj > __this = new TimerPollClient_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< TimerPollClient_obj > TimerPollClient_obj::__alloc(::hx::Ctx *_hx_ctx) {
	TimerPollClient_obj *__this = (TimerPollClient_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TimerPollClient_obj), false, "haxe.TimerPollClient"));
	*(void **)__this = TimerPollClient_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

TimerPollClient_obj::TimerPollClient_obj()
{
}

::hx::Val TimerPollClient_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"onPoll") ) { return ::hx::Val( onPoll_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getNextWake") ) { return ::hx::Val( getNextWake_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TimerPollClient_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *TimerPollClient_obj_sStaticStorageInfo = 0;
#endif

static ::String TimerPollClient_obj_sMemberFields[] = {
	HX_("onPoll",fe,86,e6,ec),
	HX_("getNextWake",6d,c5,b2,20),
	::String(null()) };

::hx::Class TimerPollClient_obj::__mClass;

void TimerPollClient_obj::__register()
{
	TimerPollClient_obj _hx_dummy;
	TimerPollClient_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.TimerPollClient",a7,4d,e4,d1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TimerPollClient_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TimerPollClient_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TimerPollClient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TimerPollClient_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
