// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_display_FrameLabel
#define INCLUDED_nme_display_FrameLabel

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
HX_DECLARE_CLASS2(nme,display,FrameLabel)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)

namespace nme{
namespace display{


class HXCPP_CLASS_ATTRIBUTES FrameLabel_obj : public  ::nme::events::EventDispatcher_obj
{
	public:
		typedef  ::nme::events::EventDispatcher_obj super;
		typedef FrameLabel_obj OBJ_;
		FrameLabel_obj();

	public:
		enum { _hx_ClassId = 0x21f8cdcf };

		void __construct(::String inName,int inFrame);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.display.FrameLabel")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.display.FrameLabel"); }
		static ::hx::ObjectPtr< FrameLabel_obj > __new(::String inName,int inFrame);
		static ::hx::ObjectPtr< FrameLabel_obj > __alloc(::hx::Ctx *_hx_ctx,::String inName,int inFrame);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FrameLabel_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FrameLabel",a7,46,86,49); }

		int frame;
		::String name;
};

} // end namespace nme
} // end namespace display

#endif /* INCLUDED_nme_display_FrameLabel */ 
