// Generated by Haxe 4.3.3
#ifndef INCLUDED_pi_xy_algo__TriPixel_TriPixel_Fields_
#define INCLUDED_pi_xy_algo__TriPixel_TriPixel_Fields_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(pi_xy,ImageStruct)
HX_DECLARE_CLASS2(pi_xy,algo,HitTri)
HX_DECLARE_CLASS2(pi_xy,algo,IhitObj)
HX_DECLARE_CLASS2(pi_xy,algo,RectangleWindow)
HX_DECLARE_CLASS2(pi_xy,algo,TriPoints_)
HX_DECLARE_CLASS3(pi_xy,algo,_TriPixel,TriPixel_Fields_)

namespace pi_xy{
namespace algo{
namespace _TriPixel{


class HXCPP_CLASS_ATTRIBUTES TriPixel_Fields__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TriPixel_Fields__obj OBJ_;
		TriPixel_Fields__obj();

	public:
		enum { _hx_ClassId = 0x6be89ee2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pi_xy.algo._TriPixel.TriPixel_Fields_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pi_xy.algo._TriPixel.TriPixel_Fields_"); }

		inline static ::hx::ObjectPtr< TriPixel_Fields__obj > __new() {
			::hx::ObjectPtr< TriPixel_Fields__obj > __this = new TriPixel_Fields__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< TriPixel_Fields__obj > __alloc(::hx::Ctx *_hx_ctx) {
			TriPixel_Fields__obj *__this = (TriPixel_Fields__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TriPixel_Fields__obj), false, "pi_xy.algo._TriPixel.TriPixel_Fields_"));
			*(void **)__this = TriPixel_Fields__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TriPixel_Fields__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TriPixel_Fields_",a2,7d,50,97); }

		static  ::pi_xy::algo::HitTri fillTriangle( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic fillTriangle_dyn();

		static  ::pi_xy::algo::HitTri fillTriUnsafe( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic fillTriUnsafe_dyn();

		static  ::pi_xy::algo::HitTri fillTriangle2( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,::hx::Null< bool >  hasHit);
		static ::Dynamic fillTriangle2_dyn();

		static  ::pi_xy::algo::HitTri fillTriUnsafe2( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic fillTriUnsafe2_dyn();

		static  ::pi_xy::algo::HitTri tileTriangle( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy, ::pi_xy::ImageStruct tileImage,::hx::Null< bool >  hasHit);
		static ::Dynamic tileTriangle_dyn();

		static  ::pi_xy::algo::HitTri tileTriUnsafe( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy, ::pi_xy::ImageStruct tileImage,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic tileTriUnsafe_dyn();

		static  ::pi_xy::algo::HitTri fillGradTriangle( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,int colA,Float bx,Float by,int colB,Float cx,Float cy,int colC,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic fillGradTriangle_dyn();

		static  ::pi_xy::algo::HitTri topRightImgTriFudge( ::pi_xy::ImageStruct pixelImage, ::pi_xy::ImageStruct texture, ::pi_xy::algo::RectangleWindow win,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic topRightImgTriFudge_dyn();

		static  ::pi_xy::algo::HitTri bottomLeftImgTriFudge( ::pi_xy::ImageStruct pixelImage, ::pi_xy::ImageStruct texture, ::pi_xy::algo::RectangleWindow win,Float dx,Float dy,Float cx,Float cy,Float ax,Float ay,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic bottomLeftImgTriFudge_dyn();

		static  ::pi_xy::algo::HitTri uvTriangleFudge( ::pi_xy::ImageStruct pixelImage, ::pi_xy::ImageStruct texture, ::pi_xy::algo::RectangleWindow win,Float ax,Float ay,Float au,Float av,Float bx,Float by,Float bu,Float bv,Float cx,Float cy,Float cu,Float cv,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic uvTriangleFudge_dyn();

		static  ::pi_xy::algo::HitTri topLeftImgTri( ::pi_xy::ImageStruct pixelImage, ::pi_xy::ImageStruct texture, ::pi_xy::algo::RectangleWindow win,Float ax,Float ay,Float bx,Float by,Float dx,Float dy,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic topLeftImgTri_dyn();

		static  ::pi_xy::algo::HitTri bottomRightImgTri( ::pi_xy::ImageStruct pixelImage, ::pi_xy::ImageStruct texture, ::pi_xy::algo::RectangleWindow win,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic bottomRightImgTri_dyn();

		static  ::pi_xy::algo::HitTri uvTriangle( ::pi_xy::ImageStruct pixelImage, ::pi_xy::ImageStruct texture, ::pi_xy::algo::RectangleWindow win,Float ax,Float ay,Float au,Float av,Float bx,Float by,Float bu,Float bv,Float cx,Float cy,Float cu,Float cv,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic uvTriangle_dyn();

		static  ::pi_xy::algo::HitTri uvTriangleSoft3( ::pi_xy::ImageStruct pixelImage, ::pi_xy::ImageStruct texture, ::pi_xy::algo::RectangleWindow win,Float ax,Float ay,Float au,Float av,Float bx,Float by,Float bu,Float bv,Float cx,Float cy,Float cu,Float cv,Float soft3,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic uvTriangleSoft3_dyn();

		static  ::pi_xy::algo::HitTri fillTriTwoSoft( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,::hx::Null< Float >  softC,::hx::Null< bool >  hasHit);
		static ::Dynamic fillTriTwoSoft_dyn();

		static  ::pi_xy::algo::HitTri fillTriSoftC( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,::hx::Null< Float >  softC,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic fillTriSoftC_dyn();

		static  ::pi_xy::algo::HitTri fillTriSoft3( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,::hx::Null< Float >  soft3,::hx::Null< bool >  softAB,::hx::Null< bool >  softBC,::hx::Null< bool >  softCA,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic fillTriSoft3_dyn();

		static  ::pi_xy::algo::HitTri fillQuarterSoft( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,::hx::Null< Float >  soft3,::hx::Null< bool >  softAB,::hx::Null< bool >  softBC,::hx::Null< bool >  softCA,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic fillQuarterSoft_dyn();

		static  ::pi_xy::algo::HitTri fillTriExtra0( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic fillTriExtra0_dyn();

		static  ::pi_xy::algo::HitTri fillTriExtra1( ::pi_xy::ImageStruct pixelImage,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,int color,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic fillTriExtra1_dyn();

		static  ::pi_xy::algo::HitTri uvTriangleTexture3( ::pi_xy::ImageStruct pixelImage, ::pi_xy::ImageStruct textureA, ::pi_xy::algo::RectangleWindow winA, ::pi_xy::ImageStruct textureB, ::pi_xy::algo::RectangleWindow winB, ::pi_xy::ImageStruct textureC, ::pi_xy::algo::RectangleWindow winC,Float ax,Float ay,Float au,Float av,Float bx,Float by,Float bu,Float bv,Float cx,Float cy,Float cu,Float cv,::hx::Null< bool >  hasHit,::hx::Null< bool >  hasUndo);
		static ::Dynamic uvTriangleTexture3_dyn();

};

} // end namespace pi_xy
} // end namespace algo
} // end namespace _TriPixel

#endif /* INCLUDED_pi_xy_algo__TriPixel_TriPixel_Fields_ */ 
