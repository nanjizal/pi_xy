// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7b7c15dc43d4e902_22_boot,"pi_xy._Endian.Endian_Fields_","boot",0x1d42c103,"pi_xy._Endian.Endian_Fields_.boot","pi_xy/Endian.hx",22,0xbd745c5b)
namespace pi_xy{
namespace _Endian{

void Endian_Fields__obj::__construct() { }

Dynamic Endian_Fields__obj::__CreateEmpty() { return new Endian_Fields__obj; }

void *Endian_Fields__obj::_hx_vtable = 0;

Dynamic Endian_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Endian_Fields__obj > _hx_result = new Endian_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Endian_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x55718c55;
}

bool Endian_Fields__obj::isLittleEndian;


Endian_Fields__obj::Endian_Fields__obj()
{
}

bool Endian_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"isLittleEndian") ) { outValue = ( isLittleEndian ); return true; }
	}
	return false;
}

bool Endian_Fields__obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"isLittleEndian") ) { isLittleEndian=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Endian_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Endian_Fields__obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &Endian_Fields__obj::isLittleEndian,HX_("isLittleEndian",3b,0d,1d,fe)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Endian_Fields__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Endian_Fields__obj::isLittleEndian,"isLittleEndian");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Endian_Fields__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Endian_Fields__obj::isLittleEndian,"isLittleEndian");
};

#endif

::hx::Class Endian_Fields__obj::__mClass;

static ::String Endian_Fields__obj_sStaticFields[] = {
	HX_("isLittleEndian",3b,0d,1d,fe),
	::String(null())
};

void Endian_Fields__obj::__register()
{
	Endian_Fields__obj _hx_dummy;
	Endian_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy._Endian.Endian_Fields_",3d,55,b8,fe);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Endian_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &Endian_Fields__obj::__SetStatic;
	__mClass->mMarkFunc = Endian_Fields__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Endian_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Endian_Fields__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Endian_Fields__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Endian_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Endian_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Endian_Fields__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7b7c15dc43d4e902_22_boot)
HXDLIN(  22)		isLittleEndian = true;
            	}
}

} // end namespace pi_xy
} // end namespace _Endian
