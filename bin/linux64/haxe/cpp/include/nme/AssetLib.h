// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_AssetLib
#define INCLUDED_nme_AssetLib

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS1(nme,AssetLib)
HX_DECLARE_CLASS1(nme,AssetType)
HX_DECLARE_CLASS2(nme,display,BitmapData)
HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,InteractiveObject)
HX_DECLARE_CLASS2(nme,display,MovieClip)
HX_DECLARE_CLASS2(nme,display,Sprite)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,media,Sound)
HX_DECLARE_CLASS2(nme,text,Font)
HX_DECLARE_CLASS2(nme,utils,ByteArray)
HX_DECLARE_CLASS2(nme,utils,IDataInput)
HX_DECLARE_CLASS2(nme,utils,IDataOutput)
HX_DECLARE_CLASS2(nme,utils,IMemoryRange)

namespace nme{


class HXCPP_CLASS_ATTRIBUTES AssetLib_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AssetLib_obj OBJ_;
		AssetLib_obj();

	public:
		enum { _hx_ClassId = 0x78fd3237 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.AssetLib")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.AssetLib"); }
		static ::hx::ObjectPtr< AssetLib_obj > __new();
		static ::hx::ObjectPtr< AssetLib_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AssetLib_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AssetLib",55,2f,5d,a3); }

		 ::Dynamic eventCallback;
		bool exists(::String id, ::nme::AssetType type);
		::Dynamic exists_dyn();

		 ::nme::display::BitmapData getBitmapData(::String id);
		::Dynamic getBitmapData_dyn();

		 ::nme::utils::ByteArray getBytes(::String id);
		::Dynamic getBytes_dyn();

		 ::nme::text::Font getFont(::String id);
		::Dynamic getFont_dyn();

		 ::nme::display::MovieClip getMovieClip(::String id);
		::Dynamic getMovieClip_dyn();

		 ::nme::media::Sound getMusic(::String id);
		::Dynamic getMusic_dyn();

		::String getPath(::String id);
		::Dynamic getPath_dyn();

		 ::nme::media::Sound getSound(::String id);
		::Dynamic getSound_dyn();

		::String getText(::String id);
		::Dynamic getText_dyn();

		bool isLocal(::String id, ::nme::AssetType type);
		::Dynamic isLocal_dyn();

		::Array< ::String > list( ::nme::AssetType type);
		::Dynamic list_dyn();

		void load( ::Dynamic handler);
		::Dynamic load_dyn();

		void loadBitmapData(::String id, ::Dynamic handler);
		::Dynamic loadBitmapData_dyn();

		void loadBytes(::String id, ::Dynamic handler);
		::Dynamic loadBytes_dyn();

		void loadFont(::String id, ::Dynamic handler);
		::Dynamic loadFont_dyn();

		void loadMovieClip(::String id, ::Dynamic handler);
		::Dynamic loadMovieClip_dyn();

		void loadMusic(::String id, ::Dynamic handler);
		::Dynamic loadMusic_dyn();

		void loadSound(::String id, ::Dynamic handler);
		::Dynamic loadSound_dyn();

		void loadText(::String id, ::Dynamic handler);
		::Dynamic loadText_dyn();

		void unload();
		::Dynamic unload_dyn();

};

} // end namespace nme

#endif /* INCLUDED_nme_AssetLib */ 
