// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_NetStatusEvent
#include <nme/events/NetStatusEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_209de25198f967e2_13_new,"nme.events.NetStatusEvent","new",0xb12bb9ca,"nme.events.NetStatusEvent.new","nme/events/NetStatusEvent.hx",13,0x01cf36c6)
HX_LOCAL_STACK_FRAME(_hx_pos_209de25198f967e2_8_boot,"nme.events.NetStatusEvent","boot",0x4d2fd788,"nme.events.NetStatusEvent.boot","nme/events/NetStatusEvent.hx",8,0x01cf36c6)
namespace nme{
namespace events{

void NetStatusEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable, ::Dynamic inInfo){
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            	HX_STACKFRAME(&_hx_pos_209de25198f967e2_13_new)
HXLINE(  14)		super::__construct(type,bubbles,cancelable);
HXLINE(  15)		this->info = inInfo;
            	}

Dynamic NetStatusEvent_obj::__CreateEmpty() { return new NetStatusEvent_obj; }

void *NetStatusEvent_obj::_hx_vtable = 0;

Dynamic NetStatusEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NetStatusEvent_obj > _hx_result = new NetStatusEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool NetStatusEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x07931abe) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x07931abe;
	} else {
		return inClassId==(int)0x113d0d1f;
	}
}

::String NetStatusEvent_obj::NET_STATUS;


::hx::ObjectPtr< NetStatusEvent_obj > NetStatusEvent_obj::__new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable, ::Dynamic inInfo) {
	::hx::ObjectPtr< NetStatusEvent_obj > __this = new NetStatusEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable,inInfo);
	return __this;
}

::hx::ObjectPtr< NetStatusEvent_obj > NetStatusEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable, ::Dynamic inInfo) {
	NetStatusEvent_obj *__this = (NetStatusEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NetStatusEvent_obj), true, "nme.events.NetStatusEvent"));
	*(void **)__this = NetStatusEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable,inInfo);
	return __this;
}

NetStatusEvent_obj::NetStatusEvent_obj()
{
}

void NetStatusEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NetStatusEvent);
	HX_MARK_MEMBER_NAME(info,"info");
	 ::nme::events::Event_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NetStatusEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(info,"info");
	 ::nme::events::Event_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val NetStatusEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { return ::hx::Val( info ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val NetStatusEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { info=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NetStatusEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("info",6e,38,bb,45));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NetStatusEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(NetStatusEvent_obj,info),HX_("info",6e,38,bb,45)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo NetStatusEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &NetStatusEvent_obj::NET_STATUS,HX_("NET_STATUS",34,ea,44,5d)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String NetStatusEvent_obj_sMemberFields[] = {
	HX_("info",6e,38,bb,45),
	::String(null()) };

static void NetStatusEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(NetStatusEvent_obj::NET_STATUS,"NET_STATUS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void NetStatusEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(NetStatusEvent_obj::NET_STATUS,"NET_STATUS");
};

#endif

::hx::Class NetStatusEvent_obj::__mClass;

static ::String NetStatusEvent_obj_sStaticFields[] = {
	HX_("NET_STATUS",34,ea,44,5d),
	::String(null())
};

void NetStatusEvent_obj::__register()
{
	NetStatusEvent_obj _hx_dummy;
	NetStatusEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.NetStatusEvent",d8,cc,8c,bf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = NetStatusEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(NetStatusEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NetStatusEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NetStatusEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = NetStatusEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NetStatusEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NetStatusEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void NetStatusEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_209de25198f967e2_8_boot)
HXDLIN(   8)		NET_STATUS = HX_("netStatus",6f,4f,ec,46);
            	}
}

} // end namespace nme
} // end namespace events
