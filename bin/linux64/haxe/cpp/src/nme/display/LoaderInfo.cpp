// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObjectContainer
#include <nme/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_display_Loader
#include <nme/display/Loader.h>
#endif
#ifndef INCLUDED_nme_display_LoaderInfo
#include <nme/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_nme_display_Sprite
#include <nme/display/Sprite.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_net_URLLoader
#include <nme/net/URLLoader.h>
#endif
#ifndef INCLUDED_nme_net_URLLoaderDataFormat
#include <nme/net/URLLoaderDataFormat.h>
#endif
#ifndef INCLUDED_nme_net_URLRequest
#include <nme/net/URLRequest.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_006c408efda67ce8_32_new,"nme.display.LoaderInfo","new",0x8fd2d487,"nme.display.LoaderInfo.new","nme/display/LoaderInfo.hx",32,0xa29af687)
HX_LOCAL_STACK_FRAME(_hx_pos_006c408efda67ce8_58_load,"nme.display.LoaderInfo","load",0x475c381f,"nme.display.LoaderInfo.load","nme/display/LoaderInfo.hx",58,0xa29af687)
HX_LOCAL_STACK_FRAME(_hx_pos_006c408efda67ce8_86_onURLLoaded,"nme.display.LoaderInfo","onURLLoaded",0x510d6edc,"nme.display.LoaderInfo.onURLLoaded","nme/display/LoaderInfo.hx",86,0xa29af687)
HX_LOCAL_STACK_FRAME(_hx_pos_006c408efda67ce8_92_get_bytes,"nme.display.LoaderInfo","get_bytes",0x65a08029,"nme.display.LoaderInfo.get_bytes","nme/display/LoaderInfo.hx",92,0xa29af687)
HX_LOCAL_STACK_FRAME(_hx_pos_006c408efda67ce8_44_create,"nme.display.LoaderInfo","create",0x24923535,"nme.display.LoaderInfo.create","nme/display/LoaderInfo.hx",44,0xa29af687)
namespace nme{
namespace display{

void LoaderInfo_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_006c408efda67ce8_32_new)
HXLINE(  33)		super::__construct(null());
HXLINE(  35)		this->childAllowsParent = true;
HXLINE(  36)		this->frameRate = ( (Float)(0) );
HXLINE(  37)		this->dataFormat = ::nme::net::URLLoaderDataFormat_obj::BINARY_dyn();
HXLINE(  38)		this->loaderURL = null();
HXLINE(  40)		this->addEventListener(HX_("complete",b9,00,c8,7f),this->onURLLoaded_dyn(),null(),null(),null());
            	}

Dynamic LoaderInfo_obj::__CreateEmpty() { return new LoaderInfo_obj; }

void *LoaderInfo_obj::_hx_vtable = 0;

Dynamic LoaderInfo_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LoaderInfo_obj > _hx_result = new LoaderInfo_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LoaderInfo_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x169017a6) {
		if (inClassId<=(int)0x051a753d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x051a753d;
		} else {
			return inClassId==(int)0x169017a6;
		}
	} else {
		return inClassId==(int)0x58354643;
	}
}

void LoaderInfo_obj::load( ::nme::net::URLRequest request){
            	HX_STACKFRAME(&_hx_pos_006c408efda67ce8_58_load)
HXLINE(  60)		this->pendingURL = request->url;
HXLINE(  61)		int dot = this->pendingURL.lastIndexOf(HX_(".",2e,00,00,00),null());
HXLINE(  62)		::String extension;
HXDLIN(  62)		if ((dot > 0)) {
HXLINE(  62)			extension = this->pendingURL.substr((dot + 1),null()).toLowerCase();
            		}
            		else {
HXLINE(  62)			extension = HX_("",00,00,00,00);
            		}
HXLINE(  64)		bool _hx_tmp;
HXDLIN(  64)		bool _hx_tmp1;
HXDLIN(  64)		if (::hx::IsNotNull( request->contentType )) {
HXLINE(  64)			_hx_tmp1 = (request->contentType.length == 0);
            		}
            		else {
HXLINE(  64)			_hx_tmp1 = true;
            		}
HXDLIN(  64)		if (!(_hx_tmp1)) {
HXLINE(  64)			_hx_tmp = (request->contentType == HX_("application/x-www-form-urlencoded",9e,61,91,fa));
            		}
            		else {
HXLINE(  64)			_hx_tmp = true;
            		}
HXDLIN(  64)		if (_hx_tmp) {
HXLINE(  67)			::String _hx_tmp2;
HXDLIN(  67)			::String _hx_switch_0 = extension;
            			if (  (_hx_switch_0==HX_("gif",04,84,4e,00)) ){
HXLINE(  67)				_hx_tmp2 = HX_("image/gif",10,f4,ba,16);
HXDLIN(  67)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("jpeg",a8,f2,65,46)) ||  (_hx_switch_0==HX_("jpg",e1,d0,50,00)) ){
HXLINE(  67)				_hx_tmp2 = HX_("image/jpeg",1c,8d,db,ce);
HXDLIN(  67)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("png",a9,5c,55,00)) ){
HXLINE(  67)				_hx_tmp2 = HX_("image/png",b5,cc,c1,16);
HXDLIN(  67)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_0==HX_("swf",42,ab,57,00)) ){
HXLINE(  67)				_hx_tmp2 = HX_("application/x-shockwave-flash",ea,f3,47,4a);
HXDLIN(  67)				goto _hx_goto_1;
            			}
            			/* default */{
HXLINE(  74)				HX_STACK_DO_THROW((HX_("Unrecognized file ",93,c5,a4,36) + this->pendingURL));
            			}
            			_hx_goto_1:;
HXLINE(  67)			this->contentType = _hx_tmp2;
            		}
HXLINE(  78)		this->url = null();
HXLINE(  80)		this->super::load(request);
            	}


void LoaderInfo_obj::onURLLoaded( ::nme::events::Event event){
            	HX_STACKFRAME(&_hx_pos_006c408efda67ce8_86_onURLLoaded)
HXDLIN(  86)		this->url = this->pendingURL;
            	}


HX_DEFINE_DYNAMIC_FUNC1(LoaderInfo_obj,onURLLoaded,(void))

 ::nme::utils::ByteArray LoaderInfo_obj::get_bytes(){
            	HX_STACKFRAME(&_hx_pos_006c408efda67ce8_92_get_bytes)
HXDLIN(  92)		return ( ( ::nme::utils::ByteArray)(this->data) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(LoaderInfo_obj,get_bytes,return )

 ::nme::display::LoaderInfo LoaderInfo_obj::create( ::nme::display::Loader ldr){
            	HX_GC_STACKFRAME(&_hx_pos_006c408efda67ce8_44_create)
HXLINE(  45)		 ::nme::display::LoaderInfo li =  ::nme::display::LoaderInfo_obj::__alloc( HX_CTX );
HXLINE(  46)		li->loader = ldr;
HXLINE(  48)		if (::hx::IsNull( ldr )) {
HXLINE(  50)			li->url = HX_("",00,00,00,00);
            		}
HXLINE(  54)		return li;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(LoaderInfo_obj,create,return )


::hx::ObjectPtr< LoaderInfo_obj > LoaderInfo_obj::__new() {
	::hx::ObjectPtr< LoaderInfo_obj > __this = new LoaderInfo_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< LoaderInfo_obj > LoaderInfo_obj::__alloc(::hx::Ctx *_hx_ctx) {
	LoaderInfo_obj *__this = (LoaderInfo_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LoaderInfo_obj), true, "nme.display.LoaderInfo"));
	*(void **)__this = LoaderInfo_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

LoaderInfo_obj::LoaderInfo_obj()
{
}

void LoaderInfo_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(LoaderInfo);
	HX_MARK_MEMBER_NAME(bytes,"bytes");
	HX_MARK_MEMBER_NAME(childAllowsParent,"childAllowsParent");
	HX_MARK_MEMBER_NAME(content,"content");
	HX_MARK_MEMBER_NAME(contentType,"contentType");
	HX_MARK_MEMBER_NAME(frameRate,"frameRate");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(loader,"loader");
	HX_MARK_MEMBER_NAME(loaderURL,"loaderURL");
	HX_MARK_MEMBER_NAME(parameters,"parameters");
	HX_MARK_MEMBER_NAME(parentAllowsChild,"parentAllowsChild");
	HX_MARK_MEMBER_NAME(sameDomain,"sameDomain");
	HX_MARK_MEMBER_NAME(sharedEvents,"sharedEvents");
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(pendingURL,"pendingURL");
	 ::nme::net::URLLoader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void LoaderInfo_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bytes,"bytes");
	HX_VISIT_MEMBER_NAME(childAllowsParent,"childAllowsParent");
	HX_VISIT_MEMBER_NAME(content,"content");
	HX_VISIT_MEMBER_NAME(contentType,"contentType");
	HX_VISIT_MEMBER_NAME(frameRate,"frameRate");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(loader,"loader");
	HX_VISIT_MEMBER_NAME(loaderURL,"loaderURL");
	HX_VISIT_MEMBER_NAME(parameters,"parameters");
	HX_VISIT_MEMBER_NAME(parentAllowsChild,"parentAllowsChild");
	HX_VISIT_MEMBER_NAME(sameDomain,"sameDomain");
	HX_VISIT_MEMBER_NAME(sharedEvents,"sharedEvents");
	HX_VISIT_MEMBER_NAME(url,"url");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(pendingURL,"pendingURL");
	 ::nme::net::URLLoader_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val LoaderInfo_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { return ::hx::Val( url ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"load") ) { return ::hx::Val( load_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_bytes() : bytes ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"loader") ) { return ::hx::Val( loader ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { return ::hx::Val( content ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { return ::hx::Val( frameRate ); }
		if (HX_FIELD_EQ(inName,"loaderURL") ) { return ::hx::Val( loaderURL ); }
		if (HX_FIELD_EQ(inName,"get_bytes") ) { return ::hx::Val( get_bytes_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"parameters") ) { return ::hx::Val( parameters ); }
		if (HX_FIELD_EQ(inName,"sameDomain") ) { return ::hx::Val( sameDomain ); }
		if (HX_FIELD_EQ(inName,"pendingURL") ) { return ::hx::Val( pendingURL ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contentType") ) { return ::hx::Val( contentType ); }
		if (HX_FIELD_EQ(inName,"onURLLoaded") ) { return ::hx::Val( onURLLoaded_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sharedEvents") ) { return ::hx::Val( sharedEvents ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"childAllowsParent") ) { return ::hx::Val( childAllowsParent ); }
		if (HX_FIELD_EQ(inName,"parentAllowsChild") ) { return ::hx::Val( parentAllowsChild ); }
	}
	return super::__Field(inName,inCallProp);
}

bool LoaderInfo_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
	}
	return false;
}

::hx::Val LoaderInfo_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"bytes") ) { bytes=inValue.Cast<  ::nme::utils::ByteArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loader") ) { loader=inValue.Cast<  ::nme::display::Loader >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { content=inValue.Cast<  ::nme::display::DisplayObject >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"frameRate") ) { frameRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loaderURL") ) { loaderURL=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"parameters") ) { parameters=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sameDomain") ) { sameDomain=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pendingURL") ) { pendingURL=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"contentType") ) { contentType=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"sharedEvents") ) { sharedEvents=inValue.Cast<  ::nme::events::EventDispatcher >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"childAllowsParent") ) { childAllowsParent=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"parentAllowsChild") ) { parentAllowsChild=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LoaderInfo_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bytes",6b,08,98,bd));
	outFields->push(HX_("childAllowsParent",50,b0,90,17));
	outFields->push(HX_("content",39,8d,77,19));
	outFields->push(HX_("contentType",93,3c,7b,2a));
	outFields->push(HX_("frameRate",ad,11,25,39));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("loader",13,48,6f,58));
	outFields->push(HX_("loaderURL",1c,8d,1d,fb));
	outFields->push(HX_("parameters",aa,be,7e,51));
	outFields->push(HX_("parentAllowsChild",68,78,d5,78));
	outFields->push(HX_("sameDomain",4a,39,74,73));
	outFields->push(HX_("sharedEvents",9e,2b,5a,49));
	outFields->push(HX_("url",6f,2b,59,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("pendingURL",58,bf,c4,c1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LoaderInfo_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::nme::utils::ByteArray */ ,(int)offsetof(LoaderInfo_obj,bytes),HX_("bytes",6b,08,98,bd)},
	{::hx::fsBool,(int)offsetof(LoaderInfo_obj,childAllowsParent),HX_("childAllowsParent",50,b0,90,17)},
	{::hx::fsObject /*  ::nme::display::DisplayObject */ ,(int)offsetof(LoaderInfo_obj,content),HX_("content",39,8d,77,19)},
	{::hx::fsString,(int)offsetof(LoaderInfo_obj,contentType),HX_("contentType",93,3c,7b,2a)},
	{::hx::fsFloat,(int)offsetof(LoaderInfo_obj,frameRate),HX_("frameRate",ad,11,25,39)},
	{::hx::fsInt,(int)offsetof(LoaderInfo_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::nme::display::Loader */ ,(int)offsetof(LoaderInfo_obj,loader),HX_("loader",13,48,6f,58)},
	{::hx::fsString,(int)offsetof(LoaderInfo_obj,loaderURL),HX_("loaderURL",1c,8d,1d,fb)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(LoaderInfo_obj,parameters),HX_("parameters",aa,be,7e,51)},
	{::hx::fsBool,(int)offsetof(LoaderInfo_obj,parentAllowsChild),HX_("parentAllowsChild",68,78,d5,78)},
	{::hx::fsBool,(int)offsetof(LoaderInfo_obj,sameDomain),HX_("sameDomain",4a,39,74,73)},
	{::hx::fsObject /*  ::nme::events::EventDispatcher */ ,(int)offsetof(LoaderInfo_obj,sharedEvents),HX_("sharedEvents",9e,2b,5a,49)},
	{::hx::fsString,(int)offsetof(LoaderInfo_obj,url),HX_("url",6f,2b,59,00)},
	{::hx::fsInt,(int)offsetof(LoaderInfo_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsString,(int)offsetof(LoaderInfo_obj,pendingURL),HX_("pendingURL",58,bf,c4,c1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LoaderInfo_obj_sStaticStorageInfo = 0;
#endif

static ::String LoaderInfo_obj_sMemberFields[] = {
	HX_("bytes",6b,08,98,bd),
	HX_("childAllowsParent",50,b0,90,17),
	HX_("content",39,8d,77,19),
	HX_("contentType",93,3c,7b,2a),
	HX_("frameRate",ad,11,25,39),
	HX_("height",e7,07,4c,02),
	HX_("loader",13,48,6f,58),
	HX_("loaderURL",1c,8d,1d,fb),
	HX_("parameters",aa,be,7e,51),
	HX_("parentAllowsChild",68,78,d5,78),
	HX_("sameDomain",4a,39,74,73),
	HX_("sharedEvents",9e,2b,5a,49),
	HX_("url",6f,2b,59,00),
	HX_("width",06,b6,62,ca),
	HX_("pendingURL",58,bf,c4,c1),
	HX_("load",26,9a,b7,47),
	HX_("onURLLoaded",b5,6b,23,c2),
	HX_("get_bytes",c2,64,41,01),
	::String(null()) };

::hx::Class LoaderInfo_obj::__mClass;

static ::String LoaderInfo_obj_sStaticFields[] = {
	HX_("create",fc,66,0f,7c),
	::String(null())
};

void LoaderInfo_obj::__register()
{
	LoaderInfo_obj _hx_dummy;
	LoaderInfo_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.display.LoaderInfo",15,85,86,d3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LoaderInfo_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(LoaderInfo_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LoaderInfo_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LoaderInfo_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LoaderInfo_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LoaderInfo_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace display
