// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_KeyboardEvent
#include <nme/events/KeyboardEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bc4e6d43e7152fa8_20_new,"nme.events.KeyboardEvent","new",0xb30cc7d8,"nme.events.KeyboardEvent.new","nme/events/KeyboardEvent.hx",20,0x5cc3acb8)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4e6d43e7152fa8_36_clone,"nme.events.KeyboardEvent","clone",0xd4e2d8d5,"nme.events.KeyboardEvent.clone","nme/events/KeyboardEvent.hx",36,0x5cc3acb8)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4e6d43e7152fa8_41_toString,"nme.events.KeyboardEvent","toString",0xcba9c634,"nme.events.KeyboardEvent.toString","nme/events/KeyboardEvent.hx",41,0x5cc3acb8)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4e6d43e7152fa8_7_boot,"nme.events.KeyboardEvent","boot",0xf03b15ba,"nme.events.KeyboardEvent.boot","nme/events/KeyboardEvent.hx",7,0x5cc3acb8)
HX_LOCAL_STACK_FRAME(_hx_pos_bc4e6d43e7152fa8_8_boot,"nme.events.KeyboardEvent","boot",0xf03b15ba,"nme.events.KeyboardEvent.boot","nme/events/KeyboardEvent.hx",8,0x5cc3acb8)
namespace nme{
namespace events{

void KeyboardEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_charCodeValue,::hx::Null< int >  __o_keyCodeValue,::hx::Null< int >  __o_keyLocationValue,::hx::Null< bool >  __o_ctrlKeyValue,::hx::Null< bool >  __o_altKeyValue,::hx::Null< bool >  __o_shiftKeyValue,::hx::Null< bool >  __o_controlKeyValue,::hx::Null< bool >  __o_commandKeyValue){
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            		int charCodeValue = __o_charCodeValue.Default(0);
            		int keyCodeValue = __o_keyCodeValue.Default(0);
            		int keyLocationValue = __o_keyLocationValue.Default(0);
            		bool ctrlKeyValue = __o_ctrlKeyValue.Default(false);
            		bool altKeyValue = __o_altKeyValue.Default(false);
            		bool shiftKeyValue = __o_shiftKeyValue.Default(false);
            		bool controlKeyValue = __o_controlKeyValue.Default(false);
            		bool commandKeyValue = __o_commandKeyValue.Default(false);
            	HX_STACKFRAME(&_hx_pos_bc4e6d43e7152fa8_20_new)
HXLINE(  21)		super::__construct(type,bubbles,cancelable);
HXLINE(  23)		this->keyCode = keyCodeValue;
HXLINE(  24)		this->keyLocation = keyLocationValue;
HXLINE(  25)		this->charCode = charCodeValue;
HXLINE(  27)		this->shiftKey = shiftKeyValue;
HXLINE(  28)		this->altKey = altKeyValue;
HXLINE(  29)		this->controlKey = controlKeyValue;
HXLINE(  30)		this->commandKey = commandKeyValue;
HXLINE(  31)		bool _hx_tmp;
HXDLIN(  31)		bool _hx_tmp1;
HXDLIN(  31)		if (!(ctrlKeyValue)) {
HXLINE(  31)			_hx_tmp1 = this->controlKey;
            		}
            		else {
HXLINE(  31)			_hx_tmp1 = true;
            		}
HXDLIN(  31)		if (!(_hx_tmp1)) {
HXLINE(  31)			_hx_tmp = this->commandKey;
            		}
            		else {
HXLINE(  31)			_hx_tmp = true;
            		}
HXDLIN(  31)		this->ctrlKey = _hx_tmp;
            	}

Dynamic KeyboardEvent_obj::__CreateEmpty() { return new KeyboardEvent_obj; }

void *KeyboardEvent_obj::_hx_vtable = 0;

Dynamic KeyboardEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyboardEvent_obj > _hx_result = new KeyboardEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool KeyboardEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x113d0d1f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x113d0d1f;
	} else {
		return inClassId==(int)0x4d148ff8;
	}
}

 ::nme::events::Event KeyboardEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_bc4e6d43e7152fa8_36_clone)
HXDLIN(  36)		::String _hx_tmp = this->get_type();
HXDLIN(  36)		bool _hx_tmp1 = this->get_bubbles();
HXDLIN(  36)		bool _hx_tmp2 = this->get_cancelable();
HXDLIN(  36)		return  ::nme::events::KeyboardEvent_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,this->charCode,this->keyCode,this->keyLocation,this->ctrlKey,this->altKey,this->shiftKey,this->controlKey,this->commandKey);
            	}


::String KeyboardEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_bc4e6d43e7152fa8_41_toString)
HXDLIN(  41)		::String _hx_tmp = ((HX_("[KeyboardEvent type=",bb,ae,1e,4c) + this->get_type()) + HX_(" bubbles=",16,5f,ba,28));
HXDLIN(  41)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->get_bubbles())) + HX_(" cancelable=",89,25,e0,5d));
HXDLIN(  41)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->get_cancelable())) + HX_(" charCode=",9a,db,fd,0c));
HXDLIN(  41)		::String _hx_tmp3 = ((((((_hx_tmp2 + this->charCode) + HX_(" keyCode=",71,1c,ed,ec)) + this->keyCode) + HX_(" keyLocation=",e9,5a,32,48)) + this->keyLocation) + HX_(" ctrlKey=",29,e8,3e,4a));
HXDLIN(  41)		::String _hx_tmp4 = ((_hx_tmp3 + ::Std_obj::string(this->ctrlKey)) + HX_(" altKey=",67,93,d6,12));
HXDLIN(  41)		::String _hx_tmp5 = ((_hx_tmp4 + ::Std_obj::string(this->altKey)) + HX_(" shiftKey=",40,5f,4f,db));
HXDLIN(  41)		::String _hx_tmp6 = ((_hx_tmp5 + ::Std_obj::string(this->shiftKey)) + HX_(" controlKeyValue=",ae,63,92,11));
HXDLIN(  41)		::String _hx_tmp7 = ((_hx_tmp6 + ::Std_obj::string(this->controlKey)) + HX_(" commandKeyValue=",00,30,b9,85));
HXDLIN(  41)		return ((_hx_tmp7 + ::Std_obj::string(this->commandKey)) + HX_("]",5d,00,00,00));
            	}


::String KeyboardEvent_obj::KEY_DOWN;

::String KeyboardEvent_obj::KEY_UP;


::hx::ObjectPtr< KeyboardEvent_obj > KeyboardEvent_obj::__new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_charCodeValue,::hx::Null< int >  __o_keyCodeValue,::hx::Null< int >  __o_keyLocationValue,::hx::Null< bool >  __o_ctrlKeyValue,::hx::Null< bool >  __o_altKeyValue,::hx::Null< bool >  __o_shiftKeyValue,::hx::Null< bool >  __o_controlKeyValue,::hx::Null< bool >  __o_commandKeyValue) {
	::hx::ObjectPtr< KeyboardEvent_obj > __this = new KeyboardEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_charCodeValue,__o_keyCodeValue,__o_keyLocationValue,__o_ctrlKeyValue,__o_altKeyValue,__o_shiftKeyValue,__o_controlKeyValue,__o_commandKeyValue);
	return __this;
}

::hx::ObjectPtr< KeyboardEvent_obj > KeyboardEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_charCodeValue,::hx::Null< int >  __o_keyCodeValue,::hx::Null< int >  __o_keyLocationValue,::hx::Null< bool >  __o_ctrlKeyValue,::hx::Null< bool >  __o_altKeyValue,::hx::Null< bool >  __o_shiftKeyValue,::hx::Null< bool >  __o_controlKeyValue,::hx::Null< bool >  __o_commandKeyValue) {
	KeyboardEvent_obj *__this = (KeyboardEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KeyboardEvent_obj), true, "nme.events.KeyboardEvent"));
	*(void **)__this = KeyboardEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_charCodeValue,__o_keyCodeValue,__o_keyLocationValue,__o_ctrlKeyValue,__o_altKeyValue,__o_shiftKeyValue,__o_controlKeyValue,__o_commandKeyValue);
	return __this;
}

KeyboardEvent_obj::KeyboardEvent_obj()
{
}

::hx::Val KeyboardEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"altKey") ) { return ::hx::Val( altKey ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { return ::hx::Val( ctrlKey ); }
		if (HX_FIELD_EQ(inName,"keyCode") ) { return ::hx::Val( keyCode ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"charCode") ) { return ::hx::Val( charCode ); }
		if (HX_FIELD_EQ(inName,"shiftKey") ) { return ::hx::Val( shiftKey ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"controlKey") ) { return ::hx::Val( controlKey ); }
		if (HX_FIELD_EQ(inName,"commandKey") ) { return ::hx::Val( commandKey ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"keyLocation") ) { return ::hx::Val( keyLocation ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val KeyboardEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"altKey") ) { altKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"ctrlKey") ) { ctrlKey=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"keyCode") ) { keyCode=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"charCode") ) { charCode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shiftKey") ) { shiftKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"controlKey") ) { controlKey=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"commandKey") ) { commandKey=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"keyLocation") ) { keyLocation=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void KeyboardEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("altKey",f6,a7,ca,44));
	outFields->push(HX_("charCode",23,5f,24,9c));
	outFields->push(HX_("ctrlKey",b4,35,7d,61));
	outFields->push(HX_("controlKey",42,8e,a5,04));
	outFields->push(HX_("commandKey",14,71,9b,43));
	outFields->push(HX_("keyCode",6c,22,9e,9b));
	outFields->push(HX_("keyLocation",f4,ea,6a,2d));
	outFields->push(HX_("shiftKey",3d,92,9f,99));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo KeyboardEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(KeyboardEvent_obj,altKey),HX_("altKey",f6,a7,ca,44)},
	{::hx::fsInt,(int)offsetof(KeyboardEvent_obj,charCode),HX_("charCode",23,5f,24,9c)},
	{::hx::fsBool,(int)offsetof(KeyboardEvent_obj,ctrlKey),HX_("ctrlKey",b4,35,7d,61)},
	{::hx::fsBool,(int)offsetof(KeyboardEvent_obj,controlKey),HX_("controlKey",42,8e,a5,04)},
	{::hx::fsBool,(int)offsetof(KeyboardEvent_obj,commandKey),HX_("commandKey",14,71,9b,43)},
	{::hx::fsInt,(int)offsetof(KeyboardEvent_obj,keyCode),HX_("keyCode",6c,22,9e,9b)},
	{::hx::fsInt,(int)offsetof(KeyboardEvent_obj,keyLocation),HX_("keyLocation",f4,ea,6a,2d)},
	{::hx::fsBool,(int)offsetof(KeyboardEvent_obj,shiftKey),HX_("shiftKey",3d,92,9f,99)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo KeyboardEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &KeyboardEvent_obj::KEY_DOWN,HX_("KEY_DOWN",62,6a,13,6d)},
	{::hx::fsString,(void *) &KeyboardEvent_obj::KEY_UP,HX_("KEY_UP",5b,74,86,f2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String KeyboardEvent_obj_sMemberFields[] = {
	HX_("altKey",f6,a7,ca,44),
	HX_("charCode",23,5f,24,9c),
	HX_("ctrlKey",b4,35,7d,61),
	HX_("controlKey",42,8e,a5,04),
	HX_("commandKey",14,71,9b,43),
	HX_("keyCode",6c,22,9e,9b),
	HX_("keyLocation",f4,ea,6a,2d),
	HX_("shiftKey",3d,92,9f,99),
	HX_("clone",5d,13,63,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void KeyboardEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KeyboardEvent_obj::KEY_DOWN,"KEY_DOWN");
	HX_MARK_MEMBER_NAME(KeyboardEvent_obj::KEY_UP,"KEY_UP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KeyboardEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KeyboardEvent_obj::KEY_DOWN,"KEY_DOWN");
	HX_VISIT_MEMBER_NAME(KeyboardEvent_obj::KEY_UP,"KEY_UP");
};

#endif

::hx::Class KeyboardEvent_obj::__mClass;

static ::String KeyboardEvent_obj_sStaticFields[] = {
	HX_("KEY_DOWN",62,6a,13,6d),
	HX_("KEY_UP",5b,74,86,f2),
	::String(null())
};

void KeyboardEvent_obj::__register()
{
	KeyboardEvent_obj _hx_dummy;
	KeyboardEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.KeyboardEvent",e6,3b,ee,72);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = KeyboardEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(KeyboardEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KeyboardEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KeyboardEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KeyboardEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyboardEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyboardEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void KeyboardEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_bc4e6d43e7152fa8_7_boot)
HXDLIN(   7)		KEY_DOWN = HX_("keyDown",a1,69,47,9c);
            	}
{
            	HX_STACKFRAME(&_hx_pos_bc4e6d43e7152fa8_8_boot)
HXDLIN(   8)		KEY_UP = HX_("keyUp",da,b9,fe,de);
            	}
}

} // end namespace nme
} // end namespace events
