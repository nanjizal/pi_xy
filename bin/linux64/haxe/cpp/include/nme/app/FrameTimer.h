// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_app_FrameTimer
#define INCLUDED_nme_app_FrameTimer

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_app_IPollClient
#include <nme/app/IPollClient.h>
#endif
HX_DECLARE_CLASS2(nme,app,FrameTimer)
HX_DECLARE_CLASS2(nme,app,IPollClient)
HX_DECLARE_CLASS2(nme,app,Window)

namespace nme{
namespace app{


class HXCPP_CLASS_ATTRIBUTES FrameTimer_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef FrameTimer_obj OBJ_;
		FrameTimer_obj();

	public:
		enum { _hx_ClassId = 0x13299753 };

		void __construct( ::nme::app::Window inWindow,Float inFps);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.app.FrameTimer")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.app.FrameTimer"); }
		static ::hx::ObjectPtr< FrameTimer_obj > __new( ::nme::app::Window inWindow,Float inFps);
		static ::hx::ObjectPtr< FrameTimer_obj > __alloc(::hx::Ctx *_hx_ctx, ::nme::app::Window inWindow,Float inFps);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FrameTimer_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("FrameTimer",78,f8,0c,ea); }

		Float fps;
		Float lastRender;
		Float framePeriod;
		 ::nme::app::Window window;
		bool invalid;
		bool catchup;
		Float offTarget;
		void destory();
		::Dynamic destory_dyn();

		Float set_fps(Float inFps);
		::Dynamic set_fps_dyn();

		void onPoll(Float timestamp);
		::Dynamic onPoll_dyn();

		void invalidate();
		::Dynamic invalidate_dyn();

		Float getNextWake(Float defaultWake,Float timestamp);
		::Dynamic getNextWake_dyn();

};

} // end namespace nme
} // end namespace app

#endif /* INCLUDED_nme_app_FrameTimer */ 
