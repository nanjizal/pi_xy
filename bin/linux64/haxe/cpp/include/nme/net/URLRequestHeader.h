// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_net_URLRequestHeader
#define INCLUDED_nme_net_URLRequestHeader

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_a8111420052d9149_11_new)
HX_DECLARE_CLASS2(nme,net,URLRequestHeader)

namespace nme{
namespace net{


class HXCPP_CLASS_ATTRIBUTES URLRequestHeader_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef URLRequestHeader_obj OBJ_;
		URLRequestHeader_obj();

	public:
		enum { _hx_ClassId = 0x32356a0c };

		void __construct(::String name,::String value);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.net.URLRequestHeader")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.net.URLRequestHeader"); }

		inline static ::hx::ObjectPtr< URLRequestHeader_obj > __new(::String name,::String value) {
			::hx::ObjectPtr< URLRequestHeader_obj > __this = new URLRequestHeader_obj();
			__this->__construct(name,value);
			return __this;
		}

		inline static ::hx::ObjectPtr< URLRequestHeader_obj > __alloc(::hx::Ctx *_hx_ctx,::String name,::String value) {
			URLRequestHeader_obj *__this = (URLRequestHeader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(URLRequestHeader_obj), true, "nme.net.URLRequestHeader"));
			*(void **)__this = URLRequestHeader_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_a8111420052d9149_11_new)
HXLINE(  12)		( ( ::nme::net::URLRequestHeader)(__this) )->name = name;
HXLINE(  13)		( ( ::nme::net::URLRequestHeader)(__this) )->value = value;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~URLRequestHeader_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("URLRequestHeader",6d,25,a6,a7); }

		::String name;
		::String value;
};

} // end namespace nme
} // end namespace net

#endif /* INCLUDED_nme_net_URLRequestHeader */ 
