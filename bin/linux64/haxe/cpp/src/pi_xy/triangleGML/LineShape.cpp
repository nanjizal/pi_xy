// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitQuad
#include <pi_xy/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_QuadPoints_
#include <pi_xy/algo/QuadPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_LineShape
#include <pi_xy/triangleGML/LineShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_BasicShape
#include <pi_xy/triangleGML/triGML/BasicShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_GroupShape
#include <pi_xy/triangleGML/triGML/GroupShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_ShapeInterface
#include <pi_xy/triangleGML/triGML/ShapeInterface.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_shape_contour_LineShape_
#include <pi_xy/triangleGML/triGML/shape/contour/LineShape_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1e6265e28deab607_9_new,"pi_xy.triangleGML.LineShape","new",0x0fe990a8,"pi_xy.triangleGML.LineShape.new","pi_xy/triangleGML/LineShape.hx",9,0x8036f44a)
HX_LOCAL_STACK_FRAME(_hx_pos_1e6265e28deab607_13_setParameter,"pi_xy.triangleGML.LineShape","setParameter",0x31a3ec5f,"pi_xy.triangleGML.LineShape.setParameter","pi_xy/triangleGML/LineShape.hx",13,0x8036f44a)
HX_LOCAL_STACK_FRAME(_hx_pos_1e6265e28deab607_21_render,"pi_xy.triangleGML.LineShape","render",0x3943080e,"pi_xy.triangleGML.LineShape.render","pi_xy/triangleGML/LineShape.hx",21,0x8036f44a)
namespace pi_xy{
namespace triangleGML{

void LineShape_obj::__construct( ::Dynamic opacity, ::Dynamic visibility, ::Dynamic strokeColor, ::Dynamic strokeWidth,::Array< ::String > strokeDashGapArray, ::Dynamic x1, ::Dynamic y1, ::Dynamic x2, ::Dynamic y2, ::Dynamic edgeSoft){
            	HX_STACKFRAME(&_hx_pos_1e6265e28deab607_9_new)
HXDLIN(   9)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,x1,y1,x2,y2,edgeSoft);
            	}

Dynamic LineShape_obj::__CreateEmpty() { return new LineShape_obj; }

void *LineShape_obj::_hx_vtable = 0;

Dynamic LineShape_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LineShape_obj > _hx_result = new LineShape_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9]);
	return _hx_result;
}

bool LineShape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2cc14696) {
		if (inClassId<=(int)0x1a0bd5c0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1a0bd5c0;
		} else {
			return inClassId==(int)0x2cc14696;
		}
	} else {
		return inClassId==(int)0x2f46d6e1 || inClassId==(int)0x7ff8cec5;
	}
}

void LineShape_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_1e6265e28deab607_13_setParameter)
HXDLIN(  13)		if ((name == HX_("luxury",0d,9d,17,dc))) {
HXLINE(  15)			bool _hx_tmp;
HXDLIN(  15)			if ((::StringTools_obj::trim(value).toLowerCase() == HX_("true",4e,a7,03,4d))) {
HXLINE(  15)				_hx_tmp = true;
            			}
            			else {
HXLINE(  15)				_hx_tmp = false;
            			}
HXDLIN(  15)			this->luxury = _hx_tmp;
HXLINE(  16)			::haxe::Log_obj::trace((HX_("setting luxury ",e3,03,9c,5a) + value),::hx::SourceInfo(HX_("src/pi_xy/triangleGML/LineShape.hx",55,08,77,1f),16,HX_("pi_xy.triangleGML.LineShape",b6,5c,e2,af),HX_("setParameter",a7,f5,ff,6c)));
            		}
            		else {
HXLINE(  18)			this->super::setParameter(name,value);
            		}
            	}


 ::Dynamic LineShape_obj::render( ::Dynamic _tmp_pixelImage){
            	HX_GC_STACKFRAME(&_hx_pos_1e6265e28deab607_21_render)
HXLINE(  22)		 ::pi_xy::ImageStruct pixelImage = ( ( ::pi_xy::ImageStruct)(_tmp_pixelImage) );
HXDLIN(  22)		Float px = (this->x1 + this->offX);
HXLINE(  23)		Float qx = (this->x2 + this->offX);
HXLINE(  24)		Float py = (this->y1 + this->offY);
HXLINE(  25)		Float qy = (this->y2 + this->offY);
HXLINE(  27)		if ((this->strokeWidth < ((Float)1.))) {
HXLINE(  28)			Float alpha = (((( (Float)(((::Std_obj::_hx_int(( (Float)(this->strokeColor) )) >> 24) & 255)) ) / ( (Float)(255) )) - ((Float)0.000000000000001)) * ((Float)0.75));
HXLINE(  29)			{
HXLINE(  29)				Float x0 = px;
HXDLIN(  29)				Float y0 = py;
HXDLIN(  29)				Float x1 = qx;
HXDLIN(  29)				Float y1 = qy;
HXDLIN(  29)				int color = this->strokeColor;
HXDLIN(  29)				int a = ((color >> 24) & 255);
HXDLIN(  29)				int r = ((color >> 16) & 255);
HXDLIN(  29)				int g = ((color >> 8) & 255);
HXDLIN(  29)				int b = (color & 255);
HXDLIN(  29)				bool steep = (::Math_obj::abs((y1 - y0)) > ::Math_obj::abs((x1 - x0)));
HXDLIN(  29)				Float temp = ((Float)0.);
HXDLIN(  29)				if (steep) {
HXLINE(  42)					temp = y0;
HXLINE(  43)					y0 = x0;
HXLINE(  44)					x0 = temp;
HXLINE(  45)					temp = y1;
HXLINE(  46)					y1 = x1;
HXLINE(  47)					x1 = temp;
            				}
HXLINE(  29)				if ((x0 > x1)) {
HXLINE(  50)					temp = x1;
HXLINE(  51)					x1 = x0;
HXLINE(  52)					x0 = temp;
HXLINE(  53)					temp = y1;
HXLINE(  54)					y1 = y0;
HXLINE(  55)					y0 = temp;
            				}
HXLINE(  29)				Float dx = (x1 - x0);
HXDLIN(  29)				Float dy = (y1 - y0);
HXDLIN(  29)				Float gradient;
HXDLIN(  29)				if ((dx == ((Float)0.0))) {
HXLINE(  29)					gradient = ((Float)1.);
            				}
            				else {
HXLINE(  29)					gradient = (dy / dx);
            				}
HXDLIN(  29)				Float xend = (::Math_obj::floor(x0) + ((Float)0.5));
HXDLIN(  29)				Float yend = (y0 + (gradient * (xend - x0)));
HXDLIN(  29)				Float v = (x0 + ((Float)0.5));
HXDLIN(  29)				Float xgap = ((( (Float)(1) ) - v) + ::Math_obj::floor(v));
HXDLIN(  29)				int xpxl1 = ::Std_obj::_hx_int(xend);
HXDLIN(  29)				int ypxl1 = ::Math_obj::floor(yend);
HXDLIN(  29)				int a0 = 0;
HXDLIN(  29)				Float range = alpha;
HXDLIN(  29)				Float solid = (( (Float)(1) ) - range);
HXDLIN(  29)				if (steep) {
HXLINE(  29)					int i = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * (((( (Float)(1) ) - yend) + ::Math_obj::floor(yend)) * xgap))));
HXDLIN(  29)					if ((i > 255)) {
HXLINE(  24)						i = 255;
            					}
HXLINE(  29)					if ((i < 0)) {
HXLINE(  25)						i = 0;
            					}
HXLINE(  29)					a0 = i;
HXDLIN(  29)					{
HXLINE(  29)						int location;
HXDLIN(  29)						if (pixelImage->useVirtualPos) {
HXLINE(  29)							location = ::Std_obj::_hx_int(((((( (Float)(xpxl1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + ypxl1) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  29)							location = ::Std_obj::_hx_int(( (Float)(((xpxl1 * pixelImage->width) + ypxl1)) ));
            						}
HXDLIN(  29)						bool _hx_tmp;
HXDLIN(  29)						if (pixelImage->transparent) {
HXLINE(  29)							_hx_tmp = (a0 < 254);
            						}
            						else {
HXLINE(  29)							_hx_tmp = false;
            						}
HXDLIN(  29)						if (_hx_tmp) {
HXLINE(  29)							int this1 = ::iterMagic::Iimg_obj::get(pixelImage->image,location);
HXDLIN(  29)							int old;
HXDLIN(  29)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)								old = ((((((this1 >> 24) & 255) << 24) | ((this1 & 255) << 16)) | (((this1 >> 8) & 255) << 8)) | ((this1 >> 16) & 255));
            							}
            							else {
HXLINE(  29)								old = this1;
            							}
HXDLIN(  29)							int rhs = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  29)							Float a1;
HXDLIN(  29)							int this2 = ((old >> 24) & 255);
HXDLIN(  29)							if ((this2 == 0)) {
HXLINE(  29)								a1 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a1 = (( (Float)(this2) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r1;
HXDLIN(  29)							int this3 = ((old >> 16) & 255);
HXDLIN(  29)							if ((this3 == 0)) {
HXLINE(  29)								r1 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r1 = (( (Float)(this3) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g1;
HXDLIN(  29)							int this4 = ((old >> 8) & 255);
HXDLIN(  29)							if ((this4 == 0)) {
HXLINE(  29)								g1 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g1 = (( (Float)(this4) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b1;
HXDLIN(  29)							int this5 = (old & 255);
HXDLIN(  29)							if ((this5 == 0)) {
HXLINE(  29)								b1 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b1 = (( (Float)(this5) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a2;
HXDLIN(  29)							int this6 = ((rhs >> 24) & 255);
HXDLIN(  29)							if ((this6 == 0)) {
HXLINE(  29)								a2 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a2 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r2;
HXDLIN(  29)							int this7 = ((rhs >> 16) & 255);
HXDLIN(  29)							if ((this7 == 0)) {
HXLINE(  29)								r2 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r2 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g2;
HXDLIN(  29)							int this8 = ((rhs >> 8) & 255);
HXDLIN(  29)							if ((this8 == 0)) {
HXLINE(  29)								g2 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g2 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b2;
HXDLIN(  29)							int this9 = (rhs & 255);
HXDLIN(  29)							if ((this9 == 0)) {
HXLINE(  29)								b2 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b2 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  29)							int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  29)							int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  29)							int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  29)							int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  29)							int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  29)							{
HXLINE(  29)								int _hx_tmp1;
HXDLIN(  29)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)									_hx_tmp1 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE(  29)									_hx_tmp1 = blended;
            								}
HXDLIN(  29)								::iterMagic::Iimg_obj::set(pixelImage->image,location,_hx_tmp1);
            							}
            						}
            						else {
HXLINE(  29)							int value;
HXDLIN(  29)							if (pixelImage->isLittle) {
HXLINE(  29)								value = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            							}
            							else {
HXLINE(  29)								value = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            							}
HXDLIN(  29)							::iterMagic::Iimg_obj::set(pixelImage->image,location,value);
            						}
            					}
HXDLIN(  29)					int i1 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * ((yend - ( (Float)(::Math_obj::floor(yend)) )) * xgap))));
HXDLIN(  29)					if ((i1 > 255)) {
HXLINE(  24)						i1 = 255;
            					}
HXLINE(  29)					if ((i1 < 0)) {
HXLINE(  25)						i1 = 0;
            					}
HXLINE(  29)					a0 = i1;
HXDLIN(  29)					{
HXLINE(  29)						int x = (ypxl1 + 1);
HXDLIN(  29)						int location1;
HXDLIN(  29)						if (pixelImage->useVirtualPos) {
HXLINE(  29)							location1 = ::Std_obj::_hx_int(((((( (Float)(xpxl1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  29)							location1 = ::Std_obj::_hx_int(( (Float)(((xpxl1 * pixelImage->width) + x)) ));
            						}
HXDLIN(  29)						bool _hx_tmp2;
HXDLIN(  29)						if (pixelImage->transparent) {
HXLINE(  29)							_hx_tmp2 = (a0 < 254);
            						}
            						else {
HXLINE(  29)							_hx_tmp2 = false;
            						}
HXDLIN(  29)						if (_hx_tmp2) {
HXLINE(  29)							int this10 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  29)							int old1;
HXDLIN(  29)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)								old1 = ((((((this10 >> 24) & 255) << 24) | ((this10 & 255) << 16)) | (((this10 >> 8) & 255) << 8)) | ((this10 >> 16) & 255));
            							}
            							else {
HXLINE(  29)								old1 = this10;
            							}
HXDLIN(  29)							int rhs1 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  29)							Float a11;
HXDLIN(  29)							int this11 = ((old1 >> 24) & 255);
HXDLIN(  29)							if ((this11 == 0)) {
HXLINE(  29)								a11 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a11 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r11;
HXDLIN(  29)							int this12 = ((old1 >> 16) & 255);
HXDLIN(  29)							if ((this12 == 0)) {
HXLINE(  29)								r11 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r11 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g11;
HXDLIN(  29)							int this13 = ((old1 >> 8) & 255);
HXDLIN(  29)							if ((this13 == 0)) {
HXLINE(  29)								g11 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g11 = (( (Float)(this13) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b11;
HXDLIN(  29)							int this14 = (old1 & 255);
HXDLIN(  29)							if ((this14 == 0)) {
HXLINE(  29)								b11 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b11 = (( (Float)(this14) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a21;
HXDLIN(  29)							int this15 = ((rhs1 >> 24) & 255);
HXDLIN(  29)							if ((this15 == 0)) {
HXLINE(  29)								a21 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a21 = (( (Float)(this15) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r21;
HXDLIN(  29)							int this16 = ((rhs1 >> 16) & 255);
HXDLIN(  29)							if ((this16 == 0)) {
HXLINE(  29)								r21 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r21 = (( (Float)(this16) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g21;
HXDLIN(  29)							int this17 = ((rhs1 >> 8) & 255);
HXDLIN(  29)							if ((this17 == 0)) {
HXLINE(  29)								g21 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g21 = (( (Float)(this17) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b21;
HXDLIN(  29)							int this18 = (rhs1 & 255);
HXDLIN(  29)							if ((this18 == 0)) {
HXLINE(  29)								b21 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b21 = (( (Float)(this18) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  29)							int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  29)							int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  29)							int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a31) + (b21 * a21))));
HXDLIN(  29)							int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  29)							int blended1 = ((((a5 << 24) | (r4 << 16)) | (g4 << 8)) | b4);
HXDLIN(  29)							{
HXLINE(  29)								int _hx_tmp3;
HXDLIN(  29)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)									_hx_tmp3 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            								}
            								else {
HXLINE(  29)									_hx_tmp3 = blended1;
            								}
HXDLIN(  29)								::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp3);
            							}
            						}
            						else {
HXLINE(  29)							int value1;
HXDLIN(  29)							if (pixelImage->isLittle) {
HXLINE(  29)								value1 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            							}
            							else {
HXLINE(  29)								value1 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            							}
HXDLIN(  29)							::iterMagic::Iimg_obj::set(pixelImage->image,location1,value1);
            						}
            					}
            				}
            				else {
HXLINE(  29)					int i2 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * (((( (Float)(1) ) - yend) + ::Math_obj::floor(yend)) * xgap))));
HXDLIN(  29)					if ((i2 > 255)) {
HXLINE(  24)						i2 = 255;
            					}
HXLINE(  29)					if ((i2 < 0)) {
HXLINE(  25)						i2 = 0;
            					}
HXLINE(  29)					a0 = i2;
HXDLIN(  29)					{
HXLINE(  29)						int location2;
HXDLIN(  29)						if (pixelImage->useVirtualPos) {
HXLINE(  29)							location2 = ::Std_obj::_hx_int(((((( (Float)(ypxl1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + xpxl1) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  29)							location2 = ::Std_obj::_hx_int(( (Float)(((ypxl1 * pixelImage->width) + xpxl1)) ));
            						}
HXDLIN(  29)						bool _hx_tmp4;
HXDLIN(  29)						if (pixelImage->transparent) {
HXLINE(  29)							_hx_tmp4 = (a0 < 254);
            						}
            						else {
HXLINE(  29)							_hx_tmp4 = false;
            						}
HXDLIN(  29)						if (_hx_tmp4) {
HXLINE(  29)							int this19 = ::iterMagic::Iimg_obj::get(pixelImage->image,location2);
HXDLIN(  29)							int old2;
HXDLIN(  29)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)								old2 = ((((((this19 >> 24) & 255) << 24) | ((this19 & 255) << 16)) | (((this19 >> 8) & 255) << 8)) | ((this19 >> 16) & 255));
            							}
            							else {
HXLINE(  29)								old2 = this19;
            							}
HXDLIN(  29)							int rhs2 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  29)							Float a12;
HXDLIN(  29)							int this20 = ((old2 >> 24) & 255);
HXDLIN(  29)							if ((this20 == 0)) {
HXLINE(  29)								a12 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a12 = (( (Float)(this20) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r12;
HXDLIN(  29)							int this21 = ((old2 >> 16) & 255);
HXDLIN(  29)							if ((this21 == 0)) {
HXLINE(  29)								r12 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r12 = (( (Float)(this21) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g12;
HXDLIN(  29)							int this22 = ((old2 >> 8) & 255);
HXDLIN(  29)							if ((this22 == 0)) {
HXLINE(  29)								g12 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g12 = (( (Float)(this22) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b12;
HXDLIN(  29)							int this23 = (old2 & 255);
HXDLIN(  29)							if ((this23 == 0)) {
HXLINE(  29)								b12 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b12 = (( (Float)(this23) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a22;
HXDLIN(  29)							int this24 = ((rhs2 >> 24) & 255);
HXDLIN(  29)							if ((this24 == 0)) {
HXLINE(  29)								a22 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a22 = (( (Float)(this24) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r22;
HXDLIN(  29)							int this25 = ((rhs2 >> 16) & 255);
HXDLIN(  29)							if ((this25 == 0)) {
HXLINE(  29)								r22 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r22 = (( (Float)(this25) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g22;
HXDLIN(  29)							int this26 = ((rhs2 >> 8) & 255);
HXDLIN(  29)							if ((this26 == 0)) {
HXLINE(  29)								g22 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g22 = (( (Float)(this26) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b22;
HXDLIN(  29)							int this27 = (rhs2 & 255);
HXDLIN(  29)							if ((this27 == 0)) {
HXLINE(  29)								b22 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b22 = (( (Float)(this27) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  29)							int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  29)							int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  29)							int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a32) + (b22 * a22))));
HXDLIN(  29)							int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  29)							int blended2 = ((((a6 << 24) | (r5 << 16)) | (g5 << 8)) | b5);
HXDLIN(  29)							{
HXLINE(  29)								int _hx_tmp5;
HXDLIN(  29)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)									_hx_tmp5 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            								}
            								else {
HXLINE(  29)									_hx_tmp5 = blended2;
            								}
HXDLIN(  29)								::iterMagic::Iimg_obj::set(pixelImage->image,location2,_hx_tmp5);
            							}
            						}
            						else {
HXLINE(  29)							int value2;
HXDLIN(  29)							if (pixelImage->isLittle) {
HXLINE(  29)								value2 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            							}
            							else {
HXLINE(  29)								value2 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            							}
HXDLIN(  29)							::iterMagic::Iimg_obj::set(pixelImage->image,location2,value2);
            						}
            					}
HXDLIN(  29)					int i3 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * ((yend - ( (Float)(::Math_obj::floor(yend)) )) * xgap))));
HXDLIN(  29)					if ((i3 > 255)) {
HXLINE(  24)						i3 = 255;
            					}
HXLINE(  29)					if ((i3 < 0)) {
HXLINE(  25)						i3 = 0;
            					}
HXLINE(  29)					a0 = i3;
HXDLIN(  29)					{
HXLINE(  29)						int y = (ypxl1 + 1);
HXDLIN(  29)						int location3;
HXDLIN(  29)						if (pixelImage->useVirtualPos) {
HXLINE(  29)							location3 = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + xpxl1) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  29)							location3 = ::Std_obj::_hx_int(( (Float)(((y * pixelImage->width) + xpxl1)) ));
            						}
HXDLIN(  29)						bool _hx_tmp6;
HXDLIN(  29)						if (pixelImage->transparent) {
HXLINE(  29)							_hx_tmp6 = (a0 < 254);
            						}
            						else {
HXLINE(  29)							_hx_tmp6 = false;
            						}
HXDLIN(  29)						if (_hx_tmp6) {
HXLINE(  29)							int this28 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN(  29)							int old3;
HXDLIN(  29)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)								old3 = ((((((this28 >> 24) & 255) << 24) | ((this28 & 255) << 16)) | (((this28 >> 8) & 255) << 8)) | ((this28 >> 16) & 255));
            							}
            							else {
HXLINE(  29)								old3 = this28;
            							}
HXDLIN(  29)							int rhs3 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  29)							Float a13;
HXDLIN(  29)							int this29 = ((old3 >> 24) & 255);
HXDLIN(  29)							if ((this29 == 0)) {
HXLINE(  29)								a13 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a13 = (( (Float)(this29) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r13;
HXDLIN(  29)							int this30 = ((old3 >> 16) & 255);
HXDLIN(  29)							if ((this30 == 0)) {
HXLINE(  29)								r13 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r13 = (( (Float)(this30) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g13;
HXDLIN(  29)							int this31 = ((old3 >> 8) & 255);
HXDLIN(  29)							if ((this31 == 0)) {
HXLINE(  29)								g13 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g13 = (( (Float)(this31) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b13;
HXDLIN(  29)							int this32 = (old3 & 255);
HXDLIN(  29)							if ((this32 == 0)) {
HXLINE(  29)								b13 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b13 = (( (Float)(this32) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a23;
HXDLIN(  29)							int this33 = ((rhs3 >> 24) & 255);
HXDLIN(  29)							if ((this33 == 0)) {
HXLINE(  29)								a23 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a23 = (( (Float)(this33) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r23;
HXDLIN(  29)							int this34 = ((rhs3 >> 16) & 255);
HXDLIN(  29)							if ((this34 == 0)) {
HXLINE(  29)								r23 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r23 = (( (Float)(this34) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g23;
HXDLIN(  29)							int this35 = ((rhs3 >> 8) & 255);
HXDLIN(  29)							if ((this35 == 0)) {
HXLINE(  29)								g23 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g23 = (( (Float)(this35) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b23;
HXDLIN(  29)							int this36 = (rhs3 & 255);
HXDLIN(  29)							if ((this36 == 0)) {
HXLINE(  29)								b23 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b23 = (( (Float)(this36) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  29)							int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  29)							int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  29)							int b6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a33) + (b23 * a23))));
HXDLIN(  29)							int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  29)							int blended3 = ((((a7 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  29)							{
HXLINE(  29)								int _hx_tmp7;
HXDLIN(  29)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)									_hx_tmp7 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            								}
            								else {
HXLINE(  29)									_hx_tmp7 = blended3;
            								}
HXDLIN(  29)								::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp7);
            							}
            						}
            						else {
HXLINE(  29)							int value3;
HXDLIN(  29)							if (pixelImage->isLittle) {
HXLINE(  29)								value3 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            							}
            							else {
HXLINE(  29)								value3 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            							}
HXDLIN(  29)							::iterMagic::Iimg_obj::set(pixelImage->image,location3,value3);
            						}
            					}
            				}
HXDLIN(  29)				Float intery = (yend + gradient);
HXDLIN(  29)				Float xend1 = (::Math_obj::floor(x1) + ((Float)0.5));
HXDLIN(  29)				Float yend1 = (y1 + (gradient * (xend1 - x1)));
HXDLIN(  29)				Float v1 = (x1 + ((Float)0.5));
HXDLIN(  29)				Float xgap1 = (v1 - ( (Float)(::Math_obj::floor(v1)) ));
HXDLIN(  29)				int xpxl2 = ::Std_obj::_hx_int(xend1);
HXDLIN(  29)				int ypxl2 = ::Math_obj::floor(yend1);
HXDLIN(  29)				if (steep) {
HXLINE(  29)					int i4 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * (((( (Float)(1) ) - yend1) + ::Math_obj::floor(yend1)) * xgap1))));
HXDLIN(  29)					if ((i4 > 255)) {
HXLINE(  24)						i4 = 255;
            					}
HXLINE(  29)					if ((i4 < 0)) {
HXLINE(  25)						i4 = 0;
            					}
HXLINE(  29)					a0 = i4;
HXDLIN(  29)					{
HXLINE(  29)						int location4;
HXDLIN(  29)						if (pixelImage->useVirtualPos) {
HXLINE(  29)							location4 = ::Std_obj::_hx_int(((((( (Float)(xpxl2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + ypxl2) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  29)							location4 = ::Std_obj::_hx_int(( (Float)(((xpxl2 * pixelImage->width) + ypxl2)) ));
            						}
HXDLIN(  29)						bool _hx_tmp8;
HXDLIN(  29)						if (pixelImage->transparent) {
HXLINE(  29)							_hx_tmp8 = (a0 < 254);
            						}
            						else {
HXLINE(  29)							_hx_tmp8 = false;
            						}
HXDLIN(  29)						if (_hx_tmp8) {
HXLINE(  29)							int this37 = ::iterMagic::Iimg_obj::get(pixelImage->image,location4);
HXDLIN(  29)							int old4;
HXDLIN(  29)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)								old4 = ((((((this37 >> 24) & 255) << 24) | ((this37 & 255) << 16)) | (((this37 >> 8) & 255) << 8)) | ((this37 >> 16) & 255));
            							}
            							else {
HXLINE(  29)								old4 = this37;
            							}
HXDLIN(  29)							int rhs4 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  29)							Float a14;
HXDLIN(  29)							int this38 = ((old4 >> 24) & 255);
HXDLIN(  29)							if ((this38 == 0)) {
HXLINE(  29)								a14 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a14 = (( (Float)(this38) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r14;
HXDLIN(  29)							int this39 = ((old4 >> 16) & 255);
HXDLIN(  29)							if ((this39 == 0)) {
HXLINE(  29)								r14 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r14 = (( (Float)(this39) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g14;
HXDLIN(  29)							int this40 = ((old4 >> 8) & 255);
HXDLIN(  29)							if ((this40 == 0)) {
HXLINE(  29)								g14 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g14 = (( (Float)(this40) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b14;
HXDLIN(  29)							int this41 = (old4 & 255);
HXDLIN(  29)							if ((this41 == 0)) {
HXLINE(  29)								b14 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b14 = (( (Float)(this41) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a24;
HXDLIN(  29)							int this42 = ((rhs4 >> 24) & 255);
HXDLIN(  29)							if ((this42 == 0)) {
HXLINE(  29)								a24 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a24 = (( (Float)(this42) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r24;
HXDLIN(  29)							int this43 = ((rhs4 >> 16) & 255);
HXDLIN(  29)							if ((this43 == 0)) {
HXLINE(  29)								r24 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r24 = (( (Float)(this43) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g24;
HXDLIN(  29)							int this44 = ((rhs4 >> 8) & 255);
HXDLIN(  29)							if ((this44 == 0)) {
HXLINE(  29)								g24 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g24 = (( (Float)(this44) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b24;
HXDLIN(  29)							int this45 = (rhs4 & 255);
HXDLIN(  29)							if ((this45 == 0)) {
HXLINE(  29)								b24 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b24 = (( (Float)(this45) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a34 = (a14 * (( (Float)(1) ) - a24));
HXDLIN(  29)							int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  29)							int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  29)							int b7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a34) + (b24 * a24))));
HXDLIN(  29)							int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  29)							int blended4 = ((((a8 << 24) | (r7 << 16)) | (g7 << 8)) | b7);
HXDLIN(  29)							{
HXLINE(  29)								int _hx_tmp9;
HXDLIN(  29)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)									_hx_tmp9 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            								}
            								else {
HXLINE(  29)									_hx_tmp9 = blended4;
            								}
HXDLIN(  29)								::iterMagic::Iimg_obj::set(pixelImage->image,location4,_hx_tmp9);
            							}
            						}
            						else {
HXLINE(  29)							int value4;
HXDLIN(  29)							if (pixelImage->isLittle) {
HXLINE(  29)								value4 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            							}
            							else {
HXLINE(  29)								value4 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            							}
HXDLIN(  29)							::iterMagic::Iimg_obj::set(pixelImage->image,location4,value4);
            						}
            					}
HXDLIN(  29)					int i5 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * ((yend1 - ( (Float)(::Math_obj::floor(yend1)) )) * xgap1))));
HXDLIN(  29)					if ((i5 > 255)) {
HXLINE(  24)						i5 = 255;
            					}
HXLINE(  29)					if ((i5 < 0)) {
HXLINE(  25)						i5 = 0;
            					}
HXLINE(  29)					a0 = i5;
HXDLIN(  29)					{
HXLINE(  29)						int x2 = (ypxl2 + 1);
HXDLIN(  29)						int location5;
HXDLIN(  29)						if (pixelImage->useVirtualPos) {
HXLINE(  29)							location5 = ::Std_obj::_hx_int(((((( (Float)(xpxl2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x2) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  29)							location5 = ::Std_obj::_hx_int(( (Float)(((xpxl2 * pixelImage->width) + x2)) ));
            						}
HXDLIN(  29)						bool _hx_tmp10;
HXDLIN(  29)						if (pixelImage->transparent) {
HXLINE(  29)							_hx_tmp10 = (a0 < 254);
            						}
            						else {
HXLINE(  29)							_hx_tmp10 = false;
            						}
HXDLIN(  29)						if (_hx_tmp10) {
HXLINE(  29)							int this46 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN(  29)							int old5;
HXDLIN(  29)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)								old5 = ((((((this46 >> 24) & 255) << 24) | ((this46 & 255) << 16)) | (((this46 >> 8) & 255) << 8)) | ((this46 >> 16) & 255));
            							}
            							else {
HXLINE(  29)								old5 = this46;
            							}
HXDLIN(  29)							int rhs5 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  29)							Float a15;
HXDLIN(  29)							int this47 = ((old5 >> 24) & 255);
HXDLIN(  29)							if ((this47 == 0)) {
HXLINE(  29)								a15 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a15 = (( (Float)(this47) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r15;
HXDLIN(  29)							int this48 = ((old5 >> 16) & 255);
HXDLIN(  29)							if ((this48 == 0)) {
HXLINE(  29)								r15 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r15 = (( (Float)(this48) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g15;
HXDLIN(  29)							int this49 = ((old5 >> 8) & 255);
HXDLIN(  29)							if ((this49 == 0)) {
HXLINE(  29)								g15 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g15 = (( (Float)(this49) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b15;
HXDLIN(  29)							int this50 = (old5 & 255);
HXDLIN(  29)							if ((this50 == 0)) {
HXLINE(  29)								b15 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b15 = (( (Float)(this50) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a25;
HXDLIN(  29)							int this51 = ((rhs5 >> 24) & 255);
HXDLIN(  29)							if ((this51 == 0)) {
HXLINE(  29)								a25 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a25 = (( (Float)(this51) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r25;
HXDLIN(  29)							int this52 = ((rhs5 >> 16) & 255);
HXDLIN(  29)							if ((this52 == 0)) {
HXLINE(  29)								r25 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r25 = (( (Float)(this52) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g25;
HXDLIN(  29)							int this53 = ((rhs5 >> 8) & 255);
HXDLIN(  29)							if ((this53 == 0)) {
HXLINE(  29)								g25 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g25 = (( (Float)(this53) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b25;
HXDLIN(  29)							int this54 = (rhs5 & 255);
HXDLIN(  29)							if ((this54 == 0)) {
HXLINE(  29)								b25 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b25 = (( (Float)(this54) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a35 = (a15 * (( (Float)(1) ) - a25));
HXDLIN(  29)							int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  29)							int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  29)							int b8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a35) + (b25 * a25))));
HXDLIN(  29)							int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  29)							int blended5 = ((((a9 << 24) | (r8 << 16)) | (g8 << 8)) | b8);
HXDLIN(  29)							{
HXLINE(  29)								int _hx_tmp11;
HXDLIN(  29)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)									_hx_tmp11 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            								}
            								else {
HXLINE(  29)									_hx_tmp11 = blended5;
            								}
HXDLIN(  29)								::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp11);
            							}
            						}
            						else {
HXLINE(  29)							int value5;
HXDLIN(  29)							if (pixelImage->isLittle) {
HXLINE(  29)								value5 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            							}
            							else {
HXLINE(  29)								value5 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            							}
HXDLIN(  29)							::iterMagic::Iimg_obj::set(pixelImage->image,location5,value5);
            						}
            					}
            				}
            				else {
HXLINE(  29)					int i6 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * (((( (Float)(1) ) - yend1) + ::Math_obj::floor(yend1)) * xgap1))));
HXDLIN(  29)					if ((i6 > 255)) {
HXLINE(  24)						i6 = 255;
            					}
HXLINE(  29)					if ((i6 < 0)) {
HXLINE(  25)						i6 = 0;
            					}
HXLINE(  29)					a0 = i6;
HXDLIN(  29)					{
HXLINE(  29)						int location6;
HXDLIN(  29)						if (pixelImage->useVirtualPos) {
HXLINE(  29)							location6 = ::Std_obj::_hx_int(((((( (Float)(ypxl2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + xpxl2) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  29)							location6 = ::Std_obj::_hx_int(( (Float)(((ypxl2 * pixelImage->width) + xpxl2)) ));
            						}
HXDLIN(  29)						bool _hx_tmp12;
HXDLIN(  29)						if (pixelImage->transparent) {
HXLINE(  29)							_hx_tmp12 = (a0 < 254);
            						}
            						else {
HXLINE(  29)							_hx_tmp12 = false;
            						}
HXDLIN(  29)						if (_hx_tmp12) {
HXLINE(  29)							int this55 = ::iterMagic::Iimg_obj::get(pixelImage->image,location6);
HXDLIN(  29)							int old6;
HXDLIN(  29)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)								old6 = ((((((this55 >> 24) & 255) << 24) | ((this55 & 255) << 16)) | (((this55 >> 8) & 255) << 8)) | ((this55 >> 16) & 255));
            							}
            							else {
HXLINE(  29)								old6 = this55;
            							}
HXDLIN(  29)							int rhs6 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  29)							Float a16;
HXDLIN(  29)							int this56 = ((old6 >> 24) & 255);
HXDLIN(  29)							if ((this56 == 0)) {
HXLINE(  29)								a16 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a16 = (( (Float)(this56) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r16;
HXDLIN(  29)							int this57 = ((old6 >> 16) & 255);
HXDLIN(  29)							if ((this57 == 0)) {
HXLINE(  29)								r16 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r16 = (( (Float)(this57) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g16;
HXDLIN(  29)							int this58 = ((old6 >> 8) & 255);
HXDLIN(  29)							if ((this58 == 0)) {
HXLINE(  29)								g16 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g16 = (( (Float)(this58) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b16;
HXDLIN(  29)							int this59 = (old6 & 255);
HXDLIN(  29)							if ((this59 == 0)) {
HXLINE(  29)								b16 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b16 = (( (Float)(this59) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a26;
HXDLIN(  29)							int this60 = ((rhs6 >> 24) & 255);
HXDLIN(  29)							if ((this60 == 0)) {
HXLINE(  29)								a26 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a26 = (( (Float)(this60) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r26;
HXDLIN(  29)							int this61 = ((rhs6 >> 16) & 255);
HXDLIN(  29)							if ((this61 == 0)) {
HXLINE(  29)								r26 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r26 = (( (Float)(this61) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g26;
HXDLIN(  29)							int this62 = ((rhs6 >> 8) & 255);
HXDLIN(  29)							if ((this62 == 0)) {
HXLINE(  29)								g26 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g26 = (( (Float)(this62) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b26;
HXDLIN(  29)							int this63 = (rhs6 & 255);
HXDLIN(  29)							if ((this63 == 0)) {
HXLINE(  29)								b26 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b26 = (( (Float)(this63) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a36 = (a16 * (( (Float)(1) ) - a26));
HXDLIN(  29)							int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN(  29)							int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN(  29)							int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b16 * a36) + (b26 * a26))));
HXDLIN(  29)							int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  29)							int blended6 = ((((a10 << 24) | (r9 << 16)) | (g9 << 8)) | b9);
HXDLIN(  29)							{
HXLINE(  29)								int _hx_tmp13;
HXDLIN(  29)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)									_hx_tmp13 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            								}
            								else {
HXLINE(  29)									_hx_tmp13 = blended6;
            								}
HXDLIN(  29)								::iterMagic::Iimg_obj::set(pixelImage->image,location6,_hx_tmp13);
            							}
            						}
            						else {
HXLINE(  29)							int value6;
HXDLIN(  29)							if (pixelImage->isLittle) {
HXLINE(  29)								value6 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            							}
            							else {
HXLINE(  29)								value6 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            							}
HXDLIN(  29)							::iterMagic::Iimg_obj::set(pixelImage->image,location6,value6);
            						}
            					}
HXDLIN(  29)					int i7 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * ((yend1 - ( (Float)(::Math_obj::floor(yend1)) )) * xgap1))));
HXDLIN(  29)					if ((i7 > 255)) {
HXLINE(  24)						i7 = 255;
            					}
HXLINE(  29)					if ((i7 < 0)) {
HXLINE(  25)						i7 = 0;
            					}
HXLINE(  29)					a0 = i7;
HXDLIN(  29)					{
HXLINE(  29)						int y2 = (ypxl2 + 1);
HXDLIN(  29)						int location7;
HXDLIN(  29)						if (pixelImage->useVirtualPos) {
HXLINE(  29)							location7 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + xpxl2) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  29)							location7 = ::Std_obj::_hx_int(( (Float)(((y2 * pixelImage->width) + xpxl2)) ));
            						}
HXDLIN(  29)						bool _hx_tmp14;
HXDLIN(  29)						if (pixelImage->transparent) {
HXLINE(  29)							_hx_tmp14 = (a0 < 254);
            						}
            						else {
HXLINE(  29)							_hx_tmp14 = false;
            						}
HXDLIN(  29)						if (_hx_tmp14) {
HXLINE(  29)							int this64 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN(  29)							int old7;
HXDLIN(  29)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)								old7 = ((((((this64 >> 24) & 255) << 24) | ((this64 & 255) << 16)) | (((this64 >> 8) & 255) << 8)) | ((this64 >> 16) & 255));
            							}
            							else {
HXLINE(  29)								old7 = this64;
            							}
HXDLIN(  29)							int rhs7 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  29)							Float a17;
HXDLIN(  29)							int this65 = ((old7 >> 24) & 255);
HXDLIN(  29)							if ((this65 == 0)) {
HXLINE(  29)								a17 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a17 = (( (Float)(this65) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r17;
HXDLIN(  29)							int this66 = ((old7 >> 16) & 255);
HXDLIN(  29)							if ((this66 == 0)) {
HXLINE(  29)								r17 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r17 = (( (Float)(this66) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g17;
HXDLIN(  29)							int this67 = ((old7 >> 8) & 255);
HXDLIN(  29)							if ((this67 == 0)) {
HXLINE(  29)								g17 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g17 = (( (Float)(this67) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b17;
HXDLIN(  29)							int this68 = (old7 & 255);
HXDLIN(  29)							if ((this68 == 0)) {
HXLINE(  29)								b17 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b17 = (( (Float)(this68) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a27;
HXDLIN(  29)							int this69 = ((rhs7 >> 24) & 255);
HXDLIN(  29)							if ((this69 == 0)) {
HXLINE(  29)								a27 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								a27 = (( (Float)(this69) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float r27;
HXDLIN(  29)							int this70 = ((rhs7 >> 16) & 255);
HXDLIN(  29)							if ((this70 == 0)) {
HXLINE(  29)								r27 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								r27 = (( (Float)(this70) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float g27;
HXDLIN(  29)							int this71 = ((rhs7 >> 8) & 255);
HXDLIN(  29)							if ((this71 == 0)) {
HXLINE(  29)								g27 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								g27 = (( (Float)(this71) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float b27;
HXDLIN(  29)							int this72 = (rhs7 & 255);
HXDLIN(  29)							if ((this72 == 0)) {
HXLINE(  29)								b27 = ((Float)0.);
            							}
            							else {
HXLINE(  29)								b27 = (( (Float)(this72) ) / ( (Float)(255) ));
            							}
HXDLIN(  29)							Float a37 = (a17 * (( (Float)(1) ) - a27));
HXDLIN(  29)							int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN(  29)							int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN(  29)							int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b17 * a37) + (b27 * a27))));
HXDLIN(  29)							int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN(  29)							int blended7 = ((((a18 << 24) | (r10 << 16)) | (g10 << 8)) | b10);
HXDLIN(  29)							{
HXLINE(  29)								int _hx_tmp15;
HXDLIN(  29)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)									_hx_tmp15 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            								}
            								else {
HXLINE(  29)									_hx_tmp15 = blended7;
            								}
HXDLIN(  29)								::iterMagic::Iimg_obj::set(pixelImage->image,location7,_hx_tmp15);
            							}
            						}
            						else {
HXLINE(  29)							int value7;
HXDLIN(  29)							if (pixelImage->isLittle) {
HXLINE(  29)								value7 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            							}
            							else {
HXLINE(  29)								value7 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            							}
HXDLIN(  29)							::iterMagic::Iimg_obj::set(pixelImage->image,location7,value7);
            						}
            					}
            				}
HXDLIN(  29)				int startX = (xpxl1 + 1);
HXDLIN(  29)				int endX = (xpxl2 + 1);
HXDLIN(  29)				if (steep) {
HXLINE(  29)					int _g = startX;
HXDLIN(  29)					int _g1 = endX;
HXDLIN(  29)					while((_g < _g1)){
HXLINE(  29)						_g = (_g + 1);
HXDLIN(  29)						int x3 = (_g - 1);
HXDLIN(  29)						int i8 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * ((( (Float)(1) ) - intery) + ::Math_obj::floor(intery)))));
HXDLIN(  29)						if ((i8 > 255)) {
HXLINE(  24)							i8 = 255;
            						}
HXLINE(  29)						if ((i8 < 0)) {
HXLINE(  25)							i8 = 0;
            						}
HXLINE(  29)						a0 = i8;
HXDLIN(  29)						{
HXLINE(  29)							int x4 = ::Math_obj::floor(intery);
HXDLIN(  29)							int location8;
HXDLIN(  29)							if (pixelImage->useVirtualPos) {
HXLINE(  29)								location8 = ::Std_obj::_hx_int(((((( (Float)(x3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x4) - pixelImage->virtualX));
            							}
            							else {
HXLINE(  29)								location8 = ::Std_obj::_hx_int(( (Float)(((x3 * pixelImage->width) + x4)) ));
            							}
HXDLIN(  29)							bool _hx_tmp16;
HXDLIN(  29)							if (pixelImage->transparent) {
HXLINE(  29)								_hx_tmp16 = (a0 < 254);
            							}
            							else {
HXLINE(  29)								_hx_tmp16 = false;
            							}
HXDLIN(  29)							if (_hx_tmp16) {
HXLINE(  29)								int this73 = ::iterMagic::Iimg_obj::get(pixelImage->image,location8);
HXDLIN(  29)								int old8;
HXDLIN(  29)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)									old8 = ((((((this73 >> 24) & 255) << 24) | ((this73 & 255) << 16)) | (((this73 >> 8) & 255) << 8)) | ((this73 >> 16) & 255));
            								}
            								else {
HXLINE(  29)									old8 = this73;
            								}
HXDLIN(  29)								int rhs8 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  29)								Float a19;
HXDLIN(  29)								int this74 = ((old8 >> 24) & 255);
HXDLIN(  29)								if ((this74 == 0)) {
HXLINE(  29)									a19 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									a19 = (( (Float)(this74) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float r18;
HXDLIN(  29)								int this75 = ((old8 >> 16) & 255);
HXDLIN(  29)								if ((this75 == 0)) {
HXLINE(  29)									r18 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									r18 = (( (Float)(this75) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float g18;
HXDLIN(  29)								int this76 = ((old8 >> 8) & 255);
HXDLIN(  29)								if ((this76 == 0)) {
HXLINE(  29)									g18 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									g18 = (( (Float)(this76) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float b18;
HXDLIN(  29)								int this77 = (old8 & 255);
HXDLIN(  29)								if ((this77 == 0)) {
HXLINE(  29)									b18 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									b18 = (( (Float)(this77) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float a28;
HXDLIN(  29)								int this78 = ((rhs8 >> 24) & 255);
HXDLIN(  29)								if ((this78 == 0)) {
HXLINE(  29)									a28 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									a28 = (( (Float)(this78) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float r28;
HXDLIN(  29)								int this79 = ((rhs8 >> 16) & 255);
HXDLIN(  29)								if ((this79 == 0)) {
HXLINE(  29)									r28 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									r28 = (( (Float)(this79) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float g28;
HXDLIN(  29)								int this80 = ((rhs8 >> 8) & 255);
HXDLIN(  29)								if ((this80 == 0)) {
HXLINE(  29)									g28 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									g28 = (( (Float)(this80) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float b28;
HXDLIN(  29)								int this81 = (rhs8 & 255);
HXDLIN(  29)								if ((this81 == 0)) {
HXLINE(  29)									b28 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									b28 = (( (Float)(this81) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float a38 = (a19 * (( (Float)(1) ) - a28));
HXDLIN(  29)								int r19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r28 * a28))));
HXDLIN(  29)								int g19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g28 * a28))));
HXDLIN(  29)								int b19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b18 * a38) + (b28 * a28))));
HXDLIN(  29)								int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a28)));
HXDLIN(  29)								int blended8 = ((((a20 << 24) | (r19 << 16)) | (g19 << 8)) | b19);
HXDLIN(  29)								{
HXLINE(  29)									int _hx_tmp17;
HXDLIN(  29)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)										_hx_tmp17 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            									}
            									else {
HXLINE(  29)										_hx_tmp17 = blended8;
            									}
HXDLIN(  29)									::iterMagic::Iimg_obj::set(pixelImage->image,location8,_hx_tmp17);
            								}
            							}
            							else {
HXLINE(  29)								int value8;
HXDLIN(  29)								if (pixelImage->isLittle) {
HXLINE(  29)									value8 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            								}
            								else {
HXLINE(  29)									value8 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            								}
HXDLIN(  29)								::iterMagic::Iimg_obj::set(pixelImage->image,location8,value8);
            							}
            						}
HXDLIN(  29)						int i9 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * (intery - ( (Float)(::Math_obj::floor(intery)) )))));
HXDLIN(  29)						if ((i9 > 255)) {
HXLINE(  24)							i9 = 255;
            						}
HXLINE(  29)						if ((i9 < 0)) {
HXLINE(  25)							i9 = 0;
            						}
HXLINE(  29)						a0 = i9;
HXDLIN(  29)						{
HXLINE(  29)							int x5 = (::Math_obj::floor(intery) + 1);
HXDLIN(  29)							int location9;
HXDLIN(  29)							if (pixelImage->useVirtualPos) {
HXLINE(  29)								location9 = ::Std_obj::_hx_int(((((( (Float)(x3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x5) - pixelImage->virtualX));
            							}
            							else {
HXLINE(  29)								location9 = ::Std_obj::_hx_int(( (Float)(((x3 * pixelImage->width) + x5)) ));
            							}
HXDLIN(  29)							bool _hx_tmp18;
HXDLIN(  29)							if (pixelImage->transparent) {
HXLINE(  29)								_hx_tmp18 = (a0 < 254);
            							}
            							else {
HXLINE(  29)								_hx_tmp18 = false;
            							}
HXDLIN(  29)							if (_hx_tmp18) {
HXLINE(  29)								int this82 = ::iterMagic::Iimg_obj::get(pixelImage->image,location9);
HXDLIN(  29)								int old9;
HXDLIN(  29)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)									old9 = ((((((this82 >> 24) & 255) << 24) | ((this82 & 255) << 16)) | (((this82 >> 8) & 255) << 8)) | ((this82 >> 16) & 255));
            								}
            								else {
HXLINE(  29)									old9 = this82;
            								}
HXDLIN(  29)								int rhs9 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  29)								Float a110;
HXDLIN(  29)								int this83 = ((old9 >> 24) & 255);
HXDLIN(  29)								if ((this83 == 0)) {
HXLINE(  29)									a110 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									a110 = (( (Float)(this83) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float r110;
HXDLIN(  29)								int this84 = ((old9 >> 16) & 255);
HXDLIN(  29)								if ((this84 == 0)) {
HXLINE(  29)									r110 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									r110 = (( (Float)(this84) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float g110;
HXDLIN(  29)								int this85 = ((old9 >> 8) & 255);
HXDLIN(  29)								if ((this85 == 0)) {
HXLINE(  29)									g110 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									g110 = (( (Float)(this85) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float b110;
HXDLIN(  29)								int this86 = (old9 & 255);
HXDLIN(  29)								if ((this86 == 0)) {
HXLINE(  29)									b110 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									b110 = (( (Float)(this86) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float a29;
HXDLIN(  29)								int this87 = ((rhs9 >> 24) & 255);
HXDLIN(  29)								if ((this87 == 0)) {
HXLINE(  29)									a29 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									a29 = (( (Float)(this87) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float r29;
HXDLIN(  29)								int this88 = ((rhs9 >> 16) & 255);
HXDLIN(  29)								if ((this88 == 0)) {
HXLINE(  29)									r29 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									r29 = (( (Float)(this88) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float g29;
HXDLIN(  29)								int this89 = ((rhs9 >> 8) & 255);
HXDLIN(  29)								if ((this89 == 0)) {
HXLINE(  29)									g29 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									g29 = (( (Float)(this89) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float b29;
HXDLIN(  29)								int this90 = (rhs9 & 255);
HXDLIN(  29)								if ((this90 == 0)) {
HXLINE(  29)									b29 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									b29 = (( (Float)(this90) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float a39 = (a110 * (( (Float)(1) ) - a29));
HXDLIN(  29)								int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a39) + (r29 * a29))));
HXDLIN(  29)								int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a39) + (g29 * a29))));
HXDLIN(  29)								int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a39) + (b29 * a29))));
HXDLIN(  29)								int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a29)));
HXDLIN(  29)								int blended9 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b20);
HXDLIN(  29)								{
HXLINE(  29)									int _hx_tmp19;
HXDLIN(  29)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)										_hx_tmp19 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            									}
            									else {
HXLINE(  29)										_hx_tmp19 = blended9;
            									}
HXDLIN(  29)									::iterMagic::Iimg_obj::set(pixelImage->image,location9,_hx_tmp19);
            								}
            							}
            							else {
HXLINE(  29)								int value9;
HXDLIN(  29)								if (pixelImage->isLittle) {
HXLINE(  29)									value9 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            								}
            								else {
HXLINE(  29)									value9 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            								}
HXDLIN(  29)								::iterMagic::Iimg_obj::set(pixelImage->image,location9,value9);
            							}
            						}
HXLINE( 113)						intery = (intery + gradient);
            					}
            				}
            				else {
HXLINE(  29)					int _g2 = startX;
HXDLIN(  29)					int _g3 = endX;
HXDLIN(  29)					while((_g2 < _g3)){
HXLINE(  29)						_g2 = (_g2 + 1);
HXDLIN(  29)						int x6 = (_g2 - 1);
HXDLIN(  29)						int i10 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * ((( (Float)(1) ) - intery) + ::Math_obj::floor(intery)))));
HXDLIN(  29)						if ((i10 > 255)) {
HXLINE(  24)							i10 = 255;
            						}
HXLINE(  29)						if ((i10 < 0)) {
HXLINE(  25)							i10 = 0;
            						}
HXLINE(  29)						a0 = i10;
HXDLIN(  29)						{
HXLINE(  29)							int y3 = ::Math_obj::floor(intery);
HXDLIN(  29)							int location10;
HXDLIN(  29)							if (pixelImage->useVirtualPos) {
HXLINE(  29)								location10 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x6) - pixelImage->virtualX));
            							}
            							else {
HXLINE(  29)								location10 = ::Std_obj::_hx_int(( (Float)(((y3 * pixelImage->width) + x6)) ));
            							}
HXDLIN(  29)							bool _hx_tmp20;
HXDLIN(  29)							if (pixelImage->transparent) {
HXLINE(  29)								_hx_tmp20 = (a0 < 254);
            							}
            							else {
HXLINE(  29)								_hx_tmp20 = false;
            							}
HXDLIN(  29)							if (_hx_tmp20) {
HXLINE(  29)								int this91 = ::iterMagic::Iimg_obj::get(pixelImage->image,location10);
HXDLIN(  29)								int old10;
HXDLIN(  29)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)									old10 = ((((((this91 >> 24) & 255) << 24) | ((this91 & 255) << 16)) | (((this91 >> 8) & 255) << 8)) | ((this91 >> 16) & 255));
            								}
            								else {
HXLINE(  29)									old10 = this91;
            								}
HXDLIN(  29)								int rhs10 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  29)								Float a111;
HXDLIN(  29)								int this92 = ((old10 >> 24) & 255);
HXDLIN(  29)								if ((this92 == 0)) {
HXLINE(  29)									a111 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									a111 = (( (Float)(this92) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float r111;
HXDLIN(  29)								int this93 = ((old10 >> 16) & 255);
HXDLIN(  29)								if ((this93 == 0)) {
HXLINE(  29)									r111 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									r111 = (( (Float)(this93) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float g111;
HXDLIN(  29)								int this94 = ((old10 >> 8) & 255);
HXDLIN(  29)								if ((this94 == 0)) {
HXLINE(  29)									g111 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									g111 = (( (Float)(this94) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float b111;
HXDLIN(  29)								int this95 = (old10 & 255);
HXDLIN(  29)								if ((this95 == 0)) {
HXLINE(  29)									b111 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									b111 = (( (Float)(this95) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float a210;
HXDLIN(  29)								int this96 = ((rhs10 >> 24) & 255);
HXDLIN(  29)								if ((this96 == 0)) {
HXLINE(  29)									a210 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									a210 = (( (Float)(this96) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float r210;
HXDLIN(  29)								int this97 = ((rhs10 >> 16) & 255);
HXDLIN(  29)								if ((this97 == 0)) {
HXLINE(  29)									r210 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									r210 = (( (Float)(this97) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float g210;
HXDLIN(  29)								int this98 = ((rhs10 >> 8) & 255);
HXDLIN(  29)								if ((this98 == 0)) {
HXLINE(  29)									g210 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									g210 = (( (Float)(this98) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float b210;
HXDLIN(  29)								int this99 = (rhs10 & 255);
HXDLIN(  29)								if ((this99 == 0)) {
HXLINE(  29)									b210 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									b210 = (( (Float)(this99) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float a310 = (a111 * (( (Float)(1) ) - a210));
HXDLIN(  29)								int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a310) + (r210 * a210))));
HXDLIN(  29)								int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a310) + (g210 * a210))));
HXDLIN(  29)								int b30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a310) + (b210 * a210))));
HXDLIN(  29)								int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a210)));
HXDLIN(  29)								int blended10 = ((((a40 << 24) | (r30 << 16)) | (g30 << 8)) | b30);
HXDLIN(  29)								{
HXLINE(  29)									int _hx_tmp21;
HXDLIN(  29)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)										_hx_tmp21 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            									}
            									else {
HXLINE(  29)										_hx_tmp21 = blended10;
            									}
HXDLIN(  29)									::iterMagic::Iimg_obj::set(pixelImage->image,location10,_hx_tmp21);
            								}
            							}
            							else {
HXLINE(  29)								int value10;
HXDLIN(  29)								if (pixelImage->isLittle) {
HXLINE(  29)									value10 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            								}
            								else {
HXLINE(  29)									value10 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            								}
HXDLIN(  29)								::iterMagic::Iimg_obj::set(pixelImage->image,location10,value10);
            							}
            						}
HXDLIN(  29)						int i11 = ::Std_obj::_hx_int(((( (Float)(a) ) * solid) + ((range * ( (Float)(a) )) * (intery - ( (Float)(::Math_obj::floor(intery)) )))));
HXDLIN(  29)						if ((i11 > 255)) {
HXLINE(  24)							i11 = 255;
            						}
HXLINE(  29)						if ((i11 < 0)) {
HXLINE(  25)							i11 = 0;
            						}
HXLINE(  29)						a0 = i11;
HXDLIN(  29)						{
HXLINE(  29)							int y4 = (::Math_obj::floor(intery) + 1);
HXDLIN(  29)							int location11;
HXDLIN(  29)							if (pixelImage->useVirtualPos) {
HXLINE(  29)								location11 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x6) - pixelImage->virtualX));
            							}
            							else {
HXLINE(  29)								location11 = ::Std_obj::_hx_int(( (Float)(((y4 * pixelImage->width) + x6)) ));
            							}
HXDLIN(  29)							bool _hx_tmp22;
HXDLIN(  29)							if (pixelImage->transparent) {
HXLINE(  29)								_hx_tmp22 = (a0 < 254);
            							}
            							else {
HXLINE(  29)								_hx_tmp22 = false;
            							}
HXDLIN(  29)							if (_hx_tmp22) {
HXLINE(  29)								int this100 = ::iterMagic::Iimg_obj::get(pixelImage->image,location11);
HXDLIN(  29)								int old11;
HXDLIN(  29)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)									old11 = ((((((this100 >> 24) & 255) << 24) | ((this100 & 255) << 16)) | (((this100 >> 8) & 255) << 8)) | ((this100 >> 16) & 255));
            								}
            								else {
HXLINE(  29)									old11 = this100;
            								}
HXDLIN(  29)								int rhs11 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  29)								Float a112;
HXDLIN(  29)								int this101 = ((old11 >> 24) & 255);
HXDLIN(  29)								if ((this101 == 0)) {
HXLINE(  29)									a112 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									a112 = (( (Float)(this101) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float r112;
HXDLIN(  29)								int this102 = ((old11 >> 16) & 255);
HXDLIN(  29)								if ((this102 == 0)) {
HXLINE(  29)									r112 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									r112 = (( (Float)(this102) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float g112;
HXDLIN(  29)								int this103 = ((old11 >> 8) & 255);
HXDLIN(  29)								if ((this103 == 0)) {
HXLINE(  29)									g112 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									g112 = (( (Float)(this103) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float b112;
HXDLIN(  29)								int this104 = (old11 & 255);
HXDLIN(  29)								if ((this104 == 0)) {
HXLINE(  29)									b112 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									b112 = (( (Float)(this104) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float a211;
HXDLIN(  29)								int this105 = ((rhs11 >> 24) & 255);
HXDLIN(  29)								if ((this105 == 0)) {
HXLINE(  29)									a211 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									a211 = (( (Float)(this105) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float r211;
HXDLIN(  29)								int this106 = ((rhs11 >> 16) & 255);
HXDLIN(  29)								if ((this106 == 0)) {
HXLINE(  29)									r211 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									r211 = (( (Float)(this106) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float g211;
HXDLIN(  29)								int this107 = ((rhs11 >> 8) & 255);
HXDLIN(  29)								if ((this107 == 0)) {
HXLINE(  29)									g211 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									g211 = (( (Float)(this107) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float b211;
HXDLIN(  29)								int this108 = (rhs11 & 255);
HXDLIN(  29)								if ((this108 == 0)) {
HXLINE(  29)									b211 = ((Float)0.);
            								}
            								else {
HXLINE(  29)									b211 = (( (Float)(this108) ) / ( (Float)(255) ));
            								}
HXDLIN(  29)								Float a311 = (a112 * (( (Float)(1) ) - a211));
HXDLIN(  29)								int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a311) + (r211 * a211))));
HXDLIN(  29)								int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a311) + (g211 * a211))));
HXDLIN(  29)								int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a311) + (b211 * a211))));
HXDLIN(  29)								int a41 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a211)));
HXDLIN(  29)								int blended11 = ((((a41 << 24) | (r31 << 16)) | (g31 << 8)) | b31);
HXDLIN(  29)								{
HXLINE(  29)									int _hx_tmp23;
HXDLIN(  29)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  29)										_hx_tmp23 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            									}
            									else {
HXLINE(  29)										_hx_tmp23 = blended11;
            									}
HXDLIN(  29)									::iterMagic::Iimg_obj::set(pixelImage->image,location11,_hx_tmp23);
            								}
            							}
            							else {
HXLINE(  29)								int value11;
HXDLIN(  29)								if (pixelImage->isLittle) {
HXLINE(  29)									value11 = ((((a0 << 24) | (b << 16)) | (g << 8)) | r);
            								}
            								else {
HXLINE(  29)									value11 = ((((a0 << 24) | (r << 16)) | (g << 8)) | b);
            								}
HXDLIN(  29)								::iterMagic::Iimg_obj::set(pixelImage->image,location11,value11);
            							}
            						}
HXLINE( 122)						intery = (intery + gradient);
            					}
            				}
            			}
HXLINE(  30)			{
HXLINE(  30)				Float x01 = px;
HXDLIN(  30)				Float y01 = px;
HXDLIN(  30)				Float x11 = qx;
HXDLIN(  30)				Float y11 = qy;
HXDLIN(  30)				int color1 = this->strokeColor;
HXDLIN(  30)				int a42 = ((color1 >> 24) & 255);
HXDLIN(  30)				int r32 = ((color1 >> 16) & 255);
HXDLIN(  30)				int g32 = ((color1 >> 8) & 255);
HXDLIN(  30)				int b32 = (color1 & 255);
HXDLIN(  30)				bool steep1 = (::Math_obj::abs((y11 - y01)) > ::Math_obj::abs((x11 - x01)));
HXDLIN(  30)				Float temp1 = ((Float)0.);
HXDLIN(  30)				if (steep1) {
HXLINE(  42)					temp1 = y01;
HXLINE(  43)					y01 = x01;
HXLINE(  44)					x01 = temp1;
HXLINE(  45)					temp1 = y11;
HXLINE(  46)					y11 = x11;
HXLINE(  47)					x11 = temp1;
            				}
HXLINE(  30)				if ((x01 > x11)) {
HXLINE(  50)					temp1 = x11;
HXLINE(  51)					x11 = x01;
HXLINE(  52)					x01 = temp1;
HXLINE(  53)					temp1 = y11;
HXLINE(  54)					y11 = y01;
HXLINE(  55)					y01 = temp1;
            				}
HXLINE(  30)				Float dx1 = (x11 - x01);
HXDLIN(  30)				Float dy1 = (y11 - y01);
HXDLIN(  30)				Float gradient1;
HXDLIN(  30)				if ((dx1 == ((Float)0.0))) {
HXLINE(  30)					gradient1 = ((Float)1.);
            				}
            				else {
HXLINE(  30)					gradient1 = (dy1 / dx1);
            				}
HXDLIN(  30)				Float xend2 = (::Math_obj::floor(x01) + ((Float)0.5));
HXDLIN(  30)				Float yend2 = (y01 + (gradient1 * (xend2 - x01)));
HXDLIN(  30)				Float v2 = (x01 + ((Float)0.5));
HXDLIN(  30)				Float xgap2 = ((( (Float)(1) ) - v2) + ::Math_obj::floor(v2));
HXDLIN(  30)				int xpxl11 = ::Std_obj::_hx_int(xend2);
HXDLIN(  30)				int ypxl11 = ::Math_obj::floor(yend2);
HXDLIN(  30)				int a01 = 0;
HXDLIN(  30)				Float range1 = alpha;
HXDLIN(  30)				Float solid1 = (( (Float)(1) ) - range1);
HXDLIN(  30)				if (steep1) {
HXLINE(  30)					int i12 = ::Std_obj::_hx_int(((( (Float)(a42) ) * solid1) + ((range1 * ( (Float)(a42) )) * (((( (Float)(1) ) - yend2) + ::Math_obj::floor(yend2)) * xgap2))));
HXDLIN(  30)					if ((i12 > 255)) {
HXLINE(  24)						i12 = 255;
            					}
HXLINE(  30)					if ((i12 < 0)) {
HXLINE(  25)						i12 = 0;
            					}
HXLINE(  30)					a01 = i12;
HXDLIN(  30)					{
HXLINE(  30)						int location12;
HXDLIN(  30)						if (pixelImage->useVirtualPos) {
HXLINE(  30)							location12 = ::Std_obj::_hx_int(((((( (Float)(xpxl11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + ypxl11) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  30)							location12 = ::Std_obj::_hx_int(( (Float)(((xpxl11 * pixelImage->width) + ypxl11)) ));
            						}
HXDLIN(  30)						bool _hx_tmp24;
HXDLIN(  30)						if (pixelImage->transparent) {
HXLINE(  30)							_hx_tmp24 = (a01 < 254);
            						}
            						else {
HXLINE(  30)							_hx_tmp24 = false;
            						}
HXDLIN(  30)						if (_hx_tmp24) {
HXLINE(  30)							int this109 = ::iterMagic::Iimg_obj::get(pixelImage->image,location12);
HXDLIN(  30)							int old12;
HXDLIN(  30)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)								old12 = ((((((this109 >> 24) & 255) << 24) | ((this109 & 255) << 16)) | (((this109 >> 8) & 255) << 8)) | ((this109 >> 16) & 255));
            							}
            							else {
HXLINE(  30)								old12 = this109;
            							}
HXDLIN(  30)							int rhs12 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
HXDLIN(  30)							Float a113;
HXDLIN(  30)							int this110 = ((old12 >> 24) & 255);
HXDLIN(  30)							if ((this110 == 0)) {
HXLINE(  30)								a113 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a113 = (( (Float)(this110) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r113;
HXDLIN(  30)							int this111 = ((old12 >> 16) & 255);
HXDLIN(  30)							if ((this111 == 0)) {
HXLINE(  30)								r113 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r113 = (( (Float)(this111) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g113;
HXDLIN(  30)							int this112 = ((old12 >> 8) & 255);
HXDLIN(  30)							if ((this112 == 0)) {
HXLINE(  30)								g113 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g113 = (( (Float)(this112) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b113;
HXDLIN(  30)							int this113 = (old12 & 255);
HXDLIN(  30)							if ((this113 == 0)) {
HXLINE(  30)								b113 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b113 = (( (Float)(this113) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a212;
HXDLIN(  30)							int this114 = ((rhs12 >> 24) & 255);
HXDLIN(  30)							if ((this114 == 0)) {
HXLINE(  30)								a212 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a212 = (( (Float)(this114) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r212;
HXDLIN(  30)							int this115 = ((rhs12 >> 16) & 255);
HXDLIN(  30)							if ((this115 == 0)) {
HXLINE(  30)								r212 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r212 = (( (Float)(this115) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g212;
HXDLIN(  30)							int this116 = ((rhs12 >> 8) & 255);
HXDLIN(  30)							if ((this116 == 0)) {
HXLINE(  30)								g212 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g212 = (( (Float)(this116) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b212;
HXDLIN(  30)							int this117 = (rhs12 & 255);
HXDLIN(  30)							if ((this117 == 0)) {
HXLINE(  30)								b212 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b212 = (( (Float)(this117) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a312 = (a113 * (( (Float)(1) ) - a212));
HXDLIN(  30)							int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a312) + (r212 * a212))));
HXDLIN(  30)							int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a312) + (g212 * a212))));
HXDLIN(  30)							int b33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a312) + (b212 * a212))));
HXDLIN(  30)							int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a212)));
HXDLIN(  30)							int blended12 = ((((a43 << 24) | (r33 << 16)) | (g33 << 8)) | b33);
HXDLIN(  30)							{
HXLINE(  30)								int _hx_tmp25;
HXDLIN(  30)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)									_hx_tmp25 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            								}
            								else {
HXLINE(  30)									_hx_tmp25 = blended12;
            								}
HXDLIN(  30)								::iterMagic::Iimg_obj::set(pixelImage->image,location12,_hx_tmp25);
            							}
            						}
            						else {
HXLINE(  30)							int value12;
HXDLIN(  30)							if (pixelImage->isLittle) {
HXLINE(  30)								value12 = ((((a01 << 24) | (b32 << 16)) | (g32 << 8)) | r32);
            							}
            							else {
HXLINE(  30)								value12 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
            							}
HXDLIN(  30)							::iterMagic::Iimg_obj::set(pixelImage->image,location12,value12);
            						}
            					}
HXDLIN(  30)					int i13 = ::Std_obj::_hx_int(((( (Float)(a42) ) * solid1) + ((range1 * ( (Float)(a42) )) * ((yend2 - ( (Float)(::Math_obj::floor(yend2)) )) * xgap2))));
HXDLIN(  30)					if ((i13 > 255)) {
HXLINE(  24)						i13 = 255;
            					}
HXLINE(  30)					if ((i13 < 0)) {
HXLINE(  25)						i13 = 0;
            					}
HXLINE(  30)					a01 = i13;
HXDLIN(  30)					{
HXLINE(  30)						int x7 = (ypxl11 + 1);
HXDLIN(  30)						int location13;
HXDLIN(  30)						if (pixelImage->useVirtualPos) {
HXLINE(  30)							location13 = ::Std_obj::_hx_int(((((( (Float)(xpxl11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x7) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  30)							location13 = ::Std_obj::_hx_int(( (Float)(((xpxl11 * pixelImage->width) + x7)) ));
            						}
HXDLIN(  30)						bool _hx_tmp26;
HXDLIN(  30)						if (pixelImage->transparent) {
HXLINE(  30)							_hx_tmp26 = (a01 < 254);
            						}
            						else {
HXLINE(  30)							_hx_tmp26 = false;
            						}
HXDLIN(  30)						if (_hx_tmp26) {
HXLINE(  30)							int this118 = ::iterMagic::Iimg_obj::get(pixelImage->image,location13);
HXDLIN(  30)							int old13;
HXDLIN(  30)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)								old13 = ((((((this118 >> 24) & 255) << 24) | ((this118 & 255) << 16)) | (((this118 >> 8) & 255) << 8)) | ((this118 >> 16) & 255));
            							}
            							else {
HXLINE(  30)								old13 = this118;
            							}
HXDLIN(  30)							int rhs13 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
HXDLIN(  30)							Float a114;
HXDLIN(  30)							int this119 = ((old13 >> 24) & 255);
HXDLIN(  30)							if ((this119 == 0)) {
HXLINE(  30)								a114 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a114 = (( (Float)(this119) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r114;
HXDLIN(  30)							int this120 = ((old13 >> 16) & 255);
HXDLIN(  30)							if ((this120 == 0)) {
HXLINE(  30)								r114 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r114 = (( (Float)(this120) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g114;
HXDLIN(  30)							int this121 = ((old13 >> 8) & 255);
HXDLIN(  30)							if ((this121 == 0)) {
HXLINE(  30)								g114 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g114 = (( (Float)(this121) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b114;
HXDLIN(  30)							int this122 = (old13 & 255);
HXDLIN(  30)							if ((this122 == 0)) {
HXLINE(  30)								b114 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b114 = (( (Float)(this122) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a213;
HXDLIN(  30)							int this123 = ((rhs13 >> 24) & 255);
HXDLIN(  30)							if ((this123 == 0)) {
HXLINE(  30)								a213 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a213 = (( (Float)(this123) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r213;
HXDLIN(  30)							int this124 = ((rhs13 >> 16) & 255);
HXDLIN(  30)							if ((this124 == 0)) {
HXLINE(  30)								r213 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r213 = (( (Float)(this124) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g213;
HXDLIN(  30)							int this125 = ((rhs13 >> 8) & 255);
HXDLIN(  30)							if ((this125 == 0)) {
HXLINE(  30)								g213 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g213 = (( (Float)(this125) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b213;
HXDLIN(  30)							int this126 = (rhs13 & 255);
HXDLIN(  30)							if ((this126 == 0)) {
HXLINE(  30)								b213 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b213 = (( (Float)(this126) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a313 = (a114 * (( (Float)(1) ) - a213));
HXDLIN(  30)							int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a313) + (r213 * a213))));
HXDLIN(  30)							int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a313) + (g213 * a213))));
HXDLIN(  30)							int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a313) + (b213 * a213))));
HXDLIN(  30)							int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a213)));
HXDLIN(  30)							int blended13 = ((((a44 << 24) | (r34 << 16)) | (g34 << 8)) | b34);
HXDLIN(  30)							{
HXLINE(  30)								int _hx_tmp27;
HXDLIN(  30)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)									_hx_tmp27 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            								}
            								else {
HXLINE(  30)									_hx_tmp27 = blended13;
            								}
HXDLIN(  30)								::iterMagic::Iimg_obj::set(pixelImage->image,location13,_hx_tmp27);
            							}
            						}
            						else {
HXLINE(  30)							int value13;
HXDLIN(  30)							if (pixelImage->isLittle) {
HXLINE(  30)								value13 = ((((a01 << 24) | (b32 << 16)) | (g32 << 8)) | r32);
            							}
            							else {
HXLINE(  30)								value13 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
            							}
HXDLIN(  30)							::iterMagic::Iimg_obj::set(pixelImage->image,location13,value13);
            						}
            					}
            				}
            				else {
HXLINE(  30)					int i14 = ::Std_obj::_hx_int(((( (Float)(a42) ) * solid1) + ((range1 * ( (Float)(a42) )) * (((( (Float)(1) ) - yend2) + ::Math_obj::floor(yend2)) * xgap2))));
HXDLIN(  30)					if ((i14 > 255)) {
HXLINE(  24)						i14 = 255;
            					}
HXLINE(  30)					if ((i14 < 0)) {
HXLINE(  25)						i14 = 0;
            					}
HXLINE(  30)					a01 = i14;
HXDLIN(  30)					{
HXLINE(  30)						int location14;
HXDLIN(  30)						if (pixelImage->useVirtualPos) {
HXLINE(  30)							location14 = ::Std_obj::_hx_int(((((( (Float)(ypxl11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + xpxl11) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  30)							location14 = ::Std_obj::_hx_int(( (Float)(((ypxl11 * pixelImage->width) + xpxl11)) ));
            						}
HXDLIN(  30)						bool _hx_tmp28;
HXDLIN(  30)						if (pixelImage->transparent) {
HXLINE(  30)							_hx_tmp28 = (a01 < 254);
            						}
            						else {
HXLINE(  30)							_hx_tmp28 = false;
            						}
HXDLIN(  30)						if (_hx_tmp28) {
HXLINE(  30)							int this127 = ::iterMagic::Iimg_obj::get(pixelImage->image,location14);
HXDLIN(  30)							int old14;
HXDLIN(  30)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)								old14 = ((((((this127 >> 24) & 255) << 24) | ((this127 & 255) << 16)) | (((this127 >> 8) & 255) << 8)) | ((this127 >> 16) & 255));
            							}
            							else {
HXLINE(  30)								old14 = this127;
            							}
HXDLIN(  30)							int rhs14 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
HXDLIN(  30)							Float a115;
HXDLIN(  30)							int this128 = ((old14 >> 24) & 255);
HXDLIN(  30)							if ((this128 == 0)) {
HXLINE(  30)								a115 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a115 = (( (Float)(this128) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r115;
HXDLIN(  30)							int this129 = ((old14 >> 16) & 255);
HXDLIN(  30)							if ((this129 == 0)) {
HXLINE(  30)								r115 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r115 = (( (Float)(this129) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g115;
HXDLIN(  30)							int this130 = ((old14 >> 8) & 255);
HXDLIN(  30)							if ((this130 == 0)) {
HXLINE(  30)								g115 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g115 = (( (Float)(this130) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b115;
HXDLIN(  30)							int this131 = (old14 & 255);
HXDLIN(  30)							if ((this131 == 0)) {
HXLINE(  30)								b115 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b115 = (( (Float)(this131) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a214;
HXDLIN(  30)							int this132 = ((rhs14 >> 24) & 255);
HXDLIN(  30)							if ((this132 == 0)) {
HXLINE(  30)								a214 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a214 = (( (Float)(this132) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r214;
HXDLIN(  30)							int this133 = ((rhs14 >> 16) & 255);
HXDLIN(  30)							if ((this133 == 0)) {
HXLINE(  30)								r214 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r214 = (( (Float)(this133) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g214;
HXDLIN(  30)							int this134 = ((rhs14 >> 8) & 255);
HXDLIN(  30)							if ((this134 == 0)) {
HXLINE(  30)								g214 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g214 = (( (Float)(this134) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b214;
HXDLIN(  30)							int this135 = (rhs14 & 255);
HXDLIN(  30)							if ((this135 == 0)) {
HXLINE(  30)								b214 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b214 = (( (Float)(this135) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a314 = (a115 * (( (Float)(1) ) - a214));
HXDLIN(  30)							int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a314) + (r214 * a214))));
HXDLIN(  30)							int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a314) + (g214 * a214))));
HXDLIN(  30)							int b35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a314) + (b214 * a214))));
HXDLIN(  30)							int a45 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a214)));
HXDLIN(  30)							int blended14 = ((((a45 << 24) | (r35 << 16)) | (g35 << 8)) | b35);
HXDLIN(  30)							{
HXLINE(  30)								int _hx_tmp29;
HXDLIN(  30)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)									_hx_tmp29 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            								}
            								else {
HXLINE(  30)									_hx_tmp29 = blended14;
            								}
HXDLIN(  30)								::iterMagic::Iimg_obj::set(pixelImage->image,location14,_hx_tmp29);
            							}
            						}
            						else {
HXLINE(  30)							int value14;
HXDLIN(  30)							if (pixelImage->isLittle) {
HXLINE(  30)								value14 = ((((a01 << 24) | (b32 << 16)) | (g32 << 8)) | r32);
            							}
            							else {
HXLINE(  30)								value14 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
            							}
HXDLIN(  30)							::iterMagic::Iimg_obj::set(pixelImage->image,location14,value14);
            						}
            					}
HXDLIN(  30)					int i15 = ::Std_obj::_hx_int(((( (Float)(a42) ) * solid1) + ((range1 * ( (Float)(a42) )) * ((yend2 - ( (Float)(::Math_obj::floor(yend2)) )) * xgap2))));
HXDLIN(  30)					if ((i15 > 255)) {
HXLINE(  24)						i15 = 255;
            					}
HXLINE(  30)					if ((i15 < 0)) {
HXLINE(  25)						i15 = 0;
            					}
HXLINE(  30)					a01 = i15;
HXDLIN(  30)					{
HXLINE(  30)						int y5 = (ypxl11 + 1);
HXDLIN(  30)						int location15;
HXDLIN(  30)						if (pixelImage->useVirtualPos) {
HXLINE(  30)							location15 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + xpxl11) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  30)							location15 = ::Std_obj::_hx_int(( (Float)(((y5 * pixelImage->width) + xpxl11)) ));
            						}
HXDLIN(  30)						bool _hx_tmp30;
HXDLIN(  30)						if (pixelImage->transparent) {
HXLINE(  30)							_hx_tmp30 = (a01 < 254);
            						}
            						else {
HXLINE(  30)							_hx_tmp30 = false;
            						}
HXDLIN(  30)						if (_hx_tmp30) {
HXLINE(  30)							int this136 = ::iterMagic::Iimg_obj::get(pixelImage->image,location15);
HXDLIN(  30)							int old15;
HXDLIN(  30)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)								old15 = ((((((this136 >> 24) & 255) << 24) | ((this136 & 255) << 16)) | (((this136 >> 8) & 255) << 8)) | ((this136 >> 16) & 255));
            							}
            							else {
HXLINE(  30)								old15 = this136;
            							}
HXDLIN(  30)							int rhs15 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
HXDLIN(  30)							Float a116;
HXDLIN(  30)							int this137 = ((old15 >> 24) & 255);
HXDLIN(  30)							if ((this137 == 0)) {
HXLINE(  30)								a116 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a116 = (( (Float)(this137) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r116;
HXDLIN(  30)							int this138 = ((old15 >> 16) & 255);
HXDLIN(  30)							if ((this138 == 0)) {
HXLINE(  30)								r116 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r116 = (( (Float)(this138) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g116;
HXDLIN(  30)							int this139 = ((old15 >> 8) & 255);
HXDLIN(  30)							if ((this139 == 0)) {
HXLINE(  30)								g116 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g116 = (( (Float)(this139) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b116;
HXDLIN(  30)							int this140 = (old15 & 255);
HXDLIN(  30)							if ((this140 == 0)) {
HXLINE(  30)								b116 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b116 = (( (Float)(this140) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a215;
HXDLIN(  30)							int this141 = ((rhs15 >> 24) & 255);
HXDLIN(  30)							if ((this141 == 0)) {
HXLINE(  30)								a215 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a215 = (( (Float)(this141) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r215;
HXDLIN(  30)							int this142 = ((rhs15 >> 16) & 255);
HXDLIN(  30)							if ((this142 == 0)) {
HXLINE(  30)								r215 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r215 = (( (Float)(this142) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g215;
HXDLIN(  30)							int this143 = ((rhs15 >> 8) & 255);
HXDLIN(  30)							if ((this143 == 0)) {
HXLINE(  30)								g215 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g215 = (( (Float)(this143) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b215;
HXDLIN(  30)							int this144 = (rhs15 & 255);
HXDLIN(  30)							if ((this144 == 0)) {
HXLINE(  30)								b215 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b215 = (( (Float)(this144) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a315 = (a116 * (( (Float)(1) ) - a215));
HXDLIN(  30)							int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a315) + (r215 * a215))));
HXDLIN(  30)							int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a315) + (g215 * a215))));
HXDLIN(  30)							int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a315) + (b215 * a215))));
HXDLIN(  30)							int a46 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a215)));
HXDLIN(  30)							int blended15 = ((((a46 << 24) | (r36 << 16)) | (g36 << 8)) | b36);
HXDLIN(  30)							{
HXLINE(  30)								int _hx_tmp31;
HXDLIN(  30)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)									_hx_tmp31 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            								}
            								else {
HXLINE(  30)									_hx_tmp31 = blended15;
            								}
HXDLIN(  30)								::iterMagic::Iimg_obj::set(pixelImage->image,location15,_hx_tmp31);
            							}
            						}
            						else {
HXLINE(  30)							int value15;
HXDLIN(  30)							if (pixelImage->isLittle) {
HXLINE(  30)								value15 = ((((a01 << 24) | (b32 << 16)) | (g32 << 8)) | r32);
            							}
            							else {
HXLINE(  30)								value15 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
            							}
HXDLIN(  30)							::iterMagic::Iimg_obj::set(pixelImage->image,location15,value15);
            						}
            					}
            				}
HXDLIN(  30)				Float intery1 = (yend2 + gradient1);
HXDLIN(  30)				Float xend3 = (::Math_obj::floor(x11) + ((Float)0.5));
HXDLIN(  30)				Float yend3 = (y11 + (gradient1 * (xend3 - x11)));
HXDLIN(  30)				Float v3 = (x11 + ((Float)0.5));
HXDLIN(  30)				Float xgap3 = (v3 - ( (Float)(::Math_obj::floor(v3)) ));
HXDLIN(  30)				int xpxl21 = ::Std_obj::_hx_int(xend3);
HXDLIN(  30)				int ypxl21 = ::Math_obj::floor(yend3);
HXDLIN(  30)				if (steep1) {
HXLINE(  30)					int i16 = ::Std_obj::_hx_int(((( (Float)(a42) ) * solid1) + ((range1 * ( (Float)(a42) )) * (((( (Float)(1) ) - yend3) + ::Math_obj::floor(yend3)) * xgap3))));
HXDLIN(  30)					if ((i16 > 255)) {
HXLINE(  24)						i16 = 255;
            					}
HXLINE(  30)					if ((i16 < 0)) {
HXLINE(  25)						i16 = 0;
            					}
HXLINE(  30)					a01 = i16;
HXDLIN(  30)					{
HXLINE(  30)						int location16;
HXDLIN(  30)						if (pixelImage->useVirtualPos) {
HXLINE(  30)							location16 = ::Std_obj::_hx_int(((((( (Float)(xpxl21) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + ypxl21) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  30)							location16 = ::Std_obj::_hx_int(( (Float)(((xpxl21 * pixelImage->width) + ypxl21)) ));
            						}
HXDLIN(  30)						bool _hx_tmp32;
HXDLIN(  30)						if (pixelImage->transparent) {
HXLINE(  30)							_hx_tmp32 = (a01 < 254);
            						}
            						else {
HXLINE(  30)							_hx_tmp32 = false;
            						}
HXDLIN(  30)						if (_hx_tmp32) {
HXLINE(  30)							int this145 = ::iterMagic::Iimg_obj::get(pixelImage->image,location16);
HXDLIN(  30)							int old16;
HXDLIN(  30)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)								old16 = ((((((this145 >> 24) & 255) << 24) | ((this145 & 255) << 16)) | (((this145 >> 8) & 255) << 8)) | ((this145 >> 16) & 255));
            							}
            							else {
HXLINE(  30)								old16 = this145;
            							}
HXDLIN(  30)							int rhs16 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
HXDLIN(  30)							Float a117;
HXDLIN(  30)							int this146 = ((old16 >> 24) & 255);
HXDLIN(  30)							if ((this146 == 0)) {
HXLINE(  30)								a117 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a117 = (( (Float)(this146) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r117;
HXDLIN(  30)							int this147 = ((old16 >> 16) & 255);
HXDLIN(  30)							if ((this147 == 0)) {
HXLINE(  30)								r117 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r117 = (( (Float)(this147) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g117;
HXDLIN(  30)							int this148 = ((old16 >> 8) & 255);
HXDLIN(  30)							if ((this148 == 0)) {
HXLINE(  30)								g117 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g117 = (( (Float)(this148) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b117;
HXDLIN(  30)							int this149 = (old16 & 255);
HXDLIN(  30)							if ((this149 == 0)) {
HXLINE(  30)								b117 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b117 = (( (Float)(this149) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a216;
HXDLIN(  30)							int this150 = ((rhs16 >> 24) & 255);
HXDLIN(  30)							if ((this150 == 0)) {
HXLINE(  30)								a216 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a216 = (( (Float)(this150) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r216;
HXDLIN(  30)							int this151 = ((rhs16 >> 16) & 255);
HXDLIN(  30)							if ((this151 == 0)) {
HXLINE(  30)								r216 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r216 = (( (Float)(this151) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g216;
HXDLIN(  30)							int this152 = ((rhs16 >> 8) & 255);
HXDLIN(  30)							if ((this152 == 0)) {
HXLINE(  30)								g216 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g216 = (( (Float)(this152) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b216;
HXDLIN(  30)							int this153 = (rhs16 & 255);
HXDLIN(  30)							if ((this153 == 0)) {
HXLINE(  30)								b216 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b216 = (( (Float)(this153) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a316 = (a117 * (( (Float)(1) ) - a216));
HXDLIN(  30)							int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a316) + (r216 * a216))));
HXDLIN(  30)							int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a316) + (g216 * a216))));
HXDLIN(  30)							int b37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a316) + (b216 * a216))));
HXDLIN(  30)							int a47 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a216)));
HXDLIN(  30)							int blended16 = ((((a47 << 24) | (r37 << 16)) | (g37 << 8)) | b37);
HXDLIN(  30)							{
HXLINE(  30)								int _hx_tmp33;
HXDLIN(  30)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)									_hx_tmp33 = ((((((blended16 >> 24) & 255) << 24) | ((blended16 & 255) << 16)) | (((blended16 >> 8) & 255) << 8)) | ((blended16 >> 16) & 255));
            								}
            								else {
HXLINE(  30)									_hx_tmp33 = blended16;
            								}
HXDLIN(  30)								::iterMagic::Iimg_obj::set(pixelImage->image,location16,_hx_tmp33);
            							}
            						}
            						else {
HXLINE(  30)							int value16;
HXDLIN(  30)							if (pixelImage->isLittle) {
HXLINE(  30)								value16 = ((((a01 << 24) | (b32 << 16)) | (g32 << 8)) | r32);
            							}
            							else {
HXLINE(  30)								value16 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
            							}
HXDLIN(  30)							::iterMagic::Iimg_obj::set(pixelImage->image,location16,value16);
            						}
            					}
HXDLIN(  30)					int i17 = ::Std_obj::_hx_int(((( (Float)(a42) ) * solid1) + ((range1 * ( (Float)(a42) )) * ((yend3 - ( (Float)(::Math_obj::floor(yend3)) )) * xgap3))));
HXDLIN(  30)					if ((i17 > 255)) {
HXLINE(  24)						i17 = 255;
            					}
HXLINE(  30)					if ((i17 < 0)) {
HXLINE(  25)						i17 = 0;
            					}
HXLINE(  30)					a01 = i17;
HXDLIN(  30)					{
HXLINE(  30)						int x8 = (ypxl21 + 1);
HXDLIN(  30)						int location17;
HXDLIN(  30)						if (pixelImage->useVirtualPos) {
HXLINE(  30)							location17 = ::Std_obj::_hx_int(((((( (Float)(xpxl21) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x8) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  30)							location17 = ::Std_obj::_hx_int(( (Float)(((xpxl21 * pixelImage->width) + x8)) ));
            						}
HXDLIN(  30)						bool _hx_tmp34;
HXDLIN(  30)						if (pixelImage->transparent) {
HXLINE(  30)							_hx_tmp34 = (a01 < 254);
            						}
            						else {
HXLINE(  30)							_hx_tmp34 = false;
            						}
HXDLIN(  30)						if (_hx_tmp34) {
HXLINE(  30)							int this154 = ::iterMagic::Iimg_obj::get(pixelImage->image,location17);
HXDLIN(  30)							int old17;
HXDLIN(  30)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)								old17 = ((((((this154 >> 24) & 255) << 24) | ((this154 & 255) << 16)) | (((this154 >> 8) & 255) << 8)) | ((this154 >> 16) & 255));
            							}
            							else {
HXLINE(  30)								old17 = this154;
            							}
HXDLIN(  30)							int rhs17 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
HXDLIN(  30)							Float a118;
HXDLIN(  30)							int this155 = ((old17 >> 24) & 255);
HXDLIN(  30)							if ((this155 == 0)) {
HXLINE(  30)								a118 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a118 = (( (Float)(this155) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r118;
HXDLIN(  30)							int this156 = ((old17 >> 16) & 255);
HXDLIN(  30)							if ((this156 == 0)) {
HXLINE(  30)								r118 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r118 = (( (Float)(this156) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g118;
HXDLIN(  30)							int this157 = ((old17 >> 8) & 255);
HXDLIN(  30)							if ((this157 == 0)) {
HXLINE(  30)								g118 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g118 = (( (Float)(this157) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b118;
HXDLIN(  30)							int this158 = (old17 & 255);
HXDLIN(  30)							if ((this158 == 0)) {
HXLINE(  30)								b118 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b118 = (( (Float)(this158) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a217;
HXDLIN(  30)							int this159 = ((rhs17 >> 24) & 255);
HXDLIN(  30)							if ((this159 == 0)) {
HXLINE(  30)								a217 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a217 = (( (Float)(this159) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r217;
HXDLIN(  30)							int this160 = ((rhs17 >> 16) & 255);
HXDLIN(  30)							if ((this160 == 0)) {
HXLINE(  30)								r217 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r217 = (( (Float)(this160) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g217;
HXDLIN(  30)							int this161 = ((rhs17 >> 8) & 255);
HXDLIN(  30)							if ((this161 == 0)) {
HXLINE(  30)								g217 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g217 = (( (Float)(this161) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b217;
HXDLIN(  30)							int this162 = (rhs17 & 255);
HXDLIN(  30)							if ((this162 == 0)) {
HXLINE(  30)								b217 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b217 = (( (Float)(this162) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a317 = (a118 * (( (Float)(1) ) - a217));
HXDLIN(  30)							int r38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r118 * a317) + (r217 * a217))));
HXDLIN(  30)							int g38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g118 * a317) + (g217 * a217))));
HXDLIN(  30)							int b38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a317) + (b217 * a217))));
HXDLIN(  30)							int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a317 + a217)));
HXDLIN(  30)							int blended17 = ((((a48 << 24) | (r38 << 16)) | (g38 << 8)) | b38);
HXDLIN(  30)							{
HXLINE(  30)								int _hx_tmp35;
HXDLIN(  30)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)									_hx_tmp35 = ((((((blended17 >> 24) & 255) << 24) | ((blended17 & 255) << 16)) | (((blended17 >> 8) & 255) << 8)) | ((blended17 >> 16) & 255));
            								}
            								else {
HXLINE(  30)									_hx_tmp35 = blended17;
            								}
HXDLIN(  30)								::iterMagic::Iimg_obj::set(pixelImage->image,location17,_hx_tmp35);
            							}
            						}
            						else {
HXLINE(  30)							int value17;
HXDLIN(  30)							if (pixelImage->isLittle) {
HXLINE(  30)								value17 = ((((a01 << 24) | (b32 << 16)) | (g32 << 8)) | r32);
            							}
            							else {
HXLINE(  30)								value17 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
            							}
HXDLIN(  30)							::iterMagic::Iimg_obj::set(pixelImage->image,location17,value17);
            						}
            					}
            				}
            				else {
HXLINE(  30)					int i18 = ::Std_obj::_hx_int(((( (Float)(a42) ) * solid1) + ((range1 * ( (Float)(a42) )) * (((( (Float)(1) ) - yend3) + ::Math_obj::floor(yend3)) * xgap3))));
HXDLIN(  30)					if ((i18 > 255)) {
HXLINE(  24)						i18 = 255;
            					}
HXLINE(  30)					if ((i18 < 0)) {
HXLINE(  25)						i18 = 0;
            					}
HXLINE(  30)					a01 = i18;
HXDLIN(  30)					{
HXLINE(  30)						int location18;
HXDLIN(  30)						if (pixelImage->useVirtualPos) {
HXLINE(  30)							location18 = ::Std_obj::_hx_int(((((( (Float)(ypxl21) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + xpxl21) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  30)							location18 = ::Std_obj::_hx_int(( (Float)(((ypxl21 * pixelImage->width) + xpxl21)) ));
            						}
HXDLIN(  30)						bool _hx_tmp36;
HXDLIN(  30)						if (pixelImage->transparent) {
HXLINE(  30)							_hx_tmp36 = (a01 < 254);
            						}
            						else {
HXLINE(  30)							_hx_tmp36 = false;
            						}
HXDLIN(  30)						if (_hx_tmp36) {
HXLINE(  30)							int this163 = ::iterMagic::Iimg_obj::get(pixelImage->image,location18);
HXDLIN(  30)							int old18;
HXDLIN(  30)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)								old18 = ((((((this163 >> 24) & 255) << 24) | ((this163 & 255) << 16)) | (((this163 >> 8) & 255) << 8)) | ((this163 >> 16) & 255));
            							}
            							else {
HXLINE(  30)								old18 = this163;
            							}
HXDLIN(  30)							int rhs18 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
HXDLIN(  30)							Float a119;
HXDLIN(  30)							int this164 = ((old18 >> 24) & 255);
HXDLIN(  30)							if ((this164 == 0)) {
HXLINE(  30)								a119 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a119 = (( (Float)(this164) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r119;
HXDLIN(  30)							int this165 = ((old18 >> 16) & 255);
HXDLIN(  30)							if ((this165 == 0)) {
HXLINE(  30)								r119 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r119 = (( (Float)(this165) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g119;
HXDLIN(  30)							int this166 = ((old18 >> 8) & 255);
HXDLIN(  30)							if ((this166 == 0)) {
HXLINE(  30)								g119 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g119 = (( (Float)(this166) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b119;
HXDLIN(  30)							int this167 = (old18 & 255);
HXDLIN(  30)							if ((this167 == 0)) {
HXLINE(  30)								b119 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b119 = (( (Float)(this167) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a218;
HXDLIN(  30)							int this168 = ((rhs18 >> 24) & 255);
HXDLIN(  30)							if ((this168 == 0)) {
HXLINE(  30)								a218 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a218 = (( (Float)(this168) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r218;
HXDLIN(  30)							int this169 = ((rhs18 >> 16) & 255);
HXDLIN(  30)							if ((this169 == 0)) {
HXLINE(  30)								r218 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r218 = (( (Float)(this169) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g218;
HXDLIN(  30)							int this170 = ((rhs18 >> 8) & 255);
HXDLIN(  30)							if ((this170 == 0)) {
HXLINE(  30)								g218 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g218 = (( (Float)(this170) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b218;
HXDLIN(  30)							int this171 = (rhs18 & 255);
HXDLIN(  30)							if ((this171 == 0)) {
HXLINE(  30)								b218 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b218 = (( (Float)(this171) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a318 = (a119 * (( (Float)(1) ) - a218));
HXDLIN(  30)							int r39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r119 * a318) + (r218 * a218))));
HXDLIN(  30)							int g39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g119 * a318) + (g218 * a218))));
HXDLIN(  30)							int b39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a318) + (b218 * a218))));
HXDLIN(  30)							int a49 = ::Std_obj::_hx_int((( (Float)(255) ) * (a318 + a218)));
HXDLIN(  30)							int blended18 = ((((a49 << 24) | (r39 << 16)) | (g39 << 8)) | b39);
HXDLIN(  30)							{
HXLINE(  30)								int _hx_tmp37;
HXDLIN(  30)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)									_hx_tmp37 = ((((((blended18 >> 24) & 255) << 24) | ((blended18 & 255) << 16)) | (((blended18 >> 8) & 255) << 8)) | ((blended18 >> 16) & 255));
            								}
            								else {
HXLINE(  30)									_hx_tmp37 = blended18;
            								}
HXDLIN(  30)								::iterMagic::Iimg_obj::set(pixelImage->image,location18,_hx_tmp37);
            							}
            						}
            						else {
HXLINE(  30)							int value18;
HXDLIN(  30)							if (pixelImage->isLittle) {
HXLINE(  30)								value18 = ((((a01 << 24) | (b32 << 16)) | (g32 << 8)) | r32);
            							}
            							else {
HXLINE(  30)								value18 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
            							}
HXDLIN(  30)							::iterMagic::Iimg_obj::set(pixelImage->image,location18,value18);
            						}
            					}
HXDLIN(  30)					int i19 = ::Std_obj::_hx_int(((( (Float)(a42) ) * solid1) + ((range1 * ( (Float)(a42) )) * ((yend3 - ( (Float)(::Math_obj::floor(yend3)) )) * xgap3))));
HXDLIN(  30)					if ((i19 > 255)) {
HXLINE(  24)						i19 = 255;
            					}
HXLINE(  30)					if ((i19 < 0)) {
HXLINE(  25)						i19 = 0;
            					}
HXLINE(  30)					a01 = i19;
HXDLIN(  30)					{
HXLINE(  30)						int y6 = (ypxl21 + 1);
HXDLIN(  30)						int location19;
HXDLIN(  30)						if (pixelImage->useVirtualPos) {
HXLINE(  30)							location19 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + xpxl21) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  30)							location19 = ::Std_obj::_hx_int(( (Float)(((y6 * pixelImage->width) + xpxl21)) ));
            						}
HXDLIN(  30)						bool _hx_tmp38;
HXDLIN(  30)						if (pixelImage->transparent) {
HXLINE(  30)							_hx_tmp38 = (a01 < 254);
            						}
            						else {
HXLINE(  30)							_hx_tmp38 = false;
            						}
HXDLIN(  30)						if (_hx_tmp38) {
HXLINE(  30)							int this172 = ::iterMagic::Iimg_obj::get(pixelImage->image,location19);
HXDLIN(  30)							int old19;
HXDLIN(  30)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)								old19 = ((((((this172 >> 24) & 255) << 24) | ((this172 & 255) << 16)) | (((this172 >> 8) & 255) << 8)) | ((this172 >> 16) & 255));
            							}
            							else {
HXLINE(  30)								old19 = this172;
            							}
HXDLIN(  30)							int rhs19 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
HXDLIN(  30)							Float a120;
HXDLIN(  30)							int this173 = ((old19 >> 24) & 255);
HXDLIN(  30)							if ((this173 == 0)) {
HXLINE(  30)								a120 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a120 = (( (Float)(this173) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r120;
HXDLIN(  30)							int this174 = ((old19 >> 16) & 255);
HXDLIN(  30)							if ((this174 == 0)) {
HXLINE(  30)								r120 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r120 = (( (Float)(this174) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g120;
HXDLIN(  30)							int this175 = ((old19 >> 8) & 255);
HXDLIN(  30)							if ((this175 == 0)) {
HXLINE(  30)								g120 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g120 = (( (Float)(this175) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b120;
HXDLIN(  30)							int this176 = (old19 & 255);
HXDLIN(  30)							if ((this176 == 0)) {
HXLINE(  30)								b120 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b120 = (( (Float)(this176) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a219;
HXDLIN(  30)							int this177 = ((rhs19 >> 24) & 255);
HXDLIN(  30)							if ((this177 == 0)) {
HXLINE(  30)								a219 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								a219 = (( (Float)(this177) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float r219;
HXDLIN(  30)							int this178 = ((rhs19 >> 16) & 255);
HXDLIN(  30)							if ((this178 == 0)) {
HXLINE(  30)								r219 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								r219 = (( (Float)(this178) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float g219;
HXDLIN(  30)							int this179 = ((rhs19 >> 8) & 255);
HXDLIN(  30)							if ((this179 == 0)) {
HXLINE(  30)								g219 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								g219 = (( (Float)(this179) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float b219;
HXDLIN(  30)							int this180 = (rhs19 & 255);
HXDLIN(  30)							if ((this180 == 0)) {
HXLINE(  30)								b219 = ((Float)0.);
            							}
            							else {
HXLINE(  30)								b219 = (( (Float)(this180) ) / ( (Float)(255) ));
            							}
HXDLIN(  30)							Float a319 = (a120 * (( (Float)(1) ) - a219));
HXDLIN(  30)							int r40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r120 * a319) + (r219 * a219))));
HXDLIN(  30)							int g40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g120 * a319) + (g219 * a219))));
HXDLIN(  30)							int b40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a319) + (b219 * a219))));
HXDLIN(  30)							int a50 = ::Std_obj::_hx_int((( (Float)(255) ) * (a319 + a219)));
HXDLIN(  30)							int blended19 = ((((a50 << 24) | (r40 << 16)) | (g40 << 8)) | b40);
HXDLIN(  30)							{
HXLINE(  30)								int _hx_tmp39;
HXDLIN(  30)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)									_hx_tmp39 = ((((((blended19 >> 24) & 255) << 24) | ((blended19 & 255) << 16)) | (((blended19 >> 8) & 255) << 8)) | ((blended19 >> 16) & 255));
            								}
            								else {
HXLINE(  30)									_hx_tmp39 = blended19;
            								}
HXDLIN(  30)								::iterMagic::Iimg_obj::set(pixelImage->image,location19,_hx_tmp39);
            							}
            						}
            						else {
HXLINE(  30)							int value19;
HXDLIN(  30)							if (pixelImage->isLittle) {
HXLINE(  30)								value19 = ((((a01 << 24) | (b32 << 16)) | (g32 << 8)) | r32);
            							}
            							else {
HXLINE(  30)								value19 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
            							}
HXDLIN(  30)							::iterMagic::Iimg_obj::set(pixelImage->image,location19,value19);
            						}
            					}
            				}
HXDLIN(  30)				int startX1 = (xpxl11 + 1);
HXDLIN(  30)				int endX1 = (xpxl21 + 1);
HXDLIN(  30)				if (steep1) {
HXLINE(  30)					int _g4 = startX1;
HXDLIN(  30)					int _g5 = endX1;
HXDLIN(  30)					while((_g4 < _g5)){
HXLINE(  30)						_g4 = (_g4 + 1);
HXDLIN(  30)						int x9 = (_g4 - 1);
HXDLIN(  30)						int i20 = ::Std_obj::_hx_int(((( (Float)(a42) ) * solid1) + ((range1 * ( (Float)(a42) )) * ((( (Float)(1) ) - intery1) + ::Math_obj::floor(intery1)))));
HXDLIN(  30)						if ((i20 > 255)) {
HXLINE(  24)							i20 = 255;
            						}
HXLINE(  30)						if ((i20 < 0)) {
HXLINE(  25)							i20 = 0;
            						}
HXLINE(  30)						a01 = i20;
HXDLIN(  30)						{
HXLINE(  30)							int x10 = ::Math_obj::floor(intery1);
HXDLIN(  30)							int location20;
HXDLIN(  30)							if (pixelImage->useVirtualPos) {
HXLINE(  30)								location20 = ::Std_obj::_hx_int(((((( (Float)(x9) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x10) - pixelImage->virtualX));
            							}
            							else {
HXLINE(  30)								location20 = ::Std_obj::_hx_int(( (Float)(((x9 * pixelImage->width) + x10)) ));
            							}
HXDLIN(  30)							bool _hx_tmp40;
HXDLIN(  30)							if (pixelImage->transparent) {
HXLINE(  30)								_hx_tmp40 = (a01 < 254);
            							}
            							else {
HXLINE(  30)								_hx_tmp40 = false;
            							}
HXDLIN(  30)							if (_hx_tmp40) {
HXLINE(  30)								int this181 = ::iterMagic::Iimg_obj::get(pixelImage->image,location20);
HXDLIN(  30)								int old20;
HXDLIN(  30)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)									old20 = ((((((this181 >> 24) & 255) << 24) | ((this181 & 255) << 16)) | (((this181 >> 8) & 255) << 8)) | ((this181 >> 16) & 255));
            								}
            								else {
HXLINE(  30)									old20 = this181;
            								}
HXDLIN(  30)								int rhs20 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
HXDLIN(  30)								Float a121;
HXDLIN(  30)								int this182 = ((old20 >> 24) & 255);
HXDLIN(  30)								if ((this182 == 0)) {
HXLINE(  30)									a121 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									a121 = (( (Float)(this182) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float r121;
HXDLIN(  30)								int this183 = ((old20 >> 16) & 255);
HXDLIN(  30)								if ((this183 == 0)) {
HXLINE(  30)									r121 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									r121 = (( (Float)(this183) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float g121;
HXDLIN(  30)								int this184 = ((old20 >> 8) & 255);
HXDLIN(  30)								if ((this184 == 0)) {
HXLINE(  30)									g121 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									g121 = (( (Float)(this184) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float b121;
HXDLIN(  30)								int this185 = (old20 & 255);
HXDLIN(  30)								if ((this185 == 0)) {
HXLINE(  30)									b121 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									b121 = (( (Float)(this185) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float a220;
HXDLIN(  30)								int this186 = ((rhs20 >> 24) & 255);
HXDLIN(  30)								if ((this186 == 0)) {
HXLINE(  30)									a220 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									a220 = (( (Float)(this186) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float r220;
HXDLIN(  30)								int this187 = ((rhs20 >> 16) & 255);
HXDLIN(  30)								if ((this187 == 0)) {
HXLINE(  30)									r220 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									r220 = (( (Float)(this187) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float g220;
HXDLIN(  30)								int this188 = ((rhs20 >> 8) & 255);
HXDLIN(  30)								if ((this188 == 0)) {
HXLINE(  30)									g220 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									g220 = (( (Float)(this188) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float b220;
HXDLIN(  30)								int this189 = (rhs20 & 255);
HXDLIN(  30)								if ((this189 == 0)) {
HXLINE(  30)									b220 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									b220 = (( (Float)(this189) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float a320 = (a121 * (( (Float)(1) ) - a220));
HXDLIN(  30)								int r41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r121 * a320) + (r220 * a220))));
HXDLIN(  30)								int g41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g121 * a320) + (g220 * a220))));
HXDLIN(  30)								int b41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b121 * a320) + (b220 * a220))));
HXDLIN(  30)								int a51 = ::Std_obj::_hx_int((( (Float)(255) ) * (a320 + a220)));
HXDLIN(  30)								int blended20 = ((((a51 << 24) | (r41 << 16)) | (g41 << 8)) | b41);
HXDLIN(  30)								{
HXLINE(  30)									int _hx_tmp41;
HXDLIN(  30)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)										_hx_tmp41 = ((((((blended20 >> 24) & 255) << 24) | ((blended20 & 255) << 16)) | (((blended20 >> 8) & 255) << 8)) | ((blended20 >> 16) & 255));
            									}
            									else {
HXLINE(  30)										_hx_tmp41 = blended20;
            									}
HXDLIN(  30)									::iterMagic::Iimg_obj::set(pixelImage->image,location20,_hx_tmp41);
            								}
            							}
            							else {
HXLINE(  30)								int value20;
HXDLIN(  30)								if (pixelImage->isLittle) {
HXLINE(  30)									value20 = ((((a01 << 24) | (b32 << 16)) | (g32 << 8)) | r32);
            								}
            								else {
HXLINE(  30)									value20 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
            								}
HXDLIN(  30)								::iterMagic::Iimg_obj::set(pixelImage->image,location20,value20);
            							}
            						}
HXDLIN(  30)						int i21 = ::Std_obj::_hx_int(((( (Float)(a42) ) * solid1) + ((range1 * ( (Float)(a42) )) * (intery1 - ( (Float)(::Math_obj::floor(intery1)) )))));
HXDLIN(  30)						if ((i21 > 255)) {
HXLINE(  24)							i21 = 255;
            						}
HXLINE(  30)						if ((i21 < 0)) {
HXLINE(  25)							i21 = 0;
            						}
HXLINE(  30)						a01 = i21;
HXDLIN(  30)						{
HXLINE(  30)							int x12 = (::Math_obj::floor(intery1) + 1);
HXDLIN(  30)							int location21;
HXDLIN(  30)							if (pixelImage->useVirtualPos) {
HXLINE(  30)								location21 = ::Std_obj::_hx_int(((((( (Float)(x9) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x12) - pixelImage->virtualX));
            							}
            							else {
HXLINE(  30)								location21 = ::Std_obj::_hx_int(( (Float)(((x9 * pixelImage->width) + x12)) ));
            							}
HXDLIN(  30)							bool _hx_tmp42;
HXDLIN(  30)							if (pixelImage->transparent) {
HXLINE(  30)								_hx_tmp42 = (a01 < 254);
            							}
            							else {
HXLINE(  30)								_hx_tmp42 = false;
            							}
HXDLIN(  30)							if (_hx_tmp42) {
HXLINE(  30)								int this190 = ::iterMagic::Iimg_obj::get(pixelImage->image,location21);
HXDLIN(  30)								int old21;
HXDLIN(  30)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)									old21 = ((((((this190 >> 24) & 255) << 24) | ((this190 & 255) << 16)) | (((this190 >> 8) & 255) << 8)) | ((this190 >> 16) & 255));
            								}
            								else {
HXLINE(  30)									old21 = this190;
            								}
HXDLIN(  30)								int rhs21 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
HXDLIN(  30)								Float a122;
HXDLIN(  30)								int this191 = ((old21 >> 24) & 255);
HXDLIN(  30)								if ((this191 == 0)) {
HXLINE(  30)									a122 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									a122 = (( (Float)(this191) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float r122;
HXDLIN(  30)								int this192 = ((old21 >> 16) & 255);
HXDLIN(  30)								if ((this192 == 0)) {
HXLINE(  30)									r122 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									r122 = (( (Float)(this192) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float g122;
HXDLIN(  30)								int this193 = ((old21 >> 8) & 255);
HXDLIN(  30)								if ((this193 == 0)) {
HXLINE(  30)									g122 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									g122 = (( (Float)(this193) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float b122;
HXDLIN(  30)								int this194 = (old21 & 255);
HXDLIN(  30)								if ((this194 == 0)) {
HXLINE(  30)									b122 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									b122 = (( (Float)(this194) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float a221;
HXDLIN(  30)								int this195 = ((rhs21 >> 24) & 255);
HXDLIN(  30)								if ((this195 == 0)) {
HXLINE(  30)									a221 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									a221 = (( (Float)(this195) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float r221;
HXDLIN(  30)								int this196 = ((rhs21 >> 16) & 255);
HXDLIN(  30)								if ((this196 == 0)) {
HXLINE(  30)									r221 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									r221 = (( (Float)(this196) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float g221;
HXDLIN(  30)								int this197 = ((rhs21 >> 8) & 255);
HXDLIN(  30)								if ((this197 == 0)) {
HXLINE(  30)									g221 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									g221 = (( (Float)(this197) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float b221;
HXDLIN(  30)								int this198 = (rhs21 & 255);
HXDLIN(  30)								if ((this198 == 0)) {
HXLINE(  30)									b221 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									b221 = (( (Float)(this198) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float a321 = (a122 * (( (Float)(1) ) - a221));
HXDLIN(  30)								int r42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r122 * a321) + (r221 * a221))));
HXDLIN(  30)								int g42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g122 * a321) + (g221 * a221))));
HXDLIN(  30)								int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b122 * a321) + (b221 * a221))));
HXDLIN(  30)								int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a321 + a221)));
HXDLIN(  30)								int blended21 = ((((a52 << 24) | (r42 << 16)) | (g42 << 8)) | b42);
HXDLIN(  30)								{
HXLINE(  30)									int _hx_tmp43;
HXDLIN(  30)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)										_hx_tmp43 = ((((((blended21 >> 24) & 255) << 24) | ((blended21 & 255) << 16)) | (((blended21 >> 8) & 255) << 8)) | ((blended21 >> 16) & 255));
            									}
            									else {
HXLINE(  30)										_hx_tmp43 = blended21;
            									}
HXDLIN(  30)									::iterMagic::Iimg_obj::set(pixelImage->image,location21,_hx_tmp43);
            								}
            							}
            							else {
HXLINE(  30)								int value21;
HXDLIN(  30)								if (pixelImage->isLittle) {
HXLINE(  30)									value21 = ((((a01 << 24) | (b32 << 16)) | (g32 << 8)) | r32);
            								}
            								else {
HXLINE(  30)									value21 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
            								}
HXDLIN(  30)								::iterMagic::Iimg_obj::set(pixelImage->image,location21,value21);
            							}
            						}
HXLINE( 113)						intery1 = (intery1 + gradient1);
            					}
            				}
            				else {
HXLINE(  30)					int _g6 = startX1;
HXDLIN(  30)					int _g7 = endX1;
HXDLIN(  30)					while((_g6 < _g7)){
HXLINE(  30)						_g6 = (_g6 + 1);
HXDLIN(  30)						int x13 = (_g6 - 1);
HXDLIN(  30)						int i22 = ::Std_obj::_hx_int(((( (Float)(a42) ) * solid1) + ((range1 * ( (Float)(a42) )) * ((( (Float)(1) ) - intery1) + ::Math_obj::floor(intery1)))));
HXDLIN(  30)						if ((i22 > 255)) {
HXLINE(  24)							i22 = 255;
            						}
HXLINE(  30)						if ((i22 < 0)) {
HXLINE(  25)							i22 = 0;
            						}
HXLINE(  30)						a01 = i22;
HXDLIN(  30)						{
HXLINE(  30)							int y7 = ::Math_obj::floor(intery1);
HXDLIN(  30)							int location22;
HXDLIN(  30)							if (pixelImage->useVirtualPos) {
HXLINE(  30)								location22 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x13) - pixelImage->virtualX));
            							}
            							else {
HXLINE(  30)								location22 = ::Std_obj::_hx_int(( (Float)(((y7 * pixelImage->width) + x13)) ));
            							}
HXDLIN(  30)							bool _hx_tmp44;
HXDLIN(  30)							if (pixelImage->transparent) {
HXLINE(  30)								_hx_tmp44 = (a01 < 254);
            							}
            							else {
HXLINE(  30)								_hx_tmp44 = false;
            							}
HXDLIN(  30)							if (_hx_tmp44) {
HXLINE(  30)								int this199 = ::iterMagic::Iimg_obj::get(pixelImage->image,location22);
HXDLIN(  30)								int old22;
HXDLIN(  30)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)									old22 = ((((((this199 >> 24) & 255) << 24) | ((this199 & 255) << 16)) | (((this199 >> 8) & 255) << 8)) | ((this199 >> 16) & 255));
            								}
            								else {
HXLINE(  30)									old22 = this199;
            								}
HXDLIN(  30)								int rhs22 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
HXDLIN(  30)								Float a123;
HXDLIN(  30)								int this200 = ((old22 >> 24) & 255);
HXDLIN(  30)								if ((this200 == 0)) {
HXLINE(  30)									a123 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									a123 = (( (Float)(this200) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float r123;
HXDLIN(  30)								int this201 = ((old22 >> 16) & 255);
HXDLIN(  30)								if ((this201 == 0)) {
HXLINE(  30)									r123 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									r123 = (( (Float)(this201) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float g123;
HXDLIN(  30)								int this202 = ((old22 >> 8) & 255);
HXDLIN(  30)								if ((this202 == 0)) {
HXLINE(  30)									g123 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									g123 = (( (Float)(this202) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float b123;
HXDLIN(  30)								int this203 = (old22 & 255);
HXDLIN(  30)								if ((this203 == 0)) {
HXLINE(  30)									b123 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									b123 = (( (Float)(this203) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float a222;
HXDLIN(  30)								int this204 = ((rhs22 >> 24) & 255);
HXDLIN(  30)								if ((this204 == 0)) {
HXLINE(  30)									a222 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									a222 = (( (Float)(this204) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float r222;
HXDLIN(  30)								int this205 = ((rhs22 >> 16) & 255);
HXDLIN(  30)								if ((this205 == 0)) {
HXLINE(  30)									r222 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									r222 = (( (Float)(this205) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float g222;
HXDLIN(  30)								int this206 = ((rhs22 >> 8) & 255);
HXDLIN(  30)								if ((this206 == 0)) {
HXLINE(  30)									g222 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									g222 = (( (Float)(this206) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float b222;
HXDLIN(  30)								int this207 = (rhs22 & 255);
HXDLIN(  30)								if ((this207 == 0)) {
HXLINE(  30)									b222 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									b222 = (( (Float)(this207) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float a322 = (a123 * (( (Float)(1) ) - a222));
HXDLIN(  30)								int r43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r123 * a322) + (r222 * a222))));
HXDLIN(  30)								int g43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g123 * a322) + (g222 * a222))));
HXDLIN(  30)								int b43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b123 * a322) + (b222 * a222))));
HXDLIN(  30)								int a53 = ::Std_obj::_hx_int((( (Float)(255) ) * (a322 + a222)));
HXDLIN(  30)								int blended22 = ((((a53 << 24) | (r43 << 16)) | (g43 << 8)) | b43);
HXDLIN(  30)								{
HXLINE(  30)									int _hx_tmp45;
HXDLIN(  30)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)										_hx_tmp45 = ((((((blended22 >> 24) & 255) << 24) | ((blended22 & 255) << 16)) | (((blended22 >> 8) & 255) << 8)) | ((blended22 >> 16) & 255));
            									}
            									else {
HXLINE(  30)										_hx_tmp45 = blended22;
            									}
HXDLIN(  30)									::iterMagic::Iimg_obj::set(pixelImage->image,location22,_hx_tmp45);
            								}
            							}
            							else {
HXLINE(  30)								int value22;
HXDLIN(  30)								if (pixelImage->isLittle) {
HXLINE(  30)									value22 = ((((a01 << 24) | (b32 << 16)) | (g32 << 8)) | r32);
            								}
            								else {
HXLINE(  30)									value22 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
            								}
HXDLIN(  30)								::iterMagic::Iimg_obj::set(pixelImage->image,location22,value22);
            							}
            						}
HXDLIN(  30)						int i23 = ::Std_obj::_hx_int(((( (Float)(a42) ) * solid1) + ((range1 * ( (Float)(a42) )) * (intery1 - ( (Float)(::Math_obj::floor(intery1)) )))));
HXDLIN(  30)						if ((i23 > 255)) {
HXLINE(  24)							i23 = 255;
            						}
HXLINE(  30)						if ((i23 < 0)) {
HXLINE(  25)							i23 = 0;
            						}
HXLINE(  30)						a01 = i23;
HXDLIN(  30)						{
HXLINE(  30)							int y8 = (::Math_obj::floor(intery1) + 1);
HXDLIN(  30)							int location23;
HXDLIN(  30)							if (pixelImage->useVirtualPos) {
HXLINE(  30)								location23 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x13) - pixelImage->virtualX));
            							}
            							else {
HXLINE(  30)								location23 = ::Std_obj::_hx_int(( (Float)(((y8 * pixelImage->width) + x13)) ));
            							}
HXDLIN(  30)							bool _hx_tmp46;
HXDLIN(  30)							if (pixelImage->transparent) {
HXLINE(  30)								_hx_tmp46 = (a01 < 254);
            							}
            							else {
HXLINE(  30)								_hx_tmp46 = false;
            							}
HXDLIN(  30)							if (_hx_tmp46) {
HXLINE(  30)								int this208 = ::iterMagic::Iimg_obj::get(pixelImage->image,location23);
HXDLIN(  30)								int old23;
HXDLIN(  30)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)									old23 = ((((((this208 >> 24) & 255) << 24) | ((this208 & 255) << 16)) | (((this208 >> 8) & 255) << 8)) | ((this208 >> 16) & 255));
            								}
            								else {
HXLINE(  30)									old23 = this208;
            								}
HXDLIN(  30)								int rhs23 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
HXDLIN(  30)								Float a124;
HXDLIN(  30)								int this209 = ((old23 >> 24) & 255);
HXDLIN(  30)								if ((this209 == 0)) {
HXLINE(  30)									a124 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									a124 = (( (Float)(this209) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float r124;
HXDLIN(  30)								int this210 = ((old23 >> 16) & 255);
HXDLIN(  30)								if ((this210 == 0)) {
HXLINE(  30)									r124 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									r124 = (( (Float)(this210) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float g124;
HXDLIN(  30)								int this211 = ((old23 >> 8) & 255);
HXDLIN(  30)								if ((this211 == 0)) {
HXLINE(  30)									g124 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									g124 = (( (Float)(this211) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float b124;
HXDLIN(  30)								int this212 = (old23 & 255);
HXDLIN(  30)								if ((this212 == 0)) {
HXLINE(  30)									b124 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									b124 = (( (Float)(this212) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float a223;
HXDLIN(  30)								int this213 = ((rhs23 >> 24) & 255);
HXDLIN(  30)								if ((this213 == 0)) {
HXLINE(  30)									a223 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									a223 = (( (Float)(this213) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float r223;
HXDLIN(  30)								int this214 = ((rhs23 >> 16) & 255);
HXDLIN(  30)								if ((this214 == 0)) {
HXLINE(  30)									r223 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									r223 = (( (Float)(this214) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float g223;
HXDLIN(  30)								int this215 = ((rhs23 >> 8) & 255);
HXDLIN(  30)								if ((this215 == 0)) {
HXLINE(  30)									g223 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									g223 = (( (Float)(this215) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float b223;
HXDLIN(  30)								int this216 = (rhs23 & 255);
HXDLIN(  30)								if ((this216 == 0)) {
HXLINE(  30)									b223 = ((Float)0.);
            								}
            								else {
HXLINE(  30)									b223 = (( (Float)(this216) ) / ( (Float)(255) ));
            								}
HXDLIN(  30)								Float a323 = (a124 * (( (Float)(1) ) - a223));
HXDLIN(  30)								int r44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r124 * a323) + (r223 * a223))));
HXDLIN(  30)								int g44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g124 * a323) + (g223 * a223))));
HXDLIN(  30)								int b44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b124 * a323) + (b223 * a223))));
HXDLIN(  30)								int a54 = ::Std_obj::_hx_int((( (Float)(255) ) * (a323 + a223)));
HXDLIN(  30)								int blended23 = ((((a54 << 24) | (r44 << 16)) | (g44 << 8)) | b44);
HXDLIN(  30)								{
HXLINE(  30)									int _hx_tmp47;
HXDLIN(  30)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)										_hx_tmp47 = ((((((blended23 >> 24) & 255) << 24) | ((blended23 & 255) << 16)) | (((blended23 >> 8) & 255) << 8)) | ((blended23 >> 16) & 255));
            									}
            									else {
HXLINE(  30)										_hx_tmp47 = blended23;
            									}
HXDLIN(  30)									::iterMagic::Iimg_obj::set(pixelImage->image,location23,_hx_tmp47);
            								}
            							}
            							else {
HXLINE(  30)								int value23;
HXDLIN(  30)								if (pixelImage->isLittle) {
HXLINE(  30)									value23 = ((((a01 << 24) | (b32 << 16)) | (g32 << 8)) | r32);
            								}
            								else {
HXLINE(  30)									value23 = ((((a01 << 24) | (r32 << 16)) | (g32 << 8)) | b32);
            								}
HXDLIN(  30)								::iterMagic::Iimg_obj::set(pixelImage->image,location23,value23);
            							}
            						}
HXLINE( 122)						intery1 = (intery1 + gradient1);
            					}
            				}
            			}
            		}
            		else {
HXLINE(  32)			if ((this->edgeSoft == ((Float)0.))) {
HXLINE(  33)				 ::pi_xy::ImageStruct this217 = pixelImage;
HXDLIN(  33)				int color2 = this->strokeColor;
HXDLIN(  33)				bool hasHit = true;
HXDLIN(  33)				Float o = (qy - py);
HXDLIN(  33)				Float a55 = (qx - px);
HXDLIN(  33)				Float h = ::Math_obj::pow(((o * o) + (a55 * a55)),((Float)0.5));
HXDLIN(  33)				Float theta = ::Math_obj::atan2(o,a55);
HXDLIN(  33)				{
HXLINE(  33)					 ::Dynamic debugCorners = false;
HXDLIN(  33)					if (::hx::IsNull( debugCorners )) {
HXLINE(  75)						debugCorners = false;
            					}
HXLINE(  33)					Float sin = ::Math_obj::sin(theta);
HXDLIN(  33)					Float cos = ::Math_obj::cos(theta);
HXDLIN(  33)					Float radius = (this->strokeWidth / ( (Float)(2) ));
HXDLIN(  33)					Float dx2 = ((Float)0.1);
HXDLIN(  33)					Float dy2 = radius;
HXDLIN(  33)					Float cx = h;
HXDLIN(  33)					Float cy = radius;
HXDLIN(  33)					Float bx = h;
HXDLIN(  33)					Float by = -(radius);
HXDLIN(  33)					Float ax = ((Float)0.1);
HXDLIN(  33)					Float ay = -(radius);
HXDLIN(  33)					Float temp2 = ((Float)0.);
HXLINE(  28)					temp2 = (px + ((ax * cos) - (ay * sin)));
HXLINE(  29)					ay = (py + ((ay * cos) + (ax * sin)));
HXLINE(  30)					ax = temp2;
HXLINE(  32)					temp2 = (px + ((bx * cos) - (by * sin)));
HXLINE(  33)					by = (py + ((by * cos) + (bx * sin)));
HXLINE(  34)					bx = temp2;
HXLINE(  36)					temp2 = (px + ((cx * cos) - (cy * sin)));
HXLINE(  37)					cy = (py + ((cy * cos) + (cx * sin)));
HXLINE(  38)					cx = temp2;
HXLINE(  40)					temp2 = (px + ((dx2 * cos) - (dy2 * sin)));
HXLINE(  41)					dy2 = (py + ((dy2 * cos) + (dx2 * sin)));
HXLINE(  42)					dx2 = temp2;
HXLINE(  33)					if (( (bool)(debugCorners) )) {
HXLINE(  33)						{
HXLINE(  33)							 ::pi_xy::ImageStruct this218 = this217;
HXDLIN(  33)							{
HXLINE(  33)								int r_x = ::Std_obj::_hx_int((ax - ((Float)6.)));
HXDLIN(  33)								int r_y = ::Std_obj::_hx_int((ay - ((Float)6.)));
HXDLIN(  33)								int r_w = 12;
HXDLIN(  33)								int r_h = 12;
HXDLIN(  33)								int xmax = ((r_x + r_w) + 1);
HXDLIN(  33)								int ymax = ((r_y + r_h) + 1);
HXDLIN(  33)								int ii_min = r_x;
HXDLIN(  33)								int ii_max = xmax;
HXDLIN(  33)								int xRange__start = ii_min;
HXDLIN(  33)								int xRange__max = ii_max;
HXDLIN(  33)								int ii_min1 = r_y;
HXDLIN(  33)								int ii_max1 = ymax;
HXDLIN(  33)								int yRange__start = ii_min1;
HXDLIN(  33)								int yRange__max = ii_max1;
HXDLIN(  33)								int range_x = xRange__start;
HXDLIN(  33)								int range_y = (yRange__start - 1);
HXDLIN(  33)								int range_xReset = range_x;
HXDLIN(  33)								int range_yReset = range_y;
HXDLIN(  33)								int range_xMax = (xRange__max - 2);
HXDLIN(  33)								int range_yMax = (yRange__max - 2);
HXDLIN(  33)								int _this_min = 0;
HXDLIN(  33)								int _this_max = ::Std_obj::_hx_int(( (Float)(((xRange__max - xRange__start) * (yRange__max - yRange__start))) ));
HXDLIN(  33)								while((_this_min < _this_max)){
HXLINE(  33)									_this_min = (_this_min + 1);
HXDLIN(  33)									int i24 = (_this_min - 1);
HXDLIN(  33)									if ((range_y > range_yMax)) {
HXLINE(  33)										range_y = range_yReset;
HXDLIN(  33)										range_x = (range_x + 1);
            									}
HXDLIN(  33)									range_y = (range_y + 1);
HXDLIN(  33)									int i25 = i24;
HXDLIN(  33)									{
HXLINE(  33)										int x14 = range_x;
HXDLIN(  33)										int y9 = range_y;
HXDLIN(  33)										int c = -65536;
HXDLIN(  33)										bool _hx_tmp48;
HXDLIN(  33)										if ((((c >> 24) & 255) < 254)) {
HXLINE(  33)											_hx_tmp48 = this218->transparent;
            										}
            										else {
HXLINE(  33)											_hx_tmp48 = false;
            										}
HXDLIN(  33)										if (_hx_tmp48) {
HXLINE(  33)											int location24;
HXDLIN(  33)											if (this218->useVirtualPos) {
HXLINE(  33)												location24 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - this218->virtualY) * ( (Float)(this218->width) )) + x14) - this218->virtualX));
            											}
            											else {
HXLINE(  33)												location24 = ::Std_obj::_hx_int(( (Float)(((y9 * this218->width) + x14)) ));
            											}
HXDLIN(  33)											int this219 = ::iterMagic::Iimg_obj::get(this218->image,location24);
HXDLIN(  33)											int this220;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												this220 = ((((((this219 >> 24) & 255) << 24) | ((this219 & 255) << 16)) | (((this219 >> 8) & 255) << 8)) | ((this219 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												this220 = this219;
            											}
HXDLIN(  33)											Float a125;
HXDLIN(  33)											int this221 = ((this220 >> 24) & 255);
HXDLIN(  33)											if ((this221 == 0)) {
HXLINE(  33)												a125 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a125 = (( (Float)(this221) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r125;
HXDLIN(  33)											int this222 = ((this220 >> 16) & 255);
HXDLIN(  33)											if ((this222 == 0)) {
HXLINE(  33)												r125 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r125 = (( (Float)(this222) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g125;
HXDLIN(  33)											int this223 = ((this220 >> 8) & 255);
HXDLIN(  33)											if ((this223 == 0)) {
HXLINE(  33)												g125 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g125 = (( (Float)(this223) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b125;
HXDLIN(  33)											int this224 = (this220 & 255);
HXDLIN(  33)											if ((this224 == 0)) {
HXLINE(  33)												b125 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b125 = (( (Float)(this224) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a224;
HXDLIN(  33)											int this225 = ((-65536 >> 24) & 255);
HXDLIN(  33)											if ((this225 == 0)) {
HXLINE(  33)												a224 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a224 = (( (Float)(this225) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r224;
HXDLIN(  33)											int this226 = ((-65536 >> 16) & 255);
HXDLIN(  33)											if ((this226 == 0)) {
HXLINE(  33)												r224 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r224 = (( (Float)(this226) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g224;
HXDLIN(  33)											int this227 = ((-65536 >> 8) & 255);
HXDLIN(  33)											if ((this227 == 0)) {
HXLINE(  33)												g224 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g224 = (( (Float)(this227) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b224;
HXDLIN(  33)											int this228 = (-65536 & 255);
HXDLIN(  33)											if ((this228 == 0)) {
HXLINE(  33)												b224 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b224 = (( (Float)(this228) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a324 = (a125 * (( (Float)(1) ) - a224));
HXDLIN(  33)											int r45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r125 * a324) + (r224 * a224))));
HXDLIN(  33)											int g45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g125 * a324) + (g224 * a224))));
HXDLIN(  33)											int b45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b125 * a324) + (b224 * a224))));
HXDLIN(  33)											int a56 = ::Std_obj::_hx_int((( (Float)(255) ) * (a324 + a224)));
HXDLIN(  33)											int blended24 = ((((a56 << 24) | (r45 << 16)) | (g45 << 8)) | b45);
HXDLIN(  33)											{
HXLINE(  33)												int _hx_tmp49;
HXDLIN(  33)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)													_hx_tmp49 = ((((((blended24 >> 24) & 255) << 24) | ((blended24 & 255) << 16)) | (((blended24 >> 8) & 255) << 8)) | ((blended24 >> 16) & 255));
            												}
            												else {
HXLINE(  33)													_hx_tmp49 = blended24;
            												}
HXDLIN(  33)												::iterMagic::Iimg_obj::set(this218->image,location24,_hx_tmp49);
            											}
            										}
            										else {
HXLINE(  33)											::Dynamic this229 = this218->image;
HXDLIN(  33)											int index;
HXDLIN(  33)											if (this218->useVirtualPos) {
HXLINE(  33)												index = ::Std_obj::_hx_int(((((( (Float)(y9) ) - this218->virtualY) * ( (Float)(this218->width) )) + x14) - this218->virtualX));
            											}
            											else {
HXLINE(  33)												index = ::Std_obj::_hx_int(( (Float)(((y9 * this218->width) + x14)) ));
            											}
HXDLIN(  33)											int _hx_tmp50;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												_hx_tmp50 = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE(  33)												_hx_tmp50 = c;
            											}
HXDLIN(  33)											::iterMagic::Iimg_obj::set(this229,index,_hx_tmp50);
            										}
            									}
            								}
            							}
            						}
HXDLIN(  33)						{
HXLINE(  33)							 ::pi_xy::ImageStruct this230 = this217;
HXDLIN(  33)							{
HXLINE(  33)								int r_x1 = ::Std_obj::_hx_int((bx - ((Float)6.)));
HXDLIN(  33)								int r_y1 = ::Std_obj::_hx_int((by - ((Float)6.)));
HXDLIN(  33)								int r_w1 = 12;
HXDLIN(  33)								int r_h1 = 12;
HXDLIN(  33)								int xmax1 = ((r_x1 + r_w1) + 1);
HXDLIN(  33)								int ymax1 = ((r_y1 + r_h1) + 1);
HXDLIN(  33)								int ii_min2 = r_x1;
HXDLIN(  33)								int ii_max2 = xmax1;
HXDLIN(  33)								int xRange__start1 = ii_min2;
HXDLIN(  33)								int xRange__max1 = ii_max2;
HXDLIN(  33)								int ii_min3 = r_y1;
HXDLIN(  33)								int ii_max3 = ymax1;
HXDLIN(  33)								int yRange__start1 = ii_min3;
HXDLIN(  33)								int yRange__max1 = ii_max3;
HXDLIN(  33)								int range_x1 = xRange__start1;
HXDLIN(  33)								int range_y1 = (yRange__start1 - 1);
HXDLIN(  33)								int range_xReset1 = range_x1;
HXDLIN(  33)								int range_yReset1 = range_y1;
HXDLIN(  33)								int range_xMax1 = (xRange__max1 - 2);
HXDLIN(  33)								int range_yMax1 = (yRange__max1 - 2);
HXDLIN(  33)								int _this_min1 = 0;
HXDLIN(  33)								int _this_max1 = ::Std_obj::_hx_int(( (Float)(((xRange__max1 - xRange__start1) * (yRange__max1 - yRange__start1))) ));
HXDLIN(  33)								while((_this_min1 < _this_max1)){
HXLINE(  33)									_this_min1 = (_this_min1 + 1);
HXDLIN(  33)									int i26 = (_this_min1 - 1);
HXDLIN(  33)									if ((range_y1 > range_yMax1)) {
HXLINE(  33)										range_y1 = range_yReset1;
HXDLIN(  33)										range_x1 = (range_x1 + 1);
            									}
HXDLIN(  33)									range_y1 = (range_y1 + 1);
HXDLIN(  33)									int i27 = i26;
HXDLIN(  33)									{
HXLINE(  33)										int x15 = range_x1;
HXDLIN(  33)										int y10 = range_y1;
HXDLIN(  33)										int c1 = -16711936;
HXDLIN(  33)										bool _hx_tmp51;
HXDLIN(  33)										if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  33)											_hx_tmp51 = this230->transparent;
            										}
            										else {
HXLINE(  33)											_hx_tmp51 = false;
            										}
HXDLIN(  33)										if (_hx_tmp51) {
HXLINE(  33)											int location25;
HXDLIN(  33)											if (this230->useVirtualPos) {
HXLINE(  33)												location25 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - this230->virtualY) * ( (Float)(this230->width) )) + x15) - this230->virtualX));
            											}
            											else {
HXLINE(  33)												location25 = ::Std_obj::_hx_int(( (Float)(((y10 * this230->width) + x15)) ));
            											}
HXDLIN(  33)											int this231 = ::iterMagic::Iimg_obj::get(this230->image,location25);
HXDLIN(  33)											int this232;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												this232 = ((((((this231 >> 24) & 255) << 24) | ((this231 & 255) << 16)) | (((this231 >> 8) & 255) << 8)) | ((this231 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												this232 = this231;
            											}
HXDLIN(  33)											Float a126;
HXDLIN(  33)											int this233 = ((this232 >> 24) & 255);
HXDLIN(  33)											if ((this233 == 0)) {
HXLINE(  33)												a126 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a126 = (( (Float)(this233) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r126;
HXDLIN(  33)											int this234 = ((this232 >> 16) & 255);
HXDLIN(  33)											if ((this234 == 0)) {
HXLINE(  33)												r126 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r126 = (( (Float)(this234) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g126;
HXDLIN(  33)											int this235 = ((this232 >> 8) & 255);
HXDLIN(  33)											if ((this235 == 0)) {
HXLINE(  33)												g126 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g126 = (( (Float)(this235) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b126;
HXDLIN(  33)											int this236 = (this232 & 255);
HXDLIN(  33)											if ((this236 == 0)) {
HXLINE(  33)												b126 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b126 = (( (Float)(this236) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a225;
HXDLIN(  33)											int this237 = ((-16711936 >> 24) & 255);
HXDLIN(  33)											if ((this237 == 0)) {
HXLINE(  33)												a225 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a225 = (( (Float)(this237) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r225;
HXDLIN(  33)											int this238 = ((-16711936 >> 16) & 255);
HXDLIN(  33)											if ((this238 == 0)) {
HXLINE(  33)												r225 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r225 = (( (Float)(this238) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g225;
HXDLIN(  33)											int this239 = ((-16711936 >> 8) & 255);
HXDLIN(  33)											if ((this239 == 0)) {
HXLINE(  33)												g225 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g225 = (( (Float)(this239) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b225;
HXDLIN(  33)											int this240 = (-16711936 & 255);
HXDLIN(  33)											if ((this240 == 0)) {
HXLINE(  33)												b225 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b225 = (( (Float)(this240) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a325 = (a126 * (( (Float)(1) ) - a225));
HXDLIN(  33)											int r46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r126 * a325) + (r225 * a225))));
HXDLIN(  33)											int g46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g126 * a325) + (g225 * a225))));
HXDLIN(  33)											int b46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b126 * a325) + (b225 * a225))));
HXDLIN(  33)											int a57 = ::Std_obj::_hx_int((( (Float)(255) ) * (a325 + a225)));
HXDLIN(  33)											int blended25 = ((((a57 << 24) | (r46 << 16)) | (g46 << 8)) | b46);
HXDLIN(  33)											{
HXLINE(  33)												int _hx_tmp52;
HXDLIN(  33)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)													_hx_tmp52 = ((((((blended25 >> 24) & 255) << 24) | ((blended25 & 255) << 16)) | (((blended25 >> 8) & 255) << 8)) | ((blended25 >> 16) & 255));
            												}
            												else {
HXLINE(  33)													_hx_tmp52 = blended25;
            												}
HXDLIN(  33)												::iterMagic::Iimg_obj::set(this230->image,location25,_hx_tmp52);
            											}
            										}
            										else {
HXLINE(  33)											::Dynamic this241 = this230->image;
HXDLIN(  33)											int index1;
HXDLIN(  33)											if (this230->useVirtualPos) {
HXLINE(  33)												index1 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - this230->virtualY) * ( (Float)(this230->width) )) + x15) - this230->virtualX));
            											}
            											else {
HXLINE(  33)												index1 = ::Std_obj::_hx_int(( (Float)(((y10 * this230->width) + x15)) ));
            											}
HXDLIN(  33)											int _hx_tmp53;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												_hx_tmp53 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												_hx_tmp53 = c1;
            											}
HXDLIN(  33)											::iterMagic::Iimg_obj::set(this241,index1,_hx_tmp53);
            										}
            									}
            								}
            							}
            						}
HXDLIN(  33)						{
HXLINE(  33)							 ::pi_xy::ImageStruct this242 = this217;
HXDLIN(  33)							{
HXLINE(  33)								int r_x2 = ::Std_obj::_hx_int((cx - ((Float)6.)));
HXDLIN(  33)								int r_y2 = ::Std_obj::_hx_int((cy - ((Float)6.)));
HXDLIN(  33)								int r_w2 = 12;
HXDLIN(  33)								int r_h2 = 12;
HXDLIN(  33)								int xmax2 = ((r_x2 + r_w2) + 1);
HXDLIN(  33)								int ymax2 = ((r_y2 + r_h2) + 1);
HXDLIN(  33)								int ii_min4 = r_x2;
HXDLIN(  33)								int ii_max4 = xmax2;
HXDLIN(  33)								int xRange__start2 = ii_min4;
HXDLIN(  33)								int xRange__max2 = ii_max4;
HXDLIN(  33)								int ii_min5 = r_y2;
HXDLIN(  33)								int ii_max5 = ymax2;
HXDLIN(  33)								int yRange__start2 = ii_min5;
HXDLIN(  33)								int yRange__max2 = ii_max5;
HXDLIN(  33)								int range_x2 = xRange__start2;
HXDLIN(  33)								int range_y2 = (yRange__start2 - 1);
HXDLIN(  33)								int range_xReset2 = range_x2;
HXDLIN(  33)								int range_yReset2 = range_y2;
HXDLIN(  33)								int range_xMax2 = (xRange__max2 - 2);
HXDLIN(  33)								int range_yMax2 = (yRange__max2 - 2);
HXDLIN(  33)								int _this_min2 = 0;
HXDLIN(  33)								int _this_max2 = ::Std_obj::_hx_int(( (Float)(((xRange__max2 - xRange__start2) * (yRange__max2 - yRange__start2))) ));
HXDLIN(  33)								while((_this_min2 < _this_max2)){
HXLINE(  33)									_this_min2 = (_this_min2 + 1);
HXDLIN(  33)									int i28 = (_this_min2 - 1);
HXDLIN(  33)									if ((range_y2 > range_yMax2)) {
HXLINE(  33)										range_y2 = range_yReset2;
HXDLIN(  33)										range_x2 = (range_x2 + 1);
            									}
HXDLIN(  33)									range_y2 = (range_y2 + 1);
HXDLIN(  33)									int i29 = i28;
HXDLIN(  33)									{
HXLINE(  33)										int x16 = range_x2;
HXDLIN(  33)										int y12 = range_y2;
HXDLIN(  33)										int c2 = -16776961;
HXDLIN(  33)										bool _hx_tmp54;
HXDLIN(  33)										if ((((c2 >> 24) & 255) < 254)) {
HXLINE(  33)											_hx_tmp54 = this242->transparent;
            										}
            										else {
HXLINE(  33)											_hx_tmp54 = false;
            										}
HXDLIN(  33)										if (_hx_tmp54) {
HXLINE(  33)											int location26;
HXDLIN(  33)											if (this242->useVirtualPos) {
HXLINE(  33)												location26 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - this242->virtualY) * ( (Float)(this242->width) )) + x16) - this242->virtualX));
            											}
            											else {
HXLINE(  33)												location26 = ::Std_obj::_hx_int(( (Float)(((y12 * this242->width) + x16)) ));
            											}
HXDLIN(  33)											int this243 = ::iterMagic::Iimg_obj::get(this242->image,location26);
HXDLIN(  33)											int this244;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												this244 = ((((((this243 >> 24) & 255) << 24) | ((this243 & 255) << 16)) | (((this243 >> 8) & 255) << 8)) | ((this243 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												this244 = this243;
            											}
HXDLIN(  33)											Float a127;
HXDLIN(  33)											int this245 = ((this244 >> 24) & 255);
HXDLIN(  33)											if ((this245 == 0)) {
HXLINE(  33)												a127 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a127 = (( (Float)(this245) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r127;
HXDLIN(  33)											int this246 = ((this244 >> 16) & 255);
HXDLIN(  33)											if ((this246 == 0)) {
HXLINE(  33)												r127 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r127 = (( (Float)(this246) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g127;
HXDLIN(  33)											int this247 = ((this244 >> 8) & 255);
HXDLIN(  33)											if ((this247 == 0)) {
HXLINE(  33)												g127 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g127 = (( (Float)(this247) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b127;
HXDLIN(  33)											int this248 = (this244 & 255);
HXDLIN(  33)											if ((this248 == 0)) {
HXLINE(  33)												b127 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b127 = (( (Float)(this248) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a226;
HXDLIN(  33)											int this249 = ((-16776961 >> 24) & 255);
HXDLIN(  33)											if ((this249 == 0)) {
HXLINE(  33)												a226 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a226 = (( (Float)(this249) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r226;
HXDLIN(  33)											int this250 = ((-16776961 >> 16) & 255);
HXDLIN(  33)											if ((this250 == 0)) {
HXLINE(  33)												r226 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r226 = (( (Float)(this250) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g226;
HXDLIN(  33)											int this251 = ((-16776961 >> 8) & 255);
HXDLIN(  33)											if ((this251 == 0)) {
HXLINE(  33)												g226 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g226 = (( (Float)(this251) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b226;
HXDLIN(  33)											int this252 = (-16776961 & 255);
HXDLIN(  33)											if ((this252 == 0)) {
HXLINE(  33)												b226 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b226 = (( (Float)(this252) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a326 = (a127 * (( (Float)(1) ) - a226));
HXDLIN(  33)											int r47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r127 * a326) + (r226 * a226))));
HXDLIN(  33)											int g47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g127 * a326) + (g226 * a226))));
HXDLIN(  33)											int b47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b127 * a326) + (b226 * a226))));
HXDLIN(  33)											int a58 = ::Std_obj::_hx_int((( (Float)(255) ) * (a326 + a226)));
HXDLIN(  33)											int blended26 = ((((a58 << 24) | (r47 << 16)) | (g47 << 8)) | b47);
HXDLIN(  33)											{
HXLINE(  33)												int _hx_tmp55;
HXDLIN(  33)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)													_hx_tmp55 = ((((((blended26 >> 24) & 255) << 24) | ((blended26 & 255) << 16)) | (((blended26 >> 8) & 255) << 8)) | ((blended26 >> 16) & 255));
            												}
            												else {
HXLINE(  33)													_hx_tmp55 = blended26;
            												}
HXDLIN(  33)												::iterMagic::Iimg_obj::set(this242->image,location26,_hx_tmp55);
            											}
            										}
            										else {
HXLINE(  33)											::Dynamic this253 = this242->image;
HXDLIN(  33)											int index2;
HXDLIN(  33)											if (this242->useVirtualPos) {
HXLINE(  33)												index2 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - this242->virtualY) * ( (Float)(this242->width) )) + x16) - this242->virtualX));
            											}
            											else {
HXLINE(  33)												index2 = ::Std_obj::_hx_int(( (Float)(((y12 * this242->width) + x16)) ));
            											}
HXDLIN(  33)											int _hx_tmp56;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												_hx_tmp56 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												_hx_tmp56 = c2;
            											}
HXDLIN(  33)											::iterMagic::Iimg_obj::set(this253,index2,_hx_tmp56);
            										}
            									}
            								}
            							}
            						}
HXDLIN(  33)						{
HXLINE(  33)							 ::pi_xy::ImageStruct this254 = this217;
HXDLIN(  33)							{
HXLINE(  33)								int r_x3 = ::Std_obj::_hx_int((dx2 - ((Float)6.)));
HXDLIN(  33)								int r_y3 = ::Std_obj::_hx_int((dy2 - ((Float)6.)));
HXDLIN(  33)								int r_w3 = 12;
HXDLIN(  33)								int r_h3 = 12;
HXDLIN(  33)								int xmax3 = ((r_x3 + r_w3) + 1);
HXDLIN(  33)								int ymax3 = ((r_y3 + r_h3) + 1);
HXDLIN(  33)								int ii_min6 = r_x3;
HXDLIN(  33)								int ii_max6 = xmax3;
HXDLIN(  33)								int xRange__start3 = ii_min6;
HXDLIN(  33)								int xRange__max3 = ii_max6;
HXDLIN(  33)								int ii_min7 = r_y3;
HXDLIN(  33)								int ii_max7 = ymax3;
HXDLIN(  33)								int yRange__start3 = ii_min7;
HXDLIN(  33)								int yRange__max3 = ii_max7;
HXDLIN(  33)								int range_x3 = xRange__start3;
HXDLIN(  33)								int range_y3 = (yRange__start3 - 1);
HXDLIN(  33)								int range_xReset3 = range_x3;
HXDLIN(  33)								int range_yReset3 = range_y3;
HXDLIN(  33)								int range_xMax3 = (xRange__max3 - 2);
HXDLIN(  33)								int range_yMax3 = (yRange__max3 - 2);
HXDLIN(  33)								int _this_min3 = 0;
HXDLIN(  33)								int _this_max3 = ::Std_obj::_hx_int(( (Float)(((xRange__max3 - xRange__start3) * (yRange__max3 - yRange__start3))) ));
HXDLIN(  33)								while((_this_min3 < _this_max3)){
HXLINE(  33)									_this_min3 = (_this_min3 + 1);
HXDLIN(  33)									int i30 = (_this_min3 - 1);
HXDLIN(  33)									if ((range_y3 > range_yMax3)) {
HXLINE(  33)										range_y3 = range_yReset3;
HXDLIN(  33)										range_x3 = (range_x3 + 1);
            									}
HXDLIN(  33)									range_y3 = (range_y3 + 1);
HXDLIN(  33)									int i31 = i30;
HXDLIN(  33)									{
HXLINE(  33)										int x17 = range_x3;
HXDLIN(  33)										int y13 = range_y3;
HXDLIN(  33)										int c3 = -1048336;
HXDLIN(  33)										bool _hx_tmp57;
HXDLIN(  33)										if ((((c3 >> 24) & 255) < 254)) {
HXLINE(  33)											_hx_tmp57 = this254->transparent;
            										}
            										else {
HXLINE(  33)											_hx_tmp57 = false;
            										}
HXDLIN(  33)										if (_hx_tmp57) {
HXLINE(  33)											int location27;
HXDLIN(  33)											if (this254->useVirtualPos) {
HXLINE(  33)												location27 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - this254->virtualY) * ( (Float)(this254->width) )) + x17) - this254->virtualX));
            											}
            											else {
HXLINE(  33)												location27 = ::Std_obj::_hx_int(( (Float)(((y13 * this254->width) + x17)) ));
            											}
HXDLIN(  33)											int this255 = ::iterMagic::Iimg_obj::get(this254->image,location27);
HXDLIN(  33)											int this256;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												this256 = ((((((this255 >> 24) & 255) << 24) | ((this255 & 255) << 16)) | (((this255 >> 8) & 255) << 8)) | ((this255 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												this256 = this255;
            											}
HXDLIN(  33)											Float a128;
HXDLIN(  33)											int this257 = ((this256 >> 24) & 255);
HXDLIN(  33)											if ((this257 == 0)) {
HXLINE(  33)												a128 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a128 = (( (Float)(this257) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r128;
HXDLIN(  33)											int this258 = ((this256 >> 16) & 255);
HXDLIN(  33)											if ((this258 == 0)) {
HXLINE(  33)												r128 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r128 = (( (Float)(this258) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g128;
HXDLIN(  33)											int this259 = ((this256 >> 8) & 255);
HXDLIN(  33)											if ((this259 == 0)) {
HXLINE(  33)												g128 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g128 = (( (Float)(this259) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b128;
HXDLIN(  33)											int this260 = (this256 & 255);
HXDLIN(  33)											if ((this260 == 0)) {
HXLINE(  33)												b128 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b128 = (( (Float)(this260) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a227;
HXDLIN(  33)											int this261 = ((-1048336 >> 24) & 255);
HXDLIN(  33)											if ((this261 == 0)) {
HXLINE(  33)												a227 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a227 = (( (Float)(this261) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r227;
HXDLIN(  33)											int this262 = ((-1048336 >> 16) & 255);
HXDLIN(  33)											if ((this262 == 0)) {
HXLINE(  33)												r227 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r227 = (( (Float)(this262) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g227;
HXDLIN(  33)											int this263 = ((-1048336 >> 8) & 255);
HXDLIN(  33)											if ((this263 == 0)) {
HXLINE(  33)												g227 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g227 = (( (Float)(this263) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b227;
HXDLIN(  33)											int this264 = (-1048336 & 255);
HXDLIN(  33)											if ((this264 == 0)) {
HXLINE(  33)												b227 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b227 = (( (Float)(this264) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a327 = (a128 * (( (Float)(1) ) - a227));
HXDLIN(  33)											int r48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r128 * a327) + (r227 * a227))));
HXDLIN(  33)											int g48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g128 * a327) + (g227 * a227))));
HXDLIN(  33)											int b48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b128 * a327) + (b227 * a227))));
HXDLIN(  33)											int a59 = ::Std_obj::_hx_int((( (Float)(255) ) * (a327 + a227)));
HXDLIN(  33)											int blended27 = ((((a59 << 24) | (r48 << 16)) | (g48 << 8)) | b48);
HXDLIN(  33)											{
HXLINE(  33)												int _hx_tmp58;
HXDLIN(  33)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)													_hx_tmp58 = ((((((blended27 >> 24) & 255) << 24) | ((blended27 & 255) << 16)) | (((blended27 >> 8) & 255) << 8)) | ((blended27 >> 16) & 255));
            												}
            												else {
HXLINE(  33)													_hx_tmp58 = blended27;
            												}
HXDLIN(  33)												::iterMagic::Iimg_obj::set(this254->image,location27,_hx_tmp58);
            											}
            										}
            										else {
HXLINE(  33)											::Dynamic this265 = this254->image;
HXDLIN(  33)											int index3;
HXDLIN(  33)											if (this254->useVirtualPos) {
HXLINE(  33)												index3 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - this254->virtualY) * ( (Float)(this254->width) )) + x17) - this254->virtualX));
            											}
            											else {
HXLINE(  33)												index3 = ::Std_obj::_hx_int(( (Float)(((y13 * this254->width) + x17)) ));
            											}
HXDLIN(  33)											int _hx_tmp59;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												_hx_tmp59 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												_hx_tmp59 = c3;
            											}
HXDLIN(  33)											::iterMagic::Iimg_obj::set(this265,index3,_hx_tmp59);
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  33)					{
HXLINE(  33)						{
HXLINE(  33)							Float bx1 = bx;
HXDLIN(  33)							Float by1 = by;
HXDLIN(  33)							Float cx1 = dx2;
HXDLIN(  33)							Float cy1 = dy2;
HXDLIN(  33)							bool hasUndo = false;
HXDLIN(  33)							bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN(  33)							if (!(adjustWinding)) {
HXLINE(  33)								Float bx_ = bx1;
HXDLIN(  33)								Float by_ = by1;
HXLINE(  25)								bx1 = cx1;
HXLINE(  26)								by1 = cy1;
HXLINE(  27)								cx1 = bx_;
HXLINE(  28)								cy1 = by_;
            							}
HXLINE(  33)							{
HXLINE(  33)								Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN(  33)								Float sx = (cy1 - ay);
HXDLIN(  33)								Float sy = (ax - cx1);
HXDLIN(  33)								Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN(  33)								Float tx = (ay - by1);
HXDLIN(  33)								Float ty = (bx1 - ax);
HXDLIN(  33)								Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN(  33)								 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  33)								if ((ax > bx1)) {
HXLINE(  33)									if ((ax > cx1)) {
HXLINE(  33)										int min;
HXDLIN(  33)										if ((bx1 > cx1)) {
HXLINE(  33)											min = ::Math_obj::floor(cx1);
            										}
            										else {
HXLINE(  33)											min = ::Math_obj::floor(bx1);
            										}
HXDLIN(  33)										int ii_min8 = min;
HXDLIN(  33)										int ii_max8 = ::Math_obj::ceil(ax);
HXDLIN(  33)										xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            									}
            									else {
HXLINE(  33)										int ii_min9 = ::Math_obj::floor(bx1);
HXDLIN(  33)										int ii_max9 = ::Math_obj::ceil(cx1);
HXDLIN(  33)										xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            									}
            								}
            								else {
HXLINE(  33)									if ((bx1 > cx1)) {
HXLINE(  33)										int min1;
HXDLIN(  33)										if ((ax > cx1)) {
HXLINE(  33)											min1 = ::Math_obj::floor(cx1);
            										}
            										else {
HXLINE(  33)											min1 = ::Math_obj::ceil(ax);
            										}
HXDLIN(  33)										int ii_min10 = min1;
HXDLIN(  33)										int ii_max10 = ::Math_obj::ceil(bx1);
HXDLIN(  33)										xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            									}
            									else {
HXLINE(  33)										int ii_min11 = ::Math_obj::floor(ax);
HXDLIN(  33)										int ii_max11 = ::Math_obj::ceil(cx1);
HXDLIN(  33)										xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            									}
            								}
HXDLIN(  33)								 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  33)								if ((ay > by1)) {
HXLINE(  33)									if ((ay > cy1)) {
HXLINE(  33)										int min2;
HXDLIN(  33)										if ((by1 > cy1)) {
HXLINE(  33)											min2 = ::Math_obj::floor(cy1);
            										}
            										else {
HXLINE(  33)											min2 = ::Math_obj::floor(by1);
            										}
HXDLIN(  33)										int ii_min12 = min2;
HXDLIN(  33)										int ii_max12 = ::Math_obj::ceil(ay);
HXDLIN(  33)										yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            									}
            									else {
HXLINE(  33)										int ii_min13 = ::Math_obj::floor(by1);
HXDLIN(  33)										int ii_max13 = ::Math_obj::ceil(cy1);
HXDLIN(  33)										yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            									}
            								}
            								else {
HXLINE(  33)									if ((by1 > cy1)) {
HXLINE(  33)										int min3;
HXDLIN(  33)										if ((ay > cy1)) {
HXLINE(  33)											min3 = ::Math_obj::floor(cy1);
            										}
            										else {
HXLINE(  33)											min3 = ::Math_obj::ceil(ay);
            										}
HXDLIN(  33)										int ii_min14 = min3;
HXDLIN(  33)										int ii_max14 = ::Math_obj::ceil(by1);
HXDLIN(  33)										yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            									}
            									else {
HXLINE(  33)										int ii_min15 = ::Math_obj::floor(ay);
HXDLIN(  33)										int ii_max15 = ::Math_obj::ceil(cy1);
HXDLIN(  33)										yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            									}
            								}
HXDLIN(  33)								 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  33)								if (hasUndo) {
HXLINE(  33)									int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  33)									int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  33)									 ::Dynamic imageType = null();
HXDLIN(  33)									 ::pi_xy::ImageStruct this266 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  33)									if (::hx::IsNull( imageType )) {
HXLINE(  54)										imageType = ::pi_xy::ImageStruct_obj::defaultType;
            									}
HXLINE(  33)									::Dynamic undoImage1;
HXDLIN(  33)									switch((int)(( (int)(imageType) ))){
            										case (int)0: {
HXLINE(  33)											 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  33)											 ::iterMagic::BytesImg b49 = byt;
HXDLIN(  33)											{
HXLINE(  33)												b49->width = width;
HXDLIN(  33)												b49->height = height;
HXDLIN(  33)												b49->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  33)												b49->data = ::haxe::io::Bytes_obj::alloc((b49->length * 4));
HXDLIN(  33)												{
HXLINE(  33)													int len = b49->length;
HXDLIN(  33)													int w = 0;
HXDLIN(  33)													{
HXLINE(  33)														int _g8 = 0;
HXDLIN(  33)														int _g9 = b49->height;
HXDLIN(  33)														while((_g8 < _g9)){
HXLINE(  33)															_g8 = (_g8 + 1);
HXDLIN(  33)															int y14 = (_g8 - 1);
HXDLIN(  33)															{
HXLINE(  33)																int _g10 = 0;
HXDLIN(  33)																int _g11 = b49->width;
HXDLIN(  33)																while((_g10 < _g11)){
HXLINE(  33)																	_g10 = (_g10 + 1);
HXDLIN(  33)																	int x18 = (_g10 - 1);
HXDLIN(  33)																	{
HXLINE(  33)																		w = (w + 1);
HXDLIN(  33)																		b49->data->b[(w - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  33)																	{
HXLINE(  33)																		w = (w + 1);
HXDLIN(  33)																		b49->data->b[(w - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  33)																	{
HXLINE(  33)																		w = (w + 1);
HXDLIN(  33)																		b49->data->b[(w - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  33)																	{
HXLINE(  33)																		w = (w + 1);
HXDLIN(  33)																		b49->data->b[(w - 1)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  33)											undoImage1 = b49;
            										}
            										break;
            										case (int)1: {
HXLINE(  33)											 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)											 ::iterMagic::ArrIntImg a60 = arrI;
HXDLIN(  33)											{
HXLINE(  33)												a60->width = width;
HXDLIN(  33)												a60->height = height;
HXDLIN(  33)												a60->data = ::Array_obj< int >::__new(0);
HXDLIN(  33)												a60->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  33)												{
HXLINE(  33)													int _g12 = 0;
HXDLIN(  33)													int _g13 = a60->length;
HXDLIN(  33)													while((_g12 < _g13)){
HXLINE(  33)														_g12 = (_g12 + 1);
HXDLIN(  33)														int i32 = (_g12 - 1);
HXDLIN(  33)														a60->data[i32] = 0;
            													}
            												}
            											}
HXDLIN(  33)											undoImage1 = a60;
            										}
            										break;
            										case (int)2: {
HXLINE(  33)											 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  33)											 ::iterMagic::U32ArrImg b50 = u32a;
HXDLIN(  33)											{
HXLINE(  33)												b50->width = width;
HXDLIN(  33)												b50->height = height;
HXDLIN(  33)												b50->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  33)												int size = (b50->length * 4);
HXDLIN(  33)												b50->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  33)												{
HXLINE(  33)													int _g14 = 0;
HXDLIN(  33)													int _g15 = b50->length;
HXDLIN(  33)													while((_g14 < _g15)){
HXLINE(  33)														_g14 = (_g14 + 1);
HXDLIN(  33)														int i33 = (_g14 - 1);
HXDLIN(  33)														{
HXLINE(  33)															 ::haxe::io::ArrayBufferViewImpl this267 = b50->data;
HXDLIN(  33)															bool undoImage2;
HXDLIN(  33)															if ((i33 >= 0)) {
HXLINE(  33)																undoImage2 = (i33 < (this267->byteLength >> 2));
            															}
            															else {
HXLINE(  33)																undoImage2 = false;
            															}
HXDLIN(  33)															if (undoImage2) {
HXLINE(  33)																 ::haxe::io::Bytes _this = this267->bytes;
HXDLIN(  33)																int pos = ((i33 << 2) + this267->byteOffset);
HXDLIN(  33)																_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  33)																_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  33)																_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  33)																_this->b[(pos + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
HXDLIN(  33)											undoImage1 = b50;
            										}
            										break;
            										case (int)3: {
HXLINE(  33)											 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)											 ::iterMagic::VecIntImg v4 = vec;
HXDLIN(  33)											{
HXLINE(  33)												v4->width = width;
HXDLIN(  33)												v4->height = height;
HXDLIN(  33)												v4->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  33)												v4->data = ::Array_obj< int >::__new(v4->length);
HXDLIN(  33)												{
HXLINE(  33)													int _g16 = 0;
HXDLIN(  33)													int _g17 = v4->length;
HXDLIN(  33)													while((_g16 < _g17)){
HXLINE(  33)														_g16 = (_g16 + 1);
HXDLIN(  33)														int i34 = (_g16 - 1);
HXDLIN(  33)														v4->data->__unsafe_set(i34,0);
            													}
            												}
            											}
HXDLIN(  33)											undoImage1 = v4;
            										}
            										break;
            										case (int)4: {
HXLINE(  33)											 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)											 ::iterMagic::StackIntImg b51 = sInt;
HXDLIN(  33)											{
HXLINE(  33)												b51->width = width;
HXDLIN(  33)												b51->height = height;
HXDLIN(  33)												b51->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  33)												b51->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  33)												{
HXLINE(  33)													int len1 = b51->length;
HXDLIN(  33)													 ::haxe::ds::GenericStack_Int d = b51->data;
HXDLIN(  33)													if (::hx::IsNull( d->head )) {
HXLINE(  33)														int _g18 = 0;
HXDLIN(  33)														int _g19 = len1;
HXDLIN(  33)														while((_g18 < _g19)){
HXLINE(  33)															_g18 = (_g18 + 1);
HXDLIN(  33)															int i35 = (_g18 - 1);
HXDLIN(  33)															d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            														}
            													}
            													else {
HXLINE(  33)														int _g20 = 0;
HXDLIN(  33)														int _g21 = len1;
HXDLIN(  33)														while((_g20 < _g21)){
HXLINE(  33)															_g20 = (_g20 + 1);
HXDLIN(  33)															int i36 = (_g20 - 1);
HXDLIN(  33)															{
HXLINE(  33)																 ::haxe::ds::GenericCell_Int l = b51->data->head;
HXDLIN(  33)																 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  33)																{
HXLINE(  33)																	int _g22 = 0;
HXDLIN(  33)																	int _g23 = i36;
HXDLIN(  33)																	while((_g22 < _g23)){
HXLINE(  33)																		_g22 = (_g22 + 1);
HXDLIN(  33)																		int i37 = (_g22 - 1);
HXLINE( 345)																		prev = l;
HXLINE( 346)																		l = l->next;
            																	}
            																}
HXLINE(  33)																if (::hx::IsNull( prev )) {
HXLINE(  33)																	b51->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  33)																	l = null();
            																}
            																else {
HXLINE(  33)																	prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  33)																	l = null();
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  33)											undoImage1 = b51;
            										}
            										break;
            									}
HXDLIN(  33)									this266->image = undoImage1;
HXDLIN(  33)									this266->width = width;
HXDLIN(  33)									this266->height = height;
HXDLIN(  33)									this266->imageType = ( (int)(imageType) );
HXDLIN(  33)									undoImage = this266;
HXDLIN(  33)									{
HXLINE(  33)										int rectLeft = xIter3->start;
HXDLIN(  33)										int rectTop = yIter3->start;
HXDLIN(  33)										int rectRight = xIter3->max;
HXDLIN(  33)										bool forceClear = false;
HXDLIN(  33)										{
HXLINE(  33)											int _g24 = rectTop;
HXDLIN(  33)											int _g25 = yIter3->max;
HXDLIN(  33)											while((_g24 < _g25)){
HXLINE(  33)												_g24 = (_g24 + 1);
HXDLIN(  33)												int dy3 = (_g24 - 1);
HXDLIN(  33)												{
HXLINE(  33)													int _g26 = rectLeft;
HXDLIN(  33)													int _g27 = rectRight;
HXDLIN(  33)													while((_g26 < _g27)){
HXLINE(  33)														_g26 = (_g26 + 1);
HXDLIN(  33)														int dx3 = (_g26 - 1);
HXDLIN(  33)														::Dynamic this268 = this217->image;
HXDLIN(  33)														int index4;
HXDLIN(  33)														if (this217->useVirtualPos) {
HXLINE(  33)															index4 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this217->virtualY) * ( (Float)(this217->width) )) + dx3) - this217->virtualX));
            														}
            														else {
HXLINE(  33)															index4 = ::Std_obj::_hx_int(( (Float)(((dy3 * this217->width) + dx3)) ));
            														}
HXDLIN(  33)														int c4 = ::iterMagic::Iimg_obj::get(this268,index4);
HXDLIN(  33)														int col;
HXDLIN(  33)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)															col = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            														}
            														else {
HXLINE(  33)															col = c4;
            														}
HXDLIN(  33)														bool _hx_tmp60;
HXDLIN(  33)														if (this217->useMask) {
HXLINE(  33)															_hx_tmp60 = ::hx::IsNotNull( this217->mask );
            														}
            														else {
HXLINE(  33)															_hx_tmp60 = false;
            														}
HXDLIN(  33)														if (_hx_tmp60) {
HXLINE(  33)															 ::pi_xy::ImageStruct this269 = this217->mask;
HXDLIN(  33)															::Dynamic this270 = this269->image;
HXDLIN(  33)															int index5;
HXDLIN(  33)															if (this269->useVirtualPos) {
HXLINE(  33)																index5 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this269->virtualY) * ( (Float)(this269->width) )) + dx3) - this269->virtualX));
            															}
            															else {
HXLINE(  33)																index5 = ::Std_obj::_hx_int(( (Float)(((dy3 * this269->width) + dx3)) ));
            															}
HXDLIN(  33)															int c5 = ::iterMagic::Iimg_obj::get(this270,index5);
HXDLIN(  33)															int v5;
HXDLIN(  33)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																v5 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            															}
            															else {
HXLINE(  33)																v5 = c5;
            															}
HXDLIN(  33)															int maskPixel = v5;
HXDLIN(  33)															int this271 = col;
HXDLIN(  33)															if ((maskPixel == 0)) {
HXLINE(  33)																col = this271;
            															}
            															else {
HXLINE(  33)																Float m0;
HXDLIN(  33)																int this272 = ((maskPixel >> 24) & 255);
HXDLIN(  33)																if ((this272 == 0)) {
HXLINE(  33)																	m0 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	m0 = (( (Float)(this272) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float m1;
HXDLIN(  33)																int this273 = ((maskPixel >> 16) & 255);
HXDLIN(  33)																if ((this273 == 0)) {
HXLINE(  33)																	m1 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	m1 = (( (Float)(this273) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float m2;
HXDLIN(  33)																int this274 = ((maskPixel >> 8) & 255);
HXDLIN(  33)																if ((this274 == 0)) {
HXLINE(  33)																	m2 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	m2 = (( (Float)(this274) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float m3;
HXDLIN(  33)																int this275 = (maskPixel & 255);
HXDLIN(  33)																if ((this275 == 0)) {
HXLINE(  33)																	m3 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	m3 = (( (Float)(this275) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this271 >> 24) & 255)) )));
HXDLIN(  33)																int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this271 >> 16) & 255)) )));
HXDLIN(  33)																int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this271 >> 8) & 255)) )));
HXDLIN(  33)																int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this271 & 255)) )));
HXDLIN(  33)																col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN(  33)														if ((col != 0)) {
HXLINE(  33)															int x19 = (dx3 - rectLeft);
HXDLIN(  33)															int y15 = (dy3 - rectTop);
HXDLIN(  33)															int c6 = col;
HXDLIN(  33)															bool _hx_tmp61;
HXDLIN(  33)															if ((((c6 >> 24) & 255) < 254)) {
HXLINE(  33)																_hx_tmp61 = undoImage->transparent;
            															}
            															else {
HXLINE(  33)																_hx_tmp61 = false;
            															}
HXDLIN(  33)															if (_hx_tmp61) {
HXLINE(  33)																int location28;
HXDLIN(  33)																if (undoImage->useVirtualPos) {
HXLINE(  33)																	location28 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x19) - undoImage->virtualX));
            																}
            																else {
HXLINE(  33)																	location28 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage->width) + x19)) ));
            																}
HXDLIN(  33)																int this276 = ::iterMagic::Iimg_obj::get(undoImage->image,location28);
HXDLIN(  33)																int this277;
HXDLIN(  33)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																	this277 = ((((((this276 >> 24) & 255) << 24) | ((this276 & 255) << 16)) | (((this276 >> 8) & 255) << 8)) | ((this276 >> 16) & 255));
            																}
            																else {
HXLINE(  33)																	this277 = this276;
            																}
HXDLIN(  33)																Float a129;
HXDLIN(  33)																int this278 = ((this277 >> 24) & 255);
HXDLIN(  33)																if ((this278 == 0)) {
HXLINE(  33)																	a129 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	a129 = (( (Float)(this278) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float r129;
HXDLIN(  33)																int this279 = ((this277 >> 16) & 255);
HXDLIN(  33)																if ((this279 == 0)) {
HXLINE(  33)																	r129 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	r129 = (( (Float)(this279) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float g129;
HXDLIN(  33)																int this280 = ((this277 >> 8) & 255);
HXDLIN(  33)																if ((this280 == 0)) {
HXLINE(  33)																	g129 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	g129 = (( (Float)(this280) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float b129;
HXDLIN(  33)																int this281 = (this277 & 255);
HXDLIN(  33)																if ((this281 == 0)) {
HXLINE(  33)																	b129 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	b129 = (( (Float)(this281) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float a228;
HXDLIN(  33)																int this282 = ((col >> 24) & 255);
HXDLIN(  33)																if ((this282 == 0)) {
HXLINE(  33)																	a228 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	a228 = (( (Float)(this282) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float r228;
HXDLIN(  33)																int this283 = ((col >> 16) & 255);
HXDLIN(  33)																if ((this283 == 0)) {
HXLINE(  33)																	r228 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	r228 = (( (Float)(this283) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float g228;
HXDLIN(  33)																int this284 = ((col >> 8) & 255);
HXDLIN(  33)																if ((this284 == 0)) {
HXLINE(  33)																	g228 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	g228 = (( (Float)(this284) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float b228;
HXDLIN(  33)																int this285 = (col & 255);
HXDLIN(  33)																if ((this285 == 0)) {
HXLINE(  33)																	b228 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	b228 = (( (Float)(this285) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float a328 = (a129 * (( (Float)(1) ) - a228));
HXDLIN(  33)																int r49 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r129 * a328) + (r228 * a228))));
HXDLIN(  33)																int g49 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g129 * a328) + (g228 * a228))));
HXDLIN(  33)																int b52 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b129 * a328) + (b228 * a228))));
HXDLIN(  33)																int a61 = ::Std_obj::_hx_int((( (Float)(255) ) * (a328 + a228)));
HXDLIN(  33)																int blended28 = ((((a61 << 24) | (r49 << 16)) | (g49 << 8)) | b52);
HXDLIN(  33)																{
HXLINE(  33)																	int _hx_tmp62;
HXDLIN(  33)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																		_hx_tmp62 = ((((((blended28 >> 24) & 255) << 24) | ((blended28 & 255) << 16)) | (((blended28 >> 8) & 255) << 8)) | ((blended28 >> 16) & 255));
            																	}
            																	else {
HXLINE(  33)																		_hx_tmp62 = blended28;
            																	}
HXDLIN(  33)																	::iterMagic::Iimg_obj::set(undoImage->image,location28,_hx_tmp62);
            																}
            															}
            															else {
HXLINE(  33)																::Dynamic this286 = undoImage->image;
HXDLIN(  33)																int index6;
HXDLIN(  33)																if (undoImage->useVirtualPos) {
HXLINE(  33)																	index6 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x19) - undoImage->virtualX));
            																}
            																else {
HXLINE(  33)																	index6 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage->width) + x19)) ));
            																}
HXDLIN(  33)																int _hx_tmp63;
HXDLIN(  33)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																	_hx_tmp63 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            																}
            																else {
HXLINE(  33)																	_hx_tmp63 = c6;
            																}
HXDLIN(  33)																::iterMagic::Iimg_obj::set(this286,index6,_hx_tmp63);
            															}
            														}
            														else {
HXLINE(  33)															if (forceClear) {
HXLINE(  33)																::Dynamic this287 = undoImage->image;
HXDLIN(  33)																int x20 = (dx3 - rectLeft);
HXDLIN(  33)																int y16 = (dy3 - rectTop);
HXDLIN(  33)																int index7;
HXDLIN(  33)																if (undoImage->useVirtualPos) {
HXLINE(  33)																	index7 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x20) - undoImage->virtualX));
            																}
            																else {
HXLINE(  33)																	index7 = ::Std_obj::_hx_int(( (Float)(((y16 * undoImage->width) + x20)) ));
            																}
HXDLIN(  33)																::iterMagic::Iimg_obj::set(this287,index7,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN(  33)								bool found = false;
HXDLIN(  33)								Float s = ((Float)0.);
HXDLIN(  33)								Float t = ((Float)0.);
HXDLIN(  33)								Float sxx = ((Float)0.);
HXDLIN(  33)								Float txx = ((Float)0.);
HXDLIN(  33)								{
HXLINE(  33)									int _g_min = xIter3->start;
HXDLIN(  33)									int _g_max = xIter3->max;
HXDLIN(  33)									while((_g_min < _g_max)){
HXLINE(  33)										_g_min = (_g_min + 1);
HXDLIN(  33)										int x21 = (_g_min - 1);
HXLINE(  60)										sxx = (sx * ( (Float)(x21) ));
HXLINE(  61)										txx = (tx * ( (Float)(x21) ));
HXLINE(  62)										found = false;
HXLINE(  33)										{
HXLINE(  33)											int _g_min1 = yIter3->start;
HXDLIN(  33)											int _g_max1 = yIter3->max;
HXDLIN(  33)											while((_g_min1 < _g_max1)){
HXLINE(  33)												_g_min1 = (_g_min1 + 1);
HXDLIN(  33)												int y17 = (_g_min1 - 1);
HXLINE(  64)												s = ((s0 + sxx) + (sy * ( (Float)(y17) )));
HXLINE(  65)												t = ((t0 + txx) + (ty * ( (Float)(y17) )));
HXLINE(  33)												bool _hx_tmp64;
HXDLIN(  33)												if (!((s <= 0))) {
HXLINE(  33)													_hx_tmp64 = (t <= 0);
            												}
            												else {
HXLINE(  33)													_hx_tmp64 = true;
            												}
HXDLIN(  33)												if (_hx_tmp64) {
HXLINE(  33)													if (found) {
HXLINE(  33)														goto _hx_goto_21;
            													}
            												}
            												else {
HXLINE(  33)													if (((s + t) < A)) {
HXLINE(  33)														{
HXLINE(  33)															int c7 = color2;
HXDLIN(  33)															bool _hx_tmp65;
HXDLIN(  33)															if ((((c7 >> 24) & 255) < 254)) {
HXLINE(  33)																_hx_tmp65 = this217->transparent;
            															}
            															else {
HXLINE(  33)																_hx_tmp65 = false;
            															}
HXDLIN(  33)															if (_hx_tmp65) {
HXLINE(  33)																int location29;
HXDLIN(  33)																if (this217->useVirtualPos) {
HXLINE(  33)																	location29 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - this217->virtualY) * ( (Float)(this217->width) )) + x21) - this217->virtualX));
            																}
            																else {
HXLINE(  33)																	location29 = ::Std_obj::_hx_int(( (Float)(((y17 * this217->width) + x21)) ));
            																}
HXDLIN(  33)																int this288 = ::iterMagic::Iimg_obj::get(this217->image,location29);
HXDLIN(  33)																int this289;
HXDLIN(  33)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																	this289 = ((((((this288 >> 24) & 255) << 24) | ((this288 & 255) << 16)) | (((this288 >> 8) & 255) << 8)) | ((this288 >> 16) & 255));
            																}
            																else {
HXLINE(  33)																	this289 = this288;
            																}
HXDLIN(  33)																Float a130;
HXDLIN(  33)																int this290 = ((this289 >> 24) & 255);
HXDLIN(  33)																if ((this290 == 0)) {
HXLINE(  33)																	a130 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	a130 = (( (Float)(this290) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float r130;
HXDLIN(  33)																int this291 = ((this289 >> 16) & 255);
HXDLIN(  33)																if ((this291 == 0)) {
HXLINE(  33)																	r130 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	r130 = (( (Float)(this291) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float g130;
HXDLIN(  33)																int this292 = ((this289 >> 8) & 255);
HXDLIN(  33)																if ((this292 == 0)) {
HXLINE(  33)																	g130 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	g130 = (( (Float)(this292) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float b130;
HXDLIN(  33)																int this293 = (this289 & 255);
HXDLIN(  33)																if ((this293 == 0)) {
HXLINE(  33)																	b130 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	b130 = (( (Float)(this293) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float a229;
HXDLIN(  33)																int this294 = ((color2 >> 24) & 255);
HXDLIN(  33)																if ((this294 == 0)) {
HXLINE(  33)																	a229 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	a229 = (( (Float)(this294) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float r229;
HXDLIN(  33)																int this295 = ((color2 >> 16) & 255);
HXDLIN(  33)																if ((this295 == 0)) {
HXLINE(  33)																	r229 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	r229 = (( (Float)(this295) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float g229;
HXDLIN(  33)																int this296 = ((color2 >> 8) & 255);
HXDLIN(  33)																if ((this296 == 0)) {
HXLINE(  33)																	g229 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	g229 = (( (Float)(this296) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float b229;
HXDLIN(  33)																int this297 = (color2 & 255);
HXDLIN(  33)																if ((this297 == 0)) {
HXLINE(  33)																	b229 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	b229 = (( (Float)(this297) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float a329 = (a130 * (( (Float)(1) ) - a229));
HXDLIN(  33)																int r50 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r130 * a329) + (r229 * a229))));
HXDLIN(  33)																int g50 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g130 * a329) + (g229 * a229))));
HXDLIN(  33)																int b53 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b130 * a329) + (b229 * a229))));
HXDLIN(  33)																int a62 = ::Std_obj::_hx_int((( (Float)(255) ) * (a329 + a229)));
HXDLIN(  33)																int blended29 = ((((a62 << 24) | (r50 << 16)) | (g50 << 8)) | b53);
HXDLIN(  33)																{
HXLINE(  33)																	int _hx_tmp66;
HXDLIN(  33)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																		_hx_tmp66 = ((((((blended29 >> 24) & 255) << 24) | ((blended29 & 255) << 16)) | (((blended29 >> 8) & 255) << 8)) | ((blended29 >> 16) & 255));
            																	}
            																	else {
HXLINE(  33)																		_hx_tmp66 = blended29;
            																	}
HXDLIN(  33)																	::iterMagic::Iimg_obj::set(this217->image,location29,_hx_tmp66);
            																}
            															}
            															else {
HXLINE(  33)																::Dynamic this298 = this217->image;
HXDLIN(  33)																int index8;
HXDLIN(  33)																if (this217->useVirtualPos) {
HXLINE(  33)																	index8 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - this217->virtualY) * ( (Float)(this217->width) )) + x21) - this217->virtualX));
            																}
            																else {
HXLINE(  33)																	index8 = ::Std_obj::_hx_int(( (Float)(((y17 * this217->width) + x21)) ));
            																}
HXDLIN(  33)																int _hx_tmp67;
HXDLIN(  33)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																	_hx_tmp67 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            																}
            																else {
HXLINE(  33)																	_hx_tmp67 = c7;
            																}
HXDLIN(  33)																::iterMagic::Iimg_obj::set(this298,index8,_hx_tmp67);
            															}
            														}
HXLINE(  73)														found = true;
            													}
            													else {
HXLINE(  33)														if (found) {
HXLINE(  33)															goto _hx_goto_21;
            														}
            													}
            												}
            											}
            											_hx_goto_21:;
            										}
            									}
            								}
HXDLIN(  33)								if ((hasHit == true)) {
HXLINE(  33)									 ::pi_xy::algo::HitTri v6 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx1,by1,cx1,cy1,true);
HXDLIN(  33)									if (hasUndo) {
HXLINE(  33)										v6->undoImage = undoImage;
HXDLIN(  33)										v6->undoX = xIter3->start;
HXDLIN(  33)										v6->undoY = yIter3->start;
            									}
            								}
            							}
            						}
HXDLIN(  33)						{
HXLINE(  33)							Float bx2 = cx;
HXDLIN(  33)							Float by2 = cy;
HXDLIN(  33)							Float cx2 = dx2;
HXDLIN(  33)							Float cy2 = dy2;
HXDLIN(  33)							bool hasUndo1 = false;
HXDLIN(  33)							bool adjustWinding1 = (((((bx * by2) - (bx2 * by)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * by) - (bx * cy2))) > 0);
HXDLIN(  33)							if (!(adjustWinding1)) {
HXLINE(  33)								Float bx_1 = bx2;
HXDLIN(  33)								Float by_1 = by2;
HXLINE(  25)								bx2 = cx2;
HXLINE(  26)								by2 = cy2;
HXLINE(  27)								cx2 = bx_1;
HXLINE(  28)								cy2 = by_1;
            							}
HXLINE(  33)							{
HXLINE(  33)								Float s01 = ((by * cx2) - (bx * cy2));
HXDLIN(  33)								Float sx1 = (cy2 - by);
HXDLIN(  33)								Float sy1 = (bx - cx2);
HXDLIN(  33)								Float t01 = ((bx * by2) - (by * bx2));
HXDLIN(  33)								Float tx1 = (by - by2);
HXDLIN(  33)								Float ty1 = (bx2 - bx);
HXDLIN(  33)								Float A1 = ((((-(by2) * cx2) + (by * (-(bx2) + cx2))) + (bx * (by2 - cy2))) + (bx2 * cy2));
HXDLIN(  33)								 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  33)								if ((bx > bx2)) {
HXLINE(  33)									if ((bx > cx2)) {
HXLINE(  33)										int min4;
HXDLIN(  33)										if ((bx2 > cx2)) {
HXLINE(  33)											min4 = ::Math_obj::floor(cx2);
            										}
            										else {
HXLINE(  33)											min4 = ::Math_obj::floor(bx2);
            										}
HXDLIN(  33)										int ii_min16 = min4;
HXDLIN(  33)										int ii_max16 = ::Math_obj::ceil(bx);
HXDLIN(  33)										xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            									}
            									else {
HXLINE(  33)										int ii_min17 = ::Math_obj::floor(bx2);
HXDLIN(  33)										int ii_max17 = ::Math_obj::ceil(cx2);
HXDLIN(  33)										xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            									}
            								}
            								else {
HXLINE(  33)									if ((bx2 > cx2)) {
HXLINE(  33)										int min5;
HXDLIN(  33)										if ((bx > cx2)) {
HXLINE(  33)											min5 = ::Math_obj::floor(cx2);
            										}
            										else {
HXLINE(  33)											min5 = ::Math_obj::ceil(bx);
            										}
HXDLIN(  33)										int ii_min18 = min5;
HXDLIN(  33)										int ii_max18 = ::Math_obj::ceil(bx2);
HXDLIN(  33)										xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            									}
            									else {
HXLINE(  33)										int ii_min19 = ::Math_obj::floor(bx);
HXDLIN(  33)										int ii_max19 = ::Math_obj::ceil(cx2);
HXDLIN(  33)										xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            									}
            								}
HXDLIN(  33)								 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  33)								if ((by > by2)) {
HXLINE(  33)									if ((by > cy2)) {
HXLINE(  33)										int min6;
HXDLIN(  33)										if ((by2 > cy2)) {
HXLINE(  33)											min6 = ::Math_obj::floor(cy2);
            										}
            										else {
HXLINE(  33)											min6 = ::Math_obj::floor(by2);
            										}
HXDLIN(  33)										int ii_min20 = min6;
HXDLIN(  33)										int ii_max20 = ::Math_obj::ceil(by);
HXDLIN(  33)										yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            									}
            									else {
HXLINE(  33)										int ii_min21 = ::Math_obj::floor(by2);
HXDLIN(  33)										int ii_max21 = ::Math_obj::ceil(cy2);
HXDLIN(  33)										yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            									}
            								}
            								else {
HXLINE(  33)									if ((by2 > cy2)) {
HXLINE(  33)										int min7;
HXDLIN(  33)										if ((by > cy2)) {
HXLINE(  33)											min7 = ::Math_obj::floor(cy2);
            										}
            										else {
HXLINE(  33)											min7 = ::Math_obj::ceil(by);
            										}
HXDLIN(  33)										int ii_min22 = min7;
HXDLIN(  33)										int ii_max22 = ::Math_obj::ceil(by2);
HXDLIN(  33)										yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            									}
            									else {
HXLINE(  33)										int ii_min23 = ::Math_obj::floor(by);
HXDLIN(  33)										int ii_max23 = ::Math_obj::ceil(cy2);
HXDLIN(  33)										yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            									}
            								}
HXDLIN(  33)								 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  33)								if (hasUndo1) {
HXLINE(  33)									int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  33)									int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  33)									 ::Dynamic imageType1 = null();
HXDLIN(  33)									 ::pi_xy::ImageStruct this299 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  33)									if (::hx::IsNull( imageType1 )) {
HXLINE(  54)										imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            									}
HXLINE(  33)									::Dynamic undoImage4;
HXDLIN(  33)									switch((int)(( (int)(imageType1) ))){
            										case (int)0: {
HXLINE(  33)											 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  33)											 ::iterMagic::BytesImg b54 = byt1;
HXDLIN(  33)											{
HXLINE(  33)												b54->width = width1;
HXDLIN(  33)												b54->height = height1;
HXDLIN(  33)												b54->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  33)												b54->data = ::haxe::io::Bytes_obj::alloc((b54->length * 4));
HXDLIN(  33)												{
HXLINE(  33)													int len2 = b54->length;
HXDLIN(  33)													int w1 = 0;
HXDLIN(  33)													{
HXLINE(  33)														int _g28 = 0;
HXDLIN(  33)														int _g29 = b54->height;
HXDLIN(  33)														while((_g28 < _g29)){
HXLINE(  33)															_g28 = (_g28 + 1);
HXDLIN(  33)															int y18 = (_g28 - 1);
HXDLIN(  33)															{
HXLINE(  33)																int _g30 = 0;
HXDLIN(  33)																int _g31 = b54->width;
HXDLIN(  33)																while((_g30 < _g31)){
HXLINE(  33)																	_g30 = (_g30 + 1);
HXDLIN(  33)																	int x22 = (_g30 - 1);
HXDLIN(  33)																	{
HXLINE(  33)																		w1 = (w1 + 1);
HXDLIN(  33)																		b54->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  33)																	{
HXLINE(  33)																		w1 = (w1 + 1);
HXDLIN(  33)																		b54->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  33)																	{
HXLINE(  33)																		w1 = (w1 + 1);
HXDLIN(  33)																		b54->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  33)																	{
HXLINE(  33)																		w1 = (w1 + 1);
HXDLIN(  33)																		b54->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  33)											undoImage4 = b54;
            										}
            										break;
            										case (int)1: {
HXLINE(  33)											 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)											 ::iterMagic::ArrIntImg a63 = arrI1;
HXDLIN(  33)											{
HXLINE(  33)												a63->width = width1;
HXDLIN(  33)												a63->height = height1;
HXDLIN(  33)												a63->data = ::Array_obj< int >::__new(0);
HXDLIN(  33)												a63->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  33)												{
HXLINE(  33)													int _g32 = 0;
HXDLIN(  33)													int _g33 = a63->length;
HXDLIN(  33)													while((_g32 < _g33)){
HXLINE(  33)														_g32 = (_g32 + 1);
HXDLIN(  33)														int i38 = (_g32 - 1);
HXDLIN(  33)														a63->data[i38] = 0;
            													}
            												}
            											}
HXDLIN(  33)											undoImage4 = a63;
            										}
            										break;
            										case (int)2: {
HXLINE(  33)											 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  33)											 ::iterMagic::U32ArrImg b55 = u32a1;
HXDLIN(  33)											{
HXLINE(  33)												b55->width = width1;
HXDLIN(  33)												b55->height = height1;
HXDLIN(  33)												b55->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  33)												int size1 = (b55->length * 4);
HXDLIN(  33)												b55->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  33)												{
HXLINE(  33)													int _g34 = 0;
HXDLIN(  33)													int _g35 = b55->length;
HXDLIN(  33)													while((_g34 < _g35)){
HXLINE(  33)														_g34 = (_g34 + 1);
HXDLIN(  33)														int i39 = (_g34 - 1);
HXDLIN(  33)														{
HXLINE(  33)															 ::haxe::io::ArrayBufferViewImpl this300 = b55->data;
HXDLIN(  33)															bool undoImage5;
HXDLIN(  33)															if ((i39 >= 0)) {
HXLINE(  33)																undoImage5 = (i39 < (this300->byteLength >> 2));
            															}
            															else {
HXLINE(  33)																undoImage5 = false;
            															}
HXDLIN(  33)															if (undoImage5) {
HXLINE(  33)																 ::haxe::io::Bytes _this1 = this300->bytes;
HXDLIN(  33)																int pos1 = ((i39 << 2) + this300->byteOffset);
HXDLIN(  33)																_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  33)																_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  33)																_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  33)																_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
HXDLIN(  33)											undoImage4 = b55;
            										}
            										break;
            										case (int)3: {
HXLINE(  33)											 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)											 ::iterMagic::VecIntImg v7 = vec1;
HXDLIN(  33)											{
HXLINE(  33)												v7->width = width1;
HXDLIN(  33)												v7->height = height1;
HXDLIN(  33)												v7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  33)												v7->data = ::Array_obj< int >::__new(v7->length);
HXDLIN(  33)												{
HXLINE(  33)													int _g36 = 0;
HXDLIN(  33)													int _g37 = v7->length;
HXDLIN(  33)													while((_g36 < _g37)){
HXLINE(  33)														_g36 = (_g36 + 1);
HXDLIN(  33)														int i40 = (_g36 - 1);
HXDLIN(  33)														v7->data->__unsafe_set(i40,0);
            													}
            												}
            											}
HXDLIN(  33)											undoImage4 = v7;
            										}
            										break;
            										case (int)4: {
HXLINE(  33)											 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)											 ::iterMagic::StackIntImg b56 = sInt1;
HXDLIN(  33)											{
HXLINE(  33)												b56->width = width1;
HXDLIN(  33)												b56->height = height1;
HXDLIN(  33)												b56->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  33)												b56->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  33)												{
HXLINE(  33)													int len3 = b56->length;
HXDLIN(  33)													 ::haxe::ds::GenericStack_Int d1 = b56->data;
HXDLIN(  33)													if (::hx::IsNull( d1->head )) {
HXLINE(  33)														int _g38 = 0;
HXDLIN(  33)														int _g39 = len3;
HXDLIN(  33)														while((_g38 < _g39)){
HXLINE(  33)															_g38 = (_g38 + 1);
HXDLIN(  33)															int i41 = (_g38 - 1);
HXDLIN(  33)															d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            														}
            													}
            													else {
HXLINE(  33)														int _g40 = 0;
HXDLIN(  33)														int _g41 = len3;
HXDLIN(  33)														while((_g40 < _g41)){
HXLINE(  33)															_g40 = (_g40 + 1);
HXDLIN(  33)															int i42 = (_g40 - 1);
HXDLIN(  33)															{
HXLINE(  33)																 ::haxe::ds::GenericCell_Int l1 = b56->data->head;
HXDLIN(  33)																 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  33)																{
HXLINE(  33)																	int _g42 = 0;
HXDLIN(  33)																	int _g43 = i42;
HXDLIN(  33)																	while((_g42 < _g43)){
HXLINE(  33)																		_g42 = (_g42 + 1);
HXDLIN(  33)																		int i43 = (_g42 - 1);
HXLINE( 345)																		prev1 = l1;
HXLINE( 346)																		l1 = l1->next;
            																	}
            																}
HXLINE(  33)																if (::hx::IsNull( prev1 )) {
HXLINE(  33)																	b56->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  33)																	l1 = null();
            																}
            																else {
HXLINE(  33)																	prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  33)																	l1 = null();
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  33)											undoImage4 = b56;
            										}
            										break;
            									}
HXDLIN(  33)									this299->image = undoImage4;
HXDLIN(  33)									this299->width = width1;
HXDLIN(  33)									this299->height = height1;
HXDLIN(  33)									this299->imageType = ( (int)(imageType1) );
HXDLIN(  33)									undoImage3 = this299;
HXDLIN(  33)									{
HXLINE(  33)										int rectLeft1 = xIter31->start;
HXDLIN(  33)										int rectTop1 = yIter31->start;
HXDLIN(  33)										int rectRight1 = xIter31->max;
HXDLIN(  33)										bool forceClear1 = false;
HXDLIN(  33)										{
HXLINE(  33)											int _g44 = rectTop1;
HXDLIN(  33)											int _g45 = yIter31->max;
HXDLIN(  33)											while((_g44 < _g45)){
HXLINE(  33)												_g44 = (_g44 + 1);
HXDLIN(  33)												int dy4 = (_g44 - 1);
HXDLIN(  33)												{
HXLINE(  33)													int _g46 = rectLeft1;
HXDLIN(  33)													int _g47 = rectRight1;
HXDLIN(  33)													while((_g46 < _g47)){
HXLINE(  33)														_g46 = (_g46 + 1);
HXDLIN(  33)														int dx4 = (_g46 - 1);
HXDLIN(  33)														::Dynamic this301 = this217->image;
HXDLIN(  33)														int index9;
HXDLIN(  33)														if (this217->useVirtualPos) {
HXLINE(  33)															index9 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this217->virtualY) * ( (Float)(this217->width) )) + dx4) - this217->virtualX));
            														}
            														else {
HXLINE(  33)															index9 = ::Std_obj::_hx_int(( (Float)(((dy4 * this217->width) + dx4)) ));
            														}
HXDLIN(  33)														int c8 = ::iterMagic::Iimg_obj::get(this301,index9);
HXDLIN(  33)														int col1;
HXDLIN(  33)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)															col1 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            														}
            														else {
HXLINE(  33)															col1 = c8;
            														}
HXDLIN(  33)														bool _hx_tmp68;
HXDLIN(  33)														if (this217->useMask) {
HXLINE(  33)															_hx_tmp68 = ::hx::IsNotNull( this217->mask );
            														}
            														else {
HXLINE(  33)															_hx_tmp68 = false;
            														}
HXDLIN(  33)														if (_hx_tmp68) {
HXLINE(  33)															 ::pi_xy::ImageStruct this302 = this217->mask;
HXDLIN(  33)															::Dynamic this303 = this302->image;
HXDLIN(  33)															int index10;
HXDLIN(  33)															if (this302->useVirtualPos) {
HXLINE(  33)																index10 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this302->virtualY) * ( (Float)(this302->width) )) + dx4) - this302->virtualX));
            															}
            															else {
HXLINE(  33)																index10 = ::Std_obj::_hx_int(( (Float)(((dy4 * this302->width) + dx4)) ));
            															}
HXDLIN(  33)															int c9 = ::iterMagic::Iimg_obj::get(this303,index10);
HXDLIN(  33)															int v8;
HXDLIN(  33)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																v8 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            															}
            															else {
HXLINE(  33)																v8 = c9;
            															}
HXDLIN(  33)															int maskPixel1 = v8;
HXDLIN(  33)															int this304 = col1;
HXDLIN(  33)															if ((maskPixel1 == 0)) {
HXLINE(  33)																col1 = this304;
            															}
            															else {
HXLINE(  33)																Float m01;
HXDLIN(  33)																int this305 = ((maskPixel1 >> 24) & 255);
HXDLIN(  33)																if ((this305 == 0)) {
HXLINE(  33)																	m01 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	m01 = (( (Float)(this305) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float m11;
HXDLIN(  33)																int this306 = ((maskPixel1 >> 16) & 255);
HXDLIN(  33)																if ((this306 == 0)) {
HXLINE(  33)																	m11 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	m11 = (( (Float)(this306) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float m21;
HXDLIN(  33)																int this307 = ((maskPixel1 >> 8) & 255);
HXDLIN(  33)																if ((this307 == 0)) {
HXLINE(  33)																	m21 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	m21 = (( (Float)(this307) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float m31;
HXDLIN(  33)																int this308 = (maskPixel1 & 255);
HXDLIN(  33)																if ((this308 == 0)) {
HXLINE(  33)																	m31 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	m31 = (( (Float)(this308) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this304 >> 24) & 255)) )));
HXDLIN(  33)																int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this304 >> 16) & 255)) )));
HXDLIN(  33)																int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this304 >> 8) & 255)) )));
HXDLIN(  33)																int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this304 & 255)) )));
HXDLIN(  33)																col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN(  33)														if ((col1 != 0)) {
HXLINE(  33)															int x23 = (dx4 - rectLeft1);
HXDLIN(  33)															int y19 = (dy4 - rectTop1);
HXDLIN(  33)															int c10 = col1;
HXDLIN(  33)															bool _hx_tmp69;
HXDLIN(  33)															if ((((c10 >> 24) & 255) < 254)) {
HXLINE(  33)																_hx_tmp69 = undoImage3->transparent;
            															}
            															else {
HXLINE(  33)																_hx_tmp69 = false;
            															}
HXDLIN(  33)															if (_hx_tmp69) {
HXLINE(  33)																int location30;
HXDLIN(  33)																if (undoImage3->useVirtualPos) {
HXLINE(  33)																	location30 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x23) - undoImage3->virtualX));
            																}
            																else {
HXLINE(  33)																	location30 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage3->width) + x23)) ));
            																}
HXDLIN(  33)																int this309 = ::iterMagic::Iimg_obj::get(undoImage3->image,location30);
HXDLIN(  33)																int this310;
HXDLIN(  33)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																	this310 = ((((((this309 >> 24) & 255) << 24) | ((this309 & 255) << 16)) | (((this309 >> 8) & 255) << 8)) | ((this309 >> 16) & 255));
            																}
            																else {
HXLINE(  33)																	this310 = this309;
            																}
HXDLIN(  33)																Float a131;
HXDLIN(  33)																int this311 = ((this310 >> 24) & 255);
HXDLIN(  33)																if ((this311 == 0)) {
HXLINE(  33)																	a131 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	a131 = (( (Float)(this311) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float r131;
HXDLIN(  33)																int this312 = ((this310 >> 16) & 255);
HXDLIN(  33)																if ((this312 == 0)) {
HXLINE(  33)																	r131 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	r131 = (( (Float)(this312) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float g131;
HXDLIN(  33)																int this313 = ((this310 >> 8) & 255);
HXDLIN(  33)																if ((this313 == 0)) {
HXLINE(  33)																	g131 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	g131 = (( (Float)(this313) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float b131;
HXDLIN(  33)																int this314 = (this310 & 255);
HXDLIN(  33)																if ((this314 == 0)) {
HXLINE(  33)																	b131 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	b131 = (( (Float)(this314) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float a230;
HXDLIN(  33)																int this315 = ((col1 >> 24) & 255);
HXDLIN(  33)																if ((this315 == 0)) {
HXLINE(  33)																	a230 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	a230 = (( (Float)(this315) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float r230;
HXDLIN(  33)																int this316 = ((col1 >> 16) & 255);
HXDLIN(  33)																if ((this316 == 0)) {
HXLINE(  33)																	r230 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	r230 = (( (Float)(this316) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float g230;
HXDLIN(  33)																int this317 = ((col1 >> 8) & 255);
HXDLIN(  33)																if ((this317 == 0)) {
HXLINE(  33)																	g230 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	g230 = (( (Float)(this317) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float b230;
HXDLIN(  33)																int this318 = (col1 & 255);
HXDLIN(  33)																if ((this318 == 0)) {
HXLINE(  33)																	b230 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	b230 = (( (Float)(this318) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float a330 = (a131 * (( (Float)(1) ) - a230));
HXDLIN(  33)																int r51 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r131 * a330) + (r230 * a230))));
HXDLIN(  33)																int g51 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g131 * a330) + (g230 * a230))));
HXDLIN(  33)																int b57 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b131 * a330) + (b230 * a230))));
HXDLIN(  33)																int a64 = ::Std_obj::_hx_int((( (Float)(255) ) * (a330 + a230)));
HXDLIN(  33)																int blended30 = ((((a64 << 24) | (r51 << 16)) | (g51 << 8)) | b57);
HXDLIN(  33)																{
HXLINE(  33)																	int _hx_tmp70;
HXDLIN(  33)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																		_hx_tmp70 = ((((((blended30 >> 24) & 255) << 24) | ((blended30 & 255) << 16)) | (((blended30 >> 8) & 255) << 8)) | ((blended30 >> 16) & 255));
            																	}
            																	else {
HXLINE(  33)																		_hx_tmp70 = blended30;
            																	}
HXDLIN(  33)																	::iterMagic::Iimg_obj::set(undoImage3->image,location30,_hx_tmp70);
            																}
            															}
            															else {
HXLINE(  33)																::Dynamic this319 = undoImage3->image;
HXDLIN(  33)																int index11;
HXDLIN(  33)																if (undoImage3->useVirtualPos) {
HXLINE(  33)																	index11 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x23) - undoImage3->virtualX));
            																}
            																else {
HXLINE(  33)																	index11 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage3->width) + x23)) ));
            																}
HXDLIN(  33)																int _hx_tmp71;
HXDLIN(  33)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																	_hx_tmp71 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            																}
            																else {
HXLINE(  33)																	_hx_tmp71 = c10;
            																}
HXDLIN(  33)																::iterMagic::Iimg_obj::set(this319,index11,_hx_tmp71);
            															}
            														}
            														else {
HXLINE(  33)															if (forceClear1) {
HXLINE(  33)																::Dynamic this320 = undoImage3->image;
HXDLIN(  33)																int x24 = (dx4 - rectLeft1);
HXDLIN(  33)																int y20 = (dy4 - rectTop1);
HXDLIN(  33)																int index12;
HXDLIN(  33)																if (undoImage3->useVirtualPos) {
HXLINE(  33)																	index12 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x24) - undoImage3->virtualX));
            																}
            																else {
HXLINE(  33)																	index12 = ::Std_obj::_hx_int(( (Float)(((y20 * undoImage3->width) + x24)) ));
            																}
HXDLIN(  33)																::iterMagic::Iimg_obj::set(this320,index12,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN(  33)								bool found1 = false;
HXDLIN(  33)								Float s1 = ((Float)0.);
HXDLIN(  33)								Float t1 = ((Float)0.);
HXDLIN(  33)								Float sxx1 = ((Float)0.);
HXDLIN(  33)								Float txx1 = ((Float)0.);
HXDLIN(  33)								{
HXLINE(  33)									int _g_min2 = xIter31->start;
HXDLIN(  33)									int _g_max2 = xIter31->max;
HXDLIN(  33)									while((_g_min2 < _g_max2)){
HXLINE(  33)										_g_min2 = (_g_min2 + 1);
HXDLIN(  33)										int x25 = (_g_min2 - 1);
HXLINE(  60)										sxx1 = (sx1 * ( (Float)(x25) ));
HXLINE(  61)										txx1 = (tx1 * ( (Float)(x25) ));
HXLINE(  62)										found1 = false;
HXLINE(  33)										{
HXLINE(  33)											int _g_min3 = yIter31->start;
HXDLIN(  33)											int _g_max3 = yIter31->max;
HXDLIN(  33)											while((_g_min3 < _g_max3)){
HXLINE(  33)												_g_min3 = (_g_min3 + 1);
HXDLIN(  33)												int y21 = (_g_min3 - 1);
HXLINE(  64)												s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y21) )));
HXLINE(  65)												t1 = ((t01 + txx1) + (ty1 * ( (Float)(y21) )));
HXLINE(  33)												bool _hx_tmp72;
HXDLIN(  33)												if (!((s1 <= 0))) {
HXLINE(  33)													_hx_tmp72 = (t1 <= 0);
            												}
            												else {
HXLINE(  33)													_hx_tmp72 = true;
            												}
HXDLIN(  33)												if (_hx_tmp72) {
HXLINE(  33)													if (found1) {
HXLINE(  33)														goto _hx_goto_33;
            													}
            												}
            												else {
HXLINE(  33)													if (((s1 + t1) < A1)) {
HXLINE(  33)														{
HXLINE(  33)															int c11 = color2;
HXDLIN(  33)															bool _hx_tmp73;
HXDLIN(  33)															if ((((c11 >> 24) & 255) < 254)) {
HXLINE(  33)																_hx_tmp73 = this217->transparent;
            															}
            															else {
HXLINE(  33)																_hx_tmp73 = false;
            															}
HXDLIN(  33)															if (_hx_tmp73) {
HXLINE(  33)																int location31;
HXDLIN(  33)																if (this217->useVirtualPos) {
HXLINE(  33)																	location31 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - this217->virtualY) * ( (Float)(this217->width) )) + x25) - this217->virtualX));
            																}
            																else {
HXLINE(  33)																	location31 = ::Std_obj::_hx_int(( (Float)(((y21 * this217->width) + x25)) ));
            																}
HXDLIN(  33)																int this321 = ::iterMagic::Iimg_obj::get(this217->image,location31);
HXDLIN(  33)																int this322;
HXDLIN(  33)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																	this322 = ((((((this321 >> 24) & 255) << 24) | ((this321 & 255) << 16)) | (((this321 >> 8) & 255) << 8)) | ((this321 >> 16) & 255));
            																}
            																else {
HXLINE(  33)																	this322 = this321;
            																}
HXDLIN(  33)																Float a132;
HXDLIN(  33)																int this323 = ((this322 >> 24) & 255);
HXDLIN(  33)																if ((this323 == 0)) {
HXLINE(  33)																	a132 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	a132 = (( (Float)(this323) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float r132;
HXDLIN(  33)																int this324 = ((this322 >> 16) & 255);
HXDLIN(  33)																if ((this324 == 0)) {
HXLINE(  33)																	r132 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	r132 = (( (Float)(this324) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float g132;
HXDLIN(  33)																int this325 = ((this322 >> 8) & 255);
HXDLIN(  33)																if ((this325 == 0)) {
HXLINE(  33)																	g132 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	g132 = (( (Float)(this325) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float b132;
HXDLIN(  33)																int this326 = (this322 & 255);
HXDLIN(  33)																if ((this326 == 0)) {
HXLINE(  33)																	b132 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	b132 = (( (Float)(this326) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float a231;
HXDLIN(  33)																int this327 = ((color2 >> 24) & 255);
HXDLIN(  33)																if ((this327 == 0)) {
HXLINE(  33)																	a231 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	a231 = (( (Float)(this327) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float r231;
HXDLIN(  33)																int this328 = ((color2 >> 16) & 255);
HXDLIN(  33)																if ((this328 == 0)) {
HXLINE(  33)																	r231 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	r231 = (( (Float)(this328) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float g231;
HXDLIN(  33)																int this329 = ((color2 >> 8) & 255);
HXDLIN(  33)																if ((this329 == 0)) {
HXLINE(  33)																	g231 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	g231 = (( (Float)(this329) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float b231;
HXDLIN(  33)																int this330 = (color2 & 255);
HXDLIN(  33)																if ((this330 == 0)) {
HXLINE(  33)																	b231 = ((Float)0.);
            																}
            																else {
HXLINE(  33)																	b231 = (( (Float)(this330) ) / ( (Float)(255) ));
            																}
HXDLIN(  33)																Float a331 = (a132 * (( (Float)(1) ) - a231));
HXDLIN(  33)																int r52 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r132 * a331) + (r231 * a231))));
HXDLIN(  33)																int g52 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g132 * a331) + (g231 * a231))));
HXDLIN(  33)																int b58 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b132 * a331) + (b231 * a231))));
HXDLIN(  33)																int a65 = ::Std_obj::_hx_int((( (Float)(255) ) * (a331 + a231)));
HXDLIN(  33)																int blended31 = ((((a65 << 24) | (r52 << 16)) | (g52 << 8)) | b58);
HXDLIN(  33)																{
HXLINE(  33)																	int _hx_tmp74;
HXDLIN(  33)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																		_hx_tmp74 = ((((((blended31 >> 24) & 255) << 24) | ((blended31 & 255) << 16)) | (((blended31 >> 8) & 255) << 8)) | ((blended31 >> 16) & 255));
            																	}
            																	else {
HXLINE(  33)																		_hx_tmp74 = blended31;
            																	}
HXDLIN(  33)																	::iterMagic::Iimg_obj::set(this217->image,location31,_hx_tmp74);
            																}
            															}
            															else {
HXLINE(  33)																::Dynamic this331 = this217->image;
HXDLIN(  33)																int index13;
HXDLIN(  33)																if (this217->useVirtualPos) {
HXLINE(  33)																	index13 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - this217->virtualY) * ( (Float)(this217->width) )) + x25) - this217->virtualX));
            																}
            																else {
HXLINE(  33)																	index13 = ::Std_obj::_hx_int(( (Float)(((y21 * this217->width) + x25)) ));
            																}
HXDLIN(  33)																int _hx_tmp75;
HXDLIN(  33)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)																	_hx_tmp75 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            																}
            																else {
HXLINE(  33)																	_hx_tmp75 = c11;
            																}
HXDLIN(  33)																::iterMagic::Iimg_obj::set(this331,index13,_hx_tmp75);
            															}
            														}
HXLINE(  73)														found1 = true;
            													}
            													else {
HXLINE(  33)														if (found1) {
HXLINE(  33)															goto _hx_goto_33;
            														}
            													}
            												}
            											}
            											_hx_goto_33:;
            										}
            									}
            								}
HXDLIN(  33)								if ((hasHit == true)) {
HXLINE(  33)									 ::pi_xy::algo::HitTri v9 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,bx2,by2,cx2,cy2,true);
HXDLIN(  33)									if (hasUndo1) {
HXLINE(  33)										v9->undoImage = undoImage3;
HXDLIN(  33)										v9->undoX = xIter31->start;
HXDLIN(  33)										v9->undoY = yIter31->start;
            									}
            								}
            							}
            						}
HXDLIN(  33)						if ((hasHit == true)) {
HXLINE(  33)							 ::pi_xy::algo::HitQuad v10 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx2,dy2,true);
            						}
            					}
            				}
            			}
            			else {
HXLINE(  36)				if (this->luxury) {
HXLINE(  37)					 ::pi_xy::ImageStruct this332 = pixelImage;
HXDLIN(  37)					int color3 = this->strokeColor;
HXDLIN(  37)					Float soft = this->edgeSoft;
HXDLIN(  37)					bool softAB = true;
HXDLIN(  37)					bool softBC = true;
HXDLIN(  37)					bool softCD = true;
HXDLIN(  37)					bool softDA = true;
HXDLIN(  37)					bool hasHit1 = true;
HXDLIN(  37)					Float o1 = (qy - py);
HXDLIN(  37)					Float a66 = (qx - px);
HXDLIN(  37)					Float h1 = ::Math_obj::pow(((o1 * o1) + (a66 * a66)),((Float)0.5));
HXDLIN(  37)					Float theta1 = ::Math_obj::atan2(o1,a66);
HXDLIN(  37)					{
HXLINE(  37)						 ::Dynamic debugCorners1 = false;
HXDLIN(  37)						if (::hx::IsNull( debugCorners1 )) {
HXLINE( 179)							debugCorners1 = false;
            						}
HXLINE(  37)						Float sin1 = ::Math_obj::sin(theta1);
HXDLIN(  37)						Float cos1 = ::Math_obj::cos(theta1);
HXDLIN(  37)						Float radius1 = (this->strokeWidth / ( (Float)(2) ));
HXDLIN(  37)						Float dx5 = ((Float)0.1);
HXDLIN(  37)						Float dy5 = radius1;
HXDLIN(  37)						Float cx3 = h1;
HXDLIN(  37)						Float cy3 = radius1;
HXDLIN(  37)						Float bx3 = h1;
HXDLIN(  37)						Float by3 = -(radius1);
HXDLIN(  37)						Float ax1 = ((Float)0.1);
HXDLIN(  37)						Float ay1 = -(radius1);
HXDLIN(  37)						Float temp3 = ((Float)0.);
HXLINE( 136)						temp3 = (px + ((ax1 * cos1) - (ay1 * sin1)));
HXLINE( 137)						ay1 = (py + ((ay1 * cos1) + (ax1 * sin1)));
HXLINE( 138)						ax1 = temp3;
HXLINE( 140)						temp3 = (px + ((bx3 * cos1) - (by3 * sin1)));
HXLINE( 141)						by3 = (py + ((by3 * cos1) + (bx3 * sin1)));
HXLINE( 142)						bx3 = temp3;
HXLINE( 144)						temp3 = (px + ((cx3 * cos1) - (cy3 * sin1)));
HXLINE( 145)						cy3 = (py + ((cy3 * cos1) + (cx3 * sin1)));
HXLINE( 146)						cx3 = temp3;
HXLINE( 148)						temp3 = (px + ((dx5 * cos1) - (dy5 * sin1)));
HXLINE( 149)						dy5 = (py + ((dy5 * cos1) + (dx5 * sin1)));
HXLINE( 150)						dx5 = temp3;
HXLINE(  37)						if (( (bool)(debugCorners1) )) {
HXLINE(  37)							{
HXLINE(  37)								 ::pi_xy::ImageStruct this333 = this332;
HXDLIN(  37)								{
HXLINE(  37)									int r_x4 = ::Std_obj::_hx_int((ax1 - ((Float)6.)));
HXDLIN(  37)									int r_y4 = ::Std_obj::_hx_int((ay1 - ((Float)6.)));
HXDLIN(  37)									int r_w4 = 12;
HXDLIN(  37)									int r_h4 = 12;
HXDLIN(  37)									int xmax4 = ((r_x4 + r_w4) + 1);
HXDLIN(  37)									int ymax4 = ((r_y4 + r_h4) + 1);
HXDLIN(  37)									int ii_min24 = r_x4;
HXDLIN(  37)									int ii_max24 = xmax4;
HXDLIN(  37)									int xRange__start4 = ii_min24;
HXDLIN(  37)									int xRange__max4 = ii_max24;
HXDLIN(  37)									int ii_min25 = r_y4;
HXDLIN(  37)									int ii_max25 = ymax4;
HXDLIN(  37)									int yRange__start4 = ii_min25;
HXDLIN(  37)									int yRange__max4 = ii_max25;
HXDLIN(  37)									int range_x4 = xRange__start4;
HXDLIN(  37)									int range_y4 = (yRange__start4 - 1);
HXDLIN(  37)									int range_xReset4 = range_x4;
HXDLIN(  37)									int range_yReset4 = range_y4;
HXDLIN(  37)									int range_xMax4 = (xRange__max4 - 2);
HXDLIN(  37)									int range_yMax4 = (yRange__max4 - 2);
HXDLIN(  37)									int _this_min4 = 0;
HXDLIN(  37)									int _this_max4 = ::Std_obj::_hx_int(( (Float)(((xRange__max4 - xRange__start4) * (yRange__max4 - yRange__start4))) ));
HXDLIN(  37)									while((_this_min4 < _this_max4)){
HXLINE(  37)										_this_min4 = (_this_min4 + 1);
HXDLIN(  37)										int i44 = (_this_min4 - 1);
HXDLIN(  37)										if ((range_y4 > range_yMax4)) {
HXLINE(  37)											range_y4 = range_yReset4;
HXDLIN(  37)											range_x4 = (range_x4 + 1);
            										}
HXDLIN(  37)										range_y4 = (range_y4 + 1);
HXDLIN(  37)										int i45 = i44;
HXDLIN(  37)										{
HXLINE(  37)											int x26 = range_x4;
HXDLIN(  37)											int y22 = range_y4;
HXDLIN(  37)											int c12 = -65536;
HXDLIN(  37)											bool _hx_tmp76;
HXDLIN(  37)											if ((((c12 >> 24) & 255) < 254)) {
HXLINE(  37)												_hx_tmp76 = this333->transparent;
            											}
            											else {
HXLINE(  37)												_hx_tmp76 = false;
            											}
HXDLIN(  37)											if (_hx_tmp76) {
HXLINE(  37)												int location32;
HXDLIN(  37)												if (this333->useVirtualPos) {
HXLINE(  37)													location32 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - this333->virtualY) * ( (Float)(this333->width) )) + x26) - this333->virtualX));
            												}
            												else {
HXLINE(  37)													location32 = ::Std_obj::_hx_int(( (Float)(((y22 * this333->width) + x26)) ));
            												}
HXDLIN(  37)												int this334 = ::iterMagic::Iimg_obj::get(this333->image,location32);
HXDLIN(  37)												int this335;
HXDLIN(  37)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)													this335 = ((((((this334 >> 24) & 255) << 24) | ((this334 & 255) << 16)) | (((this334 >> 8) & 255) << 8)) | ((this334 >> 16) & 255));
            												}
            												else {
HXLINE(  37)													this335 = this334;
            												}
HXDLIN(  37)												Float a133;
HXDLIN(  37)												int this336 = ((this335 >> 24) & 255);
HXDLIN(  37)												if ((this336 == 0)) {
HXLINE(  37)													a133 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													a133 = (( (Float)(this336) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float r133;
HXDLIN(  37)												int this337 = ((this335 >> 16) & 255);
HXDLIN(  37)												if ((this337 == 0)) {
HXLINE(  37)													r133 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													r133 = (( (Float)(this337) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float g133;
HXDLIN(  37)												int this338 = ((this335 >> 8) & 255);
HXDLIN(  37)												if ((this338 == 0)) {
HXLINE(  37)													g133 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													g133 = (( (Float)(this338) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float b133;
HXDLIN(  37)												int this339 = (this335 & 255);
HXDLIN(  37)												if ((this339 == 0)) {
HXLINE(  37)													b133 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													b133 = (( (Float)(this339) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float a232;
HXDLIN(  37)												int this340 = ((-65536 >> 24) & 255);
HXDLIN(  37)												if ((this340 == 0)) {
HXLINE(  37)													a232 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													a232 = (( (Float)(this340) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float r232;
HXDLIN(  37)												int this341 = ((-65536 >> 16) & 255);
HXDLIN(  37)												if ((this341 == 0)) {
HXLINE(  37)													r232 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													r232 = (( (Float)(this341) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float g232;
HXDLIN(  37)												int this342 = ((-65536 >> 8) & 255);
HXDLIN(  37)												if ((this342 == 0)) {
HXLINE(  37)													g232 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													g232 = (( (Float)(this342) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float b232;
HXDLIN(  37)												int this343 = (-65536 & 255);
HXDLIN(  37)												if ((this343 == 0)) {
HXLINE(  37)													b232 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													b232 = (( (Float)(this343) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float a332 = (a133 * (( (Float)(1) ) - a232));
HXDLIN(  37)												int r53 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r133 * a332) + (r232 * a232))));
HXDLIN(  37)												int g53 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g133 * a332) + (g232 * a232))));
HXDLIN(  37)												int b59 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b133 * a332) + (b232 * a232))));
HXDLIN(  37)												int a67 = ::Std_obj::_hx_int((( (Float)(255) ) * (a332 + a232)));
HXDLIN(  37)												int blended32 = ((((a67 << 24) | (r53 << 16)) | (g53 << 8)) | b59);
HXDLIN(  37)												{
HXLINE(  37)													int _hx_tmp77;
HXDLIN(  37)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)														_hx_tmp77 = ((((((blended32 >> 24) & 255) << 24) | ((blended32 & 255) << 16)) | (((blended32 >> 8) & 255) << 8)) | ((blended32 >> 16) & 255));
            													}
            													else {
HXLINE(  37)														_hx_tmp77 = blended32;
            													}
HXDLIN(  37)													::iterMagic::Iimg_obj::set(this333->image,location32,_hx_tmp77);
            												}
            											}
            											else {
HXLINE(  37)												::Dynamic this344 = this333->image;
HXDLIN(  37)												int index14;
HXDLIN(  37)												if (this333->useVirtualPos) {
HXLINE(  37)													index14 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - this333->virtualY) * ( (Float)(this333->width) )) + x26) - this333->virtualX));
            												}
            												else {
HXLINE(  37)													index14 = ::Std_obj::_hx_int(( (Float)(((y22 * this333->width) + x26)) ));
            												}
HXDLIN(  37)												int _hx_tmp78;
HXDLIN(  37)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)													_hx_tmp78 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            												}
            												else {
HXLINE(  37)													_hx_tmp78 = c12;
            												}
HXDLIN(  37)												::iterMagic::Iimg_obj::set(this344,index14,_hx_tmp78);
            											}
            										}
            									}
            								}
            							}
HXDLIN(  37)							{
HXLINE(  37)								 ::pi_xy::ImageStruct this345 = this332;
HXDLIN(  37)								{
HXLINE(  37)									int r_x5 = ::Std_obj::_hx_int((bx3 - ((Float)6.)));
HXDLIN(  37)									int r_y5 = ::Std_obj::_hx_int((by3 - ((Float)6.)));
HXDLIN(  37)									int r_w5 = 12;
HXDLIN(  37)									int r_h5 = 12;
HXDLIN(  37)									int xmax5 = ((r_x5 + r_w5) + 1);
HXDLIN(  37)									int ymax5 = ((r_y5 + r_h5) + 1);
HXDLIN(  37)									int ii_min26 = r_x5;
HXDLIN(  37)									int ii_max26 = xmax5;
HXDLIN(  37)									int xRange__start5 = ii_min26;
HXDLIN(  37)									int xRange__max5 = ii_max26;
HXDLIN(  37)									int ii_min27 = r_y5;
HXDLIN(  37)									int ii_max27 = ymax5;
HXDLIN(  37)									int yRange__start5 = ii_min27;
HXDLIN(  37)									int yRange__max5 = ii_max27;
HXDLIN(  37)									int range_x5 = xRange__start5;
HXDLIN(  37)									int range_y5 = (yRange__start5 - 1);
HXDLIN(  37)									int range_xReset5 = range_x5;
HXDLIN(  37)									int range_yReset5 = range_y5;
HXDLIN(  37)									int range_xMax5 = (xRange__max5 - 2);
HXDLIN(  37)									int range_yMax5 = (yRange__max5 - 2);
HXDLIN(  37)									int _this_min5 = 0;
HXDLIN(  37)									int _this_max5 = ::Std_obj::_hx_int(( (Float)(((xRange__max5 - xRange__start5) * (yRange__max5 - yRange__start5))) ));
HXDLIN(  37)									while((_this_min5 < _this_max5)){
HXLINE(  37)										_this_min5 = (_this_min5 + 1);
HXDLIN(  37)										int i46 = (_this_min5 - 1);
HXDLIN(  37)										if ((range_y5 > range_yMax5)) {
HXLINE(  37)											range_y5 = range_yReset5;
HXDLIN(  37)											range_x5 = (range_x5 + 1);
            										}
HXDLIN(  37)										range_y5 = (range_y5 + 1);
HXDLIN(  37)										int i47 = i46;
HXDLIN(  37)										{
HXLINE(  37)											int x27 = range_x5;
HXDLIN(  37)											int y23 = range_y5;
HXDLIN(  37)											int c13 = -16711936;
HXDLIN(  37)											bool _hx_tmp79;
HXDLIN(  37)											if ((((c13 >> 24) & 255) < 254)) {
HXLINE(  37)												_hx_tmp79 = this345->transparent;
            											}
            											else {
HXLINE(  37)												_hx_tmp79 = false;
            											}
HXDLIN(  37)											if (_hx_tmp79) {
HXLINE(  37)												int location33;
HXDLIN(  37)												if (this345->useVirtualPos) {
HXLINE(  37)													location33 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - this345->virtualY) * ( (Float)(this345->width) )) + x27) - this345->virtualX));
            												}
            												else {
HXLINE(  37)													location33 = ::Std_obj::_hx_int(( (Float)(((y23 * this345->width) + x27)) ));
            												}
HXDLIN(  37)												int this346 = ::iterMagic::Iimg_obj::get(this345->image,location33);
HXDLIN(  37)												int this347;
HXDLIN(  37)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)													this347 = ((((((this346 >> 24) & 255) << 24) | ((this346 & 255) << 16)) | (((this346 >> 8) & 255) << 8)) | ((this346 >> 16) & 255));
            												}
            												else {
HXLINE(  37)													this347 = this346;
            												}
HXDLIN(  37)												Float a134;
HXDLIN(  37)												int this348 = ((this347 >> 24) & 255);
HXDLIN(  37)												if ((this348 == 0)) {
HXLINE(  37)													a134 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													a134 = (( (Float)(this348) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float r134;
HXDLIN(  37)												int this349 = ((this347 >> 16) & 255);
HXDLIN(  37)												if ((this349 == 0)) {
HXLINE(  37)													r134 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													r134 = (( (Float)(this349) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float g134;
HXDLIN(  37)												int this350 = ((this347 >> 8) & 255);
HXDLIN(  37)												if ((this350 == 0)) {
HXLINE(  37)													g134 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													g134 = (( (Float)(this350) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float b134;
HXDLIN(  37)												int this351 = (this347 & 255);
HXDLIN(  37)												if ((this351 == 0)) {
HXLINE(  37)													b134 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													b134 = (( (Float)(this351) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float a233;
HXDLIN(  37)												int this352 = ((-16711936 >> 24) & 255);
HXDLIN(  37)												if ((this352 == 0)) {
HXLINE(  37)													a233 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													a233 = (( (Float)(this352) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float r233;
HXDLIN(  37)												int this353 = ((-16711936 >> 16) & 255);
HXDLIN(  37)												if ((this353 == 0)) {
HXLINE(  37)													r233 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													r233 = (( (Float)(this353) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float g233;
HXDLIN(  37)												int this354 = ((-16711936 >> 8) & 255);
HXDLIN(  37)												if ((this354 == 0)) {
HXLINE(  37)													g233 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													g233 = (( (Float)(this354) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float b233;
HXDLIN(  37)												int this355 = (-16711936 & 255);
HXDLIN(  37)												if ((this355 == 0)) {
HXLINE(  37)													b233 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													b233 = (( (Float)(this355) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float a333 = (a134 * (( (Float)(1) ) - a233));
HXDLIN(  37)												int r54 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r134 * a333) + (r233 * a233))));
HXDLIN(  37)												int g54 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g134 * a333) + (g233 * a233))));
HXDLIN(  37)												int b60 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b134 * a333) + (b233 * a233))));
HXDLIN(  37)												int a68 = ::Std_obj::_hx_int((( (Float)(255) ) * (a333 + a233)));
HXDLIN(  37)												int blended33 = ((((a68 << 24) | (r54 << 16)) | (g54 << 8)) | b60);
HXDLIN(  37)												{
HXLINE(  37)													int _hx_tmp80;
HXDLIN(  37)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)														_hx_tmp80 = ((((((blended33 >> 24) & 255) << 24) | ((blended33 & 255) << 16)) | (((blended33 >> 8) & 255) << 8)) | ((blended33 >> 16) & 255));
            													}
            													else {
HXLINE(  37)														_hx_tmp80 = blended33;
            													}
HXDLIN(  37)													::iterMagic::Iimg_obj::set(this345->image,location33,_hx_tmp80);
            												}
            											}
            											else {
HXLINE(  37)												::Dynamic this356 = this345->image;
HXDLIN(  37)												int index15;
HXDLIN(  37)												if (this345->useVirtualPos) {
HXLINE(  37)													index15 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - this345->virtualY) * ( (Float)(this345->width) )) + x27) - this345->virtualX));
            												}
            												else {
HXLINE(  37)													index15 = ::Std_obj::_hx_int(( (Float)(((y23 * this345->width) + x27)) ));
            												}
HXDLIN(  37)												int _hx_tmp81;
HXDLIN(  37)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)													_hx_tmp81 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            												}
            												else {
HXLINE(  37)													_hx_tmp81 = c13;
            												}
HXDLIN(  37)												::iterMagic::Iimg_obj::set(this356,index15,_hx_tmp81);
            											}
            										}
            									}
            								}
            							}
HXDLIN(  37)							{
HXLINE(  37)								 ::pi_xy::ImageStruct this357 = this332;
HXDLIN(  37)								{
HXLINE(  37)									int r_x6 = ::Std_obj::_hx_int((cx3 - ((Float)6.)));
HXDLIN(  37)									int r_y6 = ::Std_obj::_hx_int((cy3 - ((Float)6.)));
HXDLIN(  37)									int r_w6 = 12;
HXDLIN(  37)									int r_h6 = 12;
HXDLIN(  37)									int xmax6 = ((r_x6 + r_w6) + 1);
HXDLIN(  37)									int ymax6 = ((r_y6 + r_h6) + 1);
HXDLIN(  37)									int ii_min28 = r_x6;
HXDLIN(  37)									int ii_max28 = xmax6;
HXDLIN(  37)									int xRange__start6 = ii_min28;
HXDLIN(  37)									int xRange__max6 = ii_max28;
HXDLIN(  37)									int ii_min29 = r_y6;
HXDLIN(  37)									int ii_max29 = ymax6;
HXDLIN(  37)									int yRange__start6 = ii_min29;
HXDLIN(  37)									int yRange__max6 = ii_max29;
HXDLIN(  37)									int range_x6 = xRange__start6;
HXDLIN(  37)									int range_y6 = (yRange__start6 - 1);
HXDLIN(  37)									int range_xReset6 = range_x6;
HXDLIN(  37)									int range_yReset6 = range_y6;
HXDLIN(  37)									int range_xMax6 = (xRange__max6 - 2);
HXDLIN(  37)									int range_yMax6 = (yRange__max6 - 2);
HXDLIN(  37)									int _this_min6 = 0;
HXDLIN(  37)									int _this_max6 = ::Std_obj::_hx_int(( (Float)(((xRange__max6 - xRange__start6) * (yRange__max6 - yRange__start6))) ));
HXDLIN(  37)									while((_this_min6 < _this_max6)){
HXLINE(  37)										_this_min6 = (_this_min6 + 1);
HXDLIN(  37)										int i48 = (_this_min6 - 1);
HXDLIN(  37)										if ((range_y6 > range_yMax6)) {
HXLINE(  37)											range_y6 = range_yReset6;
HXDLIN(  37)											range_x6 = (range_x6 + 1);
            										}
HXDLIN(  37)										range_y6 = (range_y6 + 1);
HXDLIN(  37)										int i49 = i48;
HXDLIN(  37)										{
HXLINE(  37)											int x28 = range_x6;
HXDLIN(  37)											int y24 = range_y6;
HXDLIN(  37)											int c14 = -16776961;
HXDLIN(  37)											bool _hx_tmp82;
HXDLIN(  37)											if ((((c14 >> 24) & 255) < 254)) {
HXLINE(  37)												_hx_tmp82 = this357->transparent;
            											}
            											else {
HXLINE(  37)												_hx_tmp82 = false;
            											}
HXDLIN(  37)											if (_hx_tmp82) {
HXLINE(  37)												int location34;
HXDLIN(  37)												if (this357->useVirtualPos) {
HXLINE(  37)													location34 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - this357->virtualY) * ( (Float)(this357->width) )) + x28) - this357->virtualX));
            												}
            												else {
HXLINE(  37)													location34 = ::Std_obj::_hx_int(( (Float)(((y24 * this357->width) + x28)) ));
            												}
HXDLIN(  37)												int this358 = ::iterMagic::Iimg_obj::get(this357->image,location34);
HXDLIN(  37)												int this359;
HXDLIN(  37)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)													this359 = ((((((this358 >> 24) & 255) << 24) | ((this358 & 255) << 16)) | (((this358 >> 8) & 255) << 8)) | ((this358 >> 16) & 255));
            												}
            												else {
HXLINE(  37)													this359 = this358;
            												}
HXDLIN(  37)												Float a135;
HXDLIN(  37)												int this360 = ((this359 >> 24) & 255);
HXDLIN(  37)												if ((this360 == 0)) {
HXLINE(  37)													a135 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													a135 = (( (Float)(this360) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float r135;
HXDLIN(  37)												int this361 = ((this359 >> 16) & 255);
HXDLIN(  37)												if ((this361 == 0)) {
HXLINE(  37)													r135 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													r135 = (( (Float)(this361) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float g135;
HXDLIN(  37)												int this362 = ((this359 >> 8) & 255);
HXDLIN(  37)												if ((this362 == 0)) {
HXLINE(  37)													g135 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													g135 = (( (Float)(this362) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float b135;
HXDLIN(  37)												int this363 = (this359 & 255);
HXDLIN(  37)												if ((this363 == 0)) {
HXLINE(  37)													b135 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													b135 = (( (Float)(this363) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float a234;
HXDLIN(  37)												int this364 = ((-16776961 >> 24) & 255);
HXDLIN(  37)												if ((this364 == 0)) {
HXLINE(  37)													a234 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													a234 = (( (Float)(this364) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float r234;
HXDLIN(  37)												int this365 = ((-16776961 >> 16) & 255);
HXDLIN(  37)												if ((this365 == 0)) {
HXLINE(  37)													r234 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													r234 = (( (Float)(this365) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float g234;
HXDLIN(  37)												int this366 = ((-16776961 >> 8) & 255);
HXDLIN(  37)												if ((this366 == 0)) {
HXLINE(  37)													g234 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													g234 = (( (Float)(this366) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float b234;
HXDLIN(  37)												int this367 = (-16776961 & 255);
HXDLIN(  37)												if ((this367 == 0)) {
HXLINE(  37)													b234 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													b234 = (( (Float)(this367) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float a334 = (a135 * (( (Float)(1) ) - a234));
HXDLIN(  37)												int r55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r135 * a334) + (r234 * a234))));
HXDLIN(  37)												int g55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g135 * a334) + (g234 * a234))));
HXDLIN(  37)												int b61 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b135 * a334) + (b234 * a234))));
HXDLIN(  37)												int a69 = ::Std_obj::_hx_int((( (Float)(255) ) * (a334 + a234)));
HXDLIN(  37)												int blended34 = ((((a69 << 24) | (r55 << 16)) | (g55 << 8)) | b61);
HXDLIN(  37)												{
HXLINE(  37)													int _hx_tmp83;
HXDLIN(  37)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)														_hx_tmp83 = ((((((blended34 >> 24) & 255) << 24) | ((blended34 & 255) << 16)) | (((blended34 >> 8) & 255) << 8)) | ((blended34 >> 16) & 255));
            													}
            													else {
HXLINE(  37)														_hx_tmp83 = blended34;
            													}
HXDLIN(  37)													::iterMagic::Iimg_obj::set(this357->image,location34,_hx_tmp83);
            												}
            											}
            											else {
HXLINE(  37)												::Dynamic this368 = this357->image;
HXDLIN(  37)												int index16;
HXDLIN(  37)												if (this357->useVirtualPos) {
HXLINE(  37)													index16 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - this357->virtualY) * ( (Float)(this357->width) )) + x28) - this357->virtualX));
            												}
            												else {
HXLINE(  37)													index16 = ::Std_obj::_hx_int(( (Float)(((y24 * this357->width) + x28)) ));
            												}
HXDLIN(  37)												int _hx_tmp84;
HXDLIN(  37)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)													_hx_tmp84 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            												}
            												else {
HXLINE(  37)													_hx_tmp84 = c14;
            												}
HXDLIN(  37)												::iterMagic::Iimg_obj::set(this368,index16,_hx_tmp84);
            											}
            										}
            									}
            								}
            							}
HXDLIN(  37)							{
HXLINE(  37)								 ::pi_xy::ImageStruct this369 = this332;
HXDLIN(  37)								{
HXLINE(  37)									int r_x7 = ::Std_obj::_hx_int((dx5 - ((Float)6.)));
HXDLIN(  37)									int r_y7 = ::Std_obj::_hx_int((dy5 - ((Float)6.)));
HXDLIN(  37)									int r_w7 = 12;
HXDLIN(  37)									int r_h7 = 12;
HXDLIN(  37)									int xmax7 = ((r_x7 + r_w7) + 1);
HXDLIN(  37)									int ymax7 = ((r_y7 + r_h7) + 1);
HXDLIN(  37)									int ii_min30 = r_x7;
HXDLIN(  37)									int ii_max30 = xmax7;
HXDLIN(  37)									int xRange__start7 = ii_min30;
HXDLIN(  37)									int xRange__max7 = ii_max30;
HXDLIN(  37)									int ii_min31 = r_y7;
HXDLIN(  37)									int ii_max31 = ymax7;
HXDLIN(  37)									int yRange__start7 = ii_min31;
HXDLIN(  37)									int yRange__max7 = ii_max31;
HXDLIN(  37)									int range_x7 = xRange__start7;
HXDLIN(  37)									int range_y7 = (yRange__start7 - 1);
HXDLIN(  37)									int range_xReset7 = range_x7;
HXDLIN(  37)									int range_yReset7 = range_y7;
HXDLIN(  37)									int range_xMax7 = (xRange__max7 - 2);
HXDLIN(  37)									int range_yMax7 = (yRange__max7 - 2);
HXDLIN(  37)									int _this_min7 = 0;
HXDLIN(  37)									int _this_max7 = ::Std_obj::_hx_int(( (Float)(((xRange__max7 - xRange__start7) * (yRange__max7 - yRange__start7))) ));
HXDLIN(  37)									while((_this_min7 < _this_max7)){
HXLINE(  37)										_this_min7 = (_this_min7 + 1);
HXDLIN(  37)										int i50 = (_this_min7 - 1);
HXDLIN(  37)										if ((range_y7 > range_yMax7)) {
HXLINE(  37)											range_y7 = range_yReset7;
HXDLIN(  37)											range_x7 = (range_x7 + 1);
            										}
HXDLIN(  37)										range_y7 = (range_y7 + 1);
HXDLIN(  37)										int i51 = i50;
HXDLIN(  37)										{
HXLINE(  37)											int x29 = range_x7;
HXDLIN(  37)											int y25 = range_y7;
HXDLIN(  37)											int c15 = -1048336;
HXDLIN(  37)											bool _hx_tmp85;
HXDLIN(  37)											if ((((c15 >> 24) & 255) < 254)) {
HXLINE(  37)												_hx_tmp85 = this369->transparent;
            											}
            											else {
HXLINE(  37)												_hx_tmp85 = false;
            											}
HXDLIN(  37)											if (_hx_tmp85) {
HXLINE(  37)												int location35;
HXDLIN(  37)												if (this369->useVirtualPos) {
HXLINE(  37)													location35 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - this369->virtualY) * ( (Float)(this369->width) )) + x29) - this369->virtualX));
            												}
            												else {
HXLINE(  37)													location35 = ::Std_obj::_hx_int(( (Float)(((y25 * this369->width) + x29)) ));
            												}
HXDLIN(  37)												int this370 = ::iterMagic::Iimg_obj::get(this369->image,location35);
HXDLIN(  37)												int this371;
HXDLIN(  37)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)													this371 = ((((((this370 >> 24) & 255) << 24) | ((this370 & 255) << 16)) | (((this370 >> 8) & 255) << 8)) | ((this370 >> 16) & 255));
            												}
            												else {
HXLINE(  37)													this371 = this370;
            												}
HXDLIN(  37)												Float a136;
HXDLIN(  37)												int this372 = ((this371 >> 24) & 255);
HXDLIN(  37)												if ((this372 == 0)) {
HXLINE(  37)													a136 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													a136 = (( (Float)(this372) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float r136;
HXDLIN(  37)												int this373 = ((this371 >> 16) & 255);
HXDLIN(  37)												if ((this373 == 0)) {
HXLINE(  37)													r136 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													r136 = (( (Float)(this373) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float g136;
HXDLIN(  37)												int this374 = ((this371 >> 8) & 255);
HXDLIN(  37)												if ((this374 == 0)) {
HXLINE(  37)													g136 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													g136 = (( (Float)(this374) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float b136;
HXDLIN(  37)												int this375 = (this371 & 255);
HXDLIN(  37)												if ((this375 == 0)) {
HXLINE(  37)													b136 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													b136 = (( (Float)(this375) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float a235;
HXDLIN(  37)												int this376 = ((-1048336 >> 24) & 255);
HXDLIN(  37)												if ((this376 == 0)) {
HXLINE(  37)													a235 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													a235 = (( (Float)(this376) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float r235;
HXDLIN(  37)												int this377 = ((-1048336 >> 16) & 255);
HXDLIN(  37)												if ((this377 == 0)) {
HXLINE(  37)													r235 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													r235 = (( (Float)(this377) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float g235;
HXDLIN(  37)												int this378 = ((-1048336 >> 8) & 255);
HXDLIN(  37)												if ((this378 == 0)) {
HXLINE(  37)													g235 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													g235 = (( (Float)(this378) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float b235;
HXDLIN(  37)												int this379 = (-1048336 & 255);
HXDLIN(  37)												if ((this379 == 0)) {
HXLINE(  37)													b235 = ((Float)0.);
            												}
            												else {
HXLINE(  37)													b235 = (( (Float)(this379) ) / ( (Float)(255) ));
            												}
HXDLIN(  37)												Float a335 = (a136 * (( (Float)(1) ) - a235));
HXDLIN(  37)												int r56 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r136 * a335) + (r235 * a235))));
HXDLIN(  37)												int g56 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g136 * a335) + (g235 * a235))));
HXDLIN(  37)												int b62 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b136 * a335) + (b235 * a235))));
HXDLIN(  37)												int a70 = ::Std_obj::_hx_int((( (Float)(255) ) * (a335 + a235)));
HXDLIN(  37)												int blended35 = ((((a70 << 24) | (r56 << 16)) | (g56 << 8)) | b62);
HXDLIN(  37)												{
HXLINE(  37)													int _hx_tmp86;
HXDLIN(  37)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)														_hx_tmp86 = ((((((blended35 >> 24) & 255) << 24) | ((blended35 & 255) << 16)) | (((blended35 >> 8) & 255) << 8)) | ((blended35 >> 16) & 255));
            													}
            													else {
HXLINE(  37)														_hx_tmp86 = blended35;
            													}
HXDLIN(  37)													::iterMagic::Iimg_obj::set(this369->image,location35,_hx_tmp86);
            												}
            											}
            											else {
HXLINE(  37)												::Dynamic this380 = this369->image;
HXDLIN(  37)												int index17;
HXDLIN(  37)												if (this369->useVirtualPos) {
HXLINE(  37)													index17 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - this369->virtualY) * ( (Float)(this369->width) )) + x29) - this369->virtualX));
            												}
            												else {
HXLINE(  37)													index17 = ::Std_obj::_hx_int(( (Float)(((y25 * this369->width) + x29)) ));
            												}
HXDLIN(  37)												int _hx_tmp87;
HXDLIN(  37)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)													_hx_tmp87 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            												}
            												else {
HXLINE(  37)													_hx_tmp87 = c15;
            												}
HXDLIN(  37)												::iterMagic::Iimg_obj::set(this380,index17,_hx_tmp87);
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  37)						{
HXLINE(  37)							{
HXLINE(  37)								bool hasUndo2 = true;
HXDLIN(  37)								int aA = ((color3 >> 24) & 255);
HXDLIN(  37)								int rA = ((color3 >> 16) & 255);
HXDLIN(  37)								int gA = ((color3 >> 8) & 255);
HXDLIN(  37)								int bA = (color3 & 255);
HXDLIN(  37)								Float bcx = (bx3 - cx3);
HXDLIN(  37)								Float bcy = (by3 - cy3);
HXDLIN(  37)								Float acx = (ax1 - cx3);
HXDLIN(  37)								Float acy = (ay1 - cy3);
HXDLIN(  37)								Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  37)								Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  37)								Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  37)								Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  37)								 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  37)								if ((ax1 > bx3)) {
HXLINE(  37)									if ((ax1 > cx3)) {
HXLINE(  37)										int min8;
HXDLIN(  37)										if ((bx3 > cx3)) {
HXLINE(  37)											min8 = ::Math_obj::floor(cx3);
            										}
            										else {
HXLINE(  37)											min8 = ::Math_obj::floor(bx3);
            										}
HXDLIN(  37)										int ii_min32 = min8;
HXDLIN(  37)										int ii_max32 = ::Math_obj::ceil(ax1);
HXDLIN(  37)										xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            									}
            									else {
HXLINE(  37)										int ii_min33 = ::Math_obj::floor(bx3);
HXDLIN(  37)										int ii_max33 = ::Math_obj::ceil(cx3);
HXDLIN(  37)										xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            									}
            								}
            								else {
HXLINE(  37)									if ((bx3 > cx3)) {
HXLINE(  37)										int min9;
HXDLIN(  37)										if ((ax1 > cx3)) {
HXLINE(  37)											min9 = ::Math_obj::floor(cx3);
            										}
            										else {
HXLINE(  37)											min9 = ::Math_obj::ceil(ax1);
            										}
HXDLIN(  37)										int ii_min34 = min9;
HXDLIN(  37)										int ii_max34 = ::Math_obj::ceil(bx3);
HXDLIN(  37)										xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            									}
            									else {
HXLINE(  37)										int ii_min35 = ::Math_obj::floor(ax1);
HXDLIN(  37)										int ii_max35 = ::Math_obj::ceil(cx3);
HXDLIN(  37)										xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            									}
            								}
HXDLIN(  37)								 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  37)								if ((ay1 > by3)) {
HXLINE(  37)									if ((ay1 > cy3)) {
HXLINE(  37)										int min10;
HXDLIN(  37)										if ((by3 > cy3)) {
HXLINE(  37)											min10 = ::Math_obj::floor(cy3);
            										}
            										else {
HXLINE(  37)											min10 = ::Math_obj::floor(by3);
            										}
HXDLIN(  37)										int ii_min36 = min10;
HXDLIN(  37)										int ii_max36 = ::Math_obj::ceil(ay1);
HXDLIN(  37)										yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            									}
            									else {
HXLINE(  37)										int ii_min37 = ::Math_obj::floor(by3);
HXDLIN(  37)										int ii_max37 = ::Math_obj::ceil(cy3);
HXDLIN(  37)										yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            									}
            								}
            								else {
HXLINE(  37)									if ((by3 > cy3)) {
HXLINE(  37)										int min11;
HXDLIN(  37)										if ((ay1 > cy3)) {
HXLINE(  37)											min11 = ::Math_obj::floor(cy3);
            										}
            										else {
HXLINE(  37)											min11 = ::Math_obj::ceil(ay1);
            										}
HXDLIN(  37)										int ii_min38 = min11;
HXDLIN(  37)										int ii_max38 = ::Math_obj::ceil(by3);
HXDLIN(  37)										yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            									}
            									else {
HXLINE(  37)										int ii_min39 = ::Math_obj::floor(ay1);
HXDLIN(  37)										int ii_max39 = ::Math_obj::ceil(cy3);
HXDLIN(  37)										yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            									}
            								}
HXDLIN(  37)								 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  37)								if (hasUndo2) {
HXLINE(  37)									int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  37)									int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  37)									 ::Dynamic imageType2 = null();
HXDLIN(  37)									 ::pi_xy::ImageStruct this381 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  37)									if (::hx::IsNull( imageType2 )) {
HXLINE(  54)										imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            									}
HXLINE(  37)									::Dynamic undoImage7;
HXDLIN(  37)									switch((int)(( (int)(imageType2) ))){
            										case (int)0: {
HXLINE(  37)											 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::BytesImg b63 = byt2;
HXDLIN(  37)											{
HXLINE(  37)												b63->width = width2;
HXDLIN(  37)												b63->height = height2;
HXDLIN(  37)												b63->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  37)												b63->data = ::haxe::io::Bytes_obj::alloc((b63->length * 4));
HXDLIN(  37)												{
HXLINE(  37)													int len4 = b63->length;
HXDLIN(  37)													int w2 = 0;
HXDLIN(  37)													{
HXLINE(  37)														int _g48 = 0;
HXDLIN(  37)														int _g49 = b63->height;
HXDLIN(  37)														while((_g48 < _g49)){
HXLINE(  37)															_g48 = (_g48 + 1);
HXDLIN(  37)															int y26 = (_g48 - 1);
HXDLIN(  37)															{
HXLINE(  37)																int _g50 = 0;
HXDLIN(  37)																int _g51 = b63->width;
HXDLIN(  37)																while((_g50 < _g51)){
HXLINE(  37)																	_g50 = (_g50 + 1);
HXDLIN(  37)																	int x30 = (_g50 - 1);
HXDLIN(  37)																	{
HXLINE(  37)																		w2 = (w2 + 1);
HXDLIN(  37)																		b63->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  37)																	{
HXLINE(  37)																		w2 = (w2 + 1);
HXDLIN(  37)																		b63->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  37)																	{
HXLINE(  37)																		w2 = (w2 + 1);
HXDLIN(  37)																		b63->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  37)																	{
HXLINE(  37)																		w2 = (w2 + 1);
HXDLIN(  37)																		b63->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  37)											undoImage7 = b63;
            										}
            										break;
            										case (int)1: {
HXLINE(  37)											 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::ArrIntImg a71 = arrI2;
HXDLIN(  37)											{
HXLINE(  37)												a71->width = width2;
HXDLIN(  37)												a71->height = height2;
HXDLIN(  37)												a71->data = ::Array_obj< int >::__new(0);
HXDLIN(  37)												a71->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  37)												{
HXLINE(  37)													int _g52 = 0;
HXDLIN(  37)													int _g53 = a71->length;
HXDLIN(  37)													while((_g52 < _g53)){
HXLINE(  37)														_g52 = (_g52 + 1);
HXDLIN(  37)														int i52 = (_g52 - 1);
HXDLIN(  37)														a71->data[i52] = 0;
            													}
            												}
            											}
HXDLIN(  37)											undoImage7 = a71;
            										}
            										break;
            										case (int)2: {
HXLINE(  37)											 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::U32ArrImg b64 = u32a2;
HXDLIN(  37)											{
HXLINE(  37)												b64->width = width2;
HXDLIN(  37)												b64->height = height2;
HXDLIN(  37)												b64->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  37)												int size2 = (b64->length * 4);
HXDLIN(  37)												b64->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  37)												{
HXLINE(  37)													int _g54 = 0;
HXDLIN(  37)													int _g55 = b64->length;
HXDLIN(  37)													while((_g54 < _g55)){
HXLINE(  37)														_g54 = (_g54 + 1);
HXDLIN(  37)														int i53 = (_g54 - 1);
HXDLIN(  37)														{
HXLINE(  37)															 ::haxe::io::ArrayBufferViewImpl this382 = b64->data;
HXDLIN(  37)															bool undoImage8;
HXDLIN(  37)															if ((i53 >= 0)) {
HXLINE(  37)																undoImage8 = (i53 < (this382->byteLength >> 2));
            															}
            															else {
HXLINE(  37)																undoImage8 = false;
            															}
HXDLIN(  37)															if (undoImage8) {
HXLINE(  37)																 ::haxe::io::Bytes _this2 = this382->bytes;
HXDLIN(  37)																int pos2 = ((i53 << 2) + this382->byteOffset);
HXDLIN(  37)																_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  37)																_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  37)																_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  37)																_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
HXDLIN(  37)											undoImage7 = b64;
            										}
            										break;
            										case (int)3: {
HXLINE(  37)											 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::VecIntImg v11 = vec2;
HXDLIN(  37)											{
HXLINE(  37)												v11->width = width2;
HXDLIN(  37)												v11->height = height2;
HXDLIN(  37)												v11->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  37)												v11->data = ::Array_obj< int >::__new(v11->length);
HXDLIN(  37)												{
HXLINE(  37)													int _g56 = 0;
HXDLIN(  37)													int _g57 = v11->length;
HXDLIN(  37)													while((_g56 < _g57)){
HXLINE(  37)														_g56 = (_g56 + 1);
HXDLIN(  37)														int i54 = (_g56 - 1);
HXDLIN(  37)														v11->data->__unsafe_set(i54,0);
            													}
            												}
            											}
HXDLIN(  37)											undoImage7 = v11;
            										}
            										break;
            										case (int)4: {
HXLINE(  37)											 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::StackIntImg b65 = sInt2;
HXDLIN(  37)											{
HXLINE(  37)												b65->width = width2;
HXDLIN(  37)												b65->height = height2;
HXDLIN(  37)												b65->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  37)												b65->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  37)												{
HXLINE(  37)													int len5 = b65->length;
HXDLIN(  37)													 ::haxe::ds::GenericStack_Int d2 = b65->data;
HXDLIN(  37)													if (::hx::IsNull( d2->head )) {
HXLINE(  37)														int _g58 = 0;
HXDLIN(  37)														int _g59 = len5;
HXDLIN(  37)														while((_g58 < _g59)){
HXLINE(  37)															_g58 = (_g58 + 1);
HXDLIN(  37)															int i55 = (_g58 - 1);
HXDLIN(  37)															d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            														}
            													}
            													else {
HXLINE(  37)														int _g60 = 0;
HXDLIN(  37)														int _g61 = len5;
HXDLIN(  37)														while((_g60 < _g61)){
HXLINE(  37)															_g60 = (_g60 + 1);
HXDLIN(  37)															int i56 = (_g60 - 1);
HXDLIN(  37)															{
HXLINE(  37)																 ::haxe::ds::GenericCell_Int l2 = b65->data->head;
HXDLIN(  37)																 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  37)																{
HXLINE(  37)																	int _g62 = 0;
HXDLIN(  37)																	int _g63 = i56;
HXDLIN(  37)																	while((_g62 < _g63)){
HXLINE(  37)																		_g62 = (_g62 + 1);
HXDLIN(  37)																		int i57 = (_g62 - 1);
HXLINE( 345)																		prev2 = l2;
HXLINE( 346)																		l2 = l2->next;
            																	}
            																}
HXLINE(  37)																if (::hx::IsNull( prev2 )) {
HXLINE(  37)																	b65->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  37)																	l2 = null();
            																}
            																else {
HXLINE(  37)																	prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  37)																	l2 = null();
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  37)											undoImage7 = b65;
            										}
            										break;
            									}
HXDLIN(  37)									this381->image = undoImage7;
HXDLIN(  37)									this381->width = width2;
HXDLIN(  37)									this381->height = height2;
HXDLIN(  37)									this381->imageType = ( (int)(imageType2) );
HXDLIN(  37)									undoImage6 = this381;
HXDLIN(  37)									{
HXLINE(  37)										int rectLeft2 = xIter32->start;
HXDLIN(  37)										int rectTop2 = yIter32->start;
HXDLIN(  37)										int rectRight2 = xIter32->max;
HXDLIN(  37)										bool forceClear2 = false;
HXDLIN(  37)										{
HXLINE(  37)											int _g64 = rectTop2;
HXDLIN(  37)											int _g65 = yIter32->max;
HXDLIN(  37)											while((_g64 < _g65)){
HXLINE(  37)												_g64 = (_g64 + 1);
HXDLIN(  37)												int dy6 = (_g64 - 1);
HXDLIN(  37)												{
HXLINE(  37)													int _g66 = rectLeft2;
HXDLIN(  37)													int _g67 = rectRight2;
HXDLIN(  37)													while((_g66 < _g67)){
HXLINE(  37)														_g66 = (_g66 + 1);
HXDLIN(  37)														int dx6 = (_g66 - 1);
HXDLIN(  37)														::Dynamic this383 = this332->image;
HXDLIN(  37)														int index18;
HXDLIN(  37)														if (this332->useVirtualPos) {
HXLINE(  37)															index18 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this332->virtualY) * ( (Float)(this332->width) )) + dx6) - this332->virtualX));
            														}
            														else {
HXLINE(  37)															index18 = ::Std_obj::_hx_int(( (Float)(((dy6 * this332->width) + dx6)) ));
            														}
HXDLIN(  37)														int c16 = ::iterMagic::Iimg_obj::get(this383,index18);
HXDLIN(  37)														int col2;
HXDLIN(  37)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)															col2 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            														}
            														else {
HXLINE(  37)															col2 = c16;
            														}
HXDLIN(  37)														bool _hx_tmp88;
HXDLIN(  37)														if (this332->useMask) {
HXLINE(  37)															_hx_tmp88 = ::hx::IsNotNull( this332->mask );
            														}
            														else {
HXLINE(  37)															_hx_tmp88 = false;
            														}
HXDLIN(  37)														if (_hx_tmp88) {
HXLINE(  37)															 ::pi_xy::ImageStruct this384 = this332->mask;
HXDLIN(  37)															::Dynamic this385 = this384->image;
HXDLIN(  37)															int index19;
HXDLIN(  37)															if (this384->useVirtualPos) {
HXLINE(  37)																index19 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this384->virtualY) * ( (Float)(this384->width) )) + dx6) - this384->virtualX));
            															}
            															else {
HXLINE(  37)																index19 = ::Std_obj::_hx_int(( (Float)(((dy6 * this384->width) + dx6)) ));
            															}
HXDLIN(  37)															int c17 = ::iterMagic::Iimg_obj::get(this385,index19);
HXDLIN(  37)															int v12;
HXDLIN(  37)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																v12 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            															}
            															else {
HXLINE(  37)																v12 = c17;
            															}
HXDLIN(  37)															int maskPixel2 = v12;
HXDLIN(  37)															int this386 = col2;
HXDLIN(  37)															if ((maskPixel2 == 0)) {
HXLINE(  37)																col2 = this386;
            															}
            															else {
HXLINE(  37)																Float m02;
HXDLIN(  37)																int this387 = ((maskPixel2 >> 24) & 255);
HXDLIN(  37)																if ((this387 == 0)) {
HXLINE(  37)																	m02 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m02 = (( (Float)(this387) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float m12;
HXDLIN(  37)																int this388 = ((maskPixel2 >> 16) & 255);
HXDLIN(  37)																if ((this388 == 0)) {
HXLINE(  37)																	m12 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m12 = (( (Float)(this388) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float m22;
HXDLIN(  37)																int this389 = ((maskPixel2 >> 8) & 255);
HXDLIN(  37)																if ((this389 == 0)) {
HXLINE(  37)																	m22 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m22 = (( (Float)(this389) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float m32;
HXDLIN(  37)																int this390 = (maskPixel2 & 255);
HXDLIN(  37)																if ((this390 == 0)) {
HXLINE(  37)																	m32 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m32 = (( (Float)(this390) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this386 >> 24) & 255)) )));
HXDLIN(  37)																int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this386 >> 16) & 255)) )));
HXDLIN(  37)																int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this386 >> 8) & 255)) )));
HXDLIN(  37)																int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this386 & 255)) )));
HXDLIN(  37)																col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN(  37)														if ((col2 != 0)) {
HXLINE(  37)															int x31 = (dx6 - rectLeft2);
HXDLIN(  37)															int y27 = (dy6 - rectTop2);
HXDLIN(  37)															int c18 = col2;
HXDLIN(  37)															bool _hx_tmp89;
HXDLIN(  37)															if ((((c18 >> 24) & 255) < 254)) {
HXLINE(  37)																_hx_tmp89 = undoImage6->transparent;
            															}
            															else {
HXLINE(  37)																_hx_tmp89 = false;
            															}
HXDLIN(  37)															if (_hx_tmp89) {
HXLINE(  37)																int location36;
HXDLIN(  37)																if (undoImage6->useVirtualPos) {
HXLINE(  37)																	location36 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x31) - undoImage6->virtualX));
            																}
            																else {
HXLINE(  37)																	location36 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage6->width) + x31)) ));
            																}
HXDLIN(  37)																int this391 = ::iterMagic::Iimg_obj::get(undoImage6->image,location36);
HXDLIN(  37)																int this392;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	this392 = ((((((this391 >> 24) & 255) << 24) | ((this391 & 255) << 16)) | (((this391 >> 8) & 255) << 8)) | ((this391 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	this392 = this391;
            																}
HXDLIN(  37)																Float a137;
HXDLIN(  37)																int this393 = ((this392 >> 24) & 255);
HXDLIN(  37)																if ((this393 == 0)) {
HXLINE(  37)																	a137 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a137 = (( (Float)(this393) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r137;
HXDLIN(  37)																int this394 = ((this392 >> 16) & 255);
HXDLIN(  37)																if ((this394 == 0)) {
HXLINE(  37)																	r137 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r137 = (( (Float)(this394) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g137;
HXDLIN(  37)																int this395 = ((this392 >> 8) & 255);
HXDLIN(  37)																if ((this395 == 0)) {
HXLINE(  37)																	g137 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g137 = (( (Float)(this395) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b137;
HXDLIN(  37)																int this396 = (this392 & 255);
HXDLIN(  37)																if ((this396 == 0)) {
HXLINE(  37)																	b137 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b137 = (( (Float)(this396) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a236;
HXDLIN(  37)																int this397 = ((col2 >> 24) & 255);
HXDLIN(  37)																if ((this397 == 0)) {
HXLINE(  37)																	a236 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a236 = (( (Float)(this397) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r236;
HXDLIN(  37)																int this398 = ((col2 >> 16) & 255);
HXDLIN(  37)																if ((this398 == 0)) {
HXLINE(  37)																	r236 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r236 = (( (Float)(this398) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g236;
HXDLIN(  37)																int this399 = ((col2 >> 8) & 255);
HXDLIN(  37)																if ((this399 == 0)) {
HXLINE(  37)																	g236 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g236 = (( (Float)(this399) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b236;
HXDLIN(  37)																int this400 = (col2 & 255);
HXDLIN(  37)																if ((this400 == 0)) {
HXLINE(  37)																	b236 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b236 = (( (Float)(this400) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a336 = (a137 * (( (Float)(1) ) - a236));
HXDLIN(  37)																int r57 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r137 * a336) + (r236 * a236))));
HXDLIN(  37)																int g57 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g137 * a336) + (g236 * a236))));
HXDLIN(  37)																int b66 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b137 * a336) + (b236 * a236))));
HXDLIN(  37)																int a72 = ::Std_obj::_hx_int((( (Float)(255) ) * (a336 + a236)));
HXDLIN(  37)																int blended36 = ((((a72 << 24) | (r57 << 16)) | (g57 << 8)) | b66);
HXDLIN(  37)																{
HXLINE(  37)																	int _hx_tmp90;
HXDLIN(  37)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																		_hx_tmp90 = ((((((blended36 >> 24) & 255) << 24) | ((blended36 & 255) << 16)) | (((blended36 >> 8) & 255) << 8)) | ((blended36 >> 16) & 255));
            																	}
            																	else {
HXLINE(  37)																		_hx_tmp90 = blended36;
            																	}
HXDLIN(  37)																	::iterMagic::Iimg_obj::set(undoImage6->image,location36,_hx_tmp90);
            																}
            															}
            															else {
HXLINE(  37)																::Dynamic this401 = undoImage6->image;
HXDLIN(  37)																int index20;
HXDLIN(  37)																if (undoImage6->useVirtualPos) {
HXLINE(  37)																	index20 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x31) - undoImage6->virtualX));
            																}
            																else {
HXLINE(  37)																	index20 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage6->width) + x31)) ));
            																}
HXDLIN(  37)																int _hx_tmp91;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	_hx_tmp91 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	_hx_tmp91 = c18;
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this401,index20,_hx_tmp91);
            															}
            														}
            														else {
HXLINE(  37)															if (forceClear2) {
HXLINE(  37)																::Dynamic this402 = undoImage6->image;
HXDLIN(  37)																int x32 = (dx6 - rectLeft2);
HXDLIN(  37)																int y28 = (dy6 - rectTop2);
HXDLIN(  37)																int index21;
HXDLIN(  37)																if (undoImage6->useVirtualPos) {
HXLINE(  37)																	index21 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x32) - undoImage6->virtualX));
            																}
            																else {
HXLINE(  37)																	index21 = ::Std_obj::_hx_int(( (Float)(((y28 * undoImage6->width) + x32)) ));
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this402,index21,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN(  37)								bool found2 = false;
HXDLIN(  37)								Float min12 = ( (Float)(0) );
HXDLIN(  37)								Float max = ( (Float)(0) );
HXDLIN(  37)								int a73 = 0;
HXDLIN(  37)								int r58 = 0;
HXDLIN(  37)								int g58 = 0;
HXDLIN(  37)								int b67 = 0;
HXDLIN(  37)								{
HXLINE(  37)									int _g_min4 = xIter32->start;
HXDLIN(  37)									int _g_max4 = xIter32->max;
HXDLIN(  37)									while((_g_min4 < _g_max4)){
HXLINE(  37)										_g_min4 = (_g_min4 + 1);
HXDLIN(  37)										int px1 = (_g_min4 - 1);
HXDLIN(  37)										Float pcx = (( (Float)(px1) ) - cx3);
HXLINE( 812)										found2 = false;
HXLINE(  37)										{
HXLINE(  37)											int _g_min5 = yIter32->start;
HXDLIN(  37)											int _g_max5 = yIter32->max;
HXDLIN(  37)											while((_g_min5 < _g_max5)){
HXLINE(  37)												_g_min5 = (_g_min5 + 1);
HXDLIN(  37)												int py1 = (_g_min5 - 1);
HXDLIN(  37)												Float pcy = (( (Float)(py1) ) - cy3);
HXDLIN(  37)												Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  37)												Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  37)												Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  37)												Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  37)												Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  37)												bool _hx_tmp92;
HXDLIN(  37)												bool _hx_tmp93;
HXDLIN(  37)												if ((ratioA >= 0)) {
HXLINE(  37)													_hx_tmp93 = (ratioB >= 0);
            												}
            												else {
HXLINE(  37)													_hx_tmp93 = false;
            												}
HXDLIN(  37)												if (_hx_tmp93) {
HXLINE(  37)													_hx_tmp92 = (ratioC >= 0);
            												}
            												else {
HXLINE(  37)													_hx_tmp92 = false;
            												}
HXDLIN(  37)												if (_hx_tmp92) {
HXLINE(  37)													int i58 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN(  37)													if ((i58 > 255)) {
HXLINE(  24)														i58 = 255;
            													}
HXLINE(  37)													if ((i58 < 0)) {
HXLINE(  25)														i58 = 0;
            													}
HXLINE( 821)													r58 = i58;
HXLINE(  37)													int i59 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN(  37)													if ((i59 > 255)) {
HXLINE(  24)														i59 = 255;
            													}
HXLINE(  37)													if ((i59 < 0)) {
HXLINE(  25)														i59 = 0;
            													}
HXLINE( 822)													g58 = i59;
HXLINE(  37)													int i60 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN(  37)													if ((i60 > 255)) {
HXLINE(  24)														i60 = 255;
            													}
HXLINE(  37)													if ((i60 < 0)) {
HXLINE(  25)														i60 = 0;
            													}
HXLINE( 823)													b67 = i60;
HXLINE(  37)													bool _hx_tmp94;
HXDLIN(  37)													bool _hx_tmp95;
HXDLIN(  37)													if ((softAB == true)) {
HXLINE(  37)														_hx_tmp95 = (softBC == false);
            													}
            													else {
HXLINE(  37)														_hx_tmp95 = false;
            													}
HXDLIN(  37)													if (_hx_tmp95) {
HXLINE(  37)														_hx_tmp94 = false;
            													}
            													else {
HXLINE(  37)														_hx_tmp94 = false;
            													}
HXDLIN(  37)													if (_hx_tmp94) {
HXLINE(  37)														if ((ratioA < ratioC)) {
HXLINE(  37)															min12 = ratioA;
            														}
            														else {
HXLINE(  37)															min12 = ratioC;
            														}
HXDLIN(  37)														if ((ratioA > ratioB)) {
HXLINE(  37)															max = ratioA;
            														}
            														else {
HXLINE(  37)															max = ratioB;
            														}
HXDLIN(  37)														if (!((max > ratioC))) {
HXLINE(  37)															max = ratioC;
            														}
HXLINE( 829)														max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE(  37)														if (!((min12 < max))) {
HXLINE(  37)															min12 = ((max + min12) / ( (Float)(2) ));
            														}
HXDLIN(  37)														int i61 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min12));
HXDLIN(  37)														if ((i61 > 255)) {
HXLINE(  24)															i61 = 255;
            														}
HXLINE(  37)														if ((i61 < 0)) {
HXLINE(  25)															i61 = 0;
            														}
HXLINE( 832)														a73 = i61;
HXLINE(  37)														{
HXLINE(  37)															int location37;
HXDLIN(  37)															if (this332->useVirtualPos) {
HXLINE(  37)																location37 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this332->virtualY) * ( (Float)(this332->width) )) + px1) - this332->virtualX));
            															}
            															else {
HXLINE(  37)																location37 = ::Std_obj::_hx_int(( (Float)(((py1 * this332->width) + px1)) ));
            															}
HXDLIN(  37)															bool _hx_tmp96;
HXDLIN(  37)															if (this332->transparent) {
HXLINE(  37)																_hx_tmp96 = (a73 < 254);
            															}
            															else {
HXLINE(  37)																_hx_tmp96 = false;
            															}
HXDLIN(  37)															if (_hx_tmp96) {
HXLINE(  37)																int this403 = ::iterMagic::Iimg_obj::get(this332->image,location37);
HXDLIN(  37)																int old24;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	old24 = ((((((this403 >> 24) & 255) << 24) | ((this403 & 255) << 16)) | (((this403 >> 8) & 255) << 8)) | ((this403 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	old24 = this403;
            																}
HXDLIN(  37)																int rhs24 = ((((a73 << 24) | (r58 << 16)) | (g58 << 8)) | b67);
HXDLIN(  37)																Float a138;
HXDLIN(  37)																int this404 = ((old24 >> 24) & 255);
HXDLIN(  37)																if ((this404 == 0)) {
HXLINE(  37)																	a138 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a138 = (( (Float)(this404) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r138;
HXDLIN(  37)																int this405 = ((old24 >> 16) & 255);
HXDLIN(  37)																if ((this405 == 0)) {
HXLINE(  37)																	r138 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r138 = (( (Float)(this405) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g138;
HXDLIN(  37)																int this406 = ((old24 >> 8) & 255);
HXDLIN(  37)																if ((this406 == 0)) {
HXLINE(  37)																	g138 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g138 = (( (Float)(this406) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b138;
HXDLIN(  37)																int this407 = (old24 & 255);
HXDLIN(  37)																if ((this407 == 0)) {
HXLINE(  37)																	b138 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b138 = (( (Float)(this407) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a237;
HXDLIN(  37)																int this408 = ((rhs24 >> 24) & 255);
HXDLIN(  37)																if ((this408 == 0)) {
HXLINE(  37)																	a237 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a237 = (( (Float)(this408) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r237;
HXDLIN(  37)																int this409 = ((rhs24 >> 16) & 255);
HXDLIN(  37)																if ((this409 == 0)) {
HXLINE(  37)																	r237 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r237 = (( (Float)(this409) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g237;
HXDLIN(  37)																int this410 = ((rhs24 >> 8) & 255);
HXDLIN(  37)																if ((this410 == 0)) {
HXLINE(  37)																	g237 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g237 = (( (Float)(this410) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b237;
HXDLIN(  37)																int this411 = (rhs24 & 255);
HXDLIN(  37)																if ((this411 == 0)) {
HXLINE(  37)																	b237 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b237 = (( (Float)(this411) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a337 = (a138 * (( (Float)(1) ) - a237));
HXDLIN(  37)																int r59 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r138 * a337) + (r237 * a237))));
HXDLIN(  37)																int g59 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g138 * a337) + (g237 * a237))));
HXDLIN(  37)																int b68 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b138 * a337) + (b237 * a237))));
HXDLIN(  37)																int a74 = ::Std_obj::_hx_int((( (Float)(255) ) * (a337 + a237)));
HXDLIN(  37)																int blended37 = ((((a74 << 24) | (r59 << 16)) | (g59 << 8)) | b68);
HXDLIN(  37)																{
HXLINE(  37)																	int _hx_tmp97;
HXDLIN(  37)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																		_hx_tmp97 = ((((((blended37 >> 24) & 255) << 24) | ((blended37 & 255) << 16)) | (((blended37 >> 8) & 255) << 8)) | ((blended37 >> 16) & 255));
            																	}
            																	else {
HXLINE(  37)																		_hx_tmp97 = blended37;
            																	}
HXDLIN(  37)																	::iterMagic::Iimg_obj::set(this332->image,location37,_hx_tmp97);
            																}
            															}
            															else {
HXLINE(  37)																int value24;
HXDLIN(  37)																if (this332->isLittle) {
HXLINE(  37)																	value24 = ((((a73 << 24) | (b67 << 16)) | (g58 << 8)) | r58);
            																}
            																else {
HXLINE(  37)																	value24 = ((((a73 << 24) | (r58 << 16)) | (g58 << 8)) | b67);
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this332->image,location37,value24);
            															}
            														}
            													}
HXDLIN(  37)													bool _hx_tmp98;
HXDLIN(  37)													if ((softAB == true)) {
HXLINE(  37)														_hx_tmp98 = (softBC == true);
            													}
            													else {
HXLINE(  37)														_hx_tmp98 = false;
            													}
HXDLIN(  37)													if (_hx_tmp98) {
HXLINE(  37)														if ((ratioB < ratioC)) {
HXLINE(  37)															min12 = ratioB;
            														}
            														else {
HXLINE(  37)															min12 = ratioC;
            														}
HXDLIN(  37)														if ((ratioA > ratioB)) {
HXLINE(  37)															max = ratioA;
            														}
            														else {
HXLINE(  37)															max = ratioB;
            														}
HXDLIN(  37)														if (!((max > ratioC))) {
HXLINE(  37)															max = ratioC;
            														}
HXLINE( 842)														max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE(  37)														if (!((min12 < max))) {
HXLINE(  37)															min12 = ((max + min12) / ( (Float)(2) ));
            														}
HXDLIN(  37)														int i62 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min12));
HXDLIN(  37)														if ((i62 > 255)) {
HXLINE(  24)															i62 = 255;
            														}
HXLINE(  37)														if ((i62 < 0)) {
HXLINE(  25)															i62 = 0;
            														}
HXLINE( 845)														a73 = i62;
HXLINE(  37)														{
HXLINE(  37)															int location38;
HXDLIN(  37)															if (this332->useVirtualPos) {
HXLINE(  37)																location38 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this332->virtualY) * ( (Float)(this332->width) )) + px1) - this332->virtualX));
            															}
            															else {
HXLINE(  37)																location38 = ::Std_obj::_hx_int(( (Float)(((py1 * this332->width) + px1)) ));
            															}
HXDLIN(  37)															bool _hx_tmp99;
HXDLIN(  37)															if (this332->transparent) {
HXLINE(  37)																_hx_tmp99 = (a73 < 254);
            															}
            															else {
HXLINE(  37)																_hx_tmp99 = false;
            															}
HXDLIN(  37)															if (_hx_tmp99) {
HXLINE(  37)																int this412 = ::iterMagic::Iimg_obj::get(this332->image,location38);
HXDLIN(  37)																int old25;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	old25 = ((((((this412 >> 24) & 255) << 24) | ((this412 & 255) << 16)) | (((this412 >> 8) & 255) << 8)) | ((this412 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	old25 = this412;
            																}
HXDLIN(  37)																int rhs25 = ((((a73 << 24) | (r58 << 16)) | (g58 << 8)) | b67);
HXDLIN(  37)																Float a139;
HXDLIN(  37)																int this413 = ((old25 >> 24) & 255);
HXDLIN(  37)																if ((this413 == 0)) {
HXLINE(  37)																	a139 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a139 = (( (Float)(this413) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r139;
HXDLIN(  37)																int this414 = ((old25 >> 16) & 255);
HXDLIN(  37)																if ((this414 == 0)) {
HXLINE(  37)																	r139 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r139 = (( (Float)(this414) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g139;
HXDLIN(  37)																int this415 = ((old25 >> 8) & 255);
HXDLIN(  37)																if ((this415 == 0)) {
HXLINE(  37)																	g139 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g139 = (( (Float)(this415) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b139;
HXDLIN(  37)																int this416 = (old25 & 255);
HXDLIN(  37)																if ((this416 == 0)) {
HXLINE(  37)																	b139 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b139 = (( (Float)(this416) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a238;
HXDLIN(  37)																int this417 = ((rhs25 >> 24) & 255);
HXDLIN(  37)																if ((this417 == 0)) {
HXLINE(  37)																	a238 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a238 = (( (Float)(this417) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r238;
HXDLIN(  37)																int this418 = ((rhs25 >> 16) & 255);
HXDLIN(  37)																if ((this418 == 0)) {
HXLINE(  37)																	r238 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r238 = (( (Float)(this418) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g238;
HXDLIN(  37)																int this419 = ((rhs25 >> 8) & 255);
HXDLIN(  37)																if ((this419 == 0)) {
HXLINE(  37)																	g238 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g238 = (( (Float)(this419) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b238;
HXDLIN(  37)																int this420 = (rhs25 & 255);
HXDLIN(  37)																if ((this420 == 0)) {
HXLINE(  37)																	b238 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b238 = (( (Float)(this420) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a338 = (a139 * (( (Float)(1) ) - a238));
HXDLIN(  37)																int r60 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r139 * a338) + (r238 * a238))));
HXDLIN(  37)																int g60 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g139 * a338) + (g238 * a238))));
HXDLIN(  37)																int b69 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b139 * a338) + (b238 * a238))));
HXDLIN(  37)																int a75 = ::Std_obj::_hx_int((( (Float)(255) ) * (a338 + a238)));
HXDLIN(  37)																int blended38 = ((((a75 << 24) | (r60 << 16)) | (g60 << 8)) | b69);
HXDLIN(  37)																{
HXLINE(  37)																	int _hx_tmp100;
HXDLIN(  37)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																		_hx_tmp100 = ((((((blended38 >> 24) & 255) << 24) | ((blended38 & 255) << 16)) | (((blended38 >> 8) & 255) << 8)) | ((blended38 >> 16) & 255));
            																	}
            																	else {
HXLINE(  37)																		_hx_tmp100 = blended38;
            																	}
HXDLIN(  37)																	::iterMagic::Iimg_obj::set(this332->image,location38,_hx_tmp100);
            																}
            															}
            															else {
HXLINE(  37)																int value25;
HXDLIN(  37)																if (this332->isLittle) {
HXLINE(  37)																	value25 = ((((a73 << 24) | (b67 << 16)) | (g58 << 8)) | r58);
            																}
            																else {
HXLINE(  37)																	value25 = ((((a73 << 24) | (r58 << 16)) | (g58 << 8)) | b67);
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this332->image,location38,value25);
            															}
            														}
            													}
HXLINE( 850)													found2 = true;
            												}
            												else {
HXLINE(  37)													if (found2) {
HXLINE(  37)														goto _hx_goto_49;
            													}
            												}
            											}
            											_hx_goto_49:;
            										}
            									}
            								}
HXDLIN(  37)								if ((hasHit1 == false)) {
HXLINE(  37)									 ::pi_xy::algo::HitTri v13 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx3,by3,cx3,cy3,true);
HXDLIN(  37)									if (hasUndo2) {
HXLINE(  37)										v13->undoImage = undoImage6;
HXDLIN(  37)										v13->undoX = xIter32->start;
HXDLIN(  37)										v13->undoY = yIter32->start;
            									}
            								}
            							}
HXDLIN(  37)							{
HXLINE(  37)								bool hasUndo3 = true;
HXDLIN(  37)								int aA1 = ((color3 >> 24) & 255);
HXDLIN(  37)								int rA1 = ((color3 >> 16) & 255);
HXDLIN(  37)								int gA1 = ((color3 >> 8) & 255);
HXDLIN(  37)								int bA1 = (color3 & 255);
HXDLIN(  37)								Float bcx1 = (cx3 - ax1);
HXDLIN(  37)								Float bcy1 = (cy3 - ay1);
HXDLIN(  37)								Float acx1 = (dx5 - ax1);
HXDLIN(  37)								Float acy1 = (dy5 - ay1);
HXDLIN(  37)								Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  37)								Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  37)								Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  37)								Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  37)								 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  37)								if ((dx5 > cx3)) {
HXLINE(  37)									if ((dx5 > ax1)) {
HXLINE(  37)										int min13;
HXDLIN(  37)										if ((cx3 > ax1)) {
HXLINE(  37)											min13 = ::Math_obj::floor(ax1);
            										}
            										else {
HXLINE(  37)											min13 = ::Math_obj::floor(cx3);
            										}
HXDLIN(  37)										int ii_min40 = min13;
HXDLIN(  37)										int ii_max40 = ::Math_obj::ceil(dx5);
HXDLIN(  37)										xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            									}
            									else {
HXLINE(  37)										int ii_min41 = ::Math_obj::floor(cx3);
HXDLIN(  37)										int ii_max41 = ::Math_obj::ceil(ax1);
HXDLIN(  37)										xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            									}
            								}
            								else {
HXLINE(  37)									if ((cx3 > ax1)) {
HXLINE(  37)										int min14;
HXDLIN(  37)										if ((dx5 > ax1)) {
HXLINE(  37)											min14 = ::Math_obj::floor(ax1);
            										}
            										else {
HXLINE(  37)											min14 = ::Math_obj::ceil(dx5);
            										}
HXDLIN(  37)										int ii_min42 = min14;
HXDLIN(  37)										int ii_max42 = ::Math_obj::ceil(cx3);
HXDLIN(  37)										xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            									}
            									else {
HXLINE(  37)										int ii_min43 = ::Math_obj::floor(dx5);
HXDLIN(  37)										int ii_max43 = ::Math_obj::ceil(ax1);
HXDLIN(  37)										xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            									}
            								}
HXDLIN(  37)								 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  37)								if ((dy5 > cy3)) {
HXLINE(  37)									if ((dy5 > ay1)) {
HXLINE(  37)										int min15;
HXDLIN(  37)										if ((cy3 > ay1)) {
HXLINE(  37)											min15 = ::Math_obj::floor(ay1);
            										}
            										else {
HXLINE(  37)											min15 = ::Math_obj::floor(cy3);
            										}
HXDLIN(  37)										int ii_min44 = min15;
HXDLIN(  37)										int ii_max44 = ::Math_obj::ceil(dy5);
HXDLIN(  37)										yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            									}
            									else {
HXLINE(  37)										int ii_min45 = ::Math_obj::floor(cy3);
HXDLIN(  37)										int ii_max45 = ::Math_obj::ceil(ay1);
HXDLIN(  37)										yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            									}
            								}
            								else {
HXLINE(  37)									if ((cy3 > ay1)) {
HXLINE(  37)										int min16;
HXDLIN(  37)										if ((dy5 > ay1)) {
HXLINE(  37)											min16 = ::Math_obj::floor(ay1);
            										}
            										else {
HXLINE(  37)											min16 = ::Math_obj::ceil(dy5);
            										}
HXDLIN(  37)										int ii_min46 = min16;
HXDLIN(  37)										int ii_max46 = ::Math_obj::ceil(cy3);
HXDLIN(  37)										yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            									}
            									else {
HXLINE(  37)										int ii_min47 = ::Math_obj::floor(dy5);
HXDLIN(  37)										int ii_max47 = ::Math_obj::ceil(ay1);
HXDLIN(  37)										yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            									}
            								}
HXDLIN(  37)								 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  37)								if (hasUndo3) {
HXLINE(  37)									int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  37)									int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  37)									 ::Dynamic imageType3 = null();
HXDLIN(  37)									 ::pi_xy::ImageStruct this421 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  37)									if (::hx::IsNull( imageType3 )) {
HXLINE(  54)										imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            									}
HXLINE(  37)									::Dynamic undoImage10;
HXDLIN(  37)									switch((int)(( (int)(imageType3) ))){
            										case (int)0: {
HXLINE(  37)											 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::BytesImg b70 = byt3;
HXDLIN(  37)											{
HXLINE(  37)												b70->width = width3;
HXDLIN(  37)												b70->height = height3;
HXDLIN(  37)												b70->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  37)												b70->data = ::haxe::io::Bytes_obj::alloc((b70->length * 4));
HXDLIN(  37)												{
HXLINE(  37)													int len6 = b70->length;
HXDLIN(  37)													int w3 = 0;
HXDLIN(  37)													{
HXLINE(  37)														int _g68 = 0;
HXDLIN(  37)														int _g69 = b70->height;
HXDLIN(  37)														while((_g68 < _g69)){
HXLINE(  37)															_g68 = (_g68 + 1);
HXDLIN(  37)															int y29 = (_g68 - 1);
HXDLIN(  37)															{
HXLINE(  37)																int _g70 = 0;
HXDLIN(  37)																int _g71 = b70->width;
HXDLIN(  37)																while((_g70 < _g71)){
HXLINE(  37)																	_g70 = (_g70 + 1);
HXDLIN(  37)																	int x33 = (_g70 - 1);
HXDLIN(  37)																	{
HXLINE(  37)																		w3 = (w3 + 1);
HXDLIN(  37)																		b70->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  37)																	{
HXLINE(  37)																		w3 = (w3 + 1);
HXDLIN(  37)																		b70->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  37)																	{
HXLINE(  37)																		w3 = (w3 + 1);
HXDLIN(  37)																		b70->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  37)																	{
HXLINE(  37)																		w3 = (w3 + 1);
HXDLIN(  37)																		b70->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  37)											undoImage10 = b70;
            										}
            										break;
            										case (int)1: {
HXLINE(  37)											 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::ArrIntImg a76 = arrI3;
HXDLIN(  37)											{
HXLINE(  37)												a76->width = width3;
HXDLIN(  37)												a76->height = height3;
HXDLIN(  37)												a76->data = ::Array_obj< int >::__new(0);
HXDLIN(  37)												a76->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  37)												{
HXLINE(  37)													int _g72 = 0;
HXDLIN(  37)													int _g73 = a76->length;
HXDLIN(  37)													while((_g72 < _g73)){
HXLINE(  37)														_g72 = (_g72 + 1);
HXDLIN(  37)														int i63 = (_g72 - 1);
HXDLIN(  37)														a76->data[i63] = 0;
            													}
            												}
            											}
HXDLIN(  37)											undoImage10 = a76;
            										}
            										break;
            										case (int)2: {
HXLINE(  37)											 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::U32ArrImg b71 = u32a3;
HXDLIN(  37)											{
HXLINE(  37)												b71->width = width3;
HXDLIN(  37)												b71->height = height3;
HXDLIN(  37)												b71->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  37)												int size3 = (b71->length * 4);
HXDLIN(  37)												b71->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  37)												{
HXLINE(  37)													int _g74 = 0;
HXDLIN(  37)													int _g75 = b71->length;
HXDLIN(  37)													while((_g74 < _g75)){
HXLINE(  37)														_g74 = (_g74 + 1);
HXDLIN(  37)														int i64 = (_g74 - 1);
HXDLIN(  37)														{
HXLINE(  37)															 ::haxe::io::ArrayBufferViewImpl this422 = b71->data;
HXDLIN(  37)															bool undoImage11;
HXDLIN(  37)															if ((i64 >= 0)) {
HXLINE(  37)																undoImage11 = (i64 < (this422->byteLength >> 2));
            															}
            															else {
HXLINE(  37)																undoImage11 = false;
            															}
HXDLIN(  37)															if (undoImage11) {
HXLINE(  37)																 ::haxe::io::Bytes _this3 = this422->bytes;
HXDLIN(  37)																int pos3 = ((i64 << 2) + this422->byteOffset);
HXDLIN(  37)																_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  37)																_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  37)																_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  37)																_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
HXDLIN(  37)											undoImage10 = b71;
            										}
            										break;
            										case (int)3: {
HXLINE(  37)											 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::VecIntImg v14 = vec3;
HXDLIN(  37)											{
HXLINE(  37)												v14->width = width3;
HXDLIN(  37)												v14->height = height3;
HXDLIN(  37)												v14->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  37)												v14->data = ::Array_obj< int >::__new(v14->length);
HXDLIN(  37)												{
HXLINE(  37)													int _g76 = 0;
HXDLIN(  37)													int _g77 = v14->length;
HXDLIN(  37)													while((_g76 < _g77)){
HXLINE(  37)														_g76 = (_g76 + 1);
HXDLIN(  37)														int i65 = (_g76 - 1);
HXDLIN(  37)														v14->data->__unsafe_set(i65,0);
            													}
            												}
            											}
HXDLIN(  37)											undoImage10 = v14;
            										}
            										break;
            										case (int)4: {
HXLINE(  37)											 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::StackIntImg b72 = sInt3;
HXDLIN(  37)											{
HXLINE(  37)												b72->width = width3;
HXDLIN(  37)												b72->height = height3;
HXDLIN(  37)												b72->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  37)												b72->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  37)												{
HXLINE(  37)													int len7 = b72->length;
HXDLIN(  37)													 ::haxe::ds::GenericStack_Int d3 = b72->data;
HXDLIN(  37)													if (::hx::IsNull( d3->head )) {
HXLINE(  37)														int _g78 = 0;
HXDLIN(  37)														int _g79 = len7;
HXDLIN(  37)														while((_g78 < _g79)){
HXLINE(  37)															_g78 = (_g78 + 1);
HXDLIN(  37)															int i66 = (_g78 - 1);
HXDLIN(  37)															d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            														}
            													}
            													else {
HXLINE(  37)														int _g80 = 0;
HXDLIN(  37)														int _g81 = len7;
HXDLIN(  37)														while((_g80 < _g81)){
HXLINE(  37)															_g80 = (_g80 + 1);
HXDLIN(  37)															int i67 = (_g80 - 1);
HXDLIN(  37)															{
HXLINE(  37)																 ::haxe::ds::GenericCell_Int l3 = b72->data->head;
HXDLIN(  37)																 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  37)																{
HXLINE(  37)																	int _g82 = 0;
HXDLIN(  37)																	int _g83 = i67;
HXDLIN(  37)																	while((_g82 < _g83)){
HXLINE(  37)																		_g82 = (_g82 + 1);
HXDLIN(  37)																		int i68 = (_g82 - 1);
HXLINE( 345)																		prev3 = l3;
HXLINE( 346)																		l3 = l3->next;
            																	}
            																}
HXLINE(  37)																if (::hx::IsNull( prev3 )) {
HXLINE(  37)																	b72->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  37)																	l3 = null();
            																}
            																else {
HXLINE(  37)																	prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  37)																	l3 = null();
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  37)											undoImage10 = b72;
            										}
            										break;
            									}
HXDLIN(  37)									this421->image = undoImage10;
HXDLIN(  37)									this421->width = width3;
HXDLIN(  37)									this421->height = height3;
HXDLIN(  37)									this421->imageType = ( (int)(imageType3) );
HXDLIN(  37)									undoImage9 = this421;
HXDLIN(  37)									{
HXLINE(  37)										int rectLeft3 = xIter33->start;
HXDLIN(  37)										int rectTop3 = yIter33->start;
HXDLIN(  37)										int rectRight3 = xIter33->max;
HXDLIN(  37)										bool forceClear3 = false;
HXDLIN(  37)										{
HXLINE(  37)											int _g84 = rectTop3;
HXDLIN(  37)											int _g85 = yIter33->max;
HXDLIN(  37)											while((_g84 < _g85)){
HXLINE(  37)												_g84 = (_g84 + 1);
HXDLIN(  37)												int dy7 = (_g84 - 1);
HXDLIN(  37)												{
HXLINE(  37)													int _g86 = rectLeft3;
HXDLIN(  37)													int _g87 = rectRight3;
HXDLIN(  37)													while((_g86 < _g87)){
HXLINE(  37)														_g86 = (_g86 + 1);
HXDLIN(  37)														int dx7 = (_g86 - 1);
HXDLIN(  37)														::Dynamic this423 = this332->image;
HXDLIN(  37)														int index22;
HXDLIN(  37)														if (this332->useVirtualPos) {
HXLINE(  37)															index22 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this332->virtualY) * ( (Float)(this332->width) )) + dx7) - this332->virtualX));
            														}
            														else {
HXLINE(  37)															index22 = ::Std_obj::_hx_int(( (Float)(((dy7 * this332->width) + dx7)) ));
            														}
HXDLIN(  37)														int c19 = ::iterMagic::Iimg_obj::get(this423,index22);
HXDLIN(  37)														int col3;
HXDLIN(  37)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)															col3 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            														}
            														else {
HXLINE(  37)															col3 = c19;
            														}
HXDLIN(  37)														bool _hx_tmp101;
HXDLIN(  37)														if (this332->useMask) {
HXLINE(  37)															_hx_tmp101 = ::hx::IsNotNull( this332->mask );
            														}
            														else {
HXLINE(  37)															_hx_tmp101 = false;
            														}
HXDLIN(  37)														if (_hx_tmp101) {
HXLINE(  37)															 ::pi_xy::ImageStruct this424 = this332->mask;
HXDLIN(  37)															::Dynamic this425 = this424->image;
HXDLIN(  37)															int index23;
HXDLIN(  37)															if (this424->useVirtualPos) {
HXLINE(  37)																index23 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this424->virtualY) * ( (Float)(this424->width) )) + dx7) - this424->virtualX));
            															}
            															else {
HXLINE(  37)																index23 = ::Std_obj::_hx_int(( (Float)(((dy7 * this424->width) + dx7)) ));
            															}
HXDLIN(  37)															int c20 = ::iterMagic::Iimg_obj::get(this425,index23);
HXDLIN(  37)															int v15;
HXDLIN(  37)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																v15 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            															}
            															else {
HXLINE(  37)																v15 = c20;
            															}
HXDLIN(  37)															int maskPixel3 = v15;
HXDLIN(  37)															int this426 = col3;
HXDLIN(  37)															if ((maskPixel3 == 0)) {
HXLINE(  37)																col3 = this426;
            															}
            															else {
HXLINE(  37)																Float m03;
HXDLIN(  37)																int this427 = ((maskPixel3 >> 24) & 255);
HXDLIN(  37)																if ((this427 == 0)) {
HXLINE(  37)																	m03 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m03 = (( (Float)(this427) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float m13;
HXDLIN(  37)																int this428 = ((maskPixel3 >> 16) & 255);
HXDLIN(  37)																if ((this428 == 0)) {
HXLINE(  37)																	m13 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m13 = (( (Float)(this428) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float m23;
HXDLIN(  37)																int this429 = ((maskPixel3 >> 8) & 255);
HXDLIN(  37)																if ((this429 == 0)) {
HXLINE(  37)																	m23 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m23 = (( (Float)(this429) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float m33;
HXDLIN(  37)																int this430 = (maskPixel3 & 255);
HXDLIN(  37)																if ((this430 == 0)) {
HXLINE(  37)																	m33 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m33 = (( (Float)(this430) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this426 >> 24) & 255)) )));
HXDLIN(  37)																int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this426 >> 16) & 255)) )));
HXDLIN(  37)																int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this426 >> 8) & 255)) )));
HXDLIN(  37)																int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this426 & 255)) )));
HXDLIN(  37)																col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN(  37)														if ((col3 != 0)) {
HXLINE(  37)															int x34 = (dx7 - rectLeft3);
HXDLIN(  37)															int y30 = (dy7 - rectTop3);
HXDLIN(  37)															int c21 = col3;
HXDLIN(  37)															bool _hx_tmp102;
HXDLIN(  37)															if ((((c21 >> 24) & 255) < 254)) {
HXLINE(  37)																_hx_tmp102 = undoImage9->transparent;
            															}
            															else {
HXLINE(  37)																_hx_tmp102 = false;
            															}
HXDLIN(  37)															if (_hx_tmp102) {
HXLINE(  37)																int location39;
HXDLIN(  37)																if (undoImage9->useVirtualPos) {
HXLINE(  37)																	location39 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x34) - undoImage9->virtualX));
            																}
            																else {
HXLINE(  37)																	location39 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage9->width) + x34)) ));
            																}
HXDLIN(  37)																int this431 = ::iterMagic::Iimg_obj::get(undoImage9->image,location39);
HXDLIN(  37)																int this432;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	this432 = ((((((this431 >> 24) & 255) << 24) | ((this431 & 255) << 16)) | (((this431 >> 8) & 255) << 8)) | ((this431 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	this432 = this431;
            																}
HXDLIN(  37)																Float a140;
HXDLIN(  37)																int this433 = ((this432 >> 24) & 255);
HXDLIN(  37)																if ((this433 == 0)) {
HXLINE(  37)																	a140 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a140 = (( (Float)(this433) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r140;
HXDLIN(  37)																int this434 = ((this432 >> 16) & 255);
HXDLIN(  37)																if ((this434 == 0)) {
HXLINE(  37)																	r140 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r140 = (( (Float)(this434) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g140;
HXDLIN(  37)																int this435 = ((this432 >> 8) & 255);
HXDLIN(  37)																if ((this435 == 0)) {
HXLINE(  37)																	g140 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g140 = (( (Float)(this435) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b140;
HXDLIN(  37)																int this436 = (this432 & 255);
HXDLIN(  37)																if ((this436 == 0)) {
HXLINE(  37)																	b140 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b140 = (( (Float)(this436) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a239;
HXDLIN(  37)																int this437 = ((col3 >> 24) & 255);
HXDLIN(  37)																if ((this437 == 0)) {
HXLINE(  37)																	a239 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a239 = (( (Float)(this437) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r239;
HXDLIN(  37)																int this438 = ((col3 >> 16) & 255);
HXDLIN(  37)																if ((this438 == 0)) {
HXLINE(  37)																	r239 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r239 = (( (Float)(this438) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g239;
HXDLIN(  37)																int this439 = ((col3 >> 8) & 255);
HXDLIN(  37)																if ((this439 == 0)) {
HXLINE(  37)																	g239 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g239 = (( (Float)(this439) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b239;
HXDLIN(  37)																int this440 = (col3 & 255);
HXDLIN(  37)																if ((this440 == 0)) {
HXLINE(  37)																	b239 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b239 = (( (Float)(this440) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a339 = (a140 * (( (Float)(1) ) - a239));
HXDLIN(  37)																int r61 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r140 * a339) + (r239 * a239))));
HXDLIN(  37)																int g61 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g140 * a339) + (g239 * a239))));
HXDLIN(  37)																int b73 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b140 * a339) + (b239 * a239))));
HXDLIN(  37)																int a77 = ::Std_obj::_hx_int((( (Float)(255) ) * (a339 + a239)));
HXDLIN(  37)																int blended39 = ((((a77 << 24) | (r61 << 16)) | (g61 << 8)) | b73);
HXDLIN(  37)																{
HXLINE(  37)																	int _hx_tmp103;
HXDLIN(  37)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																		_hx_tmp103 = ((((((blended39 >> 24) & 255) << 24) | ((blended39 & 255) << 16)) | (((blended39 >> 8) & 255) << 8)) | ((blended39 >> 16) & 255));
            																	}
            																	else {
HXLINE(  37)																		_hx_tmp103 = blended39;
            																	}
HXDLIN(  37)																	::iterMagic::Iimg_obj::set(undoImage9->image,location39,_hx_tmp103);
            																}
            															}
            															else {
HXLINE(  37)																::Dynamic this441 = undoImage9->image;
HXDLIN(  37)																int index24;
HXDLIN(  37)																if (undoImage9->useVirtualPos) {
HXLINE(  37)																	index24 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x34) - undoImage9->virtualX));
            																}
            																else {
HXLINE(  37)																	index24 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage9->width) + x34)) ));
            																}
HXDLIN(  37)																int _hx_tmp104;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	_hx_tmp104 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	_hx_tmp104 = c21;
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this441,index24,_hx_tmp104);
            															}
            														}
            														else {
HXLINE(  37)															if (forceClear3) {
HXLINE(  37)																::Dynamic this442 = undoImage9->image;
HXDLIN(  37)																int x35 = (dx7 - rectLeft3);
HXDLIN(  37)																int y31 = (dy7 - rectTop3);
HXDLIN(  37)																int index25;
HXDLIN(  37)																if (undoImage9->useVirtualPos) {
HXLINE(  37)																	index25 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x35) - undoImage9->virtualX));
            																}
            																else {
HXLINE(  37)																	index25 = ::Std_obj::_hx_int(( (Float)(((y31 * undoImage9->width) + x35)) ));
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this442,index25,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN(  37)								bool found3 = false;
HXDLIN(  37)								Float min17 = ( (Float)(0) );
HXDLIN(  37)								Float max1 = ( (Float)(0) );
HXDLIN(  37)								int a78 = 0;
HXDLIN(  37)								int r62 = 0;
HXDLIN(  37)								int g62 = 0;
HXDLIN(  37)								int b74 = 0;
HXDLIN(  37)								{
HXLINE(  37)									int _g_min6 = xIter33->start;
HXDLIN(  37)									int _g_max6 = xIter33->max;
HXDLIN(  37)									while((_g_min6 < _g_max6)){
HXLINE(  37)										_g_min6 = (_g_min6 + 1);
HXDLIN(  37)										int px2 = (_g_min6 - 1);
HXDLIN(  37)										Float pcx1 = (( (Float)(px2) ) - ax1);
HXLINE( 812)										found3 = false;
HXLINE(  37)										{
HXLINE(  37)											int _g_min7 = yIter33->start;
HXDLIN(  37)											int _g_max7 = yIter33->max;
HXDLIN(  37)											while((_g_min7 < _g_max7)){
HXLINE(  37)												_g_min7 = (_g_min7 + 1);
HXDLIN(  37)												int py2 = (_g_min7 - 1);
HXDLIN(  37)												Float pcy1 = (( (Float)(py2) ) - ay1);
HXDLIN(  37)												Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN(  37)												Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN(  37)												Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN(  37)												Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN(  37)												Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  37)												bool _hx_tmp105;
HXDLIN(  37)												bool _hx_tmp106;
HXDLIN(  37)												if ((ratioA1 >= 0)) {
HXLINE(  37)													_hx_tmp106 = (ratioB1 >= 0);
            												}
            												else {
HXLINE(  37)													_hx_tmp106 = false;
            												}
HXDLIN(  37)												if (_hx_tmp106) {
HXLINE(  37)													_hx_tmp105 = (ratioC1 >= 0);
            												}
            												else {
HXLINE(  37)													_hx_tmp105 = false;
            												}
HXDLIN(  37)												if (_hx_tmp105) {
HXLINE(  37)													int i69 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN(  37)													if ((i69 > 255)) {
HXLINE(  24)														i69 = 255;
            													}
HXLINE(  37)													if ((i69 < 0)) {
HXLINE(  25)														i69 = 0;
            													}
HXLINE( 821)													r62 = i69;
HXLINE(  37)													int i70 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN(  37)													if ((i70 > 255)) {
HXLINE(  24)														i70 = 255;
            													}
HXLINE(  37)													if ((i70 < 0)) {
HXLINE(  25)														i70 = 0;
            													}
HXLINE( 822)													g62 = i70;
HXLINE(  37)													int i71 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN(  37)													if ((i71 > 255)) {
HXLINE(  24)														i71 = 255;
            													}
HXLINE(  37)													if ((i71 < 0)) {
HXLINE(  25)														i71 = 0;
            													}
HXLINE( 823)													b74 = i71;
HXLINE(  37)													bool _hx_tmp107;
HXDLIN(  37)													if ((softCD == true)) {
HXLINE(  37)														_hx_tmp107 = (softDA == true);
            													}
            													else {
HXLINE(  37)														_hx_tmp107 = false;
            													}
HXDLIN(  37)													if (_hx_tmp107) {
HXLINE(  37)														if ((ratioA1 < ratioC1)) {
HXLINE(  37)															min17 = ratioA1;
            														}
            														else {
HXLINE(  37)															min17 = ratioC1;
            														}
HXDLIN(  37)														if ((ratioA1 > ratioB1)) {
HXLINE(  37)															max1 = ratioA1;
            														}
            														else {
HXLINE(  37)															max1 = ratioB1;
            														}
HXDLIN(  37)														if (!((max1 > ratioC1))) {
HXLINE(  37)															max1 = ratioC1;
            														}
HXLINE( 829)														max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE(  37)														if (!((min17 < max1))) {
HXLINE(  37)															min17 = ((max1 + min17) / ( (Float)(2) ));
            														}
HXDLIN(  37)														int i72 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min17));
HXDLIN(  37)														if ((i72 > 255)) {
HXLINE(  24)															i72 = 255;
            														}
HXLINE(  37)														if ((i72 < 0)) {
HXLINE(  25)															i72 = 0;
            														}
HXLINE( 832)														a78 = i72;
HXLINE(  37)														{
HXLINE(  37)															int location40;
HXDLIN(  37)															if (this332->useVirtualPos) {
HXLINE(  37)																location40 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this332->virtualY) * ( (Float)(this332->width) )) + px2) - this332->virtualX));
            															}
            															else {
HXLINE(  37)																location40 = ::Std_obj::_hx_int(( (Float)(((py2 * this332->width) + px2)) ));
            															}
HXDLIN(  37)															bool _hx_tmp108;
HXDLIN(  37)															if (this332->transparent) {
HXLINE(  37)																_hx_tmp108 = (a78 < 254);
            															}
            															else {
HXLINE(  37)																_hx_tmp108 = false;
            															}
HXDLIN(  37)															if (_hx_tmp108) {
HXLINE(  37)																int this443 = ::iterMagic::Iimg_obj::get(this332->image,location40);
HXDLIN(  37)																int old26;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	old26 = ((((((this443 >> 24) & 255) << 24) | ((this443 & 255) << 16)) | (((this443 >> 8) & 255) << 8)) | ((this443 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	old26 = this443;
            																}
HXDLIN(  37)																int rhs26 = ((((a78 << 24) | (r62 << 16)) | (g62 << 8)) | b74);
HXDLIN(  37)																Float a141;
HXDLIN(  37)																int this444 = ((old26 >> 24) & 255);
HXDLIN(  37)																if ((this444 == 0)) {
HXLINE(  37)																	a141 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a141 = (( (Float)(this444) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r141;
HXDLIN(  37)																int this445 = ((old26 >> 16) & 255);
HXDLIN(  37)																if ((this445 == 0)) {
HXLINE(  37)																	r141 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r141 = (( (Float)(this445) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g141;
HXDLIN(  37)																int this446 = ((old26 >> 8) & 255);
HXDLIN(  37)																if ((this446 == 0)) {
HXLINE(  37)																	g141 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g141 = (( (Float)(this446) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b141;
HXDLIN(  37)																int this447 = (old26 & 255);
HXDLIN(  37)																if ((this447 == 0)) {
HXLINE(  37)																	b141 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b141 = (( (Float)(this447) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a240;
HXDLIN(  37)																int this448 = ((rhs26 >> 24) & 255);
HXDLIN(  37)																if ((this448 == 0)) {
HXLINE(  37)																	a240 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a240 = (( (Float)(this448) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r240;
HXDLIN(  37)																int this449 = ((rhs26 >> 16) & 255);
HXDLIN(  37)																if ((this449 == 0)) {
HXLINE(  37)																	r240 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r240 = (( (Float)(this449) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g240;
HXDLIN(  37)																int this450 = ((rhs26 >> 8) & 255);
HXDLIN(  37)																if ((this450 == 0)) {
HXLINE(  37)																	g240 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g240 = (( (Float)(this450) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b240;
HXDLIN(  37)																int this451 = (rhs26 & 255);
HXDLIN(  37)																if ((this451 == 0)) {
HXLINE(  37)																	b240 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b240 = (( (Float)(this451) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a340 = (a141 * (( (Float)(1) ) - a240));
HXDLIN(  37)																int r63 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r141 * a340) + (r240 * a240))));
HXDLIN(  37)																int g63 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g141 * a340) + (g240 * a240))));
HXDLIN(  37)																int b75 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b141 * a340) + (b240 * a240))));
HXDLIN(  37)																int a79 = ::Std_obj::_hx_int((( (Float)(255) ) * (a340 + a240)));
HXDLIN(  37)																int blended40 = ((((a79 << 24) | (r63 << 16)) | (g63 << 8)) | b75);
HXDLIN(  37)																{
HXLINE(  37)																	int _hx_tmp109;
HXDLIN(  37)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																		_hx_tmp109 = ((((((blended40 >> 24) & 255) << 24) | ((blended40 & 255) << 16)) | (((blended40 >> 8) & 255) << 8)) | ((blended40 >> 16) & 255));
            																	}
            																	else {
HXLINE(  37)																		_hx_tmp109 = blended40;
            																	}
HXDLIN(  37)																	::iterMagic::Iimg_obj::set(this332->image,location40,_hx_tmp109);
            																}
            															}
            															else {
HXLINE(  37)																int value26;
HXDLIN(  37)																if (this332->isLittle) {
HXLINE(  37)																	value26 = ((((a78 << 24) | (b74 << 16)) | (g62 << 8)) | r62);
            																}
            																else {
HXLINE(  37)																	value26 = ((((a78 << 24) | (r62 << 16)) | (g62 << 8)) | b74);
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this332->image,location40,value26);
            															}
            														}
            													}
HXDLIN(  37)													bool _hx_tmp110;
HXDLIN(  37)													bool _hx_tmp111;
HXDLIN(  37)													if ((softCD == true)) {
HXLINE(  37)														_hx_tmp111 = false;
            													}
            													else {
HXLINE(  37)														_hx_tmp111 = false;
            													}
HXDLIN(  37)													if (_hx_tmp111) {
HXLINE(  37)														_hx_tmp110 = (softDA == false);
            													}
            													else {
HXLINE(  37)														_hx_tmp110 = false;
            													}
HXDLIN(  37)													if (_hx_tmp110) {
HXLINE(  37)														if ((ratioB1 < ratioC1)) {
HXLINE(  37)															min17 = ratioB1;
            														}
            														else {
HXLINE(  37)															min17 = ratioC1;
            														}
HXDLIN(  37)														if ((ratioA1 > ratioB1)) {
HXLINE(  37)															max1 = ratioA1;
            														}
            														else {
HXLINE(  37)															max1 = ratioB1;
            														}
HXDLIN(  37)														if (!((max1 > ratioC1))) {
HXLINE(  37)															max1 = ratioC1;
            														}
HXLINE( 842)														max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE(  37)														if (!((min17 < max1))) {
HXLINE(  37)															min17 = ((max1 + min17) / ( (Float)(2) ));
            														}
HXDLIN(  37)														int i73 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min17));
HXDLIN(  37)														if ((i73 > 255)) {
HXLINE(  24)															i73 = 255;
            														}
HXLINE(  37)														if ((i73 < 0)) {
HXLINE(  25)															i73 = 0;
            														}
HXLINE( 845)														a78 = i73;
HXLINE(  37)														{
HXLINE(  37)															int location41;
HXDLIN(  37)															if (this332->useVirtualPos) {
HXLINE(  37)																location41 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this332->virtualY) * ( (Float)(this332->width) )) + px2) - this332->virtualX));
            															}
            															else {
HXLINE(  37)																location41 = ::Std_obj::_hx_int(( (Float)(((py2 * this332->width) + px2)) ));
            															}
HXDLIN(  37)															bool _hx_tmp112;
HXDLIN(  37)															if (this332->transparent) {
HXLINE(  37)																_hx_tmp112 = (a78 < 254);
            															}
            															else {
HXLINE(  37)																_hx_tmp112 = false;
            															}
HXDLIN(  37)															if (_hx_tmp112) {
HXLINE(  37)																int this452 = ::iterMagic::Iimg_obj::get(this332->image,location41);
HXDLIN(  37)																int old27;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	old27 = ((((((this452 >> 24) & 255) << 24) | ((this452 & 255) << 16)) | (((this452 >> 8) & 255) << 8)) | ((this452 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	old27 = this452;
            																}
HXDLIN(  37)																int rhs27 = ((((a78 << 24) | (r62 << 16)) | (g62 << 8)) | b74);
HXDLIN(  37)																Float a142;
HXDLIN(  37)																int this453 = ((old27 >> 24) & 255);
HXDLIN(  37)																if ((this453 == 0)) {
HXLINE(  37)																	a142 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a142 = (( (Float)(this453) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r142;
HXDLIN(  37)																int this454 = ((old27 >> 16) & 255);
HXDLIN(  37)																if ((this454 == 0)) {
HXLINE(  37)																	r142 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r142 = (( (Float)(this454) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g142;
HXDLIN(  37)																int this455 = ((old27 >> 8) & 255);
HXDLIN(  37)																if ((this455 == 0)) {
HXLINE(  37)																	g142 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g142 = (( (Float)(this455) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b142;
HXDLIN(  37)																int this456 = (old27 & 255);
HXDLIN(  37)																if ((this456 == 0)) {
HXLINE(  37)																	b142 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b142 = (( (Float)(this456) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a241;
HXDLIN(  37)																int this457 = ((rhs27 >> 24) & 255);
HXDLIN(  37)																if ((this457 == 0)) {
HXLINE(  37)																	a241 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a241 = (( (Float)(this457) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r241;
HXDLIN(  37)																int this458 = ((rhs27 >> 16) & 255);
HXDLIN(  37)																if ((this458 == 0)) {
HXLINE(  37)																	r241 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r241 = (( (Float)(this458) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g241;
HXDLIN(  37)																int this459 = ((rhs27 >> 8) & 255);
HXDLIN(  37)																if ((this459 == 0)) {
HXLINE(  37)																	g241 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g241 = (( (Float)(this459) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b241;
HXDLIN(  37)																int this460 = (rhs27 & 255);
HXDLIN(  37)																if ((this460 == 0)) {
HXLINE(  37)																	b241 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b241 = (( (Float)(this460) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a341 = (a142 * (( (Float)(1) ) - a241));
HXDLIN(  37)																int r64 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r142 * a341) + (r241 * a241))));
HXDLIN(  37)																int g64 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g142 * a341) + (g241 * a241))));
HXDLIN(  37)																int b76 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b142 * a341) + (b241 * a241))));
HXDLIN(  37)																int a80 = ::Std_obj::_hx_int((( (Float)(255) ) * (a341 + a241)));
HXDLIN(  37)																int blended41 = ((((a80 << 24) | (r64 << 16)) | (g64 << 8)) | b76);
HXDLIN(  37)																{
HXLINE(  37)																	int _hx_tmp113;
HXDLIN(  37)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																		_hx_tmp113 = ((((((blended41 >> 24) & 255) << 24) | ((blended41 & 255) << 16)) | (((blended41 >> 8) & 255) << 8)) | ((blended41 >> 16) & 255));
            																	}
            																	else {
HXLINE(  37)																		_hx_tmp113 = blended41;
            																	}
HXDLIN(  37)																	::iterMagic::Iimg_obj::set(this332->image,location41,_hx_tmp113);
            																}
            															}
            															else {
HXLINE(  37)																int value27;
HXDLIN(  37)																if (this332->isLittle) {
HXLINE(  37)																	value27 = ((((a78 << 24) | (b74 << 16)) | (g62 << 8)) | r62);
            																}
            																else {
HXLINE(  37)																	value27 = ((((a78 << 24) | (r62 << 16)) | (g62 << 8)) | b74);
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this332->image,location41,value27);
            															}
            														}
            													}
HXLINE( 850)													found3 = true;
            												}
            												else {
HXLINE(  37)													if (found3) {
HXLINE(  37)														goto _hx_goto_61;
            													}
            												}
            											}
            											_hx_goto_61:;
            										}
            									}
            								}
HXDLIN(  37)								if ((hasHit1 == false)) {
HXLINE(  37)									 ::pi_xy::algo::HitTri v16 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,dx5,dy5,cx3,cy3,ax1,ay1,true);
HXDLIN(  37)									if (hasUndo3) {
HXLINE(  37)										v16->undoImage = undoImage9;
HXDLIN(  37)										v16->undoX = xIter33->start;
HXDLIN(  37)										v16->undoY = yIter33->start;
            									}
            								}
            							}
HXDLIN(  37)							{
HXLINE(  37)								bool hasUndo4 = true;
HXDLIN(  37)								int aA2 = ((color3 >> 24) & 255);
HXDLIN(  37)								int rA2 = ((color3 >> 16) & 255);
HXDLIN(  37)								int gA2 = ((color3 >> 8) & 255);
HXDLIN(  37)								int bA2 = (color3 & 255);
HXDLIN(  37)								Float bcx2 = (bx3 - dx5);
HXDLIN(  37)								Float bcy2 = (by3 - dy5);
HXDLIN(  37)								Float acx2 = (ax1 - dx5);
HXDLIN(  37)								Float acy2 = (ay1 - dy5);
HXDLIN(  37)								Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN(  37)								Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN(  37)								Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN(  37)								Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN(  37)								 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN(  37)								if ((ax1 > bx3)) {
HXLINE(  37)									if ((ax1 > dx5)) {
HXLINE(  37)										int min18;
HXDLIN(  37)										if ((bx3 > dx5)) {
HXLINE(  37)											min18 = ::Math_obj::floor(dx5);
            										}
            										else {
HXLINE(  37)											min18 = ::Math_obj::floor(bx3);
            										}
HXDLIN(  37)										int ii_min48 = min18;
HXDLIN(  37)										int ii_max48 = ::Math_obj::ceil(ax1);
HXDLIN(  37)										xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            									}
            									else {
HXLINE(  37)										int ii_min49 = ::Math_obj::floor(bx3);
HXDLIN(  37)										int ii_max49 = ::Math_obj::ceil(dx5);
HXDLIN(  37)										xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            									}
            								}
            								else {
HXLINE(  37)									if ((bx3 > dx5)) {
HXLINE(  37)										int min19;
HXDLIN(  37)										if ((ax1 > dx5)) {
HXLINE(  37)											min19 = ::Math_obj::floor(dx5);
            										}
            										else {
HXLINE(  37)											min19 = ::Math_obj::ceil(ax1);
            										}
HXDLIN(  37)										int ii_min50 = min19;
HXDLIN(  37)										int ii_max50 = ::Math_obj::ceil(bx3);
HXDLIN(  37)										xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            									}
            									else {
HXLINE(  37)										int ii_min51 = ::Math_obj::floor(ax1);
HXDLIN(  37)										int ii_max51 = ::Math_obj::ceil(dx5);
HXDLIN(  37)										xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            									}
            								}
HXDLIN(  37)								 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN(  37)								if ((ay1 > by3)) {
HXLINE(  37)									if ((ay1 > dy5)) {
HXLINE(  37)										int min20;
HXDLIN(  37)										if ((by3 > dy5)) {
HXLINE(  37)											min20 = ::Math_obj::floor(dy5);
            										}
            										else {
HXLINE(  37)											min20 = ::Math_obj::floor(by3);
            										}
HXDLIN(  37)										int ii_min52 = min20;
HXDLIN(  37)										int ii_max52 = ::Math_obj::ceil(ay1);
HXDLIN(  37)										yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            									}
            									else {
HXLINE(  37)										int ii_min53 = ::Math_obj::floor(by3);
HXDLIN(  37)										int ii_max53 = ::Math_obj::ceil(dy5);
HXDLIN(  37)										yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            									}
            								}
            								else {
HXLINE(  37)									if ((by3 > dy5)) {
HXLINE(  37)										int min21;
HXDLIN(  37)										if ((ay1 > dy5)) {
HXLINE(  37)											min21 = ::Math_obj::floor(dy5);
            										}
            										else {
HXLINE(  37)											min21 = ::Math_obj::ceil(ay1);
            										}
HXDLIN(  37)										int ii_min54 = min21;
HXDLIN(  37)										int ii_max54 = ::Math_obj::ceil(by3);
HXDLIN(  37)										yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            									}
            									else {
HXLINE(  37)										int ii_min55 = ::Math_obj::floor(ay1);
HXDLIN(  37)										int ii_max55 = ::Math_obj::ceil(dy5);
HXDLIN(  37)										yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            									}
            								}
HXDLIN(  37)								 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN(  37)								if (hasUndo4) {
HXLINE(  37)									int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN(  37)									int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN(  37)									 ::Dynamic imageType4 = null();
HXDLIN(  37)									 ::pi_xy::ImageStruct this461 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  37)									if (::hx::IsNull( imageType4 )) {
HXLINE(  54)										imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            									}
HXLINE(  37)									::Dynamic undoImage13;
HXDLIN(  37)									switch((int)(( (int)(imageType4) ))){
            										case (int)0: {
HXLINE(  37)											 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::BytesImg b77 = byt4;
HXDLIN(  37)											{
HXLINE(  37)												b77->width = width4;
HXDLIN(  37)												b77->height = height4;
HXDLIN(  37)												b77->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  37)												b77->data = ::haxe::io::Bytes_obj::alloc((b77->length * 4));
HXDLIN(  37)												{
HXLINE(  37)													int len8 = b77->length;
HXDLIN(  37)													int w4 = 0;
HXDLIN(  37)													{
HXLINE(  37)														int _g88 = 0;
HXDLIN(  37)														int _g89 = b77->height;
HXDLIN(  37)														while((_g88 < _g89)){
HXLINE(  37)															_g88 = (_g88 + 1);
HXDLIN(  37)															int y32 = (_g88 - 1);
HXDLIN(  37)															{
HXLINE(  37)																int _g90 = 0;
HXDLIN(  37)																int _g91 = b77->width;
HXDLIN(  37)																while((_g90 < _g91)){
HXLINE(  37)																	_g90 = (_g90 + 1);
HXDLIN(  37)																	int x36 = (_g90 - 1);
HXDLIN(  37)																	{
HXLINE(  37)																		w4 = (w4 + 1);
HXDLIN(  37)																		b77->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  37)																	{
HXLINE(  37)																		w4 = (w4 + 1);
HXDLIN(  37)																		b77->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  37)																	{
HXLINE(  37)																		w4 = (w4 + 1);
HXDLIN(  37)																		b77->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  37)																	{
HXLINE(  37)																		w4 = (w4 + 1);
HXDLIN(  37)																		b77->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  37)											undoImage13 = b77;
            										}
            										break;
            										case (int)1: {
HXLINE(  37)											 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::ArrIntImg a81 = arrI4;
HXDLIN(  37)											{
HXLINE(  37)												a81->width = width4;
HXDLIN(  37)												a81->height = height4;
HXDLIN(  37)												a81->data = ::Array_obj< int >::__new(0);
HXDLIN(  37)												a81->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  37)												{
HXLINE(  37)													int _g92 = 0;
HXDLIN(  37)													int _g93 = a81->length;
HXDLIN(  37)													while((_g92 < _g93)){
HXLINE(  37)														_g92 = (_g92 + 1);
HXDLIN(  37)														int i74 = (_g92 - 1);
HXDLIN(  37)														a81->data[i74] = 0;
            													}
            												}
            											}
HXDLIN(  37)											undoImage13 = a81;
            										}
            										break;
            										case (int)2: {
HXLINE(  37)											 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::U32ArrImg b78 = u32a4;
HXDLIN(  37)											{
HXLINE(  37)												b78->width = width4;
HXDLIN(  37)												b78->height = height4;
HXDLIN(  37)												b78->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  37)												int size4 = (b78->length * 4);
HXDLIN(  37)												b78->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN(  37)												{
HXLINE(  37)													int _g94 = 0;
HXDLIN(  37)													int _g95 = b78->length;
HXDLIN(  37)													while((_g94 < _g95)){
HXLINE(  37)														_g94 = (_g94 + 1);
HXDLIN(  37)														int i75 = (_g94 - 1);
HXDLIN(  37)														{
HXLINE(  37)															 ::haxe::io::ArrayBufferViewImpl this462 = b78->data;
HXDLIN(  37)															bool undoImage14;
HXDLIN(  37)															if ((i75 >= 0)) {
HXLINE(  37)																undoImage14 = (i75 < (this462->byteLength >> 2));
            															}
            															else {
HXLINE(  37)																undoImage14 = false;
            															}
HXDLIN(  37)															if (undoImage14) {
HXLINE(  37)																 ::haxe::io::Bytes _this4 = this462->bytes;
HXDLIN(  37)																int pos4 = ((i75 << 2) + this462->byteOffset);
HXDLIN(  37)																_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN(  37)																_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN(  37)																_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN(  37)																_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
HXDLIN(  37)											undoImage13 = b78;
            										}
            										break;
            										case (int)3: {
HXLINE(  37)											 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::VecIntImg v17 = vec4;
HXDLIN(  37)											{
HXLINE(  37)												v17->width = width4;
HXDLIN(  37)												v17->height = height4;
HXDLIN(  37)												v17->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  37)												v17->data = ::Array_obj< int >::__new(v17->length);
HXDLIN(  37)												{
HXLINE(  37)													int _g96 = 0;
HXDLIN(  37)													int _g97 = v17->length;
HXDLIN(  37)													while((_g96 < _g97)){
HXLINE(  37)														_g96 = (_g96 + 1);
HXDLIN(  37)														int i76 = (_g96 - 1);
HXDLIN(  37)														v17->data->__unsafe_set(i76,0);
            													}
            												}
            											}
HXDLIN(  37)											undoImage13 = v17;
            										}
            										break;
            										case (int)4: {
HXLINE(  37)											 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::StackIntImg b79 = sInt4;
HXDLIN(  37)											{
HXLINE(  37)												b79->width = width4;
HXDLIN(  37)												b79->height = height4;
HXDLIN(  37)												b79->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  37)												b79->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  37)												{
HXLINE(  37)													int len9 = b79->length;
HXDLIN(  37)													 ::haxe::ds::GenericStack_Int d4 = b79->data;
HXDLIN(  37)													if (::hx::IsNull( d4->head )) {
HXLINE(  37)														int _g98 = 0;
HXDLIN(  37)														int _g99 = len9;
HXDLIN(  37)														while((_g98 < _g99)){
HXLINE(  37)															_g98 = (_g98 + 1);
HXDLIN(  37)															int i77 = (_g98 - 1);
HXDLIN(  37)															d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            														}
            													}
            													else {
HXLINE(  37)														int _g100 = 0;
HXDLIN(  37)														int _g101 = len9;
HXDLIN(  37)														while((_g100 < _g101)){
HXLINE(  37)															_g100 = (_g100 + 1);
HXDLIN(  37)															int i78 = (_g100 - 1);
HXDLIN(  37)															{
HXLINE(  37)																 ::haxe::ds::GenericCell_Int l4 = b79->data->head;
HXDLIN(  37)																 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN(  37)																{
HXLINE(  37)																	int _g102 = 0;
HXDLIN(  37)																	int _g103 = i78;
HXDLIN(  37)																	while((_g102 < _g103)){
HXLINE(  37)																		_g102 = (_g102 + 1);
HXDLIN(  37)																		int i79 = (_g102 - 1);
HXLINE( 345)																		prev4 = l4;
HXLINE( 346)																		l4 = l4->next;
            																	}
            																}
HXLINE(  37)																if (::hx::IsNull( prev4 )) {
HXLINE(  37)																	b79->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  37)																	l4 = null();
            																}
            																else {
HXLINE(  37)																	prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  37)																	l4 = null();
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  37)											undoImage13 = b79;
            										}
            										break;
            									}
HXDLIN(  37)									this461->image = undoImage13;
HXDLIN(  37)									this461->width = width4;
HXDLIN(  37)									this461->height = height4;
HXDLIN(  37)									this461->imageType = ( (int)(imageType4) );
HXDLIN(  37)									undoImage12 = this461;
HXDLIN(  37)									{
HXLINE(  37)										int rectLeft4 = xIter34->start;
HXDLIN(  37)										int rectTop4 = yIter34->start;
HXDLIN(  37)										int rectRight4 = xIter34->max;
HXDLIN(  37)										bool forceClear4 = false;
HXDLIN(  37)										{
HXLINE(  37)											int _g104 = rectTop4;
HXDLIN(  37)											int _g105 = yIter34->max;
HXDLIN(  37)											while((_g104 < _g105)){
HXLINE(  37)												_g104 = (_g104 + 1);
HXDLIN(  37)												int dy8 = (_g104 - 1);
HXDLIN(  37)												{
HXLINE(  37)													int _g106 = rectLeft4;
HXDLIN(  37)													int _g107 = rectRight4;
HXDLIN(  37)													while((_g106 < _g107)){
HXLINE(  37)														_g106 = (_g106 + 1);
HXDLIN(  37)														int dx8 = (_g106 - 1);
HXDLIN(  37)														::Dynamic this463 = this332->image;
HXDLIN(  37)														int index26;
HXDLIN(  37)														if (this332->useVirtualPos) {
HXLINE(  37)															index26 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this332->virtualY) * ( (Float)(this332->width) )) + dx8) - this332->virtualX));
            														}
            														else {
HXLINE(  37)															index26 = ::Std_obj::_hx_int(( (Float)(((dy8 * this332->width) + dx8)) ));
            														}
HXDLIN(  37)														int c22 = ::iterMagic::Iimg_obj::get(this463,index26);
HXDLIN(  37)														int col4;
HXDLIN(  37)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)															col4 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            														}
            														else {
HXLINE(  37)															col4 = c22;
            														}
HXDLIN(  37)														bool _hx_tmp114;
HXDLIN(  37)														if (this332->useMask) {
HXLINE(  37)															_hx_tmp114 = ::hx::IsNotNull( this332->mask );
            														}
            														else {
HXLINE(  37)															_hx_tmp114 = false;
            														}
HXDLIN(  37)														if (_hx_tmp114) {
HXLINE(  37)															 ::pi_xy::ImageStruct this464 = this332->mask;
HXDLIN(  37)															::Dynamic this465 = this464->image;
HXDLIN(  37)															int index27;
HXDLIN(  37)															if (this464->useVirtualPos) {
HXLINE(  37)																index27 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this464->virtualY) * ( (Float)(this464->width) )) + dx8) - this464->virtualX));
            															}
            															else {
HXLINE(  37)																index27 = ::Std_obj::_hx_int(( (Float)(((dy8 * this464->width) + dx8)) ));
            															}
HXDLIN(  37)															int c23 = ::iterMagic::Iimg_obj::get(this465,index27);
HXDLIN(  37)															int v18;
HXDLIN(  37)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																v18 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            															}
            															else {
HXLINE(  37)																v18 = c23;
            															}
HXDLIN(  37)															int maskPixel4 = v18;
HXDLIN(  37)															int this466 = col4;
HXDLIN(  37)															if ((maskPixel4 == 0)) {
HXLINE(  37)																col4 = this466;
            															}
            															else {
HXLINE(  37)																Float m04;
HXDLIN(  37)																int this467 = ((maskPixel4 >> 24) & 255);
HXDLIN(  37)																if ((this467 == 0)) {
HXLINE(  37)																	m04 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m04 = (( (Float)(this467) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float m14;
HXDLIN(  37)																int this468 = ((maskPixel4 >> 16) & 255);
HXDLIN(  37)																if ((this468 == 0)) {
HXLINE(  37)																	m14 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m14 = (( (Float)(this468) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float m24;
HXDLIN(  37)																int this469 = ((maskPixel4 >> 8) & 255);
HXDLIN(  37)																if ((this469 == 0)) {
HXLINE(  37)																	m24 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m24 = (( (Float)(this469) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float m34;
HXDLIN(  37)																int this470 = (maskPixel4 & 255);
HXDLIN(  37)																if ((this470 == 0)) {
HXLINE(  37)																	m34 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m34 = (( (Float)(this470) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this466 >> 24) & 255)) )));
HXDLIN(  37)																int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this466 >> 16) & 255)) )));
HXDLIN(  37)																int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this466 >> 8) & 255)) )));
HXDLIN(  37)																int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this466 & 255)) )));
HXDLIN(  37)																col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN(  37)														if ((col4 != 0)) {
HXLINE(  37)															int x37 = (dx8 - rectLeft4);
HXDLIN(  37)															int y33 = (dy8 - rectTop4);
HXDLIN(  37)															int c24 = col4;
HXDLIN(  37)															bool _hx_tmp115;
HXDLIN(  37)															if ((((c24 >> 24) & 255) < 254)) {
HXLINE(  37)																_hx_tmp115 = undoImage12->transparent;
            															}
            															else {
HXLINE(  37)																_hx_tmp115 = false;
            															}
HXDLIN(  37)															if (_hx_tmp115) {
HXLINE(  37)																int location42;
HXDLIN(  37)																if (undoImage12->useVirtualPos) {
HXLINE(  37)																	location42 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x37) - undoImage12->virtualX));
            																}
            																else {
HXLINE(  37)																	location42 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage12->width) + x37)) ));
            																}
HXDLIN(  37)																int this471 = ::iterMagic::Iimg_obj::get(undoImage12->image,location42);
HXDLIN(  37)																int this472;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	this472 = ((((((this471 >> 24) & 255) << 24) | ((this471 & 255) << 16)) | (((this471 >> 8) & 255) << 8)) | ((this471 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	this472 = this471;
            																}
HXDLIN(  37)																Float a143;
HXDLIN(  37)																int this473 = ((this472 >> 24) & 255);
HXDLIN(  37)																if ((this473 == 0)) {
HXLINE(  37)																	a143 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a143 = (( (Float)(this473) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r143;
HXDLIN(  37)																int this474 = ((this472 >> 16) & 255);
HXDLIN(  37)																if ((this474 == 0)) {
HXLINE(  37)																	r143 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r143 = (( (Float)(this474) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g143;
HXDLIN(  37)																int this475 = ((this472 >> 8) & 255);
HXDLIN(  37)																if ((this475 == 0)) {
HXLINE(  37)																	g143 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g143 = (( (Float)(this475) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b143;
HXDLIN(  37)																int this476 = (this472 & 255);
HXDLIN(  37)																if ((this476 == 0)) {
HXLINE(  37)																	b143 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b143 = (( (Float)(this476) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a242;
HXDLIN(  37)																int this477 = ((col4 >> 24) & 255);
HXDLIN(  37)																if ((this477 == 0)) {
HXLINE(  37)																	a242 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a242 = (( (Float)(this477) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r242;
HXDLIN(  37)																int this478 = ((col4 >> 16) & 255);
HXDLIN(  37)																if ((this478 == 0)) {
HXLINE(  37)																	r242 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r242 = (( (Float)(this478) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g242;
HXDLIN(  37)																int this479 = ((col4 >> 8) & 255);
HXDLIN(  37)																if ((this479 == 0)) {
HXLINE(  37)																	g242 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g242 = (( (Float)(this479) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b242;
HXDLIN(  37)																int this480 = (col4 & 255);
HXDLIN(  37)																if ((this480 == 0)) {
HXLINE(  37)																	b242 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b242 = (( (Float)(this480) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a342 = (a143 * (( (Float)(1) ) - a242));
HXDLIN(  37)																int r65 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r143 * a342) + (r242 * a242))));
HXDLIN(  37)																int g65 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g143 * a342) + (g242 * a242))));
HXDLIN(  37)																int b80 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b143 * a342) + (b242 * a242))));
HXDLIN(  37)																int a82 = ::Std_obj::_hx_int((( (Float)(255) ) * (a342 + a242)));
HXDLIN(  37)																int blended42 = ((((a82 << 24) | (r65 << 16)) | (g65 << 8)) | b80);
HXDLIN(  37)																{
HXLINE(  37)																	int _hx_tmp116;
HXDLIN(  37)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																		_hx_tmp116 = ((((((blended42 >> 24) & 255) << 24) | ((blended42 & 255) << 16)) | (((blended42 >> 8) & 255) << 8)) | ((blended42 >> 16) & 255));
            																	}
            																	else {
HXLINE(  37)																		_hx_tmp116 = blended42;
            																	}
HXDLIN(  37)																	::iterMagic::Iimg_obj::set(undoImage12->image,location42,_hx_tmp116);
            																}
            															}
            															else {
HXLINE(  37)																::Dynamic this481 = undoImage12->image;
HXDLIN(  37)																int index28;
HXDLIN(  37)																if (undoImage12->useVirtualPos) {
HXLINE(  37)																	index28 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x37) - undoImage12->virtualX));
            																}
            																else {
HXLINE(  37)																	index28 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage12->width) + x37)) ));
            																}
HXDLIN(  37)																int _hx_tmp117;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	_hx_tmp117 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	_hx_tmp117 = c24;
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this481,index28,_hx_tmp117);
            															}
            														}
            														else {
HXLINE(  37)															if (forceClear4) {
HXLINE(  37)																::Dynamic this482 = undoImage12->image;
HXDLIN(  37)																int x38 = (dx8 - rectLeft4);
HXDLIN(  37)																int y34 = (dy8 - rectTop4);
HXDLIN(  37)																int index29;
HXDLIN(  37)																if (undoImage12->useVirtualPos) {
HXLINE(  37)																	index29 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x38) - undoImage12->virtualX));
            																}
            																else {
HXLINE(  37)																	index29 = ::Std_obj::_hx_int(( (Float)(((y34 * undoImage12->width) + x38)) ));
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this482,index29,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN(  37)								bool found4 = false;
HXDLIN(  37)								Float min22 = ( (Float)(0) );
HXDLIN(  37)								Float max2 = ( (Float)(0) );
HXDLIN(  37)								int a83 = 0;
HXDLIN(  37)								int r66 = 0;
HXDLIN(  37)								int g66 = 0;
HXDLIN(  37)								int b81 = 0;
HXDLIN(  37)								{
HXLINE(  37)									int _g_min8 = xIter34->start;
HXDLIN(  37)									int _g_max8 = xIter34->max;
HXDLIN(  37)									while((_g_min8 < _g_max8)){
HXLINE(  37)										_g_min8 = (_g_min8 + 1);
HXDLIN(  37)										int px3 = (_g_min8 - 1);
HXDLIN(  37)										Float pcx2 = (( (Float)(px3) ) - dx5);
HXLINE( 812)										found4 = false;
HXLINE(  37)										{
HXLINE(  37)											int _g_min9 = yIter34->start;
HXDLIN(  37)											int _g_max9 = yIter34->max;
HXDLIN(  37)											while((_g_min9 < _g_max9)){
HXLINE(  37)												_g_min9 = (_g_min9 + 1);
HXDLIN(  37)												int py3 = (_g_min9 - 1);
HXDLIN(  37)												Float pcy2 = (( (Float)(py3) ) - dy5);
HXDLIN(  37)												Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN(  37)												Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN(  37)												Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN(  37)												Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN(  37)												Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN(  37)												bool _hx_tmp118;
HXDLIN(  37)												bool _hx_tmp119;
HXDLIN(  37)												if ((ratioA2 >= 0)) {
HXLINE(  37)													_hx_tmp119 = (ratioB2 >= 0);
            												}
            												else {
HXLINE(  37)													_hx_tmp119 = false;
            												}
HXDLIN(  37)												if (_hx_tmp119) {
HXLINE(  37)													_hx_tmp118 = (ratioC2 >= 0);
            												}
            												else {
HXLINE(  37)													_hx_tmp118 = false;
            												}
HXDLIN(  37)												if (_hx_tmp118) {
HXLINE(  37)													int i80 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN(  37)													if ((i80 > 255)) {
HXLINE(  24)														i80 = 255;
            													}
HXLINE(  37)													if ((i80 < 0)) {
HXLINE(  25)														i80 = 0;
            													}
HXLINE( 821)													r66 = i80;
HXLINE(  37)													int i81 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN(  37)													if ((i81 > 255)) {
HXLINE(  24)														i81 = 255;
            													}
HXLINE(  37)													if ((i81 < 0)) {
HXLINE(  25)														i81 = 0;
            													}
HXLINE( 822)													g66 = i81;
HXLINE(  37)													int i82 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN(  37)													if ((i82 > 255)) {
HXLINE(  24)														i82 = 255;
            													}
HXLINE(  37)													if ((i82 < 0)) {
HXLINE(  25)														i82 = 0;
            													}
HXLINE( 823)													b81 = i82;
HXLINE(  37)													bool _hx_tmp120;
HXDLIN(  37)													if ((softAB == true)) {
HXLINE(  37)														_hx_tmp120 = (softDA == true);
            													}
            													else {
HXLINE(  37)														_hx_tmp120 = false;
            													}
HXDLIN(  37)													if (_hx_tmp120) {
HXLINE(  37)														if ((ratioA2 < ratioC2)) {
HXLINE(  37)															min22 = ratioA2;
            														}
            														else {
HXLINE(  37)															min22 = ratioC2;
            														}
HXDLIN(  37)														if ((ratioA2 > ratioB2)) {
HXLINE(  37)															max2 = ratioA2;
            														}
            														else {
HXLINE(  37)															max2 = ratioB2;
            														}
HXDLIN(  37)														if (!((max2 > ratioC2))) {
HXLINE(  37)															max2 = ratioC2;
            														}
HXLINE( 829)														max2 = ((( (Float)(1) ) - max2) / ( (Float)(2) ));
HXLINE(  37)														if (!((min22 < max2))) {
HXLINE(  37)															min22 = ((max2 + min22) / ( (Float)(2) ));
            														}
HXDLIN(  37)														int i83 = ::Std_obj::_hx_int(((( (Float)(aA2) ) * soft) * min22));
HXDLIN(  37)														if ((i83 > 255)) {
HXLINE(  24)															i83 = 255;
            														}
HXLINE(  37)														if ((i83 < 0)) {
HXLINE(  25)															i83 = 0;
            														}
HXLINE( 832)														a83 = i83;
HXLINE(  37)														{
HXLINE(  37)															int location43;
HXDLIN(  37)															if (this332->useVirtualPos) {
HXLINE(  37)																location43 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this332->virtualY) * ( (Float)(this332->width) )) + px3) - this332->virtualX));
            															}
            															else {
HXLINE(  37)																location43 = ::Std_obj::_hx_int(( (Float)(((py3 * this332->width) + px3)) ));
            															}
HXDLIN(  37)															bool _hx_tmp121;
HXDLIN(  37)															if (this332->transparent) {
HXLINE(  37)																_hx_tmp121 = (a83 < 254);
            															}
            															else {
HXLINE(  37)																_hx_tmp121 = false;
            															}
HXDLIN(  37)															if (_hx_tmp121) {
HXLINE(  37)																int this483 = ::iterMagic::Iimg_obj::get(this332->image,location43);
HXDLIN(  37)																int old28;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	old28 = ((((((this483 >> 24) & 255) << 24) | ((this483 & 255) << 16)) | (((this483 >> 8) & 255) << 8)) | ((this483 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	old28 = this483;
            																}
HXDLIN(  37)																int rhs28 = ((((a83 << 24) | (r66 << 16)) | (g66 << 8)) | b81);
HXDLIN(  37)																Float a144;
HXDLIN(  37)																int this484 = ((old28 >> 24) & 255);
HXDLIN(  37)																if ((this484 == 0)) {
HXLINE(  37)																	a144 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a144 = (( (Float)(this484) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r144;
HXDLIN(  37)																int this485 = ((old28 >> 16) & 255);
HXDLIN(  37)																if ((this485 == 0)) {
HXLINE(  37)																	r144 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r144 = (( (Float)(this485) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g144;
HXDLIN(  37)																int this486 = ((old28 >> 8) & 255);
HXDLIN(  37)																if ((this486 == 0)) {
HXLINE(  37)																	g144 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g144 = (( (Float)(this486) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b144;
HXDLIN(  37)																int this487 = (old28 & 255);
HXDLIN(  37)																if ((this487 == 0)) {
HXLINE(  37)																	b144 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b144 = (( (Float)(this487) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a243;
HXDLIN(  37)																int this488 = ((rhs28 >> 24) & 255);
HXDLIN(  37)																if ((this488 == 0)) {
HXLINE(  37)																	a243 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a243 = (( (Float)(this488) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r243;
HXDLIN(  37)																int this489 = ((rhs28 >> 16) & 255);
HXDLIN(  37)																if ((this489 == 0)) {
HXLINE(  37)																	r243 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r243 = (( (Float)(this489) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g243;
HXDLIN(  37)																int this490 = ((rhs28 >> 8) & 255);
HXDLIN(  37)																if ((this490 == 0)) {
HXLINE(  37)																	g243 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g243 = (( (Float)(this490) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b243;
HXDLIN(  37)																int this491 = (rhs28 & 255);
HXDLIN(  37)																if ((this491 == 0)) {
HXLINE(  37)																	b243 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b243 = (( (Float)(this491) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a343 = (a144 * (( (Float)(1) ) - a243));
HXDLIN(  37)																int r67 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r144 * a343) + (r243 * a243))));
HXDLIN(  37)																int g67 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g144 * a343) + (g243 * a243))));
HXDLIN(  37)																int b82 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b144 * a343) + (b243 * a243))));
HXDLIN(  37)																int a84 = ::Std_obj::_hx_int((( (Float)(255) ) * (a343 + a243)));
HXDLIN(  37)																int blended43 = ((((a84 << 24) | (r67 << 16)) | (g67 << 8)) | b82);
HXDLIN(  37)																{
HXLINE(  37)																	int _hx_tmp122;
HXDLIN(  37)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																		_hx_tmp122 = ((((((blended43 >> 24) & 255) << 24) | ((blended43 & 255) << 16)) | (((blended43 >> 8) & 255) << 8)) | ((blended43 >> 16) & 255));
            																	}
            																	else {
HXLINE(  37)																		_hx_tmp122 = blended43;
            																	}
HXDLIN(  37)																	::iterMagic::Iimg_obj::set(this332->image,location43,_hx_tmp122);
            																}
            															}
            															else {
HXLINE(  37)																int value28;
HXDLIN(  37)																if (this332->isLittle) {
HXLINE(  37)																	value28 = ((((a83 << 24) | (b81 << 16)) | (g66 << 8)) | r66);
            																}
            																else {
HXLINE(  37)																	value28 = ((((a83 << 24) | (r66 << 16)) | (g66 << 8)) | b81);
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this332->image,location43,value28);
            															}
            														}
            													}
HXDLIN(  37)													bool _hx_tmp123;
HXDLIN(  37)													bool _hx_tmp124;
HXDLIN(  37)													if ((softAB == true)) {
HXLINE(  37)														_hx_tmp124 = false;
            													}
            													else {
HXLINE(  37)														_hx_tmp124 = false;
            													}
HXDLIN(  37)													if (_hx_tmp124) {
HXLINE(  37)														_hx_tmp123 = (softDA == false);
            													}
            													else {
HXLINE(  37)														_hx_tmp123 = false;
            													}
HXDLIN(  37)													if (_hx_tmp123) {
HXLINE(  37)														if ((ratioB2 < ratioC2)) {
HXLINE(  37)															min22 = ratioB2;
            														}
            														else {
HXLINE(  37)															min22 = ratioC2;
            														}
HXDLIN(  37)														if ((ratioA2 > ratioB2)) {
HXLINE(  37)															max2 = ratioA2;
            														}
            														else {
HXLINE(  37)															max2 = ratioB2;
            														}
HXDLIN(  37)														if (!((max2 > ratioC2))) {
HXLINE(  37)															max2 = ratioC2;
            														}
HXLINE( 842)														max2 = ((( (Float)(1) ) - max2) / ( (Float)(2) ));
HXLINE(  37)														if (!((min22 < max2))) {
HXLINE(  37)															min22 = ((max2 + min22) / ( (Float)(2) ));
            														}
HXDLIN(  37)														int i84 = ::Std_obj::_hx_int(((( (Float)(aA2) ) * soft) * min22));
HXDLIN(  37)														if ((i84 > 255)) {
HXLINE(  24)															i84 = 255;
            														}
HXLINE(  37)														if ((i84 < 0)) {
HXLINE(  25)															i84 = 0;
            														}
HXLINE( 845)														a83 = i84;
HXLINE(  37)														{
HXLINE(  37)															int location44;
HXDLIN(  37)															if (this332->useVirtualPos) {
HXLINE(  37)																location44 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this332->virtualY) * ( (Float)(this332->width) )) + px3) - this332->virtualX));
            															}
            															else {
HXLINE(  37)																location44 = ::Std_obj::_hx_int(( (Float)(((py3 * this332->width) + px3)) ));
            															}
HXDLIN(  37)															bool _hx_tmp125;
HXDLIN(  37)															if (this332->transparent) {
HXLINE(  37)																_hx_tmp125 = (a83 < 254);
            															}
            															else {
HXLINE(  37)																_hx_tmp125 = false;
            															}
HXDLIN(  37)															if (_hx_tmp125) {
HXLINE(  37)																int this492 = ::iterMagic::Iimg_obj::get(this332->image,location44);
HXDLIN(  37)																int old29;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	old29 = ((((((this492 >> 24) & 255) << 24) | ((this492 & 255) << 16)) | (((this492 >> 8) & 255) << 8)) | ((this492 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	old29 = this492;
            																}
HXDLIN(  37)																int rhs29 = ((((a83 << 24) | (r66 << 16)) | (g66 << 8)) | b81);
HXDLIN(  37)																Float a145;
HXDLIN(  37)																int this493 = ((old29 >> 24) & 255);
HXDLIN(  37)																if ((this493 == 0)) {
HXLINE(  37)																	a145 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a145 = (( (Float)(this493) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r145;
HXDLIN(  37)																int this494 = ((old29 >> 16) & 255);
HXDLIN(  37)																if ((this494 == 0)) {
HXLINE(  37)																	r145 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r145 = (( (Float)(this494) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g145;
HXDLIN(  37)																int this495 = ((old29 >> 8) & 255);
HXDLIN(  37)																if ((this495 == 0)) {
HXLINE(  37)																	g145 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g145 = (( (Float)(this495) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b145;
HXDLIN(  37)																int this496 = (old29 & 255);
HXDLIN(  37)																if ((this496 == 0)) {
HXLINE(  37)																	b145 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b145 = (( (Float)(this496) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a244;
HXDLIN(  37)																int this497 = ((rhs29 >> 24) & 255);
HXDLIN(  37)																if ((this497 == 0)) {
HXLINE(  37)																	a244 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a244 = (( (Float)(this497) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r244;
HXDLIN(  37)																int this498 = ((rhs29 >> 16) & 255);
HXDLIN(  37)																if ((this498 == 0)) {
HXLINE(  37)																	r244 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r244 = (( (Float)(this498) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g244;
HXDLIN(  37)																int this499 = ((rhs29 >> 8) & 255);
HXDLIN(  37)																if ((this499 == 0)) {
HXLINE(  37)																	g244 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g244 = (( (Float)(this499) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b244;
HXDLIN(  37)																int this500 = (rhs29 & 255);
HXDLIN(  37)																if ((this500 == 0)) {
HXLINE(  37)																	b244 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b244 = (( (Float)(this500) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a344 = (a145 * (( (Float)(1) ) - a244));
HXDLIN(  37)																int r68 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r145 * a344) + (r244 * a244))));
HXDLIN(  37)																int g68 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g145 * a344) + (g244 * a244))));
HXDLIN(  37)																int b83 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b145 * a344) + (b244 * a244))));
HXDLIN(  37)																int a85 = ::Std_obj::_hx_int((( (Float)(255) ) * (a344 + a244)));
HXDLIN(  37)																int blended44 = ((((a85 << 24) | (r68 << 16)) | (g68 << 8)) | b83);
HXDLIN(  37)																{
HXLINE(  37)																	int _hx_tmp126;
HXDLIN(  37)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																		_hx_tmp126 = ((((((blended44 >> 24) & 255) << 24) | ((blended44 & 255) << 16)) | (((blended44 >> 8) & 255) << 8)) | ((blended44 >> 16) & 255));
            																	}
            																	else {
HXLINE(  37)																		_hx_tmp126 = blended44;
            																	}
HXDLIN(  37)																	::iterMagic::Iimg_obj::set(this332->image,location44,_hx_tmp126);
            																}
            															}
            															else {
HXLINE(  37)																int value29;
HXDLIN(  37)																if (this332->isLittle) {
HXLINE(  37)																	value29 = ((((a83 << 24) | (b81 << 16)) | (g66 << 8)) | r66);
            																}
            																else {
HXLINE(  37)																	value29 = ((((a83 << 24) | (r66 << 16)) | (g66 << 8)) | b81);
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this332->image,location44,value29);
            															}
            														}
            													}
HXLINE( 850)													found4 = true;
            												}
            												else {
HXLINE(  37)													if (found4) {
HXLINE(  37)														goto _hx_goto_73;
            													}
            												}
            											}
            											_hx_goto_73:;
            										}
            									}
            								}
HXDLIN(  37)								if ((hasHit1 == false)) {
HXLINE(  37)									 ::pi_xy::algo::HitTri v19 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx3,by3,dx5,dy5,true);
HXDLIN(  37)									if (hasUndo4) {
HXLINE(  37)										v19->undoImage = undoImage12;
HXDLIN(  37)										v19->undoX = xIter34->start;
HXDLIN(  37)										v19->undoY = yIter34->start;
            									}
            								}
            							}
HXDLIN(  37)							{
HXLINE(  37)								bool hasUndo5 = true;
HXDLIN(  37)								int aA3 = ((color3 >> 24) & 255);
HXDLIN(  37)								int rA3 = ((color3 >> 16) & 255);
HXDLIN(  37)								int gA3 = ((color3 >> 8) & 255);
HXDLIN(  37)								int bA3 = (color3 & 255);
HXDLIN(  37)								Float bcx3 = (cx3 - dx5);
HXDLIN(  37)								Float bcy3 = (cy3 - dy5);
HXDLIN(  37)								Float acx3 = (bx3 - dx5);
HXDLIN(  37)								Float acy3 = (by3 - dy5);
HXDLIN(  37)								Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN(  37)								Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN(  37)								Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN(  37)								Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN(  37)								 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN(  37)								if ((bx3 > cx3)) {
HXLINE(  37)									if ((bx3 > dx5)) {
HXLINE(  37)										int min23;
HXDLIN(  37)										if ((cx3 > dx5)) {
HXLINE(  37)											min23 = ::Math_obj::floor(dx5);
            										}
            										else {
HXLINE(  37)											min23 = ::Math_obj::floor(cx3);
            										}
HXDLIN(  37)										int ii_min56 = min23;
HXDLIN(  37)										int ii_max56 = ::Math_obj::ceil(bx3);
HXDLIN(  37)										xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            									}
            									else {
HXLINE(  37)										int ii_min57 = ::Math_obj::floor(cx3);
HXDLIN(  37)										int ii_max57 = ::Math_obj::ceil(dx5);
HXDLIN(  37)										xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            									}
            								}
            								else {
HXLINE(  37)									if ((cx3 > dx5)) {
HXLINE(  37)										int min24;
HXDLIN(  37)										if ((bx3 > dx5)) {
HXLINE(  37)											min24 = ::Math_obj::floor(dx5);
            										}
            										else {
HXLINE(  37)											min24 = ::Math_obj::ceil(bx3);
            										}
HXDLIN(  37)										int ii_min58 = min24;
HXDLIN(  37)										int ii_max58 = ::Math_obj::ceil(cx3);
HXDLIN(  37)										xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            									}
            									else {
HXLINE(  37)										int ii_min59 = ::Math_obj::floor(bx3);
HXDLIN(  37)										int ii_max59 = ::Math_obj::ceil(dx5);
HXDLIN(  37)										xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            									}
            								}
HXDLIN(  37)								 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN(  37)								if ((by3 > cy3)) {
HXLINE(  37)									if ((by3 > dy5)) {
HXLINE(  37)										int min25;
HXDLIN(  37)										if ((cy3 > dy5)) {
HXLINE(  37)											min25 = ::Math_obj::floor(dy5);
            										}
            										else {
HXLINE(  37)											min25 = ::Math_obj::floor(cy3);
            										}
HXDLIN(  37)										int ii_min60 = min25;
HXDLIN(  37)										int ii_max60 = ::Math_obj::ceil(by3);
HXDLIN(  37)										yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            									}
            									else {
HXLINE(  37)										int ii_min61 = ::Math_obj::floor(cy3);
HXDLIN(  37)										int ii_max61 = ::Math_obj::ceil(dy5);
HXDLIN(  37)										yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            									}
            								}
            								else {
HXLINE(  37)									if ((cy3 > dy5)) {
HXLINE(  37)										int min26;
HXDLIN(  37)										if ((by3 > dy5)) {
HXLINE(  37)											min26 = ::Math_obj::floor(dy5);
            										}
            										else {
HXLINE(  37)											min26 = ::Math_obj::ceil(by3);
            										}
HXDLIN(  37)										int ii_min62 = min26;
HXDLIN(  37)										int ii_max62 = ::Math_obj::ceil(cy3);
HXDLIN(  37)										yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            									}
            									else {
HXLINE(  37)										int ii_min63 = ::Math_obj::floor(by3);
HXDLIN(  37)										int ii_max63 = ::Math_obj::ceil(dy5);
HXDLIN(  37)										yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            									}
            								}
HXDLIN(  37)								 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN(  37)								if (hasUndo5) {
HXLINE(  37)									int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN(  37)									int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN(  37)									 ::Dynamic imageType5 = null();
HXDLIN(  37)									 ::pi_xy::ImageStruct this501 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  37)									if (::hx::IsNull( imageType5 )) {
HXLINE(  54)										imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            									}
HXLINE(  37)									::Dynamic undoImage16;
HXDLIN(  37)									switch((int)(( (int)(imageType5) ))){
            										case (int)0: {
HXLINE(  37)											 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::BytesImg b84 = byt5;
HXDLIN(  37)											{
HXLINE(  37)												b84->width = width5;
HXDLIN(  37)												b84->height = height5;
HXDLIN(  37)												b84->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  37)												b84->data = ::haxe::io::Bytes_obj::alloc((b84->length * 4));
HXDLIN(  37)												{
HXLINE(  37)													int len10 = b84->length;
HXDLIN(  37)													int w5 = 0;
HXDLIN(  37)													{
HXLINE(  37)														int _g108 = 0;
HXDLIN(  37)														int _g109 = b84->height;
HXDLIN(  37)														while((_g108 < _g109)){
HXLINE(  37)															_g108 = (_g108 + 1);
HXDLIN(  37)															int y35 = (_g108 - 1);
HXDLIN(  37)															{
HXLINE(  37)																int _g110 = 0;
HXDLIN(  37)																int _g111 = b84->width;
HXDLIN(  37)																while((_g110 < _g111)){
HXLINE(  37)																	_g110 = (_g110 + 1);
HXDLIN(  37)																	int x39 = (_g110 - 1);
HXDLIN(  37)																	{
HXLINE(  37)																		w5 = (w5 + 1);
HXDLIN(  37)																		b84->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  37)																	{
HXLINE(  37)																		w5 = (w5 + 1);
HXDLIN(  37)																		b84->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  37)																	{
HXLINE(  37)																		w5 = (w5 + 1);
HXDLIN(  37)																		b84->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN(  37)																	{
HXLINE(  37)																		w5 = (w5 + 1);
HXDLIN(  37)																		b84->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  37)											undoImage16 = b84;
            										}
            										break;
            										case (int)1: {
HXLINE(  37)											 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::ArrIntImg a86 = arrI5;
HXDLIN(  37)											{
HXLINE(  37)												a86->width = width5;
HXDLIN(  37)												a86->height = height5;
HXDLIN(  37)												a86->data = ::Array_obj< int >::__new(0);
HXDLIN(  37)												a86->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  37)												{
HXLINE(  37)													int _g112 = 0;
HXDLIN(  37)													int _g113 = a86->length;
HXDLIN(  37)													while((_g112 < _g113)){
HXLINE(  37)														_g112 = (_g112 + 1);
HXDLIN(  37)														int i85 = (_g112 - 1);
HXDLIN(  37)														a86->data[i85] = 0;
            													}
            												}
            											}
HXDLIN(  37)											undoImage16 = a86;
            										}
            										break;
            										case (int)2: {
HXLINE(  37)											 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::U32ArrImg b85 = u32a5;
HXDLIN(  37)											{
HXLINE(  37)												b85->width = width5;
HXDLIN(  37)												b85->height = height5;
HXDLIN(  37)												b85->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  37)												int size5 = (b85->length * 4);
HXDLIN(  37)												b85->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN(  37)												{
HXLINE(  37)													int _g114 = 0;
HXDLIN(  37)													int _g115 = b85->length;
HXDLIN(  37)													while((_g114 < _g115)){
HXLINE(  37)														_g114 = (_g114 + 1);
HXDLIN(  37)														int i86 = (_g114 - 1);
HXDLIN(  37)														{
HXLINE(  37)															 ::haxe::io::ArrayBufferViewImpl this502 = b85->data;
HXDLIN(  37)															bool undoImage17;
HXDLIN(  37)															if ((i86 >= 0)) {
HXLINE(  37)																undoImage17 = (i86 < (this502->byteLength >> 2));
            															}
            															else {
HXLINE(  37)																undoImage17 = false;
            															}
HXDLIN(  37)															if (undoImage17) {
HXLINE(  37)																 ::haxe::io::Bytes _this5 = this502->bytes;
HXDLIN(  37)																int pos5 = ((i86 << 2) + this502->byteOffset);
HXDLIN(  37)																_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN(  37)																_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN(  37)																_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN(  37)																_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
HXDLIN(  37)											undoImage16 = b85;
            										}
            										break;
            										case (int)3: {
HXLINE(  37)											 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::VecIntImg v20 = vec5;
HXDLIN(  37)											{
HXLINE(  37)												v20->width = width5;
HXDLIN(  37)												v20->height = height5;
HXDLIN(  37)												v20->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  37)												v20->data = ::Array_obj< int >::__new(v20->length);
HXDLIN(  37)												{
HXLINE(  37)													int _g116 = 0;
HXDLIN(  37)													int _g117 = v20->length;
HXDLIN(  37)													while((_g116 < _g117)){
HXLINE(  37)														_g116 = (_g116 + 1);
HXDLIN(  37)														int i87 = (_g116 - 1);
HXDLIN(  37)														v20->data->__unsafe_set(i87,0);
            													}
            												}
            											}
HXDLIN(  37)											undoImage16 = v20;
            										}
            										break;
            										case (int)4: {
HXLINE(  37)											 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  37)											 ::iterMagic::StackIntImg b86 = sInt5;
HXDLIN(  37)											{
HXLINE(  37)												b86->width = width5;
HXDLIN(  37)												b86->height = height5;
HXDLIN(  37)												b86->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  37)												b86->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  37)												{
HXLINE(  37)													int len11 = b86->length;
HXDLIN(  37)													 ::haxe::ds::GenericStack_Int d5 = b86->data;
HXDLIN(  37)													if (::hx::IsNull( d5->head )) {
HXLINE(  37)														int _g118 = 0;
HXDLIN(  37)														int _g119 = len11;
HXDLIN(  37)														while((_g118 < _g119)){
HXLINE(  37)															_g118 = (_g118 + 1);
HXDLIN(  37)															int i88 = (_g118 - 1);
HXDLIN(  37)															d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            														}
            													}
            													else {
HXLINE(  37)														int _g120 = 0;
HXDLIN(  37)														int _g121 = len11;
HXDLIN(  37)														while((_g120 < _g121)){
HXLINE(  37)															_g120 = (_g120 + 1);
HXDLIN(  37)															int i89 = (_g120 - 1);
HXDLIN(  37)															{
HXLINE(  37)																 ::haxe::ds::GenericCell_Int l5 = b86->data->head;
HXDLIN(  37)																 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN(  37)																{
HXLINE(  37)																	int _g122 = 0;
HXDLIN(  37)																	int _g123 = i89;
HXDLIN(  37)																	while((_g122 < _g123)){
HXLINE(  37)																		_g122 = (_g122 + 1);
HXDLIN(  37)																		int i90 = (_g122 - 1);
HXLINE( 345)																		prev5 = l5;
HXLINE( 346)																		l5 = l5->next;
            																	}
            																}
HXLINE(  37)																if (::hx::IsNull( prev5 )) {
HXLINE(  37)																	b86->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  37)																	l5 = null();
            																}
            																else {
HXLINE(  37)																	prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  37)																	l5 = null();
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  37)											undoImage16 = b86;
            										}
            										break;
            									}
HXDLIN(  37)									this501->image = undoImage16;
HXDLIN(  37)									this501->width = width5;
HXDLIN(  37)									this501->height = height5;
HXDLIN(  37)									this501->imageType = ( (int)(imageType5) );
HXDLIN(  37)									undoImage15 = this501;
HXDLIN(  37)									{
HXLINE(  37)										int rectLeft5 = xIter35->start;
HXDLIN(  37)										int rectTop5 = yIter35->start;
HXDLIN(  37)										int rectRight5 = xIter35->max;
HXDLIN(  37)										bool forceClear5 = false;
HXDLIN(  37)										{
HXLINE(  37)											int _g124 = rectTop5;
HXDLIN(  37)											int _g125 = yIter35->max;
HXDLIN(  37)											while((_g124 < _g125)){
HXLINE(  37)												_g124 = (_g124 + 1);
HXDLIN(  37)												int dy9 = (_g124 - 1);
HXDLIN(  37)												{
HXLINE(  37)													int _g126 = rectLeft5;
HXDLIN(  37)													int _g127 = rectRight5;
HXDLIN(  37)													while((_g126 < _g127)){
HXLINE(  37)														_g126 = (_g126 + 1);
HXDLIN(  37)														int dx9 = (_g126 - 1);
HXDLIN(  37)														::Dynamic this503 = this332->image;
HXDLIN(  37)														int index30;
HXDLIN(  37)														if (this332->useVirtualPos) {
HXLINE(  37)															index30 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this332->virtualY) * ( (Float)(this332->width) )) + dx9) - this332->virtualX));
            														}
            														else {
HXLINE(  37)															index30 = ::Std_obj::_hx_int(( (Float)(((dy9 * this332->width) + dx9)) ));
            														}
HXDLIN(  37)														int c25 = ::iterMagic::Iimg_obj::get(this503,index30);
HXDLIN(  37)														int col5;
HXDLIN(  37)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)															col5 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            														}
            														else {
HXLINE(  37)															col5 = c25;
            														}
HXDLIN(  37)														bool _hx_tmp127;
HXDLIN(  37)														if (this332->useMask) {
HXLINE(  37)															_hx_tmp127 = ::hx::IsNotNull( this332->mask );
            														}
            														else {
HXLINE(  37)															_hx_tmp127 = false;
            														}
HXDLIN(  37)														if (_hx_tmp127) {
HXLINE(  37)															 ::pi_xy::ImageStruct this504 = this332->mask;
HXDLIN(  37)															::Dynamic this505 = this504->image;
HXDLIN(  37)															int index31;
HXDLIN(  37)															if (this504->useVirtualPos) {
HXLINE(  37)																index31 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this504->virtualY) * ( (Float)(this504->width) )) + dx9) - this504->virtualX));
            															}
            															else {
HXLINE(  37)																index31 = ::Std_obj::_hx_int(( (Float)(((dy9 * this504->width) + dx9)) ));
            															}
HXDLIN(  37)															int c26 = ::iterMagic::Iimg_obj::get(this505,index31);
HXDLIN(  37)															int v21;
HXDLIN(  37)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																v21 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            															}
            															else {
HXLINE(  37)																v21 = c26;
            															}
HXDLIN(  37)															int maskPixel5 = v21;
HXDLIN(  37)															int this506 = col5;
HXDLIN(  37)															if ((maskPixel5 == 0)) {
HXLINE(  37)																col5 = this506;
            															}
            															else {
HXLINE(  37)																Float m05;
HXDLIN(  37)																int this507 = ((maskPixel5 >> 24) & 255);
HXDLIN(  37)																if ((this507 == 0)) {
HXLINE(  37)																	m05 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m05 = (( (Float)(this507) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float m15;
HXDLIN(  37)																int this508 = ((maskPixel5 >> 16) & 255);
HXDLIN(  37)																if ((this508 == 0)) {
HXLINE(  37)																	m15 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m15 = (( (Float)(this508) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float m25;
HXDLIN(  37)																int this509 = ((maskPixel5 >> 8) & 255);
HXDLIN(  37)																if ((this509 == 0)) {
HXLINE(  37)																	m25 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m25 = (( (Float)(this509) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float m35;
HXDLIN(  37)																int this510 = (maskPixel5 & 255);
HXDLIN(  37)																if ((this510 == 0)) {
HXLINE(  37)																	m35 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	m35 = (( (Float)(this510) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this506 >> 24) & 255)) )));
HXDLIN(  37)																int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this506 >> 16) & 255)) )));
HXDLIN(  37)																int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this506 >> 8) & 255)) )));
HXDLIN(  37)																int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this506 & 255)) )));
HXDLIN(  37)																col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN(  37)														if ((col5 != 0)) {
HXLINE(  37)															int x40 = (dx9 - rectLeft5);
HXDLIN(  37)															int y36 = (dy9 - rectTop5);
HXDLIN(  37)															int c27 = col5;
HXDLIN(  37)															bool _hx_tmp128;
HXDLIN(  37)															if ((((c27 >> 24) & 255) < 254)) {
HXLINE(  37)																_hx_tmp128 = undoImage15->transparent;
            															}
            															else {
HXLINE(  37)																_hx_tmp128 = false;
            															}
HXDLIN(  37)															if (_hx_tmp128) {
HXLINE(  37)																int location45;
HXDLIN(  37)																if (undoImage15->useVirtualPos) {
HXLINE(  37)																	location45 = ::Std_obj::_hx_int(((((( (Float)(y36) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x40) - undoImage15->virtualX));
            																}
            																else {
HXLINE(  37)																	location45 = ::Std_obj::_hx_int(( (Float)(((y36 * undoImage15->width) + x40)) ));
            																}
HXDLIN(  37)																int this511 = ::iterMagic::Iimg_obj::get(undoImage15->image,location45);
HXDLIN(  37)																int this512;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	this512 = ((((((this511 >> 24) & 255) << 24) | ((this511 & 255) << 16)) | (((this511 >> 8) & 255) << 8)) | ((this511 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	this512 = this511;
            																}
HXDLIN(  37)																Float a146;
HXDLIN(  37)																int this513 = ((this512 >> 24) & 255);
HXDLIN(  37)																if ((this513 == 0)) {
HXLINE(  37)																	a146 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a146 = (( (Float)(this513) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r146;
HXDLIN(  37)																int this514 = ((this512 >> 16) & 255);
HXDLIN(  37)																if ((this514 == 0)) {
HXLINE(  37)																	r146 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r146 = (( (Float)(this514) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g146;
HXDLIN(  37)																int this515 = ((this512 >> 8) & 255);
HXDLIN(  37)																if ((this515 == 0)) {
HXLINE(  37)																	g146 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g146 = (( (Float)(this515) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b146;
HXDLIN(  37)																int this516 = (this512 & 255);
HXDLIN(  37)																if ((this516 == 0)) {
HXLINE(  37)																	b146 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b146 = (( (Float)(this516) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a245;
HXDLIN(  37)																int this517 = ((col5 >> 24) & 255);
HXDLIN(  37)																if ((this517 == 0)) {
HXLINE(  37)																	a245 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a245 = (( (Float)(this517) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r245;
HXDLIN(  37)																int this518 = ((col5 >> 16) & 255);
HXDLIN(  37)																if ((this518 == 0)) {
HXLINE(  37)																	r245 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r245 = (( (Float)(this518) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g245;
HXDLIN(  37)																int this519 = ((col5 >> 8) & 255);
HXDLIN(  37)																if ((this519 == 0)) {
HXLINE(  37)																	g245 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g245 = (( (Float)(this519) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b245;
HXDLIN(  37)																int this520 = (col5 & 255);
HXDLIN(  37)																if ((this520 == 0)) {
HXLINE(  37)																	b245 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b245 = (( (Float)(this520) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a345 = (a146 * (( (Float)(1) ) - a245));
HXDLIN(  37)																int r69 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r146 * a345) + (r245 * a245))));
HXDLIN(  37)																int g69 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g146 * a345) + (g245 * a245))));
HXDLIN(  37)																int b87 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b146 * a345) + (b245 * a245))));
HXDLIN(  37)																int a87 = ::Std_obj::_hx_int((( (Float)(255) ) * (a345 + a245)));
HXDLIN(  37)																int blended45 = ((((a87 << 24) | (r69 << 16)) | (g69 << 8)) | b87);
HXDLIN(  37)																{
HXLINE(  37)																	int _hx_tmp129;
HXDLIN(  37)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																		_hx_tmp129 = ((((((blended45 >> 24) & 255) << 24) | ((blended45 & 255) << 16)) | (((blended45 >> 8) & 255) << 8)) | ((blended45 >> 16) & 255));
            																	}
            																	else {
HXLINE(  37)																		_hx_tmp129 = blended45;
            																	}
HXDLIN(  37)																	::iterMagic::Iimg_obj::set(undoImage15->image,location45,_hx_tmp129);
            																}
            															}
            															else {
HXLINE(  37)																::Dynamic this521 = undoImage15->image;
HXDLIN(  37)																int index32;
HXDLIN(  37)																if (undoImage15->useVirtualPos) {
HXLINE(  37)																	index32 = ::Std_obj::_hx_int(((((( (Float)(y36) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x40) - undoImage15->virtualX));
            																}
            																else {
HXLINE(  37)																	index32 = ::Std_obj::_hx_int(( (Float)(((y36 * undoImage15->width) + x40)) ));
            																}
HXDLIN(  37)																int _hx_tmp130;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	_hx_tmp130 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	_hx_tmp130 = c27;
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this521,index32,_hx_tmp130);
            															}
            														}
            														else {
HXLINE(  37)															if (forceClear5) {
HXLINE(  37)																::Dynamic this522 = undoImage15->image;
HXDLIN(  37)																int x41 = (dx9 - rectLeft5);
HXDLIN(  37)																int y37 = (dy9 - rectTop5);
HXDLIN(  37)																int index33;
HXDLIN(  37)																if (undoImage15->useVirtualPos) {
HXLINE(  37)																	index33 = ::Std_obj::_hx_int(((((( (Float)(y37) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x41) - undoImage15->virtualX));
            																}
            																else {
HXLINE(  37)																	index33 = ::Std_obj::_hx_int(( (Float)(((y37 * undoImage15->width) + x41)) ));
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this522,index33,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN(  37)								bool found5 = false;
HXDLIN(  37)								Float min27 = ( (Float)(0) );
HXDLIN(  37)								Float max3 = ( (Float)(0) );
HXDLIN(  37)								int a88 = 0;
HXDLIN(  37)								int r70 = 0;
HXDLIN(  37)								int g70 = 0;
HXDLIN(  37)								int b88 = 0;
HXDLIN(  37)								{
HXLINE(  37)									int _g_min10 = xIter35->start;
HXDLIN(  37)									int _g_max10 = xIter35->max;
HXDLIN(  37)									while((_g_min10 < _g_max10)){
HXLINE(  37)										_g_min10 = (_g_min10 + 1);
HXDLIN(  37)										int px4 = (_g_min10 - 1);
HXDLIN(  37)										Float pcx3 = (( (Float)(px4) ) - dx5);
HXLINE( 812)										found5 = false;
HXLINE(  37)										{
HXLINE(  37)											int _g_min11 = yIter35->start;
HXDLIN(  37)											int _g_max11 = yIter35->max;
HXDLIN(  37)											while((_g_min11 < _g_max11)){
HXLINE(  37)												_g_min11 = (_g_min11 + 1);
HXDLIN(  37)												int py4 = (_g_min11 - 1);
HXDLIN(  37)												Float pcy3 = (( (Float)(py4) ) - dy5);
HXDLIN(  37)												Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN(  37)												Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN(  37)												Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN(  37)												Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN(  37)												Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  37)												bool _hx_tmp131;
HXDLIN(  37)												bool _hx_tmp132;
HXDLIN(  37)												if ((ratioA3 >= 0)) {
HXLINE(  37)													_hx_tmp132 = (ratioB3 >= 0);
            												}
            												else {
HXLINE(  37)													_hx_tmp132 = false;
            												}
HXDLIN(  37)												if (_hx_tmp132) {
HXLINE(  37)													_hx_tmp131 = (ratioC3 >= 0);
            												}
            												else {
HXLINE(  37)													_hx_tmp131 = false;
            												}
HXDLIN(  37)												if (_hx_tmp131) {
HXLINE(  37)													int i91 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN(  37)													if ((i91 > 255)) {
HXLINE(  24)														i91 = 255;
            													}
HXLINE(  37)													if ((i91 < 0)) {
HXLINE(  25)														i91 = 0;
            													}
HXLINE( 821)													r70 = i91;
HXLINE(  37)													int i92 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN(  37)													if ((i92 > 255)) {
HXLINE(  24)														i92 = 255;
            													}
HXLINE(  37)													if ((i92 < 0)) {
HXLINE(  25)														i92 = 0;
            													}
HXLINE( 822)													g70 = i92;
HXLINE(  37)													int i93 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN(  37)													if ((i93 > 255)) {
HXLINE(  24)														i93 = 255;
            													}
HXLINE(  37)													if ((i93 < 0)) {
HXLINE(  25)														i93 = 0;
            													}
HXLINE( 823)													b88 = i93;
HXLINE(  37)													bool _hx_tmp133;
HXDLIN(  37)													bool _hx_tmp134;
HXDLIN(  37)													if ((softBC == true)) {
HXLINE(  37)														_hx_tmp134 = (softCD == false);
            													}
            													else {
HXLINE(  37)														_hx_tmp134 = false;
            													}
HXDLIN(  37)													if (_hx_tmp134) {
HXLINE(  37)														_hx_tmp133 = false;
            													}
            													else {
HXLINE(  37)														_hx_tmp133 = false;
            													}
HXDLIN(  37)													if (_hx_tmp133) {
HXLINE(  37)														if ((ratioA3 < ratioC3)) {
HXLINE(  37)															min27 = ratioA3;
            														}
            														else {
HXLINE(  37)															min27 = ratioC3;
            														}
HXDLIN(  37)														if ((ratioA3 > ratioB3)) {
HXLINE(  37)															max3 = ratioA3;
            														}
            														else {
HXLINE(  37)															max3 = ratioB3;
            														}
HXDLIN(  37)														if (!((max3 > ratioC3))) {
HXLINE(  37)															max3 = ratioC3;
            														}
HXLINE( 829)														max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE(  37)														if (!((min27 < max3))) {
HXLINE(  37)															min27 = ((max3 + min27) / ( (Float)(2) ));
            														}
HXDLIN(  37)														int i94 = ::Std_obj::_hx_int(((( (Float)(aA3) ) * soft) * min27));
HXDLIN(  37)														if ((i94 > 255)) {
HXLINE(  24)															i94 = 255;
            														}
HXLINE(  37)														if ((i94 < 0)) {
HXLINE(  25)															i94 = 0;
            														}
HXLINE( 832)														a88 = i94;
HXLINE(  37)														{
HXLINE(  37)															int location46;
HXDLIN(  37)															if (this332->useVirtualPos) {
HXLINE(  37)																location46 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - this332->virtualY) * ( (Float)(this332->width) )) + px4) - this332->virtualX));
            															}
            															else {
HXLINE(  37)																location46 = ::Std_obj::_hx_int(( (Float)(((py4 * this332->width) + px4)) ));
            															}
HXDLIN(  37)															bool _hx_tmp135;
HXDLIN(  37)															if (this332->transparent) {
HXLINE(  37)																_hx_tmp135 = (a88 < 254);
            															}
            															else {
HXLINE(  37)																_hx_tmp135 = false;
            															}
HXDLIN(  37)															if (_hx_tmp135) {
HXLINE(  37)																int this523 = ::iterMagic::Iimg_obj::get(this332->image,location46);
HXDLIN(  37)																int old30;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	old30 = ((((((this523 >> 24) & 255) << 24) | ((this523 & 255) << 16)) | (((this523 >> 8) & 255) << 8)) | ((this523 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	old30 = this523;
            																}
HXDLIN(  37)																int rhs30 = ((((a88 << 24) | (r70 << 16)) | (g70 << 8)) | b88);
HXDLIN(  37)																Float a147;
HXDLIN(  37)																int this524 = ((old30 >> 24) & 255);
HXDLIN(  37)																if ((this524 == 0)) {
HXLINE(  37)																	a147 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a147 = (( (Float)(this524) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r147;
HXDLIN(  37)																int this525 = ((old30 >> 16) & 255);
HXDLIN(  37)																if ((this525 == 0)) {
HXLINE(  37)																	r147 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r147 = (( (Float)(this525) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g147;
HXDLIN(  37)																int this526 = ((old30 >> 8) & 255);
HXDLIN(  37)																if ((this526 == 0)) {
HXLINE(  37)																	g147 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g147 = (( (Float)(this526) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b147;
HXDLIN(  37)																int this527 = (old30 & 255);
HXDLIN(  37)																if ((this527 == 0)) {
HXLINE(  37)																	b147 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b147 = (( (Float)(this527) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a246;
HXDLIN(  37)																int this528 = ((rhs30 >> 24) & 255);
HXDLIN(  37)																if ((this528 == 0)) {
HXLINE(  37)																	a246 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a246 = (( (Float)(this528) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r246;
HXDLIN(  37)																int this529 = ((rhs30 >> 16) & 255);
HXDLIN(  37)																if ((this529 == 0)) {
HXLINE(  37)																	r246 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r246 = (( (Float)(this529) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g246;
HXDLIN(  37)																int this530 = ((rhs30 >> 8) & 255);
HXDLIN(  37)																if ((this530 == 0)) {
HXLINE(  37)																	g246 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g246 = (( (Float)(this530) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b246;
HXDLIN(  37)																int this531 = (rhs30 & 255);
HXDLIN(  37)																if ((this531 == 0)) {
HXLINE(  37)																	b246 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b246 = (( (Float)(this531) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a346 = (a147 * (( (Float)(1) ) - a246));
HXDLIN(  37)																int r71 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r147 * a346) + (r246 * a246))));
HXDLIN(  37)																int g71 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g147 * a346) + (g246 * a246))));
HXDLIN(  37)																int b89 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b147 * a346) + (b246 * a246))));
HXDLIN(  37)																int a89 = ::Std_obj::_hx_int((( (Float)(255) ) * (a346 + a246)));
HXDLIN(  37)																int blended46 = ((((a89 << 24) | (r71 << 16)) | (g71 << 8)) | b89);
HXDLIN(  37)																{
HXLINE(  37)																	int _hx_tmp136;
HXDLIN(  37)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																		_hx_tmp136 = ((((((blended46 >> 24) & 255) << 24) | ((blended46 & 255) << 16)) | (((blended46 >> 8) & 255) << 8)) | ((blended46 >> 16) & 255));
            																	}
            																	else {
HXLINE(  37)																		_hx_tmp136 = blended46;
            																	}
HXDLIN(  37)																	::iterMagic::Iimg_obj::set(this332->image,location46,_hx_tmp136);
            																}
            															}
            															else {
HXLINE(  37)																int value30;
HXDLIN(  37)																if (this332->isLittle) {
HXLINE(  37)																	value30 = ((((a88 << 24) | (b88 << 16)) | (g70 << 8)) | r70);
            																}
            																else {
HXLINE(  37)																	value30 = ((((a88 << 24) | (r70 << 16)) | (g70 << 8)) | b88);
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this332->image,location46,value30);
            															}
            														}
            													}
HXDLIN(  37)													bool _hx_tmp137;
HXDLIN(  37)													if ((softBC == true)) {
HXLINE(  37)														_hx_tmp137 = (softCD == true);
            													}
            													else {
HXLINE(  37)														_hx_tmp137 = false;
            													}
HXDLIN(  37)													if (_hx_tmp137) {
HXLINE(  37)														if ((ratioB3 < ratioC3)) {
HXLINE(  37)															min27 = ratioB3;
            														}
            														else {
HXLINE(  37)															min27 = ratioC3;
            														}
HXDLIN(  37)														if ((ratioA3 > ratioB3)) {
HXLINE(  37)															max3 = ratioA3;
            														}
            														else {
HXLINE(  37)															max3 = ratioB3;
            														}
HXDLIN(  37)														if (!((max3 > ratioC3))) {
HXLINE(  37)															max3 = ratioC3;
            														}
HXLINE( 842)														max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE(  37)														if (!((min27 < max3))) {
HXLINE(  37)															min27 = ((max3 + min27) / ( (Float)(2) ));
            														}
HXDLIN(  37)														int i95 = ::Std_obj::_hx_int(((( (Float)(aA3) ) * soft) * min27));
HXDLIN(  37)														if ((i95 > 255)) {
HXLINE(  24)															i95 = 255;
            														}
HXLINE(  37)														if ((i95 < 0)) {
HXLINE(  25)															i95 = 0;
            														}
HXLINE( 845)														a88 = i95;
HXLINE(  37)														{
HXLINE(  37)															int location47;
HXDLIN(  37)															if (this332->useVirtualPos) {
HXLINE(  37)																location47 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - this332->virtualY) * ( (Float)(this332->width) )) + px4) - this332->virtualX));
            															}
            															else {
HXLINE(  37)																location47 = ::Std_obj::_hx_int(( (Float)(((py4 * this332->width) + px4)) ));
            															}
HXDLIN(  37)															bool _hx_tmp138;
HXDLIN(  37)															if (this332->transparent) {
HXLINE(  37)																_hx_tmp138 = (a88 < 254);
            															}
            															else {
HXLINE(  37)																_hx_tmp138 = false;
            															}
HXDLIN(  37)															if (_hx_tmp138) {
HXLINE(  37)																int this532 = ::iterMagic::Iimg_obj::get(this332->image,location47);
HXDLIN(  37)																int old31;
HXDLIN(  37)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																	old31 = ((((((this532 >> 24) & 255) << 24) | ((this532 & 255) << 16)) | (((this532 >> 8) & 255) << 8)) | ((this532 >> 16) & 255));
            																}
            																else {
HXLINE(  37)																	old31 = this532;
            																}
HXDLIN(  37)																int rhs31 = ((((a88 << 24) | (r70 << 16)) | (g70 << 8)) | b88);
HXDLIN(  37)																Float a148;
HXDLIN(  37)																int this533 = ((old31 >> 24) & 255);
HXDLIN(  37)																if ((this533 == 0)) {
HXLINE(  37)																	a148 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a148 = (( (Float)(this533) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r148;
HXDLIN(  37)																int this534 = ((old31 >> 16) & 255);
HXDLIN(  37)																if ((this534 == 0)) {
HXLINE(  37)																	r148 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r148 = (( (Float)(this534) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g148;
HXDLIN(  37)																int this535 = ((old31 >> 8) & 255);
HXDLIN(  37)																if ((this535 == 0)) {
HXLINE(  37)																	g148 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g148 = (( (Float)(this535) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b148;
HXDLIN(  37)																int this536 = (old31 & 255);
HXDLIN(  37)																if ((this536 == 0)) {
HXLINE(  37)																	b148 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b148 = (( (Float)(this536) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a247;
HXDLIN(  37)																int this537 = ((rhs31 >> 24) & 255);
HXDLIN(  37)																if ((this537 == 0)) {
HXLINE(  37)																	a247 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	a247 = (( (Float)(this537) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float r247;
HXDLIN(  37)																int this538 = ((rhs31 >> 16) & 255);
HXDLIN(  37)																if ((this538 == 0)) {
HXLINE(  37)																	r247 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	r247 = (( (Float)(this538) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float g247;
HXDLIN(  37)																int this539 = ((rhs31 >> 8) & 255);
HXDLIN(  37)																if ((this539 == 0)) {
HXLINE(  37)																	g247 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	g247 = (( (Float)(this539) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float b247;
HXDLIN(  37)																int this540 = (rhs31 & 255);
HXDLIN(  37)																if ((this540 == 0)) {
HXLINE(  37)																	b247 = ((Float)0.);
            																}
            																else {
HXLINE(  37)																	b247 = (( (Float)(this540) ) / ( (Float)(255) ));
            																}
HXDLIN(  37)																Float a347 = (a148 * (( (Float)(1) ) - a247));
HXDLIN(  37)																int r72 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r148 * a347) + (r247 * a247))));
HXDLIN(  37)																int g72 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g148 * a347) + (g247 * a247))));
HXDLIN(  37)																int b90 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b148 * a347) + (b247 * a247))));
HXDLIN(  37)																int a90 = ::Std_obj::_hx_int((( (Float)(255) ) * (a347 + a247)));
HXDLIN(  37)																int blended47 = ((((a90 << 24) | (r72 << 16)) | (g72 << 8)) | b90);
HXDLIN(  37)																{
HXLINE(  37)																	int _hx_tmp139;
HXDLIN(  37)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)																		_hx_tmp139 = ((((((blended47 >> 24) & 255) << 24) | ((blended47 & 255) << 16)) | (((blended47 >> 8) & 255) << 8)) | ((blended47 >> 16) & 255));
            																	}
            																	else {
HXLINE(  37)																		_hx_tmp139 = blended47;
            																	}
HXDLIN(  37)																	::iterMagic::Iimg_obj::set(this332->image,location47,_hx_tmp139);
            																}
            															}
            															else {
HXLINE(  37)																int value31;
HXDLIN(  37)																if (this332->isLittle) {
HXLINE(  37)																	value31 = ((((a88 << 24) | (b88 << 16)) | (g70 << 8)) | r70);
            																}
            																else {
HXLINE(  37)																	value31 = ((((a88 << 24) | (r70 << 16)) | (g70 << 8)) | b88);
            																}
HXDLIN(  37)																::iterMagic::Iimg_obj::set(this332->image,location47,value31);
            															}
            														}
            													}
HXLINE( 850)													found5 = true;
            												}
            												else {
HXLINE(  37)													if (found5) {
HXLINE(  37)														goto _hx_goto_85;
            													}
            												}
            											}
            											_hx_goto_85:;
            										}
            									}
            								}
HXDLIN(  37)								if ((hasHit1 == false)) {
HXLINE(  37)									 ::pi_xy::algo::HitTri v22 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx3,by3,cx3,cy3,dx5,dy5,true);
HXDLIN(  37)									if (hasUndo5) {
HXLINE(  37)										v22->undoImage = undoImage15;
HXDLIN(  37)										v22->undoX = xIter35->start;
HXDLIN(  37)										v22->undoY = yIter35->start;
            									}
            								}
            							}
HXDLIN(  37)							if ((hasHit1 == true)) {
HXLINE(  37)								 ::pi_xy::algo::HitQuad v23 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax1,ay1,bx3,by3,cx3,cy3,dx5,dy5,true);
            							}
            						}
            					}
            				}
            				else {
HXLINE(  39)					::haxe::Log_obj::trace(HX_("luxury!!",2d,d7,02,c7),::hx::SourceInfo(HX_("src/pi_xy/triangleGML/LineShape.hx",55,08,77,1f),39,HX_("pi_xy.triangleGML.LineShape",b6,5c,e2,af),HX_("render",56,6b,29,05)));
HXLINE(  40)					{
HXLINE(  40)						 ::pi_xy::ImageStruct this541 = pixelImage;
HXDLIN(  40)						int color4 = this->strokeColor;
HXDLIN(  40)						Float soft1 = this->edgeSoft;
HXDLIN(  40)						bool softAB1 = true;
HXDLIN(  40)						bool softBC1 = true;
HXDLIN(  40)						bool softCD1 = true;
HXDLIN(  40)						bool softDA1 = true;
HXDLIN(  40)						bool hasHit2 = true;
HXDLIN(  40)						Float o2 = (qy - py);
HXDLIN(  40)						Float a91 = (qx - px);
HXDLIN(  40)						Float h2 = ::Math_obj::pow(((o2 * o2) + (a91 * a91)),((Float)0.5));
HXDLIN(  40)						Float theta2 = ::Math_obj::atan2(o2,a91);
HXDLIN(  40)						{
HXLINE(  40)							 ::Dynamic debugCorners2 = false;
HXDLIN(  40)							if (::hx::IsNull( debugCorners2 )) {
HXLINE( 151)								debugCorners2 = false;
            							}
HXLINE(  40)							Float sin2 = ::Math_obj::sin(theta2);
HXDLIN(  40)							Float cos2 = ::Math_obj::cos(theta2);
HXDLIN(  40)							Float radius2 = (this->strokeWidth / ( (Float)(2) ));
HXDLIN(  40)							Float dx10 = ((Float)0.1);
HXDLIN(  40)							Float dy10 = radius2;
HXDLIN(  40)							Float cx4 = h2;
HXDLIN(  40)							Float cy4 = radius2;
HXDLIN(  40)							Float bx4 = h2;
HXDLIN(  40)							Float by4 = -(radius2);
HXDLIN(  40)							Float ax2 = ((Float)0.1);
HXDLIN(  40)							Float ay2 = -(radius2);
HXDLIN(  40)							Float temp4 = ((Float)0.);
HXLINE(  82)							temp4 = (px + ((ax2 * cos2) - (ay2 * sin2)));
HXLINE(  83)							ay2 = (py + ((ay2 * cos2) + (ax2 * sin2)));
HXLINE(  84)							ax2 = temp4;
HXLINE(  86)							temp4 = (px + ((bx4 * cos2) - (by4 * sin2)));
HXLINE(  87)							by4 = (py + ((by4 * cos2) + (bx4 * sin2)));
HXLINE(  88)							bx4 = temp4;
HXLINE(  90)							temp4 = (px + ((cx4 * cos2) - (cy4 * sin2)));
HXLINE(  91)							cy4 = (py + ((cy4 * cos2) + (cx4 * sin2)));
HXLINE(  92)							cx4 = temp4;
HXLINE(  94)							temp4 = (px + ((dx10 * cos2) - (dy10 * sin2)));
HXLINE(  95)							dy10 = (py + ((dy10 * cos2) + (dx10 * sin2)));
HXLINE(  96)							dx10 = temp4;
HXLINE(  40)							if (( (bool)(debugCorners2) )) {
HXLINE(  40)								{
HXLINE(  40)									 ::pi_xy::ImageStruct this542 = this541;
HXDLIN(  40)									{
HXLINE(  40)										int r_x8 = ::Std_obj::_hx_int((ax2 - ((Float)6.)));
HXDLIN(  40)										int r_y8 = ::Std_obj::_hx_int((ay2 - ((Float)6.)));
HXDLIN(  40)										int r_w8 = 12;
HXDLIN(  40)										int r_h8 = 12;
HXDLIN(  40)										int xmax8 = ((r_x8 + r_w8) + 1);
HXDLIN(  40)										int ymax8 = ((r_y8 + r_h8) + 1);
HXDLIN(  40)										int ii_min64 = r_x8;
HXDLIN(  40)										int ii_max64 = xmax8;
HXDLIN(  40)										int xRange__start8 = ii_min64;
HXDLIN(  40)										int xRange__max8 = ii_max64;
HXDLIN(  40)										int ii_min65 = r_y8;
HXDLIN(  40)										int ii_max65 = ymax8;
HXDLIN(  40)										int yRange__start8 = ii_min65;
HXDLIN(  40)										int yRange__max8 = ii_max65;
HXDLIN(  40)										int range_x8 = xRange__start8;
HXDLIN(  40)										int range_y8 = (yRange__start8 - 1);
HXDLIN(  40)										int range_xReset8 = range_x8;
HXDLIN(  40)										int range_yReset8 = range_y8;
HXDLIN(  40)										int range_xMax8 = (xRange__max8 - 2);
HXDLIN(  40)										int range_yMax8 = (yRange__max8 - 2);
HXDLIN(  40)										int _this_min8 = 0;
HXDLIN(  40)										int _this_max8 = ::Std_obj::_hx_int(( (Float)(((xRange__max8 - xRange__start8) * (yRange__max8 - yRange__start8))) ));
HXDLIN(  40)										while((_this_min8 < _this_max8)){
HXLINE(  40)											_this_min8 = (_this_min8 + 1);
HXDLIN(  40)											int i96 = (_this_min8 - 1);
HXDLIN(  40)											if ((range_y8 > range_yMax8)) {
HXLINE(  40)												range_y8 = range_yReset8;
HXDLIN(  40)												range_x8 = (range_x8 + 1);
            											}
HXDLIN(  40)											range_y8 = (range_y8 + 1);
HXDLIN(  40)											int i97 = i96;
HXDLIN(  40)											{
HXLINE(  40)												int x42 = range_x8;
HXDLIN(  40)												int y38 = range_y8;
HXDLIN(  40)												int c28 = -65536;
HXDLIN(  40)												bool _hx_tmp140;
HXDLIN(  40)												if ((((c28 >> 24) & 255) < 254)) {
HXLINE(  40)													_hx_tmp140 = this542->transparent;
            												}
            												else {
HXLINE(  40)													_hx_tmp140 = false;
            												}
HXDLIN(  40)												if (_hx_tmp140) {
HXLINE(  40)													int location48;
HXDLIN(  40)													if (this542->useVirtualPos) {
HXLINE(  40)														location48 = ::Std_obj::_hx_int(((((( (Float)(y38) ) - this542->virtualY) * ( (Float)(this542->width) )) + x42) - this542->virtualX));
            													}
            													else {
HXLINE(  40)														location48 = ::Std_obj::_hx_int(( (Float)(((y38 * this542->width) + x42)) ));
            													}
HXDLIN(  40)													int this543 = ::iterMagic::Iimg_obj::get(this542->image,location48);
HXDLIN(  40)													int this544;
HXDLIN(  40)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)														this544 = ((((((this543 >> 24) & 255) << 24) | ((this543 & 255) << 16)) | (((this543 >> 8) & 255) << 8)) | ((this543 >> 16) & 255));
            													}
            													else {
HXLINE(  40)														this544 = this543;
            													}
HXDLIN(  40)													Float a149;
HXDLIN(  40)													int this545 = ((this544 >> 24) & 255);
HXDLIN(  40)													if ((this545 == 0)) {
HXLINE(  40)														a149 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														a149 = (( (Float)(this545) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float r149;
HXDLIN(  40)													int this546 = ((this544 >> 16) & 255);
HXDLIN(  40)													if ((this546 == 0)) {
HXLINE(  40)														r149 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														r149 = (( (Float)(this546) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float g149;
HXDLIN(  40)													int this547 = ((this544 >> 8) & 255);
HXDLIN(  40)													if ((this547 == 0)) {
HXLINE(  40)														g149 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														g149 = (( (Float)(this547) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float b149;
HXDLIN(  40)													int this548 = (this544 & 255);
HXDLIN(  40)													if ((this548 == 0)) {
HXLINE(  40)														b149 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														b149 = (( (Float)(this548) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float a248;
HXDLIN(  40)													int this549 = ((-65536 >> 24) & 255);
HXDLIN(  40)													if ((this549 == 0)) {
HXLINE(  40)														a248 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														a248 = (( (Float)(this549) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float r248;
HXDLIN(  40)													int this550 = ((-65536 >> 16) & 255);
HXDLIN(  40)													if ((this550 == 0)) {
HXLINE(  40)														r248 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														r248 = (( (Float)(this550) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float g248;
HXDLIN(  40)													int this551 = ((-65536 >> 8) & 255);
HXDLIN(  40)													if ((this551 == 0)) {
HXLINE(  40)														g248 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														g248 = (( (Float)(this551) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float b248;
HXDLIN(  40)													int this552 = (-65536 & 255);
HXDLIN(  40)													if ((this552 == 0)) {
HXLINE(  40)														b248 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														b248 = (( (Float)(this552) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float a348 = (a149 * (( (Float)(1) ) - a248));
HXDLIN(  40)													int r73 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r149 * a348) + (r248 * a248))));
HXDLIN(  40)													int g73 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g149 * a348) + (g248 * a248))));
HXDLIN(  40)													int b91 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b149 * a348) + (b248 * a248))));
HXDLIN(  40)													int a92 = ::Std_obj::_hx_int((( (Float)(255) ) * (a348 + a248)));
HXDLIN(  40)													int blended48 = ((((a92 << 24) | (r73 << 16)) | (g73 << 8)) | b91);
HXDLIN(  40)													{
HXLINE(  40)														int _hx_tmp141;
HXDLIN(  40)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)															_hx_tmp141 = ((((((blended48 >> 24) & 255) << 24) | ((blended48 & 255) << 16)) | (((blended48 >> 8) & 255) << 8)) | ((blended48 >> 16) & 255));
            														}
            														else {
HXLINE(  40)															_hx_tmp141 = blended48;
            														}
HXDLIN(  40)														::iterMagic::Iimg_obj::set(this542->image,location48,_hx_tmp141);
            													}
            												}
            												else {
HXLINE(  40)													::Dynamic this553 = this542->image;
HXDLIN(  40)													int index34;
HXDLIN(  40)													if (this542->useVirtualPos) {
HXLINE(  40)														index34 = ::Std_obj::_hx_int(((((( (Float)(y38) ) - this542->virtualY) * ( (Float)(this542->width) )) + x42) - this542->virtualX));
            													}
            													else {
HXLINE(  40)														index34 = ::Std_obj::_hx_int(( (Float)(((y38 * this542->width) + x42)) ));
            													}
HXDLIN(  40)													int _hx_tmp142;
HXDLIN(  40)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)														_hx_tmp142 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            													}
            													else {
HXLINE(  40)														_hx_tmp142 = c28;
            													}
HXDLIN(  40)													::iterMagic::Iimg_obj::set(this553,index34,_hx_tmp142);
            												}
            											}
            										}
            									}
            								}
HXDLIN(  40)								{
HXLINE(  40)									 ::pi_xy::ImageStruct this554 = this541;
HXDLIN(  40)									{
HXLINE(  40)										int r_x9 = ::Std_obj::_hx_int((bx4 - ((Float)6.)));
HXDLIN(  40)										int r_y9 = ::Std_obj::_hx_int((by4 - ((Float)6.)));
HXDLIN(  40)										int r_w9 = 12;
HXDLIN(  40)										int r_h9 = 12;
HXDLIN(  40)										int xmax9 = ((r_x9 + r_w9) + 1);
HXDLIN(  40)										int ymax9 = ((r_y9 + r_h9) + 1);
HXDLIN(  40)										int ii_min66 = r_x9;
HXDLIN(  40)										int ii_max66 = xmax9;
HXDLIN(  40)										int xRange__start9 = ii_min66;
HXDLIN(  40)										int xRange__max9 = ii_max66;
HXDLIN(  40)										int ii_min67 = r_y9;
HXDLIN(  40)										int ii_max67 = ymax9;
HXDLIN(  40)										int yRange__start9 = ii_min67;
HXDLIN(  40)										int yRange__max9 = ii_max67;
HXDLIN(  40)										int range_x9 = xRange__start9;
HXDLIN(  40)										int range_y9 = (yRange__start9 - 1);
HXDLIN(  40)										int range_xReset9 = range_x9;
HXDLIN(  40)										int range_yReset9 = range_y9;
HXDLIN(  40)										int range_xMax9 = (xRange__max9 - 2);
HXDLIN(  40)										int range_yMax9 = (yRange__max9 - 2);
HXDLIN(  40)										int _this_min9 = 0;
HXDLIN(  40)										int _this_max9 = ::Std_obj::_hx_int(( (Float)(((xRange__max9 - xRange__start9) * (yRange__max9 - yRange__start9))) ));
HXDLIN(  40)										while((_this_min9 < _this_max9)){
HXLINE(  40)											_this_min9 = (_this_min9 + 1);
HXDLIN(  40)											int i98 = (_this_min9 - 1);
HXDLIN(  40)											if ((range_y9 > range_yMax9)) {
HXLINE(  40)												range_y9 = range_yReset9;
HXDLIN(  40)												range_x9 = (range_x9 + 1);
            											}
HXDLIN(  40)											range_y9 = (range_y9 + 1);
HXDLIN(  40)											int i99 = i98;
HXDLIN(  40)											{
HXLINE(  40)												int x43 = range_x9;
HXDLIN(  40)												int y39 = range_y9;
HXDLIN(  40)												int c29 = -16711936;
HXDLIN(  40)												bool _hx_tmp143;
HXDLIN(  40)												if ((((c29 >> 24) & 255) < 254)) {
HXLINE(  40)													_hx_tmp143 = this554->transparent;
            												}
            												else {
HXLINE(  40)													_hx_tmp143 = false;
            												}
HXDLIN(  40)												if (_hx_tmp143) {
HXLINE(  40)													int location49;
HXDLIN(  40)													if (this554->useVirtualPos) {
HXLINE(  40)														location49 = ::Std_obj::_hx_int(((((( (Float)(y39) ) - this554->virtualY) * ( (Float)(this554->width) )) + x43) - this554->virtualX));
            													}
            													else {
HXLINE(  40)														location49 = ::Std_obj::_hx_int(( (Float)(((y39 * this554->width) + x43)) ));
            													}
HXDLIN(  40)													int this555 = ::iterMagic::Iimg_obj::get(this554->image,location49);
HXDLIN(  40)													int this556;
HXDLIN(  40)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)														this556 = ((((((this555 >> 24) & 255) << 24) | ((this555 & 255) << 16)) | (((this555 >> 8) & 255) << 8)) | ((this555 >> 16) & 255));
            													}
            													else {
HXLINE(  40)														this556 = this555;
            													}
HXDLIN(  40)													Float a150;
HXDLIN(  40)													int this557 = ((this556 >> 24) & 255);
HXDLIN(  40)													if ((this557 == 0)) {
HXLINE(  40)														a150 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														a150 = (( (Float)(this557) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float r150;
HXDLIN(  40)													int this558 = ((this556 >> 16) & 255);
HXDLIN(  40)													if ((this558 == 0)) {
HXLINE(  40)														r150 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														r150 = (( (Float)(this558) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float g150;
HXDLIN(  40)													int this559 = ((this556 >> 8) & 255);
HXDLIN(  40)													if ((this559 == 0)) {
HXLINE(  40)														g150 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														g150 = (( (Float)(this559) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float b150;
HXDLIN(  40)													int this560 = (this556 & 255);
HXDLIN(  40)													if ((this560 == 0)) {
HXLINE(  40)														b150 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														b150 = (( (Float)(this560) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float a249;
HXDLIN(  40)													int this561 = ((-16711936 >> 24) & 255);
HXDLIN(  40)													if ((this561 == 0)) {
HXLINE(  40)														a249 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														a249 = (( (Float)(this561) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float r249;
HXDLIN(  40)													int this562 = ((-16711936 >> 16) & 255);
HXDLIN(  40)													if ((this562 == 0)) {
HXLINE(  40)														r249 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														r249 = (( (Float)(this562) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float g249;
HXDLIN(  40)													int this563 = ((-16711936 >> 8) & 255);
HXDLIN(  40)													if ((this563 == 0)) {
HXLINE(  40)														g249 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														g249 = (( (Float)(this563) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float b249;
HXDLIN(  40)													int this564 = (-16711936 & 255);
HXDLIN(  40)													if ((this564 == 0)) {
HXLINE(  40)														b249 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														b249 = (( (Float)(this564) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float a349 = (a150 * (( (Float)(1) ) - a249));
HXDLIN(  40)													int r74 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r150 * a349) + (r249 * a249))));
HXDLIN(  40)													int g74 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g150 * a349) + (g249 * a249))));
HXDLIN(  40)													int b92 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b150 * a349) + (b249 * a249))));
HXDLIN(  40)													int a93 = ::Std_obj::_hx_int((( (Float)(255) ) * (a349 + a249)));
HXDLIN(  40)													int blended49 = ((((a93 << 24) | (r74 << 16)) | (g74 << 8)) | b92);
HXDLIN(  40)													{
HXLINE(  40)														int _hx_tmp144;
HXDLIN(  40)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)															_hx_tmp144 = ((((((blended49 >> 24) & 255) << 24) | ((blended49 & 255) << 16)) | (((blended49 >> 8) & 255) << 8)) | ((blended49 >> 16) & 255));
            														}
            														else {
HXLINE(  40)															_hx_tmp144 = blended49;
            														}
HXDLIN(  40)														::iterMagic::Iimg_obj::set(this554->image,location49,_hx_tmp144);
            													}
            												}
            												else {
HXLINE(  40)													::Dynamic this565 = this554->image;
HXDLIN(  40)													int index35;
HXDLIN(  40)													if (this554->useVirtualPos) {
HXLINE(  40)														index35 = ::Std_obj::_hx_int(((((( (Float)(y39) ) - this554->virtualY) * ( (Float)(this554->width) )) + x43) - this554->virtualX));
            													}
            													else {
HXLINE(  40)														index35 = ::Std_obj::_hx_int(( (Float)(((y39 * this554->width) + x43)) ));
            													}
HXDLIN(  40)													int _hx_tmp145;
HXDLIN(  40)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)														_hx_tmp145 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            													}
            													else {
HXLINE(  40)														_hx_tmp145 = c29;
            													}
HXDLIN(  40)													::iterMagic::Iimg_obj::set(this565,index35,_hx_tmp145);
            												}
            											}
            										}
            									}
            								}
HXDLIN(  40)								{
HXLINE(  40)									 ::pi_xy::ImageStruct this566 = this541;
HXDLIN(  40)									{
HXLINE(  40)										int r_x10 = ::Std_obj::_hx_int((cx4 - ((Float)6.)));
HXDLIN(  40)										int r_y10 = ::Std_obj::_hx_int((cy4 - ((Float)6.)));
HXDLIN(  40)										int r_w10 = 12;
HXDLIN(  40)										int r_h10 = 12;
HXDLIN(  40)										int xmax10 = ((r_x10 + r_w10) + 1);
HXDLIN(  40)										int ymax10 = ((r_y10 + r_h10) + 1);
HXDLIN(  40)										int ii_min68 = r_x10;
HXDLIN(  40)										int ii_max68 = xmax10;
HXDLIN(  40)										int xRange__start10 = ii_min68;
HXDLIN(  40)										int xRange__max10 = ii_max68;
HXDLIN(  40)										int ii_min69 = r_y10;
HXDLIN(  40)										int ii_max69 = ymax10;
HXDLIN(  40)										int yRange__start10 = ii_min69;
HXDLIN(  40)										int yRange__max10 = ii_max69;
HXDLIN(  40)										int range_x10 = xRange__start10;
HXDLIN(  40)										int range_y10 = (yRange__start10 - 1);
HXDLIN(  40)										int range_xReset10 = range_x10;
HXDLIN(  40)										int range_yReset10 = range_y10;
HXDLIN(  40)										int range_xMax10 = (xRange__max10 - 2);
HXDLIN(  40)										int range_yMax10 = (yRange__max10 - 2);
HXDLIN(  40)										int _this_min10 = 0;
HXDLIN(  40)										int _this_max10 = ::Std_obj::_hx_int(( (Float)(((xRange__max10 - xRange__start10) * (yRange__max10 - yRange__start10))) ));
HXDLIN(  40)										while((_this_min10 < _this_max10)){
HXLINE(  40)											_this_min10 = (_this_min10 + 1);
HXDLIN(  40)											int i100 = (_this_min10 - 1);
HXDLIN(  40)											if ((range_y10 > range_yMax10)) {
HXLINE(  40)												range_y10 = range_yReset10;
HXDLIN(  40)												range_x10 = (range_x10 + 1);
            											}
HXDLIN(  40)											range_y10 = (range_y10 + 1);
HXDLIN(  40)											int i101 = i100;
HXDLIN(  40)											{
HXLINE(  40)												int x44 = range_x10;
HXDLIN(  40)												int y40 = range_y10;
HXDLIN(  40)												int c30 = -16776961;
HXDLIN(  40)												bool _hx_tmp146;
HXDLIN(  40)												if ((((c30 >> 24) & 255) < 254)) {
HXLINE(  40)													_hx_tmp146 = this566->transparent;
            												}
            												else {
HXLINE(  40)													_hx_tmp146 = false;
            												}
HXDLIN(  40)												if (_hx_tmp146) {
HXLINE(  40)													int location50;
HXDLIN(  40)													if (this566->useVirtualPos) {
HXLINE(  40)														location50 = ::Std_obj::_hx_int(((((( (Float)(y40) ) - this566->virtualY) * ( (Float)(this566->width) )) + x44) - this566->virtualX));
            													}
            													else {
HXLINE(  40)														location50 = ::Std_obj::_hx_int(( (Float)(((y40 * this566->width) + x44)) ));
            													}
HXDLIN(  40)													int this567 = ::iterMagic::Iimg_obj::get(this566->image,location50);
HXDLIN(  40)													int this568;
HXDLIN(  40)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)														this568 = ((((((this567 >> 24) & 255) << 24) | ((this567 & 255) << 16)) | (((this567 >> 8) & 255) << 8)) | ((this567 >> 16) & 255));
            													}
            													else {
HXLINE(  40)														this568 = this567;
            													}
HXDLIN(  40)													Float a151;
HXDLIN(  40)													int this569 = ((this568 >> 24) & 255);
HXDLIN(  40)													if ((this569 == 0)) {
HXLINE(  40)														a151 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														a151 = (( (Float)(this569) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float r151;
HXDLIN(  40)													int this570 = ((this568 >> 16) & 255);
HXDLIN(  40)													if ((this570 == 0)) {
HXLINE(  40)														r151 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														r151 = (( (Float)(this570) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float g151;
HXDLIN(  40)													int this571 = ((this568 >> 8) & 255);
HXDLIN(  40)													if ((this571 == 0)) {
HXLINE(  40)														g151 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														g151 = (( (Float)(this571) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float b151;
HXDLIN(  40)													int this572 = (this568 & 255);
HXDLIN(  40)													if ((this572 == 0)) {
HXLINE(  40)														b151 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														b151 = (( (Float)(this572) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float a250;
HXDLIN(  40)													int this573 = ((-16776961 >> 24) & 255);
HXDLIN(  40)													if ((this573 == 0)) {
HXLINE(  40)														a250 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														a250 = (( (Float)(this573) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float r250;
HXDLIN(  40)													int this574 = ((-16776961 >> 16) & 255);
HXDLIN(  40)													if ((this574 == 0)) {
HXLINE(  40)														r250 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														r250 = (( (Float)(this574) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float g250;
HXDLIN(  40)													int this575 = ((-16776961 >> 8) & 255);
HXDLIN(  40)													if ((this575 == 0)) {
HXLINE(  40)														g250 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														g250 = (( (Float)(this575) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float b250;
HXDLIN(  40)													int this576 = (-16776961 & 255);
HXDLIN(  40)													if ((this576 == 0)) {
HXLINE(  40)														b250 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														b250 = (( (Float)(this576) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float a350 = (a151 * (( (Float)(1) ) - a250));
HXDLIN(  40)													int r75 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r151 * a350) + (r250 * a250))));
HXDLIN(  40)													int g75 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g151 * a350) + (g250 * a250))));
HXDLIN(  40)													int b93 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b151 * a350) + (b250 * a250))));
HXDLIN(  40)													int a94 = ::Std_obj::_hx_int((( (Float)(255) ) * (a350 + a250)));
HXDLIN(  40)													int blended50 = ((((a94 << 24) | (r75 << 16)) | (g75 << 8)) | b93);
HXDLIN(  40)													{
HXLINE(  40)														int _hx_tmp147;
HXDLIN(  40)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)															_hx_tmp147 = ((((((blended50 >> 24) & 255) << 24) | ((blended50 & 255) << 16)) | (((blended50 >> 8) & 255) << 8)) | ((blended50 >> 16) & 255));
            														}
            														else {
HXLINE(  40)															_hx_tmp147 = blended50;
            														}
HXDLIN(  40)														::iterMagic::Iimg_obj::set(this566->image,location50,_hx_tmp147);
            													}
            												}
            												else {
HXLINE(  40)													::Dynamic this577 = this566->image;
HXDLIN(  40)													int index36;
HXDLIN(  40)													if (this566->useVirtualPos) {
HXLINE(  40)														index36 = ::Std_obj::_hx_int(((((( (Float)(y40) ) - this566->virtualY) * ( (Float)(this566->width) )) + x44) - this566->virtualX));
            													}
            													else {
HXLINE(  40)														index36 = ::Std_obj::_hx_int(( (Float)(((y40 * this566->width) + x44)) ));
            													}
HXDLIN(  40)													int _hx_tmp148;
HXDLIN(  40)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)														_hx_tmp148 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            													}
            													else {
HXLINE(  40)														_hx_tmp148 = c30;
            													}
HXDLIN(  40)													::iterMagic::Iimg_obj::set(this577,index36,_hx_tmp148);
            												}
            											}
            										}
            									}
            								}
HXDLIN(  40)								{
HXLINE(  40)									 ::pi_xy::ImageStruct this578 = this541;
HXDLIN(  40)									{
HXLINE(  40)										int r_x11 = ::Std_obj::_hx_int((dx10 - ((Float)6.)));
HXDLIN(  40)										int r_y11 = ::Std_obj::_hx_int((dy10 - ((Float)6.)));
HXDLIN(  40)										int r_w11 = 12;
HXDLIN(  40)										int r_h11 = 12;
HXDLIN(  40)										int xmax11 = ((r_x11 + r_w11) + 1);
HXDLIN(  40)										int ymax11 = ((r_y11 + r_h11) + 1);
HXDLIN(  40)										int ii_min70 = r_x11;
HXDLIN(  40)										int ii_max70 = xmax11;
HXDLIN(  40)										int xRange__start11 = ii_min70;
HXDLIN(  40)										int xRange__max11 = ii_max70;
HXDLIN(  40)										int ii_min71 = r_y11;
HXDLIN(  40)										int ii_max71 = ymax11;
HXDLIN(  40)										int yRange__start11 = ii_min71;
HXDLIN(  40)										int yRange__max11 = ii_max71;
HXDLIN(  40)										int range_x11 = xRange__start11;
HXDLIN(  40)										int range_y11 = (yRange__start11 - 1);
HXDLIN(  40)										int range_xReset11 = range_x11;
HXDLIN(  40)										int range_yReset11 = range_y11;
HXDLIN(  40)										int range_xMax11 = (xRange__max11 - 2);
HXDLIN(  40)										int range_yMax11 = (yRange__max11 - 2);
HXDLIN(  40)										int _this_min11 = 0;
HXDLIN(  40)										int _this_max11 = ::Std_obj::_hx_int(( (Float)(((xRange__max11 - xRange__start11) * (yRange__max11 - yRange__start11))) ));
HXDLIN(  40)										while((_this_min11 < _this_max11)){
HXLINE(  40)											_this_min11 = (_this_min11 + 1);
HXDLIN(  40)											int i102 = (_this_min11 - 1);
HXDLIN(  40)											if ((range_y11 > range_yMax11)) {
HXLINE(  40)												range_y11 = range_yReset11;
HXDLIN(  40)												range_x11 = (range_x11 + 1);
            											}
HXDLIN(  40)											range_y11 = (range_y11 + 1);
HXDLIN(  40)											int i103 = i102;
HXDLIN(  40)											{
HXLINE(  40)												int x45 = range_x11;
HXDLIN(  40)												int y41 = range_y11;
HXDLIN(  40)												int c31 = -1048336;
HXDLIN(  40)												bool _hx_tmp149;
HXDLIN(  40)												if ((((c31 >> 24) & 255) < 254)) {
HXLINE(  40)													_hx_tmp149 = this578->transparent;
            												}
            												else {
HXLINE(  40)													_hx_tmp149 = false;
            												}
HXDLIN(  40)												if (_hx_tmp149) {
HXLINE(  40)													int location51;
HXDLIN(  40)													if (this578->useVirtualPos) {
HXLINE(  40)														location51 = ::Std_obj::_hx_int(((((( (Float)(y41) ) - this578->virtualY) * ( (Float)(this578->width) )) + x45) - this578->virtualX));
            													}
            													else {
HXLINE(  40)														location51 = ::Std_obj::_hx_int(( (Float)(((y41 * this578->width) + x45)) ));
            													}
HXDLIN(  40)													int this579 = ::iterMagic::Iimg_obj::get(this578->image,location51);
HXDLIN(  40)													int this580;
HXDLIN(  40)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)														this580 = ((((((this579 >> 24) & 255) << 24) | ((this579 & 255) << 16)) | (((this579 >> 8) & 255) << 8)) | ((this579 >> 16) & 255));
            													}
            													else {
HXLINE(  40)														this580 = this579;
            													}
HXDLIN(  40)													Float a152;
HXDLIN(  40)													int this581 = ((this580 >> 24) & 255);
HXDLIN(  40)													if ((this581 == 0)) {
HXLINE(  40)														a152 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														a152 = (( (Float)(this581) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float r152;
HXDLIN(  40)													int this582 = ((this580 >> 16) & 255);
HXDLIN(  40)													if ((this582 == 0)) {
HXLINE(  40)														r152 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														r152 = (( (Float)(this582) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float g152;
HXDLIN(  40)													int this583 = ((this580 >> 8) & 255);
HXDLIN(  40)													if ((this583 == 0)) {
HXLINE(  40)														g152 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														g152 = (( (Float)(this583) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float b152;
HXDLIN(  40)													int this584 = (this580 & 255);
HXDLIN(  40)													if ((this584 == 0)) {
HXLINE(  40)														b152 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														b152 = (( (Float)(this584) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float a251;
HXDLIN(  40)													int this585 = ((-1048336 >> 24) & 255);
HXDLIN(  40)													if ((this585 == 0)) {
HXLINE(  40)														a251 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														a251 = (( (Float)(this585) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float r251;
HXDLIN(  40)													int this586 = ((-1048336 >> 16) & 255);
HXDLIN(  40)													if ((this586 == 0)) {
HXLINE(  40)														r251 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														r251 = (( (Float)(this586) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float g251;
HXDLIN(  40)													int this587 = ((-1048336 >> 8) & 255);
HXDLIN(  40)													if ((this587 == 0)) {
HXLINE(  40)														g251 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														g251 = (( (Float)(this587) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float b251;
HXDLIN(  40)													int this588 = (-1048336 & 255);
HXDLIN(  40)													if ((this588 == 0)) {
HXLINE(  40)														b251 = ((Float)0.);
            													}
            													else {
HXLINE(  40)														b251 = (( (Float)(this588) ) / ( (Float)(255) ));
            													}
HXDLIN(  40)													Float a351 = (a152 * (( (Float)(1) ) - a251));
HXDLIN(  40)													int r76 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r152 * a351) + (r251 * a251))));
HXDLIN(  40)													int g76 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g152 * a351) + (g251 * a251))));
HXDLIN(  40)													int b94 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b152 * a351) + (b251 * a251))));
HXDLIN(  40)													int a95 = ::Std_obj::_hx_int((( (Float)(255) ) * (a351 + a251)));
HXDLIN(  40)													int blended51 = ((((a95 << 24) | (r76 << 16)) | (g76 << 8)) | b94);
HXDLIN(  40)													{
HXLINE(  40)														int _hx_tmp150;
HXDLIN(  40)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)															_hx_tmp150 = ((((((blended51 >> 24) & 255) << 24) | ((blended51 & 255) << 16)) | (((blended51 >> 8) & 255) << 8)) | ((blended51 >> 16) & 255));
            														}
            														else {
HXLINE(  40)															_hx_tmp150 = blended51;
            														}
HXDLIN(  40)														::iterMagic::Iimg_obj::set(this578->image,location51,_hx_tmp150);
            													}
            												}
            												else {
HXLINE(  40)													::Dynamic this589 = this578->image;
HXDLIN(  40)													int index37;
HXDLIN(  40)													if (this578->useVirtualPos) {
HXLINE(  40)														index37 = ::Std_obj::_hx_int(((((( (Float)(y41) ) - this578->virtualY) * ( (Float)(this578->width) )) + x45) - this578->virtualX));
            													}
            													else {
HXLINE(  40)														index37 = ::Std_obj::_hx_int(( (Float)(((y41 * this578->width) + x45)) ));
            													}
HXDLIN(  40)													int _hx_tmp151;
HXDLIN(  40)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)														_hx_tmp151 = ((((((c31 >> 24) & 255) << 24) | ((c31 & 255) << 16)) | (((c31 >> 8) & 255) << 8)) | ((c31 >> 16) & 255));
            													}
            													else {
HXLINE(  40)														_hx_tmp151 = c31;
            													}
HXDLIN(  40)													::iterMagic::Iimg_obj::set(this589,index37,_hx_tmp151);
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  40)							{
HXLINE(  40)								{
HXLINE(  40)									bool hasUndo6 = true;
HXDLIN(  40)									int aA4 = ((color4 >> 24) & 255);
HXDLIN(  40)									int rA4 = ((color4 >> 16) & 255);
HXDLIN(  40)									int gA4 = ((color4 >> 8) & 255);
HXDLIN(  40)									int bA4 = (color4 & 255);
HXDLIN(  40)									Float bcx4 = (bx4 - dx10);
HXDLIN(  40)									Float bcy4 = (by4 - dy10);
HXDLIN(  40)									Float acx4 = (ax2 - dx10);
HXDLIN(  40)									Float acy4 = (ay2 - dy10);
HXDLIN(  40)									Float dot114 = ((bcx4 * bcx4) + (bcy4 * bcy4));
HXDLIN(  40)									Float dot124 = ((bcx4 * acx4) + (bcy4 * acy4));
HXDLIN(  40)									Float dot224 = ((acx4 * acx4) + (acy4 * acy4));
HXDLIN(  40)									Float denom14 = (( (Float)(1) ) / ((dot114 * dot224) - (dot124 * dot124)));
HXDLIN(  40)									 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN(  40)									if ((ax2 > bx4)) {
HXLINE(  40)										if ((ax2 > dx10)) {
HXLINE(  40)											int min28;
HXDLIN(  40)											if ((bx4 > dx10)) {
HXLINE(  40)												min28 = ::Math_obj::floor(dx10);
            											}
            											else {
HXLINE(  40)												min28 = ::Math_obj::floor(bx4);
            											}
HXDLIN(  40)											int ii_min72 = min28;
HXDLIN(  40)											int ii_max72 = ::Math_obj::ceil(ax2);
HXDLIN(  40)											xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min72,ii_max72);
            										}
            										else {
HXLINE(  40)											int ii_min73 = ::Math_obj::floor(bx4);
HXDLIN(  40)											int ii_max73 = ::Math_obj::ceil(dx10);
HXDLIN(  40)											xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min73,ii_max73);
            										}
            									}
            									else {
HXLINE(  40)										if ((bx4 > dx10)) {
HXLINE(  40)											int min29;
HXDLIN(  40)											if ((ax2 > dx10)) {
HXLINE(  40)												min29 = ::Math_obj::floor(dx10);
            											}
            											else {
HXLINE(  40)												min29 = ::Math_obj::ceil(ax2);
            											}
HXDLIN(  40)											int ii_min74 = min29;
HXDLIN(  40)											int ii_max74 = ::Math_obj::ceil(bx4);
HXDLIN(  40)											xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min74,ii_max74);
            										}
            										else {
HXLINE(  40)											int ii_min75 = ::Math_obj::floor(ax2);
HXDLIN(  40)											int ii_max75 = ::Math_obj::ceil(dx10);
HXDLIN(  40)											xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min75,ii_max75);
            										}
            									}
HXDLIN(  40)									 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN(  40)									if ((ay2 > by4)) {
HXLINE(  40)										if ((ay2 > dy10)) {
HXLINE(  40)											int min30;
HXDLIN(  40)											if ((by4 > dy10)) {
HXLINE(  40)												min30 = ::Math_obj::floor(dy10);
            											}
            											else {
HXLINE(  40)												min30 = ::Math_obj::floor(by4);
            											}
HXDLIN(  40)											int ii_min76 = min30;
HXDLIN(  40)											int ii_max76 = ::Math_obj::ceil(ay2);
HXDLIN(  40)											yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min76,ii_max76);
            										}
            										else {
HXLINE(  40)											int ii_min77 = ::Math_obj::floor(by4);
HXDLIN(  40)											int ii_max77 = ::Math_obj::ceil(dy10);
HXDLIN(  40)											yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min77,ii_max77);
            										}
            									}
            									else {
HXLINE(  40)										if ((by4 > dy10)) {
HXLINE(  40)											int min31;
HXDLIN(  40)											if ((ay2 > dy10)) {
HXLINE(  40)												min31 = ::Math_obj::floor(dy10);
            											}
            											else {
HXLINE(  40)												min31 = ::Math_obj::ceil(ay2);
            											}
HXDLIN(  40)											int ii_min78 = min31;
HXDLIN(  40)											int ii_max78 = ::Math_obj::ceil(by4);
HXDLIN(  40)											yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min78,ii_max78);
            										}
            										else {
HXLINE(  40)											int ii_min79 = ::Math_obj::floor(ay2);
HXDLIN(  40)											int ii_max79 = ::Math_obj::ceil(dy10);
HXDLIN(  40)											yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min79,ii_max79);
            										}
            									}
HXDLIN(  40)									 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN(  40)									if (hasUndo6) {
HXLINE(  40)										int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN(  40)										int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN(  40)										 ::Dynamic imageType6 = null();
HXDLIN(  40)										 ::pi_xy::ImageStruct this590 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  40)										if (::hx::IsNull( imageType6 )) {
HXLINE(  54)											imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  40)										::Dynamic undoImage19;
HXDLIN(  40)										switch((int)(( (int)(imageType6) ))){
            											case (int)0: {
HXLINE(  40)												 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  40)												 ::iterMagic::BytesImg b95 = byt6;
HXDLIN(  40)												{
HXLINE(  40)													b95->width = width6;
HXDLIN(  40)													b95->height = height6;
HXDLIN(  40)													b95->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  40)													b95->data = ::haxe::io::Bytes_obj::alloc((b95->length * 4));
HXDLIN(  40)													{
HXLINE(  40)														int len12 = b95->length;
HXDLIN(  40)														int w6 = 0;
HXDLIN(  40)														{
HXLINE(  40)															int _g128 = 0;
HXDLIN(  40)															int _g129 = b95->height;
HXDLIN(  40)															while((_g128 < _g129)){
HXLINE(  40)																_g128 = (_g128 + 1);
HXDLIN(  40)																int y42 = (_g128 - 1);
HXDLIN(  40)																{
HXLINE(  40)																	int _g130 = 0;
HXDLIN(  40)																	int _g131 = b95->width;
HXDLIN(  40)																	while((_g130 < _g131)){
HXLINE(  40)																		_g130 = (_g130 + 1);
HXDLIN(  40)																		int x46 = (_g130 - 1);
HXDLIN(  40)																		{
HXLINE(  40)																			w6 = (w6 + 1);
HXDLIN(  40)																			b95->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  40)																		{
HXLINE(  40)																			w6 = (w6 + 1);
HXDLIN(  40)																			b95->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  40)																		{
HXLINE(  40)																			w6 = (w6 + 1);
HXDLIN(  40)																			b95->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  40)																		{
HXLINE(  40)																			w6 = (w6 + 1);
HXDLIN(  40)																			b95->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  40)												undoImage19 = b95;
            											}
            											break;
            											case (int)1: {
HXLINE(  40)												 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  40)												 ::iterMagic::ArrIntImg a96 = arrI6;
HXDLIN(  40)												{
HXLINE(  40)													a96->width = width6;
HXDLIN(  40)													a96->height = height6;
HXDLIN(  40)													a96->data = ::Array_obj< int >::__new(0);
HXDLIN(  40)													a96->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  40)													{
HXLINE(  40)														int _g132 = 0;
HXDLIN(  40)														int _g133 = a96->length;
HXDLIN(  40)														while((_g132 < _g133)){
HXLINE(  40)															_g132 = (_g132 + 1);
HXDLIN(  40)															int i104 = (_g132 - 1);
HXDLIN(  40)															a96->data[i104] = 0;
            														}
            													}
            												}
HXDLIN(  40)												undoImage19 = a96;
            											}
            											break;
            											case (int)2: {
HXLINE(  40)												 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  40)												 ::iterMagic::U32ArrImg b96 = u32a6;
HXDLIN(  40)												{
HXLINE(  40)													b96->width = width6;
HXDLIN(  40)													b96->height = height6;
HXDLIN(  40)													b96->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  40)													int size6 = (b96->length * 4);
HXDLIN(  40)													b96->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN(  40)													{
HXLINE(  40)														int _g134 = 0;
HXDLIN(  40)														int _g135 = b96->length;
HXDLIN(  40)														while((_g134 < _g135)){
HXLINE(  40)															_g134 = (_g134 + 1);
HXDLIN(  40)															int i105 = (_g134 - 1);
HXDLIN(  40)															{
HXLINE(  40)																 ::haxe::io::ArrayBufferViewImpl this591 = b96->data;
HXDLIN(  40)																bool undoImage20;
HXDLIN(  40)																if ((i105 >= 0)) {
HXLINE(  40)																	undoImage20 = (i105 < (this591->byteLength >> 2));
            																}
            																else {
HXLINE(  40)																	undoImage20 = false;
            																}
HXDLIN(  40)																if (undoImage20) {
HXLINE(  40)																	 ::haxe::io::Bytes _this6 = this591->bytes;
HXDLIN(  40)																	int pos6 = ((i105 << 2) + this591->byteOffset);
HXDLIN(  40)																	_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN(  40)																	_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN(  40)																	_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN(  40)																	_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  40)												undoImage19 = b96;
            											}
            											break;
            											case (int)3: {
HXLINE(  40)												 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  40)												 ::iterMagic::VecIntImg v24 = vec6;
HXDLIN(  40)												{
HXLINE(  40)													v24->width = width6;
HXDLIN(  40)													v24->height = height6;
HXDLIN(  40)													v24->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  40)													v24->data = ::Array_obj< int >::__new(v24->length);
HXDLIN(  40)													{
HXLINE(  40)														int _g136 = 0;
HXDLIN(  40)														int _g137 = v24->length;
HXDLIN(  40)														while((_g136 < _g137)){
HXLINE(  40)															_g136 = (_g136 + 1);
HXDLIN(  40)															int i106 = (_g136 - 1);
HXDLIN(  40)															v24->data->__unsafe_set(i106,0);
            														}
            													}
            												}
HXDLIN(  40)												undoImage19 = v24;
            											}
            											break;
            											case (int)4: {
HXLINE(  40)												 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  40)												 ::iterMagic::StackIntImg b97 = sInt6;
HXDLIN(  40)												{
HXLINE(  40)													b97->width = width6;
HXDLIN(  40)													b97->height = height6;
HXDLIN(  40)													b97->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  40)													b97->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  40)													{
HXLINE(  40)														int len13 = b97->length;
HXDLIN(  40)														 ::haxe::ds::GenericStack_Int d6 = b97->data;
HXDLIN(  40)														if (::hx::IsNull( d6->head )) {
HXLINE(  40)															int _g138 = 0;
HXDLIN(  40)															int _g139 = len13;
HXDLIN(  40)															while((_g138 < _g139)){
HXLINE(  40)																_g138 = (_g138 + 1);
HXDLIN(  40)																int i107 = (_g138 - 1);
HXDLIN(  40)																d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            															}
            														}
            														else {
HXLINE(  40)															int _g140 = 0;
HXDLIN(  40)															int _g141 = len13;
HXDLIN(  40)															while((_g140 < _g141)){
HXLINE(  40)																_g140 = (_g140 + 1);
HXDLIN(  40)																int i108 = (_g140 - 1);
HXDLIN(  40)																{
HXLINE(  40)																	 ::haxe::ds::GenericCell_Int l6 = b97->data->head;
HXDLIN(  40)																	 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN(  40)																	{
HXLINE(  40)																		int _g142 = 0;
HXDLIN(  40)																		int _g143 = i108;
HXDLIN(  40)																		while((_g142 < _g143)){
HXLINE(  40)																			_g142 = (_g142 + 1);
HXDLIN(  40)																			int i109 = (_g142 - 1);
HXLINE( 345)																			prev6 = l6;
HXLINE( 346)																			l6 = l6->next;
            																		}
            																	}
HXLINE(  40)																	if (::hx::IsNull( prev6 )) {
HXLINE(  40)																		b97->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  40)																		l6 = null();
            																	}
            																	else {
HXLINE(  40)																		prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  40)																		l6 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  40)												undoImage19 = b97;
            											}
            											break;
            										}
HXDLIN(  40)										this590->image = undoImage19;
HXDLIN(  40)										this590->width = width6;
HXDLIN(  40)										this590->height = height6;
HXDLIN(  40)										this590->imageType = ( (int)(imageType6) );
HXDLIN(  40)										undoImage18 = this590;
HXDLIN(  40)										{
HXLINE(  40)											int rectLeft6 = xIter36->start;
HXDLIN(  40)											int rectTop6 = yIter36->start;
HXDLIN(  40)											int rectRight6 = xIter36->max;
HXDLIN(  40)											bool forceClear6 = false;
HXDLIN(  40)											{
HXLINE(  40)												int _g144 = rectTop6;
HXDLIN(  40)												int _g145 = yIter36->max;
HXDLIN(  40)												while((_g144 < _g145)){
HXLINE(  40)													_g144 = (_g144 + 1);
HXDLIN(  40)													int dy11 = (_g144 - 1);
HXDLIN(  40)													{
HXLINE(  40)														int _g146 = rectLeft6;
HXDLIN(  40)														int _g147 = rectRight6;
HXDLIN(  40)														while((_g146 < _g147)){
HXLINE(  40)															_g146 = (_g146 + 1);
HXDLIN(  40)															int dx11 = (_g146 - 1);
HXDLIN(  40)															::Dynamic this592 = this541->image;
HXDLIN(  40)															int index38;
HXDLIN(  40)															if (this541->useVirtualPos) {
HXLINE(  40)																index38 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - this541->virtualY) * ( (Float)(this541->width) )) + dx11) - this541->virtualX));
            															}
            															else {
HXLINE(  40)																index38 = ::Std_obj::_hx_int(( (Float)(((dy11 * this541->width) + dx11)) ));
            															}
HXDLIN(  40)															int c32 = ::iterMagic::Iimg_obj::get(this592,index38);
HXDLIN(  40)															int col6;
HXDLIN(  40)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																col6 = ((((((c32 >> 24) & 255) << 24) | ((c32 & 255) << 16)) | (((c32 >> 8) & 255) << 8)) | ((c32 >> 16) & 255));
            															}
            															else {
HXLINE(  40)																col6 = c32;
            															}
HXDLIN(  40)															bool _hx_tmp152;
HXDLIN(  40)															if (this541->useMask) {
HXLINE(  40)																_hx_tmp152 = ::hx::IsNotNull( this541->mask );
            															}
            															else {
HXLINE(  40)																_hx_tmp152 = false;
            															}
HXDLIN(  40)															if (_hx_tmp152) {
HXLINE(  40)																 ::pi_xy::ImageStruct this593 = this541->mask;
HXDLIN(  40)																::Dynamic this594 = this593->image;
HXDLIN(  40)																int index39;
HXDLIN(  40)																if (this593->useVirtualPos) {
HXLINE(  40)																	index39 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - this593->virtualY) * ( (Float)(this593->width) )) + dx11) - this593->virtualX));
            																}
            																else {
HXLINE(  40)																	index39 = ::Std_obj::_hx_int(( (Float)(((dy11 * this593->width) + dx11)) ));
            																}
HXDLIN(  40)																int c33 = ::iterMagic::Iimg_obj::get(this594,index39);
HXDLIN(  40)																int v25;
HXDLIN(  40)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																	v25 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            																}
            																else {
HXLINE(  40)																	v25 = c33;
            																}
HXDLIN(  40)																int maskPixel6 = v25;
HXDLIN(  40)																int this595 = col6;
HXDLIN(  40)																if ((maskPixel6 == 0)) {
HXLINE(  40)																	col6 = this595;
            																}
            																else {
HXLINE(  40)																	Float m06;
HXDLIN(  40)																	int this596 = ((maskPixel6 >> 24) & 255);
HXDLIN(  40)																	if ((this596 == 0)) {
HXLINE(  40)																		m06 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		m06 = (( (Float)(this596) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float m16;
HXDLIN(  40)																	int this597 = ((maskPixel6 >> 16) & 255);
HXDLIN(  40)																	if ((this597 == 0)) {
HXLINE(  40)																		m16 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		m16 = (( (Float)(this597) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float m26;
HXDLIN(  40)																	int this598 = ((maskPixel6 >> 8) & 255);
HXDLIN(  40)																	if ((this598 == 0)) {
HXLINE(  40)																		m26 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		m26 = (( (Float)(this598) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float m36;
HXDLIN(  40)																	int this599 = (maskPixel6 & 255);
HXDLIN(  40)																	if ((this599 == 0)) {
HXLINE(  40)																		m36 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		m36 = (( (Float)(this599) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this595 >> 24) & 255)) )));
HXDLIN(  40)																	int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this595 >> 16) & 255)) )));
HXDLIN(  40)																	int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this595 >> 8) & 255)) )));
HXDLIN(  40)																	int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this595 & 255)) )));
HXDLIN(  40)																	col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  40)															if ((col6 != 0)) {
HXLINE(  40)																int x47 = (dx11 - rectLeft6);
HXDLIN(  40)																int y43 = (dy11 - rectTop6);
HXDLIN(  40)																int c34 = col6;
HXDLIN(  40)																bool _hx_tmp153;
HXDLIN(  40)																if ((((c34 >> 24) & 255) < 254)) {
HXLINE(  40)																	_hx_tmp153 = undoImage18->transparent;
            																}
            																else {
HXLINE(  40)																	_hx_tmp153 = false;
            																}
HXDLIN(  40)																if (_hx_tmp153) {
HXLINE(  40)																	int location52;
HXDLIN(  40)																	if (undoImage18->useVirtualPos) {
HXLINE(  40)																		location52 = ::Std_obj::_hx_int(((((( (Float)(y43) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x47) - undoImage18->virtualX));
            																	}
            																	else {
HXLINE(  40)																		location52 = ::Std_obj::_hx_int(( (Float)(((y43 * undoImage18->width) + x47)) ));
            																	}
HXDLIN(  40)																	int this600 = ::iterMagic::Iimg_obj::get(undoImage18->image,location52);
HXDLIN(  40)																	int this601;
HXDLIN(  40)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																		this601 = ((((((this600 >> 24) & 255) << 24) | ((this600 & 255) << 16)) | (((this600 >> 8) & 255) << 8)) | ((this600 >> 16) & 255));
            																	}
            																	else {
HXLINE(  40)																		this601 = this600;
            																	}
HXDLIN(  40)																	Float a153;
HXDLIN(  40)																	int this602 = ((this601 >> 24) & 255);
HXDLIN(  40)																	if ((this602 == 0)) {
HXLINE(  40)																		a153 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		a153 = (( (Float)(this602) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float r153;
HXDLIN(  40)																	int this603 = ((this601 >> 16) & 255);
HXDLIN(  40)																	if ((this603 == 0)) {
HXLINE(  40)																		r153 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		r153 = (( (Float)(this603) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float g153;
HXDLIN(  40)																	int this604 = ((this601 >> 8) & 255);
HXDLIN(  40)																	if ((this604 == 0)) {
HXLINE(  40)																		g153 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		g153 = (( (Float)(this604) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float b153;
HXDLIN(  40)																	int this605 = (this601 & 255);
HXDLIN(  40)																	if ((this605 == 0)) {
HXLINE(  40)																		b153 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		b153 = (( (Float)(this605) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float a252;
HXDLIN(  40)																	int this606 = ((col6 >> 24) & 255);
HXDLIN(  40)																	if ((this606 == 0)) {
HXLINE(  40)																		a252 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		a252 = (( (Float)(this606) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float r252;
HXDLIN(  40)																	int this607 = ((col6 >> 16) & 255);
HXDLIN(  40)																	if ((this607 == 0)) {
HXLINE(  40)																		r252 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		r252 = (( (Float)(this607) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float g252;
HXDLIN(  40)																	int this608 = ((col6 >> 8) & 255);
HXDLIN(  40)																	if ((this608 == 0)) {
HXLINE(  40)																		g252 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		g252 = (( (Float)(this608) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float b252;
HXDLIN(  40)																	int this609 = (col6 & 255);
HXDLIN(  40)																	if ((this609 == 0)) {
HXLINE(  40)																		b252 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		b252 = (( (Float)(this609) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float a352 = (a153 * (( (Float)(1) ) - a252));
HXDLIN(  40)																	int r77 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r153 * a352) + (r252 * a252))));
HXDLIN(  40)																	int g77 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g153 * a352) + (g252 * a252))));
HXDLIN(  40)																	int b98 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b153 * a352) + (b252 * a252))));
HXDLIN(  40)																	int a97 = ::Std_obj::_hx_int((( (Float)(255) ) * (a352 + a252)));
HXDLIN(  40)																	int blended52 = ((((a97 << 24) | (r77 << 16)) | (g77 << 8)) | b98);
HXDLIN(  40)																	{
HXLINE(  40)																		int _hx_tmp154;
HXDLIN(  40)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																			_hx_tmp154 = ((((((blended52 >> 24) & 255) << 24) | ((blended52 & 255) << 16)) | (((blended52 >> 8) & 255) << 8)) | ((blended52 >> 16) & 255));
            																		}
            																		else {
HXLINE(  40)																			_hx_tmp154 = blended52;
            																		}
HXDLIN(  40)																		::iterMagic::Iimg_obj::set(undoImage18->image,location52,_hx_tmp154);
            																	}
            																}
            																else {
HXLINE(  40)																	::Dynamic this610 = undoImage18->image;
HXDLIN(  40)																	int index40;
HXDLIN(  40)																	if (undoImage18->useVirtualPos) {
HXLINE(  40)																		index40 = ::Std_obj::_hx_int(((((( (Float)(y43) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x47) - undoImage18->virtualX));
            																	}
            																	else {
HXLINE(  40)																		index40 = ::Std_obj::_hx_int(( (Float)(((y43 * undoImage18->width) + x47)) ));
            																	}
HXDLIN(  40)																	int _hx_tmp155;
HXDLIN(  40)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																		_hx_tmp155 = ((((((c34 >> 24) & 255) << 24) | ((c34 & 255) << 16)) | (((c34 >> 8) & 255) << 8)) | ((c34 >> 16) & 255));
            																	}
            																	else {
HXLINE(  40)																		_hx_tmp155 = c34;
            																	}
HXDLIN(  40)																	::iterMagic::Iimg_obj::set(this610,index40,_hx_tmp155);
            																}
            															}
            															else {
HXLINE(  40)																if (forceClear6) {
HXLINE(  40)																	::Dynamic this611 = undoImage18->image;
HXDLIN(  40)																	int x48 = (dx11 - rectLeft6);
HXDLIN(  40)																	int y44 = (dy11 - rectTop6);
HXDLIN(  40)																	int index41;
HXDLIN(  40)																	if (undoImage18->useVirtualPos) {
HXLINE(  40)																		index41 = ::Std_obj::_hx_int(((((( (Float)(y44) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x48) - undoImage18->virtualX));
            																	}
            																	else {
HXLINE(  40)																		index41 = ::Std_obj::_hx_int(( (Float)(((y44 * undoImage18->width) + x48)) ));
            																	}
HXDLIN(  40)																	::iterMagic::Iimg_obj::set(this611,index41,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  40)									bool found6 = false;
HXDLIN(  40)									Float min32 = ( (Float)(0) );
HXDLIN(  40)									Float max4 = ( (Float)(0) );
HXDLIN(  40)									int a98 = 0;
HXDLIN(  40)									int r78 = 0;
HXDLIN(  40)									int g78 = 0;
HXDLIN(  40)									int b99 = 0;
HXDLIN(  40)									{
HXLINE(  40)										int _g_min12 = xIter36->start;
HXDLIN(  40)										int _g_max12 = xIter36->max;
HXDLIN(  40)										while((_g_min12 < _g_max12)){
HXLINE(  40)											_g_min12 = (_g_min12 + 1);
HXDLIN(  40)											int px5 = (_g_min12 - 1);
HXDLIN(  40)											Float pcx4 = (( (Float)(px5) ) - dx10);
HXLINE( 695)											found6 = false;
HXLINE(  40)											{
HXLINE(  40)												int _g_min13 = yIter36->start;
HXDLIN(  40)												int _g_max13 = yIter36->max;
HXDLIN(  40)												while((_g_min13 < _g_max13)){
HXLINE(  40)													_g_min13 = (_g_min13 + 1);
HXDLIN(  40)													int py5 = (_g_min13 - 1);
HXDLIN(  40)													Float pcy4 = (( (Float)(py5) ) - dy10);
HXDLIN(  40)													Float dot314 = ((pcx4 * bcx4) + (pcy4 * bcy4));
HXDLIN(  40)													Float dot324 = ((pcx4 * acx4) + (pcy4 * acy4));
HXDLIN(  40)													Float ratioA4 = (((dot224 * dot314) - (dot124 * dot324)) * denom14);
HXDLIN(  40)													Float ratioB4 = (((dot114 * dot324) - (dot124 * dot314)) * denom14);
HXDLIN(  40)													Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN(  40)													bool _hx_tmp156;
HXDLIN(  40)													bool _hx_tmp157;
HXDLIN(  40)													if ((ratioA4 >= 0)) {
HXLINE(  40)														_hx_tmp157 = (ratioB4 >= 0);
            													}
            													else {
HXLINE(  40)														_hx_tmp157 = false;
            													}
HXDLIN(  40)													if (_hx_tmp157) {
HXLINE(  40)														_hx_tmp156 = (ratioC4 >= 0);
            													}
            													else {
HXLINE(  40)														_hx_tmp156 = false;
            													}
HXDLIN(  40)													if (_hx_tmp156) {
HXLINE(  40)														if (softAB1) {
HXLINE(  40)															if (softDA1) {
HXLINE(  40)																if ((ratioA4 < ratioC4)) {
HXLINE(  40)																	min32 = ratioA4;
            																}
            																else {
HXLINE(  40)																	min32 = ratioC4;
            																}
HXDLIN(  40)																if ((ratioA4 > ratioB4)) {
HXLINE(  40)																	max4 = ratioA4;
            																}
            																else {
HXLINE(  40)																	max4 = ratioB4;
            																}
HXDLIN(  40)																if (!((max4 > ratioC4))) {
HXLINE(  40)																	max4 = ratioC4;
            																}
HXLINE( 728)																max4 = ((( (Float)(1) ) - max4) / ( (Float)(2) ));
HXLINE(  40)																if (!((min32 < max4))) {
HXLINE(  40)																	min32 = ((max4 + min32) / ( (Float)(2) ));
            																}
HXDLIN(  40)																int i110 = ::Std_obj::_hx_int(((( (Float)(aA4) ) * soft1) * min32));
HXDLIN(  40)																if ((i110 > 255)) {
HXLINE(  24)																	i110 = 255;
            																}
HXLINE(  40)																if ((i110 < 0)) {
HXLINE(  25)																	i110 = 0;
            																}
HXLINE(  40)																a98 = i110;
            															}
            															else {
HXLINE( 722)																min32 = ratioC4;
HXLINE(  40)																int i111 = ::Std_obj::_hx_int(((( (Float)(aA4) ) * soft1) * min32));
HXDLIN(  40)																if ((i111 > 255)) {
HXLINE(  24)																	i111 = 255;
            																}
HXLINE(  40)																if ((i111 < 0)) {
HXLINE(  25)																	i111 = 0;
            																}
HXLINE(  40)																a98 = i111;
            															}
            														}
            														else {
HXLINE(  40)															if (softDA1) {
HXLINE( 709)																min32 = ratioA4;
HXLINE(  40)																int i112 = ::Std_obj::_hx_int(((( (Float)(aA4) ) * soft1) * min32));
HXDLIN(  40)																if ((i112 > 255)) {
HXLINE(  24)																	i112 = 255;
            																}
HXLINE(  40)																if ((i112 < 0)) {
HXLINE(  25)																	i112 = 0;
            																}
HXLINE(  40)																a98 = i112;
            															}
            															else {
HXLINE(  40)																int i113 = ::Std_obj::_hx_int(( (Float)(aA4) ));
HXDLIN(  40)																if ((i113 > 255)) {
HXLINE(  24)																	i113 = 255;
            																}
HXLINE(  40)																if ((i113 < 0)) {
HXLINE(  25)																	i113 = 0;
            																}
HXLINE(  40)																a98 = i113;
            															}
            														}
HXDLIN(  40)														int i114 = ::Std_obj::_hx_int(( (Float)(rA4) ));
HXDLIN(  40)														if ((i114 > 255)) {
HXLINE(  24)															i114 = 255;
            														}
HXLINE(  40)														if ((i114 < 0)) {
HXLINE(  25)															i114 = 0;
            														}
HXLINE( 747)														r78 = i114;
HXLINE(  40)														int i115 = ::Std_obj::_hx_int(( (Float)(gA4) ));
HXDLIN(  40)														if ((i115 > 255)) {
HXLINE(  24)															i115 = 255;
            														}
HXLINE(  40)														if ((i115 < 0)) {
HXLINE(  25)															i115 = 0;
            														}
HXLINE( 748)														g78 = i115;
HXLINE(  40)														int i116 = ::Std_obj::_hx_int(( (Float)(bA4) ));
HXDLIN(  40)														if ((i116 > 255)) {
HXLINE(  24)															i116 = 255;
            														}
HXLINE(  40)														if ((i116 < 0)) {
HXLINE(  25)															i116 = 0;
            														}
HXLINE( 749)														b99 = i116;
HXLINE(  40)														{
HXLINE(  40)															int location53;
HXDLIN(  40)															if (this541->useVirtualPos) {
HXLINE(  40)																location53 = ::Std_obj::_hx_int(((((( (Float)(py5) ) - this541->virtualY) * ( (Float)(this541->width) )) + px5) - this541->virtualX));
            															}
            															else {
HXLINE(  40)																location53 = ::Std_obj::_hx_int(( (Float)(((py5 * this541->width) + px5)) ));
            															}
HXDLIN(  40)															bool _hx_tmp158;
HXDLIN(  40)															if (this541->transparent) {
HXLINE(  40)																_hx_tmp158 = (a98 < 254);
            															}
            															else {
HXLINE(  40)																_hx_tmp158 = false;
            															}
HXDLIN(  40)															if (_hx_tmp158) {
HXLINE(  40)																int this612 = ::iterMagic::Iimg_obj::get(this541->image,location53);
HXDLIN(  40)																int old32;
HXDLIN(  40)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																	old32 = ((((((this612 >> 24) & 255) << 24) | ((this612 & 255) << 16)) | (((this612 >> 8) & 255) << 8)) | ((this612 >> 16) & 255));
            																}
            																else {
HXLINE(  40)																	old32 = this612;
            																}
HXDLIN(  40)																int rhs32 = ((((a98 << 24) | (r78 << 16)) | (g78 << 8)) | b99);
HXDLIN(  40)																Float a154;
HXDLIN(  40)																int this613 = ((old32 >> 24) & 255);
HXDLIN(  40)																if ((this613 == 0)) {
HXLINE(  40)																	a154 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	a154 = (( (Float)(this613) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float r154;
HXDLIN(  40)																int this614 = ((old32 >> 16) & 255);
HXDLIN(  40)																if ((this614 == 0)) {
HXLINE(  40)																	r154 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	r154 = (( (Float)(this614) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float g154;
HXDLIN(  40)																int this615 = ((old32 >> 8) & 255);
HXDLIN(  40)																if ((this615 == 0)) {
HXLINE(  40)																	g154 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	g154 = (( (Float)(this615) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float b154;
HXDLIN(  40)																int this616 = (old32 & 255);
HXDLIN(  40)																if ((this616 == 0)) {
HXLINE(  40)																	b154 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	b154 = (( (Float)(this616) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float a253;
HXDLIN(  40)																int this617 = ((rhs32 >> 24) & 255);
HXDLIN(  40)																if ((this617 == 0)) {
HXLINE(  40)																	a253 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	a253 = (( (Float)(this617) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float r253;
HXDLIN(  40)																int this618 = ((rhs32 >> 16) & 255);
HXDLIN(  40)																if ((this618 == 0)) {
HXLINE(  40)																	r253 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	r253 = (( (Float)(this618) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float g253;
HXDLIN(  40)																int this619 = ((rhs32 >> 8) & 255);
HXDLIN(  40)																if ((this619 == 0)) {
HXLINE(  40)																	g253 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	g253 = (( (Float)(this619) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float b253;
HXDLIN(  40)																int this620 = (rhs32 & 255);
HXDLIN(  40)																if ((this620 == 0)) {
HXLINE(  40)																	b253 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	b253 = (( (Float)(this620) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float a353 = (a154 * (( (Float)(1) ) - a253));
HXDLIN(  40)																int r79 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r154 * a353) + (r253 * a253))));
HXDLIN(  40)																int g79 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g154 * a353) + (g253 * a253))));
HXDLIN(  40)																int b100 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b154 * a353) + (b253 * a253))));
HXDLIN(  40)																int a99 = ::Std_obj::_hx_int((( (Float)(255) ) * (a353 + a253)));
HXDLIN(  40)																int blended53 = ((((a99 << 24) | (r79 << 16)) | (g79 << 8)) | b100);
HXDLIN(  40)																{
HXLINE(  40)																	int _hx_tmp159;
HXDLIN(  40)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																		_hx_tmp159 = ((((((blended53 >> 24) & 255) << 24) | ((blended53 & 255) << 16)) | (((blended53 >> 8) & 255) << 8)) | ((blended53 >> 16) & 255));
            																	}
            																	else {
HXLINE(  40)																		_hx_tmp159 = blended53;
            																	}
HXDLIN(  40)																	::iterMagic::Iimg_obj::set(this541->image,location53,_hx_tmp159);
            																}
            															}
            															else {
HXLINE(  40)																int value32;
HXDLIN(  40)																if (this541->isLittle) {
HXLINE(  40)																	value32 = ((((a98 << 24) | (b99 << 16)) | (g78 << 8)) | r78);
            																}
            																else {
HXLINE(  40)																	value32 = ((((a98 << 24) | (r78 << 16)) | (g78 << 8)) | b99);
            																}
HXDLIN(  40)																::iterMagic::Iimg_obj::set(this541->image,location53,value32);
            															}
            														}
HXLINE( 751)														found6 = true;
            													}
            													else {
HXLINE(  40)														if (found6) {
HXLINE(  40)															goto _hx_goto_101;
            														}
            													}
            												}
            												_hx_goto_101:;
            											}
            										}
            									}
HXDLIN(  40)									if ((hasHit2 == false)) {
HXLINE(  40)										 ::pi_xy::algo::HitTri v26 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax2,ay2,bx4,by4,dx10,dy10,true);
HXDLIN(  40)										if (hasUndo6) {
HXLINE(  40)											v26->undoImage = undoImage18;
HXDLIN(  40)											v26->undoX = xIter36->start;
HXDLIN(  40)											v26->undoY = yIter36->start;
            										}
            									}
            								}
HXDLIN(  40)								{
HXLINE(  40)									bool hasUndo7 = true;
HXDLIN(  40)									int aA5 = ((color4 >> 24) & 255);
HXDLIN(  40)									int rA5 = ((color4 >> 16) & 255);
HXDLIN(  40)									int gA5 = ((color4 >> 8) & 255);
HXDLIN(  40)									int bA5 = (color4 & 255);
HXDLIN(  40)									Float bcx5 = (cx4 - dx10);
HXDLIN(  40)									Float bcy5 = (cy4 - dy10);
HXDLIN(  40)									Float acx5 = (bx4 - dx10);
HXDLIN(  40)									Float acy5 = (by4 - dy10);
HXDLIN(  40)									Float dot115 = ((bcx5 * bcx5) + (bcy5 * bcy5));
HXDLIN(  40)									Float dot125 = ((bcx5 * acx5) + (bcy5 * acy5));
HXDLIN(  40)									Float dot225 = ((acx5 * acx5) + (acy5 * acy5));
HXDLIN(  40)									Float denom15 = (( (Float)(1) ) / ((dot115 * dot225) - (dot125 * dot125)));
HXDLIN(  40)									 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN(  40)									if ((bx4 > cx4)) {
HXLINE(  40)										if ((bx4 > dx10)) {
HXLINE(  40)											int min33;
HXDLIN(  40)											if ((cx4 > dx10)) {
HXLINE(  40)												min33 = ::Math_obj::floor(dx10);
            											}
            											else {
HXLINE(  40)												min33 = ::Math_obj::floor(cx4);
            											}
HXDLIN(  40)											int ii_min80 = min33;
HXDLIN(  40)											int ii_max80 = ::Math_obj::ceil(bx4);
HXDLIN(  40)											xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min80,ii_max80);
            										}
            										else {
HXLINE(  40)											int ii_min81 = ::Math_obj::floor(cx4);
HXDLIN(  40)											int ii_max81 = ::Math_obj::ceil(dx10);
HXDLIN(  40)											xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min81,ii_max81);
            										}
            									}
            									else {
HXLINE(  40)										if ((cx4 > dx10)) {
HXLINE(  40)											int min34;
HXDLIN(  40)											if ((bx4 > dx10)) {
HXLINE(  40)												min34 = ::Math_obj::floor(dx10);
            											}
            											else {
HXLINE(  40)												min34 = ::Math_obj::ceil(bx4);
            											}
HXDLIN(  40)											int ii_min82 = min34;
HXDLIN(  40)											int ii_max82 = ::Math_obj::ceil(cx4);
HXDLIN(  40)											xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min82,ii_max82);
            										}
            										else {
HXLINE(  40)											int ii_min83 = ::Math_obj::floor(bx4);
HXDLIN(  40)											int ii_max83 = ::Math_obj::ceil(dx10);
HXDLIN(  40)											xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min83,ii_max83);
            										}
            									}
HXDLIN(  40)									 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN(  40)									if ((by4 > cy4)) {
HXLINE(  40)										if ((by4 > dy10)) {
HXLINE(  40)											int min35;
HXDLIN(  40)											if ((cy4 > dy10)) {
HXLINE(  40)												min35 = ::Math_obj::floor(dy10);
            											}
            											else {
HXLINE(  40)												min35 = ::Math_obj::floor(cy4);
            											}
HXDLIN(  40)											int ii_min84 = min35;
HXDLIN(  40)											int ii_max84 = ::Math_obj::ceil(by4);
HXDLIN(  40)											yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min84,ii_max84);
            										}
            										else {
HXLINE(  40)											int ii_min85 = ::Math_obj::floor(cy4);
HXDLIN(  40)											int ii_max85 = ::Math_obj::ceil(dy10);
HXDLIN(  40)											yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min85,ii_max85);
            										}
            									}
            									else {
HXLINE(  40)										if ((cy4 > dy10)) {
HXLINE(  40)											int min36;
HXDLIN(  40)											if ((by4 > dy10)) {
HXLINE(  40)												min36 = ::Math_obj::floor(dy10);
            											}
            											else {
HXLINE(  40)												min36 = ::Math_obj::ceil(by4);
            											}
HXDLIN(  40)											int ii_min86 = min36;
HXDLIN(  40)											int ii_max86 = ::Math_obj::ceil(cy4);
HXDLIN(  40)											yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min86,ii_max86);
            										}
            										else {
HXLINE(  40)											int ii_min87 = ::Math_obj::floor(by4);
HXDLIN(  40)											int ii_max87 = ::Math_obj::ceil(dy10);
HXDLIN(  40)											yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min87,ii_max87);
            										}
            									}
HXDLIN(  40)									 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN(  40)									if (hasUndo7) {
HXLINE(  40)										int width7 = ((xIter37->max - xIter37->start) + 1);
HXDLIN(  40)										int height7 = ((yIter37->max - yIter37->start) + 1);
HXDLIN(  40)										 ::Dynamic imageType7 = null();
HXDLIN(  40)										 ::pi_xy::ImageStruct this621 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  40)										if (::hx::IsNull( imageType7 )) {
HXLINE(  54)											imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  40)										::Dynamic undoImage22;
HXDLIN(  40)										switch((int)(( (int)(imageType7) ))){
            											case (int)0: {
HXLINE(  40)												 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  40)												 ::iterMagic::BytesImg b101 = byt7;
HXDLIN(  40)												{
HXLINE(  40)													b101->width = width7;
HXDLIN(  40)													b101->height = height7;
HXDLIN(  40)													b101->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  40)													b101->data = ::haxe::io::Bytes_obj::alloc((b101->length * 4));
HXDLIN(  40)													{
HXLINE(  40)														int len14 = b101->length;
HXDLIN(  40)														int w7 = 0;
HXDLIN(  40)														{
HXLINE(  40)															int _g148 = 0;
HXDLIN(  40)															int _g149 = b101->height;
HXDLIN(  40)															while((_g148 < _g149)){
HXLINE(  40)																_g148 = (_g148 + 1);
HXDLIN(  40)																int y45 = (_g148 - 1);
HXDLIN(  40)																{
HXLINE(  40)																	int _g150 = 0;
HXDLIN(  40)																	int _g151 = b101->width;
HXDLIN(  40)																	while((_g150 < _g151)){
HXLINE(  40)																		_g150 = (_g150 + 1);
HXDLIN(  40)																		int x49 = (_g150 - 1);
HXDLIN(  40)																		{
HXLINE(  40)																			w7 = (w7 + 1);
HXDLIN(  40)																			b101->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  40)																		{
HXLINE(  40)																			w7 = (w7 + 1);
HXDLIN(  40)																			b101->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  40)																		{
HXLINE(  40)																			w7 = (w7 + 1);
HXDLIN(  40)																			b101->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  40)																		{
HXLINE(  40)																			w7 = (w7 + 1);
HXDLIN(  40)																			b101->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  40)												undoImage22 = b101;
            											}
            											break;
            											case (int)1: {
HXLINE(  40)												 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  40)												 ::iterMagic::ArrIntImg a100 = arrI7;
HXDLIN(  40)												{
HXLINE(  40)													a100->width = width7;
HXDLIN(  40)													a100->height = height7;
HXDLIN(  40)													a100->data = ::Array_obj< int >::__new(0);
HXDLIN(  40)													a100->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  40)													{
HXLINE(  40)														int _g152 = 0;
HXDLIN(  40)														int _g153 = a100->length;
HXDLIN(  40)														while((_g152 < _g153)){
HXLINE(  40)															_g152 = (_g152 + 1);
HXDLIN(  40)															int i117 = (_g152 - 1);
HXDLIN(  40)															a100->data[i117] = 0;
            														}
            													}
            												}
HXDLIN(  40)												undoImage22 = a100;
            											}
            											break;
            											case (int)2: {
HXLINE(  40)												 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  40)												 ::iterMagic::U32ArrImg b102 = u32a7;
HXDLIN(  40)												{
HXLINE(  40)													b102->width = width7;
HXDLIN(  40)													b102->height = height7;
HXDLIN(  40)													b102->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  40)													int size7 = (b102->length * 4);
HXDLIN(  40)													b102->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN(  40)													{
HXLINE(  40)														int _g154 = 0;
HXDLIN(  40)														int _g155 = b102->length;
HXDLIN(  40)														while((_g154 < _g155)){
HXLINE(  40)															_g154 = (_g154 + 1);
HXDLIN(  40)															int i118 = (_g154 - 1);
HXDLIN(  40)															{
HXLINE(  40)																 ::haxe::io::ArrayBufferViewImpl this622 = b102->data;
HXDLIN(  40)																bool undoImage23;
HXDLIN(  40)																if ((i118 >= 0)) {
HXLINE(  40)																	undoImage23 = (i118 < (this622->byteLength >> 2));
            																}
            																else {
HXLINE(  40)																	undoImage23 = false;
            																}
HXDLIN(  40)																if (undoImage23) {
HXLINE(  40)																	 ::haxe::io::Bytes _this7 = this622->bytes;
HXDLIN(  40)																	int pos7 = ((i118 << 2) + this622->byteOffset);
HXDLIN(  40)																	_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN(  40)																	_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN(  40)																	_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN(  40)																	_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  40)												undoImage22 = b102;
            											}
            											break;
            											case (int)3: {
HXLINE(  40)												 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  40)												 ::iterMagic::VecIntImg v27 = vec7;
HXDLIN(  40)												{
HXLINE(  40)													v27->width = width7;
HXDLIN(  40)													v27->height = height7;
HXDLIN(  40)													v27->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  40)													v27->data = ::Array_obj< int >::__new(v27->length);
HXDLIN(  40)													{
HXLINE(  40)														int _g156 = 0;
HXDLIN(  40)														int _g157 = v27->length;
HXDLIN(  40)														while((_g156 < _g157)){
HXLINE(  40)															_g156 = (_g156 + 1);
HXDLIN(  40)															int i119 = (_g156 - 1);
HXDLIN(  40)															v27->data->__unsafe_set(i119,0);
            														}
            													}
            												}
HXDLIN(  40)												undoImage22 = v27;
            											}
            											break;
            											case (int)4: {
HXLINE(  40)												 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  40)												 ::iterMagic::StackIntImg b103 = sInt7;
HXDLIN(  40)												{
HXLINE(  40)													b103->width = width7;
HXDLIN(  40)													b103->height = height7;
HXDLIN(  40)													b103->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  40)													b103->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  40)													{
HXLINE(  40)														int len15 = b103->length;
HXDLIN(  40)														 ::haxe::ds::GenericStack_Int d7 = b103->data;
HXDLIN(  40)														if (::hx::IsNull( d7->head )) {
HXLINE(  40)															int _g158 = 0;
HXDLIN(  40)															int _g159 = len15;
HXDLIN(  40)															while((_g158 < _g159)){
HXLINE(  40)																_g158 = (_g158 + 1);
HXDLIN(  40)																int i120 = (_g158 - 1);
HXDLIN(  40)																d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            															}
            														}
            														else {
HXLINE(  40)															int _g160 = 0;
HXDLIN(  40)															int _g161 = len15;
HXDLIN(  40)															while((_g160 < _g161)){
HXLINE(  40)																_g160 = (_g160 + 1);
HXDLIN(  40)																int i121 = (_g160 - 1);
HXDLIN(  40)																{
HXLINE(  40)																	 ::haxe::ds::GenericCell_Int l7 = b103->data->head;
HXDLIN(  40)																	 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN(  40)																	{
HXLINE(  40)																		int _g162 = 0;
HXDLIN(  40)																		int _g163 = i121;
HXDLIN(  40)																		while((_g162 < _g163)){
HXLINE(  40)																			_g162 = (_g162 + 1);
HXDLIN(  40)																			int i122 = (_g162 - 1);
HXLINE( 345)																			prev7 = l7;
HXLINE( 346)																			l7 = l7->next;
            																		}
            																	}
HXLINE(  40)																	if (::hx::IsNull( prev7 )) {
HXLINE(  40)																		b103->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  40)																		l7 = null();
            																	}
            																	else {
HXLINE(  40)																		prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  40)																		l7 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  40)												undoImage22 = b103;
            											}
            											break;
            										}
HXDLIN(  40)										this621->image = undoImage22;
HXDLIN(  40)										this621->width = width7;
HXDLIN(  40)										this621->height = height7;
HXDLIN(  40)										this621->imageType = ( (int)(imageType7) );
HXDLIN(  40)										undoImage21 = this621;
HXDLIN(  40)										{
HXLINE(  40)											int rectLeft7 = xIter37->start;
HXDLIN(  40)											int rectTop7 = yIter37->start;
HXDLIN(  40)											int rectRight7 = xIter37->max;
HXDLIN(  40)											bool forceClear7 = false;
HXDLIN(  40)											{
HXLINE(  40)												int _g164 = rectTop7;
HXDLIN(  40)												int _g165 = yIter37->max;
HXDLIN(  40)												while((_g164 < _g165)){
HXLINE(  40)													_g164 = (_g164 + 1);
HXDLIN(  40)													int dy12 = (_g164 - 1);
HXDLIN(  40)													{
HXLINE(  40)														int _g166 = rectLeft7;
HXDLIN(  40)														int _g167 = rectRight7;
HXDLIN(  40)														while((_g166 < _g167)){
HXLINE(  40)															_g166 = (_g166 + 1);
HXDLIN(  40)															int dx12 = (_g166 - 1);
HXDLIN(  40)															::Dynamic this623 = this541->image;
HXDLIN(  40)															int index42;
HXDLIN(  40)															if (this541->useVirtualPos) {
HXLINE(  40)																index42 = ::Std_obj::_hx_int(((((( (Float)(dy12) ) - this541->virtualY) * ( (Float)(this541->width) )) + dx12) - this541->virtualX));
            															}
            															else {
HXLINE(  40)																index42 = ::Std_obj::_hx_int(( (Float)(((dy12 * this541->width) + dx12)) ));
            															}
HXDLIN(  40)															int c35 = ::iterMagic::Iimg_obj::get(this623,index42);
HXDLIN(  40)															int col7;
HXDLIN(  40)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																col7 = ((((((c35 >> 24) & 255) << 24) | ((c35 & 255) << 16)) | (((c35 >> 8) & 255) << 8)) | ((c35 >> 16) & 255));
            															}
            															else {
HXLINE(  40)																col7 = c35;
            															}
HXDLIN(  40)															bool _hx_tmp160;
HXDLIN(  40)															if (this541->useMask) {
HXLINE(  40)																_hx_tmp160 = ::hx::IsNotNull( this541->mask );
            															}
            															else {
HXLINE(  40)																_hx_tmp160 = false;
            															}
HXDLIN(  40)															if (_hx_tmp160) {
HXLINE(  40)																 ::pi_xy::ImageStruct this624 = this541->mask;
HXDLIN(  40)																::Dynamic this625 = this624->image;
HXDLIN(  40)																int index43;
HXDLIN(  40)																if (this624->useVirtualPos) {
HXLINE(  40)																	index43 = ::Std_obj::_hx_int(((((( (Float)(dy12) ) - this624->virtualY) * ( (Float)(this624->width) )) + dx12) - this624->virtualX));
            																}
            																else {
HXLINE(  40)																	index43 = ::Std_obj::_hx_int(( (Float)(((dy12 * this624->width) + dx12)) ));
            																}
HXDLIN(  40)																int c36 = ::iterMagic::Iimg_obj::get(this625,index43);
HXDLIN(  40)																int v28;
HXDLIN(  40)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																	v28 = ((((((c36 >> 24) & 255) << 24) | ((c36 & 255) << 16)) | (((c36 >> 8) & 255) << 8)) | ((c36 >> 16) & 255));
            																}
            																else {
HXLINE(  40)																	v28 = c36;
            																}
HXDLIN(  40)																int maskPixel7 = v28;
HXDLIN(  40)																int this626 = col7;
HXDLIN(  40)																if ((maskPixel7 == 0)) {
HXLINE(  40)																	col7 = this626;
            																}
            																else {
HXLINE(  40)																	Float m07;
HXDLIN(  40)																	int this627 = ((maskPixel7 >> 24) & 255);
HXDLIN(  40)																	if ((this627 == 0)) {
HXLINE(  40)																		m07 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		m07 = (( (Float)(this627) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float m17;
HXDLIN(  40)																	int this628 = ((maskPixel7 >> 16) & 255);
HXDLIN(  40)																	if ((this628 == 0)) {
HXLINE(  40)																		m17 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		m17 = (( (Float)(this628) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float m27;
HXDLIN(  40)																	int this629 = ((maskPixel7 >> 8) & 255);
HXDLIN(  40)																	if ((this629 == 0)) {
HXLINE(  40)																		m27 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		m27 = (( (Float)(this629) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float m37;
HXDLIN(  40)																	int this630 = (maskPixel7 & 255);
HXDLIN(  40)																	if ((this630 == 0)) {
HXLINE(  40)																		m37 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		m37 = (( (Float)(this630) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this626 >> 24) & 255)) )));
HXDLIN(  40)																	int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this626 >> 16) & 255)) )));
HXDLIN(  40)																	int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this626 >> 8) & 255)) )));
HXDLIN(  40)																	int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this626 & 255)) )));
HXDLIN(  40)																	col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  40)															if ((col7 != 0)) {
HXLINE(  40)																int x50 = (dx12 - rectLeft7);
HXDLIN(  40)																int y46 = (dy12 - rectTop7);
HXDLIN(  40)																int c37 = col7;
HXDLIN(  40)																bool _hx_tmp161;
HXDLIN(  40)																if ((((c37 >> 24) & 255) < 254)) {
HXLINE(  40)																	_hx_tmp161 = undoImage21->transparent;
            																}
            																else {
HXLINE(  40)																	_hx_tmp161 = false;
            																}
HXDLIN(  40)																if (_hx_tmp161) {
HXLINE(  40)																	int location54;
HXDLIN(  40)																	if (undoImage21->useVirtualPos) {
HXLINE(  40)																		location54 = ::Std_obj::_hx_int(((((( (Float)(y46) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x50) - undoImage21->virtualX));
            																	}
            																	else {
HXLINE(  40)																		location54 = ::Std_obj::_hx_int(( (Float)(((y46 * undoImage21->width) + x50)) ));
            																	}
HXDLIN(  40)																	int this631 = ::iterMagic::Iimg_obj::get(undoImage21->image,location54);
HXDLIN(  40)																	int this632;
HXDLIN(  40)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																		this632 = ((((((this631 >> 24) & 255) << 24) | ((this631 & 255) << 16)) | (((this631 >> 8) & 255) << 8)) | ((this631 >> 16) & 255));
            																	}
            																	else {
HXLINE(  40)																		this632 = this631;
            																	}
HXDLIN(  40)																	Float a155;
HXDLIN(  40)																	int this633 = ((this632 >> 24) & 255);
HXDLIN(  40)																	if ((this633 == 0)) {
HXLINE(  40)																		a155 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		a155 = (( (Float)(this633) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float r155;
HXDLIN(  40)																	int this634 = ((this632 >> 16) & 255);
HXDLIN(  40)																	if ((this634 == 0)) {
HXLINE(  40)																		r155 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		r155 = (( (Float)(this634) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float g155;
HXDLIN(  40)																	int this635 = ((this632 >> 8) & 255);
HXDLIN(  40)																	if ((this635 == 0)) {
HXLINE(  40)																		g155 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		g155 = (( (Float)(this635) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float b155;
HXDLIN(  40)																	int this636 = (this632 & 255);
HXDLIN(  40)																	if ((this636 == 0)) {
HXLINE(  40)																		b155 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		b155 = (( (Float)(this636) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float a254;
HXDLIN(  40)																	int this637 = ((col7 >> 24) & 255);
HXDLIN(  40)																	if ((this637 == 0)) {
HXLINE(  40)																		a254 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		a254 = (( (Float)(this637) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float r254;
HXDLIN(  40)																	int this638 = ((col7 >> 16) & 255);
HXDLIN(  40)																	if ((this638 == 0)) {
HXLINE(  40)																		r254 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		r254 = (( (Float)(this638) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float g254;
HXDLIN(  40)																	int this639 = ((col7 >> 8) & 255);
HXDLIN(  40)																	if ((this639 == 0)) {
HXLINE(  40)																		g254 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		g254 = (( (Float)(this639) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float b254;
HXDLIN(  40)																	int this640 = (col7 & 255);
HXDLIN(  40)																	if ((this640 == 0)) {
HXLINE(  40)																		b254 = ((Float)0.);
            																	}
            																	else {
HXLINE(  40)																		b254 = (( (Float)(this640) ) / ( (Float)(255) ));
            																	}
HXDLIN(  40)																	Float a354 = (a155 * (( (Float)(1) ) - a254));
HXDLIN(  40)																	int r80 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r155 * a354) + (r254 * a254))));
HXDLIN(  40)																	int g80 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g155 * a354) + (g254 * a254))));
HXDLIN(  40)																	int b104 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b155 * a354) + (b254 * a254))));
HXDLIN(  40)																	int a101 = ::Std_obj::_hx_int((( (Float)(255) ) * (a354 + a254)));
HXDLIN(  40)																	int blended54 = ((((a101 << 24) | (r80 << 16)) | (g80 << 8)) | b104);
HXDLIN(  40)																	{
HXLINE(  40)																		int _hx_tmp162;
HXDLIN(  40)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																			_hx_tmp162 = ((((((blended54 >> 24) & 255) << 24) | ((blended54 & 255) << 16)) | (((blended54 >> 8) & 255) << 8)) | ((blended54 >> 16) & 255));
            																		}
            																		else {
HXLINE(  40)																			_hx_tmp162 = blended54;
            																		}
HXDLIN(  40)																		::iterMagic::Iimg_obj::set(undoImage21->image,location54,_hx_tmp162);
            																	}
            																}
            																else {
HXLINE(  40)																	::Dynamic this641 = undoImage21->image;
HXDLIN(  40)																	int index44;
HXDLIN(  40)																	if (undoImage21->useVirtualPos) {
HXLINE(  40)																		index44 = ::Std_obj::_hx_int(((((( (Float)(y46) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x50) - undoImage21->virtualX));
            																	}
            																	else {
HXLINE(  40)																		index44 = ::Std_obj::_hx_int(( (Float)(((y46 * undoImage21->width) + x50)) ));
            																	}
HXDLIN(  40)																	int _hx_tmp163;
HXDLIN(  40)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																		_hx_tmp163 = ((((((c37 >> 24) & 255) << 24) | ((c37 & 255) << 16)) | (((c37 >> 8) & 255) << 8)) | ((c37 >> 16) & 255));
            																	}
            																	else {
HXLINE(  40)																		_hx_tmp163 = c37;
            																	}
HXDLIN(  40)																	::iterMagic::Iimg_obj::set(this641,index44,_hx_tmp163);
            																}
            															}
            															else {
HXLINE(  40)																if (forceClear7) {
HXLINE(  40)																	::Dynamic this642 = undoImage21->image;
HXDLIN(  40)																	int x51 = (dx12 - rectLeft7);
HXDLIN(  40)																	int y47 = (dy12 - rectTop7);
HXDLIN(  40)																	int index45;
HXDLIN(  40)																	if (undoImage21->useVirtualPos) {
HXLINE(  40)																		index45 = ::Std_obj::_hx_int(((((( (Float)(y47) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x51) - undoImage21->virtualX));
            																	}
            																	else {
HXLINE(  40)																		index45 = ::Std_obj::_hx_int(( (Float)(((y47 * undoImage21->width) + x51)) ));
            																	}
HXDLIN(  40)																	::iterMagic::Iimg_obj::set(this642,index45,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  40)									bool found7 = false;
HXDLIN(  40)									Float min37 = ( (Float)(0) );
HXDLIN(  40)									Float max5 = ( (Float)(0) );
HXDLIN(  40)									int a102 = 0;
HXDLIN(  40)									int r81 = 0;
HXDLIN(  40)									int g81 = 0;
HXDLIN(  40)									int b105 = 0;
HXDLIN(  40)									{
HXLINE(  40)										int _g_min14 = xIter37->start;
HXDLIN(  40)										int _g_max14 = xIter37->max;
HXDLIN(  40)										while((_g_min14 < _g_max14)){
HXLINE(  40)											_g_min14 = (_g_min14 + 1);
HXDLIN(  40)											int px6 = (_g_min14 - 1);
HXDLIN(  40)											Float pcx5 = (( (Float)(px6) ) - dx10);
HXLINE( 695)											found7 = false;
HXLINE(  40)											{
HXLINE(  40)												int _g_min15 = yIter37->start;
HXDLIN(  40)												int _g_max15 = yIter37->max;
HXDLIN(  40)												while((_g_min15 < _g_max15)){
HXLINE(  40)													_g_min15 = (_g_min15 + 1);
HXDLIN(  40)													int py6 = (_g_min15 - 1);
HXDLIN(  40)													Float pcy5 = (( (Float)(py6) ) - dy10);
HXDLIN(  40)													Float dot315 = ((pcx5 * bcx5) + (pcy5 * bcy5));
HXDLIN(  40)													Float dot325 = ((pcx5 * acx5) + (pcy5 * acy5));
HXDLIN(  40)													Float ratioA5 = (((dot225 * dot315) - (dot125 * dot325)) * denom15);
HXDLIN(  40)													Float ratioB5 = (((dot115 * dot325) - (dot125 * dot315)) * denom15);
HXDLIN(  40)													Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN(  40)													bool _hx_tmp164;
HXDLIN(  40)													bool _hx_tmp165;
HXDLIN(  40)													if ((ratioA5 >= 0)) {
HXLINE(  40)														_hx_tmp165 = (ratioB5 >= 0);
            													}
            													else {
HXLINE(  40)														_hx_tmp165 = false;
            													}
HXDLIN(  40)													if (_hx_tmp165) {
HXLINE(  40)														_hx_tmp164 = (ratioC5 >= 0);
            													}
            													else {
HXLINE(  40)														_hx_tmp164 = false;
            													}
HXDLIN(  40)													if (_hx_tmp164) {
HXLINE(  40)														if (softBC1) {
HXLINE(  40)															if (softCD1) {
HXLINE(  40)																if ((ratioB5 < ratioC5)) {
HXLINE(  40)																	min37 = ratioB5;
            																}
            																else {
HXLINE(  40)																	min37 = ratioC5;
            																}
HXDLIN(  40)																if ((ratioA5 > ratioB5)) {
HXLINE(  40)																	max5 = ratioA5;
            																}
            																else {
HXLINE(  40)																	max5 = ratioB5;
            																}
HXDLIN(  40)																if (!((max5 > ratioC5))) {
HXLINE(  40)																	max5 = ratioC5;
            																}
HXLINE( 735)																max5 = ((( (Float)(1) ) - max5) / ( (Float)(2) ));
HXLINE(  40)																if (!((min37 < max5))) {
HXLINE(  40)																	min37 = ((max5 + min37) / ( (Float)(2) ));
            																}
HXDLIN(  40)																int i123 = ::Std_obj::_hx_int(((( (Float)(aA5) ) * soft1) * min37));
HXDLIN(  40)																if ((i123 > 255)) {
HXLINE(  24)																	i123 = 255;
            																}
HXLINE(  40)																if ((i123 < 0)) {
HXLINE(  25)																	i123 = 0;
            																}
HXLINE(  40)																a102 = i123;
            															}
            															else {
HXLINE( 722)																min37 = ratioC5;
HXLINE(  40)																int i124 = ::Std_obj::_hx_int(((( (Float)(aA5) ) * soft1) * min37));
HXDLIN(  40)																if ((i124 > 255)) {
HXLINE(  24)																	i124 = 255;
            																}
HXLINE(  40)																if ((i124 < 0)) {
HXLINE(  25)																	i124 = 0;
            																}
HXLINE(  40)																a102 = i124;
            															}
            														}
            														else {
HXLINE(  40)															if (softCD1) {
HXLINE( 712)																min37 = ratioB5;
HXLINE(  40)																int i125 = ::Std_obj::_hx_int(((( (Float)(aA5) ) * soft1) * min37));
HXDLIN(  40)																if ((i125 > 255)) {
HXLINE(  24)																	i125 = 255;
            																}
HXLINE(  40)																if ((i125 < 0)) {
HXLINE(  25)																	i125 = 0;
            																}
HXLINE(  40)																a102 = i125;
            															}
            															else {
HXLINE(  40)																int i126 = ::Std_obj::_hx_int(( (Float)(aA5) ));
HXDLIN(  40)																if ((i126 > 255)) {
HXLINE(  24)																	i126 = 255;
            																}
HXLINE(  40)																if ((i126 < 0)) {
HXLINE(  25)																	i126 = 0;
            																}
HXLINE(  40)																a102 = i126;
            															}
            														}
HXDLIN(  40)														int i127 = ::Std_obj::_hx_int(( (Float)(rA5) ));
HXDLIN(  40)														if ((i127 > 255)) {
HXLINE(  24)															i127 = 255;
            														}
HXLINE(  40)														if ((i127 < 0)) {
HXLINE(  25)															i127 = 0;
            														}
HXLINE( 747)														r81 = i127;
HXLINE(  40)														int i128 = ::Std_obj::_hx_int(( (Float)(gA5) ));
HXDLIN(  40)														if ((i128 > 255)) {
HXLINE(  24)															i128 = 255;
            														}
HXLINE(  40)														if ((i128 < 0)) {
HXLINE(  25)															i128 = 0;
            														}
HXLINE( 748)														g81 = i128;
HXLINE(  40)														int i129 = ::Std_obj::_hx_int(( (Float)(bA5) ));
HXDLIN(  40)														if ((i129 > 255)) {
HXLINE(  24)															i129 = 255;
            														}
HXLINE(  40)														if ((i129 < 0)) {
HXLINE(  25)															i129 = 0;
            														}
HXLINE( 749)														b105 = i129;
HXLINE(  40)														{
HXLINE(  40)															int location55;
HXDLIN(  40)															if (this541->useVirtualPos) {
HXLINE(  40)																location55 = ::Std_obj::_hx_int(((((( (Float)(py6) ) - this541->virtualY) * ( (Float)(this541->width) )) + px6) - this541->virtualX));
            															}
            															else {
HXLINE(  40)																location55 = ::Std_obj::_hx_int(( (Float)(((py6 * this541->width) + px6)) ));
            															}
HXDLIN(  40)															bool _hx_tmp166;
HXDLIN(  40)															if (this541->transparent) {
HXLINE(  40)																_hx_tmp166 = (a102 < 254);
            															}
            															else {
HXLINE(  40)																_hx_tmp166 = false;
            															}
HXDLIN(  40)															if (_hx_tmp166) {
HXLINE(  40)																int this643 = ::iterMagic::Iimg_obj::get(this541->image,location55);
HXDLIN(  40)																int old33;
HXDLIN(  40)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																	old33 = ((((((this643 >> 24) & 255) << 24) | ((this643 & 255) << 16)) | (((this643 >> 8) & 255) << 8)) | ((this643 >> 16) & 255));
            																}
            																else {
HXLINE(  40)																	old33 = this643;
            																}
HXDLIN(  40)																int rhs33 = ((((a102 << 24) | (r81 << 16)) | (g81 << 8)) | b105);
HXDLIN(  40)																Float a156;
HXDLIN(  40)																int this644 = ((old33 >> 24) & 255);
HXDLIN(  40)																if ((this644 == 0)) {
HXLINE(  40)																	a156 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	a156 = (( (Float)(this644) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float r156;
HXDLIN(  40)																int this645 = ((old33 >> 16) & 255);
HXDLIN(  40)																if ((this645 == 0)) {
HXLINE(  40)																	r156 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	r156 = (( (Float)(this645) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float g156;
HXDLIN(  40)																int this646 = ((old33 >> 8) & 255);
HXDLIN(  40)																if ((this646 == 0)) {
HXLINE(  40)																	g156 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	g156 = (( (Float)(this646) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float b156;
HXDLIN(  40)																int this647 = (old33 & 255);
HXDLIN(  40)																if ((this647 == 0)) {
HXLINE(  40)																	b156 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	b156 = (( (Float)(this647) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float a255;
HXDLIN(  40)																int this648 = ((rhs33 >> 24) & 255);
HXDLIN(  40)																if ((this648 == 0)) {
HXLINE(  40)																	a255 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	a255 = (( (Float)(this648) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float r255;
HXDLIN(  40)																int this649 = ((rhs33 >> 16) & 255);
HXDLIN(  40)																if ((this649 == 0)) {
HXLINE(  40)																	r255 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	r255 = (( (Float)(this649) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float g255;
HXDLIN(  40)																int this650 = ((rhs33 >> 8) & 255);
HXDLIN(  40)																if ((this650 == 0)) {
HXLINE(  40)																	g255 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	g255 = (( (Float)(this650) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float b255;
HXDLIN(  40)																int this651 = (rhs33 & 255);
HXDLIN(  40)																if ((this651 == 0)) {
HXLINE(  40)																	b255 = ((Float)0.);
            																}
            																else {
HXLINE(  40)																	b255 = (( (Float)(this651) ) / ( (Float)(255) ));
            																}
HXDLIN(  40)																Float a355 = (a156 * (( (Float)(1) ) - a255));
HXDLIN(  40)																int r82 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r156 * a355) + (r255 * a255))));
HXDLIN(  40)																int g82 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g156 * a355) + (g255 * a255))));
HXDLIN(  40)																int b106 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b156 * a355) + (b255 * a255))));
HXDLIN(  40)																int a103 = ::Std_obj::_hx_int((( (Float)(255) ) * (a355 + a255)));
HXDLIN(  40)																int blended55 = ((((a103 << 24) | (r82 << 16)) | (g82 << 8)) | b106);
HXDLIN(  40)																{
HXLINE(  40)																	int _hx_tmp167;
HXDLIN(  40)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  40)																		_hx_tmp167 = ((((((blended55 >> 24) & 255) << 24) | ((blended55 & 255) << 16)) | (((blended55 >> 8) & 255) << 8)) | ((blended55 >> 16) & 255));
            																	}
            																	else {
HXLINE(  40)																		_hx_tmp167 = blended55;
            																	}
HXDLIN(  40)																	::iterMagic::Iimg_obj::set(this541->image,location55,_hx_tmp167);
            																}
            															}
            															else {
HXLINE(  40)																int value33;
HXDLIN(  40)																if (this541->isLittle) {
HXLINE(  40)																	value33 = ((((a102 << 24) | (b105 << 16)) | (g81 << 8)) | r81);
            																}
            																else {
HXLINE(  40)																	value33 = ((((a102 << 24) | (r81 << 16)) | (g81 << 8)) | b105);
            																}
HXDLIN(  40)																::iterMagic::Iimg_obj::set(this541->image,location55,value33);
            															}
            														}
HXLINE( 751)														found7 = true;
            													}
            													else {
HXLINE(  40)														if (found7) {
HXLINE(  40)															goto _hx_goto_113;
            														}
            													}
            												}
            												_hx_goto_113:;
            											}
            										}
            									}
HXDLIN(  40)									if ((hasHit2 == false)) {
HXLINE(  40)										 ::pi_xy::algo::HitTri v29 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx4,by4,cx4,cy4,dx10,dy10,true);
HXDLIN(  40)										if (hasUndo7) {
HXLINE(  40)											v29->undoImage = undoImage21;
HXDLIN(  40)											v29->undoX = xIter37->start;
HXDLIN(  40)											v29->undoY = yIter37->start;
            										}
            									}
            								}
HXDLIN(  40)								if ((hasHit2 == true)) {
HXLINE(  40)									 ::pi_xy::algo::HitQuad v30 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax2,ay2,bx4,by4,cx4,cy4,dx10,dy10,true);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  44)		return pixelImage;
            	}



::hx::ObjectPtr< LineShape_obj > LineShape_obj::__new( ::Dynamic opacity, ::Dynamic visibility, ::Dynamic strokeColor, ::Dynamic strokeWidth,::Array< ::String > strokeDashGapArray, ::Dynamic x1, ::Dynamic y1, ::Dynamic x2, ::Dynamic y2, ::Dynamic edgeSoft) {
	::hx::ObjectPtr< LineShape_obj > __this = new LineShape_obj();
	__this->__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,x1,y1,x2,y2,edgeSoft);
	return __this;
}

::hx::ObjectPtr< LineShape_obj > LineShape_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic opacity, ::Dynamic visibility, ::Dynamic strokeColor, ::Dynamic strokeWidth,::Array< ::String > strokeDashGapArray, ::Dynamic x1, ::Dynamic y1, ::Dynamic x2, ::Dynamic y2, ::Dynamic edgeSoft) {
	LineShape_obj *__this = (LineShape_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LineShape_obj), true, "pi_xy.triangleGML.LineShape"));
	*(void **)__this = LineShape_obj::_hx_vtable;
	__this->__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,x1,y1,x2,y2,edgeSoft);
	return __this;
}

LineShape_obj::LineShape_obj()
{
}

::hx::Val LineShape_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"luxury") ) { return ::hx::Val( luxury ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LineShape_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"luxury") ) { luxury=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LineShape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("luxury",0d,9d,17,dc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LineShape_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(LineShape_obj,luxury),HX_("luxury",0d,9d,17,dc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LineShape_obj_sStaticStorageInfo = 0;
#endif

static ::String LineShape_obj_sMemberFields[] = {
	HX_("luxury",0d,9d,17,dc),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class LineShape_obj::__mClass;

void LineShape_obj::__register()
{
	LineShape_obj _hx_dummy;
	LineShape_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.triangleGML.LineShape",b6,5c,e2,af);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LineShape_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LineShape_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LineShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LineShape_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace triangleGML
