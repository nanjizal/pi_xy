// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_ui_GameInputDevice
#define INCLUDED_nme_ui_GameInputDevice

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,ui,GameInputControl)
HX_DECLARE_CLASS2(nme,ui,GameInputDevice)
HX_DECLARE_CLASS2(nme,utils,ByteArray)
HX_DECLARE_CLASS2(nme,utils,IDataInput)
HX_DECLARE_CLASS2(nme,utils,IDataOutput)
HX_DECLARE_CLASS2(nme,utils,IMemoryRange)

namespace nme{
namespace ui{


class HXCPP_CLASS_ATTRIBUTES GameInputDevice_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef GameInputDevice_obj OBJ_;
		GameInputDevice_obj();

	public:
		enum { _hx_ClassId = 0x02280a18 };

		void __construct(::String id,::String name);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.ui.GameInputDevice")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.ui.GameInputDevice"); }
		static ::hx::ObjectPtr< GameInputDevice_obj > __new(::String id,::String name);
		static ::hx::ObjectPtr< GameInputDevice_obj > __alloc(::hx::Ctx *_hx_ctx,::String id,::String name);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~GameInputDevice_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("GameInputDevice",4e,e5,cf,03); }

		static void __boot();
		static int MAX_BUFFER_SIZE;
		bool enabled;
		::String id;
		::String name;
		int sampleInterval;
		 ::haxe::ds::IntMap nmeAxis;
		 ::haxe::ds::IntMap nmeButton;
		::Array< ::Dynamic> nmeControls;
		 ::Dynamic nmeHandle;
		virtual ::String toString();
		::Dynamic toString_dyn();

		 ::nme::ui::GameInputControl getButtonAt(int i);
		::Dynamic getButtonAt_dyn();

		 ::nme::ui::GameInputControl getAxisAt(int i);
		::Dynamic getAxisAt_dyn();

		int getCachedSamples( ::nme::utils::ByteArray data,::hx::Null< bool >  append);
		::Dynamic getCachedSamples_dyn();

		bool isButtonDown(int buttonId);
		::Dynamic isButtonDown_dyn();

		bool readDPadUp();
		::Dynamic readDPadUp_dyn();

		bool readDPadDown();
		::Dynamic readDPadDown_dyn();

		bool readDPadLeft();
		::Dynamic readDPadLeft_dyn();

		bool readDPadRight();
		::Dynamic readDPadRight_dyn();

		Float getX0();
		::Dynamic getX0_dyn();

		Float getY0();
		::Dynamic getY0_dyn();

		bool isLeft();
		::Dynamic isLeft_dyn();

		bool isRight();
		::Dynamic isRight_dyn();

		bool isUp();
		::Dynamic isUp_dyn();

		bool isDown();
		::Dynamic isDown_dyn();

		int getDx();
		::Dynamic getDx_dyn();

		int getDy();
		::Dynamic getDy_dyn();

		 ::nme::ui::GameInputControl getControlAt(int i);
		::Dynamic getControlAt_dyn();

		void startCachingSamples(int numSamples,::Array< ::String > controls);
		::Dynamic startCachingSamples_dyn();

		void stopCachingSamples();
		::Dynamic stopCachingSamples_dyn();

		int get_numControls();
		::Dynamic get_numControls_dyn();

};

} // end namespace nme
} // end namespace ui

#endif /* INCLUDED_nme_ui_GameInputDevice */ 
