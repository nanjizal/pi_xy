// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_events_Listener
#define INCLUDED_nme_events_Listener

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nme,events,Event)
HX_DECLARE_CLASS2(nme,events,Listener)
HX_DECLARE_CLASS2(nme,utils,WeakRef)

namespace nme{
namespace events{


class HXCPP_CLASS_ATTRIBUTES Listener_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Listener_obj OBJ_;
		Listener_obj();

	public:
		enum { _hx_ClassId = 0x6ef96073 };

		void __construct( ::Dynamic inListener,bool inUseCapture,int inPriority,bool inUseWeakRef);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.events.Listener")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.events.Listener"); }
		static ::hx::ObjectPtr< Listener_obj > __new( ::Dynamic inListener,bool inUseCapture,int inPriority,bool inUseWeakRef);
		static ::hx::ObjectPtr< Listener_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic inListener,bool inUseCapture,int inPriority,bool inUseWeakRef);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Listener_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Listener",94,bc,e3,11); }

		static void __boot();
		static int sIDs;
		int mID;
		 ::nme::utils::WeakRef mListner;
		int mPriority;
		bool mUseCapture;
		void dispatchEvent( ::nme::events::Event event);
		::Dynamic dispatchEvent_dyn();

		bool Is( ::Dynamic inListener,bool inCapture);
		::Dynamic Is_dyn();

};

} // end namespace nme
} // end namespace events

#endif /* INCLUDED_nme_events_Listener */ 
