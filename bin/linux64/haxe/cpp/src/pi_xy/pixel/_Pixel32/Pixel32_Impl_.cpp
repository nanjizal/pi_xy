// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_pixel__Pixel32_Pixel32_Impl_
#include <pi_xy/pixel/_Pixel32/Pixel32_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_14__new,"pi_xy.pixel._Pixel32.Pixel32_Impl_","_new",0x8e1bf1a3,"pi_xy.pixel._Pixel32.Pixel32_Impl_._new","pi_xy/pixel/Pixel32.hx",14,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_23_hexChannel,"pi_xy.pixel._Pixel32.Pixel32_Impl_","hexChannel",0x9fda40ea,"pi_xy.pixel._Pixel32.Pixel32_Impl_.hexChannel","pi_xy/pixel/Pixel32.hx",23,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_39_get_c0,"pi_xy.pixel._Pixel32.Pixel32_Impl_","get_c0",0x504dde78,"pi_xy.pixel._Pixel32.Pixel32_Impl_.get_c0","pi_xy/pixel/Pixel32.hx",39,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_41_set_c0,"pi_xy.pixel._Pixel32.Pixel32_Impl_","set_c0",0x1c9632ec,"pi_xy.pixel._Pixel32.Pixel32_Impl_.set_c0","pi_xy/pixel/Pixel32.hx",41,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_48_get_c1,"pi_xy.pixel._Pixel32.Pixel32_Impl_","get_c1",0x504dde79,"pi_xy.pixel._Pixel32.Pixel32_Impl_.get_c1","pi_xy/pixel/Pixel32.hx",48,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_50_set_c1,"pi_xy.pixel._Pixel32.Pixel32_Impl_","set_c1",0x1c9632ed,"pi_xy.pixel._Pixel32.Pixel32_Impl_.set_c1","pi_xy/pixel/Pixel32.hx",50,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_57_get_c2,"pi_xy.pixel._Pixel32.Pixel32_Impl_","get_c2",0x504dde7a,"pi_xy.pixel._Pixel32.Pixel32_Impl_.get_c2","pi_xy/pixel/Pixel32.hx",57,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_59_set_c2,"pi_xy.pixel._Pixel32.Pixel32_Impl_","set_c2",0x1c9632ee,"pi_xy.pixel._Pixel32.Pixel32_Impl_.set_c2","pi_xy/pixel/Pixel32.hx",59,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_66_get_c3,"pi_xy.pixel._Pixel32.Pixel32_Impl_","get_c3",0x504dde7b,"pi_xy.pixel._Pixel32.Pixel32_Impl_.get_c3","pi_xy/pixel/Pixel32.hx",66,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_68_set_c3,"pi_xy.pixel._Pixel32.Pixel32_Impl_","set_c3",0x1c9632ef,"pi_xy.pixel._Pixel32.Pixel32_Impl_.set_c3","pi_xy/pixel/Pixel32.hx",68,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_74_flip13,"pi_xy.pixel._Pixel32.Pixel32_Impl_","flip13",0xea87f391,"pi_xy.pixel._Pixel32.Pixel32_Impl_.flip13","pi_xy/pixel/Pixel32.hx",74,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_77_transferColor,"pi_xy.pixel._Pixel32.Pixel32_Impl_","transferColor",0x4134e1b6,"pi_xy.pixel._Pixel32.Pixel32_Impl_.transferColor","pi_xy/pixel/Pixel32.hx",77,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_80_stringHash,"pi_xy.pixel._Pixel32.Pixel32_Impl_","stringHash",0xd5973b01,"pi_xy.pixel._Pixel32.Pixel32_Impl_.stringHash","pi_xy/pixel/Pixel32.hx",80,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_83_isTransparent,"pi_xy.pixel._Pixel32.Pixel32_Impl_","isTransparent",0xaf990706,"pi_xy.pixel._Pixel32.Pixel32_Impl_.isTransparent","pi_xy/pixel/Pixel32.hx",83,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_86_fromPixel28Alpha,"pi_xy.pixel._Pixel32.Pixel32_Impl_","fromPixel28Alpha",0x2e3dd3be,"pi_xy.pixel._Pixel32.Pixel32_Impl_.fromPixel28Alpha","pi_xy/pixel/Pixel32.hx",86,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_89_fromChannels,"pi_xy.pixel._Pixel32.Pixel32_Impl_","fromChannels",0x8e7b741c,"pi_xy.pixel._Pixel32.Pixel32_Impl_.fromChannels","pi_xy/pixel/Pixel32.hx",89,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_92_from_argb,"pi_xy.pixel._Pixel32.Pixel32_Impl_","from_argb",0xdb5497ff,"pi_xy.pixel._Pixel32.Pixel32_Impl_.from_argb","pi_xy/pixel/Pixel32.hx",92,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_99_maskPixel,"pi_xy.pixel._Pixel32.Pixel32_Impl_","maskPixel",0x0f7f9278,"pi_xy.pixel._Pixel32.Pixel32_Impl_.maskPixel","pi_xy/pixel/Pixel32.hx",99,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_118_channelBlend,"pi_xy.pixel._Pixel32.Pixel32_Impl_","channelBlend",0x3d1da2d0,"pi_xy.pixel._Pixel32.Pixel32_Impl_.channelBlend","pi_xy/pixel/Pixel32.hx",118,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_136_alphaBlend,"pi_xy.pixel._Pixel32.Pixel32_Impl_","alphaBlend",0xb42cb5d5,"pi_xy.pixel._Pixel32.Pixel32_Impl_.alphaBlend","pi_xy/pixel/Pixel32.hx",136,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_154_colBlendFunc,"pi_xy.pixel._Pixel32.Pixel32_Impl_","colBlendFunc",0x99c74217,"pi_xy.pixel._Pixel32.Pixel32_Impl_.colBlendFunc","pi_xy/pixel/Pixel32.hx",154,0x4828070a)
HX_LOCAL_STACK_FRAME(_hx_pos_17e780223c1d0060_157_alphaBlendFunc,"pi_xy.pixel._Pixel32.Pixel32_Impl_","alphaBlendFunc",0x9422dbb9,"pi_xy.pixel._Pixel32.Pixel32_Impl_.alphaBlendFunc","pi_xy/pixel/Pixel32.hx",157,0x4828070a)
namespace pi_xy{
namespace pixel{
namespace _Pixel32{

void Pixel32_Impl__obj::__construct() { }

Dynamic Pixel32_Impl__obj::__CreateEmpty() { return new Pixel32_Impl__obj; }

void *Pixel32_Impl__obj::_hx_vtable = 0;

Dynamic Pixel32_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Pixel32_Impl__obj > _hx_result = new Pixel32_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Pixel32_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x668e05a0;
}

int Pixel32_Impl__obj::_new(int v){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_14__new)
HXDLIN(  14)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Pixel32_Impl__obj,_new,return )

int Pixel32_Impl__obj::hexChannel(int this1,int i){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_23_hexChannel)
HXDLIN(  23)		switch((int)(i)){
            			case (int)0: {
HXLINE(  25)				return ((this1 >> 24) & 255);
            			}
            			break;
            			case (int)1: {
HXLINE(  27)				return ((this1 >> 16) & 255);
            			}
            			break;
            			case (int)2: {
HXLINE(  29)				return ((this1 >> 8) & 255);
            			}
            			break;
            			case (int)3: {
HXLINE(  31)				return (this1 & 255);
            			}
            			break;
            			default:{
HXLINE(  33)				return 0;
            			}
            		}
HXLINE(  23)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Pixel32_Impl__obj,hexChannel,return )

int Pixel32_Impl__obj::get_c0(int this1){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_39_get_c0)
HXDLIN(  39)		return ((this1 >> 24) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Pixel32_Impl__obj,get_c0,return )

int Pixel32_Impl__obj::set_c0(int this1,int v){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_41_set_c0)
HXLINE(  42)		this1 = ((((v << 24) | (((this1 >> 16) & 255) << 16)) | (((this1 >> 8) & 255) << 8)) | (this1 & 255));
HXLINE(  43)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Pixel32_Impl__obj,set_c0,return )

int Pixel32_Impl__obj::get_c1(int this1){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_48_get_c1)
HXDLIN(  48)		return ((this1 >> 16) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Pixel32_Impl__obj,get_c1,return )

int Pixel32_Impl__obj::set_c1(int this1,int v){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_50_set_c1)
HXLINE(  51)		this1 = ((((((this1 >> 24) & 255) << 24) | (v << 16)) | (((this1 >> 8) & 255) << 8)) | (this1 & 255));
HXLINE(  52)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Pixel32_Impl__obj,set_c1,return )

int Pixel32_Impl__obj::get_c2(int this1){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_57_get_c2)
HXDLIN(  57)		return ((this1 >> 8) & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Pixel32_Impl__obj,get_c2,return )

int Pixel32_Impl__obj::set_c2(int this1,int v){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_59_set_c2)
HXLINE(  60)		this1 = ((((((this1 >> 24) & 255) << 24) | (((this1 >> 16) & 255) << 16)) | (v << 8)) | (this1 & 255));
HXLINE(  61)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Pixel32_Impl__obj,set_c2,return )

int Pixel32_Impl__obj::get_c3(int this1){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_66_get_c3)
HXDLIN(  66)		return (this1 & 255);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Pixel32_Impl__obj,get_c3,return )

int Pixel32_Impl__obj::set_c3(int this1,int v){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_68_set_c3)
HXLINE(  69)		this1 = ((((((this1 >> 24) & 255) << 24) | (((this1 >> 16) & 255) << 16)) | (((this1 >> 8) & 255) << 8)) | v);
HXLINE(  70)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Pixel32_Impl__obj,set_c3,return )

int Pixel32_Impl__obj::flip13(int this1){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_74_flip13)
HXDLIN(  74)		return ((((((this1 >> 24) & 255) << 24) | ((this1 & 255) << 16)) | (((this1 >> 8) & 255) << 8)) | ((this1 >> 16) & 255));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Pixel32_Impl__obj,flip13,return )

int Pixel32_Impl__obj::transferColor(int this1){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_77_transferColor)
HXDLIN(  77)		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXDLIN(  77)			return ((((((this1 >> 24) & 255) << 24) | ((this1 & 255) << 16)) | (((this1 >> 8) & 255) << 8)) | ((this1 >> 16) & 255));
            		}
            		else {
HXDLIN(  77)			return this1;
            		}
HXDLIN(  77)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Pixel32_Impl__obj,transferColor,return )

::String Pixel32_Impl__obj::stringHash(int this1){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_80_stringHash)
HXDLIN(  80)		return (HX_("#",23,00,00,00) + ::StringTools_obj::hex(this1,8));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Pixel32_Impl__obj,stringHash,return )

bool Pixel32_Impl__obj::isTransparent(int this1){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_83_isTransparent)
HXDLIN(  83)		return (((this1 >> 24) & 255) < 254);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Pixel32_Impl__obj,isTransparent,return )

int Pixel32_Impl__obj::fromPixel28Alpha(int col,int alpha){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_86_fromPixel28Alpha)
HXDLIN(  86)		return ((alpha << 24) | col);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Pixel32_Impl__obj,fromPixel28Alpha,return )

int Pixel32_Impl__obj::fromChannels(int ch0,int ch1,int ch2,int ch3){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_89_fromChannels)
HXDLIN(  89)		return ((((ch0 << 24) | (ch1 << 16)) | (ch2 << 8)) | ch3);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Pixel32_Impl__obj,fromChannels,return )

int Pixel32_Impl__obj::from_argb(Float a,Float r,Float g,Float b){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_92_from_argb)
HXDLIN(  92)		return ((((::Math_obj::round((a * ( (Float)(255) ))) << 24) | (::Math_obj::round((r * ( (Float)(255) ))) << 16)) | (::Math_obj::round((g * ( (Float)(255) ))) << 8)) | ::Math_obj::round((b * ( (Float)(255) ))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Pixel32_Impl__obj,from_argb,return )

int Pixel32_Impl__obj::maskPixel(int this1,int m){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_99_maskPixel)
HXDLIN(  99)		if ((m == 0)) {
HXLINE( 100)			return this1;
            		}
            		else {
HXLINE( 102)			Float m0;
HXDLIN( 102)			int this2 = ((m >> 24) & 255);
HXDLIN( 102)			if ((this2 == 0)) {
HXLINE( 102)				m0 = ((Float)0.);
            			}
            			else {
HXLINE( 102)				m0 = (( (Float)(this2) ) / ( (Float)(255) ));
            			}
HXLINE( 103)			Float m1;
HXDLIN( 103)			int this3 = ((m >> 16) & 255);
HXDLIN( 103)			if ((this3 == 0)) {
HXLINE( 103)				m1 = ((Float)0.);
            			}
            			else {
HXLINE( 103)				m1 = (( (Float)(this3) ) / ( (Float)(255) ));
            			}
HXLINE( 104)			Float m2;
HXDLIN( 104)			int this4 = ((m >> 8) & 255);
HXDLIN( 104)			if ((this4 == 0)) {
HXLINE( 104)				m2 = ((Float)0.);
            			}
            			else {
HXLINE( 104)				m2 = (( (Float)(this4) ) / ( (Float)(255) ));
            			}
HXLINE( 105)			Float m3;
HXDLIN( 105)			int this5 = (m & 255);
HXDLIN( 105)			if ((this5 == 0)) {
HXLINE( 105)				m3 = ((Float)0.);
            			}
            			else {
HXLINE( 105)				m3 = (( (Float)(this5) ) / ( (Float)(255) ));
            			}
HXLINE( 107)			int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this1 >> 24) & 255)) )));
HXLINE( 108)			int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this1 >> 16) & 255)) )));
HXLINE( 109)			int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this1 >> 8) & 255)) )));
HXLINE( 110)			int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this1 & 255)) )));
HXLINE( 111)			return ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            		}
HXLINE(  99)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Pixel32_Impl__obj,maskPixel,return )

int Pixel32_Impl__obj::channelBlend(int this1,int ch0,int ch1,int ch2,int ch3){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_118_channelBlend)
HXLINE( 119)		Float a1;
HXDLIN( 119)		int this2 = ((this1 >> 24) & 255);
HXDLIN( 119)		if ((this2 == 0)) {
HXLINE( 119)			a1 = ((Float)0.);
            		}
            		else {
HXLINE( 119)			a1 = (( (Float)(this2) ) / ( (Float)(255) ));
            		}
HXLINE( 120)		Float r1;
HXDLIN( 120)		int this3 = ((this1 >> 16) & 255);
HXDLIN( 120)		if ((this3 == 0)) {
HXLINE( 120)			r1 = ((Float)0.);
            		}
            		else {
HXLINE( 120)			r1 = (( (Float)(this3) ) / ( (Float)(255) ));
            		}
HXLINE( 121)		Float g1;
HXDLIN( 121)		int this4 = ((this1 >> 8) & 255);
HXDLIN( 121)		if ((this4 == 0)) {
HXLINE( 121)			g1 = ((Float)0.);
            		}
            		else {
HXLINE( 121)			g1 = (( (Float)(this4) ) / ( (Float)(255) ));
            		}
HXLINE( 122)		Float b1;
HXDLIN( 122)		int this5 = (this1 & 255);
HXDLIN( 122)		if ((this5 == 0)) {
HXLINE( 122)			b1 = ((Float)0.);
            		}
            		else {
HXLINE( 122)			b1 = (( (Float)(this5) ) / ( (Float)(255) ));
            		}
HXLINE( 123)		Float a2;
HXDLIN( 123)		if ((ch0 == 0)) {
HXLINE( 123)			a2 = ((Float)0.);
            		}
            		else {
HXLINE( 123)			a2 = (( (Float)(ch0) ) / ( (Float)(255) ));
            		}
HXLINE( 124)		Float r2;
HXDLIN( 124)		if ((ch1 == 0)) {
HXLINE( 124)			r2 = ((Float)0.);
            		}
            		else {
HXLINE( 124)			r2 = (( (Float)(ch1) ) / ( (Float)(255) ));
            		}
HXLINE( 125)		Float g2;
HXDLIN( 125)		if ((ch2 == 0)) {
HXLINE( 125)			g2 = ((Float)0.);
            		}
            		else {
HXLINE( 125)			g2 = (( (Float)(ch2) ) / ( (Float)(255) ));
            		}
HXLINE( 126)		Float b2;
HXDLIN( 126)		if ((ch3 == 0)) {
HXLINE( 126)			b2 = ((Float)0.);
            		}
            		else {
HXLINE( 126)			b2 = (( (Float)(ch3) ) / ( (Float)(255) ));
            		}
HXLINE( 127)		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXLINE( 128)		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXLINE( 129)		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXLINE( 130)		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXLINE( 131)		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXLINE( 132)		return ((((a << 24) | (r << 16)) | (g << 8)) | b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Pixel32_Impl__obj,channelBlend,return )

int Pixel32_Impl__obj::alphaBlend(int this1,int rhs){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_136_alphaBlend)
HXLINE( 137)		Float a1;
HXDLIN( 137)		int this2 = ((this1 >> 24) & 255);
HXDLIN( 137)		if ((this2 == 0)) {
HXLINE( 137)			a1 = ((Float)0.);
            		}
            		else {
HXLINE( 137)			a1 = (( (Float)(this2) ) / ( (Float)(255) ));
            		}
HXLINE( 138)		Float r1;
HXDLIN( 138)		int this3 = ((this1 >> 16) & 255);
HXDLIN( 138)		if ((this3 == 0)) {
HXLINE( 138)			r1 = ((Float)0.);
            		}
            		else {
HXLINE( 138)			r1 = (( (Float)(this3) ) / ( (Float)(255) ));
            		}
HXLINE( 139)		Float g1;
HXDLIN( 139)		int this4 = ((this1 >> 8) & 255);
HXDLIN( 139)		if ((this4 == 0)) {
HXLINE( 139)			g1 = ((Float)0.);
            		}
            		else {
HXLINE( 139)			g1 = (( (Float)(this4) ) / ( (Float)(255) ));
            		}
HXLINE( 140)		Float b1;
HXDLIN( 140)		int this5 = (this1 & 255);
HXDLIN( 140)		if ((this5 == 0)) {
HXLINE( 140)			b1 = ((Float)0.);
            		}
            		else {
HXLINE( 140)			b1 = (( (Float)(this5) ) / ( (Float)(255) ));
            		}
HXLINE( 141)		Float a2;
HXDLIN( 141)		int this6 = ((rhs >> 24) & 255);
HXDLIN( 141)		if ((this6 == 0)) {
HXLINE( 141)			a2 = ((Float)0.);
            		}
            		else {
HXLINE( 141)			a2 = (( (Float)(this6) ) / ( (Float)(255) ));
            		}
HXLINE( 142)		Float r2;
HXDLIN( 142)		int this7 = ((rhs >> 16) & 255);
HXDLIN( 142)		if ((this7 == 0)) {
HXLINE( 142)			r2 = ((Float)0.);
            		}
            		else {
HXLINE( 142)			r2 = (( (Float)(this7) ) / ( (Float)(255) ));
            		}
HXLINE( 143)		Float g2;
HXDLIN( 143)		int this8 = ((rhs >> 8) & 255);
HXDLIN( 143)		if ((this8 == 0)) {
HXLINE( 143)			g2 = ((Float)0.);
            		}
            		else {
HXLINE( 143)			g2 = (( (Float)(this8) ) / ( (Float)(255) ));
            		}
HXLINE( 144)		Float b2;
HXDLIN( 144)		int this9 = (rhs & 255);
HXDLIN( 144)		if ((this9 == 0)) {
HXLINE( 144)			b2 = ((Float)0.);
            		}
            		else {
HXLINE( 144)			b2 = (( (Float)(this9) ) / ( (Float)(255) ));
            		}
HXLINE( 145)		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXLINE( 146)		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXLINE( 147)		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXLINE( 148)		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXLINE( 149)		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXLINE( 150)		return ((((a << 24) | (r << 16)) | (g << 8)) | b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Pixel32_Impl__obj,alphaBlend,return )

int Pixel32_Impl__obj::colBlendFunc(Float x1,Float x2,Float a3,Float a2){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_154_colBlendFunc)
HXDLIN( 154)		return ::Std_obj::_hx_int((( (Float)(255) ) * ((x1 * a3) + (x2 * a2))));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Pixel32_Impl__obj,colBlendFunc,return )

int Pixel32_Impl__obj::alphaBlendFunc(Float a3,Float a2){
            	HX_STACKFRAME(&_hx_pos_17e780223c1d0060_157_alphaBlendFunc)
HXDLIN( 157)		return ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Pixel32_Impl__obj,alphaBlendFunc,return )


Pixel32_Impl__obj::Pixel32_Impl__obj()
{
}

bool Pixel32_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"get_c0") ) { outValue = get_c0_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_c0") ) { outValue = set_c0_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_c1") ) { outValue = get_c1_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_c1") ) { outValue = set_c1_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_c2") ) { outValue = get_c2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_c2") ) { outValue = set_c2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_c3") ) { outValue = get_c3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"set_c3") ) { outValue = set_c3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"flip13") ) { outValue = flip13_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"from_argb") ) { outValue = from_argb_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"maskPixel") ) { outValue = maskPixel_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hexChannel") ) { outValue = hexChannel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stringHash") ) { outValue = stringHash_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"alphaBlend") ) { outValue = alphaBlend_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromChannels") ) { outValue = fromChannels_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"channelBlend") ) { outValue = channelBlend_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"colBlendFunc") ) { outValue = colBlendFunc_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transferColor") ) { outValue = transferColor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isTransparent") ) { outValue = isTransparent_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"alphaBlendFunc") ) { outValue = alphaBlendFunc_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"fromPixel28Alpha") ) { outValue = fromPixel28Alpha_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Pixel32_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Pixel32_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Pixel32_Impl__obj::__mClass;

static ::String Pixel32_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("hexChannel",28,c7,47,c1),
	HX_("get_c0",b6,ed,2f,a3),
	HX_("set_c0",2a,42,78,6f),
	HX_("get_c1",b7,ed,2f,a3),
	HX_("set_c1",2b,42,78,6f),
	HX_("get_c2",b8,ed,2f,a3),
	HX_("set_c2",2c,42,78,6f),
	HX_("get_c3",b9,ed,2f,a3),
	HX_("set_c3",2d,42,78,6f),
	HX_("flip13",cf,02,6a,3d),
	HX_("transferColor",38,56,7a,bd),
	HX_("stringHash",3f,c1,04,f7),
	HX_("isTransparent",88,7b,de,2b),
	HX_("fromPixel28Alpha",7c,9c,c6,ed),
	HX_("fromChannels",da,85,05,0b),
	HX_("from_argb",81,23,e1,14),
	HX_("maskPixel",fa,1d,0c,49),
	HX_("channelBlend",8e,b4,a7,b9),
	HX_("alphaBlend",13,3c,9a,d5),
	HX_("colBlendFunc",d5,53,51,16),
	HX_("alphaBlendFunc",f7,58,a3,d4),
	::String(null())
};

void Pixel32_Impl__obj::__register()
{
	Pixel32_Impl__obj _hx_dummy;
	Pixel32_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.pixel._Pixel32.Pixel32_Impl_",6c,eb,c8,e4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Pixel32_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Pixel32_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Pixel32_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Pixel32_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Pixel32_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace pixel
} // end namespace _Pixel32
