// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitQuad
#include <pi_xy/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_QuadPoints_
#include <pi_xy/algo/QuadPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo__HitTriScalar_HitTriScalar_Impl_
#include <pi_xy/algo/_HitTriScalar/HitTriScalar_Impl_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_LineGradient
#include <pi_xy/triangleGML/LineGradient.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_BasicGradient
#include <pi_xy/triangleGML/triGML/BasicGradient.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_GroupShape
#include <pi_xy/triangleGML/triGML/GroupShape.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_ShapeInterface
#include <pi_xy/triangleGML/triGML/ShapeInterface.h>
#endif
#ifndef INCLUDED_pi_xy_triangleGML_triGML_shape_gradient_LineGradient_
#include <pi_xy/triangleGML/triGML/shape/gradient/LineGradient_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4eec545e223d2755_7_new,"pi_xy.triangleGML.LineGradient","new",0xfcdea5ed,"pi_xy.triangleGML.LineGradient.new","pi_xy/triangleGML/LineGradient.hx",7,0x5e7e3ae1)
HX_LOCAL_STACK_FRAME(_hx_pos_4eec545e223d2755_10_setParameter,"pi_xy.triangleGML.LineGradient","setParameter",0x6df6867a,"pi_xy.triangleGML.LineGradient.setParameter","pi_xy/triangleGML/LineGradient.hx",10,0x5e7e3ae1)
HX_LOCAL_STACK_FRAME(_hx_pos_4eec545e223d2755_18_render,"pi_xy.triangleGML.LineGradient","render",0x2284cbe9,"pi_xy.triangleGML.LineGradient.render","pi_xy/triangleGML/LineGradient.hx",18,0x5e7e3ae1)
namespace pi_xy{
namespace triangleGML{

void LineGradient_obj::__construct( ::Dynamic opacity, ::Dynamic visibility, ::Dynamic x1, ::Dynamic y1, ::Dynamic x2, ::Dynamic y2, ::Dynamic colorA, ::Dynamic colorB, ::Dynamic colorC, ::Dynamic colorD, ::Dynamic strokeWidth){
            	HX_STACKFRAME(&_hx_pos_4eec545e223d2755_7_new)
HXDLIN(   7)		super::__construct(opacity,visibility,x1,y1,x2,y2,colorA,colorB,colorC,colorD,strokeWidth);
            	}

Dynamic LineGradient_obj::__CreateEmpty() { return new LineGradient_obj; }

void *LineGradient_obj::_hx_vtable = 0;

Dynamic LineGradient_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LineGradient_obj > _hx_result = new LineGradient_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool LineGradient_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x22e3eee8) {
		if (inClassId<=(int)0x1a0bd5c0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1a0bd5c0;
		} else {
			return inClassId==(int)0x22e3eee8;
		}
	} else {
		return inClassId==(int)0x3590ad9b || inClassId==(int)0x7a004d1c;
	}
}

void LineGradient_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_4eec545e223d2755_10_setParameter)
HXDLIN(  10)		if ((name == HX_("luxury",0d,9d,17,dc))) {
HXLINE(  12)			bool _hx_tmp;
HXDLIN(  12)			if ((::StringTools_obj::trim(value).toLowerCase() == HX_("true",4e,a7,03,4d))) {
HXLINE(  12)				_hx_tmp = true;
            			}
            			else {
HXLINE(  12)				_hx_tmp = false;
            			}
HXDLIN(  12)			this->luxury = _hx_tmp;
HXLINE(  13)			::haxe::Log_obj::trace((HX_("setting luxury ",e3,03,9c,5a) + value),::hx::SourceInfo(HX_("src/pi_xy/triangleGML/LineGradient.hx",b6,ff,c7,06),13,HX_("pi_xy.triangleGML.LineGradient",7b,2b,e8,3c),HX_("setParameter",a7,f5,ff,6c)));
            		}
            		else {
HXLINE(  15)			this->super::setParameter(name,value);
            		}
            	}


 ::Dynamic LineGradient_obj::render( ::Dynamic _tmp_pixelImage){
            	HX_GC_STACKFRAME(&_hx_pos_4eec545e223d2755_18_render)
HXLINE(  19)		 ::pi_xy::ImageStruct pixelImage = ( ( ::pi_xy::ImageStruct)(_tmp_pixelImage) );
HXDLIN(  19)		Float px = (this->x1 + this->offX);
HXLINE(  20)		Float qx = (this->x2 + this->offX);
HXLINE(  21)		Float py = (this->y1 + this->offY);
HXLINE(  22)		Float qy = (this->y2 + this->offY);
HXLINE(  23)		if (this->luxury) {
HXLINE(  24)			int colorA = this->cornerColors->__get(0);
HXDLIN(  24)			int colorB = this->cornerColors->__get(1);
HXDLIN(  24)			int colorC = this->cornerColors->__get(2);
HXDLIN(  24)			int colorD = this->cornerColors->__get(3);
HXDLIN(  24)			bool hasHit = false;
HXDLIN(  24)			Float _hx___px = px;
HXDLIN(  24)			Float _hx___py = py;
HXDLIN(  24)			Float _hx___qx = qx;
HXDLIN(  24)			Float _hx___qy = qy;
HXDLIN(  24)			Float _hx___thick = this->strokeWidth;
HXDLIN(  24)			Float o = (_hx___qy - _hx___py);
HXDLIN(  24)			Float a = (_hx___qx - _hx___px);
HXDLIN(  24)			Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN(  24)			Float theta = ::Math_obj::atan2(o,a);
HXDLIN(  24)			Float lineInfo_px = _hx___px;
HXDLIN(  24)			Float lineInfo_py = _hx___py;
HXDLIN(  24)			Float lineInfo_thick = _hx___thick;
HXDLIN(  24)			Float lineInfo_long = h;
HXDLIN(  24)			Float lineInfo_theta = theta;
HXDLIN(  24)			Float radius = (lineInfo_thick / ( (Float)(2) ));
HXDLIN(  24)			Float dx = ((Float)0.1);
HXDLIN(  24)			Float dy = radius;
HXDLIN(  24)			Float cx = lineInfo_long;
HXDLIN(  24)			Float cy = radius;
HXDLIN(  24)			Float bx = lineInfo_long;
HXDLIN(  24)			Float by = -(radius);
HXDLIN(  24)			Float ax = ((Float)0.1);
HXDLIN(  24)			Float ay = -(radius);
HXDLIN(  24)			Float quadPoints_ax = ax;
HXDLIN(  24)			Float quadPoints_ay = ay;
HXDLIN(  24)			Float quadPoints_bx = bx;
HXDLIN(  24)			Float quadPoints_by = by;
HXDLIN(  24)			Float quadPoints_cx = cx;
HXDLIN(  24)			Float quadPoints_cy = cy;
HXDLIN(  24)			Float quadPoints_dx = dx;
HXDLIN(  24)			Float quadPoints_dy = dy;
HXDLIN(  24)			Float sin = ::Math_obj::sin(lineInfo_theta);
HXDLIN(  24)			Float cos = ::Math_obj::cos(lineInfo_theta);
HXDLIN(  24)			Float centreX = lineInfo_px;
HXDLIN(  24)			Float centreY = lineInfo_py;
HXDLIN(  24)			Float temp = ((Float)0.);
HXLINE( 108)			temp = (centreX + ((quadPoints_ax * cos) - (quadPoints_ay * sin)));
HXLINE(  24)			quadPoints_ay = (centreY + ((quadPoints_ay * cos) + (quadPoints_ax * sin)));
HXDLIN(  24)			quadPoints_ax = temp;
HXLINE( 112)			temp = (centreX + ((quadPoints_bx * cos) - (quadPoints_by * sin)));
HXLINE(  24)			quadPoints_by = (centreY + ((quadPoints_by * cos) + (quadPoints_bx * sin)));
HXDLIN(  24)			quadPoints_bx = temp;
HXLINE( 116)			temp = (centreX + ((quadPoints_cx * cos) - (quadPoints_cy * sin)));
HXLINE(  24)			quadPoints_cy = (centreY + ((quadPoints_cy * cos) + (quadPoints_cx * sin)));
HXDLIN(  24)			quadPoints_cx = temp;
HXLINE( 120)			temp = (centreX + ((quadPoints_dx * cos) - (quadPoints_dy * sin)));
HXLINE(  24)			quadPoints_dy = (centreY + ((quadPoints_dy * cos) + (quadPoints_dx * sin)));
HXDLIN(  24)			quadPoints_dx = temp;
HXDLIN(  24)			{
HXLINE(  24)				{
HXLINE(  24)					Float ax1 = quadPoints_ax;
HXDLIN(  24)					Float ay1 = quadPoints_ay;
HXDLIN(  24)					Float bx1 = quadPoints_bx;
HXDLIN(  24)					Float by1 = quadPoints_by;
HXDLIN(  24)					Float cx1 = quadPoints_dx;
HXDLIN(  24)					Float cy1 = quadPoints_dy;
HXDLIN(  24)					bool softAB = true;
HXDLIN(  24)					bool softBC = false;
HXDLIN(  24)					bool softCA = true;
HXDLIN(  24)					bool adjustWinding = (((((ax1 * by1) - (bx1 * ay1)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay1) - (ax1 * cy1))) > 0);
HXDLIN(  24)					if (!(adjustWinding)) {
HXLINE(  24)						Float bx_ = bx1;
HXDLIN(  24)						Float by_ = by1;
HXLINE(  62)						bx1 = cx1;
HXLINE(  63)						by1 = cy1;
HXLINE(  64)						cx1 = bx_;
HXLINE(  65)						cy1 = by_;
            					}
HXLINE(  24)					{
HXLINE(  24)						int aA = ((colorB >> 24) & 255);
HXDLIN(  24)						int rA = ((colorB >> 16) & 255);
HXDLIN(  24)						int gA = ((colorB >> 8) & 255);
HXDLIN(  24)						int bA = (colorB & 255);
HXDLIN(  24)						int aB = ((colorA >> 24) & 255);
HXDLIN(  24)						int rB = ((colorA >> 16) & 255);
HXDLIN(  24)						int gB = ((colorA >> 8) & 255);
HXDLIN(  24)						int bB = (colorA & 255);
HXDLIN(  24)						int aC = ((colorD >> 24) & 255);
HXDLIN(  24)						int rC = ((colorD >> 16) & 255);
HXDLIN(  24)						int gC = ((colorD >> 8) & 255);
HXDLIN(  24)						int bC = (colorD & 255);
HXDLIN(  24)						int a1 = 0;
HXDLIN(  24)						int r = 0;
HXDLIN(  24)						int g = 0;
HXDLIN(  24)						int b = 0;
HXDLIN(  24)						 ::pi_xy::algo::HitTri hitTriScalar =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx1,by1,cx1,cy1,true);
HXDLIN(  24)						 ::pi_xy::iter::IntIterStart barycentric_yIter3;
HXDLIN(  24)						 ::pi_xy::iter::IntIterStart barycentric_xIter3;
HXDLIN(  24)						Float barycentric_dot22;
HXDLIN(  24)						Float barycentric_dot12;
HXDLIN(  24)						Float barycentric_dot11;
HXDLIN(  24)						Float barycentric_denom1;
HXDLIN(  24)						Float barycentric_bcy;
HXDLIN(  24)						Float barycentric_bcx;
HXDLIN(  24)						Float barycentric_acy;
HXDLIN(  24)						Float barycentric_acx;
HXDLIN(  24)						Float barycentric_ax = hitTriScalar->ax;
HXDLIN(  24)						Float barycentric_ay = hitTriScalar->ay;
HXDLIN(  24)						Float barycentric_bx = hitTriScalar->bx;
HXDLIN(  24)						Float barycentric_by = hitTriScalar->by;
HXDLIN(  24)						Float barycentric_cx = hitTriScalar->cx;
HXDLIN(  24)						Float barycentric_cy = hitTriScalar->cy;
HXDLIN(  24)						bool barycentric_preCalculated = true;
HXDLIN(  24)						{
HXLINE(  24)							barycentric_bcx = (barycentric_bx - barycentric_cx);
HXDLIN(  24)							barycentric_bcy = (barycentric_by - barycentric_cy);
HXDLIN(  24)							barycentric_acx = (barycentric_ax - barycentric_cx);
HXDLIN(  24)							barycentric_acy = (barycentric_ay - barycentric_cy);
HXDLIN(  24)							Float ax2 = barycentric_bcx;
HXDLIN(  24)							Float ay2 = barycentric_bcy;
HXDLIN(  24)							barycentric_dot11 = ((ax2 * ax2) + (ay2 * ay2));
HXDLIN(  24)							barycentric_dot12 = ((barycentric_bcx * barycentric_acx) + (barycentric_bcy * barycentric_acy));
HXDLIN(  24)							Float ax3 = barycentric_acx;
HXDLIN(  24)							Float ay3 = barycentric_acy;
HXDLIN(  24)							barycentric_dot22 = ((ax3 * ax3) + (ay3 * ay3));
HXDLIN(  24)							barycentric_denom1 = (( (Float)(1) ) / ((barycentric_dot11 * barycentric_dot22) - (barycentric_dot12 * barycentric_dot12)));
HXDLIN(  24)							Float a2 = barycentric_ax;
HXDLIN(  24)							Float b1 = barycentric_bx;
HXDLIN(  24)							Float c = barycentric_cx;
HXDLIN(  24)							if ((a2 > b1)) {
HXLINE(  24)								if ((a2 > c)) {
HXLINE(  24)									int min;
HXDLIN(  24)									if ((b1 > c)) {
HXLINE(  24)										min = ::Math_obj::floor(c);
            									}
            									else {
HXLINE(  24)										min = ::Math_obj::floor(b1);
            									}
HXDLIN(  24)									int ii_min = min;
HXDLIN(  24)									int ii_max = ::Math_obj::ceil(a2);
HXDLIN(  24)									barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            								}
            								else {
HXLINE(  24)									int ii_min1 = ::Math_obj::floor(b1);
HXDLIN(  24)									int ii_max1 = ::Math_obj::ceil(c);
HXDLIN(  24)									barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            								}
            							}
            							else {
HXLINE(  24)								if ((b1 > c)) {
HXLINE(  24)									int min1;
HXDLIN(  24)									if ((a2 > c)) {
HXLINE(  24)										min1 = ::Math_obj::floor(c);
            									}
            									else {
HXLINE(  24)										min1 = ::Math_obj::ceil(a2);
            									}
HXDLIN(  24)									int ii_min2 = min1;
HXDLIN(  24)									int ii_max2 = ::Math_obj::ceil(b1);
HXDLIN(  24)									barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            								}
            								else {
HXLINE(  24)									int ii_min3 = ::Math_obj::floor(a2);
HXDLIN(  24)									int ii_max3 = ::Math_obj::ceil(c);
HXDLIN(  24)									barycentric_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            								}
            							}
HXDLIN(  24)							Float a3 = barycentric_ay;
HXDLIN(  24)							Float b2 = barycentric_by;
HXDLIN(  24)							Float c1 = barycentric_cy;
HXDLIN(  24)							if ((a3 > b2)) {
HXLINE(  24)								if ((a3 > c1)) {
HXLINE(  24)									int min2;
HXDLIN(  24)									if ((b2 > c1)) {
HXLINE(  24)										min2 = ::Math_obj::floor(c1);
            									}
            									else {
HXLINE(  24)										min2 = ::Math_obj::floor(b2);
            									}
HXDLIN(  24)									int ii_min4 = min2;
HXDLIN(  24)									int ii_max4 = ::Math_obj::ceil(a3);
HXDLIN(  24)									barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            								}
            								else {
HXLINE(  24)									int ii_min5 = ::Math_obj::floor(b2);
HXDLIN(  24)									int ii_max5 = ::Math_obj::ceil(c1);
HXDLIN(  24)									barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            								}
            							}
            							else {
HXLINE(  24)								if ((b2 > c1)) {
HXLINE(  24)									int min3;
HXDLIN(  24)									if ((a3 > c1)) {
HXLINE(  24)										min3 = ::Math_obj::floor(c1);
            									}
            									else {
HXLINE(  24)										min3 = ::Math_obj::ceil(a3);
            									}
HXDLIN(  24)									int ii_min6 = min3;
HXDLIN(  24)									int ii_max6 = ::Math_obj::ceil(b2);
HXDLIN(  24)									barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            								}
            								else {
HXLINE(  24)									int ii_min7 = ::Math_obj::floor(a3);
HXDLIN(  24)									int ii_max7 = ::Math_obj::ceil(c1);
HXDLIN(  24)									barycentric_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            								}
            							}
            						}
HXDLIN(  24)						Float scaleA;
HXDLIN(  24)						bool scaleA1;
HXDLIN(  24)						if (!(softAB)) {
HXLINE(  24)							scaleA1 = softCA;
            						}
            						else {
HXLINE(  24)							scaleA1 = true;
            						}
HXDLIN(  24)						if (scaleA1) {
HXLINE(  24)							scaleA = ((Float)1.5);
            						}
            						else {
HXLINE(  24)							scaleA = ((Float)1.);
            						}
HXDLIN(  24)						Float scaleB;
HXDLIN(  24)						bool scaleB1;
HXDLIN(  24)						if (!(softAB)) {
HXLINE(  24)							scaleB1 = softBC;
            						}
            						else {
HXLINE(  24)							scaleB1 = true;
            						}
HXDLIN(  24)						if (scaleB1) {
HXLINE(  24)							scaleB = ((Float)1.5);
            						}
            						else {
HXLINE(  24)							scaleB = ((Float)1.);
            						}
HXDLIN(  24)						Float scaleC;
HXDLIN(  24)						bool scaleC1;
HXDLIN(  24)						if (!(softBC)) {
HXLINE(  24)							scaleC1 = softCA;
            						}
            						else {
HXLINE(  24)							scaleC1 = true;
            						}
HXDLIN(  24)						if (scaleC1) {
HXLINE(  24)							scaleC = ((Float)1.5);
            						}
            						else {
HXLINE(  24)							scaleC = ((Float)1.);
            						}
HXDLIN(  24)						Float x0 = ((Float)0.);
HXDLIN(  24)						Float y0 = ((Float)0.);
HXDLIN(  24)						bool isScaledA = true;
HXDLIN(  24)						bool isScaledB = true;
HXDLIN(  24)						bool isScaledC = true;
HXDLIN(  24)						if (isScaledA) {
HXLINE(  24)							if (isScaledB) {
HXLINE(  24)								if (isScaledC) {
HXLINE(  82)									x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  83)									y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            								}
            								else {
HXLINE(  79)									x0 = hitTriScalar->cx;
HXLINE(  80)									y0 = hitTriScalar->cy;
            								}
            							}
            							else {
HXLINE(  24)								if (isScaledC) {
HXLINE(  76)									x0 = hitTriScalar->bx;
HXLINE(  77)									y0 = hitTriScalar->by;
            								}
            								else {
HXLINE(  73)									x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(hitTriScalar);
HXLINE(  74)									y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(hitTriScalar);
            								}
            							}
            						}
            						else {
HXLINE(  24)							if (isScaledB) {
HXLINE(  24)								if (isScaledC) {
HXLINE(  70)									x0 = hitTriScalar->ax;
HXLINE(  71)									y0 = hitTriScalar->ay;
            								}
            								else {
HXLINE(  67)									x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(hitTriScalar);
HXLINE(  68)									y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(hitTriScalar);
            								}
            							}
            							else {
HXLINE(  24)								if (isScaledC) {
HXLINE(  64)									x0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(hitTriScalar);
HXLINE(  65)									y0 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(hitTriScalar);
            								}
            								else {
HXLINE(  61)									x0 = (((hitTriScalar->ax + hitTriScalar->bx) + hitTriScalar->cx) / ( (Float)(3) ));
HXLINE(  62)									y0 = (((hitTriScalar->ay + hitTriScalar->by) + hitTriScalar->cy) / ( (Float)(3) ));
            								}
            							}
            						}
HXLINE(  24)						Float ax_;
HXDLIN(  24)						if (isScaledA) {
HXLINE(  24)							Float point = hitTriScalar->ax;
HXDLIN(  24)							point = (point - x0);
HXDLIN(  24)							point = (point * ((Float)0.999));
HXDLIN(  24)							point = (point + x0);
HXDLIN(  24)							ax_ = point;
            						}
            						else {
HXLINE(  24)							ax_ = hitTriScalar->ax;
            						}
HXDLIN(  24)						Float ay_;
HXDLIN(  24)						if (isScaledA) {
HXLINE(  24)							Float point1 = hitTriScalar->ay;
HXDLIN(  24)							point1 = (point1 - y0);
HXDLIN(  24)							point1 = (point1 * ((Float)0.999));
HXDLIN(  24)							point1 = (point1 + y0);
HXDLIN(  24)							ay_ = point1;
            						}
            						else {
HXLINE(  24)							ay_ = hitTriScalar->ay;
            						}
HXDLIN(  24)						Float bx_1;
HXDLIN(  24)						if (isScaledB) {
HXLINE(  24)							Float point2 = hitTriScalar->bx;
HXDLIN(  24)							point2 = (point2 - x0);
HXDLIN(  24)							point2 = (point2 * ((Float)0.999));
HXDLIN(  24)							point2 = (point2 + x0);
HXDLIN(  24)							bx_1 = point2;
            						}
            						else {
HXLINE(  24)							bx_1 = hitTriScalar->bx;
            						}
HXDLIN(  24)						Float by_1;
HXDLIN(  24)						if (isScaledB) {
HXLINE(  24)							Float point3 = hitTriScalar->by;
HXDLIN(  24)							point3 = (point3 - y0);
HXDLIN(  24)							point3 = (point3 * ((Float)0.999));
HXDLIN(  24)							point3 = (point3 + y0);
HXDLIN(  24)							by_1 = point3;
            						}
            						else {
HXLINE(  24)							by_1 = hitTriScalar->by;
            						}
HXDLIN(  24)						Float cx_;
HXDLIN(  24)						if (isScaledC) {
HXLINE(  24)							Float point4 = hitTriScalar->cx;
HXDLIN(  24)							point4 = (point4 - x0);
HXDLIN(  24)							point4 = (point4 * ((Float)0.999));
HXDLIN(  24)							point4 = (point4 + x0);
HXDLIN(  24)							cx_ = point4;
            						}
            						else {
HXLINE(  24)							cx_ = hitTriScalar->cx;
            						}
HXDLIN(  24)						Float cy_;
HXDLIN(  24)						if (isScaledC) {
HXLINE(  24)							Float point5 = hitTriScalar->cy;
HXDLIN(  24)							point5 = (point5 - y0);
HXDLIN(  24)							point5 = (point5 * ((Float)0.999));
HXDLIN(  24)							point5 = (point5 + y0);
HXDLIN(  24)							cy_ = point5;
            						}
            						else {
HXLINE(  24)							cy_ = hitTriScalar->cy;
            						}
HXDLIN(  24)						 ::pi_xy::algo::HitTri scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_,ay_,bx_1,by_1,cx_,cy_,true);
HXDLIN(  24)						Float x01 = ((Float)0.);
HXDLIN(  24)						Float y01 = ((Float)0.);
HXDLIN(  24)						bool isScaledA1 = (scaleA != ((Float)1.));
HXDLIN(  24)						bool isScaledB1 = (scaleB != ((Float)1.));
HXDLIN(  24)						bool isScaledC1 = (scaleC != ((Float)1.));
HXDLIN(  24)						if (isScaledA1) {
HXLINE(  24)							if (isScaledB1) {
HXLINE(  24)								if (isScaledC1) {
HXLINE(  82)									x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  83)									y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            								}
            								else {
HXLINE(  79)									x01 = scaled->cx;
HXLINE(  80)									y01 = scaled->cy;
            								}
            							}
            							else {
HXLINE(  24)								if (isScaledC1) {
HXLINE(  76)									x01 = scaled->bx;
HXLINE(  77)									y01 = scaled->by;
            								}
            								else {
HXLINE(  73)									x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(scaled);
HXLINE(  74)									y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(scaled);
            								}
            							}
            						}
            						else {
HXLINE(  24)							if (isScaledB1) {
HXLINE(  24)								if (isScaledC1) {
HXLINE(  70)									x01 = scaled->ax;
HXLINE(  71)									y01 = scaled->ay;
            								}
            								else {
HXLINE(  67)									x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(scaled);
HXLINE(  68)									y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(scaled);
            								}
            							}
            							else {
HXLINE(  24)								if (isScaledC1) {
HXLINE(  64)									x01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(scaled);
HXLINE(  65)									y01 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(scaled);
            								}
            								else {
HXLINE(  61)									x01 = (((scaled->ax + scaled->bx) + scaled->cx) / ( (Float)(3) ));
HXLINE(  62)									y01 = (((scaled->ay + scaled->by) + scaled->cy) / ( (Float)(3) ));
            								}
            							}
            						}
HXLINE(  24)						Float ax_1;
HXDLIN(  24)						if (isScaledA1) {
HXLINE(  24)							Float point6 = scaled->ax;
HXDLIN(  24)							point6 = (point6 - x01);
HXDLIN(  24)							point6 = (point6 * scaleA);
HXDLIN(  24)							point6 = (point6 + x01);
HXDLIN(  24)							ax_1 = point6;
            						}
            						else {
HXLINE(  24)							ax_1 = scaled->ax;
            						}
HXDLIN(  24)						Float ay_1;
HXDLIN(  24)						if (isScaledA1) {
HXLINE(  24)							Float point7 = scaled->ay;
HXDLIN(  24)							point7 = (point7 - y01);
HXDLIN(  24)							point7 = (point7 * scaleA);
HXDLIN(  24)							point7 = (point7 + y01);
HXDLIN(  24)							ay_1 = point7;
            						}
            						else {
HXLINE(  24)							ay_1 = scaled->ay;
            						}
HXDLIN(  24)						Float bx_2;
HXDLIN(  24)						if (isScaledB1) {
HXLINE(  24)							Float point8 = scaled->bx;
HXDLIN(  24)							point8 = (point8 - x01);
HXDLIN(  24)							point8 = (point8 * scaleB);
HXDLIN(  24)							point8 = (point8 + x01);
HXDLIN(  24)							bx_2 = point8;
            						}
            						else {
HXLINE(  24)							bx_2 = scaled->bx;
            						}
HXDLIN(  24)						Float by_2;
HXDLIN(  24)						if (isScaledB1) {
HXLINE(  24)							Float point9 = scaled->by;
HXDLIN(  24)							point9 = (point9 - y01);
HXDLIN(  24)							point9 = (point9 * scaleB);
HXDLIN(  24)							point9 = (point9 + y01);
HXDLIN(  24)							by_2 = point9;
            						}
            						else {
HXLINE(  24)							by_2 = scaled->by;
            						}
HXDLIN(  24)						Float cx_1;
HXDLIN(  24)						if (isScaledC1) {
HXLINE(  24)							Float point10 = scaled->cx;
HXDLIN(  24)							point10 = (point10 - x01);
HXDLIN(  24)							point10 = (point10 * scaleC);
HXDLIN(  24)							point10 = (point10 + x01);
HXDLIN(  24)							cx_1 = point10;
            						}
            						else {
HXLINE(  24)							cx_1 = scaled->cx;
            						}
HXDLIN(  24)						Float cy_1;
HXDLIN(  24)						if (isScaledC1) {
HXLINE(  24)							Float point11 = scaled->cy;
HXDLIN(  24)							point11 = (point11 - y01);
HXDLIN(  24)							point11 = (point11 * scaleC);
HXDLIN(  24)							point11 = (point11 + y01);
HXDLIN(  24)							cy_1 = point11;
            						}
            						else {
HXLINE(  24)							cy_1 = scaled->cy;
            						}
HXDLIN(  24)						scaled =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_1,ay_1,bx_2,by_2,cx_1,cy_1,true);
HXDLIN(  24)						{
HXLINE(  24)							 ::pi_xy::iter::IntIterStart this1 = hitTriScalar->xIter3;
HXDLIN(  24)							int _g_min = this1->start;
HXDLIN(  24)							int _g_max = this1->max;
HXDLIN(  24)							while((_g_min < _g_max)){
HXLINE(  24)								_g_min = (_g_min + 1);
HXDLIN(  24)								int px1 = (_g_min - 1);
HXDLIN(  24)								{
HXLINE(  24)									 ::pi_xy::iter::IntIterStart this2 = hitTriScalar->yIter3;
HXDLIN(  24)									int _g_min1 = this2->start;
HXDLIN(  24)									int _g_max1 = this2->max;
HXDLIN(  24)									while((_g_min1 < _g_max1)){
HXLINE(  24)										_g_min1 = (_g_min1 + 1);
HXDLIN(  24)										int py1 = (_g_min1 - 1);
HXDLIN(  24)										Float pcx = (( (Float)(px1) ) - barycentric_cx);
HXDLIN(  24)										Float pcy = (( (Float)(py1) ) - barycentric_cy);
HXDLIN(  24)										Float dot31 = ((pcx * barycentric_bcx) + (pcy * barycentric_bcy));
HXDLIN(  24)										Float dot32 = ((pcx * barycentric_acx) + (pcy * barycentric_acy));
HXDLIN(  24)										Float ratioA = (((barycentric_dot22 * dot31) - (barycentric_dot12 * dot32)) * barycentric_denom1);
HXDLIN(  24)										Float ratioB = (((barycentric_dot11 * dot32) - (barycentric_dot12 * dot31)) * barycentric_denom1);
HXDLIN(  24)										Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  24)										Float ratios_ratioA = ratioA;
HXDLIN(  24)										Float ratios_ratioB = ratioB;
HXDLIN(  24)										Float ratios_ratioC = ratioC;
HXDLIN(  24)										Float v;
HXDLIN(  24)										if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  24)											v = ratios_ratioA;
            										}
            										else {
HXLINE(  24)											v = ratios_ratioB;
            										}
HXDLIN(  24)										Float min_;
HXDLIN(  24)										if ((v < ratios_ratioC)) {
HXLINE(  24)											min_ = v;
            										}
            										else {
HXLINE(  24)											min_ = ratios_ratioC;
            										}
HXDLIN(  24)										bool isSoft;
HXDLIN(  24)										if (softAB) {
HXLINE(  24)											if (softBC) {
HXLINE(  24)												if (softCA) {
HXLINE(  24)													isSoft = true;
            												}
            												else {
HXLINE(  24)													if ((min_ != ratios_ratioB)) {
HXLINE(  24)														Float v1;
HXDLIN(  24)														if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  24)															v1 = ratios_ratioA;
            														}
            														else {
HXLINE(  24)															v1 = ratios_ratioB;
            														}
HXDLIN(  24)														Float isSoft1;
HXDLIN(  24)														if ((v1 < ratios_ratioC)) {
HXLINE(  24)															isSoft1 = v1;
            														}
            														else {
HXLINE(  24)															isSoft1 = ratios_ratioC;
            														}
HXDLIN(  24)														isSoft = (isSoft1 == ratios_ratioC);
            													}
            													else {
HXLINE(  24)														isSoft = true;
            													}
            												}
            											}
            											else {
HXLINE(  24)												if (softCA) {
HXLINE(  24)													if ((min_ != ratios_ratioA)) {
HXLINE(  24)														Float v2;
HXDLIN(  24)														if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  24)															v2 = ratios_ratioA;
            														}
            														else {
HXLINE(  24)															v2 = ratios_ratioB;
            														}
HXDLIN(  24)														Float isSoft2;
HXDLIN(  24)														if ((v2 < ratios_ratioC)) {
HXLINE(  24)															isSoft2 = v2;
            														}
            														else {
HXLINE(  24)															isSoft2 = ratios_ratioC;
            														}
HXDLIN(  24)														isSoft = (isSoft2 == ratios_ratioC);
            													}
            													else {
HXLINE(  24)														isSoft = true;
            													}
            												}
            												else {
HXLINE(  24)													isSoft = (min_ == ratios_ratioC);
            												}
            											}
            										}
            										else {
HXLINE(  24)											if (softBC) {
HXLINE(  24)												if (softCA) {
HXLINE(  24)													if ((min_ != ratios_ratioA)) {
HXLINE(  24)														Float v3;
HXDLIN(  24)														if ((ratios_ratioA < ratios_ratioB)) {
HXLINE(  24)															v3 = ratios_ratioA;
            														}
            														else {
HXLINE(  24)															v3 = ratios_ratioB;
            														}
HXDLIN(  24)														Float isSoft3;
HXDLIN(  24)														if ((v3 < ratios_ratioC)) {
HXLINE(  24)															isSoft3 = v3;
            														}
            														else {
HXLINE(  24)															isSoft3 = ratios_ratioC;
            														}
HXDLIN(  24)														isSoft = (isSoft3 == ratios_ratioB);
            													}
            													else {
HXLINE(  24)														isSoft = true;
            													}
            												}
            												else {
HXLINE(  24)													isSoft = (min_ == ratios_ratioB);
            												}
            											}
            											else {
HXLINE(  24)												if (softCA) {
HXLINE(  24)													isSoft = (min_ == ratios_ratioA);
            												}
            												else {
HXLINE(  24)													isSoft = false;
            												}
            											}
            										}
HXDLIN(  24)										Float x02 = ((Float)-0.0739127852035666);
HXDLIN(  24)										Float y02 = ((Float)0.703233176253404202);
HXDLIN(  24)										Float x1 = ((Float)-0.353553390593273564);
HXDLIN(  24)										Float y1 = ((Float)0.61237243569579447);
HXDLIN(  24)										Float x2 = ((Float)-0.572061402817684139);
HXDLIN(  24)										Float y2 = ((Float)0.415626937777453465);
HXDLIN(  24)										Float x3 = ((Float)-0.691654801480225401);
HXDLIN(  24)										Float y3 = ((Float)0.147015766465198733);
HXDLIN(  24)										Float x4 = ((Float)-0.691654801480225512);
HXDLIN(  24)										Float y4 = ((Float)-0.147015766465198261);
HXDLIN(  24)										Float averageX = ((Float)0.);
HXDLIN(  24)										Float averageY = ((Float)0.);
HXDLIN(  24)										int hits = 0;
HXDLIN(  24)										Float fractionTotal = ((Float)0.);
HXDLIN(  24)										Float x = (px1 + x02);
HXDLIN(  24)										Float y = (py1 + y02);
HXDLIN(  24)										bool _hx_tmp;
HXDLIN(  24)										bool _hx_tmp1;
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart this3 = hitTriScalar->xIter3;
HXDLIN(  24)										bool _hx_tmp2;
HXDLIN(  24)										if ((x > (this3->start - 1))) {
HXLINE(  24)											_hx_tmp2 = (x < (this3->max + 1));
            										}
            										else {
HXLINE(  24)											_hx_tmp2 = false;
            										}
HXDLIN(  24)										if (_hx_tmp2) {
HXLINE(  24)											 ::pi_xy::iter::IntIterStart this4 = hitTriScalar->yIter3;
HXDLIN(  24)											if ((y > (this4->start - 1))) {
HXLINE(  24)												_hx_tmp1 = (y < (this4->max + 1));
            											}
            											else {
HXLINE(  24)												_hx_tmp1 = false;
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp1 = false;
            										}
HXDLIN(  24)										if (_hx_tmp1) {
HXLINE(  24)											Float s = ((hitTriScalar->s0 + (hitTriScalar->sx * x)) + (hitTriScalar->sy * y));
HXDLIN(  24)											Float t = ((hitTriScalar->t0 + (hitTriScalar->tx * x)) + (hitTriScalar->ty * y));
HXDLIN(  24)											bool _hx_tmp3;
HXDLIN(  24)											if (!((s <= 0))) {
HXLINE(  24)												_hx_tmp3 = (t <= 0);
            											}
            											else {
HXLINE(  24)												_hx_tmp3 = true;
            											}
HXDLIN(  24)											if (_hx_tmp3) {
HXLINE(  24)												_hx_tmp = false;
            											}
            											else {
HXLINE(  24)												if (((s + t) < hitTriScalar->A)) {
HXLINE(  24)													_hx_tmp = true;
            												}
            												else {
HXLINE(  24)													_hx_tmp = false;
            												}
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp = false;
            										}
HXDLIN(  24)										if (_hx_tmp) {
HXLINE(  24)											hits = (hits + 1);
HXDLIN(  24)											averageX = (averageX + x02);
HXDLIN(  24)											averageY = (averageY + y02);
HXDLIN(  24)											fractionTotal = (fractionTotal + ((Float)0.2));
            										}
HXDLIN(  24)										Float x5 = (px1 + x1);
HXDLIN(  24)										Float y5 = (py1 + y1);
HXDLIN(  24)										bool _hx_tmp4;
HXDLIN(  24)										bool _hx_tmp5;
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart this5 = hitTriScalar->xIter3;
HXDLIN(  24)										bool _hx_tmp6;
HXDLIN(  24)										if ((x5 > (this5->start - 1))) {
HXLINE(  24)											_hx_tmp6 = (x5 < (this5->max + 1));
            										}
            										else {
HXLINE(  24)											_hx_tmp6 = false;
            										}
HXDLIN(  24)										if (_hx_tmp6) {
HXLINE(  24)											 ::pi_xy::iter::IntIterStart this6 = hitTriScalar->yIter3;
HXDLIN(  24)											if ((y5 > (this6->start - 1))) {
HXLINE(  24)												_hx_tmp5 = (y5 < (this6->max + 1));
            											}
            											else {
HXLINE(  24)												_hx_tmp5 = false;
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp5 = false;
            										}
HXDLIN(  24)										if (_hx_tmp5) {
HXLINE(  24)											Float s1 = ((hitTriScalar->s0 + (hitTriScalar->sx * x5)) + (hitTriScalar->sy * y5));
HXDLIN(  24)											Float t1 = ((hitTriScalar->t0 + (hitTriScalar->tx * x5)) + (hitTriScalar->ty * y5));
HXDLIN(  24)											bool _hx_tmp7;
HXDLIN(  24)											if (!((s1 <= 0))) {
HXLINE(  24)												_hx_tmp7 = (t1 <= 0);
            											}
            											else {
HXLINE(  24)												_hx_tmp7 = true;
            											}
HXDLIN(  24)											if (_hx_tmp7) {
HXLINE(  24)												_hx_tmp4 = false;
            											}
            											else {
HXLINE(  24)												if (((s1 + t1) < hitTriScalar->A)) {
HXLINE(  24)													_hx_tmp4 = true;
            												}
            												else {
HXLINE(  24)													_hx_tmp4 = false;
            												}
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp4 = false;
            										}
HXDLIN(  24)										if (_hx_tmp4) {
HXLINE(  24)											hits = (hits + 1);
HXDLIN(  24)											averageX = (averageX + x1);
HXDLIN(  24)											averageY = (averageY + y1);
HXDLIN(  24)											fractionTotal = (fractionTotal + ((Float)0.2));
            										}
HXDLIN(  24)										Float x6 = (px1 + x2);
HXDLIN(  24)										Float y6 = (py1 + y2);
HXDLIN(  24)										bool _hx_tmp8;
HXDLIN(  24)										bool _hx_tmp9;
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart this7 = hitTriScalar->xIter3;
HXDLIN(  24)										bool _hx_tmp10;
HXDLIN(  24)										if ((x6 > (this7->start - 1))) {
HXLINE(  24)											_hx_tmp10 = (x6 < (this7->max + 1));
            										}
            										else {
HXLINE(  24)											_hx_tmp10 = false;
            										}
HXDLIN(  24)										if (_hx_tmp10) {
HXLINE(  24)											 ::pi_xy::iter::IntIterStart this8 = hitTriScalar->yIter3;
HXDLIN(  24)											if ((y6 > (this8->start - 1))) {
HXLINE(  24)												_hx_tmp9 = (y6 < (this8->max + 1));
            											}
            											else {
HXLINE(  24)												_hx_tmp9 = false;
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp9 = false;
            										}
HXDLIN(  24)										if (_hx_tmp9) {
HXLINE(  24)											Float s2 = ((hitTriScalar->s0 + (hitTriScalar->sx * x6)) + (hitTriScalar->sy * y6));
HXDLIN(  24)											Float t2 = ((hitTriScalar->t0 + (hitTriScalar->tx * x6)) + (hitTriScalar->ty * y6));
HXDLIN(  24)											bool _hx_tmp11;
HXDLIN(  24)											if (!((s2 <= 0))) {
HXLINE(  24)												_hx_tmp11 = (t2 <= 0);
            											}
            											else {
HXLINE(  24)												_hx_tmp11 = true;
            											}
HXDLIN(  24)											if (_hx_tmp11) {
HXLINE(  24)												_hx_tmp8 = false;
            											}
            											else {
HXLINE(  24)												if (((s2 + t2) < hitTriScalar->A)) {
HXLINE(  24)													_hx_tmp8 = true;
            												}
            												else {
HXLINE(  24)													_hx_tmp8 = false;
            												}
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp8 = false;
            										}
HXDLIN(  24)										if (_hx_tmp8) {
HXLINE(  24)											hits = (hits + 1);
HXDLIN(  24)											averageX = (averageX + x2);
HXDLIN(  24)											averageY = (averageY + y2);
HXDLIN(  24)											fractionTotal = (fractionTotal + ((Float)0.2));
            										}
HXDLIN(  24)										Float x7 = (px1 + x3);
HXDLIN(  24)										Float y7 = (py1 + y3);
HXDLIN(  24)										bool _hx_tmp12;
HXDLIN(  24)										bool _hx_tmp13;
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart this9 = hitTriScalar->xIter3;
HXDLIN(  24)										bool _hx_tmp14;
HXDLIN(  24)										if ((x7 > (this9->start - 1))) {
HXLINE(  24)											_hx_tmp14 = (x7 < (this9->max + 1));
            										}
            										else {
HXLINE(  24)											_hx_tmp14 = false;
            										}
HXDLIN(  24)										if (_hx_tmp14) {
HXLINE(  24)											 ::pi_xy::iter::IntIterStart this10 = hitTriScalar->yIter3;
HXDLIN(  24)											if ((y7 > (this10->start - 1))) {
HXLINE(  24)												_hx_tmp13 = (y7 < (this10->max + 1));
            											}
            											else {
HXLINE(  24)												_hx_tmp13 = false;
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp13 = false;
            										}
HXDLIN(  24)										if (_hx_tmp13) {
HXLINE(  24)											Float s3 = ((hitTriScalar->s0 + (hitTriScalar->sx * x7)) + (hitTriScalar->sy * y7));
HXDLIN(  24)											Float t3 = ((hitTriScalar->t0 + (hitTriScalar->tx * x7)) + (hitTriScalar->ty * y7));
HXDLIN(  24)											bool _hx_tmp15;
HXDLIN(  24)											if (!((s3 <= 0))) {
HXLINE(  24)												_hx_tmp15 = (t3 <= 0);
            											}
            											else {
HXLINE(  24)												_hx_tmp15 = true;
            											}
HXDLIN(  24)											if (_hx_tmp15) {
HXLINE(  24)												_hx_tmp12 = false;
            											}
            											else {
HXLINE(  24)												if (((s3 + t3) < hitTriScalar->A)) {
HXLINE(  24)													_hx_tmp12 = true;
            												}
            												else {
HXLINE(  24)													_hx_tmp12 = false;
            												}
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp12 = false;
            										}
HXDLIN(  24)										if (_hx_tmp12) {
HXLINE(  24)											hits = (hits + 1);
HXDLIN(  24)											averageX = (averageX + x3);
HXDLIN(  24)											averageY = (averageY + y3);
HXDLIN(  24)											fractionTotal = (fractionTotal + ((Float)0.2));
            										}
HXDLIN(  24)										Float x8 = (px1 + x4);
HXDLIN(  24)										Float y8 = (py1 + y4);
HXDLIN(  24)										bool _hx_tmp16;
HXDLIN(  24)										bool _hx_tmp17;
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart this11 = hitTriScalar->xIter3;
HXDLIN(  24)										bool _hx_tmp18;
HXDLIN(  24)										if ((x8 > (this11->start - 1))) {
HXLINE(  24)											_hx_tmp18 = (x8 < (this11->max + 1));
            										}
            										else {
HXLINE(  24)											_hx_tmp18 = false;
            										}
HXDLIN(  24)										if (_hx_tmp18) {
HXLINE(  24)											 ::pi_xy::iter::IntIterStart this12 = hitTriScalar->yIter3;
HXDLIN(  24)											if ((y8 > (this12->start - 1))) {
HXLINE(  24)												_hx_tmp17 = (y8 < (this12->max + 1));
            											}
            											else {
HXLINE(  24)												_hx_tmp17 = false;
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp17 = false;
            										}
HXDLIN(  24)										if (_hx_tmp17) {
HXLINE(  24)											Float s4 = ((hitTriScalar->s0 + (hitTriScalar->sx * x8)) + (hitTriScalar->sy * y8));
HXDLIN(  24)											Float t4 = ((hitTriScalar->t0 + (hitTriScalar->tx * x8)) + (hitTriScalar->ty * y8));
HXDLIN(  24)											bool _hx_tmp19;
HXDLIN(  24)											if (!((s4 <= 0))) {
HXLINE(  24)												_hx_tmp19 = (t4 <= 0);
            											}
            											else {
HXLINE(  24)												_hx_tmp19 = true;
            											}
HXDLIN(  24)											if (_hx_tmp19) {
HXLINE(  24)												_hx_tmp16 = false;
            											}
            											else {
HXLINE(  24)												if (((s4 + t4) < hitTriScalar->A)) {
HXLINE(  24)													_hx_tmp16 = true;
            												}
            												else {
HXLINE(  24)													_hx_tmp16 = false;
            												}
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp16 = false;
            										}
HXDLIN(  24)										if (_hx_tmp16) {
HXLINE(  24)											hits = (hits + 1);
HXDLIN(  24)											averageX = (averageX + x4);
HXDLIN(  24)											averageY = (averageY + y4);
HXDLIN(  24)											fractionTotal = (fractionTotal + ((Float)0.2));
            										}
HXDLIN(  24)										if ((hits != 0)) {
HXLINE( 244)											averageX = (px1 + (averageX / ( (Float)(hits) )));
HXLINE( 245)											averageY = (py1 + (averageY / ( (Float)(hits) )));
            										}
            										else {
HXLINE( 247)											averageX = ( (Float)(px1) );
HXLINE( 248)											averageY = ( (Float)(py1) );
            										}
HXLINE(  24)										Float fractionTotal1 = fractionTotal;
HXDLIN(  24)										Float sampleData_fractionTotal = fractionTotal1;
HXDLIN(  24)										Float sampleData_averageX = averageX;
HXDLIN(  24)										Float sampleData_averageY = averageY;
HXDLIN(  24)										bool sampleData_notHit = (fractionTotal1 == ((Float)0.));
HXDLIN(  24)										Float aScale = sampleData_fractionTotal;
HXDLIN(  24)										if (!((aScale > ((Float)0.9)))) {
HXLINE(  24)											aScale = ((aScale * ((Float)0.8)) + ((Float)0.2));
            										}
HXLINE( 142)										a1 = 0;
HXLINE( 143)										r = 0;
HXLINE( 144)										g = 0;
HXLINE( 145)										b = 0;
HXLINE(  24)										if (isSoft) {
HXLINE(  24)											if (!(sampleData_notHit)) {
HXLINE(  24)												Float pcx1 = (sampleData_averageX - barycentric_cx);
HXDLIN(  24)												Float pcy1 = (sampleData_averageY - barycentric_cy);
HXDLIN(  24)												Float dot311 = ((pcx1 * barycentric_bcx) + (pcy1 * barycentric_bcy));
HXDLIN(  24)												Float dot321 = ((pcx1 * barycentric_acx) + (pcy1 * barycentric_acy));
HXDLIN(  24)												Float ratioA1 = (((barycentric_dot22 * dot311) - (barycentric_dot12 * dot321)) * barycentric_denom1);
HXDLIN(  24)												Float ratioB1 = (((barycentric_dot11 * dot321) - (barycentric_dot12 * dot311)) * barycentric_denom1);
HXDLIN(  24)												Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  24)												Float ratiosAvg_ratioA = ratioA1;
HXDLIN(  24)												Float ratiosAvg_ratioB = ratioB1;
HXDLIN(  24)												Float ratiosAvg_ratioC = ratioC1;
HXDLIN(  24)												Float ratioA_ = ratiosAvg_ratioA;
HXDLIN(  24)												Float ratioB_ = ratiosAvg_ratioB;
HXDLIN(  24)												Float ratioC_ = ratiosAvg_ratioC;
HXDLIN(  24)												int i = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_) + (( (Float)(aB) ) * ratioB_)) + (( (Float)(aC) ) * ratioC_)));
HXDLIN(  24)												if ((i > 255)) {
HXLINE(  24)													i = 255;
            												}
HXDLIN(  24)												if ((i < 0)) {
HXLINE(  25)													i = 0;
            												}
HXLINE( 152)												a1 = i;
HXLINE(  24)												int i1 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_) + (( (Float)(rB) ) * ratioB_)) + (( (Float)(rC) ) * ratioC_)));
HXDLIN(  24)												if ((i1 > 255)) {
HXLINE(  24)													i1 = 255;
            												}
HXDLIN(  24)												if ((i1 < 0)) {
HXLINE(  25)													i1 = 0;
            												}
HXLINE( 153)												r = i1;
HXLINE(  24)												int i2 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_) + (( (Float)(gB) ) * ratioB_)) + (( (Float)(gC) ) * ratioC_)));
HXDLIN(  24)												if ((i2 > 255)) {
HXLINE(  24)													i2 = 255;
            												}
HXDLIN(  24)												if ((i2 < 0)) {
HXLINE(  25)													i2 = 0;
            												}
HXLINE( 154)												g = i2;
HXLINE(  24)												int i3 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_) + (( (Float)(bB) ) * ratioB_)) + (( (Float)(bC) ) * ratioC_)));
HXDLIN(  24)												if ((i3 > 255)) {
HXLINE(  24)													i3 = 255;
            												}
HXDLIN(  24)												if ((i3 < 0)) {
HXLINE(  25)													i3 = 0;
            												}
HXLINE( 155)												b = i3;
HXLINE(  24)												{
HXLINE(  24)													int a4;
HXDLIN(  24)													if ((aScale > ((Float)0.9))) {
HXLINE(  24)														a4 = a1;
            													}
            													else {
HXLINE(  24)														int i4 = ::Std_obj::_hx_int((( (Float)(a1) ) * aScale));
HXDLIN(  24)														if ((i4 > 255)) {
HXLINE(  24)															i4 = 255;
            														}
HXDLIN(  24)														if ((i4 < 0)) {
HXLINE(  25)															i4 = 0;
            														}
HXLINE(  24)														a4 = i4;
            													}
HXDLIN(  24)													int location;
HXDLIN(  24)													if (pixelImage->useVirtualPos) {
HXLINE(  24)														location = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            													}
            													else {
HXLINE(  24)														location = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            													}
HXDLIN(  24)													bool _hx_tmp20;
HXDLIN(  24)													if (pixelImage->transparent) {
HXLINE(  24)														_hx_tmp20 = (a4 < 254);
            													}
            													else {
HXLINE(  24)														_hx_tmp20 = false;
            													}
HXDLIN(  24)													if (_hx_tmp20) {
HXLINE(  24)														int this13 = ::iterMagic::Iimg_obj::get(pixelImage->image,location);
HXDLIN(  24)														int old;
HXDLIN(  24)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)															old = ((((((this13 >> 24) & 255) << 24) | ((this13 & 255) << 16)) | (((this13 >> 8) & 255) << 8)) | ((this13 >> 16) & 255));
            														}
            														else {
HXLINE(  24)															old = this13;
            														}
HXDLIN(  24)														int rhs = ((((a4 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  24)														Float a11;
HXDLIN(  24)														int this14 = ((old >> 24) & 255);
HXDLIN(  24)														if ((this14 == 0)) {
HXLINE(  24)															a11 = ((Float)0.);
            														}
            														else {
HXLINE(  24)															a11 = (( (Float)(this14) ) / ( (Float)(255) ));
            														}
HXDLIN(  24)														Float r1;
HXDLIN(  24)														int this15 = ((old >> 16) & 255);
HXDLIN(  24)														if ((this15 == 0)) {
HXLINE(  24)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  24)															r1 = (( (Float)(this15) ) / ( (Float)(255) ));
            														}
HXDLIN(  24)														Float g1;
HXDLIN(  24)														int this16 = ((old >> 8) & 255);
HXDLIN(  24)														if ((this16 == 0)) {
HXLINE(  24)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  24)															g1 = (( (Float)(this16) ) / ( (Float)(255) ));
            														}
HXDLIN(  24)														Float b11;
HXDLIN(  24)														int this17 = (old & 255);
HXDLIN(  24)														if ((this17 == 0)) {
HXLINE(  24)															b11 = ((Float)0.);
            														}
            														else {
HXLINE(  24)															b11 = (( (Float)(this17) ) / ( (Float)(255) ));
            														}
HXDLIN(  24)														Float a21;
HXDLIN(  24)														int this18 = ((rhs >> 24) & 255);
HXDLIN(  24)														if ((this18 == 0)) {
HXLINE(  24)															a21 = ((Float)0.);
            														}
            														else {
HXLINE(  24)															a21 = (( (Float)(this18) ) / ( (Float)(255) ));
            														}
HXDLIN(  24)														Float r2;
HXDLIN(  24)														int this19 = ((rhs >> 16) & 255);
HXDLIN(  24)														if ((this19 == 0)) {
HXLINE(  24)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  24)															r2 = (( (Float)(this19) ) / ( (Float)(255) ));
            														}
HXDLIN(  24)														Float g2;
HXDLIN(  24)														int this20 = ((rhs >> 8) & 255);
HXDLIN(  24)														if ((this20 == 0)) {
HXLINE(  24)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  24)															g2 = (( (Float)(this20) ) / ( (Float)(255) ));
            														}
HXDLIN(  24)														Float b21;
HXDLIN(  24)														int this21 = (rhs & 255);
HXDLIN(  24)														if ((this21 == 0)) {
HXLINE(  24)															b21 = ((Float)0.);
            														}
            														else {
HXLINE(  24)															b21 = (( (Float)(this21) ) / ( (Float)(255) ));
            														}
HXDLIN(  24)														Float a31 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  24)														int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a31) + (r2 * a21))));
HXDLIN(  24)														int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a31) + (g2 * a21))));
HXDLIN(  24)														int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a31) + (b21 * a21))));
HXDLIN(  24)														int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  24)														int blended = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  24)														{
HXLINE(  24)															int _hx_tmp21;
HXDLIN(  24)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																_hx_tmp21 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  24)																_hx_tmp21 = blended;
            															}
HXDLIN(  24)															::iterMagic::Iimg_obj::set(pixelImage->image,location,_hx_tmp21);
            														}
            													}
            													else {
HXLINE(  24)														int value;
HXDLIN(  24)														if (pixelImage->isLittle) {
HXLINE(  24)															value = ((((a4 << 24) | (b << 16)) | (g << 8)) | r);
            														}
            														else {
HXLINE(  24)															value = ((((a4 << 24) | (r << 16)) | (g << 8)) | b);
            														}
HXDLIN(  24)														::iterMagic::Iimg_obj::set(pixelImage->image,location,value);
            													}
            												}
            											}
            										}
            										else {
HXLINE(  24)											Float ratioA2 = ratios_ratioA;
HXDLIN(  24)											Float ratioB2 = ratios_ratioB;
HXDLIN(  24)											Float ratioC2 = ratios_ratioC;
HXDLIN(  24)											Float hitTotal = sampleData_fractionTotal;
HXDLIN(  24)											if (!(sampleData_notHit)) {
HXLINE(  24)												Float x03 = ((Float)-0.0739127852035666);
HXDLIN(  24)												Float y03 = ((Float)0.703233176253404202);
HXDLIN(  24)												Float x11 = ((Float)-0.353553390593273564);
HXDLIN(  24)												Float y11 = ((Float)0.61237243569579447);
HXDLIN(  24)												Float x21 = ((Float)-0.572061402817684139);
HXDLIN(  24)												Float y21 = ((Float)0.415626937777453465);
HXDLIN(  24)												Float x31 = ((Float)-0.691654801480225401);
HXDLIN(  24)												Float y31 = ((Float)0.147015766465198733);
HXDLIN(  24)												Float x41 = ((Float)-0.691654801480225512);
HXDLIN(  24)												Float y41 = ((Float)-0.147015766465198261);
HXDLIN(  24)												Float averageX1 = ((Float)0.);
HXDLIN(  24)												Float averageY1 = ((Float)0.);
HXDLIN(  24)												int hits1 = 0;
HXDLIN(  24)												Float fractionTotal2 = ((Float)0.);
HXDLIN(  24)												Float x9 = (px1 + x03);
HXDLIN(  24)												Float y9 = (py1 + y03);
HXDLIN(  24)												bool _hx_tmp22;
HXDLIN(  24)												bool _hx_tmp23;
HXDLIN(  24)												 ::pi_xy::iter::IntIterStart this22 = scaled->xIter3;
HXDLIN(  24)												bool _hx_tmp24;
HXDLIN(  24)												if ((x9 > (this22->start - 1))) {
HXLINE(  24)													_hx_tmp24 = (x9 < (this22->max + 1));
            												}
            												else {
HXLINE(  24)													_hx_tmp24 = false;
            												}
HXDLIN(  24)												if (_hx_tmp24) {
HXLINE(  24)													 ::pi_xy::iter::IntIterStart this23 = scaled->yIter3;
HXDLIN(  24)													if ((y9 > (this23->start - 1))) {
HXLINE(  24)														_hx_tmp23 = (y9 < (this23->max + 1));
            													}
            													else {
HXLINE(  24)														_hx_tmp23 = false;
            													}
            												}
            												else {
HXLINE(  24)													_hx_tmp23 = false;
            												}
HXDLIN(  24)												if (_hx_tmp23) {
HXLINE(  24)													Float s5 = ((scaled->s0 + (scaled->sx * x9)) + (scaled->sy * y9));
HXDLIN(  24)													Float t5 = ((scaled->t0 + (scaled->tx * x9)) + (scaled->ty * y9));
HXDLIN(  24)													bool _hx_tmp25;
HXDLIN(  24)													if (!((s5 <= 0))) {
HXLINE(  24)														_hx_tmp25 = (t5 <= 0);
            													}
            													else {
HXLINE(  24)														_hx_tmp25 = true;
            													}
HXDLIN(  24)													if (_hx_tmp25) {
HXLINE(  24)														_hx_tmp22 = false;
            													}
            													else {
HXLINE(  24)														if (((s5 + t5) < scaled->A)) {
HXLINE(  24)															_hx_tmp22 = true;
            														}
            														else {
HXLINE(  24)															_hx_tmp22 = false;
            														}
            													}
            												}
            												else {
HXLINE(  24)													_hx_tmp22 = false;
            												}
HXDLIN(  24)												if (_hx_tmp22) {
HXLINE(  24)													hits1 = (hits1 + 1);
HXDLIN(  24)													averageX1 = (averageX1 + x03);
HXDLIN(  24)													averageY1 = (averageY1 + y03);
HXDLIN(  24)													fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            												}
HXDLIN(  24)												Float x10 = (px1 + x11);
HXDLIN(  24)												Float y10 = (py1 + y11);
HXDLIN(  24)												bool _hx_tmp26;
HXDLIN(  24)												bool _hx_tmp27;
HXDLIN(  24)												 ::pi_xy::iter::IntIterStart this24 = scaled->xIter3;
HXDLIN(  24)												bool _hx_tmp28;
HXDLIN(  24)												if ((x10 > (this24->start - 1))) {
HXLINE(  24)													_hx_tmp28 = (x10 < (this24->max + 1));
            												}
            												else {
HXLINE(  24)													_hx_tmp28 = false;
            												}
HXDLIN(  24)												if (_hx_tmp28) {
HXLINE(  24)													 ::pi_xy::iter::IntIterStart this25 = scaled->yIter3;
HXDLIN(  24)													if ((y10 > (this25->start - 1))) {
HXLINE(  24)														_hx_tmp27 = (y10 < (this25->max + 1));
            													}
            													else {
HXLINE(  24)														_hx_tmp27 = false;
            													}
            												}
            												else {
HXLINE(  24)													_hx_tmp27 = false;
            												}
HXDLIN(  24)												if (_hx_tmp27) {
HXLINE(  24)													Float s6 = ((scaled->s0 + (scaled->sx * x10)) + (scaled->sy * y10));
HXDLIN(  24)													Float t6 = ((scaled->t0 + (scaled->tx * x10)) + (scaled->ty * y10));
HXDLIN(  24)													bool _hx_tmp29;
HXDLIN(  24)													if (!((s6 <= 0))) {
HXLINE(  24)														_hx_tmp29 = (t6 <= 0);
            													}
            													else {
HXLINE(  24)														_hx_tmp29 = true;
            													}
HXDLIN(  24)													if (_hx_tmp29) {
HXLINE(  24)														_hx_tmp26 = false;
            													}
            													else {
HXLINE(  24)														if (((s6 + t6) < scaled->A)) {
HXLINE(  24)															_hx_tmp26 = true;
            														}
            														else {
HXLINE(  24)															_hx_tmp26 = false;
            														}
            													}
            												}
            												else {
HXLINE(  24)													_hx_tmp26 = false;
            												}
HXDLIN(  24)												if (_hx_tmp26) {
HXLINE(  24)													hits1 = (hits1 + 1);
HXDLIN(  24)													averageX1 = (averageX1 + x11);
HXDLIN(  24)													averageY1 = (averageY1 + y11);
HXDLIN(  24)													fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            												}
HXDLIN(  24)												Float x12 = (px1 + x21);
HXDLIN(  24)												Float y12 = (py1 + y21);
HXDLIN(  24)												bool _hx_tmp30;
HXDLIN(  24)												bool _hx_tmp31;
HXDLIN(  24)												 ::pi_xy::iter::IntIterStart this26 = scaled->xIter3;
HXDLIN(  24)												bool _hx_tmp32;
HXDLIN(  24)												if ((x12 > (this26->start - 1))) {
HXLINE(  24)													_hx_tmp32 = (x12 < (this26->max + 1));
            												}
            												else {
HXLINE(  24)													_hx_tmp32 = false;
            												}
HXDLIN(  24)												if (_hx_tmp32) {
HXLINE(  24)													 ::pi_xy::iter::IntIterStart this27 = scaled->yIter3;
HXDLIN(  24)													if ((y12 > (this27->start - 1))) {
HXLINE(  24)														_hx_tmp31 = (y12 < (this27->max + 1));
            													}
            													else {
HXLINE(  24)														_hx_tmp31 = false;
            													}
            												}
            												else {
HXLINE(  24)													_hx_tmp31 = false;
            												}
HXDLIN(  24)												if (_hx_tmp31) {
HXLINE(  24)													Float s7 = ((scaled->s0 + (scaled->sx * x12)) + (scaled->sy * y12));
HXDLIN(  24)													Float t7 = ((scaled->t0 + (scaled->tx * x12)) + (scaled->ty * y12));
HXDLIN(  24)													bool _hx_tmp33;
HXDLIN(  24)													if (!((s7 <= 0))) {
HXLINE(  24)														_hx_tmp33 = (t7 <= 0);
            													}
            													else {
HXLINE(  24)														_hx_tmp33 = true;
            													}
HXDLIN(  24)													if (_hx_tmp33) {
HXLINE(  24)														_hx_tmp30 = false;
            													}
            													else {
HXLINE(  24)														if (((s7 + t7) < scaled->A)) {
HXLINE(  24)															_hx_tmp30 = true;
            														}
            														else {
HXLINE(  24)															_hx_tmp30 = false;
            														}
            													}
            												}
            												else {
HXLINE(  24)													_hx_tmp30 = false;
            												}
HXDLIN(  24)												if (_hx_tmp30) {
HXLINE(  24)													hits1 = (hits1 + 1);
HXDLIN(  24)													averageX1 = (averageX1 + x21);
HXDLIN(  24)													averageY1 = (averageY1 + y21);
HXDLIN(  24)													fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            												}
HXDLIN(  24)												Float x13 = (px1 + x31);
HXDLIN(  24)												Float y13 = (py1 + y31);
HXDLIN(  24)												bool _hx_tmp34;
HXDLIN(  24)												bool _hx_tmp35;
HXDLIN(  24)												 ::pi_xy::iter::IntIterStart this28 = scaled->xIter3;
HXDLIN(  24)												bool _hx_tmp36;
HXDLIN(  24)												if ((x13 > (this28->start - 1))) {
HXLINE(  24)													_hx_tmp36 = (x13 < (this28->max + 1));
            												}
            												else {
HXLINE(  24)													_hx_tmp36 = false;
            												}
HXDLIN(  24)												if (_hx_tmp36) {
HXLINE(  24)													 ::pi_xy::iter::IntIterStart this29 = scaled->yIter3;
HXDLIN(  24)													if ((y13 > (this29->start - 1))) {
HXLINE(  24)														_hx_tmp35 = (y13 < (this29->max + 1));
            													}
            													else {
HXLINE(  24)														_hx_tmp35 = false;
            													}
            												}
            												else {
HXLINE(  24)													_hx_tmp35 = false;
            												}
HXDLIN(  24)												if (_hx_tmp35) {
HXLINE(  24)													Float s8 = ((scaled->s0 + (scaled->sx * x13)) + (scaled->sy * y13));
HXDLIN(  24)													Float t8 = ((scaled->t0 + (scaled->tx * x13)) + (scaled->ty * y13));
HXDLIN(  24)													bool _hx_tmp37;
HXDLIN(  24)													if (!((s8 <= 0))) {
HXLINE(  24)														_hx_tmp37 = (t8 <= 0);
            													}
            													else {
HXLINE(  24)														_hx_tmp37 = true;
            													}
HXDLIN(  24)													if (_hx_tmp37) {
HXLINE(  24)														_hx_tmp34 = false;
            													}
            													else {
HXLINE(  24)														if (((s8 + t8) < scaled->A)) {
HXLINE(  24)															_hx_tmp34 = true;
            														}
            														else {
HXLINE(  24)															_hx_tmp34 = false;
            														}
            													}
            												}
            												else {
HXLINE(  24)													_hx_tmp34 = false;
            												}
HXDLIN(  24)												if (_hx_tmp34) {
HXLINE(  24)													hits1 = (hits1 + 1);
HXDLIN(  24)													averageX1 = (averageX1 + x31);
HXDLIN(  24)													averageY1 = (averageY1 + y31);
HXDLIN(  24)													fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            												}
HXDLIN(  24)												Float x14 = (px1 + x41);
HXDLIN(  24)												Float y14 = (py1 + y41);
HXDLIN(  24)												bool _hx_tmp38;
HXDLIN(  24)												bool _hx_tmp39;
HXDLIN(  24)												 ::pi_xy::iter::IntIterStart this30 = scaled->xIter3;
HXDLIN(  24)												bool _hx_tmp40;
HXDLIN(  24)												if ((x14 > (this30->start - 1))) {
HXLINE(  24)													_hx_tmp40 = (x14 < (this30->max + 1));
            												}
            												else {
HXLINE(  24)													_hx_tmp40 = false;
            												}
HXDLIN(  24)												if (_hx_tmp40) {
HXLINE(  24)													 ::pi_xy::iter::IntIterStart this31 = scaled->yIter3;
HXDLIN(  24)													if ((y14 > (this31->start - 1))) {
HXLINE(  24)														_hx_tmp39 = (y14 < (this31->max + 1));
            													}
            													else {
HXLINE(  24)														_hx_tmp39 = false;
            													}
            												}
            												else {
HXLINE(  24)													_hx_tmp39 = false;
            												}
HXDLIN(  24)												if (_hx_tmp39) {
HXLINE(  24)													Float s9 = ((scaled->s0 + (scaled->sx * x14)) + (scaled->sy * y14));
HXDLIN(  24)													Float t9 = ((scaled->t0 + (scaled->tx * x14)) + (scaled->ty * y14));
HXDLIN(  24)													bool _hx_tmp41;
HXDLIN(  24)													if (!((s9 <= 0))) {
HXLINE(  24)														_hx_tmp41 = (t9 <= 0);
            													}
            													else {
HXLINE(  24)														_hx_tmp41 = true;
            													}
HXDLIN(  24)													if (_hx_tmp41) {
HXLINE(  24)														_hx_tmp38 = false;
            													}
            													else {
HXLINE(  24)														if (((s9 + t9) < scaled->A)) {
HXLINE(  24)															_hx_tmp38 = true;
            														}
            														else {
HXLINE(  24)															_hx_tmp38 = false;
            														}
            													}
            												}
            												else {
HXLINE(  24)													_hx_tmp38 = false;
            												}
HXDLIN(  24)												if (_hx_tmp38) {
HXLINE(  24)													hits1 = (hits1 + 1);
HXDLIN(  24)													averageX1 = (averageX1 + x41);
HXDLIN(  24)													averageY1 = (averageY1 + y41);
HXDLIN(  24)													fractionTotal2 = (fractionTotal2 + ((Float)0.2));
            												}
HXDLIN(  24)												if ((hits1 != 0)) {
HXLINE( 244)													averageX1 = (px1 + (averageX1 / ( (Float)(hits1) )));
HXLINE( 245)													averageY1 = (py1 + (averageY1 / ( (Float)(hits1) )));
            												}
            												else {
HXLINE( 247)													averageX1 = ( (Float)(px1) );
HXLINE( 248)													averageY1 = ( (Float)(py1) );
            												}
HXLINE(  24)												Float fractionTotal3 = fractionTotal2;
HXDLIN(  24)												Float sampleScaled_fractionTotal = fractionTotal3;
HXDLIN(  24)												Float sampleScaled_averageX = averageX1;
HXDLIN(  24)												Float sampleScaled_averageY = averageY1;
HXDLIN(  24)												bool sampleScaled_notHit = (fractionTotal3 == ((Float)0.));
HXDLIN(  24)												Float scaledTotal = sampleScaled_fractionTotal;
HXDLIN(  24)												bool _hx_tmp42;
HXDLIN(  24)												if (!((scaledTotal > hitTotal))) {
HXLINE(  24)													_hx_tmp42 = (hitTotal == ((Float)1.));
            												}
            												else {
HXLINE(  24)													_hx_tmp42 = true;
            												}
HXDLIN(  24)												if (_hx_tmp42) {
HXLINE(  24)													Float pcx2 = (sampleData_averageX - barycentric_cx);
HXDLIN(  24)													Float pcy2 = (sampleData_averageY - barycentric_cy);
HXDLIN(  24)													Float dot312 = ((pcx2 * barycentric_bcx) + (pcy2 * barycentric_bcy));
HXDLIN(  24)													Float dot322 = ((pcx2 * barycentric_acx) + (pcy2 * barycentric_acy));
HXDLIN(  24)													Float ratioA3 = (((barycentric_dot22 * dot312) - (barycentric_dot12 * dot322)) * barycentric_denom1);
HXDLIN(  24)													Float ratioB3 = (((barycentric_dot11 * dot322) - (barycentric_dot12 * dot312)) * barycentric_denom1);
HXDLIN(  24)													Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  24)													Float ratiosAvg_ratioA1 = ratioA3;
HXDLIN(  24)													Float ratiosAvg_ratioB1 = ratioB3;
HXDLIN(  24)													Float ratiosAvg_ratioC1 = ratioC3;
HXDLIN(  24)													Float ratioA_1 = ratiosAvg_ratioA1;
HXDLIN(  24)													Float ratioB_1 = ratiosAvg_ratioB1;
HXDLIN(  24)													Float ratioC_1 = ratiosAvg_ratioC1;
HXDLIN(  24)													int i5 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_1) + (( (Float)(aB) ) * ratioB_1)) + (( (Float)(aC) ) * ratioC_1)));
HXDLIN(  24)													if ((i5 > 255)) {
HXLINE(  24)														i5 = 255;
            													}
HXDLIN(  24)													if ((i5 < 0)) {
HXLINE(  25)														i5 = 0;
            													}
HXLINE( 187)													a1 = i5;
HXLINE(  24)													int i6 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_1) + (( (Float)(rB) ) * ratioB_1)) + (( (Float)(rC) ) * ratioC_1)));
HXDLIN(  24)													if ((i6 > 255)) {
HXLINE(  24)														i6 = 255;
            													}
HXDLIN(  24)													if ((i6 < 0)) {
HXLINE(  25)														i6 = 0;
            													}
HXLINE( 188)													r = i6;
HXLINE(  24)													int i7 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_1) + (( (Float)(gB) ) * ratioB_1)) + (( (Float)(gC) ) * ratioC_1)));
HXDLIN(  24)													if ((i7 > 255)) {
HXLINE(  24)														i7 = 255;
            													}
HXDLIN(  24)													if ((i7 < 0)) {
HXLINE(  25)														i7 = 0;
            													}
HXLINE( 189)													g = i7;
HXLINE(  24)													int i8 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_1) + (( (Float)(bB) ) * ratioB_1)) + (( (Float)(bC) ) * ratioC_1)));
HXDLIN(  24)													if ((i8 > 255)) {
HXLINE(  24)														i8 = 255;
            													}
HXDLIN(  24)													if ((i8 < 0)) {
HXLINE(  25)														i8 = 0;
            													}
HXLINE( 190)													b = i8;
HXLINE(  24)													{
HXLINE(  24)														int location1;
HXDLIN(  24)														if (pixelImage->useVirtualPos) {
HXLINE(  24)															location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            														}
            														else {
HXLINE(  24)															location1 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            														}
HXDLIN(  24)														bool _hx_tmp43;
HXDLIN(  24)														if (pixelImage->transparent) {
HXLINE(  24)															_hx_tmp43 = (a1 < 254);
            														}
            														else {
HXLINE(  24)															_hx_tmp43 = false;
            														}
HXDLIN(  24)														if (_hx_tmp43) {
HXLINE(  24)															int this32 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  24)															int old1;
HXDLIN(  24)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																old1 = ((((((this32 >> 24) & 255) << 24) | ((this32 & 255) << 16)) | (((this32 >> 8) & 255) << 8)) | ((this32 >> 16) & 255));
            															}
            															else {
HXLINE(  24)																old1 = this32;
            															}
HXDLIN(  24)															int rhs1 = ((((a1 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  24)															Float a12;
HXDLIN(  24)															int this33 = ((old1 >> 24) & 255);
HXDLIN(  24)															if ((this33 == 0)) {
HXLINE(  24)																a12 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																a12 = (( (Float)(this33) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float r11;
HXDLIN(  24)															int this34 = ((old1 >> 16) & 255);
HXDLIN(  24)															if ((this34 == 0)) {
HXLINE(  24)																r11 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																r11 = (( (Float)(this34) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float g11;
HXDLIN(  24)															int this35 = ((old1 >> 8) & 255);
HXDLIN(  24)															if ((this35 == 0)) {
HXLINE(  24)																g11 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																g11 = (( (Float)(this35) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float b12;
HXDLIN(  24)															int this36 = (old1 & 255);
HXDLIN(  24)															if ((this36 == 0)) {
HXLINE(  24)																b12 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																b12 = (( (Float)(this36) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float a22;
HXDLIN(  24)															int this37 = ((rhs1 >> 24) & 255);
HXDLIN(  24)															if ((this37 == 0)) {
HXLINE(  24)																a22 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																a22 = (( (Float)(this37) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float r21;
HXDLIN(  24)															int this38 = ((rhs1 >> 16) & 255);
HXDLIN(  24)															if ((this38 == 0)) {
HXLINE(  24)																r21 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																r21 = (( (Float)(this38) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float g21;
HXDLIN(  24)															int this39 = ((rhs1 >> 8) & 255);
HXDLIN(  24)															if ((this39 == 0)) {
HXLINE(  24)																g21 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																g21 = (( (Float)(this39) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float b22;
HXDLIN(  24)															int this40 = (rhs1 & 255);
HXDLIN(  24)															if ((this40 == 0)) {
HXLINE(  24)																b22 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																b22 = (( (Float)(this40) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float a32 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  24)															int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a32) + (r21 * a22))));
HXDLIN(  24)															int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a32) + (g21 * a22))));
HXDLIN(  24)															int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a32) + (b22 * a22))));
HXDLIN(  24)															int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  24)															int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b4);
HXDLIN(  24)															{
HXLINE(  24)																int _hx_tmp44;
HXDLIN(  24)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																	_hx_tmp44 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            																}
            																else {
HXLINE(  24)																	_hx_tmp44 = blended1;
            																}
HXDLIN(  24)																::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp44);
            															}
            														}
            														else {
HXLINE(  24)															int value1;
HXDLIN(  24)															if (pixelImage->isLittle) {
HXLINE(  24)																value1 = ((((a1 << 24) | (b << 16)) | (g << 8)) | r);
            															}
            															else {
HXLINE(  24)																value1 = ((((a1 << 24) | (r << 16)) | (g << 8)) | b);
            															}
HXDLIN(  24)															::iterMagic::Iimg_obj::set(pixelImage->image,location1,value1);
            														}
            													}
            												}
            												else {
HXLINE(  24)													Float pcx3 = (sampleData_averageX - barycentric_cx);
HXDLIN(  24)													Float pcy3 = (sampleData_averageY - barycentric_cy);
HXDLIN(  24)													Float dot313 = ((pcx3 * barycentric_bcx) + (pcy3 * barycentric_bcy));
HXDLIN(  24)													Float dot323 = ((pcx3 * barycentric_acx) + (pcy3 * barycentric_acy));
HXDLIN(  24)													Float ratioA4 = (((barycentric_dot22 * dot313) - (barycentric_dot12 * dot323)) * barycentric_denom1);
HXDLIN(  24)													Float ratioB4 = (((barycentric_dot11 * dot323) - (barycentric_dot12 * dot313)) * barycentric_denom1);
HXDLIN(  24)													Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN(  24)													Float ratiosAvg_ratioA2 = ratioA4;
HXDLIN(  24)													Float ratiosAvg_ratioB2 = ratioB4;
HXDLIN(  24)													Float ratiosAvg_ratioC2 = ratioC4;
HXDLIN(  24)													Float ratioA_2 = ratiosAvg_ratioA2;
HXDLIN(  24)													Float ratioB_2 = ratiosAvg_ratioB2;
HXDLIN(  24)													Float ratioC_2 = ratiosAvg_ratioC2;
HXDLIN(  24)													int i9 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA_2) + (( (Float)(aB) ) * ratioB_2)) + (( (Float)(aC) ) * ratioC_2)));
HXDLIN(  24)													if ((i9 > 255)) {
HXLINE(  24)														i9 = 255;
            													}
HXDLIN(  24)													if ((i9 < 0)) {
HXLINE(  25)														i9 = 0;
            													}
HXLINE( 198)													a1 = i9;
HXLINE(  24)													int i10 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA_2) + (( (Float)(rB) ) * ratioB_2)) + (( (Float)(rC) ) * ratioC_2)));
HXDLIN(  24)													if ((i10 > 255)) {
HXLINE(  24)														i10 = 255;
            													}
HXDLIN(  24)													if ((i10 < 0)) {
HXLINE(  25)														i10 = 0;
            													}
HXLINE( 199)													r = i10;
HXLINE(  24)													int i11 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA_2) + (( (Float)(gB) ) * ratioB_2)) + (( (Float)(gC) ) * ratioC_2)));
HXDLIN(  24)													if ((i11 > 255)) {
HXLINE(  24)														i11 = 255;
            													}
HXDLIN(  24)													if ((i11 < 0)) {
HXLINE(  25)														i11 = 0;
            													}
HXLINE( 200)													g = i11;
HXLINE(  24)													int i12 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA_2) + (( (Float)(bB) ) * ratioB_2)) + (( (Float)(bC) ) * ratioC_2)));
HXDLIN(  24)													if ((i12 > 255)) {
HXLINE(  24)														i12 = 255;
            													}
HXDLIN(  24)													if ((i12 < 0)) {
HXLINE(  25)														i12 = 0;
            													}
HXLINE( 201)													b = i12;
HXLINE(  24)													{
HXLINE(  24)														int a7;
HXDLIN(  24)														if ((aScale > ((Float)0.9))) {
HXLINE(  24)															a7 = a1;
            														}
            														else {
HXLINE(  24)															int i13 = ::Std_obj::_hx_int((( (Float)(a1) ) * aScale));
HXDLIN(  24)															if ((i13 > 255)) {
HXLINE(  24)																i13 = 255;
            															}
HXDLIN(  24)															if ((i13 < 0)) {
HXLINE(  25)																i13 = 0;
            															}
HXLINE(  24)															a7 = i13;
            														}
HXDLIN(  24)														int location2;
HXDLIN(  24)														if (pixelImage->useVirtualPos) {
HXLINE(  24)															location2 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            														}
            														else {
HXLINE(  24)															location2 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            														}
HXDLIN(  24)														bool _hx_tmp45;
HXDLIN(  24)														if (pixelImage->transparent) {
HXLINE(  24)															_hx_tmp45 = (a7 < 254);
            														}
            														else {
HXLINE(  24)															_hx_tmp45 = false;
            														}
HXDLIN(  24)														if (_hx_tmp45) {
HXLINE(  24)															int this41 = ::iterMagic::Iimg_obj::get(pixelImage->image,location2);
HXDLIN(  24)															int old2;
HXDLIN(  24)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																old2 = ((((((this41 >> 24) & 255) << 24) | ((this41 & 255) << 16)) | (((this41 >> 8) & 255) << 8)) | ((this41 >> 16) & 255));
            															}
            															else {
HXLINE(  24)																old2 = this41;
            															}
HXDLIN(  24)															int rhs2 = ((((a7 << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  24)															Float a13;
HXDLIN(  24)															int this42 = ((old2 >> 24) & 255);
HXDLIN(  24)															if ((this42 == 0)) {
HXLINE(  24)																a13 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																a13 = (( (Float)(this42) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float r12;
HXDLIN(  24)															int this43 = ((old2 >> 16) & 255);
HXDLIN(  24)															if ((this43 == 0)) {
HXLINE(  24)																r12 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																r12 = (( (Float)(this43) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float g12;
HXDLIN(  24)															int this44 = ((old2 >> 8) & 255);
HXDLIN(  24)															if ((this44 == 0)) {
HXLINE(  24)																g12 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																g12 = (( (Float)(this44) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float b13;
HXDLIN(  24)															int this45 = (old2 & 255);
HXDLIN(  24)															if ((this45 == 0)) {
HXLINE(  24)																b13 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																b13 = (( (Float)(this45) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float a23;
HXDLIN(  24)															int this46 = ((rhs2 >> 24) & 255);
HXDLIN(  24)															if ((this46 == 0)) {
HXLINE(  24)																a23 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																a23 = (( (Float)(this46) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float r22;
HXDLIN(  24)															int this47 = ((rhs2 >> 16) & 255);
HXDLIN(  24)															if ((this47 == 0)) {
HXLINE(  24)																r22 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																r22 = (( (Float)(this47) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float g22;
HXDLIN(  24)															int this48 = ((rhs2 >> 8) & 255);
HXDLIN(  24)															if ((this48 == 0)) {
HXLINE(  24)																g22 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																g22 = (( (Float)(this48) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float b23;
HXDLIN(  24)															int this49 = (rhs2 & 255);
HXDLIN(  24)															if ((this49 == 0)) {
HXLINE(  24)																b23 = ((Float)0.);
            															}
            															else {
HXLINE(  24)																b23 = (( (Float)(this49) ) / ( (Float)(255) ));
            															}
HXDLIN(  24)															Float a33 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  24)															int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a33) + (r22 * a23))));
HXDLIN(  24)															int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a33) + (g22 * a23))));
HXDLIN(  24)															int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a33) + (b23 * a23))));
HXDLIN(  24)															int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  24)															int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b5);
HXDLIN(  24)															{
HXLINE(  24)																int _hx_tmp46;
HXDLIN(  24)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																	_hx_tmp46 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            																}
            																else {
HXLINE(  24)																	_hx_tmp46 = blended2;
            																}
HXDLIN(  24)																::iterMagic::Iimg_obj::set(pixelImage->image,location2,_hx_tmp46);
            															}
            														}
            														else {
HXLINE(  24)															int value2;
HXDLIN(  24)															if (pixelImage->isLittle) {
HXLINE(  24)																value2 = ((((a7 << 24) | (b << 16)) | (g << 8)) | r);
            															}
            															else {
HXLINE(  24)																value2 = ((((a7 << 24) | (r << 16)) | (g << 8)) | b);
            															}
HXDLIN(  24)															::iterMagic::Iimg_obj::set(pixelImage->image,location2,value2);
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  24)						if ((hasHit == false)) {
HXLINE(  24)							 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx1,by1,cx1,cy1,true);
            						}
            					}
            				}
HXDLIN(  24)				Float ax4 = quadPoints_bx;
HXDLIN(  24)				Float ay4 = quadPoints_by;
HXDLIN(  24)				Float bx2 = quadPoints_cx;
HXDLIN(  24)				Float by2 = quadPoints_cy;
HXDLIN(  24)				Float cx2 = quadPoints_dx;
HXDLIN(  24)				Float cy2 = quadPoints_dy;
HXDLIN(  24)				bool softAB1 = true;
HXDLIN(  24)				bool softBC1 = true;
HXDLIN(  24)				bool softCA1 = false;
HXDLIN(  24)				bool adjustWinding1 = (((((ax4 * by2) - (bx2 * ay4)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay4) - (ax4 * cy2))) > 0);
HXDLIN(  24)				if (!(adjustWinding1)) {
HXLINE(  24)					Float bx_3 = bx2;
HXDLIN(  24)					Float by_3 = by2;
HXLINE(  87)					bx2 = cx2;
HXLINE(  88)					by2 = cy2;
HXLINE(  89)					cx2 = bx_3;
HXLINE(  90)					cy2 = by_3;
            				}
HXLINE(  24)				int aA1 = ((colorC >> 24) & 255);
HXDLIN(  24)				int rA1 = ((colorC >> 16) & 255);
HXDLIN(  24)				int gA1 = ((colorC >> 8) & 255);
HXDLIN(  24)				int bA1 = (colorC & 255);
HXDLIN(  24)				int aB1 = ((colorB >> 24) & 255);
HXDLIN(  24)				int rB1 = ((colorB >> 16) & 255);
HXDLIN(  24)				int gB1 = ((colorB >> 8) & 255);
HXDLIN(  24)				int bB1 = (colorB & 255);
HXDLIN(  24)				int aC1 = ((colorD >> 24) & 255);
HXDLIN(  24)				int rC1 = ((colorD >> 16) & 255);
HXDLIN(  24)				int gC1 = ((colorD >> 8) & 255);
HXDLIN(  24)				int bC1 = (colorD & 255);
HXDLIN(  24)				int a9 = 0;
HXDLIN(  24)				int r6 = 0;
HXDLIN(  24)				int g6 = 0;
HXDLIN(  24)				int b6 = 0;
HXDLIN(  24)				 ::pi_xy::algo::HitTri hitTriScalar1 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax4,ay4,bx2,by2,cx2,cy2,true);
HXDLIN(  24)				 ::pi_xy::iter::IntIterStart barycentric_yIter31;
HXDLIN(  24)				 ::pi_xy::iter::IntIterStart barycentric_xIter31;
HXDLIN(  24)				Float barycentric_dot221;
HXDLIN(  24)				Float barycentric_dot121;
HXDLIN(  24)				Float barycentric_dot111;
HXDLIN(  24)				Float barycentric_denom11;
HXDLIN(  24)				Float barycentric_bcy1;
HXDLIN(  24)				Float barycentric_bcx1;
HXDLIN(  24)				Float barycentric_acy1;
HXDLIN(  24)				Float barycentric_acx1;
HXDLIN(  24)				Float barycentric_ax1 = hitTriScalar1->ax;
HXDLIN(  24)				Float barycentric_ay1 = hitTriScalar1->ay;
HXDLIN(  24)				Float barycentric_bx1 = hitTriScalar1->bx;
HXDLIN(  24)				Float barycentric_by1 = hitTriScalar1->by;
HXDLIN(  24)				Float barycentric_cx1 = hitTriScalar1->cx;
HXDLIN(  24)				Float barycentric_cy1 = hitTriScalar1->cy;
HXDLIN(  24)				bool barycentric_preCalculated1 = true;
HXDLIN(  24)				{
HXLINE(  24)					barycentric_bcx1 = (barycentric_bx1 - barycentric_cx1);
HXDLIN(  24)					barycentric_bcy1 = (barycentric_by1 - barycentric_cy1);
HXDLIN(  24)					barycentric_acx1 = (barycentric_ax1 - barycentric_cx1);
HXDLIN(  24)					barycentric_acy1 = (barycentric_ay1 - barycentric_cy1);
HXDLIN(  24)					Float ax5 = barycentric_bcx1;
HXDLIN(  24)					Float ay5 = barycentric_bcy1;
HXDLIN(  24)					barycentric_dot111 = ((ax5 * ax5) + (ay5 * ay5));
HXDLIN(  24)					barycentric_dot121 = ((barycentric_bcx1 * barycentric_acx1) + (barycentric_bcy1 * barycentric_acy1));
HXDLIN(  24)					Float ax6 = barycentric_acx1;
HXDLIN(  24)					Float ay6 = barycentric_acy1;
HXDLIN(  24)					barycentric_dot221 = ((ax6 * ax6) + (ay6 * ay6));
HXDLIN(  24)					barycentric_denom11 = (( (Float)(1) ) / ((barycentric_dot111 * barycentric_dot221) - (barycentric_dot121 * barycentric_dot121)));
HXDLIN(  24)					Float a10 = barycentric_ax1;
HXDLIN(  24)					Float b7 = barycentric_bx1;
HXDLIN(  24)					Float c2 = barycentric_cx1;
HXDLIN(  24)					if ((a10 > b7)) {
HXLINE(  24)						if ((a10 > c2)) {
HXLINE(  24)							int min4;
HXDLIN(  24)							if ((b7 > c2)) {
HXLINE(  24)								min4 = ::Math_obj::floor(c2);
            							}
            							else {
HXLINE(  24)								min4 = ::Math_obj::floor(b7);
            							}
HXDLIN(  24)							int ii_min8 = min4;
HXDLIN(  24)							int ii_max8 = ::Math_obj::ceil(a10);
HXDLIN(  24)							barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            						}
            						else {
HXLINE(  24)							int ii_min9 = ::Math_obj::floor(b7);
HXDLIN(  24)							int ii_max9 = ::Math_obj::ceil(c2);
HXDLIN(  24)							barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            						}
            					}
            					else {
HXLINE(  24)						if ((b7 > c2)) {
HXLINE(  24)							int min5;
HXDLIN(  24)							if ((a10 > c2)) {
HXLINE(  24)								min5 = ::Math_obj::floor(c2);
            							}
            							else {
HXLINE(  24)								min5 = ::Math_obj::ceil(a10);
            							}
HXDLIN(  24)							int ii_min10 = min5;
HXDLIN(  24)							int ii_max10 = ::Math_obj::ceil(b7);
HXDLIN(  24)							barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            						}
            						else {
HXLINE(  24)							int ii_min11 = ::Math_obj::floor(a10);
HXDLIN(  24)							int ii_max11 = ::Math_obj::ceil(c2);
HXDLIN(  24)							barycentric_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            						}
            					}
HXDLIN(  24)					Float a14 = barycentric_ay1;
HXDLIN(  24)					Float b8 = barycentric_by1;
HXDLIN(  24)					Float c3 = barycentric_cy1;
HXDLIN(  24)					if ((a14 > b8)) {
HXLINE(  24)						if ((a14 > c3)) {
HXLINE(  24)							int min6;
HXDLIN(  24)							if ((b8 > c3)) {
HXLINE(  24)								min6 = ::Math_obj::floor(c3);
            							}
            							else {
HXLINE(  24)								min6 = ::Math_obj::floor(b8);
            							}
HXDLIN(  24)							int ii_min12 = min6;
HXDLIN(  24)							int ii_max12 = ::Math_obj::ceil(a14);
HXDLIN(  24)							barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            						}
            						else {
HXLINE(  24)							int ii_min13 = ::Math_obj::floor(b8);
HXDLIN(  24)							int ii_max13 = ::Math_obj::ceil(c3);
HXDLIN(  24)							barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            						}
            					}
            					else {
HXLINE(  24)						if ((b8 > c3)) {
HXLINE(  24)							int min7;
HXDLIN(  24)							if ((a14 > c3)) {
HXLINE(  24)								min7 = ::Math_obj::floor(c3);
            							}
            							else {
HXLINE(  24)								min7 = ::Math_obj::ceil(a14);
            							}
HXDLIN(  24)							int ii_min14 = min7;
HXDLIN(  24)							int ii_max14 = ::Math_obj::ceil(b8);
HXDLIN(  24)							barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            						}
            						else {
HXLINE(  24)							int ii_min15 = ::Math_obj::floor(a14);
HXDLIN(  24)							int ii_max15 = ::Math_obj::ceil(c3);
HXDLIN(  24)							barycentric_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            						}
            					}
            				}
HXDLIN(  24)				Float scaleA2;
HXDLIN(  24)				bool scaleA3;
HXDLIN(  24)				if (!(softAB1)) {
HXLINE(  24)					scaleA3 = softCA1;
            				}
            				else {
HXLINE(  24)					scaleA3 = true;
            				}
HXDLIN(  24)				if (scaleA3) {
HXLINE(  24)					scaleA2 = ((Float)1.5);
            				}
            				else {
HXLINE(  24)					scaleA2 = ((Float)1.);
            				}
HXDLIN(  24)				Float scaleB2;
HXDLIN(  24)				bool scaleB3;
HXDLIN(  24)				if (!(softAB1)) {
HXLINE(  24)					scaleB3 = softBC1;
            				}
            				else {
HXLINE(  24)					scaleB3 = true;
            				}
HXDLIN(  24)				if (scaleB3) {
HXLINE(  24)					scaleB2 = ((Float)1.5);
            				}
            				else {
HXLINE(  24)					scaleB2 = ((Float)1.);
            				}
HXDLIN(  24)				Float scaleC2;
HXDLIN(  24)				bool scaleC3;
HXDLIN(  24)				if (!(softBC1)) {
HXLINE(  24)					scaleC3 = softCA1;
            				}
            				else {
HXLINE(  24)					scaleC3 = true;
            				}
HXDLIN(  24)				if (scaleC3) {
HXLINE(  24)					scaleC2 = ((Float)1.5);
            				}
            				else {
HXLINE(  24)					scaleC2 = ((Float)1.);
            				}
HXDLIN(  24)				Float x04 = ((Float)0.);
HXDLIN(  24)				Float y04 = ((Float)0.);
HXDLIN(  24)				bool isScaledA2 = true;
HXDLIN(  24)				bool isScaledB2 = true;
HXDLIN(  24)				bool isScaledC2 = true;
HXDLIN(  24)				if (isScaledA2) {
HXLINE(  24)					if (isScaledB2) {
HXLINE(  24)						if (isScaledC2) {
HXLINE(  82)							x04 = (((hitTriScalar1->ax + hitTriScalar1->bx) + hitTriScalar1->cx) / ( (Float)(3) ));
HXLINE(  83)							y04 = (((hitTriScalar1->ay + hitTriScalar1->by) + hitTriScalar1->cy) / ( (Float)(3) ));
            						}
            						else {
HXLINE(  79)							x04 = hitTriScalar1->cx;
HXLINE(  80)							y04 = hitTriScalar1->cy;
            						}
            					}
            					else {
HXLINE(  24)						if (isScaledC2) {
HXLINE(  76)							x04 = hitTriScalar1->bx;
HXLINE(  77)							y04 = hitTriScalar1->by;
            						}
            						else {
HXLINE(  73)							x04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(hitTriScalar1);
HXLINE(  74)							y04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(hitTriScalar1);
            						}
            					}
            				}
            				else {
HXLINE(  24)					if (isScaledB2) {
HXLINE(  24)						if (isScaledC2) {
HXLINE(  70)							x04 = hitTriScalar1->ax;
HXLINE(  71)							y04 = hitTriScalar1->ay;
            						}
            						else {
HXLINE(  67)							x04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(hitTriScalar1);
HXLINE(  68)							y04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(hitTriScalar1);
            						}
            					}
            					else {
HXLINE(  24)						if (isScaledC2) {
HXLINE(  64)							x04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(hitTriScalar1);
HXLINE(  65)							y04 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(hitTriScalar1);
            						}
            						else {
HXLINE(  61)							x04 = (((hitTriScalar1->ax + hitTriScalar1->bx) + hitTriScalar1->cx) / ( (Float)(3) ));
HXLINE(  62)							y04 = (((hitTriScalar1->ay + hitTriScalar1->by) + hitTriScalar1->cy) / ( (Float)(3) ));
            						}
            					}
            				}
HXLINE(  24)				Float ax_2;
HXDLIN(  24)				if (isScaledA2) {
HXLINE(  24)					Float point12 = hitTriScalar1->ax;
HXDLIN(  24)					point12 = (point12 - x04);
HXDLIN(  24)					point12 = (point12 * ((Float)0.999));
HXDLIN(  24)					point12 = (point12 + x04);
HXDLIN(  24)					ax_2 = point12;
            				}
            				else {
HXLINE(  24)					ax_2 = hitTriScalar1->ax;
            				}
HXDLIN(  24)				Float ay_2;
HXDLIN(  24)				if (isScaledA2) {
HXLINE(  24)					Float point13 = hitTriScalar1->ay;
HXDLIN(  24)					point13 = (point13 - y04);
HXDLIN(  24)					point13 = (point13 * ((Float)0.999));
HXDLIN(  24)					point13 = (point13 + y04);
HXDLIN(  24)					ay_2 = point13;
            				}
            				else {
HXLINE(  24)					ay_2 = hitTriScalar1->ay;
            				}
HXDLIN(  24)				Float bx_4;
HXDLIN(  24)				if (isScaledB2) {
HXLINE(  24)					Float point14 = hitTriScalar1->bx;
HXDLIN(  24)					point14 = (point14 - x04);
HXDLIN(  24)					point14 = (point14 * ((Float)0.999));
HXDLIN(  24)					point14 = (point14 + x04);
HXDLIN(  24)					bx_4 = point14;
            				}
            				else {
HXLINE(  24)					bx_4 = hitTriScalar1->bx;
            				}
HXDLIN(  24)				Float by_4;
HXDLIN(  24)				if (isScaledB2) {
HXLINE(  24)					Float point15 = hitTriScalar1->by;
HXDLIN(  24)					point15 = (point15 - y04);
HXDLIN(  24)					point15 = (point15 * ((Float)0.999));
HXDLIN(  24)					point15 = (point15 + y04);
HXDLIN(  24)					by_4 = point15;
            				}
            				else {
HXLINE(  24)					by_4 = hitTriScalar1->by;
            				}
HXDLIN(  24)				Float cx_2;
HXDLIN(  24)				if (isScaledC2) {
HXLINE(  24)					Float point16 = hitTriScalar1->cx;
HXDLIN(  24)					point16 = (point16 - x04);
HXDLIN(  24)					point16 = (point16 * ((Float)0.999));
HXDLIN(  24)					point16 = (point16 + x04);
HXDLIN(  24)					cx_2 = point16;
            				}
            				else {
HXLINE(  24)					cx_2 = hitTriScalar1->cx;
            				}
HXDLIN(  24)				Float cy_2;
HXDLIN(  24)				if (isScaledC2) {
HXLINE(  24)					Float point17 = hitTriScalar1->cy;
HXDLIN(  24)					point17 = (point17 - y04);
HXDLIN(  24)					point17 = (point17 * ((Float)0.999));
HXDLIN(  24)					point17 = (point17 + y04);
HXDLIN(  24)					cy_2 = point17;
            				}
            				else {
HXLINE(  24)					cy_2 = hitTriScalar1->cy;
            				}
HXDLIN(  24)				 ::pi_xy::algo::HitTri scaled1 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_2,ay_2,bx_4,by_4,cx_2,cy_2,true);
HXDLIN(  24)				Float x05 = ((Float)0.);
HXDLIN(  24)				Float y05 = ((Float)0.);
HXDLIN(  24)				bool isScaledA3 = (scaleA2 != ((Float)1.));
HXDLIN(  24)				bool isScaledB3 = (scaleB2 != ((Float)1.));
HXDLIN(  24)				bool isScaledC3 = (scaleC2 != ((Float)1.));
HXDLIN(  24)				if (isScaledA3) {
HXLINE(  24)					if (isScaledB3) {
HXLINE(  24)						if (isScaledC3) {
HXLINE(  82)							x05 = (((scaled1->ax + scaled1->bx) + scaled1->cx) / ( (Float)(3) ));
HXLINE(  83)							y05 = (((scaled1->ay + scaled1->by) + scaled1->cy) / ( (Float)(3) ));
            						}
            						else {
HXLINE(  79)							x05 = scaled1->cx;
HXLINE(  80)							y05 = scaled1->cy;
            						}
            					}
            					else {
HXLINE(  24)						if (isScaledC3) {
HXLINE(  76)							x05 = scaled1->bx;
HXLINE(  77)							y05 = scaled1->by;
            						}
            						else {
HXLINE(  73)							x05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCx(scaled1);
HXLINE(  74)							y05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianBCy(scaled1);
            						}
            					}
            				}
            				else {
HXLINE(  24)					if (isScaledB3) {
HXLINE(  24)						if (isScaledC3) {
HXLINE(  70)							x05 = scaled1->ax;
HXLINE(  71)							y05 = scaled1->ay;
            						}
            						else {
HXLINE(  67)							x05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAx(scaled1);
HXLINE(  68)							y05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianCAy(scaled1);
            						}
            					}
            					else {
HXLINE(  24)						if (isScaledC3) {
HXLINE(  64)							x05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABx(scaled1);
HXLINE(  65)							y05 = ::pi_xy::algo::_HitTriScalar::HitTriScalar_Impl__obj::medianABy(scaled1);
            						}
            						else {
HXLINE(  61)							x05 = (((scaled1->ax + scaled1->bx) + scaled1->cx) / ( (Float)(3) ));
HXLINE(  62)							y05 = (((scaled1->ay + scaled1->by) + scaled1->cy) / ( (Float)(3) ));
            						}
            					}
            				}
HXLINE(  24)				Float ax_3;
HXDLIN(  24)				if (isScaledA3) {
HXLINE(  24)					Float point18 = scaled1->ax;
HXDLIN(  24)					point18 = (point18 - x05);
HXDLIN(  24)					point18 = (point18 * scaleA2);
HXDLIN(  24)					point18 = (point18 + x05);
HXDLIN(  24)					ax_3 = point18;
            				}
            				else {
HXLINE(  24)					ax_3 = scaled1->ax;
            				}
HXDLIN(  24)				Float ay_3;
HXDLIN(  24)				if (isScaledA3) {
HXLINE(  24)					Float point19 = scaled1->ay;
HXDLIN(  24)					point19 = (point19 - y05);
HXDLIN(  24)					point19 = (point19 * scaleA2);
HXDLIN(  24)					point19 = (point19 + y05);
HXDLIN(  24)					ay_3 = point19;
            				}
            				else {
HXLINE(  24)					ay_3 = scaled1->ay;
            				}
HXDLIN(  24)				Float bx_5;
HXDLIN(  24)				if (isScaledB3) {
HXLINE(  24)					Float point20 = scaled1->bx;
HXDLIN(  24)					point20 = (point20 - x05);
HXDLIN(  24)					point20 = (point20 * scaleB2);
HXDLIN(  24)					point20 = (point20 + x05);
HXDLIN(  24)					bx_5 = point20;
            				}
            				else {
HXLINE(  24)					bx_5 = scaled1->bx;
            				}
HXDLIN(  24)				Float by_5;
HXDLIN(  24)				if (isScaledB3) {
HXLINE(  24)					Float point21 = scaled1->by;
HXDLIN(  24)					point21 = (point21 - y05);
HXDLIN(  24)					point21 = (point21 * scaleB2);
HXDLIN(  24)					point21 = (point21 + y05);
HXDLIN(  24)					by_5 = point21;
            				}
            				else {
HXLINE(  24)					by_5 = scaled1->by;
            				}
HXDLIN(  24)				Float cx_3;
HXDLIN(  24)				if (isScaledC3) {
HXLINE(  24)					Float point22 = scaled1->cx;
HXDLIN(  24)					point22 = (point22 - x05);
HXDLIN(  24)					point22 = (point22 * scaleC2);
HXDLIN(  24)					point22 = (point22 + x05);
HXDLIN(  24)					cx_3 = point22;
            				}
            				else {
HXLINE(  24)					cx_3 = scaled1->cx;
            				}
HXDLIN(  24)				Float cy_3;
HXDLIN(  24)				if (isScaledC3) {
HXLINE(  24)					Float point23 = scaled1->cy;
HXDLIN(  24)					point23 = (point23 - y05);
HXDLIN(  24)					point23 = (point23 * scaleC2);
HXDLIN(  24)					point23 = (point23 + y05);
HXDLIN(  24)					cy_3 = point23;
            				}
            				else {
HXLINE(  24)					cy_3 = scaled1->cy;
            				}
HXDLIN(  24)				scaled1 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax_3,ay_3,bx_5,by_5,cx_3,cy_3,true);
HXDLIN(  24)				{
HXLINE(  24)					 ::pi_xy::iter::IntIterStart this50 = hitTriScalar1->xIter3;
HXDLIN(  24)					int _g_min2 = this50->start;
HXDLIN(  24)					int _g_max2 = this50->max;
HXDLIN(  24)					while((_g_min2 < _g_max2)){
HXLINE(  24)						_g_min2 = (_g_min2 + 1);
HXDLIN(  24)						int px2 = (_g_min2 - 1);
HXDLIN(  24)						{
HXLINE(  24)							 ::pi_xy::iter::IntIterStart this51 = hitTriScalar1->yIter3;
HXDLIN(  24)							int _g_min3 = this51->start;
HXDLIN(  24)							int _g_max3 = this51->max;
HXDLIN(  24)							while((_g_min3 < _g_max3)){
HXLINE(  24)								_g_min3 = (_g_min3 + 1);
HXDLIN(  24)								int py2 = (_g_min3 - 1);
HXDLIN(  24)								Float pcx4 = (( (Float)(px2) ) - barycentric_cx1);
HXDLIN(  24)								Float pcy4 = (( (Float)(py2) ) - barycentric_cy1);
HXDLIN(  24)								Float dot314 = ((pcx4 * barycentric_bcx1) + (pcy4 * barycentric_bcy1));
HXDLIN(  24)								Float dot324 = ((pcx4 * barycentric_acx1) + (pcy4 * barycentric_acy1));
HXDLIN(  24)								Float ratioA5 = (((barycentric_dot221 * dot314) - (barycentric_dot121 * dot324)) * barycentric_denom11);
HXDLIN(  24)								Float ratioB5 = (((barycentric_dot111 * dot324) - (barycentric_dot121 * dot314)) * barycentric_denom11);
HXDLIN(  24)								Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN(  24)								Float ratios_ratioA1 = ratioA5;
HXDLIN(  24)								Float ratios_ratioB1 = ratioB5;
HXDLIN(  24)								Float ratios_ratioC1 = ratioC5;
HXDLIN(  24)								Float v5;
HXDLIN(  24)								if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  24)									v5 = ratios_ratioA1;
            								}
            								else {
HXLINE(  24)									v5 = ratios_ratioB1;
            								}
HXDLIN(  24)								Float min_1;
HXDLIN(  24)								if ((v5 < ratios_ratioC1)) {
HXLINE(  24)									min_1 = v5;
            								}
            								else {
HXLINE(  24)									min_1 = ratios_ratioC1;
            								}
HXDLIN(  24)								bool isSoft4;
HXDLIN(  24)								if (softAB1) {
HXLINE(  24)									if (softBC1) {
HXLINE(  24)										if (softCA1) {
HXLINE(  24)											isSoft4 = true;
            										}
            										else {
HXLINE(  24)											if ((min_1 != ratios_ratioB1)) {
HXLINE(  24)												Float v6;
HXDLIN(  24)												if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  24)													v6 = ratios_ratioA1;
            												}
            												else {
HXLINE(  24)													v6 = ratios_ratioB1;
            												}
HXDLIN(  24)												Float isSoft5;
HXDLIN(  24)												if ((v6 < ratios_ratioC1)) {
HXLINE(  24)													isSoft5 = v6;
            												}
            												else {
HXLINE(  24)													isSoft5 = ratios_ratioC1;
            												}
HXDLIN(  24)												isSoft4 = (isSoft5 == ratios_ratioC1);
            											}
            											else {
HXLINE(  24)												isSoft4 = true;
            											}
            										}
            									}
            									else {
HXLINE(  24)										if (softCA1) {
HXLINE(  24)											if ((min_1 != ratios_ratioA1)) {
HXLINE(  24)												Float v7;
HXDLIN(  24)												if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  24)													v7 = ratios_ratioA1;
            												}
            												else {
HXLINE(  24)													v7 = ratios_ratioB1;
            												}
HXDLIN(  24)												Float isSoft6;
HXDLIN(  24)												if ((v7 < ratios_ratioC1)) {
HXLINE(  24)													isSoft6 = v7;
            												}
            												else {
HXLINE(  24)													isSoft6 = ratios_ratioC1;
            												}
HXDLIN(  24)												isSoft4 = (isSoft6 == ratios_ratioC1);
            											}
            											else {
HXLINE(  24)												isSoft4 = true;
            											}
            										}
            										else {
HXLINE(  24)											isSoft4 = (min_1 == ratios_ratioC1);
            										}
            									}
            								}
            								else {
HXLINE(  24)									if (softBC1) {
HXLINE(  24)										if (softCA1) {
HXLINE(  24)											if ((min_1 != ratios_ratioA1)) {
HXLINE(  24)												Float v8;
HXDLIN(  24)												if ((ratios_ratioA1 < ratios_ratioB1)) {
HXLINE(  24)													v8 = ratios_ratioA1;
            												}
            												else {
HXLINE(  24)													v8 = ratios_ratioB1;
            												}
HXDLIN(  24)												Float isSoft7;
HXDLIN(  24)												if ((v8 < ratios_ratioC1)) {
HXLINE(  24)													isSoft7 = v8;
            												}
            												else {
HXLINE(  24)													isSoft7 = ratios_ratioC1;
            												}
HXDLIN(  24)												isSoft4 = (isSoft7 == ratios_ratioB1);
            											}
            											else {
HXLINE(  24)												isSoft4 = true;
            											}
            										}
            										else {
HXLINE(  24)											isSoft4 = (min_1 == ratios_ratioB1);
            										}
            									}
            									else {
HXLINE(  24)										if (softCA1) {
HXLINE(  24)											isSoft4 = (min_1 == ratios_ratioA1);
            										}
            										else {
HXLINE(  24)											isSoft4 = false;
            										}
            									}
            								}
HXDLIN(  24)								Float x06 = ((Float)-0.0739127852035666);
HXDLIN(  24)								Float y06 = ((Float)0.703233176253404202);
HXDLIN(  24)								Float x15 = ((Float)-0.353553390593273564);
HXDLIN(  24)								Float y15 = ((Float)0.61237243569579447);
HXDLIN(  24)								Float x22 = ((Float)-0.572061402817684139);
HXDLIN(  24)								Float y22 = ((Float)0.415626937777453465);
HXDLIN(  24)								Float x32 = ((Float)-0.691654801480225401);
HXDLIN(  24)								Float y32 = ((Float)0.147015766465198733);
HXDLIN(  24)								Float x42 = ((Float)-0.691654801480225512);
HXDLIN(  24)								Float y42 = ((Float)-0.147015766465198261);
HXDLIN(  24)								Float averageX2 = ((Float)0.);
HXDLIN(  24)								Float averageY2 = ((Float)0.);
HXDLIN(  24)								int hits2 = 0;
HXDLIN(  24)								Float fractionTotal4 = ((Float)0.);
HXDLIN(  24)								Float x16 = (px2 + x06);
HXDLIN(  24)								Float y16 = (py2 + y06);
HXDLIN(  24)								bool _hx_tmp47;
HXDLIN(  24)								bool _hx_tmp48;
HXDLIN(  24)								 ::pi_xy::iter::IntIterStart this52 = hitTriScalar1->xIter3;
HXDLIN(  24)								bool _hx_tmp49;
HXDLIN(  24)								if ((x16 > (this52->start - 1))) {
HXLINE(  24)									_hx_tmp49 = (x16 < (this52->max + 1));
            								}
            								else {
HXLINE(  24)									_hx_tmp49 = false;
            								}
HXDLIN(  24)								if (_hx_tmp49) {
HXLINE(  24)									 ::pi_xy::iter::IntIterStart this53 = hitTriScalar1->yIter3;
HXDLIN(  24)									if ((y16 > (this53->start - 1))) {
HXLINE(  24)										_hx_tmp48 = (y16 < (this53->max + 1));
            									}
            									else {
HXLINE(  24)										_hx_tmp48 = false;
            									}
            								}
            								else {
HXLINE(  24)									_hx_tmp48 = false;
            								}
HXDLIN(  24)								if (_hx_tmp48) {
HXLINE(  24)									Float s10 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x16)) + (hitTriScalar1->sy * y16));
HXDLIN(  24)									Float t10 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x16)) + (hitTriScalar1->ty * y16));
HXDLIN(  24)									bool _hx_tmp50;
HXDLIN(  24)									if (!((s10 <= 0))) {
HXLINE(  24)										_hx_tmp50 = (t10 <= 0);
            									}
            									else {
HXLINE(  24)										_hx_tmp50 = true;
            									}
HXDLIN(  24)									if (_hx_tmp50) {
HXLINE(  24)										_hx_tmp47 = false;
            									}
            									else {
HXLINE(  24)										if (((s10 + t10) < hitTriScalar1->A)) {
HXLINE(  24)											_hx_tmp47 = true;
            										}
            										else {
HXLINE(  24)											_hx_tmp47 = false;
            										}
            									}
            								}
            								else {
HXLINE(  24)									_hx_tmp47 = false;
            								}
HXDLIN(  24)								if (_hx_tmp47) {
HXLINE(  24)									hits2 = (hits2 + 1);
HXDLIN(  24)									averageX2 = (averageX2 + x06);
HXDLIN(  24)									averageY2 = (averageY2 + y06);
HXDLIN(  24)									fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            								}
HXDLIN(  24)								Float x17 = (px2 + x15);
HXDLIN(  24)								Float y17 = (py2 + y15);
HXDLIN(  24)								bool _hx_tmp51;
HXDLIN(  24)								bool _hx_tmp52;
HXDLIN(  24)								 ::pi_xy::iter::IntIterStart this54 = hitTriScalar1->xIter3;
HXDLIN(  24)								bool _hx_tmp53;
HXDLIN(  24)								if ((x17 > (this54->start - 1))) {
HXLINE(  24)									_hx_tmp53 = (x17 < (this54->max + 1));
            								}
            								else {
HXLINE(  24)									_hx_tmp53 = false;
            								}
HXDLIN(  24)								if (_hx_tmp53) {
HXLINE(  24)									 ::pi_xy::iter::IntIterStart this55 = hitTriScalar1->yIter3;
HXDLIN(  24)									if ((y17 > (this55->start - 1))) {
HXLINE(  24)										_hx_tmp52 = (y17 < (this55->max + 1));
            									}
            									else {
HXLINE(  24)										_hx_tmp52 = false;
            									}
            								}
            								else {
HXLINE(  24)									_hx_tmp52 = false;
            								}
HXDLIN(  24)								if (_hx_tmp52) {
HXLINE(  24)									Float s11 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x17)) + (hitTriScalar1->sy * y17));
HXDLIN(  24)									Float t11 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x17)) + (hitTriScalar1->ty * y17));
HXDLIN(  24)									bool _hx_tmp54;
HXDLIN(  24)									if (!((s11 <= 0))) {
HXLINE(  24)										_hx_tmp54 = (t11 <= 0);
            									}
            									else {
HXLINE(  24)										_hx_tmp54 = true;
            									}
HXDLIN(  24)									if (_hx_tmp54) {
HXLINE(  24)										_hx_tmp51 = false;
            									}
            									else {
HXLINE(  24)										if (((s11 + t11) < hitTriScalar1->A)) {
HXLINE(  24)											_hx_tmp51 = true;
            										}
            										else {
HXLINE(  24)											_hx_tmp51 = false;
            										}
            									}
            								}
            								else {
HXLINE(  24)									_hx_tmp51 = false;
            								}
HXDLIN(  24)								if (_hx_tmp51) {
HXLINE(  24)									hits2 = (hits2 + 1);
HXDLIN(  24)									averageX2 = (averageX2 + x15);
HXDLIN(  24)									averageY2 = (averageY2 + y15);
HXDLIN(  24)									fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            								}
HXDLIN(  24)								Float x18 = (px2 + x22);
HXDLIN(  24)								Float y18 = (py2 + y22);
HXDLIN(  24)								bool _hx_tmp55;
HXDLIN(  24)								bool _hx_tmp56;
HXDLIN(  24)								 ::pi_xy::iter::IntIterStart this56 = hitTriScalar1->xIter3;
HXDLIN(  24)								bool _hx_tmp57;
HXDLIN(  24)								if ((x18 > (this56->start - 1))) {
HXLINE(  24)									_hx_tmp57 = (x18 < (this56->max + 1));
            								}
            								else {
HXLINE(  24)									_hx_tmp57 = false;
            								}
HXDLIN(  24)								if (_hx_tmp57) {
HXLINE(  24)									 ::pi_xy::iter::IntIterStart this57 = hitTriScalar1->yIter3;
HXDLIN(  24)									if ((y18 > (this57->start - 1))) {
HXLINE(  24)										_hx_tmp56 = (y18 < (this57->max + 1));
            									}
            									else {
HXLINE(  24)										_hx_tmp56 = false;
            									}
            								}
            								else {
HXLINE(  24)									_hx_tmp56 = false;
            								}
HXDLIN(  24)								if (_hx_tmp56) {
HXLINE(  24)									Float s12 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x18)) + (hitTriScalar1->sy * y18));
HXDLIN(  24)									Float t12 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x18)) + (hitTriScalar1->ty * y18));
HXDLIN(  24)									bool _hx_tmp58;
HXDLIN(  24)									if (!((s12 <= 0))) {
HXLINE(  24)										_hx_tmp58 = (t12 <= 0);
            									}
            									else {
HXLINE(  24)										_hx_tmp58 = true;
            									}
HXDLIN(  24)									if (_hx_tmp58) {
HXLINE(  24)										_hx_tmp55 = false;
            									}
            									else {
HXLINE(  24)										if (((s12 + t12) < hitTriScalar1->A)) {
HXLINE(  24)											_hx_tmp55 = true;
            										}
            										else {
HXLINE(  24)											_hx_tmp55 = false;
            										}
            									}
            								}
            								else {
HXLINE(  24)									_hx_tmp55 = false;
            								}
HXDLIN(  24)								if (_hx_tmp55) {
HXLINE(  24)									hits2 = (hits2 + 1);
HXDLIN(  24)									averageX2 = (averageX2 + x22);
HXDLIN(  24)									averageY2 = (averageY2 + y22);
HXDLIN(  24)									fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            								}
HXDLIN(  24)								Float x19 = (px2 + x32);
HXDLIN(  24)								Float y19 = (py2 + y32);
HXDLIN(  24)								bool _hx_tmp59;
HXDLIN(  24)								bool _hx_tmp60;
HXDLIN(  24)								 ::pi_xy::iter::IntIterStart this58 = hitTriScalar1->xIter3;
HXDLIN(  24)								bool _hx_tmp61;
HXDLIN(  24)								if ((x19 > (this58->start - 1))) {
HXLINE(  24)									_hx_tmp61 = (x19 < (this58->max + 1));
            								}
            								else {
HXLINE(  24)									_hx_tmp61 = false;
            								}
HXDLIN(  24)								if (_hx_tmp61) {
HXLINE(  24)									 ::pi_xy::iter::IntIterStart this59 = hitTriScalar1->yIter3;
HXDLIN(  24)									if ((y19 > (this59->start - 1))) {
HXLINE(  24)										_hx_tmp60 = (y19 < (this59->max + 1));
            									}
            									else {
HXLINE(  24)										_hx_tmp60 = false;
            									}
            								}
            								else {
HXLINE(  24)									_hx_tmp60 = false;
            								}
HXDLIN(  24)								if (_hx_tmp60) {
HXLINE(  24)									Float s13 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x19)) + (hitTriScalar1->sy * y19));
HXDLIN(  24)									Float t13 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x19)) + (hitTriScalar1->ty * y19));
HXDLIN(  24)									bool _hx_tmp62;
HXDLIN(  24)									if (!((s13 <= 0))) {
HXLINE(  24)										_hx_tmp62 = (t13 <= 0);
            									}
            									else {
HXLINE(  24)										_hx_tmp62 = true;
            									}
HXDLIN(  24)									if (_hx_tmp62) {
HXLINE(  24)										_hx_tmp59 = false;
            									}
            									else {
HXLINE(  24)										if (((s13 + t13) < hitTriScalar1->A)) {
HXLINE(  24)											_hx_tmp59 = true;
            										}
            										else {
HXLINE(  24)											_hx_tmp59 = false;
            										}
            									}
            								}
            								else {
HXLINE(  24)									_hx_tmp59 = false;
            								}
HXDLIN(  24)								if (_hx_tmp59) {
HXLINE(  24)									hits2 = (hits2 + 1);
HXDLIN(  24)									averageX2 = (averageX2 + x32);
HXDLIN(  24)									averageY2 = (averageY2 + y32);
HXDLIN(  24)									fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            								}
HXDLIN(  24)								Float x20 = (px2 + x42);
HXDLIN(  24)								Float y20 = (py2 + y42);
HXDLIN(  24)								bool _hx_tmp63;
HXDLIN(  24)								bool _hx_tmp64;
HXDLIN(  24)								 ::pi_xy::iter::IntIterStart this60 = hitTriScalar1->xIter3;
HXDLIN(  24)								bool _hx_tmp65;
HXDLIN(  24)								if ((x20 > (this60->start - 1))) {
HXLINE(  24)									_hx_tmp65 = (x20 < (this60->max + 1));
            								}
            								else {
HXLINE(  24)									_hx_tmp65 = false;
            								}
HXDLIN(  24)								if (_hx_tmp65) {
HXLINE(  24)									 ::pi_xy::iter::IntIterStart this61 = hitTriScalar1->yIter3;
HXDLIN(  24)									if ((y20 > (this61->start - 1))) {
HXLINE(  24)										_hx_tmp64 = (y20 < (this61->max + 1));
            									}
            									else {
HXLINE(  24)										_hx_tmp64 = false;
            									}
            								}
            								else {
HXLINE(  24)									_hx_tmp64 = false;
            								}
HXDLIN(  24)								if (_hx_tmp64) {
HXLINE(  24)									Float s14 = ((hitTriScalar1->s0 + (hitTriScalar1->sx * x20)) + (hitTriScalar1->sy * y20));
HXDLIN(  24)									Float t14 = ((hitTriScalar1->t0 + (hitTriScalar1->tx * x20)) + (hitTriScalar1->ty * y20));
HXDLIN(  24)									bool _hx_tmp66;
HXDLIN(  24)									if (!((s14 <= 0))) {
HXLINE(  24)										_hx_tmp66 = (t14 <= 0);
            									}
            									else {
HXLINE(  24)										_hx_tmp66 = true;
            									}
HXDLIN(  24)									if (_hx_tmp66) {
HXLINE(  24)										_hx_tmp63 = false;
            									}
            									else {
HXLINE(  24)										if (((s14 + t14) < hitTriScalar1->A)) {
HXLINE(  24)											_hx_tmp63 = true;
            										}
            										else {
HXLINE(  24)											_hx_tmp63 = false;
            										}
            									}
            								}
            								else {
HXLINE(  24)									_hx_tmp63 = false;
            								}
HXDLIN(  24)								if (_hx_tmp63) {
HXLINE(  24)									hits2 = (hits2 + 1);
HXDLIN(  24)									averageX2 = (averageX2 + x42);
HXDLIN(  24)									averageY2 = (averageY2 + y42);
HXDLIN(  24)									fractionTotal4 = (fractionTotal4 + ((Float)0.2));
            								}
HXDLIN(  24)								if ((hits2 != 0)) {
HXLINE( 244)									averageX2 = (px2 + (averageX2 / ( (Float)(hits2) )));
HXLINE( 245)									averageY2 = (py2 + (averageY2 / ( (Float)(hits2) )));
            								}
            								else {
HXLINE( 247)									averageX2 = ( (Float)(px2) );
HXLINE( 248)									averageY2 = ( (Float)(py2) );
            								}
HXLINE(  24)								Float fractionTotal5 = fractionTotal4;
HXDLIN(  24)								Float sampleData_fractionTotal1 = fractionTotal5;
HXDLIN(  24)								Float sampleData_averageX1 = averageX2;
HXDLIN(  24)								Float sampleData_averageY1 = averageY2;
HXDLIN(  24)								bool sampleData_notHit1 = (fractionTotal5 == ((Float)0.));
HXDLIN(  24)								Float aScale1 = sampleData_fractionTotal1;
HXDLIN(  24)								if (!((aScale1 > ((Float)0.9)))) {
HXLINE(  24)									aScale1 = ((aScale1 * ((Float)0.8)) + ((Float)0.2));
            								}
HXLINE( 142)								a9 = 0;
HXLINE( 143)								r6 = 0;
HXLINE( 144)								g6 = 0;
HXLINE( 145)								b6 = 0;
HXLINE(  24)								if (isSoft4) {
HXLINE(  24)									if (!(sampleData_notHit1)) {
HXLINE(  24)										Float pcx5 = (sampleData_averageX1 - barycentric_cx1);
HXDLIN(  24)										Float pcy5 = (sampleData_averageY1 - barycentric_cy1);
HXDLIN(  24)										Float dot315 = ((pcx5 * barycentric_bcx1) + (pcy5 * barycentric_bcy1));
HXDLIN(  24)										Float dot325 = ((pcx5 * barycentric_acx1) + (pcy5 * barycentric_acy1));
HXDLIN(  24)										Float ratioA6 = (((barycentric_dot221 * dot315) - (barycentric_dot121 * dot325)) * barycentric_denom11);
HXDLIN(  24)										Float ratioB6 = (((barycentric_dot111 * dot325) - (barycentric_dot121 * dot315)) * barycentric_denom11);
HXDLIN(  24)										Float ratioC6 = ((((Float)1.0) - ratioB6) - ratioA6);
HXDLIN(  24)										Float ratiosAvg_ratioA3 = ratioA6;
HXDLIN(  24)										Float ratiosAvg_ratioB3 = ratioB6;
HXDLIN(  24)										Float ratiosAvg_ratioC3 = ratioC6;
HXDLIN(  24)										Float ratioA_3 = ratiosAvg_ratioA3;
HXDLIN(  24)										Float ratioB_3 = ratiosAvg_ratioB3;
HXDLIN(  24)										Float ratioC_3 = ratiosAvg_ratioC3;
HXDLIN(  24)										int i14 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA_3) + (( (Float)(aB1) ) * ratioB_3)) + (( (Float)(aC1) ) * ratioC_3)));
HXDLIN(  24)										if ((i14 > 255)) {
HXLINE(  24)											i14 = 255;
            										}
HXDLIN(  24)										if ((i14 < 0)) {
HXLINE(  25)											i14 = 0;
            										}
HXLINE( 152)										a9 = i14;
HXLINE(  24)										int i15 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA_3) + (( (Float)(rB1) ) * ratioB_3)) + (( (Float)(rC1) ) * ratioC_3)));
HXDLIN(  24)										if ((i15 > 255)) {
HXLINE(  24)											i15 = 255;
            										}
HXDLIN(  24)										if ((i15 < 0)) {
HXLINE(  25)											i15 = 0;
            										}
HXLINE( 153)										r6 = i15;
HXLINE(  24)										int i16 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA_3) + (( (Float)(gB1) ) * ratioB_3)) + (( (Float)(gC1) ) * ratioC_3)));
HXDLIN(  24)										if ((i16 > 255)) {
HXLINE(  24)											i16 = 255;
            										}
HXDLIN(  24)										if ((i16 < 0)) {
HXLINE(  25)											i16 = 0;
            										}
HXLINE( 154)										g6 = i16;
HXLINE(  24)										int i17 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA_3) + (( (Float)(bB1) ) * ratioB_3)) + (( (Float)(bC1) ) * ratioC_3)));
HXDLIN(  24)										if ((i17 > 255)) {
HXLINE(  24)											i17 = 255;
            										}
HXDLIN(  24)										if ((i17 < 0)) {
HXLINE(  25)											i17 = 0;
            										}
HXLINE( 155)										b6 = i17;
HXLINE(  24)										{
HXLINE(  24)											int a15;
HXDLIN(  24)											if ((aScale1 > ((Float)0.9))) {
HXLINE(  24)												a15 = a9;
            											}
            											else {
HXLINE(  24)												int i18 = ::Std_obj::_hx_int((( (Float)(a9) ) * aScale1));
HXDLIN(  24)												if ((i18 > 255)) {
HXLINE(  24)													i18 = 255;
            												}
HXDLIN(  24)												if ((i18 < 0)) {
HXLINE(  25)													i18 = 0;
            												}
HXLINE(  24)												a15 = i18;
            											}
HXDLIN(  24)											int location3;
HXDLIN(  24)											if (pixelImage->useVirtualPos) {
HXLINE(  24)												location3 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            											}
            											else {
HXLINE(  24)												location3 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            											}
HXDLIN(  24)											bool _hx_tmp67;
HXDLIN(  24)											if (pixelImage->transparent) {
HXLINE(  24)												_hx_tmp67 = (a15 < 254);
            											}
            											else {
HXLINE(  24)												_hx_tmp67 = false;
            											}
HXDLIN(  24)											if (_hx_tmp67) {
HXLINE(  24)												int this62 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN(  24)												int old3;
HXDLIN(  24)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)													old3 = ((((((this62 >> 24) & 255) << 24) | ((this62 & 255) << 16)) | (((this62 >> 8) & 255) << 8)) | ((this62 >> 16) & 255));
            												}
            												else {
HXLINE(  24)													old3 = this62;
            												}
HXDLIN(  24)												int rhs3 = ((((a15 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  24)												Float a16;
HXDLIN(  24)												int this63 = ((old3 >> 24) & 255);
HXDLIN(  24)												if ((this63 == 0)) {
HXLINE(  24)													a16 = ((Float)0.);
            												}
            												else {
HXLINE(  24)													a16 = (( (Float)(this63) ) / ( (Float)(255) ));
            												}
HXDLIN(  24)												Float r13;
HXDLIN(  24)												int this64 = ((old3 >> 16) & 255);
HXDLIN(  24)												if ((this64 == 0)) {
HXLINE(  24)													r13 = ((Float)0.);
            												}
            												else {
HXLINE(  24)													r13 = (( (Float)(this64) ) / ( (Float)(255) ));
            												}
HXDLIN(  24)												Float g13;
HXDLIN(  24)												int this65 = ((old3 >> 8) & 255);
HXDLIN(  24)												if ((this65 == 0)) {
HXLINE(  24)													g13 = ((Float)0.);
            												}
            												else {
HXLINE(  24)													g13 = (( (Float)(this65) ) / ( (Float)(255) ));
            												}
HXDLIN(  24)												Float b14;
HXDLIN(  24)												int this66 = (old3 & 255);
HXDLIN(  24)												if ((this66 == 0)) {
HXLINE(  24)													b14 = ((Float)0.);
            												}
            												else {
HXLINE(  24)													b14 = (( (Float)(this66) ) / ( (Float)(255) ));
            												}
HXDLIN(  24)												Float a24;
HXDLIN(  24)												int this67 = ((rhs3 >> 24) & 255);
HXDLIN(  24)												if ((this67 == 0)) {
HXLINE(  24)													a24 = ((Float)0.);
            												}
            												else {
HXLINE(  24)													a24 = (( (Float)(this67) ) / ( (Float)(255) ));
            												}
HXDLIN(  24)												Float r23;
HXDLIN(  24)												int this68 = ((rhs3 >> 16) & 255);
HXDLIN(  24)												if ((this68 == 0)) {
HXLINE(  24)													r23 = ((Float)0.);
            												}
            												else {
HXLINE(  24)													r23 = (( (Float)(this68) ) / ( (Float)(255) ));
            												}
HXDLIN(  24)												Float g23;
HXDLIN(  24)												int this69 = ((rhs3 >> 8) & 255);
HXDLIN(  24)												if ((this69 == 0)) {
HXLINE(  24)													g23 = ((Float)0.);
            												}
            												else {
HXLINE(  24)													g23 = (( (Float)(this69) ) / ( (Float)(255) ));
            												}
HXDLIN(  24)												Float b24;
HXDLIN(  24)												int this70 = (rhs3 & 255);
HXDLIN(  24)												if ((this70 == 0)) {
HXLINE(  24)													b24 = ((Float)0.);
            												}
            												else {
HXLINE(  24)													b24 = (( (Float)(this70) ) / ( (Float)(255) ));
            												}
HXDLIN(  24)												Float a34 = (a16 * (( (Float)(1) ) - a24));
HXDLIN(  24)												int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a34) + (r23 * a24))));
HXDLIN(  24)												int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a34) + (g23 * a24))));
HXDLIN(  24)												int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a34) + (b24 * a24))));
HXDLIN(  24)												int a17 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  24)												int blended3 = ((((a17 << 24) | (r7 << 16)) | (g7 << 8)) | b9);
HXDLIN(  24)												{
HXLINE(  24)													int _hx_tmp68;
HXDLIN(  24)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)														_hx_tmp68 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            													}
            													else {
HXLINE(  24)														_hx_tmp68 = blended3;
            													}
HXDLIN(  24)													::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp68);
            												}
            											}
            											else {
HXLINE(  24)												int value3;
HXDLIN(  24)												if (pixelImage->isLittle) {
HXLINE(  24)													value3 = ((((a15 << 24) | (b6 << 16)) | (g6 << 8)) | r6);
            												}
            												else {
HXLINE(  24)													value3 = ((((a15 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
            												}
HXDLIN(  24)												::iterMagic::Iimg_obj::set(pixelImage->image,location3,value3);
            											}
            										}
            									}
            								}
            								else {
HXLINE(  24)									Float ratioA7 = ratios_ratioA1;
HXDLIN(  24)									Float ratioB7 = ratios_ratioB1;
HXDLIN(  24)									Float ratioC7 = ratios_ratioC1;
HXDLIN(  24)									Float hitTotal1 = sampleData_fractionTotal1;
HXDLIN(  24)									if (!(sampleData_notHit1)) {
HXLINE(  24)										Float x07 = ((Float)-0.0739127852035666);
HXDLIN(  24)										Float y07 = ((Float)0.703233176253404202);
HXDLIN(  24)										Float x110 = ((Float)-0.353553390593273564);
HXDLIN(  24)										Float y110 = ((Float)0.61237243569579447);
HXDLIN(  24)										Float x23 = ((Float)-0.572061402817684139);
HXDLIN(  24)										Float y23 = ((Float)0.415626937777453465);
HXDLIN(  24)										Float x33 = ((Float)-0.691654801480225401);
HXDLIN(  24)										Float y33 = ((Float)0.147015766465198733);
HXDLIN(  24)										Float x43 = ((Float)-0.691654801480225512);
HXDLIN(  24)										Float y43 = ((Float)-0.147015766465198261);
HXDLIN(  24)										Float averageX3 = ((Float)0.);
HXDLIN(  24)										Float averageY3 = ((Float)0.);
HXDLIN(  24)										int hits3 = 0;
HXDLIN(  24)										Float fractionTotal6 = ((Float)0.);
HXDLIN(  24)										Float x24 = (px2 + x07);
HXDLIN(  24)										Float y24 = (py2 + y07);
HXDLIN(  24)										bool _hx_tmp69;
HXDLIN(  24)										bool _hx_tmp70;
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart this71 = scaled1->xIter3;
HXDLIN(  24)										bool _hx_tmp71;
HXDLIN(  24)										if ((x24 > (this71->start - 1))) {
HXLINE(  24)											_hx_tmp71 = (x24 < (this71->max + 1));
            										}
            										else {
HXLINE(  24)											_hx_tmp71 = false;
            										}
HXDLIN(  24)										if (_hx_tmp71) {
HXLINE(  24)											 ::pi_xy::iter::IntIterStart this72 = scaled1->yIter3;
HXDLIN(  24)											if ((y24 > (this72->start - 1))) {
HXLINE(  24)												_hx_tmp70 = (y24 < (this72->max + 1));
            											}
            											else {
HXLINE(  24)												_hx_tmp70 = false;
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp70 = false;
            										}
HXDLIN(  24)										if (_hx_tmp70) {
HXLINE(  24)											Float s15 = ((scaled1->s0 + (scaled1->sx * x24)) + (scaled1->sy * y24));
HXDLIN(  24)											Float t15 = ((scaled1->t0 + (scaled1->tx * x24)) + (scaled1->ty * y24));
HXDLIN(  24)											bool _hx_tmp72;
HXDLIN(  24)											if (!((s15 <= 0))) {
HXLINE(  24)												_hx_tmp72 = (t15 <= 0);
            											}
            											else {
HXLINE(  24)												_hx_tmp72 = true;
            											}
HXDLIN(  24)											if (_hx_tmp72) {
HXLINE(  24)												_hx_tmp69 = false;
            											}
            											else {
HXLINE(  24)												if (((s15 + t15) < scaled1->A)) {
HXLINE(  24)													_hx_tmp69 = true;
            												}
            												else {
HXLINE(  24)													_hx_tmp69 = false;
            												}
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp69 = false;
            										}
HXDLIN(  24)										if (_hx_tmp69) {
HXLINE(  24)											hits3 = (hits3 + 1);
HXDLIN(  24)											averageX3 = (averageX3 + x07);
HXDLIN(  24)											averageY3 = (averageY3 + y07);
HXDLIN(  24)											fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            										}
HXDLIN(  24)										Float x25 = (px2 + x110);
HXDLIN(  24)										Float y25 = (py2 + y110);
HXDLIN(  24)										bool _hx_tmp73;
HXDLIN(  24)										bool _hx_tmp74;
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart this73 = scaled1->xIter3;
HXDLIN(  24)										bool _hx_tmp75;
HXDLIN(  24)										if ((x25 > (this73->start - 1))) {
HXLINE(  24)											_hx_tmp75 = (x25 < (this73->max + 1));
            										}
            										else {
HXLINE(  24)											_hx_tmp75 = false;
            										}
HXDLIN(  24)										if (_hx_tmp75) {
HXLINE(  24)											 ::pi_xy::iter::IntIterStart this74 = scaled1->yIter3;
HXDLIN(  24)											if ((y25 > (this74->start - 1))) {
HXLINE(  24)												_hx_tmp74 = (y25 < (this74->max + 1));
            											}
            											else {
HXLINE(  24)												_hx_tmp74 = false;
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp74 = false;
            										}
HXDLIN(  24)										if (_hx_tmp74) {
HXLINE(  24)											Float s16 = ((scaled1->s0 + (scaled1->sx * x25)) + (scaled1->sy * y25));
HXDLIN(  24)											Float t16 = ((scaled1->t0 + (scaled1->tx * x25)) + (scaled1->ty * y25));
HXDLIN(  24)											bool _hx_tmp76;
HXDLIN(  24)											if (!((s16 <= 0))) {
HXLINE(  24)												_hx_tmp76 = (t16 <= 0);
            											}
            											else {
HXLINE(  24)												_hx_tmp76 = true;
            											}
HXDLIN(  24)											if (_hx_tmp76) {
HXLINE(  24)												_hx_tmp73 = false;
            											}
            											else {
HXLINE(  24)												if (((s16 + t16) < scaled1->A)) {
HXLINE(  24)													_hx_tmp73 = true;
            												}
            												else {
HXLINE(  24)													_hx_tmp73 = false;
            												}
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp73 = false;
            										}
HXDLIN(  24)										if (_hx_tmp73) {
HXLINE(  24)											hits3 = (hits3 + 1);
HXDLIN(  24)											averageX3 = (averageX3 + x110);
HXDLIN(  24)											averageY3 = (averageY3 + y110);
HXDLIN(  24)											fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            										}
HXDLIN(  24)										Float x26 = (px2 + x23);
HXDLIN(  24)										Float y26 = (py2 + y23);
HXDLIN(  24)										bool _hx_tmp77;
HXDLIN(  24)										bool _hx_tmp78;
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart this75 = scaled1->xIter3;
HXDLIN(  24)										bool _hx_tmp79;
HXDLIN(  24)										if ((x26 > (this75->start - 1))) {
HXLINE(  24)											_hx_tmp79 = (x26 < (this75->max + 1));
            										}
            										else {
HXLINE(  24)											_hx_tmp79 = false;
            										}
HXDLIN(  24)										if (_hx_tmp79) {
HXLINE(  24)											 ::pi_xy::iter::IntIterStart this76 = scaled1->yIter3;
HXDLIN(  24)											if ((y26 > (this76->start - 1))) {
HXLINE(  24)												_hx_tmp78 = (y26 < (this76->max + 1));
            											}
            											else {
HXLINE(  24)												_hx_tmp78 = false;
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp78 = false;
            										}
HXDLIN(  24)										if (_hx_tmp78) {
HXLINE(  24)											Float s17 = ((scaled1->s0 + (scaled1->sx * x26)) + (scaled1->sy * y26));
HXDLIN(  24)											Float t17 = ((scaled1->t0 + (scaled1->tx * x26)) + (scaled1->ty * y26));
HXDLIN(  24)											bool _hx_tmp80;
HXDLIN(  24)											if (!((s17 <= 0))) {
HXLINE(  24)												_hx_tmp80 = (t17 <= 0);
            											}
            											else {
HXLINE(  24)												_hx_tmp80 = true;
            											}
HXDLIN(  24)											if (_hx_tmp80) {
HXLINE(  24)												_hx_tmp77 = false;
            											}
            											else {
HXLINE(  24)												if (((s17 + t17) < scaled1->A)) {
HXLINE(  24)													_hx_tmp77 = true;
            												}
            												else {
HXLINE(  24)													_hx_tmp77 = false;
            												}
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp77 = false;
            										}
HXDLIN(  24)										if (_hx_tmp77) {
HXLINE(  24)											hits3 = (hits3 + 1);
HXDLIN(  24)											averageX3 = (averageX3 + x23);
HXDLIN(  24)											averageY3 = (averageY3 + y23);
HXDLIN(  24)											fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            										}
HXDLIN(  24)										Float x27 = (px2 + x33);
HXDLIN(  24)										Float y27 = (py2 + y33);
HXDLIN(  24)										bool _hx_tmp81;
HXDLIN(  24)										bool _hx_tmp82;
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart this77 = scaled1->xIter3;
HXDLIN(  24)										bool _hx_tmp83;
HXDLIN(  24)										if ((x27 > (this77->start - 1))) {
HXLINE(  24)											_hx_tmp83 = (x27 < (this77->max + 1));
            										}
            										else {
HXLINE(  24)											_hx_tmp83 = false;
            										}
HXDLIN(  24)										if (_hx_tmp83) {
HXLINE(  24)											 ::pi_xy::iter::IntIterStart this78 = scaled1->yIter3;
HXDLIN(  24)											if ((y27 > (this78->start - 1))) {
HXLINE(  24)												_hx_tmp82 = (y27 < (this78->max + 1));
            											}
            											else {
HXLINE(  24)												_hx_tmp82 = false;
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp82 = false;
            										}
HXDLIN(  24)										if (_hx_tmp82) {
HXLINE(  24)											Float s18 = ((scaled1->s0 + (scaled1->sx * x27)) + (scaled1->sy * y27));
HXDLIN(  24)											Float t18 = ((scaled1->t0 + (scaled1->tx * x27)) + (scaled1->ty * y27));
HXDLIN(  24)											bool _hx_tmp84;
HXDLIN(  24)											if (!((s18 <= 0))) {
HXLINE(  24)												_hx_tmp84 = (t18 <= 0);
            											}
            											else {
HXLINE(  24)												_hx_tmp84 = true;
            											}
HXDLIN(  24)											if (_hx_tmp84) {
HXLINE(  24)												_hx_tmp81 = false;
            											}
            											else {
HXLINE(  24)												if (((s18 + t18) < scaled1->A)) {
HXLINE(  24)													_hx_tmp81 = true;
            												}
            												else {
HXLINE(  24)													_hx_tmp81 = false;
            												}
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp81 = false;
            										}
HXDLIN(  24)										if (_hx_tmp81) {
HXLINE(  24)											hits3 = (hits3 + 1);
HXDLIN(  24)											averageX3 = (averageX3 + x33);
HXDLIN(  24)											averageY3 = (averageY3 + y33);
HXDLIN(  24)											fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            										}
HXDLIN(  24)										Float x28 = (px2 + x43);
HXDLIN(  24)										Float y28 = (py2 + y43);
HXDLIN(  24)										bool _hx_tmp85;
HXDLIN(  24)										bool _hx_tmp86;
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart this79 = scaled1->xIter3;
HXDLIN(  24)										bool _hx_tmp87;
HXDLIN(  24)										if ((x28 > (this79->start - 1))) {
HXLINE(  24)											_hx_tmp87 = (x28 < (this79->max + 1));
            										}
            										else {
HXLINE(  24)											_hx_tmp87 = false;
            										}
HXDLIN(  24)										if (_hx_tmp87) {
HXLINE(  24)											 ::pi_xy::iter::IntIterStart this80 = scaled1->yIter3;
HXDLIN(  24)											if ((y28 > (this80->start - 1))) {
HXLINE(  24)												_hx_tmp86 = (y28 < (this80->max + 1));
            											}
            											else {
HXLINE(  24)												_hx_tmp86 = false;
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp86 = false;
            										}
HXDLIN(  24)										if (_hx_tmp86) {
HXLINE(  24)											Float s19 = ((scaled1->s0 + (scaled1->sx * x28)) + (scaled1->sy * y28));
HXDLIN(  24)											Float t19 = ((scaled1->t0 + (scaled1->tx * x28)) + (scaled1->ty * y28));
HXDLIN(  24)											bool _hx_tmp88;
HXDLIN(  24)											if (!((s19 <= 0))) {
HXLINE(  24)												_hx_tmp88 = (t19 <= 0);
            											}
            											else {
HXLINE(  24)												_hx_tmp88 = true;
            											}
HXDLIN(  24)											if (_hx_tmp88) {
HXLINE(  24)												_hx_tmp85 = false;
            											}
            											else {
HXLINE(  24)												if (((s19 + t19) < scaled1->A)) {
HXLINE(  24)													_hx_tmp85 = true;
            												}
            												else {
HXLINE(  24)													_hx_tmp85 = false;
            												}
            											}
            										}
            										else {
HXLINE(  24)											_hx_tmp85 = false;
            										}
HXDLIN(  24)										if (_hx_tmp85) {
HXLINE(  24)											hits3 = (hits3 + 1);
HXDLIN(  24)											averageX3 = (averageX3 + x43);
HXDLIN(  24)											averageY3 = (averageY3 + y43);
HXDLIN(  24)											fractionTotal6 = (fractionTotal6 + ((Float)0.2));
            										}
HXDLIN(  24)										if ((hits3 != 0)) {
HXLINE( 244)											averageX3 = (px2 + (averageX3 / ( (Float)(hits3) )));
HXLINE( 245)											averageY3 = (py2 + (averageY3 / ( (Float)(hits3) )));
            										}
            										else {
HXLINE( 247)											averageX3 = ( (Float)(px2) );
HXLINE( 248)											averageY3 = ( (Float)(py2) );
            										}
HXLINE(  24)										Float fractionTotal7 = fractionTotal6;
HXDLIN(  24)										Float sampleScaled_fractionTotal1 = fractionTotal7;
HXDLIN(  24)										Float sampleScaled_averageX1 = averageX3;
HXDLIN(  24)										Float sampleScaled_averageY1 = averageY3;
HXDLIN(  24)										bool sampleScaled_notHit1 = (fractionTotal7 == ((Float)0.));
HXDLIN(  24)										Float scaledTotal1 = sampleScaled_fractionTotal1;
HXDLIN(  24)										bool _hx_tmp89;
HXDLIN(  24)										if (!((scaledTotal1 > hitTotal1))) {
HXLINE(  24)											_hx_tmp89 = (hitTotal1 == ((Float)1.));
            										}
            										else {
HXLINE(  24)											_hx_tmp89 = true;
            										}
HXDLIN(  24)										if (_hx_tmp89) {
HXLINE(  24)											Float pcx6 = (sampleData_averageX1 - barycentric_cx1);
HXDLIN(  24)											Float pcy6 = (sampleData_averageY1 - barycentric_cy1);
HXDLIN(  24)											Float dot316 = ((pcx6 * barycentric_bcx1) + (pcy6 * barycentric_bcy1));
HXDLIN(  24)											Float dot326 = ((pcx6 * barycentric_acx1) + (pcy6 * barycentric_acy1));
HXDLIN(  24)											Float ratioA8 = (((barycentric_dot221 * dot316) - (barycentric_dot121 * dot326)) * barycentric_denom11);
HXDLIN(  24)											Float ratioB8 = (((barycentric_dot111 * dot326) - (barycentric_dot121 * dot316)) * barycentric_denom11);
HXDLIN(  24)											Float ratioC8 = ((((Float)1.0) - ratioB8) - ratioA8);
HXDLIN(  24)											Float ratiosAvg_ratioA4 = ratioA8;
HXDLIN(  24)											Float ratiosAvg_ratioB4 = ratioB8;
HXDLIN(  24)											Float ratiosAvg_ratioC4 = ratioC8;
HXDLIN(  24)											Float ratioA_4 = ratiosAvg_ratioA4;
HXDLIN(  24)											Float ratioB_4 = ratiosAvg_ratioB4;
HXDLIN(  24)											Float ratioC_4 = ratiosAvg_ratioC4;
HXDLIN(  24)											int i19 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA_4) + (( (Float)(aB1) ) * ratioB_4)) + (( (Float)(aC1) ) * ratioC_4)));
HXDLIN(  24)											if ((i19 > 255)) {
HXLINE(  24)												i19 = 255;
            											}
HXDLIN(  24)											if ((i19 < 0)) {
HXLINE(  25)												i19 = 0;
            											}
HXLINE( 187)											a9 = i19;
HXLINE(  24)											int i20 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA_4) + (( (Float)(rB1) ) * ratioB_4)) + (( (Float)(rC1) ) * ratioC_4)));
HXDLIN(  24)											if ((i20 > 255)) {
HXLINE(  24)												i20 = 255;
            											}
HXDLIN(  24)											if ((i20 < 0)) {
HXLINE(  25)												i20 = 0;
            											}
HXLINE( 188)											r6 = i20;
HXLINE(  24)											int i21 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA_4) + (( (Float)(gB1) ) * ratioB_4)) + (( (Float)(gC1) ) * ratioC_4)));
HXDLIN(  24)											if ((i21 > 255)) {
HXLINE(  24)												i21 = 255;
            											}
HXDLIN(  24)											if ((i21 < 0)) {
HXLINE(  25)												i21 = 0;
            											}
HXLINE( 189)											g6 = i21;
HXLINE(  24)											int i22 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA_4) + (( (Float)(bB1) ) * ratioB_4)) + (( (Float)(bC1) ) * ratioC_4)));
HXDLIN(  24)											if ((i22 > 255)) {
HXLINE(  24)												i22 = 255;
            											}
HXDLIN(  24)											if ((i22 < 0)) {
HXLINE(  25)												i22 = 0;
            											}
HXLINE( 190)											b6 = i22;
HXLINE(  24)											{
HXLINE(  24)												int location4;
HXDLIN(  24)												if (pixelImage->useVirtualPos) {
HXLINE(  24)													location4 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  24)													location4 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            												}
HXDLIN(  24)												bool _hx_tmp90;
HXDLIN(  24)												if (pixelImage->transparent) {
HXLINE(  24)													_hx_tmp90 = (a9 < 254);
            												}
            												else {
HXLINE(  24)													_hx_tmp90 = false;
            												}
HXDLIN(  24)												if (_hx_tmp90) {
HXLINE(  24)													int this81 = ::iterMagic::Iimg_obj::get(pixelImage->image,location4);
HXDLIN(  24)													int old4;
HXDLIN(  24)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)														old4 = ((((((this81 >> 24) & 255) << 24) | ((this81 & 255) << 16)) | (((this81 >> 8) & 255) << 8)) | ((this81 >> 16) & 255));
            													}
            													else {
HXLINE(  24)														old4 = this81;
            													}
HXDLIN(  24)													int rhs4 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  24)													Float a18;
HXDLIN(  24)													int this82 = ((old4 >> 24) & 255);
HXDLIN(  24)													if ((this82 == 0)) {
HXLINE(  24)														a18 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														a18 = (( (Float)(this82) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float r14;
HXDLIN(  24)													int this83 = ((old4 >> 16) & 255);
HXDLIN(  24)													if ((this83 == 0)) {
HXLINE(  24)														r14 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														r14 = (( (Float)(this83) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float g14;
HXDLIN(  24)													int this84 = ((old4 >> 8) & 255);
HXDLIN(  24)													if ((this84 == 0)) {
HXLINE(  24)														g14 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														g14 = (( (Float)(this84) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float b15;
HXDLIN(  24)													int this85 = (old4 & 255);
HXDLIN(  24)													if ((this85 == 0)) {
HXLINE(  24)														b15 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														b15 = (( (Float)(this85) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float a25;
HXDLIN(  24)													int this86 = ((rhs4 >> 24) & 255);
HXDLIN(  24)													if ((this86 == 0)) {
HXLINE(  24)														a25 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														a25 = (( (Float)(this86) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float r24;
HXDLIN(  24)													int this87 = ((rhs4 >> 16) & 255);
HXDLIN(  24)													if ((this87 == 0)) {
HXLINE(  24)														r24 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														r24 = (( (Float)(this87) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float g24;
HXDLIN(  24)													int this88 = ((rhs4 >> 8) & 255);
HXDLIN(  24)													if ((this88 == 0)) {
HXLINE(  24)														g24 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														g24 = (( (Float)(this88) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float b25;
HXDLIN(  24)													int this89 = (rhs4 & 255);
HXDLIN(  24)													if ((this89 == 0)) {
HXLINE(  24)														b25 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														b25 = (( (Float)(this89) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float a35 = (a18 * (( (Float)(1) ) - a25));
HXDLIN(  24)													int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a35) + (r24 * a25))));
HXDLIN(  24)													int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a35) + (g24 * a25))));
HXDLIN(  24)													int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a35) + (b25 * a25))));
HXDLIN(  24)													int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  24)													int blended4 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b10);
HXDLIN(  24)													{
HXLINE(  24)														int _hx_tmp91;
HXDLIN(  24)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)															_hx_tmp91 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            														}
            														else {
HXLINE(  24)															_hx_tmp91 = blended4;
            														}
HXDLIN(  24)														::iterMagic::Iimg_obj::set(pixelImage->image,location4,_hx_tmp91);
            													}
            												}
            												else {
HXLINE(  24)													int value4;
HXDLIN(  24)													if (pixelImage->isLittle) {
HXLINE(  24)														value4 = ((((a9 << 24) | (b6 << 16)) | (g6 << 8)) | r6);
            													}
            													else {
HXLINE(  24)														value4 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
            													}
HXDLIN(  24)													::iterMagic::Iimg_obj::set(pixelImage->image,location4,value4);
            												}
            											}
            										}
            										else {
HXLINE(  24)											Float pcx7 = (sampleData_averageX1 - barycentric_cx1);
HXDLIN(  24)											Float pcy7 = (sampleData_averageY1 - barycentric_cy1);
HXDLIN(  24)											Float dot317 = ((pcx7 * barycentric_bcx1) + (pcy7 * barycentric_bcy1));
HXDLIN(  24)											Float dot327 = ((pcx7 * barycentric_acx1) + (pcy7 * barycentric_acy1));
HXDLIN(  24)											Float ratioA9 = (((barycentric_dot221 * dot317) - (barycentric_dot121 * dot327)) * barycentric_denom11);
HXDLIN(  24)											Float ratioB9 = (((barycentric_dot111 * dot327) - (barycentric_dot121 * dot317)) * barycentric_denom11);
HXDLIN(  24)											Float ratioC9 = ((((Float)1.0) - ratioB9) - ratioA9);
HXDLIN(  24)											Float ratiosAvg_ratioA5 = ratioA9;
HXDLIN(  24)											Float ratiosAvg_ratioB5 = ratioB9;
HXDLIN(  24)											Float ratiosAvg_ratioC5 = ratioC9;
HXDLIN(  24)											Float ratioA_5 = ratiosAvg_ratioA5;
HXDLIN(  24)											Float ratioB_5 = ratiosAvg_ratioB5;
HXDLIN(  24)											Float ratioC_5 = ratiosAvg_ratioC5;
HXDLIN(  24)											int i23 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA_5) + (( (Float)(aB1) ) * ratioB_5)) + (( (Float)(aC1) ) * ratioC_5)));
HXDLIN(  24)											if ((i23 > 255)) {
HXLINE(  24)												i23 = 255;
            											}
HXDLIN(  24)											if ((i23 < 0)) {
HXLINE(  25)												i23 = 0;
            											}
HXLINE( 198)											a9 = i23;
HXLINE(  24)											int i24 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA_5) + (( (Float)(rB1) ) * ratioB_5)) + (( (Float)(rC1) ) * ratioC_5)));
HXDLIN(  24)											if ((i24 > 255)) {
HXLINE(  24)												i24 = 255;
            											}
HXDLIN(  24)											if ((i24 < 0)) {
HXLINE(  25)												i24 = 0;
            											}
HXLINE( 199)											r6 = i24;
HXLINE(  24)											int i25 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA_5) + (( (Float)(gB1) ) * ratioB_5)) + (( (Float)(gC1) ) * ratioC_5)));
HXDLIN(  24)											if ((i25 > 255)) {
HXLINE(  24)												i25 = 255;
            											}
HXDLIN(  24)											if ((i25 < 0)) {
HXLINE(  25)												i25 = 0;
            											}
HXLINE( 200)											g6 = i25;
HXLINE(  24)											int i26 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA_5) + (( (Float)(bB1) ) * ratioB_5)) + (( (Float)(bC1) ) * ratioC_5)));
HXDLIN(  24)											if ((i26 > 255)) {
HXLINE(  24)												i26 = 255;
            											}
HXDLIN(  24)											if ((i26 < 0)) {
HXLINE(  25)												i26 = 0;
            											}
HXLINE( 201)											b6 = i26;
HXLINE(  24)											{
HXLINE(  24)												int a20;
HXDLIN(  24)												if ((aScale1 > ((Float)0.9))) {
HXLINE(  24)													a20 = a9;
            												}
            												else {
HXLINE(  24)													int i27 = ::Std_obj::_hx_int((( (Float)(a9) ) * aScale1));
HXDLIN(  24)													if ((i27 > 255)) {
HXLINE(  24)														i27 = 255;
            													}
HXDLIN(  24)													if ((i27 < 0)) {
HXLINE(  25)														i27 = 0;
            													}
HXLINE(  24)													a20 = i27;
            												}
HXDLIN(  24)												int location5;
HXDLIN(  24)												if (pixelImage->useVirtualPos) {
HXLINE(  24)													location5 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  24)													location5 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            												}
HXDLIN(  24)												bool _hx_tmp92;
HXDLIN(  24)												if (pixelImage->transparent) {
HXLINE(  24)													_hx_tmp92 = (a20 < 254);
            												}
            												else {
HXLINE(  24)													_hx_tmp92 = false;
            												}
HXDLIN(  24)												if (_hx_tmp92) {
HXLINE(  24)													int this90 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN(  24)													int old5;
HXDLIN(  24)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)														old5 = ((((((this90 >> 24) & 255) << 24) | ((this90 & 255) << 16)) | (((this90 >> 8) & 255) << 8)) | ((this90 >> 16) & 255));
            													}
            													else {
HXLINE(  24)														old5 = this90;
            													}
HXDLIN(  24)													int rhs5 = ((((a20 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
HXDLIN(  24)													Float a110;
HXDLIN(  24)													int this91 = ((old5 >> 24) & 255);
HXDLIN(  24)													if ((this91 == 0)) {
HXLINE(  24)														a110 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														a110 = (( (Float)(this91) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float r15;
HXDLIN(  24)													int this92 = ((old5 >> 16) & 255);
HXDLIN(  24)													if ((this92 == 0)) {
HXLINE(  24)														r15 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														r15 = (( (Float)(this92) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float g15;
HXDLIN(  24)													int this93 = ((old5 >> 8) & 255);
HXDLIN(  24)													if ((this93 == 0)) {
HXLINE(  24)														g15 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														g15 = (( (Float)(this93) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float b16;
HXDLIN(  24)													int this94 = (old5 & 255);
HXDLIN(  24)													if ((this94 == 0)) {
HXLINE(  24)														b16 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														b16 = (( (Float)(this94) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float a26;
HXDLIN(  24)													int this95 = ((rhs5 >> 24) & 255);
HXDLIN(  24)													if ((this95 == 0)) {
HXLINE(  24)														a26 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														a26 = (( (Float)(this95) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float r25;
HXDLIN(  24)													int this96 = ((rhs5 >> 16) & 255);
HXDLIN(  24)													if ((this96 == 0)) {
HXLINE(  24)														r25 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														r25 = (( (Float)(this96) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float g25;
HXDLIN(  24)													int this97 = ((rhs5 >> 8) & 255);
HXDLIN(  24)													if ((this97 == 0)) {
HXLINE(  24)														g25 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														g25 = (( (Float)(this97) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float b26;
HXDLIN(  24)													int this98 = (rhs5 & 255);
HXDLIN(  24)													if ((this98 == 0)) {
HXLINE(  24)														b26 = ((Float)0.);
            													}
            													else {
HXLINE(  24)														b26 = (( (Float)(this98) ) / ( (Float)(255) ));
            													}
HXDLIN(  24)													Float a36 = (a110 * (( (Float)(1) ) - a26));
HXDLIN(  24)													int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a36) + (r25 * a26))));
HXDLIN(  24)													int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a36) + (g25 * a26))));
HXDLIN(  24)													int b17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b16 * a36) + (b26 * a26))));
HXDLIN(  24)													int a27 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  24)													int blended5 = ((((a27 << 24) | (r9 << 16)) | (g9 << 8)) | b17);
HXDLIN(  24)													{
HXLINE(  24)														int _hx_tmp93;
HXDLIN(  24)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)															_hx_tmp93 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            														}
            														else {
HXLINE(  24)															_hx_tmp93 = blended5;
            														}
HXDLIN(  24)														::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp93);
            													}
            												}
            												else {
HXLINE(  24)													int value5;
HXDLIN(  24)													if (pixelImage->isLittle) {
HXLINE(  24)														value5 = ((((a20 << 24) | (b6 << 16)) | (g6 << 8)) | r6);
            													}
            													else {
HXLINE(  24)														value5 = ((((a20 << 24) | (r6 << 16)) | (g6 << 8)) | b6);
            													}
HXDLIN(  24)													::iterMagic::Iimg_obj::set(pixelImage->image,location5,value5);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  24)				 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN(  24)				 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN(  24)				Float v_ty;
HXDLIN(  24)				Float v_tx;
HXDLIN(  24)				Float v_t0;
HXDLIN(  24)				Float v_sy;
HXDLIN(  24)				Float v_sx;
HXDLIN(  24)				Float v_s0;
HXDLIN(  24)				Float v_A;
HXDLIN(  24)				Float ax7 = ax4;
HXDLIN(  24)				Float ay7 = ay4;
HXDLIN(  24)				 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN(  24)				Float bx3 = bx2;
HXDLIN(  24)				Float by3 = by2;
HXDLIN(  24)				Float cx3 = cx2;
HXDLIN(  24)				Float cy3 = cy2;
HXDLIN(  24)				bool adjustWinding2 = (((((ax7 * by3) - (bx3 * ay7)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * ay7) - (ax7 * cy3))) > 0);
HXDLIN(  24)				if (!(adjustWinding2)) {
HXLINE(  24)					Float bx_6 = bx3;
HXDLIN(  24)					Float by_6 = by3;
HXDLIN(  24)					bx3 = cx3;
HXLINE(  25)					by3 = cy3;
HXLINE(  26)					cx3 = bx_6;
HXLINE(  27)					cy3 = by_6;
            				}
HXLINE(  24)				Float v_ax = ax7;
HXDLIN(  24)				Float v_ay = ay7;
HXDLIN(  24)				Float v_bx = bx3;
HXDLIN(  24)				Float v_by = by3;
HXDLIN(  24)				Float v_cx = cx3;
HXDLIN(  24)				Float v_cy = cy3;
HXDLIN(  24)				bool v_preCalculated = true;
HXDLIN(  24)				{
HXLINE(  24)					v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN(  24)					v_sx = (v_cy - v_ay);
HXDLIN(  24)					v_sy = (v_ax - v_cx);
HXDLIN(  24)					v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN(  24)					v_tx = (v_ay - v_by);
HXDLIN(  24)					v_ty = (v_bx - v_ax);
HXDLIN(  24)					v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN(  24)					Float a28 = v_ax;
HXDLIN(  24)					Float b18 = v_bx;
HXDLIN(  24)					Float c4 = v_cx;
HXDLIN(  24)					if ((a28 > b18)) {
HXLINE(  24)						if ((a28 > c4)) {
HXLINE(  24)							int min8;
HXDLIN(  24)							if ((b18 > c4)) {
HXLINE(  24)								min8 = ::Math_obj::floor(c4);
            							}
            							else {
HXLINE(  24)								min8 = ::Math_obj::floor(b18);
            							}
HXDLIN(  24)							int ii_min16 = min8;
HXDLIN(  24)							int ii_max16 = ::Math_obj::ceil(a28);
HXDLIN(  24)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            						}
            						else {
HXLINE(  24)							int ii_min17 = ::Math_obj::floor(b18);
HXDLIN(  24)							int ii_max17 = ::Math_obj::ceil(c4);
HXDLIN(  24)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            						}
            					}
            					else {
HXLINE(  24)						if ((b18 > c4)) {
HXLINE(  24)							int min9;
HXDLIN(  24)							if ((a28 > c4)) {
HXLINE(  24)								min9 = ::Math_obj::floor(c4);
            							}
            							else {
HXLINE(  24)								min9 = ::Math_obj::ceil(a28);
            							}
HXDLIN(  24)							int ii_min18 = min9;
HXDLIN(  24)							int ii_max18 = ::Math_obj::ceil(b18);
HXDLIN(  24)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            						}
            						else {
HXLINE(  24)							int ii_min19 = ::Math_obj::floor(a28);
HXDLIN(  24)							int ii_max19 = ::Math_obj::ceil(c4);
HXDLIN(  24)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            						}
            					}
HXDLIN(  24)					Float a29 = v_ay;
HXDLIN(  24)					Float b19 = v_by;
HXDLIN(  24)					Float c5 = v_cy;
HXDLIN(  24)					if ((a29 > b19)) {
HXLINE(  24)						if ((a29 > c5)) {
HXLINE(  24)							int min10;
HXDLIN(  24)							if ((b19 > c5)) {
HXLINE(  24)								min10 = ::Math_obj::floor(c5);
            							}
            							else {
HXLINE(  24)								min10 = ::Math_obj::floor(b19);
            							}
HXDLIN(  24)							int ii_min20 = min10;
HXDLIN(  24)							int ii_max20 = ::Math_obj::ceil(a29);
HXDLIN(  24)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            						}
            						else {
HXLINE(  24)							int ii_min21 = ::Math_obj::floor(b19);
HXDLIN(  24)							int ii_max21 = ::Math_obj::ceil(c5);
HXDLIN(  24)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            						}
            					}
            					else {
HXLINE(  24)						if ((b19 > c5)) {
HXLINE(  24)							int min11;
HXDLIN(  24)							if ((a29 > c5)) {
HXLINE(  24)								min11 = ::Math_obj::floor(c5);
            							}
            							else {
HXLINE(  24)								min11 = ::Math_obj::ceil(a29);
            							}
HXDLIN(  24)							int ii_min22 = min11;
HXDLIN(  24)							int ii_max22 = ::Math_obj::ceil(b19);
HXDLIN(  24)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            						}
            						else {
HXLINE(  24)							int ii_min23 = ::Math_obj::floor(a29);
HXDLIN(  24)							int ii_max23 = ::Math_obj::ceil(c5);
HXDLIN(  24)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            						}
            					}
            				}
HXDLIN(  24)				 ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,quadPoints_ax,quadPoints_ay,quadPoints_bx,quadPoints_by,quadPoints_cx,quadPoints_cy,quadPoints_dx,quadPoints_dy,hasHit);
            			}
            		}
            		else {
HXLINE(  27)			 ::pi_xy::ImageStruct this99 = pixelImage;
HXDLIN(  27)			int colorA1 = this->cornerColors->__get(0);
HXDLIN(  27)			int colorB1 = this->cornerColors->__get(1);
HXDLIN(  27)			int colorC1 = this->cornerColors->__get(2);
HXDLIN(  27)			int colorD1 = this->cornerColors->__get(3);
HXDLIN(  27)			bool hasHit1 = false;
HXDLIN(  27)			Float o1 = (qy - py);
HXDLIN(  27)			Float a30 = (qx - px);
HXDLIN(  27)			Float h1 = ::Math_obj::pow(((o1 * o1) + (a30 * a30)),((Float)0.5));
HXDLIN(  27)			Float theta1 = ::Math_obj::atan2(o1,a30);
HXDLIN(  27)			{
HXLINE(  27)				 ::Dynamic debugCorners = false;
HXDLIN(  27)				if (::hx::IsNull( debugCorners )) {
HXLINE(  81)					debugCorners = false;
            				}
HXLINE(  27)				Float sin1 = ::Math_obj::sin(theta1);
HXDLIN(  27)				Float cos1 = ::Math_obj::cos(theta1);
HXDLIN(  27)				Float radius1 = (this->strokeWidth / ( (Float)(2) ));
HXDLIN(  27)				Float dx1 = ((Float)0.1);
HXDLIN(  27)				Float dy1 = radius1;
HXDLIN(  27)				Float cx4 = h1;
HXDLIN(  27)				Float cy4 = radius1;
HXDLIN(  27)				Float bx4 = h1;
HXDLIN(  27)				Float by4 = -(radius1);
HXDLIN(  27)				Float ax8 = ((Float)0.1);
HXDLIN(  27)				Float ay8 = -(radius1);
HXDLIN(  27)				Float temp1 = ((Float)0.);
HXLINE( 474)				temp1 = (px + ((ax8 * cos1) - (ay8 * sin1)));
HXLINE( 475)				ay8 = (py + ((ay8 * cos1) + (ax8 * sin1)));
HXLINE( 476)				ax8 = temp1;
HXLINE( 478)				temp1 = (px + ((bx4 * cos1) - (by4 * sin1)));
HXLINE( 479)				by4 = (py + ((by4 * cos1) + (bx4 * sin1)));
HXLINE( 480)				bx4 = temp1;
HXLINE( 482)				temp1 = (px + ((cx4 * cos1) - (cy4 * sin1)));
HXLINE( 483)				cy4 = (py + ((cy4 * cos1) + (cx4 * sin1)));
HXLINE( 484)				cx4 = temp1;
HXLINE( 486)				temp1 = (px + ((dx1 * cos1) - (dy1 * sin1)));
HXLINE( 487)				dy1 = (py + ((dy1 * cos1) + (dx1 * sin1)));
HXLINE( 488)				dx1 = temp1;
HXLINE(  27)				if (( (bool)(debugCorners) )) {
HXLINE(  27)					{
HXLINE(  27)						 ::pi_xy::ImageStruct this100 = this99;
HXDLIN(  27)						{
HXLINE(  27)							int r_x = ::Std_obj::_hx_int((ax8 - ((Float)6.)));
HXDLIN(  27)							int r_y = ::Std_obj::_hx_int((ay8 - ((Float)6.)));
HXDLIN(  27)							int r_w = 12;
HXDLIN(  27)							int r_h = 12;
HXDLIN(  27)							int xmax = ((r_x + r_w) + 1);
HXDLIN(  27)							int ymax = ((r_y + r_h) + 1);
HXDLIN(  27)							int ii_min24 = r_x;
HXDLIN(  27)							int ii_max24 = xmax;
HXDLIN(  27)							int xRange__start = ii_min24;
HXDLIN(  27)							int xRange__max = ii_max24;
HXDLIN(  27)							int ii_min25 = r_y;
HXDLIN(  27)							int ii_max25 = ymax;
HXDLIN(  27)							int yRange__start = ii_min25;
HXDLIN(  27)							int yRange__max = ii_max25;
HXDLIN(  27)							int range_x = xRange__start;
HXDLIN(  27)							int range_y = (yRange__start - 1);
HXDLIN(  27)							int range_xReset = range_x;
HXDLIN(  27)							int range_yReset = range_y;
HXDLIN(  27)							int range_xMax = (xRange__max - 2);
HXDLIN(  27)							int range_yMax = (yRange__max - 2);
HXDLIN(  27)							int _this_min = 0;
HXDLIN(  27)							int _this_max = ::Std_obj::_hx_int(( (Float)(((xRange__max - xRange__start) * (yRange__max - yRange__start))) ));
HXDLIN(  27)							while((_this_min < _this_max)){
HXLINE(  27)								_this_min = (_this_min + 1);
HXDLIN(  27)								int i28 = (_this_min - 1);
HXDLIN(  27)								if ((range_y > range_yMax)) {
HXLINE(  27)									range_y = range_yReset;
HXDLIN(  27)									range_x = (range_x + 1);
            								}
HXDLIN(  27)								range_y = (range_y + 1);
HXDLIN(  27)								int i29 = i28;
HXDLIN(  27)								{
HXLINE(  27)									int x29 = range_x;
HXDLIN(  27)									int y29 = range_y;
HXDLIN(  27)									int c6 = colorA1;
HXDLIN(  27)									bool _hx_tmp94;
HXDLIN(  27)									if ((((c6 >> 24) & 255) < 254)) {
HXLINE(  27)										_hx_tmp94 = this100->transparent;
            									}
            									else {
HXLINE(  27)										_hx_tmp94 = false;
            									}
HXDLIN(  27)									if (_hx_tmp94) {
HXLINE(  27)										int location6;
HXDLIN(  27)										if (this100->useVirtualPos) {
HXLINE(  27)											location6 = ::Std_obj::_hx_int(((((( (Float)(y29) ) - this100->virtualY) * ( (Float)(this100->width) )) + x29) - this100->virtualX));
            										}
            										else {
HXLINE(  27)											location6 = ::Std_obj::_hx_int(( (Float)(((y29 * this100->width) + x29)) ));
            										}
HXDLIN(  27)										int this101 = ::iterMagic::Iimg_obj::get(this100->image,location6);
HXDLIN(  27)										int this102;
HXDLIN(  27)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)											this102 = ((((((this101 >> 24) & 255) << 24) | ((this101 & 255) << 16)) | (((this101 >> 8) & 255) << 8)) | ((this101 >> 16) & 255));
            										}
            										else {
HXLINE(  27)											this102 = this101;
            										}
HXDLIN(  27)										Float a111;
HXDLIN(  27)										int this103 = ((this102 >> 24) & 255);
HXDLIN(  27)										if ((this103 == 0)) {
HXLINE(  27)											a111 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											a111 = (( (Float)(this103) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float r16;
HXDLIN(  27)										int this104 = ((this102 >> 16) & 255);
HXDLIN(  27)										if ((this104 == 0)) {
HXLINE(  27)											r16 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											r16 = (( (Float)(this104) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float g16;
HXDLIN(  27)										int this105 = ((this102 >> 8) & 255);
HXDLIN(  27)										if ((this105 == 0)) {
HXLINE(  27)											g16 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											g16 = (( (Float)(this105) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float b110;
HXDLIN(  27)										int this106 = (this102 & 255);
HXDLIN(  27)										if ((this106 == 0)) {
HXLINE(  27)											b110 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											b110 = (( (Float)(this106) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float a210;
HXDLIN(  27)										int this107 = ((colorA1 >> 24) & 255);
HXDLIN(  27)										if ((this107 == 0)) {
HXLINE(  27)											a210 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											a210 = (( (Float)(this107) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float r26;
HXDLIN(  27)										int this108 = ((colorA1 >> 16) & 255);
HXDLIN(  27)										if ((this108 == 0)) {
HXLINE(  27)											r26 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											r26 = (( (Float)(this108) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float g26;
HXDLIN(  27)										int this109 = ((colorA1 >> 8) & 255);
HXDLIN(  27)										if ((this109 == 0)) {
HXLINE(  27)											g26 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											g26 = (( (Float)(this109) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float b27;
HXDLIN(  27)										int this110 = (colorA1 & 255);
HXDLIN(  27)										if ((this110 == 0)) {
HXLINE(  27)											b27 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											b27 = (( (Float)(this110) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float a37 = (a111 * (( (Float)(1) ) - a210));
HXDLIN(  27)										int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a37) + (r26 * a210))));
HXDLIN(  27)										int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a37) + (g26 * a210))));
HXDLIN(  27)										int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a37) + (b27 * a210))));
HXDLIN(  27)										int a38 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a210)));
HXDLIN(  27)										int blended6 = ((((a38 << 24) | (r10 << 16)) | (g10 << 8)) | b20);
HXDLIN(  27)										{
HXLINE(  27)											int _hx_tmp95;
HXDLIN(  27)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)												_hx_tmp95 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            											}
            											else {
HXLINE(  27)												_hx_tmp95 = blended6;
            											}
HXDLIN(  27)											::iterMagic::Iimg_obj::set(this100->image,location6,_hx_tmp95);
            										}
            									}
            									else {
HXLINE(  27)										::Dynamic this111 = this100->image;
HXDLIN(  27)										int index;
HXDLIN(  27)										if (this100->useVirtualPos) {
HXLINE(  27)											index = ::Std_obj::_hx_int(((((( (Float)(y29) ) - this100->virtualY) * ( (Float)(this100->width) )) + x29) - this100->virtualX));
            										}
            										else {
HXLINE(  27)											index = ::Std_obj::_hx_int(( (Float)(((y29 * this100->width) + x29)) ));
            										}
HXDLIN(  27)										int _hx_tmp96;
HXDLIN(  27)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)											_hx_tmp96 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            										}
            										else {
HXLINE(  27)											_hx_tmp96 = c6;
            										}
HXDLIN(  27)										::iterMagic::Iimg_obj::set(this111,index,_hx_tmp96);
            									}
            								}
            							}
            						}
            					}
HXDLIN(  27)					{
HXLINE(  27)						 ::pi_xy::ImageStruct this112 = this99;
HXDLIN(  27)						{
HXLINE(  27)							int r_x1 = ::Std_obj::_hx_int((bx4 - ((Float)6.)));
HXDLIN(  27)							int r_y1 = ::Std_obj::_hx_int((by4 - ((Float)6.)));
HXDLIN(  27)							int r_w1 = 12;
HXDLIN(  27)							int r_h1 = 12;
HXDLIN(  27)							int xmax1 = ((r_x1 + r_w1) + 1);
HXDLIN(  27)							int ymax1 = ((r_y1 + r_h1) + 1);
HXDLIN(  27)							int ii_min26 = r_x1;
HXDLIN(  27)							int ii_max26 = xmax1;
HXDLIN(  27)							int xRange__start1 = ii_min26;
HXDLIN(  27)							int xRange__max1 = ii_max26;
HXDLIN(  27)							int ii_min27 = r_y1;
HXDLIN(  27)							int ii_max27 = ymax1;
HXDLIN(  27)							int yRange__start1 = ii_min27;
HXDLIN(  27)							int yRange__max1 = ii_max27;
HXDLIN(  27)							int range_x1 = xRange__start1;
HXDLIN(  27)							int range_y1 = (yRange__start1 - 1);
HXDLIN(  27)							int range_xReset1 = range_x1;
HXDLIN(  27)							int range_yReset1 = range_y1;
HXDLIN(  27)							int range_xMax1 = (xRange__max1 - 2);
HXDLIN(  27)							int range_yMax1 = (yRange__max1 - 2);
HXDLIN(  27)							int _this_min1 = 0;
HXDLIN(  27)							int _this_max1 = ::Std_obj::_hx_int(( (Float)(((xRange__max1 - xRange__start1) * (yRange__max1 - yRange__start1))) ));
HXDLIN(  27)							while((_this_min1 < _this_max1)){
HXLINE(  27)								_this_min1 = (_this_min1 + 1);
HXDLIN(  27)								int i30 = (_this_min1 - 1);
HXDLIN(  27)								if ((range_y1 > range_yMax1)) {
HXLINE(  27)									range_y1 = range_yReset1;
HXDLIN(  27)									range_x1 = (range_x1 + 1);
            								}
HXDLIN(  27)								range_y1 = (range_y1 + 1);
HXDLIN(  27)								int i31 = i30;
HXDLIN(  27)								{
HXLINE(  27)									int x30 = range_x1;
HXDLIN(  27)									int y30 = range_y1;
HXDLIN(  27)									int c7 = colorB1;
HXDLIN(  27)									bool _hx_tmp97;
HXDLIN(  27)									if ((((c7 >> 24) & 255) < 254)) {
HXLINE(  27)										_hx_tmp97 = this112->transparent;
            									}
            									else {
HXLINE(  27)										_hx_tmp97 = false;
            									}
HXDLIN(  27)									if (_hx_tmp97) {
HXLINE(  27)										int location7;
HXDLIN(  27)										if (this112->useVirtualPos) {
HXLINE(  27)											location7 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - this112->virtualY) * ( (Float)(this112->width) )) + x30) - this112->virtualX));
            										}
            										else {
HXLINE(  27)											location7 = ::Std_obj::_hx_int(( (Float)(((y30 * this112->width) + x30)) ));
            										}
HXDLIN(  27)										int this113 = ::iterMagic::Iimg_obj::get(this112->image,location7);
HXDLIN(  27)										int this114;
HXDLIN(  27)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)											this114 = ((((((this113 >> 24) & 255) << 24) | ((this113 & 255) << 16)) | (((this113 >> 8) & 255) << 8)) | ((this113 >> 16) & 255));
            										}
            										else {
HXLINE(  27)											this114 = this113;
            										}
HXDLIN(  27)										Float a112;
HXDLIN(  27)										int this115 = ((this114 >> 24) & 255);
HXDLIN(  27)										if ((this115 == 0)) {
HXLINE(  27)											a112 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											a112 = (( (Float)(this115) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float r17;
HXDLIN(  27)										int this116 = ((this114 >> 16) & 255);
HXDLIN(  27)										if ((this116 == 0)) {
HXLINE(  27)											r17 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											r17 = (( (Float)(this116) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float g17;
HXDLIN(  27)										int this117 = ((this114 >> 8) & 255);
HXDLIN(  27)										if ((this117 == 0)) {
HXLINE(  27)											g17 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											g17 = (( (Float)(this117) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float b111;
HXDLIN(  27)										int this118 = (this114 & 255);
HXDLIN(  27)										if ((this118 == 0)) {
HXLINE(  27)											b111 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											b111 = (( (Float)(this118) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float a211;
HXDLIN(  27)										int this119 = ((colorB1 >> 24) & 255);
HXDLIN(  27)										if ((this119 == 0)) {
HXLINE(  27)											a211 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											a211 = (( (Float)(this119) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float r27;
HXDLIN(  27)										int this120 = ((colorB1 >> 16) & 255);
HXDLIN(  27)										if ((this120 == 0)) {
HXLINE(  27)											r27 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											r27 = (( (Float)(this120) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float g27;
HXDLIN(  27)										int this121 = ((colorB1 >> 8) & 255);
HXDLIN(  27)										if ((this121 == 0)) {
HXLINE(  27)											g27 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											g27 = (( (Float)(this121) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float b28;
HXDLIN(  27)										int this122 = (colorB1 & 255);
HXDLIN(  27)										if ((this122 == 0)) {
HXLINE(  27)											b28 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											b28 = (( (Float)(this122) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float a39 = (a112 * (( (Float)(1) ) - a211));
HXDLIN(  27)										int r18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a39) + (r27 * a211))));
HXDLIN(  27)										int g18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a39) + (g27 * a211))));
HXDLIN(  27)										int b29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a39) + (b28 * a211))));
HXDLIN(  27)										int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a211)));
HXDLIN(  27)										int blended7 = ((((a40 << 24) | (r18 << 16)) | (g18 << 8)) | b29);
HXDLIN(  27)										{
HXLINE(  27)											int _hx_tmp98;
HXDLIN(  27)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)												_hx_tmp98 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            											}
            											else {
HXLINE(  27)												_hx_tmp98 = blended7;
            											}
HXDLIN(  27)											::iterMagic::Iimg_obj::set(this112->image,location7,_hx_tmp98);
            										}
            									}
            									else {
HXLINE(  27)										::Dynamic this123 = this112->image;
HXDLIN(  27)										int index1;
HXDLIN(  27)										if (this112->useVirtualPos) {
HXLINE(  27)											index1 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - this112->virtualY) * ( (Float)(this112->width) )) + x30) - this112->virtualX));
            										}
            										else {
HXLINE(  27)											index1 = ::Std_obj::_hx_int(( (Float)(((y30 * this112->width) + x30)) ));
            										}
HXDLIN(  27)										int _hx_tmp99;
HXDLIN(  27)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)											_hx_tmp99 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            										}
            										else {
HXLINE(  27)											_hx_tmp99 = c7;
            										}
HXDLIN(  27)										::iterMagic::Iimg_obj::set(this123,index1,_hx_tmp99);
            									}
            								}
            							}
            						}
            					}
HXDLIN(  27)					{
HXLINE(  27)						 ::pi_xy::ImageStruct this124 = this99;
HXDLIN(  27)						{
HXLINE(  27)							int r_x2 = ::Std_obj::_hx_int((cx4 - ((Float)6.)));
HXDLIN(  27)							int r_y2 = ::Std_obj::_hx_int((cy4 - ((Float)6.)));
HXDLIN(  27)							int r_w2 = 12;
HXDLIN(  27)							int r_h2 = 12;
HXDLIN(  27)							int xmax2 = ((r_x2 + r_w2) + 1);
HXDLIN(  27)							int ymax2 = ((r_y2 + r_h2) + 1);
HXDLIN(  27)							int ii_min28 = r_x2;
HXDLIN(  27)							int ii_max28 = xmax2;
HXDLIN(  27)							int xRange__start2 = ii_min28;
HXDLIN(  27)							int xRange__max2 = ii_max28;
HXDLIN(  27)							int ii_min29 = r_y2;
HXDLIN(  27)							int ii_max29 = ymax2;
HXDLIN(  27)							int yRange__start2 = ii_min29;
HXDLIN(  27)							int yRange__max2 = ii_max29;
HXDLIN(  27)							int range_x2 = xRange__start2;
HXDLIN(  27)							int range_y2 = (yRange__start2 - 1);
HXDLIN(  27)							int range_xReset2 = range_x2;
HXDLIN(  27)							int range_yReset2 = range_y2;
HXDLIN(  27)							int range_xMax2 = (xRange__max2 - 2);
HXDLIN(  27)							int range_yMax2 = (yRange__max2 - 2);
HXDLIN(  27)							int _this_min2 = 0;
HXDLIN(  27)							int _this_max2 = ::Std_obj::_hx_int(( (Float)(((xRange__max2 - xRange__start2) * (yRange__max2 - yRange__start2))) ));
HXDLIN(  27)							while((_this_min2 < _this_max2)){
HXLINE(  27)								_this_min2 = (_this_min2 + 1);
HXDLIN(  27)								int i32 = (_this_min2 - 1);
HXDLIN(  27)								if ((range_y2 > range_yMax2)) {
HXLINE(  27)									range_y2 = range_yReset2;
HXDLIN(  27)									range_x2 = (range_x2 + 1);
            								}
HXDLIN(  27)								range_y2 = (range_y2 + 1);
HXDLIN(  27)								int i33 = i32;
HXDLIN(  27)								{
HXLINE(  27)									int x34 = range_x2;
HXDLIN(  27)									int y34 = range_y2;
HXDLIN(  27)									int c8 = colorC1;
HXDLIN(  27)									bool _hx_tmp100;
HXDLIN(  27)									if ((((c8 >> 24) & 255) < 254)) {
HXLINE(  27)										_hx_tmp100 = this124->transparent;
            									}
            									else {
HXLINE(  27)										_hx_tmp100 = false;
            									}
HXDLIN(  27)									if (_hx_tmp100) {
HXLINE(  27)										int location8;
HXDLIN(  27)										if (this124->useVirtualPos) {
HXLINE(  27)											location8 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - this124->virtualY) * ( (Float)(this124->width) )) + x34) - this124->virtualX));
            										}
            										else {
HXLINE(  27)											location8 = ::Std_obj::_hx_int(( (Float)(((y34 * this124->width) + x34)) ));
            										}
HXDLIN(  27)										int this125 = ::iterMagic::Iimg_obj::get(this124->image,location8);
HXDLIN(  27)										int this126;
HXDLIN(  27)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)											this126 = ((((((this125 >> 24) & 255) << 24) | ((this125 & 255) << 16)) | (((this125 >> 8) & 255) << 8)) | ((this125 >> 16) & 255));
            										}
            										else {
HXLINE(  27)											this126 = this125;
            										}
HXDLIN(  27)										Float a113;
HXDLIN(  27)										int this127 = ((this126 >> 24) & 255);
HXDLIN(  27)										if ((this127 == 0)) {
HXLINE(  27)											a113 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											a113 = (( (Float)(this127) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float r19;
HXDLIN(  27)										int this128 = ((this126 >> 16) & 255);
HXDLIN(  27)										if ((this128 == 0)) {
HXLINE(  27)											r19 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											r19 = (( (Float)(this128) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float g19;
HXDLIN(  27)										int this129 = ((this126 >> 8) & 255);
HXDLIN(  27)										if ((this129 == 0)) {
HXLINE(  27)											g19 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											g19 = (( (Float)(this129) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float b112;
HXDLIN(  27)										int this130 = (this126 & 255);
HXDLIN(  27)										if ((this130 == 0)) {
HXLINE(  27)											b112 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											b112 = (( (Float)(this130) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float a212;
HXDLIN(  27)										int this131 = ((colorC1 >> 24) & 255);
HXDLIN(  27)										if ((this131 == 0)) {
HXLINE(  27)											a212 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											a212 = (( (Float)(this131) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float r28;
HXDLIN(  27)										int this132 = ((colorC1 >> 16) & 255);
HXDLIN(  27)										if ((this132 == 0)) {
HXLINE(  27)											r28 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											r28 = (( (Float)(this132) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float g28;
HXDLIN(  27)										int this133 = ((colorC1 >> 8) & 255);
HXDLIN(  27)										if ((this133 == 0)) {
HXLINE(  27)											g28 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											g28 = (( (Float)(this133) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float b210;
HXDLIN(  27)										int this134 = (colorC1 & 255);
HXDLIN(  27)										if ((this134 == 0)) {
HXLINE(  27)											b210 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											b210 = (( (Float)(this134) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float a310 = (a113 * (( (Float)(1) ) - a212));
HXDLIN(  27)										int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a310) + (r28 * a212))));
HXDLIN(  27)										int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a310) + (g28 * a212))));
HXDLIN(  27)										int b30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a310) + (b210 * a212))));
HXDLIN(  27)										int a41 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a212)));
HXDLIN(  27)										int blended8 = ((((a41 << 24) | (r20 << 16)) | (g20 << 8)) | b30);
HXDLIN(  27)										{
HXLINE(  27)											int _hx_tmp101;
HXDLIN(  27)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)												_hx_tmp101 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            											}
            											else {
HXLINE(  27)												_hx_tmp101 = blended8;
            											}
HXDLIN(  27)											::iterMagic::Iimg_obj::set(this124->image,location8,_hx_tmp101);
            										}
            									}
            									else {
HXLINE(  27)										::Dynamic this135 = this124->image;
HXDLIN(  27)										int index2;
HXDLIN(  27)										if (this124->useVirtualPos) {
HXLINE(  27)											index2 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - this124->virtualY) * ( (Float)(this124->width) )) + x34) - this124->virtualX));
            										}
            										else {
HXLINE(  27)											index2 = ::Std_obj::_hx_int(( (Float)(((y34 * this124->width) + x34)) ));
            										}
HXDLIN(  27)										int _hx_tmp102;
HXDLIN(  27)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)											_hx_tmp102 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            										}
            										else {
HXLINE(  27)											_hx_tmp102 = c8;
            										}
HXDLIN(  27)										::iterMagic::Iimg_obj::set(this135,index2,_hx_tmp102);
            									}
            								}
            							}
            						}
            					}
HXDLIN(  27)					{
HXLINE(  27)						 ::pi_xy::ImageStruct this136 = this99;
HXDLIN(  27)						{
HXLINE(  27)							int r_x3 = ::Std_obj::_hx_int((dx1 - ((Float)6.)));
HXDLIN(  27)							int r_y3 = ::Std_obj::_hx_int((dy1 - ((Float)6.)));
HXDLIN(  27)							int r_w3 = 12;
HXDLIN(  27)							int r_h3 = 12;
HXDLIN(  27)							int xmax3 = ((r_x3 + r_w3) + 1);
HXDLIN(  27)							int ymax3 = ((r_y3 + r_h3) + 1);
HXDLIN(  27)							int ii_min30 = r_x3;
HXDLIN(  27)							int ii_max30 = xmax3;
HXDLIN(  27)							int xRange__start3 = ii_min30;
HXDLIN(  27)							int xRange__max3 = ii_max30;
HXDLIN(  27)							int ii_min31 = r_y3;
HXDLIN(  27)							int ii_max31 = ymax3;
HXDLIN(  27)							int yRange__start3 = ii_min31;
HXDLIN(  27)							int yRange__max3 = ii_max31;
HXDLIN(  27)							int range_x3 = xRange__start3;
HXDLIN(  27)							int range_y3 = (yRange__start3 - 1);
HXDLIN(  27)							int range_xReset3 = range_x3;
HXDLIN(  27)							int range_yReset3 = range_y3;
HXDLIN(  27)							int range_xMax3 = (xRange__max3 - 2);
HXDLIN(  27)							int range_yMax3 = (yRange__max3 - 2);
HXDLIN(  27)							int _this_min3 = 0;
HXDLIN(  27)							int _this_max3 = ::Std_obj::_hx_int(( (Float)(((xRange__max3 - xRange__start3) * (yRange__max3 - yRange__start3))) ));
HXDLIN(  27)							while((_this_min3 < _this_max3)){
HXLINE(  27)								_this_min3 = (_this_min3 + 1);
HXDLIN(  27)								int i34 = (_this_min3 - 1);
HXDLIN(  27)								if ((range_y3 > range_yMax3)) {
HXLINE(  27)									range_y3 = range_yReset3;
HXDLIN(  27)									range_x3 = (range_x3 + 1);
            								}
HXDLIN(  27)								range_y3 = (range_y3 + 1);
HXDLIN(  27)								int i35 = i34;
HXDLIN(  27)								{
HXLINE(  27)									int x35 = range_x3;
HXDLIN(  27)									int y35 = range_y3;
HXDLIN(  27)									int c9 = colorD1;
HXDLIN(  27)									bool _hx_tmp103;
HXDLIN(  27)									if ((((c9 >> 24) & 255) < 254)) {
HXLINE(  27)										_hx_tmp103 = this136->transparent;
            									}
            									else {
HXLINE(  27)										_hx_tmp103 = false;
            									}
HXDLIN(  27)									if (_hx_tmp103) {
HXLINE(  27)										int location9;
HXDLIN(  27)										if (this136->useVirtualPos) {
HXLINE(  27)											location9 = ::Std_obj::_hx_int(((((( (Float)(y35) ) - this136->virtualY) * ( (Float)(this136->width) )) + x35) - this136->virtualX));
            										}
            										else {
HXLINE(  27)											location9 = ::Std_obj::_hx_int(( (Float)(((y35 * this136->width) + x35)) ));
            										}
HXDLIN(  27)										int this137 = ::iterMagic::Iimg_obj::get(this136->image,location9);
HXDLIN(  27)										int this138;
HXDLIN(  27)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)											this138 = ((((((this137 >> 24) & 255) << 24) | ((this137 & 255) << 16)) | (((this137 >> 8) & 255) << 8)) | ((this137 >> 16) & 255));
            										}
            										else {
HXLINE(  27)											this138 = this137;
            										}
HXDLIN(  27)										Float a114;
HXDLIN(  27)										int this139 = ((this138 >> 24) & 255);
HXDLIN(  27)										if ((this139 == 0)) {
HXLINE(  27)											a114 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											a114 = (( (Float)(this139) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float r110;
HXDLIN(  27)										int this140 = ((this138 >> 16) & 255);
HXDLIN(  27)										if ((this140 == 0)) {
HXLINE(  27)											r110 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											r110 = (( (Float)(this140) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float g110;
HXDLIN(  27)										int this141 = ((this138 >> 8) & 255);
HXDLIN(  27)										if ((this141 == 0)) {
HXLINE(  27)											g110 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											g110 = (( (Float)(this141) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float b113;
HXDLIN(  27)										int this142 = (this138 & 255);
HXDLIN(  27)										if ((this142 == 0)) {
HXLINE(  27)											b113 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											b113 = (( (Float)(this142) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float a213;
HXDLIN(  27)										int this143 = ((colorD1 >> 24) & 255);
HXDLIN(  27)										if ((this143 == 0)) {
HXLINE(  27)											a213 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											a213 = (( (Float)(this143) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float r29;
HXDLIN(  27)										int this144 = ((colorD1 >> 16) & 255);
HXDLIN(  27)										if ((this144 == 0)) {
HXLINE(  27)											r29 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											r29 = (( (Float)(this144) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float g29;
HXDLIN(  27)										int this145 = ((colorD1 >> 8) & 255);
HXDLIN(  27)										if ((this145 == 0)) {
HXLINE(  27)											g29 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											g29 = (( (Float)(this145) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float b211;
HXDLIN(  27)										int this146 = (colorD1 & 255);
HXDLIN(  27)										if ((this146 == 0)) {
HXLINE(  27)											b211 = ((Float)0.);
            										}
            										else {
HXLINE(  27)											b211 = (( (Float)(this146) ) / ( (Float)(255) ));
            										}
HXDLIN(  27)										Float a311 = (a114 * (( (Float)(1) ) - a213));
HXDLIN(  27)										int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a311) + (r29 * a213))));
HXDLIN(  27)										int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a311) + (g29 * a213))));
HXDLIN(  27)										int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a311) + (b211 * a213))));
HXDLIN(  27)										int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a213)));
HXDLIN(  27)										int blended9 = ((((a42 << 24) | (r30 << 16)) | (g30 << 8)) | b31);
HXDLIN(  27)										{
HXLINE(  27)											int _hx_tmp104;
HXDLIN(  27)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)												_hx_tmp104 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            											}
            											else {
HXLINE(  27)												_hx_tmp104 = blended9;
            											}
HXDLIN(  27)											::iterMagic::Iimg_obj::set(this136->image,location9,_hx_tmp104);
            										}
            									}
            									else {
HXLINE(  27)										::Dynamic this147 = this136->image;
HXDLIN(  27)										int index3;
HXDLIN(  27)										if (this136->useVirtualPos) {
HXLINE(  27)											index3 = ::Std_obj::_hx_int(((((( (Float)(y35) ) - this136->virtualY) * ( (Float)(this136->width) )) + x35) - this136->virtualX));
            										}
            										else {
HXLINE(  27)											index3 = ::Std_obj::_hx_int(( (Float)(((y35 * this136->width) + x35)) ));
            										}
HXDLIN(  27)										int _hx_tmp105;
HXDLIN(  27)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)											_hx_tmp105 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            										}
            										else {
HXLINE(  27)											_hx_tmp105 = c9;
            										}
HXDLIN(  27)										::iterMagic::Iimg_obj::set(this147,index3,_hx_tmp105);
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  27)				{
HXLINE(  27)					{
HXLINE(  27)						bool hasUndo = false;
HXDLIN(  27)						int aA2 = ((colorB1 >> 24) & 255);
HXDLIN(  27)						int rA2 = ((colorB1 >> 16) & 255);
HXDLIN(  27)						int gA2 = ((colorB1 >> 8) & 255);
HXDLIN(  27)						int bA2 = (colorB1 & 255);
HXDLIN(  27)						int aB2 = ((colorA1 >> 24) & 255);
HXDLIN(  27)						int rB2 = ((colorA1 >> 16) & 255);
HXDLIN(  27)						int gB2 = ((colorA1 >> 8) & 255);
HXDLIN(  27)						int bB2 = (colorA1 & 255);
HXDLIN(  27)						int aC2 = ((colorD1 >> 24) & 255);
HXDLIN(  27)						int rC2 = ((colorD1 >> 16) & 255);
HXDLIN(  27)						int gC2 = ((colorD1 >> 8) & 255);
HXDLIN(  27)						int bC2 = (colorD1 & 255);
HXDLIN(  27)						Float bcx = (bx4 - dx1);
HXDLIN(  27)						Float bcy = (by4 - dy1);
HXDLIN(  27)						Float acx = (ax8 - dx1);
HXDLIN(  27)						Float acy = (ay8 - dy1);
HXDLIN(  27)						Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  27)						Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  27)						Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  27)						Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  27)						 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  27)						if ((ax8 > bx4)) {
HXLINE(  27)							if ((ax8 > dx1)) {
HXLINE(  27)								int min12;
HXDLIN(  27)								if ((bx4 > dx1)) {
HXLINE(  27)									min12 = ::Math_obj::floor(dx1);
            								}
            								else {
HXLINE(  27)									min12 = ::Math_obj::floor(bx4);
            								}
HXDLIN(  27)								int ii_min32 = min12;
HXDLIN(  27)								int ii_max32 = ::Math_obj::ceil(ax8);
HXDLIN(  27)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            							}
            							else {
HXLINE(  27)								int ii_min33 = ::Math_obj::floor(bx4);
HXDLIN(  27)								int ii_max33 = ::Math_obj::ceil(dx1);
HXDLIN(  27)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            							}
            						}
            						else {
HXLINE(  27)							if ((bx4 > dx1)) {
HXLINE(  27)								int min13;
HXDLIN(  27)								if ((ax8 > dx1)) {
HXLINE(  27)									min13 = ::Math_obj::floor(dx1);
            								}
            								else {
HXLINE(  27)									min13 = ::Math_obj::ceil(ax8);
            								}
HXDLIN(  27)								int ii_min34 = min13;
HXDLIN(  27)								int ii_max34 = ::Math_obj::ceil(bx4);
HXDLIN(  27)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            							}
            							else {
HXLINE(  27)								int ii_min35 = ::Math_obj::floor(ax8);
HXDLIN(  27)								int ii_max35 = ::Math_obj::ceil(dx1);
HXDLIN(  27)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            							}
            						}
HXDLIN(  27)						 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  27)						if ((ay8 > by4)) {
HXLINE(  27)							if ((ay8 > dy1)) {
HXLINE(  27)								int min14;
HXDLIN(  27)								if ((by4 > dy1)) {
HXLINE(  27)									min14 = ::Math_obj::floor(dy1);
            								}
            								else {
HXLINE(  27)									min14 = ::Math_obj::floor(by4);
            								}
HXDLIN(  27)								int ii_min36 = min14;
HXDLIN(  27)								int ii_max36 = ::Math_obj::ceil(ay8);
HXDLIN(  27)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            							}
            							else {
HXLINE(  27)								int ii_min37 = ::Math_obj::floor(by4);
HXDLIN(  27)								int ii_max37 = ::Math_obj::ceil(dy1);
HXDLIN(  27)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            							}
            						}
            						else {
HXLINE(  27)							if ((by4 > dy1)) {
HXLINE(  27)								int min15;
HXDLIN(  27)								if ((ay8 > dy1)) {
HXLINE(  27)									min15 = ::Math_obj::floor(dy1);
            								}
            								else {
HXLINE(  27)									min15 = ::Math_obj::ceil(ay8);
            								}
HXDLIN(  27)								int ii_min38 = min15;
HXDLIN(  27)								int ii_max38 = ::Math_obj::ceil(by4);
HXDLIN(  27)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            							}
            							else {
HXLINE(  27)								int ii_min39 = ::Math_obj::floor(ay8);
HXDLIN(  27)								int ii_max39 = ::Math_obj::ceil(dy1);
HXDLIN(  27)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            							}
            						}
HXDLIN(  27)						 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  27)						if (hasUndo) {
HXLINE(  27)							int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  27)							int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  27)							 ::Dynamic imageType = null();
HXDLIN(  27)							 ::pi_xy::ImageStruct this148 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  27)							if (::hx::IsNull( imageType )) {
HXLINE(  54)								imageType = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  27)							::Dynamic undoImage1;
HXDLIN(  27)							switch((int)(( (int)(imageType) ))){
            								case (int)0: {
HXLINE(  27)									 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::BytesImg b32 = byt;
HXDLIN(  27)									{
HXLINE(  27)										b32->width = width;
HXDLIN(  27)										b32->height = height;
HXDLIN(  27)										b32->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  27)										b32->data = ::haxe::io::Bytes_obj::alloc((b32->length * 4));
HXDLIN(  27)										{
HXLINE(  27)											int len = b32->length;
HXDLIN(  27)											int w = 0;
HXDLIN(  27)											{
HXLINE(  27)												int _g = 0;
HXDLIN(  27)												int _g1 = b32->height;
HXDLIN(  27)												while((_g < _g1)){
HXLINE(  27)													_g = (_g + 1);
HXDLIN(  27)													int y36 = (_g - 1);
HXDLIN(  27)													{
HXLINE(  27)														int _g2 = 0;
HXDLIN(  27)														int _g3 = b32->width;
HXDLIN(  27)														while((_g2 < _g3)){
HXLINE(  27)															_g2 = (_g2 + 1);
HXDLIN(  27)															int x36 = (_g2 - 1);
HXDLIN(  27)															{
HXLINE(  27)																w = (w + 1);
HXDLIN(  27)																b32->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  27)															{
HXLINE(  27)																w = (w + 1);
HXDLIN(  27)																b32->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  27)															{
HXLINE(  27)																w = (w + 1);
HXDLIN(  27)																b32->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  27)															{
HXLINE(  27)																w = (w + 1);
HXDLIN(  27)																b32->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  27)									undoImage1 = b32;
            								}
            								break;
            								case (int)1: {
HXLINE(  27)									 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::ArrIntImg a43 = arrI;
HXDLIN(  27)									{
HXLINE(  27)										a43->width = width;
HXDLIN(  27)										a43->height = height;
HXDLIN(  27)										a43->data = ::Array_obj< int >::__new(0);
HXDLIN(  27)										a43->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  27)										{
HXLINE(  27)											int _g4 = 0;
HXDLIN(  27)											int _g5 = a43->length;
HXDLIN(  27)											while((_g4 < _g5)){
HXLINE(  27)												_g4 = (_g4 + 1);
HXDLIN(  27)												int i36 = (_g4 - 1);
HXDLIN(  27)												a43->data[i36] = 0;
            											}
            										}
            									}
HXDLIN(  27)									undoImage1 = a43;
            								}
            								break;
            								case (int)2: {
HXLINE(  27)									 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::U32ArrImg b33 = u32a;
HXDLIN(  27)									{
HXLINE(  27)										b33->width = width;
HXDLIN(  27)										b33->height = height;
HXDLIN(  27)										b33->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  27)										int size = (b33->length * 4);
HXDLIN(  27)										b33->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  27)										{
HXLINE(  27)											int _g6 = 0;
HXDLIN(  27)											int _g7 = b33->length;
HXDLIN(  27)											while((_g6 < _g7)){
HXLINE(  27)												_g6 = (_g6 + 1);
HXDLIN(  27)												int i37 = (_g6 - 1);
HXDLIN(  27)												{
HXLINE(  27)													 ::haxe::io::ArrayBufferViewImpl this149 = b33->data;
HXDLIN(  27)													bool undoImage2;
HXDLIN(  27)													if ((i37 >= 0)) {
HXLINE(  27)														undoImage2 = (i37 < (this149->byteLength >> 2));
            													}
            													else {
HXLINE(  27)														undoImage2 = false;
            													}
HXDLIN(  27)													if (undoImage2) {
HXLINE(  27)														 ::haxe::io::Bytes _this = this149->bytes;
HXDLIN(  27)														int pos = ((i37 << 2) + this149->byteOffset);
HXDLIN(  27)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  27)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  27)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  27)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  27)									undoImage1 = b33;
            								}
            								break;
            								case (int)3: {
HXLINE(  27)									 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::VecIntImg v9 = vec;
HXDLIN(  27)									{
HXLINE(  27)										v9->width = width;
HXDLIN(  27)										v9->height = height;
HXDLIN(  27)										v9->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  27)										v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN(  27)										{
HXLINE(  27)											int _g8 = 0;
HXDLIN(  27)											int _g9 = v9->length;
HXDLIN(  27)											while((_g8 < _g9)){
HXLINE(  27)												_g8 = (_g8 + 1);
HXDLIN(  27)												int i38 = (_g8 - 1);
HXDLIN(  27)												v9->data->__unsafe_set(i38,0);
            											}
            										}
            									}
HXDLIN(  27)									undoImage1 = v9;
            								}
            								break;
            								case (int)4: {
HXLINE(  27)									 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::StackIntImg b34 = sInt;
HXDLIN(  27)									{
HXLINE(  27)										b34->width = width;
HXDLIN(  27)										b34->height = height;
HXDLIN(  27)										b34->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  27)										b34->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  27)										{
HXLINE(  27)											int len1 = b34->length;
HXDLIN(  27)											 ::haxe::ds::GenericStack_Int d = b34->data;
HXDLIN(  27)											if (::hx::IsNull( d->head )) {
HXLINE(  27)												int _g10 = 0;
HXDLIN(  27)												int _g11 = len1;
HXDLIN(  27)												while((_g10 < _g11)){
HXLINE(  27)													_g10 = (_g10 + 1);
HXDLIN(  27)													int i39 = (_g10 - 1);
HXDLIN(  27)													d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            												}
            											}
            											else {
HXLINE(  27)												int _g12 = 0;
HXDLIN(  27)												int _g13 = len1;
HXDLIN(  27)												while((_g12 < _g13)){
HXLINE(  27)													_g12 = (_g12 + 1);
HXDLIN(  27)													int i40 = (_g12 - 1);
HXDLIN(  27)													{
HXLINE(  27)														 ::haxe::ds::GenericCell_Int l = b34->data->head;
HXDLIN(  27)														 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  27)														{
HXLINE(  27)															int _g14 = 0;
HXDLIN(  27)															int _g15 = i40;
HXDLIN(  27)															while((_g14 < _g15)){
HXLINE(  27)																_g14 = (_g14 + 1);
HXDLIN(  27)																int i41 = (_g14 - 1);
HXLINE( 345)																prev = l;
HXLINE( 346)																l = l->next;
            															}
            														}
HXLINE(  27)														if (::hx::IsNull( prev )) {
HXLINE(  27)															b34->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  27)															l = null();
            														}
            														else {
HXLINE(  27)															prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  27)															l = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  27)									undoImage1 = b34;
            								}
            								break;
            							}
HXDLIN(  27)							this148->image = undoImage1;
HXDLIN(  27)							this148->width = width;
HXDLIN(  27)							this148->height = height;
HXDLIN(  27)							this148->imageType = ( (int)(imageType) );
HXDLIN(  27)							undoImage = this148;
HXDLIN(  27)							{
HXLINE(  27)								int rectLeft = xIter3->start;
HXDLIN(  27)								int rectTop = yIter3->start;
HXDLIN(  27)								int rectRight = xIter3->max;
HXDLIN(  27)								bool forceClear = false;
HXDLIN(  27)								{
HXLINE(  27)									int _g16 = rectTop;
HXDLIN(  27)									int _g17 = yIter3->max;
HXDLIN(  27)									while((_g16 < _g17)){
HXLINE(  27)										_g16 = (_g16 + 1);
HXDLIN(  27)										int dy2 = (_g16 - 1);
HXDLIN(  27)										{
HXLINE(  27)											int _g18 = rectLeft;
HXDLIN(  27)											int _g19 = rectRight;
HXDLIN(  27)											while((_g18 < _g19)){
HXLINE(  27)												_g18 = (_g18 + 1);
HXDLIN(  27)												int dx2 = (_g18 - 1);
HXDLIN(  27)												::Dynamic this150 = this99->image;
HXDLIN(  27)												int index4;
HXDLIN(  27)												if (this99->useVirtualPos) {
HXLINE(  27)													index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this99->virtualY) * ( (Float)(this99->width) )) + dx2) - this99->virtualX));
            												}
            												else {
HXLINE(  27)													index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * this99->width) + dx2)) ));
            												}
HXDLIN(  27)												int c10 = ::iterMagic::Iimg_obj::get(this150,index4);
HXDLIN(  27)												int col;
HXDLIN(  27)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)													col = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            												}
            												else {
HXLINE(  27)													col = c10;
            												}
HXDLIN(  27)												bool _hx_tmp106;
HXDLIN(  27)												if (this99->useMask) {
HXLINE(  27)													_hx_tmp106 = ::hx::IsNotNull( this99->mask );
            												}
            												else {
HXLINE(  27)													_hx_tmp106 = false;
            												}
HXDLIN(  27)												if (_hx_tmp106) {
HXLINE(  27)													 ::pi_xy::ImageStruct this151 = this99->mask;
HXDLIN(  27)													::Dynamic this152 = this151->image;
HXDLIN(  27)													int index5;
HXDLIN(  27)													if (this151->useVirtualPos) {
HXLINE(  27)														index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this151->virtualY) * ( (Float)(this151->width) )) + dx2) - this151->virtualX));
            													}
            													else {
HXLINE(  27)														index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this151->width) + dx2)) ));
            													}
HXDLIN(  27)													int c11 = ::iterMagic::Iimg_obj::get(this152,index5);
HXDLIN(  27)													int v10;
HXDLIN(  27)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)														v10 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            													}
            													else {
HXLINE(  27)														v10 = c11;
            													}
HXDLIN(  27)													int maskPixel = v10;
HXDLIN(  27)													int this153 = col;
HXDLIN(  27)													if ((maskPixel == 0)) {
HXLINE(  27)														col = this153;
            													}
            													else {
HXLINE(  27)														Float m0;
HXDLIN(  27)														int this154 = ((maskPixel >> 24) & 255);
HXDLIN(  27)														if ((this154 == 0)) {
HXLINE(  27)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m0 = (( (Float)(this154) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float m1;
HXDLIN(  27)														int this155 = ((maskPixel >> 16) & 255);
HXDLIN(  27)														if ((this155 == 0)) {
HXLINE(  27)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m1 = (( (Float)(this155) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float m2;
HXDLIN(  27)														int this156 = ((maskPixel >> 8) & 255);
HXDLIN(  27)														if ((this156 == 0)) {
HXLINE(  27)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m2 = (( (Float)(this156) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float m3;
HXDLIN(  27)														int this157 = (maskPixel & 255);
HXDLIN(  27)														if ((this157 == 0)) {
HXLINE(  27)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m3 = (( (Float)(this157) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this153 >> 24) & 255)) )));
HXDLIN(  27)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this153 >> 16) & 255)) )));
HXDLIN(  27)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this153 >> 8) & 255)) )));
HXDLIN(  27)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this153 & 255)) )));
HXDLIN(  27)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  27)												if ((col != 0)) {
HXLINE(  27)													int x37 = (dx2 - rectLeft);
HXDLIN(  27)													int y37 = (dy2 - rectTop);
HXDLIN(  27)													int c12 = col;
HXDLIN(  27)													bool _hx_tmp107;
HXDLIN(  27)													if ((((c12 >> 24) & 255) < 254)) {
HXLINE(  27)														_hx_tmp107 = undoImage->transparent;
            													}
            													else {
HXLINE(  27)														_hx_tmp107 = false;
            													}
HXDLIN(  27)													if (_hx_tmp107) {
HXLINE(  27)														int location10;
HXDLIN(  27)														if (undoImage->useVirtualPos) {
HXLINE(  27)															location10 = ::Std_obj::_hx_int(((((( (Float)(y37) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x37) - undoImage->virtualX));
            														}
            														else {
HXLINE(  27)															location10 = ::Std_obj::_hx_int(( (Float)(((y37 * undoImage->width) + x37)) ));
            														}
HXDLIN(  27)														int this158 = ::iterMagic::Iimg_obj::get(undoImage->image,location10);
HXDLIN(  27)														int this159;
HXDLIN(  27)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)															this159 = ((((((this158 >> 24) & 255) << 24) | ((this158 & 255) << 16)) | (((this158 >> 8) & 255) << 8)) | ((this158 >> 16) & 255));
            														}
            														else {
HXLINE(  27)															this159 = this158;
            														}
HXDLIN(  27)														Float a115;
HXDLIN(  27)														int this160 = ((this159 >> 24) & 255);
HXDLIN(  27)														if ((this160 == 0)) {
HXLINE(  27)															a115 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															a115 = (( (Float)(this160) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float r111;
HXDLIN(  27)														int this161 = ((this159 >> 16) & 255);
HXDLIN(  27)														if ((this161 == 0)) {
HXLINE(  27)															r111 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															r111 = (( (Float)(this161) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float g111;
HXDLIN(  27)														int this162 = ((this159 >> 8) & 255);
HXDLIN(  27)														if ((this162 == 0)) {
HXLINE(  27)															g111 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															g111 = (( (Float)(this162) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float b114;
HXDLIN(  27)														int this163 = (this159 & 255);
HXDLIN(  27)														if ((this163 == 0)) {
HXLINE(  27)															b114 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															b114 = (( (Float)(this163) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float a214;
HXDLIN(  27)														int this164 = ((col >> 24) & 255);
HXDLIN(  27)														if ((this164 == 0)) {
HXLINE(  27)															a214 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															a214 = (( (Float)(this164) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float r210;
HXDLIN(  27)														int this165 = ((col >> 16) & 255);
HXDLIN(  27)														if ((this165 == 0)) {
HXLINE(  27)															r210 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															r210 = (( (Float)(this165) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float g210;
HXDLIN(  27)														int this166 = ((col >> 8) & 255);
HXDLIN(  27)														if ((this166 == 0)) {
HXLINE(  27)															g210 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															g210 = (( (Float)(this166) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float b212;
HXDLIN(  27)														int this167 = (col & 255);
HXDLIN(  27)														if ((this167 == 0)) {
HXLINE(  27)															b212 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															b212 = (( (Float)(this167) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float a312 = (a115 * (( (Float)(1) ) - a214));
HXDLIN(  27)														int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a312) + (r210 * a214))));
HXDLIN(  27)														int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a312) + (g210 * a214))));
HXDLIN(  27)														int b35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a312) + (b212 * a214))));
HXDLIN(  27)														int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a214)));
HXDLIN(  27)														int blended10 = ((((a44 << 24) | (r31 << 16)) | (g31 << 8)) | b35);
HXDLIN(  27)														{
HXLINE(  27)															int _hx_tmp108;
HXDLIN(  27)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)																_hx_tmp108 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            															}
            															else {
HXLINE(  27)																_hx_tmp108 = blended10;
            															}
HXDLIN(  27)															::iterMagic::Iimg_obj::set(undoImage->image,location10,_hx_tmp108);
            														}
            													}
            													else {
HXLINE(  27)														::Dynamic this168 = undoImage->image;
HXDLIN(  27)														int index6;
HXDLIN(  27)														if (undoImage->useVirtualPos) {
HXLINE(  27)															index6 = ::Std_obj::_hx_int(((((( (Float)(y37) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x37) - undoImage->virtualX));
            														}
            														else {
HXLINE(  27)															index6 = ::Std_obj::_hx_int(( (Float)(((y37 * undoImage->width) + x37)) ));
            														}
HXDLIN(  27)														int _hx_tmp109;
HXDLIN(  27)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)															_hx_tmp109 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            														}
            														else {
HXLINE(  27)															_hx_tmp109 = c12;
            														}
HXDLIN(  27)														::iterMagic::Iimg_obj::set(this168,index6,_hx_tmp109);
            													}
            												}
            												else {
HXLINE(  27)													if (forceClear) {
HXLINE(  27)														::Dynamic this169 = undoImage->image;
HXDLIN(  27)														int x38 = (dx2 - rectLeft);
HXDLIN(  27)														int y38 = (dy2 - rectTop);
HXDLIN(  27)														int index7;
HXDLIN(  27)														if (undoImage->useVirtualPos) {
HXLINE(  27)															index7 = ::Std_obj::_hx_int(((((( (Float)(y38) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x38) - undoImage->virtualX));
            														}
            														else {
HXLINE(  27)															index7 = ::Std_obj::_hx_int(( (Float)(((y38 * undoImage->width) + x38)) ));
            														}
HXDLIN(  27)														::iterMagic::Iimg_obj::set(this169,index7,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						{
HXLINE(  27)							int _g_min4 = xIter3->start;
HXDLIN(  27)							int _g_max4 = xIter3->max;
HXDLIN(  27)							while((_g_min4 < _g_max4)){
HXLINE(  27)								_g_min4 = (_g_min4 + 1);
HXDLIN(  27)								int px3 = (_g_min4 - 1);
HXDLIN(  27)								Float pcx8 = (( (Float)(px3) ) - dx1);
HXDLIN(  27)								{
HXLINE(  27)									int _g_min5 = yIter3->start;
HXDLIN(  27)									int _g_max5 = yIter3->max;
HXDLIN(  27)									while((_g_min5 < _g_max5)){
HXLINE(  27)										_g_min5 = (_g_min5 + 1);
HXDLIN(  27)										int py3 = (_g_min5 - 1);
HXDLIN(  27)										Float pcy8 = (( (Float)(py3) ) - dy1);
HXDLIN(  27)										Float dot318 = ((pcx8 * bcx) + (pcy8 * bcy));
HXDLIN(  27)										Float dot328 = ((pcx8 * acx) + (pcy8 * acy));
HXDLIN(  27)										Float ratioA10 = (((dot22 * dot318) - (dot12 * dot328)) * denom1);
HXDLIN(  27)										Float ratioB10 = (((dot11 * dot328) - (dot12 * dot318)) * denom1);
HXDLIN(  27)										Float ratioC10 = ((((Float)1.0) - ratioB10) - ratioA10);
HXDLIN(  27)										bool _hx_tmp110;
HXDLIN(  27)										bool _hx_tmp111;
HXDLIN(  27)										if ((ratioA10 >= 0)) {
HXLINE(  27)											_hx_tmp111 = (ratioB10 >= 0);
            										}
            										else {
HXLINE(  27)											_hx_tmp111 = false;
            										}
HXDLIN(  27)										if (_hx_tmp111) {
HXLINE(  27)											_hx_tmp110 = (ratioC10 >= 0);
            										}
            										else {
HXLINE(  27)											_hx_tmp110 = false;
            										}
HXDLIN(  27)										if (_hx_tmp110) {
HXLINE(  27)											int i42 = ::Std_obj::_hx_int((((( (Float)(aA2) ) * ratioA10) + (( (Float)(aB2) ) * ratioB10)) + (( (Float)(aC2) ) * ratioC10)));
HXDLIN(  27)											if ((i42 > 255)) {
HXLINE(  24)												i42 = 255;
            											}
HXLINE(  27)											if ((i42 < 0)) {
HXLINE(  25)												i42 = 0;
            											}
HXLINE(  27)											int a45 = i42;
HXDLIN(  27)											int i43 = ::Std_obj::_hx_int((((( (Float)(rA2) ) * ratioA10) + (( (Float)(rB2) ) * ratioB10)) + (( (Float)(rC2) ) * ratioC10)));
HXDLIN(  27)											if ((i43 > 255)) {
HXLINE(  24)												i43 = 255;
            											}
HXLINE(  27)											if ((i43 < 0)) {
HXLINE(  25)												i43 = 0;
            											}
HXLINE(  27)											int r32 = i43;
HXDLIN(  27)											int i44 = ::Std_obj::_hx_int((((( (Float)(gA2) ) * ratioA10) + (( (Float)(gB2) ) * ratioB10)) + (( (Float)(gC2) ) * ratioC10)));
HXDLIN(  27)											if ((i44 > 255)) {
HXLINE(  24)												i44 = 255;
            											}
HXLINE(  27)											if ((i44 < 0)) {
HXLINE(  25)												i44 = 0;
            											}
HXLINE(  27)											int g32 = i44;
HXDLIN(  27)											int i45 = ::Std_obj::_hx_int((((( (Float)(bA2) ) * ratioA10) + (( (Float)(bB2) ) * ratioB10)) + (( (Float)(bC2) ) * ratioC10)));
HXDLIN(  27)											if ((i45 > 255)) {
HXLINE(  24)												i45 = 255;
            											}
HXLINE(  27)											if ((i45 < 0)) {
HXLINE(  25)												i45 = 0;
            											}
HXLINE(  27)											int b36 = i45;
HXDLIN(  27)											{
HXLINE(  27)												int location11;
HXDLIN(  27)												if (this99->useVirtualPos) {
HXLINE(  27)													location11 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this99->virtualY) * ( (Float)(this99->width) )) + px3) - this99->virtualX));
            												}
            												else {
HXLINE(  27)													location11 = ::Std_obj::_hx_int(( (Float)(((py3 * this99->width) + px3)) ));
            												}
HXDLIN(  27)												bool _hx_tmp112;
HXDLIN(  27)												if (this99->transparent) {
HXLINE(  27)													_hx_tmp112 = (a45 < 254);
            												}
            												else {
HXLINE(  27)													_hx_tmp112 = false;
            												}
HXDLIN(  27)												if (_hx_tmp112) {
HXLINE(  27)													int this170 = ::iterMagic::Iimg_obj::get(this99->image,location11);
HXDLIN(  27)													int old6;
HXDLIN(  27)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)														old6 = ((((((this170 >> 24) & 255) << 24) | ((this170 & 255) << 16)) | (((this170 >> 8) & 255) << 8)) | ((this170 >> 16) & 255));
            													}
            													else {
HXLINE(  27)														old6 = this170;
            													}
HXDLIN(  27)													int rhs6 = ((((a45 << 24) | (r32 << 16)) | (g32 << 8)) | b36);
HXDLIN(  27)													Float a116;
HXDLIN(  27)													int this171 = ((old6 >> 24) & 255);
HXDLIN(  27)													if ((this171 == 0)) {
HXLINE(  27)														a116 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														a116 = (( (Float)(this171) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float r112;
HXDLIN(  27)													int this172 = ((old6 >> 16) & 255);
HXDLIN(  27)													if ((this172 == 0)) {
HXLINE(  27)														r112 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														r112 = (( (Float)(this172) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float g112;
HXDLIN(  27)													int this173 = ((old6 >> 8) & 255);
HXDLIN(  27)													if ((this173 == 0)) {
HXLINE(  27)														g112 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														g112 = (( (Float)(this173) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float b115;
HXDLIN(  27)													int this174 = (old6 & 255);
HXDLIN(  27)													if ((this174 == 0)) {
HXLINE(  27)														b115 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														b115 = (( (Float)(this174) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float a215;
HXDLIN(  27)													int this175 = ((rhs6 >> 24) & 255);
HXDLIN(  27)													if ((this175 == 0)) {
HXLINE(  27)														a215 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														a215 = (( (Float)(this175) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float r211;
HXDLIN(  27)													int this176 = ((rhs6 >> 16) & 255);
HXDLIN(  27)													if ((this176 == 0)) {
HXLINE(  27)														r211 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														r211 = (( (Float)(this176) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float g211;
HXDLIN(  27)													int this177 = ((rhs6 >> 8) & 255);
HXDLIN(  27)													if ((this177 == 0)) {
HXLINE(  27)														g211 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														g211 = (( (Float)(this177) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float b213;
HXDLIN(  27)													int this178 = (rhs6 & 255);
HXDLIN(  27)													if ((this178 == 0)) {
HXLINE(  27)														b213 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														b213 = (( (Float)(this178) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float a313 = (a116 * (( (Float)(1) ) - a215));
HXDLIN(  27)													int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a313) + (r211 * a215))));
HXDLIN(  27)													int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a313) + (g211 * a215))));
HXDLIN(  27)													int b37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a313) + (b213 * a215))));
HXDLIN(  27)													int a46 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a215)));
HXDLIN(  27)													int blended11 = ((((a46 << 24) | (r33 << 16)) | (g33 << 8)) | b37);
HXDLIN(  27)													{
HXLINE(  27)														int _hx_tmp113;
HXDLIN(  27)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)															_hx_tmp113 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            														}
            														else {
HXLINE(  27)															_hx_tmp113 = blended11;
            														}
HXDLIN(  27)														::iterMagic::Iimg_obj::set(this99->image,location11,_hx_tmp113);
            													}
            												}
            												else {
HXLINE(  27)													int value6;
HXDLIN(  27)													if (this99->isLittle) {
HXLINE(  27)														value6 = ((((a45 << 24) | (b36 << 16)) | (g32 << 8)) | r32);
            													}
            													else {
HXLINE(  27)														value6 = ((((a45 << 24) | (r32 << 16)) | (g32 << 8)) | b36);
            													}
HXDLIN(  27)													::iterMagic::Iimg_obj::set(this99->image,location11,value6);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						if ((hasHit1 == false)) {
HXLINE(  27)							 ::pi_xy::algo::HitTri v11 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,ax8,ay8,bx4,by4,dx1,dy1,true);
HXDLIN(  27)							if (hasUndo) {
HXLINE(  27)								v11->undoImage = undoImage;
HXDLIN(  27)								v11->undoX = xIter3->start;
HXDLIN(  27)								v11->undoY = yIter3->start;
            							}
            						}
            					}
HXDLIN(  27)					{
HXLINE(  27)						bool hasHit2 = false;
HXDLIN(  27)						bool hasUndo1 = false;
HXDLIN(  27)						int aA3 = ((colorC1 >> 24) & 255);
HXDLIN(  27)						int rA3 = ((colorC1 >> 16) & 255);
HXDLIN(  27)						int gA3 = ((colorC1 >> 8) & 255);
HXDLIN(  27)						int bA3 = (colorC1 & 255);
HXDLIN(  27)						int aB3 = ((colorB1 >> 24) & 255);
HXDLIN(  27)						int rB3 = ((colorB1 >> 16) & 255);
HXDLIN(  27)						int gB3 = ((colorB1 >> 8) & 255);
HXDLIN(  27)						int bB3 = (colorB1 & 255);
HXDLIN(  27)						int aC3 = ((colorD1 >> 24) & 255);
HXDLIN(  27)						int rC3 = ((colorD1 >> 16) & 255);
HXDLIN(  27)						int gC3 = ((colorD1 >> 8) & 255);
HXDLIN(  27)						int bC3 = (colorD1 & 255);
HXDLIN(  27)						Float bcx1 = (cx4 - dx1);
HXDLIN(  27)						Float bcy1 = (cy4 - dy1);
HXDLIN(  27)						Float acx1 = (bx4 - dx1);
HXDLIN(  27)						Float acy1 = (by4 - dy1);
HXDLIN(  27)						Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  27)						Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  27)						Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  27)						Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  27)						 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  27)						if ((bx4 > cx4)) {
HXLINE(  27)							if ((bx4 > dx1)) {
HXLINE(  27)								int min16;
HXDLIN(  27)								if ((cx4 > dx1)) {
HXLINE(  27)									min16 = ::Math_obj::floor(dx1);
            								}
            								else {
HXLINE(  27)									min16 = ::Math_obj::floor(cx4);
            								}
HXDLIN(  27)								int ii_min40 = min16;
HXDLIN(  27)								int ii_max40 = ::Math_obj::ceil(bx4);
HXDLIN(  27)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            							}
            							else {
HXLINE(  27)								int ii_min41 = ::Math_obj::floor(cx4);
HXDLIN(  27)								int ii_max41 = ::Math_obj::ceil(dx1);
HXDLIN(  27)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            							}
            						}
            						else {
HXLINE(  27)							if ((cx4 > dx1)) {
HXLINE(  27)								int min17;
HXDLIN(  27)								if ((bx4 > dx1)) {
HXLINE(  27)									min17 = ::Math_obj::floor(dx1);
            								}
            								else {
HXLINE(  27)									min17 = ::Math_obj::ceil(bx4);
            								}
HXDLIN(  27)								int ii_min42 = min17;
HXDLIN(  27)								int ii_max42 = ::Math_obj::ceil(cx4);
HXDLIN(  27)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            							}
            							else {
HXLINE(  27)								int ii_min43 = ::Math_obj::floor(bx4);
HXDLIN(  27)								int ii_max43 = ::Math_obj::ceil(dx1);
HXDLIN(  27)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            							}
            						}
HXDLIN(  27)						 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  27)						if ((by4 > cy4)) {
HXLINE(  27)							if ((by4 > dy1)) {
HXLINE(  27)								int min18;
HXDLIN(  27)								if ((cy4 > dy1)) {
HXLINE(  27)									min18 = ::Math_obj::floor(dy1);
            								}
            								else {
HXLINE(  27)									min18 = ::Math_obj::floor(cy4);
            								}
HXDLIN(  27)								int ii_min44 = min18;
HXDLIN(  27)								int ii_max44 = ::Math_obj::ceil(by4);
HXDLIN(  27)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            							}
            							else {
HXLINE(  27)								int ii_min45 = ::Math_obj::floor(cy4);
HXDLIN(  27)								int ii_max45 = ::Math_obj::ceil(dy1);
HXDLIN(  27)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            							}
            						}
            						else {
HXLINE(  27)							if ((cy4 > dy1)) {
HXLINE(  27)								int min19;
HXDLIN(  27)								if ((by4 > dy1)) {
HXLINE(  27)									min19 = ::Math_obj::floor(dy1);
            								}
            								else {
HXLINE(  27)									min19 = ::Math_obj::ceil(by4);
            								}
HXDLIN(  27)								int ii_min46 = min19;
HXDLIN(  27)								int ii_max46 = ::Math_obj::ceil(cy4);
HXDLIN(  27)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            							}
            							else {
HXLINE(  27)								int ii_min47 = ::Math_obj::floor(by4);
HXDLIN(  27)								int ii_max47 = ::Math_obj::ceil(dy1);
HXDLIN(  27)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            							}
            						}
HXDLIN(  27)						 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  27)						if (hasUndo1) {
HXLINE(  27)							int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  27)							int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  27)							 ::Dynamic imageType1 = null();
HXDLIN(  27)							 ::pi_xy::ImageStruct this179 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  27)							if (::hx::IsNull( imageType1 )) {
HXLINE(  54)								imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  27)							::Dynamic undoImage4;
HXDLIN(  27)							switch((int)(( (int)(imageType1) ))){
            								case (int)0: {
HXLINE(  27)									 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::BytesImg b38 = byt1;
HXDLIN(  27)									{
HXLINE(  27)										b38->width = width1;
HXDLIN(  27)										b38->height = height1;
HXDLIN(  27)										b38->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  27)										b38->data = ::haxe::io::Bytes_obj::alloc((b38->length * 4));
HXDLIN(  27)										{
HXLINE(  27)											int len2 = b38->length;
HXDLIN(  27)											int w1 = 0;
HXDLIN(  27)											{
HXLINE(  27)												int _g20 = 0;
HXDLIN(  27)												int _g21 = b38->height;
HXDLIN(  27)												while((_g20 < _g21)){
HXLINE(  27)													_g20 = (_g20 + 1);
HXDLIN(  27)													int y39 = (_g20 - 1);
HXDLIN(  27)													{
HXLINE(  27)														int _g22 = 0;
HXDLIN(  27)														int _g23 = b38->width;
HXDLIN(  27)														while((_g22 < _g23)){
HXLINE(  27)															_g22 = (_g22 + 1);
HXDLIN(  27)															int x39 = (_g22 - 1);
HXDLIN(  27)															{
HXLINE(  27)																w1 = (w1 + 1);
HXDLIN(  27)																b38->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  27)															{
HXLINE(  27)																w1 = (w1 + 1);
HXDLIN(  27)																b38->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  27)															{
HXLINE(  27)																w1 = (w1 + 1);
HXDLIN(  27)																b38->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  27)															{
HXLINE(  27)																w1 = (w1 + 1);
HXDLIN(  27)																b38->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  27)									undoImage4 = b38;
            								}
            								break;
            								case (int)1: {
HXLINE(  27)									 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::ArrIntImg a47 = arrI1;
HXDLIN(  27)									{
HXLINE(  27)										a47->width = width1;
HXDLIN(  27)										a47->height = height1;
HXDLIN(  27)										a47->data = ::Array_obj< int >::__new(0);
HXDLIN(  27)										a47->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  27)										{
HXLINE(  27)											int _g24 = 0;
HXDLIN(  27)											int _g25 = a47->length;
HXDLIN(  27)											while((_g24 < _g25)){
HXLINE(  27)												_g24 = (_g24 + 1);
HXDLIN(  27)												int i46 = (_g24 - 1);
HXDLIN(  27)												a47->data[i46] = 0;
            											}
            										}
            									}
HXDLIN(  27)									undoImage4 = a47;
            								}
            								break;
            								case (int)2: {
HXLINE(  27)									 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::U32ArrImg b39 = u32a1;
HXDLIN(  27)									{
HXLINE(  27)										b39->width = width1;
HXDLIN(  27)										b39->height = height1;
HXDLIN(  27)										b39->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  27)										int size1 = (b39->length * 4);
HXDLIN(  27)										b39->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  27)										{
HXLINE(  27)											int _g26 = 0;
HXDLIN(  27)											int _g27 = b39->length;
HXDLIN(  27)											while((_g26 < _g27)){
HXLINE(  27)												_g26 = (_g26 + 1);
HXDLIN(  27)												int i47 = (_g26 - 1);
HXDLIN(  27)												{
HXLINE(  27)													 ::haxe::io::ArrayBufferViewImpl this180 = b39->data;
HXDLIN(  27)													bool undoImage5;
HXDLIN(  27)													if ((i47 >= 0)) {
HXLINE(  27)														undoImage5 = (i47 < (this180->byteLength >> 2));
            													}
            													else {
HXLINE(  27)														undoImage5 = false;
            													}
HXDLIN(  27)													if (undoImage5) {
HXLINE(  27)														 ::haxe::io::Bytes _this1 = this180->bytes;
HXDLIN(  27)														int pos1 = ((i47 << 2) + this180->byteOffset);
HXDLIN(  27)														_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  27)														_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  27)														_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  27)														_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  27)									undoImage4 = b39;
            								}
            								break;
            								case (int)3: {
HXLINE(  27)									 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::VecIntImg v12 = vec1;
HXDLIN(  27)									{
HXLINE(  27)										v12->width = width1;
HXDLIN(  27)										v12->height = height1;
HXDLIN(  27)										v12->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  27)										v12->data = ::Array_obj< int >::__new(v12->length);
HXDLIN(  27)										{
HXLINE(  27)											int _g28 = 0;
HXDLIN(  27)											int _g29 = v12->length;
HXDLIN(  27)											while((_g28 < _g29)){
HXLINE(  27)												_g28 = (_g28 + 1);
HXDLIN(  27)												int i48 = (_g28 - 1);
HXDLIN(  27)												v12->data->__unsafe_set(i48,0);
            											}
            										}
            									}
HXDLIN(  27)									undoImage4 = v12;
            								}
            								break;
            								case (int)4: {
HXLINE(  27)									 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  27)									 ::iterMagic::StackIntImg b40 = sInt1;
HXDLIN(  27)									{
HXLINE(  27)										b40->width = width1;
HXDLIN(  27)										b40->height = height1;
HXDLIN(  27)										b40->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  27)										b40->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  27)										{
HXLINE(  27)											int len3 = b40->length;
HXDLIN(  27)											 ::haxe::ds::GenericStack_Int d1 = b40->data;
HXDLIN(  27)											if (::hx::IsNull( d1->head )) {
HXLINE(  27)												int _g30 = 0;
HXDLIN(  27)												int _g31 = len3;
HXDLIN(  27)												while((_g30 < _g31)){
HXLINE(  27)													_g30 = (_g30 + 1);
HXDLIN(  27)													int i49 = (_g30 - 1);
HXDLIN(  27)													d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            												}
            											}
            											else {
HXLINE(  27)												int _g32 = 0;
HXDLIN(  27)												int _g33 = len3;
HXDLIN(  27)												while((_g32 < _g33)){
HXLINE(  27)													_g32 = (_g32 + 1);
HXDLIN(  27)													int i50 = (_g32 - 1);
HXDLIN(  27)													{
HXLINE(  27)														 ::haxe::ds::GenericCell_Int l1 = b40->data->head;
HXDLIN(  27)														 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  27)														{
HXLINE(  27)															int _g34 = 0;
HXDLIN(  27)															int _g35 = i50;
HXDLIN(  27)															while((_g34 < _g35)){
HXLINE(  27)																_g34 = (_g34 + 1);
HXDLIN(  27)																int i51 = (_g34 - 1);
HXLINE( 345)																prev1 = l1;
HXLINE( 346)																l1 = l1->next;
            															}
            														}
HXLINE(  27)														if (::hx::IsNull( prev1 )) {
HXLINE(  27)															b40->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  27)															l1 = null();
            														}
            														else {
HXLINE(  27)															prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  27)															l1 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  27)									undoImage4 = b40;
            								}
            								break;
            							}
HXDLIN(  27)							this179->image = undoImage4;
HXDLIN(  27)							this179->width = width1;
HXDLIN(  27)							this179->height = height1;
HXDLIN(  27)							this179->imageType = ( (int)(imageType1) );
HXDLIN(  27)							undoImage3 = this179;
HXDLIN(  27)							{
HXLINE(  27)								int rectLeft1 = xIter31->start;
HXDLIN(  27)								int rectTop1 = yIter31->start;
HXDLIN(  27)								int rectRight1 = xIter31->max;
HXDLIN(  27)								bool forceClear1 = false;
HXDLIN(  27)								{
HXLINE(  27)									int _g36 = rectTop1;
HXDLIN(  27)									int _g37 = yIter31->max;
HXDLIN(  27)									while((_g36 < _g37)){
HXLINE(  27)										_g36 = (_g36 + 1);
HXDLIN(  27)										int dy3 = (_g36 - 1);
HXDLIN(  27)										{
HXLINE(  27)											int _g38 = rectLeft1;
HXDLIN(  27)											int _g39 = rectRight1;
HXDLIN(  27)											while((_g38 < _g39)){
HXLINE(  27)												_g38 = (_g38 + 1);
HXDLIN(  27)												int dx3 = (_g38 - 1);
HXDLIN(  27)												::Dynamic this181 = this99->image;
HXDLIN(  27)												int index8;
HXDLIN(  27)												if (this99->useVirtualPos) {
HXLINE(  27)													index8 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this99->virtualY) * ( (Float)(this99->width) )) + dx3) - this99->virtualX));
            												}
            												else {
HXLINE(  27)													index8 = ::Std_obj::_hx_int(( (Float)(((dy3 * this99->width) + dx3)) ));
            												}
HXDLIN(  27)												int c13 = ::iterMagic::Iimg_obj::get(this181,index8);
HXDLIN(  27)												int col1;
HXDLIN(  27)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)													col1 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            												}
            												else {
HXLINE(  27)													col1 = c13;
            												}
HXDLIN(  27)												bool _hx_tmp114;
HXDLIN(  27)												if (this99->useMask) {
HXLINE(  27)													_hx_tmp114 = ::hx::IsNotNull( this99->mask );
            												}
            												else {
HXLINE(  27)													_hx_tmp114 = false;
            												}
HXDLIN(  27)												if (_hx_tmp114) {
HXLINE(  27)													 ::pi_xy::ImageStruct this182 = this99->mask;
HXDLIN(  27)													::Dynamic this183 = this182->image;
HXDLIN(  27)													int index9;
HXDLIN(  27)													if (this182->useVirtualPos) {
HXLINE(  27)														index9 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this182->virtualY) * ( (Float)(this182->width) )) + dx3) - this182->virtualX));
            													}
            													else {
HXLINE(  27)														index9 = ::Std_obj::_hx_int(( (Float)(((dy3 * this182->width) + dx3)) ));
            													}
HXDLIN(  27)													int c14 = ::iterMagic::Iimg_obj::get(this183,index9);
HXDLIN(  27)													int v13;
HXDLIN(  27)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)														v13 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            													}
            													else {
HXLINE(  27)														v13 = c14;
            													}
HXDLIN(  27)													int maskPixel1 = v13;
HXDLIN(  27)													int this184 = col1;
HXDLIN(  27)													if ((maskPixel1 == 0)) {
HXLINE(  27)														col1 = this184;
            													}
            													else {
HXLINE(  27)														Float m01;
HXDLIN(  27)														int this185 = ((maskPixel1 >> 24) & 255);
HXDLIN(  27)														if ((this185 == 0)) {
HXLINE(  27)															m01 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m01 = (( (Float)(this185) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float m11;
HXDLIN(  27)														int this186 = ((maskPixel1 >> 16) & 255);
HXDLIN(  27)														if ((this186 == 0)) {
HXLINE(  27)															m11 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m11 = (( (Float)(this186) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float m21;
HXDLIN(  27)														int this187 = ((maskPixel1 >> 8) & 255);
HXDLIN(  27)														if ((this187 == 0)) {
HXLINE(  27)															m21 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m21 = (( (Float)(this187) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float m31;
HXDLIN(  27)														int this188 = (maskPixel1 & 255);
HXDLIN(  27)														if ((this188 == 0)) {
HXLINE(  27)															m31 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															m31 = (( (Float)(this188) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this184 >> 24) & 255)) )));
HXDLIN(  27)														int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this184 >> 16) & 255)) )));
HXDLIN(  27)														int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this184 >> 8) & 255)) )));
HXDLIN(  27)														int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this184 & 255)) )));
HXDLIN(  27)														col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  27)												if ((col1 != 0)) {
HXLINE(  27)													int x40 = (dx3 - rectLeft1);
HXDLIN(  27)													int y40 = (dy3 - rectTop1);
HXDLIN(  27)													int c15 = col1;
HXDLIN(  27)													bool _hx_tmp115;
HXDLIN(  27)													if ((((c15 >> 24) & 255) < 254)) {
HXLINE(  27)														_hx_tmp115 = undoImage3->transparent;
            													}
            													else {
HXLINE(  27)														_hx_tmp115 = false;
            													}
HXDLIN(  27)													if (_hx_tmp115) {
HXLINE(  27)														int location12;
HXDLIN(  27)														if (undoImage3->useVirtualPos) {
HXLINE(  27)															location12 = ::Std_obj::_hx_int(((((( (Float)(y40) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x40) - undoImage3->virtualX));
            														}
            														else {
HXLINE(  27)															location12 = ::Std_obj::_hx_int(( (Float)(((y40 * undoImage3->width) + x40)) ));
            														}
HXDLIN(  27)														int this189 = ::iterMagic::Iimg_obj::get(undoImage3->image,location12);
HXDLIN(  27)														int this190;
HXDLIN(  27)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)															this190 = ((((((this189 >> 24) & 255) << 24) | ((this189 & 255) << 16)) | (((this189 >> 8) & 255) << 8)) | ((this189 >> 16) & 255));
            														}
            														else {
HXLINE(  27)															this190 = this189;
            														}
HXDLIN(  27)														Float a117;
HXDLIN(  27)														int this191 = ((this190 >> 24) & 255);
HXDLIN(  27)														if ((this191 == 0)) {
HXLINE(  27)															a117 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															a117 = (( (Float)(this191) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float r113;
HXDLIN(  27)														int this192 = ((this190 >> 16) & 255);
HXDLIN(  27)														if ((this192 == 0)) {
HXLINE(  27)															r113 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															r113 = (( (Float)(this192) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float g113;
HXDLIN(  27)														int this193 = ((this190 >> 8) & 255);
HXDLIN(  27)														if ((this193 == 0)) {
HXLINE(  27)															g113 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															g113 = (( (Float)(this193) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float b116;
HXDLIN(  27)														int this194 = (this190 & 255);
HXDLIN(  27)														if ((this194 == 0)) {
HXLINE(  27)															b116 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															b116 = (( (Float)(this194) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float a216;
HXDLIN(  27)														int this195 = ((col1 >> 24) & 255);
HXDLIN(  27)														if ((this195 == 0)) {
HXLINE(  27)															a216 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															a216 = (( (Float)(this195) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float r212;
HXDLIN(  27)														int this196 = ((col1 >> 16) & 255);
HXDLIN(  27)														if ((this196 == 0)) {
HXLINE(  27)															r212 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															r212 = (( (Float)(this196) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float g212;
HXDLIN(  27)														int this197 = ((col1 >> 8) & 255);
HXDLIN(  27)														if ((this197 == 0)) {
HXLINE(  27)															g212 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															g212 = (( (Float)(this197) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float b214;
HXDLIN(  27)														int this198 = (col1 & 255);
HXDLIN(  27)														if ((this198 == 0)) {
HXLINE(  27)															b214 = ((Float)0.);
            														}
            														else {
HXLINE(  27)															b214 = (( (Float)(this198) ) / ( (Float)(255) ));
            														}
HXDLIN(  27)														Float a314 = (a117 * (( (Float)(1) ) - a216));
HXDLIN(  27)														int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a314) + (r212 * a216))));
HXDLIN(  27)														int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a314) + (g212 * a216))));
HXDLIN(  27)														int b41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a314) + (b214 * a216))));
HXDLIN(  27)														int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a216)));
HXDLIN(  27)														int blended12 = ((((a48 << 24) | (r34 << 16)) | (g34 << 8)) | b41);
HXDLIN(  27)														{
HXLINE(  27)															int _hx_tmp116;
HXDLIN(  27)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)																_hx_tmp116 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            															}
            															else {
HXLINE(  27)																_hx_tmp116 = blended12;
            															}
HXDLIN(  27)															::iterMagic::Iimg_obj::set(undoImage3->image,location12,_hx_tmp116);
            														}
            													}
            													else {
HXLINE(  27)														::Dynamic this199 = undoImage3->image;
HXDLIN(  27)														int index10;
HXDLIN(  27)														if (undoImage3->useVirtualPos) {
HXLINE(  27)															index10 = ::Std_obj::_hx_int(((((( (Float)(y40) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x40) - undoImage3->virtualX));
            														}
            														else {
HXLINE(  27)															index10 = ::Std_obj::_hx_int(( (Float)(((y40 * undoImage3->width) + x40)) ));
            														}
HXDLIN(  27)														int _hx_tmp117;
HXDLIN(  27)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)															_hx_tmp117 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            														}
            														else {
HXLINE(  27)															_hx_tmp117 = c15;
            														}
HXDLIN(  27)														::iterMagic::Iimg_obj::set(this199,index10,_hx_tmp117);
            													}
            												}
            												else {
HXLINE(  27)													if (forceClear1) {
HXLINE(  27)														::Dynamic this200 = undoImage3->image;
HXDLIN(  27)														int x44 = (dx3 - rectLeft1);
HXDLIN(  27)														int y44 = (dy3 - rectTop1);
HXDLIN(  27)														int index11;
HXDLIN(  27)														if (undoImage3->useVirtualPos) {
HXLINE(  27)															index11 = ::Std_obj::_hx_int(((((( (Float)(y44) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x44) - undoImage3->virtualX));
            														}
            														else {
HXLINE(  27)															index11 = ::Std_obj::_hx_int(( (Float)(((y44 * undoImage3->width) + x44)) ));
            														}
HXDLIN(  27)														::iterMagic::Iimg_obj::set(this200,index11,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						{
HXLINE(  27)							int _g_min6 = xIter31->start;
HXDLIN(  27)							int _g_max6 = xIter31->max;
HXDLIN(  27)							while((_g_min6 < _g_max6)){
HXLINE(  27)								_g_min6 = (_g_min6 + 1);
HXDLIN(  27)								int px4 = (_g_min6 - 1);
HXDLIN(  27)								Float pcx9 = (( (Float)(px4) ) - dx1);
HXDLIN(  27)								{
HXLINE(  27)									int _g_min7 = yIter31->start;
HXDLIN(  27)									int _g_max7 = yIter31->max;
HXDLIN(  27)									while((_g_min7 < _g_max7)){
HXLINE(  27)										_g_min7 = (_g_min7 + 1);
HXDLIN(  27)										int py4 = (_g_min7 - 1);
HXDLIN(  27)										Float pcy9 = (( (Float)(py4) ) - dy1);
HXDLIN(  27)										Float dot319 = ((pcx9 * bcx1) + (pcy9 * bcy1));
HXDLIN(  27)										Float dot329 = ((pcx9 * acx1) + (pcy9 * acy1));
HXDLIN(  27)										Float ratioA11 = (((dot221 * dot319) - (dot121 * dot329)) * denom11);
HXDLIN(  27)										Float ratioB11 = (((dot111 * dot329) - (dot121 * dot319)) * denom11);
HXDLIN(  27)										Float ratioC11 = ((((Float)1.0) - ratioB11) - ratioA11);
HXDLIN(  27)										bool _hx_tmp118;
HXDLIN(  27)										bool _hx_tmp119;
HXDLIN(  27)										if ((ratioA11 >= 0)) {
HXLINE(  27)											_hx_tmp119 = (ratioB11 >= 0);
            										}
            										else {
HXLINE(  27)											_hx_tmp119 = false;
            										}
HXDLIN(  27)										if (_hx_tmp119) {
HXLINE(  27)											_hx_tmp118 = (ratioC11 >= 0);
            										}
            										else {
HXLINE(  27)											_hx_tmp118 = false;
            										}
HXDLIN(  27)										if (_hx_tmp118) {
HXLINE(  27)											int i52 = ::Std_obj::_hx_int((((( (Float)(aA3) ) * ratioA11) + (( (Float)(aB3) ) * ratioB11)) + (( (Float)(aC3) ) * ratioC11)));
HXDLIN(  27)											if ((i52 > 255)) {
HXLINE(  24)												i52 = 255;
            											}
HXLINE(  27)											if ((i52 < 0)) {
HXLINE(  25)												i52 = 0;
            											}
HXLINE(  27)											int a49 = i52;
HXDLIN(  27)											int i53 = ::Std_obj::_hx_int((((( (Float)(rA3) ) * ratioA11) + (( (Float)(rB3) ) * ratioB11)) + (( (Float)(rC3) ) * ratioC11)));
HXDLIN(  27)											if ((i53 > 255)) {
HXLINE(  24)												i53 = 255;
            											}
HXLINE(  27)											if ((i53 < 0)) {
HXLINE(  25)												i53 = 0;
            											}
HXLINE(  27)											int r35 = i53;
HXDLIN(  27)											int i54 = ::Std_obj::_hx_int((((( (Float)(gA3) ) * ratioA11) + (( (Float)(gB3) ) * ratioB11)) + (( (Float)(gC3) ) * ratioC11)));
HXDLIN(  27)											if ((i54 > 255)) {
HXLINE(  24)												i54 = 255;
            											}
HXLINE(  27)											if ((i54 < 0)) {
HXLINE(  25)												i54 = 0;
            											}
HXLINE(  27)											int g35 = i54;
HXDLIN(  27)											int i55 = ::Std_obj::_hx_int((((( (Float)(bA3) ) * ratioA11) + (( (Float)(bB3) ) * ratioB11)) + (( (Float)(bC3) ) * ratioC11)));
HXDLIN(  27)											if ((i55 > 255)) {
HXLINE(  24)												i55 = 255;
            											}
HXLINE(  27)											if ((i55 < 0)) {
HXLINE(  25)												i55 = 0;
            											}
HXLINE(  27)											int b42 = i55;
HXDLIN(  27)											{
HXLINE(  27)												int location13;
HXDLIN(  27)												if (this99->useVirtualPos) {
HXLINE(  27)													location13 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - this99->virtualY) * ( (Float)(this99->width) )) + px4) - this99->virtualX));
            												}
            												else {
HXLINE(  27)													location13 = ::Std_obj::_hx_int(( (Float)(((py4 * this99->width) + px4)) ));
            												}
HXDLIN(  27)												bool _hx_tmp120;
HXDLIN(  27)												if (this99->transparent) {
HXLINE(  27)													_hx_tmp120 = (a49 < 254);
            												}
            												else {
HXLINE(  27)													_hx_tmp120 = false;
            												}
HXDLIN(  27)												if (_hx_tmp120) {
HXLINE(  27)													int this201 = ::iterMagic::Iimg_obj::get(this99->image,location13);
HXDLIN(  27)													int old7;
HXDLIN(  27)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)														old7 = ((((((this201 >> 24) & 255) << 24) | ((this201 & 255) << 16)) | (((this201 >> 8) & 255) << 8)) | ((this201 >> 16) & 255));
            													}
            													else {
HXLINE(  27)														old7 = this201;
            													}
HXDLIN(  27)													int rhs7 = ((((a49 << 24) | (r35 << 16)) | (g35 << 8)) | b42);
HXDLIN(  27)													Float a118;
HXDLIN(  27)													int this202 = ((old7 >> 24) & 255);
HXDLIN(  27)													if ((this202 == 0)) {
HXLINE(  27)														a118 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														a118 = (( (Float)(this202) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float r114;
HXDLIN(  27)													int this203 = ((old7 >> 16) & 255);
HXDLIN(  27)													if ((this203 == 0)) {
HXLINE(  27)														r114 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														r114 = (( (Float)(this203) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float g114;
HXDLIN(  27)													int this204 = ((old7 >> 8) & 255);
HXDLIN(  27)													if ((this204 == 0)) {
HXLINE(  27)														g114 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														g114 = (( (Float)(this204) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float b117;
HXDLIN(  27)													int this205 = (old7 & 255);
HXDLIN(  27)													if ((this205 == 0)) {
HXLINE(  27)														b117 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														b117 = (( (Float)(this205) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float a217;
HXDLIN(  27)													int this206 = ((rhs7 >> 24) & 255);
HXDLIN(  27)													if ((this206 == 0)) {
HXLINE(  27)														a217 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														a217 = (( (Float)(this206) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float r213;
HXDLIN(  27)													int this207 = ((rhs7 >> 16) & 255);
HXDLIN(  27)													if ((this207 == 0)) {
HXLINE(  27)														r213 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														r213 = (( (Float)(this207) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float g213;
HXDLIN(  27)													int this208 = ((rhs7 >> 8) & 255);
HXDLIN(  27)													if ((this208 == 0)) {
HXLINE(  27)														g213 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														g213 = (( (Float)(this208) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float b215;
HXDLIN(  27)													int this209 = (rhs7 & 255);
HXDLIN(  27)													if ((this209 == 0)) {
HXLINE(  27)														b215 = ((Float)0.);
            													}
            													else {
HXLINE(  27)														b215 = (( (Float)(this209) ) / ( (Float)(255) ));
            													}
HXDLIN(  27)													Float a315 = (a118 * (( (Float)(1) ) - a217));
HXDLIN(  27)													int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a315) + (r213 * a217))));
HXDLIN(  27)													int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a315) + (g213 * a217))));
HXDLIN(  27)													int b43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a315) + (b215 * a217))));
HXDLIN(  27)													int a50 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a217)));
HXDLIN(  27)													int blended13 = ((((a50 << 24) | (r36 << 16)) | (g36 << 8)) | b43);
HXDLIN(  27)													{
HXLINE(  27)														int _hx_tmp121;
HXDLIN(  27)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  27)															_hx_tmp121 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            														}
            														else {
HXLINE(  27)															_hx_tmp121 = blended13;
            														}
HXDLIN(  27)														::iterMagic::Iimg_obj::set(this99->image,location13,_hx_tmp121);
            													}
            												}
            												else {
HXLINE(  27)													int value7;
HXDLIN(  27)													if (this99->isLittle) {
HXLINE(  27)														value7 = ((((a49 << 24) | (b42 << 16)) | (g35 << 8)) | r35);
            													}
            													else {
HXLINE(  27)														value7 = ((((a49 << 24) | (r35 << 16)) | (g35 << 8)) | b42);
            													}
HXDLIN(  27)													::iterMagic::Iimg_obj::set(this99->image,location13,value7);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  27)						if ((hasHit2 == false)) {
HXLINE(  27)							 ::pi_xy::algo::HitTri v14 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx4,by4,cx4,cy4,dx1,dy1,true);
HXDLIN(  27)							if (hasUndo1) {
HXLINE(  27)								v14->undoImage = undoImage3;
HXDLIN(  27)								v14->undoX = xIter31->start;
HXDLIN(  27)								v14->undoY = yIter31->start;
            							}
            						}
            					}
HXDLIN(  27)					if ((hasHit1 == true)) {
HXLINE(  27)						 ::pi_xy::algo::HitQuad v15 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax8,ay8,bx4,by4,cx4,cy4,dx1,dy1,true);
            					}
            				}
            			}
            		}
HXLINE(  30)		return pixelImage;
            	}



::hx::ObjectPtr< LineGradient_obj > LineGradient_obj::__new( ::Dynamic opacity, ::Dynamic visibility, ::Dynamic x1, ::Dynamic y1, ::Dynamic x2, ::Dynamic y2, ::Dynamic colorA, ::Dynamic colorB, ::Dynamic colorC, ::Dynamic colorD, ::Dynamic strokeWidth) {
	::hx::ObjectPtr< LineGradient_obj > __this = new LineGradient_obj();
	__this->__construct(opacity,visibility,x1,y1,x2,y2,colorA,colorB,colorC,colorD,strokeWidth);
	return __this;
}

::hx::ObjectPtr< LineGradient_obj > LineGradient_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic opacity, ::Dynamic visibility, ::Dynamic x1, ::Dynamic y1, ::Dynamic x2, ::Dynamic y2, ::Dynamic colorA, ::Dynamic colorB, ::Dynamic colorC, ::Dynamic colorD, ::Dynamic strokeWidth) {
	LineGradient_obj *__this = (LineGradient_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LineGradient_obj), true, "pi_xy.triangleGML.LineGradient"));
	*(void **)__this = LineGradient_obj::_hx_vtable;
	__this->__construct(opacity,visibility,x1,y1,x2,y2,colorA,colorB,colorC,colorD,strokeWidth);
	return __this;
}

LineGradient_obj::LineGradient_obj()
{
}

::hx::Val LineGradient_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"luxury") ) { return ::hx::Val( luxury ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LineGradient_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"luxury") ) { luxury=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LineGradient_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("luxury",0d,9d,17,dc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LineGradient_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(LineGradient_obj,luxury),HX_("luxury",0d,9d,17,dc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LineGradient_obj_sStaticStorageInfo = 0;
#endif

static ::String LineGradient_obj_sMemberFields[] = {
	HX_("luxury",0d,9d,17,dc),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class LineGradient_obj::__mClass;

void LineGradient_obj::__register()
{
	LineGradient_obj _hx_dummy;
	LineGradient_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.triangleGML.LineGradient",7b,2b,e8,3c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LineGradient_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LineGradient_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LineGradient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LineGradient_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace triangleGML
