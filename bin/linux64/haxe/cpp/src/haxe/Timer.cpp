// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_TimerPollClient
#include <haxe/TimerPollClient.h>
#endif
#ifndef INCLUDED_nme_app_Application
#include <nme/app/Application.h>
#endif
#ifndef INCLUDED_nme_app_IPollClient
#include <nme/app/IPollClient.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_102f69689d37b2bb_119_new,"haxe.Timer","new",0x4136b0cf,"haxe.Timer.new","haxe/Timer.hx",119,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_143___default_run,"haxe.Timer","__default_run",0xdc2b9b9c,"haxe.Timer.__default_run","haxe/Timer.hx",143,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_147_stop,"haxe.Timer","stop",0xd1fd70b3,"haxe.Timer.stop","haxe/Timer.hx",147,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_174_nmeCheck,"haxe.Timer","nmeCheck",0x218e40d3,"haxe.Timer.nmeCheck","haxe/Timer.hx",174,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_135_measure,"haxe.Timer","measure",0x42373f4d,"haxe.Timer.measure","haxe/Timer.hx",135,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_154_nmeGetNextWake,"haxe.Timer","nmeGetNextWake",0xd72487b8,"haxe.Timer.nmeGetNextWake","haxe/Timer.hx",154,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_186_nmeCheckTimers,"haxe.Timer","nmeCheckTimers",0xb755a241,"haxe.Timer.nmeCheckTimers","haxe/Timer.hx",186,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_209_delay,"haxe.Timer","delay",0x3ed5f1b2,"haxe.Timer.delay","haxe/Timer.hx",209,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_205_delay,"haxe.Timer","delay",0x3ed5f1b2,"haxe.Timer.delay","haxe/Timer.hx",205,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_219_stamp,"haxe.Timer","stamp",0xebba8a32,"haxe.Timer.stamp","haxe/Timer.hx",219,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_110_boot,"haxe.Timer","boot",0xc6bd04e3,"haxe.Timer.boot","haxe/Timer.hx",110,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_102f69689d37b2bb_111_boot,"haxe.Timer","boot",0xc6bd04e3,"haxe.Timer.boot","haxe/Timer.hx",111,0x1a690682)
HX_LOCAL_STACK_FRAME(_hx_pos_b8ebf77cc0558ab3_9_boot,"haxe.Timer","boot",0xc6bd04e3,"haxe.Timer.boot","nme/PrimeLoader.hx",9,0xcf416155)
namespace haxe{

void Timer_obj::__construct(Float inTimeMs){
            	HX_GC_STACKFRAME(&_hx_pos_102f69689d37b2bb_119_new)
HXLINE( 120)		if (::hx::IsNull( ::haxe::Timer_obj::sRunningTimers )) {
HXLINE( 122)			::haxe::Timer_obj::sRunningTimers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 123)			::haxe::Timer_obj::sPollClient =  ::haxe::TimerPollClient_obj::__alloc( HX_CTX );
HXLINE( 124)			::nme::app::Application_obj::addPollClient(::haxe::Timer_obj::sPollClient,null());
            		}
HXLINE( 128)		this->mTime = (inTimeMs * ((Float)0.001));
HXLINE( 129)		::haxe::Timer_obj::sRunningTimers->push(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 130)		Float _hx_tmp = ::haxe::Timer_obj::stamp();
HXDLIN( 130)		this->mFireAt = (_hx_tmp + this->mTime);
HXLINE( 131)		this->mRunning = true;
            	}

Dynamic Timer_obj::__CreateEmpty() { return new Timer_obj; }

void *Timer_obj::_hx_vtable = 0;

Dynamic Timer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Timer_obj > _hx_result = new Timer_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Timer_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x04eaa0bb;
}

HX_BEGIN_DEFAULT_FUNC(__default_run,Timer_obj)
void _hx_run(){
            	HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_143___default_run)
            	}
HX_END_LOCAL_FUNC0((void))
HX_END_DEFAULT_FUNC

void Timer_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_147_stop)
HXDLIN( 147)		this->mRunning = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,stop,(void))

void Timer_obj::nmeCheck(Float inTime){
            	HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_174_nmeCheck)
HXDLIN( 174)		if ((inTime >= this->mFireAt)) {
HXLINE( 176)			 ::haxe::Timer _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 176)			_hx_tmp->mFireAt = (_hx_tmp->mFireAt + this->mTime);
HXLINE( 177)			this->run();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Timer_obj,nmeCheck,(void))

::Array< ::Dynamic> Timer_obj::sRunningTimers;

::Dynamic Timer_obj::sPollClient;

 ::Dynamic Timer_obj::measure( ::Dynamic f, ::Dynamic pos){
            	HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_135_measure)
HXLINE( 136)		Float t0 = ::haxe::Timer_obj::stamp();
HXLINE( 137)		 ::Dynamic r = f();
HXLINE( 138)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 138)		_hx_tmp(((::haxe::Timer_obj::stamp() - t0) + HX_("s",73,00,00,00)),pos);
HXLINE( 139)		return r;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Timer_obj,measure,return )

Float Timer_obj::nmeGetNextWake(Float inDefaultWake,Float inStamp){
            	HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_154_nmeGetNextWake)
HXLINE( 155)		Float wake = inDefaultWake;
HXLINE( 156)		{
HXLINE( 156)			int _g = 0;
HXDLIN( 156)			::Array< ::Dynamic> _g1 = ::haxe::Timer_obj::sRunningTimers;
HXDLIN( 156)			while((_g < _g1->length)){
HXLINE( 156)				 ::haxe::Timer timer = _g1->__get(_g).StaticCast<  ::haxe::Timer >();
HXDLIN( 156)				_g = (_g + 1);
HXLINE( 158)				if (!(timer->mRunning)) {
HXLINE( 159)					continue;
            				}
HXLINE( 160)				Float sleep = (timer->mFireAt - inStamp);
HXLINE( 161)				if ((sleep < wake)) {
HXLINE( 163)					wake = sleep;
HXLINE( 164)					if ((wake < 0)) {
HXLINE( 165)						return ( (Float)(0) );
            					}
            				}
            			}
            		}
HXLINE( 168)		return wake;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Timer_obj,nmeGetNextWake,return )

void Timer_obj::nmeCheckTimers(Float inStamp){
            	HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_186_nmeCheckTimers)
HXDLIN( 186)		if (::hx::IsNotNull( ::haxe::Timer_obj::sRunningTimers )) {
HXLINE( 188)			int i = 0;
HXLINE( 189)			while((i < ::haxe::Timer_obj::sRunningTimers->length)){
HXLINE( 191)				 ::haxe::Timer timer = ::haxe::Timer_obj::sRunningTimers->__get(i).StaticCast<  ::haxe::Timer >();
HXLINE( 192)				if (timer->mRunning) {
HXLINE( 193)					timer->nmeCheck(inStamp);
            				}
HXLINE( 195)				if (!(timer->mRunning)) {
HXLINE( 196)					::haxe::Timer_obj::sRunningTimers->removeRange(i,1);
            				}
            				else {
HXLINE( 198)					i = (i + 1);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Timer_obj,nmeCheckTimers,(void))

 ::haxe::Timer Timer_obj::delay( ::Dynamic f,int time){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,f, ::haxe::Timer,t) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_102f69689d37b2bb_209_delay)
HXLINE( 210)			t->stop();
HXLINE( 211)			f();
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_102f69689d37b2bb_205_delay)
HXLINE( 206)		 ::haxe::Timer t =  ::haxe::Timer_obj::__alloc( HX_CTX ,( (Float)(time) ));
HXLINE( 208)		t->run =  ::Dynamic(new _hx_Closure_0(f,t));
HXLINE( 214)		return t;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Timer_obj,delay,return )

Float Timer_obj::stamp(){
            	HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_219_stamp)
HXDLIN( 219)		return ::haxe::Timer_obj::nme_time_stamp();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Timer_obj,stamp,return )

::cpp::Function< Float  () > Timer_obj::nme_time_stamp;


void Timer_obj::__alloc_dynamic_functions(::hx::Ctx *_hx_ctx,Timer_obj *_hx_obj) {
	if (!_hx_obj->run.mPtr) _hx_obj->run = new __default_run(_hx_obj);
}
::hx::ObjectPtr< Timer_obj > Timer_obj::__new(Float inTimeMs) {
	::hx::ObjectPtr< Timer_obj > __this = new Timer_obj();
	__this->__construct(inTimeMs);
	return __this;
}

::hx::ObjectPtr< Timer_obj > Timer_obj::__alloc(::hx::Ctx *_hx_ctx,Float inTimeMs) {
	Timer_obj *__this = (Timer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Timer_obj), true, "haxe.Timer"));
	*(void **)__this = Timer_obj::_hx_vtable;
	haxe::Timer_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(inTimeMs);
	return __this;
}

Timer_obj::Timer_obj()
{
	run = new __default_run(this);
}

void Timer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Timer);
	HX_MARK_MEMBER_NAME(mTime,"mTime");
	HX_MARK_MEMBER_NAME(mFireAt,"mFireAt");
	HX_MARK_MEMBER_NAME(mRunning,"mRunning");
	HX_MARK_MEMBER_NAME(run,"run");
	HX_MARK_END_CLASS();
}

void Timer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mTime,"mTime");
	HX_VISIT_MEMBER_NAME(mFireAt,"mFireAt");
	HX_VISIT_MEMBER_NAME(mRunning,"mRunning");
	HX_VISIT_MEMBER_NAME(run,"run");
}

::hx::Val Timer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { return ::hx::Val( run ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mTime") ) { return ::hx::Val( mTime ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mFireAt") ) { return ::hx::Val( mFireAt ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mRunning") ) { return ::hx::Val( mRunning ); }
		if (HX_FIELD_EQ(inName,"nmeCheck") ) { return ::hx::Val( nmeCheck_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Timer_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"delay") ) { outValue = delay_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stamp") ) { outValue = stamp_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"measure") ) { outValue = measure_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sPollClient") ) { outValue = ( sPollClient ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sRunningTimers") ) { outValue = ( sRunningTimers ); return true; }
		if (HX_FIELD_EQ(inName,"nmeGetNextWake") ) { outValue = nmeGetNextWake_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nmeCheckTimers") ) { outValue = nmeCheckTimers_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nme_time_stamp") ) { outValue = ( nme_time_stamp ); return true; }
	}
	return false;
}

::hx::Val Timer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { run=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"mTime") ) { mTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"mFireAt") ) { mFireAt=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"mRunning") ) { mRunning=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Timer_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"sPollClient") ) { sPollClient=ioValue.Cast< ::Dynamic >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"sRunningTimers") ) { sRunningTimers=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_time_stamp") ) { nme_time_stamp=ioValue.Cast< ::cpp::Function< Float  () > >(); return true; }
	}
	return false;
}

void Timer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mTime",1a,33,83,fa));
	outFields->push(HX_("mFireAt",96,ea,58,72));
	outFields->push(HX_("mRunning",12,2d,35,13));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Timer_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Timer_obj,mTime),HX_("mTime",1a,33,83,fa)},
	{::hx::fsFloat,(int)offsetof(Timer_obj,mFireAt),HX_("mFireAt",96,ea,58,72)},
	{::hx::fsBool,(int)offsetof(Timer_obj,mRunning),HX_("mRunning",12,2d,35,13)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Timer_obj,run),HX_("run",4b,e7,56,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Timer_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &Timer_obj::sRunningTimers,HX_("sRunningTimers",fa,bb,cd,fe)},
	{::hx::fsObject /* ::Dynamic */ ,(void *) &Timer_obj::sPollClient,HX_("sPollClient",3d,a8,16,5d)},
	{::hx::fsObject /* ::cpp::Function< Float  () > */ ,(void *) &Timer_obj::nme_time_stamp,HX_("nme_time_stamp",aa,da,a6,05)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Timer_obj_sMemberFields[] = {
	HX_("mTime",1a,33,83,fa),
	HX_("mFireAt",96,ea,58,72),
	HX_("mRunning",12,2d,35,13),
	HX_("run",4b,e7,56,00),
	HX_("stop",02,f0,5b,4c),
	HX_("nmeCheck",a2,13,40,83),
	::String(null()) };

static void Timer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Timer_obj::sRunningTimers,"sRunningTimers");
	HX_MARK_MEMBER_NAME(Timer_obj::sPollClient,"sPollClient");
	HX_MARK_MEMBER_NAME(Timer_obj::nme_time_stamp,"nme_time_stamp");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Timer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Timer_obj::sRunningTimers,"sRunningTimers");
	HX_VISIT_MEMBER_NAME(Timer_obj::sPollClient,"sPollClient");
	HX_VISIT_MEMBER_NAME(Timer_obj::nme_time_stamp,"nme_time_stamp");
};

#endif

::hx::Class Timer_obj::__mClass;

static ::String Timer_obj_sStaticFields[] = {
	HX_("sRunningTimers",fa,bb,cd,fe),
	HX_("sPollClient",3d,a8,16,5d),
	HX_("measure",5e,fb,e9,3c),
	HX_("nmeGetNextWake",c7,df,da,4e),
	HX_("nmeCheckTimers",50,fa,0b,2f),
	HX_("delay",83,d7,26,d7),
	HX_("stamp",03,70,0b,84),
	HX_("nme_time_stamp",aa,da,a6,05),
	::String(null())
};

void Timer_obj::__register()
{
	Timer_obj _hx_dummy;
	Timer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.Timer",5d,9d,24,4b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Timer_obj::__GetStatic;
	__mClass->mSetStaticField = &Timer_obj::__SetStatic;
	__mClass->mMarkFunc = Timer_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Timer_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Timer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Timer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Timer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Timer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Timer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Timer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_110_boot)
HXDLIN( 110)		sRunningTimers = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_102f69689d37b2bb_111_boot)
HXDLIN( 111)		sPollClient = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_b8ebf77cc0558ab3_9_boot)
HXDLIN(   9)		nme_time_stamp = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_time_stamp",aa,da,a6,05),HX_("d",64,00,00,00),false);
            	}
}

} // end namespace haxe
