// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_imageAbstracts__LineShape_LineShape_Impl_
#include <pi_xy/imageAbstracts/_LineShape/LineShape_Impl_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_a14a7b5d04c7c47a_10__new,"pi_xy.imageAbstracts._LineShape.LineShape_Impl_","_new",0xf623fcb1,"pi_xy.imageAbstracts._LineShape.LineShape_Impl_._new","pi_xy/imageAbstracts/LineShape.hx",10,0x54c73262)
HX_LOCAL_STACK_FRAME(_hx_pos_a14a7b5d04c7c47a_20_roundRectangle,"pi_xy.imageAbstracts._LineShape.LineShape_Impl_","roundRectangle",0x50686d51,"pi_xy.imageAbstracts._LineShape.LineShape_Impl_.roundRectangle","pi_xy/imageAbstracts/LineShape.hx",20,0x54c73262)
HX_LOCAL_STACK_FRAME(_hx_pos_a14a7b5d04c7c47a_56_ellipseTri,"pi_xy.imageAbstracts._LineShape.LineShape_Impl_","ellipseTri",0xfbc0823d,"pi_xy.imageAbstracts._LineShape.LineShape_Impl_.ellipseTri","pi_xy/imageAbstracts/LineShape.hx",56,0x54c73262)
HX_LOCAL_STACK_FRAME(_hx_pos_a14a7b5d04c7c47a_107_radialEllipseTri,"pi_xy.imageAbstracts._LineShape.LineShape_Impl_","radialEllipseTri",0x03ca8dfc,"pi_xy.imageAbstracts._LineShape.LineShape_Impl_.radialEllipseTri","pi_xy/imageAbstracts/LineShape.hx",107,0x54c73262)
namespace pi_xy{
namespace imageAbstracts{
namespace _LineShape{

void LineShape_Impl__obj::__construct() { }

Dynamic LineShape_Impl__obj::__CreateEmpty() { return new LineShape_Impl__obj; }

void *LineShape_Impl__obj::_hx_vtable = 0;

Dynamic LineShape_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LineShape_Impl__obj > _hx_result = new LineShape_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool LineShape_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4b47e402;
}

 ::pi_xy::ImageStruct LineShape_Impl__obj::_new(int w,int h){
            	HX_GC_STACKFRAME(&_hx_pos_a14a7b5d04c7c47a_10__new)
HXLINE(  12)		 ::Dynamic imageType = null();
HXDLIN(  12)		 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  12)		if (::hx::IsNull( imageType )) {
HXLINE(  12)			imageType = ::pi_xy::ImageStruct_obj::defaultType;
            		}
HXDLIN(  12)		::Dynamic this2;
HXDLIN(  12)		switch((int)(( (int)(imageType) ))){
            			case (int)0: {
HXLINE(  12)				 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  12)				 ::iterMagic::BytesImg b = byt;
HXDLIN(  12)				{
HXLINE(  12)					b->width = w;
HXDLIN(  12)					b->height = h;
HXDLIN(  12)					b->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  12)					b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  12)					{
HXLINE(  12)						int len = b->length;
HXDLIN(  12)						int w1 = 0;
HXDLIN(  12)						{
HXLINE(  12)							int _g = 0;
HXDLIN(  12)							int _g1 = b->height;
HXDLIN(  12)							while((_g < _g1)){
HXLINE(  12)								_g = (_g + 1);
HXDLIN(  12)								int y = (_g - 1);
HXDLIN(  12)								{
HXLINE(  12)									int _g2 = 0;
HXDLIN(  12)									int _g3 = b->width;
HXDLIN(  12)									while((_g2 < _g3)){
HXLINE(  12)										_g2 = (_g2 + 1);
HXDLIN(  12)										int x = (_g2 - 1);
HXDLIN(  12)										{
HXLINE(  12)											w1 = (w1 + 1);
HXDLIN(  12)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  12)										{
HXLINE(  12)											w1 = (w1 + 1);
HXDLIN(  12)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  12)										{
HXLINE(  12)											w1 = (w1 + 1);
HXDLIN(  12)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  12)										{
HXLINE(  12)											w1 = (w1 + 1);
HXDLIN(  12)											b->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  12)				this2 = b;
            			}
            			break;
            			case (int)1: {
HXLINE(  12)				 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  12)				 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  12)				{
HXLINE(  12)					a->width = w;
HXDLIN(  12)					a->height = h;
HXDLIN(  12)					a->data = ::Array_obj< int >::__new(0);
HXDLIN(  12)					a->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  12)					{
HXLINE(  12)						int _g4 = 0;
HXDLIN(  12)						int _g5 = a->length;
HXDLIN(  12)						while((_g4 < _g5)){
HXLINE(  12)							_g4 = (_g4 + 1);
HXDLIN(  12)							int i = (_g4 - 1);
HXDLIN(  12)							a->data[i] = 0;
            						}
            					}
            				}
HXDLIN(  12)				this2 = a;
            			}
            			break;
            			case (int)2: {
HXLINE(  12)				 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  12)				 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  12)				{
HXLINE(  12)					b1->width = w;
HXDLIN(  12)					b1->height = h;
HXDLIN(  12)					b1->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  12)					int size = (b1->length * 4);
HXDLIN(  12)					b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  12)					{
HXLINE(  12)						int _g6 = 0;
HXDLIN(  12)						int _g7 = b1->length;
HXDLIN(  12)						while((_g6 < _g7)){
HXLINE(  12)							_g6 = (_g6 + 1);
HXDLIN(  12)							int i1 = (_g6 - 1);
HXDLIN(  12)							{
HXLINE(  12)								 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN(  12)								bool this4;
HXDLIN(  12)								if ((i1 >= 0)) {
HXLINE(  12)									this4 = (i1 < (this3->byteLength >> 2));
            								}
            								else {
HXLINE(  12)									this4 = false;
            								}
HXDLIN(  12)								if (this4) {
HXLINE(  12)									 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN(  12)									int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN(  12)									_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  12)									_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  12)									_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  12)									_this->b[(pos + 3)] = ( (unsigned char)(0) );
            								}
            							}
            						}
            					}
            				}
HXDLIN(  12)				this2 = b1;
            			}
            			break;
            			case (int)3: {
HXLINE(  12)				 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  12)				 ::iterMagic::VecIntImg v = vec;
HXDLIN(  12)				{
HXLINE(  12)					v->width = w;
HXDLIN(  12)					v->height = h;
HXDLIN(  12)					v->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  12)					v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  12)					{
HXLINE(  12)						int _g8 = 0;
HXDLIN(  12)						int _g9 = v->length;
HXDLIN(  12)						while((_g8 < _g9)){
HXLINE(  12)							_g8 = (_g8 + 1);
HXDLIN(  12)							int i2 = (_g8 - 1);
HXDLIN(  12)							v->data->__unsafe_set(i2,0);
            						}
            					}
            				}
HXDLIN(  12)				this2 = v;
            			}
            			break;
            			case (int)4: {
HXLINE(  12)				 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  12)				 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  12)				{
HXLINE(  12)					b2->width = w;
HXDLIN(  12)					b2->height = h;
HXDLIN(  12)					b2->length = ::Std_obj::_hx_int(( (Float)((w * h)) ));
HXDLIN(  12)					b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  12)					{
HXLINE(  12)						int len1 = b2->length;
HXDLIN(  12)						 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  12)						if (::hx::IsNull( d->head )) {
HXLINE(  12)							int _g10 = 0;
HXDLIN(  12)							int _g11 = len1;
HXDLIN(  12)							while((_g10 < _g11)){
HXLINE(  12)								_g10 = (_g10 + 1);
HXDLIN(  12)								int i3 = (_g10 - 1);
HXDLIN(  12)								d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            							}
            						}
            						else {
HXLINE(  12)							int _g12 = 0;
HXDLIN(  12)							int _g13 = len1;
HXDLIN(  12)							while((_g12 < _g13)){
HXLINE(  12)								_g12 = (_g12 + 1);
HXDLIN(  12)								int i4 = (_g12 - 1);
HXDLIN(  12)								{
HXLINE(  12)									 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  12)									 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  12)									{
HXLINE(  12)										int _g14 = 0;
HXDLIN(  12)										int _g15 = i4;
HXDLIN(  12)										while((_g14 < _g15)){
HXLINE(  12)											_g14 = (_g14 + 1);
HXDLIN(  12)											int i5 = (_g14 - 1);
HXDLIN(  12)											prev = l;
HXDLIN(  12)											l = l->next;
            										}
            									}
HXDLIN(  12)									if (::hx::IsNull( prev )) {
HXLINE(  12)										b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  12)										l = null();
            									}
            									else {
HXLINE(  12)										prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  12)										l = null();
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  12)				this2 = b2;
            			}
            			break;
            		}
HXDLIN(  12)		this1->image = this2;
HXDLIN(  12)		this1->width = w;
HXDLIN(  12)		this1->height = h;
HXDLIN(  12)		this1->imageType = ( (int)(imageType) );
HXLINE(  10)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(LineShape_Impl__obj,_new,return )

void LineShape_Impl__obj::roundRectangle( ::pi_xy::ImageStruct this1,Float x,Float y,Float hi,Float wid,Float thick,int color, ::Dynamic __o_dx, ::Dynamic __o_dy, ::Dynamic __o_fat, ::Dynamic __o_tall){
            		 ::Dynamic dx = __o_dx;
            		if (::hx::IsNull(__o_dx)) dx = ((Float)-1.);
            		 ::Dynamic dy = __o_dy;
            		if (::hx::IsNull(__o_dy)) dy = ((Float)-1.);
            		 ::Dynamic fat = __o_fat;
            		if (::hx::IsNull(__o_fat)) fat = ((Float)-1.);
            		 ::Dynamic tall = __o_tall;
            		if (::hx::IsNull(__o_tall)) tall = ((Float)-1.);
            	HX_GC_STACKFRAME(&_hx_pos_a14a7b5d04c7c47a_20_roundRectangle)
HXLINE(  21)		int width = ::Math_obj::ceil(wid);
HXDLIN(  21)		int height = ::Math_obj::ceil(hi);
HXDLIN(  21)		 ::Dynamic imageType = null();
HXDLIN(  21)		 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  21)		if (::hx::IsNull( imageType )) {
HXLINE(  54)			imageType = ::pi_xy::ImageStruct_obj::defaultType;
            		}
HXLINE(  21)		::Dynamic _hx_tmp;
HXDLIN(  21)		switch((int)(( (int)(imageType) ))){
            			case (int)0: {
HXLINE(  21)				 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  21)				 ::iterMagic::BytesImg b = byt;
HXDLIN(  21)				{
HXLINE(  21)					b->width = width;
HXDLIN(  21)					b->height = height;
HXDLIN(  21)					b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  21)					b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  21)					{
HXLINE(  21)						int len = b->length;
HXDLIN(  21)						int w = 0;
HXDLIN(  21)						{
HXLINE(  21)							int _g = 0;
HXDLIN(  21)							int _g1 = b->height;
HXDLIN(  21)							while((_g < _g1)){
HXLINE(  21)								_g = (_g + 1);
HXDLIN(  21)								int y1 = (_g - 1);
HXDLIN(  21)								{
HXLINE(  21)									int _g2 = 0;
HXDLIN(  21)									int _g3 = b->width;
HXDLIN(  21)									while((_g2 < _g3)){
HXLINE(  21)										_g2 = (_g2 + 1);
HXDLIN(  21)										int x1 = (_g2 - 1);
HXDLIN(  21)										{
HXLINE(  21)											w = (w + 1);
HXDLIN(  21)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  21)										{
HXLINE(  21)											w = (w + 1);
HXDLIN(  21)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  21)										{
HXLINE(  21)											w = (w + 1);
HXDLIN(  21)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
HXDLIN(  21)										{
HXLINE(  21)											w = (w + 1);
HXDLIN(  21)											b->data->b[(w - 1)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  21)				_hx_tmp = b;
            			}
            			break;
            			case (int)1: {
HXLINE(  21)				 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)				 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  21)				{
HXLINE(  21)					a->width = width;
HXDLIN(  21)					a->height = height;
HXDLIN(  21)					a->data = ::Array_obj< int >::__new(0);
HXDLIN(  21)					a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  21)					{
HXLINE(  21)						int _g4 = 0;
HXDLIN(  21)						int _g5 = a->length;
HXDLIN(  21)						while((_g4 < _g5)){
HXLINE(  21)							_g4 = (_g4 + 1);
HXDLIN(  21)							int i = (_g4 - 1);
HXDLIN(  21)							a->data[i] = 0;
            						}
            					}
            				}
HXDLIN(  21)				_hx_tmp = a;
            			}
            			break;
            			case (int)2: {
HXLINE(  21)				 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  21)				 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  21)				{
HXLINE(  21)					b1->width = width;
HXDLIN(  21)					b1->height = height;
HXDLIN(  21)					b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  21)					int size = (b1->length * 4);
HXDLIN(  21)					b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  21)					{
HXLINE(  21)						int _g6 = 0;
HXDLIN(  21)						int _g7 = b1->length;
HXDLIN(  21)						while((_g6 < _g7)){
HXLINE(  21)							_g6 = (_g6 + 1);
HXDLIN(  21)							int i1 = (_g6 - 1);
HXDLIN(  21)							{
HXLINE(  21)								 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN(  21)								bool _hx_tmp1;
HXDLIN(  21)								if ((i1 >= 0)) {
HXLINE(  21)									_hx_tmp1 = (i1 < (this3->byteLength >> 2));
            								}
            								else {
HXLINE(  21)									_hx_tmp1 = false;
            								}
HXDLIN(  21)								if (_hx_tmp1) {
HXLINE(  21)									 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN(  21)									int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN(  21)									_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  21)									_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  21)									_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  21)									_this->b[(pos + 3)] = ( (unsigned char)(0) );
            								}
            							}
            						}
            					}
            				}
HXDLIN(  21)				_hx_tmp = b1;
            			}
            			break;
            			case (int)3: {
HXLINE(  21)				 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)				 ::iterMagic::VecIntImg v = vec;
HXDLIN(  21)				{
HXLINE(  21)					v->width = width;
HXDLIN(  21)					v->height = height;
HXDLIN(  21)					v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  21)					v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  21)					{
HXLINE(  21)						int _g8 = 0;
HXDLIN(  21)						int _g9 = v->length;
HXDLIN(  21)						while((_g8 < _g9)){
HXLINE(  21)							_g8 = (_g8 + 1);
HXDLIN(  21)							int i2 = (_g8 - 1);
HXDLIN(  21)							v->data->__unsafe_set(i2,0);
            						}
            					}
            				}
HXDLIN(  21)				_hx_tmp = v;
            			}
            			break;
            			case (int)4: {
HXLINE(  21)				 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  21)				 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  21)				{
HXLINE(  21)					b2->width = width;
HXDLIN(  21)					b2->height = height;
HXDLIN(  21)					b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  21)					b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  21)					{
HXLINE(  21)						int len1 = b2->length;
HXDLIN(  21)						 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  21)						if (::hx::IsNull( d->head )) {
HXLINE(  21)							int _g10 = 0;
HXDLIN(  21)							int _g11 = len1;
HXDLIN(  21)							while((_g10 < _g11)){
HXLINE(  21)								_g10 = (_g10 + 1);
HXDLIN(  21)								int i3 = (_g10 - 1);
HXDLIN(  21)								d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            							}
            						}
            						else {
HXLINE(  21)							int _g12 = 0;
HXDLIN(  21)							int _g13 = len1;
HXDLIN(  21)							while((_g12 < _g13)){
HXLINE(  21)								_g12 = (_g12 + 1);
HXDLIN(  21)								int i4 = (_g12 - 1);
HXDLIN(  21)								{
HXLINE(  21)									 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  21)									 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  21)									{
HXLINE(  21)										int _g14 = 0;
HXDLIN(  21)										int _g15 = i4;
HXDLIN(  21)										while((_g14 < _g15)){
HXLINE(  21)											_g14 = (_g14 + 1);
HXDLIN(  21)											int i5 = (_g14 - 1);
HXLINE( 345)											prev = l;
HXLINE( 346)											l = l->next;
            										}
            									}
HXLINE(  21)									if (::hx::IsNull( prev )) {
HXLINE(  21)										b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  21)										l = null();
            									}
            									else {
HXLINE(  21)										prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  21)										l = null();
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  21)				_hx_tmp = b2;
            			}
            			break;
            		}
HXDLIN(  21)		this2->image = _hx_tmp;
HXDLIN(  21)		this2->width = width;
HXDLIN(  21)		this2->height = height;
HXDLIN(  21)		this2->imageType = ( (int)(imageType) );
HXDLIN(  21)		 ::pi_xy::ImageStruct temp = this2;
HXLINE(  22)		temp->transparent = false;
HXLINE(  24)		{
HXLINE(  24)			 ::Dynamic dx1 = dx;
HXDLIN(  24)			 ::Dynamic dy1 = dy;
HXDLIN(  24)			 ::Dynamic fat1 = fat;
HXDLIN(  24)			 ::Dynamic tall1 = tall;
HXLINE(  29)			if (::hx::IsNull( tall1 )) {
HXLINE(  29)				tall1 = ((Float)-1.);
            			}
HXDLIN(  29)			if (::hx::IsNull( fat1 )) {
HXLINE(  29)				fat1 = ((Float)-1.);
            			}
HXLINE(  28)			if (::hx::IsNull( dy1 )) {
HXLINE(  28)				dy1 = ((Float)-1.);
            			}
HXDLIN(  28)			if (::hx::IsNull( dx1 )) {
HXLINE(  28)				dx1 = ((Float)-1.);
            			}
HXLINE(  24)			if (::hx::IsLess( dx1,((Float)0.) )) {
HXLINE(  24)				Float smallest;
HXDLIN(  24)				if ((hi < wid)) {
HXLINE(  24)					smallest = hi;
            				}
            				else {
HXLINE(  24)					smallest = wid;
            				}
HXDLIN(  24)				Float goldenRatio = ((Float)1.61803398875);
HXLINE(  26)				dx1 = (smallest / (goldenRatio + 2));
            			}
HXLINE(  24)			if (::hx::IsLess( dy1,((Float)0.) )) {
HXLINE(  28)				dy1 = dx1;
            			}
HXLINE(  24)			if (::hx::IsLess( fat1,((Float)0.) )) {
HXLINE(  29)				fat1 = (wid - (( (Float)(2) ) * ( (Float)(dx1) )));
            			}
HXLINE(  24)			if (::hx::IsLess( tall1,((Float)0.) )) {
HXLINE(  30)				tall1 = (hi - (( (Float)(2) ) * ( (Float)(dy1) )));
            			}
HXLINE(  24)			Float rightRadius = ((wid - ( (Float)(fat1) )) - ( (Float)(dx1) ));
HXDLIN(  24)			Float bottomRadius = ((hi - ( (Float)(tall1) )) - ( (Float)(dy1) ));
HXDLIN(  24)			Float farX = (dx1 + fat1);
HXDLIN(  24)			Float lowerY = (dy1 + tall1);
HXDLIN(  24)			{
HXLINE(  24)				 ::pi_xy::ImageStruct this4 = temp;
HXDLIN(  24)				Float cx = ( (Float)(dx1) );
HXDLIN(  24)				Float cy = ( (Float)(dy1) );
HXDLIN(  24)				Float rx = ( (Float)(dx1) );
HXDLIN(  24)				Float ry = ( (Float)(dy1) );
HXDLIN(  24)				{
HXLINE(  24)					 ::Dynamic targetError = ((Float)1.05);
HXDLIN(  24)					if (::hx::IsNull( targetError )) {
HXLINE( 113)						targetError = ((Float)1.05);
            					}
HXLINE(  24)					Float rSmall;
HXDLIN(  24)					if ((rx > ry)) {
HXLINE(  24)						rSmall = ry;
            					}
            					else {
HXLINE(  24)						rSmall = rx;
            					}
HXDLIN(  24)					 ::Dynamic targetE = ( (Float)(targetError) );
HXDLIN(  24)					if (::hx::IsNull( targetE )) {
HXDLIN(  20)						targetE = ((Float)1.05);
            					}
HXLINE(  24)					int result = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE) ) / rSmall)))));
HXDLIN(  24)					int noSides;
HXDLIN(  24)					if ((result < 12)) {
HXLINE(  24)						noSides = 12;
            					}
            					else {
HXLINE(  24)						if ((result > 500)) {
HXLINE(  24)							noSides = 500;
            						}
            						else {
HXLINE(  24)							noSides = result;
            						}
            					}
HXDLIN(  24)					int sides = (::Math_obj::ceil((( (Float)(noSides) ) / ( (Float)(4) ))) * 4);
HXDLIN(  24)					Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides) ));
HXDLIN(  24)					Float omega = ::Math_obj::PI;
HXDLIN(  24)					int quarter = ::Std_obj::_hx_int((( (Float)(sides) ) / ( (Float)(4) )));
HXDLIN(  24)					Float lastX = ((Float)0.);
HXDLIN(  24)					Float lastY = ((Float)0.);
HXDLIN(  24)					{
HXLINE(  26)						lastX = (cx + (rx * ::Math_obj::cos(((( (Float)(sides) ) * theta) + omega))));
HXLINE(  27)						lastY = (cy + (ry * ::Math_obj::sin(((( (Float)(sides) ) * theta) + omega))));
            					}
HXLINE(  24)					{
HXLINE(  24)						int _g16 = 0;
HXDLIN(  24)						int _g17 = (quarter + 1);
HXDLIN(  24)						while((_g16 < _g17)){
HXLINE(  24)							_g16 = (_g16 + 1);
HXDLIN(  24)							int i6 = (_g16 - 1);
HXDLIN(  24)							Float nextX = (cx + (rx * ::Math_obj::cos((((( (Float)(i6) ) * theta) + ((Float)0.0001)) + omega))));
HXDLIN(  24)							Float nextY = (cy + (ry * ::Math_obj::sin((((( (Float)(i6) ) * theta) + ((Float)0.0001)) + omega))));
HXDLIN(  24)							{
HXLINE(  24)								 ::pi_xy::ImageStruct this5 = this4;
HXDLIN(  24)								bool hasHit = false;
HXDLIN(  24)								bool hasUndo = false;
HXDLIN(  24)								{
HXLINE(  24)									Float bx = lastX;
HXDLIN(  24)									Float by = lastY;
HXDLIN(  24)									Float cx1 = nextX;
HXDLIN(  24)									Float cy1 = nextY;
HXDLIN(  24)									bool adjustWinding = (((((cx * by) - (bx * cy)) + ((bx * cy1) - (cx1 * by))) + ((cx1 * cy) - (cx * cy1))) > 0);
HXDLIN(  24)									if (!(adjustWinding)) {
HXLINE(  24)										Float bx_ = bx;
HXDLIN(  24)										Float by_ = by;
HXLINE(  25)										bx = cx1;
HXLINE(  26)										by = cy1;
HXLINE(  27)										cx1 = bx_;
HXLINE(  28)										cy1 = by_;
            									}
HXLINE(  24)									{
HXLINE(  24)										Float s0 = ((cy * cx1) - (cx * cy1));
HXDLIN(  24)										Float sx = (cy1 - cy);
HXDLIN(  24)										Float sy = (cx - cx1);
HXDLIN(  24)										Float t0 = ((cx * by) - (cy * bx));
HXDLIN(  24)										Float tx = (cy - by);
HXDLIN(  24)										Float ty = (bx - cx);
HXDLIN(  24)										Float A = ((((-(by) * cx1) + (cy * (-(bx) + cx1))) + (cx * (by - cy1))) + (bx * cy1));
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  24)										if ((cx > bx)) {
HXLINE(  24)											if ((cx > cx1)) {
HXLINE(  24)												int min;
HXDLIN(  24)												if ((bx > cx1)) {
HXLINE(  24)													min = ::Math_obj::floor(cx1);
            												}
            												else {
HXLINE(  24)													min = ::Math_obj::floor(bx);
            												}
HXDLIN(  24)												int ii_min = min;
HXDLIN(  24)												int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  24)												xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            											}
            											else {
HXLINE(  24)												int ii_min1 = ::Math_obj::floor(bx);
HXDLIN(  24)												int ii_max1 = ::Math_obj::ceil(cx1);
HXDLIN(  24)												xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            											}
            										}
            										else {
HXLINE(  24)											if ((bx > cx1)) {
HXLINE(  24)												int min1;
HXDLIN(  24)												if ((cx > cx1)) {
HXLINE(  24)													min1 = ::Math_obj::floor(cx1);
            												}
            												else {
HXLINE(  24)													min1 = ::Math_obj::ceil(cx);
            												}
HXDLIN(  24)												int ii_min2 = min1;
HXDLIN(  24)												int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN(  24)												xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            											}
            											else {
HXLINE(  24)												int ii_min3 = ::Math_obj::floor(cx);
HXDLIN(  24)												int ii_max3 = ::Math_obj::ceil(cx1);
HXDLIN(  24)												xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            											}
            										}
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  24)										if ((cy > by)) {
HXLINE(  24)											if ((cy > cy1)) {
HXLINE(  24)												int min2;
HXDLIN(  24)												if ((by > cy1)) {
HXLINE(  24)													min2 = ::Math_obj::floor(cy1);
            												}
            												else {
HXLINE(  24)													min2 = ::Math_obj::floor(by);
            												}
HXDLIN(  24)												int ii_min4 = min2;
HXDLIN(  24)												int ii_max4 = ::Math_obj::ceil(cy);
HXDLIN(  24)												yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            											}
            											else {
HXLINE(  24)												int ii_min5 = ::Math_obj::floor(by);
HXDLIN(  24)												int ii_max5 = ::Math_obj::ceil(cy1);
HXDLIN(  24)												yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            											}
            										}
            										else {
HXLINE(  24)											if ((by > cy1)) {
HXLINE(  24)												int min3;
HXDLIN(  24)												if ((cy > cy1)) {
HXLINE(  24)													min3 = ::Math_obj::floor(cy1);
            												}
            												else {
HXLINE(  24)													min3 = ::Math_obj::ceil(cy);
            												}
HXDLIN(  24)												int ii_min6 = min3;
HXDLIN(  24)												int ii_max6 = ::Math_obj::ceil(by);
HXDLIN(  24)												yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            											}
            											else {
HXLINE(  24)												int ii_min7 = ::Math_obj::floor(cy);
HXDLIN(  24)												int ii_max7 = ::Math_obj::ceil(cy1);
HXDLIN(  24)												yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            											}
            										}
HXDLIN(  24)										 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  24)										if (hasUndo) {
HXLINE(  24)											int width1 = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  24)											int height1 = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  24)											 ::Dynamic imageType1 = null();
HXDLIN(  24)											 ::pi_xy::ImageStruct this6 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  24)											if (::hx::IsNull( imageType1 )) {
HXLINE(  54)												imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  24)											::Dynamic undoImage1;
HXDLIN(  24)											switch((int)(( (int)(imageType1) ))){
            												case (int)0: {
HXLINE(  24)													 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::BytesImg b3 = byt1;
HXDLIN(  24)													{
HXLINE(  24)														b3->width = width1;
HXDLIN(  24)														b3->height = height1;
HXDLIN(  24)														b3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  24)														b3->data = ::haxe::io::Bytes_obj::alloc((b3->length * 4));
HXDLIN(  24)														{
HXLINE(  24)															int len2 = b3->length;
HXDLIN(  24)															int w1 = 0;
HXDLIN(  24)															{
HXLINE(  24)																int _g18 = 0;
HXDLIN(  24)																int _g19 = b3->height;
HXDLIN(  24)																while((_g18 < _g19)){
HXLINE(  24)																	_g18 = (_g18 + 1);
HXDLIN(  24)																	int y2 = (_g18 - 1);
HXDLIN(  24)																	{
HXLINE(  24)																		int _g20 = 0;
HXDLIN(  24)																		int _g21 = b3->width;
HXDLIN(  24)																		while((_g20 < _g21)){
HXLINE(  24)																			_g20 = (_g20 + 1);
HXDLIN(  24)																			int x2 = (_g20 - 1);
HXDLIN(  24)																			{
HXLINE(  24)																				w1 = (w1 + 1);
HXDLIN(  24)																				b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w1 = (w1 + 1);
HXDLIN(  24)																				b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w1 = (w1 + 1);
HXDLIN(  24)																				b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w1 = (w1 + 1);
HXDLIN(  24)																				b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage1 = b3;
            												}
            												break;
            												case (int)1: {
HXLINE(  24)													 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::ArrIntImg a1 = arrI1;
HXDLIN(  24)													{
HXLINE(  24)														a1->width = width1;
HXDLIN(  24)														a1->height = height1;
HXDLIN(  24)														a1->data = ::Array_obj< int >::__new(0);
HXDLIN(  24)														a1->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  24)														{
HXLINE(  24)															int _g22 = 0;
HXDLIN(  24)															int _g23 = a1->length;
HXDLIN(  24)															while((_g22 < _g23)){
HXLINE(  24)																_g22 = (_g22 + 1);
HXDLIN(  24)																int i7 = (_g22 - 1);
HXDLIN(  24)																a1->data[i7] = 0;
            															}
            														}
            													}
HXDLIN(  24)													undoImage1 = a1;
            												}
            												break;
            												case (int)2: {
HXLINE(  24)													 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::U32ArrImg b4 = u32a1;
HXDLIN(  24)													{
HXLINE(  24)														b4->width = width1;
HXDLIN(  24)														b4->height = height1;
HXDLIN(  24)														b4->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  24)														int size1 = (b4->length * 4);
HXDLIN(  24)														b4->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  24)														{
HXLINE(  24)															int _g24 = 0;
HXDLIN(  24)															int _g25 = b4->length;
HXDLIN(  24)															while((_g24 < _g25)){
HXLINE(  24)																_g24 = (_g24 + 1);
HXDLIN(  24)																int i8 = (_g24 - 1);
HXDLIN(  24)																{
HXLINE(  24)																	 ::haxe::io::ArrayBufferViewImpl this7 = b4->data;
HXDLIN(  24)																	bool undoImage2;
HXDLIN(  24)																	if ((i8 >= 0)) {
HXLINE(  24)																		undoImage2 = (i8 < (this7->byteLength >> 2));
            																	}
            																	else {
HXLINE(  24)																		undoImage2 = false;
            																	}
HXDLIN(  24)																	if (undoImage2) {
HXLINE(  24)																		 ::haxe::io::Bytes _this1 = this7->bytes;
HXDLIN(  24)																		int pos1 = ((i8 << 2) + this7->byteOffset);
HXDLIN(  24)																		_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage1 = b4;
            												}
            												break;
            												case (int)3: {
HXLINE(  24)													 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::VecIntImg v1 = vec1;
HXDLIN(  24)													{
HXLINE(  24)														v1->width = width1;
HXDLIN(  24)														v1->height = height1;
HXDLIN(  24)														v1->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  24)														v1->data = ::Array_obj< int >::__new(v1->length);
HXDLIN(  24)														{
HXLINE(  24)															int _g26 = 0;
HXDLIN(  24)															int _g27 = v1->length;
HXDLIN(  24)															while((_g26 < _g27)){
HXLINE(  24)																_g26 = (_g26 + 1);
HXDLIN(  24)																int i9 = (_g26 - 1);
HXDLIN(  24)																v1->data->__unsafe_set(i9,0);
            															}
            														}
            													}
HXDLIN(  24)													undoImage1 = v1;
            												}
            												break;
            												case (int)4: {
HXLINE(  24)													 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::StackIntImg b5 = sInt1;
HXDLIN(  24)													{
HXLINE(  24)														b5->width = width1;
HXDLIN(  24)														b5->height = height1;
HXDLIN(  24)														b5->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  24)														b5->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  24)														{
HXLINE(  24)															int len3 = b5->length;
HXDLIN(  24)															 ::haxe::ds::GenericStack_Int d1 = b5->data;
HXDLIN(  24)															if (::hx::IsNull( d1->head )) {
HXLINE(  24)																int _g28 = 0;
HXDLIN(  24)																int _g29 = len3;
HXDLIN(  24)																while((_g28 < _g29)){
HXLINE(  24)																	_g28 = (_g28 + 1);
HXDLIN(  24)																	int i10 = (_g28 - 1);
HXDLIN(  24)																	d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            																}
            															}
            															else {
HXLINE(  24)																int _g30 = 0;
HXDLIN(  24)																int _g31 = len3;
HXDLIN(  24)																while((_g30 < _g31)){
HXLINE(  24)																	_g30 = (_g30 + 1);
HXDLIN(  24)																	int i11 = (_g30 - 1);
HXDLIN(  24)																	{
HXLINE(  24)																		 ::haxe::ds::GenericCell_Int l1 = b5->data->head;
HXDLIN(  24)																		 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  24)																		{
HXLINE(  24)																			int _g32 = 0;
HXDLIN(  24)																			int _g33 = i11;
HXDLIN(  24)																			while((_g32 < _g33)){
HXLINE(  24)																				_g32 = (_g32 + 1);
HXDLIN(  24)																				int i12 = (_g32 - 1);
HXLINE( 345)																				prev1 = l1;
HXLINE( 346)																				l1 = l1->next;
            																			}
            																		}
HXLINE(  24)																		if (::hx::IsNull( prev1 )) {
HXLINE(  24)																			b5->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  24)																			l1 = null();
            																		}
            																		else {
HXLINE(  24)																			prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  24)																			l1 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage1 = b5;
            												}
            												break;
            											}
HXDLIN(  24)											this6->image = undoImage1;
HXDLIN(  24)											this6->width = width1;
HXDLIN(  24)											this6->height = height1;
HXDLIN(  24)											this6->imageType = ( (int)(imageType1) );
HXDLIN(  24)											undoImage = this6;
HXDLIN(  24)											{
HXLINE(  24)												int rectLeft = xIter3->start;
HXDLIN(  24)												int rectTop = yIter3->start;
HXDLIN(  24)												int rectRight = xIter3->max;
HXDLIN(  24)												bool forceClear = false;
HXDLIN(  24)												{
HXLINE(  24)													int _g34 = rectTop;
HXDLIN(  24)													int _g35 = yIter3->max;
HXDLIN(  24)													while((_g34 < _g35)){
HXLINE(  24)														_g34 = (_g34 + 1);
HXDLIN(  24)														int dy2 = (_g34 - 1);
HXDLIN(  24)														{
HXLINE(  24)															int _g36 = rectLeft;
HXDLIN(  24)															int _g37 = rectRight;
HXDLIN(  24)															while((_g36 < _g37)){
HXLINE(  24)																_g36 = (_g36 + 1);
HXDLIN(  24)																int dx2 = (_g36 - 1);
HXDLIN(  24)																::Dynamic this8 = this5->image;
HXDLIN(  24)																int index;
HXDLIN(  24)																if (this5->useVirtualPos) {
HXLINE(  24)																	index = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this5->virtualY) * ( (Float)(this5->width) )) + dx2) - this5->virtualX));
            																}
            																else {
HXLINE(  24)																	index = ::Std_obj::_hx_int(( (Float)(((dy2 * this5->width) + dx2)) ));
            																}
HXDLIN(  24)																int c = ::iterMagic::Iimg_obj::get(this8,index);
HXDLIN(  24)																int col;
HXDLIN(  24)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																	col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE(  24)																	col = c;
            																}
HXDLIN(  24)																bool _hx_tmp2;
HXDLIN(  24)																if (this5->useMask) {
HXLINE(  24)																	_hx_tmp2 = ::hx::IsNotNull( this5->mask );
            																}
            																else {
HXLINE(  24)																	_hx_tmp2 = false;
            																}
HXDLIN(  24)																if (_hx_tmp2) {
HXLINE(  24)																	 ::pi_xy::ImageStruct this9 = this5->mask;
HXDLIN(  24)																	::Dynamic this10 = this9->image;
HXDLIN(  24)																	int index1;
HXDLIN(  24)																	if (this9->useVirtualPos) {
HXLINE(  24)																		index1 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this9->virtualY) * ( (Float)(this9->width) )) + dx2) - this9->virtualX));
            																	}
            																	else {
HXLINE(  24)																		index1 = ::Std_obj::_hx_int(( (Float)(((dy2 * this9->width) + dx2)) ));
            																	}
HXDLIN(  24)																	int c1 = ::iterMagic::Iimg_obj::get(this10,index1);
HXDLIN(  24)																	int v2;
HXDLIN(  24)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																		v2 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            																	}
            																	else {
HXLINE(  24)																		v2 = c1;
            																	}
HXDLIN(  24)																	int maskPixel = v2;
HXDLIN(  24)																	int this11 = col;
HXDLIN(  24)																	if ((maskPixel == 0)) {
HXLINE(  24)																		col = this11;
            																	}
            																	else {
HXLINE(  24)																		Float m0;
HXDLIN(  24)																		int this12 = ((maskPixel >> 24) & 255);
HXDLIN(  24)																		if ((this12 == 0)) {
HXLINE(  24)																			m0 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m0 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m1;
HXDLIN(  24)																		int this13 = ((maskPixel >> 16) & 255);
HXDLIN(  24)																		if ((this13 == 0)) {
HXLINE(  24)																			m1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m1 = (( (Float)(this13) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m2;
HXDLIN(  24)																		int this14 = ((maskPixel >> 8) & 255);
HXDLIN(  24)																		if ((this14 == 0)) {
HXLINE(  24)																			m2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m2 = (( (Float)(this14) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m3;
HXDLIN(  24)																		int this15 = (maskPixel & 255);
HXDLIN(  24)																		if ((this15 == 0)) {
HXLINE(  24)																			m3 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m3 = (( (Float)(this15) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this11 >> 24) & 255)) )));
HXDLIN(  24)																		int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this11 >> 16) & 255)) )));
HXDLIN(  24)																		int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this11 >> 8) & 255)) )));
HXDLIN(  24)																		int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this11 & 255)) )));
HXDLIN(  24)																		col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  24)																if ((col != 0)) {
HXLINE(  24)																	int x3 = (dx2 - rectLeft);
HXDLIN(  24)																	int y3 = (dy2 - rectTop);
HXDLIN(  24)																	int c2 = col;
HXDLIN(  24)																	bool _hx_tmp3;
HXDLIN(  24)																	if ((((c2 >> 24) & 255) < 254)) {
HXLINE(  24)																		_hx_tmp3 = undoImage->transparent;
            																	}
            																	else {
HXLINE(  24)																		_hx_tmp3 = false;
            																	}
HXDLIN(  24)																	if (_hx_tmp3) {
HXLINE(  24)																		int location;
HXDLIN(  24)																		if (undoImage->useVirtualPos) {
HXLINE(  24)																			location = ::Std_obj::_hx_int(((((( (Float)(y3) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x3) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  24)																			location = ::Std_obj::_hx_int(( (Float)(((y3 * undoImage->width) + x3)) ));
            																		}
HXDLIN(  24)																		int this16 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  24)																		int this17;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			this17 = ((((((this16 >> 24) & 255) << 24) | ((this16 & 255) << 16)) | (((this16 >> 8) & 255) << 8)) | ((this16 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			this17 = this16;
            																		}
HXDLIN(  24)																		Float a11;
HXDLIN(  24)																		int this18 = ((this17 >> 24) & 255);
HXDLIN(  24)																		if ((this18 == 0)) {
HXLINE(  24)																			a11 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a11 = (( (Float)(this18) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r1;
HXDLIN(  24)																		int this19 = ((this17 >> 16) & 255);
HXDLIN(  24)																		if ((this19 == 0)) {
HXLINE(  24)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r1 = (( (Float)(this19) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g1;
HXDLIN(  24)																		int this20 = ((this17 >> 8) & 255);
HXDLIN(  24)																		if ((this20 == 0)) {
HXLINE(  24)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g1 = (( (Float)(this20) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b11;
HXDLIN(  24)																		int this21 = (this17 & 255);
HXDLIN(  24)																		if ((this21 == 0)) {
HXLINE(  24)																			b11 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b11 = (( (Float)(this21) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a2;
HXDLIN(  24)																		int this22 = ((col >> 24) & 255);
HXDLIN(  24)																		if ((this22 == 0)) {
HXLINE(  24)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a2 = (( (Float)(this22) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r2;
HXDLIN(  24)																		int this23 = ((col >> 16) & 255);
HXDLIN(  24)																		if ((this23 == 0)) {
HXLINE(  24)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r2 = (( (Float)(this23) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g2;
HXDLIN(  24)																		int this24 = ((col >> 8) & 255);
HXDLIN(  24)																		if ((this24 == 0)) {
HXLINE(  24)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g2 = (( (Float)(this24) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b21;
HXDLIN(  24)																		int this25 = (col & 255);
HXDLIN(  24)																		if ((this25 == 0)) {
HXLINE(  24)																			b21 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b21 = (( (Float)(this25) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN(  24)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  24)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  24)																		int b6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  24)																		int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  24)																		int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b6);
HXDLIN(  24)																		{
HXLINE(  24)																			int _hx_tmp4;
HXDLIN(  24)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																				_hx_tmp4 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  24)																				_hx_tmp4 = blended;
            																			}
HXDLIN(  24)																			::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp4);
            																		}
            																	}
            																	else {
HXLINE(  24)																		::Dynamic this26 = undoImage->image;
HXDLIN(  24)																		int index2;
HXDLIN(  24)																		if (undoImage->useVirtualPos) {
HXLINE(  24)																			index2 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x3) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index2 = ::Std_obj::_hx_int(( (Float)(((y3 * undoImage->width) + x3)) ));
            																		}
HXDLIN(  24)																		int _hx_tmp5;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			_hx_tmp5 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			_hx_tmp5 = c2;
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this26,index2,_hx_tmp5);
            																	}
            																}
            																else {
HXLINE(  24)																	if (forceClear) {
HXLINE(  24)																		::Dynamic this27 = undoImage->image;
HXDLIN(  24)																		int x4 = (dx2 - rectLeft);
HXDLIN(  24)																		int y4 = (dy2 - rectTop);
HXDLIN(  24)																		int index3;
HXDLIN(  24)																		if (undoImage->useVirtualPos) {
HXLINE(  24)																			index3 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x4) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index3 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage->width) + x4)) ));
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this27,index3,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  24)										bool found = false;
HXDLIN(  24)										Float s = ((Float)0.);
HXDLIN(  24)										Float t = ((Float)0.);
HXDLIN(  24)										Float sxx = ((Float)0.);
HXDLIN(  24)										Float txx = ((Float)0.);
HXDLIN(  24)										{
HXLINE(  24)											int _g_min = xIter3->start;
HXDLIN(  24)											int _g_max = xIter3->max;
HXDLIN(  24)											while((_g_min < _g_max)){
HXLINE(  24)												_g_min = (_g_min + 1);
HXDLIN(  24)												int x5 = (_g_min - 1);
HXLINE(  60)												sxx = (sx * ( (Float)(x5) ));
HXLINE(  61)												txx = (tx * ( (Float)(x5) ));
HXLINE(  62)												found = false;
HXLINE(  24)												{
HXLINE(  24)													int _g_min1 = yIter3->start;
HXDLIN(  24)													int _g_max1 = yIter3->max;
HXDLIN(  24)													while((_g_min1 < _g_max1)){
HXLINE(  24)														_g_min1 = (_g_min1 + 1);
HXDLIN(  24)														int y5 = (_g_min1 - 1);
HXLINE(  64)														s = ((s0 + sxx) + (sy * ( (Float)(y5) )));
HXLINE(  65)														t = ((t0 + txx) + (ty * ( (Float)(y5) )));
HXLINE(  24)														bool _hx_tmp6;
HXDLIN(  24)														if (!((s <= 0))) {
HXLINE(  24)															_hx_tmp6 = (t <= 0);
            														}
            														else {
HXLINE(  24)															_hx_tmp6 = true;
            														}
HXDLIN(  24)														if (_hx_tmp6) {
HXLINE(  24)															if (found) {
HXLINE(  24)																goto _hx_goto_29;
            															}
            														}
            														else {
HXLINE(  24)															if (((s + t) < A)) {
HXLINE(  24)																{
HXLINE(  24)																	int c3 = color;
HXDLIN(  24)																	bool _hx_tmp7;
HXDLIN(  24)																	if ((((c3 >> 24) & 255) < 254)) {
HXLINE(  24)																		_hx_tmp7 = this5->transparent;
            																	}
            																	else {
HXLINE(  24)																		_hx_tmp7 = false;
            																	}
HXDLIN(  24)																	if (_hx_tmp7) {
HXLINE(  24)																		int location1;
HXDLIN(  24)																		if (this5->useVirtualPos) {
HXLINE(  24)																			location1 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - this5->virtualY) * ( (Float)(this5->width) )) + x5) - this5->virtualX));
            																		}
            																		else {
HXLINE(  24)																			location1 = ::Std_obj::_hx_int(( (Float)(((y5 * this5->width) + x5)) ));
            																		}
HXDLIN(  24)																		int this28 = ::iterMagic::Iimg_obj::get(this5->image,location1);
HXDLIN(  24)																		int this29;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			this29 = ((((((this28 >> 24) & 255) << 24) | ((this28 & 255) << 16)) | (((this28 >> 8) & 255) << 8)) | ((this28 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			this29 = this28;
            																		}
HXDLIN(  24)																		Float a12;
HXDLIN(  24)																		int this30 = ((this29 >> 24) & 255);
HXDLIN(  24)																		if ((this30 == 0)) {
HXLINE(  24)																			a12 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a12 = (( (Float)(this30) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r11;
HXDLIN(  24)																		int this31 = ((this29 >> 16) & 255);
HXDLIN(  24)																		if ((this31 == 0)) {
HXLINE(  24)																			r11 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r11 = (( (Float)(this31) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g11;
HXDLIN(  24)																		int this32 = ((this29 >> 8) & 255);
HXDLIN(  24)																		if ((this32 == 0)) {
HXLINE(  24)																			g11 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g11 = (( (Float)(this32) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b12;
HXDLIN(  24)																		int this33 = (this29 & 255);
HXDLIN(  24)																		if ((this33 == 0)) {
HXLINE(  24)																			b12 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b12 = (( (Float)(this33) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a21;
HXDLIN(  24)																		int this34 = ((color >> 24) & 255);
HXDLIN(  24)																		if ((this34 == 0)) {
HXLINE(  24)																			a21 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a21 = (( (Float)(this34) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r21;
HXDLIN(  24)																		int this35 = ((color >> 16) & 255);
HXDLIN(  24)																		if ((this35 == 0)) {
HXLINE(  24)																			r21 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r21 = (( (Float)(this35) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g21;
HXDLIN(  24)																		int this36 = ((color >> 8) & 255);
HXDLIN(  24)																		if ((this36 == 0)) {
HXLINE(  24)																			g21 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g21 = (( (Float)(this36) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b22;
HXDLIN(  24)																		int this37 = (color & 255);
HXDLIN(  24)																		if ((this37 == 0)) {
HXLINE(  24)																			b22 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b22 = (( (Float)(this37) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN(  24)																		int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  24)																		int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  24)																		int b7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  24)																		int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  24)																		int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b7);
HXDLIN(  24)																		{
HXLINE(  24)																			int _hx_tmp8;
HXDLIN(  24)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																				_hx_tmp8 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            																			}
            																			else {
HXLINE(  24)																				_hx_tmp8 = blended1;
            																			}
HXDLIN(  24)																			::iterMagic::Iimg_obj::set(this5->image,location1,_hx_tmp8);
            																		}
            																	}
            																	else {
HXLINE(  24)																		::Dynamic this38 = this5->image;
HXDLIN(  24)																		int index4;
HXDLIN(  24)																		if (this5->useVirtualPos) {
HXLINE(  24)																			index4 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - this5->virtualY) * ( (Float)(this5->width) )) + x5) - this5->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index4 = ::Std_obj::_hx_int(( (Float)(((y5 * this5->width) + x5)) ));
            																		}
HXDLIN(  24)																		int _hx_tmp9;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			_hx_tmp9 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			_hx_tmp9 = c3;
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this38,index4,_hx_tmp9);
            																	}
            																}
HXLINE(  73)																found = true;
            															}
            															else {
HXLINE(  24)																if (found) {
HXLINE(  24)																	goto _hx_goto_29;
            																}
            															}
            														}
            													}
            													_hx_goto_29:;
            												}
            											}
            										}
HXDLIN(  24)										if ((hasHit == true)) {
HXLINE(  24)											 ::pi_xy::algo::HitTri v3 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,bx,by,cx1,cy1,true);
HXDLIN(  24)											if (hasUndo) {
HXLINE(  24)												v3->undoImage = undoImage;
HXDLIN(  24)												v3->undoX = xIter3->start;
HXDLIN(  24)												v3->undoY = yIter3->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX = nextX;
HXLINE(  47)							lastY = nextY;
            						}
            					}
            				}
            			}
HXLINE(  24)			{
HXLINE(  24)				int r_x = ::Std_obj::_hx_int(( (Float)(dx1) ));
HXDLIN(  24)				int r_y = 0;
HXDLIN(  24)				int r_w = ::Std_obj::_hx_int(( (Float)(fat1) ));
HXDLIN(  24)				int r_h = ::Std_obj::_hx_int(( (Float)(dy1) ));
HXDLIN(  24)				int xmax = ((r_x + r_w) + 1);
HXDLIN(  24)				int ymax = ((r_y + r_h) + 1);
HXDLIN(  24)				int ii_min8 = r_x;
HXDLIN(  24)				int ii_max8 = xmax;
HXDLIN(  24)				int xRange__start = ii_min8;
HXDLIN(  24)				int xRange__max = ii_max8;
HXDLIN(  24)				int ii_min9 = r_y;
HXDLIN(  24)				int ii_max9 = ymax;
HXDLIN(  24)				int yRange__start = ii_min9;
HXDLIN(  24)				int yRange__max = ii_max9;
HXDLIN(  24)				int range_x = xRange__start;
HXDLIN(  24)				int range_y = (yRange__start - 1);
HXDLIN(  24)				int range_xReset = range_x;
HXDLIN(  24)				int range_yReset = range_y;
HXDLIN(  24)				int range_xMax = (xRange__max - 2);
HXDLIN(  24)				int range_yMax = (yRange__max - 2);
HXDLIN(  24)				int _this_min = 0;
HXDLIN(  24)				int _this_max = ::Std_obj::_hx_int(( (Float)(((xRange__max - xRange__start) * (yRange__max - yRange__start))) ));
HXDLIN(  24)				while((_this_min < _this_max)){
HXLINE(  24)					_this_min = (_this_min + 1);
HXDLIN(  24)					int i13 = (_this_min - 1);
HXDLIN(  24)					if ((range_y > range_yMax)) {
HXLINE(  24)						range_y = range_yReset;
HXDLIN(  24)						range_x = (range_x + 1);
            					}
HXDLIN(  24)					range_y = (range_y + 1);
HXDLIN(  24)					int i14 = i13;
HXDLIN(  24)					{
HXLINE(  24)						int x6 = range_x;
HXDLIN(  24)						int y6 = range_y;
HXDLIN(  24)						int c4 = color;
HXDLIN(  24)						bool _hx_tmp10;
HXDLIN(  24)						if ((((c4 >> 24) & 255) < 254)) {
HXLINE(  24)							_hx_tmp10 = temp->transparent;
            						}
            						else {
HXLINE(  24)							_hx_tmp10 = false;
            						}
HXDLIN(  24)						if (_hx_tmp10) {
HXLINE(  24)							int location2;
HXDLIN(  24)							if (temp->useVirtualPos) {
HXLINE(  24)								location2 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - temp->virtualY) * ( (Float)(temp->width) )) + x6) - temp->virtualX));
            							}
            							else {
HXLINE(  24)								location2 = ::Std_obj::_hx_int(( (Float)(((y6 * temp->width) + x6)) ));
            							}
HXDLIN(  24)							int this39 = ::iterMagic::Iimg_obj::get(temp->image,location2);
HXDLIN(  24)							int this40;
HXDLIN(  24)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)								this40 = ((((((this39 >> 24) & 255) << 24) | ((this39 & 255) << 16)) | (((this39 >> 8) & 255) << 8)) | ((this39 >> 16) & 255));
            							}
            							else {
HXLINE(  24)								this40 = this39;
            							}
HXDLIN(  24)							Float a13;
HXDLIN(  24)							int this41 = ((this40 >> 24) & 255);
HXDLIN(  24)							if ((this41 == 0)) {
HXLINE(  24)								a13 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								a13 = (( (Float)(this41) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float r12;
HXDLIN(  24)							int this42 = ((this40 >> 16) & 255);
HXDLIN(  24)							if ((this42 == 0)) {
HXLINE(  24)								r12 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								r12 = (( (Float)(this42) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float g12;
HXDLIN(  24)							int this43 = ((this40 >> 8) & 255);
HXDLIN(  24)							if ((this43 == 0)) {
HXLINE(  24)								g12 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								g12 = (( (Float)(this43) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float b13;
HXDLIN(  24)							int this44 = (this40 & 255);
HXDLIN(  24)							if ((this44 == 0)) {
HXLINE(  24)								b13 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								b13 = (( (Float)(this44) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float a22;
HXDLIN(  24)							int this45 = ((color >> 24) & 255);
HXDLIN(  24)							if ((this45 == 0)) {
HXLINE(  24)								a22 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								a22 = (( (Float)(this45) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float r22;
HXDLIN(  24)							int this46 = ((color >> 16) & 255);
HXDLIN(  24)							if ((this46 == 0)) {
HXLINE(  24)								r22 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								r22 = (( (Float)(this46) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float g22;
HXDLIN(  24)							int this47 = ((color >> 8) & 255);
HXDLIN(  24)							if ((this47 == 0)) {
HXLINE(  24)								g22 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								g22 = (( (Float)(this47) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float b23;
HXDLIN(  24)							int this48 = (color & 255);
HXDLIN(  24)							if ((this48 == 0)) {
HXLINE(  24)								b23 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								b23 = (( (Float)(this48) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN(  24)							int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  24)							int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  24)							int b8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  24)							int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  24)							int blended2 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b8);
HXDLIN(  24)							{
HXLINE(  24)								int _hx_tmp11;
HXDLIN(  24)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)									_hx_tmp11 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            								}
            								else {
HXLINE(  24)									_hx_tmp11 = blended2;
            								}
HXDLIN(  24)								::iterMagic::Iimg_obj::set(temp->image,location2,_hx_tmp11);
            							}
            						}
            						else {
HXLINE(  24)							::Dynamic this49 = temp->image;
HXDLIN(  24)							int index5;
HXDLIN(  24)							if (temp->useVirtualPos) {
HXLINE(  24)								index5 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - temp->virtualY) * ( (Float)(temp->width) )) + x6) - temp->virtualX));
            							}
            							else {
HXLINE(  24)								index5 = ::Std_obj::_hx_int(( (Float)(((y6 * temp->width) + x6)) ));
            							}
HXDLIN(  24)							int _hx_tmp12;
HXDLIN(  24)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)								_hx_tmp12 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            							}
            							else {
HXLINE(  24)								_hx_tmp12 = c4;
            							}
HXDLIN(  24)							::iterMagic::Iimg_obj::set(this49,index5,_hx_tmp12);
            						}
            					}
            				}
            			}
HXDLIN(  24)			{
HXLINE(  24)				 ::pi_xy::ImageStruct this50 = temp;
HXDLIN(  24)				Float cy2 = ( (Float)(dy1) );
HXDLIN(  24)				Float ry1 = ( (Float)(dy1) );
HXDLIN(  24)				{
HXLINE(  24)					 ::Dynamic targetError1 = ((Float)1.05);
HXDLIN(  24)					if (::hx::IsNull( targetError1 )) {
HXLINE( 113)						targetError1 = ((Float)1.05);
            					}
HXLINE(  24)					Float rSmall1;
HXDLIN(  24)					if ((rightRadius > ry1)) {
HXLINE(  24)						rSmall1 = ry1;
            					}
            					else {
HXLINE(  24)						rSmall1 = rightRadius;
            					}
HXDLIN(  24)					 ::Dynamic targetE1 = ( (Float)(targetError1) );
HXDLIN(  24)					if (::hx::IsNull( targetE1 )) {
HXDLIN(  20)						targetE1 = ((Float)1.05);
            					}
HXLINE(  24)					int result1 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE1) ) / rSmall1)))));
HXDLIN(  24)					int noSides1;
HXDLIN(  24)					if ((result1 < 12)) {
HXLINE(  24)						noSides1 = 12;
            					}
            					else {
HXLINE(  24)						if ((result1 > 500)) {
HXLINE(  24)							noSides1 = 500;
            						}
            						else {
HXLINE(  24)							noSides1 = result1;
            						}
            					}
HXDLIN(  24)					int sides1 = (::Math_obj::ceil((( (Float)(noSides1) ) / ( (Float)(4) ))) * 4);
HXDLIN(  24)					Float theta1 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides1) ));
HXDLIN(  24)					Float omega1 = ((( (Float)(3) ) * ::Math_obj::PI) / ( (Float)(2) ));
HXDLIN(  24)					int quarter1 = ::Std_obj::_hx_int((( (Float)(sides1) ) / ( (Float)(4) )));
HXDLIN(  24)					Float lastX1 = ((Float)0.);
HXDLIN(  24)					Float lastY1 = ((Float)0.);
HXDLIN(  24)					{
HXLINE(  26)						lastX1 = (farX + (rightRadius * ::Math_obj::cos(((( (Float)(sides1) ) * theta1) + omega1))));
HXLINE(  27)						lastY1 = (cy2 + (ry1 * ::Math_obj::sin(((( (Float)(sides1) ) * theta1) + omega1))));
            					}
HXLINE(  24)					{
HXLINE(  24)						int _g38 = 0;
HXDLIN(  24)						int _g39 = (quarter1 + 1);
HXDLIN(  24)						while((_g38 < _g39)){
HXLINE(  24)							_g38 = (_g38 + 1);
HXDLIN(  24)							int i15 = (_g38 - 1);
HXDLIN(  24)							Float nextX1 = (farX + (rightRadius * ::Math_obj::cos((((( (Float)(i15) ) * theta1) + ((Float)0.0001)) + omega1))));
HXDLIN(  24)							Float nextY1 = (cy2 + (ry1 * ::Math_obj::sin((((( (Float)(i15) ) * theta1) + ((Float)0.0001)) + omega1))));
HXDLIN(  24)							{
HXLINE(  24)								 ::pi_xy::ImageStruct this51 = this50;
HXDLIN(  24)								bool hasHit1 = false;
HXDLIN(  24)								bool hasUndo1 = false;
HXDLIN(  24)								{
HXLINE(  24)									Float bx1 = lastX1;
HXDLIN(  24)									Float by1 = lastY1;
HXDLIN(  24)									Float cx2 = nextX1;
HXDLIN(  24)									Float cy3 = nextY1;
HXDLIN(  24)									bool adjustWinding1 = (((((farX * by1) - (bx1 * cy2)) + ((bx1 * cy3) - (cx2 * by1))) + ((cx2 * cy2) - (farX * cy3))) > 0);
HXDLIN(  24)									if (!(adjustWinding1)) {
HXLINE(  24)										Float bx_1 = bx1;
HXDLIN(  24)										Float by_1 = by1;
HXLINE(  25)										bx1 = cx2;
HXLINE(  26)										by1 = cy3;
HXLINE(  27)										cx2 = bx_1;
HXLINE(  28)										cy3 = by_1;
            									}
HXLINE(  24)									{
HXLINE(  24)										Float s01 = ((cy2 * cx2) - (farX * cy3));
HXDLIN(  24)										Float sx1 = (cy3 - cy2);
HXDLIN(  24)										Float sy1 = (farX - cx2);
HXDLIN(  24)										Float t01 = ((farX * by1) - (cy2 * bx1));
HXDLIN(  24)										Float tx1 = (cy2 - by1);
HXDLIN(  24)										Float ty1 = (bx1 - farX);
HXDLIN(  24)										Float A1 = ((((-(by1) * cx2) + (cy2 * (-(bx1) + cx2))) + (farX * (by1 - cy3))) + (bx1 * cy3));
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  24)										if ((farX > bx1)) {
HXLINE(  24)											if ((farX > cx2)) {
HXLINE(  24)												int min4;
HXDLIN(  24)												if ((bx1 > cx2)) {
HXLINE(  24)													min4 = ::Math_obj::floor(cx2);
            												}
            												else {
HXLINE(  24)													min4 = ::Math_obj::floor(bx1);
            												}
HXDLIN(  24)												int ii_min10 = min4;
HXDLIN(  24)												int ii_max10 = ::Math_obj::ceil(farX);
HXDLIN(  24)												xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            											}
            											else {
HXLINE(  24)												int ii_min11 = ::Math_obj::floor(bx1);
HXDLIN(  24)												int ii_max11 = ::Math_obj::ceil(cx2);
HXDLIN(  24)												xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            											}
            										}
            										else {
HXLINE(  24)											if ((bx1 > cx2)) {
HXLINE(  24)												int min5;
HXDLIN(  24)												if ((farX > cx2)) {
HXLINE(  24)													min5 = ::Math_obj::floor(cx2);
            												}
            												else {
HXLINE(  24)													min5 = ::Math_obj::ceil(farX);
            												}
HXDLIN(  24)												int ii_min12 = min5;
HXDLIN(  24)												int ii_max12 = ::Math_obj::ceil(bx1);
HXDLIN(  24)												xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            											}
            											else {
HXLINE(  24)												int ii_min13 = ::Math_obj::floor(farX);
HXDLIN(  24)												int ii_max13 = ::Math_obj::ceil(cx2);
HXDLIN(  24)												xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            											}
            										}
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  24)										if ((cy2 > by1)) {
HXLINE(  24)											if ((cy2 > cy3)) {
HXLINE(  24)												int min6;
HXDLIN(  24)												if ((by1 > cy3)) {
HXLINE(  24)													min6 = ::Math_obj::floor(cy3);
            												}
            												else {
HXLINE(  24)													min6 = ::Math_obj::floor(by1);
            												}
HXDLIN(  24)												int ii_min14 = min6;
HXDLIN(  24)												int ii_max14 = ::Math_obj::ceil(cy2);
HXDLIN(  24)												yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            											}
            											else {
HXLINE(  24)												int ii_min15 = ::Math_obj::floor(by1);
HXDLIN(  24)												int ii_max15 = ::Math_obj::ceil(cy3);
HXDLIN(  24)												yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            											}
            										}
            										else {
HXLINE(  24)											if ((by1 > cy3)) {
HXLINE(  24)												int min7;
HXDLIN(  24)												if ((cy2 > cy3)) {
HXLINE(  24)													min7 = ::Math_obj::floor(cy3);
            												}
            												else {
HXLINE(  24)													min7 = ::Math_obj::ceil(cy2);
            												}
HXDLIN(  24)												int ii_min16 = min7;
HXDLIN(  24)												int ii_max16 = ::Math_obj::ceil(by1);
HXDLIN(  24)												yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            											}
            											else {
HXLINE(  24)												int ii_min17 = ::Math_obj::floor(cy2);
HXDLIN(  24)												int ii_max17 = ::Math_obj::ceil(cy3);
HXDLIN(  24)												yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            											}
            										}
HXDLIN(  24)										 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  24)										if (hasUndo1) {
HXLINE(  24)											int width2 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  24)											int height2 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  24)											 ::Dynamic imageType2 = null();
HXDLIN(  24)											 ::pi_xy::ImageStruct this52 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  24)											if (::hx::IsNull( imageType2 )) {
HXLINE(  54)												imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  24)											::Dynamic undoImage4;
HXDLIN(  24)											switch((int)(( (int)(imageType2) ))){
            												case (int)0: {
HXLINE(  24)													 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::BytesImg b9 = byt2;
HXDLIN(  24)													{
HXLINE(  24)														b9->width = width2;
HXDLIN(  24)														b9->height = height2;
HXDLIN(  24)														b9->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  24)														b9->data = ::haxe::io::Bytes_obj::alloc((b9->length * 4));
HXDLIN(  24)														{
HXLINE(  24)															int len4 = b9->length;
HXDLIN(  24)															int w2 = 0;
HXDLIN(  24)															{
HXLINE(  24)																int _g40 = 0;
HXDLIN(  24)																int _g41 = b9->height;
HXDLIN(  24)																while((_g40 < _g41)){
HXLINE(  24)																	_g40 = (_g40 + 1);
HXDLIN(  24)																	int y7 = (_g40 - 1);
HXDLIN(  24)																	{
HXLINE(  24)																		int _g42 = 0;
HXDLIN(  24)																		int _g43 = b9->width;
HXDLIN(  24)																		while((_g42 < _g43)){
HXLINE(  24)																			_g42 = (_g42 + 1);
HXDLIN(  24)																			int x7 = (_g42 - 1);
HXDLIN(  24)																			{
HXLINE(  24)																				w2 = (w2 + 1);
HXDLIN(  24)																				b9->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w2 = (w2 + 1);
HXDLIN(  24)																				b9->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w2 = (w2 + 1);
HXDLIN(  24)																				b9->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w2 = (w2 + 1);
HXDLIN(  24)																				b9->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage4 = b9;
            												}
            												break;
            												case (int)1: {
HXLINE(  24)													 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::ArrIntImg a7 = arrI2;
HXDLIN(  24)													{
HXLINE(  24)														a7->width = width2;
HXDLIN(  24)														a7->height = height2;
HXDLIN(  24)														a7->data = ::Array_obj< int >::__new(0);
HXDLIN(  24)														a7->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  24)														{
HXLINE(  24)															int _g44 = 0;
HXDLIN(  24)															int _g45 = a7->length;
HXDLIN(  24)															while((_g44 < _g45)){
HXLINE(  24)																_g44 = (_g44 + 1);
HXDLIN(  24)																int i16 = (_g44 - 1);
HXDLIN(  24)																a7->data[i16] = 0;
            															}
            														}
            													}
HXDLIN(  24)													undoImage4 = a7;
            												}
            												break;
            												case (int)2: {
HXLINE(  24)													 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::U32ArrImg b10 = u32a2;
HXDLIN(  24)													{
HXLINE(  24)														b10->width = width2;
HXDLIN(  24)														b10->height = height2;
HXDLIN(  24)														b10->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  24)														int size2 = (b10->length * 4);
HXDLIN(  24)														b10->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  24)														{
HXLINE(  24)															int _g46 = 0;
HXDLIN(  24)															int _g47 = b10->length;
HXDLIN(  24)															while((_g46 < _g47)){
HXLINE(  24)																_g46 = (_g46 + 1);
HXDLIN(  24)																int i17 = (_g46 - 1);
HXDLIN(  24)																{
HXLINE(  24)																	 ::haxe::io::ArrayBufferViewImpl this53 = b10->data;
HXDLIN(  24)																	bool undoImage5;
HXDLIN(  24)																	if ((i17 >= 0)) {
HXLINE(  24)																		undoImage5 = (i17 < (this53->byteLength >> 2));
            																	}
            																	else {
HXLINE(  24)																		undoImage5 = false;
            																	}
HXDLIN(  24)																	if (undoImage5) {
HXLINE(  24)																		 ::haxe::io::Bytes _this2 = this53->bytes;
HXDLIN(  24)																		int pos2 = ((i17 << 2) + this53->byteOffset);
HXDLIN(  24)																		_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage4 = b10;
            												}
            												break;
            												case (int)3: {
HXLINE(  24)													 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::VecIntImg v4 = vec2;
HXDLIN(  24)													{
HXLINE(  24)														v4->width = width2;
HXDLIN(  24)														v4->height = height2;
HXDLIN(  24)														v4->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  24)														v4->data = ::Array_obj< int >::__new(v4->length);
HXDLIN(  24)														{
HXLINE(  24)															int _g48 = 0;
HXDLIN(  24)															int _g49 = v4->length;
HXDLIN(  24)															while((_g48 < _g49)){
HXLINE(  24)																_g48 = (_g48 + 1);
HXDLIN(  24)																int i18 = (_g48 - 1);
HXDLIN(  24)																v4->data->__unsafe_set(i18,0);
            															}
            														}
            													}
HXDLIN(  24)													undoImage4 = v4;
            												}
            												break;
            												case (int)4: {
HXLINE(  24)													 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::StackIntImg b14 = sInt2;
HXDLIN(  24)													{
HXLINE(  24)														b14->width = width2;
HXDLIN(  24)														b14->height = height2;
HXDLIN(  24)														b14->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  24)														b14->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  24)														{
HXLINE(  24)															int len5 = b14->length;
HXDLIN(  24)															 ::haxe::ds::GenericStack_Int d2 = b14->data;
HXDLIN(  24)															if (::hx::IsNull( d2->head )) {
HXLINE(  24)																int _g50 = 0;
HXDLIN(  24)																int _g51 = len5;
HXDLIN(  24)																while((_g50 < _g51)){
HXLINE(  24)																	_g50 = (_g50 + 1);
HXDLIN(  24)																	int i19 = (_g50 - 1);
HXDLIN(  24)																	d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            																}
            															}
            															else {
HXLINE(  24)																int _g52 = 0;
HXDLIN(  24)																int _g53 = len5;
HXDLIN(  24)																while((_g52 < _g53)){
HXLINE(  24)																	_g52 = (_g52 + 1);
HXDLIN(  24)																	int i20 = (_g52 - 1);
HXDLIN(  24)																	{
HXLINE(  24)																		 ::haxe::ds::GenericCell_Int l2 = b14->data->head;
HXDLIN(  24)																		 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  24)																		{
HXLINE(  24)																			int _g54 = 0;
HXDLIN(  24)																			int _g55 = i20;
HXDLIN(  24)																			while((_g54 < _g55)){
HXLINE(  24)																				_g54 = (_g54 + 1);
HXDLIN(  24)																				int i21 = (_g54 - 1);
HXLINE( 345)																				prev2 = l2;
HXLINE( 346)																				l2 = l2->next;
            																			}
            																		}
HXLINE(  24)																		if (::hx::IsNull( prev2 )) {
HXLINE(  24)																			b14->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  24)																			l2 = null();
            																		}
            																		else {
HXLINE(  24)																			prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  24)																			l2 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage4 = b14;
            												}
            												break;
            											}
HXDLIN(  24)											this52->image = undoImage4;
HXDLIN(  24)											this52->width = width2;
HXDLIN(  24)											this52->height = height2;
HXDLIN(  24)											this52->imageType = ( (int)(imageType2) );
HXDLIN(  24)											undoImage3 = this52;
HXDLIN(  24)											{
HXLINE(  24)												int rectLeft1 = xIter31->start;
HXDLIN(  24)												int rectTop1 = yIter31->start;
HXDLIN(  24)												int rectRight1 = xIter31->max;
HXDLIN(  24)												bool forceClear1 = false;
HXDLIN(  24)												{
HXLINE(  24)													int _g56 = rectTop1;
HXDLIN(  24)													int _g57 = yIter31->max;
HXDLIN(  24)													while((_g56 < _g57)){
HXLINE(  24)														_g56 = (_g56 + 1);
HXDLIN(  24)														int dy3 = (_g56 - 1);
HXDLIN(  24)														{
HXLINE(  24)															int _g58 = rectLeft1;
HXDLIN(  24)															int _g59 = rectRight1;
HXDLIN(  24)															while((_g58 < _g59)){
HXLINE(  24)																_g58 = (_g58 + 1);
HXDLIN(  24)																int dx3 = (_g58 - 1);
HXDLIN(  24)																::Dynamic this54 = this51->image;
HXDLIN(  24)																int index6;
HXDLIN(  24)																if (this51->useVirtualPos) {
HXLINE(  24)																	index6 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this51->virtualY) * ( (Float)(this51->width) )) + dx3) - this51->virtualX));
            																}
            																else {
HXLINE(  24)																	index6 = ::Std_obj::_hx_int(( (Float)(((dy3 * this51->width) + dx3)) ));
            																}
HXDLIN(  24)																int c5 = ::iterMagic::Iimg_obj::get(this54,index6);
HXDLIN(  24)																int col1;
HXDLIN(  24)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																	col1 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            																}
            																else {
HXLINE(  24)																	col1 = c5;
            																}
HXDLIN(  24)																bool _hx_tmp13;
HXDLIN(  24)																if (this51->useMask) {
HXLINE(  24)																	_hx_tmp13 = ::hx::IsNotNull( this51->mask );
            																}
            																else {
HXLINE(  24)																	_hx_tmp13 = false;
            																}
HXDLIN(  24)																if (_hx_tmp13) {
HXLINE(  24)																	 ::pi_xy::ImageStruct this55 = this51->mask;
HXDLIN(  24)																	::Dynamic this56 = this55->image;
HXDLIN(  24)																	int index7;
HXDLIN(  24)																	if (this55->useVirtualPos) {
HXLINE(  24)																		index7 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this55->virtualY) * ( (Float)(this55->width) )) + dx3) - this55->virtualX));
            																	}
            																	else {
HXLINE(  24)																		index7 = ::Std_obj::_hx_int(( (Float)(((dy3 * this55->width) + dx3)) ));
            																	}
HXDLIN(  24)																	int c6 = ::iterMagic::Iimg_obj::get(this56,index7);
HXDLIN(  24)																	int v5;
HXDLIN(  24)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																		v5 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            																	}
            																	else {
HXLINE(  24)																		v5 = c6;
            																	}
HXDLIN(  24)																	int maskPixel1 = v5;
HXDLIN(  24)																	int this57 = col1;
HXDLIN(  24)																	if ((maskPixel1 == 0)) {
HXLINE(  24)																		col1 = this57;
            																	}
            																	else {
HXLINE(  24)																		Float m01;
HXDLIN(  24)																		int this58 = ((maskPixel1 >> 24) & 255);
HXDLIN(  24)																		if ((this58 == 0)) {
HXLINE(  24)																			m01 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m01 = (( (Float)(this58) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m11;
HXDLIN(  24)																		int this59 = ((maskPixel1 >> 16) & 255);
HXDLIN(  24)																		if ((this59 == 0)) {
HXLINE(  24)																			m11 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m11 = (( (Float)(this59) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m21;
HXDLIN(  24)																		int this60 = ((maskPixel1 >> 8) & 255);
HXDLIN(  24)																		if ((this60 == 0)) {
HXLINE(  24)																			m21 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m21 = (( (Float)(this60) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m31;
HXDLIN(  24)																		int this61 = (maskPixel1 & 255);
HXDLIN(  24)																		if ((this61 == 0)) {
HXLINE(  24)																			m31 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m31 = (( (Float)(this61) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this57 >> 24) & 255)) )));
HXDLIN(  24)																		int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this57 >> 16) & 255)) )));
HXDLIN(  24)																		int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this57 >> 8) & 255)) )));
HXDLIN(  24)																		int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this57 & 255)) )));
HXDLIN(  24)																		col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  24)																if ((col1 != 0)) {
HXLINE(  24)																	int x8 = (dx3 - rectLeft1);
HXDLIN(  24)																	int y8 = (dy3 - rectTop1);
HXDLIN(  24)																	int c7 = col1;
HXDLIN(  24)																	bool _hx_tmp14;
HXDLIN(  24)																	if ((((c7 >> 24) & 255) < 254)) {
HXLINE(  24)																		_hx_tmp14 = undoImage3->transparent;
            																	}
            																	else {
HXLINE(  24)																		_hx_tmp14 = false;
            																	}
HXDLIN(  24)																	if (_hx_tmp14) {
HXLINE(  24)																		int location3;
HXDLIN(  24)																		if (undoImage3->useVirtualPos) {
HXLINE(  24)																			location3 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x8) - undoImage3->virtualX));
            																		}
            																		else {
HXLINE(  24)																			location3 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage3->width) + x8)) ));
            																		}
HXDLIN(  24)																		int this62 = ::iterMagic::Iimg_obj::get(undoImage3->image,location3);
HXDLIN(  24)																		int this63;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			this63 = ((((((this62 >> 24) & 255) << 24) | ((this62 & 255) << 16)) | (((this62 >> 8) & 255) << 8)) | ((this62 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			this63 = this62;
            																		}
HXDLIN(  24)																		Float a14;
HXDLIN(  24)																		int this64 = ((this63 >> 24) & 255);
HXDLIN(  24)																		if ((this64 == 0)) {
HXLINE(  24)																			a14 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a14 = (( (Float)(this64) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r13;
HXDLIN(  24)																		int this65 = ((this63 >> 16) & 255);
HXDLIN(  24)																		if ((this65 == 0)) {
HXLINE(  24)																			r13 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r13 = (( (Float)(this65) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g13;
HXDLIN(  24)																		int this66 = ((this63 >> 8) & 255);
HXDLIN(  24)																		if ((this66 == 0)) {
HXLINE(  24)																			g13 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g13 = (( (Float)(this66) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b15;
HXDLIN(  24)																		int this67 = (this63 & 255);
HXDLIN(  24)																		if ((this67 == 0)) {
HXLINE(  24)																			b15 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b15 = (( (Float)(this67) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a23;
HXDLIN(  24)																		int this68 = ((col1 >> 24) & 255);
HXDLIN(  24)																		if ((this68 == 0)) {
HXLINE(  24)																			a23 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a23 = (( (Float)(this68) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r23;
HXDLIN(  24)																		int this69 = ((col1 >> 16) & 255);
HXDLIN(  24)																		if ((this69 == 0)) {
HXLINE(  24)																			r23 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r23 = (( (Float)(this69) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g23;
HXDLIN(  24)																		int this70 = ((col1 >> 8) & 255);
HXDLIN(  24)																		if ((this70 == 0)) {
HXLINE(  24)																			g23 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g23 = (( (Float)(this70) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b24;
HXDLIN(  24)																		int this71 = (col1 & 255);
HXDLIN(  24)																		if ((this71 == 0)) {
HXLINE(  24)																			b24 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b24 = (( (Float)(this71) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN(  24)																		int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  24)																		int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  24)																		int b16 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a33) + (b24 * a23))));
HXDLIN(  24)																		int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  24)																		int blended3 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b16);
HXDLIN(  24)																		{
HXLINE(  24)																			int _hx_tmp15;
HXDLIN(  24)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																				_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            																			}
            																			else {
HXLINE(  24)																				_hx_tmp15 = blended3;
            																			}
HXDLIN(  24)																			::iterMagic::Iimg_obj::set(undoImage3->image,location3,_hx_tmp15);
            																		}
            																	}
            																	else {
HXLINE(  24)																		::Dynamic this72 = undoImage3->image;
HXDLIN(  24)																		int index8;
HXDLIN(  24)																		if (undoImage3->useVirtualPos) {
HXLINE(  24)																			index8 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x8) - undoImage3->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index8 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage3->width) + x8)) ));
            																		}
HXDLIN(  24)																		int _hx_tmp16;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			_hx_tmp16 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			_hx_tmp16 = c7;
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this72,index8,_hx_tmp16);
            																	}
            																}
            																else {
HXLINE(  24)																	if (forceClear1) {
HXLINE(  24)																		::Dynamic this73 = undoImage3->image;
HXDLIN(  24)																		int x9 = (dx3 - rectLeft1);
HXDLIN(  24)																		int y9 = (dy3 - rectTop1);
HXDLIN(  24)																		int index9;
HXDLIN(  24)																		if (undoImage3->useVirtualPos) {
HXLINE(  24)																			index9 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x9) - undoImage3->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index9 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage3->width) + x9)) ));
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this73,index9,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  24)										bool found1 = false;
HXDLIN(  24)										Float s1 = ((Float)0.);
HXDLIN(  24)										Float t1 = ((Float)0.);
HXDLIN(  24)										Float sxx1 = ((Float)0.);
HXDLIN(  24)										Float txx1 = ((Float)0.);
HXDLIN(  24)										{
HXLINE(  24)											int _g_min2 = xIter31->start;
HXDLIN(  24)											int _g_max2 = xIter31->max;
HXDLIN(  24)											while((_g_min2 < _g_max2)){
HXLINE(  24)												_g_min2 = (_g_min2 + 1);
HXDLIN(  24)												int x10 = (_g_min2 - 1);
HXLINE(  60)												sxx1 = (sx1 * ( (Float)(x10) ));
HXLINE(  61)												txx1 = (tx1 * ( (Float)(x10) ));
HXLINE(  62)												found1 = false;
HXLINE(  24)												{
HXLINE(  24)													int _g_min3 = yIter31->start;
HXDLIN(  24)													int _g_max3 = yIter31->max;
HXDLIN(  24)													while((_g_min3 < _g_max3)){
HXLINE(  24)														_g_min3 = (_g_min3 + 1);
HXDLIN(  24)														int y10 = (_g_min3 - 1);
HXLINE(  64)														s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y10) )));
HXLINE(  65)														t1 = ((t01 + txx1) + (ty1 * ( (Float)(y10) )));
HXLINE(  24)														bool _hx_tmp17;
HXDLIN(  24)														if (!((s1 <= 0))) {
HXLINE(  24)															_hx_tmp17 = (t1 <= 0);
            														}
            														else {
HXLINE(  24)															_hx_tmp17 = true;
            														}
HXDLIN(  24)														if (_hx_tmp17) {
HXLINE(  24)															if (found1) {
HXLINE(  24)																goto _hx_goto_43;
            															}
            														}
            														else {
HXLINE(  24)															if (((s1 + t1) < A1)) {
HXLINE(  24)																{
HXLINE(  24)																	int c8 = color;
HXDLIN(  24)																	bool _hx_tmp18;
HXDLIN(  24)																	if ((((c8 >> 24) & 255) < 254)) {
HXLINE(  24)																		_hx_tmp18 = this51->transparent;
            																	}
            																	else {
HXLINE(  24)																		_hx_tmp18 = false;
            																	}
HXDLIN(  24)																	if (_hx_tmp18) {
HXLINE(  24)																		int location4;
HXDLIN(  24)																		if (this51->useVirtualPos) {
HXLINE(  24)																			location4 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - this51->virtualY) * ( (Float)(this51->width) )) + x10) - this51->virtualX));
            																		}
            																		else {
HXLINE(  24)																			location4 = ::Std_obj::_hx_int(( (Float)(((y10 * this51->width) + x10)) ));
            																		}
HXDLIN(  24)																		int this74 = ::iterMagic::Iimg_obj::get(this51->image,location4);
HXDLIN(  24)																		int this75;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			this75 = ((((((this74 >> 24) & 255) << 24) | ((this74 & 255) << 16)) | (((this74 >> 8) & 255) << 8)) | ((this74 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			this75 = this74;
            																		}
HXDLIN(  24)																		Float a15;
HXDLIN(  24)																		int this76 = ((this75 >> 24) & 255);
HXDLIN(  24)																		if ((this76 == 0)) {
HXLINE(  24)																			a15 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a15 = (( (Float)(this76) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r14;
HXDLIN(  24)																		int this77 = ((this75 >> 16) & 255);
HXDLIN(  24)																		if ((this77 == 0)) {
HXLINE(  24)																			r14 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r14 = (( (Float)(this77) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g14;
HXDLIN(  24)																		int this78 = ((this75 >> 8) & 255);
HXDLIN(  24)																		if ((this78 == 0)) {
HXLINE(  24)																			g14 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g14 = (( (Float)(this78) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b17;
HXDLIN(  24)																		int this79 = (this75 & 255);
HXDLIN(  24)																		if ((this79 == 0)) {
HXLINE(  24)																			b17 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b17 = (( (Float)(this79) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a24;
HXDLIN(  24)																		int this80 = ((color >> 24) & 255);
HXDLIN(  24)																		if ((this80 == 0)) {
HXLINE(  24)																			a24 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a24 = (( (Float)(this80) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r24;
HXDLIN(  24)																		int this81 = ((color >> 16) & 255);
HXDLIN(  24)																		if ((this81 == 0)) {
HXLINE(  24)																			r24 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r24 = (( (Float)(this81) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g24;
HXDLIN(  24)																		int this82 = ((color >> 8) & 255);
HXDLIN(  24)																		if ((this82 == 0)) {
HXLINE(  24)																			g24 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g24 = (( (Float)(this82) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b25;
HXDLIN(  24)																		int this83 = (color & 255);
HXDLIN(  24)																		if ((this83 == 0)) {
HXLINE(  24)																			b25 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b25 = (( (Float)(this83) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a34 = (a15 * (( (Float)(1) ) - a24));
HXDLIN(  24)																		int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  24)																		int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  24)																		int b18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b17 * a34) + (b25 * a24))));
HXDLIN(  24)																		int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  24)																		int blended4 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b18);
HXDLIN(  24)																		{
HXLINE(  24)																			int _hx_tmp19;
HXDLIN(  24)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																				_hx_tmp19 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            																			}
            																			else {
HXLINE(  24)																				_hx_tmp19 = blended4;
            																			}
HXDLIN(  24)																			::iterMagic::Iimg_obj::set(this51->image,location4,_hx_tmp19);
            																		}
            																	}
            																	else {
HXLINE(  24)																		::Dynamic this84 = this51->image;
HXDLIN(  24)																		int index10;
HXDLIN(  24)																		if (this51->useVirtualPos) {
HXLINE(  24)																			index10 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - this51->virtualY) * ( (Float)(this51->width) )) + x10) - this51->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index10 = ::Std_obj::_hx_int(( (Float)(((y10 * this51->width) + x10)) ));
            																		}
HXDLIN(  24)																		int _hx_tmp20;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			_hx_tmp20 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			_hx_tmp20 = c8;
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this84,index10,_hx_tmp20);
            																	}
            																}
HXLINE(  73)																found1 = true;
            															}
            															else {
HXLINE(  24)																if (found1) {
HXLINE(  24)																	goto _hx_goto_43;
            																}
            															}
            														}
            													}
            													_hx_goto_43:;
            												}
            											}
            										}
HXDLIN(  24)										if ((hasHit1 == true)) {
HXLINE(  24)											 ::pi_xy::algo::HitTri v6 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX,cy2,bx1,by1,cx2,cy3,true);
HXDLIN(  24)											if (hasUndo1) {
HXLINE(  24)												v6->undoImage = undoImage3;
HXDLIN(  24)												v6->undoX = xIter31->start;
HXDLIN(  24)												v6->undoY = yIter31->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX1 = nextX1;
HXLINE(  47)							lastY1 = nextY1;
            						}
            					}
            				}
            			}
HXLINE(  24)			{
HXLINE(  24)				int r_x1 = 0;
HXDLIN(  24)				int r_y1 = ::Std_obj::_hx_int(( (Float)(dy1) ));
HXDLIN(  24)				int r_w1 = ::Std_obj::_hx_int(wid);
HXDLIN(  24)				int r_h1 = ::Std_obj::_hx_int(( (Float)(tall1) ));
HXDLIN(  24)				int xmax1 = ((r_x1 + r_w1) + 1);
HXDLIN(  24)				int ymax1 = ((r_y1 + r_h1) + 1);
HXDLIN(  24)				int ii_min18 = r_x1;
HXDLIN(  24)				int ii_max18 = xmax1;
HXDLIN(  24)				int xRange__start1 = ii_min18;
HXDLIN(  24)				int xRange__max1 = ii_max18;
HXDLIN(  24)				int ii_min19 = r_y1;
HXDLIN(  24)				int ii_max19 = ymax1;
HXDLIN(  24)				int yRange__start1 = ii_min19;
HXDLIN(  24)				int yRange__max1 = ii_max19;
HXDLIN(  24)				int range_x1 = xRange__start1;
HXDLIN(  24)				int range_y1 = (yRange__start1 - 1);
HXDLIN(  24)				int range_xReset1 = range_x1;
HXDLIN(  24)				int range_yReset1 = range_y1;
HXDLIN(  24)				int range_xMax1 = (xRange__max1 - 2);
HXDLIN(  24)				int range_yMax1 = (yRange__max1 - 2);
HXDLIN(  24)				int _this_min1 = 0;
HXDLIN(  24)				int _this_max1 = ::Std_obj::_hx_int(( (Float)(((xRange__max1 - xRange__start1) * (yRange__max1 - yRange__start1))) ));
HXDLIN(  24)				while((_this_min1 < _this_max1)){
HXLINE(  24)					_this_min1 = (_this_min1 + 1);
HXDLIN(  24)					int i22 = (_this_min1 - 1);
HXDLIN(  24)					if ((range_y1 > range_yMax1)) {
HXLINE(  24)						range_y1 = range_yReset1;
HXDLIN(  24)						range_x1 = (range_x1 + 1);
            					}
HXDLIN(  24)					range_y1 = (range_y1 + 1);
HXDLIN(  24)					int i23 = i22;
HXDLIN(  24)					{
HXLINE(  24)						int x11 = range_x1;
HXDLIN(  24)						int y11 = range_y1;
HXDLIN(  24)						int c9 = color;
HXDLIN(  24)						bool _hx_tmp21;
HXDLIN(  24)						if ((((c9 >> 24) & 255) < 254)) {
HXLINE(  24)							_hx_tmp21 = temp->transparent;
            						}
            						else {
HXLINE(  24)							_hx_tmp21 = false;
            						}
HXDLIN(  24)						if (_hx_tmp21) {
HXLINE(  24)							int location5;
HXDLIN(  24)							if (temp->useVirtualPos) {
HXLINE(  24)								location5 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - temp->virtualY) * ( (Float)(temp->width) )) + x11) - temp->virtualX));
            							}
            							else {
HXLINE(  24)								location5 = ::Std_obj::_hx_int(( (Float)(((y11 * temp->width) + x11)) ));
            							}
HXDLIN(  24)							int this85 = ::iterMagic::Iimg_obj::get(temp->image,location5);
HXDLIN(  24)							int this86;
HXDLIN(  24)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)								this86 = ((((((this85 >> 24) & 255) << 24) | ((this85 & 255) << 16)) | (((this85 >> 8) & 255) << 8)) | ((this85 >> 16) & 255));
            							}
            							else {
HXLINE(  24)								this86 = this85;
            							}
HXDLIN(  24)							Float a16;
HXDLIN(  24)							int this87 = ((this86 >> 24) & 255);
HXDLIN(  24)							if ((this87 == 0)) {
HXLINE(  24)								a16 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								a16 = (( (Float)(this87) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float r15;
HXDLIN(  24)							int this88 = ((this86 >> 16) & 255);
HXDLIN(  24)							if ((this88 == 0)) {
HXLINE(  24)								r15 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								r15 = (( (Float)(this88) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float g15;
HXDLIN(  24)							int this89 = ((this86 >> 8) & 255);
HXDLIN(  24)							if ((this89 == 0)) {
HXLINE(  24)								g15 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								g15 = (( (Float)(this89) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float b19;
HXDLIN(  24)							int this90 = (this86 & 255);
HXDLIN(  24)							if ((this90 == 0)) {
HXLINE(  24)								b19 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								b19 = (( (Float)(this90) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float a25;
HXDLIN(  24)							int this91 = ((color >> 24) & 255);
HXDLIN(  24)							if ((this91 == 0)) {
HXLINE(  24)								a25 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								a25 = (( (Float)(this91) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float r25;
HXDLIN(  24)							int this92 = ((color >> 16) & 255);
HXDLIN(  24)							if ((this92 == 0)) {
HXLINE(  24)								r25 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								r25 = (( (Float)(this92) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float g25;
HXDLIN(  24)							int this93 = ((color >> 8) & 255);
HXDLIN(  24)							if ((this93 == 0)) {
HXLINE(  24)								g25 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								g25 = (( (Float)(this93) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float b26;
HXDLIN(  24)							int this94 = (color & 255);
HXDLIN(  24)							if ((this94 == 0)) {
HXLINE(  24)								b26 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								b26 = (( (Float)(this94) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float a35 = (a16 * (( (Float)(1) ) - a25));
HXDLIN(  24)							int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  24)							int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  24)							int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a35) + (b26 * a25))));
HXDLIN(  24)							int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  24)							int blended5 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b20);
HXDLIN(  24)							{
HXLINE(  24)								int _hx_tmp22;
HXDLIN(  24)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)									_hx_tmp22 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            								}
            								else {
HXLINE(  24)									_hx_tmp22 = blended5;
            								}
HXDLIN(  24)								::iterMagic::Iimg_obj::set(temp->image,location5,_hx_tmp22);
            							}
            						}
            						else {
HXLINE(  24)							::Dynamic this95 = temp->image;
HXDLIN(  24)							int index11;
HXDLIN(  24)							if (temp->useVirtualPos) {
HXLINE(  24)								index11 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - temp->virtualY) * ( (Float)(temp->width) )) + x11) - temp->virtualX));
            							}
            							else {
HXLINE(  24)								index11 = ::Std_obj::_hx_int(( (Float)(((y11 * temp->width) + x11)) ));
            							}
HXDLIN(  24)							int _hx_tmp23;
HXDLIN(  24)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)								_hx_tmp23 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            							}
            							else {
HXLINE(  24)								_hx_tmp23 = c9;
            							}
HXDLIN(  24)							::iterMagic::Iimg_obj::set(this95,index11,_hx_tmp23);
            						}
            					}
            				}
            			}
HXDLIN(  24)			{
HXLINE(  24)				 ::pi_xy::ImageStruct this96 = temp;
HXDLIN(  24)				Float cx3 = ( (Float)(dx1) );
HXDLIN(  24)				Float rx1 = ( (Float)(dx1) );
HXDLIN(  24)				{
HXLINE(  24)					 ::Dynamic targetError2 = ((Float)1.05);
HXDLIN(  24)					if (::hx::IsNull( targetError2 )) {
HXLINE( 113)						targetError2 = ((Float)1.05);
            					}
HXLINE(  24)					Float rSmall2;
HXDLIN(  24)					if ((rx1 > bottomRadius)) {
HXLINE(  24)						rSmall2 = bottomRadius;
            					}
            					else {
HXLINE(  24)						rSmall2 = rx1;
            					}
HXDLIN(  24)					 ::Dynamic targetE2 = ( (Float)(targetError2) );
HXDLIN(  24)					if (::hx::IsNull( targetE2 )) {
HXDLIN(  20)						targetE2 = ((Float)1.05);
            					}
HXLINE(  24)					int result2 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE2) ) / rSmall2)))));
HXDLIN(  24)					int noSides2;
HXDLIN(  24)					if ((result2 < 12)) {
HXLINE(  24)						noSides2 = 12;
            					}
            					else {
HXLINE(  24)						if ((result2 > 500)) {
HXLINE(  24)							noSides2 = 500;
            						}
            						else {
HXLINE(  24)							noSides2 = result2;
            						}
            					}
HXDLIN(  24)					int sides2 = (::Math_obj::ceil((( (Float)(noSides2) ) / ( (Float)(4) ))) * 4);
HXDLIN(  24)					Float theta2 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides2) ));
HXDLIN(  24)					Float omega2 = (::Math_obj::PI / ( (Float)(2) ));
HXDLIN(  24)					int quarter2 = ::Std_obj::_hx_int((( (Float)(sides2) ) / ( (Float)(4) )));
HXDLIN(  24)					Float lastX2 = ((Float)0.);
HXDLIN(  24)					Float lastY2 = ((Float)0.);
HXDLIN(  24)					{
HXLINE(  26)						lastX2 = (cx3 + (rx1 * ::Math_obj::cos(((( (Float)(sides2) ) * theta2) + omega2))));
HXLINE(  27)						lastY2 = (lowerY + (bottomRadius * ::Math_obj::sin(((( (Float)(sides2) ) * theta2) + omega2))));
            					}
HXLINE(  24)					{
HXLINE(  24)						int _g60 = 0;
HXDLIN(  24)						int _g61 = (quarter2 + 1);
HXDLIN(  24)						while((_g60 < _g61)){
HXLINE(  24)							_g60 = (_g60 + 1);
HXDLIN(  24)							int i24 = (_g60 - 1);
HXDLIN(  24)							Float nextX2 = (cx3 + (rx1 * ::Math_obj::cos((((( (Float)(i24) ) * theta2) + ((Float)0.0001)) + omega2))));
HXDLIN(  24)							Float nextY2 = (lowerY + (bottomRadius * ::Math_obj::sin((((( (Float)(i24) ) * theta2) + ((Float)0.0001)) + omega2))));
HXDLIN(  24)							{
HXLINE(  24)								 ::pi_xy::ImageStruct this97 = this96;
HXDLIN(  24)								bool hasHit2 = false;
HXDLIN(  24)								bool hasUndo2 = false;
HXDLIN(  24)								{
HXLINE(  24)									Float bx2 = lastX2;
HXDLIN(  24)									Float by2 = lastY2;
HXDLIN(  24)									Float cx4 = nextX2;
HXDLIN(  24)									Float cy4 = nextY2;
HXDLIN(  24)									bool adjustWinding2 = (((((cx3 * by2) - (bx2 * lowerY)) + ((bx2 * cy4) - (cx4 * by2))) + ((cx4 * lowerY) - (cx3 * cy4))) > 0);
HXDLIN(  24)									if (!(adjustWinding2)) {
HXLINE(  24)										Float bx_2 = bx2;
HXDLIN(  24)										Float by_2 = by2;
HXLINE(  25)										bx2 = cx4;
HXLINE(  26)										by2 = cy4;
HXLINE(  27)										cx4 = bx_2;
HXLINE(  28)										cy4 = by_2;
            									}
HXLINE(  24)									{
HXLINE(  24)										Float s02 = ((lowerY * cx4) - (cx3 * cy4));
HXDLIN(  24)										Float sx2 = (cy4 - lowerY);
HXDLIN(  24)										Float sy2 = (cx3 - cx4);
HXDLIN(  24)										Float t02 = ((cx3 * by2) - (lowerY * bx2));
HXDLIN(  24)										Float tx2 = (lowerY - by2);
HXDLIN(  24)										Float ty2 = (bx2 - cx3);
HXDLIN(  24)										Float A2 = ((((-(by2) * cx4) + (lowerY * (-(bx2) + cx4))) + (cx3 * (by2 - cy4))) + (bx2 * cy4));
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  24)										if ((cx3 > bx2)) {
HXLINE(  24)											if ((cx3 > cx4)) {
HXLINE(  24)												int min8;
HXDLIN(  24)												if ((bx2 > cx4)) {
HXLINE(  24)													min8 = ::Math_obj::floor(cx4);
            												}
            												else {
HXLINE(  24)													min8 = ::Math_obj::floor(bx2);
            												}
HXDLIN(  24)												int ii_min20 = min8;
HXDLIN(  24)												int ii_max20 = ::Math_obj::ceil(cx3);
HXDLIN(  24)												xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            											}
            											else {
HXLINE(  24)												int ii_min21 = ::Math_obj::floor(bx2);
HXDLIN(  24)												int ii_max21 = ::Math_obj::ceil(cx4);
HXDLIN(  24)												xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            											}
            										}
            										else {
HXLINE(  24)											if ((bx2 > cx4)) {
HXLINE(  24)												int min9;
HXDLIN(  24)												if ((cx3 > cx4)) {
HXLINE(  24)													min9 = ::Math_obj::floor(cx4);
            												}
            												else {
HXLINE(  24)													min9 = ::Math_obj::ceil(cx3);
            												}
HXDLIN(  24)												int ii_min22 = min9;
HXDLIN(  24)												int ii_max22 = ::Math_obj::ceil(bx2);
HXDLIN(  24)												xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            											}
            											else {
HXLINE(  24)												int ii_min23 = ::Math_obj::floor(cx3);
HXDLIN(  24)												int ii_max23 = ::Math_obj::ceil(cx4);
HXDLIN(  24)												xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            											}
            										}
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  24)										if ((lowerY > by2)) {
HXLINE(  24)											if ((lowerY > cy4)) {
HXLINE(  24)												int min10;
HXDLIN(  24)												if ((by2 > cy4)) {
HXLINE(  24)													min10 = ::Math_obj::floor(cy4);
            												}
            												else {
HXLINE(  24)													min10 = ::Math_obj::floor(by2);
            												}
HXDLIN(  24)												int ii_min24 = min10;
HXDLIN(  24)												int ii_max24 = ::Math_obj::ceil(lowerY);
HXDLIN(  24)												yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            											}
            											else {
HXLINE(  24)												int ii_min25 = ::Math_obj::floor(by2);
HXDLIN(  24)												int ii_max25 = ::Math_obj::ceil(cy4);
HXDLIN(  24)												yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            											}
            										}
            										else {
HXLINE(  24)											if ((by2 > cy4)) {
HXLINE(  24)												int min11;
HXDLIN(  24)												if ((lowerY > cy4)) {
HXLINE(  24)													min11 = ::Math_obj::floor(cy4);
            												}
            												else {
HXLINE(  24)													min11 = ::Math_obj::ceil(lowerY);
            												}
HXDLIN(  24)												int ii_min26 = min11;
HXDLIN(  24)												int ii_max26 = ::Math_obj::ceil(by2);
HXDLIN(  24)												yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            											}
            											else {
HXLINE(  24)												int ii_min27 = ::Math_obj::floor(lowerY);
HXDLIN(  24)												int ii_max27 = ::Math_obj::ceil(cy4);
HXDLIN(  24)												yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            											}
            										}
HXDLIN(  24)										 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  24)										if (hasUndo2) {
HXLINE(  24)											int width3 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  24)											int height3 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  24)											 ::Dynamic imageType3 = null();
HXDLIN(  24)											 ::pi_xy::ImageStruct this98 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  24)											if (::hx::IsNull( imageType3 )) {
HXLINE(  54)												imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  24)											::Dynamic undoImage7;
HXDLIN(  24)											switch((int)(( (int)(imageType3) ))){
            												case (int)0: {
HXLINE(  24)													 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::BytesImg b27 = byt3;
HXDLIN(  24)													{
HXLINE(  24)														b27->width = width3;
HXDLIN(  24)														b27->height = height3;
HXDLIN(  24)														b27->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  24)														b27->data = ::haxe::io::Bytes_obj::alloc((b27->length * 4));
HXDLIN(  24)														{
HXLINE(  24)															int len6 = b27->length;
HXDLIN(  24)															int w3 = 0;
HXDLIN(  24)															{
HXLINE(  24)																int _g62 = 0;
HXDLIN(  24)																int _g63 = b27->height;
HXDLIN(  24)																while((_g62 < _g63)){
HXLINE(  24)																	_g62 = (_g62 + 1);
HXDLIN(  24)																	int y12 = (_g62 - 1);
HXDLIN(  24)																	{
HXLINE(  24)																		int _g64 = 0;
HXDLIN(  24)																		int _g65 = b27->width;
HXDLIN(  24)																		while((_g64 < _g65)){
HXLINE(  24)																			_g64 = (_g64 + 1);
HXDLIN(  24)																			int x12 = (_g64 - 1);
HXDLIN(  24)																			{
HXLINE(  24)																				w3 = (w3 + 1);
HXDLIN(  24)																				b27->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w3 = (w3 + 1);
HXDLIN(  24)																				b27->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w3 = (w3 + 1);
HXDLIN(  24)																				b27->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w3 = (w3 + 1);
HXDLIN(  24)																				b27->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage7 = b27;
            												}
            												break;
            												case (int)1: {
HXLINE(  24)													 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::ArrIntImg a17 = arrI3;
HXDLIN(  24)													{
HXLINE(  24)														a17->width = width3;
HXDLIN(  24)														a17->height = height3;
HXDLIN(  24)														a17->data = ::Array_obj< int >::__new(0);
HXDLIN(  24)														a17->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  24)														{
HXLINE(  24)															int _g66 = 0;
HXDLIN(  24)															int _g67 = a17->length;
HXDLIN(  24)															while((_g66 < _g67)){
HXLINE(  24)																_g66 = (_g66 + 1);
HXDLIN(  24)																int i25 = (_g66 - 1);
HXDLIN(  24)																a17->data[i25] = 0;
            															}
            														}
            													}
HXDLIN(  24)													undoImage7 = a17;
            												}
            												break;
            												case (int)2: {
HXLINE(  24)													 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::U32ArrImg b28 = u32a3;
HXDLIN(  24)													{
HXLINE(  24)														b28->width = width3;
HXDLIN(  24)														b28->height = height3;
HXDLIN(  24)														b28->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  24)														int size3 = (b28->length * 4);
HXDLIN(  24)														b28->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  24)														{
HXLINE(  24)															int _g68 = 0;
HXDLIN(  24)															int _g69 = b28->length;
HXDLIN(  24)															while((_g68 < _g69)){
HXLINE(  24)																_g68 = (_g68 + 1);
HXDLIN(  24)																int i26 = (_g68 - 1);
HXDLIN(  24)																{
HXLINE(  24)																	 ::haxe::io::ArrayBufferViewImpl this99 = b28->data;
HXDLIN(  24)																	bool undoImage8;
HXDLIN(  24)																	if ((i26 >= 0)) {
HXLINE(  24)																		undoImage8 = (i26 < (this99->byteLength >> 2));
            																	}
            																	else {
HXLINE(  24)																		undoImage8 = false;
            																	}
HXDLIN(  24)																	if (undoImage8) {
HXLINE(  24)																		 ::haxe::io::Bytes _this3 = this99->bytes;
HXDLIN(  24)																		int pos3 = ((i26 << 2) + this99->byteOffset);
HXDLIN(  24)																		_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage7 = b28;
            												}
            												break;
            												case (int)3: {
HXLINE(  24)													 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::VecIntImg v7 = vec3;
HXDLIN(  24)													{
HXLINE(  24)														v7->width = width3;
HXDLIN(  24)														v7->height = height3;
HXDLIN(  24)														v7->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  24)														v7->data = ::Array_obj< int >::__new(v7->length);
HXDLIN(  24)														{
HXLINE(  24)															int _g70 = 0;
HXDLIN(  24)															int _g71 = v7->length;
HXDLIN(  24)															while((_g70 < _g71)){
HXLINE(  24)																_g70 = (_g70 + 1);
HXDLIN(  24)																int i27 = (_g70 - 1);
HXDLIN(  24)																v7->data->__unsafe_set(i27,0);
            															}
            														}
            													}
HXDLIN(  24)													undoImage7 = v7;
            												}
            												break;
            												case (int)4: {
HXLINE(  24)													 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::StackIntImg b29 = sInt3;
HXDLIN(  24)													{
HXLINE(  24)														b29->width = width3;
HXDLIN(  24)														b29->height = height3;
HXDLIN(  24)														b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  24)														b29->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  24)														{
HXLINE(  24)															int len7 = b29->length;
HXDLIN(  24)															 ::haxe::ds::GenericStack_Int d3 = b29->data;
HXDLIN(  24)															if (::hx::IsNull( d3->head )) {
HXLINE(  24)																int _g72 = 0;
HXDLIN(  24)																int _g73 = len7;
HXDLIN(  24)																while((_g72 < _g73)){
HXLINE(  24)																	_g72 = (_g72 + 1);
HXDLIN(  24)																	int i28 = (_g72 - 1);
HXDLIN(  24)																	d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            																}
            															}
            															else {
HXLINE(  24)																int _g74 = 0;
HXDLIN(  24)																int _g75 = len7;
HXDLIN(  24)																while((_g74 < _g75)){
HXLINE(  24)																	_g74 = (_g74 + 1);
HXDLIN(  24)																	int i29 = (_g74 - 1);
HXDLIN(  24)																	{
HXLINE(  24)																		 ::haxe::ds::GenericCell_Int l3 = b29->data->head;
HXDLIN(  24)																		 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  24)																		{
HXLINE(  24)																			int _g76 = 0;
HXDLIN(  24)																			int _g77 = i29;
HXDLIN(  24)																			while((_g76 < _g77)){
HXLINE(  24)																				_g76 = (_g76 + 1);
HXDLIN(  24)																				int i30 = (_g76 - 1);
HXLINE( 345)																				prev3 = l3;
HXLINE( 346)																				l3 = l3->next;
            																			}
            																		}
HXLINE(  24)																		if (::hx::IsNull( prev3 )) {
HXLINE(  24)																			b29->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  24)																			l3 = null();
            																		}
            																		else {
HXLINE(  24)																			prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  24)																			l3 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage7 = b29;
            												}
            												break;
            											}
HXDLIN(  24)											this98->image = undoImage7;
HXDLIN(  24)											this98->width = width3;
HXDLIN(  24)											this98->height = height3;
HXDLIN(  24)											this98->imageType = ( (int)(imageType3) );
HXDLIN(  24)											undoImage6 = this98;
HXDLIN(  24)											{
HXLINE(  24)												int rectLeft2 = xIter32->start;
HXDLIN(  24)												int rectTop2 = yIter32->start;
HXDLIN(  24)												int rectRight2 = xIter32->max;
HXDLIN(  24)												bool forceClear2 = false;
HXDLIN(  24)												{
HXLINE(  24)													int _g78 = rectTop2;
HXDLIN(  24)													int _g79 = yIter32->max;
HXDLIN(  24)													while((_g78 < _g79)){
HXLINE(  24)														_g78 = (_g78 + 1);
HXDLIN(  24)														int dy4 = (_g78 - 1);
HXDLIN(  24)														{
HXLINE(  24)															int _g80 = rectLeft2;
HXDLIN(  24)															int _g81 = rectRight2;
HXDLIN(  24)															while((_g80 < _g81)){
HXLINE(  24)																_g80 = (_g80 + 1);
HXDLIN(  24)																int dx4 = (_g80 - 1);
HXDLIN(  24)																::Dynamic this100 = this97->image;
HXDLIN(  24)																int index12;
HXDLIN(  24)																if (this97->useVirtualPos) {
HXLINE(  24)																	index12 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this97->virtualY) * ( (Float)(this97->width) )) + dx4) - this97->virtualX));
            																}
            																else {
HXLINE(  24)																	index12 = ::Std_obj::_hx_int(( (Float)(((dy4 * this97->width) + dx4)) ));
            																}
HXDLIN(  24)																int c10 = ::iterMagic::Iimg_obj::get(this100,index12);
HXDLIN(  24)																int col2;
HXDLIN(  24)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																	col2 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            																}
            																else {
HXLINE(  24)																	col2 = c10;
            																}
HXDLIN(  24)																bool _hx_tmp24;
HXDLIN(  24)																if (this97->useMask) {
HXLINE(  24)																	_hx_tmp24 = ::hx::IsNotNull( this97->mask );
            																}
            																else {
HXLINE(  24)																	_hx_tmp24 = false;
            																}
HXDLIN(  24)																if (_hx_tmp24) {
HXLINE(  24)																	 ::pi_xy::ImageStruct this101 = this97->mask;
HXDLIN(  24)																	::Dynamic this102 = this101->image;
HXDLIN(  24)																	int index13;
HXDLIN(  24)																	if (this101->useVirtualPos) {
HXLINE(  24)																		index13 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this101->virtualY) * ( (Float)(this101->width) )) + dx4) - this101->virtualX));
            																	}
            																	else {
HXLINE(  24)																		index13 = ::Std_obj::_hx_int(( (Float)(((dy4 * this101->width) + dx4)) ));
            																	}
HXDLIN(  24)																	int c11 = ::iterMagic::Iimg_obj::get(this102,index13);
HXDLIN(  24)																	int v8;
HXDLIN(  24)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																		v8 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            																	}
            																	else {
HXLINE(  24)																		v8 = c11;
            																	}
HXDLIN(  24)																	int maskPixel2 = v8;
HXDLIN(  24)																	int this103 = col2;
HXDLIN(  24)																	if ((maskPixel2 == 0)) {
HXLINE(  24)																		col2 = this103;
            																	}
            																	else {
HXLINE(  24)																		Float m02;
HXDLIN(  24)																		int this104 = ((maskPixel2 >> 24) & 255);
HXDLIN(  24)																		if ((this104 == 0)) {
HXLINE(  24)																			m02 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m02 = (( (Float)(this104) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m12;
HXDLIN(  24)																		int this105 = ((maskPixel2 >> 16) & 255);
HXDLIN(  24)																		if ((this105 == 0)) {
HXLINE(  24)																			m12 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m12 = (( (Float)(this105) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m22;
HXDLIN(  24)																		int this106 = ((maskPixel2 >> 8) & 255);
HXDLIN(  24)																		if ((this106 == 0)) {
HXLINE(  24)																			m22 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m22 = (( (Float)(this106) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m32;
HXDLIN(  24)																		int this107 = (maskPixel2 & 255);
HXDLIN(  24)																		if ((this107 == 0)) {
HXLINE(  24)																			m32 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m32 = (( (Float)(this107) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this103 >> 24) & 255)) )));
HXDLIN(  24)																		int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this103 >> 16) & 255)) )));
HXDLIN(  24)																		int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this103 >> 8) & 255)) )));
HXDLIN(  24)																		int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this103 & 255)) )));
HXDLIN(  24)																		col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  24)																if ((col2 != 0)) {
HXLINE(  24)																	int x13 = (dx4 - rectLeft2);
HXDLIN(  24)																	int y13 = (dy4 - rectTop2);
HXDLIN(  24)																	int c12 = col2;
HXDLIN(  24)																	bool _hx_tmp25;
HXDLIN(  24)																	if ((((c12 >> 24) & 255) < 254)) {
HXLINE(  24)																		_hx_tmp25 = undoImage6->transparent;
            																	}
            																	else {
HXLINE(  24)																		_hx_tmp25 = false;
            																	}
HXDLIN(  24)																	if (_hx_tmp25) {
HXLINE(  24)																		int location6;
HXDLIN(  24)																		if (undoImage6->useVirtualPos) {
HXLINE(  24)																			location6 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x13) - undoImage6->virtualX));
            																		}
            																		else {
HXLINE(  24)																			location6 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage6->width) + x13)) ));
            																		}
HXDLIN(  24)																		int this108 = ::iterMagic::Iimg_obj::get(undoImage6->image,location6);
HXDLIN(  24)																		int this109;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			this109 = ((((((this108 >> 24) & 255) << 24) | ((this108 & 255) << 16)) | (((this108 >> 8) & 255) << 8)) | ((this108 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			this109 = this108;
            																		}
HXDLIN(  24)																		Float a18;
HXDLIN(  24)																		int this110 = ((this109 >> 24) & 255);
HXDLIN(  24)																		if ((this110 == 0)) {
HXLINE(  24)																			a18 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a18 = (( (Float)(this110) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r16;
HXDLIN(  24)																		int this111 = ((this109 >> 16) & 255);
HXDLIN(  24)																		if ((this111 == 0)) {
HXLINE(  24)																			r16 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r16 = (( (Float)(this111) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g16;
HXDLIN(  24)																		int this112 = ((this109 >> 8) & 255);
HXDLIN(  24)																		if ((this112 == 0)) {
HXLINE(  24)																			g16 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g16 = (( (Float)(this112) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b110;
HXDLIN(  24)																		int this113 = (this109 & 255);
HXDLIN(  24)																		if ((this113 == 0)) {
HXLINE(  24)																			b110 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b110 = (( (Float)(this113) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a26;
HXDLIN(  24)																		int this114 = ((col2 >> 24) & 255);
HXDLIN(  24)																		if ((this114 == 0)) {
HXLINE(  24)																			a26 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a26 = (( (Float)(this114) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r26;
HXDLIN(  24)																		int this115 = ((col2 >> 16) & 255);
HXDLIN(  24)																		if ((this115 == 0)) {
HXLINE(  24)																			r26 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r26 = (( (Float)(this115) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g26;
HXDLIN(  24)																		int this116 = ((col2 >> 8) & 255);
HXDLIN(  24)																		if ((this116 == 0)) {
HXLINE(  24)																			g26 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g26 = (( (Float)(this116) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b210;
HXDLIN(  24)																		int this117 = (col2 & 255);
HXDLIN(  24)																		if ((this117 == 0)) {
HXLINE(  24)																			b210 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b210 = (( (Float)(this117) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a36 = (a18 * (( (Float)(1) ) - a26));
HXDLIN(  24)																		int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a26))));
HXDLIN(  24)																		int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a26))));
HXDLIN(  24)																		int b30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a36) + (b210 * a26))));
HXDLIN(  24)																		int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a26)));
HXDLIN(  24)																		int blended6 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b30);
HXDLIN(  24)																		{
HXLINE(  24)																			int _hx_tmp26;
HXDLIN(  24)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																				_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            																			}
            																			else {
HXLINE(  24)																				_hx_tmp26 = blended6;
            																			}
HXDLIN(  24)																			::iterMagic::Iimg_obj::set(undoImage6->image,location6,_hx_tmp26);
            																		}
            																	}
            																	else {
HXLINE(  24)																		::Dynamic this118 = undoImage6->image;
HXDLIN(  24)																		int index14;
HXDLIN(  24)																		if (undoImage6->useVirtualPos) {
HXLINE(  24)																			index14 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x13) - undoImage6->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index14 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage6->width) + x13)) ));
            																		}
HXDLIN(  24)																		int _hx_tmp27;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			_hx_tmp27 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			_hx_tmp27 = c12;
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this118,index14,_hx_tmp27);
            																	}
            																}
            																else {
HXLINE(  24)																	if (forceClear2) {
HXLINE(  24)																		::Dynamic this119 = undoImage6->image;
HXDLIN(  24)																		int x14 = (dx4 - rectLeft2);
HXDLIN(  24)																		int y14 = (dy4 - rectTop2);
HXDLIN(  24)																		int index15;
HXDLIN(  24)																		if (undoImage6->useVirtualPos) {
HXLINE(  24)																			index15 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x14) - undoImage6->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index15 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage6->width) + x14)) ));
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this119,index15,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  24)										bool found2 = false;
HXDLIN(  24)										Float s2 = ((Float)0.);
HXDLIN(  24)										Float t2 = ((Float)0.);
HXDLIN(  24)										Float sxx2 = ((Float)0.);
HXDLIN(  24)										Float txx2 = ((Float)0.);
HXDLIN(  24)										{
HXLINE(  24)											int _g_min4 = xIter32->start;
HXDLIN(  24)											int _g_max4 = xIter32->max;
HXDLIN(  24)											while((_g_min4 < _g_max4)){
HXLINE(  24)												_g_min4 = (_g_min4 + 1);
HXDLIN(  24)												int x15 = (_g_min4 - 1);
HXLINE(  60)												sxx2 = (sx2 * ( (Float)(x15) ));
HXLINE(  61)												txx2 = (tx2 * ( (Float)(x15) ));
HXLINE(  62)												found2 = false;
HXLINE(  24)												{
HXLINE(  24)													int _g_min5 = yIter32->start;
HXDLIN(  24)													int _g_max5 = yIter32->max;
HXDLIN(  24)													while((_g_min5 < _g_max5)){
HXLINE(  24)														_g_min5 = (_g_min5 + 1);
HXDLIN(  24)														int y15 = (_g_min5 - 1);
HXLINE(  64)														s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y15) )));
HXLINE(  65)														t2 = ((t02 + txx2) + (ty2 * ( (Float)(y15) )));
HXLINE(  24)														bool _hx_tmp28;
HXDLIN(  24)														if (!((s2 <= 0))) {
HXLINE(  24)															_hx_tmp28 = (t2 <= 0);
            														}
            														else {
HXLINE(  24)															_hx_tmp28 = true;
            														}
HXDLIN(  24)														if (_hx_tmp28) {
HXLINE(  24)															if (found2) {
HXLINE(  24)																goto _hx_goto_57;
            															}
            														}
            														else {
HXLINE(  24)															if (((s2 + t2) < A2)) {
HXLINE(  24)																{
HXLINE(  24)																	int c13 = color;
HXDLIN(  24)																	bool _hx_tmp29;
HXDLIN(  24)																	if ((((c13 >> 24) & 255) < 254)) {
HXLINE(  24)																		_hx_tmp29 = this97->transparent;
            																	}
            																	else {
HXLINE(  24)																		_hx_tmp29 = false;
            																	}
HXDLIN(  24)																	if (_hx_tmp29) {
HXLINE(  24)																		int location7;
HXDLIN(  24)																		if (this97->useVirtualPos) {
HXLINE(  24)																			location7 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - this97->virtualY) * ( (Float)(this97->width) )) + x15) - this97->virtualX));
            																		}
            																		else {
HXLINE(  24)																			location7 = ::Std_obj::_hx_int(( (Float)(((y15 * this97->width) + x15)) ));
            																		}
HXDLIN(  24)																		int this120 = ::iterMagic::Iimg_obj::get(this97->image,location7);
HXDLIN(  24)																		int this121;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			this121 = ((((((this120 >> 24) & 255) << 24) | ((this120 & 255) << 16)) | (((this120 >> 8) & 255) << 8)) | ((this120 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			this121 = this120;
            																		}
HXDLIN(  24)																		Float a110;
HXDLIN(  24)																		int this122 = ((this121 >> 24) & 255);
HXDLIN(  24)																		if ((this122 == 0)) {
HXLINE(  24)																			a110 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a110 = (( (Float)(this122) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r17;
HXDLIN(  24)																		int this123 = ((this121 >> 16) & 255);
HXDLIN(  24)																		if ((this123 == 0)) {
HXLINE(  24)																			r17 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r17 = (( (Float)(this123) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g17;
HXDLIN(  24)																		int this124 = ((this121 >> 8) & 255);
HXDLIN(  24)																		if ((this124 == 0)) {
HXLINE(  24)																			g17 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g17 = (( (Float)(this124) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b111;
HXDLIN(  24)																		int this125 = (this121 & 255);
HXDLIN(  24)																		if ((this125 == 0)) {
HXLINE(  24)																			b111 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b111 = (( (Float)(this125) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a27;
HXDLIN(  24)																		int this126 = ((color >> 24) & 255);
HXDLIN(  24)																		if ((this126 == 0)) {
HXLINE(  24)																			a27 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a27 = (( (Float)(this126) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r27;
HXDLIN(  24)																		int this127 = ((color >> 16) & 255);
HXDLIN(  24)																		if ((this127 == 0)) {
HXLINE(  24)																			r27 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r27 = (( (Float)(this127) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g27;
HXDLIN(  24)																		int this128 = ((color >> 8) & 255);
HXDLIN(  24)																		if ((this128 == 0)) {
HXLINE(  24)																			g27 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g27 = (( (Float)(this128) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b211;
HXDLIN(  24)																		int this129 = (color & 255);
HXDLIN(  24)																		if ((this129 == 0)) {
HXLINE(  24)																			b211 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b211 = (( (Float)(this129) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a37 = (a110 * (( (Float)(1) ) - a27));
HXDLIN(  24)																		int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a27))));
HXDLIN(  24)																		int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a27))));
HXDLIN(  24)																		int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a37) + (b211 * a27))));
HXDLIN(  24)																		int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a27)));
HXDLIN(  24)																		int blended7 = ((((a20 << 24) | (r9 << 16)) | (g9 << 8)) | b31);
HXDLIN(  24)																		{
HXLINE(  24)																			int _hx_tmp30;
HXDLIN(  24)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																				_hx_tmp30 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            																			}
            																			else {
HXLINE(  24)																				_hx_tmp30 = blended7;
            																			}
HXDLIN(  24)																			::iterMagic::Iimg_obj::set(this97->image,location7,_hx_tmp30);
            																		}
            																	}
            																	else {
HXLINE(  24)																		::Dynamic this130 = this97->image;
HXDLIN(  24)																		int index16;
HXDLIN(  24)																		if (this97->useVirtualPos) {
HXLINE(  24)																			index16 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - this97->virtualY) * ( (Float)(this97->width) )) + x15) - this97->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index16 = ::Std_obj::_hx_int(( (Float)(((y15 * this97->width) + x15)) ));
            																		}
HXDLIN(  24)																		int _hx_tmp31;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			_hx_tmp31 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			_hx_tmp31 = c13;
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this130,index16,_hx_tmp31);
            																	}
            																}
HXLINE(  73)																found2 = true;
            															}
            															else {
HXLINE(  24)																if (found2) {
HXLINE(  24)																	goto _hx_goto_57;
            																}
            															}
            														}
            													}
            													_hx_goto_57:;
            												}
            											}
            										}
HXDLIN(  24)										if ((hasHit2 == true)) {
HXLINE(  24)											 ::pi_xy::algo::HitTri v9 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx3,lowerY,bx2,by2,cx4,cy4,true);
HXDLIN(  24)											if (hasUndo2) {
HXLINE(  24)												v9->undoImage = undoImage6;
HXDLIN(  24)												v9->undoX = xIter32->start;
HXDLIN(  24)												v9->undoY = yIter32->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX2 = nextX2;
HXLINE(  47)							lastY2 = nextY2;
            						}
            					}
            				}
            			}
HXLINE(  24)			{
HXLINE(  24)				int r_x2 = ::Std_obj::_hx_int(( (Float)(dx1) ));
HXDLIN(  24)				int r_y2 = ::Std_obj::_hx_int(lowerY);
HXDLIN(  24)				int r_w2 = ::Std_obj::_hx_int(( (Float)(fat1) ));
HXDLIN(  24)				int r_h2 = ::Std_obj::_hx_int(bottomRadius);
HXDLIN(  24)				int xmax2 = ((r_x2 + r_w2) + 1);
HXDLIN(  24)				int ymax2 = ((r_y2 + r_h2) + 1);
HXDLIN(  24)				int ii_min28 = r_x2;
HXDLIN(  24)				int ii_max28 = xmax2;
HXDLIN(  24)				int xRange__start2 = ii_min28;
HXDLIN(  24)				int xRange__max2 = ii_max28;
HXDLIN(  24)				int ii_min29 = r_y2;
HXDLIN(  24)				int ii_max29 = ymax2;
HXDLIN(  24)				int yRange__start2 = ii_min29;
HXDLIN(  24)				int yRange__max2 = ii_max29;
HXDLIN(  24)				int range_x2 = xRange__start2;
HXDLIN(  24)				int range_y2 = (yRange__start2 - 1);
HXDLIN(  24)				int range_xReset2 = range_x2;
HXDLIN(  24)				int range_yReset2 = range_y2;
HXDLIN(  24)				int range_xMax2 = (xRange__max2 - 2);
HXDLIN(  24)				int range_yMax2 = (yRange__max2 - 2);
HXDLIN(  24)				int _this_min2 = 0;
HXDLIN(  24)				int _this_max2 = ::Std_obj::_hx_int(( (Float)(((xRange__max2 - xRange__start2) * (yRange__max2 - yRange__start2))) ));
HXDLIN(  24)				while((_this_min2 < _this_max2)){
HXLINE(  24)					_this_min2 = (_this_min2 + 1);
HXDLIN(  24)					int i31 = (_this_min2 - 1);
HXDLIN(  24)					if ((range_y2 > range_yMax2)) {
HXLINE(  24)						range_y2 = range_yReset2;
HXDLIN(  24)						range_x2 = (range_x2 + 1);
            					}
HXDLIN(  24)					range_y2 = (range_y2 + 1);
HXDLIN(  24)					int i32 = i31;
HXDLIN(  24)					{
HXLINE(  24)						int x16 = range_x2;
HXDLIN(  24)						int y16 = range_y2;
HXDLIN(  24)						int c14 = color;
HXDLIN(  24)						bool _hx_tmp32;
HXDLIN(  24)						if ((((c14 >> 24) & 255) < 254)) {
HXLINE(  24)							_hx_tmp32 = temp->transparent;
            						}
            						else {
HXLINE(  24)							_hx_tmp32 = false;
            						}
HXDLIN(  24)						if (_hx_tmp32) {
HXLINE(  24)							int location8;
HXDLIN(  24)							if (temp->useVirtualPos) {
HXLINE(  24)								location8 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - temp->virtualY) * ( (Float)(temp->width) )) + x16) - temp->virtualX));
            							}
            							else {
HXLINE(  24)								location8 = ::Std_obj::_hx_int(( (Float)(((y16 * temp->width) + x16)) ));
            							}
HXDLIN(  24)							int this131 = ::iterMagic::Iimg_obj::get(temp->image,location8);
HXDLIN(  24)							int this132;
HXDLIN(  24)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)								this132 = ((((((this131 >> 24) & 255) << 24) | ((this131 & 255) << 16)) | (((this131 >> 8) & 255) << 8)) | ((this131 >> 16) & 255));
            							}
            							else {
HXLINE(  24)								this132 = this131;
            							}
HXDLIN(  24)							Float a111;
HXDLIN(  24)							int this133 = ((this132 >> 24) & 255);
HXDLIN(  24)							if ((this133 == 0)) {
HXLINE(  24)								a111 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								a111 = (( (Float)(this133) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float r18;
HXDLIN(  24)							int this134 = ((this132 >> 16) & 255);
HXDLIN(  24)							if ((this134 == 0)) {
HXLINE(  24)								r18 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								r18 = (( (Float)(this134) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float g18;
HXDLIN(  24)							int this135 = ((this132 >> 8) & 255);
HXDLIN(  24)							if ((this135 == 0)) {
HXLINE(  24)								g18 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								g18 = (( (Float)(this135) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float b112;
HXDLIN(  24)							int this136 = (this132 & 255);
HXDLIN(  24)							if ((this136 == 0)) {
HXLINE(  24)								b112 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								b112 = (( (Float)(this136) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float a28;
HXDLIN(  24)							int this137 = ((color >> 24) & 255);
HXDLIN(  24)							if ((this137 == 0)) {
HXLINE(  24)								a28 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								a28 = (( (Float)(this137) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float r28;
HXDLIN(  24)							int this138 = ((color >> 16) & 255);
HXDLIN(  24)							if ((this138 == 0)) {
HXLINE(  24)								r28 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								r28 = (( (Float)(this138) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float g28;
HXDLIN(  24)							int this139 = ((color >> 8) & 255);
HXDLIN(  24)							if ((this139 == 0)) {
HXLINE(  24)								g28 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								g28 = (( (Float)(this139) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float b212;
HXDLIN(  24)							int this140 = (color & 255);
HXDLIN(  24)							if ((this140 == 0)) {
HXLINE(  24)								b212 = ((Float)0.);
            							}
            							else {
HXLINE(  24)								b212 = (( (Float)(this140) ) / ( (Float)(255) ));
            							}
HXDLIN(  24)							Float a38 = (a111 * (( (Float)(1) ) - a28));
HXDLIN(  24)							int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r28 * a28))));
HXDLIN(  24)							int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g28 * a28))));
HXDLIN(  24)							int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a38) + (b212 * a28))));
HXDLIN(  24)							int a29 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a28)));
HXDLIN(  24)							int blended8 = ((((a29 << 24) | (r10 << 16)) | (g10 << 8)) | b32);
HXDLIN(  24)							{
HXLINE(  24)								int _hx_tmp33;
HXDLIN(  24)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)									_hx_tmp33 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            								}
            								else {
HXLINE(  24)									_hx_tmp33 = blended8;
            								}
HXDLIN(  24)								::iterMagic::Iimg_obj::set(temp->image,location8,_hx_tmp33);
            							}
            						}
            						else {
HXLINE(  24)							::Dynamic this141 = temp->image;
HXDLIN(  24)							int index17;
HXDLIN(  24)							if (temp->useVirtualPos) {
HXLINE(  24)								index17 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - temp->virtualY) * ( (Float)(temp->width) )) + x16) - temp->virtualX));
            							}
            							else {
HXLINE(  24)								index17 = ::Std_obj::_hx_int(( (Float)(((y16 * temp->width) + x16)) ));
            							}
HXDLIN(  24)							int _hx_tmp34;
HXDLIN(  24)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)								_hx_tmp34 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            							}
            							else {
HXLINE(  24)								_hx_tmp34 = c14;
            							}
HXDLIN(  24)							::iterMagic::Iimg_obj::set(this141,index17,_hx_tmp34);
            						}
            					}
            				}
            			}
HXDLIN(  24)			{
HXLINE(  24)				 ::pi_xy::ImageStruct this142 = temp;
HXDLIN(  24)				{
HXLINE(  24)					 ::Dynamic targetError3 = ((Float)1.05);
HXDLIN(  24)					if (::hx::IsNull( targetError3 )) {
HXLINE( 113)						targetError3 = ((Float)1.05);
            					}
HXLINE(  24)					Float rSmall3;
HXDLIN(  24)					if ((rightRadius > bottomRadius)) {
HXLINE(  24)						rSmall3 = bottomRadius;
            					}
            					else {
HXLINE(  24)						rSmall3 = rightRadius;
            					}
HXDLIN(  24)					 ::Dynamic targetE3 = ( (Float)(targetError3) );
HXDLIN(  24)					if (::hx::IsNull( targetE3 )) {
HXDLIN(  20)						targetE3 = ((Float)1.05);
            					}
HXLINE(  24)					int result3 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE3) ) / rSmall3)))));
HXDLIN(  24)					int noSides3;
HXDLIN(  24)					if ((result3 < 12)) {
HXLINE(  24)						noSides3 = 12;
            					}
            					else {
HXLINE(  24)						if ((result3 > 500)) {
HXLINE(  24)							noSides3 = 500;
            						}
            						else {
HXLINE(  24)							noSides3 = result3;
            						}
            					}
HXDLIN(  24)					int sides3 = (::Math_obj::ceil((( (Float)(noSides3) ) / ( (Float)(4) ))) * 4);
HXDLIN(  24)					Float theta3 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides3) ));
HXDLIN(  24)					Float omega3 = ( (Float)(0) );
HXDLIN(  24)					int quarter3 = ::Std_obj::_hx_int((( (Float)(sides3) ) / ( (Float)(4) )));
HXDLIN(  24)					Float lastX3 = ((Float)0.);
HXDLIN(  24)					Float lastY3 = ((Float)0.);
HXDLIN(  24)					{
HXLINE(  26)						lastX3 = (farX + (rightRadius * ::Math_obj::cos(((( (Float)(sides3) ) * theta3) + omega3))));
HXLINE(  27)						lastY3 = (lowerY + (bottomRadius * ::Math_obj::sin(((( (Float)(sides3) ) * theta3) + omega3))));
            					}
HXLINE(  24)					{
HXLINE(  24)						int _g82 = 0;
HXDLIN(  24)						int _g83 = (quarter3 + 1);
HXDLIN(  24)						while((_g82 < _g83)){
HXLINE(  24)							_g82 = (_g82 + 1);
HXDLIN(  24)							int i33 = (_g82 - 1);
HXDLIN(  24)							Float nextX3 = (farX + (rightRadius * ::Math_obj::cos((((( (Float)(i33) ) * theta3) + ((Float)0.0001)) + omega3))));
HXDLIN(  24)							Float nextY3 = (lowerY + (bottomRadius * ::Math_obj::sin((((( (Float)(i33) ) * theta3) + ((Float)0.0001)) + omega3))));
HXDLIN(  24)							{
HXLINE(  24)								 ::pi_xy::ImageStruct this143 = this142;
HXDLIN(  24)								bool hasHit3 = false;
HXDLIN(  24)								bool hasUndo3 = false;
HXDLIN(  24)								{
HXLINE(  24)									Float bx3 = lastX3;
HXDLIN(  24)									Float by3 = lastY3;
HXDLIN(  24)									Float cx5 = nextX3;
HXDLIN(  24)									Float cy5 = nextY3;
HXDLIN(  24)									bool adjustWinding3 = (((((farX * by3) - (bx3 * lowerY)) + ((bx3 * cy5) - (cx5 * by3))) + ((cx5 * lowerY) - (farX * cy5))) > 0);
HXDLIN(  24)									if (!(adjustWinding3)) {
HXLINE(  24)										Float bx_3 = bx3;
HXDLIN(  24)										Float by_3 = by3;
HXLINE(  25)										bx3 = cx5;
HXLINE(  26)										by3 = cy5;
HXLINE(  27)										cx5 = bx_3;
HXLINE(  28)										cy5 = by_3;
            									}
HXLINE(  24)									{
HXLINE(  24)										Float s03 = ((lowerY * cx5) - (farX * cy5));
HXDLIN(  24)										Float sx3 = (cy5 - lowerY);
HXDLIN(  24)										Float sy3 = (farX - cx5);
HXDLIN(  24)										Float t03 = ((farX * by3) - (lowerY * bx3));
HXDLIN(  24)										Float tx3 = (lowerY - by3);
HXDLIN(  24)										Float ty3 = (bx3 - farX);
HXDLIN(  24)										Float A3 = ((((-(by3) * cx5) + (lowerY * (-(bx3) + cx5))) + (farX * (by3 - cy5))) + (bx3 * cy5));
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  24)										if ((farX > bx3)) {
HXLINE(  24)											if ((farX > cx5)) {
HXLINE(  24)												int min12;
HXDLIN(  24)												if ((bx3 > cx5)) {
HXLINE(  24)													min12 = ::Math_obj::floor(cx5);
            												}
            												else {
HXLINE(  24)													min12 = ::Math_obj::floor(bx3);
            												}
HXDLIN(  24)												int ii_min30 = min12;
HXDLIN(  24)												int ii_max30 = ::Math_obj::ceil(farX);
HXDLIN(  24)												xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            											}
            											else {
HXLINE(  24)												int ii_min31 = ::Math_obj::floor(bx3);
HXDLIN(  24)												int ii_max31 = ::Math_obj::ceil(cx5);
HXDLIN(  24)												xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            											}
            										}
            										else {
HXLINE(  24)											if ((bx3 > cx5)) {
HXLINE(  24)												int min13;
HXDLIN(  24)												if ((farX > cx5)) {
HXLINE(  24)													min13 = ::Math_obj::floor(cx5);
            												}
            												else {
HXLINE(  24)													min13 = ::Math_obj::ceil(farX);
            												}
HXDLIN(  24)												int ii_min32 = min13;
HXDLIN(  24)												int ii_max32 = ::Math_obj::ceil(bx3);
HXDLIN(  24)												xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            											}
            											else {
HXLINE(  24)												int ii_min33 = ::Math_obj::floor(farX);
HXDLIN(  24)												int ii_max33 = ::Math_obj::ceil(cx5);
HXDLIN(  24)												xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            											}
            										}
HXDLIN(  24)										 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  24)										if ((lowerY > by3)) {
HXLINE(  24)											if ((lowerY > cy5)) {
HXLINE(  24)												int min14;
HXDLIN(  24)												if ((by3 > cy5)) {
HXLINE(  24)													min14 = ::Math_obj::floor(cy5);
            												}
            												else {
HXLINE(  24)													min14 = ::Math_obj::floor(by3);
            												}
HXDLIN(  24)												int ii_min34 = min14;
HXDLIN(  24)												int ii_max34 = ::Math_obj::ceil(lowerY);
HXDLIN(  24)												yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            											}
            											else {
HXLINE(  24)												int ii_min35 = ::Math_obj::floor(by3);
HXDLIN(  24)												int ii_max35 = ::Math_obj::ceil(cy5);
HXDLIN(  24)												yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            											}
            										}
            										else {
HXLINE(  24)											if ((by3 > cy5)) {
HXLINE(  24)												int min15;
HXDLIN(  24)												if ((lowerY > cy5)) {
HXLINE(  24)													min15 = ::Math_obj::floor(cy5);
            												}
            												else {
HXLINE(  24)													min15 = ::Math_obj::ceil(lowerY);
            												}
HXDLIN(  24)												int ii_min36 = min15;
HXDLIN(  24)												int ii_max36 = ::Math_obj::ceil(by3);
HXDLIN(  24)												yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            											}
            											else {
HXLINE(  24)												int ii_min37 = ::Math_obj::floor(lowerY);
HXDLIN(  24)												int ii_max37 = ::Math_obj::ceil(cy5);
HXDLIN(  24)												yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            											}
            										}
HXDLIN(  24)										 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  24)										if (hasUndo3) {
HXLINE(  24)											int width4 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  24)											int height4 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  24)											 ::Dynamic imageType4 = null();
HXDLIN(  24)											 ::pi_xy::ImageStruct this144 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  24)											if (::hx::IsNull( imageType4 )) {
HXLINE(  54)												imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  24)											::Dynamic undoImage10;
HXDLIN(  24)											switch((int)(( (int)(imageType4) ))){
            												case (int)0: {
HXLINE(  24)													 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::BytesImg b33 = byt4;
HXDLIN(  24)													{
HXLINE(  24)														b33->width = width4;
HXDLIN(  24)														b33->height = height4;
HXDLIN(  24)														b33->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  24)														b33->data = ::haxe::io::Bytes_obj::alloc((b33->length * 4));
HXDLIN(  24)														{
HXLINE(  24)															int len8 = b33->length;
HXDLIN(  24)															int w4 = 0;
HXDLIN(  24)															{
HXLINE(  24)																int _g84 = 0;
HXDLIN(  24)																int _g85 = b33->height;
HXDLIN(  24)																while((_g84 < _g85)){
HXLINE(  24)																	_g84 = (_g84 + 1);
HXDLIN(  24)																	int y17 = (_g84 - 1);
HXDLIN(  24)																	{
HXLINE(  24)																		int _g86 = 0;
HXDLIN(  24)																		int _g87 = b33->width;
HXDLIN(  24)																		while((_g86 < _g87)){
HXLINE(  24)																			_g86 = (_g86 + 1);
HXDLIN(  24)																			int x17 = (_g86 - 1);
HXDLIN(  24)																			{
HXLINE(  24)																				w4 = (w4 + 1);
HXDLIN(  24)																				b33->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w4 = (w4 + 1);
HXDLIN(  24)																				b33->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w4 = (w4 + 1);
HXDLIN(  24)																				b33->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  24)																			{
HXLINE(  24)																				w4 = (w4 + 1);
HXDLIN(  24)																				b33->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage10 = b33;
            												}
            												break;
            												case (int)1: {
HXLINE(  24)													 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::ArrIntImg a30 = arrI4;
HXDLIN(  24)													{
HXLINE(  24)														a30->width = width4;
HXDLIN(  24)														a30->height = height4;
HXDLIN(  24)														a30->data = ::Array_obj< int >::__new(0);
HXDLIN(  24)														a30->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  24)														{
HXLINE(  24)															int _g88 = 0;
HXDLIN(  24)															int _g89 = a30->length;
HXDLIN(  24)															while((_g88 < _g89)){
HXLINE(  24)																_g88 = (_g88 + 1);
HXDLIN(  24)																int i34 = (_g88 - 1);
HXDLIN(  24)																a30->data[i34] = 0;
            															}
            														}
            													}
HXDLIN(  24)													undoImage10 = a30;
            												}
            												break;
            												case (int)2: {
HXLINE(  24)													 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::U32ArrImg b34 = u32a4;
HXDLIN(  24)													{
HXLINE(  24)														b34->width = width4;
HXDLIN(  24)														b34->height = height4;
HXDLIN(  24)														b34->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  24)														int size4 = (b34->length * 4);
HXDLIN(  24)														b34->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN(  24)														{
HXLINE(  24)															int _g90 = 0;
HXDLIN(  24)															int _g91 = b34->length;
HXDLIN(  24)															while((_g90 < _g91)){
HXLINE(  24)																_g90 = (_g90 + 1);
HXDLIN(  24)																int i35 = (_g90 - 1);
HXDLIN(  24)																{
HXLINE(  24)																	 ::haxe::io::ArrayBufferViewImpl this145 = b34->data;
HXDLIN(  24)																	bool undoImage11;
HXDLIN(  24)																	if ((i35 >= 0)) {
HXLINE(  24)																		undoImage11 = (i35 < (this145->byteLength >> 2));
            																	}
            																	else {
HXLINE(  24)																		undoImage11 = false;
            																	}
HXDLIN(  24)																	if (undoImage11) {
HXLINE(  24)																		 ::haxe::io::Bytes _this4 = this145->bytes;
HXDLIN(  24)																		int pos4 = ((i35 << 2) + this145->byteOffset);
HXDLIN(  24)																		_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN(  24)																		_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage10 = b34;
            												}
            												break;
            												case (int)3: {
HXLINE(  24)													 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::VecIntImg v10 = vec4;
HXDLIN(  24)													{
HXLINE(  24)														v10->width = width4;
HXDLIN(  24)														v10->height = height4;
HXDLIN(  24)														v10->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  24)														v10->data = ::Array_obj< int >::__new(v10->length);
HXDLIN(  24)														{
HXLINE(  24)															int _g92 = 0;
HXDLIN(  24)															int _g93 = v10->length;
HXDLIN(  24)															while((_g92 < _g93)){
HXLINE(  24)																_g92 = (_g92 + 1);
HXDLIN(  24)																int i36 = (_g92 - 1);
HXDLIN(  24)																v10->data->__unsafe_set(i36,0);
            															}
            														}
            													}
HXDLIN(  24)													undoImage10 = v10;
            												}
            												break;
            												case (int)4: {
HXLINE(  24)													 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  24)													 ::iterMagic::StackIntImg b35 = sInt4;
HXDLIN(  24)													{
HXLINE(  24)														b35->width = width4;
HXDLIN(  24)														b35->height = height4;
HXDLIN(  24)														b35->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  24)														b35->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  24)														{
HXLINE(  24)															int len9 = b35->length;
HXDLIN(  24)															 ::haxe::ds::GenericStack_Int d4 = b35->data;
HXDLIN(  24)															if (::hx::IsNull( d4->head )) {
HXLINE(  24)																int _g94 = 0;
HXDLIN(  24)																int _g95 = len9;
HXDLIN(  24)																while((_g94 < _g95)){
HXLINE(  24)																	_g94 = (_g94 + 1);
HXDLIN(  24)																	int i37 = (_g94 - 1);
HXDLIN(  24)																	d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            																}
            															}
            															else {
HXLINE(  24)																int _g96 = 0;
HXDLIN(  24)																int _g97 = len9;
HXDLIN(  24)																while((_g96 < _g97)){
HXLINE(  24)																	_g96 = (_g96 + 1);
HXDLIN(  24)																	int i38 = (_g96 - 1);
HXDLIN(  24)																	{
HXLINE(  24)																		 ::haxe::ds::GenericCell_Int l4 = b35->data->head;
HXDLIN(  24)																		 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN(  24)																		{
HXLINE(  24)																			int _g98 = 0;
HXDLIN(  24)																			int _g99 = i38;
HXDLIN(  24)																			while((_g98 < _g99)){
HXLINE(  24)																				_g98 = (_g98 + 1);
HXDLIN(  24)																				int i39 = (_g98 - 1);
HXLINE( 345)																				prev4 = l4;
HXLINE( 346)																				l4 = l4->next;
            																			}
            																		}
HXLINE(  24)																		if (::hx::IsNull( prev4 )) {
HXLINE(  24)																			b35->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  24)																			l4 = null();
            																		}
            																		else {
HXLINE(  24)																			prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  24)																			l4 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  24)													undoImage10 = b35;
            												}
            												break;
            											}
HXDLIN(  24)											this144->image = undoImage10;
HXDLIN(  24)											this144->width = width4;
HXDLIN(  24)											this144->height = height4;
HXDLIN(  24)											this144->imageType = ( (int)(imageType4) );
HXDLIN(  24)											undoImage9 = this144;
HXDLIN(  24)											{
HXLINE(  24)												int rectLeft3 = xIter33->start;
HXDLIN(  24)												int rectTop3 = yIter33->start;
HXDLIN(  24)												int rectRight3 = xIter33->max;
HXDLIN(  24)												bool forceClear3 = false;
HXDLIN(  24)												{
HXLINE(  24)													int _g100 = rectTop3;
HXDLIN(  24)													int _g101 = yIter33->max;
HXDLIN(  24)													while((_g100 < _g101)){
HXLINE(  24)														_g100 = (_g100 + 1);
HXDLIN(  24)														int dy5 = (_g100 - 1);
HXDLIN(  24)														{
HXLINE(  24)															int _g102 = rectLeft3;
HXDLIN(  24)															int _g103 = rectRight3;
HXDLIN(  24)															while((_g102 < _g103)){
HXLINE(  24)																_g102 = (_g102 + 1);
HXDLIN(  24)																int dx5 = (_g102 - 1);
HXDLIN(  24)																::Dynamic this146 = this143->image;
HXDLIN(  24)																int index18;
HXDLIN(  24)																if (this143->useVirtualPos) {
HXLINE(  24)																	index18 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this143->virtualY) * ( (Float)(this143->width) )) + dx5) - this143->virtualX));
            																}
            																else {
HXLINE(  24)																	index18 = ::Std_obj::_hx_int(( (Float)(((dy5 * this143->width) + dx5)) ));
            																}
HXDLIN(  24)																int c15 = ::iterMagic::Iimg_obj::get(this146,index18);
HXDLIN(  24)																int col3;
HXDLIN(  24)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																	col3 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            																}
            																else {
HXLINE(  24)																	col3 = c15;
            																}
HXDLIN(  24)																bool _hx_tmp35;
HXDLIN(  24)																if (this143->useMask) {
HXLINE(  24)																	_hx_tmp35 = ::hx::IsNotNull( this143->mask );
            																}
            																else {
HXLINE(  24)																	_hx_tmp35 = false;
            																}
HXDLIN(  24)																if (_hx_tmp35) {
HXLINE(  24)																	 ::pi_xy::ImageStruct this147 = this143->mask;
HXDLIN(  24)																	::Dynamic this148 = this147->image;
HXDLIN(  24)																	int index19;
HXDLIN(  24)																	if (this147->useVirtualPos) {
HXLINE(  24)																		index19 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this147->virtualY) * ( (Float)(this147->width) )) + dx5) - this147->virtualX));
            																	}
            																	else {
HXLINE(  24)																		index19 = ::Std_obj::_hx_int(( (Float)(((dy5 * this147->width) + dx5)) ));
            																	}
HXDLIN(  24)																	int c16 = ::iterMagic::Iimg_obj::get(this148,index19);
HXDLIN(  24)																	int v11;
HXDLIN(  24)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																		v11 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            																	}
            																	else {
HXLINE(  24)																		v11 = c16;
            																	}
HXDLIN(  24)																	int maskPixel3 = v11;
HXDLIN(  24)																	int this149 = col3;
HXDLIN(  24)																	if ((maskPixel3 == 0)) {
HXLINE(  24)																		col3 = this149;
            																	}
            																	else {
HXLINE(  24)																		Float m03;
HXDLIN(  24)																		int this150 = ((maskPixel3 >> 24) & 255);
HXDLIN(  24)																		if ((this150 == 0)) {
HXLINE(  24)																			m03 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m03 = (( (Float)(this150) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m13;
HXDLIN(  24)																		int this151 = ((maskPixel3 >> 16) & 255);
HXDLIN(  24)																		if ((this151 == 0)) {
HXLINE(  24)																			m13 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m13 = (( (Float)(this151) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m23;
HXDLIN(  24)																		int this152 = ((maskPixel3 >> 8) & 255);
HXDLIN(  24)																		if ((this152 == 0)) {
HXLINE(  24)																			m23 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m23 = (( (Float)(this152) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float m33;
HXDLIN(  24)																		int this153 = (maskPixel3 & 255);
HXDLIN(  24)																		if ((this153 == 0)) {
HXLINE(  24)																			m33 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			m33 = (( (Float)(this153) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this149 >> 24) & 255)) )));
HXDLIN(  24)																		int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this149 >> 16) & 255)) )));
HXDLIN(  24)																		int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this149 >> 8) & 255)) )));
HXDLIN(  24)																		int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this149 & 255)) )));
HXDLIN(  24)																		col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  24)																if ((col3 != 0)) {
HXLINE(  24)																	int x18 = (dx5 - rectLeft3);
HXDLIN(  24)																	int y18 = (dy5 - rectTop3);
HXDLIN(  24)																	int c17 = col3;
HXDLIN(  24)																	bool _hx_tmp36;
HXDLIN(  24)																	if ((((c17 >> 24) & 255) < 254)) {
HXLINE(  24)																		_hx_tmp36 = undoImage9->transparent;
            																	}
            																	else {
HXLINE(  24)																		_hx_tmp36 = false;
            																	}
HXDLIN(  24)																	if (_hx_tmp36) {
HXLINE(  24)																		int location9;
HXDLIN(  24)																		if (undoImage9->useVirtualPos) {
HXLINE(  24)																			location9 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x18) - undoImage9->virtualX));
            																		}
            																		else {
HXLINE(  24)																			location9 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage9->width) + x18)) ));
            																		}
HXDLIN(  24)																		int this154 = ::iterMagic::Iimg_obj::get(undoImage9->image,location9);
HXDLIN(  24)																		int this155;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			this155 = ((((((this154 >> 24) & 255) << 24) | ((this154 & 255) << 16)) | (((this154 >> 8) & 255) << 8)) | ((this154 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			this155 = this154;
            																		}
HXDLIN(  24)																		Float a112;
HXDLIN(  24)																		int this156 = ((this155 >> 24) & 255);
HXDLIN(  24)																		if ((this156 == 0)) {
HXLINE(  24)																			a112 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a112 = (( (Float)(this156) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r19;
HXDLIN(  24)																		int this157 = ((this155 >> 16) & 255);
HXDLIN(  24)																		if ((this157 == 0)) {
HXLINE(  24)																			r19 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r19 = (( (Float)(this157) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g19;
HXDLIN(  24)																		int this158 = ((this155 >> 8) & 255);
HXDLIN(  24)																		if ((this158 == 0)) {
HXLINE(  24)																			g19 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g19 = (( (Float)(this158) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b113;
HXDLIN(  24)																		int this159 = (this155 & 255);
HXDLIN(  24)																		if ((this159 == 0)) {
HXLINE(  24)																			b113 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b113 = (( (Float)(this159) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a210;
HXDLIN(  24)																		int this160 = ((col3 >> 24) & 255);
HXDLIN(  24)																		if ((this160 == 0)) {
HXLINE(  24)																			a210 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a210 = (( (Float)(this160) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r29;
HXDLIN(  24)																		int this161 = ((col3 >> 16) & 255);
HXDLIN(  24)																		if ((this161 == 0)) {
HXLINE(  24)																			r29 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r29 = (( (Float)(this161) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g29;
HXDLIN(  24)																		int this162 = ((col3 >> 8) & 255);
HXDLIN(  24)																		if ((this162 == 0)) {
HXLINE(  24)																			g29 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g29 = (( (Float)(this162) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b213;
HXDLIN(  24)																		int this163 = (col3 & 255);
HXDLIN(  24)																		if ((this163 == 0)) {
HXLINE(  24)																			b213 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b213 = (( (Float)(this163) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a39 = (a112 * (( (Float)(1) ) - a210));
HXDLIN(  24)																		int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a39) + (r29 * a210))));
HXDLIN(  24)																		int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a39) + (g29 * a210))));
HXDLIN(  24)																		int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a39) + (b213 * a210))));
HXDLIN(  24)																		int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a210)));
HXDLIN(  24)																		int blended9 = ((((a40 << 24) | (r20 << 16)) | (g20 << 8)) | b36);
HXDLIN(  24)																		{
HXLINE(  24)																			int _hx_tmp37;
HXDLIN(  24)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																				_hx_tmp37 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            																			}
            																			else {
HXLINE(  24)																				_hx_tmp37 = blended9;
            																			}
HXDLIN(  24)																			::iterMagic::Iimg_obj::set(undoImage9->image,location9,_hx_tmp37);
            																		}
            																	}
            																	else {
HXLINE(  24)																		::Dynamic this164 = undoImage9->image;
HXDLIN(  24)																		int index20;
HXDLIN(  24)																		if (undoImage9->useVirtualPos) {
HXLINE(  24)																			index20 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x18) - undoImage9->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index20 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage9->width) + x18)) ));
            																		}
HXDLIN(  24)																		int _hx_tmp38;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			_hx_tmp38 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			_hx_tmp38 = c17;
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this164,index20,_hx_tmp38);
            																	}
            																}
            																else {
HXLINE(  24)																	if (forceClear3) {
HXLINE(  24)																		::Dynamic this165 = undoImage9->image;
HXDLIN(  24)																		int x19 = (dx5 - rectLeft3);
HXDLIN(  24)																		int y19 = (dy5 - rectTop3);
HXDLIN(  24)																		int index21;
HXDLIN(  24)																		if (undoImage9->useVirtualPos) {
HXLINE(  24)																			index21 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x19) - undoImage9->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index21 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage9->width) + x19)) ));
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this165,index21,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  24)										bool found3 = false;
HXDLIN(  24)										Float s3 = ((Float)0.);
HXDLIN(  24)										Float t3 = ((Float)0.);
HXDLIN(  24)										Float sxx3 = ((Float)0.);
HXDLIN(  24)										Float txx3 = ((Float)0.);
HXDLIN(  24)										{
HXLINE(  24)											int _g_min6 = xIter33->start;
HXDLIN(  24)											int _g_max6 = xIter33->max;
HXDLIN(  24)											while((_g_min6 < _g_max6)){
HXLINE(  24)												_g_min6 = (_g_min6 + 1);
HXDLIN(  24)												int x20 = (_g_min6 - 1);
HXLINE(  60)												sxx3 = (sx3 * ( (Float)(x20) ));
HXLINE(  61)												txx3 = (tx3 * ( (Float)(x20) ));
HXLINE(  62)												found3 = false;
HXLINE(  24)												{
HXLINE(  24)													int _g_min7 = yIter33->start;
HXDLIN(  24)													int _g_max7 = yIter33->max;
HXDLIN(  24)													while((_g_min7 < _g_max7)){
HXLINE(  24)														_g_min7 = (_g_min7 + 1);
HXDLIN(  24)														int y20 = (_g_min7 - 1);
HXLINE(  64)														s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y20) )));
HXLINE(  65)														t3 = ((t03 + txx3) + (ty3 * ( (Float)(y20) )));
HXLINE(  24)														bool _hx_tmp39;
HXDLIN(  24)														if (!((s3 <= 0))) {
HXLINE(  24)															_hx_tmp39 = (t3 <= 0);
            														}
            														else {
HXLINE(  24)															_hx_tmp39 = true;
            														}
HXDLIN(  24)														if (_hx_tmp39) {
HXLINE(  24)															if (found3) {
HXLINE(  24)																goto _hx_goto_71;
            															}
            														}
            														else {
HXLINE(  24)															if (((s3 + t3) < A3)) {
HXLINE(  24)																{
HXLINE(  24)																	int c18 = color;
HXDLIN(  24)																	bool _hx_tmp40;
HXDLIN(  24)																	if ((((c18 >> 24) & 255) < 254)) {
HXLINE(  24)																		_hx_tmp40 = this143->transparent;
            																	}
            																	else {
HXLINE(  24)																		_hx_tmp40 = false;
            																	}
HXDLIN(  24)																	if (_hx_tmp40) {
HXLINE(  24)																		int location10;
HXDLIN(  24)																		if (this143->useVirtualPos) {
HXLINE(  24)																			location10 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - this143->virtualY) * ( (Float)(this143->width) )) + x20) - this143->virtualX));
            																		}
            																		else {
HXLINE(  24)																			location10 = ::Std_obj::_hx_int(( (Float)(((y20 * this143->width) + x20)) ));
            																		}
HXDLIN(  24)																		int this166 = ::iterMagic::Iimg_obj::get(this143->image,location10);
HXDLIN(  24)																		int this167;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			this167 = ((((((this166 >> 24) & 255) << 24) | ((this166 & 255) << 16)) | (((this166 >> 8) & 255) << 8)) | ((this166 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			this167 = this166;
            																		}
HXDLIN(  24)																		Float a113;
HXDLIN(  24)																		int this168 = ((this167 >> 24) & 255);
HXDLIN(  24)																		if ((this168 == 0)) {
HXLINE(  24)																			a113 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a113 = (( (Float)(this168) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r110;
HXDLIN(  24)																		int this169 = ((this167 >> 16) & 255);
HXDLIN(  24)																		if ((this169 == 0)) {
HXLINE(  24)																			r110 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r110 = (( (Float)(this169) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g110;
HXDLIN(  24)																		int this170 = ((this167 >> 8) & 255);
HXDLIN(  24)																		if ((this170 == 0)) {
HXLINE(  24)																			g110 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g110 = (( (Float)(this170) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b114;
HXDLIN(  24)																		int this171 = (this167 & 255);
HXDLIN(  24)																		if ((this171 == 0)) {
HXLINE(  24)																			b114 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b114 = (( (Float)(this171) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a211;
HXDLIN(  24)																		int this172 = ((color >> 24) & 255);
HXDLIN(  24)																		if ((this172 == 0)) {
HXLINE(  24)																			a211 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			a211 = (( (Float)(this172) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float r210;
HXDLIN(  24)																		int this173 = ((color >> 16) & 255);
HXDLIN(  24)																		if ((this173 == 0)) {
HXLINE(  24)																			r210 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			r210 = (( (Float)(this173) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float g210;
HXDLIN(  24)																		int this174 = ((color >> 8) & 255);
HXDLIN(  24)																		if ((this174 == 0)) {
HXLINE(  24)																			g210 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			g210 = (( (Float)(this174) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float b214;
HXDLIN(  24)																		int this175 = (color & 255);
HXDLIN(  24)																		if ((this175 == 0)) {
HXLINE(  24)																			b214 = ((Float)0.);
            																		}
            																		else {
HXLINE(  24)																			b214 = (( (Float)(this175) ) / ( (Float)(255) ));
            																		}
HXDLIN(  24)																		Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN(  24)																		int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r210 * a211))));
HXDLIN(  24)																		int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g210 * a211))));
HXDLIN(  24)																		int b37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b214 * a211))));
HXDLIN(  24)																		int a41 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN(  24)																		int blended10 = ((((a41 << 24) | (r30 << 16)) | (g30 << 8)) | b37);
HXDLIN(  24)																		{
HXLINE(  24)																			int _hx_tmp41;
HXDLIN(  24)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																				_hx_tmp41 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            																			}
            																			else {
HXLINE(  24)																				_hx_tmp41 = blended10;
            																			}
HXDLIN(  24)																			::iterMagic::Iimg_obj::set(this143->image,location10,_hx_tmp41);
            																		}
            																	}
            																	else {
HXLINE(  24)																		::Dynamic this176 = this143->image;
HXDLIN(  24)																		int index22;
HXDLIN(  24)																		if (this143->useVirtualPos) {
HXLINE(  24)																			index22 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - this143->virtualY) * ( (Float)(this143->width) )) + x20) - this143->virtualX));
            																		}
            																		else {
HXLINE(  24)																			index22 = ::Std_obj::_hx_int(( (Float)(((y20 * this143->width) + x20)) ));
            																		}
HXDLIN(  24)																		int _hx_tmp42;
HXDLIN(  24)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  24)																			_hx_tmp42 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            																		}
            																		else {
HXLINE(  24)																			_hx_tmp42 = c18;
            																		}
HXDLIN(  24)																		::iterMagic::Iimg_obj::set(this176,index22,_hx_tmp42);
            																	}
            																}
HXLINE(  73)																found3 = true;
            															}
            															else {
HXLINE(  24)																if (found3) {
HXLINE(  24)																	goto _hx_goto_71;
            																}
            															}
            														}
            													}
            													_hx_goto_71:;
            												}
            											}
            										}
HXDLIN(  24)										if ((hasHit3 == true)) {
HXLINE(  24)											 ::pi_xy::algo::HitTri v12 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX,lowerY,bx3,by3,cx5,cy5,true);
HXDLIN(  24)											if (hasUndo3) {
HXLINE(  24)												v12->undoImage = undoImage9;
HXDLIN(  24)												v12->undoX = xIter33->start;
HXDLIN(  24)												v12->undoY = yIter33->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX3 = nextX3;
HXLINE(  47)							lastY3 = nextY3;
            						}
            					}
            				}
            			}
            		}
HXLINE(  31)		{
HXLINE(  31)			Float wid1 = (wid - (( (Float)(2) ) * thick));
HXDLIN(  31)			Float hi1 = (hi - (( (Float)(2) ) * hi));
HXDLIN(  31)			 ::Dynamic dx6 = dx;
HXDLIN(  31)			 ::Dynamic dy6 = dy;
HXDLIN(  31)			 ::Dynamic fat2 = fat;
HXDLIN(  31)			 ::Dynamic tall2 = tall;
HXLINE(  36)			if (::hx::IsNull( tall2 )) {
HXLINE(  36)				tall2 = ((Float)-1.);
            			}
HXDLIN(  36)			if (::hx::IsNull( fat2 )) {
HXLINE(  36)				fat2 = ((Float)-1.);
            			}
HXLINE(  35)			if (::hx::IsNull( dy6 )) {
HXLINE(  35)				dy6 = ((Float)-1.);
            			}
HXDLIN(  35)			if (::hx::IsNull( dx6 )) {
HXLINE(  35)				dx6 = ((Float)-1.);
            			}
HXLINE(  31)			if (::hx::IsLess( dx6,((Float)0.) )) {
HXLINE(  31)				Float smallest1;
HXDLIN(  31)				if ((hi1 < wid1)) {
HXLINE(  31)					smallest1 = hi1;
            				}
            				else {
HXLINE(  31)					smallest1 = wid1;
            				}
HXDLIN(  31)				Float goldenRatio1 = ((Float)1.61803398875);
HXLINE(  26)				dx6 = (smallest1 / (goldenRatio1 + 2));
            			}
HXLINE(  31)			if (::hx::IsLess( dy6,((Float)0.) )) {
HXLINE(  28)				dy6 = dx6;
            			}
HXLINE(  31)			if (::hx::IsLess( fat2,((Float)0.) )) {
HXLINE(  29)				fat2 = (wid1 - (( (Float)(2) ) * ( (Float)(dx6) )));
            			}
HXLINE(  31)			if (::hx::IsLess( tall2,((Float)0.) )) {
HXLINE(  30)				tall2 = (hi1 - (( (Float)(2) ) * ( (Float)(dy6) )));
            			}
HXLINE(  31)			Float rightRadius1 = ((wid1 - ( (Float)(fat2) )) - ( (Float)(dx6) ));
HXDLIN(  31)			Float bottomRadius1 = ((hi1 - ( (Float)(tall2) )) - ( (Float)(dy6) ));
HXDLIN(  31)			Float farX1 = ((thick + dx6) + fat2);
HXDLIN(  31)			Float lowerY1 = ((thick + dy6) + tall2);
HXDLIN(  31)			{
HXLINE(  31)				 ::pi_xy::ImageStruct this177 = temp;
HXDLIN(  31)				Float cx6 = (thick + dx6);
HXDLIN(  31)				Float cy6 = (thick + dy6);
HXDLIN(  31)				Float rx2 = ( (Float)(dx6) );
HXDLIN(  31)				Float ry2 = ( (Float)(dy6) );
HXDLIN(  31)				{
HXLINE(  31)					 ::Dynamic targetError4 = ((Float)1.05);
HXDLIN(  31)					if (::hx::IsNull( targetError4 )) {
HXLINE( 113)						targetError4 = ((Float)1.05);
            					}
HXLINE(  31)					Float rSmall4;
HXDLIN(  31)					if ((rx2 > ry2)) {
HXLINE(  31)						rSmall4 = ry2;
            					}
            					else {
HXLINE(  31)						rSmall4 = rx2;
            					}
HXDLIN(  31)					 ::Dynamic targetE4 = ( (Float)(targetError4) );
HXDLIN(  31)					if (::hx::IsNull( targetE4 )) {
HXDLIN(  20)						targetE4 = ((Float)1.05);
            					}
HXLINE(  31)					int result4 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE4) ) / rSmall4)))));
HXDLIN(  31)					int noSides4;
HXDLIN(  31)					if ((result4 < 12)) {
HXLINE(  31)						noSides4 = 12;
            					}
            					else {
HXLINE(  31)						if ((result4 > 500)) {
HXLINE(  31)							noSides4 = 500;
            						}
            						else {
HXLINE(  31)							noSides4 = result4;
            						}
            					}
HXDLIN(  31)					int sides4 = (::Math_obj::ceil((( (Float)(noSides4) ) / ( (Float)(4) ))) * 4);
HXDLIN(  31)					Float theta4 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides4) ));
HXDLIN(  31)					Float omega4 = ::Math_obj::PI;
HXDLIN(  31)					int quarter4 = ::Std_obj::_hx_int((( (Float)(sides4) ) / ( (Float)(4) )));
HXDLIN(  31)					Float lastX4 = ((Float)0.);
HXDLIN(  31)					Float lastY4 = ((Float)0.);
HXDLIN(  31)					{
HXLINE(  26)						lastX4 = (cx6 + (rx2 * ::Math_obj::cos(((( (Float)(sides4) ) * theta4) + omega4))));
HXLINE(  27)						lastY4 = (cy6 + (ry2 * ::Math_obj::sin(((( (Float)(sides4) ) * theta4) + omega4))));
            					}
HXLINE(  31)					{
HXLINE(  31)						int _g104 = 0;
HXDLIN(  31)						int _g105 = (quarter4 + 1);
HXDLIN(  31)						while((_g104 < _g105)){
HXLINE(  31)							_g104 = (_g104 + 1);
HXDLIN(  31)							int i40 = (_g104 - 1);
HXDLIN(  31)							Float nextX4 = (cx6 + (rx2 * ::Math_obj::cos((((( (Float)(i40) ) * theta4) + ((Float)0.0001)) + omega4))));
HXDLIN(  31)							Float nextY4 = (cy6 + (ry2 * ::Math_obj::sin((((( (Float)(i40) ) * theta4) + ((Float)0.0001)) + omega4))));
HXDLIN(  31)							{
HXLINE(  31)								 ::pi_xy::ImageStruct this178 = this177;
HXDLIN(  31)								bool hasHit4 = false;
HXDLIN(  31)								bool hasUndo4 = false;
HXDLIN(  31)								{
HXLINE(  31)									Float bx4 = lastX4;
HXDLIN(  31)									Float by4 = lastY4;
HXDLIN(  31)									Float cx7 = nextX4;
HXDLIN(  31)									Float cy7 = nextY4;
HXDLIN(  31)									bool adjustWinding4 = (((((cx6 * by4) - (bx4 * cy6)) + ((bx4 * cy7) - (cx7 * by4))) + ((cx7 * cy6) - (cx6 * cy7))) > 0);
HXDLIN(  31)									if (!(adjustWinding4)) {
HXLINE(  31)										Float bx_4 = bx4;
HXDLIN(  31)										Float by_4 = by4;
HXLINE(  25)										bx4 = cx7;
HXLINE(  26)										by4 = cy7;
HXLINE(  27)										cx7 = bx_4;
HXLINE(  28)										cy7 = by_4;
            									}
HXLINE(  31)									{
HXLINE(  31)										Float s04 = ((cy6 * cx7) - (cx6 * cy7));
HXDLIN(  31)										Float sx4 = (cy7 - cy6);
HXDLIN(  31)										Float sy4 = (cx6 - cx7);
HXDLIN(  31)										Float t04 = ((cx6 * by4) - (cy6 * bx4));
HXDLIN(  31)										Float tx4 = (cy6 - by4);
HXDLIN(  31)										Float ty4 = (bx4 - cx6);
HXDLIN(  31)										Float A4 = ((((-(by4) * cx7) + (cy6 * (-(bx4) + cx7))) + (cx6 * (by4 - cy7))) + (bx4 * cy7));
HXDLIN(  31)										 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN(  31)										if ((cx6 > bx4)) {
HXLINE(  31)											if ((cx6 > cx7)) {
HXLINE(  31)												int min16;
HXDLIN(  31)												if ((bx4 > cx7)) {
HXLINE(  31)													min16 = ::Math_obj::floor(cx7);
            												}
            												else {
HXLINE(  31)													min16 = ::Math_obj::floor(bx4);
            												}
HXDLIN(  31)												int ii_min38 = min16;
HXDLIN(  31)												int ii_max38 = ::Math_obj::ceil(cx6);
HXDLIN(  31)												xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            											}
            											else {
HXLINE(  31)												int ii_min39 = ::Math_obj::floor(bx4);
HXDLIN(  31)												int ii_max39 = ::Math_obj::ceil(cx7);
HXDLIN(  31)												xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            											}
            										}
            										else {
HXLINE(  31)											if ((bx4 > cx7)) {
HXLINE(  31)												int min17;
HXDLIN(  31)												if ((cx6 > cx7)) {
HXLINE(  31)													min17 = ::Math_obj::floor(cx7);
            												}
            												else {
HXLINE(  31)													min17 = ::Math_obj::ceil(cx6);
            												}
HXDLIN(  31)												int ii_min40 = min17;
HXDLIN(  31)												int ii_max40 = ::Math_obj::ceil(bx4);
HXDLIN(  31)												xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            											}
            											else {
HXLINE(  31)												int ii_min41 = ::Math_obj::floor(cx6);
HXDLIN(  31)												int ii_max41 = ::Math_obj::ceil(cx7);
HXDLIN(  31)												xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            											}
            										}
HXDLIN(  31)										 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN(  31)										if ((cy6 > by4)) {
HXLINE(  31)											if ((cy6 > cy7)) {
HXLINE(  31)												int min18;
HXDLIN(  31)												if ((by4 > cy7)) {
HXLINE(  31)													min18 = ::Math_obj::floor(cy7);
            												}
            												else {
HXLINE(  31)													min18 = ::Math_obj::floor(by4);
            												}
HXDLIN(  31)												int ii_min42 = min18;
HXDLIN(  31)												int ii_max42 = ::Math_obj::ceil(cy6);
HXDLIN(  31)												yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            											}
            											else {
HXLINE(  31)												int ii_min43 = ::Math_obj::floor(by4);
HXDLIN(  31)												int ii_max43 = ::Math_obj::ceil(cy7);
HXDLIN(  31)												yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            											}
            										}
            										else {
HXLINE(  31)											if ((by4 > cy7)) {
HXLINE(  31)												int min19;
HXDLIN(  31)												if ((cy6 > cy7)) {
HXLINE(  31)													min19 = ::Math_obj::floor(cy7);
            												}
            												else {
HXLINE(  31)													min19 = ::Math_obj::ceil(cy6);
            												}
HXDLIN(  31)												int ii_min44 = min19;
HXDLIN(  31)												int ii_max44 = ::Math_obj::ceil(by4);
HXDLIN(  31)												yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            											}
            											else {
HXLINE(  31)												int ii_min45 = ::Math_obj::floor(cy6);
HXDLIN(  31)												int ii_max45 = ::Math_obj::ceil(cy7);
HXDLIN(  31)												yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            											}
            										}
HXDLIN(  31)										 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN(  31)										if (hasUndo4) {
HXLINE(  31)											int width5 = ((xIter34->max - xIter34->start) + 1);
HXDLIN(  31)											int height5 = ((yIter34->max - yIter34->start) + 1);
HXDLIN(  31)											 ::Dynamic imageType5 = null();
HXDLIN(  31)											 ::pi_xy::ImageStruct this179 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  31)											if (::hx::IsNull( imageType5 )) {
HXLINE(  54)												imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  31)											::Dynamic undoImage13;
HXDLIN(  31)											switch((int)(( (int)(imageType5) ))){
            												case (int)0: {
HXLINE(  31)													 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::BytesImg b38 = byt5;
HXDLIN(  31)													{
HXLINE(  31)														b38->width = width5;
HXDLIN(  31)														b38->height = height5;
HXDLIN(  31)														b38->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  31)														b38->data = ::haxe::io::Bytes_obj::alloc((b38->length * 4));
HXDLIN(  31)														{
HXLINE(  31)															int len10 = b38->length;
HXDLIN(  31)															int w5 = 0;
HXDLIN(  31)															{
HXLINE(  31)																int _g106 = 0;
HXDLIN(  31)																int _g107 = b38->height;
HXDLIN(  31)																while((_g106 < _g107)){
HXLINE(  31)																	_g106 = (_g106 + 1);
HXDLIN(  31)																	int y21 = (_g106 - 1);
HXDLIN(  31)																	{
HXLINE(  31)																		int _g108 = 0;
HXDLIN(  31)																		int _g109 = b38->width;
HXDLIN(  31)																		while((_g108 < _g109)){
HXLINE(  31)																			_g108 = (_g108 + 1);
HXDLIN(  31)																			int x21 = (_g108 - 1);
HXDLIN(  31)																			{
HXLINE(  31)																				w5 = (w5 + 1);
HXDLIN(  31)																				b38->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  31)																			{
HXLINE(  31)																				w5 = (w5 + 1);
HXDLIN(  31)																				b38->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  31)																			{
HXLINE(  31)																				w5 = (w5 + 1);
HXDLIN(  31)																				b38->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  31)																			{
HXLINE(  31)																				w5 = (w5 + 1);
HXDLIN(  31)																				b38->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  31)													undoImage13 = b38;
            												}
            												break;
            												case (int)1: {
HXLINE(  31)													 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::ArrIntImg a42 = arrI5;
HXDLIN(  31)													{
HXLINE(  31)														a42->width = width5;
HXDLIN(  31)														a42->height = height5;
HXDLIN(  31)														a42->data = ::Array_obj< int >::__new(0);
HXDLIN(  31)														a42->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  31)														{
HXLINE(  31)															int _g110 = 0;
HXDLIN(  31)															int _g111 = a42->length;
HXDLIN(  31)															while((_g110 < _g111)){
HXLINE(  31)																_g110 = (_g110 + 1);
HXDLIN(  31)																int i41 = (_g110 - 1);
HXDLIN(  31)																a42->data[i41] = 0;
            															}
            														}
            													}
HXDLIN(  31)													undoImage13 = a42;
            												}
            												break;
            												case (int)2: {
HXLINE(  31)													 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::U32ArrImg b39 = u32a5;
HXDLIN(  31)													{
HXLINE(  31)														b39->width = width5;
HXDLIN(  31)														b39->height = height5;
HXDLIN(  31)														b39->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  31)														int size5 = (b39->length * 4);
HXDLIN(  31)														b39->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN(  31)														{
HXLINE(  31)															int _g112 = 0;
HXDLIN(  31)															int _g113 = b39->length;
HXDLIN(  31)															while((_g112 < _g113)){
HXLINE(  31)																_g112 = (_g112 + 1);
HXDLIN(  31)																int i42 = (_g112 - 1);
HXDLIN(  31)																{
HXLINE(  31)																	 ::haxe::io::ArrayBufferViewImpl this180 = b39->data;
HXDLIN(  31)																	bool undoImage14;
HXDLIN(  31)																	if ((i42 >= 0)) {
HXLINE(  31)																		undoImage14 = (i42 < (this180->byteLength >> 2));
            																	}
            																	else {
HXLINE(  31)																		undoImage14 = false;
            																	}
HXDLIN(  31)																	if (undoImage14) {
HXLINE(  31)																		 ::haxe::io::Bytes _this5 = this180->bytes;
HXDLIN(  31)																		int pos5 = ((i42 << 2) + this180->byteOffset);
HXDLIN(  31)																		_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN(  31)																		_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN(  31)																		_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN(  31)																		_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  31)													undoImage13 = b39;
            												}
            												break;
            												case (int)3: {
HXLINE(  31)													 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::VecIntImg v13 = vec5;
HXDLIN(  31)													{
HXLINE(  31)														v13->width = width5;
HXDLIN(  31)														v13->height = height5;
HXDLIN(  31)														v13->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  31)														v13->data = ::Array_obj< int >::__new(v13->length);
HXDLIN(  31)														{
HXLINE(  31)															int _g114 = 0;
HXDLIN(  31)															int _g115 = v13->length;
HXDLIN(  31)															while((_g114 < _g115)){
HXLINE(  31)																_g114 = (_g114 + 1);
HXDLIN(  31)																int i43 = (_g114 - 1);
HXDLIN(  31)																v13->data->__unsafe_set(i43,0);
            															}
            														}
            													}
HXDLIN(  31)													undoImage13 = v13;
            												}
            												break;
            												case (int)4: {
HXLINE(  31)													 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::StackIntImg b40 = sInt5;
HXDLIN(  31)													{
HXLINE(  31)														b40->width = width5;
HXDLIN(  31)														b40->height = height5;
HXDLIN(  31)														b40->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  31)														b40->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  31)														{
HXLINE(  31)															int len11 = b40->length;
HXDLIN(  31)															 ::haxe::ds::GenericStack_Int d5 = b40->data;
HXDLIN(  31)															if (::hx::IsNull( d5->head )) {
HXLINE(  31)																int _g116 = 0;
HXDLIN(  31)																int _g117 = len11;
HXDLIN(  31)																while((_g116 < _g117)){
HXLINE(  31)																	_g116 = (_g116 + 1);
HXDLIN(  31)																	int i44 = (_g116 - 1);
HXDLIN(  31)																	d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            																}
            															}
            															else {
HXLINE(  31)																int _g118 = 0;
HXDLIN(  31)																int _g119 = len11;
HXDLIN(  31)																while((_g118 < _g119)){
HXLINE(  31)																	_g118 = (_g118 + 1);
HXDLIN(  31)																	int i45 = (_g118 - 1);
HXDLIN(  31)																	{
HXLINE(  31)																		 ::haxe::ds::GenericCell_Int l5 = b40->data->head;
HXDLIN(  31)																		 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN(  31)																		{
HXLINE(  31)																			int _g120 = 0;
HXDLIN(  31)																			int _g121 = i45;
HXDLIN(  31)																			while((_g120 < _g121)){
HXLINE(  31)																				_g120 = (_g120 + 1);
HXDLIN(  31)																				int i46 = (_g120 - 1);
HXLINE( 345)																				prev5 = l5;
HXLINE( 346)																				l5 = l5->next;
            																			}
            																		}
HXLINE(  31)																		if (::hx::IsNull( prev5 )) {
HXLINE(  31)																			b40->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  31)																			l5 = null();
            																		}
            																		else {
HXLINE(  31)																			prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  31)																			l5 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  31)													undoImage13 = b40;
            												}
            												break;
            											}
HXDLIN(  31)											this179->image = undoImage13;
HXDLIN(  31)											this179->width = width5;
HXDLIN(  31)											this179->height = height5;
HXDLIN(  31)											this179->imageType = ( (int)(imageType5) );
HXDLIN(  31)											undoImage12 = this179;
HXDLIN(  31)											{
HXLINE(  31)												int rectLeft4 = xIter34->start;
HXDLIN(  31)												int rectTop4 = yIter34->start;
HXDLIN(  31)												int rectRight4 = xIter34->max;
HXDLIN(  31)												bool forceClear4 = false;
HXDLIN(  31)												{
HXLINE(  31)													int _g122 = rectTop4;
HXDLIN(  31)													int _g123 = yIter34->max;
HXDLIN(  31)													while((_g122 < _g123)){
HXLINE(  31)														_g122 = (_g122 + 1);
HXDLIN(  31)														int dy7 = (_g122 - 1);
HXDLIN(  31)														{
HXLINE(  31)															int _g124 = rectLeft4;
HXDLIN(  31)															int _g125 = rectRight4;
HXDLIN(  31)															while((_g124 < _g125)){
HXLINE(  31)																_g124 = (_g124 + 1);
HXDLIN(  31)																int dx7 = (_g124 - 1);
HXDLIN(  31)																::Dynamic this181 = this178->image;
HXDLIN(  31)																int index23;
HXDLIN(  31)																if (this178->useVirtualPos) {
HXLINE(  31)																	index23 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this178->virtualY) * ( (Float)(this178->width) )) + dx7) - this178->virtualX));
            																}
            																else {
HXLINE(  31)																	index23 = ::Std_obj::_hx_int(( (Float)(((dy7 * this178->width) + dx7)) ));
            																}
HXDLIN(  31)																int c19 = ::iterMagic::Iimg_obj::get(this181,index23);
HXDLIN(  31)																int col4;
HXDLIN(  31)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																	col4 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            																}
            																else {
HXLINE(  31)																	col4 = c19;
            																}
HXDLIN(  31)																bool _hx_tmp43;
HXDLIN(  31)																if (this178->useMask) {
HXLINE(  31)																	_hx_tmp43 = ::hx::IsNotNull( this178->mask );
            																}
            																else {
HXLINE(  31)																	_hx_tmp43 = false;
            																}
HXDLIN(  31)																if (_hx_tmp43) {
HXLINE(  31)																	 ::pi_xy::ImageStruct this182 = this178->mask;
HXDLIN(  31)																	::Dynamic this183 = this182->image;
HXDLIN(  31)																	int index24;
HXDLIN(  31)																	if (this182->useVirtualPos) {
HXLINE(  31)																		index24 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this182->virtualY) * ( (Float)(this182->width) )) + dx7) - this182->virtualX));
            																	}
            																	else {
HXLINE(  31)																		index24 = ::Std_obj::_hx_int(( (Float)(((dy7 * this182->width) + dx7)) ));
            																	}
HXDLIN(  31)																	int c20 = ::iterMagic::Iimg_obj::get(this183,index24);
HXDLIN(  31)																	int v14;
HXDLIN(  31)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																		v14 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            																	}
            																	else {
HXLINE(  31)																		v14 = c20;
            																	}
HXDLIN(  31)																	int maskPixel4 = v14;
HXDLIN(  31)																	int this184 = col4;
HXDLIN(  31)																	if ((maskPixel4 == 0)) {
HXLINE(  31)																		col4 = this184;
            																	}
            																	else {
HXLINE(  31)																		Float m04;
HXDLIN(  31)																		int this185 = ((maskPixel4 >> 24) & 255);
HXDLIN(  31)																		if ((this185 == 0)) {
HXLINE(  31)																			m04 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m04 = (( (Float)(this185) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float m14;
HXDLIN(  31)																		int this186 = ((maskPixel4 >> 16) & 255);
HXDLIN(  31)																		if ((this186 == 0)) {
HXLINE(  31)																			m14 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m14 = (( (Float)(this186) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float m24;
HXDLIN(  31)																		int this187 = ((maskPixel4 >> 8) & 255);
HXDLIN(  31)																		if ((this187 == 0)) {
HXLINE(  31)																			m24 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m24 = (( (Float)(this187) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float m34;
HXDLIN(  31)																		int this188 = (maskPixel4 & 255);
HXDLIN(  31)																		if ((this188 == 0)) {
HXLINE(  31)																			m34 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m34 = (( (Float)(this188) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this184 >> 24) & 255)) )));
HXDLIN(  31)																		int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this184 >> 16) & 255)) )));
HXDLIN(  31)																		int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this184 >> 8) & 255)) )));
HXDLIN(  31)																		int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this184 & 255)) )));
HXDLIN(  31)																		col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  31)																if ((col4 != 0)) {
HXLINE(  31)																	int x22 = (dx7 - rectLeft4);
HXDLIN(  31)																	int y22 = (dy7 - rectTop4);
HXDLIN(  31)																	int c21 = col4;
HXDLIN(  31)																	bool _hx_tmp44;
HXDLIN(  31)																	if ((((c21 >> 24) & 255) < 254)) {
HXLINE(  31)																		_hx_tmp44 = undoImage12->transparent;
            																	}
            																	else {
HXLINE(  31)																		_hx_tmp44 = false;
            																	}
HXDLIN(  31)																	if (_hx_tmp44) {
HXLINE(  31)																		int location11;
HXDLIN(  31)																		if (undoImage12->useVirtualPos) {
HXLINE(  31)																			location11 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x22) - undoImage12->virtualX));
            																		}
            																		else {
HXLINE(  31)																			location11 = ::Std_obj::_hx_int(( (Float)(((y22 * undoImage12->width) + x22)) ));
            																		}
HXDLIN(  31)																		int this189 = ::iterMagic::Iimg_obj::get(undoImage12->image,location11);
HXDLIN(  31)																		int this190;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			this190 = ((((((this189 >> 24) & 255) << 24) | ((this189 & 255) << 16)) | (((this189 >> 8) & 255) << 8)) | ((this189 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			this190 = this189;
            																		}
HXDLIN(  31)																		Float a114;
HXDLIN(  31)																		int this191 = ((this190 >> 24) & 255);
HXDLIN(  31)																		if ((this191 == 0)) {
HXLINE(  31)																			a114 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a114 = (( (Float)(this191) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r111;
HXDLIN(  31)																		int this192 = ((this190 >> 16) & 255);
HXDLIN(  31)																		if ((this192 == 0)) {
HXLINE(  31)																			r111 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r111 = (( (Float)(this192) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g111;
HXDLIN(  31)																		int this193 = ((this190 >> 8) & 255);
HXDLIN(  31)																		if ((this193 == 0)) {
HXLINE(  31)																			g111 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g111 = (( (Float)(this193) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b115;
HXDLIN(  31)																		int this194 = (this190 & 255);
HXDLIN(  31)																		if ((this194 == 0)) {
HXLINE(  31)																			b115 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b115 = (( (Float)(this194) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a212;
HXDLIN(  31)																		int this195 = ((col4 >> 24) & 255);
HXDLIN(  31)																		if ((this195 == 0)) {
HXLINE(  31)																			a212 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a212 = (( (Float)(this195) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r211;
HXDLIN(  31)																		int this196 = ((col4 >> 16) & 255);
HXDLIN(  31)																		if ((this196 == 0)) {
HXLINE(  31)																			r211 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r211 = (( (Float)(this196) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g211;
HXDLIN(  31)																		int this197 = ((col4 >> 8) & 255);
HXDLIN(  31)																		if ((this197 == 0)) {
HXLINE(  31)																			g211 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g211 = (( (Float)(this197) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b215;
HXDLIN(  31)																		int this198 = (col4 & 255);
HXDLIN(  31)																		if ((this198 == 0)) {
HXLINE(  31)																			b215 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b215 = (( (Float)(this198) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN(  31)																		int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a311) + (r211 * a212))));
HXDLIN(  31)																		int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a311) + (g211 * a212))));
HXDLIN(  31)																		int b41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b215 * a212))));
HXDLIN(  31)																		int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN(  31)																		int blended11 = ((((a43 << 24) | (r31 << 16)) | (g31 << 8)) | b41);
HXDLIN(  31)																		{
HXLINE(  31)																			int _hx_tmp45;
HXDLIN(  31)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																				_hx_tmp45 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            																			}
            																			else {
HXLINE(  31)																				_hx_tmp45 = blended11;
            																			}
HXDLIN(  31)																			::iterMagic::Iimg_obj::set(undoImage12->image,location11,_hx_tmp45);
            																		}
            																	}
            																	else {
HXLINE(  31)																		::Dynamic this199 = undoImage12->image;
HXDLIN(  31)																		int index25;
HXDLIN(  31)																		if (undoImage12->useVirtualPos) {
HXLINE(  31)																			index25 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x22) - undoImage12->virtualX));
            																		}
            																		else {
HXLINE(  31)																			index25 = ::Std_obj::_hx_int(( (Float)(((y22 * undoImage12->width) + x22)) ));
            																		}
HXDLIN(  31)																		int _hx_tmp46;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			_hx_tmp46 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			_hx_tmp46 = c21;
            																		}
HXDLIN(  31)																		::iterMagic::Iimg_obj::set(this199,index25,_hx_tmp46);
            																	}
            																}
            																else {
HXLINE(  31)																	if (forceClear4) {
HXLINE(  31)																		::Dynamic this200 = undoImage12->image;
HXDLIN(  31)																		int x23 = (dx7 - rectLeft4);
HXDLIN(  31)																		int y23 = (dy7 - rectTop4);
HXDLIN(  31)																		int index26;
HXDLIN(  31)																		if (undoImage12->useVirtualPos) {
HXLINE(  31)																			index26 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x23) - undoImage12->virtualX));
            																		}
            																		else {
HXLINE(  31)																			index26 = ::Std_obj::_hx_int(( (Float)(((y23 * undoImage12->width) + x23)) ));
            																		}
HXDLIN(  31)																		::iterMagic::Iimg_obj::set(this200,index26,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  31)										bool found4 = false;
HXDLIN(  31)										Float s4 = ((Float)0.);
HXDLIN(  31)										Float t4 = ((Float)0.);
HXDLIN(  31)										Float sxx4 = ((Float)0.);
HXDLIN(  31)										Float txx4 = ((Float)0.);
HXDLIN(  31)										{
HXLINE(  31)											int _g_min8 = xIter34->start;
HXDLIN(  31)											int _g_max8 = xIter34->max;
HXDLIN(  31)											while((_g_min8 < _g_max8)){
HXLINE(  31)												_g_min8 = (_g_min8 + 1);
HXDLIN(  31)												int x24 = (_g_min8 - 1);
HXLINE(  60)												sxx4 = (sx4 * ( (Float)(x24) ));
HXLINE(  61)												txx4 = (tx4 * ( (Float)(x24) ));
HXLINE(  62)												found4 = false;
HXLINE(  31)												{
HXLINE(  31)													int _g_min9 = yIter34->start;
HXDLIN(  31)													int _g_max9 = yIter34->max;
HXDLIN(  31)													while((_g_min9 < _g_max9)){
HXLINE(  31)														_g_min9 = (_g_min9 + 1);
HXDLIN(  31)														int y24 = (_g_min9 - 1);
HXLINE(  64)														s4 = ((s04 + sxx4) + (sy4 * ( (Float)(y24) )));
HXLINE(  65)														t4 = ((t04 + txx4) + (ty4 * ( (Float)(y24) )));
HXLINE(  31)														bool _hx_tmp47;
HXDLIN(  31)														if (!((s4 <= 0))) {
HXLINE(  31)															_hx_tmp47 = (t4 <= 0);
            														}
            														else {
HXLINE(  31)															_hx_tmp47 = true;
            														}
HXDLIN(  31)														if (_hx_tmp47) {
HXLINE(  31)															if (found4) {
HXLINE(  31)																goto _hx_goto_84;
            															}
            														}
            														else {
HXLINE(  31)															if (((s4 + t4) < A4)) {
HXLINE(  31)																{
HXLINE(  31)																	int c22 = 0;
HXDLIN(  31)																	bool _hx_tmp48;
HXDLIN(  31)																	if ((((c22 >> 24) & 255) < 254)) {
HXLINE(  31)																		_hx_tmp48 = this178->transparent;
            																	}
            																	else {
HXLINE(  31)																		_hx_tmp48 = false;
            																	}
HXDLIN(  31)																	if (_hx_tmp48) {
HXLINE(  31)																		int location12;
HXDLIN(  31)																		if (this178->useVirtualPos) {
HXLINE(  31)																			location12 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - this178->virtualY) * ( (Float)(this178->width) )) + x24) - this178->virtualX));
            																		}
            																		else {
HXLINE(  31)																			location12 = ::Std_obj::_hx_int(( (Float)(((y24 * this178->width) + x24)) ));
            																		}
HXDLIN(  31)																		int this201 = ::iterMagic::Iimg_obj::get(this178->image,location12);
HXDLIN(  31)																		int this202;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			this202 = ((((((this201 >> 24) & 255) << 24) | ((this201 & 255) << 16)) | (((this201 >> 8) & 255) << 8)) | ((this201 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			this202 = this201;
            																		}
HXDLIN(  31)																		Float a115;
HXDLIN(  31)																		int this203 = ((this202 >> 24) & 255);
HXDLIN(  31)																		if ((this203 == 0)) {
HXLINE(  31)																			a115 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a115 = (( (Float)(this203) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r112;
HXDLIN(  31)																		int this204 = ((this202 >> 16) & 255);
HXDLIN(  31)																		if ((this204 == 0)) {
HXLINE(  31)																			r112 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r112 = (( (Float)(this204) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g112;
HXDLIN(  31)																		int this205 = ((this202 >> 8) & 255);
HXDLIN(  31)																		if ((this205 == 0)) {
HXLINE(  31)																			g112 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g112 = (( (Float)(this205) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b116;
HXDLIN(  31)																		int this206 = (this202 & 255);
HXDLIN(  31)																		if ((this206 == 0)) {
HXLINE(  31)																			b116 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b116 = (( (Float)(this206) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a213;
HXDLIN(  31)																		int this207 = ((0 >> 24) & 255);
HXDLIN(  31)																		if ((this207 == 0)) {
HXLINE(  31)																			a213 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a213 = (( (Float)(this207) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r212;
HXDLIN(  31)																		int this208 = ((0 >> 16) & 255);
HXDLIN(  31)																		if ((this208 == 0)) {
HXLINE(  31)																			r212 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r212 = (( (Float)(this208) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g212;
HXDLIN(  31)																		int this209 = ((0 >> 8) & 255);
HXDLIN(  31)																		if ((this209 == 0)) {
HXLINE(  31)																			g212 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g212 = (( (Float)(this209) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b216;
HXDLIN(  31)																		int this210 = (0 & 255);
HXDLIN(  31)																		if ((this210 == 0)) {
HXLINE(  31)																			b216 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b216 = (( (Float)(this210) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN(  31)																		int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a312) + (r212 * a213))));
HXDLIN(  31)																		int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a312) + (g212 * a213))));
HXDLIN(  31)																		int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b216 * a213))));
HXDLIN(  31)																		int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN(  31)																		int blended12 = ((((a44 << 24) | (r32 << 16)) | (g32 << 8)) | b42);
HXDLIN(  31)																		{
HXLINE(  31)																			int _hx_tmp49;
HXDLIN(  31)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																				_hx_tmp49 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            																			}
            																			else {
HXLINE(  31)																				_hx_tmp49 = blended12;
            																			}
HXDLIN(  31)																			::iterMagic::Iimg_obj::set(this178->image,location12,_hx_tmp49);
            																		}
            																	}
            																	else {
HXLINE(  31)																		::Dynamic this211 = this178->image;
HXDLIN(  31)																		int index27;
HXDLIN(  31)																		if (this178->useVirtualPos) {
HXLINE(  31)																			index27 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - this178->virtualY) * ( (Float)(this178->width) )) + x24) - this178->virtualX));
            																		}
            																		else {
HXLINE(  31)																			index27 = ::Std_obj::_hx_int(( (Float)(((y24 * this178->width) + x24)) ));
            																		}
HXDLIN(  31)																		int _hx_tmp50;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			_hx_tmp50 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			_hx_tmp50 = c22;
            																		}
HXDLIN(  31)																		::iterMagic::Iimg_obj::set(this211,index27,_hx_tmp50);
            																	}
            																}
HXLINE(  73)																found4 = true;
            															}
            															else {
HXLINE(  31)																if (found4) {
HXLINE(  31)																	goto _hx_goto_84;
            																}
            															}
            														}
            													}
            													_hx_goto_84:;
            												}
            											}
            										}
HXDLIN(  31)										if ((hasHit4 == true)) {
HXLINE(  31)											 ::pi_xy::algo::HitTri v15 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx6,cy6,bx4,by4,cx7,cy7,true);
HXDLIN(  31)											if (hasUndo4) {
HXLINE(  31)												v15->undoImage = undoImage12;
HXDLIN(  31)												v15->undoX = xIter34->start;
HXDLIN(  31)												v15->undoY = yIter34->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX4 = nextX4;
HXLINE(  47)							lastY4 = nextY4;
            						}
            					}
            				}
            			}
HXLINE(  31)			{
HXLINE(  31)				int r_x3 = ::Std_obj::_hx_int((thick + dx6));
HXDLIN(  31)				int r_y3 = ::Std_obj::_hx_int(thick);
HXDLIN(  31)				int r_w3 = ::Std_obj::_hx_int(( (Float)(fat2) ));
HXDLIN(  31)				int r_h3 = ::Std_obj::_hx_int(( (Float)(dy6) ));
HXDLIN(  31)				int xmax3 = ((r_x3 + r_w3) + 1);
HXDLIN(  31)				int ymax3 = ((r_y3 + r_h3) + 1);
HXDLIN(  31)				int ii_min46 = r_x3;
HXDLIN(  31)				int ii_max46 = xmax3;
HXDLIN(  31)				int xRange__start3 = ii_min46;
HXDLIN(  31)				int xRange__max3 = ii_max46;
HXDLIN(  31)				int ii_min47 = r_y3;
HXDLIN(  31)				int ii_max47 = ymax3;
HXDLIN(  31)				int yRange__start3 = ii_min47;
HXDLIN(  31)				int yRange__max3 = ii_max47;
HXDLIN(  31)				int range_x3 = xRange__start3;
HXDLIN(  31)				int range_y3 = (yRange__start3 - 1);
HXDLIN(  31)				int range_xReset3 = range_x3;
HXDLIN(  31)				int range_yReset3 = range_y3;
HXDLIN(  31)				int range_xMax3 = (xRange__max3 - 2);
HXDLIN(  31)				int range_yMax3 = (yRange__max3 - 2);
HXDLIN(  31)				int _this_min3 = 0;
HXDLIN(  31)				int _this_max3 = ::Std_obj::_hx_int(( (Float)(((xRange__max3 - xRange__start3) * (yRange__max3 - yRange__start3))) ));
HXDLIN(  31)				while((_this_min3 < _this_max3)){
HXLINE(  31)					_this_min3 = (_this_min3 + 1);
HXDLIN(  31)					int i47 = (_this_min3 - 1);
HXDLIN(  31)					if ((range_y3 > range_yMax3)) {
HXLINE(  31)						range_y3 = range_yReset3;
HXDLIN(  31)						range_x3 = (range_x3 + 1);
            					}
HXDLIN(  31)					range_y3 = (range_y3 + 1);
HXDLIN(  31)					int i48 = i47;
HXDLIN(  31)					{
HXLINE(  31)						int x25 = range_x3;
HXDLIN(  31)						int y25 = range_y3;
HXDLIN(  31)						int c23 = 0;
HXDLIN(  31)						bool _hx_tmp51;
HXDLIN(  31)						if ((((c23 >> 24) & 255) < 254)) {
HXLINE(  31)							_hx_tmp51 = temp->transparent;
            						}
            						else {
HXLINE(  31)							_hx_tmp51 = false;
            						}
HXDLIN(  31)						if (_hx_tmp51) {
HXLINE(  31)							int location13;
HXDLIN(  31)							if (temp->useVirtualPos) {
HXLINE(  31)								location13 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - temp->virtualY) * ( (Float)(temp->width) )) + x25) - temp->virtualX));
            							}
            							else {
HXLINE(  31)								location13 = ::Std_obj::_hx_int(( (Float)(((y25 * temp->width) + x25)) ));
            							}
HXDLIN(  31)							int this212 = ::iterMagic::Iimg_obj::get(temp->image,location13);
HXDLIN(  31)							int this213;
HXDLIN(  31)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)								this213 = ((((((this212 >> 24) & 255) << 24) | ((this212 & 255) << 16)) | (((this212 >> 8) & 255) << 8)) | ((this212 >> 16) & 255));
            							}
            							else {
HXLINE(  31)								this213 = this212;
            							}
HXDLIN(  31)							Float a116;
HXDLIN(  31)							int this214 = ((this213 >> 24) & 255);
HXDLIN(  31)							if ((this214 == 0)) {
HXLINE(  31)								a116 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								a116 = (( (Float)(this214) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float r113;
HXDLIN(  31)							int this215 = ((this213 >> 16) & 255);
HXDLIN(  31)							if ((this215 == 0)) {
HXLINE(  31)								r113 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								r113 = (( (Float)(this215) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float g113;
HXDLIN(  31)							int this216 = ((this213 >> 8) & 255);
HXDLIN(  31)							if ((this216 == 0)) {
HXLINE(  31)								g113 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								g113 = (( (Float)(this216) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float b117;
HXDLIN(  31)							int this217 = (this213 & 255);
HXDLIN(  31)							if ((this217 == 0)) {
HXLINE(  31)								b117 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								b117 = (( (Float)(this217) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float a214;
HXDLIN(  31)							int this218 = ((0 >> 24) & 255);
HXDLIN(  31)							if ((this218 == 0)) {
HXLINE(  31)								a214 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								a214 = (( (Float)(this218) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float r213;
HXDLIN(  31)							int this219 = ((0 >> 16) & 255);
HXDLIN(  31)							if ((this219 == 0)) {
HXLINE(  31)								r213 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								r213 = (( (Float)(this219) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float g213;
HXDLIN(  31)							int this220 = ((0 >> 8) & 255);
HXDLIN(  31)							if ((this220 == 0)) {
HXLINE(  31)								g213 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								g213 = (( (Float)(this220) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float b217;
HXDLIN(  31)							int this221 = (0 & 255);
HXDLIN(  31)							if ((this221 == 0)) {
HXLINE(  31)								b217 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								b217 = (( (Float)(this221) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN(  31)							int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a313) + (r213 * a214))));
HXDLIN(  31)							int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a313) + (g213 * a214))));
HXDLIN(  31)							int b43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b217 * a214))));
HXDLIN(  31)							int a45 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN(  31)							int blended13 = ((((a45 << 24) | (r33 << 16)) | (g33 << 8)) | b43);
HXDLIN(  31)							{
HXLINE(  31)								int _hx_tmp52;
HXDLIN(  31)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)									_hx_tmp52 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            								}
            								else {
HXLINE(  31)									_hx_tmp52 = blended13;
            								}
HXDLIN(  31)								::iterMagic::Iimg_obj::set(temp->image,location13,_hx_tmp52);
            							}
            						}
            						else {
HXLINE(  31)							::Dynamic this222 = temp->image;
HXDLIN(  31)							int index28;
HXDLIN(  31)							if (temp->useVirtualPos) {
HXLINE(  31)								index28 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - temp->virtualY) * ( (Float)(temp->width) )) + x25) - temp->virtualX));
            							}
            							else {
HXLINE(  31)								index28 = ::Std_obj::_hx_int(( (Float)(((y25 * temp->width) + x25)) ));
            							}
HXDLIN(  31)							int _hx_tmp53;
HXDLIN(  31)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)								_hx_tmp53 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            							}
            							else {
HXLINE(  31)								_hx_tmp53 = c23;
            							}
HXDLIN(  31)							::iterMagic::Iimg_obj::set(this222,index28,_hx_tmp53);
            						}
            					}
            				}
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::pi_xy::ImageStruct this223 = temp;
HXDLIN(  31)				Float cy8 = (thick + dy6);
HXDLIN(  31)				Float ry3 = ( (Float)(dy6) );
HXDLIN(  31)				{
HXLINE(  31)					 ::Dynamic targetError5 = ((Float)1.05);
HXDLIN(  31)					if (::hx::IsNull( targetError5 )) {
HXLINE( 113)						targetError5 = ((Float)1.05);
            					}
HXLINE(  31)					Float rSmall5;
HXDLIN(  31)					if ((rightRadius1 > ry3)) {
HXLINE(  31)						rSmall5 = ry3;
            					}
            					else {
HXLINE(  31)						rSmall5 = rightRadius1;
            					}
HXDLIN(  31)					 ::Dynamic targetE5 = ( (Float)(targetError5) );
HXDLIN(  31)					if (::hx::IsNull( targetE5 )) {
HXDLIN(  20)						targetE5 = ((Float)1.05);
            					}
HXLINE(  31)					int result5 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE5) ) / rSmall5)))));
HXDLIN(  31)					int noSides5;
HXDLIN(  31)					if ((result5 < 12)) {
HXLINE(  31)						noSides5 = 12;
            					}
            					else {
HXLINE(  31)						if ((result5 > 500)) {
HXLINE(  31)							noSides5 = 500;
            						}
            						else {
HXLINE(  31)							noSides5 = result5;
            						}
            					}
HXDLIN(  31)					int sides5 = (::Math_obj::ceil((( (Float)(noSides5) ) / ( (Float)(4) ))) * 4);
HXDLIN(  31)					Float theta5 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides5) ));
HXDLIN(  31)					Float omega5 = ((( (Float)(3) ) * ::Math_obj::PI) / ( (Float)(2) ));
HXDLIN(  31)					int quarter5 = ::Std_obj::_hx_int((( (Float)(sides5) ) / ( (Float)(4) )));
HXDLIN(  31)					Float lastX5 = ((Float)0.);
HXDLIN(  31)					Float lastY5 = ((Float)0.);
HXDLIN(  31)					{
HXLINE(  26)						lastX5 = (farX1 + (rightRadius1 * ::Math_obj::cos(((( (Float)(sides5) ) * theta5) + omega5))));
HXLINE(  27)						lastY5 = (cy8 + (ry3 * ::Math_obj::sin(((( (Float)(sides5) ) * theta5) + omega5))));
            					}
HXLINE(  31)					{
HXLINE(  31)						int _g126 = 0;
HXDLIN(  31)						int _g127 = (quarter5 + 1);
HXDLIN(  31)						while((_g126 < _g127)){
HXLINE(  31)							_g126 = (_g126 + 1);
HXDLIN(  31)							int i49 = (_g126 - 1);
HXDLIN(  31)							Float nextX5 = (farX1 + (rightRadius1 * ::Math_obj::cos((((( (Float)(i49) ) * theta5) + ((Float)0.0001)) + omega5))));
HXDLIN(  31)							Float nextY5 = (cy8 + (ry3 * ::Math_obj::sin((((( (Float)(i49) ) * theta5) + ((Float)0.0001)) + omega5))));
HXDLIN(  31)							{
HXLINE(  31)								 ::pi_xy::ImageStruct this224 = this223;
HXDLIN(  31)								bool hasHit5 = false;
HXDLIN(  31)								bool hasUndo5 = false;
HXDLIN(  31)								{
HXLINE(  31)									Float bx5 = lastX5;
HXDLIN(  31)									Float by5 = lastY5;
HXDLIN(  31)									Float cx8 = nextX5;
HXDLIN(  31)									Float cy9 = nextY5;
HXDLIN(  31)									bool adjustWinding5 = (((((farX1 * by5) - (bx5 * cy8)) + ((bx5 * cy9) - (cx8 * by5))) + ((cx8 * cy8) - (farX1 * cy9))) > 0);
HXDLIN(  31)									if (!(adjustWinding5)) {
HXLINE(  31)										Float bx_5 = bx5;
HXDLIN(  31)										Float by_5 = by5;
HXLINE(  25)										bx5 = cx8;
HXLINE(  26)										by5 = cy9;
HXLINE(  27)										cx8 = bx_5;
HXLINE(  28)										cy9 = by_5;
            									}
HXLINE(  31)									{
HXLINE(  31)										Float s05 = ((cy8 * cx8) - (farX1 * cy9));
HXDLIN(  31)										Float sx5 = (cy9 - cy8);
HXDLIN(  31)										Float sy5 = (farX1 - cx8);
HXDLIN(  31)										Float t05 = ((farX1 * by5) - (cy8 * bx5));
HXDLIN(  31)										Float tx5 = (cy8 - by5);
HXDLIN(  31)										Float ty5 = (bx5 - farX1);
HXDLIN(  31)										Float A5 = ((((-(by5) * cx8) + (cy8 * (-(bx5) + cx8))) + (farX1 * (by5 - cy9))) + (bx5 * cy9));
HXDLIN(  31)										 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN(  31)										if ((farX1 > bx5)) {
HXLINE(  31)											if ((farX1 > cx8)) {
HXLINE(  31)												int min20;
HXDLIN(  31)												if ((bx5 > cx8)) {
HXLINE(  31)													min20 = ::Math_obj::floor(cx8);
            												}
            												else {
HXLINE(  31)													min20 = ::Math_obj::floor(bx5);
            												}
HXDLIN(  31)												int ii_min48 = min20;
HXDLIN(  31)												int ii_max48 = ::Math_obj::ceil(farX1);
HXDLIN(  31)												xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            											}
            											else {
HXLINE(  31)												int ii_min49 = ::Math_obj::floor(bx5);
HXDLIN(  31)												int ii_max49 = ::Math_obj::ceil(cx8);
HXDLIN(  31)												xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            											}
            										}
            										else {
HXLINE(  31)											if ((bx5 > cx8)) {
HXLINE(  31)												int min21;
HXDLIN(  31)												if ((farX1 > cx8)) {
HXLINE(  31)													min21 = ::Math_obj::floor(cx8);
            												}
            												else {
HXLINE(  31)													min21 = ::Math_obj::ceil(farX1);
            												}
HXDLIN(  31)												int ii_min50 = min21;
HXDLIN(  31)												int ii_max50 = ::Math_obj::ceil(bx5);
HXDLIN(  31)												xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            											}
            											else {
HXLINE(  31)												int ii_min51 = ::Math_obj::floor(farX1);
HXDLIN(  31)												int ii_max51 = ::Math_obj::ceil(cx8);
HXDLIN(  31)												xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            											}
            										}
HXDLIN(  31)										 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN(  31)										if ((cy8 > by5)) {
HXLINE(  31)											if ((cy8 > cy9)) {
HXLINE(  31)												int min22;
HXDLIN(  31)												if ((by5 > cy9)) {
HXLINE(  31)													min22 = ::Math_obj::floor(cy9);
            												}
            												else {
HXLINE(  31)													min22 = ::Math_obj::floor(by5);
            												}
HXDLIN(  31)												int ii_min52 = min22;
HXDLIN(  31)												int ii_max52 = ::Math_obj::ceil(cy8);
HXDLIN(  31)												yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            											}
            											else {
HXLINE(  31)												int ii_min53 = ::Math_obj::floor(by5);
HXDLIN(  31)												int ii_max53 = ::Math_obj::ceil(cy9);
HXDLIN(  31)												yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            											}
            										}
            										else {
HXLINE(  31)											if ((by5 > cy9)) {
HXLINE(  31)												int min23;
HXDLIN(  31)												if ((cy8 > cy9)) {
HXLINE(  31)													min23 = ::Math_obj::floor(cy9);
            												}
            												else {
HXLINE(  31)													min23 = ::Math_obj::ceil(cy8);
            												}
HXDLIN(  31)												int ii_min54 = min23;
HXDLIN(  31)												int ii_max54 = ::Math_obj::ceil(by5);
HXDLIN(  31)												yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            											}
            											else {
HXLINE(  31)												int ii_min55 = ::Math_obj::floor(cy8);
HXDLIN(  31)												int ii_max55 = ::Math_obj::ceil(cy9);
HXDLIN(  31)												yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            											}
            										}
HXDLIN(  31)										 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN(  31)										if (hasUndo5) {
HXLINE(  31)											int width6 = ((xIter35->max - xIter35->start) + 1);
HXDLIN(  31)											int height6 = ((yIter35->max - yIter35->start) + 1);
HXDLIN(  31)											 ::Dynamic imageType6 = null();
HXDLIN(  31)											 ::pi_xy::ImageStruct this225 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  31)											if (::hx::IsNull( imageType6 )) {
HXLINE(  54)												imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  31)											::Dynamic undoImage16;
HXDLIN(  31)											switch((int)(( (int)(imageType6) ))){
            												case (int)0: {
HXLINE(  31)													 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::BytesImg b44 = byt6;
HXDLIN(  31)													{
HXLINE(  31)														b44->width = width6;
HXDLIN(  31)														b44->height = height6;
HXDLIN(  31)														b44->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  31)														b44->data = ::haxe::io::Bytes_obj::alloc((b44->length * 4));
HXDLIN(  31)														{
HXLINE(  31)															int len12 = b44->length;
HXDLIN(  31)															int w6 = 0;
HXDLIN(  31)															{
HXLINE(  31)																int _g128 = 0;
HXDLIN(  31)																int _g129 = b44->height;
HXDLIN(  31)																while((_g128 < _g129)){
HXLINE(  31)																	_g128 = (_g128 + 1);
HXDLIN(  31)																	int y26 = (_g128 - 1);
HXDLIN(  31)																	{
HXLINE(  31)																		int _g130 = 0;
HXDLIN(  31)																		int _g131 = b44->width;
HXDLIN(  31)																		while((_g130 < _g131)){
HXLINE(  31)																			_g130 = (_g130 + 1);
HXDLIN(  31)																			int x26 = (_g130 - 1);
HXDLIN(  31)																			{
HXLINE(  31)																				w6 = (w6 + 1);
HXDLIN(  31)																				b44->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  31)																			{
HXLINE(  31)																				w6 = (w6 + 1);
HXDLIN(  31)																				b44->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  31)																			{
HXLINE(  31)																				w6 = (w6 + 1);
HXDLIN(  31)																				b44->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  31)																			{
HXLINE(  31)																				w6 = (w6 + 1);
HXDLIN(  31)																				b44->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  31)													undoImage16 = b44;
            												}
            												break;
            												case (int)1: {
HXLINE(  31)													 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::ArrIntImg a46 = arrI6;
HXDLIN(  31)													{
HXLINE(  31)														a46->width = width6;
HXDLIN(  31)														a46->height = height6;
HXDLIN(  31)														a46->data = ::Array_obj< int >::__new(0);
HXDLIN(  31)														a46->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  31)														{
HXLINE(  31)															int _g132 = 0;
HXDLIN(  31)															int _g133 = a46->length;
HXDLIN(  31)															while((_g132 < _g133)){
HXLINE(  31)																_g132 = (_g132 + 1);
HXDLIN(  31)																int i50 = (_g132 - 1);
HXDLIN(  31)																a46->data[i50] = 0;
            															}
            														}
            													}
HXDLIN(  31)													undoImage16 = a46;
            												}
            												break;
            												case (int)2: {
HXLINE(  31)													 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::U32ArrImg b45 = u32a6;
HXDLIN(  31)													{
HXLINE(  31)														b45->width = width6;
HXDLIN(  31)														b45->height = height6;
HXDLIN(  31)														b45->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  31)														int size6 = (b45->length * 4);
HXDLIN(  31)														b45->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN(  31)														{
HXLINE(  31)															int _g134 = 0;
HXDLIN(  31)															int _g135 = b45->length;
HXDLIN(  31)															while((_g134 < _g135)){
HXLINE(  31)																_g134 = (_g134 + 1);
HXDLIN(  31)																int i51 = (_g134 - 1);
HXDLIN(  31)																{
HXLINE(  31)																	 ::haxe::io::ArrayBufferViewImpl this226 = b45->data;
HXDLIN(  31)																	bool undoImage17;
HXDLIN(  31)																	if ((i51 >= 0)) {
HXLINE(  31)																		undoImage17 = (i51 < (this226->byteLength >> 2));
            																	}
            																	else {
HXLINE(  31)																		undoImage17 = false;
            																	}
HXDLIN(  31)																	if (undoImage17) {
HXLINE(  31)																		 ::haxe::io::Bytes _this6 = this226->bytes;
HXDLIN(  31)																		int pos6 = ((i51 << 2) + this226->byteOffset);
HXDLIN(  31)																		_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN(  31)																		_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN(  31)																		_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN(  31)																		_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  31)													undoImage16 = b45;
            												}
            												break;
            												case (int)3: {
HXLINE(  31)													 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::VecIntImg v16 = vec6;
HXDLIN(  31)													{
HXLINE(  31)														v16->width = width6;
HXDLIN(  31)														v16->height = height6;
HXDLIN(  31)														v16->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  31)														v16->data = ::Array_obj< int >::__new(v16->length);
HXDLIN(  31)														{
HXLINE(  31)															int _g136 = 0;
HXDLIN(  31)															int _g137 = v16->length;
HXDLIN(  31)															while((_g136 < _g137)){
HXLINE(  31)																_g136 = (_g136 + 1);
HXDLIN(  31)																int i52 = (_g136 - 1);
HXDLIN(  31)																v16->data->__unsafe_set(i52,0);
            															}
            														}
            													}
HXDLIN(  31)													undoImage16 = v16;
            												}
            												break;
            												case (int)4: {
HXLINE(  31)													 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::StackIntImg b46 = sInt6;
HXDLIN(  31)													{
HXLINE(  31)														b46->width = width6;
HXDLIN(  31)														b46->height = height6;
HXDLIN(  31)														b46->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  31)														b46->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  31)														{
HXLINE(  31)															int len13 = b46->length;
HXDLIN(  31)															 ::haxe::ds::GenericStack_Int d6 = b46->data;
HXDLIN(  31)															if (::hx::IsNull( d6->head )) {
HXLINE(  31)																int _g138 = 0;
HXDLIN(  31)																int _g139 = len13;
HXDLIN(  31)																while((_g138 < _g139)){
HXLINE(  31)																	_g138 = (_g138 + 1);
HXDLIN(  31)																	int i53 = (_g138 - 1);
HXDLIN(  31)																	d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            																}
            															}
            															else {
HXLINE(  31)																int _g140 = 0;
HXDLIN(  31)																int _g141 = len13;
HXDLIN(  31)																while((_g140 < _g141)){
HXLINE(  31)																	_g140 = (_g140 + 1);
HXDLIN(  31)																	int i54 = (_g140 - 1);
HXDLIN(  31)																	{
HXLINE(  31)																		 ::haxe::ds::GenericCell_Int l6 = b46->data->head;
HXDLIN(  31)																		 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN(  31)																		{
HXLINE(  31)																			int _g142 = 0;
HXDLIN(  31)																			int _g143 = i54;
HXDLIN(  31)																			while((_g142 < _g143)){
HXLINE(  31)																				_g142 = (_g142 + 1);
HXDLIN(  31)																				int i55 = (_g142 - 1);
HXLINE( 345)																				prev6 = l6;
HXLINE( 346)																				l6 = l6->next;
            																			}
            																		}
HXLINE(  31)																		if (::hx::IsNull( prev6 )) {
HXLINE(  31)																			b46->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  31)																			l6 = null();
            																		}
            																		else {
HXLINE(  31)																			prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  31)																			l6 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  31)													undoImage16 = b46;
            												}
            												break;
            											}
HXDLIN(  31)											this225->image = undoImage16;
HXDLIN(  31)											this225->width = width6;
HXDLIN(  31)											this225->height = height6;
HXDLIN(  31)											this225->imageType = ( (int)(imageType6) );
HXDLIN(  31)											undoImage15 = this225;
HXDLIN(  31)											{
HXLINE(  31)												int rectLeft5 = xIter35->start;
HXDLIN(  31)												int rectTop5 = yIter35->start;
HXDLIN(  31)												int rectRight5 = xIter35->max;
HXDLIN(  31)												bool forceClear5 = false;
HXDLIN(  31)												{
HXLINE(  31)													int _g144 = rectTop5;
HXDLIN(  31)													int _g145 = yIter35->max;
HXDLIN(  31)													while((_g144 < _g145)){
HXLINE(  31)														_g144 = (_g144 + 1);
HXDLIN(  31)														int dy8 = (_g144 - 1);
HXDLIN(  31)														{
HXLINE(  31)															int _g146 = rectLeft5;
HXDLIN(  31)															int _g147 = rectRight5;
HXDLIN(  31)															while((_g146 < _g147)){
HXLINE(  31)																_g146 = (_g146 + 1);
HXDLIN(  31)																int dx8 = (_g146 - 1);
HXDLIN(  31)																::Dynamic this227 = this224->image;
HXDLIN(  31)																int index29;
HXDLIN(  31)																if (this224->useVirtualPos) {
HXLINE(  31)																	index29 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this224->virtualY) * ( (Float)(this224->width) )) + dx8) - this224->virtualX));
            																}
            																else {
HXLINE(  31)																	index29 = ::Std_obj::_hx_int(( (Float)(((dy8 * this224->width) + dx8)) ));
            																}
HXDLIN(  31)																int c24 = ::iterMagic::Iimg_obj::get(this227,index29);
HXDLIN(  31)																int col5;
HXDLIN(  31)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																	col5 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            																}
            																else {
HXLINE(  31)																	col5 = c24;
            																}
HXDLIN(  31)																bool _hx_tmp54;
HXDLIN(  31)																if (this224->useMask) {
HXLINE(  31)																	_hx_tmp54 = ::hx::IsNotNull( this224->mask );
            																}
            																else {
HXLINE(  31)																	_hx_tmp54 = false;
            																}
HXDLIN(  31)																if (_hx_tmp54) {
HXLINE(  31)																	 ::pi_xy::ImageStruct this228 = this224->mask;
HXDLIN(  31)																	::Dynamic this229 = this228->image;
HXDLIN(  31)																	int index30;
HXDLIN(  31)																	if (this228->useVirtualPos) {
HXLINE(  31)																		index30 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this228->virtualY) * ( (Float)(this228->width) )) + dx8) - this228->virtualX));
            																	}
            																	else {
HXLINE(  31)																		index30 = ::Std_obj::_hx_int(( (Float)(((dy8 * this228->width) + dx8)) ));
            																	}
HXDLIN(  31)																	int c25 = ::iterMagic::Iimg_obj::get(this229,index30);
HXDLIN(  31)																	int v17;
HXDLIN(  31)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																		v17 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            																	}
            																	else {
HXLINE(  31)																		v17 = c25;
            																	}
HXDLIN(  31)																	int maskPixel5 = v17;
HXDLIN(  31)																	int this230 = col5;
HXDLIN(  31)																	if ((maskPixel5 == 0)) {
HXLINE(  31)																		col5 = this230;
            																	}
            																	else {
HXLINE(  31)																		Float m05;
HXDLIN(  31)																		int this231 = ((maskPixel5 >> 24) & 255);
HXDLIN(  31)																		if ((this231 == 0)) {
HXLINE(  31)																			m05 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m05 = (( (Float)(this231) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float m15;
HXDLIN(  31)																		int this232 = ((maskPixel5 >> 16) & 255);
HXDLIN(  31)																		if ((this232 == 0)) {
HXLINE(  31)																			m15 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m15 = (( (Float)(this232) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float m25;
HXDLIN(  31)																		int this233 = ((maskPixel5 >> 8) & 255);
HXDLIN(  31)																		if ((this233 == 0)) {
HXLINE(  31)																			m25 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m25 = (( (Float)(this233) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float m35;
HXDLIN(  31)																		int this234 = (maskPixel5 & 255);
HXDLIN(  31)																		if ((this234 == 0)) {
HXLINE(  31)																			m35 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m35 = (( (Float)(this234) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this230 >> 24) & 255)) )));
HXDLIN(  31)																		int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this230 >> 16) & 255)) )));
HXDLIN(  31)																		int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this230 >> 8) & 255)) )));
HXDLIN(  31)																		int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this230 & 255)) )));
HXDLIN(  31)																		col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  31)																if ((col5 != 0)) {
HXLINE(  31)																	int x27 = (dx8 - rectLeft5);
HXDLIN(  31)																	int y27 = (dy8 - rectTop5);
HXDLIN(  31)																	int c26 = col5;
HXDLIN(  31)																	bool _hx_tmp55;
HXDLIN(  31)																	if ((((c26 >> 24) & 255) < 254)) {
HXLINE(  31)																		_hx_tmp55 = undoImage15->transparent;
            																	}
            																	else {
HXLINE(  31)																		_hx_tmp55 = false;
            																	}
HXDLIN(  31)																	if (_hx_tmp55) {
HXLINE(  31)																		int location14;
HXDLIN(  31)																		if (undoImage15->useVirtualPos) {
HXLINE(  31)																			location14 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x27) - undoImage15->virtualX));
            																		}
            																		else {
HXLINE(  31)																			location14 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage15->width) + x27)) ));
            																		}
HXDLIN(  31)																		int this235 = ::iterMagic::Iimg_obj::get(undoImage15->image,location14);
HXDLIN(  31)																		int this236;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			this236 = ((((((this235 >> 24) & 255) << 24) | ((this235 & 255) << 16)) | (((this235 >> 8) & 255) << 8)) | ((this235 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			this236 = this235;
            																		}
HXDLIN(  31)																		Float a117;
HXDLIN(  31)																		int this237 = ((this236 >> 24) & 255);
HXDLIN(  31)																		if ((this237 == 0)) {
HXLINE(  31)																			a117 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a117 = (( (Float)(this237) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r114;
HXDLIN(  31)																		int this238 = ((this236 >> 16) & 255);
HXDLIN(  31)																		if ((this238 == 0)) {
HXLINE(  31)																			r114 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r114 = (( (Float)(this238) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g114;
HXDLIN(  31)																		int this239 = ((this236 >> 8) & 255);
HXDLIN(  31)																		if ((this239 == 0)) {
HXLINE(  31)																			g114 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g114 = (( (Float)(this239) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b118;
HXDLIN(  31)																		int this240 = (this236 & 255);
HXDLIN(  31)																		if ((this240 == 0)) {
HXLINE(  31)																			b118 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b118 = (( (Float)(this240) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a215;
HXDLIN(  31)																		int this241 = ((col5 >> 24) & 255);
HXDLIN(  31)																		if ((this241 == 0)) {
HXLINE(  31)																			a215 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a215 = (( (Float)(this241) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r214;
HXDLIN(  31)																		int this242 = ((col5 >> 16) & 255);
HXDLIN(  31)																		if ((this242 == 0)) {
HXLINE(  31)																			r214 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r214 = (( (Float)(this242) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g214;
HXDLIN(  31)																		int this243 = ((col5 >> 8) & 255);
HXDLIN(  31)																		if ((this243 == 0)) {
HXLINE(  31)																			g214 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g214 = (( (Float)(this243) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b218;
HXDLIN(  31)																		int this244 = (col5 & 255);
HXDLIN(  31)																		if ((this244 == 0)) {
HXLINE(  31)																			b218 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b218 = (( (Float)(this244) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN(  31)																		int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a314) + (r214 * a215))));
HXDLIN(  31)																		int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a314) + (g214 * a215))));
HXDLIN(  31)																		int b47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b218 * a215))));
HXDLIN(  31)																		int a47 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN(  31)																		int blended14 = ((((a47 << 24) | (r34 << 16)) | (g34 << 8)) | b47);
HXDLIN(  31)																		{
HXLINE(  31)																			int _hx_tmp56;
HXDLIN(  31)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																				_hx_tmp56 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            																			}
            																			else {
HXLINE(  31)																				_hx_tmp56 = blended14;
            																			}
HXDLIN(  31)																			::iterMagic::Iimg_obj::set(undoImage15->image,location14,_hx_tmp56);
            																		}
            																	}
            																	else {
HXLINE(  31)																		::Dynamic this245 = undoImage15->image;
HXDLIN(  31)																		int index31;
HXDLIN(  31)																		if (undoImage15->useVirtualPos) {
HXLINE(  31)																			index31 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x27) - undoImage15->virtualX));
            																		}
            																		else {
HXLINE(  31)																			index31 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage15->width) + x27)) ));
            																		}
HXDLIN(  31)																		int _hx_tmp57;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			_hx_tmp57 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			_hx_tmp57 = c26;
            																		}
HXDLIN(  31)																		::iterMagic::Iimg_obj::set(this245,index31,_hx_tmp57);
            																	}
            																}
            																else {
HXLINE(  31)																	if (forceClear5) {
HXLINE(  31)																		::Dynamic this246 = undoImage15->image;
HXDLIN(  31)																		int x28 = (dx8 - rectLeft5);
HXDLIN(  31)																		int y28 = (dy8 - rectTop5);
HXDLIN(  31)																		int index32;
HXDLIN(  31)																		if (undoImage15->useVirtualPos) {
HXLINE(  31)																			index32 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x28) - undoImage15->virtualX));
            																		}
            																		else {
HXLINE(  31)																			index32 = ::Std_obj::_hx_int(( (Float)(((y28 * undoImage15->width) + x28)) ));
            																		}
HXDLIN(  31)																		::iterMagic::Iimg_obj::set(this246,index32,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  31)										bool found5 = false;
HXDLIN(  31)										Float s5 = ((Float)0.);
HXDLIN(  31)										Float t5 = ((Float)0.);
HXDLIN(  31)										Float sxx5 = ((Float)0.);
HXDLIN(  31)										Float txx5 = ((Float)0.);
HXDLIN(  31)										{
HXLINE(  31)											int _g_min10 = xIter35->start;
HXDLIN(  31)											int _g_max10 = xIter35->max;
HXDLIN(  31)											while((_g_min10 < _g_max10)){
HXLINE(  31)												_g_min10 = (_g_min10 + 1);
HXDLIN(  31)												int x29 = (_g_min10 - 1);
HXLINE(  60)												sxx5 = (sx5 * ( (Float)(x29) ));
HXLINE(  61)												txx5 = (tx5 * ( (Float)(x29) ));
HXLINE(  62)												found5 = false;
HXLINE(  31)												{
HXLINE(  31)													int _g_min11 = yIter35->start;
HXDLIN(  31)													int _g_max11 = yIter35->max;
HXDLIN(  31)													while((_g_min11 < _g_max11)){
HXLINE(  31)														_g_min11 = (_g_min11 + 1);
HXDLIN(  31)														int y29 = (_g_min11 - 1);
HXLINE(  64)														s5 = ((s05 + sxx5) + (sy5 * ( (Float)(y29) )));
HXLINE(  65)														t5 = ((t05 + txx5) + (ty5 * ( (Float)(y29) )));
HXLINE(  31)														bool _hx_tmp58;
HXDLIN(  31)														if (!((s5 <= 0))) {
HXLINE(  31)															_hx_tmp58 = (t5 <= 0);
            														}
            														else {
HXLINE(  31)															_hx_tmp58 = true;
            														}
HXDLIN(  31)														if (_hx_tmp58) {
HXLINE(  31)															if (found5) {
HXLINE(  31)																goto _hx_goto_98;
            															}
            														}
            														else {
HXLINE(  31)															if (((s5 + t5) < A5)) {
HXLINE(  31)																{
HXLINE(  31)																	int c27 = 0;
HXDLIN(  31)																	bool _hx_tmp59;
HXDLIN(  31)																	if ((((c27 >> 24) & 255) < 254)) {
HXLINE(  31)																		_hx_tmp59 = this224->transparent;
            																	}
            																	else {
HXLINE(  31)																		_hx_tmp59 = false;
            																	}
HXDLIN(  31)																	if (_hx_tmp59) {
HXLINE(  31)																		int location15;
HXDLIN(  31)																		if (this224->useVirtualPos) {
HXLINE(  31)																			location15 = ::Std_obj::_hx_int(((((( (Float)(y29) ) - this224->virtualY) * ( (Float)(this224->width) )) + x29) - this224->virtualX));
            																		}
            																		else {
HXLINE(  31)																			location15 = ::Std_obj::_hx_int(( (Float)(((y29 * this224->width) + x29)) ));
            																		}
HXDLIN(  31)																		int this247 = ::iterMagic::Iimg_obj::get(this224->image,location15);
HXDLIN(  31)																		int this248;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			this248 = ((((((this247 >> 24) & 255) << 24) | ((this247 & 255) << 16)) | (((this247 >> 8) & 255) << 8)) | ((this247 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			this248 = this247;
            																		}
HXDLIN(  31)																		Float a118;
HXDLIN(  31)																		int this249 = ((this248 >> 24) & 255);
HXDLIN(  31)																		if ((this249 == 0)) {
HXLINE(  31)																			a118 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a118 = (( (Float)(this249) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r115;
HXDLIN(  31)																		int this250 = ((this248 >> 16) & 255);
HXDLIN(  31)																		if ((this250 == 0)) {
HXLINE(  31)																			r115 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r115 = (( (Float)(this250) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g115;
HXDLIN(  31)																		int this251 = ((this248 >> 8) & 255);
HXDLIN(  31)																		if ((this251 == 0)) {
HXLINE(  31)																			g115 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g115 = (( (Float)(this251) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b119;
HXDLIN(  31)																		int this252 = (this248 & 255);
HXDLIN(  31)																		if ((this252 == 0)) {
HXLINE(  31)																			b119 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b119 = (( (Float)(this252) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a216;
HXDLIN(  31)																		int this253 = ((0 >> 24) & 255);
HXDLIN(  31)																		if ((this253 == 0)) {
HXLINE(  31)																			a216 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a216 = (( (Float)(this253) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r215;
HXDLIN(  31)																		int this254 = ((0 >> 16) & 255);
HXDLIN(  31)																		if ((this254 == 0)) {
HXLINE(  31)																			r215 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r215 = (( (Float)(this254) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g215;
HXDLIN(  31)																		int this255 = ((0 >> 8) & 255);
HXDLIN(  31)																		if ((this255 == 0)) {
HXLINE(  31)																			g215 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g215 = (( (Float)(this255) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b219;
HXDLIN(  31)																		int this256 = (0 & 255);
HXDLIN(  31)																		if ((this256 == 0)) {
HXLINE(  31)																			b219 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b219 = (( (Float)(this256) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN(  31)																		int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a315) + (r215 * a216))));
HXDLIN(  31)																		int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a315) + (g215 * a216))));
HXDLIN(  31)																		int b48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b219 * a216))));
HXDLIN(  31)																		int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN(  31)																		int blended15 = ((((a48 << 24) | (r35 << 16)) | (g35 << 8)) | b48);
HXDLIN(  31)																		{
HXLINE(  31)																			int _hx_tmp60;
HXDLIN(  31)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																				_hx_tmp60 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            																			}
            																			else {
HXLINE(  31)																				_hx_tmp60 = blended15;
            																			}
HXDLIN(  31)																			::iterMagic::Iimg_obj::set(this224->image,location15,_hx_tmp60);
            																		}
            																	}
            																	else {
HXLINE(  31)																		::Dynamic this257 = this224->image;
HXDLIN(  31)																		int index33;
HXDLIN(  31)																		if (this224->useVirtualPos) {
HXLINE(  31)																			index33 = ::Std_obj::_hx_int(((((( (Float)(y29) ) - this224->virtualY) * ( (Float)(this224->width) )) + x29) - this224->virtualX));
            																		}
            																		else {
HXLINE(  31)																			index33 = ::Std_obj::_hx_int(( (Float)(((y29 * this224->width) + x29)) ));
            																		}
HXDLIN(  31)																		int _hx_tmp61;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			_hx_tmp61 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			_hx_tmp61 = c27;
            																		}
HXDLIN(  31)																		::iterMagic::Iimg_obj::set(this257,index33,_hx_tmp61);
            																	}
            																}
HXLINE(  73)																found5 = true;
            															}
            															else {
HXLINE(  31)																if (found5) {
HXLINE(  31)																	goto _hx_goto_98;
            																}
            															}
            														}
            													}
            													_hx_goto_98:;
            												}
            											}
            										}
HXDLIN(  31)										if ((hasHit5 == true)) {
HXLINE(  31)											 ::pi_xy::algo::HitTri v18 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX1,cy8,bx5,by5,cx8,cy9,true);
HXDLIN(  31)											if (hasUndo5) {
HXLINE(  31)												v18->undoImage = undoImage15;
HXDLIN(  31)												v18->undoX = xIter35->start;
HXDLIN(  31)												v18->undoY = yIter35->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX5 = nextX5;
HXLINE(  47)							lastY5 = nextY5;
            						}
            					}
            				}
            			}
HXLINE(  31)			{
HXLINE(  31)				int r_x4 = ::Std_obj::_hx_int(thick);
HXDLIN(  31)				int r_y4 = ::Std_obj::_hx_int((thick + dy6));
HXDLIN(  31)				int r_w4 = ::Std_obj::_hx_int(wid1);
HXDLIN(  31)				int r_h4 = ::Std_obj::_hx_int(( (Float)(tall2) ));
HXDLIN(  31)				int xmax4 = ((r_x4 + r_w4) + 1);
HXDLIN(  31)				int ymax4 = ((r_y4 + r_h4) + 1);
HXDLIN(  31)				int ii_min56 = r_x4;
HXDLIN(  31)				int ii_max56 = xmax4;
HXDLIN(  31)				int xRange__start4 = ii_min56;
HXDLIN(  31)				int xRange__max4 = ii_max56;
HXDLIN(  31)				int ii_min57 = r_y4;
HXDLIN(  31)				int ii_max57 = ymax4;
HXDLIN(  31)				int yRange__start4 = ii_min57;
HXDLIN(  31)				int yRange__max4 = ii_max57;
HXDLIN(  31)				int range_x4 = xRange__start4;
HXDLIN(  31)				int range_y4 = (yRange__start4 - 1);
HXDLIN(  31)				int range_xReset4 = range_x4;
HXDLIN(  31)				int range_yReset4 = range_y4;
HXDLIN(  31)				int range_xMax4 = (xRange__max4 - 2);
HXDLIN(  31)				int range_yMax4 = (yRange__max4 - 2);
HXDLIN(  31)				int _this_min4 = 0;
HXDLIN(  31)				int _this_max4 = ::Std_obj::_hx_int(( (Float)(((xRange__max4 - xRange__start4) * (yRange__max4 - yRange__start4))) ));
HXDLIN(  31)				while((_this_min4 < _this_max4)){
HXLINE(  31)					_this_min4 = (_this_min4 + 1);
HXDLIN(  31)					int i56 = (_this_min4 - 1);
HXDLIN(  31)					if ((range_y4 > range_yMax4)) {
HXLINE(  31)						range_y4 = range_yReset4;
HXDLIN(  31)						range_x4 = (range_x4 + 1);
            					}
HXDLIN(  31)					range_y4 = (range_y4 + 1);
HXDLIN(  31)					int i57 = i56;
HXDLIN(  31)					{
HXLINE(  31)						int x30 = range_x4;
HXDLIN(  31)						int y30 = range_y4;
HXDLIN(  31)						int c28 = 0;
HXDLIN(  31)						bool _hx_tmp62;
HXDLIN(  31)						if ((((c28 >> 24) & 255) < 254)) {
HXLINE(  31)							_hx_tmp62 = temp->transparent;
            						}
            						else {
HXLINE(  31)							_hx_tmp62 = false;
            						}
HXDLIN(  31)						if (_hx_tmp62) {
HXLINE(  31)							int location16;
HXDLIN(  31)							if (temp->useVirtualPos) {
HXLINE(  31)								location16 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - temp->virtualY) * ( (Float)(temp->width) )) + x30) - temp->virtualX));
            							}
            							else {
HXLINE(  31)								location16 = ::Std_obj::_hx_int(( (Float)(((y30 * temp->width) + x30)) ));
            							}
HXDLIN(  31)							int this258 = ::iterMagic::Iimg_obj::get(temp->image,location16);
HXDLIN(  31)							int this259;
HXDLIN(  31)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)								this259 = ((((((this258 >> 24) & 255) << 24) | ((this258 & 255) << 16)) | (((this258 >> 8) & 255) << 8)) | ((this258 >> 16) & 255));
            							}
            							else {
HXLINE(  31)								this259 = this258;
            							}
HXDLIN(  31)							Float a119;
HXDLIN(  31)							int this260 = ((this259 >> 24) & 255);
HXDLIN(  31)							if ((this260 == 0)) {
HXLINE(  31)								a119 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								a119 = (( (Float)(this260) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float r116;
HXDLIN(  31)							int this261 = ((this259 >> 16) & 255);
HXDLIN(  31)							if ((this261 == 0)) {
HXLINE(  31)								r116 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								r116 = (( (Float)(this261) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float g116;
HXDLIN(  31)							int this262 = ((this259 >> 8) & 255);
HXDLIN(  31)							if ((this262 == 0)) {
HXLINE(  31)								g116 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								g116 = (( (Float)(this262) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float b120;
HXDLIN(  31)							int this263 = (this259 & 255);
HXDLIN(  31)							if ((this263 == 0)) {
HXLINE(  31)								b120 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								b120 = (( (Float)(this263) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float a217;
HXDLIN(  31)							int this264 = ((0 >> 24) & 255);
HXDLIN(  31)							if ((this264 == 0)) {
HXLINE(  31)								a217 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								a217 = (( (Float)(this264) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float r216;
HXDLIN(  31)							int this265 = ((0 >> 16) & 255);
HXDLIN(  31)							if ((this265 == 0)) {
HXLINE(  31)								r216 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								r216 = (( (Float)(this265) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float g216;
HXDLIN(  31)							int this266 = ((0 >> 8) & 255);
HXDLIN(  31)							if ((this266 == 0)) {
HXLINE(  31)								g216 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								g216 = (( (Float)(this266) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float b220;
HXDLIN(  31)							int this267 = (0 & 255);
HXDLIN(  31)							if ((this267 == 0)) {
HXLINE(  31)								b220 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								b220 = (( (Float)(this267) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float a316 = (a119 * (( (Float)(1) ) - a217));
HXDLIN(  31)							int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a316) + (r216 * a217))));
HXDLIN(  31)							int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a316) + (g216 * a217))));
HXDLIN(  31)							int b49 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a316) + (b220 * a217))));
HXDLIN(  31)							int a49 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN(  31)							int blended16 = ((((a49 << 24) | (r36 << 16)) | (g36 << 8)) | b49);
HXDLIN(  31)							{
HXLINE(  31)								int _hx_tmp63;
HXDLIN(  31)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)									_hx_tmp63 = ((((((blended16 >> 24) & 255) << 24) | ((blended16 & 255) << 16)) | (((blended16 >> 8) & 255) << 8)) | ((blended16 >> 16) & 255));
            								}
            								else {
HXLINE(  31)									_hx_tmp63 = blended16;
            								}
HXDLIN(  31)								::iterMagic::Iimg_obj::set(temp->image,location16,_hx_tmp63);
            							}
            						}
            						else {
HXLINE(  31)							::Dynamic this268 = temp->image;
HXDLIN(  31)							int index34;
HXDLIN(  31)							if (temp->useVirtualPos) {
HXLINE(  31)								index34 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - temp->virtualY) * ( (Float)(temp->width) )) + x30) - temp->virtualX));
            							}
            							else {
HXLINE(  31)								index34 = ::Std_obj::_hx_int(( (Float)(((y30 * temp->width) + x30)) ));
            							}
HXDLIN(  31)							int _hx_tmp64;
HXDLIN(  31)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)								_hx_tmp64 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            							}
            							else {
HXLINE(  31)								_hx_tmp64 = c28;
            							}
HXDLIN(  31)							::iterMagic::Iimg_obj::set(this268,index34,_hx_tmp64);
            						}
            					}
            				}
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::pi_xy::ImageStruct this269 = temp;
HXDLIN(  31)				Float cx9 = (thick + dx6);
HXDLIN(  31)				Float rx3 = ( (Float)(dx6) );
HXDLIN(  31)				{
HXLINE(  31)					 ::Dynamic targetError6 = ((Float)1.05);
HXDLIN(  31)					if (::hx::IsNull( targetError6 )) {
HXLINE( 113)						targetError6 = ((Float)1.05);
            					}
HXLINE(  31)					Float rSmall6;
HXDLIN(  31)					if ((rx3 > bottomRadius1)) {
HXLINE(  31)						rSmall6 = bottomRadius1;
            					}
            					else {
HXLINE(  31)						rSmall6 = rx3;
            					}
HXDLIN(  31)					 ::Dynamic targetE6 = ( (Float)(targetError6) );
HXDLIN(  31)					if (::hx::IsNull( targetE6 )) {
HXDLIN(  20)						targetE6 = ((Float)1.05);
            					}
HXLINE(  31)					int result6 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE6) ) / rSmall6)))));
HXDLIN(  31)					int noSides6;
HXDLIN(  31)					if ((result6 < 12)) {
HXLINE(  31)						noSides6 = 12;
            					}
            					else {
HXLINE(  31)						if ((result6 > 500)) {
HXLINE(  31)							noSides6 = 500;
            						}
            						else {
HXLINE(  31)							noSides6 = result6;
            						}
            					}
HXDLIN(  31)					int sides6 = (::Math_obj::ceil((( (Float)(noSides6) ) / ( (Float)(4) ))) * 4);
HXDLIN(  31)					Float theta6 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides6) ));
HXDLIN(  31)					Float omega6 = (::Math_obj::PI / ( (Float)(2) ));
HXDLIN(  31)					int quarter6 = ::Std_obj::_hx_int((( (Float)(sides6) ) / ( (Float)(4) )));
HXDLIN(  31)					Float lastX6 = ((Float)0.);
HXDLIN(  31)					Float lastY6 = ((Float)0.);
HXDLIN(  31)					{
HXLINE(  26)						lastX6 = (cx9 + (rx3 * ::Math_obj::cos(((( (Float)(sides6) ) * theta6) + omega6))));
HXLINE(  27)						lastY6 = (lowerY1 + (bottomRadius1 * ::Math_obj::sin(((( (Float)(sides6) ) * theta6) + omega6))));
            					}
HXLINE(  31)					{
HXLINE(  31)						int _g148 = 0;
HXDLIN(  31)						int _g149 = (quarter6 + 1);
HXDLIN(  31)						while((_g148 < _g149)){
HXLINE(  31)							_g148 = (_g148 + 1);
HXDLIN(  31)							int i58 = (_g148 - 1);
HXDLIN(  31)							Float nextX6 = (cx9 + (rx3 * ::Math_obj::cos((((( (Float)(i58) ) * theta6) + ((Float)0.0001)) + omega6))));
HXDLIN(  31)							Float nextY6 = (lowerY1 + (bottomRadius1 * ::Math_obj::sin((((( (Float)(i58) ) * theta6) + ((Float)0.0001)) + omega6))));
HXDLIN(  31)							{
HXLINE(  31)								 ::pi_xy::ImageStruct this270 = this269;
HXDLIN(  31)								bool hasHit6 = false;
HXDLIN(  31)								bool hasUndo6 = false;
HXDLIN(  31)								{
HXLINE(  31)									Float bx6 = lastX6;
HXDLIN(  31)									Float by6 = lastY6;
HXDLIN(  31)									Float cx10 = nextX6;
HXDLIN(  31)									Float cy10 = nextY6;
HXDLIN(  31)									bool adjustWinding6 = (((((cx9 * by6) - (bx6 * lowerY1)) + ((bx6 * cy10) - (cx10 * by6))) + ((cx10 * lowerY1) - (cx9 * cy10))) > 0);
HXDLIN(  31)									if (!(adjustWinding6)) {
HXLINE(  31)										Float bx_6 = bx6;
HXDLIN(  31)										Float by_6 = by6;
HXLINE(  25)										bx6 = cx10;
HXLINE(  26)										by6 = cy10;
HXLINE(  27)										cx10 = bx_6;
HXLINE(  28)										cy10 = by_6;
            									}
HXLINE(  31)									{
HXLINE(  31)										Float s06 = ((lowerY1 * cx10) - (cx9 * cy10));
HXDLIN(  31)										Float sx6 = (cy10 - lowerY1);
HXDLIN(  31)										Float sy6 = (cx9 - cx10);
HXDLIN(  31)										Float t06 = ((cx9 * by6) - (lowerY1 * bx6));
HXDLIN(  31)										Float tx6 = (lowerY1 - by6);
HXDLIN(  31)										Float ty6 = (bx6 - cx9);
HXDLIN(  31)										Float A6 = ((((-(by6) * cx10) + (lowerY1 * (-(bx6) + cx10))) + (cx9 * (by6 - cy10))) + (bx6 * cy10));
HXDLIN(  31)										 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN(  31)										if ((cx9 > bx6)) {
HXLINE(  31)											if ((cx9 > cx10)) {
HXLINE(  31)												int min24;
HXDLIN(  31)												if ((bx6 > cx10)) {
HXLINE(  31)													min24 = ::Math_obj::floor(cx10);
            												}
            												else {
HXLINE(  31)													min24 = ::Math_obj::floor(bx6);
            												}
HXDLIN(  31)												int ii_min58 = min24;
HXDLIN(  31)												int ii_max58 = ::Math_obj::ceil(cx9);
HXDLIN(  31)												xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            											}
            											else {
HXLINE(  31)												int ii_min59 = ::Math_obj::floor(bx6);
HXDLIN(  31)												int ii_max59 = ::Math_obj::ceil(cx10);
HXDLIN(  31)												xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            											}
            										}
            										else {
HXLINE(  31)											if ((bx6 > cx10)) {
HXLINE(  31)												int min25;
HXDLIN(  31)												if ((cx9 > cx10)) {
HXLINE(  31)													min25 = ::Math_obj::floor(cx10);
            												}
            												else {
HXLINE(  31)													min25 = ::Math_obj::ceil(cx9);
            												}
HXDLIN(  31)												int ii_min60 = min25;
HXDLIN(  31)												int ii_max60 = ::Math_obj::ceil(bx6);
HXDLIN(  31)												xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            											}
            											else {
HXLINE(  31)												int ii_min61 = ::Math_obj::floor(cx9);
HXDLIN(  31)												int ii_max61 = ::Math_obj::ceil(cx10);
HXDLIN(  31)												xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            											}
            										}
HXDLIN(  31)										 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN(  31)										if ((lowerY1 > by6)) {
HXLINE(  31)											if ((lowerY1 > cy10)) {
HXLINE(  31)												int min26;
HXDLIN(  31)												if ((by6 > cy10)) {
HXLINE(  31)													min26 = ::Math_obj::floor(cy10);
            												}
            												else {
HXLINE(  31)													min26 = ::Math_obj::floor(by6);
            												}
HXDLIN(  31)												int ii_min62 = min26;
HXDLIN(  31)												int ii_max62 = ::Math_obj::ceil(lowerY1);
HXDLIN(  31)												yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            											}
            											else {
HXLINE(  31)												int ii_min63 = ::Math_obj::floor(by6);
HXDLIN(  31)												int ii_max63 = ::Math_obj::ceil(cy10);
HXDLIN(  31)												yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            											}
            										}
            										else {
HXLINE(  31)											if ((by6 > cy10)) {
HXLINE(  31)												int min27;
HXDLIN(  31)												if ((lowerY1 > cy10)) {
HXLINE(  31)													min27 = ::Math_obj::floor(cy10);
            												}
            												else {
HXLINE(  31)													min27 = ::Math_obj::ceil(lowerY1);
            												}
HXDLIN(  31)												int ii_min64 = min27;
HXDLIN(  31)												int ii_max64 = ::Math_obj::ceil(by6);
HXDLIN(  31)												yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min64,ii_max64);
            											}
            											else {
HXLINE(  31)												int ii_min65 = ::Math_obj::floor(lowerY1);
HXDLIN(  31)												int ii_max65 = ::Math_obj::ceil(cy10);
HXDLIN(  31)												yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min65,ii_max65);
            											}
            										}
HXDLIN(  31)										 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN(  31)										if (hasUndo6) {
HXLINE(  31)											int width7 = ((xIter36->max - xIter36->start) + 1);
HXDLIN(  31)											int height7 = ((yIter36->max - yIter36->start) + 1);
HXDLIN(  31)											 ::Dynamic imageType7 = null();
HXDLIN(  31)											 ::pi_xy::ImageStruct this271 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  31)											if (::hx::IsNull( imageType7 )) {
HXLINE(  54)												imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  31)											::Dynamic undoImage19;
HXDLIN(  31)											switch((int)(( (int)(imageType7) ))){
            												case (int)0: {
HXLINE(  31)													 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::BytesImg b50 = byt7;
HXDLIN(  31)													{
HXLINE(  31)														b50->width = width7;
HXDLIN(  31)														b50->height = height7;
HXDLIN(  31)														b50->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  31)														b50->data = ::haxe::io::Bytes_obj::alloc((b50->length * 4));
HXDLIN(  31)														{
HXLINE(  31)															int len14 = b50->length;
HXDLIN(  31)															int w7 = 0;
HXDLIN(  31)															{
HXLINE(  31)																int _g150 = 0;
HXDLIN(  31)																int _g151 = b50->height;
HXDLIN(  31)																while((_g150 < _g151)){
HXLINE(  31)																	_g150 = (_g150 + 1);
HXDLIN(  31)																	int y31 = (_g150 - 1);
HXDLIN(  31)																	{
HXLINE(  31)																		int _g152 = 0;
HXDLIN(  31)																		int _g153 = b50->width;
HXDLIN(  31)																		while((_g152 < _g153)){
HXLINE(  31)																			_g152 = (_g152 + 1);
HXDLIN(  31)																			int x31 = (_g152 - 1);
HXDLIN(  31)																			{
HXLINE(  31)																				w7 = (w7 + 1);
HXDLIN(  31)																				b50->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  31)																			{
HXLINE(  31)																				w7 = (w7 + 1);
HXDLIN(  31)																				b50->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  31)																			{
HXLINE(  31)																				w7 = (w7 + 1);
HXDLIN(  31)																				b50->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  31)																			{
HXLINE(  31)																				w7 = (w7 + 1);
HXDLIN(  31)																				b50->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  31)													undoImage19 = b50;
            												}
            												break;
            												case (int)1: {
HXLINE(  31)													 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::ArrIntImg a50 = arrI7;
HXDLIN(  31)													{
HXLINE(  31)														a50->width = width7;
HXDLIN(  31)														a50->height = height7;
HXDLIN(  31)														a50->data = ::Array_obj< int >::__new(0);
HXDLIN(  31)														a50->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  31)														{
HXLINE(  31)															int _g154 = 0;
HXDLIN(  31)															int _g155 = a50->length;
HXDLIN(  31)															while((_g154 < _g155)){
HXLINE(  31)																_g154 = (_g154 + 1);
HXDLIN(  31)																int i59 = (_g154 - 1);
HXDLIN(  31)																a50->data[i59] = 0;
            															}
            														}
            													}
HXDLIN(  31)													undoImage19 = a50;
            												}
            												break;
            												case (int)2: {
HXLINE(  31)													 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::U32ArrImg b51 = u32a7;
HXDLIN(  31)													{
HXLINE(  31)														b51->width = width7;
HXDLIN(  31)														b51->height = height7;
HXDLIN(  31)														b51->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  31)														int size7 = (b51->length * 4);
HXDLIN(  31)														b51->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN(  31)														{
HXLINE(  31)															int _g156 = 0;
HXDLIN(  31)															int _g157 = b51->length;
HXDLIN(  31)															while((_g156 < _g157)){
HXLINE(  31)																_g156 = (_g156 + 1);
HXDLIN(  31)																int i60 = (_g156 - 1);
HXDLIN(  31)																{
HXLINE(  31)																	 ::haxe::io::ArrayBufferViewImpl this272 = b51->data;
HXDLIN(  31)																	bool undoImage20;
HXDLIN(  31)																	if ((i60 >= 0)) {
HXLINE(  31)																		undoImage20 = (i60 < (this272->byteLength >> 2));
            																	}
            																	else {
HXLINE(  31)																		undoImage20 = false;
            																	}
HXDLIN(  31)																	if (undoImage20) {
HXLINE(  31)																		 ::haxe::io::Bytes _this7 = this272->bytes;
HXDLIN(  31)																		int pos7 = ((i60 << 2) + this272->byteOffset);
HXDLIN(  31)																		_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN(  31)																		_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN(  31)																		_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN(  31)																		_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  31)													undoImage19 = b51;
            												}
            												break;
            												case (int)3: {
HXLINE(  31)													 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::VecIntImg v19 = vec7;
HXDLIN(  31)													{
HXLINE(  31)														v19->width = width7;
HXDLIN(  31)														v19->height = height7;
HXDLIN(  31)														v19->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  31)														v19->data = ::Array_obj< int >::__new(v19->length);
HXDLIN(  31)														{
HXLINE(  31)															int _g158 = 0;
HXDLIN(  31)															int _g159 = v19->length;
HXDLIN(  31)															while((_g158 < _g159)){
HXLINE(  31)																_g158 = (_g158 + 1);
HXDLIN(  31)																int i61 = (_g158 - 1);
HXDLIN(  31)																v19->data->__unsafe_set(i61,0);
            															}
            														}
            													}
HXDLIN(  31)													undoImage19 = v19;
            												}
            												break;
            												case (int)4: {
HXLINE(  31)													 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::StackIntImg b52 = sInt7;
HXDLIN(  31)													{
HXLINE(  31)														b52->width = width7;
HXDLIN(  31)														b52->height = height7;
HXDLIN(  31)														b52->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  31)														b52->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  31)														{
HXLINE(  31)															int len15 = b52->length;
HXDLIN(  31)															 ::haxe::ds::GenericStack_Int d7 = b52->data;
HXDLIN(  31)															if (::hx::IsNull( d7->head )) {
HXLINE(  31)																int _g160 = 0;
HXDLIN(  31)																int _g161 = len15;
HXDLIN(  31)																while((_g160 < _g161)){
HXLINE(  31)																	_g160 = (_g160 + 1);
HXDLIN(  31)																	int i62 = (_g160 - 1);
HXDLIN(  31)																	d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            																}
            															}
            															else {
HXLINE(  31)																int _g162 = 0;
HXDLIN(  31)																int _g163 = len15;
HXDLIN(  31)																while((_g162 < _g163)){
HXLINE(  31)																	_g162 = (_g162 + 1);
HXDLIN(  31)																	int i63 = (_g162 - 1);
HXDLIN(  31)																	{
HXLINE(  31)																		 ::haxe::ds::GenericCell_Int l7 = b52->data->head;
HXDLIN(  31)																		 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN(  31)																		{
HXLINE(  31)																			int _g164 = 0;
HXDLIN(  31)																			int _g165 = i63;
HXDLIN(  31)																			while((_g164 < _g165)){
HXLINE(  31)																				_g164 = (_g164 + 1);
HXDLIN(  31)																				int i64 = (_g164 - 1);
HXLINE( 345)																				prev7 = l7;
HXLINE( 346)																				l7 = l7->next;
            																			}
            																		}
HXLINE(  31)																		if (::hx::IsNull( prev7 )) {
HXLINE(  31)																			b52->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  31)																			l7 = null();
            																		}
            																		else {
HXLINE(  31)																			prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  31)																			l7 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  31)													undoImage19 = b52;
            												}
            												break;
            											}
HXDLIN(  31)											this271->image = undoImage19;
HXDLIN(  31)											this271->width = width7;
HXDLIN(  31)											this271->height = height7;
HXDLIN(  31)											this271->imageType = ( (int)(imageType7) );
HXDLIN(  31)											undoImage18 = this271;
HXDLIN(  31)											{
HXLINE(  31)												int rectLeft6 = xIter36->start;
HXDLIN(  31)												int rectTop6 = yIter36->start;
HXDLIN(  31)												int rectRight6 = xIter36->max;
HXDLIN(  31)												bool forceClear6 = false;
HXDLIN(  31)												{
HXLINE(  31)													int _g166 = rectTop6;
HXDLIN(  31)													int _g167 = yIter36->max;
HXDLIN(  31)													while((_g166 < _g167)){
HXLINE(  31)														_g166 = (_g166 + 1);
HXDLIN(  31)														int dy9 = (_g166 - 1);
HXDLIN(  31)														{
HXLINE(  31)															int _g168 = rectLeft6;
HXDLIN(  31)															int _g169 = rectRight6;
HXDLIN(  31)															while((_g168 < _g169)){
HXLINE(  31)																_g168 = (_g168 + 1);
HXDLIN(  31)																int dx9 = (_g168 - 1);
HXDLIN(  31)																::Dynamic this273 = this270->image;
HXDLIN(  31)																int index35;
HXDLIN(  31)																if (this270->useVirtualPos) {
HXLINE(  31)																	index35 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this270->virtualY) * ( (Float)(this270->width) )) + dx9) - this270->virtualX));
            																}
            																else {
HXLINE(  31)																	index35 = ::Std_obj::_hx_int(( (Float)(((dy9 * this270->width) + dx9)) ));
            																}
HXDLIN(  31)																int c29 = ::iterMagic::Iimg_obj::get(this273,index35);
HXDLIN(  31)																int col6;
HXDLIN(  31)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																	col6 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            																}
            																else {
HXLINE(  31)																	col6 = c29;
            																}
HXDLIN(  31)																bool _hx_tmp65;
HXDLIN(  31)																if (this270->useMask) {
HXLINE(  31)																	_hx_tmp65 = ::hx::IsNotNull( this270->mask );
            																}
            																else {
HXLINE(  31)																	_hx_tmp65 = false;
            																}
HXDLIN(  31)																if (_hx_tmp65) {
HXLINE(  31)																	 ::pi_xy::ImageStruct this274 = this270->mask;
HXDLIN(  31)																	::Dynamic this275 = this274->image;
HXDLIN(  31)																	int index36;
HXDLIN(  31)																	if (this274->useVirtualPos) {
HXLINE(  31)																		index36 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this274->virtualY) * ( (Float)(this274->width) )) + dx9) - this274->virtualX));
            																	}
            																	else {
HXLINE(  31)																		index36 = ::Std_obj::_hx_int(( (Float)(((dy9 * this274->width) + dx9)) ));
            																	}
HXDLIN(  31)																	int c30 = ::iterMagic::Iimg_obj::get(this275,index36);
HXDLIN(  31)																	int v20;
HXDLIN(  31)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																		v20 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            																	}
            																	else {
HXLINE(  31)																		v20 = c30;
            																	}
HXDLIN(  31)																	int maskPixel6 = v20;
HXDLIN(  31)																	int this276 = col6;
HXDLIN(  31)																	if ((maskPixel6 == 0)) {
HXLINE(  31)																		col6 = this276;
            																	}
            																	else {
HXLINE(  31)																		Float m06;
HXDLIN(  31)																		int this277 = ((maskPixel6 >> 24) & 255);
HXDLIN(  31)																		if ((this277 == 0)) {
HXLINE(  31)																			m06 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m06 = (( (Float)(this277) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float m16;
HXDLIN(  31)																		int this278 = ((maskPixel6 >> 16) & 255);
HXDLIN(  31)																		if ((this278 == 0)) {
HXLINE(  31)																			m16 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m16 = (( (Float)(this278) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float m26;
HXDLIN(  31)																		int this279 = ((maskPixel6 >> 8) & 255);
HXDLIN(  31)																		if ((this279 == 0)) {
HXLINE(  31)																			m26 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m26 = (( (Float)(this279) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float m36;
HXDLIN(  31)																		int this280 = (maskPixel6 & 255);
HXDLIN(  31)																		if ((this280 == 0)) {
HXLINE(  31)																			m36 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m36 = (( (Float)(this280) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this276 >> 24) & 255)) )));
HXDLIN(  31)																		int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this276 >> 16) & 255)) )));
HXDLIN(  31)																		int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this276 >> 8) & 255)) )));
HXDLIN(  31)																		int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this276 & 255)) )));
HXDLIN(  31)																		col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  31)																if ((col6 != 0)) {
HXLINE(  31)																	int x32 = (dx9 - rectLeft6);
HXDLIN(  31)																	int y32 = (dy9 - rectTop6);
HXDLIN(  31)																	int c31 = col6;
HXDLIN(  31)																	bool _hx_tmp66;
HXDLIN(  31)																	if ((((c31 >> 24) & 255) < 254)) {
HXLINE(  31)																		_hx_tmp66 = undoImage18->transparent;
            																	}
            																	else {
HXLINE(  31)																		_hx_tmp66 = false;
            																	}
HXDLIN(  31)																	if (_hx_tmp66) {
HXLINE(  31)																		int location17;
HXDLIN(  31)																		if (undoImage18->useVirtualPos) {
HXLINE(  31)																			location17 = ::Std_obj::_hx_int(((((( (Float)(y32) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x32) - undoImage18->virtualX));
            																		}
            																		else {
HXLINE(  31)																			location17 = ::Std_obj::_hx_int(( (Float)(((y32 * undoImage18->width) + x32)) ));
            																		}
HXDLIN(  31)																		int this281 = ::iterMagic::Iimg_obj::get(undoImage18->image,location17);
HXDLIN(  31)																		int this282;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			this282 = ((((((this281 >> 24) & 255) << 24) | ((this281 & 255) << 16)) | (((this281 >> 8) & 255) << 8)) | ((this281 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			this282 = this281;
            																		}
HXDLIN(  31)																		Float a120;
HXDLIN(  31)																		int this283 = ((this282 >> 24) & 255);
HXDLIN(  31)																		if ((this283 == 0)) {
HXLINE(  31)																			a120 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a120 = (( (Float)(this283) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r117;
HXDLIN(  31)																		int this284 = ((this282 >> 16) & 255);
HXDLIN(  31)																		if ((this284 == 0)) {
HXLINE(  31)																			r117 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r117 = (( (Float)(this284) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g117;
HXDLIN(  31)																		int this285 = ((this282 >> 8) & 255);
HXDLIN(  31)																		if ((this285 == 0)) {
HXLINE(  31)																			g117 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g117 = (( (Float)(this285) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b121;
HXDLIN(  31)																		int this286 = (this282 & 255);
HXDLIN(  31)																		if ((this286 == 0)) {
HXLINE(  31)																			b121 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b121 = (( (Float)(this286) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a218;
HXDLIN(  31)																		int this287 = ((col6 >> 24) & 255);
HXDLIN(  31)																		if ((this287 == 0)) {
HXLINE(  31)																			a218 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a218 = (( (Float)(this287) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r217;
HXDLIN(  31)																		int this288 = ((col6 >> 16) & 255);
HXDLIN(  31)																		if ((this288 == 0)) {
HXLINE(  31)																			r217 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r217 = (( (Float)(this288) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g217;
HXDLIN(  31)																		int this289 = ((col6 >> 8) & 255);
HXDLIN(  31)																		if ((this289 == 0)) {
HXLINE(  31)																			g217 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g217 = (( (Float)(this289) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b221;
HXDLIN(  31)																		int this290 = (col6 & 255);
HXDLIN(  31)																		if ((this290 == 0)) {
HXLINE(  31)																			b221 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b221 = (( (Float)(this290) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a317 = (a120 * (( (Float)(1) ) - a218));
HXDLIN(  31)																		int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a317) + (r217 * a218))));
HXDLIN(  31)																		int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a317) + (g217 * a218))));
HXDLIN(  31)																		int b53 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b121 * a317) + (b221 * a218))));
HXDLIN(  31)																		int a51 = ::Std_obj::_hx_int((( (Float)(255) ) * (a317 + a218)));
HXDLIN(  31)																		int blended17 = ((((a51 << 24) | (r37 << 16)) | (g37 << 8)) | b53);
HXDLIN(  31)																		{
HXLINE(  31)																			int _hx_tmp67;
HXDLIN(  31)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																				_hx_tmp67 = ((((((blended17 >> 24) & 255) << 24) | ((blended17 & 255) << 16)) | (((blended17 >> 8) & 255) << 8)) | ((blended17 >> 16) & 255));
            																			}
            																			else {
HXLINE(  31)																				_hx_tmp67 = blended17;
            																			}
HXDLIN(  31)																			::iterMagic::Iimg_obj::set(undoImage18->image,location17,_hx_tmp67);
            																		}
            																	}
            																	else {
HXLINE(  31)																		::Dynamic this291 = undoImage18->image;
HXDLIN(  31)																		int index37;
HXDLIN(  31)																		if (undoImage18->useVirtualPos) {
HXLINE(  31)																			index37 = ::Std_obj::_hx_int(((((( (Float)(y32) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x32) - undoImage18->virtualX));
            																		}
            																		else {
HXLINE(  31)																			index37 = ::Std_obj::_hx_int(( (Float)(((y32 * undoImage18->width) + x32)) ));
            																		}
HXDLIN(  31)																		int _hx_tmp68;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			_hx_tmp68 = ((((((c31 >> 24) & 255) << 24) | ((c31 & 255) << 16)) | (((c31 >> 8) & 255) << 8)) | ((c31 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			_hx_tmp68 = c31;
            																		}
HXDLIN(  31)																		::iterMagic::Iimg_obj::set(this291,index37,_hx_tmp68);
            																	}
            																}
            																else {
HXLINE(  31)																	if (forceClear6) {
HXLINE(  31)																		::Dynamic this292 = undoImage18->image;
HXDLIN(  31)																		int x33 = (dx9 - rectLeft6);
HXDLIN(  31)																		int y33 = (dy9 - rectTop6);
HXDLIN(  31)																		int index38;
HXDLIN(  31)																		if (undoImage18->useVirtualPos) {
HXLINE(  31)																			index38 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x33) - undoImage18->virtualX));
            																		}
            																		else {
HXLINE(  31)																			index38 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage18->width) + x33)) ));
            																		}
HXDLIN(  31)																		::iterMagic::Iimg_obj::set(this292,index38,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  31)										bool found6 = false;
HXDLIN(  31)										Float s6 = ((Float)0.);
HXDLIN(  31)										Float t6 = ((Float)0.);
HXDLIN(  31)										Float sxx6 = ((Float)0.);
HXDLIN(  31)										Float txx6 = ((Float)0.);
HXDLIN(  31)										{
HXLINE(  31)											int _g_min12 = xIter36->start;
HXDLIN(  31)											int _g_max12 = xIter36->max;
HXDLIN(  31)											while((_g_min12 < _g_max12)){
HXLINE(  31)												_g_min12 = (_g_min12 + 1);
HXDLIN(  31)												int x34 = (_g_min12 - 1);
HXLINE(  60)												sxx6 = (sx6 * ( (Float)(x34) ));
HXLINE(  61)												txx6 = (tx6 * ( (Float)(x34) ));
HXLINE(  62)												found6 = false;
HXLINE(  31)												{
HXLINE(  31)													int _g_min13 = yIter36->start;
HXDLIN(  31)													int _g_max13 = yIter36->max;
HXDLIN(  31)													while((_g_min13 < _g_max13)){
HXLINE(  31)														_g_min13 = (_g_min13 + 1);
HXDLIN(  31)														int y34 = (_g_min13 - 1);
HXLINE(  64)														s6 = ((s06 + sxx6) + (sy6 * ( (Float)(y34) )));
HXLINE(  65)														t6 = ((t06 + txx6) + (ty6 * ( (Float)(y34) )));
HXLINE(  31)														bool _hx_tmp69;
HXDLIN(  31)														if (!((s6 <= 0))) {
HXLINE(  31)															_hx_tmp69 = (t6 <= 0);
            														}
            														else {
HXLINE(  31)															_hx_tmp69 = true;
            														}
HXDLIN(  31)														if (_hx_tmp69) {
HXLINE(  31)															if (found6) {
HXLINE(  31)																goto _hx_goto_112;
            															}
            														}
            														else {
HXLINE(  31)															if (((s6 + t6) < A6)) {
HXLINE(  31)																{
HXLINE(  31)																	int c32 = 0;
HXDLIN(  31)																	bool _hx_tmp70;
HXDLIN(  31)																	if ((((c32 >> 24) & 255) < 254)) {
HXLINE(  31)																		_hx_tmp70 = this270->transparent;
            																	}
            																	else {
HXLINE(  31)																		_hx_tmp70 = false;
            																	}
HXDLIN(  31)																	if (_hx_tmp70) {
HXLINE(  31)																		int location18;
HXDLIN(  31)																		if (this270->useVirtualPos) {
HXLINE(  31)																			location18 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - this270->virtualY) * ( (Float)(this270->width) )) + x34) - this270->virtualX));
            																		}
            																		else {
HXLINE(  31)																			location18 = ::Std_obj::_hx_int(( (Float)(((y34 * this270->width) + x34)) ));
            																		}
HXDLIN(  31)																		int this293 = ::iterMagic::Iimg_obj::get(this270->image,location18);
HXDLIN(  31)																		int this294;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			this294 = ((((((this293 >> 24) & 255) << 24) | ((this293 & 255) << 16)) | (((this293 >> 8) & 255) << 8)) | ((this293 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			this294 = this293;
            																		}
HXDLIN(  31)																		Float a121;
HXDLIN(  31)																		int this295 = ((this294 >> 24) & 255);
HXDLIN(  31)																		if ((this295 == 0)) {
HXLINE(  31)																			a121 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a121 = (( (Float)(this295) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r118;
HXDLIN(  31)																		int this296 = ((this294 >> 16) & 255);
HXDLIN(  31)																		if ((this296 == 0)) {
HXLINE(  31)																			r118 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r118 = (( (Float)(this296) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g118;
HXDLIN(  31)																		int this297 = ((this294 >> 8) & 255);
HXDLIN(  31)																		if ((this297 == 0)) {
HXLINE(  31)																			g118 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g118 = (( (Float)(this297) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b122;
HXDLIN(  31)																		int this298 = (this294 & 255);
HXDLIN(  31)																		if ((this298 == 0)) {
HXLINE(  31)																			b122 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b122 = (( (Float)(this298) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a219;
HXDLIN(  31)																		int this299 = ((0 >> 24) & 255);
HXDLIN(  31)																		if ((this299 == 0)) {
HXLINE(  31)																			a219 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a219 = (( (Float)(this299) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r218;
HXDLIN(  31)																		int this300 = ((0 >> 16) & 255);
HXDLIN(  31)																		if ((this300 == 0)) {
HXLINE(  31)																			r218 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r218 = (( (Float)(this300) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g218;
HXDLIN(  31)																		int this301 = ((0 >> 8) & 255);
HXDLIN(  31)																		if ((this301 == 0)) {
HXLINE(  31)																			g218 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g218 = (( (Float)(this301) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b222;
HXDLIN(  31)																		int this302 = (0 & 255);
HXDLIN(  31)																		if ((this302 == 0)) {
HXLINE(  31)																			b222 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b222 = (( (Float)(this302) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a318 = (a121 * (( (Float)(1) ) - a219));
HXDLIN(  31)																		int r38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r118 * a318) + (r218 * a219))));
HXDLIN(  31)																		int g38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g118 * a318) + (g218 * a219))));
HXDLIN(  31)																		int b54 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b122 * a318) + (b222 * a219))));
HXDLIN(  31)																		int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a318 + a219)));
HXDLIN(  31)																		int blended18 = ((((a52 << 24) | (r38 << 16)) | (g38 << 8)) | b54);
HXDLIN(  31)																		{
HXLINE(  31)																			int _hx_tmp71;
HXDLIN(  31)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																				_hx_tmp71 = ((((((blended18 >> 24) & 255) << 24) | ((blended18 & 255) << 16)) | (((blended18 >> 8) & 255) << 8)) | ((blended18 >> 16) & 255));
            																			}
            																			else {
HXLINE(  31)																				_hx_tmp71 = blended18;
            																			}
HXDLIN(  31)																			::iterMagic::Iimg_obj::set(this270->image,location18,_hx_tmp71);
            																		}
            																	}
            																	else {
HXLINE(  31)																		::Dynamic this303 = this270->image;
HXDLIN(  31)																		int index39;
HXDLIN(  31)																		if (this270->useVirtualPos) {
HXLINE(  31)																			index39 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - this270->virtualY) * ( (Float)(this270->width) )) + x34) - this270->virtualX));
            																		}
            																		else {
HXLINE(  31)																			index39 = ::Std_obj::_hx_int(( (Float)(((y34 * this270->width) + x34)) ));
            																		}
HXDLIN(  31)																		int _hx_tmp72;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			_hx_tmp72 = ((((((c32 >> 24) & 255) << 24) | ((c32 & 255) << 16)) | (((c32 >> 8) & 255) << 8)) | ((c32 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			_hx_tmp72 = c32;
            																		}
HXDLIN(  31)																		::iterMagic::Iimg_obj::set(this303,index39,_hx_tmp72);
            																	}
            																}
HXLINE(  73)																found6 = true;
            															}
            															else {
HXLINE(  31)																if (found6) {
HXLINE(  31)																	goto _hx_goto_112;
            																}
            															}
            														}
            													}
            													_hx_goto_112:;
            												}
            											}
            										}
HXDLIN(  31)										if ((hasHit6 == true)) {
HXLINE(  31)											 ::pi_xy::algo::HitTri v21 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx9,lowerY1,bx6,by6,cx10,cy10,true);
HXDLIN(  31)											if (hasUndo6) {
HXLINE(  31)												v21->undoImage = undoImage18;
HXDLIN(  31)												v21->undoX = xIter36->start;
HXDLIN(  31)												v21->undoY = yIter36->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX6 = nextX6;
HXLINE(  47)							lastY6 = nextY6;
            						}
            					}
            				}
            			}
HXLINE(  31)			{
HXLINE(  31)				int r_x5 = ::Std_obj::_hx_int((thick + dx6));
HXDLIN(  31)				int r_y5 = ::Std_obj::_hx_int(lowerY1);
HXDLIN(  31)				int r_w5 = ::Std_obj::_hx_int(( (Float)(fat2) ));
HXDLIN(  31)				int r_h5 = ::Std_obj::_hx_int(bottomRadius1);
HXDLIN(  31)				int xmax5 = ((r_x5 + r_w5) + 1);
HXDLIN(  31)				int ymax5 = ((r_y5 + r_h5) + 1);
HXDLIN(  31)				int ii_min66 = r_x5;
HXDLIN(  31)				int ii_max66 = xmax5;
HXDLIN(  31)				int xRange__start5 = ii_min66;
HXDLIN(  31)				int xRange__max5 = ii_max66;
HXDLIN(  31)				int ii_min67 = r_y5;
HXDLIN(  31)				int ii_max67 = ymax5;
HXDLIN(  31)				int yRange__start5 = ii_min67;
HXDLIN(  31)				int yRange__max5 = ii_max67;
HXDLIN(  31)				int range_x5 = xRange__start5;
HXDLIN(  31)				int range_y5 = (yRange__start5 - 1);
HXDLIN(  31)				int range_xReset5 = range_x5;
HXDLIN(  31)				int range_yReset5 = range_y5;
HXDLIN(  31)				int range_xMax5 = (xRange__max5 - 2);
HXDLIN(  31)				int range_yMax5 = (yRange__max5 - 2);
HXDLIN(  31)				int _this_min5 = 0;
HXDLIN(  31)				int _this_max5 = ::Std_obj::_hx_int(( (Float)(((xRange__max5 - xRange__start5) * (yRange__max5 - yRange__start5))) ));
HXDLIN(  31)				while((_this_min5 < _this_max5)){
HXLINE(  31)					_this_min5 = (_this_min5 + 1);
HXDLIN(  31)					int i65 = (_this_min5 - 1);
HXDLIN(  31)					if ((range_y5 > range_yMax5)) {
HXLINE(  31)						range_y5 = range_yReset5;
HXDLIN(  31)						range_x5 = (range_x5 + 1);
            					}
HXDLIN(  31)					range_y5 = (range_y5 + 1);
HXDLIN(  31)					int i66 = i65;
HXDLIN(  31)					{
HXLINE(  31)						int x35 = range_x5;
HXDLIN(  31)						int y35 = range_y5;
HXDLIN(  31)						int c33 = 0;
HXDLIN(  31)						bool _hx_tmp73;
HXDLIN(  31)						if ((((c33 >> 24) & 255) < 254)) {
HXLINE(  31)							_hx_tmp73 = temp->transparent;
            						}
            						else {
HXLINE(  31)							_hx_tmp73 = false;
            						}
HXDLIN(  31)						if (_hx_tmp73) {
HXLINE(  31)							int location19;
HXDLIN(  31)							if (temp->useVirtualPos) {
HXLINE(  31)								location19 = ::Std_obj::_hx_int(((((( (Float)(y35) ) - temp->virtualY) * ( (Float)(temp->width) )) + x35) - temp->virtualX));
            							}
            							else {
HXLINE(  31)								location19 = ::Std_obj::_hx_int(( (Float)(((y35 * temp->width) + x35)) ));
            							}
HXDLIN(  31)							int this304 = ::iterMagic::Iimg_obj::get(temp->image,location19);
HXDLIN(  31)							int this305;
HXDLIN(  31)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)								this305 = ((((((this304 >> 24) & 255) << 24) | ((this304 & 255) << 16)) | (((this304 >> 8) & 255) << 8)) | ((this304 >> 16) & 255));
            							}
            							else {
HXLINE(  31)								this305 = this304;
            							}
HXDLIN(  31)							Float a122;
HXDLIN(  31)							int this306 = ((this305 >> 24) & 255);
HXDLIN(  31)							if ((this306 == 0)) {
HXLINE(  31)								a122 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								a122 = (( (Float)(this306) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float r119;
HXDLIN(  31)							int this307 = ((this305 >> 16) & 255);
HXDLIN(  31)							if ((this307 == 0)) {
HXLINE(  31)								r119 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								r119 = (( (Float)(this307) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float g119;
HXDLIN(  31)							int this308 = ((this305 >> 8) & 255);
HXDLIN(  31)							if ((this308 == 0)) {
HXLINE(  31)								g119 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								g119 = (( (Float)(this308) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float b123;
HXDLIN(  31)							int this309 = (this305 & 255);
HXDLIN(  31)							if ((this309 == 0)) {
HXLINE(  31)								b123 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								b123 = (( (Float)(this309) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float a220;
HXDLIN(  31)							int this310 = ((0 >> 24) & 255);
HXDLIN(  31)							if ((this310 == 0)) {
HXLINE(  31)								a220 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								a220 = (( (Float)(this310) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float r219;
HXDLIN(  31)							int this311 = ((0 >> 16) & 255);
HXDLIN(  31)							if ((this311 == 0)) {
HXLINE(  31)								r219 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								r219 = (( (Float)(this311) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float g219;
HXDLIN(  31)							int this312 = ((0 >> 8) & 255);
HXDLIN(  31)							if ((this312 == 0)) {
HXLINE(  31)								g219 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								g219 = (( (Float)(this312) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float b223;
HXDLIN(  31)							int this313 = (0 & 255);
HXDLIN(  31)							if ((this313 == 0)) {
HXLINE(  31)								b223 = ((Float)0.);
            							}
            							else {
HXLINE(  31)								b223 = (( (Float)(this313) ) / ( (Float)(255) ));
            							}
HXDLIN(  31)							Float a319 = (a122 * (( (Float)(1) ) - a220));
HXDLIN(  31)							int r39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r119 * a319) + (r219 * a220))));
HXDLIN(  31)							int g39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g119 * a319) + (g219 * a220))));
HXDLIN(  31)							int b55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b123 * a319) + (b223 * a220))));
HXDLIN(  31)							int a53 = ::Std_obj::_hx_int((( (Float)(255) ) * (a319 + a220)));
HXDLIN(  31)							int blended19 = ((((a53 << 24) | (r39 << 16)) | (g39 << 8)) | b55);
HXDLIN(  31)							{
HXLINE(  31)								int _hx_tmp74;
HXDLIN(  31)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)									_hx_tmp74 = ((((((blended19 >> 24) & 255) << 24) | ((blended19 & 255) << 16)) | (((blended19 >> 8) & 255) << 8)) | ((blended19 >> 16) & 255));
            								}
            								else {
HXLINE(  31)									_hx_tmp74 = blended19;
            								}
HXDLIN(  31)								::iterMagic::Iimg_obj::set(temp->image,location19,_hx_tmp74);
            							}
            						}
            						else {
HXLINE(  31)							::Dynamic this314 = temp->image;
HXDLIN(  31)							int index40;
HXDLIN(  31)							if (temp->useVirtualPos) {
HXLINE(  31)								index40 = ::Std_obj::_hx_int(((((( (Float)(y35) ) - temp->virtualY) * ( (Float)(temp->width) )) + x35) - temp->virtualX));
            							}
            							else {
HXLINE(  31)								index40 = ::Std_obj::_hx_int(( (Float)(((y35 * temp->width) + x35)) ));
            							}
HXDLIN(  31)							int _hx_tmp75;
HXDLIN(  31)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)								_hx_tmp75 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            							}
            							else {
HXLINE(  31)								_hx_tmp75 = c33;
            							}
HXDLIN(  31)							::iterMagic::Iimg_obj::set(this314,index40,_hx_tmp75);
            						}
            					}
            				}
            			}
HXDLIN(  31)			{
HXLINE(  31)				 ::pi_xy::ImageStruct this315 = temp;
HXDLIN(  31)				{
HXLINE(  31)					 ::Dynamic targetError7 = ((Float)1.05);
HXDLIN(  31)					if (::hx::IsNull( targetError7 )) {
HXLINE( 113)						targetError7 = ((Float)1.05);
            					}
HXLINE(  31)					Float rSmall7;
HXDLIN(  31)					if ((rightRadius1 > bottomRadius1)) {
HXLINE(  31)						rSmall7 = bottomRadius1;
            					}
            					else {
HXLINE(  31)						rSmall7 = rightRadius1;
            					}
HXDLIN(  31)					 ::Dynamic targetE7 = ( (Float)(targetError7) );
HXDLIN(  31)					if (::hx::IsNull( targetE7 )) {
HXDLIN(  20)						targetE7 = ((Float)1.05);
            					}
HXLINE(  31)					int result7 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE7) ) / rSmall7)))));
HXDLIN(  31)					int noSides7;
HXDLIN(  31)					if ((result7 < 12)) {
HXLINE(  31)						noSides7 = 12;
            					}
            					else {
HXLINE(  31)						if ((result7 > 500)) {
HXLINE(  31)							noSides7 = 500;
            						}
            						else {
HXLINE(  31)							noSides7 = result7;
            						}
            					}
HXDLIN(  31)					int sides7 = (::Math_obj::ceil((( (Float)(noSides7) ) / ( (Float)(4) ))) * 4);
HXDLIN(  31)					Float theta7 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides7) ));
HXDLIN(  31)					Float omega7 = ( (Float)(0) );
HXDLIN(  31)					int quarter7 = ::Std_obj::_hx_int((( (Float)(sides7) ) / ( (Float)(4) )));
HXDLIN(  31)					Float lastX7 = ((Float)0.);
HXDLIN(  31)					Float lastY7 = ((Float)0.);
HXDLIN(  31)					{
HXLINE(  26)						lastX7 = (farX1 + (rightRadius1 * ::Math_obj::cos(((( (Float)(sides7) ) * theta7) + omega7))));
HXLINE(  27)						lastY7 = (lowerY1 + (bottomRadius1 * ::Math_obj::sin(((( (Float)(sides7) ) * theta7) + omega7))));
            					}
HXLINE(  31)					{
HXLINE(  31)						int _g170 = 0;
HXDLIN(  31)						int _g171 = (quarter7 + 1);
HXDLIN(  31)						while((_g170 < _g171)){
HXLINE(  31)							_g170 = (_g170 + 1);
HXDLIN(  31)							int i67 = (_g170 - 1);
HXDLIN(  31)							Float nextX7 = (farX1 + (rightRadius1 * ::Math_obj::cos((((( (Float)(i67) ) * theta7) + ((Float)0.0001)) + omega7))));
HXDLIN(  31)							Float nextY7 = (lowerY1 + (bottomRadius1 * ::Math_obj::sin((((( (Float)(i67) ) * theta7) + ((Float)0.0001)) + omega7))));
HXDLIN(  31)							{
HXLINE(  31)								 ::pi_xy::ImageStruct this316 = this315;
HXDLIN(  31)								bool hasHit7 = false;
HXDLIN(  31)								bool hasUndo7 = false;
HXDLIN(  31)								{
HXLINE(  31)									Float bx7 = lastX7;
HXDLIN(  31)									Float by7 = lastY7;
HXDLIN(  31)									Float cx11 = nextX7;
HXDLIN(  31)									Float cy11 = nextY7;
HXDLIN(  31)									bool adjustWinding7 = (((((farX1 * by7) - (bx7 * lowerY1)) + ((bx7 * cy11) - (cx11 * by7))) + ((cx11 * lowerY1) - (farX1 * cy11))) > 0);
HXDLIN(  31)									if (!(adjustWinding7)) {
HXLINE(  31)										Float bx_7 = bx7;
HXDLIN(  31)										Float by_7 = by7;
HXLINE(  25)										bx7 = cx11;
HXLINE(  26)										by7 = cy11;
HXLINE(  27)										cx11 = bx_7;
HXLINE(  28)										cy11 = by_7;
            									}
HXLINE(  31)									{
HXLINE(  31)										Float s07 = ((lowerY1 * cx11) - (farX1 * cy11));
HXDLIN(  31)										Float sx7 = (cy11 - lowerY1);
HXDLIN(  31)										Float sy7 = (farX1 - cx11);
HXDLIN(  31)										Float t07 = ((farX1 * by7) - (lowerY1 * bx7));
HXDLIN(  31)										Float tx7 = (lowerY1 - by7);
HXDLIN(  31)										Float ty7 = (bx7 - farX1);
HXDLIN(  31)										Float A7 = ((((-(by7) * cx11) + (lowerY1 * (-(bx7) + cx11))) + (farX1 * (by7 - cy11))) + (bx7 * cy11));
HXDLIN(  31)										 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN(  31)										if ((farX1 > bx7)) {
HXLINE(  31)											if ((farX1 > cx11)) {
HXLINE(  31)												int min28;
HXDLIN(  31)												if ((bx7 > cx11)) {
HXLINE(  31)													min28 = ::Math_obj::floor(cx11);
            												}
            												else {
HXLINE(  31)													min28 = ::Math_obj::floor(bx7);
            												}
HXDLIN(  31)												int ii_min68 = min28;
HXDLIN(  31)												int ii_max68 = ::Math_obj::ceil(farX1);
HXDLIN(  31)												xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min68,ii_max68);
            											}
            											else {
HXLINE(  31)												int ii_min69 = ::Math_obj::floor(bx7);
HXDLIN(  31)												int ii_max69 = ::Math_obj::ceil(cx11);
HXDLIN(  31)												xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min69,ii_max69);
            											}
            										}
            										else {
HXLINE(  31)											if ((bx7 > cx11)) {
HXLINE(  31)												int min29;
HXDLIN(  31)												if ((farX1 > cx11)) {
HXLINE(  31)													min29 = ::Math_obj::floor(cx11);
            												}
            												else {
HXLINE(  31)													min29 = ::Math_obj::ceil(farX1);
            												}
HXDLIN(  31)												int ii_min70 = min29;
HXDLIN(  31)												int ii_max70 = ::Math_obj::ceil(bx7);
HXDLIN(  31)												xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min70,ii_max70);
            											}
            											else {
HXLINE(  31)												int ii_min71 = ::Math_obj::floor(farX1);
HXDLIN(  31)												int ii_max71 = ::Math_obj::ceil(cx11);
HXDLIN(  31)												xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min71,ii_max71);
            											}
            										}
HXDLIN(  31)										 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN(  31)										if ((lowerY1 > by7)) {
HXLINE(  31)											if ((lowerY1 > cy11)) {
HXLINE(  31)												int min30;
HXDLIN(  31)												if ((by7 > cy11)) {
HXLINE(  31)													min30 = ::Math_obj::floor(cy11);
            												}
            												else {
HXLINE(  31)													min30 = ::Math_obj::floor(by7);
            												}
HXDLIN(  31)												int ii_min72 = min30;
HXDLIN(  31)												int ii_max72 = ::Math_obj::ceil(lowerY1);
HXDLIN(  31)												yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min72,ii_max72);
            											}
            											else {
HXLINE(  31)												int ii_min73 = ::Math_obj::floor(by7);
HXDLIN(  31)												int ii_max73 = ::Math_obj::ceil(cy11);
HXDLIN(  31)												yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min73,ii_max73);
            											}
            										}
            										else {
HXLINE(  31)											if ((by7 > cy11)) {
HXLINE(  31)												int min31;
HXDLIN(  31)												if ((lowerY1 > cy11)) {
HXLINE(  31)													min31 = ::Math_obj::floor(cy11);
            												}
            												else {
HXLINE(  31)													min31 = ::Math_obj::ceil(lowerY1);
            												}
HXDLIN(  31)												int ii_min74 = min31;
HXDLIN(  31)												int ii_max74 = ::Math_obj::ceil(by7);
HXDLIN(  31)												yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min74,ii_max74);
            											}
            											else {
HXLINE(  31)												int ii_min75 = ::Math_obj::floor(lowerY1);
HXDLIN(  31)												int ii_max75 = ::Math_obj::ceil(cy11);
HXDLIN(  31)												yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min75,ii_max75);
            											}
            										}
HXDLIN(  31)										 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN(  31)										if (hasUndo7) {
HXLINE(  31)											int width8 = ((xIter37->max - xIter37->start) + 1);
HXDLIN(  31)											int height8 = ((yIter37->max - yIter37->start) + 1);
HXDLIN(  31)											 ::Dynamic imageType8 = null();
HXDLIN(  31)											 ::pi_xy::ImageStruct this317 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  31)											if (::hx::IsNull( imageType8 )) {
HXLINE(  54)												imageType8 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  31)											::Dynamic undoImage22;
HXDLIN(  31)											switch((int)(( (int)(imageType8) ))){
            												case (int)0: {
HXLINE(  31)													 ::iterMagic::BytesImg byt8 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::BytesImg b56 = byt8;
HXDLIN(  31)													{
HXLINE(  31)														b56->width = width8;
HXDLIN(  31)														b56->height = height8;
HXDLIN(  31)														b56->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  31)														b56->data = ::haxe::io::Bytes_obj::alloc((b56->length * 4));
HXDLIN(  31)														{
HXLINE(  31)															int len16 = b56->length;
HXDLIN(  31)															int w8 = 0;
HXDLIN(  31)															{
HXLINE(  31)																int _g172 = 0;
HXDLIN(  31)																int _g173 = b56->height;
HXDLIN(  31)																while((_g172 < _g173)){
HXLINE(  31)																	_g172 = (_g172 + 1);
HXDLIN(  31)																	int y36 = (_g172 - 1);
HXDLIN(  31)																	{
HXLINE(  31)																		int _g174 = 0;
HXDLIN(  31)																		int _g175 = b56->width;
HXDLIN(  31)																		while((_g174 < _g175)){
HXLINE(  31)																			_g174 = (_g174 + 1);
HXDLIN(  31)																			int x36 = (_g174 - 1);
HXDLIN(  31)																			{
HXLINE(  31)																				w8 = (w8 + 1);
HXDLIN(  31)																				b56->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  31)																			{
HXLINE(  31)																				w8 = (w8 + 1);
HXDLIN(  31)																				b56->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  31)																			{
HXLINE(  31)																				w8 = (w8 + 1);
HXDLIN(  31)																				b56->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  31)																			{
HXLINE(  31)																				w8 = (w8 + 1);
HXDLIN(  31)																				b56->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  31)													undoImage22 = b56;
            												}
            												break;
            												case (int)1: {
HXLINE(  31)													 ::iterMagic::ArrIntImg arrI8 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::ArrIntImg a54 = arrI8;
HXDLIN(  31)													{
HXLINE(  31)														a54->width = width8;
HXDLIN(  31)														a54->height = height8;
HXDLIN(  31)														a54->data = ::Array_obj< int >::__new(0);
HXDLIN(  31)														a54->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  31)														{
HXLINE(  31)															int _g176 = 0;
HXDLIN(  31)															int _g177 = a54->length;
HXDLIN(  31)															while((_g176 < _g177)){
HXLINE(  31)																_g176 = (_g176 + 1);
HXDLIN(  31)																int i68 = (_g176 - 1);
HXDLIN(  31)																a54->data[i68] = 0;
            															}
            														}
            													}
HXDLIN(  31)													undoImage22 = a54;
            												}
            												break;
            												case (int)2: {
HXLINE(  31)													 ::iterMagic::U32ArrImg u32a8 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::U32ArrImg b57 = u32a8;
HXDLIN(  31)													{
HXLINE(  31)														b57->width = width8;
HXDLIN(  31)														b57->height = height8;
HXDLIN(  31)														b57->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  31)														int size8 = (b57->length * 4);
HXDLIN(  31)														b57->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size8),0,size8);
HXDLIN(  31)														{
HXLINE(  31)															int _g178 = 0;
HXDLIN(  31)															int _g179 = b57->length;
HXDLIN(  31)															while((_g178 < _g179)){
HXLINE(  31)																_g178 = (_g178 + 1);
HXDLIN(  31)																int i69 = (_g178 - 1);
HXDLIN(  31)																{
HXLINE(  31)																	 ::haxe::io::ArrayBufferViewImpl this318 = b57->data;
HXDLIN(  31)																	bool undoImage23;
HXDLIN(  31)																	if ((i69 >= 0)) {
HXLINE(  31)																		undoImage23 = (i69 < (this318->byteLength >> 2));
            																	}
            																	else {
HXLINE(  31)																		undoImage23 = false;
            																	}
HXDLIN(  31)																	if (undoImage23) {
HXLINE(  31)																		 ::haxe::io::Bytes _this8 = this318->bytes;
HXDLIN(  31)																		int pos8 = ((i69 << 2) + this318->byteOffset);
HXDLIN(  31)																		_this8->b[pos8] = ( (unsigned char)(0) );
HXDLIN(  31)																		_this8->b[(pos8 + 1)] = ( (unsigned char)(0) );
HXDLIN(  31)																		_this8->b[(pos8 + 2)] = ( (unsigned char)(0) );
HXDLIN(  31)																		_this8->b[(pos8 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  31)													undoImage22 = b57;
            												}
            												break;
            												case (int)3: {
HXLINE(  31)													 ::iterMagic::VecIntImg vec8 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::VecIntImg v22 = vec8;
HXDLIN(  31)													{
HXLINE(  31)														v22->width = width8;
HXDLIN(  31)														v22->height = height8;
HXDLIN(  31)														v22->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  31)														v22->data = ::Array_obj< int >::__new(v22->length);
HXDLIN(  31)														{
HXLINE(  31)															int _g180 = 0;
HXDLIN(  31)															int _g181 = v22->length;
HXDLIN(  31)															while((_g180 < _g181)){
HXLINE(  31)																_g180 = (_g180 + 1);
HXDLIN(  31)																int i70 = (_g180 - 1);
HXDLIN(  31)																v22->data->__unsafe_set(i70,0);
            															}
            														}
            													}
HXDLIN(  31)													undoImage22 = v22;
            												}
            												break;
            												case (int)4: {
HXLINE(  31)													 ::iterMagic::StackIntImg sInt8 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  31)													 ::iterMagic::StackIntImg b58 = sInt8;
HXDLIN(  31)													{
HXLINE(  31)														b58->width = width8;
HXDLIN(  31)														b58->height = height8;
HXDLIN(  31)														b58->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  31)														b58->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  31)														{
HXLINE(  31)															int len17 = b58->length;
HXDLIN(  31)															 ::haxe::ds::GenericStack_Int d8 = b58->data;
HXDLIN(  31)															if (::hx::IsNull( d8->head )) {
HXLINE(  31)																int _g182 = 0;
HXDLIN(  31)																int _g183 = len17;
HXDLIN(  31)																while((_g182 < _g183)){
HXLINE(  31)																	_g182 = (_g182 + 1);
HXDLIN(  31)																	int i71 = (_g182 - 1);
HXDLIN(  31)																	d8->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d8->head);
            																}
            															}
            															else {
HXLINE(  31)																int _g184 = 0;
HXDLIN(  31)																int _g185 = len17;
HXDLIN(  31)																while((_g184 < _g185)){
HXLINE(  31)																	_g184 = (_g184 + 1);
HXDLIN(  31)																	int i72 = (_g184 - 1);
HXDLIN(  31)																	{
HXLINE(  31)																		 ::haxe::ds::GenericCell_Int l8 = b58->data->head;
HXDLIN(  31)																		 ::haxe::ds::GenericCell_Int prev8 = null();
HXDLIN(  31)																		{
HXLINE(  31)																			int _g186 = 0;
HXDLIN(  31)																			int _g187 = i72;
HXDLIN(  31)																			while((_g186 < _g187)){
HXLINE(  31)																				_g186 = (_g186 + 1);
HXDLIN(  31)																				int i73 = (_g186 - 1);
HXLINE( 345)																				prev8 = l8;
HXLINE( 346)																				l8 = l8->next;
            																			}
            																		}
HXLINE(  31)																		if (::hx::IsNull( prev8 )) {
HXLINE(  31)																			b58->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  31)																			l8 = null();
            																		}
            																		else {
HXLINE(  31)																			prev8->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  31)																			l8 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  31)													undoImage22 = b58;
            												}
            												break;
            											}
HXDLIN(  31)											this317->image = undoImage22;
HXDLIN(  31)											this317->width = width8;
HXDLIN(  31)											this317->height = height8;
HXDLIN(  31)											this317->imageType = ( (int)(imageType8) );
HXDLIN(  31)											undoImage21 = this317;
HXDLIN(  31)											{
HXLINE(  31)												int rectLeft7 = xIter37->start;
HXDLIN(  31)												int rectTop7 = yIter37->start;
HXDLIN(  31)												int rectRight7 = xIter37->max;
HXDLIN(  31)												bool forceClear7 = false;
HXDLIN(  31)												{
HXLINE(  31)													int _g188 = rectTop7;
HXDLIN(  31)													int _g189 = yIter37->max;
HXDLIN(  31)													while((_g188 < _g189)){
HXLINE(  31)														_g188 = (_g188 + 1);
HXDLIN(  31)														int dy10 = (_g188 - 1);
HXDLIN(  31)														{
HXLINE(  31)															int _g190 = rectLeft7;
HXDLIN(  31)															int _g191 = rectRight7;
HXDLIN(  31)															while((_g190 < _g191)){
HXLINE(  31)																_g190 = (_g190 + 1);
HXDLIN(  31)																int dx10 = (_g190 - 1);
HXDLIN(  31)																::Dynamic this319 = this316->image;
HXDLIN(  31)																int index41;
HXDLIN(  31)																if (this316->useVirtualPos) {
HXLINE(  31)																	index41 = ::Std_obj::_hx_int(((((( (Float)(dy10) ) - this316->virtualY) * ( (Float)(this316->width) )) + dx10) - this316->virtualX));
            																}
            																else {
HXLINE(  31)																	index41 = ::Std_obj::_hx_int(( (Float)(((dy10 * this316->width) + dx10)) ));
            																}
HXDLIN(  31)																int c34 = ::iterMagic::Iimg_obj::get(this319,index41);
HXDLIN(  31)																int col7;
HXDLIN(  31)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																	col7 = ((((((c34 >> 24) & 255) << 24) | ((c34 & 255) << 16)) | (((c34 >> 8) & 255) << 8)) | ((c34 >> 16) & 255));
            																}
            																else {
HXLINE(  31)																	col7 = c34;
            																}
HXDLIN(  31)																bool _hx_tmp76;
HXDLIN(  31)																if (this316->useMask) {
HXLINE(  31)																	_hx_tmp76 = ::hx::IsNotNull( this316->mask );
            																}
            																else {
HXLINE(  31)																	_hx_tmp76 = false;
            																}
HXDLIN(  31)																if (_hx_tmp76) {
HXLINE(  31)																	 ::pi_xy::ImageStruct this320 = this316->mask;
HXDLIN(  31)																	::Dynamic this321 = this320->image;
HXDLIN(  31)																	int index42;
HXDLIN(  31)																	if (this320->useVirtualPos) {
HXLINE(  31)																		index42 = ::Std_obj::_hx_int(((((( (Float)(dy10) ) - this320->virtualY) * ( (Float)(this320->width) )) + dx10) - this320->virtualX));
            																	}
            																	else {
HXLINE(  31)																		index42 = ::Std_obj::_hx_int(( (Float)(((dy10 * this320->width) + dx10)) ));
            																	}
HXDLIN(  31)																	int c35 = ::iterMagic::Iimg_obj::get(this321,index42);
HXDLIN(  31)																	int v23;
HXDLIN(  31)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																		v23 = ((((((c35 >> 24) & 255) << 24) | ((c35 & 255) << 16)) | (((c35 >> 8) & 255) << 8)) | ((c35 >> 16) & 255));
            																	}
            																	else {
HXLINE(  31)																		v23 = c35;
            																	}
HXDLIN(  31)																	int maskPixel7 = v23;
HXDLIN(  31)																	int this322 = col7;
HXDLIN(  31)																	if ((maskPixel7 == 0)) {
HXLINE(  31)																		col7 = this322;
            																	}
            																	else {
HXLINE(  31)																		Float m07;
HXDLIN(  31)																		int this323 = ((maskPixel7 >> 24) & 255);
HXDLIN(  31)																		if ((this323 == 0)) {
HXLINE(  31)																			m07 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m07 = (( (Float)(this323) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float m17;
HXDLIN(  31)																		int this324 = ((maskPixel7 >> 16) & 255);
HXDLIN(  31)																		if ((this324 == 0)) {
HXLINE(  31)																			m17 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m17 = (( (Float)(this324) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float m27;
HXDLIN(  31)																		int this325 = ((maskPixel7 >> 8) & 255);
HXDLIN(  31)																		if ((this325 == 0)) {
HXLINE(  31)																			m27 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m27 = (( (Float)(this325) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float m37;
HXDLIN(  31)																		int this326 = (maskPixel7 & 255);
HXDLIN(  31)																		if ((this326 == 0)) {
HXLINE(  31)																			m37 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			m37 = (( (Float)(this326) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this322 >> 24) & 255)) )));
HXDLIN(  31)																		int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this322 >> 16) & 255)) )));
HXDLIN(  31)																		int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this322 >> 8) & 255)) )));
HXDLIN(  31)																		int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this322 & 255)) )));
HXDLIN(  31)																		col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  31)																if ((col7 != 0)) {
HXLINE(  31)																	int x37 = (dx10 - rectLeft7);
HXDLIN(  31)																	int y37 = (dy10 - rectTop7);
HXDLIN(  31)																	int c36 = col7;
HXDLIN(  31)																	bool _hx_tmp77;
HXDLIN(  31)																	if ((((c36 >> 24) & 255) < 254)) {
HXLINE(  31)																		_hx_tmp77 = undoImage21->transparent;
            																	}
            																	else {
HXLINE(  31)																		_hx_tmp77 = false;
            																	}
HXDLIN(  31)																	if (_hx_tmp77) {
HXLINE(  31)																		int location20;
HXDLIN(  31)																		if (undoImage21->useVirtualPos) {
HXLINE(  31)																			location20 = ::Std_obj::_hx_int(((((( (Float)(y37) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x37) - undoImage21->virtualX));
            																		}
            																		else {
HXLINE(  31)																			location20 = ::Std_obj::_hx_int(( (Float)(((y37 * undoImage21->width) + x37)) ));
            																		}
HXDLIN(  31)																		int this327 = ::iterMagic::Iimg_obj::get(undoImage21->image,location20);
HXDLIN(  31)																		int this328;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			this328 = ((((((this327 >> 24) & 255) << 24) | ((this327 & 255) << 16)) | (((this327 >> 8) & 255) << 8)) | ((this327 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			this328 = this327;
            																		}
HXDLIN(  31)																		Float a123;
HXDLIN(  31)																		int this329 = ((this328 >> 24) & 255);
HXDLIN(  31)																		if ((this329 == 0)) {
HXLINE(  31)																			a123 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a123 = (( (Float)(this329) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r120;
HXDLIN(  31)																		int this330 = ((this328 >> 16) & 255);
HXDLIN(  31)																		if ((this330 == 0)) {
HXLINE(  31)																			r120 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r120 = (( (Float)(this330) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g120;
HXDLIN(  31)																		int this331 = ((this328 >> 8) & 255);
HXDLIN(  31)																		if ((this331 == 0)) {
HXLINE(  31)																			g120 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g120 = (( (Float)(this331) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b124;
HXDLIN(  31)																		int this332 = (this328 & 255);
HXDLIN(  31)																		if ((this332 == 0)) {
HXLINE(  31)																			b124 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b124 = (( (Float)(this332) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a221;
HXDLIN(  31)																		int this333 = ((col7 >> 24) & 255);
HXDLIN(  31)																		if ((this333 == 0)) {
HXLINE(  31)																			a221 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a221 = (( (Float)(this333) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r220;
HXDLIN(  31)																		int this334 = ((col7 >> 16) & 255);
HXDLIN(  31)																		if ((this334 == 0)) {
HXLINE(  31)																			r220 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r220 = (( (Float)(this334) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g220;
HXDLIN(  31)																		int this335 = ((col7 >> 8) & 255);
HXDLIN(  31)																		if ((this335 == 0)) {
HXLINE(  31)																			g220 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g220 = (( (Float)(this335) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b224;
HXDLIN(  31)																		int this336 = (col7 & 255);
HXDLIN(  31)																		if ((this336 == 0)) {
HXLINE(  31)																			b224 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b224 = (( (Float)(this336) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a320 = (a123 * (( (Float)(1) ) - a221));
HXDLIN(  31)																		int r40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r120 * a320) + (r220 * a221))));
HXDLIN(  31)																		int g40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g120 * a320) + (g220 * a221))));
HXDLIN(  31)																		int b59 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b124 * a320) + (b224 * a221))));
HXDLIN(  31)																		int a55 = ::Std_obj::_hx_int((( (Float)(255) ) * (a320 + a221)));
HXDLIN(  31)																		int blended20 = ((((a55 << 24) | (r40 << 16)) | (g40 << 8)) | b59);
HXDLIN(  31)																		{
HXLINE(  31)																			int _hx_tmp78;
HXDLIN(  31)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																				_hx_tmp78 = ((((((blended20 >> 24) & 255) << 24) | ((blended20 & 255) << 16)) | (((blended20 >> 8) & 255) << 8)) | ((blended20 >> 16) & 255));
            																			}
            																			else {
HXLINE(  31)																				_hx_tmp78 = blended20;
            																			}
HXDLIN(  31)																			::iterMagic::Iimg_obj::set(undoImage21->image,location20,_hx_tmp78);
            																		}
            																	}
            																	else {
HXLINE(  31)																		::Dynamic this337 = undoImage21->image;
HXDLIN(  31)																		int index43;
HXDLIN(  31)																		if (undoImage21->useVirtualPos) {
HXLINE(  31)																			index43 = ::Std_obj::_hx_int(((((( (Float)(y37) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x37) - undoImage21->virtualX));
            																		}
            																		else {
HXLINE(  31)																			index43 = ::Std_obj::_hx_int(( (Float)(((y37 * undoImage21->width) + x37)) ));
            																		}
HXDLIN(  31)																		int _hx_tmp79;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			_hx_tmp79 = ((((((c36 >> 24) & 255) << 24) | ((c36 & 255) << 16)) | (((c36 >> 8) & 255) << 8)) | ((c36 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			_hx_tmp79 = c36;
            																		}
HXDLIN(  31)																		::iterMagic::Iimg_obj::set(this337,index43,_hx_tmp79);
            																	}
            																}
            																else {
HXLINE(  31)																	if (forceClear7) {
HXLINE(  31)																		::Dynamic this338 = undoImage21->image;
HXDLIN(  31)																		int x38 = (dx10 - rectLeft7);
HXDLIN(  31)																		int y38 = (dy10 - rectTop7);
HXDLIN(  31)																		int index44;
HXDLIN(  31)																		if (undoImage21->useVirtualPos) {
HXLINE(  31)																			index44 = ::Std_obj::_hx_int(((((( (Float)(y38) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x38) - undoImage21->virtualX));
            																		}
            																		else {
HXLINE(  31)																			index44 = ::Std_obj::_hx_int(( (Float)(((y38 * undoImage21->width) + x38)) ));
            																		}
HXDLIN(  31)																		::iterMagic::Iimg_obj::set(this338,index44,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  31)										bool found7 = false;
HXDLIN(  31)										Float s7 = ((Float)0.);
HXDLIN(  31)										Float t7 = ((Float)0.);
HXDLIN(  31)										Float sxx7 = ((Float)0.);
HXDLIN(  31)										Float txx7 = ((Float)0.);
HXDLIN(  31)										{
HXLINE(  31)											int _g_min14 = xIter37->start;
HXDLIN(  31)											int _g_max14 = xIter37->max;
HXDLIN(  31)											while((_g_min14 < _g_max14)){
HXLINE(  31)												_g_min14 = (_g_min14 + 1);
HXDLIN(  31)												int x39 = (_g_min14 - 1);
HXLINE(  60)												sxx7 = (sx7 * ( (Float)(x39) ));
HXLINE(  61)												txx7 = (tx7 * ( (Float)(x39) ));
HXLINE(  62)												found7 = false;
HXLINE(  31)												{
HXLINE(  31)													int _g_min15 = yIter37->start;
HXDLIN(  31)													int _g_max15 = yIter37->max;
HXDLIN(  31)													while((_g_min15 < _g_max15)){
HXLINE(  31)														_g_min15 = (_g_min15 + 1);
HXDLIN(  31)														int y39 = (_g_min15 - 1);
HXLINE(  64)														s7 = ((s07 + sxx7) + (sy7 * ( (Float)(y39) )));
HXLINE(  65)														t7 = ((t07 + txx7) + (ty7 * ( (Float)(y39) )));
HXLINE(  31)														bool _hx_tmp80;
HXDLIN(  31)														if (!((s7 <= 0))) {
HXLINE(  31)															_hx_tmp80 = (t7 <= 0);
            														}
            														else {
HXLINE(  31)															_hx_tmp80 = true;
            														}
HXDLIN(  31)														if (_hx_tmp80) {
HXLINE(  31)															if (found7) {
HXLINE(  31)																goto _hx_goto_126;
            															}
            														}
            														else {
HXLINE(  31)															if (((s7 + t7) < A7)) {
HXLINE(  31)																{
HXLINE(  31)																	int c37 = 0;
HXDLIN(  31)																	bool _hx_tmp81;
HXDLIN(  31)																	if ((((c37 >> 24) & 255) < 254)) {
HXLINE(  31)																		_hx_tmp81 = this316->transparent;
            																	}
            																	else {
HXLINE(  31)																		_hx_tmp81 = false;
            																	}
HXDLIN(  31)																	if (_hx_tmp81) {
HXLINE(  31)																		int location21;
HXDLIN(  31)																		if (this316->useVirtualPos) {
HXLINE(  31)																			location21 = ::Std_obj::_hx_int(((((( (Float)(y39) ) - this316->virtualY) * ( (Float)(this316->width) )) + x39) - this316->virtualX));
            																		}
            																		else {
HXLINE(  31)																			location21 = ::Std_obj::_hx_int(( (Float)(((y39 * this316->width) + x39)) ));
            																		}
HXDLIN(  31)																		int this339 = ::iterMagic::Iimg_obj::get(this316->image,location21);
HXDLIN(  31)																		int this340;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			this340 = ((((((this339 >> 24) & 255) << 24) | ((this339 & 255) << 16)) | (((this339 >> 8) & 255) << 8)) | ((this339 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			this340 = this339;
            																		}
HXDLIN(  31)																		Float a124;
HXDLIN(  31)																		int this341 = ((this340 >> 24) & 255);
HXDLIN(  31)																		if ((this341 == 0)) {
HXLINE(  31)																			a124 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a124 = (( (Float)(this341) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r121;
HXDLIN(  31)																		int this342 = ((this340 >> 16) & 255);
HXDLIN(  31)																		if ((this342 == 0)) {
HXLINE(  31)																			r121 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r121 = (( (Float)(this342) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g121;
HXDLIN(  31)																		int this343 = ((this340 >> 8) & 255);
HXDLIN(  31)																		if ((this343 == 0)) {
HXLINE(  31)																			g121 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g121 = (( (Float)(this343) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b125;
HXDLIN(  31)																		int this344 = (this340 & 255);
HXDLIN(  31)																		if ((this344 == 0)) {
HXLINE(  31)																			b125 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b125 = (( (Float)(this344) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a222;
HXDLIN(  31)																		int this345 = ((0 >> 24) & 255);
HXDLIN(  31)																		if ((this345 == 0)) {
HXLINE(  31)																			a222 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			a222 = (( (Float)(this345) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float r221;
HXDLIN(  31)																		int this346 = ((0 >> 16) & 255);
HXDLIN(  31)																		if ((this346 == 0)) {
HXLINE(  31)																			r221 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			r221 = (( (Float)(this346) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float g221;
HXDLIN(  31)																		int this347 = ((0 >> 8) & 255);
HXDLIN(  31)																		if ((this347 == 0)) {
HXLINE(  31)																			g221 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			g221 = (( (Float)(this347) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float b225;
HXDLIN(  31)																		int this348 = (0 & 255);
HXDLIN(  31)																		if ((this348 == 0)) {
HXLINE(  31)																			b225 = ((Float)0.);
            																		}
            																		else {
HXLINE(  31)																			b225 = (( (Float)(this348) ) / ( (Float)(255) ));
            																		}
HXDLIN(  31)																		Float a321 = (a124 * (( (Float)(1) ) - a222));
HXDLIN(  31)																		int r41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r121 * a321) + (r221 * a222))));
HXDLIN(  31)																		int g41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g121 * a321) + (g221 * a222))));
HXDLIN(  31)																		int b60 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b125 * a321) + (b225 * a222))));
HXDLIN(  31)																		int a56 = ::Std_obj::_hx_int((( (Float)(255) ) * (a321 + a222)));
HXDLIN(  31)																		int blended21 = ((((a56 << 24) | (r41 << 16)) | (g41 << 8)) | b60);
HXDLIN(  31)																		{
HXLINE(  31)																			int _hx_tmp82;
HXDLIN(  31)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																				_hx_tmp82 = ((((((blended21 >> 24) & 255) << 24) | ((blended21 & 255) << 16)) | (((blended21 >> 8) & 255) << 8)) | ((blended21 >> 16) & 255));
            																			}
            																			else {
HXLINE(  31)																				_hx_tmp82 = blended21;
            																			}
HXDLIN(  31)																			::iterMagic::Iimg_obj::set(this316->image,location21,_hx_tmp82);
            																		}
            																	}
            																	else {
HXLINE(  31)																		::Dynamic this349 = this316->image;
HXDLIN(  31)																		int index45;
HXDLIN(  31)																		if (this316->useVirtualPos) {
HXLINE(  31)																			index45 = ::Std_obj::_hx_int(((((( (Float)(y39) ) - this316->virtualY) * ( (Float)(this316->width) )) + x39) - this316->virtualX));
            																		}
            																		else {
HXLINE(  31)																			index45 = ::Std_obj::_hx_int(( (Float)(((y39 * this316->width) + x39)) ));
            																		}
HXDLIN(  31)																		int _hx_tmp83;
HXDLIN(  31)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  31)																			_hx_tmp83 = ((((((c37 >> 24) & 255) << 24) | ((c37 & 255) << 16)) | (((c37 >> 8) & 255) << 8)) | ((c37 >> 16) & 255));
            																		}
            																		else {
HXLINE(  31)																			_hx_tmp83 = c37;
            																		}
HXDLIN(  31)																		::iterMagic::Iimg_obj::set(this349,index45,_hx_tmp83);
            																	}
            																}
HXLINE(  73)																found7 = true;
            															}
            															else {
HXLINE(  31)																if (found7) {
HXLINE(  31)																	goto _hx_goto_126;
            																}
            															}
            														}
            													}
            													_hx_goto_126:;
            												}
            											}
            										}
HXDLIN(  31)										if ((hasHit7 == true)) {
HXLINE(  31)											 ::pi_xy::algo::HitTri v24 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,farX1,lowerY1,bx7,by7,cx11,cy11,true);
HXDLIN(  31)											if (hasUndo7) {
HXLINE(  31)												v24->undoImage = undoImage21;
HXDLIN(  31)												v24->undoX = xIter37->start;
HXDLIN(  31)												v24->undoY = yIter37->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX7 = nextX7;
HXLINE(  47)							lastY7 = nextY7;
            						}
            					}
            				}
            			}
            		}
HXLINE(  37)		{
HXLINE(  37)			int x40 = ::Std_obj::_hx_int(x);
HXDLIN(  37)			int y40 = ::Std_obj::_hx_int(y);
HXDLIN(  37)			bool forceClear8 = false;
HXDLIN(  37)			{
HXLINE(  37)				int _g192 = 0;
HXDLIN(  37)				int _g193 = temp->height;
HXDLIN(  37)				while((_g192 < _g193)){
HXLINE(  37)					_g192 = (_g192 + 1);
HXDLIN(  37)					int dy11 = (_g192 - 1);
HXDLIN(  37)					{
HXLINE(  37)						int _g194 = 0;
HXDLIN(  37)						int _g195 = temp->width;
HXDLIN(  37)						while((_g194 < _g195)){
HXLINE(  37)							_g194 = (_g194 + 1);
HXDLIN(  37)							int dx11 = (_g194 - 1);
HXDLIN(  37)							::Dynamic this350 = temp->image;
HXDLIN(  37)							int index46;
HXDLIN(  37)							if (temp->useVirtualPos) {
HXLINE(  37)								index46 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx11) - temp->virtualX));
            							}
            							else {
HXLINE(  37)								index46 = ::Std_obj::_hx_int(( (Float)(((dy11 * temp->width) + dx11)) ));
            							}
HXDLIN(  37)							int c38 = ::iterMagic::Iimg_obj::get(this350,index46);
HXDLIN(  37)							int col8;
HXDLIN(  37)							if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)								col8 = ((((((c38 >> 24) & 255) << 24) | ((c38 & 255) << 16)) | (((c38 >> 8) & 255) << 8)) | ((c38 >> 16) & 255));
            							}
            							else {
HXLINE(  37)								col8 = c38;
            							}
HXDLIN(  37)							bool _hx_tmp84;
HXDLIN(  37)							if (temp->useMask) {
HXLINE(  37)								_hx_tmp84 = ::hx::IsNotNull( temp->mask );
            							}
            							else {
HXLINE(  37)								_hx_tmp84 = false;
            							}
HXDLIN(  37)							if (_hx_tmp84) {
HXLINE(  37)								 ::pi_xy::ImageStruct this351 = temp->mask;
HXDLIN(  37)								::Dynamic this352 = this351->image;
HXDLIN(  37)								int index47;
HXDLIN(  37)								if (this351->useVirtualPos) {
HXLINE(  37)									index47 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - this351->virtualY) * ( (Float)(this351->width) )) + dx11) - this351->virtualX));
            								}
            								else {
HXLINE(  37)									index47 = ::Std_obj::_hx_int(( (Float)(((dy11 * this351->width) + dx11)) ));
            								}
HXDLIN(  37)								int c39 = ::iterMagic::Iimg_obj::get(this352,index47);
HXDLIN(  37)								int v25;
HXDLIN(  37)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)									v25 = ((((((c39 >> 24) & 255) << 24) | ((c39 & 255) << 16)) | (((c39 >> 8) & 255) << 8)) | ((c39 >> 16) & 255));
            								}
            								else {
HXLINE(  37)									v25 = c39;
            								}
HXDLIN(  37)								int maskPixel8 = v25;
HXDLIN(  37)								int this353 = col8;
HXDLIN(  37)								if ((maskPixel8 == 0)) {
HXLINE(  37)									col8 = this353;
            								}
            								else {
HXLINE(  37)									Float m08;
HXDLIN(  37)									int this354 = ((maskPixel8 >> 24) & 255);
HXDLIN(  37)									if ((this354 == 0)) {
HXLINE(  37)										m08 = ((Float)0.);
            									}
            									else {
HXLINE(  37)										m08 = (( (Float)(this354) ) / ( (Float)(255) ));
            									}
HXDLIN(  37)									Float m18;
HXDLIN(  37)									int this355 = ((maskPixel8 >> 16) & 255);
HXDLIN(  37)									if ((this355 == 0)) {
HXLINE(  37)										m18 = ((Float)0.);
            									}
            									else {
HXLINE(  37)										m18 = (( (Float)(this355) ) / ( (Float)(255) ));
            									}
HXDLIN(  37)									Float m28;
HXDLIN(  37)									int this356 = ((maskPixel8 >> 8) & 255);
HXDLIN(  37)									if ((this356 == 0)) {
HXLINE(  37)										m28 = ((Float)0.);
            									}
            									else {
HXLINE(  37)										m28 = (( (Float)(this356) ) / ( (Float)(255) ));
            									}
HXDLIN(  37)									Float m38;
HXDLIN(  37)									int this357 = (maskPixel8 & 255);
HXDLIN(  37)									if ((this357 == 0)) {
HXLINE(  37)										m38 = ((Float)0.);
            									}
            									else {
HXLINE(  37)										m38 = (( (Float)(this357) ) / ( (Float)(255) ));
            									}
HXDLIN(  37)									int ch08 = ::Std_obj::_hx_int(((((Float)1.) - m08) * ( (Float)(((this353 >> 24) & 255)) )));
HXDLIN(  37)									int ch18 = ::Std_obj::_hx_int(((((Float)1.) - m18) * ( (Float)(((this353 >> 16) & 255)) )));
HXDLIN(  37)									int ch28 = ::Std_obj::_hx_int(((((Float)1.) - m28) * ( (Float)(((this353 >> 8) & 255)) )));
HXDLIN(  37)									int ch38 = ::Std_obj::_hx_int(((((Float)1.) - m38) * ( (Float)((this353 & 255)) )));
HXDLIN(  37)									col8 = ((((::Math_obj::round((( (Float)(ch08) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch18) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch28) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch38) ) * ( (Float)(255) ))));
            								}
            							}
HXDLIN(  37)							if ((col8 != 0)) {
HXLINE(  37)								int x41 = (x40 + dx11);
HXDLIN(  37)								int y41 = (y40 + dy11);
HXDLIN(  37)								int c40 = col8;
HXDLIN(  37)								bool _hx_tmp85;
HXDLIN(  37)								if ((((c40 >> 24) & 255) < 254)) {
HXLINE(  37)									_hx_tmp85 = this1->transparent;
            								}
            								else {
HXLINE(  37)									_hx_tmp85 = false;
            								}
HXDLIN(  37)								if (_hx_tmp85) {
HXLINE(  37)									int location22;
HXDLIN(  37)									if (this1->useVirtualPos) {
HXLINE(  37)										location22 = ::Std_obj::_hx_int(((((( (Float)(y41) ) - this1->virtualY) * ( (Float)(this1->width) )) + x41) - this1->virtualX));
            									}
            									else {
HXLINE(  37)										location22 = ::Std_obj::_hx_int(( (Float)(((y41 * this1->width) + x41)) ));
            									}
HXDLIN(  37)									int this358 = ::iterMagic::Iimg_obj::get(this1->image,location22);
HXDLIN(  37)									int this359;
HXDLIN(  37)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)										this359 = ((((((this358 >> 24) & 255) << 24) | ((this358 & 255) << 16)) | (((this358 >> 8) & 255) << 8)) | ((this358 >> 16) & 255));
            									}
            									else {
HXLINE(  37)										this359 = this358;
            									}
HXDLIN(  37)									Float a125;
HXDLIN(  37)									int this360 = ((this359 >> 24) & 255);
HXDLIN(  37)									if ((this360 == 0)) {
HXLINE(  37)										a125 = ((Float)0.);
            									}
            									else {
HXLINE(  37)										a125 = (( (Float)(this360) ) / ( (Float)(255) ));
            									}
HXDLIN(  37)									Float r122;
HXDLIN(  37)									int this361 = ((this359 >> 16) & 255);
HXDLIN(  37)									if ((this361 == 0)) {
HXLINE(  37)										r122 = ((Float)0.);
            									}
            									else {
HXLINE(  37)										r122 = (( (Float)(this361) ) / ( (Float)(255) ));
            									}
HXDLIN(  37)									Float g122;
HXDLIN(  37)									int this362 = ((this359 >> 8) & 255);
HXDLIN(  37)									if ((this362 == 0)) {
HXLINE(  37)										g122 = ((Float)0.);
            									}
            									else {
HXLINE(  37)										g122 = (( (Float)(this362) ) / ( (Float)(255) ));
            									}
HXDLIN(  37)									Float b126;
HXDLIN(  37)									int this363 = (this359 & 255);
HXDLIN(  37)									if ((this363 == 0)) {
HXLINE(  37)										b126 = ((Float)0.);
            									}
            									else {
HXLINE(  37)										b126 = (( (Float)(this363) ) / ( (Float)(255) ));
            									}
HXDLIN(  37)									Float a223;
HXDLIN(  37)									int this364 = ((col8 >> 24) & 255);
HXDLIN(  37)									if ((this364 == 0)) {
HXLINE(  37)										a223 = ((Float)0.);
            									}
            									else {
HXLINE(  37)										a223 = (( (Float)(this364) ) / ( (Float)(255) ));
            									}
HXDLIN(  37)									Float r222;
HXDLIN(  37)									int this365 = ((col8 >> 16) & 255);
HXDLIN(  37)									if ((this365 == 0)) {
HXLINE(  37)										r222 = ((Float)0.);
            									}
            									else {
HXLINE(  37)										r222 = (( (Float)(this365) ) / ( (Float)(255) ));
            									}
HXDLIN(  37)									Float g222;
HXDLIN(  37)									int this366 = ((col8 >> 8) & 255);
HXDLIN(  37)									if ((this366 == 0)) {
HXLINE(  37)										g222 = ((Float)0.);
            									}
            									else {
HXLINE(  37)										g222 = (( (Float)(this366) ) / ( (Float)(255) ));
            									}
HXDLIN(  37)									Float b226;
HXDLIN(  37)									int this367 = (col8 & 255);
HXDLIN(  37)									if ((this367 == 0)) {
HXLINE(  37)										b226 = ((Float)0.);
            									}
            									else {
HXLINE(  37)										b226 = (( (Float)(this367) ) / ( (Float)(255) ));
            									}
HXDLIN(  37)									Float a322 = (a125 * (( (Float)(1) ) - a223));
HXDLIN(  37)									int r42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r122 * a322) + (r222 * a223))));
HXDLIN(  37)									int g42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g122 * a322) + (g222 * a223))));
HXDLIN(  37)									int b61 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b126 * a322) + (b226 * a223))));
HXDLIN(  37)									int a57 = ::Std_obj::_hx_int((( (Float)(255) ) * (a322 + a223)));
HXDLIN(  37)									int blended22 = ((((a57 << 24) | (r42 << 16)) | (g42 << 8)) | b61);
HXDLIN(  37)									{
HXLINE(  37)										int _hx_tmp86;
HXDLIN(  37)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)											_hx_tmp86 = ((((((blended22 >> 24) & 255) << 24) | ((blended22 & 255) << 16)) | (((blended22 >> 8) & 255) << 8)) | ((blended22 >> 16) & 255));
            										}
            										else {
HXLINE(  37)											_hx_tmp86 = blended22;
            										}
HXDLIN(  37)										::iterMagic::Iimg_obj::set(this1->image,location22,_hx_tmp86);
            									}
            								}
            								else {
HXLINE(  37)									::Dynamic this368 = this1->image;
HXDLIN(  37)									int index48;
HXDLIN(  37)									if (this1->useVirtualPos) {
HXLINE(  37)										index48 = ::Std_obj::_hx_int(((((( (Float)(y41) ) - this1->virtualY) * ( (Float)(this1->width) )) + x41) - this1->virtualX));
            									}
            									else {
HXLINE(  37)										index48 = ::Std_obj::_hx_int(( (Float)(((y41 * this1->width) + x41)) ));
            									}
HXDLIN(  37)									int _hx_tmp87;
HXDLIN(  37)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  37)										_hx_tmp87 = ((((((c40 >> 24) & 255) << 24) | ((c40 & 255) << 16)) | (((c40 >> 8) & 255) << 8)) | ((c40 >> 16) & 255));
            									}
            									else {
HXLINE(  37)										_hx_tmp87 = c40;
            									}
HXDLIN(  37)									::iterMagic::Iimg_obj::set(this368,index48,_hx_tmp87);
            								}
            							}
            							else {
HXLINE(  37)								if (forceClear8) {
HXLINE(  37)									::Dynamic this369 = this1->image;
HXDLIN(  37)									int x42 = (x40 + dx11);
HXDLIN(  37)									int y42 = (y40 + dy11);
HXDLIN(  37)									int index49;
HXDLIN(  37)									if (this1->useVirtualPos) {
HXLINE(  37)										index49 = ::Std_obj::_hx_int(((((( (Float)(y42) ) - this1->virtualY) * ( (Float)(this1->width) )) + x42) - this1->virtualX));
            									}
            									else {
HXLINE(  37)										index49 = ::Std_obj::_hx_int(( (Float)(((y42 * this1->width) + x42)) ));
            									}
HXDLIN(  37)									::iterMagic::Iimg_obj::set(this369,index49,0);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  38)		temp = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(LineShape_Impl__obj,roundRectangle,(void))

void LineShape_Impl__obj::ellipseTri( ::pi_xy::ImageStruct this1,Float cx,Float cy,Float rx,Float ry,Float drx,Float dry,int color, ::Dynamic __o_phi, ::Dynamic __o_printSides, ::Dynamic __o_targetError){
            		 ::Dynamic phi = __o_phi;
            		if (::hx::IsNull(__o_phi)) phi = ((Float)0.);
            		 ::Dynamic printSides = __o_printSides;
            		if (::hx::IsNull(__o_printSides)) printSides = false;
            		 ::Dynamic targetError = __o_targetError;
            		if (::hx::IsNull(__o_targetError)) targetError = ((Float)1.05);
            	HX_GC_STACKFRAME(&_hx_pos_a14a7b5d04c7c47a_56_ellipseTri)
HXLINE(  57)		Float rSmall;
HXDLIN(  57)		if ((rx > ry)) {
HXLINE(  57)			rSmall = ry;
            		}
            		else {
HXLINE(  57)			rSmall = rx;
            		}
HXLINE(  58)		Float rLarge;
HXDLIN(  58)		if ((rx < ry)) {
HXLINE(  58)			rLarge = ry;
            		}
            		else {
HXLINE(  58)			rLarge = rx;
            		}
HXLINE(  59)		Float rDif = (rLarge - rSmall);
HXLINE(  60)		 ::Dynamic targetE = targetError;
HXDLIN(  60)		if (::hx::IsNull( targetE )) {
HXLINE(  60)			targetE = ((Float)1.05);
            		}
HXDLIN(  60)		int result = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE) ) / rSmall)))));
HXDLIN(  60)		int noSides;
HXDLIN(  60)		if ((result < 12)) {
HXLINE(  60)			noSides = 12;
            		}
            		else {
HXLINE(  60)			if ((result > 500)) {
HXLINE(  60)				noSides = 500;
            			}
            			else {
HXLINE(  60)				noSides = result;
            			}
            		}
HXLINE(  61)		if (( (bool)(printSides) )) {
HXLINE(  61)			::haxe::Log_obj::trace(noSides,::hx::SourceInfo(HX_("src/pi_xy/imageAbstracts/LineShape.hx",37,f7,10,fd),61,HX_("pi_xy.imageAbstracts._LineShape.LineShape_Impl_",1e,bb,98,b9),HX_("ellipseTri",ed,3e,df,4c)));
            		}
HXLINE(  62)		 ::pi_xy::ImageStruct temp;
HXDLIN(  62)		if (::hx::IsEq( phi,0 )) {
HXLINE(  62)			int width = ::Std_obj::_hx_int((( (Float)(2) ) * rx));
HXDLIN(  62)			int height = ::Std_obj::_hx_int((( (Float)(2) ) * ry));
HXDLIN(  62)			 ::Dynamic imageType = null();
HXDLIN(  62)			 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  62)			if (::hx::IsNull( imageType )) {
HXLINE(  54)				imageType = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE(  62)			::Dynamic temp1;
HXDLIN(  62)			switch((int)(( (int)(imageType) ))){
            				case (int)0: {
HXLINE(  62)					 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  62)					 ::iterMagic::BytesImg b = byt;
HXDLIN(  62)					{
HXLINE(  62)						b->width = width;
HXDLIN(  62)						b->height = height;
HXDLIN(  62)						b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  62)						b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  62)						{
HXLINE(  62)							int len = b->length;
HXDLIN(  62)							int w = 0;
HXDLIN(  62)							{
HXLINE(  62)								int _g = 0;
HXDLIN(  62)								int _g1 = b->height;
HXDLIN(  62)								while((_g < _g1)){
HXLINE(  62)									_g = (_g + 1);
HXDLIN(  62)									int y = (_g - 1);
HXDLIN(  62)									{
HXLINE(  62)										int _g2 = 0;
HXDLIN(  62)										int _g3 = b->width;
HXDLIN(  62)										while((_g2 < _g3)){
HXLINE(  62)											_g2 = (_g2 + 1);
HXDLIN(  62)											int x = (_g2 - 1);
HXDLIN(  62)											{
HXLINE(  62)												w = (w + 1);
HXDLIN(  62)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  62)											{
HXLINE(  62)												w = (w + 1);
HXDLIN(  62)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  62)											{
HXLINE(  62)												w = (w + 1);
HXDLIN(  62)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  62)											{
HXLINE(  62)												w = (w + 1);
HXDLIN(  62)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  62)					temp1 = b;
            				}
            				break;
            				case (int)1: {
HXLINE(  62)					 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  62)					 ::iterMagic::ArrIntImg a = arrI;
HXDLIN(  62)					{
HXLINE(  62)						a->width = width;
HXDLIN(  62)						a->height = height;
HXDLIN(  62)						a->data = ::Array_obj< int >::__new(0);
HXDLIN(  62)						a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  62)						{
HXLINE(  62)							int _g4 = 0;
HXDLIN(  62)							int _g5 = a->length;
HXDLIN(  62)							while((_g4 < _g5)){
HXLINE(  62)								_g4 = (_g4 + 1);
HXDLIN(  62)								int i = (_g4 - 1);
HXDLIN(  62)								a->data[i] = 0;
            							}
            						}
            					}
HXDLIN(  62)					temp1 = a;
            				}
            				break;
            				case (int)2: {
HXLINE(  62)					 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  62)					 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  62)					{
HXLINE(  62)						b1->width = width;
HXDLIN(  62)						b1->height = height;
HXDLIN(  62)						b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  62)						int size = (b1->length * 4);
HXDLIN(  62)						b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  62)						{
HXLINE(  62)							int _g6 = 0;
HXDLIN(  62)							int _g7 = b1->length;
HXDLIN(  62)							while((_g6 < _g7)){
HXLINE(  62)								_g6 = (_g6 + 1);
HXDLIN(  62)								int i1 = (_g6 - 1);
HXDLIN(  62)								{
HXLINE(  62)									 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN(  62)									bool temp2;
HXDLIN(  62)									if ((i1 >= 0)) {
HXLINE(  62)										temp2 = (i1 < (this3->byteLength >> 2));
            									}
            									else {
HXLINE(  62)										temp2 = false;
            									}
HXDLIN(  62)									if (temp2) {
HXLINE(  62)										 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN(  62)										int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN(  62)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  62)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  62)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  62)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN(  62)					temp1 = b1;
            				}
            				break;
            				case (int)3: {
HXLINE(  62)					 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  62)					 ::iterMagic::VecIntImg v = vec;
HXDLIN(  62)					{
HXLINE(  62)						v->width = width;
HXDLIN(  62)						v->height = height;
HXDLIN(  62)						v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  62)						v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  62)						{
HXLINE(  62)							int _g8 = 0;
HXDLIN(  62)							int _g9 = v->length;
HXDLIN(  62)							while((_g8 < _g9)){
HXLINE(  62)								_g8 = (_g8 + 1);
HXDLIN(  62)								int i2 = (_g8 - 1);
HXDLIN(  62)								v->data->__unsafe_set(i2,0);
            							}
            						}
            					}
HXDLIN(  62)					temp1 = v;
            				}
            				break;
            				case (int)4: {
HXLINE(  62)					 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  62)					 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  62)					{
HXLINE(  62)						b2->width = width;
HXDLIN(  62)						b2->height = height;
HXDLIN(  62)						b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  62)						b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  62)						{
HXLINE(  62)							int len1 = b2->length;
HXDLIN(  62)							 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  62)							if (::hx::IsNull( d->head )) {
HXLINE(  62)								int _g10 = 0;
HXDLIN(  62)								int _g11 = len1;
HXDLIN(  62)								while((_g10 < _g11)){
HXLINE(  62)									_g10 = (_g10 + 1);
HXDLIN(  62)									int i3 = (_g10 - 1);
HXDLIN(  62)									d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            								}
            							}
            							else {
HXLINE(  62)								int _g12 = 0;
HXDLIN(  62)								int _g13 = len1;
HXDLIN(  62)								while((_g12 < _g13)){
HXLINE(  62)									_g12 = (_g12 + 1);
HXDLIN(  62)									int i4 = (_g12 - 1);
HXDLIN(  62)									{
HXLINE(  62)										 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  62)										 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  62)										{
HXLINE(  62)											int _g14 = 0;
HXDLIN(  62)											int _g15 = i4;
HXDLIN(  62)											while((_g14 < _g15)){
HXLINE(  62)												_g14 = (_g14 + 1);
HXDLIN(  62)												int i5 = (_g14 - 1);
HXLINE( 345)												prev = l;
HXLINE( 346)												l = l->next;
            											}
            										}
HXLINE(  62)										if (::hx::IsNull( prev )) {
HXLINE(  62)											b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  62)											l = null();
            										}
            										else {
HXLINE(  62)											prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  62)											l = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  62)					temp1 = b2;
            				}
            				break;
            			}
HXDLIN(  62)			this2->image = temp1;
HXDLIN(  62)			this2->width = width;
HXDLIN(  62)			this2->height = height;
HXDLIN(  62)			this2->imageType = ( (int)(imageType) );
HXDLIN(  62)			temp = this2;
            		}
            		else {
HXLINE(  62)			int width1 = ::Std_obj::_hx_int(((( (Float)(2) ) * rLarge) + rDif));
HXDLIN(  62)			int height1 = ::Std_obj::_hx_int(((( (Float)(2) ) * rLarge) + rDif));
HXDLIN(  62)			 ::Dynamic imageType1 = null();
HXDLIN(  62)			 ::pi_xy::ImageStruct this4 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  62)			if (::hx::IsNull( imageType1 )) {
HXLINE(  54)				imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE(  62)			::Dynamic temp3;
HXDLIN(  62)			switch((int)(( (int)(imageType1) ))){
            				case (int)0: {
HXLINE(  62)					 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  62)					 ::iterMagic::BytesImg b3 = byt1;
HXDLIN(  62)					{
HXLINE(  62)						b3->width = width1;
HXDLIN(  62)						b3->height = height1;
HXDLIN(  62)						b3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  62)						b3->data = ::haxe::io::Bytes_obj::alloc((b3->length * 4));
HXDLIN(  62)						{
HXLINE(  62)							int len2 = b3->length;
HXDLIN(  62)							int w1 = 0;
HXDLIN(  62)							{
HXLINE(  62)								int _g16 = 0;
HXDLIN(  62)								int _g17 = b3->height;
HXDLIN(  62)								while((_g16 < _g17)){
HXLINE(  62)									_g16 = (_g16 + 1);
HXDLIN(  62)									int y1 = (_g16 - 1);
HXDLIN(  62)									{
HXLINE(  62)										int _g18 = 0;
HXDLIN(  62)										int _g19 = b3->width;
HXDLIN(  62)										while((_g18 < _g19)){
HXLINE(  62)											_g18 = (_g18 + 1);
HXDLIN(  62)											int x1 = (_g18 - 1);
HXDLIN(  62)											{
HXLINE(  62)												w1 = (w1 + 1);
HXDLIN(  62)												b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  62)											{
HXLINE(  62)												w1 = (w1 + 1);
HXDLIN(  62)												b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  62)											{
HXLINE(  62)												w1 = (w1 + 1);
HXDLIN(  62)												b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  62)											{
HXLINE(  62)												w1 = (w1 + 1);
HXDLIN(  62)												b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  62)					temp3 = b3;
            				}
            				break;
            				case (int)1: {
HXLINE(  62)					 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  62)					 ::iterMagic::ArrIntImg a1 = arrI1;
HXDLIN(  62)					{
HXLINE(  62)						a1->width = width1;
HXDLIN(  62)						a1->height = height1;
HXDLIN(  62)						a1->data = ::Array_obj< int >::__new(0);
HXDLIN(  62)						a1->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  62)						{
HXLINE(  62)							int _g20 = 0;
HXDLIN(  62)							int _g21 = a1->length;
HXDLIN(  62)							while((_g20 < _g21)){
HXLINE(  62)								_g20 = (_g20 + 1);
HXDLIN(  62)								int i6 = (_g20 - 1);
HXDLIN(  62)								a1->data[i6] = 0;
            							}
            						}
            					}
HXDLIN(  62)					temp3 = a1;
            				}
            				break;
            				case (int)2: {
HXLINE(  62)					 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  62)					 ::iterMagic::U32ArrImg b4 = u32a1;
HXDLIN(  62)					{
HXLINE(  62)						b4->width = width1;
HXDLIN(  62)						b4->height = height1;
HXDLIN(  62)						b4->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  62)						int size1 = (b4->length * 4);
HXDLIN(  62)						b4->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  62)						{
HXLINE(  62)							int _g22 = 0;
HXDLIN(  62)							int _g23 = b4->length;
HXDLIN(  62)							while((_g22 < _g23)){
HXLINE(  62)								_g22 = (_g22 + 1);
HXDLIN(  62)								int i7 = (_g22 - 1);
HXDLIN(  62)								{
HXLINE(  62)									 ::haxe::io::ArrayBufferViewImpl this5 = b4->data;
HXDLIN(  62)									bool temp4;
HXDLIN(  62)									if ((i7 >= 0)) {
HXLINE(  62)										temp4 = (i7 < (this5->byteLength >> 2));
            									}
            									else {
HXLINE(  62)										temp4 = false;
            									}
HXDLIN(  62)									if (temp4) {
HXLINE(  62)										 ::haxe::io::Bytes _this1 = this5->bytes;
HXDLIN(  62)										int pos1 = ((i7 << 2) + this5->byteOffset);
HXDLIN(  62)										_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  62)										_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  62)										_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  62)										_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN(  62)					temp3 = b4;
            				}
            				break;
            				case (int)3: {
HXLINE(  62)					 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  62)					 ::iterMagic::VecIntImg v1 = vec1;
HXDLIN(  62)					{
HXLINE(  62)						v1->width = width1;
HXDLIN(  62)						v1->height = height1;
HXDLIN(  62)						v1->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  62)						v1->data = ::Array_obj< int >::__new(v1->length);
HXDLIN(  62)						{
HXLINE(  62)							int _g24 = 0;
HXDLIN(  62)							int _g25 = v1->length;
HXDLIN(  62)							while((_g24 < _g25)){
HXLINE(  62)								_g24 = (_g24 + 1);
HXDLIN(  62)								int i8 = (_g24 - 1);
HXDLIN(  62)								v1->data->__unsafe_set(i8,0);
            							}
            						}
            					}
HXDLIN(  62)					temp3 = v1;
            				}
            				break;
            				case (int)4: {
HXLINE(  62)					 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  62)					 ::iterMagic::StackIntImg b5 = sInt1;
HXDLIN(  62)					{
HXLINE(  62)						b5->width = width1;
HXDLIN(  62)						b5->height = height1;
HXDLIN(  62)						b5->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  62)						b5->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  62)						{
HXLINE(  62)							int len3 = b5->length;
HXDLIN(  62)							 ::haxe::ds::GenericStack_Int d1 = b5->data;
HXDLIN(  62)							if (::hx::IsNull( d1->head )) {
HXLINE(  62)								int _g26 = 0;
HXDLIN(  62)								int _g27 = len3;
HXDLIN(  62)								while((_g26 < _g27)){
HXLINE(  62)									_g26 = (_g26 + 1);
HXDLIN(  62)									int i9 = (_g26 - 1);
HXDLIN(  62)									d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            								}
            							}
            							else {
HXLINE(  62)								int _g28 = 0;
HXDLIN(  62)								int _g29 = len3;
HXDLIN(  62)								while((_g28 < _g29)){
HXLINE(  62)									_g28 = (_g28 + 1);
HXDLIN(  62)									int i10 = (_g28 - 1);
HXDLIN(  62)									{
HXLINE(  62)										 ::haxe::ds::GenericCell_Int l1 = b5->data->head;
HXDLIN(  62)										 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  62)										{
HXLINE(  62)											int _g30 = 0;
HXDLIN(  62)											int _g31 = i10;
HXDLIN(  62)											while((_g30 < _g31)){
HXLINE(  62)												_g30 = (_g30 + 1);
HXDLIN(  62)												int i11 = (_g30 - 1);
HXLINE( 345)												prev1 = l1;
HXLINE( 346)												l1 = l1->next;
            											}
            										}
HXLINE(  62)										if (::hx::IsNull( prev1 )) {
HXLINE(  62)											b5->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  62)											l1 = null();
            										}
            										else {
HXLINE(  62)											prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  62)											l1 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  62)					temp3 = b5;
            				}
            				break;
            			}
HXDLIN(  62)			this4->image = temp3;
HXDLIN(  62)			this4->width = width1;
HXDLIN(  62)			this4->height = height1;
HXDLIN(  62)			this4->imageType = ( (int)(imageType1) );
HXDLIN(  62)			temp = this4;
            		}
HXLINE(  63)		temp->transparent = false;
HXLINE(  64)		if (::hx::IsEq( phi,0 )) {
HXLINE(  65)			 ::pi_xy::ImageStruct this6 = temp;
HXDLIN(  65)			 ::Dynamic phi1 = phi;
HXDLIN(  65)			 ::Dynamic sides = noSides;
HXDLIN(  65)			if (::hx::IsNull( sides )) {
HXLINE(  65)				sides = 36;
            			}
HXDLIN(  65)			if (::hx::IsNull( phi1 )) {
HXLINE(  65)				phi1 = ((Float)0.);
            			}
HXDLIN(  65)			{
HXLINE(  65)				 ::Dynamic phi2 = phi1;
HXDLIN(  65)				 ::Dynamic sides1 = sides;
HXDLIN(  65)				if (::hx::IsNull( sides1 )) {
HXLINE( 212)					sides1 = 36;
            				}
HXLINE(  65)				if (::hx::IsNull( phi2 )) {
HXLINE( 211)					phi2 = ((Float)0.);
            				}
HXLINE(  65)				Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides1) ));
HXDLIN(  65)				Float omega;
HXDLIN(  65)				omega = ((Float)0.);
HXDLIN(  65)				Float lastX = ((Float)0.);
HXDLIN(  65)				Float lastY = ((Float)0.);
HXDLIN(  65)				if (::hx::IsNotEq( phi2,0 )) {
HXLINE(  35)					lastX = ((((rx * ::Math_obj::cos(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::cos(( (Float)(phi2) ))) - ((ry * ::Math_obj::sin(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::sin(( (Float)(phi2) )))) + rx);
HXLINE(  36)					lastY = ((((rx * ::Math_obj::cos(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::sin(( (Float)(phi2) ))) + ((ry * ::Math_obj::sin(((( (Float)(sides1) ) * theta) + omega))) * ::Math_obj::cos(( (Float)(phi2) )))) + ry);
            				}
            				else {
HXLINE(  38)					lastX = (rx + (rx * ::Math_obj::cos(((( (Float)(sides1) ) * theta) + omega))));
HXLINE(  39)					lastY = (ry + (ry * ::Math_obj::sin(((( (Float)(sides1) ) * theta) + omega))));
            				}
HXLINE(  65)				if (::hx::IsNotEq( phi2,0 )) {
HXLINE(  65)					Float cphi = ::Math_obj::cos(( (Float)(phi2) ));
HXDLIN(  65)					Float sphi = ::Math_obj::sin(( (Float)(phi2) ));
HXDLIN(  65)					{
HXLINE(  65)						int _g32 = 0;
HXDLIN(  65)						int _g33 = (sides1 + 1);
HXDLIN(  65)						while((_g32 < _g33)){
HXLINE(  65)							_g32 = (_g32 + 1);
HXDLIN(  65)							int i12 = (_g32 - 1);
HXDLIN(  65)							Float stheta = ::Math_obj::sin((((( (Float)(i12) ) * theta) + omega) + ((Float)0.01)));
HXDLIN(  65)							Float ctheta = ::Math_obj::cos((((( (Float)(i12) ) * theta) + omega) + ((Float)0.01)));
HXDLIN(  65)							Float nextX = ((((rx * ctheta) * cphi) - ((ry * stheta) * sphi)) + rx);
HXDLIN(  65)							Float nextY = ((((rx * ctheta) * sphi) + ((ry * stheta) * cphi)) + ry);
HXDLIN(  65)							{
HXLINE(  65)								 ::pi_xy::ImageStruct this7 = this6;
HXDLIN(  65)								bool hasHit = false;
HXDLIN(  65)								bool hasUndo = false;
HXDLIN(  65)								{
HXLINE(  65)									Float bx = lastX;
HXDLIN(  65)									Float by = lastY;
HXDLIN(  65)									Float cx1 = nextX;
HXDLIN(  65)									Float cy1 = nextY;
HXDLIN(  65)									bool adjustWinding = (((((rx * by) - (bx * ry)) + ((bx * cy1) - (cx1 * by))) + ((cx1 * ry) - (rx * cy1))) > 0);
HXDLIN(  65)									if (!(adjustWinding)) {
HXLINE(  65)										Float bx_ = bx;
HXDLIN(  65)										Float by_ = by;
HXLINE(  25)										bx = cx1;
HXLINE(  26)										by = cy1;
HXLINE(  27)										cx1 = bx_;
HXLINE(  28)										cy1 = by_;
            									}
HXLINE(  65)									{
HXLINE(  65)										Float s0 = ((ry * cx1) - (rx * cy1));
HXDLIN(  65)										Float sx = (cy1 - ry);
HXDLIN(  65)										Float sy = (rx - cx1);
HXDLIN(  65)										Float t0 = ((rx * by) - (ry * bx));
HXDLIN(  65)										Float tx = (ry - by);
HXDLIN(  65)										Float ty = (bx - rx);
HXDLIN(  65)										Float A = ((((-(by) * cx1) + (ry * (-(bx) + cx1))) + (rx * (by - cy1))) + (bx * cy1));
HXDLIN(  65)										 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  65)										if ((rx > bx)) {
HXLINE(  65)											if ((rx > cx1)) {
HXLINE(  65)												int min;
HXDLIN(  65)												if ((bx > cx1)) {
HXLINE(  65)													min = ::Math_obj::floor(cx1);
            												}
            												else {
HXLINE(  65)													min = ::Math_obj::floor(bx);
            												}
HXDLIN(  65)												int ii_min = min;
HXDLIN(  65)												int ii_max = ::Math_obj::ceil(rx);
HXDLIN(  65)												xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            											}
            											else {
HXLINE(  65)												int ii_min1 = ::Math_obj::floor(bx);
HXDLIN(  65)												int ii_max1 = ::Math_obj::ceil(cx1);
HXDLIN(  65)												xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            											}
            										}
            										else {
HXLINE(  65)											if ((bx > cx1)) {
HXLINE(  65)												int min1;
HXDLIN(  65)												if ((rx > cx1)) {
HXLINE(  65)													min1 = ::Math_obj::floor(cx1);
            												}
            												else {
HXLINE(  65)													min1 = ::Math_obj::ceil(rx);
            												}
HXDLIN(  65)												int ii_min2 = min1;
HXDLIN(  65)												int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN(  65)												xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            											}
            											else {
HXLINE(  65)												int ii_min3 = ::Math_obj::floor(rx);
HXDLIN(  65)												int ii_max3 = ::Math_obj::ceil(cx1);
HXDLIN(  65)												xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            											}
            										}
HXDLIN(  65)										 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  65)										if ((ry > by)) {
HXLINE(  65)											if ((ry > cy1)) {
HXLINE(  65)												int min2;
HXDLIN(  65)												if ((by > cy1)) {
HXLINE(  65)													min2 = ::Math_obj::floor(cy1);
            												}
            												else {
HXLINE(  65)													min2 = ::Math_obj::floor(by);
            												}
HXDLIN(  65)												int ii_min4 = min2;
HXDLIN(  65)												int ii_max4 = ::Math_obj::ceil(ry);
HXDLIN(  65)												yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            											}
            											else {
HXLINE(  65)												int ii_min5 = ::Math_obj::floor(by);
HXDLIN(  65)												int ii_max5 = ::Math_obj::ceil(cy1);
HXDLIN(  65)												yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            											}
            										}
            										else {
HXLINE(  65)											if ((by > cy1)) {
HXLINE(  65)												int min3;
HXDLIN(  65)												if ((ry > cy1)) {
HXLINE(  65)													min3 = ::Math_obj::floor(cy1);
            												}
            												else {
HXLINE(  65)													min3 = ::Math_obj::ceil(ry);
            												}
HXDLIN(  65)												int ii_min6 = min3;
HXDLIN(  65)												int ii_max6 = ::Math_obj::ceil(by);
HXDLIN(  65)												yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            											}
            											else {
HXLINE(  65)												int ii_min7 = ::Math_obj::floor(ry);
HXDLIN(  65)												int ii_max7 = ::Math_obj::ceil(cy1);
HXDLIN(  65)												yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            											}
            										}
HXDLIN(  65)										 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  65)										if (hasUndo) {
HXLINE(  65)											int width2 = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  65)											int height2 = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  65)											 ::Dynamic imageType2 = null();
HXDLIN(  65)											 ::pi_xy::ImageStruct this8 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  65)											if (::hx::IsNull( imageType2 )) {
HXLINE(  54)												imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  65)											::Dynamic undoImage1;
HXDLIN(  65)											switch((int)(( (int)(imageType2) ))){
            												case (int)0: {
HXLINE(  65)													 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  65)													 ::iterMagic::BytesImg b6 = byt2;
HXDLIN(  65)													{
HXLINE(  65)														b6->width = width2;
HXDLIN(  65)														b6->height = height2;
HXDLIN(  65)														b6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  65)														b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN(  65)														{
HXLINE(  65)															int len4 = b6->length;
HXDLIN(  65)															int w2 = 0;
HXDLIN(  65)															{
HXLINE(  65)																int _g34 = 0;
HXDLIN(  65)																int _g35 = b6->height;
HXDLIN(  65)																while((_g34 < _g35)){
HXLINE(  65)																	_g34 = (_g34 + 1);
HXDLIN(  65)																	int y2 = (_g34 - 1);
HXDLIN(  65)																	{
HXLINE(  65)																		int _g36 = 0;
HXDLIN(  65)																		int _g37 = b6->width;
HXDLIN(  65)																		while((_g36 < _g37)){
HXLINE(  65)																			_g36 = (_g36 + 1);
HXDLIN(  65)																			int x2 = (_g36 - 1);
HXDLIN(  65)																			{
HXLINE(  65)																				w2 = (w2 + 1);
HXDLIN(  65)																				b6->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  65)																			{
HXLINE(  65)																				w2 = (w2 + 1);
HXDLIN(  65)																				b6->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  65)																			{
HXLINE(  65)																				w2 = (w2 + 1);
HXDLIN(  65)																				b6->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  65)																			{
HXLINE(  65)																				w2 = (w2 + 1);
HXDLIN(  65)																				b6->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  65)													undoImage1 = b6;
            												}
            												break;
            												case (int)1: {
HXLINE(  65)													 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  65)													 ::iterMagic::ArrIntImg a2 = arrI2;
HXDLIN(  65)													{
HXLINE(  65)														a2->width = width2;
HXDLIN(  65)														a2->height = height2;
HXDLIN(  65)														a2->data = ::Array_obj< int >::__new(0);
HXDLIN(  65)														a2->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  65)														{
HXLINE(  65)															int _g38 = 0;
HXDLIN(  65)															int _g39 = a2->length;
HXDLIN(  65)															while((_g38 < _g39)){
HXLINE(  65)																_g38 = (_g38 + 1);
HXDLIN(  65)																int i13 = (_g38 - 1);
HXDLIN(  65)																a2->data[i13] = 0;
            															}
            														}
            													}
HXDLIN(  65)													undoImage1 = a2;
            												}
            												break;
            												case (int)2: {
HXLINE(  65)													 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  65)													 ::iterMagic::U32ArrImg b7 = u32a2;
HXDLIN(  65)													{
HXLINE(  65)														b7->width = width2;
HXDLIN(  65)														b7->height = height2;
HXDLIN(  65)														b7->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  65)														int size2 = (b7->length * 4);
HXDLIN(  65)														b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  65)														{
HXLINE(  65)															int _g40 = 0;
HXDLIN(  65)															int _g41 = b7->length;
HXDLIN(  65)															while((_g40 < _g41)){
HXLINE(  65)																_g40 = (_g40 + 1);
HXDLIN(  65)																int i14 = (_g40 - 1);
HXDLIN(  65)																{
HXLINE(  65)																	 ::haxe::io::ArrayBufferViewImpl this9 = b7->data;
HXDLIN(  65)																	bool undoImage2;
HXDLIN(  65)																	if ((i14 >= 0)) {
HXLINE(  65)																		undoImage2 = (i14 < (this9->byteLength >> 2));
            																	}
            																	else {
HXLINE(  65)																		undoImage2 = false;
            																	}
HXDLIN(  65)																	if (undoImage2) {
HXLINE(  65)																		 ::haxe::io::Bytes _this2 = this9->bytes;
HXDLIN(  65)																		int pos2 = ((i14 << 2) + this9->byteOffset);
HXDLIN(  65)																		_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  65)																		_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  65)																		_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  65)																		_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  65)													undoImage1 = b7;
            												}
            												break;
            												case (int)3: {
HXLINE(  65)													 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  65)													 ::iterMagic::VecIntImg v2 = vec2;
HXDLIN(  65)													{
HXLINE(  65)														v2->width = width2;
HXDLIN(  65)														v2->height = height2;
HXDLIN(  65)														v2->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  65)														v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN(  65)														{
HXLINE(  65)															int _g42 = 0;
HXDLIN(  65)															int _g43 = v2->length;
HXDLIN(  65)															while((_g42 < _g43)){
HXLINE(  65)																_g42 = (_g42 + 1);
HXDLIN(  65)																int i15 = (_g42 - 1);
HXDLIN(  65)																v2->data->__unsafe_set(i15,0);
            															}
            														}
            													}
HXDLIN(  65)													undoImage1 = v2;
            												}
            												break;
            												case (int)4: {
HXLINE(  65)													 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  65)													 ::iterMagic::StackIntImg b8 = sInt2;
HXDLIN(  65)													{
HXLINE(  65)														b8->width = width2;
HXDLIN(  65)														b8->height = height2;
HXDLIN(  65)														b8->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  65)														b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  65)														{
HXLINE(  65)															int len5 = b8->length;
HXDLIN(  65)															 ::haxe::ds::GenericStack_Int d2 = b8->data;
HXDLIN(  65)															if (::hx::IsNull( d2->head )) {
HXLINE(  65)																int _g44 = 0;
HXDLIN(  65)																int _g45 = len5;
HXDLIN(  65)																while((_g44 < _g45)){
HXLINE(  65)																	_g44 = (_g44 + 1);
HXDLIN(  65)																	int i16 = (_g44 - 1);
HXDLIN(  65)																	d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            																}
            															}
            															else {
HXLINE(  65)																int _g46 = 0;
HXDLIN(  65)																int _g47 = len5;
HXDLIN(  65)																while((_g46 < _g47)){
HXLINE(  65)																	_g46 = (_g46 + 1);
HXDLIN(  65)																	int i17 = (_g46 - 1);
HXDLIN(  65)																	{
HXLINE(  65)																		 ::haxe::ds::GenericCell_Int l2 = b8->data->head;
HXDLIN(  65)																		 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  65)																		{
HXLINE(  65)																			int _g48 = 0;
HXDLIN(  65)																			int _g49 = i17;
HXDLIN(  65)																			while((_g48 < _g49)){
HXLINE(  65)																				_g48 = (_g48 + 1);
HXDLIN(  65)																				int i18 = (_g48 - 1);
HXLINE( 345)																				prev2 = l2;
HXLINE( 346)																				l2 = l2->next;
            																			}
            																		}
HXLINE(  65)																		if (::hx::IsNull( prev2 )) {
HXLINE(  65)																			b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  65)																			l2 = null();
            																		}
            																		else {
HXLINE(  65)																			prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  65)																			l2 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  65)													undoImage1 = b8;
            												}
            												break;
            											}
HXDLIN(  65)											this8->image = undoImage1;
HXDLIN(  65)											this8->width = width2;
HXDLIN(  65)											this8->height = height2;
HXDLIN(  65)											this8->imageType = ( (int)(imageType2) );
HXDLIN(  65)											undoImage = this8;
HXDLIN(  65)											{
HXLINE(  65)												int rectLeft = xIter3->start;
HXDLIN(  65)												int rectTop = yIter3->start;
HXDLIN(  65)												int rectRight = xIter3->max;
HXDLIN(  65)												bool forceClear = false;
HXDLIN(  65)												{
HXLINE(  65)													int _g50 = rectTop;
HXDLIN(  65)													int _g51 = yIter3->max;
HXDLIN(  65)													while((_g50 < _g51)){
HXLINE(  65)														_g50 = (_g50 + 1);
HXDLIN(  65)														int dy = (_g50 - 1);
HXDLIN(  65)														{
HXLINE(  65)															int _g52 = rectLeft;
HXDLIN(  65)															int _g53 = rectRight;
HXDLIN(  65)															while((_g52 < _g53)){
HXLINE(  65)																_g52 = (_g52 + 1);
HXDLIN(  65)																int dx = (_g52 - 1);
HXDLIN(  65)																::Dynamic this10 = this7->image;
HXDLIN(  65)																int index;
HXDLIN(  65)																if (this7->useVirtualPos) {
HXLINE(  65)																	index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this7->virtualY) * ( (Float)(this7->width) )) + dx) - this7->virtualX));
            																}
            																else {
HXLINE(  65)																	index = ::Std_obj::_hx_int(( (Float)(((dy * this7->width) + dx)) ));
            																}
HXDLIN(  65)																int c = ::iterMagic::Iimg_obj::get(this10,index);
HXDLIN(  65)																int col;
HXDLIN(  65)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																	col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE(  65)																	col = c;
            																}
HXDLIN(  65)																bool _hx_tmp;
HXDLIN(  65)																if (this7->useMask) {
HXLINE(  65)																	_hx_tmp = ::hx::IsNotNull( this7->mask );
            																}
            																else {
HXLINE(  65)																	_hx_tmp = false;
            																}
HXDLIN(  65)																if (_hx_tmp) {
HXLINE(  65)																	 ::pi_xy::ImageStruct this11 = this7->mask;
HXDLIN(  65)																	::Dynamic this12 = this11->image;
HXDLIN(  65)																	int index1;
HXDLIN(  65)																	if (this11->useVirtualPos) {
HXLINE(  65)																		index1 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this11->virtualY) * ( (Float)(this11->width) )) + dx) - this11->virtualX));
            																	}
            																	else {
HXLINE(  65)																		index1 = ::Std_obj::_hx_int(( (Float)(((dy * this11->width) + dx)) ));
            																	}
HXDLIN(  65)																	int c1 = ::iterMagic::Iimg_obj::get(this12,index1);
HXDLIN(  65)																	int v3;
HXDLIN(  65)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																		v3 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            																	}
            																	else {
HXLINE(  65)																		v3 = c1;
            																	}
HXDLIN(  65)																	int maskPixel = v3;
HXDLIN(  65)																	int this13 = col;
HXDLIN(  65)																	if ((maskPixel == 0)) {
HXLINE(  65)																		col = this13;
            																	}
            																	else {
HXLINE(  65)																		Float m0;
HXDLIN(  65)																		int this14 = ((maskPixel >> 24) & 255);
HXDLIN(  65)																		if ((this14 == 0)) {
HXLINE(  65)																			m0 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			m0 = (( (Float)(this14) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float m1;
HXDLIN(  65)																		int this15 = ((maskPixel >> 16) & 255);
HXDLIN(  65)																		if ((this15 == 0)) {
HXLINE(  65)																			m1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			m1 = (( (Float)(this15) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float m2;
HXDLIN(  65)																		int this16 = ((maskPixel >> 8) & 255);
HXDLIN(  65)																		if ((this16 == 0)) {
HXLINE(  65)																			m2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			m2 = (( (Float)(this16) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float m3;
HXDLIN(  65)																		int this17 = (maskPixel & 255);
HXDLIN(  65)																		if ((this17 == 0)) {
HXLINE(  65)																			m3 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			m3 = (( (Float)(this17) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this13 >> 24) & 255)) )));
HXDLIN(  65)																		int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this13 >> 16) & 255)) )));
HXDLIN(  65)																		int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this13 >> 8) & 255)) )));
HXDLIN(  65)																		int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this13 & 255)) )));
HXDLIN(  65)																		col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  65)																if ((col != 0)) {
HXLINE(  65)																	int x3 = (dx - rectLeft);
HXDLIN(  65)																	int y3 = (dy - rectTop);
HXDLIN(  65)																	int c2 = col;
HXDLIN(  65)																	bool _hx_tmp1;
HXDLIN(  65)																	if ((((c2 >> 24) & 255) < 254)) {
HXLINE(  65)																		_hx_tmp1 = undoImage->transparent;
            																	}
            																	else {
HXLINE(  65)																		_hx_tmp1 = false;
            																	}
HXDLIN(  65)																	if (_hx_tmp1) {
HXLINE(  65)																		int location;
HXDLIN(  65)																		if (undoImage->useVirtualPos) {
HXLINE(  65)																			location = ::Std_obj::_hx_int(((((( (Float)(y3) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x3) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  65)																			location = ::Std_obj::_hx_int(( (Float)(((y3 * undoImage->width) + x3)) ));
            																		}
HXDLIN(  65)																		int this18 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  65)																		int this19;
HXDLIN(  65)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																			this19 = ((((((this18 >> 24) & 255) << 24) | ((this18 & 255) << 16)) | (((this18 >> 8) & 255) << 8)) | ((this18 >> 16) & 255));
            																		}
            																		else {
HXLINE(  65)																			this19 = this18;
            																		}
HXDLIN(  65)																		Float a11;
HXDLIN(  65)																		int this20 = ((this19 >> 24) & 255);
HXDLIN(  65)																		if ((this20 == 0)) {
HXLINE(  65)																			a11 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			a11 = (( (Float)(this20) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float r1;
HXDLIN(  65)																		int this21 = ((this19 >> 16) & 255);
HXDLIN(  65)																		if ((this21 == 0)) {
HXLINE(  65)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			r1 = (( (Float)(this21) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float g1;
HXDLIN(  65)																		int this22 = ((this19 >> 8) & 255);
HXDLIN(  65)																		if ((this22 == 0)) {
HXLINE(  65)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			g1 = (( (Float)(this22) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float b11;
HXDLIN(  65)																		int this23 = (this19 & 255);
HXDLIN(  65)																		if ((this23 == 0)) {
HXLINE(  65)																			b11 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			b11 = (( (Float)(this23) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float a21;
HXDLIN(  65)																		int this24 = ((col >> 24) & 255);
HXDLIN(  65)																		if ((this24 == 0)) {
HXLINE(  65)																			a21 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			a21 = (( (Float)(this24) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float r2;
HXDLIN(  65)																		int this25 = ((col >> 16) & 255);
HXDLIN(  65)																		if ((this25 == 0)) {
HXLINE(  65)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			r2 = (( (Float)(this25) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float g2;
HXDLIN(  65)																		int this26 = ((col >> 8) & 255);
HXDLIN(  65)																		if ((this26 == 0)) {
HXLINE(  65)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			g2 = (( (Float)(this26) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float b21;
HXDLIN(  65)																		int this27 = (col & 255);
HXDLIN(  65)																		if ((this27 == 0)) {
HXLINE(  65)																			b21 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			b21 = (( (Float)(this27) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float a3 = (a11 * (( (Float)(1) ) - a21));
HXDLIN(  65)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a21))));
HXDLIN(  65)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a21))));
HXDLIN(  65)																		int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a21))));
HXDLIN(  65)																		int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a21)));
HXDLIN(  65)																		int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b9);
HXDLIN(  65)																		{
HXLINE(  65)																			int _hx_tmp2;
HXDLIN(  65)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																				_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  65)																				_hx_tmp2 = blended;
            																			}
HXDLIN(  65)																			::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            																		}
            																	}
            																	else {
HXLINE(  65)																		::Dynamic this28 = undoImage->image;
HXDLIN(  65)																		int index2;
HXDLIN(  65)																		if (undoImage->useVirtualPos) {
HXLINE(  65)																			index2 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x3) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  65)																			index2 = ::Std_obj::_hx_int(( (Float)(((y3 * undoImage->width) + x3)) ));
            																		}
HXDLIN(  65)																		int _hx_tmp3;
HXDLIN(  65)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																			_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            																		}
            																		else {
HXLINE(  65)																			_hx_tmp3 = c2;
            																		}
HXDLIN(  65)																		::iterMagic::Iimg_obj::set(this28,index2,_hx_tmp3);
            																	}
            																}
            																else {
HXLINE(  65)																	if (forceClear) {
HXLINE(  65)																		::Dynamic this29 = undoImage->image;
HXDLIN(  65)																		int x4 = (dx - rectLeft);
HXDLIN(  65)																		int y4 = (dy - rectTop);
HXDLIN(  65)																		int index3;
HXDLIN(  65)																		if (undoImage->useVirtualPos) {
HXLINE(  65)																			index3 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x4) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  65)																			index3 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage->width) + x4)) ));
            																		}
HXDLIN(  65)																		::iterMagic::Iimg_obj::set(this29,index3,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  65)										bool found = false;
HXDLIN(  65)										Float s = ((Float)0.);
HXDLIN(  65)										Float t = ((Float)0.);
HXDLIN(  65)										Float sxx = ((Float)0.);
HXDLIN(  65)										Float txx = ((Float)0.);
HXDLIN(  65)										{
HXLINE(  65)											int _g_min = xIter3->start;
HXDLIN(  65)											int _g_max = xIter3->max;
HXDLIN(  65)											while((_g_min < _g_max)){
HXLINE(  65)												_g_min = (_g_min + 1);
HXDLIN(  65)												int x5 = (_g_min - 1);
HXLINE(  60)												sxx = (sx * ( (Float)(x5) ));
HXLINE(  61)												txx = (tx * ( (Float)(x5) ));
HXLINE(  62)												found = false;
HXLINE(  65)												{
HXLINE(  65)													int _g_min1 = yIter3->start;
HXDLIN(  65)													int _g_max1 = yIter3->max;
HXDLIN(  65)													while((_g_min1 < _g_max1)){
HXLINE(  65)														_g_min1 = (_g_min1 + 1);
HXDLIN(  65)														int y5 = (_g_min1 - 1);
HXLINE(  64)														s = ((s0 + sxx) + (sy * ( (Float)(y5) )));
HXLINE(  65)														t = ((t0 + txx) + (ty * ( (Float)(y5) )));
HXDLIN(  65)														bool _hx_tmp4;
HXDLIN(  65)														if (!((s <= 0))) {
HXLINE(  65)															_hx_tmp4 = (t <= 0);
            														}
            														else {
HXLINE(  65)															_hx_tmp4 = true;
            														}
HXDLIN(  65)														if (_hx_tmp4) {
HXLINE(  65)															if (found) {
HXLINE(  65)																goto _hx_goto_158;
            															}
            														}
            														else {
HXLINE(  65)															if (((s + t) < A)) {
HXLINE(  65)																{
HXLINE(  65)																	int c3 = color;
HXDLIN(  65)																	bool _hx_tmp5;
HXDLIN(  65)																	if ((((c3 >> 24) & 255) < 254)) {
HXLINE(  65)																		_hx_tmp5 = this7->transparent;
            																	}
            																	else {
HXLINE(  65)																		_hx_tmp5 = false;
            																	}
HXDLIN(  65)																	if (_hx_tmp5) {
HXLINE(  65)																		int location1;
HXDLIN(  65)																		if (this7->useVirtualPos) {
HXLINE(  65)																			location1 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - this7->virtualY) * ( (Float)(this7->width) )) + x5) - this7->virtualX));
            																		}
            																		else {
HXLINE(  65)																			location1 = ::Std_obj::_hx_int(( (Float)(((y5 * this7->width) + x5)) ));
            																		}
HXDLIN(  65)																		int this30 = ::iterMagic::Iimg_obj::get(this7->image,location1);
HXDLIN(  65)																		int this31;
HXDLIN(  65)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																			this31 = ((((((this30 >> 24) & 255) << 24) | ((this30 & 255) << 16)) | (((this30 >> 8) & 255) << 8)) | ((this30 >> 16) & 255));
            																		}
            																		else {
HXLINE(  65)																			this31 = this30;
            																		}
HXDLIN(  65)																		Float a12;
HXDLIN(  65)																		int this32 = ((this31 >> 24) & 255);
HXDLIN(  65)																		if ((this32 == 0)) {
HXLINE(  65)																			a12 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			a12 = (( (Float)(this32) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float r11;
HXDLIN(  65)																		int this33 = ((this31 >> 16) & 255);
HXDLIN(  65)																		if ((this33 == 0)) {
HXLINE(  65)																			r11 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			r11 = (( (Float)(this33) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float g11;
HXDLIN(  65)																		int this34 = ((this31 >> 8) & 255);
HXDLIN(  65)																		if ((this34 == 0)) {
HXLINE(  65)																			g11 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			g11 = (( (Float)(this34) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float b12;
HXDLIN(  65)																		int this35 = (this31 & 255);
HXDLIN(  65)																		if ((this35 == 0)) {
HXLINE(  65)																			b12 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			b12 = (( (Float)(this35) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float a22;
HXDLIN(  65)																		int this36 = ((color >> 24) & 255);
HXDLIN(  65)																		if ((this36 == 0)) {
HXLINE(  65)																			a22 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			a22 = (( (Float)(this36) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float r21;
HXDLIN(  65)																		int this37 = ((color >> 16) & 255);
HXDLIN(  65)																		if ((this37 == 0)) {
HXLINE(  65)																			r21 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			r21 = (( (Float)(this37) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float g21;
HXDLIN(  65)																		int this38 = ((color >> 8) & 255);
HXDLIN(  65)																		if ((this38 == 0)) {
HXLINE(  65)																			g21 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			g21 = (( (Float)(this38) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float b22;
HXDLIN(  65)																		int this39 = (color & 255);
HXDLIN(  65)																		if ((this39 == 0)) {
HXLINE(  65)																			b22 = ((Float)0.);
            																		}
            																		else {
HXLINE(  65)																			b22 = (( (Float)(this39) ) / ( (Float)(255) ));
            																		}
HXDLIN(  65)																		Float a31 = (a12 * (( (Float)(1) ) - a22));
HXDLIN(  65)																		int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a22))));
HXDLIN(  65)																		int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a22))));
HXDLIN(  65)																		int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a22))));
HXDLIN(  65)																		int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a22)));
HXDLIN(  65)																		int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b10);
HXDLIN(  65)																		{
HXLINE(  65)																			int _hx_tmp6;
HXDLIN(  65)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																				_hx_tmp6 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            																			}
            																			else {
HXLINE(  65)																				_hx_tmp6 = blended1;
            																			}
HXDLIN(  65)																			::iterMagic::Iimg_obj::set(this7->image,location1,_hx_tmp6);
            																		}
            																	}
            																	else {
HXLINE(  65)																		::Dynamic this40 = this7->image;
HXDLIN(  65)																		int index4;
HXDLIN(  65)																		if (this7->useVirtualPos) {
HXLINE(  65)																			index4 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - this7->virtualY) * ( (Float)(this7->width) )) + x5) - this7->virtualX));
            																		}
            																		else {
HXLINE(  65)																			index4 = ::Std_obj::_hx_int(( (Float)(((y5 * this7->width) + x5)) ));
            																		}
HXDLIN(  65)																		int _hx_tmp7;
HXDLIN(  65)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																			_hx_tmp7 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  65)																			_hx_tmp7 = c3;
            																		}
HXDLIN(  65)																		::iterMagic::Iimg_obj::set(this40,index4,_hx_tmp7);
            																	}
            																}
HXLINE(  73)																found = true;
            															}
            															else {
HXLINE(  65)																if (found) {
HXLINE(  65)																	goto _hx_goto_158;
            																}
            															}
            														}
            													}
            													_hx_goto_158:;
            												}
            											}
            										}
HXDLIN(  65)										if ((hasHit == true)) {
HXLINE(  65)											 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,rx,ry,bx,by,cx1,cy1,true);
HXDLIN(  65)											if (hasUndo) {
HXLINE(  65)												v4->undoImage = undoImage;
HXDLIN(  65)												v4->undoX = xIter3->start;
HXDLIN(  65)												v4->undoY = yIter3->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  51)							lastX = nextX;
HXLINE(  52)							lastY = nextY;
            						}
            					}
            				}
            				else {
HXLINE(  65)					int _g54 = 0;
HXDLIN(  65)					int _g55 = (sides1 + 1);
HXDLIN(  65)					while((_g54 < _g55)){
HXLINE(  65)						_g54 = (_g54 + 1);
HXDLIN(  65)						int i19 = (_g54 - 1);
HXDLIN(  65)						Float nextX1 = (rx + (rx * ::Math_obj::cos((((( (Float)(i19) ) * theta) + omega) + ((Float)0.01)))));
HXDLIN(  65)						Float nextY1 = (ry + (ry * ::Math_obj::sin((((( (Float)(i19) ) * theta) + omega) + ((Float)0.01)))));
HXDLIN(  65)						{
HXLINE(  65)							 ::pi_xy::ImageStruct this41 = this6;
HXDLIN(  65)							bool hasHit1 = false;
HXDLIN(  65)							bool hasUndo1 = false;
HXDLIN(  65)							{
HXLINE(  65)								Float bx1 = lastX;
HXDLIN(  65)								Float by1 = lastY;
HXDLIN(  65)								Float cx2 = nextX1;
HXDLIN(  65)								Float cy2 = nextY1;
HXDLIN(  65)								bool adjustWinding1 = (((((rx * by1) - (bx1 * ry)) + ((bx1 * cy2) - (cx2 * by1))) + ((cx2 * ry) - (rx * cy2))) > 0);
HXDLIN(  65)								if (!(adjustWinding1)) {
HXLINE(  65)									Float bx_1 = bx1;
HXDLIN(  65)									Float by_1 = by1;
HXLINE(  25)									bx1 = cx2;
HXLINE(  26)									by1 = cy2;
HXLINE(  27)									cx2 = bx_1;
HXLINE(  28)									cy2 = by_1;
            								}
HXLINE(  65)								{
HXLINE(  65)									Float s01 = ((ry * cx2) - (rx * cy2));
HXDLIN(  65)									Float sx1 = (cy2 - ry);
HXDLIN(  65)									Float sy1 = (rx - cx2);
HXDLIN(  65)									Float t01 = ((rx * by1) - (ry * bx1));
HXDLIN(  65)									Float tx1 = (ry - by1);
HXDLIN(  65)									Float ty1 = (bx1 - rx);
HXDLIN(  65)									Float A1 = ((((-(by1) * cx2) + (ry * (-(bx1) + cx2))) + (rx * (by1 - cy2))) + (bx1 * cy2));
HXDLIN(  65)									 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  65)									if ((rx > bx1)) {
HXLINE(  65)										if ((rx > cx2)) {
HXLINE(  65)											int min4;
HXDLIN(  65)											if ((bx1 > cx2)) {
HXLINE(  65)												min4 = ::Math_obj::floor(cx2);
            											}
            											else {
HXLINE(  65)												min4 = ::Math_obj::floor(bx1);
            											}
HXDLIN(  65)											int ii_min8 = min4;
HXDLIN(  65)											int ii_max8 = ::Math_obj::ceil(rx);
HXDLIN(  65)											xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            										}
            										else {
HXLINE(  65)											int ii_min9 = ::Math_obj::floor(bx1);
HXDLIN(  65)											int ii_max9 = ::Math_obj::ceil(cx2);
HXDLIN(  65)											xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            										}
            									}
            									else {
HXLINE(  65)										if ((bx1 > cx2)) {
HXLINE(  65)											int min5;
HXDLIN(  65)											if ((rx > cx2)) {
HXLINE(  65)												min5 = ::Math_obj::floor(cx2);
            											}
            											else {
HXLINE(  65)												min5 = ::Math_obj::ceil(rx);
            											}
HXDLIN(  65)											int ii_min10 = min5;
HXDLIN(  65)											int ii_max10 = ::Math_obj::ceil(bx1);
HXDLIN(  65)											xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            										}
            										else {
HXLINE(  65)											int ii_min11 = ::Math_obj::floor(rx);
HXDLIN(  65)											int ii_max11 = ::Math_obj::ceil(cx2);
HXDLIN(  65)											xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            										}
            									}
HXDLIN(  65)									 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  65)									if ((ry > by1)) {
HXLINE(  65)										if ((ry > cy2)) {
HXLINE(  65)											int min6;
HXDLIN(  65)											if ((by1 > cy2)) {
HXLINE(  65)												min6 = ::Math_obj::floor(cy2);
            											}
            											else {
HXLINE(  65)												min6 = ::Math_obj::floor(by1);
            											}
HXDLIN(  65)											int ii_min12 = min6;
HXDLIN(  65)											int ii_max12 = ::Math_obj::ceil(ry);
HXDLIN(  65)											yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            										}
            										else {
HXLINE(  65)											int ii_min13 = ::Math_obj::floor(by1);
HXDLIN(  65)											int ii_max13 = ::Math_obj::ceil(cy2);
HXDLIN(  65)											yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            										}
            									}
            									else {
HXLINE(  65)										if ((by1 > cy2)) {
HXLINE(  65)											int min7;
HXDLIN(  65)											if ((ry > cy2)) {
HXLINE(  65)												min7 = ::Math_obj::floor(cy2);
            											}
            											else {
HXLINE(  65)												min7 = ::Math_obj::ceil(ry);
            											}
HXDLIN(  65)											int ii_min14 = min7;
HXDLIN(  65)											int ii_max14 = ::Math_obj::ceil(by1);
HXDLIN(  65)											yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            										}
            										else {
HXLINE(  65)											int ii_min15 = ::Math_obj::floor(ry);
HXDLIN(  65)											int ii_max15 = ::Math_obj::ceil(cy2);
HXDLIN(  65)											yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            										}
            									}
HXDLIN(  65)									 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  65)									if (hasUndo1) {
HXLINE(  65)										int width3 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  65)										int height3 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  65)										 ::Dynamic imageType3 = null();
HXDLIN(  65)										 ::pi_xy::ImageStruct this42 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  65)										if (::hx::IsNull( imageType3 )) {
HXLINE(  54)											imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  65)										::Dynamic undoImage4;
HXDLIN(  65)										switch((int)(( (int)(imageType3) ))){
            											case (int)0: {
HXLINE(  65)												 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  65)												 ::iterMagic::BytesImg b13 = byt3;
HXDLIN(  65)												{
HXLINE(  65)													b13->width = width3;
HXDLIN(  65)													b13->height = height3;
HXDLIN(  65)													b13->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  65)													b13->data = ::haxe::io::Bytes_obj::alloc((b13->length * 4));
HXDLIN(  65)													{
HXLINE(  65)														int len6 = b13->length;
HXDLIN(  65)														int w3 = 0;
HXDLIN(  65)														{
HXLINE(  65)															int _g56 = 0;
HXDLIN(  65)															int _g57 = b13->height;
HXDLIN(  65)															while((_g56 < _g57)){
HXLINE(  65)																_g56 = (_g56 + 1);
HXDLIN(  65)																int y6 = (_g56 - 1);
HXDLIN(  65)																{
HXLINE(  65)																	int _g58 = 0;
HXDLIN(  65)																	int _g59 = b13->width;
HXDLIN(  65)																	while((_g58 < _g59)){
HXLINE(  65)																		_g58 = (_g58 + 1);
HXDLIN(  65)																		int x6 = (_g58 - 1);
HXDLIN(  65)																		{
HXLINE(  65)																			w3 = (w3 + 1);
HXDLIN(  65)																			b13->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  65)																		{
HXLINE(  65)																			w3 = (w3 + 1);
HXDLIN(  65)																			b13->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  65)																		{
HXLINE(  65)																			w3 = (w3 + 1);
HXDLIN(  65)																			b13->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  65)																		{
HXLINE(  65)																			w3 = (w3 + 1);
HXDLIN(  65)																			b13->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  65)												undoImage4 = b13;
            											}
            											break;
            											case (int)1: {
HXLINE(  65)												 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  65)												 ::iterMagic::ArrIntImg a6 = arrI3;
HXDLIN(  65)												{
HXLINE(  65)													a6->width = width3;
HXDLIN(  65)													a6->height = height3;
HXDLIN(  65)													a6->data = ::Array_obj< int >::__new(0);
HXDLIN(  65)													a6->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  65)													{
HXLINE(  65)														int _g60 = 0;
HXDLIN(  65)														int _g61 = a6->length;
HXDLIN(  65)														while((_g60 < _g61)){
HXLINE(  65)															_g60 = (_g60 + 1);
HXDLIN(  65)															int i20 = (_g60 - 1);
HXDLIN(  65)															a6->data[i20] = 0;
            														}
            													}
            												}
HXDLIN(  65)												undoImage4 = a6;
            											}
            											break;
            											case (int)2: {
HXLINE(  65)												 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  65)												 ::iterMagic::U32ArrImg b14 = u32a3;
HXDLIN(  65)												{
HXLINE(  65)													b14->width = width3;
HXDLIN(  65)													b14->height = height3;
HXDLIN(  65)													b14->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  65)													int size3 = (b14->length * 4);
HXDLIN(  65)													b14->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  65)													{
HXLINE(  65)														int _g62 = 0;
HXDLIN(  65)														int _g63 = b14->length;
HXDLIN(  65)														while((_g62 < _g63)){
HXLINE(  65)															_g62 = (_g62 + 1);
HXDLIN(  65)															int i21 = (_g62 - 1);
HXDLIN(  65)															{
HXLINE(  65)																 ::haxe::io::ArrayBufferViewImpl this43 = b14->data;
HXDLIN(  65)																bool undoImage5;
HXDLIN(  65)																if ((i21 >= 0)) {
HXLINE(  65)																	undoImage5 = (i21 < (this43->byteLength >> 2));
            																}
            																else {
HXLINE(  65)																	undoImage5 = false;
            																}
HXDLIN(  65)																if (undoImage5) {
HXLINE(  65)																	 ::haxe::io::Bytes _this3 = this43->bytes;
HXDLIN(  65)																	int pos3 = ((i21 << 2) + this43->byteOffset);
HXDLIN(  65)																	_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  65)																	_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  65)																	_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  65)																	_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  65)												undoImage4 = b14;
            											}
            											break;
            											case (int)3: {
HXLINE(  65)												 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  65)												 ::iterMagic::VecIntImg v5 = vec3;
HXDLIN(  65)												{
HXLINE(  65)													v5->width = width3;
HXDLIN(  65)													v5->height = height3;
HXDLIN(  65)													v5->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  65)													v5->data = ::Array_obj< int >::__new(v5->length);
HXDLIN(  65)													{
HXLINE(  65)														int _g64 = 0;
HXDLIN(  65)														int _g65 = v5->length;
HXDLIN(  65)														while((_g64 < _g65)){
HXLINE(  65)															_g64 = (_g64 + 1);
HXDLIN(  65)															int i22 = (_g64 - 1);
HXDLIN(  65)															v5->data->__unsafe_set(i22,0);
            														}
            													}
            												}
HXDLIN(  65)												undoImage4 = v5;
            											}
            											break;
            											case (int)4: {
HXLINE(  65)												 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  65)												 ::iterMagic::StackIntImg b15 = sInt3;
HXDLIN(  65)												{
HXLINE(  65)													b15->width = width3;
HXDLIN(  65)													b15->height = height3;
HXDLIN(  65)													b15->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  65)													b15->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  65)													{
HXLINE(  65)														int len7 = b15->length;
HXDLIN(  65)														 ::haxe::ds::GenericStack_Int d3 = b15->data;
HXDLIN(  65)														if (::hx::IsNull( d3->head )) {
HXLINE(  65)															int _g66 = 0;
HXDLIN(  65)															int _g67 = len7;
HXDLIN(  65)															while((_g66 < _g67)){
HXLINE(  65)																_g66 = (_g66 + 1);
HXDLIN(  65)																int i23 = (_g66 - 1);
HXDLIN(  65)																d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            															}
            														}
            														else {
HXLINE(  65)															int _g68 = 0;
HXDLIN(  65)															int _g69 = len7;
HXDLIN(  65)															while((_g68 < _g69)){
HXLINE(  65)																_g68 = (_g68 + 1);
HXDLIN(  65)																int i24 = (_g68 - 1);
HXDLIN(  65)																{
HXLINE(  65)																	 ::haxe::ds::GenericCell_Int l3 = b15->data->head;
HXDLIN(  65)																	 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  65)																	{
HXLINE(  65)																		int _g70 = 0;
HXDLIN(  65)																		int _g71 = i24;
HXDLIN(  65)																		while((_g70 < _g71)){
HXLINE(  65)																			_g70 = (_g70 + 1);
HXDLIN(  65)																			int i25 = (_g70 - 1);
HXLINE( 345)																			prev3 = l3;
HXLINE( 346)																			l3 = l3->next;
            																		}
            																	}
HXLINE(  65)																	if (::hx::IsNull( prev3 )) {
HXLINE(  65)																		b15->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  65)																		l3 = null();
            																	}
            																	else {
HXLINE(  65)																		prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  65)																		l3 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  65)												undoImage4 = b15;
            											}
            											break;
            										}
HXDLIN(  65)										this42->image = undoImage4;
HXDLIN(  65)										this42->width = width3;
HXDLIN(  65)										this42->height = height3;
HXDLIN(  65)										this42->imageType = ( (int)(imageType3) );
HXDLIN(  65)										undoImage3 = this42;
HXDLIN(  65)										{
HXLINE(  65)											int rectLeft1 = xIter31->start;
HXDLIN(  65)											int rectTop1 = yIter31->start;
HXDLIN(  65)											int rectRight1 = xIter31->max;
HXDLIN(  65)											bool forceClear1 = false;
HXDLIN(  65)											{
HXLINE(  65)												int _g72 = rectTop1;
HXDLIN(  65)												int _g73 = yIter31->max;
HXDLIN(  65)												while((_g72 < _g73)){
HXLINE(  65)													_g72 = (_g72 + 1);
HXDLIN(  65)													int dy1 = (_g72 - 1);
HXDLIN(  65)													{
HXLINE(  65)														int _g74 = rectLeft1;
HXDLIN(  65)														int _g75 = rectRight1;
HXDLIN(  65)														while((_g74 < _g75)){
HXLINE(  65)															_g74 = (_g74 + 1);
HXDLIN(  65)															int dx1 = (_g74 - 1);
HXDLIN(  65)															::Dynamic this44 = this41->image;
HXDLIN(  65)															int index5;
HXDLIN(  65)															if (this41->useVirtualPos) {
HXLINE(  65)																index5 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this41->virtualY) * ( (Float)(this41->width) )) + dx1) - this41->virtualX));
            															}
            															else {
HXLINE(  65)																index5 = ::Std_obj::_hx_int(( (Float)(((dy1 * this41->width) + dx1)) ));
            															}
HXDLIN(  65)															int c4 = ::iterMagic::Iimg_obj::get(this44,index5);
HXDLIN(  65)															int col1;
HXDLIN(  65)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																col1 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            															}
            															else {
HXLINE(  65)																col1 = c4;
            															}
HXDLIN(  65)															bool _hx_tmp8;
HXDLIN(  65)															if (this41->useMask) {
HXLINE(  65)																_hx_tmp8 = ::hx::IsNotNull( this41->mask );
            															}
            															else {
HXLINE(  65)																_hx_tmp8 = false;
            															}
HXDLIN(  65)															if (_hx_tmp8) {
HXLINE(  65)																 ::pi_xy::ImageStruct this45 = this41->mask;
HXDLIN(  65)																::Dynamic this46 = this45->image;
HXDLIN(  65)																int index6;
HXDLIN(  65)																if (this45->useVirtualPos) {
HXLINE(  65)																	index6 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this45->virtualY) * ( (Float)(this45->width) )) + dx1) - this45->virtualX));
            																}
            																else {
HXLINE(  65)																	index6 = ::Std_obj::_hx_int(( (Float)(((dy1 * this45->width) + dx1)) ));
            																}
HXDLIN(  65)																int c5 = ::iterMagic::Iimg_obj::get(this46,index6);
HXDLIN(  65)																int v6;
HXDLIN(  65)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																	v6 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            																}
            																else {
HXLINE(  65)																	v6 = c5;
            																}
HXDLIN(  65)																int maskPixel1 = v6;
HXDLIN(  65)																int this47 = col1;
HXDLIN(  65)																if ((maskPixel1 == 0)) {
HXLINE(  65)																	col1 = this47;
            																}
            																else {
HXLINE(  65)																	Float m01;
HXDLIN(  65)																	int this48 = ((maskPixel1 >> 24) & 255);
HXDLIN(  65)																	if ((this48 == 0)) {
HXLINE(  65)																		m01 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		m01 = (( (Float)(this48) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float m11;
HXDLIN(  65)																	int this49 = ((maskPixel1 >> 16) & 255);
HXDLIN(  65)																	if ((this49 == 0)) {
HXLINE(  65)																		m11 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		m11 = (( (Float)(this49) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float m21;
HXDLIN(  65)																	int this50 = ((maskPixel1 >> 8) & 255);
HXDLIN(  65)																	if ((this50 == 0)) {
HXLINE(  65)																		m21 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		m21 = (( (Float)(this50) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float m31;
HXDLIN(  65)																	int this51 = (maskPixel1 & 255);
HXDLIN(  65)																	if ((this51 == 0)) {
HXLINE(  65)																		m31 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		m31 = (( (Float)(this51) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this47 >> 24) & 255)) )));
HXDLIN(  65)																	int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this47 >> 16) & 255)) )));
HXDLIN(  65)																	int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this47 >> 8) & 255)) )));
HXDLIN(  65)																	int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this47 & 255)) )));
HXDLIN(  65)																	col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  65)															if ((col1 != 0)) {
HXLINE(  65)																int x7 = (dx1 - rectLeft1);
HXDLIN(  65)																int y7 = (dy1 - rectTop1);
HXDLIN(  65)																int c6 = col1;
HXDLIN(  65)																bool _hx_tmp9;
HXDLIN(  65)																if ((((c6 >> 24) & 255) < 254)) {
HXLINE(  65)																	_hx_tmp9 = undoImage3->transparent;
            																}
            																else {
HXLINE(  65)																	_hx_tmp9 = false;
            																}
HXDLIN(  65)																if (_hx_tmp9) {
HXLINE(  65)																	int location2;
HXDLIN(  65)																	if (undoImage3->useVirtualPos) {
HXLINE(  65)																		location2 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x7) - undoImage3->virtualX));
            																	}
            																	else {
HXLINE(  65)																		location2 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage3->width) + x7)) ));
            																	}
HXDLIN(  65)																	int this52 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN(  65)																	int this53;
HXDLIN(  65)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																		this53 = ((((((this52 >> 24) & 255) << 24) | ((this52 & 255) << 16)) | (((this52 >> 8) & 255) << 8)) | ((this52 >> 16) & 255));
            																	}
            																	else {
HXLINE(  65)																		this53 = this52;
            																	}
HXDLIN(  65)																	Float a13;
HXDLIN(  65)																	int this54 = ((this53 >> 24) & 255);
HXDLIN(  65)																	if ((this54 == 0)) {
HXLINE(  65)																		a13 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		a13 = (( (Float)(this54) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float r12;
HXDLIN(  65)																	int this55 = ((this53 >> 16) & 255);
HXDLIN(  65)																	if ((this55 == 0)) {
HXLINE(  65)																		r12 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		r12 = (( (Float)(this55) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float g12;
HXDLIN(  65)																	int this56 = ((this53 >> 8) & 255);
HXDLIN(  65)																	if ((this56 == 0)) {
HXLINE(  65)																		g12 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		g12 = (( (Float)(this56) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float b16;
HXDLIN(  65)																	int this57 = (this53 & 255);
HXDLIN(  65)																	if ((this57 == 0)) {
HXLINE(  65)																		b16 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		b16 = (( (Float)(this57) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float a23;
HXDLIN(  65)																	int this58 = ((col1 >> 24) & 255);
HXDLIN(  65)																	if ((this58 == 0)) {
HXLINE(  65)																		a23 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		a23 = (( (Float)(this58) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float r22;
HXDLIN(  65)																	int this59 = ((col1 >> 16) & 255);
HXDLIN(  65)																	if ((this59 == 0)) {
HXLINE(  65)																		r22 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		r22 = (( (Float)(this59) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float g22;
HXDLIN(  65)																	int this60 = ((col1 >> 8) & 255);
HXDLIN(  65)																	if ((this60 == 0)) {
HXLINE(  65)																		g22 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		g22 = (( (Float)(this60) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float b23;
HXDLIN(  65)																	int this61 = (col1 & 255);
HXDLIN(  65)																	if ((this61 == 0)) {
HXLINE(  65)																		b23 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		b23 = (( (Float)(this61) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float a32 = (a13 * (( (Float)(1) ) - a23));
HXDLIN(  65)																	int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a23))));
HXDLIN(  65)																	int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a23))));
HXDLIN(  65)																	int b17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b16 * a32) + (b23 * a23))));
HXDLIN(  65)																	int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a23)));
HXDLIN(  65)																	int blended2 = ((((a7 << 24) | (r4 << 16)) | (g4 << 8)) | b17);
HXDLIN(  65)																	{
HXLINE(  65)																		int _hx_tmp10;
HXDLIN(  65)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																			_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            																		}
            																		else {
HXLINE(  65)																			_hx_tmp10 = blended2;
            																		}
HXDLIN(  65)																		::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            																	}
            																}
            																else {
HXLINE(  65)																	::Dynamic this62 = undoImage3->image;
HXDLIN(  65)																	int index7;
HXDLIN(  65)																	if (undoImage3->useVirtualPos) {
HXLINE(  65)																		index7 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x7) - undoImage3->virtualX));
            																	}
            																	else {
HXLINE(  65)																		index7 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage3->width) + x7)) ));
            																	}
HXDLIN(  65)																	int _hx_tmp11;
HXDLIN(  65)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																		_hx_tmp11 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            																	}
            																	else {
HXLINE(  65)																		_hx_tmp11 = c6;
            																	}
HXDLIN(  65)																	::iterMagic::Iimg_obj::set(this62,index7,_hx_tmp11);
            																}
            															}
            															else {
HXLINE(  65)																if (forceClear1) {
HXLINE(  65)																	::Dynamic this63 = undoImage3->image;
HXDLIN(  65)																	int x8 = (dx1 - rectLeft1);
HXDLIN(  65)																	int y8 = (dy1 - rectTop1);
HXDLIN(  65)																	int index8;
HXDLIN(  65)																	if (undoImage3->useVirtualPos) {
HXLINE(  65)																		index8 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x8) - undoImage3->virtualX));
            																	}
            																	else {
HXLINE(  65)																		index8 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage3->width) + x8)) ));
            																	}
HXDLIN(  65)																	::iterMagic::Iimg_obj::set(this63,index8,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  65)									bool found1 = false;
HXDLIN(  65)									Float s1 = ((Float)0.);
HXDLIN(  65)									Float t1 = ((Float)0.);
HXDLIN(  65)									Float sxx1 = ((Float)0.);
HXDLIN(  65)									Float txx1 = ((Float)0.);
HXDLIN(  65)									{
HXLINE(  65)										int _g_min2 = xIter31->start;
HXDLIN(  65)										int _g_max2 = xIter31->max;
HXDLIN(  65)										while((_g_min2 < _g_max2)){
HXLINE(  65)											_g_min2 = (_g_min2 + 1);
HXDLIN(  65)											int x9 = (_g_min2 - 1);
HXLINE(  60)											sxx1 = (sx1 * ( (Float)(x9) ));
HXLINE(  61)											txx1 = (tx1 * ( (Float)(x9) ));
HXLINE(  62)											found1 = false;
HXLINE(  65)											{
HXLINE(  65)												int _g_min3 = yIter31->start;
HXDLIN(  65)												int _g_max3 = yIter31->max;
HXDLIN(  65)												while((_g_min3 < _g_max3)){
HXLINE(  65)													_g_min3 = (_g_min3 + 1);
HXDLIN(  65)													int y9 = (_g_min3 - 1);
HXLINE(  64)													s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y9) )));
HXLINE(  65)													t1 = ((t01 + txx1) + (ty1 * ( (Float)(y9) )));
HXDLIN(  65)													bool _hx_tmp12;
HXDLIN(  65)													if (!((s1 <= 0))) {
HXLINE(  65)														_hx_tmp12 = (t1 <= 0);
            													}
            													else {
HXLINE(  65)														_hx_tmp12 = true;
            													}
HXDLIN(  65)													if (_hx_tmp12) {
HXLINE(  65)														if (found1) {
HXLINE(  65)															goto _hx_goto_171;
            														}
            													}
            													else {
HXLINE(  65)														if (((s1 + t1) < A1)) {
HXLINE(  65)															{
HXLINE(  65)																int c7 = color;
HXDLIN(  65)																bool _hx_tmp13;
HXDLIN(  65)																if ((((c7 >> 24) & 255) < 254)) {
HXLINE(  65)																	_hx_tmp13 = this41->transparent;
            																}
            																else {
HXLINE(  65)																	_hx_tmp13 = false;
            																}
HXDLIN(  65)																if (_hx_tmp13) {
HXLINE(  65)																	int location3;
HXDLIN(  65)																	if (this41->useVirtualPos) {
HXLINE(  65)																		location3 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - this41->virtualY) * ( (Float)(this41->width) )) + x9) - this41->virtualX));
            																	}
            																	else {
HXLINE(  65)																		location3 = ::Std_obj::_hx_int(( (Float)(((y9 * this41->width) + x9)) ));
            																	}
HXDLIN(  65)																	int this64 = ::iterMagic::Iimg_obj::get(this41->image,location3);
HXDLIN(  65)																	int this65;
HXDLIN(  65)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																		this65 = ((((((this64 >> 24) & 255) << 24) | ((this64 & 255) << 16)) | (((this64 >> 8) & 255) << 8)) | ((this64 >> 16) & 255));
            																	}
            																	else {
HXLINE(  65)																		this65 = this64;
            																	}
HXDLIN(  65)																	Float a14;
HXDLIN(  65)																	int this66 = ((this65 >> 24) & 255);
HXDLIN(  65)																	if ((this66 == 0)) {
HXLINE(  65)																		a14 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		a14 = (( (Float)(this66) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float r13;
HXDLIN(  65)																	int this67 = ((this65 >> 16) & 255);
HXDLIN(  65)																	if ((this67 == 0)) {
HXLINE(  65)																		r13 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		r13 = (( (Float)(this67) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float g13;
HXDLIN(  65)																	int this68 = ((this65 >> 8) & 255);
HXDLIN(  65)																	if ((this68 == 0)) {
HXLINE(  65)																		g13 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		g13 = (( (Float)(this68) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float b18;
HXDLIN(  65)																	int this69 = (this65 & 255);
HXDLIN(  65)																	if ((this69 == 0)) {
HXLINE(  65)																		b18 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		b18 = (( (Float)(this69) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float a24;
HXDLIN(  65)																	int this70 = ((color >> 24) & 255);
HXDLIN(  65)																	if ((this70 == 0)) {
HXLINE(  65)																		a24 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		a24 = (( (Float)(this70) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float r23;
HXDLIN(  65)																	int this71 = ((color >> 16) & 255);
HXDLIN(  65)																	if ((this71 == 0)) {
HXLINE(  65)																		r23 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		r23 = (( (Float)(this71) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float g23;
HXDLIN(  65)																	int this72 = ((color >> 8) & 255);
HXDLIN(  65)																	if ((this72 == 0)) {
HXLINE(  65)																		g23 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		g23 = (( (Float)(this72) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float b24;
HXDLIN(  65)																	int this73 = (color & 255);
HXDLIN(  65)																	if ((this73 == 0)) {
HXLINE(  65)																		b24 = ((Float)0.);
            																	}
            																	else {
HXLINE(  65)																		b24 = (( (Float)(this73) ) / ( (Float)(255) ));
            																	}
HXDLIN(  65)																	Float a33 = (a14 * (( (Float)(1) ) - a24));
HXDLIN(  65)																	int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a24))));
HXDLIN(  65)																	int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a24))));
HXDLIN(  65)																	int b19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b18 * a33) + (b24 * a24))));
HXDLIN(  65)																	int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a24)));
HXDLIN(  65)																	int blended3 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b19);
HXDLIN(  65)																	{
HXLINE(  65)																		int _hx_tmp14;
HXDLIN(  65)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																			_hx_tmp14 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  65)																			_hx_tmp14 = blended3;
            																		}
HXDLIN(  65)																		::iterMagic::Iimg_obj::set(this41->image,location3,_hx_tmp14);
            																	}
            																}
            																else {
HXLINE(  65)																	::Dynamic this74 = this41->image;
HXDLIN(  65)																	int index9;
HXDLIN(  65)																	if (this41->useVirtualPos) {
HXLINE(  65)																		index9 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - this41->virtualY) * ( (Float)(this41->width) )) + x9) - this41->virtualX));
            																	}
            																	else {
HXLINE(  65)																		index9 = ::Std_obj::_hx_int(( (Float)(((y9 * this41->width) + x9)) ));
            																	}
HXDLIN(  65)																	int _hx_tmp15;
HXDLIN(  65)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  65)																		_hx_tmp15 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            																	}
            																	else {
HXLINE(  65)																		_hx_tmp15 = c7;
            																	}
HXDLIN(  65)																	::iterMagic::Iimg_obj::set(this74,index9,_hx_tmp15);
            																}
            															}
HXLINE(  73)															found1 = true;
            														}
            														else {
HXLINE(  65)															if (found1) {
HXLINE(  65)																goto _hx_goto_171;
            															}
            														}
            													}
            												}
            												_hx_goto_171:;
            											}
            										}
            									}
HXDLIN(  65)									if ((hasHit1 == true)) {
HXLINE(  65)										 ::pi_xy::algo::HitTri v7 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,rx,ry,bx1,by1,cx2,cy2,true);
HXDLIN(  65)										if (hasUndo1) {
HXLINE(  65)											v7->undoImage = undoImage3;
HXDLIN(  65)											v7->undoX = xIter31->start;
HXDLIN(  65)											v7->undoY = yIter31->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  59)						lastX = nextX1;
HXLINE(  60)						lastY = nextY1;
            					}
            				}
            			}
            		}
            		else {
HXLINE(  67)			 ::pi_xy::ImageStruct this75 = temp;
HXDLIN(  67)			Float cx3 = (rx + rDif);
HXDLIN(  67)			Float cy3 = (ry + rDif);
HXDLIN(  67)			 ::Dynamic phi3 = phi;
HXDLIN(  67)			 ::Dynamic sides2 = noSides;
HXDLIN(  67)			if (::hx::IsNull( sides2 )) {
HXLINE(  67)				sides2 = 36;
            			}
HXDLIN(  67)			if (::hx::IsNull( phi3 )) {
HXLINE(  67)				phi3 = ((Float)0.);
            			}
HXDLIN(  67)			{
HXLINE(  67)				 ::Dynamic phi4 = phi3;
HXDLIN(  67)				 ::Dynamic sides3 = sides2;
HXDLIN(  67)				if (::hx::IsNull( sides3 )) {
HXLINE( 212)					sides3 = 36;
            				}
HXLINE(  67)				if (::hx::IsNull( phi4 )) {
HXLINE( 211)					phi4 = ((Float)0.);
            				}
HXLINE(  67)				Float theta1 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides3) ));
HXDLIN(  67)				Float omega1;
HXDLIN(  67)				omega1 = ((Float)0.);
HXDLIN(  67)				Float lastX1 = ((Float)0.);
HXDLIN(  67)				Float lastY1 = ((Float)0.);
HXDLIN(  67)				if (::hx::IsNotEq( phi4,0 )) {
HXLINE(  35)					lastX1 = ((((rx * ::Math_obj::cos(((( (Float)(sides3) ) * theta1) + omega1))) * ::Math_obj::cos(( (Float)(phi4) ))) - ((ry * ::Math_obj::sin(((( (Float)(sides3) ) * theta1) + omega1))) * ::Math_obj::sin(( (Float)(phi4) )))) + cx3);
HXLINE(  36)					lastY1 = ((((rx * ::Math_obj::cos(((( (Float)(sides3) ) * theta1) + omega1))) * ::Math_obj::sin(( (Float)(phi4) ))) + ((ry * ::Math_obj::sin(((( (Float)(sides3) ) * theta1) + omega1))) * ::Math_obj::cos(( (Float)(phi4) )))) + cy3);
            				}
            				else {
HXLINE(  38)					lastX1 = (cx3 + (rx * ::Math_obj::cos(((( (Float)(sides3) ) * theta1) + omega1))));
HXLINE(  39)					lastY1 = (cy3 + (ry * ::Math_obj::sin(((( (Float)(sides3) ) * theta1) + omega1))));
            				}
HXLINE(  67)				if (::hx::IsNotEq( phi4,0 )) {
HXLINE(  67)					Float cphi1 = ::Math_obj::cos(( (Float)(phi4) ));
HXDLIN(  67)					Float sphi1 = ::Math_obj::sin(( (Float)(phi4) ));
HXDLIN(  67)					{
HXLINE(  67)						int _g76 = 0;
HXDLIN(  67)						int _g77 = (sides3 + 1);
HXDLIN(  67)						while((_g76 < _g77)){
HXLINE(  67)							_g76 = (_g76 + 1);
HXDLIN(  67)							int i26 = (_g76 - 1);
HXDLIN(  67)							Float stheta1 = ::Math_obj::sin((((( (Float)(i26) ) * theta1) + omega1) + ((Float)0.01)));
HXDLIN(  67)							Float ctheta1 = ::Math_obj::cos((((( (Float)(i26) ) * theta1) + omega1) + ((Float)0.01)));
HXDLIN(  67)							Float nextX2 = ((((rx * ctheta1) * cphi1) - ((ry * stheta1) * sphi1)) + cx3);
HXDLIN(  67)							Float nextY2 = ((((rx * ctheta1) * sphi1) + ((ry * stheta1) * cphi1)) + cy3);
HXDLIN(  67)							{
HXLINE(  67)								 ::pi_xy::ImageStruct this76 = this75;
HXDLIN(  67)								bool hasHit2 = false;
HXDLIN(  67)								bool hasUndo2 = false;
HXDLIN(  67)								{
HXLINE(  67)									Float bx2 = lastX1;
HXDLIN(  67)									Float by2 = lastY1;
HXDLIN(  67)									Float cx4 = nextX2;
HXDLIN(  67)									Float cy4 = nextY2;
HXDLIN(  67)									bool adjustWinding2 = (((((cx3 * by2) - (bx2 * cy3)) + ((bx2 * cy4) - (cx4 * by2))) + ((cx4 * cy3) - (cx3 * cy4))) > 0);
HXDLIN(  67)									if (!(adjustWinding2)) {
HXLINE(  67)										Float bx_2 = bx2;
HXDLIN(  67)										Float by_2 = by2;
HXLINE(  25)										bx2 = cx4;
HXLINE(  26)										by2 = cy4;
HXLINE(  27)										cx4 = bx_2;
HXLINE(  28)										cy4 = by_2;
            									}
HXLINE(  67)									{
HXLINE(  67)										Float s02 = ((cy3 * cx4) - (cx3 * cy4));
HXDLIN(  67)										Float sx2 = (cy4 - cy3);
HXDLIN(  67)										Float sy2 = (cx3 - cx4);
HXDLIN(  67)										Float t02 = ((cx3 * by2) - (cy3 * bx2));
HXDLIN(  67)										Float tx2 = (cy3 - by2);
HXDLIN(  67)										Float ty2 = (bx2 - cx3);
HXDLIN(  67)										Float A2 = ((((-(by2) * cx4) + (cy3 * (-(bx2) + cx4))) + (cx3 * (by2 - cy4))) + (bx2 * cy4));
HXDLIN(  67)										 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  67)										if ((cx3 > bx2)) {
HXLINE(  67)											if ((cx3 > cx4)) {
HXLINE(  67)												int min8;
HXDLIN(  67)												if ((bx2 > cx4)) {
HXLINE(  67)													min8 = ::Math_obj::floor(cx4);
            												}
            												else {
HXLINE(  67)													min8 = ::Math_obj::floor(bx2);
            												}
HXDLIN(  67)												int ii_min16 = min8;
HXDLIN(  67)												int ii_max16 = ::Math_obj::ceil(cx3);
HXDLIN(  67)												xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            											}
            											else {
HXLINE(  67)												int ii_min17 = ::Math_obj::floor(bx2);
HXDLIN(  67)												int ii_max17 = ::Math_obj::ceil(cx4);
HXDLIN(  67)												xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            											}
            										}
            										else {
HXLINE(  67)											if ((bx2 > cx4)) {
HXLINE(  67)												int min9;
HXDLIN(  67)												if ((cx3 > cx4)) {
HXLINE(  67)													min9 = ::Math_obj::floor(cx4);
            												}
            												else {
HXLINE(  67)													min9 = ::Math_obj::ceil(cx3);
            												}
HXDLIN(  67)												int ii_min18 = min9;
HXDLIN(  67)												int ii_max18 = ::Math_obj::ceil(bx2);
HXDLIN(  67)												xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            											}
            											else {
HXLINE(  67)												int ii_min19 = ::Math_obj::floor(cx3);
HXDLIN(  67)												int ii_max19 = ::Math_obj::ceil(cx4);
HXDLIN(  67)												xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            											}
            										}
HXDLIN(  67)										 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  67)										if ((cy3 > by2)) {
HXLINE(  67)											if ((cy3 > cy4)) {
HXLINE(  67)												int min10;
HXDLIN(  67)												if ((by2 > cy4)) {
HXLINE(  67)													min10 = ::Math_obj::floor(cy4);
            												}
            												else {
HXLINE(  67)													min10 = ::Math_obj::floor(by2);
            												}
HXDLIN(  67)												int ii_min20 = min10;
HXDLIN(  67)												int ii_max20 = ::Math_obj::ceil(cy3);
HXDLIN(  67)												yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            											}
            											else {
HXLINE(  67)												int ii_min21 = ::Math_obj::floor(by2);
HXDLIN(  67)												int ii_max21 = ::Math_obj::ceil(cy4);
HXDLIN(  67)												yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            											}
            										}
            										else {
HXLINE(  67)											if ((by2 > cy4)) {
HXLINE(  67)												int min11;
HXDLIN(  67)												if ((cy3 > cy4)) {
HXLINE(  67)													min11 = ::Math_obj::floor(cy4);
            												}
            												else {
HXLINE(  67)													min11 = ::Math_obj::ceil(cy3);
            												}
HXDLIN(  67)												int ii_min22 = min11;
HXDLIN(  67)												int ii_max22 = ::Math_obj::ceil(by2);
HXDLIN(  67)												yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            											}
            											else {
HXLINE(  67)												int ii_min23 = ::Math_obj::floor(cy3);
HXDLIN(  67)												int ii_max23 = ::Math_obj::ceil(cy4);
HXDLIN(  67)												yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            											}
            										}
HXDLIN(  67)										 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  67)										if (hasUndo2) {
HXLINE(  67)											int width4 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  67)											int height4 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  67)											 ::Dynamic imageType4 = null();
HXDLIN(  67)											 ::pi_xy::ImageStruct this77 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  67)											if (::hx::IsNull( imageType4 )) {
HXLINE(  54)												imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  67)											::Dynamic undoImage7;
HXDLIN(  67)											switch((int)(( (int)(imageType4) ))){
            												case (int)0: {
HXLINE(  67)													 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  67)													 ::iterMagic::BytesImg b20 = byt4;
HXDLIN(  67)													{
HXLINE(  67)														b20->width = width4;
HXDLIN(  67)														b20->height = height4;
HXDLIN(  67)														b20->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  67)														b20->data = ::haxe::io::Bytes_obj::alloc((b20->length * 4));
HXDLIN(  67)														{
HXLINE(  67)															int len8 = b20->length;
HXDLIN(  67)															int w4 = 0;
HXDLIN(  67)															{
HXLINE(  67)																int _g78 = 0;
HXDLIN(  67)																int _g79 = b20->height;
HXDLIN(  67)																while((_g78 < _g79)){
HXLINE(  67)																	_g78 = (_g78 + 1);
HXDLIN(  67)																	int y10 = (_g78 - 1);
HXDLIN(  67)																	{
HXLINE(  67)																		int _g80 = 0;
HXDLIN(  67)																		int _g81 = b20->width;
HXDLIN(  67)																		while((_g80 < _g81)){
HXLINE(  67)																			_g80 = (_g80 + 1);
HXDLIN(  67)																			int x10 = (_g80 - 1);
HXDLIN(  67)																			{
HXLINE(  67)																				w4 = (w4 + 1);
HXDLIN(  67)																				b20->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  67)																			{
HXLINE(  67)																				w4 = (w4 + 1);
HXDLIN(  67)																				b20->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  67)																			{
HXLINE(  67)																				w4 = (w4 + 1);
HXDLIN(  67)																				b20->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  67)																			{
HXLINE(  67)																				w4 = (w4 + 1);
HXDLIN(  67)																				b20->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  67)													undoImage7 = b20;
            												}
            												break;
            												case (int)1: {
HXLINE(  67)													 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  67)													 ::iterMagic::ArrIntImg a9 = arrI4;
HXDLIN(  67)													{
HXLINE(  67)														a9->width = width4;
HXDLIN(  67)														a9->height = height4;
HXDLIN(  67)														a9->data = ::Array_obj< int >::__new(0);
HXDLIN(  67)														a9->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  67)														{
HXLINE(  67)															int _g82 = 0;
HXDLIN(  67)															int _g83 = a9->length;
HXDLIN(  67)															while((_g82 < _g83)){
HXLINE(  67)																_g82 = (_g82 + 1);
HXDLIN(  67)																int i27 = (_g82 - 1);
HXDLIN(  67)																a9->data[i27] = 0;
            															}
            														}
            													}
HXDLIN(  67)													undoImage7 = a9;
            												}
            												break;
            												case (int)2: {
HXLINE(  67)													 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  67)													 ::iterMagic::U32ArrImg b25 = u32a4;
HXDLIN(  67)													{
HXLINE(  67)														b25->width = width4;
HXDLIN(  67)														b25->height = height4;
HXDLIN(  67)														b25->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  67)														int size4 = (b25->length * 4);
HXDLIN(  67)														b25->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN(  67)														{
HXLINE(  67)															int _g84 = 0;
HXDLIN(  67)															int _g85 = b25->length;
HXDLIN(  67)															while((_g84 < _g85)){
HXLINE(  67)																_g84 = (_g84 + 1);
HXDLIN(  67)																int i28 = (_g84 - 1);
HXDLIN(  67)																{
HXLINE(  67)																	 ::haxe::io::ArrayBufferViewImpl this78 = b25->data;
HXDLIN(  67)																	bool undoImage8;
HXDLIN(  67)																	if ((i28 >= 0)) {
HXLINE(  67)																		undoImage8 = (i28 < (this78->byteLength >> 2));
            																	}
            																	else {
HXLINE(  67)																		undoImage8 = false;
            																	}
HXDLIN(  67)																	if (undoImage8) {
HXLINE(  67)																		 ::haxe::io::Bytes _this4 = this78->bytes;
HXDLIN(  67)																		int pos4 = ((i28 << 2) + this78->byteOffset);
HXDLIN(  67)																		_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN(  67)																		_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN(  67)																		_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN(  67)																		_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  67)													undoImage7 = b25;
            												}
            												break;
            												case (int)3: {
HXLINE(  67)													 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  67)													 ::iterMagic::VecIntImg v8 = vec4;
HXDLIN(  67)													{
HXLINE(  67)														v8->width = width4;
HXDLIN(  67)														v8->height = height4;
HXDLIN(  67)														v8->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  67)														v8->data = ::Array_obj< int >::__new(v8->length);
HXDLIN(  67)														{
HXLINE(  67)															int _g86 = 0;
HXDLIN(  67)															int _g87 = v8->length;
HXDLIN(  67)															while((_g86 < _g87)){
HXLINE(  67)																_g86 = (_g86 + 1);
HXDLIN(  67)																int i29 = (_g86 - 1);
HXDLIN(  67)																v8->data->__unsafe_set(i29,0);
            															}
            														}
            													}
HXDLIN(  67)													undoImage7 = v8;
            												}
            												break;
            												case (int)4: {
HXLINE(  67)													 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  67)													 ::iterMagic::StackIntImg b26 = sInt4;
HXDLIN(  67)													{
HXLINE(  67)														b26->width = width4;
HXDLIN(  67)														b26->height = height4;
HXDLIN(  67)														b26->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  67)														b26->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  67)														{
HXLINE(  67)															int len9 = b26->length;
HXDLIN(  67)															 ::haxe::ds::GenericStack_Int d4 = b26->data;
HXDLIN(  67)															if (::hx::IsNull( d4->head )) {
HXLINE(  67)																int _g88 = 0;
HXDLIN(  67)																int _g89 = len9;
HXDLIN(  67)																while((_g88 < _g89)){
HXLINE(  67)																	_g88 = (_g88 + 1);
HXDLIN(  67)																	int i30 = (_g88 - 1);
HXDLIN(  67)																	d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            																}
            															}
            															else {
HXLINE(  67)																int _g90 = 0;
HXDLIN(  67)																int _g91 = len9;
HXDLIN(  67)																while((_g90 < _g91)){
HXLINE(  67)																	_g90 = (_g90 + 1);
HXDLIN(  67)																	int i31 = (_g90 - 1);
HXDLIN(  67)																	{
HXLINE(  67)																		 ::haxe::ds::GenericCell_Int l4 = b26->data->head;
HXDLIN(  67)																		 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN(  67)																		{
HXLINE(  67)																			int _g92 = 0;
HXDLIN(  67)																			int _g93 = i31;
HXDLIN(  67)																			while((_g92 < _g93)){
HXLINE(  67)																				_g92 = (_g92 + 1);
HXDLIN(  67)																				int i32 = (_g92 - 1);
HXLINE( 345)																				prev4 = l4;
HXLINE( 346)																				l4 = l4->next;
            																			}
            																		}
HXLINE(  67)																		if (::hx::IsNull( prev4 )) {
HXLINE(  67)																			b26->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  67)																			l4 = null();
            																		}
            																		else {
HXLINE(  67)																			prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  67)																			l4 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  67)													undoImage7 = b26;
            												}
            												break;
            											}
HXDLIN(  67)											this77->image = undoImage7;
HXDLIN(  67)											this77->width = width4;
HXDLIN(  67)											this77->height = height4;
HXDLIN(  67)											this77->imageType = ( (int)(imageType4) );
HXDLIN(  67)											undoImage6 = this77;
HXDLIN(  67)											{
HXLINE(  67)												int rectLeft2 = xIter32->start;
HXDLIN(  67)												int rectTop2 = yIter32->start;
HXDLIN(  67)												int rectRight2 = xIter32->max;
HXDLIN(  67)												bool forceClear2 = false;
HXDLIN(  67)												{
HXLINE(  67)													int _g94 = rectTop2;
HXDLIN(  67)													int _g95 = yIter32->max;
HXDLIN(  67)													while((_g94 < _g95)){
HXLINE(  67)														_g94 = (_g94 + 1);
HXDLIN(  67)														int dy2 = (_g94 - 1);
HXDLIN(  67)														{
HXLINE(  67)															int _g96 = rectLeft2;
HXDLIN(  67)															int _g97 = rectRight2;
HXDLIN(  67)															while((_g96 < _g97)){
HXLINE(  67)																_g96 = (_g96 + 1);
HXDLIN(  67)																int dx2 = (_g96 - 1);
HXDLIN(  67)																::Dynamic this79 = this76->image;
HXDLIN(  67)																int index10;
HXDLIN(  67)																if (this76->useVirtualPos) {
HXLINE(  67)																	index10 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this76->virtualY) * ( (Float)(this76->width) )) + dx2) - this76->virtualX));
            																}
            																else {
HXLINE(  67)																	index10 = ::Std_obj::_hx_int(( (Float)(((dy2 * this76->width) + dx2)) ));
            																}
HXDLIN(  67)																int c8 = ::iterMagic::Iimg_obj::get(this79,index10);
HXDLIN(  67)																int col2;
HXDLIN(  67)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																	col2 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            																}
            																else {
HXLINE(  67)																	col2 = c8;
            																}
HXDLIN(  67)																bool _hx_tmp16;
HXDLIN(  67)																if (this76->useMask) {
HXLINE(  67)																	_hx_tmp16 = ::hx::IsNotNull( this76->mask );
            																}
            																else {
HXLINE(  67)																	_hx_tmp16 = false;
            																}
HXDLIN(  67)																if (_hx_tmp16) {
HXLINE(  67)																	 ::pi_xy::ImageStruct this80 = this76->mask;
HXDLIN(  67)																	::Dynamic this81 = this80->image;
HXDLIN(  67)																	int index11;
HXDLIN(  67)																	if (this80->useVirtualPos) {
HXLINE(  67)																		index11 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this80->virtualY) * ( (Float)(this80->width) )) + dx2) - this80->virtualX));
            																	}
            																	else {
HXLINE(  67)																		index11 = ::Std_obj::_hx_int(( (Float)(((dy2 * this80->width) + dx2)) ));
            																	}
HXDLIN(  67)																	int c9 = ::iterMagic::Iimg_obj::get(this81,index11);
HXDLIN(  67)																	int v9;
HXDLIN(  67)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																		v9 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            																	}
            																	else {
HXLINE(  67)																		v9 = c9;
            																	}
HXDLIN(  67)																	int maskPixel2 = v9;
HXDLIN(  67)																	int this82 = col2;
HXDLIN(  67)																	if ((maskPixel2 == 0)) {
HXLINE(  67)																		col2 = this82;
            																	}
            																	else {
HXLINE(  67)																		Float m02;
HXDLIN(  67)																		int this83 = ((maskPixel2 >> 24) & 255);
HXDLIN(  67)																		if ((this83 == 0)) {
HXLINE(  67)																			m02 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m02 = (( (Float)(this83) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float m12;
HXDLIN(  67)																		int this84 = ((maskPixel2 >> 16) & 255);
HXDLIN(  67)																		if ((this84 == 0)) {
HXLINE(  67)																			m12 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m12 = (( (Float)(this84) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float m22;
HXDLIN(  67)																		int this85 = ((maskPixel2 >> 8) & 255);
HXDLIN(  67)																		if ((this85 == 0)) {
HXLINE(  67)																			m22 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m22 = (( (Float)(this85) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float m32;
HXDLIN(  67)																		int this86 = (maskPixel2 & 255);
HXDLIN(  67)																		if ((this86 == 0)) {
HXLINE(  67)																			m32 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m32 = (( (Float)(this86) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this82 >> 24) & 255)) )));
HXDLIN(  67)																		int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this82 >> 16) & 255)) )));
HXDLIN(  67)																		int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this82 >> 8) & 255)) )));
HXDLIN(  67)																		int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this82 & 255)) )));
HXDLIN(  67)																		col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  67)																if ((col2 != 0)) {
HXLINE(  67)																	int x11 = (dx2 - rectLeft2);
HXDLIN(  67)																	int y11 = (dy2 - rectTop2);
HXDLIN(  67)																	int c10 = col2;
HXDLIN(  67)																	bool _hx_tmp17;
HXDLIN(  67)																	if ((((c10 >> 24) & 255) < 254)) {
HXLINE(  67)																		_hx_tmp17 = undoImage6->transparent;
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp17 = false;
            																	}
HXDLIN(  67)																	if (_hx_tmp17) {
HXLINE(  67)																		int location4;
HXDLIN(  67)																		if (undoImage6->useVirtualPos) {
HXLINE(  67)																			location4 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x11) - undoImage6->virtualX));
            																		}
            																		else {
HXLINE(  67)																			location4 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage6->width) + x11)) ));
            																		}
HXDLIN(  67)																		int this87 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN(  67)																		int this88;
HXDLIN(  67)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			this88 = ((((((this87 >> 24) & 255) << 24) | ((this87 & 255) << 16)) | (((this87 >> 8) & 255) << 8)) | ((this87 >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			this88 = this87;
            																		}
HXDLIN(  67)																		Float a15;
HXDLIN(  67)																		int this89 = ((this88 >> 24) & 255);
HXDLIN(  67)																		if ((this89 == 0)) {
HXLINE(  67)																			a15 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a15 = (( (Float)(this89) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r14;
HXDLIN(  67)																		int this90 = ((this88 >> 16) & 255);
HXDLIN(  67)																		if ((this90 == 0)) {
HXLINE(  67)																			r14 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r14 = (( (Float)(this90) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g14;
HXDLIN(  67)																		int this91 = ((this88 >> 8) & 255);
HXDLIN(  67)																		if ((this91 == 0)) {
HXLINE(  67)																			g14 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g14 = (( (Float)(this91) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b110;
HXDLIN(  67)																		int this92 = (this88 & 255);
HXDLIN(  67)																		if ((this92 == 0)) {
HXLINE(  67)																			b110 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b110 = (( (Float)(this92) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a25;
HXDLIN(  67)																		int this93 = ((col2 >> 24) & 255);
HXDLIN(  67)																		if ((this93 == 0)) {
HXLINE(  67)																			a25 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a25 = (( (Float)(this93) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r24;
HXDLIN(  67)																		int this94 = ((col2 >> 16) & 255);
HXDLIN(  67)																		if ((this94 == 0)) {
HXLINE(  67)																			r24 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r24 = (( (Float)(this94) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g24;
HXDLIN(  67)																		int this95 = ((col2 >> 8) & 255);
HXDLIN(  67)																		if ((this95 == 0)) {
HXLINE(  67)																			g24 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g24 = (( (Float)(this95) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b27;
HXDLIN(  67)																		int this96 = (col2 & 255);
HXDLIN(  67)																		if ((this96 == 0)) {
HXLINE(  67)																			b27 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b27 = (( (Float)(this96) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a34 = (a15 * (( (Float)(1) ) - a25));
HXDLIN(  67)																		int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a25))));
HXDLIN(  67)																		int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a25))));
HXDLIN(  67)																		int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a34) + (b27 * a25))));
HXDLIN(  67)																		int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a25)));
HXDLIN(  67)																		int blended4 = ((((a10 << 24) | (r6 << 16)) | (g6 << 8)) | b28);
HXDLIN(  67)																		{
HXLINE(  67)																			int _hx_tmp18;
HXDLIN(  67)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																				_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            																			}
            																			else {
HXLINE(  67)																				_hx_tmp18 = blended4;
            																			}
HXDLIN(  67)																			::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            																		}
            																	}
            																	else {
HXLINE(  67)																		::Dynamic this97 = undoImage6->image;
HXDLIN(  67)																		int index12;
HXDLIN(  67)																		if (undoImage6->useVirtualPos) {
HXLINE(  67)																			index12 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x11) - undoImage6->virtualX));
            																		}
            																		else {
HXLINE(  67)																			index12 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage6->width) + x11)) ));
            																		}
HXDLIN(  67)																		int _hx_tmp19;
HXDLIN(  67)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			_hx_tmp19 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp19 = c10;
            																		}
HXDLIN(  67)																		::iterMagic::Iimg_obj::set(this97,index12,_hx_tmp19);
            																	}
            																}
            																else {
HXLINE(  67)																	if (forceClear2) {
HXLINE(  67)																		::Dynamic this98 = undoImage6->image;
HXDLIN(  67)																		int x12 = (dx2 - rectLeft2);
HXDLIN(  67)																		int y12 = (dy2 - rectTop2);
HXDLIN(  67)																		int index13;
HXDLIN(  67)																		if (undoImage6->useVirtualPos) {
HXLINE(  67)																			index13 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x12) - undoImage6->virtualX));
            																		}
            																		else {
HXLINE(  67)																			index13 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage6->width) + x12)) ));
            																		}
HXDLIN(  67)																		::iterMagic::Iimg_obj::set(this98,index13,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  67)										bool found2 = false;
HXDLIN(  67)										Float s2 = ((Float)0.);
HXDLIN(  67)										Float t2 = ((Float)0.);
HXDLIN(  67)										Float sxx2 = ((Float)0.);
HXDLIN(  67)										Float txx2 = ((Float)0.);
HXDLIN(  67)										{
HXLINE(  67)											int _g_min4 = xIter32->start;
HXDLIN(  67)											int _g_max4 = xIter32->max;
HXDLIN(  67)											while((_g_min4 < _g_max4)){
HXLINE(  67)												_g_min4 = (_g_min4 + 1);
HXDLIN(  67)												int x13 = (_g_min4 - 1);
HXLINE(  60)												sxx2 = (sx2 * ( (Float)(x13) ));
HXLINE(  61)												txx2 = (tx2 * ( (Float)(x13) ));
HXLINE(  62)												found2 = false;
HXLINE(  67)												{
HXLINE(  67)													int _g_min5 = yIter32->start;
HXDLIN(  67)													int _g_max5 = yIter32->max;
HXDLIN(  67)													while((_g_min5 < _g_max5)){
HXLINE(  67)														_g_min5 = (_g_min5 + 1);
HXDLIN(  67)														int y13 = (_g_min5 - 1);
HXLINE(  64)														s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y13) )));
HXLINE(  65)														t2 = ((t02 + txx2) + (ty2 * ( (Float)(y13) )));
HXLINE(  67)														bool _hx_tmp20;
HXDLIN(  67)														if (!((s2 <= 0))) {
HXLINE(  67)															_hx_tmp20 = (t2 <= 0);
            														}
            														else {
HXLINE(  67)															_hx_tmp20 = true;
            														}
HXDLIN(  67)														if (_hx_tmp20) {
HXLINE(  67)															if (found2) {
HXLINE(  67)																goto _hx_goto_184;
            															}
            														}
            														else {
HXLINE(  67)															if (((s2 + t2) < A2)) {
HXLINE(  67)																{
HXLINE(  67)																	int c11 = color;
HXDLIN(  67)																	bool _hx_tmp21;
HXDLIN(  67)																	if ((((c11 >> 24) & 255) < 254)) {
HXLINE(  67)																		_hx_tmp21 = this76->transparent;
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp21 = false;
            																	}
HXDLIN(  67)																	if (_hx_tmp21) {
HXLINE(  67)																		int location5;
HXDLIN(  67)																		if (this76->useVirtualPos) {
HXLINE(  67)																			location5 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - this76->virtualY) * ( (Float)(this76->width) )) + x13) - this76->virtualX));
            																		}
            																		else {
HXLINE(  67)																			location5 = ::Std_obj::_hx_int(( (Float)(((y13 * this76->width) + x13)) ));
            																		}
HXDLIN(  67)																		int this99 = ::iterMagic::Iimg_obj::get(this76->image,location5);
HXDLIN(  67)																		int this100;
HXDLIN(  67)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			this100 = ((((((this99 >> 24) & 255) << 24) | ((this99 & 255) << 16)) | (((this99 >> 8) & 255) << 8)) | ((this99 >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			this100 = this99;
            																		}
HXDLIN(  67)																		Float a16;
HXDLIN(  67)																		int this101 = ((this100 >> 24) & 255);
HXDLIN(  67)																		if ((this101 == 0)) {
HXLINE(  67)																			a16 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a16 = (( (Float)(this101) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r15;
HXDLIN(  67)																		int this102 = ((this100 >> 16) & 255);
HXDLIN(  67)																		if ((this102 == 0)) {
HXLINE(  67)																			r15 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r15 = (( (Float)(this102) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g15;
HXDLIN(  67)																		int this103 = ((this100 >> 8) & 255);
HXDLIN(  67)																		if ((this103 == 0)) {
HXLINE(  67)																			g15 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g15 = (( (Float)(this103) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b111;
HXDLIN(  67)																		int this104 = (this100 & 255);
HXDLIN(  67)																		if ((this104 == 0)) {
HXLINE(  67)																			b111 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b111 = (( (Float)(this104) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a26;
HXDLIN(  67)																		int this105 = ((color >> 24) & 255);
HXDLIN(  67)																		if ((this105 == 0)) {
HXLINE(  67)																			a26 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a26 = (( (Float)(this105) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r25;
HXDLIN(  67)																		int this106 = ((color >> 16) & 255);
HXDLIN(  67)																		if ((this106 == 0)) {
HXLINE(  67)																			r25 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r25 = (( (Float)(this106) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g25;
HXDLIN(  67)																		int this107 = ((color >> 8) & 255);
HXDLIN(  67)																		if ((this107 == 0)) {
HXLINE(  67)																			g25 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g25 = (( (Float)(this107) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b29;
HXDLIN(  67)																		int this108 = (color & 255);
HXDLIN(  67)																		if ((this108 == 0)) {
HXLINE(  67)																			b29 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b29 = (( (Float)(this108) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a35 = (a16 * (( (Float)(1) ) - a26));
HXDLIN(  67)																		int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a26))));
HXDLIN(  67)																		int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a26))));
HXDLIN(  67)																		int b30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a35) + (b29 * a26))));
HXDLIN(  67)																		int a17 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a26)));
HXDLIN(  67)																		int blended5 = ((((a17 << 24) | (r7 << 16)) | (g7 << 8)) | b30);
HXDLIN(  67)																		{
HXLINE(  67)																			int _hx_tmp22;
HXDLIN(  67)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																				_hx_tmp22 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            																			}
            																			else {
HXLINE(  67)																				_hx_tmp22 = blended5;
            																			}
HXDLIN(  67)																			::iterMagic::Iimg_obj::set(this76->image,location5,_hx_tmp22);
            																		}
            																	}
            																	else {
HXLINE(  67)																		::Dynamic this109 = this76->image;
HXDLIN(  67)																		int index14;
HXDLIN(  67)																		if (this76->useVirtualPos) {
HXLINE(  67)																			index14 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - this76->virtualY) * ( (Float)(this76->width) )) + x13) - this76->virtualX));
            																		}
            																		else {
HXLINE(  67)																			index14 = ::Std_obj::_hx_int(( (Float)(((y13 * this76->width) + x13)) ));
            																		}
HXDLIN(  67)																		int _hx_tmp23;
HXDLIN(  67)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			_hx_tmp23 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp23 = c11;
            																		}
HXDLIN(  67)																		::iterMagic::Iimg_obj::set(this109,index14,_hx_tmp23);
            																	}
            																}
HXLINE(  73)																found2 = true;
            															}
            															else {
HXLINE(  67)																if (found2) {
HXLINE(  67)																	goto _hx_goto_184;
            																}
            															}
            														}
            													}
            													_hx_goto_184:;
            												}
            											}
            										}
HXDLIN(  67)										if ((hasHit2 == true)) {
HXLINE(  67)											 ::pi_xy::algo::HitTri v10 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx3,cy3,bx2,by2,cx4,cy4,true);
HXDLIN(  67)											if (hasUndo2) {
HXLINE(  67)												v10->undoImage = undoImage6;
HXDLIN(  67)												v10->undoX = xIter32->start;
HXDLIN(  67)												v10->undoY = yIter32->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  51)							lastX1 = nextX2;
HXLINE(  52)							lastY1 = nextY2;
            						}
            					}
            				}
            				else {
HXLINE(  67)					int _g98 = 0;
HXDLIN(  67)					int _g99 = (sides3 + 1);
HXDLIN(  67)					while((_g98 < _g99)){
HXLINE(  67)						_g98 = (_g98 + 1);
HXDLIN(  67)						int i33 = (_g98 - 1);
HXDLIN(  67)						Float nextX3 = (cx3 + (rx * ::Math_obj::cos((((( (Float)(i33) ) * theta1) + omega1) + ((Float)0.01)))));
HXDLIN(  67)						Float nextY3 = (cy3 + (ry * ::Math_obj::sin((((( (Float)(i33) ) * theta1) + omega1) + ((Float)0.01)))));
HXDLIN(  67)						{
HXLINE(  67)							 ::pi_xy::ImageStruct this110 = this75;
HXDLIN(  67)							bool hasHit3 = false;
HXDLIN(  67)							bool hasUndo3 = false;
HXDLIN(  67)							{
HXLINE(  67)								Float bx3 = lastX1;
HXDLIN(  67)								Float by3 = lastY1;
HXDLIN(  67)								Float cx5 = nextX3;
HXDLIN(  67)								Float cy5 = nextY3;
HXDLIN(  67)								bool adjustWinding3 = (((((cx3 * by3) - (bx3 * cy3)) + ((bx3 * cy5) - (cx5 * by3))) + ((cx5 * cy3) - (cx3 * cy5))) > 0);
HXDLIN(  67)								if (!(adjustWinding3)) {
HXLINE(  67)									Float bx_3 = bx3;
HXDLIN(  67)									Float by_3 = by3;
HXLINE(  25)									bx3 = cx5;
HXLINE(  26)									by3 = cy5;
HXLINE(  27)									cx5 = bx_3;
HXLINE(  28)									cy5 = by_3;
            								}
HXLINE(  67)								{
HXLINE(  67)									Float s03 = ((cy3 * cx5) - (cx3 * cy5));
HXDLIN(  67)									Float sx3 = (cy5 - cy3);
HXDLIN(  67)									Float sy3 = (cx3 - cx5);
HXDLIN(  67)									Float t03 = ((cx3 * by3) - (cy3 * bx3));
HXDLIN(  67)									Float tx3 = (cy3 - by3);
HXDLIN(  67)									Float ty3 = (bx3 - cx3);
HXDLIN(  67)									Float A3 = ((((-(by3) * cx5) + (cy3 * (-(bx3) + cx5))) + (cx3 * (by3 - cy5))) + (bx3 * cy5));
HXDLIN(  67)									 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  67)									if ((cx3 > bx3)) {
HXLINE(  67)										if ((cx3 > cx5)) {
HXLINE(  67)											int min12;
HXDLIN(  67)											if ((bx3 > cx5)) {
HXLINE(  67)												min12 = ::Math_obj::floor(cx5);
            											}
            											else {
HXLINE(  67)												min12 = ::Math_obj::floor(bx3);
            											}
HXDLIN(  67)											int ii_min24 = min12;
HXDLIN(  67)											int ii_max24 = ::Math_obj::ceil(cx3);
HXDLIN(  67)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            										}
            										else {
HXLINE(  67)											int ii_min25 = ::Math_obj::floor(bx3);
HXDLIN(  67)											int ii_max25 = ::Math_obj::ceil(cx5);
HXDLIN(  67)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            										}
            									}
            									else {
HXLINE(  67)										if ((bx3 > cx5)) {
HXLINE(  67)											int min13;
HXDLIN(  67)											if ((cx3 > cx5)) {
HXLINE(  67)												min13 = ::Math_obj::floor(cx5);
            											}
            											else {
HXLINE(  67)												min13 = ::Math_obj::ceil(cx3);
            											}
HXDLIN(  67)											int ii_min26 = min13;
HXDLIN(  67)											int ii_max26 = ::Math_obj::ceil(bx3);
HXDLIN(  67)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            										}
            										else {
HXLINE(  67)											int ii_min27 = ::Math_obj::floor(cx3);
HXDLIN(  67)											int ii_max27 = ::Math_obj::ceil(cx5);
HXDLIN(  67)											xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            										}
            									}
HXDLIN(  67)									 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  67)									if ((cy3 > by3)) {
HXLINE(  67)										if ((cy3 > cy5)) {
HXLINE(  67)											int min14;
HXDLIN(  67)											if ((by3 > cy5)) {
HXLINE(  67)												min14 = ::Math_obj::floor(cy5);
            											}
            											else {
HXLINE(  67)												min14 = ::Math_obj::floor(by3);
            											}
HXDLIN(  67)											int ii_min28 = min14;
HXDLIN(  67)											int ii_max28 = ::Math_obj::ceil(cy3);
HXDLIN(  67)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            										}
            										else {
HXLINE(  67)											int ii_min29 = ::Math_obj::floor(by3);
HXDLIN(  67)											int ii_max29 = ::Math_obj::ceil(cy5);
HXDLIN(  67)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            										}
            									}
            									else {
HXLINE(  67)										if ((by3 > cy5)) {
HXLINE(  67)											int min15;
HXDLIN(  67)											if ((cy3 > cy5)) {
HXLINE(  67)												min15 = ::Math_obj::floor(cy5);
            											}
            											else {
HXLINE(  67)												min15 = ::Math_obj::ceil(cy3);
            											}
HXDLIN(  67)											int ii_min30 = min15;
HXDLIN(  67)											int ii_max30 = ::Math_obj::ceil(by3);
HXDLIN(  67)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            										}
            										else {
HXLINE(  67)											int ii_min31 = ::Math_obj::floor(cy3);
HXDLIN(  67)											int ii_max31 = ::Math_obj::ceil(cy5);
HXDLIN(  67)											yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            										}
            									}
HXDLIN(  67)									 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  67)									if (hasUndo3) {
HXLINE(  67)										int width5 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  67)										int height5 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  67)										 ::Dynamic imageType5 = null();
HXDLIN(  67)										 ::pi_xy::ImageStruct this111 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  67)										if (::hx::IsNull( imageType5 )) {
HXLINE(  54)											imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            										}
HXLINE(  67)										::Dynamic undoImage10;
HXDLIN(  67)										switch((int)(( (int)(imageType5) ))){
            											case (int)0: {
HXLINE(  67)												 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  67)												 ::iterMagic::BytesImg b31 = byt5;
HXDLIN(  67)												{
HXLINE(  67)													b31->width = width5;
HXDLIN(  67)													b31->height = height5;
HXDLIN(  67)													b31->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  67)													b31->data = ::haxe::io::Bytes_obj::alloc((b31->length * 4));
HXDLIN(  67)													{
HXLINE(  67)														int len10 = b31->length;
HXDLIN(  67)														int w5 = 0;
HXDLIN(  67)														{
HXLINE(  67)															int _g100 = 0;
HXDLIN(  67)															int _g101 = b31->height;
HXDLIN(  67)															while((_g100 < _g101)){
HXLINE(  67)																_g100 = (_g100 + 1);
HXDLIN(  67)																int y14 = (_g100 - 1);
HXDLIN(  67)																{
HXLINE(  67)																	int _g102 = 0;
HXDLIN(  67)																	int _g103 = b31->width;
HXDLIN(  67)																	while((_g102 < _g103)){
HXLINE(  67)																		_g102 = (_g102 + 1);
HXDLIN(  67)																		int x14 = (_g102 - 1);
HXDLIN(  67)																		{
HXLINE(  67)																			w5 = (w5 + 1);
HXDLIN(  67)																			b31->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  67)																		{
HXLINE(  67)																			w5 = (w5 + 1);
HXDLIN(  67)																			b31->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  67)																		{
HXLINE(  67)																			w5 = (w5 + 1);
HXDLIN(  67)																			b31->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																		}
HXDLIN(  67)																		{
HXLINE(  67)																			w5 = (w5 + 1);
HXDLIN(  67)																			b31->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  67)												undoImage10 = b31;
            											}
            											break;
            											case (int)1: {
HXLINE(  67)												 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  67)												 ::iterMagic::ArrIntImg a18 = arrI5;
HXDLIN(  67)												{
HXLINE(  67)													a18->width = width5;
HXDLIN(  67)													a18->height = height5;
HXDLIN(  67)													a18->data = ::Array_obj< int >::__new(0);
HXDLIN(  67)													a18->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  67)													{
HXLINE(  67)														int _g104 = 0;
HXDLIN(  67)														int _g105 = a18->length;
HXDLIN(  67)														while((_g104 < _g105)){
HXLINE(  67)															_g104 = (_g104 + 1);
HXDLIN(  67)															int i34 = (_g104 - 1);
HXDLIN(  67)															a18->data[i34] = 0;
            														}
            													}
            												}
HXDLIN(  67)												undoImage10 = a18;
            											}
            											break;
            											case (int)2: {
HXLINE(  67)												 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  67)												 ::iterMagic::U32ArrImg b32 = u32a5;
HXDLIN(  67)												{
HXLINE(  67)													b32->width = width5;
HXDLIN(  67)													b32->height = height5;
HXDLIN(  67)													b32->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  67)													int size5 = (b32->length * 4);
HXDLIN(  67)													b32->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN(  67)													{
HXLINE(  67)														int _g106 = 0;
HXDLIN(  67)														int _g107 = b32->length;
HXDLIN(  67)														while((_g106 < _g107)){
HXLINE(  67)															_g106 = (_g106 + 1);
HXDLIN(  67)															int i35 = (_g106 - 1);
HXDLIN(  67)															{
HXLINE(  67)																 ::haxe::io::ArrayBufferViewImpl this112 = b32->data;
HXDLIN(  67)																bool undoImage11;
HXDLIN(  67)																if ((i35 >= 0)) {
HXLINE(  67)																	undoImage11 = (i35 < (this112->byteLength >> 2));
            																}
            																else {
HXLINE(  67)																	undoImage11 = false;
            																}
HXDLIN(  67)																if (undoImage11) {
HXLINE(  67)																	 ::haxe::io::Bytes _this5 = this112->bytes;
HXDLIN(  67)																	int pos5 = ((i35 << 2) + this112->byteOffset);
HXDLIN(  67)																	_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN(  67)																	_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN(  67)																	_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN(  67)																	_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
HXDLIN(  67)												undoImage10 = b32;
            											}
            											break;
            											case (int)3: {
HXLINE(  67)												 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  67)												 ::iterMagic::VecIntImg v11 = vec5;
HXDLIN(  67)												{
HXLINE(  67)													v11->width = width5;
HXDLIN(  67)													v11->height = height5;
HXDLIN(  67)													v11->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  67)													v11->data = ::Array_obj< int >::__new(v11->length);
HXDLIN(  67)													{
HXLINE(  67)														int _g108 = 0;
HXDLIN(  67)														int _g109 = v11->length;
HXDLIN(  67)														while((_g108 < _g109)){
HXLINE(  67)															_g108 = (_g108 + 1);
HXDLIN(  67)															int i36 = (_g108 - 1);
HXDLIN(  67)															v11->data->__unsafe_set(i36,0);
            														}
            													}
            												}
HXDLIN(  67)												undoImage10 = v11;
            											}
            											break;
            											case (int)4: {
HXLINE(  67)												 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  67)												 ::iterMagic::StackIntImg b33 = sInt5;
HXDLIN(  67)												{
HXLINE(  67)													b33->width = width5;
HXDLIN(  67)													b33->height = height5;
HXDLIN(  67)													b33->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  67)													b33->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  67)													{
HXLINE(  67)														int len11 = b33->length;
HXDLIN(  67)														 ::haxe::ds::GenericStack_Int d5 = b33->data;
HXDLIN(  67)														if (::hx::IsNull( d5->head )) {
HXLINE(  67)															int _g110 = 0;
HXDLIN(  67)															int _g111 = len11;
HXDLIN(  67)															while((_g110 < _g111)){
HXLINE(  67)																_g110 = (_g110 + 1);
HXDLIN(  67)																int i37 = (_g110 - 1);
HXDLIN(  67)																d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            															}
            														}
            														else {
HXLINE(  67)															int _g112 = 0;
HXDLIN(  67)															int _g113 = len11;
HXDLIN(  67)															while((_g112 < _g113)){
HXLINE(  67)																_g112 = (_g112 + 1);
HXDLIN(  67)																int i38 = (_g112 - 1);
HXDLIN(  67)																{
HXLINE(  67)																	 ::haxe::ds::GenericCell_Int l5 = b33->data->head;
HXDLIN(  67)																	 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN(  67)																	{
HXLINE(  67)																		int _g114 = 0;
HXDLIN(  67)																		int _g115 = i38;
HXDLIN(  67)																		while((_g114 < _g115)){
HXLINE(  67)																			_g114 = (_g114 + 1);
HXDLIN(  67)																			int i39 = (_g114 - 1);
HXLINE( 345)																			prev5 = l5;
HXLINE( 346)																			l5 = l5->next;
            																		}
            																	}
HXLINE(  67)																	if (::hx::IsNull( prev5 )) {
HXLINE(  67)																		b33->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  67)																		l5 = null();
            																	}
            																	else {
HXLINE(  67)																		prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  67)																		l5 = null();
            																	}
            																}
            															}
            														}
            													}
            												}
HXDLIN(  67)												undoImage10 = b33;
            											}
            											break;
            										}
HXDLIN(  67)										this111->image = undoImage10;
HXDLIN(  67)										this111->width = width5;
HXDLIN(  67)										this111->height = height5;
HXDLIN(  67)										this111->imageType = ( (int)(imageType5) );
HXDLIN(  67)										undoImage9 = this111;
HXDLIN(  67)										{
HXLINE(  67)											int rectLeft3 = xIter33->start;
HXDLIN(  67)											int rectTop3 = yIter33->start;
HXDLIN(  67)											int rectRight3 = xIter33->max;
HXDLIN(  67)											bool forceClear3 = false;
HXDLIN(  67)											{
HXLINE(  67)												int _g116 = rectTop3;
HXDLIN(  67)												int _g117 = yIter33->max;
HXDLIN(  67)												while((_g116 < _g117)){
HXLINE(  67)													_g116 = (_g116 + 1);
HXDLIN(  67)													int dy3 = (_g116 - 1);
HXDLIN(  67)													{
HXLINE(  67)														int _g118 = rectLeft3;
HXDLIN(  67)														int _g119 = rectRight3;
HXDLIN(  67)														while((_g118 < _g119)){
HXLINE(  67)															_g118 = (_g118 + 1);
HXDLIN(  67)															int dx3 = (_g118 - 1);
HXDLIN(  67)															::Dynamic this113 = this110->image;
HXDLIN(  67)															int index15;
HXDLIN(  67)															if (this110->useVirtualPos) {
HXLINE(  67)																index15 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this110->virtualY) * ( (Float)(this110->width) )) + dx3) - this110->virtualX));
            															}
            															else {
HXLINE(  67)																index15 = ::Std_obj::_hx_int(( (Float)(((dy3 * this110->width) + dx3)) ));
            															}
HXDLIN(  67)															int c12 = ::iterMagic::Iimg_obj::get(this113,index15);
HXDLIN(  67)															int col3;
HXDLIN(  67)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																col3 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            															}
            															else {
HXLINE(  67)																col3 = c12;
            															}
HXDLIN(  67)															bool _hx_tmp24;
HXDLIN(  67)															if (this110->useMask) {
HXLINE(  67)																_hx_tmp24 = ::hx::IsNotNull( this110->mask );
            															}
            															else {
HXLINE(  67)																_hx_tmp24 = false;
            															}
HXDLIN(  67)															if (_hx_tmp24) {
HXLINE(  67)																 ::pi_xy::ImageStruct this114 = this110->mask;
HXDLIN(  67)																::Dynamic this115 = this114->image;
HXDLIN(  67)																int index16;
HXDLIN(  67)																if (this114->useVirtualPos) {
HXLINE(  67)																	index16 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this114->virtualY) * ( (Float)(this114->width) )) + dx3) - this114->virtualX));
            																}
            																else {
HXLINE(  67)																	index16 = ::Std_obj::_hx_int(( (Float)(((dy3 * this114->width) + dx3)) ));
            																}
HXDLIN(  67)																int c13 = ::iterMagic::Iimg_obj::get(this115,index16);
HXDLIN(  67)																int v12;
HXDLIN(  67)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																	v12 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            																}
            																else {
HXLINE(  67)																	v12 = c13;
            																}
HXDLIN(  67)																int maskPixel3 = v12;
HXDLIN(  67)																int this116 = col3;
HXDLIN(  67)																if ((maskPixel3 == 0)) {
HXLINE(  67)																	col3 = this116;
            																}
            																else {
HXLINE(  67)																	Float m03;
HXDLIN(  67)																	int this117 = ((maskPixel3 >> 24) & 255);
HXDLIN(  67)																	if ((this117 == 0)) {
HXLINE(  67)																		m03 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		m03 = (( (Float)(this117) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float m13;
HXDLIN(  67)																	int this118 = ((maskPixel3 >> 16) & 255);
HXDLIN(  67)																	if ((this118 == 0)) {
HXLINE(  67)																		m13 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		m13 = (( (Float)(this118) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float m23;
HXDLIN(  67)																	int this119 = ((maskPixel3 >> 8) & 255);
HXDLIN(  67)																	if ((this119 == 0)) {
HXLINE(  67)																		m23 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		m23 = (( (Float)(this119) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float m33;
HXDLIN(  67)																	int this120 = (maskPixel3 & 255);
HXDLIN(  67)																	if ((this120 == 0)) {
HXLINE(  67)																		m33 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		m33 = (( (Float)(this120) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this116 >> 24) & 255)) )));
HXDLIN(  67)																	int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this116 >> 16) & 255)) )));
HXDLIN(  67)																	int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this116 >> 8) & 255)) )));
HXDLIN(  67)																	int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this116 & 255)) )));
HXDLIN(  67)																	col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  67)															if ((col3 != 0)) {
HXLINE(  67)																int x15 = (dx3 - rectLeft3);
HXDLIN(  67)																int y15 = (dy3 - rectTop3);
HXDLIN(  67)																int c14 = col3;
HXDLIN(  67)																bool _hx_tmp25;
HXDLIN(  67)																if ((((c14 >> 24) & 255) < 254)) {
HXLINE(  67)																	_hx_tmp25 = undoImage9->transparent;
            																}
            																else {
HXLINE(  67)																	_hx_tmp25 = false;
            																}
HXDLIN(  67)																if (_hx_tmp25) {
HXLINE(  67)																	int location6;
HXDLIN(  67)																	if (undoImage9->useVirtualPos) {
HXLINE(  67)																		location6 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x15) - undoImage9->virtualX));
            																	}
            																	else {
HXLINE(  67)																		location6 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage9->width) + x15)) ));
            																	}
HXDLIN(  67)																	int this121 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN(  67)																	int this122;
HXDLIN(  67)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																		this122 = ((((((this121 >> 24) & 255) << 24) | ((this121 & 255) << 16)) | (((this121 >> 8) & 255) << 8)) | ((this121 >> 16) & 255));
            																	}
            																	else {
HXLINE(  67)																		this122 = this121;
            																	}
HXDLIN(  67)																	Float a19;
HXDLIN(  67)																	int this123 = ((this122 >> 24) & 255);
HXDLIN(  67)																	if ((this123 == 0)) {
HXLINE(  67)																		a19 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		a19 = (( (Float)(this123) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float r16;
HXDLIN(  67)																	int this124 = ((this122 >> 16) & 255);
HXDLIN(  67)																	if ((this124 == 0)) {
HXLINE(  67)																		r16 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		r16 = (( (Float)(this124) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float g16;
HXDLIN(  67)																	int this125 = ((this122 >> 8) & 255);
HXDLIN(  67)																	if ((this125 == 0)) {
HXLINE(  67)																		g16 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		g16 = (( (Float)(this125) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float b112;
HXDLIN(  67)																	int this126 = (this122 & 255);
HXDLIN(  67)																	if ((this126 == 0)) {
HXLINE(  67)																		b112 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		b112 = (( (Float)(this126) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float a27;
HXDLIN(  67)																	int this127 = ((col3 >> 24) & 255);
HXDLIN(  67)																	if ((this127 == 0)) {
HXLINE(  67)																		a27 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		a27 = (( (Float)(this127) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float r26;
HXDLIN(  67)																	int this128 = ((col3 >> 16) & 255);
HXDLIN(  67)																	if ((this128 == 0)) {
HXLINE(  67)																		r26 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		r26 = (( (Float)(this128) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float g26;
HXDLIN(  67)																	int this129 = ((col3 >> 8) & 255);
HXDLIN(  67)																	if ((this129 == 0)) {
HXLINE(  67)																		g26 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		g26 = (( (Float)(this129) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float b210;
HXDLIN(  67)																	int this130 = (col3 & 255);
HXDLIN(  67)																	if ((this130 == 0)) {
HXLINE(  67)																		b210 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		b210 = (( (Float)(this130) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float a36 = (a19 * (( (Float)(1) ) - a27));
HXDLIN(  67)																	int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a27))));
HXDLIN(  67)																	int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a27))));
HXDLIN(  67)																	int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a36) + (b210 * a27))));
HXDLIN(  67)																	int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a27)));
HXDLIN(  67)																	int blended6 = ((((a20 << 24) | (r8 << 16)) | (g8 << 8)) | b34);
HXDLIN(  67)																	{
HXLINE(  67)																		int _hx_tmp26;
HXDLIN(  67)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp26 = blended6;
            																		}
HXDLIN(  67)																		::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            																	}
            																}
            																else {
HXLINE(  67)																	::Dynamic this131 = undoImage9->image;
HXDLIN(  67)																	int index17;
HXDLIN(  67)																	if (undoImage9->useVirtualPos) {
HXLINE(  67)																		index17 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x15) - undoImage9->virtualX));
            																	}
            																	else {
HXLINE(  67)																		index17 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage9->width) + x15)) ));
            																	}
HXDLIN(  67)																	int _hx_tmp27;
HXDLIN(  67)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																		_hx_tmp27 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp27 = c14;
            																	}
HXDLIN(  67)																	::iterMagic::Iimg_obj::set(this131,index17,_hx_tmp27);
            																}
            															}
            															else {
HXLINE(  67)																if (forceClear3) {
HXLINE(  67)																	::Dynamic this132 = undoImage9->image;
HXDLIN(  67)																	int x16 = (dx3 - rectLeft3);
HXDLIN(  67)																	int y16 = (dy3 - rectTop3);
HXDLIN(  67)																	int index18;
HXDLIN(  67)																	if (undoImage9->useVirtualPos) {
HXLINE(  67)																		index18 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x16) - undoImage9->virtualX));
            																	}
            																	else {
HXLINE(  67)																		index18 = ::Std_obj::_hx_int(( (Float)(((y16 * undoImage9->width) + x16)) ));
            																	}
HXDLIN(  67)																	::iterMagic::Iimg_obj::set(this132,index18,0);
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  67)									bool found3 = false;
HXDLIN(  67)									Float s3 = ((Float)0.);
HXDLIN(  67)									Float t3 = ((Float)0.);
HXDLIN(  67)									Float sxx3 = ((Float)0.);
HXDLIN(  67)									Float txx3 = ((Float)0.);
HXDLIN(  67)									{
HXLINE(  67)										int _g_min6 = xIter33->start;
HXDLIN(  67)										int _g_max6 = xIter33->max;
HXDLIN(  67)										while((_g_min6 < _g_max6)){
HXLINE(  67)											_g_min6 = (_g_min6 + 1);
HXDLIN(  67)											int x17 = (_g_min6 - 1);
HXLINE(  60)											sxx3 = (sx3 * ( (Float)(x17) ));
HXLINE(  61)											txx3 = (tx3 * ( (Float)(x17) ));
HXLINE(  62)											found3 = false;
HXLINE(  67)											{
HXLINE(  67)												int _g_min7 = yIter33->start;
HXDLIN(  67)												int _g_max7 = yIter33->max;
HXDLIN(  67)												while((_g_min7 < _g_max7)){
HXLINE(  67)													_g_min7 = (_g_min7 + 1);
HXDLIN(  67)													int y17 = (_g_min7 - 1);
HXLINE(  64)													s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y17) )));
HXLINE(  65)													t3 = ((t03 + txx3) + (ty3 * ( (Float)(y17) )));
HXLINE(  67)													bool _hx_tmp28;
HXDLIN(  67)													if (!((s3 <= 0))) {
HXLINE(  67)														_hx_tmp28 = (t3 <= 0);
            													}
            													else {
HXLINE(  67)														_hx_tmp28 = true;
            													}
HXDLIN(  67)													if (_hx_tmp28) {
HXLINE(  67)														if (found3) {
HXLINE(  67)															goto _hx_goto_197;
            														}
            													}
            													else {
HXLINE(  67)														if (((s3 + t3) < A3)) {
HXLINE(  67)															{
HXLINE(  67)																int c15 = color;
HXDLIN(  67)																bool _hx_tmp29;
HXDLIN(  67)																if ((((c15 >> 24) & 255) < 254)) {
HXLINE(  67)																	_hx_tmp29 = this110->transparent;
            																}
            																else {
HXLINE(  67)																	_hx_tmp29 = false;
            																}
HXDLIN(  67)																if (_hx_tmp29) {
HXLINE(  67)																	int location7;
HXDLIN(  67)																	if (this110->useVirtualPos) {
HXLINE(  67)																		location7 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - this110->virtualY) * ( (Float)(this110->width) )) + x17) - this110->virtualX));
            																	}
            																	else {
HXLINE(  67)																		location7 = ::Std_obj::_hx_int(( (Float)(((y17 * this110->width) + x17)) ));
            																	}
HXDLIN(  67)																	int this133 = ::iterMagic::Iimg_obj::get(this110->image,location7);
HXDLIN(  67)																	int this134;
HXDLIN(  67)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																		this134 = ((((((this133 >> 24) & 255) << 24) | ((this133 & 255) << 16)) | (((this133 >> 8) & 255) << 8)) | ((this133 >> 16) & 255));
            																	}
            																	else {
HXLINE(  67)																		this134 = this133;
            																	}
HXDLIN(  67)																	Float a110;
HXDLIN(  67)																	int this135 = ((this134 >> 24) & 255);
HXDLIN(  67)																	if ((this135 == 0)) {
HXLINE(  67)																		a110 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		a110 = (( (Float)(this135) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float r17;
HXDLIN(  67)																	int this136 = ((this134 >> 16) & 255);
HXDLIN(  67)																	if ((this136 == 0)) {
HXLINE(  67)																		r17 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		r17 = (( (Float)(this136) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float g17;
HXDLIN(  67)																	int this137 = ((this134 >> 8) & 255);
HXDLIN(  67)																	if ((this137 == 0)) {
HXLINE(  67)																		g17 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		g17 = (( (Float)(this137) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float b113;
HXDLIN(  67)																	int this138 = (this134 & 255);
HXDLIN(  67)																	if ((this138 == 0)) {
HXLINE(  67)																		b113 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		b113 = (( (Float)(this138) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float a28;
HXDLIN(  67)																	int this139 = ((color >> 24) & 255);
HXDLIN(  67)																	if ((this139 == 0)) {
HXLINE(  67)																		a28 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		a28 = (( (Float)(this139) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float r27;
HXDLIN(  67)																	int this140 = ((color >> 16) & 255);
HXDLIN(  67)																	if ((this140 == 0)) {
HXLINE(  67)																		r27 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		r27 = (( (Float)(this140) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float g27;
HXDLIN(  67)																	int this141 = ((color >> 8) & 255);
HXDLIN(  67)																	if ((this141 == 0)) {
HXLINE(  67)																		g27 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		g27 = (( (Float)(this141) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float b211;
HXDLIN(  67)																	int this142 = (color & 255);
HXDLIN(  67)																	if ((this142 == 0)) {
HXLINE(  67)																		b211 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		b211 = (( (Float)(this142) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float a37 = (a110 * (( (Float)(1) ) - a28));
HXDLIN(  67)																	int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a28))));
HXDLIN(  67)																	int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a28))));
HXDLIN(  67)																	int b35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a37) + (b211 * a28))));
HXDLIN(  67)																	int a29 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a28)));
HXDLIN(  67)																	int blended7 = ((((a29 << 24) | (r9 << 16)) | (g9 << 8)) | b35);
HXDLIN(  67)																	{
HXLINE(  67)																		int _hx_tmp30;
HXDLIN(  67)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			_hx_tmp30 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp30 = blended7;
            																		}
HXDLIN(  67)																		::iterMagic::Iimg_obj::set(this110->image,location7,_hx_tmp30);
            																	}
            																}
            																else {
HXLINE(  67)																	::Dynamic this143 = this110->image;
HXDLIN(  67)																	int index19;
HXDLIN(  67)																	if (this110->useVirtualPos) {
HXLINE(  67)																		index19 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - this110->virtualY) * ( (Float)(this110->width) )) + x17) - this110->virtualX));
            																	}
            																	else {
HXLINE(  67)																		index19 = ::Std_obj::_hx_int(( (Float)(((y17 * this110->width) + x17)) ));
            																	}
HXDLIN(  67)																	int _hx_tmp31;
HXDLIN(  67)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																		_hx_tmp31 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp31 = c15;
            																	}
HXDLIN(  67)																	::iterMagic::Iimg_obj::set(this143,index19,_hx_tmp31);
            																}
            															}
HXLINE(  73)															found3 = true;
            														}
            														else {
HXLINE(  67)															if (found3) {
HXLINE(  67)																goto _hx_goto_197;
            															}
            														}
            													}
            												}
            												_hx_goto_197:;
            											}
            										}
            									}
HXDLIN(  67)									if ((hasHit3 == true)) {
HXLINE(  67)										 ::pi_xy::algo::HitTri v13 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx3,cy3,bx3,by3,cx5,cy5,true);
HXDLIN(  67)										if (hasUndo3) {
HXLINE(  67)											v13->undoImage = undoImage9;
HXDLIN(  67)											v13->undoX = xIter33->start;
HXDLIN(  67)											v13->undoY = yIter33->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  59)						lastX1 = nextX3;
HXLINE(  60)						lastY1 = nextY3;
            					}
            				}
            			}
            		}
HXLINE(  70)		Float rx2 = (rx - drx);
HXLINE(  71)		Float ry2 = (ry - dry);
HXLINE(  72)		if ((rx > ry)) {
HXLINE(  72)			rSmall = ry;
            		}
            		else {
HXLINE(  72)			rSmall = rx;
            		}
HXLINE(  74)		if (::hx::IsEq( phi,0 )) {
HXLINE(  75)			{
HXLINE(  75)				 ::pi_xy::ImageStruct this144 = temp;
HXDLIN(  75)				 ::Dynamic phi5 = phi;
HXDLIN(  75)				 ::Dynamic sides4 = noSides;
HXLINE(  79)				if (::hx::IsNull( sides4 )) {
HXLINE(  79)					sides4 = 36;
            				}
HXLINE(  78)				if (::hx::IsNull( phi5 )) {
HXLINE(  78)					phi5 = ((Float)0.);
            				}
HXLINE(  75)				{
HXLINE(  75)					 ::Dynamic phi6 = phi5;
HXDLIN(  75)					 ::Dynamic sides5 = sides4;
HXDLIN(  75)					if (::hx::IsNull( sides5 )) {
HXLINE( 212)						sides5 = 36;
            					}
HXLINE(  75)					if (::hx::IsNull( phi6 )) {
HXLINE( 211)						phi6 = ((Float)0.);
            					}
HXLINE(  75)					Float theta2 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides5) ));
HXDLIN(  75)					Float omega2;
HXDLIN(  75)					omega2 = ((Float)0.);
HXDLIN(  75)					Float lastX2 = ((Float)0.);
HXDLIN(  75)					Float lastY2 = ((Float)0.);
HXDLIN(  75)					if (::hx::IsNotEq( phi6,0 )) {
HXLINE(  35)						lastX2 = ((((rx2 * ::Math_obj::cos(((( (Float)(sides5) ) * theta2) + omega2))) * ::Math_obj::cos(( (Float)(phi6) ))) - ((ry2 * ::Math_obj::sin(((( (Float)(sides5) ) * theta2) + omega2))) * ::Math_obj::sin(( (Float)(phi6) )))) + rx);
HXLINE(  36)						lastY2 = ((((rx2 * ::Math_obj::cos(((( (Float)(sides5) ) * theta2) + omega2))) * ::Math_obj::sin(( (Float)(phi6) ))) + ((ry2 * ::Math_obj::sin(((( (Float)(sides5) ) * theta2) + omega2))) * ::Math_obj::cos(( (Float)(phi6) )))) + ry);
            					}
            					else {
HXLINE(  38)						lastX2 = (rx + (rx2 * ::Math_obj::cos(((( (Float)(sides5) ) * theta2) + omega2))));
HXLINE(  39)						lastY2 = (ry + (ry2 * ::Math_obj::sin(((( (Float)(sides5) ) * theta2) + omega2))));
            					}
HXLINE(  75)					if (::hx::IsNotEq( phi6,0 )) {
HXLINE(  75)						Float cphi2 = ::Math_obj::cos(( (Float)(phi6) ));
HXDLIN(  75)						Float sphi2 = ::Math_obj::sin(( (Float)(phi6) ));
HXDLIN(  75)						{
HXLINE(  75)							int _g120 = 0;
HXDLIN(  75)							int _g121 = (sides5 + 1);
HXDLIN(  75)							while((_g120 < _g121)){
HXLINE(  75)								_g120 = (_g120 + 1);
HXDLIN(  75)								int i40 = (_g120 - 1);
HXDLIN(  75)								Float stheta2 = ::Math_obj::sin((((( (Float)(i40) ) * theta2) + omega2) + ((Float)0.01)));
HXDLIN(  75)								Float ctheta2 = ::Math_obj::cos((((( (Float)(i40) ) * theta2) + omega2) + ((Float)0.01)));
HXDLIN(  75)								Float nextX4 = ((((rx2 * ctheta2) * cphi2) - ((ry2 * stheta2) * sphi2)) + rx);
HXDLIN(  75)								Float nextY4 = ((((rx2 * ctheta2) * sphi2) + ((ry2 * stheta2) * cphi2)) + ry);
HXDLIN(  75)								{
HXLINE(  75)									 ::pi_xy::ImageStruct this145 = this144;
HXDLIN(  75)									bool hasHit4 = false;
HXDLIN(  75)									bool hasUndo4 = false;
HXDLIN(  75)									{
HXLINE(  75)										Float bx4 = lastX2;
HXDLIN(  75)										Float by4 = lastY2;
HXDLIN(  75)										Float cx6 = nextX4;
HXDLIN(  75)										Float cy6 = nextY4;
HXDLIN(  75)										bool adjustWinding4 = (((((rx * by4) - (bx4 * ry)) + ((bx4 * cy6) - (cx6 * by4))) + ((cx6 * ry) - (rx * cy6))) > 0);
HXDLIN(  75)										if (!(adjustWinding4)) {
HXLINE(  75)											Float bx_4 = bx4;
HXDLIN(  75)											Float by_4 = by4;
HXLINE(  25)											bx4 = cx6;
HXLINE(  26)											by4 = cy6;
HXLINE(  27)											cx6 = bx_4;
HXLINE(  28)											cy6 = by_4;
            										}
HXLINE(  75)										{
HXLINE(  75)											Float s04 = ((ry * cx6) - (rx * cy6));
HXDLIN(  75)											Float sx4 = (cy6 - ry);
HXDLIN(  75)											Float sy4 = (rx - cx6);
HXDLIN(  75)											Float t04 = ((rx * by4) - (ry * bx4));
HXDLIN(  75)											Float tx4 = (ry - by4);
HXDLIN(  75)											Float ty4 = (bx4 - rx);
HXDLIN(  75)											Float A4 = ((((-(by4) * cx6) + (ry * (-(bx4) + cx6))) + (rx * (by4 - cy6))) + (bx4 * cy6));
HXDLIN(  75)											 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN(  75)											if ((rx > bx4)) {
HXLINE(  75)												if ((rx > cx6)) {
HXLINE(  75)													int min16;
HXDLIN(  75)													if ((bx4 > cx6)) {
HXLINE(  75)														min16 = ::Math_obj::floor(cx6);
            													}
            													else {
HXLINE(  75)														min16 = ::Math_obj::floor(bx4);
            													}
HXDLIN(  75)													int ii_min32 = min16;
HXDLIN(  75)													int ii_max32 = ::Math_obj::ceil(rx);
HXDLIN(  75)													xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            												}
            												else {
HXLINE(  75)													int ii_min33 = ::Math_obj::floor(bx4);
HXDLIN(  75)													int ii_max33 = ::Math_obj::ceil(cx6);
HXDLIN(  75)													xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            												}
            											}
            											else {
HXLINE(  75)												if ((bx4 > cx6)) {
HXLINE(  75)													int min17;
HXDLIN(  75)													if ((rx > cx6)) {
HXLINE(  75)														min17 = ::Math_obj::floor(cx6);
            													}
            													else {
HXLINE(  75)														min17 = ::Math_obj::ceil(rx);
            													}
HXDLIN(  75)													int ii_min34 = min17;
HXDLIN(  75)													int ii_max34 = ::Math_obj::ceil(bx4);
HXDLIN(  75)													xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            												}
            												else {
HXLINE(  75)													int ii_min35 = ::Math_obj::floor(rx);
HXDLIN(  75)													int ii_max35 = ::Math_obj::ceil(cx6);
HXDLIN(  75)													xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            												}
            											}
HXDLIN(  75)											 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN(  75)											if ((ry > by4)) {
HXLINE(  75)												if ((ry > cy6)) {
HXLINE(  75)													int min18;
HXDLIN(  75)													if ((by4 > cy6)) {
HXLINE(  75)														min18 = ::Math_obj::floor(cy6);
            													}
            													else {
HXLINE(  75)														min18 = ::Math_obj::floor(by4);
            													}
HXDLIN(  75)													int ii_min36 = min18;
HXDLIN(  75)													int ii_max36 = ::Math_obj::ceil(ry);
HXDLIN(  75)													yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            												}
            												else {
HXLINE(  75)													int ii_min37 = ::Math_obj::floor(by4);
HXDLIN(  75)													int ii_max37 = ::Math_obj::ceil(cy6);
HXDLIN(  75)													yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            												}
            											}
            											else {
HXLINE(  75)												if ((by4 > cy6)) {
HXLINE(  75)													int min19;
HXDLIN(  75)													if ((ry > cy6)) {
HXLINE(  75)														min19 = ::Math_obj::floor(cy6);
            													}
            													else {
HXLINE(  75)														min19 = ::Math_obj::ceil(ry);
            													}
HXDLIN(  75)													int ii_min38 = min19;
HXDLIN(  75)													int ii_max38 = ::Math_obj::ceil(by4);
HXDLIN(  75)													yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            												}
            												else {
HXLINE(  75)													int ii_min39 = ::Math_obj::floor(ry);
HXDLIN(  75)													int ii_max39 = ::Math_obj::ceil(cy6);
HXDLIN(  75)													yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            												}
            											}
HXDLIN(  75)											 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN(  75)											if (hasUndo4) {
HXLINE(  75)												int width6 = ((xIter34->max - xIter34->start) + 1);
HXDLIN(  75)												int height6 = ((yIter34->max - yIter34->start) + 1);
HXDLIN(  75)												 ::Dynamic imageType6 = null();
HXDLIN(  75)												 ::pi_xy::ImageStruct this146 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  75)												if (::hx::IsNull( imageType6 )) {
HXLINE(  54)													imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE(  75)												::Dynamic undoImage13;
HXDLIN(  75)												switch((int)(( (int)(imageType6) ))){
            													case (int)0: {
HXLINE(  75)														 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  75)														 ::iterMagic::BytesImg b36 = byt6;
HXDLIN(  75)														{
HXLINE(  75)															b36->width = width6;
HXDLIN(  75)															b36->height = height6;
HXDLIN(  75)															b36->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  75)															b36->data = ::haxe::io::Bytes_obj::alloc((b36->length * 4));
HXDLIN(  75)															{
HXLINE(  75)																int len12 = b36->length;
HXDLIN(  75)																int w6 = 0;
HXDLIN(  75)																{
HXLINE(  75)																	int _g122 = 0;
HXDLIN(  75)																	int _g123 = b36->height;
HXDLIN(  75)																	while((_g122 < _g123)){
HXLINE(  75)																		_g122 = (_g122 + 1);
HXDLIN(  75)																		int y18 = (_g122 - 1);
HXDLIN(  75)																		{
HXLINE(  75)																			int _g124 = 0;
HXDLIN(  75)																			int _g125 = b36->width;
HXDLIN(  75)																			while((_g124 < _g125)){
HXLINE(  75)																				_g124 = (_g124 + 1);
HXDLIN(  75)																				int x18 = (_g124 - 1);
HXDLIN(  75)																				{
HXLINE(  75)																					w6 = (w6 + 1);
HXDLIN(  75)																					b36->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  75)																				{
HXLINE(  75)																					w6 = (w6 + 1);
HXDLIN(  75)																					b36->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  75)																				{
HXLINE(  75)																					w6 = (w6 + 1);
HXDLIN(  75)																					b36->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  75)																				{
HXLINE(  75)																					w6 = (w6 + 1);
HXDLIN(  75)																					b36->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  75)														undoImage13 = b36;
            													}
            													break;
            													case (int)1: {
HXLINE(  75)														 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  75)														 ::iterMagic::ArrIntImg a30 = arrI6;
HXDLIN(  75)														{
HXLINE(  75)															a30->width = width6;
HXDLIN(  75)															a30->height = height6;
HXDLIN(  75)															a30->data = ::Array_obj< int >::__new(0);
HXDLIN(  75)															a30->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  75)															{
HXLINE(  75)																int _g126 = 0;
HXDLIN(  75)																int _g127 = a30->length;
HXDLIN(  75)																while((_g126 < _g127)){
HXLINE(  75)																	_g126 = (_g126 + 1);
HXDLIN(  75)																	int i41 = (_g126 - 1);
HXDLIN(  75)																	a30->data[i41] = 0;
            																}
            															}
            														}
HXDLIN(  75)														undoImage13 = a30;
            													}
            													break;
            													case (int)2: {
HXLINE(  75)														 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  75)														 ::iterMagic::U32ArrImg b37 = u32a6;
HXDLIN(  75)														{
HXLINE(  75)															b37->width = width6;
HXDLIN(  75)															b37->height = height6;
HXDLIN(  75)															b37->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  75)															int size6 = (b37->length * 4);
HXDLIN(  75)															b37->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN(  75)															{
HXLINE(  75)																int _g128 = 0;
HXDLIN(  75)																int _g129 = b37->length;
HXDLIN(  75)																while((_g128 < _g129)){
HXLINE(  75)																	_g128 = (_g128 + 1);
HXDLIN(  75)																	int i42 = (_g128 - 1);
HXDLIN(  75)																	{
HXLINE(  75)																		 ::haxe::io::ArrayBufferViewImpl this147 = b37->data;
HXDLIN(  75)																		bool undoImage14;
HXDLIN(  75)																		if ((i42 >= 0)) {
HXLINE(  75)																			undoImage14 = (i42 < (this147->byteLength >> 2));
            																		}
            																		else {
HXLINE(  75)																			undoImage14 = false;
            																		}
HXDLIN(  75)																		if (undoImage14) {
HXLINE(  75)																			 ::haxe::io::Bytes _this6 = this147->bytes;
HXDLIN(  75)																			int pos6 = ((i42 << 2) + this147->byteOffset);
HXDLIN(  75)																			_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN(  75)																			_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN(  75)																			_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN(  75)																			_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  75)														undoImage13 = b37;
            													}
            													break;
            													case (int)3: {
HXLINE(  75)														 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  75)														 ::iterMagic::VecIntImg v14 = vec6;
HXDLIN(  75)														{
HXLINE(  75)															v14->width = width6;
HXDLIN(  75)															v14->height = height6;
HXDLIN(  75)															v14->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  75)															v14->data = ::Array_obj< int >::__new(v14->length);
HXDLIN(  75)															{
HXLINE(  75)																int _g130 = 0;
HXDLIN(  75)																int _g131 = v14->length;
HXDLIN(  75)																while((_g130 < _g131)){
HXLINE(  75)																	_g130 = (_g130 + 1);
HXDLIN(  75)																	int i43 = (_g130 - 1);
HXDLIN(  75)																	v14->data->__unsafe_set(i43,0);
            																}
            															}
            														}
HXDLIN(  75)														undoImage13 = v14;
            													}
            													break;
            													case (int)4: {
HXLINE(  75)														 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  75)														 ::iterMagic::StackIntImg b38 = sInt6;
HXDLIN(  75)														{
HXLINE(  75)															b38->width = width6;
HXDLIN(  75)															b38->height = height6;
HXDLIN(  75)															b38->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  75)															b38->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  75)															{
HXLINE(  75)																int len13 = b38->length;
HXDLIN(  75)																 ::haxe::ds::GenericStack_Int d6 = b38->data;
HXDLIN(  75)																if (::hx::IsNull( d6->head )) {
HXLINE(  75)																	int _g132 = 0;
HXDLIN(  75)																	int _g133 = len13;
HXDLIN(  75)																	while((_g132 < _g133)){
HXLINE(  75)																		_g132 = (_g132 + 1);
HXDLIN(  75)																		int i44 = (_g132 - 1);
HXDLIN(  75)																		d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            																	}
            																}
            																else {
HXLINE(  75)																	int _g134 = 0;
HXDLIN(  75)																	int _g135 = len13;
HXDLIN(  75)																	while((_g134 < _g135)){
HXLINE(  75)																		_g134 = (_g134 + 1);
HXDLIN(  75)																		int i45 = (_g134 - 1);
HXDLIN(  75)																		{
HXLINE(  75)																			 ::haxe::ds::GenericCell_Int l6 = b38->data->head;
HXDLIN(  75)																			 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN(  75)																			{
HXLINE(  75)																				int _g136 = 0;
HXDLIN(  75)																				int _g137 = i45;
HXDLIN(  75)																				while((_g136 < _g137)){
HXLINE(  75)																					_g136 = (_g136 + 1);
HXDLIN(  75)																					int i46 = (_g136 - 1);
HXLINE( 345)																					prev6 = l6;
HXLINE( 346)																					l6 = l6->next;
            																				}
            																			}
HXLINE(  75)																			if (::hx::IsNull( prev6 )) {
HXLINE(  75)																				b38->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  75)																				l6 = null();
            																			}
            																			else {
HXLINE(  75)																				prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  75)																				l6 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  75)														undoImage13 = b38;
            													}
            													break;
            												}
HXDLIN(  75)												this146->image = undoImage13;
HXDLIN(  75)												this146->width = width6;
HXDLIN(  75)												this146->height = height6;
HXDLIN(  75)												this146->imageType = ( (int)(imageType6) );
HXDLIN(  75)												undoImage12 = this146;
HXDLIN(  75)												{
HXLINE(  75)													int rectLeft4 = xIter34->start;
HXDLIN(  75)													int rectTop4 = yIter34->start;
HXDLIN(  75)													int rectRight4 = xIter34->max;
HXDLIN(  75)													bool forceClear4 = false;
HXDLIN(  75)													{
HXLINE(  75)														int _g138 = rectTop4;
HXDLIN(  75)														int _g139 = yIter34->max;
HXDLIN(  75)														while((_g138 < _g139)){
HXLINE(  75)															_g138 = (_g138 + 1);
HXDLIN(  75)															int dy4 = (_g138 - 1);
HXDLIN(  75)															{
HXLINE(  75)																int _g140 = rectLeft4;
HXDLIN(  75)																int _g141 = rectRight4;
HXDLIN(  75)																while((_g140 < _g141)){
HXLINE(  75)																	_g140 = (_g140 + 1);
HXDLIN(  75)																	int dx4 = (_g140 - 1);
HXDLIN(  75)																	::Dynamic this148 = this145->image;
HXDLIN(  75)																	int index20;
HXDLIN(  75)																	if (this145->useVirtualPos) {
HXLINE(  75)																		index20 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this145->virtualY) * ( (Float)(this145->width) )) + dx4) - this145->virtualX));
            																	}
            																	else {
HXLINE(  75)																		index20 = ::Std_obj::_hx_int(( (Float)(((dy4 * this145->width) + dx4)) ));
            																	}
HXDLIN(  75)																	int c16 = ::iterMagic::Iimg_obj::get(this148,index20);
HXDLIN(  75)																	int col4;
HXDLIN(  75)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																		col4 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            																	}
            																	else {
HXLINE(  75)																		col4 = c16;
            																	}
HXDLIN(  75)																	bool _hx_tmp32;
HXDLIN(  75)																	if (this145->useMask) {
HXLINE(  75)																		_hx_tmp32 = ::hx::IsNotNull( this145->mask );
            																	}
            																	else {
HXLINE(  75)																		_hx_tmp32 = false;
            																	}
HXDLIN(  75)																	if (_hx_tmp32) {
HXLINE(  75)																		 ::pi_xy::ImageStruct this149 = this145->mask;
HXDLIN(  75)																		::Dynamic this150 = this149->image;
HXDLIN(  75)																		int index21;
HXDLIN(  75)																		if (this149->useVirtualPos) {
HXLINE(  75)																			index21 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this149->virtualY) * ( (Float)(this149->width) )) + dx4) - this149->virtualX));
            																		}
            																		else {
HXLINE(  75)																			index21 = ::Std_obj::_hx_int(( (Float)(((dy4 * this149->width) + dx4)) ));
            																		}
HXDLIN(  75)																		int c17 = ::iterMagic::Iimg_obj::get(this150,index21);
HXDLIN(  75)																		int v15;
HXDLIN(  75)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																			v15 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            																		}
            																		else {
HXLINE(  75)																			v15 = c17;
            																		}
HXDLIN(  75)																		int maskPixel4 = v15;
HXDLIN(  75)																		int this151 = col4;
HXDLIN(  75)																		if ((maskPixel4 == 0)) {
HXLINE(  75)																			col4 = this151;
            																		}
            																		else {
HXLINE(  75)																			Float m04;
HXDLIN(  75)																			int this152 = ((maskPixel4 >> 24) & 255);
HXDLIN(  75)																			if ((this152 == 0)) {
HXLINE(  75)																				m04 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				m04 = (( (Float)(this152) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float m14;
HXDLIN(  75)																			int this153 = ((maskPixel4 >> 16) & 255);
HXDLIN(  75)																			if ((this153 == 0)) {
HXLINE(  75)																				m14 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				m14 = (( (Float)(this153) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float m24;
HXDLIN(  75)																			int this154 = ((maskPixel4 >> 8) & 255);
HXDLIN(  75)																			if ((this154 == 0)) {
HXLINE(  75)																				m24 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				m24 = (( (Float)(this154) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float m34;
HXDLIN(  75)																			int this155 = (maskPixel4 & 255);
HXDLIN(  75)																			if ((this155 == 0)) {
HXLINE(  75)																				m34 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				m34 = (( (Float)(this155) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this151 >> 24) & 255)) )));
HXDLIN(  75)																			int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this151 >> 16) & 255)) )));
HXDLIN(  75)																			int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this151 >> 8) & 255)) )));
HXDLIN(  75)																			int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this151 & 255)) )));
HXDLIN(  75)																			col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN(  75)																	if ((col4 != 0)) {
HXLINE(  75)																		int x19 = (dx4 - rectLeft4);
HXDLIN(  75)																		int y19 = (dy4 - rectTop4);
HXDLIN(  75)																		int c18 = col4;
HXDLIN(  75)																		bool _hx_tmp33;
HXDLIN(  75)																		if ((((c18 >> 24) & 255) < 254)) {
HXLINE(  75)																			_hx_tmp33 = undoImage12->transparent;
            																		}
            																		else {
HXLINE(  75)																			_hx_tmp33 = false;
            																		}
HXDLIN(  75)																		if (_hx_tmp33) {
HXLINE(  75)																			int location8;
HXDLIN(  75)																			if (undoImage12->useVirtualPos) {
HXLINE(  75)																				location8 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x19) - undoImage12->virtualX));
            																			}
            																			else {
HXLINE(  75)																				location8 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage12->width) + x19)) ));
            																			}
HXDLIN(  75)																			int this156 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN(  75)																			int this157;
HXDLIN(  75)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																				this157 = ((((((this156 >> 24) & 255) << 24) | ((this156 & 255) << 16)) | (((this156 >> 8) & 255) << 8)) | ((this156 >> 16) & 255));
            																			}
            																			else {
HXLINE(  75)																				this157 = this156;
            																			}
HXDLIN(  75)																			Float a111;
HXDLIN(  75)																			int this158 = ((this157 >> 24) & 255);
HXDLIN(  75)																			if ((this158 == 0)) {
HXLINE(  75)																				a111 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				a111 = (( (Float)(this158) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float r18;
HXDLIN(  75)																			int this159 = ((this157 >> 16) & 255);
HXDLIN(  75)																			if ((this159 == 0)) {
HXLINE(  75)																				r18 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				r18 = (( (Float)(this159) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float g18;
HXDLIN(  75)																			int this160 = ((this157 >> 8) & 255);
HXDLIN(  75)																			if ((this160 == 0)) {
HXLINE(  75)																				g18 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				g18 = (( (Float)(this160) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float b114;
HXDLIN(  75)																			int this161 = (this157 & 255);
HXDLIN(  75)																			if ((this161 == 0)) {
HXLINE(  75)																				b114 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				b114 = (( (Float)(this161) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float a210;
HXDLIN(  75)																			int this162 = ((col4 >> 24) & 255);
HXDLIN(  75)																			if ((this162 == 0)) {
HXLINE(  75)																				a210 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				a210 = (( (Float)(this162) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float r28;
HXDLIN(  75)																			int this163 = ((col4 >> 16) & 255);
HXDLIN(  75)																			if ((this163 == 0)) {
HXLINE(  75)																				r28 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				r28 = (( (Float)(this163) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float g28;
HXDLIN(  75)																			int this164 = ((col4 >> 8) & 255);
HXDLIN(  75)																			if ((this164 == 0)) {
HXLINE(  75)																				g28 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				g28 = (( (Float)(this164) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float b212;
HXDLIN(  75)																			int this165 = (col4 & 255);
HXDLIN(  75)																			if ((this165 == 0)) {
HXLINE(  75)																				b212 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				b212 = (( (Float)(this165) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float a38 = (a111 * (( (Float)(1) ) - a210));
HXDLIN(  75)																			int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r28 * a210))));
HXDLIN(  75)																			int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g28 * a210))));
HXDLIN(  75)																			int b39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a38) + (b212 * a210))));
HXDLIN(  75)																			int a39 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a210)));
HXDLIN(  75)																			int blended8 = ((((a39 << 24) | (r10 << 16)) | (g10 << 8)) | b39);
HXDLIN(  75)																			{
HXLINE(  75)																				int _hx_tmp34;
HXDLIN(  75)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																					_hx_tmp34 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            																				}
            																				else {
HXLINE(  75)																					_hx_tmp34 = blended8;
            																				}
HXDLIN(  75)																				::iterMagic::Iimg_obj::set(undoImage12->image,location8,_hx_tmp34);
            																			}
            																		}
            																		else {
HXLINE(  75)																			::Dynamic this166 = undoImage12->image;
HXDLIN(  75)																			int index22;
HXDLIN(  75)																			if (undoImage12->useVirtualPos) {
HXLINE(  75)																				index22 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x19) - undoImage12->virtualX));
            																			}
            																			else {
HXLINE(  75)																				index22 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage12->width) + x19)) ));
            																			}
HXDLIN(  75)																			int _hx_tmp35;
HXDLIN(  75)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																				_hx_tmp35 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            																			}
            																			else {
HXLINE(  75)																				_hx_tmp35 = c18;
            																			}
HXDLIN(  75)																			::iterMagic::Iimg_obj::set(this166,index22,_hx_tmp35);
            																		}
            																	}
            																	else {
HXLINE(  75)																		if (forceClear4) {
HXLINE(  75)																			::Dynamic this167 = undoImage12->image;
HXDLIN(  75)																			int x20 = (dx4 - rectLeft4);
HXDLIN(  75)																			int y20 = (dy4 - rectTop4);
HXDLIN(  75)																			int index23;
HXDLIN(  75)																			if (undoImage12->useVirtualPos) {
HXLINE(  75)																				index23 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x20) - undoImage12->virtualX));
            																			}
            																			else {
HXLINE(  75)																				index23 = ::Std_obj::_hx_int(( (Float)(((y20 * undoImage12->width) + x20)) ));
            																			}
HXDLIN(  75)																			::iterMagic::Iimg_obj::set(this167,index23,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  75)											bool found4 = false;
HXDLIN(  75)											Float s4 = ((Float)0.);
HXDLIN(  75)											Float t4 = ((Float)0.);
HXDLIN(  75)											Float sxx4 = ((Float)0.);
HXDLIN(  75)											Float txx4 = ((Float)0.);
HXDLIN(  75)											{
HXLINE(  75)												int _g_min8 = xIter34->start;
HXDLIN(  75)												int _g_max8 = xIter34->max;
HXDLIN(  75)												while((_g_min8 < _g_max8)){
HXLINE(  75)													_g_min8 = (_g_min8 + 1);
HXDLIN(  75)													int x21 = (_g_min8 - 1);
HXLINE(  60)													sxx4 = (sx4 * ( (Float)(x21) ));
HXLINE(  61)													txx4 = (tx4 * ( (Float)(x21) ));
HXLINE(  62)													found4 = false;
HXLINE(  75)													{
HXLINE(  75)														int _g_min9 = yIter34->start;
HXDLIN(  75)														int _g_max9 = yIter34->max;
HXDLIN(  75)														while((_g_min9 < _g_max9)){
HXLINE(  75)															_g_min9 = (_g_min9 + 1);
HXDLIN(  75)															int y21 = (_g_min9 - 1);
HXLINE(  64)															s4 = ((s04 + sxx4) + (sy4 * ( (Float)(y21) )));
HXLINE(  65)															t4 = ((t04 + txx4) + (ty4 * ( (Float)(y21) )));
HXLINE(  75)															bool _hx_tmp36;
HXDLIN(  75)															if (!((s4 <= 0))) {
HXLINE(  75)																_hx_tmp36 = (t4 <= 0);
            															}
            															else {
HXLINE(  75)																_hx_tmp36 = true;
            															}
HXDLIN(  75)															if (_hx_tmp36) {
HXLINE(  75)																if (found4) {
HXLINE(  75)																	goto _hx_goto_210;
            																}
            															}
            															else {
HXLINE(  75)																if (((s4 + t4) < A4)) {
HXLINE(  75)																	{
HXLINE(  75)																		int c19 = 0;
HXDLIN(  75)																		bool _hx_tmp37;
HXDLIN(  75)																		if ((((c19 >> 24) & 255) < 254)) {
HXLINE(  75)																			_hx_tmp37 = this145->transparent;
            																		}
            																		else {
HXLINE(  75)																			_hx_tmp37 = false;
            																		}
HXDLIN(  75)																		if (_hx_tmp37) {
HXLINE(  75)																			int location9;
HXDLIN(  75)																			if (this145->useVirtualPos) {
HXLINE(  75)																				location9 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - this145->virtualY) * ( (Float)(this145->width) )) + x21) - this145->virtualX));
            																			}
            																			else {
HXLINE(  75)																				location9 = ::Std_obj::_hx_int(( (Float)(((y21 * this145->width) + x21)) ));
            																			}
HXDLIN(  75)																			int this168 = ::iterMagic::Iimg_obj::get(this145->image,location9);
HXDLIN(  75)																			int this169;
HXDLIN(  75)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																				this169 = ((((((this168 >> 24) & 255) << 24) | ((this168 & 255) << 16)) | (((this168 >> 8) & 255) << 8)) | ((this168 >> 16) & 255));
            																			}
            																			else {
HXLINE(  75)																				this169 = this168;
            																			}
HXDLIN(  75)																			Float a112;
HXDLIN(  75)																			int this170 = ((this169 >> 24) & 255);
HXDLIN(  75)																			if ((this170 == 0)) {
HXLINE(  75)																				a112 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				a112 = (( (Float)(this170) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float r19;
HXDLIN(  75)																			int this171 = ((this169 >> 16) & 255);
HXDLIN(  75)																			if ((this171 == 0)) {
HXLINE(  75)																				r19 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				r19 = (( (Float)(this171) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float g19;
HXDLIN(  75)																			int this172 = ((this169 >> 8) & 255);
HXDLIN(  75)																			if ((this172 == 0)) {
HXLINE(  75)																				g19 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				g19 = (( (Float)(this172) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float b115;
HXDLIN(  75)																			int this173 = (this169 & 255);
HXDLIN(  75)																			if ((this173 == 0)) {
HXLINE(  75)																				b115 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				b115 = (( (Float)(this173) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float a211;
HXDLIN(  75)																			int this174 = ((0 >> 24) & 255);
HXDLIN(  75)																			if ((this174 == 0)) {
HXLINE(  75)																				a211 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				a211 = (( (Float)(this174) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float r29;
HXDLIN(  75)																			int this175 = ((0 >> 16) & 255);
HXDLIN(  75)																			if ((this175 == 0)) {
HXLINE(  75)																				r29 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				r29 = (( (Float)(this175) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float g29;
HXDLIN(  75)																			int this176 = ((0 >> 8) & 255);
HXDLIN(  75)																			if ((this176 == 0)) {
HXLINE(  75)																				g29 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				g29 = (( (Float)(this176) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float b213;
HXDLIN(  75)																			int this177 = (0 & 255);
HXDLIN(  75)																			if ((this177 == 0)) {
HXLINE(  75)																				b213 = ((Float)0.);
            																			}
            																			else {
HXLINE(  75)																				b213 = (( (Float)(this177) ) / ( (Float)(255) ));
            																			}
HXDLIN(  75)																			Float a310 = (a112 * (( (Float)(1) ) - a211));
HXDLIN(  75)																			int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a310) + (r29 * a211))));
HXDLIN(  75)																			int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a310) + (g29 * a211))));
HXDLIN(  75)																			int b40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a310) + (b213 * a211))));
HXDLIN(  75)																			int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN(  75)																			int blended9 = ((((a40 << 24) | (r20 << 16)) | (g20 << 8)) | b40);
HXDLIN(  75)																			{
HXLINE(  75)																				int _hx_tmp38;
HXDLIN(  75)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																					_hx_tmp38 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            																				}
            																				else {
HXLINE(  75)																					_hx_tmp38 = blended9;
            																				}
HXDLIN(  75)																				::iterMagic::Iimg_obj::set(this145->image,location9,_hx_tmp38);
            																			}
            																		}
            																		else {
HXLINE(  75)																			::Dynamic this178 = this145->image;
HXDLIN(  75)																			int index24;
HXDLIN(  75)																			if (this145->useVirtualPos) {
HXLINE(  75)																				index24 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - this145->virtualY) * ( (Float)(this145->width) )) + x21) - this145->virtualX));
            																			}
            																			else {
HXLINE(  75)																				index24 = ::Std_obj::_hx_int(( (Float)(((y21 * this145->width) + x21)) ));
            																			}
HXDLIN(  75)																			int _hx_tmp39;
HXDLIN(  75)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																				_hx_tmp39 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            																			}
            																			else {
HXLINE(  75)																				_hx_tmp39 = c19;
            																			}
HXDLIN(  75)																			::iterMagic::Iimg_obj::set(this178,index24,_hx_tmp39);
            																		}
            																	}
HXLINE(  73)																	found4 = true;
            																}
            																else {
HXLINE(  75)																	if (found4) {
HXLINE(  75)																		goto _hx_goto_210;
            																	}
            																}
            															}
            														}
            														_hx_goto_210:;
            													}
            												}
            											}
HXDLIN(  75)											if ((hasHit4 == true)) {
HXLINE(  75)												 ::pi_xy::algo::HitTri v16 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,rx,ry,bx4,by4,cx6,cy6,true);
HXDLIN(  75)												if (hasUndo4) {
HXLINE(  75)													v16->undoImage = undoImage12;
HXDLIN(  75)													v16->undoX = xIter34->start;
HXDLIN(  75)													v16->undoY = yIter34->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  51)								lastX2 = nextX4;
HXLINE(  52)								lastY2 = nextY4;
            							}
            						}
            					}
            					else {
HXLINE(  75)						int _g142 = 0;
HXDLIN(  75)						int _g143 = (sides5 + 1);
HXDLIN(  75)						while((_g142 < _g143)){
HXLINE(  75)							_g142 = (_g142 + 1);
HXDLIN(  75)							int i47 = (_g142 - 1);
HXDLIN(  75)							Float nextX5 = (rx + (rx2 * ::Math_obj::cos((((( (Float)(i47) ) * theta2) + omega2) + ((Float)0.01)))));
HXDLIN(  75)							Float nextY5 = (ry + (ry2 * ::Math_obj::sin((((( (Float)(i47) ) * theta2) + omega2) + ((Float)0.01)))));
HXDLIN(  75)							{
HXLINE(  75)								 ::pi_xy::ImageStruct this179 = this144;
HXDLIN(  75)								bool hasHit5 = false;
HXDLIN(  75)								bool hasUndo5 = false;
HXDLIN(  75)								{
HXLINE(  75)									Float bx5 = lastX2;
HXDLIN(  75)									Float by5 = lastY2;
HXDLIN(  75)									Float cx7 = nextX5;
HXDLIN(  75)									Float cy7 = nextY5;
HXDLIN(  75)									bool adjustWinding5 = (((((rx * by5) - (bx5 * ry)) + ((bx5 * cy7) - (cx7 * by5))) + ((cx7 * ry) - (rx * cy7))) > 0);
HXDLIN(  75)									if (!(adjustWinding5)) {
HXLINE(  75)										Float bx_5 = bx5;
HXDLIN(  75)										Float by_5 = by5;
HXLINE(  25)										bx5 = cx7;
HXLINE(  26)										by5 = cy7;
HXLINE(  27)										cx7 = bx_5;
HXLINE(  28)										cy7 = by_5;
            									}
HXLINE(  75)									{
HXLINE(  75)										Float s05 = ((ry * cx7) - (rx * cy7));
HXDLIN(  75)										Float sx5 = (cy7 - ry);
HXDLIN(  75)										Float sy5 = (rx - cx7);
HXDLIN(  75)										Float t05 = ((rx * by5) - (ry * bx5));
HXDLIN(  75)										Float tx5 = (ry - by5);
HXDLIN(  75)										Float ty5 = (bx5 - rx);
HXDLIN(  75)										Float A5 = ((((-(by5) * cx7) + (ry * (-(bx5) + cx7))) + (rx * (by5 - cy7))) + (bx5 * cy7));
HXDLIN(  75)										 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN(  75)										if ((rx > bx5)) {
HXLINE(  75)											if ((rx > cx7)) {
HXLINE(  75)												int min20;
HXDLIN(  75)												if ((bx5 > cx7)) {
HXLINE(  75)													min20 = ::Math_obj::floor(cx7);
            												}
            												else {
HXLINE(  75)													min20 = ::Math_obj::floor(bx5);
            												}
HXDLIN(  75)												int ii_min40 = min20;
HXDLIN(  75)												int ii_max40 = ::Math_obj::ceil(rx);
HXDLIN(  75)												xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            											}
            											else {
HXLINE(  75)												int ii_min41 = ::Math_obj::floor(bx5);
HXDLIN(  75)												int ii_max41 = ::Math_obj::ceil(cx7);
HXDLIN(  75)												xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            											}
            										}
            										else {
HXLINE(  75)											if ((bx5 > cx7)) {
HXLINE(  75)												int min21;
HXDLIN(  75)												if ((rx > cx7)) {
HXLINE(  75)													min21 = ::Math_obj::floor(cx7);
            												}
            												else {
HXLINE(  75)													min21 = ::Math_obj::ceil(rx);
            												}
HXDLIN(  75)												int ii_min42 = min21;
HXDLIN(  75)												int ii_max42 = ::Math_obj::ceil(bx5);
HXDLIN(  75)												xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            											}
            											else {
HXLINE(  75)												int ii_min43 = ::Math_obj::floor(rx);
HXDLIN(  75)												int ii_max43 = ::Math_obj::ceil(cx7);
HXDLIN(  75)												xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            											}
            										}
HXDLIN(  75)										 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN(  75)										if ((ry > by5)) {
HXLINE(  75)											if ((ry > cy7)) {
HXLINE(  75)												int min22;
HXDLIN(  75)												if ((by5 > cy7)) {
HXLINE(  75)													min22 = ::Math_obj::floor(cy7);
            												}
            												else {
HXLINE(  75)													min22 = ::Math_obj::floor(by5);
            												}
HXDLIN(  75)												int ii_min44 = min22;
HXDLIN(  75)												int ii_max44 = ::Math_obj::ceil(ry);
HXDLIN(  75)												yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            											}
            											else {
HXLINE(  75)												int ii_min45 = ::Math_obj::floor(by5);
HXDLIN(  75)												int ii_max45 = ::Math_obj::ceil(cy7);
HXDLIN(  75)												yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            											}
            										}
            										else {
HXLINE(  75)											if ((by5 > cy7)) {
HXLINE(  75)												int min23;
HXDLIN(  75)												if ((ry > cy7)) {
HXLINE(  75)													min23 = ::Math_obj::floor(cy7);
            												}
            												else {
HXLINE(  75)													min23 = ::Math_obj::ceil(ry);
            												}
HXDLIN(  75)												int ii_min46 = min23;
HXDLIN(  75)												int ii_max46 = ::Math_obj::ceil(by5);
HXDLIN(  75)												yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            											}
            											else {
HXLINE(  75)												int ii_min47 = ::Math_obj::floor(ry);
HXDLIN(  75)												int ii_max47 = ::Math_obj::ceil(cy7);
HXDLIN(  75)												yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            											}
            										}
HXDLIN(  75)										 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN(  75)										if (hasUndo5) {
HXLINE(  75)											int width7 = ((xIter35->max - xIter35->start) + 1);
HXDLIN(  75)											int height7 = ((yIter35->max - yIter35->start) + 1);
HXDLIN(  75)											 ::Dynamic imageType7 = null();
HXDLIN(  75)											 ::pi_xy::ImageStruct this180 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  75)											if (::hx::IsNull( imageType7 )) {
HXLINE(  54)												imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  75)											::Dynamic undoImage16;
HXDLIN(  75)											switch((int)(( (int)(imageType7) ))){
            												case (int)0: {
HXLINE(  75)													 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  75)													 ::iterMagic::BytesImg b41 = byt7;
HXDLIN(  75)													{
HXLINE(  75)														b41->width = width7;
HXDLIN(  75)														b41->height = height7;
HXDLIN(  75)														b41->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  75)														b41->data = ::haxe::io::Bytes_obj::alloc((b41->length * 4));
HXDLIN(  75)														{
HXLINE(  75)															int len14 = b41->length;
HXDLIN(  75)															int w7 = 0;
HXDLIN(  75)															{
HXLINE(  75)																int _g144 = 0;
HXDLIN(  75)																int _g145 = b41->height;
HXDLIN(  75)																while((_g144 < _g145)){
HXLINE(  75)																	_g144 = (_g144 + 1);
HXDLIN(  75)																	int y22 = (_g144 - 1);
HXDLIN(  75)																	{
HXLINE(  75)																		int _g146 = 0;
HXDLIN(  75)																		int _g147 = b41->width;
HXDLIN(  75)																		while((_g146 < _g147)){
HXLINE(  75)																			_g146 = (_g146 + 1);
HXDLIN(  75)																			int x22 = (_g146 - 1);
HXDLIN(  75)																			{
HXLINE(  75)																				w7 = (w7 + 1);
HXDLIN(  75)																				b41->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  75)																			{
HXLINE(  75)																				w7 = (w7 + 1);
HXDLIN(  75)																				b41->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  75)																			{
HXLINE(  75)																				w7 = (w7 + 1);
HXDLIN(  75)																				b41->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  75)																			{
HXLINE(  75)																				w7 = (w7 + 1);
HXDLIN(  75)																				b41->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  75)													undoImage16 = b41;
            												}
            												break;
            												case (int)1: {
HXLINE(  75)													 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  75)													 ::iterMagic::ArrIntImg a41 = arrI7;
HXDLIN(  75)													{
HXLINE(  75)														a41->width = width7;
HXDLIN(  75)														a41->height = height7;
HXDLIN(  75)														a41->data = ::Array_obj< int >::__new(0);
HXDLIN(  75)														a41->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  75)														{
HXLINE(  75)															int _g148 = 0;
HXDLIN(  75)															int _g149 = a41->length;
HXDLIN(  75)															while((_g148 < _g149)){
HXLINE(  75)																_g148 = (_g148 + 1);
HXDLIN(  75)																int i48 = (_g148 - 1);
HXDLIN(  75)																a41->data[i48] = 0;
            															}
            														}
            													}
HXDLIN(  75)													undoImage16 = a41;
            												}
            												break;
            												case (int)2: {
HXLINE(  75)													 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  75)													 ::iterMagic::U32ArrImg b42 = u32a7;
HXDLIN(  75)													{
HXLINE(  75)														b42->width = width7;
HXDLIN(  75)														b42->height = height7;
HXDLIN(  75)														b42->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  75)														int size7 = (b42->length * 4);
HXDLIN(  75)														b42->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN(  75)														{
HXLINE(  75)															int _g150 = 0;
HXDLIN(  75)															int _g151 = b42->length;
HXDLIN(  75)															while((_g150 < _g151)){
HXLINE(  75)																_g150 = (_g150 + 1);
HXDLIN(  75)																int i49 = (_g150 - 1);
HXDLIN(  75)																{
HXLINE(  75)																	 ::haxe::io::ArrayBufferViewImpl this181 = b42->data;
HXDLIN(  75)																	bool undoImage17;
HXDLIN(  75)																	if ((i49 >= 0)) {
HXLINE(  75)																		undoImage17 = (i49 < (this181->byteLength >> 2));
            																	}
            																	else {
HXLINE(  75)																		undoImage17 = false;
            																	}
HXDLIN(  75)																	if (undoImage17) {
HXLINE(  75)																		 ::haxe::io::Bytes _this7 = this181->bytes;
HXDLIN(  75)																		int pos7 = ((i49 << 2) + this181->byteOffset);
HXDLIN(  75)																		_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN(  75)																		_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN(  75)																		_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN(  75)																		_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  75)													undoImage16 = b42;
            												}
            												break;
            												case (int)3: {
HXLINE(  75)													 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  75)													 ::iterMagic::VecIntImg v17 = vec7;
HXDLIN(  75)													{
HXLINE(  75)														v17->width = width7;
HXDLIN(  75)														v17->height = height7;
HXDLIN(  75)														v17->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  75)														v17->data = ::Array_obj< int >::__new(v17->length);
HXDLIN(  75)														{
HXLINE(  75)															int _g152 = 0;
HXDLIN(  75)															int _g153 = v17->length;
HXDLIN(  75)															while((_g152 < _g153)){
HXLINE(  75)																_g152 = (_g152 + 1);
HXDLIN(  75)																int i50 = (_g152 - 1);
HXDLIN(  75)																v17->data->__unsafe_set(i50,0);
            															}
            														}
            													}
HXDLIN(  75)													undoImage16 = v17;
            												}
            												break;
            												case (int)4: {
HXLINE(  75)													 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  75)													 ::iterMagic::StackIntImg b43 = sInt7;
HXDLIN(  75)													{
HXLINE(  75)														b43->width = width7;
HXDLIN(  75)														b43->height = height7;
HXDLIN(  75)														b43->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  75)														b43->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  75)														{
HXLINE(  75)															int len15 = b43->length;
HXDLIN(  75)															 ::haxe::ds::GenericStack_Int d7 = b43->data;
HXDLIN(  75)															if (::hx::IsNull( d7->head )) {
HXLINE(  75)																int _g154 = 0;
HXDLIN(  75)																int _g155 = len15;
HXDLIN(  75)																while((_g154 < _g155)){
HXLINE(  75)																	_g154 = (_g154 + 1);
HXDLIN(  75)																	int i51 = (_g154 - 1);
HXDLIN(  75)																	d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            																}
            															}
            															else {
HXLINE(  75)																int _g156 = 0;
HXDLIN(  75)																int _g157 = len15;
HXDLIN(  75)																while((_g156 < _g157)){
HXLINE(  75)																	_g156 = (_g156 + 1);
HXDLIN(  75)																	int i52 = (_g156 - 1);
HXDLIN(  75)																	{
HXLINE(  75)																		 ::haxe::ds::GenericCell_Int l7 = b43->data->head;
HXDLIN(  75)																		 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN(  75)																		{
HXLINE(  75)																			int _g158 = 0;
HXDLIN(  75)																			int _g159 = i52;
HXDLIN(  75)																			while((_g158 < _g159)){
HXLINE(  75)																				_g158 = (_g158 + 1);
HXDLIN(  75)																				int i53 = (_g158 - 1);
HXLINE( 345)																				prev7 = l7;
HXLINE( 346)																				l7 = l7->next;
            																			}
            																		}
HXLINE(  75)																		if (::hx::IsNull( prev7 )) {
HXLINE(  75)																			b43->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  75)																			l7 = null();
            																		}
            																		else {
HXLINE(  75)																			prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  75)																			l7 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  75)													undoImage16 = b43;
            												}
            												break;
            											}
HXDLIN(  75)											this180->image = undoImage16;
HXDLIN(  75)											this180->width = width7;
HXDLIN(  75)											this180->height = height7;
HXDLIN(  75)											this180->imageType = ( (int)(imageType7) );
HXDLIN(  75)											undoImage15 = this180;
HXDLIN(  75)											{
HXLINE(  75)												int rectLeft5 = xIter35->start;
HXDLIN(  75)												int rectTop5 = yIter35->start;
HXDLIN(  75)												int rectRight5 = xIter35->max;
HXDLIN(  75)												bool forceClear5 = false;
HXDLIN(  75)												{
HXLINE(  75)													int _g160 = rectTop5;
HXDLIN(  75)													int _g161 = yIter35->max;
HXDLIN(  75)													while((_g160 < _g161)){
HXLINE(  75)														_g160 = (_g160 + 1);
HXDLIN(  75)														int dy5 = (_g160 - 1);
HXDLIN(  75)														{
HXLINE(  75)															int _g162 = rectLeft5;
HXDLIN(  75)															int _g163 = rectRight5;
HXDLIN(  75)															while((_g162 < _g163)){
HXLINE(  75)																_g162 = (_g162 + 1);
HXDLIN(  75)																int dx5 = (_g162 - 1);
HXDLIN(  75)																::Dynamic this182 = this179->image;
HXDLIN(  75)																int index25;
HXDLIN(  75)																if (this179->useVirtualPos) {
HXLINE(  75)																	index25 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this179->virtualY) * ( (Float)(this179->width) )) + dx5) - this179->virtualX));
            																}
            																else {
HXLINE(  75)																	index25 = ::Std_obj::_hx_int(( (Float)(((dy5 * this179->width) + dx5)) ));
            																}
HXDLIN(  75)																int c20 = ::iterMagic::Iimg_obj::get(this182,index25);
HXDLIN(  75)																int col5;
HXDLIN(  75)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																	col5 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            																}
            																else {
HXLINE(  75)																	col5 = c20;
            																}
HXDLIN(  75)																bool _hx_tmp40;
HXDLIN(  75)																if (this179->useMask) {
HXLINE(  75)																	_hx_tmp40 = ::hx::IsNotNull( this179->mask );
            																}
            																else {
HXLINE(  75)																	_hx_tmp40 = false;
            																}
HXDLIN(  75)																if (_hx_tmp40) {
HXLINE(  75)																	 ::pi_xy::ImageStruct this183 = this179->mask;
HXDLIN(  75)																	::Dynamic this184 = this183->image;
HXDLIN(  75)																	int index26;
HXDLIN(  75)																	if (this183->useVirtualPos) {
HXLINE(  75)																		index26 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this183->virtualY) * ( (Float)(this183->width) )) + dx5) - this183->virtualX));
            																	}
            																	else {
HXLINE(  75)																		index26 = ::Std_obj::_hx_int(( (Float)(((dy5 * this183->width) + dx5)) ));
            																	}
HXDLIN(  75)																	int c21 = ::iterMagic::Iimg_obj::get(this184,index26);
HXDLIN(  75)																	int v18;
HXDLIN(  75)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																		v18 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            																	}
            																	else {
HXLINE(  75)																		v18 = c21;
            																	}
HXDLIN(  75)																	int maskPixel5 = v18;
HXDLIN(  75)																	int this185 = col5;
HXDLIN(  75)																	if ((maskPixel5 == 0)) {
HXLINE(  75)																		col5 = this185;
            																	}
            																	else {
HXLINE(  75)																		Float m05;
HXDLIN(  75)																		int this186 = ((maskPixel5 >> 24) & 255);
HXDLIN(  75)																		if ((this186 == 0)) {
HXLINE(  75)																			m05 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			m05 = (( (Float)(this186) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float m15;
HXDLIN(  75)																		int this187 = ((maskPixel5 >> 16) & 255);
HXDLIN(  75)																		if ((this187 == 0)) {
HXLINE(  75)																			m15 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			m15 = (( (Float)(this187) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float m25;
HXDLIN(  75)																		int this188 = ((maskPixel5 >> 8) & 255);
HXDLIN(  75)																		if ((this188 == 0)) {
HXLINE(  75)																			m25 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			m25 = (( (Float)(this188) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float m35;
HXDLIN(  75)																		int this189 = (maskPixel5 & 255);
HXDLIN(  75)																		if ((this189 == 0)) {
HXLINE(  75)																			m35 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			m35 = (( (Float)(this189) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this185 >> 24) & 255)) )));
HXDLIN(  75)																		int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this185 >> 16) & 255)) )));
HXDLIN(  75)																		int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this185 >> 8) & 255)) )));
HXDLIN(  75)																		int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this185 & 255)) )));
HXDLIN(  75)																		col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  75)																if ((col5 != 0)) {
HXLINE(  75)																	int x23 = (dx5 - rectLeft5);
HXDLIN(  75)																	int y23 = (dy5 - rectTop5);
HXDLIN(  75)																	int c22 = col5;
HXDLIN(  75)																	bool _hx_tmp41;
HXDLIN(  75)																	if ((((c22 >> 24) & 255) < 254)) {
HXLINE(  75)																		_hx_tmp41 = undoImage15->transparent;
            																	}
            																	else {
HXLINE(  75)																		_hx_tmp41 = false;
            																	}
HXDLIN(  75)																	if (_hx_tmp41) {
HXLINE(  75)																		int location10;
HXDLIN(  75)																		if (undoImage15->useVirtualPos) {
HXLINE(  75)																			location10 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x23) - undoImage15->virtualX));
            																		}
            																		else {
HXLINE(  75)																			location10 = ::Std_obj::_hx_int(( (Float)(((y23 * undoImage15->width) + x23)) ));
            																		}
HXDLIN(  75)																		int this190 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN(  75)																		int this191;
HXDLIN(  75)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																			this191 = ((((((this190 >> 24) & 255) << 24) | ((this190 & 255) << 16)) | (((this190 >> 8) & 255) << 8)) | ((this190 >> 16) & 255));
            																		}
            																		else {
HXLINE(  75)																			this191 = this190;
            																		}
HXDLIN(  75)																		Float a113;
HXDLIN(  75)																		int this192 = ((this191 >> 24) & 255);
HXDLIN(  75)																		if ((this192 == 0)) {
HXLINE(  75)																			a113 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			a113 = (( (Float)(this192) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float r110;
HXDLIN(  75)																		int this193 = ((this191 >> 16) & 255);
HXDLIN(  75)																		if ((this193 == 0)) {
HXLINE(  75)																			r110 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			r110 = (( (Float)(this193) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float g110;
HXDLIN(  75)																		int this194 = ((this191 >> 8) & 255);
HXDLIN(  75)																		if ((this194 == 0)) {
HXLINE(  75)																			g110 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			g110 = (( (Float)(this194) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float b116;
HXDLIN(  75)																		int this195 = (this191 & 255);
HXDLIN(  75)																		if ((this195 == 0)) {
HXLINE(  75)																			b116 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			b116 = (( (Float)(this195) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float a212;
HXDLIN(  75)																		int this196 = ((col5 >> 24) & 255);
HXDLIN(  75)																		if ((this196 == 0)) {
HXLINE(  75)																			a212 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			a212 = (( (Float)(this196) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float r210;
HXDLIN(  75)																		int this197 = ((col5 >> 16) & 255);
HXDLIN(  75)																		if ((this197 == 0)) {
HXLINE(  75)																			r210 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			r210 = (( (Float)(this197) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float g210;
HXDLIN(  75)																		int this198 = ((col5 >> 8) & 255);
HXDLIN(  75)																		if ((this198 == 0)) {
HXLINE(  75)																			g210 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			g210 = (( (Float)(this198) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float b214;
HXDLIN(  75)																		int this199 = (col5 & 255);
HXDLIN(  75)																		if ((this199 == 0)) {
HXLINE(  75)																			b214 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			b214 = (( (Float)(this199) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float a311 = (a113 * (( (Float)(1) ) - a212));
HXDLIN(  75)																		int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a311) + (r210 * a212))));
HXDLIN(  75)																		int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a311) + (g210 * a212))));
HXDLIN(  75)																		int b44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a311) + (b214 * a212))));
HXDLIN(  75)																		int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN(  75)																		int blended10 = ((((a42 << 24) | (r30 << 16)) | (g30 << 8)) | b44);
HXDLIN(  75)																		{
HXLINE(  75)																			int _hx_tmp42;
HXDLIN(  75)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																				_hx_tmp42 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            																			}
            																			else {
HXLINE(  75)																				_hx_tmp42 = blended10;
            																			}
HXDLIN(  75)																			::iterMagic::Iimg_obj::set(undoImage15->image,location10,_hx_tmp42);
            																		}
            																	}
            																	else {
HXLINE(  75)																		::Dynamic this200 = undoImage15->image;
HXDLIN(  75)																		int index27;
HXDLIN(  75)																		if (undoImage15->useVirtualPos) {
HXLINE(  75)																			index27 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x23) - undoImage15->virtualX));
            																		}
            																		else {
HXLINE(  75)																			index27 = ::Std_obj::_hx_int(( (Float)(((y23 * undoImage15->width) + x23)) ));
            																		}
HXDLIN(  75)																		int _hx_tmp43;
HXDLIN(  75)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																			_hx_tmp43 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            																		}
            																		else {
HXLINE(  75)																			_hx_tmp43 = c22;
            																		}
HXDLIN(  75)																		::iterMagic::Iimg_obj::set(this200,index27,_hx_tmp43);
            																	}
            																}
            																else {
HXLINE(  75)																	if (forceClear5) {
HXLINE(  75)																		::Dynamic this201 = undoImage15->image;
HXDLIN(  75)																		int x24 = (dx5 - rectLeft5);
HXDLIN(  75)																		int y24 = (dy5 - rectTop5);
HXDLIN(  75)																		int index28;
HXDLIN(  75)																		if (undoImage15->useVirtualPos) {
HXLINE(  75)																			index28 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x24) - undoImage15->virtualX));
            																		}
            																		else {
HXLINE(  75)																			index28 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage15->width) + x24)) ));
            																		}
HXDLIN(  75)																		::iterMagic::Iimg_obj::set(this201,index28,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  75)										bool found5 = false;
HXDLIN(  75)										Float s5 = ((Float)0.);
HXDLIN(  75)										Float t5 = ((Float)0.);
HXDLIN(  75)										Float sxx5 = ((Float)0.);
HXDLIN(  75)										Float txx5 = ((Float)0.);
HXDLIN(  75)										{
HXLINE(  75)											int _g_min10 = xIter35->start;
HXDLIN(  75)											int _g_max10 = xIter35->max;
HXDLIN(  75)											while((_g_min10 < _g_max10)){
HXLINE(  75)												_g_min10 = (_g_min10 + 1);
HXDLIN(  75)												int x25 = (_g_min10 - 1);
HXLINE(  60)												sxx5 = (sx5 * ( (Float)(x25) ));
HXLINE(  61)												txx5 = (tx5 * ( (Float)(x25) ));
HXLINE(  62)												found5 = false;
HXLINE(  75)												{
HXLINE(  75)													int _g_min11 = yIter35->start;
HXDLIN(  75)													int _g_max11 = yIter35->max;
HXDLIN(  75)													while((_g_min11 < _g_max11)){
HXLINE(  75)														_g_min11 = (_g_min11 + 1);
HXDLIN(  75)														int y25 = (_g_min11 - 1);
HXLINE(  64)														s5 = ((s05 + sxx5) + (sy5 * ( (Float)(y25) )));
HXLINE(  65)														t5 = ((t05 + txx5) + (ty5 * ( (Float)(y25) )));
HXLINE(  75)														bool _hx_tmp44;
HXDLIN(  75)														if (!((s5 <= 0))) {
HXLINE(  75)															_hx_tmp44 = (t5 <= 0);
            														}
            														else {
HXLINE(  75)															_hx_tmp44 = true;
            														}
HXDLIN(  75)														if (_hx_tmp44) {
HXLINE(  75)															if (found5) {
HXLINE(  75)																goto _hx_goto_223;
            															}
            														}
            														else {
HXLINE(  75)															if (((s5 + t5) < A5)) {
HXLINE(  75)																{
HXLINE(  75)																	int c23 = 0;
HXDLIN(  75)																	bool _hx_tmp45;
HXDLIN(  75)																	if ((((c23 >> 24) & 255) < 254)) {
HXLINE(  75)																		_hx_tmp45 = this179->transparent;
            																	}
            																	else {
HXLINE(  75)																		_hx_tmp45 = false;
            																	}
HXDLIN(  75)																	if (_hx_tmp45) {
HXLINE(  75)																		int location11;
HXDLIN(  75)																		if (this179->useVirtualPos) {
HXLINE(  75)																			location11 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - this179->virtualY) * ( (Float)(this179->width) )) + x25) - this179->virtualX));
            																		}
            																		else {
HXLINE(  75)																			location11 = ::Std_obj::_hx_int(( (Float)(((y25 * this179->width) + x25)) ));
            																		}
HXDLIN(  75)																		int this202 = ::iterMagic::Iimg_obj::get(this179->image,location11);
HXDLIN(  75)																		int this203;
HXDLIN(  75)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																			this203 = ((((((this202 >> 24) & 255) << 24) | ((this202 & 255) << 16)) | (((this202 >> 8) & 255) << 8)) | ((this202 >> 16) & 255));
            																		}
            																		else {
HXLINE(  75)																			this203 = this202;
            																		}
HXDLIN(  75)																		Float a114;
HXDLIN(  75)																		int this204 = ((this203 >> 24) & 255);
HXDLIN(  75)																		if ((this204 == 0)) {
HXLINE(  75)																			a114 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			a114 = (( (Float)(this204) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float r111;
HXDLIN(  75)																		int this205 = ((this203 >> 16) & 255);
HXDLIN(  75)																		if ((this205 == 0)) {
HXLINE(  75)																			r111 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			r111 = (( (Float)(this205) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float g111;
HXDLIN(  75)																		int this206 = ((this203 >> 8) & 255);
HXDLIN(  75)																		if ((this206 == 0)) {
HXLINE(  75)																			g111 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			g111 = (( (Float)(this206) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float b117;
HXDLIN(  75)																		int this207 = (this203 & 255);
HXDLIN(  75)																		if ((this207 == 0)) {
HXLINE(  75)																			b117 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			b117 = (( (Float)(this207) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float a213;
HXDLIN(  75)																		int this208 = ((0 >> 24) & 255);
HXDLIN(  75)																		if ((this208 == 0)) {
HXLINE(  75)																			a213 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			a213 = (( (Float)(this208) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float r211;
HXDLIN(  75)																		int this209 = ((0 >> 16) & 255);
HXDLIN(  75)																		if ((this209 == 0)) {
HXLINE(  75)																			r211 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			r211 = (( (Float)(this209) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float g211;
HXDLIN(  75)																		int this210 = ((0 >> 8) & 255);
HXDLIN(  75)																		if ((this210 == 0)) {
HXLINE(  75)																			g211 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			g211 = (( (Float)(this210) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float b215;
HXDLIN(  75)																		int this211 = (0 & 255);
HXDLIN(  75)																		if ((this211 == 0)) {
HXLINE(  75)																			b215 = ((Float)0.);
            																		}
            																		else {
HXLINE(  75)																			b215 = (( (Float)(this211) ) / ( (Float)(255) ));
            																		}
HXDLIN(  75)																		Float a312 = (a114 * (( (Float)(1) ) - a213));
HXDLIN(  75)																		int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a312) + (r211 * a213))));
HXDLIN(  75)																		int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a312) + (g211 * a213))));
HXDLIN(  75)																		int b45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a312) + (b215 * a213))));
HXDLIN(  75)																		int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN(  75)																		int blended11 = ((((a43 << 24) | (r31 << 16)) | (g31 << 8)) | b45);
HXDLIN(  75)																		{
HXLINE(  75)																			int _hx_tmp46;
HXDLIN(  75)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																				_hx_tmp46 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            																			}
            																			else {
HXLINE(  75)																				_hx_tmp46 = blended11;
            																			}
HXDLIN(  75)																			::iterMagic::Iimg_obj::set(this179->image,location11,_hx_tmp46);
            																		}
            																	}
            																	else {
HXLINE(  75)																		::Dynamic this212 = this179->image;
HXDLIN(  75)																		int index29;
HXDLIN(  75)																		if (this179->useVirtualPos) {
HXLINE(  75)																			index29 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - this179->virtualY) * ( (Float)(this179->width) )) + x25) - this179->virtualX));
            																		}
            																		else {
HXLINE(  75)																			index29 = ::Std_obj::_hx_int(( (Float)(((y25 * this179->width) + x25)) ));
            																		}
HXDLIN(  75)																		int _hx_tmp47;
HXDLIN(  75)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  75)																			_hx_tmp47 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            																		}
            																		else {
HXLINE(  75)																			_hx_tmp47 = c23;
            																		}
HXDLIN(  75)																		::iterMagic::Iimg_obj::set(this212,index29,_hx_tmp47);
            																	}
            																}
HXLINE(  73)																found5 = true;
            															}
            															else {
HXLINE(  75)																if (found5) {
HXLINE(  75)																	goto _hx_goto_223;
            																}
            															}
            														}
            													}
            													_hx_goto_223:;
            												}
            											}
            										}
HXDLIN(  75)										if ((hasHit5 == true)) {
HXLINE(  75)											 ::pi_xy::algo::HitTri v19 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,rx,ry,bx5,by5,cx7,cy7,true);
HXDLIN(  75)											if (hasUndo5) {
HXLINE(  75)												v19->undoImage = undoImage15;
HXDLIN(  75)												v19->undoX = xIter35->start;
HXDLIN(  75)												v19->undoY = yIter35->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  59)							lastX2 = nextX5;
HXLINE(  60)							lastY2 = nextY5;
            						}
            					}
            				}
            			}
HXLINE(  80)			{
HXLINE(  80)				int x26 = ::Std_obj::_hx_int((cx - rx));
HXDLIN(  80)				int y26 = ::Std_obj::_hx_int((cy - ry));
HXDLIN(  80)				bool forceClear6 = false;
HXDLIN(  80)				{
HXLINE(  80)					int _g164 = 0;
HXDLIN(  80)					int _g165 = temp->height;
HXDLIN(  80)					while((_g164 < _g165)){
HXLINE(  80)						_g164 = (_g164 + 1);
HXDLIN(  80)						int dy6 = (_g164 - 1);
HXDLIN(  80)						{
HXLINE(  80)							int _g166 = 0;
HXDLIN(  80)							int _g167 = temp->width;
HXDLIN(  80)							while((_g166 < _g167)){
HXLINE(  80)								_g166 = (_g166 + 1);
HXDLIN(  80)								int dx6 = (_g166 - 1);
HXDLIN(  80)								::Dynamic this213 = temp->image;
HXDLIN(  80)								int index30;
HXDLIN(  80)								if (temp->useVirtualPos) {
HXLINE(  80)									index30 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx6) - temp->virtualX));
            								}
            								else {
HXLINE(  80)									index30 = ::Std_obj::_hx_int(( (Float)(((dy6 * temp->width) + dx6)) ));
            								}
HXDLIN(  80)								int c24 = ::iterMagic::Iimg_obj::get(this213,index30);
HXDLIN(  80)								int col6;
HXDLIN(  80)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)									col6 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            								}
            								else {
HXLINE(  80)									col6 = c24;
            								}
HXDLIN(  80)								bool _hx_tmp48;
HXDLIN(  80)								if (temp->useMask) {
HXLINE(  80)									_hx_tmp48 = ::hx::IsNotNull( temp->mask );
            								}
            								else {
HXLINE(  80)									_hx_tmp48 = false;
            								}
HXDLIN(  80)								if (_hx_tmp48) {
HXLINE(  80)									 ::pi_xy::ImageStruct this214 = temp->mask;
HXDLIN(  80)									::Dynamic this215 = this214->image;
HXDLIN(  80)									int index31;
HXDLIN(  80)									if (this214->useVirtualPos) {
HXLINE(  80)										index31 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this214->virtualY) * ( (Float)(this214->width) )) + dx6) - this214->virtualX));
            									}
            									else {
HXLINE(  80)										index31 = ::Std_obj::_hx_int(( (Float)(((dy6 * this214->width) + dx6)) ));
            									}
HXDLIN(  80)									int c25 = ::iterMagic::Iimg_obj::get(this215,index31);
HXDLIN(  80)									int v20;
HXDLIN(  80)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)										v20 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            									}
            									else {
HXLINE(  80)										v20 = c25;
            									}
HXDLIN(  80)									int maskPixel6 = v20;
HXDLIN(  80)									int this216 = col6;
HXDLIN(  80)									if ((maskPixel6 == 0)) {
HXLINE(  80)										col6 = this216;
            									}
            									else {
HXLINE(  80)										Float m06;
HXDLIN(  80)										int this217 = ((maskPixel6 >> 24) & 255);
HXDLIN(  80)										if ((this217 == 0)) {
HXLINE(  80)											m06 = ((Float)0.);
            										}
            										else {
HXLINE(  80)											m06 = (( (Float)(this217) ) / ( (Float)(255) ));
            										}
HXDLIN(  80)										Float m16;
HXDLIN(  80)										int this218 = ((maskPixel6 >> 16) & 255);
HXDLIN(  80)										if ((this218 == 0)) {
HXLINE(  80)											m16 = ((Float)0.);
            										}
            										else {
HXLINE(  80)											m16 = (( (Float)(this218) ) / ( (Float)(255) ));
            										}
HXDLIN(  80)										Float m26;
HXDLIN(  80)										int this219 = ((maskPixel6 >> 8) & 255);
HXDLIN(  80)										if ((this219 == 0)) {
HXLINE(  80)											m26 = ((Float)0.);
            										}
            										else {
HXLINE(  80)											m26 = (( (Float)(this219) ) / ( (Float)(255) ));
            										}
HXDLIN(  80)										Float m36;
HXDLIN(  80)										int this220 = (maskPixel6 & 255);
HXDLIN(  80)										if ((this220 == 0)) {
HXLINE(  80)											m36 = ((Float)0.);
            										}
            										else {
HXLINE(  80)											m36 = (( (Float)(this220) ) / ( (Float)(255) ));
            										}
HXDLIN(  80)										int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this216 >> 24) & 255)) )));
HXDLIN(  80)										int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this216 >> 16) & 255)) )));
HXDLIN(  80)										int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this216 >> 8) & 255)) )));
HXDLIN(  80)										int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this216 & 255)) )));
HXDLIN(  80)										col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN(  80)								if ((col6 != 0)) {
HXLINE(  80)									int x27 = (x26 + dx6);
HXDLIN(  80)									int y27 = (y26 + dy6);
HXDLIN(  80)									int c26 = col6;
HXDLIN(  80)									bool _hx_tmp49;
HXDLIN(  80)									if ((((c26 >> 24) & 255) < 254)) {
HXLINE(  80)										_hx_tmp49 = this1->transparent;
            									}
            									else {
HXLINE(  80)										_hx_tmp49 = false;
            									}
HXDLIN(  80)									if (_hx_tmp49) {
HXLINE(  80)										int location12;
HXDLIN(  80)										if (this1->useVirtualPos) {
HXLINE(  80)											location12 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - this1->virtualY) * ( (Float)(this1->width) )) + x27) - this1->virtualX));
            										}
            										else {
HXLINE(  80)											location12 = ::Std_obj::_hx_int(( (Float)(((y27 * this1->width) + x27)) ));
            										}
HXDLIN(  80)										int this221 = ::iterMagic::Iimg_obj::get(this1->image,location12);
HXDLIN(  80)										int this222;
HXDLIN(  80)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)											this222 = ((((((this221 >> 24) & 255) << 24) | ((this221 & 255) << 16)) | (((this221 >> 8) & 255) << 8)) | ((this221 >> 16) & 255));
            										}
            										else {
HXLINE(  80)											this222 = this221;
            										}
HXDLIN(  80)										Float a115;
HXDLIN(  80)										int this223 = ((this222 >> 24) & 255);
HXDLIN(  80)										if ((this223 == 0)) {
HXLINE(  80)											a115 = ((Float)0.);
            										}
            										else {
HXLINE(  80)											a115 = (( (Float)(this223) ) / ( (Float)(255) ));
            										}
HXDLIN(  80)										Float r112;
HXDLIN(  80)										int this224 = ((this222 >> 16) & 255);
HXDLIN(  80)										if ((this224 == 0)) {
HXLINE(  80)											r112 = ((Float)0.);
            										}
            										else {
HXLINE(  80)											r112 = (( (Float)(this224) ) / ( (Float)(255) ));
            										}
HXDLIN(  80)										Float g112;
HXDLIN(  80)										int this225 = ((this222 >> 8) & 255);
HXDLIN(  80)										if ((this225 == 0)) {
HXLINE(  80)											g112 = ((Float)0.);
            										}
            										else {
HXLINE(  80)											g112 = (( (Float)(this225) ) / ( (Float)(255) ));
            										}
HXDLIN(  80)										Float b118;
HXDLIN(  80)										int this226 = (this222 & 255);
HXDLIN(  80)										if ((this226 == 0)) {
HXLINE(  80)											b118 = ((Float)0.);
            										}
            										else {
HXLINE(  80)											b118 = (( (Float)(this226) ) / ( (Float)(255) ));
            										}
HXDLIN(  80)										Float a214;
HXDLIN(  80)										int this227 = ((col6 >> 24) & 255);
HXDLIN(  80)										if ((this227 == 0)) {
HXLINE(  80)											a214 = ((Float)0.);
            										}
            										else {
HXLINE(  80)											a214 = (( (Float)(this227) ) / ( (Float)(255) ));
            										}
HXDLIN(  80)										Float r212;
HXDLIN(  80)										int this228 = ((col6 >> 16) & 255);
HXDLIN(  80)										if ((this228 == 0)) {
HXLINE(  80)											r212 = ((Float)0.);
            										}
            										else {
HXLINE(  80)											r212 = (( (Float)(this228) ) / ( (Float)(255) ));
            										}
HXDLIN(  80)										Float g212;
HXDLIN(  80)										int this229 = ((col6 >> 8) & 255);
HXDLIN(  80)										if ((this229 == 0)) {
HXLINE(  80)											g212 = ((Float)0.);
            										}
            										else {
HXLINE(  80)											g212 = (( (Float)(this229) ) / ( (Float)(255) ));
            										}
HXDLIN(  80)										Float b216;
HXDLIN(  80)										int this230 = (col6 & 255);
HXDLIN(  80)										if ((this230 == 0)) {
HXLINE(  80)											b216 = ((Float)0.);
            										}
            										else {
HXLINE(  80)											b216 = (( (Float)(this230) ) / ( (Float)(255) ));
            										}
HXDLIN(  80)										Float a313 = (a115 * (( (Float)(1) ) - a214));
HXDLIN(  80)										int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a313) + (r212 * a214))));
HXDLIN(  80)										int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a313) + (g212 * a214))));
HXDLIN(  80)										int b46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a313) + (b216 * a214))));
HXDLIN(  80)										int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN(  80)										int blended12 = ((((a44 << 24) | (r32 << 16)) | (g32 << 8)) | b46);
HXDLIN(  80)										{
HXLINE(  80)											int _hx_tmp50;
HXDLIN(  80)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)												_hx_tmp50 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            											}
            											else {
HXLINE(  80)												_hx_tmp50 = blended12;
            											}
HXDLIN(  80)											::iterMagic::Iimg_obj::set(this1->image,location12,_hx_tmp50);
            										}
            									}
            									else {
HXLINE(  80)										::Dynamic this231 = this1->image;
HXDLIN(  80)										int index32;
HXDLIN(  80)										if (this1->useVirtualPos) {
HXLINE(  80)											index32 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - this1->virtualY) * ( (Float)(this1->width) )) + x27) - this1->virtualX));
            										}
            										else {
HXLINE(  80)											index32 = ::Std_obj::_hx_int(( (Float)(((y27 * this1->width) + x27)) ));
            										}
HXDLIN(  80)										int _hx_tmp51;
HXDLIN(  80)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)											_hx_tmp51 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            										}
            										else {
HXLINE(  80)											_hx_tmp51 = c26;
            										}
HXDLIN(  80)										::iterMagic::Iimg_obj::set(this231,index32,_hx_tmp51);
            									}
            								}
            								else {
HXLINE(  80)									if (forceClear6) {
HXLINE(  80)										::Dynamic this232 = this1->image;
HXDLIN(  80)										int x28 = (x26 + dx6);
HXDLIN(  80)										int y28 = (y26 + dy6);
HXDLIN(  80)										int index33;
HXDLIN(  80)										if (this1->useVirtualPos) {
HXLINE(  80)											index33 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - this1->virtualY) * ( (Float)(this1->width) )) + x28) - this1->virtualX));
            										}
            										else {
HXLINE(  80)											index33 = ::Std_obj::_hx_int(( (Float)(((y28 * this1->width) + x28)) ));
            										}
HXDLIN(  80)										::iterMagic::Iimg_obj::set(this232,index33,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE(  82)			{
HXLINE(  82)				 ::pi_xy::ImageStruct this233 = temp;
HXDLIN(  82)				Float cx8 = (rx + rDif);
HXDLIN(  82)				Float cy8 = (ry + rDif);
HXDLIN(  82)				 ::Dynamic phi7 = phi;
HXDLIN(  82)				 ::Dynamic sides6 = noSides;
HXLINE(  86)				if (::hx::IsNull( sides6 )) {
HXLINE(  86)					sides6 = 36;
            				}
HXLINE(  85)				if (::hx::IsNull( phi7 )) {
HXLINE(  85)					phi7 = ((Float)0.);
            				}
HXLINE(  82)				{
HXLINE(  82)					 ::Dynamic phi8 = phi7;
HXDLIN(  82)					 ::Dynamic sides7 = sides6;
HXDLIN(  82)					if (::hx::IsNull( sides7 )) {
HXLINE( 212)						sides7 = 36;
            					}
HXLINE(  82)					if (::hx::IsNull( phi8 )) {
HXLINE( 211)						phi8 = ((Float)0.);
            					}
HXLINE(  82)					Float theta3 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides7) ));
HXDLIN(  82)					Float omega3;
HXDLIN(  82)					omega3 = ((Float)0.);
HXDLIN(  82)					Float lastX3 = ((Float)0.);
HXDLIN(  82)					Float lastY3 = ((Float)0.);
HXDLIN(  82)					if (::hx::IsNotEq( phi8,0 )) {
HXLINE(  35)						lastX3 = ((((rx2 * ::Math_obj::cos(((( (Float)(sides7) ) * theta3) + omega3))) * ::Math_obj::cos(( (Float)(phi8) ))) - ((ry2 * ::Math_obj::sin(((( (Float)(sides7) ) * theta3) + omega3))) * ::Math_obj::sin(( (Float)(phi8) )))) + cx8);
HXLINE(  36)						lastY3 = ((((rx2 * ::Math_obj::cos(((( (Float)(sides7) ) * theta3) + omega3))) * ::Math_obj::sin(( (Float)(phi8) ))) + ((ry2 * ::Math_obj::sin(((( (Float)(sides7) ) * theta3) + omega3))) * ::Math_obj::cos(( (Float)(phi8) )))) + cy8);
            					}
            					else {
HXLINE(  38)						lastX3 = (cx8 + (rx2 * ::Math_obj::cos(((( (Float)(sides7) ) * theta3) + omega3))));
HXLINE(  39)						lastY3 = (cy8 + (ry2 * ::Math_obj::sin(((( (Float)(sides7) ) * theta3) + omega3))));
            					}
HXLINE(  82)					if (::hx::IsNotEq( phi8,0 )) {
HXLINE(  82)						Float cphi3 = ::Math_obj::cos(( (Float)(phi8) ));
HXDLIN(  82)						Float sphi3 = ::Math_obj::sin(( (Float)(phi8) ));
HXDLIN(  82)						{
HXLINE(  82)							int _g168 = 0;
HXDLIN(  82)							int _g169 = (sides7 + 1);
HXDLIN(  82)							while((_g168 < _g169)){
HXLINE(  82)								_g168 = (_g168 + 1);
HXDLIN(  82)								int i54 = (_g168 - 1);
HXDLIN(  82)								Float stheta3 = ::Math_obj::sin((((( (Float)(i54) ) * theta3) + omega3) + ((Float)0.01)));
HXDLIN(  82)								Float ctheta3 = ::Math_obj::cos((((( (Float)(i54) ) * theta3) + omega3) + ((Float)0.01)));
HXDLIN(  82)								Float nextX6 = ((((rx2 * ctheta3) * cphi3) - ((ry2 * stheta3) * sphi3)) + cx8);
HXDLIN(  82)								Float nextY6 = ((((rx2 * ctheta3) * sphi3) + ((ry2 * stheta3) * cphi3)) + cy8);
HXDLIN(  82)								{
HXLINE(  82)									 ::pi_xy::ImageStruct this234 = this233;
HXDLIN(  82)									bool hasHit6 = false;
HXDLIN(  82)									bool hasUndo6 = false;
HXDLIN(  82)									{
HXLINE(  82)										Float bx6 = lastX3;
HXDLIN(  82)										Float by6 = lastY3;
HXDLIN(  82)										Float cx9 = nextX6;
HXDLIN(  82)										Float cy9 = nextY6;
HXDLIN(  82)										bool adjustWinding6 = (((((cx8 * by6) - (bx6 * cy8)) + ((bx6 * cy9) - (cx9 * by6))) + ((cx9 * cy8) - (cx8 * cy9))) > 0);
HXDLIN(  82)										if (!(adjustWinding6)) {
HXLINE(  82)											Float bx_6 = bx6;
HXDLIN(  82)											Float by_6 = by6;
HXLINE(  25)											bx6 = cx9;
HXLINE(  26)											by6 = cy9;
HXLINE(  27)											cx9 = bx_6;
HXLINE(  28)											cy9 = by_6;
            										}
HXLINE(  82)										{
HXLINE(  82)											Float s06 = ((cy8 * cx9) - (cx8 * cy9));
HXDLIN(  82)											Float sx6 = (cy9 - cy8);
HXDLIN(  82)											Float sy6 = (cx8 - cx9);
HXDLIN(  82)											Float t06 = ((cx8 * by6) - (cy8 * bx6));
HXDLIN(  82)											Float tx6 = (cy8 - by6);
HXDLIN(  82)											Float ty6 = (bx6 - cx8);
HXDLIN(  82)											Float A6 = ((((-(by6) * cx9) + (cy8 * (-(bx6) + cx9))) + (cx8 * (by6 - cy9))) + (bx6 * cy9));
HXDLIN(  82)											 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN(  82)											if ((cx8 > bx6)) {
HXLINE(  82)												if ((cx8 > cx9)) {
HXLINE(  82)													int min24;
HXDLIN(  82)													if ((bx6 > cx9)) {
HXLINE(  82)														min24 = ::Math_obj::floor(cx9);
            													}
            													else {
HXLINE(  82)														min24 = ::Math_obj::floor(bx6);
            													}
HXDLIN(  82)													int ii_min48 = min24;
HXDLIN(  82)													int ii_max48 = ::Math_obj::ceil(cx8);
HXDLIN(  82)													xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            												}
            												else {
HXLINE(  82)													int ii_min49 = ::Math_obj::floor(bx6);
HXDLIN(  82)													int ii_max49 = ::Math_obj::ceil(cx9);
HXDLIN(  82)													xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            												}
            											}
            											else {
HXLINE(  82)												if ((bx6 > cx9)) {
HXLINE(  82)													int min25;
HXDLIN(  82)													if ((cx8 > cx9)) {
HXLINE(  82)														min25 = ::Math_obj::floor(cx9);
            													}
            													else {
HXLINE(  82)														min25 = ::Math_obj::ceil(cx8);
            													}
HXDLIN(  82)													int ii_min50 = min25;
HXDLIN(  82)													int ii_max50 = ::Math_obj::ceil(bx6);
HXDLIN(  82)													xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            												}
            												else {
HXLINE(  82)													int ii_min51 = ::Math_obj::floor(cx8);
HXDLIN(  82)													int ii_max51 = ::Math_obj::ceil(cx9);
HXDLIN(  82)													xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            												}
            											}
HXDLIN(  82)											 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN(  82)											if ((cy8 > by6)) {
HXLINE(  82)												if ((cy8 > cy9)) {
HXLINE(  82)													int min26;
HXDLIN(  82)													if ((by6 > cy9)) {
HXLINE(  82)														min26 = ::Math_obj::floor(cy9);
            													}
            													else {
HXLINE(  82)														min26 = ::Math_obj::floor(by6);
            													}
HXDLIN(  82)													int ii_min52 = min26;
HXDLIN(  82)													int ii_max52 = ::Math_obj::ceil(cy8);
HXDLIN(  82)													yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            												}
            												else {
HXLINE(  82)													int ii_min53 = ::Math_obj::floor(by6);
HXDLIN(  82)													int ii_max53 = ::Math_obj::ceil(cy9);
HXDLIN(  82)													yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            												}
            											}
            											else {
HXLINE(  82)												if ((by6 > cy9)) {
HXLINE(  82)													int min27;
HXDLIN(  82)													if ((cy8 > cy9)) {
HXLINE(  82)														min27 = ::Math_obj::floor(cy9);
            													}
            													else {
HXLINE(  82)														min27 = ::Math_obj::ceil(cy8);
            													}
HXDLIN(  82)													int ii_min54 = min27;
HXDLIN(  82)													int ii_max54 = ::Math_obj::ceil(by6);
HXDLIN(  82)													yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            												}
            												else {
HXLINE(  82)													int ii_min55 = ::Math_obj::floor(cy8);
HXDLIN(  82)													int ii_max55 = ::Math_obj::ceil(cy9);
HXDLIN(  82)													yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            												}
            											}
HXDLIN(  82)											 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN(  82)											if (hasUndo6) {
HXLINE(  82)												int width8 = ((xIter36->max - xIter36->start) + 1);
HXDLIN(  82)												int height8 = ((yIter36->max - yIter36->start) + 1);
HXDLIN(  82)												 ::Dynamic imageType8 = null();
HXDLIN(  82)												 ::pi_xy::ImageStruct this235 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  82)												if (::hx::IsNull( imageType8 )) {
HXLINE(  54)													imageType8 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE(  82)												::Dynamic undoImage19;
HXDLIN(  82)												switch((int)(( (int)(imageType8) ))){
            													case (int)0: {
HXLINE(  82)														 ::iterMagic::BytesImg byt8 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  82)														 ::iterMagic::BytesImg b47 = byt8;
HXDLIN(  82)														{
HXLINE(  82)															b47->width = width8;
HXDLIN(  82)															b47->height = height8;
HXDLIN(  82)															b47->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  82)															b47->data = ::haxe::io::Bytes_obj::alloc((b47->length * 4));
HXDLIN(  82)															{
HXLINE(  82)																int len16 = b47->length;
HXDLIN(  82)																int w8 = 0;
HXDLIN(  82)																{
HXLINE(  82)																	int _g170 = 0;
HXDLIN(  82)																	int _g171 = b47->height;
HXDLIN(  82)																	while((_g170 < _g171)){
HXLINE(  82)																		_g170 = (_g170 + 1);
HXDLIN(  82)																		int y29 = (_g170 - 1);
HXDLIN(  82)																		{
HXLINE(  82)																			int _g172 = 0;
HXDLIN(  82)																			int _g173 = b47->width;
HXDLIN(  82)																			while((_g172 < _g173)){
HXLINE(  82)																				_g172 = (_g172 + 1);
HXDLIN(  82)																				int x29 = (_g172 - 1);
HXDLIN(  82)																				{
HXLINE(  82)																					w8 = (w8 + 1);
HXDLIN(  82)																					b47->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  82)																				{
HXLINE(  82)																					w8 = (w8 + 1);
HXDLIN(  82)																					b47->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  82)																				{
HXLINE(  82)																					w8 = (w8 + 1);
HXDLIN(  82)																					b47->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN(  82)																				{
HXLINE(  82)																					w8 = (w8 + 1);
HXDLIN(  82)																					b47->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  82)														undoImage19 = b47;
            													}
            													break;
            													case (int)1: {
HXLINE(  82)														 ::iterMagic::ArrIntImg arrI8 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)														 ::iterMagic::ArrIntImg a45 = arrI8;
HXDLIN(  82)														{
HXLINE(  82)															a45->width = width8;
HXDLIN(  82)															a45->height = height8;
HXDLIN(  82)															a45->data = ::Array_obj< int >::__new(0);
HXDLIN(  82)															a45->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  82)															{
HXLINE(  82)																int _g174 = 0;
HXDLIN(  82)																int _g175 = a45->length;
HXDLIN(  82)																while((_g174 < _g175)){
HXLINE(  82)																	_g174 = (_g174 + 1);
HXDLIN(  82)																	int i55 = (_g174 - 1);
HXDLIN(  82)																	a45->data[i55] = 0;
            																}
            															}
            														}
HXDLIN(  82)														undoImage19 = a45;
            													}
            													break;
            													case (int)2: {
HXLINE(  82)														 ::iterMagic::U32ArrImg u32a8 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  82)														 ::iterMagic::U32ArrImg b48 = u32a8;
HXDLIN(  82)														{
HXLINE(  82)															b48->width = width8;
HXDLIN(  82)															b48->height = height8;
HXDLIN(  82)															b48->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  82)															int size8 = (b48->length * 4);
HXDLIN(  82)															b48->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size8),0,size8);
HXDLIN(  82)															{
HXLINE(  82)																int _g176 = 0;
HXDLIN(  82)																int _g177 = b48->length;
HXDLIN(  82)																while((_g176 < _g177)){
HXLINE(  82)																	_g176 = (_g176 + 1);
HXDLIN(  82)																	int i56 = (_g176 - 1);
HXDLIN(  82)																	{
HXLINE(  82)																		 ::haxe::io::ArrayBufferViewImpl this236 = b48->data;
HXDLIN(  82)																		bool undoImage20;
HXDLIN(  82)																		if ((i56 >= 0)) {
HXLINE(  82)																			undoImage20 = (i56 < (this236->byteLength >> 2));
            																		}
            																		else {
HXLINE(  82)																			undoImage20 = false;
            																		}
HXDLIN(  82)																		if (undoImage20) {
HXLINE(  82)																			 ::haxe::io::Bytes _this8 = this236->bytes;
HXDLIN(  82)																			int pos8 = ((i56 << 2) + this236->byteOffset);
HXDLIN(  82)																			_this8->b[pos8] = ( (unsigned char)(0) );
HXDLIN(  82)																			_this8->b[(pos8 + 1)] = ( (unsigned char)(0) );
HXDLIN(  82)																			_this8->b[(pos8 + 2)] = ( (unsigned char)(0) );
HXDLIN(  82)																			_this8->b[(pos8 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  82)														undoImage19 = b48;
            													}
            													break;
            													case (int)3: {
HXLINE(  82)														 ::iterMagic::VecIntImg vec8 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)														 ::iterMagic::VecIntImg v21 = vec8;
HXDLIN(  82)														{
HXLINE(  82)															v21->width = width8;
HXDLIN(  82)															v21->height = height8;
HXDLIN(  82)															v21->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  82)															v21->data = ::Array_obj< int >::__new(v21->length);
HXDLIN(  82)															{
HXLINE(  82)																int _g178 = 0;
HXDLIN(  82)																int _g179 = v21->length;
HXDLIN(  82)																while((_g178 < _g179)){
HXLINE(  82)																	_g178 = (_g178 + 1);
HXDLIN(  82)																	int i57 = (_g178 - 1);
HXDLIN(  82)																	v21->data->__unsafe_set(i57,0);
            																}
            															}
            														}
HXDLIN(  82)														undoImage19 = v21;
            													}
            													break;
            													case (int)4: {
HXLINE(  82)														 ::iterMagic::StackIntImg sInt8 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)														 ::iterMagic::StackIntImg b49 = sInt8;
HXDLIN(  82)														{
HXLINE(  82)															b49->width = width8;
HXDLIN(  82)															b49->height = height8;
HXDLIN(  82)															b49->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  82)															b49->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  82)															{
HXLINE(  82)																int len17 = b49->length;
HXDLIN(  82)																 ::haxe::ds::GenericStack_Int d8 = b49->data;
HXDLIN(  82)																if (::hx::IsNull( d8->head )) {
HXLINE(  82)																	int _g180 = 0;
HXDLIN(  82)																	int _g181 = len17;
HXDLIN(  82)																	while((_g180 < _g181)){
HXLINE(  82)																		_g180 = (_g180 + 1);
HXDLIN(  82)																		int i58 = (_g180 - 1);
HXDLIN(  82)																		d8->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d8->head);
            																	}
            																}
            																else {
HXLINE(  82)																	int _g182 = 0;
HXDLIN(  82)																	int _g183 = len17;
HXDLIN(  82)																	while((_g182 < _g183)){
HXLINE(  82)																		_g182 = (_g182 + 1);
HXDLIN(  82)																		int i59 = (_g182 - 1);
HXDLIN(  82)																		{
HXLINE(  82)																			 ::haxe::ds::GenericCell_Int l8 = b49->data->head;
HXDLIN(  82)																			 ::haxe::ds::GenericCell_Int prev8 = null();
HXDLIN(  82)																			{
HXLINE(  82)																				int _g184 = 0;
HXDLIN(  82)																				int _g185 = i59;
HXDLIN(  82)																				while((_g184 < _g185)){
HXLINE(  82)																					_g184 = (_g184 + 1);
HXDLIN(  82)																					int i60 = (_g184 - 1);
HXLINE( 345)																					prev8 = l8;
HXLINE( 346)																					l8 = l8->next;
            																				}
            																			}
HXLINE(  82)																			if (::hx::IsNull( prev8 )) {
HXLINE(  82)																				b49->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  82)																				l8 = null();
            																			}
            																			else {
HXLINE(  82)																				prev8->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  82)																				l8 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN(  82)														undoImage19 = b49;
            													}
            													break;
            												}
HXDLIN(  82)												this235->image = undoImage19;
HXDLIN(  82)												this235->width = width8;
HXDLIN(  82)												this235->height = height8;
HXDLIN(  82)												this235->imageType = ( (int)(imageType8) );
HXDLIN(  82)												undoImage18 = this235;
HXDLIN(  82)												{
HXLINE(  82)													int rectLeft6 = xIter36->start;
HXDLIN(  82)													int rectTop6 = yIter36->start;
HXDLIN(  82)													int rectRight6 = xIter36->max;
HXDLIN(  82)													bool forceClear7 = false;
HXDLIN(  82)													{
HXLINE(  82)														int _g186 = rectTop6;
HXDLIN(  82)														int _g187 = yIter36->max;
HXDLIN(  82)														while((_g186 < _g187)){
HXLINE(  82)															_g186 = (_g186 + 1);
HXDLIN(  82)															int dy7 = (_g186 - 1);
HXDLIN(  82)															{
HXLINE(  82)																int _g188 = rectLeft6;
HXDLIN(  82)																int _g189 = rectRight6;
HXDLIN(  82)																while((_g188 < _g189)){
HXLINE(  82)																	_g188 = (_g188 + 1);
HXDLIN(  82)																	int dx7 = (_g188 - 1);
HXDLIN(  82)																	::Dynamic this237 = this234->image;
HXDLIN(  82)																	int index34;
HXDLIN(  82)																	if (this234->useVirtualPos) {
HXLINE(  82)																		index34 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this234->virtualY) * ( (Float)(this234->width) )) + dx7) - this234->virtualX));
            																	}
            																	else {
HXLINE(  82)																		index34 = ::Std_obj::_hx_int(( (Float)(((dy7 * this234->width) + dx7)) ));
            																	}
HXDLIN(  82)																	int c27 = ::iterMagic::Iimg_obj::get(this237,index34);
HXDLIN(  82)																	int col7;
HXDLIN(  82)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																		col7 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            																	}
            																	else {
HXLINE(  82)																		col7 = c27;
            																	}
HXDLIN(  82)																	bool _hx_tmp52;
HXDLIN(  82)																	if (this234->useMask) {
HXLINE(  82)																		_hx_tmp52 = ::hx::IsNotNull( this234->mask );
            																	}
            																	else {
HXLINE(  82)																		_hx_tmp52 = false;
            																	}
HXDLIN(  82)																	if (_hx_tmp52) {
HXLINE(  82)																		 ::pi_xy::ImageStruct this238 = this234->mask;
HXDLIN(  82)																		::Dynamic this239 = this238->image;
HXDLIN(  82)																		int index35;
HXDLIN(  82)																		if (this238->useVirtualPos) {
HXLINE(  82)																			index35 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this238->virtualY) * ( (Float)(this238->width) )) + dx7) - this238->virtualX));
            																		}
            																		else {
HXLINE(  82)																			index35 = ::Std_obj::_hx_int(( (Float)(((dy7 * this238->width) + dx7)) ));
            																		}
HXDLIN(  82)																		int c28 = ::iterMagic::Iimg_obj::get(this239,index35);
HXDLIN(  82)																		int v22;
HXDLIN(  82)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																			v22 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            																		}
            																		else {
HXLINE(  82)																			v22 = c28;
            																		}
HXDLIN(  82)																		int maskPixel7 = v22;
HXDLIN(  82)																		int this240 = col7;
HXDLIN(  82)																		if ((maskPixel7 == 0)) {
HXLINE(  82)																			col7 = this240;
            																		}
            																		else {
HXLINE(  82)																			Float m07;
HXDLIN(  82)																			int this241 = ((maskPixel7 >> 24) & 255);
HXDLIN(  82)																			if ((this241 == 0)) {
HXLINE(  82)																				m07 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				m07 = (( (Float)(this241) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float m17;
HXDLIN(  82)																			int this242 = ((maskPixel7 >> 16) & 255);
HXDLIN(  82)																			if ((this242 == 0)) {
HXLINE(  82)																				m17 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				m17 = (( (Float)(this242) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float m27;
HXDLIN(  82)																			int this243 = ((maskPixel7 >> 8) & 255);
HXDLIN(  82)																			if ((this243 == 0)) {
HXLINE(  82)																				m27 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				m27 = (( (Float)(this243) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float m37;
HXDLIN(  82)																			int this244 = (maskPixel7 & 255);
HXDLIN(  82)																			if ((this244 == 0)) {
HXLINE(  82)																				m37 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				m37 = (( (Float)(this244) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this240 >> 24) & 255)) )));
HXDLIN(  82)																			int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this240 >> 16) & 255)) )));
HXDLIN(  82)																			int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this240 >> 8) & 255)) )));
HXDLIN(  82)																			int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this240 & 255)) )));
HXDLIN(  82)																			col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN(  82)																	if ((col7 != 0)) {
HXLINE(  82)																		int x30 = (dx7 - rectLeft6);
HXDLIN(  82)																		int y30 = (dy7 - rectTop6);
HXDLIN(  82)																		int c29 = col7;
HXDLIN(  82)																		bool _hx_tmp53;
HXDLIN(  82)																		if ((((c29 >> 24) & 255) < 254)) {
HXLINE(  82)																			_hx_tmp53 = undoImage18->transparent;
            																		}
            																		else {
HXLINE(  82)																			_hx_tmp53 = false;
            																		}
HXDLIN(  82)																		if (_hx_tmp53) {
HXLINE(  82)																			int location13;
HXDLIN(  82)																			if (undoImage18->useVirtualPos) {
HXLINE(  82)																				location13 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x30) - undoImage18->virtualX));
            																			}
            																			else {
HXLINE(  82)																				location13 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage18->width) + x30)) ));
            																			}
HXDLIN(  82)																			int this245 = ::iterMagic::Iimg_obj::get(undoImage18->image,location13);
HXDLIN(  82)																			int this246;
HXDLIN(  82)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																				this246 = ((((((this245 >> 24) & 255) << 24) | ((this245 & 255) << 16)) | (((this245 >> 8) & 255) << 8)) | ((this245 >> 16) & 255));
            																			}
            																			else {
HXLINE(  82)																				this246 = this245;
            																			}
HXDLIN(  82)																			Float a116;
HXDLIN(  82)																			int this247 = ((this246 >> 24) & 255);
HXDLIN(  82)																			if ((this247 == 0)) {
HXLINE(  82)																				a116 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				a116 = (( (Float)(this247) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float r113;
HXDLIN(  82)																			int this248 = ((this246 >> 16) & 255);
HXDLIN(  82)																			if ((this248 == 0)) {
HXLINE(  82)																				r113 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				r113 = (( (Float)(this248) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float g113;
HXDLIN(  82)																			int this249 = ((this246 >> 8) & 255);
HXDLIN(  82)																			if ((this249 == 0)) {
HXLINE(  82)																				g113 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				g113 = (( (Float)(this249) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float b119;
HXDLIN(  82)																			int this250 = (this246 & 255);
HXDLIN(  82)																			if ((this250 == 0)) {
HXLINE(  82)																				b119 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				b119 = (( (Float)(this250) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float a215;
HXDLIN(  82)																			int this251 = ((col7 >> 24) & 255);
HXDLIN(  82)																			if ((this251 == 0)) {
HXLINE(  82)																				a215 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				a215 = (( (Float)(this251) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float r213;
HXDLIN(  82)																			int this252 = ((col7 >> 16) & 255);
HXDLIN(  82)																			if ((this252 == 0)) {
HXLINE(  82)																				r213 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				r213 = (( (Float)(this252) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float g213;
HXDLIN(  82)																			int this253 = ((col7 >> 8) & 255);
HXDLIN(  82)																			if ((this253 == 0)) {
HXLINE(  82)																				g213 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				g213 = (( (Float)(this253) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float b217;
HXDLIN(  82)																			int this254 = (col7 & 255);
HXDLIN(  82)																			if ((this254 == 0)) {
HXLINE(  82)																				b217 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				b217 = (( (Float)(this254) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float a314 = (a116 * (( (Float)(1) ) - a215));
HXDLIN(  82)																			int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a314) + (r213 * a215))));
HXDLIN(  82)																			int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a314) + (g213 * a215))));
HXDLIN(  82)																			int b50 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a314) + (b217 * a215))));
HXDLIN(  82)																			int a46 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN(  82)																			int blended13 = ((((a46 << 24) | (r33 << 16)) | (g33 << 8)) | b50);
HXDLIN(  82)																			{
HXLINE(  82)																				int _hx_tmp54;
HXDLIN(  82)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																					_hx_tmp54 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            																				}
            																				else {
HXLINE(  82)																					_hx_tmp54 = blended13;
            																				}
HXDLIN(  82)																				::iterMagic::Iimg_obj::set(undoImage18->image,location13,_hx_tmp54);
            																			}
            																		}
            																		else {
HXLINE(  82)																			::Dynamic this255 = undoImage18->image;
HXDLIN(  82)																			int index36;
HXDLIN(  82)																			if (undoImage18->useVirtualPos) {
HXLINE(  82)																				index36 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x30) - undoImage18->virtualX));
            																			}
            																			else {
HXLINE(  82)																				index36 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage18->width) + x30)) ));
            																			}
HXDLIN(  82)																			int _hx_tmp55;
HXDLIN(  82)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																				_hx_tmp55 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            																			}
            																			else {
HXLINE(  82)																				_hx_tmp55 = c29;
            																			}
HXDLIN(  82)																			::iterMagic::Iimg_obj::set(this255,index36,_hx_tmp55);
            																		}
            																	}
            																	else {
HXLINE(  82)																		if (forceClear7) {
HXLINE(  82)																			::Dynamic this256 = undoImage18->image;
HXDLIN(  82)																			int x31 = (dx7 - rectLeft6);
HXDLIN(  82)																			int y31 = (dy7 - rectTop6);
HXDLIN(  82)																			int index37;
HXDLIN(  82)																			if (undoImage18->useVirtualPos) {
HXLINE(  82)																				index37 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x31) - undoImage18->virtualX));
            																			}
            																			else {
HXLINE(  82)																				index37 = ::Std_obj::_hx_int(( (Float)(((y31 * undoImage18->width) + x31)) ));
            																			}
HXDLIN(  82)																			::iterMagic::Iimg_obj::set(this256,index37,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN(  82)											bool found6 = false;
HXDLIN(  82)											Float s6 = ((Float)0.);
HXDLIN(  82)											Float t6 = ((Float)0.);
HXDLIN(  82)											Float sxx6 = ((Float)0.);
HXDLIN(  82)											Float txx6 = ((Float)0.);
HXDLIN(  82)											{
HXLINE(  82)												int _g_min12 = xIter36->start;
HXDLIN(  82)												int _g_max12 = xIter36->max;
HXDLIN(  82)												while((_g_min12 < _g_max12)){
HXLINE(  82)													_g_min12 = (_g_min12 + 1);
HXDLIN(  82)													int x32 = (_g_min12 - 1);
HXLINE(  60)													sxx6 = (sx6 * ( (Float)(x32) ));
HXLINE(  61)													txx6 = (tx6 * ( (Float)(x32) ));
HXLINE(  62)													found6 = false;
HXLINE(  82)													{
HXLINE(  82)														int _g_min13 = yIter36->start;
HXDLIN(  82)														int _g_max13 = yIter36->max;
HXDLIN(  82)														while((_g_min13 < _g_max13)){
HXLINE(  82)															_g_min13 = (_g_min13 + 1);
HXDLIN(  82)															int y32 = (_g_min13 - 1);
HXLINE(  64)															s6 = ((s06 + sxx6) + (sy6 * ( (Float)(y32) )));
HXLINE(  65)															t6 = ((t06 + txx6) + (ty6 * ( (Float)(y32) )));
HXLINE(  82)															bool _hx_tmp56;
HXDLIN(  82)															if (!((s6 <= 0))) {
HXLINE(  82)																_hx_tmp56 = (t6 <= 0);
            															}
            															else {
HXLINE(  82)																_hx_tmp56 = true;
            															}
HXDLIN(  82)															if (_hx_tmp56) {
HXLINE(  82)																if (found6) {
HXLINE(  82)																	goto _hx_goto_238;
            																}
            															}
            															else {
HXLINE(  82)																if (((s6 + t6) < A6)) {
HXLINE(  82)																	{
HXLINE(  82)																		int c30 = 0;
HXDLIN(  82)																		bool _hx_tmp57;
HXDLIN(  82)																		if ((((c30 >> 24) & 255) < 254)) {
HXLINE(  82)																			_hx_tmp57 = this234->transparent;
            																		}
            																		else {
HXLINE(  82)																			_hx_tmp57 = false;
            																		}
HXDLIN(  82)																		if (_hx_tmp57) {
HXLINE(  82)																			int location14;
HXDLIN(  82)																			if (this234->useVirtualPos) {
HXLINE(  82)																				location14 = ::Std_obj::_hx_int(((((( (Float)(y32) ) - this234->virtualY) * ( (Float)(this234->width) )) + x32) - this234->virtualX));
            																			}
            																			else {
HXLINE(  82)																				location14 = ::Std_obj::_hx_int(( (Float)(((y32 * this234->width) + x32)) ));
            																			}
HXDLIN(  82)																			int this257 = ::iterMagic::Iimg_obj::get(this234->image,location14);
HXDLIN(  82)																			int this258;
HXDLIN(  82)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																				this258 = ((((((this257 >> 24) & 255) << 24) | ((this257 & 255) << 16)) | (((this257 >> 8) & 255) << 8)) | ((this257 >> 16) & 255));
            																			}
            																			else {
HXLINE(  82)																				this258 = this257;
            																			}
HXDLIN(  82)																			Float a117;
HXDLIN(  82)																			int this259 = ((this258 >> 24) & 255);
HXDLIN(  82)																			if ((this259 == 0)) {
HXLINE(  82)																				a117 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				a117 = (( (Float)(this259) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float r114;
HXDLIN(  82)																			int this260 = ((this258 >> 16) & 255);
HXDLIN(  82)																			if ((this260 == 0)) {
HXLINE(  82)																				r114 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				r114 = (( (Float)(this260) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float g114;
HXDLIN(  82)																			int this261 = ((this258 >> 8) & 255);
HXDLIN(  82)																			if ((this261 == 0)) {
HXLINE(  82)																				g114 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				g114 = (( (Float)(this261) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float b120;
HXDLIN(  82)																			int this262 = (this258 & 255);
HXDLIN(  82)																			if ((this262 == 0)) {
HXLINE(  82)																				b120 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				b120 = (( (Float)(this262) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float a216;
HXDLIN(  82)																			int this263 = ((0 >> 24) & 255);
HXDLIN(  82)																			if ((this263 == 0)) {
HXLINE(  82)																				a216 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				a216 = (( (Float)(this263) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float r214;
HXDLIN(  82)																			int this264 = ((0 >> 16) & 255);
HXDLIN(  82)																			if ((this264 == 0)) {
HXLINE(  82)																				r214 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				r214 = (( (Float)(this264) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float g214;
HXDLIN(  82)																			int this265 = ((0 >> 8) & 255);
HXDLIN(  82)																			if ((this265 == 0)) {
HXLINE(  82)																				g214 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				g214 = (( (Float)(this265) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float b218;
HXDLIN(  82)																			int this266 = (0 & 255);
HXDLIN(  82)																			if ((this266 == 0)) {
HXLINE(  82)																				b218 = ((Float)0.);
            																			}
            																			else {
HXLINE(  82)																				b218 = (( (Float)(this266) ) / ( (Float)(255) ));
            																			}
HXDLIN(  82)																			Float a315 = (a117 * (( (Float)(1) ) - a216));
HXDLIN(  82)																			int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a315) + (r214 * a216))));
HXDLIN(  82)																			int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a315) + (g214 * a216))));
HXDLIN(  82)																			int b51 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a315) + (b218 * a216))));
HXDLIN(  82)																			int a47 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN(  82)																			int blended14 = ((((a47 << 24) | (r34 << 16)) | (g34 << 8)) | b51);
HXDLIN(  82)																			{
HXLINE(  82)																				int _hx_tmp58;
HXDLIN(  82)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																					_hx_tmp58 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            																				}
            																				else {
HXLINE(  82)																					_hx_tmp58 = blended14;
            																				}
HXDLIN(  82)																				::iterMagic::Iimg_obj::set(this234->image,location14,_hx_tmp58);
            																			}
            																		}
            																		else {
HXLINE(  82)																			::Dynamic this267 = this234->image;
HXDLIN(  82)																			int index38;
HXDLIN(  82)																			if (this234->useVirtualPos) {
HXLINE(  82)																				index38 = ::Std_obj::_hx_int(((((( (Float)(y32) ) - this234->virtualY) * ( (Float)(this234->width) )) + x32) - this234->virtualX));
            																			}
            																			else {
HXLINE(  82)																				index38 = ::Std_obj::_hx_int(( (Float)(((y32 * this234->width) + x32)) ));
            																			}
HXDLIN(  82)																			int _hx_tmp59;
HXDLIN(  82)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																				_hx_tmp59 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            																			}
            																			else {
HXLINE(  82)																				_hx_tmp59 = c30;
            																			}
HXDLIN(  82)																			::iterMagic::Iimg_obj::set(this267,index38,_hx_tmp59);
            																		}
            																	}
HXLINE(  73)																	found6 = true;
            																}
            																else {
HXLINE(  82)																	if (found6) {
HXLINE(  82)																		goto _hx_goto_238;
            																	}
            																}
            															}
            														}
            														_hx_goto_238:;
            													}
            												}
            											}
HXDLIN(  82)											if ((hasHit6 == true)) {
HXLINE(  82)												 ::pi_xy::algo::HitTri v23 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx8,cy8,bx6,by6,cx9,cy9,true);
HXDLIN(  82)												if (hasUndo6) {
HXLINE(  82)													v23->undoImage = undoImage18;
HXDLIN(  82)													v23->undoX = xIter36->start;
HXDLIN(  82)													v23->undoY = yIter36->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  51)								lastX3 = nextX6;
HXLINE(  52)								lastY3 = nextY6;
            							}
            						}
            					}
            					else {
HXLINE(  82)						int _g190 = 0;
HXDLIN(  82)						int _g191 = (sides7 + 1);
HXDLIN(  82)						while((_g190 < _g191)){
HXLINE(  82)							_g190 = (_g190 + 1);
HXDLIN(  82)							int i61 = (_g190 - 1);
HXDLIN(  82)							Float nextX7 = (cx8 + (rx2 * ::Math_obj::cos((((( (Float)(i61) ) * theta3) + omega3) + ((Float)0.01)))));
HXDLIN(  82)							Float nextY7 = (cy8 + (ry2 * ::Math_obj::sin((((( (Float)(i61) ) * theta3) + omega3) + ((Float)0.01)))));
HXDLIN(  82)							{
HXLINE(  82)								 ::pi_xy::ImageStruct this268 = this233;
HXDLIN(  82)								bool hasHit7 = false;
HXDLIN(  82)								bool hasUndo7 = false;
HXDLIN(  82)								{
HXLINE(  82)									Float bx7 = lastX3;
HXDLIN(  82)									Float by7 = lastY3;
HXDLIN(  82)									Float cx10 = nextX7;
HXDLIN(  82)									Float cy10 = nextY7;
HXDLIN(  82)									bool adjustWinding7 = (((((cx8 * by7) - (bx7 * cy8)) + ((bx7 * cy10) - (cx10 * by7))) + ((cx10 * cy8) - (cx8 * cy10))) > 0);
HXDLIN(  82)									if (!(adjustWinding7)) {
HXLINE(  82)										Float bx_7 = bx7;
HXDLIN(  82)										Float by_7 = by7;
HXLINE(  25)										bx7 = cx10;
HXLINE(  26)										by7 = cy10;
HXLINE(  27)										cx10 = bx_7;
HXLINE(  28)										cy10 = by_7;
            									}
HXLINE(  82)									{
HXLINE(  82)										Float s07 = ((cy8 * cx10) - (cx8 * cy10));
HXDLIN(  82)										Float sx7 = (cy10 - cy8);
HXDLIN(  82)										Float sy7 = (cx8 - cx10);
HXDLIN(  82)										Float t07 = ((cx8 * by7) - (cy8 * bx7));
HXDLIN(  82)										Float tx7 = (cy8 - by7);
HXDLIN(  82)										Float ty7 = (bx7 - cx8);
HXDLIN(  82)										Float A7 = ((((-(by7) * cx10) + (cy8 * (-(bx7) + cx10))) + (cx8 * (by7 - cy10))) + (bx7 * cy10));
HXDLIN(  82)										 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN(  82)										if ((cx8 > bx7)) {
HXLINE(  82)											if ((cx8 > cx10)) {
HXLINE(  82)												int min28;
HXDLIN(  82)												if ((bx7 > cx10)) {
HXLINE(  82)													min28 = ::Math_obj::floor(cx10);
            												}
            												else {
HXLINE(  82)													min28 = ::Math_obj::floor(bx7);
            												}
HXDLIN(  82)												int ii_min56 = min28;
HXDLIN(  82)												int ii_max56 = ::Math_obj::ceil(cx8);
HXDLIN(  82)												xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            											}
            											else {
HXLINE(  82)												int ii_min57 = ::Math_obj::floor(bx7);
HXDLIN(  82)												int ii_max57 = ::Math_obj::ceil(cx10);
HXDLIN(  82)												xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            											}
            										}
            										else {
HXLINE(  82)											if ((bx7 > cx10)) {
HXLINE(  82)												int min29;
HXDLIN(  82)												if ((cx8 > cx10)) {
HXLINE(  82)													min29 = ::Math_obj::floor(cx10);
            												}
            												else {
HXLINE(  82)													min29 = ::Math_obj::ceil(cx8);
            												}
HXDLIN(  82)												int ii_min58 = min29;
HXDLIN(  82)												int ii_max58 = ::Math_obj::ceil(bx7);
HXDLIN(  82)												xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            											}
            											else {
HXLINE(  82)												int ii_min59 = ::Math_obj::floor(cx8);
HXDLIN(  82)												int ii_max59 = ::Math_obj::ceil(cx10);
HXDLIN(  82)												xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            											}
            										}
HXDLIN(  82)										 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN(  82)										if ((cy8 > by7)) {
HXLINE(  82)											if ((cy8 > cy10)) {
HXLINE(  82)												int min30;
HXDLIN(  82)												if ((by7 > cy10)) {
HXLINE(  82)													min30 = ::Math_obj::floor(cy10);
            												}
            												else {
HXLINE(  82)													min30 = ::Math_obj::floor(by7);
            												}
HXDLIN(  82)												int ii_min60 = min30;
HXDLIN(  82)												int ii_max60 = ::Math_obj::ceil(cy8);
HXDLIN(  82)												yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            											}
            											else {
HXLINE(  82)												int ii_min61 = ::Math_obj::floor(by7);
HXDLIN(  82)												int ii_max61 = ::Math_obj::ceil(cy10);
HXDLIN(  82)												yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            											}
            										}
            										else {
HXLINE(  82)											if ((by7 > cy10)) {
HXLINE(  82)												int min31;
HXDLIN(  82)												if ((cy8 > cy10)) {
HXLINE(  82)													min31 = ::Math_obj::floor(cy10);
            												}
            												else {
HXLINE(  82)													min31 = ::Math_obj::ceil(cy8);
            												}
HXDLIN(  82)												int ii_min62 = min31;
HXDLIN(  82)												int ii_max62 = ::Math_obj::ceil(by7);
HXDLIN(  82)												yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            											}
            											else {
HXLINE(  82)												int ii_min63 = ::Math_obj::floor(cy8);
HXDLIN(  82)												int ii_max63 = ::Math_obj::ceil(cy10);
HXDLIN(  82)												yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            											}
            										}
HXDLIN(  82)										 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN(  82)										if (hasUndo7) {
HXLINE(  82)											int width9 = ((xIter37->max - xIter37->start) + 1);
HXDLIN(  82)											int height9 = ((yIter37->max - yIter37->start) + 1);
HXDLIN(  82)											 ::Dynamic imageType9 = null();
HXDLIN(  82)											 ::pi_xy::ImageStruct this269 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  82)											if (::hx::IsNull( imageType9 )) {
HXLINE(  54)												imageType9 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE(  82)											::Dynamic undoImage22;
HXDLIN(  82)											switch((int)(( (int)(imageType9) ))){
            												case (int)0: {
HXLINE(  82)													 ::iterMagic::BytesImg byt9 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  82)													 ::iterMagic::BytesImg b52 = byt9;
HXDLIN(  82)													{
HXLINE(  82)														b52->width = width9;
HXDLIN(  82)														b52->height = height9;
HXDLIN(  82)														b52->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  82)														b52->data = ::haxe::io::Bytes_obj::alloc((b52->length * 4));
HXDLIN(  82)														{
HXLINE(  82)															int len18 = b52->length;
HXDLIN(  82)															int w9 = 0;
HXDLIN(  82)															{
HXLINE(  82)																int _g192 = 0;
HXDLIN(  82)																int _g193 = b52->height;
HXDLIN(  82)																while((_g192 < _g193)){
HXLINE(  82)																	_g192 = (_g192 + 1);
HXDLIN(  82)																	int y33 = (_g192 - 1);
HXDLIN(  82)																	{
HXLINE(  82)																		int _g194 = 0;
HXDLIN(  82)																		int _g195 = b52->width;
HXDLIN(  82)																		while((_g194 < _g195)){
HXLINE(  82)																			_g194 = (_g194 + 1);
HXDLIN(  82)																			int x33 = (_g194 - 1);
HXDLIN(  82)																			{
HXLINE(  82)																				w9 = (w9 + 1);
HXDLIN(  82)																				b52->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  82)																			{
HXLINE(  82)																				w9 = (w9 + 1);
HXDLIN(  82)																				b52->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  82)																			{
HXLINE(  82)																				w9 = (w9 + 1);
HXDLIN(  82)																				b52->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN(  82)																			{
HXLINE(  82)																				w9 = (w9 + 1);
HXDLIN(  82)																				b52->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  82)													undoImage22 = b52;
            												}
            												break;
            												case (int)1: {
HXLINE(  82)													 ::iterMagic::ArrIntImg arrI9 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)													 ::iterMagic::ArrIntImg a48 = arrI9;
HXDLIN(  82)													{
HXLINE(  82)														a48->width = width9;
HXDLIN(  82)														a48->height = height9;
HXDLIN(  82)														a48->data = ::Array_obj< int >::__new(0);
HXDLIN(  82)														a48->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  82)														{
HXLINE(  82)															int _g196 = 0;
HXDLIN(  82)															int _g197 = a48->length;
HXDLIN(  82)															while((_g196 < _g197)){
HXLINE(  82)																_g196 = (_g196 + 1);
HXDLIN(  82)																int i62 = (_g196 - 1);
HXDLIN(  82)																a48->data[i62] = 0;
            															}
            														}
            													}
HXDLIN(  82)													undoImage22 = a48;
            												}
            												break;
            												case (int)2: {
HXLINE(  82)													 ::iterMagic::U32ArrImg u32a9 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  82)													 ::iterMagic::U32ArrImg b53 = u32a9;
HXDLIN(  82)													{
HXLINE(  82)														b53->width = width9;
HXDLIN(  82)														b53->height = height9;
HXDLIN(  82)														b53->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  82)														int size9 = (b53->length * 4);
HXDLIN(  82)														b53->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size9),0,size9);
HXDLIN(  82)														{
HXLINE(  82)															int _g198 = 0;
HXDLIN(  82)															int _g199 = b53->length;
HXDLIN(  82)															while((_g198 < _g199)){
HXLINE(  82)																_g198 = (_g198 + 1);
HXDLIN(  82)																int i63 = (_g198 - 1);
HXDLIN(  82)																{
HXLINE(  82)																	 ::haxe::io::ArrayBufferViewImpl this270 = b53->data;
HXDLIN(  82)																	bool undoImage23;
HXDLIN(  82)																	if ((i63 >= 0)) {
HXLINE(  82)																		undoImage23 = (i63 < (this270->byteLength >> 2));
            																	}
            																	else {
HXLINE(  82)																		undoImage23 = false;
            																	}
HXDLIN(  82)																	if (undoImage23) {
HXLINE(  82)																		 ::haxe::io::Bytes _this9 = this270->bytes;
HXDLIN(  82)																		int pos9 = ((i63 << 2) + this270->byteOffset);
HXDLIN(  82)																		_this9->b[pos9] = ( (unsigned char)(0) );
HXDLIN(  82)																		_this9->b[(pos9 + 1)] = ( (unsigned char)(0) );
HXDLIN(  82)																		_this9->b[(pos9 + 2)] = ( (unsigned char)(0) );
HXDLIN(  82)																		_this9->b[(pos9 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  82)													undoImage22 = b53;
            												}
            												break;
            												case (int)3: {
HXLINE(  82)													 ::iterMagic::VecIntImg vec9 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)													 ::iterMagic::VecIntImg v24 = vec9;
HXDLIN(  82)													{
HXLINE(  82)														v24->width = width9;
HXDLIN(  82)														v24->height = height9;
HXDLIN(  82)														v24->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  82)														v24->data = ::Array_obj< int >::__new(v24->length);
HXDLIN(  82)														{
HXLINE(  82)															int _g200 = 0;
HXDLIN(  82)															int _g201 = v24->length;
HXDLIN(  82)															while((_g200 < _g201)){
HXLINE(  82)																_g200 = (_g200 + 1);
HXDLIN(  82)																int i64 = (_g200 - 1);
HXDLIN(  82)																v24->data->__unsafe_set(i64,0);
            															}
            														}
            													}
HXDLIN(  82)													undoImage22 = v24;
            												}
            												break;
            												case (int)4: {
HXLINE(  82)													 ::iterMagic::StackIntImg sInt9 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)													 ::iterMagic::StackIntImg b54 = sInt9;
HXDLIN(  82)													{
HXLINE(  82)														b54->width = width9;
HXDLIN(  82)														b54->height = height9;
HXDLIN(  82)														b54->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  82)														b54->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  82)														{
HXLINE(  82)															int len19 = b54->length;
HXDLIN(  82)															 ::haxe::ds::GenericStack_Int d9 = b54->data;
HXDLIN(  82)															if (::hx::IsNull( d9->head )) {
HXLINE(  82)																int _g202 = 0;
HXDLIN(  82)																int _g203 = len19;
HXDLIN(  82)																while((_g202 < _g203)){
HXLINE(  82)																	_g202 = (_g202 + 1);
HXDLIN(  82)																	int i65 = (_g202 - 1);
HXDLIN(  82)																	d9->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d9->head);
            																}
            															}
            															else {
HXLINE(  82)																int _g204 = 0;
HXDLIN(  82)																int _g205 = len19;
HXDLIN(  82)																while((_g204 < _g205)){
HXLINE(  82)																	_g204 = (_g204 + 1);
HXDLIN(  82)																	int i66 = (_g204 - 1);
HXDLIN(  82)																	{
HXLINE(  82)																		 ::haxe::ds::GenericCell_Int l9 = b54->data->head;
HXDLIN(  82)																		 ::haxe::ds::GenericCell_Int prev9 = null();
HXDLIN(  82)																		{
HXLINE(  82)																			int _g206 = 0;
HXDLIN(  82)																			int _g207 = i66;
HXDLIN(  82)																			while((_g206 < _g207)){
HXLINE(  82)																				_g206 = (_g206 + 1);
HXDLIN(  82)																				int i67 = (_g206 - 1);
HXLINE( 345)																				prev9 = l9;
HXLINE( 346)																				l9 = l9->next;
            																			}
            																		}
HXLINE(  82)																		if (::hx::IsNull( prev9 )) {
HXLINE(  82)																			b54->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN(  82)																			l9 = null();
            																		}
            																		else {
HXLINE(  82)																			prev9->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN(  82)																			l9 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN(  82)													undoImage22 = b54;
            												}
            												break;
            											}
HXDLIN(  82)											this269->image = undoImage22;
HXDLIN(  82)											this269->width = width9;
HXDLIN(  82)											this269->height = height9;
HXDLIN(  82)											this269->imageType = ( (int)(imageType9) );
HXDLIN(  82)											undoImage21 = this269;
HXDLIN(  82)											{
HXLINE(  82)												int rectLeft7 = xIter37->start;
HXDLIN(  82)												int rectTop7 = yIter37->start;
HXDLIN(  82)												int rectRight7 = xIter37->max;
HXDLIN(  82)												bool forceClear8 = false;
HXDLIN(  82)												{
HXLINE(  82)													int _g208 = rectTop7;
HXDLIN(  82)													int _g209 = yIter37->max;
HXDLIN(  82)													while((_g208 < _g209)){
HXLINE(  82)														_g208 = (_g208 + 1);
HXDLIN(  82)														int dy8 = (_g208 - 1);
HXDLIN(  82)														{
HXLINE(  82)															int _g210 = rectLeft7;
HXDLIN(  82)															int _g211 = rectRight7;
HXDLIN(  82)															while((_g210 < _g211)){
HXLINE(  82)																_g210 = (_g210 + 1);
HXDLIN(  82)																int dx8 = (_g210 - 1);
HXDLIN(  82)																::Dynamic this271 = this268->image;
HXDLIN(  82)																int index39;
HXDLIN(  82)																if (this268->useVirtualPos) {
HXLINE(  82)																	index39 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this268->virtualY) * ( (Float)(this268->width) )) + dx8) - this268->virtualX));
            																}
            																else {
HXLINE(  82)																	index39 = ::Std_obj::_hx_int(( (Float)(((dy8 * this268->width) + dx8)) ));
            																}
HXDLIN(  82)																int c31 = ::iterMagic::Iimg_obj::get(this271,index39);
HXDLIN(  82)																int col8;
HXDLIN(  82)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																	col8 = ((((((c31 >> 24) & 255) << 24) | ((c31 & 255) << 16)) | (((c31 >> 8) & 255) << 8)) | ((c31 >> 16) & 255));
            																}
            																else {
HXLINE(  82)																	col8 = c31;
            																}
HXDLIN(  82)																bool _hx_tmp60;
HXDLIN(  82)																if (this268->useMask) {
HXLINE(  82)																	_hx_tmp60 = ::hx::IsNotNull( this268->mask );
            																}
            																else {
HXLINE(  82)																	_hx_tmp60 = false;
            																}
HXDLIN(  82)																if (_hx_tmp60) {
HXLINE(  82)																	 ::pi_xy::ImageStruct this272 = this268->mask;
HXDLIN(  82)																	::Dynamic this273 = this272->image;
HXDLIN(  82)																	int index40;
HXDLIN(  82)																	if (this272->useVirtualPos) {
HXLINE(  82)																		index40 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this272->virtualY) * ( (Float)(this272->width) )) + dx8) - this272->virtualX));
            																	}
            																	else {
HXLINE(  82)																		index40 = ::Std_obj::_hx_int(( (Float)(((dy8 * this272->width) + dx8)) ));
            																	}
HXDLIN(  82)																	int c32 = ::iterMagic::Iimg_obj::get(this273,index40);
HXDLIN(  82)																	int v25;
HXDLIN(  82)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																		v25 = ((((((c32 >> 24) & 255) << 24) | ((c32 & 255) << 16)) | (((c32 >> 8) & 255) << 8)) | ((c32 >> 16) & 255));
            																	}
            																	else {
HXLINE(  82)																		v25 = c32;
            																	}
HXDLIN(  82)																	int maskPixel8 = v25;
HXDLIN(  82)																	int this274 = col8;
HXDLIN(  82)																	if ((maskPixel8 == 0)) {
HXLINE(  82)																		col8 = this274;
            																	}
            																	else {
HXLINE(  82)																		Float m08;
HXDLIN(  82)																		int this275 = ((maskPixel8 >> 24) & 255);
HXDLIN(  82)																		if ((this275 == 0)) {
HXLINE(  82)																			m08 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			m08 = (( (Float)(this275) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float m18;
HXDLIN(  82)																		int this276 = ((maskPixel8 >> 16) & 255);
HXDLIN(  82)																		if ((this276 == 0)) {
HXLINE(  82)																			m18 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			m18 = (( (Float)(this276) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float m28;
HXDLIN(  82)																		int this277 = ((maskPixel8 >> 8) & 255);
HXDLIN(  82)																		if ((this277 == 0)) {
HXLINE(  82)																			m28 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			m28 = (( (Float)(this277) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float m38;
HXDLIN(  82)																		int this278 = (maskPixel8 & 255);
HXDLIN(  82)																		if ((this278 == 0)) {
HXLINE(  82)																			m38 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			m38 = (( (Float)(this278) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		int ch08 = ::Std_obj::_hx_int(((((Float)1.) - m08) * ( (Float)(((this274 >> 24) & 255)) )));
HXDLIN(  82)																		int ch18 = ::Std_obj::_hx_int(((((Float)1.) - m18) * ( (Float)(((this274 >> 16) & 255)) )));
HXDLIN(  82)																		int ch28 = ::Std_obj::_hx_int(((((Float)1.) - m28) * ( (Float)(((this274 >> 8) & 255)) )));
HXDLIN(  82)																		int ch38 = ::Std_obj::_hx_int(((((Float)1.) - m38) * ( (Float)((this274 & 255)) )));
HXDLIN(  82)																		col8 = ((((::Math_obj::round((( (Float)(ch08) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch18) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch28) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch38) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  82)																if ((col8 != 0)) {
HXLINE(  82)																	int x34 = (dx8 - rectLeft7);
HXDLIN(  82)																	int y34 = (dy8 - rectTop7);
HXDLIN(  82)																	int c33 = col8;
HXDLIN(  82)																	bool _hx_tmp61;
HXDLIN(  82)																	if ((((c33 >> 24) & 255) < 254)) {
HXLINE(  82)																		_hx_tmp61 = undoImage21->transparent;
            																	}
            																	else {
HXLINE(  82)																		_hx_tmp61 = false;
            																	}
HXDLIN(  82)																	if (_hx_tmp61) {
HXLINE(  82)																		int location15;
HXDLIN(  82)																		if (undoImage21->useVirtualPos) {
HXLINE(  82)																			location15 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x34) - undoImage21->virtualX));
            																		}
            																		else {
HXLINE(  82)																			location15 = ::Std_obj::_hx_int(( (Float)(((y34 * undoImage21->width) + x34)) ));
            																		}
HXDLIN(  82)																		int this279 = ::iterMagic::Iimg_obj::get(undoImage21->image,location15);
HXDLIN(  82)																		int this280;
HXDLIN(  82)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																			this280 = ((((((this279 >> 24) & 255) << 24) | ((this279 & 255) << 16)) | (((this279 >> 8) & 255) << 8)) | ((this279 >> 16) & 255));
            																		}
            																		else {
HXLINE(  82)																			this280 = this279;
            																		}
HXDLIN(  82)																		Float a118;
HXDLIN(  82)																		int this281 = ((this280 >> 24) & 255);
HXDLIN(  82)																		if ((this281 == 0)) {
HXLINE(  82)																			a118 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			a118 = (( (Float)(this281) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float r115;
HXDLIN(  82)																		int this282 = ((this280 >> 16) & 255);
HXDLIN(  82)																		if ((this282 == 0)) {
HXLINE(  82)																			r115 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			r115 = (( (Float)(this282) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float g115;
HXDLIN(  82)																		int this283 = ((this280 >> 8) & 255);
HXDLIN(  82)																		if ((this283 == 0)) {
HXLINE(  82)																			g115 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			g115 = (( (Float)(this283) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float b121;
HXDLIN(  82)																		int this284 = (this280 & 255);
HXDLIN(  82)																		if ((this284 == 0)) {
HXLINE(  82)																			b121 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			b121 = (( (Float)(this284) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float a217;
HXDLIN(  82)																		int this285 = ((col8 >> 24) & 255);
HXDLIN(  82)																		if ((this285 == 0)) {
HXLINE(  82)																			a217 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			a217 = (( (Float)(this285) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float r215;
HXDLIN(  82)																		int this286 = ((col8 >> 16) & 255);
HXDLIN(  82)																		if ((this286 == 0)) {
HXLINE(  82)																			r215 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			r215 = (( (Float)(this286) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float g215;
HXDLIN(  82)																		int this287 = ((col8 >> 8) & 255);
HXDLIN(  82)																		if ((this287 == 0)) {
HXLINE(  82)																			g215 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			g215 = (( (Float)(this287) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float b219;
HXDLIN(  82)																		int this288 = (col8 & 255);
HXDLIN(  82)																		if ((this288 == 0)) {
HXLINE(  82)																			b219 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			b219 = (( (Float)(this288) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float a316 = (a118 * (( (Float)(1) ) - a217));
HXDLIN(  82)																		int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a316) + (r215 * a217))));
HXDLIN(  82)																		int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a316) + (g215 * a217))));
HXDLIN(  82)																		int b55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b121 * a316) + (b219 * a217))));
HXDLIN(  82)																		int a49 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN(  82)																		int blended15 = ((((a49 << 24) | (r35 << 16)) | (g35 << 8)) | b55);
HXDLIN(  82)																		{
HXLINE(  82)																			int _hx_tmp62;
HXDLIN(  82)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																				_hx_tmp62 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            																			}
            																			else {
HXLINE(  82)																				_hx_tmp62 = blended15;
            																			}
HXDLIN(  82)																			::iterMagic::Iimg_obj::set(undoImage21->image,location15,_hx_tmp62);
            																		}
            																	}
            																	else {
HXLINE(  82)																		::Dynamic this289 = undoImage21->image;
HXDLIN(  82)																		int index41;
HXDLIN(  82)																		if (undoImage21->useVirtualPos) {
HXLINE(  82)																			index41 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x34) - undoImage21->virtualX));
            																		}
            																		else {
HXLINE(  82)																			index41 = ::Std_obj::_hx_int(( (Float)(((y34 * undoImage21->width) + x34)) ));
            																		}
HXDLIN(  82)																		int _hx_tmp63;
HXDLIN(  82)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																			_hx_tmp63 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            																		}
            																		else {
HXLINE(  82)																			_hx_tmp63 = c33;
            																		}
HXDLIN(  82)																		::iterMagic::Iimg_obj::set(this289,index41,_hx_tmp63);
            																	}
            																}
            																else {
HXLINE(  82)																	if (forceClear8) {
HXLINE(  82)																		::Dynamic this290 = undoImage21->image;
HXDLIN(  82)																		int x35 = (dx8 - rectLeft7);
HXDLIN(  82)																		int y35 = (dy8 - rectTop7);
HXDLIN(  82)																		int index42;
HXDLIN(  82)																		if (undoImage21->useVirtualPos) {
HXLINE(  82)																			index42 = ::Std_obj::_hx_int(((((( (Float)(y35) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x35) - undoImage21->virtualX));
            																		}
            																		else {
HXLINE(  82)																			index42 = ::Std_obj::_hx_int(( (Float)(((y35 * undoImage21->width) + x35)) ));
            																		}
HXDLIN(  82)																		::iterMagic::Iimg_obj::set(this290,index42,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  82)										bool found7 = false;
HXDLIN(  82)										Float s7 = ((Float)0.);
HXDLIN(  82)										Float t7 = ((Float)0.);
HXDLIN(  82)										Float sxx7 = ((Float)0.);
HXDLIN(  82)										Float txx7 = ((Float)0.);
HXDLIN(  82)										{
HXLINE(  82)											int _g_min14 = xIter37->start;
HXDLIN(  82)											int _g_max14 = xIter37->max;
HXDLIN(  82)											while((_g_min14 < _g_max14)){
HXLINE(  82)												_g_min14 = (_g_min14 + 1);
HXDLIN(  82)												int x36 = (_g_min14 - 1);
HXLINE(  60)												sxx7 = (sx7 * ( (Float)(x36) ));
HXLINE(  61)												txx7 = (tx7 * ( (Float)(x36) ));
HXLINE(  62)												found7 = false;
HXLINE(  82)												{
HXLINE(  82)													int _g_min15 = yIter37->start;
HXDLIN(  82)													int _g_max15 = yIter37->max;
HXDLIN(  82)													while((_g_min15 < _g_max15)){
HXLINE(  82)														_g_min15 = (_g_min15 + 1);
HXDLIN(  82)														int y36 = (_g_min15 - 1);
HXLINE(  64)														s7 = ((s07 + sxx7) + (sy7 * ( (Float)(y36) )));
HXLINE(  65)														t7 = ((t07 + txx7) + (ty7 * ( (Float)(y36) )));
HXLINE(  82)														bool _hx_tmp64;
HXDLIN(  82)														if (!((s7 <= 0))) {
HXLINE(  82)															_hx_tmp64 = (t7 <= 0);
            														}
            														else {
HXLINE(  82)															_hx_tmp64 = true;
            														}
HXDLIN(  82)														if (_hx_tmp64) {
HXLINE(  82)															if (found7) {
HXLINE(  82)																goto _hx_goto_251;
            															}
            														}
            														else {
HXLINE(  82)															if (((s7 + t7) < A7)) {
HXLINE(  82)																{
HXLINE(  82)																	int c34 = 0;
HXDLIN(  82)																	bool _hx_tmp65;
HXDLIN(  82)																	if ((((c34 >> 24) & 255) < 254)) {
HXLINE(  82)																		_hx_tmp65 = this268->transparent;
            																	}
            																	else {
HXLINE(  82)																		_hx_tmp65 = false;
            																	}
HXDLIN(  82)																	if (_hx_tmp65) {
HXLINE(  82)																		int location16;
HXDLIN(  82)																		if (this268->useVirtualPos) {
HXLINE(  82)																			location16 = ::Std_obj::_hx_int(((((( (Float)(y36) ) - this268->virtualY) * ( (Float)(this268->width) )) + x36) - this268->virtualX));
            																		}
            																		else {
HXLINE(  82)																			location16 = ::Std_obj::_hx_int(( (Float)(((y36 * this268->width) + x36)) ));
            																		}
HXDLIN(  82)																		int this291 = ::iterMagic::Iimg_obj::get(this268->image,location16);
HXDLIN(  82)																		int this292;
HXDLIN(  82)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																			this292 = ((((((this291 >> 24) & 255) << 24) | ((this291 & 255) << 16)) | (((this291 >> 8) & 255) << 8)) | ((this291 >> 16) & 255));
            																		}
            																		else {
HXLINE(  82)																			this292 = this291;
            																		}
HXDLIN(  82)																		Float a119;
HXDLIN(  82)																		int this293 = ((this292 >> 24) & 255);
HXDLIN(  82)																		if ((this293 == 0)) {
HXLINE(  82)																			a119 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			a119 = (( (Float)(this293) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float r116;
HXDLIN(  82)																		int this294 = ((this292 >> 16) & 255);
HXDLIN(  82)																		if ((this294 == 0)) {
HXLINE(  82)																			r116 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			r116 = (( (Float)(this294) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float g116;
HXDLIN(  82)																		int this295 = ((this292 >> 8) & 255);
HXDLIN(  82)																		if ((this295 == 0)) {
HXLINE(  82)																			g116 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			g116 = (( (Float)(this295) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float b122;
HXDLIN(  82)																		int this296 = (this292 & 255);
HXDLIN(  82)																		if ((this296 == 0)) {
HXLINE(  82)																			b122 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			b122 = (( (Float)(this296) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float a218;
HXDLIN(  82)																		int this297 = ((0 >> 24) & 255);
HXDLIN(  82)																		if ((this297 == 0)) {
HXLINE(  82)																			a218 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			a218 = (( (Float)(this297) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float r216;
HXDLIN(  82)																		int this298 = ((0 >> 16) & 255);
HXDLIN(  82)																		if ((this298 == 0)) {
HXLINE(  82)																			r216 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			r216 = (( (Float)(this298) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float g216;
HXDLIN(  82)																		int this299 = ((0 >> 8) & 255);
HXDLIN(  82)																		if ((this299 == 0)) {
HXLINE(  82)																			g216 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			g216 = (( (Float)(this299) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float b220;
HXDLIN(  82)																		int this300 = (0 & 255);
HXDLIN(  82)																		if ((this300 == 0)) {
HXLINE(  82)																			b220 = ((Float)0.);
            																		}
            																		else {
HXLINE(  82)																			b220 = (( (Float)(this300) ) / ( (Float)(255) ));
            																		}
HXDLIN(  82)																		Float a317 = (a119 * (( (Float)(1) ) - a218));
HXDLIN(  82)																		int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a317) + (r216 * a218))));
HXDLIN(  82)																		int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a317) + (g216 * a218))));
HXDLIN(  82)																		int b56 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b122 * a317) + (b220 * a218))));
HXDLIN(  82)																		int a50 = ::Std_obj::_hx_int((( (Float)(255) ) * (a317 + a218)));
HXDLIN(  82)																		int blended16 = ((((a50 << 24) | (r36 << 16)) | (g36 << 8)) | b56);
HXDLIN(  82)																		{
HXLINE(  82)																			int _hx_tmp66;
HXDLIN(  82)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																				_hx_tmp66 = ((((((blended16 >> 24) & 255) << 24) | ((blended16 & 255) << 16)) | (((blended16 >> 8) & 255) << 8)) | ((blended16 >> 16) & 255));
            																			}
            																			else {
HXLINE(  82)																				_hx_tmp66 = blended16;
            																			}
HXDLIN(  82)																			::iterMagic::Iimg_obj::set(this268->image,location16,_hx_tmp66);
            																		}
            																	}
            																	else {
HXLINE(  82)																		::Dynamic this301 = this268->image;
HXDLIN(  82)																		int index43;
HXDLIN(  82)																		if (this268->useVirtualPos) {
HXLINE(  82)																			index43 = ::Std_obj::_hx_int(((((( (Float)(y36) ) - this268->virtualY) * ( (Float)(this268->width) )) + x36) - this268->virtualX));
            																		}
            																		else {
HXLINE(  82)																			index43 = ::Std_obj::_hx_int(( (Float)(((y36 * this268->width) + x36)) ));
            																		}
HXDLIN(  82)																		int _hx_tmp67;
HXDLIN(  82)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																			_hx_tmp67 = ((((((c34 >> 24) & 255) << 24) | ((c34 & 255) << 16)) | (((c34 >> 8) & 255) << 8)) | ((c34 >> 16) & 255));
            																		}
            																		else {
HXLINE(  82)																			_hx_tmp67 = c34;
            																		}
HXDLIN(  82)																		::iterMagic::Iimg_obj::set(this301,index43,_hx_tmp67);
            																	}
            																}
HXLINE(  73)																found7 = true;
            															}
            															else {
HXLINE(  82)																if (found7) {
HXLINE(  82)																	goto _hx_goto_251;
            																}
            															}
            														}
            													}
            													_hx_goto_251:;
            												}
            											}
            										}
HXDLIN(  82)										if ((hasHit7 == true)) {
HXLINE(  82)											 ::pi_xy::algo::HitTri v26 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx8,cy8,bx7,by7,cx10,cy10,true);
HXDLIN(  82)											if (hasUndo7) {
HXLINE(  82)												v26->undoImage = undoImage21;
HXDLIN(  82)												v26->undoX = xIter37->start;
HXDLIN(  82)												v26->undoY = yIter37->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  59)							lastX3 = nextX7;
HXLINE(  60)							lastY3 = nextY7;
            						}
            					}
            				}
            			}
HXLINE(  87)			{
HXLINE(  87)				int x37 = ::Std_obj::_hx_int(((cx - rx) - rDif));
HXDLIN(  87)				int y37 = ::Std_obj::_hx_int(((cy - ry) - rDif));
HXDLIN(  87)				bool forceClear9 = false;
HXDLIN(  87)				{
HXLINE(  87)					int _g212 = 0;
HXDLIN(  87)					int _g213 = temp->height;
HXDLIN(  87)					while((_g212 < _g213)){
HXLINE(  87)						_g212 = (_g212 + 1);
HXDLIN(  87)						int dy9 = (_g212 - 1);
HXDLIN(  87)						{
HXLINE(  87)							int _g214 = 0;
HXDLIN(  87)							int _g215 = temp->width;
HXDLIN(  87)							while((_g214 < _g215)){
HXLINE(  87)								_g214 = (_g214 + 1);
HXDLIN(  87)								int dx9 = (_g214 - 1);
HXDLIN(  87)								::Dynamic this302 = temp->image;
HXDLIN(  87)								int index44;
HXDLIN(  87)								if (temp->useVirtualPos) {
HXLINE(  87)									index44 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx9) - temp->virtualX));
            								}
            								else {
HXLINE(  87)									index44 = ::Std_obj::_hx_int(( (Float)(((dy9 * temp->width) + dx9)) ));
            								}
HXDLIN(  87)								int c35 = ::iterMagic::Iimg_obj::get(this302,index44);
HXDLIN(  87)								int col9;
HXDLIN(  87)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)									col9 = ((((((c35 >> 24) & 255) << 24) | ((c35 & 255) << 16)) | (((c35 >> 8) & 255) << 8)) | ((c35 >> 16) & 255));
            								}
            								else {
HXLINE(  87)									col9 = c35;
            								}
HXDLIN(  87)								bool _hx_tmp68;
HXDLIN(  87)								if (temp->useMask) {
HXLINE(  87)									_hx_tmp68 = ::hx::IsNotNull( temp->mask );
            								}
            								else {
HXLINE(  87)									_hx_tmp68 = false;
            								}
HXDLIN(  87)								if (_hx_tmp68) {
HXLINE(  87)									 ::pi_xy::ImageStruct this303 = temp->mask;
HXDLIN(  87)									::Dynamic this304 = this303->image;
HXDLIN(  87)									int index45;
HXDLIN(  87)									if (this303->useVirtualPos) {
HXLINE(  87)										index45 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this303->virtualY) * ( (Float)(this303->width) )) + dx9) - this303->virtualX));
            									}
            									else {
HXLINE(  87)										index45 = ::Std_obj::_hx_int(( (Float)(((dy9 * this303->width) + dx9)) ));
            									}
HXDLIN(  87)									int c36 = ::iterMagic::Iimg_obj::get(this304,index45);
HXDLIN(  87)									int v27;
HXDLIN(  87)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)										v27 = ((((((c36 >> 24) & 255) << 24) | ((c36 & 255) << 16)) | (((c36 >> 8) & 255) << 8)) | ((c36 >> 16) & 255));
            									}
            									else {
HXLINE(  87)										v27 = c36;
            									}
HXDLIN(  87)									int maskPixel9 = v27;
HXDLIN(  87)									int this305 = col9;
HXDLIN(  87)									if ((maskPixel9 == 0)) {
HXLINE(  87)										col9 = this305;
            									}
            									else {
HXLINE(  87)										Float m09;
HXDLIN(  87)										int this306 = ((maskPixel9 >> 24) & 255);
HXDLIN(  87)										if ((this306 == 0)) {
HXLINE(  87)											m09 = ((Float)0.);
            										}
            										else {
HXLINE(  87)											m09 = (( (Float)(this306) ) / ( (Float)(255) ));
            										}
HXDLIN(  87)										Float m19;
HXDLIN(  87)										int this307 = ((maskPixel9 >> 16) & 255);
HXDLIN(  87)										if ((this307 == 0)) {
HXLINE(  87)											m19 = ((Float)0.);
            										}
            										else {
HXLINE(  87)											m19 = (( (Float)(this307) ) / ( (Float)(255) ));
            										}
HXDLIN(  87)										Float m29;
HXDLIN(  87)										int this308 = ((maskPixel9 >> 8) & 255);
HXDLIN(  87)										if ((this308 == 0)) {
HXLINE(  87)											m29 = ((Float)0.);
            										}
            										else {
HXLINE(  87)											m29 = (( (Float)(this308) ) / ( (Float)(255) ));
            										}
HXDLIN(  87)										Float m39;
HXDLIN(  87)										int this309 = (maskPixel9 & 255);
HXDLIN(  87)										if ((this309 == 0)) {
HXLINE(  87)											m39 = ((Float)0.);
            										}
            										else {
HXLINE(  87)											m39 = (( (Float)(this309) ) / ( (Float)(255) ));
            										}
HXDLIN(  87)										int ch09 = ::Std_obj::_hx_int(((((Float)1.) - m09) * ( (Float)(((this305 >> 24) & 255)) )));
HXDLIN(  87)										int ch19 = ::Std_obj::_hx_int(((((Float)1.) - m19) * ( (Float)(((this305 >> 16) & 255)) )));
HXDLIN(  87)										int ch29 = ::Std_obj::_hx_int(((((Float)1.) - m29) * ( (Float)(((this305 >> 8) & 255)) )));
HXDLIN(  87)										int ch39 = ::Std_obj::_hx_int(((((Float)1.) - m39) * ( (Float)((this305 & 255)) )));
HXDLIN(  87)										col9 = ((((::Math_obj::round((( (Float)(ch09) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch19) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch29) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch39) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN(  87)								if ((col9 != 0)) {
HXLINE(  87)									int x38 = (x37 + dx9);
HXDLIN(  87)									int y38 = (y37 + dy9);
HXDLIN(  87)									int c37 = col9;
HXDLIN(  87)									bool _hx_tmp69;
HXDLIN(  87)									if ((((c37 >> 24) & 255) < 254)) {
HXLINE(  87)										_hx_tmp69 = this1->transparent;
            									}
            									else {
HXLINE(  87)										_hx_tmp69 = false;
            									}
HXDLIN(  87)									if (_hx_tmp69) {
HXLINE(  87)										int location17;
HXDLIN(  87)										if (this1->useVirtualPos) {
HXLINE(  87)											location17 = ::Std_obj::_hx_int(((((( (Float)(y38) ) - this1->virtualY) * ( (Float)(this1->width) )) + x38) - this1->virtualX));
            										}
            										else {
HXLINE(  87)											location17 = ::Std_obj::_hx_int(( (Float)(((y38 * this1->width) + x38)) ));
            										}
HXDLIN(  87)										int this310 = ::iterMagic::Iimg_obj::get(this1->image,location17);
HXDLIN(  87)										int this311;
HXDLIN(  87)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)											this311 = ((((((this310 >> 24) & 255) << 24) | ((this310 & 255) << 16)) | (((this310 >> 8) & 255) << 8)) | ((this310 >> 16) & 255));
            										}
            										else {
HXLINE(  87)											this311 = this310;
            										}
HXDLIN(  87)										Float a120;
HXDLIN(  87)										int this312 = ((this311 >> 24) & 255);
HXDLIN(  87)										if ((this312 == 0)) {
HXLINE(  87)											a120 = ((Float)0.);
            										}
            										else {
HXLINE(  87)											a120 = (( (Float)(this312) ) / ( (Float)(255) ));
            										}
HXDLIN(  87)										Float r117;
HXDLIN(  87)										int this313 = ((this311 >> 16) & 255);
HXDLIN(  87)										if ((this313 == 0)) {
HXLINE(  87)											r117 = ((Float)0.);
            										}
            										else {
HXLINE(  87)											r117 = (( (Float)(this313) ) / ( (Float)(255) ));
            										}
HXDLIN(  87)										Float g117;
HXDLIN(  87)										int this314 = ((this311 >> 8) & 255);
HXDLIN(  87)										if ((this314 == 0)) {
HXLINE(  87)											g117 = ((Float)0.);
            										}
            										else {
HXLINE(  87)											g117 = (( (Float)(this314) ) / ( (Float)(255) ));
            										}
HXDLIN(  87)										Float b123;
HXDLIN(  87)										int this315 = (this311 & 255);
HXDLIN(  87)										if ((this315 == 0)) {
HXLINE(  87)											b123 = ((Float)0.);
            										}
            										else {
HXLINE(  87)											b123 = (( (Float)(this315) ) / ( (Float)(255) ));
            										}
HXDLIN(  87)										Float a219;
HXDLIN(  87)										int this316 = ((col9 >> 24) & 255);
HXDLIN(  87)										if ((this316 == 0)) {
HXLINE(  87)											a219 = ((Float)0.);
            										}
            										else {
HXLINE(  87)											a219 = (( (Float)(this316) ) / ( (Float)(255) ));
            										}
HXDLIN(  87)										Float r217;
HXDLIN(  87)										int this317 = ((col9 >> 16) & 255);
HXDLIN(  87)										if ((this317 == 0)) {
HXLINE(  87)											r217 = ((Float)0.);
            										}
            										else {
HXLINE(  87)											r217 = (( (Float)(this317) ) / ( (Float)(255) ));
            										}
HXDLIN(  87)										Float g217;
HXDLIN(  87)										int this318 = ((col9 >> 8) & 255);
HXDLIN(  87)										if ((this318 == 0)) {
HXLINE(  87)											g217 = ((Float)0.);
            										}
            										else {
HXLINE(  87)											g217 = (( (Float)(this318) ) / ( (Float)(255) ));
            										}
HXDLIN(  87)										Float b221;
HXDLIN(  87)										int this319 = (col9 & 255);
HXDLIN(  87)										if ((this319 == 0)) {
HXLINE(  87)											b221 = ((Float)0.);
            										}
            										else {
HXLINE(  87)											b221 = (( (Float)(this319) ) / ( (Float)(255) ));
            										}
HXDLIN(  87)										Float a318 = (a120 * (( (Float)(1) ) - a219));
HXDLIN(  87)										int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a318) + (r217 * a219))));
HXDLIN(  87)										int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a318) + (g217 * a219))));
HXDLIN(  87)										int b57 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b123 * a318) + (b221 * a219))));
HXDLIN(  87)										int a51 = ::Std_obj::_hx_int((( (Float)(255) ) * (a318 + a219)));
HXDLIN(  87)										int blended17 = ((((a51 << 24) | (r37 << 16)) | (g37 << 8)) | b57);
HXDLIN(  87)										{
HXLINE(  87)											int _hx_tmp70;
HXDLIN(  87)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)												_hx_tmp70 = ((((((blended17 >> 24) & 255) << 24) | ((blended17 & 255) << 16)) | (((blended17 >> 8) & 255) << 8)) | ((blended17 >> 16) & 255));
            											}
            											else {
HXLINE(  87)												_hx_tmp70 = blended17;
            											}
HXDLIN(  87)											::iterMagic::Iimg_obj::set(this1->image,location17,_hx_tmp70);
            										}
            									}
            									else {
HXLINE(  87)										::Dynamic this320 = this1->image;
HXDLIN(  87)										int index46;
HXDLIN(  87)										if (this1->useVirtualPos) {
HXLINE(  87)											index46 = ::Std_obj::_hx_int(((((( (Float)(y38) ) - this1->virtualY) * ( (Float)(this1->width) )) + x38) - this1->virtualX));
            										}
            										else {
HXLINE(  87)											index46 = ::Std_obj::_hx_int(( (Float)(((y38 * this1->width) + x38)) ));
            										}
HXDLIN(  87)										int _hx_tmp71;
HXDLIN(  87)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)											_hx_tmp71 = ((((((c37 >> 24) & 255) << 24) | ((c37 & 255) << 16)) | (((c37 >> 8) & 255) << 8)) | ((c37 >> 16) & 255));
            										}
            										else {
HXLINE(  87)											_hx_tmp71 = c37;
            										}
HXDLIN(  87)										::iterMagic::Iimg_obj::set(this320,index46,_hx_tmp71);
            									}
            								}
            								else {
HXLINE(  87)									if (forceClear9) {
HXLINE(  87)										::Dynamic this321 = this1->image;
HXDLIN(  87)										int x39 = (x37 + dx9);
HXDLIN(  87)										int y39 = (y37 + dy9);
HXDLIN(  87)										int index47;
HXDLIN(  87)										if (this1->useVirtualPos) {
HXLINE(  87)											index47 = ::Std_obj::_hx_int(((((( (Float)(y39) ) - this1->virtualY) * ( (Float)(this1->width) )) + x39) - this1->virtualX));
            										}
            										else {
HXLINE(  87)											index47 = ::Std_obj::_hx_int(( (Float)(((y39 * this1->width) + x39)) ));
            										}
HXDLIN(  87)										::iterMagic::Iimg_obj::set(this321,index47,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  90)		temp = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(LineShape_Impl__obj,ellipseTri,(void))

void LineShape_Impl__obj::radialEllipseTri( ::pi_xy::ImageStruct this1,Float cx,Float cy,Float rx,Float ry,Float drx,Float dry,int colorIn,int colorOut,::hx::Null< Float >  __o_gx,::hx::Null< Float >  __o_gy, ::Dynamic __o_phi, ::Dynamic __o_printSides, ::Dynamic __o_targetError){
            		Float gx = __o_gx.Default(((Float)0.));
            		Float gy = __o_gy.Default(((Float)0.));
            		 ::Dynamic phi = __o_phi;
            		if (::hx::IsNull(__o_phi)) phi = 0;
            		 ::Dynamic printSides = __o_printSides;
            		if (::hx::IsNull(__o_printSides)) printSides = false;
            		 ::Dynamic targetError = __o_targetError;
            		if (::hx::IsNull(__o_targetError)) targetError = ((Float)1.05);
            	HX_GC_STACKFRAME(&_hx_pos_a14a7b5d04c7c47a_107_radialEllipseTri)
HXLINE( 108)		Float rSmall;
HXDLIN( 108)		if ((rx > ry)) {
HXLINE( 108)			rSmall = ry;
            		}
            		else {
HXLINE( 108)			rSmall = rx;
            		}
HXLINE( 109)		Float rLarge;
HXDLIN( 109)		if ((rx < ry)) {
HXLINE( 109)			rLarge = ry;
            		}
            		else {
HXLINE( 109)			rLarge = rx;
            		}
HXLINE( 110)		Float rDif = (rLarge - rSmall);
HXLINE( 111)		 ::Dynamic targetE = targetError;
HXDLIN( 111)		if (::hx::IsNull( targetE )) {
HXLINE( 111)			targetE = ((Float)1.05);
            		}
HXDLIN( 111)		int result = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE) ) / rSmall)))));
HXDLIN( 111)		int noSides;
HXDLIN( 111)		if ((result < 12)) {
HXLINE( 111)			noSides = 12;
            		}
            		else {
HXLINE( 111)			if ((result > 500)) {
HXLINE( 111)				noSides = 500;
            			}
            			else {
HXLINE( 111)				noSides = result;
            			}
            		}
HXLINE( 112)		if (( (bool)(printSides) )) {
HXLINE( 112)			::haxe::Log_obj::trace(noSides,::hx::SourceInfo(HX_("src/pi_xy/imageAbstracts/LineShape.hx",37,f7,10,fd),112,HX_("pi_xy.imageAbstracts._LineShape.LineShape_Impl_",1e,bb,98,b9),HX_("radialEllipseTri",ac,ee,5f,59)));
            		}
HXLINE( 113)		 ::pi_xy::ImageStruct temp;
HXDLIN( 113)		if (::hx::IsEq( phi,0 )) {
HXLINE( 113)			int width = ::Std_obj::_hx_int((( (Float)(2) ) * rx));
HXDLIN( 113)			int height = ::Std_obj::_hx_int((( (Float)(2) ) * ry));
HXDLIN( 113)			 ::Dynamic imageType = null();
HXDLIN( 113)			 ::pi_xy::ImageStruct this2 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 113)			if (::hx::IsNull( imageType )) {
HXLINE(  54)				imageType = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 113)			::Dynamic temp1;
HXDLIN( 113)			switch((int)(( (int)(imageType) ))){
            				case (int)0: {
HXLINE( 113)					 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 113)					 ::iterMagic::BytesImg b = byt;
HXDLIN( 113)					{
HXLINE( 113)						b->width = width;
HXDLIN( 113)						b->height = height;
HXDLIN( 113)						b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 113)						b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 113)						{
HXLINE( 113)							int len = b->length;
HXDLIN( 113)							int w = 0;
HXDLIN( 113)							{
HXLINE( 113)								int _g = 0;
HXDLIN( 113)								int _g1 = b->height;
HXDLIN( 113)								while((_g < _g1)){
HXLINE( 113)									_g = (_g + 1);
HXDLIN( 113)									int y = (_g - 1);
HXDLIN( 113)									{
HXLINE( 113)										int _g2 = 0;
HXDLIN( 113)										int _g3 = b->width;
HXDLIN( 113)										while((_g2 < _g3)){
HXLINE( 113)											_g2 = (_g2 + 1);
HXDLIN( 113)											int x = (_g2 - 1);
HXDLIN( 113)											{
HXLINE( 113)												w = (w + 1);
HXDLIN( 113)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 113)											{
HXLINE( 113)												w = (w + 1);
HXDLIN( 113)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 113)											{
HXLINE( 113)												w = (w + 1);
HXDLIN( 113)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 113)											{
HXLINE( 113)												w = (w + 1);
HXDLIN( 113)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 113)					temp1 = b;
            				}
            				break;
            				case (int)1: {
HXLINE( 113)					 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 113)					 ::iterMagic::ArrIntImg a = arrI;
HXDLIN( 113)					{
HXLINE( 113)						a->width = width;
HXDLIN( 113)						a->height = height;
HXDLIN( 113)						a->data = ::Array_obj< int >::__new(0);
HXDLIN( 113)						a->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 113)						{
HXLINE( 113)							int _g4 = 0;
HXDLIN( 113)							int _g5 = a->length;
HXDLIN( 113)							while((_g4 < _g5)){
HXLINE( 113)								_g4 = (_g4 + 1);
HXDLIN( 113)								int i = (_g4 - 1);
HXDLIN( 113)								a->data[i] = 0;
            							}
            						}
            					}
HXDLIN( 113)					temp1 = a;
            				}
            				break;
            				case (int)2: {
HXLINE( 113)					 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 113)					 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 113)					{
HXLINE( 113)						b1->width = width;
HXDLIN( 113)						b1->height = height;
HXDLIN( 113)						b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 113)						int size = (b1->length * 4);
HXDLIN( 113)						b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 113)						{
HXLINE( 113)							int _g6 = 0;
HXDLIN( 113)							int _g7 = b1->length;
HXDLIN( 113)							while((_g6 < _g7)){
HXLINE( 113)								_g6 = (_g6 + 1);
HXDLIN( 113)								int i1 = (_g6 - 1);
HXDLIN( 113)								{
HXLINE( 113)									 ::haxe::io::ArrayBufferViewImpl this3 = b1->data;
HXDLIN( 113)									bool temp2;
HXDLIN( 113)									if ((i1 >= 0)) {
HXLINE( 113)										temp2 = (i1 < (this3->byteLength >> 2));
            									}
            									else {
HXLINE( 113)										temp2 = false;
            									}
HXDLIN( 113)									if (temp2) {
HXLINE( 113)										 ::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 113)										int pos = ((i1 << 2) + this3->byteOffset);
HXDLIN( 113)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 113)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 113)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 113)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 113)					temp1 = b1;
            				}
            				break;
            				case (int)3: {
HXLINE( 113)					 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 113)					 ::iterMagic::VecIntImg v = vec;
HXDLIN( 113)					{
HXLINE( 113)						v->width = width;
HXDLIN( 113)						v->height = height;
HXDLIN( 113)						v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 113)						v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 113)						{
HXLINE( 113)							int _g8 = 0;
HXDLIN( 113)							int _g9 = v->length;
HXDLIN( 113)							while((_g8 < _g9)){
HXLINE( 113)								_g8 = (_g8 + 1);
HXDLIN( 113)								int i2 = (_g8 - 1);
HXDLIN( 113)								v->data->__unsafe_set(i2,0);
            							}
            						}
            					}
HXDLIN( 113)					temp1 = v;
            				}
            				break;
            				case (int)4: {
HXLINE( 113)					 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 113)					 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 113)					{
HXLINE( 113)						b2->width = width;
HXDLIN( 113)						b2->height = height;
HXDLIN( 113)						b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 113)						b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 113)						{
HXLINE( 113)							int len1 = b2->length;
HXDLIN( 113)							 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 113)							if (::hx::IsNull( d->head )) {
HXLINE( 113)								int _g10 = 0;
HXDLIN( 113)								int _g11 = len1;
HXDLIN( 113)								while((_g10 < _g11)){
HXLINE( 113)									_g10 = (_g10 + 1);
HXDLIN( 113)									int i3 = (_g10 - 1);
HXDLIN( 113)									d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            								}
            							}
            							else {
HXLINE( 113)								int _g12 = 0;
HXDLIN( 113)								int _g13 = len1;
HXDLIN( 113)								while((_g12 < _g13)){
HXLINE( 113)									_g12 = (_g12 + 1);
HXDLIN( 113)									int i4 = (_g12 - 1);
HXDLIN( 113)									{
HXLINE( 113)										 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 113)										 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 113)										{
HXLINE( 113)											int _g14 = 0;
HXDLIN( 113)											int _g15 = i4;
HXDLIN( 113)											while((_g14 < _g15)){
HXLINE( 113)												_g14 = (_g14 + 1);
HXDLIN( 113)												int i5 = (_g14 - 1);
HXLINE( 345)												prev = l;
HXLINE( 346)												l = l->next;
            											}
            										}
HXLINE( 113)										if (::hx::IsNull( prev )) {
HXLINE( 113)											b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 113)											l = null();
            										}
            										else {
HXLINE( 113)											prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 113)											l = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 113)					temp1 = b2;
            				}
            				break;
            			}
HXDLIN( 113)			this2->image = temp1;
HXDLIN( 113)			this2->width = width;
HXDLIN( 113)			this2->height = height;
HXDLIN( 113)			this2->imageType = ( (int)(imageType) );
HXDLIN( 113)			temp = this2;
            		}
            		else {
HXLINE( 113)			int width1 = ::Std_obj::_hx_int(((( (Float)(2) ) * rLarge) + rDif));
HXDLIN( 113)			int height1 = ::Std_obj::_hx_int(((( (Float)(2) ) * rLarge) + rDif));
HXDLIN( 113)			 ::Dynamic imageType1 = null();
HXDLIN( 113)			 ::pi_xy::ImageStruct this4 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 113)			if (::hx::IsNull( imageType1 )) {
HXLINE(  54)				imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 113)			::Dynamic temp3;
HXDLIN( 113)			switch((int)(( (int)(imageType1) ))){
            				case (int)0: {
HXLINE( 113)					 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 113)					 ::iterMagic::BytesImg b3 = byt1;
HXDLIN( 113)					{
HXLINE( 113)						b3->width = width1;
HXDLIN( 113)						b3->height = height1;
HXDLIN( 113)						b3->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 113)						b3->data = ::haxe::io::Bytes_obj::alloc((b3->length * 4));
HXDLIN( 113)						{
HXLINE( 113)							int len2 = b3->length;
HXDLIN( 113)							int w1 = 0;
HXDLIN( 113)							{
HXLINE( 113)								int _g16 = 0;
HXDLIN( 113)								int _g17 = b3->height;
HXDLIN( 113)								while((_g16 < _g17)){
HXLINE( 113)									_g16 = (_g16 + 1);
HXDLIN( 113)									int y1 = (_g16 - 1);
HXDLIN( 113)									{
HXLINE( 113)										int _g18 = 0;
HXDLIN( 113)										int _g19 = b3->width;
HXDLIN( 113)										while((_g18 < _g19)){
HXLINE( 113)											_g18 = (_g18 + 1);
HXDLIN( 113)											int x1 = (_g18 - 1);
HXDLIN( 113)											{
HXLINE( 113)												w1 = (w1 + 1);
HXDLIN( 113)												b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 113)											{
HXLINE( 113)												w1 = (w1 + 1);
HXDLIN( 113)												b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 113)											{
HXLINE( 113)												w1 = (w1 + 1);
HXDLIN( 113)												b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 113)											{
HXLINE( 113)												w1 = (w1 + 1);
HXDLIN( 113)												b3->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 113)					temp3 = b3;
            				}
            				break;
            				case (int)1: {
HXLINE( 113)					 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 113)					 ::iterMagic::ArrIntImg a1 = arrI1;
HXDLIN( 113)					{
HXLINE( 113)						a1->width = width1;
HXDLIN( 113)						a1->height = height1;
HXDLIN( 113)						a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 113)						a1->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 113)						{
HXLINE( 113)							int _g20 = 0;
HXDLIN( 113)							int _g21 = a1->length;
HXDLIN( 113)							while((_g20 < _g21)){
HXLINE( 113)								_g20 = (_g20 + 1);
HXDLIN( 113)								int i6 = (_g20 - 1);
HXDLIN( 113)								a1->data[i6] = 0;
            							}
            						}
            					}
HXDLIN( 113)					temp3 = a1;
            				}
            				break;
            				case (int)2: {
HXLINE( 113)					 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 113)					 ::iterMagic::U32ArrImg b4 = u32a1;
HXDLIN( 113)					{
HXLINE( 113)						b4->width = width1;
HXDLIN( 113)						b4->height = height1;
HXDLIN( 113)						b4->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 113)						int size1 = (b4->length * 4);
HXDLIN( 113)						b4->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 113)						{
HXLINE( 113)							int _g22 = 0;
HXDLIN( 113)							int _g23 = b4->length;
HXDLIN( 113)							while((_g22 < _g23)){
HXLINE( 113)								_g22 = (_g22 + 1);
HXDLIN( 113)								int i7 = (_g22 - 1);
HXDLIN( 113)								{
HXLINE( 113)									 ::haxe::io::ArrayBufferViewImpl this5 = b4->data;
HXDLIN( 113)									bool temp4;
HXDLIN( 113)									if ((i7 >= 0)) {
HXLINE( 113)										temp4 = (i7 < (this5->byteLength >> 2));
            									}
            									else {
HXLINE( 113)										temp4 = false;
            									}
HXDLIN( 113)									if (temp4) {
HXLINE( 113)										 ::haxe::io::Bytes _this1 = this5->bytes;
HXDLIN( 113)										int pos1 = ((i7 << 2) + this5->byteOffset);
HXDLIN( 113)										_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 113)										_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 113)										_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 113)										_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 113)					temp3 = b4;
            				}
            				break;
            				case (int)3: {
HXLINE( 113)					 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 113)					 ::iterMagic::VecIntImg v1 = vec1;
HXDLIN( 113)					{
HXLINE( 113)						v1->width = width1;
HXDLIN( 113)						v1->height = height1;
HXDLIN( 113)						v1->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 113)						v1->data = ::Array_obj< int >::__new(v1->length);
HXDLIN( 113)						{
HXLINE( 113)							int _g24 = 0;
HXDLIN( 113)							int _g25 = v1->length;
HXDLIN( 113)							while((_g24 < _g25)){
HXLINE( 113)								_g24 = (_g24 + 1);
HXDLIN( 113)								int i8 = (_g24 - 1);
HXDLIN( 113)								v1->data->__unsafe_set(i8,0);
            							}
            						}
            					}
HXDLIN( 113)					temp3 = v1;
            				}
            				break;
            				case (int)4: {
HXLINE( 113)					 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 113)					 ::iterMagic::StackIntImg b5 = sInt1;
HXDLIN( 113)					{
HXLINE( 113)						b5->width = width1;
HXDLIN( 113)						b5->height = height1;
HXDLIN( 113)						b5->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 113)						b5->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 113)						{
HXLINE( 113)							int len3 = b5->length;
HXDLIN( 113)							 ::haxe::ds::GenericStack_Int d1 = b5->data;
HXDLIN( 113)							if (::hx::IsNull( d1->head )) {
HXLINE( 113)								int _g26 = 0;
HXDLIN( 113)								int _g27 = len3;
HXDLIN( 113)								while((_g26 < _g27)){
HXLINE( 113)									_g26 = (_g26 + 1);
HXDLIN( 113)									int i9 = (_g26 - 1);
HXDLIN( 113)									d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            								}
            							}
            							else {
HXLINE( 113)								int _g28 = 0;
HXDLIN( 113)								int _g29 = len3;
HXDLIN( 113)								while((_g28 < _g29)){
HXLINE( 113)									_g28 = (_g28 + 1);
HXDLIN( 113)									int i10 = (_g28 - 1);
HXDLIN( 113)									{
HXLINE( 113)										 ::haxe::ds::GenericCell_Int l1 = b5->data->head;
HXDLIN( 113)										 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 113)										{
HXLINE( 113)											int _g30 = 0;
HXDLIN( 113)											int _g31 = i10;
HXDLIN( 113)											while((_g30 < _g31)){
HXLINE( 113)												_g30 = (_g30 + 1);
HXDLIN( 113)												int i11 = (_g30 - 1);
HXLINE( 345)												prev1 = l1;
HXLINE( 346)												l1 = l1->next;
            											}
            										}
HXLINE( 113)										if (::hx::IsNull( prev1 )) {
HXLINE( 113)											b5->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 113)											l1 = null();
            										}
            										else {
HXLINE( 113)											prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 113)											l1 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 113)					temp3 = b5;
            				}
            				break;
            			}
HXDLIN( 113)			this4->image = temp3;
HXDLIN( 113)			this4->width = width1;
HXDLIN( 113)			this4->height = height1;
HXDLIN( 113)			this4->imageType = ( (int)(imageType1) );
HXDLIN( 113)			temp = this4;
            		}
HXLINE( 114)		temp->transparent = false;
HXLINE( 115)		if (::hx::IsEq( phi,0 )) {
HXLINE( 116)			 ::Dynamic gx1 = gx;
HXDLIN( 116)			 ::Dynamic gy1 = gy;
HXDLIN( 116)			 ::Dynamic phi1 = phi;
HXDLIN( 116)			 ::Dynamic sides = noSides;
HXLINE( 122)			if (::hx::IsNull( sides )) {
HXLINE( 122)				sides = 36;
            			}
HXLINE( 121)			if (::hx::IsNull( phi1 )) {
HXLINE( 121)				phi1 = ((Float)0.);
            			}
HXLINE( 120)			if (::hx::IsNull( gy1 )) {
HXLINE( 120)				gy1 = 0;
            			}
HXDLIN( 120)			if (::hx::IsNull( gx1 )) {
HXLINE( 120)				gx1 = 0;
            			}
HXLINE( 116)			if (::hx::IsLess( gx1,((Float)-1.) )) {
HXLINE( 193)				gx1 = -1;
            			}
HXLINE( 116)			if (::hx::IsGreater( gx1,((Float)1.) )) {
HXLINE( 194)				gx1 = 1;
            			}
HXLINE( 116)			if (::hx::IsLess( gy1,((Float)-1.) )) {
HXLINE( 195)				gy1 = ((Float)-1.);
            			}
HXLINE( 116)			if (::hx::IsGreater( gy1,((Float)1.) )) {
HXLINE( 196)				gy1 = 1;
            			}
HXLINE( 116)			Float mx = (rx + (( (Float)(gx1) ) * rx));
HXDLIN( 116)			Float my = (ry + (( (Float)(gy1) ) * ry));
HXDLIN( 116)			Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides) ));
HXDLIN( 116)			Float omega = ((Float)0.);
HXDLIN( 116)			Float lastX = ((Float)0.);
HXDLIN( 116)			Float lastY = ((Float)0.);
HXDLIN( 116)			if (::hx::IsNotEq( phi1,0 )) {
HXLINE( 221)				lastX = ((((rx * ::Math_obj::cos(((( (Float)(sides) ) * theta) + omega))) * ::Math_obj::cos(( (Float)(phi1) ))) - ((ry * ::Math_obj::sin(((( (Float)(sides) ) * theta) + omega))) * ::Math_obj::sin(( (Float)(phi1) )))) + rx);
HXLINE( 222)				lastY = ((((rx * ::Math_obj::cos(((( (Float)(sides) ) * theta) + omega))) * ::Math_obj::sin(( (Float)(phi1) ))) + ((ry * ::Math_obj::sin(((( (Float)(sides) ) * theta) + omega))) * ::Math_obj::cos(( (Float)(phi1) )))) + ry);
            			}
            			else {
HXLINE( 224)				lastX = (rx + (rx * ::Math_obj::cos(((( (Float)(sides) ) * theta) + omega))));
HXLINE( 225)				lastY = (ry + (ry * ::Math_obj::sin(((( (Float)(sides) ) * theta) + omega))));
            			}
HXLINE( 116)			if (::hx::IsNotEq( phi1,0 )) {
HXLINE( 116)				Float cphi = ::Math_obj::cos(( (Float)(phi1) ));
HXDLIN( 116)				Float sphi = ::Math_obj::sin(( (Float)(phi1) ));
HXDLIN( 116)				{
HXLINE( 116)					int _g32 = 0;
HXDLIN( 116)					int _g33 = (sides + 1);
HXDLIN( 116)					while((_g32 < _g33)){
HXLINE( 116)						_g32 = (_g32 + 1);
HXDLIN( 116)						int i12 = (_g32 - 1);
HXDLIN( 116)						Float stheta = ::Math_obj::sin(((( (Float)(i12) ) * theta) + omega));
HXDLIN( 116)						Float ctheta = ::Math_obj::cos(((( (Float)(i12) ) * theta) + omega));
HXDLIN( 116)						Float nextX = ((((rx * ctheta) * cphi) - ((ry * stheta) * sphi)) + rx);
HXDLIN( 116)						Float nextY = ((((rx * ctheta) * sphi) + ((ry * stheta) * cphi)) + ry);
HXDLIN( 116)						{
HXLINE( 116)							 ::pi_xy::ImageStruct this6 = temp;
HXDLIN( 116)							{
HXLINE( 116)								bool hasHit = false;
HXDLIN( 116)								bool hasUndo = false;
HXDLIN( 116)								int aA = ((colorOut >> 24) & 255);
HXDLIN( 116)								int rA = ((colorOut >> 16) & 255);
HXDLIN( 116)								int gA = ((colorOut >> 8) & 255);
HXDLIN( 116)								int bA = (colorOut & 255);
HXDLIN( 116)								int aB = ((colorIn >> 24) & 255);
HXDLIN( 116)								int rB = ((colorIn >> 16) & 255);
HXDLIN( 116)								int gB = ((colorIn >> 8) & 255);
HXDLIN( 116)								int bB = (colorIn & 255);
HXDLIN( 116)								int aC = ((colorOut >> 24) & 255);
HXDLIN( 116)								int rC = ((colorOut >> 16) & 255);
HXDLIN( 116)								int gC = ((colorOut >> 8) & 255);
HXDLIN( 116)								int bC = (colorOut & 255);
HXDLIN( 116)								Float bcx = (lastX - nextX);
HXDLIN( 116)								Float bcy = (lastY - nextY);
HXDLIN( 116)								Float acx = (mx - nextX);
HXDLIN( 116)								Float acy = (my - nextY);
HXDLIN( 116)								Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 116)								Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 116)								Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 116)								Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 116)								 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 116)								if ((mx > lastX)) {
HXLINE( 116)									if ((mx > nextX)) {
HXLINE( 116)										int min;
HXDLIN( 116)										if ((lastX > nextX)) {
HXLINE( 116)											min = ::Math_obj::floor(nextX);
            										}
            										else {
HXLINE( 116)											min = ::Math_obj::floor(lastX);
            										}
HXDLIN( 116)										int ii_min = min;
HXDLIN( 116)										int ii_max = ::Math_obj::ceil(mx);
HXDLIN( 116)										xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            									}
            									else {
HXLINE( 116)										int ii_min1 = ::Math_obj::floor(lastX);
HXDLIN( 116)										int ii_max1 = ::Math_obj::ceil(nextX);
HXDLIN( 116)										xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            									}
            								}
            								else {
HXLINE( 116)									if ((lastX > nextX)) {
HXLINE( 116)										int min1;
HXDLIN( 116)										if ((mx > nextX)) {
HXLINE( 116)											min1 = ::Math_obj::floor(nextX);
            										}
            										else {
HXLINE( 116)											min1 = ::Math_obj::ceil(mx);
            										}
HXDLIN( 116)										int ii_min2 = min1;
HXDLIN( 116)										int ii_max2 = ::Math_obj::ceil(lastX);
HXDLIN( 116)										xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            									}
            									else {
HXLINE( 116)										int ii_min3 = ::Math_obj::floor(mx);
HXDLIN( 116)										int ii_max3 = ::Math_obj::ceil(nextX);
HXDLIN( 116)										xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            									}
            								}
HXDLIN( 116)								 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 116)								if ((my > lastY)) {
HXLINE( 116)									if ((my > nextY)) {
HXLINE( 116)										int min2;
HXDLIN( 116)										if ((lastY > nextY)) {
HXLINE( 116)											min2 = ::Math_obj::floor(nextY);
            										}
            										else {
HXLINE( 116)											min2 = ::Math_obj::floor(lastY);
            										}
HXDLIN( 116)										int ii_min4 = min2;
HXDLIN( 116)										int ii_max4 = ::Math_obj::ceil(my);
HXDLIN( 116)										yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            									}
            									else {
HXLINE( 116)										int ii_min5 = ::Math_obj::floor(lastY);
HXDLIN( 116)										int ii_max5 = ::Math_obj::ceil(nextY);
HXDLIN( 116)										yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            									}
            								}
            								else {
HXLINE( 116)									if ((lastY > nextY)) {
HXLINE( 116)										int min3;
HXDLIN( 116)										if ((my > nextY)) {
HXLINE( 116)											min3 = ::Math_obj::floor(nextY);
            										}
            										else {
HXLINE( 116)											min3 = ::Math_obj::ceil(my);
            										}
HXDLIN( 116)										int ii_min6 = min3;
HXDLIN( 116)										int ii_max6 = ::Math_obj::ceil(lastY);
HXDLIN( 116)										yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            									}
            									else {
HXLINE( 116)										int ii_min7 = ::Math_obj::floor(my);
HXDLIN( 116)										int ii_max7 = ::Math_obj::ceil(nextY);
HXDLIN( 116)										yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            									}
            								}
HXDLIN( 116)								 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 116)								if (hasUndo) {
HXLINE( 116)									int width2 = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 116)									int height2 = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 116)									 ::Dynamic imageType2 = null();
HXDLIN( 116)									 ::pi_xy::ImageStruct this7 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 116)									if (::hx::IsNull( imageType2 )) {
HXLINE(  54)										imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            									}
HXLINE( 116)									::Dynamic undoImage1;
HXDLIN( 116)									switch((int)(( (int)(imageType2) ))){
            										case (int)0: {
HXLINE( 116)											 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 116)											 ::iterMagic::BytesImg b6 = byt2;
HXDLIN( 116)											{
HXLINE( 116)												b6->width = width2;
HXDLIN( 116)												b6->height = height2;
HXDLIN( 116)												b6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 116)												b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 116)												{
HXLINE( 116)													int len4 = b6->length;
HXDLIN( 116)													int w2 = 0;
HXDLIN( 116)													{
HXLINE( 116)														int _g34 = 0;
HXDLIN( 116)														int _g35 = b6->height;
HXDLIN( 116)														while((_g34 < _g35)){
HXLINE( 116)															_g34 = (_g34 + 1);
HXDLIN( 116)															int y2 = (_g34 - 1);
HXDLIN( 116)															{
HXLINE( 116)																int _g36 = 0;
HXDLIN( 116)																int _g37 = b6->width;
HXDLIN( 116)																while((_g36 < _g37)){
HXLINE( 116)																	_g36 = (_g36 + 1);
HXDLIN( 116)																	int x2 = (_g36 - 1);
HXDLIN( 116)																	{
HXLINE( 116)																		w2 = (w2 + 1);
HXDLIN( 116)																		b6->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN( 116)																	{
HXLINE( 116)																		w2 = (w2 + 1);
HXDLIN( 116)																		b6->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN( 116)																	{
HXLINE( 116)																		w2 = (w2 + 1);
HXDLIN( 116)																		b6->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN( 116)																	{
HXLINE( 116)																		w2 = (w2 + 1);
HXDLIN( 116)																		b6->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN( 116)											undoImage1 = b6;
            										}
            										break;
            										case (int)1: {
HXLINE( 116)											 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 116)											 ::iterMagic::ArrIntImg a2 = arrI2;
HXDLIN( 116)											{
HXLINE( 116)												a2->width = width2;
HXDLIN( 116)												a2->height = height2;
HXDLIN( 116)												a2->data = ::Array_obj< int >::__new(0);
HXDLIN( 116)												a2->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 116)												{
HXLINE( 116)													int _g38 = 0;
HXDLIN( 116)													int _g39 = a2->length;
HXDLIN( 116)													while((_g38 < _g39)){
HXLINE( 116)														_g38 = (_g38 + 1);
HXDLIN( 116)														int i13 = (_g38 - 1);
HXDLIN( 116)														a2->data[i13] = 0;
            													}
            												}
            											}
HXDLIN( 116)											undoImage1 = a2;
            										}
            										break;
            										case (int)2: {
HXLINE( 116)											 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 116)											 ::iterMagic::U32ArrImg b7 = u32a2;
HXDLIN( 116)											{
HXLINE( 116)												b7->width = width2;
HXDLIN( 116)												b7->height = height2;
HXDLIN( 116)												b7->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 116)												int size2 = (b7->length * 4);
HXDLIN( 116)												b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 116)												{
HXLINE( 116)													int _g40 = 0;
HXDLIN( 116)													int _g41 = b7->length;
HXDLIN( 116)													while((_g40 < _g41)){
HXLINE( 116)														_g40 = (_g40 + 1);
HXDLIN( 116)														int i14 = (_g40 - 1);
HXDLIN( 116)														{
HXLINE( 116)															 ::haxe::io::ArrayBufferViewImpl this8 = b7->data;
HXDLIN( 116)															bool undoImage2;
HXDLIN( 116)															if ((i14 >= 0)) {
HXLINE( 116)																undoImage2 = (i14 < (this8->byteLength >> 2));
            															}
            															else {
HXLINE( 116)																undoImage2 = false;
            															}
HXDLIN( 116)															if (undoImage2) {
HXLINE( 116)																 ::haxe::io::Bytes _this2 = this8->bytes;
HXDLIN( 116)																int pos2 = ((i14 << 2) + this8->byteOffset);
HXDLIN( 116)																_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 116)																_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 116)																_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 116)																_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
HXDLIN( 116)											undoImage1 = b7;
            										}
            										break;
            										case (int)3: {
HXLINE( 116)											 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 116)											 ::iterMagic::VecIntImg v2 = vec2;
HXDLIN( 116)											{
HXLINE( 116)												v2->width = width2;
HXDLIN( 116)												v2->height = height2;
HXDLIN( 116)												v2->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 116)												v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 116)												{
HXLINE( 116)													int _g42 = 0;
HXDLIN( 116)													int _g43 = v2->length;
HXDLIN( 116)													while((_g42 < _g43)){
HXLINE( 116)														_g42 = (_g42 + 1);
HXDLIN( 116)														int i15 = (_g42 - 1);
HXDLIN( 116)														v2->data->__unsafe_set(i15,0);
            													}
            												}
            											}
HXDLIN( 116)											undoImage1 = v2;
            										}
            										break;
            										case (int)4: {
HXLINE( 116)											 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 116)											 ::iterMagic::StackIntImg b8 = sInt2;
HXDLIN( 116)											{
HXLINE( 116)												b8->width = width2;
HXDLIN( 116)												b8->height = height2;
HXDLIN( 116)												b8->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 116)												b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 116)												{
HXLINE( 116)													int len5 = b8->length;
HXDLIN( 116)													 ::haxe::ds::GenericStack_Int d2 = b8->data;
HXDLIN( 116)													if (::hx::IsNull( d2->head )) {
HXLINE( 116)														int _g44 = 0;
HXDLIN( 116)														int _g45 = len5;
HXDLIN( 116)														while((_g44 < _g45)){
HXLINE( 116)															_g44 = (_g44 + 1);
HXDLIN( 116)															int i16 = (_g44 - 1);
HXDLIN( 116)															d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            														}
            													}
            													else {
HXLINE( 116)														int _g46 = 0;
HXDLIN( 116)														int _g47 = len5;
HXDLIN( 116)														while((_g46 < _g47)){
HXLINE( 116)															_g46 = (_g46 + 1);
HXDLIN( 116)															int i17 = (_g46 - 1);
HXDLIN( 116)															{
HXLINE( 116)																 ::haxe::ds::GenericCell_Int l2 = b8->data->head;
HXDLIN( 116)																 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 116)																{
HXLINE( 116)																	int _g48 = 0;
HXDLIN( 116)																	int _g49 = i17;
HXDLIN( 116)																	while((_g48 < _g49)){
HXLINE( 116)																		_g48 = (_g48 + 1);
HXDLIN( 116)																		int i18 = (_g48 - 1);
HXLINE( 345)																		prev2 = l2;
HXLINE( 346)																		l2 = l2->next;
            																	}
            																}
HXLINE( 116)																if (::hx::IsNull( prev2 )) {
HXLINE( 116)																	b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 116)																	l2 = null();
            																}
            																else {
HXLINE( 116)																	prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 116)																	l2 = null();
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN( 116)											undoImage1 = b8;
            										}
            										break;
            									}
HXDLIN( 116)									this7->image = undoImage1;
HXDLIN( 116)									this7->width = width2;
HXDLIN( 116)									this7->height = height2;
HXDLIN( 116)									this7->imageType = ( (int)(imageType2) );
HXDLIN( 116)									undoImage = this7;
HXDLIN( 116)									{
HXLINE( 116)										int rectLeft = xIter3->start;
HXDLIN( 116)										int rectTop = yIter3->start;
HXDLIN( 116)										int rectRight = xIter3->max;
HXDLIN( 116)										bool forceClear = false;
HXDLIN( 116)										{
HXLINE( 116)											int _g50 = rectTop;
HXDLIN( 116)											int _g51 = yIter3->max;
HXDLIN( 116)											while((_g50 < _g51)){
HXLINE( 116)												_g50 = (_g50 + 1);
HXDLIN( 116)												int dy = (_g50 - 1);
HXDLIN( 116)												{
HXLINE( 116)													int _g52 = rectLeft;
HXDLIN( 116)													int _g53 = rectRight;
HXDLIN( 116)													while((_g52 < _g53)){
HXLINE( 116)														_g52 = (_g52 + 1);
HXDLIN( 116)														int dx = (_g52 - 1);
HXDLIN( 116)														::Dynamic this9 = this6->image;
HXDLIN( 116)														int index;
HXDLIN( 116)														if (this6->useVirtualPos) {
HXLINE( 116)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this6->virtualY) * ( (Float)(this6->width) )) + dx) - this6->virtualX));
            														}
            														else {
HXLINE( 116)															index = ::Std_obj::_hx_int(( (Float)(((dy * this6->width) + dx)) ));
            														}
HXDLIN( 116)														int c = ::iterMagic::Iimg_obj::get(this9,index);
HXDLIN( 116)														int col;
HXDLIN( 116)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)															col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 116)															col = c;
            														}
HXDLIN( 116)														bool _hx_tmp;
HXDLIN( 116)														if (this6->useMask) {
HXLINE( 116)															_hx_tmp = ::hx::IsNotNull( this6->mask );
            														}
            														else {
HXLINE( 116)															_hx_tmp = false;
            														}
HXDLIN( 116)														if (_hx_tmp) {
HXLINE( 116)															 ::pi_xy::ImageStruct this10 = this6->mask;
HXDLIN( 116)															::Dynamic this11 = this10->image;
HXDLIN( 116)															int index1;
HXDLIN( 116)															if (this10->useVirtualPos) {
HXLINE( 116)																index1 = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this10->virtualY) * ( (Float)(this10->width) )) + dx) - this10->virtualX));
            															}
            															else {
HXLINE( 116)																index1 = ::Std_obj::_hx_int(( (Float)(((dy * this10->width) + dx)) ));
            															}
HXDLIN( 116)															int c1 = ::iterMagic::Iimg_obj::get(this11,index1);
HXDLIN( 116)															int v3;
HXDLIN( 116)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																v3 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            															}
            															else {
HXLINE( 116)																v3 = c1;
            															}
HXDLIN( 116)															int maskPixel = v3;
HXDLIN( 116)															int this12 = col;
HXDLIN( 116)															if ((maskPixel == 0)) {
HXLINE( 116)																col = this12;
            															}
            															else {
HXLINE( 116)																Float m0;
HXDLIN( 116)																int this13 = ((maskPixel >> 24) & 255);
HXDLIN( 116)																if ((this13 == 0)) {
HXLINE( 116)																	m0 = ((Float)0.);
            																}
            																else {
HXLINE( 116)																	m0 = (( (Float)(this13) ) / ( (Float)(255) ));
            																}
HXDLIN( 116)																Float m1;
HXDLIN( 116)																int this14 = ((maskPixel >> 16) & 255);
HXDLIN( 116)																if ((this14 == 0)) {
HXLINE( 116)																	m1 = ((Float)0.);
            																}
            																else {
HXLINE( 116)																	m1 = (( (Float)(this14) ) / ( (Float)(255) ));
            																}
HXDLIN( 116)																Float m2;
HXDLIN( 116)																int this15 = ((maskPixel >> 8) & 255);
HXDLIN( 116)																if ((this15 == 0)) {
HXLINE( 116)																	m2 = ((Float)0.);
            																}
            																else {
HXLINE( 116)																	m2 = (( (Float)(this15) ) / ( (Float)(255) ));
            																}
HXDLIN( 116)																Float m3;
HXDLIN( 116)																int this16 = (maskPixel & 255);
HXDLIN( 116)																if ((this16 == 0)) {
HXLINE( 116)																	m3 = ((Float)0.);
            																}
            																else {
HXLINE( 116)																	m3 = (( (Float)(this16) ) / ( (Float)(255) ));
            																}
HXDLIN( 116)																int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this12 >> 24) & 255)) )));
HXDLIN( 116)																int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this12 >> 16) & 255)) )));
HXDLIN( 116)																int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this12 >> 8) & 255)) )));
HXDLIN( 116)																int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this12 & 255)) )));
HXDLIN( 116)																col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN( 116)														if ((col != 0)) {
HXLINE( 116)															int x3 = (dx - rectLeft);
HXDLIN( 116)															int y3 = (dy - rectTop);
HXDLIN( 116)															int c2 = col;
HXDLIN( 116)															bool _hx_tmp1;
HXDLIN( 116)															if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 116)																_hx_tmp1 = undoImage->transparent;
            															}
            															else {
HXLINE( 116)																_hx_tmp1 = false;
            															}
HXDLIN( 116)															if (_hx_tmp1) {
HXLINE( 116)																int location;
HXDLIN( 116)																if (undoImage->useVirtualPos) {
HXLINE( 116)																	location = ::Std_obj::_hx_int(((((( (Float)(y3) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x3) - undoImage->virtualX));
            																}
            																else {
HXLINE( 116)																	location = ::Std_obj::_hx_int(( (Float)(((y3 * undoImage->width) + x3)) ));
            																}
HXDLIN( 116)																int this17 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 116)																int this18;
HXDLIN( 116)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																	this18 = ((((((this17 >> 24) & 255) << 24) | ((this17 & 255) << 16)) | (((this17 >> 8) & 255) << 8)) | ((this17 >> 16) & 255));
            																}
            																else {
HXLINE( 116)																	this18 = this17;
            																}
HXDLIN( 116)																Float a11;
HXDLIN( 116)																int this19 = ((this18 >> 24) & 255);
HXDLIN( 116)																if ((this19 == 0)) {
HXLINE( 116)																	a11 = ((Float)0.);
            																}
            																else {
HXLINE( 116)																	a11 = (( (Float)(this19) ) / ( (Float)(255) ));
            																}
HXDLIN( 116)																Float r1;
HXDLIN( 116)																int this20 = ((this18 >> 16) & 255);
HXDLIN( 116)																if ((this20 == 0)) {
HXLINE( 116)																	r1 = ((Float)0.);
            																}
            																else {
HXLINE( 116)																	r1 = (( (Float)(this20) ) / ( (Float)(255) ));
            																}
HXDLIN( 116)																Float g1;
HXDLIN( 116)																int this21 = ((this18 >> 8) & 255);
HXDLIN( 116)																if ((this21 == 0)) {
HXLINE( 116)																	g1 = ((Float)0.);
            																}
            																else {
HXLINE( 116)																	g1 = (( (Float)(this21) ) / ( (Float)(255) ));
            																}
HXDLIN( 116)																Float b11;
HXDLIN( 116)																int this22 = (this18 & 255);
HXDLIN( 116)																if ((this22 == 0)) {
HXLINE( 116)																	b11 = ((Float)0.);
            																}
            																else {
HXLINE( 116)																	b11 = (( (Float)(this22) ) / ( (Float)(255) ));
            																}
HXDLIN( 116)																Float a21;
HXDLIN( 116)																int this23 = ((col >> 24) & 255);
HXDLIN( 116)																if ((this23 == 0)) {
HXLINE( 116)																	a21 = ((Float)0.);
            																}
            																else {
HXLINE( 116)																	a21 = (( (Float)(this23) ) / ( (Float)(255) ));
            																}
HXDLIN( 116)																Float r2;
HXDLIN( 116)																int this24 = ((col >> 16) & 255);
HXDLIN( 116)																if ((this24 == 0)) {
HXLINE( 116)																	r2 = ((Float)0.);
            																}
            																else {
HXLINE( 116)																	r2 = (( (Float)(this24) ) / ( (Float)(255) ));
            																}
HXDLIN( 116)																Float g2;
HXDLIN( 116)																int this25 = ((col >> 8) & 255);
HXDLIN( 116)																if ((this25 == 0)) {
HXLINE( 116)																	g2 = ((Float)0.);
            																}
            																else {
HXLINE( 116)																	g2 = (( (Float)(this25) ) / ( (Float)(255) ));
            																}
HXDLIN( 116)																Float b21;
HXDLIN( 116)																int this26 = (col & 255);
HXDLIN( 116)																if ((this26 == 0)) {
HXLINE( 116)																	b21 = ((Float)0.);
            																}
            																else {
HXLINE( 116)																	b21 = (( (Float)(this26) ) / ( (Float)(255) ));
            																}
HXDLIN( 116)																Float a3 = (a11 * (( (Float)(1) ) - a21));
HXDLIN( 116)																int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a21))));
HXDLIN( 116)																int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a21))));
HXDLIN( 116)																int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a21))));
HXDLIN( 116)																int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a21)));
HXDLIN( 116)																int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b9);
HXDLIN( 116)																{
HXLINE( 116)																	int _hx_tmp2;
HXDLIN( 116)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																		_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																	}
            																	else {
HXLINE( 116)																		_hx_tmp2 = blended;
            																	}
HXDLIN( 116)																	::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            																}
            															}
            															else {
HXLINE( 116)																::Dynamic this27 = undoImage->image;
HXDLIN( 116)																int index2;
HXDLIN( 116)																if (undoImage->useVirtualPos) {
HXLINE( 116)																	index2 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x3) - undoImage->virtualX));
            																}
            																else {
HXLINE( 116)																	index2 = ::Std_obj::_hx_int(( (Float)(((y3 * undoImage->width) + x3)) ));
            																}
HXDLIN( 116)																int _hx_tmp3;
HXDLIN( 116)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																	_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            																}
            																else {
HXLINE( 116)																	_hx_tmp3 = c2;
            																}
HXDLIN( 116)																::iterMagic::Iimg_obj::set(this27,index2,_hx_tmp3);
            															}
            														}
            														else {
HXLINE( 116)															if (forceClear) {
HXLINE( 116)																::Dynamic this28 = undoImage->image;
HXDLIN( 116)																int x4 = (dx - rectLeft);
HXDLIN( 116)																int y4 = (dy - rectTop);
HXDLIN( 116)																int index3;
HXDLIN( 116)																if (undoImage->useVirtualPos) {
HXLINE( 116)																	index3 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x4) - undoImage->virtualX));
            																}
            																else {
HXLINE( 116)																	index3 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage->width) + x4)) ));
            																}
HXDLIN( 116)																::iterMagic::Iimg_obj::set(this28,index3,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 116)								{
HXLINE( 116)									int _g_min = xIter3->start;
HXDLIN( 116)									int _g_max = xIter3->max;
HXDLIN( 116)									while((_g_min < _g_max)){
HXLINE( 116)										_g_min = (_g_min + 1);
HXDLIN( 116)										int px = (_g_min - 1);
HXDLIN( 116)										Float pcx = (( (Float)(px) ) - nextX);
HXDLIN( 116)										{
HXLINE( 116)											int _g_min1 = yIter3->start;
HXDLIN( 116)											int _g_max1 = yIter3->max;
HXDLIN( 116)											while((_g_min1 < _g_max1)){
HXLINE( 116)												_g_min1 = (_g_min1 + 1);
HXDLIN( 116)												int py = (_g_min1 - 1);
HXDLIN( 116)												Float pcy = (( (Float)(py) ) - nextY);
HXDLIN( 116)												Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 116)												Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 116)												Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 116)												Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 116)												Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 116)												bool _hx_tmp4;
HXDLIN( 116)												bool _hx_tmp5;
HXDLIN( 116)												if ((ratioA >= 0)) {
HXLINE( 116)													_hx_tmp5 = (ratioB >= 0);
            												}
            												else {
HXLINE( 116)													_hx_tmp5 = false;
            												}
HXDLIN( 116)												if (_hx_tmp5) {
HXLINE( 116)													_hx_tmp4 = (ratioC >= 0);
            												}
            												else {
HXLINE( 116)													_hx_tmp4 = false;
            												}
HXDLIN( 116)												if (_hx_tmp4) {
HXLINE( 116)													int i19 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA) + (( (Float)(aB) ) * ratioB)) + (( (Float)(aC) ) * ratioC)));
HXDLIN( 116)													if ((i19 > 255)) {
HXLINE(  24)														i19 = 255;
            													}
HXLINE( 116)													if ((i19 < 0)) {
HXLINE(  25)														i19 = 0;
            													}
HXLINE( 116)													int a5 = i19;
HXDLIN( 116)													int i20 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA) + (( (Float)(rB) ) * ratioB)) + (( (Float)(rC) ) * ratioC)));
HXDLIN( 116)													if ((i20 > 255)) {
HXLINE(  24)														i20 = 255;
            													}
HXLINE( 116)													if ((i20 < 0)) {
HXLINE(  25)														i20 = 0;
            													}
HXLINE( 116)													int r3 = i20;
HXDLIN( 116)													int i21 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA) + (( (Float)(gB) ) * ratioB)) + (( (Float)(gC) ) * ratioC)));
HXDLIN( 116)													if ((i21 > 255)) {
HXLINE(  24)														i21 = 255;
            													}
HXLINE( 116)													if ((i21 < 0)) {
HXLINE(  25)														i21 = 0;
            													}
HXLINE( 116)													int g3 = i21;
HXDLIN( 116)													int i22 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA) + (( (Float)(bB) ) * ratioB)) + (( (Float)(bC) ) * ratioC)));
HXDLIN( 116)													if ((i22 > 255)) {
HXLINE(  24)														i22 = 255;
            													}
HXLINE( 116)													if ((i22 < 0)) {
HXLINE(  25)														i22 = 0;
            													}
HXLINE( 116)													int b10 = i22;
HXDLIN( 116)													{
HXLINE( 116)														int location1;
HXDLIN( 116)														if (this6->useVirtualPos) {
HXLINE( 116)															location1 = ::Std_obj::_hx_int(((((( (Float)(py) ) - this6->virtualY) * ( (Float)(this6->width) )) + px) - this6->virtualX));
            														}
            														else {
HXLINE( 116)															location1 = ::Std_obj::_hx_int(( (Float)(((py * this6->width) + px)) ));
            														}
HXDLIN( 116)														bool _hx_tmp6;
HXDLIN( 116)														if (this6->transparent) {
HXLINE( 116)															_hx_tmp6 = (a5 < 254);
            														}
            														else {
HXLINE( 116)															_hx_tmp6 = false;
            														}
HXDLIN( 116)														if (_hx_tmp6) {
HXLINE( 116)															int this29 = ::iterMagic::Iimg_obj::get(this6->image,location1);
HXDLIN( 116)															int old;
HXDLIN( 116)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																old = ((((((this29 >> 24) & 255) << 24) | ((this29 & 255) << 16)) | (((this29 >> 8) & 255) << 8)) | ((this29 >> 16) & 255));
            															}
            															else {
HXLINE( 116)																old = this29;
            															}
HXDLIN( 116)															int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b10);
HXDLIN( 116)															Float a12;
HXDLIN( 116)															int this30 = ((old >> 24) & 255);
HXDLIN( 116)															if ((this30 == 0)) {
HXLINE( 116)																a12 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																a12 = (( (Float)(this30) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float r11;
HXDLIN( 116)															int this31 = ((old >> 16) & 255);
HXDLIN( 116)															if ((this31 == 0)) {
HXLINE( 116)																r11 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																r11 = (( (Float)(this31) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float g11;
HXDLIN( 116)															int this32 = ((old >> 8) & 255);
HXDLIN( 116)															if ((this32 == 0)) {
HXLINE( 116)																g11 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																g11 = (( (Float)(this32) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float b12;
HXDLIN( 116)															int this33 = (old & 255);
HXDLIN( 116)															if ((this33 == 0)) {
HXLINE( 116)																b12 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																b12 = (( (Float)(this33) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float a22;
HXDLIN( 116)															int this34 = ((rhs >> 24) & 255);
HXDLIN( 116)															if ((this34 == 0)) {
HXLINE( 116)																a22 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																a22 = (( (Float)(this34) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float r21;
HXDLIN( 116)															int this35 = ((rhs >> 16) & 255);
HXDLIN( 116)															if ((this35 == 0)) {
HXLINE( 116)																r21 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																r21 = (( (Float)(this35) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float g21;
HXDLIN( 116)															int this36 = ((rhs >> 8) & 255);
HXDLIN( 116)															if ((this36 == 0)) {
HXLINE( 116)																g21 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																g21 = (( (Float)(this36) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float b22;
HXDLIN( 116)															int this37 = (rhs & 255);
HXDLIN( 116)															if ((this37 == 0)) {
HXLINE( 116)																b22 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																b22 = (( (Float)(this37) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float a31 = (a12 * (( (Float)(1) ) - a22));
HXDLIN( 116)															int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a22))));
HXDLIN( 116)															int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a22))));
HXDLIN( 116)															int b13 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a22))));
HXDLIN( 116)															int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a22)));
HXDLIN( 116)															int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b13);
HXDLIN( 116)															{
HXLINE( 116)																int _hx_tmp7;
HXDLIN( 116)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																	_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            																}
            																else {
HXLINE( 116)																	_hx_tmp7 = blended1;
            																}
HXDLIN( 116)																::iterMagic::Iimg_obj::set(this6->image,location1,_hx_tmp7);
            															}
            														}
            														else {
HXLINE( 116)															int value;
HXDLIN( 116)															if (this6->isLittle) {
HXLINE( 116)																value = ((((a5 << 24) | (b10 << 16)) | (g3 << 8)) | r3);
            															}
            															else {
HXLINE( 116)																value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b10);
            															}
HXDLIN( 116)															::iterMagic::Iimg_obj::set(this6->image,location1,value);
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 116)								if ((hasHit == false)) {
HXLINE( 116)									 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,mx,my,lastX,lastY,nextX,nextY,true);
HXDLIN( 116)									if (hasUndo) {
HXLINE( 116)										v4->undoImage = undoImage;
HXDLIN( 116)										v4->undoX = xIter3->start;
HXDLIN( 116)										v4->undoY = yIter3->start;
            									}
            								}
            							}
            						}
HXLINE( 236)						lastX = nextX;
HXLINE( 237)						lastY = nextY;
            					}
            				}
            			}
            			else {
HXLINE( 116)				int _g54 = 0;
HXDLIN( 116)				int _g55 = (sides + 1);
HXDLIN( 116)				while((_g54 < _g55)){
HXLINE( 116)					_g54 = (_g54 + 1);
HXDLIN( 116)					int i23 = (_g54 - 1);
HXDLIN( 116)					Float nextX1 = (rx + (rx * ::Math_obj::cos(((( (Float)(i23) ) * theta) + omega))));
HXDLIN( 116)					Float nextY1 = (ry + (ry * ::Math_obj::sin(((( (Float)(i23) ) * theta) + omega))));
HXDLIN( 116)					{
HXLINE( 116)						 ::pi_xy::ImageStruct this38 = temp;
HXDLIN( 116)						{
HXLINE( 116)							bool hasHit1 = false;
HXDLIN( 116)							bool hasUndo1 = false;
HXDLIN( 116)							int aA1 = ((colorOut >> 24) & 255);
HXDLIN( 116)							int rA1 = ((colorOut >> 16) & 255);
HXDLIN( 116)							int gA1 = ((colorOut >> 8) & 255);
HXDLIN( 116)							int bA1 = (colorOut & 255);
HXDLIN( 116)							int aB1 = ((colorIn >> 24) & 255);
HXDLIN( 116)							int rB1 = ((colorIn >> 16) & 255);
HXDLIN( 116)							int gB1 = ((colorIn >> 8) & 255);
HXDLIN( 116)							int bB1 = (colorIn & 255);
HXDLIN( 116)							int aC1 = ((colorOut >> 24) & 255);
HXDLIN( 116)							int rC1 = ((colorOut >> 16) & 255);
HXDLIN( 116)							int gC1 = ((colorOut >> 8) & 255);
HXDLIN( 116)							int bC1 = (colorOut & 255);
HXDLIN( 116)							Float bcx1 = (lastX - nextX1);
HXDLIN( 116)							Float bcy1 = (lastY - nextY1);
HXDLIN( 116)							Float acx1 = (mx - nextX1);
HXDLIN( 116)							Float acy1 = (my - nextY1);
HXDLIN( 116)							Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 116)							Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 116)							Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 116)							Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 116)							 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 116)							if ((mx > lastX)) {
HXLINE( 116)								if ((mx > nextX1)) {
HXLINE( 116)									int min4;
HXDLIN( 116)									if ((lastX > nextX1)) {
HXLINE( 116)										min4 = ::Math_obj::floor(nextX1);
            									}
            									else {
HXLINE( 116)										min4 = ::Math_obj::floor(lastX);
            									}
HXDLIN( 116)									int ii_min8 = min4;
HXDLIN( 116)									int ii_max8 = ::Math_obj::ceil(mx);
HXDLIN( 116)									xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            								}
            								else {
HXLINE( 116)									int ii_min9 = ::Math_obj::floor(lastX);
HXDLIN( 116)									int ii_max9 = ::Math_obj::ceil(nextX1);
HXDLIN( 116)									xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            								}
            							}
            							else {
HXLINE( 116)								if ((lastX > nextX1)) {
HXLINE( 116)									int min5;
HXDLIN( 116)									if ((mx > nextX1)) {
HXLINE( 116)										min5 = ::Math_obj::floor(nextX1);
            									}
            									else {
HXLINE( 116)										min5 = ::Math_obj::ceil(mx);
            									}
HXDLIN( 116)									int ii_min10 = min5;
HXDLIN( 116)									int ii_max10 = ::Math_obj::ceil(lastX);
HXDLIN( 116)									xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            								}
            								else {
HXLINE( 116)									int ii_min11 = ::Math_obj::floor(mx);
HXDLIN( 116)									int ii_max11 = ::Math_obj::ceil(nextX1);
HXDLIN( 116)									xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            								}
            							}
HXDLIN( 116)							 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 116)							if ((my > lastY)) {
HXLINE( 116)								if ((my > nextY1)) {
HXLINE( 116)									int min6;
HXDLIN( 116)									if ((lastY > nextY1)) {
HXLINE( 116)										min6 = ::Math_obj::floor(nextY1);
            									}
            									else {
HXLINE( 116)										min6 = ::Math_obj::floor(lastY);
            									}
HXDLIN( 116)									int ii_min12 = min6;
HXDLIN( 116)									int ii_max12 = ::Math_obj::ceil(my);
HXDLIN( 116)									yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            								}
            								else {
HXLINE( 116)									int ii_min13 = ::Math_obj::floor(lastY);
HXDLIN( 116)									int ii_max13 = ::Math_obj::ceil(nextY1);
HXDLIN( 116)									yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            								}
            							}
            							else {
HXLINE( 116)								if ((lastY > nextY1)) {
HXLINE( 116)									int min7;
HXDLIN( 116)									if ((my > nextY1)) {
HXLINE( 116)										min7 = ::Math_obj::floor(nextY1);
            									}
            									else {
HXLINE( 116)										min7 = ::Math_obj::ceil(my);
            									}
HXDLIN( 116)									int ii_min14 = min7;
HXDLIN( 116)									int ii_max14 = ::Math_obj::ceil(lastY);
HXDLIN( 116)									yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            								}
            								else {
HXLINE( 116)									int ii_min15 = ::Math_obj::floor(my);
HXDLIN( 116)									int ii_max15 = ::Math_obj::ceil(nextY1);
HXDLIN( 116)									yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            								}
            							}
HXDLIN( 116)							 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 116)							if (hasUndo1) {
HXLINE( 116)								int width3 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 116)								int height3 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 116)								 ::Dynamic imageType3 = null();
HXDLIN( 116)								 ::pi_xy::ImageStruct this39 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 116)								if (::hx::IsNull( imageType3 )) {
HXLINE(  54)									imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            								}
HXLINE( 116)								::Dynamic undoImage4;
HXDLIN( 116)								switch((int)(( (int)(imageType3) ))){
            									case (int)0: {
HXLINE( 116)										 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 116)										 ::iterMagic::BytesImg b14 = byt3;
HXDLIN( 116)										{
HXLINE( 116)											b14->width = width3;
HXDLIN( 116)											b14->height = height3;
HXDLIN( 116)											b14->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 116)											b14->data = ::haxe::io::Bytes_obj::alloc((b14->length * 4));
HXDLIN( 116)											{
HXLINE( 116)												int len6 = b14->length;
HXDLIN( 116)												int w3 = 0;
HXDLIN( 116)												{
HXLINE( 116)													int _g56 = 0;
HXDLIN( 116)													int _g57 = b14->height;
HXDLIN( 116)													while((_g56 < _g57)){
HXLINE( 116)														_g56 = (_g56 + 1);
HXDLIN( 116)														int y5 = (_g56 - 1);
HXDLIN( 116)														{
HXLINE( 116)															int _g58 = 0;
HXDLIN( 116)															int _g59 = b14->width;
HXDLIN( 116)															while((_g58 < _g59)){
HXLINE( 116)																_g58 = (_g58 + 1);
HXDLIN( 116)																int x5 = (_g58 - 1);
HXDLIN( 116)																{
HXLINE( 116)																	w3 = (w3 + 1);
HXDLIN( 116)																	b14->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN( 116)																{
HXLINE( 116)																	w3 = (w3 + 1);
HXDLIN( 116)																	b14->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN( 116)																{
HXLINE( 116)																	w3 = (w3 + 1);
HXDLIN( 116)																	b14->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN( 116)																{
HXLINE( 116)																	w3 = (w3 + 1);
HXDLIN( 116)																	b14->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN( 116)										undoImage4 = b14;
            									}
            									break;
            									case (int)1: {
HXLINE( 116)										 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 116)										 ::iterMagic::ArrIntImg a7 = arrI3;
HXDLIN( 116)										{
HXLINE( 116)											a7->width = width3;
HXDLIN( 116)											a7->height = height3;
HXDLIN( 116)											a7->data = ::Array_obj< int >::__new(0);
HXDLIN( 116)											a7->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 116)											{
HXLINE( 116)												int _g60 = 0;
HXDLIN( 116)												int _g61 = a7->length;
HXDLIN( 116)												while((_g60 < _g61)){
HXLINE( 116)													_g60 = (_g60 + 1);
HXDLIN( 116)													int i24 = (_g60 - 1);
HXDLIN( 116)													a7->data[i24] = 0;
            												}
            											}
            										}
HXDLIN( 116)										undoImage4 = a7;
            									}
            									break;
            									case (int)2: {
HXLINE( 116)										 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 116)										 ::iterMagic::U32ArrImg b15 = u32a3;
HXDLIN( 116)										{
HXLINE( 116)											b15->width = width3;
HXDLIN( 116)											b15->height = height3;
HXDLIN( 116)											b15->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 116)											int size3 = (b15->length * 4);
HXDLIN( 116)											b15->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 116)											{
HXLINE( 116)												int _g62 = 0;
HXDLIN( 116)												int _g63 = b15->length;
HXDLIN( 116)												while((_g62 < _g63)){
HXLINE( 116)													_g62 = (_g62 + 1);
HXDLIN( 116)													int i25 = (_g62 - 1);
HXDLIN( 116)													{
HXLINE( 116)														 ::haxe::io::ArrayBufferViewImpl this40 = b15->data;
HXDLIN( 116)														bool undoImage5;
HXDLIN( 116)														if ((i25 >= 0)) {
HXLINE( 116)															undoImage5 = (i25 < (this40->byteLength >> 2));
            														}
            														else {
HXLINE( 116)															undoImage5 = false;
            														}
HXDLIN( 116)														if (undoImage5) {
HXLINE( 116)															 ::haxe::io::Bytes _this3 = this40->bytes;
HXDLIN( 116)															int pos3 = ((i25 << 2) + this40->byteOffset);
HXDLIN( 116)															_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 116)															_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 116)															_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 116)															_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
HXDLIN( 116)										undoImage4 = b15;
            									}
            									break;
            									case (int)3: {
HXLINE( 116)										 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 116)										 ::iterMagic::VecIntImg v5 = vec3;
HXDLIN( 116)										{
HXLINE( 116)											v5->width = width3;
HXDLIN( 116)											v5->height = height3;
HXDLIN( 116)											v5->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 116)											v5->data = ::Array_obj< int >::__new(v5->length);
HXDLIN( 116)											{
HXLINE( 116)												int _g64 = 0;
HXDLIN( 116)												int _g65 = v5->length;
HXDLIN( 116)												while((_g64 < _g65)){
HXLINE( 116)													_g64 = (_g64 + 1);
HXDLIN( 116)													int i26 = (_g64 - 1);
HXDLIN( 116)													v5->data->__unsafe_set(i26,0);
            												}
            											}
            										}
HXDLIN( 116)										undoImage4 = v5;
            									}
            									break;
            									case (int)4: {
HXLINE( 116)										 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 116)										 ::iterMagic::StackIntImg b16 = sInt3;
HXDLIN( 116)										{
HXLINE( 116)											b16->width = width3;
HXDLIN( 116)											b16->height = height3;
HXDLIN( 116)											b16->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 116)											b16->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 116)											{
HXLINE( 116)												int len7 = b16->length;
HXDLIN( 116)												 ::haxe::ds::GenericStack_Int d3 = b16->data;
HXDLIN( 116)												if (::hx::IsNull( d3->head )) {
HXLINE( 116)													int _g66 = 0;
HXDLIN( 116)													int _g67 = len7;
HXDLIN( 116)													while((_g66 < _g67)){
HXLINE( 116)														_g66 = (_g66 + 1);
HXDLIN( 116)														int i27 = (_g66 - 1);
HXDLIN( 116)														d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            													}
            												}
            												else {
HXLINE( 116)													int _g68 = 0;
HXDLIN( 116)													int _g69 = len7;
HXDLIN( 116)													while((_g68 < _g69)){
HXLINE( 116)														_g68 = (_g68 + 1);
HXDLIN( 116)														int i28 = (_g68 - 1);
HXDLIN( 116)														{
HXLINE( 116)															 ::haxe::ds::GenericCell_Int l3 = b16->data->head;
HXDLIN( 116)															 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 116)															{
HXLINE( 116)																int _g70 = 0;
HXDLIN( 116)																int _g71 = i28;
HXDLIN( 116)																while((_g70 < _g71)){
HXLINE( 116)																	_g70 = (_g70 + 1);
HXDLIN( 116)																	int i29 = (_g70 - 1);
HXLINE( 345)																	prev3 = l3;
HXLINE( 346)																	l3 = l3->next;
            																}
            															}
HXLINE( 116)															if (::hx::IsNull( prev3 )) {
HXLINE( 116)																b16->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 116)																l3 = null();
            															}
            															else {
HXLINE( 116)																prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 116)																l3 = null();
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN( 116)										undoImage4 = b16;
            									}
            									break;
            								}
HXDLIN( 116)								this39->image = undoImage4;
HXDLIN( 116)								this39->width = width3;
HXDLIN( 116)								this39->height = height3;
HXDLIN( 116)								this39->imageType = ( (int)(imageType3) );
HXDLIN( 116)								undoImage3 = this39;
HXDLIN( 116)								{
HXLINE( 116)									int rectLeft1 = xIter31->start;
HXDLIN( 116)									int rectTop1 = yIter31->start;
HXDLIN( 116)									int rectRight1 = xIter31->max;
HXDLIN( 116)									bool forceClear1 = false;
HXDLIN( 116)									{
HXLINE( 116)										int _g72 = rectTop1;
HXDLIN( 116)										int _g73 = yIter31->max;
HXDLIN( 116)										while((_g72 < _g73)){
HXLINE( 116)											_g72 = (_g72 + 1);
HXDLIN( 116)											int dy1 = (_g72 - 1);
HXDLIN( 116)											{
HXLINE( 116)												int _g74 = rectLeft1;
HXDLIN( 116)												int _g75 = rectRight1;
HXDLIN( 116)												while((_g74 < _g75)){
HXLINE( 116)													_g74 = (_g74 + 1);
HXDLIN( 116)													int dx1 = (_g74 - 1);
HXDLIN( 116)													::Dynamic this41 = this38->image;
HXDLIN( 116)													int index4;
HXDLIN( 116)													if (this38->useVirtualPos) {
HXLINE( 116)														index4 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this38->virtualY) * ( (Float)(this38->width) )) + dx1) - this38->virtualX));
            													}
            													else {
HXLINE( 116)														index4 = ::Std_obj::_hx_int(( (Float)(((dy1 * this38->width) + dx1)) ));
            													}
HXDLIN( 116)													int c3 = ::iterMagic::Iimg_obj::get(this41,index4);
HXDLIN( 116)													int col1;
HXDLIN( 116)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)														col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            													}
            													else {
HXLINE( 116)														col1 = c3;
            													}
HXDLIN( 116)													bool _hx_tmp8;
HXDLIN( 116)													if (this38->useMask) {
HXLINE( 116)														_hx_tmp8 = ::hx::IsNotNull( this38->mask );
            													}
            													else {
HXLINE( 116)														_hx_tmp8 = false;
            													}
HXDLIN( 116)													if (_hx_tmp8) {
HXLINE( 116)														 ::pi_xy::ImageStruct this42 = this38->mask;
HXDLIN( 116)														::Dynamic this43 = this42->image;
HXDLIN( 116)														int index5;
HXDLIN( 116)														if (this42->useVirtualPos) {
HXLINE( 116)															index5 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this42->virtualY) * ( (Float)(this42->width) )) + dx1) - this42->virtualX));
            														}
            														else {
HXLINE( 116)															index5 = ::Std_obj::_hx_int(( (Float)(((dy1 * this42->width) + dx1)) ));
            														}
HXDLIN( 116)														int c4 = ::iterMagic::Iimg_obj::get(this43,index5);
HXDLIN( 116)														int v6;
HXDLIN( 116)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)															v6 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            														}
            														else {
HXLINE( 116)															v6 = c4;
            														}
HXDLIN( 116)														int maskPixel1 = v6;
HXDLIN( 116)														int this44 = col1;
HXDLIN( 116)														if ((maskPixel1 == 0)) {
HXLINE( 116)															col1 = this44;
            														}
            														else {
HXLINE( 116)															Float m01;
HXDLIN( 116)															int this45 = ((maskPixel1 >> 24) & 255);
HXDLIN( 116)															if ((this45 == 0)) {
HXLINE( 116)																m01 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																m01 = (( (Float)(this45) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float m11;
HXDLIN( 116)															int this46 = ((maskPixel1 >> 16) & 255);
HXDLIN( 116)															if ((this46 == 0)) {
HXLINE( 116)																m11 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																m11 = (( (Float)(this46) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float m21;
HXDLIN( 116)															int this47 = ((maskPixel1 >> 8) & 255);
HXDLIN( 116)															if ((this47 == 0)) {
HXLINE( 116)																m21 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																m21 = (( (Float)(this47) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float m31;
HXDLIN( 116)															int this48 = (maskPixel1 & 255);
HXDLIN( 116)															if ((this48 == 0)) {
HXLINE( 116)																m31 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																m31 = (( (Float)(this48) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this44 >> 24) & 255)) )));
HXDLIN( 116)															int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this44 >> 16) & 255)) )));
HXDLIN( 116)															int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this44 >> 8) & 255)) )));
HXDLIN( 116)															int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this44 & 255)) )));
HXDLIN( 116)															col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN( 116)													if ((col1 != 0)) {
HXLINE( 116)														int x6 = (dx1 - rectLeft1);
HXDLIN( 116)														int y6 = (dy1 - rectTop1);
HXDLIN( 116)														int c5 = col1;
HXDLIN( 116)														bool _hx_tmp9;
HXDLIN( 116)														if ((((c5 >> 24) & 255) < 254)) {
HXLINE( 116)															_hx_tmp9 = undoImage3->transparent;
            														}
            														else {
HXLINE( 116)															_hx_tmp9 = false;
            														}
HXDLIN( 116)														if (_hx_tmp9) {
HXLINE( 116)															int location2;
HXDLIN( 116)															if (undoImage3->useVirtualPos) {
HXLINE( 116)																location2 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x6) - undoImage3->virtualX));
            															}
            															else {
HXLINE( 116)																location2 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x6)) ));
            															}
HXDLIN( 116)															int this49 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 116)															int this50;
HXDLIN( 116)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																this50 = ((((((this49 >> 24) & 255) << 24) | ((this49 & 255) << 16)) | (((this49 >> 8) & 255) << 8)) | ((this49 >> 16) & 255));
            															}
            															else {
HXLINE( 116)																this50 = this49;
            															}
HXDLIN( 116)															Float a13;
HXDLIN( 116)															int this51 = ((this50 >> 24) & 255);
HXDLIN( 116)															if ((this51 == 0)) {
HXLINE( 116)																a13 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																a13 = (( (Float)(this51) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float r12;
HXDLIN( 116)															int this52 = ((this50 >> 16) & 255);
HXDLIN( 116)															if ((this52 == 0)) {
HXLINE( 116)																r12 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																r12 = (( (Float)(this52) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float g12;
HXDLIN( 116)															int this53 = ((this50 >> 8) & 255);
HXDLIN( 116)															if ((this53 == 0)) {
HXLINE( 116)																g12 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																g12 = (( (Float)(this53) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float b17;
HXDLIN( 116)															int this54 = (this50 & 255);
HXDLIN( 116)															if ((this54 == 0)) {
HXLINE( 116)																b17 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																b17 = (( (Float)(this54) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float a23;
HXDLIN( 116)															int this55 = ((col1 >> 24) & 255);
HXDLIN( 116)															if ((this55 == 0)) {
HXLINE( 116)																a23 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																a23 = (( (Float)(this55) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float r22;
HXDLIN( 116)															int this56 = ((col1 >> 16) & 255);
HXDLIN( 116)															if ((this56 == 0)) {
HXLINE( 116)																r22 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																r22 = (( (Float)(this56) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float g22;
HXDLIN( 116)															int this57 = ((col1 >> 8) & 255);
HXDLIN( 116)															if ((this57 == 0)) {
HXLINE( 116)																g22 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																g22 = (( (Float)(this57) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float b23;
HXDLIN( 116)															int this58 = (col1 & 255);
HXDLIN( 116)															if ((this58 == 0)) {
HXLINE( 116)																b23 = ((Float)0.);
            															}
            															else {
HXLINE( 116)																b23 = (( (Float)(this58) ) / ( (Float)(255) ));
            															}
HXDLIN( 116)															Float a32 = (a13 * (( (Float)(1) ) - a23));
HXDLIN( 116)															int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a23))));
HXDLIN( 116)															int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a23))));
HXDLIN( 116)															int b18 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b17 * a32) + (b23 * a23))));
HXDLIN( 116)															int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a23)));
HXDLIN( 116)															int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b18);
HXDLIN( 116)															{
HXLINE( 116)																int _hx_tmp10;
HXDLIN( 116)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																	_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            																}
            																else {
HXLINE( 116)																	_hx_tmp10 = blended2;
            																}
HXDLIN( 116)																::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            															}
            														}
            														else {
HXLINE( 116)															::Dynamic this59 = undoImage3->image;
HXDLIN( 116)															int index6;
HXDLIN( 116)															if (undoImage3->useVirtualPos) {
HXLINE( 116)																index6 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x6) - undoImage3->virtualX));
            															}
            															else {
HXLINE( 116)																index6 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x6)) ));
            															}
HXDLIN( 116)															int _hx_tmp11;
HXDLIN( 116)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            															}
            															else {
HXLINE( 116)																_hx_tmp11 = c5;
            															}
HXDLIN( 116)															::iterMagic::Iimg_obj::set(this59,index6,_hx_tmp11);
            														}
            													}
            													else {
HXLINE( 116)														if (forceClear1) {
HXLINE( 116)															::Dynamic this60 = undoImage3->image;
HXDLIN( 116)															int x7 = (dx1 - rectLeft1);
HXDLIN( 116)															int y7 = (dy1 - rectTop1);
HXDLIN( 116)															int index7;
HXDLIN( 116)															if (undoImage3->useVirtualPos) {
HXLINE( 116)																index7 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x7) - undoImage3->virtualX));
            															}
            															else {
HXLINE( 116)																index7 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage3->width) + x7)) ));
            															}
HXDLIN( 116)															::iterMagic::Iimg_obj::set(this60,index7,0);
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 116)							{
HXLINE( 116)								int _g_min2 = xIter31->start;
HXDLIN( 116)								int _g_max2 = xIter31->max;
HXDLIN( 116)								while((_g_min2 < _g_max2)){
HXLINE( 116)									_g_min2 = (_g_min2 + 1);
HXDLIN( 116)									int px1 = (_g_min2 - 1);
HXDLIN( 116)									Float pcx1 = (( (Float)(px1) ) - nextX1);
HXDLIN( 116)									{
HXLINE( 116)										int _g_min3 = yIter31->start;
HXDLIN( 116)										int _g_max3 = yIter31->max;
HXDLIN( 116)										while((_g_min3 < _g_max3)){
HXLINE( 116)											_g_min3 = (_g_min3 + 1);
HXDLIN( 116)											int py1 = (_g_min3 - 1);
HXDLIN( 116)											Float pcy1 = (( (Float)(py1) ) - nextY1);
HXDLIN( 116)											Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 116)											Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 116)											Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 116)											Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 116)											Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 116)											bool _hx_tmp12;
HXDLIN( 116)											bool _hx_tmp13;
HXDLIN( 116)											if ((ratioA1 >= 0)) {
HXLINE( 116)												_hx_tmp13 = (ratioB1 >= 0);
            											}
            											else {
HXLINE( 116)												_hx_tmp13 = false;
            											}
HXDLIN( 116)											if (_hx_tmp13) {
HXLINE( 116)												_hx_tmp12 = (ratioC1 >= 0);
            											}
            											else {
HXLINE( 116)												_hx_tmp12 = false;
            											}
HXDLIN( 116)											if (_hx_tmp12) {
HXLINE( 116)												int i30 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA1) + (( (Float)(aB1) ) * ratioB1)) + (( (Float)(aC1) ) * ratioC1)));
HXDLIN( 116)												if ((i30 > 255)) {
HXLINE(  24)													i30 = 255;
            												}
HXLINE( 116)												if ((i30 < 0)) {
HXLINE(  25)													i30 = 0;
            												}
HXLINE( 116)												int a9 = i30;
HXDLIN( 116)												int i31 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA1) + (( (Float)(rB1) ) * ratioB1)) + (( (Float)(rC1) ) * ratioC1)));
HXDLIN( 116)												if ((i31 > 255)) {
HXLINE(  24)													i31 = 255;
            												}
HXLINE( 116)												if ((i31 < 0)) {
HXLINE(  25)													i31 = 0;
            												}
HXLINE( 116)												int r6 = i31;
HXDLIN( 116)												int i32 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA1) + (( (Float)(gB1) ) * ratioB1)) + (( (Float)(gC1) ) * ratioC1)));
HXDLIN( 116)												if ((i32 > 255)) {
HXLINE(  24)													i32 = 255;
            												}
HXLINE( 116)												if ((i32 < 0)) {
HXLINE(  25)													i32 = 0;
            												}
HXLINE( 116)												int g6 = i32;
HXDLIN( 116)												int i33 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA1) + (( (Float)(bB1) ) * ratioB1)) + (( (Float)(bC1) ) * ratioC1)));
HXDLIN( 116)												if ((i33 > 255)) {
HXLINE(  24)													i33 = 255;
            												}
HXLINE( 116)												if ((i33 < 0)) {
HXLINE(  25)													i33 = 0;
            												}
HXLINE( 116)												int b19 = i33;
HXDLIN( 116)												{
HXLINE( 116)													int location3;
HXDLIN( 116)													if (this38->useVirtualPos) {
HXLINE( 116)														location3 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - this38->virtualY) * ( (Float)(this38->width) )) + px1) - this38->virtualX));
            													}
            													else {
HXLINE( 116)														location3 = ::Std_obj::_hx_int(( (Float)(((py1 * this38->width) + px1)) ));
            													}
HXDLIN( 116)													bool _hx_tmp14;
HXDLIN( 116)													if (this38->transparent) {
HXLINE( 116)														_hx_tmp14 = (a9 < 254);
            													}
            													else {
HXLINE( 116)														_hx_tmp14 = false;
            													}
HXDLIN( 116)													if (_hx_tmp14) {
HXLINE( 116)														int this61 = ::iterMagic::Iimg_obj::get(this38->image,location3);
HXDLIN( 116)														int old1;
HXDLIN( 116)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)															old1 = ((((((this61 >> 24) & 255) << 24) | ((this61 & 255) << 16)) | (((this61 >> 8) & 255) << 8)) | ((this61 >> 16) & 255));
            														}
            														else {
HXLINE( 116)															old1 = this61;
            														}
HXDLIN( 116)														int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b19);
HXDLIN( 116)														Float a14;
HXDLIN( 116)														int this62 = ((old1 >> 24) & 255);
HXDLIN( 116)														if ((this62 == 0)) {
HXLINE( 116)															a14 = ((Float)0.);
            														}
            														else {
HXLINE( 116)															a14 = (( (Float)(this62) ) / ( (Float)(255) ));
            														}
HXDLIN( 116)														Float r13;
HXDLIN( 116)														int this63 = ((old1 >> 16) & 255);
HXDLIN( 116)														if ((this63 == 0)) {
HXLINE( 116)															r13 = ((Float)0.);
            														}
            														else {
HXLINE( 116)															r13 = (( (Float)(this63) ) / ( (Float)(255) ));
            														}
HXDLIN( 116)														Float g13;
HXDLIN( 116)														int this64 = ((old1 >> 8) & 255);
HXDLIN( 116)														if ((this64 == 0)) {
HXLINE( 116)															g13 = ((Float)0.);
            														}
            														else {
HXLINE( 116)															g13 = (( (Float)(this64) ) / ( (Float)(255) ));
            														}
HXDLIN( 116)														Float b110;
HXDLIN( 116)														int this65 = (old1 & 255);
HXDLIN( 116)														if ((this65 == 0)) {
HXLINE( 116)															b110 = ((Float)0.);
            														}
            														else {
HXLINE( 116)															b110 = (( (Float)(this65) ) / ( (Float)(255) ));
            														}
HXDLIN( 116)														Float a24;
HXDLIN( 116)														int this66 = ((rhs1 >> 24) & 255);
HXDLIN( 116)														if ((this66 == 0)) {
HXLINE( 116)															a24 = ((Float)0.);
            														}
            														else {
HXLINE( 116)															a24 = (( (Float)(this66) ) / ( (Float)(255) ));
            														}
HXDLIN( 116)														Float r23;
HXDLIN( 116)														int this67 = ((rhs1 >> 16) & 255);
HXDLIN( 116)														if ((this67 == 0)) {
HXLINE( 116)															r23 = ((Float)0.);
            														}
            														else {
HXLINE( 116)															r23 = (( (Float)(this67) ) / ( (Float)(255) ));
            														}
HXDLIN( 116)														Float g23;
HXDLIN( 116)														int this68 = ((rhs1 >> 8) & 255);
HXDLIN( 116)														if ((this68 == 0)) {
HXLINE( 116)															g23 = ((Float)0.);
            														}
            														else {
HXLINE( 116)															g23 = (( (Float)(this68) ) / ( (Float)(255) ));
            														}
HXDLIN( 116)														Float b24;
HXDLIN( 116)														int this69 = (rhs1 & 255);
HXDLIN( 116)														if ((this69 == 0)) {
HXLINE( 116)															b24 = ((Float)0.);
            														}
            														else {
HXLINE( 116)															b24 = (( (Float)(this69) ) / ( (Float)(255) ));
            														}
HXDLIN( 116)														Float a33 = (a14 * (( (Float)(1) ) - a24));
HXDLIN( 116)														int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a24))));
HXDLIN( 116)														int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a24))));
HXDLIN( 116)														int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a33) + (b24 * a24))));
HXDLIN( 116)														int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a24)));
HXDLIN( 116)														int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b20);
HXDLIN( 116)														{
HXLINE( 116)															int _hx_tmp15;
HXDLIN( 116)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 116)																_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            															}
            															else {
HXLINE( 116)																_hx_tmp15 = blended3;
            															}
HXDLIN( 116)															::iterMagic::Iimg_obj::set(this38->image,location3,_hx_tmp15);
            														}
            													}
            													else {
HXLINE( 116)														int value1;
HXDLIN( 116)														if (this38->isLittle) {
HXLINE( 116)															value1 = ((((a9 << 24) | (b19 << 16)) | (g6 << 8)) | r6);
            														}
            														else {
HXLINE( 116)															value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b19);
            														}
HXDLIN( 116)														::iterMagic::Iimg_obj::set(this38->image,location3,value1);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 116)							if ((hasHit1 == false)) {
HXLINE( 116)								 ::pi_xy::algo::HitTri v7 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,mx,my,lastX,lastY,nextX1,nextY1,true);
HXDLIN( 116)								if (hasUndo1) {
HXLINE( 116)									v7->undoImage = undoImage3;
HXDLIN( 116)									v7->undoX = xIter31->start;
HXDLIN( 116)									v7->undoY = yIter31->start;
            								}
            							}
            						}
            					}
HXLINE( 244)					lastX = nextX1;
HXLINE( 245)					lastY = nextY1;
            				}
            			}
            		}
            		else {
HXLINE( 124)			Float cx1 = (rx + rDif);
HXDLIN( 124)			Float cy1 = (ry + rDif);
HXDLIN( 124)			 ::Dynamic gx2 = gx;
HXDLIN( 124)			 ::Dynamic gy2 = gy;
HXDLIN( 124)			 ::Dynamic phi2 = phi;
HXDLIN( 124)			 ::Dynamic sides1 = noSides;
HXLINE( 130)			if (::hx::IsNull( sides1 )) {
HXLINE( 130)				sides1 = 36;
            			}
HXLINE( 129)			if (::hx::IsNull( phi2 )) {
HXLINE( 129)				phi2 = ((Float)0.);
            			}
HXLINE( 128)			if (::hx::IsNull( gy2 )) {
HXLINE( 128)				gy2 = 0;
            			}
HXDLIN( 128)			if (::hx::IsNull( gx2 )) {
HXLINE( 128)				gx2 = 0;
            			}
HXLINE( 124)			if (::hx::IsLess( gx2,((Float)-1.) )) {
HXLINE( 193)				gx2 = -1;
            			}
HXLINE( 124)			if (::hx::IsGreater( gx2,((Float)1.) )) {
HXLINE( 194)				gx2 = 1;
            			}
HXLINE( 124)			if (::hx::IsLess( gy2,((Float)-1.) )) {
HXLINE( 195)				gy2 = ((Float)-1.);
            			}
HXLINE( 124)			if (::hx::IsGreater( gy2,((Float)1.) )) {
HXLINE( 196)				gy2 = 1;
            			}
HXLINE( 124)			Float mx1 = (cx1 + (( (Float)(gx2) ) * rx));
HXDLIN( 124)			Float my1 = (cy1 + (( (Float)(gy2) ) * ry));
HXDLIN( 124)			Float theta1 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides1) ));
HXDLIN( 124)			Float omega1 = ((Float)0.);
HXDLIN( 124)			Float lastX1 = ((Float)0.);
HXDLIN( 124)			Float lastY1 = ((Float)0.);
HXDLIN( 124)			if (::hx::IsNotEq( phi2,0 )) {
HXLINE( 221)				lastX1 = ((((rx * ::Math_obj::cos(((( (Float)(sides1) ) * theta1) + omega1))) * ::Math_obj::cos(( (Float)(phi2) ))) - ((ry * ::Math_obj::sin(((( (Float)(sides1) ) * theta1) + omega1))) * ::Math_obj::sin(( (Float)(phi2) )))) + cx1);
HXLINE( 222)				lastY1 = ((((rx * ::Math_obj::cos(((( (Float)(sides1) ) * theta1) + omega1))) * ::Math_obj::sin(( (Float)(phi2) ))) + ((ry * ::Math_obj::sin(((( (Float)(sides1) ) * theta1) + omega1))) * ::Math_obj::cos(( (Float)(phi2) )))) + cy1);
            			}
            			else {
HXLINE( 224)				lastX1 = (cx1 + (rx * ::Math_obj::cos(((( (Float)(sides1) ) * theta1) + omega1))));
HXLINE( 225)				lastY1 = (cy1 + (ry * ::Math_obj::sin(((( (Float)(sides1) ) * theta1) + omega1))));
            			}
HXLINE( 124)			if (::hx::IsNotEq( phi2,0 )) {
HXLINE( 124)				Float cphi1 = ::Math_obj::cos(( (Float)(phi2) ));
HXDLIN( 124)				Float sphi1 = ::Math_obj::sin(( (Float)(phi2) ));
HXDLIN( 124)				{
HXLINE( 124)					int _g76 = 0;
HXDLIN( 124)					int _g77 = (sides1 + 1);
HXDLIN( 124)					while((_g76 < _g77)){
HXLINE( 124)						_g76 = (_g76 + 1);
HXDLIN( 124)						int i34 = (_g76 - 1);
HXDLIN( 124)						Float stheta1 = ::Math_obj::sin(((( (Float)(i34) ) * theta1) + omega1));
HXDLIN( 124)						Float ctheta1 = ::Math_obj::cos(((( (Float)(i34) ) * theta1) + omega1));
HXDLIN( 124)						Float nextX2 = ((((rx * ctheta1) * cphi1) - ((ry * stheta1) * sphi1)) + cx1);
HXDLIN( 124)						Float nextY2 = ((((rx * ctheta1) * sphi1) + ((ry * stheta1) * cphi1)) + cy1);
HXDLIN( 124)						{
HXLINE( 124)							 ::pi_xy::ImageStruct this70 = temp;
HXDLIN( 124)							{
HXLINE( 124)								bool hasHit2 = false;
HXDLIN( 124)								bool hasUndo2 = false;
HXDLIN( 124)								int aA2 = ((colorOut >> 24) & 255);
HXDLIN( 124)								int rA2 = ((colorOut >> 16) & 255);
HXDLIN( 124)								int gA2 = ((colorOut >> 8) & 255);
HXDLIN( 124)								int bA2 = (colorOut & 255);
HXDLIN( 124)								int aB2 = ((colorIn >> 24) & 255);
HXDLIN( 124)								int rB2 = ((colorIn >> 16) & 255);
HXDLIN( 124)								int gB2 = ((colorIn >> 8) & 255);
HXDLIN( 124)								int bB2 = (colorIn & 255);
HXDLIN( 124)								int aC2 = ((colorOut >> 24) & 255);
HXDLIN( 124)								int rC2 = ((colorOut >> 16) & 255);
HXDLIN( 124)								int gC2 = ((colorOut >> 8) & 255);
HXDLIN( 124)								int bC2 = (colorOut & 255);
HXDLIN( 124)								Float bcx2 = (lastX1 - nextX2);
HXDLIN( 124)								Float bcy2 = (lastY1 - nextY2);
HXDLIN( 124)								Float acx2 = (mx1 - nextX2);
HXDLIN( 124)								Float acy2 = (my1 - nextY2);
HXDLIN( 124)								Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 124)								Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 124)								Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 124)								Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 124)								 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 124)								if ((mx1 > lastX1)) {
HXLINE( 124)									if ((mx1 > nextX2)) {
HXLINE( 124)										int min8;
HXDLIN( 124)										if ((lastX1 > nextX2)) {
HXLINE( 124)											min8 = ::Math_obj::floor(nextX2);
            										}
            										else {
HXLINE( 124)											min8 = ::Math_obj::floor(lastX1);
            										}
HXDLIN( 124)										int ii_min16 = min8;
HXDLIN( 124)										int ii_max16 = ::Math_obj::ceil(mx1);
HXDLIN( 124)										xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            									}
            									else {
HXLINE( 124)										int ii_min17 = ::Math_obj::floor(lastX1);
HXDLIN( 124)										int ii_max17 = ::Math_obj::ceil(nextX2);
HXDLIN( 124)										xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            									}
            								}
            								else {
HXLINE( 124)									if ((lastX1 > nextX2)) {
HXLINE( 124)										int min9;
HXDLIN( 124)										if ((mx1 > nextX2)) {
HXLINE( 124)											min9 = ::Math_obj::floor(nextX2);
            										}
            										else {
HXLINE( 124)											min9 = ::Math_obj::ceil(mx1);
            										}
HXDLIN( 124)										int ii_min18 = min9;
HXDLIN( 124)										int ii_max18 = ::Math_obj::ceil(lastX1);
HXDLIN( 124)										xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            									}
            									else {
HXLINE( 124)										int ii_min19 = ::Math_obj::floor(mx1);
HXDLIN( 124)										int ii_max19 = ::Math_obj::ceil(nextX2);
HXDLIN( 124)										xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            									}
            								}
HXDLIN( 124)								 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 124)								if ((my1 > lastY1)) {
HXLINE( 124)									if ((my1 > nextY2)) {
HXLINE( 124)										int min10;
HXDLIN( 124)										if ((lastY1 > nextY2)) {
HXLINE( 124)											min10 = ::Math_obj::floor(nextY2);
            										}
            										else {
HXLINE( 124)											min10 = ::Math_obj::floor(lastY1);
            										}
HXDLIN( 124)										int ii_min20 = min10;
HXDLIN( 124)										int ii_max20 = ::Math_obj::ceil(my1);
HXDLIN( 124)										yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            									}
            									else {
HXLINE( 124)										int ii_min21 = ::Math_obj::floor(lastY1);
HXDLIN( 124)										int ii_max21 = ::Math_obj::ceil(nextY2);
HXDLIN( 124)										yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            									}
            								}
            								else {
HXLINE( 124)									if ((lastY1 > nextY2)) {
HXLINE( 124)										int min11;
HXDLIN( 124)										if ((my1 > nextY2)) {
HXLINE( 124)											min11 = ::Math_obj::floor(nextY2);
            										}
            										else {
HXLINE( 124)											min11 = ::Math_obj::ceil(my1);
            										}
HXDLIN( 124)										int ii_min22 = min11;
HXDLIN( 124)										int ii_max22 = ::Math_obj::ceil(lastY1);
HXDLIN( 124)										yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            									}
            									else {
HXLINE( 124)										int ii_min23 = ::Math_obj::floor(my1);
HXDLIN( 124)										int ii_max23 = ::Math_obj::ceil(nextY2);
HXDLIN( 124)										yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            									}
            								}
HXDLIN( 124)								 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 124)								if (hasUndo2) {
HXLINE( 124)									int width4 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 124)									int height4 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 124)									 ::Dynamic imageType4 = null();
HXDLIN( 124)									 ::pi_xy::ImageStruct this71 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 124)									if (::hx::IsNull( imageType4 )) {
HXLINE(  54)										imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            									}
HXLINE( 124)									::Dynamic undoImage7;
HXDLIN( 124)									switch((int)(( (int)(imageType4) ))){
            										case (int)0: {
HXLINE( 124)											 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 124)											 ::iterMagic::BytesImg b25 = byt4;
HXDLIN( 124)											{
HXLINE( 124)												b25->width = width4;
HXDLIN( 124)												b25->height = height4;
HXDLIN( 124)												b25->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 124)												b25->data = ::haxe::io::Bytes_obj::alloc((b25->length * 4));
HXDLIN( 124)												{
HXLINE( 124)													int len8 = b25->length;
HXDLIN( 124)													int w4 = 0;
HXDLIN( 124)													{
HXLINE( 124)														int _g78 = 0;
HXDLIN( 124)														int _g79 = b25->height;
HXDLIN( 124)														while((_g78 < _g79)){
HXLINE( 124)															_g78 = (_g78 + 1);
HXDLIN( 124)															int y8 = (_g78 - 1);
HXDLIN( 124)															{
HXLINE( 124)																int _g80 = 0;
HXDLIN( 124)																int _g81 = b25->width;
HXDLIN( 124)																while((_g80 < _g81)){
HXLINE( 124)																	_g80 = (_g80 + 1);
HXDLIN( 124)																	int x8 = (_g80 - 1);
HXDLIN( 124)																	{
HXLINE( 124)																		w4 = (w4 + 1);
HXDLIN( 124)																		b25->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN( 124)																	{
HXLINE( 124)																		w4 = (w4 + 1);
HXDLIN( 124)																		b25->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN( 124)																	{
HXLINE( 124)																		w4 = (w4 + 1);
HXDLIN( 124)																		b25->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																	}
HXDLIN( 124)																	{
HXLINE( 124)																		w4 = (w4 + 1);
HXDLIN( 124)																		b25->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN( 124)											undoImage7 = b25;
            										}
            										break;
            										case (int)1: {
HXLINE( 124)											 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 124)											 ::iterMagic::ArrIntImg a15 = arrI4;
HXDLIN( 124)											{
HXLINE( 124)												a15->width = width4;
HXDLIN( 124)												a15->height = height4;
HXDLIN( 124)												a15->data = ::Array_obj< int >::__new(0);
HXDLIN( 124)												a15->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 124)												{
HXLINE( 124)													int _g82 = 0;
HXDLIN( 124)													int _g83 = a15->length;
HXDLIN( 124)													while((_g82 < _g83)){
HXLINE( 124)														_g82 = (_g82 + 1);
HXDLIN( 124)														int i35 = (_g82 - 1);
HXDLIN( 124)														a15->data[i35] = 0;
            													}
            												}
            											}
HXDLIN( 124)											undoImage7 = a15;
            										}
            										break;
            										case (int)2: {
HXLINE( 124)											 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 124)											 ::iterMagic::U32ArrImg b26 = u32a4;
HXDLIN( 124)											{
HXLINE( 124)												b26->width = width4;
HXDLIN( 124)												b26->height = height4;
HXDLIN( 124)												b26->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 124)												int size4 = (b26->length * 4);
HXDLIN( 124)												b26->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN( 124)												{
HXLINE( 124)													int _g84 = 0;
HXDLIN( 124)													int _g85 = b26->length;
HXDLIN( 124)													while((_g84 < _g85)){
HXLINE( 124)														_g84 = (_g84 + 1);
HXDLIN( 124)														int i36 = (_g84 - 1);
HXDLIN( 124)														{
HXLINE( 124)															 ::haxe::io::ArrayBufferViewImpl this72 = b26->data;
HXDLIN( 124)															bool undoImage8;
HXDLIN( 124)															if ((i36 >= 0)) {
HXLINE( 124)																undoImage8 = (i36 < (this72->byteLength >> 2));
            															}
            															else {
HXLINE( 124)																undoImage8 = false;
            															}
HXDLIN( 124)															if (undoImage8) {
HXLINE( 124)																 ::haxe::io::Bytes _this4 = this72->bytes;
HXDLIN( 124)																int pos4 = ((i36 << 2) + this72->byteOffset);
HXDLIN( 124)																_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN( 124)																_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN( 124)																_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN( 124)																_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
HXDLIN( 124)											undoImage7 = b26;
            										}
            										break;
            										case (int)3: {
HXLINE( 124)											 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 124)											 ::iterMagic::VecIntImg v8 = vec4;
HXDLIN( 124)											{
HXLINE( 124)												v8->width = width4;
HXDLIN( 124)												v8->height = height4;
HXDLIN( 124)												v8->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 124)												v8->data = ::Array_obj< int >::__new(v8->length);
HXDLIN( 124)												{
HXLINE( 124)													int _g86 = 0;
HXDLIN( 124)													int _g87 = v8->length;
HXDLIN( 124)													while((_g86 < _g87)){
HXLINE( 124)														_g86 = (_g86 + 1);
HXDLIN( 124)														int i37 = (_g86 - 1);
HXDLIN( 124)														v8->data->__unsafe_set(i37,0);
            													}
            												}
            											}
HXDLIN( 124)											undoImage7 = v8;
            										}
            										break;
            										case (int)4: {
HXLINE( 124)											 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 124)											 ::iterMagic::StackIntImg b27 = sInt4;
HXDLIN( 124)											{
HXLINE( 124)												b27->width = width4;
HXDLIN( 124)												b27->height = height4;
HXDLIN( 124)												b27->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 124)												b27->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 124)												{
HXLINE( 124)													int len9 = b27->length;
HXDLIN( 124)													 ::haxe::ds::GenericStack_Int d4 = b27->data;
HXDLIN( 124)													if (::hx::IsNull( d4->head )) {
HXLINE( 124)														int _g88 = 0;
HXDLIN( 124)														int _g89 = len9;
HXDLIN( 124)														while((_g88 < _g89)){
HXLINE( 124)															_g88 = (_g88 + 1);
HXDLIN( 124)															int i38 = (_g88 - 1);
HXDLIN( 124)															d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            														}
            													}
            													else {
HXLINE( 124)														int _g90 = 0;
HXDLIN( 124)														int _g91 = len9;
HXDLIN( 124)														while((_g90 < _g91)){
HXLINE( 124)															_g90 = (_g90 + 1);
HXDLIN( 124)															int i39 = (_g90 - 1);
HXDLIN( 124)															{
HXLINE( 124)																 ::haxe::ds::GenericCell_Int l4 = b27->data->head;
HXDLIN( 124)																 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN( 124)																{
HXLINE( 124)																	int _g92 = 0;
HXDLIN( 124)																	int _g93 = i39;
HXDLIN( 124)																	while((_g92 < _g93)){
HXLINE( 124)																		_g92 = (_g92 + 1);
HXDLIN( 124)																		int i40 = (_g92 - 1);
HXLINE( 345)																		prev4 = l4;
HXLINE( 346)																		l4 = l4->next;
            																	}
            																}
HXLINE( 124)																if (::hx::IsNull( prev4 )) {
HXLINE( 124)																	b27->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 124)																	l4 = null();
            																}
            																else {
HXLINE( 124)																	prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 124)																	l4 = null();
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN( 124)											undoImage7 = b27;
            										}
            										break;
            									}
HXDLIN( 124)									this71->image = undoImage7;
HXDLIN( 124)									this71->width = width4;
HXDLIN( 124)									this71->height = height4;
HXDLIN( 124)									this71->imageType = ( (int)(imageType4) );
HXDLIN( 124)									undoImage6 = this71;
HXDLIN( 124)									{
HXLINE( 124)										int rectLeft2 = xIter32->start;
HXDLIN( 124)										int rectTop2 = yIter32->start;
HXDLIN( 124)										int rectRight2 = xIter32->max;
HXDLIN( 124)										bool forceClear2 = false;
HXDLIN( 124)										{
HXLINE( 124)											int _g94 = rectTop2;
HXDLIN( 124)											int _g95 = yIter32->max;
HXDLIN( 124)											while((_g94 < _g95)){
HXLINE( 124)												_g94 = (_g94 + 1);
HXDLIN( 124)												int dy2 = (_g94 - 1);
HXDLIN( 124)												{
HXLINE( 124)													int _g96 = rectLeft2;
HXDLIN( 124)													int _g97 = rectRight2;
HXDLIN( 124)													while((_g96 < _g97)){
HXLINE( 124)														_g96 = (_g96 + 1);
HXDLIN( 124)														int dx2 = (_g96 - 1);
HXDLIN( 124)														::Dynamic this73 = this70->image;
HXDLIN( 124)														int index8;
HXDLIN( 124)														if (this70->useVirtualPos) {
HXLINE( 124)															index8 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this70->virtualY) * ( (Float)(this70->width) )) + dx2) - this70->virtualX));
            														}
            														else {
HXLINE( 124)															index8 = ::Std_obj::_hx_int(( (Float)(((dy2 * this70->width) + dx2)) ));
            														}
HXDLIN( 124)														int c6 = ::iterMagic::Iimg_obj::get(this73,index8);
HXDLIN( 124)														int col2;
HXDLIN( 124)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)															col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            														}
            														else {
HXLINE( 124)															col2 = c6;
            														}
HXDLIN( 124)														bool _hx_tmp16;
HXDLIN( 124)														if (this70->useMask) {
HXLINE( 124)															_hx_tmp16 = ::hx::IsNotNull( this70->mask );
            														}
            														else {
HXLINE( 124)															_hx_tmp16 = false;
            														}
HXDLIN( 124)														if (_hx_tmp16) {
HXLINE( 124)															 ::pi_xy::ImageStruct this74 = this70->mask;
HXDLIN( 124)															::Dynamic this75 = this74->image;
HXDLIN( 124)															int index9;
HXDLIN( 124)															if (this74->useVirtualPos) {
HXLINE( 124)																index9 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this74->virtualY) * ( (Float)(this74->width) )) + dx2) - this74->virtualX));
            															}
            															else {
HXLINE( 124)																index9 = ::Std_obj::_hx_int(( (Float)(((dy2 * this74->width) + dx2)) ));
            															}
HXDLIN( 124)															int c7 = ::iterMagic::Iimg_obj::get(this75,index9);
HXDLIN( 124)															int v9;
HXDLIN( 124)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																v9 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            															}
            															else {
HXLINE( 124)																v9 = c7;
            															}
HXDLIN( 124)															int maskPixel2 = v9;
HXDLIN( 124)															int this76 = col2;
HXDLIN( 124)															if ((maskPixel2 == 0)) {
HXLINE( 124)																col2 = this76;
            															}
            															else {
HXLINE( 124)																Float m02;
HXDLIN( 124)																int this77 = ((maskPixel2 >> 24) & 255);
HXDLIN( 124)																if ((this77 == 0)) {
HXLINE( 124)																	m02 = ((Float)0.);
            																}
            																else {
HXLINE( 124)																	m02 = (( (Float)(this77) ) / ( (Float)(255) ));
            																}
HXDLIN( 124)																Float m12;
HXDLIN( 124)																int this78 = ((maskPixel2 >> 16) & 255);
HXDLIN( 124)																if ((this78 == 0)) {
HXLINE( 124)																	m12 = ((Float)0.);
            																}
            																else {
HXLINE( 124)																	m12 = (( (Float)(this78) ) / ( (Float)(255) ));
            																}
HXDLIN( 124)																Float m22;
HXDLIN( 124)																int this79 = ((maskPixel2 >> 8) & 255);
HXDLIN( 124)																if ((this79 == 0)) {
HXLINE( 124)																	m22 = ((Float)0.);
            																}
            																else {
HXLINE( 124)																	m22 = (( (Float)(this79) ) / ( (Float)(255) ));
            																}
HXDLIN( 124)																Float m32;
HXDLIN( 124)																int this80 = (maskPixel2 & 255);
HXDLIN( 124)																if ((this80 == 0)) {
HXLINE( 124)																	m32 = ((Float)0.);
            																}
            																else {
HXLINE( 124)																	m32 = (( (Float)(this80) ) / ( (Float)(255) ));
            																}
HXDLIN( 124)																int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this76 >> 24) & 255)) )));
HXDLIN( 124)																int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this76 >> 16) & 255)) )));
HXDLIN( 124)																int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this76 >> 8) & 255)) )));
HXDLIN( 124)																int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this76 & 255)) )));
HXDLIN( 124)																col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN( 124)														if ((col2 != 0)) {
HXLINE( 124)															int x9 = (dx2 - rectLeft2);
HXDLIN( 124)															int y9 = (dy2 - rectTop2);
HXDLIN( 124)															int c8 = col2;
HXDLIN( 124)															bool _hx_tmp17;
HXDLIN( 124)															if ((((c8 >> 24) & 255) < 254)) {
HXLINE( 124)																_hx_tmp17 = undoImage6->transparent;
            															}
            															else {
HXLINE( 124)																_hx_tmp17 = false;
            															}
HXDLIN( 124)															if (_hx_tmp17) {
HXLINE( 124)																int location4;
HXDLIN( 124)																if (undoImage6->useVirtualPos) {
HXLINE( 124)																	location4 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            																}
            																else {
HXLINE( 124)																	location4 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            																}
HXDLIN( 124)																int this81 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 124)																int this82;
HXDLIN( 124)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																	this82 = ((((((this81 >> 24) & 255) << 24) | ((this81 & 255) << 16)) | (((this81 >> 8) & 255) << 8)) | ((this81 >> 16) & 255));
            																}
            																else {
HXLINE( 124)																	this82 = this81;
            																}
HXDLIN( 124)																Float a16;
HXDLIN( 124)																int this83 = ((this82 >> 24) & 255);
HXDLIN( 124)																if ((this83 == 0)) {
HXLINE( 124)																	a16 = ((Float)0.);
            																}
            																else {
HXLINE( 124)																	a16 = (( (Float)(this83) ) / ( (Float)(255) ));
            																}
HXDLIN( 124)																Float r14;
HXDLIN( 124)																int this84 = ((this82 >> 16) & 255);
HXDLIN( 124)																if ((this84 == 0)) {
HXLINE( 124)																	r14 = ((Float)0.);
            																}
            																else {
HXLINE( 124)																	r14 = (( (Float)(this84) ) / ( (Float)(255) ));
            																}
HXDLIN( 124)																Float g14;
HXDLIN( 124)																int this85 = ((this82 >> 8) & 255);
HXDLIN( 124)																if ((this85 == 0)) {
HXLINE( 124)																	g14 = ((Float)0.);
            																}
            																else {
HXLINE( 124)																	g14 = (( (Float)(this85) ) / ( (Float)(255) ));
            																}
HXDLIN( 124)																Float b111;
HXDLIN( 124)																int this86 = (this82 & 255);
HXDLIN( 124)																if ((this86 == 0)) {
HXLINE( 124)																	b111 = ((Float)0.);
            																}
            																else {
HXLINE( 124)																	b111 = (( (Float)(this86) ) / ( (Float)(255) ));
            																}
HXDLIN( 124)																Float a25;
HXDLIN( 124)																int this87 = ((col2 >> 24) & 255);
HXDLIN( 124)																if ((this87 == 0)) {
HXLINE( 124)																	a25 = ((Float)0.);
            																}
            																else {
HXLINE( 124)																	a25 = (( (Float)(this87) ) / ( (Float)(255) ));
            																}
HXDLIN( 124)																Float r24;
HXDLIN( 124)																int this88 = ((col2 >> 16) & 255);
HXDLIN( 124)																if ((this88 == 0)) {
HXLINE( 124)																	r24 = ((Float)0.);
            																}
            																else {
HXLINE( 124)																	r24 = (( (Float)(this88) ) / ( (Float)(255) ));
            																}
HXDLIN( 124)																Float g24;
HXDLIN( 124)																int this89 = ((col2 >> 8) & 255);
HXDLIN( 124)																if ((this89 == 0)) {
HXLINE( 124)																	g24 = ((Float)0.);
            																}
            																else {
HXLINE( 124)																	g24 = (( (Float)(this89) ) / ( (Float)(255) ));
            																}
HXDLIN( 124)																Float b28;
HXDLIN( 124)																int this90 = (col2 & 255);
HXDLIN( 124)																if ((this90 == 0)) {
HXLINE( 124)																	b28 = ((Float)0.);
            																}
            																else {
HXLINE( 124)																	b28 = (( (Float)(this90) ) / ( (Float)(255) ));
            																}
HXDLIN( 124)																Float a34 = (a16 * (( (Float)(1) ) - a25));
HXDLIN( 124)																int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a25))));
HXDLIN( 124)																int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a25))));
HXDLIN( 124)																int b29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a34) + (b28 * a25))));
HXDLIN( 124)																int a17 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a25)));
HXDLIN( 124)																int blended4 = ((((a17 << 24) | (r8 << 16)) | (g8 << 8)) | b29);
HXDLIN( 124)																{
HXLINE( 124)																	int _hx_tmp18;
HXDLIN( 124)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																		_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            																	}
            																	else {
HXLINE( 124)																		_hx_tmp18 = blended4;
            																	}
HXDLIN( 124)																	::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            																}
            															}
            															else {
HXLINE( 124)																::Dynamic this91 = undoImage6->image;
HXDLIN( 124)																int index10;
HXDLIN( 124)																if (undoImage6->useVirtualPos) {
HXLINE( 124)																	index10 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            																}
            																else {
HXLINE( 124)																	index10 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            																}
HXDLIN( 124)																int _hx_tmp19;
HXDLIN( 124)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																	_hx_tmp19 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            																}
            																else {
HXLINE( 124)																	_hx_tmp19 = c8;
            																}
HXDLIN( 124)																::iterMagic::Iimg_obj::set(this91,index10,_hx_tmp19);
            															}
            														}
            														else {
HXLINE( 124)															if (forceClear2) {
HXLINE( 124)																::Dynamic this92 = undoImage6->image;
HXDLIN( 124)																int x10 = (dx2 - rectLeft2);
HXDLIN( 124)																int y10 = (dy2 - rectTop2);
HXDLIN( 124)																int index11;
HXDLIN( 124)																if (undoImage6->useVirtualPos) {
HXLINE( 124)																	index11 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x10) - undoImage6->virtualX));
            																}
            																else {
HXLINE( 124)																	index11 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage6->width) + x10)) ));
            																}
HXDLIN( 124)																::iterMagic::Iimg_obj::set(this92,index11,0);
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 124)								{
HXLINE( 124)									int _g_min4 = xIter32->start;
HXDLIN( 124)									int _g_max4 = xIter32->max;
HXDLIN( 124)									while((_g_min4 < _g_max4)){
HXLINE( 124)										_g_min4 = (_g_min4 + 1);
HXDLIN( 124)										int px2 = (_g_min4 - 1);
HXDLIN( 124)										Float pcx2 = (( (Float)(px2) ) - nextX2);
HXDLIN( 124)										{
HXLINE( 124)											int _g_min5 = yIter32->start;
HXDLIN( 124)											int _g_max5 = yIter32->max;
HXDLIN( 124)											while((_g_min5 < _g_max5)){
HXLINE( 124)												_g_min5 = (_g_min5 + 1);
HXDLIN( 124)												int py2 = (_g_min5 - 1);
HXDLIN( 124)												Float pcy2 = (( (Float)(py2) ) - nextY2);
HXDLIN( 124)												Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 124)												Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 124)												Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 124)												Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 124)												Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 124)												bool _hx_tmp20;
HXDLIN( 124)												bool _hx_tmp21;
HXDLIN( 124)												if ((ratioA2 >= 0)) {
HXLINE( 124)													_hx_tmp21 = (ratioB2 >= 0);
            												}
            												else {
HXLINE( 124)													_hx_tmp21 = false;
            												}
HXDLIN( 124)												if (_hx_tmp21) {
HXLINE( 124)													_hx_tmp20 = (ratioC2 >= 0);
            												}
            												else {
HXLINE( 124)													_hx_tmp20 = false;
            												}
HXDLIN( 124)												if (_hx_tmp20) {
HXLINE( 124)													int i41 = ::Std_obj::_hx_int((((( (Float)(aA2) ) * ratioA2) + (( (Float)(aB2) ) * ratioB2)) + (( (Float)(aC2) ) * ratioC2)));
HXDLIN( 124)													if ((i41 > 255)) {
HXLINE(  24)														i41 = 255;
            													}
HXLINE( 124)													if ((i41 < 0)) {
HXLINE(  25)														i41 = 0;
            													}
HXLINE( 124)													int a18 = i41;
HXDLIN( 124)													int i42 = ::Std_obj::_hx_int((((( (Float)(rA2) ) * ratioA2) + (( (Float)(rB2) ) * ratioB2)) + (( (Float)(rC2) ) * ratioC2)));
HXDLIN( 124)													if ((i42 > 255)) {
HXLINE(  24)														i42 = 255;
            													}
HXLINE( 124)													if ((i42 < 0)) {
HXLINE(  25)														i42 = 0;
            													}
HXLINE( 124)													int r9 = i42;
HXDLIN( 124)													int i43 = ::Std_obj::_hx_int((((( (Float)(gA2) ) * ratioA2) + (( (Float)(gB2) ) * ratioB2)) + (( (Float)(gC2) ) * ratioC2)));
HXDLIN( 124)													if ((i43 > 255)) {
HXLINE(  24)														i43 = 255;
            													}
HXLINE( 124)													if ((i43 < 0)) {
HXLINE(  25)														i43 = 0;
            													}
HXLINE( 124)													int g9 = i43;
HXDLIN( 124)													int i44 = ::Std_obj::_hx_int((((( (Float)(bA2) ) * ratioA2) + (( (Float)(bB2) ) * ratioB2)) + (( (Float)(bC2) ) * ratioC2)));
HXDLIN( 124)													if ((i44 > 255)) {
HXLINE(  24)														i44 = 255;
            													}
HXLINE( 124)													if ((i44 < 0)) {
HXLINE(  25)														i44 = 0;
            													}
HXLINE( 124)													int b30 = i44;
HXDLIN( 124)													{
HXLINE( 124)														int location5;
HXDLIN( 124)														if (this70->useVirtualPos) {
HXLINE( 124)															location5 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - this70->virtualY) * ( (Float)(this70->width) )) + px2) - this70->virtualX));
            														}
            														else {
HXLINE( 124)															location5 = ::Std_obj::_hx_int(( (Float)(((py2 * this70->width) + px2)) ));
            														}
HXDLIN( 124)														bool _hx_tmp22;
HXDLIN( 124)														if (this70->transparent) {
HXLINE( 124)															_hx_tmp22 = (a18 < 254);
            														}
            														else {
HXLINE( 124)															_hx_tmp22 = false;
            														}
HXDLIN( 124)														if (_hx_tmp22) {
HXLINE( 124)															int this93 = ::iterMagic::Iimg_obj::get(this70->image,location5);
HXDLIN( 124)															int old2;
HXDLIN( 124)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																old2 = ((((((this93 >> 24) & 255) << 24) | ((this93 & 255) << 16)) | (((this93 >> 8) & 255) << 8)) | ((this93 >> 16) & 255));
            															}
            															else {
HXLINE( 124)																old2 = this93;
            															}
HXDLIN( 124)															int rhs2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b30);
HXDLIN( 124)															Float a19;
HXDLIN( 124)															int this94 = ((old2 >> 24) & 255);
HXDLIN( 124)															if ((this94 == 0)) {
HXLINE( 124)																a19 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																a19 = (( (Float)(this94) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float r15;
HXDLIN( 124)															int this95 = ((old2 >> 16) & 255);
HXDLIN( 124)															if ((this95 == 0)) {
HXLINE( 124)																r15 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																r15 = (( (Float)(this95) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float g15;
HXDLIN( 124)															int this96 = ((old2 >> 8) & 255);
HXDLIN( 124)															if ((this96 == 0)) {
HXLINE( 124)																g15 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																g15 = (( (Float)(this96) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float b112;
HXDLIN( 124)															int this97 = (old2 & 255);
HXDLIN( 124)															if ((this97 == 0)) {
HXLINE( 124)																b112 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																b112 = (( (Float)(this97) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float a26;
HXDLIN( 124)															int this98 = ((rhs2 >> 24) & 255);
HXDLIN( 124)															if ((this98 == 0)) {
HXLINE( 124)																a26 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																a26 = (( (Float)(this98) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float r25;
HXDLIN( 124)															int this99 = ((rhs2 >> 16) & 255);
HXDLIN( 124)															if ((this99 == 0)) {
HXLINE( 124)																r25 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																r25 = (( (Float)(this99) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float g25;
HXDLIN( 124)															int this100 = ((rhs2 >> 8) & 255);
HXDLIN( 124)															if ((this100 == 0)) {
HXLINE( 124)																g25 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																g25 = (( (Float)(this100) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float b210;
HXDLIN( 124)															int this101 = (rhs2 & 255);
HXDLIN( 124)															if ((this101 == 0)) {
HXLINE( 124)																b210 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																b210 = (( (Float)(this101) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float a35 = (a19 * (( (Float)(1) ) - a26));
HXDLIN( 124)															int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a26))));
HXDLIN( 124)															int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a26))));
HXDLIN( 124)															int b31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a35) + (b210 * a26))));
HXDLIN( 124)															int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a26)));
HXDLIN( 124)															int blended5 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b31);
HXDLIN( 124)															{
HXLINE( 124)																int _hx_tmp23;
HXDLIN( 124)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																	_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            																}
            																else {
HXLINE( 124)																	_hx_tmp23 = blended5;
            																}
HXDLIN( 124)																::iterMagic::Iimg_obj::set(this70->image,location5,_hx_tmp23);
            															}
            														}
            														else {
HXLINE( 124)															int value2;
HXDLIN( 124)															if (this70->isLittle) {
HXLINE( 124)																value2 = ((((a18 << 24) | (b30 << 16)) | (g9 << 8)) | r9);
            															}
            															else {
HXLINE( 124)																value2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b30);
            															}
HXDLIN( 124)															::iterMagic::Iimg_obj::set(this70->image,location5,value2);
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 124)								if ((hasHit2 == false)) {
HXLINE( 124)									 ::pi_xy::algo::HitTri v10 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,mx1,my1,lastX1,lastY1,nextX2,nextY2,true);
HXDLIN( 124)									if (hasUndo2) {
HXLINE( 124)										v10->undoImage = undoImage6;
HXDLIN( 124)										v10->undoX = xIter32->start;
HXDLIN( 124)										v10->undoY = yIter32->start;
            									}
            								}
            							}
            						}
HXLINE( 236)						lastX1 = nextX2;
HXLINE( 237)						lastY1 = nextY2;
            					}
            				}
            			}
            			else {
HXLINE( 124)				int _g98 = 0;
HXDLIN( 124)				int _g99 = (sides1 + 1);
HXDLIN( 124)				while((_g98 < _g99)){
HXLINE( 124)					_g98 = (_g98 + 1);
HXDLIN( 124)					int i45 = (_g98 - 1);
HXDLIN( 124)					Float nextX3 = (cx1 + (rx * ::Math_obj::cos(((( (Float)(i45) ) * theta1) + omega1))));
HXDLIN( 124)					Float nextY3 = (cy1 + (ry * ::Math_obj::sin(((( (Float)(i45) ) * theta1) + omega1))));
HXDLIN( 124)					{
HXLINE( 124)						 ::pi_xy::ImageStruct this102 = temp;
HXDLIN( 124)						{
HXLINE( 124)							bool hasHit3 = false;
HXDLIN( 124)							bool hasUndo3 = false;
HXDLIN( 124)							int aA3 = ((colorOut >> 24) & 255);
HXDLIN( 124)							int rA3 = ((colorOut >> 16) & 255);
HXDLIN( 124)							int gA3 = ((colorOut >> 8) & 255);
HXDLIN( 124)							int bA3 = (colorOut & 255);
HXDLIN( 124)							int aB3 = ((colorIn >> 24) & 255);
HXDLIN( 124)							int rB3 = ((colorIn >> 16) & 255);
HXDLIN( 124)							int gB3 = ((colorIn >> 8) & 255);
HXDLIN( 124)							int bB3 = (colorIn & 255);
HXDLIN( 124)							int aC3 = ((colorOut >> 24) & 255);
HXDLIN( 124)							int rC3 = ((colorOut >> 16) & 255);
HXDLIN( 124)							int gC3 = ((colorOut >> 8) & 255);
HXDLIN( 124)							int bC3 = (colorOut & 255);
HXDLIN( 124)							Float bcx3 = (lastX1 - nextX3);
HXDLIN( 124)							Float bcy3 = (lastY1 - nextY3);
HXDLIN( 124)							Float acx3 = (mx1 - nextX3);
HXDLIN( 124)							Float acy3 = (my1 - nextY3);
HXDLIN( 124)							Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 124)							Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 124)							Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 124)							Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 124)							 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 124)							if ((mx1 > lastX1)) {
HXLINE( 124)								if ((mx1 > nextX3)) {
HXLINE( 124)									int min12;
HXDLIN( 124)									if ((lastX1 > nextX3)) {
HXLINE( 124)										min12 = ::Math_obj::floor(nextX3);
            									}
            									else {
HXLINE( 124)										min12 = ::Math_obj::floor(lastX1);
            									}
HXDLIN( 124)									int ii_min24 = min12;
HXDLIN( 124)									int ii_max24 = ::Math_obj::ceil(mx1);
HXDLIN( 124)									xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            								}
            								else {
HXLINE( 124)									int ii_min25 = ::Math_obj::floor(lastX1);
HXDLIN( 124)									int ii_max25 = ::Math_obj::ceil(nextX3);
HXDLIN( 124)									xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            								}
            							}
            							else {
HXLINE( 124)								if ((lastX1 > nextX3)) {
HXLINE( 124)									int min13;
HXDLIN( 124)									if ((mx1 > nextX3)) {
HXLINE( 124)										min13 = ::Math_obj::floor(nextX3);
            									}
            									else {
HXLINE( 124)										min13 = ::Math_obj::ceil(mx1);
            									}
HXDLIN( 124)									int ii_min26 = min13;
HXDLIN( 124)									int ii_max26 = ::Math_obj::ceil(lastX1);
HXDLIN( 124)									xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            								}
            								else {
HXLINE( 124)									int ii_min27 = ::Math_obj::floor(mx1);
HXDLIN( 124)									int ii_max27 = ::Math_obj::ceil(nextX3);
HXDLIN( 124)									xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            								}
            							}
HXDLIN( 124)							 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 124)							if ((my1 > lastY1)) {
HXLINE( 124)								if ((my1 > nextY3)) {
HXLINE( 124)									int min14;
HXDLIN( 124)									if ((lastY1 > nextY3)) {
HXLINE( 124)										min14 = ::Math_obj::floor(nextY3);
            									}
            									else {
HXLINE( 124)										min14 = ::Math_obj::floor(lastY1);
            									}
HXDLIN( 124)									int ii_min28 = min14;
HXDLIN( 124)									int ii_max28 = ::Math_obj::ceil(my1);
HXDLIN( 124)									yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            								}
            								else {
HXLINE( 124)									int ii_min29 = ::Math_obj::floor(lastY1);
HXDLIN( 124)									int ii_max29 = ::Math_obj::ceil(nextY3);
HXDLIN( 124)									yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            								}
            							}
            							else {
HXLINE( 124)								if ((lastY1 > nextY3)) {
HXLINE( 124)									int min15;
HXDLIN( 124)									if ((my1 > nextY3)) {
HXLINE( 124)										min15 = ::Math_obj::floor(nextY3);
            									}
            									else {
HXLINE( 124)										min15 = ::Math_obj::ceil(my1);
            									}
HXDLIN( 124)									int ii_min30 = min15;
HXDLIN( 124)									int ii_max30 = ::Math_obj::ceil(lastY1);
HXDLIN( 124)									yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            								}
            								else {
HXLINE( 124)									int ii_min31 = ::Math_obj::floor(my1);
HXDLIN( 124)									int ii_max31 = ::Math_obj::ceil(nextY3);
HXDLIN( 124)									yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            								}
            							}
HXDLIN( 124)							 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 124)							if (hasUndo3) {
HXLINE( 124)								int width5 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 124)								int height5 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 124)								 ::Dynamic imageType5 = null();
HXDLIN( 124)								 ::pi_xy::ImageStruct this103 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 124)								if (::hx::IsNull( imageType5 )) {
HXLINE(  54)									imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            								}
HXLINE( 124)								::Dynamic undoImage10;
HXDLIN( 124)								switch((int)(( (int)(imageType5) ))){
            									case (int)0: {
HXLINE( 124)										 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 124)										 ::iterMagic::BytesImg b32 = byt5;
HXDLIN( 124)										{
HXLINE( 124)											b32->width = width5;
HXDLIN( 124)											b32->height = height5;
HXDLIN( 124)											b32->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 124)											b32->data = ::haxe::io::Bytes_obj::alloc((b32->length * 4));
HXDLIN( 124)											{
HXLINE( 124)												int len10 = b32->length;
HXDLIN( 124)												int w5 = 0;
HXDLIN( 124)												{
HXLINE( 124)													int _g100 = 0;
HXDLIN( 124)													int _g101 = b32->height;
HXDLIN( 124)													while((_g100 < _g101)){
HXLINE( 124)														_g100 = (_g100 + 1);
HXDLIN( 124)														int y11 = (_g100 - 1);
HXDLIN( 124)														{
HXLINE( 124)															int _g102 = 0;
HXDLIN( 124)															int _g103 = b32->width;
HXDLIN( 124)															while((_g102 < _g103)){
HXLINE( 124)																_g102 = (_g102 + 1);
HXDLIN( 124)																int x11 = (_g102 - 1);
HXDLIN( 124)																{
HXLINE( 124)																	w5 = (w5 + 1);
HXDLIN( 124)																	b32->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN( 124)																{
HXLINE( 124)																	w5 = (w5 + 1);
HXDLIN( 124)																	b32->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN( 124)																{
HXLINE( 124)																	w5 = (w5 + 1);
HXDLIN( 124)																	b32->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																}
HXDLIN( 124)																{
HXLINE( 124)																	w5 = (w5 + 1);
HXDLIN( 124)																	b32->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN( 124)										undoImage10 = b32;
            									}
            									break;
            									case (int)1: {
HXLINE( 124)										 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 124)										 ::iterMagic::ArrIntImg a27 = arrI5;
HXDLIN( 124)										{
HXLINE( 124)											a27->width = width5;
HXDLIN( 124)											a27->height = height5;
HXDLIN( 124)											a27->data = ::Array_obj< int >::__new(0);
HXDLIN( 124)											a27->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 124)											{
HXLINE( 124)												int _g104 = 0;
HXDLIN( 124)												int _g105 = a27->length;
HXDLIN( 124)												while((_g104 < _g105)){
HXLINE( 124)													_g104 = (_g104 + 1);
HXDLIN( 124)													int i46 = (_g104 - 1);
HXDLIN( 124)													a27->data[i46] = 0;
            												}
            											}
            										}
HXDLIN( 124)										undoImage10 = a27;
            									}
            									break;
            									case (int)2: {
HXLINE( 124)										 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 124)										 ::iterMagic::U32ArrImg b33 = u32a5;
HXDLIN( 124)										{
HXLINE( 124)											b33->width = width5;
HXDLIN( 124)											b33->height = height5;
HXDLIN( 124)											b33->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 124)											int size5 = (b33->length * 4);
HXDLIN( 124)											b33->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN( 124)											{
HXLINE( 124)												int _g106 = 0;
HXDLIN( 124)												int _g107 = b33->length;
HXDLIN( 124)												while((_g106 < _g107)){
HXLINE( 124)													_g106 = (_g106 + 1);
HXDLIN( 124)													int i47 = (_g106 - 1);
HXDLIN( 124)													{
HXLINE( 124)														 ::haxe::io::ArrayBufferViewImpl this104 = b33->data;
HXDLIN( 124)														bool undoImage11;
HXDLIN( 124)														if ((i47 >= 0)) {
HXLINE( 124)															undoImage11 = (i47 < (this104->byteLength >> 2));
            														}
            														else {
HXLINE( 124)															undoImage11 = false;
            														}
HXDLIN( 124)														if (undoImage11) {
HXLINE( 124)															 ::haxe::io::Bytes _this5 = this104->bytes;
HXDLIN( 124)															int pos5 = ((i47 << 2) + this104->byteOffset);
HXDLIN( 124)															_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN( 124)															_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN( 124)															_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN( 124)															_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
HXDLIN( 124)										undoImage10 = b33;
            									}
            									break;
            									case (int)3: {
HXLINE( 124)										 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 124)										 ::iterMagic::VecIntImg v11 = vec5;
HXDLIN( 124)										{
HXLINE( 124)											v11->width = width5;
HXDLIN( 124)											v11->height = height5;
HXDLIN( 124)											v11->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 124)											v11->data = ::Array_obj< int >::__new(v11->length);
HXDLIN( 124)											{
HXLINE( 124)												int _g108 = 0;
HXDLIN( 124)												int _g109 = v11->length;
HXDLIN( 124)												while((_g108 < _g109)){
HXLINE( 124)													_g108 = (_g108 + 1);
HXDLIN( 124)													int i48 = (_g108 - 1);
HXDLIN( 124)													v11->data->__unsafe_set(i48,0);
            												}
            											}
            										}
HXDLIN( 124)										undoImage10 = v11;
            									}
            									break;
            									case (int)4: {
HXLINE( 124)										 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 124)										 ::iterMagic::StackIntImg b34 = sInt5;
HXDLIN( 124)										{
HXLINE( 124)											b34->width = width5;
HXDLIN( 124)											b34->height = height5;
HXDLIN( 124)											b34->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 124)											b34->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 124)											{
HXLINE( 124)												int len11 = b34->length;
HXDLIN( 124)												 ::haxe::ds::GenericStack_Int d5 = b34->data;
HXDLIN( 124)												if (::hx::IsNull( d5->head )) {
HXLINE( 124)													int _g110 = 0;
HXDLIN( 124)													int _g111 = len11;
HXDLIN( 124)													while((_g110 < _g111)){
HXLINE( 124)														_g110 = (_g110 + 1);
HXDLIN( 124)														int i49 = (_g110 - 1);
HXDLIN( 124)														d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            													}
            												}
            												else {
HXLINE( 124)													int _g112 = 0;
HXDLIN( 124)													int _g113 = len11;
HXDLIN( 124)													while((_g112 < _g113)){
HXLINE( 124)														_g112 = (_g112 + 1);
HXDLIN( 124)														int i50 = (_g112 - 1);
HXDLIN( 124)														{
HXLINE( 124)															 ::haxe::ds::GenericCell_Int l5 = b34->data->head;
HXDLIN( 124)															 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN( 124)															{
HXLINE( 124)																int _g114 = 0;
HXDLIN( 124)																int _g115 = i50;
HXDLIN( 124)																while((_g114 < _g115)){
HXLINE( 124)																	_g114 = (_g114 + 1);
HXDLIN( 124)																	int i51 = (_g114 - 1);
HXLINE( 345)																	prev5 = l5;
HXLINE( 346)																	l5 = l5->next;
            																}
            															}
HXLINE( 124)															if (::hx::IsNull( prev5 )) {
HXLINE( 124)																b34->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 124)																l5 = null();
            															}
            															else {
HXLINE( 124)																prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 124)																l5 = null();
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN( 124)										undoImage10 = b34;
            									}
            									break;
            								}
HXDLIN( 124)								this103->image = undoImage10;
HXDLIN( 124)								this103->width = width5;
HXDLIN( 124)								this103->height = height5;
HXDLIN( 124)								this103->imageType = ( (int)(imageType5) );
HXDLIN( 124)								undoImage9 = this103;
HXDLIN( 124)								{
HXLINE( 124)									int rectLeft3 = xIter33->start;
HXDLIN( 124)									int rectTop3 = yIter33->start;
HXDLIN( 124)									int rectRight3 = xIter33->max;
HXDLIN( 124)									bool forceClear3 = false;
HXDLIN( 124)									{
HXLINE( 124)										int _g116 = rectTop3;
HXDLIN( 124)										int _g117 = yIter33->max;
HXDLIN( 124)										while((_g116 < _g117)){
HXLINE( 124)											_g116 = (_g116 + 1);
HXDLIN( 124)											int dy3 = (_g116 - 1);
HXDLIN( 124)											{
HXLINE( 124)												int _g118 = rectLeft3;
HXDLIN( 124)												int _g119 = rectRight3;
HXDLIN( 124)												while((_g118 < _g119)){
HXLINE( 124)													_g118 = (_g118 + 1);
HXDLIN( 124)													int dx3 = (_g118 - 1);
HXDLIN( 124)													::Dynamic this105 = this102->image;
HXDLIN( 124)													int index12;
HXDLIN( 124)													if (this102->useVirtualPos) {
HXLINE( 124)														index12 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this102->virtualY) * ( (Float)(this102->width) )) + dx3) - this102->virtualX));
            													}
            													else {
HXLINE( 124)														index12 = ::Std_obj::_hx_int(( (Float)(((dy3 * this102->width) + dx3)) ));
            													}
HXDLIN( 124)													int c9 = ::iterMagic::Iimg_obj::get(this105,index12);
HXDLIN( 124)													int col3;
HXDLIN( 124)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)														col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            													}
            													else {
HXLINE( 124)														col3 = c9;
            													}
HXDLIN( 124)													bool _hx_tmp24;
HXDLIN( 124)													if (this102->useMask) {
HXLINE( 124)														_hx_tmp24 = ::hx::IsNotNull( this102->mask );
            													}
            													else {
HXLINE( 124)														_hx_tmp24 = false;
            													}
HXDLIN( 124)													if (_hx_tmp24) {
HXLINE( 124)														 ::pi_xy::ImageStruct this106 = this102->mask;
HXDLIN( 124)														::Dynamic this107 = this106->image;
HXDLIN( 124)														int index13;
HXDLIN( 124)														if (this106->useVirtualPos) {
HXLINE( 124)															index13 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this106->virtualY) * ( (Float)(this106->width) )) + dx3) - this106->virtualX));
            														}
            														else {
HXLINE( 124)															index13 = ::Std_obj::_hx_int(( (Float)(((dy3 * this106->width) + dx3)) ));
            														}
HXDLIN( 124)														int c10 = ::iterMagic::Iimg_obj::get(this107,index13);
HXDLIN( 124)														int v12;
HXDLIN( 124)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)															v12 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            														}
            														else {
HXLINE( 124)															v12 = c10;
            														}
HXDLIN( 124)														int maskPixel3 = v12;
HXDLIN( 124)														int this108 = col3;
HXDLIN( 124)														if ((maskPixel3 == 0)) {
HXLINE( 124)															col3 = this108;
            														}
            														else {
HXLINE( 124)															Float m03;
HXDLIN( 124)															int this109 = ((maskPixel3 >> 24) & 255);
HXDLIN( 124)															if ((this109 == 0)) {
HXLINE( 124)																m03 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																m03 = (( (Float)(this109) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float m13;
HXDLIN( 124)															int this110 = ((maskPixel3 >> 16) & 255);
HXDLIN( 124)															if ((this110 == 0)) {
HXLINE( 124)																m13 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																m13 = (( (Float)(this110) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float m23;
HXDLIN( 124)															int this111 = ((maskPixel3 >> 8) & 255);
HXDLIN( 124)															if ((this111 == 0)) {
HXLINE( 124)																m23 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																m23 = (( (Float)(this111) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float m33;
HXDLIN( 124)															int this112 = (maskPixel3 & 255);
HXDLIN( 124)															if ((this112 == 0)) {
HXLINE( 124)																m33 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																m33 = (( (Float)(this112) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this108 >> 24) & 255)) )));
HXDLIN( 124)															int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this108 >> 16) & 255)) )));
HXDLIN( 124)															int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this108 >> 8) & 255)) )));
HXDLIN( 124)															int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this108 & 255)) )));
HXDLIN( 124)															col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN( 124)													if ((col3 != 0)) {
HXLINE( 124)														int x12 = (dx3 - rectLeft3);
HXDLIN( 124)														int y12 = (dy3 - rectTop3);
HXDLIN( 124)														int c11 = col3;
HXDLIN( 124)														bool _hx_tmp25;
HXDLIN( 124)														if ((((c11 >> 24) & 255) < 254)) {
HXLINE( 124)															_hx_tmp25 = undoImage9->transparent;
            														}
            														else {
HXLINE( 124)															_hx_tmp25 = false;
            														}
HXDLIN( 124)														if (_hx_tmp25) {
HXLINE( 124)															int location6;
HXDLIN( 124)															if (undoImage9->useVirtualPos) {
HXLINE( 124)																location6 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x12) - undoImage9->virtualX));
            															}
            															else {
HXLINE( 124)																location6 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage9->width) + x12)) ));
            															}
HXDLIN( 124)															int this113 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 124)															int this114;
HXDLIN( 124)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																this114 = ((((((this113 >> 24) & 255) << 24) | ((this113 & 255) << 16)) | (((this113 >> 8) & 255) << 8)) | ((this113 >> 16) & 255));
            															}
            															else {
HXLINE( 124)																this114 = this113;
            															}
HXDLIN( 124)															Float a110;
HXDLIN( 124)															int this115 = ((this114 >> 24) & 255);
HXDLIN( 124)															if ((this115 == 0)) {
HXLINE( 124)																a110 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																a110 = (( (Float)(this115) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float r16;
HXDLIN( 124)															int this116 = ((this114 >> 16) & 255);
HXDLIN( 124)															if ((this116 == 0)) {
HXLINE( 124)																r16 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																r16 = (( (Float)(this116) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float g16;
HXDLIN( 124)															int this117 = ((this114 >> 8) & 255);
HXDLIN( 124)															if ((this117 == 0)) {
HXLINE( 124)																g16 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																g16 = (( (Float)(this117) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float b113;
HXDLIN( 124)															int this118 = (this114 & 255);
HXDLIN( 124)															if ((this118 == 0)) {
HXLINE( 124)																b113 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																b113 = (( (Float)(this118) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float a28;
HXDLIN( 124)															int this119 = ((col3 >> 24) & 255);
HXDLIN( 124)															if ((this119 == 0)) {
HXLINE( 124)																a28 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																a28 = (( (Float)(this119) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float r26;
HXDLIN( 124)															int this120 = ((col3 >> 16) & 255);
HXDLIN( 124)															if ((this120 == 0)) {
HXLINE( 124)																r26 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																r26 = (( (Float)(this120) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float g26;
HXDLIN( 124)															int this121 = ((col3 >> 8) & 255);
HXDLIN( 124)															if ((this121 == 0)) {
HXLINE( 124)																g26 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																g26 = (( (Float)(this121) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float b211;
HXDLIN( 124)															int this122 = (col3 & 255);
HXDLIN( 124)															if ((this122 == 0)) {
HXLINE( 124)																b211 = ((Float)0.);
            															}
            															else {
HXLINE( 124)																b211 = (( (Float)(this122) ) / ( (Float)(255) ));
            															}
HXDLIN( 124)															Float a36 = (a110 * (( (Float)(1) ) - a28));
HXDLIN( 124)															int r17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a28))));
HXDLIN( 124)															int g17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a28))));
HXDLIN( 124)															int b35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a36) + (b211 * a28))));
HXDLIN( 124)															int a29 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a28)));
HXDLIN( 124)															int blended6 = ((((a29 << 24) | (r17 << 16)) | (g17 << 8)) | b35);
HXDLIN( 124)															{
HXLINE( 124)																int _hx_tmp26;
HXDLIN( 124)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																	_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            																}
            																else {
HXLINE( 124)																	_hx_tmp26 = blended6;
            																}
HXDLIN( 124)																::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            															}
            														}
            														else {
HXLINE( 124)															::Dynamic this123 = undoImage9->image;
HXDLIN( 124)															int index14;
HXDLIN( 124)															if (undoImage9->useVirtualPos) {
HXLINE( 124)																index14 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x12) - undoImage9->virtualX));
            															}
            															else {
HXLINE( 124)																index14 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage9->width) + x12)) ));
            															}
HXDLIN( 124)															int _hx_tmp27;
HXDLIN( 124)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																_hx_tmp27 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            															}
            															else {
HXLINE( 124)																_hx_tmp27 = c11;
            															}
HXDLIN( 124)															::iterMagic::Iimg_obj::set(this123,index14,_hx_tmp27);
            														}
            													}
            													else {
HXLINE( 124)														if (forceClear3) {
HXLINE( 124)															::Dynamic this124 = undoImage9->image;
HXDLIN( 124)															int x13 = (dx3 - rectLeft3);
HXDLIN( 124)															int y13 = (dy3 - rectTop3);
HXDLIN( 124)															int index15;
HXDLIN( 124)															if (undoImage9->useVirtualPos) {
HXLINE( 124)																index15 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x13) - undoImage9->virtualX));
            															}
            															else {
HXLINE( 124)																index15 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage9->width) + x13)) ));
            															}
HXDLIN( 124)															::iterMagic::Iimg_obj::set(this124,index15,0);
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 124)							{
HXLINE( 124)								int _g_min6 = xIter33->start;
HXDLIN( 124)								int _g_max6 = xIter33->max;
HXDLIN( 124)								while((_g_min6 < _g_max6)){
HXLINE( 124)									_g_min6 = (_g_min6 + 1);
HXDLIN( 124)									int px3 = (_g_min6 - 1);
HXDLIN( 124)									Float pcx3 = (( (Float)(px3) ) - nextX3);
HXDLIN( 124)									{
HXLINE( 124)										int _g_min7 = yIter33->start;
HXDLIN( 124)										int _g_max7 = yIter33->max;
HXDLIN( 124)										while((_g_min7 < _g_max7)){
HXLINE( 124)											_g_min7 = (_g_min7 + 1);
HXDLIN( 124)											int py3 = (_g_min7 - 1);
HXDLIN( 124)											Float pcy3 = (( (Float)(py3) ) - nextY3);
HXDLIN( 124)											Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 124)											Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 124)											Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 124)											Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 124)											Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 124)											bool _hx_tmp28;
HXDLIN( 124)											bool _hx_tmp29;
HXDLIN( 124)											if ((ratioA3 >= 0)) {
HXLINE( 124)												_hx_tmp29 = (ratioB3 >= 0);
            											}
            											else {
HXLINE( 124)												_hx_tmp29 = false;
            											}
HXDLIN( 124)											if (_hx_tmp29) {
HXLINE( 124)												_hx_tmp28 = (ratioC3 >= 0);
            											}
            											else {
HXLINE( 124)												_hx_tmp28 = false;
            											}
HXDLIN( 124)											if (_hx_tmp28) {
HXLINE( 124)												int i52 = ::Std_obj::_hx_int((((( (Float)(aA3) ) * ratioA3) + (( (Float)(aB3) ) * ratioB3)) + (( (Float)(aC3) ) * ratioC3)));
HXDLIN( 124)												if ((i52 > 255)) {
HXLINE(  24)													i52 = 255;
            												}
HXLINE( 124)												if ((i52 < 0)) {
HXLINE(  25)													i52 = 0;
            												}
HXLINE( 124)												int a30 = i52;
HXDLIN( 124)												int i53 = ::Std_obj::_hx_int((((( (Float)(rA3) ) * ratioA3) + (( (Float)(rB3) ) * ratioB3)) + (( (Float)(rC3) ) * ratioC3)));
HXDLIN( 124)												if ((i53 > 255)) {
HXLINE(  24)													i53 = 255;
            												}
HXLINE( 124)												if ((i53 < 0)) {
HXLINE(  25)													i53 = 0;
            												}
HXLINE( 124)												int r18 = i53;
HXDLIN( 124)												int i54 = ::Std_obj::_hx_int((((( (Float)(gA3) ) * ratioA3) + (( (Float)(gB3) ) * ratioB3)) + (( (Float)(gC3) ) * ratioC3)));
HXDLIN( 124)												if ((i54 > 255)) {
HXLINE(  24)													i54 = 255;
            												}
HXLINE( 124)												if ((i54 < 0)) {
HXLINE(  25)													i54 = 0;
            												}
HXLINE( 124)												int g18 = i54;
HXDLIN( 124)												int i55 = ::Std_obj::_hx_int((((( (Float)(bA3) ) * ratioA3) + (( (Float)(bB3) ) * ratioB3)) + (( (Float)(bC3) ) * ratioC3)));
HXDLIN( 124)												if ((i55 > 255)) {
HXLINE(  24)													i55 = 255;
            												}
HXLINE( 124)												if ((i55 < 0)) {
HXLINE(  25)													i55 = 0;
            												}
HXLINE( 124)												int b36 = i55;
HXDLIN( 124)												{
HXLINE( 124)													int location7;
HXDLIN( 124)													if (this102->useVirtualPos) {
HXLINE( 124)														location7 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - this102->virtualY) * ( (Float)(this102->width) )) + px3) - this102->virtualX));
            													}
            													else {
HXLINE( 124)														location7 = ::Std_obj::_hx_int(( (Float)(((py3 * this102->width) + px3)) ));
            													}
HXDLIN( 124)													bool _hx_tmp30;
HXDLIN( 124)													if (this102->transparent) {
HXLINE( 124)														_hx_tmp30 = (a30 < 254);
            													}
            													else {
HXLINE( 124)														_hx_tmp30 = false;
            													}
HXDLIN( 124)													if (_hx_tmp30) {
HXLINE( 124)														int this125 = ::iterMagic::Iimg_obj::get(this102->image,location7);
HXDLIN( 124)														int old3;
HXDLIN( 124)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)															old3 = ((((((this125 >> 24) & 255) << 24) | ((this125 & 255) << 16)) | (((this125 >> 8) & 255) << 8)) | ((this125 >> 16) & 255));
            														}
            														else {
HXLINE( 124)															old3 = this125;
            														}
HXDLIN( 124)														int rhs3 = ((((a30 << 24) | (r18 << 16)) | (g18 << 8)) | b36);
HXDLIN( 124)														Float a111;
HXDLIN( 124)														int this126 = ((old3 >> 24) & 255);
HXDLIN( 124)														if ((this126 == 0)) {
HXLINE( 124)															a111 = ((Float)0.);
            														}
            														else {
HXLINE( 124)															a111 = (( (Float)(this126) ) / ( (Float)(255) ));
            														}
HXDLIN( 124)														Float r19;
HXDLIN( 124)														int this127 = ((old3 >> 16) & 255);
HXDLIN( 124)														if ((this127 == 0)) {
HXLINE( 124)															r19 = ((Float)0.);
            														}
            														else {
HXLINE( 124)															r19 = (( (Float)(this127) ) / ( (Float)(255) ));
            														}
HXDLIN( 124)														Float g19;
HXDLIN( 124)														int this128 = ((old3 >> 8) & 255);
HXDLIN( 124)														if ((this128 == 0)) {
HXLINE( 124)															g19 = ((Float)0.);
            														}
            														else {
HXLINE( 124)															g19 = (( (Float)(this128) ) / ( (Float)(255) ));
            														}
HXDLIN( 124)														Float b114;
HXDLIN( 124)														int this129 = (old3 & 255);
HXDLIN( 124)														if ((this129 == 0)) {
HXLINE( 124)															b114 = ((Float)0.);
            														}
            														else {
HXLINE( 124)															b114 = (( (Float)(this129) ) / ( (Float)(255) ));
            														}
HXDLIN( 124)														Float a210;
HXDLIN( 124)														int this130 = ((rhs3 >> 24) & 255);
HXDLIN( 124)														if ((this130 == 0)) {
HXLINE( 124)															a210 = ((Float)0.);
            														}
            														else {
HXLINE( 124)															a210 = (( (Float)(this130) ) / ( (Float)(255) ));
            														}
HXDLIN( 124)														Float r27;
HXDLIN( 124)														int this131 = ((rhs3 >> 16) & 255);
HXDLIN( 124)														if ((this131 == 0)) {
HXLINE( 124)															r27 = ((Float)0.);
            														}
            														else {
HXLINE( 124)															r27 = (( (Float)(this131) ) / ( (Float)(255) ));
            														}
HXDLIN( 124)														Float g27;
HXDLIN( 124)														int this132 = ((rhs3 >> 8) & 255);
HXDLIN( 124)														if ((this132 == 0)) {
HXLINE( 124)															g27 = ((Float)0.);
            														}
            														else {
HXLINE( 124)															g27 = (( (Float)(this132) ) / ( (Float)(255) ));
            														}
HXDLIN( 124)														Float b212;
HXDLIN( 124)														int this133 = (rhs3 & 255);
HXDLIN( 124)														if ((this133 == 0)) {
HXLINE( 124)															b212 = ((Float)0.);
            														}
            														else {
HXLINE( 124)															b212 = (( (Float)(this133) ) / ( (Float)(255) ));
            														}
HXDLIN( 124)														Float a37 = (a111 * (( (Float)(1) ) - a210));
HXDLIN( 124)														int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a37) + (r27 * a210))));
HXDLIN( 124)														int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a37) + (g27 * a210))));
HXDLIN( 124)														int b37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a37) + (b212 * a210))));
HXDLIN( 124)														int a38 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a210)));
HXDLIN( 124)														int blended7 = ((((a38 << 24) | (r20 << 16)) | (g20 << 8)) | b37);
HXDLIN( 124)														{
HXLINE( 124)															int _hx_tmp31;
HXDLIN( 124)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)																_hx_tmp31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            															}
            															else {
HXLINE( 124)																_hx_tmp31 = blended7;
            															}
HXDLIN( 124)															::iterMagic::Iimg_obj::set(this102->image,location7,_hx_tmp31);
            														}
            													}
            													else {
HXLINE( 124)														int value3;
HXDLIN( 124)														if (this102->isLittle) {
HXLINE( 124)															value3 = ((((a30 << 24) | (b36 << 16)) | (g18 << 8)) | r18);
            														}
            														else {
HXLINE( 124)															value3 = ((((a30 << 24) | (r18 << 16)) | (g18 << 8)) | b36);
            														}
HXDLIN( 124)														::iterMagic::Iimg_obj::set(this102->image,location7,value3);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 124)							if ((hasHit3 == false)) {
HXLINE( 124)								 ::pi_xy::algo::HitTri v13 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,mx1,my1,lastX1,lastY1,nextX3,nextY3,true);
HXDLIN( 124)								if (hasUndo3) {
HXLINE( 124)									v13->undoImage = undoImage9;
HXDLIN( 124)									v13->undoX = xIter33->start;
HXDLIN( 124)									v13->undoY = yIter33->start;
            								}
            							}
            						}
            					}
HXLINE( 244)					lastX1 = nextX3;
HXLINE( 245)					lastY1 = nextY3;
            				}
            			}
            		}
HXLINE( 133)		Float rx2 = (rx - drx);
HXLINE( 134)		Float ry2 = (ry - dry);
HXLINE( 135)		if ((rx > ry)) {
HXLINE( 135)			rSmall = ry;
            		}
            		else {
HXLINE( 135)			rSmall = rx;
            		}
HXLINE( 137)		if (::hx::IsEq( phi,0 )) {
HXLINE( 138)			{
HXLINE( 138)				 ::pi_xy::ImageStruct this134 = temp;
HXDLIN( 138)				 ::Dynamic phi3 = phi;
HXDLIN( 138)				 ::Dynamic sides2 = noSides;
HXLINE( 142)				if (::hx::IsNull( sides2 )) {
HXLINE( 142)					sides2 = 36;
            				}
HXLINE( 141)				if (::hx::IsNull( phi3 )) {
HXLINE( 141)					phi3 = ((Float)0.);
            				}
HXLINE( 138)				{
HXLINE( 138)					 ::Dynamic phi4 = phi3;
HXDLIN( 138)					 ::Dynamic sides3 = sides2;
HXDLIN( 138)					if (::hx::IsNull( sides3 )) {
HXLINE( 212)						sides3 = 36;
            					}
HXLINE( 138)					if (::hx::IsNull( phi4 )) {
HXLINE( 211)						phi4 = ((Float)0.);
            					}
HXLINE( 138)					Float theta2 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides3) ));
HXDLIN( 138)					Float omega2;
HXDLIN( 138)					omega2 = ((Float)0.);
HXDLIN( 138)					Float lastX2 = ((Float)0.);
HXDLIN( 138)					Float lastY2 = ((Float)0.);
HXDLIN( 138)					if (::hx::IsNotEq( phi4,0 )) {
HXLINE(  35)						lastX2 = ((((rx2 * ::Math_obj::cos(((( (Float)(sides3) ) * theta2) + omega2))) * ::Math_obj::cos(( (Float)(phi4) ))) - ((ry2 * ::Math_obj::sin(((( (Float)(sides3) ) * theta2) + omega2))) * ::Math_obj::sin(( (Float)(phi4) )))) + rx);
HXLINE(  36)						lastY2 = ((((rx2 * ::Math_obj::cos(((( (Float)(sides3) ) * theta2) + omega2))) * ::Math_obj::sin(( (Float)(phi4) ))) + ((ry2 * ::Math_obj::sin(((( (Float)(sides3) ) * theta2) + omega2))) * ::Math_obj::cos(( (Float)(phi4) )))) + ry);
            					}
            					else {
HXLINE(  38)						lastX2 = (rx + (rx2 * ::Math_obj::cos(((( (Float)(sides3) ) * theta2) + omega2))));
HXLINE(  39)						lastY2 = (ry + (ry2 * ::Math_obj::sin(((( (Float)(sides3) ) * theta2) + omega2))));
            					}
HXLINE( 138)					if (::hx::IsNotEq( phi4,0 )) {
HXLINE( 138)						Float cphi2 = ::Math_obj::cos(( (Float)(phi4) ));
HXDLIN( 138)						Float sphi2 = ::Math_obj::sin(( (Float)(phi4) ));
HXDLIN( 138)						{
HXLINE( 138)							int _g120 = 0;
HXDLIN( 138)							int _g121 = (sides3 + 1);
HXDLIN( 138)							while((_g120 < _g121)){
HXLINE( 138)								_g120 = (_g120 + 1);
HXDLIN( 138)								int i56 = (_g120 - 1);
HXDLIN( 138)								Float stheta2 = ::Math_obj::sin((((( (Float)(i56) ) * theta2) + omega2) + ((Float)0.01)));
HXDLIN( 138)								Float ctheta2 = ::Math_obj::cos((((( (Float)(i56) ) * theta2) + omega2) + ((Float)0.01)));
HXDLIN( 138)								Float nextX4 = ((((rx2 * ctheta2) * cphi2) - ((ry2 * stheta2) * sphi2)) + rx);
HXDLIN( 138)								Float nextY4 = ((((rx2 * ctheta2) * sphi2) + ((ry2 * stheta2) * cphi2)) + ry);
HXDLIN( 138)								{
HXLINE( 138)									 ::pi_xy::ImageStruct this135 = this134;
HXDLIN( 138)									bool hasHit4 = false;
HXDLIN( 138)									bool hasUndo4 = false;
HXDLIN( 138)									{
HXLINE( 138)										Float bx = lastX2;
HXDLIN( 138)										Float by = lastY2;
HXDLIN( 138)										Float cx2 = nextX4;
HXDLIN( 138)										Float cy2 = nextY4;
HXDLIN( 138)										bool adjustWinding = (((((rx * by) - (bx * ry)) + ((bx * cy2) - (cx2 * by))) + ((cx2 * ry) - (rx * cy2))) > 0);
HXDLIN( 138)										if (!(adjustWinding)) {
HXLINE( 138)											Float bx_ = bx;
HXDLIN( 138)											Float by_ = by;
HXLINE(  25)											bx = cx2;
HXLINE(  26)											by = cy2;
HXLINE(  27)											cx2 = bx_;
HXLINE(  28)											cy2 = by_;
            										}
HXLINE( 138)										{
HXLINE( 138)											Float s0 = ((ry * cx2) - (rx * cy2));
HXDLIN( 138)											Float sx = (cy2 - ry);
HXDLIN( 138)											Float sy = (rx - cx2);
HXDLIN( 138)											Float t0 = ((rx * by) - (ry * bx));
HXDLIN( 138)											Float tx = (ry - by);
HXDLIN( 138)											Float ty = (bx - rx);
HXDLIN( 138)											Float A = ((((-(by) * cx2) + (ry * (-(bx) + cx2))) + (rx * (by - cy2))) + (bx * cy2));
HXDLIN( 138)											 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN( 138)											if ((rx > bx)) {
HXLINE( 138)												if ((rx > cx2)) {
HXLINE( 138)													int min16;
HXDLIN( 138)													if ((bx > cx2)) {
HXLINE( 138)														min16 = ::Math_obj::floor(cx2);
            													}
            													else {
HXLINE( 138)														min16 = ::Math_obj::floor(bx);
            													}
HXDLIN( 138)													int ii_min32 = min16;
HXDLIN( 138)													int ii_max32 = ::Math_obj::ceil(rx);
HXDLIN( 138)													xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            												}
            												else {
HXLINE( 138)													int ii_min33 = ::Math_obj::floor(bx);
HXDLIN( 138)													int ii_max33 = ::Math_obj::ceil(cx2);
HXDLIN( 138)													xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            												}
            											}
            											else {
HXLINE( 138)												if ((bx > cx2)) {
HXLINE( 138)													int min17;
HXDLIN( 138)													if ((rx > cx2)) {
HXLINE( 138)														min17 = ::Math_obj::floor(cx2);
            													}
            													else {
HXLINE( 138)														min17 = ::Math_obj::ceil(rx);
            													}
HXDLIN( 138)													int ii_min34 = min17;
HXDLIN( 138)													int ii_max34 = ::Math_obj::ceil(bx);
HXDLIN( 138)													xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            												}
            												else {
HXLINE( 138)													int ii_min35 = ::Math_obj::floor(rx);
HXDLIN( 138)													int ii_max35 = ::Math_obj::ceil(cx2);
HXDLIN( 138)													xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            												}
            											}
HXDLIN( 138)											 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN( 138)											if ((ry > by)) {
HXLINE( 138)												if ((ry > cy2)) {
HXLINE( 138)													int min18;
HXDLIN( 138)													if ((by > cy2)) {
HXLINE( 138)														min18 = ::Math_obj::floor(cy2);
            													}
            													else {
HXLINE( 138)														min18 = ::Math_obj::floor(by);
            													}
HXDLIN( 138)													int ii_min36 = min18;
HXDLIN( 138)													int ii_max36 = ::Math_obj::ceil(ry);
HXDLIN( 138)													yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            												}
            												else {
HXLINE( 138)													int ii_min37 = ::Math_obj::floor(by);
HXDLIN( 138)													int ii_max37 = ::Math_obj::ceil(cy2);
HXDLIN( 138)													yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            												}
            											}
            											else {
HXLINE( 138)												if ((by > cy2)) {
HXLINE( 138)													int min19;
HXDLIN( 138)													if ((ry > cy2)) {
HXLINE( 138)														min19 = ::Math_obj::floor(cy2);
            													}
            													else {
HXLINE( 138)														min19 = ::Math_obj::ceil(ry);
            													}
HXDLIN( 138)													int ii_min38 = min19;
HXDLIN( 138)													int ii_max38 = ::Math_obj::ceil(by);
HXDLIN( 138)													yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            												}
            												else {
HXLINE( 138)													int ii_min39 = ::Math_obj::floor(ry);
HXDLIN( 138)													int ii_max39 = ::Math_obj::ceil(cy2);
HXDLIN( 138)													yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            												}
            											}
HXDLIN( 138)											 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN( 138)											if (hasUndo4) {
HXLINE( 138)												int width6 = ((xIter34->max - xIter34->start) + 1);
HXDLIN( 138)												int height6 = ((yIter34->max - yIter34->start) + 1);
HXDLIN( 138)												 ::Dynamic imageType6 = null();
HXDLIN( 138)												 ::pi_xy::ImageStruct this136 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 138)												if (::hx::IsNull( imageType6 )) {
HXLINE(  54)													imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE( 138)												::Dynamic undoImage13;
HXDLIN( 138)												switch((int)(( (int)(imageType6) ))){
            													case (int)0: {
HXLINE( 138)														 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 138)														 ::iterMagic::BytesImg b38 = byt6;
HXDLIN( 138)														{
HXLINE( 138)															b38->width = width6;
HXDLIN( 138)															b38->height = height6;
HXDLIN( 138)															b38->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 138)															b38->data = ::haxe::io::Bytes_obj::alloc((b38->length * 4));
HXDLIN( 138)															{
HXLINE( 138)																int len12 = b38->length;
HXDLIN( 138)																int w6 = 0;
HXDLIN( 138)																{
HXLINE( 138)																	int _g122 = 0;
HXDLIN( 138)																	int _g123 = b38->height;
HXDLIN( 138)																	while((_g122 < _g123)){
HXLINE( 138)																		_g122 = (_g122 + 1);
HXDLIN( 138)																		int y14 = (_g122 - 1);
HXDLIN( 138)																		{
HXLINE( 138)																			int _g124 = 0;
HXDLIN( 138)																			int _g125 = b38->width;
HXDLIN( 138)																			while((_g124 < _g125)){
HXLINE( 138)																				_g124 = (_g124 + 1);
HXDLIN( 138)																				int x14 = (_g124 - 1);
HXDLIN( 138)																				{
HXLINE( 138)																					w6 = (w6 + 1);
HXDLIN( 138)																					b38->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN( 138)																				{
HXLINE( 138)																					w6 = (w6 + 1);
HXDLIN( 138)																					b38->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN( 138)																				{
HXLINE( 138)																					w6 = (w6 + 1);
HXDLIN( 138)																					b38->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN( 138)																				{
HXLINE( 138)																					w6 = (w6 + 1);
HXDLIN( 138)																					b38->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN( 138)														undoImage13 = b38;
            													}
            													break;
            													case (int)1: {
HXLINE( 138)														 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 138)														 ::iterMagic::ArrIntImg a39 = arrI6;
HXDLIN( 138)														{
HXLINE( 138)															a39->width = width6;
HXDLIN( 138)															a39->height = height6;
HXDLIN( 138)															a39->data = ::Array_obj< int >::__new(0);
HXDLIN( 138)															a39->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 138)															{
HXLINE( 138)																int _g126 = 0;
HXDLIN( 138)																int _g127 = a39->length;
HXDLIN( 138)																while((_g126 < _g127)){
HXLINE( 138)																	_g126 = (_g126 + 1);
HXDLIN( 138)																	int i57 = (_g126 - 1);
HXDLIN( 138)																	a39->data[i57] = 0;
            																}
            															}
            														}
HXDLIN( 138)														undoImage13 = a39;
            													}
            													break;
            													case (int)2: {
HXLINE( 138)														 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 138)														 ::iterMagic::U32ArrImg b39 = u32a6;
HXDLIN( 138)														{
HXLINE( 138)															b39->width = width6;
HXDLIN( 138)															b39->height = height6;
HXDLIN( 138)															b39->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 138)															int size6 = (b39->length * 4);
HXDLIN( 138)															b39->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN( 138)															{
HXLINE( 138)																int _g128 = 0;
HXDLIN( 138)																int _g129 = b39->length;
HXDLIN( 138)																while((_g128 < _g129)){
HXLINE( 138)																	_g128 = (_g128 + 1);
HXDLIN( 138)																	int i58 = (_g128 - 1);
HXDLIN( 138)																	{
HXLINE( 138)																		 ::haxe::io::ArrayBufferViewImpl this137 = b39->data;
HXDLIN( 138)																		bool undoImage14;
HXDLIN( 138)																		if ((i58 >= 0)) {
HXLINE( 138)																			undoImage14 = (i58 < (this137->byteLength >> 2));
            																		}
            																		else {
HXLINE( 138)																			undoImage14 = false;
            																		}
HXDLIN( 138)																		if (undoImage14) {
HXLINE( 138)																			 ::haxe::io::Bytes _this6 = this137->bytes;
HXDLIN( 138)																			int pos6 = ((i58 << 2) + this137->byteOffset);
HXDLIN( 138)																			_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN( 138)																			_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN( 138)																			_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN( 138)																			_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN( 138)														undoImage13 = b39;
            													}
            													break;
            													case (int)3: {
HXLINE( 138)														 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 138)														 ::iterMagic::VecIntImg v14 = vec6;
HXDLIN( 138)														{
HXLINE( 138)															v14->width = width6;
HXDLIN( 138)															v14->height = height6;
HXDLIN( 138)															v14->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 138)															v14->data = ::Array_obj< int >::__new(v14->length);
HXDLIN( 138)															{
HXLINE( 138)																int _g130 = 0;
HXDLIN( 138)																int _g131 = v14->length;
HXDLIN( 138)																while((_g130 < _g131)){
HXLINE( 138)																	_g130 = (_g130 + 1);
HXDLIN( 138)																	int i59 = (_g130 - 1);
HXDLIN( 138)																	v14->data->__unsafe_set(i59,0);
            																}
            															}
            														}
HXDLIN( 138)														undoImage13 = v14;
            													}
            													break;
            													case (int)4: {
HXLINE( 138)														 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 138)														 ::iterMagic::StackIntImg b40 = sInt6;
HXDLIN( 138)														{
HXLINE( 138)															b40->width = width6;
HXDLIN( 138)															b40->height = height6;
HXDLIN( 138)															b40->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 138)															b40->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 138)															{
HXLINE( 138)																int len13 = b40->length;
HXDLIN( 138)																 ::haxe::ds::GenericStack_Int d6 = b40->data;
HXDLIN( 138)																if (::hx::IsNull( d6->head )) {
HXLINE( 138)																	int _g132 = 0;
HXDLIN( 138)																	int _g133 = len13;
HXDLIN( 138)																	while((_g132 < _g133)){
HXLINE( 138)																		_g132 = (_g132 + 1);
HXDLIN( 138)																		int i60 = (_g132 - 1);
HXDLIN( 138)																		d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            																	}
            																}
            																else {
HXLINE( 138)																	int _g134 = 0;
HXDLIN( 138)																	int _g135 = len13;
HXDLIN( 138)																	while((_g134 < _g135)){
HXLINE( 138)																		_g134 = (_g134 + 1);
HXDLIN( 138)																		int i61 = (_g134 - 1);
HXDLIN( 138)																		{
HXLINE( 138)																			 ::haxe::ds::GenericCell_Int l6 = b40->data->head;
HXDLIN( 138)																			 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN( 138)																			{
HXLINE( 138)																				int _g136 = 0;
HXDLIN( 138)																				int _g137 = i61;
HXDLIN( 138)																				while((_g136 < _g137)){
HXLINE( 138)																					_g136 = (_g136 + 1);
HXDLIN( 138)																					int i62 = (_g136 - 1);
HXLINE( 345)																					prev6 = l6;
HXLINE( 346)																					l6 = l6->next;
            																				}
            																			}
HXLINE( 138)																			if (::hx::IsNull( prev6 )) {
HXLINE( 138)																				b40->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 138)																				l6 = null();
            																			}
            																			else {
HXLINE( 138)																				prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 138)																				l6 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN( 138)														undoImage13 = b40;
            													}
            													break;
            												}
HXDLIN( 138)												this136->image = undoImage13;
HXDLIN( 138)												this136->width = width6;
HXDLIN( 138)												this136->height = height6;
HXDLIN( 138)												this136->imageType = ( (int)(imageType6) );
HXDLIN( 138)												undoImage12 = this136;
HXDLIN( 138)												{
HXLINE( 138)													int rectLeft4 = xIter34->start;
HXDLIN( 138)													int rectTop4 = yIter34->start;
HXDLIN( 138)													int rectRight4 = xIter34->max;
HXDLIN( 138)													bool forceClear4 = false;
HXDLIN( 138)													{
HXLINE( 138)														int _g138 = rectTop4;
HXDLIN( 138)														int _g139 = yIter34->max;
HXDLIN( 138)														while((_g138 < _g139)){
HXLINE( 138)															_g138 = (_g138 + 1);
HXDLIN( 138)															int dy4 = (_g138 - 1);
HXDLIN( 138)															{
HXLINE( 138)																int _g140 = rectLeft4;
HXDLIN( 138)																int _g141 = rectRight4;
HXDLIN( 138)																while((_g140 < _g141)){
HXLINE( 138)																	_g140 = (_g140 + 1);
HXDLIN( 138)																	int dx4 = (_g140 - 1);
HXDLIN( 138)																	::Dynamic this138 = this135->image;
HXDLIN( 138)																	int index16;
HXDLIN( 138)																	if (this135->useVirtualPos) {
HXLINE( 138)																		index16 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this135->virtualY) * ( (Float)(this135->width) )) + dx4) - this135->virtualX));
            																	}
            																	else {
HXLINE( 138)																		index16 = ::Std_obj::_hx_int(( (Float)(((dy4 * this135->width) + dx4)) ));
            																	}
HXDLIN( 138)																	int c12 = ::iterMagic::Iimg_obj::get(this138,index16);
HXDLIN( 138)																	int col4;
HXDLIN( 138)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																		col4 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            																	}
            																	else {
HXLINE( 138)																		col4 = c12;
            																	}
HXDLIN( 138)																	bool _hx_tmp32;
HXDLIN( 138)																	if (this135->useMask) {
HXLINE( 138)																		_hx_tmp32 = ::hx::IsNotNull( this135->mask );
            																	}
            																	else {
HXLINE( 138)																		_hx_tmp32 = false;
            																	}
HXDLIN( 138)																	if (_hx_tmp32) {
HXLINE( 138)																		 ::pi_xy::ImageStruct this139 = this135->mask;
HXDLIN( 138)																		::Dynamic this140 = this139->image;
HXDLIN( 138)																		int index17;
HXDLIN( 138)																		if (this139->useVirtualPos) {
HXLINE( 138)																			index17 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this139->virtualY) * ( (Float)(this139->width) )) + dx4) - this139->virtualX));
            																		}
            																		else {
HXLINE( 138)																			index17 = ::Std_obj::_hx_int(( (Float)(((dy4 * this139->width) + dx4)) ));
            																		}
HXDLIN( 138)																		int c13 = ::iterMagic::Iimg_obj::get(this140,index17);
HXDLIN( 138)																		int v15;
HXDLIN( 138)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																			v15 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            																		}
            																		else {
HXLINE( 138)																			v15 = c13;
            																		}
HXDLIN( 138)																		int maskPixel4 = v15;
HXDLIN( 138)																		int this141 = col4;
HXDLIN( 138)																		if ((maskPixel4 == 0)) {
HXLINE( 138)																			col4 = this141;
            																		}
            																		else {
HXLINE( 138)																			Float m04;
HXDLIN( 138)																			int this142 = ((maskPixel4 >> 24) & 255);
HXDLIN( 138)																			if ((this142 == 0)) {
HXLINE( 138)																				m04 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				m04 = (( (Float)(this142) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float m14;
HXDLIN( 138)																			int this143 = ((maskPixel4 >> 16) & 255);
HXDLIN( 138)																			if ((this143 == 0)) {
HXLINE( 138)																				m14 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				m14 = (( (Float)(this143) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float m24;
HXDLIN( 138)																			int this144 = ((maskPixel4 >> 8) & 255);
HXDLIN( 138)																			if ((this144 == 0)) {
HXLINE( 138)																				m24 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				m24 = (( (Float)(this144) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float m34;
HXDLIN( 138)																			int this145 = (maskPixel4 & 255);
HXDLIN( 138)																			if ((this145 == 0)) {
HXLINE( 138)																				m34 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				m34 = (( (Float)(this145) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this141 >> 24) & 255)) )));
HXDLIN( 138)																			int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this141 >> 16) & 255)) )));
HXDLIN( 138)																			int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this141 >> 8) & 255)) )));
HXDLIN( 138)																			int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this141 & 255)) )));
HXDLIN( 138)																			col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN( 138)																	if ((col4 != 0)) {
HXLINE( 138)																		int x15 = (dx4 - rectLeft4);
HXDLIN( 138)																		int y15 = (dy4 - rectTop4);
HXDLIN( 138)																		int c14 = col4;
HXDLIN( 138)																		bool _hx_tmp33;
HXDLIN( 138)																		if ((((c14 >> 24) & 255) < 254)) {
HXLINE( 138)																			_hx_tmp33 = undoImage12->transparent;
            																		}
            																		else {
HXLINE( 138)																			_hx_tmp33 = false;
            																		}
HXDLIN( 138)																		if (_hx_tmp33) {
HXLINE( 138)																			int location8;
HXDLIN( 138)																			if (undoImage12->useVirtualPos) {
HXLINE( 138)																				location8 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x15) - undoImage12->virtualX));
            																			}
            																			else {
HXLINE( 138)																				location8 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage12->width) + x15)) ));
            																			}
HXDLIN( 138)																			int this146 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN( 138)																			int this147;
HXDLIN( 138)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																				this147 = ((((((this146 >> 24) & 255) << 24) | ((this146 & 255) << 16)) | (((this146 >> 8) & 255) << 8)) | ((this146 >> 16) & 255));
            																			}
            																			else {
HXLINE( 138)																				this147 = this146;
            																			}
HXDLIN( 138)																			Float a112;
HXDLIN( 138)																			int this148 = ((this147 >> 24) & 255);
HXDLIN( 138)																			if ((this148 == 0)) {
HXLINE( 138)																				a112 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				a112 = (( (Float)(this148) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float r110;
HXDLIN( 138)																			int this149 = ((this147 >> 16) & 255);
HXDLIN( 138)																			if ((this149 == 0)) {
HXLINE( 138)																				r110 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				r110 = (( (Float)(this149) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float g110;
HXDLIN( 138)																			int this150 = ((this147 >> 8) & 255);
HXDLIN( 138)																			if ((this150 == 0)) {
HXLINE( 138)																				g110 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				g110 = (( (Float)(this150) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float b115;
HXDLIN( 138)																			int this151 = (this147 & 255);
HXDLIN( 138)																			if ((this151 == 0)) {
HXLINE( 138)																				b115 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				b115 = (( (Float)(this151) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float a211;
HXDLIN( 138)																			int this152 = ((col4 >> 24) & 255);
HXDLIN( 138)																			if ((this152 == 0)) {
HXLINE( 138)																				a211 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				a211 = (( (Float)(this152) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float r28;
HXDLIN( 138)																			int this153 = ((col4 >> 16) & 255);
HXDLIN( 138)																			if ((this153 == 0)) {
HXLINE( 138)																				r28 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				r28 = (( (Float)(this153) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float g28;
HXDLIN( 138)																			int this154 = ((col4 >> 8) & 255);
HXDLIN( 138)																			if ((this154 == 0)) {
HXLINE( 138)																				g28 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				g28 = (( (Float)(this154) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float b213;
HXDLIN( 138)																			int this155 = (col4 & 255);
HXDLIN( 138)																			if ((this155 == 0)) {
HXLINE( 138)																				b213 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				b213 = (( (Float)(this155) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float a310 = (a112 * (( (Float)(1) ) - a211));
HXDLIN( 138)																			int r29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r28 * a211))));
HXDLIN( 138)																			int g29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g28 * a211))));
HXDLIN( 138)																			int b41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a310) + (b213 * a211))));
HXDLIN( 138)																			int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN( 138)																			int blended8 = ((((a40 << 24) | (r29 << 16)) | (g29 << 8)) | b41);
HXDLIN( 138)																			{
HXLINE( 138)																				int _hx_tmp34;
HXDLIN( 138)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																					_hx_tmp34 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            																				}
            																				else {
HXLINE( 138)																					_hx_tmp34 = blended8;
            																				}
HXDLIN( 138)																				::iterMagic::Iimg_obj::set(undoImage12->image,location8,_hx_tmp34);
            																			}
            																		}
            																		else {
HXLINE( 138)																			::Dynamic this156 = undoImage12->image;
HXDLIN( 138)																			int index18;
HXDLIN( 138)																			if (undoImage12->useVirtualPos) {
HXLINE( 138)																				index18 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x15) - undoImage12->virtualX));
            																			}
            																			else {
HXLINE( 138)																				index18 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage12->width) + x15)) ));
            																			}
HXDLIN( 138)																			int _hx_tmp35;
HXDLIN( 138)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																				_hx_tmp35 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            																			}
            																			else {
HXLINE( 138)																				_hx_tmp35 = c14;
            																			}
HXDLIN( 138)																			::iterMagic::Iimg_obj::set(this156,index18,_hx_tmp35);
            																		}
            																	}
            																	else {
HXLINE( 138)																		if (forceClear4) {
HXLINE( 138)																			::Dynamic this157 = undoImage12->image;
HXDLIN( 138)																			int x16 = (dx4 - rectLeft4);
HXDLIN( 138)																			int y16 = (dy4 - rectTop4);
HXDLIN( 138)																			int index19;
HXDLIN( 138)																			if (undoImage12->useVirtualPos) {
HXLINE( 138)																				index19 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x16) - undoImage12->virtualX));
            																			}
            																			else {
HXLINE( 138)																				index19 = ::Std_obj::_hx_int(( (Float)(((y16 * undoImage12->width) + x16)) ));
            																			}
HXDLIN( 138)																			::iterMagic::Iimg_obj::set(this157,index19,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN( 138)											bool found = false;
HXDLIN( 138)											Float s = ((Float)0.);
HXDLIN( 138)											Float t = ((Float)0.);
HXDLIN( 138)											Float sxx = ((Float)0.);
HXDLIN( 138)											Float txx = ((Float)0.);
HXDLIN( 138)											{
HXLINE( 138)												int _g_min8 = xIter34->start;
HXDLIN( 138)												int _g_max8 = xIter34->max;
HXDLIN( 138)												while((_g_min8 < _g_max8)){
HXLINE( 138)													_g_min8 = (_g_min8 + 1);
HXDLIN( 138)													int x17 = (_g_min8 - 1);
HXLINE(  60)													sxx = (sx * ( (Float)(x17) ));
HXLINE(  61)													txx = (tx * ( (Float)(x17) ));
HXLINE(  62)													found = false;
HXLINE( 138)													{
HXLINE( 138)														int _g_min9 = yIter34->start;
HXDLIN( 138)														int _g_max9 = yIter34->max;
HXDLIN( 138)														while((_g_min9 < _g_max9)){
HXLINE( 138)															_g_min9 = (_g_min9 + 1);
HXDLIN( 138)															int y17 = (_g_min9 - 1);
HXLINE(  64)															s = ((s0 + sxx) + (sy * ( (Float)(y17) )));
HXLINE(  65)															t = ((t0 + txx) + (ty * ( (Float)(y17) )));
HXLINE( 138)															bool _hx_tmp36;
HXDLIN( 138)															if (!((s <= 0))) {
HXLINE( 138)																_hx_tmp36 = (t <= 0);
            															}
            															else {
HXLINE( 138)																_hx_tmp36 = true;
            															}
HXDLIN( 138)															if (_hx_tmp36) {
HXLINE( 138)																if (found) {
HXLINE( 138)																	goto _hx_goto_335;
            																}
            															}
            															else {
HXLINE( 138)																if (((s + t) < A)) {
HXLINE( 138)																	{
HXLINE( 138)																		int c15 = 0;
HXDLIN( 138)																		bool _hx_tmp37;
HXDLIN( 138)																		if ((((c15 >> 24) & 255) < 254)) {
HXLINE( 138)																			_hx_tmp37 = this135->transparent;
            																		}
            																		else {
HXLINE( 138)																			_hx_tmp37 = false;
            																		}
HXDLIN( 138)																		if (_hx_tmp37) {
HXLINE( 138)																			int location9;
HXDLIN( 138)																			if (this135->useVirtualPos) {
HXLINE( 138)																				location9 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - this135->virtualY) * ( (Float)(this135->width) )) + x17) - this135->virtualX));
            																			}
            																			else {
HXLINE( 138)																				location9 = ::Std_obj::_hx_int(( (Float)(((y17 * this135->width) + x17)) ));
            																			}
HXDLIN( 138)																			int this158 = ::iterMagic::Iimg_obj::get(this135->image,location9);
HXDLIN( 138)																			int this159;
HXDLIN( 138)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																				this159 = ((((((this158 >> 24) & 255) << 24) | ((this158 & 255) << 16)) | (((this158 >> 8) & 255) << 8)) | ((this158 >> 16) & 255));
            																			}
            																			else {
HXLINE( 138)																				this159 = this158;
            																			}
HXDLIN( 138)																			Float a113;
HXDLIN( 138)																			int this160 = ((this159 >> 24) & 255);
HXDLIN( 138)																			if ((this160 == 0)) {
HXLINE( 138)																				a113 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				a113 = (( (Float)(this160) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float r111;
HXDLIN( 138)																			int this161 = ((this159 >> 16) & 255);
HXDLIN( 138)																			if ((this161 == 0)) {
HXLINE( 138)																				r111 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				r111 = (( (Float)(this161) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float g111;
HXDLIN( 138)																			int this162 = ((this159 >> 8) & 255);
HXDLIN( 138)																			if ((this162 == 0)) {
HXLINE( 138)																				g111 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				g111 = (( (Float)(this162) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float b116;
HXDLIN( 138)																			int this163 = (this159 & 255);
HXDLIN( 138)																			if ((this163 == 0)) {
HXLINE( 138)																				b116 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				b116 = (( (Float)(this163) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float a212;
HXDLIN( 138)																			int this164 = ((0 >> 24) & 255);
HXDLIN( 138)																			if ((this164 == 0)) {
HXLINE( 138)																				a212 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				a212 = (( (Float)(this164) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float r210;
HXDLIN( 138)																			int this165 = ((0 >> 16) & 255);
HXDLIN( 138)																			if ((this165 == 0)) {
HXLINE( 138)																				r210 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				r210 = (( (Float)(this165) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float g210;
HXDLIN( 138)																			int this166 = ((0 >> 8) & 255);
HXDLIN( 138)																			if ((this166 == 0)) {
HXLINE( 138)																				g210 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				g210 = (( (Float)(this166) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float b214;
HXDLIN( 138)																			int this167 = (0 & 255);
HXDLIN( 138)																			if ((this167 == 0)) {
HXLINE( 138)																				b214 = ((Float)0.);
            																			}
            																			else {
HXLINE( 138)																				b214 = (( (Float)(this167) ) / ( (Float)(255) ));
            																			}
HXDLIN( 138)																			Float a311 = (a113 * (( (Float)(1) ) - a212));
HXDLIN( 138)																			int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a311) + (r210 * a212))));
HXDLIN( 138)																			int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a311) + (g210 * a212))));
HXDLIN( 138)																			int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a311) + (b214 * a212))));
HXDLIN( 138)																			int a41 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN( 138)																			int blended9 = ((((a41 << 24) | (r30 << 16)) | (g30 << 8)) | b42);
HXDLIN( 138)																			{
HXLINE( 138)																				int _hx_tmp38;
HXDLIN( 138)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																					_hx_tmp38 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            																				}
            																				else {
HXLINE( 138)																					_hx_tmp38 = blended9;
            																				}
HXDLIN( 138)																				::iterMagic::Iimg_obj::set(this135->image,location9,_hx_tmp38);
            																			}
            																		}
            																		else {
HXLINE( 138)																			::Dynamic this168 = this135->image;
HXDLIN( 138)																			int index20;
HXDLIN( 138)																			if (this135->useVirtualPos) {
HXLINE( 138)																				index20 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - this135->virtualY) * ( (Float)(this135->width) )) + x17) - this135->virtualX));
            																			}
            																			else {
HXLINE( 138)																				index20 = ::Std_obj::_hx_int(( (Float)(((y17 * this135->width) + x17)) ));
            																			}
HXDLIN( 138)																			int _hx_tmp39;
HXDLIN( 138)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																				_hx_tmp39 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            																			}
            																			else {
HXLINE( 138)																				_hx_tmp39 = c15;
            																			}
HXDLIN( 138)																			::iterMagic::Iimg_obj::set(this168,index20,_hx_tmp39);
            																		}
            																	}
HXLINE(  73)																	found = true;
            																}
            																else {
HXLINE( 138)																	if (found) {
HXLINE( 138)																		goto _hx_goto_335;
            																	}
            																}
            															}
            														}
            														_hx_goto_335:;
            													}
            												}
            											}
HXDLIN( 138)											if ((hasHit4 == true)) {
HXLINE( 138)												 ::pi_xy::algo::HitTri v16 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,rx,ry,bx,by,cx2,cy2,true);
HXDLIN( 138)												if (hasUndo4) {
HXLINE( 138)													v16->undoImage = undoImage12;
HXDLIN( 138)													v16->undoX = xIter34->start;
HXDLIN( 138)													v16->undoY = yIter34->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  51)								lastX2 = nextX4;
HXLINE(  52)								lastY2 = nextY4;
            							}
            						}
            					}
            					else {
HXLINE( 138)						int _g142 = 0;
HXDLIN( 138)						int _g143 = (sides3 + 1);
HXDLIN( 138)						while((_g142 < _g143)){
HXLINE( 138)							_g142 = (_g142 + 1);
HXDLIN( 138)							int i63 = (_g142 - 1);
HXDLIN( 138)							Float nextX5 = (rx + (rx2 * ::Math_obj::cos((((( (Float)(i63) ) * theta2) + omega2) + ((Float)0.01)))));
HXDLIN( 138)							Float nextY5 = (ry + (ry2 * ::Math_obj::sin((((( (Float)(i63) ) * theta2) + omega2) + ((Float)0.01)))));
HXDLIN( 138)							{
HXLINE( 138)								 ::pi_xy::ImageStruct this169 = this134;
HXDLIN( 138)								bool hasHit5 = false;
HXDLIN( 138)								bool hasUndo5 = false;
HXDLIN( 138)								{
HXLINE( 138)									Float bx1 = lastX2;
HXDLIN( 138)									Float by1 = lastY2;
HXDLIN( 138)									Float cx3 = nextX5;
HXDLIN( 138)									Float cy3 = nextY5;
HXDLIN( 138)									bool adjustWinding1 = (((((rx * by1) - (bx1 * ry)) + ((bx1 * cy3) - (cx3 * by1))) + ((cx3 * ry) - (rx * cy3))) > 0);
HXDLIN( 138)									if (!(adjustWinding1)) {
HXLINE( 138)										Float bx_1 = bx1;
HXDLIN( 138)										Float by_1 = by1;
HXLINE(  25)										bx1 = cx3;
HXLINE(  26)										by1 = cy3;
HXLINE(  27)										cx3 = bx_1;
HXLINE(  28)										cy3 = by_1;
            									}
HXLINE( 138)									{
HXLINE( 138)										Float s01 = ((ry * cx3) - (rx * cy3));
HXDLIN( 138)										Float sx1 = (cy3 - ry);
HXDLIN( 138)										Float sy1 = (rx - cx3);
HXDLIN( 138)										Float t01 = ((rx * by1) - (ry * bx1));
HXDLIN( 138)										Float tx1 = (ry - by1);
HXDLIN( 138)										Float ty1 = (bx1 - rx);
HXDLIN( 138)										Float A1 = ((((-(by1) * cx3) + (ry * (-(bx1) + cx3))) + (rx * (by1 - cy3))) + (bx1 * cy3));
HXDLIN( 138)										 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN( 138)										if ((rx > bx1)) {
HXLINE( 138)											if ((rx > cx3)) {
HXLINE( 138)												int min20;
HXDLIN( 138)												if ((bx1 > cx3)) {
HXLINE( 138)													min20 = ::Math_obj::floor(cx3);
            												}
            												else {
HXLINE( 138)													min20 = ::Math_obj::floor(bx1);
            												}
HXDLIN( 138)												int ii_min40 = min20;
HXDLIN( 138)												int ii_max40 = ::Math_obj::ceil(rx);
HXDLIN( 138)												xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            											}
            											else {
HXLINE( 138)												int ii_min41 = ::Math_obj::floor(bx1);
HXDLIN( 138)												int ii_max41 = ::Math_obj::ceil(cx3);
HXDLIN( 138)												xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            											}
            										}
            										else {
HXLINE( 138)											if ((bx1 > cx3)) {
HXLINE( 138)												int min21;
HXDLIN( 138)												if ((rx > cx3)) {
HXLINE( 138)													min21 = ::Math_obj::floor(cx3);
            												}
            												else {
HXLINE( 138)													min21 = ::Math_obj::ceil(rx);
            												}
HXDLIN( 138)												int ii_min42 = min21;
HXDLIN( 138)												int ii_max42 = ::Math_obj::ceil(bx1);
HXDLIN( 138)												xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            											}
            											else {
HXLINE( 138)												int ii_min43 = ::Math_obj::floor(rx);
HXDLIN( 138)												int ii_max43 = ::Math_obj::ceil(cx3);
HXDLIN( 138)												xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            											}
            										}
HXDLIN( 138)										 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN( 138)										if ((ry > by1)) {
HXLINE( 138)											if ((ry > cy3)) {
HXLINE( 138)												int min22;
HXDLIN( 138)												if ((by1 > cy3)) {
HXLINE( 138)													min22 = ::Math_obj::floor(cy3);
            												}
            												else {
HXLINE( 138)													min22 = ::Math_obj::floor(by1);
            												}
HXDLIN( 138)												int ii_min44 = min22;
HXDLIN( 138)												int ii_max44 = ::Math_obj::ceil(ry);
HXDLIN( 138)												yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            											}
            											else {
HXLINE( 138)												int ii_min45 = ::Math_obj::floor(by1);
HXDLIN( 138)												int ii_max45 = ::Math_obj::ceil(cy3);
HXDLIN( 138)												yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            											}
            										}
            										else {
HXLINE( 138)											if ((by1 > cy3)) {
HXLINE( 138)												int min23;
HXDLIN( 138)												if ((ry > cy3)) {
HXLINE( 138)													min23 = ::Math_obj::floor(cy3);
            												}
            												else {
HXLINE( 138)													min23 = ::Math_obj::ceil(ry);
            												}
HXDLIN( 138)												int ii_min46 = min23;
HXDLIN( 138)												int ii_max46 = ::Math_obj::ceil(by1);
HXDLIN( 138)												yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            											}
            											else {
HXLINE( 138)												int ii_min47 = ::Math_obj::floor(ry);
HXDLIN( 138)												int ii_max47 = ::Math_obj::ceil(cy3);
HXDLIN( 138)												yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            											}
            										}
HXDLIN( 138)										 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN( 138)										if (hasUndo5) {
HXLINE( 138)											int width7 = ((xIter35->max - xIter35->start) + 1);
HXDLIN( 138)											int height7 = ((yIter35->max - yIter35->start) + 1);
HXDLIN( 138)											 ::Dynamic imageType7 = null();
HXDLIN( 138)											 ::pi_xy::ImageStruct this170 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 138)											if (::hx::IsNull( imageType7 )) {
HXLINE(  54)												imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE( 138)											::Dynamic undoImage16;
HXDLIN( 138)											switch((int)(( (int)(imageType7) ))){
            												case (int)0: {
HXLINE( 138)													 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 138)													 ::iterMagic::BytesImg b43 = byt7;
HXDLIN( 138)													{
HXLINE( 138)														b43->width = width7;
HXDLIN( 138)														b43->height = height7;
HXDLIN( 138)														b43->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 138)														b43->data = ::haxe::io::Bytes_obj::alloc((b43->length * 4));
HXDLIN( 138)														{
HXLINE( 138)															int len14 = b43->length;
HXDLIN( 138)															int w7 = 0;
HXDLIN( 138)															{
HXLINE( 138)																int _g144 = 0;
HXDLIN( 138)																int _g145 = b43->height;
HXDLIN( 138)																while((_g144 < _g145)){
HXLINE( 138)																	_g144 = (_g144 + 1);
HXDLIN( 138)																	int y18 = (_g144 - 1);
HXDLIN( 138)																	{
HXLINE( 138)																		int _g146 = 0;
HXDLIN( 138)																		int _g147 = b43->width;
HXDLIN( 138)																		while((_g146 < _g147)){
HXLINE( 138)																			_g146 = (_g146 + 1);
HXDLIN( 138)																			int x18 = (_g146 - 1);
HXDLIN( 138)																			{
HXLINE( 138)																				w7 = (w7 + 1);
HXDLIN( 138)																				b43->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN( 138)																			{
HXLINE( 138)																				w7 = (w7 + 1);
HXDLIN( 138)																				b43->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN( 138)																			{
HXLINE( 138)																				w7 = (w7 + 1);
HXDLIN( 138)																				b43->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN( 138)																			{
HXLINE( 138)																				w7 = (w7 + 1);
HXDLIN( 138)																				b43->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN( 138)													undoImage16 = b43;
            												}
            												break;
            												case (int)1: {
HXLINE( 138)													 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 138)													 ::iterMagic::ArrIntImg a42 = arrI7;
HXDLIN( 138)													{
HXLINE( 138)														a42->width = width7;
HXDLIN( 138)														a42->height = height7;
HXDLIN( 138)														a42->data = ::Array_obj< int >::__new(0);
HXDLIN( 138)														a42->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 138)														{
HXLINE( 138)															int _g148 = 0;
HXDLIN( 138)															int _g149 = a42->length;
HXDLIN( 138)															while((_g148 < _g149)){
HXLINE( 138)																_g148 = (_g148 + 1);
HXDLIN( 138)																int i64 = (_g148 - 1);
HXDLIN( 138)																a42->data[i64] = 0;
            															}
            														}
            													}
HXDLIN( 138)													undoImage16 = a42;
            												}
            												break;
            												case (int)2: {
HXLINE( 138)													 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 138)													 ::iterMagic::U32ArrImg b44 = u32a7;
HXDLIN( 138)													{
HXLINE( 138)														b44->width = width7;
HXDLIN( 138)														b44->height = height7;
HXDLIN( 138)														b44->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 138)														int size7 = (b44->length * 4);
HXDLIN( 138)														b44->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN( 138)														{
HXLINE( 138)															int _g150 = 0;
HXDLIN( 138)															int _g151 = b44->length;
HXDLIN( 138)															while((_g150 < _g151)){
HXLINE( 138)																_g150 = (_g150 + 1);
HXDLIN( 138)																int i65 = (_g150 - 1);
HXDLIN( 138)																{
HXLINE( 138)																	 ::haxe::io::ArrayBufferViewImpl this171 = b44->data;
HXDLIN( 138)																	bool undoImage17;
HXDLIN( 138)																	if ((i65 >= 0)) {
HXLINE( 138)																		undoImage17 = (i65 < (this171->byteLength >> 2));
            																	}
            																	else {
HXLINE( 138)																		undoImage17 = false;
            																	}
HXDLIN( 138)																	if (undoImage17) {
HXLINE( 138)																		 ::haxe::io::Bytes _this7 = this171->bytes;
HXDLIN( 138)																		int pos7 = ((i65 << 2) + this171->byteOffset);
HXDLIN( 138)																		_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN( 138)																		_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN( 138)																		_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN( 138)																		_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN( 138)													undoImage16 = b44;
            												}
            												break;
            												case (int)3: {
HXLINE( 138)													 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 138)													 ::iterMagic::VecIntImg v17 = vec7;
HXDLIN( 138)													{
HXLINE( 138)														v17->width = width7;
HXDLIN( 138)														v17->height = height7;
HXDLIN( 138)														v17->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 138)														v17->data = ::Array_obj< int >::__new(v17->length);
HXDLIN( 138)														{
HXLINE( 138)															int _g152 = 0;
HXDLIN( 138)															int _g153 = v17->length;
HXDLIN( 138)															while((_g152 < _g153)){
HXLINE( 138)																_g152 = (_g152 + 1);
HXDLIN( 138)																int i66 = (_g152 - 1);
HXDLIN( 138)																v17->data->__unsafe_set(i66,0);
            															}
            														}
            													}
HXDLIN( 138)													undoImage16 = v17;
            												}
            												break;
            												case (int)4: {
HXLINE( 138)													 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 138)													 ::iterMagic::StackIntImg b45 = sInt7;
HXDLIN( 138)													{
HXLINE( 138)														b45->width = width7;
HXDLIN( 138)														b45->height = height7;
HXDLIN( 138)														b45->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 138)														b45->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 138)														{
HXLINE( 138)															int len15 = b45->length;
HXDLIN( 138)															 ::haxe::ds::GenericStack_Int d7 = b45->data;
HXDLIN( 138)															if (::hx::IsNull( d7->head )) {
HXLINE( 138)																int _g154 = 0;
HXDLIN( 138)																int _g155 = len15;
HXDLIN( 138)																while((_g154 < _g155)){
HXLINE( 138)																	_g154 = (_g154 + 1);
HXDLIN( 138)																	int i67 = (_g154 - 1);
HXDLIN( 138)																	d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            																}
            															}
            															else {
HXLINE( 138)																int _g156 = 0;
HXDLIN( 138)																int _g157 = len15;
HXDLIN( 138)																while((_g156 < _g157)){
HXLINE( 138)																	_g156 = (_g156 + 1);
HXDLIN( 138)																	int i68 = (_g156 - 1);
HXDLIN( 138)																	{
HXLINE( 138)																		 ::haxe::ds::GenericCell_Int l7 = b45->data->head;
HXDLIN( 138)																		 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN( 138)																		{
HXLINE( 138)																			int _g158 = 0;
HXDLIN( 138)																			int _g159 = i68;
HXDLIN( 138)																			while((_g158 < _g159)){
HXLINE( 138)																				_g158 = (_g158 + 1);
HXDLIN( 138)																				int i69 = (_g158 - 1);
HXLINE( 345)																				prev7 = l7;
HXLINE( 346)																				l7 = l7->next;
            																			}
            																		}
HXLINE( 138)																		if (::hx::IsNull( prev7 )) {
HXLINE( 138)																			b45->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN( 138)																			l7 = null();
            																		}
            																		else {
HXLINE( 138)																			prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN( 138)																			l7 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN( 138)													undoImage16 = b45;
            												}
            												break;
            											}
HXDLIN( 138)											this170->image = undoImage16;
HXDLIN( 138)											this170->width = width7;
HXDLIN( 138)											this170->height = height7;
HXDLIN( 138)											this170->imageType = ( (int)(imageType7) );
HXDLIN( 138)											undoImage15 = this170;
HXDLIN( 138)											{
HXLINE( 138)												int rectLeft5 = xIter35->start;
HXDLIN( 138)												int rectTop5 = yIter35->start;
HXDLIN( 138)												int rectRight5 = xIter35->max;
HXDLIN( 138)												bool forceClear5 = false;
HXDLIN( 138)												{
HXLINE( 138)													int _g160 = rectTop5;
HXDLIN( 138)													int _g161 = yIter35->max;
HXDLIN( 138)													while((_g160 < _g161)){
HXLINE( 138)														_g160 = (_g160 + 1);
HXDLIN( 138)														int dy5 = (_g160 - 1);
HXDLIN( 138)														{
HXLINE( 138)															int _g162 = rectLeft5;
HXDLIN( 138)															int _g163 = rectRight5;
HXDLIN( 138)															while((_g162 < _g163)){
HXLINE( 138)																_g162 = (_g162 + 1);
HXDLIN( 138)																int dx5 = (_g162 - 1);
HXDLIN( 138)																::Dynamic this172 = this169->image;
HXDLIN( 138)																int index21;
HXDLIN( 138)																if (this169->useVirtualPos) {
HXLINE( 138)																	index21 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this169->virtualY) * ( (Float)(this169->width) )) + dx5) - this169->virtualX));
            																}
            																else {
HXLINE( 138)																	index21 = ::Std_obj::_hx_int(( (Float)(((dy5 * this169->width) + dx5)) ));
            																}
HXDLIN( 138)																int c16 = ::iterMagic::Iimg_obj::get(this172,index21);
HXDLIN( 138)																int col5;
HXDLIN( 138)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																	col5 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            																}
            																else {
HXLINE( 138)																	col5 = c16;
            																}
HXDLIN( 138)																bool _hx_tmp40;
HXDLIN( 138)																if (this169->useMask) {
HXLINE( 138)																	_hx_tmp40 = ::hx::IsNotNull( this169->mask );
            																}
            																else {
HXLINE( 138)																	_hx_tmp40 = false;
            																}
HXDLIN( 138)																if (_hx_tmp40) {
HXLINE( 138)																	 ::pi_xy::ImageStruct this173 = this169->mask;
HXDLIN( 138)																	::Dynamic this174 = this173->image;
HXDLIN( 138)																	int index22;
HXDLIN( 138)																	if (this173->useVirtualPos) {
HXLINE( 138)																		index22 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this173->virtualY) * ( (Float)(this173->width) )) + dx5) - this173->virtualX));
            																	}
            																	else {
HXLINE( 138)																		index22 = ::Std_obj::_hx_int(( (Float)(((dy5 * this173->width) + dx5)) ));
            																	}
HXDLIN( 138)																	int c17 = ::iterMagic::Iimg_obj::get(this174,index22);
HXDLIN( 138)																	int v18;
HXDLIN( 138)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																		v18 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            																	}
            																	else {
HXLINE( 138)																		v18 = c17;
            																	}
HXDLIN( 138)																	int maskPixel5 = v18;
HXDLIN( 138)																	int this175 = col5;
HXDLIN( 138)																	if ((maskPixel5 == 0)) {
HXLINE( 138)																		col5 = this175;
            																	}
            																	else {
HXLINE( 138)																		Float m05;
HXDLIN( 138)																		int this176 = ((maskPixel5 >> 24) & 255);
HXDLIN( 138)																		if ((this176 == 0)) {
HXLINE( 138)																			m05 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			m05 = (( (Float)(this176) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float m15;
HXDLIN( 138)																		int this177 = ((maskPixel5 >> 16) & 255);
HXDLIN( 138)																		if ((this177 == 0)) {
HXLINE( 138)																			m15 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			m15 = (( (Float)(this177) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float m25;
HXDLIN( 138)																		int this178 = ((maskPixel5 >> 8) & 255);
HXDLIN( 138)																		if ((this178 == 0)) {
HXLINE( 138)																			m25 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			m25 = (( (Float)(this178) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float m35;
HXDLIN( 138)																		int this179 = (maskPixel5 & 255);
HXDLIN( 138)																		if ((this179 == 0)) {
HXLINE( 138)																			m35 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			m35 = (( (Float)(this179) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this175 >> 24) & 255)) )));
HXDLIN( 138)																		int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this175 >> 16) & 255)) )));
HXDLIN( 138)																		int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this175 >> 8) & 255)) )));
HXDLIN( 138)																		int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this175 & 255)) )));
HXDLIN( 138)																		col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN( 138)																if ((col5 != 0)) {
HXLINE( 138)																	int x19 = (dx5 - rectLeft5);
HXDLIN( 138)																	int y19 = (dy5 - rectTop5);
HXDLIN( 138)																	int c18 = col5;
HXDLIN( 138)																	bool _hx_tmp41;
HXDLIN( 138)																	if ((((c18 >> 24) & 255) < 254)) {
HXLINE( 138)																		_hx_tmp41 = undoImage15->transparent;
            																	}
            																	else {
HXLINE( 138)																		_hx_tmp41 = false;
            																	}
HXDLIN( 138)																	if (_hx_tmp41) {
HXLINE( 138)																		int location10;
HXDLIN( 138)																		if (undoImage15->useVirtualPos) {
HXLINE( 138)																			location10 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x19) - undoImage15->virtualX));
            																		}
            																		else {
HXLINE( 138)																			location10 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage15->width) + x19)) ));
            																		}
HXDLIN( 138)																		int this180 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN( 138)																		int this181;
HXDLIN( 138)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																			this181 = ((((((this180 >> 24) & 255) << 24) | ((this180 & 255) << 16)) | (((this180 >> 8) & 255) << 8)) | ((this180 >> 16) & 255));
            																		}
            																		else {
HXLINE( 138)																			this181 = this180;
            																		}
HXDLIN( 138)																		Float a114;
HXDLIN( 138)																		int this182 = ((this181 >> 24) & 255);
HXDLIN( 138)																		if ((this182 == 0)) {
HXLINE( 138)																			a114 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			a114 = (( (Float)(this182) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float r112;
HXDLIN( 138)																		int this183 = ((this181 >> 16) & 255);
HXDLIN( 138)																		if ((this183 == 0)) {
HXLINE( 138)																			r112 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			r112 = (( (Float)(this183) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float g112;
HXDLIN( 138)																		int this184 = ((this181 >> 8) & 255);
HXDLIN( 138)																		if ((this184 == 0)) {
HXLINE( 138)																			g112 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			g112 = (( (Float)(this184) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float b117;
HXDLIN( 138)																		int this185 = (this181 & 255);
HXDLIN( 138)																		if ((this185 == 0)) {
HXLINE( 138)																			b117 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			b117 = (( (Float)(this185) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float a213;
HXDLIN( 138)																		int this186 = ((col5 >> 24) & 255);
HXDLIN( 138)																		if ((this186 == 0)) {
HXLINE( 138)																			a213 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			a213 = (( (Float)(this186) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float r211;
HXDLIN( 138)																		int this187 = ((col5 >> 16) & 255);
HXDLIN( 138)																		if ((this187 == 0)) {
HXLINE( 138)																			r211 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			r211 = (( (Float)(this187) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float g211;
HXDLIN( 138)																		int this188 = ((col5 >> 8) & 255);
HXDLIN( 138)																		if ((this188 == 0)) {
HXLINE( 138)																			g211 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			g211 = (( (Float)(this188) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float b215;
HXDLIN( 138)																		int this189 = (col5 & 255);
HXDLIN( 138)																		if ((this189 == 0)) {
HXLINE( 138)																			b215 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			b215 = (( (Float)(this189) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float a312 = (a114 * (( (Float)(1) ) - a213));
HXDLIN( 138)																		int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a312) + (r211 * a213))));
HXDLIN( 138)																		int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a312) + (g211 * a213))));
HXDLIN( 138)																		int b46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a312) + (b215 * a213))));
HXDLIN( 138)																		int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN( 138)																		int blended10 = ((((a43 << 24) | (r31 << 16)) | (g31 << 8)) | b46);
HXDLIN( 138)																		{
HXLINE( 138)																			int _hx_tmp42;
HXDLIN( 138)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																				_hx_tmp42 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            																			}
            																			else {
HXLINE( 138)																				_hx_tmp42 = blended10;
            																			}
HXDLIN( 138)																			::iterMagic::Iimg_obj::set(undoImage15->image,location10,_hx_tmp42);
            																		}
            																	}
            																	else {
HXLINE( 138)																		::Dynamic this190 = undoImage15->image;
HXDLIN( 138)																		int index23;
HXDLIN( 138)																		if (undoImage15->useVirtualPos) {
HXLINE( 138)																			index23 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x19) - undoImage15->virtualX));
            																		}
            																		else {
HXLINE( 138)																			index23 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage15->width) + x19)) ));
            																		}
HXDLIN( 138)																		int _hx_tmp43;
HXDLIN( 138)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																			_hx_tmp43 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            																		}
            																		else {
HXLINE( 138)																			_hx_tmp43 = c18;
            																		}
HXDLIN( 138)																		::iterMagic::Iimg_obj::set(this190,index23,_hx_tmp43);
            																	}
            																}
            																else {
HXLINE( 138)																	if (forceClear5) {
HXLINE( 138)																		::Dynamic this191 = undoImage15->image;
HXDLIN( 138)																		int x20 = (dx5 - rectLeft5);
HXDLIN( 138)																		int y20 = (dy5 - rectTop5);
HXDLIN( 138)																		int index24;
HXDLIN( 138)																		if (undoImage15->useVirtualPos) {
HXLINE( 138)																			index24 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x20) - undoImage15->virtualX));
            																		}
            																		else {
HXLINE( 138)																			index24 = ::Std_obj::_hx_int(( (Float)(((y20 * undoImage15->width) + x20)) ));
            																		}
HXDLIN( 138)																		::iterMagic::Iimg_obj::set(this191,index24,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN( 138)										bool found1 = false;
HXDLIN( 138)										Float s1 = ((Float)0.);
HXDLIN( 138)										Float t1 = ((Float)0.);
HXDLIN( 138)										Float sxx1 = ((Float)0.);
HXDLIN( 138)										Float txx1 = ((Float)0.);
HXDLIN( 138)										{
HXLINE( 138)											int _g_min10 = xIter35->start;
HXDLIN( 138)											int _g_max10 = xIter35->max;
HXDLIN( 138)											while((_g_min10 < _g_max10)){
HXLINE( 138)												_g_min10 = (_g_min10 + 1);
HXDLIN( 138)												int x21 = (_g_min10 - 1);
HXLINE(  60)												sxx1 = (sx1 * ( (Float)(x21) ));
HXLINE(  61)												txx1 = (tx1 * ( (Float)(x21) ));
HXLINE(  62)												found1 = false;
HXLINE( 138)												{
HXLINE( 138)													int _g_min11 = yIter35->start;
HXDLIN( 138)													int _g_max11 = yIter35->max;
HXDLIN( 138)													while((_g_min11 < _g_max11)){
HXLINE( 138)														_g_min11 = (_g_min11 + 1);
HXDLIN( 138)														int y21 = (_g_min11 - 1);
HXLINE(  64)														s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y21) )));
HXLINE(  65)														t1 = ((t01 + txx1) + (ty1 * ( (Float)(y21) )));
HXLINE( 138)														bool _hx_tmp44;
HXDLIN( 138)														if (!((s1 <= 0))) {
HXLINE( 138)															_hx_tmp44 = (t1 <= 0);
            														}
            														else {
HXLINE( 138)															_hx_tmp44 = true;
            														}
HXDLIN( 138)														if (_hx_tmp44) {
HXLINE( 138)															if (found1) {
HXLINE( 138)																goto _hx_goto_348;
            															}
            														}
            														else {
HXLINE( 138)															if (((s1 + t1) < A1)) {
HXLINE( 138)																{
HXLINE( 138)																	int c19 = 0;
HXDLIN( 138)																	bool _hx_tmp45;
HXDLIN( 138)																	if ((((c19 >> 24) & 255) < 254)) {
HXLINE( 138)																		_hx_tmp45 = this169->transparent;
            																	}
            																	else {
HXLINE( 138)																		_hx_tmp45 = false;
            																	}
HXDLIN( 138)																	if (_hx_tmp45) {
HXLINE( 138)																		int location11;
HXDLIN( 138)																		if (this169->useVirtualPos) {
HXLINE( 138)																			location11 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - this169->virtualY) * ( (Float)(this169->width) )) + x21) - this169->virtualX));
            																		}
            																		else {
HXLINE( 138)																			location11 = ::Std_obj::_hx_int(( (Float)(((y21 * this169->width) + x21)) ));
            																		}
HXDLIN( 138)																		int this192 = ::iterMagic::Iimg_obj::get(this169->image,location11);
HXDLIN( 138)																		int this193;
HXDLIN( 138)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																			this193 = ((((((this192 >> 24) & 255) << 24) | ((this192 & 255) << 16)) | (((this192 >> 8) & 255) << 8)) | ((this192 >> 16) & 255));
            																		}
            																		else {
HXLINE( 138)																			this193 = this192;
            																		}
HXDLIN( 138)																		Float a115;
HXDLIN( 138)																		int this194 = ((this193 >> 24) & 255);
HXDLIN( 138)																		if ((this194 == 0)) {
HXLINE( 138)																			a115 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			a115 = (( (Float)(this194) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float r113;
HXDLIN( 138)																		int this195 = ((this193 >> 16) & 255);
HXDLIN( 138)																		if ((this195 == 0)) {
HXLINE( 138)																			r113 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			r113 = (( (Float)(this195) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float g113;
HXDLIN( 138)																		int this196 = ((this193 >> 8) & 255);
HXDLIN( 138)																		if ((this196 == 0)) {
HXLINE( 138)																			g113 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			g113 = (( (Float)(this196) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float b118;
HXDLIN( 138)																		int this197 = (this193 & 255);
HXDLIN( 138)																		if ((this197 == 0)) {
HXLINE( 138)																			b118 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			b118 = (( (Float)(this197) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float a214;
HXDLIN( 138)																		int this198 = ((0 >> 24) & 255);
HXDLIN( 138)																		if ((this198 == 0)) {
HXLINE( 138)																			a214 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			a214 = (( (Float)(this198) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float r212;
HXDLIN( 138)																		int this199 = ((0 >> 16) & 255);
HXDLIN( 138)																		if ((this199 == 0)) {
HXLINE( 138)																			r212 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			r212 = (( (Float)(this199) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float g212;
HXDLIN( 138)																		int this200 = ((0 >> 8) & 255);
HXDLIN( 138)																		if ((this200 == 0)) {
HXLINE( 138)																			g212 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			g212 = (( (Float)(this200) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float b216;
HXDLIN( 138)																		int this201 = (0 & 255);
HXDLIN( 138)																		if ((this201 == 0)) {
HXLINE( 138)																			b216 = ((Float)0.);
            																		}
            																		else {
HXLINE( 138)																			b216 = (( (Float)(this201) ) / ( (Float)(255) ));
            																		}
HXDLIN( 138)																		Float a313 = (a115 * (( (Float)(1) ) - a214));
HXDLIN( 138)																		int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a313) + (r212 * a214))));
HXDLIN( 138)																		int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a313) + (g212 * a214))));
HXDLIN( 138)																		int b47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a313) + (b216 * a214))));
HXDLIN( 138)																		int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN( 138)																		int blended11 = ((((a44 << 24) | (r32 << 16)) | (g32 << 8)) | b47);
HXDLIN( 138)																		{
HXLINE( 138)																			int _hx_tmp46;
HXDLIN( 138)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																				_hx_tmp46 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            																			}
            																			else {
HXLINE( 138)																				_hx_tmp46 = blended11;
            																			}
HXDLIN( 138)																			::iterMagic::Iimg_obj::set(this169->image,location11,_hx_tmp46);
            																		}
            																	}
            																	else {
HXLINE( 138)																		::Dynamic this202 = this169->image;
HXDLIN( 138)																		int index25;
HXDLIN( 138)																		if (this169->useVirtualPos) {
HXLINE( 138)																			index25 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - this169->virtualY) * ( (Float)(this169->width) )) + x21) - this169->virtualX));
            																		}
            																		else {
HXLINE( 138)																			index25 = ::Std_obj::_hx_int(( (Float)(((y21 * this169->width) + x21)) ));
            																		}
HXDLIN( 138)																		int _hx_tmp47;
HXDLIN( 138)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 138)																			_hx_tmp47 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            																		}
            																		else {
HXLINE( 138)																			_hx_tmp47 = c19;
            																		}
HXDLIN( 138)																		::iterMagic::Iimg_obj::set(this202,index25,_hx_tmp47);
            																	}
            																}
HXLINE(  73)																found1 = true;
            															}
            															else {
HXLINE( 138)																if (found1) {
HXLINE( 138)																	goto _hx_goto_348;
            																}
            															}
            														}
            													}
            													_hx_goto_348:;
            												}
            											}
            										}
HXDLIN( 138)										if ((hasHit5 == true)) {
HXLINE( 138)											 ::pi_xy::algo::HitTri v19 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,rx,ry,bx1,by1,cx3,cy3,true);
HXDLIN( 138)											if (hasUndo5) {
HXLINE( 138)												v19->undoImage = undoImage15;
HXDLIN( 138)												v19->undoX = xIter35->start;
HXDLIN( 138)												v19->undoY = yIter35->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  59)							lastX2 = nextX5;
HXLINE(  60)							lastY2 = nextY5;
            						}
            					}
            				}
            			}
HXLINE( 143)			{
HXLINE( 143)				int x22 = ::Std_obj::_hx_int((cx - rx));
HXDLIN( 143)				int y22 = ::Std_obj::_hx_int((cy - ry));
HXDLIN( 143)				bool forceClear6 = false;
HXDLIN( 143)				{
HXLINE( 143)					int _g164 = 0;
HXDLIN( 143)					int _g165 = temp->height;
HXDLIN( 143)					while((_g164 < _g165)){
HXLINE( 143)						_g164 = (_g164 + 1);
HXDLIN( 143)						int dy6 = (_g164 - 1);
HXDLIN( 143)						{
HXLINE( 143)							int _g166 = 0;
HXDLIN( 143)							int _g167 = temp->width;
HXDLIN( 143)							while((_g166 < _g167)){
HXLINE( 143)								_g166 = (_g166 + 1);
HXDLIN( 143)								int dx6 = (_g166 - 1);
HXDLIN( 143)								::Dynamic this203 = temp->image;
HXDLIN( 143)								int index26;
HXDLIN( 143)								if (temp->useVirtualPos) {
HXLINE( 143)									index26 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx6) - temp->virtualX));
            								}
            								else {
HXLINE( 143)									index26 = ::Std_obj::_hx_int(( (Float)(((dy6 * temp->width) + dx6)) ));
            								}
HXDLIN( 143)								int c20 = ::iterMagic::Iimg_obj::get(this203,index26);
HXDLIN( 143)								int col6;
HXDLIN( 143)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 143)									col6 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            								}
            								else {
HXLINE( 143)									col6 = c20;
            								}
HXDLIN( 143)								bool _hx_tmp48;
HXDLIN( 143)								if (temp->useMask) {
HXLINE( 143)									_hx_tmp48 = ::hx::IsNotNull( temp->mask );
            								}
            								else {
HXLINE( 143)									_hx_tmp48 = false;
            								}
HXDLIN( 143)								if (_hx_tmp48) {
HXLINE( 143)									 ::pi_xy::ImageStruct this204 = temp->mask;
HXDLIN( 143)									::Dynamic this205 = this204->image;
HXDLIN( 143)									int index27;
HXDLIN( 143)									if (this204->useVirtualPos) {
HXLINE( 143)										index27 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this204->virtualY) * ( (Float)(this204->width) )) + dx6) - this204->virtualX));
            									}
            									else {
HXLINE( 143)										index27 = ::Std_obj::_hx_int(( (Float)(((dy6 * this204->width) + dx6)) ));
            									}
HXDLIN( 143)									int c21 = ::iterMagic::Iimg_obj::get(this205,index27);
HXDLIN( 143)									int v20;
HXDLIN( 143)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 143)										v20 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            									}
            									else {
HXLINE( 143)										v20 = c21;
            									}
HXDLIN( 143)									int maskPixel6 = v20;
HXDLIN( 143)									int this206 = col6;
HXDLIN( 143)									if ((maskPixel6 == 0)) {
HXLINE( 143)										col6 = this206;
            									}
            									else {
HXLINE( 143)										Float m06;
HXDLIN( 143)										int this207 = ((maskPixel6 >> 24) & 255);
HXDLIN( 143)										if ((this207 == 0)) {
HXLINE( 143)											m06 = ((Float)0.);
            										}
            										else {
HXLINE( 143)											m06 = (( (Float)(this207) ) / ( (Float)(255) ));
            										}
HXDLIN( 143)										Float m16;
HXDLIN( 143)										int this208 = ((maskPixel6 >> 16) & 255);
HXDLIN( 143)										if ((this208 == 0)) {
HXLINE( 143)											m16 = ((Float)0.);
            										}
            										else {
HXLINE( 143)											m16 = (( (Float)(this208) ) / ( (Float)(255) ));
            										}
HXDLIN( 143)										Float m26;
HXDLIN( 143)										int this209 = ((maskPixel6 >> 8) & 255);
HXDLIN( 143)										if ((this209 == 0)) {
HXLINE( 143)											m26 = ((Float)0.);
            										}
            										else {
HXLINE( 143)											m26 = (( (Float)(this209) ) / ( (Float)(255) ));
            										}
HXDLIN( 143)										Float m36;
HXDLIN( 143)										int this210 = (maskPixel6 & 255);
HXDLIN( 143)										if ((this210 == 0)) {
HXLINE( 143)											m36 = ((Float)0.);
            										}
            										else {
HXLINE( 143)											m36 = (( (Float)(this210) ) / ( (Float)(255) ));
            										}
HXDLIN( 143)										int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this206 >> 24) & 255)) )));
HXDLIN( 143)										int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this206 >> 16) & 255)) )));
HXDLIN( 143)										int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this206 >> 8) & 255)) )));
HXDLIN( 143)										int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this206 & 255)) )));
HXDLIN( 143)										col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 143)								if ((col6 != 0)) {
HXLINE( 143)									int x23 = (x22 + dx6);
HXDLIN( 143)									int y23 = (y22 + dy6);
HXDLIN( 143)									int c22 = col6;
HXDLIN( 143)									bool _hx_tmp49;
HXDLIN( 143)									if ((((c22 >> 24) & 255) < 254)) {
HXLINE( 143)										_hx_tmp49 = this1->transparent;
            									}
            									else {
HXLINE( 143)										_hx_tmp49 = false;
            									}
HXDLIN( 143)									if (_hx_tmp49) {
HXLINE( 143)										int location12;
HXDLIN( 143)										if (this1->useVirtualPos) {
HXLINE( 143)											location12 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - this1->virtualY) * ( (Float)(this1->width) )) + x23) - this1->virtualX));
            										}
            										else {
HXLINE( 143)											location12 = ::Std_obj::_hx_int(( (Float)(((y23 * this1->width) + x23)) ));
            										}
HXDLIN( 143)										int this211 = ::iterMagic::Iimg_obj::get(this1->image,location12);
HXDLIN( 143)										int this212;
HXDLIN( 143)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 143)											this212 = ((((((this211 >> 24) & 255) << 24) | ((this211 & 255) << 16)) | (((this211 >> 8) & 255) << 8)) | ((this211 >> 16) & 255));
            										}
            										else {
HXLINE( 143)											this212 = this211;
            										}
HXDLIN( 143)										Float a116;
HXDLIN( 143)										int this213 = ((this212 >> 24) & 255);
HXDLIN( 143)										if ((this213 == 0)) {
HXLINE( 143)											a116 = ((Float)0.);
            										}
            										else {
HXLINE( 143)											a116 = (( (Float)(this213) ) / ( (Float)(255) ));
            										}
HXDLIN( 143)										Float r114;
HXDLIN( 143)										int this214 = ((this212 >> 16) & 255);
HXDLIN( 143)										if ((this214 == 0)) {
HXLINE( 143)											r114 = ((Float)0.);
            										}
            										else {
HXLINE( 143)											r114 = (( (Float)(this214) ) / ( (Float)(255) ));
            										}
HXDLIN( 143)										Float g114;
HXDLIN( 143)										int this215 = ((this212 >> 8) & 255);
HXDLIN( 143)										if ((this215 == 0)) {
HXLINE( 143)											g114 = ((Float)0.);
            										}
            										else {
HXLINE( 143)											g114 = (( (Float)(this215) ) / ( (Float)(255) ));
            										}
HXDLIN( 143)										Float b119;
HXDLIN( 143)										int this216 = (this212 & 255);
HXDLIN( 143)										if ((this216 == 0)) {
HXLINE( 143)											b119 = ((Float)0.);
            										}
            										else {
HXLINE( 143)											b119 = (( (Float)(this216) ) / ( (Float)(255) ));
            										}
HXDLIN( 143)										Float a215;
HXDLIN( 143)										int this217 = ((col6 >> 24) & 255);
HXDLIN( 143)										if ((this217 == 0)) {
HXLINE( 143)											a215 = ((Float)0.);
            										}
            										else {
HXLINE( 143)											a215 = (( (Float)(this217) ) / ( (Float)(255) ));
            										}
HXDLIN( 143)										Float r213;
HXDLIN( 143)										int this218 = ((col6 >> 16) & 255);
HXDLIN( 143)										if ((this218 == 0)) {
HXLINE( 143)											r213 = ((Float)0.);
            										}
            										else {
HXLINE( 143)											r213 = (( (Float)(this218) ) / ( (Float)(255) ));
            										}
HXDLIN( 143)										Float g213;
HXDLIN( 143)										int this219 = ((col6 >> 8) & 255);
HXDLIN( 143)										if ((this219 == 0)) {
HXLINE( 143)											g213 = ((Float)0.);
            										}
            										else {
HXLINE( 143)											g213 = (( (Float)(this219) ) / ( (Float)(255) ));
            										}
HXDLIN( 143)										Float b217;
HXDLIN( 143)										int this220 = (col6 & 255);
HXDLIN( 143)										if ((this220 == 0)) {
HXLINE( 143)											b217 = ((Float)0.);
            										}
            										else {
HXLINE( 143)											b217 = (( (Float)(this220) ) / ( (Float)(255) ));
            										}
HXDLIN( 143)										Float a314 = (a116 * (( (Float)(1) ) - a215));
HXDLIN( 143)										int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a314) + (r213 * a215))));
HXDLIN( 143)										int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a314) + (g213 * a215))));
HXDLIN( 143)										int b48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a314) + (b217 * a215))));
HXDLIN( 143)										int a45 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN( 143)										int blended12 = ((((a45 << 24) | (r33 << 16)) | (g33 << 8)) | b48);
HXDLIN( 143)										{
HXLINE( 143)											int _hx_tmp50;
HXDLIN( 143)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 143)												_hx_tmp50 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            											}
            											else {
HXLINE( 143)												_hx_tmp50 = blended12;
            											}
HXDLIN( 143)											::iterMagic::Iimg_obj::set(this1->image,location12,_hx_tmp50);
            										}
            									}
            									else {
HXLINE( 143)										::Dynamic this221 = this1->image;
HXDLIN( 143)										int index28;
HXDLIN( 143)										if (this1->useVirtualPos) {
HXLINE( 143)											index28 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - this1->virtualY) * ( (Float)(this1->width) )) + x23) - this1->virtualX));
            										}
            										else {
HXLINE( 143)											index28 = ::Std_obj::_hx_int(( (Float)(((y23 * this1->width) + x23)) ));
            										}
HXDLIN( 143)										int _hx_tmp51;
HXDLIN( 143)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 143)											_hx_tmp51 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            										}
            										else {
HXLINE( 143)											_hx_tmp51 = c22;
            										}
HXDLIN( 143)										::iterMagic::Iimg_obj::set(this221,index28,_hx_tmp51);
            									}
            								}
            								else {
HXLINE( 143)									if (forceClear6) {
HXLINE( 143)										::Dynamic this222 = this1->image;
HXDLIN( 143)										int x24 = (x22 + dx6);
HXDLIN( 143)										int y24 = (y22 + dy6);
HXDLIN( 143)										int index29;
HXDLIN( 143)										if (this1->useVirtualPos) {
HXLINE( 143)											index29 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - this1->virtualY) * ( (Float)(this1->width) )) + x24) - this1->virtualX));
            										}
            										else {
HXLINE( 143)											index29 = ::Std_obj::_hx_int(( (Float)(((y24 * this1->width) + x24)) ));
            										}
HXDLIN( 143)										::iterMagic::Iimg_obj::set(this222,index29,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 145)			{
HXLINE( 145)				 ::pi_xy::ImageStruct this223 = temp;
HXDLIN( 145)				Float cx4 = (rx + rDif);
HXDLIN( 145)				Float cy4 = (ry + rDif);
HXDLIN( 145)				 ::Dynamic phi5 = phi;
HXDLIN( 145)				 ::Dynamic sides4 = noSides;
HXLINE( 149)				if (::hx::IsNull( sides4 )) {
HXLINE( 149)					sides4 = 36;
            				}
HXLINE( 148)				if (::hx::IsNull( phi5 )) {
HXLINE( 148)					phi5 = ((Float)0.);
            				}
HXLINE( 145)				{
HXLINE( 145)					 ::Dynamic phi6 = phi5;
HXDLIN( 145)					 ::Dynamic sides5 = sides4;
HXDLIN( 145)					if (::hx::IsNull( sides5 )) {
HXLINE( 212)						sides5 = 36;
            					}
HXLINE( 145)					if (::hx::IsNull( phi6 )) {
HXLINE( 211)						phi6 = ((Float)0.);
            					}
HXLINE( 145)					Float theta3 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides5) ));
HXDLIN( 145)					Float omega3;
HXDLIN( 145)					omega3 = ((Float)0.);
HXDLIN( 145)					Float lastX3 = ((Float)0.);
HXDLIN( 145)					Float lastY3 = ((Float)0.);
HXDLIN( 145)					if (::hx::IsNotEq( phi6,0 )) {
HXLINE(  35)						lastX3 = ((((rx2 * ::Math_obj::cos(((( (Float)(sides5) ) * theta3) + omega3))) * ::Math_obj::cos(( (Float)(phi6) ))) - ((ry2 * ::Math_obj::sin(((( (Float)(sides5) ) * theta3) + omega3))) * ::Math_obj::sin(( (Float)(phi6) )))) + cx4);
HXLINE(  36)						lastY3 = ((((rx2 * ::Math_obj::cos(((( (Float)(sides5) ) * theta3) + omega3))) * ::Math_obj::sin(( (Float)(phi6) ))) + ((ry2 * ::Math_obj::sin(((( (Float)(sides5) ) * theta3) + omega3))) * ::Math_obj::cos(( (Float)(phi6) )))) + cy4);
            					}
            					else {
HXLINE(  38)						lastX3 = (cx4 + (rx2 * ::Math_obj::cos(((( (Float)(sides5) ) * theta3) + omega3))));
HXLINE(  39)						lastY3 = (cy4 + (ry2 * ::Math_obj::sin(((( (Float)(sides5) ) * theta3) + omega3))));
            					}
HXLINE( 145)					if (::hx::IsNotEq( phi6,0 )) {
HXLINE( 145)						Float cphi3 = ::Math_obj::cos(( (Float)(phi6) ));
HXDLIN( 145)						Float sphi3 = ::Math_obj::sin(( (Float)(phi6) ));
HXDLIN( 145)						{
HXLINE( 145)							int _g168 = 0;
HXDLIN( 145)							int _g169 = (sides5 + 1);
HXDLIN( 145)							while((_g168 < _g169)){
HXLINE( 145)								_g168 = (_g168 + 1);
HXDLIN( 145)								int i70 = (_g168 - 1);
HXDLIN( 145)								Float stheta3 = ::Math_obj::sin((((( (Float)(i70) ) * theta3) + omega3) + ((Float)0.01)));
HXDLIN( 145)								Float ctheta3 = ::Math_obj::cos((((( (Float)(i70) ) * theta3) + omega3) + ((Float)0.01)));
HXDLIN( 145)								Float nextX6 = ((((rx2 * ctheta3) * cphi3) - ((ry2 * stheta3) * sphi3)) + cx4);
HXDLIN( 145)								Float nextY6 = ((((rx2 * ctheta3) * sphi3) + ((ry2 * stheta3) * cphi3)) + cy4);
HXDLIN( 145)								{
HXLINE( 145)									 ::pi_xy::ImageStruct this224 = this223;
HXDLIN( 145)									bool hasHit6 = false;
HXDLIN( 145)									bool hasUndo6 = false;
HXDLIN( 145)									{
HXLINE( 145)										Float bx2 = lastX3;
HXDLIN( 145)										Float by2 = lastY3;
HXDLIN( 145)										Float cx5 = nextX6;
HXDLIN( 145)										Float cy5 = nextY6;
HXDLIN( 145)										bool adjustWinding2 = (((((cx4 * by2) - (bx2 * cy4)) + ((bx2 * cy5) - (cx5 * by2))) + ((cx5 * cy4) - (cx4 * cy5))) > 0);
HXDLIN( 145)										if (!(adjustWinding2)) {
HXLINE( 145)											Float bx_2 = bx2;
HXDLIN( 145)											Float by_2 = by2;
HXLINE(  25)											bx2 = cx5;
HXLINE(  26)											by2 = cy5;
HXLINE(  27)											cx5 = bx_2;
HXLINE(  28)											cy5 = by_2;
            										}
HXLINE( 145)										{
HXLINE( 145)											Float s02 = ((cy4 * cx5) - (cx4 * cy5));
HXDLIN( 145)											Float sx2 = (cy5 - cy4);
HXDLIN( 145)											Float sy2 = (cx4 - cx5);
HXDLIN( 145)											Float t02 = ((cx4 * by2) - (cy4 * bx2));
HXDLIN( 145)											Float tx2 = (cy4 - by2);
HXDLIN( 145)											Float ty2 = (bx2 - cx4);
HXDLIN( 145)											Float A2 = ((((-(by2) * cx5) + (cy4 * (-(bx2) + cx5))) + (cx4 * (by2 - cy5))) + (bx2 * cy5));
HXDLIN( 145)											 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN( 145)											if ((cx4 > bx2)) {
HXLINE( 145)												if ((cx4 > cx5)) {
HXLINE( 145)													int min24;
HXDLIN( 145)													if ((bx2 > cx5)) {
HXLINE( 145)														min24 = ::Math_obj::floor(cx5);
            													}
            													else {
HXLINE( 145)														min24 = ::Math_obj::floor(bx2);
            													}
HXDLIN( 145)													int ii_min48 = min24;
HXDLIN( 145)													int ii_max48 = ::Math_obj::ceil(cx4);
HXDLIN( 145)													xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            												}
            												else {
HXLINE( 145)													int ii_min49 = ::Math_obj::floor(bx2);
HXDLIN( 145)													int ii_max49 = ::Math_obj::ceil(cx5);
HXDLIN( 145)													xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            												}
            											}
            											else {
HXLINE( 145)												if ((bx2 > cx5)) {
HXLINE( 145)													int min25;
HXDLIN( 145)													if ((cx4 > cx5)) {
HXLINE( 145)														min25 = ::Math_obj::floor(cx5);
            													}
            													else {
HXLINE( 145)														min25 = ::Math_obj::ceil(cx4);
            													}
HXDLIN( 145)													int ii_min50 = min25;
HXDLIN( 145)													int ii_max50 = ::Math_obj::ceil(bx2);
HXDLIN( 145)													xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            												}
            												else {
HXLINE( 145)													int ii_min51 = ::Math_obj::floor(cx4);
HXDLIN( 145)													int ii_max51 = ::Math_obj::ceil(cx5);
HXDLIN( 145)													xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            												}
            											}
HXDLIN( 145)											 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN( 145)											if ((cy4 > by2)) {
HXLINE( 145)												if ((cy4 > cy5)) {
HXLINE( 145)													int min26;
HXDLIN( 145)													if ((by2 > cy5)) {
HXLINE( 145)														min26 = ::Math_obj::floor(cy5);
            													}
            													else {
HXLINE( 145)														min26 = ::Math_obj::floor(by2);
            													}
HXDLIN( 145)													int ii_min52 = min26;
HXDLIN( 145)													int ii_max52 = ::Math_obj::ceil(cy4);
HXDLIN( 145)													yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            												}
            												else {
HXLINE( 145)													int ii_min53 = ::Math_obj::floor(by2);
HXDLIN( 145)													int ii_max53 = ::Math_obj::ceil(cy5);
HXDLIN( 145)													yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            												}
            											}
            											else {
HXLINE( 145)												if ((by2 > cy5)) {
HXLINE( 145)													int min27;
HXDLIN( 145)													if ((cy4 > cy5)) {
HXLINE( 145)														min27 = ::Math_obj::floor(cy5);
            													}
            													else {
HXLINE( 145)														min27 = ::Math_obj::ceil(cy4);
            													}
HXDLIN( 145)													int ii_min54 = min27;
HXDLIN( 145)													int ii_max54 = ::Math_obj::ceil(by2);
HXDLIN( 145)													yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            												}
            												else {
HXLINE( 145)													int ii_min55 = ::Math_obj::floor(cy4);
HXDLIN( 145)													int ii_max55 = ::Math_obj::ceil(cy5);
HXDLIN( 145)													yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            												}
            											}
HXDLIN( 145)											 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN( 145)											if (hasUndo6) {
HXLINE( 145)												int width8 = ((xIter36->max - xIter36->start) + 1);
HXDLIN( 145)												int height8 = ((yIter36->max - yIter36->start) + 1);
HXDLIN( 145)												 ::Dynamic imageType8 = null();
HXDLIN( 145)												 ::pi_xy::ImageStruct this225 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 145)												if (::hx::IsNull( imageType8 )) {
HXLINE(  54)													imageType8 = ::pi_xy::ImageStruct_obj::defaultType;
            												}
HXLINE( 145)												::Dynamic undoImage19;
HXDLIN( 145)												switch((int)(( (int)(imageType8) ))){
            													case (int)0: {
HXLINE( 145)														 ::iterMagic::BytesImg byt8 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 145)														 ::iterMagic::BytesImg b49 = byt8;
HXDLIN( 145)														{
HXLINE( 145)															b49->width = width8;
HXDLIN( 145)															b49->height = height8;
HXDLIN( 145)															b49->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 145)															b49->data = ::haxe::io::Bytes_obj::alloc((b49->length * 4));
HXDLIN( 145)															{
HXLINE( 145)																int len16 = b49->length;
HXDLIN( 145)																int w8 = 0;
HXDLIN( 145)																{
HXLINE( 145)																	int _g170 = 0;
HXDLIN( 145)																	int _g171 = b49->height;
HXDLIN( 145)																	while((_g170 < _g171)){
HXLINE( 145)																		_g170 = (_g170 + 1);
HXDLIN( 145)																		int y25 = (_g170 - 1);
HXDLIN( 145)																		{
HXLINE( 145)																			int _g172 = 0;
HXDLIN( 145)																			int _g173 = b49->width;
HXDLIN( 145)																			while((_g172 < _g173)){
HXLINE( 145)																				_g172 = (_g172 + 1);
HXDLIN( 145)																				int x25 = (_g172 - 1);
HXDLIN( 145)																				{
HXLINE( 145)																					w8 = (w8 + 1);
HXDLIN( 145)																					b49->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN( 145)																				{
HXLINE( 145)																					w8 = (w8 + 1);
HXDLIN( 145)																					b49->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN( 145)																				{
HXLINE( 145)																					w8 = (w8 + 1);
HXDLIN( 145)																					b49->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																				}
HXDLIN( 145)																				{
HXLINE( 145)																					w8 = (w8 + 1);
HXDLIN( 145)																					b49->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            																				}
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN( 145)														undoImage19 = b49;
            													}
            													break;
            													case (int)1: {
HXLINE( 145)														 ::iterMagic::ArrIntImg arrI8 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 145)														 ::iterMagic::ArrIntImg a46 = arrI8;
HXDLIN( 145)														{
HXLINE( 145)															a46->width = width8;
HXDLIN( 145)															a46->height = height8;
HXDLIN( 145)															a46->data = ::Array_obj< int >::__new(0);
HXDLIN( 145)															a46->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 145)															{
HXLINE( 145)																int _g174 = 0;
HXDLIN( 145)																int _g175 = a46->length;
HXDLIN( 145)																while((_g174 < _g175)){
HXLINE( 145)																	_g174 = (_g174 + 1);
HXDLIN( 145)																	int i71 = (_g174 - 1);
HXDLIN( 145)																	a46->data[i71] = 0;
            																}
            															}
            														}
HXDLIN( 145)														undoImage19 = a46;
            													}
            													break;
            													case (int)2: {
HXLINE( 145)														 ::iterMagic::U32ArrImg u32a8 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 145)														 ::iterMagic::U32ArrImg b50 = u32a8;
HXDLIN( 145)														{
HXLINE( 145)															b50->width = width8;
HXDLIN( 145)															b50->height = height8;
HXDLIN( 145)															b50->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 145)															int size8 = (b50->length * 4);
HXDLIN( 145)															b50->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size8),0,size8);
HXDLIN( 145)															{
HXLINE( 145)																int _g176 = 0;
HXDLIN( 145)																int _g177 = b50->length;
HXDLIN( 145)																while((_g176 < _g177)){
HXLINE( 145)																	_g176 = (_g176 + 1);
HXDLIN( 145)																	int i72 = (_g176 - 1);
HXDLIN( 145)																	{
HXLINE( 145)																		 ::haxe::io::ArrayBufferViewImpl this226 = b50->data;
HXDLIN( 145)																		bool undoImage20;
HXDLIN( 145)																		if ((i72 >= 0)) {
HXLINE( 145)																			undoImage20 = (i72 < (this226->byteLength >> 2));
            																		}
            																		else {
HXLINE( 145)																			undoImage20 = false;
            																		}
HXDLIN( 145)																		if (undoImage20) {
HXLINE( 145)																			 ::haxe::io::Bytes _this8 = this226->bytes;
HXDLIN( 145)																			int pos8 = ((i72 << 2) + this226->byteOffset);
HXDLIN( 145)																			_this8->b[pos8] = ( (unsigned char)(0) );
HXDLIN( 145)																			_this8->b[(pos8 + 1)] = ( (unsigned char)(0) );
HXDLIN( 145)																			_this8->b[(pos8 + 2)] = ( (unsigned char)(0) );
HXDLIN( 145)																			_this8->b[(pos8 + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
HXDLIN( 145)														undoImage19 = b50;
            													}
            													break;
            													case (int)3: {
HXLINE( 145)														 ::iterMagic::VecIntImg vec8 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 145)														 ::iterMagic::VecIntImg v21 = vec8;
HXDLIN( 145)														{
HXLINE( 145)															v21->width = width8;
HXDLIN( 145)															v21->height = height8;
HXDLIN( 145)															v21->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 145)															v21->data = ::Array_obj< int >::__new(v21->length);
HXDLIN( 145)															{
HXLINE( 145)																int _g178 = 0;
HXDLIN( 145)																int _g179 = v21->length;
HXDLIN( 145)																while((_g178 < _g179)){
HXLINE( 145)																	_g178 = (_g178 + 1);
HXDLIN( 145)																	int i73 = (_g178 - 1);
HXDLIN( 145)																	v21->data->__unsafe_set(i73,0);
            																}
            															}
            														}
HXDLIN( 145)														undoImage19 = v21;
            													}
            													break;
            													case (int)4: {
HXLINE( 145)														 ::iterMagic::StackIntImg sInt8 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 145)														 ::iterMagic::StackIntImg b51 = sInt8;
HXDLIN( 145)														{
HXLINE( 145)															b51->width = width8;
HXDLIN( 145)															b51->height = height8;
HXDLIN( 145)															b51->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 145)															b51->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 145)															{
HXLINE( 145)																int len17 = b51->length;
HXDLIN( 145)																 ::haxe::ds::GenericStack_Int d8 = b51->data;
HXDLIN( 145)																if (::hx::IsNull( d8->head )) {
HXLINE( 145)																	int _g180 = 0;
HXDLIN( 145)																	int _g181 = len17;
HXDLIN( 145)																	while((_g180 < _g181)){
HXLINE( 145)																		_g180 = (_g180 + 1);
HXDLIN( 145)																		int i74 = (_g180 - 1);
HXDLIN( 145)																		d8->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d8->head);
            																	}
            																}
            																else {
HXLINE( 145)																	int _g182 = 0;
HXDLIN( 145)																	int _g183 = len17;
HXDLIN( 145)																	while((_g182 < _g183)){
HXLINE( 145)																		_g182 = (_g182 + 1);
HXDLIN( 145)																		int i75 = (_g182 - 1);
HXDLIN( 145)																		{
HXLINE( 145)																			 ::haxe::ds::GenericCell_Int l8 = b51->data->head;
HXDLIN( 145)																			 ::haxe::ds::GenericCell_Int prev8 = null();
HXDLIN( 145)																			{
HXLINE( 145)																				int _g184 = 0;
HXDLIN( 145)																				int _g185 = i75;
HXDLIN( 145)																				while((_g184 < _g185)){
HXLINE( 145)																					_g184 = (_g184 + 1);
HXDLIN( 145)																					int i76 = (_g184 - 1);
HXLINE( 345)																					prev8 = l8;
HXLINE( 346)																					l8 = l8->next;
            																				}
            																			}
HXLINE( 145)																			if (::hx::IsNull( prev8 )) {
HXLINE( 145)																				b51->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN( 145)																				l8 = null();
            																			}
            																			else {
HXLINE( 145)																				prev8->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN( 145)																				l8 = null();
            																			}
            																		}
            																	}
            																}
            															}
            														}
HXDLIN( 145)														undoImage19 = b51;
            													}
            													break;
            												}
HXDLIN( 145)												this225->image = undoImage19;
HXDLIN( 145)												this225->width = width8;
HXDLIN( 145)												this225->height = height8;
HXDLIN( 145)												this225->imageType = ( (int)(imageType8) );
HXDLIN( 145)												undoImage18 = this225;
HXDLIN( 145)												{
HXLINE( 145)													int rectLeft6 = xIter36->start;
HXDLIN( 145)													int rectTop6 = yIter36->start;
HXDLIN( 145)													int rectRight6 = xIter36->max;
HXDLIN( 145)													bool forceClear7 = false;
HXDLIN( 145)													{
HXLINE( 145)														int _g186 = rectTop6;
HXDLIN( 145)														int _g187 = yIter36->max;
HXDLIN( 145)														while((_g186 < _g187)){
HXLINE( 145)															_g186 = (_g186 + 1);
HXDLIN( 145)															int dy7 = (_g186 - 1);
HXDLIN( 145)															{
HXLINE( 145)																int _g188 = rectLeft6;
HXDLIN( 145)																int _g189 = rectRight6;
HXDLIN( 145)																while((_g188 < _g189)){
HXLINE( 145)																	_g188 = (_g188 + 1);
HXDLIN( 145)																	int dx7 = (_g188 - 1);
HXDLIN( 145)																	::Dynamic this227 = this224->image;
HXDLIN( 145)																	int index30;
HXDLIN( 145)																	if (this224->useVirtualPos) {
HXLINE( 145)																		index30 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this224->virtualY) * ( (Float)(this224->width) )) + dx7) - this224->virtualX));
            																	}
            																	else {
HXLINE( 145)																		index30 = ::Std_obj::_hx_int(( (Float)(((dy7 * this224->width) + dx7)) ));
            																	}
HXDLIN( 145)																	int c23 = ::iterMagic::Iimg_obj::get(this227,index30);
HXDLIN( 145)																	int col7;
HXDLIN( 145)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																		col7 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            																	}
            																	else {
HXLINE( 145)																		col7 = c23;
            																	}
HXDLIN( 145)																	bool _hx_tmp52;
HXDLIN( 145)																	if (this224->useMask) {
HXLINE( 145)																		_hx_tmp52 = ::hx::IsNotNull( this224->mask );
            																	}
            																	else {
HXLINE( 145)																		_hx_tmp52 = false;
            																	}
HXDLIN( 145)																	if (_hx_tmp52) {
HXLINE( 145)																		 ::pi_xy::ImageStruct this228 = this224->mask;
HXDLIN( 145)																		::Dynamic this229 = this228->image;
HXDLIN( 145)																		int index31;
HXDLIN( 145)																		if (this228->useVirtualPos) {
HXLINE( 145)																			index31 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this228->virtualY) * ( (Float)(this228->width) )) + dx7) - this228->virtualX));
            																		}
            																		else {
HXLINE( 145)																			index31 = ::Std_obj::_hx_int(( (Float)(((dy7 * this228->width) + dx7)) ));
            																		}
HXDLIN( 145)																		int c24 = ::iterMagic::Iimg_obj::get(this229,index31);
HXDLIN( 145)																		int v22;
HXDLIN( 145)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																			v22 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            																		}
            																		else {
HXLINE( 145)																			v22 = c24;
            																		}
HXDLIN( 145)																		int maskPixel7 = v22;
HXDLIN( 145)																		int this230 = col7;
HXDLIN( 145)																		if ((maskPixel7 == 0)) {
HXLINE( 145)																			col7 = this230;
            																		}
            																		else {
HXLINE( 145)																			Float m07;
HXDLIN( 145)																			int this231 = ((maskPixel7 >> 24) & 255);
HXDLIN( 145)																			if ((this231 == 0)) {
HXLINE( 145)																				m07 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				m07 = (( (Float)(this231) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float m17;
HXDLIN( 145)																			int this232 = ((maskPixel7 >> 16) & 255);
HXDLIN( 145)																			if ((this232 == 0)) {
HXLINE( 145)																				m17 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				m17 = (( (Float)(this232) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float m27;
HXDLIN( 145)																			int this233 = ((maskPixel7 >> 8) & 255);
HXDLIN( 145)																			if ((this233 == 0)) {
HXLINE( 145)																				m27 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				m27 = (( (Float)(this233) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float m37;
HXDLIN( 145)																			int this234 = (maskPixel7 & 255);
HXDLIN( 145)																			if ((this234 == 0)) {
HXLINE( 145)																				m37 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				m37 = (( (Float)(this234) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this230 >> 24) & 255)) )));
HXDLIN( 145)																			int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this230 >> 16) & 255)) )));
HXDLIN( 145)																			int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this230 >> 8) & 255)) )));
HXDLIN( 145)																			int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this230 & 255)) )));
HXDLIN( 145)																			col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            																		}
            																	}
HXDLIN( 145)																	if ((col7 != 0)) {
HXLINE( 145)																		int x26 = (dx7 - rectLeft6);
HXDLIN( 145)																		int y26 = (dy7 - rectTop6);
HXDLIN( 145)																		int c25 = col7;
HXDLIN( 145)																		bool _hx_tmp53;
HXDLIN( 145)																		if ((((c25 >> 24) & 255) < 254)) {
HXLINE( 145)																			_hx_tmp53 = undoImage18->transparent;
            																		}
            																		else {
HXLINE( 145)																			_hx_tmp53 = false;
            																		}
HXDLIN( 145)																		if (_hx_tmp53) {
HXLINE( 145)																			int location13;
HXDLIN( 145)																			if (undoImage18->useVirtualPos) {
HXLINE( 145)																				location13 = ::Std_obj::_hx_int(((((( (Float)(y26) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x26) - undoImage18->virtualX));
            																			}
            																			else {
HXLINE( 145)																				location13 = ::Std_obj::_hx_int(( (Float)(((y26 * undoImage18->width) + x26)) ));
            																			}
HXDLIN( 145)																			int this235 = ::iterMagic::Iimg_obj::get(undoImage18->image,location13);
HXDLIN( 145)																			int this236;
HXDLIN( 145)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																				this236 = ((((((this235 >> 24) & 255) << 24) | ((this235 & 255) << 16)) | (((this235 >> 8) & 255) << 8)) | ((this235 >> 16) & 255));
            																			}
            																			else {
HXLINE( 145)																				this236 = this235;
            																			}
HXDLIN( 145)																			Float a117;
HXDLIN( 145)																			int this237 = ((this236 >> 24) & 255);
HXDLIN( 145)																			if ((this237 == 0)) {
HXLINE( 145)																				a117 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				a117 = (( (Float)(this237) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float r115;
HXDLIN( 145)																			int this238 = ((this236 >> 16) & 255);
HXDLIN( 145)																			if ((this238 == 0)) {
HXLINE( 145)																				r115 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				r115 = (( (Float)(this238) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float g115;
HXDLIN( 145)																			int this239 = ((this236 >> 8) & 255);
HXDLIN( 145)																			if ((this239 == 0)) {
HXLINE( 145)																				g115 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				g115 = (( (Float)(this239) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float b120;
HXDLIN( 145)																			int this240 = (this236 & 255);
HXDLIN( 145)																			if ((this240 == 0)) {
HXLINE( 145)																				b120 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				b120 = (( (Float)(this240) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float a216;
HXDLIN( 145)																			int this241 = ((col7 >> 24) & 255);
HXDLIN( 145)																			if ((this241 == 0)) {
HXLINE( 145)																				a216 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				a216 = (( (Float)(this241) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float r214;
HXDLIN( 145)																			int this242 = ((col7 >> 16) & 255);
HXDLIN( 145)																			if ((this242 == 0)) {
HXLINE( 145)																				r214 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				r214 = (( (Float)(this242) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float g214;
HXDLIN( 145)																			int this243 = ((col7 >> 8) & 255);
HXDLIN( 145)																			if ((this243 == 0)) {
HXLINE( 145)																				g214 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				g214 = (( (Float)(this243) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float b218;
HXDLIN( 145)																			int this244 = (col7 & 255);
HXDLIN( 145)																			if ((this244 == 0)) {
HXLINE( 145)																				b218 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				b218 = (( (Float)(this244) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float a315 = (a117 * (( (Float)(1) ) - a216));
HXDLIN( 145)																			int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a315) + (r214 * a216))));
HXDLIN( 145)																			int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a315) + (g214 * a216))));
HXDLIN( 145)																			int b52 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a315) + (b218 * a216))));
HXDLIN( 145)																			int a47 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN( 145)																			int blended13 = ((((a47 << 24) | (r34 << 16)) | (g34 << 8)) | b52);
HXDLIN( 145)																			{
HXLINE( 145)																				int _hx_tmp54;
HXDLIN( 145)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																					_hx_tmp54 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            																				}
            																				else {
HXLINE( 145)																					_hx_tmp54 = blended13;
            																				}
HXDLIN( 145)																				::iterMagic::Iimg_obj::set(undoImage18->image,location13,_hx_tmp54);
            																			}
            																		}
            																		else {
HXLINE( 145)																			::Dynamic this245 = undoImage18->image;
HXDLIN( 145)																			int index32;
HXDLIN( 145)																			if (undoImage18->useVirtualPos) {
HXLINE( 145)																				index32 = ::Std_obj::_hx_int(((((( (Float)(y26) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x26) - undoImage18->virtualX));
            																			}
            																			else {
HXLINE( 145)																				index32 = ::Std_obj::_hx_int(( (Float)(((y26 * undoImage18->width) + x26)) ));
            																			}
HXDLIN( 145)																			int _hx_tmp55;
HXDLIN( 145)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																				_hx_tmp55 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            																			}
            																			else {
HXLINE( 145)																				_hx_tmp55 = c25;
            																			}
HXDLIN( 145)																			::iterMagic::Iimg_obj::set(this245,index32,_hx_tmp55);
            																		}
            																	}
            																	else {
HXLINE( 145)																		if (forceClear7) {
HXLINE( 145)																			::Dynamic this246 = undoImage18->image;
HXDLIN( 145)																			int x27 = (dx7 - rectLeft6);
HXDLIN( 145)																			int y27 = (dy7 - rectTop6);
HXDLIN( 145)																			int index33;
HXDLIN( 145)																			if (undoImage18->useVirtualPos) {
HXLINE( 145)																				index33 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x27) - undoImage18->virtualX));
            																			}
            																			else {
HXLINE( 145)																				index33 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage18->width) + x27)) ));
            																			}
HXDLIN( 145)																			::iterMagic::Iimg_obj::set(this246,index33,0);
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
HXDLIN( 145)											bool found2 = false;
HXDLIN( 145)											Float s2 = ((Float)0.);
HXDLIN( 145)											Float t2 = ((Float)0.);
HXDLIN( 145)											Float sxx2 = ((Float)0.);
HXDLIN( 145)											Float txx2 = ((Float)0.);
HXDLIN( 145)											{
HXLINE( 145)												int _g_min12 = xIter36->start;
HXDLIN( 145)												int _g_max12 = xIter36->max;
HXDLIN( 145)												while((_g_min12 < _g_max12)){
HXLINE( 145)													_g_min12 = (_g_min12 + 1);
HXDLIN( 145)													int x28 = (_g_min12 - 1);
HXLINE(  60)													sxx2 = (sx2 * ( (Float)(x28) ));
HXLINE(  61)													txx2 = (tx2 * ( (Float)(x28) ));
HXLINE(  62)													found2 = false;
HXLINE( 145)													{
HXLINE( 145)														int _g_min13 = yIter36->start;
HXDLIN( 145)														int _g_max13 = yIter36->max;
HXDLIN( 145)														while((_g_min13 < _g_max13)){
HXLINE( 145)															_g_min13 = (_g_min13 + 1);
HXDLIN( 145)															int y28 = (_g_min13 - 1);
HXLINE(  64)															s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y28) )));
HXLINE(  65)															t2 = ((t02 + txx2) + (ty2 * ( (Float)(y28) )));
HXLINE( 145)															bool _hx_tmp56;
HXDLIN( 145)															if (!((s2 <= 0))) {
HXLINE( 145)																_hx_tmp56 = (t2 <= 0);
            															}
            															else {
HXLINE( 145)																_hx_tmp56 = true;
            															}
HXDLIN( 145)															if (_hx_tmp56) {
HXLINE( 145)																if (found2) {
HXLINE( 145)																	goto _hx_goto_363;
            																}
            															}
            															else {
HXLINE( 145)																if (((s2 + t2) < A2)) {
HXLINE( 145)																	{
HXLINE( 145)																		int c26 = 0;
HXDLIN( 145)																		bool _hx_tmp57;
HXDLIN( 145)																		if ((((c26 >> 24) & 255) < 254)) {
HXLINE( 145)																			_hx_tmp57 = this224->transparent;
            																		}
            																		else {
HXLINE( 145)																			_hx_tmp57 = false;
            																		}
HXDLIN( 145)																		if (_hx_tmp57) {
HXLINE( 145)																			int location14;
HXDLIN( 145)																			if (this224->useVirtualPos) {
HXLINE( 145)																				location14 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - this224->virtualY) * ( (Float)(this224->width) )) + x28) - this224->virtualX));
            																			}
            																			else {
HXLINE( 145)																				location14 = ::Std_obj::_hx_int(( (Float)(((y28 * this224->width) + x28)) ));
            																			}
HXDLIN( 145)																			int this247 = ::iterMagic::Iimg_obj::get(this224->image,location14);
HXDLIN( 145)																			int this248;
HXDLIN( 145)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																				this248 = ((((((this247 >> 24) & 255) << 24) | ((this247 & 255) << 16)) | (((this247 >> 8) & 255) << 8)) | ((this247 >> 16) & 255));
            																			}
            																			else {
HXLINE( 145)																				this248 = this247;
            																			}
HXDLIN( 145)																			Float a118;
HXDLIN( 145)																			int this249 = ((this248 >> 24) & 255);
HXDLIN( 145)																			if ((this249 == 0)) {
HXLINE( 145)																				a118 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				a118 = (( (Float)(this249) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float r116;
HXDLIN( 145)																			int this250 = ((this248 >> 16) & 255);
HXDLIN( 145)																			if ((this250 == 0)) {
HXLINE( 145)																				r116 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				r116 = (( (Float)(this250) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float g116;
HXDLIN( 145)																			int this251 = ((this248 >> 8) & 255);
HXDLIN( 145)																			if ((this251 == 0)) {
HXLINE( 145)																				g116 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				g116 = (( (Float)(this251) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float b121;
HXDLIN( 145)																			int this252 = (this248 & 255);
HXDLIN( 145)																			if ((this252 == 0)) {
HXLINE( 145)																				b121 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				b121 = (( (Float)(this252) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float a217;
HXDLIN( 145)																			int this253 = ((0 >> 24) & 255);
HXDLIN( 145)																			if ((this253 == 0)) {
HXLINE( 145)																				a217 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				a217 = (( (Float)(this253) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float r215;
HXDLIN( 145)																			int this254 = ((0 >> 16) & 255);
HXDLIN( 145)																			if ((this254 == 0)) {
HXLINE( 145)																				r215 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				r215 = (( (Float)(this254) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float g215;
HXDLIN( 145)																			int this255 = ((0 >> 8) & 255);
HXDLIN( 145)																			if ((this255 == 0)) {
HXLINE( 145)																				g215 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				g215 = (( (Float)(this255) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float b219;
HXDLIN( 145)																			int this256 = (0 & 255);
HXDLIN( 145)																			if ((this256 == 0)) {
HXLINE( 145)																				b219 = ((Float)0.);
            																			}
            																			else {
HXLINE( 145)																				b219 = (( (Float)(this256) ) / ( (Float)(255) ));
            																			}
HXDLIN( 145)																			Float a316 = (a118 * (( (Float)(1) ) - a217));
HXDLIN( 145)																			int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a316) + (r215 * a217))));
HXDLIN( 145)																			int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a316) + (g215 * a217))));
HXDLIN( 145)																			int b53 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b121 * a316) + (b219 * a217))));
HXDLIN( 145)																			int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN( 145)																			int blended14 = ((((a48 << 24) | (r35 << 16)) | (g35 << 8)) | b53);
HXDLIN( 145)																			{
HXLINE( 145)																				int _hx_tmp58;
HXDLIN( 145)																				if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																					_hx_tmp58 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            																				}
            																				else {
HXLINE( 145)																					_hx_tmp58 = blended14;
            																				}
HXDLIN( 145)																				::iterMagic::Iimg_obj::set(this224->image,location14,_hx_tmp58);
            																			}
            																		}
            																		else {
HXLINE( 145)																			::Dynamic this257 = this224->image;
HXDLIN( 145)																			int index34;
HXDLIN( 145)																			if (this224->useVirtualPos) {
HXLINE( 145)																				index34 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - this224->virtualY) * ( (Float)(this224->width) )) + x28) - this224->virtualX));
            																			}
            																			else {
HXLINE( 145)																				index34 = ::Std_obj::_hx_int(( (Float)(((y28 * this224->width) + x28)) ));
            																			}
HXDLIN( 145)																			int _hx_tmp59;
HXDLIN( 145)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																				_hx_tmp59 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            																			}
            																			else {
HXLINE( 145)																				_hx_tmp59 = c26;
            																			}
HXDLIN( 145)																			::iterMagic::Iimg_obj::set(this257,index34,_hx_tmp59);
            																		}
            																	}
HXLINE(  73)																	found2 = true;
            																}
            																else {
HXLINE( 145)																	if (found2) {
HXLINE( 145)																		goto _hx_goto_363;
            																	}
            																}
            															}
            														}
            														_hx_goto_363:;
            													}
            												}
            											}
HXDLIN( 145)											if ((hasHit6 == true)) {
HXLINE( 145)												 ::pi_xy::algo::HitTri v23 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx4,cy4,bx2,by2,cx5,cy5,true);
HXDLIN( 145)												if (hasUndo6) {
HXLINE( 145)													v23->undoImage = undoImage18;
HXDLIN( 145)													v23->undoX = xIter36->start;
HXDLIN( 145)													v23->undoY = yIter36->start;
            												}
            											}
            										}
            									}
            								}
HXLINE(  51)								lastX3 = nextX6;
HXLINE(  52)								lastY3 = nextY6;
            							}
            						}
            					}
            					else {
HXLINE( 145)						int _g190 = 0;
HXDLIN( 145)						int _g191 = (sides5 + 1);
HXDLIN( 145)						while((_g190 < _g191)){
HXLINE( 145)							_g190 = (_g190 + 1);
HXDLIN( 145)							int i77 = (_g190 - 1);
HXDLIN( 145)							Float nextX7 = (cx4 + (rx2 * ::Math_obj::cos((((( (Float)(i77) ) * theta3) + omega3) + ((Float)0.01)))));
HXDLIN( 145)							Float nextY7 = (cy4 + (ry2 * ::Math_obj::sin((((( (Float)(i77) ) * theta3) + omega3) + ((Float)0.01)))));
HXDLIN( 145)							{
HXLINE( 145)								 ::pi_xy::ImageStruct this258 = this223;
HXDLIN( 145)								bool hasHit7 = false;
HXDLIN( 145)								bool hasUndo7 = false;
HXDLIN( 145)								{
HXLINE( 145)									Float bx3 = lastX3;
HXDLIN( 145)									Float by3 = lastY3;
HXDLIN( 145)									Float cx6 = nextX7;
HXDLIN( 145)									Float cy6 = nextY7;
HXDLIN( 145)									bool adjustWinding3 = (((((cx4 * by3) - (bx3 * cy4)) + ((bx3 * cy6) - (cx6 * by3))) + ((cx6 * cy4) - (cx4 * cy6))) > 0);
HXDLIN( 145)									if (!(adjustWinding3)) {
HXLINE( 145)										Float bx_3 = bx3;
HXDLIN( 145)										Float by_3 = by3;
HXLINE(  25)										bx3 = cx6;
HXLINE(  26)										by3 = cy6;
HXLINE(  27)										cx6 = bx_3;
HXLINE(  28)										cy6 = by_3;
            									}
HXLINE( 145)									{
HXLINE( 145)										Float s03 = ((cy4 * cx6) - (cx4 * cy6));
HXDLIN( 145)										Float sx3 = (cy6 - cy4);
HXDLIN( 145)										Float sy3 = (cx4 - cx6);
HXDLIN( 145)										Float t03 = ((cx4 * by3) - (cy4 * bx3));
HXDLIN( 145)										Float tx3 = (cy4 - by3);
HXDLIN( 145)										Float ty3 = (bx3 - cx4);
HXDLIN( 145)										Float A3 = ((((-(by3) * cx6) + (cy4 * (-(bx3) + cx6))) + (cx4 * (by3 - cy6))) + (bx3 * cy6));
HXDLIN( 145)										 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN( 145)										if ((cx4 > bx3)) {
HXLINE( 145)											if ((cx4 > cx6)) {
HXLINE( 145)												int min28;
HXDLIN( 145)												if ((bx3 > cx6)) {
HXLINE( 145)													min28 = ::Math_obj::floor(cx6);
            												}
            												else {
HXLINE( 145)													min28 = ::Math_obj::floor(bx3);
            												}
HXDLIN( 145)												int ii_min56 = min28;
HXDLIN( 145)												int ii_max56 = ::Math_obj::ceil(cx4);
HXDLIN( 145)												xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            											}
            											else {
HXLINE( 145)												int ii_min57 = ::Math_obj::floor(bx3);
HXDLIN( 145)												int ii_max57 = ::Math_obj::ceil(cx6);
HXDLIN( 145)												xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            											}
            										}
            										else {
HXLINE( 145)											if ((bx3 > cx6)) {
HXLINE( 145)												int min29;
HXDLIN( 145)												if ((cx4 > cx6)) {
HXLINE( 145)													min29 = ::Math_obj::floor(cx6);
            												}
            												else {
HXLINE( 145)													min29 = ::Math_obj::ceil(cx4);
            												}
HXDLIN( 145)												int ii_min58 = min29;
HXDLIN( 145)												int ii_max58 = ::Math_obj::ceil(bx3);
HXDLIN( 145)												xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            											}
            											else {
HXLINE( 145)												int ii_min59 = ::Math_obj::floor(cx4);
HXDLIN( 145)												int ii_max59 = ::Math_obj::ceil(cx6);
HXDLIN( 145)												xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            											}
            										}
HXDLIN( 145)										 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN( 145)										if ((cy4 > by3)) {
HXLINE( 145)											if ((cy4 > cy6)) {
HXLINE( 145)												int min30;
HXDLIN( 145)												if ((by3 > cy6)) {
HXLINE( 145)													min30 = ::Math_obj::floor(cy6);
            												}
            												else {
HXLINE( 145)													min30 = ::Math_obj::floor(by3);
            												}
HXDLIN( 145)												int ii_min60 = min30;
HXDLIN( 145)												int ii_max60 = ::Math_obj::ceil(cy4);
HXDLIN( 145)												yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            											}
            											else {
HXLINE( 145)												int ii_min61 = ::Math_obj::floor(by3);
HXDLIN( 145)												int ii_max61 = ::Math_obj::ceil(cy6);
HXDLIN( 145)												yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            											}
            										}
            										else {
HXLINE( 145)											if ((by3 > cy6)) {
HXLINE( 145)												int min31;
HXDLIN( 145)												if ((cy4 > cy6)) {
HXLINE( 145)													min31 = ::Math_obj::floor(cy6);
            												}
            												else {
HXLINE( 145)													min31 = ::Math_obj::ceil(cy4);
            												}
HXDLIN( 145)												int ii_min62 = min31;
HXDLIN( 145)												int ii_max62 = ::Math_obj::ceil(by3);
HXDLIN( 145)												yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            											}
            											else {
HXLINE( 145)												int ii_min63 = ::Math_obj::floor(cy4);
HXDLIN( 145)												int ii_max63 = ::Math_obj::ceil(cy6);
HXDLIN( 145)												yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            											}
            										}
HXDLIN( 145)										 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN( 145)										if (hasUndo7) {
HXLINE( 145)											int width9 = ((xIter37->max - xIter37->start) + 1);
HXDLIN( 145)											int height9 = ((yIter37->max - yIter37->start) + 1);
HXDLIN( 145)											 ::Dynamic imageType9 = null();
HXDLIN( 145)											 ::pi_xy::ImageStruct this259 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 145)											if (::hx::IsNull( imageType9 )) {
HXLINE(  54)												imageType9 = ::pi_xy::ImageStruct_obj::defaultType;
            											}
HXLINE( 145)											::Dynamic undoImage22;
HXDLIN( 145)											switch((int)(( (int)(imageType9) ))){
            												case (int)0: {
HXLINE( 145)													 ::iterMagic::BytesImg byt9 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 145)													 ::iterMagic::BytesImg b54 = byt9;
HXDLIN( 145)													{
HXLINE( 145)														b54->width = width9;
HXDLIN( 145)														b54->height = height9;
HXDLIN( 145)														b54->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 145)														b54->data = ::haxe::io::Bytes_obj::alloc((b54->length * 4));
HXDLIN( 145)														{
HXLINE( 145)															int len18 = b54->length;
HXDLIN( 145)															int w9 = 0;
HXDLIN( 145)															{
HXLINE( 145)																int _g192 = 0;
HXDLIN( 145)																int _g193 = b54->height;
HXDLIN( 145)																while((_g192 < _g193)){
HXLINE( 145)																	_g192 = (_g192 + 1);
HXDLIN( 145)																	int y29 = (_g192 - 1);
HXDLIN( 145)																	{
HXLINE( 145)																		int _g194 = 0;
HXDLIN( 145)																		int _g195 = b54->width;
HXDLIN( 145)																		while((_g194 < _g195)){
HXLINE( 145)																			_g194 = (_g194 + 1);
HXDLIN( 145)																			int x29 = (_g194 - 1);
HXDLIN( 145)																			{
HXLINE( 145)																				w9 = (w9 + 1);
HXDLIN( 145)																				b54->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN( 145)																			{
HXLINE( 145)																				w9 = (w9 + 1);
HXDLIN( 145)																				b54->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN( 145)																			{
HXLINE( 145)																				w9 = (w9 + 1);
HXDLIN( 145)																				b54->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																			}
HXDLIN( 145)																			{
HXLINE( 145)																				w9 = (w9 + 1);
HXDLIN( 145)																				b54->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            																			}
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN( 145)													undoImage22 = b54;
            												}
            												break;
            												case (int)1: {
HXLINE( 145)													 ::iterMagic::ArrIntImg arrI9 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 145)													 ::iterMagic::ArrIntImg a49 = arrI9;
HXDLIN( 145)													{
HXLINE( 145)														a49->width = width9;
HXDLIN( 145)														a49->height = height9;
HXDLIN( 145)														a49->data = ::Array_obj< int >::__new(0);
HXDLIN( 145)														a49->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 145)														{
HXLINE( 145)															int _g196 = 0;
HXDLIN( 145)															int _g197 = a49->length;
HXDLIN( 145)															while((_g196 < _g197)){
HXLINE( 145)																_g196 = (_g196 + 1);
HXDLIN( 145)																int i78 = (_g196 - 1);
HXDLIN( 145)																a49->data[i78] = 0;
            															}
            														}
            													}
HXDLIN( 145)													undoImage22 = a49;
            												}
            												break;
            												case (int)2: {
HXLINE( 145)													 ::iterMagic::U32ArrImg u32a9 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 145)													 ::iterMagic::U32ArrImg b55 = u32a9;
HXDLIN( 145)													{
HXLINE( 145)														b55->width = width9;
HXDLIN( 145)														b55->height = height9;
HXDLIN( 145)														b55->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 145)														int size9 = (b55->length * 4);
HXDLIN( 145)														b55->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size9),0,size9);
HXDLIN( 145)														{
HXLINE( 145)															int _g198 = 0;
HXDLIN( 145)															int _g199 = b55->length;
HXDLIN( 145)															while((_g198 < _g199)){
HXLINE( 145)																_g198 = (_g198 + 1);
HXDLIN( 145)																int i79 = (_g198 - 1);
HXDLIN( 145)																{
HXLINE( 145)																	 ::haxe::io::ArrayBufferViewImpl this260 = b55->data;
HXDLIN( 145)																	bool undoImage23;
HXDLIN( 145)																	if ((i79 >= 0)) {
HXLINE( 145)																		undoImage23 = (i79 < (this260->byteLength >> 2));
            																	}
            																	else {
HXLINE( 145)																		undoImage23 = false;
            																	}
HXDLIN( 145)																	if (undoImage23) {
HXLINE( 145)																		 ::haxe::io::Bytes _this9 = this260->bytes;
HXDLIN( 145)																		int pos9 = ((i79 << 2) + this260->byteOffset);
HXDLIN( 145)																		_this9->b[pos9] = ( (unsigned char)(0) );
HXDLIN( 145)																		_this9->b[(pos9 + 1)] = ( (unsigned char)(0) );
HXDLIN( 145)																		_this9->b[(pos9 + 2)] = ( (unsigned char)(0) );
HXDLIN( 145)																		_this9->b[(pos9 + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
HXDLIN( 145)													undoImage22 = b55;
            												}
            												break;
            												case (int)3: {
HXLINE( 145)													 ::iterMagic::VecIntImg vec9 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 145)													 ::iterMagic::VecIntImg v24 = vec9;
HXDLIN( 145)													{
HXLINE( 145)														v24->width = width9;
HXDLIN( 145)														v24->height = height9;
HXDLIN( 145)														v24->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 145)														v24->data = ::Array_obj< int >::__new(v24->length);
HXDLIN( 145)														{
HXLINE( 145)															int _g200 = 0;
HXDLIN( 145)															int _g201 = v24->length;
HXDLIN( 145)															while((_g200 < _g201)){
HXLINE( 145)																_g200 = (_g200 + 1);
HXDLIN( 145)																int i80 = (_g200 - 1);
HXDLIN( 145)																v24->data->__unsafe_set(i80,0);
            															}
            														}
            													}
HXDLIN( 145)													undoImage22 = v24;
            												}
            												break;
            												case (int)4: {
HXLINE( 145)													 ::iterMagic::StackIntImg sInt9 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 145)													 ::iterMagic::StackIntImg b56 = sInt9;
HXDLIN( 145)													{
HXLINE( 145)														b56->width = width9;
HXDLIN( 145)														b56->height = height9;
HXDLIN( 145)														b56->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 145)														b56->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 145)														{
HXLINE( 145)															int len19 = b56->length;
HXDLIN( 145)															 ::haxe::ds::GenericStack_Int d9 = b56->data;
HXDLIN( 145)															if (::hx::IsNull( d9->head )) {
HXLINE( 145)																int _g202 = 0;
HXDLIN( 145)																int _g203 = len19;
HXDLIN( 145)																while((_g202 < _g203)){
HXLINE( 145)																	_g202 = (_g202 + 1);
HXDLIN( 145)																	int i81 = (_g202 - 1);
HXDLIN( 145)																	d9->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d9->head);
            																}
            															}
            															else {
HXLINE( 145)																int _g204 = 0;
HXDLIN( 145)																int _g205 = len19;
HXDLIN( 145)																while((_g204 < _g205)){
HXLINE( 145)																	_g204 = (_g204 + 1);
HXDLIN( 145)																	int i82 = (_g204 - 1);
HXDLIN( 145)																	{
HXLINE( 145)																		 ::haxe::ds::GenericCell_Int l9 = b56->data->head;
HXDLIN( 145)																		 ::haxe::ds::GenericCell_Int prev9 = null();
HXDLIN( 145)																		{
HXLINE( 145)																			int _g206 = 0;
HXDLIN( 145)																			int _g207 = i82;
HXDLIN( 145)																			while((_g206 < _g207)){
HXLINE( 145)																				_g206 = (_g206 + 1);
HXDLIN( 145)																				int i83 = (_g206 - 1);
HXLINE( 345)																				prev9 = l9;
HXLINE( 346)																				l9 = l9->next;
            																			}
            																		}
HXLINE( 145)																		if (::hx::IsNull( prev9 )) {
HXLINE( 145)																			b56->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN( 145)																			l9 = null();
            																		}
            																		else {
HXLINE( 145)																			prev9->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN( 145)																			l9 = null();
            																		}
            																	}
            																}
            															}
            														}
            													}
HXDLIN( 145)													undoImage22 = b56;
            												}
            												break;
            											}
HXDLIN( 145)											this259->image = undoImage22;
HXDLIN( 145)											this259->width = width9;
HXDLIN( 145)											this259->height = height9;
HXDLIN( 145)											this259->imageType = ( (int)(imageType9) );
HXDLIN( 145)											undoImage21 = this259;
HXDLIN( 145)											{
HXLINE( 145)												int rectLeft7 = xIter37->start;
HXDLIN( 145)												int rectTop7 = yIter37->start;
HXDLIN( 145)												int rectRight7 = xIter37->max;
HXDLIN( 145)												bool forceClear8 = false;
HXDLIN( 145)												{
HXLINE( 145)													int _g208 = rectTop7;
HXDLIN( 145)													int _g209 = yIter37->max;
HXDLIN( 145)													while((_g208 < _g209)){
HXLINE( 145)														_g208 = (_g208 + 1);
HXDLIN( 145)														int dy8 = (_g208 - 1);
HXDLIN( 145)														{
HXLINE( 145)															int _g210 = rectLeft7;
HXDLIN( 145)															int _g211 = rectRight7;
HXDLIN( 145)															while((_g210 < _g211)){
HXLINE( 145)																_g210 = (_g210 + 1);
HXDLIN( 145)																int dx8 = (_g210 - 1);
HXDLIN( 145)																::Dynamic this261 = this258->image;
HXDLIN( 145)																int index35;
HXDLIN( 145)																if (this258->useVirtualPos) {
HXLINE( 145)																	index35 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this258->virtualY) * ( (Float)(this258->width) )) + dx8) - this258->virtualX));
            																}
            																else {
HXLINE( 145)																	index35 = ::Std_obj::_hx_int(( (Float)(((dy8 * this258->width) + dx8)) ));
            																}
HXDLIN( 145)																int c27 = ::iterMagic::Iimg_obj::get(this261,index35);
HXDLIN( 145)																int col8;
HXDLIN( 145)																if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																	col8 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            																}
            																else {
HXLINE( 145)																	col8 = c27;
            																}
HXDLIN( 145)																bool _hx_tmp60;
HXDLIN( 145)																if (this258->useMask) {
HXLINE( 145)																	_hx_tmp60 = ::hx::IsNotNull( this258->mask );
            																}
            																else {
HXLINE( 145)																	_hx_tmp60 = false;
            																}
HXDLIN( 145)																if (_hx_tmp60) {
HXLINE( 145)																	 ::pi_xy::ImageStruct this262 = this258->mask;
HXDLIN( 145)																	::Dynamic this263 = this262->image;
HXDLIN( 145)																	int index36;
HXDLIN( 145)																	if (this262->useVirtualPos) {
HXLINE( 145)																		index36 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this262->virtualY) * ( (Float)(this262->width) )) + dx8) - this262->virtualX));
            																	}
            																	else {
HXLINE( 145)																		index36 = ::Std_obj::_hx_int(( (Float)(((dy8 * this262->width) + dx8)) ));
            																	}
HXDLIN( 145)																	int c28 = ::iterMagic::Iimg_obj::get(this263,index36);
HXDLIN( 145)																	int v25;
HXDLIN( 145)																	if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																		v25 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            																	}
            																	else {
HXLINE( 145)																		v25 = c28;
            																	}
HXDLIN( 145)																	int maskPixel8 = v25;
HXDLIN( 145)																	int this264 = col8;
HXDLIN( 145)																	if ((maskPixel8 == 0)) {
HXLINE( 145)																		col8 = this264;
            																	}
            																	else {
HXLINE( 145)																		Float m08;
HXDLIN( 145)																		int this265 = ((maskPixel8 >> 24) & 255);
HXDLIN( 145)																		if ((this265 == 0)) {
HXLINE( 145)																			m08 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			m08 = (( (Float)(this265) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float m18;
HXDLIN( 145)																		int this266 = ((maskPixel8 >> 16) & 255);
HXDLIN( 145)																		if ((this266 == 0)) {
HXLINE( 145)																			m18 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			m18 = (( (Float)(this266) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float m28;
HXDLIN( 145)																		int this267 = ((maskPixel8 >> 8) & 255);
HXDLIN( 145)																		if ((this267 == 0)) {
HXLINE( 145)																			m28 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			m28 = (( (Float)(this267) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float m38;
HXDLIN( 145)																		int this268 = (maskPixel8 & 255);
HXDLIN( 145)																		if ((this268 == 0)) {
HXLINE( 145)																			m38 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			m38 = (( (Float)(this268) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		int ch08 = ::Std_obj::_hx_int(((((Float)1.) - m08) * ( (Float)(((this264 >> 24) & 255)) )));
HXDLIN( 145)																		int ch18 = ::Std_obj::_hx_int(((((Float)1.) - m18) * ( (Float)(((this264 >> 16) & 255)) )));
HXDLIN( 145)																		int ch28 = ::Std_obj::_hx_int(((((Float)1.) - m28) * ( (Float)(((this264 >> 8) & 255)) )));
HXDLIN( 145)																		int ch38 = ::Std_obj::_hx_int(((((Float)1.) - m38) * ( (Float)((this264 & 255)) )));
HXDLIN( 145)																		col8 = ((((::Math_obj::round((( (Float)(ch08) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch18) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch28) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch38) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN( 145)																if ((col8 != 0)) {
HXLINE( 145)																	int x30 = (dx8 - rectLeft7);
HXDLIN( 145)																	int y30 = (dy8 - rectTop7);
HXDLIN( 145)																	int c29 = col8;
HXDLIN( 145)																	bool _hx_tmp61;
HXDLIN( 145)																	if ((((c29 >> 24) & 255) < 254)) {
HXLINE( 145)																		_hx_tmp61 = undoImage21->transparent;
            																	}
            																	else {
HXLINE( 145)																		_hx_tmp61 = false;
            																	}
HXDLIN( 145)																	if (_hx_tmp61) {
HXLINE( 145)																		int location15;
HXDLIN( 145)																		if (undoImage21->useVirtualPos) {
HXLINE( 145)																			location15 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x30) - undoImage21->virtualX));
            																		}
            																		else {
HXLINE( 145)																			location15 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage21->width) + x30)) ));
            																		}
HXDLIN( 145)																		int this269 = ::iterMagic::Iimg_obj::get(undoImage21->image,location15);
HXDLIN( 145)																		int this270;
HXDLIN( 145)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																			this270 = ((((((this269 >> 24) & 255) << 24) | ((this269 & 255) << 16)) | (((this269 >> 8) & 255) << 8)) | ((this269 >> 16) & 255));
            																		}
            																		else {
HXLINE( 145)																			this270 = this269;
            																		}
HXDLIN( 145)																		Float a119;
HXDLIN( 145)																		int this271 = ((this270 >> 24) & 255);
HXDLIN( 145)																		if ((this271 == 0)) {
HXLINE( 145)																			a119 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			a119 = (( (Float)(this271) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float r117;
HXDLIN( 145)																		int this272 = ((this270 >> 16) & 255);
HXDLIN( 145)																		if ((this272 == 0)) {
HXLINE( 145)																			r117 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			r117 = (( (Float)(this272) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float g117;
HXDLIN( 145)																		int this273 = ((this270 >> 8) & 255);
HXDLIN( 145)																		if ((this273 == 0)) {
HXLINE( 145)																			g117 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			g117 = (( (Float)(this273) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float b122;
HXDLIN( 145)																		int this274 = (this270 & 255);
HXDLIN( 145)																		if ((this274 == 0)) {
HXLINE( 145)																			b122 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			b122 = (( (Float)(this274) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float a218;
HXDLIN( 145)																		int this275 = ((col8 >> 24) & 255);
HXDLIN( 145)																		if ((this275 == 0)) {
HXLINE( 145)																			a218 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			a218 = (( (Float)(this275) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float r216;
HXDLIN( 145)																		int this276 = ((col8 >> 16) & 255);
HXDLIN( 145)																		if ((this276 == 0)) {
HXLINE( 145)																			r216 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			r216 = (( (Float)(this276) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float g216;
HXDLIN( 145)																		int this277 = ((col8 >> 8) & 255);
HXDLIN( 145)																		if ((this277 == 0)) {
HXLINE( 145)																			g216 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			g216 = (( (Float)(this277) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float b220;
HXDLIN( 145)																		int this278 = (col8 & 255);
HXDLIN( 145)																		if ((this278 == 0)) {
HXLINE( 145)																			b220 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			b220 = (( (Float)(this278) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float a317 = (a119 * (( (Float)(1) ) - a218));
HXDLIN( 145)																		int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a317) + (r216 * a218))));
HXDLIN( 145)																		int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a317) + (g216 * a218))));
HXDLIN( 145)																		int b57 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b122 * a317) + (b220 * a218))));
HXDLIN( 145)																		int a50 = ::Std_obj::_hx_int((( (Float)(255) ) * (a317 + a218)));
HXDLIN( 145)																		int blended15 = ((((a50 << 24) | (r36 << 16)) | (g36 << 8)) | b57);
HXDLIN( 145)																		{
HXLINE( 145)																			int _hx_tmp62;
HXDLIN( 145)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																				_hx_tmp62 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            																			}
            																			else {
HXLINE( 145)																				_hx_tmp62 = blended15;
            																			}
HXDLIN( 145)																			::iterMagic::Iimg_obj::set(undoImage21->image,location15,_hx_tmp62);
            																		}
            																	}
            																	else {
HXLINE( 145)																		::Dynamic this279 = undoImage21->image;
HXDLIN( 145)																		int index37;
HXDLIN( 145)																		if (undoImage21->useVirtualPos) {
HXLINE( 145)																			index37 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x30) - undoImage21->virtualX));
            																		}
            																		else {
HXLINE( 145)																			index37 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage21->width) + x30)) ));
            																		}
HXDLIN( 145)																		int _hx_tmp63;
HXDLIN( 145)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																			_hx_tmp63 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            																		}
            																		else {
HXLINE( 145)																			_hx_tmp63 = c29;
            																		}
HXDLIN( 145)																		::iterMagic::Iimg_obj::set(this279,index37,_hx_tmp63);
            																	}
            																}
            																else {
HXLINE( 145)																	if (forceClear8) {
HXLINE( 145)																		::Dynamic this280 = undoImage21->image;
HXDLIN( 145)																		int x31 = (dx8 - rectLeft7);
HXDLIN( 145)																		int y31 = (dy8 - rectTop7);
HXDLIN( 145)																		int index38;
HXDLIN( 145)																		if (undoImage21->useVirtualPos) {
HXLINE( 145)																			index38 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x31) - undoImage21->virtualX));
            																		}
            																		else {
HXLINE( 145)																			index38 = ::Std_obj::_hx_int(( (Float)(((y31 * undoImage21->width) + x31)) ));
            																		}
HXDLIN( 145)																		::iterMagic::Iimg_obj::set(this280,index38,0);
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN( 145)										bool found3 = false;
HXDLIN( 145)										Float s3 = ((Float)0.);
HXDLIN( 145)										Float t3 = ((Float)0.);
HXDLIN( 145)										Float sxx3 = ((Float)0.);
HXDLIN( 145)										Float txx3 = ((Float)0.);
HXDLIN( 145)										{
HXLINE( 145)											int _g_min14 = xIter37->start;
HXDLIN( 145)											int _g_max14 = xIter37->max;
HXDLIN( 145)											while((_g_min14 < _g_max14)){
HXLINE( 145)												_g_min14 = (_g_min14 + 1);
HXDLIN( 145)												int x32 = (_g_min14 - 1);
HXLINE(  60)												sxx3 = (sx3 * ( (Float)(x32) ));
HXLINE(  61)												txx3 = (tx3 * ( (Float)(x32) ));
HXLINE(  62)												found3 = false;
HXLINE( 145)												{
HXLINE( 145)													int _g_min15 = yIter37->start;
HXDLIN( 145)													int _g_max15 = yIter37->max;
HXDLIN( 145)													while((_g_min15 < _g_max15)){
HXLINE( 145)														_g_min15 = (_g_min15 + 1);
HXDLIN( 145)														int y32 = (_g_min15 - 1);
HXLINE(  64)														s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y32) )));
HXLINE(  65)														t3 = ((t03 + txx3) + (ty3 * ( (Float)(y32) )));
HXLINE( 145)														bool _hx_tmp64;
HXDLIN( 145)														if (!((s3 <= 0))) {
HXLINE( 145)															_hx_tmp64 = (t3 <= 0);
            														}
            														else {
HXLINE( 145)															_hx_tmp64 = true;
            														}
HXDLIN( 145)														if (_hx_tmp64) {
HXLINE( 145)															if (found3) {
HXLINE( 145)																goto _hx_goto_376;
            															}
            														}
            														else {
HXLINE( 145)															if (((s3 + t3) < A3)) {
HXLINE( 145)																{
HXLINE( 145)																	int c30 = 0;
HXDLIN( 145)																	bool _hx_tmp65;
HXDLIN( 145)																	if ((((c30 >> 24) & 255) < 254)) {
HXLINE( 145)																		_hx_tmp65 = this258->transparent;
            																	}
            																	else {
HXLINE( 145)																		_hx_tmp65 = false;
            																	}
HXDLIN( 145)																	if (_hx_tmp65) {
HXLINE( 145)																		int location16;
HXDLIN( 145)																		if (this258->useVirtualPos) {
HXLINE( 145)																			location16 = ::Std_obj::_hx_int(((((( (Float)(y32) ) - this258->virtualY) * ( (Float)(this258->width) )) + x32) - this258->virtualX));
            																		}
            																		else {
HXLINE( 145)																			location16 = ::Std_obj::_hx_int(( (Float)(((y32 * this258->width) + x32)) ));
            																		}
HXDLIN( 145)																		int this281 = ::iterMagic::Iimg_obj::get(this258->image,location16);
HXDLIN( 145)																		int this282;
HXDLIN( 145)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																			this282 = ((((((this281 >> 24) & 255) << 24) | ((this281 & 255) << 16)) | (((this281 >> 8) & 255) << 8)) | ((this281 >> 16) & 255));
            																		}
            																		else {
HXLINE( 145)																			this282 = this281;
            																		}
HXDLIN( 145)																		Float a120;
HXDLIN( 145)																		int this283 = ((this282 >> 24) & 255);
HXDLIN( 145)																		if ((this283 == 0)) {
HXLINE( 145)																			a120 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			a120 = (( (Float)(this283) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float r118;
HXDLIN( 145)																		int this284 = ((this282 >> 16) & 255);
HXDLIN( 145)																		if ((this284 == 0)) {
HXLINE( 145)																			r118 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			r118 = (( (Float)(this284) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float g118;
HXDLIN( 145)																		int this285 = ((this282 >> 8) & 255);
HXDLIN( 145)																		if ((this285 == 0)) {
HXLINE( 145)																			g118 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			g118 = (( (Float)(this285) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float b123;
HXDLIN( 145)																		int this286 = (this282 & 255);
HXDLIN( 145)																		if ((this286 == 0)) {
HXLINE( 145)																			b123 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			b123 = (( (Float)(this286) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float a219;
HXDLIN( 145)																		int this287 = ((0 >> 24) & 255);
HXDLIN( 145)																		if ((this287 == 0)) {
HXLINE( 145)																			a219 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			a219 = (( (Float)(this287) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float r217;
HXDLIN( 145)																		int this288 = ((0 >> 16) & 255);
HXDLIN( 145)																		if ((this288 == 0)) {
HXLINE( 145)																			r217 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			r217 = (( (Float)(this288) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float g217;
HXDLIN( 145)																		int this289 = ((0 >> 8) & 255);
HXDLIN( 145)																		if ((this289 == 0)) {
HXLINE( 145)																			g217 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			g217 = (( (Float)(this289) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float b221;
HXDLIN( 145)																		int this290 = (0 & 255);
HXDLIN( 145)																		if ((this290 == 0)) {
HXLINE( 145)																			b221 = ((Float)0.);
            																		}
            																		else {
HXLINE( 145)																			b221 = (( (Float)(this290) ) / ( (Float)(255) ));
            																		}
HXDLIN( 145)																		Float a318 = (a120 * (( (Float)(1) ) - a219));
HXDLIN( 145)																		int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r118 * a318) + (r217 * a219))));
HXDLIN( 145)																		int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g118 * a318) + (g217 * a219))));
HXDLIN( 145)																		int b58 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b123 * a318) + (b221 * a219))));
HXDLIN( 145)																		int a51 = ::Std_obj::_hx_int((( (Float)(255) ) * (a318 + a219)));
HXDLIN( 145)																		int blended16 = ((((a51 << 24) | (r37 << 16)) | (g37 << 8)) | b58);
HXDLIN( 145)																		{
HXLINE( 145)																			int _hx_tmp66;
HXDLIN( 145)																			if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																				_hx_tmp66 = ((((((blended16 >> 24) & 255) << 24) | ((blended16 & 255) << 16)) | (((blended16 >> 8) & 255) << 8)) | ((blended16 >> 16) & 255));
            																			}
            																			else {
HXLINE( 145)																				_hx_tmp66 = blended16;
            																			}
HXDLIN( 145)																			::iterMagic::Iimg_obj::set(this258->image,location16,_hx_tmp66);
            																		}
            																	}
            																	else {
HXLINE( 145)																		::Dynamic this291 = this258->image;
HXDLIN( 145)																		int index39;
HXDLIN( 145)																		if (this258->useVirtualPos) {
HXLINE( 145)																			index39 = ::Std_obj::_hx_int(((((( (Float)(y32) ) - this258->virtualY) * ( (Float)(this258->width) )) + x32) - this258->virtualX));
            																		}
            																		else {
HXLINE( 145)																			index39 = ::Std_obj::_hx_int(( (Float)(((y32 * this258->width) + x32)) ));
            																		}
HXDLIN( 145)																		int _hx_tmp67;
HXDLIN( 145)																		if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 145)																			_hx_tmp67 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            																		}
            																		else {
HXLINE( 145)																			_hx_tmp67 = c30;
            																		}
HXDLIN( 145)																		::iterMagic::Iimg_obj::set(this291,index39,_hx_tmp67);
            																	}
            																}
HXLINE(  73)																found3 = true;
            															}
            															else {
HXLINE( 145)																if (found3) {
HXLINE( 145)																	goto _hx_goto_376;
            																}
            															}
            														}
            													}
            													_hx_goto_376:;
            												}
            											}
            										}
HXDLIN( 145)										if ((hasHit7 == true)) {
HXLINE( 145)											 ::pi_xy::algo::HitTri v26 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,cx4,cy4,bx3,by3,cx6,cy6,true);
HXDLIN( 145)											if (hasUndo7) {
HXLINE( 145)												v26->undoImage = undoImage21;
HXDLIN( 145)												v26->undoX = xIter37->start;
HXDLIN( 145)												v26->undoY = yIter37->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  59)							lastX3 = nextX7;
HXLINE(  60)							lastY3 = nextY7;
            						}
            					}
            				}
            			}
HXLINE( 150)			{
HXLINE( 150)				int x33 = ::Std_obj::_hx_int(((cx - rx) - rDif));
HXDLIN( 150)				int y33 = ::Std_obj::_hx_int(((cy - ry) - rDif));
HXDLIN( 150)				bool forceClear9 = false;
HXDLIN( 150)				{
HXLINE( 150)					int _g212 = 0;
HXDLIN( 150)					int _g213 = temp->height;
HXDLIN( 150)					while((_g212 < _g213)){
HXLINE( 150)						_g212 = (_g212 + 1);
HXDLIN( 150)						int dy9 = (_g212 - 1);
HXDLIN( 150)						{
HXLINE( 150)							int _g214 = 0;
HXDLIN( 150)							int _g215 = temp->width;
HXDLIN( 150)							while((_g214 < _g215)){
HXLINE( 150)								_g214 = (_g214 + 1);
HXDLIN( 150)								int dx9 = (_g214 - 1);
HXDLIN( 150)								::Dynamic this292 = temp->image;
HXDLIN( 150)								int index40;
HXDLIN( 150)								if (temp->useVirtualPos) {
HXLINE( 150)									index40 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx9) - temp->virtualX));
            								}
            								else {
HXLINE( 150)									index40 = ::Std_obj::_hx_int(( (Float)(((dy9 * temp->width) + dx9)) ));
            								}
HXDLIN( 150)								int c31 = ::iterMagic::Iimg_obj::get(this292,index40);
HXDLIN( 150)								int col9;
HXDLIN( 150)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 150)									col9 = ((((((c31 >> 24) & 255) << 24) | ((c31 & 255) << 16)) | (((c31 >> 8) & 255) << 8)) | ((c31 >> 16) & 255));
            								}
            								else {
HXLINE( 150)									col9 = c31;
            								}
HXDLIN( 150)								bool _hx_tmp68;
HXDLIN( 150)								if (temp->useMask) {
HXLINE( 150)									_hx_tmp68 = ::hx::IsNotNull( temp->mask );
            								}
            								else {
HXLINE( 150)									_hx_tmp68 = false;
            								}
HXDLIN( 150)								if (_hx_tmp68) {
HXLINE( 150)									 ::pi_xy::ImageStruct this293 = temp->mask;
HXDLIN( 150)									::Dynamic this294 = this293->image;
HXDLIN( 150)									int index41;
HXDLIN( 150)									if (this293->useVirtualPos) {
HXLINE( 150)										index41 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this293->virtualY) * ( (Float)(this293->width) )) + dx9) - this293->virtualX));
            									}
            									else {
HXLINE( 150)										index41 = ::Std_obj::_hx_int(( (Float)(((dy9 * this293->width) + dx9)) ));
            									}
HXDLIN( 150)									int c32 = ::iterMagic::Iimg_obj::get(this294,index41);
HXDLIN( 150)									int v27;
HXDLIN( 150)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 150)										v27 = ((((((c32 >> 24) & 255) << 24) | ((c32 & 255) << 16)) | (((c32 >> 8) & 255) << 8)) | ((c32 >> 16) & 255));
            									}
            									else {
HXLINE( 150)										v27 = c32;
            									}
HXDLIN( 150)									int maskPixel9 = v27;
HXDLIN( 150)									int this295 = col9;
HXDLIN( 150)									if ((maskPixel9 == 0)) {
HXLINE( 150)										col9 = this295;
            									}
            									else {
HXLINE( 150)										Float m09;
HXDLIN( 150)										int this296 = ((maskPixel9 >> 24) & 255);
HXDLIN( 150)										if ((this296 == 0)) {
HXLINE( 150)											m09 = ((Float)0.);
            										}
            										else {
HXLINE( 150)											m09 = (( (Float)(this296) ) / ( (Float)(255) ));
            										}
HXDLIN( 150)										Float m19;
HXDLIN( 150)										int this297 = ((maskPixel9 >> 16) & 255);
HXDLIN( 150)										if ((this297 == 0)) {
HXLINE( 150)											m19 = ((Float)0.);
            										}
            										else {
HXLINE( 150)											m19 = (( (Float)(this297) ) / ( (Float)(255) ));
            										}
HXDLIN( 150)										Float m29;
HXDLIN( 150)										int this298 = ((maskPixel9 >> 8) & 255);
HXDLIN( 150)										if ((this298 == 0)) {
HXLINE( 150)											m29 = ((Float)0.);
            										}
            										else {
HXLINE( 150)											m29 = (( (Float)(this298) ) / ( (Float)(255) ));
            										}
HXDLIN( 150)										Float m39;
HXDLIN( 150)										int this299 = (maskPixel9 & 255);
HXDLIN( 150)										if ((this299 == 0)) {
HXLINE( 150)											m39 = ((Float)0.);
            										}
            										else {
HXLINE( 150)											m39 = (( (Float)(this299) ) / ( (Float)(255) ));
            										}
HXDLIN( 150)										int ch09 = ::Std_obj::_hx_int(((((Float)1.) - m09) * ( (Float)(((this295 >> 24) & 255)) )));
HXDLIN( 150)										int ch19 = ::Std_obj::_hx_int(((((Float)1.) - m19) * ( (Float)(((this295 >> 16) & 255)) )));
HXDLIN( 150)										int ch29 = ::Std_obj::_hx_int(((((Float)1.) - m29) * ( (Float)(((this295 >> 8) & 255)) )));
HXDLIN( 150)										int ch39 = ::Std_obj::_hx_int(((((Float)1.) - m39) * ( (Float)((this295 & 255)) )));
HXDLIN( 150)										col9 = ((((::Math_obj::round((( (Float)(ch09) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch19) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch29) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch39) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 150)								if ((col9 != 0)) {
HXLINE( 150)									int x34 = (x33 + dx9);
HXDLIN( 150)									int y34 = (y33 + dy9);
HXDLIN( 150)									int c33 = col9;
HXDLIN( 150)									bool _hx_tmp69;
HXDLIN( 150)									if ((((c33 >> 24) & 255) < 254)) {
HXLINE( 150)										_hx_tmp69 = this1->transparent;
            									}
            									else {
HXLINE( 150)										_hx_tmp69 = false;
            									}
HXDLIN( 150)									if (_hx_tmp69) {
HXLINE( 150)										int location17;
HXDLIN( 150)										if (this1->useVirtualPos) {
HXLINE( 150)											location17 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - this1->virtualY) * ( (Float)(this1->width) )) + x34) - this1->virtualX));
            										}
            										else {
HXLINE( 150)											location17 = ::Std_obj::_hx_int(( (Float)(((y34 * this1->width) + x34)) ));
            										}
HXDLIN( 150)										int this300 = ::iterMagic::Iimg_obj::get(this1->image,location17);
HXDLIN( 150)										int this301;
HXDLIN( 150)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 150)											this301 = ((((((this300 >> 24) & 255) << 24) | ((this300 & 255) << 16)) | (((this300 >> 8) & 255) << 8)) | ((this300 >> 16) & 255));
            										}
            										else {
HXLINE( 150)											this301 = this300;
            										}
HXDLIN( 150)										Float a121;
HXDLIN( 150)										int this302 = ((this301 >> 24) & 255);
HXDLIN( 150)										if ((this302 == 0)) {
HXLINE( 150)											a121 = ((Float)0.);
            										}
            										else {
HXLINE( 150)											a121 = (( (Float)(this302) ) / ( (Float)(255) ));
            										}
HXDLIN( 150)										Float r119;
HXDLIN( 150)										int this303 = ((this301 >> 16) & 255);
HXDLIN( 150)										if ((this303 == 0)) {
HXLINE( 150)											r119 = ((Float)0.);
            										}
            										else {
HXLINE( 150)											r119 = (( (Float)(this303) ) / ( (Float)(255) ));
            										}
HXDLIN( 150)										Float g119;
HXDLIN( 150)										int this304 = ((this301 >> 8) & 255);
HXDLIN( 150)										if ((this304 == 0)) {
HXLINE( 150)											g119 = ((Float)0.);
            										}
            										else {
HXLINE( 150)											g119 = (( (Float)(this304) ) / ( (Float)(255) ));
            										}
HXDLIN( 150)										Float b124;
HXDLIN( 150)										int this305 = (this301 & 255);
HXDLIN( 150)										if ((this305 == 0)) {
HXLINE( 150)											b124 = ((Float)0.);
            										}
            										else {
HXLINE( 150)											b124 = (( (Float)(this305) ) / ( (Float)(255) ));
            										}
HXDLIN( 150)										Float a220;
HXDLIN( 150)										int this306 = ((col9 >> 24) & 255);
HXDLIN( 150)										if ((this306 == 0)) {
HXLINE( 150)											a220 = ((Float)0.);
            										}
            										else {
HXLINE( 150)											a220 = (( (Float)(this306) ) / ( (Float)(255) ));
            										}
HXDLIN( 150)										Float r218;
HXDLIN( 150)										int this307 = ((col9 >> 16) & 255);
HXDLIN( 150)										if ((this307 == 0)) {
HXLINE( 150)											r218 = ((Float)0.);
            										}
            										else {
HXLINE( 150)											r218 = (( (Float)(this307) ) / ( (Float)(255) ));
            										}
HXDLIN( 150)										Float g218;
HXDLIN( 150)										int this308 = ((col9 >> 8) & 255);
HXDLIN( 150)										if ((this308 == 0)) {
HXLINE( 150)											g218 = ((Float)0.);
            										}
            										else {
HXLINE( 150)											g218 = (( (Float)(this308) ) / ( (Float)(255) ));
            										}
HXDLIN( 150)										Float b222;
HXDLIN( 150)										int this309 = (col9 & 255);
HXDLIN( 150)										if ((this309 == 0)) {
HXLINE( 150)											b222 = ((Float)0.);
            										}
            										else {
HXLINE( 150)											b222 = (( (Float)(this309) ) / ( (Float)(255) ));
            										}
HXDLIN( 150)										Float a319 = (a121 * (( (Float)(1) ) - a220));
HXDLIN( 150)										int r38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r119 * a319) + (r218 * a220))));
HXDLIN( 150)										int g38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g119 * a319) + (g218 * a220))));
HXDLIN( 150)										int b59 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b124 * a319) + (b222 * a220))));
HXDLIN( 150)										int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a319 + a220)));
HXDLIN( 150)										int blended17 = ((((a52 << 24) | (r38 << 16)) | (g38 << 8)) | b59);
HXDLIN( 150)										{
HXLINE( 150)											int _hx_tmp70;
HXDLIN( 150)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 150)												_hx_tmp70 = ((((((blended17 >> 24) & 255) << 24) | ((blended17 & 255) << 16)) | (((blended17 >> 8) & 255) << 8)) | ((blended17 >> 16) & 255));
            											}
            											else {
HXLINE( 150)												_hx_tmp70 = blended17;
            											}
HXDLIN( 150)											::iterMagic::Iimg_obj::set(this1->image,location17,_hx_tmp70);
            										}
            									}
            									else {
HXLINE( 150)										::Dynamic this310 = this1->image;
HXDLIN( 150)										int index42;
HXDLIN( 150)										if (this1->useVirtualPos) {
HXLINE( 150)											index42 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - this1->virtualY) * ( (Float)(this1->width) )) + x34) - this1->virtualX));
            										}
            										else {
HXLINE( 150)											index42 = ::Std_obj::_hx_int(( (Float)(((y34 * this1->width) + x34)) ));
            										}
HXDLIN( 150)										int _hx_tmp71;
HXDLIN( 150)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 150)											_hx_tmp71 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            										}
            										else {
HXLINE( 150)											_hx_tmp71 = c33;
            										}
HXDLIN( 150)										::iterMagic::Iimg_obj::set(this310,index42,_hx_tmp71);
            									}
            								}
            								else {
HXLINE( 150)									if (forceClear9) {
HXLINE( 150)										::Dynamic this311 = this1->image;
HXDLIN( 150)										int x35 = (x33 + dx9);
HXDLIN( 150)										int y35 = (y33 + dy9);
HXDLIN( 150)										int index43;
HXDLIN( 150)										if (this1->useVirtualPos) {
HXLINE( 150)											index43 = ::Std_obj::_hx_int(((((( (Float)(y35) ) - this1->virtualY) * ( (Float)(this1->width) )) + x35) - this1->virtualX));
            										}
            										else {
HXLINE( 150)											index43 = ::Std_obj::_hx_int(( (Float)(((y35 * this1->width) + x35)) ));
            										}
HXDLIN( 150)										::iterMagic::Iimg_obj::set(this311,index43,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 153)		temp = null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC14(LineShape_Impl__obj,radialEllipseTri,(void))


LineShape_Impl__obj::LineShape_Impl__obj()
{
}

bool LineShape_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"ellipseTri") ) { outValue = ellipseTri_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"roundRectangle") ) { outValue = roundRectangle_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"radialEllipseTri") ) { outValue = radialEllipseTri_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *LineShape_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *LineShape_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class LineShape_Impl__obj::__mClass;

static ::String LineShape_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("roundRectangle",01,42,1b,34),
	HX_("ellipseTri",ed,3e,df,4c),
	HX_("radialEllipseTri",ac,ee,5f,59),
	::String(null())
};

void LineShape_Impl__obj::__register()
{
	LineShape_Impl__obj _hx_dummy;
	LineShape_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.imageAbstracts._LineShape.LineShape_Impl_",1e,bb,98,b9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &LineShape_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(LineShape_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< LineShape_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LineShape_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LineShape_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace imageAbstracts
} // end namespace _LineShape
