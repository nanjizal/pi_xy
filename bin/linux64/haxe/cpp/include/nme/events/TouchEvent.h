// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_events_TouchEvent
#define INCLUDED_nme_events_TouchEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_events_MouseEvent
#include <nme/events/MouseEvent.h>
#endif
#ifndef INCLUDED_140af2720004096a
#define INCLUDED_140af2720004096a
#include "nme/Event.h"
#endif
HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,InteractiveObject)
HX_DECLARE_CLASS2(nme,events,Event)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,events,MouseEvent)
HX_DECLARE_CLASS2(nme,events,TouchEvent)
HX_DECLARE_CLASS2(nme,geom,Point)

namespace nme{
namespace events{


class HXCPP_CLASS_ATTRIBUTES TouchEvent_obj : public  ::nme::events::MouseEvent_obj
{
	public:
		typedef  ::nme::events::MouseEvent_obj super;
		typedef TouchEvent_obj OBJ_;
		TouchEvent_obj();

	public:
		enum { _hx_ClassId = 0x6eb4499a };

		void __construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< Float >  __o_in_localX,::hx::Null< Float >  __o_in_localY,::hx::Null< Float >  __o_in_sizeX,::hx::Null< Float >  __o_in_sizeY, ::nme::display::InteractiveObject in_relatedObject,::hx::Null< bool >  __o_in_ctrlKey,::hx::Null< bool >  __o_in_altKey,::hx::Null< bool >  __o_in_shiftKey,::hx::Null< bool >  __o_in_buttonDown,::hx::Null< int >  __o_in_delta,::hx::Null< bool >  __o_in_commandKey,::hx::Null< int >  __o_in_clickCount);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.events.TouchEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.events.TouchEvent"); }
		static ::hx::ObjectPtr< TouchEvent_obj > __new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< Float >  __o_in_localX,::hx::Null< Float >  __o_in_localY,::hx::Null< Float >  __o_in_sizeX,::hx::Null< Float >  __o_in_sizeY, ::nme::display::InteractiveObject in_relatedObject,::hx::Null< bool >  __o_in_ctrlKey,::hx::Null< bool >  __o_in_altKey,::hx::Null< bool >  __o_in_shiftKey,::hx::Null< bool >  __o_in_buttonDown,::hx::Null< int >  __o_in_delta,::hx::Null< bool >  __o_in_commandKey,::hx::Null< int >  __o_in_clickCount);
		static ::hx::ObjectPtr< TouchEvent_obj > __alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< Float >  __o_in_localX,::hx::Null< Float >  __o_in_localY,::hx::Null< Float >  __o_in_sizeX,::hx::Null< Float >  __o_in_sizeY, ::nme::display::InteractiveObject in_relatedObject,::hx::Null< bool >  __o_in_ctrlKey,::hx::Null< bool >  __o_in_altKey,::hx::Null< bool >  __o_in_shiftKey,::hx::Null< bool >  __o_in_buttonDown,::hx::Null< int >  __o_in_delta,::hx::Null< bool >  __o_in_commandKey,::hx::Null< int >  __o_in_clickCount);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TouchEvent_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TouchEvent",fb,af,06,66); }

		static void __boot();
		static ::String TOUCH_BEGIN;
		static ::String TOUCH_END;
		static ::String TOUCH_MOVE;
		static ::String TOUCH_OUT;
		static ::String TOUCH_OVER;
		static ::String TOUCH_ROLL_OUT;
		static ::String TOUCH_ROLL_OVER;
		static ::String TOUCH_TAP;
		static  ::nme::events::TouchEvent nmeCreate(::String inType,::cpp::Pointer<  nme::Event > inEvent, ::nme::geom::Point inLocal, ::nme::display::InteractiveObject inTarget,Float sizeX,Float sizeY);
		static ::Dynamic nmeCreate_dyn();

		bool isPrimaryTouchPoint;
		int touchPointID;
		Float sizeX;
		Float sizeY;
		 ::nme::events::MouseEvent nmeCreateSimilar(::String inType, ::nme::display::InteractiveObject related, ::nme::display::InteractiveObject targ);

};

} // end namespace nme
} // end namespace events

#endif /* INCLUDED_nme_events_TouchEvent */ 
