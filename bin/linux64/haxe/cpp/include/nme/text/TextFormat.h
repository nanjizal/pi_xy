// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_text_TextFormat
#define INCLUDED_nme_text_TextFormat

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_423358ae8345598b_36_new)
HX_DECLARE_CLASS2(nme,text,TextFormat)

namespace nme{
namespace text{


class HXCPP_CLASS_ATTRIBUTES TextFormat_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TextFormat_obj OBJ_;
		TextFormat_obj();

	public:
		enum { _hx_ClassId = 0x724cfb97 };

		void __construct(::String in_font, ::Dynamic in_size, ::Dynamic in_color, ::Dynamic in_bold, ::Dynamic in_italic, ::Dynamic in_underline,::String in_url,::String in_target,::String in_align, ::Dynamic in_leftMargin, ::Dynamic in_rightMargin, ::Dynamic in_indent, ::Dynamic in_leading);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.text.TextFormat")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.text.TextFormat"); }

		inline static ::hx::ObjectPtr< TextFormat_obj > __new(::String in_font, ::Dynamic in_size, ::Dynamic in_color, ::Dynamic in_bold, ::Dynamic in_italic, ::Dynamic in_underline,::String in_url,::String in_target,::String in_align, ::Dynamic in_leftMargin, ::Dynamic in_rightMargin, ::Dynamic in_indent, ::Dynamic in_leading) {
			::hx::ObjectPtr< TextFormat_obj > __this = new TextFormat_obj();
			__this->__construct(in_font,in_size,in_color,in_bold,in_italic,in_underline,in_url,in_target,in_align,in_leftMargin,in_rightMargin,in_indent,in_leading);
			return __this;
		}

		inline static ::hx::ObjectPtr< TextFormat_obj > __alloc(::hx::Ctx *_hx_ctx,::String in_font, ::Dynamic in_size, ::Dynamic in_color, ::Dynamic in_bold, ::Dynamic in_italic, ::Dynamic in_underline,::String in_url,::String in_target,::String in_align, ::Dynamic in_leftMargin, ::Dynamic in_rightMargin, ::Dynamic in_indent, ::Dynamic in_leading) {
			TextFormat_obj *__this = (TextFormat_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TextFormat_obj), true, "nme.text.TextFormat"));
			*(void **)__this = TextFormat_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_423358ae8345598b_36_new)
HXLINE(  37)		( ( ::nme::text::TextFormat)(__this) )->font = in_font;
HXLINE(  38)		( ( ::nme::text::TextFormat)(__this) )->size = in_size;
HXLINE(  39)		( ( ::nme::text::TextFormat)(__this) )->color = in_color;
HXLINE(  40)		( ( ::nme::text::TextFormat)(__this) )->bold = in_bold;
HXLINE(  41)		( ( ::nme::text::TextFormat)(__this) )->italic = in_italic;
HXLINE(  42)		( ( ::nme::text::TextFormat)(__this) )->underline = in_underline;
HXLINE(  43)		( ( ::nme::text::TextFormat)(__this) )->url = in_url;
HXLINE(  44)		( ( ::nme::text::TextFormat)(__this) )->target = in_target;
HXLINE(  45)		( ( ::nme::text::TextFormat)(__this) )->align = in_align;
HXLINE(  46)		( ( ::nme::text::TextFormat)(__this) )->leftMargin = in_leftMargin;
HXLINE(  47)		( ( ::nme::text::TextFormat)(__this) )->rightMargin = in_rightMargin;
HXLINE(  48)		( ( ::nme::text::TextFormat)(__this) )->indent = in_indent;
HXLINE(  49)		( ( ::nme::text::TextFormat)(__this) )->leading = in_leading;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TextFormat_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TextFormat",e4,13,30,2b); }

		static void __boot();
		static int OUTLINE_END_SQUARE;
		static int OUTLINE_EDGE_BEVEL;
		static int OUTLINE_EDGE_MITER;
		::String align;
		 ::Dynamic blockIndent;
		 ::Dynamic bold;
		 ::Dynamic bullet;
		 ::Dynamic color;
		::String display;
		::String font;
		 ::Dynamic indent;
		 ::Dynamic italic;
		 ::Dynamic kerning;
		 ::Dynamic leading;
		 ::Dynamic leftMargin;
		 ::Dynamic letterSpacing;
		 ::Dynamic rightMargin;
		 ::Dynamic size;
		 ::Dynamic outline;
		 ::Dynamic outlineFlags;
		 ::Dynamic outlineMiterLimit;
		::Array< int > tabStops;
		::String target;
		 ::Dynamic underline;
		::String url;
};

} // end namespace nme
} // end namespace text

#endif /* INCLUDED_nme_text_TextFormat */ 
