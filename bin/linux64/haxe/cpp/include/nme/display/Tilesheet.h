// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_display_Tilesheet
#define INCLUDED_nme_display_Tilesheet

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nme,display,BitmapData)
HX_DECLARE_CLASS2(nme,display,Graphics)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,Tilesheet)
HX_DECLARE_CLASS2(nme,geom,Point)
HX_DECLARE_CLASS2(nme,geom,Rectangle)

namespace nme{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Tilesheet_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Tilesheet_obj OBJ_;
		Tilesheet_obj();

	public:
		enum { _hx_ClassId = 0x36a9e515 };

		void __construct( ::nme::display::BitmapData inImage,::Array< ::Dynamic> rects, ::nme::geom::Point inPoint);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.display.Tilesheet")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.display.Tilesheet"); }
		static ::hx::ObjectPtr< Tilesheet_obj > __new( ::nme::display::BitmapData inImage,::Array< ::Dynamic> rects, ::nme::geom::Point inPoint);
		static ::hx::ObjectPtr< Tilesheet_obj > __alloc(::hx::Ctx *_hx_ctx, ::nme::display::BitmapData inImage,::Array< ::Dynamic> rects, ::nme::geom::Point inPoint);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Tilesheet_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Tilesheet",91,b0,20,16); }

		static void __boot();
		static int TILE_SCALE;
		static int TILE_ROTATION;
		static int TILE_RGB;
		static int TILE_ALPHA;
		static int TILE_TRANS_2x2;
		static int TILE_RECT;
		static int TILE_ORIGIN;
		static int TILE_NO_ID;
		static int TILE_MOUSE_ENABLE;
		static int TILE_FIXED_SIZE;
		static int TILE_BLEND_NORMAL;
		static int TILE_BLEND_ADD;
		static int TILE_BLEND_SCREEN;
		static int TILE_BLEND_MULTIPLY;
		static int TILE_BLEND_SUBTRACT;
		static ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > nme_tilesheet_create;
		static Dynamic nme_tilesheet_create_dyn() { return nme_tilesheet_create;}
		static ::cpp::Function< int  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > nme_tilesheet_add_rect;
		static Dynamic nme_tilesheet_add_rect_dyn() { return nme_tilesheet_add_rect;}
		static ::cpp::Function< void  ( ::hx::Object *,int, ::hx::Object *) > nme_tilesheet_get_rect;
		static Dynamic nme_tilesheet_get_rect_dyn() { return nme_tilesheet_get_rect;}
		 ::nme::display::BitmapData nmeBitmap;
		int tileCount;
		 ::Dynamic nmeHandle;
		int addTileRect( ::nme::geom::Rectangle rectangle, ::nme::geom::Point centerPoint);
		::Dynamic addTileRect_dyn();

		 ::nme::geom::Rectangle getTileRect(int index, ::nme::geom::Rectangle result);
		::Dynamic getTileRect_dyn();

		void drawTiles( ::nme::display::Graphics graphics, ::Dynamic tileData,::hx::Null< bool >  smooth,::hx::Null< int >  flags,::hx::Null< int >  count);
		::Dynamic drawTiles_dyn();

		 ::nme::geom::Rectangle getRect(int index);
		::Dynamic getRect_dyn();

		int addRect( ::nme::geom::Rectangle rectangle);
		::Dynamic addRect_dyn();

};

} // end namespace nme
} // end namespace display

#endif /* INCLUDED_nme_display_Tilesheet */ 
