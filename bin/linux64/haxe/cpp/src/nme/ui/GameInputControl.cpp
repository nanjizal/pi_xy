// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_ui_GameInputControl
#include <nme/ui/GameInputControl.h>
#endif
#ifndef INCLUDED_nme_ui_GameInputDevice
#include <nme/ui/GameInputDevice.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c865ea1b7f347e14_18_new,"nme.ui.GameInputControl","new",0x7b31c649,"nme.ui.GameInputControl.new","nme/ui/GameInputControl.hx",18,0x9914c2a7)
HX_LOCAL_STACK_FRAME(_hx_pos_c865ea1b7f347e14_30_setButtonState,"nme.ui.GameInputControl","setButtonState",0xecdb62f4,"nme.ui.GameInputControl.setButtonState","nme/ui/GameInputControl.hx",30,0x9914c2a7)
namespace nme{
namespace ui{

void GameInputControl_obj::__construct( ::nme::ui::GameInputDevice inDevice,::String inId,Float inMinValue,Float inMaxValue,::hx::Null< Float >  __o_inValue){
            		Float inValue = __o_inValue.Default(0);
            	HX_STACKFRAME(&_hx_pos_c865ea1b7f347e14_18_new)
HXLINE(  19)		super::__construct(null());
HXLINE(  20)		this->device = inDevice;
HXLINE(  21)		this->id = inId;
HXLINE(  22)		this->minValue = inMinValue;
HXLINE(  23)		this->maxValue = inMaxValue;
HXLINE(  24)		this->value = inValue;
HXLINE(  25)		this->hasListeners = false;
            	}

Dynamic GameInputControl_obj::__CreateEmpty() { return new GameInputControl_obj; }

void *GameInputControl_obj::_hx_vtable = 0;

Dynamic GameInputControl_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GameInputControl_obj > _hx_result = new GameInputControl_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool GameInputControl_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x169017a6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x169017a6;
	} else {
		return inClassId==(int)0x22f90f9b;
	}
}

void GameInputControl_obj::setButtonState(bool down){
            	HX_GC_STACKFRAME(&_hx_pos_c865ea1b7f347e14_30_setButtonState)
HXLINE(  31)		Float _hx_tmp;
HXDLIN(  31)		if (down) {
HXLINE(  31)			_hx_tmp = ( (Float)(1) );
            		}
            		else {
HXLINE(  31)			_hx_tmp = ( (Float)(0) );
            		}
HXDLIN(  31)		this->value = _hx_tmp;
HXLINE(  32)		if (this->mightRespondTo(HX_("change",70,91,72,b7))) {
HXLINE(  33)			this->dispatchEvent( ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("change",70,91,72,b7),null(),null()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(GameInputControl_obj,setButtonState,(void))


::hx::ObjectPtr< GameInputControl_obj > GameInputControl_obj::__new( ::nme::ui::GameInputDevice inDevice,::String inId,Float inMinValue,Float inMaxValue,::hx::Null< Float >  __o_inValue) {
	::hx::ObjectPtr< GameInputControl_obj > __this = new GameInputControl_obj();
	__this->__construct(inDevice,inId,inMinValue,inMaxValue,__o_inValue);
	return __this;
}

::hx::ObjectPtr< GameInputControl_obj > GameInputControl_obj::__alloc(::hx::Ctx *_hx_ctx, ::nme::ui::GameInputDevice inDevice,::String inId,Float inMinValue,Float inMaxValue,::hx::Null< Float >  __o_inValue) {
	GameInputControl_obj *__this = (GameInputControl_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GameInputControl_obj), true, "nme.ui.GameInputControl"));
	*(void **)__this = GameInputControl_obj::_hx_vtable;
	__this->__construct(inDevice,inId,inMinValue,inMaxValue,__o_inValue);
	return __this;
}

GameInputControl_obj::GameInputControl_obj()
{
}

void GameInputControl_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameInputControl);
	HX_MARK_MEMBER_NAME(device,"device");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(maxValue,"maxValue");
	HX_MARK_MEMBER_NAME(minValue,"minValue");
	HX_MARK_MEMBER_NAME(value,"value");
	HX_MARK_MEMBER_NAME(hasListeners,"hasListeners");
	 ::nme::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GameInputControl_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(device,"device");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(maxValue,"maxValue");
	HX_VISIT_MEMBER_NAME(minValue,"minValue");
	HX_VISIT_MEMBER_NAME(value,"value");
	HX_VISIT_MEMBER_NAME(hasListeners,"hasListeners");
	 ::nme::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GameInputControl_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"device") ) { return ::hx::Val( device ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxValue") ) { return ::hx::Val( maxValue ); }
		if (HX_FIELD_EQ(inName,"minValue") ) { return ::hx::Val( minValue ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"hasListeners") ) { return ::hx::Val( hasListeners ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setButtonState") ) { return ::hx::Val( setButtonState_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GameInputControl_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< ::String >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"device") ) { device=inValue.Cast<  ::nme::ui::GameInputDevice >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"maxValue") ) { maxValue=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minValue") ) { minValue=inValue.Cast< Float >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"hasListeners") ) { hasListeners=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GameInputControl_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("device",96,dc,77,71));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("maxValue",2d,d2,d5,db));
	outFields->push(HX_("minValue",7f,ec,ef,28));
	outFields->push(HX_("value",71,7f,b8,31));
	outFields->push(HX_("hasListeners",c5,4a,e0,80));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GameInputControl_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::nme::ui::GameInputDevice */ ,(int)offsetof(GameInputControl_obj,device),HX_("device",96,dc,77,71)},
	{::hx::fsString,(int)offsetof(GameInputControl_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsFloat,(int)offsetof(GameInputControl_obj,maxValue),HX_("maxValue",2d,d2,d5,db)},
	{::hx::fsFloat,(int)offsetof(GameInputControl_obj,minValue),HX_("minValue",7f,ec,ef,28)},
	{::hx::fsFloat,(int)offsetof(GameInputControl_obj,value),HX_("value",71,7f,b8,31)},
	{::hx::fsBool,(int)offsetof(GameInputControl_obj,hasListeners),HX_("hasListeners",c5,4a,e0,80)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GameInputControl_obj_sStaticStorageInfo = 0;
#endif

static ::String GameInputControl_obj_sMemberFields[] = {
	HX_("device",96,dc,77,71),
	HX_("id",db,5b,00,00),
	HX_("maxValue",2d,d2,d5,db),
	HX_("minValue",7f,ec,ef,28),
	HX_("value",71,7f,b8,31),
	HX_("hasListeners",c5,4a,e0,80),
	HX_("setButtonState",3d,72,74,79),
	::String(null()) };

::hx::Class GameInputControl_obj::__mClass;

void GameInputControl_obj::__register()
{
	GameInputControl_obj _hx_dummy;
	GameInputControl_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.ui.GameInputControl",d7,ed,d4,1f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GameInputControl_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GameInputControl_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameInputControl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameInputControl_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace nme
} // end namespace ui
