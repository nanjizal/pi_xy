// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Resource
#include <haxe/Resource.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_iterators_ArrayIterator
#include <haxe/iterators/ArrayIterator.h>
#endif
#ifndef INCLUDED_nme_AlphaMode
#include <nme/AlphaMode.h>
#endif
#ifndef INCLUDED_nme_AssetInfo
#include <nme/AssetInfo.h>
#endif
#ifndef INCLUDED_nme_AssetLib
#include <nme/AssetLib.h>
#endif
#ifndef INCLUDED_nme_AssetType
#include <nme/AssetType.h>
#endif
#ifndef INCLUDED_nme_Assets
#include <nme/Assets.h>
#endif
#ifndef INCLUDED_nme_Cache
#include <nme/Cache.h>
#endif
#ifndef INCLUDED_nme_display_BitmapData
#include <nme/display/BitmapData.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObjectContainer
#include <nme/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_display_MovieClip
#include <nme/display/MovieClip.h>
#endif
#ifndef INCLUDED_nme_display_Sprite
#include <nme/display/Sprite.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_media_Sound
#include <nme/media/Sound.h>
#endif
#ifndef INCLUDED_nme_media_SoundLoaderContext
#include <nme/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_nme_net_URLRequest
#include <nme/net/URLRequest.h>
#endif
#ifndef INCLUDED_nme_text_Font
#include <nme/text/Font.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_71_fromAssetList,"nme.Assets","fromAssetList",0xf33ea0c1,"nme.Assets.fromAssetList","nme/Assets.hx",71,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_97_loadAssetList,"nme.Assets","loadAssetList",0x01bb3485,"nme.Assets.loadAssetList","nme/Assets.hx",97,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_124_loadScriptAssetList,"nme.Assets","loadScriptAssetList",0xcec8583a,"nme.Assets.loadScriptAssetList","nme/Assets.hx",124,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_133_loadScriptAssetList2,"nme.Assets","loadScriptAssetList2",0x2084dab8,"nme.Assets.loadScriptAssetList2","nme/Assets.hx",133,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_144_addLibraryFactory,"nme.Assets","addLibraryFactory",0xc47dacad,"nme.Assets.addLibraryFactory","nme/Assets.hx",144,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_148_getAssetPath,"nme.Assets","getAssetPath",0x5b6129c2,"nme.Assets.getAssetPath","nme/Assets.hx",148,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_152_getPath,"nme.Assets","getPath",0x7046aab8,"nme.Assets.getPath","nme/Assets.hx",152,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_155_addEventListener,"nme.Assets","addEventListener",0x9694e2d0,"nme.Assets.addEventListener","nme/Assets.hx",155,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_160_isEmbedded,"nme.Assets","isEmbedded",0x57d30e57,"nme.Assets.isEmbedded","nme/Assets.hx",160,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_167_getResource,"nme.Assets","getResource",0x2378a761,"nme.Assets.getResource","nme/Assets.hx",167,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_193_isLocal,"nme.Assets","isLocal",0x68e8827e,"nme.Assets.isLocal","nme/Assets.hx",193,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_205_list,"nme.Assets","list",0x416ebae1,"nme.Assets.list","nme/Assets.hx",205,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_220_removeBitmapData,"nme.Assets","removeBitmapData",0x929aaa20,"nme.Assets.removeBitmapData","nme/Assets.hx",220,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_229_trySetCache,"nme.Assets","trySetCache",0xcdebe378,"nme.Assets.trySetCache","nme/Assets.hx",229,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_235_noId,"nme.Assets","noId",0x42c590ff,"nme.Assets.noId","nme/Assets.hx",235,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_240_badType,"nme.Assets","badType",0xd33bac7c,"nme.Assets.badType","nme/Assets.hx",240,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_246_hasBitmapData,"nme.Assets","hasBitmapData",0x211366d0,"nme.Assets.hasBitmapData","nme/Assets.hx",246,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_253_getInfo,"nme.Assets","getInfo",0x6baffd81,"nme.Assets.getInfo","nme/Assets.hx",253,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_290_makeBitmapData,"nme.Assets","makeBitmapData",0x986ee98a,"nme.Assets.makeBitmapData","nme/Assets.hx",290,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_305_getBitmapData,"nme.Assets","getBitmapData",0x632f0b0c,"nme.Assets.getBitmapData","nme/Assets.hx",305,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_359_getImage,"nme.Assets","getImage",0xcda0cae8,"nme.Assets.getImage","nme/Assets.hx",359,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_363_hasBytes,"nme.Assets","hasBytes",0xfa50eeb4,"nme.Assets.hasBytes","nme/Assets.hx",363,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_369_exists,"nme.Assets","exists",0x56a2a31f,"nme.Assets.exists","nme/Assets.hx",369,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_386_getBytes,"nme.Assets","getBytes",0xcdcfb3f8,"nme.Assets.getBytes","nme/Assets.hx",386,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_397_getBytesInfo,"nme.Assets","getBytesInfo",0x17197486,"nme.Assets.getBytesInfo","nme/Assets.hx",397,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_454_hasFont,"nme.Assets","hasFont",0x667693a6,"nme.Assets.hasFont","nme/Assets.hx",454,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_466_getFont,"nme.Assets","getFont",0x69b522e2,"nme.Assets.getFont","nme/Assets.hx",466,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_498_hasSound,"nme.Assets","hasSound",0xbd857318,"nme.Assets.hasSound","nme/Assets.hx",498,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_513_getSound,"nme.Assets","getSound",0x9104385c,"nme.Assets.getSound","nme/Assets.hx",513,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_563_getMusic,"nme.Assets","getMusic",0x20927c32,"nme.Assets.getMusic","nme/Assets.hx",563,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_579_hasText,"nme.Assets","hasText",0x6fb00284,"nme.Assets.hasText","nme/Assets.hx",579,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_581_hasString,"nme.Assets","hasString",0xf640c268,"nme.Assets.hasString","nme/Assets.hx",581,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_591_getText,"nme.Assets","getText",0x72ee91c0,"nme.Assets.getText","nme/Assets.hx",591,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_613_getString,"nme.Assets","getString",0x31ae98a4,"nme.Assets.getString","nme/Assets.hx",613,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_617_parseLibId,"nme.Assets","parseLibId",0x9d9bd410,"nme.Assets.parseLibId","nme/Assets.hx",617,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_641_loadLibrary,"nme.Assets","loadLibrary",0xfaf26d52,"nme.Assets.loadLibrary","nme/Assets.hx",641,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_625_loadLibrary,"nme.Assets","loadLibrary",0xfaf26d52,"nme.Assets.loadLibrary","nme/Assets.hx",625,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_649_getLoadedLibrary,"nme.Assets","getLoadedLibrary",0x8d98c203,"nme.Assets.getLoadedLibrary","nme/Assets.hx",649,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_667_getLoadedLibrary,"nme.Assets","getLoadedLibrary",0x8d98c203,"nme.Assets.getLoadedLibrary","nme/Assets.hx",667,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_674_getMovieClip,"nme.Assets","getMovieClip",0xc483f8ad,"nme.Assets.getMovieClip","nme/Assets.hx",674,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_716_initialize,"nme.Assets","initialize",0xeb7d1413,"nme.Assets.initialize","nme/Assets.hx",716,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_49_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",49,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_50_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",50,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_51_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",51,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_53_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",53,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_54_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",54,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_55_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",55,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_56_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",56,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_57_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",57,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_61_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",61,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_64_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",64,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_66_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",66,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_689_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",689,0x846abab2)
HX_LOCAL_STACK_FRAME(_hx_pos_215d685cb5e5e252_694_boot,"nme.Assets","boot",0x3ad722b5,"nme.Assets.boot","nme/Assets.hx",694,0x846abab2)
namespace nme{

void Assets_obj::__construct() { }

Dynamic Assets_obj::__CreateEmpty() { return new Assets_obj; }

void *Assets_obj::_hx_vtable = 0;

Dynamic Assets_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Assets_obj > _hx_result = new Assets_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Assets_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0d6351e9;
}

int Assets_obj::UNCACHED;

int Assets_obj::WEAK_CACHE;

int Assets_obj::STRONG_CACHE;

 ::haxe::ds::StringMap Assets_obj::info;

 ::haxe::ds::StringMap Assets_obj::pathMapper;

 ::haxe::ds::StringMap Assets_obj::byteFactory;

 ::haxe::ds::StringMap Assets_obj::libraryFactories;

 ::haxe::ds::StringMap Assets_obj::loadedLibraries;

int Assets_obj::cacheMode;

::String Assets_obj::scriptBase;

 ::nme::Cache Assets_obj::cache;

void Assets_obj::fromAssetList(::String assetList,bool inAddScriptBase,bool inAlphaToo){
            	HX_GC_STACKFRAME(&_hx_pos_215d685cb5e5e252_71_fromAssetList)
HXLINE(  72)		::Array< ::String > lines = null();
HXLINE(  73)		if ((assetList.indexOf(HX_("\r",0d,00,00,00),null()) >= 0)) {
HXLINE(  74)			lines = assetList.split(HX_("\r\n",5d,0b,00,00));
            		}
            		else {
HXLINE(  76)			lines = assetList.split(HX_("\n",0a,00,00,00));
            		}
HXLINE(  78)		int i = 1;
HXLINE(  79)		while((i < (lines->length - 1))){
HXLINE(  81)			::String id = lines->__get(i);
HXLINE(  82)			::String resourceName = lines->__get((i + 1));
HXLINE(  83)			 ::nme::AssetType type = ::Type_obj::createEnum(::hx::ClassOf< ::nme::AssetType >(),lines->__get((i + 2)),null());
HXLINE(  84)			bool isResource = (lines->__get((i + 3)) != HX_("false",a3,35,4f,fb));
HXLINE(  85)			::String className = lines->__get((i + 4));
HXLINE(  86)			if ((className == HX_("null",87,9e,0e,49))) {
HXLINE(  87)				className = null();
            			}
HXLINE(  88)			bool _hx_tmp;
HXDLIN(  88)			if (inAddScriptBase) {
HXLINE(  88)				_hx_tmp = !(isResource);
            			}
            			else {
HXLINE(  88)				_hx_tmp = false;
            			}
HXDLIN(  88)			if (_hx_tmp) {
HXLINE(  89)				resourceName = (::nme::Assets_obj::scriptBase + resourceName);
            			}
HXLINE(  90)			 ::nme::AlphaMode alphaMode;
HXDLIN(  90)			if (inAlphaToo) {
HXLINE(  90)				alphaMode = ::Type_obj::createEnum(::hx::ClassOf< ::nme::AlphaMode >(),lines->__get((i + 5)),null());
            			}
            			else {
HXLINE(  90)				alphaMode = ::nme::AlphaMode_obj::AlphaDefault_dyn();
            			}
HXLINE(  91)			 ::haxe::ds::StringMap _hx_tmp1 = ::nme::Assets_obj::info;
HXDLIN(  91)			_hx_tmp1->set(id, ::nme::AssetInfo_obj::__alloc( HX_CTX ,resourceName,type,isResource,className,id,alphaMode));
HXLINE(  92)			int i1;
HXDLIN(  92)			if (inAlphaToo) {
HXLINE(  92)				i1 = 6;
            			}
            			else {
HXLINE(  92)				i1 = 5;
            			}
HXDLIN(  92)			i = (i + i1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,fromAssetList,(void))

void Assets_obj::loadAssetList(){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_97_loadAssetList)
HXLINE( 116)		::String assetList = ::haxe::Resource_obj::getString(HX_("haxe/nme/assets.txt",77,73,fb,b9));
HXLINE( 117)		if (::hx::IsNotNull( assetList )) {
HXLINE( 118)			::nme::Assets_obj::fromAssetList(assetList,false,true);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,loadAssetList,(void))

void Assets_obj::loadScriptAssetList(){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_124_loadScriptAssetList)
HXLINE( 125)		::String assetList = ::haxe::Resource_obj::getString(HX_("haxe/nme/scriptassets.txt",c2,3e,4d,86));
HXLINE( 126)		if (::hx::IsNotNull( assetList )) {
HXLINE( 127)			::nme::Assets_obj::fromAssetList(assetList,true,false);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,loadScriptAssetList,(void))

void Assets_obj::loadScriptAssetList2(){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_133_loadScriptAssetList2)
HXLINE( 134)		::String assetList = ::haxe::Resource_obj::getString(HX_("haxe/nme/scriptassets.txt",c2,3e,4d,86));
HXLINE( 135)		if (::hx::IsNotNull( assetList )) {
HXLINE( 136)			::nme::Assets_obj::fromAssetList(assetList,true,true);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,loadScriptAssetList2,(void))

void Assets_obj::addLibraryFactory( ::nme::AssetType inType, ::Dynamic inFactory){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_144_addLibraryFactory)
HXDLIN( 144)		 ::haxe::ds::StringMap _hx_tmp = ::nme::Assets_obj::libraryFactories;
HXDLIN( 144)		_hx_tmp->set(::Std_obj::string(inType),inFactory);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,addLibraryFactory,(void))

::String Assets_obj::getAssetPath(::String inName){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_148_getAssetPath)
HXLINE( 149)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(inName);
HXLINE( 150)		if (::hx::IsNull( i )) {
HXLINE( 150)			return null();
            		}
            		else {
HXLINE( 150)			return i->path;
            		}
HXDLIN( 150)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getAssetPath,return )

::String Assets_obj::getPath(::String inName){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_152_getPath)
HXDLIN( 152)		return ::nme::Assets_obj::getAssetPath(inName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getPath,return )

void Assets_obj::addEventListener(::String type, ::Dynamic listener,::hx::Null< bool >  __o_useCapture,::hx::Null< int >  __o_priority,::hx::Null< bool >  __o_useWeakReference){
            		bool useCapture = __o_useCapture.Default(false);
            		int priority = __o_priority.Default(0);
            		bool useWeakReference = __o_useWeakReference.Default(false);
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_155_addEventListener)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Assets_obj,addEventListener,(void))

bool Assets_obj::isEmbedded(::String inName){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_160_isEmbedded)
HXLINE( 161)		if (::hx::IsNotNull( ::nme::Assets_obj::byteFactory->get(inName) )) {
HXLINE( 162)			return true;
            		}
HXLINE( 163)		return (::haxe::Resource_obj::listNames()->indexOf(inName,null()) >= 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,isEmbedded,return )

 ::nme::utils::ByteArray Assets_obj::getResource(::String inName){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_167_getResource)
HXLINE( 168)		 ::haxe::io::Bytes bytes = ::haxe::Resource_obj::getBytes(inName);
HXLINE( 169)		if (::hx::IsNull( bytes )) {
HXLINE( 171)			 ::Dynamic factory = ::nme::Assets_obj::byteFactory->get(inName);
HXLINE( 172)			if (::hx::IsNotNull( factory )) {
HXLINE( 173)				return ( ( ::nme::utils::ByteArray)(factory()) );
            			}
            		}
HXLINE( 175)		if (::hx::IsNull( bytes )) {
HXLINE( 177)			::haxe::Log_obj::trace(((HX_("[nme.Assets] missing binary resource '",31,2c,08,7e) + inName) + HX_("'",27,00,00,00)),::hx::SourceInfo(HX_("nme/Assets.hx",b2,ba,6a,84),177,HX_("nme.Assets",cb,50,23,fb),HX_("getResource",84,1f,94,38)));
HXLINE( 178)			{
HXLINE( 178)				 ::Dynamic key = ::nme::Assets_obj::info->keys();
HXDLIN( 178)				while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 178)					::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 179)					 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 179)					::String _hx_tmp1 = ((((HX_(" ",20,00,00,00) + key1) + HX_(" -> ",6f,2f,49,15)) + ( ( ::nme::AssetInfo)(::nme::Assets_obj::info->get(key1)) )->path) + HX_(" ",20,00,00,00));
HXDLIN( 179)					::String _hx_tmp2 = (_hx_tmp1 + ::Std_obj::string(( ( ::nme::AssetInfo)(::nme::Assets_obj::info->get(key1)) )->isResource));
HXDLIN( 179)					_hx_tmp(_hx_tmp2,::hx::SourceInfo(HX_("nme/Assets.hx",b2,ba,6a,84),179,HX_("nme.Assets",cb,50,23,fb),HX_("getResource",84,1f,94,38)));
            				}
            			}
HXLINE( 180)			::haxe::Log_obj::trace(HX_("---",cd,4c,22,00),::hx::SourceInfo(HX_("nme/Assets.hx",b2,ba,6a,84),180,HX_("nme.Assets",cb,50,23,fb),HX_("getResource",84,1f,94,38)));
HXLINE( 181)			 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN( 181)			::String _hx_tmp4 = (HX_("All resources: ",2c,f0,a7,43) + ::Std_obj::string(::haxe::Resource_obj::listNames()));
HXDLIN( 181)			_hx_tmp3(_hx_tmp4,::hx::SourceInfo(HX_("nme/Assets.hx",b2,ba,6a,84),181,HX_("nme.Assets",cb,50,23,fb),HX_("getResource",84,1f,94,38)));
            		}
HXLINE( 183)		if (::hx::IsNull( bytes )) {
HXLINE( 184)			return null();
            		}
HXLINE( 188)		return ::nme::utils::ByteArray_obj::fromBytes(bytes);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getResource,return )

bool Assets_obj::isLocal(::String inId, ::nme::AssetType inType){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_193_isLocal)
HXLINE( 194)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(inId);
HXLINE( 195)		if (::hx::IsNull( i )) {
HXLINE( 196)			return false;
            		}
HXLINE( 200)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,isLocal,return )

 ::Dynamic Assets_obj::list( ::nme::AssetType inFilter){
            	HX_GC_STACKFRAME(&_hx_pos_215d685cb5e5e252_205_list)
HXLINE( 206)		if (::hx::IsNull( inFilter )) {
HXLINE( 207)			return ::nme::Assets_obj::info->keys();
            		}
HXLINE( 209)		::Array< ::String > result = ::Array_obj< ::String >::__new();
HXLINE( 210)		{
HXLINE( 210)			 ::Dynamic id = ::nme::Assets_obj::info->keys();
HXDLIN( 210)			while(( (bool)(id->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 210)				::String id1 = ( (::String)(id->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 212)				 ::nme::AssetInfo asset = ( ( ::nme::AssetInfo)(::nme::Assets_obj::info->get(id1)) );
HXLINE( 213)				if (::hx::IsPointerEq( asset->type,inFilter )) {
HXLINE( 214)					result->push(id1);
            				}
            			}
            		}
HXLINE( 216)		return  ::haxe::iterators::ArrayIterator_obj::__alloc( HX_CTX ,result);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,list,return )

void Assets_obj::removeBitmapData(::String inId){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_220_removeBitmapData)
HXLINE( 221)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(inId);
HXLINE( 222)		if (::hx::IsNotNull( i )) {
HXLINE( 223)			i->uncache();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,removeBitmapData,(void))

void Assets_obj::trySetCache( ::nme::AssetInfo info, ::Dynamic useCache, ::Dynamic data){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_229_trySetCache)
HXDLIN( 229)		bool _hx_tmp;
HXDLIN( 229)		if (::hx::IsNotEq( useCache,false )) {
HXDLIN( 229)			if (::hx::IsNotEq( useCache,true )) {
HXDLIN( 229)				_hx_tmp = (::nme::Assets_obj::cacheMode != 0);
            			}
            			else {
HXDLIN( 229)				_hx_tmp = true;
            			}
            		}
            		else {
HXDLIN( 229)			_hx_tmp = false;
            		}
HXDLIN( 229)		if (_hx_tmp) {
HXLINE( 230)			info->setCache(data,(::nme::Assets_obj::cacheMode != 2));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Assets_obj,trySetCache,(void))

void Assets_obj::noId(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_235_noId)
HXDLIN( 235)		::haxe::Log_obj::trace((((HX_("[nme.Assets] missing asset '",d4,55,85,21) + id) + HX_("' of type ",76,2b,29,ee)) + type),::hx::SourceInfo(HX_("nme/Assets.hx",b2,ba,6a,84),235,HX_("nme.Assets",cb,50,23,fb),HX_("noId",7c,f2,09,49)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,noId,(void))

void Assets_obj::badType(::String id,::String type){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_240_badType)
HXLINE( 241)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(id);
HXLINE( 242)		 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN( 242)		::String _hx_tmp1 = (((((HX_("[nme.Assets] asset '",8e,8d,a3,2d) + id) + HX_("' is not of type ",07,a1,8b,05)) + type) + HX_(" it is ",61,ea,19,0e)) + ::Std_obj::string(i->type));
HXDLIN( 242)		_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("nme/Assets.hx",b2,ba,6a,84),242,HX_("nme.Assets",cb,50,23,fb),HX_("badType",1f,97,c9,7f)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,badType,(void))

bool Assets_obj::hasBitmapData(::String id){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_246_hasBitmapData)
HXLINE( 247)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(id);
HXLINE( 249)		if (::hx::IsNotNull( i )) {
HXLINE( 249)			return ::hx::IsPointerEq( i->type,::nme::AssetType_obj::IMAGE_dyn() );
            		}
            		else {
HXLINE( 249)			return false;
            		}
HXDLIN( 249)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasBitmapData,return )

 ::nme::AssetInfo Assets_obj::getInfo(::String inName){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_253_getInfo)
HXLINE( 254)		 ::nme::AssetInfo result = ( ( ::nme::AssetInfo)(::nme::Assets_obj::info->get(inName)) );
HXLINE( 255)		if (::hx::IsNotNull( result )) {
HXLINE( 256)			return result;
            		}
HXLINE( 257)		::Array< ::String > parts = inName.split(HX_("/",2f,00,00,00));
HXLINE( 258)		int first = 0;
HXLINE( 259)		while((first < parts->length)){
HXLINE( 261)			if ((parts->__get(first) == HX_("..",40,28,00,00))) {
HXLINE( 262)				first = (first + 1);
            			}
            			else {
HXLINE( 265)				bool changed = false;
HXLINE( 266)				int test = (first + 1);
HXLINE( 267)				while((test < parts->length)){
HXLINE( 269)					bool _hx_tmp;
HXDLIN( 269)					if ((parts->__get(test) == HX_("..",40,28,00,00))) {
HXLINE( 269)						_hx_tmp = (parts->__get((test - 1)) != HX_("..",40,28,00,00));
            					}
            					else {
HXLINE( 269)						_hx_tmp = false;
            					}
HXDLIN( 269)					if (_hx_tmp) {
HXLINE( 271)						parts->removeRange((test - 1),2);
HXLINE( 272)						changed = true;
HXLINE( 273)						goto _hx_goto_21;
            					}
HXLINE( 275)					test = (test + 1);
            				}
            				_hx_goto_21:;
HXLINE( 277)				if (!(changed)) {
HXLINE( 278)					goto _hx_goto_20;
            				}
            			}
            		}
            		_hx_goto_20:;
HXLINE( 281)		::String path = parts->join(HX_("/",2f,00,00,00));
HXLINE( 282)		if ((path != inName)) {
HXLINE( 284)			result = ( ( ::nme::AssetInfo)(::nme::Assets_obj::info->get(path)) );
            		}
HXLINE( 286)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getInfo,return )

 ::nme::display::BitmapData Assets_obj::makeBitmapData(::String inClassName){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_290_makeBitmapData)
HXLINE( 291)		::hx::Class cls = ::Type_obj::resolveClass(inClassName);
HXLINE( 292)		if (::hx::IsNull( cls )) {
HXLINE( 293)			HX_STACK_DO_THROW((HX_("Invalid class : ",f7,7f,4d,03) + inClassName));
            		}
HXLINE( 294)		return ( ( ::nme::display::BitmapData)(::Type_obj::createInstance(cls,::cpp::VirtualArray_obj::__new(0))) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,makeBitmapData,return )

 ::nme::display::BitmapData Assets_obj::getBitmapData(::String id, ::Dynamic useCache){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_305_getBitmapData)
HXLINE( 306)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(id);
HXLINE( 307)		if (::hx::IsNull( i )) {
HXLINE( 309)			::nme::Assets_obj::noId(id,HX_("BitmapData",d9,b9,71,2a));
HXLINE( 310)			return null();
            		}
HXLINE( 312)		if (::hx::IsPointerNotEq( i->type,::nme::AssetType_obj::IMAGE_dyn() )) {
HXLINE( 314)			::nme::Assets_obj::badType(id,HX_("BitmapData",d9,b9,71,2a));
HXLINE( 315)			return null();
            		}
HXLINE( 317)		if (::hx::IsNotEq( useCache,false )) {
HXLINE( 319)			 ::nme::display::BitmapData val = ( ( ::nme::display::BitmapData)(i->getCache()) );
HXLINE( 320)			bool _hx_tmp;
HXDLIN( 320)			if (::hx::IsNotNull( val )) {
HXLINE( 320)				_hx_tmp = ::Std_obj::isOfType(val,::hx::ClassOf< ::nme::display::BitmapData >());
            			}
            			else {
HXLINE( 320)				_hx_tmp = false;
            			}
HXDLIN( 320)			if (_hx_tmp) {
HXLINE( 321)				return val;
            			}
            		}
HXLINE( 331)		 ::nme::display::BitmapData data = null();
HXLINE( 332)		if (i->isResource) {
HXLINE( 333)			data = ::nme::display::BitmapData_obj::loadFromBytes(::nme::Assets_obj::getResource(i->path),null(),null());
            		}
            		else {
HXLINE( 336)			::String filename = i->path;
HXLINE( 337)			if (::nme::Assets_obj::pathMapper->exists(filename)) {
HXLINE( 338)				filename = ::nme::Assets_obj::pathMapper->get_string(filename);
            			}
HXLINE( 339)			if (::nme::Assets_obj::byteFactory->exists(filename)) {
HXLINE( 340)				data = ::nme::display::BitmapData_obj::loadFromBytes(( ( ::nme::utils::ByteArray)(::nme::Assets_obj::byteFactory->get(filename)()) ),null(),null());
            			}
            			else {
HXLINE( 342)				data = ::nme::display::BitmapData_obj::load(filename,null(),null());
            			}
            		}
HXLINE( 344)		bool _hx_tmp1;
HXDLIN( 344)		if (::hx::IsNotNull( data )) {
HXLINE( 344)			_hx_tmp1 = data->get_transparent();
            		}
            		else {
HXLINE( 344)			_hx_tmp1 = false;
            		}
HXDLIN( 344)		if (_hx_tmp1) {
HXLINE( 346)			switch((int)(i->alphaMode->_hx_getIndex())){
            				case (int)2: case (int)3: {
HXLINE( 351)					data->setFormat(2,false);
            				}
            				break;
            				case (int)4: {
HXLINE( 349)					data->set_premultipliedAlpha(true);
            				}
            				break;
            				default:{
            				}
            			}
            		}
HXLINE( 356)		::nme::Assets_obj::trySetCache(i,useCache,data);
HXLINE( 357)		return data;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getBitmapData,return )

 ::nme::display::BitmapData Assets_obj::getImage(::String id, ::Dynamic useCache){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_359_getImage)
HXDLIN( 359)		return ::nme::Assets_obj::getBitmapData(id,useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getImage,return )

bool Assets_obj::hasBytes(::String id){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_363_hasBytes)
HXLINE( 364)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(id);
HXLINE( 365)		return ::hx::IsNotNull( i );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasBytes,return )

bool Assets_obj::exists(::String id, ::nme::AssetType type){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_369_exists)
HXLINE( 370)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(id);
HXLINE( 371)		if (::hx::IsNull( i )) {
HXLINE( 372)			return false;
            		}
HXLINE( 373)		if (::hx::IsNull( type )) {
HXLINE( 374)			return true;
            		}
HXLINE( 375)		return ::hx::IsPointerEq( i->type,type );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,exists,return )

 ::nme::utils::ByteArray Assets_obj::getBytes(::String id, ::Dynamic useCache){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_386_getBytes)
HXLINE( 387)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(id);
HXLINE( 388)		if (::hx::IsNull( i )) {
HXLINE( 390)			::nme::Assets_obj::noId(id,HX_("Bytes",4b,78,c5,50));
HXLINE( 391)			return null();
            		}
HXLINE( 393)		return ::nme::Assets_obj::getBytesInfo(i,useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getBytes,return )

 ::nme::utils::ByteArray Assets_obj::getBytesInfo( ::nme::AssetInfo i, ::Dynamic useCache){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_397_getBytesInfo)
HXLINE( 398)		if (::hx::IsNotEq( useCache,false )) {
HXLINE( 400)			 ::nme::utils::ByteArray cached = ( ( ::nme::utils::ByteArray)(i->getCache()) );
HXLINE( 401)			 ::nme::utils::ByteArray val;
HXDLIN( 401)			if (::Std_obj::isOfType(cached,::hx::ClassOf< ::nme::utils::ByteArray >())) {
HXLINE( 401)				val = cached;
            			}
            			else {
HXLINE( 401)				val = null();
            			}
HXLINE( 402)			if (::hx::IsNotNull( val )) {
HXLINE( 404)				val->position = 0;
HXLINE( 405)				return val;
            			}
            		}
HXLINE( 409)		 ::nme::utils::ByteArray data = null();
HXLINE( 410)		if (i->isResource) {
HXLINE( 412)			data = ::nme::Assets_obj::getResource(i->path);
            		}
            		else {
HXLINE( 435)			::String filename = i->path;
HXLINE( 436)			if (::nme::Assets_obj::pathMapper->exists(filename)) {
HXLINE( 437)				filename = ::nme::Assets_obj::pathMapper->get_string(filename);
            			}
HXLINE( 438)			if (::nme::Assets_obj::byteFactory->exists(filename)) {
HXLINE( 439)				data = ( ( ::nme::utils::ByteArray)(::nme::Assets_obj::byteFactory->get(filename)()) );
            			}
            			else {
HXLINE( 441)				data = ::nme::utils::ByteArray_obj::readFile(filename);
            			}
            		}
HXLINE( 445)		if (::hx::IsNotNull( data )) {
HXLINE( 446)			data->position = 0;
            		}
HXLINE( 448)		::nme::Assets_obj::trySetCache(i,useCache,data);
HXLINE( 450)		return data;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getBytesInfo,return )

bool Assets_obj::hasFont(::String id){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_454_hasFont)
HXLINE( 455)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(id);
HXLINE( 457)		if (::hx::IsNotNull( i )) {
HXLINE( 457)			return ::hx::IsPointerEq( i->type,::nme::AssetType_obj::FONT_dyn() );
            		}
            		else {
HXLINE( 457)			return false;
            		}
HXDLIN( 457)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasFont,return )

 ::nme::text::Font Assets_obj::getFont(::String id, ::Dynamic useCache){
            	HX_GC_STACKFRAME(&_hx_pos_215d685cb5e5e252_466_getFont)
HXLINE( 467)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(id);
HXLINE( 468)		if (::hx::IsNull( i )) {
HXLINE( 470)			::nme::Assets_obj::noId(id,HX_("Font",ef,89,99,2e));
HXLINE( 471)			return null();
            		}
HXLINE( 473)		if (::hx::IsPointerNotEq( i->type,::nme::AssetType_obj::FONT_dyn() )) {
HXLINE( 475)			::nme::Assets_obj::badType(id,HX_("Font",ef,89,99,2e));
HXLINE( 476)			return null();
            		}
HXLINE( 478)		if (::hx::IsNotEq( useCache,false )) {
HXLINE( 480)			 ::nme::text::Font val = ( ( ::nme::text::Font)(i->getCache()) );
HXLINE( 481)			bool _hx_tmp;
HXDLIN( 481)			if (::hx::IsNotNull( val )) {
HXLINE( 481)				_hx_tmp = ::Std_obj::isOfType(val,::hx::ClassOf< ::nme::text::Font >());
            			}
            			else {
HXLINE( 481)				_hx_tmp = false;
            			}
HXDLIN( 481)			if (_hx_tmp) {
HXLINE( 482)				return val;
            			}
            		}
HXLINE( 485)		 ::nme::text::Font font;
HXLINE( 489)		if (i->isResource) {
HXLINE( 485)			font =  ::nme::text::Font_obj::__alloc( HX_CTX ,HX_("",00,00,00,00),null(),null(),i->path,id);
            		}
            		else {
HXLINE( 485)			font =  ::nme::text::Font_obj::__alloc( HX_CTX ,i->path,null(),null(),null(),id);
            		}
HXLINE( 492)		::nme::Assets_obj::trySetCache(i,useCache,font);
HXLINE( 494)		return font;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getFont,return )

bool Assets_obj::hasSound(::String id){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_498_hasSound)
HXLINE( 499)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(id);
HXLINE( 501)		if (::hx::IsNotNull( i )) {
HXLINE( 501)			if (::hx::IsPointerNotEq( i->type,::nme::AssetType_obj::SOUND_dyn() )) {
HXLINE( 501)				return ::hx::IsPointerEq( i->type,::nme::AssetType_obj::MUSIC_dyn() );
            			}
            			else {
HXLINE( 501)				return true;
            			}
            		}
            		else {
HXLINE( 501)			return false;
            		}
HXDLIN( 501)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasSound,return )

 ::nme::media::Sound Assets_obj::getSound(::String id, ::Dynamic useCache,::hx::Null< bool >  __o_forceMusic,::String inEngine){
            		bool forceMusic = __o_forceMusic.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_215d685cb5e5e252_513_getSound)
HXLINE( 514)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(id);
HXLINE( 515)		if (::hx::IsNull( i )) {
HXLINE( 517)			::nme::Assets_obj::noId(id,HX_("Sound",af,fc,f9,13));
HXLINE( 518)			return null();
            		}
HXLINE( 520)		bool _hx_tmp;
HXDLIN( 520)		if (::hx::IsPointerNotEq( i->type,::nme::AssetType_obj::SOUND_dyn() )) {
HXLINE( 520)			_hx_tmp = ::hx::IsPointerNotEq( i->type,::nme::AssetType_obj::MUSIC_dyn() );
            		}
            		else {
HXLINE( 520)			_hx_tmp = false;
            		}
HXDLIN( 520)		if (_hx_tmp) {
HXLINE( 522)			::nme::Assets_obj::badType(id,HX_("Sound",af,fc,f9,13));
HXLINE( 523)			return null();
            		}
HXLINE( 525)		if (::hx::IsNotEq( useCache,false )) {
HXLINE( 527)			 ::nme::media::Sound val = ( ( ::nme::media::Sound)(i->getCache()) );
HXLINE( 528)			bool _hx_tmp1;
HXDLIN( 528)			if (::hx::IsNotNull( val )) {
HXLINE( 528)				_hx_tmp1 = ::Std_obj::isOfType(val,::hx::ClassOf< ::nme::media::Sound >());
            			}
            			else {
HXLINE( 528)				_hx_tmp1 = false;
            			}
HXDLIN( 528)			if (_hx_tmp1) {
HXLINE( 529)				return val;
            			}
            		}
HXLINE( 532)		 ::nme::media::Sound sound = null();
HXLINE( 538)		if (i->isResource) {
HXLINE( 540)			sound =  ::nme::media::Sound_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 541)			 ::nme::utils::ByteArray bytes = ::nme::Assets_obj::getBytes(id,null());
HXLINE( 542)			bool _hx_tmp2;
HXDLIN( 542)			if (::hx::IsPointerNotEq( i->type,::nme::AssetType_obj::MUSIC_dyn() )) {
HXLINE( 542)				_hx_tmp2 = forceMusic;
            			}
            			else {
HXLINE( 542)				_hx_tmp2 = true;
            			}
HXDLIN( 542)			sound->loadCompressedDataFromByteArray(bytes,bytes->length,_hx_tmp2,inEngine);
            		}
            		else {
HXLINE( 544)			if (::nme::Assets_obj::byteFactory->exists(i->path)) {
HXLINE( 546)				 ::nme::utils::ByteArray bytes1 = ( ( ::nme::utils::ByteArray)(::nme::Assets_obj::byteFactory->get(i->path)()) );
HXLINE( 547)				sound =  ::nme::media::Sound_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 548)				bool _hx_tmp3;
HXDLIN( 548)				if (::hx::IsPointerNotEq( i->type,::nme::AssetType_obj::MUSIC_dyn() )) {
HXLINE( 548)					_hx_tmp3 = forceMusic;
            				}
            				else {
HXLINE( 548)					_hx_tmp3 = true;
            				}
HXDLIN( 548)				sound->loadCompressedDataFromByteArray(bytes1,bytes1->length,_hx_tmp3,inEngine);
            			}
            			else {
HXLINE( 552)				bool sound1;
HXDLIN( 552)				if (::hx::IsPointerNotEq( i->type,::nme::AssetType_obj::MUSIC_dyn() )) {
HXLINE( 552)					sound1 = forceMusic;
            				}
            				else {
HXLINE( 552)					sound1 = true;
            				}
HXDLIN( 552)				sound =  ::nme::media::Sound_obj::__alloc( HX_CTX , ::nme::net::URLRequest_obj::__alloc( HX_CTX ,i->path),null(),sound1,inEngine);
            			}
            		}
HXLINE( 557)		::nme::Assets_obj::trySetCache(i,useCache,sound);
HXLINE( 559)		return sound;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Assets_obj,getSound,return )

 ::nme::media::Sound Assets_obj::getMusic(::String id, ::Dynamic useCache){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_563_getMusic)
HXLINE( 564)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(id);
HXLINE( 565)		if (::hx::IsNull( i )) {
HXLINE( 567)			::nme::Assets_obj::noId(id,HX_("Music",85,40,88,a3));
HXLINE( 568)			return null();
            		}
HXLINE( 570)		bool _hx_tmp;
HXDLIN( 570)		if (::hx::IsPointerNotEq( i->type,::nme::AssetType_obj::MUSIC_dyn() )) {
HXLINE( 570)			_hx_tmp = ::hx::IsPointerNotEq( i->type,::nme::AssetType_obj::SOUND_dyn() );
            		}
            		else {
HXLINE( 570)			_hx_tmp = false;
            		}
HXDLIN( 570)		if (_hx_tmp) {
HXLINE( 572)			::nme::Assets_obj::badType(id,HX_("Music",85,40,88,a3));
HXLINE( 573)			return null();
            		}
HXLINE( 575)		return ::nme::Assets_obj::getSound(id,useCache,true,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getMusic,return )

bool Assets_obj::hasText(::String id){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_579_hasText)
HXDLIN( 579)		return ::nme::Assets_obj::hasBytes(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasText,return )

bool Assets_obj::hasString(::String id){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_581_hasString)
HXDLIN( 581)		return ::nme::Assets_obj::hasBytes(id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,hasString,return )

::String Assets_obj::getText(::String id, ::Dynamic useCache){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_591_getText)
HXLINE( 592)		 ::nme::AssetInfo i = ::nme::Assets_obj::getInfo(id);
HXLINE( 593)		if (::hx::IsNull( i )) {
HXLINE( 595)			::nme::Assets_obj::noId(id,HX_("String",f1,9c,c4,45));
HXLINE( 596)			return null();
            		}
HXLINE( 599)		if (i->isResource) {
HXLINE( 600)			return ::haxe::Resource_obj::getString(i->path);
            		}
HXLINE( 602)		 ::nme::utils::ByteArray bytes = ::nme::Assets_obj::getBytes(id,useCache);
HXLINE( 604)		if (::hx::IsNull( bytes )) {
HXLINE( 605)			return null();
            		}
HXLINE( 607)		::String result = bytes->readUTFBytes(bytes->length);
HXLINE( 609)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getText,return )

::String Assets_obj::getString(::String id, ::Dynamic useCache){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_613_getString)
HXDLIN( 613)		return ::nme::Assets_obj::getText(id,useCache);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,getString,return )

::Array< ::String > Assets_obj::parseLibId(::String id){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_617_parseLibId)
HXLINE( 618)		int split = id.indexOf(HX_(":",3a,00,00,00),null());
HXLINE( 619)		if ((split < 0)) {
HXLINE( 620)			return null();
            		}
HXLINE( 621)		::String _hx_tmp = id.substr(0,split);
HXDLIN( 621)		return ::Array_obj< ::String >::__new(2)->init(0,_hx_tmp)->init(1,id.substr((split + 1),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,parseLibId,return )

void Assets_obj::loadLibrary(::String inLibName, ::Dynamic onLoad){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,::String,inLibName, ::Dynamic,onLoad) HXARGC(1)
            		void _hx_run( ::nme::AssetLib lib){
            			HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_641_loadLibrary)
HXLINE( 642)			::nme::Assets_obj::loadedLibraries->set(inLibName,lib);
HXLINE( 643)			onLoad(lib);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_625_loadLibrary)
HXLINE( 626)		if (::nme::Assets_obj::loadedLibraries->exists(inLibName)) {
HXLINE( 628)			 ::Dynamic onLoad1 = onLoad;
HXDLIN( 628)			onLoad1(::nme::Assets_obj::loadedLibraries->get(inLibName));
HXLINE( 629)			return;
            		}
HXLINE( 632)		 ::nme::AssetInfo libInfo = ( ( ::nme::AssetInfo)(::nme::Assets_obj::info->get(inLibName)) );
HXLINE( 633)		if (::hx::IsNull( libInfo )) {
HXLINE( 634)			HX_STACK_DO_THROW((HX_("[nme.Assets] Unnkown library ",5e,37,a5,41) + inLibName));
            		}
HXLINE( 636)		::String type = ::Std_obj::string(libInfo->type);
HXLINE( 637)		 ::Dynamic factory = ::nme::Assets_obj::libraryFactories->get(type);
HXLINE( 638)		if (::hx::IsNull( factory )) {
HXLINE( 639)			HX_STACK_DO_THROW((((HX_("[nme.Assets] missing library handler for '",32,f7,9e,4b) + inLibName) + HX_("' of type ",76,2b,29,ee)) + type));
            		}
HXLINE( 641)		( ( ::nme::AssetLib)(factory(inLibName)) )->load( ::Dynamic(new _hx_Closure_0(inLibName,onLoad)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Assets_obj,loadLibrary,(void))

 ::nme::AssetLib Assets_obj::getLoadedLibrary(::String inLibName){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_649_getLoadedLibrary)
HXLINE( 650)		if (!(::nme::Assets_obj::loadedLibraries->exists(inLibName))) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::String,inLibName) HXARGC(1)
            			void _hx_run( ::nme::AssetLib lib){
            				HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_667_getLoadedLibrary)
HXLINE( 667)				::nme::Assets_obj::loadedLibraries->set(inLibName,lib);
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 652)			 ::nme::AssetInfo libInfo = ( ( ::nme::AssetInfo)(::nme::Assets_obj::info->get(inLibName)) );
HXLINE( 653)			if (::hx::IsNull( libInfo )) {
HXLINE( 655)				::nme::Assets_obj::noId(inLibName,HX_("Library",db,4e,c1,0c));
HXLINE( 656)				return null();
            			}
HXLINE( 659)			::String type = ::Std_obj::string(libInfo->type);
HXLINE( 660)			 ::Dynamic factory = ::nme::Assets_obj::libraryFactories->get(type);
HXLINE( 661)			if (::hx::IsNull( factory )) {
HXLINE( 663)				::haxe::Log_obj::trace((((HX_("[nme.Assets] missing library handler for '",32,f7,9e,4b) + inLibName) + HX_("' of type ",76,2b,29,ee)) + type),::hx::SourceInfo(HX_("nme/Assets.hx",b2,ba,6a,84),663,HX_("nme.Assets",cb,50,23,fb),HX_("getLoadedLibrary",00,eb,67,e8)));
HXLINE( 664)				return null();
            			}
HXLINE( 667)			( ( ::nme::AssetLib)(factory(inLibName)) )->load( ::Dynamic(new _hx_Closure_0(inLibName)));
            		}
HXLINE( 670)		return ( ( ::nme::AssetLib)(::nme::Assets_obj::loadedLibraries->get(inLibName)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getLoadedLibrary,return )

 ::nme::display::MovieClip Assets_obj::getMovieClip(::String id){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_674_getMovieClip)
HXLINE( 675)		::Array< ::String > libId = ::nme::Assets_obj::parseLibId(id);
HXLINE( 676)		if (::hx::IsNotNull( libId )) {
HXLINE( 678)			 ::nme::AssetLib lib = ::nme::Assets_obj::getLoadedLibrary(libId->__get(0));
HXLINE( 679)			if (::hx::IsNull( lib )) {
HXLINE( 680)				return null();
            			}
HXLINE( 681)			return lib->getMovieClip(libId->__get(1));
            		}
HXLINE( 684)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assets_obj,getMovieClip,return )

 ::Dynamic Assets_obj::initResources;

void Assets_obj::initialize(){
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_716_initialize)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Assets_obj,initialize,(void))


Assets_obj::Assets_obj()
{
}

bool Assets_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { outValue = ( info ); return true; }
		if (HX_FIELD_EQ(inName,"list") ) { outValue = list_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"noId") ) { outValue = noId_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { outValue = ( cache ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"exists") ) { outValue = exists_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getPath") ) { outValue = getPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLocal") ) { outValue = isLocal_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"badType") ) { outValue = badType_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getInfo") ) { outValue = getInfo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasFont") ) { outValue = hasFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFont") ) { outValue = getFont_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasText") ) { outValue = hasText_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getText") ) { outValue = getText_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getImage") ) { outValue = getImage_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasBytes") ) { outValue = hasBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBytes") ) { outValue = getBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasSound") ) { outValue = hasSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getSound") ) { outValue = getSound_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMusic") ) { outValue = getMusic_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"cacheMode") ) { outValue = ( cacheMode ); return true; }
		if (HX_FIELD_EQ(inName,"hasString") ) { outValue = hasString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getString") ) { outValue = getString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pathMapper") ) { outValue = ( pathMapper ); return true; }
		if (HX_FIELD_EQ(inName,"scriptBase") ) { outValue = ( scriptBase ); return true; }
		if (HX_FIELD_EQ(inName,"isEmbedded") ) { outValue = isEmbedded_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"parseLibId") ) { outValue = parseLibId_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initialize") ) { outValue = initialize_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"byteFactory") ) { outValue = ( byteFactory ); return true; }
		if (HX_FIELD_EQ(inName,"getResource") ) { outValue = getResource_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trySetCache") ) { outValue = trySetCache_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadLibrary") ) { outValue = loadLibrary_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getAssetPath") ) { outValue = getAssetPath_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBytesInfo") ) { outValue = getBytesInfo_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getMovieClip") ) { outValue = getMovieClip_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"fromAssetList") ) { outValue = fromAssetList_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loadAssetList") ) { outValue = loadAssetList_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hasBitmapData") ) { outValue = hasBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getBitmapData") ) { outValue = getBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"initResources") ) { outValue = ( initResources ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"makeBitmapData") ) { outValue = makeBitmapData_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadedLibraries") ) { outValue = ( loadedLibraries ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"libraryFactories") ) { outValue = ( libraryFactories ); return true; }
		if (HX_FIELD_EQ(inName,"addEventListener") ) { outValue = addEventListener_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeBitmapData") ) { outValue = removeBitmapData_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getLoadedLibrary") ) { outValue = getLoadedLibrary_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"addLibraryFactory") ) { outValue = addLibraryFactory_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"loadScriptAssetList") ) { outValue = loadScriptAssetList_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"loadScriptAssetList2") ) { outValue = loadScriptAssetList2_dyn(); return true; }
	}
	return false;
}

bool Assets_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"info") ) { info=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"cache") ) { cache=ioValue.Cast<  ::nme::Cache >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"cacheMode") ) { cacheMode=ioValue.Cast< int >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pathMapper") ) { pathMapper=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		if (HX_FIELD_EQ(inName,"scriptBase") ) { scriptBase=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"byteFactory") ) { byteFactory=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"initResources") ) { initResources=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"loadedLibraries") ) { loadedLibraries=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"libraryFactories") ) { libraryFactories=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Assets_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Assets_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Assets_obj::UNCACHED,HX_("UNCACHED",fb,1e,bf,0c)},
	{::hx::fsInt,(void *) &Assets_obj::WEAK_CACHE,HX_("WEAK_CACHE",db,e7,e2,a3)},
	{::hx::fsInt,(void *) &Assets_obj::STRONG_CACHE,HX_("STRONG_CACHE",fa,56,22,fb)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Assets_obj::info,HX_("info",6e,38,bb,45)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Assets_obj::pathMapper,HX_("pathMapper",46,77,57,cb)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Assets_obj::byteFactory,HX_("byteFactory",a2,96,cb,d3)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Assets_obj::libraryFactories,HX_("libraryFactories",2d,19,d6,ee)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &Assets_obj::loadedLibraries,HX_("loadedLibraries",54,3f,a7,0f)},
	{::hx::fsInt,(void *) &Assets_obj::cacheMode,HX_("cacheMode",c5,e2,15,44)},
	{::hx::fsString,(void *) &Assets_obj::scriptBase,HX_("scriptBase",bc,c3,f1,39)},
	{::hx::fsObject /*  ::nme::Cache */ ,(void *) &Assets_obj::cache,HX_("cache",42,9a,14,41)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &Assets_obj::initResources,HX_("initResources",b5,9a,b0,b4)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Assets_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assets_obj::UNCACHED,"UNCACHED");
	HX_MARK_MEMBER_NAME(Assets_obj::WEAK_CACHE,"WEAK_CACHE");
	HX_MARK_MEMBER_NAME(Assets_obj::STRONG_CACHE,"STRONG_CACHE");
	HX_MARK_MEMBER_NAME(Assets_obj::info,"info");
	HX_MARK_MEMBER_NAME(Assets_obj::pathMapper,"pathMapper");
	HX_MARK_MEMBER_NAME(Assets_obj::byteFactory,"byteFactory");
	HX_MARK_MEMBER_NAME(Assets_obj::libraryFactories,"libraryFactories");
	HX_MARK_MEMBER_NAME(Assets_obj::loadedLibraries,"loadedLibraries");
	HX_MARK_MEMBER_NAME(Assets_obj::cacheMode,"cacheMode");
	HX_MARK_MEMBER_NAME(Assets_obj::scriptBase,"scriptBase");
	HX_MARK_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_MARK_MEMBER_NAME(Assets_obj::initResources,"initResources");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assets_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assets_obj::UNCACHED,"UNCACHED");
	HX_VISIT_MEMBER_NAME(Assets_obj::WEAK_CACHE,"WEAK_CACHE");
	HX_VISIT_MEMBER_NAME(Assets_obj::STRONG_CACHE,"STRONG_CACHE");
	HX_VISIT_MEMBER_NAME(Assets_obj::info,"info");
	HX_VISIT_MEMBER_NAME(Assets_obj::pathMapper,"pathMapper");
	HX_VISIT_MEMBER_NAME(Assets_obj::byteFactory,"byteFactory");
	HX_VISIT_MEMBER_NAME(Assets_obj::libraryFactories,"libraryFactories");
	HX_VISIT_MEMBER_NAME(Assets_obj::loadedLibraries,"loadedLibraries");
	HX_VISIT_MEMBER_NAME(Assets_obj::cacheMode,"cacheMode");
	HX_VISIT_MEMBER_NAME(Assets_obj::scriptBase,"scriptBase");
	HX_VISIT_MEMBER_NAME(Assets_obj::cache,"cache");
	HX_VISIT_MEMBER_NAME(Assets_obj::initResources,"initResources");
};

#endif

::hx::Class Assets_obj::__mClass;

static ::String Assets_obj_sStaticFields[] = {
	HX_("UNCACHED",fb,1e,bf,0c),
	HX_("WEAK_CACHE",db,e7,e2,a3),
	HX_("STRONG_CACHE",fa,56,22,fb),
	HX_("info",6e,38,bb,45),
	HX_("pathMapper",46,77,57,cb),
	HX_("byteFactory",a2,96,cb,d3),
	HX_("libraryFactories",2d,19,d6,ee),
	HX_("loadedLibraries",54,3f,a7,0f),
	HX_("cacheMode",c5,e2,15,44),
	HX_("scriptBase",bc,c3,f1,39),
	HX_("cache",42,9a,14,41),
	HX_("fromAssetList",a4,a7,42,20),
	HX_("loadAssetList",68,3b,bf,2e),
	HX_("loadScriptAssetList",5d,2b,1d,f7),
	HX_("loadScriptAssetList2",35,c6,68,42),
	HX_("addLibraryFactory",10,61,f2,de),
	HX_("getAssetPath",3f,d0,4e,be),
	HX_("getPath",5b,95,d4,1c),
	HX_("addEventListener",cd,0b,64,f1),
	HX_("isEmbedded",94,2b,11,59),
	HX_("getResource",84,1f,94,38),
	HX_("isLocal",21,6d,76,15),
	HX_("list",5e,1c,b3,47),
	HX_("removeBitmapData",1d,d3,69,ed),
	HX_("trySetCache",9b,5b,07,e3),
	HX_("noId",7c,f2,09,49),
	HX_("badType",1f,97,c9,7f),
	HX_("hasBitmapData",b3,6d,17,4e),
	HX_("getInfo",24,e8,3d,18),
	HX_("makeBitmapData",47,e9,f0,ce),
	HX_("getBitmapData",ef,11,33,90),
	HX_("getImage",e5,2e,40,1d),
	HX_("hasBytes",b1,52,f0,49),
	HX_("exists",dc,1d,e0,bf),
	HX_("getBytes",f5,17,6f,1d),
	HX_("getBytesInfo",03,1b,07,7a),
	HX_("hasFont",49,7e,04,13),
	HX_("getFont",85,0d,43,16),
	HX_("hasSound",15,d7,24,0d),
	HX_("getSound",59,9c,a3,e0),
	HX_("getMusic",2f,e0,31,70),
	HX_("hasText",27,ed,3d,1c),
	HX_("hasString",cb,db,18,52),
	HX_("getText",63,7c,7c,1f),
	HX_("getString",07,b2,86,8d),
	HX_("parseLibId",4d,f1,d9,9e),
	HX_("loadLibrary",75,e5,0d,10),
	HX_("getLoadedLibrary",00,eb,67,e8),
	HX_("getMovieClip",2a,9f,71,27),
	HX_("initResources",b5,9a,b0,b4),
	HX_("initialize",50,31,bb,ec),
	::String(null())
};

void Assets_obj::__register()
{
	Assets_obj _hx_dummy;
	Assets_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.Assets",cb,50,23,fb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assets_obj::__GetStatic;
	__mClass->mSetStaticField = &Assets_obj::__SetStatic;
	__mClass->mMarkFunc = Assets_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Assets_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Assets_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assets_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assets_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assets_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Assets_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_49_boot)
HXDLIN(  49)		UNCACHED = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_50_boot)
HXDLIN(  50)		WEAK_CACHE = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_51_boot)
HXDLIN(  51)		STRONG_CACHE = 2;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_215d685cb5e5e252_53_boot)
HXDLIN(  53)		info =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_215d685cb5e5e252_54_boot)
HXDLIN(  54)		pathMapper =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_215d685cb5e5e252_55_boot)
HXDLIN(  55)		byteFactory =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_215d685cb5e5e252_56_boot)
HXDLIN(  56)		libraryFactories =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_215d685cb5e5e252_57_boot)
HXDLIN(  57)		loadedLibraries =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_61_boot)
HXDLIN(  61)		cacheMode = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_64_boot)
HXDLIN(  64)		scriptBase = HX_("",00,00,00,00);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_215d685cb5e5e252_66_boot)
HXDLIN(  66)		cache =  ::nme::Cache_obj::__alloc( HX_CTX );
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_215d685cb5e5e252_689_boot)
HXLINE( 690)			::cpp::Function< void  ( ::hx::Object *) > nme_set_resource_factory = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_set_resource_factory",6f,96,97,f8),HX_("ov",27,61,00,00),false);
HXLINE( 691)			if (::hx::IsNotNull( nme_set_resource_factory )) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::haxe::ds::StringMap,notFound) HXARGC(1)
            				 ::nme::utils::ByteArray _hx_run(::String s){
            					HX_GC_STACKFRAME(&_hx_pos_215d685cb5e5e252_694_boot)
HXLINE( 695)					if (notFound->exists(s)) {
HXLINE( 696)						return null();
            					}
HXLINE( 697)					 ::haxe::io::Bytes reso = ::haxe::Resource_obj::getBytes(s);
HXLINE( 698)					if (::hx::IsNotNull( reso )) {
HXLINE( 699)						::nme::utils::ByteArray_obj::fromBytes(reso);
            					}
HXLINE( 701)					{
HXLINE( 701)						 ::Dynamic asset = ::nme::Assets_obj::info->iterator();
HXDLIN( 701)						while(( (bool)(asset->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 701)							 ::nme::AssetInfo asset1 = ( ( ::nme::AssetInfo)(asset->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 703)							if ((asset1->path == s)) {
HXLINE( 704)								return ::nme::Assets_obj::getBytesInfo(asset1,null());
            							}
            						}
            					}
HXLINE( 706)					if (::nme::Assets_obj::hasBytes(s)) {
HXLINE( 707)						return ::nme::Assets_obj::getBytes(s,null());
            					}
HXLINE( 708)					notFound->set(s,true);
HXLINE( 709)					return null();
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 693)				 ::haxe::ds::StringMap notFound =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 694)				nme_set_resource_factory(::hx::DynamicPtr( ::Dynamic(new _hx_Closure_0(notFound))));
            			}
HXLINE( 689)			 ::Dynamic _hx_tmp = null();
HXDLIN( 689)			return _hx_tmp;
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_215d685cb5e5e252_689_boot)
HXDLIN( 689)		initResources =  ::Dynamic(new _hx_Closure_1())();
            	}
}

} // end namespace nme
