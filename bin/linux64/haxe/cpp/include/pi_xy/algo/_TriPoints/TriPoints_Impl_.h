// Generated by Haxe 4.3.3
#ifndef INCLUDED_pi_xy_algo__TriPoints_TriPoints_Impl_
#define INCLUDED_pi_xy_algo__TriPoints_TriPoints_Impl_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(pi_xy,algo,HitTri)
HX_DECLARE_CLASS2(pi_xy,algo,IhitObj)
HX_DECLARE_CLASS2(pi_xy,algo,TriPoints_)
HX_DECLARE_CLASS3(pi_xy,algo,_TriPoints,TriPoints_Impl_)

namespace pi_xy{
namespace algo{
namespace _TriPoints{


class HXCPP_CLASS_ATTRIBUTES TriPoints_Impl__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TriPoints_Impl__obj OBJ_;
		TriPoints_Impl__obj();

	public:
		enum { _hx_ClassId = 0x1f8811ad };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pi_xy.algo._TriPoints.TriPoints_Impl_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pi_xy.algo._TriPoints.TriPoints_Impl_"); }

		inline static ::hx::ObjectPtr< TriPoints_Impl__obj > __new() {
			::hx::ObjectPtr< TriPoints_Impl__obj > __this = new TriPoints_Impl__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< TriPoints_Impl__obj > __alloc(::hx::Ctx *_hx_ctx) {
			TriPoints_Impl__obj *__this = (TriPoints_Impl__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TriPoints_Impl__obj), false, "pi_xy.algo._TriPoints.TriPoints_Impl_"));
			*(void **)__this = TriPoints_Impl__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TriPoints_Impl__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TriPoints_Impl_",ae,5c,c5,03); }

		static  ::pi_xy::algo::TriPoints_ _new( ::pi_xy::algo::TriPoints_ tp);
		static ::Dynamic _new_dyn();

		static void rotate( ::pi_xy::algo::TriPoints_ this1,Float theta,Float centreX,Float centreY);
		static ::Dynamic rotate_dyn();

		static  ::pi_xy::algo::HitTri getHit( ::pi_xy::algo::TriPoints_ this1,::hx::Null< bool >  preCalculated);
		static ::Dynamic getHit_dyn();

};

} // end namespace pi_xy
} // end namespace algo
} // end namespace _TriPoints

#endif /* INCLUDED_pi_xy_algo__TriPoints_TriPoints_Impl_ */ 
