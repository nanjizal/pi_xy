// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_RawImageData
#include <iterMagic/RawImageData.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0c3dfe55964379c7_218_new,"iterMagic.BytesImg","new",0x299abc83,"iterMagic.BytesImg.new","iterMagic/Img.hx",218,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3dfe55964379c7_224_set,"iterMagic.BytesImg","set",0x299e87c5,"iterMagic.BytesImg.set","iterMagic/Img.hx",224,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3dfe55964379c7_230_get,"iterMagic.BytesImg","get",0x29956cb9,"iterMagic.BytesImg.get","iterMagic/Img.hx",230,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3dfe55964379c7_233_zero,"iterMagic.BytesImg","zero",0x45b8c1a5,"iterMagic.BytesImg.zero","iterMagic/Img.hx",233,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3dfe55964379c7_246_size,"iterMagic.BytesImg","size",0x411b533e,"iterMagic.BytesImg.size","iterMagic/Img.hx",246,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3dfe55964379c7_253_setRaw,"iterMagic.BytesImg","setRaw",0xeb656f23,"iterMagic.BytesImg.setRaw","iterMagic/Img.hx",253,0x8899afd5)
HX_LOCAL_STACK_FRAME(_hx_pos_0c3dfe55964379c7_276_getRaw,"iterMagic.BytesImg","getRaw",0x1f1d1aaf,"iterMagic.BytesImg.getRaw","iterMagic/Img.hx",276,0x8899afd5)
namespace iterMagic{

void BytesImg_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_0c3dfe55964379c7_218_new)
HXDLIN( 218)		this->count = 0;
            	}

Dynamic BytesImg_obj::__CreateEmpty() { return new BytesImg_obj; }

void *BytesImg_obj::_hx_vtable = 0;

Dynamic BytesImg_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BytesImg_obj > _hx_result = new BytesImg_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BytesImg_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x41930dad;
}

static ::iterMagic::Iimg_obj _hx_iterMagic_BytesImg__hx_iterMagic_Iimg= {
	( int (::hx::Object::*)(int,int))&::iterMagic::BytesImg_obj::set,
	( int (::hx::Object::*)(int))&::iterMagic::BytesImg_obj::get,
	(  ::Dynamic (::hx::Object::*)(int))&::iterMagic::BytesImg_obj::zero_e55b6ed4,
	(  ::Dynamic (::hx::Object::*)(int,int))&::iterMagic::BytesImg_obj::size_a9623fd7,
	(  ::iterMagic::RawImageData (::hx::Object::*)( ::iterMagic::RawImageData))&::iterMagic::BytesImg_obj::setRaw,
	(  ::iterMagic::RawImageData (::hx::Object::*)())&::iterMagic::BytesImg_obj::getRaw,
};

 ::Dynamic BytesImg_obj::size_a9623fd7(int width,int height) {
			return size(width,height);
}

 ::Dynamic BytesImg_obj::zero_e55b6ed4(int len) {
			return zero(len);
}
void *BytesImg_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xed2c7ccf: return &_hx_iterMagic_BytesImg__hx_iterMagic_Iimg;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

int BytesImg_obj::set(int index,int value){
            	HX_STACKFRAME(&_hx_pos_0c3dfe55964379c7_224_set)
HXLINE( 225)		{
HXLINE( 225)			 ::haxe::io::Bytes _this = this->data;
HXDLIN( 225)			int pos = ::Std_obj::_hx_int(( (Float)((index * 4)) ));
HXDLIN( 225)			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 225)			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 225)			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 225)			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            		}
HXLINE( 226)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BytesImg_obj,set,return )

int BytesImg_obj::get(int index){
            	HX_STACKFRAME(&_hx_pos_0c3dfe55964379c7_230_get)
HXDLIN( 230)		 ::haxe::io::Bytes _this = this->data;
HXDLIN( 230)		int pos = ::Std_obj::_hx_int(( (Float)((index * 4)) ));
HXDLIN( 230)		return (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesImg_obj,get,return )

 ::haxe::io::Bytes BytesImg_obj::zero(int len){
            	HX_STACKFRAME(&_hx_pos_0c3dfe55964379c7_233_zero)
HXLINE( 234)		int w = 0;
HXLINE( 235)		{
HXLINE( 235)			int _g = 0;
HXDLIN( 235)			int _g1 = this->height;
HXDLIN( 235)			while((_g < _g1)){
HXLINE( 235)				_g = (_g + 1);
HXDLIN( 235)				int y = (_g - 1);
HXLINE( 236)				{
HXLINE( 236)					int _g2 = 0;
HXDLIN( 236)					int _g3 = this->width;
HXDLIN( 236)					while((_g2 < _g3)){
HXLINE( 236)						_g2 = (_g2 + 1);
HXDLIN( 236)						int x = (_g2 - 1);
HXLINE( 237)						{
HXLINE( 237)							w = (w + 1);
HXDLIN( 237)							this->data->b[(w - 1)] = ( (unsigned char)(0) );
            						}
HXLINE( 238)						{
HXLINE( 238)							w = (w + 1);
HXDLIN( 238)							this->data->b[(w - 1)] = ( (unsigned char)(0) );
            						}
HXLINE( 239)						{
HXLINE( 239)							w = (w + 1);
HXDLIN( 239)							this->data->b[(w - 1)] = ( (unsigned char)(0) );
            						}
HXLINE( 240)						{
HXLINE( 240)							w = (w + 1);
HXDLIN( 240)							this->data->b[(w - 1)] = ( (unsigned char)(0) );
            						}
            					}
            				}
            			}
            		}
HXLINE( 243)		return this->data;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesImg_obj,zero,return )

 ::haxe::io::Bytes BytesImg_obj::size(int width,int height){
            	HX_STACKFRAME(&_hx_pos_0c3dfe55964379c7_246_size)
HXLINE( 247)		this->width = width;
HXLINE( 248)		this->height = height;
HXLINE( 249)		this->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXLINE( 250)		this->data = ::haxe::io::Bytes_obj::alloc((this->length * 4));
HXLINE( 251)		int len = this->length;
HXDLIN( 251)		int w = 0;
HXDLIN( 251)		{
HXLINE( 251)			int _g = 0;
HXDLIN( 251)			int _g1 = this->height;
HXDLIN( 251)			while((_g < _g1)){
HXLINE( 251)				_g = (_g + 1);
HXDLIN( 251)				int y = (_g - 1);
HXDLIN( 251)				{
HXLINE( 251)					int _g2 = 0;
HXDLIN( 251)					int _g3 = this->width;
HXDLIN( 251)					while((_g2 < _g3)){
HXLINE( 251)						_g2 = (_g2 + 1);
HXDLIN( 251)						int x = (_g2 - 1);
HXDLIN( 251)						{
HXLINE( 251)							w = (w + 1);
HXDLIN( 251)							this->data->b[(w - 1)] = ( (unsigned char)(0) );
            						}
HXDLIN( 251)						{
HXLINE( 251)							w = (w + 1);
HXDLIN( 251)							this->data->b[(w - 1)] = ( (unsigned char)(0) );
            						}
HXDLIN( 251)						{
HXLINE( 251)							w = (w + 1);
HXDLIN( 251)							this->data->b[(w - 1)] = ( (unsigned char)(0) );
            						}
HXDLIN( 251)						{
HXLINE( 251)							w = (w + 1);
HXDLIN( 251)							this->data->b[(w - 1)] = ( (unsigned char)(0) );
            						}
            					}
            				}
            			}
            		}
HXDLIN( 251)		return this->data;
            	}


HX_DEFINE_DYNAMIC_FUNC2(BytesImg_obj,size,return )

 ::iterMagic::RawImageData BytesImg_obj::setRaw( ::iterMagic::RawImageData d){
            	HX_GC_STACKFRAME(&_hx_pos_0c3dfe55964379c7_253_setRaw)
HXLINE( 254)		 ::haxe::io::Bytes dataD;
HXDLIN( 254)		if ((d->_hx_getIndex() == 0)) {
HXLINE( 255)			 ::haxe::io::Bytes b = d->_hx_getObject(0).StaticCast<  ::haxe::io::Bytes >();
HXLINE( 256)			if ((b->length == this->data->length)) {
HXLINE( 254)				dataD = b;
            			}
            			else {
HXLINE( 259)				int diff = (b->length - this->data->length);
HXLINE( 260)				if ((diff > 0)) {
HXLINE( 261)					HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,(HX_("BytesInt is too long ",1e,35,4b,e5) + diff),null(),null()));
            				}
            				else {
HXLINE( 262)					if ((diff < 0)) {
HXLINE( 263)						HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,(HX_("BytesInt is too short ",ea,94,e6,81) + diff),null(),null()));
            					}
            				}
HXLINE( 254)				dataD = null();
            			}
            		}
            		else {
HXLINE( 268)			 ::iterMagic::RawImageData notB = d;
HXLINE( 269)			HX_STACK_DO_THROW( ::haxe::Exception_obj::__alloc( HX_CTX ,(HX_("can not accept incorrect RawImageData ",6d,da,1b,a7) + ::Std_obj::string(notB)),null(),null()));
            		}
HXLINE( 272)		if (::hx::IsNotNull( dataD )) {
HXLINE( 272)			this->data = dataD;
            		}
HXLINE( 273)		return d;
            	}


HX_DEFINE_DYNAMIC_FUNC1(BytesImg_obj,setRaw,return )

 ::iterMagic::RawImageData BytesImg_obj::getRaw(){
            	HX_STACKFRAME(&_hx_pos_0c3dfe55964379c7_276_getRaw)
HXDLIN( 276)		return ::iterMagic::RawImageData_obj::RawBytesImg(this->data);
            	}


HX_DEFINE_DYNAMIC_FUNC0(BytesImg_obj,getRaw,return )


::hx::ObjectPtr< BytesImg_obj > BytesImg_obj::__new() {
	::hx::ObjectPtr< BytesImg_obj > __this = new BytesImg_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< BytesImg_obj > BytesImg_obj::__alloc(::hx::Ctx *_hx_ctx) {
	BytesImg_obj *__this = (BytesImg_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BytesImg_obj), true, "iterMagic.BytesImg"));
	*(void **)__this = BytesImg_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

BytesImg_obj::BytesImg_obj()
{
}

void BytesImg_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BytesImg);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(count,"count");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void BytesImg_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(count,"count");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(length,"length");
}

::hx::Val BytesImg_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return ::hx::Val( set_dyn() ); }
		if (HX_FIELD_EQ(inName,"get") ) { return ::hx::Val( get_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"zero") ) { return ::hx::Val( zero_dyn() ); }
		if (HX_FIELD_EQ(inName,"size") ) { return ::hx::Val( size_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { return ::hx::Val( count ); }
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
		if (HX_FIELD_EQ(inName,"setRaw") ) { return ::hx::Val( setRaw_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRaw") ) { return ::hx::Val( getRaw_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val BytesImg_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"count") ) { count=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void BytesImg_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("count",cf,44,63,4a));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BytesImg_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(BytesImg_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsInt,(int)offsetof(BytesImg_obj,count),HX_("count",cf,44,63,4a)},
	{::hx::fsInt,(int)offsetof(BytesImg_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(BytesImg_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsInt,(int)offsetof(BytesImg_obj,length),HX_("length",e6,94,07,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *BytesImg_obj_sStaticStorageInfo = 0;
#endif

static ::String BytesImg_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("count",cf,44,63,4a),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("length",e6,94,07,9f),
	HX_("set",a2,9b,57,00),
	HX_("get",96,80,4e,00),
	HX_("zero",28,0f,f1,50),
	HX_("size",c1,a0,53,4c),
	HX_("setRaw",66,63,6e,6f),
	HX_("getRaw",f2,0e,26,a3),
	::String(null()) };

::hx::Class BytesImg_obj::__mClass;

void BytesImg_obj::__register()
{
	BytesImg_obj _hx_dummy;
	BytesImg_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("iterMagic.BytesImg",11,bf,c3,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BytesImg_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BytesImg_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BytesImg_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BytesImg_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace iterMagic
