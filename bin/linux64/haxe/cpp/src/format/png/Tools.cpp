// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_format_png_Chunk
#include <format/png/Chunk.h>
#endif
#ifndef INCLUDED_format_png_Color
#include <format/png/Color.h>
#endif
#ifndef INCLUDED_format_png_Tools
#include <format/png/Tools.h>
#endif
#ifndef INCLUDED_format_tools_Deflate
#include <format/tools/Deflate.h>
#endif
#ifndef INCLUDED_format_tools_Inflate
#include <format/tools/Inflate.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_ds__List_ListNode
#include <haxe/ds/_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7ba0aa4bcda37a20_35_getHeader,"format.png.Tools","getHeader",0xf1b59214,"format.png.Tools.getHeader","format/png/Tools.hx",35,0x79d90221)
HX_LOCAL_STACK_FRAME(_hx_pos_7ba0aa4bcda37a20_47_getPalette,"format.png.Tools","getPalette",0x96858014,"format.png.Tools.getPalette","format/png/Tools.hx",47,0x79d90221)
HX_LOCAL_STACK_FRAME(_hx_pos_7ba0aa4bcda37a20_56_filter,"format.png.Tools","filter",0xb708d3c7,"format.png.Tools.filter","format/png/Tools.hx",56,0x79d90221)
HX_LOCAL_STACK_FRAME(_hx_pos_7ba0aa4bcda37a20_69_reverseBytes,"format.png.Tools","reverseBytes",0x2d518d38,"format.png.Tools.reverseBytes","format/png/Tools.hx",69,0x79d90221)
HX_LOCAL_STACK_FRAME(_hx_pos_7ba0aa4bcda37a20_653_buildGrey,"format.png.Tools","buildGrey",0x5d0708fe,"format.png.Tools.buildGrey","format/png/Tools.hx",653,0x79d90221)
HX_LOCAL_STACK_FRAME(_hx_pos_7ba0aa4bcda37a20_672_buildIndexed,"format.png.Tools","buildIndexed",0x4c6c33b2,"format.png.Tools.buildIndexed","format/png/Tools.hx",672,0x79d90221)
HX_LOCAL_STACK_FRAME(_hx_pos_7ba0aa4bcda37a20_691_buildRGB,"format.png.Tools","buildRGB",0x68ea624e,"format.png.Tools.buildRGB","format/png/Tools.hx",691,0x79d90221)
HX_LOCAL_STACK_FRAME(_hx_pos_7ba0aa4bcda37a20_714_build32ARGB,"format.png.Tools","build32ARGB",0x02e864aa,"format.png.Tools.build32ARGB","format/png/Tools.hx",714,0x79d90221)
HX_LOCAL_STACK_FRAME(_hx_pos_7ba0aa4bcda37a20_738_build32BGRA,"format.png.Tools","build32BGRA",0x03894c12,"format.png.Tools.build32BGRA","format/png/Tools.hx",738,0x79d90221)
namespace format{
namespace png{

void Tools_obj::__construct() { }

Dynamic Tools_obj::__CreateEmpty() { return new Tools_obj; }

void *Tools_obj::_hx_vtable = 0;

Dynamic Tools_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Tools_obj > _hx_result = new Tools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Tools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x18125ce9;
}

 ::Dynamic Tools_obj::getHeader( ::haxe::ds::List d){
            	HX_STACKFRAME(&_hx_pos_7ba0aa4bcda37a20_35_getHeader)
HXLINE(  36)		{
HXLINE(  36)			 ::haxe::ds::_List::ListNode _g_head = d->h;
HXDLIN(  36)			while(::hx::IsNotNull( _g_head )){
HXLINE(  36)				 ::format::png::Chunk val = _g_head->item;
HXDLIN(  36)				_g_head = _g_head->next;
HXDLIN(  36)				 ::format::png::Chunk c = val;
HXLINE(  37)				if ((c->_hx_getIndex() == 1)) {
HXLINE(  38)					 ::Dynamic h = c->_hx_getObject(0);
HXDLIN(  38)					return h;
            				}
            			}
            		}
HXLINE(  41)		HX_STACK_DO_THROW(HX_("Header not found",42,2b,e7,44));
HXDLIN(  41)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tools_obj,getHeader,return )

 ::haxe::io::Bytes Tools_obj::getPalette( ::haxe::ds::List d){
            	HX_STACKFRAME(&_hx_pos_7ba0aa4bcda37a20_47_getPalette)
HXLINE(  48)		{
HXLINE(  48)			 ::haxe::ds::_List::ListNode _g_head = d->h;
HXDLIN(  48)			while(::hx::IsNotNull( _g_head )){
HXLINE(  48)				 ::format::png::Chunk val = _g_head->item;
HXDLIN(  48)				_g_head = _g_head->next;
HXDLIN(  48)				 ::format::png::Chunk c = val;
HXLINE(  49)				if ((c->_hx_getIndex() == 3)) {
HXLINE(  50)					 ::haxe::io::Bytes b = c->_hx_getObject(0).StaticCast<  ::haxe::io::Bytes >();
HXDLIN(  50)					return b;
            				}
            			}
            		}
HXLINE(  53)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tools_obj,getPalette,return )

int Tools_obj::filter( ::haxe::io::Bytes data,int x,int y,int stride,int prev,int p,::hx::Null< int >  __o_numChannels){
            		int numChannels = __o_numChannels.Default(4);
            	HX_STACKFRAME(&_hx_pos_7ba0aa4bcda37a20_56_filter)
HXLINE(  57)		int b;
HXDLIN(  57)		if ((y == 0)) {
HXLINE(  57)			b = 0;
            		}
            		else {
HXLINE(  57)			b = ( (int)(data->b->__get((p - stride))) );
            		}
HXLINE(  58)		int c;
HXDLIN(  58)		bool c1;
HXDLIN(  58)		if ((x != 0)) {
HXLINE(  58)			c1 = (y == 0);
            		}
            		else {
HXLINE(  58)			c1 = true;
            		}
HXDLIN(  58)		if (c1) {
HXLINE(  58)			c = 0;
            		}
            		else {
HXLINE(  58)			c = ( (int)(data->b->__get(((p - stride) - numChannels))) );
            		}
HXLINE(  59)		int k = ((prev + b) - c);
HXLINE(  60)		int pa = (k - prev);
HXDLIN(  60)		if ((pa < 0)) {
HXLINE(  60)			pa = -(pa);
            		}
HXLINE(  61)		int pb = (k - b);
HXDLIN(  61)		if ((pb < 0)) {
HXLINE(  61)			pb = -(pb);
            		}
HXLINE(  62)		int pc = (k - c);
HXDLIN(  62)		if ((pc < 0)) {
HXLINE(  62)			pc = -(pc);
            		}
HXLINE(  63)		bool _hx_tmp;
HXDLIN(  63)		if ((pa <= pb)) {
HXLINE(  63)			_hx_tmp = (pa <= pc);
            		}
            		else {
HXLINE(  63)			_hx_tmp = false;
            		}
HXDLIN(  63)		if (_hx_tmp) {
HXLINE(  63)			return prev;
            		}
            		else {
HXLINE(  63)			if ((pb <= pc)) {
HXLINE(  63)				return b;
            			}
            			else {
HXLINE(  63)				return c;
            			}
            		}
HXDLIN(  63)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC7(Tools_obj,filter,return )

void Tools_obj::reverseBytes( ::haxe::io::Bytes b){
            	HX_STACKFRAME(&_hx_pos_7ba0aa4bcda37a20_69_reverseBytes)
HXLINE(  89)		int p = 0;
HXLINE(  90)		{
HXLINE(  90)			int _g = 0;
HXDLIN(  90)			int _g1 = (b->length >> 2);
HXDLIN(  90)			while((_g < _g1)){
HXLINE(  90)				_g = (_g + 1);
HXDLIN(  90)				int i = (_g - 1);
HXLINE(  91)				int b1 = ( (int)(b->b->__get(p)) );
HXLINE(  92)				int g = ( (int)(b->b->__get((p + 1))) );
HXLINE(  93)				int r = ( (int)(b->b->__get((p + 2))) );
HXLINE(  94)				int a = ( (int)(b->b->__get((p + 3))) );
HXLINE(  95)				{
HXLINE(  95)					p = (p + 1);
HXDLIN(  95)					b->b[(p - 1)] = ( (unsigned char)(a) );
            				}
HXLINE(  96)				{
HXLINE(  96)					p = (p + 1);
HXDLIN(  96)					b->b[(p - 1)] = ( (unsigned char)(r) );
            				}
HXLINE(  97)				{
HXLINE(  97)					p = (p + 1);
HXDLIN(  97)					b->b[(p - 1)] = ( (unsigned char)(g) );
            				}
HXLINE(  98)				{
HXLINE(  98)					p = (p + 1);
HXDLIN(  98)					b->b[(p - 1)] = ( (unsigned char)(b1) );
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tools_obj,reverseBytes,(void))

 ::haxe::io::Bytes Tools_obj::extractGrey( ::haxe::ds::List d){
	HX_JUST_GC_STACKFRAME
	 ::Dynamic h = ::format::png::Tools_obj::getHeader(d);
	 ::haxe::io::Bytes grey = ::haxe::io::Bytes_obj::alloc((( (int)(h->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) ) * ( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) )));
	 ::haxe::io::Bytes data = null();
	 ::haxe::io::BytesBuffer fullData = null();
	{
		 ::haxe::ds::_List::ListNode _g_head = d->h;
		while(::hx::IsNotNull( _g_head )){
			 ::format::png::Chunk val = _g_head->item;
			_g_head = _g_head->next;
			 ::format::png::Chunk c = val;
			if ((c->_hx_getIndex() == 2)) {
				 ::haxe::io::Bytes b = c->_hx_getObject(0).StaticCast<  ::haxe::io::Bytes >();
				if (::hx::IsNotNull( fullData )) {
					::Array< unsigned char > b1 = fullData->b;
					::Array< unsigned char > b2 = b->b;
					{
						int _g = 0;
						int _g1 = b->length;
						while((_g < _g1)){
							_g = (_g + 1);
							int i = (_g - 1);
							fullData->b->push(b2->__get(i));
						}
					}
				}
				else {
					if (::hx::IsNull( data )) {
						data = b;
					}
					else {
						fullData =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
						{
							::Array< unsigned char > b11 = fullData->b;
							::Array< unsigned char > b21 = data->b;
							{
								int _g2 = 0;
								int _g3 = data->length;
								while((_g2 < _g3)){
									_g2 = (_g2 + 1);
									int i1 = (_g2 - 1);
									fullData->b->push(b21->__get(i1));
								}
							}
						}
						{
							::Array< unsigned char > b12 = fullData->b;
							::Array< unsigned char > b22 = b->b;
							{
								int _g4 = 0;
								int _g5 = b->length;
								while((_g4 < _g5)){
									_g4 = (_g4 + 1);
									int i2 = (_g4 - 1);
									fullData->b->push(b22->__get(i2));
								}
							}
						}
						data = null();
					}
				}
			}
		}
	}
	if (::hx::IsNotNull( fullData )) {
		data = fullData->getBytes();
	}
	if (::hx::IsNull( data )) {
		HX_STACK_DO_THROW(HX_("Data not found",1f,f6,a3,e4));
	}
	data = ::format::tools::Inflate_obj::run(data);
	int r = 0;
	int w = 0;
	{
		 ::format::png::Color _g6 = h->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic);
		if ((_g6->_hx_getIndex() == 0)) {
			bool alpha = _g6->_hx_getBool(0);
			{
				if (::hx::IsNotEq( h->__Field(HX_("colbits",46,9b,c7,e6),::hx::paccDynamic),8 )) {
					HX_STACK_DO_THROW(HX_("Unsupported color mode",eb,dc,a9,2c));
				}
				int width = ( (int)(h->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) );
				int stride;
				if (alpha) {
					stride = 2;
				}
				else {
					stride = 1;
				}
				int stride1 = ((stride * width) + 1);
				if ((data->length < (( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) ) * stride1))) {
					HX_STACK_DO_THROW(HX_("Not enough data",ed,1b,e9,b2));
				}
				int rinc;
				if (alpha) {
					rinc = 2;
				}
				else {
					rinc = 1;
				}
				{
					int _g7 = 0;
					int _g8 = ( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) );
					while((_g7 < _g8)){
						_g7 = (_g7 + 1);
						int y = (_g7 - 1);
						r = (r + 1);
						int f = ( (int)(data->b->__get((r - 1))) );
						switch((int)(f)){
							case (int)0: {
								int _g9 = 0;
								int _g10 = width;
								while((_g9 < _g10)){
									_g9 = (_g9 + 1);
									int x = (_g9 - 1);
									int v = ( (int)(data->b->__get(r)) );
									r = (r + rinc);
									{
										w = (w + 1);
										grey->b[(w - 1)] = ( (unsigned char)(v) );
									}
								}
							}
							break;
							case (int)1: {
								int cv = 0;
								{
									int _g11 = 0;
									int _g12 = width;
									while((_g11 < _g12)){
										_g11 = (_g11 + 1);
										int x1 = (_g11 - 1);
										cv = (cv + data->b->__get(r));
										r = (r + rinc);
										{
											w = (w + 1);
											grey->b[(w - 1)] = ( (unsigned char)(cv) );
										}
									}
								}
							}
							break;
							case (int)2: {
								int stride2;
								if ((y == 0)) {
									stride2 = 0;
								}
								else {
									stride2 = width;
								}
								{
									int _g13 = 0;
									int _g14 = width;
									while((_g13 < _g14)){
										_g13 = (_g13 + 1);
										int x2 = (_g13 - 1);
										int v1 = (data->b->__get(r) + grey->b->__get((w - stride2)));
										r = (r + rinc);
										{
											w = (w + 1);
											grey->b[(w - 1)] = ( (unsigned char)(v1) );
										}
									}
								}
							}
							break;
							case (int)3: {
								int cv1 = 0;
								int stride3;
								if ((y == 0)) {
									stride3 = 0;
								}
								else {
									stride3 = width;
								}
								{
									int _g15 = 0;
									int _g16 = width;
									while((_g15 < _g16)){
										_g15 = (_g15 + 1);
										int x3 = (_g15 - 1);
										cv1 = ((data->b->__get(r) + ((cv1 + grey->b->__get((w - stride3))) >> 1)) & 255);
										r = (r + rinc);
										{
											w = (w + 1);
											grey->b[(w - 1)] = ( (unsigned char)(cv1) );
										}
									}
								}
							}
							break;
							case (int)4: {
								int stride4 = width;
								int cv2 = 0;
								{
									int _g17 = 0;
									int _g18 = width;
									while((_g17 < _g18)){
										_g17 = (_g17 + 1);
										int x4 = (_g17 - 1);
										int b3;
										if ((y == 0)) {
											b3 = 0;
										}
										else {
											b3 = ( (int)(grey->b->__get((w - stride4))) );
										}
										int c1;
										bool c2;
										if ((x4 != 0)) {
											c2 = (y == 0);
										}
										else {
											c2 = true;
										}
										if (c2) {
											c1 = 0;
										}
										else {
											c1 = ( (int)(grey->b->__get(((w - stride4) - 1))) );
										}
										int k = ((cv2 + b3) - c1);
										int pa = (k - cv2);
										if ((pa < 0)) {
											pa = -(pa);
										}
										int pb = (k - b3);
										if ((pb < 0)) {
											pb = -(pb);
										}
										int pc = (k - c1);
										if ((pc < 0)) {
											pc = -(pc);
										}
										int cv3;
										bool cv4;
										if ((pa <= pb)) {
											cv4 = (pa <= pc);
										}
										else {
											cv4 = false;
										}
										if (cv4) {
											cv3 = cv2;
										}
										else {
											if ((pb <= pc)) {
												cv3 = b3;
											}
											else {
												cv3 = c1;
											}
										}
										cv2 = ((cv3 + data->b->__get(r)) & 255);
										r = (r + rinc);
										{
											w = (w + 1);
											grey->b[(w - 1)] = ( (unsigned char)(cv2) );
										}
									}
								}
							}
							break;
							default:{
								HX_STACK_DO_THROW((HX_("Invalid filter ",1f,17,bf,04) + f));
							}
						}
					}
				}
			}
		}
		else {
			HX_STACK_DO_THROW(HX_("Unsupported color mode",eb,dc,a9,2c));
		}
	}
	return grey;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Tools_obj,extractGrey,return )

 ::haxe::io::Bytes Tools_obj::extract32( ::haxe::ds::List d, ::haxe::io::Bytes bytes, ::Dynamic flipY){
	HX_JUST_GC_STACKFRAME
	 ::Dynamic h = ::format::png::Tools_obj::getHeader(d);
	 ::haxe::io::Bytes bgra;
	if (::hx::IsNull( bytes )) {
		bgra = ::haxe::io::Bytes_obj::alloc(((( (int)(h->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) ) * ( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) )) * 4));
	}
	else {
		bgra = bytes;
	}
	 ::haxe::io::Bytes data = null();
	 ::haxe::io::BytesBuffer fullData = null();
	{
		 ::haxe::ds::_List::ListNode _g_head = d->h;
		while(::hx::IsNotNull( _g_head )){
			 ::format::png::Chunk val = _g_head->item;
			_g_head = _g_head->next;
			 ::format::png::Chunk c = val;
			if ((c->_hx_getIndex() == 2)) {
				 ::haxe::io::Bytes b = c->_hx_getObject(0).StaticCast<  ::haxe::io::Bytes >();
				if (::hx::IsNotNull( fullData )) {
					::Array< unsigned char > b1 = fullData->b;
					::Array< unsigned char > b2 = b->b;
					{
						int _g = 0;
						int _g1 = b->length;
						while((_g < _g1)){
							_g = (_g + 1);
							int i = (_g - 1);
							fullData->b->push(b2->__get(i));
						}
					}
				}
				else {
					if (::hx::IsNull( data )) {
						data = b;
					}
					else {
						fullData =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
						{
							::Array< unsigned char > b11 = fullData->b;
							::Array< unsigned char > b21 = data->b;
							{
								int _g2 = 0;
								int _g3 = data->length;
								while((_g2 < _g3)){
									_g2 = (_g2 + 1);
									int i1 = (_g2 - 1);
									fullData->b->push(b21->__get(i1));
								}
							}
						}
						{
							::Array< unsigned char > b12 = fullData->b;
							::Array< unsigned char > b22 = b->b;
							{
								int _g4 = 0;
								int _g5 = b->length;
								while((_g4 < _g5)){
									_g4 = (_g4 + 1);
									int i2 = (_g4 - 1);
									fullData->b->push(b22->__get(i2));
								}
							}
						}
						data = null();
					}
				}
			}
		}
	}
	if (::hx::IsNotNull( fullData )) {
		data = fullData->getBytes();
	}
	if (::hx::IsNull( data )) {
		HX_STACK_DO_THROW(HX_("Data not found",1f,f6,a3,e4));
	}
	data = ::format::tools::Inflate_obj::run(data);
	int r = 0;
	int w = 0;
	int lineDelta = 0;
	if (( (bool)(flipY) )) {
		lineDelta = (-(( (int)(h->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) )) * 8);
		w = ((( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) ) - 1) * (( (int)(h->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) ) * 4));
	}
	int flipY1;
	if (( (bool)(flipY) )) {
		flipY1 = -1;
	}
	else {
		flipY1 = 1;
	}
	{
		 ::format::png::Color _g6 = h->__Field(HX_("color",63,71,5c,4a),::hx::paccDynamic);
		switch((int)(_g6->_hx_getIndex())){
			case (int)0: {
				bool alpha = _g6->_hx_getBool(0);
				{
					if (::hx::IsNotEq( h->__Field(HX_("colbits",46,9b,c7,e6),::hx::paccDynamic),8 )) {
						HX_STACK_DO_THROW(HX_("Unsupported color mode",eb,dc,a9,2c));
					}
					int width = ( (int)(h->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) );
					int stride;
					if (alpha) {
						stride = 2;
					}
					else {
						stride = 1;
					}
					int stride1 = ((stride * width) + 1);
					if ((data->length < (( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) ) * stride1))) {
						HX_STACK_DO_THROW(HX_("Not enough data",ed,1b,e9,b2));
					}
					int alphvaIdx = -1;
					if (!(alpha)) {
						 ::haxe::ds::_List::ListNode _g_head1 = d->h;
						while(::hx::IsNotNull( _g_head1 )){
							 ::format::png::Chunk val1 = _g_head1->item;
							_g_head1 = _g_head1->next;
							 ::format::png::Chunk t = val1;
							if ((t->_hx_getIndex() == 4)) {
								if ((t->_hx_getString(0) == HX_("tRNS",23,3d,eb,4c))) {
									 ::haxe::io::Bytes data1 = t->_hx_getObject(1).StaticCast<  ::haxe::io::Bytes >();
									if ((data1->length >= 2)) {
										alphvaIdx = ( (int)(data1->b->__get(1)) );
									}
									goto _hx_goto_21;
								}
							}
						}
						_hx_goto_21:;
					}
					{
						int _g7 = 0;
						int _g8 = ( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) );
						while((_g7 < _g8)){
							_g7 = (_g7 + 1);
							int y = (_g7 - 1);
							r = (r + 1);
							int f = ( (int)(data->b->__get((r - 1))) );
							switch((int)(f)){
								case (int)0: {
									if (alpha) {
										int _g9 = 0;
										int _g10 = width;
										while((_g9 < _g10)){
											_g9 = (_g9 + 1);
											int x = (_g9 - 1);
											r = (r + 1);
											int v = ( (int)(data->b->__get((r - 1))) );
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(v) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(v) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(v) );
											}
											{
												w = (w + 1);
												r = (r + 1);
												bgra->b[(w - 1)] = data->b->__get((r - 1));
											}
										}
									}
									else {
										int _g11 = 0;
										int _g12 = width;
										while((_g11 < _g12)){
											_g11 = (_g11 + 1);
											int x1 = (_g11 - 1);
											r = (r + 1);
											int v1 = ( (int)(data->b->__get((r - 1))) );
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(v1) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(v1) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(v1) );
											}
											{
												w = (w + 1);
												int _hx_tmp;
												if ((v1 == alphvaIdx)) {
													_hx_tmp = 0;
												}
												else {
													_hx_tmp = 255;
												}
												bgra->b[(w - 1)] = ( (unsigned char)(_hx_tmp) );
											}
										}
									}
								}
								break;
								case (int)1: {
									int cv = 0;
									int ca = 0;
									if (alpha) {
										int _g13 = 0;
										int _g14 = width;
										while((_g13 < _g14)){
											_g13 = (_g13 + 1);
											int x2 = (_g13 - 1);
											r = (r + 1);
											cv = (cv + data->b->__get((r - 1)));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv) );
											}
											r = (r + 1);
											ca = (ca + data->b->__get((r - 1)));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(ca) );
											}
										}
									}
									else {
										int _g15 = 0;
										int _g16 = width;
										while((_g15 < _g16)){
											_g15 = (_g15 + 1);
											int x3 = (_g15 - 1);
											r = (r + 1);
											cv = (cv + data->b->__get((r - 1)));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv) );
											}
											{
												w = (w + 1);
												int _hx_tmp1;
												if ((cv == alphvaIdx)) {
													_hx_tmp1 = 0;
												}
												else {
													_hx_tmp1 = 255;
												}
												bgra->b[(w - 1)] = ( (unsigned char)(_hx_tmp1) );
											}
										}
									}
								}
								break;
								case (int)2: {
									int stride2;
									if ((y == 0)) {
										stride2 = 0;
									}
									else {
										stride2 = ((width * 4) * flipY1);
									}
									if (alpha) {
										int _g17 = 0;
										int _g18 = width;
										while((_g17 < _g18)){
											_g17 = (_g17 + 1);
											int x4 = (_g17 - 1);
											r = (r + 1);
											int v2 = (data->b->__get((r - 1)) + bgra->b->__get((w - stride2)));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(v2) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(v2) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(v2) );
											}
											r = (r + 1);
											int va = (data->b->__get((r - 1)) + bgra->b->__get((w - stride2)));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(va) );
											}
										}
									}
									else {
										int _g19 = 0;
										int _g20 = width;
										while((_g19 < _g20)){
											_g19 = (_g19 + 1);
											int x5 = (_g19 - 1);
											r = (r + 1);
											int v3 = (data->b->__get((r - 1)) + bgra->b->__get((w - stride2)));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(v3) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(v3) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(v3) );
											}
											{
												w = (w + 1);
												int _hx_tmp2;
												if ((v3 == alphvaIdx)) {
													_hx_tmp2 = 0;
												}
												else {
													_hx_tmp2 = 255;
												}
												bgra->b[(w - 1)] = ( (unsigned char)(_hx_tmp2) );
											}
										}
									}
								}
								break;
								case (int)3: {
									int cv1 = 0;
									int ca1 = 0;
									int stride3;
									if ((y == 0)) {
										stride3 = 0;
									}
									else {
										stride3 = ((width * 4) * flipY1);
									}
									if (alpha) {
										int _g21 = 0;
										int _g22 = width;
										while((_g21 < _g22)){
											_g21 = (_g21 + 1);
											int x6 = (_g21 - 1);
											r = (r + 1);
											cv1 = ((data->b->__get((r - 1)) + ((cv1 + bgra->b->__get((w - stride3))) >> 1)) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv1) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv1) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv1) );
											}
											r = (r + 1);
											ca1 = ((data->b->__get((r - 1)) + ((ca1 + bgra->b->__get((w - stride3))) >> 1)) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(ca1) );
											}
										}
									}
									else {
										int _g23 = 0;
										int _g24 = width;
										while((_g23 < _g24)){
											_g23 = (_g23 + 1);
											int x7 = (_g23 - 1);
											r = (r + 1);
											cv1 = ((data->b->__get((r - 1)) + ((cv1 + bgra->b->__get((w - stride3))) >> 1)) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv1) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv1) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv1) );
											}
											{
												w = (w + 1);
												int _hx_tmp3;
												if ((cv1 == alphvaIdx)) {
													_hx_tmp3 = 0;
												}
												else {
													_hx_tmp3 = 255;
												}
												bgra->b[(w - 1)] = ( (unsigned char)(_hx_tmp3) );
											}
										}
									}
								}
								break;
								case (int)4: {
									int stride4 = ((width * 4) * flipY1);
									int cv2 = 0;
									int ca2 = 0;
									if (alpha) {
										int _g25 = 0;
										int _g26 = width;
										while((_g25 < _g26)){
											_g25 = (_g25 + 1);
											int x8 = (_g25 - 1);
											int b3;
											if ((y == 0)) {
												b3 = 0;
											}
											else {
												b3 = ( (int)(bgra->b->__get((w - stride4))) );
											}
											int c1;
											bool c2;
											if ((x8 != 0)) {
												c2 = (y == 0);
											}
											else {
												c2 = true;
											}
											if (c2) {
												c1 = 0;
											}
											else {
												c1 = ( (int)(bgra->b->__get(((w - stride4) - 4))) );
											}
											int k = ((cv2 + b3) - c1);
											int pa = (k - cv2);
											if ((pa < 0)) {
												pa = -(pa);
											}
											int pb = (k - b3);
											if ((pb < 0)) {
												pb = -(pb);
											}
											int pc = (k - c1);
											if ((pc < 0)) {
												pc = -(pc);
											}
											int cv3;
											bool cv4;
											if ((pa <= pb)) {
												cv4 = (pa <= pc);
											}
											else {
												cv4 = false;
											}
											if (cv4) {
												cv3 = cv2;
											}
											else {
												if ((pb <= pc)) {
													cv3 = b3;
												}
												else {
													cv3 = c1;
												}
											}
											r = (r + 1);
											cv2 = ((cv3 + data->b->__get((r - 1))) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv2) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv2) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv2) );
											}
											int b4;
											if ((y == 0)) {
												b4 = 0;
											}
											else {
												b4 = ( (int)(bgra->b->__get((w - stride4))) );
											}
											int c3;
											bool c4;
											if ((x8 != 0)) {
												c4 = (y == 0);
											}
											else {
												c4 = true;
											}
											if (c4) {
												c3 = 0;
											}
											else {
												c3 = ( (int)(bgra->b->__get(((w - stride4) - 4))) );
											}
											int k1 = ((ca2 + b4) - c3);
											int pa1 = (k1 - ca2);
											if ((pa1 < 0)) {
												pa1 = -(pa1);
											}
											int pb1 = (k1 - b4);
											if ((pb1 < 0)) {
												pb1 = -(pb1);
											}
											int pc1 = (k1 - c3);
											if ((pc1 < 0)) {
												pc1 = -(pc1);
											}
											int ca3;
											bool ca4;
											if ((pa1 <= pb1)) {
												ca4 = (pa1 <= pc1);
											}
											else {
												ca4 = false;
											}
											if (ca4) {
												ca3 = ca2;
											}
											else {
												if ((pb1 <= pc1)) {
													ca3 = b4;
												}
												else {
													ca3 = c3;
												}
											}
											r = (r + 1);
											ca2 = ((ca3 + data->b->__get((r - 1))) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(ca2) );
											}
										}
									}
									else {
										int _g27 = 0;
										int _g28 = width;
										while((_g27 < _g28)){
											_g27 = (_g27 + 1);
											int x9 = (_g27 - 1);
											int b5;
											if ((y == 0)) {
												b5 = 0;
											}
											else {
												b5 = ( (int)(bgra->b->__get((w - stride4))) );
											}
											int c5;
											bool c6;
											if ((x9 != 0)) {
												c6 = (y == 0);
											}
											else {
												c6 = true;
											}
											if (c6) {
												c5 = 0;
											}
											else {
												c5 = ( (int)(bgra->b->__get(((w - stride4) - 4))) );
											}
											int k2 = ((cv2 + b5) - c5);
											int pa2 = (k2 - cv2);
											if ((pa2 < 0)) {
												pa2 = -(pa2);
											}
											int pb2 = (k2 - b5);
											if ((pb2 < 0)) {
												pb2 = -(pb2);
											}
											int pc2 = (k2 - c5);
											if ((pc2 < 0)) {
												pc2 = -(pc2);
											}
											int cv5;
											bool cv6;
											if ((pa2 <= pb2)) {
												cv6 = (pa2 <= pc2);
											}
											else {
												cv6 = false;
											}
											if (cv6) {
												cv5 = cv2;
											}
											else {
												if ((pb2 <= pc2)) {
													cv5 = b5;
												}
												else {
													cv5 = c5;
												}
											}
											r = (r + 1);
											cv2 = ((cv5 + data->b->__get((r - 1))) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv2) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv2) );
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cv2) );
											}
											{
												w = (w + 1);
												int _hx_tmp4;
												if ((cv2 == alphvaIdx)) {
													_hx_tmp4 = 0;
												}
												else {
													_hx_tmp4 = 255;
												}
												bgra->b[(w - 1)] = ( (unsigned char)(_hx_tmp4) );
											}
										}
									}
								}
								break;
								default:{
									HX_STACK_DO_THROW((HX_("Invalid filter ",1f,17,bf,04) + f));
								}
							}
							w = (w + lineDelta);
						}
					}
				}
			}
			break;
			case (int)1: {
				bool alpha1 = _g6->_hx_getBool(0);
				{
					if (::hx::IsNotEq( h->__Field(HX_("colbits",46,9b,c7,e6),::hx::paccDynamic),8 )) {
						HX_STACK_DO_THROW(HX_("Unsupported color mode",eb,dc,a9,2c));
					}
					int width1 = ( (int)(h->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) );
					int stride5;
					if (alpha1) {
						stride5 = 4;
					}
					else {
						stride5 = 3;
					}
					int stride6 = ((stride5 * width1) + 1);
					if ((data->length < (( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) ) * stride6))) {
						HX_STACK_DO_THROW(HX_("Not enough data",ed,1b,e9,b2));
					}
					int alphaRed = -1;
					int alphaGreen = -1;
					int alphaBlue = -1;
					if (!(alpha1)) {
						 ::haxe::ds::_List::ListNode _g_head2 = d->h;
						while(::hx::IsNotNull( _g_head2 )){
							 ::format::png::Chunk val2 = _g_head2->item;
							_g_head2 = _g_head2->next;
							 ::format::png::Chunk t1 = val2;
							if ((t1->_hx_getIndex() == 4)) {
								if ((t1->_hx_getString(0) == HX_("tRNS",23,3d,eb,4c))) {
									 ::haxe::io::Bytes data2 = t1->_hx_getObject(1).StaticCast<  ::haxe::io::Bytes >();
									if ((data2->length >= 6)) {
										alphaRed = ( (int)(data2->b->__get(1)) );
										alphaGreen = ( (int)(data2->b->__get(3)) );
										alphaBlue = ( (int)(data2->b->__get(5)) );
									}
									goto _hx_goto_33;
								}
							}
						}
						_hx_goto_33:;
					}
					int cr = 0;
					int cg = 0;
					int cb = 0;
					int ca5 = 0;
					{
						int _g29 = 0;
						int _g30 = ( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) );
						while((_g29 < _g30)){
							_g29 = (_g29 + 1);
							int y1 = (_g29 - 1);
							r = (r + 1);
							int f1 = ( (int)(data->b->__get((r - 1))) );
							switch((int)(f1)){
								case (int)0: {
									if (alpha1) {
										int _g31 = 0;
										int _g32 = width1;
										while((_g31 < _g32)){
											_g31 = (_g31 + 1);
											int x10 = (_g31 - 1);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = data->b->__get((r + 2));
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = data->b->__get((r + 1));
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = data->b->__get(r);
											}
											{
												w = (w + 1);
												bgra->b[(w - 1)] = data->b->__get((r + 3));
											}
											r = (r + 4);
										}
									}
									else {
										int _g33 = 0;
										int _g34 = width1;
										while((_g33 < _g34)){
											_g33 = (_g33 + 1);
											int x11 = (_g33 - 1);
											{
												w = (w + 1);
												cb = ( (int)(data->b->__get((r + 2))) );
												bgra->b[(w - 1)] = ( (unsigned char)(cb) );
											}
											{
												w = (w + 1);
												cg = ( (int)(data->b->__get((r + 1))) );
												bgra->b[(w - 1)] = ( (unsigned char)(cg) );
											}
											{
												w = (w + 1);
												cr = ( (int)(data->b->__get(r)) );
												bgra->b[(w - 1)] = ( (unsigned char)(cr) );
											}
											{
												w = (w + 1);
												int _hx_tmp5;
												bool _hx_tmp6;
												bool _hx_tmp7;
												if ((cr == alphaRed)) {
													_hx_tmp7 = (cg == alphaGreen);
												}
												else {
													_hx_tmp7 = false;
												}
												if (_hx_tmp7) {
													_hx_tmp6 = (cb == alphaBlue);
												}
												else {
													_hx_tmp6 = false;
												}
												if (_hx_tmp6) {
													_hx_tmp5 = 0;
												}
												else {
													_hx_tmp5 = 255;
												}
												bgra->b[(w - 1)] = ( (unsigned char)(_hx_tmp5) );
											}
											r = (r + 3);
										}
									}
								}
								break;
								case (int)1: {
									ca5 = 0;
									cb = ca5;
									cg = cb;
									cr = cg;
									if (alpha1) {
										int _g35 = 0;
										int _g36 = width1;
										while((_g35 < _g36)){
											_g35 = (_g35 + 1);
											int x12 = (_g35 - 1);
											cb = (cb + data->b->__get((r + 2)));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cb) );
											}
											cg = (cg + data->b->__get((r + 1)));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cg) );
											}
											cr = (cr + data->b->__get(r));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cr) );
											}
											ca5 = (ca5 + data->b->__get((r + 3)));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(ca5) );
											}
											r = (r + 4);
										}
									}
									else {
										int _g37 = 0;
										int _g38 = width1;
										while((_g37 < _g38)){
											_g37 = (_g37 + 1);
											int x13 = (_g37 - 1);
											cb = (cb + data->b->__get((r + 2)));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cb) );
											}
											cg = (cg + data->b->__get((r + 1)));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cg) );
											}
											cr = (cr + data->b->__get(r));
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cr) );
											}
											{
												w = (w + 1);
												int _hx_tmp8;
												bool _hx_tmp9;
												bool _hx_tmp10;
												if ((cr == alphaRed)) {
													_hx_tmp10 = (cg == alphaGreen);
												}
												else {
													_hx_tmp10 = false;
												}
												if (_hx_tmp10) {
													_hx_tmp9 = (cb == alphaBlue);
												}
												else {
													_hx_tmp9 = false;
												}
												if (_hx_tmp9) {
													_hx_tmp8 = 0;
												}
												else {
													_hx_tmp8 = 255;
												}
												bgra->b[(w - 1)] = ( (unsigned char)(_hx_tmp8) );
											}
											r = (r + 3);
										}
									}
								}
								break;
								case (int)2: {
									int stride7;
									if ((y1 == 0)) {
										stride7 = 0;
									}
									else {
										stride7 = ((width1 * 4) * flipY1);
									}
									if (alpha1) {
										int _g39 = 0;
										int _g40 = width1;
										while((_g39 < _g40)){
											_g39 = (_g39 + 1);
											int x14 = (_g39 - 1);
											bgra->b[w] = ( (unsigned char)((data->b->__get((r + 2)) + bgra->b->__get((w - stride7)))) );
											w = (w + 1);
											bgra->b[w] = ( (unsigned char)((data->b->__get((r + 1)) + bgra->b->__get((w - stride7)))) );
											w = (w + 1);
											bgra->b[w] = ( (unsigned char)((data->b->__get(r) + bgra->b->__get((w - stride7)))) );
											w = (w + 1);
											bgra->b[w] = ( (unsigned char)((data->b->__get((r + 3)) + bgra->b->__get((w - stride7)))) );
											w = (w + 1);
											r = (r + 4);
										}
									}
									else {
										int _g41 = 0;
										int _g42 = width1;
										while((_g41 < _g42)){
											_g41 = (_g41 + 1);
											int x15 = (_g41 - 1);
											{
												cb = (data->b->__get((r + 2)) + bgra->b->__get((w - stride7)));
												bgra->b[w] = ( (unsigned char)(cb) );
											}
											w = (w + 1);
											{
												cg = (data->b->__get((r + 1)) + bgra->b->__get((w - stride7)));
												bgra->b[w] = ( (unsigned char)(cg) );
											}
											w = (w + 1);
											{
												cr = (data->b->__get(r) + bgra->b->__get((w - stride7)));
												bgra->b[w] = ( (unsigned char)(cr) );
											}
											w = (w + 1);
											{
												w = (w + 1);
												int _hx_tmp11;
												bool _hx_tmp12;
												bool _hx_tmp13;
												if ((cr == alphaRed)) {
													_hx_tmp13 = (cg == alphaGreen);
												}
												else {
													_hx_tmp13 = false;
												}
												if (_hx_tmp13) {
													_hx_tmp12 = (cb == alphaBlue);
												}
												else {
													_hx_tmp12 = false;
												}
												if (_hx_tmp12) {
													_hx_tmp11 = 0;
												}
												else {
													_hx_tmp11 = 255;
												}
												bgra->b[(w - 1)] = ( (unsigned char)(_hx_tmp11) );
											}
											r = (r + 3);
										}
									}
								}
								break;
								case (int)3: {
									ca5 = 0;
									cb = ca5;
									cg = cb;
									cr = cg;
									int stride8;
									if ((y1 == 0)) {
										stride8 = 0;
									}
									else {
										stride8 = ((width1 * 4) * flipY1);
									}
									if (alpha1) {
										int _g43 = 0;
										int _g44 = width1;
										while((_g43 < _g44)){
											_g43 = (_g43 + 1);
											int x16 = (_g43 - 1);
											cb = ((data->b->__get((r + 2)) + ((cb + bgra->b->__get((w - stride8))) >> 1)) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cb) );
											}
											cg = ((data->b->__get((r + 1)) + ((cg + bgra->b->__get((w - stride8))) >> 1)) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cg) );
											}
											cr = ((data->b->__get(r) + ((cr + bgra->b->__get((w - stride8))) >> 1)) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cr) );
											}
											ca5 = ((data->b->__get((r + 3)) + ((ca5 + bgra->b->__get((w - stride8))) >> 1)) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(ca5) );
											}
											r = (r + 4);
										}
									}
									else {
										int _g45 = 0;
										int _g46 = width1;
										while((_g45 < _g46)){
											_g45 = (_g45 + 1);
											int x17 = (_g45 - 1);
											cb = ((data->b->__get((r + 2)) + ((cb + bgra->b->__get((w - stride8))) >> 1)) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cb) );
											}
											cg = ((data->b->__get((r + 1)) + ((cg + bgra->b->__get((w - stride8))) >> 1)) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cg) );
											}
											cr = ((data->b->__get(r) + ((cr + bgra->b->__get((w - stride8))) >> 1)) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cr) );
											}
											{
												w = (w + 1);
												int _hx_tmp14;
												bool _hx_tmp15;
												bool _hx_tmp16;
												if ((cr == alphaRed)) {
													_hx_tmp16 = (cg == alphaGreen);
												}
												else {
													_hx_tmp16 = false;
												}
												if (_hx_tmp16) {
													_hx_tmp15 = (cb == alphaBlue);
												}
												else {
													_hx_tmp15 = false;
												}
												if (_hx_tmp15) {
													_hx_tmp14 = 0;
												}
												else {
													_hx_tmp14 = 255;
												}
												bgra->b[(w - 1)] = ( (unsigned char)(_hx_tmp14) );
											}
											r = (r + 3);
										}
									}
								}
								break;
								case (int)4: {
									int stride9 = ((width1 * 4) * flipY1);
									ca5 = 0;
									cb = ca5;
									cg = cb;
									cr = cg;
									if (alpha1) {
										int _g47 = 0;
										int _g48 = width1;
										while((_g47 < _g48)){
											_g47 = (_g47 + 1);
											int x18 = (_g47 - 1);
											int b6;
											if ((y1 == 0)) {
												b6 = 0;
											}
											else {
												b6 = ( (int)(bgra->b->__get((w - stride9))) );
											}
											int c7;
											bool c8;
											if ((x18 != 0)) {
												c8 = (y1 == 0);
											}
											else {
												c8 = true;
											}
											if (c8) {
												c7 = 0;
											}
											else {
												c7 = ( (int)(bgra->b->__get(((w - stride9) - 4))) );
											}
											int k3 = ((cb + b6) - c7);
											int pa3 = (k3 - cb);
											if ((pa3 < 0)) {
												pa3 = -(pa3);
											}
											int pb3 = (k3 - b6);
											if ((pb3 < 0)) {
												pb3 = -(pb3);
											}
											int pc3 = (k3 - c7);
											if ((pc3 < 0)) {
												pc3 = -(pc3);
											}
											int cb1;
											bool cb2;
											if ((pa3 <= pb3)) {
												cb2 = (pa3 <= pc3);
											}
											else {
												cb2 = false;
											}
											if (cb2) {
												cb1 = cb;
											}
											else {
												if ((pb3 <= pc3)) {
													cb1 = b6;
												}
												else {
													cb1 = c7;
												}
											}
											cb = ((cb1 + data->b->__get((r + 2))) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cb) );
											}
											int b7;
											if ((y1 == 0)) {
												b7 = 0;
											}
											else {
												b7 = ( (int)(bgra->b->__get((w - stride9))) );
											}
											int c9;
											bool c10;
											if ((x18 != 0)) {
												c10 = (y1 == 0);
											}
											else {
												c10 = true;
											}
											if (c10) {
												c9 = 0;
											}
											else {
												c9 = ( (int)(bgra->b->__get(((w - stride9) - 4))) );
											}
											int k4 = ((cg + b7) - c9);
											int pa4 = (k4 - cg);
											if ((pa4 < 0)) {
												pa4 = -(pa4);
											}
											int pb4 = (k4 - b7);
											if ((pb4 < 0)) {
												pb4 = -(pb4);
											}
											int pc4 = (k4 - c9);
											if ((pc4 < 0)) {
												pc4 = -(pc4);
											}
											int cg1;
											bool cg2;
											if ((pa4 <= pb4)) {
												cg2 = (pa4 <= pc4);
											}
											else {
												cg2 = false;
											}
											if (cg2) {
												cg1 = cg;
											}
											else {
												if ((pb4 <= pc4)) {
													cg1 = b7;
												}
												else {
													cg1 = c9;
												}
											}
											cg = ((cg1 + data->b->__get((r + 1))) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cg) );
											}
											int b8;
											if ((y1 == 0)) {
												b8 = 0;
											}
											else {
												b8 = ( (int)(bgra->b->__get((w - stride9))) );
											}
											int c11;
											bool c12;
											if ((x18 != 0)) {
												c12 = (y1 == 0);
											}
											else {
												c12 = true;
											}
											if (c12) {
												c11 = 0;
											}
											else {
												c11 = ( (int)(bgra->b->__get(((w - stride9) - 4))) );
											}
											int k5 = ((cr + b8) - c11);
											int pa5 = (k5 - cr);
											if ((pa5 < 0)) {
												pa5 = -(pa5);
											}
											int pb5 = (k5 - b8);
											if ((pb5 < 0)) {
												pb5 = -(pb5);
											}
											int pc5 = (k5 - c11);
											if ((pc5 < 0)) {
												pc5 = -(pc5);
											}
											int cr1;
											bool cr2;
											if ((pa5 <= pb5)) {
												cr2 = (pa5 <= pc5);
											}
											else {
												cr2 = false;
											}
											if (cr2) {
												cr1 = cr;
											}
											else {
												if ((pb5 <= pc5)) {
													cr1 = b8;
												}
												else {
													cr1 = c11;
												}
											}
											cr = ((cr1 + data->b->__get(r)) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cr) );
											}
											int b9;
											if ((y1 == 0)) {
												b9 = 0;
											}
											else {
												b9 = ( (int)(bgra->b->__get((w - stride9))) );
											}
											int c13;
											bool c14;
											if ((x18 != 0)) {
												c14 = (y1 == 0);
											}
											else {
												c14 = true;
											}
											if (c14) {
												c13 = 0;
											}
											else {
												c13 = ( (int)(bgra->b->__get(((w - stride9) - 4))) );
											}
											int k6 = ((ca5 + b9) - c13);
											int pa6 = (k6 - ca5);
											if ((pa6 < 0)) {
												pa6 = -(pa6);
											}
											int pb6 = (k6 - b9);
											if ((pb6 < 0)) {
												pb6 = -(pb6);
											}
											int pc6 = (k6 - c13);
											if ((pc6 < 0)) {
												pc6 = -(pc6);
											}
											int ca6;
											bool ca7;
											if ((pa6 <= pb6)) {
												ca7 = (pa6 <= pc6);
											}
											else {
												ca7 = false;
											}
											if (ca7) {
												ca6 = ca5;
											}
											else {
												if ((pb6 <= pc6)) {
													ca6 = b9;
												}
												else {
													ca6 = c13;
												}
											}
											ca5 = ((ca6 + data->b->__get((r + 3))) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(ca5) );
											}
											r = (r + 4);
										}
									}
									else {
										int _g49 = 0;
										int _g50 = width1;
										while((_g49 < _g50)){
											_g49 = (_g49 + 1);
											int x19 = (_g49 - 1);
											int b10;
											if ((y1 == 0)) {
												b10 = 0;
											}
											else {
												b10 = ( (int)(bgra->b->__get((w - stride9))) );
											}
											int c15;
											bool c16;
											if ((x19 != 0)) {
												c16 = (y1 == 0);
											}
											else {
												c16 = true;
											}
											if (c16) {
												c15 = 0;
											}
											else {
												c15 = ( (int)(bgra->b->__get(((w - stride9) - 4))) );
											}
											int k7 = ((cb + b10) - c15);
											int pa7 = (k7 - cb);
											if ((pa7 < 0)) {
												pa7 = -(pa7);
											}
											int pb7 = (k7 - b10);
											if ((pb7 < 0)) {
												pb7 = -(pb7);
											}
											int pc7 = (k7 - c15);
											if ((pc7 < 0)) {
												pc7 = -(pc7);
											}
											int cb3;
											bool cb4;
											if ((pa7 <= pb7)) {
												cb4 = (pa7 <= pc7);
											}
											else {
												cb4 = false;
											}
											if (cb4) {
												cb3 = cb;
											}
											else {
												if ((pb7 <= pc7)) {
													cb3 = b10;
												}
												else {
													cb3 = c15;
												}
											}
											cb = ((cb3 + data->b->__get((r + 2))) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cb) );
											}
											int b13;
											if ((y1 == 0)) {
												b13 = 0;
											}
											else {
												b13 = ( (int)(bgra->b->__get((w - stride9))) );
											}
											int c17;
											bool c18;
											if ((x19 != 0)) {
												c18 = (y1 == 0);
											}
											else {
												c18 = true;
											}
											if (c18) {
												c17 = 0;
											}
											else {
												c17 = ( (int)(bgra->b->__get(((w - stride9) - 4))) );
											}
											int k8 = ((cg + b13) - c17);
											int pa8 = (k8 - cg);
											if ((pa8 < 0)) {
												pa8 = -(pa8);
											}
											int pb8 = (k8 - b13);
											if ((pb8 < 0)) {
												pb8 = -(pb8);
											}
											int pc8 = (k8 - c17);
											if ((pc8 < 0)) {
												pc8 = -(pc8);
											}
											int cg3;
											bool cg4;
											if ((pa8 <= pb8)) {
												cg4 = (pa8 <= pc8);
											}
											else {
												cg4 = false;
											}
											if (cg4) {
												cg3 = cg;
											}
											else {
												if ((pb8 <= pc8)) {
													cg3 = b13;
												}
												else {
													cg3 = c17;
												}
											}
											cg = ((cg3 + data->b->__get((r + 1))) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cg) );
											}
											int b14;
											if ((y1 == 0)) {
												b14 = 0;
											}
											else {
												b14 = ( (int)(bgra->b->__get((w - stride9))) );
											}
											int c19;
											bool c20;
											if ((x19 != 0)) {
												c20 = (y1 == 0);
											}
											else {
												c20 = true;
											}
											if (c20) {
												c19 = 0;
											}
											else {
												c19 = ( (int)(bgra->b->__get(((w - stride9) - 4))) );
											}
											int k9 = ((cr + b14) - c19);
											int pa9 = (k9 - cr);
											if ((pa9 < 0)) {
												pa9 = -(pa9);
											}
											int pb9 = (k9 - b14);
											if ((pb9 < 0)) {
												pb9 = -(pb9);
											}
											int pc9 = (k9 - c19);
											if ((pc9 < 0)) {
												pc9 = -(pc9);
											}
											int cr3;
											bool cr4;
											if ((pa9 <= pb9)) {
												cr4 = (pa9 <= pc9);
											}
											else {
												cr4 = false;
											}
											if (cr4) {
												cr3 = cr;
											}
											else {
												if ((pb9 <= pc9)) {
													cr3 = b14;
												}
												else {
													cr3 = c19;
												}
											}
											cr = ((cr3 + data->b->__get(r)) & 255);
											{
												w = (w + 1);
												bgra->b[(w - 1)] = ( (unsigned char)(cr) );
											}
											{
												w = (w + 1);
												int _hx_tmp17;
												bool _hx_tmp18;
												bool _hx_tmp19;
												if ((cr == alphaRed)) {
													_hx_tmp19 = (cg == alphaGreen);
												}
												else {
													_hx_tmp19 = false;
												}
												if (_hx_tmp19) {
													_hx_tmp18 = (cb == alphaBlue);
												}
												else {
													_hx_tmp18 = false;
												}
												if (_hx_tmp18) {
													_hx_tmp17 = 0;
												}
												else {
													_hx_tmp17 = 255;
												}
												bgra->b[(w - 1)] = ( (unsigned char)(_hx_tmp17) );
											}
											r = (r + 3);
										}
									}
								}
								break;
								default:{
									HX_STACK_DO_THROW((HX_("Invalid filter ",1f,17,bf,04) + f1));
								}
							}
							w = (w + lineDelta);
						}
					}
				}
			}
			break;
			case (int)2: {
				 ::haxe::io::Bytes pal = ::format::png::Tools_obj::getPalette(d);
				if (::hx::IsNull( pal )) {
					HX_STACK_DO_THROW(HX_("PNG Palette is missing",0c,e8,57,88));
				}
				 ::haxe::io::Bytes alpha2 = null();
				{
					 ::haxe::ds::_List::ListNode _g_head3 = d->h;
					while(::hx::IsNotNull( _g_head3 )){
						 ::format::png::Chunk val3 = _g_head3->item;
						_g_head3 = _g_head3->next;
						 ::format::png::Chunk t2 = val3;
						if ((t2->_hx_getIndex() == 4)) {
							if ((t2->_hx_getString(0) == HX_("tRNS",23,3d,eb,4c))) {
								 ::haxe::io::Bytes data3 = t2->_hx_getObject(1).StaticCast<  ::haxe::io::Bytes >();
								alpha2 = data3;
								goto _hx_goto_45;
							}
						}
					}
					_hx_goto_45:;
				}
				bool _hx_tmp20;
				if (::hx::IsNotNull( alpha2 )) {
					_hx_tmp20 = (alpha2->length < (1 << ( (int)(h->__Field(HX_("colbits",46,9b,c7,e6),::hx::paccDynamic)) )));
				}
				else {
					_hx_tmp20 = false;
				}
				if (_hx_tmp20) {
					 ::haxe::io::Bytes alpha21 = ::haxe::io::Bytes_obj::alloc((1 << ( (int)(h->__Field(HX_("colbits",46,9b,c7,e6),::hx::paccDynamic)) )));
					alpha21->blit(0,alpha2,0,alpha2->length);
					alpha21->fill(alpha2->length,(alpha21->length - alpha2->length),255);
					alpha2 = alpha21;
				}
				int width2 = ( (int)(h->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) );
				int stride10 = (::Math_obj::ceil((( (Float)((width2 * ( (int)(h->__Field(HX_("colbits",46,9b,c7,e6),::hx::paccDynamic)) ))) ) / ( (Float)(8) ))) + 1);
				if ((data->length < (( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) ) * stride10))) {
					HX_STACK_DO_THROW(HX_("Not enough data",ed,1b,e9,b2));
				}
				int rline = (stride10 - 1);
				{
					int _g51 = 0;
					int _g52 = ( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) );
					while((_g51 < _g52)){
						_g51 = (_g51 + 1);
						int y2 = (_g51 - 1);
						r = (r + 1);
						int f2 = ( (int)(data->b->__get((r - 1))) );
						if ((f2 == 0)) {
							r = (r + rline);
							continue;
						}
						switch((int)(f2)){
							case (int)1: {
								int c21 = 0;
								{
									int _g53 = 0;
									int _g54 = width2;
									while((_g53 < _g54)){
										_g53 = (_g53 + 1);
										int x20 = (_g53 - 1);
										int v4 = ( (int)(data->b->__get(r)) );
										c21 = (c21 + v4);
										{
											r = (r + 1);
											data->b[(r - 1)] = ( (unsigned char)((c21 & 255)) );
										}
									}
								}
							}
							break;
							case (int)2: {
								int stride11;
								if ((y2 == 0)) {
									stride11 = 0;
								}
								else {
									stride11 = (rline + 1);
								}
								{
									int _g55 = 0;
									int _g56 = width2;
									while((_g55 < _g56)){
										_g55 = (_g55 + 1);
										int x21 = (_g55 - 1);
										int v5 = ( (int)(data->b->__get(r)) );
										data->b[r] = ( (unsigned char)((v5 + data->b->__get((r - stride11)))) );
										r = (r + 1);
									}
								}
							}
							break;
							case (int)3: {
								int c22 = 0;
								int stride12;
								if ((y2 == 0)) {
									stride12 = 0;
								}
								else {
									stride12 = (rline + 1);
								}
								{
									int _g57 = 0;
									int _g58 = width2;
									while((_g57 < _g58)){
										_g57 = (_g57 + 1);
										int x22 = (_g57 - 1);
										int v6 = ( (int)(data->b->__get(r)) );
										c22 = ((v6 + ((c22 + data->b->__get((r - stride12))) >> 1)) & 255);
										{
											r = (r + 1);
											data->b[(r - 1)] = ( (unsigned char)(c22) );
										}
									}
								}
							}
							break;
							case (int)4: {
								int stride13 = (rline + 1);
								int c23 = 0;
								{
									int _g59 = 0;
									int _g60 = width2;
									while((_g59 < _g60)){
										_g59 = (_g59 + 1);
										int x23 = (_g59 - 1);
										int v7 = ( (int)(data->b->__get(r)) );
										int b15;
										if ((y2 == 0)) {
											b15 = 0;
										}
										else {
											b15 = ( (int)(data->b->__get((r - stride13))) );
										}
										int c24;
										bool c25;
										if ((x23 != 0)) {
											c25 = (y2 == 0);
										}
										else {
											c25 = true;
										}
										if (c25) {
											c24 = 0;
										}
										else {
											c24 = ( (int)(data->b->__get(((r - stride13) - 1))) );
										}
										int k10 = ((c23 + b15) - c24);
										int pa10 = (k10 - c23);
										if ((pa10 < 0)) {
											pa10 = -(pa10);
										}
										int pb10 = (k10 - b15);
										if ((pb10 < 0)) {
											pb10 = -(pb10);
										}
										int pc10 = (k10 - c24);
										if ((pc10 < 0)) {
											pc10 = -(pc10);
										}
										int c26;
										bool c27;
										if ((pa10 <= pb10)) {
											c27 = (pa10 <= pc10);
										}
										else {
											c27 = false;
										}
										if (c27) {
											c26 = c23;
										}
										else {
											if ((pb10 <= pc10)) {
												c26 = b15;
											}
											else {
												c26 = c24;
											}
										}
										c23 = ((c26 + v7) & 255);
										{
											r = (r + 1);
											data->b[(r - 1)] = ( (unsigned char)(c23) );
										}
									}
								}
							}
							break;
							default:{
								HX_STACK_DO_THROW((HX_("Invalid filter ",1f,17,bf,04) + f2));
							}
						}
					}
				}
				int r1 = 0;
				if (::hx::IsEq( h->__Field(HX_("colbits",46,9b,c7,e6),::hx::paccDynamic),8 )) {
					int _g61 = 0;
					int _g62 = ( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) );
					while((_g61 < _g62)){
						_g61 = (_g61 + 1);
						int y3 = (_g61 - 1);
						r1 = (r1 + 1);
						{
							int _g63 = 0;
							int _g64 = ( (int)(h->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) );
							while((_g63 < _g64)){
								_g63 = (_g63 + 1);
								int x24 = (_g63 - 1);
								r1 = (r1 + 1);
								int c28 = ( (int)(data->b->__get((r1 - 1))) );
								{
									w = (w + 1);
									bgra->b[(w - 1)] = pal->b->__get(((c28 * 3) + 2));
								}
								{
									w = (w + 1);
									bgra->b[(w - 1)] = pal->b->__get(((c28 * 3) + 1));
								}
								{
									w = (w + 1);
									bgra->b[(w - 1)] = pal->b->__get((c28 * 3));
								}
								{
									w = (w + 1);
									int v8;
									if (::hx::IsNotNull( alpha2 )) {
										v8 = ( (int)(alpha2->b->__get(c28)) );
									}
									else {
										v8 = 255;
									}
									bgra->b[(w - 1)] = ( (unsigned char)(v8) );
								}
							}
						}
						w = (w + lineDelta);
					}
				}
				else {
					if (::hx::IsLess( h->__Field(HX_("colbits",46,9b,c7,e6),::hx::paccDynamic),8 )) {
						int req = ( (int)(h->__Field(HX_("colbits",46,9b,c7,e6),::hx::paccDynamic)) );
						int mask = ((1 << req) - 1);
						{
							int _g65 = 0;
							int _g66 = ( (int)(h->__Field(HX_("height",e7,07,4c,02),::hx::paccDynamic)) );
							while((_g65 < _g66)){
								_g65 = (_g65 + 1);
								int y4 = (_g65 - 1);
								r1 = (r1 + 1);
								int bits = 0;
								int nbits = 0;
								{
									int _g67 = 0;
									int _g68 = ( (int)(h->__Field(HX_("width",06,b6,62,ca),::hx::paccDynamic)) );
									while((_g67 < _g68)){
										_g67 = (_g67 + 1);
										int x25 = (_g67 - 1);
										if ((nbits < req)) {
											r1 = (r1 + 1);
											bits = ((bits << 8) | ( (int)(data->b->__get((r1 - 1))) ));
											nbits = (nbits + 8);
										}
										int c29 = (::hx::UShr(bits,(nbits - req)) & mask);
										nbits = (nbits - req);
										{
											w = (w + 1);
											bgra->b[(w - 1)] = pal->b->__get(((c29 * 3) + 2));
										}
										{
											w = (w + 1);
											bgra->b[(w - 1)] = pal->b->__get(((c29 * 3) + 1));
										}
										{
											w = (w + 1);
											bgra->b[(w - 1)] = pal->b->__get((c29 * 3));
										}
										{
											w = (w + 1);
											int v9;
											if (::hx::IsNotNull( alpha2 )) {
												v9 = ( (int)(alpha2->b->__get(c29)) );
											}
											else {
												v9 = 255;
											}
											bgra->b[(w - 1)] = ( (unsigned char)(v9) );
										}
									}
								}
								w = (w + lineDelta);
							}
						}
					}
					else {
						HX_STACK_DO_THROW( ::Dynamic((h->__Field(HX_("colbits",46,9b,c7,e6),::hx::paccDynamic) + HX_(" indexed bits per pixel not supported",99,37,8f,c1))));
					}
				}
			}
			break;
		}
	}
	return bgra;
}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Tools_obj,extract32,return )

 ::haxe::ds::List Tools_obj::buildGrey(int width,int height, ::haxe::io::Bytes data, ::Dynamic __o_level){
            		 ::Dynamic level = __o_level;
            		if (::hx::IsNull(__o_level)) level = 9;
            	HX_GC_STACKFRAME(&_hx_pos_7ba0aa4bcda37a20_653_buildGrey)
HXLINE( 654)		 ::haxe::io::Bytes rgb = ::haxe::io::Bytes_obj::alloc(((width * height) + height));
HXLINE( 656)		int w = 0;
HXDLIN( 656)		int r = 0;
HXLINE( 657)		{
HXLINE( 657)			int _g = 0;
HXDLIN( 657)			int _g1 = height;
HXDLIN( 657)			while((_g < _g1)){
HXLINE( 657)				_g = (_g + 1);
HXDLIN( 657)				int y = (_g - 1);
HXLINE( 658)				{
HXLINE( 658)					w = (w + 1);
HXDLIN( 658)					rgb->b[(w - 1)] = ( (unsigned char)(0) );
            				}
HXLINE( 659)				{
HXLINE( 659)					int _g2 = 0;
HXDLIN( 659)					int _g3 = width;
HXDLIN( 659)					while((_g2 < _g3)){
HXLINE( 659)						_g2 = (_g2 + 1);
HXDLIN( 659)						int x = (_g2 - 1);
HXLINE( 660)						{
HXLINE( 660)							w = (w + 1);
HXDLIN( 660)							r = (r + 1);
HXDLIN( 660)							rgb->b[(w - 1)] = data->b->__get((r - 1));
            						}
            					}
            				}
            			}
            		}
HXLINE( 662)		 ::haxe::ds::List l =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 663)		l->add(::format::png::Chunk_obj::CHeader( ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("width",06,b6,62,ca),width)
            			->setFixed(1,HX_("interlaced",91,cb,78,d9),false)
            			->setFixed(2,HX_("colbits",46,9b,c7,e6),8)
            			->setFixed(3,HX_("height",e7,07,4c,02),height)
            			->setFixed(4,HX_("color",63,71,5c,4a),::format::png::Color_obj::ColGrey(false)))));
HXLINE( 664)		l->add(::format::png::Chunk_obj::CData(::format::tools::Deflate_obj::run(rgb,level)));
HXLINE( 665)		l->add(::format::png::Chunk_obj::CEnd_dyn());
HXLINE( 666)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Tools_obj,buildGrey,return )

 ::haxe::ds::List Tools_obj::buildIndexed(int width,int height, ::haxe::io::Bytes data, ::haxe::io::Bytes palette, ::Dynamic __o_level){
            		 ::Dynamic level = __o_level;
            		if (::hx::IsNull(__o_level)) level = 9;
            	HX_GC_STACKFRAME(&_hx_pos_7ba0aa4bcda37a20_672_buildIndexed)
HXLINE( 673)		 ::haxe::io::Bytes rgb = ::haxe::io::Bytes_obj::alloc(((width * height) + height));
HXLINE( 674)		int w = 0;
HXDLIN( 674)		int r = 0;
HXLINE( 675)		{
HXLINE( 675)			int _g = 0;
HXDLIN( 675)			int _g1 = height;
HXDLIN( 675)			while((_g < _g1)){
HXLINE( 675)				_g = (_g + 1);
HXDLIN( 675)				int y = (_g - 1);
HXLINE( 676)				{
HXLINE( 676)					w = (w + 1);
HXDLIN( 676)					rgb->b[(w - 1)] = ( (unsigned char)(0) );
            				}
HXLINE( 677)				{
HXLINE( 677)					int _g2 = 0;
HXDLIN( 677)					int _g3 = width;
HXDLIN( 677)					while((_g2 < _g3)){
HXLINE( 677)						_g2 = (_g2 + 1);
HXDLIN( 677)						int x = (_g2 - 1);
HXLINE( 678)						{
HXLINE( 678)							w = (w + 1);
HXDLIN( 678)							r = (r + 1);
HXDLIN( 678)							rgb->b[(w - 1)] = data->b->__get((r - 1));
            						}
            					}
            				}
            			}
            		}
HXLINE( 680)		 ::haxe::ds::List l =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 681)		l->add(::format::png::Chunk_obj::CHeader( ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("width",06,b6,62,ca),width)
            			->setFixed(1,HX_("interlaced",91,cb,78,d9),false)
            			->setFixed(2,HX_("colbits",46,9b,c7,e6),8)
            			->setFixed(3,HX_("height",e7,07,4c,02),height)
            			->setFixed(4,HX_("color",63,71,5c,4a),::format::png::Color_obj::ColIndexed_dyn()))));
HXLINE( 682)		l->add(::format::png::Chunk_obj::CPalette(palette));
HXLINE( 683)		l->add(::format::png::Chunk_obj::CData(::format::tools::Deflate_obj::run(rgb,level)));
HXLINE( 684)		l->add(::format::png::Chunk_obj::CEnd_dyn());
HXLINE( 685)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Tools_obj,buildIndexed,return )

 ::haxe::ds::List Tools_obj::buildRGB(int width,int height, ::haxe::io::Bytes data, ::Dynamic __o_level){
            		 ::Dynamic level = __o_level;
            		if (::hx::IsNull(__o_level)) level = 9;
            	HX_GC_STACKFRAME(&_hx_pos_7ba0aa4bcda37a20_691_buildRGB)
HXLINE( 692)		 ::haxe::io::Bytes rgb = ::haxe::io::Bytes_obj::alloc((((width * height) * 3) + height));
HXLINE( 694)		int w = 0;
HXDLIN( 694)		int r = 0;
HXLINE( 695)		{
HXLINE( 695)			int _g = 0;
HXDLIN( 695)			int _g1 = height;
HXDLIN( 695)			while((_g < _g1)){
HXLINE( 695)				_g = (_g + 1);
HXDLIN( 695)				int y = (_g - 1);
HXLINE( 696)				{
HXLINE( 696)					w = (w + 1);
HXDLIN( 696)					rgb->b[(w - 1)] = ( (unsigned char)(0) );
            				}
HXLINE( 697)				{
HXLINE( 697)					int _g2 = 0;
HXDLIN( 697)					int _g3 = width;
HXDLIN( 697)					while((_g2 < _g3)){
HXLINE( 697)						_g2 = (_g2 + 1);
HXDLIN( 697)						int x = (_g2 - 1);
HXLINE( 698)						{
HXLINE( 698)							w = (w + 1);
HXDLIN( 698)							rgb->b[(w - 1)] = data->b->__get((r + 2));
            						}
HXLINE( 699)						{
HXLINE( 699)							w = (w + 1);
HXDLIN( 699)							rgb->b[(w - 1)] = data->b->__get((r + 1));
            						}
HXLINE( 700)						{
HXLINE( 700)							w = (w + 1);
HXDLIN( 700)							rgb->b[(w - 1)] = data->b->__get(r);
            						}
HXLINE( 701)						r = (r + 3);
            					}
            				}
            			}
            		}
HXLINE( 704)		 ::haxe::ds::List l =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 705)		l->add(::format::png::Chunk_obj::CHeader( ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("width",06,b6,62,ca),width)
            			->setFixed(1,HX_("interlaced",91,cb,78,d9),false)
            			->setFixed(2,HX_("colbits",46,9b,c7,e6),8)
            			->setFixed(3,HX_("height",e7,07,4c,02),height)
            			->setFixed(4,HX_("color",63,71,5c,4a),::format::png::Color_obj::ColTrue(false)))));
HXLINE( 706)		l->add(::format::png::Chunk_obj::CData(::format::tools::Deflate_obj::run(rgb,level)));
HXLINE( 707)		l->add(::format::png::Chunk_obj::CEnd_dyn());
HXLINE( 708)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Tools_obj,buildRGB,return )

 ::haxe::ds::List Tools_obj::build32ARGB(int width,int height, ::haxe::io::Bytes data, ::Dynamic __o_level){
            		 ::Dynamic level = __o_level;
            		if (::hx::IsNull(__o_level)) level = 9;
            	HX_GC_STACKFRAME(&_hx_pos_7ba0aa4bcda37a20_714_build32ARGB)
HXLINE( 715)		 ::haxe::io::Bytes rgba = ::haxe::io::Bytes_obj::alloc((((width * height) * 4) + height));
HXLINE( 717)		int w = 0;
HXDLIN( 717)		int r = 0;
HXLINE( 718)		{
HXLINE( 718)			int _g = 0;
HXDLIN( 718)			int _g1 = height;
HXDLIN( 718)			while((_g < _g1)){
HXLINE( 718)				_g = (_g + 1);
HXDLIN( 718)				int y = (_g - 1);
HXLINE( 719)				{
HXLINE( 719)					w = (w + 1);
HXDLIN( 719)					rgba->b[(w - 1)] = ( (unsigned char)(0) );
            				}
HXLINE( 720)				{
HXLINE( 720)					int _g2 = 0;
HXDLIN( 720)					int _g3 = width;
HXDLIN( 720)					while((_g2 < _g3)){
HXLINE( 720)						_g2 = (_g2 + 1);
HXDLIN( 720)						int x = (_g2 - 1);
HXLINE( 721)						{
HXLINE( 721)							w = (w + 1);
HXDLIN( 721)							rgba->b[(w - 1)] = data->b->__get((r + 1));
            						}
HXLINE( 722)						{
HXLINE( 722)							w = (w + 1);
HXDLIN( 722)							rgba->b[(w - 1)] = data->b->__get((r + 2));
            						}
HXLINE( 723)						{
HXLINE( 723)							w = (w + 1);
HXDLIN( 723)							rgba->b[(w - 1)] = data->b->__get((r + 3));
            						}
HXLINE( 724)						{
HXLINE( 724)							w = (w + 1);
HXDLIN( 724)							rgba->b[(w - 1)] = data->b->__get(r);
            						}
HXLINE( 725)						r = (r + 4);
            					}
            				}
            			}
            		}
HXLINE( 728)		 ::haxe::ds::List l =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 729)		l->add(::format::png::Chunk_obj::CHeader( ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("width",06,b6,62,ca),width)
            			->setFixed(1,HX_("interlaced",91,cb,78,d9),false)
            			->setFixed(2,HX_("colbits",46,9b,c7,e6),8)
            			->setFixed(3,HX_("height",e7,07,4c,02),height)
            			->setFixed(4,HX_("color",63,71,5c,4a),::format::png::Color_obj::ColTrue(true)))));
HXLINE( 730)		l->add(::format::png::Chunk_obj::CData(::format::tools::Deflate_obj::run(rgba,level)));
HXLINE( 731)		l->add(::format::png::Chunk_obj::CEnd_dyn());
HXLINE( 732)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Tools_obj,build32ARGB,return )

 ::haxe::ds::List Tools_obj::build32BGRA(int width,int height, ::haxe::io::Bytes data, ::Dynamic __o_level){
            		 ::Dynamic level = __o_level;
            		if (::hx::IsNull(__o_level)) level = 9;
            	HX_GC_STACKFRAME(&_hx_pos_7ba0aa4bcda37a20_738_build32BGRA)
HXLINE( 739)		 ::haxe::io::Bytes rgba = ::haxe::io::Bytes_obj::alloc((((width * height) * 4) + height));
HXLINE( 741)		int w = 0;
HXDLIN( 741)		int r = 0;
HXLINE( 742)		{
HXLINE( 742)			int _g = 0;
HXDLIN( 742)			int _g1 = height;
HXDLIN( 742)			while((_g < _g1)){
HXLINE( 742)				_g = (_g + 1);
HXDLIN( 742)				int y = (_g - 1);
HXLINE( 743)				{
HXLINE( 743)					w = (w + 1);
HXDLIN( 743)					rgba->b[(w - 1)] = ( (unsigned char)(0) );
            				}
HXLINE( 744)				{
HXLINE( 744)					int _g2 = 0;
HXDLIN( 744)					int _g3 = width;
HXDLIN( 744)					while((_g2 < _g3)){
HXLINE( 744)						_g2 = (_g2 + 1);
HXDLIN( 744)						int x = (_g2 - 1);
HXLINE( 745)						{
HXLINE( 745)							w = (w + 1);
HXDLIN( 745)							rgba->b[(w - 1)] = data->b->__get((r + 2));
            						}
HXLINE( 746)						{
HXLINE( 746)							w = (w + 1);
HXDLIN( 746)							rgba->b[(w - 1)] = data->b->__get((r + 1));
            						}
HXLINE( 747)						{
HXLINE( 747)							w = (w + 1);
HXDLIN( 747)							rgba->b[(w - 1)] = data->b->__get(r);
            						}
HXLINE( 748)						{
HXLINE( 748)							w = (w + 1);
HXDLIN( 748)							rgba->b[(w - 1)] = data->b->__get((r + 3));
            						}
HXLINE( 749)						r = (r + 4);
            					}
            				}
            			}
            		}
HXLINE( 752)		 ::haxe::ds::List l =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE( 753)		l->add(::format::png::Chunk_obj::CHeader( ::Dynamic(::hx::Anon_obj::Create(5)
            			->setFixed(0,HX_("width",06,b6,62,ca),width)
            			->setFixed(1,HX_("interlaced",91,cb,78,d9),false)
            			->setFixed(2,HX_("colbits",46,9b,c7,e6),8)
            			->setFixed(3,HX_("height",e7,07,4c,02),height)
            			->setFixed(4,HX_("color",63,71,5c,4a),::format::png::Color_obj::ColTrue(true)))));
HXLINE( 754)		l->add(::format::png::Chunk_obj::CData(::format::tools::Deflate_obj::run(rgba,level)));
HXLINE( 755)		l->add(::format::png::Chunk_obj::CEnd_dyn());
HXLINE( 756)		return l;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Tools_obj,build32BGRA,return )


Tools_obj::Tools_obj()
{
}

bool Tools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"filter") ) { outValue = filter_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"buildRGB") ) { outValue = buildRGB_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getHeader") ) { outValue = getHeader_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"extract32") ) { outValue = extract32_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"buildGrey") ) { outValue = buildGrey_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"getPalette") ) { outValue = getPalette_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"extractGrey") ) { outValue = extractGrey_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"build32ARGB") ) { outValue = build32ARGB_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"build32BGRA") ) { outValue = build32BGRA_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"reverseBytes") ) { outValue = reverseBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"buildIndexed") ) { outValue = buildIndexed_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Tools_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Tools_obj_sStaticStorageInfo = 0;
#endif

::hx::Class Tools_obj::__mClass;

static ::String Tools_obj_sStaticFields[] = {
	HX_("getHeader",c3,92,56,79),
	HX_("getPalette",85,18,c5,bb),
	HX_("filter",b8,1f,35,85),
	HX_("reverseBytes",e9,e3,fc,d3),
	HX_("extractGrey",40,e9,39,59),
	HX_("extract32",20,74,f3,90),
	HX_("buildGrey",ad,09,a8,e4),
	HX_("buildIndexed",63,8a,17,f3),
	HX_("buildRGB",7f,4c,b6,53),
	HX_("build32ARGB",19,2f,4e,75),
	HX_("build32BGRA",81,16,ef,75),
	::String(null())
};

void Tools_obj::__register()
{
	Tools_obj _hx_dummy;
	Tools_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("format.png.Tools",7f,40,56,da);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Tools_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Tools_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Tools_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tools_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace format
} // end namespace png
