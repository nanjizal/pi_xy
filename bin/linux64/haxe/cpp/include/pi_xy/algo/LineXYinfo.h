// Generated by Haxe 4.3.3
#ifndef INCLUDED_pi_xy_algo_LineXYinfo
#define INCLUDED_pi_xy_algo_LineXYinfo

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_051ee70560457241_31_new)
HX_DECLARE_CLASS2(pi_xy,algo,LineXYinfo)

namespace pi_xy{
namespace algo{


class HXCPP_CLASS_ATTRIBUTES LineXYinfo_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef LineXYinfo_obj OBJ_;
		LineXYinfo_obj();

	public:
		enum { _hx_ClassId = 0x1a892c9d };

		void __construct(Float px,Float py,Float qx,Float qy,Float thick);
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pi_xy.algo.LineXYinfo")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pi_xy.algo.LineXYinfo"); }

		inline static ::hx::ObjectPtr< LineXYinfo_obj > __new(Float px,Float py,Float qx,Float qy,Float thick) {
			::hx::ObjectPtr< LineXYinfo_obj > __this = new LineXYinfo_obj();
			__this->__construct(px,py,qx,qy,thick);
			return __this;
		}

		inline static ::hx::ObjectPtr< LineXYinfo_obj > __alloc(::hx::Ctx *_hx_ctx,Float px,Float py,Float qx,Float qy,Float thick) {
			LineXYinfo_obj *__this = (LineXYinfo_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LineXYinfo_obj), false, "pi_xy.algo.LineXYinfo"));
			*(void **)__this = LineXYinfo_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_051ee70560457241_31_new)
HXLINE(  32)		( ( ::pi_xy::algo::LineXYinfo)(__this) )->px = px;
HXLINE(  33)		( ( ::pi_xy::algo::LineXYinfo)(__this) )->py = py;
HXLINE(  34)		( ( ::pi_xy::algo::LineXYinfo)(__this) )->qx = qx;
HXLINE(  35)		( ( ::pi_xy::algo::LineXYinfo)(__this) )->qy = qy;
HXLINE(  36)		( ( ::pi_xy::algo::LineXYinfo)(__this) )->thick = thick;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~LineXYinfo_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("LineXYinfo",03,25,91,4a); }

		Float px;
		Float py;
		Float qx;
		Float qy;
		Float thick;
};

} // end namespace pi_xy
} // end namespace algo

#endif /* INCLUDED_pi_xy_algo_LineXYinfo */ 
