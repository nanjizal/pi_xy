// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_app_Application
#define INCLUDED_nme_app_Application

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(nme,app,Application)
HX_DECLARE_CLASS2(nme,app,IPollClient)
HX_DECLARE_CLASS2(nme,app,Window)
HX_DECLARE_CLASS2(sys,thread,Mutex)

namespace nme{
namespace app{


class HXCPP_CLASS_ATTRIBUTES Application_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Application_obj OBJ_;
		Application_obj();

	public:
		enum { _hx_ClassId = 0x26273011 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nme.app.Application")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"nme.app.Application"); }

		inline static ::hx::ObjectPtr< Application_obj > __new() {
			::hx::ObjectPtr< Application_obj > __this = new Application_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Application_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Application_obj *__this = (Application_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Application_obj), false, "nme.app.Application"));
			*(void **)__this = Application_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Application_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Application",30,43,71,0e); }

		static void __boot();
		static int OrientationPortrait;
		static int OrientationPortraitUpsideDown;
		static int OrientationLandscapeRight;
		static int OrientationLandscapeLeft;
		static int OrientationFaceUp;
		static int OrientationFaceDown;
		static int OrientationPortraitAny;
		static int OrientationLandscapeAny;
		static int OrientationAny;
		static int FULLSCREEN;
		static int BORDERLESS;
		static int RESIZABLE;
		static int HARDWARE;
		static int VSYNC;
		static int HW_AA;
		static int HW_AA_HIRES;
		static int DEPTH_BUFFER;
		static int STENCIL_BUFFER;
		static int SINGLE_INSTANCE;
		static int SCALE_BASE;
		static int HARDWARE_METAL;
		static int ALWAYS_ON_TOP;
		static int HIGH_DPI;
		static  ::Dynamic nmeFrameHandle;
		static  ::nme::app::Window nmeWindow;
		static bool silentRecreate;
		static bool sIsInit;
		static int initHeight;
		static int initWidth;
		static Float initFrameRate;
		static ::String company;
		static ::String version;
		static ::String packageName;
		static ::String file;
		static ::String build;
		static int ndllVersion;
		static ::String nmeStateVersion;
		static int bits;
		static  ::Dynamic onQuit;
		static Dynamic onQuit_dyn() { return onQuit;}
		static bool nmeQuitting;
		static  ::Dynamic asyncPing;
		static Dynamic asyncPing_dyn() { return asyncPing;}
		static ::Array< ::Dynamic> pollClientList;
		static ::Array< ::Dynamic> mainThreadJobs;
		static  ::sys::thread::Mutex mainThreadJobMutex;
		static void createWindow( ::Dynamic inOnLoaded, ::Dynamic inParams,::hx::Null< bool >  isSecondary);
		static ::Dynamic createWindow_dyn();

		static void close();
		static ::Dynamic close_dyn();

		static void addPollClient(::Dynamic client,::hx::Null< bool >  inAtEnd);
		static ::Dynamic addPollClient_dyn();

		static void removePollClient(::Dynamic client);
		static ::Dynamic removePollClient_dyn();

		static void pollThreadJobs();
		static ::Dynamic pollThreadJobs_dyn();

		static void pollClients(Float timestamp);
		static ::Dynamic pollClients_dyn();

		static Float getNextWake(Float timestamp);
		static ::Dynamic getNextWake_dyn();

		static void setFixedOrientation(int inOrientation);
		static ::Dynamic setFixedOrientation_dyn();

		static void exit();
		static ::Dynamic exit_dyn();

		static void forceClose();
		static ::Dynamic forceClose_dyn();

		static void pause();
		static ::Dynamic pause_dyn();

		static void setNativeWindow( ::Dynamic window);
		static ::Dynamic setNativeWindow_dyn();

		static void runOnMainThread( ::Dynamic inCallback);
		static ::Dynamic runOnMainThread_dyn();

		static void postUICallback( ::Dynamic inCallback);
		static ::Dynamic postUICallback_dyn();

		static void resume();
		static ::Dynamic resume_dyn();

		static void setIcon(::String path);
		static ::Dynamic setIcon_dyn();

		static void setPackage(::String inCompany,::String inFile,::String inPack,::String inVersion);
		static ::Dynamic setPackage_dyn();

		static ::String get_build();
		static ::Dynamic get_build_dyn();

		static int get_ndllVersion();
		static ::Dynamic get_ndllVersion_dyn();

		static ::String get_nmeStateVersion();
		static ::Dynamic get_nmeStateVersion_dyn();

		static int get_bits();
		static ::Dynamic get_bits_dyn();

		static ::cpp::Function< void  (::String,::String,::String,::String) > nme_set_package;
		static Dynamic nme_set_package_dyn() { return nme_set_package;}
		static ::cpp::Function< void  () > nme_pause_animation;
		static Dynamic nme_pause_animation_dyn() { return nme_pause_animation;}
		static ::cpp::Function< void  () > nme_resume_animation;
		static Dynamic nme_resume_animation_dyn() { return nme_resume_animation;}
		static ::cpp::Function< int  () > nme_get_ndll_version;
		static Dynamic nme_get_ndll_version_dyn() { return nme_get_ndll_version;}
		static  ::Dynamic nme_get_nme_state_version;
		static Dynamic nme_get_nme_state_version_dyn() { return nme_get_nme_state_version;}
		static ::cpp::Function< void  (int) > nme_stage_set_fixed_orientation;
		static Dynamic nme_stage_set_fixed_orientation_dyn() { return nme_stage_set_fixed_orientation;}
		static ::cpp::Function< int  () > nme_get_bits;
		static Dynamic nme_get_bits_dyn() { return nme_get_bits;}
		static ::cpp::Function< void  ( ::hx::Object *) > nme_set_native_window;
		static Dynamic nme_set_native_window_dyn() { return nme_set_native_window;}
};

} // end namespace nme
} // end namespace app

#endif /* INCLUDED_nme_app_Application */ 
