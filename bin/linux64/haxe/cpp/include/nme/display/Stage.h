// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_display_Stage
#define INCLUDED_nme_display_Stage

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_display_DisplayObjectContainer
#include <nme/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_nme_app_IAppEventHandler
#include <nme/app/IAppEventHandler.h>
#endif
#ifndef INCLUDED_nme_app_IPollClient
#include <nme/app/IPollClient.h>
#endif
#ifndef INCLUDED_140af2720004096a
#define INCLUDED_140af2720004096a
#include "nme/Event.h"
#endif
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS1(haxe,StackItem)
HX_DECLARE_CLASS2(haxe,ds,IntMap)
HX_DECLARE_CLASS2(nme,app,FrameTimer)
HX_DECLARE_CLASS2(nme,app,IAppEventHandler)
HX_DECLARE_CLASS2(nme,app,IPollClient)
HX_DECLARE_CLASS2(nme,app,Window)
HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,InteractiveObject)
HX_DECLARE_CLASS2(nme,display,MovieClip)
HX_DECLARE_CLASS2(nme,display,Sprite)
HX_DECLARE_CLASS2(nme,display,Stage)
HX_DECLARE_CLASS2(nme,display,StageAlign)
HX_DECLARE_CLASS2(nme,display,StageDisplayState)
HX_DECLARE_CLASS2(nme,display,StageQuality)
HX_DECLARE_CLASS2(nme,display,StageScaleMode)
HX_DECLARE_CLASS2(nme,display,TouchInfo)
HX_DECLARE_CLASS2(nme,events,Event)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,events,MouseEvent)
HX_DECLARE_CLASS2(nme,geom,Point)
HX_DECLARE_CLASS2(nme,geom,Rectangle)
HX_DECLARE_CLASS2(nme,media,StageVideo)
HX_DECLARE_CLASS2(sys,thread,Lock)
HX_DECLARE_CLASS3(sys,thread,_Thread,HaxeThread)

namespace nme{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Stage_obj : public  ::nme::display::DisplayObjectContainer_obj
{
	public:
		typedef  ::nme::display::DisplayObjectContainer_obj super;
		typedef Stage_obj OBJ_;
		Stage_obj();

	public:
		enum { _hx_ClassId = 0x5b647d22 };

		void __construct( ::nme::app::Window inWindow);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.display.Stage")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.display.Stage"); }
		static ::hx::ObjectPtr< Stage_obj > __new( ::nme::app::Window inWindow);
		static ::hx::ObjectPtr< Stage_obj > __alloc(::hx::Ctx *_hx_ctx, ::nme::app::Window inWindow);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Stage_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("Stage",9e,da,38,17); }

		static void __boot();
		static Float nmeEarlyWakeup;
		static int OrientationPortrait;
		static int OrientationPortraitUpsideDown;
		static int OrientationLandscapeRight;
		static int OrientationLandscapeLeft;
		static int OrientationFaceUp;
		static int OrientationFaceDown;
		static int OrientationPortraitAny;
		static int OrientationLandscapeAny;
		static int OrientationAny;
		static int OrientationUseFunction;
		static bool firstStage;
		static int efLeftDown;
		static int efShiftDown;
		static int efCtrlDown;
		static int efAltDown;
		static int efCommandDown;
		static int efLocationRight;
		static int efNoNativeClick;
		static ::Array< ::String > nmeMouseChanges;
		static ::Array< ::String > nmeTouchChanges;
		static ::Array< ::String > sClickEvents;
		static ::Array< ::String > sDownEvents;
		static ::Array< ::String > sUpEvents;
		static bool nmeQuitting;
		static ::Dynamic getOrientation;
		static inline ::Dynamic &getOrientation_dyn() {return getOrientation; }

		static ::Dynamic getNormalOrientation;
		static inline ::Dynamic &getNormalOrientation_dyn() {return getNormalOrientation; }

		static void setFixedOrientation(int inOrientation);
		static ::Dynamic setFixedOrientation_dyn();

		static ::Dynamic shouldRotateInterface;
		static inline ::Dynamic &shouldRotateInterface_dyn() {return shouldRotateInterface; }

		static ::cpp::Function< void  ( ::hx::Object *) > nme_render_stage;
		static Dynamic nme_render_stage_dyn() { return nme_render_stage;}
		static ::cpp::Function< void  (bool) > nme_set_render_gc_free;
		static Dynamic nme_set_render_gc_free_dyn() { return nme_set_render_gc_free;}
		static ::cpp::Function< int  ( ::hx::Object *) > nme_stage_get_focus_id;
		static Dynamic nme_stage_get_focus_id_dyn() { return nme_stage_get_focus_id;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > nme_stage_set_focus;
		static Dynamic nme_stage_set_focus_dyn() { return nme_stage_set_focus;}
		static ::cpp::Function< bool  ( ::hx::Object *) > nme_stage_get_focus_rect;
		static Dynamic nme_stage_get_focus_rect_dyn() { return nme_stage_get_focus_rect;}
		static ::cpp::Function< void  ( ::hx::Object *,bool) > nme_stage_set_focus_rect;
		static Dynamic nme_stage_set_focus_rect_dyn() { return nme_stage_set_focus_rect;}
		static ::cpp::Function< void  ( ::hx::Object *,int,int) > nme_stage_resize_window;
		static Dynamic nme_stage_resize_window_dyn() { return nme_stage_resize_window;}
		static ::cpp::Function< void  ( ::hx::Object *,bool) > nme_stage_show_cursor;
		static Dynamic nme_stage_show_cursor_dyn() { return nme_stage_show_cursor;}
		static ::cpp::Function< bool  ( ::hx::Object *) > nme_stage_get_capture_mouse;
		static Dynamic nme_stage_get_capture_mouse_dyn() { return nme_stage_get_capture_mouse;}
		static ::cpp::Function< bool  ( ::hx::Object *,bool) > nme_stage_set_capture_mouse;
		static Dynamic nme_stage_set_capture_mouse_dyn() { return nme_stage_set_capture_mouse;}
		static ::cpp::Function< int  () > nme_stage_get_orientation;
		static Dynamic nme_stage_get_orientation_dyn() { return nme_stage_get_orientation;}
		static ::cpp::Function< int  () > nme_stage_get_normal_orientation;
		static Dynamic nme_stage_get_normal_orientation_dyn() { return nme_stage_get_normal_orientation;}
		static ::cpp::Function< bool  ( ::hx::Object *) > nme_stage_check_cache;
		static Dynamic nme_stage_check_cache_dyn() { return nme_stage_check_cache;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > nme_stage_get_safe_rect;
		static Dynamic nme_stage_get_safe_rect_dyn() { return nme_stage_get_safe_rect;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > nme_set_stage_mouse_handler_native;
		static Dynamic nme_set_stage_mouse_handler_native_dyn() { return nme_set_stage_mouse_handler_native;}
		 ::nme::app::Window window;
		 ::Dynamic onCloseRequest;
		Dynamic onCloseRequest_dyn() { return onCloseRequest;}
		 ::Dynamic exceptionHandler;
		Dynamic exceptionHandler_dyn() { return exceptionHandler;}
		bool pauseWhenDeactivated;
		 ::nme::display::MovieClip current;
		 ::nme::geom::Rectangle safeRect;
		bool invalid;
		::Array< ::Dynamic> stageVideos;
		::Array< ::Dynamic> nmeJoyAxisData;
		 ::nme::geom::Rectangle nmeDragBounds;
		 ::nme::display::Sprite nmeDragObject;
		Float nmeDragOffsetX;
		Float nmeDragOffsetY;
		::Array< ::Dynamic> nmeFocusOverObjects;
		Float nmeFramePeriod;
		Float nmeLastClickTime;
		::Array< ::Dynamic> nmeLastDown;
		Float nmeLastRender;
		::Array< ::Dynamic> nmeMouseOverObjects;
		 ::haxe::ds::IntMap nmeTouchInfo;
		 ::nme::app::FrameTimer nmeFrameTimer;
		 ::nme::events::Event nmeEnterFrameEvent;
		 ::nme::events::Event nmeRenderEvent;
		::Array< ::String > nmeDropItems;
		 ::nme::display::MovieClip nmeCurrent;
		::Array< ::Dynamic> nmePrenderListeners;
		bool nmeIsMainStage;
		int nmePreemptiveGcFreq;
		int nmePreemptiveGcSince;
		 ::sys::thread::Lock nmeCollectionLock;
		 ::sys::thread::_Thread::HaxeThread nmeCollectionAgency;
		::Array< int > nmeFrameAlloc;
		int nmeLastCurrentMemory;
		bool nmeLastPreempt;
		int nmeFrameMemIndex;
		void dispose();

		virtual void invalidate();
		::Dynamic invalidate_dyn();

		bool isDisplayListDirty();
		::Dynamic isDisplayListDirty_dyn();

		 ::Dynamic get_onQuit();
		::Dynamic get_onQuit_dyn();

		 ::Dynamic set_onQuit( ::Dynamic val);
		::Dynamic set_onQuit_dyn();

		void addEventListener(::String type, ::Dynamic listener,::hx::Null< bool >  useCapture,::hx::Null< int >  priority,::hx::Null< bool >  useWeakReference);

		void nmeCheckFocusInOuts(::cpp::Pointer<  nme::Event > inEvent,::Array< ::Dynamic> inStack);
		::Dynamic nmeCheckFocusInOuts_dyn();

		bool nmeCheckInOuts( ::nme::events::MouseEvent inEvent,::Array< ::Dynamic> inStack, ::nme::display::TouchInfo touchInfo);
		::Dynamic nmeCheckInOuts_dyn();

		void addPrerenderListener( ::Dynamic listener);
		::Dynamic addPrerenderListener_dyn();

		void removePrerenderListener( ::Dynamic listener);
		::Dynamic removePrerenderListener_dyn();

		void onText(::cpp::Pointer<  nme::Event > inEvent,::String type);
		::Dynamic onText_dyn();

		void onKey(::cpp::Pointer<  nme::Event > inEvent,::String type);
		::Dynamic onKey_dyn();

		void onMouse(::cpp::Pointer<  nme::Event > inEvent,::String inType,bool inFromMouse);
		::Dynamic onMouse_dyn();

		void onUnhandledException( ::Dynamic exception,::Array< ::Dynamic> stack);
		::Dynamic onUnhandledException_dyn();

		void onTouch(::cpp::Pointer<  nme::Event > inEvent,::String inType);
		::Dynamic onTouch_dyn();

		void onResize(int width,int height);
		::Dynamic onResize_dyn();

		void onRender(bool inFrameDue);
		::Dynamic onRender_dyn();

		void onDisplayObjectFocus(::cpp::Pointer<  nme::Event > inEvent);
		::Dynamic onDisplayObjectFocus_dyn();

		void onInputFocus(bool acquired);
		::Dynamic onInputFocus_dyn();

		bool onRotateRequest(int inDirection);
		::Dynamic onRotateRequest_dyn();

		void onChange(::cpp::Pointer<  nme::Event > inEvent);
		::Dynamic onChange_dyn();

		void onScroll(::cpp::Pointer<  nme::Event > inEvent);
		::Dynamic onScroll_dyn();

		void onWindowClose();
		::Dynamic onWindowClose_dyn();

		void onDrop(::cpp::Pointer<  nme::Event > inEvent);
		::Dynamic onDrop_dyn();

		void onDpiChanged(::cpp::Pointer<  nme::Event > inEvent);
		::Dynamic onDpiChanged_dyn();

		void onActive(bool inActive);
		::Dynamic onActive_dyn();

		void onWindowMoved(int inX,int inY);
		::Dynamic onWindowMoved_dyn();

		void onWindowEnter();
		::Dynamic onWindowEnter_dyn();

		void onWindowLeave();
		::Dynamic onWindowLeave_dyn();

		int axismap(int code);
		::Dynamic axismap_dyn();

		int buttonmap(int code);
		::Dynamic buttonmap_dyn();

		void onJoystick(::cpp::Pointer<  nme::Event > inEvent,::String inType);
		::Dynamic onJoystick_dyn();

		void onSysMessage(::cpp::Pointer<  nme::Event > inEvent);
		::Dynamic onSysMessage_dyn();

		void onAppLink(::cpp::Pointer<  nme::Event > inEvent);
		::Dynamic onAppLink_dyn();

		void onContextLost();
		::Dynamic onContextLost_dyn();

		void nmeDrag( ::nme::geom::Point inMouse);
		::Dynamic nmeDrag_dyn();

		 ::Dynamic set_opaqueBackground( ::Dynamic inBG);

		int set_color(int inColor);
		::Dynamic set_color_dyn();

		int get_color();
		::Dynamic get_color_dyn();

		 ::nme::display::MovieClip get_current();
		::Dynamic get_current_dyn();

		bool get_captureMouse();
		::Dynamic get_captureMouse_dyn();

		bool set_captureMouse(bool val);
		::Dynamic set_captureMouse_dyn();

		void nmeOnTouch(::cpp::Pointer<  nme::Event > inEvent,::String inType, ::nme::display::TouchInfo touchInfo);
		::Dynamic nmeOnTouch_dyn();

		void onPoll(Float inTimestamp);
		::Dynamic onPoll_dyn();

		Float getNextWake(Float inDefaultWake,Float inTimestamp);
		::Dynamic getNextWake_dyn();

		void nmeStartDrag( ::nme::display::Sprite sprite,bool lockCenter, ::nme::geom::Rectangle bounds);
		::Dynamic nmeStartDrag_dyn();

		void nmeStopDrag( ::nme::display::Sprite sprite);
		::Dynamic nmeStopDrag_dyn();

		void setPreemtiveGcFrequency(int inFrames);
		::Dynamic setPreemtiveGcFrequency_dyn();

		void setSmartPreemtiveGc();
		::Dynamic setSmartPreemtiveGc_dyn();

		void showCursor(bool inShow);
		::Dynamic showCursor_dyn();

		 ::nme::display::InteractiveObject get_focus();
		::Dynamic get_focus_dyn();

		 ::nme::display::InteractiveObject set_focus( ::nme::display::InteractiveObject inObject);
		::Dynamic set_focus_dyn();

		Float set_frameRate(Float inRate);
		::Dynamic set_frameRate_dyn();

		Float get_frameRate();
		::Dynamic get_frameRate_dyn();

		 ::nme::display::Stage get_stage();

		 ::nme::geom::Rectangle get_safeRect();
		::Dynamic get_safeRect_dyn();

		void setMouseFilter( ::Dynamic inHandler);
		::Dynamic setMouseFilter_dyn();

		void resize(int width,int height);
		::Dynamic resize_dyn();

		bool get_stageFocusRect();
		::Dynamic get_stageFocusRect_dyn();

		bool set_stageFocusRect(bool inVal);
		::Dynamic set_stageFocusRect_dyn();

		bool get_active();
		::Dynamic get_active_dyn();

		 ::nme::display::StageAlign get_align();
		::Dynamic get_align_dyn();

		 ::nme::display::StageAlign set_align( ::nme::display::StageAlign inMode);
		::Dynamic set_align_dyn();

		 ::nme::display::StageDisplayState get_displayState();
		::Dynamic get_displayState_dyn();

		 ::nme::display::StageDisplayState set_displayState( ::nme::display::StageDisplayState inState);
		::Dynamic set_displayState_dyn();

		Float get_dpiScale();
		::Dynamic get_dpiScale_dyn();

		 ::nme::display::StageQuality get_quality();
		::Dynamic get_quality_dyn();

		 ::nme::display::StageQuality set_quality( ::nme::display::StageQuality inQuality);
		::Dynamic set_quality_dyn();

		 ::nme::display::StageScaleMode get_scaleMode();
		::Dynamic get_scaleMode_dyn();

		 ::nme::display::StageScaleMode set_scaleMode( ::nme::display::StageScaleMode inMode);
		::Dynamic set_scaleMode_dyn();

		int get_stageHeight();
		::Dynamic get_stageHeight_dyn();

		int get_stageWidth();
		::Dynamic get_stageWidth_dyn();

		bool get_isOpenGL();
		::Dynamic get_isOpenGL_dyn();

		 ::Dynamic get_renderRequest();
		::Dynamic get_renderRequest_dyn();

		 ::Dynamic set_renderRequest( ::Dynamic f);
		::Dynamic set_renderRequest_dyn();

};

} // end namespace nme
} // end namespace display

#endif /* INCLUDED_nme_display_Stage */ 
