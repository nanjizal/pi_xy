// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_Version
#define INCLUDED_nme_Version

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(nme,Version)

namespace nme{


class HXCPP_CLASS_ATTRIBUTES Version_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Version_obj OBJ_;
		Version_obj();

	public:
		enum { _hx_ClassId = 0x21e47e56 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nme.Version")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"nme.Version"); }

		inline static ::hx::ObjectPtr< Version_obj > __new() {
			::hx::ObjectPtr< Version_obj > __this = new Version_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Version_obj > __alloc(::hx::Ctx *_hx_ctx) {
			Version_obj *__this = (Version_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Version_obj), false, "nme.Version"));
			*(void **)__this = Version_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Version_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Version",f8,0e,43,4a); }

		static void __boot();
		static ::String name;
};

} // end namespace nme

#endif /* INCLUDED_nme_Version */ 
