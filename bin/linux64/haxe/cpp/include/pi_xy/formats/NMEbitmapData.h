// Generated by Haxe 4.3.3
#ifndef INCLUDED_pi_xy_formats_NMEbitmapData
#define INCLUDED_pi_xy_formats_NMEbitmapData

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_2c8b7b4e49bdd038_14_new)
HX_DECLARE_CLASS2(nme,display,BitmapData)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS1(pi_xy,ImageStruct)
HX_DECLARE_CLASS2(pi_xy,formats,NMEbitmapData)

namespace pi_xy{
namespace formats{


class HXCPP_CLASS_ATTRIBUTES NMEbitmapData_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef NMEbitmapData_obj OBJ_;
		NMEbitmapData_obj();

	public:
		enum { _hx_ClassId = 0x4131a38a };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="pi_xy.formats.NMEbitmapData")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"pi_xy.formats.NMEbitmapData"); }

		inline static ::hx::ObjectPtr< NMEbitmapData_obj > __new() {
			::hx::ObjectPtr< NMEbitmapData_obj > __this = new NMEbitmapData_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< NMEbitmapData_obj > __alloc(::hx::Ctx *_hx_ctx) {
			NMEbitmapData_obj *__this = (NMEbitmapData_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NMEbitmapData_obj), false, "pi_xy.formats.NMEbitmapData"));
			*(void **)__this = NMEbitmapData_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_2c8b7b4e49bdd038_14_new)
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~NMEbitmapData_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("NMEbitmapData",5f,d4,ed,f6); }

		static void __boot();
		static  ::Dynamic toNmeBitmapData_;
		static Dynamic toNmeBitmapData__dyn() { return toNmeBitmapData_;}
};

} // end namespace pi_xy
} // end namespace formats

#endif /* INCLUDED_pi_xy_formats_NMEbitmapData */ 
