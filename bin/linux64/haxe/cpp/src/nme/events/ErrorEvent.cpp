// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nme_events_ErrorEvent
#include <nme/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_TextEvent
#include <nme/events/TextEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d7b8a2b3688804ed_12_new,"nme.events.ErrorEvent","new",0x2d9d0fd1,"nme.events.ErrorEvent.new","nme/events/ErrorEvent.hx",12,0x37224e9f)
HX_LOCAL_STACK_FRAME(_hx_pos_d7b8a2b3688804ed_19_clone,"nme.events.ErrorEvent","clone",0x4a0fd10e,"nme.events.ErrorEvent.clone","nme/events/ErrorEvent.hx",19,0x37224e9f)
HX_LOCAL_STACK_FRAME(_hx_pos_d7b8a2b3688804ed_24_toString,"nme.events.ErrorEvent","toString",0xec94f79b,"nme.events.ErrorEvent.toString","nme/events/ErrorEvent.hx",24,0x37224e9f)
HX_LOCAL_STACK_FRAME(_hx_pos_d7b8a2b3688804ed_7_boot,"nme.events.ErrorEvent","boot",0xb3e9c7a1,"nme.events.ErrorEvent.boot","nme/events/ErrorEvent.hx",7,0x37224e9f)
namespace nme{
namespace events{

void ErrorEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::String __o_text,::hx::Null< int >  __o_id){
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            		::String text = __o_text;
            		if (::hx::IsNull(__o_text)) text = HX_("",00,00,00,00);
            		int id = __o_id.Default(0);
            	HX_STACKFRAME(&_hx_pos_d7b8a2b3688804ed_12_new)
HXLINE(  13)		super::__construct(type,bubbles,cancelable,text);
HXLINE(  14)		this->errorID = id;
            	}

Dynamic ErrorEvent_obj::__CreateEmpty() { return new ErrorEvent_obj; }

void *ErrorEvent_obj::_hx_vtable = 0;

Dynamic ErrorEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ErrorEvent_obj > _hx_result = new ErrorEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool ErrorEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4d3203b2) {
		if (inClassId<=(int)0x113d0d1f) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x113d0d1f;
		} else {
			return inClassId==(int)0x4d3203b2;
		}
	} else {
		return inClassId==(int)0x5bff200d;
	}
}

 ::nme::events::Event ErrorEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_d7b8a2b3688804ed_19_clone)
HXDLIN(  19)		::String _hx_tmp = this->get_type();
HXDLIN(  19)		bool _hx_tmp1 = this->get_bubbles();
HXDLIN(  19)		bool _hx_tmp2 = this->get_cancelable();
HXDLIN(  19)		return  ::nme::events::ErrorEvent_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,this->text,this->errorID);
            	}


::String ErrorEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_d7b8a2b3688804ed_24_toString)
HXDLIN(  24)		::String _hx_tmp = ((HX_("[ErrorEvent type=",50,a7,ba,b4) + this->get_type()) + HX_(" bubbles=",16,5f,ba,28));
HXDLIN(  24)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->get_bubbles())) + HX_(" cancelable=",89,25,e0,5d));
HXDLIN(  24)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->get_cancelable())) + HX_(" text=",d0,d6,04,d9));
HXDLIN(  24)		return ((((_hx_tmp2 + this->text) + HX_(" errorID=",5a,81,5e,3d)) + this->errorID) + HX_("]",5d,00,00,00));
            	}


::String ErrorEvent_obj::ERROR;


::hx::ObjectPtr< ErrorEvent_obj > ErrorEvent_obj::__new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::String __o_text,::hx::Null< int >  __o_id) {
	::hx::ObjectPtr< ErrorEvent_obj > __this = new ErrorEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_text,__o_id);
	return __this;
}

::hx::ObjectPtr< ErrorEvent_obj > ErrorEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::String __o_text,::hx::Null< int >  __o_id) {
	ErrorEvent_obj *__this = (ErrorEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ErrorEvent_obj), true, "nme.events.ErrorEvent"));
	*(void **)__this = ErrorEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_text,__o_id);
	return __this;
}

ErrorEvent_obj::ErrorEvent_obj()
{
}

::hx::Val ErrorEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"errorID") ) { return ::hx::Val( errorID ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ErrorEvent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ERROR") ) { outValue = ( ERROR ); return true; }
	}
	return false;
}

::hx::Val ErrorEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"errorID") ) { errorID=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ErrorEvent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ERROR") ) { ERROR=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void ErrorEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("errorID",a3,8d,0a,ea));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ErrorEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ErrorEvent_obj,errorID),HX_("errorID",a3,8d,0a,ea)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ErrorEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &ErrorEvent_obj::ERROR,HX_("ERROR",a8,03,18,f1)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ErrorEvent_obj_sMemberFields[] = {
	HX_("errorID",a3,8d,0a,ea),
	HX_("clone",5d,13,63,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void ErrorEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ErrorEvent_obj::ERROR,"ERROR");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ErrorEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ErrorEvent_obj::ERROR,"ERROR");
};

#endif

::hx::Class ErrorEvent_obj::__mClass;

static ::String ErrorEvent_obj_sStaticFields[] = {
	HX_("ERROR",a8,03,18,f1),
	::String(null())
};

void ErrorEvent_obj::__register()
{
	ErrorEvent_obj _hx_dummy;
	ErrorEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.ErrorEvent",5f,d3,6a,52);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ErrorEvent_obj::__GetStatic;
	__mClass->mSetStaticField = &ErrorEvent_obj::__SetStatic;
	__mClass->mMarkFunc = ErrorEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ErrorEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ErrorEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ErrorEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ErrorEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ErrorEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ErrorEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ErrorEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d7b8a2b3688804ed_7_boot)
HXDLIN(   7)		ERROR = HX_("error",c8,cb,29,73);
            	}
}

} // end namespace nme
} // end namespace events
