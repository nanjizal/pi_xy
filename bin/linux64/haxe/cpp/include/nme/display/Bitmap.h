// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_display_Bitmap
#define INCLUDED_nme_display_Bitmap

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
HX_DECLARE_CLASS2(nme,display,Bitmap)
HX_DECLARE_CLASS2(nme,display,BitmapData)
HX_DECLARE_CLASS2(nme,display,DisplayObject)
HX_DECLARE_CLASS2(nme,display,Graphics)
HX_DECLARE_CLASS2(nme,display,IBitmapDrawable)
HX_DECLARE_CLASS2(nme,display,PixelSnapping)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)

namespace nme{
namespace display{


class HXCPP_CLASS_ATTRIBUTES Bitmap_obj : public  ::nme::display::DisplayObject_obj
{
	public:
		typedef  ::nme::display::DisplayObject_obj super;
		typedef Bitmap_obj OBJ_;
		Bitmap_obj();

	public:
		enum { _hx_ClassId = 0x128004c7 };

		void __construct( ::nme::display::BitmapData bitmapData, ::nme::display::PixelSnapping pixelSnapping,::hx::Null< bool >  __o_smoothing);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.display.Bitmap")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.display.Bitmap"); }
		static ::hx::ObjectPtr< Bitmap_obj > __new( ::nme::display::BitmapData bitmapData, ::nme::display::PixelSnapping pixelSnapping,::hx::Null< bool >  __o_smoothing);
		static ::hx::ObjectPtr< Bitmap_obj > __alloc(::hx::Ctx *_hx_ctx, ::nme::display::BitmapData bitmapData, ::nme::display::PixelSnapping pixelSnapping,::hx::Null< bool >  __o_smoothing);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Bitmap_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Bitmap",0f,84,a0,25); }

		 ::nme::display::BitmapData bitmapData;
		bool smoothing;
		 ::nme::display::Graphics mGraphics;
		void nmeRebuild();
		::Dynamic nmeRebuild_dyn();

		 ::nme::display::BitmapData set_bitmapData( ::nme::display::BitmapData inBitmapData);
		::Dynamic set_bitmapData_dyn();

		bool set_smoothing(bool inSmooth);
		::Dynamic set_smoothing_dyn();

};

} // end namespace nme
} // end namespace display

#endif /* INCLUDED_nme_display_Bitmap */ 
