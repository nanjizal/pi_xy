// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_ProgressEvent
#include <nme/events/ProgressEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ce4b2241c9654033_14_new,"nme.events.ProgressEvent","new",0xf84afc12,"nme.events.ProgressEvent.new","nme/events/ProgressEvent.hx",14,0x78a05dbe)
HX_LOCAL_STACK_FRAME(_hx_pos_ce4b2241c9654033_23_clone,"nme.events.ProgressEvent","clone",0x8d420f8f,"nme.events.ProgressEvent.clone","nme/events/ProgressEvent.hx",23,0x78a05dbe)
HX_LOCAL_STACK_FRAME(_hx_pos_ce4b2241c9654033_28_toString,"nme.events.ProgressEvent","toString",0x8521ffba,"nme.events.ProgressEvent.toString","nme/events/ProgressEvent.hx",28,0x78a05dbe)
HX_LOCAL_STACK_FRAME(_hx_pos_ce4b2241c9654033_7_boot,"nme.events.ProgressEvent","boot",0x416a9440,"nme.events.ProgressEvent.boot","nme/events/ProgressEvent.hx",7,0x78a05dbe)
HX_LOCAL_STACK_FRAME(_hx_pos_ce4b2241c9654033_8_boot,"nme.events.ProgressEvent","boot",0x416a9440,"nme.events.ProgressEvent.boot","nme/events/ProgressEvent.hx",8,0x78a05dbe)
namespace nme{
namespace events{

void ProgressEvent_obj::__construct(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_bytesLoaded,::hx::Null< int >  __o_bytesTotal){
            		bool bubbles = __o_bubbles.Default(false);
            		bool cancelable = __o_cancelable.Default(false);
            		int bytesLoaded = __o_bytesLoaded.Default(0);
            		int bytesTotal = __o_bytesTotal.Default(0);
            	HX_STACKFRAME(&_hx_pos_ce4b2241c9654033_14_new)
HXLINE(  15)		super::__construct(type,bubbles,cancelable);
HXLINE(  17)		this->bytesLoaded = bytesLoaded;
HXLINE(  18)		this->bytesTotal = bytesTotal;
            	}

Dynamic ProgressEvent_obj::__CreateEmpty() { return new ProgressEvent_obj; }

void *ProgressEvent_obj::_hx_vtable = 0;

Dynamic ProgressEvent_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ProgressEvent_obj > _hx_result = new ProgressEvent_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool ProgressEvent_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x113d0d1f) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x113d0d1f;
	} else {
		return inClassId==(int)0x3fe19f32;
	}
}

 ::nme::events::Event ProgressEvent_obj::clone(){
            	HX_GC_STACKFRAME(&_hx_pos_ce4b2241c9654033_23_clone)
HXDLIN(  23)		::String _hx_tmp = this->get_type();
HXDLIN(  23)		bool _hx_tmp1 = this->get_bubbles();
HXDLIN(  23)		bool _hx_tmp2 = this->get_cancelable();
HXDLIN(  23)		return  ::nme::events::ProgressEvent_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,_hx_tmp2,this->bytesLoaded,this->bytesTotal);
            	}


::String ProgressEvent_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_ce4b2241c9654033_28_toString)
HXDLIN(  28)		::String _hx_tmp = ((HX_("[ProgressEvent type=",75,e5,7d,04) + this->get_type()) + HX_(" bubbles=",16,5f,ba,28));
HXDLIN(  28)		::String _hx_tmp1 = ((_hx_tmp + ::Std_obj::string(this->get_bubbles())) + HX_(" cancelable=",89,25,e0,5d));
HXDLIN(  28)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->get_cancelable())) + HX_(" bytesLoaded=",8d,3f,5f,af));
HXDLIN(  28)		return ((((_hx_tmp2 + this->bytesLoaded) + HX_(" bytesTotal=",a4,ca,1f,11)) + this->bytesTotal) + HX_("]",5d,00,00,00));
            	}


::String ProgressEvent_obj::PROGRESS;

::String ProgressEvent_obj::SOCKET_DATA;


::hx::ObjectPtr< ProgressEvent_obj > ProgressEvent_obj::__new(::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_bytesLoaded,::hx::Null< int >  __o_bytesTotal) {
	::hx::ObjectPtr< ProgressEvent_obj > __this = new ProgressEvent_obj();
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_bytesLoaded,__o_bytesTotal);
	return __this;
}

::hx::ObjectPtr< ProgressEvent_obj > ProgressEvent_obj::__alloc(::hx::Ctx *_hx_ctx,::String type,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_bytesLoaded,::hx::Null< int >  __o_bytesTotal) {
	ProgressEvent_obj *__this = (ProgressEvent_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ProgressEvent_obj), true, "nme.events.ProgressEvent"));
	*(void **)__this = ProgressEvent_obj::_hx_vtable;
	__this->__construct(type,__o_bubbles,__o_cancelable,__o_bytesLoaded,__o_bytesTotal);
	return __this;
}

ProgressEvent_obj::ProgressEvent_obj()
{
}

::hx::Val ProgressEvent_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"clone") ) { return ::hx::Val( clone_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { return ::hx::Val( bytesTotal ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { return ::hx::Val( bytesLoaded ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ProgressEvent_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"bytesTotal") ) { bytesTotal=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bytesLoaded") ) { bytesLoaded=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ProgressEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bytesLoaded",d0,66,ca,99));
	outFields->push(HX_("bytesTotal",59,57,da,45));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ProgressEvent_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ProgressEvent_obj,bytesLoaded),HX_("bytesLoaded",d0,66,ca,99)},
	{::hx::fsInt,(int)offsetof(ProgressEvent_obj,bytesTotal),HX_("bytesTotal",59,57,da,45)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ProgressEvent_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &ProgressEvent_obj::PROGRESS,HX_("PROGRESS",ad,87,b0,df)},
	{::hx::fsString,(void *) &ProgressEvent_obj::SOCKET_DATA,HX_("SOCKET_DATA",76,39,86,c1)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ProgressEvent_obj_sMemberFields[] = {
	HX_("bytesLoaded",d0,66,ca,99),
	HX_("bytesTotal",59,57,da,45),
	HX_("clone",5d,13,63,48),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

static void ProgressEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ProgressEvent_obj::PROGRESS,"PROGRESS");
	HX_MARK_MEMBER_NAME(ProgressEvent_obj::SOCKET_DATA,"SOCKET_DATA");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ProgressEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ProgressEvent_obj::PROGRESS,"PROGRESS");
	HX_VISIT_MEMBER_NAME(ProgressEvent_obj::SOCKET_DATA,"SOCKET_DATA");
};

#endif

::hx::Class ProgressEvent_obj::__mClass;

static ::String ProgressEvent_obj_sStaticFields[] = {
	HX_("PROGRESS",ad,87,b0,df),
	HX_("SOCKET_DATA",76,39,86,c1),
	::String(null())
};

void ProgressEvent_obj::__register()
{
	ProgressEvent_obj _hx_dummy;
	ProgressEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.events.ProgressEvent",20,4b,bb,65);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ProgressEvent_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ProgressEvent_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ProgressEvent_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ProgressEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ProgressEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ProgressEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ProgressEvent_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ProgressEvent_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ce4b2241c9654033_7_boot)
HXDLIN(   7)		PROGRESS = HX_("progress",ad,f7,2a,86);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ce4b2241c9654033_8_boot)
HXDLIN(   8)		SOCKET_DATA = HX_("socketData",7d,63,de,b1);
            	}
}

} // end namespace nme
} // end namespace events
