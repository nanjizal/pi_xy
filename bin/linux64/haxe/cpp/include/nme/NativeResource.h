// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_NativeResource
#define INCLUDED_nme_NativeResource

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(nme,NativeResource)

namespace nme{


class HXCPP_CLASS_ATTRIBUTES NativeResource_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef NativeResource_obj OBJ_;
		NativeResource_obj();

	public:
		enum { _hx_ClassId = 0x2c85b0eb };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="nme.NativeResource")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"nme.NativeResource"); }

		inline static ::hx::ObjectPtr< NativeResource_obj > __new() {
			::hx::ObjectPtr< NativeResource_obj > __this = new NativeResource_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< NativeResource_obj > __alloc(::hx::Ctx *_hx_ctx) {
			NativeResource_obj *__this = (NativeResource_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NativeResource_obj), false, "nme.NativeResource"));
			*(void **)__this = NativeResource_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~NativeResource_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("NativeResource",a5,65,9a,2c); }

		static void __boot();
		static int AUTO_CLEAR;
		static int WRITE_ONLY;
		static void setAutoClearHandler( ::Dynamic handler);
		static ::Dynamic setAutoClearHandler_dyn();

		static void setWriteOnlyHandler( ::Dynamic handler);
		static ::Dynamic setWriteOnlyHandler_dyn();

		static void lockHandler( ::Dynamic handler);
		static ::Dynamic lockHandler_dyn();

		static void unlockHandler( ::Dynamic handler);
		static ::Dynamic unlockHandler_dyn();

		static void setAutoClear( ::Dynamic handle);
		static ::Dynamic setAutoClear_dyn();

		static void setWriteOnly( ::Dynamic handle);
		static ::Dynamic setWriteOnly_dyn();

		static void lock( ::Dynamic handle);
		static ::Dynamic lock_dyn();

		static void unlock( ::Dynamic handle);
		static ::Dynamic unlock_dyn();

		static void releaseTempRefs();
		static ::Dynamic releaseTempRefs_dyn();

		static void disposeHandler( ::Dynamic handler);
		static ::Dynamic disposeHandler_dyn();

		static  ::Dynamic dispose( ::Dynamic handle);
		static ::Dynamic dispose_dyn();

		static ::cpp::Function< void  ( ::hx::Object *) > nme_native_resource_dispose;
		static Dynamic nme_native_resource_dispose_dyn() { return nme_native_resource_dispose;}
};

} // end namespace nme

#endif /* INCLUDED_nme_NativeResource */ 
