// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_media_Sound
#define INCLUDED_nme_media_Sound

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(nme,events,EventDispatcher)
HX_DECLARE_CLASS2(nme,events,IEventDispatcher)
HX_DECLARE_CLASS2(nme,media,ID3Info)
HX_DECLARE_CLASS2(nme,media,Sound)
HX_DECLARE_CLASS2(nme,media,SoundChannel)
HX_DECLARE_CLASS2(nme,media,SoundLoaderContext)
HX_DECLARE_CLASS2(nme,media,SoundTransform)
HX_DECLARE_CLASS2(nme,net,URLRequest)
HX_DECLARE_CLASS2(nme,utils,ByteArray)
HX_DECLARE_CLASS2(nme,utils,IDataInput)
HX_DECLARE_CLASS2(nme,utils,IDataOutput)
HX_DECLARE_CLASS2(nme,utils,IMemoryRange)

namespace nme{
namespace media{


class HXCPP_CLASS_ATTRIBUTES Sound_obj : public  ::nme::events::EventDispatcher_obj
{
	public:
		typedef  ::nme::events::EventDispatcher_obj super;
		typedef Sound_obj OBJ_;
		Sound_obj();

	public:
		enum { _hx_ClassId = 0x7f5abc29 };

		void __construct( ::nme::net::URLRequest stream, ::nme::media::SoundLoaderContext context,::hx::Null< bool >  __o_forcePlayAsMusic,::String inEngine);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.media.Sound")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.media.Sound"); }
		static ::hx::ObjectPtr< Sound_obj > __new( ::nme::net::URLRequest stream, ::nme::media::SoundLoaderContext context,::hx::Null< bool >  __o_forcePlayAsMusic,::String inEngine);
		static ::hx::ObjectPtr< Sound_obj > __alloc(::hx::Ctx *_hx_ctx, ::nme::net::URLRequest stream, ::nme::media::SoundLoaderContext context,::hx::Null< bool >  __o_forcePlayAsMusic,::String inEngine);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Sound_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Sound",af,fc,f9,13); }

		static void __boot();
		static void suspend(bool inSuspend,::hx::Null< int >  inFlags);
		static ::Dynamic suspend_dyn();

		static  ::Dynamic nme_sound_from_file;
		static Dynamic nme_sound_from_file_dyn() { return nme_sound_from_file;}
		static  ::Dynamic nme_sound_from_data;
		static Dynamic nme_sound_from_data_dyn() { return nme_sound_from_data;}
		static ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > nme_sound_get_id3;
		static Dynamic nme_sound_get_id3_dyn() { return nme_sound_get_id3;}
		static ::cpp::Function< Float  ( ::hx::Object *) > nme_sound_get_length;
		static Dynamic nme_sound_get_length_dyn() { return nme_sound_get_length;}
		static ::cpp::Function< void  ( ::hx::Object *) > nme_sound_close;
		static Dynamic nme_sound_close_dyn() { return nme_sound_close;}
		static ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > nme_sound_get_status;
		static Dynamic nme_sound_get_status_dyn() { return nme_sound_get_status;}
		static ::cpp::Function< void  (bool,int) > nme_sound_suspend;
		static Dynamic nme_sound_suspend_dyn() { return nme_sound_suspend;}
		static  ::Dynamic nme_sound_get_engine;
		static Dynamic nme_sound_get_engine_dyn() { return nme_sound_get_engine;}
		static ::cpp::Function<  ::hx::Object *  ( ::hx::Object *, ::hx::Object *) > nme_sound_channel_create_dynamic;
		static Dynamic nme_sound_channel_create_dynamic_dyn() { return nme_sound_channel_create_dynamic;}
		int bytesLoaded;
		int bytesTotal;
		 ::nme::media::ID3Info id3;
		bool isBuffering;
		Float length;
		::String url;
		 ::Dynamic nmeHandle;
		bool nmeLoading;
		bool nmeDynamicSound;
		 ::Dynamic getEngine();
		::Dynamic getEngine_dyn();

		void addEventListener(::String type, ::Dynamic listener,::hx::Null< bool >  useCapture,::hx::Null< int >  priority,::hx::Null< bool >  useWeakReference);

		void close();
		::Dynamic close_dyn();

		void load( ::nme::net::URLRequest stream, ::nme::media::SoundLoaderContext context,::hx::Null< bool >  forcePlayAsMusic,::String inEngine);
		::Dynamic load_dyn();

		void loadCompressedDataFromByteArray( ::nme::utils::ByteArray bytes,int length,::hx::Null< bool >  forcePlayAsMusic,::String inEngine);
		::Dynamic loadCompressedDataFromByteArray_dyn();

		void loadPCMFromByteArray( ::nme::utils::ByteArray Bytes,int samples,::String format,::hx::Null< bool >  stereo,::hx::Null< Float >  sampleRate,::String inEngine);
		::Dynamic loadPCMFromByteArray_dyn();

		void nmeCheckLoading();
		::Dynamic nmeCheckLoading_dyn();

		void nmeOnError(::String msg);
		::Dynamic nmeOnError_dyn();

		 ::nme::media::SoundChannel play(::hx::Null< Float >  startTime,::hx::Null< int >  loops, ::nme::media::SoundTransform sndTransform);
		::Dynamic play_dyn();

		 ::nme::media::ID3Info get_id3();
		::Dynamic get_id3_dyn();

		bool get_isBuffering();
		::Dynamic get_isBuffering_dyn();

		Float get_length();
		::Dynamic get_length_dyn();

};

} // end namespace nme
} // end namespace media

#endif /* INCLUDED_nme_media_Sound */ 
