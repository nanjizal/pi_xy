// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_nme_Loader
#include <nme/Loader.h>
#endif
#ifndef INCLUDED_nme_NativeResource
#include <nme/NativeResource.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_SampleDataEvent
#include <nme/events/SampleDataEvent.h>
#endif
#ifndef INCLUDED_nme_media_AudioSampleFormat
#include <nme/media/AudioSampleFormat.h>
#endif
#ifndef INCLUDED_nme_media_SampleRate
#include <nme/media/SampleRate.h>
#endif
#ifndef INCLUDED_nme_media_SoundChannel
#include <nme/media/SoundChannel.h>
#endif
#ifndef INCLUDED_nme_media_SoundTransform
#include <nme/media/SoundTransform.h>
#endif
#ifndef INCLUDED_nme_utils_ByteArray
#include <nme/utils/ByteArray.h>
#endif
#ifndef INCLUDED_nme_utils_IDataInput
#include <nme/utils/IDataInput.h>
#endif
#ifndef INCLUDED_nme_utils_IDataOutput
#include <nme/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_nme_utils_IMemoryRange
#include <nme/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1d555e4e98db27c0_31_new,"nme.media.SoundChannel","new",0xe1ab25b8,"nme.media.SoundChannel.new","nme/media/SoundChannel.hx",31,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_76_postBuffer,"nme.media.SoundChannel","postBuffer",0x9691c328,"nme.media.SoundChannel.postBuffer","nme/media/SoundChannel.hx",76,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_81_nmeCheckComplete,"nme.media.SoundChannel","nmeCheckComplete",0xd0d57623,"nme.media.SoundChannel.nmeCheckComplete","nme/media/SoundChannel.hx",81,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_114_dispatchComplete,"nme.media.SoundChannel","dispatchComplete",0xe54e093b,"nme.media.SoundChannel.dispatchComplete","nme/media/SoundChannel.hx",114,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_152_stop,"nme.media.SoundChannel","stop",0x976f47aa,"nme.media.SoundChannel.stop","nme/media/SoundChannel.hx",152,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_160_get_leftPeak,"nme.media.SoundChannel","get_leftPeak",0x95991577,"nme.media.SoundChannel.get_leftPeak","nme/media/SoundChannel.hx",160,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_161_get_rightPeak,"nme.media.SoundChannel","get_rightPeak",0x30a77b4a,"nme.media.SoundChannel.get_rightPeak","nme/media/SoundChannel.hx",161,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_162_get_position,"nme.media.SoundChannel","get_position",0x0f43945a,"nme.media.SoundChannel.get_position","nme/media/SoundChannel.hx",162,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_163_set_position,"nme.media.SoundChannel","set_position",0x243cb7ce,"nme.media.SoundChannel.set_position","nme/media/SoundChannel.hx",163,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_166_get_soundTransform,"nme.media.SoundChannel","get_soundTransform",0x6d373d0e,"nme.media.SoundChannel.get_soundTransform","nme/media/SoundChannel.hx",166,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_176_set_soundTransform,"nme.media.SoundChannel","set_soundTransform",0x49e66f82,"nme.media.SoundChannel.set_soundTransform","nme/media/SoundChannel.hx",176,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_53_createAsync,"nme.media.SoundChannel","createAsync",0x8ae9a3f8,"nme.media.SoundChannel.createAsync","nme/media/SoundChannel.hx",53,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_63_createDynamic,"nme.media.SoundChannel","createDynamic",0xd880eb3b,"nme.media.SoundChannel.createDynamic","nme/media/SoundChannel.hx",63,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_110_nmeCompletePending,"nme.media.SoundChannel","nmeCompletePending",0x25f5f5a0,"nme.media.SoundChannel.nmeCompletePending","nme/media/SoundChannel.hx",110,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_121_nmePollComplete,"nme.media.SoundChannel","nmePollComplete",0x3b89ffd6,"nme.media.SoundChannel.nmePollComplete","nme/media/SoundChannel.hx",121,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_20_boot,"nme.media.SoundChannel","boot",0x8c2edbda,"nme.media.SoundChannel.boot","nme/media/SoundChannel.hx",20,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_21_boot,"nme.media.SoundChannel","boot",0x8c2edbda,"nme.media.SoundChannel.boot","nme/media/SoundChannel.hx",21,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_22_boot,"nme.media.SoundChannel","boot",0x8c2edbda,"nme.media.SoundChannel.boot","nme/media/SoundChannel.hx",22,0xbe716c36)
HX_LOCAL_STACK_FRAME(_hx_pos_fcb6dc8fe8d86a64_9_boot,"nme.media.SoundChannel","boot",0x8c2edbda,"nme.media.SoundChannel.boot","nme/PrimeLoader.hx",9,0xcf416155)
HX_LOCAL_STACK_FRAME(_hx_pos_1d555e4e98db27c0_196_boot,"nme.media.SoundChannel","boot",0x8c2edbda,"nme.media.SoundChannel.boot","nme/media/SoundChannel.hx",196,0xbe716c36)
namespace nme{
namespace media{

void SoundChannel_obj::__construct( ::Dynamic inSoundHandle,Float startTime,int loops, ::nme::media::SoundTransform sndTransform){
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_31_new)
HXLINE(  32)		super::__construct(null());
HXLINE(  34)		this->pitch = ((Float)1.0);
HXLINE(  35)		this->nmeStopped = false;
HXLINE(  36)		if (::hx::IsNotNull( sndTransform )) {
HXLINE(  38)			this->nmeTransform = sndTransform->clone();
            		}
HXLINE(  41)		if (::hx::IsNotNull( inSoundHandle )) {
HXLINE(  42)			this->nmeHandle = ( ( ::Dynamic)(::nme::media::SoundChannel_obj::nme_sound_channel_create(::hx::DynamicPtr(inSoundHandle),startTime,loops,::hx::DynamicPtr(this->nmeTransform))) );
            		}
HXLINE(  44)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE(  47)			::nme::media::SoundChannel_obj::nmeIncompleteList->push(::hx::ObjectPtr<OBJ_>(this));
            		}
            	}

Dynamic SoundChannel_obj::__CreateEmpty() { return new SoundChannel_obj; }

void *SoundChannel_obj::_hx_vtable = 0;

Dynamic SoundChannel_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SoundChannel_obj > _hx_result = new SoundChannel_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool SoundChannel_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x169017a6) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x169017a6;
	} else {
		return inClassId==(int)0x74936572;
	}
}

void SoundChannel_obj::postBuffer( ::nme::utils::ByteArray inData){
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_76_postBuffer)
HXDLIN(  76)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE(  77)			::nme::media::SoundChannel_obj::nme_sound_channel_post_buffer(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(inData));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,postBuffer,(void))

bool SoundChannel_obj::nmeCheckComplete(){
            	HX_GC_STACKFRAME(&_hx_pos_1d555e4e98db27c0_81_nmeCheckComplete)
HXLINE(  82)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE(  84)			bool _hx_tmp;
HXDLIN(  84)			if (::hx::IsNotNull( this->nmeDataProvider )) {
HXLINE(  84)				_hx_tmp = ::nme::media::SoundChannel_obj::nme_sound_channel_needs_data(::hx::DynamicPtr(this->nmeHandle));
            			}
            			else {
HXLINE(  84)				_hx_tmp = false;
            			}
HXDLIN(  84)			if (_hx_tmp) {
HXLINE(  86)				 ::nme::events::SampleDataEvent request =  ::nme::events::SampleDataEvent_obj::__alloc( HX_CTX ,HX_("sampleData",74,3f,0b,5e),null(),null());
HXLINE(  87)				request->position = ::nme::media::SoundChannel_obj::nme_sound_channel_get_data_position(::hx::DynamicPtr(this->nmeHandle));
HXLINE(  88)				this->nmeDataProvider->dispatchEvent(request);
HXLINE(  90)				if ((request->data->length > 0)) {
HXLINE(  92)					::nme::media::SoundChannel_obj::nme_sound_channel_add_data(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(request->data));
            				}
            			}
HXLINE(  96)			if (::nme::media::SoundChannel_obj::nme_sound_channel_is_complete(::hx::DynamicPtr(this->nmeHandle))) {
HXLINE(  98)				this->nmeHandle = null();
HXLINE(  99)				if (::hx::IsNotNull( this->nmeDataProvider )) {
HXLINE( 100)					::nme::media::SoundChannel_obj::nmeDynamicSoundCount--;
            				}
HXLINE( 102)				return true;
            			}
            		}
HXLINE( 106)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,nmeCheckComplete,return )

void SoundChannel_obj::dispatchComplete(){
            	HX_GC_STACKFRAME(&_hx_pos_1d555e4e98db27c0_114_dispatchComplete)
HXLINE( 115)		 ::nme::events::Event complete =  ::nme::events::Event_obj::__alloc( HX_CTX ,HX_("soundComplete",a8,30,e6,1c),null(),null());
HXLINE( 116)		this->dispatchEvent(complete);
HXLINE( 117)		if (::hx::IsNotNull( this->nmeHandle )) {
HXLINE( 117)			::nme::NativeResource_obj::nme_native_resource_dispose(::hx::DynamicPtr(this->nmeHandle));
HXDLIN( 117)			this->nmeHandle = null();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,dispatchComplete,(void))

void SoundChannel_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_152_stop)
HXLINE( 153)		this->nmeStopped = true;
HXLINE( 154)		::nme::media::SoundChannel_obj::nme_sound_channel_stop(::hx::DynamicPtr(this->nmeHandle));
HXLINE( 156)		::nme::media::SoundChannel_obj::nmePollComplete();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,stop,(void))

Float SoundChannel_obj::get_leftPeak(){
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_160_get_leftPeak)
HXDLIN( 160)		return ::nme::media::SoundChannel_obj::nme_sound_channel_get_left(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,get_leftPeak,return )

Float SoundChannel_obj::get_rightPeak(){
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_161_get_rightPeak)
HXDLIN( 161)		return ::nme::media::SoundChannel_obj::nme_sound_channel_get_right(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,get_rightPeak,return )

Float SoundChannel_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_162_get_position)
HXDLIN( 162)		return ::nme::media::SoundChannel_obj::nme_sound_channel_get_position(::hx::DynamicPtr(this->nmeHandle));
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,get_position,return )

Float SoundChannel_obj::set_position(Float value){
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_163_set_position)
HXDLIN( 163)		::cpp::Function< void  ( ::hx::Object *,Float) > _hx_tmp = ::nme::media::SoundChannel_obj::nme_sound_channel_set_position;
HXDLIN( 163)		 ::Dynamic _hx_tmp1 = this->nmeHandle;
HXDLIN( 163)		_hx_tmp(::hx::DynamicPtr(_hx_tmp1),this->get_position());
HXDLIN( 163)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,set_position,return )

 ::nme::media::SoundTransform SoundChannel_obj::get_soundTransform(){
            	HX_GC_STACKFRAME(&_hx_pos_1d555e4e98db27c0_166_get_soundTransform)
HXLINE( 167)		if (::hx::IsNull( this->nmeTransform )) {
HXLINE( 169)			this->nmeTransform =  ::nme::media::SoundTransform_obj::__alloc( HX_CTX ,null(),null());
            		}
HXLINE( 172)		return this->nmeTransform->clone();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,get_soundTransform,return )

 ::nme::media::SoundTransform SoundChannel_obj::set_soundTransform( ::nme::media::SoundTransform inTransform){
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_176_set_soundTransform)
HXLINE( 177)		this->nmeTransform = inTransform->clone();
HXLINE( 178)		::nme::media::SoundChannel_obj::nme_sound_channel_set_transform(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(this->nmeTransform));
HXLINE( 180)		return inTransform;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SoundChannel_obj,set_soundTransform,return )

int SoundChannel_obj::nmeDynamicSoundCount;

::Array< ::Dynamic> SoundChannel_obj::nmeIncompleteList;

bool SoundChannel_obj::nmeIsPolling;

 ::nme::media::SoundChannel SoundChannel_obj::createAsync( ::nme::media::SampleRate inRate,bool inIsStereo, ::nme::media::AudioSampleFormat sampleFormat, ::Dynamic asyncDataRequired,::String inEngine){
            	HX_GC_STACKFRAME(&_hx_pos_1d555e4e98db27c0_53_createAsync)
HXLINE(  54)		int handle = _hx_getEnumValueIndex(inRate);
HXDLIN(  54)		int handle1 = _hx_getEnumValueIndex(sampleFormat);
HXDLIN(  54)		 ::Dynamic handle2 = ::nme::media::SoundChannel_obj::nme_sound_channel_create_async(handle,inIsStereo,handle1,asyncDataRequired,inEngine);
HXLINE(  55)		if (::hx::IsNull( handle2 )) {
HXLINE(  56)			return null();
            		}
HXLINE(  58)		return  ::nme::media::SoundChannel_obj::__alloc( HX_CTX ,handle2,( (Float)(0) ),0,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(SoundChannel_obj,createAsync,return )

 ::nme::media::SoundChannel SoundChannel_obj::createDynamic( ::Dynamic inSoundHandle, ::nme::media::SoundTransform sndTransform, ::nme::events::EventDispatcher dataProvider){
            	HX_GC_STACKFRAME(&_hx_pos_1d555e4e98db27c0_63_createDynamic)
HXLINE(  64)		 ::nme::media::SoundChannel result =  ::nme::media::SoundChannel_obj::__alloc( HX_CTX ,null(),( (Float)(0) ),0,sndTransform);
HXLINE(  66)		result->nmeDataProvider = dataProvider;
HXLINE(  67)		result->nmeHandle = inSoundHandle;
HXLINE(  68)		::nme::media::SoundChannel_obj::nmeIncompleteList->push(result);
HXLINE(  69)		::nme::media::SoundChannel_obj::nmeDynamicSoundCount++;
HXLINE(  71)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(SoundChannel_obj,createDynamic,return )

bool SoundChannel_obj::nmeCompletePending(){
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_110_nmeCompletePending)
HXDLIN( 110)		return (::nme::media::SoundChannel_obj::nmeIncompleteList->length > 0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,nmeCompletePending,return )

void SoundChannel_obj::nmePollComplete(){
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_121_nmePollComplete)
HXLINE( 122)		if (::nme::media::SoundChannel_obj::nmeIsPolling) {
HXLINE( 125)			return;
            		}
HXLINE( 128)		::nme::media::SoundChannel_obj::nmeIsPolling = true;
HXLINE( 129)		int checkLength = ::nme::media::SoundChannel_obj::nmeIncompleteList->length;
HXLINE( 130)		if ((checkLength > 0)) {
HXLINE( 132)			int idx = 0;
HXLINE( 133)			while((idx < checkLength)){
HXLINE( 135)				 ::nme::media::SoundChannel channel = ::nme::media::SoundChannel_obj::nmeIncompleteList->__get(idx).StaticCast<  ::nme::media::SoundChannel >();
HXLINE( 137)				if (channel->nmeCheckComplete()) {
HXLINE( 139)					::nme::media::SoundChannel_obj::nmeIncompleteList->removeRange(idx,1);
HXLINE( 140)					checkLength = (checkLength - 1);
HXLINE( 141)					if (!(channel->nmeStopped)) {
HXLINE( 142)						channel->dispatchComplete();
            					}
            				}
            				else {
HXLINE( 145)					idx = (idx + 1);
            				}
            			}
            		}
HXLINE( 148)		::nme::media::SoundChannel_obj::nmeIsPolling = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SoundChannel_obj,nmePollComplete,(void))

::cpp::Function< bool  ( ::hx::Object *) > SoundChannel_obj::nme_sound_channel_is_complete;

::cpp::Function< Float  ( ::hx::Object *) > SoundChannel_obj::nme_sound_channel_get_left;

::cpp::Function< Float  ( ::hx::Object *) > SoundChannel_obj::nme_sound_channel_get_right;

::cpp::Function< Float  ( ::hx::Object *) > SoundChannel_obj::nme_sound_channel_get_position;

::cpp::Function< void  ( ::hx::Object *,Float) > SoundChannel_obj::nme_sound_channel_set_position;

::cpp::Function< Float  ( ::hx::Object *) > SoundChannel_obj::nme_sound_channel_get_data_position;

::cpp::Function< void  ( ::hx::Object *) > SoundChannel_obj::nme_sound_channel_stop;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *,Float,int, ::hx::Object *) > SoundChannel_obj::nme_sound_channel_create;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > SoundChannel_obj::nme_sound_channel_set_transform;

::cpp::Function< bool  ( ::hx::Object *) > SoundChannel_obj::nme_sound_channel_needs_data;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > SoundChannel_obj::nme_sound_channel_add_data;

 ::Dynamic SoundChannel_obj::nme_sound_channel_create_async;

::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > SoundChannel_obj::nme_sound_channel_post_buffer;


::hx::ObjectPtr< SoundChannel_obj > SoundChannel_obj::__new( ::Dynamic inSoundHandle,Float startTime,int loops, ::nme::media::SoundTransform sndTransform) {
	::hx::ObjectPtr< SoundChannel_obj > __this = new SoundChannel_obj();
	__this->__construct(inSoundHandle,startTime,loops,sndTransform);
	return __this;
}

::hx::ObjectPtr< SoundChannel_obj > SoundChannel_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic inSoundHandle,Float startTime,int loops, ::nme::media::SoundTransform sndTransform) {
	SoundChannel_obj *__this = (SoundChannel_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SoundChannel_obj), true, "nme.media.SoundChannel"));
	*(void **)__this = SoundChannel_obj::_hx_vtable;
	__this->__construct(inSoundHandle,startTime,loops,sndTransform);
	return __this;
}

SoundChannel_obj::SoundChannel_obj()
{
}

void SoundChannel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SoundChannel);
	HX_MARK_MEMBER_NAME(leftPeak,"leftPeak");
	HX_MARK_MEMBER_NAME(rightPeak,"rightPeak");
	HX_MARK_MEMBER_NAME(pitch,"pitch");
	HX_MARK_MEMBER_NAME(nmeStopped,"nmeStopped");
	HX_MARK_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_MARK_MEMBER_NAME(nmeTransform,"nmeTransform");
	HX_MARK_MEMBER_NAME(nmeDataProvider,"nmeDataProvider");
	 ::nme::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void SoundChannel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(leftPeak,"leftPeak");
	HX_VISIT_MEMBER_NAME(rightPeak,"rightPeak");
	HX_VISIT_MEMBER_NAME(pitch,"pitch");
	HX_VISIT_MEMBER_NAME(nmeStopped,"nmeStopped");
	HX_VISIT_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_VISIT_MEMBER_NAME(nmeTransform,"nmeTransform");
	HX_VISIT_MEMBER_NAME(nmeDataProvider,"nmeDataProvider");
	 ::nme::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val SoundChannel_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { return ::hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pitch") ) { return ::hx::Val( pitch ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftPeak") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_leftPeak() : leftPeak ); }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_position() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightPeak") ) { return ::hx::Val( inCallProp != ::hx::paccNever ? get_rightPeak() : rightPeak ); }
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { return ::hx::Val( nmeHandle ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nmeStopped") ) { return ::hx::Val( nmeStopped ); }
		if (HX_FIELD_EQ(inName,"postBuffer") ) { return ::hx::Val( postBuffer_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"nmeTransform") ) { return ::hx::Val( nmeTransform ); }
		if (HX_FIELD_EQ(inName,"get_leftPeak") ) { return ::hx::Val( get_leftPeak_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_position") ) { return ::hx::Val( get_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_position") ) { return ::hx::Val( set_position_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_rightPeak") ) { return ::hx::Val( get_rightPeak_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundTransform") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_soundTransform() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nmeDataProvider") ) { return ::hx::Val( nmeDataProvider ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nmeCheckComplete") ) { return ::hx::Val( nmeCheckComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"dispatchComplete") ) { return ::hx::Val( dispatchComplete_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"get_soundTransform") ) { return ::hx::Val( get_soundTransform_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_soundTransform") ) { return ::hx::Val( set_soundTransform_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SoundChannel_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"createAsync") ) { outValue = createAsync_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"nmeIsPolling") ) { outValue = ( nmeIsPolling ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"createDynamic") ) { outValue = createDynamic_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nmePollComplete") ) { outValue = nmePollComplete_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nmeIncompleteList") ) { outValue = ( nmeIncompleteList ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"nmeCompletePending") ) { outValue = nmeCompletePending_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nmeDynamicSoundCount") ) { outValue = ( nmeDynamicSoundCount ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_stop") ) { outValue = ( nme_sound_channel_stop ); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_create") ) { outValue = ( nme_sound_channel_create ); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_get_left") ) { outValue = ( nme_sound_channel_get_left ); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_channel_add_data") ) { outValue = ( nme_sound_channel_add_data ); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_get_right") ) { outValue = ( nme_sound_channel_get_right ); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_needs_data") ) { outValue = ( nme_sound_channel_needs_data ); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_is_complete") ) { outValue = ( nme_sound_channel_is_complete ); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_channel_post_buffer") ) { outValue = ( nme_sound_channel_post_buffer ); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_get_position") ) { outValue = ( nme_sound_channel_get_position ); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_channel_set_position") ) { outValue = ( nme_sound_channel_set_position ); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_channel_create_async") ) { outValue = ( nme_sound_channel_create_async ); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_set_transform") ) { outValue = ( nme_sound_channel_set_transform ); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_get_data_position") ) { outValue = ( nme_sound_channel_get_data_position ); return true; }
	}
	return false;
}

::hx::Val SoundChannel_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"pitch") ) { pitch=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"leftPeak") ) { leftPeak=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"position") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_position(inValue.Cast< Float >()) ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightPeak") ) { rightPeak=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { nmeHandle=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nmeStopped") ) { nmeStopped=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"nmeTransform") ) { nmeTransform=inValue.Cast<  ::nme::media::SoundTransform >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"soundTransform") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_soundTransform(inValue.Cast<  ::nme::media::SoundTransform >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nmeDataProvider") ) { nmeDataProvider=inValue.Cast<  ::nme::events::EventDispatcher >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SoundChannel_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"nmeIsPolling") ) { nmeIsPolling=ioValue.Cast< bool >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nmeIncompleteList") ) { nmeIncompleteList=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"nmeDynamicSoundCount") ) { nmeDynamicSoundCount=ioValue.Cast< int >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_stop") ) { nme_sound_channel_stop=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *) > >(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_create") ) { nme_sound_channel_create=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *,Float,int, ::hx::Object *) > >(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_get_left") ) { nme_sound_channel_get_left=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_channel_add_data") ) { nme_sound_channel_add_data=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_get_right") ) { nme_sound_channel_get_right=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_needs_data") ) { nme_sound_channel_needs_data=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_is_complete") ) { nme_sound_channel_is_complete=ioValue.Cast< ::cpp::Function< bool  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_channel_post_buffer") ) { nme_sound_channel_post_buffer=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_get_position") ) { nme_sound_channel_get_position=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_channel_set_position") ) { nme_sound_channel_set_position=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,Float) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_sound_channel_create_async") ) { nme_sound_channel_create_async=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_set_transform") ) { nme_sound_channel_set_transform=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > >(); return true; }
		break;
	case 35:
		if (HX_FIELD_EQ(inName,"nme_sound_channel_get_data_position") ) { nme_sound_channel_get_data_position=ioValue.Cast< ::cpp::Function< Float  ( ::hx::Object *) > >(); return true; }
	}
	return false;
}

void SoundChannel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("leftPeak",c6,21,50,51));
	outFields->push(HX_("rightPeak",1b,34,1b,b5));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("soundTransform",9d,ee,de,22));
	outFields->push(HX_("pitch",c0,bb,a0,c2));
	outFields->push(HX_("nmeStopped",67,37,63,12));
	outFields->push(HX_("nmeHandle",8e,87,bf,52));
	outFields->push(HX_("nmeTransform",46,1d,bc,e3));
	outFields->push(HX_("nmeDataProvider",e1,31,1f,c4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SoundChannel_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(SoundChannel_obj,leftPeak),HX_("leftPeak",c6,21,50,51)},
	{::hx::fsFloat,(int)offsetof(SoundChannel_obj,rightPeak),HX_("rightPeak",1b,34,1b,b5)},
	{::hx::fsFloat,(int)offsetof(SoundChannel_obj,pitch),HX_("pitch",c0,bb,a0,c2)},
	{::hx::fsBool,(int)offsetof(SoundChannel_obj,nmeStopped),HX_("nmeStopped",67,37,63,12)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(SoundChannel_obj,nmeHandle),HX_("nmeHandle",8e,87,bf,52)},
	{::hx::fsObject /*  ::nme::media::SoundTransform */ ,(int)offsetof(SoundChannel_obj,nmeTransform),HX_("nmeTransform",46,1d,bc,e3)},
	{::hx::fsObject /*  ::nme::events::EventDispatcher */ ,(int)offsetof(SoundChannel_obj,nmeDataProvider),HX_("nmeDataProvider",e1,31,1f,c4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo SoundChannel_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &SoundChannel_obj::nmeDynamicSoundCount,HX_("nmeDynamicSoundCount",b9,4b,66,48)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &SoundChannel_obj::nmeIncompleteList,HX_("nmeIncompleteList",02,13,24,13)},
	{::hx::fsBool,(void *) &SoundChannel_obj::nmeIsPolling,HX_("nmeIsPolling",13,2d,22,ac)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &SoundChannel_obj::nme_sound_channel_is_complete,HX_("nme_sound_channel_is_complete",09,c0,2c,12)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &SoundChannel_obj::nme_sound_channel_get_left,HX_("nme_sound_channel_get_left",95,e3,0b,fe)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &SoundChannel_obj::nme_sound_channel_get_right,HX_("nme_sound_channel_get_right",8e,4c,68,c3)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &SoundChannel_obj::nme_sound_channel_get_position,HX_("nme_sound_channel_get_position",37,5b,c6,ce)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,Float) > */ ,(void *) &SoundChannel_obj::nme_sound_channel_set_position,HX_("nme_sound_channel_set_position",ab,7e,bf,e3)},
	{::hx::fsObject /* ::cpp::Function< Float  ( ::hx::Object *) > */ ,(void *) &SoundChannel_obj::nme_sound_channel_get_data_position,HX_("nme_sound_channel_get_data_position",50,6f,69,00)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *) > */ ,(void *) &SoundChannel_obj::nme_sound_channel_stop,HX_("nme_sound_channel_stop",87,69,01,3c)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *,Float,int, ::hx::Object *) > */ ,(void *) &SoundChannel_obj::nme_sound_channel_create,HX_("nme_sound_channel_create",c1,0b,2a,bb)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &SoundChannel_obj::nme_sound_channel_set_transform,HX_("nme_sound_channel_set_transform",2a,91,10,d9)},
	{::hx::fsObject /* ::cpp::Function< bool  ( ::hx::Object *) > */ ,(void *) &SoundChannel_obj::nme_sound_channel_needs_data,HX_("nme_sound_channel_needs_data",d1,34,33,92)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &SoundChannel_obj::nme_sound_channel_add_data,HX_("nme_sound_channel_add_data",4d,48,45,12)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &SoundChannel_obj::nme_sound_channel_create_async,HX_("nme_sound_channel_create_async",fe,18,98,5e)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *, ::hx::Object *) > */ ,(void *) &SoundChannel_obj::nme_sound_channel_post_buffer,HX_("nme_sound_channel_post_buffer",5a,87,13,bc)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String SoundChannel_obj_sMemberFields[] = {
	HX_("leftPeak",c6,21,50,51),
	HX_("rightPeak",1b,34,1b,b5),
	HX_("pitch",c0,bb,a0,c2),
	HX_("nmeStopped",67,37,63,12),
	HX_("nmeHandle",8e,87,bf,52),
	HX_("nmeTransform",46,1d,bc,e3),
	HX_("nmeDataProvider",e1,31,1f,c4),
	HX_("postBuffer",80,3d,cd,25),
	HX_("nmeCheckComplete",7b,42,49,84),
	HX_("dispatchComplete",93,d5,c1,98),
	HX_("stop",02,f0,5b,4c),
	HX_("get_leftPeak",cf,d5,69,06),
	HX_("get_rightPeak",f2,07,7f,76),
	HX_("get_position",b2,54,14,80),
	HX_("set_position",26,78,0d,95),
	HX_("get_soundTransform",66,cf,78,be),
	HX_("set_soundTransform",da,01,28,9b),
	::String(null()) };

static void SoundChannel_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nmeDynamicSoundCount,"nmeDynamicSoundCount");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nmeIncompleteList,"nmeIncompleteList");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nmeIsPolling,"nmeIsPolling");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_is_complete,"nme_sound_channel_is_complete");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_get_left,"nme_sound_channel_get_left");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_get_right,"nme_sound_channel_get_right");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_get_position,"nme_sound_channel_get_position");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_set_position,"nme_sound_channel_set_position");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_get_data_position,"nme_sound_channel_get_data_position");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_stop,"nme_sound_channel_stop");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_create,"nme_sound_channel_create");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_set_transform,"nme_sound_channel_set_transform");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_needs_data,"nme_sound_channel_needs_data");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_add_data,"nme_sound_channel_add_data");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_create_async,"nme_sound_channel_create_async");
	HX_MARK_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_post_buffer,"nme_sound_channel_post_buffer");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SoundChannel_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nmeDynamicSoundCount,"nmeDynamicSoundCount");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nmeIncompleteList,"nmeIncompleteList");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nmeIsPolling,"nmeIsPolling");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_is_complete,"nme_sound_channel_is_complete");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_get_left,"nme_sound_channel_get_left");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_get_right,"nme_sound_channel_get_right");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_get_position,"nme_sound_channel_get_position");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_set_position,"nme_sound_channel_set_position");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_get_data_position,"nme_sound_channel_get_data_position");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_stop,"nme_sound_channel_stop");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_create,"nme_sound_channel_create");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_set_transform,"nme_sound_channel_set_transform");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_needs_data,"nme_sound_channel_needs_data");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_add_data,"nme_sound_channel_add_data");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_create_async,"nme_sound_channel_create_async");
	HX_VISIT_MEMBER_NAME(SoundChannel_obj::nme_sound_channel_post_buffer,"nme_sound_channel_post_buffer");
};

#endif

::hx::Class SoundChannel_obj::__mClass;

static ::String SoundChannel_obj_sStaticFields[] = {
	HX_("nmeDynamicSoundCount",b9,4b,66,48),
	HX_("nmeIncompleteList",02,13,24,13),
	HX_("nmeIsPolling",13,2d,22,ac),
	HX_("createAsync",a0,36,b9,4f),
	HX_("createDynamic",e3,77,58,1e),
	HX_("nmeCompletePending",f8,87,37,77),
	HX_("nmePollComplete",7e,06,dc,4f),
	HX_("nme_sound_channel_is_complete",09,c0,2c,12),
	HX_("nme_sound_channel_get_left",95,e3,0b,fe),
	HX_("nme_sound_channel_get_right",8e,4c,68,c3),
	HX_("nme_sound_channel_get_position",37,5b,c6,ce),
	HX_("nme_sound_channel_set_position",ab,7e,bf,e3),
	HX_("nme_sound_channel_get_data_position",50,6f,69,00),
	HX_("nme_sound_channel_stop",87,69,01,3c),
	HX_("nme_sound_channel_create",c1,0b,2a,bb),
	HX_("nme_sound_channel_set_transform",2a,91,10,d9),
	HX_("nme_sound_channel_needs_data",d1,34,33,92),
	HX_("nme_sound_channel_add_data",4d,48,45,12),
	HX_("nme_sound_channel_create_async",fe,18,98,5e),
	HX_("nme_sound_channel_post_buffer",5a,87,13,bc),
	::String(null())
};

void SoundChannel_obj::__register()
{
	SoundChannel_obj _hx_dummy;
	SoundChannel_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.media.SoundChannel",c6,29,d0,2b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SoundChannel_obj::__GetStatic;
	__mClass->mSetStaticField = &SoundChannel_obj::__SetStatic;
	__mClass->mMarkFunc = SoundChannel_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(SoundChannel_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SoundChannel_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SoundChannel_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SoundChannel_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SoundChannel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SoundChannel_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SoundChannel_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_20_boot)
HXDLIN(  20)		nmeDynamicSoundCount = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_21_boot)
HXDLIN(  21)		nmeIncompleteList = ::Array_obj< ::Dynamic>::__new();
            	}
{
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_22_boot)
HXDLIN(  22)		nmeIsPolling = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcb6dc8fe8d86a64_9_boot)
HXDLIN(   9)		nme_sound_channel_is_complete = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_is_complete",09,c0,2c,12),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcb6dc8fe8d86a64_9_boot)
HXDLIN(   9)		nme_sound_channel_get_left = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_get_left",95,e3,0b,fe),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcb6dc8fe8d86a64_9_boot)
HXDLIN(   9)		nme_sound_channel_get_right = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_get_right",8e,4c,68,c3),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcb6dc8fe8d86a64_9_boot)
HXDLIN(   9)		nme_sound_channel_get_position = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_get_position",37,5b,c6,ce),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcb6dc8fe8d86a64_9_boot)
HXDLIN(   9)		nme_sound_channel_set_position = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_set_position",ab,7e,bf,e3),HX_("odv",c1,91,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcb6dc8fe8d86a64_9_boot)
HXDLIN(   9)		nme_sound_channel_get_data_position = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_get_data_position",50,6f,69,00),HX_("od",15,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcb6dc8fe8d86a64_9_boot)
HXDLIN(   9)		nme_sound_channel_stop = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_stop",87,69,01,3c),HX_("ov",27,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcb6dc8fe8d86a64_9_boot)
HXDLIN(   9)		nme_sound_channel_create = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_create",c1,0b,2a,bb),HX_("odioo",d4,c7,e3,2b),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcb6dc8fe8d86a64_9_boot)
HXDLIN(   9)		nme_sound_channel_set_transform = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_set_transform",2a,91,10,d9),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcb6dc8fe8d86a64_9_boot)
HXDLIN(   9)		nme_sound_channel_needs_data = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_needs_data",d1,34,33,92),HX_("ob",13,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcb6dc8fe8d86a64_9_boot)
HXDLIN(   9)		nme_sound_channel_add_data = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_add_data",4d,48,45,12),HX_("oov",56,9b,54,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_1d555e4e98db27c0_196_boot)
HXDLIN( 196)		nme_sound_channel_create_async = ::nme::Loader_obj::load(HX_("nme_sound_channel_create_async",fe,18,98,5e),5);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fcb6dc8fe8d86a64_9_boot)
HXDLIN(   9)		nme_sound_channel_post_buffer = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_sound_channel_post_buffer",5a,87,13,bc),HX_("oov",56,9b,54,00),false);
            	}
}

} // end namespace nme
} // end namespace media
