// Generated by Haxe 4.3.0-rc.1+
(function ($global) { "use strict";
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
haxe_ds_GenericCell.__name__ = true;
var haxe_ds_GenericStack = function() {
};
haxe_ds_GenericStack.__name__ = true;
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.prototype = {
	getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var htmlHelper_canvas_CanvasSetup = function(allowOverSample) {
	if(allowOverSample == null) {
		allowOverSample = true;
	}
	this.factor = 4.;
	this.divertTrace = new htmlHelper_tools_DivertTrace();
	var e = null;
	var this1;
	if(e == null) {
		var canvas = window.document.createElement("canvas");
		var dom = canvas;
		var style = dom.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = "0px";
		style.top = "0px";
		style.position = "absolute";
		this1 = canvas;
	} else {
		this1 = e;
	}
	this.canvasWrapper = this1;
	this.canvasWrapper.width = 1024;
	this.canvasWrapper.height = 768;
	var dom = this.canvasWrapper;
	var style = dom.style;
	style.background = "black";
	window.document.body.appendChild(this.canvasWrapper);
	var this1 = new htmlHelper_canvas_CanvasPlus(this.canvasWrapper.getContext("2d",null),10,10);
	this1.me.lineWidth = 1;
	var tmp = StringTools.hex(16744272,6);
	this1.me.strokeStyle = "#" + tmp;
	this.surface = this1;
	var me = this.surface.me;
	if(allowOverSample) {
		this.overSampleCanvas();
	}
};
htmlHelper_canvas_CanvasSetup.__name__ = true;
htmlHelper_canvas_CanvasSetup.prototype = {
	overSampleCanvas: function() {
		var ctx = this.surface.me;
		var canvas = this.canvasWrapper;
		var width = canvas.width;
		var height = canvas.height;
		canvas.width = 0 | (width * this.factor | 0);
		canvas.height = 0 | (height * this.factor | 0);
		var dom = this.canvasWrapper;
		var style = dom.style;
		style.width = width + "px";
		style.height = height + "px";
		ctx.scale(this.factor,this.factor);
	}
};
var htmlHelper_canvas_CanvasPlus = function(me,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.me = me;
};
htmlHelper_canvas_CanvasPlus.__name__ = true;
var htmlHelper_tools_DivertTrace = function(left,d) {
	if(left == null) {
		left = 610;
	}
	this.textStyle1 = "<span style=\"font-size:14px; color:Grey\">";
	this.textStyle0 = "<span style=\"font-size:12px; color:Silver\">";
	this.traceString = "";
	this.divertTrace(left,d);
};
htmlHelper_tools_DivertTrace.__name__ = true;
htmlHelper_tools_DivertTrace.prototype = {
	divertTrace: function(left,d) {
		if(d == null) {
			var doc = window.document;
			this.traceDiv = doc.createElement("div");
			doc.body.appendChild(this.traceDiv);
			var dom = this.traceDiv;
			var style = dom.style;
			style.position = "absolute";
			style.top = "0px";
			style.left = (left == null ? "null" : "" + left) + "px";
			style.height = "500px";
			style.width = "500px";
			style.zIndex = "99";
			style.overflow = "auto";
		} else {
			this.traceDiv = d;
		}
		haxe_Log.trace = $bind(this,this.myTrace);
	}
	,myTrace: function(v,inf) {
		if(Std.string(v) == "") {
			return;
		}
		this.traceString += this.textStyle0 + inf.className + "." + inf.methodName + " ( " + (inf.lineNumber == null ? "null" : "" + inf.lineNumber) + " )" + "</span>" + "<br> - " + this.textStyle1 + Std.string(v) + "</span>" + "<br>";
		this.traceDiv.innerHTML = this.traceString;
	}
};
var iterMagic_ArrIntImg = function() {
};
iterMagic_ArrIntImg.__name__ = true;
iterMagic_ArrIntImg.prototype = {
	set: function(index,value) {
		this.data[index] = value;
		return value;
	}
	,get: function(index) {
		return this.data[index];
	}
};
var iterMagic_VecIntImg = function() {
};
iterMagic_VecIntImg.__name__ = true;
iterMagic_VecIntImg.prototype = {
	set: function(index,value) {
		this.data[index] = value;
		return value;
	}
	,get: function(index) {
		return this.data[index];
	}
};
var iterMagic_BytesImg = function() {
};
iterMagic_BytesImg.__name__ = true;
iterMagic_BytesImg.prototype = {
	set: function(index,value) {
		this.data.setInt32(index * 4 | 0,value);
		return value;
	}
	,get: function(index) {
		return this.data.getInt32(index * 4 | 0);
	}
};
var iterMagic_U32ArrImg = function() {
};
iterMagic_U32ArrImg.__name__ = true;
iterMagic_U32ArrImg.prototype = {
	set: function(index,value) {
		this.data[index] = value;
		return value;
	}
	,get: function(index) {
		return this.data[index];
	}
};
var iterMagic_StackIntImg = function() {
};
iterMagic_StackIntImg.__name__ = true;
iterMagic_StackIntImg.prototype = {
	set: function(index,value) {
		var l = this.data.head;
		var prev = null;
		var _g = 0;
		var _g1 = index;
		while(_g < _g1) {
			var i = _g++;
			prev = l;
			l = l.next;
		}
		if(prev == null) {
			this.data.head = new haxe_ds_GenericCell(value,l.next);
			l = null;
		} else {
			prev.next = new haxe_ds_GenericCell(value,l.next);
			l = null;
		}
		return value;
	}
	,get: function(index) {
		var l = this.data.head;
		var prev = l;
		++index;
		var _g = 0;
		var _g1 = index;
		while(_g < _g1) {
			var i = _g++;
			prev = l;
			l = l.next;
		}
		return prev.elt;
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var pixelimageXY_ImageStruct = function() {
	this.useMask = false;
	this.useVirtualPos = false;
	this.virtualY = 0;
	this.virtualX = 0;
	this.transparent = false;
	this.isLittle = pixelimageXY_Endian_isLittleEndian;
	this.transparent = false;
};
pixelimageXY_ImageStruct.__name__ = true;
var pixelimageXY_application_TestBytes = function() {
	this.canvasSetup = new htmlHelper_canvas_CanvasSetup();
	this.surface = this.canvasSetup.surface;
	var imageType = null;
	var this1 = new pixelimageXY_ImageStruct();
	if(imageType == null) {
		imageType = pixelimageXY_ImageStruct.defaultType;
	}
	var imageType1 = imageType;
	if(imageType1 == null) {
		imageType1 = 2;
	}
	var tmp;
	switch(imageType1) {
	case 0:
		var byt = new iterMagic_BytesImg();
		var b = byt;
		b.width = 4096;
		b.height = 3072;
		b.length = 12582912;
		b.data = new haxe_io_Bytes(new ArrayBuffer(b.length * 4));
		var len = b.length;
		var w = 0;
		var _g = 0;
		var _g1 = b.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = b.width;
			while(_g2 < _g3) {
				var x = _g2++;
				b.data.b[w++] = 0;
				b.data.b[w++] = 0;
				b.data.b[w++] = 0;
				b.data.b[w++] = 0;
			}
		}
		tmp = b;
		break;
	case 1:
		var arrI = new iterMagic_ArrIntImg();
		var a = arrI;
		a.width = 4096;
		a.height = 3072;
		a.data = [];
		a.length = 12582912;
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			a.data[i] = 0;
		}
		tmp = a;
		break;
	case 2:
		var u32a = new iterMagic_U32ArrImg();
		var b = u32a;
		b.width = 4096;
		b.height = 3072;
		b.length = 12582912;
		var this2 = new Uint32Array(b.length);
		b.data = this2;
		var _g = 0;
		var _g1 = b.length;
		while(_g < _g1) {
			var i = _g++;
			b.data[i] = 0;
		}
		tmp = b;
		break;
	case 3:
		var vec = new iterMagic_VecIntImg();
		var v = vec;
		v.width = 4096;
		v.height = 3072;
		v.length = 12582912;
		var this2 = new Array(v.length);
		v.data = this2;
		var _g = 0;
		var _g1 = v.length;
		while(_g < _g1) {
			var i = _g++;
			v.data[i] = 0;
		}
		tmp = v;
		break;
	case 4:
		var sInt = new iterMagic_StackIntImg();
		var b = sInt;
		b.width = 4096;
		b.height = 3072;
		b.length = 12582912;
		b.data = new haxe_ds_GenericStack();
		var len = b.length;
		var d = b.data;
		if(d.head == null) {
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				d.head = new haxe_ds_GenericCell(0,d.head);
			}
		} else {
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var l = b.data.head;
				var prev = null;
				var _g2 = 0;
				var _g3 = i;
				while(_g2 < _g3) {
					var i1 = _g2++;
					prev = l;
					l = l.next;
				}
				if(prev == null) {
					b.data.head = new haxe_ds_GenericCell(0,l.next);
					l = null;
				} else {
					prev.next = new haxe_ds_GenericCell(0,l.next);
					l = null;
				}
			}
		}
		tmp = b;
		break;
	}
	this1.image = tmp;
	this1.width = 4096;
	this1.height = 3072;
	this1.imageType = imageType;
	this.pixelimage = this1;
	var this1 = this.pixelimage;
	var v = 3;
	pixelimageXY_ImageStruct.defaultType = v;
	this.pixelimage.transparent = true;
	var Violet = -7077677;
	var Indigo = -11861886;
	var Blue = -16776961;
	var Green = -16711936;
	var Yellow = -256;
	var Orange = -33024;
	var Red = -65536;
	var scale = 12;
	var width = 70 * scale;
	var height = 70 * scale;
	var imageType = null;
	var this1 = new pixelimageXY_ImageStruct();
	if(imageType == null) {
		imageType = pixelimageXY_ImageStruct.defaultType;
	}
	var imageType1 = imageType;
	if(imageType1 == null) {
		imageType1 = 2;
	}
	var tmp;
	switch(imageType1) {
	case 0:
		var byt = new iterMagic_BytesImg();
		var b = byt;
		b.width = width;
		b.height = height;
		b.length = width * height | 0;
		b.data = new haxe_io_Bytes(new ArrayBuffer(b.length * 4));
		var len = b.length;
		var w = 0;
		var _g = 0;
		var _g1 = b.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = b.width;
			while(_g2 < _g3) {
				var x = _g2++;
				b.data.b[w++] = 0;
				b.data.b[w++] = 0;
				b.data.b[w++] = 0;
				b.data.b[w++] = 0;
			}
		}
		tmp = b;
		break;
	case 1:
		var arrI = new iterMagic_ArrIntImg();
		var a = arrI;
		a.width = width;
		a.height = height;
		a.data = [];
		a.length = width * height | 0;
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			a.data[i] = 0;
		}
		tmp = a;
		break;
	case 2:
		var u32a = new iterMagic_U32ArrImg();
		var b = u32a;
		b.width = width;
		b.height = height;
		b.length = width * height | 0;
		var this2 = new Uint32Array(b.length);
		b.data = this2;
		var _g = 0;
		var _g1 = b.length;
		while(_g < _g1) {
			var i = _g++;
			b.data[i] = 0;
		}
		tmp = b;
		break;
	case 3:
		var vec = new iterMagic_VecIntImg();
		var v = vec;
		v.width = width;
		v.height = height;
		v.length = width * height | 0;
		var this2 = new Array(v.length);
		v.data = this2;
		var _g = 0;
		var _g1 = v.length;
		while(_g < _g1) {
			var i = _g++;
			v.data[i] = 0;
		}
		tmp = v;
		break;
	case 4:
		var sInt = new iterMagic_StackIntImg();
		var b = sInt;
		b.width = width;
		b.height = height;
		b.length = width * height | 0;
		b.data = new haxe_ds_GenericStack();
		var len = b.length;
		var d = b.data;
		if(d.head == null) {
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				d.head = new haxe_ds_GenericCell(0,d.head);
			}
		} else {
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				var l = b.data.head;
				var prev = null;
				var _g2 = 0;
				var _g3 = i;
				while(_g2 < _g3) {
					var i1 = _g2++;
					prev = l;
					l = l.next;
				}
				if(prev == null) {
					b.data.head = new haxe_ds_GenericCell(0,l.next);
					l = null;
				} else {
					prev.next = new haxe_ds_GenericCell(0,l.next);
					l = null;
				}
			}
		}
		tmp = b;
		break;
	}
	this1.image = tmp;
	this1.width = width;
	this1.height = height;
	this1.imageType = imageType;
	var pixelTest = this1;
	var colors = [Violet,Indigo,Blue,Green,Yellow,Orange,Red];
	var vertColor = colors[0];
	var _g = 0;
	var _g1 = 70 * scale;
	while(_g < _g1) {
		var x = _g++;
		vertColor = colors[Math.floor(x / scale / 10)];
		var _g2 = 0;
		var _g3 = 70 * scale;
		while(_g2 < _g3) {
			var y = _g2++;
			var this1 = vertColor;
			var c = this1;
			if((c >> 24 & 255) < 254 && pixelTest.transparent) {
				var location = pixelTest.useVirtualPos ? (y - pixelTest.virtualY) * pixelTest.width + x - pixelTest.virtualX | 0 : y * pixelTest.width + x | 0;
				var this2 = pixelTest.image.get(location);
				var this3 = this2;
				var this4 = pixelimageXY_Endian_isLittleEndian ? (this3 >> 24 & 255) << 24 | (this3 & 255) << 16 | (this3 >> 8 & 255) << 8 | this3 >> 16 & 255 : this3;
				var this5 = this4 >> 24 & 255;
				var a1 = this5 == 0 ? 0. : this5 / 255;
				var this6 = this4 >> 16 & 255;
				var r1 = this6 == 0 ? 0. : this6 / 255;
				var this7 = this4 >> 8 & 255;
				var g1 = this7 == 0 ? 0. : this7 / 255;
				var this8 = this4 & 255;
				var b1 = this8 == 0 ? 0. : this8 / 255;
				var this9 = vertColor >> 24 & 255;
				var a2 = this9 == 0 ? 0. : this9 / 255;
				var this10 = vertColor >> 16 & 255;
				var r2 = this10 == 0 ? 0. : this10 / 255;
				var this11 = vertColor >> 8 & 255;
				var g2 = this11 == 0 ? 0. : this11 / 255;
				var this12 = vertColor & 255;
				var b2 = this12 == 0 ? 0. : this12 / 255;
				var a3 = a1 * (1 - a2);
				var r = 255 * (r1 * a3 + r2 * a2) | 0;
				var g = 255 * (g1 * a3 + g2 * a2) | 0;
				var b = 255 * (b1 * a3 + b2 * a2) | 0;
				var a = 255 * (a3 + a2) | 0;
				var blended = a << 24 | r << 16 | g << 8 | b;
				pixelTest.image.set(location,pixelimageXY_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended);
			} else {
				pixelTest.image.set(pixelTest.useVirtualPos ? (y - pixelTest.virtualY) * pixelTest.width + x - pixelTest.virtualX | 0 : y * pixelTest.width + x | 0,pixelimageXY_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c);
			}
		}
	}
	var this1 = this.pixelimage;
	var _g = 0;
	var _g1 = pixelTest.height;
	while(_g < _g1) {
		var dy = _g++;
		var _g2 = 0;
		var _g3 = pixelTest.width;
		while(_g2 < _g3) {
			var dx = _g2++;
			var c = pixelTest.image.get(pixelTest.useVirtualPos ? (dy - pixelTest.virtualY) * pixelTest.width + dx - pixelTest.virtualX | 0 : dy * pixelTest.width + dx | 0);
			var col = pixelimageXY_Endian_isLittleEndian ? (c >> 24 & 255) << 24 | (c & 255) << 16 | (c >> 8 & 255) << 8 | c >> 16 & 255 : c;
			if(pixelTest.useMask && pixelTest.mask != null) {
				var this2 = pixelTest.mask;
				var c1 = this2.image.get(this2.useVirtualPos ? (dy - this2.virtualY) * this2.width + dx - this2.virtualX | 0 : dy * this2.width + dx | 0);
				var this3 = pixelimageXY_Endian_isLittleEndian ? (c1 >> 24 & 255) << 24 | (c1 & 255) << 16 | (c1 >> 8 & 255) << 8 | c1 >> 16 & 255 : c1;
				var maskPixel = this3;
				var this4 = col;
				var this5 = this4;
				if(maskPixel == 0) {
					var this6 = this5;
					col = this6;
				} else {
					var this7 = maskPixel >> 24 & 255;
					var m0 = this7 == 0 ? 0. : this7 / 255;
					var this8 = maskPixel >> 16 & 255;
					var m1 = this8 == 0 ? 0. : this8 / 255;
					var this9 = maskPixel >> 8 & 255;
					var m2 = this9 == 0 ? 0. : this9 / 255;
					var this10 = maskPixel & 255;
					var m3 = this10 == 0 ? 0. : this10 / 255;
					var ch0 = (1. - m0) * (this5 >> 24 & 255) | 0;
					var ch1 = (1. - m1) * (this5 >> 16 & 255) | 0;
					var ch2 = (1. - m2) * (this5 >> 8 & 255) | 0;
					var ch3 = (1. - m3) * (this5 & 255) | 0;
					col = Math.round(ch0 * 255) << 24 | Math.round(ch1 * 255) << 16 | Math.round(ch2 * 255) << 8 | Math.round(ch3 * 255);
				}
			}
			if(col != 0) {
				var x = 100 + dx;
				var y = 100 + dy;
				var this11 = col;
				var c2 = this11;
				if((c2 >> 24 & 255) < 254 && this1.transparent) {
					var location = this1.useVirtualPos ? (y - this1.virtualY) * this1.width + x - this1.virtualX | 0 : y * this1.width + x | 0;
					var this12 = this1.image.get(location);
					var this13 = this12;
					var this14 = pixelimageXY_Endian_isLittleEndian ? (this13 >> 24 & 255) << 24 | (this13 & 255) << 16 | (this13 >> 8 & 255) << 8 | this13 >> 16 & 255 : this13;
					var this15 = this14 >> 24 & 255;
					var a1 = this15 == 0 ? 0. : this15 / 255;
					var this16 = this14 >> 16 & 255;
					var r1 = this16 == 0 ? 0. : this16 / 255;
					var this17 = this14 >> 8 & 255;
					var g1 = this17 == 0 ? 0. : this17 / 255;
					var this18 = this14 & 255;
					var b1 = this18 == 0 ? 0. : this18 / 255;
					var this19 = col >> 24 & 255;
					var a2 = this19 == 0 ? 0. : this19 / 255;
					var this20 = col >> 16 & 255;
					var r2 = this20 == 0 ? 0. : this20 / 255;
					var this21 = col >> 8 & 255;
					var g2 = this21 == 0 ? 0. : this21 / 255;
					var this22 = col & 255;
					var b2 = this22 == 0 ? 0. : this22 / 255;
					var a3 = a1 * (1 - a2);
					var r = 255 * (r1 * a3 + r2 * a2) | 0;
					var g = 255 * (g1 * a3 + g2 * a2) | 0;
					var b = 255 * (b1 * a3 + b2 * a2) | 0;
					var a = 255 * (a3 + a2) | 0;
					var blended = a << 24 | r << 16 | g << 8 | b;
					this1.image.set(location,pixelimageXY_Endian_isLittleEndian ? (blended >> 24 & 255) << 24 | (blended & 255) << 16 | (blended >> 8 & 255) << 8 | blended >> 16 & 255 : blended);
				} else {
					this1.image.set(this1.useVirtualPos ? (y - this1.virtualY) * this1.width + x - this1.virtualX | 0 : y * this1.width + x | 0,pixelimageXY_Endian_isLittleEndian ? (c2 >> 24 & 255) << 24 | (c2 & 255) << 16 | (c2 >> 8 & 255) << 8 | c2 >> 16 & 255 : c2);
				}
			}
		}
	}
	var this1 = this.pixelimage;
	var ctx = this.surface.me;
	var here = this1;
	var base = this1;
	if(base.useMask && base.mask != null) {
		var width = here.width;
		var height = here.height;
		var imageType = null;
		var this1 = new pixelimageXY_ImageStruct();
		if(imageType == null) {
			imageType = pixelimageXY_ImageStruct.defaultType;
		}
		var imageType1 = imageType;
		if(imageType1 == null) {
			imageType1 = 2;
		}
		var tmp;
		switch(imageType1) {
		case 0:
			var byt = new iterMagic_BytesImg();
			var b = byt;
			b.width = width;
			b.height = height;
			b.length = width * height | 0;
			b.data = new haxe_io_Bytes(new ArrayBuffer(b.length * 4));
			var len = b.length;
			var w = 0;
			var _g = 0;
			var _g1 = b.height;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = b.width;
				while(_g2 < _g3) {
					var x = _g2++;
					b.data.b[w++] = 0;
					b.data.b[w++] = 0;
					b.data.b[w++] = 0;
					b.data.b[w++] = 0;
				}
			}
			tmp = b;
			break;
		case 1:
			var arrI = new iterMagic_ArrIntImg();
			var a = arrI;
			a.width = width;
			a.height = height;
			a.data = [];
			a.length = width * height | 0;
			var _g = 0;
			var _g1 = a.length;
			while(_g < _g1) {
				var i = _g++;
				a.data[i] = 0;
			}
			tmp = a;
			break;
		case 2:
			var u32a = new iterMagic_U32ArrImg();
			var b = u32a;
			b.width = width;
			b.height = height;
			b.length = width * height | 0;
			var this2 = new Uint32Array(b.length);
			b.data = this2;
			var _g = 0;
			var _g1 = b.length;
			while(_g < _g1) {
				var i = _g++;
				b.data[i] = 0;
			}
			tmp = b;
			break;
		case 3:
			var vec = new iterMagic_VecIntImg();
			var v = vec;
			v.width = width;
			v.height = height;
			v.length = width * height | 0;
			var this2 = new Array(v.length);
			v.data = this2;
			var _g = 0;
			var _g1 = v.length;
			while(_g < _g1) {
				var i = _g++;
				v.data[i] = 0;
			}
			tmp = v;
			break;
		case 4:
			var sInt = new iterMagic_StackIntImg();
			var b = sInt;
			b.width = width;
			b.height = height;
			b.length = width * height | 0;
			b.data = new haxe_ds_GenericStack();
			var len = b.length;
			var d = b.data;
			if(d.head == null) {
				var _g = 0;
				var _g1 = len;
				while(_g < _g1) {
					var i = _g++;
					d.head = new haxe_ds_GenericCell(0,d.head);
				}
			} else {
				var _g = 0;
				var _g1 = len;
				while(_g < _g1) {
					var i = _g++;
					var l = b.data.head;
					var prev = null;
					var _g2 = 0;
					var _g3 = i;
					while(_g2 < _g3) {
						var i1 = _g2++;
						prev = l;
						l = l.next;
					}
					if(prev == null) {
						b.data.head = new haxe_ds_GenericCell(0,l.next);
						l = null;
					} else {
						prev.next = new haxe_ds_GenericCell(0,l.next);
						l = null;
					}
				}
			}
			tmp = b;
			break;
		}
		this1.image = tmp;
		this1.width = width;
		this1.height = height;
		this1.imageType = imageType;
		var temp = this1;
		var _g = 0;
		var _g1 = here.image.length;
		while(_g < _g1) {
			var i = _g++;
			var this1 = here.image.get(i);
			var p0 = this1;
			var this2 = here.mask.image.get(i);
			var m1 = this2;
			var value;
			if(m1 == 0) {
				var this3 = p0;
				value = this3;
			} else {
				var this4 = m1 >> 24 & 255;
				var m0 = this4 == 0 ? 0. : this4 / 255;
				var this5 = m1 >> 16 & 255;
				var m11 = this5 == 0 ? 0. : this5 / 255;
				var this6 = m1 >> 8 & 255;
				var m2 = this6 == 0 ? 0. : this6 / 255;
				var this7 = m1 & 255;
				var m3 = this7 == 0 ? 0. : this7 / 255;
				var ch0 = (1. - m0) * (p0 >> 24 & 255) | 0;
				var ch1 = (1. - m11) * (p0 >> 16 & 255) | 0;
				var ch2 = (1. - m2) * (p0 >> 8 & 255) | 0;
				var ch3 = (1. - m3) * (p0 & 255) | 0;
				value = Math.round(ch0 * 255) << 24 | Math.round(ch1 * 255) << 16 | Math.round(ch2 * 255) << 8 | Math.round(ch3 * 255);
			}
			temp.image.set(i,value);
		}
		var this1 = new Uint32Array(temp.width * temp.height | 0);
		var temp1 = this1;
		var _g = 0;
		var _g1 = temp.image.length;
		while(_g < _g1) {
			var i = _g++;
			temp1[i] = temp.image.get(i);
		}
		var dataimg = temp1;
		var data = new Uint8ClampedArray(new Uint8Array(dataimg.buffer).buffer);
		var imageData = new ImageData(data,here.width,here.height);
		if(base.useVirtualPos) {
			ctx.putImageData(imageData,0 - base.virtualX,0 - base.virtualY);
		} else {
			ctx.putImageData(imageData,0,0);
		}
	} else {
		var this1 = new Uint32Array(here.width * here.height | 0);
		var temp = this1;
		var _g = 0;
		var _g1 = here.image.length;
		while(_g < _g1) {
			var i = _g++;
			temp[i] = here.image.get(i);
		}
		var dataimg = temp;
		var data = new Uint8ClampedArray(new Uint8Array(dataimg.buffer).buffer);
		var imageData = new ImageData(data,here.width,here.height);
		if(base.useVirtualPos) {
			ctx.putImageData(imageData,0 - base.virtualX,0 - base.virtualY);
		} else {
			ctx.putImageData(imageData,0,0);
		}
	}
};
pixelimageXY_application_TestBytes.__name__ = true;
function pixelimageXY_application_TestBytes_main() {
	new pixelimageXY_application_TestBytes();
}
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
var pixelimageXY_Endian_isLittleEndian = (function($this) {
	var $r;
	var a8 = new Uint8Array(4);
	var a32 = new Uint32Array(a8.buffer)[0] = -3407855;
	$r = a8[0] != 255;
	return $r;
}(this));
pixelimageXY_ImageStruct.defaultType = 2;
pixelimageXY_application_TestBytes_main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
