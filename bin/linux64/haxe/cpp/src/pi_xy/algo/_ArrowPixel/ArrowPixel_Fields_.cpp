// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericCell_Int
#include <haxe/ds/GenericCell_Int.h>
#endif
#ifndef INCLUDED_haxe_ds_GenericStack_Int
#include <haxe/ds/GenericStack_Int.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_iterMagic_ArrIntImg
#include <iterMagic/ArrIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_BytesImg
#include <iterMagic/BytesImg.h>
#endif
#ifndef INCLUDED_iterMagic_Iimg
#include <iterMagic/Iimg.h>
#endif
#ifndef INCLUDED_iterMagic_StackIntImg
#include <iterMagic/StackIntImg.h>
#endif
#ifndef INCLUDED_iterMagic_U32ArrImg
#include <iterMagic/U32ArrImg.h>
#endif
#ifndef INCLUDED_iterMagic_VecIntImg
#include <iterMagic/VecIntImg.h>
#endif
#ifndef INCLUDED_pi_xy_ImageStruct
#include <pi_xy/ImageStruct.h>
#endif
#ifndef INCLUDED_pi_xy__Endian_Endian_Fields_
#include <pi_xy/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitQuad
#include <pi_xy/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_HitTriArray
#include <pi_xy/algo/HitTriArray.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_QuadPoints_
#include <pi_xy/algo/QuadPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo__ArrowPixel_ArrowPixel_Fields_
#include <pi_xy/algo/_ArrowPixel/ArrowPixel_Fields_.h>
#endif
#ifndef INCLUDED_pi_xy_iter_IntIterStart
#include <pi_xy/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pi_xy_pixel__TwoGrad_TwoGrad_
#include <pi_xy/pixel/_TwoGrad/TwoGrad_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_63f36ef650858c14_13_fillLineArrow,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_","fillLineArrow",0xc054200e,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_.fillLineArrow","pi_xy/algo/ArrowPixel.hx",13,0xbc6b95cd)
HX_LOCAL_STACK_FRAME(_hx_pos_63f36ef650858c14_64_fillSoftLineArrow,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_","fillSoftLineArrow",0xa869d644,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_.fillSoftLineArrow","pi_xy/algo/ArrowPixel.hx",64,0xbc6b95cd)
HX_LOCAL_STACK_FRAME(_hx_pos_63f36ef650858c14_119_gradThickLineArrow,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_","gradThickLineArrow",0x2545a42a,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_.gradThickLineArrow","pi_xy/algo/ArrowPixel.hx",119,0xbc6b95cd)
HX_LOCAL_STACK_FRAME(_hx_pos_63f36ef650858c14_169_fillLineArrowBoth,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_","fillLineArrowBoth",0x8874f3af,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_.fillLineArrowBoth","pi_xy/algo/ArrowPixel.hx",169,0xbc6b95cd)
HX_LOCAL_STACK_FRAME(_hx_pos_63f36ef650858c14_235_fillSoftLineArrowBoth,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_","fillSoftLineArrowBoth",0xa440fce5,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_.fillSoftLineArrowBoth","pi_xy/algo/ArrowPixel.hx",235,0xbc6b95cd)
HX_LOCAL_STACK_FRAME(_hx_pos_63f36ef650858c14_301_gradThickLineArrowBoth,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_","gradThickLineArrowBoth",0xbdb0b5cb,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_.gradThickLineArrowBoth","pi_xy/algo/ArrowPixel.hx",301,0xbc6b95cd)
HX_LOCAL_STACK_FRAME(_hx_pos_63f36ef650858c14_371_fillLineFixedArrow,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_","fillLineFixedArrow",0xc1fbab50,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_.fillLineFixedArrow","pi_xy/algo/ArrowPixel.hx",371,0xbc6b95cd)
HX_LOCAL_STACK_FRAME(_hx_pos_63f36ef650858c14_433_fillSoftLineFixedArrow,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_","fillSoftLineFixedArrow",0xf8b7b15a,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_.fillSoftLineFixedArrow","pi_xy/algo/ArrowPixel.hx",433,0xbc6b95cd)
HX_LOCAL_STACK_FRAME(_hx_pos_63f36ef650858c14_490_gradThickLineFixedArrow,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_","gradThickLineFixedArrow",0x2109c1b4,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_.gradThickLineFixedArrow","pi_xy/algo/ArrowPixel.hx",490,0xbc6b95cd)
HX_LOCAL_STACK_FRAME(_hx_pos_63f36ef650858c14_550_fillLineFixedArrowBoth,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_","fillLineFixedArrowBoth",0x9cb047f1,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_.fillLineFixedArrowBoth","pi_xy/algo/ArrowPixel.hx",550,0xbc6b95cd)
HX_LOCAL_STACK_FRAME(_hx_pos_63f36ef650858c14_627_fillSoftLineFixedArrowBoth,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_","fillSoftLineFixedArrowBoth",0x0ae91afb,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_.fillSoftLineFixedArrowBoth","pi_xy/algo/ArrowPixel.hx",627,0xbc6b95cd)
HX_LOCAL_STACK_FRAME(_hx_pos_63f36ef650858c14_702_gradThickLineFixedArrowBoth,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_","gradThickLineFixedArrowBoth",0xff936055,"pi_xy.algo._ArrowPixel.ArrowPixel_Fields_.gradThickLineFixedArrowBoth","pi_xy/algo/ArrowPixel.hx",702,0xbc6b95cd)
namespace pi_xy{
namespace algo{
namespace _ArrowPixel{

void ArrowPixel_Fields__obj::__construct() { }

Dynamic ArrowPixel_Fields__obj::__CreateEmpty() { return new ArrowPixel_Fields__obj; }

void *ArrowPixel_Fields__obj::_hx_vtable = 0;

Dynamic ArrowPixel_Fields__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ArrowPixel_Fields__obj > _hx_result = new ArrowPixel_Fields__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ArrowPixel_Fields__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x61635e66;
}

 ::pi_xy::algo::HitTriArray ArrowPixel_Fields__obj::fillLineArrow( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float thick,int color,::hx::Null< bool >  __o_flare,::hx::Null< bool >  __o_reverseFlare,::hx::Null< bool >  __o_hasHit){
            		bool flare = __o_flare.Default(false);
            		bool reverseFlare = __o_reverseFlare.Default(false);
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_63f36ef650858c14_13_fillLineArrow)
HXLINE(  14)		Float goldenRatio = ((Float)1.61803398875);
HXLINE(  16)		Float o = (qy - py);
HXLINE(  17)		Float a = (qx - px);
HXLINE(  18)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE(  19)		Float theta = ::Math_obj::atan2(o,a);
HXLINE(  20)		Float thicker = ((( (Float)(2) ) * thick) * goldenRatio);
HXLINE(  21)		Float sin = ::Math_obj::sin(theta);
HXLINE(  22)		Float cos = ::Math_obj::cos(theta);
HXLINE(  23)		Float radius = (thick / ( (Float)(2) ));
HXLINE(  24)		Float radius2 = (thicker / ( (Float)(2) ));
HXLINE(  25)		Float h2 = (h / goldenRatio);
HXLINE(  26)		 ::pi_xy::algo::HitQuad hitQuad;
HXDLIN(  26)		if (flare) {
HXLINE(  27)			if (reverseFlare) {
HXLINE(  28)				Float sin1 = ::Math_obj::sin(theta);
HXDLIN(  28)				Float cos1 = ::Math_obj::cos(theta);
HXDLIN(  28)				Float radius1 = (thick / ( (Float)(2) ));
HXDLIN(  28)				Float radius21 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN(  28)				Float dx = ((Float)0.1);
HXDLIN(  28)				Float dy = radius1;
HXDLIN(  28)				Float cx = h2;
HXDLIN(  28)				Float cy = radius21;
HXDLIN(  28)				Float bx = h2;
HXDLIN(  28)				Float by = -(radius21);
HXDLIN(  28)				Float ax = ((Float)0.1);
HXDLIN(  28)				Float ay = -(radius1);
HXDLIN(  28)				Float temp = ((Float)0.);
HXLINE( 240)				temp = (px + ((ax * cos1) - (ay * sin1)));
HXLINE( 241)				ay = (py + ((ay * cos1) + (ax * sin1)));
HXLINE( 242)				ax = temp;
HXLINE( 244)				temp = (px + ((bx * cos1) - (by * sin1)));
HXLINE( 245)				by = (py + ((by * cos1) + (bx * sin1)));
HXLINE( 246)				bx = temp;
HXLINE( 248)				temp = (px + ((cx * cos1) - (cy * sin1)));
HXLINE( 249)				cy = (py + ((cy * cos1) + (cx * sin1)));
HXLINE( 250)				cx = temp;
HXLINE( 252)				temp = (px + ((dx * cos1) - (dy * sin1)));
HXLINE( 253)				dy = (py + ((dy * cos1) + (dx * sin1)));
HXLINE( 254)				dx = temp;
HXLINE(  28)				Float bx1 = bx;
HXDLIN(  28)				Float by1 = by;
HXDLIN(  28)				Float cx1 = dx;
HXDLIN(  28)				Float cy1 = dy;
HXDLIN(  28)				bool hasUndo = false;
HXDLIN(  28)				bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN(  28)				if (!(adjustWinding)) {
HXLINE(  28)					Float bx_ = bx1;
HXDLIN(  28)					Float by_ = by1;
HXLINE(  25)					bx1 = cx1;
HXLINE(  26)					by1 = cy1;
HXLINE(  27)					cx1 = bx_;
HXLINE(  28)					cy1 = by_;
            				}
HXDLIN(  28)				Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN(  28)				Float sx = (cy1 - ay);
HXDLIN(  28)				Float sy = (ax - cx1);
HXDLIN(  28)				Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN(  28)				Float tx = (ay - by1);
HXDLIN(  28)				Float ty = (bx1 - ax);
HXDLIN(  28)				Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN(  28)				 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  28)				if ((ax > bx1)) {
HXLINE(  28)					if ((ax > cx1)) {
HXLINE(  28)						int min;
HXDLIN(  28)						if ((bx1 > cx1)) {
HXLINE(  28)							min = ::Math_obj::floor(cx1);
            						}
            						else {
HXLINE(  28)							min = ::Math_obj::floor(bx1);
            						}
HXDLIN(  28)						int ii_min = min;
HXDLIN(  28)						int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  28)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            					}
            					else {
HXLINE(  28)						int ii_min1 = ::Math_obj::floor(bx1);
HXDLIN(  28)						int ii_max1 = ::Math_obj::ceil(cx1);
HXDLIN(  28)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            					}
            				}
            				else {
HXLINE(  28)					if ((bx1 > cx1)) {
HXLINE(  28)						int min1;
HXDLIN(  28)						if ((ax > cx1)) {
HXLINE(  28)							min1 = ::Math_obj::floor(cx1);
            						}
            						else {
HXLINE(  28)							min1 = ::Math_obj::ceil(ax);
            						}
HXDLIN(  28)						int ii_min2 = min1;
HXDLIN(  28)						int ii_max2 = ::Math_obj::ceil(bx1);
HXDLIN(  28)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            					}
            					else {
HXLINE(  28)						int ii_min3 = ::Math_obj::floor(ax);
HXDLIN(  28)						int ii_max3 = ::Math_obj::ceil(cx1);
HXDLIN(  28)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            					}
            				}
HXDLIN(  28)				 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  28)				if ((ay > by1)) {
HXLINE(  28)					if ((ay > cy1)) {
HXLINE(  28)						int min2;
HXDLIN(  28)						if ((by1 > cy1)) {
HXLINE(  28)							min2 = ::Math_obj::floor(cy1);
            						}
            						else {
HXLINE(  28)							min2 = ::Math_obj::floor(by1);
            						}
HXDLIN(  28)						int ii_min4 = min2;
HXDLIN(  28)						int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN(  28)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            					}
            					else {
HXLINE(  28)						int ii_min5 = ::Math_obj::floor(by1);
HXDLIN(  28)						int ii_max5 = ::Math_obj::ceil(cy1);
HXDLIN(  28)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            					}
            				}
            				else {
HXLINE(  28)					if ((by1 > cy1)) {
HXLINE(  28)						int min3;
HXDLIN(  28)						if ((ay > cy1)) {
HXLINE(  28)							min3 = ::Math_obj::floor(cy1);
            						}
            						else {
HXLINE(  28)							min3 = ::Math_obj::ceil(ay);
            						}
HXDLIN(  28)						int ii_min6 = min3;
HXDLIN(  28)						int ii_max6 = ::Math_obj::ceil(by1);
HXDLIN(  28)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            					}
            					else {
HXLINE(  28)						int ii_min7 = ::Math_obj::floor(ay);
HXDLIN(  28)						int ii_max7 = ::Math_obj::ceil(cy1);
HXDLIN(  28)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            					}
            				}
HXDLIN(  28)				 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  28)				if (hasUndo) {
HXLINE(  28)					int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  28)					int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  28)					 ::Dynamic imageType = null();
HXDLIN(  28)					 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  28)					if (::hx::IsNull( imageType )) {
HXLINE(  54)						imageType = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  28)					::Dynamic undoImage1;
HXDLIN(  28)					switch((int)(( (int)(imageType) ))){
            						case (int)0: {
HXLINE(  28)							 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  28)							 ::iterMagic::BytesImg b = byt;
HXDLIN(  28)							{
HXLINE(  28)								b->width = width;
HXDLIN(  28)								b->height = height;
HXDLIN(  28)								b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  28)								b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  28)								{
HXLINE(  28)									int len = b->length;
HXDLIN(  28)									int w = 0;
HXDLIN(  28)									{
HXLINE(  28)										int _g = 0;
HXDLIN(  28)										int _g1 = b->height;
HXDLIN(  28)										while((_g < _g1)){
HXLINE(  28)											_g = (_g + 1);
HXDLIN(  28)											int y = (_g - 1);
HXDLIN(  28)											{
HXLINE(  28)												int _g2 = 0;
HXDLIN(  28)												int _g3 = b->width;
HXDLIN(  28)												while((_g2 < _g3)){
HXLINE(  28)													_g2 = (_g2 + 1);
HXDLIN(  28)													int x = (_g2 - 1);
HXDLIN(  28)													{
HXLINE(  28)														w = (w + 1);
HXDLIN(  28)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  28)													{
HXLINE(  28)														w = (w + 1);
HXDLIN(  28)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  28)													{
HXLINE(  28)														w = (w + 1);
HXDLIN(  28)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  28)													{
HXLINE(  28)														w = (w + 1);
HXDLIN(  28)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  28)							undoImage1 = b;
            						}
            						break;
            						case (int)1: {
HXLINE(  28)							 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  28)							 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN(  28)							{
HXLINE(  28)								a1->width = width;
HXDLIN(  28)								a1->height = height;
HXDLIN(  28)								a1->data = ::Array_obj< int >::__new(0);
HXDLIN(  28)								a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  28)								{
HXLINE(  28)									int _g4 = 0;
HXDLIN(  28)									int _g5 = a1->length;
HXDLIN(  28)									while((_g4 < _g5)){
HXLINE(  28)										_g4 = (_g4 + 1);
HXDLIN(  28)										int i = (_g4 - 1);
HXDLIN(  28)										a1->data[i] = 0;
            									}
            								}
            							}
HXDLIN(  28)							undoImage1 = a1;
            						}
            						break;
            						case (int)2: {
HXLINE(  28)							 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  28)							 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  28)							{
HXLINE(  28)								b1->width = width;
HXDLIN(  28)								b1->height = height;
HXDLIN(  28)								b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  28)								int size = (b1->length * 4);
HXDLIN(  28)								b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  28)								{
HXLINE(  28)									int _g6 = 0;
HXDLIN(  28)									int _g7 = b1->length;
HXDLIN(  28)									while((_g6 < _g7)){
HXLINE(  28)										_g6 = (_g6 + 1);
HXDLIN(  28)										int i1 = (_g6 - 1);
HXDLIN(  28)										{
HXLINE(  28)											 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN(  28)											bool undoImage2;
HXDLIN(  28)											if ((i1 >= 0)) {
HXLINE(  28)												undoImage2 = (i1 < (this2->byteLength >> 2));
            											}
            											else {
HXLINE(  28)												undoImage2 = false;
            											}
HXDLIN(  28)											if (undoImage2) {
HXLINE(  28)												 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  28)												int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN(  28)												_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  28)												_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  28)												_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  28)												_this->b[(pos + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  28)							undoImage1 = b1;
            						}
            						break;
            						case (int)3: {
HXLINE(  28)							 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  28)							 ::iterMagic::VecIntImg v = vec;
HXDLIN(  28)							{
HXLINE(  28)								v->width = width;
HXDLIN(  28)								v->height = height;
HXDLIN(  28)								v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  28)								v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  28)								{
HXLINE(  28)									int _g8 = 0;
HXDLIN(  28)									int _g9 = v->length;
HXDLIN(  28)									while((_g8 < _g9)){
HXLINE(  28)										_g8 = (_g8 + 1);
HXDLIN(  28)										int i2 = (_g8 - 1);
HXDLIN(  28)										v->data->__unsafe_set(i2,0);
            									}
            								}
            							}
HXDLIN(  28)							undoImage1 = v;
            						}
            						break;
            						case (int)4: {
HXLINE(  28)							 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  28)							 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  28)							{
HXLINE(  28)								b2->width = width;
HXDLIN(  28)								b2->height = height;
HXDLIN(  28)								b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  28)								b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  28)								{
HXLINE(  28)									int len1 = b2->length;
HXDLIN(  28)									 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  28)									if (::hx::IsNull( d->head )) {
HXLINE(  28)										int _g10 = 0;
HXDLIN(  28)										int _g11 = len1;
HXDLIN(  28)										while((_g10 < _g11)){
HXLINE(  28)											_g10 = (_g10 + 1);
HXDLIN(  28)											int i3 = (_g10 - 1);
HXDLIN(  28)											d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            										}
            									}
            									else {
HXLINE(  28)										int _g12 = 0;
HXDLIN(  28)										int _g13 = len1;
HXDLIN(  28)										while((_g12 < _g13)){
HXLINE(  28)											_g12 = (_g12 + 1);
HXDLIN(  28)											int i4 = (_g12 - 1);
HXDLIN(  28)											{
HXLINE(  28)												 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  28)												 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  28)												{
HXLINE(  28)													int _g14 = 0;
HXDLIN(  28)													int _g15 = i4;
HXDLIN(  28)													while((_g14 < _g15)){
HXLINE(  28)														_g14 = (_g14 + 1);
HXDLIN(  28)														int i5 = (_g14 - 1);
HXLINE( 345)														prev = l;
HXLINE( 346)														l = l->next;
            													}
            												}
HXLINE(  28)												if (::hx::IsNull( prev )) {
HXLINE(  28)													b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  28)													l = null();
            												}
            												else {
HXLINE(  28)													prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  28)													l = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  28)							undoImage1 = b2;
            						}
            						break;
            					}
HXDLIN(  28)					this1->image = undoImage1;
HXDLIN(  28)					this1->width = width;
HXDLIN(  28)					this1->height = height;
HXDLIN(  28)					this1->imageType = ( (int)(imageType) );
HXDLIN(  28)					undoImage = this1;
HXDLIN(  28)					{
HXLINE(  28)						int rectLeft = xIter3->start;
HXDLIN(  28)						int rectTop = yIter3->start;
HXDLIN(  28)						int rectRight = xIter3->max;
HXDLIN(  28)						bool forceClear = false;
HXDLIN(  28)						{
HXLINE(  28)							int _g16 = rectTop;
HXDLIN(  28)							int _g17 = yIter3->max;
HXDLIN(  28)							while((_g16 < _g17)){
HXLINE(  28)								_g16 = (_g16 + 1);
HXDLIN(  28)								int dy1 = (_g16 - 1);
HXDLIN(  28)								{
HXLINE(  28)									int _g18 = rectLeft;
HXDLIN(  28)									int _g19 = rectRight;
HXDLIN(  28)									while((_g18 < _g19)){
HXLINE(  28)										_g18 = (_g18 + 1);
HXDLIN(  28)										int dx1 = (_g18 - 1);
HXDLIN(  28)										::Dynamic this3 = pixelImage->image;
HXDLIN(  28)										int index;
HXDLIN(  28)										if (pixelImage->useVirtualPos) {
HXLINE(  28)											index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  28)											index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            										}
HXDLIN(  28)										int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN(  28)										int col;
HXDLIN(  28)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)											col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE(  28)											col = c;
            										}
HXDLIN(  28)										bool hitQuad1;
HXDLIN(  28)										if (pixelImage->useMask) {
HXLINE(  28)											hitQuad1 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  28)											hitQuad1 = false;
            										}
HXDLIN(  28)										if (hitQuad1) {
HXLINE(  28)											 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN(  28)											::Dynamic this5 = this4->image;
HXDLIN(  28)											int index1;
HXDLIN(  28)											if (this4->useVirtualPos) {
HXLINE(  28)												index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            											}
            											else {
HXLINE(  28)												index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            											}
HXDLIN(  28)											int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN(  28)											int v1;
HXDLIN(  28)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)												v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            											}
            											else {
HXLINE(  28)												v1 = c1;
            											}
HXDLIN(  28)											int maskPixel = v1;
HXDLIN(  28)											int this6 = col;
HXDLIN(  28)											if ((maskPixel == 0)) {
HXLINE(  28)												col = this6;
            											}
            											else {
HXLINE(  28)												Float m0;
HXDLIN(  28)												int this7 = ((maskPixel >> 24) & 255);
HXDLIN(  28)												if ((this7 == 0)) {
HXLINE(  28)													m0 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float m1;
HXDLIN(  28)												int this8 = ((maskPixel >> 16) & 255);
HXDLIN(  28)												if ((this8 == 0)) {
HXLINE(  28)													m1 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float m2;
HXDLIN(  28)												int this9 = ((maskPixel >> 8) & 255);
HXDLIN(  28)												if ((this9 == 0)) {
HXLINE(  28)													m2 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float m3;
HXDLIN(  28)												int this10 = (maskPixel & 255);
HXDLIN(  28)												if ((this10 == 0)) {
HXLINE(  28)													m3 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN(  28)												int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN(  28)												int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN(  28)												int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN(  28)												col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  28)										if ((col != 0)) {
HXLINE(  28)											int x1 = (dx1 - rectLeft);
HXDLIN(  28)											int y1 = (dy1 - rectTop);
HXDLIN(  28)											int c2 = col;
HXDLIN(  28)											bool hitQuad2;
HXDLIN(  28)											if ((((c2 >> 24) & 255) < 254)) {
HXLINE(  28)												hitQuad2 = undoImage->transparent;
            											}
            											else {
HXLINE(  28)												hitQuad2 = false;
            											}
HXDLIN(  28)											if (hitQuad2) {
HXLINE(  28)												int location;
HXDLIN(  28)												if (undoImage->useVirtualPos) {
HXLINE(  28)													location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            												}
            												else {
HXLINE(  28)													location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            												}
HXDLIN(  28)												int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  28)												int this12;
HXDLIN(  28)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)													this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            												}
            												else {
HXLINE(  28)													this12 = this11;
            												}
HXDLIN(  28)												Float a11;
HXDLIN(  28)												int this13 = ((this12 >> 24) & 255);
HXDLIN(  28)												if ((this13 == 0)) {
HXLINE(  28)													a11 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float r1;
HXDLIN(  28)												int this14 = ((this12 >> 16) & 255);
HXDLIN(  28)												if ((this14 == 0)) {
HXLINE(  28)													r1 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float g1;
HXDLIN(  28)												int this15 = ((this12 >> 8) & 255);
HXDLIN(  28)												if ((this15 == 0)) {
HXLINE(  28)													g1 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float b11;
HXDLIN(  28)												int this16 = (this12 & 255);
HXDLIN(  28)												if ((this16 == 0)) {
HXLINE(  28)													b11 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float a2;
HXDLIN(  28)												int this17 = ((col >> 24) & 255);
HXDLIN(  28)												if ((this17 == 0)) {
HXLINE(  28)													a2 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float r2;
HXDLIN(  28)												int this18 = ((col >> 16) & 255);
HXDLIN(  28)												if ((this18 == 0)) {
HXLINE(  28)													r2 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float g2;
HXDLIN(  28)												int this19 = ((col >> 8) & 255);
HXDLIN(  28)												if ((this19 == 0)) {
HXLINE(  28)													g2 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float b21;
HXDLIN(  28)												int this20 = (col & 255);
HXDLIN(  28)												if ((this20 == 0)) {
HXLINE(  28)													b21 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN(  28)												int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  28)												int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  28)												int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  28)												int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  28)												int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  28)												{
HXLINE(  28)													int hitQuad3;
HXDLIN(  28)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)														hitQuad3 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE(  28)														hitQuad3 = blended;
            													}
HXDLIN(  28)													::iterMagic::Iimg_obj::set(undoImage->image,location,hitQuad3);
            												}
            											}
            											else {
HXLINE(  28)												::Dynamic this21 = undoImage->image;
HXDLIN(  28)												int index2;
HXDLIN(  28)												if (undoImage->useVirtualPos) {
HXLINE(  28)													index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            												}
            												else {
HXLINE(  28)													index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            												}
HXDLIN(  28)												int hitQuad4;
HXDLIN(  28)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)													hitQuad4 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            												}
            												else {
HXLINE(  28)													hitQuad4 = c2;
            												}
HXDLIN(  28)												::iterMagic::Iimg_obj::set(this21,index2,hitQuad4);
            											}
            										}
            										else {
HXLINE(  28)											if (forceClear) {
HXLINE(  28)												::Dynamic this22 = undoImage->image;
HXDLIN(  28)												int x2 = (dx1 - rectLeft);
HXDLIN(  28)												int y2 = (dy1 - rectTop);
HXDLIN(  28)												int index3;
HXDLIN(  28)												if (undoImage->useVirtualPos) {
HXLINE(  28)													index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            												}
            												else {
HXLINE(  28)													index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            												}
HXDLIN(  28)												::iterMagic::Iimg_obj::set(this22,index3,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  28)				bool found = false;
HXDLIN(  28)				Float s = ((Float)0.);
HXDLIN(  28)				Float t = ((Float)0.);
HXDLIN(  28)				Float sxx = ((Float)0.);
HXDLIN(  28)				Float txx = ((Float)0.);
HXDLIN(  28)				{
HXLINE(  28)					int _g_min = xIter3->start;
HXDLIN(  28)					int _g_max = xIter3->max;
HXDLIN(  28)					while((_g_min < _g_max)){
HXLINE(  28)						_g_min = (_g_min + 1);
HXDLIN(  28)						int x3 = (_g_min - 1);
HXLINE(  60)						sxx = (sx * ( (Float)(x3) ));
HXLINE(  61)						txx = (tx * ( (Float)(x3) ));
HXLINE(  62)						found = false;
HXLINE(  28)						{
HXLINE(  28)							int _g_min1 = yIter3->start;
HXDLIN(  28)							int _g_max1 = yIter3->max;
HXDLIN(  28)							while((_g_min1 < _g_max1)){
HXLINE(  28)								_g_min1 = (_g_min1 + 1);
HXDLIN(  28)								int y3 = (_g_min1 - 1);
HXLINE(  64)								s = ((s0 + sxx) + (sy * ( (Float)(y3) )));
HXLINE(  65)								t = ((t0 + txx) + (ty * ( (Float)(y3) )));
HXLINE(  28)								bool hitQuad5;
HXDLIN(  28)								if (!((s <= 0))) {
HXLINE(  28)									hitQuad5 = (t <= 0);
            								}
            								else {
HXLINE(  28)									hitQuad5 = true;
            								}
HXDLIN(  28)								if (hitQuad5) {
HXLINE(  28)									if (found) {
HXLINE(  28)										goto _hx_goto_11;
            									}
            								}
            								else {
HXLINE(  28)									if (((s + t) < A)) {
HXLINE(  28)										{
HXLINE(  28)											int c3 = color;
HXDLIN(  28)											bool hitQuad6;
HXDLIN(  28)											if ((((c3 >> 24) & 255) < 254)) {
HXLINE(  28)												hitQuad6 = pixelImage->transparent;
            											}
            											else {
HXLINE(  28)												hitQuad6 = false;
            											}
HXDLIN(  28)											if (hitQuad6) {
HXLINE(  28)												int location1;
HXDLIN(  28)												if (pixelImage->useVirtualPos) {
HXLINE(  28)													location1 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x3) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  28)													location1 = ::Std_obj::_hx_int(( (Float)(((y3 * pixelImage->width) + x3)) ));
            												}
HXDLIN(  28)												int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  28)												int this24;
HXDLIN(  28)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)													this24 = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            												}
            												else {
HXLINE(  28)													this24 = this23;
            												}
HXDLIN(  28)												Float a12;
HXDLIN(  28)												int this25 = ((this24 >> 24) & 255);
HXDLIN(  28)												if ((this25 == 0)) {
HXLINE(  28)													a12 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													a12 = (( (Float)(this25) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float r11;
HXDLIN(  28)												int this26 = ((this24 >> 16) & 255);
HXDLIN(  28)												if ((this26 == 0)) {
HXLINE(  28)													r11 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float g11;
HXDLIN(  28)												int this27 = ((this24 >> 8) & 255);
HXDLIN(  28)												if ((this27 == 0)) {
HXLINE(  28)													g11 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float b12;
HXDLIN(  28)												int this28 = (this24 & 255);
HXDLIN(  28)												if ((this28 == 0)) {
HXLINE(  28)													b12 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float a21;
HXDLIN(  28)												int this29 = ((color >> 24) & 255);
HXDLIN(  28)												if ((this29 == 0)) {
HXLINE(  28)													a21 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float r21;
HXDLIN(  28)												int this30 = ((color >> 16) & 255);
HXDLIN(  28)												if ((this30 == 0)) {
HXLINE(  28)													r21 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float g21;
HXDLIN(  28)												int this31 = ((color >> 8) & 255);
HXDLIN(  28)												if ((this31 == 0)) {
HXLINE(  28)													g21 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float b22;
HXDLIN(  28)												int this32 = (color & 255);
HXDLIN(  28)												if ((this32 == 0)) {
HXLINE(  28)													b22 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN(  28)												int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  28)												int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  28)												int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  28)												int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  28)												int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  28)												{
HXLINE(  28)													int hitQuad7;
HXDLIN(  28)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)														hitQuad7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            													}
            													else {
HXLINE(  28)														hitQuad7 = blended1;
            													}
HXDLIN(  28)													::iterMagic::Iimg_obj::set(pixelImage->image,location1,hitQuad7);
            												}
            											}
            											else {
HXLINE(  28)												::Dynamic this33 = pixelImage->image;
HXDLIN(  28)												int index4;
HXDLIN(  28)												if (pixelImage->useVirtualPos) {
HXLINE(  28)													index4 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x3) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  28)													index4 = ::Std_obj::_hx_int(( (Float)(((y3 * pixelImage->width) + x3)) ));
            												}
HXDLIN(  28)												int hitQuad8;
HXDLIN(  28)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)													hitQuad8 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            												}
            												else {
HXLINE(  28)													hitQuad8 = c3;
            												}
HXDLIN(  28)												::iterMagic::Iimg_obj::set(this33,index4,hitQuad8);
            											}
            										}
HXLINE(  73)										found = true;
            									}
            									else {
HXLINE(  28)										if (found) {
HXLINE(  28)											goto _hx_goto_11;
            										}
            									}
            								}
            							}
            							_hx_goto_11:;
            						}
            					}
            				}
HXDLIN(  28)				 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN(  28)				 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN(  28)				int v_undoY;
HXDLIN(  28)				int v_undoX;
HXDLIN(  28)				Float v_ty;
HXDLIN(  28)				Float v_tx;
HXDLIN(  28)				Float v_t0;
HXDLIN(  28)				Float v_sy;
HXDLIN(  28)				Float v_sx;
HXDLIN(  28)				Float v_s0;
HXDLIN(  28)				Float v_A;
HXDLIN(  28)				Float ax1 = ax;
HXDLIN(  28)				Float ay1 = ay;
HXDLIN(  28)				 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN(  28)				Float bx2 = bx1;
HXDLIN(  28)				Float by2 = by1;
HXDLIN(  28)				Float cx2 = cx1;
HXDLIN(  28)				Float cy2 = cy1;
HXDLIN(  28)				bool adjustWinding1 = (((((ax1 * by2) - (bx2 * ay1)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay1) - (ax1 * cy2))) > 0);
HXDLIN(  28)				if (!(adjustWinding1)) {
HXLINE(  28)					Float bx_1 = bx2;
HXDLIN(  28)					Float by_1 = by2;
HXLINE(  24)					bx2 = cx2;
HXLINE(  25)					by2 = cy2;
HXLINE(  26)					cx2 = bx_1;
HXLINE(  27)					cy2 = by_1;
            				}
HXLINE(  28)				Float v_ax = ax1;
HXDLIN(  28)				Float v_ay = ay1;
HXDLIN(  28)				Float v_bx = bx2;
HXDLIN(  28)				Float v_by = by2;
HXDLIN(  28)				Float v_cx = cx2;
HXDLIN(  28)				Float v_cy = cy2;
HXDLIN(  28)				bool v_preCalculated = true;
HXDLIN(  28)				{
HXLINE(  28)					v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN(  28)					v_sx = (v_cy - v_ay);
HXDLIN(  28)					v_sy = (v_ax - v_cx);
HXDLIN(  28)					v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN(  28)					v_tx = (v_ay - v_by);
HXDLIN(  28)					v_ty = (v_bx - v_ax);
HXDLIN(  28)					v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN(  28)					Float a6 = v_ax;
HXDLIN(  28)					Float b5 = v_bx;
HXDLIN(  28)					Float c4 = v_cx;
HXDLIN(  28)					if ((a6 > b5)) {
HXLINE(  28)						if ((a6 > c4)) {
HXLINE(  28)							int min4;
HXDLIN(  28)							if ((b5 > c4)) {
HXLINE(  28)								min4 = ::Math_obj::floor(c4);
            							}
            							else {
HXLINE(  28)								min4 = ::Math_obj::floor(b5);
            							}
HXDLIN(  28)							int ii_min8 = min4;
HXDLIN(  28)							int ii_max8 = ::Math_obj::ceil(a6);
HXDLIN(  28)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            						}
            						else {
HXLINE(  28)							int ii_min9 = ::Math_obj::floor(b5);
HXDLIN(  28)							int ii_max9 = ::Math_obj::ceil(c4);
HXDLIN(  28)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            						}
            					}
            					else {
HXLINE(  28)						if ((b5 > c4)) {
HXLINE(  28)							int min5;
HXDLIN(  28)							if ((a6 > c4)) {
HXLINE(  28)								min5 = ::Math_obj::floor(c4);
            							}
            							else {
HXLINE(  28)								min5 = ::Math_obj::ceil(a6);
            							}
HXDLIN(  28)							int ii_min10 = min5;
HXDLIN(  28)							int ii_max10 = ::Math_obj::ceil(b5);
HXDLIN(  28)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            						}
            						else {
HXLINE(  28)							int ii_min11 = ::Math_obj::floor(a6);
HXDLIN(  28)							int ii_max11 = ::Math_obj::ceil(c4);
HXDLIN(  28)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            						}
            					}
HXDLIN(  28)					Float a7 = v_ay;
HXDLIN(  28)					Float b6 = v_by;
HXDLIN(  28)					Float c5 = v_cy;
HXDLIN(  28)					if ((a7 > b6)) {
HXLINE(  28)						if ((a7 > c5)) {
HXLINE(  28)							int min6;
HXDLIN(  28)							if ((b6 > c5)) {
HXLINE(  28)								min6 = ::Math_obj::floor(c5);
            							}
            							else {
HXLINE(  28)								min6 = ::Math_obj::floor(b6);
            							}
HXDLIN(  28)							int ii_min12 = min6;
HXDLIN(  28)							int ii_max12 = ::Math_obj::ceil(a7);
HXDLIN(  28)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            						}
            						else {
HXLINE(  28)							int ii_min13 = ::Math_obj::floor(b6);
HXDLIN(  28)							int ii_max13 = ::Math_obj::ceil(c5);
HXDLIN(  28)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            						}
            					}
            					else {
HXLINE(  28)						if ((b6 > c5)) {
HXLINE(  28)							int min7;
HXDLIN(  28)							if ((a7 > c5)) {
HXLINE(  28)								min7 = ::Math_obj::floor(c5);
            							}
            							else {
HXLINE(  28)								min7 = ::Math_obj::ceil(a7);
            							}
HXDLIN(  28)							int ii_min14 = min7;
HXDLIN(  28)							int ii_max14 = ::Math_obj::ceil(b6);
HXDLIN(  28)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            						}
            						else {
HXLINE(  28)							int ii_min15 = ::Math_obj::floor(a7);
HXDLIN(  28)							int ii_max15 = ::Math_obj::ceil(c5);
HXDLIN(  28)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            						}
            					}
            				}
HXDLIN(  28)				if (hasUndo) {
HXLINE(  28)					v_undoImage = undoImage;
HXDLIN(  28)					v_undoX = xIter3->start;
HXDLIN(  28)					v_undoY = yIter3->start;
            				}
HXDLIN(  28)				Float bx3 = cx;
HXDLIN(  28)				Float by3 = cy;
HXDLIN(  28)				Float cx3 = dx;
HXDLIN(  28)				Float cy3 = dy;
HXDLIN(  28)				bool hasUndo1 = false;
HXDLIN(  28)				bool adjustWinding2 = (((((bx * by3) - (bx3 * by)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * by) - (bx * cy3))) > 0);
HXDLIN(  28)				if (!(adjustWinding2)) {
HXLINE(  28)					Float bx_2 = bx3;
HXDLIN(  28)					Float by_2 = by3;
HXLINE(  25)					bx3 = cx3;
HXLINE(  26)					by3 = cy3;
HXLINE(  27)					cx3 = bx_2;
HXLINE(  28)					cy3 = by_2;
            				}
HXDLIN(  28)				Float s01 = ((by * cx3) - (bx * cy3));
HXDLIN(  28)				Float sx1 = (cy3 - by);
HXDLIN(  28)				Float sy1 = (bx - cx3);
HXDLIN(  28)				Float t01 = ((bx * by3) - (by * bx3));
HXDLIN(  28)				Float tx1 = (by - by3);
HXDLIN(  28)				Float ty1 = (bx3 - bx);
HXDLIN(  28)				Float A1 = ((((-(by3) * cx3) + (by * (-(bx3) + cx3))) + (bx * (by3 - cy3))) + (bx3 * cy3));
HXDLIN(  28)				 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  28)				if ((bx > bx3)) {
HXLINE(  28)					if ((bx > cx3)) {
HXLINE(  28)						int min8;
HXDLIN(  28)						if ((bx3 > cx3)) {
HXLINE(  28)							min8 = ::Math_obj::floor(cx3);
            						}
            						else {
HXLINE(  28)							min8 = ::Math_obj::floor(bx3);
            						}
HXDLIN(  28)						int ii_min16 = min8;
HXDLIN(  28)						int ii_max16 = ::Math_obj::ceil(bx);
HXDLIN(  28)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            					}
            					else {
HXLINE(  28)						int ii_min17 = ::Math_obj::floor(bx3);
HXDLIN(  28)						int ii_max17 = ::Math_obj::ceil(cx3);
HXDLIN(  28)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            					}
            				}
            				else {
HXLINE(  28)					if ((bx3 > cx3)) {
HXLINE(  28)						int min9;
HXDLIN(  28)						if ((bx > cx3)) {
HXLINE(  28)							min9 = ::Math_obj::floor(cx3);
            						}
            						else {
HXLINE(  28)							min9 = ::Math_obj::ceil(bx);
            						}
HXDLIN(  28)						int ii_min18 = min9;
HXDLIN(  28)						int ii_max18 = ::Math_obj::ceil(bx3);
HXDLIN(  28)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            					}
            					else {
HXLINE(  28)						int ii_min19 = ::Math_obj::floor(bx);
HXDLIN(  28)						int ii_max19 = ::Math_obj::ceil(cx3);
HXDLIN(  28)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            					}
            				}
HXDLIN(  28)				 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  28)				if ((by > by3)) {
HXLINE(  28)					if ((by > cy3)) {
HXLINE(  28)						int min10;
HXDLIN(  28)						if ((by3 > cy3)) {
HXLINE(  28)							min10 = ::Math_obj::floor(cy3);
            						}
            						else {
HXLINE(  28)							min10 = ::Math_obj::floor(by3);
            						}
HXDLIN(  28)						int ii_min20 = min10;
HXDLIN(  28)						int ii_max20 = ::Math_obj::ceil(by);
HXDLIN(  28)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            					}
            					else {
HXLINE(  28)						int ii_min21 = ::Math_obj::floor(by3);
HXDLIN(  28)						int ii_max21 = ::Math_obj::ceil(cy3);
HXDLIN(  28)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            					}
            				}
            				else {
HXLINE(  28)					if ((by3 > cy3)) {
HXLINE(  28)						int min11;
HXDLIN(  28)						if ((by > cy3)) {
HXLINE(  28)							min11 = ::Math_obj::floor(cy3);
            						}
            						else {
HXLINE(  28)							min11 = ::Math_obj::ceil(by);
            						}
HXDLIN(  28)						int ii_min22 = min11;
HXDLIN(  28)						int ii_max22 = ::Math_obj::ceil(by3);
HXDLIN(  28)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            					}
            					else {
HXLINE(  28)						int ii_min23 = ::Math_obj::floor(by);
HXDLIN(  28)						int ii_max23 = ::Math_obj::ceil(cy3);
HXDLIN(  28)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            					}
            				}
HXDLIN(  28)				 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  28)				if (hasUndo1) {
HXLINE(  28)					int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  28)					int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  28)					 ::Dynamic imageType1 = null();
HXDLIN(  28)					 ::pi_xy::ImageStruct this34 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  28)					if (::hx::IsNull( imageType1 )) {
HXLINE(  54)						imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  28)					::Dynamic undoImage4;
HXDLIN(  28)					switch((int)(( (int)(imageType1) ))){
            						case (int)0: {
HXLINE(  28)							 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  28)							 ::iterMagic::BytesImg b7 = byt1;
HXDLIN(  28)							{
HXLINE(  28)								b7->width = width1;
HXDLIN(  28)								b7->height = height1;
HXDLIN(  28)								b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  28)								b7->data = ::haxe::io::Bytes_obj::alloc((b7->length * 4));
HXDLIN(  28)								{
HXLINE(  28)									int len2 = b7->length;
HXDLIN(  28)									int w1 = 0;
HXDLIN(  28)									{
HXLINE(  28)										int _g20 = 0;
HXDLIN(  28)										int _g21 = b7->height;
HXDLIN(  28)										while((_g20 < _g21)){
HXLINE(  28)											_g20 = (_g20 + 1);
HXDLIN(  28)											int y4 = (_g20 - 1);
HXDLIN(  28)											{
HXLINE(  28)												int _g22 = 0;
HXDLIN(  28)												int _g23 = b7->width;
HXDLIN(  28)												while((_g22 < _g23)){
HXLINE(  28)													_g22 = (_g22 + 1);
HXDLIN(  28)													int x4 = (_g22 - 1);
HXDLIN(  28)													{
HXLINE(  28)														w1 = (w1 + 1);
HXDLIN(  28)														b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  28)													{
HXLINE(  28)														w1 = (w1 + 1);
HXDLIN(  28)														b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  28)													{
HXLINE(  28)														w1 = (w1 + 1);
HXDLIN(  28)														b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  28)													{
HXLINE(  28)														w1 = (w1 + 1);
HXDLIN(  28)														b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  28)							undoImage4 = b7;
            						}
            						break;
            						case (int)1: {
HXLINE(  28)							 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  28)							 ::iterMagic::ArrIntImg a8 = arrI1;
HXDLIN(  28)							{
HXLINE(  28)								a8->width = width1;
HXDLIN(  28)								a8->height = height1;
HXDLIN(  28)								a8->data = ::Array_obj< int >::__new(0);
HXDLIN(  28)								a8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  28)								{
HXLINE(  28)									int _g24 = 0;
HXDLIN(  28)									int _g25 = a8->length;
HXDLIN(  28)									while((_g24 < _g25)){
HXLINE(  28)										_g24 = (_g24 + 1);
HXDLIN(  28)										int i6 = (_g24 - 1);
HXDLIN(  28)										a8->data[i6] = 0;
            									}
            								}
            							}
HXDLIN(  28)							undoImage4 = a8;
            						}
            						break;
            						case (int)2: {
HXLINE(  28)							 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  28)							 ::iterMagic::U32ArrImg b8 = u32a1;
HXDLIN(  28)							{
HXLINE(  28)								b8->width = width1;
HXDLIN(  28)								b8->height = height1;
HXDLIN(  28)								b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  28)								int size1 = (b8->length * 4);
HXDLIN(  28)								b8->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  28)								{
HXLINE(  28)									int _g26 = 0;
HXDLIN(  28)									int _g27 = b8->length;
HXDLIN(  28)									while((_g26 < _g27)){
HXLINE(  28)										_g26 = (_g26 + 1);
HXDLIN(  28)										int i7 = (_g26 - 1);
HXDLIN(  28)										{
HXLINE(  28)											 ::haxe::io::ArrayBufferViewImpl this35 = b8->data;
HXDLIN(  28)											bool undoImage5;
HXDLIN(  28)											if ((i7 >= 0)) {
HXLINE(  28)												undoImage5 = (i7 < (this35->byteLength >> 2));
            											}
            											else {
HXLINE(  28)												undoImage5 = false;
            											}
HXDLIN(  28)											if (undoImage5) {
HXLINE(  28)												 ::haxe::io::Bytes _this1 = this35->bytes;
HXDLIN(  28)												int pos1 = ((i7 << 2) + this35->byteOffset);
HXDLIN(  28)												_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  28)												_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  28)												_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  28)												_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  28)							undoImage4 = b8;
            						}
            						break;
            						case (int)3: {
HXLINE(  28)							 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  28)							 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN(  28)							{
HXLINE(  28)								v2->width = width1;
HXDLIN(  28)								v2->height = height1;
HXDLIN(  28)								v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  28)								v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN(  28)								{
HXLINE(  28)									int _g28 = 0;
HXDLIN(  28)									int _g29 = v2->length;
HXDLIN(  28)									while((_g28 < _g29)){
HXLINE(  28)										_g28 = (_g28 + 1);
HXDLIN(  28)										int i8 = (_g28 - 1);
HXDLIN(  28)										v2->data->__unsafe_set(i8,0);
            									}
            								}
            							}
HXDLIN(  28)							undoImage4 = v2;
            						}
            						break;
            						case (int)4: {
HXLINE(  28)							 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  28)							 ::iterMagic::StackIntImg b9 = sInt1;
HXDLIN(  28)							{
HXLINE(  28)								b9->width = width1;
HXDLIN(  28)								b9->height = height1;
HXDLIN(  28)								b9->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  28)								b9->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  28)								{
HXLINE(  28)									int len3 = b9->length;
HXDLIN(  28)									 ::haxe::ds::GenericStack_Int d1 = b9->data;
HXDLIN(  28)									if (::hx::IsNull( d1->head )) {
HXLINE(  28)										int _g30 = 0;
HXDLIN(  28)										int _g31 = len3;
HXDLIN(  28)										while((_g30 < _g31)){
HXLINE(  28)											_g30 = (_g30 + 1);
HXDLIN(  28)											int i9 = (_g30 - 1);
HXDLIN(  28)											d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            										}
            									}
            									else {
HXLINE(  28)										int _g32 = 0;
HXDLIN(  28)										int _g33 = len3;
HXDLIN(  28)										while((_g32 < _g33)){
HXLINE(  28)											_g32 = (_g32 + 1);
HXDLIN(  28)											int i10 = (_g32 - 1);
HXDLIN(  28)											{
HXLINE(  28)												 ::haxe::ds::GenericCell_Int l1 = b9->data->head;
HXDLIN(  28)												 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  28)												{
HXLINE(  28)													int _g34 = 0;
HXDLIN(  28)													int _g35 = i10;
HXDLIN(  28)													while((_g34 < _g35)){
HXLINE(  28)														_g34 = (_g34 + 1);
HXDLIN(  28)														int i11 = (_g34 - 1);
HXLINE( 345)														prev1 = l1;
HXLINE( 346)														l1 = l1->next;
            													}
            												}
HXLINE(  28)												if (::hx::IsNull( prev1 )) {
HXLINE(  28)													b9->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  28)													l1 = null();
            												}
            												else {
HXLINE(  28)													prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  28)													l1 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  28)							undoImage4 = b9;
            						}
            						break;
            					}
HXDLIN(  28)					this34->image = undoImage4;
HXDLIN(  28)					this34->width = width1;
HXDLIN(  28)					this34->height = height1;
HXDLIN(  28)					this34->imageType = ( (int)(imageType1) );
HXDLIN(  28)					undoImage3 = this34;
HXDLIN(  28)					{
HXLINE(  28)						int rectLeft1 = xIter31->start;
HXDLIN(  28)						int rectTop1 = yIter31->start;
HXDLIN(  28)						int rectRight1 = xIter31->max;
HXDLIN(  28)						bool forceClear1 = false;
HXDLIN(  28)						{
HXLINE(  28)							int _g36 = rectTop1;
HXDLIN(  28)							int _g37 = yIter31->max;
HXDLIN(  28)							while((_g36 < _g37)){
HXLINE(  28)								_g36 = (_g36 + 1);
HXDLIN(  28)								int dy2 = (_g36 - 1);
HXDLIN(  28)								{
HXLINE(  28)									int _g38 = rectLeft1;
HXDLIN(  28)									int _g39 = rectRight1;
HXDLIN(  28)									while((_g38 < _g39)){
HXLINE(  28)										_g38 = (_g38 + 1);
HXDLIN(  28)										int dx2 = (_g38 - 1);
HXDLIN(  28)										::Dynamic this36 = pixelImage->image;
HXDLIN(  28)										int index5;
HXDLIN(  28)										if (pixelImage->useVirtualPos) {
HXLINE(  28)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  28)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            										}
HXDLIN(  28)										int c6 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN(  28)										int col1;
HXDLIN(  28)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)											col1 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            										}
            										else {
HXLINE(  28)											col1 = c6;
            										}
HXDLIN(  28)										bool hitQuad9;
HXDLIN(  28)										if (pixelImage->useMask) {
HXLINE(  28)											hitQuad9 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  28)											hitQuad9 = false;
            										}
HXDLIN(  28)										if (hitQuad9) {
HXLINE(  28)											 ::pi_xy::ImageStruct this37 = pixelImage->mask;
HXDLIN(  28)											::Dynamic this38 = this37->image;
HXDLIN(  28)											int index6;
HXDLIN(  28)											if (this37->useVirtualPos) {
HXLINE(  28)												index6 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this37->virtualY) * ( (Float)(this37->width) )) + dx2) - this37->virtualX));
            											}
            											else {
HXLINE(  28)												index6 = ::Std_obj::_hx_int(( (Float)(((dy2 * this37->width) + dx2)) ));
            											}
HXDLIN(  28)											int c7 = ::iterMagic::Iimg_obj::get(this38,index6);
HXDLIN(  28)											int v3;
HXDLIN(  28)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)												v3 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            											}
            											else {
HXLINE(  28)												v3 = c7;
            											}
HXDLIN(  28)											int maskPixel1 = v3;
HXDLIN(  28)											int this39 = col1;
HXDLIN(  28)											if ((maskPixel1 == 0)) {
HXLINE(  28)												col1 = this39;
            											}
            											else {
HXLINE(  28)												Float m01;
HXDLIN(  28)												int this40 = ((maskPixel1 >> 24) & 255);
HXDLIN(  28)												if ((this40 == 0)) {
HXLINE(  28)													m01 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													m01 = (( (Float)(this40) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float m11;
HXDLIN(  28)												int this41 = ((maskPixel1 >> 16) & 255);
HXDLIN(  28)												if ((this41 == 0)) {
HXLINE(  28)													m11 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													m11 = (( (Float)(this41) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float m21;
HXDLIN(  28)												int this42 = ((maskPixel1 >> 8) & 255);
HXDLIN(  28)												if ((this42 == 0)) {
HXLINE(  28)													m21 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													m21 = (( (Float)(this42) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float m31;
HXDLIN(  28)												int this43 = (maskPixel1 & 255);
HXDLIN(  28)												if ((this43 == 0)) {
HXLINE(  28)													m31 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													m31 = (( (Float)(this43) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this39 >> 24) & 255)) )));
HXDLIN(  28)												int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this39 >> 16) & 255)) )));
HXDLIN(  28)												int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this39 >> 8) & 255)) )));
HXDLIN(  28)												int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this39 & 255)) )));
HXDLIN(  28)												col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  28)										if ((col1 != 0)) {
HXLINE(  28)											int x5 = (dx2 - rectLeft1);
HXDLIN(  28)											int y5 = (dy2 - rectTop1);
HXDLIN(  28)											int c8 = col1;
HXDLIN(  28)											bool hitQuad10;
HXDLIN(  28)											if ((((c8 >> 24) & 255) < 254)) {
HXLINE(  28)												hitQuad10 = undoImage3->transparent;
            											}
            											else {
HXLINE(  28)												hitQuad10 = false;
            											}
HXDLIN(  28)											if (hitQuad10) {
HXLINE(  28)												int location2;
HXDLIN(  28)												if (undoImage3->useVirtualPos) {
HXLINE(  28)													location2 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            												}
            												else {
HXLINE(  28)													location2 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            												}
HXDLIN(  28)												int this44 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN(  28)												int this45;
HXDLIN(  28)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)													this45 = ((((((this44 >> 24) & 255) << 24) | ((this44 & 255) << 16)) | (((this44 >> 8) & 255) << 8)) | ((this44 >> 16) & 255));
            												}
            												else {
HXLINE(  28)													this45 = this44;
            												}
HXDLIN(  28)												Float a13;
HXDLIN(  28)												int this46 = ((this45 >> 24) & 255);
HXDLIN(  28)												if ((this46 == 0)) {
HXLINE(  28)													a13 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													a13 = (( (Float)(this46) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float r12;
HXDLIN(  28)												int this47 = ((this45 >> 16) & 255);
HXDLIN(  28)												if ((this47 == 0)) {
HXLINE(  28)													r12 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													r12 = (( (Float)(this47) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float g12;
HXDLIN(  28)												int this48 = ((this45 >> 8) & 255);
HXDLIN(  28)												if ((this48 == 0)) {
HXLINE(  28)													g12 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													g12 = (( (Float)(this48) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float b13;
HXDLIN(  28)												int this49 = (this45 & 255);
HXDLIN(  28)												if ((this49 == 0)) {
HXLINE(  28)													b13 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													b13 = (( (Float)(this49) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float a22;
HXDLIN(  28)												int this50 = ((col1 >> 24) & 255);
HXDLIN(  28)												if ((this50 == 0)) {
HXLINE(  28)													a22 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													a22 = (( (Float)(this50) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float r22;
HXDLIN(  28)												int this51 = ((col1 >> 16) & 255);
HXDLIN(  28)												if ((this51 == 0)) {
HXLINE(  28)													r22 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													r22 = (( (Float)(this51) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float g22;
HXDLIN(  28)												int this52 = ((col1 >> 8) & 255);
HXDLIN(  28)												if ((this52 == 0)) {
HXLINE(  28)													g22 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													g22 = (( (Float)(this52) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float b23;
HXDLIN(  28)												int this53 = (col1 & 255);
HXDLIN(  28)												if ((this53 == 0)) {
HXLINE(  28)													b23 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													b23 = (( (Float)(this53) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN(  28)												int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  28)												int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  28)												int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  28)												int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  28)												int blended2 = ((((a9 << 24) | (r4 << 16)) | (g4 << 8)) | b10);
HXDLIN(  28)												{
HXLINE(  28)													int hitQuad11;
HXDLIN(  28)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)														hitQuad11 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            													}
            													else {
HXLINE(  28)														hitQuad11 = blended2;
            													}
HXDLIN(  28)													::iterMagic::Iimg_obj::set(undoImage3->image,location2,hitQuad11);
            												}
            											}
            											else {
HXLINE(  28)												::Dynamic this54 = undoImage3->image;
HXDLIN(  28)												int index7;
HXDLIN(  28)												if (undoImage3->useVirtualPos) {
HXLINE(  28)													index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            												}
            												else {
HXLINE(  28)													index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            												}
HXDLIN(  28)												int hitQuad12;
HXDLIN(  28)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)													hitQuad12 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            												}
            												else {
HXLINE(  28)													hitQuad12 = c8;
            												}
HXDLIN(  28)												::iterMagic::Iimg_obj::set(this54,index7,hitQuad12);
            											}
            										}
            										else {
HXLINE(  28)											if (forceClear1) {
HXLINE(  28)												::Dynamic this55 = undoImage3->image;
HXDLIN(  28)												int x6 = (dx2 - rectLeft1);
HXDLIN(  28)												int y6 = (dy2 - rectTop1);
HXDLIN(  28)												int index8;
HXDLIN(  28)												if (undoImage3->useVirtualPos) {
HXLINE(  28)													index8 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x6) - undoImage3->virtualX));
            												}
            												else {
HXLINE(  28)													index8 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x6)) ));
            												}
HXDLIN(  28)												::iterMagic::Iimg_obj::set(this55,index8,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  28)				bool found1 = false;
HXDLIN(  28)				Float s1 = ((Float)0.);
HXDLIN(  28)				Float t1 = ((Float)0.);
HXDLIN(  28)				Float sxx1 = ((Float)0.);
HXDLIN(  28)				Float txx1 = ((Float)0.);
HXDLIN(  28)				{
HXLINE(  28)					int _g_min2 = xIter31->start;
HXDLIN(  28)					int _g_max2 = xIter31->max;
HXDLIN(  28)					while((_g_min2 < _g_max2)){
HXLINE(  28)						_g_min2 = (_g_min2 + 1);
HXDLIN(  28)						int x7 = (_g_min2 - 1);
HXLINE(  60)						sxx1 = (sx1 * ( (Float)(x7) ));
HXLINE(  61)						txx1 = (tx1 * ( (Float)(x7) ));
HXLINE(  62)						found1 = false;
HXLINE(  28)						{
HXLINE(  28)							int _g_min3 = yIter31->start;
HXDLIN(  28)							int _g_max3 = yIter31->max;
HXDLIN(  28)							while((_g_min3 < _g_max3)){
HXLINE(  28)								_g_min3 = (_g_min3 + 1);
HXDLIN(  28)								int y7 = (_g_min3 - 1);
HXLINE(  64)								s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y7) )));
HXLINE(  65)								t1 = ((t01 + txx1) + (ty1 * ( (Float)(y7) )));
HXLINE(  28)								bool hitQuad13;
HXDLIN(  28)								if (!((s1 <= 0))) {
HXLINE(  28)									hitQuad13 = (t1 <= 0);
            								}
            								else {
HXLINE(  28)									hitQuad13 = true;
            								}
HXDLIN(  28)								if (hitQuad13) {
HXLINE(  28)									if (found1) {
HXLINE(  28)										goto _hx_goto_23;
            									}
            								}
            								else {
HXLINE(  28)									if (((s1 + t1) < A1)) {
HXLINE(  28)										{
HXLINE(  28)											int c9 = color;
HXDLIN(  28)											bool hitQuad14;
HXDLIN(  28)											if ((((c9 >> 24) & 255) < 254)) {
HXLINE(  28)												hitQuad14 = pixelImage->transparent;
            											}
            											else {
HXLINE(  28)												hitQuad14 = false;
            											}
HXDLIN(  28)											if (hitQuad14) {
HXLINE(  28)												int location3;
HXDLIN(  28)												if (pixelImage->useVirtualPos) {
HXLINE(  28)													location3 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x7) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  28)													location3 = ::Std_obj::_hx_int(( (Float)(((y7 * pixelImage->width) + x7)) ));
            												}
HXDLIN(  28)												int this56 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN(  28)												int this57;
HXDLIN(  28)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)													this57 = ((((((this56 >> 24) & 255) << 24) | ((this56 & 255) << 16)) | (((this56 >> 8) & 255) << 8)) | ((this56 >> 16) & 255));
            												}
            												else {
HXLINE(  28)													this57 = this56;
            												}
HXDLIN(  28)												Float a14;
HXDLIN(  28)												int this58 = ((this57 >> 24) & 255);
HXDLIN(  28)												if ((this58 == 0)) {
HXLINE(  28)													a14 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													a14 = (( (Float)(this58) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float r13;
HXDLIN(  28)												int this59 = ((this57 >> 16) & 255);
HXDLIN(  28)												if ((this59 == 0)) {
HXLINE(  28)													r13 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													r13 = (( (Float)(this59) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float g13;
HXDLIN(  28)												int this60 = ((this57 >> 8) & 255);
HXDLIN(  28)												if ((this60 == 0)) {
HXLINE(  28)													g13 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													g13 = (( (Float)(this60) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float b14;
HXDLIN(  28)												int this61 = (this57 & 255);
HXDLIN(  28)												if ((this61 == 0)) {
HXLINE(  28)													b14 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													b14 = (( (Float)(this61) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float a23;
HXDLIN(  28)												int this62 = ((color >> 24) & 255);
HXDLIN(  28)												if ((this62 == 0)) {
HXLINE(  28)													a23 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													a23 = (( (Float)(this62) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float r23;
HXDLIN(  28)												int this63 = ((color >> 16) & 255);
HXDLIN(  28)												if ((this63 == 0)) {
HXLINE(  28)													r23 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													r23 = (( (Float)(this63) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float g23;
HXDLIN(  28)												int this64 = ((color >> 8) & 255);
HXDLIN(  28)												if ((this64 == 0)) {
HXLINE(  28)													g23 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													g23 = (( (Float)(this64) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float b24;
HXDLIN(  28)												int this65 = (color & 255);
HXDLIN(  28)												if ((this65 == 0)) {
HXLINE(  28)													b24 = ((Float)0.);
            												}
            												else {
HXLINE(  28)													b24 = (( (Float)(this65) ) / ( (Float)(255) ));
            												}
HXDLIN(  28)												Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN(  28)												int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  28)												int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  28)												int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN(  28)												int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  28)												int blended3 = ((((a10 << 24) | (r5 << 16)) | (g5 << 8)) | b15);
HXDLIN(  28)												{
HXLINE(  28)													int hitQuad15;
HXDLIN(  28)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)														hitQuad15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            													}
            													else {
HXLINE(  28)														hitQuad15 = blended3;
            													}
HXDLIN(  28)													::iterMagic::Iimg_obj::set(pixelImage->image,location3,hitQuad15);
            												}
            											}
            											else {
HXLINE(  28)												::Dynamic this66 = pixelImage->image;
HXDLIN(  28)												int index9;
HXDLIN(  28)												if (pixelImage->useVirtualPos) {
HXLINE(  28)													index9 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x7) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  28)													index9 = ::Std_obj::_hx_int(( (Float)(((y7 * pixelImage->width) + x7)) ));
            												}
HXDLIN(  28)												int hitQuad16;
HXDLIN(  28)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  28)													hitQuad16 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            												}
            												else {
HXLINE(  28)													hitQuad16 = c9;
            												}
HXDLIN(  28)												::iterMagic::Iimg_obj::set(this66,index9,hitQuad16);
            											}
            										}
HXLINE(  73)										found1 = true;
            									}
            									else {
HXLINE(  28)										if (found1) {
HXLINE(  28)											goto _hx_goto_23;
            										}
            									}
            								}
            							}
            							_hx_goto_23:;
            						}
            					}
            				}
HXDLIN(  28)				 ::pi_xy::iter::IntIterStart v_yIter31;
HXDLIN(  28)				 ::pi_xy::iter::IntIterStart v_xIter31;
HXDLIN(  28)				int v_undoY1;
HXDLIN(  28)				int v_undoX1;
HXDLIN(  28)				Float v_ty1;
HXDLIN(  28)				Float v_tx1;
HXDLIN(  28)				Float v_t01;
HXDLIN(  28)				Float v_sy1;
HXDLIN(  28)				Float v_sx1;
HXDLIN(  28)				Float v_s01;
HXDLIN(  28)				Float v_A1;
HXDLIN(  28)				Float ax2 = bx;
HXDLIN(  28)				Float ay2 = by;
HXDLIN(  28)				 ::pi_xy::ImageStruct v_undoImage1 = null();
HXDLIN(  28)				Float bx4 = bx3;
HXDLIN(  28)				Float by4 = by3;
HXDLIN(  28)				Float cx4 = cx3;
HXDLIN(  28)				Float cy4 = cy3;
HXDLIN(  28)				bool adjustWinding3 = (((((ax2 * by4) - (bx4 * ay2)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay2) - (ax2 * cy4))) > 0);
HXDLIN(  28)				if (!(adjustWinding3)) {
HXLINE(  28)					Float bx_3 = bx4;
HXDLIN(  28)					Float by_3 = by4;
HXLINE(  24)					bx4 = cx4;
HXLINE(  25)					by4 = cy4;
HXLINE(  26)					cx4 = bx_3;
HXLINE(  27)					cy4 = by_3;
            				}
HXLINE(  28)				Float v_ax1 = ax2;
HXDLIN(  28)				Float v_ay1 = ay2;
HXDLIN(  28)				Float v_bx1 = bx4;
HXDLIN(  28)				Float v_by1 = by4;
HXDLIN(  28)				Float v_cx1 = cx4;
HXDLIN(  28)				Float v_cy1 = cy4;
HXDLIN(  28)				bool v_preCalculated1 = true;
HXDLIN(  28)				{
HXLINE(  28)					v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN(  28)					v_sx1 = (v_cy1 - v_ay1);
HXDLIN(  28)					v_sy1 = (v_ax1 - v_cx1);
HXDLIN(  28)					v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN(  28)					v_tx1 = (v_ay1 - v_by1);
HXDLIN(  28)					v_ty1 = (v_bx1 - v_ax1);
HXDLIN(  28)					v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN(  28)					Float a15 = v_ax1;
HXDLIN(  28)					Float b16 = v_bx1;
HXDLIN(  28)					Float c10 = v_cx1;
HXDLIN(  28)					if ((a15 > b16)) {
HXLINE(  28)						if ((a15 > c10)) {
HXLINE(  28)							int min12;
HXDLIN(  28)							if ((b16 > c10)) {
HXLINE(  28)								min12 = ::Math_obj::floor(c10);
            							}
            							else {
HXLINE(  28)								min12 = ::Math_obj::floor(b16);
            							}
HXDLIN(  28)							int ii_min24 = min12;
HXDLIN(  28)							int ii_max24 = ::Math_obj::ceil(a15);
HXDLIN(  28)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            						}
            						else {
HXLINE(  28)							int ii_min25 = ::Math_obj::floor(b16);
HXDLIN(  28)							int ii_max25 = ::Math_obj::ceil(c10);
HXDLIN(  28)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            						}
            					}
            					else {
HXLINE(  28)						if ((b16 > c10)) {
HXLINE(  28)							int min13;
HXDLIN(  28)							if ((a15 > c10)) {
HXLINE(  28)								min13 = ::Math_obj::floor(c10);
            							}
            							else {
HXLINE(  28)								min13 = ::Math_obj::ceil(a15);
            							}
HXDLIN(  28)							int ii_min26 = min13;
HXDLIN(  28)							int ii_max26 = ::Math_obj::ceil(b16);
HXDLIN(  28)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            						}
            						else {
HXLINE(  28)							int ii_min27 = ::Math_obj::floor(a15);
HXDLIN(  28)							int ii_max27 = ::Math_obj::ceil(c10);
HXDLIN(  28)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            						}
            					}
HXDLIN(  28)					Float a16 = v_ay1;
HXDLIN(  28)					Float b17 = v_by1;
HXDLIN(  28)					Float c11 = v_cy1;
HXDLIN(  28)					if ((a16 > b17)) {
HXLINE(  28)						if ((a16 > c11)) {
HXLINE(  28)							int min14;
HXDLIN(  28)							if ((b17 > c11)) {
HXLINE(  28)								min14 = ::Math_obj::floor(c11);
            							}
            							else {
HXLINE(  28)								min14 = ::Math_obj::floor(b17);
            							}
HXDLIN(  28)							int ii_min28 = min14;
HXDLIN(  28)							int ii_max28 = ::Math_obj::ceil(a16);
HXDLIN(  28)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            						}
            						else {
HXLINE(  28)							int ii_min29 = ::Math_obj::floor(b17);
HXDLIN(  28)							int ii_max29 = ::Math_obj::ceil(c11);
HXDLIN(  28)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            						}
            					}
            					else {
HXLINE(  28)						if ((b17 > c11)) {
HXLINE(  28)							int min15;
HXDLIN(  28)							if ((a16 > c11)) {
HXLINE(  28)								min15 = ::Math_obj::floor(c11);
            							}
            							else {
HXLINE(  28)								min15 = ::Math_obj::ceil(a16);
            							}
HXDLIN(  28)							int ii_min30 = min15;
HXDLIN(  28)							int ii_max30 = ::Math_obj::ceil(b17);
HXDLIN(  28)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            						}
            						else {
HXLINE(  28)							int ii_min31 = ::Math_obj::floor(a16);
HXDLIN(  28)							int ii_max31 = ::Math_obj::ceil(c11);
HXDLIN(  28)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            						}
            					}
            				}
HXDLIN(  28)				if (hasUndo1) {
HXLINE(  28)					v_undoImage1 = undoImage3;
HXDLIN(  28)					v_undoX1 = xIter31->start;
HXDLIN(  28)					v_undoY1 = yIter31->start;
            				}
HXDLIN(  28)				 ::pi_xy::algo::HitQuad v4 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXLINE(  26)				hitQuad = v4;
            			}
            			else {
HXLINE(  30)				Float sin2 = ::Math_obj::sin(theta);
HXDLIN(  30)				Float cos2 = ::Math_obj::cos(theta);
HXDLIN(  30)				Float radius11 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN(  30)				Float radius22 = (thick / ( (Float)(2) ));
HXDLIN(  30)				Float dx3 = ((Float)0.1);
HXDLIN(  30)				Float dy3 = radius11;
HXDLIN(  30)				Float cx5 = h2;
HXDLIN(  30)				Float cy5 = radius22;
HXDLIN(  30)				Float bx5 = h2;
HXDLIN(  30)				Float by5 = -(radius22);
HXDLIN(  30)				Float ax3 = ((Float)0.1);
HXDLIN(  30)				Float ay3 = -(radius11);
HXDLIN(  30)				Float temp1 = ((Float)0.);
HXLINE( 240)				temp1 = (px + ((ax3 * cos2) - (ay3 * sin2)));
HXLINE( 241)				ay3 = (py + ((ay3 * cos2) + (ax3 * sin2)));
HXLINE( 242)				ax3 = temp1;
HXLINE( 244)				temp1 = (px + ((bx5 * cos2) - (by5 * sin2)));
HXLINE( 245)				by5 = (py + ((by5 * cos2) + (bx5 * sin2)));
HXLINE( 246)				bx5 = temp1;
HXLINE( 248)				temp1 = (px + ((cx5 * cos2) - (cy5 * sin2)));
HXLINE( 249)				cy5 = (py + ((cy5 * cos2) + (cx5 * sin2)));
HXLINE( 250)				cx5 = temp1;
HXLINE( 252)				temp1 = (px + ((dx3 * cos2) - (dy3 * sin2)));
HXLINE( 253)				dy3 = (py + ((dy3 * cos2) + (dx3 * sin2)));
HXLINE( 254)				dx3 = temp1;
HXLINE(  30)				Float bx6 = bx5;
HXDLIN(  30)				Float by6 = by5;
HXDLIN(  30)				Float cx6 = dx3;
HXDLIN(  30)				Float cy6 = dy3;
HXDLIN(  30)				bool hasUndo2 = false;
HXDLIN(  30)				bool adjustWinding4 = (((((ax3 * by6) - (bx6 * ay3)) + ((bx6 * cy6) - (cx6 * by6))) + ((cx6 * ay3) - (ax3 * cy6))) > 0);
HXDLIN(  30)				if (!(adjustWinding4)) {
HXLINE(  30)					Float bx_4 = bx6;
HXDLIN(  30)					Float by_4 = by6;
HXLINE(  25)					bx6 = cx6;
HXLINE(  26)					by6 = cy6;
HXLINE(  27)					cx6 = bx_4;
HXLINE(  28)					cy6 = by_4;
            				}
HXLINE(  30)				Float s02 = ((ay3 * cx6) - (ax3 * cy6));
HXDLIN(  30)				Float sx2 = (cy6 - ay3);
HXDLIN(  30)				Float sy2 = (ax3 - cx6);
HXDLIN(  30)				Float t02 = ((ax3 * by6) - (ay3 * bx6));
HXDLIN(  30)				Float tx2 = (ay3 - by6);
HXDLIN(  30)				Float ty2 = (bx6 - ax3);
HXDLIN(  30)				Float A2 = ((((-(by6) * cx6) + (ay3 * (-(bx6) + cx6))) + (ax3 * (by6 - cy6))) + (bx6 * cy6));
HXDLIN(  30)				 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  30)				if ((ax3 > bx6)) {
HXLINE(  30)					if ((ax3 > cx6)) {
HXLINE(  30)						int min16;
HXDLIN(  30)						if ((bx6 > cx6)) {
HXLINE(  30)							min16 = ::Math_obj::floor(cx6);
            						}
            						else {
HXLINE(  30)							min16 = ::Math_obj::floor(bx6);
            						}
HXDLIN(  30)						int ii_min32 = min16;
HXDLIN(  30)						int ii_max32 = ::Math_obj::ceil(ax3);
HXDLIN(  30)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            					}
            					else {
HXLINE(  30)						int ii_min33 = ::Math_obj::floor(bx6);
HXDLIN(  30)						int ii_max33 = ::Math_obj::ceil(cx6);
HXDLIN(  30)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            					}
            				}
            				else {
HXLINE(  30)					if ((bx6 > cx6)) {
HXLINE(  30)						int min17;
HXDLIN(  30)						if ((ax3 > cx6)) {
HXLINE(  30)							min17 = ::Math_obj::floor(cx6);
            						}
            						else {
HXLINE(  30)							min17 = ::Math_obj::ceil(ax3);
            						}
HXDLIN(  30)						int ii_min34 = min17;
HXDLIN(  30)						int ii_max34 = ::Math_obj::ceil(bx6);
HXDLIN(  30)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            					}
            					else {
HXLINE(  30)						int ii_min35 = ::Math_obj::floor(ax3);
HXDLIN(  30)						int ii_max35 = ::Math_obj::ceil(cx6);
HXDLIN(  30)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            					}
            				}
HXDLIN(  30)				 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  30)				if ((ay3 > by6)) {
HXLINE(  30)					if ((ay3 > cy6)) {
HXLINE(  30)						int min18;
HXDLIN(  30)						if ((by6 > cy6)) {
HXLINE(  30)							min18 = ::Math_obj::floor(cy6);
            						}
            						else {
HXLINE(  30)							min18 = ::Math_obj::floor(by6);
            						}
HXDLIN(  30)						int ii_min36 = min18;
HXDLIN(  30)						int ii_max36 = ::Math_obj::ceil(ay3);
HXDLIN(  30)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            					}
            					else {
HXLINE(  30)						int ii_min37 = ::Math_obj::floor(by6);
HXDLIN(  30)						int ii_max37 = ::Math_obj::ceil(cy6);
HXDLIN(  30)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            					}
            				}
            				else {
HXLINE(  30)					if ((by6 > cy6)) {
HXLINE(  30)						int min19;
HXDLIN(  30)						if ((ay3 > cy6)) {
HXLINE(  30)							min19 = ::Math_obj::floor(cy6);
            						}
            						else {
HXLINE(  30)							min19 = ::Math_obj::ceil(ay3);
            						}
HXDLIN(  30)						int ii_min38 = min19;
HXDLIN(  30)						int ii_max38 = ::Math_obj::ceil(by6);
HXDLIN(  30)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            					}
            					else {
HXLINE(  30)						int ii_min39 = ::Math_obj::floor(ay3);
HXDLIN(  30)						int ii_max39 = ::Math_obj::ceil(cy6);
HXDLIN(  30)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            					}
            				}
HXDLIN(  30)				 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  30)				if (hasUndo2) {
HXLINE(  30)					int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  30)					int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  30)					 ::Dynamic imageType2 = null();
HXDLIN(  30)					 ::pi_xy::ImageStruct this67 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  30)					if (::hx::IsNull( imageType2 )) {
HXLINE(  54)						imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  30)					::Dynamic undoImage7;
HXDLIN(  30)					switch((int)(( (int)(imageType2) ))){
            						case (int)0: {
HXLINE(  30)							 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  30)							 ::iterMagic::BytesImg b18 = byt2;
HXDLIN(  30)							{
HXLINE(  30)								b18->width = width2;
HXDLIN(  30)								b18->height = height2;
HXDLIN(  30)								b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  30)								b18->data = ::haxe::io::Bytes_obj::alloc((b18->length * 4));
HXDLIN(  30)								{
HXLINE(  30)									int len4 = b18->length;
HXDLIN(  30)									int w2 = 0;
HXDLIN(  30)									{
HXLINE(  30)										int _g40 = 0;
HXDLIN(  30)										int _g41 = b18->height;
HXDLIN(  30)										while((_g40 < _g41)){
HXLINE(  30)											_g40 = (_g40 + 1);
HXDLIN(  30)											int y8 = (_g40 - 1);
HXDLIN(  30)											{
HXLINE(  30)												int _g42 = 0;
HXDLIN(  30)												int _g43 = b18->width;
HXDLIN(  30)												while((_g42 < _g43)){
HXLINE(  30)													_g42 = (_g42 + 1);
HXDLIN(  30)													int x8 = (_g42 - 1);
HXDLIN(  30)													{
HXLINE(  30)														w2 = (w2 + 1);
HXDLIN(  30)														b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  30)													{
HXLINE(  30)														w2 = (w2 + 1);
HXDLIN(  30)														b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  30)													{
HXLINE(  30)														w2 = (w2 + 1);
HXDLIN(  30)														b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  30)													{
HXLINE(  30)														w2 = (w2 + 1);
HXDLIN(  30)														b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  30)							undoImage7 = b18;
            						}
            						break;
            						case (int)1: {
HXLINE(  30)							 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  30)							 ::iterMagic::ArrIntImg a17 = arrI2;
HXDLIN(  30)							{
HXLINE(  30)								a17->width = width2;
HXDLIN(  30)								a17->height = height2;
HXDLIN(  30)								a17->data = ::Array_obj< int >::__new(0);
HXDLIN(  30)								a17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  30)								{
HXLINE(  30)									int _g44 = 0;
HXDLIN(  30)									int _g45 = a17->length;
HXDLIN(  30)									while((_g44 < _g45)){
HXLINE(  30)										_g44 = (_g44 + 1);
HXDLIN(  30)										int i12 = (_g44 - 1);
HXDLIN(  30)										a17->data[i12] = 0;
            									}
            								}
            							}
HXDLIN(  30)							undoImage7 = a17;
            						}
            						break;
            						case (int)2: {
HXLINE(  30)							 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  30)							 ::iterMagic::U32ArrImg b19 = u32a2;
HXDLIN(  30)							{
HXLINE(  30)								b19->width = width2;
HXDLIN(  30)								b19->height = height2;
HXDLIN(  30)								b19->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  30)								int size2 = (b19->length * 4);
HXDLIN(  30)								b19->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  30)								{
HXLINE(  30)									int _g46 = 0;
HXDLIN(  30)									int _g47 = b19->length;
HXDLIN(  30)									while((_g46 < _g47)){
HXLINE(  30)										_g46 = (_g46 + 1);
HXDLIN(  30)										int i13 = (_g46 - 1);
HXDLIN(  30)										{
HXLINE(  30)											 ::haxe::io::ArrayBufferViewImpl this68 = b19->data;
HXDLIN(  30)											bool undoImage8;
HXDLIN(  30)											if ((i13 >= 0)) {
HXLINE(  30)												undoImage8 = (i13 < (this68->byteLength >> 2));
            											}
            											else {
HXLINE(  30)												undoImage8 = false;
            											}
HXDLIN(  30)											if (undoImage8) {
HXLINE(  30)												 ::haxe::io::Bytes _this2 = this68->bytes;
HXDLIN(  30)												int pos2 = ((i13 << 2) + this68->byteOffset);
HXDLIN(  30)												_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  30)												_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  30)												_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  30)												_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  30)							undoImage7 = b19;
            						}
            						break;
            						case (int)3: {
HXLINE(  30)							 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  30)							 ::iterMagic::VecIntImg v5 = vec2;
HXDLIN(  30)							{
HXLINE(  30)								v5->width = width2;
HXDLIN(  30)								v5->height = height2;
HXDLIN(  30)								v5->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  30)								v5->data = ::Array_obj< int >::__new(v5->length);
HXDLIN(  30)								{
HXLINE(  30)									int _g48 = 0;
HXDLIN(  30)									int _g49 = v5->length;
HXDLIN(  30)									while((_g48 < _g49)){
HXLINE(  30)										_g48 = (_g48 + 1);
HXDLIN(  30)										int i14 = (_g48 - 1);
HXDLIN(  30)										v5->data->__unsafe_set(i14,0);
            									}
            								}
            							}
HXDLIN(  30)							undoImage7 = v5;
            						}
            						break;
            						case (int)4: {
HXLINE(  30)							 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  30)							 ::iterMagic::StackIntImg b20 = sInt2;
HXDLIN(  30)							{
HXLINE(  30)								b20->width = width2;
HXDLIN(  30)								b20->height = height2;
HXDLIN(  30)								b20->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  30)								b20->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  30)								{
HXLINE(  30)									int len5 = b20->length;
HXDLIN(  30)									 ::haxe::ds::GenericStack_Int d2 = b20->data;
HXDLIN(  30)									if (::hx::IsNull( d2->head )) {
HXLINE(  30)										int _g50 = 0;
HXDLIN(  30)										int _g51 = len5;
HXDLIN(  30)										while((_g50 < _g51)){
HXLINE(  30)											_g50 = (_g50 + 1);
HXDLIN(  30)											int i15 = (_g50 - 1);
HXDLIN(  30)											d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            										}
            									}
            									else {
HXLINE(  30)										int _g52 = 0;
HXDLIN(  30)										int _g53 = len5;
HXDLIN(  30)										while((_g52 < _g53)){
HXLINE(  30)											_g52 = (_g52 + 1);
HXDLIN(  30)											int i16 = (_g52 - 1);
HXDLIN(  30)											{
HXLINE(  30)												 ::haxe::ds::GenericCell_Int l2 = b20->data->head;
HXDLIN(  30)												 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  30)												{
HXLINE(  30)													int _g54 = 0;
HXDLIN(  30)													int _g55 = i16;
HXDLIN(  30)													while((_g54 < _g55)){
HXLINE(  30)														_g54 = (_g54 + 1);
HXDLIN(  30)														int i17 = (_g54 - 1);
HXLINE( 345)														prev2 = l2;
HXLINE( 346)														l2 = l2->next;
            													}
            												}
HXLINE(  30)												if (::hx::IsNull( prev2 )) {
HXLINE(  30)													b20->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  30)													l2 = null();
            												}
            												else {
HXLINE(  30)													prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  30)													l2 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  30)							undoImage7 = b20;
            						}
            						break;
            					}
HXDLIN(  30)					this67->image = undoImage7;
HXDLIN(  30)					this67->width = width2;
HXDLIN(  30)					this67->height = height2;
HXDLIN(  30)					this67->imageType = ( (int)(imageType2) );
HXDLIN(  30)					undoImage6 = this67;
HXDLIN(  30)					{
HXLINE(  30)						int rectLeft2 = xIter32->start;
HXDLIN(  30)						int rectTop2 = yIter32->start;
HXDLIN(  30)						int rectRight2 = xIter32->max;
HXDLIN(  30)						bool forceClear2 = false;
HXDLIN(  30)						{
HXLINE(  30)							int _g56 = rectTop2;
HXDLIN(  30)							int _g57 = yIter32->max;
HXDLIN(  30)							while((_g56 < _g57)){
HXLINE(  30)								_g56 = (_g56 + 1);
HXDLIN(  30)								int dy4 = (_g56 - 1);
HXDLIN(  30)								{
HXLINE(  30)									int _g58 = rectLeft2;
HXDLIN(  30)									int _g59 = rectRight2;
HXDLIN(  30)									while((_g58 < _g59)){
HXLINE(  30)										_g58 = (_g58 + 1);
HXDLIN(  30)										int dx4 = (_g58 - 1);
HXDLIN(  30)										::Dynamic this69 = pixelImage->image;
HXDLIN(  30)										int index10;
HXDLIN(  30)										if (pixelImage->useVirtualPos) {
HXLINE(  30)											index10 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  30)											index10 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            										}
HXDLIN(  30)										int c12 = ::iterMagic::Iimg_obj::get(this69,index10);
HXDLIN(  30)										int col2;
HXDLIN(  30)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)											col2 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            										}
            										else {
HXLINE(  30)											col2 = c12;
            										}
HXDLIN(  30)										bool hitQuad17;
HXDLIN(  30)										if (pixelImage->useMask) {
HXLINE(  30)											hitQuad17 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  30)											hitQuad17 = false;
            										}
HXDLIN(  30)										if (hitQuad17) {
HXLINE(  30)											 ::pi_xy::ImageStruct this70 = pixelImage->mask;
HXDLIN(  30)											::Dynamic this71 = this70->image;
HXDLIN(  30)											int index11;
HXDLIN(  30)											if (this70->useVirtualPos) {
HXLINE(  30)												index11 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this70->virtualY) * ( (Float)(this70->width) )) + dx4) - this70->virtualX));
            											}
            											else {
HXLINE(  30)												index11 = ::Std_obj::_hx_int(( (Float)(((dy4 * this70->width) + dx4)) ));
            											}
HXDLIN(  30)											int c13 = ::iterMagic::Iimg_obj::get(this71,index11);
HXDLIN(  30)											int v6;
HXDLIN(  30)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)												v6 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            											}
            											else {
HXLINE(  30)												v6 = c13;
            											}
HXDLIN(  30)											int maskPixel2 = v6;
HXDLIN(  30)											int this72 = col2;
HXDLIN(  30)											if ((maskPixel2 == 0)) {
HXLINE(  30)												col2 = this72;
            											}
            											else {
HXLINE(  30)												Float m02;
HXDLIN(  30)												int this73 = ((maskPixel2 >> 24) & 255);
HXDLIN(  30)												if ((this73 == 0)) {
HXLINE(  30)													m02 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													m02 = (( (Float)(this73) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float m12;
HXDLIN(  30)												int this74 = ((maskPixel2 >> 16) & 255);
HXDLIN(  30)												if ((this74 == 0)) {
HXLINE(  30)													m12 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													m12 = (( (Float)(this74) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float m22;
HXDLIN(  30)												int this75 = ((maskPixel2 >> 8) & 255);
HXDLIN(  30)												if ((this75 == 0)) {
HXLINE(  30)													m22 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													m22 = (( (Float)(this75) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float m32;
HXDLIN(  30)												int this76 = (maskPixel2 & 255);
HXDLIN(  30)												if ((this76 == 0)) {
HXLINE(  30)													m32 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													m32 = (( (Float)(this76) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this72 >> 24) & 255)) )));
HXDLIN(  30)												int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this72 >> 16) & 255)) )));
HXDLIN(  30)												int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this72 >> 8) & 255)) )));
HXDLIN(  30)												int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this72 & 255)) )));
HXDLIN(  30)												col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  30)										if ((col2 != 0)) {
HXLINE(  30)											int x9 = (dx4 - rectLeft2);
HXDLIN(  30)											int y9 = (dy4 - rectTop2);
HXDLIN(  30)											int c14 = col2;
HXDLIN(  30)											bool hitQuad18;
HXDLIN(  30)											if ((((c14 >> 24) & 255) < 254)) {
HXLINE(  30)												hitQuad18 = undoImage6->transparent;
            											}
            											else {
HXLINE(  30)												hitQuad18 = false;
            											}
HXDLIN(  30)											if (hitQuad18) {
HXLINE(  30)												int location4;
HXDLIN(  30)												if (undoImage6->useVirtualPos) {
HXLINE(  30)													location4 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            												}
            												else {
HXLINE(  30)													location4 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            												}
HXDLIN(  30)												int this77 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN(  30)												int this78;
HXDLIN(  30)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)													this78 = ((((((this77 >> 24) & 255) << 24) | ((this77 & 255) << 16)) | (((this77 >> 8) & 255) << 8)) | ((this77 >> 16) & 255));
            												}
            												else {
HXLINE(  30)													this78 = this77;
            												}
HXDLIN(  30)												Float a18;
HXDLIN(  30)												int this79 = ((this78 >> 24) & 255);
HXDLIN(  30)												if ((this79 == 0)) {
HXLINE(  30)													a18 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													a18 = (( (Float)(this79) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float r14;
HXDLIN(  30)												int this80 = ((this78 >> 16) & 255);
HXDLIN(  30)												if ((this80 == 0)) {
HXLINE(  30)													r14 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													r14 = (( (Float)(this80) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float g14;
HXDLIN(  30)												int this81 = ((this78 >> 8) & 255);
HXDLIN(  30)												if ((this81 == 0)) {
HXLINE(  30)													g14 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													g14 = (( (Float)(this81) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float b110;
HXDLIN(  30)												int this82 = (this78 & 255);
HXDLIN(  30)												if ((this82 == 0)) {
HXLINE(  30)													b110 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													b110 = (( (Float)(this82) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float a24;
HXDLIN(  30)												int this83 = ((col2 >> 24) & 255);
HXDLIN(  30)												if ((this83 == 0)) {
HXLINE(  30)													a24 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													a24 = (( (Float)(this83) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float r24;
HXDLIN(  30)												int this84 = ((col2 >> 16) & 255);
HXDLIN(  30)												if ((this84 == 0)) {
HXLINE(  30)													r24 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													r24 = (( (Float)(this84) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float g24;
HXDLIN(  30)												int this85 = ((col2 >> 8) & 255);
HXDLIN(  30)												if ((this85 == 0)) {
HXLINE(  30)													g24 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													g24 = (( (Float)(this85) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float b25;
HXDLIN(  30)												int this86 = (col2 & 255);
HXDLIN(  30)												if ((this86 == 0)) {
HXLINE(  30)													b25 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													b25 = (( (Float)(this86) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float a34 = (a18 * (( (Float)(1) ) - a24));
HXDLIN(  30)												int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  30)												int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  30)												int b26 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a34) + (b25 * a24))));
HXDLIN(  30)												int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  30)												int blended4 = ((((a19 << 24) | (r6 << 16)) | (g6 << 8)) | b26);
HXDLIN(  30)												{
HXLINE(  30)													int hitQuad19;
HXDLIN(  30)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)														hitQuad19 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            													}
            													else {
HXLINE(  30)														hitQuad19 = blended4;
            													}
HXDLIN(  30)													::iterMagic::Iimg_obj::set(undoImage6->image,location4,hitQuad19);
            												}
            											}
            											else {
HXLINE(  30)												::Dynamic this87 = undoImage6->image;
HXDLIN(  30)												int index12;
HXDLIN(  30)												if (undoImage6->useVirtualPos) {
HXLINE(  30)													index12 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            												}
            												else {
HXLINE(  30)													index12 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            												}
HXDLIN(  30)												int hitQuad20;
HXDLIN(  30)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)													hitQuad20 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            												}
            												else {
HXLINE(  30)													hitQuad20 = c14;
            												}
HXDLIN(  30)												::iterMagic::Iimg_obj::set(this87,index12,hitQuad20);
            											}
            										}
            										else {
HXLINE(  30)											if (forceClear2) {
HXLINE(  30)												::Dynamic this88 = undoImage6->image;
HXDLIN(  30)												int x10 = (dx4 - rectLeft2);
HXDLIN(  30)												int y10 = (dy4 - rectTop2);
HXDLIN(  30)												int index13;
HXDLIN(  30)												if (undoImage6->useVirtualPos) {
HXLINE(  30)													index13 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x10) - undoImage6->virtualX));
            												}
            												else {
HXLINE(  30)													index13 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage6->width) + x10)) ));
            												}
HXDLIN(  30)												::iterMagic::Iimg_obj::set(this88,index13,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  30)				bool found2 = false;
HXDLIN(  30)				Float s2 = ((Float)0.);
HXDLIN(  30)				Float t2 = ((Float)0.);
HXDLIN(  30)				Float sxx2 = ((Float)0.);
HXDLIN(  30)				Float txx2 = ((Float)0.);
HXDLIN(  30)				{
HXLINE(  30)					int _g_min4 = xIter32->start;
HXDLIN(  30)					int _g_max4 = xIter32->max;
HXDLIN(  30)					while((_g_min4 < _g_max4)){
HXLINE(  30)						_g_min4 = (_g_min4 + 1);
HXDLIN(  30)						int x11 = (_g_min4 - 1);
HXLINE(  60)						sxx2 = (sx2 * ( (Float)(x11) ));
HXLINE(  61)						txx2 = (tx2 * ( (Float)(x11) ));
HXLINE(  62)						found2 = false;
HXLINE(  30)						{
HXLINE(  30)							int _g_min5 = yIter32->start;
HXDLIN(  30)							int _g_max5 = yIter32->max;
HXDLIN(  30)							while((_g_min5 < _g_max5)){
HXLINE(  30)								_g_min5 = (_g_min5 + 1);
HXDLIN(  30)								int y11 = (_g_min5 - 1);
HXLINE(  64)								s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y11) )));
HXLINE(  65)								t2 = ((t02 + txx2) + (ty2 * ( (Float)(y11) )));
HXLINE(  30)								bool hitQuad21;
HXDLIN(  30)								if (!((s2 <= 0))) {
HXLINE(  30)									hitQuad21 = (t2 <= 0);
            								}
            								else {
HXLINE(  30)									hitQuad21 = true;
            								}
HXDLIN(  30)								if (hitQuad21) {
HXLINE(  30)									if (found2) {
HXLINE(  30)										goto _hx_goto_35;
            									}
            								}
            								else {
HXLINE(  30)									if (((s2 + t2) < A2)) {
HXLINE(  30)										{
HXLINE(  30)											int c15 = color;
HXDLIN(  30)											bool hitQuad22;
HXDLIN(  30)											if ((((c15 >> 24) & 255) < 254)) {
HXLINE(  30)												hitQuad22 = pixelImage->transparent;
            											}
            											else {
HXLINE(  30)												hitQuad22 = false;
            											}
HXDLIN(  30)											if (hitQuad22) {
HXLINE(  30)												int location5;
HXDLIN(  30)												if (pixelImage->useVirtualPos) {
HXLINE(  30)													location5 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x11) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  30)													location5 = ::Std_obj::_hx_int(( (Float)(((y11 * pixelImage->width) + x11)) ));
            												}
HXDLIN(  30)												int this89 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN(  30)												int this90;
HXDLIN(  30)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)													this90 = ((((((this89 >> 24) & 255) << 24) | ((this89 & 255) << 16)) | (((this89 >> 8) & 255) << 8)) | ((this89 >> 16) & 255));
            												}
            												else {
HXLINE(  30)													this90 = this89;
            												}
HXDLIN(  30)												Float a110;
HXDLIN(  30)												int this91 = ((this90 >> 24) & 255);
HXDLIN(  30)												if ((this91 == 0)) {
HXLINE(  30)													a110 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													a110 = (( (Float)(this91) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float r15;
HXDLIN(  30)												int this92 = ((this90 >> 16) & 255);
HXDLIN(  30)												if ((this92 == 0)) {
HXLINE(  30)													r15 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													r15 = (( (Float)(this92) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float g15;
HXDLIN(  30)												int this93 = ((this90 >> 8) & 255);
HXDLIN(  30)												if ((this93 == 0)) {
HXLINE(  30)													g15 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													g15 = (( (Float)(this93) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float b111;
HXDLIN(  30)												int this94 = (this90 & 255);
HXDLIN(  30)												if ((this94 == 0)) {
HXLINE(  30)													b111 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													b111 = (( (Float)(this94) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float a25;
HXDLIN(  30)												int this95 = ((color >> 24) & 255);
HXDLIN(  30)												if ((this95 == 0)) {
HXLINE(  30)													a25 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													a25 = (( (Float)(this95) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float r25;
HXDLIN(  30)												int this96 = ((color >> 16) & 255);
HXDLIN(  30)												if ((this96 == 0)) {
HXLINE(  30)													r25 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													r25 = (( (Float)(this96) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float g25;
HXDLIN(  30)												int this97 = ((color >> 8) & 255);
HXDLIN(  30)												if ((this97 == 0)) {
HXLINE(  30)													g25 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													g25 = (( (Float)(this97) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float b27;
HXDLIN(  30)												int this98 = (color & 255);
HXDLIN(  30)												if ((this98 == 0)) {
HXLINE(  30)													b27 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													b27 = (( (Float)(this98) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float a35 = (a110 * (( (Float)(1) ) - a25));
HXDLIN(  30)												int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  30)												int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  30)												int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a35) + (b27 * a25))));
HXDLIN(  30)												int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  30)												int blended5 = ((((a20 << 24) | (r7 << 16)) | (g7 << 8)) | b28);
HXDLIN(  30)												{
HXLINE(  30)													int hitQuad23;
HXDLIN(  30)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)														hitQuad23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            													}
            													else {
HXLINE(  30)														hitQuad23 = blended5;
            													}
HXDLIN(  30)													::iterMagic::Iimg_obj::set(pixelImage->image,location5,hitQuad23);
            												}
            											}
            											else {
HXLINE(  30)												::Dynamic this99 = pixelImage->image;
HXDLIN(  30)												int index14;
HXDLIN(  30)												if (pixelImage->useVirtualPos) {
HXLINE(  30)													index14 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x11) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  30)													index14 = ::Std_obj::_hx_int(( (Float)(((y11 * pixelImage->width) + x11)) ));
            												}
HXDLIN(  30)												int hitQuad24;
HXDLIN(  30)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)													hitQuad24 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            												}
            												else {
HXLINE(  30)													hitQuad24 = c15;
            												}
HXDLIN(  30)												::iterMagic::Iimg_obj::set(this99,index14,hitQuad24);
            											}
            										}
HXLINE(  73)										found2 = true;
            									}
            									else {
HXLINE(  30)										if (found2) {
HXLINE(  30)											goto _hx_goto_35;
            										}
            									}
            								}
            							}
            							_hx_goto_35:;
            						}
            					}
            				}
HXDLIN(  30)				 ::pi_xy::iter::IntIterStart v_yIter32;
HXDLIN(  30)				 ::pi_xy::iter::IntIterStart v_xIter32;
HXDLIN(  30)				int v_undoY2;
HXDLIN(  30)				int v_undoX2;
HXDLIN(  30)				Float v_ty2;
HXDLIN(  30)				Float v_tx2;
HXDLIN(  30)				Float v_t02;
HXDLIN(  30)				Float v_sy2;
HXDLIN(  30)				Float v_sx2;
HXDLIN(  30)				Float v_s02;
HXDLIN(  30)				Float v_A2;
HXDLIN(  30)				Float ax4 = ax3;
HXDLIN(  30)				Float ay4 = ay3;
HXDLIN(  30)				 ::pi_xy::ImageStruct v_undoImage2 = null();
HXDLIN(  30)				Float bx7 = bx6;
HXDLIN(  30)				Float by7 = by6;
HXDLIN(  30)				Float cx7 = cx6;
HXDLIN(  30)				Float cy7 = cy6;
HXDLIN(  30)				bool adjustWinding5 = (((((ax4 * by7) - (bx7 * ay4)) + ((bx7 * cy7) - (cx7 * by7))) + ((cx7 * ay4) - (ax4 * cy7))) > 0);
HXDLIN(  30)				if (!(adjustWinding5)) {
HXLINE(  30)					Float bx_5 = bx7;
HXDLIN(  30)					Float by_5 = by7;
HXLINE(  24)					bx7 = cx7;
HXLINE(  25)					by7 = cy7;
HXLINE(  26)					cx7 = bx_5;
HXLINE(  27)					cy7 = by_5;
            				}
HXLINE(  30)				Float v_ax2 = ax4;
HXDLIN(  30)				Float v_ay2 = ay4;
HXDLIN(  30)				Float v_bx2 = bx7;
HXDLIN(  30)				Float v_by2 = by7;
HXDLIN(  30)				Float v_cx2 = cx7;
HXDLIN(  30)				Float v_cy2 = cy7;
HXDLIN(  30)				bool v_preCalculated2 = true;
HXDLIN(  30)				{
HXLINE(  30)					v_s02 = ((v_ay2 * v_cx2) - (v_ax2 * v_cy2));
HXDLIN(  30)					v_sx2 = (v_cy2 - v_ay2);
HXDLIN(  30)					v_sy2 = (v_ax2 - v_cx2);
HXDLIN(  30)					v_t02 = ((v_ax2 * v_by2) - (v_ay2 * v_bx2));
HXDLIN(  30)					v_tx2 = (v_ay2 - v_by2);
HXDLIN(  30)					v_ty2 = (v_bx2 - v_ax2);
HXDLIN(  30)					v_A2 = ((((-(v_by2) * v_cx2) + (v_ay2 * (-(v_bx2) + v_cx2))) + (v_ax2 * (v_by2 - v_cy2))) + (v_bx2 * v_cy2));
HXDLIN(  30)					Float a26 = v_ax2;
HXDLIN(  30)					Float b29 = v_bx2;
HXDLIN(  30)					Float c16 = v_cx2;
HXDLIN(  30)					if ((a26 > b29)) {
HXLINE(  30)						if ((a26 > c16)) {
HXLINE(  30)							int min20;
HXDLIN(  30)							if ((b29 > c16)) {
HXLINE(  30)								min20 = ::Math_obj::floor(c16);
            							}
            							else {
HXLINE(  30)								min20 = ::Math_obj::floor(b29);
            							}
HXDLIN(  30)							int ii_min40 = min20;
HXDLIN(  30)							int ii_max40 = ::Math_obj::ceil(a26);
HXDLIN(  30)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            						}
            						else {
HXLINE(  30)							int ii_min41 = ::Math_obj::floor(b29);
HXDLIN(  30)							int ii_max41 = ::Math_obj::ceil(c16);
HXDLIN(  30)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            						}
            					}
            					else {
HXLINE(  30)						if ((b29 > c16)) {
HXLINE(  30)							int min21;
HXDLIN(  30)							if ((a26 > c16)) {
HXLINE(  30)								min21 = ::Math_obj::floor(c16);
            							}
            							else {
HXLINE(  30)								min21 = ::Math_obj::ceil(a26);
            							}
HXDLIN(  30)							int ii_min42 = min21;
HXDLIN(  30)							int ii_max42 = ::Math_obj::ceil(b29);
HXDLIN(  30)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            						}
            						else {
HXLINE(  30)							int ii_min43 = ::Math_obj::floor(a26);
HXDLIN(  30)							int ii_max43 = ::Math_obj::ceil(c16);
HXDLIN(  30)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            						}
            					}
HXDLIN(  30)					Float a27 = v_ay2;
HXDLIN(  30)					Float b30 = v_by2;
HXDLIN(  30)					Float c17 = v_cy2;
HXDLIN(  30)					if ((a27 > b30)) {
HXLINE(  30)						if ((a27 > c17)) {
HXLINE(  30)							int min22;
HXDLIN(  30)							if ((b30 > c17)) {
HXLINE(  30)								min22 = ::Math_obj::floor(c17);
            							}
            							else {
HXLINE(  30)								min22 = ::Math_obj::floor(b30);
            							}
HXDLIN(  30)							int ii_min44 = min22;
HXDLIN(  30)							int ii_max44 = ::Math_obj::ceil(a27);
HXDLIN(  30)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            						}
            						else {
HXLINE(  30)							int ii_min45 = ::Math_obj::floor(b30);
HXDLIN(  30)							int ii_max45 = ::Math_obj::ceil(c17);
HXDLIN(  30)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            						}
            					}
            					else {
HXLINE(  30)						if ((b30 > c17)) {
HXLINE(  30)							int min23;
HXDLIN(  30)							if ((a27 > c17)) {
HXLINE(  30)								min23 = ::Math_obj::floor(c17);
            							}
            							else {
HXLINE(  30)								min23 = ::Math_obj::ceil(a27);
            							}
HXDLIN(  30)							int ii_min46 = min23;
HXDLIN(  30)							int ii_max46 = ::Math_obj::ceil(b30);
HXDLIN(  30)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            						}
            						else {
HXLINE(  30)							int ii_min47 = ::Math_obj::floor(a27);
HXDLIN(  30)							int ii_max47 = ::Math_obj::ceil(c17);
HXDLIN(  30)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            						}
            					}
            				}
HXDLIN(  30)				if (hasUndo2) {
HXLINE(  30)					v_undoImage2 = undoImage6;
HXDLIN(  30)					v_undoX2 = xIter32->start;
HXDLIN(  30)					v_undoY2 = yIter32->start;
            				}
HXDLIN(  30)				Float bx8 = cx5;
HXDLIN(  30)				Float by8 = cy5;
HXDLIN(  30)				Float cx8 = dx3;
HXDLIN(  30)				Float cy8 = dy3;
HXDLIN(  30)				bool hasUndo3 = false;
HXDLIN(  30)				bool adjustWinding6 = (((((bx5 * by8) - (bx8 * by5)) + ((bx8 * cy8) - (cx8 * by8))) + ((cx8 * by5) - (bx5 * cy8))) > 0);
HXDLIN(  30)				if (!(adjustWinding6)) {
HXLINE(  30)					Float bx_6 = bx8;
HXDLIN(  30)					Float by_6 = by8;
HXLINE(  25)					bx8 = cx8;
HXLINE(  26)					by8 = cy8;
HXLINE(  27)					cx8 = bx_6;
HXLINE(  28)					cy8 = by_6;
            				}
HXLINE(  30)				Float s03 = ((by5 * cx8) - (bx5 * cy8));
HXDLIN(  30)				Float sx3 = (cy8 - by5);
HXDLIN(  30)				Float sy3 = (bx5 - cx8);
HXDLIN(  30)				Float t03 = ((bx5 * by8) - (by5 * bx8));
HXDLIN(  30)				Float tx3 = (by5 - by8);
HXDLIN(  30)				Float ty3 = (bx8 - bx5);
HXDLIN(  30)				Float A3 = ((((-(by8) * cx8) + (by5 * (-(bx8) + cx8))) + (bx5 * (by8 - cy8))) + (bx8 * cy8));
HXDLIN(  30)				 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  30)				if ((bx5 > bx8)) {
HXLINE(  30)					if ((bx5 > cx8)) {
HXLINE(  30)						int min24;
HXDLIN(  30)						if ((bx8 > cx8)) {
HXLINE(  30)							min24 = ::Math_obj::floor(cx8);
            						}
            						else {
HXLINE(  30)							min24 = ::Math_obj::floor(bx8);
            						}
HXDLIN(  30)						int ii_min48 = min24;
HXDLIN(  30)						int ii_max48 = ::Math_obj::ceil(bx5);
HXDLIN(  30)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            					}
            					else {
HXLINE(  30)						int ii_min49 = ::Math_obj::floor(bx8);
HXDLIN(  30)						int ii_max49 = ::Math_obj::ceil(cx8);
HXDLIN(  30)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            					}
            				}
            				else {
HXLINE(  30)					if ((bx8 > cx8)) {
HXLINE(  30)						int min25;
HXDLIN(  30)						if ((bx5 > cx8)) {
HXLINE(  30)							min25 = ::Math_obj::floor(cx8);
            						}
            						else {
HXLINE(  30)							min25 = ::Math_obj::ceil(bx5);
            						}
HXDLIN(  30)						int ii_min50 = min25;
HXDLIN(  30)						int ii_max50 = ::Math_obj::ceil(bx8);
HXDLIN(  30)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            					}
            					else {
HXLINE(  30)						int ii_min51 = ::Math_obj::floor(bx5);
HXDLIN(  30)						int ii_max51 = ::Math_obj::ceil(cx8);
HXDLIN(  30)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            					}
            				}
HXDLIN(  30)				 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  30)				if ((by5 > by8)) {
HXLINE(  30)					if ((by5 > cy8)) {
HXLINE(  30)						int min26;
HXDLIN(  30)						if ((by8 > cy8)) {
HXLINE(  30)							min26 = ::Math_obj::floor(cy8);
            						}
            						else {
HXLINE(  30)							min26 = ::Math_obj::floor(by8);
            						}
HXDLIN(  30)						int ii_min52 = min26;
HXDLIN(  30)						int ii_max52 = ::Math_obj::ceil(by5);
HXDLIN(  30)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            					}
            					else {
HXLINE(  30)						int ii_min53 = ::Math_obj::floor(by8);
HXDLIN(  30)						int ii_max53 = ::Math_obj::ceil(cy8);
HXDLIN(  30)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            					}
            				}
            				else {
HXLINE(  30)					if ((by8 > cy8)) {
HXLINE(  30)						int min27;
HXDLIN(  30)						if ((by5 > cy8)) {
HXLINE(  30)							min27 = ::Math_obj::floor(cy8);
            						}
            						else {
HXLINE(  30)							min27 = ::Math_obj::ceil(by5);
            						}
HXDLIN(  30)						int ii_min54 = min27;
HXDLIN(  30)						int ii_max54 = ::Math_obj::ceil(by8);
HXDLIN(  30)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            					}
            					else {
HXLINE(  30)						int ii_min55 = ::Math_obj::floor(by5);
HXDLIN(  30)						int ii_max55 = ::Math_obj::ceil(cy8);
HXDLIN(  30)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            					}
            				}
HXDLIN(  30)				 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  30)				if (hasUndo3) {
HXLINE(  30)					int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  30)					int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  30)					 ::Dynamic imageType3 = null();
HXDLIN(  30)					 ::pi_xy::ImageStruct this100 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  30)					if (::hx::IsNull( imageType3 )) {
HXLINE(  54)						imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  30)					::Dynamic undoImage10;
HXDLIN(  30)					switch((int)(( (int)(imageType3) ))){
            						case (int)0: {
HXLINE(  30)							 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  30)							 ::iterMagic::BytesImg b31 = byt3;
HXDLIN(  30)							{
HXLINE(  30)								b31->width = width3;
HXDLIN(  30)								b31->height = height3;
HXDLIN(  30)								b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  30)								b31->data = ::haxe::io::Bytes_obj::alloc((b31->length * 4));
HXDLIN(  30)								{
HXLINE(  30)									int len6 = b31->length;
HXDLIN(  30)									int w3 = 0;
HXDLIN(  30)									{
HXLINE(  30)										int _g60 = 0;
HXDLIN(  30)										int _g61 = b31->height;
HXDLIN(  30)										while((_g60 < _g61)){
HXLINE(  30)											_g60 = (_g60 + 1);
HXDLIN(  30)											int y12 = (_g60 - 1);
HXDLIN(  30)											{
HXLINE(  30)												int _g62 = 0;
HXDLIN(  30)												int _g63 = b31->width;
HXDLIN(  30)												while((_g62 < _g63)){
HXLINE(  30)													_g62 = (_g62 + 1);
HXDLIN(  30)													int x12 = (_g62 - 1);
HXDLIN(  30)													{
HXLINE(  30)														w3 = (w3 + 1);
HXDLIN(  30)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  30)													{
HXLINE(  30)														w3 = (w3 + 1);
HXDLIN(  30)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  30)													{
HXLINE(  30)														w3 = (w3 + 1);
HXDLIN(  30)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  30)													{
HXLINE(  30)														w3 = (w3 + 1);
HXDLIN(  30)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  30)							undoImage10 = b31;
            						}
            						break;
            						case (int)1: {
HXLINE(  30)							 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  30)							 ::iterMagic::ArrIntImg a28 = arrI3;
HXDLIN(  30)							{
HXLINE(  30)								a28->width = width3;
HXDLIN(  30)								a28->height = height3;
HXDLIN(  30)								a28->data = ::Array_obj< int >::__new(0);
HXDLIN(  30)								a28->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  30)								{
HXLINE(  30)									int _g64 = 0;
HXDLIN(  30)									int _g65 = a28->length;
HXDLIN(  30)									while((_g64 < _g65)){
HXLINE(  30)										_g64 = (_g64 + 1);
HXDLIN(  30)										int i18 = (_g64 - 1);
HXDLIN(  30)										a28->data[i18] = 0;
            									}
            								}
            							}
HXDLIN(  30)							undoImage10 = a28;
            						}
            						break;
            						case (int)2: {
HXLINE(  30)							 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  30)							 ::iterMagic::U32ArrImg b32 = u32a3;
HXDLIN(  30)							{
HXLINE(  30)								b32->width = width3;
HXDLIN(  30)								b32->height = height3;
HXDLIN(  30)								b32->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  30)								int size3 = (b32->length * 4);
HXDLIN(  30)								b32->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  30)								{
HXLINE(  30)									int _g66 = 0;
HXDLIN(  30)									int _g67 = b32->length;
HXDLIN(  30)									while((_g66 < _g67)){
HXLINE(  30)										_g66 = (_g66 + 1);
HXDLIN(  30)										int i19 = (_g66 - 1);
HXDLIN(  30)										{
HXLINE(  30)											 ::haxe::io::ArrayBufferViewImpl this101 = b32->data;
HXDLIN(  30)											bool undoImage11;
HXDLIN(  30)											if ((i19 >= 0)) {
HXLINE(  30)												undoImage11 = (i19 < (this101->byteLength >> 2));
            											}
            											else {
HXLINE(  30)												undoImage11 = false;
            											}
HXDLIN(  30)											if (undoImage11) {
HXLINE(  30)												 ::haxe::io::Bytes _this3 = this101->bytes;
HXDLIN(  30)												int pos3 = ((i19 << 2) + this101->byteOffset);
HXDLIN(  30)												_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  30)												_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  30)												_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  30)												_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  30)							undoImage10 = b32;
            						}
            						break;
            						case (int)3: {
HXLINE(  30)							 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  30)							 ::iterMagic::VecIntImg v7 = vec3;
HXDLIN(  30)							{
HXLINE(  30)								v7->width = width3;
HXDLIN(  30)								v7->height = height3;
HXDLIN(  30)								v7->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  30)								v7->data = ::Array_obj< int >::__new(v7->length);
HXDLIN(  30)								{
HXLINE(  30)									int _g68 = 0;
HXDLIN(  30)									int _g69 = v7->length;
HXDLIN(  30)									while((_g68 < _g69)){
HXLINE(  30)										_g68 = (_g68 + 1);
HXDLIN(  30)										int i20 = (_g68 - 1);
HXDLIN(  30)										v7->data->__unsafe_set(i20,0);
            									}
            								}
            							}
HXDLIN(  30)							undoImage10 = v7;
            						}
            						break;
            						case (int)4: {
HXLINE(  30)							 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  30)							 ::iterMagic::StackIntImg b33 = sInt3;
HXDLIN(  30)							{
HXLINE(  30)								b33->width = width3;
HXDLIN(  30)								b33->height = height3;
HXDLIN(  30)								b33->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  30)								b33->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  30)								{
HXLINE(  30)									int len7 = b33->length;
HXDLIN(  30)									 ::haxe::ds::GenericStack_Int d3 = b33->data;
HXDLIN(  30)									if (::hx::IsNull( d3->head )) {
HXLINE(  30)										int _g70 = 0;
HXDLIN(  30)										int _g71 = len7;
HXDLIN(  30)										while((_g70 < _g71)){
HXLINE(  30)											_g70 = (_g70 + 1);
HXDLIN(  30)											int i21 = (_g70 - 1);
HXDLIN(  30)											d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            										}
            									}
            									else {
HXLINE(  30)										int _g72 = 0;
HXDLIN(  30)										int _g73 = len7;
HXDLIN(  30)										while((_g72 < _g73)){
HXLINE(  30)											_g72 = (_g72 + 1);
HXDLIN(  30)											int i22 = (_g72 - 1);
HXDLIN(  30)											{
HXLINE(  30)												 ::haxe::ds::GenericCell_Int l3 = b33->data->head;
HXDLIN(  30)												 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  30)												{
HXLINE(  30)													int _g74 = 0;
HXDLIN(  30)													int _g75 = i22;
HXDLIN(  30)													while((_g74 < _g75)){
HXLINE(  30)														_g74 = (_g74 + 1);
HXDLIN(  30)														int i23 = (_g74 - 1);
HXLINE( 345)														prev3 = l3;
HXLINE( 346)														l3 = l3->next;
            													}
            												}
HXLINE(  30)												if (::hx::IsNull( prev3 )) {
HXLINE(  30)													b33->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  30)													l3 = null();
            												}
            												else {
HXLINE(  30)													prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  30)													l3 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  30)							undoImage10 = b33;
            						}
            						break;
            					}
HXDLIN(  30)					this100->image = undoImage10;
HXDLIN(  30)					this100->width = width3;
HXDLIN(  30)					this100->height = height3;
HXDLIN(  30)					this100->imageType = ( (int)(imageType3) );
HXDLIN(  30)					undoImage9 = this100;
HXDLIN(  30)					{
HXLINE(  30)						int rectLeft3 = xIter33->start;
HXDLIN(  30)						int rectTop3 = yIter33->start;
HXDLIN(  30)						int rectRight3 = xIter33->max;
HXDLIN(  30)						bool forceClear3 = false;
HXDLIN(  30)						{
HXLINE(  30)							int _g76 = rectTop3;
HXDLIN(  30)							int _g77 = yIter33->max;
HXDLIN(  30)							while((_g76 < _g77)){
HXLINE(  30)								_g76 = (_g76 + 1);
HXDLIN(  30)								int dy5 = (_g76 - 1);
HXDLIN(  30)								{
HXLINE(  30)									int _g78 = rectLeft3;
HXDLIN(  30)									int _g79 = rectRight3;
HXDLIN(  30)									while((_g78 < _g79)){
HXLINE(  30)										_g78 = (_g78 + 1);
HXDLIN(  30)										int dx5 = (_g78 - 1);
HXDLIN(  30)										::Dynamic this102 = pixelImage->image;
HXDLIN(  30)										int index15;
HXDLIN(  30)										if (pixelImage->useVirtualPos) {
HXLINE(  30)											index15 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx5) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  30)											index15 = ::Std_obj::_hx_int(( (Float)(((dy5 * pixelImage->width) + dx5)) ));
            										}
HXDLIN(  30)										int c18 = ::iterMagic::Iimg_obj::get(this102,index15);
HXDLIN(  30)										int col3;
HXDLIN(  30)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)											col3 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            										}
            										else {
HXLINE(  30)											col3 = c18;
            										}
HXDLIN(  30)										bool hitQuad25;
HXDLIN(  30)										if (pixelImage->useMask) {
HXLINE(  30)											hitQuad25 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  30)											hitQuad25 = false;
            										}
HXDLIN(  30)										if (hitQuad25) {
HXLINE(  30)											 ::pi_xy::ImageStruct this103 = pixelImage->mask;
HXDLIN(  30)											::Dynamic this104 = this103->image;
HXDLIN(  30)											int index16;
HXDLIN(  30)											if (this103->useVirtualPos) {
HXLINE(  30)												index16 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this103->virtualY) * ( (Float)(this103->width) )) + dx5) - this103->virtualX));
            											}
            											else {
HXLINE(  30)												index16 = ::Std_obj::_hx_int(( (Float)(((dy5 * this103->width) + dx5)) ));
            											}
HXDLIN(  30)											int c19 = ::iterMagic::Iimg_obj::get(this104,index16);
HXDLIN(  30)											int v8;
HXDLIN(  30)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)												v8 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            											}
            											else {
HXLINE(  30)												v8 = c19;
            											}
HXDLIN(  30)											int maskPixel3 = v8;
HXDLIN(  30)											int this105 = col3;
HXDLIN(  30)											if ((maskPixel3 == 0)) {
HXLINE(  30)												col3 = this105;
            											}
            											else {
HXLINE(  30)												Float m03;
HXDLIN(  30)												int this106 = ((maskPixel3 >> 24) & 255);
HXDLIN(  30)												if ((this106 == 0)) {
HXLINE(  30)													m03 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													m03 = (( (Float)(this106) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float m13;
HXDLIN(  30)												int this107 = ((maskPixel3 >> 16) & 255);
HXDLIN(  30)												if ((this107 == 0)) {
HXLINE(  30)													m13 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													m13 = (( (Float)(this107) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float m23;
HXDLIN(  30)												int this108 = ((maskPixel3 >> 8) & 255);
HXDLIN(  30)												if ((this108 == 0)) {
HXLINE(  30)													m23 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													m23 = (( (Float)(this108) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float m33;
HXDLIN(  30)												int this109 = (maskPixel3 & 255);
HXDLIN(  30)												if ((this109 == 0)) {
HXLINE(  30)													m33 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													m33 = (( (Float)(this109) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this105 >> 24) & 255)) )));
HXDLIN(  30)												int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this105 >> 16) & 255)) )));
HXDLIN(  30)												int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this105 >> 8) & 255)) )));
HXDLIN(  30)												int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this105 & 255)) )));
HXDLIN(  30)												col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  30)										if ((col3 != 0)) {
HXLINE(  30)											int x13 = (dx5 - rectLeft3);
HXDLIN(  30)											int y13 = (dy5 - rectTop3);
HXDLIN(  30)											int c20 = col3;
HXDLIN(  30)											bool hitQuad26;
HXDLIN(  30)											if ((((c20 >> 24) & 255) < 254)) {
HXLINE(  30)												hitQuad26 = undoImage9->transparent;
            											}
            											else {
HXLINE(  30)												hitQuad26 = false;
            											}
HXDLIN(  30)											if (hitQuad26) {
HXLINE(  30)												int location6;
HXDLIN(  30)												if (undoImage9->useVirtualPos) {
HXLINE(  30)													location6 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x13) - undoImage9->virtualX));
            												}
            												else {
HXLINE(  30)													location6 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage9->width) + x13)) ));
            												}
HXDLIN(  30)												int this110 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN(  30)												int this111;
HXDLIN(  30)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)													this111 = ((((((this110 >> 24) & 255) << 24) | ((this110 & 255) << 16)) | (((this110 >> 8) & 255) << 8)) | ((this110 >> 16) & 255));
            												}
            												else {
HXLINE(  30)													this111 = this110;
            												}
HXDLIN(  30)												Float a111;
HXDLIN(  30)												int this112 = ((this111 >> 24) & 255);
HXDLIN(  30)												if ((this112 == 0)) {
HXLINE(  30)													a111 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													a111 = (( (Float)(this112) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float r16;
HXDLIN(  30)												int this113 = ((this111 >> 16) & 255);
HXDLIN(  30)												if ((this113 == 0)) {
HXLINE(  30)													r16 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													r16 = (( (Float)(this113) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float g16;
HXDLIN(  30)												int this114 = ((this111 >> 8) & 255);
HXDLIN(  30)												if ((this114 == 0)) {
HXLINE(  30)													g16 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													g16 = (( (Float)(this114) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float b112;
HXDLIN(  30)												int this115 = (this111 & 255);
HXDLIN(  30)												if ((this115 == 0)) {
HXLINE(  30)													b112 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													b112 = (( (Float)(this115) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float a29;
HXDLIN(  30)												int this116 = ((col3 >> 24) & 255);
HXDLIN(  30)												if ((this116 == 0)) {
HXLINE(  30)													a29 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													a29 = (( (Float)(this116) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float r26;
HXDLIN(  30)												int this117 = ((col3 >> 16) & 255);
HXDLIN(  30)												if ((this117 == 0)) {
HXLINE(  30)													r26 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													r26 = (( (Float)(this117) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float g26;
HXDLIN(  30)												int this118 = ((col3 >> 8) & 255);
HXDLIN(  30)												if ((this118 == 0)) {
HXLINE(  30)													g26 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													g26 = (( (Float)(this118) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float b210;
HXDLIN(  30)												int this119 = (col3 & 255);
HXDLIN(  30)												if ((this119 == 0)) {
HXLINE(  30)													b210 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													b210 = (( (Float)(this119) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float a36 = (a111 * (( (Float)(1) ) - a29));
HXDLIN(  30)												int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a29))));
HXDLIN(  30)												int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a29))));
HXDLIN(  30)												int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a36) + (b210 * a29))));
HXDLIN(  30)												int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a29)));
HXDLIN(  30)												int blended6 = ((((a30 << 24) | (r8 << 16)) | (g8 << 8)) | b34);
HXDLIN(  30)												{
HXLINE(  30)													int hitQuad27;
HXDLIN(  30)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)														hitQuad27 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            													}
            													else {
HXLINE(  30)														hitQuad27 = blended6;
            													}
HXDLIN(  30)													::iterMagic::Iimg_obj::set(undoImage9->image,location6,hitQuad27);
            												}
            											}
            											else {
HXLINE(  30)												::Dynamic this120 = undoImage9->image;
HXDLIN(  30)												int index17;
HXDLIN(  30)												if (undoImage9->useVirtualPos) {
HXLINE(  30)													index17 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x13) - undoImage9->virtualX));
            												}
            												else {
HXLINE(  30)													index17 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage9->width) + x13)) ));
            												}
HXDLIN(  30)												int hitQuad28;
HXDLIN(  30)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)													hitQuad28 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            												}
            												else {
HXLINE(  30)													hitQuad28 = c20;
            												}
HXDLIN(  30)												::iterMagic::Iimg_obj::set(this120,index17,hitQuad28);
            											}
            										}
            										else {
HXLINE(  30)											if (forceClear3) {
HXLINE(  30)												::Dynamic this121 = undoImage9->image;
HXDLIN(  30)												int x14 = (dx5 - rectLeft3);
HXDLIN(  30)												int y14 = (dy5 - rectTop3);
HXDLIN(  30)												int index18;
HXDLIN(  30)												if (undoImage9->useVirtualPos) {
HXLINE(  30)													index18 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x14) - undoImage9->virtualX));
            												}
            												else {
HXLINE(  30)													index18 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage9->width) + x14)) ));
            												}
HXDLIN(  30)												::iterMagic::Iimg_obj::set(this121,index18,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  30)				bool found3 = false;
HXDLIN(  30)				Float s3 = ((Float)0.);
HXDLIN(  30)				Float t3 = ((Float)0.);
HXDLIN(  30)				Float sxx3 = ((Float)0.);
HXDLIN(  30)				Float txx3 = ((Float)0.);
HXDLIN(  30)				{
HXLINE(  30)					int _g_min6 = xIter33->start;
HXDLIN(  30)					int _g_max6 = xIter33->max;
HXDLIN(  30)					while((_g_min6 < _g_max6)){
HXLINE(  30)						_g_min6 = (_g_min6 + 1);
HXDLIN(  30)						int x15 = (_g_min6 - 1);
HXLINE(  60)						sxx3 = (sx3 * ( (Float)(x15) ));
HXLINE(  61)						txx3 = (tx3 * ( (Float)(x15) ));
HXLINE(  62)						found3 = false;
HXLINE(  30)						{
HXLINE(  30)							int _g_min7 = yIter33->start;
HXDLIN(  30)							int _g_max7 = yIter33->max;
HXDLIN(  30)							while((_g_min7 < _g_max7)){
HXLINE(  30)								_g_min7 = (_g_min7 + 1);
HXDLIN(  30)								int y15 = (_g_min7 - 1);
HXLINE(  64)								s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y15) )));
HXLINE(  65)								t3 = ((t03 + txx3) + (ty3 * ( (Float)(y15) )));
HXLINE(  30)								bool hitQuad29;
HXDLIN(  30)								if (!((s3 <= 0))) {
HXLINE(  30)									hitQuad29 = (t3 <= 0);
            								}
            								else {
HXLINE(  30)									hitQuad29 = true;
            								}
HXDLIN(  30)								if (hitQuad29) {
HXLINE(  30)									if (found3) {
HXLINE(  30)										goto _hx_goto_47;
            									}
            								}
            								else {
HXLINE(  30)									if (((s3 + t3) < A3)) {
HXLINE(  30)										{
HXLINE(  30)											int c21 = color;
HXDLIN(  30)											bool hitQuad30;
HXDLIN(  30)											if ((((c21 >> 24) & 255) < 254)) {
HXLINE(  30)												hitQuad30 = pixelImage->transparent;
            											}
            											else {
HXLINE(  30)												hitQuad30 = false;
            											}
HXDLIN(  30)											if (hitQuad30) {
HXLINE(  30)												int location7;
HXDLIN(  30)												if (pixelImage->useVirtualPos) {
HXLINE(  30)													location7 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x15) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  30)													location7 = ::Std_obj::_hx_int(( (Float)(((y15 * pixelImage->width) + x15)) ));
            												}
HXDLIN(  30)												int this122 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN(  30)												int this123;
HXDLIN(  30)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)													this123 = ((((((this122 >> 24) & 255) << 24) | ((this122 & 255) << 16)) | (((this122 >> 8) & 255) << 8)) | ((this122 >> 16) & 255));
            												}
            												else {
HXLINE(  30)													this123 = this122;
            												}
HXDLIN(  30)												Float a112;
HXDLIN(  30)												int this124 = ((this123 >> 24) & 255);
HXDLIN(  30)												if ((this124 == 0)) {
HXLINE(  30)													a112 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													a112 = (( (Float)(this124) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float r17;
HXDLIN(  30)												int this125 = ((this123 >> 16) & 255);
HXDLIN(  30)												if ((this125 == 0)) {
HXLINE(  30)													r17 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													r17 = (( (Float)(this125) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float g17;
HXDLIN(  30)												int this126 = ((this123 >> 8) & 255);
HXDLIN(  30)												if ((this126 == 0)) {
HXLINE(  30)													g17 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													g17 = (( (Float)(this126) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float b113;
HXDLIN(  30)												int this127 = (this123 & 255);
HXDLIN(  30)												if ((this127 == 0)) {
HXLINE(  30)													b113 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													b113 = (( (Float)(this127) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float a210;
HXDLIN(  30)												int this128 = ((color >> 24) & 255);
HXDLIN(  30)												if ((this128 == 0)) {
HXLINE(  30)													a210 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													a210 = (( (Float)(this128) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float r27;
HXDLIN(  30)												int this129 = ((color >> 16) & 255);
HXDLIN(  30)												if ((this129 == 0)) {
HXLINE(  30)													r27 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													r27 = (( (Float)(this129) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float g27;
HXDLIN(  30)												int this130 = ((color >> 8) & 255);
HXDLIN(  30)												if ((this130 == 0)) {
HXLINE(  30)													g27 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													g27 = (( (Float)(this130) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float b211;
HXDLIN(  30)												int this131 = (color & 255);
HXDLIN(  30)												if ((this131 == 0)) {
HXLINE(  30)													b211 = ((Float)0.);
            												}
            												else {
HXLINE(  30)													b211 = (( (Float)(this131) ) / ( (Float)(255) ));
            												}
HXDLIN(  30)												Float a37 = (a112 * (( (Float)(1) ) - a210));
HXDLIN(  30)												int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a210))));
HXDLIN(  30)												int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a210))));
HXDLIN(  30)												int b35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a37) + (b211 * a210))));
HXDLIN(  30)												int a38 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a210)));
HXDLIN(  30)												int blended7 = ((((a38 << 24) | (r9 << 16)) | (g9 << 8)) | b35);
HXDLIN(  30)												{
HXLINE(  30)													int hitQuad31;
HXDLIN(  30)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)														hitQuad31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            													}
            													else {
HXLINE(  30)														hitQuad31 = blended7;
            													}
HXDLIN(  30)													::iterMagic::Iimg_obj::set(pixelImage->image,location7,hitQuad31);
            												}
            											}
            											else {
HXLINE(  30)												::Dynamic this132 = pixelImage->image;
HXDLIN(  30)												int index19;
HXDLIN(  30)												if (pixelImage->useVirtualPos) {
HXLINE(  30)													index19 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x15) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  30)													index19 = ::Std_obj::_hx_int(( (Float)(((y15 * pixelImage->width) + x15)) ));
            												}
HXDLIN(  30)												int hitQuad32;
HXDLIN(  30)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  30)													hitQuad32 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            												}
            												else {
HXLINE(  30)													hitQuad32 = c21;
            												}
HXDLIN(  30)												::iterMagic::Iimg_obj::set(this132,index19,hitQuad32);
            											}
            										}
HXLINE(  73)										found3 = true;
            									}
            									else {
HXLINE(  30)										if (found3) {
HXLINE(  30)											goto _hx_goto_47;
            										}
            									}
            								}
            							}
            							_hx_goto_47:;
            						}
            					}
            				}
HXDLIN(  30)				 ::pi_xy::iter::IntIterStart v_yIter33;
HXDLIN(  30)				 ::pi_xy::iter::IntIterStart v_xIter33;
HXDLIN(  30)				int v_undoY3;
HXDLIN(  30)				int v_undoX3;
HXDLIN(  30)				Float v_ty3;
HXDLIN(  30)				Float v_tx3;
HXDLIN(  30)				Float v_t03;
HXDLIN(  30)				Float v_sy3;
HXDLIN(  30)				Float v_sx3;
HXDLIN(  30)				Float v_s03;
HXDLIN(  30)				Float v_A3;
HXDLIN(  30)				Float ax5 = bx5;
HXDLIN(  30)				Float ay5 = by5;
HXDLIN(  30)				 ::pi_xy::ImageStruct v_undoImage3 = null();
HXDLIN(  30)				Float bx9 = bx8;
HXDLIN(  30)				Float by9 = by8;
HXDLIN(  30)				Float cx9 = cx8;
HXDLIN(  30)				Float cy9 = cy8;
HXDLIN(  30)				bool adjustWinding7 = (((((ax5 * by9) - (bx9 * ay5)) + ((bx9 * cy9) - (cx9 * by9))) + ((cx9 * ay5) - (ax5 * cy9))) > 0);
HXDLIN(  30)				if (!(adjustWinding7)) {
HXLINE(  30)					Float bx_7 = bx9;
HXDLIN(  30)					Float by_7 = by9;
HXLINE(  24)					bx9 = cx9;
HXLINE(  25)					by9 = cy9;
HXLINE(  26)					cx9 = bx_7;
HXLINE(  27)					cy9 = by_7;
            				}
HXLINE(  30)				Float v_ax3 = ax5;
HXDLIN(  30)				Float v_ay3 = ay5;
HXDLIN(  30)				Float v_bx3 = bx9;
HXDLIN(  30)				Float v_by3 = by9;
HXDLIN(  30)				Float v_cx3 = cx9;
HXDLIN(  30)				Float v_cy3 = cy9;
HXDLIN(  30)				bool v_preCalculated3 = true;
HXDLIN(  30)				{
HXLINE(  30)					v_s03 = ((v_ay3 * v_cx3) - (v_ax3 * v_cy3));
HXDLIN(  30)					v_sx3 = (v_cy3 - v_ay3);
HXDLIN(  30)					v_sy3 = (v_ax3 - v_cx3);
HXDLIN(  30)					v_t03 = ((v_ax3 * v_by3) - (v_ay3 * v_bx3));
HXDLIN(  30)					v_tx3 = (v_ay3 - v_by3);
HXDLIN(  30)					v_ty3 = (v_bx3 - v_ax3);
HXDLIN(  30)					v_A3 = ((((-(v_by3) * v_cx3) + (v_ay3 * (-(v_bx3) + v_cx3))) + (v_ax3 * (v_by3 - v_cy3))) + (v_bx3 * v_cy3));
HXDLIN(  30)					Float a39 = v_ax3;
HXDLIN(  30)					Float b36 = v_bx3;
HXDLIN(  30)					Float c22 = v_cx3;
HXDLIN(  30)					if ((a39 > b36)) {
HXLINE(  30)						if ((a39 > c22)) {
HXLINE(  30)							int min28;
HXDLIN(  30)							if ((b36 > c22)) {
HXLINE(  30)								min28 = ::Math_obj::floor(c22);
            							}
            							else {
HXLINE(  30)								min28 = ::Math_obj::floor(b36);
            							}
HXDLIN(  30)							int ii_min56 = min28;
HXDLIN(  30)							int ii_max56 = ::Math_obj::ceil(a39);
HXDLIN(  30)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            						}
            						else {
HXLINE(  30)							int ii_min57 = ::Math_obj::floor(b36);
HXDLIN(  30)							int ii_max57 = ::Math_obj::ceil(c22);
HXDLIN(  30)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            						}
            					}
            					else {
HXLINE(  30)						if ((b36 > c22)) {
HXLINE(  30)							int min29;
HXDLIN(  30)							if ((a39 > c22)) {
HXLINE(  30)								min29 = ::Math_obj::floor(c22);
            							}
            							else {
HXLINE(  30)								min29 = ::Math_obj::ceil(a39);
            							}
HXDLIN(  30)							int ii_min58 = min29;
HXDLIN(  30)							int ii_max58 = ::Math_obj::ceil(b36);
HXDLIN(  30)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            						}
            						else {
HXLINE(  30)							int ii_min59 = ::Math_obj::floor(a39);
HXDLIN(  30)							int ii_max59 = ::Math_obj::ceil(c22);
HXDLIN(  30)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            						}
            					}
HXDLIN(  30)					Float a40 = v_ay3;
HXDLIN(  30)					Float b37 = v_by3;
HXDLIN(  30)					Float c23 = v_cy3;
HXDLIN(  30)					if ((a40 > b37)) {
HXLINE(  30)						if ((a40 > c23)) {
HXLINE(  30)							int min30;
HXDLIN(  30)							if ((b37 > c23)) {
HXLINE(  30)								min30 = ::Math_obj::floor(c23);
            							}
            							else {
HXLINE(  30)								min30 = ::Math_obj::floor(b37);
            							}
HXDLIN(  30)							int ii_min60 = min30;
HXDLIN(  30)							int ii_max60 = ::Math_obj::ceil(a40);
HXDLIN(  30)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            						}
            						else {
HXLINE(  30)							int ii_min61 = ::Math_obj::floor(b37);
HXDLIN(  30)							int ii_max61 = ::Math_obj::ceil(c23);
HXDLIN(  30)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            						}
            					}
            					else {
HXLINE(  30)						if ((b37 > c23)) {
HXLINE(  30)							int min31;
HXDLIN(  30)							if ((a40 > c23)) {
HXLINE(  30)								min31 = ::Math_obj::floor(c23);
            							}
            							else {
HXLINE(  30)								min31 = ::Math_obj::ceil(a40);
            							}
HXDLIN(  30)							int ii_min62 = min31;
HXDLIN(  30)							int ii_max62 = ::Math_obj::ceil(b37);
HXDLIN(  30)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            						}
            						else {
HXLINE(  30)							int ii_min63 = ::Math_obj::floor(a40);
HXDLIN(  30)							int ii_max63 = ::Math_obj::ceil(c23);
HXDLIN(  30)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            						}
            					}
            				}
HXDLIN(  30)				if (hasUndo3) {
HXLINE(  30)					v_undoImage3 = undoImage9;
HXDLIN(  30)					v_undoX3 = xIter33->start;
HXDLIN(  30)					v_undoY3 = yIter33->start;
            				}
HXDLIN(  30)				 ::pi_xy::algo::HitQuad v9 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax3,ay3,bx5,by5,cx5,cy5,dx3,dy3,true);
HXLINE(  26)				hitQuad = v9;
            			}
            		}
            		else {
HXLINE(  33)			Float sin3 = ::Math_obj::sin(theta);
HXDLIN(  33)			Float cos3 = ::Math_obj::cos(theta);
HXDLIN(  33)			Float radius3 = (thick / ( (Float)(2) ));
HXDLIN(  33)			Float dx6 = ((Float)0.1);
HXDLIN(  33)			Float dy6 = radius3;
HXDLIN(  33)			Float cx10 = h2;
HXDLIN(  33)			Float cy10 = radius3;
HXDLIN(  33)			Float bx10 = h2;
HXDLIN(  33)			Float by10 = -(radius3);
HXDLIN(  33)			Float ax6 = ((Float)0.1);
HXDLIN(  33)			Float ay6 = -(radius3);
HXDLIN(  33)			Float temp2 = ((Float)0.);
HXLINE(  28)			temp2 = (px + ((ax6 * cos3) - (ay6 * sin3)));
HXLINE(  29)			ay6 = (py + ((ay6 * cos3) + (ax6 * sin3)));
HXLINE(  30)			ax6 = temp2;
HXLINE(  32)			temp2 = (px + ((bx10 * cos3) - (by10 * sin3)));
HXLINE(  33)			by10 = (py + ((by10 * cos3) + (bx10 * sin3)));
HXLINE(  34)			bx10 = temp2;
HXLINE(  36)			temp2 = (px + ((cx10 * cos3) - (cy10 * sin3)));
HXLINE(  37)			cy10 = (py + ((cy10 * cos3) + (cx10 * sin3)));
HXLINE(  38)			cx10 = temp2;
HXLINE(  40)			temp2 = (px + ((dx6 * cos3) - (dy6 * sin3)));
HXLINE(  41)			dy6 = (py + ((dy6 * cos3) + (dx6 * sin3)));
HXLINE(  42)			dx6 = temp2;
HXLINE(  33)			Float bx11 = bx10;
HXDLIN(  33)			Float by11 = by10;
HXDLIN(  33)			Float cx11 = dx6;
HXDLIN(  33)			Float cy11 = dy6;
HXDLIN(  33)			bool hasUndo4 = false;
HXDLIN(  33)			bool adjustWinding8 = (((((ax6 * by11) - (bx11 * ay6)) + ((bx11 * cy11) - (cx11 * by11))) + ((cx11 * ay6) - (ax6 * cy11))) > 0);
HXDLIN(  33)			if (!(adjustWinding8)) {
HXLINE(  33)				Float bx_8 = bx11;
HXDLIN(  33)				Float by_8 = by11;
HXLINE(  25)				bx11 = cx11;
HXLINE(  26)				by11 = cy11;
HXLINE(  27)				cx11 = bx_8;
HXLINE(  28)				cy11 = by_8;
            			}
HXLINE(  33)			Float s04 = ((ay6 * cx11) - (ax6 * cy11));
HXDLIN(  33)			Float sx4 = (cy11 - ay6);
HXDLIN(  33)			Float sy4 = (ax6 - cx11);
HXDLIN(  33)			Float t04 = ((ax6 * by11) - (ay6 * bx11));
HXDLIN(  33)			Float tx4 = (ay6 - by11);
HXDLIN(  33)			Float ty4 = (bx11 - ax6);
HXDLIN(  33)			Float A4 = ((((-(by11) * cx11) + (ay6 * (-(bx11) + cx11))) + (ax6 * (by11 - cy11))) + (bx11 * cy11));
HXDLIN(  33)			 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN(  33)			if ((ax6 > bx11)) {
HXLINE(  33)				if ((ax6 > cx11)) {
HXLINE(  33)					int min32;
HXDLIN(  33)					if ((bx11 > cx11)) {
HXLINE(  33)						min32 = ::Math_obj::floor(cx11);
            					}
            					else {
HXLINE(  33)						min32 = ::Math_obj::floor(bx11);
            					}
HXDLIN(  33)					int ii_min64 = min32;
HXDLIN(  33)					int ii_max64 = ::Math_obj::ceil(ax6);
HXDLIN(  33)					xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min64,ii_max64);
            				}
            				else {
HXLINE(  33)					int ii_min65 = ::Math_obj::floor(bx11);
HXDLIN(  33)					int ii_max65 = ::Math_obj::ceil(cx11);
HXDLIN(  33)					xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min65,ii_max65);
            				}
            			}
            			else {
HXLINE(  33)				if ((bx11 > cx11)) {
HXLINE(  33)					int min33;
HXDLIN(  33)					if ((ax6 > cx11)) {
HXLINE(  33)						min33 = ::Math_obj::floor(cx11);
            					}
            					else {
HXLINE(  33)						min33 = ::Math_obj::ceil(ax6);
            					}
HXDLIN(  33)					int ii_min66 = min33;
HXDLIN(  33)					int ii_max66 = ::Math_obj::ceil(bx11);
HXDLIN(  33)					xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min66,ii_max66);
            				}
            				else {
HXLINE(  33)					int ii_min67 = ::Math_obj::floor(ax6);
HXDLIN(  33)					int ii_max67 = ::Math_obj::ceil(cx11);
HXDLIN(  33)					xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min67,ii_max67);
            				}
            			}
HXDLIN(  33)			 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN(  33)			if ((ay6 > by11)) {
HXLINE(  33)				if ((ay6 > cy11)) {
HXLINE(  33)					int min34;
HXDLIN(  33)					if ((by11 > cy11)) {
HXLINE(  33)						min34 = ::Math_obj::floor(cy11);
            					}
            					else {
HXLINE(  33)						min34 = ::Math_obj::floor(by11);
            					}
HXDLIN(  33)					int ii_min68 = min34;
HXDLIN(  33)					int ii_max68 = ::Math_obj::ceil(ay6);
HXDLIN(  33)					yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min68,ii_max68);
            				}
            				else {
HXLINE(  33)					int ii_min69 = ::Math_obj::floor(by11);
HXDLIN(  33)					int ii_max69 = ::Math_obj::ceil(cy11);
HXDLIN(  33)					yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min69,ii_max69);
            				}
            			}
            			else {
HXLINE(  33)				if ((by11 > cy11)) {
HXLINE(  33)					int min35;
HXDLIN(  33)					if ((ay6 > cy11)) {
HXLINE(  33)						min35 = ::Math_obj::floor(cy11);
            					}
            					else {
HXLINE(  33)						min35 = ::Math_obj::ceil(ay6);
            					}
HXDLIN(  33)					int ii_min70 = min35;
HXDLIN(  33)					int ii_max70 = ::Math_obj::ceil(by11);
HXDLIN(  33)					yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min70,ii_max70);
            				}
            				else {
HXLINE(  33)					int ii_min71 = ::Math_obj::floor(ay6);
HXDLIN(  33)					int ii_max71 = ::Math_obj::ceil(cy11);
HXDLIN(  33)					yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min71,ii_max71);
            				}
            			}
HXDLIN(  33)			 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN(  33)			if (hasUndo4) {
HXLINE(  33)				int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN(  33)				int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN(  33)				 ::Dynamic imageType4 = null();
HXDLIN(  33)				 ::pi_xy::ImageStruct this133 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  33)				if (::hx::IsNull( imageType4 )) {
HXLINE(  54)					imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  33)				::Dynamic undoImage13;
HXDLIN(  33)				switch((int)(( (int)(imageType4) ))){
            					case (int)0: {
HXLINE(  33)						 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  33)						 ::iterMagic::BytesImg b38 = byt4;
HXDLIN(  33)						{
HXLINE(  33)							b38->width = width4;
HXDLIN(  33)							b38->height = height4;
HXDLIN(  33)							b38->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  33)							b38->data = ::haxe::io::Bytes_obj::alloc((b38->length * 4));
HXDLIN(  33)							{
HXLINE(  33)								int len8 = b38->length;
HXDLIN(  33)								int w4 = 0;
HXDLIN(  33)								{
HXLINE(  33)									int _g80 = 0;
HXDLIN(  33)									int _g81 = b38->height;
HXDLIN(  33)									while((_g80 < _g81)){
HXLINE(  33)										_g80 = (_g80 + 1);
HXDLIN(  33)										int y16 = (_g80 - 1);
HXDLIN(  33)										{
HXLINE(  33)											int _g82 = 0;
HXDLIN(  33)											int _g83 = b38->width;
HXDLIN(  33)											while((_g82 < _g83)){
HXLINE(  33)												_g82 = (_g82 + 1);
HXDLIN(  33)												int x16 = (_g82 - 1);
HXDLIN(  33)												{
HXLINE(  33)													w4 = (w4 + 1);
HXDLIN(  33)													b38->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  33)												{
HXLINE(  33)													w4 = (w4 + 1);
HXDLIN(  33)													b38->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  33)												{
HXLINE(  33)													w4 = (w4 + 1);
HXDLIN(  33)													b38->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  33)												{
HXLINE(  33)													w4 = (w4 + 1);
HXDLIN(  33)													b38->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  33)						undoImage13 = b38;
            					}
            					break;
            					case (int)1: {
HXLINE(  33)						 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)						 ::iterMagic::ArrIntImg a41 = arrI4;
HXDLIN(  33)						{
HXLINE(  33)							a41->width = width4;
HXDLIN(  33)							a41->height = height4;
HXDLIN(  33)							a41->data = ::Array_obj< int >::__new(0);
HXDLIN(  33)							a41->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  33)							{
HXLINE(  33)								int _g84 = 0;
HXDLIN(  33)								int _g85 = a41->length;
HXDLIN(  33)								while((_g84 < _g85)){
HXLINE(  33)									_g84 = (_g84 + 1);
HXDLIN(  33)									int i24 = (_g84 - 1);
HXDLIN(  33)									a41->data[i24] = 0;
            								}
            							}
            						}
HXDLIN(  33)						undoImage13 = a41;
            					}
            					break;
            					case (int)2: {
HXLINE(  33)						 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  33)						 ::iterMagic::U32ArrImg b39 = u32a4;
HXDLIN(  33)						{
HXLINE(  33)							b39->width = width4;
HXDLIN(  33)							b39->height = height4;
HXDLIN(  33)							b39->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  33)							int size4 = (b39->length * 4);
HXDLIN(  33)							b39->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN(  33)							{
HXLINE(  33)								int _g86 = 0;
HXDLIN(  33)								int _g87 = b39->length;
HXDLIN(  33)								while((_g86 < _g87)){
HXLINE(  33)									_g86 = (_g86 + 1);
HXDLIN(  33)									int i25 = (_g86 - 1);
HXDLIN(  33)									{
HXLINE(  33)										 ::haxe::io::ArrayBufferViewImpl this134 = b39->data;
HXDLIN(  33)										bool undoImage14;
HXDLIN(  33)										if ((i25 >= 0)) {
HXLINE(  33)											undoImage14 = (i25 < (this134->byteLength >> 2));
            										}
            										else {
HXLINE(  33)											undoImage14 = false;
            										}
HXDLIN(  33)										if (undoImage14) {
HXLINE(  33)											 ::haxe::io::Bytes _this4 = this134->bytes;
HXDLIN(  33)											int pos4 = ((i25 << 2) + this134->byteOffset);
HXDLIN(  33)											_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN(  33)											_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN(  33)											_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN(  33)											_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  33)						undoImage13 = b39;
            					}
            					break;
            					case (int)3: {
HXLINE(  33)						 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)						 ::iterMagic::VecIntImg v10 = vec4;
HXDLIN(  33)						{
HXLINE(  33)							v10->width = width4;
HXDLIN(  33)							v10->height = height4;
HXDLIN(  33)							v10->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  33)							v10->data = ::Array_obj< int >::__new(v10->length);
HXDLIN(  33)							{
HXLINE(  33)								int _g88 = 0;
HXDLIN(  33)								int _g89 = v10->length;
HXDLIN(  33)								while((_g88 < _g89)){
HXLINE(  33)									_g88 = (_g88 + 1);
HXDLIN(  33)									int i26 = (_g88 - 1);
HXDLIN(  33)									v10->data->__unsafe_set(i26,0);
            								}
            							}
            						}
HXDLIN(  33)						undoImage13 = v10;
            					}
            					break;
            					case (int)4: {
HXLINE(  33)						 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)						 ::iterMagic::StackIntImg b40 = sInt4;
HXDLIN(  33)						{
HXLINE(  33)							b40->width = width4;
HXDLIN(  33)							b40->height = height4;
HXDLIN(  33)							b40->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  33)							b40->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  33)							{
HXLINE(  33)								int len9 = b40->length;
HXDLIN(  33)								 ::haxe::ds::GenericStack_Int d4 = b40->data;
HXDLIN(  33)								if (::hx::IsNull( d4->head )) {
HXLINE(  33)									int _g90 = 0;
HXDLIN(  33)									int _g91 = len9;
HXDLIN(  33)									while((_g90 < _g91)){
HXLINE(  33)										_g90 = (_g90 + 1);
HXDLIN(  33)										int i27 = (_g90 - 1);
HXDLIN(  33)										d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            									}
            								}
            								else {
HXLINE(  33)									int _g92 = 0;
HXDLIN(  33)									int _g93 = len9;
HXDLIN(  33)									while((_g92 < _g93)){
HXLINE(  33)										_g92 = (_g92 + 1);
HXDLIN(  33)										int i28 = (_g92 - 1);
HXDLIN(  33)										{
HXLINE(  33)											 ::haxe::ds::GenericCell_Int l4 = b40->data->head;
HXDLIN(  33)											 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN(  33)											{
HXLINE(  33)												int _g94 = 0;
HXDLIN(  33)												int _g95 = i28;
HXDLIN(  33)												while((_g94 < _g95)){
HXLINE(  33)													_g94 = (_g94 + 1);
HXDLIN(  33)													int i29 = (_g94 - 1);
HXLINE( 345)													prev4 = l4;
HXLINE( 346)													l4 = l4->next;
            												}
            											}
HXLINE(  33)											if (::hx::IsNull( prev4 )) {
HXLINE(  33)												b40->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  33)												l4 = null();
            											}
            											else {
HXLINE(  33)												prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  33)												l4 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  33)						undoImage13 = b40;
            					}
            					break;
            				}
HXDLIN(  33)				this133->image = undoImage13;
HXDLIN(  33)				this133->width = width4;
HXDLIN(  33)				this133->height = height4;
HXDLIN(  33)				this133->imageType = ( (int)(imageType4) );
HXDLIN(  33)				undoImage12 = this133;
HXDLIN(  33)				{
HXLINE(  33)					int rectLeft4 = xIter34->start;
HXDLIN(  33)					int rectTop4 = yIter34->start;
HXDLIN(  33)					int rectRight4 = xIter34->max;
HXDLIN(  33)					bool forceClear4 = false;
HXDLIN(  33)					{
HXLINE(  33)						int _g96 = rectTop4;
HXDLIN(  33)						int _g97 = yIter34->max;
HXDLIN(  33)						while((_g96 < _g97)){
HXLINE(  33)							_g96 = (_g96 + 1);
HXDLIN(  33)							int dy7 = (_g96 - 1);
HXDLIN(  33)							{
HXLINE(  33)								int _g98 = rectLeft4;
HXDLIN(  33)								int _g99 = rectRight4;
HXDLIN(  33)								while((_g98 < _g99)){
HXLINE(  33)									_g98 = (_g98 + 1);
HXDLIN(  33)									int dx7 = (_g98 - 1);
HXDLIN(  33)									::Dynamic this135 = pixelImage->image;
HXDLIN(  33)									int index20;
HXDLIN(  33)									if (pixelImage->useVirtualPos) {
HXLINE(  33)										index20 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx7) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  33)										index20 = ::Std_obj::_hx_int(( (Float)(((dy7 * pixelImage->width) + dx7)) ));
            									}
HXDLIN(  33)									int c24 = ::iterMagic::Iimg_obj::get(this135,index20);
HXDLIN(  33)									int col4;
HXDLIN(  33)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)										col4 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            									}
            									else {
HXLINE(  33)										col4 = c24;
            									}
HXDLIN(  33)									bool hitQuad33;
HXDLIN(  33)									if (pixelImage->useMask) {
HXLINE(  33)										hitQuad33 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE(  33)										hitQuad33 = false;
            									}
HXDLIN(  33)									if (hitQuad33) {
HXLINE(  33)										 ::pi_xy::ImageStruct this136 = pixelImage->mask;
HXDLIN(  33)										::Dynamic this137 = this136->image;
HXDLIN(  33)										int index21;
HXDLIN(  33)										if (this136->useVirtualPos) {
HXLINE(  33)											index21 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this136->virtualY) * ( (Float)(this136->width) )) + dx7) - this136->virtualX));
            										}
            										else {
HXLINE(  33)											index21 = ::Std_obj::_hx_int(( (Float)(((dy7 * this136->width) + dx7)) ));
            										}
HXDLIN(  33)										int c25 = ::iterMagic::Iimg_obj::get(this137,index21);
HXDLIN(  33)										int v11;
HXDLIN(  33)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)											v11 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            										}
            										else {
HXLINE(  33)											v11 = c25;
            										}
HXDLIN(  33)										int maskPixel4 = v11;
HXDLIN(  33)										int this138 = col4;
HXDLIN(  33)										if ((maskPixel4 == 0)) {
HXLINE(  33)											col4 = this138;
            										}
            										else {
HXLINE(  33)											Float m04;
HXDLIN(  33)											int this139 = ((maskPixel4 >> 24) & 255);
HXDLIN(  33)											if ((this139 == 0)) {
HXLINE(  33)												m04 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												m04 = (( (Float)(this139) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float m14;
HXDLIN(  33)											int this140 = ((maskPixel4 >> 16) & 255);
HXDLIN(  33)											if ((this140 == 0)) {
HXLINE(  33)												m14 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												m14 = (( (Float)(this140) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float m24;
HXDLIN(  33)											int this141 = ((maskPixel4 >> 8) & 255);
HXDLIN(  33)											if ((this141 == 0)) {
HXLINE(  33)												m24 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												m24 = (( (Float)(this141) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float m34;
HXDLIN(  33)											int this142 = (maskPixel4 & 255);
HXDLIN(  33)											if ((this142 == 0)) {
HXLINE(  33)												m34 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												m34 = (( (Float)(this142) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this138 >> 24) & 255)) )));
HXDLIN(  33)											int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this138 >> 16) & 255)) )));
HXDLIN(  33)											int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this138 >> 8) & 255)) )));
HXDLIN(  33)											int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this138 & 255)) )));
HXDLIN(  33)											col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  33)									if ((col4 != 0)) {
HXLINE(  33)										int x17 = (dx7 - rectLeft4);
HXDLIN(  33)										int y17 = (dy7 - rectTop4);
HXDLIN(  33)										int c26 = col4;
HXDLIN(  33)										bool hitQuad34;
HXDLIN(  33)										if ((((c26 >> 24) & 255) < 254)) {
HXLINE(  33)											hitQuad34 = undoImage12->transparent;
            										}
            										else {
HXLINE(  33)											hitQuad34 = false;
            										}
HXDLIN(  33)										if (hitQuad34) {
HXLINE(  33)											int location8;
HXDLIN(  33)											if (undoImage12->useVirtualPos) {
HXLINE(  33)												location8 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x17) - undoImage12->virtualX));
            											}
            											else {
HXLINE(  33)												location8 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage12->width) + x17)) ));
            											}
HXDLIN(  33)											int this143 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN(  33)											int this144;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												this144 = ((((((this143 >> 24) & 255) << 24) | ((this143 & 255) << 16)) | (((this143 >> 8) & 255) << 8)) | ((this143 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												this144 = this143;
            											}
HXDLIN(  33)											Float a113;
HXDLIN(  33)											int this145 = ((this144 >> 24) & 255);
HXDLIN(  33)											if ((this145 == 0)) {
HXLINE(  33)												a113 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a113 = (( (Float)(this145) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r18;
HXDLIN(  33)											int this146 = ((this144 >> 16) & 255);
HXDLIN(  33)											if ((this146 == 0)) {
HXLINE(  33)												r18 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r18 = (( (Float)(this146) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g18;
HXDLIN(  33)											int this147 = ((this144 >> 8) & 255);
HXDLIN(  33)											if ((this147 == 0)) {
HXLINE(  33)												g18 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g18 = (( (Float)(this147) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b114;
HXDLIN(  33)											int this148 = (this144 & 255);
HXDLIN(  33)											if ((this148 == 0)) {
HXLINE(  33)												b114 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b114 = (( (Float)(this148) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a211;
HXDLIN(  33)											int this149 = ((col4 >> 24) & 255);
HXDLIN(  33)											if ((this149 == 0)) {
HXLINE(  33)												a211 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a211 = (( (Float)(this149) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r28;
HXDLIN(  33)											int this150 = ((col4 >> 16) & 255);
HXDLIN(  33)											if ((this150 == 0)) {
HXLINE(  33)												r28 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r28 = (( (Float)(this150) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g28;
HXDLIN(  33)											int this151 = ((col4 >> 8) & 255);
HXDLIN(  33)											if ((this151 == 0)) {
HXLINE(  33)												g28 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g28 = (( (Float)(this151) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b212;
HXDLIN(  33)											int this152 = (col4 & 255);
HXDLIN(  33)											if ((this152 == 0)) {
HXLINE(  33)												b212 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b212 = (( (Float)(this152) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN(  33)											int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a310) + (r28 * a211))));
HXDLIN(  33)											int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a310) + (g28 * a211))));
HXDLIN(  33)											int b41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b212 * a211))));
HXDLIN(  33)											int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN(  33)											int blended8 = ((((a42 << 24) | (r10 << 16)) | (g10 << 8)) | b41);
HXDLIN(  33)											{
HXLINE(  33)												int hitQuad35;
HXDLIN(  33)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)													hitQuad35 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            												}
            												else {
HXLINE(  33)													hitQuad35 = blended8;
            												}
HXDLIN(  33)												::iterMagic::Iimg_obj::set(undoImage12->image,location8,hitQuad35);
            											}
            										}
            										else {
HXLINE(  33)											::Dynamic this153 = undoImage12->image;
HXDLIN(  33)											int index22;
HXDLIN(  33)											if (undoImage12->useVirtualPos) {
HXLINE(  33)												index22 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x17) - undoImage12->virtualX));
            											}
            											else {
HXLINE(  33)												index22 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage12->width) + x17)) ));
            											}
HXDLIN(  33)											int hitQuad36;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												hitQuad36 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												hitQuad36 = c26;
            											}
HXDLIN(  33)											::iterMagic::Iimg_obj::set(this153,index22,hitQuad36);
            										}
            									}
            									else {
HXLINE(  33)										if (forceClear4) {
HXLINE(  33)											::Dynamic this154 = undoImage12->image;
HXDLIN(  33)											int x18 = (dx7 - rectLeft4);
HXDLIN(  33)											int y18 = (dy7 - rectTop4);
HXDLIN(  33)											int index23;
HXDLIN(  33)											if (undoImage12->useVirtualPos) {
HXLINE(  33)												index23 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x18) - undoImage12->virtualX));
            											}
            											else {
HXLINE(  33)												index23 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage12->width) + x18)) ));
            											}
HXDLIN(  33)											::iterMagic::Iimg_obj::set(this154,index23,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  33)			bool found4 = false;
HXDLIN(  33)			Float s4 = ((Float)0.);
HXDLIN(  33)			Float t4 = ((Float)0.);
HXDLIN(  33)			Float sxx4 = ((Float)0.);
HXDLIN(  33)			Float txx4 = ((Float)0.);
HXDLIN(  33)			{
HXLINE(  33)				int _g_min8 = xIter34->start;
HXDLIN(  33)				int _g_max8 = xIter34->max;
HXDLIN(  33)				while((_g_min8 < _g_max8)){
HXLINE(  33)					_g_min8 = (_g_min8 + 1);
HXDLIN(  33)					int x19 = (_g_min8 - 1);
HXLINE(  60)					sxx4 = (sx4 * ( (Float)(x19) ));
HXLINE(  61)					txx4 = (tx4 * ( (Float)(x19) ));
HXLINE(  62)					found4 = false;
HXLINE(  33)					{
HXLINE(  33)						int _g_min9 = yIter34->start;
HXDLIN(  33)						int _g_max9 = yIter34->max;
HXDLIN(  33)						while((_g_min9 < _g_max9)){
HXLINE(  33)							_g_min9 = (_g_min9 + 1);
HXDLIN(  33)							int y19 = (_g_min9 - 1);
HXLINE(  64)							s4 = ((s04 + sxx4) + (sy4 * ( (Float)(y19) )));
HXLINE(  65)							t4 = ((t04 + txx4) + (ty4 * ( (Float)(y19) )));
HXLINE(  33)							bool hitQuad37;
HXDLIN(  33)							if (!((s4 <= 0))) {
HXLINE(  33)								hitQuad37 = (t4 <= 0);
            							}
            							else {
HXLINE(  33)								hitQuad37 = true;
            							}
HXDLIN(  33)							if (hitQuad37) {
HXLINE(  33)								if (found4) {
HXLINE(  33)									goto _hx_goto_59;
            								}
            							}
            							else {
HXLINE(  33)								if (((s4 + t4) < A4)) {
HXLINE(  33)									{
HXLINE(  33)										int c27 = color;
HXDLIN(  33)										bool hitQuad38;
HXDLIN(  33)										if ((((c27 >> 24) & 255) < 254)) {
HXLINE(  33)											hitQuad38 = pixelImage->transparent;
            										}
            										else {
HXLINE(  33)											hitQuad38 = false;
            										}
HXDLIN(  33)										if (hitQuad38) {
HXLINE(  33)											int location9;
HXDLIN(  33)											if (pixelImage->useVirtualPos) {
HXLINE(  33)												location9 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x19) - pixelImage->virtualX));
            											}
            											else {
HXLINE(  33)												location9 = ::Std_obj::_hx_int(( (Float)(((y19 * pixelImage->width) + x19)) ));
            											}
HXDLIN(  33)											int this155 = ::iterMagic::Iimg_obj::get(pixelImage->image,location9);
HXDLIN(  33)											int this156;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												this156 = ((((((this155 >> 24) & 255) << 24) | ((this155 & 255) << 16)) | (((this155 >> 8) & 255) << 8)) | ((this155 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												this156 = this155;
            											}
HXDLIN(  33)											Float a114;
HXDLIN(  33)											int this157 = ((this156 >> 24) & 255);
HXDLIN(  33)											if ((this157 == 0)) {
HXLINE(  33)												a114 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a114 = (( (Float)(this157) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r19;
HXDLIN(  33)											int this158 = ((this156 >> 16) & 255);
HXDLIN(  33)											if ((this158 == 0)) {
HXLINE(  33)												r19 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r19 = (( (Float)(this158) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g19;
HXDLIN(  33)											int this159 = ((this156 >> 8) & 255);
HXDLIN(  33)											if ((this159 == 0)) {
HXLINE(  33)												g19 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g19 = (( (Float)(this159) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b115;
HXDLIN(  33)											int this160 = (this156 & 255);
HXDLIN(  33)											if ((this160 == 0)) {
HXLINE(  33)												b115 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b115 = (( (Float)(this160) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a212;
HXDLIN(  33)											int this161 = ((color >> 24) & 255);
HXDLIN(  33)											if ((this161 == 0)) {
HXLINE(  33)												a212 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a212 = (( (Float)(this161) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r29;
HXDLIN(  33)											int this162 = ((color >> 16) & 255);
HXDLIN(  33)											if ((this162 == 0)) {
HXLINE(  33)												r29 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r29 = (( (Float)(this162) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g29;
HXDLIN(  33)											int this163 = ((color >> 8) & 255);
HXDLIN(  33)											if ((this163 == 0)) {
HXLINE(  33)												g29 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g29 = (( (Float)(this163) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b213;
HXDLIN(  33)											int this164 = (color & 255);
HXDLIN(  33)											if ((this164 == 0)) {
HXLINE(  33)												b213 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b213 = (( (Float)(this164) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN(  33)											int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a311) + (r29 * a212))));
HXDLIN(  33)											int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a311) + (g29 * a212))));
HXDLIN(  33)											int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b213 * a212))));
HXDLIN(  33)											int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN(  33)											int blended9 = ((((a43 << 24) | (r20 << 16)) | (g20 << 8)) | b42);
HXDLIN(  33)											{
HXLINE(  33)												int hitQuad39;
HXDLIN(  33)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)													hitQuad39 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            												}
            												else {
HXLINE(  33)													hitQuad39 = blended9;
            												}
HXDLIN(  33)												::iterMagic::Iimg_obj::set(pixelImage->image,location9,hitQuad39);
            											}
            										}
            										else {
HXLINE(  33)											::Dynamic this165 = pixelImage->image;
HXDLIN(  33)											int index24;
HXDLIN(  33)											if (pixelImage->useVirtualPos) {
HXLINE(  33)												index24 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x19) - pixelImage->virtualX));
            											}
            											else {
HXLINE(  33)												index24 = ::Std_obj::_hx_int(( (Float)(((y19 * pixelImage->width) + x19)) ));
            											}
HXDLIN(  33)											int hitQuad40;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												hitQuad40 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												hitQuad40 = c27;
            											}
HXDLIN(  33)											::iterMagic::Iimg_obj::set(this165,index24,hitQuad40);
            										}
            									}
HXLINE(  73)									found4 = true;
            								}
            								else {
HXLINE(  33)									if (found4) {
HXLINE(  33)										goto _hx_goto_59;
            									}
            								}
            							}
            						}
            						_hx_goto_59:;
            					}
            				}
            			}
HXDLIN(  33)			 ::pi_xy::iter::IntIterStart v_yIter34;
HXDLIN(  33)			 ::pi_xy::iter::IntIterStart v_xIter34;
HXDLIN(  33)			int v_undoY4;
HXDLIN(  33)			int v_undoX4;
HXDLIN(  33)			Float v_ty4;
HXDLIN(  33)			Float v_tx4;
HXDLIN(  33)			Float v_t04;
HXDLIN(  33)			Float v_sy4;
HXDLIN(  33)			Float v_sx4;
HXDLIN(  33)			Float v_s04;
HXDLIN(  33)			Float v_A4;
HXDLIN(  33)			Float ax7 = ax6;
HXDLIN(  33)			Float ay7 = ay6;
HXDLIN(  33)			 ::pi_xy::ImageStruct v_undoImage4 = null();
HXDLIN(  33)			Float bx12 = bx11;
HXDLIN(  33)			Float by12 = by11;
HXDLIN(  33)			Float cx12 = cx11;
HXDLIN(  33)			Float cy12 = cy11;
HXDLIN(  33)			bool adjustWinding9 = (((((ax7 * by12) - (bx12 * ay7)) + ((bx12 * cy12) - (cx12 * by12))) + ((cx12 * ay7) - (ax7 * cy12))) > 0);
HXDLIN(  33)			if (!(adjustWinding9)) {
HXLINE(  33)				Float bx_9 = bx12;
HXDLIN(  33)				Float by_9 = by12;
HXLINE(  24)				bx12 = cx12;
HXLINE(  25)				by12 = cy12;
HXLINE(  26)				cx12 = bx_9;
HXLINE(  27)				cy12 = by_9;
            			}
HXLINE(  33)			Float v_ax4 = ax7;
HXDLIN(  33)			Float v_ay4 = ay7;
HXDLIN(  33)			Float v_bx4 = bx12;
HXDLIN(  33)			Float v_by4 = by12;
HXDLIN(  33)			Float v_cx4 = cx12;
HXDLIN(  33)			Float v_cy4 = cy12;
HXDLIN(  33)			bool v_preCalculated4 = true;
HXDLIN(  33)			{
HXLINE(  33)				v_s04 = ((v_ay4 * v_cx4) - (v_ax4 * v_cy4));
HXDLIN(  33)				v_sx4 = (v_cy4 - v_ay4);
HXDLIN(  33)				v_sy4 = (v_ax4 - v_cx4);
HXDLIN(  33)				v_t04 = ((v_ax4 * v_by4) - (v_ay4 * v_bx4));
HXDLIN(  33)				v_tx4 = (v_ay4 - v_by4);
HXDLIN(  33)				v_ty4 = (v_bx4 - v_ax4);
HXDLIN(  33)				v_A4 = ((((-(v_by4) * v_cx4) + (v_ay4 * (-(v_bx4) + v_cx4))) + (v_ax4 * (v_by4 - v_cy4))) + (v_bx4 * v_cy4));
HXDLIN(  33)				Float a44 = v_ax4;
HXDLIN(  33)				Float b43 = v_bx4;
HXDLIN(  33)				Float c28 = v_cx4;
HXDLIN(  33)				if ((a44 > b43)) {
HXLINE(  33)					if ((a44 > c28)) {
HXLINE(  33)						int min36;
HXDLIN(  33)						if ((b43 > c28)) {
HXLINE(  33)							min36 = ::Math_obj::floor(c28);
            						}
            						else {
HXLINE(  33)							min36 = ::Math_obj::floor(b43);
            						}
HXDLIN(  33)						int ii_min72 = min36;
HXDLIN(  33)						int ii_max72 = ::Math_obj::ceil(a44);
HXDLIN(  33)						v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min72,ii_max72);
            					}
            					else {
HXLINE(  33)						int ii_min73 = ::Math_obj::floor(b43);
HXDLIN(  33)						int ii_max73 = ::Math_obj::ceil(c28);
HXDLIN(  33)						v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min73,ii_max73);
            					}
            				}
            				else {
HXLINE(  33)					if ((b43 > c28)) {
HXLINE(  33)						int min37;
HXDLIN(  33)						if ((a44 > c28)) {
HXLINE(  33)							min37 = ::Math_obj::floor(c28);
            						}
            						else {
HXLINE(  33)							min37 = ::Math_obj::ceil(a44);
            						}
HXDLIN(  33)						int ii_min74 = min37;
HXDLIN(  33)						int ii_max74 = ::Math_obj::ceil(b43);
HXDLIN(  33)						v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min74,ii_max74);
            					}
            					else {
HXLINE(  33)						int ii_min75 = ::Math_obj::floor(a44);
HXDLIN(  33)						int ii_max75 = ::Math_obj::ceil(c28);
HXDLIN(  33)						v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min75,ii_max75);
            					}
            				}
HXDLIN(  33)				Float a45 = v_ay4;
HXDLIN(  33)				Float b44 = v_by4;
HXDLIN(  33)				Float c29 = v_cy4;
HXDLIN(  33)				if ((a45 > b44)) {
HXLINE(  33)					if ((a45 > c29)) {
HXLINE(  33)						int min38;
HXDLIN(  33)						if ((b44 > c29)) {
HXLINE(  33)							min38 = ::Math_obj::floor(c29);
            						}
            						else {
HXLINE(  33)							min38 = ::Math_obj::floor(b44);
            						}
HXDLIN(  33)						int ii_min76 = min38;
HXDLIN(  33)						int ii_max76 = ::Math_obj::ceil(a45);
HXDLIN(  33)						v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min76,ii_max76);
            					}
            					else {
HXLINE(  33)						int ii_min77 = ::Math_obj::floor(b44);
HXDLIN(  33)						int ii_max77 = ::Math_obj::ceil(c29);
HXDLIN(  33)						v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min77,ii_max77);
            					}
            				}
            				else {
HXLINE(  33)					if ((b44 > c29)) {
HXLINE(  33)						int min39;
HXDLIN(  33)						if ((a45 > c29)) {
HXLINE(  33)							min39 = ::Math_obj::floor(c29);
            						}
            						else {
HXLINE(  33)							min39 = ::Math_obj::ceil(a45);
            						}
HXDLIN(  33)						int ii_min78 = min39;
HXDLIN(  33)						int ii_max78 = ::Math_obj::ceil(b44);
HXDLIN(  33)						v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min78,ii_max78);
            					}
            					else {
HXLINE(  33)						int ii_min79 = ::Math_obj::floor(a45);
HXDLIN(  33)						int ii_max79 = ::Math_obj::ceil(c29);
HXDLIN(  33)						v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min79,ii_max79);
            					}
            				}
            			}
HXDLIN(  33)			if (hasUndo4) {
HXLINE(  33)				v_undoImage4 = undoImage12;
HXDLIN(  33)				v_undoX4 = xIter34->start;
HXDLIN(  33)				v_undoY4 = yIter34->start;
            			}
HXDLIN(  33)			Float bx13 = cx10;
HXDLIN(  33)			Float by13 = cy10;
HXDLIN(  33)			Float cx13 = dx6;
HXDLIN(  33)			Float cy13 = dy6;
HXDLIN(  33)			bool hasUndo5 = false;
HXDLIN(  33)			bool adjustWinding10 = (((((bx10 * by13) - (bx13 * by10)) + ((bx13 * cy13) - (cx13 * by13))) + ((cx13 * by10) - (bx10 * cy13))) > 0);
HXDLIN(  33)			if (!(adjustWinding10)) {
HXLINE(  33)				Float bx_10 = bx13;
HXDLIN(  33)				Float by_10 = by13;
HXLINE(  25)				bx13 = cx13;
HXLINE(  26)				by13 = cy13;
HXLINE(  27)				cx13 = bx_10;
HXLINE(  28)				cy13 = by_10;
            			}
HXLINE(  33)			Float s05 = ((by10 * cx13) - (bx10 * cy13));
HXDLIN(  33)			Float sx5 = (cy13 - by10);
HXDLIN(  33)			Float sy5 = (bx10 - cx13);
HXDLIN(  33)			Float t05 = ((bx10 * by13) - (by10 * bx13));
HXDLIN(  33)			Float tx5 = (by10 - by13);
HXDLIN(  33)			Float ty5 = (bx13 - bx10);
HXDLIN(  33)			Float A5 = ((((-(by13) * cx13) + (by10 * (-(bx13) + cx13))) + (bx10 * (by13 - cy13))) + (bx13 * cy13));
HXDLIN(  33)			 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN(  33)			if ((bx10 > bx13)) {
HXLINE(  33)				if ((bx10 > cx13)) {
HXLINE(  33)					int min40;
HXDLIN(  33)					if ((bx13 > cx13)) {
HXLINE(  33)						min40 = ::Math_obj::floor(cx13);
            					}
            					else {
HXLINE(  33)						min40 = ::Math_obj::floor(bx13);
            					}
HXDLIN(  33)					int ii_min80 = min40;
HXDLIN(  33)					int ii_max80 = ::Math_obj::ceil(bx10);
HXDLIN(  33)					xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min80,ii_max80);
            				}
            				else {
HXLINE(  33)					int ii_min81 = ::Math_obj::floor(bx13);
HXDLIN(  33)					int ii_max81 = ::Math_obj::ceil(cx13);
HXDLIN(  33)					xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min81,ii_max81);
            				}
            			}
            			else {
HXLINE(  33)				if ((bx13 > cx13)) {
HXLINE(  33)					int min41;
HXDLIN(  33)					if ((bx10 > cx13)) {
HXLINE(  33)						min41 = ::Math_obj::floor(cx13);
            					}
            					else {
HXLINE(  33)						min41 = ::Math_obj::ceil(bx10);
            					}
HXDLIN(  33)					int ii_min82 = min41;
HXDLIN(  33)					int ii_max82 = ::Math_obj::ceil(bx13);
HXDLIN(  33)					xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min82,ii_max82);
            				}
            				else {
HXLINE(  33)					int ii_min83 = ::Math_obj::floor(bx10);
HXDLIN(  33)					int ii_max83 = ::Math_obj::ceil(cx13);
HXDLIN(  33)					xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min83,ii_max83);
            				}
            			}
HXDLIN(  33)			 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN(  33)			if ((by10 > by13)) {
HXLINE(  33)				if ((by10 > cy13)) {
HXLINE(  33)					int min42;
HXDLIN(  33)					if ((by13 > cy13)) {
HXLINE(  33)						min42 = ::Math_obj::floor(cy13);
            					}
            					else {
HXLINE(  33)						min42 = ::Math_obj::floor(by13);
            					}
HXDLIN(  33)					int ii_min84 = min42;
HXDLIN(  33)					int ii_max84 = ::Math_obj::ceil(by10);
HXDLIN(  33)					yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min84,ii_max84);
            				}
            				else {
HXLINE(  33)					int ii_min85 = ::Math_obj::floor(by13);
HXDLIN(  33)					int ii_max85 = ::Math_obj::ceil(cy13);
HXDLIN(  33)					yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min85,ii_max85);
            				}
            			}
            			else {
HXLINE(  33)				if ((by13 > cy13)) {
HXLINE(  33)					int min43;
HXDLIN(  33)					if ((by10 > cy13)) {
HXLINE(  33)						min43 = ::Math_obj::floor(cy13);
            					}
            					else {
HXLINE(  33)						min43 = ::Math_obj::ceil(by10);
            					}
HXDLIN(  33)					int ii_min86 = min43;
HXDLIN(  33)					int ii_max86 = ::Math_obj::ceil(by13);
HXDLIN(  33)					yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min86,ii_max86);
            				}
            				else {
HXLINE(  33)					int ii_min87 = ::Math_obj::floor(by10);
HXDLIN(  33)					int ii_max87 = ::Math_obj::ceil(cy13);
HXDLIN(  33)					yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min87,ii_max87);
            				}
            			}
HXDLIN(  33)			 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN(  33)			if (hasUndo5) {
HXLINE(  33)				int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN(  33)				int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN(  33)				 ::Dynamic imageType5 = null();
HXDLIN(  33)				 ::pi_xy::ImageStruct this166 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  33)				if (::hx::IsNull( imageType5 )) {
HXLINE(  54)					imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE(  33)				::Dynamic undoImage16;
HXDLIN(  33)				switch((int)(( (int)(imageType5) ))){
            					case (int)0: {
HXLINE(  33)						 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  33)						 ::iterMagic::BytesImg b45 = byt5;
HXDLIN(  33)						{
HXLINE(  33)							b45->width = width5;
HXDLIN(  33)							b45->height = height5;
HXDLIN(  33)							b45->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  33)							b45->data = ::haxe::io::Bytes_obj::alloc((b45->length * 4));
HXDLIN(  33)							{
HXLINE(  33)								int len10 = b45->length;
HXDLIN(  33)								int w5 = 0;
HXDLIN(  33)								{
HXLINE(  33)									int _g100 = 0;
HXDLIN(  33)									int _g101 = b45->height;
HXDLIN(  33)									while((_g100 < _g101)){
HXLINE(  33)										_g100 = (_g100 + 1);
HXDLIN(  33)										int y20 = (_g100 - 1);
HXDLIN(  33)										{
HXLINE(  33)											int _g102 = 0;
HXDLIN(  33)											int _g103 = b45->width;
HXDLIN(  33)											while((_g102 < _g103)){
HXLINE(  33)												_g102 = (_g102 + 1);
HXDLIN(  33)												int x20 = (_g102 - 1);
HXDLIN(  33)												{
HXLINE(  33)													w5 = (w5 + 1);
HXDLIN(  33)													b45->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  33)												{
HXLINE(  33)													w5 = (w5 + 1);
HXDLIN(  33)													b45->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  33)												{
HXLINE(  33)													w5 = (w5 + 1);
HXDLIN(  33)													b45->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN(  33)												{
HXLINE(  33)													w5 = (w5 + 1);
HXDLIN(  33)													b45->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  33)						undoImage16 = b45;
            					}
            					break;
            					case (int)1: {
HXLINE(  33)						 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)						 ::iterMagic::ArrIntImg a46 = arrI5;
HXDLIN(  33)						{
HXLINE(  33)							a46->width = width5;
HXDLIN(  33)							a46->height = height5;
HXDLIN(  33)							a46->data = ::Array_obj< int >::__new(0);
HXDLIN(  33)							a46->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  33)							{
HXLINE(  33)								int _g104 = 0;
HXDLIN(  33)								int _g105 = a46->length;
HXDLIN(  33)								while((_g104 < _g105)){
HXLINE(  33)									_g104 = (_g104 + 1);
HXDLIN(  33)									int i30 = (_g104 - 1);
HXDLIN(  33)									a46->data[i30] = 0;
            								}
            							}
            						}
HXDLIN(  33)						undoImage16 = a46;
            					}
            					break;
            					case (int)2: {
HXLINE(  33)						 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  33)						 ::iterMagic::U32ArrImg b46 = u32a5;
HXDLIN(  33)						{
HXLINE(  33)							b46->width = width5;
HXDLIN(  33)							b46->height = height5;
HXDLIN(  33)							b46->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  33)							int size5 = (b46->length * 4);
HXDLIN(  33)							b46->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN(  33)							{
HXLINE(  33)								int _g106 = 0;
HXDLIN(  33)								int _g107 = b46->length;
HXDLIN(  33)								while((_g106 < _g107)){
HXLINE(  33)									_g106 = (_g106 + 1);
HXDLIN(  33)									int i31 = (_g106 - 1);
HXDLIN(  33)									{
HXLINE(  33)										 ::haxe::io::ArrayBufferViewImpl this167 = b46->data;
HXDLIN(  33)										bool undoImage17;
HXDLIN(  33)										if ((i31 >= 0)) {
HXLINE(  33)											undoImage17 = (i31 < (this167->byteLength >> 2));
            										}
            										else {
HXLINE(  33)											undoImage17 = false;
            										}
HXDLIN(  33)										if (undoImage17) {
HXLINE(  33)											 ::haxe::io::Bytes _this5 = this167->bytes;
HXDLIN(  33)											int pos5 = ((i31 << 2) + this167->byteOffset);
HXDLIN(  33)											_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN(  33)											_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN(  33)											_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN(  33)											_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN(  33)						undoImage16 = b46;
            					}
            					break;
            					case (int)3: {
HXLINE(  33)						 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)						 ::iterMagic::VecIntImg v12 = vec5;
HXDLIN(  33)						{
HXLINE(  33)							v12->width = width5;
HXDLIN(  33)							v12->height = height5;
HXDLIN(  33)							v12->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  33)							v12->data = ::Array_obj< int >::__new(v12->length);
HXDLIN(  33)							{
HXLINE(  33)								int _g108 = 0;
HXDLIN(  33)								int _g109 = v12->length;
HXDLIN(  33)								while((_g108 < _g109)){
HXLINE(  33)									_g108 = (_g108 + 1);
HXDLIN(  33)									int i32 = (_g108 - 1);
HXDLIN(  33)									v12->data->__unsafe_set(i32,0);
            								}
            							}
            						}
HXDLIN(  33)						undoImage16 = v12;
            					}
            					break;
            					case (int)4: {
HXLINE(  33)						 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  33)						 ::iterMagic::StackIntImg b47 = sInt5;
HXDLIN(  33)						{
HXLINE(  33)							b47->width = width5;
HXDLIN(  33)							b47->height = height5;
HXDLIN(  33)							b47->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  33)							b47->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  33)							{
HXLINE(  33)								int len11 = b47->length;
HXDLIN(  33)								 ::haxe::ds::GenericStack_Int d5 = b47->data;
HXDLIN(  33)								if (::hx::IsNull( d5->head )) {
HXLINE(  33)									int _g110 = 0;
HXDLIN(  33)									int _g111 = len11;
HXDLIN(  33)									while((_g110 < _g111)){
HXLINE(  33)										_g110 = (_g110 + 1);
HXDLIN(  33)										int i33 = (_g110 - 1);
HXDLIN(  33)										d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            									}
            								}
            								else {
HXLINE(  33)									int _g112 = 0;
HXDLIN(  33)									int _g113 = len11;
HXDLIN(  33)									while((_g112 < _g113)){
HXLINE(  33)										_g112 = (_g112 + 1);
HXDLIN(  33)										int i34 = (_g112 - 1);
HXDLIN(  33)										{
HXLINE(  33)											 ::haxe::ds::GenericCell_Int l5 = b47->data->head;
HXDLIN(  33)											 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN(  33)											{
HXLINE(  33)												int _g114 = 0;
HXDLIN(  33)												int _g115 = i34;
HXDLIN(  33)												while((_g114 < _g115)){
HXLINE(  33)													_g114 = (_g114 + 1);
HXDLIN(  33)													int i35 = (_g114 - 1);
HXLINE( 345)													prev5 = l5;
HXLINE( 346)													l5 = l5->next;
            												}
            											}
HXLINE(  33)											if (::hx::IsNull( prev5 )) {
HXLINE(  33)												b47->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  33)												l5 = null();
            											}
            											else {
HXLINE(  33)												prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  33)												l5 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  33)						undoImage16 = b47;
            					}
            					break;
            				}
HXDLIN(  33)				this166->image = undoImage16;
HXDLIN(  33)				this166->width = width5;
HXDLIN(  33)				this166->height = height5;
HXDLIN(  33)				this166->imageType = ( (int)(imageType5) );
HXDLIN(  33)				undoImage15 = this166;
HXDLIN(  33)				{
HXLINE(  33)					int rectLeft5 = xIter35->start;
HXDLIN(  33)					int rectTop5 = yIter35->start;
HXDLIN(  33)					int rectRight5 = xIter35->max;
HXDLIN(  33)					bool forceClear5 = false;
HXDLIN(  33)					{
HXLINE(  33)						int _g116 = rectTop5;
HXDLIN(  33)						int _g117 = yIter35->max;
HXDLIN(  33)						while((_g116 < _g117)){
HXLINE(  33)							_g116 = (_g116 + 1);
HXDLIN(  33)							int dy8 = (_g116 - 1);
HXDLIN(  33)							{
HXLINE(  33)								int _g118 = rectLeft5;
HXDLIN(  33)								int _g119 = rectRight5;
HXDLIN(  33)								while((_g118 < _g119)){
HXLINE(  33)									_g118 = (_g118 + 1);
HXDLIN(  33)									int dx8 = (_g118 - 1);
HXDLIN(  33)									::Dynamic this168 = pixelImage->image;
HXDLIN(  33)									int index25;
HXDLIN(  33)									if (pixelImage->useVirtualPos) {
HXLINE(  33)										index25 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx8) - pixelImage->virtualX));
            									}
            									else {
HXLINE(  33)										index25 = ::Std_obj::_hx_int(( (Float)(((dy8 * pixelImage->width) + dx8)) ));
            									}
HXDLIN(  33)									int c30 = ::iterMagic::Iimg_obj::get(this168,index25);
HXDLIN(  33)									int col5;
HXDLIN(  33)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)										col5 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            									}
            									else {
HXLINE(  33)										col5 = c30;
            									}
HXDLIN(  33)									bool hitQuad41;
HXDLIN(  33)									if (pixelImage->useMask) {
HXLINE(  33)										hitQuad41 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE(  33)										hitQuad41 = false;
            									}
HXDLIN(  33)									if (hitQuad41) {
HXLINE(  33)										 ::pi_xy::ImageStruct this169 = pixelImage->mask;
HXDLIN(  33)										::Dynamic this170 = this169->image;
HXDLIN(  33)										int index26;
HXDLIN(  33)										if (this169->useVirtualPos) {
HXLINE(  33)											index26 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this169->virtualY) * ( (Float)(this169->width) )) + dx8) - this169->virtualX));
            										}
            										else {
HXLINE(  33)											index26 = ::Std_obj::_hx_int(( (Float)(((dy8 * this169->width) + dx8)) ));
            										}
HXDLIN(  33)										int c31 = ::iterMagic::Iimg_obj::get(this170,index26);
HXDLIN(  33)										int v13;
HXDLIN(  33)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)											v13 = ((((((c31 >> 24) & 255) << 24) | ((c31 & 255) << 16)) | (((c31 >> 8) & 255) << 8)) | ((c31 >> 16) & 255));
            										}
            										else {
HXLINE(  33)											v13 = c31;
            										}
HXDLIN(  33)										int maskPixel5 = v13;
HXDLIN(  33)										int this171 = col5;
HXDLIN(  33)										if ((maskPixel5 == 0)) {
HXLINE(  33)											col5 = this171;
            										}
            										else {
HXLINE(  33)											Float m05;
HXDLIN(  33)											int this172 = ((maskPixel5 >> 24) & 255);
HXDLIN(  33)											if ((this172 == 0)) {
HXLINE(  33)												m05 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												m05 = (( (Float)(this172) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float m15;
HXDLIN(  33)											int this173 = ((maskPixel5 >> 16) & 255);
HXDLIN(  33)											if ((this173 == 0)) {
HXLINE(  33)												m15 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												m15 = (( (Float)(this173) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float m25;
HXDLIN(  33)											int this174 = ((maskPixel5 >> 8) & 255);
HXDLIN(  33)											if ((this174 == 0)) {
HXLINE(  33)												m25 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												m25 = (( (Float)(this174) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float m35;
HXDLIN(  33)											int this175 = (maskPixel5 & 255);
HXDLIN(  33)											if ((this175 == 0)) {
HXLINE(  33)												m35 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												m35 = (( (Float)(this175) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this171 >> 24) & 255)) )));
HXDLIN(  33)											int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this171 >> 16) & 255)) )));
HXDLIN(  33)											int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this171 >> 8) & 255)) )));
HXDLIN(  33)											int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this171 & 255)) )));
HXDLIN(  33)											col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  33)									if ((col5 != 0)) {
HXLINE(  33)										int x21 = (dx8 - rectLeft5);
HXDLIN(  33)										int y21 = (dy8 - rectTop5);
HXDLIN(  33)										int c32 = col5;
HXDLIN(  33)										bool hitQuad42;
HXDLIN(  33)										if ((((c32 >> 24) & 255) < 254)) {
HXLINE(  33)											hitQuad42 = undoImage15->transparent;
            										}
            										else {
HXLINE(  33)											hitQuad42 = false;
            										}
HXDLIN(  33)										if (hitQuad42) {
HXLINE(  33)											int location10;
HXDLIN(  33)											if (undoImage15->useVirtualPos) {
HXLINE(  33)												location10 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x21) - undoImage15->virtualX));
            											}
            											else {
HXLINE(  33)												location10 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage15->width) + x21)) ));
            											}
HXDLIN(  33)											int this176 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN(  33)											int this177;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												this177 = ((((((this176 >> 24) & 255) << 24) | ((this176 & 255) << 16)) | (((this176 >> 8) & 255) << 8)) | ((this176 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												this177 = this176;
            											}
HXDLIN(  33)											Float a115;
HXDLIN(  33)											int this178 = ((this177 >> 24) & 255);
HXDLIN(  33)											if ((this178 == 0)) {
HXLINE(  33)												a115 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a115 = (( (Float)(this178) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r110;
HXDLIN(  33)											int this179 = ((this177 >> 16) & 255);
HXDLIN(  33)											if ((this179 == 0)) {
HXLINE(  33)												r110 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r110 = (( (Float)(this179) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g110;
HXDLIN(  33)											int this180 = ((this177 >> 8) & 255);
HXDLIN(  33)											if ((this180 == 0)) {
HXLINE(  33)												g110 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g110 = (( (Float)(this180) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b116;
HXDLIN(  33)											int this181 = (this177 & 255);
HXDLIN(  33)											if ((this181 == 0)) {
HXLINE(  33)												b116 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b116 = (( (Float)(this181) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a213;
HXDLIN(  33)											int this182 = ((col5 >> 24) & 255);
HXDLIN(  33)											if ((this182 == 0)) {
HXLINE(  33)												a213 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a213 = (( (Float)(this182) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r210;
HXDLIN(  33)											int this183 = ((col5 >> 16) & 255);
HXDLIN(  33)											if ((this183 == 0)) {
HXLINE(  33)												r210 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r210 = (( (Float)(this183) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g210;
HXDLIN(  33)											int this184 = ((col5 >> 8) & 255);
HXDLIN(  33)											if ((this184 == 0)) {
HXLINE(  33)												g210 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g210 = (( (Float)(this184) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b214;
HXDLIN(  33)											int this185 = (col5 & 255);
HXDLIN(  33)											if ((this185 == 0)) {
HXLINE(  33)												b214 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b214 = (( (Float)(this185) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN(  33)											int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a312) + (r210 * a213))));
HXDLIN(  33)											int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a312) + (g210 * a213))));
HXDLIN(  33)											int b48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b214 * a213))));
HXDLIN(  33)											int a47 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN(  33)											int blended10 = ((((a47 << 24) | (r30 << 16)) | (g30 << 8)) | b48);
HXDLIN(  33)											{
HXLINE(  33)												int hitQuad43;
HXDLIN(  33)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)													hitQuad43 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            												}
            												else {
HXLINE(  33)													hitQuad43 = blended10;
            												}
HXDLIN(  33)												::iterMagic::Iimg_obj::set(undoImage15->image,location10,hitQuad43);
            											}
            										}
            										else {
HXLINE(  33)											::Dynamic this186 = undoImage15->image;
HXDLIN(  33)											int index27;
HXDLIN(  33)											if (undoImage15->useVirtualPos) {
HXLINE(  33)												index27 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x21) - undoImage15->virtualX));
            											}
            											else {
HXLINE(  33)												index27 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage15->width) + x21)) ));
            											}
HXDLIN(  33)											int hitQuad44;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												hitQuad44 = ((((((c32 >> 24) & 255) << 24) | ((c32 & 255) << 16)) | (((c32 >> 8) & 255) << 8)) | ((c32 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												hitQuad44 = c32;
            											}
HXDLIN(  33)											::iterMagic::Iimg_obj::set(this186,index27,hitQuad44);
            										}
            									}
            									else {
HXLINE(  33)										if (forceClear5) {
HXLINE(  33)											::Dynamic this187 = undoImage15->image;
HXDLIN(  33)											int x22 = (dx8 - rectLeft5);
HXDLIN(  33)											int y22 = (dy8 - rectTop5);
HXDLIN(  33)											int index28;
HXDLIN(  33)											if (undoImage15->useVirtualPos) {
HXLINE(  33)												index28 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x22) - undoImage15->virtualX));
            											}
            											else {
HXLINE(  33)												index28 = ::Std_obj::_hx_int(( (Float)(((y22 * undoImage15->width) + x22)) ));
            											}
HXDLIN(  33)											::iterMagic::Iimg_obj::set(this187,index28,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  33)			bool found5 = false;
HXDLIN(  33)			Float s5 = ((Float)0.);
HXDLIN(  33)			Float t5 = ((Float)0.);
HXDLIN(  33)			Float sxx5 = ((Float)0.);
HXDLIN(  33)			Float txx5 = ((Float)0.);
HXDLIN(  33)			{
HXLINE(  33)				int _g_min10 = xIter35->start;
HXDLIN(  33)				int _g_max10 = xIter35->max;
HXDLIN(  33)				while((_g_min10 < _g_max10)){
HXLINE(  33)					_g_min10 = (_g_min10 + 1);
HXDLIN(  33)					int x23 = (_g_min10 - 1);
HXLINE(  60)					sxx5 = (sx5 * ( (Float)(x23) ));
HXLINE(  61)					txx5 = (tx5 * ( (Float)(x23) ));
HXLINE(  62)					found5 = false;
HXLINE(  33)					{
HXLINE(  33)						int _g_min11 = yIter35->start;
HXDLIN(  33)						int _g_max11 = yIter35->max;
HXDLIN(  33)						while((_g_min11 < _g_max11)){
HXLINE(  33)							_g_min11 = (_g_min11 + 1);
HXDLIN(  33)							int y23 = (_g_min11 - 1);
HXLINE(  64)							s5 = ((s05 + sxx5) + (sy5 * ( (Float)(y23) )));
HXLINE(  65)							t5 = ((t05 + txx5) + (ty5 * ( (Float)(y23) )));
HXLINE(  33)							bool hitQuad45;
HXDLIN(  33)							if (!((s5 <= 0))) {
HXLINE(  33)								hitQuad45 = (t5 <= 0);
            							}
            							else {
HXLINE(  33)								hitQuad45 = true;
            							}
HXDLIN(  33)							if (hitQuad45) {
HXLINE(  33)								if (found5) {
HXLINE(  33)									goto _hx_goto_71;
            								}
            							}
            							else {
HXLINE(  33)								if (((s5 + t5) < A5)) {
HXLINE(  33)									{
HXLINE(  33)										int c33 = color;
HXDLIN(  33)										bool hitQuad46;
HXDLIN(  33)										if ((((c33 >> 24) & 255) < 254)) {
HXLINE(  33)											hitQuad46 = pixelImage->transparent;
            										}
            										else {
HXLINE(  33)											hitQuad46 = false;
            										}
HXDLIN(  33)										if (hitQuad46) {
HXLINE(  33)											int location11;
HXDLIN(  33)											if (pixelImage->useVirtualPos) {
HXLINE(  33)												location11 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x23) - pixelImage->virtualX));
            											}
            											else {
HXLINE(  33)												location11 = ::Std_obj::_hx_int(( (Float)(((y23 * pixelImage->width) + x23)) ));
            											}
HXDLIN(  33)											int this188 = ::iterMagic::Iimg_obj::get(pixelImage->image,location11);
HXDLIN(  33)											int this189;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												this189 = ((((((this188 >> 24) & 255) << 24) | ((this188 & 255) << 16)) | (((this188 >> 8) & 255) << 8)) | ((this188 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												this189 = this188;
            											}
HXDLIN(  33)											Float a116;
HXDLIN(  33)											int this190 = ((this189 >> 24) & 255);
HXDLIN(  33)											if ((this190 == 0)) {
HXLINE(  33)												a116 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a116 = (( (Float)(this190) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r111;
HXDLIN(  33)											int this191 = ((this189 >> 16) & 255);
HXDLIN(  33)											if ((this191 == 0)) {
HXLINE(  33)												r111 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r111 = (( (Float)(this191) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g111;
HXDLIN(  33)											int this192 = ((this189 >> 8) & 255);
HXDLIN(  33)											if ((this192 == 0)) {
HXLINE(  33)												g111 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g111 = (( (Float)(this192) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b117;
HXDLIN(  33)											int this193 = (this189 & 255);
HXDLIN(  33)											if ((this193 == 0)) {
HXLINE(  33)												b117 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b117 = (( (Float)(this193) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a214;
HXDLIN(  33)											int this194 = ((color >> 24) & 255);
HXDLIN(  33)											if ((this194 == 0)) {
HXLINE(  33)												a214 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												a214 = (( (Float)(this194) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float r211;
HXDLIN(  33)											int this195 = ((color >> 16) & 255);
HXDLIN(  33)											if ((this195 == 0)) {
HXLINE(  33)												r211 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												r211 = (( (Float)(this195) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float g211;
HXDLIN(  33)											int this196 = ((color >> 8) & 255);
HXDLIN(  33)											if ((this196 == 0)) {
HXLINE(  33)												g211 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												g211 = (( (Float)(this196) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float b215;
HXDLIN(  33)											int this197 = (color & 255);
HXDLIN(  33)											if ((this197 == 0)) {
HXLINE(  33)												b215 = ((Float)0.);
            											}
            											else {
HXLINE(  33)												b215 = (( (Float)(this197) ) / ( (Float)(255) ));
            											}
HXDLIN(  33)											Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN(  33)											int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a313) + (r211 * a214))));
HXDLIN(  33)											int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a313) + (g211 * a214))));
HXDLIN(  33)											int b49 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b215 * a214))));
HXDLIN(  33)											int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN(  33)											int blended11 = ((((a48 << 24) | (r31 << 16)) | (g31 << 8)) | b49);
HXDLIN(  33)											{
HXLINE(  33)												int hitQuad47;
HXDLIN(  33)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)													hitQuad47 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            												}
            												else {
HXLINE(  33)													hitQuad47 = blended11;
            												}
HXDLIN(  33)												::iterMagic::Iimg_obj::set(pixelImage->image,location11,hitQuad47);
            											}
            										}
            										else {
HXLINE(  33)											::Dynamic this198 = pixelImage->image;
HXDLIN(  33)											int index29;
HXDLIN(  33)											if (pixelImage->useVirtualPos) {
HXLINE(  33)												index29 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x23) - pixelImage->virtualX));
            											}
            											else {
HXLINE(  33)												index29 = ::Std_obj::_hx_int(( (Float)(((y23 * pixelImage->width) + x23)) ));
            											}
HXDLIN(  33)											int hitQuad48;
HXDLIN(  33)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  33)												hitQuad48 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            											}
            											else {
HXLINE(  33)												hitQuad48 = c33;
            											}
HXDLIN(  33)											::iterMagic::Iimg_obj::set(this198,index29,hitQuad48);
            										}
            									}
HXLINE(  73)									found5 = true;
            								}
            								else {
HXLINE(  33)									if (found5) {
HXLINE(  33)										goto _hx_goto_71;
            									}
            								}
            							}
            						}
            						_hx_goto_71:;
            					}
            				}
            			}
HXDLIN(  33)			 ::pi_xy::iter::IntIterStart v_yIter35;
HXDLIN(  33)			 ::pi_xy::iter::IntIterStart v_xIter35;
HXDLIN(  33)			int v_undoY5;
HXDLIN(  33)			int v_undoX5;
HXDLIN(  33)			Float v_ty5;
HXDLIN(  33)			Float v_tx5;
HXDLIN(  33)			Float v_t05;
HXDLIN(  33)			Float v_sy5;
HXDLIN(  33)			Float v_sx5;
HXDLIN(  33)			Float v_s05;
HXDLIN(  33)			Float v_A5;
HXDLIN(  33)			Float ax8 = bx10;
HXDLIN(  33)			Float ay8 = by10;
HXDLIN(  33)			 ::pi_xy::ImageStruct v_undoImage5 = null();
HXDLIN(  33)			Float bx14 = bx13;
HXDLIN(  33)			Float by14 = by13;
HXDLIN(  33)			Float cx14 = cx13;
HXDLIN(  33)			Float cy14 = cy13;
HXDLIN(  33)			bool adjustWinding11 = (((((ax8 * by14) - (bx14 * ay8)) + ((bx14 * cy14) - (cx14 * by14))) + ((cx14 * ay8) - (ax8 * cy14))) > 0);
HXDLIN(  33)			if (!(adjustWinding11)) {
HXLINE(  33)				Float bx_11 = bx14;
HXDLIN(  33)				Float by_11 = by14;
HXLINE(  24)				bx14 = cx14;
HXLINE(  25)				by14 = cy14;
HXLINE(  26)				cx14 = bx_11;
HXLINE(  27)				cy14 = by_11;
            			}
HXLINE(  33)			Float v_ax5 = ax8;
HXDLIN(  33)			Float v_ay5 = ay8;
HXDLIN(  33)			Float v_bx5 = bx14;
HXDLIN(  33)			Float v_by5 = by14;
HXDLIN(  33)			Float v_cx5 = cx14;
HXDLIN(  33)			Float v_cy5 = cy14;
HXDLIN(  33)			bool v_preCalculated5 = true;
HXDLIN(  33)			{
HXLINE(  33)				v_s05 = ((v_ay5 * v_cx5) - (v_ax5 * v_cy5));
HXDLIN(  33)				v_sx5 = (v_cy5 - v_ay5);
HXDLIN(  33)				v_sy5 = (v_ax5 - v_cx5);
HXDLIN(  33)				v_t05 = ((v_ax5 * v_by5) - (v_ay5 * v_bx5));
HXDLIN(  33)				v_tx5 = (v_ay5 - v_by5);
HXDLIN(  33)				v_ty5 = (v_bx5 - v_ax5);
HXDLIN(  33)				v_A5 = ((((-(v_by5) * v_cx5) + (v_ay5 * (-(v_bx5) + v_cx5))) + (v_ax5 * (v_by5 - v_cy5))) + (v_bx5 * v_cy5));
HXDLIN(  33)				Float a49 = v_ax5;
HXDLIN(  33)				Float b50 = v_bx5;
HXDLIN(  33)				Float c34 = v_cx5;
HXDLIN(  33)				if ((a49 > b50)) {
HXLINE(  33)					if ((a49 > c34)) {
HXLINE(  33)						int min44;
HXDLIN(  33)						if ((b50 > c34)) {
HXLINE(  33)							min44 = ::Math_obj::floor(c34);
            						}
            						else {
HXLINE(  33)							min44 = ::Math_obj::floor(b50);
            						}
HXDLIN(  33)						int ii_min88 = min44;
HXDLIN(  33)						int ii_max88 = ::Math_obj::ceil(a49);
HXDLIN(  33)						v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min88,ii_max88);
            					}
            					else {
HXLINE(  33)						int ii_min89 = ::Math_obj::floor(b50);
HXDLIN(  33)						int ii_max89 = ::Math_obj::ceil(c34);
HXDLIN(  33)						v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min89,ii_max89);
            					}
            				}
            				else {
HXLINE(  33)					if ((b50 > c34)) {
HXLINE(  33)						int min45;
HXDLIN(  33)						if ((a49 > c34)) {
HXLINE(  33)							min45 = ::Math_obj::floor(c34);
            						}
            						else {
HXLINE(  33)							min45 = ::Math_obj::ceil(a49);
            						}
HXDLIN(  33)						int ii_min90 = min45;
HXDLIN(  33)						int ii_max90 = ::Math_obj::ceil(b50);
HXDLIN(  33)						v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min90,ii_max90);
            					}
            					else {
HXLINE(  33)						int ii_min91 = ::Math_obj::floor(a49);
HXDLIN(  33)						int ii_max91 = ::Math_obj::ceil(c34);
HXDLIN(  33)						v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min91,ii_max91);
            					}
            				}
HXDLIN(  33)				Float a50 = v_ay5;
HXDLIN(  33)				Float b51 = v_by5;
HXDLIN(  33)				Float c35 = v_cy5;
HXDLIN(  33)				if ((a50 > b51)) {
HXLINE(  33)					if ((a50 > c35)) {
HXLINE(  33)						int min46;
HXDLIN(  33)						if ((b51 > c35)) {
HXLINE(  33)							min46 = ::Math_obj::floor(c35);
            						}
            						else {
HXLINE(  33)							min46 = ::Math_obj::floor(b51);
            						}
HXDLIN(  33)						int ii_min92 = min46;
HXDLIN(  33)						int ii_max92 = ::Math_obj::ceil(a50);
HXDLIN(  33)						v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min92,ii_max92);
            					}
            					else {
HXLINE(  33)						int ii_min93 = ::Math_obj::floor(b51);
HXDLIN(  33)						int ii_max93 = ::Math_obj::ceil(c35);
HXDLIN(  33)						v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min93,ii_max93);
            					}
            				}
            				else {
HXLINE(  33)					if ((b51 > c35)) {
HXLINE(  33)						int min47;
HXDLIN(  33)						if ((a50 > c35)) {
HXLINE(  33)							min47 = ::Math_obj::floor(c35);
            						}
            						else {
HXLINE(  33)							min47 = ::Math_obj::ceil(a50);
            						}
HXDLIN(  33)						int ii_min94 = min47;
HXDLIN(  33)						int ii_max94 = ::Math_obj::ceil(b51);
HXDLIN(  33)						v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min94,ii_max94);
            					}
            					else {
HXLINE(  33)						int ii_min95 = ::Math_obj::floor(a50);
HXDLIN(  33)						int ii_max95 = ::Math_obj::ceil(c35);
HXDLIN(  33)						v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min95,ii_max95);
            					}
            				}
            			}
HXDLIN(  33)			if (hasUndo5) {
HXLINE(  33)				v_undoImage5 = undoImage15;
HXDLIN(  33)				v_undoX5 = xIter35->start;
HXDLIN(  33)				v_undoY5 = yIter35->start;
            			}
HXDLIN(  33)			 ::pi_xy::algo::HitQuad v14 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax6,ay6,bx10,by10,cx10,cy10,dx6,dy6,true);
HXLINE(  26)			hitQuad = v14;
            		}
HXLINE(  35)		Float cx15 = h2;
HXLINE(  36)		Float cy15 = radius2;
HXLINE(  37)		Float bx15 = h2;
HXLINE(  38)		Float by15 = -(radius2);
HXLINE(  39)		Float temp3 = ((Float)0.);
HXLINE(  40)		temp3 = (px + ((bx15 * cos) - (by15 * sin)));
HXLINE(  41)		by15 = (py + ((by15 * cos) + (bx15 * sin)));
HXLINE(  42)		bx15 = temp3;
HXLINE(  43)		temp3 = (px + ((cx15 * cos) - (cy15 * sin)));
HXLINE(  44)		cy15 = (py + ((cy15 * cos) + (cx15 * sin)));
HXLINE(  45)		cx15 = temp3;
HXLINE(  46)		Float bx16 = bx15;
HXDLIN(  46)		Float by16 = by15;
HXDLIN(  46)		Float cx16 = cx15;
HXDLIN(  46)		Float cy16 = cy15;
HXDLIN(  46)		bool hasUndo6 = false;
HXDLIN(  46)		bool adjustWinding12 = (((((qx * by16) - (bx16 * qy)) + ((bx16 * cy16) - (cx16 * by16))) + ((cx16 * qy) - (qx * cy16))) > 0);
HXDLIN(  46)		if (!(adjustWinding12)) {
HXLINE(  46)			Float bx_12 = bx16;
HXDLIN(  46)			Float by_12 = by16;
HXLINE(  25)			bx16 = cx16;
HXLINE(  26)			by16 = cy16;
HXLINE(  27)			cx16 = bx_12;
HXLINE(  28)			cy16 = by_12;
            		}
HXLINE(  46)		Float s06 = ((qy * cx16) - (qx * cy16));
HXDLIN(  46)		Float sx6 = (cy16 - qy);
HXDLIN(  46)		Float sy6 = (qx - cx16);
HXDLIN(  46)		Float t06 = ((qx * by16) - (qy * bx16));
HXDLIN(  46)		Float tx6 = (qy - by16);
HXDLIN(  46)		Float ty6 = (bx16 - qx);
HXDLIN(  46)		Float A6 = ((((-(by16) * cx16) + (qy * (-(bx16) + cx16))) + (qx * (by16 - cy16))) + (bx16 * cy16));
HXDLIN(  46)		 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN(  46)		if ((qx > bx16)) {
HXLINE(  46)			if ((qx > cx16)) {
HXLINE(  46)				int min48;
HXDLIN(  46)				if ((bx16 > cx16)) {
HXLINE(  46)					min48 = ::Math_obj::floor(cx16);
            				}
            				else {
HXLINE(  46)					min48 = ::Math_obj::floor(bx16);
            				}
HXDLIN(  46)				int ii_min96 = min48;
HXDLIN(  46)				int ii_max96 = ::Math_obj::ceil(qx);
HXDLIN(  46)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min96,ii_max96);
            			}
            			else {
HXLINE(  46)				int ii_min97 = ::Math_obj::floor(bx16);
HXDLIN(  46)				int ii_max97 = ::Math_obj::ceil(cx16);
HXDLIN(  46)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min97,ii_max97);
            			}
            		}
            		else {
HXLINE(  46)			if ((bx16 > cx16)) {
HXLINE(  46)				int min49;
HXDLIN(  46)				if ((qx > cx16)) {
HXLINE(  46)					min49 = ::Math_obj::floor(cx16);
            				}
            				else {
HXLINE(  46)					min49 = ::Math_obj::ceil(qx);
            				}
HXDLIN(  46)				int ii_min98 = min49;
HXDLIN(  46)				int ii_max98 = ::Math_obj::ceil(bx16);
HXDLIN(  46)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min98,ii_max98);
            			}
            			else {
HXLINE(  46)				int ii_min99 = ::Math_obj::floor(qx);
HXDLIN(  46)				int ii_max99 = ::Math_obj::ceil(cx16);
HXDLIN(  46)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min99,ii_max99);
            			}
            		}
HXDLIN(  46)		 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN(  46)		if ((qy > by16)) {
HXLINE(  46)			if ((qy > cy16)) {
HXLINE(  46)				int min50;
HXDLIN(  46)				if ((by16 > cy16)) {
HXLINE(  46)					min50 = ::Math_obj::floor(cy16);
            				}
            				else {
HXLINE(  46)					min50 = ::Math_obj::floor(by16);
            				}
HXDLIN(  46)				int ii_min100 = min50;
HXDLIN(  46)				int ii_max100 = ::Math_obj::ceil(qy);
HXDLIN(  46)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min100,ii_max100);
            			}
            			else {
HXLINE(  46)				int ii_min101 = ::Math_obj::floor(by16);
HXDLIN(  46)				int ii_max101 = ::Math_obj::ceil(cy16);
HXDLIN(  46)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min101,ii_max101);
            			}
            		}
            		else {
HXLINE(  46)			if ((by16 > cy16)) {
HXLINE(  46)				int min51;
HXDLIN(  46)				if ((qy > cy16)) {
HXLINE(  46)					min51 = ::Math_obj::floor(cy16);
            				}
            				else {
HXLINE(  46)					min51 = ::Math_obj::ceil(qy);
            				}
HXDLIN(  46)				int ii_min102 = min51;
HXDLIN(  46)				int ii_max102 = ::Math_obj::ceil(by16);
HXDLIN(  46)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min102,ii_max102);
            			}
            			else {
HXLINE(  46)				int ii_min103 = ::Math_obj::floor(qy);
HXDLIN(  46)				int ii_max103 = ::Math_obj::ceil(cy16);
HXDLIN(  46)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min103,ii_max103);
            			}
            		}
HXDLIN(  46)		 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN(  46)		if (hasUndo6) {
HXLINE(  46)			int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN(  46)			int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN(  46)			 ::Dynamic imageType6 = null();
HXDLIN(  46)			 ::pi_xy::ImageStruct this199 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  46)			if (::hx::IsNull( imageType6 )) {
HXLINE(  54)				imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE(  46)			::Dynamic undoImage19;
HXDLIN(  46)			switch((int)(( (int)(imageType6) ))){
            				case (int)0: {
HXLINE(  46)					 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  46)					 ::iterMagic::BytesImg b52 = byt6;
HXDLIN(  46)					{
HXLINE(  46)						b52->width = width6;
HXDLIN(  46)						b52->height = height6;
HXDLIN(  46)						b52->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  46)						b52->data = ::haxe::io::Bytes_obj::alloc((b52->length * 4));
HXDLIN(  46)						{
HXLINE(  46)							int len12 = b52->length;
HXDLIN(  46)							int w6 = 0;
HXDLIN(  46)							{
HXLINE(  46)								int _g120 = 0;
HXDLIN(  46)								int _g121 = b52->height;
HXDLIN(  46)								while((_g120 < _g121)){
HXLINE(  46)									_g120 = (_g120 + 1);
HXDLIN(  46)									int y24 = (_g120 - 1);
HXDLIN(  46)									{
HXLINE(  46)										int _g122 = 0;
HXDLIN(  46)										int _g123 = b52->width;
HXDLIN(  46)										while((_g122 < _g123)){
HXLINE(  46)											_g122 = (_g122 + 1);
HXDLIN(  46)											int x24 = (_g122 - 1);
HXDLIN(  46)											{
HXLINE(  46)												w6 = (w6 + 1);
HXDLIN(  46)												b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  46)											{
HXLINE(  46)												w6 = (w6 + 1);
HXDLIN(  46)												b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  46)											{
HXLINE(  46)												w6 = (w6 + 1);
HXDLIN(  46)												b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  46)											{
HXLINE(  46)												w6 = (w6 + 1);
HXDLIN(  46)												b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  46)					undoImage19 = b52;
            				}
            				break;
            				case (int)1: {
HXLINE(  46)					 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  46)					 ::iterMagic::ArrIntImg a51 = arrI6;
HXDLIN(  46)					{
HXLINE(  46)						a51->width = width6;
HXDLIN(  46)						a51->height = height6;
HXDLIN(  46)						a51->data = ::Array_obj< int >::__new(0);
HXDLIN(  46)						a51->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  46)						{
HXLINE(  46)							int _g124 = 0;
HXDLIN(  46)							int _g125 = a51->length;
HXDLIN(  46)							while((_g124 < _g125)){
HXLINE(  46)								_g124 = (_g124 + 1);
HXDLIN(  46)								int i36 = (_g124 - 1);
HXDLIN(  46)								a51->data[i36] = 0;
            							}
            						}
            					}
HXDLIN(  46)					undoImage19 = a51;
            				}
            				break;
            				case (int)2: {
HXLINE(  46)					 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  46)					 ::iterMagic::U32ArrImg b53 = u32a6;
HXDLIN(  46)					{
HXLINE(  46)						b53->width = width6;
HXDLIN(  46)						b53->height = height6;
HXDLIN(  46)						b53->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  46)						int size6 = (b53->length * 4);
HXDLIN(  46)						b53->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN(  46)						{
HXLINE(  46)							int _g126 = 0;
HXDLIN(  46)							int _g127 = b53->length;
HXDLIN(  46)							while((_g126 < _g127)){
HXLINE(  46)								_g126 = (_g126 + 1);
HXDLIN(  46)								int i37 = (_g126 - 1);
HXDLIN(  46)								{
HXLINE(  46)									 ::haxe::io::ArrayBufferViewImpl this200 = b53->data;
HXDLIN(  46)									bool undoImage20;
HXDLIN(  46)									if ((i37 >= 0)) {
HXLINE(  46)										undoImage20 = (i37 < (this200->byteLength >> 2));
            									}
            									else {
HXLINE(  46)										undoImage20 = false;
            									}
HXDLIN(  46)									if (undoImage20) {
HXLINE(  46)										 ::haxe::io::Bytes _this6 = this200->bytes;
HXDLIN(  46)										int pos6 = ((i37 << 2) + this200->byteOffset);
HXDLIN(  46)										_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN(  46)										_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN(  46)										_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN(  46)										_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN(  46)					undoImage19 = b53;
            				}
            				break;
            				case (int)3: {
HXLINE(  46)					 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  46)					 ::iterMagic::VecIntImg v15 = vec6;
HXDLIN(  46)					{
HXLINE(  46)						v15->width = width6;
HXDLIN(  46)						v15->height = height6;
HXDLIN(  46)						v15->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  46)						v15->data = ::Array_obj< int >::__new(v15->length);
HXDLIN(  46)						{
HXLINE(  46)							int _g128 = 0;
HXDLIN(  46)							int _g129 = v15->length;
HXDLIN(  46)							while((_g128 < _g129)){
HXLINE(  46)								_g128 = (_g128 + 1);
HXDLIN(  46)								int i38 = (_g128 - 1);
HXDLIN(  46)								v15->data->__unsafe_set(i38,0);
            							}
            						}
            					}
HXDLIN(  46)					undoImage19 = v15;
            				}
            				break;
            				case (int)4: {
HXLINE(  46)					 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  46)					 ::iterMagic::StackIntImg b54 = sInt6;
HXDLIN(  46)					{
HXLINE(  46)						b54->width = width6;
HXDLIN(  46)						b54->height = height6;
HXDLIN(  46)						b54->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  46)						b54->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  46)						{
HXLINE(  46)							int len13 = b54->length;
HXDLIN(  46)							 ::haxe::ds::GenericStack_Int d6 = b54->data;
HXDLIN(  46)							if (::hx::IsNull( d6->head )) {
HXLINE(  46)								int _g130 = 0;
HXDLIN(  46)								int _g131 = len13;
HXDLIN(  46)								while((_g130 < _g131)){
HXLINE(  46)									_g130 = (_g130 + 1);
HXDLIN(  46)									int i39 = (_g130 - 1);
HXDLIN(  46)									d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            								}
            							}
            							else {
HXLINE(  46)								int _g132 = 0;
HXDLIN(  46)								int _g133 = len13;
HXDLIN(  46)								while((_g132 < _g133)){
HXLINE(  46)									_g132 = (_g132 + 1);
HXDLIN(  46)									int i40 = (_g132 - 1);
HXDLIN(  46)									{
HXLINE(  46)										 ::haxe::ds::GenericCell_Int l6 = b54->data->head;
HXDLIN(  46)										 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN(  46)										{
HXLINE(  46)											int _g134 = 0;
HXDLIN(  46)											int _g135 = i40;
HXDLIN(  46)											while((_g134 < _g135)){
HXLINE(  46)												_g134 = (_g134 + 1);
HXDLIN(  46)												int i41 = (_g134 - 1);
HXLINE( 345)												prev6 = l6;
HXLINE( 346)												l6 = l6->next;
            											}
            										}
HXLINE(  46)										if (::hx::IsNull( prev6 )) {
HXLINE(  46)											b54->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  46)											l6 = null();
            										}
            										else {
HXLINE(  46)											prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  46)											l6 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  46)					undoImage19 = b54;
            				}
            				break;
            			}
HXDLIN(  46)			this199->image = undoImage19;
HXDLIN(  46)			this199->width = width6;
HXDLIN(  46)			this199->height = height6;
HXDLIN(  46)			this199->imageType = ( (int)(imageType6) );
HXDLIN(  46)			undoImage18 = this199;
HXDLIN(  46)			{
HXLINE(  46)				int rectLeft6 = xIter36->start;
HXDLIN(  46)				int rectTop6 = yIter36->start;
HXDLIN(  46)				int rectRight6 = xIter36->max;
HXDLIN(  46)				bool forceClear6 = false;
HXDLIN(  46)				{
HXLINE(  46)					int _g136 = rectTop6;
HXDLIN(  46)					int _g137 = yIter36->max;
HXDLIN(  46)					while((_g136 < _g137)){
HXLINE(  46)						_g136 = (_g136 + 1);
HXDLIN(  46)						int dy9 = (_g136 - 1);
HXDLIN(  46)						{
HXLINE(  46)							int _g138 = rectLeft6;
HXDLIN(  46)							int _g139 = rectRight6;
HXDLIN(  46)							while((_g138 < _g139)){
HXLINE(  46)								_g138 = (_g138 + 1);
HXDLIN(  46)								int dx9 = (_g138 - 1);
HXDLIN(  46)								::Dynamic this201 = pixelImage->image;
HXDLIN(  46)								int index30;
HXDLIN(  46)								if (pixelImage->useVirtualPos) {
HXLINE(  46)									index30 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx9) - pixelImage->virtualX));
            								}
            								else {
HXLINE(  46)									index30 = ::Std_obj::_hx_int(( (Float)(((dy9 * pixelImage->width) + dx9)) ));
            								}
HXDLIN(  46)								int c36 = ::iterMagic::Iimg_obj::get(this201,index30);
HXDLIN(  46)								int col6;
HXDLIN(  46)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  46)									col6 = ((((((c36 >> 24) & 255) << 24) | ((c36 & 255) << 16)) | (((c36 >> 8) & 255) << 8)) | ((c36 >> 16) & 255));
            								}
            								else {
HXLINE(  46)									col6 = c36;
            								}
HXDLIN(  46)								bool _hx_tmp;
HXDLIN(  46)								if (pixelImage->useMask) {
HXLINE(  46)									_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE(  46)									_hx_tmp = false;
            								}
HXDLIN(  46)								if (_hx_tmp) {
HXLINE(  46)									 ::pi_xy::ImageStruct this202 = pixelImage->mask;
HXDLIN(  46)									::Dynamic this203 = this202->image;
HXDLIN(  46)									int index31;
HXDLIN(  46)									if (this202->useVirtualPos) {
HXLINE(  46)										index31 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this202->virtualY) * ( (Float)(this202->width) )) + dx9) - this202->virtualX));
            									}
            									else {
HXLINE(  46)										index31 = ::Std_obj::_hx_int(( (Float)(((dy9 * this202->width) + dx9)) ));
            									}
HXDLIN(  46)									int c37 = ::iterMagic::Iimg_obj::get(this203,index31);
HXDLIN(  46)									int v16;
HXDLIN(  46)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  46)										v16 = ((((((c37 >> 24) & 255) << 24) | ((c37 & 255) << 16)) | (((c37 >> 8) & 255) << 8)) | ((c37 >> 16) & 255));
            									}
            									else {
HXLINE(  46)										v16 = c37;
            									}
HXDLIN(  46)									int maskPixel6 = v16;
HXDLIN(  46)									int this204 = col6;
HXDLIN(  46)									if ((maskPixel6 == 0)) {
HXLINE(  46)										col6 = this204;
            									}
            									else {
HXLINE(  46)										Float m06;
HXDLIN(  46)										int this205 = ((maskPixel6 >> 24) & 255);
HXDLIN(  46)										if ((this205 == 0)) {
HXLINE(  46)											m06 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											m06 = (( (Float)(this205) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float m16;
HXDLIN(  46)										int this206 = ((maskPixel6 >> 16) & 255);
HXDLIN(  46)										if ((this206 == 0)) {
HXLINE(  46)											m16 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											m16 = (( (Float)(this206) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float m26;
HXDLIN(  46)										int this207 = ((maskPixel6 >> 8) & 255);
HXDLIN(  46)										if ((this207 == 0)) {
HXLINE(  46)											m26 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											m26 = (( (Float)(this207) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float m36;
HXDLIN(  46)										int this208 = (maskPixel6 & 255);
HXDLIN(  46)										if ((this208 == 0)) {
HXLINE(  46)											m36 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											m36 = (( (Float)(this208) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this204 >> 24) & 255)) )));
HXDLIN(  46)										int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this204 >> 16) & 255)) )));
HXDLIN(  46)										int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this204 >> 8) & 255)) )));
HXDLIN(  46)										int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this204 & 255)) )));
HXDLIN(  46)										col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN(  46)								if ((col6 != 0)) {
HXLINE(  46)									int x25 = (dx9 - rectLeft6);
HXDLIN(  46)									int y25 = (dy9 - rectTop6);
HXDLIN(  46)									int c38 = col6;
HXDLIN(  46)									bool _hx_tmp1;
HXDLIN(  46)									if ((((c38 >> 24) & 255) < 254)) {
HXLINE(  46)										_hx_tmp1 = undoImage18->transparent;
            									}
            									else {
HXLINE(  46)										_hx_tmp1 = false;
            									}
HXDLIN(  46)									if (_hx_tmp1) {
HXLINE(  46)										int location12;
HXDLIN(  46)										if (undoImage18->useVirtualPos) {
HXLINE(  46)											location12 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x25) - undoImage18->virtualX));
            										}
            										else {
HXLINE(  46)											location12 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage18->width) + x25)) ));
            										}
HXDLIN(  46)										int this209 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN(  46)										int this210;
HXDLIN(  46)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  46)											this210 = ((((((this209 >> 24) & 255) << 24) | ((this209 & 255) << 16)) | (((this209 >> 8) & 255) << 8)) | ((this209 >> 16) & 255));
            										}
            										else {
HXLINE(  46)											this210 = this209;
            										}
HXDLIN(  46)										Float a117;
HXDLIN(  46)										int this211 = ((this210 >> 24) & 255);
HXDLIN(  46)										if ((this211 == 0)) {
HXLINE(  46)											a117 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											a117 = (( (Float)(this211) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float r112;
HXDLIN(  46)										int this212 = ((this210 >> 16) & 255);
HXDLIN(  46)										if ((this212 == 0)) {
HXLINE(  46)											r112 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											r112 = (( (Float)(this212) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float g112;
HXDLIN(  46)										int this213 = ((this210 >> 8) & 255);
HXDLIN(  46)										if ((this213 == 0)) {
HXLINE(  46)											g112 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											g112 = (( (Float)(this213) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float b118;
HXDLIN(  46)										int this214 = (this210 & 255);
HXDLIN(  46)										if ((this214 == 0)) {
HXLINE(  46)											b118 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											b118 = (( (Float)(this214) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float a215;
HXDLIN(  46)										int this215 = ((col6 >> 24) & 255);
HXDLIN(  46)										if ((this215 == 0)) {
HXLINE(  46)											a215 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											a215 = (( (Float)(this215) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float r212;
HXDLIN(  46)										int this216 = ((col6 >> 16) & 255);
HXDLIN(  46)										if ((this216 == 0)) {
HXLINE(  46)											r212 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											r212 = (( (Float)(this216) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float g212;
HXDLIN(  46)										int this217 = ((col6 >> 8) & 255);
HXDLIN(  46)										if ((this217 == 0)) {
HXLINE(  46)											g212 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											g212 = (( (Float)(this217) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float b216;
HXDLIN(  46)										int this218 = (col6 & 255);
HXDLIN(  46)										if ((this218 == 0)) {
HXLINE(  46)											b216 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											b216 = (( (Float)(this218) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN(  46)										int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a314) + (r212 * a215))));
HXDLIN(  46)										int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a314) + (g212 * a215))));
HXDLIN(  46)										int b55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b216 * a215))));
HXDLIN(  46)										int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN(  46)										int blended12 = ((((a52 << 24) | (r32 << 16)) | (g32 << 8)) | b55);
HXDLIN(  46)										{
HXLINE(  46)											int _hx_tmp2;
HXDLIN(  46)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  46)												_hx_tmp2 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            											}
            											else {
HXLINE(  46)												_hx_tmp2 = blended12;
            											}
HXDLIN(  46)											::iterMagic::Iimg_obj::set(undoImage18->image,location12,_hx_tmp2);
            										}
            									}
            									else {
HXLINE(  46)										::Dynamic this219 = undoImage18->image;
HXDLIN(  46)										int index32;
HXDLIN(  46)										if (undoImage18->useVirtualPos) {
HXLINE(  46)											index32 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x25) - undoImage18->virtualX));
            										}
            										else {
HXLINE(  46)											index32 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage18->width) + x25)) ));
            										}
HXDLIN(  46)										int _hx_tmp3;
HXDLIN(  46)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  46)											_hx_tmp3 = ((((((c38 >> 24) & 255) << 24) | ((c38 & 255) << 16)) | (((c38 >> 8) & 255) << 8)) | ((c38 >> 16) & 255));
            										}
            										else {
HXLINE(  46)											_hx_tmp3 = c38;
            										}
HXDLIN(  46)										::iterMagic::Iimg_obj::set(this219,index32,_hx_tmp3);
            									}
            								}
            								else {
HXLINE(  46)									if (forceClear6) {
HXLINE(  46)										::Dynamic this220 = undoImage18->image;
HXDLIN(  46)										int x26 = (dx9 - rectLeft6);
HXDLIN(  46)										int y26 = (dy9 - rectTop6);
HXDLIN(  46)										int index33;
HXDLIN(  46)										if (undoImage18->useVirtualPos) {
HXLINE(  46)											index33 = ::Std_obj::_hx_int(((((( (Float)(y26) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x26) - undoImage18->virtualX));
            										}
            										else {
HXLINE(  46)											index33 = ::Std_obj::_hx_int(( (Float)(((y26 * undoImage18->width) + x26)) ));
            										}
HXDLIN(  46)										::iterMagic::Iimg_obj::set(this220,index33,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN(  46)		bool found6 = false;
HXDLIN(  46)		Float s6 = ((Float)0.);
HXDLIN(  46)		Float t6 = ((Float)0.);
HXDLIN(  46)		Float sxx6 = ((Float)0.);
HXDLIN(  46)		Float txx6 = ((Float)0.);
HXDLIN(  46)		{
HXLINE(  46)			int _g_min12 = xIter36->start;
HXDLIN(  46)			int _g_max12 = xIter36->max;
HXDLIN(  46)			while((_g_min12 < _g_max12)){
HXLINE(  46)				_g_min12 = (_g_min12 + 1);
HXDLIN(  46)				int x27 = (_g_min12 - 1);
HXLINE(  60)				sxx6 = (sx6 * ( (Float)(x27) ));
HXLINE(  61)				txx6 = (tx6 * ( (Float)(x27) ));
HXLINE(  62)				found6 = false;
HXLINE(  46)				{
HXLINE(  46)					int _g_min13 = yIter36->start;
HXDLIN(  46)					int _g_max13 = yIter36->max;
HXDLIN(  46)					while((_g_min13 < _g_max13)){
HXLINE(  46)						_g_min13 = (_g_min13 + 1);
HXDLIN(  46)						int y27 = (_g_min13 - 1);
HXLINE(  64)						s6 = ((s06 + sxx6) + (sy6 * ( (Float)(y27) )));
HXLINE(  65)						t6 = ((t06 + txx6) + (ty6 * ( (Float)(y27) )));
HXLINE(  46)						bool _hx_tmp4;
HXDLIN(  46)						if (!((s6 <= 0))) {
HXLINE(  46)							_hx_tmp4 = (t6 <= 0);
            						}
            						else {
HXLINE(  46)							_hx_tmp4 = true;
            						}
HXDLIN(  46)						if (_hx_tmp4) {
HXLINE(  46)							if (found6) {
HXLINE(  46)								goto _hx_goto_83;
            							}
            						}
            						else {
HXLINE(  46)							if (((s6 + t6) < A6)) {
HXLINE(  46)								{
HXLINE(  46)									int c39 = color;
HXDLIN(  46)									bool _hx_tmp5;
HXDLIN(  46)									if ((((c39 >> 24) & 255) < 254)) {
HXLINE(  46)										_hx_tmp5 = pixelImage->transparent;
            									}
            									else {
HXLINE(  46)										_hx_tmp5 = false;
            									}
HXDLIN(  46)									if (_hx_tmp5) {
HXLINE(  46)										int location13;
HXDLIN(  46)										if (pixelImage->useVirtualPos) {
HXLINE(  46)											location13 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x27) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  46)											location13 = ::Std_obj::_hx_int(( (Float)(((y27 * pixelImage->width) + x27)) ));
            										}
HXDLIN(  46)										int this221 = ::iterMagic::Iimg_obj::get(pixelImage->image,location13);
HXDLIN(  46)										int this222;
HXDLIN(  46)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  46)											this222 = ((((((this221 >> 24) & 255) << 24) | ((this221 & 255) << 16)) | (((this221 >> 8) & 255) << 8)) | ((this221 >> 16) & 255));
            										}
            										else {
HXLINE(  46)											this222 = this221;
            										}
HXDLIN(  46)										Float a118;
HXDLIN(  46)										int this223 = ((this222 >> 24) & 255);
HXDLIN(  46)										if ((this223 == 0)) {
HXLINE(  46)											a118 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											a118 = (( (Float)(this223) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float r113;
HXDLIN(  46)										int this224 = ((this222 >> 16) & 255);
HXDLIN(  46)										if ((this224 == 0)) {
HXLINE(  46)											r113 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											r113 = (( (Float)(this224) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float g113;
HXDLIN(  46)										int this225 = ((this222 >> 8) & 255);
HXDLIN(  46)										if ((this225 == 0)) {
HXLINE(  46)											g113 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											g113 = (( (Float)(this225) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float b119;
HXDLIN(  46)										int this226 = (this222 & 255);
HXDLIN(  46)										if ((this226 == 0)) {
HXLINE(  46)											b119 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											b119 = (( (Float)(this226) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float a216;
HXDLIN(  46)										int this227 = ((color >> 24) & 255);
HXDLIN(  46)										if ((this227 == 0)) {
HXLINE(  46)											a216 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											a216 = (( (Float)(this227) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float r213;
HXDLIN(  46)										int this228 = ((color >> 16) & 255);
HXDLIN(  46)										if ((this228 == 0)) {
HXLINE(  46)											r213 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											r213 = (( (Float)(this228) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float g213;
HXDLIN(  46)										int this229 = ((color >> 8) & 255);
HXDLIN(  46)										if ((this229 == 0)) {
HXLINE(  46)											g213 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											g213 = (( (Float)(this229) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float b217;
HXDLIN(  46)										int this230 = (color & 255);
HXDLIN(  46)										if ((this230 == 0)) {
HXLINE(  46)											b217 = ((Float)0.);
            										}
            										else {
HXLINE(  46)											b217 = (( (Float)(this230) ) / ( (Float)(255) ));
            										}
HXDLIN(  46)										Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN(  46)										int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a315) + (r213 * a216))));
HXDLIN(  46)										int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a315) + (g213 * a216))));
HXDLIN(  46)										int b56 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b217 * a216))));
HXDLIN(  46)										int a53 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN(  46)										int blended13 = ((((a53 << 24) | (r33 << 16)) | (g33 << 8)) | b56);
HXDLIN(  46)										{
HXLINE(  46)											int _hx_tmp6;
HXDLIN(  46)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  46)												_hx_tmp6 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            											}
            											else {
HXLINE(  46)												_hx_tmp6 = blended13;
            											}
HXDLIN(  46)											::iterMagic::Iimg_obj::set(pixelImage->image,location13,_hx_tmp6);
            										}
            									}
            									else {
HXLINE(  46)										::Dynamic this231 = pixelImage->image;
HXDLIN(  46)										int index34;
HXDLIN(  46)										if (pixelImage->useVirtualPos) {
HXLINE(  46)											index34 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x27) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  46)											index34 = ::Std_obj::_hx_int(( (Float)(((y27 * pixelImage->width) + x27)) ));
            										}
HXDLIN(  46)										int _hx_tmp7;
HXDLIN(  46)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  46)											_hx_tmp7 = ((((((c39 >> 24) & 255) << 24) | ((c39 & 255) << 16)) | (((c39 >> 8) & 255) << 8)) | ((c39 >> 16) & 255));
            										}
            										else {
HXLINE(  46)											_hx_tmp7 = c39;
            										}
HXDLIN(  46)										::iterMagic::Iimg_obj::set(this231,index34,_hx_tmp7);
            									}
            								}
HXLINE(  73)								found6 = true;
            							}
            							else {
HXLINE(  46)								if (found6) {
HXLINE(  46)									goto _hx_goto_83;
            								}
            							}
            						}
            					}
            					_hx_goto_83:;
            				}
            			}
            		}
HXDLIN(  46)		 ::pi_xy::algo::HitTri hitTri;
HXDLIN(  46)		if ((hasHit == true)) {
HXLINE(  46)			 ::pi_xy::algo::HitTri v17 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx16,by16,cx16,cy16,true);
HXDLIN(  46)			if (hasUndo6) {
HXLINE(  46)				v17->undoImage = undoImage18;
HXDLIN(  46)				v17->undoX = xIter36->start;
HXDLIN(  46)				v17->undoY = yIter36->start;
            			}
HXDLIN(  46)			hitTri = v17;
            		}
            		else {
HXLINE(  46)			hitTri = null();
            		}
HXLINE(  47)		if (hasHit) {
HXLINE(  48)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(1)->init(0,hitTri));
HXLINE(  49)			if (::hx::IsNotNull( hitQuad )) {
HXLINE(  50)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXLINE(  51)			hitArr->triArr->push(hitQuad->triBCD);
HXLINE(  52)			return hitArr;
            		}
            		else {
HXLINE(  54)			return null();
            		}
HXLINE(  47)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(ArrowPixel_Fields__obj,fillLineArrow,return )

 ::pi_xy::algo::HitTriArray ArrowPixel_Fields__obj::fillSoftLineArrow( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float thick,int color,::hx::Null< bool >  __o_flare,::hx::Null< bool >  __o_reverseFlare,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_hasHit){
            		bool flare = __o_flare.Default(false);
            		bool reverseFlare = __o_reverseFlare.Default(false);
            		Float soft = __o_soft.Default(((Float)40.));
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_63f36ef650858c14_64_fillSoftLineArrow)
HXLINE(  65)		Float goldenRatio = ((Float)1.61803398875);
HXLINE(  67)		Float o = (qy - py);
HXLINE(  68)		Float a = (qx - px);
HXLINE(  69)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE(  70)		Float theta = ::Math_obj::atan2(o,a);
HXLINE(  71)		Float thicker = ((( (Float)(2) ) * thick) * goldenRatio);
HXLINE(  72)		Float sin = ::Math_obj::sin(theta);
HXLINE(  73)		Float cos = ::Math_obj::cos(theta);
HXLINE(  74)		Float radius = (thick / ( (Float)(2) ));
HXLINE(  75)		Float radius2 = (thicker / ( (Float)(2) ));
HXLINE(  76)		Float h2 = (h / goldenRatio);
HXLINE(  78)		 ::pi_xy::algo::HitQuad hitQuad;
HXDLIN(  78)		if (flare) {
HXLINE(  79)			if (reverseFlare) {
HXLINE(  80)				Float sin1 = ::Math_obj::sin(theta);
HXDLIN(  80)				Float cos1 = ::Math_obj::cos(theta);
HXDLIN(  80)				Float radius1 = (thick / ( (Float)(2) ));
HXDLIN(  80)				Float radius21 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN(  80)				Float dx = ((Float)0.1);
HXDLIN(  80)				Float dy = radius1;
HXDLIN(  80)				Float cx = h2;
HXDLIN(  80)				Float cy = radius21;
HXDLIN(  80)				Float bx = h2;
HXDLIN(  80)				Float by = -(radius21);
HXDLIN(  80)				Float ax = ((Float)0.1);
HXDLIN(  80)				Float ay = -(radius1);
HXDLIN(  80)				Float temp = ((Float)0.);
HXLINE( 288)				temp = (px + ((ax * cos1) - (ay * sin1)));
HXLINE( 289)				ay = (py + ((ay * cos1) + (ax * sin1)));
HXLINE( 290)				ax = temp;
HXLINE( 292)				temp = (px + ((bx * cos1) - (by * sin1)));
HXLINE( 293)				by = (py + ((by * cos1) + (bx * sin1)));
HXLINE( 294)				bx = temp;
HXLINE( 296)				temp = (px + ((cx * cos1) - (cy * sin1)));
HXLINE( 297)				cy = (py + ((cy * cos1) + (cx * sin1)));
HXLINE( 298)				cx = temp;
HXLINE( 300)				temp = (px + ((dx * cos1) - (dy * sin1)));
HXLINE( 301)				dy = (py + ((dy * cos1) + (dx * sin1)));
HXLINE( 302)				dx = temp;
HXLINE(  80)				Float ex = ((((ax + bx) + cx) + dx) / ( (Float)(4) ));
HXDLIN(  80)				Float ey = ((((ay + by) + cy) + dy) / ( (Float)(4) ));
HXDLIN(  80)				{
HXLINE(  80)					Float bx1 = ax;
HXDLIN(  80)					Float by1 = ay;
HXDLIN(  80)					Float cx1 = bx;
HXDLIN(  80)					Float cy1 = by;
HXDLIN(  80)					bool hasUndo = false;
HXDLIN(  80)					bool adjustWinding = (((((ex * by1) - (bx1 * ey)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ey) - (ex * cy1))) > 0);
HXDLIN(  80)					if (!(adjustWinding)) {
HXLINE(  80)						Float bx_ = bx1;
HXDLIN(  80)						Float by_ = by1;
HXLINE(  25)						bx1 = cx1;
HXLINE(  26)						by1 = cy1;
HXLINE(  27)						cx1 = bx_;
HXLINE(  28)						cy1 = by_;
            					}
HXLINE(  80)					{
HXLINE(  80)						Float s0 = ((ey * cx1) - (ex * cy1));
HXDLIN(  80)						Float sx = (cy1 - ey);
HXDLIN(  80)						Float sy = (ex - cx1);
HXDLIN(  80)						Float t0 = ((ex * by1) - (ey * bx1));
HXDLIN(  80)						Float tx = (ey - by1);
HXDLIN(  80)						Float ty = (bx1 - ex);
HXDLIN(  80)						Float A = ((((-(by1) * cx1) + (ey * (-(bx1) + cx1))) + (ex * (by1 - cy1))) + (bx1 * cy1));
HXDLIN(  80)						 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN(  80)						if ((ex > bx1)) {
HXLINE(  80)							if ((ex > cx1)) {
HXLINE(  80)								int min;
HXDLIN(  80)								if ((bx1 > cx1)) {
HXLINE(  80)									min = ::Math_obj::floor(cx1);
            								}
            								else {
HXLINE(  80)									min = ::Math_obj::floor(bx1);
            								}
HXDLIN(  80)								int ii_min = min;
HXDLIN(  80)								int ii_max = ::Math_obj::ceil(ex);
HXDLIN(  80)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            							}
            							else {
HXLINE(  80)								int ii_min1 = ::Math_obj::floor(bx1);
HXDLIN(  80)								int ii_max1 = ::Math_obj::ceil(cx1);
HXDLIN(  80)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            							}
            						}
            						else {
HXLINE(  80)							if ((bx1 > cx1)) {
HXLINE(  80)								int min1;
HXDLIN(  80)								if ((ex > cx1)) {
HXLINE(  80)									min1 = ::Math_obj::floor(cx1);
            								}
            								else {
HXLINE(  80)									min1 = ::Math_obj::ceil(ex);
            								}
HXDLIN(  80)								int ii_min2 = min1;
HXDLIN(  80)								int ii_max2 = ::Math_obj::ceil(bx1);
HXDLIN(  80)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            							}
            							else {
HXLINE(  80)								int ii_min3 = ::Math_obj::floor(ex);
HXDLIN(  80)								int ii_max3 = ::Math_obj::ceil(cx1);
HXDLIN(  80)								xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            							}
            						}
HXDLIN(  80)						 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN(  80)						if ((ey > by1)) {
HXLINE(  80)							if ((ey > cy1)) {
HXLINE(  80)								int min2;
HXDLIN(  80)								if ((by1 > cy1)) {
HXLINE(  80)									min2 = ::Math_obj::floor(cy1);
            								}
            								else {
HXLINE(  80)									min2 = ::Math_obj::floor(by1);
            								}
HXDLIN(  80)								int ii_min4 = min2;
HXDLIN(  80)								int ii_max4 = ::Math_obj::ceil(ey);
HXDLIN(  80)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            							}
            							else {
HXLINE(  80)								int ii_min5 = ::Math_obj::floor(by1);
HXDLIN(  80)								int ii_max5 = ::Math_obj::ceil(cy1);
HXDLIN(  80)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            							}
            						}
            						else {
HXLINE(  80)							if ((by1 > cy1)) {
HXLINE(  80)								int min3;
HXDLIN(  80)								if ((ey > cy1)) {
HXLINE(  80)									min3 = ::Math_obj::floor(cy1);
            								}
            								else {
HXLINE(  80)									min3 = ::Math_obj::ceil(ey);
            								}
HXDLIN(  80)								int ii_min6 = min3;
HXDLIN(  80)								int ii_max6 = ::Math_obj::ceil(by1);
HXDLIN(  80)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            							}
            							else {
HXLINE(  80)								int ii_min7 = ::Math_obj::floor(ey);
HXDLIN(  80)								int ii_max7 = ::Math_obj::ceil(cy1);
HXDLIN(  80)								yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            							}
            						}
HXDLIN(  80)						 ::pi_xy::ImageStruct undoImage = null();
HXDLIN(  80)						if (hasUndo) {
HXLINE(  80)							int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  80)							int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  80)							 ::Dynamic imageType = null();
HXDLIN(  80)							 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  80)							if (::hx::IsNull( imageType )) {
HXLINE(  54)								imageType = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  80)							::Dynamic undoImage1;
HXDLIN(  80)							switch((int)(( (int)(imageType) ))){
            								case (int)0: {
HXLINE(  80)									 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::BytesImg b = byt;
HXDLIN(  80)									{
HXLINE(  80)										b->width = width;
HXDLIN(  80)										b->height = height;
HXDLIN(  80)										b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  80)										b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN(  80)										{
HXLINE(  80)											int len = b->length;
HXDLIN(  80)											int w = 0;
HXDLIN(  80)											{
HXLINE(  80)												int _g = 0;
HXDLIN(  80)												int _g1 = b->height;
HXDLIN(  80)												while((_g < _g1)){
HXLINE(  80)													_g = (_g + 1);
HXDLIN(  80)													int y = (_g - 1);
HXDLIN(  80)													{
HXLINE(  80)														int _g2 = 0;
HXDLIN(  80)														int _g3 = b->width;
HXDLIN(  80)														while((_g2 < _g3)){
HXLINE(  80)															_g2 = (_g2 + 1);
HXDLIN(  80)															int x = (_g2 - 1);
HXDLIN(  80)															{
HXLINE(  80)																w = (w + 1);
HXDLIN(  80)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  80)															{
HXLINE(  80)																w = (w + 1);
HXDLIN(  80)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  80)															{
HXLINE(  80)																w = (w + 1);
HXDLIN(  80)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  80)															{
HXLINE(  80)																w = (w + 1);
HXDLIN(  80)																b->data->b[(w - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  80)									undoImage1 = b;
            								}
            								break;
            								case (int)1: {
HXLINE(  80)									 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN(  80)									{
HXLINE(  80)										a1->width = width;
HXDLIN(  80)										a1->height = height;
HXDLIN(  80)										a1->data = ::Array_obj< int >::__new(0);
HXDLIN(  80)										a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  80)										{
HXLINE(  80)											int _g4 = 0;
HXDLIN(  80)											int _g5 = a1->length;
HXDLIN(  80)											while((_g4 < _g5)){
HXLINE(  80)												_g4 = (_g4 + 1);
HXDLIN(  80)												int i = (_g4 - 1);
HXDLIN(  80)												a1->data[i] = 0;
            											}
            										}
            									}
HXDLIN(  80)									undoImage1 = a1;
            								}
            								break;
            								case (int)2: {
HXLINE(  80)									 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN(  80)									{
HXLINE(  80)										b1->width = width;
HXDLIN(  80)										b1->height = height;
HXDLIN(  80)										b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  80)										int size = (b1->length * 4);
HXDLIN(  80)										b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  80)										{
HXLINE(  80)											int _g6 = 0;
HXDLIN(  80)											int _g7 = b1->length;
HXDLIN(  80)											while((_g6 < _g7)){
HXLINE(  80)												_g6 = (_g6 + 1);
HXDLIN(  80)												int i1 = (_g6 - 1);
HXDLIN(  80)												{
HXLINE(  80)													 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN(  80)													bool undoImage2;
HXDLIN(  80)													if ((i1 >= 0)) {
HXLINE(  80)														undoImage2 = (i1 < (this2->byteLength >> 2));
            													}
            													else {
HXLINE(  80)														undoImage2 = false;
            													}
HXDLIN(  80)													if (undoImage2) {
HXLINE(  80)														 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  80)														int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN(  80)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  80)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  80)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  80)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  80)									undoImage1 = b1;
            								}
            								break;
            								case (int)3: {
HXLINE(  80)									 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::VecIntImg v = vec;
HXDLIN(  80)									{
HXLINE(  80)										v->width = width;
HXDLIN(  80)										v->height = height;
HXDLIN(  80)										v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  80)										v->data = ::Array_obj< int >::__new(v->length);
HXDLIN(  80)										{
HXLINE(  80)											int _g8 = 0;
HXDLIN(  80)											int _g9 = v->length;
HXDLIN(  80)											while((_g8 < _g9)){
HXLINE(  80)												_g8 = (_g8 + 1);
HXDLIN(  80)												int i2 = (_g8 - 1);
HXDLIN(  80)												v->data->__unsafe_set(i2,0);
            											}
            										}
            									}
HXDLIN(  80)									undoImage1 = v;
            								}
            								break;
            								case (int)4: {
HXLINE(  80)									 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)									 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN(  80)									{
HXLINE(  80)										b2->width = width;
HXDLIN(  80)										b2->height = height;
HXDLIN(  80)										b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN(  80)										b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  80)										{
HXLINE(  80)											int len1 = b2->length;
HXDLIN(  80)											 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN(  80)											if (::hx::IsNull( d->head )) {
HXLINE(  80)												int _g10 = 0;
HXDLIN(  80)												int _g11 = len1;
HXDLIN(  80)												while((_g10 < _g11)){
HXLINE(  80)													_g10 = (_g10 + 1);
HXDLIN(  80)													int i3 = (_g10 - 1);
HXDLIN(  80)													d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            												}
            											}
            											else {
HXLINE(  80)												int _g12 = 0;
HXDLIN(  80)												int _g13 = len1;
HXDLIN(  80)												while((_g12 < _g13)){
HXLINE(  80)													_g12 = (_g12 + 1);
HXDLIN(  80)													int i4 = (_g12 - 1);
HXDLIN(  80)													{
HXLINE(  80)														 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN(  80)														 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN(  80)														{
HXLINE(  80)															int _g14 = 0;
HXDLIN(  80)															int _g15 = i4;
HXDLIN(  80)															while((_g14 < _g15)){
HXLINE(  80)																_g14 = (_g14 + 1);
HXDLIN(  80)																int i5 = (_g14 - 1);
HXLINE( 345)																prev = l;
HXLINE( 346)																l = l->next;
            															}
            														}
HXLINE(  80)														if (::hx::IsNull( prev )) {
HXLINE(  80)															b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  80)															l = null();
            														}
            														else {
HXLINE(  80)															prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN(  80)															l = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  80)									undoImage1 = b2;
            								}
            								break;
            							}
HXDLIN(  80)							this1->image = undoImage1;
HXDLIN(  80)							this1->width = width;
HXDLIN(  80)							this1->height = height;
HXDLIN(  80)							this1->imageType = ( (int)(imageType) );
HXDLIN(  80)							undoImage = this1;
HXDLIN(  80)							{
HXLINE(  80)								int rectLeft = xIter3->start;
HXDLIN(  80)								int rectTop = yIter3->start;
HXDLIN(  80)								int rectRight = xIter3->max;
HXDLIN(  80)								bool forceClear = false;
HXDLIN(  80)								{
HXLINE(  80)									int _g16 = rectTop;
HXDLIN(  80)									int _g17 = yIter3->max;
HXDLIN(  80)									while((_g16 < _g17)){
HXLINE(  80)										_g16 = (_g16 + 1);
HXDLIN(  80)										int dy1 = (_g16 - 1);
HXDLIN(  80)										{
HXLINE(  80)											int _g18 = rectLeft;
HXDLIN(  80)											int _g19 = rectRight;
HXDLIN(  80)											while((_g18 < _g19)){
HXLINE(  80)												_g18 = (_g18 + 1);
HXDLIN(  80)												int dx1 = (_g18 - 1);
HXDLIN(  80)												::Dynamic this3 = pixelImage->image;
HXDLIN(  80)												int index;
HXDLIN(  80)												if (pixelImage->useVirtualPos) {
HXLINE(  80)													index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  80)													index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            												}
HXDLIN(  80)												int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN(  80)												int col;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  80)													col = c;
            												}
HXDLIN(  80)												bool hitQuad1;
HXDLIN(  80)												if (pixelImage->useMask) {
HXLINE(  80)													hitQuad1 = ::hx::IsNotNull( pixelImage->mask );
            												}
            												else {
HXLINE(  80)													hitQuad1 = false;
            												}
HXDLIN(  80)												if (hitQuad1) {
HXLINE(  80)													 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN(  80)													::Dynamic this5 = this4->image;
HXDLIN(  80)													int index1;
HXDLIN(  80)													if (this4->useVirtualPos) {
HXLINE(  80)														index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            													}
            													else {
HXLINE(  80)														index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            													}
HXDLIN(  80)													int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN(  80)													int v1;
HXDLIN(  80)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)														v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            													}
            													else {
HXLINE(  80)														v1 = c1;
            													}
HXDLIN(  80)													int maskPixel = v1;
HXDLIN(  80)													int this6 = col;
HXDLIN(  80)													if ((maskPixel == 0)) {
HXLINE(  80)														col = this6;
            													}
            													else {
HXLINE(  80)														Float m0;
HXDLIN(  80)														int this7 = ((maskPixel >> 24) & 255);
HXDLIN(  80)														if ((this7 == 0)) {
HXLINE(  80)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float m1;
HXDLIN(  80)														int this8 = ((maskPixel >> 16) & 255);
HXDLIN(  80)														if ((this8 == 0)) {
HXLINE(  80)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float m2;
HXDLIN(  80)														int this9 = ((maskPixel >> 8) & 255);
HXDLIN(  80)														if ((this9 == 0)) {
HXLINE(  80)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float m3;
HXDLIN(  80)														int this10 = (maskPixel & 255);
HXDLIN(  80)														if ((this10 == 0)) {
HXLINE(  80)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN(  80)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN(  80)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN(  80)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN(  80)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  80)												if ((col != 0)) {
HXLINE(  80)													int x1 = (dx1 - rectLeft);
HXDLIN(  80)													int y1 = (dy1 - rectTop);
HXDLIN(  80)													int c2 = col;
HXDLIN(  80)													bool hitQuad2;
HXDLIN(  80)													if ((((c2 >> 24) & 255) < 254)) {
HXLINE(  80)														hitQuad2 = undoImage->transparent;
            													}
            													else {
HXLINE(  80)														hitQuad2 = false;
            													}
HXDLIN(  80)													if (hitQuad2) {
HXLINE(  80)														int location;
HXDLIN(  80)														if (undoImage->useVirtualPos) {
HXLINE(  80)															location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            														}
            														else {
HXLINE(  80)															location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            														}
HXDLIN(  80)														int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN(  80)														int this12;
HXDLIN(  80)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)															this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            														}
            														else {
HXLINE(  80)															this12 = this11;
            														}
HXDLIN(  80)														Float a11;
HXDLIN(  80)														int this13 = ((this12 >> 24) & 255);
HXDLIN(  80)														if ((this13 == 0)) {
HXLINE(  80)															a11 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float r1;
HXDLIN(  80)														int this14 = ((this12 >> 16) & 255);
HXDLIN(  80)														if ((this14 == 0)) {
HXLINE(  80)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float g1;
HXDLIN(  80)														int this15 = ((this12 >> 8) & 255);
HXDLIN(  80)														if ((this15 == 0)) {
HXLINE(  80)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float b11;
HXDLIN(  80)														int this16 = (this12 & 255);
HXDLIN(  80)														if ((this16 == 0)) {
HXLINE(  80)															b11 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float a2;
HXDLIN(  80)														int this17 = ((col >> 24) & 255);
HXDLIN(  80)														if ((this17 == 0)) {
HXLINE(  80)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float r2;
HXDLIN(  80)														int this18 = ((col >> 16) & 255);
HXDLIN(  80)														if ((this18 == 0)) {
HXLINE(  80)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float g2;
HXDLIN(  80)														int this19 = ((col >> 8) & 255);
HXDLIN(  80)														if ((this19 == 0)) {
HXLINE(  80)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float b21;
HXDLIN(  80)														int this20 = (col & 255);
HXDLIN(  80)														if ((this20 == 0)) {
HXLINE(  80)															b21 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN(  80)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  80)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  80)														int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN(  80)														int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  80)														int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN(  80)														{
HXLINE(  80)															int hitQuad3;
HXDLIN(  80)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)																hitQuad3 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  80)																hitQuad3 = blended;
            															}
HXDLIN(  80)															::iterMagic::Iimg_obj::set(undoImage->image,location,hitQuad3);
            														}
            													}
            													else {
HXLINE(  80)														::Dynamic this21 = undoImage->image;
HXDLIN(  80)														int index2;
HXDLIN(  80)														if (undoImage->useVirtualPos) {
HXLINE(  80)															index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            														}
            														else {
HXLINE(  80)															index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            														}
HXDLIN(  80)														int hitQuad4;
HXDLIN(  80)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)															hitQuad4 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            														}
            														else {
HXLINE(  80)															hitQuad4 = c2;
            														}
HXDLIN(  80)														::iterMagic::Iimg_obj::set(this21,index2,hitQuad4);
            													}
            												}
            												else {
HXLINE(  80)													if (forceClear) {
HXLINE(  80)														::Dynamic this22 = undoImage->image;
HXDLIN(  80)														int x2 = (dx1 - rectLeft);
HXDLIN(  80)														int y2 = (dy1 - rectTop);
HXDLIN(  80)														int index3;
HXDLIN(  80)														if (undoImage->useVirtualPos) {
HXLINE(  80)															index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            														}
            														else {
HXLINE(  80)															index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            														}
HXDLIN(  80)														::iterMagic::Iimg_obj::set(this22,index3,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  80)						bool found = false;
HXDLIN(  80)						Float s = ((Float)0.);
HXDLIN(  80)						Float t = ((Float)0.);
HXDLIN(  80)						Float sxx = ((Float)0.);
HXDLIN(  80)						Float txx = ((Float)0.);
HXDLIN(  80)						{
HXLINE(  80)							int _g_min = xIter3->start;
HXDLIN(  80)							int _g_max = xIter3->max;
HXDLIN(  80)							while((_g_min < _g_max)){
HXLINE(  80)								_g_min = (_g_min + 1);
HXDLIN(  80)								int x3 = (_g_min - 1);
HXLINE(  60)								sxx = (sx * ( (Float)(x3) ));
HXLINE(  61)								txx = (tx * ( (Float)(x3) ));
HXLINE(  62)								found = false;
HXLINE(  80)								{
HXLINE(  80)									int _g_min1 = yIter3->start;
HXDLIN(  80)									int _g_max1 = yIter3->max;
HXDLIN(  80)									while((_g_min1 < _g_max1)){
HXLINE(  80)										_g_min1 = (_g_min1 + 1);
HXDLIN(  80)										int y3 = (_g_min1 - 1);
HXLINE(  64)										s = ((s0 + sxx) + (sy * ( (Float)(y3) )));
HXLINE(  65)										t = ((t0 + txx) + (ty * ( (Float)(y3) )));
HXLINE(  80)										bool hitQuad5;
HXDLIN(  80)										if (!((s <= 0))) {
HXLINE(  80)											hitQuad5 = (t <= 0);
            										}
            										else {
HXLINE(  80)											hitQuad5 = true;
            										}
HXDLIN(  80)										if (hitQuad5) {
HXLINE(  80)											if (found) {
HXLINE(  80)												goto _hx_goto_96;
            											}
            										}
            										else {
HXLINE(  80)											if (((s + t) < A)) {
HXLINE(  80)												{
HXLINE(  80)													int c3 = color;
HXDLIN(  80)													bool hitQuad6;
HXDLIN(  80)													if ((((c3 >> 24) & 255) < 254)) {
HXLINE(  80)														hitQuad6 = pixelImage->transparent;
            													}
            													else {
HXLINE(  80)														hitQuad6 = false;
            													}
HXDLIN(  80)													if (hitQuad6) {
HXLINE(  80)														int location1;
HXDLIN(  80)														if (pixelImage->useVirtualPos) {
HXLINE(  80)															location1 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x3) - pixelImage->virtualX));
            														}
            														else {
HXLINE(  80)															location1 = ::Std_obj::_hx_int(( (Float)(((y3 * pixelImage->width) + x3)) ));
            														}
HXDLIN(  80)														int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN(  80)														int this24;
HXDLIN(  80)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)															this24 = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            														}
            														else {
HXLINE(  80)															this24 = this23;
            														}
HXDLIN(  80)														Float a12;
HXDLIN(  80)														int this25 = ((this24 >> 24) & 255);
HXDLIN(  80)														if ((this25 == 0)) {
HXLINE(  80)															a12 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															a12 = (( (Float)(this25) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float r11;
HXDLIN(  80)														int this26 = ((this24 >> 16) & 255);
HXDLIN(  80)														if ((this26 == 0)) {
HXLINE(  80)															r11 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float g11;
HXDLIN(  80)														int this27 = ((this24 >> 8) & 255);
HXDLIN(  80)														if ((this27 == 0)) {
HXLINE(  80)															g11 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float b12;
HXDLIN(  80)														int this28 = (this24 & 255);
HXDLIN(  80)														if ((this28 == 0)) {
HXLINE(  80)															b12 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float a21;
HXDLIN(  80)														int this29 = ((color >> 24) & 255);
HXDLIN(  80)														if ((this29 == 0)) {
HXLINE(  80)															a21 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float r21;
HXDLIN(  80)														int this30 = ((color >> 16) & 255);
HXDLIN(  80)														if ((this30 == 0)) {
HXLINE(  80)															r21 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float g21;
HXDLIN(  80)														int this31 = ((color >> 8) & 255);
HXDLIN(  80)														if ((this31 == 0)) {
HXLINE(  80)															g21 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float b22;
HXDLIN(  80)														int this32 = (color & 255);
HXDLIN(  80)														if ((this32 == 0)) {
HXLINE(  80)															b22 = ((Float)0.);
            														}
            														else {
HXLINE(  80)															b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            														}
HXDLIN(  80)														Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN(  80)														int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN(  80)														int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN(  80)														int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN(  80)														int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN(  80)														int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN(  80)														{
HXLINE(  80)															int hitQuad7;
HXDLIN(  80)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)																hitQuad7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            															}
            															else {
HXLINE(  80)																hitQuad7 = blended1;
            															}
HXDLIN(  80)															::iterMagic::Iimg_obj::set(pixelImage->image,location1,hitQuad7);
            														}
            													}
            													else {
HXLINE(  80)														::Dynamic this33 = pixelImage->image;
HXDLIN(  80)														int index4;
HXDLIN(  80)														if (pixelImage->useVirtualPos) {
HXLINE(  80)															index4 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x3) - pixelImage->virtualX));
            														}
            														else {
HXLINE(  80)															index4 = ::Std_obj::_hx_int(( (Float)(((y3 * pixelImage->width) + x3)) ));
            														}
HXDLIN(  80)														int hitQuad8;
HXDLIN(  80)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)															hitQuad8 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            														}
            														else {
HXLINE(  80)															hitQuad8 = c3;
            														}
HXDLIN(  80)														::iterMagic::Iimg_obj::set(this33,index4,hitQuad8);
            													}
            												}
HXLINE(  73)												found = true;
            											}
            											else {
HXLINE(  80)												if (found) {
HXLINE(  80)													goto _hx_goto_96;
            												}
            											}
            										}
            									}
            									_hx_goto_96:;
            								}
            							}
            						}
            					}
            				}
HXDLIN(  80)				bool hasUndo1 = false;
HXDLIN(  80)				int aA = ((color >> 24) & 255);
HXDLIN(  80)				int rA = ((color >> 16) & 255);
HXDLIN(  80)				int gA = ((color >> 8) & 255);
HXDLIN(  80)				int bA = (color & 255);
HXDLIN(  80)				Float bcx = (bx - cx);
HXDLIN(  80)				Float bcy = (by - cy);
HXDLIN(  80)				Float acx = (ex - cx);
HXDLIN(  80)				Float acy = (ey - cy);
HXDLIN(  80)				Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  80)				Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  80)				Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  80)				Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN(  80)				if ((ex > bx)) {
HXLINE(  80)					if ((ex > cx)) {
HXLINE(  80)						int min4;
HXDLIN(  80)						if ((bx > cx)) {
HXLINE(  80)							min4 = ::Math_obj::floor(cx);
            						}
            						else {
HXLINE(  80)							min4 = ::Math_obj::floor(bx);
            						}
HXDLIN(  80)						int ii_min8 = min4;
HXDLIN(  80)						int ii_max8 = ::Math_obj::ceil(ex);
HXDLIN(  80)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            					}
            					else {
HXLINE(  80)						int ii_min9 = ::Math_obj::floor(bx);
HXDLIN(  80)						int ii_max9 = ::Math_obj::ceil(cx);
HXDLIN(  80)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            					}
            				}
            				else {
HXLINE(  80)					if ((bx > cx)) {
HXLINE(  80)						int min5;
HXDLIN(  80)						if ((ex > cx)) {
HXLINE(  80)							min5 = ::Math_obj::floor(cx);
            						}
            						else {
HXLINE(  80)							min5 = ::Math_obj::ceil(ex);
            						}
HXDLIN(  80)						int ii_min10 = min5;
HXDLIN(  80)						int ii_max10 = ::Math_obj::ceil(bx);
HXDLIN(  80)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            					}
            					else {
HXLINE(  80)						int ii_min11 = ::Math_obj::floor(ex);
HXDLIN(  80)						int ii_max11 = ::Math_obj::ceil(cx);
HXDLIN(  80)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            					}
            				}
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN(  80)				if ((ey > by)) {
HXLINE(  80)					if ((ey > cy)) {
HXLINE(  80)						int min6;
HXDLIN(  80)						if ((by > cy)) {
HXLINE(  80)							min6 = ::Math_obj::floor(cy);
            						}
            						else {
HXLINE(  80)							min6 = ::Math_obj::floor(by);
            						}
HXDLIN(  80)						int ii_min12 = min6;
HXDLIN(  80)						int ii_max12 = ::Math_obj::ceil(ey);
HXDLIN(  80)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            					}
            					else {
HXLINE(  80)						int ii_min13 = ::Math_obj::floor(by);
HXDLIN(  80)						int ii_max13 = ::Math_obj::ceil(cy);
HXDLIN(  80)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            					}
            				}
            				else {
HXLINE(  80)					if ((by > cy)) {
HXLINE(  80)						int min7;
HXDLIN(  80)						if ((ey > cy)) {
HXLINE(  80)							min7 = ::Math_obj::floor(cy);
            						}
            						else {
HXLINE(  80)							min7 = ::Math_obj::ceil(ey);
            						}
HXDLIN(  80)						int ii_min14 = min7;
HXDLIN(  80)						int ii_max14 = ::Math_obj::ceil(by);
HXDLIN(  80)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            					}
            					else {
HXLINE(  80)						int ii_min15 = ::Math_obj::floor(ey);
HXDLIN(  80)						int ii_max15 = ::Math_obj::ceil(cy);
HXDLIN(  80)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            					}
            				}
HXDLIN(  80)				 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN(  80)				if (hasUndo1) {
HXLINE(  80)					int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  80)					int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  80)					 ::Dynamic imageType1 = null();
HXDLIN(  80)					 ::pi_xy::ImageStruct this34 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  80)					if (::hx::IsNull( imageType1 )) {
HXLINE(  54)						imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  80)					::Dynamic undoImage4;
HXDLIN(  80)					switch((int)(( (int)(imageType1) ))){
            						case (int)0: {
HXLINE(  80)							 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::BytesImg b5 = byt1;
HXDLIN(  80)							{
HXLINE(  80)								b5->width = width1;
HXDLIN(  80)								b5->height = height1;
HXDLIN(  80)								b5->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  80)								b5->data = ::haxe::io::Bytes_obj::alloc((b5->length * 4));
HXDLIN(  80)								{
HXLINE(  80)									int len2 = b5->length;
HXDLIN(  80)									int w1 = 0;
HXDLIN(  80)									{
HXLINE(  80)										int _g20 = 0;
HXDLIN(  80)										int _g21 = b5->height;
HXDLIN(  80)										while((_g20 < _g21)){
HXLINE(  80)											_g20 = (_g20 + 1);
HXDLIN(  80)											int y4 = (_g20 - 1);
HXDLIN(  80)											{
HXLINE(  80)												int _g22 = 0;
HXDLIN(  80)												int _g23 = b5->width;
HXDLIN(  80)												while((_g22 < _g23)){
HXLINE(  80)													_g22 = (_g22 + 1);
HXDLIN(  80)													int x4 = (_g22 - 1);
HXDLIN(  80)													{
HXLINE(  80)														w1 = (w1 + 1);
HXDLIN(  80)														b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  80)													{
HXLINE(  80)														w1 = (w1 + 1);
HXDLIN(  80)														b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  80)													{
HXLINE(  80)														w1 = (w1 + 1);
HXDLIN(  80)														b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  80)													{
HXLINE(  80)														w1 = (w1 + 1);
HXDLIN(  80)														b5->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  80)							undoImage4 = b5;
            						}
            						break;
            						case (int)1: {
HXLINE(  80)							 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::ArrIntImg a6 = arrI1;
HXDLIN(  80)							{
HXLINE(  80)								a6->width = width1;
HXDLIN(  80)								a6->height = height1;
HXDLIN(  80)								a6->data = ::Array_obj< int >::__new(0);
HXDLIN(  80)								a6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  80)								{
HXLINE(  80)									int _g24 = 0;
HXDLIN(  80)									int _g25 = a6->length;
HXDLIN(  80)									while((_g24 < _g25)){
HXLINE(  80)										_g24 = (_g24 + 1);
HXDLIN(  80)										int i6 = (_g24 - 1);
HXDLIN(  80)										a6->data[i6] = 0;
            									}
            								}
            							}
HXDLIN(  80)							undoImage4 = a6;
            						}
            						break;
            						case (int)2: {
HXLINE(  80)							 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::U32ArrImg b6 = u32a1;
HXDLIN(  80)							{
HXLINE(  80)								b6->width = width1;
HXDLIN(  80)								b6->height = height1;
HXDLIN(  80)								b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  80)								int size1 = (b6->length * 4);
HXDLIN(  80)								b6->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN(  80)								{
HXLINE(  80)									int _g26 = 0;
HXDLIN(  80)									int _g27 = b6->length;
HXDLIN(  80)									while((_g26 < _g27)){
HXLINE(  80)										_g26 = (_g26 + 1);
HXDLIN(  80)										int i7 = (_g26 - 1);
HXDLIN(  80)										{
HXLINE(  80)											 ::haxe::io::ArrayBufferViewImpl this35 = b6->data;
HXDLIN(  80)											bool undoImage5;
HXDLIN(  80)											if ((i7 >= 0)) {
HXLINE(  80)												undoImage5 = (i7 < (this35->byteLength >> 2));
            											}
            											else {
HXLINE(  80)												undoImage5 = false;
            											}
HXDLIN(  80)											if (undoImage5) {
HXLINE(  80)												 ::haxe::io::Bytes _this1 = this35->bytes;
HXDLIN(  80)												int pos1 = ((i7 << 2) + this35->byteOffset);
HXDLIN(  80)												_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN(  80)												_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN(  80)												_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN(  80)												_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  80)							undoImage4 = b6;
            						}
            						break;
            						case (int)3: {
HXLINE(  80)							 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN(  80)							{
HXLINE(  80)								v2->width = width1;
HXDLIN(  80)								v2->height = height1;
HXDLIN(  80)								v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  80)								v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN(  80)								{
HXLINE(  80)									int _g28 = 0;
HXDLIN(  80)									int _g29 = v2->length;
HXDLIN(  80)									while((_g28 < _g29)){
HXLINE(  80)										_g28 = (_g28 + 1);
HXDLIN(  80)										int i8 = (_g28 - 1);
HXDLIN(  80)										v2->data->__unsafe_set(i8,0);
            									}
            								}
            							}
HXDLIN(  80)							undoImage4 = v2;
            						}
            						break;
            						case (int)4: {
HXLINE(  80)							 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::StackIntImg b7 = sInt1;
HXDLIN(  80)							{
HXLINE(  80)								b7->width = width1;
HXDLIN(  80)								b7->height = height1;
HXDLIN(  80)								b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN(  80)								b7->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  80)								{
HXLINE(  80)									int len3 = b7->length;
HXDLIN(  80)									 ::haxe::ds::GenericStack_Int d1 = b7->data;
HXDLIN(  80)									if (::hx::IsNull( d1->head )) {
HXLINE(  80)										int _g30 = 0;
HXDLIN(  80)										int _g31 = len3;
HXDLIN(  80)										while((_g30 < _g31)){
HXLINE(  80)											_g30 = (_g30 + 1);
HXDLIN(  80)											int i9 = (_g30 - 1);
HXDLIN(  80)											d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            										}
            									}
            									else {
HXLINE(  80)										int _g32 = 0;
HXDLIN(  80)										int _g33 = len3;
HXDLIN(  80)										while((_g32 < _g33)){
HXLINE(  80)											_g32 = (_g32 + 1);
HXDLIN(  80)											int i10 = (_g32 - 1);
HXDLIN(  80)											{
HXLINE(  80)												 ::haxe::ds::GenericCell_Int l1 = b7->data->head;
HXDLIN(  80)												 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN(  80)												{
HXLINE(  80)													int _g34 = 0;
HXDLIN(  80)													int _g35 = i10;
HXDLIN(  80)													while((_g34 < _g35)){
HXLINE(  80)														_g34 = (_g34 + 1);
HXDLIN(  80)														int i11 = (_g34 - 1);
HXLINE( 345)														prev1 = l1;
HXLINE( 346)														l1 = l1->next;
            													}
            												}
HXLINE(  80)												if (::hx::IsNull( prev1 )) {
HXLINE(  80)													b7->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  80)													l1 = null();
            												}
            												else {
HXLINE(  80)													prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN(  80)													l1 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  80)							undoImage4 = b7;
            						}
            						break;
            					}
HXDLIN(  80)					this34->image = undoImage4;
HXDLIN(  80)					this34->width = width1;
HXDLIN(  80)					this34->height = height1;
HXDLIN(  80)					this34->imageType = ( (int)(imageType1) );
HXDLIN(  80)					undoImage3 = this34;
HXDLIN(  80)					{
HXLINE(  80)						int rectLeft1 = xIter31->start;
HXDLIN(  80)						int rectTop1 = yIter31->start;
HXDLIN(  80)						int rectRight1 = xIter31->max;
HXDLIN(  80)						bool forceClear1 = false;
HXDLIN(  80)						{
HXLINE(  80)							int _g36 = rectTop1;
HXDLIN(  80)							int _g37 = yIter31->max;
HXDLIN(  80)							while((_g36 < _g37)){
HXLINE(  80)								_g36 = (_g36 + 1);
HXDLIN(  80)								int dy2 = (_g36 - 1);
HXDLIN(  80)								{
HXLINE(  80)									int _g38 = rectLeft1;
HXDLIN(  80)									int _g39 = rectRight1;
HXDLIN(  80)									while((_g38 < _g39)){
HXLINE(  80)										_g38 = (_g38 + 1);
HXDLIN(  80)										int dx2 = (_g38 - 1);
HXDLIN(  80)										::Dynamic this36 = pixelImage->image;
HXDLIN(  80)										int index5;
HXDLIN(  80)										if (pixelImage->useVirtualPos) {
HXLINE(  80)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  80)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            										}
HXDLIN(  80)										int c4 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN(  80)										int col1;
HXDLIN(  80)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)											col1 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXLINE(  80)											col1 = c4;
            										}
HXDLIN(  80)										bool hitQuad9;
HXDLIN(  80)										if (pixelImage->useMask) {
HXLINE(  80)											hitQuad9 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  80)											hitQuad9 = false;
            										}
HXDLIN(  80)										if (hitQuad9) {
HXLINE(  80)											 ::pi_xy::ImageStruct this37 = pixelImage->mask;
HXDLIN(  80)											::Dynamic this38 = this37->image;
HXDLIN(  80)											int index6;
HXDLIN(  80)											if (this37->useVirtualPos) {
HXLINE(  80)												index6 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this37->virtualY) * ( (Float)(this37->width) )) + dx2) - this37->virtualX));
            											}
            											else {
HXLINE(  80)												index6 = ::Std_obj::_hx_int(( (Float)(((dy2 * this37->width) + dx2)) ));
            											}
HXDLIN(  80)											int c5 = ::iterMagic::Iimg_obj::get(this38,index6);
HXDLIN(  80)											int v3;
HXDLIN(  80)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)												v3 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXLINE(  80)												v3 = c5;
            											}
HXDLIN(  80)											int maskPixel1 = v3;
HXDLIN(  80)											int this39 = col1;
HXDLIN(  80)											if ((maskPixel1 == 0)) {
HXLINE(  80)												col1 = this39;
            											}
            											else {
HXLINE(  80)												Float m01;
HXDLIN(  80)												int this40 = ((maskPixel1 >> 24) & 255);
HXDLIN(  80)												if ((this40 == 0)) {
HXLINE(  80)													m01 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m01 = (( (Float)(this40) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float m11;
HXDLIN(  80)												int this41 = ((maskPixel1 >> 16) & 255);
HXDLIN(  80)												if ((this41 == 0)) {
HXLINE(  80)													m11 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m11 = (( (Float)(this41) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float m21;
HXDLIN(  80)												int this42 = ((maskPixel1 >> 8) & 255);
HXDLIN(  80)												if ((this42 == 0)) {
HXLINE(  80)													m21 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m21 = (( (Float)(this42) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float m31;
HXDLIN(  80)												int this43 = (maskPixel1 & 255);
HXDLIN(  80)												if ((this43 == 0)) {
HXLINE(  80)													m31 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m31 = (( (Float)(this43) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this39 >> 24) & 255)) )));
HXDLIN(  80)												int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this39 >> 16) & 255)) )));
HXDLIN(  80)												int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this39 >> 8) & 255)) )));
HXDLIN(  80)												int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this39 & 255)) )));
HXDLIN(  80)												col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  80)										if ((col1 != 0)) {
HXLINE(  80)											int x5 = (dx2 - rectLeft1);
HXDLIN(  80)											int y5 = (dy2 - rectTop1);
HXDLIN(  80)											int c6 = col1;
HXDLIN(  80)											bool hitQuad10;
HXDLIN(  80)											if ((((c6 >> 24) & 255) < 254)) {
HXLINE(  80)												hitQuad10 = undoImage3->transparent;
            											}
            											else {
HXLINE(  80)												hitQuad10 = false;
            											}
HXDLIN(  80)											if (hitQuad10) {
HXLINE(  80)												int location2;
HXDLIN(  80)												if (undoImage3->useVirtualPos) {
HXLINE(  80)													location2 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            												}
            												else {
HXLINE(  80)													location2 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            												}
HXDLIN(  80)												int this44 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN(  80)												int this45;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													this45 = ((((((this44 >> 24) & 255) << 24) | ((this44 & 255) << 16)) | (((this44 >> 8) & 255) << 8)) | ((this44 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													this45 = this44;
            												}
HXDLIN(  80)												Float a13;
HXDLIN(  80)												int this46 = ((this45 >> 24) & 255);
HXDLIN(  80)												if ((this46 == 0)) {
HXLINE(  80)													a13 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													a13 = (( (Float)(this46) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float r12;
HXDLIN(  80)												int this47 = ((this45 >> 16) & 255);
HXDLIN(  80)												if ((this47 == 0)) {
HXLINE(  80)													r12 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													r12 = (( (Float)(this47) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float g12;
HXDLIN(  80)												int this48 = ((this45 >> 8) & 255);
HXDLIN(  80)												if ((this48 == 0)) {
HXLINE(  80)													g12 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													g12 = (( (Float)(this48) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float b13;
HXDLIN(  80)												int this49 = (this45 & 255);
HXDLIN(  80)												if ((this49 == 0)) {
HXLINE(  80)													b13 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													b13 = (( (Float)(this49) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float a22;
HXDLIN(  80)												int this50 = ((col1 >> 24) & 255);
HXDLIN(  80)												if ((this50 == 0)) {
HXLINE(  80)													a22 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													a22 = (( (Float)(this50) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float r22;
HXDLIN(  80)												int this51 = ((col1 >> 16) & 255);
HXDLIN(  80)												if ((this51 == 0)) {
HXLINE(  80)													r22 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													r22 = (( (Float)(this51) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float g22;
HXDLIN(  80)												int this52 = ((col1 >> 8) & 255);
HXDLIN(  80)												if ((this52 == 0)) {
HXLINE(  80)													g22 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													g22 = (( (Float)(this52) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float b23;
HXDLIN(  80)												int this53 = (col1 & 255);
HXDLIN(  80)												if ((this53 == 0)) {
HXLINE(  80)													b23 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													b23 = (( (Float)(this53) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN(  80)												int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN(  80)												int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN(  80)												int b8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN(  80)												int a7 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN(  80)												int blended2 = ((((a7 << 24) | (r4 << 16)) | (g4 << 8)) | b8);
HXDLIN(  80)												{
HXLINE(  80)													int hitQuad11;
HXDLIN(  80)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)														hitQuad11 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            													}
            													else {
HXLINE(  80)														hitQuad11 = blended2;
            													}
HXDLIN(  80)													::iterMagic::Iimg_obj::set(undoImage3->image,location2,hitQuad11);
            												}
            											}
            											else {
HXLINE(  80)												::Dynamic this54 = undoImage3->image;
HXDLIN(  80)												int index7;
HXDLIN(  80)												if (undoImage3->useVirtualPos) {
HXLINE(  80)													index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            												}
            												else {
HXLINE(  80)													index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            												}
HXDLIN(  80)												int hitQuad12;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													hitQuad12 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													hitQuad12 = c6;
            												}
HXDLIN(  80)												::iterMagic::Iimg_obj::set(this54,index7,hitQuad12);
            											}
            										}
            										else {
HXLINE(  80)											if (forceClear1) {
HXLINE(  80)												::Dynamic this55 = undoImage3->image;
HXDLIN(  80)												int x6 = (dx2 - rectLeft1);
HXDLIN(  80)												int y6 = (dy2 - rectTop1);
HXDLIN(  80)												int index8;
HXDLIN(  80)												if (undoImage3->useVirtualPos) {
HXLINE(  80)													index8 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x6) - undoImage3->virtualX));
            												}
            												else {
HXLINE(  80)													index8 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x6)) ));
            												}
HXDLIN(  80)												::iterMagic::Iimg_obj::set(this55,index8,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  80)				bool found1 = false;
HXDLIN(  80)				{
HXLINE(  80)					int _g_min2 = xIter31->start;
HXDLIN(  80)					int _g_max2 = xIter31->max;
HXDLIN(  80)					while((_g_min2 < _g_max2)){
HXLINE(  80)						_g_min2 = (_g_min2 + 1);
HXDLIN(  80)						int px1 = (_g_min2 - 1);
HXDLIN(  80)						Float pcx = (( (Float)(px1) ) - cx);
HXLINE( 619)						found1 = false;
HXLINE(  80)						{
HXLINE(  80)							int _g_min3 = yIter31->start;
HXDLIN(  80)							int _g_max3 = yIter31->max;
HXDLIN(  80)							while((_g_min3 < _g_max3)){
HXLINE(  80)								_g_min3 = (_g_min3 + 1);
HXDLIN(  80)								int py1 = (_g_min3 - 1);
HXDLIN(  80)								Float pcy = (( (Float)(py1) ) - cy);
HXDLIN(  80)								Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  80)								Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  80)								Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  80)								Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  80)								Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  80)								bool hitQuad13;
HXDLIN(  80)								bool hitQuad14;
HXDLIN(  80)								if ((ratioA >= 0)) {
HXLINE(  80)									hitQuad14 = (ratioB >= 0);
            								}
            								else {
HXLINE(  80)									hitQuad14 = false;
            								}
HXDLIN(  80)								if (hitQuad14) {
HXLINE(  80)									hitQuad13 = (ratioC >= 0);
            								}
            								else {
HXLINE(  80)									hitQuad13 = false;
            								}
HXDLIN(  80)								if (hitQuad13) {
HXLINE(  80)									int i12 = ::Std_obj::_hx_int((( (Float)(aA) ) * (soft * ratioB)));
HXDLIN(  80)									if ((i12 > 255)) {
HXLINE(  24)										i12 = 255;
            									}
HXLINE(  80)									if ((i12 < 0)) {
HXLINE(  25)										i12 = 0;
            									}
HXLINE(  80)									int a8 = i12;
HXDLIN(  80)									int i13 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN(  80)									if ((i13 > 255)) {
HXLINE(  24)										i13 = 255;
            									}
HXLINE(  80)									if ((i13 < 0)) {
HXLINE(  25)										i13 = 0;
            									}
HXLINE(  80)									int r5 = i13;
HXDLIN(  80)									int i14 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN(  80)									if ((i14 > 255)) {
HXLINE(  24)										i14 = 255;
            									}
HXLINE(  80)									if ((i14 < 0)) {
HXLINE(  25)										i14 = 0;
            									}
HXLINE(  80)									int g5 = i14;
HXDLIN(  80)									int i15 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN(  80)									if ((i15 > 255)) {
HXLINE(  24)										i15 = 255;
            									}
HXLINE(  80)									if ((i15 < 0)) {
HXLINE(  25)										i15 = 0;
            									}
HXLINE(  80)									int b9 = i15;
HXDLIN(  80)									{
HXLINE(  80)										int location3;
HXDLIN(  80)										if (pixelImage->useVirtualPos) {
HXLINE(  80)											location3 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  80)											location3 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            										}
HXDLIN(  80)										bool hitQuad15;
HXDLIN(  80)										if (pixelImage->transparent) {
HXLINE(  80)											hitQuad15 = (a8 < 254);
            										}
            										else {
HXLINE(  80)											hitQuad15 = false;
            										}
HXDLIN(  80)										if (hitQuad15) {
HXLINE(  80)											int this56 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN(  80)											int old;
HXDLIN(  80)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)												old = ((((((this56 >> 24) & 255) << 24) | ((this56 & 255) << 16)) | (((this56 >> 8) & 255) << 8)) | ((this56 >> 16) & 255));
            											}
            											else {
HXLINE(  80)												old = this56;
            											}
HXDLIN(  80)											int rhs = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN(  80)											Float a14;
HXDLIN(  80)											int this57 = ((old >> 24) & 255);
HXDLIN(  80)											if ((this57 == 0)) {
HXLINE(  80)												a14 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												a14 = (( (Float)(this57) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float r13;
HXDLIN(  80)											int this58 = ((old >> 16) & 255);
HXDLIN(  80)											if ((this58 == 0)) {
HXLINE(  80)												r13 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												r13 = (( (Float)(this58) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float g13;
HXDLIN(  80)											int this59 = ((old >> 8) & 255);
HXDLIN(  80)											if ((this59 == 0)) {
HXLINE(  80)												g13 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												g13 = (( (Float)(this59) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float b14;
HXDLIN(  80)											int this60 = (old & 255);
HXDLIN(  80)											if ((this60 == 0)) {
HXLINE(  80)												b14 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												b14 = (( (Float)(this60) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float a23;
HXDLIN(  80)											int this61 = ((rhs >> 24) & 255);
HXDLIN(  80)											if ((this61 == 0)) {
HXLINE(  80)												a23 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												a23 = (( (Float)(this61) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float r23;
HXDLIN(  80)											int this62 = ((rhs >> 16) & 255);
HXDLIN(  80)											if ((this62 == 0)) {
HXLINE(  80)												r23 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												r23 = (( (Float)(this62) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float g23;
HXDLIN(  80)											int this63 = ((rhs >> 8) & 255);
HXDLIN(  80)											if ((this63 == 0)) {
HXLINE(  80)												g23 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												g23 = (( (Float)(this63) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float b24;
HXDLIN(  80)											int this64 = (rhs & 255);
HXDLIN(  80)											if ((this64 == 0)) {
HXLINE(  80)												b24 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												b24 = (( (Float)(this64) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN(  80)											int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN(  80)											int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN(  80)											int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN(  80)											int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN(  80)											int blended3 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN(  80)											{
HXLINE(  80)												int hitQuad16;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													hitQuad16 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													hitQuad16 = blended3;
            												}
HXDLIN(  80)												::iterMagic::Iimg_obj::set(pixelImage->image,location3,hitQuad16);
            											}
            										}
            										else {
HXLINE(  80)											int value;
HXDLIN(  80)											if (pixelImage->isLittle) {
HXLINE(  80)												value = ((((a8 << 24) | (b9 << 16)) | (g5 << 8)) | r5);
            											}
            											else {
HXLINE(  80)												value = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
            											}
HXDLIN(  80)											::iterMagic::Iimg_obj::set(pixelImage->image,location3,value);
            										}
            									}
HXLINE( 633)									found1 = true;
            								}
            								else {
HXLINE(  80)									if (found1) {
HXLINE(  80)										goto _hx_goto_108;
            									}
            								}
            							}
            							_hx_goto_108:;
            						}
            					}
            				}
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN(  80)				int v_undoY;
HXDLIN(  80)				int v_undoX;
HXDLIN(  80)				Float v_ty;
HXDLIN(  80)				Float v_tx;
HXDLIN(  80)				Float v_t0;
HXDLIN(  80)				Float v_sy;
HXDLIN(  80)				Float v_sx;
HXDLIN(  80)				Float v_s0;
HXDLIN(  80)				Float v_A;
HXDLIN(  80)				Float ax1 = ex;
HXDLIN(  80)				Float ay1 = ey;
HXDLIN(  80)				 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN(  80)				Float bx2 = bx;
HXDLIN(  80)				Float by2 = by;
HXDLIN(  80)				Float cx2 = cx;
HXDLIN(  80)				Float cy2 = cy;
HXDLIN(  80)				bool adjustWinding1 = (((((ax1 * by2) - (bx2 * ay1)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay1) - (ax1 * cy2))) > 0);
HXDLIN(  80)				if (!(adjustWinding1)) {
HXLINE(  80)					Float bx_1 = bx2;
HXDLIN(  80)					Float by_1 = by2;
HXLINE(  24)					bx2 = cx2;
HXLINE(  25)					by2 = cy2;
HXLINE(  26)					cx2 = bx_1;
HXLINE(  27)					cy2 = by_1;
            				}
HXLINE(  80)				Float v_ax = ax1;
HXDLIN(  80)				Float v_ay = ay1;
HXDLIN(  80)				Float v_bx = bx2;
HXDLIN(  80)				Float v_by = by2;
HXDLIN(  80)				Float v_cx = cx2;
HXDLIN(  80)				Float v_cy = cy2;
HXDLIN(  80)				bool v_preCalculated = true;
HXDLIN(  80)				{
HXLINE(  80)					v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN(  80)					v_sx = (v_cy - v_ay);
HXDLIN(  80)					v_sy = (v_ax - v_cx);
HXDLIN(  80)					v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN(  80)					v_tx = (v_ay - v_by);
HXDLIN(  80)					v_ty = (v_bx - v_ax);
HXDLIN(  80)					v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN(  80)					Float a10 = v_ax;
HXDLIN(  80)					Float b15 = v_bx;
HXDLIN(  80)					Float c7 = v_cx;
HXDLIN(  80)					if ((a10 > b15)) {
HXLINE(  80)						if ((a10 > c7)) {
HXLINE(  80)							int min8;
HXDLIN(  80)							if ((b15 > c7)) {
HXLINE(  80)								min8 = ::Math_obj::floor(c7);
            							}
            							else {
HXLINE(  80)								min8 = ::Math_obj::floor(b15);
            							}
HXDLIN(  80)							int ii_min16 = min8;
HXDLIN(  80)							int ii_max16 = ::Math_obj::ceil(a10);
HXDLIN(  80)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            						}
            						else {
HXLINE(  80)							int ii_min17 = ::Math_obj::floor(b15);
HXDLIN(  80)							int ii_max17 = ::Math_obj::ceil(c7);
HXDLIN(  80)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            						}
            					}
            					else {
HXLINE(  80)						if ((b15 > c7)) {
HXLINE(  80)							int min9;
HXDLIN(  80)							if ((a10 > c7)) {
HXLINE(  80)								min9 = ::Math_obj::floor(c7);
            							}
            							else {
HXLINE(  80)								min9 = ::Math_obj::ceil(a10);
            							}
HXDLIN(  80)							int ii_min18 = min9;
HXDLIN(  80)							int ii_max18 = ::Math_obj::ceil(b15);
HXDLIN(  80)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            						}
            						else {
HXLINE(  80)							int ii_min19 = ::Math_obj::floor(a10);
HXDLIN(  80)							int ii_max19 = ::Math_obj::ceil(c7);
HXDLIN(  80)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            						}
            					}
HXDLIN(  80)					Float a15 = v_ay;
HXDLIN(  80)					Float b16 = v_by;
HXDLIN(  80)					Float c8 = v_cy;
HXDLIN(  80)					if ((a15 > b16)) {
HXLINE(  80)						if ((a15 > c8)) {
HXLINE(  80)							int min10;
HXDLIN(  80)							if ((b16 > c8)) {
HXLINE(  80)								min10 = ::Math_obj::floor(c8);
            							}
            							else {
HXLINE(  80)								min10 = ::Math_obj::floor(b16);
            							}
HXDLIN(  80)							int ii_min20 = min10;
HXDLIN(  80)							int ii_max20 = ::Math_obj::ceil(a15);
HXDLIN(  80)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            						}
            						else {
HXLINE(  80)							int ii_min21 = ::Math_obj::floor(b16);
HXDLIN(  80)							int ii_max21 = ::Math_obj::ceil(c8);
HXDLIN(  80)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            						}
            					}
            					else {
HXLINE(  80)						if ((b16 > c8)) {
HXLINE(  80)							int min11;
HXDLIN(  80)							if ((a15 > c8)) {
HXLINE(  80)								min11 = ::Math_obj::floor(c8);
            							}
            							else {
HXLINE(  80)								min11 = ::Math_obj::ceil(a15);
            							}
HXDLIN(  80)							int ii_min22 = min11;
HXDLIN(  80)							int ii_max22 = ::Math_obj::ceil(b16);
HXDLIN(  80)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            						}
            						else {
HXLINE(  80)							int ii_min23 = ::Math_obj::floor(a15);
HXDLIN(  80)							int ii_max23 = ::Math_obj::ceil(c8);
HXDLIN(  80)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            						}
            					}
            				}
HXDLIN(  80)				if (hasUndo1) {
HXLINE(  80)					v_undoImage = undoImage3;
HXDLIN(  80)					v_undoX = xIter31->start;
HXDLIN(  80)					v_undoY = yIter31->start;
            				}
HXDLIN(  80)				bool hasUndo2 = false;
HXDLIN(  80)				int aA1 = ((color >> 24) & 255);
HXDLIN(  80)				int rA1 = ((color >> 16) & 255);
HXDLIN(  80)				int gA1 = ((color >> 8) & 255);
HXDLIN(  80)				int bA1 = (color & 255);
HXDLIN(  80)				Float bcx1 = (cx - dx);
HXDLIN(  80)				Float bcy1 = (cy - dy);
HXDLIN(  80)				Float acx1 = (ex - dx);
HXDLIN(  80)				Float acy1 = (ey - dy);
HXDLIN(  80)				Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  80)				Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  80)				Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  80)				Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN(  80)				if ((ex > cx)) {
HXLINE(  80)					if ((ex > dx)) {
HXLINE(  80)						int min12;
HXDLIN(  80)						if ((cx > dx)) {
HXLINE(  80)							min12 = ::Math_obj::floor(dx);
            						}
            						else {
HXLINE(  80)							min12 = ::Math_obj::floor(cx);
            						}
HXDLIN(  80)						int ii_min24 = min12;
HXDLIN(  80)						int ii_max24 = ::Math_obj::ceil(ex);
HXDLIN(  80)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            					}
            					else {
HXLINE(  80)						int ii_min25 = ::Math_obj::floor(cx);
HXDLIN(  80)						int ii_max25 = ::Math_obj::ceil(dx);
HXDLIN(  80)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            					}
            				}
            				else {
HXLINE(  80)					if ((cx > dx)) {
HXLINE(  80)						int min13;
HXDLIN(  80)						if ((ex > dx)) {
HXLINE(  80)							min13 = ::Math_obj::floor(dx);
            						}
            						else {
HXLINE(  80)							min13 = ::Math_obj::ceil(ex);
            						}
HXDLIN(  80)						int ii_min26 = min13;
HXDLIN(  80)						int ii_max26 = ::Math_obj::ceil(cx);
HXDLIN(  80)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            					}
            					else {
HXLINE(  80)						int ii_min27 = ::Math_obj::floor(ex);
HXDLIN(  80)						int ii_max27 = ::Math_obj::ceil(dx);
HXDLIN(  80)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            					}
            				}
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN(  80)				if ((ey > cy)) {
HXLINE(  80)					if ((ey > dy)) {
HXLINE(  80)						int min14;
HXDLIN(  80)						if ((cy > dy)) {
HXLINE(  80)							min14 = ::Math_obj::floor(dy);
            						}
            						else {
HXLINE(  80)							min14 = ::Math_obj::floor(cy);
            						}
HXDLIN(  80)						int ii_min28 = min14;
HXDLIN(  80)						int ii_max28 = ::Math_obj::ceil(ey);
HXDLIN(  80)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            					}
            					else {
HXLINE(  80)						int ii_min29 = ::Math_obj::floor(cy);
HXDLIN(  80)						int ii_max29 = ::Math_obj::ceil(dy);
HXDLIN(  80)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            					}
            				}
            				else {
HXLINE(  80)					if ((cy > dy)) {
HXLINE(  80)						int min15;
HXDLIN(  80)						if ((ey > dy)) {
HXLINE(  80)							min15 = ::Math_obj::floor(dy);
            						}
            						else {
HXLINE(  80)							min15 = ::Math_obj::ceil(ey);
            						}
HXDLIN(  80)						int ii_min30 = min15;
HXDLIN(  80)						int ii_max30 = ::Math_obj::ceil(cy);
HXDLIN(  80)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            					}
            					else {
HXLINE(  80)						int ii_min31 = ::Math_obj::floor(ey);
HXDLIN(  80)						int ii_max31 = ::Math_obj::ceil(dy);
HXDLIN(  80)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            					}
            				}
HXDLIN(  80)				 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN(  80)				if (hasUndo2) {
HXLINE(  80)					int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  80)					int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  80)					 ::Dynamic imageType2 = null();
HXDLIN(  80)					 ::pi_xy::ImageStruct this65 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  80)					if (::hx::IsNull( imageType2 )) {
HXLINE(  54)						imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  80)					::Dynamic undoImage7;
HXDLIN(  80)					switch((int)(( (int)(imageType2) ))){
            						case (int)0: {
HXLINE(  80)							 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::BytesImg b17 = byt2;
HXDLIN(  80)							{
HXLINE(  80)								b17->width = width2;
HXDLIN(  80)								b17->height = height2;
HXDLIN(  80)								b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  80)								b17->data = ::haxe::io::Bytes_obj::alloc((b17->length * 4));
HXDLIN(  80)								{
HXLINE(  80)									int len4 = b17->length;
HXDLIN(  80)									int w2 = 0;
HXDLIN(  80)									{
HXLINE(  80)										int _g40 = 0;
HXDLIN(  80)										int _g41 = b17->height;
HXDLIN(  80)										while((_g40 < _g41)){
HXLINE(  80)											_g40 = (_g40 + 1);
HXDLIN(  80)											int y7 = (_g40 - 1);
HXDLIN(  80)											{
HXLINE(  80)												int _g42 = 0;
HXDLIN(  80)												int _g43 = b17->width;
HXDLIN(  80)												while((_g42 < _g43)){
HXLINE(  80)													_g42 = (_g42 + 1);
HXDLIN(  80)													int x7 = (_g42 - 1);
HXDLIN(  80)													{
HXLINE(  80)														w2 = (w2 + 1);
HXDLIN(  80)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  80)													{
HXLINE(  80)														w2 = (w2 + 1);
HXDLIN(  80)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  80)													{
HXLINE(  80)														w2 = (w2 + 1);
HXDLIN(  80)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  80)													{
HXLINE(  80)														w2 = (w2 + 1);
HXDLIN(  80)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  80)							undoImage7 = b17;
            						}
            						break;
            						case (int)1: {
HXLINE(  80)							 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::ArrIntImg a16 = arrI2;
HXDLIN(  80)							{
HXLINE(  80)								a16->width = width2;
HXDLIN(  80)								a16->height = height2;
HXDLIN(  80)								a16->data = ::Array_obj< int >::__new(0);
HXDLIN(  80)								a16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  80)								{
HXLINE(  80)									int _g44 = 0;
HXDLIN(  80)									int _g45 = a16->length;
HXDLIN(  80)									while((_g44 < _g45)){
HXLINE(  80)										_g44 = (_g44 + 1);
HXDLIN(  80)										int i16 = (_g44 - 1);
HXDLIN(  80)										a16->data[i16] = 0;
            									}
            								}
            							}
HXDLIN(  80)							undoImage7 = a16;
            						}
            						break;
            						case (int)2: {
HXLINE(  80)							 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::U32ArrImg b18 = u32a2;
HXDLIN(  80)							{
HXLINE(  80)								b18->width = width2;
HXDLIN(  80)								b18->height = height2;
HXDLIN(  80)								b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  80)								int size2 = (b18->length * 4);
HXDLIN(  80)								b18->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN(  80)								{
HXLINE(  80)									int _g46 = 0;
HXDLIN(  80)									int _g47 = b18->length;
HXDLIN(  80)									while((_g46 < _g47)){
HXLINE(  80)										_g46 = (_g46 + 1);
HXDLIN(  80)										int i17 = (_g46 - 1);
HXDLIN(  80)										{
HXLINE(  80)											 ::haxe::io::ArrayBufferViewImpl this66 = b18->data;
HXDLIN(  80)											bool undoImage8;
HXDLIN(  80)											if ((i17 >= 0)) {
HXLINE(  80)												undoImage8 = (i17 < (this66->byteLength >> 2));
            											}
            											else {
HXLINE(  80)												undoImage8 = false;
            											}
HXDLIN(  80)											if (undoImage8) {
HXLINE(  80)												 ::haxe::io::Bytes _this2 = this66->bytes;
HXDLIN(  80)												int pos2 = ((i17 << 2) + this66->byteOffset);
HXDLIN(  80)												_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN(  80)												_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN(  80)												_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN(  80)												_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  80)							undoImage7 = b18;
            						}
            						break;
            						case (int)3: {
HXLINE(  80)							 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::VecIntImg v4 = vec2;
HXDLIN(  80)							{
HXLINE(  80)								v4->width = width2;
HXDLIN(  80)								v4->height = height2;
HXDLIN(  80)								v4->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  80)								v4->data = ::Array_obj< int >::__new(v4->length);
HXDLIN(  80)								{
HXLINE(  80)									int _g48 = 0;
HXDLIN(  80)									int _g49 = v4->length;
HXDLIN(  80)									while((_g48 < _g49)){
HXLINE(  80)										_g48 = (_g48 + 1);
HXDLIN(  80)										int i18 = (_g48 - 1);
HXDLIN(  80)										v4->data->__unsafe_set(i18,0);
            									}
            								}
            							}
HXDLIN(  80)							undoImage7 = v4;
            						}
            						break;
            						case (int)4: {
HXLINE(  80)							 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::StackIntImg b19 = sInt2;
HXDLIN(  80)							{
HXLINE(  80)								b19->width = width2;
HXDLIN(  80)								b19->height = height2;
HXDLIN(  80)								b19->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN(  80)								b19->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  80)								{
HXLINE(  80)									int len5 = b19->length;
HXDLIN(  80)									 ::haxe::ds::GenericStack_Int d2 = b19->data;
HXDLIN(  80)									if (::hx::IsNull( d2->head )) {
HXLINE(  80)										int _g50 = 0;
HXDLIN(  80)										int _g51 = len5;
HXDLIN(  80)										while((_g50 < _g51)){
HXLINE(  80)											_g50 = (_g50 + 1);
HXDLIN(  80)											int i19 = (_g50 - 1);
HXDLIN(  80)											d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            										}
            									}
            									else {
HXLINE(  80)										int _g52 = 0;
HXDLIN(  80)										int _g53 = len5;
HXDLIN(  80)										while((_g52 < _g53)){
HXLINE(  80)											_g52 = (_g52 + 1);
HXDLIN(  80)											int i20 = (_g52 - 1);
HXDLIN(  80)											{
HXLINE(  80)												 ::haxe::ds::GenericCell_Int l2 = b19->data->head;
HXDLIN(  80)												 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN(  80)												{
HXLINE(  80)													int _g54 = 0;
HXDLIN(  80)													int _g55 = i20;
HXDLIN(  80)													while((_g54 < _g55)){
HXLINE(  80)														_g54 = (_g54 + 1);
HXDLIN(  80)														int i21 = (_g54 - 1);
HXLINE( 345)														prev2 = l2;
HXLINE( 346)														l2 = l2->next;
            													}
            												}
HXLINE(  80)												if (::hx::IsNull( prev2 )) {
HXLINE(  80)													b19->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  80)													l2 = null();
            												}
            												else {
HXLINE(  80)													prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN(  80)													l2 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  80)							undoImage7 = b19;
            						}
            						break;
            					}
HXDLIN(  80)					this65->image = undoImage7;
HXDLIN(  80)					this65->width = width2;
HXDLIN(  80)					this65->height = height2;
HXDLIN(  80)					this65->imageType = ( (int)(imageType2) );
HXDLIN(  80)					undoImage6 = this65;
HXDLIN(  80)					{
HXLINE(  80)						int rectLeft2 = xIter32->start;
HXDLIN(  80)						int rectTop2 = yIter32->start;
HXDLIN(  80)						int rectRight2 = xIter32->max;
HXDLIN(  80)						bool forceClear2 = false;
HXDLIN(  80)						{
HXLINE(  80)							int _g56 = rectTop2;
HXDLIN(  80)							int _g57 = yIter32->max;
HXDLIN(  80)							while((_g56 < _g57)){
HXLINE(  80)								_g56 = (_g56 + 1);
HXDLIN(  80)								int dy3 = (_g56 - 1);
HXDLIN(  80)								{
HXLINE(  80)									int _g58 = rectLeft2;
HXDLIN(  80)									int _g59 = rectRight2;
HXDLIN(  80)									while((_g58 < _g59)){
HXLINE(  80)										_g58 = (_g58 + 1);
HXDLIN(  80)										int dx3 = (_g58 - 1);
HXDLIN(  80)										::Dynamic this67 = pixelImage->image;
HXDLIN(  80)										int index9;
HXDLIN(  80)										if (pixelImage->useVirtualPos) {
HXLINE(  80)											index9 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx3) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  80)											index9 = ::Std_obj::_hx_int(( (Float)(((dy3 * pixelImage->width) + dx3)) ));
            										}
HXDLIN(  80)										int c9 = ::iterMagic::Iimg_obj::get(this67,index9);
HXDLIN(  80)										int col2;
HXDLIN(  80)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)											col2 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            										}
            										else {
HXLINE(  80)											col2 = c9;
            										}
HXDLIN(  80)										bool hitQuad17;
HXDLIN(  80)										if (pixelImage->useMask) {
HXLINE(  80)											hitQuad17 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  80)											hitQuad17 = false;
            										}
HXDLIN(  80)										if (hitQuad17) {
HXLINE(  80)											 ::pi_xy::ImageStruct this68 = pixelImage->mask;
HXDLIN(  80)											::Dynamic this69 = this68->image;
HXDLIN(  80)											int index10;
HXDLIN(  80)											if (this68->useVirtualPos) {
HXLINE(  80)												index10 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this68->virtualY) * ( (Float)(this68->width) )) + dx3) - this68->virtualX));
            											}
            											else {
HXLINE(  80)												index10 = ::Std_obj::_hx_int(( (Float)(((dy3 * this68->width) + dx3)) ));
            											}
HXDLIN(  80)											int c10 = ::iterMagic::Iimg_obj::get(this69,index10);
HXDLIN(  80)											int v5;
HXDLIN(  80)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)												v5 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            											}
            											else {
HXLINE(  80)												v5 = c10;
            											}
HXDLIN(  80)											int maskPixel2 = v5;
HXDLIN(  80)											int this70 = col2;
HXDLIN(  80)											if ((maskPixel2 == 0)) {
HXLINE(  80)												col2 = this70;
            											}
            											else {
HXLINE(  80)												Float m02;
HXDLIN(  80)												int this71 = ((maskPixel2 >> 24) & 255);
HXDLIN(  80)												if ((this71 == 0)) {
HXLINE(  80)													m02 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m02 = (( (Float)(this71) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float m12;
HXDLIN(  80)												int this72 = ((maskPixel2 >> 16) & 255);
HXDLIN(  80)												if ((this72 == 0)) {
HXLINE(  80)													m12 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m12 = (( (Float)(this72) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float m22;
HXDLIN(  80)												int this73 = ((maskPixel2 >> 8) & 255);
HXDLIN(  80)												if ((this73 == 0)) {
HXLINE(  80)													m22 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m22 = (( (Float)(this73) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float m32;
HXDLIN(  80)												int this74 = (maskPixel2 & 255);
HXDLIN(  80)												if ((this74 == 0)) {
HXLINE(  80)													m32 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m32 = (( (Float)(this74) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this70 >> 24) & 255)) )));
HXDLIN(  80)												int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this70 >> 16) & 255)) )));
HXDLIN(  80)												int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this70 >> 8) & 255)) )));
HXDLIN(  80)												int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this70 & 255)) )));
HXDLIN(  80)												col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  80)										if ((col2 != 0)) {
HXLINE(  80)											int x8 = (dx3 - rectLeft2);
HXDLIN(  80)											int y8 = (dy3 - rectTop2);
HXDLIN(  80)											int c11 = col2;
HXDLIN(  80)											bool hitQuad18;
HXDLIN(  80)											if ((((c11 >> 24) & 255) < 254)) {
HXLINE(  80)												hitQuad18 = undoImage6->transparent;
            											}
            											else {
HXLINE(  80)												hitQuad18 = false;
            											}
HXDLIN(  80)											if (hitQuad18) {
HXLINE(  80)												int location4;
HXDLIN(  80)												if (undoImage6->useVirtualPos) {
HXLINE(  80)													location4 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            												}
            												else {
HXLINE(  80)													location4 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            												}
HXDLIN(  80)												int this75 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN(  80)												int this76;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													this76 = ((((((this75 >> 24) & 255) << 24) | ((this75 & 255) << 16)) | (((this75 >> 8) & 255) << 8)) | ((this75 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													this76 = this75;
            												}
HXDLIN(  80)												Float a17;
HXDLIN(  80)												int this77 = ((this76 >> 24) & 255);
HXDLIN(  80)												if ((this77 == 0)) {
HXLINE(  80)													a17 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													a17 = (( (Float)(this77) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float r14;
HXDLIN(  80)												int this78 = ((this76 >> 16) & 255);
HXDLIN(  80)												if ((this78 == 0)) {
HXLINE(  80)													r14 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													r14 = (( (Float)(this78) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float g14;
HXDLIN(  80)												int this79 = ((this76 >> 8) & 255);
HXDLIN(  80)												if ((this79 == 0)) {
HXLINE(  80)													g14 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													g14 = (( (Float)(this79) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float b110;
HXDLIN(  80)												int this80 = (this76 & 255);
HXDLIN(  80)												if ((this80 == 0)) {
HXLINE(  80)													b110 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													b110 = (( (Float)(this80) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float a24;
HXDLIN(  80)												int this81 = ((col2 >> 24) & 255);
HXDLIN(  80)												if ((this81 == 0)) {
HXLINE(  80)													a24 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													a24 = (( (Float)(this81) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float r24;
HXDLIN(  80)												int this82 = ((col2 >> 16) & 255);
HXDLIN(  80)												if ((this82 == 0)) {
HXLINE(  80)													r24 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													r24 = (( (Float)(this82) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float g24;
HXDLIN(  80)												int this83 = ((col2 >> 8) & 255);
HXDLIN(  80)												if ((this83 == 0)) {
HXLINE(  80)													g24 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													g24 = (( (Float)(this83) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float b25;
HXDLIN(  80)												int this84 = (col2 & 255);
HXDLIN(  80)												if ((this84 == 0)) {
HXLINE(  80)													b25 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													b25 = (( (Float)(this84) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float a34 = (a17 * (( (Float)(1) ) - a24));
HXDLIN(  80)												int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN(  80)												int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN(  80)												int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a34) + (b25 * a24))));
HXDLIN(  80)												int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN(  80)												int blended4 = ((((a18 << 24) | (r7 << 16)) | (g7 << 8)) | b20);
HXDLIN(  80)												{
HXLINE(  80)													int hitQuad19;
HXDLIN(  80)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)														hitQuad19 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            													}
            													else {
HXLINE(  80)														hitQuad19 = blended4;
            													}
HXDLIN(  80)													::iterMagic::Iimg_obj::set(undoImage6->image,location4,hitQuad19);
            												}
            											}
            											else {
HXLINE(  80)												::Dynamic this85 = undoImage6->image;
HXDLIN(  80)												int index11;
HXDLIN(  80)												if (undoImage6->useVirtualPos) {
HXLINE(  80)													index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            												}
            												else {
HXLINE(  80)													index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            												}
HXDLIN(  80)												int hitQuad20;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													hitQuad20 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													hitQuad20 = c11;
            												}
HXDLIN(  80)												::iterMagic::Iimg_obj::set(this85,index11,hitQuad20);
            											}
            										}
            										else {
HXLINE(  80)											if (forceClear2) {
HXLINE(  80)												::Dynamic this86 = undoImage6->image;
HXDLIN(  80)												int x9 = (dx3 - rectLeft2);
HXDLIN(  80)												int y9 = (dy3 - rectTop2);
HXDLIN(  80)												int index12;
HXDLIN(  80)												if (undoImage6->useVirtualPos) {
HXLINE(  80)													index12 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            												}
            												else {
HXLINE(  80)													index12 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            												}
HXDLIN(  80)												::iterMagic::Iimg_obj::set(this86,index12,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  80)				bool found2 = false;
HXDLIN(  80)				{
HXLINE(  80)					int _g_min4 = xIter32->start;
HXDLIN(  80)					int _g_max4 = xIter32->max;
HXDLIN(  80)					while((_g_min4 < _g_max4)){
HXLINE(  80)						_g_min4 = (_g_min4 + 1);
HXDLIN(  80)						int px2 = (_g_min4 - 1);
HXDLIN(  80)						Float pcx1 = (( (Float)(px2) ) - dx);
HXLINE( 619)						found2 = false;
HXLINE(  80)						{
HXLINE(  80)							int _g_min5 = yIter32->start;
HXDLIN(  80)							int _g_max5 = yIter32->max;
HXDLIN(  80)							while((_g_min5 < _g_max5)){
HXLINE(  80)								_g_min5 = (_g_min5 + 1);
HXDLIN(  80)								int py2 = (_g_min5 - 1);
HXDLIN(  80)								Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN(  80)								Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN(  80)								Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN(  80)								Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN(  80)								Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN(  80)								Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN(  80)								bool hitQuad21;
HXDLIN(  80)								bool hitQuad22;
HXDLIN(  80)								if ((ratioA1 >= 0)) {
HXLINE(  80)									hitQuad22 = (ratioB1 >= 0);
            								}
            								else {
HXLINE(  80)									hitQuad22 = false;
            								}
HXDLIN(  80)								if (hitQuad22) {
HXLINE(  80)									hitQuad21 = (ratioC1 >= 0);
            								}
            								else {
HXLINE(  80)									hitQuad21 = false;
            								}
HXDLIN(  80)								if (hitQuad21) {
HXLINE(  80)									int i22 = ::Std_obj::_hx_int((( (Float)(aA1) ) * (soft * ratioB1)));
HXDLIN(  80)									if ((i22 > 255)) {
HXLINE(  24)										i22 = 255;
            									}
HXLINE(  80)									if ((i22 < 0)) {
HXLINE(  25)										i22 = 0;
            									}
HXLINE(  80)									int a19 = i22;
HXDLIN(  80)									int i23 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN(  80)									if ((i23 > 255)) {
HXLINE(  24)										i23 = 255;
            									}
HXLINE(  80)									if ((i23 < 0)) {
HXLINE(  25)										i23 = 0;
            									}
HXLINE(  80)									int r8 = i23;
HXDLIN(  80)									int i24 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN(  80)									if ((i24 > 255)) {
HXLINE(  24)										i24 = 255;
            									}
HXLINE(  80)									if ((i24 < 0)) {
HXLINE(  25)										i24 = 0;
            									}
HXLINE(  80)									int g8 = i24;
HXDLIN(  80)									int i25 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN(  80)									if ((i25 > 255)) {
HXLINE(  24)										i25 = 255;
            									}
HXLINE(  80)									if ((i25 < 0)) {
HXLINE(  25)										i25 = 0;
            									}
HXLINE(  80)									int b26 = i25;
HXDLIN(  80)									{
HXLINE(  80)										int location5;
HXDLIN(  80)										if (pixelImage->useVirtualPos) {
HXLINE(  80)											location5 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  80)											location5 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            										}
HXDLIN(  80)										bool hitQuad23;
HXDLIN(  80)										if (pixelImage->transparent) {
HXLINE(  80)											hitQuad23 = (a19 < 254);
            										}
            										else {
HXLINE(  80)											hitQuad23 = false;
            										}
HXDLIN(  80)										if (hitQuad23) {
HXLINE(  80)											int this87 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN(  80)											int old1;
HXDLIN(  80)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)												old1 = ((((((this87 >> 24) & 255) << 24) | ((this87 & 255) << 16)) | (((this87 >> 8) & 255) << 8)) | ((this87 >> 16) & 255));
            											}
            											else {
HXLINE(  80)												old1 = this87;
            											}
HXDLIN(  80)											int rhs1 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b26);
HXDLIN(  80)											Float a110;
HXDLIN(  80)											int this88 = ((old1 >> 24) & 255);
HXDLIN(  80)											if ((this88 == 0)) {
HXLINE(  80)												a110 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												a110 = (( (Float)(this88) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float r15;
HXDLIN(  80)											int this89 = ((old1 >> 16) & 255);
HXDLIN(  80)											if ((this89 == 0)) {
HXLINE(  80)												r15 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												r15 = (( (Float)(this89) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float g15;
HXDLIN(  80)											int this90 = ((old1 >> 8) & 255);
HXDLIN(  80)											if ((this90 == 0)) {
HXLINE(  80)												g15 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												g15 = (( (Float)(this90) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float b111;
HXDLIN(  80)											int this91 = (old1 & 255);
HXDLIN(  80)											if ((this91 == 0)) {
HXLINE(  80)												b111 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												b111 = (( (Float)(this91) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float a25;
HXDLIN(  80)											int this92 = ((rhs1 >> 24) & 255);
HXDLIN(  80)											if ((this92 == 0)) {
HXLINE(  80)												a25 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												a25 = (( (Float)(this92) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float r25;
HXDLIN(  80)											int this93 = ((rhs1 >> 16) & 255);
HXDLIN(  80)											if ((this93 == 0)) {
HXLINE(  80)												r25 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												r25 = (( (Float)(this93) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float g25;
HXDLIN(  80)											int this94 = ((rhs1 >> 8) & 255);
HXDLIN(  80)											if ((this94 == 0)) {
HXLINE(  80)												g25 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												g25 = (( (Float)(this94) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float b27;
HXDLIN(  80)											int this95 = (rhs1 & 255);
HXDLIN(  80)											if ((this95 == 0)) {
HXLINE(  80)												b27 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												b27 = (( (Float)(this95) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float a35 = (a110 * (( (Float)(1) ) - a25));
HXDLIN(  80)											int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN(  80)											int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN(  80)											int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a35) + (b27 * a25))));
HXDLIN(  80)											int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN(  80)											int blended5 = ((((a20 << 24) | (r9 << 16)) | (g9 << 8)) | b28);
HXDLIN(  80)											{
HXLINE(  80)												int hitQuad24;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													hitQuad24 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													hitQuad24 = blended5;
            												}
HXDLIN(  80)												::iterMagic::Iimg_obj::set(pixelImage->image,location5,hitQuad24);
            											}
            										}
            										else {
HXLINE(  80)											int value1;
HXDLIN(  80)											if (pixelImage->isLittle) {
HXLINE(  80)												value1 = ((((a19 << 24) | (b26 << 16)) | (g8 << 8)) | r8);
            											}
            											else {
HXLINE(  80)												value1 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b26);
            											}
HXDLIN(  80)											::iterMagic::Iimg_obj::set(pixelImage->image,location5,value1);
            										}
            									}
HXLINE( 633)									found2 = true;
            								}
            								else {
HXLINE(  80)									if (found2) {
HXLINE(  80)										goto _hx_goto_120;
            									}
            								}
            							}
            							_hx_goto_120:;
            						}
            					}
            				}
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart v_yIter31;
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart v_xIter31;
HXDLIN(  80)				int v_undoY1;
HXDLIN(  80)				int v_undoX1;
HXDLIN(  80)				Float v_ty1;
HXDLIN(  80)				Float v_tx1;
HXDLIN(  80)				Float v_t01;
HXDLIN(  80)				Float v_sy1;
HXDLIN(  80)				Float v_sx1;
HXDLIN(  80)				Float v_s01;
HXDLIN(  80)				Float v_A1;
HXDLIN(  80)				Float ax2 = ex;
HXDLIN(  80)				Float ay2 = ey;
HXDLIN(  80)				 ::pi_xy::ImageStruct v_undoImage1 = null();
HXDLIN(  80)				Float bx3 = cx;
HXDLIN(  80)				Float by3 = cy;
HXDLIN(  80)				Float cx3 = dx;
HXDLIN(  80)				Float cy3 = dy;
HXDLIN(  80)				bool adjustWinding2 = (((((ax2 * by3) - (bx3 * ay2)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * ay2) - (ax2 * cy3))) > 0);
HXDLIN(  80)				if (!(adjustWinding2)) {
HXLINE(  80)					Float bx_2 = bx3;
HXDLIN(  80)					Float by_2 = by3;
HXLINE(  24)					bx3 = cx3;
HXLINE(  25)					by3 = cy3;
HXLINE(  26)					cx3 = bx_2;
HXLINE(  27)					cy3 = by_2;
            				}
HXLINE(  80)				Float v_ax1 = ax2;
HXDLIN(  80)				Float v_ay1 = ay2;
HXDLIN(  80)				Float v_bx1 = bx3;
HXDLIN(  80)				Float v_by1 = by3;
HXDLIN(  80)				Float v_cx1 = cx3;
HXDLIN(  80)				Float v_cy1 = cy3;
HXDLIN(  80)				bool v_preCalculated1 = true;
HXDLIN(  80)				{
HXLINE(  80)					v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN(  80)					v_sx1 = (v_cy1 - v_ay1);
HXDLIN(  80)					v_sy1 = (v_ax1 - v_cx1);
HXDLIN(  80)					v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN(  80)					v_tx1 = (v_ay1 - v_by1);
HXDLIN(  80)					v_ty1 = (v_bx1 - v_ax1);
HXDLIN(  80)					v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN(  80)					Float a26 = v_ax1;
HXDLIN(  80)					Float b29 = v_bx1;
HXDLIN(  80)					Float c12 = v_cx1;
HXDLIN(  80)					if ((a26 > b29)) {
HXLINE(  80)						if ((a26 > c12)) {
HXLINE(  80)							int min16;
HXDLIN(  80)							if ((b29 > c12)) {
HXLINE(  80)								min16 = ::Math_obj::floor(c12);
            							}
            							else {
HXLINE(  80)								min16 = ::Math_obj::floor(b29);
            							}
HXDLIN(  80)							int ii_min32 = min16;
HXDLIN(  80)							int ii_max32 = ::Math_obj::ceil(a26);
HXDLIN(  80)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            						}
            						else {
HXLINE(  80)							int ii_min33 = ::Math_obj::floor(b29);
HXDLIN(  80)							int ii_max33 = ::Math_obj::ceil(c12);
HXDLIN(  80)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            						}
            					}
            					else {
HXLINE(  80)						if ((b29 > c12)) {
HXLINE(  80)							int min17;
HXDLIN(  80)							if ((a26 > c12)) {
HXLINE(  80)								min17 = ::Math_obj::floor(c12);
            							}
            							else {
HXLINE(  80)								min17 = ::Math_obj::ceil(a26);
            							}
HXDLIN(  80)							int ii_min34 = min17;
HXDLIN(  80)							int ii_max34 = ::Math_obj::ceil(b29);
HXDLIN(  80)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            						}
            						else {
HXLINE(  80)							int ii_min35 = ::Math_obj::floor(a26);
HXDLIN(  80)							int ii_max35 = ::Math_obj::ceil(c12);
HXDLIN(  80)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            						}
            					}
HXDLIN(  80)					Float a27 = v_ay1;
HXDLIN(  80)					Float b30 = v_by1;
HXDLIN(  80)					Float c13 = v_cy1;
HXDLIN(  80)					if ((a27 > b30)) {
HXLINE(  80)						if ((a27 > c13)) {
HXLINE(  80)							int min18;
HXDLIN(  80)							if ((b30 > c13)) {
HXLINE(  80)								min18 = ::Math_obj::floor(c13);
            							}
            							else {
HXLINE(  80)								min18 = ::Math_obj::floor(b30);
            							}
HXDLIN(  80)							int ii_min36 = min18;
HXDLIN(  80)							int ii_max36 = ::Math_obj::ceil(a27);
HXDLIN(  80)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            						}
            						else {
HXLINE(  80)							int ii_min37 = ::Math_obj::floor(b30);
HXDLIN(  80)							int ii_max37 = ::Math_obj::ceil(c13);
HXDLIN(  80)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            						}
            					}
            					else {
HXLINE(  80)						if ((b30 > c13)) {
HXLINE(  80)							int min19;
HXDLIN(  80)							if ((a27 > c13)) {
HXLINE(  80)								min19 = ::Math_obj::floor(c13);
            							}
            							else {
HXLINE(  80)								min19 = ::Math_obj::ceil(a27);
            							}
HXDLIN(  80)							int ii_min38 = min19;
HXDLIN(  80)							int ii_max38 = ::Math_obj::ceil(b30);
HXDLIN(  80)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            						}
            						else {
HXLINE(  80)							int ii_min39 = ::Math_obj::floor(a27);
HXDLIN(  80)							int ii_max39 = ::Math_obj::ceil(c13);
HXDLIN(  80)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            						}
            					}
            				}
HXDLIN(  80)				if (hasUndo2) {
HXLINE(  80)					v_undoImage1 = undoImage6;
HXDLIN(  80)					v_undoX1 = xIter32->start;
HXDLIN(  80)					v_undoY1 = yIter32->start;
            				}
HXDLIN(  80)				bool hasUndo3 = false;
HXDLIN(  80)				int aA2 = ((color >> 24) & 255);
HXDLIN(  80)				int rA2 = ((color >> 16) & 255);
HXDLIN(  80)				int gA2 = ((color >> 8) & 255);
HXDLIN(  80)				int bA2 = (color & 255);
HXDLIN(  80)				Float bcx2 = (dx - ax);
HXDLIN(  80)				Float bcy2 = (dy - ay);
HXDLIN(  80)				Float acx2 = (ex - ax);
HXDLIN(  80)				Float acy2 = (ey - ay);
HXDLIN(  80)				Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN(  80)				Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN(  80)				Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN(  80)				Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN(  80)				if ((ex > dx)) {
HXLINE(  80)					if ((ex > ax)) {
HXLINE(  80)						int min20;
HXDLIN(  80)						if ((dx > ax)) {
HXLINE(  80)							min20 = ::Math_obj::floor(ax);
            						}
            						else {
HXLINE(  80)							min20 = ::Math_obj::floor(dx);
            						}
HXDLIN(  80)						int ii_min40 = min20;
HXDLIN(  80)						int ii_max40 = ::Math_obj::ceil(ex);
HXDLIN(  80)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            					}
            					else {
HXLINE(  80)						int ii_min41 = ::Math_obj::floor(dx);
HXDLIN(  80)						int ii_max41 = ::Math_obj::ceil(ax);
HXDLIN(  80)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            					}
            				}
            				else {
HXLINE(  80)					if ((dx > ax)) {
HXLINE(  80)						int min21;
HXDLIN(  80)						if ((ex > ax)) {
HXLINE(  80)							min21 = ::Math_obj::floor(ax);
            						}
            						else {
HXLINE(  80)							min21 = ::Math_obj::ceil(ex);
            						}
HXDLIN(  80)						int ii_min42 = min21;
HXDLIN(  80)						int ii_max42 = ::Math_obj::ceil(dx);
HXDLIN(  80)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            					}
            					else {
HXLINE(  80)						int ii_min43 = ::Math_obj::floor(ex);
HXDLIN(  80)						int ii_max43 = ::Math_obj::ceil(ax);
HXDLIN(  80)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            					}
            				}
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN(  80)				if ((ey > dy)) {
HXLINE(  80)					if ((ey > ay)) {
HXLINE(  80)						int min22;
HXDLIN(  80)						if ((dy > ay)) {
HXLINE(  80)							min22 = ::Math_obj::floor(ay);
            						}
            						else {
HXLINE(  80)							min22 = ::Math_obj::floor(dy);
            						}
HXDLIN(  80)						int ii_min44 = min22;
HXDLIN(  80)						int ii_max44 = ::Math_obj::ceil(ey);
HXDLIN(  80)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            					}
            					else {
HXLINE(  80)						int ii_min45 = ::Math_obj::floor(dy);
HXDLIN(  80)						int ii_max45 = ::Math_obj::ceil(ay);
HXDLIN(  80)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            					}
            				}
            				else {
HXLINE(  80)					if ((dy > ay)) {
HXLINE(  80)						int min23;
HXDLIN(  80)						if ((ey > ay)) {
HXLINE(  80)							min23 = ::Math_obj::floor(ay);
            						}
            						else {
HXLINE(  80)							min23 = ::Math_obj::ceil(ey);
            						}
HXDLIN(  80)						int ii_min46 = min23;
HXDLIN(  80)						int ii_max46 = ::Math_obj::ceil(dy);
HXDLIN(  80)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            					}
            					else {
HXLINE(  80)						int ii_min47 = ::Math_obj::floor(ey);
HXDLIN(  80)						int ii_max47 = ::Math_obj::ceil(ay);
HXDLIN(  80)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            					}
            				}
HXDLIN(  80)				 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN(  80)				if (hasUndo3) {
HXLINE(  80)					int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  80)					int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  80)					 ::Dynamic imageType3 = null();
HXDLIN(  80)					 ::pi_xy::ImageStruct this96 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  80)					if (::hx::IsNull( imageType3 )) {
HXLINE(  54)						imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  80)					::Dynamic undoImage10;
HXDLIN(  80)					switch((int)(( (int)(imageType3) ))){
            						case (int)0: {
HXLINE(  80)							 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::BytesImg b31 = byt3;
HXDLIN(  80)							{
HXLINE(  80)								b31->width = width3;
HXDLIN(  80)								b31->height = height3;
HXDLIN(  80)								b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  80)								b31->data = ::haxe::io::Bytes_obj::alloc((b31->length * 4));
HXDLIN(  80)								{
HXLINE(  80)									int len6 = b31->length;
HXDLIN(  80)									int w3 = 0;
HXDLIN(  80)									{
HXLINE(  80)										int _g60 = 0;
HXDLIN(  80)										int _g61 = b31->height;
HXDLIN(  80)										while((_g60 < _g61)){
HXLINE(  80)											_g60 = (_g60 + 1);
HXDLIN(  80)											int y10 = (_g60 - 1);
HXDLIN(  80)											{
HXLINE(  80)												int _g62 = 0;
HXDLIN(  80)												int _g63 = b31->width;
HXDLIN(  80)												while((_g62 < _g63)){
HXLINE(  80)													_g62 = (_g62 + 1);
HXDLIN(  80)													int x10 = (_g62 - 1);
HXDLIN(  80)													{
HXLINE(  80)														w3 = (w3 + 1);
HXDLIN(  80)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  80)													{
HXLINE(  80)														w3 = (w3 + 1);
HXDLIN(  80)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  80)													{
HXLINE(  80)														w3 = (w3 + 1);
HXDLIN(  80)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  80)													{
HXLINE(  80)														w3 = (w3 + 1);
HXDLIN(  80)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  80)							undoImage10 = b31;
            						}
            						break;
            						case (int)1: {
HXLINE(  80)							 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::ArrIntImg a28 = arrI3;
HXDLIN(  80)							{
HXLINE(  80)								a28->width = width3;
HXDLIN(  80)								a28->height = height3;
HXDLIN(  80)								a28->data = ::Array_obj< int >::__new(0);
HXDLIN(  80)								a28->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  80)								{
HXLINE(  80)									int _g64 = 0;
HXDLIN(  80)									int _g65 = a28->length;
HXDLIN(  80)									while((_g64 < _g65)){
HXLINE(  80)										_g64 = (_g64 + 1);
HXDLIN(  80)										int i26 = (_g64 - 1);
HXDLIN(  80)										a28->data[i26] = 0;
            									}
            								}
            							}
HXDLIN(  80)							undoImage10 = a28;
            						}
            						break;
            						case (int)2: {
HXLINE(  80)							 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::U32ArrImg b32 = u32a3;
HXDLIN(  80)							{
HXLINE(  80)								b32->width = width3;
HXDLIN(  80)								b32->height = height3;
HXDLIN(  80)								b32->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  80)								int size3 = (b32->length * 4);
HXDLIN(  80)								b32->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN(  80)								{
HXLINE(  80)									int _g66 = 0;
HXDLIN(  80)									int _g67 = b32->length;
HXDLIN(  80)									while((_g66 < _g67)){
HXLINE(  80)										_g66 = (_g66 + 1);
HXDLIN(  80)										int i27 = (_g66 - 1);
HXDLIN(  80)										{
HXLINE(  80)											 ::haxe::io::ArrayBufferViewImpl this97 = b32->data;
HXDLIN(  80)											bool undoImage11;
HXDLIN(  80)											if ((i27 >= 0)) {
HXLINE(  80)												undoImage11 = (i27 < (this97->byteLength >> 2));
            											}
            											else {
HXLINE(  80)												undoImage11 = false;
            											}
HXDLIN(  80)											if (undoImage11) {
HXLINE(  80)												 ::haxe::io::Bytes _this3 = this97->bytes;
HXDLIN(  80)												int pos3 = ((i27 << 2) + this97->byteOffset);
HXDLIN(  80)												_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN(  80)												_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN(  80)												_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN(  80)												_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  80)							undoImage10 = b32;
            						}
            						break;
            						case (int)3: {
HXLINE(  80)							 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::VecIntImg v6 = vec3;
HXDLIN(  80)							{
HXLINE(  80)								v6->width = width3;
HXDLIN(  80)								v6->height = height3;
HXDLIN(  80)								v6->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  80)								v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN(  80)								{
HXLINE(  80)									int _g68 = 0;
HXDLIN(  80)									int _g69 = v6->length;
HXDLIN(  80)									while((_g68 < _g69)){
HXLINE(  80)										_g68 = (_g68 + 1);
HXDLIN(  80)										int i28 = (_g68 - 1);
HXDLIN(  80)										v6->data->__unsafe_set(i28,0);
            									}
            								}
            							}
HXDLIN(  80)							undoImage10 = v6;
            						}
            						break;
            						case (int)4: {
HXLINE(  80)							 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  80)							 ::iterMagic::StackIntImg b33 = sInt3;
HXDLIN(  80)							{
HXLINE(  80)								b33->width = width3;
HXDLIN(  80)								b33->height = height3;
HXDLIN(  80)								b33->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN(  80)								b33->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  80)								{
HXLINE(  80)									int len7 = b33->length;
HXDLIN(  80)									 ::haxe::ds::GenericStack_Int d3 = b33->data;
HXDLIN(  80)									if (::hx::IsNull( d3->head )) {
HXLINE(  80)										int _g70 = 0;
HXDLIN(  80)										int _g71 = len7;
HXDLIN(  80)										while((_g70 < _g71)){
HXLINE(  80)											_g70 = (_g70 + 1);
HXDLIN(  80)											int i29 = (_g70 - 1);
HXDLIN(  80)											d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            										}
            									}
            									else {
HXLINE(  80)										int _g72 = 0;
HXDLIN(  80)										int _g73 = len7;
HXDLIN(  80)										while((_g72 < _g73)){
HXLINE(  80)											_g72 = (_g72 + 1);
HXDLIN(  80)											int i30 = (_g72 - 1);
HXDLIN(  80)											{
HXLINE(  80)												 ::haxe::ds::GenericCell_Int l3 = b33->data->head;
HXDLIN(  80)												 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN(  80)												{
HXLINE(  80)													int _g74 = 0;
HXDLIN(  80)													int _g75 = i30;
HXDLIN(  80)													while((_g74 < _g75)){
HXLINE(  80)														_g74 = (_g74 + 1);
HXDLIN(  80)														int i31 = (_g74 - 1);
HXLINE( 345)														prev3 = l3;
HXLINE( 346)														l3 = l3->next;
            													}
            												}
HXLINE(  80)												if (::hx::IsNull( prev3 )) {
HXLINE(  80)													b33->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  80)													l3 = null();
            												}
            												else {
HXLINE(  80)													prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN(  80)													l3 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  80)							undoImage10 = b33;
            						}
            						break;
            					}
HXDLIN(  80)					this96->image = undoImage10;
HXDLIN(  80)					this96->width = width3;
HXDLIN(  80)					this96->height = height3;
HXDLIN(  80)					this96->imageType = ( (int)(imageType3) );
HXDLIN(  80)					undoImage9 = this96;
HXDLIN(  80)					{
HXLINE(  80)						int rectLeft3 = xIter33->start;
HXDLIN(  80)						int rectTop3 = yIter33->start;
HXDLIN(  80)						int rectRight3 = xIter33->max;
HXDLIN(  80)						bool forceClear3 = false;
HXDLIN(  80)						{
HXLINE(  80)							int _g76 = rectTop3;
HXDLIN(  80)							int _g77 = yIter33->max;
HXDLIN(  80)							while((_g76 < _g77)){
HXLINE(  80)								_g76 = (_g76 + 1);
HXDLIN(  80)								int dy4 = (_g76 - 1);
HXDLIN(  80)								{
HXLINE(  80)									int _g78 = rectLeft3;
HXDLIN(  80)									int _g79 = rectRight3;
HXDLIN(  80)									while((_g78 < _g79)){
HXLINE(  80)										_g78 = (_g78 + 1);
HXDLIN(  80)										int dx4 = (_g78 - 1);
HXDLIN(  80)										::Dynamic this98 = pixelImage->image;
HXDLIN(  80)										int index13;
HXDLIN(  80)										if (pixelImage->useVirtualPos) {
HXLINE(  80)											index13 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  80)											index13 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            										}
HXDLIN(  80)										int c14 = ::iterMagic::Iimg_obj::get(this98,index13);
HXDLIN(  80)										int col3;
HXDLIN(  80)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)											col3 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            										}
            										else {
HXLINE(  80)											col3 = c14;
            										}
HXDLIN(  80)										bool hitQuad25;
HXDLIN(  80)										if (pixelImage->useMask) {
HXLINE(  80)											hitQuad25 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  80)											hitQuad25 = false;
            										}
HXDLIN(  80)										if (hitQuad25) {
HXLINE(  80)											 ::pi_xy::ImageStruct this99 = pixelImage->mask;
HXDLIN(  80)											::Dynamic this100 = this99->image;
HXDLIN(  80)											int index14;
HXDLIN(  80)											if (this99->useVirtualPos) {
HXLINE(  80)												index14 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this99->virtualY) * ( (Float)(this99->width) )) + dx4) - this99->virtualX));
            											}
            											else {
HXLINE(  80)												index14 = ::Std_obj::_hx_int(( (Float)(((dy4 * this99->width) + dx4)) ));
            											}
HXDLIN(  80)											int c15 = ::iterMagic::Iimg_obj::get(this100,index14);
HXDLIN(  80)											int v7;
HXDLIN(  80)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)												v7 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            											}
            											else {
HXLINE(  80)												v7 = c15;
            											}
HXDLIN(  80)											int maskPixel3 = v7;
HXDLIN(  80)											int this101 = col3;
HXDLIN(  80)											if ((maskPixel3 == 0)) {
HXLINE(  80)												col3 = this101;
            											}
            											else {
HXLINE(  80)												Float m03;
HXDLIN(  80)												int this102 = ((maskPixel3 >> 24) & 255);
HXDLIN(  80)												if ((this102 == 0)) {
HXLINE(  80)													m03 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m03 = (( (Float)(this102) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float m13;
HXDLIN(  80)												int this103 = ((maskPixel3 >> 16) & 255);
HXDLIN(  80)												if ((this103 == 0)) {
HXLINE(  80)													m13 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m13 = (( (Float)(this103) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float m23;
HXDLIN(  80)												int this104 = ((maskPixel3 >> 8) & 255);
HXDLIN(  80)												if ((this104 == 0)) {
HXLINE(  80)													m23 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m23 = (( (Float)(this104) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float m33;
HXDLIN(  80)												int this105 = (maskPixel3 & 255);
HXDLIN(  80)												if ((this105 == 0)) {
HXLINE(  80)													m33 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													m33 = (( (Float)(this105) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this101 >> 24) & 255)) )));
HXDLIN(  80)												int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this101 >> 16) & 255)) )));
HXDLIN(  80)												int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this101 >> 8) & 255)) )));
HXDLIN(  80)												int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this101 & 255)) )));
HXDLIN(  80)												col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  80)										if ((col3 != 0)) {
HXLINE(  80)											int x11 = (dx4 - rectLeft3);
HXDLIN(  80)											int y11 = (dy4 - rectTop3);
HXDLIN(  80)											int c16 = col3;
HXDLIN(  80)											bool hitQuad26;
HXDLIN(  80)											if ((((c16 >> 24) & 255) < 254)) {
HXLINE(  80)												hitQuad26 = undoImage9->transparent;
            											}
            											else {
HXLINE(  80)												hitQuad26 = false;
            											}
HXDLIN(  80)											if (hitQuad26) {
HXLINE(  80)												int location6;
HXDLIN(  80)												if (undoImage9->useVirtualPos) {
HXLINE(  80)													location6 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            												}
            												else {
HXLINE(  80)													location6 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            												}
HXDLIN(  80)												int this106 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN(  80)												int this107;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													this107 = ((((((this106 >> 24) & 255) << 24) | ((this106 & 255) << 16)) | (((this106 >> 8) & 255) << 8)) | ((this106 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													this107 = this106;
            												}
HXDLIN(  80)												Float a111;
HXDLIN(  80)												int this108 = ((this107 >> 24) & 255);
HXDLIN(  80)												if ((this108 == 0)) {
HXLINE(  80)													a111 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													a111 = (( (Float)(this108) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float r16;
HXDLIN(  80)												int this109 = ((this107 >> 16) & 255);
HXDLIN(  80)												if ((this109 == 0)) {
HXLINE(  80)													r16 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													r16 = (( (Float)(this109) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float g16;
HXDLIN(  80)												int this110 = ((this107 >> 8) & 255);
HXDLIN(  80)												if ((this110 == 0)) {
HXLINE(  80)													g16 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													g16 = (( (Float)(this110) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float b112;
HXDLIN(  80)												int this111 = (this107 & 255);
HXDLIN(  80)												if ((this111 == 0)) {
HXLINE(  80)													b112 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													b112 = (( (Float)(this111) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float a29;
HXDLIN(  80)												int this112 = ((col3 >> 24) & 255);
HXDLIN(  80)												if ((this112 == 0)) {
HXLINE(  80)													a29 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													a29 = (( (Float)(this112) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float r26;
HXDLIN(  80)												int this113 = ((col3 >> 16) & 255);
HXDLIN(  80)												if ((this113 == 0)) {
HXLINE(  80)													r26 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													r26 = (( (Float)(this113) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float g26;
HXDLIN(  80)												int this114 = ((col3 >> 8) & 255);
HXDLIN(  80)												if ((this114 == 0)) {
HXLINE(  80)													g26 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													g26 = (( (Float)(this114) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float b210;
HXDLIN(  80)												int this115 = (col3 & 255);
HXDLIN(  80)												if ((this115 == 0)) {
HXLINE(  80)													b210 = ((Float)0.);
            												}
            												else {
HXLINE(  80)													b210 = (( (Float)(this115) ) / ( (Float)(255) ));
            												}
HXDLIN(  80)												Float a36 = (a111 * (( (Float)(1) ) - a29));
HXDLIN(  80)												int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a29))));
HXDLIN(  80)												int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a29))));
HXDLIN(  80)												int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a36) + (b210 * a29))));
HXDLIN(  80)												int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a29)));
HXDLIN(  80)												int blended6 = ((((a30 << 24) | (r10 << 16)) | (g10 << 8)) | b34);
HXDLIN(  80)												{
HXLINE(  80)													int hitQuad27;
HXDLIN(  80)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)														hitQuad27 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            													}
            													else {
HXLINE(  80)														hitQuad27 = blended6;
            													}
HXDLIN(  80)													::iterMagic::Iimg_obj::set(undoImage9->image,location6,hitQuad27);
            												}
            											}
            											else {
HXLINE(  80)												::Dynamic this116 = undoImage9->image;
HXDLIN(  80)												int index15;
HXDLIN(  80)												if (undoImage9->useVirtualPos) {
HXLINE(  80)													index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            												}
            												else {
HXLINE(  80)													index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            												}
HXDLIN(  80)												int hitQuad28;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													hitQuad28 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													hitQuad28 = c16;
            												}
HXDLIN(  80)												::iterMagic::Iimg_obj::set(this116,index15,hitQuad28);
            											}
            										}
            										else {
HXLINE(  80)											if (forceClear3) {
HXLINE(  80)												::Dynamic this117 = undoImage9->image;
HXDLIN(  80)												int x12 = (dx4 - rectLeft3);
HXDLIN(  80)												int y12 = (dy4 - rectTop3);
HXDLIN(  80)												int index16;
HXDLIN(  80)												if (undoImage9->useVirtualPos) {
HXLINE(  80)													index16 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x12) - undoImage9->virtualX));
            												}
            												else {
HXLINE(  80)													index16 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage9->width) + x12)) ));
            												}
HXDLIN(  80)												::iterMagic::Iimg_obj::set(this117,index16,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  80)				bool found3 = false;
HXDLIN(  80)				{
HXLINE(  80)					int _g_min6 = xIter33->start;
HXDLIN(  80)					int _g_max6 = xIter33->max;
HXDLIN(  80)					while((_g_min6 < _g_max6)){
HXLINE(  80)						_g_min6 = (_g_min6 + 1);
HXDLIN(  80)						int px3 = (_g_min6 - 1);
HXDLIN(  80)						Float pcx2 = (( (Float)(px3) ) - ax);
HXLINE( 619)						found3 = false;
HXLINE(  80)						{
HXLINE(  80)							int _g_min7 = yIter33->start;
HXDLIN(  80)							int _g_max7 = yIter33->max;
HXDLIN(  80)							while((_g_min7 < _g_max7)){
HXLINE(  80)								_g_min7 = (_g_min7 + 1);
HXDLIN(  80)								int py3 = (_g_min7 - 1);
HXDLIN(  80)								Float pcy2 = (( (Float)(py3) ) - ay);
HXDLIN(  80)								Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN(  80)								Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN(  80)								Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN(  80)								Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN(  80)								Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN(  80)								bool hitQuad29;
HXDLIN(  80)								bool hitQuad30;
HXDLIN(  80)								if ((ratioA2 >= 0)) {
HXLINE(  80)									hitQuad30 = (ratioB2 >= 0);
            								}
            								else {
HXLINE(  80)									hitQuad30 = false;
            								}
HXDLIN(  80)								if (hitQuad30) {
HXLINE(  80)									hitQuad29 = (ratioC2 >= 0);
            								}
            								else {
HXLINE(  80)									hitQuad29 = false;
            								}
HXDLIN(  80)								if (hitQuad29) {
HXLINE(  80)									int i32 = ::Std_obj::_hx_int((( (Float)(aA2) ) * (soft * ratioB2)));
HXDLIN(  80)									if ((i32 > 255)) {
HXLINE(  24)										i32 = 255;
            									}
HXLINE(  80)									if ((i32 < 0)) {
HXLINE(  25)										i32 = 0;
            									}
HXLINE(  80)									int a37 = i32;
HXDLIN(  80)									int i33 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN(  80)									if ((i33 > 255)) {
HXLINE(  24)										i33 = 255;
            									}
HXLINE(  80)									if ((i33 < 0)) {
HXLINE(  25)										i33 = 0;
            									}
HXLINE(  80)									int r17 = i33;
HXDLIN(  80)									int i34 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN(  80)									if ((i34 > 255)) {
HXLINE(  24)										i34 = 255;
            									}
HXLINE(  80)									if ((i34 < 0)) {
HXLINE(  25)										i34 = 0;
            									}
HXLINE(  80)									int g17 = i34;
HXDLIN(  80)									int i35 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN(  80)									if ((i35 > 255)) {
HXLINE(  24)										i35 = 255;
            									}
HXLINE(  80)									if ((i35 < 0)) {
HXLINE(  25)										i35 = 0;
            									}
HXLINE(  80)									int b35 = i35;
HXDLIN(  80)									{
HXLINE(  80)										int location7;
HXDLIN(  80)										if (pixelImage->useVirtualPos) {
HXLINE(  80)											location7 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px3) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  80)											location7 = ::Std_obj::_hx_int(( (Float)(((py3 * pixelImage->width) + px3)) ));
            										}
HXDLIN(  80)										bool hitQuad31;
HXDLIN(  80)										if (pixelImage->transparent) {
HXLINE(  80)											hitQuad31 = (a37 < 254);
            										}
            										else {
HXLINE(  80)											hitQuad31 = false;
            										}
HXDLIN(  80)										if (hitQuad31) {
HXLINE(  80)											int this118 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN(  80)											int old2;
HXDLIN(  80)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)												old2 = ((((((this118 >> 24) & 255) << 24) | ((this118 & 255) << 16)) | (((this118 >> 8) & 255) << 8)) | ((this118 >> 16) & 255));
            											}
            											else {
HXLINE(  80)												old2 = this118;
            											}
HXDLIN(  80)											int rhs2 = ((((a37 << 24) | (r17 << 16)) | (g17 << 8)) | b35);
HXDLIN(  80)											Float a112;
HXDLIN(  80)											int this119 = ((old2 >> 24) & 255);
HXDLIN(  80)											if ((this119 == 0)) {
HXLINE(  80)												a112 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												a112 = (( (Float)(this119) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float r18;
HXDLIN(  80)											int this120 = ((old2 >> 16) & 255);
HXDLIN(  80)											if ((this120 == 0)) {
HXLINE(  80)												r18 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												r18 = (( (Float)(this120) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float g18;
HXDLIN(  80)											int this121 = ((old2 >> 8) & 255);
HXDLIN(  80)											if ((this121 == 0)) {
HXLINE(  80)												g18 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												g18 = (( (Float)(this121) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float b113;
HXDLIN(  80)											int this122 = (old2 & 255);
HXDLIN(  80)											if ((this122 == 0)) {
HXLINE(  80)												b113 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												b113 = (( (Float)(this122) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float a210;
HXDLIN(  80)											int this123 = ((rhs2 >> 24) & 255);
HXDLIN(  80)											if ((this123 == 0)) {
HXLINE(  80)												a210 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												a210 = (( (Float)(this123) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float r27;
HXDLIN(  80)											int this124 = ((rhs2 >> 16) & 255);
HXDLIN(  80)											if ((this124 == 0)) {
HXLINE(  80)												r27 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												r27 = (( (Float)(this124) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float g27;
HXDLIN(  80)											int this125 = ((rhs2 >> 8) & 255);
HXDLIN(  80)											if ((this125 == 0)) {
HXLINE(  80)												g27 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												g27 = (( (Float)(this125) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float b211;
HXDLIN(  80)											int this126 = (rhs2 & 255);
HXDLIN(  80)											if ((this126 == 0)) {
HXLINE(  80)												b211 = ((Float)0.);
            											}
            											else {
HXLINE(  80)												b211 = (( (Float)(this126) ) / ( (Float)(255) ));
            											}
HXDLIN(  80)											Float a38 = (a112 * (( (Float)(1) ) - a210));
HXDLIN(  80)											int r19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r27 * a210))));
HXDLIN(  80)											int g19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g27 * a210))));
HXDLIN(  80)											int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a38) + (b211 * a210))));
HXDLIN(  80)											int a39 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a210)));
HXDLIN(  80)											int blended7 = ((((a39 << 24) | (r19 << 16)) | (g19 << 8)) | b36);
HXDLIN(  80)											{
HXLINE(  80)												int hitQuad32;
HXDLIN(  80)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  80)													hitQuad32 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            												}
            												else {
HXLINE(  80)													hitQuad32 = blended7;
            												}
HXDLIN(  80)												::iterMagic::Iimg_obj::set(pixelImage->image,location7,hitQuad32);
            											}
            										}
            										else {
HXLINE(  80)											int value2;
HXDLIN(  80)											if (pixelImage->isLittle) {
HXLINE(  80)												value2 = ((((a37 << 24) | (b35 << 16)) | (g17 << 8)) | r17);
            											}
            											else {
HXLINE(  80)												value2 = ((((a37 << 24) | (r17 << 16)) | (g17 << 8)) | b35);
            											}
HXDLIN(  80)											::iterMagic::Iimg_obj::set(pixelImage->image,location7,value2);
            										}
            									}
HXLINE( 633)									found3 = true;
            								}
            								else {
HXLINE(  80)									if (found3) {
HXLINE(  80)										goto _hx_goto_132;
            									}
            								}
            							}
            							_hx_goto_132:;
            						}
            					}
            				}
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart v_yIter32;
HXDLIN(  80)				 ::pi_xy::iter::IntIterStart v_xIter32;
HXDLIN(  80)				int v_undoY2;
HXDLIN(  80)				int v_undoX2;
HXDLIN(  80)				Float v_ty2;
HXDLIN(  80)				Float v_tx2;
HXDLIN(  80)				Float v_t02;
HXDLIN(  80)				Float v_sy2;
HXDLIN(  80)				Float v_sx2;
HXDLIN(  80)				Float v_s02;
HXDLIN(  80)				Float v_A2;
HXDLIN(  80)				Float ax3 = ex;
HXDLIN(  80)				Float ay3 = ey;
HXDLIN(  80)				 ::pi_xy::ImageStruct v_undoImage2 = null();
HXDLIN(  80)				Float bx4 = dx;
HXDLIN(  80)				Float by4 = dy;
HXDLIN(  80)				Float cx4 = ax;
HXDLIN(  80)				Float cy4 = ay;
HXDLIN(  80)				bool adjustWinding3 = (((((ax3 * by4) - (bx4 * ay3)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay3) - (ax3 * cy4))) > 0);
HXDLIN(  80)				if (!(adjustWinding3)) {
HXLINE(  80)					Float bx_3 = bx4;
HXDLIN(  80)					Float by_3 = by4;
HXLINE(  24)					bx4 = cx4;
HXLINE(  25)					by4 = cy4;
HXLINE(  26)					cx4 = bx_3;
HXLINE(  27)					cy4 = by_3;
            				}
HXLINE(  80)				Float v_ax2 = ax3;
HXDLIN(  80)				Float v_ay2 = ay3;
HXDLIN(  80)				Float v_bx2 = bx4;
HXDLIN(  80)				Float v_by2 = by4;
HXDLIN(  80)				Float v_cx2 = cx4;
HXDLIN(  80)				Float v_cy2 = cy4;
HXDLIN(  80)				bool v_preCalculated2 = true;
HXDLIN(  80)				{
HXLINE(  80)					v_s02 = ((v_ay2 * v_cx2) - (v_ax2 * v_cy2));
HXDLIN(  80)					v_sx2 = (v_cy2 - v_ay2);
HXDLIN(  80)					v_sy2 = (v_ax2 - v_cx2);
HXDLIN(  80)					v_t02 = ((v_ax2 * v_by2) - (v_ay2 * v_bx2));
HXDLIN(  80)					v_tx2 = (v_ay2 - v_by2);
HXDLIN(  80)					v_ty2 = (v_bx2 - v_ax2);
HXDLIN(  80)					v_A2 = ((((-(v_by2) * v_cx2) + (v_ay2 * (-(v_bx2) + v_cx2))) + (v_ax2 * (v_by2 - v_cy2))) + (v_bx2 * v_cy2));
HXDLIN(  80)					Float a40 = v_ax2;
HXDLIN(  80)					Float b37 = v_bx2;
HXDLIN(  80)					Float c17 = v_cx2;
HXDLIN(  80)					if ((a40 > b37)) {
HXLINE(  80)						if ((a40 > c17)) {
HXLINE(  80)							int min24;
HXDLIN(  80)							if ((b37 > c17)) {
HXLINE(  80)								min24 = ::Math_obj::floor(c17);
            							}
            							else {
HXLINE(  80)								min24 = ::Math_obj::floor(b37);
            							}
HXDLIN(  80)							int ii_min48 = min24;
HXDLIN(  80)							int ii_max48 = ::Math_obj::ceil(a40);
HXDLIN(  80)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            						}
            						else {
HXLINE(  80)							int ii_min49 = ::Math_obj::floor(b37);
HXDLIN(  80)							int ii_max49 = ::Math_obj::ceil(c17);
HXDLIN(  80)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            						}
            					}
            					else {
HXLINE(  80)						if ((b37 > c17)) {
HXLINE(  80)							int min25;
HXDLIN(  80)							if ((a40 > c17)) {
HXLINE(  80)								min25 = ::Math_obj::floor(c17);
            							}
            							else {
HXLINE(  80)								min25 = ::Math_obj::ceil(a40);
            							}
HXDLIN(  80)							int ii_min50 = min25;
HXDLIN(  80)							int ii_max50 = ::Math_obj::ceil(b37);
HXDLIN(  80)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            						}
            						else {
HXLINE(  80)							int ii_min51 = ::Math_obj::floor(a40);
HXDLIN(  80)							int ii_max51 = ::Math_obj::ceil(c17);
HXDLIN(  80)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            						}
            					}
HXDLIN(  80)					Float a41 = v_ay2;
HXDLIN(  80)					Float b38 = v_by2;
HXDLIN(  80)					Float c18 = v_cy2;
HXDLIN(  80)					if ((a41 > b38)) {
HXLINE(  80)						if ((a41 > c18)) {
HXLINE(  80)							int min26;
HXDLIN(  80)							if ((b38 > c18)) {
HXLINE(  80)								min26 = ::Math_obj::floor(c18);
            							}
            							else {
HXLINE(  80)								min26 = ::Math_obj::floor(b38);
            							}
HXDLIN(  80)							int ii_min52 = min26;
HXDLIN(  80)							int ii_max52 = ::Math_obj::ceil(a41);
HXDLIN(  80)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            						}
            						else {
HXLINE(  80)							int ii_min53 = ::Math_obj::floor(b38);
HXDLIN(  80)							int ii_max53 = ::Math_obj::ceil(c18);
HXDLIN(  80)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            						}
            					}
            					else {
HXLINE(  80)						if ((b38 > c18)) {
HXLINE(  80)							int min27;
HXDLIN(  80)							if ((a41 > c18)) {
HXLINE(  80)								min27 = ::Math_obj::floor(c18);
            							}
            							else {
HXLINE(  80)								min27 = ::Math_obj::ceil(a41);
            							}
HXDLIN(  80)							int ii_min54 = min27;
HXDLIN(  80)							int ii_max54 = ::Math_obj::ceil(b38);
HXDLIN(  80)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            						}
            						else {
HXLINE(  80)							int ii_min55 = ::Math_obj::floor(a41);
HXDLIN(  80)							int ii_max55 = ::Math_obj::ceil(c18);
HXDLIN(  80)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            						}
            					}
            				}
HXDLIN(  80)				if (hasUndo3) {
HXLINE(  80)					v_undoImage2 = undoImage9;
HXDLIN(  80)					v_undoX2 = xIter33->start;
HXDLIN(  80)					v_undoY2 = yIter33->start;
            				}
HXDLIN(  80)				 ::pi_xy::algo::HitQuad v8 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXLINE(  78)				hitQuad = v8;
            			}
            			else {
HXLINE(  82)				Float sin2 = ::Math_obj::sin(theta);
HXDLIN(  82)				Float cos2 = ::Math_obj::cos(theta);
HXDLIN(  82)				Float radius11 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN(  82)				Float radius22 = (thick / ( (Float)(2) ));
HXDLIN(  82)				Float dx5 = ((Float)0.1);
HXDLIN(  82)				Float dy5 = radius11;
HXDLIN(  82)				Float cx5 = h2;
HXDLIN(  82)				Float cy5 = radius22;
HXDLIN(  82)				Float bx5 = h2;
HXDLIN(  82)				Float by5 = -(radius22);
HXDLIN(  82)				Float ax4 = ((Float)0.1);
HXDLIN(  82)				Float ay4 = -(radius11);
HXDLIN(  82)				Float temp1 = ((Float)0.);
HXLINE( 288)				temp1 = (px + ((ax4 * cos2) - (ay4 * sin2)));
HXLINE( 289)				ay4 = (py + ((ay4 * cos2) + (ax4 * sin2)));
HXLINE( 290)				ax4 = temp1;
HXLINE( 292)				temp1 = (px + ((bx5 * cos2) - (by5 * sin2)));
HXLINE( 293)				by5 = (py + ((by5 * cos2) + (bx5 * sin2)));
HXLINE( 294)				bx5 = temp1;
HXLINE( 296)				temp1 = (px + ((cx5 * cos2) - (cy5 * sin2)));
HXLINE( 297)				cy5 = (py + ((cy5 * cos2) + (cx5 * sin2)));
HXLINE( 298)				cx5 = temp1;
HXLINE( 300)				temp1 = (px + ((dx5 * cos2) - (dy5 * sin2)));
HXLINE( 301)				dy5 = (py + ((dy5 * cos2) + (dx5 * sin2)));
HXLINE( 302)				dx5 = temp1;
HXLINE(  82)				Float ex1 = ((((ax4 + bx5) + cx5) + dx5) / ( (Float)(4) ));
HXDLIN(  82)				Float ey1 = ((((ay4 + by5) + cy5) + dy5) / ( (Float)(4) ));
HXDLIN(  82)				{
HXLINE(  82)					Float bx6 = ax4;
HXDLIN(  82)					Float by6 = ay4;
HXDLIN(  82)					Float cx6 = bx5;
HXDLIN(  82)					Float cy6 = by5;
HXDLIN(  82)					bool hasUndo4 = false;
HXDLIN(  82)					bool adjustWinding4 = (((((ex1 * by6) - (bx6 * ey1)) + ((bx6 * cy6) - (cx6 * by6))) + ((cx6 * ey1) - (ex1 * cy6))) > 0);
HXDLIN(  82)					if (!(adjustWinding4)) {
HXLINE(  82)						Float bx_4 = bx6;
HXDLIN(  82)						Float by_4 = by6;
HXLINE(  25)						bx6 = cx6;
HXLINE(  26)						by6 = cy6;
HXLINE(  27)						cx6 = bx_4;
HXLINE(  28)						cy6 = by_4;
            					}
HXLINE(  82)					{
HXLINE(  82)						Float s01 = ((ey1 * cx6) - (ex1 * cy6));
HXDLIN(  82)						Float sx1 = (cy6 - ey1);
HXDLIN(  82)						Float sy1 = (ex1 - cx6);
HXDLIN(  82)						Float t01 = ((ex1 * by6) - (ey1 * bx6));
HXDLIN(  82)						Float tx1 = (ey1 - by6);
HXDLIN(  82)						Float ty1 = (bx6 - ex1);
HXDLIN(  82)						Float A1 = ((((-(by6) * cx6) + (ey1 * (-(bx6) + cx6))) + (ex1 * (by6 - cy6))) + (bx6 * cy6));
HXDLIN(  82)						 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN(  82)						if ((ex1 > bx6)) {
HXLINE(  82)							if ((ex1 > cx6)) {
HXLINE(  82)								int min28;
HXDLIN(  82)								if ((bx6 > cx6)) {
HXLINE(  82)									min28 = ::Math_obj::floor(cx6);
            								}
            								else {
HXLINE(  82)									min28 = ::Math_obj::floor(bx6);
            								}
HXDLIN(  82)								int ii_min56 = min28;
HXDLIN(  82)								int ii_max56 = ::Math_obj::ceil(ex1);
HXDLIN(  82)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            							}
            							else {
HXLINE(  82)								int ii_min57 = ::Math_obj::floor(bx6);
HXDLIN(  82)								int ii_max57 = ::Math_obj::ceil(cx6);
HXDLIN(  82)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            							}
            						}
            						else {
HXLINE(  82)							if ((bx6 > cx6)) {
HXLINE(  82)								int min29;
HXDLIN(  82)								if ((ex1 > cx6)) {
HXLINE(  82)									min29 = ::Math_obj::floor(cx6);
            								}
            								else {
HXLINE(  82)									min29 = ::Math_obj::ceil(ex1);
            								}
HXDLIN(  82)								int ii_min58 = min29;
HXDLIN(  82)								int ii_max58 = ::Math_obj::ceil(bx6);
HXDLIN(  82)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            							}
            							else {
HXLINE(  82)								int ii_min59 = ::Math_obj::floor(ex1);
HXDLIN(  82)								int ii_max59 = ::Math_obj::ceil(cx6);
HXDLIN(  82)								xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            							}
            						}
HXDLIN(  82)						 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN(  82)						if ((ey1 > by6)) {
HXLINE(  82)							if ((ey1 > cy6)) {
HXLINE(  82)								int min30;
HXDLIN(  82)								if ((by6 > cy6)) {
HXLINE(  82)									min30 = ::Math_obj::floor(cy6);
            								}
            								else {
HXLINE(  82)									min30 = ::Math_obj::floor(by6);
            								}
HXDLIN(  82)								int ii_min60 = min30;
HXDLIN(  82)								int ii_max60 = ::Math_obj::ceil(ey1);
HXDLIN(  82)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            							}
            							else {
HXLINE(  82)								int ii_min61 = ::Math_obj::floor(by6);
HXDLIN(  82)								int ii_max61 = ::Math_obj::ceil(cy6);
HXDLIN(  82)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            							}
            						}
            						else {
HXLINE(  82)							if ((by6 > cy6)) {
HXLINE(  82)								int min31;
HXDLIN(  82)								if ((ey1 > cy6)) {
HXLINE(  82)									min31 = ::Math_obj::floor(cy6);
            								}
            								else {
HXLINE(  82)									min31 = ::Math_obj::ceil(ey1);
            								}
HXDLIN(  82)								int ii_min62 = min31;
HXDLIN(  82)								int ii_max62 = ::Math_obj::ceil(by6);
HXDLIN(  82)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            							}
            							else {
HXLINE(  82)								int ii_min63 = ::Math_obj::floor(ey1);
HXDLIN(  82)								int ii_max63 = ::Math_obj::ceil(cy6);
HXDLIN(  82)								yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            							}
            						}
HXDLIN(  82)						 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN(  82)						if (hasUndo4) {
HXLINE(  82)							int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN(  82)							int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN(  82)							 ::Dynamic imageType4 = null();
HXDLIN(  82)							 ::pi_xy::ImageStruct this127 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  82)							if (::hx::IsNull( imageType4 )) {
HXLINE(  54)								imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE(  82)							::Dynamic undoImage13;
HXDLIN(  82)							switch((int)(( (int)(imageType4) ))){
            								case (int)0: {
HXLINE(  82)									 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  82)									 ::iterMagic::BytesImg b39 = byt4;
HXDLIN(  82)									{
HXLINE(  82)										b39->width = width4;
HXDLIN(  82)										b39->height = height4;
HXDLIN(  82)										b39->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  82)										b39->data = ::haxe::io::Bytes_obj::alloc((b39->length * 4));
HXDLIN(  82)										{
HXLINE(  82)											int len8 = b39->length;
HXDLIN(  82)											int w4 = 0;
HXDLIN(  82)											{
HXLINE(  82)												int _g80 = 0;
HXDLIN(  82)												int _g81 = b39->height;
HXDLIN(  82)												while((_g80 < _g81)){
HXLINE(  82)													_g80 = (_g80 + 1);
HXDLIN(  82)													int y13 = (_g80 - 1);
HXDLIN(  82)													{
HXLINE(  82)														int _g82 = 0;
HXDLIN(  82)														int _g83 = b39->width;
HXDLIN(  82)														while((_g82 < _g83)){
HXLINE(  82)															_g82 = (_g82 + 1);
HXDLIN(  82)															int x13 = (_g82 - 1);
HXDLIN(  82)															{
HXLINE(  82)																w4 = (w4 + 1);
HXDLIN(  82)																b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  82)															{
HXLINE(  82)																w4 = (w4 + 1);
HXDLIN(  82)																b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  82)															{
HXLINE(  82)																w4 = (w4 + 1);
HXDLIN(  82)																b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN(  82)															{
HXLINE(  82)																w4 = (w4 + 1);
HXDLIN(  82)																b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  82)									undoImage13 = b39;
            								}
            								break;
            								case (int)1: {
HXLINE(  82)									 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)									 ::iterMagic::ArrIntImg a42 = arrI4;
HXDLIN(  82)									{
HXLINE(  82)										a42->width = width4;
HXDLIN(  82)										a42->height = height4;
HXDLIN(  82)										a42->data = ::Array_obj< int >::__new(0);
HXDLIN(  82)										a42->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  82)										{
HXLINE(  82)											int _g84 = 0;
HXDLIN(  82)											int _g85 = a42->length;
HXDLIN(  82)											while((_g84 < _g85)){
HXLINE(  82)												_g84 = (_g84 + 1);
HXDLIN(  82)												int i36 = (_g84 - 1);
HXDLIN(  82)												a42->data[i36] = 0;
            											}
            										}
            									}
HXDLIN(  82)									undoImage13 = a42;
            								}
            								break;
            								case (int)2: {
HXLINE(  82)									 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  82)									 ::iterMagic::U32ArrImg b40 = u32a4;
HXDLIN(  82)									{
HXLINE(  82)										b40->width = width4;
HXDLIN(  82)										b40->height = height4;
HXDLIN(  82)										b40->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  82)										int size4 = (b40->length * 4);
HXDLIN(  82)										b40->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN(  82)										{
HXLINE(  82)											int _g86 = 0;
HXDLIN(  82)											int _g87 = b40->length;
HXDLIN(  82)											while((_g86 < _g87)){
HXLINE(  82)												_g86 = (_g86 + 1);
HXDLIN(  82)												int i37 = (_g86 - 1);
HXDLIN(  82)												{
HXLINE(  82)													 ::haxe::io::ArrayBufferViewImpl this128 = b40->data;
HXDLIN(  82)													bool undoImage14;
HXDLIN(  82)													if ((i37 >= 0)) {
HXLINE(  82)														undoImage14 = (i37 < (this128->byteLength >> 2));
            													}
            													else {
HXLINE(  82)														undoImage14 = false;
            													}
HXDLIN(  82)													if (undoImage14) {
HXLINE(  82)														 ::haxe::io::Bytes _this4 = this128->bytes;
HXDLIN(  82)														int pos4 = ((i37 << 2) + this128->byteOffset);
HXDLIN(  82)														_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN(  82)														_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN(  82)														_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN(  82)														_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN(  82)									undoImage13 = b40;
            								}
            								break;
            								case (int)3: {
HXLINE(  82)									 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)									 ::iterMagic::VecIntImg v9 = vec4;
HXDLIN(  82)									{
HXLINE(  82)										v9->width = width4;
HXDLIN(  82)										v9->height = height4;
HXDLIN(  82)										v9->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  82)										v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN(  82)										{
HXLINE(  82)											int _g88 = 0;
HXDLIN(  82)											int _g89 = v9->length;
HXDLIN(  82)											while((_g88 < _g89)){
HXLINE(  82)												_g88 = (_g88 + 1);
HXDLIN(  82)												int i38 = (_g88 - 1);
HXDLIN(  82)												v9->data->__unsafe_set(i38,0);
            											}
            										}
            									}
HXDLIN(  82)									undoImage13 = v9;
            								}
            								break;
            								case (int)4: {
HXLINE(  82)									 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)									 ::iterMagic::StackIntImg b41 = sInt4;
HXDLIN(  82)									{
HXLINE(  82)										b41->width = width4;
HXDLIN(  82)										b41->height = height4;
HXDLIN(  82)										b41->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN(  82)										b41->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  82)										{
HXLINE(  82)											int len9 = b41->length;
HXDLIN(  82)											 ::haxe::ds::GenericStack_Int d4 = b41->data;
HXDLIN(  82)											if (::hx::IsNull( d4->head )) {
HXLINE(  82)												int _g90 = 0;
HXDLIN(  82)												int _g91 = len9;
HXDLIN(  82)												while((_g90 < _g91)){
HXLINE(  82)													_g90 = (_g90 + 1);
HXDLIN(  82)													int i39 = (_g90 - 1);
HXDLIN(  82)													d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            												}
            											}
            											else {
HXLINE(  82)												int _g92 = 0;
HXDLIN(  82)												int _g93 = len9;
HXDLIN(  82)												while((_g92 < _g93)){
HXLINE(  82)													_g92 = (_g92 + 1);
HXDLIN(  82)													int i40 = (_g92 - 1);
HXDLIN(  82)													{
HXLINE(  82)														 ::haxe::ds::GenericCell_Int l4 = b41->data->head;
HXDLIN(  82)														 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN(  82)														{
HXLINE(  82)															int _g94 = 0;
HXDLIN(  82)															int _g95 = i40;
HXDLIN(  82)															while((_g94 < _g95)){
HXLINE(  82)																_g94 = (_g94 + 1);
HXDLIN(  82)																int i41 = (_g94 - 1);
HXLINE( 345)																prev4 = l4;
HXLINE( 346)																l4 = l4->next;
            															}
            														}
HXLINE(  82)														if (::hx::IsNull( prev4 )) {
HXLINE(  82)															b41->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  82)															l4 = null();
            														}
            														else {
HXLINE(  82)															prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN(  82)															l4 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  82)									undoImage13 = b41;
            								}
            								break;
            							}
HXDLIN(  82)							this127->image = undoImage13;
HXDLIN(  82)							this127->width = width4;
HXDLIN(  82)							this127->height = height4;
HXDLIN(  82)							this127->imageType = ( (int)(imageType4) );
HXDLIN(  82)							undoImage12 = this127;
HXDLIN(  82)							{
HXLINE(  82)								int rectLeft4 = xIter34->start;
HXDLIN(  82)								int rectTop4 = yIter34->start;
HXDLIN(  82)								int rectRight4 = xIter34->max;
HXDLIN(  82)								bool forceClear4 = false;
HXDLIN(  82)								{
HXLINE(  82)									int _g96 = rectTop4;
HXDLIN(  82)									int _g97 = yIter34->max;
HXDLIN(  82)									while((_g96 < _g97)){
HXLINE(  82)										_g96 = (_g96 + 1);
HXDLIN(  82)										int dy6 = (_g96 - 1);
HXDLIN(  82)										{
HXLINE(  82)											int _g98 = rectLeft4;
HXDLIN(  82)											int _g99 = rectRight4;
HXDLIN(  82)											while((_g98 < _g99)){
HXLINE(  82)												_g98 = (_g98 + 1);
HXDLIN(  82)												int dx6 = (_g98 - 1);
HXDLIN(  82)												::Dynamic this129 = pixelImage->image;
HXDLIN(  82)												int index17;
HXDLIN(  82)												if (pixelImage->useVirtualPos) {
HXLINE(  82)													index17 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx6) - pixelImage->virtualX));
            												}
            												else {
HXLINE(  82)													index17 = ::Std_obj::_hx_int(( (Float)(((dy6 * pixelImage->width) + dx6)) ));
            												}
HXDLIN(  82)												int c19 = ::iterMagic::Iimg_obj::get(this129,index17);
HXDLIN(  82)												int col4;
HXDLIN(  82)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)													col4 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            												}
            												else {
HXLINE(  82)													col4 = c19;
            												}
HXDLIN(  82)												bool hitQuad33;
HXDLIN(  82)												if (pixelImage->useMask) {
HXLINE(  82)													hitQuad33 = ::hx::IsNotNull( pixelImage->mask );
            												}
            												else {
HXLINE(  82)													hitQuad33 = false;
            												}
HXDLIN(  82)												if (hitQuad33) {
HXLINE(  82)													 ::pi_xy::ImageStruct this130 = pixelImage->mask;
HXDLIN(  82)													::Dynamic this131 = this130->image;
HXDLIN(  82)													int index18;
HXDLIN(  82)													if (this130->useVirtualPos) {
HXLINE(  82)														index18 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this130->virtualY) * ( (Float)(this130->width) )) + dx6) - this130->virtualX));
            													}
            													else {
HXLINE(  82)														index18 = ::Std_obj::_hx_int(( (Float)(((dy6 * this130->width) + dx6)) ));
            													}
HXDLIN(  82)													int c20 = ::iterMagic::Iimg_obj::get(this131,index18);
HXDLIN(  82)													int v10;
HXDLIN(  82)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)														v10 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            													}
            													else {
HXLINE(  82)														v10 = c20;
            													}
HXDLIN(  82)													int maskPixel4 = v10;
HXDLIN(  82)													int this132 = col4;
HXDLIN(  82)													if ((maskPixel4 == 0)) {
HXLINE(  82)														col4 = this132;
            													}
            													else {
HXLINE(  82)														Float m04;
HXDLIN(  82)														int this133 = ((maskPixel4 >> 24) & 255);
HXDLIN(  82)														if ((this133 == 0)) {
HXLINE(  82)															m04 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															m04 = (( (Float)(this133) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float m14;
HXDLIN(  82)														int this134 = ((maskPixel4 >> 16) & 255);
HXDLIN(  82)														if ((this134 == 0)) {
HXLINE(  82)															m14 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															m14 = (( (Float)(this134) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float m24;
HXDLIN(  82)														int this135 = ((maskPixel4 >> 8) & 255);
HXDLIN(  82)														if ((this135 == 0)) {
HXLINE(  82)															m24 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															m24 = (( (Float)(this135) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float m34;
HXDLIN(  82)														int this136 = (maskPixel4 & 255);
HXDLIN(  82)														if ((this136 == 0)) {
HXLINE(  82)															m34 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															m34 = (( (Float)(this136) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this132 >> 24) & 255)) )));
HXDLIN(  82)														int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this132 >> 16) & 255)) )));
HXDLIN(  82)														int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this132 >> 8) & 255)) )));
HXDLIN(  82)														int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this132 & 255)) )));
HXDLIN(  82)														col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  82)												if ((col4 != 0)) {
HXLINE(  82)													int x14 = (dx6 - rectLeft4);
HXDLIN(  82)													int y14 = (dy6 - rectTop4);
HXDLIN(  82)													int c21 = col4;
HXDLIN(  82)													bool hitQuad34;
HXDLIN(  82)													if ((((c21 >> 24) & 255) < 254)) {
HXLINE(  82)														hitQuad34 = undoImage12->transparent;
            													}
            													else {
HXLINE(  82)														hitQuad34 = false;
            													}
HXDLIN(  82)													if (hitQuad34) {
HXLINE(  82)														int location8;
HXDLIN(  82)														if (undoImage12->useVirtualPos) {
HXLINE(  82)															location8 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x14) - undoImage12->virtualX));
            														}
            														else {
HXLINE(  82)															location8 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage12->width) + x14)) ));
            														}
HXDLIN(  82)														int this137 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN(  82)														int this138;
HXDLIN(  82)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)															this138 = ((((((this137 >> 24) & 255) << 24) | ((this137 & 255) << 16)) | (((this137 >> 8) & 255) << 8)) | ((this137 >> 16) & 255));
            														}
            														else {
HXLINE(  82)															this138 = this137;
            														}
HXDLIN(  82)														Float a113;
HXDLIN(  82)														int this139 = ((this138 >> 24) & 255);
HXDLIN(  82)														if ((this139 == 0)) {
HXLINE(  82)															a113 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															a113 = (( (Float)(this139) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float r110;
HXDLIN(  82)														int this140 = ((this138 >> 16) & 255);
HXDLIN(  82)														if ((this140 == 0)) {
HXLINE(  82)															r110 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															r110 = (( (Float)(this140) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float g110;
HXDLIN(  82)														int this141 = ((this138 >> 8) & 255);
HXDLIN(  82)														if ((this141 == 0)) {
HXLINE(  82)															g110 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															g110 = (( (Float)(this141) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float b114;
HXDLIN(  82)														int this142 = (this138 & 255);
HXDLIN(  82)														if ((this142 == 0)) {
HXLINE(  82)															b114 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															b114 = (( (Float)(this142) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float a211;
HXDLIN(  82)														int this143 = ((col4 >> 24) & 255);
HXDLIN(  82)														if ((this143 == 0)) {
HXLINE(  82)															a211 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															a211 = (( (Float)(this143) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float r28;
HXDLIN(  82)														int this144 = ((col4 >> 16) & 255);
HXDLIN(  82)														if ((this144 == 0)) {
HXLINE(  82)															r28 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															r28 = (( (Float)(this144) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float g28;
HXDLIN(  82)														int this145 = ((col4 >> 8) & 255);
HXDLIN(  82)														if ((this145 == 0)) {
HXLINE(  82)															g28 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															g28 = (( (Float)(this145) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float b212;
HXDLIN(  82)														int this146 = (col4 & 255);
HXDLIN(  82)														if ((this146 == 0)) {
HXLINE(  82)															b212 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															b212 = (( (Float)(this146) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN(  82)														int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r28 * a211))));
HXDLIN(  82)														int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g28 * a211))));
HXDLIN(  82)														int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b212 * a211))));
HXDLIN(  82)														int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN(  82)														int blended8 = ((((a43 << 24) | (r20 << 16)) | (g20 << 8)) | b42);
HXDLIN(  82)														{
HXLINE(  82)															int hitQuad35;
HXDLIN(  82)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																hitQuad35 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            															}
            															else {
HXLINE(  82)																hitQuad35 = blended8;
            															}
HXDLIN(  82)															::iterMagic::Iimg_obj::set(undoImage12->image,location8,hitQuad35);
            														}
            													}
            													else {
HXLINE(  82)														::Dynamic this147 = undoImage12->image;
HXDLIN(  82)														int index19;
HXDLIN(  82)														if (undoImage12->useVirtualPos) {
HXLINE(  82)															index19 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x14) - undoImage12->virtualX));
            														}
            														else {
HXLINE(  82)															index19 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage12->width) + x14)) ));
            														}
HXDLIN(  82)														int hitQuad36;
HXDLIN(  82)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)															hitQuad36 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            														}
            														else {
HXLINE(  82)															hitQuad36 = c21;
            														}
HXDLIN(  82)														::iterMagic::Iimg_obj::set(this147,index19,hitQuad36);
            													}
            												}
            												else {
HXLINE(  82)													if (forceClear4) {
HXLINE(  82)														::Dynamic this148 = undoImage12->image;
HXDLIN(  82)														int x15 = (dx6 - rectLeft4);
HXDLIN(  82)														int y15 = (dy6 - rectTop4);
HXDLIN(  82)														int index20;
HXDLIN(  82)														if (undoImage12->useVirtualPos) {
HXLINE(  82)															index20 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x15) - undoImage12->virtualX));
            														}
            														else {
HXLINE(  82)															index20 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage12->width) + x15)) ));
            														}
HXDLIN(  82)														::iterMagic::Iimg_obj::set(this148,index20,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  82)						bool found4 = false;
HXDLIN(  82)						Float s1 = ((Float)0.);
HXDLIN(  82)						Float t1 = ((Float)0.);
HXDLIN(  82)						Float sxx1 = ((Float)0.);
HXDLIN(  82)						Float txx1 = ((Float)0.);
HXDLIN(  82)						{
HXLINE(  82)							int _g_min8 = xIter34->start;
HXDLIN(  82)							int _g_max8 = xIter34->max;
HXDLIN(  82)							while((_g_min8 < _g_max8)){
HXLINE(  82)								_g_min8 = (_g_min8 + 1);
HXDLIN(  82)								int x16 = (_g_min8 - 1);
HXLINE(  60)								sxx1 = (sx1 * ( (Float)(x16) ));
HXLINE(  61)								txx1 = (tx1 * ( (Float)(x16) ));
HXLINE(  62)								found4 = false;
HXLINE(  82)								{
HXLINE(  82)									int _g_min9 = yIter34->start;
HXDLIN(  82)									int _g_max9 = yIter34->max;
HXDLIN(  82)									while((_g_min9 < _g_max9)){
HXLINE(  82)										_g_min9 = (_g_min9 + 1);
HXDLIN(  82)										int y16 = (_g_min9 - 1);
HXLINE(  64)										s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y16) )));
HXLINE(  65)										t1 = ((t01 + txx1) + (ty1 * ( (Float)(y16) )));
HXLINE(  82)										bool hitQuad37;
HXDLIN(  82)										if (!((s1 <= 0))) {
HXLINE(  82)											hitQuad37 = (t1 <= 0);
            										}
            										else {
HXLINE(  82)											hitQuad37 = true;
            										}
HXDLIN(  82)										if (hitQuad37) {
HXLINE(  82)											if (found4) {
HXLINE(  82)												goto _hx_goto_144;
            											}
            										}
            										else {
HXLINE(  82)											if (((s1 + t1) < A1)) {
HXLINE(  82)												{
HXLINE(  82)													int c22 = color;
HXDLIN(  82)													bool hitQuad38;
HXDLIN(  82)													if ((((c22 >> 24) & 255) < 254)) {
HXLINE(  82)														hitQuad38 = pixelImage->transparent;
            													}
            													else {
HXLINE(  82)														hitQuad38 = false;
            													}
HXDLIN(  82)													if (hitQuad38) {
HXLINE(  82)														int location9;
HXDLIN(  82)														if (pixelImage->useVirtualPos) {
HXLINE(  82)															location9 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x16) - pixelImage->virtualX));
            														}
            														else {
HXLINE(  82)															location9 = ::Std_obj::_hx_int(( (Float)(((y16 * pixelImage->width) + x16)) ));
            														}
HXDLIN(  82)														int this149 = ::iterMagic::Iimg_obj::get(pixelImage->image,location9);
HXDLIN(  82)														int this150;
HXDLIN(  82)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)															this150 = ((((((this149 >> 24) & 255) << 24) | ((this149 & 255) << 16)) | (((this149 >> 8) & 255) << 8)) | ((this149 >> 16) & 255));
            														}
            														else {
HXLINE(  82)															this150 = this149;
            														}
HXDLIN(  82)														Float a114;
HXDLIN(  82)														int this151 = ((this150 >> 24) & 255);
HXDLIN(  82)														if ((this151 == 0)) {
HXLINE(  82)															a114 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															a114 = (( (Float)(this151) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float r111;
HXDLIN(  82)														int this152 = ((this150 >> 16) & 255);
HXDLIN(  82)														if ((this152 == 0)) {
HXLINE(  82)															r111 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															r111 = (( (Float)(this152) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float g111;
HXDLIN(  82)														int this153 = ((this150 >> 8) & 255);
HXDLIN(  82)														if ((this153 == 0)) {
HXLINE(  82)															g111 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															g111 = (( (Float)(this153) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float b115;
HXDLIN(  82)														int this154 = (this150 & 255);
HXDLIN(  82)														if ((this154 == 0)) {
HXLINE(  82)															b115 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															b115 = (( (Float)(this154) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float a212;
HXDLIN(  82)														int this155 = ((color >> 24) & 255);
HXDLIN(  82)														if ((this155 == 0)) {
HXLINE(  82)															a212 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															a212 = (( (Float)(this155) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float r29;
HXDLIN(  82)														int this156 = ((color >> 16) & 255);
HXDLIN(  82)														if ((this156 == 0)) {
HXLINE(  82)															r29 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															r29 = (( (Float)(this156) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float g29;
HXDLIN(  82)														int this157 = ((color >> 8) & 255);
HXDLIN(  82)														if ((this157 == 0)) {
HXLINE(  82)															g29 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															g29 = (( (Float)(this157) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float b213;
HXDLIN(  82)														int this158 = (color & 255);
HXDLIN(  82)														if ((this158 == 0)) {
HXLINE(  82)															b213 = ((Float)0.);
            														}
            														else {
HXLINE(  82)															b213 = (( (Float)(this158) ) / ( (Float)(255) ));
            														}
HXDLIN(  82)														Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN(  82)														int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a311) + (r29 * a212))));
HXDLIN(  82)														int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a311) + (g29 * a212))));
HXDLIN(  82)														int b43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b213 * a212))));
HXDLIN(  82)														int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN(  82)														int blended9 = ((((a44 << 24) | (r30 << 16)) | (g30 << 8)) | b43);
HXDLIN(  82)														{
HXLINE(  82)															int hitQuad39;
HXDLIN(  82)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)																hitQuad39 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            															}
            															else {
HXLINE(  82)																hitQuad39 = blended9;
            															}
HXDLIN(  82)															::iterMagic::Iimg_obj::set(pixelImage->image,location9,hitQuad39);
            														}
            													}
            													else {
HXLINE(  82)														::Dynamic this159 = pixelImage->image;
HXDLIN(  82)														int index21;
HXDLIN(  82)														if (pixelImage->useVirtualPos) {
HXLINE(  82)															index21 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x16) - pixelImage->virtualX));
            														}
            														else {
HXLINE(  82)															index21 = ::Std_obj::_hx_int(( (Float)(((y16 * pixelImage->width) + x16)) ));
            														}
HXDLIN(  82)														int hitQuad40;
HXDLIN(  82)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)															hitQuad40 = ((((((c22 >> 24) & 255) << 24) | ((c22 & 255) << 16)) | (((c22 >> 8) & 255) << 8)) | ((c22 >> 16) & 255));
            														}
            														else {
HXLINE(  82)															hitQuad40 = c22;
            														}
HXDLIN(  82)														::iterMagic::Iimg_obj::set(this159,index21,hitQuad40);
            													}
            												}
HXLINE(  73)												found4 = true;
            											}
            											else {
HXLINE(  82)												if (found4) {
HXLINE(  82)													goto _hx_goto_144;
            												}
            											}
            										}
            									}
            									_hx_goto_144:;
            								}
            							}
            						}
            					}
            				}
HXDLIN(  82)				bool hasUndo5 = false;
HXDLIN(  82)				int aA3 = ((color >> 24) & 255);
HXDLIN(  82)				int rA3 = ((color >> 16) & 255);
HXDLIN(  82)				int gA3 = ((color >> 8) & 255);
HXDLIN(  82)				int bA3 = (color & 255);
HXDLIN(  82)				Float bcx3 = (bx5 - cx5);
HXDLIN(  82)				Float bcy3 = (by5 - cy5);
HXDLIN(  82)				Float acx3 = (ex1 - cx5);
HXDLIN(  82)				Float acy3 = (ey1 - cy5);
HXDLIN(  82)				Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN(  82)				Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN(  82)				Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN(  82)				Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN(  82)				 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN(  82)				if ((ex1 > bx5)) {
HXLINE(  82)					if ((ex1 > cx5)) {
HXLINE(  82)						int min32;
HXDLIN(  82)						if ((bx5 > cx5)) {
HXLINE(  82)							min32 = ::Math_obj::floor(cx5);
            						}
            						else {
HXLINE(  82)							min32 = ::Math_obj::floor(bx5);
            						}
HXDLIN(  82)						int ii_min64 = min32;
HXDLIN(  82)						int ii_max64 = ::Math_obj::ceil(ex1);
HXDLIN(  82)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min64,ii_max64);
            					}
            					else {
HXLINE(  82)						int ii_min65 = ::Math_obj::floor(bx5);
HXDLIN(  82)						int ii_max65 = ::Math_obj::ceil(cx5);
HXDLIN(  82)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min65,ii_max65);
            					}
            				}
            				else {
HXLINE(  82)					if ((bx5 > cx5)) {
HXLINE(  82)						int min33;
HXDLIN(  82)						if ((ex1 > cx5)) {
HXLINE(  82)							min33 = ::Math_obj::floor(cx5);
            						}
            						else {
HXLINE(  82)							min33 = ::Math_obj::ceil(ex1);
            						}
HXDLIN(  82)						int ii_min66 = min33;
HXDLIN(  82)						int ii_max66 = ::Math_obj::ceil(bx5);
HXDLIN(  82)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min66,ii_max66);
            					}
            					else {
HXLINE(  82)						int ii_min67 = ::Math_obj::floor(ex1);
HXDLIN(  82)						int ii_max67 = ::Math_obj::ceil(cx5);
HXDLIN(  82)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min67,ii_max67);
            					}
            				}
HXDLIN(  82)				 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN(  82)				if ((ey1 > by5)) {
HXLINE(  82)					if ((ey1 > cy5)) {
HXLINE(  82)						int min34;
HXDLIN(  82)						if ((by5 > cy5)) {
HXLINE(  82)							min34 = ::Math_obj::floor(cy5);
            						}
            						else {
HXLINE(  82)							min34 = ::Math_obj::floor(by5);
            						}
HXDLIN(  82)						int ii_min68 = min34;
HXDLIN(  82)						int ii_max68 = ::Math_obj::ceil(ey1);
HXDLIN(  82)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min68,ii_max68);
            					}
            					else {
HXLINE(  82)						int ii_min69 = ::Math_obj::floor(by5);
HXDLIN(  82)						int ii_max69 = ::Math_obj::ceil(cy5);
HXDLIN(  82)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min69,ii_max69);
            					}
            				}
            				else {
HXLINE(  82)					if ((by5 > cy5)) {
HXLINE(  82)						int min35;
HXDLIN(  82)						if ((ey1 > cy5)) {
HXLINE(  82)							min35 = ::Math_obj::floor(cy5);
            						}
            						else {
HXLINE(  82)							min35 = ::Math_obj::ceil(ey1);
            						}
HXDLIN(  82)						int ii_min70 = min35;
HXDLIN(  82)						int ii_max70 = ::Math_obj::ceil(by5);
HXDLIN(  82)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min70,ii_max70);
            					}
            					else {
HXLINE(  82)						int ii_min71 = ::Math_obj::floor(ey1);
HXDLIN(  82)						int ii_max71 = ::Math_obj::ceil(cy5);
HXDLIN(  82)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min71,ii_max71);
            					}
            				}
HXDLIN(  82)				 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN(  82)				if (hasUndo5) {
HXLINE(  82)					int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN(  82)					int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN(  82)					 ::Dynamic imageType5 = null();
HXDLIN(  82)					 ::pi_xy::ImageStruct this160 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  82)					if (::hx::IsNull( imageType5 )) {
HXLINE(  54)						imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  82)					::Dynamic undoImage16;
HXDLIN(  82)					switch((int)(( (int)(imageType5) ))){
            						case (int)0: {
HXLINE(  82)							 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::BytesImg b44 = byt5;
HXDLIN(  82)							{
HXLINE(  82)								b44->width = width5;
HXDLIN(  82)								b44->height = height5;
HXDLIN(  82)								b44->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  82)								b44->data = ::haxe::io::Bytes_obj::alloc((b44->length * 4));
HXDLIN(  82)								{
HXLINE(  82)									int len10 = b44->length;
HXDLIN(  82)									int w5 = 0;
HXDLIN(  82)									{
HXLINE(  82)										int _g100 = 0;
HXDLIN(  82)										int _g101 = b44->height;
HXDLIN(  82)										while((_g100 < _g101)){
HXLINE(  82)											_g100 = (_g100 + 1);
HXDLIN(  82)											int y17 = (_g100 - 1);
HXDLIN(  82)											{
HXLINE(  82)												int _g102 = 0;
HXDLIN(  82)												int _g103 = b44->width;
HXDLIN(  82)												while((_g102 < _g103)){
HXLINE(  82)													_g102 = (_g102 + 1);
HXDLIN(  82)													int x17 = (_g102 - 1);
HXDLIN(  82)													{
HXLINE(  82)														w5 = (w5 + 1);
HXDLIN(  82)														b44->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  82)													{
HXLINE(  82)														w5 = (w5 + 1);
HXDLIN(  82)														b44->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  82)													{
HXLINE(  82)														w5 = (w5 + 1);
HXDLIN(  82)														b44->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  82)													{
HXLINE(  82)														w5 = (w5 + 1);
HXDLIN(  82)														b44->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  82)							undoImage16 = b44;
            						}
            						break;
            						case (int)1: {
HXLINE(  82)							 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::ArrIntImg a45 = arrI5;
HXDLIN(  82)							{
HXLINE(  82)								a45->width = width5;
HXDLIN(  82)								a45->height = height5;
HXDLIN(  82)								a45->data = ::Array_obj< int >::__new(0);
HXDLIN(  82)								a45->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  82)								{
HXLINE(  82)									int _g104 = 0;
HXDLIN(  82)									int _g105 = a45->length;
HXDLIN(  82)									while((_g104 < _g105)){
HXLINE(  82)										_g104 = (_g104 + 1);
HXDLIN(  82)										int i42 = (_g104 - 1);
HXDLIN(  82)										a45->data[i42] = 0;
            									}
            								}
            							}
HXDLIN(  82)							undoImage16 = a45;
            						}
            						break;
            						case (int)2: {
HXLINE(  82)							 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::U32ArrImg b45 = u32a5;
HXDLIN(  82)							{
HXLINE(  82)								b45->width = width5;
HXDLIN(  82)								b45->height = height5;
HXDLIN(  82)								b45->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  82)								int size5 = (b45->length * 4);
HXDLIN(  82)								b45->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN(  82)								{
HXLINE(  82)									int _g106 = 0;
HXDLIN(  82)									int _g107 = b45->length;
HXDLIN(  82)									while((_g106 < _g107)){
HXLINE(  82)										_g106 = (_g106 + 1);
HXDLIN(  82)										int i43 = (_g106 - 1);
HXDLIN(  82)										{
HXLINE(  82)											 ::haxe::io::ArrayBufferViewImpl this161 = b45->data;
HXDLIN(  82)											bool undoImage17;
HXDLIN(  82)											if ((i43 >= 0)) {
HXLINE(  82)												undoImage17 = (i43 < (this161->byteLength >> 2));
            											}
            											else {
HXLINE(  82)												undoImage17 = false;
            											}
HXDLIN(  82)											if (undoImage17) {
HXLINE(  82)												 ::haxe::io::Bytes _this5 = this161->bytes;
HXDLIN(  82)												int pos5 = ((i43 << 2) + this161->byteOffset);
HXDLIN(  82)												_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN(  82)												_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN(  82)												_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN(  82)												_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  82)							undoImage16 = b45;
            						}
            						break;
            						case (int)3: {
HXLINE(  82)							 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::VecIntImg v11 = vec5;
HXDLIN(  82)							{
HXLINE(  82)								v11->width = width5;
HXDLIN(  82)								v11->height = height5;
HXDLIN(  82)								v11->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  82)								v11->data = ::Array_obj< int >::__new(v11->length);
HXDLIN(  82)								{
HXLINE(  82)									int _g108 = 0;
HXDLIN(  82)									int _g109 = v11->length;
HXDLIN(  82)									while((_g108 < _g109)){
HXLINE(  82)										_g108 = (_g108 + 1);
HXDLIN(  82)										int i44 = (_g108 - 1);
HXDLIN(  82)										v11->data->__unsafe_set(i44,0);
            									}
            								}
            							}
HXDLIN(  82)							undoImage16 = v11;
            						}
            						break;
            						case (int)4: {
HXLINE(  82)							 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::StackIntImg b46 = sInt5;
HXDLIN(  82)							{
HXLINE(  82)								b46->width = width5;
HXDLIN(  82)								b46->height = height5;
HXDLIN(  82)								b46->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN(  82)								b46->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  82)								{
HXLINE(  82)									int len11 = b46->length;
HXDLIN(  82)									 ::haxe::ds::GenericStack_Int d5 = b46->data;
HXDLIN(  82)									if (::hx::IsNull( d5->head )) {
HXLINE(  82)										int _g110 = 0;
HXDLIN(  82)										int _g111 = len11;
HXDLIN(  82)										while((_g110 < _g111)){
HXLINE(  82)											_g110 = (_g110 + 1);
HXDLIN(  82)											int i45 = (_g110 - 1);
HXDLIN(  82)											d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            										}
            									}
            									else {
HXLINE(  82)										int _g112 = 0;
HXDLIN(  82)										int _g113 = len11;
HXDLIN(  82)										while((_g112 < _g113)){
HXLINE(  82)											_g112 = (_g112 + 1);
HXDLIN(  82)											int i46 = (_g112 - 1);
HXDLIN(  82)											{
HXLINE(  82)												 ::haxe::ds::GenericCell_Int l5 = b46->data->head;
HXDLIN(  82)												 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN(  82)												{
HXLINE(  82)													int _g114 = 0;
HXDLIN(  82)													int _g115 = i46;
HXDLIN(  82)													while((_g114 < _g115)){
HXLINE(  82)														_g114 = (_g114 + 1);
HXDLIN(  82)														int i47 = (_g114 - 1);
HXLINE( 345)														prev5 = l5;
HXLINE( 346)														l5 = l5->next;
            													}
            												}
HXLINE(  82)												if (::hx::IsNull( prev5 )) {
HXLINE(  82)													b46->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  82)													l5 = null();
            												}
            												else {
HXLINE(  82)													prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN(  82)													l5 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  82)							undoImage16 = b46;
            						}
            						break;
            					}
HXDLIN(  82)					this160->image = undoImage16;
HXDLIN(  82)					this160->width = width5;
HXDLIN(  82)					this160->height = height5;
HXDLIN(  82)					this160->imageType = ( (int)(imageType5) );
HXDLIN(  82)					undoImage15 = this160;
HXDLIN(  82)					{
HXLINE(  82)						int rectLeft5 = xIter35->start;
HXDLIN(  82)						int rectTop5 = yIter35->start;
HXDLIN(  82)						int rectRight5 = xIter35->max;
HXDLIN(  82)						bool forceClear5 = false;
HXDLIN(  82)						{
HXLINE(  82)							int _g116 = rectTop5;
HXDLIN(  82)							int _g117 = yIter35->max;
HXDLIN(  82)							while((_g116 < _g117)){
HXLINE(  82)								_g116 = (_g116 + 1);
HXDLIN(  82)								int dy7 = (_g116 - 1);
HXDLIN(  82)								{
HXLINE(  82)									int _g118 = rectLeft5;
HXDLIN(  82)									int _g119 = rectRight5;
HXDLIN(  82)									while((_g118 < _g119)){
HXLINE(  82)										_g118 = (_g118 + 1);
HXDLIN(  82)										int dx7 = (_g118 - 1);
HXDLIN(  82)										::Dynamic this162 = pixelImage->image;
HXDLIN(  82)										int index22;
HXDLIN(  82)										if (pixelImage->useVirtualPos) {
HXLINE(  82)											index22 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx7) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  82)											index22 = ::Std_obj::_hx_int(( (Float)(((dy7 * pixelImage->width) + dx7)) ));
            										}
HXDLIN(  82)										int c23 = ::iterMagic::Iimg_obj::get(this162,index22);
HXDLIN(  82)										int col5;
HXDLIN(  82)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)											col5 = ((((((c23 >> 24) & 255) << 24) | ((c23 & 255) << 16)) | (((c23 >> 8) & 255) << 8)) | ((c23 >> 16) & 255));
            										}
            										else {
HXLINE(  82)											col5 = c23;
            										}
HXDLIN(  82)										bool hitQuad41;
HXDLIN(  82)										if (pixelImage->useMask) {
HXLINE(  82)											hitQuad41 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  82)											hitQuad41 = false;
            										}
HXDLIN(  82)										if (hitQuad41) {
HXLINE(  82)											 ::pi_xy::ImageStruct this163 = pixelImage->mask;
HXDLIN(  82)											::Dynamic this164 = this163->image;
HXDLIN(  82)											int index23;
HXDLIN(  82)											if (this163->useVirtualPos) {
HXLINE(  82)												index23 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this163->virtualY) * ( (Float)(this163->width) )) + dx7) - this163->virtualX));
            											}
            											else {
HXLINE(  82)												index23 = ::Std_obj::_hx_int(( (Float)(((dy7 * this163->width) + dx7)) ));
            											}
HXDLIN(  82)											int c24 = ::iterMagic::Iimg_obj::get(this164,index23);
HXDLIN(  82)											int v12;
HXDLIN(  82)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)												v12 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            											}
            											else {
HXLINE(  82)												v12 = c24;
            											}
HXDLIN(  82)											int maskPixel5 = v12;
HXDLIN(  82)											int this165 = col5;
HXDLIN(  82)											if ((maskPixel5 == 0)) {
HXLINE(  82)												col5 = this165;
            											}
            											else {
HXLINE(  82)												Float m05;
HXDLIN(  82)												int this166 = ((maskPixel5 >> 24) & 255);
HXDLIN(  82)												if ((this166 == 0)) {
HXLINE(  82)													m05 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													m05 = (( (Float)(this166) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float m15;
HXDLIN(  82)												int this167 = ((maskPixel5 >> 16) & 255);
HXDLIN(  82)												if ((this167 == 0)) {
HXLINE(  82)													m15 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													m15 = (( (Float)(this167) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float m25;
HXDLIN(  82)												int this168 = ((maskPixel5 >> 8) & 255);
HXDLIN(  82)												if ((this168 == 0)) {
HXLINE(  82)													m25 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													m25 = (( (Float)(this168) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float m35;
HXDLIN(  82)												int this169 = (maskPixel5 & 255);
HXDLIN(  82)												if ((this169 == 0)) {
HXLINE(  82)													m35 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													m35 = (( (Float)(this169) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this165 >> 24) & 255)) )));
HXDLIN(  82)												int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this165 >> 16) & 255)) )));
HXDLIN(  82)												int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this165 >> 8) & 255)) )));
HXDLIN(  82)												int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this165 & 255)) )));
HXDLIN(  82)												col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  82)										if ((col5 != 0)) {
HXLINE(  82)											int x18 = (dx7 - rectLeft5);
HXDLIN(  82)											int y18 = (dy7 - rectTop5);
HXDLIN(  82)											int c25 = col5;
HXDLIN(  82)											bool hitQuad42;
HXDLIN(  82)											if ((((c25 >> 24) & 255) < 254)) {
HXLINE(  82)												hitQuad42 = undoImage15->transparent;
            											}
            											else {
HXLINE(  82)												hitQuad42 = false;
            											}
HXDLIN(  82)											if (hitQuad42) {
HXLINE(  82)												int location10;
HXDLIN(  82)												if (undoImage15->useVirtualPos) {
HXLINE(  82)													location10 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x18) - undoImage15->virtualX));
            												}
            												else {
HXLINE(  82)													location10 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage15->width) + x18)) ));
            												}
HXDLIN(  82)												int this170 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN(  82)												int this171;
HXDLIN(  82)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)													this171 = ((((((this170 >> 24) & 255) << 24) | ((this170 & 255) << 16)) | (((this170 >> 8) & 255) << 8)) | ((this170 >> 16) & 255));
            												}
            												else {
HXLINE(  82)													this171 = this170;
            												}
HXDLIN(  82)												Float a115;
HXDLIN(  82)												int this172 = ((this171 >> 24) & 255);
HXDLIN(  82)												if ((this172 == 0)) {
HXLINE(  82)													a115 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													a115 = (( (Float)(this172) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float r112;
HXDLIN(  82)												int this173 = ((this171 >> 16) & 255);
HXDLIN(  82)												if ((this173 == 0)) {
HXLINE(  82)													r112 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													r112 = (( (Float)(this173) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float g112;
HXDLIN(  82)												int this174 = ((this171 >> 8) & 255);
HXDLIN(  82)												if ((this174 == 0)) {
HXLINE(  82)													g112 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													g112 = (( (Float)(this174) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float b116;
HXDLIN(  82)												int this175 = (this171 & 255);
HXDLIN(  82)												if ((this175 == 0)) {
HXLINE(  82)													b116 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													b116 = (( (Float)(this175) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float a213;
HXDLIN(  82)												int this176 = ((col5 >> 24) & 255);
HXDLIN(  82)												if ((this176 == 0)) {
HXLINE(  82)													a213 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													a213 = (( (Float)(this176) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float r210;
HXDLIN(  82)												int this177 = ((col5 >> 16) & 255);
HXDLIN(  82)												if ((this177 == 0)) {
HXLINE(  82)													r210 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													r210 = (( (Float)(this177) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float g210;
HXDLIN(  82)												int this178 = ((col5 >> 8) & 255);
HXDLIN(  82)												if ((this178 == 0)) {
HXLINE(  82)													g210 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													g210 = (( (Float)(this178) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float b214;
HXDLIN(  82)												int this179 = (col5 & 255);
HXDLIN(  82)												if ((this179 == 0)) {
HXLINE(  82)													b214 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													b214 = (( (Float)(this179) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN(  82)												int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a312) + (r210 * a213))));
HXDLIN(  82)												int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a312) + (g210 * a213))));
HXDLIN(  82)												int b47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b214 * a213))));
HXDLIN(  82)												int a46 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN(  82)												int blended10 = ((((a46 << 24) | (r31 << 16)) | (g31 << 8)) | b47);
HXDLIN(  82)												{
HXLINE(  82)													int hitQuad43;
HXDLIN(  82)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)														hitQuad43 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            													}
            													else {
HXLINE(  82)														hitQuad43 = blended10;
            													}
HXDLIN(  82)													::iterMagic::Iimg_obj::set(undoImage15->image,location10,hitQuad43);
            												}
            											}
            											else {
HXLINE(  82)												::Dynamic this180 = undoImage15->image;
HXDLIN(  82)												int index24;
HXDLIN(  82)												if (undoImage15->useVirtualPos) {
HXLINE(  82)													index24 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x18) - undoImage15->virtualX));
            												}
            												else {
HXLINE(  82)													index24 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage15->width) + x18)) ));
            												}
HXDLIN(  82)												int hitQuad44;
HXDLIN(  82)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)													hitQuad44 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            												}
            												else {
HXLINE(  82)													hitQuad44 = c25;
            												}
HXDLIN(  82)												::iterMagic::Iimg_obj::set(this180,index24,hitQuad44);
            											}
            										}
            										else {
HXLINE(  82)											if (forceClear5) {
HXLINE(  82)												::Dynamic this181 = undoImage15->image;
HXDLIN(  82)												int x19 = (dx7 - rectLeft5);
HXDLIN(  82)												int y19 = (dy7 - rectTop5);
HXDLIN(  82)												int index25;
HXDLIN(  82)												if (undoImage15->useVirtualPos) {
HXLINE(  82)													index25 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x19) - undoImage15->virtualX));
            												}
            												else {
HXLINE(  82)													index25 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage15->width) + x19)) ));
            												}
HXDLIN(  82)												::iterMagic::Iimg_obj::set(this181,index25,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  82)				bool found5 = false;
HXDLIN(  82)				{
HXLINE(  82)					int _g_min10 = xIter35->start;
HXDLIN(  82)					int _g_max10 = xIter35->max;
HXDLIN(  82)					while((_g_min10 < _g_max10)){
HXLINE(  82)						_g_min10 = (_g_min10 + 1);
HXDLIN(  82)						int px4 = (_g_min10 - 1);
HXDLIN(  82)						Float pcx3 = (( (Float)(px4) ) - cx5);
HXLINE( 619)						found5 = false;
HXLINE(  82)						{
HXLINE(  82)							int _g_min11 = yIter35->start;
HXDLIN(  82)							int _g_max11 = yIter35->max;
HXDLIN(  82)							while((_g_min11 < _g_max11)){
HXLINE(  82)								_g_min11 = (_g_min11 + 1);
HXDLIN(  82)								int py4 = (_g_min11 - 1);
HXDLIN(  82)								Float pcy3 = (( (Float)(py4) ) - cy5);
HXDLIN(  82)								Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN(  82)								Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN(  82)								Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN(  82)								Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN(  82)								Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN(  82)								bool hitQuad45;
HXDLIN(  82)								bool hitQuad46;
HXDLIN(  82)								if ((ratioA3 >= 0)) {
HXLINE(  82)									hitQuad46 = (ratioB3 >= 0);
            								}
            								else {
HXLINE(  82)									hitQuad46 = false;
            								}
HXDLIN(  82)								if (hitQuad46) {
HXLINE(  82)									hitQuad45 = (ratioC3 >= 0);
            								}
            								else {
HXLINE(  82)									hitQuad45 = false;
            								}
HXDLIN(  82)								if (hitQuad45) {
HXLINE(  82)									int i48 = ::Std_obj::_hx_int((( (Float)(aA3) ) * (soft * ratioB3)));
HXDLIN(  82)									if ((i48 > 255)) {
HXLINE(  24)										i48 = 255;
            									}
HXLINE(  82)									if ((i48 < 0)) {
HXLINE(  25)										i48 = 0;
            									}
HXLINE(  82)									int a47 = i48;
HXDLIN(  82)									int i49 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN(  82)									if ((i49 > 255)) {
HXLINE(  24)										i49 = 255;
            									}
HXLINE(  82)									if ((i49 < 0)) {
HXLINE(  25)										i49 = 0;
            									}
HXLINE(  82)									int r32 = i49;
HXDLIN(  82)									int i50 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN(  82)									if ((i50 > 255)) {
HXLINE(  24)										i50 = 255;
            									}
HXLINE(  82)									if ((i50 < 0)) {
HXLINE(  25)										i50 = 0;
            									}
HXLINE(  82)									int g32 = i50;
HXDLIN(  82)									int i51 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN(  82)									if ((i51 > 255)) {
HXLINE(  24)										i51 = 255;
            									}
HXLINE(  82)									if ((i51 < 0)) {
HXLINE(  25)										i51 = 0;
            									}
HXLINE(  82)									int b48 = i51;
HXDLIN(  82)									{
HXLINE(  82)										int location11;
HXDLIN(  82)										if (pixelImage->useVirtualPos) {
HXLINE(  82)											location11 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px4) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  82)											location11 = ::Std_obj::_hx_int(( (Float)(((py4 * pixelImage->width) + px4)) ));
            										}
HXDLIN(  82)										bool hitQuad47;
HXDLIN(  82)										if (pixelImage->transparent) {
HXLINE(  82)											hitQuad47 = (a47 < 254);
            										}
            										else {
HXLINE(  82)											hitQuad47 = false;
            										}
HXDLIN(  82)										if (hitQuad47) {
HXLINE(  82)											int this182 = ::iterMagic::Iimg_obj::get(pixelImage->image,location11);
HXDLIN(  82)											int old3;
HXDLIN(  82)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)												old3 = ((((((this182 >> 24) & 255) << 24) | ((this182 & 255) << 16)) | (((this182 >> 8) & 255) << 8)) | ((this182 >> 16) & 255));
            											}
            											else {
HXLINE(  82)												old3 = this182;
            											}
HXDLIN(  82)											int rhs3 = ((((a47 << 24) | (r32 << 16)) | (g32 << 8)) | b48);
HXDLIN(  82)											Float a116;
HXDLIN(  82)											int this183 = ((old3 >> 24) & 255);
HXDLIN(  82)											if ((this183 == 0)) {
HXLINE(  82)												a116 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												a116 = (( (Float)(this183) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float r113;
HXDLIN(  82)											int this184 = ((old3 >> 16) & 255);
HXDLIN(  82)											if ((this184 == 0)) {
HXLINE(  82)												r113 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												r113 = (( (Float)(this184) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float g113;
HXDLIN(  82)											int this185 = ((old3 >> 8) & 255);
HXDLIN(  82)											if ((this185 == 0)) {
HXLINE(  82)												g113 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												g113 = (( (Float)(this185) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float b117;
HXDLIN(  82)											int this186 = (old3 & 255);
HXDLIN(  82)											if ((this186 == 0)) {
HXLINE(  82)												b117 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												b117 = (( (Float)(this186) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float a214;
HXDLIN(  82)											int this187 = ((rhs3 >> 24) & 255);
HXDLIN(  82)											if ((this187 == 0)) {
HXLINE(  82)												a214 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												a214 = (( (Float)(this187) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float r211;
HXDLIN(  82)											int this188 = ((rhs3 >> 16) & 255);
HXDLIN(  82)											if ((this188 == 0)) {
HXLINE(  82)												r211 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												r211 = (( (Float)(this188) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float g211;
HXDLIN(  82)											int this189 = ((rhs3 >> 8) & 255);
HXDLIN(  82)											if ((this189 == 0)) {
HXLINE(  82)												g211 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												g211 = (( (Float)(this189) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float b215;
HXDLIN(  82)											int this190 = (rhs3 & 255);
HXDLIN(  82)											if ((this190 == 0)) {
HXLINE(  82)												b215 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												b215 = (( (Float)(this190) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN(  82)											int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a313) + (r211 * a214))));
HXDLIN(  82)											int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a313) + (g211 * a214))));
HXDLIN(  82)											int b49 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b215 * a214))));
HXDLIN(  82)											int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN(  82)											int blended11 = ((((a48 << 24) | (r33 << 16)) | (g33 << 8)) | b49);
HXDLIN(  82)											{
HXLINE(  82)												int hitQuad48;
HXDLIN(  82)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)													hitQuad48 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            												}
            												else {
HXLINE(  82)													hitQuad48 = blended11;
            												}
HXDLIN(  82)												::iterMagic::Iimg_obj::set(pixelImage->image,location11,hitQuad48);
            											}
            										}
            										else {
HXLINE(  82)											int value3;
HXDLIN(  82)											if (pixelImage->isLittle) {
HXLINE(  82)												value3 = ((((a47 << 24) | (b48 << 16)) | (g32 << 8)) | r32);
            											}
            											else {
HXLINE(  82)												value3 = ((((a47 << 24) | (r32 << 16)) | (g32 << 8)) | b48);
            											}
HXDLIN(  82)											::iterMagic::Iimg_obj::set(pixelImage->image,location11,value3);
            										}
            									}
HXLINE( 633)									found5 = true;
            								}
            								else {
HXLINE(  82)									if (found5) {
HXLINE(  82)										goto _hx_goto_156;
            									}
            								}
            							}
            							_hx_goto_156:;
            						}
            					}
            				}
HXDLIN(  82)				 ::pi_xy::iter::IntIterStart v_yIter33;
HXDLIN(  82)				 ::pi_xy::iter::IntIterStart v_xIter33;
HXDLIN(  82)				int v_undoY3;
HXDLIN(  82)				int v_undoX3;
HXDLIN(  82)				Float v_ty3;
HXDLIN(  82)				Float v_tx3;
HXDLIN(  82)				Float v_t03;
HXDLIN(  82)				Float v_sy3;
HXDLIN(  82)				Float v_sx3;
HXDLIN(  82)				Float v_s03;
HXDLIN(  82)				Float v_A3;
HXDLIN(  82)				Float ax5 = ex1;
HXDLIN(  82)				Float ay5 = ey1;
HXDLIN(  82)				 ::pi_xy::ImageStruct v_undoImage3 = null();
HXDLIN(  82)				Float bx7 = bx5;
HXDLIN(  82)				Float by7 = by5;
HXDLIN(  82)				Float cx7 = cx5;
HXDLIN(  82)				Float cy7 = cy5;
HXDLIN(  82)				bool adjustWinding5 = (((((ax5 * by7) - (bx7 * ay5)) + ((bx7 * cy7) - (cx7 * by7))) + ((cx7 * ay5) - (ax5 * cy7))) > 0);
HXDLIN(  82)				if (!(adjustWinding5)) {
HXLINE(  82)					Float bx_5 = bx7;
HXDLIN(  82)					Float by_5 = by7;
HXLINE(  24)					bx7 = cx7;
HXLINE(  25)					by7 = cy7;
HXLINE(  26)					cx7 = bx_5;
HXLINE(  27)					cy7 = by_5;
            				}
HXLINE(  82)				Float v_ax3 = ax5;
HXDLIN(  82)				Float v_ay3 = ay5;
HXDLIN(  82)				Float v_bx3 = bx7;
HXDLIN(  82)				Float v_by3 = by7;
HXDLIN(  82)				Float v_cx3 = cx7;
HXDLIN(  82)				Float v_cy3 = cy7;
HXDLIN(  82)				bool v_preCalculated3 = true;
HXDLIN(  82)				{
HXLINE(  82)					v_s03 = ((v_ay3 * v_cx3) - (v_ax3 * v_cy3));
HXDLIN(  82)					v_sx3 = (v_cy3 - v_ay3);
HXDLIN(  82)					v_sy3 = (v_ax3 - v_cx3);
HXDLIN(  82)					v_t03 = ((v_ax3 * v_by3) - (v_ay3 * v_bx3));
HXDLIN(  82)					v_tx3 = (v_ay3 - v_by3);
HXDLIN(  82)					v_ty3 = (v_bx3 - v_ax3);
HXDLIN(  82)					v_A3 = ((((-(v_by3) * v_cx3) + (v_ay3 * (-(v_bx3) + v_cx3))) + (v_ax3 * (v_by3 - v_cy3))) + (v_bx3 * v_cy3));
HXDLIN(  82)					Float a49 = v_ax3;
HXDLIN(  82)					Float b50 = v_bx3;
HXDLIN(  82)					Float c26 = v_cx3;
HXDLIN(  82)					if ((a49 > b50)) {
HXLINE(  82)						if ((a49 > c26)) {
HXLINE(  82)							int min36;
HXDLIN(  82)							if ((b50 > c26)) {
HXLINE(  82)								min36 = ::Math_obj::floor(c26);
            							}
            							else {
HXLINE(  82)								min36 = ::Math_obj::floor(b50);
            							}
HXDLIN(  82)							int ii_min72 = min36;
HXDLIN(  82)							int ii_max72 = ::Math_obj::ceil(a49);
HXDLIN(  82)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min72,ii_max72);
            						}
            						else {
HXLINE(  82)							int ii_min73 = ::Math_obj::floor(b50);
HXDLIN(  82)							int ii_max73 = ::Math_obj::ceil(c26);
HXDLIN(  82)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min73,ii_max73);
            						}
            					}
            					else {
HXLINE(  82)						if ((b50 > c26)) {
HXLINE(  82)							int min37;
HXDLIN(  82)							if ((a49 > c26)) {
HXLINE(  82)								min37 = ::Math_obj::floor(c26);
            							}
            							else {
HXLINE(  82)								min37 = ::Math_obj::ceil(a49);
            							}
HXDLIN(  82)							int ii_min74 = min37;
HXDLIN(  82)							int ii_max74 = ::Math_obj::ceil(b50);
HXDLIN(  82)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min74,ii_max74);
            						}
            						else {
HXLINE(  82)							int ii_min75 = ::Math_obj::floor(a49);
HXDLIN(  82)							int ii_max75 = ::Math_obj::ceil(c26);
HXDLIN(  82)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min75,ii_max75);
            						}
            					}
HXDLIN(  82)					Float a50 = v_ay3;
HXDLIN(  82)					Float b51 = v_by3;
HXDLIN(  82)					Float c27 = v_cy3;
HXDLIN(  82)					if ((a50 > b51)) {
HXLINE(  82)						if ((a50 > c27)) {
HXLINE(  82)							int min38;
HXDLIN(  82)							if ((b51 > c27)) {
HXLINE(  82)								min38 = ::Math_obj::floor(c27);
            							}
            							else {
HXLINE(  82)								min38 = ::Math_obj::floor(b51);
            							}
HXDLIN(  82)							int ii_min76 = min38;
HXDLIN(  82)							int ii_max76 = ::Math_obj::ceil(a50);
HXDLIN(  82)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min76,ii_max76);
            						}
            						else {
HXLINE(  82)							int ii_min77 = ::Math_obj::floor(b51);
HXDLIN(  82)							int ii_max77 = ::Math_obj::ceil(c27);
HXDLIN(  82)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min77,ii_max77);
            						}
            					}
            					else {
HXLINE(  82)						if ((b51 > c27)) {
HXLINE(  82)							int min39;
HXDLIN(  82)							if ((a50 > c27)) {
HXLINE(  82)								min39 = ::Math_obj::floor(c27);
            							}
            							else {
HXLINE(  82)								min39 = ::Math_obj::ceil(a50);
            							}
HXDLIN(  82)							int ii_min78 = min39;
HXDLIN(  82)							int ii_max78 = ::Math_obj::ceil(b51);
HXDLIN(  82)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min78,ii_max78);
            						}
            						else {
HXLINE(  82)							int ii_min79 = ::Math_obj::floor(a50);
HXDLIN(  82)							int ii_max79 = ::Math_obj::ceil(c27);
HXDLIN(  82)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min79,ii_max79);
            						}
            					}
            				}
HXDLIN(  82)				if (hasUndo5) {
HXLINE(  82)					v_undoImage3 = undoImage15;
HXDLIN(  82)					v_undoX3 = xIter35->start;
HXDLIN(  82)					v_undoY3 = yIter35->start;
            				}
HXDLIN(  82)				bool hasUndo6 = false;
HXDLIN(  82)				int aA4 = ((color >> 24) & 255);
HXDLIN(  82)				int rA4 = ((color >> 16) & 255);
HXDLIN(  82)				int gA4 = ((color >> 8) & 255);
HXDLIN(  82)				int bA4 = (color & 255);
HXDLIN(  82)				Float bcx4 = (cx5 - dx5);
HXDLIN(  82)				Float bcy4 = (cy5 - dy5);
HXDLIN(  82)				Float acx4 = (ex1 - dx5);
HXDLIN(  82)				Float acy4 = (ey1 - dy5);
HXDLIN(  82)				Float dot114 = ((bcx4 * bcx4) + (bcy4 * bcy4));
HXDLIN(  82)				Float dot124 = ((bcx4 * acx4) + (bcy4 * acy4));
HXDLIN(  82)				Float dot224 = ((acx4 * acx4) + (acy4 * acy4));
HXDLIN(  82)				Float denom14 = (( (Float)(1) ) / ((dot114 * dot224) - (dot124 * dot124)));
HXDLIN(  82)				 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN(  82)				if ((ex1 > cx5)) {
HXLINE(  82)					if ((ex1 > dx5)) {
HXLINE(  82)						int min40;
HXDLIN(  82)						if ((cx5 > dx5)) {
HXLINE(  82)							min40 = ::Math_obj::floor(dx5);
            						}
            						else {
HXLINE(  82)							min40 = ::Math_obj::floor(cx5);
            						}
HXDLIN(  82)						int ii_min80 = min40;
HXDLIN(  82)						int ii_max80 = ::Math_obj::ceil(ex1);
HXDLIN(  82)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min80,ii_max80);
            					}
            					else {
HXLINE(  82)						int ii_min81 = ::Math_obj::floor(cx5);
HXDLIN(  82)						int ii_max81 = ::Math_obj::ceil(dx5);
HXDLIN(  82)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min81,ii_max81);
            					}
            				}
            				else {
HXLINE(  82)					if ((cx5 > dx5)) {
HXLINE(  82)						int min41;
HXDLIN(  82)						if ((ex1 > dx5)) {
HXLINE(  82)							min41 = ::Math_obj::floor(dx5);
            						}
            						else {
HXLINE(  82)							min41 = ::Math_obj::ceil(ex1);
            						}
HXDLIN(  82)						int ii_min82 = min41;
HXDLIN(  82)						int ii_max82 = ::Math_obj::ceil(cx5);
HXDLIN(  82)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min82,ii_max82);
            					}
            					else {
HXLINE(  82)						int ii_min83 = ::Math_obj::floor(ex1);
HXDLIN(  82)						int ii_max83 = ::Math_obj::ceil(dx5);
HXDLIN(  82)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min83,ii_max83);
            					}
            				}
HXDLIN(  82)				 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN(  82)				if ((ey1 > cy5)) {
HXLINE(  82)					if ((ey1 > dy5)) {
HXLINE(  82)						int min42;
HXDLIN(  82)						if ((cy5 > dy5)) {
HXLINE(  82)							min42 = ::Math_obj::floor(dy5);
            						}
            						else {
HXLINE(  82)							min42 = ::Math_obj::floor(cy5);
            						}
HXDLIN(  82)						int ii_min84 = min42;
HXDLIN(  82)						int ii_max84 = ::Math_obj::ceil(ey1);
HXDLIN(  82)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min84,ii_max84);
            					}
            					else {
HXLINE(  82)						int ii_min85 = ::Math_obj::floor(cy5);
HXDLIN(  82)						int ii_max85 = ::Math_obj::ceil(dy5);
HXDLIN(  82)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min85,ii_max85);
            					}
            				}
            				else {
HXLINE(  82)					if ((cy5 > dy5)) {
HXLINE(  82)						int min43;
HXDLIN(  82)						if ((ey1 > dy5)) {
HXLINE(  82)							min43 = ::Math_obj::floor(dy5);
            						}
            						else {
HXLINE(  82)							min43 = ::Math_obj::ceil(ey1);
            						}
HXDLIN(  82)						int ii_min86 = min43;
HXDLIN(  82)						int ii_max86 = ::Math_obj::ceil(cy5);
HXDLIN(  82)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min86,ii_max86);
            					}
            					else {
HXLINE(  82)						int ii_min87 = ::Math_obj::floor(ey1);
HXDLIN(  82)						int ii_max87 = ::Math_obj::ceil(dy5);
HXDLIN(  82)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min87,ii_max87);
            					}
            				}
HXDLIN(  82)				 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN(  82)				if (hasUndo6) {
HXLINE(  82)					int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN(  82)					int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN(  82)					 ::Dynamic imageType6 = null();
HXDLIN(  82)					 ::pi_xy::ImageStruct this191 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  82)					if (::hx::IsNull( imageType6 )) {
HXLINE(  54)						imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  82)					::Dynamic undoImage19;
HXDLIN(  82)					switch((int)(( (int)(imageType6) ))){
            						case (int)0: {
HXLINE(  82)							 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::BytesImg b52 = byt6;
HXDLIN(  82)							{
HXLINE(  82)								b52->width = width6;
HXDLIN(  82)								b52->height = height6;
HXDLIN(  82)								b52->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  82)								b52->data = ::haxe::io::Bytes_obj::alloc((b52->length * 4));
HXDLIN(  82)								{
HXLINE(  82)									int len12 = b52->length;
HXDLIN(  82)									int w6 = 0;
HXDLIN(  82)									{
HXLINE(  82)										int _g120 = 0;
HXDLIN(  82)										int _g121 = b52->height;
HXDLIN(  82)										while((_g120 < _g121)){
HXLINE(  82)											_g120 = (_g120 + 1);
HXDLIN(  82)											int y20 = (_g120 - 1);
HXDLIN(  82)											{
HXLINE(  82)												int _g122 = 0;
HXDLIN(  82)												int _g123 = b52->width;
HXDLIN(  82)												while((_g122 < _g123)){
HXLINE(  82)													_g122 = (_g122 + 1);
HXDLIN(  82)													int x20 = (_g122 - 1);
HXDLIN(  82)													{
HXLINE(  82)														w6 = (w6 + 1);
HXDLIN(  82)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  82)													{
HXLINE(  82)														w6 = (w6 + 1);
HXDLIN(  82)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  82)													{
HXLINE(  82)														w6 = (w6 + 1);
HXDLIN(  82)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  82)													{
HXLINE(  82)														w6 = (w6 + 1);
HXDLIN(  82)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  82)							undoImage19 = b52;
            						}
            						break;
            						case (int)1: {
HXLINE(  82)							 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::ArrIntImg a51 = arrI6;
HXDLIN(  82)							{
HXLINE(  82)								a51->width = width6;
HXDLIN(  82)								a51->height = height6;
HXDLIN(  82)								a51->data = ::Array_obj< int >::__new(0);
HXDLIN(  82)								a51->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  82)								{
HXLINE(  82)									int _g124 = 0;
HXDLIN(  82)									int _g125 = a51->length;
HXDLIN(  82)									while((_g124 < _g125)){
HXLINE(  82)										_g124 = (_g124 + 1);
HXDLIN(  82)										int i52 = (_g124 - 1);
HXDLIN(  82)										a51->data[i52] = 0;
            									}
            								}
            							}
HXDLIN(  82)							undoImage19 = a51;
            						}
            						break;
            						case (int)2: {
HXLINE(  82)							 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::U32ArrImg b53 = u32a6;
HXDLIN(  82)							{
HXLINE(  82)								b53->width = width6;
HXDLIN(  82)								b53->height = height6;
HXDLIN(  82)								b53->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  82)								int size6 = (b53->length * 4);
HXDLIN(  82)								b53->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN(  82)								{
HXLINE(  82)									int _g126 = 0;
HXDLIN(  82)									int _g127 = b53->length;
HXDLIN(  82)									while((_g126 < _g127)){
HXLINE(  82)										_g126 = (_g126 + 1);
HXDLIN(  82)										int i53 = (_g126 - 1);
HXDLIN(  82)										{
HXLINE(  82)											 ::haxe::io::ArrayBufferViewImpl this192 = b53->data;
HXDLIN(  82)											bool undoImage20;
HXDLIN(  82)											if ((i53 >= 0)) {
HXLINE(  82)												undoImage20 = (i53 < (this192->byteLength >> 2));
            											}
            											else {
HXLINE(  82)												undoImage20 = false;
            											}
HXDLIN(  82)											if (undoImage20) {
HXLINE(  82)												 ::haxe::io::Bytes _this6 = this192->bytes;
HXDLIN(  82)												int pos6 = ((i53 << 2) + this192->byteOffset);
HXDLIN(  82)												_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN(  82)												_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN(  82)												_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN(  82)												_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  82)							undoImage19 = b53;
            						}
            						break;
            						case (int)3: {
HXLINE(  82)							 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::VecIntImg v13 = vec6;
HXDLIN(  82)							{
HXLINE(  82)								v13->width = width6;
HXDLIN(  82)								v13->height = height6;
HXDLIN(  82)								v13->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  82)								v13->data = ::Array_obj< int >::__new(v13->length);
HXDLIN(  82)								{
HXLINE(  82)									int _g128 = 0;
HXDLIN(  82)									int _g129 = v13->length;
HXDLIN(  82)									while((_g128 < _g129)){
HXLINE(  82)										_g128 = (_g128 + 1);
HXDLIN(  82)										int i54 = (_g128 - 1);
HXDLIN(  82)										v13->data->__unsafe_set(i54,0);
            									}
            								}
            							}
HXDLIN(  82)							undoImage19 = v13;
            						}
            						break;
            						case (int)4: {
HXLINE(  82)							 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::StackIntImg b54 = sInt6;
HXDLIN(  82)							{
HXLINE(  82)								b54->width = width6;
HXDLIN(  82)								b54->height = height6;
HXDLIN(  82)								b54->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN(  82)								b54->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  82)								{
HXLINE(  82)									int len13 = b54->length;
HXDLIN(  82)									 ::haxe::ds::GenericStack_Int d6 = b54->data;
HXDLIN(  82)									if (::hx::IsNull( d6->head )) {
HXLINE(  82)										int _g130 = 0;
HXDLIN(  82)										int _g131 = len13;
HXDLIN(  82)										while((_g130 < _g131)){
HXLINE(  82)											_g130 = (_g130 + 1);
HXDLIN(  82)											int i55 = (_g130 - 1);
HXDLIN(  82)											d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            										}
            									}
            									else {
HXLINE(  82)										int _g132 = 0;
HXDLIN(  82)										int _g133 = len13;
HXDLIN(  82)										while((_g132 < _g133)){
HXLINE(  82)											_g132 = (_g132 + 1);
HXDLIN(  82)											int i56 = (_g132 - 1);
HXDLIN(  82)											{
HXLINE(  82)												 ::haxe::ds::GenericCell_Int l6 = b54->data->head;
HXDLIN(  82)												 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN(  82)												{
HXLINE(  82)													int _g134 = 0;
HXDLIN(  82)													int _g135 = i56;
HXDLIN(  82)													while((_g134 < _g135)){
HXLINE(  82)														_g134 = (_g134 + 1);
HXDLIN(  82)														int i57 = (_g134 - 1);
HXLINE( 345)														prev6 = l6;
HXLINE( 346)														l6 = l6->next;
            													}
            												}
HXLINE(  82)												if (::hx::IsNull( prev6 )) {
HXLINE(  82)													b54->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  82)													l6 = null();
            												}
            												else {
HXLINE(  82)													prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN(  82)													l6 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  82)							undoImage19 = b54;
            						}
            						break;
            					}
HXDLIN(  82)					this191->image = undoImage19;
HXDLIN(  82)					this191->width = width6;
HXDLIN(  82)					this191->height = height6;
HXDLIN(  82)					this191->imageType = ( (int)(imageType6) );
HXDLIN(  82)					undoImage18 = this191;
HXDLIN(  82)					{
HXLINE(  82)						int rectLeft6 = xIter36->start;
HXDLIN(  82)						int rectTop6 = yIter36->start;
HXDLIN(  82)						int rectRight6 = xIter36->max;
HXDLIN(  82)						bool forceClear6 = false;
HXDLIN(  82)						{
HXLINE(  82)							int _g136 = rectTop6;
HXDLIN(  82)							int _g137 = yIter36->max;
HXDLIN(  82)							while((_g136 < _g137)){
HXLINE(  82)								_g136 = (_g136 + 1);
HXDLIN(  82)								int dy8 = (_g136 - 1);
HXDLIN(  82)								{
HXLINE(  82)									int _g138 = rectLeft6;
HXDLIN(  82)									int _g139 = rectRight6;
HXDLIN(  82)									while((_g138 < _g139)){
HXLINE(  82)										_g138 = (_g138 + 1);
HXDLIN(  82)										int dx8 = (_g138 - 1);
HXDLIN(  82)										::Dynamic this193 = pixelImage->image;
HXDLIN(  82)										int index26;
HXDLIN(  82)										if (pixelImage->useVirtualPos) {
HXLINE(  82)											index26 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx8) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  82)											index26 = ::Std_obj::_hx_int(( (Float)(((dy8 * pixelImage->width) + dx8)) ));
            										}
HXDLIN(  82)										int c28 = ::iterMagic::Iimg_obj::get(this193,index26);
HXDLIN(  82)										int col6;
HXDLIN(  82)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)											col6 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            										}
            										else {
HXLINE(  82)											col6 = c28;
            										}
HXDLIN(  82)										bool hitQuad49;
HXDLIN(  82)										if (pixelImage->useMask) {
HXLINE(  82)											hitQuad49 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  82)											hitQuad49 = false;
            										}
HXDLIN(  82)										if (hitQuad49) {
HXLINE(  82)											 ::pi_xy::ImageStruct this194 = pixelImage->mask;
HXDLIN(  82)											::Dynamic this195 = this194->image;
HXDLIN(  82)											int index27;
HXDLIN(  82)											if (this194->useVirtualPos) {
HXLINE(  82)												index27 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this194->virtualY) * ( (Float)(this194->width) )) + dx8) - this194->virtualX));
            											}
            											else {
HXLINE(  82)												index27 = ::Std_obj::_hx_int(( (Float)(((dy8 * this194->width) + dx8)) ));
            											}
HXDLIN(  82)											int c29 = ::iterMagic::Iimg_obj::get(this195,index27);
HXDLIN(  82)											int v14;
HXDLIN(  82)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)												v14 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            											}
            											else {
HXLINE(  82)												v14 = c29;
            											}
HXDLIN(  82)											int maskPixel6 = v14;
HXDLIN(  82)											int this196 = col6;
HXDLIN(  82)											if ((maskPixel6 == 0)) {
HXLINE(  82)												col6 = this196;
            											}
            											else {
HXLINE(  82)												Float m06;
HXDLIN(  82)												int this197 = ((maskPixel6 >> 24) & 255);
HXDLIN(  82)												if ((this197 == 0)) {
HXLINE(  82)													m06 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													m06 = (( (Float)(this197) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float m16;
HXDLIN(  82)												int this198 = ((maskPixel6 >> 16) & 255);
HXDLIN(  82)												if ((this198 == 0)) {
HXLINE(  82)													m16 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													m16 = (( (Float)(this198) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float m26;
HXDLIN(  82)												int this199 = ((maskPixel6 >> 8) & 255);
HXDLIN(  82)												if ((this199 == 0)) {
HXLINE(  82)													m26 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													m26 = (( (Float)(this199) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float m36;
HXDLIN(  82)												int this200 = (maskPixel6 & 255);
HXDLIN(  82)												if ((this200 == 0)) {
HXLINE(  82)													m36 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													m36 = (( (Float)(this200) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this196 >> 24) & 255)) )));
HXDLIN(  82)												int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this196 >> 16) & 255)) )));
HXDLIN(  82)												int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this196 >> 8) & 255)) )));
HXDLIN(  82)												int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this196 & 255)) )));
HXDLIN(  82)												col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  82)										if ((col6 != 0)) {
HXLINE(  82)											int x21 = (dx8 - rectLeft6);
HXDLIN(  82)											int y21 = (dy8 - rectTop6);
HXDLIN(  82)											int c30 = col6;
HXDLIN(  82)											bool hitQuad50;
HXDLIN(  82)											if ((((c30 >> 24) & 255) < 254)) {
HXLINE(  82)												hitQuad50 = undoImage18->transparent;
            											}
            											else {
HXLINE(  82)												hitQuad50 = false;
            											}
HXDLIN(  82)											if (hitQuad50) {
HXLINE(  82)												int location12;
HXDLIN(  82)												if (undoImage18->useVirtualPos) {
HXLINE(  82)													location12 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x21) - undoImage18->virtualX));
            												}
            												else {
HXLINE(  82)													location12 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage18->width) + x21)) ));
            												}
HXDLIN(  82)												int this201 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN(  82)												int this202;
HXDLIN(  82)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)													this202 = ((((((this201 >> 24) & 255) << 24) | ((this201 & 255) << 16)) | (((this201 >> 8) & 255) << 8)) | ((this201 >> 16) & 255));
            												}
            												else {
HXLINE(  82)													this202 = this201;
            												}
HXDLIN(  82)												Float a117;
HXDLIN(  82)												int this203 = ((this202 >> 24) & 255);
HXDLIN(  82)												if ((this203 == 0)) {
HXLINE(  82)													a117 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													a117 = (( (Float)(this203) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float r114;
HXDLIN(  82)												int this204 = ((this202 >> 16) & 255);
HXDLIN(  82)												if ((this204 == 0)) {
HXLINE(  82)													r114 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													r114 = (( (Float)(this204) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float g114;
HXDLIN(  82)												int this205 = ((this202 >> 8) & 255);
HXDLIN(  82)												if ((this205 == 0)) {
HXLINE(  82)													g114 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													g114 = (( (Float)(this205) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float b118;
HXDLIN(  82)												int this206 = (this202 & 255);
HXDLIN(  82)												if ((this206 == 0)) {
HXLINE(  82)													b118 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													b118 = (( (Float)(this206) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float a215;
HXDLIN(  82)												int this207 = ((col6 >> 24) & 255);
HXDLIN(  82)												if ((this207 == 0)) {
HXLINE(  82)													a215 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													a215 = (( (Float)(this207) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float r212;
HXDLIN(  82)												int this208 = ((col6 >> 16) & 255);
HXDLIN(  82)												if ((this208 == 0)) {
HXLINE(  82)													r212 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													r212 = (( (Float)(this208) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float g212;
HXDLIN(  82)												int this209 = ((col6 >> 8) & 255);
HXDLIN(  82)												if ((this209 == 0)) {
HXLINE(  82)													g212 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													g212 = (( (Float)(this209) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float b216;
HXDLIN(  82)												int this210 = (col6 & 255);
HXDLIN(  82)												if ((this210 == 0)) {
HXLINE(  82)													b216 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													b216 = (( (Float)(this210) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN(  82)												int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a314) + (r212 * a215))));
HXDLIN(  82)												int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a314) + (g212 * a215))));
HXDLIN(  82)												int b55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b216 * a215))));
HXDLIN(  82)												int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN(  82)												int blended12 = ((((a52 << 24) | (r34 << 16)) | (g34 << 8)) | b55);
HXDLIN(  82)												{
HXLINE(  82)													int hitQuad51;
HXDLIN(  82)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)														hitQuad51 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            													}
            													else {
HXLINE(  82)														hitQuad51 = blended12;
            													}
HXDLIN(  82)													::iterMagic::Iimg_obj::set(undoImage18->image,location12,hitQuad51);
            												}
            											}
            											else {
HXLINE(  82)												::Dynamic this211 = undoImage18->image;
HXDLIN(  82)												int index28;
HXDLIN(  82)												if (undoImage18->useVirtualPos) {
HXLINE(  82)													index28 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x21) - undoImage18->virtualX));
            												}
            												else {
HXLINE(  82)													index28 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage18->width) + x21)) ));
            												}
HXDLIN(  82)												int hitQuad52;
HXDLIN(  82)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)													hitQuad52 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            												}
            												else {
HXLINE(  82)													hitQuad52 = c30;
            												}
HXDLIN(  82)												::iterMagic::Iimg_obj::set(this211,index28,hitQuad52);
            											}
            										}
            										else {
HXLINE(  82)											if (forceClear6) {
HXLINE(  82)												::Dynamic this212 = undoImage18->image;
HXDLIN(  82)												int x22 = (dx8 - rectLeft6);
HXDLIN(  82)												int y22 = (dy8 - rectTop6);
HXDLIN(  82)												int index29;
HXDLIN(  82)												if (undoImage18->useVirtualPos) {
HXLINE(  82)													index29 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x22) - undoImage18->virtualX));
            												}
            												else {
HXLINE(  82)													index29 = ::Std_obj::_hx_int(( (Float)(((y22 * undoImage18->width) + x22)) ));
            												}
HXDLIN(  82)												::iterMagic::Iimg_obj::set(this212,index29,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  82)				bool found6 = false;
HXDLIN(  82)				{
HXLINE(  82)					int _g_min12 = xIter36->start;
HXDLIN(  82)					int _g_max12 = xIter36->max;
HXDLIN(  82)					while((_g_min12 < _g_max12)){
HXLINE(  82)						_g_min12 = (_g_min12 + 1);
HXDLIN(  82)						int px5 = (_g_min12 - 1);
HXDLIN(  82)						Float pcx4 = (( (Float)(px5) ) - dx5);
HXLINE( 619)						found6 = false;
HXLINE(  82)						{
HXLINE(  82)							int _g_min13 = yIter36->start;
HXDLIN(  82)							int _g_max13 = yIter36->max;
HXDLIN(  82)							while((_g_min13 < _g_max13)){
HXLINE(  82)								_g_min13 = (_g_min13 + 1);
HXDLIN(  82)								int py5 = (_g_min13 - 1);
HXDLIN(  82)								Float pcy4 = (( (Float)(py5) ) - dy5);
HXDLIN(  82)								Float dot314 = ((pcx4 * bcx4) + (pcy4 * bcy4));
HXDLIN(  82)								Float dot324 = ((pcx4 * acx4) + (pcy4 * acy4));
HXDLIN(  82)								Float ratioA4 = (((dot224 * dot314) - (dot124 * dot324)) * denom14);
HXDLIN(  82)								Float ratioB4 = (((dot114 * dot324) - (dot124 * dot314)) * denom14);
HXDLIN(  82)								Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN(  82)								bool hitQuad53;
HXDLIN(  82)								bool hitQuad54;
HXDLIN(  82)								if ((ratioA4 >= 0)) {
HXLINE(  82)									hitQuad54 = (ratioB4 >= 0);
            								}
            								else {
HXLINE(  82)									hitQuad54 = false;
            								}
HXDLIN(  82)								if (hitQuad54) {
HXLINE(  82)									hitQuad53 = (ratioC4 >= 0);
            								}
            								else {
HXLINE(  82)									hitQuad53 = false;
            								}
HXDLIN(  82)								if (hitQuad53) {
HXLINE(  82)									int i58 = ::Std_obj::_hx_int((( (Float)(aA4) ) * (soft * ratioB4)));
HXDLIN(  82)									if ((i58 > 255)) {
HXLINE(  24)										i58 = 255;
            									}
HXLINE(  82)									if ((i58 < 0)) {
HXLINE(  25)										i58 = 0;
            									}
HXLINE(  82)									int a53 = i58;
HXDLIN(  82)									int i59 = ::Std_obj::_hx_int(( (Float)(rA4) ));
HXDLIN(  82)									if ((i59 > 255)) {
HXLINE(  24)										i59 = 255;
            									}
HXLINE(  82)									if ((i59 < 0)) {
HXLINE(  25)										i59 = 0;
            									}
HXLINE(  82)									int r35 = i59;
HXDLIN(  82)									int i60 = ::Std_obj::_hx_int(( (Float)(gA4) ));
HXDLIN(  82)									if ((i60 > 255)) {
HXLINE(  24)										i60 = 255;
            									}
HXLINE(  82)									if ((i60 < 0)) {
HXLINE(  25)										i60 = 0;
            									}
HXLINE(  82)									int g35 = i60;
HXDLIN(  82)									int i61 = ::Std_obj::_hx_int(( (Float)(bA4) ));
HXDLIN(  82)									if ((i61 > 255)) {
HXLINE(  24)										i61 = 255;
            									}
HXLINE(  82)									if ((i61 < 0)) {
HXLINE(  25)										i61 = 0;
            									}
HXLINE(  82)									int b56 = i61;
HXDLIN(  82)									{
HXLINE(  82)										int location13;
HXDLIN(  82)										if (pixelImage->useVirtualPos) {
HXLINE(  82)											location13 = ::Std_obj::_hx_int(((((( (Float)(py5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px5) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  82)											location13 = ::Std_obj::_hx_int(( (Float)(((py5 * pixelImage->width) + px5)) ));
            										}
HXDLIN(  82)										bool hitQuad55;
HXDLIN(  82)										if (pixelImage->transparent) {
HXLINE(  82)											hitQuad55 = (a53 < 254);
            										}
            										else {
HXLINE(  82)											hitQuad55 = false;
            										}
HXDLIN(  82)										if (hitQuad55) {
HXLINE(  82)											int this213 = ::iterMagic::Iimg_obj::get(pixelImage->image,location13);
HXDLIN(  82)											int old4;
HXDLIN(  82)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)												old4 = ((((((this213 >> 24) & 255) << 24) | ((this213 & 255) << 16)) | (((this213 >> 8) & 255) << 8)) | ((this213 >> 16) & 255));
            											}
            											else {
HXLINE(  82)												old4 = this213;
            											}
HXDLIN(  82)											int rhs4 = ((((a53 << 24) | (r35 << 16)) | (g35 << 8)) | b56);
HXDLIN(  82)											Float a118;
HXDLIN(  82)											int this214 = ((old4 >> 24) & 255);
HXDLIN(  82)											if ((this214 == 0)) {
HXLINE(  82)												a118 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												a118 = (( (Float)(this214) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float r115;
HXDLIN(  82)											int this215 = ((old4 >> 16) & 255);
HXDLIN(  82)											if ((this215 == 0)) {
HXLINE(  82)												r115 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												r115 = (( (Float)(this215) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float g115;
HXDLIN(  82)											int this216 = ((old4 >> 8) & 255);
HXDLIN(  82)											if ((this216 == 0)) {
HXLINE(  82)												g115 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												g115 = (( (Float)(this216) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float b119;
HXDLIN(  82)											int this217 = (old4 & 255);
HXDLIN(  82)											if ((this217 == 0)) {
HXLINE(  82)												b119 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												b119 = (( (Float)(this217) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float a216;
HXDLIN(  82)											int this218 = ((rhs4 >> 24) & 255);
HXDLIN(  82)											if ((this218 == 0)) {
HXLINE(  82)												a216 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												a216 = (( (Float)(this218) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float r213;
HXDLIN(  82)											int this219 = ((rhs4 >> 16) & 255);
HXDLIN(  82)											if ((this219 == 0)) {
HXLINE(  82)												r213 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												r213 = (( (Float)(this219) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float g213;
HXDLIN(  82)											int this220 = ((rhs4 >> 8) & 255);
HXDLIN(  82)											if ((this220 == 0)) {
HXLINE(  82)												g213 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												g213 = (( (Float)(this220) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float b217;
HXDLIN(  82)											int this221 = (rhs4 & 255);
HXDLIN(  82)											if ((this221 == 0)) {
HXLINE(  82)												b217 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												b217 = (( (Float)(this221) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN(  82)											int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a315) + (r213 * a216))));
HXDLIN(  82)											int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a315) + (g213 * a216))));
HXDLIN(  82)											int b57 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b217 * a216))));
HXDLIN(  82)											int a54 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN(  82)											int blended13 = ((((a54 << 24) | (r36 << 16)) | (g36 << 8)) | b57);
HXDLIN(  82)											{
HXLINE(  82)												int hitQuad56;
HXDLIN(  82)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)													hitQuad56 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            												}
            												else {
HXLINE(  82)													hitQuad56 = blended13;
            												}
HXDLIN(  82)												::iterMagic::Iimg_obj::set(pixelImage->image,location13,hitQuad56);
            											}
            										}
            										else {
HXLINE(  82)											int value4;
HXDLIN(  82)											if (pixelImage->isLittle) {
HXLINE(  82)												value4 = ((((a53 << 24) | (b56 << 16)) | (g35 << 8)) | r35);
            											}
            											else {
HXLINE(  82)												value4 = ((((a53 << 24) | (r35 << 16)) | (g35 << 8)) | b56);
            											}
HXDLIN(  82)											::iterMagic::Iimg_obj::set(pixelImage->image,location13,value4);
            										}
            									}
HXLINE( 633)									found6 = true;
            								}
            								else {
HXLINE(  82)									if (found6) {
HXLINE(  82)										goto _hx_goto_168;
            									}
            								}
            							}
            							_hx_goto_168:;
            						}
            					}
            				}
HXDLIN(  82)				 ::pi_xy::iter::IntIterStart v_yIter34;
HXDLIN(  82)				 ::pi_xy::iter::IntIterStart v_xIter34;
HXDLIN(  82)				int v_undoY4;
HXDLIN(  82)				int v_undoX4;
HXDLIN(  82)				Float v_ty4;
HXDLIN(  82)				Float v_tx4;
HXDLIN(  82)				Float v_t04;
HXDLIN(  82)				Float v_sy4;
HXDLIN(  82)				Float v_sx4;
HXDLIN(  82)				Float v_s04;
HXDLIN(  82)				Float v_A4;
HXDLIN(  82)				Float ax6 = ex1;
HXDLIN(  82)				Float ay6 = ey1;
HXDLIN(  82)				 ::pi_xy::ImageStruct v_undoImage4 = null();
HXDLIN(  82)				Float bx8 = cx5;
HXDLIN(  82)				Float by8 = cy5;
HXDLIN(  82)				Float cx8 = dx5;
HXDLIN(  82)				Float cy8 = dy5;
HXDLIN(  82)				bool adjustWinding6 = (((((ax6 * by8) - (bx8 * ay6)) + ((bx8 * cy8) - (cx8 * by8))) + ((cx8 * ay6) - (ax6 * cy8))) > 0);
HXDLIN(  82)				if (!(adjustWinding6)) {
HXLINE(  82)					Float bx_6 = bx8;
HXDLIN(  82)					Float by_6 = by8;
HXLINE(  24)					bx8 = cx8;
HXLINE(  25)					by8 = cy8;
HXLINE(  26)					cx8 = bx_6;
HXLINE(  27)					cy8 = by_6;
            				}
HXLINE(  82)				Float v_ax4 = ax6;
HXDLIN(  82)				Float v_ay4 = ay6;
HXDLIN(  82)				Float v_bx4 = bx8;
HXDLIN(  82)				Float v_by4 = by8;
HXDLIN(  82)				Float v_cx4 = cx8;
HXDLIN(  82)				Float v_cy4 = cy8;
HXDLIN(  82)				bool v_preCalculated4 = true;
HXDLIN(  82)				{
HXLINE(  82)					v_s04 = ((v_ay4 * v_cx4) - (v_ax4 * v_cy4));
HXDLIN(  82)					v_sx4 = (v_cy4 - v_ay4);
HXDLIN(  82)					v_sy4 = (v_ax4 - v_cx4);
HXDLIN(  82)					v_t04 = ((v_ax4 * v_by4) - (v_ay4 * v_bx4));
HXDLIN(  82)					v_tx4 = (v_ay4 - v_by4);
HXDLIN(  82)					v_ty4 = (v_bx4 - v_ax4);
HXDLIN(  82)					v_A4 = ((((-(v_by4) * v_cx4) + (v_ay4 * (-(v_bx4) + v_cx4))) + (v_ax4 * (v_by4 - v_cy4))) + (v_bx4 * v_cy4));
HXDLIN(  82)					Float a55 = v_ax4;
HXDLIN(  82)					Float b58 = v_bx4;
HXDLIN(  82)					Float c31 = v_cx4;
HXDLIN(  82)					if ((a55 > b58)) {
HXLINE(  82)						if ((a55 > c31)) {
HXLINE(  82)							int min44;
HXDLIN(  82)							if ((b58 > c31)) {
HXLINE(  82)								min44 = ::Math_obj::floor(c31);
            							}
            							else {
HXLINE(  82)								min44 = ::Math_obj::floor(b58);
            							}
HXDLIN(  82)							int ii_min88 = min44;
HXDLIN(  82)							int ii_max88 = ::Math_obj::ceil(a55);
HXDLIN(  82)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min88,ii_max88);
            						}
            						else {
HXLINE(  82)							int ii_min89 = ::Math_obj::floor(b58);
HXDLIN(  82)							int ii_max89 = ::Math_obj::ceil(c31);
HXDLIN(  82)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min89,ii_max89);
            						}
            					}
            					else {
HXLINE(  82)						if ((b58 > c31)) {
HXLINE(  82)							int min45;
HXDLIN(  82)							if ((a55 > c31)) {
HXLINE(  82)								min45 = ::Math_obj::floor(c31);
            							}
            							else {
HXLINE(  82)								min45 = ::Math_obj::ceil(a55);
            							}
HXDLIN(  82)							int ii_min90 = min45;
HXDLIN(  82)							int ii_max90 = ::Math_obj::ceil(b58);
HXDLIN(  82)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min90,ii_max90);
            						}
            						else {
HXLINE(  82)							int ii_min91 = ::Math_obj::floor(a55);
HXDLIN(  82)							int ii_max91 = ::Math_obj::ceil(c31);
HXDLIN(  82)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min91,ii_max91);
            						}
            					}
HXDLIN(  82)					Float a56 = v_ay4;
HXDLIN(  82)					Float b59 = v_by4;
HXDLIN(  82)					Float c32 = v_cy4;
HXDLIN(  82)					if ((a56 > b59)) {
HXLINE(  82)						if ((a56 > c32)) {
HXLINE(  82)							int min46;
HXDLIN(  82)							if ((b59 > c32)) {
HXLINE(  82)								min46 = ::Math_obj::floor(c32);
            							}
            							else {
HXLINE(  82)								min46 = ::Math_obj::floor(b59);
            							}
HXDLIN(  82)							int ii_min92 = min46;
HXDLIN(  82)							int ii_max92 = ::Math_obj::ceil(a56);
HXDLIN(  82)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min92,ii_max92);
            						}
            						else {
HXLINE(  82)							int ii_min93 = ::Math_obj::floor(b59);
HXDLIN(  82)							int ii_max93 = ::Math_obj::ceil(c32);
HXDLIN(  82)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min93,ii_max93);
            						}
            					}
            					else {
HXLINE(  82)						if ((b59 > c32)) {
HXLINE(  82)							int min47;
HXDLIN(  82)							if ((a56 > c32)) {
HXLINE(  82)								min47 = ::Math_obj::floor(c32);
            							}
            							else {
HXLINE(  82)								min47 = ::Math_obj::ceil(a56);
            							}
HXDLIN(  82)							int ii_min94 = min47;
HXDLIN(  82)							int ii_max94 = ::Math_obj::ceil(b59);
HXDLIN(  82)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min94,ii_max94);
            						}
            						else {
HXLINE(  82)							int ii_min95 = ::Math_obj::floor(a56);
HXDLIN(  82)							int ii_max95 = ::Math_obj::ceil(c32);
HXDLIN(  82)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min95,ii_max95);
            						}
            					}
            				}
HXDLIN(  82)				if (hasUndo6) {
HXLINE(  82)					v_undoImage4 = undoImage18;
HXDLIN(  82)					v_undoX4 = xIter36->start;
HXDLIN(  82)					v_undoY4 = yIter36->start;
            				}
HXDLIN(  82)				bool hasUndo7 = false;
HXDLIN(  82)				int aA5 = ((color >> 24) & 255);
HXDLIN(  82)				int rA5 = ((color >> 16) & 255);
HXDLIN(  82)				int gA5 = ((color >> 8) & 255);
HXDLIN(  82)				int bA5 = (color & 255);
HXDLIN(  82)				Float bcx5 = (dx5 - ax4);
HXDLIN(  82)				Float bcy5 = (dy5 - ay4);
HXDLIN(  82)				Float acx5 = (ex1 - ax4);
HXDLIN(  82)				Float acy5 = (ey1 - ay4);
HXDLIN(  82)				Float dot115 = ((bcx5 * bcx5) + (bcy5 * bcy5));
HXDLIN(  82)				Float dot125 = ((bcx5 * acx5) + (bcy5 * acy5));
HXDLIN(  82)				Float dot225 = ((acx5 * acx5) + (acy5 * acy5));
HXDLIN(  82)				Float denom15 = (( (Float)(1) ) / ((dot115 * dot225) - (dot125 * dot125)));
HXDLIN(  82)				 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN(  82)				if ((ex1 > dx5)) {
HXLINE(  82)					if ((ex1 > ax4)) {
HXLINE(  82)						int min48;
HXDLIN(  82)						if ((dx5 > ax4)) {
HXLINE(  82)							min48 = ::Math_obj::floor(ax4);
            						}
            						else {
HXLINE(  82)							min48 = ::Math_obj::floor(dx5);
            						}
HXDLIN(  82)						int ii_min96 = min48;
HXDLIN(  82)						int ii_max96 = ::Math_obj::ceil(ex1);
HXDLIN(  82)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min96,ii_max96);
            					}
            					else {
HXLINE(  82)						int ii_min97 = ::Math_obj::floor(dx5);
HXDLIN(  82)						int ii_max97 = ::Math_obj::ceil(ax4);
HXDLIN(  82)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min97,ii_max97);
            					}
            				}
            				else {
HXLINE(  82)					if ((dx5 > ax4)) {
HXLINE(  82)						int min49;
HXDLIN(  82)						if ((ex1 > ax4)) {
HXLINE(  82)							min49 = ::Math_obj::floor(ax4);
            						}
            						else {
HXLINE(  82)							min49 = ::Math_obj::ceil(ex1);
            						}
HXDLIN(  82)						int ii_min98 = min49;
HXDLIN(  82)						int ii_max98 = ::Math_obj::ceil(dx5);
HXDLIN(  82)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min98,ii_max98);
            					}
            					else {
HXLINE(  82)						int ii_min99 = ::Math_obj::floor(ex1);
HXDLIN(  82)						int ii_max99 = ::Math_obj::ceil(ax4);
HXDLIN(  82)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min99,ii_max99);
            					}
            				}
HXDLIN(  82)				 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN(  82)				if ((ey1 > dy5)) {
HXLINE(  82)					if ((ey1 > ay4)) {
HXLINE(  82)						int min50;
HXDLIN(  82)						if ((dy5 > ay4)) {
HXLINE(  82)							min50 = ::Math_obj::floor(ay4);
            						}
            						else {
HXLINE(  82)							min50 = ::Math_obj::floor(dy5);
            						}
HXDLIN(  82)						int ii_min100 = min50;
HXDLIN(  82)						int ii_max100 = ::Math_obj::ceil(ey1);
HXDLIN(  82)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min100,ii_max100);
            					}
            					else {
HXLINE(  82)						int ii_min101 = ::Math_obj::floor(dy5);
HXDLIN(  82)						int ii_max101 = ::Math_obj::ceil(ay4);
HXDLIN(  82)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min101,ii_max101);
            					}
            				}
            				else {
HXLINE(  82)					if ((dy5 > ay4)) {
HXLINE(  82)						int min51;
HXDLIN(  82)						if ((ey1 > ay4)) {
HXLINE(  82)							min51 = ::Math_obj::floor(ay4);
            						}
            						else {
HXLINE(  82)							min51 = ::Math_obj::ceil(ey1);
            						}
HXDLIN(  82)						int ii_min102 = min51;
HXDLIN(  82)						int ii_max102 = ::Math_obj::ceil(dy5);
HXDLIN(  82)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min102,ii_max102);
            					}
            					else {
HXLINE(  82)						int ii_min103 = ::Math_obj::floor(ey1);
HXDLIN(  82)						int ii_max103 = ::Math_obj::ceil(ay4);
HXDLIN(  82)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min103,ii_max103);
            					}
            				}
HXDLIN(  82)				 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN(  82)				if (hasUndo7) {
HXLINE(  82)					int width7 = ((xIter37->max - xIter37->start) + 1);
HXDLIN(  82)					int height7 = ((yIter37->max - yIter37->start) + 1);
HXDLIN(  82)					 ::Dynamic imageType7 = null();
HXDLIN(  82)					 ::pi_xy::ImageStruct this222 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  82)					if (::hx::IsNull( imageType7 )) {
HXLINE(  54)						imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  82)					::Dynamic undoImage22;
HXDLIN(  82)					switch((int)(( (int)(imageType7) ))){
            						case (int)0: {
HXLINE(  82)							 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::BytesImg b60 = byt7;
HXDLIN(  82)							{
HXLINE(  82)								b60->width = width7;
HXDLIN(  82)								b60->height = height7;
HXDLIN(  82)								b60->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  82)								b60->data = ::haxe::io::Bytes_obj::alloc((b60->length * 4));
HXDLIN(  82)								{
HXLINE(  82)									int len14 = b60->length;
HXDLIN(  82)									int w7 = 0;
HXDLIN(  82)									{
HXLINE(  82)										int _g140 = 0;
HXDLIN(  82)										int _g141 = b60->height;
HXDLIN(  82)										while((_g140 < _g141)){
HXLINE(  82)											_g140 = (_g140 + 1);
HXDLIN(  82)											int y23 = (_g140 - 1);
HXDLIN(  82)											{
HXLINE(  82)												int _g142 = 0;
HXDLIN(  82)												int _g143 = b60->width;
HXDLIN(  82)												while((_g142 < _g143)){
HXLINE(  82)													_g142 = (_g142 + 1);
HXDLIN(  82)													int x23 = (_g142 - 1);
HXDLIN(  82)													{
HXLINE(  82)														w7 = (w7 + 1);
HXDLIN(  82)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  82)													{
HXLINE(  82)														w7 = (w7 + 1);
HXDLIN(  82)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  82)													{
HXLINE(  82)														w7 = (w7 + 1);
HXDLIN(  82)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  82)													{
HXLINE(  82)														w7 = (w7 + 1);
HXDLIN(  82)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  82)							undoImage22 = b60;
            						}
            						break;
            						case (int)1: {
HXLINE(  82)							 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::ArrIntImg a57 = arrI7;
HXDLIN(  82)							{
HXLINE(  82)								a57->width = width7;
HXDLIN(  82)								a57->height = height7;
HXDLIN(  82)								a57->data = ::Array_obj< int >::__new(0);
HXDLIN(  82)								a57->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  82)								{
HXLINE(  82)									int _g144 = 0;
HXDLIN(  82)									int _g145 = a57->length;
HXDLIN(  82)									while((_g144 < _g145)){
HXLINE(  82)										_g144 = (_g144 + 1);
HXDLIN(  82)										int i62 = (_g144 - 1);
HXDLIN(  82)										a57->data[i62] = 0;
            									}
            								}
            							}
HXDLIN(  82)							undoImage22 = a57;
            						}
            						break;
            						case (int)2: {
HXLINE(  82)							 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::U32ArrImg b61 = u32a7;
HXDLIN(  82)							{
HXLINE(  82)								b61->width = width7;
HXDLIN(  82)								b61->height = height7;
HXDLIN(  82)								b61->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  82)								int size7 = (b61->length * 4);
HXDLIN(  82)								b61->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN(  82)								{
HXLINE(  82)									int _g146 = 0;
HXDLIN(  82)									int _g147 = b61->length;
HXDLIN(  82)									while((_g146 < _g147)){
HXLINE(  82)										_g146 = (_g146 + 1);
HXDLIN(  82)										int i63 = (_g146 - 1);
HXDLIN(  82)										{
HXLINE(  82)											 ::haxe::io::ArrayBufferViewImpl this223 = b61->data;
HXDLIN(  82)											bool undoImage23;
HXDLIN(  82)											if ((i63 >= 0)) {
HXLINE(  82)												undoImage23 = (i63 < (this223->byteLength >> 2));
            											}
            											else {
HXLINE(  82)												undoImage23 = false;
            											}
HXDLIN(  82)											if (undoImage23) {
HXLINE(  82)												 ::haxe::io::Bytes _this7 = this223->bytes;
HXDLIN(  82)												int pos7 = ((i63 << 2) + this223->byteOffset);
HXDLIN(  82)												_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN(  82)												_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN(  82)												_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN(  82)												_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  82)							undoImage22 = b61;
            						}
            						break;
            						case (int)3: {
HXLINE(  82)							 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::VecIntImg v15 = vec7;
HXDLIN(  82)							{
HXLINE(  82)								v15->width = width7;
HXDLIN(  82)								v15->height = height7;
HXDLIN(  82)								v15->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  82)								v15->data = ::Array_obj< int >::__new(v15->length);
HXDLIN(  82)								{
HXLINE(  82)									int _g148 = 0;
HXDLIN(  82)									int _g149 = v15->length;
HXDLIN(  82)									while((_g148 < _g149)){
HXLINE(  82)										_g148 = (_g148 + 1);
HXDLIN(  82)										int i64 = (_g148 - 1);
HXDLIN(  82)										v15->data->__unsafe_set(i64,0);
            									}
            								}
            							}
HXDLIN(  82)							undoImage22 = v15;
            						}
            						break;
            						case (int)4: {
HXLINE(  82)							 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  82)							 ::iterMagic::StackIntImg b62 = sInt7;
HXDLIN(  82)							{
HXLINE(  82)								b62->width = width7;
HXDLIN(  82)								b62->height = height7;
HXDLIN(  82)								b62->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN(  82)								b62->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  82)								{
HXLINE(  82)									int len15 = b62->length;
HXDLIN(  82)									 ::haxe::ds::GenericStack_Int d7 = b62->data;
HXDLIN(  82)									if (::hx::IsNull( d7->head )) {
HXLINE(  82)										int _g150 = 0;
HXDLIN(  82)										int _g151 = len15;
HXDLIN(  82)										while((_g150 < _g151)){
HXLINE(  82)											_g150 = (_g150 + 1);
HXDLIN(  82)											int i65 = (_g150 - 1);
HXDLIN(  82)											d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            										}
            									}
            									else {
HXLINE(  82)										int _g152 = 0;
HXDLIN(  82)										int _g153 = len15;
HXDLIN(  82)										while((_g152 < _g153)){
HXLINE(  82)											_g152 = (_g152 + 1);
HXDLIN(  82)											int i66 = (_g152 - 1);
HXDLIN(  82)											{
HXLINE(  82)												 ::haxe::ds::GenericCell_Int l7 = b62->data->head;
HXDLIN(  82)												 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN(  82)												{
HXLINE(  82)													int _g154 = 0;
HXDLIN(  82)													int _g155 = i66;
HXDLIN(  82)													while((_g154 < _g155)){
HXLINE(  82)														_g154 = (_g154 + 1);
HXDLIN(  82)														int i67 = (_g154 - 1);
HXLINE( 345)														prev7 = l7;
HXLINE( 346)														l7 = l7->next;
            													}
            												}
HXLINE(  82)												if (::hx::IsNull( prev7 )) {
HXLINE(  82)													b62->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  82)													l7 = null();
            												}
            												else {
HXLINE(  82)													prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN(  82)													l7 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  82)							undoImage22 = b62;
            						}
            						break;
            					}
HXDLIN(  82)					this222->image = undoImage22;
HXDLIN(  82)					this222->width = width7;
HXDLIN(  82)					this222->height = height7;
HXDLIN(  82)					this222->imageType = ( (int)(imageType7) );
HXDLIN(  82)					undoImage21 = this222;
HXDLIN(  82)					{
HXLINE(  82)						int rectLeft7 = xIter37->start;
HXDLIN(  82)						int rectTop7 = yIter37->start;
HXDLIN(  82)						int rectRight7 = xIter37->max;
HXDLIN(  82)						bool forceClear7 = false;
HXDLIN(  82)						{
HXLINE(  82)							int _g156 = rectTop7;
HXDLIN(  82)							int _g157 = yIter37->max;
HXDLIN(  82)							while((_g156 < _g157)){
HXLINE(  82)								_g156 = (_g156 + 1);
HXDLIN(  82)								int dy9 = (_g156 - 1);
HXDLIN(  82)								{
HXLINE(  82)									int _g158 = rectLeft7;
HXDLIN(  82)									int _g159 = rectRight7;
HXDLIN(  82)									while((_g158 < _g159)){
HXLINE(  82)										_g158 = (_g158 + 1);
HXDLIN(  82)										int dx9 = (_g158 - 1);
HXDLIN(  82)										::Dynamic this224 = pixelImage->image;
HXDLIN(  82)										int index30;
HXDLIN(  82)										if (pixelImage->useVirtualPos) {
HXLINE(  82)											index30 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx9) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  82)											index30 = ::Std_obj::_hx_int(( (Float)(((dy9 * pixelImage->width) + dx9)) ));
            										}
HXDLIN(  82)										int c33 = ::iterMagic::Iimg_obj::get(this224,index30);
HXDLIN(  82)										int col7;
HXDLIN(  82)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)											col7 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            										}
            										else {
HXLINE(  82)											col7 = c33;
            										}
HXDLIN(  82)										bool hitQuad57;
HXDLIN(  82)										if (pixelImage->useMask) {
HXLINE(  82)											hitQuad57 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  82)											hitQuad57 = false;
            										}
HXDLIN(  82)										if (hitQuad57) {
HXLINE(  82)											 ::pi_xy::ImageStruct this225 = pixelImage->mask;
HXDLIN(  82)											::Dynamic this226 = this225->image;
HXDLIN(  82)											int index31;
HXDLIN(  82)											if (this225->useVirtualPos) {
HXLINE(  82)												index31 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this225->virtualY) * ( (Float)(this225->width) )) + dx9) - this225->virtualX));
            											}
            											else {
HXLINE(  82)												index31 = ::Std_obj::_hx_int(( (Float)(((dy9 * this225->width) + dx9)) ));
            											}
HXDLIN(  82)											int c34 = ::iterMagic::Iimg_obj::get(this226,index31);
HXDLIN(  82)											int v16;
HXDLIN(  82)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)												v16 = ((((((c34 >> 24) & 255) << 24) | ((c34 & 255) << 16)) | (((c34 >> 8) & 255) << 8)) | ((c34 >> 16) & 255));
            											}
            											else {
HXLINE(  82)												v16 = c34;
            											}
HXDLIN(  82)											int maskPixel7 = v16;
HXDLIN(  82)											int this227 = col7;
HXDLIN(  82)											if ((maskPixel7 == 0)) {
HXLINE(  82)												col7 = this227;
            											}
            											else {
HXLINE(  82)												Float m07;
HXDLIN(  82)												int this228 = ((maskPixel7 >> 24) & 255);
HXDLIN(  82)												if ((this228 == 0)) {
HXLINE(  82)													m07 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													m07 = (( (Float)(this228) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float m17;
HXDLIN(  82)												int this229 = ((maskPixel7 >> 16) & 255);
HXDLIN(  82)												if ((this229 == 0)) {
HXLINE(  82)													m17 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													m17 = (( (Float)(this229) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float m27;
HXDLIN(  82)												int this230 = ((maskPixel7 >> 8) & 255);
HXDLIN(  82)												if ((this230 == 0)) {
HXLINE(  82)													m27 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													m27 = (( (Float)(this230) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float m37;
HXDLIN(  82)												int this231 = (maskPixel7 & 255);
HXDLIN(  82)												if ((this231 == 0)) {
HXLINE(  82)													m37 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													m37 = (( (Float)(this231) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this227 >> 24) & 255)) )));
HXDLIN(  82)												int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this227 >> 16) & 255)) )));
HXDLIN(  82)												int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this227 >> 8) & 255)) )));
HXDLIN(  82)												int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this227 & 255)) )));
HXDLIN(  82)												col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  82)										if ((col7 != 0)) {
HXLINE(  82)											int x24 = (dx9 - rectLeft7);
HXDLIN(  82)											int y24 = (dy9 - rectTop7);
HXDLIN(  82)											int c35 = col7;
HXDLIN(  82)											bool hitQuad58;
HXDLIN(  82)											if ((((c35 >> 24) & 255) < 254)) {
HXLINE(  82)												hitQuad58 = undoImage21->transparent;
            											}
            											else {
HXLINE(  82)												hitQuad58 = false;
            											}
HXDLIN(  82)											if (hitQuad58) {
HXLINE(  82)												int location14;
HXDLIN(  82)												if (undoImage21->useVirtualPos) {
HXLINE(  82)													location14 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x24) - undoImage21->virtualX));
            												}
            												else {
HXLINE(  82)													location14 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage21->width) + x24)) ));
            												}
HXDLIN(  82)												int this232 = ::iterMagic::Iimg_obj::get(undoImage21->image,location14);
HXDLIN(  82)												int this233;
HXDLIN(  82)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)													this233 = ((((((this232 >> 24) & 255) << 24) | ((this232 & 255) << 16)) | (((this232 >> 8) & 255) << 8)) | ((this232 >> 16) & 255));
            												}
            												else {
HXLINE(  82)													this233 = this232;
            												}
HXDLIN(  82)												Float a119;
HXDLIN(  82)												int this234 = ((this233 >> 24) & 255);
HXDLIN(  82)												if ((this234 == 0)) {
HXLINE(  82)													a119 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													a119 = (( (Float)(this234) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float r116;
HXDLIN(  82)												int this235 = ((this233 >> 16) & 255);
HXDLIN(  82)												if ((this235 == 0)) {
HXLINE(  82)													r116 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													r116 = (( (Float)(this235) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float g116;
HXDLIN(  82)												int this236 = ((this233 >> 8) & 255);
HXDLIN(  82)												if ((this236 == 0)) {
HXLINE(  82)													g116 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													g116 = (( (Float)(this236) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float b120;
HXDLIN(  82)												int this237 = (this233 & 255);
HXDLIN(  82)												if ((this237 == 0)) {
HXLINE(  82)													b120 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													b120 = (( (Float)(this237) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float a217;
HXDLIN(  82)												int this238 = ((col7 >> 24) & 255);
HXDLIN(  82)												if ((this238 == 0)) {
HXLINE(  82)													a217 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													a217 = (( (Float)(this238) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float r214;
HXDLIN(  82)												int this239 = ((col7 >> 16) & 255);
HXDLIN(  82)												if ((this239 == 0)) {
HXLINE(  82)													r214 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													r214 = (( (Float)(this239) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float g214;
HXDLIN(  82)												int this240 = ((col7 >> 8) & 255);
HXDLIN(  82)												if ((this240 == 0)) {
HXLINE(  82)													g214 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													g214 = (( (Float)(this240) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float b218;
HXDLIN(  82)												int this241 = (col7 & 255);
HXDLIN(  82)												if ((this241 == 0)) {
HXLINE(  82)													b218 = ((Float)0.);
            												}
            												else {
HXLINE(  82)													b218 = (( (Float)(this241) ) / ( (Float)(255) ));
            												}
HXDLIN(  82)												Float a316 = (a119 * (( (Float)(1) ) - a217));
HXDLIN(  82)												int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a316) + (r214 * a217))));
HXDLIN(  82)												int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a316) + (g214 * a217))));
HXDLIN(  82)												int b63 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a316) + (b218 * a217))));
HXDLIN(  82)												int a58 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN(  82)												int blended14 = ((((a58 << 24) | (r37 << 16)) | (g37 << 8)) | b63);
HXDLIN(  82)												{
HXLINE(  82)													int hitQuad59;
HXDLIN(  82)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)														hitQuad59 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            													}
            													else {
HXLINE(  82)														hitQuad59 = blended14;
            													}
HXDLIN(  82)													::iterMagic::Iimg_obj::set(undoImage21->image,location14,hitQuad59);
            												}
            											}
            											else {
HXLINE(  82)												::Dynamic this242 = undoImage21->image;
HXDLIN(  82)												int index32;
HXDLIN(  82)												if (undoImage21->useVirtualPos) {
HXLINE(  82)													index32 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x24) - undoImage21->virtualX));
            												}
            												else {
HXLINE(  82)													index32 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage21->width) + x24)) ));
            												}
HXDLIN(  82)												int hitQuad60;
HXDLIN(  82)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)													hitQuad60 = ((((((c35 >> 24) & 255) << 24) | ((c35 & 255) << 16)) | (((c35 >> 8) & 255) << 8)) | ((c35 >> 16) & 255));
            												}
            												else {
HXLINE(  82)													hitQuad60 = c35;
            												}
HXDLIN(  82)												::iterMagic::Iimg_obj::set(this242,index32,hitQuad60);
            											}
            										}
            										else {
HXLINE(  82)											if (forceClear7) {
HXLINE(  82)												::Dynamic this243 = undoImage21->image;
HXDLIN(  82)												int x25 = (dx9 - rectLeft7);
HXDLIN(  82)												int y25 = (dy9 - rectTop7);
HXDLIN(  82)												int index33;
HXDLIN(  82)												if (undoImage21->useVirtualPos) {
HXLINE(  82)													index33 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x25) - undoImage21->virtualX));
            												}
            												else {
HXLINE(  82)													index33 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage21->width) + x25)) ));
            												}
HXDLIN(  82)												::iterMagic::Iimg_obj::set(this243,index33,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  82)				bool found7 = false;
HXDLIN(  82)				{
HXLINE(  82)					int _g_min14 = xIter37->start;
HXDLIN(  82)					int _g_max14 = xIter37->max;
HXDLIN(  82)					while((_g_min14 < _g_max14)){
HXLINE(  82)						_g_min14 = (_g_min14 + 1);
HXDLIN(  82)						int px6 = (_g_min14 - 1);
HXDLIN(  82)						Float pcx5 = (( (Float)(px6) ) - ax4);
HXLINE( 619)						found7 = false;
HXLINE(  82)						{
HXLINE(  82)							int _g_min15 = yIter37->start;
HXDLIN(  82)							int _g_max15 = yIter37->max;
HXDLIN(  82)							while((_g_min15 < _g_max15)){
HXLINE(  82)								_g_min15 = (_g_min15 + 1);
HXDLIN(  82)								int py6 = (_g_min15 - 1);
HXDLIN(  82)								Float pcy5 = (( (Float)(py6) ) - ay4);
HXDLIN(  82)								Float dot315 = ((pcx5 * bcx5) + (pcy5 * bcy5));
HXDLIN(  82)								Float dot325 = ((pcx5 * acx5) + (pcy5 * acy5));
HXDLIN(  82)								Float ratioA5 = (((dot225 * dot315) - (dot125 * dot325)) * denom15);
HXDLIN(  82)								Float ratioB5 = (((dot115 * dot325) - (dot125 * dot315)) * denom15);
HXDLIN(  82)								Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN(  82)								bool hitQuad61;
HXDLIN(  82)								bool hitQuad62;
HXDLIN(  82)								if ((ratioA5 >= 0)) {
HXLINE(  82)									hitQuad62 = (ratioB5 >= 0);
            								}
            								else {
HXLINE(  82)									hitQuad62 = false;
            								}
HXDLIN(  82)								if (hitQuad62) {
HXLINE(  82)									hitQuad61 = (ratioC5 >= 0);
            								}
            								else {
HXLINE(  82)									hitQuad61 = false;
            								}
HXDLIN(  82)								if (hitQuad61) {
HXLINE(  82)									int i68 = ::Std_obj::_hx_int((( (Float)(aA5) ) * (soft * ratioB5)));
HXDLIN(  82)									if ((i68 > 255)) {
HXLINE(  24)										i68 = 255;
            									}
HXLINE(  82)									if ((i68 < 0)) {
HXLINE(  25)										i68 = 0;
            									}
HXLINE(  82)									int a59 = i68;
HXDLIN(  82)									int i69 = ::Std_obj::_hx_int(( (Float)(rA5) ));
HXDLIN(  82)									if ((i69 > 255)) {
HXLINE(  24)										i69 = 255;
            									}
HXLINE(  82)									if ((i69 < 0)) {
HXLINE(  25)										i69 = 0;
            									}
HXLINE(  82)									int r38 = i69;
HXDLIN(  82)									int i70 = ::Std_obj::_hx_int(( (Float)(gA5) ));
HXDLIN(  82)									if ((i70 > 255)) {
HXLINE(  24)										i70 = 255;
            									}
HXLINE(  82)									if ((i70 < 0)) {
HXLINE(  25)										i70 = 0;
            									}
HXLINE(  82)									int g38 = i70;
HXDLIN(  82)									int i71 = ::Std_obj::_hx_int(( (Float)(bA5) ));
HXDLIN(  82)									if ((i71 > 255)) {
HXLINE(  24)										i71 = 255;
            									}
HXLINE(  82)									if ((i71 < 0)) {
HXLINE(  25)										i71 = 0;
            									}
HXLINE(  82)									int b64 = i71;
HXDLIN(  82)									{
HXLINE(  82)										int location15;
HXDLIN(  82)										if (pixelImage->useVirtualPos) {
HXLINE(  82)											location15 = ::Std_obj::_hx_int(((((( (Float)(py6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px6) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  82)											location15 = ::Std_obj::_hx_int(( (Float)(((py6 * pixelImage->width) + px6)) ));
            										}
HXDLIN(  82)										bool hitQuad63;
HXDLIN(  82)										if (pixelImage->transparent) {
HXLINE(  82)											hitQuad63 = (a59 < 254);
            										}
            										else {
HXLINE(  82)											hitQuad63 = false;
            										}
HXDLIN(  82)										if (hitQuad63) {
HXLINE(  82)											int this244 = ::iterMagic::Iimg_obj::get(pixelImage->image,location15);
HXDLIN(  82)											int old5;
HXDLIN(  82)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)												old5 = ((((((this244 >> 24) & 255) << 24) | ((this244 & 255) << 16)) | (((this244 >> 8) & 255) << 8)) | ((this244 >> 16) & 255));
            											}
            											else {
HXLINE(  82)												old5 = this244;
            											}
HXDLIN(  82)											int rhs5 = ((((a59 << 24) | (r38 << 16)) | (g38 << 8)) | b64);
HXDLIN(  82)											Float a120;
HXDLIN(  82)											int this245 = ((old5 >> 24) & 255);
HXDLIN(  82)											if ((this245 == 0)) {
HXLINE(  82)												a120 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												a120 = (( (Float)(this245) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float r117;
HXDLIN(  82)											int this246 = ((old5 >> 16) & 255);
HXDLIN(  82)											if ((this246 == 0)) {
HXLINE(  82)												r117 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												r117 = (( (Float)(this246) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float g117;
HXDLIN(  82)											int this247 = ((old5 >> 8) & 255);
HXDLIN(  82)											if ((this247 == 0)) {
HXLINE(  82)												g117 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												g117 = (( (Float)(this247) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float b121;
HXDLIN(  82)											int this248 = (old5 & 255);
HXDLIN(  82)											if ((this248 == 0)) {
HXLINE(  82)												b121 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												b121 = (( (Float)(this248) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float a218;
HXDLIN(  82)											int this249 = ((rhs5 >> 24) & 255);
HXDLIN(  82)											if ((this249 == 0)) {
HXLINE(  82)												a218 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												a218 = (( (Float)(this249) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float r215;
HXDLIN(  82)											int this250 = ((rhs5 >> 16) & 255);
HXDLIN(  82)											if ((this250 == 0)) {
HXLINE(  82)												r215 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												r215 = (( (Float)(this250) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float g215;
HXDLIN(  82)											int this251 = ((rhs5 >> 8) & 255);
HXDLIN(  82)											if ((this251 == 0)) {
HXLINE(  82)												g215 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												g215 = (( (Float)(this251) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float b219;
HXDLIN(  82)											int this252 = (rhs5 & 255);
HXDLIN(  82)											if ((this252 == 0)) {
HXLINE(  82)												b219 = ((Float)0.);
            											}
            											else {
HXLINE(  82)												b219 = (( (Float)(this252) ) / ( (Float)(255) ));
            											}
HXDLIN(  82)											Float a317 = (a120 * (( (Float)(1) ) - a218));
HXDLIN(  82)											int r39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a317) + (r215 * a218))));
HXDLIN(  82)											int g39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a317) + (g215 * a218))));
HXDLIN(  82)											int b65 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b121 * a317) + (b219 * a218))));
HXDLIN(  82)											int a60 = ::Std_obj::_hx_int((( (Float)(255) ) * (a317 + a218)));
HXDLIN(  82)											int blended15 = ((((a60 << 24) | (r39 << 16)) | (g39 << 8)) | b65);
HXDLIN(  82)											{
HXLINE(  82)												int hitQuad64;
HXDLIN(  82)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)													hitQuad64 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            												}
            												else {
HXLINE(  82)													hitQuad64 = blended15;
            												}
HXDLIN(  82)												::iterMagic::Iimg_obj::set(pixelImage->image,location15,hitQuad64);
            											}
            										}
            										else {
HXLINE(  82)											int value5;
HXDLIN(  82)											if (pixelImage->isLittle) {
HXLINE(  82)												value5 = ((((a59 << 24) | (b64 << 16)) | (g38 << 8)) | r38);
            											}
            											else {
HXLINE(  82)												value5 = ((((a59 << 24) | (r38 << 16)) | (g38 << 8)) | b64);
            											}
HXDLIN(  82)											::iterMagic::Iimg_obj::set(pixelImage->image,location15,value5);
            										}
            									}
HXLINE( 633)									found7 = true;
            								}
            								else {
HXLINE(  82)									if (found7) {
HXLINE(  82)										goto _hx_goto_180;
            									}
            								}
            							}
            							_hx_goto_180:;
            						}
            					}
            				}
HXDLIN(  82)				 ::pi_xy::iter::IntIterStart v_yIter35;
HXDLIN(  82)				 ::pi_xy::iter::IntIterStart v_xIter35;
HXDLIN(  82)				int v_undoY5;
HXDLIN(  82)				int v_undoX5;
HXDLIN(  82)				Float v_ty5;
HXDLIN(  82)				Float v_tx5;
HXDLIN(  82)				Float v_t05;
HXDLIN(  82)				Float v_sy5;
HXDLIN(  82)				Float v_sx5;
HXDLIN(  82)				Float v_s05;
HXDLIN(  82)				Float v_A5;
HXDLIN(  82)				Float ax7 = ex1;
HXDLIN(  82)				Float ay7 = ey1;
HXDLIN(  82)				 ::pi_xy::ImageStruct v_undoImage5 = null();
HXDLIN(  82)				Float bx9 = dx5;
HXDLIN(  82)				Float by9 = dy5;
HXDLIN(  82)				Float cx9 = ax4;
HXDLIN(  82)				Float cy9 = ay4;
HXDLIN(  82)				bool adjustWinding7 = (((((ax7 * by9) - (bx9 * ay7)) + ((bx9 * cy9) - (cx9 * by9))) + ((cx9 * ay7) - (ax7 * cy9))) > 0);
HXDLIN(  82)				if (!(adjustWinding7)) {
HXLINE(  82)					Float bx_7 = bx9;
HXDLIN(  82)					Float by_7 = by9;
HXLINE(  24)					bx9 = cx9;
HXLINE(  25)					by9 = cy9;
HXLINE(  26)					cx9 = bx_7;
HXLINE(  27)					cy9 = by_7;
            				}
HXLINE(  82)				Float v_ax5 = ax7;
HXDLIN(  82)				Float v_ay5 = ay7;
HXDLIN(  82)				Float v_bx5 = bx9;
HXDLIN(  82)				Float v_by5 = by9;
HXDLIN(  82)				Float v_cx5 = cx9;
HXDLIN(  82)				Float v_cy5 = cy9;
HXDLIN(  82)				bool v_preCalculated5 = true;
HXDLIN(  82)				{
HXLINE(  82)					v_s05 = ((v_ay5 * v_cx5) - (v_ax5 * v_cy5));
HXDLIN(  82)					v_sx5 = (v_cy5 - v_ay5);
HXDLIN(  82)					v_sy5 = (v_ax5 - v_cx5);
HXDLIN(  82)					v_t05 = ((v_ax5 * v_by5) - (v_ay5 * v_bx5));
HXDLIN(  82)					v_tx5 = (v_ay5 - v_by5);
HXDLIN(  82)					v_ty5 = (v_bx5 - v_ax5);
HXDLIN(  82)					v_A5 = ((((-(v_by5) * v_cx5) + (v_ay5 * (-(v_bx5) + v_cx5))) + (v_ax5 * (v_by5 - v_cy5))) + (v_bx5 * v_cy5));
HXDLIN(  82)					Float a61 = v_ax5;
HXDLIN(  82)					Float b66 = v_bx5;
HXDLIN(  82)					Float c36 = v_cx5;
HXDLIN(  82)					if ((a61 > b66)) {
HXLINE(  82)						if ((a61 > c36)) {
HXLINE(  82)							int min52;
HXDLIN(  82)							if ((b66 > c36)) {
HXLINE(  82)								min52 = ::Math_obj::floor(c36);
            							}
            							else {
HXLINE(  82)								min52 = ::Math_obj::floor(b66);
            							}
HXDLIN(  82)							int ii_min104 = min52;
HXDLIN(  82)							int ii_max104 = ::Math_obj::ceil(a61);
HXDLIN(  82)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min104,ii_max104);
            						}
            						else {
HXLINE(  82)							int ii_min105 = ::Math_obj::floor(b66);
HXDLIN(  82)							int ii_max105 = ::Math_obj::ceil(c36);
HXDLIN(  82)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min105,ii_max105);
            						}
            					}
            					else {
HXLINE(  82)						if ((b66 > c36)) {
HXLINE(  82)							int min53;
HXDLIN(  82)							if ((a61 > c36)) {
HXLINE(  82)								min53 = ::Math_obj::floor(c36);
            							}
            							else {
HXLINE(  82)								min53 = ::Math_obj::ceil(a61);
            							}
HXDLIN(  82)							int ii_min106 = min53;
HXDLIN(  82)							int ii_max106 = ::Math_obj::ceil(b66);
HXDLIN(  82)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min106,ii_max106);
            						}
            						else {
HXLINE(  82)							int ii_min107 = ::Math_obj::floor(a61);
HXDLIN(  82)							int ii_max107 = ::Math_obj::ceil(c36);
HXDLIN(  82)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min107,ii_max107);
            						}
            					}
HXDLIN(  82)					Float a62 = v_ay5;
HXDLIN(  82)					Float b67 = v_by5;
HXDLIN(  82)					Float c37 = v_cy5;
HXDLIN(  82)					if ((a62 > b67)) {
HXLINE(  82)						if ((a62 > c37)) {
HXLINE(  82)							int min54;
HXDLIN(  82)							if ((b67 > c37)) {
HXLINE(  82)								min54 = ::Math_obj::floor(c37);
            							}
            							else {
HXLINE(  82)								min54 = ::Math_obj::floor(b67);
            							}
HXDLIN(  82)							int ii_min108 = min54;
HXDLIN(  82)							int ii_max108 = ::Math_obj::ceil(a62);
HXDLIN(  82)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min108,ii_max108);
            						}
            						else {
HXLINE(  82)							int ii_min109 = ::Math_obj::floor(b67);
HXDLIN(  82)							int ii_max109 = ::Math_obj::ceil(c37);
HXDLIN(  82)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min109,ii_max109);
            						}
            					}
            					else {
HXLINE(  82)						if ((b67 > c37)) {
HXLINE(  82)							int min55;
HXDLIN(  82)							if ((a62 > c37)) {
HXLINE(  82)								min55 = ::Math_obj::floor(c37);
            							}
            							else {
HXLINE(  82)								min55 = ::Math_obj::ceil(a62);
            							}
HXDLIN(  82)							int ii_min110 = min55;
HXDLIN(  82)							int ii_max110 = ::Math_obj::ceil(b67);
HXDLIN(  82)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min110,ii_max110);
            						}
            						else {
HXLINE(  82)							int ii_min111 = ::Math_obj::floor(a62);
HXDLIN(  82)							int ii_max111 = ::Math_obj::ceil(c37);
HXDLIN(  82)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min111,ii_max111);
            						}
            					}
            				}
HXDLIN(  82)				if (hasUndo7) {
HXLINE(  82)					v_undoImage5 = undoImage21;
HXDLIN(  82)					v_undoX5 = xIter37->start;
HXDLIN(  82)					v_undoY5 = yIter37->start;
            				}
HXDLIN(  82)				 ::pi_xy::algo::HitQuad v17 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax4,ay4,bx5,by5,cx5,cy5,dx5,dy5,true);
HXLINE(  78)				hitQuad = v17;
            			}
            		}
            		else {
HXLINE(  85)			Float sin3 = ::Math_obj::sin(theta);
HXDLIN(  85)			Float cos3 = ::Math_obj::cos(theta);
HXDLIN(  85)			Float radius3 = (thick / ( (Float)(2) ));
HXDLIN(  85)			Float dx10 = ((Float)0.1);
HXDLIN(  85)			Float dy10 = radius3;
HXDLIN(  85)			Float cx10 = h2;
HXDLIN(  85)			Float cy10 = radius3;
HXDLIN(  85)			Float bx10 = h2;
HXDLIN(  85)			Float by10 = -(radius3);
HXDLIN(  85)			Float ax8 = ((Float)0.1);
HXDLIN(  85)			Float ay8 = -(radius3);
HXDLIN(  85)			Float temp2 = ((Float)0.);
HXLINE(  82)			temp2 = (px + ((ax8 * cos3) - (ay8 * sin3)));
HXLINE(  83)			ay8 = (py + ((ay8 * cos3) + (ax8 * sin3)));
HXLINE(  84)			ax8 = temp2;
HXLINE(  86)			temp2 = (px + ((bx10 * cos3) - (by10 * sin3)));
HXLINE(  87)			by10 = (py + ((by10 * cos3) + (bx10 * sin3)));
HXLINE(  88)			bx10 = temp2;
HXLINE(  90)			temp2 = (px + ((cx10 * cos3) - (cy10 * sin3)));
HXLINE(  91)			cy10 = (py + ((cy10 * cos3) + (cx10 * sin3)));
HXLINE(  92)			cx10 = temp2;
HXLINE(  94)			temp2 = (px + ((dx10 * cos3) - (dy10 * sin3)));
HXLINE(  95)			dy10 = (py + ((dy10 * cos3) + (dx10 * sin3)));
HXLINE(  96)			dx10 = temp2;
HXLINE(  85)			{
HXLINE(  85)				bool hasUndo8 = true;
HXDLIN(  85)				int aA6 = ((color >> 24) & 255);
HXDLIN(  85)				int rA6 = ((color >> 16) & 255);
HXDLIN(  85)				int gA6 = ((color >> 8) & 255);
HXDLIN(  85)				int bA6 = (color & 255);
HXDLIN(  85)				Float bcx6 = (bx10 - dx10);
HXDLIN(  85)				Float bcy6 = (by10 - dy10);
HXDLIN(  85)				Float acx6 = (ax8 - dx10);
HXDLIN(  85)				Float acy6 = (ay8 - dy10);
HXDLIN(  85)				Float dot116 = ((bcx6 * bcx6) + (bcy6 * bcy6));
HXDLIN(  85)				Float dot126 = ((bcx6 * acx6) + (bcy6 * acy6));
HXDLIN(  85)				Float dot226 = ((acx6 * acx6) + (acy6 * acy6));
HXDLIN(  85)				Float denom16 = (( (Float)(1) ) / ((dot116 * dot226) - (dot126 * dot126)));
HXDLIN(  85)				 ::pi_xy::iter::IntIterStart xIter38;
HXDLIN(  85)				if ((ax8 > bx10)) {
HXLINE(  85)					if ((ax8 > dx10)) {
HXLINE(  85)						int min56;
HXDLIN(  85)						if ((bx10 > dx10)) {
HXLINE(  85)							min56 = ::Math_obj::floor(dx10);
            						}
            						else {
HXLINE(  85)							min56 = ::Math_obj::floor(bx10);
            						}
HXDLIN(  85)						int ii_min112 = min56;
HXDLIN(  85)						int ii_max112 = ::Math_obj::ceil(ax8);
HXDLIN(  85)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min112,ii_max112);
            					}
            					else {
HXLINE(  85)						int ii_min113 = ::Math_obj::floor(bx10);
HXDLIN(  85)						int ii_max113 = ::Math_obj::ceil(dx10);
HXDLIN(  85)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min113,ii_max113);
            					}
            				}
            				else {
HXLINE(  85)					if ((bx10 > dx10)) {
HXLINE(  85)						int min57;
HXDLIN(  85)						if ((ax8 > dx10)) {
HXLINE(  85)							min57 = ::Math_obj::floor(dx10);
            						}
            						else {
HXLINE(  85)							min57 = ::Math_obj::ceil(ax8);
            						}
HXDLIN(  85)						int ii_min114 = min57;
HXDLIN(  85)						int ii_max114 = ::Math_obj::ceil(bx10);
HXDLIN(  85)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min114,ii_max114);
            					}
            					else {
HXLINE(  85)						int ii_min115 = ::Math_obj::floor(ax8);
HXDLIN(  85)						int ii_max115 = ::Math_obj::ceil(dx10);
HXDLIN(  85)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min115,ii_max115);
            					}
            				}
HXDLIN(  85)				 ::pi_xy::iter::IntIterStart yIter38;
HXDLIN(  85)				if ((ay8 > by10)) {
HXLINE(  85)					if ((ay8 > dy10)) {
HXLINE(  85)						int min58;
HXDLIN(  85)						if ((by10 > dy10)) {
HXLINE(  85)							min58 = ::Math_obj::floor(dy10);
            						}
            						else {
HXLINE(  85)							min58 = ::Math_obj::floor(by10);
            						}
HXDLIN(  85)						int ii_min116 = min58;
HXDLIN(  85)						int ii_max116 = ::Math_obj::ceil(ay8);
HXDLIN(  85)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min116,ii_max116);
            					}
            					else {
HXLINE(  85)						int ii_min117 = ::Math_obj::floor(by10);
HXDLIN(  85)						int ii_max117 = ::Math_obj::ceil(dy10);
HXDLIN(  85)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min117,ii_max117);
            					}
            				}
            				else {
HXLINE(  85)					if ((by10 > dy10)) {
HXLINE(  85)						int min59;
HXDLIN(  85)						if ((ay8 > dy10)) {
HXLINE(  85)							min59 = ::Math_obj::floor(dy10);
            						}
            						else {
HXLINE(  85)							min59 = ::Math_obj::ceil(ay8);
            						}
HXDLIN(  85)						int ii_min118 = min59;
HXDLIN(  85)						int ii_max118 = ::Math_obj::ceil(by10);
HXDLIN(  85)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min118,ii_max118);
            					}
            					else {
HXLINE(  85)						int ii_min119 = ::Math_obj::floor(ay8);
HXDLIN(  85)						int ii_max119 = ::Math_obj::ceil(dy10);
HXDLIN(  85)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min119,ii_max119);
            					}
            				}
HXDLIN(  85)				 ::pi_xy::ImageStruct undoImage24 = null();
HXDLIN(  85)				if (hasUndo8) {
HXLINE(  85)					int width8 = ((xIter38->max - xIter38->start) + 1);
HXDLIN(  85)					int height8 = ((yIter38->max - yIter38->start) + 1);
HXDLIN(  85)					 ::Dynamic imageType8 = null();
HXDLIN(  85)					 ::pi_xy::ImageStruct this253 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  85)					if (::hx::IsNull( imageType8 )) {
HXLINE(  54)						imageType8 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  85)					::Dynamic undoImage25;
HXDLIN(  85)					switch((int)(( (int)(imageType8) ))){
            						case (int)0: {
HXLINE(  85)							 ::iterMagic::BytesImg byt8 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  85)							 ::iterMagic::BytesImg b68 = byt8;
HXDLIN(  85)							{
HXLINE(  85)								b68->width = width8;
HXDLIN(  85)								b68->height = height8;
HXDLIN(  85)								b68->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  85)								b68->data = ::haxe::io::Bytes_obj::alloc((b68->length * 4));
HXDLIN(  85)								{
HXLINE(  85)									int len16 = b68->length;
HXDLIN(  85)									int w8 = 0;
HXDLIN(  85)									{
HXLINE(  85)										int _g160 = 0;
HXDLIN(  85)										int _g161 = b68->height;
HXDLIN(  85)										while((_g160 < _g161)){
HXLINE(  85)											_g160 = (_g160 + 1);
HXDLIN(  85)											int y26 = (_g160 - 1);
HXDLIN(  85)											{
HXLINE(  85)												int _g162 = 0;
HXDLIN(  85)												int _g163 = b68->width;
HXDLIN(  85)												while((_g162 < _g163)){
HXLINE(  85)													_g162 = (_g162 + 1);
HXDLIN(  85)													int x26 = (_g162 - 1);
HXDLIN(  85)													{
HXLINE(  85)														w8 = (w8 + 1);
HXDLIN(  85)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  85)													{
HXLINE(  85)														w8 = (w8 + 1);
HXDLIN(  85)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  85)													{
HXLINE(  85)														w8 = (w8 + 1);
HXDLIN(  85)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  85)													{
HXLINE(  85)														w8 = (w8 + 1);
HXDLIN(  85)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  85)							undoImage25 = b68;
            						}
            						break;
            						case (int)1: {
HXLINE(  85)							 ::iterMagic::ArrIntImg arrI8 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  85)							 ::iterMagic::ArrIntImg a63 = arrI8;
HXDLIN(  85)							{
HXLINE(  85)								a63->width = width8;
HXDLIN(  85)								a63->height = height8;
HXDLIN(  85)								a63->data = ::Array_obj< int >::__new(0);
HXDLIN(  85)								a63->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  85)								{
HXLINE(  85)									int _g164 = 0;
HXDLIN(  85)									int _g165 = a63->length;
HXDLIN(  85)									while((_g164 < _g165)){
HXLINE(  85)										_g164 = (_g164 + 1);
HXDLIN(  85)										int i72 = (_g164 - 1);
HXDLIN(  85)										a63->data[i72] = 0;
            									}
            								}
            							}
HXDLIN(  85)							undoImage25 = a63;
            						}
            						break;
            						case (int)2: {
HXLINE(  85)							 ::iterMagic::U32ArrImg u32a8 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  85)							 ::iterMagic::U32ArrImg b69 = u32a8;
HXDLIN(  85)							{
HXLINE(  85)								b69->width = width8;
HXDLIN(  85)								b69->height = height8;
HXDLIN(  85)								b69->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  85)								int size8 = (b69->length * 4);
HXDLIN(  85)								b69->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size8),0,size8);
HXDLIN(  85)								{
HXLINE(  85)									int _g166 = 0;
HXDLIN(  85)									int _g167 = b69->length;
HXDLIN(  85)									while((_g166 < _g167)){
HXLINE(  85)										_g166 = (_g166 + 1);
HXDLIN(  85)										int i73 = (_g166 - 1);
HXDLIN(  85)										{
HXLINE(  85)											 ::haxe::io::ArrayBufferViewImpl this254 = b69->data;
HXDLIN(  85)											bool undoImage26;
HXDLIN(  85)											if ((i73 >= 0)) {
HXLINE(  85)												undoImage26 = (i73 < (this254->byteLength >> 2));
            											}
            											else {
HXLINE(  85)												undoImage26 = false;
            											}
HXDLIN(  85)											if (undoImage26) {
HXLINE(  85)												 ::haxe::io::Bytes _this8 = this254->bytes;
HXDLIN(  85)												int pos8 = ((i73 << 2) + this254->byteOffset);
HXDLIN(  85)												_this8->b[pos8] = ( (unsigned char)(0) );
HXDLIN(  85)												_this8->b[(pos8 + 1)] = ( (unsigned char)(0) );
HXDLIN(  85)												_this8->b[(pos8 + 2)] = ( (unsigned char)(0) );
HXDLIN(  85)												_this8->b[(pos8 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  85)							undoImage25 = b69;
            						}
            						break;
            						case (int)3: {
HXLINE(  85)							 ::iterMagic::VecIntImg vec8 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  85)							 ::iterMagic::VecIntImg v18 = vec8;
HXDLIN(  85)							{
HXLINE(  85)								v18->width = width8;
HXDLIN(  85)								v18->height = height8;
HXDLIN(  85)								v18->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  85)								v18->data = ::Array_obj< int >::__new(v18->length);
HXDLIN(  85)								{
HXLINE(  85)									int _g168 = 0;
HXDLIN(  85)									int _g169 = v18->length;
HXDLIN(  85)									while((_g168 < _g169)){
HXLINE(  85)										_g168 = (_g168 + 1);
HXDLIN(  85)										int i74 = (_g168 - 1);
HXDLIN(  85)										v18->data->__unsafe_set(i74,0);
            									}
            								}
            							}
HXDLIN(  85)							undoImage25 = v18;
            						}
            						break;
            						case (int)4: {
HXLINE(  85)							 ::iterMagic::StackIntImg sInt8 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  85)							 ::iterMagic::StackIntImg b70 = sInt8;
HXDLIN(  85)							{
HXLINE(  85)								b70->width = width8;
HXDLIN(  85)								b70->height = height8;
HXDLIN(  85)								b70->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN(  85)								b70->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  85)								{
HXLINE(  85)									int len17 = b70->length;
HXDLIN(  85)									 ::haxe::ds::GenericStack_Int d8 = b70->data;
HXDLIN(  85)									if (::hx::IsNull( d8->head )) {
HXLINE(  85)										int _g170 = 0;
HXDLIN(  85)										int _g171 = len17;
HXDLIN(  85)										while((_g170 < _g171)){
HXLINE(  85)											_g170 = (_g170 + 1);
HXDLIN(  85)											int i75 = (_g170 - 1);
HXDLIN(  85)											d8->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d8->head);
            										}
            									}
            									else {
HXLINE(  85)										int _g172 = 0;
HXDLIN(  85)										int _g173 = len17;
HXDLIN(  85)										while((_g172 < _g173)){
HXLINE(  85)											_g172 = (_g172 + 1);
HXDLIN(  85)											int i76 = (_g172 - 1);
HXDLIN(  85)											{
HXLINE(  85)												 ::haxe::ds::GenericCell_Int l8 = b70->data->head;
HXDLIN(  85)												 ::haxe::ds::GenericCell_Int prev8 = null();
HXDLIN(  85)												{
HXLINE(  85)													int _g174 = 0;
HXDLIN(  85)													int _g175 = i76;
HXDLIN(  85)													while((_g174 < _g175)){
HXLINE(  85)														_g174 = (_g174 + 1);
HXDLIN(  85)														int i77 = (_g174 - 1);
HXLINE( 345)														prev8 = l8;
HXLINE( 346)														l8 = l8->next;
            													}
            												}
HXLINE(  85)												if (::hx::IsNull( prev8 )) {
HXLINE(  85)													b70->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  85)													l8 = null();
            												}
            												else {
HXLINE(  85)													prev8->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN(  85)													l8 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  85)							undoImage25 = b70;
            						}
            						break;
            					}
HXDLIN(  85)					this253->image = undoImage25;
HXDLIN(  85)					this253->width = width8;
HXDLIN(  85)					this253->height = height8;
HXDLIN(  85)					this253->imageType = ( (int)(imageType8) );
HXDLIN(  85)					undoImage24 = this253;
HXDLIN(  85)					{
HXLINE(  85)						int rectLeft8 = xIter38->start;
HXDLIN(  85)						int rectTop8 = yIter38->start;
HXDLIN(  85)						int rectRight8 = xIter38->max;
HXDLIN(  85)						bool forceClear8 = false;
HXDLIN(  85)						{
HXLINE(  85)							int _g176 = rectTop8;
HXDLIN(  85)							int _g177 = yIter38->max;
HXDLIN(  85)							while((_g176 < _g177)){
HXLINE(  85)								_g176 = (_g176 + 1);
HXDLIN(  85)								int dy11 = (_g176 - 1);
HXDLIN(  85)								{
HXLINE(  85)									int _g178 = rectLeft8;
HXDLIN(  85)									int _g179 = rectRight8;
HXDLIN(  85)									while((_g178 < _g179)){
HXLINE(  85)										_g178 = (_g178 + 1);
HXDLIN(  85)										int dx11 = (_g178 - 1);
HXDLIN(  85)										::Dynamic this255 = pixelImage->image;
HXDLIN(  85)										int index34;
HXDLIN(  85)										if (pixelImage->useVirtualPos) {
HXLINE(  85)											index34 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx11) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  85)											index34 = ::Std_obj::_hx_int(( (Float)(((dy11 * pixelImage->width) + dx11)) ));
            										}
HXDLIN(  85)										int c38 = ::iterMagic::Iimg_obj::get(this255,index34);
HXDLIN(  85)										int col8;
HXDLIN(  85)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)											col8 = ((((((c38 >> 24) & 255) << 24) | ((c38 & 255) << 16)) | (((c38 >> 8) & 255) << 8)) | ((c38 >> 16) & 255));
            										}
            										else {
HXLINE(  85)											col8 = c38;
            										}
HXDLIN(  85)										bool hitQuad65;
HXDLIN(  85)										if (pixelImage->useMask) {
HXLINE(  85)											hitQuad65 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  85)											hitQuad65 = false;
            										}
HXDLIN(  85)										if (hitQuad65) {
HXLINE(  85)											 ::pi_xy::ImageStruct this256 = pixelImage->mask;
HXDLIN(  85)											::Dynamic this257 = this256->image;
HXDLIN(  85)											int index35;
HXDLIN(  85)											if (this256->useVirtualPos) {
HXLINE(  85)												index35 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - this256->virtualY) * ( (Float)(this256->width) )) + dx11) - this256->virtualX));
            											}
            											else {
HXLINE(  85)												index35 = ::Std_obj::_hx_int(( (Float)(((dy11 * this256->width) + dx11)) ));
            											}
HXDLIN(  85)											int c39 = ::iterMagic::Iimg_obj::get(this257,index35);
HXDLIN(  85)											int v19;
HXDLIN(  85)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)												v19 = ((((((c39 >> 24) & 255) << 24) | ((c39 & 255) << 16)) | (((c39 >> 8) & 255) << 8)) | ((c39 >> 16) & 255));
            											}
            											else {
HXLINE(  85)												v19 = c39;
            											}
HXDLIN(  85)											int maskPixel8 = v19;
HXDLIN(  85)											int this258 = col8;
HXDLIN(  85)											if ((maskPixel8 == 0)) {
HXLINE(  85)												col8 = this258;
            											}
            											else {
HXLINE(  85)												Float m08;
HXDLIN(  85)												int this259 = ((maskPixel8 >> 24) & 255);
HXDLIN(  85)												if ((this259 == 0)) {
HXLINE(  85)													m08 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													m08 = (( (Float)(this259) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float m18;
HXDLIN(  85)												int this260 = ((maskPixel8 >> 16) & 255);
HXDLIN(  85)												if ((this260 == 0)) {
HXLINE(  85)													m18 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													m18 = (( (Float)(this260) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float m28;
HXDLIN(  85)												int this261 = ((maskPixel8 >> 8) & 255);
HXDLIN(  85)												if ((this261 == 0)) {
HXLINE(  85)													m28 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													m28 = (( (Float)(this261) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float m38;
HXDLIN(  85)												int this262 = (maskPixel8 & 255);
HXDLIN(  85)												if ((this262 == 0)) {
HXLINE(  85)													m38 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													m38 = (( (Float)(this262) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												int ch08 = ::Std_obj::_hx_int(((((Float)1.) - m08) * ( (Float)(((this258 >> 24) & 255)) )));
HXDLIN(  85)												int ch18 = ::Std_obj::_hx_int(((((Float)1.) - m18) * ( (Float)(((this258 >> 16) & 255)) )));
HXDLIN(  85)												int ch28 = ::Std_obj::_hx_int(((((Float)1.) - m28) * ( (Float)(((this258 >> 8) & 255)) )));
HXDLIN(  85)												int ch38 = ::Std_obj::_hx_int(((((Float)1.) - m38) * ( (Float)((this258 & 255)) )));
HXDLIN(  85)												col8 = ((((::Math_obj::round((( (Float)(ch08) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch18) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch28) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch38) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  85)										if ((col8 != 0)) {
HXLINE(  85)											int x27 = (dx11 - rectLeft8);
HXDLIN(  85)											int y27 = (dy11 - rectTop8);
HXDLIN(  85)											int c40 = col8;
HXDLIN(  85)											bool hitQuad66;
HXDLIN(  85)											if ((((c40 >> 24) & 255) < 254)) {
HXLINE(  85)												hitQuad66 = undoImage24->transparent;
            											}
            											else {
HXLINE(  85)												hitQuad66 = false;
            											}
HXDLIN(  85)											if (hitQuad66) {
HXLINE(  85)												int location16;
HXDLIN(  85)												if (undoImage24->useVirtualPos) {
HXLINE(  85)													location16 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x27) - undoImage24->virtualX));
            												}
            												else {
HXLINE(  85)													location16 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage24->width) + x27)) ));
            												}
HXDLIN(  85)												int this263 = ::iterMagic::Iimg_obj::get(undoImage24->image,location16);
HXDLIN(  85)												int this264;
HXDLIN(  85)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)													this264 = ((((((this263 >> 24) & 255) << 24) | ((this263 & 255) << 16)) | (((this263 >> 8) & 255) << 8)) | ((this263 >> 16) & 255));
            												}
            												else {
HXLINE(  85)													this264 = this263;
            												}
HXDLIN(  85)												Float a121;
HXDLIN(  85)												int this265 = ((this264 >> 24) & 255);
HXDLIN(  85)												if ((this265 == 0)) {
HXLINE(  85)													a121 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													a121 = (( (Float)(this265) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float r118;
HXDLIN(  85)												int this266 = ((this264 >> 16) & 255);
HXDLIN(  85)												if ((this266 == 0)) {
HXLINE(  85)													r118 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													r118 = (( (Float)(this266) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float g118;
HXDLIN(  85)												int this267 = ((this264 >> 8) & 255);
HXDLIN(  85)												if ((this267 == 0)) {
HXLINE(  85)													g118 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													g118 = (( (Float)(this267) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float b122;
HXDLIN(  85)												int this268 = (this264 & 255);
HXDLIN(  85)												if ((this268 == 0)) {
HXLINE(  85)													b122 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													b122 = (( (Float)(this268) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float a219;
HXDLIN(  85)												int this269 = ((col8 >> 24) & 255);
HXDLIN(  85)												if ((this269 == 0)) {
HXLINE(  85)													a219 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													a219 = (( (Float)(this269) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float r216;
HXDLIN(  85)												int this270 = ((col8 >> 16) & 255);
HXDLIN(  85)												if ((this270 == 0)) {
HXLINE(  85)													r216 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													r216 = (( (Float)(this270) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float g216;
HXDLIN(  85)												int this271 = ((col8 >> 8) & 255);
HXDLIN(  85)												if ((this271 == 0)) {
HXLINE(  85)													g216 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													g216 = (( (Float)(this271) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float b220;
HXDLIN(  85)												int this272 = (col8 & 255);
HXDLIN(  85)												if ((this272 == 0)) {
HXLINE(  85)													b220 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													b220 = (( (Float)(this272) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float a318 = (a121 * (( (Float)(1) ) - a219));
HXDLIN(  85)												int r40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r118 * a318) + (r216 * a219))));
HXDLIN(  85)												int g40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g118 * a318) + (g216 * a219))));
HXDLIN(  85)												int b71 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b122 * a318) + (b220 * a219))));
HXDLIN(  85)												int a64 = ::Std_obj::_hx_int((( (Float)(255) ) * (a318 + a219)));
HXDLIN(  85)												int blended16 = ((((a64 << 24) | (r40 << 16)) | (g40 << 8)) | b71);
HXDLIN(  85)												{
HXLINE(  85)													int hitQuad67;
HXDLIN(  85)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)														hitQuad67 = ((((((blended16 >> 24) & 255) << 24) | ((blended16 & 255) << 16)) | (((blended16 >> 8) & 255) << 8)) | ((blended16 >> 16) & 255));
            													}
            													else {
HXLINE(  85)														hitQuad67 = blended16;
            													}
HXDLIN(  85)													::iterMagic::Iimg_obj::set(undoImage24->image,location16,hitQuad67);
            												}
            											}
            											else {
HXLINE(  85)												::Dynamic this273 = undoImage24->image;
HXDLIN(  85)												int index36;
HXDLIN(  85)												if (undoImage24->useVirtualPos) {
HXLINE(  85)													index36 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x27) - undoImage24->virtualX));
            												}
            												else {
HXLINE(  85)													index36 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage24->width) + x27)) ));
            												}
HXDLIN(  85)												int hitQuad68;
HXDLIN(  85)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)													hitQuad68 = ((((((c40 >> 24) & 255) << 24) | ((c40 & 255) << 16)) | (((c40 >> 8) & 255) << 8)) | ((c40 >> 16) & 255));
            												}
            												else {
HXLINE(  85)													hitQuad68 = c40;
            												}
HXDLIN(  85)												::iterMagic::Iimg_obj::set(this273,index36,hitQuad68);
            											}
            										}
            										else {
HXLINE(  85)											if (forceClear8) {
HXLINE(  85)												::Dynamic this274 = undoImage24->image;
HXDLIN(  85)												int x28 = (dx11 - rectLeft8);
HXDLIN(  85)												int y28 = (dy11 - rectTop8);
HXDLIN(  85)												int index37;
HXDLIN(  85)												if (undoImage24->useVirtualPos) {
HXLINE(  85)													index37 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x28) - undoImage24->virtualX));
            												}
            												else {
HXLINE(  85)													index37 = ::Std_obj::_hx_int(( (Float)(((y28 * undoImage24->width) + x28)) ));
            												}
HXDLIN(  85)												::iterMagic::Iimg_obj::set(this274,index37,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  85)				bool found8 = false;
HXDLIN(  85)				Float min60 = ( (Float)(0) );
HXDLIN(  85)				Float max = ( (Float)(0) );
HXDLIN(  85)				int a65 = 0;
HXDLIN(  85)				int r41 = 0;
HXDLIN(  85)				int g41 = 0;
HXDLIN(  85)				int b72 = 0;
HXDLIN(  85)				{
HXLINE(  85)					int _g_min16 = xIter38->start;
HXDLIN(  85)					int _g_max16 = xIter38->max;
HXDLIN(  85)					while((_g_min16 < _g_max16)){
HXLINE(  85)						_g_min16 = (_g_min16 + 1);
HXDLIN(  85)						int px7 = (_g_min16 - 1);
HXDLIN(  85)						Float pcx6 = (( (Float)(px7) ) - dx10);
HXLINE( 695)						found8 = false;
HXLINE(  85)						{
HXLINE(  85)							int _g_min17 = yIter38->start;
HXDLIN(  85)							int _g_max17 = yIter38->max;
HXDLIN(  85)							while((_g_min17 < _g_max17)){
HXLINE(  85)								_g_min17 = (_g_min17 + 1);
HXDLIN(  85)								int py7 = (_g_min17 - 1);
HXDLIN(  85)								Float pcy6 = (( (Float)(py7) ) - dy10);
HXDLIN(  85)								Float dot316 = ((pcx6 * bcx6) + (pcy6 * bcy6));
HXDLIN(  85)								Float dot326 = ((pcx6 * acx6) + (pcy6 * acy6));
HXDLIN(  85)								Float ratioA6 = (((dot226 * dot316) - (dot126 * dot326)) * denom16);
HXDLIN(  85)								Float ratioB6 = (((dot116 * dot326) - (dot126 * dot316)) * denom16);
HXDLIN(  85)								Float ratioC6 = ((((Float)1.0) - ratioB6) - ratioA6);
HXDLIN(  85)								bool hitQuad69;
HXDLIN(  85)								bool hitQuad70;
HXDLIN(  85)								if ((ratioA6 >= 0)) {
HXLINE(  85)									hitQuad70 = (ratioB6 >= 0);
            								}
            								else {
HXLINE(  85)									hitQuad70 = false;
            								}
HXDLIN(  85)								if (hitQuad70) {
HXLINE(  85)									hitQuad69 = (ratioC6 >= 0);
            								}
            								else {
HXLINE(  85)									hitQuad69 = false;
            								}
HXDLIN(  85)								if (hitQuad69) {
HXLINE( 709)									min60 = ratioA6;
HXLINE(  85)									int i78 = ::Std_obj::_hx_int(((( (Float)(aA6) ) * soft) * min60));
HXDLIN(  85)									if ((i78 > 255)) {
HXLINE(  24)										i78 = 255;
            									}
HXLINE(  85)									if ((i78 < 0)) {
HXLINE(  25)										i78 = 0;
            									}
HXLINE(  85)									a65 = i78;
HXDLIN(  85)									int i79 = ::Std_obj::_hx_int(( (Float)(rA6) ));
HXDLIN(  85)									if ((i79 > 255)) {
HXLINE(  24)										i79 = 255;
            									}
HXLINE(  85)									if ((i79 < 0)) {
HXLINE(  25)										i79 = 0;
            									}
HXLINE( 747)									r41 = i79;
HXLINE(  85)									int i80 = ::Std_obj::_hx_int(( (Float)(gA6) ));
HXDLIN(  85)									if ((i80 > 255)) {
HXLINE(  24)										i80 = 255;
            									}
HXLINE(  85)									if ((i80 < 0)) {
HXLINE(  25)										i80 = 0;
            									}
HXLINE( 748)									g41 = i80;
HXLINE(  85)									int i81 = ::Std_obj::_hx_int(( (Float)(bA6) ));
HXDLIN(  85)									if ((i81 > 255)) {
HXLINE(  24)										i81 = 255;
            									}
HXLINE(  85)									if ((i81 < 0)) {
HXLINE(  25)										i81 = 0;
            									}
HXLINE( 749)									b72 = i81;
HXLINE(  85)									{
HXLINE(  85)										int location17;
HXDLIN(  85)										if (pixelImage->useVirtualPos) {
HXLINE(  85)											location17 = ::Std_obj::_hx_int(((((( (Float)(py7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px7) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  85)											location17 = ::Std_obj::_hx_int(( (Float)(((py7 * pixelImage->width) + px7)) ));
            										}
HXDLIN(  85)										bool hitQuad71;
HXDLIN(  85)										if (pixelImage->transparent) {
HXLINE(  85)											hitQuad71 = (a65 < 254);
            										}
            										else {
HXLINE(  85)											hitQuad71 = false;
            										}
HXDLIN(  85)										if (hitQuad71) {
HXLINE(  85)											int this275 = ::iterMagic::Iimg_obj::get(pixelImage->image,location17);
HXDLIN(  85)											int old6;
HXDLIN(  85)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)												old6 = ((((((this275 >> 24) & 255) << 24) | ((this275 & 255) << 16)) | (((this275 >> 8) & 255) << 8)) | ((this275 >> 16) & 255));
            											}
            											else {
HXLINE(  85)												old6 = this275;
            											}
HXDLIN(  85)											int rhs6 = ((((a65 << 24) | (r41 << 16)) | (g41 << 8)) | b72);
HXDLIN(  85)											Float a122;
HXDLIN(  85)											int this276 = ((old6 >> 24) & 255);
HXDLIN(  85)											if ((this276 == 0)) {
HXLINE(  85)												a122 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												a122 = (( (Float)(this276) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float r119;
HXDLIN(  85)											int this277 = ((old6 >> 16) & 255);
HXDLIN(  85)											if ((this277 == 0)) {
HXLINE(  85)												r119 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												r119 = (( (Float)(this277) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float g119;
HXDLIN(  85)											int this278 = ((old6 >> 8) & 255);
HXDLIN(  85)											if ((this278 == 0)) {
HXLINE(  85)												g119 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												g119 = (( (Float)(this278) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float b123;
HXDLIN(  85)											int this279 = (old6 & 255);
HXDLIN(  85)											if ((this279 == 0)) {
HXLINE(  85)												b123 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												b123 = (( (Float)(this279) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float a220;
HXDLIN(  85)											int this280 = ((rhs6 >> 24) & 255);
HXDLIN(  85)											if ((this280 == 0)) {
HXLINE(  85)												a220 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												a220 = (( (Float)(this280) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float r217;
HXDLIN(  85)											int this281 = ((rhs6 >> 16) & 255);
HXDLIN(  85)											if ((this281 == 0)) {
HXLINE(  85)												r217 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												r217 = (( (Float)(this281) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float g217;
HXDLIN(  85)											int this282 = ((rhs6 >> 8) & 255);
HXDLIN(  85)											if ((this282 == 0)) {
HXLINE(  85)												g217 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												g217 = (( (Float)(this282) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float b221;
HXDLIN(  85)											int this283 = (rhs6 & 255);
HXDLIN(  85)											if ((this283 == 0)) {
HXLINE(  85)												b221 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												b221 = (( (Float)(this283) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float a319 = (a122 * (( (Float)(1) ) - a220));
HXDLIN(  85)											int r42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r119 * a319) + (r217 * a220))));
HXDLIN(  85)											int g42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g119 * a319) + (g217 * a220))));
HXDLIN(  85)											int b73 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b123 * a319) + (b221 * a220))));
HXDLIN(  85)											int a66 = ::Std_obj::_hx_int((( (Float)(255) ) * (a319 + a220)));
HXDLIN(  85)											int blended17 = ((((a66 << 24) | (r42 << 16)) | (g42 << 8)) | b73);
HXDLIN(  85)											{
HXLINE(  85)												int hitQuad72;
HXDLIN(  85)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)													hitQuad72 = ((((((blended17 >> 24) & 255) << 24) | ((blended17 & 255) << 16)) | (((blended17 >> 8) & 255) << 8)) | ((blended17 >> 16) & 255));
            												}
            												else {
HXLINE(  85)													hitQuad72 = blended17;
            												}
HXDLIN(  85)												::iterMagic::Iimg_obj::set(pixelImage->image,location17,hitQuad72);
            											}
            										}
            										else {
HXLINE(  85)											int value6;
HXDLIN(  85)											if (pixelImage->isLittle) {
HXLINE(  85)												value6 = ((((a65 << 24) | (b72 << 16)) | (g41 << 8)) | r41);
            											}
            											else {
HXLINE(  85)												value6 = ((((a65 << 24) | (r41 << 16)) | (g41 << 8)) | b72);
            											}
HXDLIN(  85)											::iterMagic::Iimg_obj::set(pixelImage->image,location17,value6);
            										}
            									}
HXLINE( 751)									found8 = true;
            								}
            								else {
HXLINE(  85)									if (found8) {
HXLINE(  85)										goto _hx_goto_192;
            									}
            								}
            							}
            							_hx_goto_192:;
            						}
            					}
            				}
            			}
HXDLIN(  85)			{
HXLINE(  85)				bool hasUndo9 = true;
HXDLIN(  85)				int aA7 = ((color >> 24) & 255);
HXDLIN(  85)				int rA7 = ((color >> 16) & 255);
HXDLIN(  85)				int gA7 = ((color >> 8) & 255);
HXDLIN(  85)				int bA7 = (color & 255);
HXDLIN(  85)				Float bcx7 = (cx10 - dx10);
HXDLIN(  85)				Float bcy7 = (cy10 - dy10);
HXDLIN(  85)				Float acx7 = (bx10 - dx10);
HXDLIN(  85)				Float acy7 = (by10 - dy10);
HXDLIN(  85)				Float dot117 = ((bcx7 * bcx7) + (bcy7 * bcy7));
HXDLIN(  85)				Float dot127 = ((bcx7 * acx7) + (bcy7 * acy7));
HXDLIN(  85)				Float dot227 = ((acx7 * acx7) + (acy7 * acy7));
HXDLIN(  85)				Float denom17 = (( (Float)(1) ) / ((dot117 * dot227) - (dot127 * dot127)));
HXDLIN(  85)				 ::pi_xy::iter::IntIterStart xIter39;
HXDLIN(  85)				if ((bx10 > cx10)) {
HXLINE(  85)					if ((bx10 > dx10)) {
HXLINE(  85)						int min61;
HXDLIN(  85)						if ((cx10 > dx10)) {
HXLINE(  85)							min61 = ::Math_obj::floor(dx10);
            						}
            						else {
HXLINE(  85)							min61 = ::Math_obj::floor(cx10);
            						}
HXDLIN(  85)						int ii_min120 = min61;
HXDLIN(  85)						int ii_max120 = ::Math_obj::ceil(bx10);
HXDLIN(  85)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min120,ii_max120);
            					}
            					else {
HXLINE(  85)						int ii_min121 = ::Math_obj::floor(cx10);
HXDLIN(  85)						int ii_max121 = ::Math_obj::ceil(dx10);
HXDLIN(  85)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min121,ii_max121);
            					}
            				}
            				else {
HXLINE(  85)					if ((cx10 > dx10)) {
HXLINE(  85)						int min62;
HXDLIN(  85)						if ((bx10 > dx10)) {
HXLINE(  85)							min62 = ::Math_obj::floor(dx10);
            						}
            						else {
HXLINE(  85)							min62 = ::Math_obj::ceil(bx10);
            						}
HXDLIN(  85)						int ii_min122 = min62;
HXDLIN(  85)						int ii_max122 = ::Math_obj::ceil(cx10);
HXDLIN(  85)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min122,ii_max122);
            					}
            					else {
HXLINE(  85)						int ii_min123 = ::Math_obj::floor(bx10);
HXDLIN(  85)						int ii_max123 = ::Math_obj::ceil(dx10);
HXDLIN(  85)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min123,ii_max123);
            					}
            				}
HXDLIN(  85)				 ::pi_xy::iter::IntIterStart yIter39;
HXDLIN(  85)				if ((by10 > cy10)) {
HXLINE(  85)					if ((by10 > dy10)) {
HXLINE(  85)						int min63;
HXDLIN(  85)						if ((cy10 > dy10)) {
HXLINE(  85)							min63 = ::Math_obj::floor(dy10);
            						}
            						else {
HXLINE(  85)							min63 = ::Math_obj::floor(cy10);
            						}
HXDLIN(  85)						int ii_min124 = min63;
HXDLIN(  85)						int ii_max124 = ::Math_obj::ceil(by10);
HXDLIN(  85)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min124,ii_max124);
            					}
            					else {
HXLINE(  85)						int ii_min125 = ::Math_obj::floor(cy10);
HXDLIN(  85)						int ii_max125 = ::Math_obj::ceil(dy10);
HXDLIN(  85)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min125,ii_max125);
            					}
            				}
            				else {
HXLINE(  85)					if ((cy10 > dy10)) {
HXLINE(  85)						int min64;
HXDLIN(  85)						if ((by10 > dy10)) {
HXLINE(  85)							min64 = ::Math_obj::floor(dy10);
            						}
            						else {
HXLINE(  85)							min64 = ::Math_obj::ceil(by10);
            						}
HXDLIN(  85)						int ii_min126 = min64;
HXDLIN(  85)						int ii_max126 = ::Math_obj::ceil(cy10);
HXDLIN(  85)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min126,ii_max126);
            					}
            					else {
HXLINE(  85)						int ii_min127 = ::Math_obj::floor(by10);
HXDLIN(  85)						int ii_max127 = ::Math_obj::ceil(dy10);
HXDLIN(  85)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min127,ii_max127);
            					}
            				}
HXDLIN(  85)				 ::pi_xy::ImageStruct undoImage27 = null();
HXDLIN(  85)				if (hasUndo9) {
HXLINE(  85)					int width9 = ((xIter39->max - xIter39->start) + 1);
HXDLIN(  85)					int height9 = ((yIter39->max - yIter39->start) + 1);
HXDLIN(  85)					 ::Dynamic imageType9 = null();
HXDLIN(  85)					 ::pi_xy::ImageStruct this284 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  85)					if (::hx::IsNull( imageType9 )) {
HXLINE(  54)						imageType9 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE(  85)					::Dynamic undoImage28;
HXDLIN(  85)					switch((int)(( (int)(imageType9) ))){
            						case (int)0: {
HXLINE(  85)							 ::iterMagic::BytesImg byt9 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  85)							 ::iterMagic::BytesImg b74 = byt9;
HXDLIN(  85)							{
HXLINE(  85)								b74->width = width9;
HXDLIN(  85)								b74->height = height9;
HXDLIN(  85)								b74->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  85)								b74->data = ::haxe::io::Bytes_obj::alloc((b74->length * 4));
HXDLIN(  85)								{
HXLINE(  85)									int len18 = b74->length;
HXDLIN(  85)									int w9 = 0;
HXDLIN(  85)									{
HXLINE(  85)										int _g180 = 0;
HXDLIN(  85)										int _g181 = b74->height;
HXDLIN(  85)										while((_g180 < _g181)){
HXLINE(  85)											_g180 = (_g180 + 1);
HXDLIN(  85)											int y29 = (_g180 - 1);
HXDLIN(  85)											{
HXLINE(  85)												int _g182 = 0;
HXDLIN(  85)												int _g183 = b74->width;
HXDLIN(  85)												while((_g182 < _g183)){
HXLINE(  85)													_g182 = (_g182 + 1);
HXDLIN(  85)													int x29 = (_g182 - 1);
HXDLIN(  85)													{
HXLINE(  85)														w9 = (w9 + 1);
HXDLIN(  85)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  85)													{
HXLINE(  85)														w9 = (w9 + 1);
HXDLIN(  85)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  85)													{
HXLINE(  85)														w9 = (w9 + 1);
HXDLIN(  85)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN(  85)													{
HXLINE(  85)														w9 = (w9 + 1);
HXDLIN(  85)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  85)							undoImage28 = b74;
            						}
            						break;
            						case (int)1: {
HXLINE(  85)							 ::iterMagic::ArrIntImg arrI9 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  85)							 ::iterMagic::ArrIntImg a67 = arrI9;
HXDLIN(  85)							{
HXLINE(  85)								a67->width = width9;
HXDLIN(  85)								a67->height = height9;
HXDLIN(  85)								a67->data = ::Array_obj< int >::__new(0);
HXDLIN(  85)								a67->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  85)								{
HXLINE(  85)									int _g184 = 0;
HXDLIN(  85)									int _g185 = a67->length;
HXDLIN(  85)									while((_g184 < _g185)){
HXLINE(  85)										_g184 = (_g184 + 1);
HXDLIN(  85)										int i82 = (_g184 - 1);
HXDLIN(  85)										a67->data[i82] = 0;
            									}
            								}
            							}
HXDLIN(  85)							undoImage28 = a67;
            						}
            						break;
            						case (int)2: {
HXLINE(  85)							 ::iterMagic::U32ArrImg u32a9 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  85)							 ::iterMagic::U32ArrImg b75 = u32a9;
HXDLIN(  85)							{
HXLINE(  85)								b75->width = width9;
HXDLIN(  85)								b75->height = height9;
HXDLIN(  85)								b75->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  85)								int size9 = (b75->length * 4);
HXDLIN(  85)								b75->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size9),0,size9);
HXDLIN(  85)								{
HXLINE(  85)									int _g186 = 0;
HXDLIN(  85)									int _g187 = b75->length;
HXDLIN(  85)									while((_g186 < _g187)){
HXLINE(  85)										_g186 = (_g186 + 1);
HXDLIN(  85)										int i83 = (_g186 - 1);
HXDLIN(  85)										{
HXLINE(  85)											 ::haxe::io::ArrayBufferViewImpl this285 = b75->data;
HXDLIN(  85)											bool undoImage29;
HXDLIN(  85)											if ((i83 >= 0)) {
HXLINE(  85)												undoImage29 = (i83 < (this285->byteLength >> 2));
            											}
            											else {
HXLINE(  85)												undoImage29 = false;
            											}
HXDLIN(  85)											if (undoImage29) {
HXLINE(  85)												 ::haxe::io::Bytes _this9 = this285->bytes;
HXDLIN(  85)												int pos9 = ((i83 << 2) + this285->byteOffset);
HXDLIN(  85)												_this9->b[pos9] = ( (unsigned char)(0) );
HXDLIN(  85)												_this9->b[(pos9 + 1)] = ( (unsigned char)(0) );
HXDLIN(  85)												_this9->b[(pos9 + 2)] = ( (unsigned char)(0) );
HXDLIN(  85)												_this9->b[(pos9 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN(  85)							undoImage28 = b75;
            						}
            						break;
            						case (int)3: {
HXLINE(  85)							 ::iterMagic::VecIntImg vec9 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  85)							 ::iterMagic::VecIntImg v20 = vec9;
HXDLIN(  85)							{
HXLINE(  85)								v20->width = width9;
HXDLIN(  85)								v20->height = height9;
HXDLIN(  85)								v20->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  85)								v20->data = ::Array_obj< int >::__new(v20->length);
HXDLIN(  85)								{
HXLINE(  85)									int _g188 = 0;
HXDLIN(  85)									int _g189 = v20->length;
HXDLIN(  85)									while((_g188 < _g189)){
HXLINE(  85)										_g188 = (_g188 + 1);
HXDLIN(  85)										int i84 = (_g188 - 1);
HXDLIN(  85)										v20->data->__unsafe_set(i84,0);
            									}
            								}
            							}
HXDLIN(  85)							undoImage28 = v20;
            						}
            						break;
            						case (int)4: {
HXLINE(  85)							 ::iterMagic::StackIntImg sInt9 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  85)							 ::iterMagic::StackIntImg b76 = sInt9;
HXDLIN(  85)							{
HXLINE(  85)								b76->width = width9;
HXDLIN(  85)								b76->height = height9;
HXDLIN(  85)								b76->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN(  85)								b76->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  85)								{
HXLINE(  85)									int len19 = b76->length;
HXDLIN(  85)									 ::haxe::ds::GenericStack_Int d9 = b76->data;
HXDLIN(  85)									if (::hx::IsNull( d9->head )) {
HXLINE(  85)										int _g190 = 0;
HXDLIN(  85)										int _g191 = len19;
HXDLIN(  85)										while((_g190 < _g191)){
HXLINE(  85)											_g190 = (_g190 + 1);
HXDLIN(  85)											int i85 = (_g190 - 1);
HXDLIN(  85)											d9->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d9->head);
            										}
            									}
            									else {
HXLINE(  85)										int _g192 = 0;
HXDLIN(  85)										int _g193 = len19;
HXDLIN(  85)										while((_g192 < _g193)){
HXLINE(  85)											_g192 = (_g192 + 1);
HXDLIN(  85)											int i86 = (_g192 - 1);
HXDLIN(  85)											{
HXLINE(  85)												 ::haxe::ds::GenericCell_Int l9 = b76->data->head;
HXDLIN(  85)												 ::haxe::ds::GenericCell_Int prev9 = null();
HXDLIN(  85)												{
HXLINE(  85)													int _g194 = 0;
HXDLIN(  85)													int _g195 = i86;
HXDLIN(  85)													while((_g194 < _g195)){
HXLINE(  85)														_g194 = (_g194 + 1);
HXDLIN(  85)														int i87 = (_g194 - 1);
HXLINE( 345)														prev9 = l9;
HXLINE( 346)														l9 = l9->next;
            													}
            												}
HXLINE(  85)												if (::hx::IsNull( prev9 )) {
HXLINE(  85)													b76->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN(  85)													l9 = null();
            												}
            												else {
HXLINE(  85)													prev9->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN(  85)													l9 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  85)							undoImage28 = b76;
            						}
            						break;
            					}
HXDLIN(  85)					this284->image = undoImage28;
HXDLIN(  85)					this284->width = width9;
HXDLIN(  85)					this284->height = height9;
HXDLIN(  85)					this284->imageType = ( (int)(imageType9) );
HXDLIN(  85)					undoImage27 = this284;
HXDLIN(  85)					{
HXLINE(  85)						int rectLeft9 = xIter39->start;
HXDLIN(  85)						int rectTop9 = yIter39->start;
HXDLIN(  85)						int rectRight9 = xIter39->max;
HXDLIN(  85)						bool forceClear9 = false;
HXDLIN(  85)						{
HXLINE(  85)							int _g196 = rectTop9;
HXDLIN(  85)							int _g197 = yIter39->max;
HXDLIN(  85)							while((_g196 < _g197)){
HXLINE(  85)								_g196 = (_g196 + 1);
HXDLIN(  85)								int dy12 = (_g196 - 1);
HXDLIN(  85)								{
HXLINE(  85)									int _g198 = rectLeft9;
HXDLIN(  85)									int _g199 = rectRight9;
HXDLIN(  85)									while((_g198 < _g199)){
HXLINE(  85)										_g198 = (_g198 + 1);
HXDLIN(  85)										int dx12 = (_g198 - 1);
HXDLIN(  85)										::Dynamic this286 = pixelImage->image;
HXDLIN(  85)										int index38;
HXDLIN(  85)										if (pixelImage->useVirtualPos) {
HXLINE(  85)											index38 = ::Std_obj::_hx_int(((((( (Float)(dy12) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx12) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  85)											index38 = ::Std_obj::_hx_int(( (Float)(((dy12 * pixelImage->width) + dx12)) ));
            										}
HXDLIN(  85)										int c41 = ::iterMagic::Iimg_obj::get(this286,index38);
HXDLIN(  85)										int col9;
HXDLIN(  85)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)											col9 = ((((((c41 >> 24) & 255) << 24) | ((c41 & 255) << 16)) | (((c41 >> 8) & 255) << 8)) | ((c41 >> 16) & 255));
            										}
            										else {
HXLINE(  85)											col9 = c41;
            										}
HXDLIN(  85)										bool hitQuad73;
HXDLIN(  85)										if (pixelImage->useMask) {
HXLINE(  85)											hitQuad73 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE(  85)											hitQuad73 = false;
            										}
HXDLIN(  85)										if (hitQuad73) {
HXLINE(  85)											 ::pi_xy::ImageStruct this287 = pixelImage->mask;
HXDLIN(  85)											::Dynamic this288 = this287->image;
HXDLIN(  85)											int index39;
HXDLIN(  85)											if (this287->useVirtualPos) {
HXLINE(  85)												index39 = ::Std_obj::_hx_int(((((( (Float)(dy12) ) - this287->virtualY) * ( (Float)(this287->width) )) + dx12) - this287->virtualX));
            											}
            											else {
HXLINE(  85)												index39 = ::Std_obj::_hx_int(( (Float)(((dy12 * this287->width) + dx12)) ));
            											}
HXDLIN(  85)											int c42 = ::iterMagic::Iimg_obj::get(this288,index39);
HXDLIN(  85)											int v21;
HXDLIN(  85)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)												v21 = ((((((c42 >> 24) & 255) << 24) | ((c42 & 255) << 16)) | (((c42 >> 8) & 255) << 8)) | ((c42 >> 16) & 255));
            											}
            											else {
HXLINE(  85)												v21 = c42;
            											}
HXDLIN(  85)											int maskPixel9 = v21;
HXDLIN(  85)											int this289 = col9;
HXDLIN(  85)											if ((maskPixel9 == 0)) {
HXLINE(  85)												col9 = this289;
            											}
            											else {
HXLINE(  85)												Float m09;
HXDLIN(  85)												int this290 = ((maskPixel9 >> 24) & 255);
HXDLIN(  85)												if ((this290 == 0)) {
HXLINE(  85)													m09 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													m09 = (( (Float)(this290) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float m19;
HXDLIN(  85)												int this291 = ((maskPixel9 >> 16) & 255);
HXDLIN(  85)												if ((this291 == 0)) {
HXLINE(  85)													m19 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													m19 = (( (Float)(this291) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float m29;
HXDLIN(  85)												int this292 = ((maskPixel9 >> 8) & 255);
HXDLIN(  85)												if ((this292 == 0)) {
HXLINE(  85)													m29 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													m29 = (( (Float)(this292) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float m39;
HXDLIN(  85)												int this293 = (maskPixel9 & 255);
HXDLIN(  85)												if ((this293 == 0)) {
HXLINE(  85)													m39 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													m39 = (( (Float)(this293) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												int ch09 = ::Std_obj::_hx_int(((((Float)1.) - m09) * ( (Float)(((this289 >> 24) & 255)) )));
HXDLIN(  85)												int ch19 = ::Std_obj::_hx_int(((((Float)1.) - m19) * ( (Float)(((this289 >> 16) & 255)) )));
HXDLIN(  85)												int ch29 = ::Std_obj::_hx_int(((((Float)1.) - m29) * ( (Float)(((this289 >> 8) & 255)) )));
HXDLIN(  85)												int ch39 = ::Std_obj::_hx_int(((((Float)1.) - m39) * ( (Float)((this289 & 255)) )));
HXDLIN(  85)												col9 = ((((::Math_obj::round((( (Float)(ch09) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch19) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch29) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch39) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  85)										if ((col9 != 0)) {
HXLINE(  85)											int x30 = (dx12 - rectLeft9);
HXDLIN(  85)											int y30 = (dy12 - rectTop9);
HXDLIN(  85)											int c43 = col9;
HXDLIN(  85)											bool hitQuad74;
HXDLIN(  85)											if ((((c43 >> 24) & 255) < 254)) {
HXLINE(  85)												hitQuad74 = undoImage27->transparent;
            											}
            											else {
HXLINE(  85)												hitQuad74 = false;
            											}
HXDLIN(  85)											if (hitQuad74) {
HXLINE(  85)												int location18;
HXDLIN(  85)												if (undoImage27->useVirtualPos) {
HXLINE(  85)													location18 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x30) - undoImage27->virtualX));
            												}
            												else {
HXLINE(  85)													location18 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage27->width) + x30)) ));
            												}
HXDLIN(  85)												int this294 = ::iterMagic::Iimg_obj::get(undoImage27->image,location18);
HXDLIN(  85)												int this295;
HXDLIN(  85)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)													this295 = ((((((this294 >> 24) & 255) << 24) | ((this294 & 255) << 16)) | (((this294 >> 8) & 255) << 8)) | ((this294 >> 16) & 255));
            												}
            												else {
HXLINE(  85)													this295 = this294;
            												}
HXDLIN(  85)												Float a123;
HXDLIN(  85)												int this296 = ((this295 >> 24) & 255);
HXDLIN(  85)												if ((this296 == 0)) {
HXLINE(  85)													a123 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													a123 = (( (Float)(this296) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float r120;
HXDLIN(  85)												int this297 = ((this295 >> 16) & 255);
HXDLIN(  85)												if ((this297 == 0)) {
HXLINE(  85)													r120 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													r120 = (( (Float)(this297) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float g120;
HXDLIN(  85)												int this298 = ((this295 >> 8) & 255);
HXDLIN(  85)												if ((this298 == 0)) {
HXLINE(  85)													g120 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													g120 = (( (Float)(this298) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float b124;
HXDLIN(  85)												int this299 = (this295 & 255);
HXDLIN(  85)												if ((this299 == 0)) {
HXLINE(  85)													b124 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													b124 = (( (Float)(this299) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float a221;
HXDLIN(  85)												int this300 = ((col9 >> 24) & 255);
HXDLIN(  85)												if ((this300 == 0)) {
HXLINE(  85)													a221 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													a221 = (( (Float)(this300) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float r218;
HXDLIN(  85)												int this301 = ((col9 >> 16) & 255);
HXDLIN(  85)												if ((this301 == 0)) {
HXLINE(  85)													r218 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													r218 = (( (Float)(this301) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float g218;
HXDLIN(  85)												int this302 = ((col9 >> 8) & 255);
HXDLIN(  85)												if ((this302 == 0)) {
HXLINE(  85)													g218 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													g218 = (( (Float)(this302) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float b222;
HXDLIN(  85)												int this303 = (col9 & 255);
HXDLIN(  85)												if ((this303 == 0)) {
HXLINE(  85)													b222 = ((Float)0.);
            												}
            												else {
HXLINE(  85)													b222 = (( (Float)(this303) ) / ( (Float)(255) ));
            												}
HXDLIN(  85)												Float a320 = (a123 * (( (Float)(1) ) - a221));
HXDLIN(  85)												int r43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r120 * a320) + (r218 * a221))));
HXDLIN(  85)												int g43 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g120 * a320) + (g218 * a221))));
HXDLIN(  85)												int b77 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b124 * a320) + (b222 * a221))));
HXDLIN(  85)												int a68 = ::Std_obj::_hx_int((( (Float)(255) ) * (a320 + a221)));
HXDLIN(  85)												int blended18 = ((((a68 << 24) | (r43 << 16)) | (g43 << 8)) | b77);
HXDLIN(  85)												{
HXLINE(  85)													int hitQuad75;
HXDLIN(  85)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)														hitQuad75 = ((((((blended18 >> 24) & 255) << 24) | ((blended18 & 255) << 16)) | (((blended18 >> 8) & 255) << 8)) | ((blended18 >> 16) & 255));
            													}
            													else {
HXLINE(  85)														hitQuad75 = blended18;
            													}
HXDLIN(  85)													::iterMagic::Iimg_obj::set(undoImage27->image,location18,hitQuad75);
            												}
            											}
            											else {
HXLINE(  85)												::Dynamic this304 = undoImage27->image;
HXDLIN(  85)												int index40;
HXDLIN(  85)												if (undoImage27->useVirtualPos) {
HXLINE(  85)													index40 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x30) - undoImage27->virtualX));
            												}
            												else {
HXLINE(  85)													index40 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage27->width) + x30)) ));
            												}
HXDLIN(  85)												int hitQuad76;
HXDLIN(  85)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)													hitQuad76 = ((((((c43 >> 24) & 255) << 24) | ((c43 & 255) << 16)) | (((c43 >> 8) & 255) << 8)) | ((c43 >> 16) & 255));
            												}
            												else {
HXLINE(  85)													hitQuad76 = c43;
            												}
HXDLIN(  85)												::iterMagic::Iimg_obj::set(this304,index40,hitQuad76);
            											}
            										}
            										else {
HXLINE(  85)											if (forceClear9) {
HXLINE(  85)												::Dynamic this305 = undoImage27->image;
HXDLIN(  85)												int x31 = (dx12 - rectLeft9);
HXDLIN(  85)												int y31 = (dy12 - rectTop9);
HXDLIN(  85)												int index41;
HXDLIN(  85)												if (undoImage27->useVirtualPos) {
HXLINE(  85)													index41 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x31) - undoImage27->virtualX));
            												}
            												else {
HXLINE(  85)													index41 = ::Std_obj::_hx_int(( (Float)(((y31 * undoImage27->width) + x31)) ));
            												}
HXDLIN(  85)												::iterMagic::Iimg_obj::set(this305,index41,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  85)				bool found9 = false;
HXDLIN(  85)				Float min65 = ( (Float)(0) );
HXDLIN(  85)				Float max1 = ( (Float)(0) );
HXDLIN(  85)				int a69 = 0;
HXDLIN(  85)				int r44 = 0;
HXDLIN(  85)				int g44 = 0;
HXDLIN(  85)				int b78 = 0;
HXDLIN(  85)				{
HXLINE(  85)					int _g_min18 = xIter39->start;
HXDLIN(  85)					int _g_max18 = xIter39->max;
HXDLIN(  85)					while((_g_min18 < _g_max18)){
HXLINE(  85)						_g_min18 = (_g_min18 + 1);
HXDLIN(  85)						int px8 = (_g_min18 - 1);
HXDLIN(  85)						Float pcx7 = (( (Float)(px8) ) - dx10);
HXLINE( 695)						found9 = false;
HXLINE(  85)						{
HXLINE(  85)							int _g_min19 = yIter39->start;
HXDLIN(  85)							int _g_max19 = yIter39->max;
HXDLIN(  85)							while((_g_min19 < _g_max19)){
HXLINE(  85)								_g_min19 = (_g_min19 + 1);
HXDLIN(  85)								int py8 = (_g_min19 - 1);
HXDLIN(  85)								Float pcy7 = (( (Float)(py8) ) - dy10);
HXDLIN(  85)								Float dot317 = ((pcx7 * bcx7) + (pcy7 * bcy7));
HXDLIN(  85)								Float dot327 = ((pcx7 * acx7) + (pcy7 * acy7));
HXDLIN(  85)								Float ratioA7 = (((dot227 * dot317) - (dot127 * dot327)) * denom17);
HXDLIN(  85)								Float ratioB7 = (((dot117 * dot327) - (dot127 * dot317)) * denom17);
HXDLIN(  85)								Float ratioC7 = ((((Float)1.0) - ratioB7) - ratioA7);
HXDLIN(  85)								bool hitQuad77;
HXDLIN(  85)								bool hitQuad78;
HXDLIN(  85)								if ((ratioA7 >= 0)) {
HXLINE(  85)									hitQuad78 = (ratioB7 >= 0);
            								}
            								else {
HXLINE(  85)									hitQuad78 = false;
            								}
HXDLIN(  85)								if (hitQuad78) {
HXLINE(  85)									hitQuad77 = (ratioC7 >= 0);
            								}
            								else {
HXLINE(  85)									hitQuad77 = false;
            								}
HXDLIN(  85)								if (hitQuad77) {
HXLINE(  85)									if ((ratioB7 < ratioC7)) {
HXLINE(  85)										min65 = ratioB7;
            									}
            									else {
HXLINE(  85)										min65 = ratioC7;
            									}
HXDLIN(  85)									if ((ratioA7 > ratioB7)) {
HXLINE(  85)										max1 = ratioA7;
            									}
            									else {
HXLINE(  85)										max1 = ratioB7;
            									}
HXDLIN(  85)									if (!((max1 > ratioC7))) {
HXLINE(  85)										max1 = ratioC7;
            									}
HXLINE( 735)									max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE(  85)									if (!((min65 < max1))) {
HXLINE(  85)										min65 = ((max1 + min65) / ( (Float)(2) ));
            									}
HXDLIN(  85)									int i88 = ::Std_obj::_hx_int(((( (Float)(aA7) ) * soft) * min65));
HXDLIN(  85)									if ((i88 > 255)) {
HXLINE(  24)										i88 = 255;
            									}
HXLINE(  85)									if ((i88 < 0)) {
HXLINE(  25)										i88 = 0;
            									}
HXLINE(  85)									a69 = i88;
HXDLIN(  85)									int i89 = ::Std_obj::_hx_int(( (Float)(rA7) ));
HXDLIN(  85)									if ((i89 > 255)) {
HXLINE(  24)										i89 = 255;
            									}
HXLINE(  85)									if ((i89 < 0)) {
HXLINE(  25)										i89 = 0;
            									}
HXLINE( 747)									r44 = i89;
HXLINE(  85)									int i90 = ::Std_obj::_hx_int(( (Float)(gA7) ));
HXDLIN(  85)									if ((i90 > 255)) {
HXLINE(  24)										i90 = 255;
            									}
HXLINE(  85)									if ((i90 < 0)) {
HXLINE(  25)										i90 = 0;
            									}
HXLINE( 748)									g44 = i90;
HXLINE(  85)									int i91 = ::Std_obj::_hx_int(( (Float)(bA7) ));
HXDLIN(  85)									if ((i91 > 255)) {
HXLINE(  24)										i91 = 255;
            									}
HXLINE(  85)									if ((i91 < 0)) {
HXLINE(  25)										i91 = 0;
            									}
HXLINE( 749)									b78 = i91;
HXLINE(  85)									{
HXLINE(  85)										int location19;
HXDLIN(  85)										if (pixelImage->useVirtualPos) {
HXLINE(  85)											location19 = ::Std_obj::_hx_int(((((( (Float)(py8) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px8) - pixelImage->virtualX));
            										}
            										else {
HXLINE(  85)											location19 = ::Std_obj::_hx_int(( (Float)(((py8 * pixelImage->width) + px8)) ));
            										}
HXDLIN(  85)										bool hitQuad79;
HXDLIN(  85)										if (pixelImage->transparent) {
HXLINE(  85)											hitQuad79 = (a69 < 254);
            										}
            										else {
HXLINE(  85)											hitQuad79 = false;
            										}
HXDLIN(  85)										if (hitQuad79) {
HXLINE(  85)											int this306 = ::iterMagic::Iimg_obj::get(pixelImage->image,location19);
HXDLIN(  85)											int old7;
HXDLIN(  85)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)												old7 = ((((((this306 >> 24) & 255) << 24) | ((this306 & 255) << 16)) | (((this306 >> 8) & 255) << 8)) | ((this306 >> 16) & 255));
            											}
            											else {
HXLINE(  85)												old7 = this306;
            											}
HXDLIN(  85)											int rhs7 = ((((a69 << 24) | (r44 << 16)) | (g44 << 8)) | b78);
HXDLIN(  85)											Float a124;
HXDLIN(  85)											int this307 = ((old7 >> 24) & 255);
HXDLIN(  85)											if ((this307 == 0)) {
HXLINE(  85)												a124 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												a124 = (( (Float)(this307) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float r121;
HXDLIN(  85)											int this308 = ((old7 >> 16) & 255);
HXDLIN(  85)											if ((this308 == 0)) {
HXLINE(  85)												r121 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												r121 = (( (Float)(this308) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float g121;
HXDLIN(  85)											int this309 = ((old7 >> 8) & 255);
HXDLIN(  85)											if ((this309 == 0)) {
HXLINE(  85)												g121 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												g121 = (( (Float)(this309) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float b125;
HXDLIN(  85)											int this310 = (old7 & 255);
HXDLIN(  85)											if ((this310 == 0)) {
HXLINE(  85)												b125 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												b125 = (( (Float)(this310) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float a222;
HXDLIN(  85)											int this311 = ((rhs7 >> 24) & 255);
HXDLIN(  85)											if ((this311 == 0)) {
HXLINE(  85)												a222 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												a222 = (( (Float)(this311) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float r219;
HXDLIN(  85)											int this312 = ((rhs7 >> 16) & 255);
HXDLIN(  85)											if ((this312 == 0)) {
HXLINE(  85)												r219 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												r219 = (( (Float)(this312) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float g219;
HXDLIN(  85)											int this313 = ((rhs7 >> 8) & 255);
HXDLIN(  85)											if ((this313 == 0)) {
HXLINE(  85)												g219 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												g219 = (( (Float)(this313) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float b223;
HXDLIN(  85)											int this314 = (rhs7 & 255);
HXDLIN(  85)											if ((this314 == 0)) {
HXLINE(  85)												b223 = ((Float)0.);
            											}
            											else {
HXLINE(  85)												b223 = (( (Float)(this314) ) / ( (Float)(255) ));
            											}
HXDLIN(  85)											Float a321 = (a124 * (( (Float)(1) ) - a222));
HXDLIN(  85)											int r45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r121 * a321) + (r219 * a222))));
HXDLIN(  85)											int g45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g121 * a321) + (g219 * a222))));
HXDLIN(  85)											int b79 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b125 * a321) + (b223 * a222))));
HXDLIN(  85)											int a70 = ::Std_obj::_hx_int((( (Float)(255) ) * (a321 + a222)));
HXDLIN(  85)											int blended19 = ((((a70 << 24) | (r45 << 16)) | (g45 << 8)) | b79);
HXDLIN(  85)											{
HXLINE(  85)												int hitQuad80;
HXDLIN(  85)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)													hitQuad80 = ((((((blended19 >> 24) & 255) << 24) | ((blended19 & 255) << 16)) | (((blended19 >> 8) & 255) << 8)) | ((blended19 >> 16) & 255));
            												}
            												else {
HXLINE(  85)													hitQuad80 = blended19;
            												}
HXDLIN(  85)												::iterMagic::Iimg_obj::set(pixelImage->image,location19,hitQuad80);
            											}
            										}
            										else {
HXLINE(  85)											int value7;
HXDLIN(  85)											if (pixelImage->isLittle) {
HXLINE(  85)												value7 = ((((a69 << 24) | (b78 << 16)) | (g44 << 8)) | r44);
            											}
            											else {
HXLINE(  85)												value7 = ((((a69 << 24) | (r44 << 16)) | (g44 << 8)) | b78);
            											}
HXDLIN(  85)											::iterMagic::Iimg_obj::set(pixelImage->image,location19,value7);
            										}
            									}
HXLINE( 751)									found9 = true;
            								}
            								else {
HXLINE(  85)									if (found9) {
HXLINE(  85)										goto _hx_goto_204;
            									}
            								}
            							}
            							_hx_goto_204:;
            						}
            					}
            				}
            			}
HXDLIN(  85)			 ::pi_xy::algo::HitQuad v22 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax8,ay8,bx10,by10,cx10,cy10,dx10,dy10,true);
HXLINE(  78)			hitQuad = v22;
            		}
HXLINE(  87)		Float cx11 = h2;
HXLINE(  88)		Float cy11 = radius2;
HXLINE(  89)		Float bx11 = h2;
HXLINE(  90)		Float by11 = -(radius2);
HXLINE(  91)		Float temp3 = ((Float)0.);
HXLINE(  92)		temp3 = (px + ((bx11 * cos) - (by11 * sin)));
HXLINE(  93)		by11 = (py + ((by11 * cos) + (bx11 * sin)));
HXLINE(  94)		bx11 = temp3;
HXLINE(  95)		temp3 = (px + ((cx11 * cos) - (cy11 * sin)));
HXLINE(  96)		cy11 = (py + ((cy11 * cos) + (cx11 * sin)));
HXLINE(  97)		cx11 = temp3;
HXLINE(  98)		bool hasUndo10 = true;
HXDLIN(  98)		int aA8 = ((color >> 24) & 255);
HXDLIN(  98)		int rA8 = ((color >> 16) & 255);
HXDLIN(  98)		int gA8 = ((color >> 8) & 255);
HXDLIN(  98)		int bA8 = (color & 255);
HXDLIN(  98)		Float bcx8 = (bx11 - cx11);
HXDLIN(  98)		Float bcy8 = (by11 - cy11);
HXDLIN(  98)		Float acx8 = (qx - cx11);
HXDLIN(  98)		Float acy8 = (qy - cy11);
HXDLIN(  98)		Float dot118 = ((bcx8 * bcx8) + (bcy8 * bcy8));
HXDLIN(  98)		Float dot128 = ((bcx8 * acx8) + (bcy8 * acy8));
HXDLIN(  98)		Float dot228 = ((acx8 * acx8) + (acy8 * acy8));
HXDLIN(  98)		Float denom18 = (( (Float)(1) ) / ((dot118 * dot228) - (dot128 * dot128)));
HXDLIN(  98)		 ::pi_xy::iter::IntIterStart xIter310;
HXDLIN(  98)		if ((qx > bx11)) {
HXLINE(  98)			if ((qx > cx11)) {
HXLINE(  98)				int min66;
HXDLIN(  98)				if ((bx11 > cx11)) {
HXLINE(  98)					min66 = ::Math_obj::floor(cx11);
            				}
            				else {
HXLINE(  98)					min66 = ::Math_obj::floor(bx11);
            				}
HXDLIN(  98)				int ii_min128 = min66;
HXDLIN(  98)				int ii_max128 = ::Math_obj::ceil(qx);
HXDLIN(  98)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min128,ii_max128);
            			}
            			else {
HXLINE(  98)				int ii_min129 = ::Math_obj::floor(bx11);
HXDLIN(  98)				int ii_max129 = ::Math_obj::ceil(cx11);
HXDLIN(  98)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min129,ii_max129);
            			}
            		}
            		else {
HXLINE(  98)			if ((bx11 > cx11)) {
HXLINE(  98)				int min67;
HXDLIN(  98)				if ((qx > cx11)) {
HXLINE(  98)					min67 = ::Math_obj::floor(cx11);
            				}
            				else {
HXLINE(  98)					min67 = ::Math_obj::ceil(qx);
            				}
HXDLIN(  98)				int ii_min130 = min67;
HXDLIN(  98)				int ii_max130 = ::Math_obj::ceil(bx11);
HXDLIN(  98)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min130,ii_max130);
            			}
            			else {
HXLINE(  98)				int ii_min131 = ::Math_obj::floor(qx);
HXDLIN(  98)				int ii_max131 = ::Math_obj::ceil(cx11);
HXDLIN(  98)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min131,ii_max131);
            			}
            		}
HXDLIN(  98)		 ::pi_xy::iter::IntIterStart yIter310;
HXDLIN(  98)		if ((qy > by11)) {
HXLINE(  98)			if ((qy > cy11)) {
HXLINE(  98)				int min68;
HXDLIN(  98)				if ((by11 > cy11)) {
HXLINE(  98)					min68 = ::Math_obj::floor(cy11);
            				}
            				else {
HXLINE(  98)					min68 = ::Math_obj::floor(by11);
            				}
HXDLIN(  98)				int ii_min132 = min68;
HXDLIN(  98)				int ii_max132 = ::Math_obj::ceil(qy);
HXDLIN(  98)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min132,ii_max132);
            			}
            			else {
HXLINE(  98)				int ii_min133 = ::Math_obj::floor(by11);
HXDLIN(  98)				int ii_max133 = ::Math_obj::ceil(cy11);
HXDLIN(  98)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min133,ii_max133);
            			}
            		}
            		else {
HXLINE(  98)			if ((by11 > cy11)) {
HXLINE(  98)				int min69;
HXDLIN(  98)				if ((qy > cy11)) {
HXLINE(  98)					min69 = ::Math_obj::floor(cy11);
            				}
            				else {
HXLINE(  98)					min69 = ::Math_obj::ceil(qy);
            				}
HXDLIN(  98)				int ii_min134 = min69;
HXDLIN(  98)				int ii_max134 = ::Math_obj::ceil(by11);
HXDLIN(  98)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min134,ii_max134);
            			}
            			else {
HXLINE(  98)				int ii_min135 = ::Math_obj::floor(qy);
HXDLIN(  98)				int ii_max135 = ::Math_obj::ceil(cy11);
HXDLIN(  98)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min135,ii_max135);
            			}
            		}
HXDLIN(  98)		 ::pi_xy::ImageStruct undoImage30 = null();
HXDLIN(  98)		if (hasUndo10) {
HXLINE(  98)			int width10 = ((xIter310->max - xIter310->start) + 1);
HXDLIN(  98)			int height10 = ((yIter310->max - yIter310->start) + 1);
HXDLIN(  98)			 ::Dynamic imageType10 = null();
HXDLIN(  98)			 ::pi_xy::ImageStruct this315 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN(  98)			if (::hx::IsNull( imageType10 )) {
HXLINE(  54)				imageType10 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE(  98)			::Dynamic undoImage31;
HXDLIN(  98)			switch((int)(( (int)(imageType10) ))){
            				case (int)0: {
HXLINE(  98)					 ::iterMagic::BytesImg byt10 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN(  98)					 ::iterMagic::BytesImg b80 = byt10;
HXDLIN(  98)					{
HXLINE(  98)						b80->width = width10;
HXDLIN(  98)						b80->height = height10;
HXDLIN(  98)						b80->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN(  98)						b80->data = ::haxe::io::Bytes_obj::alloc((b80->length * 4));
HXDLIN(  98)						{
HXLINE(  98)							int len20 = b80->length;
HXDLIN(  98)							int w10 = 0;
HXDLIN(  98)							{
HXLINE(  98)								int _g200 = 0;
HXDLIN(  98)								int _g201 = b80->height;
HXDLIN(  98)								while((_g200 < _g201)){
HXLINE(  98)									_g200 = (_g200 + 1);
HXDLIN(  98)									int y32 = (_g200 - 1);
HXDLIN(  98)									{
HXLINE(  98)										int _g202 = 0;
HXDLIN(  98)										int _g203 = b80->width;
HXDLIN(  98)										while((_g202 < _g203)){
HXLINE(  98)											_g202 = (_g202 + 1);
HXDLIN(  98)											int x32 = (_g202 - 1);
HXDLIN(  98)											{
HXLINE(  98)												w10 = (w10 + 1);
HXDLIN(  98)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  98)											{
HXLINE(  98)												w10 = (w10 + 1);
HXDLIN(  98)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  98)											{
HXLINE(  98)												w10 = (w10 + 1);
HXDLIN(  98)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN(  98)											{
HXLINE(  98)												w10 = (w10 + 1);
HXDLIN(  98)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  98)					undoImage31 = b80;
            				}
            				break;
            				case (int)1: {
HXLINE(  98)					 ::iterMagic::ArrIntImg arrI10 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN(  98)					 ::iterMagic::ArrIntImg a71 = arrI10;
HXDLIN(  98)					{
HXLINE(  98)						a71->width = width10;
HXDLIN(  98)						a71->height = height10;
HXDLIN(  98)						a71->data = ::Array_obj< int >::__new(0);
HXDLIN(  98)						a71->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN(  98)						{
HXLINE(  98)							int _g204 = 0;
HXDLIN(  98)							int _g205 = a71->length;
HXDLIN(  98)							while((_g204 < _g205)){
HXLINE(  98)								_g204 = (_g204 + 1);
HXDLIN(  98)								int i92 = (_g204 - 1);
HXDLIN(  98)								a71->data[i92] = 0;
            							}
            						}
            					}
HXDLIN(  98)					undoImage31 = a71;
            				}
            				break;
            				case (int)2: {
HXLINE(  98)					 ::iterMagic::U32ArrImg u32a10 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN(  98)					 ::iterMagic::U32ArrImg b81 = u32a10;
HXDLIN(  98)					{
HXLINE(  98)						b81->width = width10;
HXDLIN(  98)						b81->height = height10;
HXDLIN(  98)						b81->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN(  98)						int size10 = (b81->length * 4);
HXDLIN(  98)						b81->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size10),0,size10);
HXDLIN(  98)						{
HXLINE(  98)							int _g206 = 0;
HXDLIN(  98)							int _g207 = b81->length;
HXDLIN(  98)							while((_g206 < _g207)){
HXLINE(  98)								_g206 = (_g206 + 1);
HXDLIN(  98)								int i93 = (_g206 - 1);
HXDLIN(  98)								{
HXLINE(  98)									 ::haxe::io::ArrayBufferViewImpl this316 = b81->data;
HXDLIN(  98)									bool undoImage32;
HXDLIN(  98)									if ((i93 >= 0)) {
HXLINE(  98)										undoImage32 = (i93 < (this316->byteLength >> 2));
            									}
            									else {
HXLINE(  98)										undoImage32 = false;
            									}
HXDLIN(  98)									if (undoImage32) {
HXLINE(  98)										 ::haxe::io::Bytes _this10 = this316->bytes;
HXDLIN(  98)										int pos10 = ((i93 << 2) + this316->byteOffset);
HXDLIN(  98)										_this10->b[pos10] = ( (unsigned char)(0) );
HXDLIN(  98)										_this10->b[(pos10 + 1)] = ( (unsigned char)(0) );
HXDLIN(  98)										_this10->b[(pos10 + 2)] = ( (unsigned char)(0) );
HXDLIN(  98)										_this10->b[(pos10 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN(  98)					undoImage31 = b81;
            				}
            				break;
            				case (int)3: {
HXLINE(  98)					 ::iterMagic::VecIntImg vec10 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN(  98)					 ::iterMagic::VecIntImg v23 = vec10;
HXDLIN(  98)					{
HXLINE(  98)						v23->width = width10;
HXDLIN(  98)						v23->height = height10;
HXDLIN(  98)						v23->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN(  98)						v23->data = ::Array_obj< int >::__new(v23->length);
HXDLIN(  98)						{
HXLINE(  98)							int _g208 = 0;
HXDLIN(  98)							int _g209 = v23->length;
HXDLIN(  98)							while((_g208 < _g209)){
HXLINE(  98)								_g208 = (_g208 + 1);
HXDLIN(  98)								int i94 = (_g208 - 1);
HXDLIN(  98)								v23->data->__unsafe_set(i94,0);
            							}
            						}
            					}
HXDLIN(  98)					undoImage31 = v23;
            				}
            				break;
            				case (int)4: {
HXLINE(  98)					 ::iterMagic::StackIntImg sInt10 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN(  98)					 ::iterMagic::StackIntImg b82 = sInt10;
HXDLIN(  98)					{
HXLINE(  98)						b82->width = width10;
HXDLIN(  98)						b82->height = height10;
HXDLIN(  98)						b82->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN(  98)						b82->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN(  98)						{
HXLINE(  98)							int len21 = b82->length;
HXDLIN(  98)							 ::haxe::ds::GenericStack_Int d10 = b82->data;
HXDLIN(  98)							if (::hx::IsNull( d10->head )) {
HXLINE(  98)								int _g210 = 0;
HXDLIN(  98)								int _g211 = len21;
HXDLIN(  98)								while((_g210 < _g211)){
HXLINE(  98)									_g210 = (_g210 + 1);
HXDLIN(  98)									int i95 = (_g210 - 1);
HXDLIN(  98)									d10->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d10->head);
            								}
            							}
            							else {
HXLINE(  98)								int _g212 = 0;
HXDLIN(  98)								int _g213 = len21;
HXDLIN(  98)								while((_g212 < _g213)){
HXLINE(  98)									_g212 = (_g212 + 1);
HXDLIN(  98)									int i96 = (_g212 - 1);
HXDLIN(  98)									{
HXLINE(  98)										 ::haxe::ds::GenericCell_Int l10 = b82->data->head;
HXDLIN(  98)										 ::haxe::ds::GenericCell_Int prev10 = null();
HXDLIN(  98)										{
HXLINE(  98)											int _g214 = 0;
HXDLIN(  98)											int _g215 = i96;
HXDLIN(  98)											while((_g214 < _g215)){
HXLINE(  98)												_g214 = (_g214 + 1);
HXDLIN(  98)												int i97 = (_g214 - 1);
HXLINE( 345)												prev10 = l10;
HXLINE( 346)												l10 = l10->next;
            											}
            										}
HXLINE(  98)										if (::hx::IsNull( prev10 )) {
HXLINE(  98)											b82->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l10->next);
HXDLIN(  98)											l10 = null();
            										}
            										else {
HXLINE(  98)											prev10->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l10->next);
HXDLIN(  98)											l10 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  98)					undoImage31 = b82;
            				}
            				break;
            			}
HXDLIN(  98)			this315->image = undoImage31;
HXDLIN(  98)			this315->width = width10;
HXDLIN(  98)			this315->height = height10;
HXDLIN(  98)			this315->imageType = ( (int)(imageType10) );
HXDLIN(  98)			undoImage30 = this315;
HXDLIN(  98)			{
HXLINE(  98)				int rectLeft10 = xIter310->start;
HXDLIN(  98)				int rectTop10 = yIter310->start;
HXDLIN(  98)				int rectRight10 = xIter310->max;
HXDLIN(  98)				bool forceClear10 = false;
HXDLIN(  98)				{
HXLINE(  98)					int _g216 = rectTop10;
HXDLIN(  98)					int _g217 = yIter310->max;
HXDLIN(  98)					while((_g216 < _g217)){
HXLINE(  98)						_g216 = (_g216 + 1);
HXDLIN(  98)						int dy13 = (_g216 - 1);
HXDLIN(  98)						{
HXLINE(  98)							int _g218 = rectLeft10;
HXDLIN(  98)							int _g219 = rectRight10;
HXDLIN(  98)							while((_g218 < _g219)){
HXLINE(  98)								_g218 = (_g218 + 1);
HXDLIN(  98)								int dx13 = (_g218 - 1);
HXDLIN(  98)								::Dynamic this317 = pixelImage->image;
HXDLIN(  98)								int index42;
HXDLIN(  98)								if (pixelImage->useVirtualPos) {
HXLINE(  98)									index42 = ::Std_obj::_hx_int(((((( (Float)(dy13) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx13) - pixelImage->virtualX));
            								}
            								else {
HXLINE(  98)									index42 = ::Std_obj::_hx_int(( (Float)(((dy13 * pixelImage->width) + dx13)) ));
            								}
HXDLIN(  98)								int c44 = ::iterMagic::Iimg_obj::get(this317,index42);
HXDLIN(  98)								int col10;
HXDLIN(  98)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)									col10 = ((((((c44 >> 24) & 255) << 24) | ((c44 & 255) << 16)) | (((c44 >> 8) & 255) << 8)) | ((c44 >> 16) & 255));
            								}
            								else {
HXLINE(  98)									col10 = c44;
            								}
HXDLIN(  98)								bool _hx_tmp;
HXDLIN(  98)								if (pixelImage->useMask) {
HXLINE(  98)									_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE(  98)									_hx_tmp = false;
            								}
HXDLIN(  98)								if (_hx_tmp) {
HXLINE(  98)									 ::pi_xy::ImageStruct this318 = pixelImage->mask;
HXDLIN(  98)									::Dynamic this319 = this318->image;
HXDLIN(  98)									int index43;
HXDLIN(  98)									if (this318->useVirtualPos) {
HXLINE(  98)										index43 = ::Std_obj::_hx_int(((((( (Float)(dy13) ) - this318->virtualY) * ( (Float)(this318->width) )) + dx13) - this318->virtualX));
            									}
            									else {
HXLINE(  98)										index43 = ::Std_obj::_hx_int(( (Float)(((dy13 * this318->width) + dx13)) ));
            									}
HXDLIN(  98)									int c45 = ::iterMagic::Iimg_obj::get(this319,index43);
HXDLIN(  98)									int v24;
HXDLIN(  98)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)										v24 = ((((((c45 >> 24) & 255) << 24) | ((c45 & 255) << 16)) | (((c45 >> 8) & 255) << 8)) | ((c45 >> 16) & 255));
            									}
            									else {
HXLINE(  98)										v24 = c45;
            									}
HXDLIN(  98)									int maskPixel10 = v24;
HXDLIN(  98)									int this320 = col10;
HXDLIN(  98)									if ((maskPixel10 == 0)) {
HXLINE(  98)										col10 = this320;
            									}
            									else {
HXLINE(  98)										Float m010;
HXDLIN(  98)										int this321 = ((maskPixel10 >> 24) & 255);
HXDLIN(  98)										if ((this321 == 0)) {
HXLINE(  98)											m010 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											m010 = (( (Float)(this321) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float m110;
HXDLIN(  98)										int this322 = ((maskPixel10 >> 16) & 255);
HXDLIN(  98)										if ((this322 == 0)) {
HXLINE(  98)											m110 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											m110 = (( (Float)(this322) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float m210;
HXDLIN(  98)										int this323 = ((maskPixel10 >> 8) & 255);
HXDLIN(  98)										if ((this323 == 0)) {
HXLINE(  98)											m210 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											m210 = (( (Float)(this323) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float m310;
HXDLIN(  98)										int this324 = (maskPixel10 & 255);
HXDLIN(  98)										if ((this324 == 0)) {
HXLINE(  98)											m310 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											m310 = (( (Float)(this324) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										int ch010 = ::Std_obj::_hx_int(((((Float)1.) - m010) * ( (Float)(((this320 >> 24) & 255)) )));
HXDLIN(  98)										int ch110 = ::Std_obj::_hx_int(((((Float)1.) - m110) * ( (Float)(((this320 >> 16) & 255)) )));
HXDLIN(  98)										int ch210 = ::Std_obj::_hx_int(((((Float)1.) - m210) * ( (Float)(((this320 >> 8) & 255)) )));
HXDLIN(  98)										int ch310 = ::Std_obj::_hx_int(((((Float)1.) - m310) * ( (Float)((this320 & 255)) )));
HXDLIN(  98)										col10 = ((((::Math_obj::round((( (Float)(ch010) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch110) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch210) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch310) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN(  98)								if ((col10 != 0)) {
HXLINE(  98)									int x33 = (dx13 - rectLeft10);
HXDLIN(  98)									int y33 = (dy13 - rectTop10);
HXDLIN(  98)									int c46 = col10;
HXDLIN(  98)									bool _hx_tmp1;
HXDLIN(  98)									if ((((c46 >> 24) & 255) < 254)) {
HXLINE(  98)										_hx_tmp1 = undoImage30->transparent;
            									}
            									else {
HXLINE(  98)										_hx_tmp1 = false;
            									}
HXDLIN(  98)									if (_hx_tmp1) {
HXLINE(  98)										int location20;
HXDLIN(  98)										if (undoImage30->useVirtualPos) {
HXLINE(  98)											location20 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x33) - undoImage30->virtualX));
            										}
            										else {
HXLINE(  98)											location20 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage30->width) + x33)) ));
            										}
HXDLIN(  98)										int this325 = ::iterMagic::Iimg_obj::get(undoImage30->image,location20);
HXDLIN(  98)										int this326;
HXDLIN(  98)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)											this326 = ((((((this325 >> 24) & 255) << 24) | ((this325 & 255) << 16)) | (((this325 >> 8) & 255) << 8)) | ((this325 >> 16) & 255));
            										}
            										else {
HXLINE(  98)											this326 = this325;
            										}
HXDLIN(  98)										Float a125;
HXDLIN(  98)										int this327 = ((this326 >> 24) & 255);
HXDLIN(  98)										if ((this327 == 0)) {
HXLINE(  98)											a125 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											a125 = (( (Float)(this327) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float r122;
HXDLIN(  98)										int this328 = ((this326 >> 16) & 255);
HXDLIN(  98)										if ((this328 == 0)) {
HXLINE(  98)											r122 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											r122 = (( (Float)(this328) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float g122;
HXDLIN(  98)										int this329 = ((this326 >> 8) & 255);
HXDLIN(  98)										if ((this329 == 0)) {
HXLINE(  98)											g122 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											g122 = (( (Float)(this329) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float b126;
HXDLIN(  98)										int this330 = (this326 & 255);
HXDLIN(  98)										if ((this330 == 0)) {
HXLINE(  98)											b126 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											b126 = (( (Float)(this330) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float a223;
HXDLIN(  98)										int this331 = ((col10 >> 24) & 255);
HXDLIN(  98)										if ((this331 == 0)) {
HXLINE(  98)											a223 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											a223 = (( (Float)(this331) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float r220;
HXDLIN(  98)										int this332 = ((col10 >> 16) & 255);
HXDLIN(  98)										if ((this332 == 0)) {
HXLINE(  98)											r220 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											r220 = (( (Float)(this332) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float g220;
HXDLIN(  98)										int this333 = ((col10 >> 8) & 255);
HXDLIN(  98)										if ((this333 == 0)) {
HXLINE(  98)											g220 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											g220 = (( (Float)(this333) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float b224;
HXDLIN(  98)										int this334 = (col10 & 255);
HXDLIN(  98)										if ((this334 == 0)) {
HXLINE(  98)											b224 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											b224 = (( (Float)(this334) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float a322 = (a125 * (( (Float)(1) ) - a223));
HXDLIN(  98)										int r46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r122 * a322) + (r220 * a223))));
HXDLIN(  98)										int g46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g122 * a322) + (g220 * a223))));
HXDLIN(  98)										int b83 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b126 * a322) + (b224 * a223))));
HXDLIN(  98)										int a72 = ::Std_obj::_hx_int((( (Float)(255) ) * (a322 + a223)));
HXDLIN(  98)										int blended20 = ((((a72 << 24) | (r46 << 16)) | (g46 << 8)) | b83);
HXDLIN(  98)										{
HXLINE(  98)											int _hx_tmp2;
HXDLIN(  98)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)												_hx_tmp2 = ((((((blended20 >> 24) & 255) << 24) | ((blended20 & 255) << 16)) | (((blended20 >> 8) & 255) << 8)) | ((blended20 >> 16) & 255));
            											}
            											else {
HXLINE(  98)												_hx_tmp2 = blended20;
            											}
HXDLIN(  98)											::iterMagic::Iimg_obj::set(undoImage30->image,location20,_hx_tmp2);
            										}
            									}
            									else {
HXLINE(  98)										::Dynamic this335 = undoImage30->image;
HXDLIN(  98)										int index44;
HXDLIN(  98)										if (undoImage30->useVirtualPos) {
HXLINE(  98)											index44 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x33) - undoImage30->virtualX));
            										}
            										else {
HXLINE(  98)											index44 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage30->width) + x33)) ));
            										}
HXDLIN(  98)										int _hx_tmp3;
HXDLIN(  98)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)											_hx_tmp3 = ((((((c46 >> 24) & 255) << 24) | ((c46 & 255) << 16)) | (((c46 >> 8) & 255) << 8)) | ((c46 >> 16) & 255));
            										}
            										else {
HXLINE(  98)											_hx_tmp3 = c46;
            										}
HXDLIN(  98)										::iterMagic::Iimg_obj::set(this335,index44,_hx_tmp3);
            									}
            								}
            								else {
HXLINE(  98)									if (forceClear10) {
HXLINE(  98)										::Dynamic this336 = undoImage30->image;
HXDLIN(  98)										int x34 = (dx13 - rectLeft10);
HXDLIN(  98)										int y34 = (dy13 - rectTop10);
HXDLIN(  98)										int index45;
HXDLIN(  98)										if (undoImage30->useVirtualPos) {
HXLINE(  98)											index45 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x34) - undoImage30->virtualX));
            										}
            										else {
HXLINE(  98)											index45 = ::Std_obj::_hx_int(( (Float)(((y34 * undoImage30->width) + x34)) ));
            										}
HXDLIN(  98)										::iterMagic::Iimg_obj::set(this336,index45,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN(  98)		bool found10 = false;
HXDLIN(  98)		Float min70 = ( (Float)(0) );
HXDLIN(  98)		Float max2 = ( (Float)(0) );
HXDLIN(  98)		int a73 = 0;
HXDLIN(  98)		int r47 = 0;
HXDLIN(  98)		int g47 = 0;
HXDLIN(  98)		int b84 = 0;
HXDLIN(  98)		{
HXLINE(  98)			int _g_min20 = xIter310->start;
HXDLIN(  98)			int _g_max20 = xIter310->max;
HXDLIN(  98)			while((_g_min20 < _g_max20)){
HXLINE(  98)				_g_min20 = (_g_min20 + 1);
HXDLIN(  98)				int px9 = (_g_min20 - 1);
HXDLIN(  98)				Float pcx8 = (( (Float)(px9) ) - cx11);
HXLINE( 695)				found10 = false;
HXLINE(  98)				{
HXLINE(  98)					int _g_min21 = yIter310->start;
HXDLIN(  98)					int _g_max21 = yIter310->max;
HXDLIN(  98)					while((_g_min21 < _g_max21)){
HXLINE(  98)						_g_min21 = (_g_min21 + 1);
HXDLIN(  98)						int py9 = (_g_min21 - 1);
HXDLIN(  98)						Float pcy8 = (( (Float)(py9) ) - cy11);
HXDLIN(  98)						Float dot318 = ((pcx8 * bcx8) + (pcy8 * bcy8));
HXDLIN(  98)						Float dot328 = ((pcx8 * acx8) + (pcy8 * acy8));
HXDLIN(  98)						Float ratioA8 = (((dot228 * dot318) - (dot128 * dot328)) * denom18);
HXDLIN(  98)						Float ratioB8 = (((dot118 * dot328) - (dot128 * dot318)) * denom18);
HXDLIN(  98)						Float ratioC8 = ((((Float)1.0) - ratioB8) - ratioA8);
HXDLIN(  98)						bool _hx_tmp4;
HXDLIN(  98)						bool _hx_tmp5;
HXDLIN(  98)						if ((ratioA8 >= 0)) {
HXLINE(  98)							_hx_tmp5 = (ratioB8 >= 0);
            						}
            						else {
HXLINE(  98)							_hx_tmp5 = false;
            						}
HXDLIN(  98)						if (_hx_tmp5) {
HXLINE(  98)							_hx_tmp4 = (ratioC8 >= 0);
            						}
            						else {
HXLINE(  98)							_hx_tmp4 = false;
            						}
HXDLIN(  98)						if (_hx_tmp4) {
HXLINE(  98)							Float min71;
HXDLIN(  98)							if ((ratioA8 < ratioB8)) {
HXLINE(  98)								min71 = ratioA8;
            							}
            							else {
HXLINE(  98)								min71 = ratioB8;
            							}
HXDLIN(  98)							if (!((min71 < ratioC8))) {
HXLINE(  98)								min71 = ratioC8;
            							}
HXDLIN(  98)							Float max3;
HXDLIN(  98)							if ((ratioA8 > ratioB8)) {
HXLINE(  98)								max3 = ratioA8;
            							}
            							else {
HXLINE(  98)								max3 = ratioB8;
            							}
HXDLIN(  98)							if (!((max3 > ratioC8))) {
HXLINE(  98)								max3 = ratioC8;
            							}
HXLINE( 743)							max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE(  98)							Float min72;
HXDLIN(  98)							if ((min71 < max3)) {
HXLINE(  98)								min72 = min71;
            							}
            							else {
HXLINE(  98)								min72 = ((max3 + min71) / ( (Float)(2) ));
            							}
HXDLIN(  98)							int i98 = ::Std_obj::_hx_int(((( (Float)(aA8) ) * soft) * min72));
HXDLIN(  98)							if ((i98 > 255)) {
HXLINE(  24)								i98 = 255;
            							}
HXLINE(  98)							if ((i98 < 0)) {
HXLINE(  25)								i98 = 0;
            							}
HXLINE(  98)							a73 = i98;
HXDLIN(  98)							int i99 = ::Std_obj::_hx_int(( (Float)(rA8) ));
HXDLIN(  98)							if ((i99 > 255)) {
HXLINE(  24)								i99 = 255;
            							}
HXLINE(  98)							if ((i99 < 0)) {
HXLINE(  25)								i99 = 0;
            							}
HXLINE( 747)							r47 = i99;
HXLINE(  98)							int i100 = ::Std_obj::_hx_int(( (Float)(gA8) ));
HXDLIN(  98)							if ((i100 > 255)) {
HXLINE(  24)								i100 = 255;
            							}
HXLINE(  98)							if ((i100 < 0)) {
HXLINE(  25)								i100 = 0;
            							}
HXLINE( 748)							g47 = i100;
HXLINE(  98)							int i101 = ::Std_obj::_hx_int(( (Float)(bA8) ));
HXDLIN(  98)							if ((i101 > 255)) {
HXLINE(  24)								i101 = 255;
            							}
HXLINE(  98)							if ((i101 < 0)) {
HXLINE(  25)								i101 = 0;
            							}
HXLINE( 749)							b84 = i101;
HXLINE(  98)							{
HXLINE(  98)								int location21;
HXDLIN(  98)								if (pixelImage->useVirtualPos) {
HXLINE(  98)									location21 = ::Std_obj::_hx_int(((((( (Float)(py9) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px9) - pixelImage->virtualX));
            								}
            								else {
HXLINE(  98)									location21 = ::Std_obj::_hx_int(( (Float)(((py9 * pixelImage->width) + px9)) ));
            								}
HXDLIN(  98)								bool _hx_tmp6;
HXDLIN(  98)								if (pixelImage->transparent) {
HXLINE(  98)									_hx_tmp6 = (a73 < 254);
            								}
            								else {
HXLINE(  98)									_hx_tmp6 = false;
            								}
HXDLIN(  98)								if (_hx_tmp6) {
HXLINE(  98)									int this337 = ::iterMagic::Iimg_obj::get(pixelImage->image,location21);
HXDLIN(  98)									int old8;
HXDLIN(  98)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)										old8 = ((((((this337 >> 24) & 255) << 24) | ((this337 & 255) << 16)) | (((this337 >> 8) & 255) << 8)) | ((this337 >> 16) & 255));
            									}
            									else {
HXLINE(  98)										old8 = this337;
            									}
HXDLIN(  98)									int rhs8 = ((((a73 << 24) | (r47 << 16)) | (g47 << 8)) | b84);
HXDLIN(  98)									Float a126;
HXDLIN(  98)									int this338 = ((old8 >> 24) & 255);
HXDLIN(  98)									if ((this338 == 0)) {
HXLINE(  98)										a126 = ((Float)0.);
            									}
            									else {
HXLINE(  98)										a126 = (( (Float)(this338) ) / ( (Float)(255) ));
            									}
HXDLIN(  98)									Float r123;
HXDLIN(  98)									int this339 = ((old8 >> 16) & 255);
HXDLIN(  98)									if ((this339 == 0)) {
HXLINE(  98)										r123 = ((Float)0.);
            									}
            									else {
HXLINE(  98)										r123 = (( (Float)(this339) ) / ( (Float)(255) ));
            									}
HXDLIN(  98)									Float g123;
HXDLIN(  98)									int this340 = ((old8 >> 8) & 255);
HXDLIN(  98)									if ((this340 == 0)) {
HXLINE(  98)										g123 = ((Float)0.);
            									}
            									else {
HXLINE(  98)										g123 = (( (Float)(this340) ) / ( (Float)(255) ));
            									}
HXDLIN(  98)									Float b127;
HXDLIN(  98)									int this341 = (old8 & 255);
HXDLIN(  98)									if ((this341 == 0)) {
HXLINE(  98)										b127 = ((Float)0.);
            									}
            									else {
HXLINE(  98)										b127 = (( (Float)(this341) ) / ( (Float)(255) ));
            									}
HXDLIN(  98)									Float a224;
HXDLIN(  98)									int this342 = ((rhs8 >> 24) & 255);
HXDLIN(  98)									if ((this342 == 0)) {
HXLINE(  98)										a224 = ((Float)0.);
            									}
            									else {
HXLINE(  98)										a224 = (( (Float)(this342) ) / ( (Float)(255) ));
            									}
HXDLIN(  98)									Float r221;
HXDLIN(  98)									int this343 = ((rhs8 >> 16) & 255);
HXDLIN(  98)									if ((this343 == 0)) {
HXLINE(  98)										r221 = ((Float)0.);
            									}
            									else {
HXLINE(  98)										r221 = (( (Float)(this343) ) / ( (Float)(255) ));
            									}
HXDLIN(  98)									Float g221;
HXDLIN(  98)									int this344 = ((rhs8 >> 8) & 255);
HXDLIN(  98)									if ((this344 == 0)) {
HXLINE(  98)										g221 = ((Float)0.);
            									}
            									else {
HXLINE(  98)										g221 = (( (Float)(this344) ) / ( (Float)(255) ));
            									}
HXDLIN(  98)									Float b225;
HXDLIN(  98)									int this345 = (rhs8 & 255);
HXDLIN(  98)									if ((this345 == 0)) {
HXLINE(  98)										b225 = ((Float)0.);
            									}
            									else {
HXLINE(  98)										b225 = (( (Float)(this345) ) / ( (Float)(255) ));
            									}
HXDLIN(  98)									Float a323 = (a126 * (( (Float)(1) ) - a224));
HXDLIN(  98)									int r48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r123 * a323) + (r221 * a224))));
HXDLIN(  98)									int g48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g123 * a323) + (g221 * a224))));
HXDLIN(  98)									int b85 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b127 * a323) + (b225 * a224))));
HXDLIN(  98)									int a74 = ::Std_obj::_hx_int((( (Float)(255) ) * (a323 + a224)));
HXDLIN(  98)									int blended21 = ((((a74 << 24) | (r48 << 16)) | (g48 << 8)) | b85);
HXDLIN(  98)									{
HXLINE(  98)										int _hx_tmp7;
HXDLIN(  98)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)											_hx_tmp7 = ((((((blended21 >> 24) & 255) << 24) | ((blended21 & 255) << 16)) | (((blended21 >> 8) & 255) << 8)) | ((blended21 >> 16) & 255));
            										}
            										else {
HXLINE(  98)											_hx_tmp7 = blended21;
            										}
HXDLIN(  98)										::iterMagic::Iimg_obj::set(pixelImage->image,location21,_hx_tmp7);
            									}
            								}
            								else {
HXLINE(  98)									int value8;
HXDLIN(  98)									if (pixelImage->isLittle) {
HXLINE(  98)										value8 = ((((a73 << 24) | (b84 << 16)) | (g47 << 8)) | r47);
            									}
            									else {
HXLINE(  98)										value8 = ((((a73 << 24) | (r47 << 16)) | (g47 << 8)) | b84);
            									}
HXDLIN(  98)									::iterMagic::Iimg_obj::set(pixelImage->image,location21,value8);
            								}
            							}
HXLINE( 751)							found10 = true;
            						}
            						else {
HXLINE(  98)							if (found10) {
HXLINE(  98)								goto _hx_goto_216;
            							}
            						}
            					}
            					_hx_goto_216:;
            				}
            			}
            		}
HXDLIN(  98)		 ::pi_xy::algo::HitTri hitTri;
HXDLIN(  98)		if ((hasHit == false)) {
HXLINE(  98)			 ::pi_xy::algo::HitTri v25 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx11,by11,cx11,cy11,true);
HXDLIN(  98)			if (hasUndo10) {
HXLINE(  98)				v25->undoImage = undoImage30;
HXDLIN(  98)				v25->undoX = xIter310->start;
HXDLIN(  98)				v25->undoY = yIter310->start;
            			}
HXDLIN(  98)			hitTri = v25;
            		}
            		else {
HXLINE(  98)			hitTri = null();
            		}
HXLINE(  99)		if (hasHit) {
HXLINE( 100)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(1)->init(0,hitTri));
HXLINE( 101)			if (::hx::IsNotNull( hitQuad )) {
HXLINE( 102)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXLINE( 103)			hitArr->triArr->push(hitQuad->triBCD);
HXLINE( 104)			return hitArr;
            		}
            		else {
HXLINE( 106)			return null();
            		}
HXLINE(  99)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(ArrowPixel_Fields__obj,fillSoftLineArrow,return )

 ::pi_xy::algo::HitTriArray ArrowPixel_Fields__obj::gradThickLineArrow( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float thick,int color1,int color2,::hx::Null< bool >  __o_flare,::hx::Null< bool >  __o_reverseFlare,::hx::Null< bool >  __o_hasHit){
            		bool flare = __o_flare.Default(false);
            		bool reverseFlare = __o_reverseFlare.Default(false);
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_63f36ef650858c14_119_gradThickLineArrow)
HXLINE( 120)		Float goldenRatio = ((Float)1.61803398875);
HXLINE( 122)		Float o = (qy - py);
HXLINE( 123)		Float a = (qx - px);
HXLINE( 124)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE( 125)		Float theta = ::Math_obj::atan2(o,a);
HXLINE( 126)		Float thicker = ((( (Float)(2) ) * thick) * goldenRatio);
HXLINE( 127)		Float sin = ::Math_obj::sin(theta);
HXLINE( 128)		Float cos = ::Math_obj::cos(theta);
HXLINE( 129)		Float radius = (thick / ( (Float)(2) ));
HXLINE( 130)		Float radius2 = (thicker / ( (Float)(2) ));
HXLINE( 131)		Float h2 = (h / goldenRatio);
HXLINE( 132)		 ::pi_xy::algo::HitQuad hitQuad;
HXDLIN( 132)		if (flare) {
HXLINE( 133)			if (reverseFlare) {
HXLINE( 134)				Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 134)				Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 134)				Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 134)				Float radius21 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN( 134)				Float dx = ((Float)0.1);
HXDLIN( 134)				Float dy = radius1;
HXDLIN( 134)				Float cx = h2;
HXDLIN( 134)				Float cy = radius21;
HXDLIN( 134)				Float bx = h2;
HXDLIN( 134)				Float by = -(radius21);
HXDLIN( 134)				Float ax = ((Float)0.1);
HXDLIN( 134)				Float ay = -(radius1);
HXDLIN( 134)				Float temp = ((Float)0.);
HXLINE( 525)				temp = (px + ((ax * cos1) - (ay * sin1)));
HXLINE( 526)				ay = (py + ((ay * cos1) + (ax * sin1)));
HXLINE( 527)				ax = temp;
HXLINE( 529)				temp = (px + ((bx * cos1) - (by * sin1)));
HXLINE( 530)				by = (py + ((by * cos1) + (bx * sin1)));
HXLINE( 531)				bx = temp;
HXLINE( 533)				temp = (px + ((cx * cos1) - (cy * sin1)));
HXLINE( 534)				cy = (py + ((cy * cos1) + (cx * sin1)));
HXLINE( 535)				cx = temp;
HXLINE( 537)				temp = (px + ((dx * cos1) - (dy * sin1)));
HXLINE( 538)				dy = (py + ((dy * cos1) + (dx * sin1)));
HXLINE( 539)				dx = temp;
HXLINE( 134)				{
HXLINE( 134)					bool hasUndo = false;
HXDLIN( 134)					int aA = ((color1 >> 24) & 255);
HXDLIN( 134)					int rA = ((color1 >> 16) & 255);
HXDLIN( 134)					int gA = ((color1 >> 8) & 255);
HXDLIN( 134)					int bA = (color1 & 255);
HXDLIN( 134)					int aB = ((color1 >> 24) & 255);
HXDLIN( 134)					int rB = ((color1 >> 16) & 255);
HXDLIN( 134)					int gB = ((color1 >> 8) & 255);
HXDLIN( 134)					int bB = (color1 & 255);
HXDLIN( 134)					int aC = ((color2 >> 24) & 255);
HXDLIN( 134)					int rC = ((color2 >> 16) & 255);
HXDLIN( 134)					int gC = ((color2 >> 8) & 255);
HXDLIN( 134)					int bC = (color2 & 255);
HXDLIN( 134)					Float bcx = (bx - dx);
HXDLIN( 134)					Float bcy = (by - dy);
HXDLIN( 134)					Float acx = (ax - dx);
HXDLIN( 134)					Float acy = (ay - dy);
HXDLIN( 134)					Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 134)					Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 134)					Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 134)					Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 134)					 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 134)					if ((ax > bx)) {
HXLINE( 134)						if ((ax > dx)) {
HXLINE( 134)							int min;
HXDLIN( 134)							if ((bx > dx)) {
HXLINE( 134)								min = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE( 134)								min = ::Math_obj::floor(bx);
            							}
HXDLIN( 134)							int ii_min = min;
HXDLIN( 134)							int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 134)							xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            						}
            						else {
HXLINE( 134)							int ii_min1 = ::Math_obj::floor(bx);
HXDLIN( 134)							int ii_max1 = ::Math_obj::ceil(dx);
HXDLIN( 134)							xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            						}
            					}
            					else {
HXLINE( 134)						if ((bx > dx)) {
HXLINE( 134)							int min1;
HXDLIN( 134)							if ((ax > dx)) {
HXLINE( 134)								min1 = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE( 134)								min1 = ::Math_obj::ceil(ax);
            							}
HXDLIN( 134)							int ii_min2 = min1;
HXDLIN( 134)							int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN( 134)							xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            						}
            						else {
HXLINE( 134)							int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 134)							int ii_max3 = ::Math_obj::ceil(dx);
HXDLIN( 134)							xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            						}
            					}
HXDLIN( 134)					 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 134)					if ((ay > by)) {
HXLINE( 134)						if ((ay > dy)) {
HXLINE( 134)							int min2;
HXDLIN( 134)							if ((by > dy)) {
HXLINE( 134)								min2 = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE( 134)								min2 = ::Math_obj::floor(by);
            							}
HXDLIN( 134)							int ii_min4 = min2;
HXDLIN( 134)							int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 134)							yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            						}
            						else {
HXLINE( 134)							int ii_min5 = ::Math_obj::floor(by);
HXDLIN( 134)							int ii_max5 = ::Math_obj::ceil(dy);
HXDLIN( 134)							yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            						}
            					}
            					else {
HXLINE( 134)						if ((by > dy)) {
HXLINE( 134)							int min3;
HXDLIN( 134)							if ((ay > dy)) {
HXLINE( 134)								min3 = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE( 134)								min3 = ::Math_obj::ceil(ay);
            							}
HXDLIN( 134)							int ii_min6 = min3;
HXDLIN( 134)							int ii_max6 = ::Math_obj::ceil(by);
HXDLIN( 134)							yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            						}
            						else {
HXLINE( 134)							int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 134)							int ii_max7 = ::Math_obj::ceil(dy);
HXDLIN( 134)							yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            						}
            					}
HXDLIN( 134)					 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 134)					if (hasUndo) {
HXLINE( 134)						int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 134)						int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 134)						 ::Dynamic imageType = null();
HXDLIN( 134)						 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 134)						if (::hx::IsNull( imageType )) {
HXLINE(  54)							imageType = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 134)						::Dynamic undoImage1;
HXDLIN( 134)						switch((int)(( (int)(imageType) ))){
            							case (int)0: {
HXLINE( 134)								 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 134)								 ::iterMagic::BytesImg b = byt;
HXDLIN( 134)								{
HXLINE( 134)									b->width = width;
HXDLIN( 134)									b->height = height;
HXDLIN( 134)									b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 134)									b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 134)									{
HXLINE( 134)										int len = b->length;
HXDLIN( 134)										int w = 0;
HXDLIN( 134)										{
HXLINE( 134)											int _g = 0;
HXDLIN( 134)											int _g1 = b->height;
HXDLIN( 134)											while((_g < _g1)){
HXLINE( 134)												_g = (_g + 1);
HXDLIN( 134)												int y = (_g - 1);
HXDLIN( 134)												{
HXLINE( 134)													int _g2 = 0;
HXDLIN( 134)													int _g3 = b->width;
HXDLIN( 134)													while((_g2 < _g3)){
HXLINE( 134)														_g2 = (_g2 + 1);
HXDLIN( 134)														int x = (_g2 - 1);
HXDLIN( 134)														{
HXLINE( 134)															w = (w + 1);
HXDLIN( 134)															b->data->b[(w - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 134)														{
HXLINE( 134)															w = (w + 1);
HXDLIN( 134)															b->data->b[(w - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 134)														{
HXLINE( 134)															w = (w + 1);
HXDLIN( 134)															b->data->b[(w - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 134)														{
HXLINE( 134)															w = (w + 1);
HXDLIN( 134)															b->data->b[(w - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 134)								undoImage1 = b;
            							}
            							break;
            							case (int)1: {
HXLINE( 134)								 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 134)								 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 134)								{
HXLINE( 134)									a1->width = width;
HXDLIN( 134)									a1->height = height;
HXDLIN( 134)									a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 134)									a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 134)									{
HXLINE( 134)										int _g4 = 0;
HXDLIN( 134)										int _g5 = a1->length;
HXDLIN( 134)										while((_g4 < _g5)){
HXLINE( 134)											_g4 = (_g4 + 1);
HXDLIN( 134)											int i = (_g4 - 1);
HXDLIN( 134)											a1->data[i] = 0;
            										}
            									}
            								}
HXDLIN( 134)								undoImage1 = a1;
            							}
            							break;
            							case (int)2: {
HXLINE( 134)								 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 134)								 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 134)								{
HXLINE( 134)									b1->width = width;
HXDLIN( 134)									b1->height = height;
HXDLIN( 134)									b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 134)									int size = (b1->length * 4);
HXDLIN( 134)									b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 134)									{
HXLINE( 134)										int _g6 = 0;
HXDLIN( 134)										int _g7 = b1->length;
HXDLIN( 134)										while((_g6 < _g7)){
HXLINE( 134)											_g6 = (_g6 + 1);
HXDLIN( 134)											int i1 = (_g6 - 1);
HXDLIN( 134)											{
HXLINE( 134)												 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN( 134)												bool undoImage2;
HXDLIN( 134)												if ((i1 >= 0)) {
HXLINE( 134)													undoImage2 = (i1 < (this2->byteLength >> 2));
            												}
            												else {
HXLINE( 134)													undoImage2 = false;
            												}
HXDLIN( 134)												if (undoImage2) {
HXLINE( 134)													 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 134)													int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 134)													_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 134)													_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 134)													_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 134)													_this->b[(pos + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 134)								undoImage1 = b1;
            							}
            							break;
            							case (int)3: {
HXLINE( 134)								 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 134)								 ::iterMagic::VecIntImg v = vec;
HXDLIN( 134)								{
HXLINE( 134)									v->width = width;
HXDLIN( 134)									v->height = height;
HXDLIN( 134)									v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 134)									v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 134)									{
HXLINE( 134)										int _g8 = 0;
HXDLIN( 134)										int _g9 = v->length;
HXDLIN( 134)										while((_g8 < _g9)){
HXLINE( 134)											_g8 = (_g8 + 1);
HXDLIN( 134)											int i2 = (_g8 - 1);
HXDLIN( 134)											v->data->__unsafe_set(i2,0);
            										}
            									}
            								}
HXDLIN( 134)								undoImage1 = v;
            							}
            							break;
            							case (int)4: {
HXLINE( 134)								 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 134)								 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 134)								{
HXLINE( 134)									b2->width = width;
HXDLIN( 134)									b2->height = height;
HXDLIN( 134)									b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 134)									b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 134)									{
HXLINE( 134)										int len1 = b2->length;
HXDLIN( 134)										 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 134)										if (::hx::IsNull( d->head )) {
HXLINE( 134)											int _g10 = 0;
HXDLIN( 134)											int _g11 = len1;
HXDLIN( 134)											while((_g10 < _g11)){
HXLINE( 134)												_g10 = (_g10 + 1);
HXDLIN( 134)												int i3 = (_g10 - 1);
HXDLIN( 134)												d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            											}
            										}
            										else {
HXLINE( 134)											int _g12 = 0;
HXDLIN( 134)											int _g13 = len1;
HXDLIN( 134)											while((_g12 < _g13)){
HXLINE( 134)												_g12 = (_g12 + 1);
HXDLIN( 134)												int i4 = (_g12 - 1);
HXDLIN( 134)												{
HXLINE( 134)													 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 134)													 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 134)													{
HXLINE( 134)														int _g14 = 0;
HXDLIN( 134)														int _g15 = i4;
HXDLIN( 134)														while((_g14 < _g15)){
HXLINE( 134)															_g14 = (_g14 + 1);
HXDLIN( 134)															int i5 = (_g14 - 1);
HXLINE( 345)															prev = l;
HXLINE( 346)															l = l->next;
            														}
            													}
HXLINE( 134)													if (::hx::IsNull( prev )) {
HXLINE( 134)														b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 134)														l = null();
            													}
            													else {
HXLINE( 134)														prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 134)														l = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 134)								undoImage1 = b2;
            							}
            							break;
            						}
HXDLIN( 134)						this1->image = undoImage1;
HXDLIN( 134)						this1->width = width;
HXDLIN( 134)						this1->height = height;
HXDLIN( 134)						this1->imageType = ( (int)(imageType) );
HXDLIN( 134)						undoImage = this1;
HXDLIN( 134)						{
HXLINE( 134)							int rectLeft = xIter3->start;
HXDLIN( 134)							int rectTop = yIter3->start;
HXDLIN( 134)							int rectRight = xIter3->max;
HXDLIN( 134)							bool forceClear = false;
HXDLIN( 134)							{
HXLINE( 134)								int _g16 = rectTop;
HXDLIN( 134)								int _g17 = yIter3->max;
HXDLIN( 134)								while((_g16 < _g17)){
HXLINE( 134)									_g16 = (_g16 + 1);
HXDLIN( 134)									int dy1 = (_g16 - 1);
HXDLIN( 134)									{
HXLINE( 134)										int _g18 = rectLeft;
HXDLIN( 134)										int _g19 = rectRight;
HXDLIN( 134)										while((_g18 < _g19)){
HXLINE( 134)											_g18 = (_g18 + 1);
HXDLIN( 134)											int dx1 = (_g18 - 1);
HXDLIN( 134)											::Dynamic this3 = pixelImage->image;
HXDLIN( 134)											int index;
HXDLIN( 134)											if (pixelImage->useVirtualPos) {
HXLINE( 134)												index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 134)												index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            											}
HXDLIN( 134)											int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN( 134)											int col;
HXDLIN( 134)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 134)												col = c;
            											}
HXDLIN( 134)											bool hitQuad1;
HXDLIN( 134)											if (pixelImage->useMask) {
HXLINE( 134)												hitQuad1 = ::hx::IsNotNull( pixelImage->mask );
            											}
            											else {
HXLINE( 134)												hitQuad1 = false;
            											}
HXDLIN( 134)											if (hitQuad1) {
HXLINE( 134)												 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN( 134)												::Dynamic this5 = this4->image;
HXDLIN( 134)												int index1;
HXDLIN( 134)												if (this4->useVirtualPos) {
HXLINE( 134)													index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            												}
            												else {
HXLINE( 134)													index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            												}
HXDLIN( 134)												int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN( 134)												int v1;
HXDLIN( 134)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)													v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            												}
            												else {
HXLINE( 134)													v1 = c1;
            												}
HXDLIN( 134)												int maskPixel = v1;
HXDLIN( 134)												int this6 = col;
HXDLIN( 134)												if ((maskPixel == 0)) {
HXLINE( 134)													col = this6;
            												}
            												else {
HXLINE( 134)													Float m0;
HXDLIN( 134)													int this7 = ((maskPixel >> 24) & 255);
HXDLIN( 134)													if ((this7 == 0)) {
HXLINE( 134)														m0 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float m1;
HXDLIN( 134)													int this8 = ((maskPixel >> 16) & 255);
HXDLIN( 134)													if ((this8 == 0)) {
HXLINE( 134)														m1 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float m2;
HXDLIN( 134)													int this9 = ((maskPixel >> 8) & 255);
HXDLIN( 134)													if ((this9 == 0)) {
HXLINE( 134)														m2 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float m3;
HXDLIN( 134)													int this10 = (maskPixel & 255);
HXDLIN( 134)													if ((this10 == 0)) {
HXLINE( 134)														m3 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 134)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 134)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 134)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 134)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 134)											if ((col != 0)) {
HXLINE( 134)												int x1 = (dx1 - rectLeft);
HXDLIN( 134)												int y1 = (dy1 - rectTop);
HXDLIN( 134)												int c2 = col;
HXDLIN( 134)												bool hitQuad2;
HXDLIN( 134)												if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 134)													hitQuad2 = undoImage->transparent;
            												}
            												else {
HXLINE( 134)													hitQuad2 = false;
            												}
HXDLIN( 134)												if (hitQuad2) {
HXLINE( 134)													int location;
HXDLIN( 134)													if (undoImage->useVirtualPos) {
HXLINE( 134)														location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            													}
            													else {
HXLINE( 134)														location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            													}
HXDLIN( 134)													int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 134)													int this12;
HXDLIN( 134)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)														this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            													}
            													else {
HXLINE( 134)														this12 = this11;
            													}
HXDLIN( 134)													Float a11;
HXDLIN( 134)													int this13 = ((this12 >> 24) & 255);
HXDLIN( 134)													if ((this13 == 0)) {
HXLINE( 134)														a11 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float r1;
HXDLIN( 134)													int this14 = ((this12 >> 16) & 255);
HXDLIN( 134)													if ((this14 == 0)) {
HXLINE( 134)														r1 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float g1;
HXDLIN( 134)													int this15 = ((this12 >> 8) & 255);
HXDLIN( 134)													if ((this15 == 0)) {
HXLINE( 134)														g1 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float b11;
HXDLIN( 134)													int this16 = (this12 & 255);
HXDLIN( 134)													if ((this16 == 0)) {
HXLINE( 134)														b11 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float a2;
HXDLIN( 134)													int this17 = ((col >> 24) & 255);
HXDLIN( 134)													if ((this17 == 0)) {
HXLINE( 134)														a2 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float r2;
HXDLIN( 134)													int this18 = ((col >> 16) & 255);
HXDLIN( 134)													if ((this18 == 0)) {
HXLINE( 134)														r2 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float g2;
HXDLIN( 134)													int this19 = ((col >> 8) & 255);
HXDLIN( 134)													if ((this19 == 0)) {
HXLINE( 134)														g2 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float b21;
HXDLIN( 134)													int this20 = (col & 255);
HXDLIN( 134)													if ((this20 == 0)) {
HXLINE( 134)														b21 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 134)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 134)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 134)													int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 134)													int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 134)													int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 134)													{
HXLINE( 134)														int hitQuad3;
HXDLIN( 134)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)															hitQuad3 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE( 134)															hitQuad3 = blended;
            														}
HXDLIN( 134)														::iterMagic::Iimg_obj::set(undoImage->image,location,hitQuad3);
            													}
            												}
            												else {
HXLINE( 134)													::Dynamic this21 = undoImage->image;
HXDLIN( 134)													int index2;
HXDLIN( 134)													if (undoImage->useVirtualPos) {
HXLINE( 134)														index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            													}
            													else {
HXLINE( 134)														index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            													}
HXDLIN( 134)													int hitQuad4;
HXDLIN( 134)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)														hitQuad4 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            													}
            													else {
HXLINE( 134)														hitQuad4 = c2;
            													}
HXDLIN( 134)													::iterMagic::Iimg_obj::set(this21,index2,hitQuad4);
            												}
            											}
            											else {
HXLINE( 134)												if (forceClear) {
HXLINE( 134)													::Dynamic this22 = undoImage->image;
HXDLIN( 134)													int x2 = (dx1 - rectLeft);
HXDLIN( 134)													int y2 = (dy1 - rectTop);
HXDLIN( 134)													int index3;
HXDLIN( 134)													if (undoImage->useVirtualPos) {
HXLINE( 134)														index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            													}
            													else {
HXLINE( 134)														index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            													}
HXDLIN( 134)													::iterMagic::Iimg_obj::set(this22,index3,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 134)					{
HXLINE( 134)						int _g_min = xIter3->start;
HXDLIN( 134)						int _g_max = xIter3->max;
HXDLIN( 134)						while((_g_min < _g_max)){
HXLINE( 134)							_g_min = (_g_min + 1);
HXDLIN( 134)							int px1 = (_g_min - 1);
HXDLIN( 134)							Float pcx = (( (Float)(px1) ) - dx);
HXDLIN( 134)							{
HXLINE( 134)								int _g_min1 = yIter3->start;
HXDLIN( 134)								int _g_max1 = yIter3->max;
HXDLIN( 134)								while((_g_min1 < _g_max1)){
HXLINE( 134)									_g_min1 = (_g_min1 + 1);
HXDLIN( 134)									int py1 = (_g_min1 - 1);
HXDLIN( 134)									Float pcy = (( (Float)(py1) ) - dy);
HXDLIN( 134)									Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 134)									Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 134)									Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 134)									Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 134)									Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 134)									bool hitQuad5;
HXDLIN( 134)									bool hitQuad6;
HXDLIN( 134)									if ((ratioA >= 0)) {
HXLINE( 134)										hitQuad6 = (ratioB >= 0);
            									}
            									else {
HXLINE( 134)										hitQuad6 = false;
            									}
HXDLIN( 134)									if (hitQuad6) {
HXLINE( 134)										hitQuad5 = (ratioC >= 0);
            									}
            									else {
HXLINE( 134)										hitQuad5 = false;
            									}
HXDLIN( 134)									if (hitQuad5) {
HXLINE( 134)										int i6 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA) + (( (Float)(aB) ) * ratioB)) + (( (Float)(aC) ) * ratioC)));
HXDLIN( 134)										if ((i6 > 255)) {
HXLINE(  24)											i6 = 255;
            										}
HXLINE( 134)										if ((i6 < 0)) {
HXLINE(  25)											i6 = 0;
            										}
HXLINE( 134)										int a5 = i6;
HXDLIN( 134)										int i7 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA) + (( (Float)(rB) ) * ratioB)) + (( (Float)(rC) ) * ratioC)));
HXDLIN( 134)										if ((i7 > 255)) {
HXLINE(  24)											i7 = 255;
            										}
HXLINE( 134)										if ((i7 < 0)) {
HXLINE(  25)											i7 = 0;
            										}
HXLINE( 134)										int r3 = i7;
HXDLIN( 134)										int i8 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA) + (( (Float)(gB) ) * ratioB)) + (( (Float)(gC) ) * ratioC)));
HXDLIN( 134)										if ((i8 > 255)) {
HXLINE(  24)											i8 = 255;
            										}
HXLINE( 134)										if ((i8 < 0)) {
HXLINE(  25)											i8 = 0;
            										}
HXLINE( 134)										int g3 = i8;
HXDLIN( 134)										int i9 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA) + (( (Float)(bB) ) * ratioB)) + (( (Float)(bC) ) * ratioC)));
HXDLIN( 134)										if ((i9 > 255)) {
HXLINE(  24)											i9 = 255;
            										}
HXLINE( 134)										if ((i9 < 0)) {
HXLINE(  25)											i9 = 0;
            										}
HXLINE( 134)										int b4 = i9;
HXDLIN( 134)										{
HXLINE( 134)											int location1;
HXDLIN( 134)											if (pixelImage->useVirtualPos) {
HXLINE( 134)												location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 134)												location1 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            											}
HXDLIN( 134)											bool hitQuad7;
HXDLIN( 134)											if (pixelImage->transparent) {
HXLINE( 134)												hitQuad7 = (a5 < 254);
            											}
            											else {
HXLINE( 134)												hitQuad7 = false;
            											}
HXDLIN( 134)											if (hitQuad7) {
HXLINE( 134)												int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN( 134)												int old;
HXDLIN( 134)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)													old = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            												}
            												else {
HXLINE( 134)													old = this23;
            												}
HXDLIN( 134)												int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 134)												Float a12;
HXDLIN( 134)												int this24 = ((old >> 24) & 255);
HXDLIN( 134)												if ((this24 == 0)) {
HXLINE( 134)													a12 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													a12 = (( (Float)(this24) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float r11;
HXDLIN( 134)												int this25 = ((old >> 16) & 255);
HXDLIN( 134)												if ((this25 == 0)) {
HXLINE( 134)													r11 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													r11 = (( (Float)(this25) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float g11;
HXDLIN( 134)												int this26 = ((old >> 8) & 255);
HXDLIN( 134)												if ((this26 == 0)) {
HXLINE( 134)													g11 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													g11 = (( (Float)(this26) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float b12;
HXDLIN( 134)												int this27 = (old & 255);
HXDLIN( 134)												if ((this27 == 0)) {
HXLINE( 134)													b12 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													b12 = (( (Float)(this27) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float a21;
HXDLIN( 134)												int this28 = ((rhs >> 24) & 255);
HXDLIN( 134)												if ((this28 == 0)) {
HXLINE( 134)													a21 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													a21 = (( (Float)(this28) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float r21;
HXDLIN( 134)												int this29 = ((rhs >> 16) & 255);
HXDLIN( 134)												if ((this29 == 0)) {
HXLINE( 134)													r21 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													r21 = (( (Float)(this29) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float g21;
HXDLIN( 134)												int this30 = ((rhs >> 8) & 255);
HXDLIN( 134)												if ((this30 == 0)) {
HXLINE( 134)													g21 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													g21 = (( (Float)(this30) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float b22;
HXDLIN( 134)												int this31 = (rhs & 255);
HXDLIN( 134)												if ((this31 == 0)) {
HXLINE( 134)													b22 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													b22 = (( (Float)(this31) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 134)												int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 134)												int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 134)												int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 134)												int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 134)												int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 134)												{
HXLINE( 134)													int hitQuad8;
HXDLIN( 134)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)														hitQuad8 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            													}
            													else {
HXLINE( 134)														hitQuad8 = blended1;
            													}
HXDLIN( 134)													::iterMagic::Iimg_obj::set(pixelImage->image,location1,hitQuad8);
            												}
            											}
            											else {
HXLINE( 134)												int value;
HXDLIN( 134)												if (pixelImage->isLittle) {
HXLINE( 134)													value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            												}
            												else {
HXLINE( 134)													value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            												}
HXDLIN( 134)												::iterMagic::Iimg_obj::set(pixelImage->image,location1,value);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 134)				{
HXLINE( 134)					bool hasHit1 = false;
HXDLIN( 134)					bool hasUndo1 = false;
HXDLIN( 134)					int aA1 = ((color2 >> 24) & 255);
HXDLIN( 134)					int rA1 = ((color2 >> 16) & 255);
HXDLIN( 134)					int gA1 = ((color2 >> 8) & 255);
HXDLIN( 134)					int bA1 = (color2 & 255);
HXDLIN( 134)					int aB1 = ((color1 >> 24) & 255);
HXDLIN( 134)					int rB1 = ((color1 >> 16) & 255);
HXDLIN( 134)					int gB1 = ((color1 >> 8) & 255);
HXDLIN( 134)					int bB1 = (color1 & 255);
HXDLIN( 134)					int aC1 = ((color2 >> 24) & 255);
HXDLIN( 134)					int rC1 = ((color2 >> 16) & 255);
HXDLIN( 134)					int gC1 = ((color2 >> 8) & 255);
HXDLIN( 134)					int bC1 = (color2 & 255);
HXDLIN( 134)					Float bcx1 = (cx - dx);
HXDLIN( 134)					Float bcy1 = (cy - dy);
HXDLIN( 134)					Float acx1 = (bx - dx);
HXDLIN( 134)					Float acy1 = (by - dy);
HXDLIN( 134)					Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 134)					Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 134)					Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 134)					Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 134)					 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 134)					if ((bx > cx)) {
HXLINE( 134)						if ((bx > dx)) {
HXLINE( 134)							int min4;
HXDLIN( 134)							if ((cx > dx)) {
HXLINE( 134)								min4 = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE( 134)								min4 = ::Math_obj::floor(cx);
            							}
HXDLIN( 134)							int ii_min8 = min4;
HXDLIN( 134)							int ii_max8 = ::Math_obj::ceil(bx);
HXDLIN( 134)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            						}
            						else {
HXLINE( 134)							int ii_min9 = ::Math_obj::floor(cx);
HXDLIN( 134)							int ii_max9 = ::Math_obj::ceil(dx);
HXDLIN( 134)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            						}
            					}
            					else {
HXLINE( 134)						if ((cx > dx)) {
HXLINE( 134)							int min5;
HXDLIN( 134)							if ((bx > dx)) {
HXLINE( 134)								min5 = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE( 134)								min5 = ::Math_obj::ceil(bx);
            							}
HXDLIN( 134)							int ii_min10 = min5;
HXDLIN( 134)							int ii_max10 = ::Math_obj::ceil(cx);
HXDLIN( 134)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            						}
            						else {
HXLINE( 134)							int ii_min11 = ::Math_obj::floor(bx);
HXDLIN( 134)							int ii_max11 = ::Math_obj::ceil(dx);
HXDLIN( 134)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            						}
            					}
HXDLIN( 134)					 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 134)					if ((by > cy)) {
HXLINE( 134)						if ((by > dy)) {
HXLINE( 134)							int min6;
HXDLIN( 134)							if ((cy > dy)) {
HXLINE( 134)								min6 = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE( 134)								min6 = ::Math_obj::floor(cy);
            							}
HXDLIN( 134)							int ii_min12 = min6;
HXDLIN( 134)							int ii_max12 = ::Math_obj::ceil(by);
HXDLIN( 134)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            						}
            						else {
HXLINE( 134)							int ii_min13 = ::Math_obj::floor(cy);
HXDLIN( 134)							int ii_max13 = ::Math_obj::ceil(dy);
HXDLIN( 134)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            						}
            					}
            					else {
HXLINE( 134)						if ((cy > dy)) {
HXLINE( 134)							int min7;
HXDLIN( 134)							if ((by > dy)) {
HXLINE( 134)								min7 = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE( 134)								min7 = ::Math_obj::ceil(by);
            							}
HXDLIN( 134)							int ii_min14 = min7;
HXDLIN( 134)							int ii_max14 = ::Math_obj::ceil(cy);
HXDLIN( 134)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            						}
            						else {
HXLINE( 134)							int ii_min15 = ::Math_obj::floor(by);
HXDLIN( 134)							int ii_max15 = ::Math_obj::ceil(dy);
HXDLIN( 134)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            						}
            					}
HXDLIN( 134)					 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 134)					if (hasUndo1) {
HXLINE( 134)						int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 134)						int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 134)						 ::Dynamic imageType1 = null();
HXDLIN( 134)						 ::pi_xy::ImageStruct this32 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 134)						if (::hx::IsNull( imageType1 )) {
HXLINE(  54)							imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 134)						::Dynamic undoImage4;
HXDLIN( 134)						switch((int)(( (int)(imageType1) ))){
            							case (int)0: {
HXLINE( 134)								 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 134)								 ::iterMagic::BytesImg b6 = byt1;
HXDLIN( 134)								{
HXLINE( 134)									b6->width = width1;
HXDLIN( 134)									b6->height = height1;
HXDLIN( 134)									b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 134)									b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 134)									{
HXLINE( 134)										int len2 = b6->length;
HXDLIN( 134)										int w1 = 0;
HXDLIN( 134)										{
HXLINE( 134)											int _g20 = 0;
HXDLIN( 134)											int _g21 = b6->height;
HXDLIN( 134)											while((_g20 < _g21)){
HXLINE( 134)												_g20 = (_g20 + 1);
HXDLIN( 134)												int y3 = (_g20 - 1);
HXDLIN( 134)												{
HXLINE( 134)													int _g22 = 0;
HXDLIN( 134)													int _g23 = b6->width;
HXDLIN( 134)													while((_g22 < _g23)){
HXLINE( 134)														_g22 = (_g22 + 1);
HXDLIN( 134)														int x3 = (_g22 - 1);
HXDLIN( 134)														{
HXLINE( 134)															w1 = (w1 + 1);
HXDLIN( 134)															b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 134)														{
HXLINE( 134)															w1 = (w1 + 1);
HXDLIN( 134)															b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 134)														{
HXLINE( 134)															w1 = (w1 + 1);
HXDLIN( 134)															b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 134)														{
HXLINE( 134)															w1 = (w1 + 1);
HXDLIN( 134)															b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 134)								undoImage4 = b6;
            							}
            							break;
            							case (int)1: {
HXLINE( 134)								 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 134)								 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN( 134)								{
HXLINE( 134)									a7->width = width1;
HXDLIN( 134)									a7->height = height1;
HXDLIN( 134)									a7->data = ::Array_obj< int >::__new(0);
HXDLIN( 134)									a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 134)									{
HXLINE( 134)										int _g24 = 0;
HXDLIN( 134)										int _g25 = a7->length;
HXDLIN( 134)										while((_g24 < _g25)){
HXLINE( 134)											_g24 = (_g24 + 1);
HXDLIN( 134)											int i10 = (_g24 - 1);
HXDLIN( 134)											a7->data[i10] = 0;
            										}
            									}
            								}
HXDLIN( 134)								undoImage4 = a7;
            							}
            							break;
            							case (int)2: {
HXLINE( 134)								 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 134)								 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN( 134)								{
HXLINE( 134)									b7->width = width1;
HXDLIN( 134)									b7->height = height1;
HXDLIN( 134)									b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 134)									int size1 = (b7->length * 4);
HXDLIN( 134)									b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 134)									{
HXLINE( 134)										int _g26 = 0;
HXDLIN( 134)										int _g27 = b7->length;
HXDLIN( 134)										while((_g26 < _g27)){
HXLINE( 134)											_g26 = (_g26 + 1);
HXDLIN( 134)											int i11 = (_g26 - 1);
HXDLIN( 134)											{
HXLINE( 134)												 ::haxe::io::ArrayBufferViewImpl this33 = b7->data;
HXDLIN( 134)												bool undoImage5;
HXDLIN( 134)												if ((i11 >= 0)) {
HXLINE( 134)													undoImage5 = (i11 < (this33->byteLength >> 2));
            												}
            												else {
HXLINE( 134)													undoImage5 = false;
            												}
HXDLIN( 134)												if (undoImage5) {
HXLINE( 134)													 ::haxe::io::Bytes _this1 = this33->bytes;
HXDLIN( 134)													int pos1 = ((i11 << 2) + this33->byteOffset);
HXDLIN( 134)													_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 134)													_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 134)													_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 134)													_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 134)								undoImage4 = b7;
            							}
            							break;
            							case (int)3: {
HXLINE( 134)								 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 134)								 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 134)								{
HXLINE( 134)									v2->width = width1;
HXDLIN( 134)									v2->height = height1;
HXDLIN( 134)									v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 134)									v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 134)									{
HXLINE( 134)										int _g28 = 0;
HXDLIN( 134)										int _g29 = v2->length;
HXDLIN( 134)										while((_g28 < _g29)){
HXLINE( 134)											_g28 = (_g28 + 1);
HXDLIN( 134)											int i12 = (_g28 - 1);
HXDLIN( 134)											v2->data->__unsafe_set(i12,0);
            										}
            									}
            								}
HXDLIN( 134)								undoImage4 = v2;
            							}
            							break;
            							case (int)4: {
HXLINE( 134)								 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 134)								 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN( 134)								{
HXLINE( 134)									b8->width = width1;
HXDLIN( 134)									b8->height = height1;
HXDLIN( 134)									b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 134)									b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 134)									{
HXLINE( 134)										int len3 = b8->length;
HXDLIN( 134)										 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN( 134)										if (::hx::IsNull( d1->head )) {
HXLINE( 134)											int _g30 = 0;
HXDLIN( 134)											int _g31 = len3;
HXDLIN( 134)											while((_g30 < _g31)){
HXLINE( 134)												_g30 = (_g30 + 1);
HXDLIN( 134)												int i13 = (_g30 - 1);
HXDLIN( 134)												d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            											}
            										}
            										else {
HXLINE( 134)											int _g32 = 0;
HXDLIN( 134)											int _g33 = len3;
HXDLIN( 134)											while((_g32 < _g33)){
HXLINE( 134)												_g32 = (_g32 + 1);
HXDLIN( 134)												int i14 = (_g32 - 1);
HXDLIN( 134)												{
HXLINE( 134)													 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN( 134)													 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 134)													{
HXLINE( 134)														int _g34 = 0;
HXDLIN( 134)														int _g35 = i14;
HXDLIN( 134)														while((_g34 < _g35)){
HXLINE( 134)															_g34 = (_g34 + 1);
HXDLIN( 134)															int i15 = (_g34 - 1);
HXLINE( 345)															prev1 = l1;
HXLINE( 346)															l1 = l1->next;
            														}
            													}
HXLINE( 134)													if (::hx::IsNull( prev1 )) {
HXLINE( 134)														b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 134)														l1 = null();
            													}
            													else {
HXLINE( 134)														prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 134)														l1 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 134)								undoImage4 = b8;
            							}
            							break;
            						}
HXDLIN( 134)						this32->image = undoImage4;
HXDLIN( 134)						this32->width = width1;
HXDLIN( 134)						this32->height = height1;
HXDLIN( 134)						this32->imageType = ( (int)(imageType1) );
HXDLIN( 134)						undoImage3 = this32;
HXDLIN( 134)						{
HXLINE( 134)							int rectLeft1 = xIter31->start;
HXDLIN( 134)							int rectTop1 = yIter31->start;
HXDLIN( 134)							int rectRight1 = xIter31->max;
HXDLIN( 134)							bool forceClear1 = false;
HXDLIN( 134)							{
HXLINE( 134)								int _g36 = rectTop1;
HXDLIN( 134)								int _g37 = yIter31->max;
HXDLIN( 134)								while((_g36 < _g37)){
HXLINE( 134)									_g36 = (_g36 + 1);
HXDLIN( 134)									int dy2 = (_g36 - 1);
HXDLIN( 134)									{
HXLINE( 134)										int _g38 = rectLeft1;
HXDLIN( 134)										int _g39 = rectRight1;
HXDLIN( 134)										while((_g38 < _g39)){
HXLINE( 134)											_g38 = (_g38 + 1);
HXDLIN( 134)											int dx2 = (_g38 - 1);
HXDLIN( 134)											::Dynamic this34 = pixelImage->image;
HXDLIN( 134)											int index4;
HXDLIN( 134)											if (pixelImage->useVirtualPos) {
HXLINE( 134)												index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 134)												index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            											}
HXDLIN( 134)											int c3 = ::iterMagic::Iimg_obj::get(this34,index4);
HXDLIN( 134)											int col1;
HXDLIN( 134)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)												col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            											}
            											else {
HXLINE( 134)												col1 = c3;
            											}
HXDLIN( 134)											bool hitQuad9;
HXDLIN( 134)											if (pixelImage->useMask) {
HXLINE( 134)												hitQuad9 = ::hx::IsNotNull( pixelImage->mask );
            											}
            											else {
HXLINE( 134)												hitQuad9 = false;
            											}
HXDLIN( 134)											if (hitQuad9) {
HXLINE( 134)												 ::pi_xy::ImageStruct this35 = pixelImage->mask;
HXDLIN( 134)												::Dynamic this36 = this35->image;
HXDLIN( 134)												int index5;
HXDLIN( 134)												if (this35->useVirtualPos) {
HXLINE( 134)													index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this35->virtualY) * ( (Float)(this35->width) )) + dx2) - this35->virtualX));
            												}
            												else {
HXLINE( 134)													index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this35->width) + dx2)) ));
            												}
HXDLIN( 134)												int c4 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN( 134)												int v3;
HXDLIN( 134)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)													v3 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            												}
            												else {
HXLINE( 134)													v3 = c4;
            												}
HXDLIN( 134)												int maskPixel1 = v3;
HXDLIN( 134)												int this37 = col1;
HXDLIN( 134)												if ((maskPixel1 == 0)) {
HXLINE( 134)													col1 = this37;
            												}
            												else {
HXLINE( 134)													Float m01;
HXDLIN( 134)													int this38 = ((maskPixel1 >> 24) & 255);
HXDLIN( 134)													if ((this38 == 0)) {
HXLINE( 134)														m01 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														m01 = (( (Float)(this38) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float m11;
HXDLIN( 134)													int this39 = ((maskPixel1 >> 16) & 255);
HXDLIN( 134)													if ((this39 == 0)) {
HXLINE( 134)														m11 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														m11 = (( (Float)(this39) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float m21;
HXDLIN( 134)													int this40 = ((maskPixel1 >> 8) & 255);
HXDLIN( 134)													if ((this40 == 0)) {
HXLINE( 134)														m21 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														m21 = (( (Float)(this40) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float m31;
HXDLIN( 134)													int this41 = (maskPixel1 & 255);
HXDLIN( 134)													if ((this41 == 0)) {
HXLINE( 134)														m31 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														m31 = (( (Float)(this41) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this37 >> 24) & 255)) )));
HXDLIN( 134)													int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this37 >> 16) & 255)) )));
HXDLIN( 134)													int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this37 >> 8) & 255)) )));
HXDLIN( 134)													int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this37 & 255)) )));
HXDLIN( 134)													col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 134)											if ((col1 != 0)) {
HXLINE( 134)												int x4 = (dx2 - rectLeft1);
HXDLIN( 134)												int y4 = (dy2 - rectTop1);
HXDLIN( 134)												int c5 = col1;
HXDLIN( 134)												bool hitQuad10;
HXDLIN( 134)												if ((((c5 >> 24) & 255) < 254)) {
HXLINE( 134)													hitQuad10 = undoImage3->transparent;
            												}
            												else {
HXLINE( 134)													hitQuad10 = false;
            												}
HXDLIN( 134)												if (hitQuad10) {
HXLINE( 134)													int location2;
HXDLIN( 134)													if (undoImage3->useVirtualPos) {
HXLINE( 134)														location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            													}
            													else {
HXLINE( 134)														location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            													}
HXDLIN( 134)													int this42 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 134)													int this43;
HXDLIN( 134)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)														this43 = ((((((this42 >> 24) & 255) << 24) | ((this42 & 255) << 16)) | (((this42 >> 8) & 255) << 8)) | ((this42 >> 16) & 255));
            													}
            													else {
HXLINE( 134)														this43 = this42;
            													}
HXDLIN( 134)													Float a13;
HXDLIN( 134)													int this44 = ((this43 >> 24) & 255);
HXDLIN( 134)													if ((this44 == 0)) {
HXLINE( 134)														a13 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														a13 = (( (Float)(this44) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float r12;
HXDLIN( 134)													int this45 = ((this43 >> 16) & 255);
HXDLIN( 134)													if ((this45 == 0)) {
HXLINE( 134)														r12 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														r12 = (( (Float)(this45) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float g12;
HXDLIN( 134)													int this46 = ((this43 >> 8) & 255);
HXDLIN( 134)													if ((this46 == 0)) {
HXLINE( 134)														g12 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														g12 = (( (Float)(this46) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float b13;
HXDLIN( 134)													int this47 = (this43 & 255);
HXDLIN( 134)													if ((this47 == 0)) {
HXLINE( 134)														b13 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														b13 = (( (Float)(this47) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float a22;
HXDLIN( 134)													int this48 = ((col1 >> 24) & 255);
HXDLIN( 134)													if ((this48 == 0)) {
HXLINE( 134)														a22 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														a22 = (( (Float)(this48) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float r22;
HXDLIN( 134)													int this49 = ((col1 >> 16) & 255);
HXDLIN( 134)													if ((this49 == 0)) {
HXLINE( 134)														r22 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														r22 = (( (Float)(this49) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float g22;
HXDLIN( 134)													int this50 = ((col1 >> 8) & 255);
HXDLIN( 134)													if ((this50 == 0)) {
HXLINE( 134)														g22 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														g22 = (( (Float)(this50) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float b23;
HXDLIN( 134)													int this51 = (col1 & 255);
HXDLIN( 134)													if ((this51 == 0)) {
HXLINE( 134)														b23 = ((Float)0.);
            													}
            													else {
HXLINE( 134)														b23 = (( (Float)(this51) ) / ( (Float)(255) ));
            													}
HXDLIN( 134)													Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 134)													int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 134)													int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 134)													int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 134)													int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 134)													int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN( 134)													{
HXLINE( 134)														int hitQuad11;
HXDLIN( 134)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)															hitQuad11 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            														}
            														else {
HXLINE( 134)															hitQuad11 = blended2;
            														}
HXDLIN( 134)														::iterMagic::Iimg_obj::set(undoImage3->image,location2,hitQuad11);
            													}
            												}
            												else {
HXLINE( 134)													::Dynamic this52 = undoImage3->image;
HXDLIN( 134)													int index6;
HXDLIN( 134)													if (undoImage3->useVirtualPos) {
HXLINE( 134)														index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            													}
            													else {
HXLINE( 134)														index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            													}
HXDLIN( 134)													int hitQuad12;
HXDLIN( 134)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)														hitQuad12 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            													}
            													else {
HXLINE( 134)														hitQuad12 = c5;
            													}
HXDLIN( 134)													::iterMagic::Iimg_obj::set(this52,index6,hitQuad12);
            												}
            											}
            											else {
HXLINE( 134)												if (forceClear1) {
HXLINE( 134)													::Dynamic this53 = undoImage3->image;
HXDLIN( 134)													int x5 = (dx2 - rectLeft1);
HXDLIN( 134)													int y5 = (dy2 - rectTop1);
HXDLIN( 134)													int index7;
HXDLIN( 134)													if (undoImage3->useVirtualPos) {
HXLINE( 134)														index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            													}
            													else {
HXLINE( 134)														index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            													}
HXDLIN( 134)													::iterMagic::Iimg_obj::set(this53,index7,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 134)					{
HXLINE( 134)						int _g_min2 = xIter31->start;
HXDLIN( 134)						int _g_max2 = xIter31->max;
HXDLIN( 134)						while((_g_min2 < _g_max2)){
HXLINE( 134)							_g_min2 = (_g_min2 + 1);
HXDLIN( 134)							int px2 = (_g_min2 - 1);
HXDLIN( 134)							Float pcx1 = (( (Float)(px2) ) - dx);
HXDLIN( 134)							{
HXLINE( 134)								int _g_min3 = yIter31->start;
HXDLIN( 134)								int _g_max3 = yIter31->max;
HXDLIN( 134)								while((_g_min3 < _g_max3)){
HXLINE( 134)									_g_min3 = (_g_min3 + 1);
HXDLIN( 134)									int py2 = (_g_min3 - 1);
HXDLIN( 134)									Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN( 134)									Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 134)									Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 134)									Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 134)									Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 134)									Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 134)									bool hitQuad13;
HXDLIN( 134)									bool hitQuad14;
HXDLIN( 134)									if ((ratioA1 >= 0)) {
HXLINE( 134)										hitQuad14 = (ratioB1 >= 0);
            									}
            									else {
HXLINE( 134)										hitQuad14 = false;
            									}
HXDLIN( 134)									if (hitQuad14) {
HXLINE( 134)										hitQuad13 = (ratioC1 >= 0);
            									}
            									else {
HXLINE( 134)										hitQuad13 = false;
            									}
HXDLIN( 134)									if (hitQuad13) {
HXLINE( 134)										int i16 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA1) + (( (Float)(aB1) ) * ratioB1)) + (( (Float)(aC1) ) * ratioC1)));
HXDLIN( 134)										if ((i16 > 255)) {
HXLINE(  24)											i16 = 255;
            										}
HXLINE( 134)										if ((i16 < 0)) {
HXLINE(  25)											i16 = 0;
            										}
HXLINE( 134)										int a9 = i16;
HXDLIN( 134)										int i17 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA1) + (( (Float)(rB1) ) * ratioB1)) + (( (Float)(rC1) ) * ratioC1)));
HXDLIN( 134)										if ((i17 > 255)) {
HXLINE(  24)											i17 = 255;
            										}
HXLINE( 134)										if ((i17 < 0)) {
HXLINE(  25)											i17 = 0;
            										}
HXLINE( 134)										int r6 = i17;
HXDLIN( 134)										int i18 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA1) + (( (Float)(gB1) ) * ratioB1)) + (( (Float)(gC1) ) * ratioC1)));
HXDLIN( 134)										if ((i18 > 255)) {
HXLINE(  24)											i18 = 255;
            										}
HXLINE( 134)										if ((i18 < 0)) {
HXLINE(  25)											i18 = 0;
            										}
HXLINE( 134)										int g6 = i18;
HXDLIN( 134)										int i19 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA1) + (( (Float)(bB1) ) * ratioB1)) + (( (Float)(bC1) ) * ratioC1)));
HXDLIN( 134)										if ((i19 > 255)) {
HXLINE(  24)											i19 = 255;
            										}
HXLINE( 134)										if ((i19 < 0)) {
HXLINE(  25)											i19 = 0;
            										}
HXLINE( 134)										int b10 = i19;
HXDLIN( 134)										{
HXLINE( 134)											int location3;
HXDLIN( 134)											if (pixelImage->useVirtualPos) {
HXLINE( 134)												location3 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 134)												location3 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            											}
HXDLIN( 134)											bool hitQuad15;
HXDLIN( 134)											if (pixelImage->transparent) {
HXLINE( 134)												hitQuad15 = (a9 < 254);
            											}
            											else {
HXLINE( 134)												hitQuad15 = false;
            											}
HXDLIN( 134)											if (hitQuad15) {
HXLINE( 134)												int this54 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN( 134)												int old1;
HXDLIN( 134)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)													old1 = ((((((this54 >> 24) & 255) << 24) | ((this54 & 255) << 16)) | (((this54 >> 8) & 255) << 8)) | ((this54 >> 16) & 255));
            												}
            												else {
HXLINE( 134)													old1 = this54;
            												}
HXDLIN( 134)												int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 134)												Float a14;
HXDLIN( 134)												int this55 = ((old1 >> 24) & 255);
HXDLIN( 134)												if ((this55 == 0)) {
HXLINE( 134)													a14 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													a14 = (( (Float)(this55) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float r13;
HXDLIN( 134)												int this56 = ((old1 >> 16) & 255);
HXDLIN( 134)												if ((this56 == 0)) {
HXLINE( 134)													r13 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													r13 = (( (Float)(this56) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float g13;
HXDLIN( 134)												int this57 = ((old1 >> 8) & 255);
HXDLIN( 134)												if ((this57 == 0)) {
HXLINE( 134)													g13 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													g13 = (( (Float)(this57) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float b14;
HXDLIN( 134)												int this58 = (old1 & 255);
HXDLIN( 134)												if ((this58 == 0)) {
HXLINE( 134)													b14 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													b14 = (( (Float)(this58) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float a23;
HXDLIN( 134)												int this59 = ((rhs1 >> 24) & 255);
HXDLIN( 134)												if ((this59 == 0)) {
HXLINE( 134)													a23 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													a23 = (( (Float)(this59) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float r23;
HXDLIN( 134)												int this60 = ((rhs1 >> 16) & 255);
HXDLIN( 134)												if ((this60 == 0)) {
HXLINE( 134)													r23 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													r23 = (( (Float)(this60) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float g23;
HXDLIN( 134)												int this61 = ((rhs1 >> 8) & 255);
HXDLIN( 134)												if ((this61 == 0)) {
HXLINE( 134)													g23 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													g23 = (( (Float)(this61) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float b24;
HXDLIN( 134)												int this62 = (rhs1 & 255);
HXDLIN( 134)												if ((this62 == 0)) {
HXLINE( 134)													b24 = ((Float)0.);
            												}
            												else {
HXLINE( 134)													b24 = (( (Float)(this62) ) / ( (Float)(255) ));
            												}
HXDLIN( 134)												Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 134)												int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 134)												int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 134)												int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 134)												int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 134)												int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN( 134)												{
HXLINE( 134)													int hitQuad16;
HXDLIN( 134)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 134)														hitQuad16 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            													}
            													else {
HXLINE( 134)														hitQuad16 = blended3;
            													}
HXDLIN( 134)													::iterMagic::Iimg_obj::set(pixelImage->image,location3,hitQuad16);
            												}
            											}
            											else {
HXLINE( 134)												int value1;
HXDLIN( 134)												if (pixelImage->isLittle) {
HXLINE( 134)													value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            												}
            												else {
HXLINE( 134)													value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            												}
HXDLIN( 134)												::iterMagic::Iimg_obj::set(pixelImage->image,location3,value1);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 134)					if ((hasHit1 == false)) {
HXLINE( 134)						 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,cx,cy,dx,dy,true);
HXDLIN( 134)						if (hasUndo1) {
HXLINE( 134)							v4->undoImage = undoImage3;
HXDLIN( 134)							v4->undoX = xIter31->start;
HXDLIN( 134)							v4->undoY = yIter31->start;
            						}
            					}
            				}
HXDLIN( 134)				 ::pi_xy::algo::HitQuad v5 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXLINE( 132)				hitQuad = v5;
            			}
            			else {
HXLINE( 136)				Float sin2 = ::Math_obj::sin(theta);
HXDLIN( 136)				Float cos2 = ::Math_obj::cos(theta);
HXDLIN( 136)				Float radius11 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN( 136)				Float radius22 = (thick / ( (Float)(2) ));
HXDLIN( 136)				Float dx3 = ((Float)0.1);
HXDLIN( 136)				Float dy3 = radius11;
HXDLIN( 136)				Float cx1 = h2;
HXDLIN( 136)				Float cy1 = radius22;
HXDLIN( 136)				Float bx1 = h2;
HXDLIN( 136)				Float by1 = -(radius22);
HXDLIN( 136)				Float ax1 = ((Float)0.1);
HXDLIN( 136)				Float ay1 = -(radius11);
HXDLIN( 136)				Float temp1 = ((Float)0.);
HXLINE( 525)				temp1 = (px + ((ax1 * cos2) - (ay1 * sin2)));
HXLINE( 526)				ay1 = (py + ((ay1 * cos2) + (ax1 * sin2)));
HXLINE( 527)				ax1 = temp1;
HXLINE( 529)				temp1 = (px + ((bx1 * cos2) - (by1 * sin2)));
HXLINE( 530)				by1 = (py + ((by1 * cos2) + (bx1 * sin2)));
HXLINE( 531)				bx1 = temp1;
HXLINE( 533)				temp1 = (px + ((cx1 * cos2) - (cy1 * sin2)));
HXLINE( 534)				cy1 = (py + ((cy1 * cos2) + (cx1 * sin2)));
HXLINE( 535)				cx1 = temp1;
HXLINE( 537)				temp1 = (px + ((dx3 * cos2) - (dy3 * sin2)));
HXLINE( 538)				dy3 = (py + ((dy3 * cos2) + (dx3 * sin2)));
HXLINE( 539)				dx3 = temp1;
HXLINE( 136)				{
HXLINE( 136)					bool hasUndo2 = false;
HXDLIN( 136)					int aA2 = ((color1 >> 24) & 255);
HXDLIN( 136)					int rA2 = ((color1 >> 16) & 255);
HXDLIN( 136)					int gA2 = ((color1 >> 8) & 255);
HXDLIN( 136)					int bA2 = (color1 & 255);
HXDLIN( 136)					int aB2 = ((color1 >> 24) & 255);
HXDLIN( 136)					int rB2 = ((color1 >> 16) & 255);
HXDLIN( 136)					int gB2 = ((color1 >> 8) & 255);
HXDLIN( 136)					int bB2 = (color1 & 255);
HXDLIN( 136)					int aC2 = ((color2 >> 24) & 255);
HXDLIN( 136)					int rC2 = ((color2 >> 16) & 255);
HXDLIN( 136)					int gC2 = ((color2 >> 8) & 255);
HXDLIN( 136)					int bC2 = (color2 & 255);
HXDLIN( 136)					Float bcx2 = (bx1 - dx3);
HXDLIN( 136)					Float bcy2 = (by1 - dy3);
HXDLIN( 136)					Float acx2 = (ax1 - dx3);
HXDLIN( 136)					Float acy2 = (ay1 - dy3);
HXDLIN( 136)					Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 136)					Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 136)					Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 136)					Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 136)					 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 136)					if ((ax1 > bx1)) {
HXLINE( 136)						if ((ax1 > dx3)) {
HXLINE( 136)							int min8;
HXDLIN( 136)							if ((bx1 > dx3)) {
HXLINE( 136)								min8 = ::Math_obj::floor(dx3);
            							}
            							else {
HXLINE( 136)								min8 = ::Math_obj::floor(bx1);
            							}
HXDLIN( 136)							int ii_min16 = min8;
HXDLIN( 136)							int ii_max16 = ::Math_obj::ceil(ax1);
HXDLIN( 136)							xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            						}
            						else {
HXLINE( 136)							int ii_min17 = ::Math_obj::floor(bx1);
HXDLIN( 136)							int ii_max17 = ::Math_obj::ceil(dx3);
HXDLIN( 136)							xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            						}
            					}
            					else {
HXLINE( 136)						if ((bx1 > dx3)) {
HXLINE( 136)							int min9;
HXDLIN( 136)							if ((ax1 > dx3)) {
HXLINE( 136)								min9 = ::Math_obj::floor(dx3);
            							}
            							else {
HXLINE( 136)								min9 = ::Math_obj::ceil(ax1);
            							}
HXDLIN( 136)							int ii_min18 = min9;
HXDLIN( 136)							int ii_max18 = ::Math_obj::ceil(bx1);
HXDLIN( 136)							xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            						}
            						else {
HXLINE( 136)							int ii_min19 = ::Math_obj::floor(ax1);
HXDLIN( 136)							int ii_max19 = ::Math_obj::ceil(dx3);
HXDLIN( 136)							xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            						}
            					}
HXDLIN( 136)					 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 136)					if ((ay1 > by1)) {
HXLINE( 136)						if ((ay1 > dy3)) {
HXLINE( 136)							int min10;
HXDLIN( 136)							if ((by1 > dy3)) {
HXLINE( 136)								min10 = ::Math_obj::floor(dy3);
            							}
            							else {
HXLINE( 136)								min10 = ::Math_obj::floor(by1);
            							}
HXDLIN( 136)							int ii_min20 = min10;
HXDLIN( 136)							int ii_max20 = ::Math_obj::ceil(ay1);
HXDLIN( 136)							yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            						}
            						else {
HXLINE( 136)							int ii_min21 = ::Math_obj::floor(by1);
HXDLIN( 136)							int ii_max21 = ::Math_obj::ceil(dy3);
HXDLIN( 136)							yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            						}
            					}
            					else {
HXLINE( 136)						if ((by1 > dy3)) {
HXLINE( 136)							int min11;
HXDLIN( 136)							if ((ay1 > dy3)) {
HXLINE( 136)								min11 = ::Math_obj::floor(dy3);
            							}
            							else {
HXLINE( 136)								min11 = ::Math_obj::ceil(ay1);
            							}
HXDLIN( 136)							int ii_min22 = min11;
HXDLIN( 136)							int ii_max22 = ::Math_obj::ceil(by1);
HXDLIN( 136)							yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            						}
            						else {
HXLINE( 136)							int ii_min23 = ::Math_obj::floor(ay1);
HXDLIN( 136)							int ii_max23 = ::Math_obj::ceil(dy3);
HXDLIN( 136)							yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            						}
            					}
HXDLIN( 136)					 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 136)					if (hasUndo2) {
HXLINE( 136)						int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 136)						int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 136)						 ::Dynamic imageType2 = null();
HXDLIN( 136)						 ::pi_xy::ImageStruct this63 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 136)						if (::hx::IsNull( imageType2 )) {
HXLINE(  54)							imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 136)						::Dynamic undoImage7;
HXDLIN( 136)						switch((int)(( (int)(imageType2) ))){
            							case (int)0: {
HXLINE( 136)								 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 136)								 ::iterMagic::BytesImg b16 = byt2;
HXDLIN( 136)								{
HXLINE( 136)									b16->width = width2;
HXDLIN( 136)									b16->height = height2;
HXDLIN( 136)									b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 136)									b16->data = ::haxe::io::Bytes_obj::alloc((b16->length * 4));
HXDLIN( 136)									{
HXLINE( 136)										int len4 = b16->length;
HXDLIN( 136)										int w2 = 0;
HXDLIN( 136)										{
HXLINE( 136)											int _g40 = 0;
HXDLIN( 136)											int _g41 = b16->height;
HXDLIN( 136)											while((_g40 < _g41)){
HXLINE( 136)												_g40 = (_g40 + 1);
HXDLIN( 136)												int y6 = (_g40 - 1);
HXDLIN( 136)												{
HXLINE( 136)													int _g42 = 0;
HXDLIN( 136)													int _g43 = b16->width;
HXDLIN( 136)													while((_g42 < _g43)){
HXLINE( 136)														_g42 = (_g42 + 1);
HXDLIN( 136)														int x6 = (_g42 - 1);
HXDLIN( 136)														{
HXLINE( 136)															w2 = (w2 + 1);
HXDLIN( 136)															b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 136)														{
HXLINE( 136)															w2 = (w2 + 1);
HXDLIN( 136)															b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 136)														{
HXLINE( 136)															w2 = (w2 + 1);
HXDLIN( 136)															b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 136)														{
HXLINE( 136)															w2 = (w2 + 1);
HXDLIN( 136)															b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 136)								undoImage7 = b16;
            							}
            							break;
            							case (int)1: {
HXLINE( 136)								 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 136)								 ::iterMagic::ArrIntImg a15 = arrI2;
HXDLIN( 136)								{
HXLINE( 136)									a15->width = width2;
HXDLIN( 136)									a15->height = height2;
HXDLIN( 136)									a15->data = ::Array_obj< int >::__new(0);
HXDLIN( 136)									a15->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 136)									{
HXLINE( 136)										int _g44 = 0;
HXDLIN( 136)										int _g45 = a15->length;
HXDLIN( 136)										while((_g44 < _g45)){
HXLINE( 136)											_g44 = (_g44 + 1);
HXDLIN( 136)											int i20 = (_g44 - 1);
HXDLIN( 136)											a15->data[i20] = 0;
            										}
            									}
            								}
HXDLIN( 136)								undoImage7 = a15;
            							}
            							break;
            							case (int)2: {
HXLINE( 136)								 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 136)								 ::iterMagic::U32ArrImg b17 = u32a2;
HXDLIN( 136)								{
HXLINE( 136)									b17->width = width2;
HXDLIN( 136)									b17->height = height2;
HXDLIN( 136)									b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 136)									int size2 = (b17->length * 4);
HXDLIN( 136)									b17->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 136)									{
HXLINE( 136)										int _g46 = 0;
HXDLIN( 136)										int _g47 = b17->length;
HXDLIN( 136)										while((_g46 < _g47)){
HXLINE( 136)											_g46 = (_g46 + 1);
HXDLIN( 136)											int i21 = (_g46 - 1);
HXDLIN( 136)											{
HXLINE( 136)												 ::haxe::io::ArrayBufferViewImpl this64 = b17->data;
HXDLIN( 136)												bool undoImage8;
HXDLIN( 136)												if ((i21 >= 0)) {
HXLINE( 136)													undoImage8 = (i21 < (this64->byteLength >> 2));
            												}
            												else {
HXLINE( 136)													undoImage8 = false;
            												}
HXDLIN( 136)												if (undoImage8) {
HXLINE( 136)													 ::haxe::io::Bytes _this2 = this64->bytes;
HXDLIN( 136)													int pos2 = ((i21 << 2) + this64->byteOffset);
HXDLIN( 136)													_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 136)													_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 136)													_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 136)													_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 136)								undoImage7 = b17;
            							}
            							break;
            							case (int)3: {
HXLINE( 136)								 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 136)								 ::iterMagic::VecIntImg v6 = vec2;
HXDLIN( 136)								{
HXLINE( 136)									v6->width = width2;
HXDLIN( 136)									v6->height = height2;
HXDLIN( 136)									v6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 136)									v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN( 136)									{
HXLINE( 136)										int _g48 = 0;
HXDLIN( 136)										int _g49 = v6->length;
HXDLIN( 136)										while((_g48 < _g49)){
HXLINE( 136)											_g48 = (_g48 + 1);
HXDLIN( 136)											int i22 = (_g48 - 1);
HXDLIN( 136)											v6->data->__unsafe_set(i22,0);
            										}
            									}
            								}
HXDLIN( 136)								undoImage7 = v6;
            							}
            							break;
            							case (int)4: {
HXLINE( 136)								 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 136)								 ::iterMagic::StackIntImg b18 = sInt2;
HXDLIN( 136)								{
HXLINE( 136)									b18->width = width2;
HXDLIN( 136)									b18->height = height2;
HXDLIN( 136)									b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 136)									b18->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 136)									{
HXLINE( 136)										int len5 = b18->length;
HXDLIN( 136)										 ::haxe::ds::GenericStack_Int d2 = b18->data;
HXDLIN( 136)										if (::hx::IsNull( d2->head )) {
HXLINE( 136)											int _g50 = 0;
HXDLIN( 136)											int _g51 = len5;
HXDLIN( 136)											while((_g50 < _g51)){
HXLINE( 136)												_g50 = (_g50 + 1);
HXDLIN( 136)												int i23 = (_g50 - 1);
HXDLIN( 136)												d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            											}
            										}
            										else {
HXLINE( 136)											int _g52 = 0;
HXDLIN( 136)											int _g53 = len5;
HXDLIN( 136)											while((_g52 < _g53)){
HXLINE( 136)												_g52 = (_g52 + 1);
HXDLIN( 136)												int i24 = (_g52 - 1);
HXDLIN( 136)												{
HXLINE( 136)													 ::haxe::ds::GenericCell_Int l2 = b18->data->head;
HXDLIN( 136)													 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 136)													{
HXLINE( 136)														int _g54 = 0;
HXDLIN( 136)														int _g55 = i24;
HXDLIN( 136)														while((_g54 < _g55)){
HXLINE( 136)															_g54 = (_g54 + 1);
HXDLIN( 136)															int i25 = (_g54 - 1);
HXLINE( 345)															prev2 = l2;
HXLINE( 346)															l2 = l2->next;
            														}
            													}
HXLINE( 136)													if (::hx::IsNull( prev2 )) {
HXLINE( 136)														b18->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 136)														l2 = null();
            													}
            													else {
HXLINE( 136)														prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 136)														l2 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 136)								undoImage7 = b18;
            							}
            							break;
            						}
HXDLIN( 136)						this63->image = undoImage7;
HXDLIN( 136)						this63->width = width2;
HXDLIN( 136)						this63->height = height2;
HXDLIN( 136)						this63->imageType = ( (int)(imageType2) );
HXDLIN( 136)						undoImage6 = this63;
HXDLIN( 136)						{
HXLINE( 136)							int rectLeft2 = xIter32->start;
HXDLIN( 136)							int rectTop2 = yIter32->start;
HXDLIN( 136)							int rectRight2 = xIter32->max;
HXDLIN( 136)							bool forceClear2 = false;
HXDLIN( 136)							{
HXLINE( 136)								int _g56 = rectTop2;
HXDLIN( 136)								int _g57 = yIter32->max;
HXDLIN( 136)								while((_g56 < _g57)){
HXLINE( 136)									_g56 = (_g56 + 1);
HXDLIN( 136)									int dy4 = (_g56 - 1);
HXDLIN( 136)									{
HXLINE( 136)										int _g58 = rectLeft2;
HXDLIN( 136)										int _g59 = rectRight2;
HXDLIN( 136)										while((_g58 < _g59)){
HXLINE( 136)											_g58 = (_g58 + 1);
HXDLIN( 136)											int dx4 = (_g58 - 1);
HXDLIN( 136)											::Dynamic this65 = pixelImage->image;
HXDLIN( 136)											int index8;
HXDLIN( 136)											if (pixelImage->useVirtualPos) {
HXLINE( 136)												index8 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 136)												index8 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            											}
HXDLIN( 136)											int c6 = ::iterMagic::Iimg_obj::get(this65,index8);
HXDLIN( 136)											int col2;
HXDLIN( 136)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)												col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            											}
            											else {
HXLINE( 136)												col2 = c6;
            											}
HXDLIN( 136)											bool hitQuad17;
HXDLIN( 136)											if (pixelImage->useMask) {
HXLINE( 136)												hitQuad17 = ::hx::IsNotNull( pixelImage->mask );
            											}
            											else {
HXLINE( 136)												hitQuad17 = false;
            											}
HXDLIN( 136)											if (hitQuad17) {
HXLINE( 136)												 ::pi_xy::ImageStruct this66 = pixelImage->mask;
HXDLIN( 136)												::Dynamic this67 = this66->image;
HXDLIN( 136)												int index9;
HXDLIN( 136)												if (this66->useVirtualPos) {
HXLINE( 136)													index9 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this66->virtualY) * ( (Float)(this66->width) )) + dx4) - this66->virtualX));
            												}
            												else {
HXLINE( 136)													index9 = ::Std_obj::_hx_int(( (Float)(((dy4 * this66->width) + dx4)) ));
            												}
HXDLIN( 136)												int c7 = ::iterMagic::Iimg_obj::get(this67,index9);
HXDLIN( 136)												int v7;
HXDLIN( 136)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)													v7 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            												}
            												else {
HXLINE( 136)													v7 = c7;
            												}
HXDLIN( 136)												int maskPixel2 = v7;
HXDLIN( 136)												int this68 = col2;
HXDLIN( 136)												if ((maskPixel2 == 0)) {
HXLINE( 136)													col2 = this68;
            												}
            												else {
HXLINE( 136)													Float m02;
HXDLIN( 136)													int this69 = ((maskPixel2 >> 24) & 255);
HXDLIN( 136)													if ((this69 == 0)) {
HXLINE( 136)														m02 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														m02 = (( (Float)(this69) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float m12;
HXDLIN( 136)													int this70 = ((maskPixel2 >> 16) & 255);
HXDLIN( 136)													if ((this70 == 0)) {
HXLINE( 136)														m12 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														m12 = (( (Float)(this70) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float m22;
HXDLIN( 136)													int this71 = ((maskPixel2 >> 8) & 255);
HXDLIN( 136)													if ((this71 == 0)) {
HXLINE( 136)														m22 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														m22 = (( (Float)(this71) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float m32;
HXDLIN( 136)													int this72 = (maskPixel2 & 255);
HXDLIN( 136)													if ((this72 == 0)) {
HXLINE( 136)														m32 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														m32 = (( (Float)(this72) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this68 >> 24) & 255)) )));
HXDLIN( 136)													int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this68 >> 16) & 255)) )));
HXDLIN( 136)													int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this68 >> 8) & 255)) )));
HXDLIN( 136)													int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this68 & 255)) )));
HXDLIN( 136)													col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 136)											if ((col2 != 0)) {
HXLINE( 136)												int x7 = (dx4 - rectLeft2);
HXDLIN( 136)												int y7 = (dy4 - rectTop2);
HXDLIN( 136)												int c8 = col2;
HXDLIN( 136)												bool hitQuad18;
HXDLIN( 136)												if ((((c8 >> 24) & 255) < 254)) {
HXLINE( 136)													hitQuad18 = undoImage6->transparent;
            												}
            												else {
HXLINE( 136)													hitQuad18 = false;
            												}
HXDLIN( 136)												if (hitQuad18) {
HXLINE( 136)													int location4;
HXDLIN( 136)													if (undoImage6->useVirtualPos) {
HXLINE( 136)														location4 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            													}
            													else {
HXLINE( 136)														location4 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            													}
HXDLIN( 136)													int this73 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 136)													int this74;
HXDLIN( 136)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)														this74 = ((((((this73 >> 24) & 255) << 24) | ((this73 & 255) << 16)) | (((this73 >> 8) & 255) << 8)) | ((this73 >> 16) & 255));
            													}
            													else {
HXLINE( 136)														this74 = this73;
            													}
HXDLIN( 136)													Float a16;
HXDLIN( 136)													int this75 = ((this74 >> 24) & 255);
HXDLIN( 136)													if ((this75 == 0)) {
HXLINE( 136)														a16 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														a16 = (( (Float)(this75) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float r14;
HXDLIN( 136)													int this76 = ((this74 >> 16) & 255);
HXDLIN( 136)													if ((this76 == 0)) {
HXLINE( 136)														r14 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														r14 = (( (Float)(this76) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float g14;
HXDLIN( 136)													int this77 = ((this74 >> 8) & 255);
HXDLIN( 136)													if ((this77 == 0)) {
HXLINE( 136)														g14 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														g14 = (( (Float)(this77) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float b19;
HXDLIN( 136)													int this78 = (this74 & 255);
HXDLIN( 136)													if ((this78 == 0)) {
HXLINE( 136)														b19 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														b19 = (( (Float)(this78) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float a24;
HXDLIN( 136)													int this79 = ((col2 >> 24) & 255);
HXDLIN( 136)													if ((this79 == 0)) {
HXLINE( 136)														a24 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														a24 = (( (Float)(this79) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float r24;
HXDLIN( 136)													int this80 = ((col2 >> 16) & 255);
HXDLIN( 136)													if ((this80 == 0)) {
HXLINE( 136)														r24 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														r24 = (( (Float)(this80) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float g24;
HXDLIN( 136)													int this81 = ((col2 >> 8) & 255);
HXDLIN( 136)													if ((this81 == 0)) {
HXLINE( 136)														g24 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														g24 = (( (Float)(this81) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float b25;
HXDLIN( 136)													int this82 = (col2 & 255);
HXDLIN( 136)													if ((this82 == 0)) {
HXLINE( 136)														b25 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														b25 = (( (Float)(this82) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float a34 = (a16 * (( (Float)(1) ) - a24));
HXDLIN( 136)													int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 136)													int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 136)													int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a34) + (b25 * a24))));
HXDLIN( 136)													int a17 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 136)													int blended4 = ((((a17 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN( 136)													{
HXLINE( 136)														int hitQuad19;
HXDLIN( 136)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)															hitQuad19 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            														}
            														else {
HXLINE( 136)															hitQuad19 = blended4;
            														}
HXDLIN( 136)														::iterMagic::Iimg_obj::set(undoImage6->image,location4,hitQuad19);
            													}
            												}
            												else {
HXLINE( 136)													::Dynamic this83 = undoImage6->image;
HXDLIN( 136)													int index10;
HXDLIN( 136)													if (undoImage6->useVirtualPos) {
HXLINE( 136)														index10 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            													}
            													else {
HXLINE( 136)														index10 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            													}
HXDLIN( 136)													int hitQuad20;
HXDLIN( 136)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)														hitQuad20 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            													}
            													else {
HXLINE( 136)														hitQuad20 = c8;
            													}
HXDLIN( 136)													::iterMagic::Iimg_obj::set(this83,index10,hitQuad20);
            												}
            											}
            											else {
HXLINE( 136)												if (forceClear2) {
HXLINE( 136)													::Dynamic this84 = undoImage6->image;
HXDLIN( 136)													int x8 = (dx4 - rectLeft2);
HXDLIN( 136)													int y8 = (dy4 - rectTop2);
HXDLIN( 136)													int index11;
HXDLIN( 136)													if (undoImage6->useVirtualPos) {
HXLINE( 136)														index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            													}
            													else {
HXLINE( 136)														index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            													}
HXDLIN( 136)													::iterMagic::Iimg_obj::set(this84,index11,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 136)					{
HXLINE( 136)						int _g_min4 = xIter32->start;
HXDLIN( 136)						int _g_max4 = xIter32->max;
HXDLIN( 136)						while((_g_min4 < _g_max4)){
HXLINE( 136)							_g_min4 = (_g_min4 + 1);
HXDLIN( 136)							int px3 = (_g_min4 - 1);
HXDLIN( 136)							Float pcx2 = (( (Float)(px3) ) - dx3);
HXDLIN( 136)							{
HXLINE( 136)								int _g_min5 = yIter32->start;
HXDLIN( 136)								int _g_max5 = yIter32->max;
HXDLIN( 136)								while((_g_min5 < _g_max5)){
HXLINE( 136)									_g_min5 = (_g_min5 + 1);
HXDLIN( 136)									int py3 = (_g_min5 - 1);
HXDLIN( 136)									Float pcy2 = (( (Float)(py3) ) - dy3);
HXDLIN( 136)									Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 136)									Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 136)									Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 136)									Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 136)									Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 136)									bool hitQuad21;
HXDLIN( 136)									bool hitQuad22;
HXDLIN( 136)									if ((ratioA2 >= 0)) {
HXLINE( 136)										hitQuad22 = (ratioB2 >= 0);
            									}
            									else {
HXLINE( 136)										hitQuad22 = false;
            									}
HXDLIN( 136)									if (hitQuad22) {
HXLINE( 136)										hitQuad21 = (ratioC2 >= 0);
            									}
            									else {
HXLINE( 136)										hitQuad21 = false;
            									}
HXDLIN( 136)									if (hitQuad21) {
HXLINE( 136)										int i26 = ::Std_obj::_hx_int((((( (Float)(aA2) ) * ratioA2) + (( (Float)(aB2) ) * ratioB2)) + (( (Float)(aC2) ) * ratioC2)));
HXDLIN( 136)										if ((i26 > 255)) {
HXLINE(  24)											i26 = 255;
            										}
HXLINE( 136)										if ((i26 < 0)) {
HXLINE(  25)											i26 = 0;
            										}
HXLINE( 136)										int a18 = i26;
HXDLIN( 136)										int i27 = ::Std_obj::_hx_int((((( (Float)(rA2) ) * ratioA2) + (( (Float)(rB2) ) * ratioB2)) + (( (Float)(rC2) ) * ratioC2)));
HXDLIN( 136)										if ((i27 > 255)) {
HXLINE(  24)											i27 = 255;
            										}
HXLINE( 136)										if ((i27 < 0)) {
HXLINE(  25)											i27 = 0;
            										}
HXLINE( 136)										int r9 = i27;
HXDLIN( 136)										int i28 = ::Std_obj::_hx_int((((( (Float)(gA2) ) * ratioA2) + (( (Float)(gB2) ) * ratioB2)) + (( (Float)(gC2) ) * ratioC2)));
HXDLIN( 136)										if ((i28 > 255)) {
HXLINE(  24)											i28 = 255;
            										}
HXLINE( 136)										if ((i28 < 0)) {
HXLINE(  25)											i28 = 0;
            										}
HXLINE( 136)										int g9 = i28;
HXDLIN( 136)										int i29 = ::Std_obj::_hx_int((((( (Float)(bA2) ) * ratioA2) + (( (Float)(bB2) ) * ratioB2)) + (( (Float)(bC2) ) * ratioC2)));
HXDLIN( 136)										if ((i29 > 255)) {
HXLINE(  24)											i29 = 255;
            										}
HXLINE( 136)										if ((i29 < 0)) {
HXLINE(  25)											i29 = 0;
            										}
HXLINE( 136)										int b26 = i29;
HXDLIN( 136)										{
HXLINE( 136)											int location5;
HXDLIN( 136)											if (pixelImage->useVirtualPos) {
HXLINE( 136)												location5 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px3) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 136)												location5 = ::Std_obj::_hx_int(( (Float)(((py3 * pixelImage->width) + px3)) ));
            											}
HXDLIN( 136)											bool hitQuad23;
HXDLIN( 136)											if (pixelImage->transparent) {
HXLINE( 136)												hitQuad23 = (a18 < 254);
            											}
            											else {
HXLINE( 136)												hitQuad23 = false;
            											}
HXDLIN( 136)											if (hitQuad23) {
HXLINE( 136)												int this85 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN( 136)												int old2;
HXDLIN( 136)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)													old2 = ((((((this85 >> 24) & 255) << 24) | ((this85 & 255) << 16)) | (((this85 >> 8) & 255) << 8)) | ((this85 >> 16) & 255));
            												}
            												else {
HXLINE( 136)													old2 = this85;
            												}
HXDLIN( 136)												int rhs2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
HXDLIN( 136)												Float a19;
HXDLIN( 136)												int this86 = ((old2 >> 24) & 255);
HXDLIN( 136)												if ((this86 == 0)) {
HXLINE( 136)													a19 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													a19 = (( (Float)(this86) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float r15;
HXDLIN( 136)												int this87 = ((old2 >> 16) & 255);
HXDLIN( 136)												if ((this87 == 0)) {
HXLINE( 136)													r15 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													r15 = (( (Float)(this87) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float g15;
HXDLIN( 136)												int this88 = ((old2 >> 8) & 255);
HXDLIN( 136)												if ((this88 == 0)) {
HXLINE( 136)													g15 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													g15 = (( (Float)(this88) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float b110;
HXDLIN( 136)												int this89 = (old2 & 255);
HXDLIN( 136)												if ((this89 == 0)) {
HXLINE( 136)													b110 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													b110 = (( (Float)(this89) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float a25;
HXDLIN( 136)												int this90 = ((rhs2 >> 24) & 255);
HXDLIN( 136)												if ((this90 == 0)) {
HXLINE( 136)													a25 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													a25 = (( (Float)(this90) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float r25;
HXDLIN( 136)												int this91 = ((rhs2 >> 16) & 255);
HXDLIN( 136)												if ((this91 == 0)) {
HXLINE( 136)													r25 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													r25 = (( (Float)(this91) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float g25;
HXDLIN( 136)												int this92 = ((rhs2 >> 8) & 255);
HXDLIN( 136)												if ((this92 == 0)) {
HXLINE( 136)													g25 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													g25 = (( (Float)(this92) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float b27;
HXDLIN( 136)												int this93 = (rhs2 & 255);
HXDLIN( 136)												if ((this93 == 0)) {
HXLINE( 136)													b27 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													b27 = (( (Float)(this93) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float a35 = (a19 * (( (Float)(1) ) - a25));
HXDLIN( 136)												int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 136)												int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 136)												int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a35) + (b27 * a25))));
HXDLIN( 136)												int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 136)												int blended5 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b28);
HXDLIN( 136)												{
HXLINE( 136)													int hitQuad24;
HXDLIN( 136)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)														hitQuad24 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            													}
            													else {
HXLINE( 136)														hitQuad24 = blended5;
            													}
HXDLIN( 136)													::iterMagic::Iimg_obj::set(pixelImage->image,location5,hitQuad24);
            												}
            											}
            											else {
HXLINE( 136)												int value2;
HXDLIN( 136)												if (pixelImage->isLittle) {
HXLINE( 136)													value2 = ((((a18 << 24) | (b26 << 16)) | (g9 << 8)) | r9);
            												}
            												else {
HXLINE( 136)													value2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
            												}
HXDLIN( 136)												::iterMagic::Iimg_obj::set(pixelImage->image,location5,value2);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 136)				{
HXLINE( 136)					bool hasHit2 = false;
HXDLIN( 136)					bool hasUndo3 = false;
HXDLIN( 136)					int aA3 = ((color2 >> 24) & 255);
HXDLIN( 136)					int rA3 = ((color2 >> 16) & 255);
HXDLIN( 136)					int gA3 = ((color2 >> 8) & 255);
HXDLIN( 136)					int bA3 = (color2 & 255);
HXDLIN( 136)					int aB3 = ((color1 >> 24) & 255);
HXDLIN( 136)					int rB3 = ((color1 >> 16) & 255);
HXDLIN( 136)					int gB3 = ((color1 >> 8) & 255);
HXDLIN( 136)					int bB3 = (color1 & 255);
HXDLIN( 136)					int aC3 = ((color2 >> 24) & 255);
HXDLIN( 136)					int rC3 = ((color2 >> 16) & 255);
HXDLIN( 136)					int gC3 = ((color2 >> 8) & 255);
HXDLIN( 136)					int bC3 = (color2 & 255);
HXDLIN( 136)					Float bcx3 = (cx1 - dx3);
HXDLIN( 136)					Float bcy3 = (cy1 - dy3);
HXDLIN( 136)					Float acx3 = (bx1 - dx3);
HXDLIN( 136)					Float acy3 = (by1 - dy3);
HXDLIN( 136)					Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 136)					Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 136)					Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 136)					Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 136)					 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 136)					if ((bx1 > cx1)) {
HXLINE( 136)						if ((bx1 > dx3)) {
HXLINE( 136)							int min12;
HXDLIN( 136)							if ((cx1 > dx3)) {
HXLINE( 136)								min12 = ::Math_obj::floor(dx3);
            							}
            							else {
HXLINE( 136)								min12 = ::Math_obj::floor(cx1);
            							}
HXDLIN( 136)							int ii_min24 = min12;
HXDLIN( 136)							int ii_max24 = ::Math_obj::ceil(bx1);
HXDLIN( 136)							xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            						}
            						else {
HXLINE( 136)							int ii_min25 = ::Math_obj::floor(cx1);
HXDLIN( 136)							int ii_max25 = ::Math_obj::ceil(dx3);
HXDLIN( 136)							xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            						}
            					}
            					else {
HXLINE( 136)						if ((cx1 > dx3)) {
HXLINE( 136)							int min13;
HXDLIN( 136)							if ((bx1 > dx3)) {
HXLINE( 136)								min13 = ::Math_obj::floor(dx3);
            							}
            							else {
HXLINE( 136)								min13 = ::Math_obj::ceil(bx1);
            							}
HXDLIN( 136)							int ii_min26 = min13;
HXDLIN( 136)							int ii_max26 = ::Math_obj::ceil(cx1);
HXDLIN( 136)							xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            						}
            						else {
HXLINE( 136)							int ii_min27 = ::Math_obj::floor(bx1);
HXDLIN( 136)							int ii_max27 = ::Math_obj::ceil(dx3);
HXDLIN( 136)							xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            						}
            					}
HXDLIN( 136)					 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 136)					if ((by1 > cy1)) {
HXLINE( 136)						if ((by1 > dy3)) {
HXLINE( 136)							int min14;
HXDLIN( 136)							if ((cy1 > dy3)) {
HXLINE( 136)								min14 = ::Math_obj::floor(dy3);
            							}
            							else {
HXLINE( 136)								min14 = ::Math_obj::floor(cy1);
            							}
HXDLIN( 136)							int ii_min28 = min14;
HXDLIN( 136)							int ii_max28 = ::Math_obj::ceil(by1);
HXDLIN( 136)							yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            						}
            						else {
HXLINE( 136)							int ii_min29 = ::Math_obj::floor(cy1);
HXDLIN( 136)							int ii_max29 = ::Math_obj::ceil(dy3);
HXDLIN( 136)							yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            						}
            					}
            					else {
HXLINE( 136)						if ((cy1 > dy3)) {
HXLINE( 136)							int min15;
HXDLIN( 136)							if ((by1 > dy3)) {
HXLINE( 136)								min15 = ::Math_obj::floor(dy3);
            							}
            							else {
HXLINE( 136)								min15 = ::Math_obj::ceil(by1);
            							}
HXDLIN( 136)							int ii_min30 = min15;
HXDLIN( 136)							int ii_max30 = ::Math_obj::ceil(cy1);
HXDLIN( 136)							yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            						}
            						else {
HXLINE( 136)							int ii_min31 = ::Math_obj::floor(by1);
HXDLIN( 136)							int ii_max31 = ::Math_obj::ceil(dy3);
HXDLIN( 136)							yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            						}
            					}
HXDLIN( 136)					 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 136)					if (hasUndo3) {
HXLINE( 136)						int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 136)						int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 136)						 ::Dynamic imageType3 = null();
HXDLIN( 136)						 ::pi_xy::ImageStruct this94 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 136)						if (::hx::IsNull( imageType3 )) {
HXLINE(  54)							imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 136)						::Dynamic undoImage10;
HXDLIN( 136)						switch((int)(( (int)(imageType3) ))){
            							case (int)0: {
HXLINE( 136)								 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 136)								 ::iterMagic::BytesImg b29 = byt3;
HXDLIN( 136)								{
HXLINE( 136)									b29->width = width3;
HXDLIN( 136)									b29->height = height3;
HXDLIN( 136)									b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 136)									b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN( 136)									{
HXLINE( 136)										int len6 = b29->length;
HXDLIN( 136)										int w3 = 0;
HXDLIN( 136)										{
HXLINE( 136)											int _g60 = 0;
HXDLIN( 136)											int _g61 = b29->height;
HXDLIN( 136)											while((_g60 < _g61)){
HXLINE( 136)												_g60 = (_g60 + 1);
HXDLIN( 136)												int y9 = (_g60 - 1);
HXDLIN( 136)												{
HXLINE( 136)													int _g62 = 0;
HXDLIN( 136)													int _g63 = b29->width;
HXDLIN( 136)													while((_g62 < _g63)){
HXLINE( 136)														_g62 = (_g62 + 1);
HXDLIN( 136)														int x9 = (_g62 - 1);
HXDLIN( 136)														{
HXLINE( 136)															w3 = (w3 + 1);
HXDLIN( 136)															b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 136)														{
HXLINE( 136)															w3 = (w3 + 1);
HXDLIN( 136)															b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 136)														{
HXLINE( 136)															w3 = (w3 + 1);
HXDLIN( 136)															b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 136)														{
HXLINE( 136)															w3 = (w3 + 1);
HXDLIN( 136)															b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 136)								undoImage10 = b29;
            							}
            							break;
            							case (int)1: {
HXLINE( 136)								 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 136)								 ::iterMagic::ArrIntImg a26 = arrI3;
HXDLIN( 136)								{
HXLINE( 136)									a26->width = width3;
HXDLIN( 136)									a26->height = height3;
HXDLIN( 136)									a26->data = ::Array_obj< int >::__new(0);
HXDLIN( 136)									a26->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 136)									{
HXLINE( 136)										int _g64 = 0;
HXDLIN( 136)										int _g65 = a26->length;
HXDLIN( 136)										while((_g64 < _g65)){
HXLINE( 136)											_g64 = (_g64 + 1);
HXDLIN( 136)											int i30 = (_g64 - 1);
HXDLIN( 136)											a26->data[i30] = 0;
            										}
            									}
            								}
HXDLIN( 136)								undoImage10 = a26;
            							}
            							break;
            							case (int)2: {
HXLINE( 136)								 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 136)								 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN( 136)								{
HXLINE( 136)									b30->width = width3;
HXDLIN( 136)									b30->height = height3;
HXDLIN( 136)									b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 136)									int size3 = (b30->length * 4);
HXDLIN( 136)									b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 136)									{
HXLINE( 136)										int _g66 = 0;
HXDLIN( 136)										int _g67 = b30->length;
HXDLIN( 136)										while((_g66 < _g67)){
HXLINE( 136)											_g66 = (_g66 + 1);
HXDLIN( 136)											int i31 = (_g66 - 1);
HXDLIN( 136)											{
HXLINE( 136)												 ::haxe::io::ArrayBufferViewImpl this95 = b30->data;
HXDLIN( 136)												bool undoImage11;
HXDLIN( 136)												if ((i31 >= 0)) {
HXLINE( 136)													undoImage11 = (i31 < (this95->byteLength >> 2));
            												}
            												else {
HXLINE( 136)													undoImage11 = false;
            												}
HXDLIN( 136)												if (undoImage11) {
HXLINE( 136)													 ::haxe::io::Bytes _this3 = this95->bytes;
HXDLIN( 136)													int pos3 = ((i31 << 2) + this95->byteOffset);
HXDLIN( 136)													_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 136)													_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 136)													_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 136)													_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 136)								undoImage10 = b30;
            							}
            							break;
            							case (int)3: {
HXLINE( 136)								 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 136)								 ::iterMagic::VecIntImg v8 = vec3;
HXDLIN( 136)								{
HXLINE( 136)									v8->width = width3;
HXDLIN( 136)									v8->height = height3;
HXDLIN( 136)									v8->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 136)									v8->data = ::Array_obj< int >::__new(v8->length);
HXDLIN( 136)									{
HXLINE( 136)										int _g68 = 0;
HXDLIN( 136)										int _g69 = v8->length;
HXDLIN( 136)										while((_g68 < _g69)){
HXLINE( 136)											_g68 = (_g68 + 1);
HXDLIN( 136)											int i32 = (_g68 - 1);
HXDLIN( 136)											v8->data->__unsafe_set(i32,0);
            										}
            									}
            								}
HXDLIN( 136)								undoImage10 = v8;
            							}
            							break;
            							case (int)4: {
HXLINE( 136)								 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 136)								 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN( 136)								{
HXLINE( 136)									b31->width = width3;
HXDLIN( 136)									b31->height = height3;
HXDLIN( 136)									b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 136)									b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 136)									{
HXLINE( 136)										int len7 = b31->length;
HXDLIN( 136)										 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN( 136)										if (::hx::IsNull( d3->head )) {
HXLINE( 136)											int _g70 = 0;
HXDLIN( 136)											int _g71 = len7;
HXDLIN( 136)											while((_g70 < _g71)){
HXLINE( 136)												_g70 = (_g70 + 1);
HXDLIN( 136)												int i33 = (_g70 - 1);
HXDLIN( 136)												d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            											}
            										}
            										else {
HXLINE( 136)											int _g72 = 0;
HXDLIN( 136)											int _g73 = len7;
HXDLIN( 136)											while((_g72 < _g73)){
HXLINE( 136)												_g72 = (_g72 + 1);
HXDLIN( 136)												int i34 = (_g72 - 1);
HXDLIN( 136)												{
HXLINE( 136)													 ::haxe::ds::GenericCell_Int l3 = b31->data->head;
HXDLIN( 136)													 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 136)													{
HXLINE( 136)														int _g74 = 0;
HXDLIN( 136)														int _g75 = i34;
HXDLIN( 136)														while((_g74 < _g75)){
HXLINE( 136)															_g74 = (_g74 + 1);
HXDLIN( 136)															int i35 = (_g74 - 1);
HXLINE( 345)															prev3 = l3;
HXLINE( 346)															l3 = l3->next;
            														}
            													}
HXLINE( 136)													if (::hx::IsNull( prev3 )) {
HXLINE( 136)														b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 136)														l3 = null();
            													}
            													else {
HXLINE( 136)														prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 136)														l3 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 136)								undoImage10 = b31;
            							}
            							break;
            						}
HXDLIN( 136)						this94->image = undoImage10;
HXDLIN( 136)						this94->width = width3;
HXDLIN( 136)						this94->height = height3;
HXDLIN( 136)						this94->imageType = ( (int)(imageType3) );
HXDLIN( 136)						undoImage9 = this94;
HXDLIN( 136)						{
HXLINE( 136)							int rectLeft3 = xIter33->start;
HXDLIN( 136)							int rectTop3 = yIter33->start;
HXDLIN( 136)							int rectRight3 = xIter33->max;
HXDLIN( 136)							bool forceClear3 = false;
HXDLIN( 136)							{
HXLINE( 136)								int _g76 = rectTop3;
HXDLIN( 136)								int _g77 = yIter33->max;
HXDLIN( 136)								while((_g76 < _g77)){
HXLINE( 136)									_g76 = (_g76 + 1);
HXDLIN( 136)									int dy5 = (_g76 - 1);
HXDLIN( 136)									{
HXLINE( 136)										int _g78 = rectLeft3;
HXDLIN( 136)										int _g79 = rectRight3;
HXDLIN( 136)										while((_g78 < _g79)){
HXLINE( 136)											_g78 = (_g78 + 1);
HXDLIN( 136)											int dx5 = (_g78 - 1);
HXDLIN( 136)											::Dynamic this96 = pixelImage->image;
HXDLIN( 136)											int index12;
HXDLIN( 136)											if (pixelImage->useVirtualPos) {
HXLINE( 136)												index12 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx5) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 136)												index12 = ::Std_obj::_hx_int(( (Float)(((dy5 * pixelImage->width) + dx5)) ));
            											}
HXDLIN( 136)											int c9 = ::iterMagic::Iimg_obj::get(this96,index12);
HXDLIN( 136)											int col3;
HXDLIN( 136)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)												col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            											}
            											else {
HXLINE( 136)												col3 = c9;
            											}
HXDLIN( 136)											bool hitQuad25;
HXDLIN( 136)											if (pixelImage->useMask) {
HXLINE( 136)												hitQuad25 = ::hx::IsNotNull( pixelImage->mask );
            											}
            											else {
HXLINE( 136)												hitQuad25 = false;
            											}
HXDLIN( 136)											if (hitQuad25) {
HXLINE( 136)												 ::pi_xy::ImageStruct this97 = pixelImage->mask;
HXDLIN( 136)												::Dynamic this98 = this97->image;
HXDLIN( 136)												int index13;
HXDLIN( 136)												if (this97->useVirtualPos) {
HXLINE( 136)													index13 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this97->virtualY) * ( (Float)(this97->width) )) + dx5) - this97->virtualX));
            												}
            												else {
HXLINE( 136)													index13 = ::Std_obj::_hx_int(( (Float)(((dy5 * this97->width) + dx5)) ));
            												}
HXDLIN( 136)												int c10 = ::iterMagic::Iimg_obj::get(this98,index13);
HXDLIN( 136)												int v9;
HXDLIN( 136)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)													v9 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            												}
            												else {
HXLINE( 136)													v9 = c10;
            												}
HXDLIN( 136)												int maskPixel3 = v9;
HXDLIN( 136)												int this99 = col3;
HXDLIN( 136)												if ((maskPixel3 == 0)) {
HXLINE( 136)													col3 = this99;
            												}
            												else {
HXLINE( 136)													Float m03;
HXDLIN( 136)													int this100 = ((maskPixel3 >> 24) & 255);
HXDLIN( 136)													if ((this100 == 0)) {
HXLINE( 136)														m03 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														m03 = (( (Float)(this100) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float m13;
HXDLIN( 136)													int this101 = ((maskPixel3 >> 16) & 255);
HXDLIN( 136)													if ((this101 == 0)) {
HXLINE( 136)														m13 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														m13 = (( (Float)(this101) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float m23;
HXDLIN( 136)													int this102 = ((maskPixel3 >> 8) & 255);
HXDLIN( 136)													if ((this102 == 0)) {
HXLINE( 136)														m23 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														m23 = (( (Float)(this102) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float m33;
HXDLIN( 136)													int this103 = (maskPixel3 & 255);
HXDLIN( 136)													if ((this103 == 0)) {
HXLINE( 136)														m33 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														m33 = (( (Float)(this103) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this99 >> 24) & 255)) )));
HXDLIN( 136)													int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this99 >> 16) & 255)) )));
HXDLIN( 136)													int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this99 >> 8) & 255)) )));
HXDLIN( 136)													int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this99 & 255)) )));
HXDLIN( 136)													col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 136)											if ((col3 != 0)) {
HXLINE( 136)												int x10 = (dx5 - rectLeft3);
HXDLIN( 136)												int y10 = (dy5 - rectTop3);
HXDLIN( 136)												int c11 = col3;
HXDLIN( 136)												bool hitQuad26;
HXDLIN( 136)												if ((((c11 >> 24) & 255) < 254)) {
HXLINE( 136)													hitQuad26 = undoImage9->transparent;
            												}
            												else {
HXLINE( 136)													hitQuad26 = false;
            												}
HXDLIN( 136)												if (hitQuad26) {
HXLINE( 136)													int location6;
HXDLIN( 136)													if (undoImage9->useVirtualPos) {
HXLINE( 136)														location6 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            													}
            													else {
HXLINE( 136)														location6 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            													}
HXDLIN( 136)													int this104 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 136)													int this105;
HXDLIN( 136)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)														this105 = ((((((this104 >> 24) & 255) << 24) | ((this104 & 255) << 16)) | (((this104 >> 8) & 255) << 8)) | ((this104 >> 16) & 255));
            													}
            													else {
HXLINE( 136)														this105 = this104;
            													}
HXDLIN( 136)													Float a110;
HXDLIN( 136)													int this106 = ((this105 >> 24) & 255);
HXDLIN( 136)													if ((this106 == 0)) {
HXLINE( 136)														a110 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														a110 = (( (Float)(this106) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float r16;
HXDLIN( 136)													int this107 = ((this105 >> 16) & 255);
HXDLIN( 136)													if ((this107 == 0)) {
HXLINE( 136)														r16 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														r16 = (( (Float)(this107) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float g16;
HXDLIN( 136)													int this108 = ((this105 >> 8) & 255);
HXDLIN( 136)													if ((this108 == 0)) {
HXLINE( 136)														g16 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														g16 = (( (Float)(this108) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float b111;
HXDLIN( 136)													int this109 = (this105 & 255);
HXDLIN( 136)													if ((this109 == 0)) {
HXLINE( 136)														b111 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														b111 = (( (Float)(this109) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float a27;
HXDLIN( 136)													int this110 = ((col3 >> 24) & 255);
HXDLIN( 136)													if ((this110 == 0)) {
HXLINE( 136)														a27 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														a27 = (( (Float)(this110) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float r26;
HXDLIN( 136)													int this111 = ((col3 >> 16) & 255);
HXDLIN( 136)													if ((this111 == 0)) {
HXLINE( 136)														r26 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														r26 = (( (Float)(this111) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float g26;
HXDLIN( 136)													int this112 = ((col3 >> 8) & 255);
HXDLIN( 136)													if ((this112 == 0)) {
HXLINE( 136)														g26 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														g26 = (( (Float)(this112) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float b210;
HXDLIN( 136)													int this113 = (col3 & 255);
HXDLIN( 136)													if ((this113 == 0)) {
HXLINE( 136)														b210 = ((Float)0.);
            													}
            													else {
HXLINE( 136)														b210 = (( (Float)(this113) ) / ( (Float)(255) ));
            													}
HXDLIN( 136)													Float a36 = (a110 * (( (Float)(1) ) - a27));
HXDLIN( 136)													int r17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a27))));
HXDLIN( 136)													int g17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a27))));
HXDLIN( 136)													int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a36) + (b210 * a27))));
HXDLIN( 136)													int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a27)));
HXDLIN( 136)													int blended6 = ((((a28 << 24) | (r17 << 16)) | (g17 << 8)) | b32);
HXDLIN( 136)													{
HXLINE( 136)														int hitQuad27;
HXDLIN( 136)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)															hitQuad27 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            														}
            														else {
HXLINE( 136)															hitQuad27 = blended6;
            														}
HXDLIN( 136)														::iterMagic::Iimg_obj::set(undoImage9->image,location6,hitQuad27);
            													}
            												}
            												else {
HXLINE( 136)													::Dynamic this114 = undoImage9->image;
HXDLIN( 136)													int index14;
HXDLIN( 136)													if (undoImage9->useVirtualPos) {
HXLINE( 136)														index14 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            													}
            													else {
HXLINE( 136)														index14 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            													}
HXDLIN( 136)													int hitQuad28;
HXDLIN( 136)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)														hitQuad28 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            													}
            													else {
HXLINE( 136)														hitQuad28 = c11;
            													}
HXDLIN( 136)													::iterMagic::Iimg_obj::set(this114,index14,hitQuad28);
            												}
            											}
            											else {
HXLINE( 136)												if (forceClear3) {
HXLINE( 136)													::Dynamic this115 = undoImage9->image;
HXDLIN( 136)													int x11 = (dx5 - rectLeft3);
HXDLIN( 136)													int y11 = (dy5 - rectTop3);
HXDLIN( 136)													int index15;
HXDLIN( 136)													if (undoImage9->useVirtualPos) {
HXLINE( 136)														index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            													}
            													else {
HXLINE( 136)														index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            													}
HXDLIN( 136)													::iterMagic::Iimg_obj::set(this115,index15,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 136)					{
HXLINE( 136)						int _g_min6 = xIter33->start;
HXDLIN( 136)						int _g_max6 = xIter33->max;
HXDLIN( 136)						while((_g_min6 < _g_max6)){
HXLINE( 136)							_g_min6 = (_g_min6 + 1);
HXDLIN( 136)							int px4 = (_g_min6 - 1);
HXDLIN( 136)							Float pcx3 = (( (Float)(px4) ) - dx3);
HXDLIN( 136)							{
HXLINE( 136)								int _g_min7 = yIter33->start;
HXDLIN( 136)								int _g_max7 = yIter33->max;
HXDLIN( 136)								while((_g_min7 < _g_max7)){
HXLINE( 136)									_g_min7 = (_g_min7 + 1);
HXDLIN( 136)									int py4 = (_g_min7 - 1);
HXDLIN( 136)									Float pcy3 = (( (Float)(py4) ) - dy3);
HXDLIN( 136)									Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 136)									Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 136)									Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 136)									Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 136)									Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 136)									bool hitQuad29;
HXDLIN( 136)									bool hitQuad30;
HXDLIN( 136)									if ((ratioA3 >= 0)) {
HXLINE( 136)										hitQuad30 = (ratioB3 >= 0);
            									}
            									else {
HXLINE( 136)										hitQuad30 = false;
            									}
HXDLIN( 136)									if (hitQuad30) {
HXLINE( 136)										hitQuad29 = (ratioC3 >= 0);
            									}
            									else {
HXLINE( 136)										hitQuad29 = false;
            									}
HXDLIN( 136)									if (hitQuad29) {
HXLINE( 136)										int i36 = ::Std_obj::_hx_int((((( (Float)(aA3) ) * ratioA3) + (( (Float)(aB3) ) * ratioB3)) + (( (Float)(aC3) ) * ratioC3)));
HXDLIN( 136)										if ((i36 > 255)) {
HXLINE(  24)											i36 = 255;
            										}
HXLINE( 136)										if ((i36 < 0)) {
HXLINE(  25)											i36 = 0;
            										}
HXLINE( 136)										int a29 = i36;
HXDLIN( 136)										int i37 = ::Std_obj::_hx_int((((( (Float)(rA3) ) * ratioA3) + (( (Float)(rB3) ) * ratioB3)) + (( (Float)(rC3) ) * ratioC3)));
HXDLIN( 136)										if ((i37 > 255)) {
HXLINE(  24)											i37 = 255;
            										}
HXLINE( 136)										if ((i37 < 0)) {
HXLINE(  25)											i37 = 0;
            										}
HXLINE( 136)										int r18 = i37;
HXDLIN( 136)										int i38 = ::Std_obj::_hx_int((((( (Float)(gA3) ) * ratioA3) + (( (Float)(gB3) ) * ratioB3)) + (( (Float)(gC3) ) * ratioC3)));
HXDLIN( 136)										if ((i38 > 255)) {
HXLINE(  24)											i38 = 255;
            										}
HXLINE( 136)										if ((i38 < 0)) {
HXLINE(  25)											i38 = 0;
            										}
HXLINE( 136)										int g18 = i38;
HXDLIN( 136)										int i39 = ::Std_obj::_hx_int((((( (Float)(bA3) ) * ratioA3) + (( (Float)(bB3) ) * ratioB3)) + (( (Float)(bC3) ) * ratioC3)));
HXDLIN( 136)										if ((i39 > 255)) {
HXLINE(  24)											i39 = 255;
            										}
HXLINE( 136)										if ((i39 < 0)) {
HXLINE(  25)											i39 = 0;
            										}
HXLINE( 136)										int b33 = i39;
HXDLIN( 136)										{
HXLINE( 136)											int location7;
HXDLIN( 136)											if (pixelImage->useVirtualPos) {
HXLINE( 136)												location7 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px4) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 136)												location7 = ::Std_obj::_hx_int(( (Float)(((py4 * pixelImage->width) + px4)) ));
            											}
HXDLIN( 136)											bool hitQuad31;
HXDLIN( 136)											if (pixelImage->transparent) {
HXLINE( 136)												hitQuad31 = (a29 < 254);
            											}
            											else {
HXLINE( 136)												hitQuad31 = false;
            											}
HXDLIN( 136)											if (hitQuad31) {
HXLINE( 136)												int this116 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN( 136)												int old3;
HXDLIN( 136)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)													old3 = ((((((this116 >> 24) & 255) << 24) | ((this116 & 255) << 16)) | (((this116 >> 8) & 255) << 8)) | ((this116 >> 16) & 255));
            												}
            												else {
HXLINE( 136)													old3 = this116;
            												}
HXDLIN( 136)												int rhs3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
HXDLIN( 136)												Float a111;
HXDLIN( 136)												int this117 = ((old3 >> 24) & 255);
HXDLIN( 136)												if ((this117 == 0)) {
HXLINE( 136)													a111 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													a111 = (( (Float)(this117) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float r19;
HXDLIN( 136)												int this118 = ((old3 >> 16) & 255);
HXDLIN( 136)												if ((this118 == 0)) {
HXLINE( 136)													r19 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													r19 = (( (Float)(this118) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float g19;
HXDLIN( 136)												int this119 = ((old3 >> 8) & 255);
HXDLIN( 136)												if ((this119 == 0)) {
HXLINE( 136)													g19 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													g19 = (( (Float)(this119) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float b112;
HXDLIN( 136)												int this120 = (old3 & 255);
HXDLIN( 136)												if ((this120 == 0)) {
HXLINE( 136)													b112 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													b112 = (( (Float)(this120) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float a210;
HXDLIN( 136)												int this121 = ((rhs3 >> 24) & 255);
HXDLIN( 136)												if ((this121 == 0)) {
HXLINE( 136)													a210 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													a210 = (( (Float)(this121) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float r27;
HXDLIN( 136)												int this122 = ((rhs3 >> 16) & 255);
HXDLIN( 136)												if ((this122 == 0)) {
HXLINE( 136)													r27 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													r27 = (( (Float)(this122) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float g27;
HXDLIN( 136)												int this123 = ((rhs3 >> 8) & 255);
HXDLIN( 136)												if ((this123 == 0)) {
HXLINE( 136)													g27 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													g27 = (( (Float)(this123) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float b211;
HXDLIN( 136)												int this124 = (rhs3 & 255);
HXDLIN( 136)												if ((this124 == 0)) {
HXLINE( 136)													b211 = ((Float)0.);
            												}
            												else {
HXLINE( 136)													b211 = (( (Float)(this124) ) / ( (Float)(255) ));
            												}
HXDLIN( 136)												Float a37 = (a111 * (( (Float)(1) ) - a210));
HXDLIN( 136)												int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a37) + (r27 * a210))));
HXDLIN( 136)												int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a37) + (g27 * a210))));
HXDLIN( 136)												int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a37) + (b211 * a210))));
HXDLIN( 136)												int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a210)));
HXDLIN( 136)												int blended7 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b34);
HXDLIN( 136)												{
HXLINE( 136)													int hitQuad32;
HXDLIN( 136)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 136)														hitQuad32 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            													}
            													else {
HXLINE( 136)														hitQuad32 = blended7;
            													}
HXDLIN( 136)													::iterMagic::Iimg_obj::set(pixelImage->image,location7,hitQuad32);
            												}
            											}
            											else {
HXLINE( 136)												int value3;
HXDLIN( 136)												if (pixelImage->isLittle) {
HXLINE( 136)													value3 = ((((a29 << 24) | (b33 << 16)) | (g18 << 8)) | r18);
            												}
            												else {
HXLINE( 136)													value3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
            												}
HXDLIN( 136)												::iterMagic::Iimg_obj::set(pixelImage->image,location7,value3);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 136)					if ((hasHit2 == false)) {
HXLINE( 136)						 ::pi_xy::algo::HitTri v10 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx1,by1,cx1,cy1,dx3,dy3,true);
HXDLIN( 136)						if (hasUndo3) {
HXLINE( 136)							v10->undoImage = undoImage9;
HXDLIN( 136)							v10->undoX = xIter33->start;
HXDLIN( 136)							v10->undoY = yIter33->start;
            						}
            					}
            				}
HXDLIN( 136)				 ::pi_xy::algo::HitQuad v11 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax1,ay1,bx1,by1,cx1,cy1,dx3,dy3,true);
HXLINE( 132)				hitQuad = v11;
            			}
            		}
            		else {
HXLINE( 139)			Float sin3 = ::Math_obj::sin(theta);
HXDLIN( 139)			Float cos3 = ::Math_obj::cos(theta);
HXDLIN( 139)			Float radius3 = (thick / ( (Float)(2) ));
HXDLIN( 139)			Float dx6 = ((Float)0.1);
HXDLIN( 139)			Float dy6 = radius3;
HXDLIN( 139)			Float cx2 = h2;
HXDLIN( 139)			Float cy2 = radius3;
HXDLIN( 139)			Float bx2 = h2;
HXDLIN( 139)			Float by2 = -(radius3);
HXDLIN( 139)			Float ax2 = ((Float)0.1);
HXDLIN( 139)			Float ay2 = -(radius3);
HXDLIN( 139)			Float temp2 = ((Float)0.);
HXLINE( 474)			temp2 = (px + ((ax2 * cos3) - (ay2 * sin3)));
HXLINE( 475)			ay2 = (py + ((ay2 * cos3) + (ax2 * sin3)));
HXLINE( 476)			ax2 = temp2;
HXLINE( 478)			temp2 = (px + ((bx2 * cos3) - (by2 * sin3)));
HXLINE( 479)			by2 = (py + ((by2 * cos3) + (bx2 * sin3)));
HXLINE( 480)			bx2 = temp2;
HXLINE( 482)			temp2 = (px + ((cx2 * cos3) - (cy2 * sin3)));
HXLINE( 483)			cy2 = (py + ((cy2 * cos3) + (cx2 * sin3)));
HXLINE( 484)			cx2 = temp2;
HXLINE( 486)			temp2 = (px + ((dx6 * cos3) - (dy6 * sin3)));
HXLINE( 487)			dy6 = (py + ((dy6 * cos3) + (dx6 * sin3)));
HXLINE( 488)			dx6 = temp2;
HXLINE( 139)			{
HXLINE( 139)				bool hasUndo4 = false;
HXDLIN( 139)				int aA4 = ((color1 >> 24) & 255);
HXDLIN( 139)				int rA4 = ((color1 >> 16) & 255);
HXDLIN( 139)				int gA4 = ((color1 >> 8) & 255);
HXDLIN( 139)				int bA4 = (color1 & 255);
HXDLIN( 139)				int aB4 = ((color1 >> 24) & 255);
HXDLIN( 139)				int rB4 = ((color1 >> 16) & 255);
HXDLIN( 139)				int gB4 = ((color1 >> 8) & 255);
HXDLIN( 139)				int bB4 = (color1 & 255);
HXDLIN( 139)				int aC4 = ((color2 >> 24) & 255);
HXDLIN( 139)				int rC4 = ((color2 >> 16) & 255);
HXDLIN( 139)				int gC4 = ((color2 >> 8) & 255);
HXDLIN( 139)				int bC4 = (color2 & 255);
HXDLIN( 139)				Float bcx4 = (bx2 - dx6);
HXDLIN( 139)				Float bcy4 = (by2 - dy6);
HXDLIN( 139)				Float acx4 = (ax2 - dx6);
HXDLIN( 139)				Float acy4 = (ay2 - dy6);
HXDLIN( 139)				Float dot114 = ((bcx4 * bcx4) + (bcy4 * bcy4));
HXDLIN( 139)				Float dot124 = ((bcx4 * acx4) + (bcy4 * acy4));
HXDLIN( 139)				Float dot224 = ((acx4 * acx4) + (acy4 * acy4));
HXDLIN( 139)				Float denom14 = (( (Float)(1) ) / ((dot114 * dot224) - (dot124 * dot124)));
HXDLIN( 139)				 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN( 139)				if ((ax2 > bx2)) {
HXLINE( 139)					if ((ax2 > dx6)) {
HXLINE( 139)						int min16;
HXDLIN( 139)						if ((bx2 > dx6)) {
HXLINE( 139)							min16 = ::Math_obj::floor(dx6);
            						}
            						else {
HXLINE( 139)							min16 = ::Math_obj::floor(bx2);
            						}
HXDLIN( 139)						int ii_min32 = min16;
HXDLIN( 139)						int ii_max32 = ::Math_obj::ceil(ax2);
HXDLIN( 139)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            					}
            					else {
HXLINE( 139)						int ii_min33 = ::Math_obj::floor(bx2);
HXDLIN( 139)						int ii_max33 = ::Math_obj::ceil(dx6);
HXDLIN( 139)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            					}
            				}
            				else {
HXLINE( 139)					if ((bx2 > dx6)) {
HXLINE( 139)						int min17;
HXDLIN( 139)						if ((ax2 > dx6)) {
HXLINE( 139)							min17 = ::Math_obj::floor(dx6);
            						}
            						else {
HXLINE( 139)							min17 = ::Math_obj::ceil(ax2);
            						}
HXDLIN( 139)						int ii_min34 = min17;
HXDLIN( 139)						int ii_max34 = ::Math_obj::ceil(bx2);
HXDLIN( 139)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            					}
            					else {
HXLINE( 139)						int ii_min35 = ::Math_obj::floor(ax2);
HXDLIN( 139)						int ii_max35 = ::Math_obj::ceil(dx6);
HXDLIN( 139)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            					}
            				}
HXDLIN( 139)				 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN( 139)				if ((ay2 > by2)) {
HXLINE( 139)					if ((ay2 > dy6)) {
HXLINE( 139)						int min18;
HXDLIN( 139)						if ((by2 > dy6)) {
HXLINE( 139)							min18 = ::Math_obj::floor(dy6);
            						}
            						else {
HXLINE( 139)							min18 = ::Math_obj::floor(by2);
            						}
HXDLIN( 139)						int ii_min36 = min18;
HXDLIN( 139)						int ii_max36 = ::Math_obj::ceil(ay2);
HXDLIN( 139)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            					}
            					else {
HXLINE( 139)						int ii_min37 = ::Math_obj::floor(by2);
HXDLIN( 139)						int ii_max37 = ::Math_obj::ceil(dy6);
HXDLIN( 139)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            					}
            				}
            				else {
HXLINE( 139)					if ((by2 > dy6)) {
HXLINE( 139)						int min19;
HXDLIN( 139)						if ((ay2 > dy6)) {
HXLINE( 139)							min19 = ::Math_obj::floor(dy6);
            						}
            						else {
HXLINE( 139)							min19 = ::Math_obj::ceil(ay2);
            						}
HXDLIN( 139)						int ii_min38 = min19;
HXDLIN( 139)						int ii_max38 = ::Math_obj::ceil(by2);
HXDLIN( 139)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            					}
            					else {
HXLINE( 139)						int ii_min39 = ::Math_obj::floor(ay2);
HXDLIN( 139)						int ii_max39 = ::Math_obj::ceil(dy6);
HXDLIN( 139)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            					}
            				}
HXDLIN( 139)				 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN( 139)				if (hasUndo4) {
HXLINE( 139)					int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN( 139)					int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN( 139)					 ::Dynamic imageType4 = null();
HXDLIN( 139)					 ::pi_xy::ImageStruct this125 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 139)					if (::hx::IsNull( imageType4 )) {
HXLINE(  54)						imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 139)					::Dynamic undoImage13;
HXDLIN( 139)					switch((int)(( (int)(imageType4) ))){
            						case (int)0: {
HXLINE( 139)							 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 139)							 ::iterMagic::BytesImg b35 = byt4;
HXDLIN( 139)							{
HXLINE( 139)								b35->width = width4;
HXDLIN( 139)								b35->height = height4;
HXDLIN( 139)								b35->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 139)								b35->data = ::haxe::io::Bytes_obj::alloc((b35->length * 4));
HXDLIN( 139)								{
HXLINE( 139)									int len8 = b35->length;
HXDLIN( 139)									int w4 = 0;
HXDLIN( 139)									{
HXLINE( 139)										int _g80 = 0;
HXDLIN( 139)										int _g81 = b35->height;
HXDLIN( 139)										while((_g80 < _g81)){
HXLINE( 139)											_g80 = (_g80 + 1);
HXDLIN( 139)											int y12 = (_g80 - 1);
HXDLIN( 139)											{
HXLINE( 139)												int _g82 = 0;
HXDLIN( 139)												int _g83 = b35->width;
HXDLIN( 139)												while((_g82 < _g83)){
HXLINE( 139)													_g82 = (_g82 + 1);
HXDLIN( 139)													int x12 = (_g82 - 1);
HXDLIN( 139)													{
HXLINE( 139)														w4 = (w4 + 1);
HXDLIN( 139)														b35->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 139)													{
HXLINE( 139)														w4 = (w4 + 1);
HXDLIN( 139)														b35->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 139)													{
HXLINE( 139)														w4 = (w4 + 1);
HXDLIN( 139)														b35->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 139)													{
HXLINE( 139)														w4 = (w4 + 1);
HXDLIN( 139)														b35->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 139)							undoImage13 = b35;
            						}
            						break;
            						case (int)1: {
HXLINE( 139)							 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 139)							 ::iterMagic::ArrIntImg a38 = arrI4;
HXDLIN( 139)							{
HXLINE( 139)								a38->width = width4;
HXDLIN( 139)								a38->height = height4;
HXDLIN( 139)								a38->data = ::Array_obj< int >::__new(0);
HXDLIN( 139)								a38->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 139)								{
HXLINE( 139)									int _g84 = 0;
HXDLIN( 139)									int _g85 = a38->length;
HXDLIN( 139)									while((_g84 < _g85)){
HXLINE( 139)										_g84 = (_g84 + 1);
HXDLIN( 139)										int i40 = (_g84 - 1);
HXDLIN( 139)										a38->data[i40] = 0;
            									}
            								}
            							}
HXDLIN( 139)							undoImage13 = a38;
            						}
            						break;
            						case (int)2: {
HXLINE( 139)							 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 139)							 ::iterMagic::U32ArrImg b36 = u32a4;
HXDLIN( 139)							{
HXLINE( 139)								b36->width = width4;
HXDLIN( 139)								b36->height = height4;
HXDLIN( 139)								b36->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 139)								int size4 = (b36->length * 4);
HXDLIN( 139)								b36->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN( 139)								{
HXLINE( 139)									int _g86 = 0;
HXDLIN( 139)									int _g87 = b36->length;
HXDLIN( 139)									while((_g86 < _g87)){
HXLINE( 139)										_g86 = (_g86 + 1);
HXDLIN( 139)										int i41 = (_g86 - 1);
HXDLIN( 139)										{
HXLINE( 139)											 ::haxe::io::ArrayBufferViewImpl this126 = b36->data;
HXDLIN( 139)											bool undoImage14;
HXDLIN( 139)											if ((i41 >= 0)) {
HXLINE( 139)												undoImage14 = (i41 < (this126->byteLength >> 2));
            											}
            											else {
HXLINE( 139)												undoImage14 = false;
            											}
HXDLIN( 139)											if (undoImage14) {
HXLINE( 139)												 ::haxe::io::Bytes _this4 = this126->bytes;
HXDLIN( 139)												int pos4 = ((i41 << 2) + this126->byteOffset);
HXDLIN( 139)												_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN( 139)												_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN( 139)												_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN( 139)												_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 139)							undoImage13 = b36;
            						}
            						break;
            						case (int)3: {
HXLINE( 139)							 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 139)							 ::iterMagic::VecIntImg v12 = vec4;
HXDLIN( 139)							{
HXLINE( 139)								v12->width = width4;
HXDLIN( 139)								v12->height = height4;
HXDLIN( 139)								v12->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 139)								v12->data = ::Array_obj< int >::__new(v12->length);
HXDLIN( 139)								{
HXLINE( 139)									int _g88 = 0;
HXDLIN( 139)									int _g89 = v12->length;
HXDLIN( 139)									while((_g88 < _g89)){
HXLINE( 139)										_g88 = (_g88 + 1);
HXDLIN( 139)										int i42 = (_g88 - 1);
HXDLIN( 139)										v12->data->__unsafe_set(i42,0);
            									}
            								}
            							}
HXDLIN( 139)							undoImage13 = v12;
            						}
            						break;
            						case (int)4: {
HXLINE( 139)							 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 139)							 ::iterMagic::StackIntImg b37 = sInt4;
HXDLIN( 139)							{
HXLINE( 139)								b37->width = width4;
HXDLIN( 139)								b37->height = height4;
HXDLIN( 139)								b37->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 139)								b37->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 139)								{
HXLINE( 139)									int len9 = b37->length;
HXDLIN( 139)									 ::haxe::ds::GenericStack_Int d4 = b37->data;
HXDLIN( 139)									if (::hx::IsNull( d4->head )) {
HXLINE( 139)										int _g90 = 0;
HXDLIN( 139)										int _g91 = len9;
HXDLIN( 139)										while((_g90 < _g91)){
HXLINE( 139)											_g90 = (_g90 + 1);
HXDLIN( 139)											int i43 = (_g90 - 1);
HXDLIN( 139)											d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            										}
            									}
            									else {
HXLINE( 139)										int _g92 = 0;
HXDLIN( 139)										int _g93 = len9;
HXDLIN( 139)										while((_g92 < _g93)){
HXLINE( 139)											_g92 = (_g92 + 1);
HXDLIN( 139)											int i44 = (_g92 - 1);
HXDLIN( 139)											{
HXLINE( 139)												 ::haxe::ds::GenericCell_Int l4 = b37->data->head;
HXDLIN( 139)												 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN( 139)												{
HXLINE( 139)													int _g94 = 0;
HXDLIN( 139)													int _g95 = i44;
HXDLIN( 139)													while((_g94 < _g95)){
HXLINE( 139)														_g94 = (_g94 + 1);
HXDLIN( 139)														int i45 = (_g94 - 1);
HXLINE( 345)														prev4 = l4;
HXLINE( 346)														l4 = l4->next;
            													}
            												}
HXLINE( 139)												if (::hx::IsNull( prev4 )) {
HXLINE( 139)													b37->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 139)													l4 = null();
            												}
            												else {
HXLINE( 139)													prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 139)													l4 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 139)							undoImage13 = b37;
            						}
            						break;
            					}
HXDLIN( 139)					this125->image = undoImage13;
HXDLIN( 139)					this125->width = width4;
HXDLIN( 139)					this125->height = height4;
HXDLIN( 139)					this125->imageType = ( (int)(imageType4) );
HXDLIN( 139)					undoImage12 = this125;
HXDLIN( 139)					{
HXLINE( 139)						int rectLeft4 = xIter34->start;
HXDLIN( 139)						int rectTop4 = yIter34->start;
HXDLIN( 139)						int rectRight4 = xIter34->max;
HXDLIN( 139)						bool forceClear4 = false;
HXDLIN( 139)						{
HXLINE( 139)							int _g96 = rectTop4;
HXDLIN( 139)							int _g97 = yIter34->max;
HXDLIN( 139)							while((_g96 < _g97)){
HXLINE( 139)								_g96 = (_g96 + 1);
HXDLIN( 139)								int dy7 = (_g96 - 1);
HXDLIN( 139)								{
HXLINE( 139)									int _g98 = rectLeft4;
HXDLIN( 139)									int _g99 = rectRight4;
HXDLIN( 139)									while((_g98 < _g99)){
HXLINE( 139)										_g98 = (_g98 + 1);
HXDLIN( 139)										int dx7 = (_g98 - 1);
HXDLIN( 139)										::Dynamic this127 = pixelImage->image;
HXDLIN( 139)										int index16;
HXDLIN( 139)										if (pixelImage->useVirtualPos) {
HXLINE( 139)											index16 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx7) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 139)											index16 = ::Std_obj::_hx_int(( (Float)(((dy7 * pixelImage->width) + dx7)) ));
            										}
HXDLIN( 139)										int c12 = ::iterMagic::Iimg_obj::get(this127,index16);
HXDLIN( 139)										int col4;
HXDLIN( 139)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)											col4 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            										}
            										else {
HXLINE( 139)											col4 = c12;
            										}
HXDLIN( 139)										bool hitQuad33;
HXDLIN( 139)										if (pixelImage->useMask) {
HXLINE( 139)											hitQuad33 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 139)											hitQuad33 = false;
            										}
HXDLIN( 139)										if (hitQuad33) {
HXLINE( 139)											 ::pi_xy::ImageStruct this128 = pixelImage->mask;
HXDLIN( 139)											::Dynamic this129 = this128->image;
HXDLIN( 139)											int index17;
HXDLIN( 139)											if (this128->useVirtualPos) {
HXLINE( 139)												index17 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this128->virtualY) * ( (Float)(this128->width) )) + dx7) - this128->virtualX));
            											}
            											else {
HXLINE( 139)												index17 = ::Std_obj::_hx_int(( (Float)(((dy7 * this128->width) + dx7)) ));
            											}
HXDLIN( 139)											int c13 = ::iterMagic::Iimg_obj::get(this129,index17);
HXDLIN( 139)											int v13;
HXDLIN( 139)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)												v13 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            											}
            											else {
HXLINE( 139)												v13 = c13;
            											}
HXDLIN( 139)											int maskPixel4 = v13;
HXDLIN( 139)											int this130 = col4;
HXDLIN( 139)											if ((maskPixel4 == 0)) {
HXLINE( 139)												col4 = this130;
            											}
            											else {
HXLINE( 139)												Float m04;
HXDLIN( 139)												int this131 = ((maskPixel4 >> 24) & 255);
HXDLIN( 139)												if ((this131 == 0)) {
HXLINE( 139)													m04 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													m04 = (( (Float)(this131) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float m14;
HXDLIN( 139)												int this132 = ((maskPixel4 >> 16) & 255);
HXDLIN( 139)												if ((this132 == 0)) {
HXLINE( 139)													m14 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													m14 = (( (Float)(this132) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float m24;
HXDLIN( 139)												int this133 = ((maskPixel4 >> 8) & 255);
HXDLIN( 139)												if ((this133 == 0)) {
HXLINE( 139)													m24 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													m24 = (( (Float)(this133) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float m34;
HXDLIN( 139)												int this134 = (maskPixel4 & 255);
HXDLIN( 139)												if ((this134 == 0)) {
HXLINE( 139)													m34 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													m34 = (( (Float)(this134) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this130 >> 24) & 255)) )));
HXDLIN( 139)												int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this130 >> 16) & 255)) )));
HXDLIN( 139)												int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this130 >> 8) & 255)) )));
HXDLIN( 139)												int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this130 & 255)) )));
HXDLIN( 139)												col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 139)										if ((col4 != 0)) {
HXLINE( 139)											int x13 = (dx7 - rectLeft4);
HXDLIN( 139)											int y13 = (dy7 - rectTop4);
HXDLIN( 139)											int c14 = col4;
HXDLIN( 139)											bool hitQuad34;
HXDLIN( 139)											if ((((c14 >> 24) & 255) < 254)) {
HXLINE( 139)												hitQuad34 = undoImage12->transparent;
            											}
            											else {
HXLINE( 139)												hitQuad34 = false;
            											}
HXDLIN( 139)											if (hitQuad34) {
HXLINE( 139)												int location8;
HXDLIN( 139)												if (undoImage12->useVirtualPos) {
HXLINE( 139)													location8 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x13) - undoImage12->virtualX));
            												}
            												else {
HXLINE( 139)													location8 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage12->width) + x13)) ));
            												}
HXDLIN( 139)												int this135 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN( 139)												int this136;
HXDLIN( 139)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)													this136 = ((((((this135 >> 24) & 255) << 24) | ((this135 & 255) << 16)) | (((this135 >> 8) & 255) << 8)) | ((this135 >> 16) & 255));
            												}
            												else {
HXLINE( 139)													this136 = this135;
            												}
HXDLIN( 139)												Float a112;
HXDLIN( 139)												int this137 = ((this136 >> 24) & 255);
HXDLIN( 139)												if ((this137 == 0)) {
HXLINE( 139)													a112 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													a112 = (( (Float)(this137) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float r110;
HXDLIN( 139)												int this138 = ((this136 >> 16) & 255);
HXDLIN( 139)												if ((this138 == 0)) {
HXLINE( 139)													r110 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													r110 = (( (Float)(this138) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float g110;
HXDLIN( 139)												int this139 = ((this136 >> 8) & 255);
HXDLIN( 139)												if ((this139 == 0)) {
HXLINE( 139)													g110 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													g110 = (( (Float)(this139) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float b113;
HXDLIN( 139)												int this140 = (this136 & 255);
HXDLIN( 139)												if ((this140 == 0)) {
HXLINE( 139)													b113 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													b113 = (( (Float)(this140) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float a211;
HXDLIN( 139)												int this141 = ((col4 >> 24) & 255);
HXDLIN( 139)												if ((this141 == 0)) {
HXLINE( 139)													a211 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													a211 = (( (Float)(this141) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float r28;
HXDLIN( 139)												int this142 = ((col4 >> 16) & 255);
HXDLIN( 139)												if ((this142 == 0)) {
HXLINE( 139)													r28 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													r28 = (( (Float)(this142) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float g28;
HXDLIN( 139)												int this143 = ((col4 >> 8) & 255);
HXDLIN( 139)												if ((this143 == 0)) {
HXLINE( 139)													g28 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													g28 = (( (Float)(this143) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float b212;
HXDLIN( 139)												int this144 = (col4 & 255);
HXDLIN( 139)												if ((this144 == 0)) {
HXLINE( 139)													b212 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													b212 = (( (Float)(this144) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float a39 = (a112 * (( (Float)(1) ) - a211));
HXDLIN( 139)												int r29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a39) + (r28 * a211))));
HXDLIN( 139)												int g29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a39) + (g28 * a211))));
HXDLIN( 139)												int b38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a39) + (b212 * a211))));
HXDLIN( 139)												int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a211)));
HXDLIN( 139)												int blended8 = ((((a40 << 24) | (r29 << 16)) | (g29 << 8)) | b38);
HXDLIN( 139)												{
HXLINE( 139)													int hitQuad35;
HXDLIN( 139)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)														hitQuad35 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            													}
            													else {
HXLINE( 139)														hitQuad35 = blended8;
            													}
HXDLIN( 139)													::iterMagic::Iimg_obj::set(undoImage12->image,location8,hitQuad35);
            												}
            											}
            											else {
HXLINE( 139)												::Dynamic this145 = undoImage12->image;
HXDLIN( 139)												int index18;
HXDLIN( 139)												if (undoImage12->useVirtualPos) {
HXLINE( 139)													index18 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x13) - undoImage12->virtualX));
            												}
            												else {
HXLINE( 139)													index18 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage12->width) + x13)) ));
            												}
HXDLIN( 139)												int hitQuad36;
HXDLIN( 139)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)													hitQuad36 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            												}
            												else {
HXLINE( 139)													hitQuad36 = c14;
            												}
HXDLIN( 139)												::iterMagic::Iimg_obj::set(this145,index18,hitQuad36);
            											}
            										}
            										else {
HXLINE( 139)											if (forceClear4) {
HXLINE( 139)												::Dynamic this146 = undoImage12->image;
HXDLIN( 139)												int x14 = (dx7 - rectLeft4);
HXDLIN( 139)												int y14 = (dy7 - rectTop4);
HXDLIN( 139)												int index19;
HXDLIN( 139)												if (undoImage12->useVirtualPos) {
HXLINE( 139)													index19 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x14) - undoImage12->virtualX));
            												}
            												else {
HXLINE( 139)													index19 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage12->width) + x14)) ));
            												}
HXDLIN( 139)												::iterMagic::Iimg_obj::set(this146,index19,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 139)				{
HXLINE( 139)					int _g_min8 = xIter34->start;
HXDLIN( 139)					int _g_max8 = xIter34->max;
HXDLIN( 139)					while((_g_min8 < _g_max8)){
HXLINE( 139)						_g_min8 = (_g_min8 + 1);
HXDLIN( 139)						int px5 = (_g_min8 - 1);
HXDLIN( 139)						Float pcx4 = (( (Float)(px5) ) - dx6);
HXDLIN( 139)						{
HXLINE( 139)							int _g_min9 = yIter34->start;
HXDLIN( 139)							int _g_max9 = yIter34->max;
HXDLIN( 139)							while((_g_min9 < _g_max9)){
HXLINE( 139)								_g_min9 = (_g_min9 + 1);
HXDLIN( 139)								int py5 = (_g_min9 - 1);
HXDLIN( 139)								Float pcy4 = (( (Float)(py5) ) - dy6);
HXDLIN( 139)								Float dot314 = ((pcx4 * bcx4) + (pcy4 * bcy4));
HXDLIN( 139)								Float dot324 = ((pcx4 * acx4) + (pcy4 * acy4));
HXDLIN( 139)								Float ratioA4 = (((dot224 * dot314) - (dot124 * dot324)) * denom14);
HXDLIN( 139)								Float ratioB4 = (((dot114 * dot324) - (dot124 * dot314)) * denom14);
HXDLIN( 139)								Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN( 139)								bool hitQuad37;
HXDLIN( 139)								bool hitQuad38;
HXDLIN( 139)								if ((ratioA4 >= 0)) {
HXLINE( 139)									hitQuad38 = (ratioB4 >= 0);
            								}
            								else {
HXLINE( 139)									hitQuad38 = false;
            								}
HXDLIN( 139)								if (hitQuad38) {
HXLINE( 139)									hitQuad37 = (ratioC4 >= 0);
            								}
            								else {
HXLINE( 139)									hitQuad37 = false;
            								}
HXDLIN( 139)								if (hitQuad37) {
HXLINE( 139)									int i46 = ::Std_obj::_hx_int((((( (Float)(aA4) ) * ratioA4) + (( (Float)(aB4) ) * ratioB4)) + (( (Float)(aC4) ) * ratioC4)));
HXDLIN( 139)									if ((i46 > 255)) {
HXLINE(  24)										i46 = 255;
            									}
HXLINE( 139)									if ((i46 < 0)) {
HXLINE(  25)										i46 = 0;
            									}
HXLINE( 139)									int a41 = i46;
HXDLIN( 139)									int i47 = ::Std_obj::_hx_int((((( (Float)(rA4) ) * ratioA4) + (( (Float)(rB4) ) * ratioB4)) + (( (Float)(rC4) ) * ratioC4)));
HXDLIN( 139)									if ((i47 > 255)) {
HXLINE(  24)										i47 = 255;
            									}
HXLINE( 139)									if ((i47 < 0)) {
HXLINE(  25)										i47 = 0;
            									}
HXLINE( 139)									int r30 = i47;
HXDLIN( 139)									int i48 = ::Std_obj::_hx_int((((( (Float)(gA4) ) * ratioA4) + (( (Float)(gB4) ) * ratioB4)) + (( (Float)(gC4) ) * ratioC4)));
HXDLIN( 139)									if ((i48 > 255)) {
HXLINE(  24)										i48 = 255;
            									}
HXLINE( 139)									if ((i48 < 0)) {
HXLINE(  25)										i48 = 0;
            									}
HXLINE( 139)									int g30 = i48;
HXDLIN( 139)									int i49 = ::Std_obj::_hx_int((((( (Float)(bA4) ) * ratioA4) + (( (Float)(bB4) ) * ratioB4)) + (( (Float)(bC4) ) * ratioC4)));
HXDLIN( 139)									if ((i49 > 255)) {
HXLINE(  24)										i49 = 255;
            									}
HXLINE( 139)									if ((i49 < 0)) {
HXLINE(  25)										i49 = 0;
            									}
HXLINE( 139)									int b39 = i49;
HXDLIN( 139)									{
HXLINE( 139)										int location9;
HXDLIN( 139)										if (pixelImage->useVirtualPos) {
HXLINE( 139)											location9 = ::Std_obj::_hx_int(((((( (Float)(py5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px5) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 139)											location9 = ::Std_obj::_hx_int(( (Float)(((py5 * pixelImage->width) + px5)) ));
            										}
HXDLIN( 139)										bool hitQuad39;
HXDLIN( 139)										if (pixelImage->transparent) {
HXLINE( 139)											hitQuad39 = (a41 < 254);
            										}
            										else {
HXLINE( 139)											hitQuad39 = false;
            										}
HXDLIN( 139)										if (hitQuad39) {
HXLINE( 139)											int this147 = ::iterMagic::Iimg_obj::get(pixelImage->image,location9);
HXDLIN( 139)											int old4;
HXDLIN( 139)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)												old4 = ((((((this147 >> 24) & 255) << 24) | ((this147 & 255) << 16)) | (((this147 >> 8) & 255) << 8)) | ((this147 >> 16) & 255));
            											}
            											else {
HXLINE( 139)												old4 = this147;
            											}
HXDLIN( 139)											int rhs4 = ((((a41 << 24) | (r30 << 16)) | (g30 << 8)) | b39);
HXDLIN( 139)											Float a113;
HXDLIN( 139)											int this148 = ((old4 >> 24) & 255);
HXDLIN( 139)											if ((this148 == 0)) {
HXLINE( 139)												a113 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												a113 = (( (Float)(this148) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float r111;
HXDLIN( 139)											int this149 = ((old4 >> 16) & 255);
HXDLIN( 139)											if ((this149 == 0)) {
HXLINE( 139)												r111 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												r111 = (( (Float)(this149) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float g111;
HXDLIN( 139)											int this150 = ((old4 >> 8) & 255);
HXDLIN( 139)											if ((this150 == 0)) {
HXLINE( 139)												g111 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												g111 = (( (Float)(this150) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float b114;
HXDLIN( 139)											int this151 = (old4 & 255);
HXDLIN( 139)											if ((this151 == 0)) {
HXLINE( 139)												b114 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												b114 = (( (Float)(this151) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float a212;
HXDLIN( 139)											int this152 = ((rhs4 >> 24) & 255);
HXDLIN( 139)											if ((this152 == 0)) {
HXLINE( 139)												a212 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												a212 = (( (Float)(this152) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float r210;
HXDLIN( 139)											int this153 = ((rhs4 >> 16) & 255);
HXDLIN( 139)											if ((this153 == 0)) {
HXLINE( 139)												r210 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												r210 = (( (Float)(this153) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float g210;
HXDLIN( 139)											int this154 = ((rhs4 >> 8) & 255);
HXDLIN( 139)											if ((this154 == 0)) {
HXLINE( 139)												g210 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												g210 = (( (Float)(this154) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float b213;
HXDLIN( 139)											int this155 = (rhs4 & 255);
HXDLIN( 139)											if ((this155 == 0)) {
HXLINE( 139)												b213 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												b213 = (( (Float)(this155) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float a310 = (a113 * (( (Float)(1) ) - a212));
HXDLIN( 139)											int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a310) + (r210 * a212))));
HXDLIN( 139)											int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a310) + (g210 * a212))));
HXDLIN( 139)											int b40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b213 * a212))));
HXDLIN( 139)											int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a212)));
HXDLIN( 139)											int blended9 = ((((a42 << 24) | (r31 << 16)) | (g31 << 8)) | b40);
HXDLIN( 139)											{
HXLINE( 139)												int hitQuad40;
HXDLIN( 139)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)													hitQuad40 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            												}
            												else {
HXLINE( 139)													hitQuad40 = blended9;
            												}
HXDLIN( 139)												::iterMagic::Iimg_obj::set(pixelImage->image,location9,hitQuad40);
            											}
            										}
            										else {
HXLINE( 139)											int value4;
HXDLIN( 139)											if (pixelImage->isLittle) {
HXLINE( 139)												value4 = ((((a41 << 24) | (b39 << 16)) | (g30 << 8)) | r30);
            											}
            											else {
HXLINE( 139)												value4 = ((((a41 << 24) | (r30 << 16)) | (g30 << 8)) | b39);
            											}
HXDLIN( 139)											::iterMagic::Iimg_obj::set(pixelImage->image,location9,value4);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 139)			{
HXLINE( 139)				bool hasHit3 = false;
HXDLIN( 139)				bool hasUndo5 = false;
HXDLIN( 139)				int aA5 = ((color2 >> 24) & 255);
HXDLIN( 139)				int rA5 = ((color2 >> 16) & 255);
HXDLIN( 139)				int gA5 = ((color2 >> 8) & 255);
HXDLIN( 139)				int bA5 = (color2 & 255);
HXDLIN( 139)				int aB5 = ((color1 >> 24) & 255);
HXDLIN( 139)				int rB5 = ((color1 >> 16) & 255);
HXDLIN( 139)				int gB5 = ((color1 >> 8) & 255);
HXDLIN( 139)				int bB5 = (color1 & 255);
HXDLIN( 139)				int aC5 = ((color2 >> 24) & 255);
HXDLIN( 139)				int rC5 = ((color2 >> 16) & 255);
HXDLIN( 139)				int gC5 = ((color2 >> 8) & 255);
HXDLIN( 139)				int bC5 = (color2 & 255);
HXDLIN( 139)				Float bcx5 = (cx2 - dx6);
HXDLIN( 139)				Float bcy5 = (cy2 - dy6);
HXDLIN( 139)				Float acx5 = (bx2 - dx6);
HXDLIN( 139)				Float acy5 = (by2 - dy6);
HXDLIN( 139)				Float dot115 = ((bcx5 * bcx5) + (bcy5 * bcy5));
HXDLIN( 139)				Float dot125 = ((bcx5 * acx5) + (bcy5 * acy5));
HXDLIN( 139)				Float dot225 = ((acx5 * acx5) + (acy5 * acy5));
HXDLIN( 139)				Float denom15 = (( (Float)(1) ) / ((dot115 * dot225) - (dot125 * dot125)));
HXDLIN( 139)				 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN( 139)				if ((bx2 > cx2)) {
HXLINE( 139)					if ((bx2 > dx6)) {
HXLINE( 139)						int min20;
HXDLIN( 139)						if ((cx2 > dx6)) {
HXLINE( 139)							min20 = ::Math_obj::floor(dx6);
            						}
            						else {
HXLINE( 139)							min20 = ::Math_obj::floor(cx2);
            						}
HXDLIN( 139)						int ii_min40 = min20;
HXDLIN( 139)						int ii_max40 = ::Math_obj::ceil(bx2);
HXDLIN( 139)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            					}
            					else {
HXLINE( 139)						int ii_min41 = ::Math_obj::floor(cx2);
HXDLIN( 139)						int ii_max41 = ::Math_obj::ceil(dx6);
HXDLIN( 139)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            					}
            				}
            				else {
HXLINE( 139)					if ((cx2 > dx6)) {
HXLINE( 139)						int min21;
HXDLIN( 139)						if ((bx2 > dx6)) {
HXLINE( 139)							min21 = ::Math_obj::floor(dx6);
            						}
            						else {
HXLINE( 139)							min21 = ::Math_obj::ceil(bx2);
            						}
HXDLIN( 139)						int ii_min42 = min21;
HXDLIN( 139)						int ii_max42 = ::Math_obj::ceil(cx2);
HXDLIN( 139)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            					}
            					else {
HXLINE( 139)						int ii_min43 = ::Math_obj::floor(bx2);
HXDLIN( 139)						int ii_max43 = ::Math_obj::ceil(dx6);
HXDLIN( 139)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            					}
            				}
HXDLIN( 139)				 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN( 139)				if ((by2 > cy2)) {
HXLINE( 139)					if ((by2 > dy6)) {
HXLINE( 139)						int min22;
HXDLIN( 139)						if ((cy2 > dy6)) {
HXLINE( 139)							min22 = ::Math_obj::floor(dy6);
            						}
            						else {
HXLINE( 139)							min22 = ::Math_obj::floor(cy2);
            						}
HXDLIN( 139)						int ii_min44 = min22;
HXDLIN( 139)						int ii_max44 = ::Math_obj::ceil(by2);
HXDLIN( 139)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            					}
            					else {
HXLINE( 139)						int ii_min45 = ::Math_obj::floor(cy2);
HXDLIN( 139)						int ii_max45 = ::Math_obj::ceil(dy6);
HXDLIN( 139)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            					}
            				}
            				else {
HXLINE( 139)					if ((cy2 > dy6)) {
HXLINE( 139)						int min23;
HXDLIN( 139)						if ((by2 > dy6)) {
HXLINE( 139)							min23 = ::Math_obj::floor(dy6);
            						}
            						else {
HXLINE( 139)							min23 = ::Math_obj::ceil(by2);
            						}
HXDLIN( 139)						int ii_min46 = min23;
HXDLIN( 139)						int ii_max46 = ::Math_obj::ceil(cy2);
HXDLIN( 139)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            					}
            					else {
HXLINE( 139)						int ii_min47 = ::Math_obj::floor(by2);
HXDLIN( 139)						int ii_max47 = ::Math_obj::ceil(dy6);
HXDLIN( 139)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            					}
            				}
HXDLIN( 139)				 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN( 139)				if (hasUndo5) {
HXLINE( 139)					int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN( 139)					int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN( 139)					 ::Dynamic imageType5 = null();
HXDLIN( 139)					 ::pi_xy::ImageStruct this156 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 139)					if (::hx::IsNull( imageType5 )) {
HXLINE(  54)						imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 139)					::Dynamic undoImage16;
HXDLIN( 139)					switch((int)(( (int)(imageType5) ))){
            						case (int)0: {
HXLINE( 139)							 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 139)							 ::iterMagic::BytesImg b41 = byt5;
HXDLIN( 139)							{
HXLINE( 139)								b41->width = width5;
HXDLIN( 139)								b41->height = height5;
HXDLIN( 139)								b41->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 139)								b41->data = ::haxe::io::Bytes_obj::alloc((b41->length * 4));
HXDLIN( 139)								{
HXLINE( 139)									int len10 = b41->length;
HXDLIN( 139)									int w5 = 0;
HXDLIN( 139)									{
HXLINE( 139)										int _g100 = 0;
HXDLIN( 139)										int _g101 = b41->height;
HXDLIN( 139)										while((_g100 < _g101)){
HXLINE( 139)											_g100 = (_g100 + 1);
HXDLIN( 139)											int y15 = (_g100 - 1);
HXDLIN( 139)											{
HXLINE( 139)												int _g102 = 0;
HXDLIN( 139)												int _g103 = b41->width;
HXDLIN( 139)												while((_g102 < _g103)){
HXLINE( 139)													_g102 = (_g102 + 1);
HXDLIN( 139)													int x15 = (_g102 - 1);
HXDLIN( 139)													{
HXLINE( 139)														w5 = (w5 + 1);
HXDLIN( 139)														b41->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 139)													{
HXLINE( 139)														w5 = (w5 + 1);
HXDLIN( 139)														b41->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 139)													{
HXLINE( 139)														w5 = (w5 + 1);
HXDLIN( 139)														b41->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 139)													{
HXLINE( 139)														w5 = (w5 + 1);
HXDLIN( 139)														b41->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 139)							undoImage16 = b41;
            						}
            						break;
            						case (int)1: {
HXLINE( 139)							 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 139)							 ::iterMagic::ArrIntImg a43 = arrI5;
HXDLIN( 139)							{
HXLINE( 139)								a43->width = width5;
HXDLIN( 139)								a43->height = height5;
HXDLIN( 139)								a43->data = ::Array_obj< int >::__new(0);
HXDLIN( 139)								a43->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 139)								{
HXLINE( 139)									int _g104 = 0;
HXDLIN( 139)									int _g105 = a43->length;
HXDLIN( 139)									while((_g104 < _g105)){
HXLINE( 139)										_g104 = (_g104 + 1);
HXDLIN( 139)										int i50 = (_g104 - 1);
HXDLIN( 139)										a43->data[i50] = 0;
            									}
            								}
            							}
HXDLIN( 139)							undoImage16 = a43;
            						}
            						break;
            						case (int)2: {
HXLINE( 139)							 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 139)							 ::iterMagic::U32ArrImg b42 = u32a5;
HXDLIN( 139)							{
HXLINE( 139)								b42->width = width5;
HXDLIN( 139)								b42->height = height5;
HXDLIN( 139)								b42->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 139)								int size5 = (b42->length * 4);
HXDLIN( 139)								b42->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN( 139)								{
HXLINE( 139)									int _g106 = 0;
HXDLIN( 139)									int _g107 = b42->length;
HXDLIN( 139)									while((_g106 < _g107)){
HXLINE( 139)										_g106 = (_g106 + 1);
HXDLIN( 139)										int i51 = (_g106 - 1);
HXDLIN( 139)										{
HXLINE( 139)											 ::haxe::io::ArrayBufferViewImpl this157 = b42->data;
HXDLIN( 139)											bool undoImage17;
HXDLIN( 139)											if ((i51 >= 0)) {
HXLINE( 139)												undoImage17 = (i51 < (this157->byteLength >> 2));
            											}
            											else {
HXLINE( 139)												undoImage17 = false;
            											}
HXDLIN( 139)											if (undoImage17) {
HXLINE( 139)												 ::haxe::io::Bytes _this5 = this157->bytes;
HXDLIN( 139)												int pos5 = ((i51 << 2) + this157->byteOffset);
HXDLIN( 139)												_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN( 139)												_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN( 139)												_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN( 139)												_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 139)							undoImage16 = b42;
            						}
            						break;
            						case (int)3: {
HXLINE( 139)							 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 139)							 ::iterMagic::VecIntImg v14 = vec5;
HXDLIN( 139)							{
HXLINE( 139)								v14->width = width5;
HXDLIN( 139)								v14->height = height5;
HXDLIN( 139)								v14->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 139)								v14->data = ::Array_obj< int >::__new(v14->length);
HXDLIN( 139)								{
HXLINE( 139)									int _g108 = 0;
HXDLIN( 139)									int _g109 = v14->length;
HXDLIN( 139)									while((_g108 < _g109)){
HXLINE( 139)										_g108 = (_g108 + 1);
HXDLIN( 139)										int i52 = (_g108 - 1);
HXDLIN( 139)										v14->data->__unsafe_set(i52,0);
            									}
            								}
            							}
HXDLIN( 139)							undoImage16 = v14;
            						}
            						break;
            						case (int)4: {
HXLINE( 139)							 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 139)							 ::iterMagic::StackIntImg b43 = sInt5;
HXDLIN( 139)							{
HXLINE( 139)								b43->width = width5;
HXDLIN( 139)								b43->height = height5;
HXDLIN( 139)								b43->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 139)								b43->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 139)								{
HXLINE( 139)									int len11 = b43->length;
HXDLIN( 139)									 ::haxe::ds::GenericStack_Int d5 = b43->data;
HXDLIN( 139)									if (::hx::IsNull( d5->head )) {
HXLINE( 139)										int _g110 = 0;
HXDLIN( 139)										int _g111 = len11;
HXDLIN( 139)										while((_g110 < _g111)){
HXLINE( 139)											_g110 = (_g110 + 1);
HXDLIN( 139)											int i53 = (_g110 - 1);
HXDLIN( 139)											d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            										}
            									}
            									else {
HXLINE( 139)										int _g112 = 0;
HXDLIN( 139)										int _g113 = len11;
HXDLIN( 139)										while((_g112 < _g113)){
HXLINE( 139)											_g112 = (_g112 + 1);
HXDLIN( 139)											int i54 = (_g112 - 1);
HXDLIN( 139)											{
HXLINE( 139)												 ::haxe::ds::GenericCell_Int l5 = b43->data->head;
HXDLIN( 139)												 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN( 139)												{
HXLINE( 139)													int _g114 = 0;
HXDLIN( 139)													int _g115 = i54;
HXDLIN( 139)													while((_g114 < _g115)){
HXLINE( 139)														_g114 = (_g114 + 1);
HXDLIN( 139)														int i55 = (_g114 - 1);
HXLINE( 345)														prev5 = l5;
HXLINE( 346)														l5 = l5->next;
            													}
            												}
HXLINE( 139)												if (::hx::IsNull( prev5 )) {
HXLINE( 139)													b43->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 139)													l5 = null();
            												}
            												else {
HXLINE( 139)													prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 139)													l5 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 139)							undoImage16 = b43;
            						}
            						break;
            					}
HXDLIN( 139)					this156->image = undoImage16;
HXDLIN( 139)					this156->width = width5;
HXDLIN( 139)					this156->height = height5;
HXDLIN( 139)					this156->imageType = ( (int)(imageType5) );
HXDLIN( 139)					undoImage15 = this156;
HXDLIN( 139)					{
HXLINE( 139)						int rectLeft5 = xIter35->start;
HXDLIN( 139)						int rectTop5 = yIter35->start;
HXDLIN( 139)						int rectRight5 = xIter35->max;
HXDLIN( 139)						bool forceClear5 = false;
HXDLIN( 139)						{
HXLINE( 139)							int _g116 = rectTop5;
HXDLIN( 139)							int _g117 = yIter35->max;
HXDLIN( 139)							while((_g116 < _g117)){
HXLINE( 139)								_g116 = (_g116 + 1);
HXDLIN( 139)								int dy8 = (_g116 - 1);
HXDLIN( 139)								{
HXLINE( 139)									int _g118 = rectLeft5;
HXDLIN( 139)									int _g119 = rectRight5;
HXDLIN( 139)									while((_g118 < _g119)){
HXLINE( 139)										_g118 = (_g118 + 1);
HXDLIN( 139)										int dx8 = (_g118 - 1);
HXDLIN( 139)										::Dynamic this158 = pixelImage->image;
HXDLIN( 139)										int index20;
HXDLIN( 139)										if (pixelImage->useVirtualPos) {
HXLINE( 139)											index20 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx8) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 139)											index20 = ::Std_obj::_hx_int(( (Float)(((dy8 * pixelImage->width) + dx8)) ));
            										}
HXDLIN( 139)										int c15 = ::iterMagic::Iimg_obj::get(this158,index20);
HXDLIN( 139)										int col5;
HXDLIN( 139)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)											col5 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            										}
            										else {
HXLINE( 139)											col5 = c15;
            										}
HXDLIN( 139)										bool hitQuad41;
HXDLIN( 139)										if (pixelImage->useMask) {
HXLINE( 139)											hitQuad41 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 139)											hitQuad41 = false;
            										}
HXDLIN( 139)										if (hitQuad41) {
HXLINE( 139)											 ::pi_xy::ImageStruct this159 = pixelImage->mask;
HXDLIN( 139)											::Dynamic this160 = this159->image;
HXDLIN( 139)											int index21;
HXDLIN( 139)											if (this159->useVirtualPos) {
HXLINE( 139)												index21 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this159->virtualY) * ( (Float)(this159->width) )) + dx8) - this159->virtualX));
            											}
            											else {
HXLINE( 139)												index21 = ::Std_obj::_hx_int(( (Float)(((dy8 * this159->width) + dx8)) ));
            											}
HXDLIN( 139)											int c16 = ::iterMagic::Iimg_obj::get(this160,index21);
HXDLIN( 139)											int v15;
HXDLIN( 139)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)												v15 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            											}
            											else {
HXLINE( 139)												v15 = c16;
            											}
HXDLIN( 139)											int maskPixel5 = v15;
HXDLIN( 139)											int this161 = col5;
HXDLIN( 139)											if ((maskPixel5 == 0)) {
HXLINE( 139)												col5 = this161;
            											}
            											else {
HXLINE( 139)												Float m05;
HXDLIN( 139)												int this162 = ((maskPixel5 >> 24) & 255);
HXDLIN( 139)												if ((this162 == 0)) {
HXLINE( 139)													m05 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													m05 = (( (Float)(this162) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float m15;
HXDLIN( 139)												int this163 = ((maskPixel5 >> 16) & 255);
HXDLIN( 139)												if ((this163 == 0)) {
HXLINE( 139)													m15 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													m15 = (( (Float)(this163) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float m25;
HXDLIN( 139)												int this164 = ((maskPixel5 >> 8) & 255);
HXDLIN( 139)												if ((this164 == 0)) {
HXLINE( 139)													m25 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													m25 = (( (Float)(this164) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float m35;
HXDLIN( 139)												int this165 = (maskPixel5 & 255);
HXDLIN( 139)												if ((this165 == 0)) {
HXLINE( 139)													m35 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													m35 = (( (Float)(this165) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this161 >> 24) & 255)) )));
HXDLIN( 139)												int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this161 >> 16) & 255)) )));
HXDLIN( 139)												int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this161 >> 8) & 255)) )));
HXDLIN( 139)												int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this161 & 255)) )));
HXDLIN( 139)												col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 139)										if ((col5 != 0)) {
HXLINE( 139)											int x16 = (dx8 - rectLeft5);
HXDLIN( 139)											int y16 = (dy8 - rectTop5);
HXDLIN( 139)											int c17 = col5;
HXDLIN( 139)											bool hitQuad42;
HXDLIN( 139)											if ((((c17 >> 24) & 255) < 254)) {
HXLINE( 139)												hitQuad42 = undoImage15->transparent;
            											}
            											else {
HXLINE( 139)												hitQuad42 = false;
            											}
HXDLIN( 139)											if (hitQuad42) {
HXLINE( 139)												int location10;
HXDLIN( 139)												if (undoImage15->useVirtualPos) {
HXLINE( 139)													location10 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x16) - undoImage15->virtualX));
            												}
            												else {
HXLINE( 139)													location10 = ::Std_obj::_hx_int(( (Float)(((y16 * undoImage15->width) + x16)) ));
            												}
HXDLIN( 139)												int this166 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN( 139)												int this167;
HXDLIN( 139)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)													this167 = ((((((this166 >> 24) & 255) << 24) | ((this166 & 255) << 16)) | (((this166 >> 8) & 255) << 8)) | ((this166 >> 16) & 255));
            												}
            												else {
HXLINE( 139)													this167 = this166;
            												}
HXDLIN( 139)												Float a114;
HXDLIN( 139)												int this168 = ((this167 >> 24) & 255);
HXDLIN( 139)												if ((this168 == 0)) {
HXLINE( 139)													a114 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													a114 = (( (Float)(this168) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float r112;
HXDLIN( 139)												int this169 = ((this167 >> 16) & 255);
HXDLIN( 139)												if ((this169 == 0)) {
HXLINE( 139)													r112 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													r112 = (( (Float)(this169) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float g112;
HXDLIN( 139)												int this170 = ((this167 >> 8) & 255);
HXDLIN( 139)												if ((this170 == 0)) {
HXLINE( 139)													g112 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													g112 = (( (Float)(this170) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float b115;
HXDLIN( 139)												int this171 = (this167 & 255);
HXDLIN( 139)												if ((this171 == 0)) {
HXLINE( 139)													b115 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													b115 = (( (Float)(this171) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float a213;
HXDLIN( 139)												int this172 = ((col5 >> 24) & 255);
HXDLIN( 139)												if ((this172 == 0)) {
HXLINE( 139)													a213 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													a213 = (( (Float)(this172) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float r211;
HXDLIN( 139)												int this173 = ((col5 >> 16) & 255);
HXDLIN( 139)												if ((this173 == 0)) {
HXLINE( 139)													r211 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													r211 = (( (Float)(this173) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float g211;
HXDLIN( 139)												int this174 = ((col5 >> 8) & 255);
HXDLIN( 139)												if ((this174 == 0)) {
HXLINE( 139)													g211 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													g211 = (( (Float)(this174) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float b214;
HXDLIN( 139)												int this175 = (col5 & 255);
HXDLIN( 139)												if ((this175 == 0)) {
HXLINE( 139)													b214 = ((Float)0.);
            												}
            												else {
HXLINE( 139)													b214 = (( (Float)(this175) ) / ( (Float)(255) ));
            												}
HXDLIN( 139)												Float a311 = (a114 * (( (Float)(1) ) - a213));
HXDLIN( 139)												int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a311) + (r211 * a213))));
HXDLIN( 139)												int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a311) + (g211 * a213))));
HXDLIN( 139)												int b44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b214 * a213))));
HXDLIN( 139)												int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a213)));
HXDLIN( 139)												int blended10 = ((((a44 << 24) | (r32 << 16)) | (g32 << 8)) | b44);
HXDLIN( 139)												{
HXLINE( 139)													int hitQuad43;
HXDLIN( 139)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)														hitQuad43 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            													}
            													else {
HXLINE( 139)														hitQuad43 = blended10;
            													}
HXDLIN( 139)													::iterMagic::Iimg_obj::set(undoImage15->image,location10,hitQuad43);
            												}
            											}
            											else {
HXLINE( 139)												::Dynamic this176 = undoImage15->image;
HXDLIN( 139)												int index22;
HXDLIN( 139)												if (undoImage15->useVirtualPos) {
HXLINE( 139)													index22 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x16) - undoImage15->virtualX));
            												}
            												else {
HXLINE( 139)													index22 = ::Std_obj::_hx_int(( (Float)(((y16 * undoImage15->width) + x16)) ));
            												}
HXDLIN( 139)												int hitQuad44;
HXDLIN( 139)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)													hitQuad44 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            												}
            												else {
HXLINE( 139)													hitQuad44 = c17;
            												}
HXDLIN( 139)												::iterMagic::Iimg_obj::set(this176,index22,hitQuad44);
            											}
            										}
            										else {
HXLINE( 139)											if (forceClear5) {
HXLINE( 139)												::Dynamic this177 = undoImage15->image;
HXDLIN( 139)												int x17 = (dx8 - rectLeft5);
HXDLIN( 139)												int y17 = (dy8 - rectTop5);
HXDLIN( 139)												int index23;
HXDLIN( 139)												if (undoImage15->useVirtualPos) {
HXLINE( 139)													index23 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x17) - undoImage15->virtualX));
            												}
            												else {
HXLINE( 139)													index23 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage15->width) + x17)) ));
            												}
HXDLIN( 139)												::iterMagic::Iimg_obj::set(this177,index23,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 139)				{
HXLINE( 139)					int _g_min10 = xIter35->start;
HXDLIN( 139)					int _g_max10 = xIter35->max;
HXDLIN( 139)					while((_g_min10 < _g_max10)){
HXLINE( 139)						_g_min10 = (_g_min10 + 1);
HXDLIN( 139)						int px6 = (_g_min10 - 1);
HXDLIN( 139)						Float pcx5 = (( (Float)(px6) ) - dx6);
HXDLIN( 139)						{
HXLINE( 139)							int _g_min11 = yIter35->start;
HXDLIN( 139)							int _g_max11 = yIter35->max;
HXDLIN( 139)							while((_g_min11 < _g_max11)){
HXLINE( 139)								_g_min11 = (_g_min11 + 1);
HXDLIN( 139)								int py6 = (_g_min11 - 1);
HXDLIN( 139)								Float pcy5 = (( (Float)(py6) ) - dy6);
HXDLIN( 139)								Float dot315 = ((pcx5 * bcx5) + (pcy5 * bcy5));
HXDLIN( 139)								Float dot325 = ((pcx5 * acx5) + (pcy5 * acy5));
HXDLIN( 139)								Float ratioA5 = (((dot225 * dot315) - (dot125 * dot325)) * denom15);
HXDLIN( 139)								Float ratioB5 = (((dot115 * dot325) - (dot125 * dot315)) * denom15);
HXDLIN( 139)								Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN( 139)								bool hitQuad45;
HXDLIN( 139)								bool hitQuad46;
HXDLIN( 139)								if ((ratioA5 >= 0)) {
HXLINE( 139)									hitQuad46 = (ratioB5 >= 0);
            								}
            								else {
HXLINE( 139)									hitQuad46 = false;
            								}
HXDLIN( 139)								if (hitQuad46) {
HXLINE( 139)									hitQuad45 = (ratioC5 >= 0);
            								}
            								else {
HXLINE( 139)									hitQuad45 = false;
            								}
HXDLIN( 139)								if (hitQuad45) {
HXLINE( 139)									int i56 = ::Std_obj::_hx_int((((( (Float)(aA5) ) * ratioA5) + (( (Float)(aB5) ) * ratioB5)) + (( (Float)(aC5) ) * ratioC5)));
HXDLIN( 139)									if ((i56 > 255)) {
HXLINE(  24)										i56 = 255;
            									}
HXLINE( 139)									if ((i56 < 0)) {
HXLINE(  25)										i56 = 0;
            									}
HXLINE( 139)									int a45 = i56;
HXDLIN( 139)									int i57 = ::Std_obj::_hx_int((((( (Float)(rA5) ) * ratioA5) + (( (Float)(rB5) ) * ratioB5)) + (( (Float)(rC5) ) * ratioC5)));
HXDLIN( 139)									if ((i57 > 255)) {
HXLINE(  24)										i57 = 255;
            									}
HXLINE( 139)									if ((i57 < 0)) {
HXLINE(  25)										i57 = 0;
            									}
HXLINE( 139)									int r33 = i57;
HXDLIN( 139)									int i58 = ::Std_obj::_hx_int((((( (Float)(gA5) ) * ratioA5) + (( (Float)(gB5) ) * ratioB5)) + (( (Float)(gC5) ) * ratioC5)));
HXDLIN( 139)									if ((i58 > 255)) {
HXLINE(  24)										i58 = 255;
            									}
HXLINE( 139)									if ((i58 < 0)) {
HXLINE(  25)										i58 = 0;
            									}
HXLINE( 139)									int g33 = i58;
HXDLIN( 139)									int i59 = ::Std_obj::_hx_int((((( (Float)(bA5) ) * ratioA5) + (( (Float)(bB5) ) * ratioB5)) + (( (Float)(bC5) ) * ratioC5)));
HXDLIN( 139)									if ((i59 > 255)) {
HXLINE(  24)										i59 = 255;
            									}
HXLINE( 139)									if ((i59 < 0)) {
HXLINE(  25)										i59 = 0;
            									}
HXLINE( 139)									int b45 = i59;
HXDLIN( 139)									{
HXLINE( 139)										int location11;
HXDLIN( 139)										if (pixelImage->useVirtualPos) {
HXLINE( 139)											location11 = ::Std_obj::_hx_int(((((( (Float)(py6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px6) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 139)											location11 = ::Std_obj::_hx_int(( (Float)(((py6 * pixelImage->width) + px6)) ));
            										}
HXDLIN( 139)										bool hitQuad47;
HXDLIN( 139)										if (pixelImage->transparent) {
HXLINE( 139)											hitQuad47 = (a45 < 254);
            										}
            										else {
HXLINE( 139)											hitQuad47 = false;
            										}
HXDLIN( 139)										if (hitQuad47) {
HXLINE( 139)											int this178 = ::iterMagic::Iimg_obj::get(pixelImage->image,location11);
HXDLIN( 139)											int old5;
HXDLIN( 139)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)												old5 = ((((((this178 >> 24) & 255) << 24) | ((this178 & 255) << 16)) | (((this178 >> 8) & 255) << 8)) | ((this178 >> 16) & 255));
            											}
            											else {
HXLINE( 139)												old5 = this178;
            											}
HXDLIN( 139)											int rhs5 = ((((a45 << 24) | (r33 << 16)) | (g33 << 8)) | b45);
HXDLIN( 139)											Float a115;
HXDLIN( 139)											int this179 = ((old5 >> 24) & 255);
HXDLIN( 139)											if ((this179 == 0)) {
HXLINE( 139)												a115 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												a115 = (( (Float)(this179) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float r113;
HXDLIN( 139)											int this180 = ((old5 >> 16) & 255);
HXDLIN( 139)											if ((this180 == 0)) {
HXLINE( 139)												r113 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												r113 = (( (Float)(this180) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float g113;
HXDLIN( 139)											int this181 = ((old5 >> 8) & 255);
HXDLIN( 139)											if ((this181 == 0)) {
HXLINE( 139)												g113 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												g113 = (( (Float)(this181) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float b116;
HXDLIN( 139)											int this182 = (old5 & 255);
HXDLIN( 139)											if ((this182 == 0)) {
HXLINE( 139)												b116 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												b116 = (( (Float)(this182) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float a214;
HXDLIN( 139)											int this183 = ((rhs5 >> 24) & 255);
HXDLIN( 139)											if ((this183 == 0)) {
HXLINE( 139)												a214 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												a214 = (( (Float)(this183) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float r212;
HXDLIN( 139)											int this184 = ((rhs5 >> 16) & 255);
HXDLIN( 139)											if ((this184 == 0)) {
HXLINE( 139)												r212 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												r212 = (( (Float)(this184) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float g212;
HXDLIN( 139)											int this185 = ((rhs5 >> 8) & 255);
HXDLIN( 139)											if ((this185 == 0)) {
HXLINE( 139)												g212 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												g212 = (( (Float)(this185) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float b215;
HXDLIN( 139)											int this186 = (rhs5 & 255);
HXDLIN( 139)											if ((this186 == 0)) {
HXLINE( 139)												b215 = ((Float)0.);
            											}
            											else {
HXLINE( 139)												b215 = (( (Float)(this186) ) / ( (Float)(255) ));
            											}
HXDLIN( 139)											Float a312 = (a115 * (( (Float)(1) ) - a214));
HXDLIN( 139)											int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a312) + (r212 * a214))));
HXDLIN( 139)											int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a312) + (g212 * a214))));
HXDLIN( 139)											int b46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b215 * a214))));
HXDLIN( 139)											int a46 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a214)));
HXDLIN( 139)											int blended11 = ((((a46 << 24) | (r34 << 16)) | (g34 << 8)) | b46);
HXDLIN( 139)											{
HXLINE( 139)												int hitQuad48;
HXDLIN( 139)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 139)													hitQuad48 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            												}
            												else {
HXLINE( 139)													hitQuad48 = blended11;
            												}
HXDLIN( 139)												::iterMagic::Iimg_obj::set(pixelImage->image,location11,hitQuad48);
            											}
            										}
            										else {
HXLINE( 139)											int value5;
HXDLIN( 139)											if (pixelImage->isLittle) {
HXLINE( 139)												value5 = ((((a45 << 24) | (b45 << 16)) | (g33 << 8)) | r33);
            											}
            											else {
HXLINE( 139)												value5 = ((((a45 << 24) | (r33 << 16)) | (g33 << 8)) | b45);
            											}
HXDLIN( 139)											::iterMagic::Iimg_obj::set(pixelImage->image,location11,value5);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 139)				if ((hasHit3 == false)) {
HXLINE( 139)					 ::pi_xy::algo::HitTri v16 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx2,by2,cx2,cy2,dx6,dy6,true);
HXDLIN( 139)					if (hasUndo5) {
HXLINE( 139)						v16->undoImage = undoImage15;
HXDLIN( 139)						v16->undoX = xIter35->start;
HXDLIN( 139)						v16->undoY = yIter35->start;
            					}
            				}
            			}
HXDLIN( 139)			 ::pi_xy::algo::HitQuad v17 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax2,ay2,bx2,by2,cx2,cy2,dx6,dy6,true);
HXLINE( 132)			hitQuad = v17;
            		}
HXLINE( 141)		Float cx3 = h2;
HXLINE( 142)		Float cy3 = radius2;
HXLINE( 143)		Float bx3 = h2;
HXLINE( 144)		Float by3 = -(radius2);
HXLINE( 145)		Float temp3 = ((Float)0.);
HXLINE( 146)		temp3 = (px + ((bx3 * cos) - (by3 * sin)));
HXLINE( 147)		by3 = (py + ((by3 * cos) + (bx3 * sin)));
HXLINE( 148)		bx3 = temp3;
HXLINE( 149)		temp3 = (px + ((cx3 * cos) - (cy3 * sin)));
HXLINE( 150)		cy3 = (py + ((cy3 * cos) + (cx3 * sin)));
HXLINE( 151)		cx3 = temp3;
HXLINE( 152)		 ::pi_xy::pixel::_TwoGrad::TwoGrad_ twoColors =  ::pi_xy::pixel::_TwoGrad::TwoGrad__obj::__alloc( HX_CTX ,color1,color2);
HXLINE( 153)		int a47 = twoColors->colorClock;
HXDLIN( 153)		int b47 = twoColors->colorAnti;
HXDLIN( 153)		int half = ((((::Math_obj::round(((((( (Float)(((a47 >> 24) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b47 >> 24) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 24) | (::Math_obj::round(((((( (Float)(((a47 >> 16) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b47 >> 16) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 16)) | (::Math_obj::round(((((( (Float)(((a47 >> 8) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b47 >> 8) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 8)) | ::Math_obj::round(((((( (Float)((a47 & 255)) ) / ( (Float)(255) )) + (( (Float)((b47 & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))));
HXLINE( 154)		bool hasUndo6 = false;
HXDLIN( 154)		int aA6 = ((color1 >> 24) & 255);
HXDLIN( 154)		int rA6 = ((color1 >> 16) & 255);
HXDLIN( 154)		int gA6 = ((color1 >> 8) & 255);
HXDLIN( 154)		int bA6 = (color1 & 255);
HXDLIN( 154)		int aB6 = ((half >> 24) & 255);
HXDLIN( 154)		int rB6 = ((half >> 16) & 255);
HXDLIN( 154)		int gB6 = ((half >> 8) & 255);
HXDLIN( 154)		int bB6 = (half & 255);
HXDLIN( 154)		int aC6 = ((color2 >> 24) & 255);
HXDLIN( 154)		int rC6 = ((color2 >> 16) & 255);
HXDLIN( 154)		int gC6 = ((color2 >> 8) & 255);
HXDLIN( 154)		int bC6 = (color2 & 255);
HXDLIN( 154)		Float bcx6 = (bx3 - cx3);
HXDLIN( 154)		Float bcy6 = (by3 - cy3);
HXDLIN( 154)		Float acx6 = (qx - cx3);
HXDLIN( 154)		Float acy6 = (qy - cy3);
HXDLIN( 154)		Float dot116 = ((bcx6 * bcx6) + (bcy6 * bcy6));
HXDLIN( 154)		Float dot126 = ((bcx6 * acx6) + (bcy6 * acy6));
HXDLIN( 154)		Float dot226 = ((acx6 * acx6) + (acy6 * acy6));
HXDLIN( 154)		Float denom16 = (( (Float)(1) ) / ((dot116 * dot226) - (dot126 * dot126)));
HXDLIN( 154)		 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN( 154)		if ((qx > bx3)) {
HXLINE( 154)			if ((qx > cx3)) {
HXLINE( 154)				int min24;
HXDLIN( 154)				if ((bx3 > cx3)) {
HXLINE( 154)					min24 = ::Math_obj::floor(cx3);
            				}
            				else {
HXLINE( 154)					min24 = ::Math_obj::floor(bx3);
            				}
HXDLIN( 154)				int ii_min48 = min24;
HXDLIN( 154)				int ii_max48 = ::Math_obj::ceil(qx);
HXDLIN( 154)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            			}
            			else {
HXLINE( 154)				int ii_min49 = ::Math_obj::floor(bx3);
HXDLIN( 154)				int ii_max49 = ::Math_obj::ceil(cx3);
HXDLIN( 154)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            			}
            		}
            		else {
HXLINE( 154)			if ((bx3 > cx3)) {
HXLINE( 154)				int min25;
HXDLIN( 154)				if ((qx > cx3)) {
HXLINE( 154)					min25 = ::Math_obj::floor(cx3);
            				}
            				else {
HXLINE( 154)					min25 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 154)				int ii_min50 = min25;
HXDLIN( 154)				int ii_max50 = ::Math_obj::ceil(bx3);
HXDLIN( 154)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            			}
            			else {
HXLINE( 154)				int ii_min51 = ::Math_obj::floor(qx);
HXDLIN( 154)				int ii_max51 = ::Math_obj::ceil(cx3);
HXDLIN( 154)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            			}
            		}
HXDLIN( 154)		 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN( 154)		if ((qy > by3)) {
HXLINE( 154)			if ((qy > cy3)) {
HXLINE( 154)				int min26;
HXDLIN( 154)				if ((by3 > cy3)) {
HXLINE( 154)					min26 = ::Math_obj::floor(cy3);
            				}
            				else {
HXLINE( 154)					min26 = ::Math_obj::floor(by3);
            				}
HXDLIN( 154)				int ii_min52 = min26;
HXDLIN( 154)				int ii_max52 = ::Math_obj::ceil(qy);
HXDLIN( 154)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            			}
            			else {
HXLINE( 154)				int ii_min53 = ::Math_obj::floor(by3);
HXDLIN( 154)				int ii_max53 = ::Math_obj::ceil(cy3);
HXDLIN( 154)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            			}
            		}
            		else {
HXLINE( 154)			if ((by3 > cy3)) {
HXLINE( 154)				int min27;
HXDLIN( 154)				if ((qy > cy3)) {
HXLINE( 154)					min27 = ::Math_obj::floor(cy3);
            				}
            				else {
HXLINE( 154)					min27 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 154)				int ii_min54 = min27;
HXDLIN( 154)				int ii_max54 = ::Math_obj::ceil(by3);
HXDLIN( 154)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            			}
            			else {
HXLINE( 154)				int ii_min55 = ::Math_obj::floor(qy);
HXDLIN( 154)				int ii_max55 = ::Math_obj::ceil(cy3);
HXDLIN( 154)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            			}
            		}
HXDLIN( 154)		 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN( 154)		if (hasUndo6) {
HXLINE( 154)			int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN( 154)			int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN( 154)			 ::Dynamic imageType6 = null();
HXDLIN( 154)			 ::pi_xy::ImageStruct this187 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 154)			if (::hx::IsNull( imageType6 )) {
HXLINE(  54)				imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 154)			::Dynamic undoImage19;
HXDLIN( 154)			switch((int)(( (int)(imageType6) ))){
            				case (int)0: {
HXLINE( 154)					 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 154)					 ::iterMagic::BytesImg b48 = byt6;
HXDLIN( 154)					{
HXLINE( 154)						b48->width = width6;
HXDLIN( 154)						b48->height = height6;
HXDLIN( 154)						b48->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 154)						b48->data = ::haxe::io::Bytes_obj::alloc((b48->length * 4));
HXDLIN( 154)						{
HXLINE( 154)							int len12 = b48->length;
HXDLIN( 154)							int w6 = 0;
HXDLIN( 154)							{
HXLINE( 154)								int _g120 = 0;
HXDLIN( 154)								int _g121 = b48->height;
HXDLIN( 154)								while((_g120 < _g121)){
HXLINE( 154)									_g120 = (_g120 + 1);
HXDLIN( 154)									int y18 = (_g120 - 1);
HXDLIN( 154)									{
HXLINE( 154)										int _g122 = 0;
HXDLIN( 154)										int _g123 = b48->width;
HXDLIN( 154)										while((_g122 < _g123)){
HXLINE( 154)											_g122 = (_g122 + 1);
HXDLIN( 154)											int x18 = (_g122 - 1);
HXDLIN( 154)											{
HXLINE( 154)												w6 = (w6 + 1);
HXDLIN( 154)												b48->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 154)											{
HXLINE( 154)												w6 = (w6 + 1);
HXDLIN( 154)												b48->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 154)											{
HXLINE( 154)												w6 = (w6 + 1);
HXDLIN( 154)												b48->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 154)											{
HXLINE( 154)												w6 = (w6 + 1);
HXDLIN( 154)												b48->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 154)					undoImage19 = b48;
            				}
            				break;
            				case (int)1: {
HXLINE( 154)					 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 154)					 ::iterMagic::ArrIntImg a48 = arrI6;
HXDLIN( 154)					{
HXLINE( 154)						a48->width = width6;
HXDLIN( 154)						a48->height = height6;
HXDLIN( 154)						a48->data = ::Array_obj< int >::__new(0);
HXDLIN( 154)						a48->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 154)						{
HXLINE( 154)							int _g124 = 0;
HXDLIN( 154)							int _g125 = a48->length;
HXDLIN( 154)							while((_g124 < _g125)){
HXLINE( 154)								_g124 = (_g124 + 1);
HXDLIN( 154)								int i60 = (_g124 - 1);
HXDLIN( 154)								a48->data[i60] = 0;
            							}
            						}
            					}
HXDLIN( 154)					undoImage19 = a48;
            				}
            				break;
            				case (int)2: {
HXLINE( 154)					 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 154)					 ::iterMagic::U32ArrImg b49 = u32a6;
HXDLIN( 154)					{
HXLINE( 154)						b49->width = width6;
HXDLIN( 154)						b49->height = height6;
HXDLIN( 154)						b49->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 154)						int size6 = (b49->length * 4);
HXDLIN( 154)						b49->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN( 154)						{
HXLINE( 154)							int _g126 = 0;
HXDLIN( 154)							int _g127 = b49->length;
HXDLIN( 154)							while((_g126 < _g127)){
HXLINE( 154)								_g126 = (_g126 + 1);
HXDLIN( 154)								int i61 = (_g126 - 1);
HXDLIN( 154)								{
HXLINE( 154)									 ::haxe::io::ArrayBufferViewImpl this188 = b49->data;
HXDLIN( 154)									bool undoImage20;
HXDLIN( 154)									if ((i61 >= 0)) {
HXLINE( 154)										undoImage20 = (i61 < (this188->byteLength >> 2));
            									}
            									else {
HXLINE( 154)										undoImage20 = false;
            									}
HXDLIN( 154)									if (undoImage20) {
HXLINE( 154)										 ::haxe::io::Bytes _this6 = this188->bytes;
HXDLIN( 154)										int pos6 = ((i61 << 2) + this188->byteOffset);
HXDLIN( 154)										_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN( 154)										_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN( 154)										_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN( 154)										_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 154)					undoImage19 = b49;
            				}
            				break;
            				case (int)3: {
HXLINE( 154)					 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 154)					 ::iterMagic::VecIntImg v18 = vec6;
HXDLIN( 154)					{
HXLINE( 154)						v18->width = width6;
HXDLIN( 154)						v18->height = height6;
HXDLIN( 154)						v18->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 154)						v18->data = ::Array_obj< int >::__new(v18->length);
HXDLIN( 154)						{
HXLINE( 154)							int _g128 = 0;
HXDLIN( 154)							int _g129 = v18->length;
HXDLIN( 154)							while((_g128 < _g129)){
HXLINE( 154)								_g128 = (_g128 + 1);
HXDLIN( 154)								int i62 = (_g128 - 1);
HXDLIN( 154)								v18->data->__unsafe_set(i62,0);
            							}
            						}
            					}
HXDLIN( 154)					undoImage19 = v18;
            				}
            				break;
            				case (int)4: {
HXLINE( 154)					 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 154)					 ::iterMagic::StackIntImg b50 = sInt6;
HXDLIN( 154)					{
HXLINE( 154)						b50->width = width6;
HXDLIN( 154)						b50->height = height6;
HXDLIN( 154)						b50->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 154)						b50->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 154)						{
HXLINE( 154)							int len13 = b50->length;
HXDLIN( 154)							 ::haxe::ds::GenericStack_Int d6 = b50->data;
HXDLIN( 154)							if (::hx::IsNull( d6->head )) {
HXLINE( 154)								int _g130 = 0;
HXDLIN( 154)								int _g131 = len13;
HXDLIN( 154)								while((_g130 < _g131)){
HXLINE( 154)									_g130 = (_g130 + 1);
HXDLIN( 154)									int i63 = (_g130 - 1);
HXDLIN( 154)									d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            								}
            							}
            							else {
HXLINE( 154)								int _g132 = 0;
HXDLIN( 154)								int _g133 = len13;
HXDLIN( 154)								while((_g132 < _g133)){
HXLINE( 154)									_g132 = (_g132 + 1);
HXDLIN( 154)									int i64 = (_g132 - 1);
HXDLIN( 154)									{
HXLINE( 154)										 ::haxe::ds::GenericCell_Int l6 = b50->data->head;
HXDLIN( 154)										 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN( 154)										{
HXLINE( 154)											int _g134 = 0;
HXDLIN( 154)											int _g135 = i64;
HXDLIN( 154)											while((_g134 < _g135)){
HXLINE( 154)												_g134 = (_g134 + 1);
HXDLIN( 154)												int i65 = (_g134 - 1);
HXLINE( 345)												prev6 = l6;
HXLINE( 346)												l6 = l6->next;
            											}
            										}
HXLINE( 154)										if (::hx::IsNull( prev6 )) {
HXLINE( 154)											b50->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 154)											l6 = null();
            										}
            										else {
HXLINE( 154)											prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 154)											l6 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 154)					undoImage19 = b50;
            				}
            				break;
            			}
HXDLIN( 154)			this187->image = undoImage19;
HXDLIN( 154)			this187->width = width6;
HXDLIN( 154)			this187->height = height6;
HXDLIN( 154)			this187->imageType = ( (int)(imageType6) );
HXDLIN( 154)			undoImage18 = this187;
HXDLIN( 154)			{
HXLINE( 154)				int rectLeft6 = xIter36->start;
HXDLIN( 154)				int rectTop6 = yIter36->start;
HXDLIN( 154)				int rectRight6 = xIter36->max;
HXDLIN( 154)				bool forceClear6 = false;
HXDLIN( 154)				{
HXLINE( 154)					int _g136 = rectTop6;
HXDLIN( 154)					int _g137 = yIter36->max;
HXDLIN( 154)					while((_g136 < _g137)){
HXLINE( 154)						_g136 = (_g136 + 1);
HXDLIN( 154)						int dy9 = (_g136 - 1);
HXDLIN( 154)						{
HXLINE( 154)							int _g138 = rectLeft6;
HXDLIN( 154)							int _g139 = rectRight6;
HXDLIN( 154)							while((_g138 < _g139)){
HXLINE( 154)								_g138 = (_g138 + 1);
HXDLIN( 154)								int dx9 = (_g138 - 1);
HXDLIN( 154)								::Dynamic this189 = pixelImage->image;
HXDLIN( 154)								int index24;
HXDLIN( 154)								if (pixelImage->useVirtualPos) {
HXLINE( 154)									index24 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx9) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 154)									index24 = ::Std_obj::_hx_int(( (Float)(((dy9 * pixelImage->width) + dx9)) ));
            								}
HXDLIN( 154)								int c18 = ::iterMagic::Iimg_obj::get(this189,index24);
HXDLIN( 154)								int col6;
HXDLIN( 154)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 154)									col6 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            								}
            								else {
HXLINE( 154)									col6 = c18;
            								}
HXDLIN( 154)								bool _hx_tmp;
HXDLIN( 154)								if (pixelImage->useMask) {
HXLINE( 154)									_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 154)									_hx_tmp = false;
            								}
HXDLIN( 154)								if (_hx_tmp) {
HXLINE( 154)									 ::pi_xy::ImageStruct this190 = pixelImage->mask;
HXDLIN( 154)									::Dynamic this191 = this190->image;
HXDLIN( 154)									int index25;
HXDLIN( 154)									if (this190->useVirtualPos) {
HXLINE( 154)										index25 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this190->virtualY) * ( (Float)(this190->width) )) + dx9) - this190->virtualX));
            									}
            									else {
HXLINE( 154)										index25 = ::Std_obj::_hx_int(( (Float)(((dy9 * this190->width) + dx9)) ));
            									}
HXDLIN( 154)									int c19 = ::iterMagic::Iimg_obj::get(this191,index25);
HXDLIN( 154)									int v19;
HXDLIN( 154)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 154)										v19 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            									}
            									else {
HXLINE( 154)										v19 = c19;
            									}
HXDLIN( 154)									int maskPixel6 = v19;
HXDLIN( 154)									int this192 = col6;
HXDLIN( 154)									if ((maskPixel6 == 0)) {
HXLINE( 154)										col6 = this192;
            									}
            									else {
HXLINE( 154)										Float m06;
HXDLIN( 154)										int this193 = ((maskPixel6 >> 24) & 255);
HXDLIN( 154)										if ((this193 == 0)) {
HXLINE( 154)											m06 = ((Float)0.);
            										}
            										else {
HXLINE( 154)											m06 = (( (Float)(this193) ) / ( (Float)(255) ));
            										}
HXDLIN( 154)										Float m16;
HXDLIN( 154)										int this194 = ((maskPixel6 >> 16) & 255);
HXDLIN( 154)										if ((this194 == 0)) {
HXLINE( 154)											m16 = ((Float)0.);
            										}
            										else {
HXLINE( 154)											m16 = (( (Float)(this194) ) / ( (Float)(255) ));
            										}
HXDLIN( 154)										Float m26;
HXDLIN( 154)										int this195 = ((maskPixel6 >> 8) & 255);
HXDLIN( 154)										if ((this195 == 0)) {
HXLINE( 154)											m26 = ((Float)0.);
            										}
            										else {
HXLINE( 154)											m26 = (( (Float)(this195) ) / ( (Float)(255) ));
            										}
HXDLIN( 154)										Float m36;
HXDLIN( 154)										int this196 = (maskPixel6 & 255);
HXDLIN( 154)										if ((this196 == 0)) {
HXLINE( 154)											m36 = ((Float)0.);
            										}
            										else {
HXLINE( 154)											m36 = (( (Float)(this196) ) / ( (Float)(255) ));
            										}
HXDLIN( 154)										int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this192 >> 24) & 255)) )));
HXDLIN( 154)										int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this192 >> 16) & 255)) )));
HXDLIN( 154)										int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this192 >> 8) & 255)) )));
HXDLIN( 154)										int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this192 & 255)) )));
HXDLIN( 154)										col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 154)								if ((col6 != 0)) {
HXLINE( 154)									int x19 = (dx9 - rectLeft6);
HXDLIN( 154)									int y19 = (dy9 - rectTop6);
HXDLIN( 154)									int c20 = col6;
HXDLIN( 154)									bool _hx_tmp1;
HXDLIN( 154)									if ((((c20 >> 24) & 255) < 254)) {
HXLINE( 154)										_hx_tmp1 = undoImage18->transparent;
            									}
            									else {
HXLINE( 154)										_hx_tmp1 = false;
            									}
HXDLIN( 154)									if (_hx_tmp1) {
HXLINE( 154)										int location12;
HXDLIN( 154)										if (undoImage18->useVirtualPos) {
HXLINE( 154)											location12 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x19) - undoImage18->virtualX));
            										}
            										else {
HXLINE( 154)											location12 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage18->width) + x19)) ));
            										}
HXDLIN( 154)										int this197 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN( 154)										int this198;
HXDLIN( 154)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 154)											this198 = ((((((this197 >> 24) & 255) << 24) | ((this197 & 255) << 16)) | (((this197 >> 8) & 255) << 8)) | ((this197 >> 16) & 255));
            										}
            										else {
HXLINE( 154)											this198 = this197;
            										}
HXDLIN( 154)										Float a116;
HXDLIN( 154)										int this199 = ((this198 >> 24) & 255);
HXDLIN( 154)										if ((this199 == 0)) {
HXLINE( 154)											a116 = ((Float)0.);
            										}
            										else {
HXLINE( 154)											a116 = (( (Float)(this199) ) / ( (Float)(255) ));
            										}
HXDLIN( 154)										Float r114;
HXDLIN( 154)										int this200 = ((this198 >> 16) & 255);
HXDLIN( 154)										if ((this200 == 0)) {
HXLINE( 154)											r114 = ((Float)0.);
            										}
            										else {
HXLINE( 154)											r114 = (( (Float)(this200) ) / ( (Float)(255) ));
            										}
HXDLIN( 154)										Float g114;
HXDLIN( 154)										int this201 = ((this198 >> 8) & 255);
HXDLIN( 154)										if ((this201 == 0)) {
HXLINE( 154)											g114 = ((Float)0.);
            										}
            										else {
HXLINE( 154)											g114 = (( (Float)(this201) ) / ( (Float)(255) ));
            										}
HXDLIN( 154)										Float b117;
HXDLIN( 154)										int this202 = (this198 & 255);
HXDLIN( 154)										if ((this202 == 0)) {
HXLINE( 154)											b117 = ((Float)0.);
            										}
            										else {
HXLINE( 154)											b117 = (( (Float)(this202) ) / ( (Float)(255) ));
            										}
HXDLIN( 154)										Float a215;
HXDLIN( 154)										int this203 = ((col6 >> 24) & 255);
HXDLIN( 154)										if ((this203 == 0)) {
HXLINE( 154)											a215 = ((Float)0.);
            										}
            										else {
HXLINE( 154)											a215 = (( (Float)(this203) ) / ( (Float)(255) ));
            										}
HXDLIN( 154)										Float r213;
HXDLIN( 154)										int this204 = ((col6 >> 16) & 255);
HXDLIN( 154)										if ((this204 == 0)) {
HXLINE( 154)											r213 = ((Float)0.);
            										}
            										else {
HXLINE( 154)											r213 = (( (Float)(this204) ) / ( (Float)(255) ));
            										}
HXDLIN( 154)										Float g213;
HXDLIN( 154)										int this205 = ((col6 >> 8) & 255);
HXDLIN( 154)										if ((this205 == 0)) {
HXLINE( 154)											g213 = ((Float)0.);
            										}
            										else {
HXLINE( 154)											g213 = (( (Float)(this205) ) / ( (Float)(255) ));
            										}
HXDLIN( 154)										Float b216;
HXDLIN( 154)										int this206 = (col6 & 255);
HXDLIN( 154)										if ((this206 == 0)) {
HXLINE( 154)											b216 = ((Float)0.);
            										}
            										else {
HXLINE( 154)											b216 = (( (Float)(this206) ) / ( (Float)(255) ));
            										}
HXDLIN( 154)										Float a313 = (a116 * (( (Float)(1) ) - a215));
HXDLIN( 154)										int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a313) + (r213 * a215))));
HXDLIN( 154)										int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a313) + (g213 * a215))));
HXDLIN( 154)										int b51 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b216 * a215))));
HXDLIN( 154)										int a49 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a215)));
HXDLIN( 154)										int blended12 = ((((a49 << 24) | (r35 << 16)) | (g35 << 8)) | b51);
HXDLIN( 154)										{
HXLINE( 154)											int _hx_tmp2;
HXDLIN( 154)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 154)												_hx_tmp2 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            											}
            											else {
HXLINE( 154)												_hx_tmp2 = blended12;
            											}
HXDLIN( 154)											::iterMagic::Iimg_obj::set(undoImage18->image,location12,_hx_tmp2);
            										}
            									}
            									else {
HXLINE( 154)										::Dynamic this207 = undoImage18->image;
HXDLIN( 154)										int index26;
HXDLIN( 154)										if (undoImage18->useVirtualPos) {
HXLINE( 154)											index26 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x19) - undoImage18->virtualX));
            										}
            										else {
HXLINE( 154)											index26 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage18->width) + x19)) ));
            										}
HXDLIN( 154)										int _hx_tmp3;
HXDLIN( 154)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 154)											_hx_tmp3 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            										}
            										else {
HXLINE( 154)											_hx_tmp3 = c20;
            										}
HXDLIN( 154)										::iterMagic::Iimg_obj::set(this207,index26,_hx_tmp3);
            									}
            								}
            								else {
HXLINE( 154)									if (forceClear6) {
HXLINE( 154)										::Dynamic this208 = undoImage18->image;
HXDLIN( 154)										int x20 = (dx9 - rectLeft6);
HXDLIN( 154)										int y20 = (dy9 - rectTop6);
HXDLIN( 154)										int index27;
HXDLIN( 154)										if (undoImage18->useVirtualPos) {
HXLINE( 154)											index27 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x20) - undoImage18->virtualX));
            										}
            										else {
HXLINE( 154)											index27 = ::Std_obj::_hx_int(( (Float)(((y20 * undoImage18->width) + x20)) ));
            										}
HXDLIN( 154)										::iterMagic::Iimg_obj::set(this208,index27,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 154)		{
HXLINE( 154)			int _g_min12 = xIter36->start;
HXDLIN( 154)			int _g_max12 = xIter36->max;
HXDLIN( 154)			while((_g_min12 < _g_max12)){
HXLINE( 154)				_g_min12 = (_g_min12 + 1);
HXDLIN( 154)				int px7 = (_g_min12 - 1);
HXDLIN( 154)				Float pcx6 = (( (Float)(px7) ) - cx3);
HXDLIN( 154)				{
HXLINE( 154)					int _g_min13 = yIter36->start;
HXDLIN( 154)					int _g_max13 = yIter36->max;
HXDLIN( 154)					while((_g_min13 < _g_max13)){
HXLINE( 154)						_g_min13 = (_g_min13 + 1);
HXDLIN( 154)						int py7 = (_g_min13 - 1);
HXDLIN( 154)						Float pcy6 = (( (Float)(py7) ) - cy3);
HXDLIN( 154)						Float dot316 = ((pcx6 * bcx6) + (pcy6 * bcy6));
HXDLIN( 154)						Float dot326 = ((pcx6 * acx6) + (pcy6 * acy6));
HXDLIN( 154)						Float ratioA6 = (((dot226 * dot316) - (dot126 * dot326)) * denom16);
HXDLIN( 154)						Float ratioB6 = (((dot116 * dot326) - (dot126 * dot316)) * denom16);
HXDLIN( 154)						Float ratioC6 = ((((Float)1.0) - ratioB6) - ratioA6);
HXDLIN( 154)						bool _hx_tmp4;
HXDLIN( 154)						bool _hx_tmp5;
HXDLIN( 154)						if ((ratioA6 >= 0)) {
HXLINE( 154)							_hx_tmp5 = (ratioB6 >= 0);
            						}
            						else {
HXLINE( 154)							_hx_tmp5 = false;
            						}
HXDLIN( 154)						if (_hx_tmp5) {
HXLINE( 154)							_hx_tmp4 = (ratioC6 >= 0);
            						}
            						else {
HXLINE( 154)							_hx_tmp4 = false;
            						}
HXDLIN( 154)						if (_hx_tmp4) {
HXLINE( 154)							int i66 = ::Std_obj::_hx_int((((( (Float)(aA6) ) * ratioA6) + (( (Float)(aB6) ) * ratioB6)) + (( (Float)(aC6) ) * ratioC6)));
HXDLIN( 154)							if ((i66 > 255)) {
HXLINE(  24)								i66 = 255;
            							}
HXLINE( 154)							if ((i66 < 0)) {
HXLINE(  25)								i66 = 0;
            							}
HXLINE( 154)							int a50 = i66;
HXDLIN( 154)							int i67 = ::Std_obj::_hx_int((((( (Float)(rA6) ) * ratioA6) + (( (Float)(rB6) ) * ratioB6)) + (( (Float)(rC6) ) * ratioC6)));
HXDLIN( 154)							if ((i67 > 255)) {
HXLINE(  24)								i67 = 255;
            							}
HXLINE( 154)							if ((i67 < 0)) {
HXLINE(  25)								i67 = 0;
            							}
HXLINE( 154)							int r36 = i67;
HXDLIN( 154)							int i68 = ::Std_obj::_hx_int((((( (Float)(gA6) ) * ratioA6) + (( (Float)(gB6) ) * ratioB6)) + (( (Float)(gC6) ) * ratioC6)));
HXDLIN( 154)							if ((i68 > 255)) {
HXLINE(  24)								i68 = 255;
            							}
HXLINE( 154)							if ((i68 < 0)) {
HXLINE(  25)								i68 = 0;
            							}
HXLINE( 154)							int g36 = i68;
HXDLIN( 154)							int i69 = ::Std_obj::_hx_int((((( (Float)(bA6) ) * ratioA6) + (( (Float)(bB6) ) * ratioB6)) + (( (Float)(bC6) ) * ratioC6)));
HXDLIN( 154)							if ((i69 > 255)) {
HXLINE(  24)								i69 = 255;
            							}
HXLINE( 154)							if ((i69 < 0)) {
HXLINE(  25)								i69 = 0;
            							}
HXLINE( 154)							int b52 = i69;
HXDLIN( 154)							{
HXLINE( 154)								int location13;
HXDLIN( 154)								if (pixelImage->useVirtualPos) {
HXLINE( 154)									location13 = ::Std_obj::_hx_int(((((( (Float)(py7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px7) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 154)									location13 = ::Std_obj::_hx_int(( (Float)(((py7 * pixelImage->width) + px7)) ));
            								}
HXDLIN( 154)								bool _hx_tmp6;
HXDLIN( 154)								if (pixelImage->transparent) {
HXLINE( 154)									_hx_tmp6 = (a50 < 254);
            								}
            								else {
HXLINE( 154)									_hx_tmp6 = false;
            								}
HXDLIN( 154)								if (_hx_tmp6) {
HXLINE( 154)									int this209 = ::iterMagic::Iimg_obj::get(pixelImage->image,location13);
HXDLIN( 154)									int old6;
HXDLIN( 154)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 154)										old6 = ((((((this209 >> 24) & 255) << 24) | ((this209 & 255) << 16)) | (((this209 >> 8) & 255) << 8)) | ((this209 >> 16) & 255));
            									}
            									else {
HXLINE( 154)										old6 = this209;
            									}
HXDLIN( 154)									int rhs6 = ((((a50 << 24) | (r36 << 16)) | (g36 << 8)) | b52);
HXDLIN( 154)									Float a117;
HXDLIN( 154)									int this210 = ((old6 >> 24) & 255);
HXDLIN( 154)									if ((this210 == 0)) {
HXLINE( 154)										a117 = ((Float)0.);
            									}
            									else {
HXLINE( 154)										a117 = (( (Float)(this210) ) / ( (Float)(255) ));
            									}
HXDLIN( 154)									Float r115;
HXDLIN( 154)									int this211 = ((old6 >> 16) & 255);
HXDLIN( 154)									if ((this211 == 0)) {
HXLINE( 154)										r115 = ((Float)0.);
            									}
            									else {
HXLINE( 154)										r115 = (( (Float)(this211) ) / ( (Float)(255) ));
            									}
HXDLIN( 154)									Float g115;
HXDLIN( 154)									int this212 = ((old6 >> 8) & 255);
HXDLIN( 154)									if ((this212 == 0)) {
HXLINE( 154)										g115 = ((Float)0.);
            									}
            									else {
HXLINE( 154)										g115 = (( (Float)(this212) ) / ( (Float)(255) ));
            									}
HXDLIN( 154)									Float b118;
HXDLIN( 154)									int this213 = (old6 & 255);
HXDLIN( 154)									if ((this213 == 0)) {
HXLINE( 154)										b118 = ((Float)0.);
            									}
            									else {
HXLINE( 154)										b118 = (( (Float)(this213) ) / ( (Float)(255) ));
            									}
HXDLIN( 154)									Float a216;
HXDLIN( 154)									int this214 = ((rhs6 >> 24) & 255);
HXDLIN( 154)									if ((this214 == 0)) {
HXLINE( 154)										a216 = ((Float)0.);
            									}
            									else {
HXLINE( 154)										a216 = (( (Float)(this214) ) / ( (Float)(255) ));
            									}
HXDLIN( 154)									Float r214;
HXDLIN( 154)									int this215 = ((rhs6 >> 16) & 255);
HXDLIN( 154)									if ((this215 == 0)) {
HXLINE( 154)										r214 = ((Float)0.);
            									}
            									else {
HXLINE( 154)										r214 = (( (Float)(this215) ) / ( (Float)(255) ));
            									}
HXDLIN( 154)									Float g214;
HXDLIN( 154)									int this216 = ((rhs6 >> 8) & 255);
HXDLIN( 154)									if ((this216 == 0)) {
HXLINE( 154)										g214 = ((Float)0.);
            									}
            									else {
HXLINE( 154)										g214 = (( (Float)(this216) ) / ( (Float)(255) ));
            									}
HXDLIN( 154)									Float b217;
HXDLIN( 154)									int this217 = (rhs6 & 255);
HXDLIN( 154)									if ((this217 == 0)) {
HXLINE( 154)										b217 = ((Float)0.);
            									}
            									else {
HXLINE( 154)										b217 = (( (Float)(this217) ) / ( (Float)(255) ));
            									}
HXDLIN( 154)									Float a314 = (a117 * (( (Float)(1) ) - a216));
HXDLIN( 154)									int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a314) + (r214 * a216))));
HXDLIN( 154)									int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a314) + (g214 * a216))));
HXDLIN( 154)									int b53 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b217 * a216))));
HXDLIN( 154)									int a51 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a216)));
HXDLIN( 154)									int blended13 = ((((a51 << 24) | (r37 << 16)) | (g37 << 8)) | b53);
HXDLIN( 154)									{
HXLINE( 154)										int _hx_tmp7;
HXDLIN( 154)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 154)											_hx_tmp7 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            										}
            										else {
HXLINE( 154)											_hx_tmp7 = blended13;
            										}
HXDLIN( 154)										::iterMagic::Iimg_obj::set(pixelImage->image,location13,_hx_tmp7);
            									}
            								}
            								else {
HXLINE( 154)									int value6;
HXDLIN( 154)									if (pixelImage->isLittle) {
HXLINE( 154)										value6 = ((((a50 << 24) | (b52 << 16)) | (g36 << 8)) | r36);
            									}
            									else {
HXLINE( 154)										value6 = ((((a50 << 24) | (r36 << 16)) | (g36 << 8)) | b52);
            									}
HXDLIN( 154)									::iterMagic::Iimg_obj::set(pixelImage->image,location13,value6);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 154)		 ::pi_xy::algo::HitTri hitTri;
HXDLIN( 154)		if ((hasHit == false)) {
HXLINE( 154)			 ::pi_xy::algo::HitTri v20 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx3,by3,cx3,cy3,true);
HXDLIN( 154)			if (hasUndo6) {
HXLINE( 154)				v20->undoImage = undoImage18;
HXDLIN( 154)				v20->undoX = xIter36->start;
HXDLIN( 154)				v20->undoY = yIter36->start;
            			}
HXDLIN( 154)			hitTri = v20;
            		}
            		else {
HXLINE( 154)			hitTri = null();
            		}
HXLINE( 155)		if (hasHit) {
HXLINE( 156)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(1)->init(0,hitTri));
HXLINE( 157)			if (::hx::IsNotNull( hitQuad )) {
HXLINE( 158)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXLINE( 159)			hitArr->triArr->push(hitQuad->triBCD);
HXLINE( 160)			return hitArr;
            		}
            		else {
HXLINE( 162)			return null();
            		}
HXLINE( 155)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(ArrowPixel_Fields__obj,gradThickLineArrow,return )

 ::pi_xy::algo::HitTriArray ArrowPixel_Fields__obj::fillLineArrowBoth( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float thick,int color,::hx::Null< bool >  __o_hasHit){
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_63f36ef650858c14_169_fillLineArrowBoth)
HXLINE( 170)		Float goldenRatio = ((Float)1.61803398875);
HXLINE( 172)		Float o = (qy - py);
HXLINE( 173)		Float a = (qx - px);
HXLINE( 174)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE( 175)		Float theta = ::Math_obj::atan2(o,a);
HXLINE( 176)		Float thicker = ((( (Float)(2) ) * thick) * goldenRatio);
HXLINE( 177)		Float sin = ::Math_obj::sin(theta);
HXLINE( 178)		Float cos = ::Math_obj::cos(theta);
HXLINE( 179)		Float radius = (thick / ( (Float)(2) ));
HXLINE( 180)		Float radius2 = (thicker / ( (Float)(2) ));
HXLINE( 181)		Float h2 = (h / goldenRatio);
HXLINE( 182)		Float hSmall = (h - h2);
HXLINE( 184)		Float px_ = hSmall;
HXLINE( 185)		Float py_ = ((Float)0.);
HXLINE( 186)		Float temp = ((Float)0.);
HXLINE( 188)		temp = (px + ((px_ * cos) - (py_ * sin)));
HXLINE( 189)		py_ = (py + ((py_ * cos) + (px_ * sin)));
HXLINE( 190)		px_ = temp;
HXLINE( 192)		Float h1 = (h2 - hSmall);
HXDLIN( 192)		Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 192)		Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 192)		Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 192)		Float dx = ((Float)0.1);
HXDLIN( 192)		Float dy = radius1;
HXDLIN( 192)		Float cx = h1;
HXDLIN( 192)		Float cy = radius1;
HXDLIN( 192)		Float bx = h1;
HXDLIN( 192)		Float by = -(radius1);
HXDLIN( 192)		Float ax = ((Float)0.1);
HXDLIN( 192)		Float ay = -(radius1);
HXDLIN( 192)		Float temp1 = ((Float)0.);
HXLINE(  28)		temp1 = (px_ + ((ax * cos1) - (ay * sin1)));
HXLINE(  29)		ay = (py_ + ((ay * cos1) + (ax * sin1)));
HXLINE(  30)		ax = temp1;
HXLINE(  32)		temp1 = (px_ + ((bx * cos1) - (by * sin1)));
HXLINE(  33)		by = (py_ + ((by * cos1) + (bx * sin1)));
HXLINE(  34)		bx = temp1;
HXLINE(  36)		temp1 = (px_ + ((cx * cos1) - (cy * sin1)));
HXLINE(  37)		cy = (py_ + ((cy * cos1) + (cx * sin1)));
HXLINE(  38)		cx = temp1;
HXLINE(  40)		temp1 = (px_ + ((dx * cos1) - (dy * sin1)));
HXLINE(  41)		dy = (py_ + ((dy * cos1) + (dx * sin1)));
HXLINE(  42)		dx = temp1;
HXLINE( 192)		Float bx1 = bx;
HXDLIN( 192)		Float by1 = by;
HXDLIN( 192)		Float cx1 = dx;
HXDLIN( 192)		Float cy1 = dy;
HXDLIN( 192)		bool hasUndo = false;
HXDLIN( 192)		bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 192)		if (!(adjustWinding)) {
HXLINE( 192)			Float bx_ = bx1;
HXDLIN( 192)			Float by_ = by1;
HXLINE(  25)			bx1 = cx1;
HXLINE(  26)			by1 = cy1;
HXLINE(  27)			cx1 = bx_;
HXLINE(  28)			cy1 = by_;
            		}
HXLINE( 192)		Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 192)		Float sx = (cy1 - ay);
HXDLIN( 192)		Float sy = (ax - cx1);
HXDLIN( 192)		Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 192)		Float tx = (ay - by1);
HXDLIN( 192)		Float ty = (bx1 - ax);
HXDLIN( 192)		Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 192)		 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 192)		if ((ax > bx1)) {
HXLINE( 192)			if ((ax > cx1)) {
HXLINE( 192)				int min;
HXDLIN( 192)				if ((bx1 > cx1)) {
HXLINE( 192)					min = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 192)					min = ::Math_obj::floor(bx1);
            				}
HXDLIN( 192)				int ii_min = min;
HXDLIN( 192)				int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 192)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            			}
            			else {
HXLINE( 192)				int ii_min1 = ::Math_obj::floor(bx1);
HXDLIN( 192)				int ii_max1 = ::Math_obj::ceil(cx1);
HXDLIN( 192)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            			}
            		}
            		else {
HXLINE( 192)			if ((bx1 > cx1)) {
HXLINE( 192)				int min1;
HXDLIN( 192)				if ((ax > cx1)) {
HXLINE( 192)					min1 = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 192)					min1 = ::Math_obj::ceil(ax);
            				}
HXDLIN( 192)				int ii_min2 = min1;
HXDLIN( 192)				int ii_max2 = ::Math_obj::ceil(bx1);
HXDLIN( 192)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            			}
            			else {
HXLINE( 192)				int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 192)				int ii_max3 = ::Math_obj::ceil(cx1);
HXDLIN( 192)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            			}
            		}
HXDLIN( 192)		 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 192)		if ((ay > by1)) {
HXLINE( 192)			if ((ay > cy1)) {
HXLINE( 192)				int min2;
HXDLIN( 192)				if ((by1 > cy1)) {
HXLINE( 192)					min2 = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 192)					min2 = ::Math_obj::floor(by1);
            				}
HXDLIN( 192)				int ii_min4 = min2;
HXDLIN( 192)				int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 192)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            			}
            			else {
HXLINE( 192)				int ii_min5 = ::Math_obj::floor(by1);
HXDLIN( 192)				int ii_max5 = ::Math_obj::ceil(cy1);
HXDLIN( 192)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            			}
            		}
            		else {
HXLINE( 192)			if ((by1 > cy1)) {
HXLINE( 192)				int min3;
HXDLIN( 192)				if ((ay > cy1)) {
HXLINE( 192)					min3 = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 192)					min3 = ::Math_obj::ceil(ay);
            				}
HXDLIN( 192)				int ii_min6 = min3;
HXDLIN( 192)				int ii_max6 = ::Math_obj::ceil(by1);
HXDLIN( 192)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            			}
            			else {
HXLINE( 192)				int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 192)				int ii_max7 = ::Math_obj::ceil(cy1);
HXDLIN( 192)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            			}
            		}
HXDLIN( 192)		 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 192)		if (hasUndo) {
HXLINE( 192)			int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 192)			int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 192)			 ::Dynamic imageType = null();
HXDLIN( 192)			 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 192)			if (::hx::IsNull( imageType )) {
HXLINE(  54)				imageType = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 192)			::Dynamic undoImage1;
HXDLIN( 192)			switch((int)(( (int)(imageType) ))){
            				case (int)0: {
HXLINE( 192)					 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 192)					 ::iterMagic::BytesImg b = byt;
HXDLIN( 192)					{
HXLINE( 192)						b->width = width;
HXDLIN( 192)						b->height = height;
HXDLIN( 192)						b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 192)						b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 192)						{
HXLINE( 192)							int len = b->length;
HXDLIN( 192)							int w = 0;
HXDLIN( 192)							{
HXLINE( 192)								int _g = 0;
HXDLIN( 192)								int _g1 = b->height;
HXDLIN( 192)								while((_g < _g1)){
HXLINE( 192)									_g = (_g + 1);
HXDLIN( 192)									int y = (_g - 1);
HXDLIN( 192)									{
HXLINE( 192)										int _g2 = 0;
HXDLIN( 192)										int _g3 = b->width;
HXDLIN( 192)										while((_g2 < _g3)){
HXLINE( 192)											_g2 = (_g2 + 1);
HXDLIN( 192)											int x = (_g2 - 1);
HXDLIN( 192)											{
HXLINE( 192)												w = (w + 1);
HXDLIN( 192)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 192)											{
HXLINE( 192)												w = (w + 1);
HXDLIN( 192)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 192)											{
HXLINE( 192)												w = (w + 1);
HXDLIN( 192)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 192)											{
HXLINE( 192)												w = (w + 1);
HXDLIN( 192)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 192)					undoImage1 = b;
            				}
            				break;
            				case (int)1: {
HXLINE( 192)					 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 192)					 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 192)					{
HXLINE( 192)						a1->width = width;
HXDLIN( 192)						a1->height = height;
HXDLIN( 192)						a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 192)						a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 192)						{
HXLINE( 192)							int _g4 = 0;
HXDLIN( 192)							int _g5 = a1->length;
HXDLIN( 192)							while((_g4 < _g5)){
HXLINE( 192)								_g4 = (_g4 + 1);
HXDLIN( 192)								int i = (_g4 - 1);
HXDLIN( 192)								a1->data[i] = 0;
            							}
            						}
            					}
HXDLIN( 192)					undoImage1 = a1;
            				}
            				break;
            				case (int)2: {
HXLINE( 192)					 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 192)					 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 192)					{
HXLINE( 192)						b1->width = width;
HXDLIN( 192)						b1->height = height;
HXDLIN( 192)						b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 192)						int size = (b1->length * 4);
HXDLIN( 192)						b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 192)						{
HXLINE( 192)							int _g6 = 0;
HXDLIN( 192)							int _g7 = b1->length;
HXDLIN( 192)							while((_g6 < _g7)){
HXLINE( 192)								_g6 = (_g6 + 1);
HXDLIN( 192)								int i1 = (_g6 - 1);
HXDLIN( 192)								{
HXLINE( 192)									 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN( 192)									bool undoImage2;
HXDLIN( 192)									if ((i1 >= 0)) {
HXLINE( 192)										undoImage2 = (i1 < (this2->byteLength >> 2));
            									}
            									else {
HXLINE( 192)										undoImage2 = false;
            									}
HXDLIN( 192)									if (undoImage2) {
HXLINE( 192)										 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 192)										int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 192)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 192)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 192)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 192)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 192)					undoImage1 = b1;
            				}
            				break;
            				case (int)3: {
HXLINE( 192)					 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 192)					 ::iterMagic::VecIntImg v = vec;
HXDLIN( 192)					{
HXLINE( 192)						v->width = width;
HXDLIN( 192)						v->height = height;
HXDLIN( 192)						v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 192)						v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 192)						{
HXLINE( 192)							int _g8 = 0;
HXDLIN( 192)							int _g9 = v->length;
HXDLIN( 192)							while((_g8 < _g9)){
HXLINE( 192)								_g8 = (_g8 + 1);
HXDLIN( 192)								int i2 = (_g8 - 1);
HXDLIN( 192)								v->data->__unsafe_set(i2,0);
            							}
            						}
            					}
HXDLIN( 192)					undoImage1 = v;
            				}
            				break;
            				case (int)4: {
HXLINE( 192)					 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 192)					 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 192)					{
HXLINE( 192)						b2->width = width;
HXDLIN( 192)						b2->height = height;
HXDLIN( 192)						b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 192)						b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 192)						{
HXLINE( 192)							int len1 = b2->length;
HXDLIN( 192)							 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 192)							if (::hx::IsNull( d->head )) {
HXLINE( 192)								int _g10 = 0;
HXDLIN( 192)								int _g11 = len1;
HXDLIN( 192)								while((_g10 < _g11)){
HXLINE( 192)									_g10 = (_g10 + 1);
HXDLIN( 192)									int i3 = (_g10 - 1);
HXDLIN( 192)									d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            								}
            							}
            							else {
HXLINE( 192)								int _g12 = 0;
HXDLIN( 192)								int _g13 = len1;
HXDLIN( 192)								while((_g12 < _g13)){
HXLINE( 192)									_g12 = (_g12 + 1);
HXDLIN( 192)									int i4 = (_g12 - 1);
HXDLIN( 192)									{
HXLINE( 192)										 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 192)										 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 192)										{
HXLINE( 192)											int _g14 = 0;
HXDLIN( 192)											int _g15 = i4;
HXDLIN( 192)											while((_g14 < _g15)){
HXLINE( 192)												_g14 = (_g14 + 1);
HXDLIN( 192)												int i5 = (_g14 - 1);
HXLINE( 345)												prev = l;
HXLINE( 346)												l = l->next;
            											}
            										}
HXLINE( 192)										if (::hx::IsNull( prev )) {
HXLINE( 192)											b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 192)											l = null();
            										}
            										else {
HXLINE( 192)											prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 192)											l = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 192)					undoImage1 = b2;
            				}
            				break;
            			}
HXDLIN( 192)			this1->image = undoImage1;
HXDLIN( 192)			this1->width = width;
HXDLIN( 192)			this1->height = height;
HXDLIN( 192)			this1->imageType = ( (int)(imageType) );
HXDLIN( 192)			undoImage = this1;
HXDLIN( 192)			{
HXLINE( 192)				int rectLeft = xIter3->start;
HXDLIN( 192)				int rectTop = yIter3->start;
HXDLIN( 192)				int rectRight = xIter3->max;
HXDLIN( 192)				bool forceClear = false;
HXDLIN( 192)				{
HXLINE( 192)					int _g16 = rectTop;
HXDLIN( 192)					int _g17 = yIter3->max;
HXDLIN( 192)					while((_g16 < _g17)){
HXLINE( 192)						_g16 = (_g16 + 1);
HXDLIN( 192)						int dy1 = (_g16 - 1);
HXDLIN( 192)						{
HXLINE( 192)							int _g18 = rectLeft;
HXDLIN( 192)							int _g19 = rectRight;
HXDLIN( 192)							while((_g18 < _g19)){
HXLINE( 192)								_g18 = (_g18 + 1);
HXDLIN( 192)								int dx1 = (_g18 - 1);
HXDLIN( 192)								::Dynamic this3 = pixelImage->image;
HXDLIN( 192)								int index;
HXDLIN( 192)								if (pixelImage->useVirtualPos) {
HXLINE( 192)									index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 192)									index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            								}
HXDLIN( 192)								int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN( 192)								int col;
HXDLIN( 192)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)									col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 192)									col = c;
            								}
HXDLIN( 192)								bool _hx_tmp;
HXDLIN( 192)								if (pixelImage->useMask) {
HXLINE( 192)									_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 192)									_hx_tmp = false;
            								}
HXDLIN( 192)								if (_hx_tmp) {
HXLINE( 192)									 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN( 192)									::Dynamic this5 = this4->image;
HXDLIN( 192)									int index1;
HXDLIN( 192)									if (this4->useVirtualPos) {
HXLINE( 192)										index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            									}
            									else {
HXLINE( 192)										index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            									}
HXDLIN( 192)									int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN( 192)									int v1;
HXDLIN( 192)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)										v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            									}
            									else {
HXLINE( 192)										v1 = c1;
            									}
HXDLIN( 192)									int maskPixel = v1;
HXDLIN( 192)									int this6 = col;
HXDLIN( 192)									if ((maskPixel == 0)) {
HXLINE( 192)										col = this6;
            									}
            									else {
HXLINE( 192)										Float m0;
HXDLIN( 192)										int this7 = ((maskPixel >> 24) & 255);
HXDLIN( 192)										if ((this7 == 0)) {
HXLINE( 192)											m0 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float m1;
HXDLIN( 192)										int this8 = ((maskPixel >> 16) & 255);
HXDLIN( 192)										if ((this8 == 0)) {
HXLINE( 192)											m1 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float m2;
HXDLIN( 192)										int this9 = ((maskPixel >> 8) & 255);
HXDLIN( 192)										if ((this9 == 0)) {
HXLINE( 192)											m2 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float m3;
HXDLIN( 192)										int this10 = (maskPixel & 255);
HXDLIN( 192)										if ((this10 == 0)) {
HXLINE( 192)											m3 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 192)										int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 192)										int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 192)										int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 192)										col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 192)								if ((col != 0)) {
HXLINE( 192)									int x1 = (dx1 - rectLeft);
HXDLIN( 192)									int y1 = (dy1 - rectTop);
HXDLIN( 192)									int c2 = col;
HXDLIN( 192)									bool _hx_tmp1;
HXDLIN( 192)									if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 192)										_hx_tmp1 = undoImage->transparent;
            									}
            									else {
HXLINE( 192)										_hx_tmp1 = false;
            									}
HXDLIN( 192)									if (_hx_tmp1) {
HXLINE( 192)										int location;
HXDLIN( 192)										if (undoImage->useVirtualPos) {
HXLINE( 192)											location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            										}
            										else {
HXLINE( 192)											location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            										}
HXDLIN( 192)										int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 192)										int this12;
HXDLIN( 192)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)											this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            										}
            										else {
HXLINE( 192)											this12 = this11;
            										}
HXDLIN( 192)										Float a11;
HXDLIN( 192)										int this13 = ((this12 >> 24) & 255);
HXDLIN( 192)										if ((this13 == 0)) {
HXLINE( 192)											a11 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float r1;
HXDLIN( 192)										int this14 = ((this12 >> 16) & 255);
HXDLIN( 192)										if ((this14 == 0)) {
HXLINE( 192)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float g1;
HXDLIN( 192)										int this15 = ((this12 >> 8) & 255);
HXDLIN( 192)										if ((this15 == 0)) {
HXLINE( 192)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float b11;
HXDLIN( 192)										int this16 = (this12 & 255);
HXDLIN( 192)										if ((this16 == 0)) {
HXLINE( 192)											b11 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float a2;
HXDLIN( 192)										int this17 = ((col >> 24) & 255);
HXDLIN( 192)										if ((this17 == 0)) {
HXLINE( 192)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float r2;
HXDLIN( 192)										int this18 = ((col >> 16) & 255);
HXDLIN( 192)										if ((this18 == 0)) {
HXLINE( 192)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float g2;
HXDLIN( 192)										int this19 = ((col >> 8) & 255);
HXDLIN( 192)										if ((this19 == 0)) {
HXLINE( 192)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float b21;
HXDLIN( 192)										int this20 = (col & 255);
HXDLIN( 192)										if ((this20 == 0)) {
HXLINE( 192)											b21 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 192)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 192)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 192)										int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 192)										int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 192)										int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 192)										{
HXLINE( 192)											int _hx_tmp2;
HXDLIN( 192)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)												_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 192)												_hx_tmp2 = blended;
            											}
HXDLIN( 192)											::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            										}
            									}
            									else {
HXLINE( 192)										::Dynamic this21 = undoImage->image;
HXDLIN( 192)										int index2;
HXDLIN( 192)										if (undoImage->useVirtualPos) {
HXLINE( 192)											index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            										}
            										else {
HXLINE( 192)											index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            										}
HXDLIN( 192)										int _hx_tmp3;
HXDLIN( 192)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)											_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            										}
            										else {
HXLINE( 192)											_hx_tmp3 = c2;
            										}
HXDLIN( 192)										::iterMagic::Iimg_obj::set(this21,index2,_hx_tmp3);
            									}
            								}
            								else {
HXLINE( 192)									if (forceClear) {
HXLINE( 192)										::Dynamic this22 = undoImage->image;
HXDLIN( 192)										int x2 = (dx1 - rectLeft);
HXDLIN( 192)										int y2 = (dy1 - rectTop);
HXDLIN( 192)										int index3;
HXDLIN( 192)										if (undoImage->useVirtualPos) {
HXLINE( 192)											index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            										}
            										else {
HXLINE( 192)											index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            										}
HXDLIN( 192)										::iterMagic::Iimg_obj::set(this22,index3,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 192)		bool found = false;
HXDLIN( 192)		Float s = ((Float)0.);
HXDLIN( 192)		Float t = ((Float)0.);
HXDLIN( 192)		Float sxx = ((Float)0.);
HXDLIN( 192)		Float txx = ((Float)0.);
HXDLIN( 192)		{
HXLINE( 192)			int _g_min = xIter3->start;
HXDLIN( 192)			int _g_max = xIter3->max;
HXDLIN( 192)			while((_g_min < _g_max)){
HXLINE( 192)				_g_min = (_g_min + 1);
HXDLIN( 192)				int x3 = (_g_min - 1);
HXLINE(  60)				sxx = (sx * ( (Float)(x3) ));
HXLINE(  61)				txx = (tx * ( (Float)(x3) ));
HXLINE(  62)				found = false;
HXLINE( 192)				{
HXLINE( 192)					int _g_min1 = yIter3->start;
HXDLIN( 192)					int _g_max1 = yIter3->max;
HXDLIN( 192)					while((_g_min1 < _g_max1)){
HXLINE( 192)						_g_min1 = (_g_min1 + 1);
HXDLIN( 192)						int y3 = (_g_min1 - 1);
HXLINE(  64)						s = ((s0 + sxx) + (sy * ( (Float)(y3) )));
HXLINE(  65)						t = ((t0 + txx) + (ty * ( (Float)(y3) )));
HXLINE( 192)						bool _hx_tmp4;
HXDLIN( 192)						if (!((s <= 0))) {
HXLINE( 192)							_hx_tmp4 = (t <= 0);
            						}
            						else {
HXLINE( 192)							_hx_tmp4 = true;
            						}
HXDLIN( 192)						if (_hx_tmp4) {
HXLINE( 192)							if (found) {
HXLINE( 192)								goto _hx_goto_314;
            							}
            						}
            						else {
HXLINE( 192)							if (((s + t) < A)) {
HXLINE( 192)								{
HXLINE( 192)									int c3 = color;
HXDLIN( 192)									bool _hx_tmp5;
HXDLIN( 192)									if ((((c3 >> 24) & 255) < 254)) {
HXLINE( 192)										_hx_tmp5 = pixelImage->transparent;
            									}
            									else {
HXLINE( 192)										_hx_tmp5 = false;
            									}
HXDLIN( 192)									if (_hx_tmp5) {
HXLINE( 192)										int location1;
HXDLIN( 192)										if (pixelImage->useVirtualPos) {
HXLINE( 192)											location1 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x3) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 192)											location1 = ::Std_obj::_hx_int(( (Float)(((y3 * pixelImage->width) + x3)) ));
            										}
HXDLIN( 192)										int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN( 192)										int this24;
HXDLIN( 192)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)											this24 = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            										}
            										else {
HXLINE( 192)											this24 = this23;
            										}
HXDLIN( 192)										Float a12;
HXDLIN( 192)										int this25 = ((this24 >> 24) & 255);
HXDLIN( 192)										if ((this25 == 0)) {
HXLINE( 192)											a12 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											a12 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float r11;
HXDLIN( 192)										int this26 = ((this24 >> 16) & 255);
HXDLIN( 192)										if ((this26 == 0)) {
HXLINE( 192)											r11 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float g11;
HXDLIN( 192)										int this27 = ((this24 >> 8) & 255);
HXDLIN( 192)										if ((this27 == 0)) {
HXLINE( 192)											g11 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float b12;
HXDLIN( 192)										int this28 = (this24 & 255);
HXDLIN( 192)										if ((this28 == 0)) {
HXLINE( 192)											b12 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float a21;
HXDLIN( 192)										int this29 = ((color >> 24) & 255);
HXDLIN( 192)										if ((this29 == 0)) {
HXLINE( 192)											a21 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float r21;
HXDLIN( 192)										int this30 = ((color >> 16) & 255);
HXDLIN( 192)										if ((this30 == 0)) {
HXLINE( 192)											r21 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float g21;
HXDLIN( 192)										int this31 = ((color >> 8) & 255);
HXDLIN( 192)										if ((this31 == 0)) {
HXLINE( 192)											g21 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float b22;
HXDLIN( 192)										int this32 = (color & 255);
HXDLIN( 192)										if ((this32 == 0)) {
HXLINE( 192)											b22 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 192)										int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 192)										int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 192)										int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 192)										int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 192)										int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 192)										{
HXLINE( 192)											int _hx_tmp6;
HXDLIN( 192)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)												_hx_tmp6 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXLINE( 192)												_hx_tmp6 = blended1;
            											}
HXDLIN( 192)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp6);
            										}
            									}
            									else {
HXLINE( 192)										::Dynamic this33 = pixelImage->image;
HXDLIN( 192)										int index4;
HXDLIN( 192)										if (pixelImage->useVirtualPos) {
HXLINE( 192)											index4 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x3) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 192)											index4 = ::Std_obj::_hx_int(( (Float)(((y3 * pixelImage->width) + x3)) ));
            										}
HXDLIN( 192)										int _hx_tmp7;
HXDLIN( 192)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)											_hx_tmp7 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            										}
            										else {
HXLINE( 192)											_hx_tmp7 = c3;
            										}
HXDLIN( 192)										::iterMagic::Iimg_obj::set(this33,index4,_hx_tmp7);
            									}
            								}
HXLINE(  73)								found = true;
            							}
            							else {
HXLINE( 192)								if (found) {
HXLINE( 192)									goto _hx_goto_314;
            								}
            							}
            						}
            					}
            					_hx_goto_314:;
            				}
            			}
            		}
HXDLIN( 192)		 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN( 192)		 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN( 192)		int v_undoY;
HXDLIN( 192)		int v_undoX;
HXDLIN( 192)		Float v_ty;
HXDLIN( 192)		Float v_tx;
HXDLIN( 192)		Float v_t0;
HXDLIN( 192)		Float v_sy;
HXDLIN( 192)		Float v_sx;
HXDLIN( 192)		Float v_s0;
HXDLIN( 192)		Float v_A;
HXDLIN( 192)		Float ax1 = ax;
HXDLIN( 192)		Float ay1 = ay;
HXDLIN( 192)		 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN( 192)		Float bx2 = bx1;
HXDLIN( 192)		Float by2 = by1;
HXDLIN( 192)		Float cx2 = cx1;
HXDLIN( 192)		Float cy2 = cy1;
HXDLIN( 192)		bool adjustWinding1 = (((((ax1 * by2) - (bx2 * ay1)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay1) - (ax1 * cy2))) > 0);
HXDLIN( 192)		if (!(adjustWinding1)) {
HXLINE( 192)			Float bx_1 = bx2;
HXDLIN( 192)			Float by_1 = by2;
HXLINE(  24)			bx2 = cx2;
HXLINE(  25)			by2 = cy2;
HXLINE(  26)			cx2 = bx_1;
HXLINE(  27)			cy2 = by_1;
            		}
HXLINE( 192)		Float v_ax = ax1;
HXDLIN( 192)		Float v_ay = ay1;
HXDLIN( 192)		Float v_bx = bx2;
HXDLIN( 192)		Float v_by = by2;
HXDLIN( 192)		Float v_cx = cx2;
HXDLIN( 192)		Float v_cy = cy2;
HXDLIN( 192)		bool v_preCalculated = true;
HXDLIN( 192)		{
HXLINE( 192)			v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN( 192)			v_sx = (v_cy - v_ay);
HXDLIN( 192)			v_sy = (v_ax - v_cx);
HXDLIN( 192)			v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN( 192)			v_tx = (v_ay - v_by);
HXDLIN( 192)			v_ty = (v_bx - v_ax);
HXDLIN( 192)			v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN( 192)			Float a6 = v_ax;
HXDLIN( 192)			Float b5 = v_bx;
HXDLIN( 192)			Float c4 = v_cx;
HXDLIN( 192)			if ((a6 > b5)) {
HXLINE( 192)				if ((a6 > c4)) {
HXLINE( 192)					int min4;
HXDLIN( 192)					if ((b5 > c4)) {
HXLINE( 192)						min4 = ::Math_obj::floor(c4);
            					}
            					else {
HXLINE( 192)						min4 = ::Math_obj::floor(b5);
            					}
HXDLIN( 192)					int ii_min8 = min4;
HXDLIN( 192)					int ii_max8 = ::Math_obj::ceil(a6);
HXDLIN( 192)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXLINE( 192)					int ii_min9 = ::Math_obj::floor(b5);
HXDLIN( 192)					int ii_max9 = ::Math_obj::ceil(c4);
HXDLIN( 192)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXLINE( 192)				if ((b5 > c4)) {
HXLINE( 192)					int min5;
HXDLIN( 192)					if ((a6 > c4)) {
HXLINE( 192)						min5 = ::Math_obj::floor(c4);
            					}
            					else {
HXLINE( 192)						min5 = ::Math_obj::ceil(a6);
            					}
HXDLIN( 192)					int ii_min10 = min5;
HXDLIN( 192)					int ii_max10 = ::Math_obj::ceil(b5);
HXDLIN( 192)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXLINE( 192)					int ii_min11 = ::Math_obj::floor(a6);
HXDLIN( 192)					int ii_max11 = ::Math_obj::ceil(c4);
HXDLIN( 192)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN( 192)			Float a7 = v_ay;
HXDLIN( 192)			Float b6 = v_by;
HXDLIN( 192)			Float c5 = v_cy;
HXDLIN( 192)			if ((a7 > b6)) {
HXLINE( 192)				if ((a7 > c5)) {
HXLINE( 192)					int min6;
HXDLIN( 192)					if ((b6 > c5)) {
HXLINE( 192)						min6 = ::Math_obj::floor(c5);
            					}
            					else {
HXLINE( 192)						min6 = ::Math_obj::floor(b6);
            					}
HXDLIN( 192)					int ii_min12 = min6;
HXDLIN( 192)					int ii_max12 = ::Math_obj::ceil(a7);
HXDLIN( 192)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXLINE( 192)					int ii_min13 = ::Math_obj::floor(b6);
HXDLIN( 192)					int ii_max13 = ::Math_obj::ceil(c5);
HXDLIN( 192)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXLINE( 192)				if ((b6 > c5)) {
HXLINE( 192)					int min7;
HXDLIN( 192)					if ((a7 > c5)) {
HXLINE( 192)						min7 = ::Math_obj::floor(c5);
            					}
            					else {
HXLINE( 192)						min7 = ::Math_obj::ceil(a7);
            					}
HXDLIN( 192)					int ii_min14 = min7;
HXDLIN( 192)					int ii_max14 = ::Math_obj::ceil(b6);
HXDLIN( 192)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXLINE( 192)					int ii_min15 = ::Math_obj::floor(a7);
HXDLIN( 192)					int ii_max15 = ::Math_obj::ceil(c5);
HXDLIN( 192)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
            		}
HXDLIN( 192)		if (hasUndo) {
HXLINE( 192)			v_undoImage = undoImage;
HXDLIN( 192)			v_undoX = xIter3->start;
HXDLIN( 192)			v_undoY = yIter3->start;
            		}
HXDLIN( 192)		Float bx3 = cx;
HXDLIN( 192)		Float by3 = cy;
HXDLIN( 192)		Float cx3 = dx;
HXDLIN( 192)		Float cy3 = dy;
HXDLIN( 192)		bool hasUndo1 = false;
HXDLIN( 192)		bool adjustWinding2 = (((((bx * by3) - (bx3 * by)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * by) - (bx * cy3))) > 0);
HXDLIN( 192)		if (!(adjustWinding2)) {
HXLINE( 192)			Float bx_2 = bx3;
HXDLIN( 192)			Float by_2 = by3;
HXLINE(  25)			bx3 = cx3;
HXLINE(  26)			by3 = cy3;
HXLINE(  27)			cx3 = bx_2;
HXLINE(  28)			cy3 = by_2;
            		}
HXLINE( 192)		Float s01 = ((by * cx3) - (bx * cy3));
HXDLIN( 192)		Float sx1 = (cy3 - by);
HXDLIN( 192)		Float sy1 = (bx - cx3);
HXDLIN( 192)		Float t01 = ((bx * by3) - (by * bx3));
HXDLIN( 192)		Float tx1 = (by - by3);
HXDLIN( 192)		Float ty1 = (bx3 - bx);
HXDLIN( 192)		Float A1 = ((((-(by3) * cx3) + (by * (-(bx3) + cx3))) + (bx * (by3 - cy3))) + (bx3 * cy3));
HXDLIN( 192)		 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 192)		if ((bx > bx3)) {
HXLINE( 192)			if ((bx > cx3)) {
HXLINE( 192)				int min8;
HXDLIN( 192)				if ((bx3 > cx3)) {
HXLINE( 192)					min8 = ::Math_obj::floor(cx3);
            				}
            				else {
HXLINE( 192)					min8 = ::Math_obj::floor(bx3);
            				}
HXDLIN( 192)				int ii_min16 = min8;
HXDLIN( 192)				int ii_max16 = ::Math_obj::ceil(bx);
HXDLIN( 192)				xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            			}
            			else {
HXLINE( 192)				int ii_min17 = ::Math_obj::floor(bx3);
HXDLIN( 192)				int ii_max17 = ::Math_obj::ceil(cx3);
HXDLIN( 192)				xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            			}
            		}
            		else {
HXLINE( 192)			if ((bx3 > cx3)) {
HXLINE( 192)				int min9;
HXDLIN( 192)				if ((bx > cx3)) {
HXLINE( 192)					min9 = ::Math_obj::floor(cx3);
            				}
            				else {
HXLINE( 192)					min9 = ::Math_obj::ceil(bx);
            				}
HXDLIN( 192)				int ii_min18 = min9;
HXDLIN( 192)				int ii_max18 = ::Math_obj::ceil(bx3);
HXDLIN( 192)				xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            			}
            			else {
HXLINE( 192)				int ii_min19 = ::Math_obj::floor(bx);
HXDLIN( 192)				int ii_max19 = ::Math_obj::ceil(cx3);
HXDLIN( 192)				xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            			}
            		}
HXDLIN( 192)		 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 192)		if ((by > by3)) {
HXLINE( 192)			if ((by > cy3)) {
HXLINE( 192)				int min10;
HXDLIN( 192)				if ((by3 > cy3)) {
HXLINE( 192)					min10 = ::Math_obj::floor(cy3);
            				}
            				else {
HXLINE( 192)					min10 = ::Math_obj::floor(by3);
            				}
HXDLIN( 192)				int ii_min20 = min10;
HXDLIN( 192)				int ii_max20 = ::Math_obj::ceil(by);
HXDLIN( 192)				yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            			}
            			else {
HXLINE( 192)				int ii_min21 = ::Math_obj::floor(by3);
HXDLIN( 192)				int ii_max21 = ::Math_obj::ceil(cy3);
HXDLIN( 192)				yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            			}
            		}
            		else {
HXLINE( 192)			if ((by3 > cy3)) {
HXLINE( 192)				int min11;
HXDLIN( 192)				if ((by > cy3)) {
HXLINE( 192)					min11 = ::Math_obj::floor(cy3);
            				}
            				else {
HXLINE( 192)					min11 = ::Math_obj::ceil(by);
            				}
HXDLIN( 192)				int ii_min22 = min11;
HXDLIN( 192)				int ii_max22 = ::Math_obj::ceil(by3);
HXDLIN( 192)				yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            			}
            			else {
HXLINE( 192)				int ii_min23 = ::Math_obj::floor(by);
HXDLIN( 192)				int ii_max23 = ::Math_obj::ceil(cy3);
HXDLIN( 192)				yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            			}
            		}
HXDLIN( 192)		 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 192)		if (hasUndo1) {
HXLINE( 192)			int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 192)			int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 192)			 ::Dynamic imageType1 = null();
HXDLIN( 192)			 ::pi_xy::ImageStruct this34 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 192)			if (::hx::IsNull( imageType1 )) {
HXLINE(  54)				imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 192)			::Dynamic undoImage4;
HXDLIN( 192)			switch((int)(( (int)(imageType1) ))){
            				case (int)0: {
HXLINE( 192)					 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 192)					 ::iterMagic::BytesImg b7 = byt1;
HXDLIN( 192)					{
HXLINE( 192)						b7->width = width1;
HXDLIN( 192)						b7->height = height1;
HXDLIN( 192)						b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 192)						b7->data = ::haxe::io::Bytes_obj::alloc((b7->length * 4));
HXDLIN( 192)						{
HXLINE( 192)							int len2 = b7->length;
HXDLIN( 192)							int w1 = 0;
HXDLIN( 192)							{
HXLINE( 192)								int _g20 = 0;
HXDLIN( 192)								int _g21 = b7->height;
HXDLIN( 192)								while((_g20 < _g21)){
HXLINE( 192)									_g20 = (_g20 + 1);
HXDLIN( 192)									int y4 = (_g20 - 1);
HXDLIN( 192)									{
HXLINE( 192)										int _g22 = 0;
HXDLIN( 192)										int _g23 = b7->width;
HXDLIN( 192)										while((_g22 < _g23)){
HXLINE( 192)											_g22 = (_g22 + 1);
HXDLIN( 192)											int x4 = (_g22 - 1);
HXDLIN( 192)											{
HXLINE( 192)												w1 = (w1 + 1);
HXDLIN( 192)												b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 192)											{
HXLINE( 192)												w1 = (w1 + 1);
HXDLIN( 192)												b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 192)											{
HXLINE( 192)												w1 = (w1 + 1);
HXDLIN( 192)												b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 192)											{
HXLINE( 192)												w1 = (w1 + 1);
HXDLIN( 192)												b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 192)					undoImage4 = b7;
            				}
            				break;
            				case (int)1: {
HXLINE( 192)					 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 192)					 ::iterMagic::ArrIntImg a8 = arrI1;
HXDLIN( 192)					{
HXLINE( 192)						a8->width = width1;
HXDLIN( 192)						a8->height = height1;
HXDLIN( 192)						a8->data = ::Array_obj< int >::__new(0);
HXDLIN( 192)						a8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 192)						{
HXLINE( 192)							int _g24 = 0;
HXDLIN( 192)							int _g25 = a8->length;
HXDLIN( 192)							while((_g24 < _g25)){
HXLINE( 192)								_g24 = (_g24 + 1);
HXDLIN( 192)								int i6 = (_g24 - 1);
HXDLIN( 192)								a8->data[i6] = 0;
            							}
            						}
            					}
HXDLIN( 192)					undoImage4 = a8;
            				}
            				break;
            				case (int)2: {
HXLINE( 192)					 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 192)					 ::iterMagic::U32ArrImg b8 = u32a1;
HXDLIN( 192)					{
HXLINE( 192)						b8->width = width1;
HXDLIN( 192)						b8->height = height1;
HXDLIN( 192)						b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 192)						int size1 = (b8->length * 4);
HXDLIN( 192)						b8->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 192)						{
HXLINE( 192)							int _g26 = 0;
HXDLIN( 192)							int _g27 = b8->length;
HXDLIN( 192)							while((_g26 < _g27)){
HXLINE( 192)								_g26 = (_g26 + 1);
HXDLIN( 192)								int i7 = (_g26 - 1);
HXDLIN( 192)								{
HXLINE( 192)									 ::haxe::io::ArrayBufferViewImpl this35 = b8->data;
HXDLIN( 192)									bool undoImage5;
HXDLIN( 192)									if ((i7 >= 0)) {
HXLINE( 192)										undoImage5 = (i7 < (this35->byteLength >> 2));
            									}
            									else {
HXLINE( 192)										undoImage5 = false;
            									}
HXDLIN( 192)									if (undoImage5) {
HXLINE( 192)										 ::haxe::io::Bytes _this1 = this35->bytes;
HXDLIN( 192)										int pos1 = ((i7 << 2) + this35->byteOffset);
HXDLIN( 192)										_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 192)										_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 192)										_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 192)										_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 192)					undoImage4 = b8;
            				}
            				break;
            				case (int)3: {
HXLINE( 192)					 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 192)					 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 192)					{
HXLINE( 192)						v2->width = width1;
HXDLIN( 192)						v2->height = height1;
HXDLIN( 192)						v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 192)						v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 192)						{
HXLINE( 192)							int _g28 = 0;
HXDLIN( 192)							int _g29 = v2->length;
HXDLIN( 192)							while((_g28 < _g29)){
HXLINE( 192)								_g28 = (_g28 + 1);
HXDLIN( 192)								int i8 = (_g28 - 1);
HXDLIN( 192)								v2->data->__unsafe_set(i8,0);
            							}
            						}
            					}
HXDLIN( 192)					undoImage4 = v2;
            				}
            				break;
            				case (int)4: {
HXLINE( 192)					 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 192)					 ::iterMagic::StackIntImg b9 = sInt1;
HXDLIN( 192)					{
HXLINE( 192)						b9->width = width1;
HXDLIN( 192)						b9->height = height1;
HXDLIN( 192)						b9->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 192)						b9->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 192)						{
HXLINE( 192)							int len3 = b9->length;
HXDLIN( 192)							 ::haxe::ds::GenericStack_Int d1 = b9->data;
HXDLIN( 192)							if (::hx::IsNull( d1->head )) {
HXLINE( 192)								int _g30 = 0;
HXDLIN( 192)								int _g31 = len3;
HXDLIN( 192)								while((_g30 < _g31)){
HXLINE( 192)									_g30 = (_g30 + 1);
HXDLIN( 192)									int i9 = (_g30 - 1);
HXDLIN( 192)									d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            								}
            							}
            							else {
HXLINE( 192)								int _g32 = 0;
HXDLIN( 192)								int _g33 = len3;
HXDLIN( 192)								while((_g32 < _g33)){
HXLINE( 192)									_g32 = (_g32 + 1);
HXDLIN( 192)									int i10 = (_g32 - 1);
HXDLIN( 192)									{
HXLINE( 192)										 ::haxe::ds::GenericCell_Int l1 = b9->data->head;
HXDLIN( 192)										 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 192)										{
HXLINE( 192)											int _g34 = 0;
HXDLIN( 192)											int _g35 = i10;
HXDLIN( 192)											while((_g34 < _g35)){
HXLINE( 192)												_g34 = (_g34 + 1);
HXDLIN( 192)												int i11 = (_g34 - 1);
HXLINE( 345)												prev1 = l1;
HXLINE( 346)												l1 = l1->next;
            											}
            										}
HXLINE( 192)										if (::hx::IsNull( prev1 )) {
HXLINE( 192)											b9->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 192)											l1 = null();
            										}
            										else {
HXLINE( 192)											prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 192)											l1 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 192)					undoImage4 = b9;
            				}
            				break;
            			}
HXDLIN( 192)			this34->image = undoImage4;
HXDLIN( 192)			this34->width = width1;
HXDLIN( 192)			this34->height = height1;
HXDLIN( 192)			this34->imageType = ( (int)(imageType1) );
HXDLIN( 192)			undoImage3 = this34;
HXDLIN( 192)			{
HXLINE( 192)				int rectLeft1 = xIter31->start;
HXDLIN( 192)				int rectTop1 = yIter31->start;
HXDLIN( 192)				int rectRight1 = xIter31->max;
HXDLIN( 192)				bool forceClear1 = false;
HXDLIN( 192)				{
HXLINE( 192)					int _g36 = rectTop1;
HXDLIN( 192)					int _g37 = yIter31->max;
HXDLIN( 192)					while((_g36 < _g37)){
HXLINE( 192)						_g36 = (_g36 + 1);
HXDLIN( 192)						int dy2 = (_g36 - 1);
HXDLIN( 192)						{
HXLINE( 192)							int _g38 = rectLeft1;
HXDLIN( 192)							int _g39 = rectRight1;
HXDLIN( 192)							while((_g38 < _g39)){
HXLINE( 192)								_g38 = (_g38 + 1);
HXDLIN( 192)								int dx2 = (_g38 - 1);
HXDLIN( 192)								::Dynamic this36 = pixelImage->image;
HXDLIN( 192)								int index5;
HXDLIN( 192)								if (pixelImage->useVirtualPos) {
HXLINE( 192)									index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 192)									index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            								}
HXDLIN( 192)								int c6 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN( 192)								int col1;
HXDLIN( 192)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)									col1 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            								}
            								else {
HXLINE( 192)									col1 = c6;
            								}
HXDLIN( 192)								bool _hx_tmp8;
HXDLIN( 192)								if (pixelImage->useMask) {
HXLINE( 192)									_hx_tmp8 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 192)									_hx_tmp8 = false;
            								}
HXDLIN( 192)								if (_hx_tmp8) {
HXLINE( 192)									 ::pi_xy::ImageStruct this37 = pixelImage->mask;
HXDLIN( 192)									::Dynamic this38 = this37->image;
HXDLIN( 192)									int index6;
HXDLIN( 192)									if (this37->useVirtualPos) {
HXLINE( 192)										index6 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this37->virtualY) * ( (Float)(this37->width) )) + dx2) - this37->virtualX));
            									}
            									else {
HXLINE( 192)										index6 = ::Std_obj::_hx_int(( (Float)(((dy2 * this37->width) + dx2)) ));
            									}
HXDLIN( 192)									int c7 = ::iterMagic::Iimg_obj::get(this38,index6);
HXDLIN( 192)									int v3;
HXDLIN( 192)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)										v3 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            									}
            									else {
HXLINE( 192)										v3 = c7;
            									}
HXDLIN( 192)									int maskPixel1 = v3;
HXDLIN( 192)									int this39 = col1;
HXDLIN( 192)									if ((maskPixel1 == 0)) {
HXLINE( 192)										col1 = this39;
            									}
            									else {
HXLINE( 192)										Float m01;
HXDLIN( 192)										int this40 = ((maskPixel1 >> 24) & 255);
HXDLIN( 192)										if ((this40 == 0)) {
HXLINE( 192)											m01 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											m01 = (( (Float)(this40) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float m11;
HXDLIN( 192)										int this41 = ((maskPixel1 >> 16) & 255);
HXDLIN( 192)										if ((this41 == 0)) {
HXLINE( 192)											m11 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											m11 = (( (Float)(this41) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float m21;
HXDLIN( 192)										int this42 = ((maskPixel1 >> 8) & 255);
HXDLIN( 192)										if ((this42 == 0)) {
HXLINE( 192)											m21 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											m21 = (( (Float)(this42) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float m31;
HXDLIN( 192)										int this43 = (maskPixel1 & 255);
HXDLIN( 192)										if ((this43 == 0)) {
HXLINE( 192)											m31 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											m31 = (( (Float)(this43) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this39 >> 24) & 255)) )));
HXDLIN( 192)										int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this39 >> 16) & 255)) )));
HXDLIN( 192)										int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this39 >> 8) & 255)) )));
HXDLIN( 192)										int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this39 & 255)) )));
HXDLIN( 192)										col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 192)								if ((col1 != 0)) {
HXLINE( 192)									int x5 = (dx2 - rectLeft1);
HXDLIN( 192)									int y5 = (dy2 - rectTop1);
HXDLIN( 192)									int c8 = col1;
HXDLIN( 192)									bool _hx_tmp9;
HXDLIN( 192)									if ((((c8 >> 24) & 255) < 254)) {
HXLINE( 192)										_hx_tmp9 = undoImage3->transparent;
            									}
            									else {
HXLINE( 192)										_hx_tmp9 = false;
            									}
HXDLIN( 192)									if (_hx_tmp9) {
HXLINE( 192)										int location2;
HXDLIN( 192)										if (undoImage3->useVirtualPos) {
HXLINE( 192)											location2 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            										}
            										else {
HXLINE( 192)											location2 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            										}
HXDLIN( 192)										int this44 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 192)										int this45;
HXDLIN( 192)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)											this45 = ((((((this44 >> 24) & 255) << 24) | ((this44 & 255) << 16)) | (((this44 >> 8) & 255) << 8)) | ((this44 >> 16) & 255));
            										}
            										else {
HXLINE( 192)											this45 = this44;
            										}
HXDLIN( 192)										Float a13;
HXDLIN( 192)										int this46 = ((this45 >> 24) & 255);
HXDLIN( 192)										if ((this46 == 0)) {
HXLINE( 192)											a13 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											a13 = (( (Float)(this46) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float r12;
HXDLIN( 192)										int this47 = ((this45 >> 16) & 255);
HXDLIN( 192)										if ((this47 == 0)) {
HXLINE( 192)											r12 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											r12 = (( (Float)(this47) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float g12;
HXDLIN( 192)										int this48 = ((this45 >> 8) & 255);
HXDLIN( 192)										if ((this48 == 0)) {
HXLINE( 192)											g12 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											g12 = (( (Float)(this48) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float b13;
HXDLIN( 192)										int this49 = (this45 & 255);
HXDLIN( 192)										if ((this49 == 0)) {
HXLINE( 192)											b13 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											b13 = (( (Float)(this49) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float a22;
HXDLIN( 192)										int this50 = ((col1 >> 24) & 255);
HXDLIN( 192)										if ((this50 == 0)) {
HXLINE( 192)											a22 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											a22 = (( (Float)(this50) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float r22;
HXDLIN( 192)										int this51 = ((col1 >> 16) & 255);
HXDLIN( 192)										if ((this51 == 0)) {
HXLINE( 192)											r22 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											r22 = (( (Float)(this51) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float g22;
HXDLIN( 192)										int this52 = ((col1 >> 8) & 255);
HXDLIN( 192)										if ((this52 == 0)) {
HXLINE( 192)											g22 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											g22 = (( (Float)(this52) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float b23;
HXDLIN( 192)										int this53 = (col1 & 255);
HXDLIN( 192)										if ((this53 == 0)) {
HXLINE( 192)											b23 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											b23 = (( (Float)(this53) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 192)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 192)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 192)										int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 192)										int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 192)										int blended2 = ((((a9 << 24) | (r4 << 16)) | (g4 << 8)) | b10);
HXDLIN( 192)										{
HXLINE( 192)											int _hx_tmp10;
HXDLIN( 192)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)												_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            											}
            											else {
HXLINE( 192)												_hx_tmp10 = blended2;
            											}
HXDLIN( 192)											::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            										}
            									}
            									else {
HXLINE( 192)										::Dynamic this54 = undoImage3->image;
HXDLIN( 192)										int index7;
HXDLIN( 192)										if (undoImage3->useVirtualPos) {
HXLINE( 192)											index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            										}
            										else {
HXLINE( 192)											index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            										}
HXDLIN( 192)										int _hx_tmp11;
HXDLIN( 192)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)											_hx_tmp11 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            										}
            										else {
HXLINE( 192)											_hx_tmp11 = c8;
            										}
HXDLIN( 192)										::iterMagic::Iimg_obj::set(this54,index7,_hx_tmp11);
            									}
            								}
            								else {
HXLINE( 192)									if (forceClear1) {
HXLINE( 192)										::Dynamic this55 = undoImage3->image;
HXDLIN( 192)										int x6 = (dx2 - rectLeft1);
HXDLIN( 192)										int y6 = (dy2 - rectTop1);
HXDLIN( 192)										int index8;
HXDLIN( 192)										if (undoImage3->useVirtualPos) {
HXLINE( 192)											index8 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x6) - undoImage3->virtualX));
            										}
            										else {
HXLINE( 192)											index8 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x6)) ));
            										}
HXDLIN( 192)										::iterMagic::Iimg_obj::set(this55,index8,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 192)		bool found1 = false;
HXDLIN( 192)		Float s1 = ((Float)0.);
HXDLIN( 192)		Float t1 = ((Float)0.);
HXDLIN( 192)		Float sxx1 = ((Float)0.);
HXDLIN( 192)		Float txx1 = ((Float)0.);
HXDLIN( 192)		{
HXLINE( 192)			int _g_min2 = xIter31->start;
HXDLIN( 192)			int _g_max2 = xIter31->max;
HXDLIN( 192)			while((_g_min2 < _g_max2)){
HXLINE( 192)				_g_min2 = (_g_min2 + 1);
HXDLIN( 192)				int x7 = (_g_min2 - 1);
HXLINE(  60)				sxx1 = (sx1 * ( (Float)(x7) ));
HXLINE(  61)				txx1 = (tx1 * ( (Float)(x7) ));
HXLINE(  62)				found1 = false;
HXLINE( 192)				{
HXLINE( 192)					int _g_min3 = yIter31->start;
HXDLIN( 192)					int _g_max3 = yIter31->max;
HXDLIN( 192)					while((_g_min3 < _g_max3)){
HXLINE( 192)						_g_min3 = (_g_min3 + 1);
HXDLIN( 192)						int y7 = (_g_min3 - 1);
HXLINE(  64)						s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y7) )));
HXLINE(  65)						t1 = ((t01 + txx1) + (ty1 * ( (Float)(y7) )));
HXLINE( 192)						bool _hx_tmp12;
HXDLIN( 192)						if (!((s1 <= 0))) {
HXLINE( 192)							_hx_tmp12 = (t1 <= 0);
            						}
            						else {
HXLINE( 192)							_hx_tmp12 = true;
            						}
HXDLIN( 192)						if (_hx_tmp12) {
HXLINE( 192)							if (found1) {
HXLINE( 192)								goto _hx_goto_326;
            							}
            						}
            						else {
HXLINE( 192)							if (((s1 + t1) < A1)) {
HXLINE( 192)								{
HXLINE( 192)									int c9 = color;
HXDLIN( 192)									bool _hx_tmp13;
HXDLIN( 192)									if ((((c9 >> 24) & 255) < 254)) {
HXLINE( 192)										_hx_tmp13 = pixelImage->transparent;
            									}
            									else {
HXLINE( 192)										_hx_tmp13 = false;
            									}
HXDLIN( 192)									if (_hx_tmp13) {
HXLINE( 192)										int location3;
HXDLIN( 192)										if (pixelImage->useVirtualPos) {
HXLINE( 192)											location3 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x7) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 192)											location3 = ::Std_obj::_hx_int(( (Float)(((y7 * pixelImage->width) + x7)) ));
            										}
HXDLIN( 192)										int this56 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN( 192)										int this57;
HXDLIN( 192)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)											this57 = ((((((this56 >> 24) & 255) << 24) | ((this56 & 255) << 16)) | (((this56 >> 8) & 255) << 8)) | ((this56 >> 16) & 255));
            										}
            										else {
HXLINE( 192)											this57 = this56;
            										}
HXDLIN( 192)										Float a14;
HXDLIN( 192)										int this58 = ((this57 >> 24) & 255);
HXDLIN( 192)										if ((this58 == 0)) {
HXLINE( 192)											a14 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											a14 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float r13;
HXDLIN( 192)										int this59 = ((this57 >> 16) & 255);
HXDLIN( 192)										if ((this59 == 0)) {
HXLINE( 192)											r13 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											r13 = (( (Float)(this59) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float g13;
HXDLIN( 192)										int this60 = ((this57 >> 8) & 255);
HXDLIN( 192)										if ((this60 == 0)) {
HXLINE( 192)											g13 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											g13 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float b14;
HXDLIN( 192)										int this61 = (this57 & 255);
HXDLIN( 192)										if ((this61 == 0)) {
HXLINE( 192)											b14 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											b14 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float a23;
HXDLIN( 192)										int this62 = ((color >> 24) & 255);
HXDLIN( 192)										if ((this62 == 0)) {
HXLINE( 192)											a23 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											a23 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float r23;
HXDLIN( 192)										int this63 = ((color >> 16) & 255);
HXDLIN( 192)										if ((this63 == 0)) {
HXLINE( 192)											r23 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											r23 = (( (Float)(this63) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float g23;
HXDLIN( 192)										int this64 = ((color >> 8) & 255);
HXDLIN( 192)										if ((this64 == 0)) {
HXLINE( 192)											g23 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											g23 = (( (Float)(this64) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float b24;
HXDLIN( 192)										int this65 = (color & 255);
HXDLIN( 192)										if ((this65 == 0)) {
HXLINE( 192)											b24 = ((Float)0.);
            										}
            										else {
HXLINE( 192)											b24 = (( (Float)(this65) ) / ( (Float)(255) ));
            										}
HXDLIN( 192)										Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 192)										int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 192)										int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 192)										int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 192)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 192)										int blended3 = ((((a10 << 24) | (r5 << 16)) | (g5 << 8)) | b15);
HXDLIN( 192)										{
HXLINE( 192)											int _hx_tmp14;
HXDLIN( 192)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)												_hx_tmp14 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXLINE( 192)												_hx_tmp14 = blended3;
            											}
HXDLIN( 192)											::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp14);
            										}
            									}
            									else {
HXLINE( 192)										::Dynamic this66 = pixelImage->image;
HXDLIN( 192)										int index9;
HXDLIN( 192)										if (pixelImage->useVirtualPos) {
HXLINE( 192)											index9 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x7) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 192)											index9 = ::Std_obj::_hx_int(( (Float)(((y7 * pixelImage->width) + x7)) ));
            										}
HXDLIN( 192)										int _hx_tmp15;
HXDLIN( 192)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 192)											_hx_tmp15 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            										}
            										else {
HXLINE( 192)											_hx_tmp15 = c9;
            										}
HXDLIN( 192)										::iterMagic::Iimg_obj::set(this66,index9,_hx_tmp15);
            									}
            								}
HXLINE(  73)								found1 = true;
            							}
            							else {
HXLINE( 192)								if (found1) {
HXLINE( 192)									goto _hx_goto_326;
            								}
            							}
            						}
            					}
            					_hx_goto_326:;
            				}
            			}
            		}
HXDLIN( 192)		 ::pi_xy::iter::IntIterStart v_yIter31;
HXDLIN( 192)		 ::pi_xy::iter::IntIterStart v_xIter31;
HXDLIN( 192)		int v_undoY1;
HXDLIN( 192)		int v_undoX1;
HXDLIN( 192)		Float v_ty1;
HXDLIN( 192)		Float v_tx1;
HXDLIN( 192)		Float v_t01;
HXDLIN( 192)		Float v_sy1;
HXDLIN( 192)		Float v_sx1;
HXDLIN( 192)		Float v_s01;
HXDLIN( 192)		Float v_A1;
HXDLIN( 192)		Float ax2 = bx;
HXDLIN( 192)		Float ay2 = by;
HXDLIN( 192)		 ::pi_xy::ImageStruct v_undoImage1 = null();
HXDLIN( 192)		Float bx4 = bx3;
HXDLIN( 192)		Float by4 = by3;
HXDLIN( 192)		Float cx4 = cx3;
HXDLIN( 192)		Float cy4 = cy3;
HXDLIN( 192)		bool adjustWinding3 = (((((ax2 * by4) - (bx4 * ay2)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay2) - (ax2 * cy4))) > 0);
HXDLIN( 192)		if (!(adjustWinding3)) {
HXLINE( 192)			Float bx_3 = bx4;
HXDLIN( 192)			Float by_3 = by4;
HXLINE(  24)			bx4 = cx4;
HXLINE(  25)			by4 = cy4;
HXLINE(  26)			cx4 = bx_3;
HXLINE(  27)			cy4 = by_3;
            		}
HXLINE( 192)		Float v_ax1 = ax2;
HXDLIN( 192)		Float v_ay1 = ay2;
HXDLIN( 192)		Float v_bx1 = bx4;
HXDLIN( 192)		Float v_by1 = by4;
HXDLIN( 192)		Float v_cx1 = cx4;
HXDLIN( 192)		Float v_cy1 = cy4;
HXDLIN( 192)		bool v_preCalculated1 = true;
HXDLIN( 192)		{
HXLINE( 192)			v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN( 192)			v_sx1 = (v_cy1 - v_ay1);
HXDLIN( 192)			v_sy1 = (v_ax1 - v_cx1);
HXDLIN( 192)			v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN( 192)			v_tx1 = (v_ay1 - v_by1);
HXDLIN( 192)			v_ty1 = (v_bx1 - v_ax1);
HXDLIN( 192)			v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN( 192)			Float a15 = v_ax1;
HXDLIN( 192)			Float b16 = v_bx1;
HXDLIN( 192)			Float c10 = v_cx1;
HXDLIN( 192)			if ((a15 > b16)) {
HXLINE( 192)				if ((a15 > c10)) {
HXLINE( 192)					int min12;
HXDLIN( 192)					if ((b16 > c10)) {
HXLINE( 192)						min12 = ::Math_obj::floor(c10);
            					}
            					else {
HXLINE( 192)						min12 = ::Math_obj::floor(b16);
            					}
HXDLIN( 192)					int ii_min24 = min12;
HXDLIN( 192)					int ii_max24 = ::Math_obj::ceil(a15);
HXDLIN( 192)					v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            				}
            				else {
HXLINE( 192)					int ii_min25 = ::Math_obj::floor(b16);
HXDLIN( 192)					int ii_max25 = ::Math_obj::ceil(c10);
HXDLIN( 192)					v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            				}
            			}
            			else {
HXLINE( 192)				if ((b16 > c10)) {
HXLINE( 192)					int min13;
HXDLIN( 192)					if ((a15 > c10)) {
HXLINE( 192)						min13 = ::Math_obj::floor(c10);
            					}
            					else {
HXLINE( 192)						min13 = ::Math_obj::ceil(a15);
            					}
HXDLIN( 192)					int ii_min26 = min13;
HXDLIN( 192)					int ii_max26 = ::Math_obj::ceil(b16);
HXDLIN( 192)					v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            				}
            				else {
HXLINE( 192)					int ii_min27 = ::Math_obj::floor(a15);
HXDLIN( 192)					int ii_max27 = ::Math_obj::ceil(c10);
HXDLIN( 192)					v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            				}
            			}
HXDLIN( 192)			Float a16 = v_ay1;
HXDLIN( 192)			Float b17 = v_by1;
HXDLIN( 192)			Float c11 = v_cy1;
HXDLIN( 192)			if ((a16 > b17)) {
HXLINE( 192)				if ((a16 > c11)) {
HXLINE( 192)					int min14;
HXDLIN( 192)					if ((b17 > c11)) {
HXLINE( 192)						min14 = ::Math_obj::floor(c11);
            					}
            					else {
HXLINE( 192)						min14 = ::Math_obj::floor(b17);
            					}
HXDLIN( 192)					int ii_min28 = min14;
HXDLIN( 192)					int ii_max28 = ::Math_obj::ceil(a16);
HXDLIN( 192)					v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            				}
            				else {
HXLINE( 192)					int ii_min29 = ::Math_obj::floor(b17);
HXDLIN( 192)					int ii_max29 = ::Math_obj::ceil(c11);
HXDLIN( 192)					v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            				}
            			}
            			else {
HXLINE( 192)				if ((b17 > c11)) {
HXLINE( 192)					int min15;
HXDLIN( 192)					if ((a16 > c11)) {
HXLINE( 192)						min15 = ::Math_obj::floor(c11);
            					}
            					else {
HXLINE( 192)						min15 = ::Math_obj::ceil(a16);
            					}
HXDLIN( 192)					int ii_min30 = min15;
HXDLIN( 192)					int ii_max30 = ::Math_obj::ceil(b17);
HXDLIN( 192)					v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            				}
            				else {
HXLINE( 192)					int ii_min31 = ::Math_obj::floor(a16);
HXDLIN( 192)					int ii_max31 = ::Math_obj::ceil(c11);
HXDLIN( 192)					v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            				}
            			}
            		}
HXDLIN( 192)		if (hasUndo1) {
HXLINE( 192)			v_undoImage1 = undoImage3;
HXDLIN( 192)			v_undoX1 = xIter31->start;
HXDLIN( 192)			v_undoY1 = yIter31->start;
            		}
HXDLIN( 192)		 ::pi_xy::algo::HitQuad v4 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 192)		 ::pi_xy::algo::HitQuad hitQuad = v4;
HXLINE( 193)		Float cx5 = h2;
HXLINE( 194)		Float cy5 = radius2;
HXLINE( 195)		Float bx5 = h2;
HXLINE( 196)		Float by5 = -(radius2);
HXLINE( 198)		Float dx3 = hSmall;
HXLINE( 199)		Float dy3 = radius2;
HXLINE( 200)		Float ax3 = hSmall;
HXLINE( 201)		Float ay3 = -(radius2);
HXLINE( 203)		temp = (px + ((bx5 * cos) - (by5 * sin)));
HXLINE( 204)		by5 = (py + ((by5 * cos) + (bx5 * sin)));
HXLINE( 205)		bx5 = temp;
HXLINE( 206)		temp = (px + ((cx5 * cos) - (cy5 * sin)));
HXLINE( 207)		cy5 = (py + ((cy5 * cos) + (cx5 * sin)));
HXLINE( 208)		cx5 = temp;
HXLINE( 210)		temp = (px + ((ax3 * cos) - (ay3 * sin)));
HXLINE( 211)		ay3 = (py + ((ay3 * cos) + (ax3 * sin)));
HXLINE( 212)		ax3 = temp;
HXLINE( 214)		temp = (px + ((dx3 * cos) - (dy3 * sin)));
HXLINE( 215)		dy3 = (py + ((dy3 * cos) + (dx3 * sin)));
HXLINE( 216)		dx3 = temp;
HXLINE( 218)		Float bx6 = bx5;
HXDLIN( 218)		Float by6 = by5;
HXDLIN( 218)		Float cx6 = cx5;
HXDLIN( 218)		Float cy6 = cy5;
HXDLIN( 218)		bool hasUndo2 = false;
HXDLIN( 218)		bool adjustWinding4 = (((((qx * by6) - (bx6 * qy)) + ((bx6 * cy6) - (cx6 * by6))) + ((cx6 * qy) - (qx * cy6))) > 0);
HXDLIN( 218)		if (!(adjustWinding4)) {
HXLINE( 218)			Float bx_4 = bx6;
HXDLIN( 218)			Float by_4 = by6;
HXLINE(  25)			bx6 = cx6;
HXLINE(  26)			by6 = cy6;
HXLINE(  27)			cx6 = bx_4;
HXLINE(  28)			cy6 = by_4;
            		}
HXLINE( 218)		Float s02 = ((qy * cx6) - (qx * cy6));
HXDLIN( 218)		Float sx2 = (cy6 - qy);
HXDLIN( 218)		Float sy2 = (qx - cx6);
HXDLIN( 218)		Float t02 = ((qx * by6) - (qy * bx6));
HXDLIN( 218)		Float tx2 = (qy - by6);
HXDLIN( 218)		Float ty2 = (bx6 - qx);
HXDLIN( 218)		Float A2 = ((((-(by6) * cx6) + (qy * (-(bx6) + cx6))) + (qx * (by6 - cy6))) + (bx6 * cy6));
HXDLIN( 218)		 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 218)		if ((qx > bx6)) {
HXLINE( 218)			if ((qx > cx6)) {
HXLINE( 218)				int min16;
HXDLIN( 218)				if ((bx6 > cx6)) {
HXLINE( 218)					min16 = ::Math_obj::floor(cx6);
            				}
            				else {
HXLINE( 218)					min16 = ::Math_obj::floor(bx6);
            				}
HXDLIN( 218)				int ii_min32 = min16;
HXDLIN( 218)				int ii_max32 = ::Math_obj::ceil(qx);
HXDLIN( 218)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            			}
            			else {
HXLINE( 218)				int ii_min33 = ::Math_obj::floor(bx6);
HXDLIN( 218)				int ii_max33 = ::Math_obj::ceil(cx6);
HXDLIN( 218)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            			}
            		}
            		else {
HXLINE( 218)			if ((bx6 > cx6)) {
HXLINE( 218)				int min17;
HXDLIN( 218)				if ((qx > cx6)) {
HXLINE( 218)					min17 = ::Math_obj::floor(cx6);
            				}
            				else {
HXLINE( 218)					min17 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 218)				int ii_min34 = min17;
HXDLIN( 218)				int ii_max34 = ::Math_obj::ceil(bx6);
HXDLIN( 218)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            			}
            			else {
HXLINE( 218)				int ii_min35 = ::Math_obj::floor(qx);
HXDLIN( 218)				int ii_max35 = ::Math_obj::ceil(cx6);
HXDLIN( 218)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            			}
            		}
HXDLIN( 218)		 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 218)		if ((qy > by6)) {
HXLINE( 218)			if ((qy > cy6)) {
HXLINE( 218)				int min18;
HXDLIN( 218)				if ((by6 > cy6)) {
HXLINE( 218)					min18 = ::Math_obj::floor(cy6);
            				}
            				else {
HXLINE( 218)					min18 = ::Math_obj::floor(by6);
            				}
HXDLIN( 218)				int ii_min36 = min18;
HXDLIN( 218)				int ii_max36 = ::Math_obj::ceil(qy);
HXDLIN( 218)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            			}
            			else {
HXLINE( 218)				int ii_min37 = ::Math_obj::floor(by6);
HXDLIN( 218)				int ii_max37 = ::Math_obj::ceil(cy6);
HXDLIN( 218)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            			}
            		}
            		else {
HXLINE( 218)			if ((by6 > cy6)) {
HXLINE( 218)				int min19;
HXDLIN( 218)				if ((qy > cy6)) {
HXLINE( 218)					min19 = ::Math_obj::floor(cy6);
            				}
            				else {
HXLINE( 218)					min19 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 218)				int ii_min38 = min19;
HXDLIN( 218)				int ii_max38 = ::Math_obj::ceil(by6);
HXDLIN( 218)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            			}
            			else {
HXLINE( 218)				int ii_min39 = ::Math_obj::floor(qy);
HXDLIN( 218)				int ii_max39 = ::Math_obj::ceil(cy6);
HXDLIN( 218)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            			}
            		}
HXDLIN( 218)		 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 218)		if (hasUndo2) {
HXLINE( 218)			int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 218)			int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 218)			 ::Dynamic imageType2 = null();
HXDLIN( 218)			 ::pi_xy::ImageStruct this67 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 218)			if (::hx::IsNull( imageType2 )) {
HXLINE(  54)				imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 218)			::Dynamic undoImage7;
HXDLIN( 218)			switch((int)(( (int)(imageType2) ))){
            				case (int)0: {
HXLINE( 218)					 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 218)					 ::iterMagic::BytesImg b18 = byt2;
HXDLIN( 218)					{
HXLINE( 218)						b18->width = width2;
HXDLIN( 218)						b18->height = height2;
HXDLIN( 218)						b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 218)						b18->data = ::haxe::io::Bytes_obj::alloc((b18->length * 4));
HXDLIN( 218)						{
HXLINE( 218)							int len4 = b18->length;
HXDLIN( 218)							int w2 = 0;
HXDLIN( 218)							{
HXLINE( 218)								int _g40 = 0;
HXDLIN( 218)								int _g41 = b18->height;
HXDLIN( 218)								while((_g40 < _g41)){
HXLINE( 218)									_g40 = (_g40 + 1);
HXDLIN( 218)									int y8 = (_g40 - 1);
HXDLIN( 218)									{
HXLINE( 218)										int _g42 = 0;
HXDLIN( 218)										int _g43 = b18->width;
HXDLIN( 218)										while((_g42 < _g43)){
HXLINE( 218)											_g42 = (_g42 + 1);
HXDLIN( 218)											int x8 = (_g42 - 1);
HXDLIN( 218)											{
HXLINE( 218)												w2 = (w2 + 1);
HXDLIN( 218)												b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 218)											{
HXLINE( 218)												w2 = (w2 + 1);
HXDLIN( 218)												b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 218)											{
HXLINE( 218)												w2 = (w2 + 1);
HXDLIN( 218)												b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 218)											{
HXLINE( 218)												w2 = (w2 + 1);
HXDLIN( 218)												b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 218)					undoImage7 = b18;
            				}
            				break;
            				case (int)1: {
HXLINE( 218)					 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 218)					 ::iterMagic::ArrIntImg a17 = arrI2;
HXDLIN( 218)					{
HXLINE( 218)						a17->width = width2;
HXDLIN( 218)						a17->height = height2;
HXDLIN( 218)						a17->data = ::Array_obj< int >::__new(0);
HXDLIN( 218)						a17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 218)						{
HXLINE( 218)							int _g44 = 0;
HXDLIN( 218)							int _g45 = a17->length;
HXDLIN( 218)							while((_g44 < _g45)){
HXLINE( 218)								_g44 = (_g44 + 1);
HXDLIN( 218)								int i12 = (_g44 - 1);
HXDLIN( 218)								a17->data[i12] = 0;
            							}
            						}
            					}
HXDLIN( 218)					undoImage7 = a17;
            				}
            				break;
            				case (int)2: {
HXLINE( 218)					 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 218)					 ::iterMagic::U32ArrImg b19 = u32a2;
HXDLIN( 218)					{
HXLINE( 218)						b19->width = width2;
HXDLIN( 218)						b19->height = height2;
HXDLIN( 218)						b19->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 218)						int size2 = (b19->length * 4);
HXDLIN( 218)						b19->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 218)						{
HXLINE( 218)							int _g46 = 0;
HXDLIN( 218)							int _g47 = b19->length;
HXDLIN( 218)							while((_g46 < _g47)){
HXLINE( 218)								_g46 = (_g46 + 1);
HXDLIN( 218)								int i13 = (_g46 - 1);
HXDLIN( 218)								{
HXLINE( 218)									 ::haxe::io::ArrayBufferViewImpl this68 = b19->data;
HXDLIN( 218)									bool undoImage8;
HXDLIN( 218)									if ((i13 >= 0)) {
HXLINE( 218)										undoImage8 = (i13 < (this68->byteLength >> 2));
            									}
            									else {
HXLINE( 218)										undoImage8 = false;
            									}
HXDLIN( 218)									if (undoImage8) {
HXLINE( 218)										 ::haxe::io::Bytes _this2 = this68->bytes;
HXDLIN( 218)										int pos2 = ((i13 << 2) + this68->byteOffset);
HXDLIN( 218)										_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 218)										_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 218)										_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 218)										_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 218)					undoImage7 = b19;
            				}
            				break;
            				case (int)3: {
HXLINE( 218)					 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 218)					 ::iterMagic::VecIntImg v5 = vec2;
HXDLIN( 218)					{
HXLINE( 218)						v5->width = width2;
HXDLIN( 218)						v5->height = height2;
HXDLIN( 218)						v5->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 218)						v5->data = ::Array_obj< int >::__new(v5->length);
HXDLIN( 218)						{
HXLINE( 218)							int _g48 = 0;
HXDLIN( 218)							int _g49 = v5->length;
HXDLIN( 218)							while((_g48 < _g49)){
HXLINE( 218)								_g48 = (_g48 + 1);
HXDLIN( 218)								int i14 = (_g48 - 1);
HXDLIN( 218)								v5->data->__unsafe_set(i14,0);
            							}
            						}
            					}
HXDLIN( 218)					undoImage7 = v5;
            				}
            				break;
            				case (int)4: {
HXLINE( 218)					 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 218)					 ::iterMagic::StackIntImg b20 = sInt2;
HXDLIN( 218)					{
HXLINE( 218)						b20->width = width2;
HXDLIN( 218)						b20->height = height2;
HXDLIN( 218)						b20->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 218)						b20->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 218)						{
HXLINE( 218)							int len5 = b20->length;
HXDLIN( 218)							 ::haxe::ds::GenericStack_Int d2 = b20->data;
HXDLIN( 218)							if (::hx::IsNull( d2->head )) {
HXLINE( 218)								int _g50 = 0;
HXDLIN( 218)								int _g51 = len5;
HXDLIN( 218)								while((_g50 < _g51)){
HXLINE( 218)									_g50 = (_g50 + 1);
HXDLIN( 218)									int i15 = (_g50 - 1);
HXDLIN( 218)									d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            								}
            							}
            							else {
HXLINE( 218)								int _g52 = 0;
HXDLIN( 218)								int _g53 = len5;
HXDLIN( 218)								while((_g52 < _g53)){
HXLINE( 218)									_g52 = (_g52 + 1);
HXDLIN( 218)									int i16 = (_g52 - 1);
HXDLIN( 218)									{
HXLINE( 218)										 ::haxe::ds::GenericCell_Int l2 = b20->data->head;
HXDLIN( 218)										 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 218)										{
HXLINE( 218)											int _g54 = 0;
HXDLIN( 218)											int _g55 = i16;
HXDLIN( 218)											while((_g54 < _g55)){
HXLINE( 218)												_g54 = (_g54 + 1);
HXDLIN( 218)												int i17 = (_g54 - 1);
HXLINE( 345)												prev2 = l2;
HXLINE( 346)												l2 = l2->next;
            											}
            										}
HXLINE( 218)										if (::hx::IsNull( prev2 )) {
HXLINE( 218)											b20->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 218)											l2 = null();
            										}
            										else {
HXLINE( 218)											prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 218)											l2 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 218)					undoImage7 = b20;
            				}
            				break;
            			}
HXDLIN( 218)			this67->image = undoImage7;
HXDLIN( 218)			this67->width = width2;
HXDLIN( 218)			this67->height = height2;
HXDLIN( 218)			this67->imageType = ( (int)(imageType2) );
HXDLIN( 218)			undoImage6 = this67;
HXDLIN( 218)			{
HXLINE( 218)				int rectLeft2 = xIter32->start;
HXDLIN( 218)				int rectTop2 = yIter32->start;
HXDLIN( 218)				int rectRight2 = xIter32->max;
HXDLIN( 218)				bool forceClear2 = false;
HXDLIN( 218)				{
HXLINE( 218)					int _g56 = rectTop2;
HXDLIN( 218)					int _g57 = yIter32->max;
HXDLIN( 218)					while((_g56 < _g57)){
HXLINE( 218)						_g56 = (_g56 + 1);
HXDLIN( 218)						int dy4 = (_g56 - 1);
HXDLIN( 218)						{
HXLINE( 218)							int _g58 = rectLeft2;
HXDLIN( 218)							int _g59 = rectRight2;
HXDLIN( 218)							while((_g58 < _g59)){
HXLINE( 218)								_g58 = (_g58 + 1);
HXDLIN( 218)								int dx4 = (_g58 - 1);
HXDLIN( 218)								::Dynamic this69 = pixelImage->image;
HXDLIN( 218)								int index10;
HXDLIN( 218)								if (pixelImage->useVirtualPos) {
HXLINE( 218)									index10 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 218)									index10 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            								}
HXDLIN( 218)								int c12 = ::iterMagic::Iimg_obj::get(this69,index10);
HXDLIN( 218)								int col2;
HXDLIN( 218)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 218)									col2 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            								}
            								else {
HXLINE( 218)									col2 = c12;
            								}
HXDLIN( 218)								bool _hx_tmp16;
HXDLIN( 218)								if (pixelImage->useMask) {
HXLINE( 218)									_hx_tmp16 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 218)									_hx_tmp16 = false;
            								}
HXDLIN( 218)								if (_hx_tmp16) {
HXLINE( 218)									 ::pi_xy::ImageStruct this70 = pixelImage->mask;
HXDLIN( 218)									::Dynamic this71 = this70->image;
HXDLIN( 218)									int index11;
HXDLIN( 218)									if (this70->useVirtualPos) {
HXLINE( 218)										index11 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this70->virtualY) * ( (Float)(this70->width) )) + dx4) - this70->virtualX));
            									}
            									else {
HXLINE( 218)										index11 = ::Std_obj::_hx_int(( (Float)(((dy4 * this70->width) + dx4)) ));
            									}
HXDLIN( 218)									int c13 = ::iterMagic::Iimg_obj::get(this71,index11);
HXDLIN( 218)									int v6;
HXDLIN( 218)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 218)										v6 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            									}
            									else {
HXLINE( 218)										v6 = c13;
            									}
HXDLIN( 218)									int maskPixel2 = v6;
HXDLIN( 218)									int this72 = col2;
HXDLIN( 218)									if ((maskPixel2 == 0)) {
HXLINE( 218)										col2 = this72;
            									}
            									else {
HXLINE( 218)										Float m02;
HXDLIN( 218)										int this73 = ((maskPixel2 >> 24) & 255);
HXDLIN( 218)										if ((this73 == 0)) {
HXLINE( 218)											m02 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											m02 = (( (Float)(this73) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float m12;
HXDLIN( 218)										int this74 = ((maskPixel2 >> 16) & 255);
HXDLIN( 218)										if ((this74 == 0)) {
HXLINE( 218)											m12 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											m12 = (( (Float)(this74) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float m22;
HXDLIN( 218)										int this75 = ((maskPixel2 >> 8) & 255);
HXDLIN( 218)										if ((this75 == 0)) {
HXLINE( 218)											m22 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											m22 = (( (Float)(this75) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float m32;
HXDLIN( 218)										int this76 = (maskPixel2 & 255);
HXDLIN( 218)										if ((this76 == 0)) {
HXLINE( 218)											m32 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											m32 = (( (Float)(this76) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this72 >> 24) & 255)) )));
HXDLIN( 218)										int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this72 >> 16) & 255)) )));
HXDLIN( 218)										int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this72 >> 8) & 255)) )));
HXDLIN( 218)										int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this72 & 255)) )));
HXDLIN( 218)										col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 218)								if ((col2 != 0)) {
HXLINE( 218)									int x9 = (dx4 - rectLeft2);
HXDLIN( 218)									int y9 = (dy4 - rectTop2);
HXDLIN( 218)									int c14 = col2;
HXDLIN( 218)									bool _hx_tmp17;
HXDLIN( 218)									if ((((c14 >> 24) & 255) < 254)) {
HXLINE( 218)										_hx_tmp17 = undoImage6->transparent;
            									}
            									else {
HXLINE( 218)										_hx_tmp17 = false;
            									}
HXDLIN( 218)									if (_hx_tmp17) {
HXLINE( 218)										int location4;
HXDLIN( 218)										if (undoImage6->useVirtualPos) {
HXLINE( 218)											location4 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 218)											location4 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            										}
HXDLIN( 218)										int this77 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 218)										int this78;
HXDLIN( 218)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 218)											this78 = ((((((this77 >> 24) & 255) << 24) | ((this77 & 255) << 16)) | (((this77 >> 8) & 255) << 8)) | ((this77 >> 16) & 255));
            										}
            										else {
HXLINE( 218)											this78 = this77;
            										}
HXDLIN( 218)										Float a18;
HXDLIN( 218)										int this79 = ((this78 >> 24) & 255);
HXDLIN( 218)										if ((this79 == 0)) {
HXLINE( 218)											a18 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											a18 = (( (Float)(this79) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float r14;
HXDLIN( 218)										int this80 = ((this78 >> 16) & 255);
HXDLIN( 218)										if ((this80 == 0)) {
HXLINE( 218)											r14 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											r14 = (( (Float)(this80) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float g14;
HXDLIN( 218)										int this81 = ((this78 >> 8) & 255);
HXDLIN( 218)										if ((this81 == 0)) {
HXLINE( 218)											g14 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											g14 = (( (Float)(this81) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float b110;
HXDLIN( 218)										int this82 = (this78 & 255);
HXDLIN( 218)										if ((this82 == 0)) {
HXLINE( 218)											b110 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											b110 = (( (Float)(this82) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float a24;
HXDLIN( 218)										int this83 = ((col2 >> 24) & 255);
HXDLIN( 218)										if ((this83 == 0)) {
HXLINE( 218)											a24 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											a24 = (( (Float)(this83) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float r24;
HXDLIN( 218)										int this84 = ((col2 >> 16) & 255);
HXDLIN( 218)										if ((this84 == 0)) {
HXLINE( 218)											r24 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											r24 = (( (Float)(this84) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float g24;
HXDLIN( 218)										int this85 = ((col2 >> 8) & 255);
HXDLIN( 218)										if ((this85 == 0)) {
HXLINE( 218)											g24 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											g24 = (( (Float)(this85) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float b25;
HXDLIN( 218)										int this86 = (col2 & 255);
HXDLIN( 218)										if ((this86 == 0)) {
HXLINE( 218)											b25 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											b25 = (( (Float)(this86) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float a34 = (a18 * (( (Float)(1) ) - a24));
HXDLIN( 218)										int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 218)										int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 218)										int b26 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a34) + (b25 * a24))));
HXDLIN( 218)										int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 218)										int blended4 = ((((a19 << 24) | (r6 << 16)) | (g6 << 8)) | b26);
HXDLIN( 218)										{
HXLINE( 218)											int _hx_tmp18;
HXDLIN( 218)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 218)												_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            											}
            											else {
HXLINE( 218)												_hx_tmp18 = blended4;
            											}
HXDLIN( 218)											::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            										}
            									}
            									else {
HXLINE( 218)										::Dynamic this87 = undoImage6->image;
HXDLIN( 218)										int index12;
HXDLIN( 218)										if (undoImage6->useVirtualPos) {
HXLINE( 218)											index12 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 218)											index12 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            										}
HXDLIN( 218)										int _hx_tmp19;
HXDLIN( 218)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 218)											_hx_tmp19 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            										}
            										else {
HXLINE( 218)											_hx_tmp19 = c14;
            										}
HXDLIN( 218)										::iterMagic::Iimg_obj::set(this87,index12,_hx_tmp19);
            									}
            								}
            								else {
HXLINE( 218)									if (forceClear2) {
HXLINE( 218)										::Dynamic this88 = undoImage6->image;
HXDLIN( 218)										int x10 = (dx4 - rectLeft2);
HXDLIN( 218)										int y10 = (dy4 - rectTop2);
HXDLIN( 218)										int index13;
HXDLIN( 218)										if (undoImage6->useVirtualPos) {
HXLINE( 218)											index13 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x10) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 218)											index13 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage6->width) + x10)) ));
            										}
HXDLIN( 218)										::iterMagic::Iimg_obj::set(this88,index13,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 218)		bool found2 = false;
HXDLIN( 218)		Float s2 = ((Float)0.);
HXDLIN( 218)		Float t2 = ((Float)0.);
HXDLIN( 218)		Float sxx2 = ((Float)0.);
HXDLIN( 218)		Float txx2 = ((Float)0.);
HXDLIN( 218)		{
HXLINE( 218)			int _g_min4 = xIter32->start;
HXDLIN( 218)			int _g_max4 = xIter32->max;
HXDLIN( 218)			while((_g_min4 < _g_max4)){
HXLINE( 218)				_g_min4 = (_g_min4 + 1);
HXDLIN( 218)				int x11 = (_g_min4 - 1);
HXLINE(  60)				sxx2 = (sx2 * ( (Float)(x11) ));
HXLINE(  61)				txx2 = (tx2 * ( (Float)(x11) ));
HXLINE(  62)				found2 = false;
HXLINE( 218)				{
HXLINE( 218)					int _g_min5 = yIter32->start;
HXDLIN( 218)					int _g_max5 = yIter32->max;
HXDLIN( 218)					while((_g_min5 < _g_max5)){
HXLINE( 218)						_g_min5 = (_g_min5 + 1);
HXDLIN( 218)						int y11 = (_g_min5 - 1);
HXLINE(  64)						s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y11) )));
HXLINE(  65)						t2 = ((t02 + txx2) + (ty2 * ( (Float)(y11) )));
HXLINE( 218)						bool _hx_tmp20;
HXDLIN( 218)						if (!((s2 <= 0))) {
HXLINE( 218)							_hx_tmp20 = (t2 <= 0);
            						}
            						else {
HXLINE( 218)							_hx_tmp20 = true;
            						}
HXDLIN( 218)						if (_hx_tmp20) {
HXLINE( 218)							if (found2) {
HXLINE( 218)								goto _hx_goto_338;
            							}
            						}
            						else {
HXLINE( 218)							if (((s2 + t2) < A2)) {
HXLINE( 218)								{
HXLINE( 218)									int c15 = color;
HXDLIN( 218)									bool _hx_tmp21;
HXDLIN( 218)									if ((((c15 >> 24) & 255) < 254)) {
HXLINE( 218)										_hx_tmp21 = pixelImage->transparent;
            									}
            									else {
HXLINE( 218)										_hx_tmp21 = false;
            									}
HXDLIN( 218)									if (_hx_tmp21) {
HXLINE( 218)										int location5;
HXDLIN( 218)										if (pixelImage->useVirtualPos) {
HXLINE( 218)											location5 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x11) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 218)											location5 = ::Std_obj::_hx_int(( (Float)(((y11 * pixelImage->width) + x11)) ));
            										}
HXDLIN( 218)										int this89 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN( 218)										int this90;
HXDLIN( 218)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 218)											this90 = ((((((this89 >> 24) & 255) << 24) | ((this89 & 255) << 16)) | (((this89 >> 8) & 255) << 8)) | ((this89 >> 16) & 255));
            										}
            										else {
HXLINE( 218)											this90 = this89;
            										}
HXDLIN( 218)										Float a110;
HXDLIN( 218)										int this91 = ((this90 >> 24) & 255);
HXDLIN( 218)										if ((this91 == 0)) {
HXLINE( 218)											a110 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											a110 = (( (Float)(this91) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float r15;
HXDLIN( 218)										int this92 = ((this90 >> 16) & 255);
HXDLIN( 218)										if ((this92 == 0)) {
HXLINE( 218)											r15 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											r15 = (( (Float)(this92) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float g15;
HXDLIN( 218)										int this93 = ((this90 >> 8) & 255);
HXDLIN( 218)										if ((this93 == 0)) {
HXLINE( 218)											g15 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											g15 = (( (Float)(this93) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float b111;
HXDLIN( 218)										int this94 = (this90 & 255);
HXDLIN( 218)										if ((this94 == 0)) {
HXLINE( 218)											b111 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											b111 = (( (Float)(this94) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float a25;
HXDLIN( 218)										int this95 = ((color >> 24) & 255);
HXDLIN( 218)										if ((this95 == 0)) {
HXLINE( 218)											a25 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											a25 = (( (Float)(this95) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float r25;
HXDLIN( 218)										int this96 = ((color >> 16) & 255);
HXDLIN( 218)										if ((this96 == 0)) {
HXLINE( 218)											r25 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											r25 = (( (Float)(this96) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float g25;
HXDLIN( 218)										int this97 = ((color >> 8) & 255);
HXDLIN( 218)										if ((this97 == 0)) {
HXLINE( 218)											g25 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											g25 = (( (Float)(this97) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float b27;
HXDLIN( 218)										int this98 = (color & 255);
HXDLIN( 218)										if ((this98 == 0)) {
HXLINE( 218)											b27 = ((Float)0.);
            										}
            										else {
HXLINE( 218)											b27 = (( (Float)(this98) ) / ( (Float)(255) ));
            										}
HXDLIN( 218)										Float a35 = (a110 * (( (Float)(1) ) - a25));
HXDLIN( 218)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 218)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 218)										int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a35) + (b27 * a25))));
HXDLIN( 218)										int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 218)										int blended5 = ((((a20 << 24) | (r7 << 16)) | (g7 << 8)) | b28);
HXDLIN( 218)										{
HXLINE( 218)											int _hx_tmp22;
HXDLIN( 218)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 218)												_hx_tmp22 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            											}
            											else {
HXLINE( 218)												_hx_tmp22 = blended5;
            											}
HXDLIN( 218)											::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp22);
            										}
            									}
            									else {
HXLINE( 218)										::Dynamic this99 = pixelImage->image;
HXDLIN( 218)										int index14;
HXDLIN( 218)										if (pixelImage->useVirtualPos) {
HXLINE( 218)											index14 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x11) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 218)											index14 = ::Std_obj::_hx_int(( (Float)(((y11 * pixelImage->width) + x11)) ));
            										}
HXDLIN( 218)										int _hx_tmp23;
HXDLIN( 218)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 218)											_hx_tmp23 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            										}
            										else {
HXLINE( 218)											_hx_tmp23 = c15;
            										}
HXDLIN( 218)										::iterMagic::Iimg_obj::set(this99,index14,_hx_tmp23);
            									}
            								}
HXLINE(  73)								found2 = true;
            							}
            							else {
HXLINE( 218)								if (found2) {
HXLINE( 218)									goto _hx_goto_338;
            								}
            							}
            						}
            					}
            					_hx_goto_338:;
            				}
            			}
            		}
HXDLIN( 218)		 ::pi_xy::algo::HitTri hitTriTop;
HXDLIN( 218)		if ((hasHit == true)) {
HXLINE( 218)			 ::pi_xy::algo::HitTri v7 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx6,by6,cx6,cy6,true);
HXDLIN( 218)			if (hasUndo2) {
HXLINE( 218)				v7->undoImage = undoImage6;
HXDLIN( 218)				v7->undoX = xIter32->start;
HXDLIN( 218)				v7->undoY = yIter32->start;
            			}
HXDLIN( 218)			hitTriTop = v7;
            		}
            		else {
HXLINE( 218)			hitTriTop = null();
            		}
HXLINE( 219)		Float bx7 = ax3;
HXDLIN( 219)		Float by7 = ay3;
HXDLIN( 219)		Float cx7 = dx3;
HXDLIN( 219)		Float cy7 = dy3;
HXDLIN( 219)		bool hasUndo3 = false;
HXDLIN( 219)		bool adjustWinding5 = (((((px * by7) - (bx7 * py)) + ((bx7 * cy7) - (cx7 * by7))) + ((cx7 * py) - (px * cy7))) > 0);
HXDLIN( 219)		if (!(adjustWinding5)) {
HXLINE( 219)			Float bx_5 = bx7;
HXDLIN( 219)			Float by_5 = by7;
HXLINE(  25)			bx7 = cx7;
HXLINE(  26)			by7 = cy7;
HXLINE(  27)			cx7 = bx_5;
HXLINE(  28)			cy7 = by_5;
            		}
HXLINE( 219)		Float s03 = ((py * cx7) - (px * cy7));
HXDLIN( 219)		Float sx3 = (cy7 - py);
HXDLIN( 219)		Float sy3 = (px - cx7);
HXDLIN( 219)		Float t03 = ((px * by7) - (py * bx7));
HXDLIN( 219)		Float tx3 = (py - by7);
HXDLIN( 219)		Float ty3 = (bx7 - px);
HXDLIN( 219)		Float A3 = ((((-(by7) * cx7) + (py * (-(bx7) + cx7))) + (px * (by7 - cy7))) + (bx7 * cy7));
HXDLIN( 219)		 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 219)		if ((px > bx7)) {
HXLINE( 219)			if ((px > cx7)) {
HXLINE( 219)				int min20;
HXDLIN( 219)				if ((bx7 > cx7)) {
HXLINE( 219)					min20 = ::Math_obj::floor(cx7);
            				}
            				else {
HXLINE( 219)					min20 = ::Math_obj::floor(bx7);
            				}
HXDLIN( 219)				int ii_min40 = min20;
HXDLIN( 219)				int ii_max40 = ::Math_obj::ceil(px);
HXDLIN( 219)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            			}
            			else {
HXLINE( 219)				int ii_min41 = ::Math_obj::floor(bx7);
HXDLIN( 219)				int ii_max41 = ::Math_obj::ceil(cx7);
HXDLIN( 219)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            			}
            		}
            		else {
HXLINE( 219)			if ((bx7 > cx7)) {
HXLINE( 219)				int min21;
HXDLIN( 219)				if ((px > cx7)) {
HXLINE( 219)					min21 = ::Math_obj::floor(cx7);
            				}
            				else {
HXLINE( 219)					min21 = ::Math_obj::ceil(px);
            				}
HXDLIN( 219)				int ii_min42 = min21;
HXDLIN( 219)				int ii_max42 = ::Math_obj::ceil(bx7);
HXDLIN( 219)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            			}
            			else {
HXLINE( 219)				int ii_min43 = ::Math_obj::floor(px);
HXDLIN( 219)				int ii_max43 = ::Math_obj::ceil(cx7);
HXDLIN( 219)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            			}
            		}
HXDLIN( 219)		 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 219)		if ((py > by7)) {
HXLINE( 219)			if ((py > cy7)) {
HXLINE( 219)				int min22;
HXDLIN( 219)				if ((by7 > cy7)) {
HXLINE( 219)					min22 = ::Math_obj::floor(cy7);
            				}
            				else {
HXLINE( 219)					min22 = ::Math_obj::floor(by7);
            				}
HXDLIN( 219)				int ii_min44 = min22;
HXDLIN( 219)				int ii_max44 = ::Math_obj::ceil(py);
HXDLIN( 219)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            			}
            			else {
HXLINE( 219)				int ii_min45 = ::Math_obj::floor(by7);
HXDLIN( 219)				int ii_max45 = ::Math_obj::ceil(cy7);
HXDLIN( 219)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            			}
            		}
            		else {
HXLINE( 219)			if ((by7 > cy7)) {
HXLINE( 219)				int min23;
HXDLIN( 219)				if ((py > cy7)) {
HXLINE( 219)					min23 = ::Math_obj::floor(cy7);
            				}
            				else {
HXLINE( 219)					min23 = ::Math_obj::ceil(py);
            				}
HXDLIN( 219)				int ii_min46 = min23;
HXDLIN( 219)				int ii_max46 = ::Math_obj::ceil(by7);
HXDLIN( 219)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            			}
            			else {
HXLINE( 219)				int ii_min47 = ::Math_obj::floor(py);
HXDLIN( 219)				int ii_max47 = ::Math_obj::ceil(cy7);
HXDLIN( 219)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            			}
            		}
HXDLIN( 219)		 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 219)		if (hasUndo3) {
HXLINE( 219)			int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 219)			int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 219)			 ::Dynamic imageType3 = null();
HXDLIN( 219)			 ::pi_xy::ImageStruct this100 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 219)			if (::hx::IsNull( imageType3 )) {
HXLINE(  54)				imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 219)			::Dynamic undoImage10;
HXDLIN( 219)			switch((int)(( (int)(imageType3) ))){
            				case (int)0: {
HXLINE( 219)					 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 219)					 ::iterMagic::BytesImg b29 = byt3;
HXDLIN( 219)					{
HXLINE( 219)						b29->width = width3;
HXDLIN( 219)						b29->height = height3;
HXDLIN( 219)						b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 219)						b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN( 219)						{
HXLINE( 219)							int len6 = b29->length;
HXDLIN( 219)							int w3 = 0;
HXDLIN( 219)							{
HXLINE( 219)								int _g60 = 0;
HXDLIN( 219)								int _g61 = b29->height;
HXDLIN( 219)								while((_g60 < _g61)){
HXLINE( 219)									_g60 = (_g60 + 1);
HXDLIN( 219)									int y12 = (_g60 - 1);
HXDLIN( 219)									{
HXLINE( 219)										int _g62 = 0;
HXDLIN( 219)										int _g63 = b29->width;
HXDLIN( 219)										while((_g62 < _g63)){
HXLINE( 219)											_g62 = (_g62 + 1);
HXDLIN( 219)											int x12 = (_g62 - 1);
HXDLIN( 219)											{
HXLINE( 219)												w3 = (w3 + 1);
HXDLIN( 219)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 219)											{
HXLINE( 219)												w3 = (w3 + 1);
HXDLIN( 219)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 219)											{
HXLINE( 219)												w3 = (w3 + 1);
HXDLIN( 219)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 219)											{
HXLINE( 219)												w3 = (w3 + 1);
HXDLIN( 219)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 219)					undoImage10 = b29;
            				}
            				break;
            				case (int)1: {
HXLINE( 219)					 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 219)					 ::iterMagic::ArrIntImg a26 = arrI3;
HXDLIN( 219)					{
HXLINE( 219)						a26->width = width3;
HXDLIN( 219)						a26->height = height3;
HXDLIN( 219)						a26->data = ::Array_obj< int >::__new(0);
HXDLIN( 219)						a26->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 219)						{
HXLINE( 219)							int _g64 = 0;
HXDLIN( 219)							int _g65 = a26->length;
HXDLIN( 219)							while((_g64 < _g65)){
HXLINE( 219)								_g64 = (_g64 + 1);
HXDLIN( 219)								int i18 = (_g64 - 1);
HXDLIN( 219)								a26->data[i18] = 0;
            							}
            						}
            					}
HXDLIN( 219)					undoImage10 = a26;
            				}
            				break;
            				case (int)2: {
HXLINE( 219)					 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 219)					 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN( 219)					{
HXLINE( 219)						b30->width = width3;
HXDLIN( 219)						b30->height = height3;
HXDLIN( 219)						b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 219)						int size3 = (b30->length * 4);
HXDLIN( 219)						b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 219)						{
HXLINE( 219)							int _g66 = 0;
HXDLIN( 219)							int _g67 = b30->length;
HXDLIN( 219)							while((_g66 < _g67)){
HXLINE( 219)								_g66 = (_g66 + 1);
HXDLIN( 219)								int i19 = (_g66 - 1);
HXDLIN( 219)								{
HXLINE( 219)									 ::haxe::io::ArrayBufferViewImpl this101 = b30->data;
HXDLIN( 219)									bool undoImage11;
HXDLIN( 219)									if ((i19 >= 0)) {
HXLINE( 219)										undoImage11 = (i19 < (this101->byteLength >> 2));
            									}
            									else {
HXLINE( 219)										undoImage11 = false;
            									}
HXDLIN( 219)									if (undoImage11) {
HXLINE( 219)										 ::haxe::io::Bytes _this3 = this101->bytes;
HXDLIN( 219)										int pos3 = ((i19 << 2) + this101->byteOffset);
HXDLIN( 219)										_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 219)										_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 219)										_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 219)										_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 219)					undoImage10 = b30;
            				}
            				break;
            				case (int)3: {
HXLINE( 219)					 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 219)					 ::iterMagic::VecIntImg v8 = vec3;
HXDLIN( 219)					{
HXLINE( 219)						v8->width = width3;
HXDLIN( 219)						v8->height = height3;
HXDLIN( 219)						v8->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 219)						v8->data = ::Array_obj< int >::__new(v8->length);
HXDLIN( 219)						{
HXLINE( 219)							int _g68 = 0;
HXDLIN( 219)							int _g69 = v8->length;
HXDLIN( 219)							while((_g68 < _g69)){
HXLINE( 219)								_g68 = (_g68 + 1);
HXDLIN( 219)								int i20 = (_g68 - 1);
HXDLIN( 219)								v8->data->__unsafe_set(i20,0);
            							}
            						}
            					}
HXDLIN( 219)					undoImage10 = v8;
            				}
            				break;
            				case (int)4: {
HXLINE( 219)					 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 219)					 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN( 219)					{
HXLINE( 219)						b31->width = width3;
HXDLIN( 219)						b31->height = height3;
HXDLIN( 219)						b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 219)						b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 219)						{
HXLINE( 219)							int len7 = b31->length;
HXDLIN( 219)							 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN( 219)							if (::hx::IsNull( d3->head )) {
HXLINE( 219)								int _g70 = 0;
HXDLIN( 219)								int _g71 = len7;
HXDLIN( 219)								while((_g70 < _g71)){
HXLINE( 219)									_g70 = (_g70 + 1);
HXDLIN( 219)									int i21 = (_g70 - 1);
HXDLIN( 219)									d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            								}
            							}
            							else {
HXLINE( 219)								int _g72 = 0;
HXDLIN( 219)								int _g73 = len7;
HXDLIN( 219)								while((_g72 < _g73)){
HXLINE( 219)									_g72 = (_g72 + 1);
HXDLIN( 219)									int i22 = (_g72 - 1);
HXDLIN( 219)									{
HXLINE( 219)										 ::haxe::ds::GenericCell_Int l3 = b31->data->head;
HXDLIN( 219)										 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 219)										{
HXLINE( 219)											int _g74 = 0;
HXDLIN( 219)											int _g75 = i22;
HXDLIN( 219)											while((_g74 < _g75)){
HXLINE( 219)												_g74 = (_g74 + 1);
HXDLIN( 219)												int i23 = (_g74 - 1);
HXLINE( 345)												prev3 = l3;
HXLINE( 346)												l3 = l3->next;
            											}
            										}
HXLINE( 219)										if (::hx::IsNull( prev3 )) {
HXLINE( 219)											b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 219)											l3 = null();
            										}
            										else {
HXLINE( 219)											prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 219)											l3 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 219)					undoImage10 = b31;
            				}
            				break;
            			}
HXDLIN( 219)			this100->image = undoImage10;
HXDLIN( 219)			this100->width = width3;
HXDLIN( 219)			this100->height = height3;
HXDLIN( 219)			this100->imageType = ( (int)(imageType3) );
HXDLIN( 219)			undoImage9 = this100;
HXDLIN( 219)			{
HXLINE( 219)				int rectLeft3 = xIter33->start;
HXDLIN( 219)				int rectTop3 = yIter33->start;
HXDLIN( 219)				int rectRight3 = xIter33->max;
HXDLIN( 219)				bool forceClear3 = false;
HXDLIN( 219)				{
HXLINE( 219)					int _g76 = rectTop3;
HXDLIN( 219)					int _g77 = yIter33->max;
HXDLIN( 219)					while((_g76 < _g77)){
HXLINE( 219)						_g76 = (_g76 + 1);
HXDLIN( 219)						int dy5 = (_g76 - 1);
HXDLIN( 219)						{
HXLINE( 219)							int _g78 = rectLeft3;
HXDLIN( 219)							int _g79 = rectRight3;
HXDLIN( 219)							while((_g78 < _g79)){
HXLINE( 219)								_g78 = (_g78 + 1);
HXDLIN( 219)								int dx5 = (_g78 - 1);
HXDLIN( 219)								::Dynamic this102 = pixelImage->image;
HXDLIN( 219)								int index15;
HXDLIN( 219)								if (pixelImage->useVirtualPos) {
HXLINE( 219)									index15 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx5) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 219)									index15 = ::Std_obj::_hx_int(( (Float)(((dy5 * pixelImage->width) + dx5)) ));
            								}
HXDLIN( 219)								int c16 = ::iterMagic::Iimg_obj::get(this102,index15);
HXDLIN( 219)								int col3;
HXDLIN( 219)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 219)									col3 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            								}
            								else {
HXLINE( 219)									col3 = c16;
            								}
HXDLIN( 219)								bool _hx_tmp24;
HXDLIN( 219)								if (pixelImage->useMask) {
HXLINE( 219)									_hx_tmp24 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 219)									_hx_tmp24 = false;
            								}
HXDLIN( 219)								if (_hx_tmp24) {
HXLINE( 219)									 ::pi_xy::ImageStruct this103 = pixelImage->mask;
HXDLIN( 219)									::Dynamic this104 = this103->image;
HXDLIN( 219)									int index16;
HXDLIN( 219)									if (this103->useVirtualPos) {
HXLINE( 219)										index16 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this103->virtualY) * ( (Float)(this103->width) )) + dx5) - this103->virtualX));
            									}
            									else {
HXLINE( 219)										index16 = ::Std_obj::_hx_int(( (Float)(((dy5 * this103->width) + dx5)) ));
            									}
HXDLIN( 219)									int c17 = ::iterMagic::Iimg_obj::get(this104,index16);
HXDLIN( 219)									int v9;
HXDLIN( 219)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 219)										v9 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            									}
            									else {
HXLINE( 219)										v9 = c17;
            									}
HXDLIN( 219)									int maskPixel3 = v9;
HXDLIN( 219)									int this105 = col3;
HXDLIN( 219)									if ((maskPixel3 == 0)) {
HXLINE( 219)										col3 = this105;
            									}
            									else {
HXLINE( 219)										Float m03;
HXDLIN( 219)										int this106 = ((maskPixel3 >> 24) & 255);
HXDLIN( 219)										if ((this106 == 0)) {
HXLINE( 219)											m03 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											m03 = (( (Float)(this106) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float m13;
HXDLIN( 219)										int this107 = ((maskPixel3 >> 16) & 255);
HXDLIN( 219)										if ((this107 == 0)) {
HXLINE( 219)											m13 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											m13 = (( (Float)(this107) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float m23;
HXDLIN( 219)										int this108 = ((maskPixel3 >> 8) & 255);
HXDLIN( 219)										if ((this108 == 0)) {
HXLINE( 219)											m23 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											m23 = (( (Float)(this108) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float m33;
HXDLIN( 219)										int this109 = (maskPixel3 & 255);
HXDLIN( 219)										if ((this109 == 0)) {
HXLINE( 219)											m33 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											m33 = (( (Float)(this109) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this105 >> 24) & 255)) )));
HXDLIN( 219)										int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this105 >> 16) & 255)) )));
HXDLIN( 219)										int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this105 >> 8) & 255)) )));
HXDLIN( 219)										int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this105 & 255)) )));
HXDLIN( 219)										col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 219)								if ((col3 != 0)) {
HXLINE( 219)									int x13 = (dx5 - rectLeft3);
HXDLIN( 219)									int y13 = (dy5 - rectTop3);
HXDLIN( 219)									int c18 = col3;
HXDLIN( 219)									bool _hx_tmp25;
HXDLIN( 219)									if ((((c18 >> 24) & 255) < 254)) {
HXLINE( 219)										_hx_tmp25 = undoImage9->transparent;
            									}
            									else {
HXLINE( 219)										_hx_tmp25 = false;
            									}
HXDLIN( 219)									if (_hx_tmp25) {
HXLINE( 219)										int location6;
HXDLIN( 219)										if (undoImage9->useVirtualPos) {
HXLINE( 219)											location6 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x13) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 219)											location6 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage9->width) + x13)) ));
            										}
HXDLIN( 219)										int this110 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 219)										int this111;
HXDLIN( 219)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 219)											this111 = ((((((this110 >> 24) & 255) << 24) | ((this110 & 255) << 16)) | (((this110 >> 8) & 255) << 8)) | ((this110 >> 16) & 255));
            										}
            										else {
HXLINE( 219)											this111 = this110;
            										}
HXDLIN( 219)										Float a111;
HXDLIN( 219)										int this112 = ((this111 >> 24) & 255);
HXDLIN( 219)										if ((this112 == 0)) {
HXLINE( 219)											a111 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											a111 = (( (Float)(this112) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float r16;
HXDLIN( 219)										int this113 = ((this111 >> 16) & 255);
HXDLIN( 219)										if ((this113 == 0)) {
HXLINE( 219)											r16 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											r16 = (( (Float)(this113) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float g16;
HXDLIN( 219)										int this114 = ((this111 >> 8) & 255);
HXDLIN( 219)										if ((this114 == 0)) {
HXLINE( 219)											g16 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											g16 = (( (Float)(this114) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float b112;
HXDLIN( 219)										int this115 = (this111 & 255);
HXDLIN( 219)										if ((this115 == 0)) {
HXLINE( 219)											b112 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											b112 = (( (Float)(this115) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float a27;
HXDLIN( 219)										int this116 = ((col3 >> 24) & 255);
HXDLIN( 219)										if ((this116 == 0)) {
HXLINE( 219)											a27 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											a27 = (( (Float)(this116) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float r26;
HXDLIN( 219)										int this117 = ((col3 >> 16) & 255);
HXDLIN( 219)										if ((this117 == 0)) {
HXLINE( 219)											r26 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											r26 = (( (Float)(this117) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float g26;
HXDLIN( 219)										int this118 = ((col3 >> 8) & 255);
HXDLIN( 219)										if ((this118 == 0)) {
HXLINE( 219)											g26 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											g26 = (( (Float)(this118) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float b210;
HXDLIN( 219)										int this119 = (col3 & 255);
HXDLIN( 219)										if ((this119 == 0)) {
HXLINE( 219)											b210 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											b210 = (( (Float)(this119) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float a36 = (a111 * (( (Float)(1) ) - a27));
HXDLIN( 219)										int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a27))));
HXDLIN( 219)										int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a27))));
HXDLIN( 219)										int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a36) + (b210 * a27))));
HXDLIN( 219)										int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a27)));
HXDLIN( 219)										int blended6 = ((((a28 << 24) | (r8 << 16)) | (g8 << 8)) | b32);
HXDLIN( 219)										{
HXLINE( 219)											int _hx_tmp26;
HXDLIN( 219)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 219)												_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            											}
            											else {
HXLINE( 219)												_hx_tmp26 = blended6;
            											}
HXDLIN( 219)											::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            										}
            									}
            									else {
HXLINE( 219)										::Dynamic this120 = undoImage9->image;
HXDLIN( 219)										int index17;
HXDLIN( 219)										if (undoImage9->useVirtualPos) {
HXLINE( 219)											index17 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x13) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 219)											index17 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage9->width) + x13)) ));
            										}
HXDLIN( 219)										int _hx_tmp27;
HXDLIN( 219)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 219)											_hx_tmp27 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            										}
            										else {
HXLINE( 219)											_hx_tmp27 = c18;
            										}
HXDLIN( 219)										::iterMagic::Iimg_obj::set(this120,index17,_hx_tmp27);
            									}
            								}
            								else {
HXLINE( 219)									if (forceClear3) {
HXLINE( 219)										::Dynamic this121 = undoImage9->image;
HXDLIN( 219)										int x14 = (dx5 - rectLeft3);
HXDLIN( 219)										int y14 = (dy5 - rectTop3);
HXDLIN( 219)										int index18;
HXDLIN( 219)										if (undoImage9->useVirtualPos) {
HXLINE( 219)											index18 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x14) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 219)											index18 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage9->width) + x14)) ));
            										}
HXDLIN( 219)										::iterMagic::Iimg_obj::set(this121,index18,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 219)		bool found3 = false;
HXDLIN( 219)		Float s3 = ((Float)0.);
HXDLIN( 219)		Float t3 = ((Float)0.);
HXDLIN( 219)		Float sxx3 = ((Float)0.);
HXDLIN( 219)		Float txx3 = ((Float)0.);
HXDLIN( 219)		{
HXLINE( 219)			int _g_min6 = xIter33->start;
HXDLIN( 219)			int _g_max6 = xIter33->max;
HXDLIN( 219)			while((_g_min6 < _g_max6)){
HXLINE( 219)				_g_min6 = (_g_min6 + 1);
HXDLIN( 219)				int x15 = (_g_min6 - 1);
HXLINE(  60)				sxx3 = (sx3 * ( (Float)(x15) ));
HXLINE(  61)				txx3 = (tx3 * ( (Float)(x15) ));
HXLINE(  62)				found3 = false;
HXLINE( 219)				{
HXLINE( 219)					int _g_min7 = yIter33->start;
HXDLIN( 219)					int _g_max7 = yIter33->max;
HXDLIN( 219)					while((_g_min7 < _g_max7)){
HXLINE( 219)						_g_min7 = (_g_min7 + 1);
HXDLIN( 219)						int y15 = (_g_min7 - 1);
HXLINE(  64)						s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y15) )));
HXLINE(  65)						t3 = ((t03 + txx3) + (ty3 * ( (Float)(y15) )));
HXLINE( 219)						bool _hx_tmp28;
HXDLIN( 219)						if (!((s3 <= 0))) {
HXLINE( 219)							_hx_tmp28 = (t3 <= 0);
            						}
            						else {
HXLINE( 219)							_hx_tmp28 = true;
            						}
HXDLIN( 219)						if (_hx_tmp28) {
HXLINE( 219)							if (found3) {
HXLINE( 219)								goto _hx_goto_350;
            							}
            						}
            						else {
HXLINE( 219)							if (((s3 + t3) < A3)) {
HXLINE( 219)								{
HXLINE( 219)									int c19 = color;
HXDLIN( 219)									bool _hx_tmp29;
HXDLIN( 219)									if ((((c19 >> 24) & 255) < 254)) {
HXLINE( 219)										_hx_tmp29 = pixelImage->transparent;
            									}
            									else {
HXLINE( 219)										_hx_tmp29 = false;
            									}
HXDLIN( 219)									if (_hx_tmp29) {
HXLINE( 219)										int location7;
HXDLIN( 219)										if (pixelImage->useVirtualPos) {
HXLINE( 219)											location7 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x15) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 219)											location7 = ::Std_obj::_hx_int(( (Float)(((y15 * pixelImage->width) + x15)) ));
            										}
HXDLIN( 219)										int this122 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN( 219)										int this123;
HXDLIN( 219)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 219)											this123 = ((((((this122 >> 24) & 255) << 24) | ((this122 & 255) << 16)) | (((this122 >> 8) & 255) << 8)) | ((this122 >> 16) & 255));
            										}
            										else {
HXLINE( 219)											this123 = this122;
            										}
HXDLIN( 219)										Float a112;
HXDLIN( 219)										int this124 = ((this123 >> 24) & 255);
HXDLIN( 219)										if ((this124 == 0)) {
HXLINE( 219)											a112 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											a112 = (( (Float)(this124) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float r17;
HXDLIN( 219)										int this125 = ((this123 >> 16) & 255);
HXDLIN( 219)										if ((this125 == 0)) {
HXLINE( 219)											r17 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											r17 = (( (Float)(this125) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float g17;
HXDLIN( 219)										int this126 = ((this123 >> 8) & 255);
HXDLIN( 219)										if ((this126 == 0)) {
HXLINE( 219)											g17 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											g17 = (( (Float)(this126) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float b113;
HXDLIN( 219)										int this127 = (this123 & 255);
HXDLIN( 219)										if ((this127 == 0)) {
HXLINE( 219)											b113 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											b113 = (( (Float)(this127) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float a29;
HXDLIN( 219)										int this128 = ((color >> 24) & 255);
HXDLIN( 219)										if ((this128 == 0)) {
HXLINE( 219)											a29 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											a29 = (( (Float)(this128) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float r27;
HXDLIN( 219)										int this129 = ((color >> 16) & 255);
HXDLIN( 219)										if ((this129 == 0)) {
HXLINE( 219)											r27 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											r27 = (( (Float)(this129) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float g27;
HXDLIN( 219)										int this130 = ((color >> 8) & 255);
HXDLIN( 219)										if ((this130 == 0)) {
HXLINE( 219)											g27 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											g27 = (( (Float)(this130) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float b211;
HXDLIN( 219)										int this131 = (color & 255);
HXDLIN( 219)										if ((this131 == 0)) {
HXLINE( 219)											b211 = ((Float)0.);
            										}
            										else {
HXLINE( 219)											b211 = (( (Float)(this131) ) / ( (Float)(255) ));
            										}
HXDLIN( 219)										Float a37 = (a112 * (( (Float)(1) ) - a29));
HXDLIN( 219)										int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a29))));
HXDLIN( 219)										int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a29))));
HXDLIN( 219)										int b33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a37) + (b211 * a29))));
HXDLIN( 219)										int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a29)));
HXDLIN( 219)										int blended7 = ((((a30 << 24) | (r9 << 16)) | (g9 << 8)) | b33);
HXDLIN( 219)										{
HXLINE( 219)											int _hx_tmp30;
HXDLIN( 219)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 219)												_hx_tmp30 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            											}
            											else {
HXLINE( 219)												_hx_tmp30 = blended7;
            											}
HXDLIN( 219)											::iterMagic::Iimg_obj::set(pixelImage->image,location7,_hx_tmp30);
            										}
            									}
            									else {
HXLINE( 219)										::Dynamic this132 = pixelImage->image;
HXDLIN( 219)										int index19;
HXDLIN( 219)										if (pixelImage->useVirtualPos) {
HXLINE( 219)											index19 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x15) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 219)											index19 = ::Std_obj::_hx_int(( (Float)(((y15 * pixelImage->width) + x15)) ));
            										}
HXDLIN( 219)										int _hx_tmp31;
HXDLIN( 219)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 219)											_hx_tmp31 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            										}
            										else {
HXLINE( 219)											_hx_tmp31 = c19;
            										}
HXDLIN( 219)										::iterMagic::Iimg_obj::set(this132,index19,_hx_tmp31);
            									}
            								}
HXLINE(  73)								found3 = true;
            							}
            							else {
HXLINE( 219)								if (found3) {
HXLINE( 219)									goto _hx_goto_350;
            								}
            							}
            						}
            					}
            					_hx_goto_350:;
            				}
            			}
            		}
HXDLIN( 219)		 ::pi_xy::algo::HitTri hitTriBottom;
HXDLIN( 219)		if ((hasHit == true)) {
HXLINE( 219)			 ::pi_xy::algo::HitTri v10 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,px,py,bx7,by7,cx7,cy7,true);
HXDLIN( 219)			if (hasUndo3) {
HXLINE( 219)				v10->undoImage = undoImage9;
HXDLIN( 219)				v10->undoX = xIter33->start;
HXDLIN( 219)				v10->undoY = yIter33->start;
            			}
HXDLIN( 219)			hitTriBottom = v10;
            		}
            		else {
HXLINE( 219)			hitTriBottom = null();
            		}
HXLINE( 221)		if (hasHit) {
HXLINE( 222)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(2)->init(0,hitTriTop)->init(1,hitTriBottom));
HXLINE( 223)			if (::hx::IsNotNull( hitQuad )) {
HXLINE( 224)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXLINE( 225)			hitArr->triArr->push(hitQuad->triBCD);
HXLINE( 226)			return hitArr;
            		}
            		else {
HXLINE( 228)			return null();
            		}
HXLINE( 221)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(ArrowPixel_Fields__obj,fillLineArrowBoth,return )

 ::pi_xy::algo::HitTriArray ArrowPixel_Fields__obj::fillSoftLineArrowBoth( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float thick,int color,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_hasHit){
            		Float soft = __o_soft.Default(((Float)40.));
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_63f36ef650858c14_235_fillSoftLineArrowBoth)
HXLINE( 236)		Float goldenRatio = ((Float)1.61803398875);
HXLINE( 238)		Float o = (qy - py);
HXLINE( 239)		Float a = (qx - px);
HXLINE( 240)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE( 241)		Float theta = ::Math_obj::atan2(o,a);
HXLINE( 242)		Float thicker = ((( (Float)(2) ) * thick) * goldenRatio);
HXLINE( 243)		Float sin = ::Math_obj::sin(theta);
HXLINE( 244)		Float cos = ::Math_obj::cos(theta);
HXLINE( 245)		Float radius = (thick / ( (Float)(2) ));
HXLINE( 246)		Float radius2 = (thicker / ( (Float)(2) ));
HXLINE( 247)		Float h2 = (h / goldenRatio);
HXLINE( 248)		Float hSmall = (h - h2);
HXLINE( 250)		Float px_ = hSmall;
HXLINE( 251)		Float py_ = ((Float)0.);
HXLINE( 252)		Float temp = ((Float)0.);
HXLINE( 254)		temp = (px + ((px_ * cos) - (py_ * sin)));
HXLINE( 255)		py_ = (py + ((py_ * cos) + (px_ * sin)));
HXLINE( 256)		px_ = temp;
HXLINE( 258)		Float h1 = (h2 - hSmall);
HXDLIN( 258)		Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 258)		Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 258)		Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 258)		Float dx = ((Float)0.1);
HXDLIN( 258)		Float dy = radius1;
HXDLIN( 258)		Float cx = h1;
HXDLIN( 258)		Float cy = radius1;
HXDLIN( 258)		Float bx = h1;
HXDLIN( 258)		Float by = -(radius1);
HXDLIN( 258)		Float ax = ((Float)0.1);
HXDLIN( 258)		Float ay = -(radius1);
HXDLIN( 258)		Float temp1 = ((Float)0.);
HXLINE(  82)		temp1 = (px_ + ((ax * cos1) - (ay * sin1)));
HXLINE(  83)		ay = (py_ + ((ay * cos1) + (ax * sin1)));
HXLINE(  84)		ax = temp1;
HXLINE(  86)		temp1 = (px_ + ((bx * cos1) - (by * sin1)));
HXLINE(  87)		by = (py_ + ((by * cos1) + (bx * sin1)));
HXLINE(  88)		bx = temp1;
HXLINE(  90)		temp1 = (px_ + ((cx * cos1) - (cy * sin1)));
HXLINE(  91)		cy = (py_ + ((cy * cos1) + (cx * sin1)));
HXLINE(  92)		cx = temp1;
HXLINE(  94)		temp1 = (px_ + ((dx * cos1) - (dy * sin1)));
HXLINE(  95)		dy = (py_ + ((dy * cos1) + (dx * sin1)));
HXLINE(  96)		dx = temp1;
HXLINE( 258)		{
HXLINE( 258)			bool hasUndo = true;
HXDLIN( 258)			int aA = ((color >> 24) & 255);
HXDLIN( 258)			int rA = ((color >> 16) & 255);
HXDLIN( 258)			int gA = ((color >> 8) & 255);
HXDLIN( 258)			int bA = (color & 255);
HXDLIN( 258)			Float bcx = (bx - dx);
HXDLIN( 258)			Float bcy = (by - dy);
HXDLIN( 258)			Float acx = (ax - dx);
HXDLIN( 258)			Float acy = (ay - dy);
HXDLIN( 258)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 258)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 258)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 258)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 258)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 258)			if ((ax > bx)) {
HXLINE( 258)				if ((ax > dx)) {
HXLINE( 258)					int min;
HXDLIN( 258)					if ((bx > dx)) {
HXLINE( 258)						min = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 258)						min = ::Math_obj::floor(bx);
            					}
HXDLIN( 258)					int ii_min = min;
HXDLIN( 258)					int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 258)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXLINE( 258)					int ii_min1 = ::Math_obj::floor(bx);
HXDLIN( 258)					int ii_max1 = ::Math_obj::ceil(dx);
HXDLIN( 258)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXLINE( 258)				if ((bx > dx)) {
HXLINE( 258)					int min1;
HXDLIN( 258)					if ((ax > dx)) {
HXLINE( 258)						min1 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 258)						min1 = ::Math_obj::ceil(ax);
            					}
HXDLIN( 258)					int ii_min2 = min1;
HXDLIN( 258)					int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN( 258)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXLINE( 258)					int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 258)					int ii_max3 = ::Math_obj::ceil(dx);
HXDLIN( 258)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN( 258)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 258)			if ((ay > by)) {
HXLINE( 258)				if ((ay > dy)) {
HXLINE( 258)					int min2;
HXDLIN( 258)					if ((by > dy)) {
HXLINE( 258)						min2 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 258)						min2 = ::Math_obj::floor(by);
            					}
HXDLIN( 258)					int ii_min4 = min2;
HXDLIN( 258)					int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 258)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXLINE( 258)					int ii_min5 = ::Math_obj::floor(by);
HXDLIN( 258)					int ii_max5 = ::Math_obj::ceil(dy);
HXDLIN( 258)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXLINE( 258)				if ((by > dy)) {
HXLINE( 258)					int min3;
HXDLIN( 258)					if ((ay > dy)) {
HXLINE( 258)						min3 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 258)						min3 = ::Math_obj::ceil(ay);
            					}
HXDLIN( 258)					int ii_min6 = min3;
HXDLIN( 258)					int ii_max6 = ::Math_obj::ceil(by);
HXDLIN( 258)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXLINE( 258)					int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 258)					int ii_max7 = ::Math_obj::ceil(dy);
HXDLIN( 258)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN( 258)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 258)			if (hasUndo) {
HXLINE( 258)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 258)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 258)				 ::Dynamic imageType = null();
HXDLIN( 258)				 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 258)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 258)				::Dynamic undoImage1;
HXDLIN( 258)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXLINE( 258)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 258)						 ::iterMagic::BytesImg b = byt;
HXDLIN( 258)						{
HXLINE( 258)							b->width = width;
HXDLIN( 258)							b->height = height;
HXDLIN( 258)							b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 258)							b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 258)							{
HXLINE( 258)								int len = b->length;
HXDLIN( 258)								int w = 0;
HXDLIN( 258)								{
HXLINE( 258)									int _g = 0;
HXDLIN( 258)									int _g1 = b->height;
HXDLIN( 258)									while((_g < _g1)){
HXLINE( 258)										_g = (_g + 1);
HXDLIN( 258)										int y = (_g - 1);
HXDLIN( 258)										{
HXLINE( 258)											int _g2 = 0;
HXDLIN( 258)											int _g3 = b->width;
HXDLIN( 258)											while((_g2 < _g3)){
HXLINE( 258)												_g2 = (_g2 + 1);
HXDLIN( 258)												int x = (_g2 - 1);
HXDLIN( 258)												{
HXLINE( 258)													w = (w + 1);
HXDLIN( 258)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 258)												{
HXLINE( 258)													w = (w + 1);
HXDLIN( 258)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 258)												{
HXLINE( 258)													w = (w + 1);
HXDLIN( 258)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 258)												{
HXLINE( 258)													w = (w + 1);
HXDLIN( 258)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 258)						undoImage1 = b;
            					}
            					break;
            					case (int)1: {
HXLINE( 258)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 258)						 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 258)						{
HXLINE( 258)							a1->width = width;
HXDLIN( 258)							a1->height = height;
HXDLIN( 258)							a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 258)							a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 258)							{
HXLINE( 258)								int _g4 = 0;
HXDLIN( 258)								int _g5 = a1->length;
HXDLIN( 258)								while((_g4 < _g5)){
HXLINE( 258)									_g4 = (_g4 + 1);
HXDLIN( 258)									int i = (_g4 - 1);
HXDLIN( 258)									a1->data[i] = 0;
            								}
            							}
            						}
HXDLIN( 258)						undoImage1 = a1;
            					}
            					break;
            					case (int)2: {
HXLINE( 258)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 258)						 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 258)						{
HXLINE( 258)							b1->width = width;
HXDLIN( 258)							b1->height = height;
HXDLIN( 258)							b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 258)							int size = (b1->length * 4);
HXDLIN( 258)							b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 258)							{
HXLINE( 258)								int _g6 = 0;
HXDLIN( 258)								int _g7 = b1->length;
HXDLIN( 258)								while((_g6 < _g7)){
HXLINE( 258)									_g6 = (_g6 + 1);
HXDLIN( 258)									int i1 = (_g6 - 1);
HXDLIN( 258)									{
HXLINE( 258)										 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN( 258)										bool undoImage2;
HXDLIN( 258)										if ((i1 >= 0)) {
HXLINE( 258)											undoImage2 = (i1 < (this2->byteLength >> 2));
            										}
            										else {
HXLINE( 258)											undoImage2 = false;
            										}
HXDLIN( 258)										if (undoImage2) {
HXLINE( 258)											 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 258)											int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 258)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 258)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 258)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 258)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 258)						undoImage1 = b1;
            					}
            					break;
            					case (int)3: {
HXLINE( 258)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 258)						 ::iterMagic::VecIntImg v = vec;
HXDLIN( 258)						{
HXLINE( 258)							v->width = width;
HXDLIN( 258)							v->height = height;
HXDLIN( 258)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 258)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 258)							{
HXLINE( 258)								int _g8 = 0;
HXDLIN( 258)								int _g9 = v->length;
HXDLIN( 258)								while((_g8 < _g9)){
HXLINE( 258)									_g8 = (_g8 + 1);
HXDLIN( 258)									int i2 = (_g8 - 1);
HXDLIN( 258)									v->data->__unsafe_set(i2,0);
            								}
            							}
            						}
HXDLIN( 258)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXLINE( 258)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 258)						 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 258)						{
HXLINE( 258)							b2->width = width;
HXDLIN( 258)							b2->height = height;
HXDLIN( 258)							b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 258)							b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 258)							{
HXLINE( 258)								int len1 = b2->length;
HXDLIN( 258)								 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 258)								if (::hx::IsNull( d->head )) {
HXLINE( 258)									int _g10 = 0;
HXDLIN( 258)									int _g11 = len1;
HXDLIN( 258)									while((_g10 < _g11)){
HXLINE( 258)										_g10 = (_g10 + 1);
HXDLIN( 258)										int i3 = (_g10 - 1);
HXDLIN( 258)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXLINE( 258)									int _g12 = 0;
HXDLIN( 258)									int _g13 = len1;
HXDLIN( 258)									while((_g12 < _g13)){
HXLINE( 258)										_g12 = (_g12 + 1);
HXDLIN( 258)										int i4 = (_g12 - 1);
HXDLIN( 258)										{
HXLINE( 258)											 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 258)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 258)											{
HXLINE( 258)												int _g14 = 0;
HXDLIN( 258)												int _g15 = i4;
HXDLIN( 258)												while((_g14 < _g15)){
HXLINE( 258)													_g14 = (_g14 + 1);
HXDLIN( 258)													int i5 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE( 258)											if (::hx::IsNull( prev )) {
HXLINE( 258)												b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 258)												l = null();
            											}
            											else {
HXLINE( 258)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 258)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 258)						undoImage1 = b2;
            					}
            					break;
            				}
HXDLIN( 258)				this1->image = undoImage1;
HXDLIN( 258)				this1->width = width;
HXDLIN( 258)				this1->height = height;
HXDLIN( 258)				this1->imageType = ( (int)(imageType) );
HXDLIN( 258)				undoImage = this1;
HXDLIN( 258)				{
HXLINE( 258)					int rectLeft = xIter3->start;
HXDLIN( 258)					int rectTop = yIter3->start;
HXDLIN( 258)					int rectRight = xIter3->max;
HXDLIN( 258)					bool forceClear = false;
HXDLIN( 258)					{
HXLINE( 258)						int _g16 = rectTop;
HXDLIN( 258)						int _g17 = yIter3->max;
HXDLIN( 258)						while((_g16 < _g17)){
HXLINE( 258)							_g16 = (_g16 + 1);
HXDLIN( 258)							int dy1 = (_g16 - 1);
HXDLIN( 258)							{
HXLINE( 258)								int _g18 = rectLeft;
HXDLIN( 258)								int _g19 = rectRight;
HXDLIN( 258)								while((_g18 < _g19)){
HXLINE( 258)									_g18 = (_g18 + 1);
HXDLIN( 258)									int dx1 = (_g18 - 1);
HXDLIN( 258)									::Dynamic this3 = pixelImage->image;
HXDLIN( 258)									int index;
HXDLIN( 258)									if (pixelImage->useVirtualPos) {
HXLINE( 258)										index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 258)										index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            									}
HXDLIN( 258)									int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN( 258)									int col;
HXDLIN( 258)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 258)										col = c;
            									}
HXDLIN( 258)									bool _hx_tmp;
HXDLIN( 258)									if (pixelImage->useMask) {
HXLINE( 258)										_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE( 258)										_hx_tmp = false;
            									}
HXDLIN( 258)									if (_hx_tmp) {
HXLINE( 258)										 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN( 258)										::Dynamic this5 = this4->image;
HXDLIN( 258)										int index1;
HXDLIN( 258)										if (this4->useVirtualPos) {
HXLINE( 258)											index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            										}
            										else {
HXLINE( 258)											index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            										}
HXDLIN( 258)										int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN( 258)										int v1;
HXDLIN( 258)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)											v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXLINE( 258)											v1 = c1;
            										}
HXDLIN( 258)										int maskPixel = v1;
HXDLIN( 258)										int this6 = col;
HXDLIN( 258)										if ((maskPixel == 0)) {
HXLINE( 258)											col = this6;
            										}
            										else {
HXLINE( 258)											Float m0;
HXDLIN( 258)											int this7 = ((maskPixel >> 24) & 255);
HXDLIN( 258)											if ((this7 == 0)) {
HXLINE( 258)												m0 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float m1;
HXDLIN( 258)											int this8 = ((maskPixel >> 16) & 255);
HXDLIN( 258)											if ((this8 == 0)) {
HXLINE( 258)												m1 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float m2;
HXDLIN( 258)											int this9 = ((maskPixel >> 8) & 255);
HXDLIN( 258)											if ((this9 == 0)) {
HXLINE( 258)												m2 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float m3;
HXDLIN( 258)											int this10 = (maskPixel & 255);
HXDLIN( 258)											if ((this10 == 0)) {
HXLINE( 258)												m3 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 258)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 258)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 258)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 258)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 258)									if ((col != 0)) {
HXLINE( 258)										int x1 = (dx1 - rectLeft);
HXDLIN( 258)										int y1 = (dy1 - rectTop);
HXDLIN( 258)										int c2 = col;
HXDLIN( 258)										bool _hx_tmp1;
HXDLIN( 258)										if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 258)											_hx_tmp1 = undoImage->transparent;
            										}
            										else {
HXLINE( 258)											_hx_tmp1 = false;
            										}
HXDLIN( 258)										if (_hx_tmp1) {
HXLINE( 258)											int location;
HXDLIN( 258)											if (undoImage->useVirtualPos) {
HXLINE( 258)												location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXLINE( 258)												location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 258)											int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 258)											int this12;
HXDLIN( 258)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)												this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            											}
            											else {
HXLINE( 258)												this12 = this11;
            											}
HXDLIN( 258)											Float a11;
HXDLIN( 258)											int this13 = ((this12 >> 24) & 255);
HXDLIN( 258)											if ((this13 == 0)) {
HXLINE( 258)												a11 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float r1;
HXDLIN( 258)											int this14 = ((this12 >> 16) & 255);
HXDLIN( 258)											if ((this14 == 0)) {
HXLINE( 258)												r1 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float g1;
HXDLIN( 258)											int this15 = ((this12 >> 8) & 255);
HXDLIN( 258)											if ((this15 == 0)) {
HXLINE( 258)												g1 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float b11;
HXDLIN( 258)											int this16 = (this12 & 255);
HXDLIN( 258)											if ((this16 == 0)) {
HXLINE( 258)												b11 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float a2;
HXDLIN( 258)											int this17 = ((col >> 24) & 255);
HXDLIN( 258)											if ((this17 == 0)) {
HXLINE( 258)												a2 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float r2;
HXDLIN( 258)											int this18 = ((col >> 16) & 255);
HXDLIN( 258)											if ((this18 == 0)) {
HXLINE( 258)												r2 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float g2;
HXDLIN( 258)											int this19 = ((col >> 8) & 255);
HXDLIN( 258)											if ((this19 == 0)) {
HXLINE( 258)												g2 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float b21;
HXDLIN( 258)											int this20 = (col & 255);
HXDLIN( 258)											if ((this20 == 0)) {
HXLINE( 258)												b21 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 258)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 258)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 258)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 258)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 258)											int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 258)											{
HXLINE( 258)												int _hx_tmp2;
HXDLIN( 258)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)													_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE( 258)													_hx_tmp2 = blended;
            												}
HXDLIN( 258)												::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            											}
            										}
            										else {
HXLINE( 258)											::Dynamic this21 = undoImage->image;
HXDLIN( 258)											int index2;
HXDLIN( 258)											if (undoImage->useVirtualPos) {
HXLINE( 258)												index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXLINE( 258)												index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 258)											int _hx_tmp3;
HXDLIN( 258)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)												_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXLINE( 258)												_hx_tmp3 = c2;
            											}
HXDLIN( 258)											::iterMagic::Iimg_obj::set(this21,index2,_hx_tmp3);
            										}
            									}
            									else {
HXLINE( 258)										if (forceClear) {
HXLINE( 258)											::Dynamic this22 = undoImage->image;
HXDLIN( 258)											int x2 = (dx1 - rectLeft);
HXDLIN( 258)											int y2 = (dy1 - rectTop);
HXDLIN( 258)											int index3;
HXDLIN( 258)											if (undoImage->useVirtualPos) {
HXLINE( 258)												index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            											}
            											else {
HXLINE( 258)												index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            											}
HXDLIN( 258)											::iterMagic::Iimg_obj::set(this22,index3,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 258)			bool found = false;
HXDLIN( 258)			Float min4 = ( (Float)(0) );
HXDLIN( 258)			Float max = ( (Float)(0) );
HXDLIN( 258)			int a5 = 0;
HXDLIN( 258)			int r3 = 0;
HXDLIN( 258)			int g3 = 0;
HXDLIN( 258)			int b4 = 0;
HXDLIN( 258)			{
HXLINE( 258)				int _g_min = xIter3->start;
HXDLIN( 258)				int _g_max = xIter3->max;
HXDLIN( 258)				while((_g_min < _g_max)){
HXLINE( 258)					_g_min = (_g_min + 1);
HXDLIN( 258)					int px1 = (_g_min - 1);
HXDLIN( 258)					Float pcx = (( (Float)(px1) ) - dx);
HXLINE( 695)					found = false;
HXLINE( 258)					{
HXLINE( 258)						int _g_min1 = yIter3->start;
HXDLIN( 258)						int _g_max1 = yIter3->max;
HXDLIN( 258)						while((_g_min1 < _g_max1)){
HXLINE( 258)							_g_min1 = (_g_min1 + 1);
HXDLIN( 258)							int py1 = (_g_min1 - 1);
HXDLIN( 258)							Float pcy = (( (Float)(py1) ) - dy);
HXDLIN( 258)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 258)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 258)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 258)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 258)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 258)							bool _hx_tmp4;
HXDLIN( 258)							bool _hx_tmp5;
HXDLIN( 258)							if ((ratioA >= 0)) {
HXLINE( 258)								_hx_tmp5 = (ratioB >= 0);
            							}
            							else {
HXLINE( 258)								_hx_tmp5 = false;
            							}
HXDLIN( 258)							if (_hx_tmp5) {
HXLINE( 258)								_hx_tmp4 = (ratioC >= 0);
            							}
            							else {
HXLINE( 258)								_hx_tmp4 = false;
            							}
HXDLIN( 258)							if (_hx_tmp4) {
HXLINE( 709)								min4 = ratioA;
HXLINE( 258)								int i6 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN( 258)								if ((i6 > 255)) {
HXLINE(  24)									i6 = 255;
            								}
HXLINE( 258)								if ((i6 < 0)) {
HXLINE(  25)									i6 = 0;
            								}
HXLINE( 258)								a5 = i6;
HXDLIN( 258)								int i7 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 258)								if ((i7 > 255)) {
HXLINE(  24)									i7 = 255;
            								}
HXLINE( 258)								if ((i7 < 0)) {
HXLINE(  25)									i7 = 0;
            								}
HXLINE( 747)								r3 = i7;
HXLINE( 258)								int i8 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 258)								if ((i8 > 255)) {
HXLINE(  24)									i8 = 255;
            								}
HXLINE( 258)								if ((i8 < 0)) {
HXLINE(  25)									i8 = 0;
            								}
HXLINE( 748)								g3 = i8;
HXLINE( 258)								int i9 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 258)								if ((i9 > 255)) {
HXLINE(  24)									i9 = 255;
            								}
HXLINE( 258)								if ((i9 < 0)) {
HXLINE(  25)									i9 = 0;
            								}
HXLINE( 749)								b4 = i9;
HXLINE( 258)								{
HXLINE( 258)									int location1;
HXDLIN( 258)									if (pixelImage->useVirtualPos) {
HXLINE( 258)										location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 258)										location1 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            									}
HXDLIN( 258)									bool _hx_tmp6;
HXDLIN( 258)									if (pixelImage->transparent) {
HXLINE( 258)										_hx_tmp6 = (a5 < 254);
            									}
            									else {
HXLINE( 258)										_hx_tmp6 = false;
            									}
HXDLIN( 258)									if (_hx_tmp6) {
HXLINE( 258)										int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN( 258)										int old;
HXDLIN( 258)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)											old = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            										}
            										else {
HXLINE( 258)											old = this23;
            										}
HXDLIN( 258)										int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 258)										Float a12;
HXDLIN( 258)										int this24 = ((old >> 24) & 255);
HXDLIN( 258)										if ((this24 == 0)) {
HXLINE( 258)											a12 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											a12 = (( (Float)(this24) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float r11;
HXDLIN( 258)										int this25 = ((old >> 16) & 255);
HXDLIN( 258)										if ((this25 == 0)) {
HXLINE( 258)											r11 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											r11 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float g11;
HXDLIN( 258)										int this26 = ((old >> 8) & 255);
HXDLIN( 258)										if ((this26 == 0)) {
HXLINE( 258)											g11 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											g11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float b12;
HXDLIN( 258)										int this27 = (old & 255);
HXDLIN( 258)										if ((this27 == 0)) {
HXLINE( 258)											b12 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											b12 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float a21;
HXDLIN( 258)										int this28 = ((rhs >> 24) & 255);
HXDLIN( 258)										if ((this28 == 0)) {
HXLINE( 258)											a21 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											a21 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float r21;
HXDLIN( 258)										int this29 = ((rhs >> 16) & 255);
HXDLIN( 258)										if ((this29 == 0)) {
HXLINE( 258)											r21 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											r21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float g21;
HXDLIN( 258)										int this30 = ((rhs >> 8) & 255);
HXDLIN( 258)										if ((this30 == 0)) {
HXLINE( 258)											g21 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											g21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float b22;
HXDLIN( 258)										int this31 = (rhs & 255);
HXDLIN( 258)										if ((this31 == 0)) {
HXLINE( 258)											b22 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											b22 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 258)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 258)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 258)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 258)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 258)										int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 258)										{
HXLINE( 258)											int _hx_tmp7;
HXDLIN( 258)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXLINE( 258)												_hx_tmp7 = blended1;
            											}
HXDLIN( 258)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXLINE( 258)										int value;
HXDLIN( 258)										if (pixelImage->isLittle) {
HXLINE( 258)											value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            										}
            										else {
HXLINE( 258)											value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            										}
HXDLIN( 258)										::iterMagic::Iimg_obj::set(pixelImage->image,location1,value);
            									}
            								}
HXLINE( 751)								found = true;
            							}
            							else {
HXLINE( 258)								if (found) {
HXLINE( 258)									goto _hx_goto_363;
            								}
            							}
            						}
            						_hx_goto_363:;
            					}
            				}
            			}
            		}
HXDLIN( 258)		{
HXLINE( 258)			bool hasUndo1 = true;
HXDLIN( 258)			int aA1 = ((color >> 24) & 255);
HXDLIN( 258)			int rA1 = ((color >> 16) & 255);
HXDLIN( 258)			int gA1 = ((color >> 8) & 255);
HXDLIN( 258)			int bA1 = (color & 255);
HXDLIN( 258)			Float bcx1 = (cx - dx);
HXDLIN( 258)			Float bcy1 = (cy - dy);
HXDLIN( 258)			Float acx1 = (bx - dx);
HXDLIN( 258)			Float acy1 = (by - dy);
HXDLIN( 258)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 258)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 258)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 258)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 258)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 258)			if ((bx > cx)) {
HXLINE( 258)				if ((bx > dx)) {
HXLINE( 258)					int min5;
HXDLIN( 258)					if ((cx > dx)) {
HXLINE( 258)						min5 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 258)						min5 = ::Math_obj::floor(cx);
            					}
HXDLIN( 258)					int ii_min8 = min5;
HXDLIN( 258)					int ii_max8 = ::Math_obj::ceil(bx);
HXDLIN( 258)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXLINE( 258)					int ii_min9 = ::Math_obj::floor(cx);
HXDLIN( 258)					int ii_max9 = ::Math_obj::ceil(dx);
HXDLIN( 258)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXLINE( 258)				if ((cx > dx)) {
HXLINE( 258)					int min6;
HXDLIN( 258)					if ((bx > dx)) {
HXLINE( 258)						min6 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 258)						min6 = ::Math_obj::ceil(bx);
            					}
HXDLIN( 258)					int ii_min10 = min6;
HXDLIN( 258)					int ii_max10 = ::Math_obj::ceil(cx);
HXDLIN( 258)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXLINE( 258)					int ii_min11 = ::Math_obj::floor(bx);
HXDLIN( 258)					int ii_max11 = ::Math_obj::ceil(dx);
HXDLIN( 258)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN( 258)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 258)			if ((by > cy)) {
HXLINE( 258)				if ((by > dy)) {
HXLINE( 258)					int min7;
HXDLIN( 258)					if ((cy > dy)) {
HXLINE( 258)						min7 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 258)						min7 = ::Math_obj::floor(cy);
            					}
HXDLIN( 258)					int ii_min12 = min7;
HXDLIN( 258)					int ii_max12 = ::Math_obj::ceil(by);
HXDLIN( 258)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXLINE( 258)					int ii_min13 = ::Math_obj::floor(cy);
HXDLIN( 258)					int ii_max13 = ::Math_obj::ceil(dy);
HXDLIN( 258)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXLINE( 258)				if ((cy > dy)) {
HXLINE( 258)					int min8;
HXDLIN( 258)					if ((by > dy)) {
HXLINE( 258)						min8 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 258)						min8 = ::Math_obj::ceil(by);
            					}
HXDLIN( 258)					int ii_min14 = min8;
HXDLIN( 258)					int ii_max14 = ::Math_obj::ceil(cy);
HXDLIN( 258)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXLINE( 258)					int ii_min15 = ::Math_obj::floor(by);
HXDLIN( 258)					int ii_max15 = ::Math_obj::ceil(dy);
HXDLIN( 258)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN( 258)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 258)			if (hasUndo1) {
HXLINE( 258)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 258)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 258)				 ::Dynamic imageType1 = null();
HXDLIN( 258)				 ::pi_xy::ImageStruct this32 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 258)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 258)				::Dynamic undoImage4;
HXDLIN( 258)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXLINE( 258)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 258)						 ::iterMagic::BytesImg b6 = byt1;
HXDLIN( 258)						{
HXLINE( 258)							b6->width = width1;
HXDLIN( 258)							b6->height = height1;
HXDLIN( 258)							b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 258)							b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 258)							{
HXLINE( 258)								int len2 = b6->length;
HXDLIN( 258)								int w1 = 0;
HXDLIN( 258)								{
HXLINE( 258)									int _g20 = 0;
HXDLIN( 258)									int _g21 = b6->height;
HXDLIN( 258)									while((_g20 < _g21)){
HXLINE( 258)										_g20 = (_g20 + 1);
HXDLIN( 258)										int y3 = (_g20 - 1);
HXDLIN( 258)										{
HXLINE( 258)											int _g22 = 0;
HXDLIN( 258)											int _g23 = b6->width;
HXDLIN( 258)											while((_g22 < _g23)){
HXLINE( 258)												_g22 = (_g22 + 1);
HXDLIN( 258)												int x3 = (_g22 - 1);
HXDLIN( 258)												{
HXLINE( 258)													w1 = (w1 + 1);
HXDLIN( 258)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 258)												{
HXLINE( 258)													w1 = (w1 + 1);
HXDLIN( 258)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 258)												{
HXLINE( 258)													w1 = (w1 + 1);
HXDLIN( 258)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 258)												{
HXLINE( 258)													w1 = (w1 + 1);
HXDLIN( 258)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 258)						undoImage4 = b6;
            					}
            					break;
            					case (int)1: {
HXLINE( 258)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 258)						 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN( 258)						{
HXLINE( 258)							a7->width = width1;
HXDLIN( 258)							a7->height = height1;
HXDLIN( 258)							a7->data = ::Array_obj< int >::__new(0);
HXDLIN( 258)							a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 258)							{
HXLINE( 258)								int _g24 = 0;
HXDLIN( 258)								int _g25 = a7->length;
HXDLIN( 258)								while((_g24 < _g25)){
HXLINE( 258)									_g24 = (_g24 + 1);
HXDLIN( 258)									int i10 = (_g24 - 1);
HXDLIN( 258)									a7->data[i10] = 0;
            								}
            							}
            						}
HXDLIN( 258)						undoImage4 = a7;
            					}
            					break;
            					case (int)2: {
HXLINE( 258)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 258)						 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN( 258)						{
HXLINE( 258)							b7->width = width1;
HXDLIN( 258)							b7->height = height1;
HXDLIN( 258)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 258)							int size1 = (b7->length * 4);
HXDLIN( 258)							b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 258)							{
HXLINE( 258)								int _g26 = 0;
HXDLIN( 258)								int _g27 = b7->length;
HXDLIN( 258)								while((_g26 < _g27)){
HXLINE( 258)									_g26 = (_g26 + 1);
HXDLIN( 258)									int i11 = (_g26 - 1);
HXDLIN( 258)									{
HXLINE( 258)										 ::haxe::io::ArrayBufferViewImpl this33 = b7->data;
HXDLIN( 258)										bool undoImage5;
HXDLIN( 258)										if ((i11 >= 0)) {
HXLINE( 258)											undoImage5 = (i11 < (this33->byteLength >> 2));
            										}
            										else {
HXLINE( 258)											undoImage5 = false;
            										}
HXDLIN( 258)										if (undoImage5) {
HXLINE( 258)											 ::haxe::io::Bytes _this1 = this33->bytes;
HXDLIN( 258)											int pos1 = ((i11 << 2) + this33->byteOffset);
HXDLIN( 258)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 258)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 258)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 258)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 258)						undoImage4 = b7;
            					}
            					break;
            					case (int)3: {
HXLINE( 258)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 258)						 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 258)						{
HXLINE( 258)							v2->width = width1;
HXDLIN( 258)							v2->height = height1;
HXDLIN( 258)							v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 258)							v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 258)							{
HXLINE( 258)								int _g28 = 0;
HXDLIN( 258)								int _g29 = v2->length;
HXDLIN( 258)								while((_g28 < _g29)){
HXLINE( 258)									_g28 = (_g28 + 1);
HXDLIN( 258)									int i12 = (_g28 - 1);
HXDLIN( 258)									v2->data->__unsafe_set(i12,0);
            								}
            							}
            						}
HXDLIN( 258)						undoImage4 = v2;
            					}
            					break;
            					case (int)4: {
HXLINE( 258)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 258)						 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN( 258)						{
HXLINE( 258)							b8->width = width1;
HXDLIN( 258)							b8->height = height1;
HXDLIN( 258)							b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 258)							b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 258)							{
HXLINE( 258)								int len3 = b8->length;
HXDLIN( 258)								 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN( 258)								if (::hx::IsNull( d1->head )) {
HXLINE( 258)									int _g30 = 0;
HXDLIN( 258)									int _g31 = len3;
HXDLIN( 258)									while((_g30 < _g31)){
HXLINE( 258)										_g30 = (_g30 + 1);
HXDLIN( 258)										int i13 = (_g30 - 1);
HXDLIN( 258)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXLINE( 258)									int _g32 = 0;
HXDLIN( 258)									int _g33 = len3;
HXDLIN( 258)									while((_g32 < _g33)){
HXLINE( 258)										_g32 = (_g32 + 1);
HXDLIN( 258)										int i14 = (_g32 - 1);
HXDLIN( 258)										{
HXLINE( 258)											 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN( 258)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 258)											{
HXLINE( 258)												int _g34 = 0;
HXDLIN( 258)												int _g35 = i14;
HXDLIN( 258)												while((_g34 < _g35)){
HXLINE( 258)													_g34 = (_g34 + 1);
HXDLIN( 258)													int i15 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE( 258)											if (::hx::IsNull( prev1 )) {
HXLINE( 258)												b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 258)												l1 = null();
            											}
            											else {
HXLINE( 258)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 258)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 258)						undoImage4 = b8;
            					}
            					break;
            				}
HXDLIN( 258)				this32->image = undoImage4;
HXDLIN( 258)				this32->width = width1;
HXDLIN( 258)				this32->height = height1;
HXDLIN( 258)				this32->imageType = ( (int)(imageType1) );
HXDLIN( 258)				undoImage3 = this32;
HXDLIN( 258)				{
HXLINE( 258)					int rectLeft1 = xIter31->start;
HXDLIN( 258)					int rectTop1 = yIter31->start;
HXDLIN( 258)					int rectRight1 = xIter31->max;
HXDLIN( 258)					bool forceClear1 = false;
HXDLIN( 258)					{
HXLINE( 258)						int _g36 = rectTop1;
HXDLIN( 258)						int _g37 = yIter31->max;
HXDLIN( 258)						while((_g36 < _g37)){
HXLINE( 258)							_g36 = (_g36 + 1);
HXDLIN( 258)							int dy2 = (_g36 - 1);
HXDLIN( 258)							{
HXLINE( 258)								int _g38 = rectLeft1;
HXDLIN( 258)								int _g39 = rectRight1;
HXDLIN( 258)								while((_g38 < _g39)){
HXLINE( 258)									_g38 = (_g38 + 1);
HXDLIN( 258)									int dx2 = (_g38 - 1);
HXDLIN( 258)									::Dynamic this34 = pixelImage->image;
HXDLIN( 258)									int index4;
HXDLIN( 258)									if (pixelImage->useVirtualPos) {
HXLINE( 258)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 258)										index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            									}
HXDLIN( 258)									int c3 = ::iterMagic::Iimg_obj::get(this34,index4);
HXDLIN( 258)									int col1;
HXDLIN( 258)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)										col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXLINE( 258)										col1 = c3;
            									}
HXDLIN( 258)									bool _hx_tmp8;
HXDLIN( 258)									if (pixelImage->useMask) {
HXLINE( 258)										_hx_tmp8 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE( 258)										_hx_tmp8 = false;
            									}
HXDLIN( 258)									if (_hx_tmp8) {
HXLINE( 258)										 ::pi_xy::ImageStruct this35 = pixelImage->mask;
HXDLIN( 258)										::Dynamic this36 = this35->image;
HXDLIN( 258)										int index5;
HXDLIN( 258)										if (this35->useVirtualPos) {
HXLINE( 258)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this35->virtualY) * ( (Float)(this35->width) )) + dx2) - this35->virtualX));
            										}
            										else {
HXLINE( 258)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this35->width) + dx2)) ));
            										}
HXDLIN( 258)										int c4 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN( 258)										int v3;
HXDLIN( 258)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)											v3 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXLINE( 258)											v3 = c4;
            										}
HXDLIN( 258)										int maskPixel1 = v3;
HXDLIN( 258)										int this37 = col1;
HXDLIN( 258)										if ((maskPixel1 == 0)) {
HXLINE( 258)											col1 = this37;
            										}
            										else {
HXLINE( 258)											Float m01;
HXDLIN( 258)											int this38 = ((maskPixel1 >> 24) & 255);
HXDLIN( 258)											if ((this38 == 0)) {
HXLINE( 258)												m01 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												m01 = (( (Float)(this38) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float m11;
HXDLIN( 258)											int this39 = ((maskPixel1 >> 16) & 255);
HXDLIN( 258)											if ((this39 == 0)) {
HXLINE( 258)												m11 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												m11 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float m21;
HXDLIN( 258)											int this40 = ((maskPixel1 >> 8) & 255);
HXDLIN( 258)											if ((this40 == 0)) {
HXLINE( 258)												m21 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												m21 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float m31;
HXDLIN( 258)											int this41 = (maskPixel1 & 255);
HXDLIN( 258)											if ((this41 == 0)) {
HXLINE( 258)												m31 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												m31 = (( (Float)(this41) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this37 >> 24) & 255)) )));
HXDLIN( 258)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this37 >> 16) & 255)) )));
HXDLIN( 258)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this37 >> 8) & 255)) )));
HXDLIN( 258)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this37 & 255)) )));
HXDLIN( 258)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 258)									if ((col1 != 0)) {
HXLINE( 258)										int x4 = (dx2 - rectLeft1);
HXDLIN( 258)										int y4 = (dy2 - rectTop1);
HXDLIN( 258)										int c5 = col1;
HXDLIN( 258)										bool _hx_tmp9;
HXDLIN( 258)										if ((((c5 >> 24) & 255) < 254)) {
HXLINE( 258)											_hx_tmp9 = undoImage3->transparent;
            										}
            										else {
HXLINE( 258)											_hx_tmp9 = false;
            										}
HXDLIN( 258)										if (_hx_tmp9) {
HXLINE( 258)											int location2;
HXDLIN( 258)											if (undoImage3->useVirtualPos) {
HXLINE( 258)												location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 258)												location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 258)											int this42 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 258)											int this43;
HXDLIN( 258)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)												this43 = ((((((this42 >> 24) & 255) << 24) | ((this42 & 255) << 16)) | (((this42 >> 8) & 255) << 8)) | ((this42 >> 16) & 255));
            											}
            											else {
HXLINE( 258)												this43 = this42;
            											}
HXDLIN( 258)											Float a13;
HXDLIN( 258)											int this44 = ((this43 >> 24) & 255);
HXDLIN( 258)											if ((this44 == 0)) {
HXLINE( 258)												a13 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												a13 = (( (Float)(this44) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float r12;
HXDLIN( 258)											int this45 = ((this43 >> 16) & 255);
HXDLIN( 258)											if ((this45 == 0)) {
HXLINE( 258)												r12 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												r12 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float g12;
HXDLIN( 258)											int this46 = ((this43 >> 8) & 255);
HXDLIN( 258)											if ((this46 == 0)) {
HXLINE( 258)												g12 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												g12 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float b13;
HXDLIN( 258)											int this47 = (this43 & 255);
HXDLIN( 258)											if ((this47 == 0)) {
HXLINE( 258)												b13 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												b13 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float a22;
HXDLIN( 258)											int this48 = ((col1 >> 24) & 255);
HXDLIN( 258)											if ((this48 == 0)) {
HXLINE( 258)												a22 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												a22 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float r22;
HXDLIN( 258)											int this49 = ((col1 >> 16) & 255);
HXDLIN( 258)											if ((this49 == 0)) {
HXLINE( 258)												r22 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												r22 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float g22;
HXDLIN( 258)											int this50 = ((col1 >> 8) & 255);
HXDLIN( 258)											if ((this50 == 0)) {
HXLINE( 258)												g22 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												g22 = (( (Float)(this50) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float b23;
HXDLIN( 258)											int this51 = (col1 & 255);
HXDLIN( 258)											if ((this51 == 0)) {
HXLINE( 258)												b23 = ((Float)0.);
            											}
            											else {
HXLINE( 258)												b23 = (( (Float)(this51) ) / ( (Float)(255) ));
            											}
HXDLIN( 258)											Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 258)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 258)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 258)											int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 258)											int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 258)											int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN( 258)											{
HXLINE( 258)												int _hx_tmp10;
HXDLIN( 258)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)													_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXLINE( 258)													_hx_tmp10 = blended2;
            												}
HXDLIN( 258)												::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            											}
            										}
            										else {
HXLINE( 258)											::Dynamic this52 = undoImage3->image;
HXDLIN( 258)											int index6;
HXDLIN( 258)											if (undoImage3->useVirtualPos) {
HXLINE( 258)												index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 258)												index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 258)											int _hx_tmp11;
HXDLIN( 258)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)												_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXLINE( 258)												_hx_tmp11 = c5;
            											}
HXDLIN( 258)											::iterMagic::Iimg_obj::set(this52,index6,_hx_tmp11);
            										}
            									}
            									else {
HXLINE( 258)										if (forceClear1) {
HXLINE( 258)											::Dynamic this53 = undoImage3->image;
HXDLIN( 258)											int x5 = (dx2 - rectLeft1);
HXDLIN( 258)											int y5 = (dy2 - rectTop1);
HXDLIN( 258)											int index7;
HXDLIN( 258)											if (undoImage3->useVirtualPos) {
HXLINE( 258)												index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 258)												index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            											}
HXDLIN( 258)											::iterMagic::Iimg_obj::set(this53,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 258)			bool found1 = false;
HXDLIN( 258)			Float min9 = ( (Float)(0) );
HXDLIN( 258)			Float max1 = ( (Float)(0) );
HXDLIN( 258)			int a9 = 0;
HXDLIN( 258)			int r6 = 0;
HXDLIN( 258)			int g6 = 0;
HXDLIN( 258)			int b10 = 0;
HXDLIN( 258)			{
HXLINE( 258)				int _g_min2 = xIter31->start;
HXDLIN( 258)				int _g_max2 = xIter31->max;
HXDLIN( 258)				while((_g_min2 < _g_max2)){
HXLINE( 258)					_g_min2 = (_g_min2 + 1);
HXDLIN( 258)					int px2 = (_g_min2 - 1);
HXDLIN( 258)					Float pcx1 = (( (Float)(px2) ) - dx);
HXLINE( 695)					found1 = false;
HXLINE( 258)					{
HXLINE( 258)						int _g_min3 = yIter31->start;
HXDLIN( 258)						int _g_max3 = yIter31->max;
HXDLIN( 258)						while((_g_min3 < _g_max3)){
HXLINE( 258)							_g_min3 = (_g_min3 + 1);
HXDLIN( 258)							int py2 = (_g_min3 - 1);
HXDLIN( 258)							Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN( 258)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 258)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 258)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 258)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 258)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 258)							bool _hx_tmp12;
HXDLIN( 258)							bool _hx_tmp13;
HXDLIN( 258)							if ((ratioA1 >= 0)) {
HXLINE( 258)								_hx_tmp13 = (ratioB1 >= 0);
            							}
            							else {
HXLINE( 258)								_hx_tmp13 = false;
            							}
HXDLIN( 258)							if (_hx_tmp13) {
HXLINE( 258)								_hx_tmp12 = (ratioC1 >= 0);
            							}
            							else {
HXLINE( 258)								_hx_tmp12 = false;
            							}
HXDLIN( 258)							if (_hx_tmp12) {
HXLINE( 722)								min9 = ratioC1;
HXLINE( 258)								int i16 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN( 258)								if ((i16 > 255)) {
HXLINE(  24)									i16 = 255;
            								}
HXLINE( 258)								if ((i16 < 0)) {
HXLINE(  25)									i16 = 0;
            								}
HXLINE( 258)								a9 = i16;
HXDLIN( 258)								int i17 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN( 258)								if ((i17 > 255)) {
HXLINE(  24)									i17 = 255;
            								}
HXLINE( 258)								if ((i17 < 0)) {
HXLINE(  25)									i17 = 0;
            								}
HXLINE( 747)								r6 = i17;
HXLINE( 258)								int i18 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN( 258)								if ((i18 > 255)) {
HXLINE(  24)									i18 = 255;
            								}
HXLINE( 258)								if ((i18 < 0)) {
HXLINE(  25)									i18 = 0;
            								}
HXLINE( 748)								g6 = i18;
HXLINE( 258)								int i19 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN( 258)								if ((i19 > 255)) {
HXLINE(  24)									i19 = 255;
            								}
HXLINE( 258)								if ((i19 < 0)) {
HXLINE(  25)									i19 = 0;
            								}
HXLINE( 749)								b10 = i19;
HXLINE( 258)								{
HXLINE( 258)									int location3;
HXDLIN( 258)									if (pixelImage->useVirtualPos) {
HXLINE( 258)										location3 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 258)										location3 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            									}
HXDLIN( 258)									bool _hx_tmp14;
HXDLIN( 258)									if (pixelImage->transparent) {
HXLINE( 258)										_hx_tmp14 = (a9 < 254);
            									}
            									else {
HXLINE( 258)										_hx_tmp14 = false;
            									}
HXDLIN( 258)									if (_hx_tmp14) {
HXLINE( 258)										int this54 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN( 258)										int old1;
HXDLIN( 258)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)											old1 = ((((((this54 >> 24) & 255) << 24) | ((this54 & 255) << 16)) | (((this54 >> 8) & 255) << 8)) | ((this54 >> 16) & 255));
            										}
            										else {
HXLINE( 258)											old1 = this54;
            										}
HXDLIN( 258)										int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 258)										Float a14;
HXDLIN( 258)										int this55 = ((old1 >> 24) & 255);
HXDLIN( 258)										if ((this55 == 0)) {
HXLINE( 258)											a14 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											a14 = (( (Float)(this55) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float r13;
HXDLIN( 258)										int this56 = ((old1 >> 16) & 255);
HXDLIN( 258)										if ((this56 == 0)) {
HXLINE( 258)											r13 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											r13 = (( (Float)(this56) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float g13;
HXDLIN( 258)										int this57 = ((old1 >> 8) & 255);
HXDLIN( 258)										if ((this57 == 0)) {
HXLINE( 258)											g13 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											g13 = (( (Float)(this57) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float b14;
HXDLIN( 258)										int this58 = (old1 & 255);
HXDLIN( 258)										if ((this58 == 0)) {
HXLINE( 258)											b14 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											b14 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float a23;
HXDLIN( 258)										int this59 = ((rhs1 >> 24) & 255);
HXDLIN( 258)										if ((this59 == 0)) {
HXLINE( 258)											a23 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											a23 = (( (Float)(this59) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float r23;
HXDLIN( 258)										int this60 = ((rhs1 >> 16) & 255);
HXDLIN( 258)										if ((this60 == 0)) {
HXLINE( 258)											r23 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											r23 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float g23;
HXDLIN( 258)										int this61 = ((rhs1 >> 8) & 255);
HXDLIN( 258)										if ((this61 == 0)) {
HXLINE( 258)											g23 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											g23 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float b24;
HXDLIN( 258)										int this62 = (rhs1 & 255);
HXDLIN( 258)										if ((this62 == 0)) {
HXLINE( 258)											b24 = ((Float)0.);
            										}
            										else {
HXLINE( 258)											b24 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN( 258)										Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 258)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 258)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 258)										int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 258)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 258)										int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN( 258)										{
HXLINE( 258)											int _hx_tmp15;
HXDLIN( 258)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 258)												_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXLINE( 258)												_hx_tmp15 = blended3;
            											}
HXDLIN( 258)											::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp15);
            										}
            									}
            									else {
HXLINE( 258)										int value1;
HXDLIN( 258)										if (pixelImage->isLittle) {
HXLINE( 258)											value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXLINE( 258)											value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            										}
HXDLIN( 258)										::iterMagic::Iimg_obj::set(pixelImage->image,location3,value1);
            									}
            								}
HXLINE( 751)								found1 = true;
            							}
            							else {
HXLINE( 258)								if (found1) {
HXLINE( 258)									goto _hx_goto_375;
            								}
            							}
            						}
            						_hx_goto_375:;
            					}
            				}
            			}
            		}
HXDLIN( 258)		 ::pi_xy::algo::HitQuad v4 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 258)		 ::pi_xy::algo::HitQuad hitQuad = v4;
HXLINE( 259)		Float cx1 = h2;
HXLINE( 260)		Float cy1 = radius2;
HXLINE( 261)		Float bx1 = h2;
HXLINE( 262)		Float by1 = -(radius2);
HXLINE( 264)		Float dx3 = hSmall;
HXLINE( 265)		Float dy3 = radius2;
HXLINE( 266)		Float ax1 = hSmall;
HXLINE( 267)		Float ay1 = -(radius2);
HXLINE( 269)		temp = (px + ((bx1 * cos) - (by1 * sin)));
HXLINE( 270)		by1 = (py + ((by1 * cos) + (bx1 * sin)));
HXLINE( 271)		bx1 = temp;
HXLINE( 272)		temp = (px + ((cx1 * cos) - (cy1 * sin)));
HXLINE( 273)		cy1 = (py + ((cy1 * cos) + (cx1 * sin)));
HXLINE( 274)		cx1 = temp;
HXLINE( 276)		temp = (px + ((ax1 * cos) - (ay1 * sin)));
HXLINE( 277)		ay1 = (py + ((ay1 * cos) + (ax1 * sin)));
HXLINE( 278)		ax1 = temp;
HXLINE( 280)		temp = (px + ((dx3 * cos) - (dy3 * sin)));
HXLINE( 281)		dy3 = (py + ((dy3 * cos) + (dx3 * sin)));
HXLINE( 282)		dx3 = temp;
HXLINE( 284)		bool hasUndo2 = true;
HXDLIN( 284)		int aA2 = ((color >> 24) & 255);
HXDLIN( 284)		int rA2 = ((color >> 16) & 255);
HXDLIN( 284)		int gA2 = ((color >> 8) & 255);
HXDLIN( 284)		int bA2 = (color & 255);
HXDLIN( 284)		Float bcx2 = (bx1 - cx1);
HXDLIN( 284)		Float bcy2 = (by1 - cy1);
HXDLIN( 284)		Float acx2 = (qx - cx1);
HXDLIN( 284)		Float acy2 = (qy - cy1);
HXDLIN( 284)		Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 284)		Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 284)		Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 284)		Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 284)		 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 284)		if ((qx > bx1)) {
HXLINE( 284)			if ((qx > cx1)) {
HXLINE( 284)				int min10;
HXDLIN( 284)				if ((bx1 > cx1)) {
HXLINE( 284)					min10 = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 284)					min10 = ::Math_obj::floor(bx1);
            				}
HXDLIN( 284)				int ii_min16 = min10;
HXDLIN( 284)				int ii_max16 = ::Math_obj::ceil(qx);
HXDLIN( 284)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            			}
            			else {
HXLINE( 284)				int ii_min17 = ::Math_obj::floor(bx1);
HXDLIN( 284)				int ii_max17 = ::Math_obj::ceil(cx1);
HXDLIN( 284)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            			}
            		}
            		else {
HXLINE( 284)			if ((bx1 > cx1)) {
HXLINE( 284)				int min11;
HXDLIN( 284)				if ((qx > cx1)) {
HXLINE( 284)					min11 = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 284)					min11 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 284)				int ii_min18 = min11;
HXDLIN( 284)				int ii_max18 = ::Math_obj::ceil(bx1);
HXDLIN( 284)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            			}
            			else {
HXLINE( 284)				int ii_min19 = ::Math_obj::floor(qx);
HXDLIN( 284)				int ii_max19 = ::Math_obj::ceil(cx1);
HXDLIN( 284)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            			}
            		}
HXDLIN( 284)		 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 284)		if ((qy > by1)) {
HXLINE( 284)			if ((qy > cy1)) {
HXLINE( 284)				int min12;
HXDLIN( 284)				if ((by1 > cy1)) {
HXLINE( 284)					min12 = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 284)					min12 = ::Math_obj::floor(by1);
            				}
HXDLIN( 284)				int ii_min20 = min12;
HXDLIN( 284)				int ii_max20 = ::Math_obj::ceil(qy);
HXDLIN( 284)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            			}
            			else {
HXLINE( 284)				int ii_min21 = ::Math_obj::floor(by1);
HXDLIN( 284)				int ii_max21 = ::Math_obj::ceil(cy1);
HXDLIN( 284)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            			}
            		}
            		else {
HXLINE( 284)			if ((by1 > cy1)) {
HXLINE( 284)				int min13;
HXDLIN( 284)				if ((qy > cy1)) {
HXLINE( 284)					min13 = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 284)					min13 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 284)				int ii_min22 = min13;
HXDLIN( 284)				int ii_max22 = ::Math_obj::ceil(by1);
HXDLIN( 284)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            			}
            			else {
HXLINE( 284)				int ii_min23 = ::Math_obj::floor(qy);
HXDLIN( 284)				int ii_max23 = ::Math_obj::ceil(cy1);
HXDLIN( 284)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            			}
            		}
HXDLIN( 284)		 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 284)		if (hasUndo2) {
HXLINE( 284)			int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 284)			int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 284)			 ::Dynamic imageType2 = null();
HXDLIN( 284)			 ::pi_xy::ImageStruct this63 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 284)			if (::hx::IsNull( imageType2 )) {
HXLINE(  54)				imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 284)			::Dynamic undoImage7;
HXDLIN( 284)			switch((int)(( (int)(imageType2) ))){
            				case (int)0: {
HXLINE( 284)					 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 284)					 ::iterMagic::BytesImg b16 = byt2;
HXDLIN( 284)					{
HXLINE( 284)						b16->width = width2;
HXDLIN( 284)						b16->height = height2;
HXDLIN( 284)						b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 284)						b16->data = ::haxe::io::Bytes_obj::alloc((b16->length * 4));
HXDLIN( 284)						{
HXLINE( 284)							int len4 = b16->length;
HXDLIN( 284)							int w2 = 0;
HXDLIN( 284)							{
HXLINE( 284)								int _g40 = 0;
HXDLIN( 284)								int _g41 = b16->height;
HXDLIN( 284)								while((_g40 < _g41)){
HXLINE( 284)									_g40 = (_g40 + 1);
HXDLIN( 284)									int y6 = (_g40 - 1);
HXDLIN( 284)									{
HXLINE( 284)										int _g42 = 0;
HXDLIN( 284)										int _g43 = b16->width;
HXDLIN( 284)										while((_g42 < _g43)){
HXLINE( 284)											_g42 = (_g42 + 1);
HXDLIN( 284)											int x6 = (_g42 - 1);
HXDLIN( 284)											{
HXLINE( 284)												w2 = (w2 + 1);
HXDLIN( 284)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 284)											{
HXLINE( 284)												w2 = (w2 + 1);
HXDLIN( 284)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 284)											{
HXLINE( 284)												w2 = (w2 + 1);
HXDLIN( 284)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 284)											{
HXLINE( 284)												w2 = (w2 + 1);
HXDLIN( 284)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 284)					undoImage7 = b16;
            				}
            				break;
            				case (int)1: {
HXLINE( 284)					 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 284)					 ::iterMagic::ArrIntImg a15 = arrI2;
HXDLIN( 284)					{
HXLINE( 284)						a15->width = width2;
HXDLIN( 284)						a15->height = height2;
HXDLIN( 284)						a15->data = ::Array_obj< int >::__new(0);
HXDLIN( 284)						a15->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 284)						{
HXLINE( 284)							int _g44 = 0;
HXDLIN( 284)							int _g45 = a15->length;
HXDLIN( 284)							while((_g44 < _g45)){
HXLINE( 284)								_g44 = (_g44 + 1);
HXDLIN( 284)								int i20 = (_g44 - 1);
HXDLIN( 284)								a15->data[i20] = 0;
            							}
            						}
            					}
HXDLIN( 284)					undoImage7 = a15;
            				}
            				break;
            				case (int)2: {
HXLINE( 284)					 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 284)					 ::iterMagic::U32ArrImg b17 = u32a2;
HXDLIN( 284)					{
HXLINE( 284)						b17->width = width2;
HXDLIN( 284)						b17->height = height2;
HXDLIN( 284)						b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 284)						int size2 = (b17->length * 4);
HXDLIN( 284)						b17->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 284)						{
HXLINE( 284)							int _g46 = 0;
HXDLIN( 284)							int _g47 = b17->length;
HXDLIN( 284)							while((_g46 < _g47)){
HXLINE( 284)								_g46 = (_g46 + 1);
HXDLIN( 284)								int i21 = (_g46 - 1);
HXDLIN( 284)								{
HXLINE( 284)									 ::haxe::io::ArrayBufferViewImpl this64 = b17->data;
HXDLIN( 284)									bool undoImage8;
HXDLIN( 284)									if ((i21 >= 0)) {
HXLINE( 284)										undoImage8 = (i21 < (this64->byteLength >> 2));
            									}
            									else {
HXLINE( 284)										undoImage8 = false;
            									}
HXDLIN( 284)									if (undoImage8) {
HXLINE( 284)										 ::haxe::io::Bytes _this2 = this64->bytes;
HXDLIN( 284)										int pos2 = ((i21 << 2) + this64->byteOffset);
HXDLIN( 284)										_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 284)										_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 284)										_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 284)										_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 284)					undoImage7 = b17;
            				}
            				break;
            				case (int)3: {
HXLINE( 284)					 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 284)					 ::iterMagic::VecIntImg v5 = vec2;
HXDLIN( 284)					{
HXLINE( 284)						v5->width = width2;
HXDLIN( 284)						v5->height = height2;
HXDLIN( 284)						v5->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 284)						v5->data = ::Array_obj< int >::__new(v5->length);
HXDLIN( 284)						{
HXLINE( 284)							int _g48 = 0;
HXDLIN( 284)							int _g49 = v5->length;
HXDLIN( 284)							while((_g48 < _g49)){
HXLINE( 284)								_g48 = (_g48 + 1);
HXDLIN( 284)								int i22 = (_g48 - 1);
HXDLIN( 284)								v5->data->__unsafe_set(i22,0);
            							}
            						}
            					}
HXDLIN( 284)					undoImage7 = v5;
            				}
            				break;
            				case (int)4: {
HXLINE( 284)					 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 284)					 ::iterMagic::StackIntImg b18 = sInt2;
HXDLIN( 284)					{
HXLINE( 284)						b18->width = width2;
HXDLIN( 284)						b18->height = height2;
HXDLIN( 284)						b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 284)						b18->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 284)						{
HXLINE( 284)							int len5 = b18->length;
HXDLIN( 284)							 ::haxe::ds::GenericStack_Int d2 = b18->data;
HXDLIN( 284)							if (::hx::IsNull( d2->head )) {
HXLINE( 284)								int _g50 = 0;
HXDLIN( 284)								int _g51 = len5;
HXDLIN( 284)								while((_g50 < _g51)){
HXLINE( 284)									_g50 = (_g50 + 1);
HXDLIN( 284)									int i23 = (_g50 - 1);
HXDLIN( 284)									d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            								}
            							}
            							else {
HXLINE( 284)								int _g52 = 0;
HXDLIN( 284)								int _g53 = len5;
HXDLIN( 284)								while((_g52 < _g53)){
HXLINE( 284)									_g52 = (_g52 + 1);
HXDLIN( 284)									int i24 = (_g52 - 1);
HXDLIN( 284)									{
HXLINE( 284)										 ::haxe::ds::GenericCell_Int l2 = b18->data->head;
HXDLIN( 284)										 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 284)										{
HXLINE( 284)											int _g54 = 0;
HXDLIN( 284)											int _g55 = i24;
HXDLIN( 284)											while((_g54 < _g55)){
HXLINE( 284)												_g54 = (_g54 + 1);
HXDLIN( 284)												int i25 = (_g54 - 1);
HXLINE( 345)												prev2 = l2;
HXLINE( 346)												l2 = l2->next;
            											}
            										}
HXLINE( 284)										if (::hx::IsNull( prev2 )) {
HXLINE( 284)											b18->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 284)											l2 = null();
            										}
            										else {
HXLINE( 284)											prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 284)											l2 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 284)					undoImage7 = b18;
            				}
            				break;
            			}
HXDLIN( 284)			this63->image = undoImage7;
HXDLIN( 284)			this63->width = width2;
HXDLIN( 284)			this63->height = height2;
HXDLIN( 284)			this63->imageType = ( (int)(imageType2) );
HXDLIN( 284)			undoImage6 = this63;
HXDLIN( 284)			{
HXLINE( 284)				int rectLeft2 = xIter32->start;
HXDLIN( 284)				int rectTop2 = yIter32->start;
HXDLIN( 284)				int rectRight2 = xIter32->max;
HXDLIN( 284)				bool forceClear2 = false;
HXDLIN( 284)				{
HXLINE( 284)					int _g56 = rectTop2;
HXDLIN( 284)					int _g57 = yIter32->max;
HXDLIN( 284)					while((_g56 < _g57)){
HXLINE( 284)						_g56 = (_g56 + 1);
HXDLIN( 284)						int dy4 = (_g56 - 1);
HXDLIN( 284)						{
HXLINE( 284)							int _g58 = rectLeft2;
HXDLIN( 284)							int _g59 = rectRight2;
HXDLIN( 284)							while((_g58 < _g59)){
HXLINE( 284)								_g58 = (_g58 + 1);
HXDLIN( 284)								int dx4 = (_g58 - 1);
HXDLIN( 284)								::Dynamic this65 = pixelImage->image;
HXDLIN( 284)								int index8;
HXDLIN( 284)								if (pixelImage->useVirtualPos) {
HXLINE( 284)									index8 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 284)									index8 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            								}
HXDLIN( 284)								int c6 = ::iterMagic::Iimg_obj::get(this65,index8);
HXDLIN( 284)								int col2;
HXDLIN( 284)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 284)									col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            								}
            								else {
HXLINE( 284)									col2 = c6;
            								}
HXDLIN( 284)								bool _hx_tmp16;
HXDLIN( 284)								if (pixelImage->useMask) {
HXLINE( 284)									_hx_tmp16 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 284)									_hx_tmp16 = false;
            								}
HXDLIN( 284)								if (_hx_tmp16) {
HXLINE( 284)									 ::pi_xy::ImageStruct this66 = pixelImage->mask;
HXDLIN( 284)									::Dynamic this67 = this66->image;
HXDLIN( 284)									int index9;
HXDLIN( 284)									if (this66->useVirtualPos) {
HXLINE( 284)										index9 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this66->virtualY) * ( (Float)(this66->width) )) + dx4) - this66->virtualX));
            									}
            									else {
HXLINE( 284)										index9 = ::Std_obj::_hx_int(( (Float)(((dy4 * this66->width) + dx4)) ));
            									}
HXDLIN( 284)									int c7 = ::iterMagic::Iimg_obj::get(this67,index9);
HXDLIN( 284)									int v6;
HXDLIN( 284)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 284)										v6 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            									}
            									else {
HXLINE( 284)										v6 = c7;
            									}
HXDLIN( 284)									int maskPixel2 = v6;
HXDLIN( 284)									int this68 = col2;
HXDLIN( 284)									if ((maskPixel2 == 0)) {
HXLINE( 284)										col2 = this68;
            									}
            									else {
HXLINE( 284)										Float m02;
HXDLIN( 284)										int this69 = ((maskPixel2 >> 24) & 255);
HXDLIN( 284)										if ((this69 == 0)) {
HXLINE( 284)											m02 = ((Float)0.);
            										}
            										else {
HXLINE( 284)											m02 = (( (Float)(this69) ) / ( (Float)(255) ));
            										}
HXDLIN( 284)										Float m12;
HXDLIN( 284)										int this70 = ((maskPixel2 >> 16) & 255);
HXDLIN( 284)										if ((this70 == 0)) {
HXLINE( 284)											m12 = ((Float)0.);
            										}
            										else {
HXLINE( 284)											m12 = (( (Float)(this70) ) / ( (Float)(255) ));
            										}
HXDLIN( 284)										Float m22;
HXDLIN( 284)										int this71 = ((maskPixel2 >> 8) & 255);
HXDLIN( 284)										if ((this71 == 0)) {
HXLINE( 284)											m22 = ((Float)0.);
            										}
            										else {
HXLINE( 284)											m22 = (( (Float)(this71) ) / ( (Float)(255) ));
            										}
HXDLIN( 284)										Float m32;
HXDLIN( 284)										int this72 = (maskPixel2 & 255);
HXDLIN( 284)										if ((this72 == 0)) {
HXLINE( 284)											m32 = ((Float)0.);
            										}
            										else {
HXLINE( 284)											m32 = (( (Float)(this72) ) / ( (Float)(255) ));
            										}
HXDLIN( 284)										int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this68 >> 24) & 255)) )));
HXDLIN( 284)										int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this68 >> 16) & 255)) )));
HXDLIN( 284)										int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this68 >> 8) & 255)) )));
HXDLIN( 284)										int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this68 & 255)) )));
HXDLIN( 284)										col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 284)								if ((col2 != 0)) {
HXLINE( 284)									int x7 = (dx4 - rectLeft2);
HXDLIN( 284)									int y7 = (dy4 - rectTop2);
HXDLIN( 284)									int c8 = col2;
HXDLIN( 284)									bool _hx_tmp17;
HXDLIN( 284)									if ((((c8 >> 24) & 255) < 254)) {
HXLINE( 284)										_hx_tmp17 = undoImage6->transparent;
            									}
            									else {
HXLINE( 284)										_hx_tmp17 = false;
            									}
HXDLIN( 284)									if (_hx_tmp17) {
HXLINE( 284)										int location4;
HXDLIN( 284)										if (undoImage6->useVirtualPos) {
HXLINE( 284)											location4 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 284)											location4 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            										}
HXDLIN( 284)										int this73 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 284)										int this74;
HXDLIN( 284)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 284)											this74 = ((((((this73 >> 24) & 255) << 24) | ((this73 & 255) << 16)) | (((this73 >> 8) & 255) << 8)) | ((this73 >> 16) & 255));
            										}
            										else {
HXLINE( 284)											this74 = this73;
            										}
HXDLIN( 284)										Float a16;
HXDLIN( 284)										int this75 = ((this74 >> 24) & 255);
HXDLIN( 284)										if ((this75 == 0)) {
HXLINE( 284)											a16 = ((Float)0.);
            										}
            										else {
HXLINE( 284)											a16 = (( (Float)(this75) ) / ( (Float)(255) ));
            										}
HXDLIN( 284)										Float r14;
HXDLIN( 284)										int this76 = ((this74 >> 16) & 255);
HXDLIN( 284)										if ((this76 == 0)) {
HXLINE( 284)											r14 = ((Float)0.);
            										}
            										else {
HXLINE( 284)											r14 = (( (Float)(this76) ) / ( (Float)(255) ));
            										}
HXDLIN( 284)										Float g14;
HXDLIN( 284)										int this77 = ((this74 >> 8) & 255);
HXDLIN( 284)										if ((this77 == 0)) {
HXLINE( 284)											g14 = ((Float)0.);
            										}
            										else {
HXLINE( 284)											g14 = (( (Float)(this77) ) / ( (Float)(255) ));
            										}
HXDLIN( 284)										Float b19;
HXDLIN( 284)										int this78 = (this74 & 255);
HXDLIN( 284)										if ((this78 == 0)) {
HXLINE( 284)											b19 = ((Float)0.);
            										}
            										else {
HXLINE( 284)											b19 = (( (Float)(this78) ) / ( (Float)(255) ));
            										}
HXDLIN( 284)										Float a24;
HXDLIN( 284)										int this79 = ((col2 >> 24) & 255);
HXDLIN( 284)										if ((this79 == 0)) {
HXLINE( 284)											a24 = ((Float)0.);
            										}
            										else {
HXLINE( 284)											a24 = (( (Float)(this79) ) / ( (Float)(255) ));
            										}
HXDLIN( 284)										Float r24;
HXDLIN( 284)										int this80 = ((col2 >> 16) & 255);
HXDLIN( 284)										if ((this80 == 0)) {
HXLINE( 284)											r24 = ((Float)0.);
            										}
            										else {
HXLINE( 284)											r24 = (( (Float)(this80) ) / ( (Float)(255) ));
            										}
HXDLIN( 284)										Float g24;
HXDLIN( 284)										int this81 = ((col2 >> 8) & 255);
HXDLIN( 284)										if ((this81 == 0)) {
HXLINE( 284)											g24 = ((Float)0.);
            										}
            										else {
HXLINE( 284)											g24 = (( (Float)(this81) ) / ( (Float)(255) ));
            										}
HXDLIN( 284)										Float b25;
HXDLIN( 284)										int this82 = (col2 & 255);
HXDLIN( 284)										if ((this82 == 0)) {
HXLINE( 284)											b25 = ((Float)0.);
            										}
            										else {
HXLINE( 284)											b25 = (( (Float)(this82) ) / ( (Float)(255) ));
            										}
HXDLIN( 284)										Float a34 = (a16 * (( (Float)(1) ) - a24));
HXDLIN( 284)										int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 284)										int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 284)										int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a34) + (b25 * a24))));
HXDLIN( 284)										int a17 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 284)										int blended4 = ((((a17 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN( 284)										{
HXLINE( 284)											int _hx_tmp18;
HXDLIN( 284)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 284)												_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            											}
            											else {
HXLINE( 284)												_hx_tmp18 = blended4;
            											}
HXDLIN( 284)											::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            										}
            									}
            									else {
HXLINE( 284)										::Dynamic this83 = undoImage6->image;
HXDLIN( 284)										int index10;
HXDLIN( 284)										if (undoImage6->useVirtualPos) {
HXLINE( 284)											index10 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 284)											index10 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            										}
HXDLIN( 284)										int _hx_tmp19;
HXDLIN( 284)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 284)											_hx_tmp19 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            										}
            										else {
HXLINE( 284)											_hx_tmp19 = c8;
            										}
HXDLIN( 284)										::iterMagic::Iimg_obj::set(this83,index10,_hx_tmp19);
            									}
            								}
            								else {
HXLINE( 284)									if (forceClear2) {
HXLINE( 284)										::Dynamic this84 = undoImage6->image;
HXDLIN( 284)										int x8 = (dx4 - rectLeft2);
HXDLIN( 284)										int y8 = (dy4 - rectTop2);
HXDLIN( 284)										int index11;
HXDLIN( 284)										if (undoImage6->useVirtualPos) {
HXLINE( 284)											index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 284)											index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            										}
HXDLIN( 284)										::iterMagic::Iimg_obj::set(this84,index11,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 284)		bool found2 = false;
HXDLIN( 284)		Float min14 = ( (Float)(0) );
HXDLIN( 284)		Float max2 = ( (Float)(0) );
HXDLIN( 284)		int a18 = 0;
HXDLIN( 284)		int r9 = 0;
HXDLIN( 284)		int g9 = 0;
HXDLIN( 284)		int b26 = 0;
HXDLIN( 284)		{
HXLINE( 284)			int _g_min4 = xIter32->start;
HXDLIN( 284)			int _g_max4 = xIter32->max;
HXDLIN( 284)			while((_g_min4 < _g_max4)){
HXLINE( 284)				_g_min4 = (_g_min4 + 1);
HXDLIN( 284)				int px3 = (_g_min4 - 1);
HXDLIN( 284)				Float pcx2 = (( (Float)(px3) ) - cx1);
HXLINE( 695)				found2 = false;
HXLINE( 284)				{
HXLINE( 284)					int _g_min5 = yIter32->start;
HXDLIN( 284)					int _g_max5 = yIter32->max;
HXDLIN( 284)					while((_g_min5 < _g_max5)){
HXLINE( 284)						_g_min5 = (_g_min5 + 1);
HXDLIN( 284)						int py3 = (_g_min5 - 1);
HXDLIN( 284)						Float pcy2 = (( (Float)(py3) ) - cy1);
HXDLIN( 284)						Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 284)						Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 284)						Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 284)						Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 284)						Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 284)						bool _hx_tmp20;
HXDLIN( 284)						bool _hx_tmp21;
HXDLIN( 284)						if ((ratioA2 >= 0)) {
HXLINE( 284)							_hx_tmp21 = (ratioB2 >= 0);
            						}
            						else {
HXLINE( 284)							_hx_tmp21 = false;
            						}
HXDLIN( 284)						if (_hx_tmp21) {
HXLINE( 284)							_hx_tmp20 = (ratioC2 >= 0);
            						}
            						else {
HXLINE( 284)							_hx_tmp20 = false;
            						}
HXDLIN( 284)						if (_hx_tmp20) {
HXLINE( 284)							Float min15;
HXDLIN( 284)							if ((ratioA2 < ratioB2)) {
HXLINE( 284)								min15 = ratioA2;
            							}
            							else {
HXLINE( 284)								min15 = ratioB2;
            							}
HXDLIN( 284)							if (!((min15 < ratioC2))) {
HXLINE( 284)								min15 = ratioC2;
            							}
HXDLIN( 284)							Float max3;
HXDLIN( 284)							if ((ratioA2 > ratioB2)) {
HXLINE( 284)								max3 = ratioA2;
            							}
            							else {
HXLINE( 284)								max3 = ratioB2;
            							}
HXDLIN( 284)							if (!((max3 > ratioC2))) {
HXLINE( 284)								max3 = ratioC2;
            							}
HXLINE( 743)							max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE( 284)							Float min16;
HXDLIN( 284)							if ((min15 < max3)) {
HXLINE( 284)								min16 = min15;
            							}
            							else {
HXLINE( 284)								min16 = ((max3 + min15) / ( (Float)(2) ));
            							}
HXDLIN( 284)							int i26 = ::Std_obj::_hx_int(((( (Float)(aA2) ) * soft) * min16));
HXDLIN( 284)							if ((i26 > 255)) {
HXLINE(  24)								i26 = 255;
            							}
HXLINE( 284)							if ((i26 < 0)) {
HXLINE(  25)								i26 = 0;
            							}
HXLINE( 284)							a18 = i26;
HXDLIN( 284)							int i27 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN( 284)							if ((i27 > 255)) {
HXLINE(  24)								i27 = 255;
            							}
HXLINE( 284)							if ((i27 < 0)) {
HXLINE(  25)								i27 = 0;
            							}
HXLINE( 747)							r9 = i27;
HXLINE( 284)							int i28 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN( 284)							if ((i28 > 255)) {
HXLINE(  24)								i28 = 255;
            							}
HXLINE( 284)							if ((i28 < 0)) {
HXLINE(  25)								i28 = 0;
            							}
HXLINE( 748)							g9 = i28;
HXLINE( 284)							int i29 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN( 284)							if ((i29 > 255)) {
HXLINE(  24)								i29 = 255;
            							}
HXLINE( 284)							if ((i29 < 0)) {
HXLINE(  25)								i29 = 0;
            							}
HXLINE( 749)							b26 = i29;
HXLINE( 284)							{
HXLINE( 284)								int location5;
HXDLIN( 284)								if (pixelImage->useVirtualPos) {
HXLINE( 284)									location5 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px3) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 284)									location5 = ::Std_obj::_hx_int(( (Float)(((py3 * pixelImage->width) + px3)) ));
            								}
HXDLIN( 284)								bool _hx_tmp22;
HXDLIN( 284)								if (pixelImage->transparent) {
HXLINE( 284)									_hx_tmp22 = (a18 < 254);
            								}
            								else {
HXLINE( 284)									_hx_tmp22 = false;
            								}
HXDLIN( 284)								if (_hx_tmp22) {
HXLINE( 284)									int this85 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN( 284)									int old2;
HXDLIN( 284)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 284)										old2 = ((((((this85 >> 24) & 255) << 24) | ((this85 & 255) << 16)) | (((this85 >> 8) & 255) << 8)) | ((this85 >> 16) & 255));
            									}
            									else {
HXLINE( 284)										old2 = this85;
            									}
HXDLIN( 284)									int rhs2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
HXDLIN( 284)									Float a19;
HXDLIN( 284)									int this86 = ((old2 >> 24) & 255);
HXDLIN( 284)									if ((this86 == 0)) {
HXLINE( 284)										a19 = ((Float)0.);
            									}
            									else {
HXLINE( 284)										a19 = (( (Float)(this86) ) / ( (Float)(255) ));
            									}
HXDLIN( 284)									Float r15;
HXDLIN( 284)									int this87 = ((old2 >> 16) & 255);
HXDLIN( 284)									if ((this87 == 0)) {
HXLINE( 284)										r15 = ((Float)0.);
            									}
            									else {
HXLINE( 284)										r15 = (( (Float)(this87) ) / ( (Float)(255) ));
            									}
HXDLIN( 284)									Float g15;
HXDLIN( 284)									int this88 = ((old2 >> 8) & 255);
HXDLIN( 284)									if ((this88 == 0)) {
HXLINE( 284)										g15 = ((Float)0.);
            									}
            									else {
HXLINE( 284)										g15 = (( (Float)(this88) ) / ( (Float)(255) ));
            									}
HXDLIN( 284)									Float b110;
HXDLIN( 284)									int this89 = (old2 & 255);
HXDLIN( 284)									if ((this89 == 0)) {
HXLINE( 284)										b110 = ((Float)0.);
            									}
            									else {
HXLINE( 284)										b110 = (( (Float)(this89) ) / ( (Float)(255) ));
            									}
HXDLIN( 284)									Float a25;
HXDLIN( 284)									int this90 = ((rhs2 >> 24) & 255);
HXDLIN( 284)									if ((this90 == 0)) {
HXLINE( 284)										a25 = ((Float)0.);
            									}
            									else {
HXLINE( 284)										a25 = (( (Float)(this90) ) / ( (Float)(255) ));
            									}
HXDLIN( 284)									Float r25;
HXDLIN( 284)									int this91 = ((rhs2 >> 16) & 255);
HXDLIN( 284)									if ((this91 == 0)) {
HXLINE( 284)										r25 = ((Float)0.);
            									}
            									else {
HXLINE( 284)										r25 = (( (Float)(this91) ) / ( (Float)(255) ));
            									}
HXDLIN( 284)									Float g25;
HXDLIN( 284)									int this92 = ((rhs2 >> 8) & 255);
HXDLIN( 284)									if ((this92 == 0)) {
HXLINE( 284)										g25 = ((Float)0.);
            									}
            									else {
HXLINE( 284)										g25 = (( (Float)(this92) ) / ( (Float)(255) ));
            									}
HXDLIN( 284)									Float b27;
HXDLIN( 284)									int this93 = (rhs2 & 255);
HXDLIN( 284)									if ((this93 == 0)) {
HXLINE( 284)										b27 = ((Float)0.);
            									}
            									else {
HXLINE( 284)										b27 = (( (Float)(this93) ) / ( (Float)(255) ));
            									}
HXDLIN( 284)									Float a35 = (a19 * (( (Float)(1) ) - a25));
HXDLIN( 284)									int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 284)									int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 284)									int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a35) + (b27 * a25))));
HXDLIN( 284)									int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 284)									int blended5 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b28);
HXDLIN( 284)									{
HXLINE( 284)										int _hx_tmp23;
HXDLIN( 284)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 284)											_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            										}
            										else {
HXLINE( 284)											_hx_tmp23 = blended5;
            										}
HXDLIN( 284)										::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp23);
            									}
            								}
            								else {
HXLINE( 284)									int value2;
HXDLIN( 284)									if (pixelImage->isLittle) {
HXLINE( 284)										value2 = ((((a18 << 24) | (b26 << 16)) | (g9 << 8)) | r9);
            									}
            									else {
HXLINE( 284)										value2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
            									}
HXDLIN( 284)									::iterMagic::Iimg_obj::set(pixelImage->image,location5,value2);
            								}
            							}
HXLINE( 751)							found2 = true;
            						}
            						else {
HXLINE( 284)							if (found2) {
HXLINE( 284)								goto _hx_goto_387;
            							}
            						}
            					}
            					_hx_goto_387:;
            				}
            			}
            		}
HXDLIN( 284)		 ::pi_xy::algo::HitTri hitTriTop;
HXDLIN( 284)		if ((hasHit == false)) {
HXLINE( 284)			 ::pi_xy::algo::HitTri v7 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx1,by1,cx1,cy1,true);
HXDLIN( 284)			if (hasUndo2) {
HXLINE( 284)				v7->undoImage = undoImage6;
HXDLIN( 284)				v7->undoX = xIter32->start;
HXDLIN( 284)				v7->undoY = yIter32->start;
            			}
HXDLIN( 284)			hitTriTop = v7;
            		}
            		else {
HXLINE( 284)			hitTriTop = null();
            		}
HXLINE( 285)		Float soft3 = ( (Float)(40) );
HXDLIN( 285)		bool hasUndo3 = true;
HXDLIN( 285)		int aA3 = ((color >> 24) & 255);
HXDLIN( 285)		int rA3 = ((color >> 16) & 255);
HXDLIN( 285)		int gA3 = ((color >> 8) & 255);
HXDLIN( 285)		int bA3 = (color & 255);
HXDLIN( 285)		Float bcx3 = (ax1 - dx3);
HXDLIN( 285)		Float bcy3 = (ay1 - dy3);
HXDLIN( 285)		Float acx3 = (px - dx3);
HXDLIN( 285)		Float acy3 = (py - dy3);
HXDLIN( 285)		Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 285)		Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 285)		Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 285)		Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 285)		 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 285)		if ((px > ax1)) {
HXLINE( 285)			if ((px > dx3)) {
HXLINE( 285)				int min17;
HXDLIN( 285)				if ((ax1 > dx3)) {
HXLINE( 285)					min17 = ::Math_obj::floor(dx3);
            				}
            				else {
HXLINE( 285)					min17 = ::Math_obj::floor(ax1);
            				}
HXDLIN( 285)				int ii_min24 = min17;
HXDLIN( 285)				int ii_max24 = ::Math_obj::ceil(px);
HXDLIN( 285)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            			}
            			else {
HXLINE( 285)				int ii_min25 = ::Math_obj::floor(ax1);
HXDLIN( 285)				int ii_max25 = ::Math_obj::ceil(dx3);
HXDLIN( 285)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            			}
            		}
            		else {
HXLINE( 285)			if ((ax1 > dx3)) {
HXLINE( 285)				int min18;
HXDLIN( 285)				if ((px > dx3)) {
HXLINE( 285)					min18 = ::Math_obj::floor(dx3);
            				}
            				else {
HXLINE( 285)					min18 = ::Math_obj::ceil(px);
            				}
HXDLIN( 285)				int ii_min26 = min18;
HXDLIN( 285)				int ii_max26 = ::Math_obj::ceil(ax1);
HXDLIN( 285)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            			}
            			else {
HXLINE( 285)				int ii_min27 = ::Math_obj::floor(px);
HXDLIN( 285)				int ii_max27 = ::Math_obj::ceil(dx3);
HXDLIN( 285)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            			}
            		}
HXDLIN( 285)		 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 285)		if ((py > ay1)) {
HXLINE( 285)			if ((py > dy3)) {
HXLINE( 285)				int min19;
HXDLIN( 285)				if ((ay1 > dy3)) {
HXLINE( 285)					min19 = ::Math_obj::floor(dy3);
            				}
            				else {
HXLINE( 285)					min19 = ::Math_obj::floor(ay1);
            				}
HXDLIN( 285)				int ii_min28 = min19;
HXDLIN( 285)				int ii_max28 = ::Math_obj::ceil(py);
HXDLIN( 285)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            			}
            			else {
HXLINE( 285)				int ii_min29 = ::Math_obj::floor(ay1);
HXDLIN( 285)				int ii_max29 = ::Math_obj::ceil(dy3);
HXDLIN( 285)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            			}
            		}
            		else {
HXLINE( 285)			if ((ay1 > dy3)) {
HXLINE( 285)				int min20;
HXDLIN( 285)				if ((py > dy3)) {
HXLINE( 285)					min20 = ::Math_obj::floor(dy3);
            				}
            				else {
HXLINE( 285)					min20 = ::Math_obj::ceil(py);
            				}
HXDLIN( 285)				int ii_min30 = min20;
HXDLIN( 285)				int ii_max30 = ::Math_obj::ceil(ay1);
HXDLIN( 285)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            			}
            			else {
HXLINE( 285)				int ii_min31 = ::Math_obj::floor(py);
HXDLIN( 285)				int ii_max31 = ::Math_obj::ceil(dy3);
HXDLIN( 285)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            			}
            		}
HXDLIN( 285)		 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 285)		if (hasUndo3) {
HXLINE( 285)			int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 285)			int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 285)			 ::Dynamic imageType3 = null();
HXDLIN( 285)			 ::pi_xy::ImageStruct this94 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 285)			if (::hx::IsNull( imageType3 )) {
HXLINE(  54)				imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 285)			::Dynamic undoImage10;
HXDLIN( 285)			switch((int)(( (int)(imageType3) ))){
            				case (int)0: {
HXLINE( 285)					 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 285)					 ::iterMagic::BytesImg b29 = byt3;
HXDLIN( 285)					{
HXLINE( 285)						b29->width = width3;
HXDLIN( 285)						b29->height = height3;
HXDLIN( 285)						b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 285)						b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN( 285)						{
HXLINE( 285)							int len6 = b29->length;
HXDLIN( 285)							int w3 = 0;
HXDLIN( 285)							{
HXLINE( 285)								int _g60 = 0;
HXDLIN( 285)								int _g61 = b29->height;
HXDLIN( 285)								while((_g60 < _g61)){
HXLINE( 285)									_g60 = (_g60 + 1);
HXDLIN( 285)									int y9 = (_g60 - 1);
HXDLIN( 285)									{
HXLINE( 285)										int _g62 = 0;
HXDLIN( 285)										int _g63 = b29->width;
HXDLIN( 285)										while((_g62 < _g63)){
HXLINE( 285)											_g62 = (_g62 + 1);
HXDLIN( 285)											int x9 = (_g62 - 1);
HXDLIN( 285)											{
HXLINE( 285)												w3 = (w3 + 1);
HXDLIN( 285)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 285)											{
HXLINE( 285)												w3 = (w3 + 1);
HXDLIN( 285)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 285)											{
HXLINE( 285)												w3 = (w3 + 1);
HXDLIN( 285)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 285)											{
HXLINE( 285)												w3 = (w3 + 1);
HXDLIN( 285)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 285)					undoImage10 = b29;
            				}
            				break;
            				case (int)1: {
HXLINE( 285)					 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 285)					 ::iterMagic::ArrIntImg a26 = arrI3;
HXDLIN( 285)					{
HXLINE( 285)						a26->width = width3;
HXDLIN( 285)						a26->height = height3;
HXDLIN( 285)						a26->data = ::Array_obj< int >::__new(0);
HXDLIN( 285)						a26->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 285)						{
HXLINE( 285)							int _g64 = 0;
HXDLIN( 285)							int _g65 = a26->length;
HXDLIN( 285)							while((_g64 < _g65)){
HXLINE( 285)								_g64 = (_g64 + 1);
HXDLIN( 285)								int i30 = (_g64 - 1);
HXDLIN( 285)								a26->data[i30] = 0;
            							}
            						}
            					}
HXDLIN( 285)					undoImage10 = a26;
            				}
            				break;
            				case (int)2: {
HXLINE( 285)					 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 285)					 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN( 285)					{
HXLINE( 285)						b30->width = width3;
HXDLIN( 285)						b30->height = height3;
HXDLIN( 285)						b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 285)						int size3 = (b30->length * 4);
HXDLIN( 285)						b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 285)						{
HXLINE( 285)							int _g66 = 0;
HXDLIN( 285)							int _g67 = b30->length;
HXDLIN( 285)							while((_g66 < _g67)){
HXLINE( 285)								_g66 = (_g66 + 1);
HXDLIN( 285)								int i31 = (_g66 - 1);
HXDLIN( 285)								{
HXLINE( 285)									 ::haxe::io::ArrayBufferViewImpl this95 = b30->data;
HXDLIN( 285)									bool undoImage11;
HXDLIN( 285)									if ((i31 >= 0)) {
HXLINE( 285)										undoImage11 = (i31 < (this95->byteLength >> 2));
            									}
            									else {
HXLINE( 285)										undoImage11 = false;
            									}
HXDLIN( 285)									if (undoImage11) {
HXLINE( 285)										 ::haxe::io::Bytes _this3 = this95->bytes;
HXDLIN( 285)										int pos3 = ((i31 << 2) + this95->byteOffset);
HXDLIN( 285)										_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 285)										_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 285)										_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 285)										_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 285)					undoImage10 = b30;
            				}
            				break;
            				case (int)3: {
HXLINE( 285)					 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 285)					 ::iterMagic::VecIntImg v8 = vec3;
HXDLIN( 285)					{
HXLINE( 285)						v8->width = width3;
HXDLIN( 285)						v8->height = height3;
HXDLIN( 285)						v8->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 285)						v8->data = ::Array_obj< int >::__new(v8->length);
HXDLIN( 285)						{
HXLINE( 285)							int _g68 = 0;
HXDLIN( 285)							int _g69 = v8->length;
HXDLIN( 285)							while((_g68 < _g69)){
HXLINE( 285)								_g68 = (_g68 + 1);
HXDLIN( 285)								int i32 = (_g68 - 1);
HXDLIN( 285)								v8->data->__unsafe_set(i32,0);
            							}
            						}
            					}
HXDLIN( 285)					undoImage10 = v8;
            				}
            				break;
            				case (int)4: {
HXLINE( 285)					 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 285)					 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN( 285)					{
HXLINE( 285)						b31->width = width3;
HXDLIN( 285)						b31->height = height3;
HXDLIN( 285)						b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 285)						b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 285)						{
HXLINE( 285)							int len7 = b31->length;
HXDLIN( 285)							 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN( 285)							if (::hx::IsNull( d3->head )) {
HXLINE( 285)								int _g70 = 0;
HXDLIN( 285)								int _g71 = len7;
HXDLIN( 285)								while((_g70 < _g71)){
HXLINE( 285)									_g70 = (_g70 + 1);
HXDLIN( 285)									int i33 = (_g70 - 1);
HXDLIN( 285)									d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            								}
            							}
            							else {
HXLINE( 285)								int _g72 = 0;
HXDLIN( 285)								int _g73 = len7;
HXDLIN( 285)								while((_g72 < _g73)){
HXLINE( 285)									_g72 = (_g72 + 1);
HXDLIN( 285)									int i34 = (_g72 - 1);
HXDLIN( 285)									{
HXLINE( 285)										 ::haxe::ds::GenericCell_Int l3 = b31->data->head;
HXDLIN( 285)										 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 285)										{
HXLINE( 285)											int _g74 = 0;
HXDLIN( 285)											int _g75 = i34;
HXDLIN( 285)											while((_g74 < _g75)){
HXLINE( 285)												_g74 = (_g74 + 1);
HXDLIN( 285)												int i35 = (_g74 - 1);
HXLINE( 345)												prev3 = l3;
HXLINE( 346)												l3 = l3->next;
            											}
            										}
HXLINE( 285)										if (::hx::IsNull( prev3 )) {
HXLINE( 285)											b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 285)											l3 = null();
            										}
            										else {
HXLINE( 285)											prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 285)											l3 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 285)					undoImage10 = b31;
            				}
            				break;
            			}
HXDLIN( 285)			this94->image = undoImage10;
HXDLIN( 285)			this94->width = width3;
HXDLIN( 285)			this94->height = height3;
HXDLIN( 285)			this94->imageType = ( (int)(imageType3) );
HXDLIN( 285)			undoImage9 = this94;
HXDLIN( 285)			{
HXLINE( 285)				int rectLeft3 = xIter33->start;
HXDLIN( 285)				int rectTop3 = yIter33->start;
HXDLIN( 285)				int rectRight3 = xIter33->max;
HXDLIN( 285)				bool forceClear3 = false;
HXDLIN( 285)				{
HXLINE( 285)					int _g76 = rectTop3;
HXDLIN( 285)					int _g77 = yIter33->max;
HXDLIN( 285)					while((_g76 < _g77)){
HXLINE( 285)						_g76 = (_g76 + 1);
HXDLIN( 285)						int dy5 = (_g76 - 1);
HXDLIN( 285)						{
HXLINE( 285)							int _g78 = rectLeft3;
HXDLIN( 285)							int _g79 = rectRight3;
HXDLIN( 285)							while((_g78 < _g79)){
HXLINE( 285)								_g78 = (_g78 + 1);
HXDLIN( 285)								int dx5 = (_g78 - 1);
HXDLIN( 285)								::Dynamic this96 = pixelImage->image;
HXDLIN( 285)								int index12;
HXDLIN( 285)								if (pixelImage->useVirtualPos) {
HXLINE( 285)									index12 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx5) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 285)									index12 = ::Std_obj::_hx_int(( (Float)(((dy5 * pixelImage->width) + dx5)) ));
            								}
HXDLIN( 285)								int c9 = ::iterMagic::Iimg_obj::get(this96,index12);
HXDLIN( 285)								int col3;
HXDLIN( 285)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 285)									col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            								}
            								else {
HXLINE( 285)									col3 = c9;
            								}
HXDLIN( 285)								bool _hx_tmp24;
HXDLIN( 285)								if (pixelImage->useMask) {
HXLINE( 285)									_hx_tmp24 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 285)									_hx_tmp24 = false;
            								}
HXDLIN( 285)								if (_hx_tmp24) {
HXLINE( 285)									 ::pi_xy::ImageStruct this97 = pixelImage->mask;
HXDLIN( 285)									::Dynamic this98 = this97->image;
HXDLIN( 285)									int index13;
HXDLIN( 285)									if (this97->useVirtualPos) {
HXLINE( 285)										index13 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this97->virtualY) * ( (Float)(this97->width) )) + dx5) - this97->virtualX));
            									}
            									else {
HXLINE( 285)										index13 = ::Std_obj::_hx_int(( (Float)(((dy5 * this97->width) + dx5)) ));
            									}
HXDLIN( 285)									int c10 = ::iterMagic::Iimg_obj::get(this98,index13);
HXDLIN( 285)									int v9;
HXDLIN( 285)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 285)										v9 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            									}
            									else {
HXLINE( 285)										v9 = c10;
            									}
HXDLIN( 285)									int maskPixel3 = v9;
HXDLIN( 285)									int this99 = col3;
HXDLIN( 285)									if ((maskPixel3 == 0)) {
HXLINE( 285)										col3 = this99;
            									}
            									else {
HXLINE( 285)										Float m03;
HXDLIN( 285)										int this100 = ((maskPixel3 >> 24) & 255);
HXDLIN( 285)										if ((this100 == 0)) {
HXLINE( 285)											m03 = ((Float)0.);
            										}
            										else {
HXLINE( 285)											m03 = (( (Float)(this100) ) / ( (Float)(255) ));
            										}
HXDLIN( 285)										Float m13;
HXDLIN( 285)										int this101 = ((maskPixel3 >> 16) & 255);
HXDLIN( 285)										if ((this101 == 0)) {
HXLINE( 285)											m13 = ((Float)0.);
            										}
            										else {
HXLINE( 285)											m13 = (( (Float)(this101) ) / ( (Float)(255) ));
            										}
HXDLIN( 285)										Float m23;
HXDLIN( 285)										int this102 = ((maskPixel3 >> 8) & 255);
HXDLIN( 285)										if ((this102 == 0)) {
HXLINE( 285)											m23 = ((Float)0.);
            										}
            										else {
HXLINE( 285)											m23 = (( (Float)(this102) ) / ( (Float)(255) ));
            										}
HXDLIN( 285)										Float m33;
HXDLIN( 285)										int this103 = (maskPixel3 & 255);
HXDLIN( 285)										if ((this103 == 0)) {
HXLINE( 285)											m33 = ((Float)0.);
            										}
            										else {
HXLINE( 285)											m33 = (( (Float)(this103) ) / ( (Float)(255) ));
            										}
HXDLIN( 285)										int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this99 >> 24) & 255)) )));
HXDLIN( 285)										int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this99 >> 16) & 255)) )));
HXDLIN( 285)										int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this99 >> 8) & 255)) )));
HXDLIN( 285)										int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this99 & 255)) )));
HXDLIN( 285)										col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 285)								if ((col3 != 0)) {
HXLINE( 285)									int x10 = (dx5 - rectLeft3);
HXDLIN( 285)									int y10 = (dy5 - rectTop3);
HXDLIN( 285)									int c11 = col3;
HXDLIN( 285)									bool _hx_tmp25;
HXDLIN( 285)									if ((((c11 >> 24) & 255) < 254)) {
HXLINE( 285)										_hx_tmp25 = undoImage9->transparent;
            									}
            									else {
HXLINE( 285)										_hx_tmp25 = false;
            									}
HXDLIN( 285)									if (_hx_tmp25) {
HXLINE( 285)										int location6;
HXDLIN( 285)										if (undoImage9->useVirtualPos) {
HXLINE( 285)											location6 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 285)											location6 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            										}
HXDLIN( 285)										int this104 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 285)										int this105;
HXDLIN( 285)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 285)											this105 = ((((((this104 >> 24) & 255) << 24) | ((this104 & 255) << 16)) | (((this104 >> 8) & 255) << 8)) | ((this104 >> 16) & 255));
            										}
            										else {
HXLINE( 285)											this105 = this104;
            										}
HXDLIN( 285)										Float a110;
HXDLIN( 285)										int this106 = ((this105 >> 24) & 255);
HXDLIN( 285)										if ((this106 == 0)) {
HXLINE( 285)											a110 = ((Float)0.);
            										}
            										else {
HXLINE( 285)											a110 = (( (Float)(this106) ) / ( (Float)(255) ));
            										}
HXDLIN( 285)										Float r16;
HXDLIN( 285)										int this107 = ((this105 >> 16) & 255);
HXDLIN( 285)										if ((this107 == 0)) {
HXLINE( 285)											r16 = ((Float)0.);
            										}
            										else {
HXLINE( 285)											r16 = (( (Float)(this107) ) / ( (Float)(255) ));
            										}
HXDLIN( 285)										Float g16;
HXDLIN( 285)										int this108 = ((this105 >> 8) & 255);
HXDLIN( 285)										if ((this108 == 0)) {
HXLINE( 285)											g16 = ((Float)0.);
            										}
            										else {
HXLINE( 285)											g16 = (( (Float)(this108) ) / ( (Float)(255) ));
            										}
HXDLIN( 285)										Float b111;
HXDLIN( 285)										int this109 = (this105 & 255);
HXDLIN( 285)										if ((this109 == 0)) {
HXLINE( 285)											b111 = ((Float)0.);
            										}
            										else {
HXLINE( 285)											b111 = (( (Float)(this109) ) / ( (Float)(255) ));
            										}
HXDLIN( 285)										Float a27;
HXDLIN( 285)										int this110 = ((col3 >> 24) & 255);
HXDLIN( 285)										if ((this110 == 0)) {
HXLINE( 285)											a27 = ((Float)0.);
            										}
            										else {
HXLINE( 285)											a27 = (( (Float)(this110) ) / ( (Float)(255) ));
            										}
HXDLIN( 285)										Float r26;
HXDLIN( 285)										int this111 = ((col3 >> 16) & 255);
HXDLIN( 285)										if ((this111 == 0)) {
HXLINE( 285)											r26 = ((Float)0.);
            										}
            										else {
HXLINE( 285)											r26 = (( (Float)(this111) ) / ( (Float)(255) ));
            										}
HXDLIN( 285)										Float g26;
HXDLIN( 285)										int this112 = ((col3 >> 8) & 255);
HXDLIN( 285)										if ((this112 == 0)) {
HXLINE( 285)											g26 = ((Float)0.);
            										}
            										else {
HXLINE( 285)											g26 = (( (Float)(this112) ) / ( (Float)(255) ));
            										}
HXDLIN( 285)										Float b210;
HXDLIN( 285)										int this113 = (col3 & 255);
HXDLIN( 285)										if ((this113 == 0)) {
HXLINE( 285)											b210 = ((Float)0.);
            										}
            										else {
HXLINE( 285)											b210 = (( (Float)(this113) ) / ( (Float)(255) ));
            										}
HXDLIN( 285)										Float a36 = (a110 * (( (Float)(1) ) - a27));
HXDLIN( 285)										int r17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a27))));
HXDLIN( 285)										int g17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a27))));
HXDLIN( 285)										int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a36) + (b210 * a27))));
HXDLIN( 285)										int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a27)));
HXDLIN( 285)										int blended6 = ((((a28 << 24) | (r17 << 16)) | (g17 << 8)) | b32);
HXDLIN( 285)										{
HXLINE( 285)											int _hx_tmp26;
HXDLIN( 285)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 285)												_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            											}
            											else {
HXLINE( 285)												_hx_tmp26 = blended6;
            											}
HXDLIN( 285)											::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            										}
            									}
            									else {
HXLINE( 285)										::Dynamic this114 = undoImage9->image;
HXDLIN( 285)										int index14;
HXDLIN( 285)										if (undoImage9->useVirtualPos) {
HXLINE( 285)											index14 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 285)											index14 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            										}
HXDLIN( 285)										int _hx_tmp27;
HXDLIN( 285)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 285)											_hx_tmp27 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            										}
            										else {
HXLINE( 285)											_hx_tmp27 = c11;
            										}
HXDLIN( 285)										::iterMagic::Iimg_obj::set(this114,index14,_hx_tmp27);
            									}
            								}
            								else {
HXLINE( 285)									if (forceClear3) {
HXLINE( 285)										::Dynamic this115 = undoImage9->image;
HXDLIN( 285)										int x11 = (dx5 - rectLeft3);
HXDLIN( 285)										int y11 = (dy5 - rectTop3);
HXDLIN( 285)										int index15;
HXDLIN( 285)										if (undoImage9->useVirtualPos) {
HXLINE( 285)											index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 285)											index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            										}
HXDLIN( 285)										::iterMagic::Iimg_obj::set(this115,index15,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 285)		bool found3 = false;
HXDLIN( 285)		Float min21 = ( (Float)(0) );
HXDLIN( 285)		Float max4 = ( (Float)(0) );
HXDLIN( 285)		int a29 = 0;
HXDLIN( 285)		int r18 = 0;
HXDLIN( 285)		int g18 = 0;
HXDLIN( 285)		int b33 = 0;
HXDLIN( 285)		{
HXLINE( 285)			int _g_min6 = xIter33->start;
HXDLIN( 285)			int _g_max6 = xIter33->max;
HXDLIN( 285)			while((_g_min6 < _g_max6)){
HXLINE( 285)				_g_min6 = (_g_min6 + 1);
HXDLIN( 285)				int px4 = (_g_min6 - 1);
HXDLIN( 285)				Float pcx3 = (( (Float)(px4) ) - dx3);
HXLINE( 695)				found3 = false;
HXLINE( 285)				{
HXLINE( 285)					int _g_min7 = yIter33->start;
HXDLIN( 285)					int _g_max7 = yIter33->max;
HXDLIN( 285)					while((_g_min7 < _g_max7)){
HXLINE( 285)						_g_min7 = (_g_min7 + 1);
HXDLIN( 285)						int py4 = (_g_min7 - 1);
HXDLIN( 285)						Float pcy3 = (( (Float)(py4) ) - dy3);
HXDLIN( 285)						Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 285)						Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 285)						Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 285)						Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 285)						Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 285)						bool _hx_tmp28;
HXDLIN( 285)						bool _hx_tmp29;
HXDLIN( 285)						if ((ratioA3 >= 0)) {
HXLINE( 285)							_hx_tmp29 = (ratioB3 >= 0);
            						}
            						else {
HXLINE( 285)							_hx_tmp29 = false;
            						}
HXDLIN( 285)						if (_hx_tmp29) {
HXLINE( 285)							_hx_tmp28 = (ratioC3 >= 0);
            						}
            						else {
HXLINE( 285)							_hx_tmp28 = false;
            						}
HXDLIN( 285)						if (_hx_tmp28) {
HXLINE( 285)							Float min22;
HXDLIN( 285)							if ((ratioA3 < ratioB3)) {
HXLINE( 285)								min22 = ratioA3;
            							}
            							else {
HXLINE( 285)								min22 = ratioB3;
            							}
HXDLIN( 285)							if (!((min22 < ratioC3))) {
HXLINE( 285)								min22 = ratioC3;
            							}
HXDLIN( 285)							Float max5;
HXDLIN( 285)							if ((ratioA3 > ratioB3)) {
HXLINE( 285)								max5 = ratioA3;
            							}
            							else {
HXLINE( 285)								max5 = ratioB3;
            							}
HXDLIN( 285)							if (!((max5 > ratioC3))) {
HXLINE( 285)								max5 = ratioC3;
            							}
HXLINE( 743)							max5 = ((( (Float)(1) ) - max5) / ( (Float)(2) ));
HXLINE( 285)							Float min23;
HXDLIN( 285)							if ((min22 < max5)) {
HXLINE( 285)								min23 = min22;
            							}
            							else {
HXLINE( 285)								min23 = ((max5 + min22) / ( (Float)(2) ));
            							}
HXDLIN( 285)							int i36 = ::Std_obj::_hx_int(((( (Float)(aA3) ) * soft3) * min23));
HXDLIN( 285)							if ((i36 > 255)) {
HXLINE(  24)								i36 = 255;
            							}
HXLINE( 285)							if ((i36 < 0)) {
HXLINE(  25)								i36 = 0;
            							}
HXLINE( 285)							a29 = i36;
HXDLIN( 285)							int i37 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN( 285)							if ((i37 > 255)) {
HXLINE(  24)								i37 = 255;
            							}
HXLINE( 285)							if ((i37 < 0)) {
HXLINE(  25)								i37 = 0;
            							}
HXLINE( 747)							r18 = i37;
HXLINE( 285)							int i38 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN( 285)							if ((i38 > 255)) {
HXLINE(  24)								i38 = 255;
            							}
HXLINE( 285)							if ((i38 < 0)) {
HXLINE(  25)								i38 = 0;
            							}
HXLINE( 748)							g18 = i38;
HXLINE( 285)							int i39 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN( 285)							if ((i39 > 255)) {
HXLINE(  24)								i39 = 255;
            							}
HXLINE( 285)							if ((i39 < 0)) {
HXLINE(  25)								i39 = 0;
            							}
HXLINE( 749)							b33 = i39;
HXLINE( 285)							{
HXLINE( 285)								int location7;
HXDLIN( 285)								if (pixelImage->useVirtualPos) {
HXLINE( 285)									location7 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px4) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 285)									location7 = ::Std_obj::_hx_int(( (Float)(((py4 * pixelImage->width) + px4)) ));
            								}
HXDLIN( 285)								bool _hx_tmp30;
HXDLIN( 285)								if (pixelImage->transparent) {
HXLINE( 285)									_hx_tmp30 = (a29 < 254);
            								}
            								else {
HXLINE( 285)									_hx_tmp30 = false;
            								}
HXDLIN( 285)								if (_hx_tmp30) {
HXLINE( 285)									int this116 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN( 285)									int old3;
HXDLIN( 285)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 285)										old3 = ((((((this116 >> 24) & 255) << 24) | ((this116 & 255) << 16)) | (((this116 >> 8) & 255) << 8)) | ((this116 >> 16) & 255));
            									}
            									else {
HXLINE( 285)										old3 = this116;
            									}
HXDLIN( 285)									int rhs3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
HXDLIN( 285)									Float a111;
HXDLIN( 285)									int this117 = ((old3 >> 24) & 255);
HXDLIN( 285)									if ((this117 == 0)) {
HXLINE( 285)										a111 = ((Float)0.);
            									}
            									else {
HXLINE( 285)										a111 = (( (Float)(this117) ) / ( (Float)(255) ));
            									}
HXDLIN( 285)									Float r19;
HXDLIN( 285)									int this118 = ((old3 >> 16) & 255);
HXDLIN( 285)									if ((this118 == 0)) {
HXLINE( 285)										r19 = ((Float)0.);
            									}
            									else {
HXLINE( 285)										r19 = (( (Float)(this118) ) / ( (Float)(255) ));
            									}
HXDLIN( 285)									Float g19;
HXDLIN( 285)									int this119 = ((old3 >> 8) & 255);
HXDLIN( 285)									if ((this119 == 0)) {
HXLINE( 285)										g19 = ((Float)0.);
            									}
            									else {
HXLINE( 285)										g19 = (( (Float)(this119) ) / ( (Float)(255) ));
            									}
HXDLIN( 285)									Float b112;
HXDLIN( 285)									int this120 = (old3 & 255);
HXDLIN( 285)									if ((this120 == 0)) {
HXLINE( 285)										b112 = ((Float)0.);
            									}
            									else {
HXLINE( 285)										b112 = (( (Float)(this120) ) / ( (Float)(255) ));
            									}
HXDLIN( 285)									Float a210;
HXDLIN( 285)									int this121 = ((rhs3 >> 24) & 255);
HXDLIN( 285)									if ((this121 == 0)) {
HXLINE( 285)										a210 = ((Float)0.);
            									}
            									else {
HXLINE( 285)										a210 = (( (Float)(this121) ) / ( (Float)(255) ));
            									}
HXDLIN( 285)									Float r27;
HXDLIN( 285)									int this122 = ((rhs3 >> 16) & 255);
HXDLIN( 285)									if ((this122 == 0)) {
HXLINE( 285)										r27 = ((Float)0.);
            									}
            									else {
HXLINE( 285)										r27 = (( (Float)(this122) ) / ( (Float)(255) ));
            									}
HXDLIN( 285)									Float g27;
HXDLIN( 285)									int this123 = ((rhs3 >> 8) & 255);
HXDLIN( 285)									if ((this123 == 0)) {
HXLINE( 285)										g27 = ((Float)0.);
            									}
            									else {
HXLINE( 285)										g27 = (( (Float)(this123) ) / ( (Float)(255) ));
            									}
HXDLIN( 285)									Float b211;
HXDLIN( 285)									int this124 = (rhs3 & 255);
HXDLIN( 285)									if ((this124 == 0)) {
HXLINE( 285)										b211 = ((Float)0.);
            									}
            									else {
HXLINE( 285)										b211 = (( (Float)(this124) ) / ( (Float)(255) ));
            									}
HXDLIN( 285)									Float a37 = (a111 * (( (Float)(1) ) - a210));
HXDLIN( 285)									int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a37) + (r27 * a210))));
HXDLIN( 285)									int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a37) + (g27 * a210))));
HXDLIN( 285)									int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a37) + (b211 * a210))));
HXDLIN( 285)									int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a210)));
HXDLIN( 285)									int blended7 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b34);
HXDLIN( 285)									{
HXLINE( 285)										int _hx_tmp31;
HXDLIN( 285)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 285)											_hx_tmp31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            										}
            										else {
HXLINE( 285)											_hx_tmp31 = blended7;
            										}
HXDLIN( 285)										::iterMagic::Iimg_obj::set(pixelImage->image,location7,_hx_tmp31);
            									}
            								}
            								else {
HXLINE( 285)									int value3;
HXDLIN( 285)									if (pixelImage->isLittle) {
HXLINE( 285)										value3 = ((((a29 << 24) | (b33 << 16)) | (g18 << 8)) | r18);
            									}
            									else {
HXLINE( 285)										value3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
            									}
HXDLIN( 285)									::iterMagic::Iimg_obj::set(pixelImage->image,location7,value3);
            								}
            							}
HXLINE( 751)							found3 = true;
            						}
            						else {
HXLINE( 285)							if (found3) {
HXLINE( 285)								goto _hx_goto_399;
            							}
            						}
            					}
            					_hx_goto_399:;
            				}
            			}
            		}
HXDLIN( 285)		 ::pi_xy::algo::HitTri hitTriBottom;
HXDLIN( 285)		if ((hasHit == false)) {
HXLINE( 285)			 ::pi_xy::algo::HitTri v10 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,px,py,ax1,ay1,dx3,dy3,true);
HXDLIN( 285)			if (hasUndo3) {
HXLINE( 285)				v10->undoImage = undoImage9;
HXDLIN( 285)				v10->undoX = xIter33->start;
HXDLIN( 285)				v10->undoY = yIter33->start;
            			}
HXDLIN( 285)			hitTriBottom = v10;
            		}
            		else {
HXLINE( 285)			hitTriBottom = null();
            		}
HXLINE( 287)		if (hasHit) {
HXLINE( 288)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(2)->init(0,hitTriTop)->init(1,hitTriBottom));
HXLINE( 289)			if (::hx::IsNotNull( hitQuad )) {
HXLINE( 290)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXLINE( 291)			hitArr->triArr->push(hitQuad->triBCD);
HXLINE( 292)			return hitArr;
            		}
            		else {
HXLINE( 294)			return null();
            		}
HXLINE( 287)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(ArrowPixel_Fields__obj,fillSoftLineArrowBoth,return )

 ::pi_xy::algo::HitTriArray ArrowPixel_Fields__obj::gradThickLineArrowBoth( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float thick,int color1,int color2,::hx::Null< bool >  __o_hasHit){
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_63f36ef650858c14_301_gradThickLineArrowBoth)
HXLINE( 302)		Float goldenRatio = ((Float)1.61803398875);
HXLINE( 304)		Float o = (qy - py);
HXLINE( 305)		Float a = (qx - px);
HXLINE( 306)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE( 307)		Float theta = ::Math_obj::atan2(o,a);
HXLINE( 308)		Float thicker = ((( (Float)(2) ) * thick) * goldenRatio);
HXLINE( 309)		Float sin = ::Math_obj::sin(theta);
HXLINE( 310)		Float cos = ::Math_obj::cos(theta);
HXLINE( 311)		Float radius = (thick / ( (Float)(2) ));
HXLINE( 312)		Float radius2 = (thicker / ( (Float)(2) ));
HXLINE( 313)		Float h2 = (h / goldenRatio);
HXLINE( 314)		Float hSmall = (h - h2);
HXLINE( 316)		Float px_ = hSmall;
HXLINE( 317)		Float py_ = ((Float)0.);
HXLINE( 318)		Float temp = ((Float)0.);
HXLINE( 320)		temp = (px + ((px_ * cos) - (py_ * sin)));
HXLINE( 321)		py_ = (py + ((py_ * cos) + (px_ * sin)));
HXLINE( 322)		px_ = temp;
HXLINE( 324)		Float h1 = (h2 - hSmall);
HXDLIN( 324)		Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 324)		Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 324)		Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 324)		Float dx = ((Float)0.1);
HXDLIN( 324)		Float dy = radius1;
HXDLIN( 324)		Float cx = h1;
HXDLIN( 324)		Float cy = radius1;
HXDLIN( 324)		Float bx = h1;
HXDLIN( 324)		Float by = -(radius1);
HXDLIN( 324)		Float ax = ((Float)0.1);
HXDLIN( 324)		Float ay = -(radius1);
HXDLIN( 324)		Float temp1 = ((Float)0.);
HXLINE( 474)		temp1 = (px_ + ((ax * cos1) - (ay * sin1)));
HXLINE( 475)		ay = (py_ + ((ay * cos1) + (ax * sin1)));
HXLINE( 476)		ax = temp1;
HXLINE( 478)		temp1 = (px_ + ((bx * cos1) - (by * sin1)));
HXLINE( 479)		by = (py_ + ((by * cos1) + (bx * sin1)));
HXLINE( 480)		bx = temp1;
HXLINE( 482)		temp1 = (px_ + ((cx * cos1) - (cy * sin1)));
HXLINE( 483)		cy = (py_ + ((cy * cos1) + (cx * sin1)));
HXLINE( 484)		cx = temp1;
HXLINE( 486)		temp1 = (px_ + ((dx * cos1) - (dy * sin1)));
HXLINE( 487)		dy = (py_ + ((dy * cos1) + (dx * sin1)));
HXLINE( 488)		dx = temp1;
HXLINE( 324)		{
HXLINE( 324)			bool hasUndo = false;
HXDLIN( 324)			int aA = ((color1 >> 24) & 255);
HXDLIN( 324)			int rA = ((color1 >> 16) & 255);
HXDLIN( 324)			int gA = ((color1 >> 8) & 255);
HXDLIN( 324)			int bA = (color1 & 255);
HXDLIN( 324)			int aB = ((color1 >> 24) & 255);
HXDLIN( 324)			int rB = ((color1 >> 16) & 255);
HXDLIN( 324)			int gB = ((color1 >> 8) & 255);
HXDLIN( 324)			int bB = (color1 & 255);
HXDLIN( 324)			int aC = ((color2 >> 24) & 255);
HXDLIN( 324)			int rC = ((color2 >> 16) & 255);
HXDLIN( 324)			int gC = ((color2 >> 8) & 255);
HXDLIN( 324)			int bC = (color2 & 255);
HXDLIN( 324)			Float bcx = (bx - dx);
HXDLIN( 324)			Float bcy = (by - dy);
HXDLIN( 324)			Float acx = (ax - dx);
HXDLIN( 324)			Float acy = (ay - dy);
HXDLIN( 324)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 324)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 324)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 324)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 324)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 324)			if ((ax > bx)) {
HXLINE( 324)				if ((ax > dx)) {
HXLINE( 324)					int min;
HXDLIN( 324)					if ((bx > dx)) {
HXLINE( 324)						min = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 324)						min = ::Math_obj::floor(bx);
            					}
HXDLIN( 324)					int ii_min = min;
HXDLIN( 324)					int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 324)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXLINE( 324)					int ii_min1 = ::Math_obj::floor(bx);
HXDLIN( 324)					int ii_max1 = ::Math_obj::ceil(dx);
HXDLIN( 324)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXLINE( 324)				if ((bx > dx)) {
HXLINE( 324)					int min1;
HXDLIN( 324)					if ((ax > dx)) {
HXLINE( 324)						min1 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 324)						min1 = ::Math_obj::ceil(ax);
            					}
HXDLIN( 324)					int ii_min2 = min1;
HXDLIN( 324)					int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN( 324)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXLINE( 324)					int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 324)					int ii_max3 = ::Math_obj::ceil(dx);
HXDLIN( 324)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN( 324)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 324)			if ((ay > by)) {
HXLINE( 324)				if ((ay > dy)) {
HXLINE( 324)					int min2;
HXDLIN( 324)					if ((by > dy)) {
HXLINE( 324)						min2 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 324)						min2 = ::Math_obj::floor(by);
            					}
HXDLIN( 324)					int ii_min4 = min2;
HXDLIN( 324)					int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 324)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXLINE( 324)					int ii_min5 = ::Math_obj::floor(by);
HXDLIN( 324)					int ii_max5 = ::Math_obj::ceil(dy);
HXDLIN( 324)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXLINE( 324)				if ((by > dy)) {
HXLINE( 324)					int min3;
HXDLIN( 324)					if ((ay > dy)) {
HXLINE( 324)						min3 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 324)						min3 = ::Math_obj::ceil(ay);
            					}
HXDLIN( 324)					int ii_min6 = min3;
HXDLIN( 324)					int ii_max6 = ::Math_obj::ceil(by);
HXDLIN( 324)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXLINE( 324)					int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 324)					int ii_max7 = ::Math_obj::ceil(dy);
HXDLIN( 324)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN( 324)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 324)			if (hasUndo) {
HXLINE( 324)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 324)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 324)				 ::Dynamic imageType = null();
HXDLIN( 324)				 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 324)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 324)				::Dynamic undoImage1;
HXDLIN( 324)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXLINE( 324)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 324)						 ::iterMagic::BytesImg b = byt;
HXDLIN( 324)						{
HXLINE( 324)							b->width = width;
HXDLIN( 324)							b->height = height;
HXDLIN( 324)							b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 324)							b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 324)							{
HXLINE( 324)								int len = b->length;
HXDLIN( 324)								int w = 0;
HXDLIN( 324)								{
HXLINE( 324)									int _g = 0;
HXDLIN( 324)									int _g1 = b->height;
HXDLIN( 324)									while((_g < _g1)){
HXLINE( 324)										_g = (_g + 1);
HXDLIN( 324)										int y = (_g - 1);
HXDLIN( 324)										{
HXLINE( 324)											int _g2 = 0;
HXDLIN( 324)											int _g3 = b->width;
HXDLIN( 324)											while((_g2 < _g3)){
HXLINE( 324)												_g2 = (_g2 + 1);
HXDLIN( 324)												int x = (_g2 - 1);
HXDLIN( 324)												{
HXLINE( 324)													w = (w + 1);
HXDLIN( 324)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 324)												{
HXLINE( 324)													w = (w + 1);
HXDLIN( 324)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 324)												{
HXLINE( 324)													w = (w + 1);
HXDLIN( 324)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 324)												{
HXLINE( 324)													w = (w + 1);
HXDLIN( 324)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 324)						undoImage1 = b;
            					}
            					break;
            					case (int)1: {
HXLINE( 324)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 324)						 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 324)						{
HXLINE( 324)							a1->width = width;
HXDLIN( 324)							a1->height = height;
HXDLIN( 324)							a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 324)							a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 324)							{
HXLINE( 324)								int _g4 = 0;
HXDLIN( 324)								int _g5 = a1->length;
HXDLIN( 324)								while((_g4 < _g5)){
HXLINE( 324)									_g4 = (_g4 + 1);
HXDLIN( 324)									int i = (_g4 - 1);
HXDLIN( 324)									a1->data[i] = 0;
            								}
            							}
            						}
HXDLIN( 324)						undoImage1 = a1;
            					}
            					break;
            					case (int)2: {
HXLINE( 324)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 324)						 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 324)						{
HXLINE( 324)							b1->width = width;
HXDLIN( 324)							b1->height = height;
HXDLIN( 324)							b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 324)							int size = (b1->length * 4);
HXDLIN( 324)							b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 324)							{
HXLINE( 324)								int _g6 = 0;
HXDLIN( 324)								int _g7 = b1->length;
HXDLIN( 324)								while((_g6 < _g7)){
HXLINE( 324)									_g6 = (_g6 + 1);
HXDLIN( 324)									int i1 = (_g6 - 1);
HXDLIN( 324)									{
HXLINE( 324)										 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN( 324)										bool undoImage2;
HXDLIN( 324)										if ((i1 >= 0)) {
HXLINE( 324)											undoImage2 = (i1 < (this2->byteLength >> 2));
            										}
            										else {
HXLINE( 324)											undoImage2 = false;
            										}
HXDLIN( 324)										if (undoImage2) {
HXLINE( 324)											 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 324)											int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 324)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 324)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 324)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 324)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 324)						undoImage1 = b1;
            					}
            					break;
            					case (int)3: {
HXLINE( 324)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 324)						 ::iterMagic::VecIntImg v = vec;
HXDLIN( 324)						{
HXLINE( 324)							v->width = width;
HXDLIN( 324)							v->height = height;
HXDLIN( 324)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 324)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 324)							{
HXLINE( 324)								int _g8 = 0;
HXDLIN( 324)								int _g9 = v->length;
HXDLIN( 324)								while((_g8 < _g9)){
HXLINE( 324)									_g8 = (_g8 + 1);
HXDLIN( 324)									int i2 = (_g8 - 1);
HXDLIN( 324)									v->data->__unsafe_set(i2,0);
            								}
            							}
            						}
HXDLIN( 324)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXLINE( 324)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 324)						 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 324)						{
HXLINE( 324)							b2->width = width;
HXDLIN( 324)							b2->height = height;
HXDLIN( 324)							b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 324)							b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 324)							{
HXLINE( 324)								int len1 = b2->length;
HXDLIN( 324)								 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 324)								if (::hx::IsNull( d->head )) {
HXLINE( 324)									int _g10 = 0;
HXDLIN( 324)									int _g11 = len1;
HXDLIN( 324)									while((_g10 < _g11)){
HXLINE( 324)										_g10 = (_g10 + 1);
HXDLIN( 324)										int i3 = (_g10 - 1);
HXDLIN( 324)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXLINE( 324)									int _g12 = 0;
HXDLIN( 324)									int _g13 = len1;
HXDLIN( 324)									while((_g12 < _g13)){
HXLINE( 324)										_g12 = (_g12 + 1);
HXDLIN( 324)										int i4 = (_g12 - 1);
HXDLIN( 324)										{
HXLINE( 324)											 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 324)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 324)											{
HXLINE( 324)												int _g14 = 0;
HXDLIN( 324)												int _g15 = i4;
HXDLIN( 324)												while((_g14 < _g15)){
HXLINE( 324)													_g14 = (_g14 + 1);
HXDLIN( 324)													int i5 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE( 324)											if (::hx::IsNull( prev )) {
HXLINE( 324)												b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 324)												l = null();
            											}
            											else {
HXLINE( 324)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 324)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 324)						undoImage1 = b2;
            					}
            					break;
            				}
HXDLIN( 324)				this1->image = undoImage1;
HXDLIN( 324)				this1->width = width;
HXDLIN( 324)				this1->height = height;
HXDLIN( 324)				this1->imageType = ( (int)(imageType) );
HXDLIN( 324)				undoImage = this1;
HXDLIN( 324)				{
HXLINE( 324)					int rectLeft = xIter3->start;
HXDLIN( 324)					int rectTop = yIter3->start;
HXDLIN( 324)					int rectRight = xIter3->max;
HXDLIN( 324)					bool forceClear = false;
HXDLIN( 324)					{
HXLINE( 324)						int _g16 = rectTop;
HXDLIN( 324)						int _g17 = yIter3->max;
HXDLIN( 324)						while((_g16 < _g17)){
HXLINE( 324)							_g16 = (_g16 + 1);
HXDLIN( 324)							int dy1 = (_g16 - 1);
HXDLIN( 324)							{
HXLINE( 324)								int _g18 = rectLeft;
HXDLIN( 324)								int _g19 = rectRight;
HXDLIN( 324)								while((_g18 < _g19)){
HXLINE( 324)									_g18 = (_g18 + 1);
HXDLIN( 324)									int dx1 = (_g18 - 1);
HXDLIN( 324)									::Dynamic this3 = pixelImage->image;
HXDLIN( 324)									int index;
HXDLIN( 324)									if (pixelImage->useVirtualPos) {
HXLINE( 324)										index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 324)										index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            									}
HXDLIN( 324)									int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN( 324)									int col;
HXDLIN( 324)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 324)										col = c;
            									}
HXDLIN( 324)									bool _hx_tmp;
HXDLIN( 324)									if (pixelImage->useMask) {
HXLINE( 324)										_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE( 324)										_hx_tmp = false;
            									}
HXDLIN( 324)									if (_hx_tmp) {
HXLINE( 324)										 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN( 324)										::Dynamic this5 = this4->image;
HXDLIN( 324)										int index1;
HXDLIN( 324)										if (this4->useVirtualPos) {
HXLINE( 324)											index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            										}
            										else {
HXLINE( 324)											index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            										}
HXDLIN( 324)										int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN( 324)										int v1;
HXDLIN( 324)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)											v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXLINE( 324)											v1 = c1;
            										}
HXDLIN( 324)										int maskPixel = v1;
HXDLIN( 324)										int this6 = col;
HXDLIN( 324)										if ((maskPixel == 0)) {
HXLINE( 324)											col = this6;
            										}
            										else {
HXLINE( 324)											Float m0;
HXDLIN( 324)											int this7 = ((maskPixel >> 24) & 255);
HXDLIN( 324)											if ((this7 == 0)) {
HXLINE( 324)												m0 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float m1;
HXDLIN( 324)											int this8 = ((maskPixel >> 16) & 255);
HXDLIN( 324)											if ((this8 == 0)) {
HXLINE( 324)												m1 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float m2;
HXDLIN( 324)											int this9 = ((maskPixel >> 8) & 255);
HXDLIN( 324)											if ((this9 == 0)) {
HXLINE( 324)												m2 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float m3;
HXDLIN( 324)											int this10 = (maskPixel & 255);
HXDLIN( 324)											if ((this10 == 0)) {
HXLINE( 324)												m3 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 324)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 324)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 324)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 324)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 324)									if ((col != 0)) {
HXLINE( 324)										int x1 = (dx1 - rectLeft);
HXDLIN( 324)										int y1 = (dy1 - rectTop);
HXDLIN( 324)										int c2 = col;
HXDLIN( 324)										bool _hx_tmp1;
HXDLIN( 324)										if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 324)											_hx_tmp1 = undoImage->transparent;
            										}
            										else {
HXLINE( 324)											_hx_tmp1 = false;
            										}
HXDLIN( 324)										if (_hx_tmp1) {
HXLINE( 324)											int location;
HXDLIN( 324)											if (undoImage->useVirtualPos) {
HXLINE( 324)												location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXLINE( 324)												location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 324)											int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 324)											int this12;
HXDLIN( 324)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)												this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            											}
            											else {
HXLINE( 324)												this12 = this11;
            											}
HXDLIN( 324)											Float a11;
HXDLIN( 324)											int this13 = ((this12 >> 24) & 255);
HXDLIN( 324)											if ((this13 == 0)) {
HXLINE( 324)												a11 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float r1;
HXDLIN( 324)											int this14 = ((this12 >> 16) & 255);
HXDLIN( 324)											if ((this14 == 0)) {
HXLINE( 324)												r1 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float g1;
HXDLIN( 324)											int this15 = ((this12 >> 8) & 255);
HXDLIN( 324)											if ((this15 == 0)) {
HXLINE( 324)												g1 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float b11;
HXDLIN( 324)											int this16 = (this12 & 255);
HXDLIN( 324)											if ((this16 == 0)) {
HXLINE( 324)												b11 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float a2;
HXDLIN( 324)											int this17 = ((col >> 24) & 255);
HXDLIN( 324)											if ((this17 == 0)) {
HXLINE( 324)												a2 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float r2;
HXDLIN( 324)											int this18 = ((col >> 16) & 255);
HXDLIN( 324)											if ((this18 == 0)) {
HXLINE( 324)												r2 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float g2;
HXDLIN( 324)											int this19 = ((col >> 8) & 255);
HXDLIN( 324)											if ((this19 == 0)) {
HXLINE( 324)												g2 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float b21;
HXDLIN( 324)											int this20 = (col & 255);
HXDLIN( 324)											if ((this20 == 0)) {
HXLINE( 324)												b21 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 324)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 324)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 324)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 324)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 324)											int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 324)											{
HXLINE( 324)												int _hx_tmp2;
HXDLIN( 324)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)													_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE( 324)													_hx_tmp2 = blended;
            												}
HXDLIN( 324)												::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            											}
            										}
            										else {
HXLINE( 324)											::Dynamic this21 = undoImage->image;
HXDLIN( 324)											int index2;
HXDLIN( 324)											if (undoImage->useVirtualPos) {
HXLINE( 324)												index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXLINE( 324)												index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 324)											int _hx_tmp3;
HXDLIN( 324)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)												_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXLINE( 324)												_hx_tmp3 = c2;
            											}
HXDLIN( 324)											::iterMagic::Iimg_obj::set(this21,index2,_hx_tmp3);
            										}
            									}
            									else {
HXLINE( 324)										if (forceClear) {
HXLINE( 324)											::Dynamic this22 = undoImage->image;
HXDLIN( 324)											int x2 = (dx1 - rectLeft);
HXDLIN( 324)											int y2 = (dy1 - rectTop);
HXDLIN( 324)											int index3;
HXDLIN( 324)											if (undoImage->useVirtualPos) {
HXLINE( 324)												index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            											}
            											else {
HXLINE( 324)												index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            											}
HXDLIN( 324)											::iterMagic::Iimg_obj::set(this22,index3,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 324)			{
HXLINE( 324)				int _g_min = xIter3->start;
HXDLIN( 324)				int _g_max = xIter3->max;
HXDLIN( 324)				while((_g_min < _g_max)){
HXLINE( 324)					_g_min = (_g_min + 1);
HXDLIN( 324)					int px1 = (_g_min - 1);
HXDLIN( 324)					Float pcx = (( (Float)(px1) ) - dx);
HXDLIN( 324)					{
HXLINE( 324)						int _g_min1 = yIter3->start;
HXDLIN( 324)						int _g_max1 = yIter3->max;
HXDLIN( 324)						while((_g_min1 < _g_max1)){
HXLINE( 324)							_g_min1 = (_g_min1 + 1);
HXDLIN( 324)							int py1 = (_g_min1 - 1);
HXDLIN( 324)							Float pcy = (( (Float)(py1) ) - dy);
HXDLIN( 324)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 324)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 324)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 324)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 324)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 324)							bool _hx_tmp4;
HXDLIN( 324)							bool _hx_tmp5;
HXDLIN( 324)							if ((ratioA >= 0)) {
HXLINE( 324)								_hx_tmp5 = (ratioB >= 0);
            							}
            							else {
HXLINE( 324)								_hx_tmp5 = false;
            							}
HXDLIN( 324)							if (_hx_tmp5) {
HXLINE( 324)								_hx_tmp4 = (ratioC >= 0);
            							}
            							else {
HXLINE( 324)								_hx_tmp4 = false;
            							}
HXDLIN( 324)							if (_hx_tmp4) {
HXLINE( 324)								int i6 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA) + (( (Float)(aB) ) * ratioB)) + (( (Float)(aC) ) * ratioC)));
HXDLIN( 324)								if ((i6 > 255)) {
HXLINE(  24)									i6 = 255;
            								}
HXLINE( 324)								if ((i6 < 0)) {
HXLINE(  25)									i6 = 0;
            								}
HXLINE( 324)								int a5 = i6;
HXDLIN( 324)								int i7 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA) + (( (Float)(rB) ) * ratioB)) + (( (Float)(rC) ) * ratioC)));
HXDLIN( 324)								if ((i7 > 255)) {
HXLINE(  24)									i7 = 255;
            								}
HXLINE( 324)								if ((i7 < 0)) {
HXLINE(  25)									i7 = 0;
            								}
HXLINE( 324)								int r3 = i7;
HXDLIN( 324)								int i8 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA) + (( (Float)(gB) ) * ratioB)) + (( (Float)(gC) ) * ratioC)));
HXDLIN( 324)								if ((i8 > 255)) {
HXLINE(  24)									i8 = 255;
            								}
HXLINE( 324)								if ((i8 < 0)) {
HXLINE(  25)									i8 = 0;
            								}
HXLINE( 324)								int g3 = i8;
HXDLIN( 324)								int i9 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA) + (( (Float)(bB) ) * ratioB)) + (( (Float)(bC) ) * ratioC)));
HXDLIN( 324)								if ((i9 > 255)) {
HXLINE(  24)									i9 = 255;
            								}
HXLINE( 324)								if ((i9 < 0)) {
HXLINE(  25)									i9 = 0;
            								}
HXLINE( 324)								int b4 = i9;
HXDLIN( 324)								{
HXLINE( 324)									int location1;
HXDLIN( 324)									if (pixelImage->useVirtualPos) {
HXLINE( 324)										location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 324)										location1 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            									}
HXDLIN( 324)									bool _hx_tmp6;
HXDLIN( 324)									if (pixelImage->transparent) {
HXLINE( 324)										_hx_tmp6 = (a5 < 254);
            									}
            									else {
HXLINE( 324)										_hx_tmp6 = false;
            									}
HXDLIN( 324)									if (_hx_tmp6) {
HXLINE( 324)										int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN( 324)										int old;
HXDLIN( 324)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)											old = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            										}
            										else {
HXLINE( 324)											old = this23;
            										}
HXDLIN( 324)										int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 324)										Float a12;
HXDLIN( 324)										int this24 = ((old >> 24) & 255);
HXDLIN( 324)										if ((this24 == 0)) {
HXLINE( 324)											a12 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											a12 = (( (Float)(this24) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float r11;
HXDLIN( 324)										int this25 = ((old >> 16) & 255);
HXDLIN( 324)										if ((this25 == 0)) {
HXLINE( 324)											r11 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											r11 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float g11;
HXDLIN( 324)										int this26 = ((old >> 8) & 255);
HXDLIN( 324)										if ((this26 == 0)) {
HXLINE( 324)											g11 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											g11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float b12;
HXDLIN( 324)										int this27 = (old & 255);
HXDLIN( 324)										if ((this27 == 0)) {
HXLINE( 324)											b12 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											b12 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float a21;
HXDLIN( 324)										int this28 = ((rhs >> 24) & 255);
HXDLIN( 324)										if ((this28 == 0)) {
HXLINE( 324)											a21 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											a21 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float r21;
HXDLIN( 324)										int this29 = ((rhs >> 16) & 255);
HXDLIN( 324)										if ((this29 == 0)) {
HXLINE( 324)											r21 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											r21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float g21;
HXDLIN( 324)										int this30 = ((rhs >> 8) & 255);
HXDLIN( 324)										if ((this30 == 0)) {
HXLINE( 324)											g21 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											g21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float b22;
HXDLIN( 324)										int this31 = (rhs & 255);
HXDLIN( 324)										if ((this31 == 0)) {
HXLINE( 324)											b22 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											b22 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 324)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 324)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 324)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 324)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 324)										int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 324)										{
HXLINE( 324)											int _hx_tmp7;
HXDLIN( 324)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXLINE( 324)												_hx_tmp7 = blended1;
            											}
HXDLIN( 324)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXLINE( 324)										int value;
HXDLIN( 324)										if (pixelImage->isLittle) {
HXLINE( 324)											value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            										}
            										else {
HXLINE( 324)											value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            										}
HXDLIN( 324)										::iterMagic::Iimg_obj::set(pixelImage->image,location1,value);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 324)		{
HXLINE( 324)			bool hasHit1 = false;
HXDLIN( 324)			bool hasUndo1 = false;
HXDLIN( 324)			int aA1 = ((color2 >> 24) & 255);
HXDLIN( 324)			int rA1 = ((color2 >> 16) & 255);
HXDLIN( 324)			int gA1 = ((color2 >> 8) & 255);
HXDLIN( 324)			int bA1 = (color2 & 255);
HXDLIN( 324)			int aB1 = ((color1 >> 24) & 255);
HXDLIN( 324)			int rB1 = ((color1 >> 16) & 255);
HXDLIN( 324)			int gB1 = ((color1 >> 8) & 255);
HXDLIN( 324)			int bB1 = (color1 & 255);
HXDLIN( 324)			int aC1 = ((color2 >> 24) & 255);
HXDLIN( 324)			int rC1 = ((color2 >> 16) & 255);
HXDLIN( 324)			int gC1 = ((color2 >> 8) & 255);
HXDLIN( 324)			int bC1 = (color2 & 255);
HXDLIN( 324)			Float bcx1 = (cx - dx);
HXDLIN( 324)			Float bcy1 = (cy - dy);
HXDLIN( 324)			Float acx1 = (bx - dx);
HXDLIN( 324)			Float acy1 = (by - dy);
HXDLIN( 324)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 324)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 324)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 324)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 324)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 324)			if ((bx > cx)) {
HXLINE( 324)				if ((bx > dx)) {
HXLINE( 324)					int min4;
HXDLIN( 324)					if ((cx > dx)) {
HXLINE( 324)						min4 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 324)						min4 = ::Math_obj::floor(cx);
            					}
HXDLIN( 324)					int ii_min8 = min4;
HXDLIN( 324)					int ii_max8 = ::Math_obj::ceil(bx);
HXDLIN( 324)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXLINE( 324)					int ii_min9 = ::Math_obj::floor(cx);
HXDLIN( 324)					int ii_max9 = ::Math_obj::ceil(dx);
HXDLIN( 324)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXLINE( 324)				if ((cx > dx)) {
HXLINE( 324)					int min5;
HXDLIN( 324)					if ((bx > dx)) {
HXLINE( 324)						min5 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 324)						min5 = ::Math_obj::ceil(bx);
            					}
HXDLIN( 324)					int ii_min10 = min5;
HXDLIN( 324)					int ii_max10 = ::Math_obj::ceil(cx);
HXDLIN( 324)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXLINE( 324)					int ii_min11 = ::Math_obj::floor(bx);
HXDLIN( 324)					int ii_max11 = ::Math_obj::ceil(dx);
HXDLIN( 324)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN( 324)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 324)			if ((by > cy)) {
HXLINE( 324)				if ((by > dy)) {
HXLINE( 324)					int min6;
HXDLIN( 324)					if ((cy > dy)) {
HXLINE( 324)						min6 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 324)						min6 = ::Math_obj::floor(cy);
            					}
HXDLIN( 324)					int ii_min12 = min6;
HXDLIN( 324)					int ii_max12 = ::Math_obj::ceil(by);
HXDLIN( 324)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXLINE( 324)					int ii_min13 = ::Math_obj::floor(cy);
HXDLIN( 324)					int ii_max13 = ::Math_obj::ceil(dy);
HXDLIN( 324)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXLINE( 324)				if ((cy > dy)) {
HXLINE( 324)					int min7;
HXDLIN( 324)					if ((by > dy)) {
HXLINE( 324)						min7 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 324)						min7 = ::Math_obj::ceil(by);
            					}
HXDLIN( 324)					int ii_min14 = min7;
HXDLIN( 324)					int ii_max14 = ::Math_obj::ceil(cy);
HXDLIN( 324)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXLINE( 324)					int ii_min15 = ::Math_obj::floor(by);
HXDLIN( 324)					int ii_max15 = ::Math_obj::ceil(dy);
HXDLIN( 324)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN( 324)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 324)			if (hasUndo1) {
HXLINE( 324)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 324)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 324)				 ::Dynamic imageType1 = null();
HXDLIN( 324)				 ::pi_xy::ImageStruct this32 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 324)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 324)				::Dynamic undoImage4;
HXDLIN( 324)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXLINE( 324)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 324)						 ::iterMagic::BytesImg b6 = byt1;
HXDLIN( 324)						{
HXLINE( 324)							b6->width = width1;
HXDLIN( 324)							b6->height = height1;
HXDLIN( 324)							b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 324)							b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 324)							{
HXLINE( 324)								int len2 = b6->length;
HXDLIN( 324)								int w1 = 0;
HXDLIN( 324)								{
HXLINE( 324)									int _g20 = 0;
HXDLIN( 324)									int _g21 = b6->height;
HXDLIN( 324)									while((_g20 < _g21)){
HXLINE( 324)										_g20 = (_g20 + 1);
HXDLIN( 324)										int y3 = (_g20 - 1);
HXDLIN( 324)										{
HXLINE( 324)											int _g22 = 0;
HXDLIN( 324)											int _g23 = b6->width;
HXDLIN( 324)											while((_g22 < _g23)){
HXLINE( 324)												_g22 = (_g22 + 1);
HXDLIN( 324)												int x3 = (_g22 - 1);
HXDLIN( 324)												{
HXLINE( 324)													w1 = (w1 + 1);
HXDLIN( 324)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 324)												{
HXLINE( 324)													w1 = (w1 + 1);
HXDLIN( 324)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 324)												{
HXLINE( 324)													w1 = (w1 + 1);
HXDLIN( 324)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 324)												{
HXLINE( 324)													w1 = (w1 + 1);
HXDLIN( 324)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 324)						undoImage4 = b6;
            					}
            					break;
            					case (int)1: {
HXLINE( 324)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 324)						 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN( 324)						{
HXLINE( 324)							a7->width = width1;
HXDLIN( 324)							a7->height = height1;
HXDLIN( 324)							a7->data = ::Array_obj< int >::__new(0);
HXDLIN( 324)							a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 324)							{
HXLINE( 324)								int _g24 = 0;
HXDLIN( 324)								int _g25 = a7->length;
HXDLIN( 324)								while((_g24 < _g25)){
HXLINE( 324)									_g24 = (_g24 + 1);
HXDLIN( 324)									int i10 = (_g24 - 1);
HXDLIN( 324)									a7->data[i10] = 0;
            								}
            							}
            						}
HXDLIN( 324)						undoImage4 = a7;
            					}
            					break;
            					case (int)2: {
HXLINE( 324)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 324)						 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN( 324)						{
HXLINE( 324)							b7->width = width1;
HXDLIN( 324)							b7->height = height1;
HXDLIN( 324)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 324)							int size1 = (b7->length * 4);
HXDLIN( 324)							b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 324)							{
HXLINE( 324)								int _g26 = 0;
HXDLIN( 324)								int _g27 = b7->length;
HXDLIN( 324)								while((_g26 < _g27)){
HXLINE( 324)									_g26 = (_g26 + 1);
HXDLIN( 324)									int i11 = (_g26 - 1);
HXDLIN( 324)									{
HXLINE( 324)										 ::haxe::io::ArrayBufferViewImpl this33 = b7->data;
HXDLIN( 324)										bool undoImage5;
HXDLIN( 324)										if ((i11 >= 0)) {
HXLINE( 324)											undoImage5 = (i11 < (this33->byteLength >> 2));
            										}
            										else {
HXLINE( 324)											undoImage5 = false;
            										}
HXDLIN( 324)										if (undoImage5) {
HXLINE( 324)											 ::haxe::io::Bytes _this1 = this33->bytes;
HXDLIN( 324)											int pos1 = ((i11 << 2) + this33->byteOffset);
HXDLIN( 324)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 324)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 324)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 324)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 324)						undoImage4 = b7;
            					}
            					break;
            					case (int)3: {
HXLINE( 324)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 324)						 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 324)						{
HXLINE( 324)							v2->width = width1;
HXDLIN( 324)							v2->height = height1;
HXDLIN( 324)							v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 324)							v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 324)							{
HXLINE( 324)								int _g28 = 0;
HXDLIN( 324)								int _g29 = v2->length;
HXDLIN( 324)								while((_g28 < _g29)){
HXLINE( 324)									_g28 = (_g28 + 1);
HXDLIN( 324)									int i12 = (_g28 - 1);
HXDLIN( 324)									v2->data->__unsafe_set(i12,0);
            								}
            							}
            						}
HXDLIN( 324)						undoImage4 = v2;
            					}
            					break;
            					case (int)4: {
HXLINE( 324)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 324)						 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN( 324)						{
HXLINE( 324)							b8->width = width1;
HXDLIN( 324)							b8->height = height1;
HXDLIN( 324)							b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 324)							b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 324)							{
HXLINE( 324)								int len3 = b8->length;
HXDLIN( 324)								 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN( 324)								if (::hx::IsNull( d1->head )) {
HXLINE( 324)									int _g30 = 0;
HXDLIN( 324)									int _g31 = len3;
HXDLIN( 324)									while((_g30 < _g31)){
HXLINE( 324)										_g30 = (_g30 + 1);
HXDLIN( 324)										int i13 = (_g30 - 1);
HXDLIN( 324)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXLINE( 324)									int _g32 = 0;
HXDLIN( 324)									int _g33 = len3;
HXDLIN( 324)									while((_g32 < _g33)){
HXLINE( 324)										_g32 = (_g32 + 1);
HXDLIN( 324)										int i14 = (_g32 - 1);
HXDLIN( 324)										{
HXLINE( 324)											 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN( 324)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 324)											{
HXLINE( 324)												int _g34 = 0;
HXDLIN( 324)												int _g35 = i14;
HXDLIN( 324)												while((_g34 < _g35)){
HXLINE( 324)													_g34 = (_g34 + 1);
HXDLIN( 324)													int i15 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE( 324)											if (::hx::IsNull( prev1 )) {
HXLINE( 324)												b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 324)												l1 = null();
            											}
            											else {
HXLINE( 324)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 324)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 324)						undoImage4 = b8;
            					}
            					break;
            				}
HXDLIN( 324)				this32->image = undoImage4;
HXDLIN( 324)				this32->width = width1;
HXDLIN( 324)				this32->height = height1;
HXDLIN( 324)				this32->imageType = ( (int)(imageType1) );
HXDLIN( 324)				undoImage3 = this32;
HXDLIN( 324)				{
HXLINE( 324)					int rectLeft1 = xIter31->start;
HXDLIN( 324)					int rectTop1 = yIter31->start;
HXDLIN( 324)					int rectRight1 = xIter31->max;
HXDLIN( 324)					bool forceClear1 = false;
HXDLIN( 324)					{
HXLINE( 324)						int _g36 = rectTop1;
HXDLIN( 324)						int _g37 = yIter31->max;
HXDLIN( 324)						while((_g36 < _g37)){
HXLINE( 324)							_g36 = (_g36 + 1);
HXDLIN( 324)							int dy2 = (_g36 - 1);
HXDLIN( 324)							{
HXLINE( 324)								int _g38 = rectLeft1;
HXDLIN( 324)								int _g39 = rectRight1;
HXDLIN( 324)								while((_g38 < _g39)){
HXLINE( 324)									_g38 = (_g38 + 1);
HXDLIN( 324)									int dx2 = (_g38 - 1);
HXDLIN( 324)									::Dynamic this34 = pixelImage->image;
HXDLIN( 324)									int index4;
HXDLIN( 324)									if (pixelImage->useVirtualPos) {
HXLINE( 324)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 324)										index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            									}
HXDLIN( 324)									int c3 = ::iterMagic::Iimg_obj::get(this34,index4);
HXDLIN( 324)									int col1;
HXDLIN( 324)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)										col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXLINE( 324)										col1 = c3;
            									}
HXDLIN( 324)									bool _hx_tmp8;
HXDLIN( 324)									if (pixelImage->useMask) {
HXLINE( 324)										_hx_tmp8 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE( 324)										_hx_tmp8 = false;
            									}
HXDLIN( 324)									if (_hx_tmp8) {
HXLINE( 324)										 ::pi_xy::ImageStruct this35 = pixelImage->mask;
HXDLIN( 324)										::Dynamic this36 = this35->image;
HXDLIN( 324)										int index5;
HXDLIN( 324)										if (this35->useVirtualPos) {
HXLINE( 324)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this35->virtualY) * ( (Float)(this35->width) )) + dx2) - this35->virtualX));
            										}
            										else {
HXLINE( 324)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this35->width) + dx2)) ));
            										}
HXDLIN( 324)										int c4 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN( 324)										int v3;
HXDLIN( 324)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)											v3 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXLINE( 324)											v3 = c4;
            										}
HXDLIN( 324)										int maskPixel1 = v3;
HXDLIN( 324)										int this37 = col1;
HXDLIN( 324)										if ((maskPixel1 == 0)) {
HXLINE( 324)											col1 = this37;
            										}
            										else {
HXLINE( 324)											Float m01;
HXDLIN( 324)											int this38 = ((maskPixel1 >> 24) & 255);
HXDLIN( 324)											if ((this38 == 0)) {
HXLINE( 324)												m01 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												m01 = (( (Float)(this38) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float m11;
HXDLIN( 324)											int this39 = ((maskPixel1 >> 16) & 255);
HXDLIN( 324)											if ((this39 == 0)) {
HXLINE( 324)												m11 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												m11 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float m21;
HXDLIN( 324)											int this40 = ((maskPixel1 >> 8) & 255);
HXDLIN( 324)											if ((this40 == 0)) {
HXLINE( 324)												m21 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												m21 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float m31;
HXDLIN( 324)											int this41 = (maskPixel1 & 255);
HXDLIN( 324)											if ((this41 == 0)) {
HXLINE( 324)												m31 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												m31 = (( (Float)(this41) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this37 >> 24) & 255)) )));
HXDLIN( 324)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this37 >> 16) & 255)) )));
HXDLIN( 324)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this37 >> 8) & 255)) )));
HXDLIN( 324)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this37 & 255)) )));
HXDLIN( 324)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 324)									if ((col1 != 0)) {
HXLINE( 324)										int x4 = (dx2 - rectLeft1);
HXDLIN( 324)										int y4 = (dy2 - rectTop1);
HXDLIN( 324)										int c5 = col1;
HXDLIN( 324)										bool _hx_tmp9;
HXDLIN( 324)										if ((((c5 >> 24) & 255) < 254)) {
HXLINE( 324)											_hx_tmp9 = undoImage3->transparent;
            										}
            										else {
HXLINE( 324)											_hx_tmp9 = false;
            										}
HXDLIN( 324)										if (_hx_tmp9) {
HXLINE( 324)											int location2;
HXDLIN( 324)											if (undoImage3->useVirtualPos) {
HXLINE( 324)												location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 324)												location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 324)											int this42 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 324)											int this43;
HXDLIN( 324)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)												this43 = ((((((this42 >> 24) & 255) << 24) | ((this42 & 255) << 16)) | (((this42 >> 8) & 255) << 8)) | ((this42 >> 16) & 255));
            											}
            											else {
HXLINE( 324)												this43 = this42;
            											}
HXDLIN( 324)											Float a13;
HXDLIN( 324)											int this44 = ((this43 >> 24) & 255);
HXDLIN( 324)											if ((this44 == 0)) {
HXLINE( 324)												a13 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												a13 = (( (Float)(this44) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float r12;
HXDLIN( 324)											int this45 = ((this43 >> 16) & 255);
HXDLIN( 324)											if ((this45 == 0)) {
HXLINE( 324)												r12 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												r12 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float g12;
HXDLIN( 324)											int this46 = ((this43 >> 8) & 255);
HXDLIN( 324)											if ((this46 == 0)) {
HXLINE( 324)												g12 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												g12 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float b13;
HXDLIN( 324)											int this47 = (this43 & 255);
HXDLIN( 324)											if ((this47 == 0)) {
HXLINE( 324)												b13 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												b13 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float a22;
HXDLIN( 324)											int this48 = ((col1 >> 24) & 255);
HXDLIN( 324)											if ((this48 == 0)) {
HXLINE( 324)												a22 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												a22 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float r22;
HXDLIN( 324)											int this49 = ((col1 >> 16) & 255);
HXDLIN( 324)											if ((this49 == 0)) {
HXLINE( 324)												r22 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												r22 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float g22;
HXDLIN( 324)											int this50 = ((col1 >> 8) & 255);
HXDLIN( 324)											if ((this50 == 0)) {
HXLINE( 324)												g22 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												g22 = (( (Float)(this50) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float b23;
HXDLIN( 324)											int this51 = (col1 & 255);
HXDLIN( 324)											if ((this51 == 0)) {
HXLINE( 324)												b23 = ((Float)0.);
            											}
            											else {
HXLINE( 324)												b23 = (( (Float)(this51) ) / ( (Float)(255) ));
            											}
HXDLIN( 324)											Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 324)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 324)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 324)											int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 324)											int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 324)											int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN( 324)											{
HXLINE( 324)												int _hx_tmp10;
HXDLIN( 324)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)													_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXLINE( 324)													_hx_tmp10 = blended2;
            												}
HXDLIN( 324)												::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            											}
            										}
            										else {
HXLINE( 324)											::Dynamic this52 = undoImage3->image;
HXDLIN( 324)											int index6;
HXDLIN( 324)											if (undoImage3->useVirtualPos) {
HXLINE( 324)												index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 324)												index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 324)											int _hx_tmp11;
HXDLIN( 324)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)												_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXLINE( 324)												_hx_tmp11 = c5;
            											}
HXDLIN( 324)											::iterMagic::Iimg_obj::set(this52,index6,_hx_tmp11);
            										}
            									}
            									else {
HXLINE( 324)										if (forceClear1) {
HXLINE( 324)											::Dynamic this53 = undoImage3->image;
HXDLIN( 324)											int x5 = (dx2 - rectLeft1);
HXDLIN( 324)											int y5 = (dy2 - rectTop1);
HXDLIN( 324)											int index7;
HXDLIN( 324)											if (undoImage3->useVirtualPos) {
HXLINE( 324)												index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 324)												index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            											}
HXDLIN( 324)											::iterMagic::Iimg_obj::set(this53,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 324)			{
HXLINE( 324)				int _g_min2 = xIter31->start;
HXDLIN( 324)				int _g_max2 = xIter31->max;
HXDLIN( 324)				while((_g_min2 < _g_max2)){
HXLINE( 324)					_g_min2 = (_g_min2 + 1);
HXDLIN( 324)					int px2 = (_g_min2 - 1);
HXDLIN( 324)					Float pcx1 = (( (Float)(px2) ) - dx);
HXDLIN( 324)					{
HXLINE( 324)						int _g_min3 = yIter31->start;
HXDLIN( 324)						int _g_max3 = yIter31->max;
HXDLIN( 324)						while((_g_min3 < _g_max3)){
HXLINE( 324)							_g_min3 = (_g_min3 + 1);
HXDLIN( 324)							int py2 = (_g_min3 - 1);
HXDLIN( 324)							Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN( 324)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 324)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 324)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 324)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 324)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 324)							bool _hx_tmp12;
HXDLIN( 324)							bool _hx_tmp13;
HXDLIN( 324)							if ((ratioA1 >= 0)) {
HXLINE( 324)								_hx_tmp13 = (ratioB1 >= 0);
            							}
            							else {
HXLINE( 324)								_hx_tmp13 = false;
            							}
HXDLIN( 324)							if (_hx_tmp13) {
HXLINE( 324)								_hx_tmp12 = (ratioC1 >= 0);
            							}
            							else {
HXLINE( 324)								_hx_tmp12 = false;
            							}
HXDLIN( 324)							if (_hx_tmp12) {
HXLINE( 324)								int i16 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA1) + (( (Float)(aB1) ) * ratioB1)) + (( (Float)(aC1) ) * ratioC1)));
HXDLIN( 324)								if ((i16 > 255)) {
HXLINE(  24)									i16 = 255;
            								}
HXLINE( 324)								if ((i16 < 0)) {
HXLINE(  25)									i16 = 0;
            								}
HXLINE( 324)								int a9 = i16;
HXDLIN( 324)								int i17 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA1) + (( (Float)(rB1) ) * ratioB1)) + (( (Float)(rC1) ) * ratioC1)));
HXDLIN( 324)								if ((i17 > 255)) {
HXLINE(  24)									i17 = 255;
            								}
HXLINE( 324)								if ((i17 < 0)) {
HXLINE(  25)									i17 = 0;
            								}
HXLINE( 324)								int r6 = i17;
HXDLIN( 324)								int i18 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA1) + (( (Float)(gB1) ) * ratioB1)) + (( (Float)(gC1) ) * ratioC1)));
HXDLIN( 324)								if ((i18 > 255)) {
HXLINE(  24)									i18 = 255;
            								}
HXLINE( 324)								if ((i18 < 0)) {
HXLINE(  25)									i18 = 0;
            								}
HXLINE( 324)								int g6 = i18;
HXDLIN( 324)								int i19 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA1) + (( (Float)(bB1) ) * ratioB1)) + (( (Float)(bC1) ) * ratioC1)));
HXDLIN( 324)								if ((i19 > 255)) {
HXLINE(  24)									i19 = 255;
            								}
HXLINE( 324)								if ((i19 < 0)) {
HXLINE(  25)									i19 = 0;
            								}
HXLINE( 324)								int b10 = i19;
HXDLIN( 324)								{
HXLINE( 324)									int location3;
HXDLIN( 324)									if (pixelImage->useVirtualPos) {
HXLINE( 324)										location3 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 324)										location3 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            									}
HXDLIN( 324)									bool _hx_tmp14;
HXDLIN( 324)									if (pixelImage->transparent) {
HXLINE( 324)										_hx_tmp14 = (a9 < 254);
            									}
            									else {
HXLINE( 324)										_hx_tmp14 = false;
            									}
HXDLIN( 324)									if (_hx_tmp14) {
HXLINE( 324)										int this54 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN( 324)										int old1;
HXDLIN( 324)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)											old1 = ((((((this54 >> 24) & 255) << 24) | ((this54 & 255) << 16)) | (((this54 >> 8) & 255) << 8)) | ((this54 >> 16) & 255));
            										}
            										else {
HXLINE( 324)											old1 = this54;
            										}
HXDLIN( 324)										int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 324)										Float a14;
HXDLIN( 324)										int this55 = ((old1 >> 24) & 255);
HXDLIN( 324)										if ((this55 == 0)) {
HXLINE( 324)											a14 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											a14 = (( (Float)(this55) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float r13;
HXDLIN( 324)										int this56 = ((old1 >> 16) & 255);
HXDLIN( 324)										if ((this56 == 0)) {
HXLINE( 324)											r13 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											r13 = (( (Float)(this56) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float g13;
HXDLIN( 324)										int this57 = ((old1 >> 8) & 255);
HXDLIN( 324)										if ((this57 == 0)) {
HXLINE( 324)											g13 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											g13 = (( (Float)(this57) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float b14;
HXDLIN( 324)										int this58 = (old1 & 255);
HXDLIN( 324)										if ((this58 == 0)) {
HXLINE( 324)											b14 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											b14 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float a23;
HXDLIN( 324)										int this59 = ((rhs1 >> 24) & 255);
HXDLIN( 324)										if ((this59 == 0)) {
HXLINE( 324)											a23 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											a23 = (( (Float)(this59) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float r23;
HXDLIN( 324)										int this60 = ((rhs1 >> 16) & 255);
HXDLIN( 324)										if ((this60 == 0)) {
HXLINE( 324)											r23 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											r23 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float g23;
HXDLIN( 324)										int this61 = ((rhs1 >> 8) & 255);
HXDLIN( 324)										if ((this61 == 0)) {
HXLINE( 324)											g23 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											g23 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float b24;
HXDLIN( 324)										int this62 = (rhs1 & 255);
HXDLIN( 324)										if ((this62 == 0)) {
HXLINE( 324)											b24 = ((Float)0.);
            										}
            										else {
HXLINE( 324)											b24 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN( 324)										Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 324)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 324)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 324)										int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 324)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 324)										int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN( 324)										{
HXLINE( 324)											int _hx_tmp15;
HXDLIN( 324)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 324)												_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXLINE( 324)												_hx_tmp15 = blended3;
            											}
HXDLIN( 324)											::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp15);
            										}
            									}
            									else {
HXLINE( 324)										int value1;
HXDLIN( 324)										if (pixelImage->isLittle) {
HXLINE( 324)											value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXLINE( 324)											value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            										}
HXDLIN( 324)										::iterMagic::Iimg_obj::set(pixelImage->image,location3,value1);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 324)			if ((hasHit1 == false)) {
HXLINE( 324)				 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,cx,cy,dx,dy,true);
HXDLIN( 324)				if (hasUndo1) {
HXLINE( 324)					v4->undoImage = undoImage3;
HXDLIN( 324)					v4->undoX = xIter31->start;
HXDLIN( 324)					v4->undoY = yIter31->start;
            				}
            			}
            		}
HXDLIN( 324)		 ::pi_xy::algo::HitQuad v5 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 324)		 ::pi_xy::algo::HitQuad hitQuad = v5;
HXLINE( 325)		Float cx1 = h2;
HXLINE( 326)		Float cy1 = radius2;
HXLINE( 327)		Float bx1 = h2;
HXLINE( 328)		Float by1 = -(radius2);
HXLINE( 330)		Float dx3 = hSmall;
HXLINE( 331)		Float dy3 = radius2;
HXLINE( 332)		Float ax1 = hSmall;
HXLINE( 333)		Float ay1 = -(radius2);
HXLINE( 335)		temp = (px + ((bx1 * cos) - (by1 * sin)));
HXLINE( 336)		by1 = (py + ((by1 * cos) + (bx1 * sin)));
HXLINE( 337)		bx1 = temp;
HXLINE( 338)		temp = (px + ((cx1 * cos) - (cy1 * sin)));
HXLINE( 339)		cy1 = (py + ((cy1 * cos) + (cx1 * sin)));
HXLINE( 340)		cx1 = temp;
HXLINE( 342)		temp = (px + ((ax1 * cos) - (ay1 * sin)));
HXLINE( 343)		ay1 = (py + ((ay1 * cos) + (ax1 * sin)));
HXLINE( 344)		ax1 = temp;
HXLINE( 346)		temp = (px + ((dx3 * cos) - (dy3 * sin)));
HXLINE( 347)		dy3 = (py + ((dy3 * cos) + (dx3 * sin)));
HXLINE( 348)		dx3 = temp;
HXLINE( 350)		 ::pi_xy::pixel::_TwoGrad::TwoGrad_ twoColors =  ::pi_xy::pixel::_TwoGrad::TwoGrad__obj::__alloc( HX_CTX ,color1,color2);
HXLINE( 351)		int a15 = twoColors->colorClock;
HXDLIN( 351)		int b16 = twoColors->colorAnti;
HXDLIN( 351)		int half = ((((::Math_obj::round(((((( (Float)(((a15 >> 24) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b16 >> 24) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 24) | (::Math_obj::round(((((( (Float)(((a15 >> 16) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b16 >> 16) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 16)) | (::Math_obj::round(((((( (Float)(((a15 >> 8) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b16 >> 8) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 8)) | ::Math_obj::round(((((( (Float)((a15 & 255)) ) / ( (Float)(255) )) + (( (Float)((b16 & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))));
HXLINE( 353)		bool hasUndo2 = false;
HXDLIN( 353)		int aA2 = ((color1 >> 24) & 255);
HXDLIN( 353)		int rA2 = ((color1 >> 16) & 255);
HXDLIN( 353)		int gA2 = ((color1 >> 8) & 255);
HXDLIN( 353)		int bA2 = (color1 & 255);
HXDLIN( 353)		int aB2 = ((half >> 24) & 255);
HXDLIN( 353)		int rB2 = ((half >> 16) & 255);
HXDLIN( 353)		int gB2 = ((half >> 8) & 255);
HXDLIN( 353)		int bB2 = (half & 255);
HXDLIN( 353)		int aC2 = ((color2 >> 24) & 255);
HXDLIN( 353)		int rC2 = ((color2 >> 16) & 255);
HXDLIN( 353)		int gC2 = ((color2 >> 8) & 255);
HXDLIN( 353)		int bC2 = (color2 & 255);
HXDLIN( 353)		Float bcx2 = (bx1 - cx1);
HXDLIN( 353)		Float bcy2 = (by1 - cy1);
HXDLIN( 353)		Float acx2 = (qx - cx1);
HXDLIN( 353)		Float acy2 = (qy - cy1);
HXDLIN( 353)		Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 353)		Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 353)		Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 353)		Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 353)		 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 353)		if ((qx > bx1)) {
HXLINE( 353)			if ((qx > cx1)) {
HXLINE( 353)				int min8;
HXDLIN( 353)				if ((bx1 > cx1)) {
HXLINE( 353)					min8 = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 353)					min8 = ::Math_obj::floor(bx1);
            				}
HXDLIN( 353)				int ii_min16 = min8;
HXDLIN( 353)				int ii_max16 = ::Math_obj::ceil(qx);
HXDLIN( 353)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            			}
            			else {
HXLINE( 353)				int ii_min17 = ::Math_obj::floor(bx1);
HXDLIN( 353)				int ii_max17 = ::Math_obj::ceil(cx1);
HXDLIN( 353)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            			}
            		}
            		else {
HXLINE( 353)			if ((bx1 > cx1)) {
HXLINE( 353)				int min9;
HXDLIN( 353)				if ((qx > cx1)) {
HXLINE( 353)					min9 = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 353)					min9 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 353)				int ii_min18 = min9;
HXDLIN( 353)				int ii_max18 = ::Math_obj::ceil(bx1);
HXDLIN( 353)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            			}
            			else {
HXLINE( 353)				int ii_min19 = ::Math_obj::floor(qx);
HXDLIN( 353)				int ii_max19 = ::Math_obj::ceil(cx1);
HXDLIN( 353)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            			}
            		}
HXDLIN( 353)		 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 353)		if ((qy > by1)) {
HXLINE( 353)			if ((qy > cy1)) {
HXLINE( 353)				int min10;
HXDLIN( 353)				if ((by1 > cy1)) {
HXLINE( 353)					min10 = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 353)					min10 = ::Math_obj::floor(by1);
            				}
HXDLIN( 353)				int ii_min20 = min10;
HXDLIN( 353)				int ii_max20 = ::Math_obj::ceil(qy);
HXDLIN( 353)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            			}
            			else {
HXLINE( 353)				int ii_min21 = ::Math_obj::floor(by1);
HXDLIN( 353)				int ii_max21 = ::Math_obj::ceil(cy1);
HXDLIN( 353)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            			}
            		}
            		else {
HXLINE( 353)			if ((by1 > cy1)) {
HXLINE( 353)				int min11;
HXDLIN( 353)				if ((qy > cy1)) {
HXLINE( 353)					min11 = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 353)					min11 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 353)				int ii_min22 = min11;
HXDLIN( 353)				int ii_max22 = ::Math_obj::ceil(by1);
HXDLIN( 353)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            			}
            			else {
HXLINE( 353)				int ii_min23 = ::Math_obj::floor(qy);
HXDLIN( 353)				int ii_max23 = ::Math_obj::ceil(cy1);
HXDLIN( 353)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            			}
            		}
HXDLIN( 353)		 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 353)		if (hasUndo2) {
HXLINE( 353)			int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 353)			int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 353)			 ::Dynamic imageType2 = null();
HXDLIN( 353)			 ::pi_xy::ImageStruct this63 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 353)			if (::hx::IsNull( imageType2 )) {
HXLINE(  54)				imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 353)			::Dynamic undoImage7;
HXDLIN( 353)			switch((int)(( (int)(imageType2) ))){
            				case (int)0: {
HXLINE( 353)					 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 353)					 ::iterMagic::BytesImg b17 = byt2;
HXDLIN( 353)					{
HXLINE( 353)						b17->width = width2;
HXDLIN( 353)						b17->height = height2;
HXDLIN( 353)						b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 353)						b17->data = ::haxe::io::Bytes_obj::alloc((b17->length * 4));
HXDLIN( 353)						{
HXLINE( 353)							int len4 = b17->length;
HXDLIN( 353)							int w2 = 0;
HXDLIN( 353)							{
HXLINE( 353)								int _g40 = 0;
HXDLIN( 353)								int _g41 = b17->height;
HXDLIN( 353)								while((_g40 < _g41)){
HXLINE( 353)									_g40 = (_g40 + 1);
HXDLIN( 353)									int y6 = (_g40 - 1);
HXDLIN( 353)									{
HXLINE( 353)										int _g42 = 0;
HXDLIN( 353)										int _g43 = b17->width;
HXDLIN( 353)										while((_g42 < _g43)){
HXLINE( 353)											_g42 = (_g42 + 1);
HXDLIN( 353)											int x6 = (_g42 - 1);
HXDLIN( 353)											{
HXLINE( 353)												w2 = (w2 + 1);
HXDLIN( 353)												b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 353)											{
HXLINE( 353)												w2 = (w2 + 1);
HXDLIN( 353)												b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 353)											{
HXLINE( 353)												w2 = (w2 + 1);
HXDLIN( 353)												b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 353)											{
HXLINE( 353)												w2 = (w2 + 1);
HXDLIN( 353)												b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 353)					undoImage7 = b17;
            				}
            				break;
            				case (int)1: {
HXLINE( 353)					 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 353)					 ::iterMagic::ArrIntImg a16 = arrI2;
HXDLIN( 353)					{
HXLINE( 353)						a16->width = width2;
HXDLIN( 353)						a16->height = height2;
HXDLIN( 353)						a16->data = ::Array_obj< int >::__new(0);
HXDLIN( 353)						a16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 353)						{
HXLINE( 353)							int _g44 = 0;
HXDLIN( 353)							int _g45 = a16->length;
HXDLIN( 353)							while((_g44 < _g45)){
HXLINE( 353)								_g44 = (_g44 + 1);
HXDLIN( 353)								int i20 = (_g44 - 1);
HXDLIN( 353)								a16->data[i20] = 0;
            							}
            						}
            					}
HXDLIN( 353)					undoImage7 = a16;
            				}
            				break;
            				case (int)2: {
HXLINE( 353)					 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 353)					 ::iterMagic::U32ArrImg b18 = u32a2;
HXDLIN( 353)					{
HXLINE( 353)						b18->width = width2;
HXDLIN( 353)						b18->height = height2;
HXDLIN( 353)						b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 353)						int size2 = (b18->length * 4);
HXDLIN( 353)						b18->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 353)						{
HXLINE( 353)							int _g46 = 0;
HXDLIN( 353)							int _g47 = b18->length;
HXDLIN( 353)							while((_g46 < _g47)){
HXLINE( 353)								_g46 = (_g46 + 1);
HXDLIN( 353)								int i21 = (_g46 - 1);
HXDLIN( 353)								{
HXLINE( 353)									 ::haxe::io::ArrayBufferViewImpl this64 = b18->data;
HXDLIN( 353)									bool undoImage8;
HXDLIN( 353)									if ((i21 >= 0)) {
HXLINE( 353)										undoImage8 = (i21 < (this64->byteLength >> 2));
            									}
            									else {
HXLINE( 353)										undoImage8 = false;
            									}
HXDLIN( 353)									if (undoImage8) {
HXLINE( 353)										 ::haxe::io::Bytes _this2 = this64->bytes;
HXDLIN( 353)										int pos2 = ((i21 << 2) + this64->byteOffset);
HXDLIN( 353)										_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 353)										_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 353)										_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 353)										_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 353)					undoImage7 = b18;
            				}
            				break;
            				case (int)3: {
HXLINE( 353)					 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 353)					 ::iterMagic::VecIntImg v6 = vec2;
HXDLIN( 353)					{
HXLINE( 353)						v6->width = width2;
HXDLIN( 353)						v6->height = height2;
HXDLIN( 353)						v6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 353)						v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN( 353)						{
HXLINE( 353)							int _g48 = 0;
HXDLIN( 353)							int _g49 = v6->length;
HXDLIN( 353)							while((_g48 < _g49)){
HXLINE( 353)								_g48 = (_g48 + 1);
HXDLIN( 353)								int i22 = (_g48 - 1);
HXDLIN( 353)								v6->data->__unsafe_set(i22,0);
            							}
            						}
            					}
HXDLIN( 353)					undoImage7 = v6;
            				}
            				break;
            				case (int)4: {
HXLINE( 353)					 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 353)					 ::iterMagic::StackIntImg b19 = sInt2;
HXDLIN( 353)					{
HXLINE( 353)						b19->width = width2;
HXDLIN( 353)						b19->height = height2;
HXDLIN( 353)						b19->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 353)						b19->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 353)						{
HXLINE( 353)							int len5 = b19->length;
HXDLIN( 353)							 ::haxe::ds::GenericStack_Int d2 = b19->data;
HXDLIN( 353)							if (::hx::IsNull( d2->head )) {
HXLINE( 353)								int _g50 = 0;
HXDLIN( 353)								int _g51 = len5;
HXDLIN( 353)								while((_g50 < _g51)){
HXLINE( 353)									_g50 = (_g50 + 1);
HXDLIN( 353)									int i23 = (_g50 - 1);
HXDLIN( 353)									d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            								}
            							}
            							else {
HXLINE( 353)								int _g52 = 0;
HXDLIN( 353)								int _g53 = len5;
HXDLIN( 353)								while((_g52 < _g53)){
HXLINE( 353)									_g52 = (_g52 + 1);
HXDLIN( 353)									int i24 = (_g52 - 1);
HXDLIN( 353)									{
HXLINE( 353)										 ::haxe::ds::GenericCell_Int l2 = b19->data->head;
HXDLIN( 353)										 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 353)										{
HXLINE( 353)											int _g54 = 0;
HXDLIN( 353)											int _g55 = i24;
HXDLIN( 353)											while((_g54 < _g55)){
HXLINE( 353)												_g54 = (_g54 + 1);
HXDLIN( 353)												int i25 = (_g54 - 1);
HXLINE( 345)												prev2 = l2;
HXLINE( 346)												l2 = l2->next;
            											}
            										}
HXLINE( 353)										if (::hx::IsNull( prev2 )) {
HXLINE( 353)											b19->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 353)											l2 = null();
            										}
            										else {
HXLINE( 353)											prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 353)											l2 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 353)					undoImage7 = b19;
            				}
            				break;
            			}
HXDLIN( 353)			this63->image = undoImage7;
HXDLIN( 353)			this63->width = width2;
HXDLIN( 353)			this63->height = height2;
HXDLIN( 353)			this63->imageType = ( (int)(imageType2) );
HXDLIN( 353)			undoImage6 = this63;
HXDLIN( 353)			{
HXLINE( 353)				int rectLeft2 = xIter32->start;
HXDLIN( 353)				int rectTop2 = yIter32->start;
HXDLIN( 353)				int rectRight2 = xIter32->max;
HXDLIN( 353)				bool forceClear2 = false;
HXDLIN( 353)				{
HXLINE( 353)					int _g56 = rectTop2;
HXDLIN( 353)					int _g57 = yIter32->max;
HXDLIN( 353)					while((_g56 < _g57)){
HXLINE( 353)						_g56 = (_g56 + 1);
HXDLIN( 353)						int dy4 = (_g56 - 1);
HXDLIN( 353)						{
HXLINE( 353)							int _g58 = rectLeft2;
HXDLIN( 353)							int _g59 = rectRight2;
HXDLIN( 353)							while((_g58 < _g59)){
HXLINE( 353)								_g58 = (_g58 + 1);
HXDLIN( 353)								int dx4 = (_g58 - 1);
HXDLIN( 353)								::Dynamic this65 = pixelImage->image;
HXDLIN( 353)								int index8;
HXDLIN( 353)								if (pixelImage->useVirtualPos) {
HXLINE( 353)									index8 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 353)									index8 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            								}
HXDLIN( 353)								int c6 = ::iterMagic::Iimg_obj::get(this65,index8);
HXDLIN( 353)								int col2;
HXDLIN( 353)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 353)									col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            								}
            								else {
HXLINE( 353)									col2 = c6;
            								}
HXDLIN( 353)								bool _hx_tmp16;
HXDLIN( 353)								if (pixelImage->useMask) {
HXLINE( 353)									_hx_tmp16 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 353)									_hx_tmp16 = false;
            								}
HXDLIN( 353)								if (_hx_tmp16) {
HXLINE( 353)									 ::pi_xy::ImageStruct this66 = pixelImage->mask;
HXDLIN( 353)									::Dynamic this67 = this66->image;
HXDLIN( 353)									int index9;
HXDLIN( 353)									if (this66->useVirtualPos) {
HXLINE( 353)										index9 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this66->virtualY) * ( (Float)(this66->width) )) + dx4) - this66->virtualX));
            									}
            									else {
HXLINE( 353)										index9 = ::Std_obj::_hx_int(( (Float)(((dy4 * this66->width) + dx4)) ));
            									}
HXDLIN( 353)									int c7 = ::iterMagic::Iimg_obj::get(this67,index9);
HXDLIN( 353)									int v7;
HXDLIN( 353)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 353)										v7 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            									}
            									else {
HXLINE( 353)										v7 = c7;
            									}
HXDLIN( 353)									int maskPixel2 = v7;
HXDLIN( 353)									int this68 = col2;
HXDLIN( 353)									if ((maskPixel2 == 0)) {
HXLINE( 353)										col2 = this68;
            									}
            									else {
HXLINE( 353)										Float m02;
HXDLIN( 353)										int this69 = ((maskPixel2 >> 24) & 255);
HXDLIN( 353)										if ((this69 == 0)) {
HXLINE( 353)											m02 = ((Float)0.);
            										}
            										else {
HXLINE( 353)											m02 = (( (Float)(this69) ) / ( (Float)(255) ));
            										}
HXDLIN( 353)										Float m12;
HXDLIN( 353)										int this70 = ((maskPixel2 >> 16) & 255);
HXDLIN( 353)										if ((this70 == 0)) {
HXLINE( 353)											m12 = ((Float)0.);
            										}
            										else {
HXLINE( 353)											m12 = (( (Float)(this70) ) / ( (Float)(255) ));
            										}
HXDLIN( 353)										Float m22;
HXDLIN( 353)										int this71 = ((maskPixel2 >> 8) & 255);
HXDLIN( 353)										if ((this71 == 0)) {
HXLINE( 353)											m22 = ((Float)0.);
            										}
            										else {
HXLINE( 353)											m22 = (( (Float)(this71) ) / ( (Float)(255) ));
            										}
HXDLIN( 353)										Float m32;
HXDLIN( 353)										int this72 = (maskPixel2 & 255);
HXDLIN( 353)										if ((this72 == 0)) {
HXLINE( 353)											m32 = ((Float)0.);
            										}
            										else {
HXLINE( 353)											m32 = (( (Float)(this72) ) / ( (Float)(255) ));
            										}
HXDLIN( 353)										int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this68 >> 24) & 255)) )));
HXDLIN( 353)										int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this68 >> 16) & 255)) )));
HXDLIN( 353)										int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this68 >> 8) & 255)) )));
HXDLIN( 353)										int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this68 & 255)) )));
HXDLIN( 353)										col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 353)								if ((col2 != 0)) {
HXLINE( 353)									int x7 = (dx4 - rectLeft2);
HXDLIN( 353)									int y7 = (dy4 - rectTop2);
HXDLIN( 353)									int c8 = col2;
HXDLIN( 353)									bool _hx_tmp17;
HXDLIN( 353)									if ((((c8 >> 24) & 255) < 254)) {
HXLINE( 353)										_hx_tmp17 = undoImage6->transparent;
            									}
            									else {
HXLINE( 353)										_hx_tmp17 = false;
            									}
HXDLIN( 353)									if (_hx_tmp17) {
HXLINE( 353)										int location4;
HXDLIN( 353)										if (undoImage6->useVirtualPos) {
HXLINE( 353)											location4 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 353)											location4 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            										}
HXDLIN( 353)										int this73 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 353)										int this74;
HXDLIN( 353)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 353)											this74 = ((((((this73 >> 24) & 255) << 24) | ((this73 & 255) << 16)) | (((this73 >> 8) & 255) << 8)) | ((this73 >> 16) & 255));
            										}
            										else {
HXLINE( 353)											this74 = this73;
            										}
HXDLIN( 353)										Float a17;
HXDLIN( 353)										int this75 = ((this74 >> 24) & 255);
HXDLIN( 353)										if ((this75 == 0)) {
HXLINE( 353)											a17 = ((Float)0.);
            										}
            										else {
HXLINE( 353)											a17 = (( (Float)(this75) ) / ( (Float)(255) ));
            										}
HXDLIN( 353)										Float r14;
HXDLIN( 353)										int this76 = ((this74 >> 16) & 255);
HXDLIN( 353)										if ((this76 == 0)) {
HXLINE( 353)											r14 = ((Float)0.);
            										}
            										else {
HXLINE( 353)											r14 = (( (Float)(this76) ) / ( (Float)(255) ));
            										}
HXDLIN( 353)										Float g14;
HXDLIN( 353)										int this77 = ((this74 >> 8) & 255);
HXDLIN( 353)										if ((this77 == 0)) {
HXLINE( 353)											g14 = ((Float)0.);
            										}
            										else {
HXLINE( 353)											g14 = (( (Float)(this77) ) / ( (Float)(255) ));
            										}
HXDLIN( 353)										Float b110;
HXDLIN( 353)										int this78 = (this74 & 255);
HXDLIN( 353)										if ((this78 == 0)) {
HXLINE( 353)											b110 = ((Float)0.);
            										}
            										else {
HXLINE( 353)											b110 = (( (Float)(this78) ) / ( (Float)(255) ));
            										}
HXDLIN( 353)										Float a24;
HXDLIN( 353)										int this79 = ((col2 >> 24) & 255);
HXDLIN( 353)										if ((this79 == 0)) {
HXLINE( 353)											a24 = ((Float)0.);
            										}
            										else {
HXLINE( 353)											a24 = (( (Float)(this79) ) / ( (Float)(255) ));
            										}
HXDLIN( 353)										Float r24;
HXDLIN( 353)										int this80 = ((col2 >> 16) & 255);
HXDLIN( 353)										if ((this80 == 0)) {
HXLINE( 353)											r24 = ((Float)0.);
            										}
            										else {
HXLINE( 353)											r24 = (( (Float)(this80) ) / ( (Float)(255) ));
            										}
HXDLIN( 353)										Float g24;
HXDLIN( 353)										int this81 = ((col2 >> 8) & 255);
HXDLIN( 353)										if ((this81 == 0)) {
HXLINE( 353)											g24 = ((Float)0.);
            										}
            										else {
HXLINE( 353)											g24 = (( (Float)(this81) ) / ( (Float)(255) ));
            										}
HXDLIN( 353)										Float b25;
HXDLIN( 353)										int this82 = (col2 & 255);
HXDLIN( 353)										if ((this82 == 0)) {
HXLINE( 353)											b25 = ((Float)0.);
            										}
            										else {
HXLINE( 353)											b25 = (( (Float)(this82) ) / ( (Float)(255) ));
            										}
HXDLIN( 353)										Float a34 = (a17 * (( (Float)(1) ) - a24));
HXDLIN( 353)										int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 353)										int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 353)										int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a34) + (b25 * a24))));
HXDLIN( 353)										int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 353)										int blended4 = ((((a18 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN( 353)										{
HXLINE( 353)											int _hx_tmp18;
HXDLIN( 353)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 353)												_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            											}
            											else {
HXLINE( 353)												_hx_tmp18 = blended4;
            											}
HXDLIN( 353)											::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            										}
            									}
            									else {
HXLINE( 353)										::Dynamic this83 = undoImage6->image;
HXDLIN( 353)										int index10;
HXDLIN( 353)										if (undoImage6->useVirtualPos) {
HXLINE( 353)											index10 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 353)											index10 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            										}
HXDLIN( 353)										int _hx_tmp19;
HXDLIN( 353)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 353)											_hx_tmp19 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            										}
            										else {
HXLINE( 353)											_hx_tmp19 = c8;
            										}
HXDLIN( 353)										::iterMagic::Iimg_obj::set(this83,index10,_hx_tmp19);
            									}
            								}
            								else {
HXLINE( 353)									if (forceClear2) {
HXLINE( 353)										::Dynamic this84 = undoImage6->image;
HXDLIN( 353)										int x8 = (dx4 - rectLeft2);
HXDLIN( 353)										int y8 = (dy4 - rectTop2);
HXDLIN( 353)										int index11;
HXDLIN( 353)										if (undoImage6->useVirtualPos) {
HXLINE( 353)											index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 353)											index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            										}
HXDLIN( 353)										::iterMagic::Iimg_obj::set(this84,index11,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 353)		{
HXLINE( 353)			int _g_min4 = xIter32->start;
HXDLIN( 353)			int _g_max4 = xIter32->max;
HXDLIN( 353)			while((_g_min4 < _g_max4)){
HXLINE( 353)				_g_min4 = (_g_min4 + 1);
HXDLIN( 353)				int px3 = (_g_min4 - 1);
HXDLIN( 353)				Float pcx2 = (( (Float)(px3) ) - cx1);
HXDLIN( 353)				{
HXLINE( 353)					int _g_min5 = yIter32->start;
HXDLIN( 353)					int _g_max5 = yIter32->max;
HXDLIN( 353)					while((_g_min5 < _g_max5)){
HXLINE( 353)						_g_min5 = (_g_min5 + 1);
HXDLIN( 353)						int py3 = (_g_min5 - 1);
HXDLIN( 353)						Float pcy2 = (( (Float)(py3) ) - cy1);
HXDLIN( 353)						Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 353)						Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 353)						Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 353)						Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 353)						Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 353)						bool _hx_tmp20;
HXDLIN( 353)						bool _hx_tmp21;
HXDLIN( 353)						if ((ratioA2 >= 0)) {
HXLINE( 353)							_hx_tmp21 = (ratioB2 >= 0);
            						}
            						else {
HXLINE( 353)							_hx_tmp21 = false;
            						}
HXDLIN( 353)						if (_hx_tmp21) {
HXLINE( 353)							_hx_tmp20 = (ratioC2 >= 0);
            						}
            						else {
HXLINE( 353)							_hx_tmp20 = false;
            						}
HXDLIN( 353)						if (_hx_tmp20) {
HXLINE( 353)							int i26 = ::Std_obj::_hx_int((((( (Float)(aA2) ) * ratioA2) + (( (Float)(aB2) ) * ratioB2)) + (( (Float)(aC2) ) * ratioC2)));
HXDLIN( 353)							if ((i26 > 255)) {
HXLINE(  24)								i26 = 255;
            							}
HXLINE( 353)							if ((i26 < 0)) {
HXLINE(  25)								i26 = 0;
            							}
HXLINE( 353)							int a19 = i26;
HXDLIN( 353)							int i27 = ::Std_obj::_hx_int((((( (Float)(rA2) ) * ratioA2) + (( (Float)(rB2) ) * ratioB2)) + (( (Float)(rC2) ) * ratioC2)));
HXDLIN( 353)							if ((i27 > 255)) {
HXLINE(  24)								i27 = 255;
            							}
HXLINE( 353)							if ((i27 < 0)) {
HXLINE(  25)								i27 = 0;
            							}
HXLINE( 353)							int r9 = i27;
HXDLIN( 353)							int i28 = ::Std_obj::_hx_int((((( (Float)(gA2) ) * ratioA2) + (( (Float)(gB2) ) * ratioB2)) + (( (Float)(gC2) ) * ratioC2)));
HXDLIN( 353)							if ((i28 > 255)) {
HXLINE(  24)								i28 = 255;
            							}
HXLINE( 353)							if ((i28 < 0)) {
HXLINE(  25)								i28 = 0;
            							}
HXLINE( 353)							int g9 = i28;
HXDLIN( 353)							int i29 = ::Std_obj::_hx_int((((( (Float)(bA2) ) * ratioA2) + (( (Float)(bB2) ) * ratioB2)) + (( (Float)(bC2) ) * ratioC2)));
HXDLIN( 353)							if ((i29 > 255)) {
HXLINE(  24)								i29 = 255;
            							}
HXLINE( 353)							if ((i29 < 0)) {
HXLINE(  25)								i29 = 0;
            							}
HXLINE( 353)							int b26 = i29;
HXDLIN( 353)							{
HXLINE( 353)								int location5;
HXDLIN( 353)								if (pixelImage->useVirtualPos) {
HXLINE( 353)									location5 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px3) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 353)									location5 = ::Std_obj::_hx_int(( (Float)(((py3 * pixelImage->width) + px3)) ));
            								}
HXDLIN( 353)								bool _hx_tmp22;
HXDLIN( 353)								if (pixelImage->transparent) {
HXLINE( 353)									_hx_tmp22 = (a19 < 254);
            								}
            								else {
HXLINE( 353)									_hx_tmp22 = false;
            								}
HXDLIN( 353)								if (_hx_tmp22) {
HXLINE( 353)									int this85 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN( 353)									int old2;
HXDLIN( 353)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 353)										old2 = ((((((this85 >> 24) & 255) << 24) | ((this85 & 255) << 16)) | (((this85 >> 8) & 255) << 8)) | ((this85 >> 16) & 255));
            									}
            									else {
HXLINE( 353)										old2 = this85;
            									}
HXDLIN( 353)									int rhs2 = ((((a19 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
HXDLIN( 353)									Float a110;
HXDLIN( 353)									int this86 = ((old2 >> 24) & 255);
HXDLIN( 353)									if ((this86 == 0)) {
HXLINE( 353)										a110 = ((Float)0.);
            									}
            									else {
HXLINE( 353)										a110 = (( (Float)(this86) ) / ( (Float)(255) ));
            									}
HXDLIN( 353)									Float r15;
HXDLIN( 353)									int this87 = ((old2 >> 16) & 255);
HXDLIN( 353)									if ((this87 == 0)) {
HXLINE( 353)										r15 = ((Float)0.);
            									}
            									else {
HXLINE( 353)										r15 = (( (Float)(this87) ) / ( (Float)(255) ));
            									}
HXDLIN( 353)									Float g15;
HXDLIN( 353)									int this88 = ((old2 >> 8) & 255);
HXDLIN( 353)									if ((this88 == 0)) {
HXLINE( 353)										g15 = ((Float)0.);
            									}
            									else {
HXLINE( 353)										g15 = (( (Float)(this88) ) / ( (Float)(255) ));
            									}
HXDLIN( 353)									Float b111;
HXDLIN( 353)									int this89 = (old2 & 255);
HXDLIN( 353)									if ((this89 == 0)) {
HXLINE( 353)										b111 = ((Float)0.);
            									}
            									else {
HXLINE( 353)										b111 = (( (Float)(this89) ) / ( (Float)(255) ));
            									}
HXDLIN( 353)									Float a25;
HXDLIN( 353)									int this90 = ((rhs2 >> 24) & 255);
HXDLIN( 353)									if ((this90 == 0)) {
HXLINE( 353)										a25 = ((Float)0.);
            									}
            									else {
HXLINE( 353)										a25 = (( (Float)(this90) ) / ( (Float)(255) ));
            									}
HXDLIN( 353)									Float r25;
HXDLIN( 353)									int this91 = ((rhs2 >> 16) & 255);
HXDLIN( 353)									if ((this91 == 0)) {
HXLINE( 353)										r25 = ((Float)0.);
            									}
            									else {
HXLINE( 353)										r25 = (( (Float)(this91) ) / ( (Float)(255) ));
            									}
HXDLIN( 353)									Float g25;
HXDLIN( 353)									int this92 = ((rhs2 >> 8) & 255);
HXDLIN( 353)									if ((this92 == 0)) {
HXLINE( 353)										g25 = ((Float)0.);
            									}
            									else {
HXLINE( 353)										g25 = (( (Float)(this92) ) / ( (Float)(255) ));
            									}
HXDLIN( 353)									Float b27;
HXDLIN( 353)									int this93 = (rhs2 & 255);
HXDLIN( 353)									if ((this93 == 0)) {
HXLINE( 353)										b27 = ((Float)0.);
            									}
            									else {
HXLINE( 353)										b27 = (( (Float)(this93) ) / ( (Float)(255) ));
            									}
HXDLIN( 353)									Float a35 = (a110 * (( (Float)(1) ) - a25));
HXDLIN( 353)									int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 353)									int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 353)									int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a35) + (b27 * a25))));
HXDLIN( 353)									int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 353)									int blended5 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b28);
HXDLIN( 353)									{
HXLINE( 353)										int _hx_tmp23;
HXDLIN( 353)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 353)											_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            										}
            										else {
HXLINE( 353)											_hx_tmp23 = blended5;
            										}
HXDLIN( 353)										::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp23);
            									}
            								}
            								else {
HXLINE( 353)									int value2;
HXDLIN( 353)									if (pixelImage->isLittle) {
HXLINE( 353)										value2 = ((((a19 << 24) | (b26 << 16)) | (g9 << 8)) | r9);
            									}
            									else {
HXLINE( 353)										value2 = ((((a19 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
            									}
HXDLIN( 353)									::iterMagic::Iimg_obj::set(pixelImage->image,location5,value2);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 353)		 ::pi_xy::algo::HitTri hitTriTop;
HXDLIN( 353)		if ((hasHit == false)) {
HXLINE( 353)			 ::pi_xy::algo::HitTri v8 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx1,by1,cx1,cy1,true);
HXDLIN( 353)			if (hasUndo2) {
HXLINE( 353)				v8->undoImage = undoImage6;
HXDLIN( 353)				v8->undoX = xIter32->start;
HXDLIN( 353)				v8->undoY = yIter32->start;
            			}
HXDLIN( 353)			hitTriTop = v8;
            		}
            		else {
HXLINE( 353)			hitTriTop = null();
            		}
HXLINE( 354)		bool hasUndo3 = false;
HXDLIN( 354)		int aA3 = ((color1 >> 24) & 255);
HXDLIN( 354)		int rA3 = ((color1 >> 16) & 255);
HXDLIN( 354)		int gA3 = ((color1 >> 8) & 255);
HXDLIN( 354)		int bA3 = (color1 & 255);
HXDLIN( 354)		int aB3 = ((half >> 24) & 255);
HXDLIN( 354)		int rB3 = ((half >> 16) & 255);
HXDLIN( 354)		int gB3 = ((half >> 8) & 255);
HXDLIN( 354)		int bB3 = (half & 255);
HXDLIN( 354)		int aC3 = ((color2 >> 24) & 255);
HXDLIN( 354)		int rC3 = ((color2 >> 16) & 255);
HXDLIN( 354)		int gC3 = ((color2 >> 8) & 255);
HXDLIN( 354)		int bC3 = (color2 & 255);
HXDLIN( 354)		Float bcx3 = (ax1 - dx3);
HXDLIN( 354)		Float bcy3 = (ay1 - dy3);
HXDLIN( 354)		Float acx3 = (px - dx3);
HXDLIN( 354)		Float acy3 = (py - dy3);
HXDLIN( 354)		Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 354)		Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 354)		Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 354)		Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 354)		 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 354)		if ((px > ax1)) {
HXLINE( 354)			if ((px > dx3)) {
HXLINE( 354)				int min12;
HXDLIN( 354)				if ((ax1 > dx3)) {
HXLINE( 354)					min12 = ::Math_obj::floor(dx3);
            				}
            				else {
HXLINE( 354)					min12 = ::Math_obj::floor(ax1);
            				}
HXDLIN( 354)				int ii_min24 = min12;
HXDLIN( 354)				int ii_max24 = ::Math_obj::ceil(px);
HXDLIN( 354)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            			}
            			else {
HXLINE( 354)				int ii_min25 = ::Math_obj::floor(ax1);
HXDLIN( 354)				int ii_max25 = ::Math_obj::ceil(dx3);
HXDLIN( 354)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            			}
            		}
            		else {
HXLINE( 354)			if ((ax1 > dx3)) {
HXLINE( 354)				int min13;
HXDLIN( 354)				if ((px > dx3)) {
HXLINE( 354)					min13 = ::Math_obj::floor(dx3);
            				}
            				else {
HXLINE( 354)					min13 = ::Math_obj::ceil(px);
            				}
HXDLIN( 354)				int ii_min26 = min13;
HXDLIN( 354)				int ii_max26 = ::Math_obj::ceil(ax1);
HXDLIN( 354)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            			}
            			else {
HXLINE( 354)				int ii_min27 = ::Math_obj::floor(px);
HXDLIN( 354)				int ii_max27 = ::Math_obj::ceil(dx3);
HXDLIN( 354)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            			}
            		}
HXDLIN( 354)		 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 354)		if ((py > ay1)) {
HXLINE( 354)			if ((py > dy3)) {
HXLINE( 354)				int min14;
HXDLIN( 354)				if ((ay1 > dy3)) {
HXLINE( 354)					min14 = ::Math_obj::floor(dy3);
            				}
            				else {
HXLINE( 354)					min14 = ::Math_obj::floor(ay1);
            				}
HXDLIN( 354)				int ii_min28 = min14;
HXDLIN( 354)				int ii_max28 = ::Math_obj::ceil(py);
HXDLIN( 354)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            			}
            			else {
HXLINE( 354)				int ii_min29 = ::Math_obj::floor(ay1);
HXDLIN( 354)				int ii_max29 = ::Math_obj::ceil(dy3);
HXDLIN( 354)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            			}
            		}
            		else {
HXLINE( 354)			if ((ay1 > dy3)) {
HXLINE( 354)				int min15;
HXDLIN( 354)				if ((py > dy3)) {
HXLINE( 354)					min15 = ::Math_obj::floor(dy3);
            				}
            				else {
HXLINE( 354)					min15 = ::Math_obj::ceil(py);
            				}
HXDLIN( 354)				int ii_min30 = min15;
HXDLIN( 354)				int ii_max30 = ::Math_obj::ceil(ay1);
HXDLIN( 354)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            			}
            			else {
HXLINE( 354)				int ii_min31 = ::Math_obj::floor(py);
HXDLIN( 354)				int ii_max31 = ::Math_obj::ceil(dy3);
HXDLIN( 354)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            			}
            		}
HXDLIN( 354)		 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 354)		if (hasUndo3) {
HXLINE( 354)			int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 354)			int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 354)			 ::Dynamic imageType3 = null();
HXDLIN( 354)			 ::pi_xy::ImageStruct this94 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 354)			if (::hx::IsNull( imageType3 )) {
HXLINE(  54)				imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 354)			::Dynamic undoImage10;
HXDLIN( 354)			switch((int)(( (int)(imageType3) ))){
            				case (int)0: {
HXLINE( 354)					 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 354)					 ::iterMagic::BytesImg b29 = byt3;
HXDLIN( 354)					{
HXLINE( 354)						b29->width = width3;
HXDLIN( 354)						b29->height = height3;
HXDLIN( 354)						b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 354)						b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN( 354)						{
HXLINE( 354)							int len6 = b29->length;
HXDLIN( 354)							int w3 = 0;
HXDLIN( 354)							{
HXLINE( 354)								int _g60 = 0;
HXDLIN( 354)								int _g61 = b29->height;
HXDLIN( 354)								while((_g60 < _g61)){
HXLINE( 354)									_g60 = (_g60 + 1);
HXDLIN( 354)									int y9 = (_g60 - 1);
HXDLIN( 354)									{
HXLINE( 354)										int _g62 = 0;
HXDLIN( 354)										int _g63 = b29->width;
HXDLIN( 354)										while((_g62 < _g63)){
HXLINE( 354)											_g62 = (_g62 + 1);
HXDLIN( 354)											int x9 = (_g62 - 1);
HXDLIN( 354)											{
HXLINE( 354)												w3 = (w3 + 1);
HXDLIN( 354)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 354)											{
HXLINE( 354)												w3 = (w3 + 1);
HXDLIN( 354)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 354)											{
HXLINE( 354)												w3 = (w3 + 1);
HXDLIN( 354)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 354)											{
HXLINE( 354)												w3 = (w3 + 1);
HXDLIN( 354)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 354)					undoImage10 = b29;
            				}
            				break;
            				case (int)1: {
HXLINE( 354)					 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 354)					 ::iterMagic::ArrIntImg a26 = arrI3;
HXDLIN( 354)					{
HXLINE( 354)						a26->width = width3;
HXDLIN( 354)						a26->height = height3;
HXDLIN( 354)						a26->data = ::Array_obj< int >::__new(0);
HXDLIN( 354)						a26->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 354)						{
HXLINE( 354)							int _g64 = 0;
HXDLIN( 354)							int _g65 = a26->length;
HXDLIN( 354)							while((_g64 < _g65)){
HXLINE( 354)								_g64 = (_g64 + 1);
HXDLIN( 354)								int i30 = (_g64 - 1);
HXDLIN( 354)								a26->data[i30] = 0;
            							}
            						}
            					}
HXDLIN( 354)					undoImage10 = a26;
            				}
            				break;
            				case (int)2: {
HXLINE( 354)					 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 354)					 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN( 354)					{
HXLINE( 354)						b30->width = width3;
HXDLIN( 354)						b30->height = height3;
HXDLIN( 354)						b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 354)						int size3 = (b30->length * 4);
HXDLIN( 354)						b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 354)						{
HXLINE( 354)							int _g66 = 0;
HXDLIN( 354)							int _g67 = b30->length;
HXDLIN( 354)							while((_g66 < _g67)){
HXLINE( 354)								_g66 = (_g66 + 1);
HXDLIN( 354)								int i31 = (_g66 - 1);
HXDLIN( 354)								{
HXLINE( 354)									 ::haxe::io::ArrayBufferViewImpl this95 = b30->data;
HXDLIN( 354)									bool undoImage11;
HXDLIN( 354)									if ((i31 >= 0)) {
HXLINE( 354)										undoImage11 = (i31 < (this95->byteLength >> 2));
            									}
            									else {
HXLINE( 354)										undoImage11 = false;
            									}
HXDLIN( 354)									if (undoImage11) {
HXLINE( 354)										 ::haxe::io::Bytes _this3 = this95->bytes;
HXDLIN( 354)										int pos3 = ((i31 << 2) + this95->byteOffset);
HXDLIN( 354)										_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 354)										_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 354)										_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 354)										_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 354)					undoImage10 = b30;
            				}
            				break;
            				case (int)3: {
HXLINE( 354)					 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 354)					 ::iterMagic::VecIntImg v9 = vec3;
HXDLIN( 354)					{
HXLINE( 354)						v9->width = width3;
HXDLIN( 354)						v9->height = height3;
HXDLIN( 354)						v9->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 354)						v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN( 354)						{
HXLINE( 354)							int _g68 = 0;
HXDLIN( 354)							int _g69 = v9->length;
HXDLIN( 354)							while((_g68 < _g69)){
HXLINE( 354)								_g68 = (_g68 + 1);
HXDLIN( 354)								int i32 = (_g68 - 1);
HXDLIN( 354)								v9->data->__unsafe_set(i32,0);
            							}
            						}
            					}
HXDLIN( 354)					undoImage10 = v9;
            				}
            				break;
            				case (int)4: {
HXLINE( 354)					 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 354)					 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN( 354)					{
HXLINE( 354)						b31->width = width3;
HXDLIN( 354)						b31->height = height3;
HXDLIN( 354)						b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 354)						b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 354)						{
HXLINE( 354)							int len7 = b31->length;
HXDLIN( 354)							 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN( 354)							if (::hx::IsNull( d3->head )) {
HXLINE( 354)								int _g70 = 0;
HXDLIN( 354)								int _g71 = len7;
HXDLIN( 354)								while((_g70 < _g71)){
HXLINE( 354)									_g70 = (_g70 + 1);
HXDLIN( 354)									int i33 = (_g70 - 1);
HXDLIN( 354)									d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            								}
            							}
            							else {
HXLINE( 354)								int _g72 = 0;
HXDLIN( 354)								int _g73 = len7;
HXDLIN( 354)								while((_g72 < _g73)){
HXLINE( 354)									_g72 = (_g72 + 1);
HXDLIN( 354)									int i34 = (_g72 - 1);
HXDLIN( 354)									{
HXLINE( 354)										 ::haxe::ds::GenericCell_Int l3 = b31->data->head;
HXDLIN( 354)										 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 354)										{
HXLINE( 354)											int _g74 = 0;
HXDLIN( 354)											int _g75 = i34;
HXDLIN( 354)											while((_g74 < _g75)){
HXLINE( 354)												_g74 = (_g74 + 1);
HXDLIN( 354)												int i35 = (_g74 - 1);
HXLINE( 345)												prev3 = l3;
HXLINE( 346)												l3 = l3->next;
            											}
            										}
HXLINE( 354)										if (::hx::IsNull( prev3 )) {
HXLINE( 354)											b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 354)											l3 = null();
            										}
            										else {
HXLINE( 354)											prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 354)											l3 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 354)					undoImage10 = b31;
            				}
            				break;
            			}
HXDLIN( 354)			this94->image = undoImage10;
HXDLIN( 354)			this94->width = width3;
HXDLIN( 354)			this94->height = height3;
HXDLIN( 354)			this94->imageType = ( (int)(imageType3) );
HXDLIN( 354)			undoImage9 = this94;
HXDLIN( 354)			{
HXLINE( 354)				int rectLeft3 = xIter33->start;
HXDLIN( 354)				int rectTop3 = yIter33->start;
HXDLIN( 354)				int rectRight3 = xIter33->max;
HXDLIN( 354)				bool forceClear3 = false;
HXDLIN( 354)				{
HXLINE( 354)					int _g76 = rectTop3;
HXDLIN( 354)					int _g77 = yIter33->max;
HXDLIN( 354)					while((_g76 < _g77)){
HXLINE( 354)						_g76 = (_g76 + 1);
HXDLIN( 354)						int dy5 = (_g76 - 1);
HXDLIN( 354)						{
HXLINE( 354)							int _g78 = rectLeft3;
HXDLIN( 354)							int _g79 = rectRight3;
HXDLIN( 354)							while((_g78 < _g79)){
HXLINE( 354)								_g78 = (_g78 + 1);
HXDLIN( 354)								int dx5 = (_g78 - 1);
HXDLIN( 354)								::Dynamic this96 = pixelImage->image;
HXDLIN( 354)								int index12;
HXDLIN( 354)								if (pixelImage->useVirtualPos) {
HXLINE( 354)									index12 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx5) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 354)									index12 = ::Std_obj::_hx_int(( (Float)(((dy5 * pixelImage->width) + dx5)) ));
            								}
HXDLIN( 354)								int c9 = ::iterMagic::Iimg_obj::get(this96,index12);
HXDLIN( 354)								int col3;
HXDLIN( 354)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 354)									col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            								}
            								else {
HXLINE( 354)									col3 = c9;
            								}
HXDLIN( 354)								bool _hx_tmp24;
HXDLIN( 354)								if (pixelImage->useMask) {
HXLINE( 354)									_hx_tmp24 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 354)									_hx_tmp24 = false;
            								}
HXDLIN( 354)								if (_hx_tmp24) {
HXLINE( 354)									 ::pi_xy::ImageStruct this97 = pixelImage->mask;
HXDLIN( 354)									::Dynamic this98 = this97->image;
HXDLIN( 354)									int index13;
HXDLIN( 354)									if (this97->useVirtualPos) {
HXLINE( 354)										index13 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this97->virtualY) * ( (Float)(this97->width) )) + dx5) - this97->virtualX));
            									}
            									else {
HXLINE( 354)										index13 = ::Std_obj::_hx_int(( (Float)(((dy5 * this97->width) + dx5)) ));
            									}
HXDLIN( 354)									int c10 = ::iterMagic::Iimg_obj::get(this98,index13);
HXDLIN( 354)									int v10;
HXDLIN( 354)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 354)										v10 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            									}
            									else {
HXLINE( 354)										v10 = c10;
            									}
HXDLIN( 354)									int maskPixel3 = v10;
HXDLIN( 354)									int this99 = col3;
HXDLIN( 354)									if ((maskPixel3 == 0)) {
HXLINE( 354)										col3 = this99;
            									}
            									else {
HXLINE( 354)										Float m03;
HXDLIN( 354)										int this100 = ((maskPixel3 >> 24) & 255);
HXDLIN( 354)										if ((this100 == 0)) {
HXLINE( 354)											m03 = ((Float)0.);
            										}
            										else {
HXLINE( 354)											m03 = (( (Float)(this100) ) / ( (Float)(255) ));
            										}
HXDLIN( 354)										Float m13;
HXDLIN( 354)										int this101 = ((maskPixel3 >> 16) & 255);
HXDLIN( 354)										if ((this101 == 0)) {
HXLINE( 354)											m13 = ((Float)0.);
            										}
            										else {
HXLINE( 354)											m13 = (( (Float)(this101) ) / ( (Float)(255) ));
            										}
HXDLIN( 354)										Float m23;
HXDLIN( 354)										int this102 = ((maskPixel3 >> 8) & 255);
HXDLIN( 354)										if ((this102 == 0)) {
HXLINE( 354)											m23 = ((Float)0.);
            										}
            										else {
HXLINE( 354)											m23 = (( (Float)(this102) ) / ( (Float)(255) ));
            										}
HXDLIN( 354)										Float m33;
HXDLIN( 354)										int this103 = (maskPixel3 & 255);
HXDLIN( 354)										if ((this103 == 0)) {
HXLINE( 354)											m33 = ((Float)0.);
            										}
            										else {
HXLINE( 354)											m33 = (( (Float)(this103) ) / ( (Float)(255) ));
            										}
HXDLIN( 354)										int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this99 >> 24) & 255)) )));
HXDLIN( 354)										int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this99 >> 16) & 255)) )));
HXDLIN( 354)										int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this99 >> 8) & 255)) )));
HXDLIN( 354)										int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this99 & 255)) )));
HXDLIN( 354)										col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 354)								if ((col3 != 0)) {
HXLINE( 354)									int x10 = (dx5 - rectLeft3);
HXDLIN( 354)									int y10 = (dy5 - rectTop3);
HXDLIN( 354)									int c11 = col3;
HXDLIN( 354)									bool _hx_tmp25;
HXDLIN( 354)									if ((((c11 >> 24) & 255) < 254)) {
HXLINE( 354)										_hx_tmp25 = undoImage9->transparent;
            									}
            									else {
HXLINE( 354)										_hx_tmp25 = false;
            									}
HXDLIN( 354)									if (_hx_tmp25) {
HXLINE( 354)										int location6;
HXDLIN( 354)										if (undoImage9->useVirtualPos) {
HXLINE( 354)											location6 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 354)											location6 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            										}
HXDLIN( 354)										int this104 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 354)										int this105;
HXDLIN( 354)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 354)											this105 = ((((((this104 >> 24) & 255) << 24) | ((this104 & 255) << 16)) | (((this104 >> 8) & 255) << 8)) | ((this104 >> 16) & 255));
            										}
            										else {
HXLINE( 354)											this105 = this104;
            										}
HXDLIN( 354)										Float a111;
HXDLIN( 354)										int this106 = ((this105 >> 24) & 255);
HXDLIN( 354)										if ((this106 == 0)) {
HXLINE( 354)											a111 = ((Float)0.);
            										}
            										else {
HXLINE( 354)											a111 = (( (Float)(this106) ) / ( (Float)(255) ));
            										}
HXDLIN( 354)										Float r16;
HXDLIN( 354)										int this107 = ((this105 >> 16) & 255);
HXDLIN( 354)										if ((this107 == 0)) {
HXLINE( 354)											r16 = ((Float)0.);
            										}
            										else {
HXLINE( 354)											r16 = (( (Float)(this107) ) / ( (Float)(255) ));
            										}
HXDLIN( 354)										Float g16;
HXDLIN( 354)										int this108 = ((this105 >> 8) & 255);
HXDLIN( 354)										if ((this108 == 0)) {
HXLINE( 354)											g16 = ((Float)0.);
            										}
            										else {
HXLINE( 354)											g16 = (( (Float)(this108) ) / ( (Float)(255) ));
            										}
HXDLIN( 354)										Float b112;
HXDLIN( 354)										int this109 = (this105 & 255);
HXDLIN( 354)										if ((this109 == 0)) {
HXLINE( 354)											b112 = ((Float)0.);
            										}
            										else {
HXLINE( 354)											b112 = (( (Float)(this109) ) / ( (Float)(255) ));
            										}
HXDLIN( 354)										Float a27;
HXDLIN( 354)										int this110 = ((col3 >> 24) & 255);
HXDLIN( 354)										if ((this110 == 0)) {
HXLINE( 354)											a27 = ((Float)0.);
            										}
            										else {
HXLINE( 354)											a27 = (( (Float)(this110) ) / ( (Float)(255) ));
            										}
HXDLIN( 354)										Float r26;
HXDLIN( 354)										int this111 = ((col3 >> 16) & 255);
HXDLIN( 354)										if ((this111 == 0)) {
HXLINE( 354)											r26 = ((Float)0.);
            										}
            										else {
HXLINE( 354)											r26 = (( (Float)(this111) ) / ( (Float)(255) ));
            										}
HXDLIN( 354)										Float g26;
HXDLIN( 354)										int this112 = ((col3 >> 8) & 255);
HXDLIN( 354)										if ((this112 == 0)) {
HXLINE( 354)											g26 = ((Float)0.);
            										}
            										else {
HXLINE( 354)											g26 = (( (Float)(this112) ) / ( (Float)(255) ));
            										}
HXDLIN( 354)										Float b210;
HXDLIN( 354)										int this113 = (col3 & 255);
HXDLIN( 354)										if ((this113 == 0)) {
HXLINE( 354)											b210 = ((Float)0.);
            										}
            										else {
HXLINE( 354)											b210 = (( (Float)(this113) ) / ( (Float)(255) ));
            										}
HXDLIN( 354)										Float a36 = (a111 * (( (Float)(1) ) - a27));
HXDLIN( 354)										int r17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a27))));
HXDLIN( 354)										int g17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a27))));
HXDLIN( 354)										int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a36) + (b210 * a27))));
HXDLIN( 354)										int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a27)));
HXDLIN( 354)										int blended6 = ((((a28 << 24) | (r17 << 16)) | (g17 << 8)) | b32);
HXDLIN( 354)										{
HXLINE( 354)											int _hx_tmp26;
HXDLIN( 354)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 354)												_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            											}
            											else {
HXLINE( 354)												_hx_tmp26 = blended6;
            											}
HXDLIN( 354)											::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            										}
            									}
            									else {
HXLINE( 354)										::Dynamic this114 = undoImage9->image;
HXDLIN( 354)										int index14;
HXDLIN( 354)										if (undoImage9->useVirtualPos) {
HXLINE( 354)											index14 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 354)											index14 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            										}
HXDLIN( 354)										int _hx_tmp27;
HXDLIN( 354)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 354)											_hx_tmp27 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            										}
            										else {
HXLINE( 354)											_hx_tmp27 = c11;
            										}
HXDLIN( 354)										::iterMagic::Iimg_obj::set(this114,index14,_hx_tmp27);
            									}
            								}
            								else {
HXLINE( 354)									if (forceClear3) {
HXLINE( 354)										::Dynamic this115 = undoImage9->image;
HXDLIN( 354)										int x11 = (dx5 - rectLeft3);
HXDLIN( 354)										int y11 = (dy5 - rectTop3);
HXDLIN( 354)										int index15;
HXDLIN( 354)										if (undoImage9->useVirtualPos) {
HXLINE( 354)											index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 354)											index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            										}
HXDLIN( 354)										::iterMagic::Iimg_obj::set(this115,index15,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 354)		{
HXLINE( 354)			int _g_min6 = xIter33->start;
HXDLIN( 354)			int _g_max6 = xIter33->max;
HXDLIN( 354)			while((_g_min6 < _g_max6)){
HXLINE( 354)				_g_min6 = (_g_min6 + 1);
HXDLIN( 354)				int px4 = (_g_min6 - 1);
HXDLIN( 354)				Float pcx3 = (( (Float)(px4) ) - dx3);
HXDLIN( 354)				{
HXLINE( 354)					int _g_min7 = yIter33->start;
HXDLIN( 354)					int _g_max7 = yIter33->max;
HXDLIN( 354)					while((_g_min7 < _g_max7)){
HXLINE( 354)						_g_min7 = (_g_min7 + 1);
HXDLIN( 354)						int py4 = (_g_min7 - 1);
HXDLIN( 354)						Float pcy3 = (( (Float)(py4) ) - dy3);
HXDLIN( 354)						Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 354)						Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 354)						Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 354)						Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 354)						Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 354)						bool _hx_tmp28;
HXDLIN( 354)						bool _hx_tmp29;
HXDLIN( 354)						if ((ratioA3 >= 0)) {
HXLINE( 354)							_hx_tmp29 = (ratioB3 >= 0);
            						}
            						else {
HXLINE( 354)							_hx_tmp29 = false;
            						}
HXDLIN( 354)						if (_hx_tmp29) {
HXLINE( 354)							_hx_tmp28 = (ratioC3 >= 0);
            						}
            						else {
HXLINE( 354)							_hx_tmp28 = false;
            						}
HXDLIN( 354)						if (_hx_tmp28) {
HXLINE( 354)							int i36 = ::Std_obj::_hx_int((((( (Float)(aA3) ) * ratioA3) + (( (Float)(aB3) ) * ratioB3)) + (( (Float)(aC3) ) * ratioC3)));
HXDLIN( 354)							if ((i36 > 255)) {
HXLINE(  24)								i36 = 255;
            							}
HXLINE( 354)							if ((i36 < 0)) {
HXLINE(  25)								i36 = 0;
            							}
HXLINE( 354)							int a29 = i36;
HXDLIN( 354)							int i37 = ::Std_obj::_hx_int((((( (Float)(rA3) ) * ratioA3) + (( (Float)(rB3) ) * ratioB3)) + (( (Float)(rC3) ) * ratioC3)));
HXDLIN( 354)							if ((i37 > 255)) {
HXLINE(  24)								i37 = 255;
            							}
HXLINE( 354)							if ((i37 < 0)) {
HXLINE(  25)								i37 = 0;
            							}
HXLINE( 354)							int r18 = i37;
HXDLIN( 354)							int i38 = ::Std_obj::_hx_int((((( (Float)(gA3) ) * ratioA3) + (( (Float)(gB3) ) * ratioB3)) + (( (Float)(gC3) ) * ratioC3)));
HXDLIN( 354)							if ((i38 > 255)) {
HXLINE(  24)								i38 = 255;
            							}
HXLINE( 354)							if ((i38 < 0)) {
HXLINE(  25)								i38 = 0;
            							}
HXLINE( 354)							int g18 = i38;
HXDLIN( 354)							int i39 = ::Std_obj::_hx_int((((( (Float)(bA3) ) * ratioA3) + (( (Float)(bB3) ) * ratioB3)) + (( (Float)(bC3) ) * ratioC3)));
HXDLIN( 354)							if ((i39 > 255)) {
HXLINE(  24)								i39 = 255;
            							}
HXLINE( 354)							if ((i39 < 0)) {
HXLINE(  25)								i39 = 0;
            							}
HXLINE( 354)							int b33 = i39;
HXDLIN( 354)							{
HXLINE( 354)								int location7;
HXDLIN( 354)								if (pixelImage->useVirtualPos) {
HXLINE( 354)									location7 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px4) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 354)									location7 = ::Std_obj::_hx_int(( (Float)(((py4 * pixelImage->width) + px4)) ));
            								}
HXDLIN( 354)								bool _hx_tmp30;
HXDLIN( 354)								if (pixelImage->transparent) {
HXLINE( 354)									_hx_tmp30 = (a29 < 254);
            								}
            								else {
HXLINE( 354)									_hx_tmp30 = false;
            								}
HXDLIN( 354)								if (_hx_tmp30) {
HXLINE( 354)									int this116 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN( 354)									int old3;
HXDLIN( 354)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 354)										old3 = ((((((this116 >> 24) & 255) << 24) | ((this116 & 255) << 16)) | (((this116 >> 8) & 255) << 8)) | ((this116 >> 16) & 255));
            									}
            									else {
HXLINE( 354)										old3 = this116;
            									}
HXDLIN( 354)									int rhs3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
HXDLIN( 354)									Float a112;
HXDLIN( 354)									int this117 = ((old3 >> 24) & 255);
HXDLIN( 354)									if ((this117 == 0)) {
HXLINE( 354)										a112 = ((Float)0.);
            									}
            									else {
HXLINE( 354)										a112 = (( (Float)(this117) ) / ( (Float)(255) ));
            									}
HXDLIN( 354)									Float r19;
HXDLIN( 354)									int this118 = ((old3 >> 16) & 255);
HXDLIN( 354)									if ((this118 == 0)) {
HXLINE( 354)										r19 = ((Float)0.);
            									}
            									else {
HXLINE( 354)										r19 = (( (Float)(this118) ) / ( (Float)(255) ));
            									}
HXDLIN( 354)									Float g19;
HXDLIN( 354)									int this119 = ((old3 >> 8) & 255);
HXDLIN( 354)									if ((this119 == 0)) {
HXLINE( 354)										g19 = ((Float)0.);
            									}
            									else {
HXLINE( 354)										g19 = (( (Float)(this119) ) / ( (Float)(255) ));
            									}
HXDLIN( 354)									Float b113;
HXDLIN( 354)									int this120 = (old3 & 255);
HXDLIN( 354)									if ((this120 == 0)) {
HXLINE( 354)										b113 = ((Float)0.);
            									}
            									else {
HXLINE( 354)										b113 = (( (Float)(this120) ) / ( (Float)(255) ));
            									}
HXDLIN( 354)									Float a210;
HXDLIN( 354)									int this121 = ((rhs3 >> 24) & 255);
HXDLIN( 354)									if ((this121 == 0)) {
HXLINE( 354)										a210 = ((Float)0.);
            									}
            									else {
HXLINE( 354)										a210 = (( (Float)(this121) ) / ( (Float)(255) ));
            									}
HXDLIN( 354)									Float r27;
HXDLIN( 354)									int this122 = ((rhs3 >> 16) & 255);
HXDLIN( 354)									if ((this122 == 0)) {
HXLINE( 354)										r27 = ((Float)0.);
            									}
            									else {
HXLINE( 354)										r27 = (( (Float)(this122) ) / ( (Float)(255) ));
            									}
HXDLIN( 354)									Float g27;
HXDLIN( 354)									int this123 = ((rhs3 >> 8) & 255);
HXDLIN( 354)									if ((this123 == 0)) {
HXLINE( 354)										g27 = ((Float)0.);
            									}
            									else {
HXLINE( 354)										g27 = (( (Float)(this123) ) / ( (Float)(255) ));
            									}
HXDLIN( 354)									Float b211;
HXDLIN( 354)									int this124 = (rhs3 & 255);
HXDLIN( 354)									if ((this124 == 0)) {
HXLINE( 354)										b211 = ((Float)0.);
            									}
            									else {
HXLINE( 354)										b211 = (( (Float)(this124) ) / ( (Float)(255) ));
            									}
HXDLIN( 354)									Float a37 = (a112 * (( (Float)(1) ) - a210));
HXDLIN( 354)									int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a37) + (r27 * a210))));
HXDLIN( 354)									int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a37) + (g27 * a210))));
HXDLIN( 354)									int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a37) + (b211 * a210))));
HXDLIN( 354)									int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a210)));
HXDLIN( 354)									int blended7 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b34);
HXDLIN( 354)									{
HXLINE( 354)										int _hx_tmp31;
HXDLIN( 354)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 354)											_hx_tmp31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            										}
            										else {
HXLINE( 354)											_hx_tmp31 = blended7;
            										}
HXDLIN( 354)										::iterMagic::Iimg_obj::set(pixelImage->image,location7,_hx_tmp31);
            									}
            								}
            								else {
HXLINE( 354)									int value3;
HXDLIN( 354)									if (pixelImage->isLittle) {
HXLINE( 354)										value3 = ((((a29 << 24) | (b33 << 16)) | (g18 << 8)) | r18);
            									}
            									else {
HXLINE( 354)										value3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
            									}
HXDLIN( 354)									::iterMagic::Iimg_obj::set(pixelImage->image,location7,value3);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 354)		 ::pi_xy::algo::HitTri hitTriBottom;
HXDLIN( 354)		if ((hasHit == false)) {
HXLINE( 354)			 ::pi_xy::algo::HitTri v11 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,px,py,ax1,ay1,dx3,dy3,true);
HXDLIN( 354)			if (hasUndo3) {
HXLINE( 354)				v11->undoImage = undoImage9;
HXDLIN( 354)				v11->undoX = xIter33->start;
HXDLIN( 354)				v11->undoY = yIter33->start;
            			}
HXDLIN( 354)			hitTriBottom = v11;
            		}
            		else {
HXLINE( 354)			hitTriBottom = null();
            		}
HXLINE( 356)		if (hasHit) {
HXLINE( 357)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(2)->init(0,hitTriTop)->init(1,hitTriBottom));
HXLINE( 358)			if (::hx::IsNotNull( hitQuad )) {
HXLINE( 359)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXLINE( 360)			hitArr->triArr->push(hitQuad->triBCD);
HXLINE( 361)			return hitArr;
            		}
            		else {
HXLINE( 363)			return null();
            		}
HXLINE( 356)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC9(ArrowPixel_Fields__obj,gradThickLineArrowBoth,return )

 ::pi_xy::algo::HitTriArray ArrowPixel_Fields__obj::fillLineFixedArrow( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float arrowWidth,Float arrowHeight,Float thick,int color,::hx::Null< bool >  __o_flare,::hx::Null< bool >  __o_reverseFlare,::hx::Null< bool >  __o_hasHit){
            		bool flare = __o_flare.Default(false);
            		bool reverseFlare = __o_reverseFlare.Default(false);
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_63f36ef650858c14_371_fillLineFixedArrow)
HXLINE( 372)		Float goldenRatio = ((Float)1.61803398875);
HXLINE( 373)		::haxe::Log_obj::trace(HX_("fillLineFixedArrow",ac,e2,1f,71),::hx::SourceInfo(HX_("src/pi_xy/algo/ArrowPixel.hx",98,bf,a1,a5),373,HX_("pi_xy.algo._ArrowPixel.ArrowPixel_Fields_",4a,11,04,b2),HX_("fillLineFixedArrow",ac,e2,1f,71)));
HXLINE( 375)		Float o = (qy - py);
HXLINE( 376)		Float a = (qx - px);
HXLINE( 377)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE( 378)		Float theta = ::Math_obj::atan2(o,a);
HXLINE( 379)		Float thicker;
HXDLIN( 379)		if ((arrowWidth > (thick * ((Float)1.1)))) {
HXLINE( 379)			thicker = arrowWidth;
            		}
            		else {
HXLINE( 379)			thicker = ((( (Float)(2) ) * thick) * goldenRatio);
            		}
HXLINE( 385)		Float sin = ::Math_obj::sin(theta);
HXLINE( 386)		Float cos = ::Math_obj::cos(theta);
HXLINE( 387)		Float radius = (thick / ( (Float)(2) ));
HXLINE( 388)		Float radius2 = (thicker / ( (Float)(2) ));
HXLINE( 389)		Float h2;
HXDLIN( 389)		if ((arrowHeight < (h * ((Float)1.1)))) {
HXLINE( 389)			h2 = (h - arrowHeight);
            		}
            		else {
HXLINE( 389)			h2 = (h / goldenRatio);
            		}
HXLINE( 394)		 ::pi_xy::algo::HitQuad hitQuad;
HXDLIN( 394)		if (flare) {
HXLINE( 395)			if (reverseFlare) {
HXLINE( 396)				Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 396)				Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 396)				Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 396)				Float radius21 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN( 396)				Float dx = ((Float)0.1);
HXDLIN( 396)				Float dy = radius1;
HXDLIN( 396)				Float cx = h2;
HXDLIN( 396)				Float cy = radius21;
HXDLIN( 396)				Float bx = h2;
HXDLIN( 396)				Float by = -(radius21);
HXDLIN( 396)				Float ax = ((Float)0.1);
HXDLIN( 396)				Float ay = -(radius1);
HXDLIN( 396)				Float temp = ((Float)0.);
HXLINE( 240)				temp = (px + ((ax * cos1) - (ay * sin1)));
HXLINE( 241)				ay = (py + ((ay * cos1) + (ax * sin1)));
HXLINE( 242)				ax = temp;
HXLINE( 244)				temp = (px + ((bx * cos1) - (by * sin1)));
HXLINE( 245)				by = (py + ((by * cos1) + (bx * sin1)));
HXLINE( 246)				bx = temp;
HXLINE( 248)				temp = (px + ((cx * cos1) - (cy * sin1)));
HXLINE( 249)				cy = (py + ((cy * cos1) + (cx * sin1)));
HXLINE( 250)				cx = temp;
HXLINE( 252)				temp = (px + ((dx * cos1) - (dy * sin1)));
HXLINE( 253)				dy = (py + ((dy * cos1) + (dx * sin1)));
HXLINE( 254)				dx = temp;
HXLINE( 396)				Float bx1 = bx;
HXDLIN( 396)				Float by1 = by;
HXDLIN( 396)				Float cx1 = dx;
HXDLIN( 396)				Float cy1 = dy;
HXDLIN( 396)				bool hasUndo = false;
HXDLIN( 396)				bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 396)				if (!(adjustWinding)) {
HXLINE( 396)					Float bx_ = bx1;
HXDLIN( 396)					Float by_ = by1;
HXLINE(  25)					bx1 = cx1;
HXLINE(  26)					by1 = cy1;
HXLINE(  27)					cx1 = bx_;
HXLINE(  28)					cy1 = by_;
            				}
HXLINE( 396)				Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 396)				Float sx = (cy1 - ay);
HXDLIN( 396)				Float sy = (ax - cx1);
HXDLIN( 396)				Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 396)				Float tx = (ay - by1);
HXDLIN( 396)				Float ty = (bx1 - ax);
HXDLIN( 396)				Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 396)				 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 396)				if ((ax > bx1)) {
HXLINE( 396)					if ((ax > cx1)) {
HXLINE( 396)						int min;
HXDLIN( 396)						if ((bx1 > cx1)) {
HXLINE( 396)							min = ::Math_obj::floor(cx1);
            						}
            						else {
HXLINE( 396)							min = ::Math_obj::floor(bx1);
            						}
HXDLIN( 396)						int ii_min = min;
HXDLIN( 396)						int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 396)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            					}
            					else {
HXLINE( 396)						int ii_min1 = ::Math_obj::floor(bx1);
HXDLIN( 396)						int ii_max1 = ::Math_obj::ceil(cx1);
HXDLIN( 396)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            					}
            				}
            				else {
HXLINE( 396)					if ((bx1 > cx1)) {
HXLINE( 396)						int min1;
HXDLIN( 396)						if ((ax > cx1)) {
HXLINE( 396)							min1 = ::Math_obj::floor(cx1);
            						}
            						else {
HXLINE( 396)							min1 = ::Math_obj::ceil(ax);
            						}
HXDLIN( 396)						int ii_min2 = min1;
HXDLIN( 396)						int ii_max2 = ::Math_obj::ceil(bx1);
HXDLIN( 396)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            					}
            					else {
HXLINE( 396)						int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 396)						int ii_max3 = ::Math_obj::ceil(cx1);
HXDLIN( 396)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            					}
            				}
HXDLIN( 396)				 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 396)				if ((ay > by1)) {
HXLINE( 396)					if ((ay > cy1)) {
HXLINE( 396)						int min2;
HXDLIN( 396)						if ((by1 > cy1)) {
HXLINE( 396)							min2 = ::Math_obj::floor(cy1);
            						}
            						else {
HXLINE( 396)							min2 = ::Math_obj::floor(by1);
            						}
HXDLIN( 396)						int ii_min4 = min2;
HXDLIN( 396)						int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 396)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            					}
            					else {
HXLINE( 396)						int ii_min5 = ::Math_obj::floor(by1);
HXDLIN( 396)						int ii_max5 = ::Math_obj::ceil(cy1);
HXDLIN( 396)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            					}
            				}
            				else {
HXLINE( 396)					if ((by1 > cy1)) {
HXLINE( 396)						int min3;
HXDLIN( 396)						if ((ay > cy1)) {
HXLINE( 396)							min3 = ::Math_obj::floor(cy1);
            						}
            						else {
HXLINE( 396)							min3 = ::Math_obj::ceil(ay);
            						}
HXDLIN( 396)						int ii_min6 = min3;
HXDLIN( 396)						int ii_max6 = ::Math_obj::ceil(by1);
HXDLIN( 396)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            					}
            					else {
HXLINE( 396)						int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 396)						int ii_max7 = ::Math_obj::ceil(cy1);
HXDLIN( 396)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            					}
            				}
HXDLIN( 396)				 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 396)				if (hasUndo) {
HXLINE( 396)					int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 396)					int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 396)					 ::Dynamic imageType = null();
HXDLIN( 396)					 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 396)					if (::hx::IsNull( imageType )) {
HXLINE(  54)						imageType = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 396)					::Dynamic undoImage1;
HXDLIN( 396)					switch((int)(( (int)(imageType) ))){
            						case (int)0: {
HXLINE( 396)							 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 396)							 ::iterMagic::BytesImg b = byt;
HXDLIN( 396)							{
HXLINE( 396)								b->width = width;
HXDLIN( 396)								b->height = height;
HXDLIN( 396)								b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 396)								b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 396)								{
HXLINE( 396)									int len = b->length;
HXDLIN( 396)									int w = 0;
HXDLIN( 396)									{
HXLINE( 396)										int _g = 0;
HXDLIN( 396)										int _g1 = b->height;
HXDLIN( 396)										while((_g < _g1)){
HXLINE( 396)											_g = (_g + 1);
HXDLIN( 396)											int y = (_g - 1);
HXDLIN( 396)											{
HXLINE( 396)												int _g2 = 0;
HXDLIN( 396)												int _g3 = b->width;
HXDLIN( 396)												while((_g2 < _g3)){
HXLINE( 396)													_g2 = (_g2 + 1);
HXDLIN( 396)													int x = (_g2 - 1);
HXDLIN( 396)													{
HXLINE( 396)														w = (w + 1);
HXDLIN( 396)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 396)													{
HXLINE( 396)														w = (w + 1);
HXDLIN( 396)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 396)													{
HXLINE( 396)														w = (w + 1);
HXDLIN( 396)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 396)													{
HXLINE( 396)														w = (w + 1);
HXDLIN( 396)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 396)							undoImage1 = b;
            						}
            						break;
            						case (int)1: {
HXLINE( 396)							 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 396)							 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 396)							{
HXLINE( 396)								a1->width = width;
HXDLIN( 396)								a1->height = height;
HXDLIN( 396)								a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 396)								a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 396)								{
HXLINE( 396)									int _g4 = 0;
HXDLIN( 396)									int _g5 = a1->length;
HXDLIN( 396)									while((_g4 < _g5)){
HXLINE( 396)										_g4 = (_g4 + 1);
HXDLIN( 396)										int i = (_g4 - 1);
HXDLIN( 396)										a1->data[i] = 0;
            									}
            								}
            							}
HXDLIN( 396)							undoImage1 = a1;
            						}
            						break;
            						case (int)2: {
HXLINE( 396)							 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 396)							 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 396)							{
HXLINE( 396)								b1->width = width;
HXDLIN( 396)								b1->height = height;
HXDLIN( 396)								b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 396)								int size = (b1->length * 4);
HXDLIN( 396)								b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 396)								{
HXLINE( 396)									int _g6 = 0;
HXDLIN( 396)									int _g7 = b1->length;
HXDLIN( 396)									while((_g6 < _g7)){
HXLINE( 396)										_g6 = (_g6 + 1);
HXDLIN( 396)										int i1 = (_g6 - 1);
HXDLIN( 396)										{
HXLINE( 396)											 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN( 396)											bool undoImage2;
HXDLIN( 396)											if ((i1 >= 0)) {
HXLINE( 396)												undoImage2 = (i1 < (this2->byteLength >> 2));
            											}
            											else {
HXLINE( 396)												undoImage2 = false;
            											}
HXDLIN( 396)											if (undoImage2) {
HXLINE( 396)												 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 396)												int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 396)												_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 396)												_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 396)												_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 396)												_this->b[(pos + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 396)							undoImage1 = b1;
            						}
            						break;
            						case (int)3: {
HXLINE( 396)							 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 396)							 ::iterMagic::VecIntImg v = vec;
HXDLIN( 396)							{
HXLINE( 396)								v->width = width;
HXDLIN( 396)								v->height = height;
HXDLIN( 396)								v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 396)								v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 396)								{
HXLINE( 396)									int _g8 = 0;
HXDLIN( 396)									int _g9 = v->length;
HXDLIN( 396)									while((_g8 < _g9)){
HXLINE( 396)										_g8 = (_g8 + 1);
HXDLIN( 396)										int i2 = (_g8 - 1);
HXDLIN( 396)										v->data->__unsafe_set(i2,0);
            									}
            								}
            							}
HXDLIN( 396)							undoImage1 = v;
            						}
            						break;
            						case (int)4: {
HXLINE( 396)							 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 396)							 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 396)							{
HXLINE( 396)								b2->width = width;
HXDLIN( 396)								b2->height = height;
HXDLIN( 396)								b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 396)								b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 396)								{
HXLINE( 396)									int len1 = b2->length;
HXDLIN( 396)									 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 396)									if (::hx::IsNull( d->head )) {
HXLINE( 396)										int _g10 = 0;
HXDLIN( 396)										int _g11 = len1;
HXDLIN( 396)										while((_g10 < _g11)){
HXLINE( 396)											_g10 = (_g10 + 1);
HXDLIN( 396)											int i3 = (_g10 - 1);
HXDLIN( 396)											d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            										}
            									}
            									else {
HXLINE( 396)										int _g12 = 0;
HXDLIN( 396)										int _g13 = len1;
HXDLIN( 396)										while((_g12 < _g13)){
HXLINE( 396)											_g12 = (_g12 + 1);
HXDLIN( 396)											int i4 = (_g12 - 1);
HXDLIN( 396)											{
HXLINE( 396)												 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 396)												 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 396)												{
HXLINE( 396)													int _g14 = 0;
HXDLIN( 396)													int _g15 = i4;
HXDLIN( 396)													while((_g14 < _g15)){
HXLINE( 396)														_g14 = (_g14 + 1);
HXDLIN( 396)														int i5 = (_g14 - 1);
HXLINE( 345)														prev = l;
HXLINE( 346)														l = l->next;
            													}
            												}
HXLINE( 396)												if (::hx::IsNull( prev )) {
HXLINE( 396)													b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 396)													l = null();
            												}
            												else {
HXLINE( 396)													prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 396)													l = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 396)							undoImage1 = b2;
            						}
            						break;
            					}
HXDLIN( 396)					this1->image = undoImage1;
HXDLIN( 396)					this1->width = width;
HXDLIN( 396)					this1->height = height;
HXDLIN( 396)					this1->imageType = ( (int)(imageType) );
HXDLIN( 396)					undoImage = this1;
HXDLIN( 396)					{
HXLINE( 396)						int rectLeft = xIter3->start;
HXDLIN( 396)						int rectTop = yIter3->start;
HXDLIN( 396)						int rectRight = xIter3->max;
HXDLIN( 396)						bool forceClear = false;
HXDLIN( 396)						{
HXLINE( 396)							int _g16 = rectTop;
HXDLIN( 396)							int _g17 = yIter3->max;
HXDLIN( 396)							while((_g16 < _g17)){
HXLINE( 396)								_g16 = (_g16 + 1);
HXDLIN( 396)								int dy1 = (_g16 - 1);
HXDLIN( 396)								{
HXLINE( 396)									int _g18 = rectLeft;
HXDLIN( 396)									int _g19 = rectRight;
HXDLIN( 396)									while((_g18 < _g19)){
HXLINE( 396)										_g18 = (_g18 + 1);
HXDLIN( 396)										int dx1 = (_g18 - 1);
HXDLIN( 396)										::Dynamic this3 = pixelImage->image;
HXDLIN( 396)										int index;
HXDLIN( 396)										if (pixelImage->useVirtualPos) {
HXLINE( 396)											index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 396)											index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            										}
HXDLIN( 396)										int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN( 396)										int col;
HXDLIN( 396)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)											col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 396)											col = c;
            										}
HXDLIN( 396)										bool hitQuad1;
HXDLIN( 396)										if (pixelImage->useMask) {
HXLINE( 396)											hitQuad1 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 396)											hitQuad1 = false;
            										}
HXDLIN( 396)										if (hitQuad1) {
HXLINE( 396)											 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN( 396)											::Dynamic this5 = this4->image;
HXDLIN( 396)											int index1;
HXDLIN( 396)											if (this4->useVirtualPos) {
HXLINE( 396)												index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            											}
            											else {
HXLINE( 396)												index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            											}
HXDLIN( 396)											int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN( 396)											int v1;
HXDLIN( 396)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)												v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            											}
            											else {
HXLINE( 396)												v1 = c1;
            											}
HXDLIN( 396)											int maskPixel = v1;
HXDLIN( 396)											int this6 = col;
HXDLIN( 396)											if ((maskPixel == 0)) {
HXLINE( 396)												col = this6;
            											}
            											else {
HXLINE( 396)												Float m0;
HXDLIN( 396)												int this7 = ((maskPixel >> 24) & 255);
HXDLIN( 396)												if ((this7 == 0)) {
HXLINE( 396)													m0 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float m1;
HXDLIN( 396)												int this8 = ((maskPixel >> 16) & 255);
HXDLIN( 396)												if ((this8 == 0)) {
HXLINE( 396)													m1 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float m2;
HXDLIN( 396)												int this9 = ((maskPixel >> 8) & 255);
HXDLIN( 396)												if ((this9 == 0)) {
HXLINE( 396)													m2 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float m3;
HXDLIN( 396)												int this10 = (maskPixel & 255);
HXDLIN( 396)												if ((this10 == 0)) {
HXLINE( 396)													m3 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 396)												int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 396)												int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 396)												int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 396)												col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 396)										if ((col != 0)) {
HXLINE( 396)											int x1 = (dx1 - rectLeft);
HXDLIN( 396)											int y1 = (dy1 - rectTop);
HXDLIN( 396)											int c2 = col;
HXDLIN( 396)											bool hitQuad2;
HXDLIN( 396)											if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 396)												hitQuad2 = undoImage->transparent;
            											}
            											else {
HXLINE( 396)												hitQuad2 = false;
            											}
HXDLIN( 396)											if (hitQuad2) {
HXLINE( 396)												int location;
HXDLIN( 396)												if (undoImage->useVirtualPos) {
HXLINE( 396)													location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            												}
            												else {
HXLINE( 396)													location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            												}
HXDLIN( 396)												int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 396)												int this12;
HXDLIN( 396)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)													this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            												}
            												else {
HXLINE( 396)													this12 = this11;
            												}
HXDLIN( 396)												Float a11;
HXDLIN( 396)												int this13 = ((this12 >> 24) & 255);
HXDLIN( 396)												if ((this13 == 0)) {
HXLINE( 396)													a11 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float r1;
HXDLIN( 396)												int this14 = ((this12 >> 16) & 255);
HXDLIN( 396)												if ((this14 == 0)) {
HXLINE( 396)													r1 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float g1;
HXDLIN( 396)												int this15 = ((this12 >> 8) & 255);
HXDLIN( 396)												if ((this15 == 0)) {
HXLINE( 396)													g1 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float b11;
HXDLIN( 396)												int this16 = (this12 & 255);
HXDLIN( 396)												if ((this16 == 0)) {
HXLINE( 396)													b11 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float a2;
HXDLIN( 396)												int this17 = ((col >> 24) & 255);
HXDLIN( 396)												if ((this17 == 0)) {
HXLINE( 396)													a2 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float r2;
HXDLIN( 396)												int this18 = ((col >> 16) & 255);
HXDLIN( 396)												if ((this18 == 0)) {
HXLINE( 396)													r2 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float g2;
HXDLIN( 396)												int this19 = ((col >> 8) & 255);
HXDLIN( 396)												if ((this19 == 0)) {
HXLINE( 396)													g2 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float b21;
HXDLIN( 396)												int this20 = (col & 255);
HXDLIN( 396)												if ((this20 == 0)) {
HXLINE( 396)													b21 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 396)												int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 396)												int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 396)												int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 396)												int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 396)												int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 396)												{
HXLINE( 396)													int hitQuad3;
HXDLIN( 396)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)														hitQuad3 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE( 396)														hitQuad3 = blended;
            													}
HXDLIN( 396)													::iterMagic::Iimg_obj::set(undoImage->image,location,hitQuad3);
            												}
            											}
            											else {
HXLINE( 396)												::Dynamic this21 = undoImage->image;
HXDLIN( 396)												int index2;
HXDLIN( 396)												if (undoImage->useVirtualPos) {
HXLINE( 396)													index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            												}
            												else {
HXLINE( 396)													index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            												}
HXDLIN( 396)												int hitQuad4;
HXDLIN( 396)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)													hitQuad4 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            												}
            												else {
HXLINE( 396)													hitQuad4 = c2;
            												}
HXDLIN( 396)												::iterMagic::Iimg_obj::set(this21,index2,hitQuad4);
            											}
            										}
            										else {
HXLINE( 396)											if (forceClear) {
HXLINE( 396)												::Dynamic this22 = undoImage->image;
HXDLIN( 396)												int x2 = (dx1 - rectLeft);
HXDLIN( 396)												int y2 = (dy1 - rectTop);
HXDLIN( 396)												int index3;
HXDLIN( 396)												if (undoImage->useVirtualPos) {
HXLINE( 396)													index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            												}
            												else {
HXLINE( 396)													index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            												}
HXDLIN( 396)												::iterMagic::Iimg_obj::set(this22,index3,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 396)				bool found = false;
HXDLIN( 396)				Float s = ((Float)0.);
HXDLIN( 396)				Float t = ((Float)0.);
HXDLIN( 396)				Float sxx = ((Float)0.);
HXDLIN( 396)				Float txx = ((Float)0.);
HXDLIN( 396)				{
HXLINE( 396)					int _g_min = xIter3->start;
HXDLIN( 396)					int _g_max = xIter3->max;
HXDLIN( 396)					while((_g_min < _g_max)){
HXLINE( 396)						_g_min = (_g_min + 1);
HXDLIN( 396)						int x3 = (_g_min - 1);
HXLINE(  60)						sxx = (sx * ( (Float)(x3) ));
HXLINE(  61)						txx = (tx * ( (Float)(x3) ));
HXLINE(  62)						found = false;
HXLINE( 396)						{
HXLINE( 396)							int _g_min1 = yIter3->start;
HXDLIN( 396)							int _g_max1 = yIter3->max;
HXDLIN( 396)							while((_g_min1 < _g_max1)){
HXLINE( 396)								_g_min1 = (_g_min1 + 1);
HXDLIN( 396)								int y3 = (_g_min1 - 1);
HXLINE(  64)								s = ((s0 + sxx) + (sy * ( (Float)(y3) )));
HXLINE(  65)								t = ((t0 + txx) + (ty * ( (Float)(y3) )));
HXLINE( 396)								bool hitQuad5;
HXDLIN( 396)								if (!((s <= 0))) {
HXLINE( 396)									hitQuad5 = (t <= 0);
            								}
            								else {
HXLINE( 396)									hitQuad5 = true;
            								}
HXDLIN( 396)								if (hitQuad5) {
HXLINE( 396)									if (found) {
HXLINE( 396)										goto _hx_goto_461;
            									}
            								}
            								else {
HXLINE( 396)									if (((s + t) < A)) {
HXLINE( 396)										{
HXLINE( 396)											int c3 = color;
HXDLIN( 396)											bool hitQuad6;
HXDLIN( 396)											if ((((c3 >> 24) & 255) < 254)) {
HXLINE( 396)												hitQuad6 = pixelImage->transparent;
            											}
            											else {
HXLINE( 396)												hitQuad6 = false;
            											}
HXDLIN( 396)											if (hitQuad6) {
HXLINE( 396)												int location1;
HXDLIN( 396)												if (pixelImage->useVirtualPos) {
HXLINE( 396)													location1 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x3) - pixelImage->virtualX));
            												}
            												else {
HXLINE( 396)													location1 = ::Std_obj::_hx_int(( (Float)(((y3 * pixelImage->width) + x3)) ));
            												}
HXDLIN( 396)												int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN( 396)												int this24;
HXDLIN( 396)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)													this24 = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            												}
            												else {
HXLINE( 396)													this24 = this23;
            												}
HXDLIN( 396)												Float a12;
HXDLIN( 396)												int this25 = ((this24 >> 24) & 255);
HXDLIN( 396)												if ((this25 == 0)) {
HXLINE( 396)													a12 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													a12 = (( (Float)(this25) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float r11;
HXDLIN( 396)												int this26 = ((this24 >> 16) & 255);
HXDLIN( 396)												if ((this26 == 0)) {
HXLINE( 396)													r11 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float g11;
HXDLIN( 396)												int this27 = ((this24 >> 8) & 255);
HXDLIN( 396)												if ((this27 == 0)) {
HXLINE( 396)													g11 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float b12;
HXDLIN( 396)												int this28 = (this24 & 255);
HXDLIN( 396)												if ((this28 == 0)) {
HXLINE( 396)													b12 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float a21;
HXDLIN( 396)												int this29 = ((color >> 24) & 255);
HXDLIN( 396)												if ((this29 == 0)) {
HXLINE( 396)													a21 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float r21;
HXDLIN( 396)												int this30 = ((color >> 16) & 255);
HXDLIN( 396)												if ((this30 == 0)) {
HXLINE( 396)													r21 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float g21;
HXDLIN( 396)												int this31 = ((color >> 8) & 255);
HXDLIN( 396)												if ((this31 == 0)) {
HXLINE( 396)													g21 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float b22;
HXDLIN( 396)												int this32 = (color & 255);
HXDLIN( 396)												if ((this32 == 0)) {
HXLINE( 396)													b22 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 396)												int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 396)												int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 396)												int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 396)												int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 396)												int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 396)												{
HXLINE( 396)													int hitQuad7;
HXDLIN( 396)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)														hitQuad7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            													}
            													else {
HXLINE( 396)														hitQuad7 = blended1;
            													}
HXDLIN( 396)													::iterMagic::Iimg_obj::set(pixelImage->image,location1,hitQuad7);
            												}
            											}
            											else {
HXLINE( 396)												::Dynamic this33 = pixelImage->image;
HXDLIN( 396)												int index4;
HXDLIN( 396)												if (pixelImage->useVirtualPos) {
HXLINE( 396)													index4 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x3) - pixelImage->virtualX));
            												}
            												else {
HXLINE( 396)													index4 = ::Std_obj::_hx_int(( (Float)(((y3 * pixelImage->width) + x3)) ));
            												}
HXDLIN( 396)												int hitQuad8;
HXDLIN( 396)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)													hitQuad8 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            												}
            												else {
HXLINE( 396)													hitQuad8 = c3;
            												}
HXDLIN( 396)												::iterMagic::Iimg_obj::set(this33,index4,hitQuad8);
            											}
            										}
HXLINE(  73)										found = true;
            									}
            									else {
HXLINE( 396)										if (found) {
HXLINE( 396)											goto _hx_goto_461;
            										}
            									}
            								}
            							}
            							_hx_goto_461:;
            						}
            					}
            				}
HXDLIN( 396)				 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN( 396)				 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN( 396)				int v_undoY;
HXDLIN( 396)				int v_undoX;
HXDLIN( 396)				Float v_ty;
HXDLIN( 396)				Float v_tx;
HXDLIN( 396)				Float v_t0;
HXDLIN( 396)				Float v_sy;
HXDLIN( 396)				Float v_sx;
HXDLIN( 396)				Float v_s0;
HXDLIN( 396)				Float v_A;
HXDLIN( 396)				Float ax1 = ax;
HXDLIN( 396)				Float ay1 = ay;
HXDLIN( 396)				 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN( 396)				Float bx2 = bx1;
HXDLIN( 396)				Float by2 = by1;
HXDLIN( 396)				Float cx2 = cx1;
HXDLIN( 396)				Float cy2 = cy1;
HXDLIN( 396)				bool adjustWinding1 = (((((ax1 * by2) - (bx2 * ay1)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay1) - (ax1 * cy2))) > 0);
HXDLIN( 396)				if (!(adjustWinding1)) {
HXLINE( 396)					Float bx_1 = bx2;
HXDLIN( 396)					Float by_1 = by2;
HXLINE(  24)					bx2 = cx2;
HXLINE(  25)					by2 = cy2;
HXLINE(  26)					cx2 = bx_1;
HXLINE(  27)					cy2 = by_1;
            				}
HXLINE( 396)				Float v_ax = ax1;
HXDLIN( 396)				Float v_ay = ay1;
HXDLIN( 396)				Float v_bx = bx2;
HXDLIN( 396)				Float v_by = by2;
HXDLIN( 396)				Float v_cx = cx2;
HXDLIN( 396)				Float v_cy = cy2;
HXDLIN( 396)				bool v_preCalculated = true;
HXDLIN( 396)				{
HXLINE( 396)					v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN( 396)					v_sx = (v_cy - v_ay);
HXDLIN( 396)					v_sy = (v_ax - v_cx);
HXDLIN( 396)					v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN( 396)					v_tx = (v_ay - v_by);
HXDLIN( 396)					v_ty = (v_bx - v_ax);
HXDLIN( 396)					v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN( 396)					Float a6 = v_ax;
HXDLIN( 396)					Float b5 = v_bx;
HXDLIN( 396)					Float c4 = v_cx;
HXDLIN( 396)					if ((a6 > b5)) {
HXLINE( 396)						if ((a6 > c4)) {
HXLINE( 396)							int min4;
HXDLIN( 396)							if ((b5 > c4)) {
HXLINE( 396)								min4 = ::Math_obj::floor(c4);
            							}
            							else {
HXLINE( 396)								min4 = ::Math_obj::floor(b5);
            							}
HXDLIN( 396)							int ii_min8 = min4;
HXDLIN( 396)							int ii_max8 = ::Math_obj::ceil(a6);
HXDLIN( 396)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            						}
            						else {
HXLINE( 396)							int ii_min9 = ::Math_obj::floor(b5);
HXDLIN( 396)							int ii_max9 = ::Math_obj::ceil(c4);
HXDLIN( 396)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            						}
            					}
            					else {
HXLINE( 396)						if ((b5 > c4)) {
HXLINE( 396)							int min5;
HXDLIN( 396)							if ((a6 > c4)) {
HXLINE( 396)								min5 = ::Math_obj::floor(c4);
            							}
            							else {
HXLINE( 396)								min5 = ::Math_obj::ceil(a6);
            							}
HXDLIN( 396)							int ii_min10 = min5;
HXDLIN( 396)							int ii_max10 = ::Math_obj::ceil(b5);
HXDLIN( 396)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            						}
            						else {
HXLINE( 396)							int ii_min11 = ::Math_obj::floor(a6);
HXDLIN( 396)							int ii_max11 = ::Math_obj::ceil(c4);
HXDLIN( 396)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            						}
            					}
HXDLIN( 396)					Float a7 = v_ay;
HXDLIN( 396)					Float b6 = v_by;
HXDLIN( 396)					Float c5 = v_cy;
HXDLIN( 396)					if ((a7 > b6)) {
HXLINE( 396)						if ((a7 > c5)) {
HXLINE( 396)							int min6;
HXDLIN( 396)							if ((b6 > c5)) {
HXLINE( 396)								min6 = ::Math_obj::floor(c5);
            							}
            							else {
HXLINE( 396)								min6 = ::Math_obj::floor(b6);
            							}
HXDLIN( 396)							int ii_min12 = min6;
HXDLIN( 396)							int ii_max12 = ::Math_obj::ceil(a7);
HXDLIN( 396)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            						}
            						else {
HXLINE( 396)							int ii_min13 = ::Math_obj::floor(b6);
HXDLIN( 396)							int ii_max13 = ::Math_obj::ceil(c5);
HXDLIN( 396)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            						}
            					}
            					else {
HXLINE( 396)						if ((b6 > c5)) {
HXLINE( 396)							int min7;
HXDLIN( 396)							if ((a7 > c5)) {
HXLINE( 396)								min7 = ::Math_obj::floor(c5);
            							}
            							else {
HXLINE( 396)								min7 = ::Math_obj::ceil(a7);
            							}
HXDLIN( 396)							int ii_min14 = min7;
HXDLIN( 396)							int ii_max14 = ::Math_obj::ceil(b6);
HXDLIN( 396)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            						}
            						else {
HXLINE( 396)							int ii_min15 = ::Math_obj::floor(a7);
HXDLIN( 396)							int ii_max15 = ::Math_obj::ceil(c5);
HXDLIN( 396)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            						}
            					}
            				}
HXDLIN( 396)				if (hasUndo) {
HXLINE( 396)					v_undoImage = undoImage;
HXDLIN( 396)					v_undoX = xIter3->start;
HXDLIN( 396)					v_undoY = yIter3->start;
            				}
HXDLIN( 396)				Float bx3 = cx;
HXDLIN( 396)				Float by3 = cy;
HXDLIN( 396)				Float cx3 = dx;
HXDLIN( 396)				Float cy3 = dy;
HXDLIN( 396)				bool hasUndo1 = false;
HXDLIN( 396)				bool adjustWinding2 = (((((bx * by3) - (bx3 * by)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * by) - (bx * cy3))) > 0);
HXDLIN( 396)				if (!(adjustWinding2)) {
HXLINE( 396)					Float bx_2 = bx3;
HXDLIN( 396)					Float by_2 = by3;
HXLINE(  25)					bx3 = cx3;
HXLINE(  26)					by3 = cy3;
HXLINE(  27)					cx3 = bx_2;
HXLINE(  28)					cy3 = by_2;
            				}
HXLINE( 396)				Float s01 = ((by * cx3) - (bx * cy3));
HXDLIN( 396)				Float sx1 = (cy3 - by);
HXDLIN( 396)				Float sy1 = (bx - cx3);
HXDLIN( 396)				Float t01 = ((bx * by3) - (by * bx3));
HXDLIN( 396)				Float tx1 = (by - by3);
HXDLIN( 396)				Float ty1 = (bx3 - bx);
HXDLIN( 396)				Float A1 = ((((-(by3) * cx3) + (by * (-(bx3) + cx3))) + (bx * (by3 - cy3))) + (bx3 * cy3));
HXDLIN( 396)				 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 396)				if ((bx > bx3)) {
HXLINE( 396)					if ((bx > cx3)) {
HXLINE( 396)						int min8;
HXDLIN( 396)						if ((bx3 > cx3)) {
HXLINE( 396)							min8 = ::Math_obj::floor(cx3);
            						}
            						else {
HXLINE( 396)							min8 = ::Math_obj::floor(bx3);
            						}
HXDLIN( 396)						int ii_min16 = min8;
HXDLIN( 396)						int ii_max16 = ::Math_obj::ceil(bx);
HXDLIN( 396)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            					}
            					else {
HXLINE( 396)						int ii_min17 = ::Math_obj::floor(bx3);
HXDLIN( 396)						int ii_max17 = ::Math_obj::ceil(cx3);
HXDLIN( 396)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            					}
            				}
            				else {
HXLINE( 396)					if ((bx3 > cx3)) {
HXLINE( 396)						int min9;
HXDLIN( 396)						if ((bx > cx3)) {
HXLINE( 396)							min9 = ::Math_obj::floor(cx3);
            						}
            						else {
HXLINE( 396)							min9 = ::Math_obj::ceil(bx);
            						}
HXDLIN( 396)						int ii_min18 = min9;
HXDLIN( 396)						int ii_max18 = ::Math_obj::ceil(bx3);
HXDLIN( 396)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            					}
            					else {
HXLINE( 396)						int ii_min19 = ::Math_obj::floor(bx);
HXDLIN( 396)						int ii_max19 = ::Math_obj::ceil(cx3);
HXDLIN( 396)						xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            					}
            				}
HXDLIN( 396)				 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 396)				if ((by > by3)) {
HXLINE( 396)					if ((by > cy3)) {
HXLINE( 396)						int min10;
HXDLIN( 396)						if ((by3 > cy3)) {
HXLINE( 396)							min10 = ::Math_obj::floor(cy3);
            						}
            						else {
HXLINE( 396)							min10 = ::Math_obj::floor(by3);
            						}
HXDLIN( 396)						int ii_min20 = min10;
HXDLIN( 396)						int ii_max20 = ::Math_obj::ceil(by);
HXDLIN( 396)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            					}
            					else {
HXLINE( 396)						int ii_min21 = ::Math_obj::floor(by3);
HXDLIN( 396)						int ii_max21 = ::Math_obj::ceil(cy3);
HXDLIN( 396)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            					}
            				}
            				else {
HXLINE( 396)					if ((by3 > cy3)) {
HXLINE( 396)						int min11;
HXDLIN( 396)						if ((by > cy3)) {
HXLINE( 396)							min11 = ::Math_obj::floor(cy3);
            						}
            						else {
HXLINE( 396)							min11 = ::Math_obj::ceil(by);
            						}
HXDLIN( 396)						int ii_min22 = min11;
HXDLIN( 396)						int ii_max22 = ::Math_obj::ceil(by3);
HXDLIN( 396)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            					}
            					else {
HXLINE( 396)						int ii_min23 = ::Math_obj::floor(by);
HXDLIN( 396)						int ii_max23 = ::Math_obj::ceil(cy3);
HXDLIN( 396)						yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            					}
            				}
HXDLIN( 396)				 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 396)				if (hasUndo1) {
HXLINE( 396)					int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 396)					int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 396)					 ::Dynamic imageType1 = null();
HXDLIN( 396)					 ::pi_xy::ImageStruct this34 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 396)					if (::hx::IsNull( imageType1 )) {
HXLINE(  54)						imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 396)					::Dynamic undoImage4;
HXDLIN( 396)					switch((int)(( (int)(imageType1) ))){
            						case (int)0: {
HXLINE( 396)							 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 396)							 ::iterMagic::BytesImg b7 = byt1;
HXDLIN( 396)							{
HXLINE( 396)								b7->width = width1;
HXDLIN( 396)								b7->height = height1;
HXDLIN( 396)								b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 396)								b7->data = ::haxe::io::Bytes_obj::alloc((b7->length * 4));
HXDLIN( 396)								{
HXLINE( 396)									int len2 = b7->length;
HXDLIN( 396)									int w1 = 0;
HXDLIN( 396)									{
HXLINE( 396)										int _g20 = 0;
HXDLIN( 396)										int _g21 = b7->height;
HXDLIN( 396)										while((_g20 < _g21)){
HXLINE( 396)											_g20 = (_g20 + 1);
HXDLIN( 396)											int y4 = (_g20 - 1);
HXDLIN( 396)											{
HXLINE( 396)												int _g22 = 0;
HXDLIN( 396)												int _g23 = b7->width;
HXDLIN( 396)												while((_g22 < _g23)){
HXLINE( 396)													_g22 = (_g22 + 1);
HXDLIN( 396)													int x4 = (_g22 - 1);
HXDLIN( 396)													{
HXLINE( 396)														w1 = (w1 + 1);
HXDLIN( 396)														b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 396)													{
HXLINE( 396)														w1 = (w1 + 1);
HXDLIN( 396)														b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 396)													{
HXLINE( 396)														w1 = (w1 + 1);
HXDLIN( 396)														b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 396)													{
HXLINE( 396)														w1 = (w1 + 1);
HXDLIN( 396)														b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 396)							undoImage4 = b7;
            						}
            						break;
            						case (int)1: {
HXLINE( 396)							 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 396)							 ::iterMagic::ArrIntImg a8 = arrI1;
HXDLIN( 396)							{
HXLINE( 396)								a8->width = width1;
HXDLIN( 396)								a8->height = height1;
HXDLIN( 396)								a8->data = ::Array_obj< int >::__new(0);
HXDLIN( 396)								a8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 396)								{
HXLINE( 396)									int _g24 = 0;
HXDLIN( 396)									int _g25 = a8->length;
HXDLIN( 396)									while((_g24 < _g25)){
HXLINE( 396)										_g24 = (_g24 + 1);
HXDLIN( 396)										int i6 = (_g24 - 1);
HXDLIN( 396)										a8->data[i6] = 0;
            									}
            								}
            							}
HXDLIN( 396)							undoImage4 = a8;
            						}
            						break;
            						case (int)2: {
HXLINE( 396)							 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 396)							 ::iterMagic::U32ArrImg b8 = u32a1;
HXDLIN( 396)							{
HXLINE( 396)								b8->width = width1;
HXDLIN( 396)								b8->height = height1;
HXDLIN( 396)								b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 396)								int size1 = (b8->length * 4);
HXDLIN( 396)								b8->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 396)								{
HXLINE( 396)									int _g26 = 0;
HXDLIN( 396)									int _g27 = b8->length;
HXDLIN( 396)									while((_g26 < _g27)){
HXLINE( 396)										_g26 = (_g26 + 1);
HXDLIN( 396)										int i7 = (_g26 - 1);
HXDLIN( 396)										{
HXLINE( 396)											 ::haxe::io::ArrayBufferViewImpl this35 = b8->data;
HXDLIN( 396)											bool undoImage5;
HXDLIN( 396)											if ((i7 >= 0)) {
HXLINE( 396)												undoImage5 = (i7 < (this35->byteLength >> 2));
            											}
            											else {
HXLINE( 396)												undoImage5 = false;
            											}
HXDLIN( 396)											if (undoImage5) {
HXLINE( 396)												 ::haxe::io::Bytes _this1 = this35->bytes;
HXDLIN( 396)												int pos1 = ((i7 << 2) + this35->byteOffset);
HXDLIN( 396)												_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 396)												_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 396)												_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 396)												_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 396)							undoImage4 = b8;
            						}
            						break;
            						case (int)3: {
HXLINE( 396)							 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 396)							 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 396)							{
HXLINE( 396)								v2->width = width1;
HXDLIN( 396)								v2->height = height1;
HXDLIN( 396)								v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 396)								v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 396)								{
HXLINE( 396)									int _g28 = 0;
HXDLIN( 396)									int _g29 = v2->length;
HXDLIN( 396)									while((_g28 < _g29)){
HXLINE( 396)										_g28 = (_g28 + 1);
HXDLIN( 396)										int i8 = (_g28 - 1);
HXDLIN( 396)										v2->data->__unsafe_set(i8,0);
            									}
            								}
            							}
HXDLIN( 396)							undoImage4 = v2;
            						}
            						break;
            						case (int)4: {
HXLINE( 396)							 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 396)							 ::iterMagic::StackIntImg b9 = sInt1;
HXDLIN( 396)							{
HXLINE( 396)								b9->width = width1;
HXDLIN( 396)								b9->height = height1;
HXDLIN( 396)								b9->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 396)								b9->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 396)								{
HXLINE( 396)									int len3 = b9->length;
HXDLIN( 396)									 ::haxe::ds::GenericStack_Int d1 = b9->data;
HXDLIN( 396)									if (::hx::IsNull( d1->head )) {
HXLINE( 396)										int _g30 = 0;
HXDLIN( 396)										int _g31 = len3;
HXDLIN( 396)										while((_g30 < _g31)){
HXLINE( 396)											_g30 = (_g30 + 1);
HXDLIN( 396)											int i9 = (_g30 - 1);
HXDLIN( 396)											d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            										}
            									}
            									else {
HXLINE( 396)										int _g32 = 0;
HXDLIN( 396)										int _g33 = len3;
HXDLIN( 396)										while((_g32 < _g33)){
HXLINE( 396)											_g32 = (_g32 + 1);
HXDLIN( 396)											int i10 = (_g32 - 1);
HXDLIN( 396)											{
HXLINE( 396)												 ::haxe::ds::GenericCell_Int l1 = b9->data->head;
HXDLIN( 396)												 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 396)												{
HXLINE( 396)													int _g34 = 0;
HXDLIN( 396)													int _g35 = i10;
HXDLIN( 396)													while((_g34 < _g35)){
HXLINE( 396)														_g34 = (_g34 + 1);
HXDLIN( 396)														int i11 = (_g34 - 1);
HXLINE( 345)														prev1 = l1;
HXLINE( 346)														l1 = l1->next;
            													}
            												}
HXLINE( 396)												if (::hx::IsNull( prev1 )) {
HXLINE( 396)													b9->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 396)													l1 = null();
            												}
            												else {
HXLINE( 396)													prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 396)													l1 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 396)							undoImage4 = b9;
            						}
            						break;
            					}
HXDLIN( 396)					this34->image = undoImage4;
HXDLIN( 396)					this34->width = width1;
HXDLIN( 396)					this34->height = height1;
HXDLIN( 396)					this34->imageType = ( (int)(imageType1) );
HXDLIN( 396)					undoImage3 = this34;
HXDLIN( 396)					{
HXLINE( 396)						int rectLeft1 = xIter31->start;
HXDLIN( 396)						int rectTop1 = yIter31->start;
HXDLIN( 396)						int rectRight1 = xIter31->max;
HXDLIN( 396)						bool forceClear1 = false;
HXDLIN( 396)						{
HXLINE( 396)							int _g36 = rectTop1;
HXDLIN( 396)							int _g37 = yIter31->max;
HXDLIN( 396)							while((_g36 < _g37)){
HXLINE( 396)								_g36 = (_g36 + 1);
HXDLIN( 396)								int dy2 = (_g36 - 1);
HXDLIN( 396)								{
HXLINE( 396)									int _g38 = rectLeft1;
HXDLIN( 396)									int _g39 = rectRight1;
HXDLIN( 396)									while((_g38 < _g39)){
HXLINE( 396)										_g38 = (_g38 + 1);
HXDLIN( 396)										int dx2 = (_g38 - 1);
HXDLIN( 396)										::Dynamic this36 = pixelImage->image;
HXDLIN( 396)										int index5;
HXDLIN( 396)										if (pixelImage->useVirtualPos) {
HXLINE( 396)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 396)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            										}
HXDLIN( 396)										int c6 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN( 396)										int col1;
HXDLIN( 396)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)											col1 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            										}
            										else {
HXLINE( 396)											col1 = c6;
            										}
HXDLIN( 396)										bool hitQuad9;
HXDLIN( 396)										if (pixelImage->useMask) {
HXLINE( 396)											hitQuad9 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 396)											hitQuad9 = false;
            										}
HXDLIN( 396)										if (hitQuad9) {
HXLINE( 396)											 ::pi_xy::ImageStruct this37 = pixelImage->mask;
HXDLIN( 396)											::Dynamic this38 = this37->image;
HXDLIN( 396)											int index6;
HXDLIN( 396)											if (this37->useVirtualPos) {
HXLINE( 396)												index6 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this37->virtualY) * ( (Float)(this37->width) )) + dx2) - this37->virtualX));
            											}
            											else {
HXLINE( 396)												index6 = ::Std_obj::_hx_int(( (Float)(((dy2 * this37->width) + dx2)) ));
            											}
HXDLIN( 396)											int c7 = ::iterMagic::Iimg_obj::get(this38,index6);
HXDLIN( 396)											int v3;
HXDLIN( 396)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)												v3 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            											}
            											else {
HXLINE( 396)												v3 = c7;
            											}
HXDLIN( 396)											int maskPixel1 = v3;
HXDLIN( 396)											int this39 = col1;
HXDLIN( 396)											if ((maskPixel1 == 0)) {
HXLINE( 396)												col1 = this39;
            											}
            											else {
HXLINE( 396)												Float m01;
HXDLIN( 396)												int this40 = ((maskPixel1 >> 24) & 255);
HXDLIN( 396)												if ((this40 == 0)) {
HXLINE( 396)													m01 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													m01 = (( (Float)(this40) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float m11;
HXDLIN( 396)												int this41 = ((maskPixel1 >> 16) & 255);
HXDLIN( 396)												if ((this41 == 0)) {
HXLINE( 396)													m11 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													m11 = (( (Float)(this41) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float m21;
HXDLIN( 396)												int this42 = ((maskPixel1 >> 8) & 255);
HXDLIN( 396)												if ((this42 == 0)) {
HXLINE( 396)													m21 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													m21 = (( (Float)(this42) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float m31;
HXDLIN( 396)												int this43 = (maskPixel1 & 255);
HXDLIN( 396)												if ((this43 == 0)) {
HXLINE( 396)													m31 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													m31 = (( (Float)(this43) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this39 >> 24) & 255)) )));
HXDLIN( 396)												int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this39 >> 16) & 255)) )));
HXDLIN( 396)												int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this39 >> 8) & 255)) )));
HXDLIN( 396)												int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this39 & 255)) )));
HXDLIN( 396)												col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 396)										if ((col1 != 0)) {
HXLINE( 396)											int x5 = (dx2 - rectLeft1);
HXDLIN( 396)											int y5 = (dy2 - rectTop1);
HXDLIN( 396)											int c8 = col1;
HXDLIN( 396)											bool hitQuad10;
HXDLIN( 396)											if ((((c8 >> 24) & 255) < 254)) {
HXLINE( 396)												hitQuad10 = undoImage3->transparent;
            											}
            											else {
HXLINE( 396)												hitQuad10 = false;
            											}
HXDLIN( 396)											if (hitQuad10) {
HXLINE( 396)												int location2;
HXDLIN( 396)												if (undoImage3->useVirtualPos) {
HXLINE( 396)													location2 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            												}
            												else {
HXLINE( 396)													location2 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            												}
HXDLIN( 396)												int this44 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 396)												int this45;
HXDLIN( 396)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)													this45 = ((((((this44 >> 24) & 255) << 24) | ((this44 & 255) << 16)) | (((this44 >> 8) & 255) << 8)) | ((this44 >> 16) & 255));
            												}
            												else {
HXLINE( 396)													this45 = this44;
            												}
HXDLIN( 396)												Float a13;
HXDLIN( 396)												int this46 = ((this45 >> 24) & 255);
HXDLIN( 396)												if ((this46 == 0)) {
HXLINE( 396)													a13 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													a13 = (( (Float)(this46) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float r12;
HXDLIN( 396)												int this47 = ((this45 >> 16) & 255);
HXDLIN( 396)												if ((this47 == 0)) {
HXLINE( 396)													r12 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													r12 = (( (Float)(this47) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float g12;
HXDLIN( 396)												int this48 = ((this45 >> 8) & 255);
HXDLIN( 396)												if ((this48 == 0)) {
HXLINE( 396)													g12 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													g12 = (( (Float)(this48) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float b13;
HXDLIN( 396)												int this49 = (this45 & 255);
HXDLIN( 396)												if ((this49 == 0)) {
HXLINE( 396)													b13 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													b13 = (( (Float)(this49) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float a22;
HXDLIN( 396)												int this50 = ((col1 >> 24) & 255);
HXDLIN( 396)												if ((this50 == 0)) {
HXLINE( 396)													a22 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													a22 = (( (Float)(this50) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float r22;
HXDLIN( 396)												int this51 = ((col1 >> 16) & 255);
HXDLIN( 396)												if ((this51 == 0)) {
HXLINE( 396)													r22 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													r22 = (( (Float)(this51) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float g22;
HXDLIN( 396)												int this52 = ((col1 >> 8) & 255);
HXDLIN( 396)												if ((this52 == 0)) {
HXLINE( 396)													g22 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													g22 = (( (Float)(this52) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float b23;
HXDLIN( 396)												int this53 = (col1 & 255);
HXDLIN( 396)												if ((this53 == 0)) {
HXLINE( 396)													b23 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													b23 = (( (Float)(this53) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 396)												int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 396)												int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 396)												int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 396)												int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 396)												int blended2 = ((((a9 << 24) | (r4 << 16)) | (g4 << 8)) | b10);
HXDLIN( 396)												{
HXLINE( 396)													int hitQuad11;
HXDLIN( 396)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)														hitQuad11 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            													}
            													else {
HXLINE( 396)														hitQuad11 = blended2;
            													}
HXDLIN( 396)													::iterMagic::Iimg_obj::set(undoImage3->image,location2,hitQuad11);
            												}
            											}
            											else {
HXLINE( 396)												::Dynamic this54 = undoImage3->image;
HXDLIN( 396)												int index7;
HXDLIN( 396)												if (undoImage3->useVirtualPos) {
HXLINE( 396)													index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            												}
            												else {
HXLINE( 396)													index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            												}
HXDLIN( 396)												int hitQuad12;
HXDLIN( 396)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)													hitQuad12 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            												}
            												else {
HXLINE( 396)													hitQuad12 = c8;
            												}
HXDLIN( 396)												::iterMagic::Iimg_obj::set(this54,index7,hitQuad12);
            											}
            										}
            										else {
HXLINE( 396)											if (forceClear1) {
HXLINE( 396)												::Dynamic this55 = undoImage3->image;
HXDLIN( 396)												int x6 = (dx2 - rectLeft1);
HXDLIN( 396)												int y6 = (dy2 - rectTop1);
HXDLIN( 396)												int index8;
HXDLIN( 396)												if (undoImage3->useVirtualPos) {
HXLINE( 396)													index8 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x6) - undoImage3->virtualX));
            												}
            												else {
HXLINE( 396)													index8 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x6)) ));
            												}
HXDLIN( 396)												::iterMagic::Iimg_obj::set(this55,index8,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 396)				bool found1 = false;
HXDLIN( 396)				Float s1 = ((Float)0.);
HXDLIN( 396)				Float t1 = ((Float)0.);
HXDLIN( 396)				Float sxx1 = ((Float)0.);
HXDLIN( 396)				Float txx1 = ((Float)0.);
HXDLIN( 396)				{
HXLINE( 396)					int _g_min2 = xIter31->start;
HXDLIN( 396)					int _g_max2 = xIter31->max;
HXDLIN( 396)					while((_g_min2 < _g_max2)){
HXLINE( 396)						_g_min2 = (_g_min2 + 1);
HXDLIN( 396)						int x7 = (_g_min2 - 1);
HXLINE(  60)						sxx1 = (sx1 * ( (Float)(x7) ));
HXLINE(  61)						txx1 = (tx1 * ( (Float)(x7) ));
HXLINE(  62)						found1 = false;
HXLINE( 396)						{
HXLINE( 396)							int _g_min3 = yIter31->start;
HXDLIN( 396)							int _g_max3 = yIter31->max;
HXDLIN( 396)							while((_g_min3 < _g_max3)){
HXLINE( 396)								_g_min3 = (_g_min3 + 1);
HXDLIN( 396)								int y7 = (_g_min3 - 1);
HXLINE(  64)								s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y7) )));
HXLINE(  65)								t1 = ((t01 + txx1) + (ty1 * ( (Float)(y7) )));
HXLINE( 396)								bool hitQuad13;
HXDLIN( 396)								if (!((s1 <= 0))) {
HXLINE( 396)									hitQuad13 = (t1 <= 0);
            								}
            								else {
HXLINE( 396)									hitQuad13 = true;
            								}
HXDLIN( 396)								if (hitQuad13) {
HXLINE( 396)									if (found1) {
HXLINE( 396)										goto _hx_goto_473;
            									}
            								}
            								else {
HXLINE( 396)									if (((s1 + t1) < A1)) {
HXLINE( 396)										{
HXLINE( 396)											int c9 = color;
HXDLIN( 396)											bool hitQuad14;
HXDLIN( 396)											if ((((c9 >> 24) & 255) < 254)) {
HXLINE( 396)												hitQuad14 = pixelImage->transparent;
            											}
            											else {
HXLINE( 396)												hitQuad14 = false;
            											}
HXDLIN( 396)											if (hitQuad14) {
HXLINE( 396)												int location3;
HXDLIN( 396)												if (pixelImage->useVirtualPos) {
HXLINE( 396)													location3 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x7) - pixelImage->virtualX));
            												}
            												else {
HXLINE( 396)													location3 = ::Std_obj::_hx_int(( (Float)(((y7 * pixelImage->width) + x7)) ));
            												}
HXDLIN( 396)												int this56 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN( 396)												int this57;
HXDLIN( 396)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)													this57 = ((((((this56 >> 24) & 255) << 24) | ((this56 & 255) << 16)) | (((this56 >> 8) & 255) << 8)) | ((this56 >> 16) & 255));
            												}
            												else {
HXLINE( 396)													this57 = this56;
            												}
HXDLIN( 396)												Float a14;
HXDLIN( 396)												int this58 = ((this57 >> 24) & 255);
HXDLIN( 396)												if ((this58 == 0)) {
HXLINE( 396)													a14 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													a14 = (( (Float)(this58) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float r13;
HXDLIN( 396)												int this59 = ((this57 >> 16) & 255);
HXDLIN( 396)												if ((this59 == 0)) {
HXLINE( 396)													r13 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													r13 = (( (Float)(this59) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float g13;
HXDLIN( 396)												int this60 = ((this57 >> 8) & 255);
HXDLIN( 396)												if ((this60 == 0)) {
HXLINE( 396)													g13 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													g13 = (( (Float)(this60) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float b14;
HXDLIN( 396)												int this61 = (this57 & 255);
HXDLIN( 396)												if ((this61 == 0)) {
HXLINE( 396)													b14 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													b14 = (( (Float)(this61) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float a23;
HXDLIN( 396)												int this62 = ((color >> 24) & 255);
HXDLIN( 396)												if ((this62 == 0)) {
HXLINE( 396)													a23 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													a23 = (( (Float)(this62) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float r23;
HXDLIN( 396)												int this63 = ((color >> 16) & 255);
HXDLIN( 396)												if ((this63 == 0)) {
HXLINE( 396)													r23 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													r23 = (( (Float)(this63) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float g23;
HXDLIN( 396)												int this64 = ((color >> 8) & 255);
HXDLIN( 396)												if ((this64 == 0)) {
HXLINE( 396)													g23 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													g23 = (( (Float)(this64) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float b24;
HXDLIN( 396)												int this65 = (color & 255);
HXDLIN( 396)												if ((this65 == 0)) {
HXLINE( 396)													b24 = ((Float)0.);
            												}
            												else {
HXLINE( 396)													b24 = (( (Float)(this65) ) / ( (Float)(255) ));
            												}
HXDLIN( 396)												Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 396)												int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 396)												int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 396)												int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 396)												int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 396)												int blended3 = ((((a10 << 24) | (r5 << 16)) | (g5 << 8)) | b15);
HXDLIN( 396)												{
HXLINE( 396)													int hitQuad15;
HXDLIN( 396)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)														hitQuad15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            													}
            													else {
HXLINE( 396)														hitQuad15 = blended3;
            													}
HXDLIN( 396)													::iterMagic::Iimg_obj::set(pixelImage->image,location3,hitQuad15);
            												}
            											}
            											else {
HXLINE( 396)												::Dynamic this66 = pixelImage->image;
HXDLIN( 396)												int index9;
HXDLIN( 396)												if (pixelImage->useVirtualPos) {
HXLINE( 396)													index9 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x7) - pixelImage->virtualX));
            												}
            												else {
HXLINE( 396)													index9 = ::Std_obj::_hx_int(( (Float)(((y7 * pixelImage->width) + x7)) ));
            												}
HXDLIN( 396)												int hitQuad16;
HXDLIN( 396)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 396)													hitQuad16 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            												}
            												else {
HXLINE( 396)													hitQuad16 = c9;
            												}
HXDLIN( 396)												::iterMagic::Iimg_obj::set(this66,index9,hitQuad16);
            											}
            										}
HXLINE(  73)										found1 = true;
            									}
            									else {
HXLINE( 396)										if (found1) {
HXLINE( 396)											goto _hx_goto_473;
            										}
            									}
            								}
            							}
            							_hx_goto_473:;
            						}
            					}
            				}
HXDLIN( 396)				 ::pi_xy::iter::IntIterStart v_yIter31;
HXDLIN( 396)				 ::pi_xy::iter::IntIterStart v_xIter31;
HXDLIN( 396)				int v_undoY1;
HXDLIN( 396)				int v_undoX1;
HXDLIN( 396)				Float v_ty1;
HXDLIN( 396)				Float v_tx1;
HXDLIN( 396)				Float v_t01;
HXDLIN( 396)				Float v_sy1;
HXDLIN( 396)				Float v_sx1;
HXDLIN( 396)				Float v_s01;
HXDLIN( 396)				Float v_A1;
HXDLIN( 396)				Float ax2 = bx;
HXDLIN( 396)				Float ay2 = by;
HXDLIN( 396)				 ::pi_xy::ImageStruct v_undoImage1 = null();
HXDLIN( 396)				Float bx4 = bx3;
HXDLIN( 396)				Float by4 = by3;
HXDLIN( 396)				Float cx4 = cx3;
HXDLIN( 396)				Float cy4 = cy3;
HXDLIN( 396)				bool adjustWinding3 = (((((ax2 * by4) - (bx4 * ay2)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay2) - (ax2 * cy4))) > 0);
HXDLIN( 396)				if (!(adjustWinding3)) {
HXLINE( 396)					Float bx_3 = bx4;
HXDLIN( 396)					Float by_3 = by4;
HXLINE(  24)					bx4 = cx4;
HXLINE(  25)					by4 = cy4;
HXLINE(  26)					cx4 = bx_3;
HXLINE(  27)					cy4 = by_3;
            				}
HXLINE( 396)				Float v_ax1 = ax2;
HXDLIN( 396)				Float v_ay1 = ay2;
HXDLIN( 396)				Float v_bx1 = bx4;
HXDLIN( 396)				Float v_by1 = by4;
HXDLIN( 396)				Float v_cx1 = cx4;
HXDLIN( 396)				Float v_cy1 = cy4;
HXDLIN( 396)				bool v_preCalculated1 = true;
HXDLIN( 396)				{
HXLINE( 396)					v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN( 396)					v_sx1 = (v_cy1 - v_ay1);
HXDLIN( 396)					v_sy1 = (v_ax1 - v_cx1);
HXDLIN( 396)					v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN( 396)					v_tx1 = (v_ay1 - v_by1);
HXDLIN( 396)					v_ty1 = (v_bx1 - v_ax1);
HXDLIN( 396)					v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN( 396)					Float a15 = v_ax1;
HXDLIN( 396)					Float b16 = v_bx1;
HXDLIN( 396)					Float c10 = v_cx1;
HXDLIN( 396)					if ((a15 > b16)) {
HXLINE( 396)						if ((a15 > c10)) {
HXLINE( 396)							int min12;
HXDLIN( 396)							if ((b16 > c10)) {
HXLINE( 396)								min12 = ::Math_obj::floor(c10);
            							}
            							else {
HXLINE( 396)								min12 = ::Math_obj::floor(b16);
            							}
HXDLIN( 396)							int ii_min24 = min12;
HXDLIN( 396)							int ii_max24 = ::Math_obj::ceil(a15);
HXDLIN( 396)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            						}
            						else {
HXLINE( 396)							int ii_min25 = ::Math_obj::floor(b16);
HXDLIN( 396)							int ii_max25 = ::Math_obj::ceil(c10);
HXDLIN( 396)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            						}
            					}
            					else {
HXLINE( 396)						if ((b16 > c10)) {
HXLINE( 396)							int min13;
HXDLIN( 396)							if ((a15 > c10)) {
HXLINE( 396)								min13 = ::Math_obj::floor(c10);
            							}
            							else {
HXLINE( 396)								min13 = ::Math_obj::ceil(a15);
            							}
HXDLIN( 396)							int ii_min26 = min13;
HXDLIN( 396)							int ii_max26 = ::Math_obj::ceil(b16);
HXDLIN( 396)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            						}
            						else {
HXLINE( 396)							int ii_min27 = ::Math_obj::floor(a15);
HXDLIN( 396)							int ii_max27 = ::Math_obj::ceil(c10);
HXDLIN( 396)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            						}
            					}
HXDLIN( 396)					Float a16 = v_ay1;
HXDLIN( 396)					Float b17 = v_by1;
HXDLIN( 396)					Float c11 = v_cy1;
HXDLIN( 396)					if ((a16 > b17)) {
HXLINE( 396)						if ((a16 > c11)) {
HXLINE( 396)							int min14;
HXDLIN( 396)							if ((b17 > c11)) {
HXLINE( 396)								min14 = ::Math_obj::floor(c11);
            							}
            							else {
HXLINE( 396)								min14 = ::Math_obj::floor(b17);
            							}
HXDLIN( 396)							int ii_min28 = min14;
HXDLIN( 396)							int ii_max28 = ::Math_obj::ceil(a16);
HXDLIN( 396)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            						}
            						else {
HXLINE( 396)							int ii_min29 = ::Math_obj::floor(b17);
HXDLIN( 396)							int ii_max29 = ::Math_obj::ceil(c11);
HXDLIN( 396)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            						}
            					}
            					else {
HXLINE( 396)						if ((b17 > c11)) {
HXLINE( 396)							int min15;
HXDLIN( 396)							if ((a16 > c11)) {
HXLINE( 396)								min15 = ::Math_obj::floor(c11);
            							}
            							else {
HXLINE( 396)								min15 = ::Math_obj::ceil(a16);
            							}
HXDLIN( 396)							int ii_min30 = min15;
HXDLIN( 396)							int ii_max30 = ::Math_obj::ceil(b17);
HXDLIN( 396)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            						}
            						else {
HXLINE( 396)							int ii_min31 = ::Math_obj::floor(a16);
HXDLIN( 396)							int ii_max31 = ::Math_obj::ceil(c11);
HXDLIN( 396)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            						}
            					}
            				}
HXDLIN( 396)				if (hasUndo1) {
HXLINE( 396)					v_undoImage1 = undoImage3;
HXDLIN( 396)					v_undoX1 = xIter31->start;
HXDLIN( 396)					v_undoY1 = yIter31->start;
            				}
HXDLIN( 396)				 ::pi_xy::algo::HitQuad v4 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXLINE( 394)				hitQuad = v4;
            			}
            			else {
HXLINE( 398)				Float sin2 = ::Math_obj::sin(theta);
HXDLIN( 398)				Float cos2 = ::Math_obj::cos(theta);
HXDLIN( 398)				Float radius11 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN( 398)				Float radius22 = (thick / ( (Float)(2) ));
HXDLIN( 398)				Float dx3 = ((Float)0.1);
HXDLIN( 398)				Float dy3 = radius11;
HXDLIN( 398)				Float cx5 = h2;
HXDLIN( 398)				Float cy5 = radius22;
HXDLIN( 398)				Float bx5 = h2;
HXDLIN( 398)				Float by5 = -(radius22);
HXDLIN( 398)				Float ax3 = ((Float)0.1);
HXDLIN( 398)				Float ay3 = -(radius11);
HXDLIN( 398)				Float temp1 = ((Float)0.);
HXLINE( 240)				temp1 = (px + ((ax3 * cos2) - (ay3 * sin2)));
HXLINE( 241)				ay3 = (py + ((ay3 * cos2) + (ax3 * sin2)));
HXLINE( 242)				ax3 = temp1;
HXLINE( 244)				temp1 = (px + ((bx5 * cos2) - (by5 * sin2)));
HXLINE( 245)				by5 = (py + ((by5 * cos2) + (bx5 * sin2)));
HXLINE( 246)				bx5 = temp1;
HXLINE( 248)				temp1 = (px + ((cx5 * cos2) - (cy5 * sin2)));
HXLINE( 249)				cy5 = (py + ((cy5 * cos2) + (cx5 * sin2)));
HXLINE( 250)				cx5 = temp1;
HXLINE( 252)				temp1 = (px + ((dx3 * cos2) - (dy3 * sin2)));
HXLINE( 253)				dy3 = (py + ((dy3 * cos2) + (dx3 * sin2)));
HXLINE( 254)				dx3 = temp1;
HXLINE( 398)				Float bx6 = bx5;
HXDLIN( 398)				Float by6 = by5;
HXDLIN( 398)				Float cx6 = dx3;
HXDLIN( 398)				Float cy6 = dy3;
HXDLIN( 398)				bool hasUndo2 = false;
HXDLIN( 398)				bool adjustWinding4 = (((((ax3 * by6) - (bx6 * ay3)) + ((bx6 * cy6) - (cx6 * by6))) + ((cx6 * ay3) - (ax3 * cy6))) > 0);
HXDLIN( 398)				if (!(adjustWinding4)) {
HXLINE( 398)					Float bx_4 = bx6;
HXDLIN( 398)					Float by_4 = by6;
HXLINE(  25)					bx6 = cx6;
HXLINE(  26)					by6 = cy6;
HXLINE(  27)					cx6 = bx_4;
HXLINE(  28)					cy6 = by_4;
            				}
HXLINE( 398)				Float s02 = ((ay3 * cx6) - (ax3 * cy6));
HXDLIN( 398)				Float sx2 = (cy6 - ay3);
HXDLIN( 398)				Float sy2 = (ax3 - cx6);
HXDLIN( 398)				Float t02 = ((ax3 * by6) - (ay3 * bx6));
HXDLIN( 398)				Float tx2 = (ay3 - by6);
HXDLIN( 398)				Float ty2 = (bx6 - ax3);
HXDLIN( 398)				Float A2 = ((((-(by6) * cx6) + (ay3 * (-(bx6) + cx6))) + (ax3 * (by6 - cy6))) + (bx6 * cy6));
HXDLIN( 398)				 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 398)				if ((ax3 > bx6)) {
HXLINE( 398)					if ((ax3 > cx6)) {
HXLINE( 398)						int min16;
HXDLIN( 398)						if ((bx6 > cx6)) {
HXLINE( 398)							min16 = ::Math_obj::floor(cx6);
            						}
            						else {
HXLINE( 398)							min16 = ::Math_obj::floor(bx6);
            						}
HXDLIN( 398)						int ii_min32 = min16;
HXDLIN( 398)						int ii_max32 = ::Math_obj::ceil(ax3);
HXDLIN( 398)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            					}
            					else {
HXLINE( 398)						int ii_min33 = ::Math_obj::floor(bx6);
HXDLIN( 398)						int ii_max33 = ::Math_obj::ceil(cx6);
HXDLIN( 398)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            					}
            				}
            				else {
HXLINE( 398)					if ((bx6 > cx6)) {
HXLINE( 398)						int min17;
HXDLIN( 398)						if ((ax3 > cx6)) {
HXLINE( 398)							min17 = ::Math_obj::floor(cx6);
            						}
            						else {
HXLINE( 398)							min17 = ::Math_obj::ceil(ax3);
            						}
HXDLIN( 398)						int ii_min34 = min17;
HXDLIN( 398)						int ii_max34 = ::Math_obj::ceil(bx6);
HXDLIN( 398)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            					}
            					else {
HXLINE( 398)						int ii_min35 = ::Math_obj::floor(ax3);
HXDLIN( 398)						int ii_max35 = ::Math_obj::ceil(cx6);
HXDLIN( 398)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            					}
            				}
HXDLIN( 398)				 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 398)				if ((ay3 > by6)) {
HXLINE( 398)					if ((ay3 > cy6)) {
HXLINE( 398)						int min18;
HXDLIN( 398)						if ((by6 > cy6)) {
HXLINE( 398)							min18 = ::Math_obj::floor(cy6);
            						}
            						else {
HXLINE( 398)							min18 = ::Math_obj::floor(by6);
            						}
HXDLIN( 398)						int ii_min36 = min18;
HXDLIN( 398)						int ii_max36 = ::Math_obj::ceil(ay3);
HXDLIN( 398)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            					}
            					else {
HXLINE( 398)						int ii_min37 = ::Math_obj::floor(by6);
HXDLIN( 398)						int ii_max37 = ::Math_obj::ceil(cy6);
HXDLIN( 398)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            					}
            				}
            				else {
HXLINE( 398)					if ((by6 > cy6)) {
HXLINE( 398)						int min19;
HXDLIN( 398)						if ((ay3 > cy6)) {
HXLINE( 398)							min19 = ::Math_obj::floor(cy6);
            						}
            						else {
HXLINE( 398)							min19 = ::Math_obj::ceil(ay3);
            						}
HXDLIN( 398)						int ii_min38 = min19;
HXDLIN( 398)						int ii_max38 = ::Math_obj::ceil(by6);
HXDLIN( 398)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            					}
            					else {
HXLINE( 398)						int ii_min39 = ::Math_obj::floor(ay3);
HXDLIN( 398)						int ii_max39 = ::Math_obj::ceil(cy6);
HXDLIN( 398)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            					}
            				}
HXDLIN( 398)				 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 398)				if (hasUndo2) {
HXLINE( 398)					int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 398)					int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 398)					 ::Dynamic imageType2 = null();
HXDLIN( 398)					 ::pi_xy::ImageStruct this67 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 398)					if (::hx::IsNull( imageType2 )) {
HXLINE(  54)						imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 398)					::Dynamic undoImage7;
HXDLIN( 398)					switch((int)(( (int)(imageType2) ))){
            						case (int)0: {
HXLINE( 398)							 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 398)							 ::iterMagic::BytesImg b18 = byt2;
HXDLIN( 398)							{
HXLINE( 398)								b18->width = width2;
HXDLIN( 398)								b18->height = height2;
HXDLIN( 398)								b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 398)								b18->data = ::haxe::io::Bytes_obj::alloc((b18->length * 4));
HXDLIN( 398)								{
HXLINE( 398)									int len4 = b18->length;
HXDLIN( 398)									int w2 = 0;
HXDLIN( 398)									{
HXLINE( 398)										int _g40 = 0;
HXDLIN( 398)										int _g41 = b18->height;
HXDLIN( 398)										while((_g40 < _g41)){
HXLINE( 398)											_g40 = (_g40 + 1);
HXDLIN( 398)											int y8 = (_g40 - 1);
HXDLIN( 398)											{
HXLINE( 398)												int _g42 = 0;
HXDLIN( 398)												int _g43 = b18->width;
HXDLIN( 398)												while((_g42 < _g43)){
HXLINE( 398)													_g42 = (_g42 + 1);
HXDLIN( 398)													int x8 = (_g42 - 1);
HXDLIN( 398)													{
HXLINE( 398)														w2 = (w2 + 1);
HXDLIN( 398)														b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 398)													{
HXLINE( 398)														w2 = (w2 + 1);
HXDLIN( 398)														b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 398)													{
HXLINE( 398)														w2 = (w2 + 1);
HXDLIN( 398)														b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 398)													{
HXLINE( 398)														w2 = (w2 + 1);
HXDLIN( 398)														b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 398)							undoImage7 = b18;
            						}
            						break;
            						case (int)1: {
HXLINE( 398)							 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 398)							 ::iterMagic::ArrIntImg a17 = arrI2;
HXDLIN( 398)							{
HXLINE( 398)								a17->width = width2;
HXDLIN( 398)								a17->height = height2;
HXDLIN( 398)								a17->data = ::Array_obj< int >::__new(0);
HXDLIN( 398)								a17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 398)								{
HXLINE( 398)									int _g44 = 0;
HXDLIN( 398)									int _g45 = a17->length;
HXDLIN( 398)									while((_g44 < _g45)){
HXLINE( 398)										_g44 = (_g44 + 1);
HXDLIN( 398)										int i12 = (_g44 - 1);
HXDLIN( 398)										a17->data[i12] = 0;
            									}
            								}
            							}
HXDLIN( 398)							undoImage7 = a17;
            						}
            						break;
            						case (int)2: {
HXLINE( 398)							 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 398)							 ::iterMagic::U32ArrImg b19 = u32a2;
HXDLIN( 398)							{
HXLINE( 398)								b19->width = width2;
HXDLIN( 398)								b19->height = height2;
HXDLIN( 398)								b19->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 398)								int size2 = (b19->length * 4);
HXDLIN( 398)								b19->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 398)								{
HXLINE( 398)									int _g46 = 0;
HXDLIN( 398)									int _g47 = b19->length;
HXDLIN( 398)									while((_g46 < _g47)){
HXLINE( 398)										_g46 = (_g46 + 1);
HXDLIN( 398)										int i13 = (_g46 - 1);
HXDLIN( 398)										{
HXLINE( 398)											 ::haxe::io::ArrayBufferViewImpl this68 = b19->data;
HXDLIN( 398)											bool undoImage8;
HXDLIN( 398)											if ((i13 >= 0)) {
HXLINE( 398)												undoImage8 = (i13 < (this68->byteLength >> 2));
            											}
            											else {
HXLINE( 398)												undoImage8 = false;
            											}
HXDLIN( 398)											if (undoImage8) {
HXLINE( 398)												 ::haxe::io::Bytes _this2 = this68->bytes;
HXDLIN( 398)												int pos2 = ((i13 << 2) + this68->byteOffset);
HXDLIN( 398)												_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 398)												_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 398)												_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 398)												_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 398)							undoImage7 = b19;
            						}
            						break;
            						case (int)3: {
HXLINE( 398)							 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 398)							 ::iterMagic::VecIntImg v5 = vec2;
HXDLIN( 398)							{
HXLINE( 398)								v5->width = width2;
HXDLIN( 398)								v5->height = height2;
HXDLIN( 398)								v5->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 398)								v5->data = ::Array_obj< int >::__new(v5->length);
HXDLIN( 398)								{
HXLINE( 398)									int _g48 = 0;
HXDLIN( 398)									int _g49 = v5->length;
HXDLIN( 398)									while((_g48 < _g49)){
HXLINE( 398)										_g48 = (_g48 + 1);
HXDLIN( 398)										int i14 = (_g48 - 1);
HXDLIN( 398)										v5->data->__unsafe_set(i14,0);
            									}
            								}
            							}
HXDLIN( 398)							undoImage7 = v5;
            						}
            						break;
            						case (int)4: {
HXLINE( 398)							 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 398)							 ::iterMagic::StackIntImg b20 = sInt2;
HXDLIN( 398)							{
HXLINE( 398)								b20->width = width2;
HXDLIN( 398)								b20->height = height2;
HXDLIN( 398)								b20->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 398)								b20->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 398)								{
HXLINE( 398)									int len5 = b20->length;
HXDLIN( 398)									 ::haxe::ds::GenericStack_Int d2 = b20->data;
HXDLIN( 398)									if (::hx::IsNull( d2->head )) {
HXLINE( 398)										int _g50 = 0;
HXDLIN( 398)										int _g51 = len5;
HXDLIN( 398)										while((_g50 < _g51)){
HXLINE( 398)											_g50 = (_g50 + 1);
HXDLIN( 398)											int i15 = (_g50 - 1);
HXDLIN( 398)											d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            										}
            									}
            									else {
HXLINE( 398)										int _g52 = 0;
HXDLIN( 398)										int _g53 = len5;
HXDLIN( 398)										while((_g52 < _g53)){
HXLINE( 398)											_g52 = (_g52 + 1);
HXDLIN( 398)											int i16 = (_g52 - 1);
HXDLIN( 398)											{
HXLINE( 398)												 ::haxe::ds::GenericCell_Int l2 = b20->data->head;
HXDLIN( 398)												 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 398)												{
HXLINE( 398)													int _g54 = 0;
HXDLIN( 398)													int _g55 = i16;
HXDLIN( 398)													while((_g54 < _g55)){
HXLINE( 398)														_g54 = (_g54 + 1);
HXDLIN( 398)														int i17 = (_g54 - 1);
HXLINE( 345)														prev2 = l2;
HXLINE( 346)														l2 = l2->next;
            													}
            												}
HXLINE( 398)												if (::hx::IsNull( prev2 )) {
HXLINE( 398)													b20->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 398)													l2 = null();
            												}
            												else {
HXLINE( 398)													prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 398)													l2 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 398)							undoImage7 = b20;
            						}
            						break;
            					}
HXDLIN( 398)					this67->image = undoImage7;
HXDLIN( 398)					this67->width = width2;
HXDLIN( 398)					this67->height = height2;
HXDLIN( 398)					this67->imageType = ( (int)(imageType2) );
HXDLIN( 398)					undoImage6 = this67;
HXDLIN( 398)					{
HXLINE( 398)						int rectLeft2 = xIter32->start;
HXDLIN( 398)						int rectTop2 = yIter32->start;
HXDLIN( 398)						int rectRight2 = xIter32->max;
HXDLIN( 398)						bool forceClear2 = false;
HXDLIN( 398)						{
HXLINE( 398)							int _g56 = rectTop2;
HXDLIN( 398)							int _g57 = yIter32->max;
HXDLIN( 398)							while((_g56 < _g57)){
HXLINE( 398)								_g56 = (_g56 + 1);
HXDLIN( 398)								int dy4 = (_g56 - 1);
HXDLIN( 398)								{
HXLINE( 398)									int _g58 = rectLeft2;
HXDLIN( 398)									int _g59 = rectRight2;
HXDLIN( 398)									while((_g58 < _g59)){
HXLINE( 398)										_g58 = (_g58 + 1);
HXDLIN( 398)										int dx4 = (_g58 - 1);
HXDLIN( 398)										::Dynamic this69 = pixelImage->image;
HXDLIN( 398)										int index10;
HXDLIN( 398)										if (pixelImage->useVirtualPos) {
HXLINE( 398)											index10 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 398)											index10 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            										}
HXDLIN( 398)										int c12 = ::iterMagic::Iimg_obj::get(this69,index10);
HXDLIN( 398)										int col2;
HXDLIN( 398)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)											col2 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            										}
            										else {
HXLINE( 398)											col2 = c12;
            										}
HXDLIN( 398)										bool hitQuad17;
HXDLIN( 398)										if (pixelImage->useMask) {
HXLINE( 398)											hitQuad17 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 398)											hitQuad17 = false;
            										}
HXDLIN( 398)										if (hitQuad17) {
HXLINE( 398)											 ::pi_xy::ImageStruct this70 = pixelImage->mask;
HXDLIN( 398)											::Dynamic this71 = this70->image;
HXDLIN( 398)											int index11;
HXDLIN( 398)											if (this70->useVirtualPos) {
HXLINE( 398)												index11 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this70->virtualY) * ( (Float)(this70->width) )) + dx4) - this70->virtualX));
            											}
            											else {
HXLINE( 398)												index11 = ::Std_obj::_hx_int(( (Float)(((dy4 * this70->width) + dx4)) ));
            											}
HXDLIN( 398)											int c13 = ::iterMagic::Iimg_obj::get(this71,index11);
HXDLIN( 398)											int v6;
HXDLIN( 398)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)												v6 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            											}
            											else {
HXLINE( 398)												v6 = c13;
            											}
HXDLIN( 398)											int maskPixel2 = v6;
HXDLIN( 398)											int this72 = col2;
HXDLIN( 398)											if ((maskPixel2 == 0)) {
HXLINE( 398)												col2 = this72;
            											}
            											else {
HXLINE( 398)												Float m02;
HXDLIN( 398)												int this73 = ((maskPixel2 >> 24) & 255);
HXDLIN( 398)												if ((this73 == 0)) {
HXLINE( 398)													m02 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													m02 = (( (Float)(this73) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float m12;
HXDLIN( 398)												int this74 = ((maskPixel2 >> 16) & 255);
HXDLIN( 398)												if ((this74 == 0)) {
HXLINE( 398)													m12 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													m12 = (( (Float)(this74) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float m22;
HXDLIN( 398)												int this75 = ((maskPixel2 >> 8) & 255);
HXDLIN( 398)												if ((this75 == 0)) {
HXLINE( 398)													m22 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													m22 = (( (Float)(this75) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float m32;
HXDLIN( 398)												int this76 = (maskPixel2 & 255);
HXDLIN( 398)												if ((this76 == 0)) {
HXLINE( 398)													m32 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													m32 = (( (Float)(this76) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this72 >> 24) & 255)) )));
HXDLIN( 398)												int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this72 >> 16) & 255)) )));
HXDLIN( 398)												int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this72 >> 8) & 255)) )));
HXDLIN( 398)												int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this72 & 255)) )));
HXDLIN( 398)												col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 398)										if ((col2 != 0)) {
HXLINE( 398)											int x9 = (dx4 - rectLeft2);
HXDLIN( 398)											int y9 = (dy4 - rectTop2);
HXDLIN( 398)											int c14 = col2;
HXDLIN( 398)											bool hitQuad18;
HXDLIN( 398)											if ((((c14 >> 24) & 255) < 254)) {
HXLINE( 398)												hitQuad18 = undoImage6->transparent;
            											}
            											else {
HXLINE( 398)												hitQuad18 = false;
            											}
HXDLIN( 398)											if (hitQuad18) {
HXLINE( 398)												int location4;
HXDLIN( 398)												if (undoImage6->useVirtualPos) {
HXLINE( 398)													location4 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            												}
            												else {
HXLINE( 398)													location4 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            												}
HXDLIN( 398)												int this77 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 398)												int this78;
HXDLIN( 398)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)													this78 = ((((((this77 >> 24) & 255) << 24) | ((this77 & 255) << 16)) | (((this77 >> 8) & 255) << 8)) | ((this77 >> 16) & 255));
            												}
            												else {
HXLINE( 398)													this78 = this77;
            												}
HXDLIN( 398)												Float a18;
HXDLIN( 398)												int this79 = ((this78 >> 24) & 255);
HXDLIN( 398)												if ((this79 == 0)) {
HXLINE( 398)													a18 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													a18 = (( (Float)(this79) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float r14;
HXDLIN( 398)												int this80 = ((this78 >> 16) & 255);
HXDLIN( 398)												if ((this80 == 0)) {
HXLINE( 398)													r14 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													r14 = (( (Float)(this80) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float g14;
HXDLIN( 398)												int this81 = ((this78 >> 8) & 255);
HXDLIN( 398)												if ((this81 == 0)) {
HXLINE( 398)													g14 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													g14 = (( (Float)(this81) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float b110;
HXDLIN( 398)												int this82 = (this78 & 255);
HXDLIN( 398)												if ((this82 == 0)) {
HXLINE( 398)													b110 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													b110 = (( (Float)(this82) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float a24;
HXDLIN( 398)												int this83 = ((col2 >> 24) & 255);
HXDLIN( 398)												if ((this83 == 0)) {
HXLINE( 398)													a24 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													a24 = (( (Float)(this83) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float r24;
HXDLIN( 398)												int this84 = ((col2 >> 16) & 255);
HXDLIN( 398)												if ((this84 == 0)) {
HXLINE( 398)													r24 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													r24 = (( (Float)(this84) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float g24;
HXDLIN( 398)												int this85 = ((col2 >> 8) & 255);
HXDLIN( 398)												if ((this85 == 0)) {
HXLINE( 398)													g24 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													g24 = (( (Float)(this85) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float b25;
HXDLIN( 398)												int this86 = (col2 & 255);
HXDLIN( 398)												if ((this86 == 0)) {
HXLINE( 398)													b25 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													b25 = (( (Float)(this86) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float a34 = (a18 * (( (Float)(1) ) - a24));
HXDLIN( 398)												int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 398)												int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 398)												int b26 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a34) + (b25 * a24))));
HXDLIN( 398)												int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 398)												int blended4 = ((((a19 << 24) | (r6 << 16)) | (g6 << 8)) | b26);
HXDLIN( 398)												{
HXLINE( 398)													int hitQuad19;
HXDLIN( 398)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)														hitQuad19 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            													}
            													else {
HXLINE( 398)														hitQuad19 = blended4;
            													}
HXDLIN( 398)													::iterMagic::Iimg_obj::set(undoImage6->image,location4,hitQuad19);
            												}
            											}
            											else {
HXLINE( 398)												::Dynamic this87 = undoImage6->image;
HXDLIN( 398)												int index12;
HXDLIN( 398)												if (undoImage6->useVirtualPos) {
HXLINE( 398)													index12 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            												}
            												else {
HXLINE( 398)													index12 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            												}
HXDLIN( 398)												int hitQuad20;
HXDLIN( 398)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)													hitQuad20 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            												}
            												else {
HXLINE( 398)													hitQuad20 = c14;
            												}
HXDLIN( 398)												::iterMagic::Iimg_obj::set(this87,index12,hitQuad20);
            											}
            										}
            										else {
HXLINE( 398)											if (forceClear2) {
HXLINE( 398)												::Dynamic this88 = undoImage6->image;
HXDLIN( 398)												int x10 = (dx4 - rectLeft2);
HXDLIN( 398)												int y10 = (dy4 - rectTop2);
HXDLIN( 398)												int index13;
HXDLIN( 398)												if (undoImage6->useVirtualPos) {
HXLINE( 398)													index13 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x10) - undoImage6->virtualX));
            												}
            												else {
HXLINE( 398)													index13 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage6->width) + x10)) ));
            												}
HXDLIN( 398)												::iterMagic::Iimg_obj::set(this88,index13,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 398)				bool found2 = false;
HXDLIN( 398)				Float s2 = ((Float)0.);
HXDLIN( 398)				Float t2 = ((Float)0.);
HXDLIN( 398)				Float sxx2 = ((Float)0.);
HXDLIN( 398)				Float txx2 = ((Float)0.);
HXDLIN( 398)				{
HXLINE( 398)					int _g_min4 = xIter32->start;
HXDLIN( 398)					int _g_max4 = xIter32->max;
HXDLIN( 398)					while((_g_min4 < _g_max4)){
HXLINE( 398)						_g_min4 = (_g_min4 + 1);
HXDLIN( 398)						int x11 = (_g_min4 - 1);
HXLINE(  60)						sxx2 = (sx2 * ( (Float)(x11) ));
HXLINE(  61)						txx2 = (tx2 * ( (Float)(x11) ));
HXLINE(  62)						found2 = false;
HXLINE( 398)						{
HXLINE( 398)							int _g_min5 = yIter32->start;
HXDLIN( 398)							int _g_max5 = yIter32->max;
HXDLIN( 398)							while((_g_min5 < _g_max5)){
HXLINE( 398)								_g_min5 = (_g_min5 + 1);
HXDLIN( 398)								int y11 = (_g_min5 - 1);
HXLINE(  64)								s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y11) )));
HXLINE(  65)								t2 = ((t02 + txx2) + (ty2 * ( (Float)(y11) )));
HXLINE( 398)								bool hitQuad21;
HXDLIN( 398)								if (!((s2 <= 0))) {
HXLINE( 398)									hitQuad21 = (t2 <= 0);
            								}
            								else {
HXLINE( 398)									hitQuad21 = true;
            								}
HXDLIN( 398)								if (hitQuad21) {
HXLINE( 398)									if (found2) {
HXLINE( 398)										goto _hx_goto_485;
            									}
            								}
            								else {
HXLINE( 398)									if (((s2 + t2) < A2)) {
HXLINE( 398)										{
HXLINE( 398)											int c15 = color;
HXDLIN( 398)											bool hitQuad22;
HXDLIN( 398)											if ((((c15 >> 24) & 255) < 254)) {
HXLINE( 398)												hitQuad22 = pixelImage->transparent;
            											}
            											else {
HXLINE( 398)												hitQuad22 = false;
            											}
HXDLIN( 398)											if (hitQuad22) {
HXLINE( 398)												int location5;
HXDLIN( 398)												if (pixelImage->useVirtualPos) {
HXLINE( 398)													location5 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x11) - pixelImage->virtualX));
            												}
            												else {
HXLINE( 398)													location5 = ::Std_obj::_hx_int(( (Float)(((y11 * pixelImage->width) + x11)) ));
            												}
HXDLIN( 398)												int this89 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN( 398)												int this90;
HXDLIN( 398)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)													this90 = ((((((this89 >> 24) & 255) << 24) | ((this89 & 255) << 16)) | (((this89 >> 8) & 255) << 8)) | ((this89 >> 16) & 255));
            												}
            												else {
HXLINE( 398)													this90 = this89;
            												}
HXDLIN( 398)												Float a110;
HXDLIN( 398)												int this91 = ((this90 >> 24) & 255);
HXDLIN( 398)												if ((this91 == 0)) {
HXLINE( 398)													a110 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													a110 = (( (Float)(this91) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float r15;
HXDLIN( 398)												int this92 = ((this90 >> 16) & 255);
HXDLIN( 398)												if ((this92 == 0)) {
HXLINE( 398)													r15 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													r15 = (( (Float)(this92) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float g15;
HXDLIN( 398)												int this93 = ((this90 >> 8) & 255);
HXDLIN( 398)												if ((this93 == 0)) {
HXLINE( 398)													g15 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													g15 = (( (Float)(this93) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float b111;
HXDLIN( 398)												int this94 = (this90 & 255);
HXDLIN( 398)												if ((this94 == 0)) {
HXLINE( 398)													b111 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													b111 = (( (Float)(this94) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float a25;
HXDLIN( 398)												int this95 = ((color >> 24) & 255);
HXDLIN( 398)												if ((this95 == 0)) {
HXLINE( 398)													a25 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													a25 = (( (Float)(this95) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float r25;
HXDLIN( 398)												int this96 = ((color >> 16) & 255);
HXDLIN( 398)												if ((this96 == 0)) {
HXLINE( 398)													r25 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													r25 = (( (Float)(this96) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float g25;
HXDLIN( 398)												int this97 = ((color >> 8) & 255);
HXDLIN( 398)												if ((this97 == 0)) {
HXLINE( 398)													g25 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													g25 = (( (Float)(this97) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float b27;
HXDLIN( 398)												int this98 = (color & 255);
HXDLIN( 398)												if ((this98 == 0)) {
HXLINE( 398)													b27 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													b27 = (( (Float)(this98) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float a35 = (a110 * (( (Float)(1) ) - a25));
HXDLIN( 398)												int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 398)												int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 398)												int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a35) + (b27 * a25))));
HXDLIN( 398)												int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 398)												int blended5 = ((((a20 << 24) | (r7 << 16)) | (g7 << 8)) | b28);
HXDLIN( 398)												{
HXLINE( 398)													int hitQuad23;
HXDLIN( 398)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)														hitQuad23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            													}
            													else {
HXLINE( 398)														hitQuad23 = blended5;
            													}
HXDLIN( 398)													::iterMagic::Iimg_obj::set(pixelImage->image,location5,hitQuad23);
            												}
            											}
            											else {
HXLINE( 398)												::Dynamic this99 = pixelImage->image;
HXDLIN( 398)												int index14;
HXDLIN( 398)												if (pixelImage->useVirtualPos) {
HXLINE( 398)													index14 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x11) - pixelImage->virtualX));
            												}
            												else {
HXLINE( 398)													index14 = ::Std_obj::_hx_int(( (Float)(((y11 * pixelImage->width) + x11)) ));
            												}
HXDLIN( 398)												int hitQuad24;
HXDLIN( 398)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)													hitQuad24 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            												}
            												else {
HXLINE( 398)													hitQuad24 = c15;
            												}
HXDLIN( 398)												::iterMagic::Iimg_obj::set(this99,index14,hitQuad24);
            											}
            										}
HXLINE(  73)										found2 = true;
            									}
            									else {
HXLINE( 398)										if (found2) {
HXLINE( 398)											goto _hx_goto_485;
            										}
            									}
            								}
            							}
            							_hx_goto_485:;
            						}
            					}
            				}
HXDLIN( 398)				 ::pi_xy::iter::IntIterStart v_yIter32;
HXDLIN( 398)				 ::pi_xy::iter::IntIterStart v_xIter32;
HXDLIN( 398)				int v_undoY2;
HXDLIN( 398)				int v_undoX2;
HXDLIN( 398)				Float v_ty2;
HXDLIN( 398)				Float v_tx2;
HXDLIN( 398)				Float v_t02;
HXDLIN( 398)				Float v_sy2;
HXDLIN( 398)				Float v_sx2;
HXDLIN( 398)				Float v_s02;
HXDLIN( 398)				Float v_A2;
HXDLIN( 398)				Float ax4 = ax3;
HXDLIN( 398)				Float ay4 = ay3;
HXDLIN( 398)				 ::pi_xy::ImageStruct v_undoImage2 = null();
HXDLIN( 398)				Float bx7 = bx6;
HXDLIN( 398)				Float by7 = by6;
HXDLIN( 398)				Float cx7 = cx6;
HXDLIN( 398)				Float cy7 = cy6;
HXDLIN( 398)				bool adjustWinding5 = (((((ax4 * by7) - (bx7 * ay4)) + ((bx7 * cy7) - (cx7 * by7))) + ((cx7 * ay4) - (ax4 * cy7))) > 0);
HXDLIN( 398)				if (!(adjustWinding5)) {
HXLINE( 398)					Float bx_5 = bx7;
HXDLIN( 398)					Float by_5 = by7;
HXLINE(  24)					bx7 = cx7;
HXLINE(  25)					by7 = cy7;
HXLINE(  26)					cx7 = bx_5;
HXLINE(  27)					cy7 = by_5;
            				}
HXLINE( 398)				Float v_ax2 = ax4;
HXDLIN( 398)				Float v_ay2 = ay4;
HXDLIN( 398)				Float v_bx2 = bx7;
HXDLIN( 398)				Float v_by2 = by7;
HXDLIN( 398)				Float v_cx2 = cx7;
HXDLIN( 398)				Float v_cy2 = cy7;
HXDLIN( 398)				bool v_preCalculated2 = true;
HXDLIN( 398)				{
HXLINE( 398)					v_s02 = ((v_ay2 * v_cx2) - (v_ax2 * v_cy2));
HXDLIN( 398)					v_sx2 = (v_cy2 - v_ay2);
HXDLIN( 398)					v_sy2 = (v_ax2 - v_cx2);
HXDLIN( 398)					v_t02 = ((v_ax2 * v_by2) - (v_ay2 * v_bx2));
HXDLIN( 398)					v_tx2 = (v_ay2 - v_by2);
HXDLIN( 398)					v_ty2 = (v_bx2 - v_ax2);
HXDLIN( 398)					v_A2 = ((((-(v_by2) * v_cx2) + (v_ay2 * (-(v_bx2) + v_cx2))) + (v_ax2 * (v_by2 - v_cy2))) + (v_bx2 * v_cy2));
HXDLIN( 398)					Float a26 = v_ax2;
HXDLIN( 398)					Float b29 = v_bx2;
HXDLIN( 398)					Float c16 = v_cx2;
HXDLIN( 398)					if ((a26 > b29)) {
HXLINE( 398)						if ((a26 > c16)) {
HXLINE( 398)							int min20;
HXDLIN( 398)							if ((b29 > c16)) {
HXLINE( 398)								min20 = ::Math_obj::floor(c16);
            							}
            							else {
HXLINE( 398)								min20 = ::Math_obj::floor(b29);
            							}
HXDLIN( 398)							int ii_min40 = min20;
HXDLIN( 398)							int ii_max40 = ::Math_obj::ceil(a26);
HXDLIN( 398)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            						}
            						else {
HXLINE( 398)							int ii_min41 = ::Math_obj::floor(b29);
HXDLIN( 398)							int ii_max41 = ::Math_obj::ceil(c16);
HXDLIN( 398)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            						}
            					}
            					else {
HXLINE( 398)						if ((b29 > c16)) {
HXLINE( 398)							int min21;
HXDLIN( 398)							if ((a26 > c16)) {
HXLINE( 398)								min21 = ::Math_obj::floor(c16);
            							}
            							else {
HXLINE( 398)								min21 = ::Math_obj::ceil(a26);
            							}
HXDLIN( 398)							int ii_min42 = min21;
HXDLIN( 398)							int ii_max42 = ::Math_obj::ceil(b29);
HXDLIN( 398)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            						}
            						else {
HXLINE( 398)							int ii_min43 = ::Math_obj::floor(a26);
HXDLIN( 398)							int ii_max43 = ::Math_obj::ceil(c16);
HXDLIN( 398)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            						}
            					}
HXDLIN( 398)					Float a27 = v_ay2;
HXDLIN( 398)					Float b30 = v_by2;
HXDLIN( 398)					Float c17 = v_cy2;
HXDLIN( 398)					if ((a27 > b30)) {
HXLINE( 398)						if ((a27 > c17)) {
HXLINE( 398)							int min22;
HXDLIN( 398)							if ((b30 > c17)) {
HXLINE( 398)								min22 = ::Math_obj::floor(c17);
            							}
            							else {
HXLINE( 398)								min22 = ::Math_obj::floor(b30);
            							}
HXDLIN( 398)							int ii_min44 = min22;
HXDLIN( 398)							int ii_max44 = ::Math_obj::ceil(a27);
HXDLIN( 398)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            						}
            						else {
HXLINE( 398)							int ii_min45 = ::Math_obj::floor(b30);
HXDLIN( 398)							int ii_max45 = ::Math_obj::ceil(c17);
HXDLIN( 398)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            						}
            					}
            					else {
HXLINE( 398)						if ((b30 > c17)) {
HXLINE( 398)							int min23;
HXDLIN( 398)							if ((a27 > c17)) {
HXLINE( 398)								min23 = ::Math_obj::floor(c17);
            							}
            							else {
HXLINE( 398)								min23 = ::Math_obj::ceil(a27);
            							}
HXDLIN( 398)							int ii_min46 = min23;
HXDLIN( 398)							int ii_max46 = ::Math_obj::ceil(b30);
HXDLIN( 398)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            						}
            						else {
HXLINE( 398)							int ii_min47 = ::Math_obj::floor(a27);
HXDLIN( 398)							int ii_max47 = ::Math_obj::ceil(c17);
HXDLIN( 398)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            						}
            					}
            				}
HXDLIN( 398)				if (hasUndo2) {
HXLINE( 398)					v_undoImage2 = undoImage6;
HXDLIN( 398)					v_undoX2 = xIter32->start;
HXDLIN( 398)					v_undoY2 = yIter32->start;
            				}
HXDLIN( 398)				Float bx8 = cx5;
HXDLIN( 398)				Float by8 = cy5;
HXDLIN( 398)				Float cx8 = dx3;
HXDLIN( 398)				Float cy8 = dy3;
HXDLIN( 398)				bool hasUndo3 = false;
HXDLIN( 398)				bool adjustWinding6 = (((((bx5 * by8) - (bx8 * by5)) + ((bx8 * cy8) - (cx8 * by8))) + ((cx8 * by5) - (bx5 * cy8))) > 0);
HXDLIN( 398)				if (!(adjustWinding6)) {
HXLINE( 398)					Float bx_6 = bx8;
HXDLIN( 398)					Float by_6 = by8;
HXLINE(  25)					bx8 = cx8;
HXLINE(  26)					by8 = cy8;
HXLINE(  27)					cx8 = bx_6;
HXLINE(  28)					cy8 = by_6;
            				}
HXLINE( 398)				Float s03 = ((by5 * cx8) - (bx5 * cy8));
HXDLIN( 398)				Float sx3 = (cy8 - by5);
HXDLIN( 398)				Float sy3 = (bx5 - cx8);
HXDLIN( 398)				Float t03 = ((bx5 * by8) - (by5 * bx8));
HXDLIN( 398)				Float tx3 = (by5 - by8);
HXDLIN( 398)				Float ty3 = (bx8 - bx5);
HXDLIN( 398)				Float A3 = ((((-(by8) * cx8) + (by5 * (-(bx8) + cx8))) + (bx5 * (by8 - cy8))) + (bx8 * cy8));
HXDLIN( 398)				 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 398)				if ((bx5 > bx8)) {
HXLINE( 398)					if ((bx5 > cx8)) {
HXLINE( 398)						int min24;
HXDLIN( 398)						if ((bx8 > cx8)) {
HXLINE( 398)							min24 = ::Math_obj::floor(cx8);
            						}
            						else {
HXLINE( 398)							min24 = ::Math_obj::floor(bx8);
            						}
HXDLIN( 398)						int ii_min48 = min24;
HXDLIN( 398)						int ii_max48 = ::Math_obj::ceil(bx5);
HXDLIN( 398)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            					}
            					else {
HXLINE( 398)						int ii_min49 = ::Math_obj::floor(bx8);
HXDLIN( 398)						int ii_max49 = ::Math_obj::ceil(cx8);
HXDLIN( 398)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            					}
            				}
            				else {
HXLINE( 398)					if ((bx8 > cx8)) {
HXLINE( 398)						int min25;
HXDLIN( 398)						if ((bx5 > cx8)) {
HXLINE( 398)							min25 = ::Math_obj::floor(cx8);
            						}
            						else {
HXLINE( 398)							min25 = ::Math_obj::ceil(bx5);
            						}
HXDLIN( 398)						int ii_min50 = min25;
HXDLIN( 398)						int ii_max50 = ::Math_obj::ceil(bx8);
HXDLIN( 398)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            					}
            					else {
HXLINE( 398)						int ii_min51 = ::Math_obj::floor(bx5);
HXDLIN( 398)						int ii_max51 = ::Math_obj::ceil(cx8);
HXDLIN( 398)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            					}
            				}
HXDLIN( 398)				 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 398)				if ((by5 > by8)) {
HXLINE( 398)					if ((by5 > cy8)) {
HXLINE( 398)						int min26;
HXDLIN( 398)						if ((by8 > cy8)) {
HXLINE( 398)							min26 = ::Math_obj::floor(cy8);
            						}
            						else {
HXLINE( 398)							min26 = ::Math_obj::floor(by8);
            						}
HXDLIN( 398)						int ii_min52 = min26;
HXDLIN( 398)						int ii_max52 = ::Math_obj::ceil(by5);
HXDLIN( 398)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            					}
            					else {
HXLINE( 398)						int ii_min53 = ::Math_obj::floor(by8);
HXDLIN( 398)						int ii_max53 = ::Math_obj::ceil(cy8);
HXDLIN( 398)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            					}
            				}
            				else {
HXLINE( 398)					if ((by8 > cy8)) {
HXLINE( 398)						int min27;
HXDLIN( 398)						if ((by5 > cy8)) {
HXLINE( 398)							min27 = ::Math_obj::floor(cy8);
            						}
            						else {
HXLINE( 398)							min27 = ::Math_obj::ceil(by5);
            						}
HXDLIN( 398)						int ii_min54 = min27;
HXDLIN( 398)						int ii_max54 = ::Math_obj::ceil(by8);
HXDLIN( 398)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            					}
            					else {
HXLINE( 398)						int ii_min55 = ::Math_obj::floor(by5);
HXDLIN( 398)						int ii_max55 = ::Math_obj::ceil(cy8);
HXDLIN( 398)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            					}
            				}
HXDLIN( 398)				 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 398)				if (hasUndo3) {
HXLINE( 398)					int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 398)					int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 398)					 ::Dynamic imageType3 = null();
HXDLIN( 398)					 ::pi_xy::ImageStruct this100 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 398)					if (::hx::IsNull( imageType3 )) {
HXLINE(  54)						imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 398)					::Dynamic undoImage10;
HXDLIN( 398)					switch((int)(( (int)(imageType3) ))){
            						case (int)0: {
HXLINE( 398)							 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 398)							 ::iterMagic::BytesImg b31 = byt3;
HXDLIN( 398)							{
HXLINE( 398)								b31->width = width3;
HXDLIN( 398)								b31->height = height3;
HXDLIN( 398)								b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 398)								b31->data = ::haxe::io::Bytes_obj::alloc((b31->length * 4));
HXDLIN( 398)								{
HXLINE( 398)									int len6 = b31->length;
HXDLIN( 398)									int w3 = 0;
HXDLIN( 398)									{
HXLINE( 398)										int _g60 = 0;
HXDLIN( 398)										int _g61 = b31->height;
HXDLIN( 398)										while((_g60 < _g61)){
HXLINE( 398)											_g60 = (_g60 + 1);
HXDLIN( 398)											int y12 = (_g60 - 1);
HXDLIN( 398)											{
HXLINE( 398)												int _g62 = 0;
HXDLIN( 398)												int _g63 = b31->width;
HXDLIN( 398)												while((_g62 < _g63)){
HXLINE( 398)													_g62 = (_g62 + 1);
HXDLIN( 398)													int x12 = (_g62 - 1);
HXDLIN( 398)													{
HXLINE( 398)														w3 = (w3 + 1);
HXDLIN( 398)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 398)													{
HXLINE( 398)														w3 = (w3 + 1);
HXDLIN( 398)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 398)													{
HXLINE( 398)														w3 = (w3 + 1);
HXDLIN( 398)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 398)													{
HXLINE( 398)														w3 = (w3 + 1);
HXDLIN( 398)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 398)							undoImage10 = b31;
            						}
            						break;
            						case (int)1: {
HXLINE( 398)							 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 398)							 ::iterMagic::ArrIntImg a28 = arrI3;
HXDLIN( 398)							{
HXLINE( 398)								a28->width = width3;
HXDLIN( 398)								a28->height = height3;
HXDLIN( 398)								a28->data = ::Array_obj< int >::__new(0);
HXDLIN( 398)								a28->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 398)								{
HXLINE( 398)									int _g64 = 0;
HXDLIN( 398)									int _g65 = a28->length;
HXDLIN( 398)									while((_g64 < _g65)){
HXLINE( 398)										_g64 = (_g64 + 1);
HXDLIN( 398)										int i18 = (_g64 - 1);
HXDLIN( 398)										a28->data[i18] = 0;
            									}
            								}
            							}
HXDLIN( 398)							undoImage10 = a28;
            						}
            						break;
            						case (int)2: {
HXLINE( 398)							 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 398)							 ::iterMagic::U32ArrImg b32 = u32a3;
HXDLIN( 398)							{
HXLINE( 398)								b32->width = width3;
HXDLIN( 398)								b32->height = height3;
HXDLIN( 398)								b32->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 398)								int size3 = (b32->length * 4);
HXDLIN( 398)								b32->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 398)								{
HXLINE( 398)									int _g66 = 0;
HXDLIN( 398)									int _g67 = b32->length;
HXDLIN( 398)									while((_g66 < _g67)){
HXLINE( 398)										_g66 = (_g66 + 1);
HXDLIN( 398)										int i19 = (_g66 - 1);
HXDLIN( 398)										{
HXLINE( 398)											 ::haxe::io::ArrayBufferViewImpl this101 = b32->data;
HXDLIN( 398)											bool undoImage11;
HXDLIN( 398)											if ((i19 >= 0)) {
HXLINE( 398)												undoImage11 = (i19 < (this101->byteLength >> 2));
            											}
            											else {
HXLINE( 398)												undoImage11 = false;
            											}
HXDLIN( 398)											if (undoImage11) {
HXLINE( 398)												 ::haxe::io::Bytes _this3 = this101->bytes;
HXDLIN( 398)												int pos3 = ((i19 << 2) + this101->byteOffset);
HXDLIN( 398)												_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 398)												_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 398)												_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 398)												_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 398)							undoImage10 = b32;
            						}
            						break;
            						case (int)3: {
HXLINE( 398)							 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 398)							 ::iterMagic::VecIntImg v7 = vec3;
HXDLIN( 398)							{
HXLINE( 398)								v7->width = width3;
HXDLIN( 398)								v7->height = height3;
HXDLIN( 398)								v7->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 398)								v7->data = ::Array_obj< int >::__new(v7->length);
HXDLIN( 398)								{
HXLINE( 398)									int _g68 = 0;
HXDLIN( 398)									int _g69 = v7->length;
HXDLIN( 398)									while((_g68 < _g69)){
HXLINE( 398)										_g68 = (_g68 + 1);
HXDLIN( 398)										int i20 = (_g68 - 1);
HXDLIN( 398)										v7->data->__unsafe_set(i20,0);
            									}
            								}
            							}
HXDLIN( 398)							undoImage10 = v7;
            						}
            						break;
            						case (int)4: {
HXLINE( 398)							 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 398)							 ::iterMagic::StackIntImg b33 = sInt3;
HXDLIN( 398)							{
HXLINE( 398)								b33->width = width3;
HXDLIN( 398)								b33->height = height3;
HXDLIN( 398)								b33->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 398)								b33->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 398)								{
HXLINE( 398)									int len7 = b33->length;
HXDLIN( 398)									 ::haxe::ds::GenericStack_Int d3 = b33->data;
HXDLIN( 398)									if (::hx::IsNull( d3->head )) {
HXLINE( 398)										int _g70 = 0;
HXDLIN( 398)										int _g71 = len7;
HXDLIN( 398)										while((_g70 < _g71)){
HXLINE( 398)											_g70 = (_g70 + 1);
HXDLIN( 398)											int i21 = (_g70 - 1);
HXDLIN( 398)											d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            										}
            									}
            									else {
HXLINE( 398)										int _g72 = 0;
HXDLIN( 398)										int _g73 = len7;
HXDLIN( 398)										while((_g72 < _g73)){
HXLINE( 398)											_g72 = (_g72 + 1);
HXDLIN( 398)											int i22 = (_g72 - 1);
HXDLIN( 398)											{
HXLINE( 398)												 ::haxe::ds::GenericCell_Int l3 = b33->data->head;
HXDLIN( 398)												 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 398)												{
HXLINE( 398)													int _g74 = 0;
HXDLIN( 398)													int _g75 = i22;
HXDLIN( 398)													while((_g74 < _g75)){
HXLINE( 398)														_g74 = (_g74 + 1);
HXDLIN( 398)														int i23 = (_g74 - 1);
HXLINE( 345)														prev3 = l3;
HXLINE( 346)														l3 = l3->next;
            													}
            												}
HXLINE( 398)												if (::hx::IsNull( prev3 )) {
HXLINE( 398)													b33->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 398)													l3 = null();
            												}
            												else {
HXLINE( 398)													prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 398)													l3 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 398)							undoImage10 = b33;
            						}
            						break;
            					}
HXDLIN( 398)					this100->image = undoImage10;
HXDLIN( 398)					this100->width = width3;
HXDLIN( 398)					this100->height = height3;
HXDLIN( 398)					this100->imageType = ( (int)(imageType3) );
HXDLIN( 398)					undoImage9 = this100;
HXDLIN( 398)					{
HXLINE( 398)						int rectLeft3 = xIter33->start;
HXDLIN( 398)						int rectTop3 = yIter33->start;
HXDLIN( 398)						int rectRight3 = xIter33->max;
HXDLIN( 398)						bool forceClear3 = false;
HXDLIN( 398)						{
HXLINE( 398)							int _g76 = rectTop3;
HXDLIN( 398)							int _g77 = yIter33->max;
HXDLIN( 398)							while((_g76 < _g77)){
HXLINE( 398)								_g76 = (_g76 + 1);
HXDLIN( 398)								int dy5 = (_g76 - 1);
HXDLIN( 398)								{
HXLINE( 398)									int _g78 = rectLeft3;
HXDLIN( 398)									int _g79 = rectRight3;
HXDLIN( 398)									while((_g78 < _g79)){
HXLINE( 398)										_g78 = (_g78 + 1);
HXDLIN( 398)										int dx5 = (_g78 - 1);
HXDLIN( 398)										::Dynamic this102 = pixelImage->image;
HXDLIN( 398)										int index15;
HXDLIN( 398)										if (pixelImage->useVirtualPos) {
HXLINE( 398)											index15 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx5) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 398)											index15 = ::Std_obj::_hx_int(( (Float)(((dy5 * pixelImage->width) + dx5)) ));
            										}
HXDLIN( 398)										int c18 = ::iterMagic::Iimg_obj::get(this102,index15);
HXDLIN( 398)										int col3;
HXDLIN( 398)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)											col3 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            										}
            										else {
HXLINE( 398)											col3 = c18;
            										}
HXDLIN( 398)										bool hitQuad25;
HXDLIN( 398)										if (pixelImage->useMask) {
HXLINE( 398)											hitQuad25 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 398)											hitQuad25 = false;
            										}
HXDLIN( 398)										if (hitQuad25) {
HXLINE( 398)											 ::pi_xy::ImageStruct this103 = pixelImage->mask;
HXDLIN( 398)											::Dynamic this104 = this103->image;
HXDLIN( 398)											int index16;
HXDLIN( 398)											if (this103->useVirtualPos) {
HXLINE( 398)												index16 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this103->virtualY) * ( (Float)(this103->width) )) + dx5) - this103->virtualX));
            											}
            											else {
HXLINE( 398)												index16 = ::Std_obj::_hx_int(( (Float)(((dy5 * this103->width) + dx5)) ));
            											}
HXDLIN( 398)											int c19 = ::iterMagic::Iimg_obj::get(this104,index16);
HXDLIN( 398)											int v8;
HXDLIN( 398)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)												v8 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            											}
            											else {
HXLINE( 398)												v8 = c19;
            											}
HXDLIN( 398)											int maskPixel3 = v8;
HXDLIN( 398)											int this105 = col3;
HXDLIN( 398)											if ((maskPixel3 == 0)) {
HXLINE( 398)												col3 = this105;
            											}
            											else {
HXLINE( 398)												Float m03;
HXDLIN( 398)												int this106 = ((maskPixel3 >> 24) & 255);
HXDLIN( 398)												if ((this106 == 0)) {
HXLINE( 398)													m03 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													m03 = (( (Float)(this106) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float m13;
HXDLIN( 398)												int this107 = ((maskPixel3 >> 16) & 255);
HXDLIN( 398)												if ((this107 == 0)) {
HXLINE( 398)													m13 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													m13 = (( (Float)(this107) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float m23;
HXDLIN( 398)												int this108 = ((maskPixel3 >> 8) & 255);
HXDLIN( 398)												if ((this108 == 0)) {
HXLINE( 398)													m23 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													m23 = (( (Float)(this108) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float m33;
HXDLIN( 398)												int this109 = (maskPixel3 & 255);
HXDLIN( 398)												if ((this109 == 0)) {
HXLINE( 398)													m33 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													m33 = (( (Float)(this109) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this105 >> 24) & 255)) )));
HXDLIN( 398)												int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this105 >> 16) & 255)) )));
HXDLIN( 398)												int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this105 >> 8) & 255)) )));
HXDLIN( 398)												int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this105 & 255)) )));
HXDLIN( 398)												col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 398)										if ((col3 != 0)) {
HXLINE( 398)											int x13 = (dx5 - rectLeft3);
HXDLIN( 398)											int y13 = (dy5 - rectTop3);
HXDLIN( 398)											int c20 = col3;
HXDLIN( 398)											bool hitQuad26;
HXDLIN( 398)											if ((((c20 >> 24) & 255) < 254)) {
HXLINE( 398)												hitQuad26 = undoImage9->transparent;
            											}
            											else {
HXLINE( 398)												hitQuad26 = false;
            											}
HXDLIN( 398)											if (hitQuad26) {
HXLINE( 398)												int location6;
HXDLIN( 398)												if (undoImage9->useVirtualPos) {
HXLINE( 398)													location6 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x13) - undoImage9->virtualX));
            												}
            												else {
HXLINE( 398)													location6 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage9->width) + x13)) ));
            												}
HXDLIN( 398)												int this110 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 398)												int this111;
HXDLIN( 398)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)													this111 = ((((((this110 >> 24) & 255) << 24) | ((this110 & 255) << 16)) | (((this110 >> 8) & 255) << 8)) | ((this110 >> 16) & 255));
            												}
            												else {
HXLINE( 398)													this111 = this110;
            												}
HXDLIN( 398)												Float a111;
HXDLIN( 398)												int this112 = ((this111 >> 24) & 255);
HXDLIN( 398)												if ((this112 == 0)) {
HXLINE( 398)													a111 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													a111 = (( (Float)(this112) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float r16;
HXDLIN( 398)												int this113 = ((this111 >> 16) & 255);
HXDLIN( 398)												if ((this113 == 0)) {
HXLINE( 398)													r16 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													r16 = (( (Float)(this113) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float g16;
HXDLIN( 398)												int this114 = ((this111 >> 8) & 255);
HXDLIN( 398)												if ((this114 == 0)) {
HXLINE( 398)													g16 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													g16 = (( (Float)(this114) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float b112;
HXDLIN( 398)												int this115 = (this111 & 255);
HXDLIN( 398)												if ((this115 == 0)) {
HXLINE( 398)													b112 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													b112 = (( (Float)(this115) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float a29;
HXDLIN( 398)												int this116 = ((col3 >> 24) & 255);
HXDLIN( 398)												if ((this116 == 0)) {
HXLINE( 398)													a29 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													a29 = (( (Float)(this116) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float r26;
HXDLIN( 398)												int this117 = ((col3 >> 16) & 255);
HXDLIN( 398)												if ((this117 == 0)) {
HXLINE( 398)													r26 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													r26 = (( (Float)(this117) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float g26;
HXDLIN( 398)												int this118 = ((col3 >> 8) & 255);
HXDLIN( 398)												if ((this118 == 0)) {
HXLINE( 398)													g26 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													g26 = (( (Float)(this118) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float b210;
HXDLIN( 398)												int this119 = (col3 & 255);
HXDLIN( 398)												if ((this119 == 0)) {
HXLINE( 398)													b210 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													b210 = (( (Float)(this119) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float a36 = (a111 * (( (Float)(1) ) - a29));
HXDLIN( 398)												int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a29))));
HXDLIN( 398)												int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a29))));
HXDLIN( 398)												int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a36) + (b210 * a29))));
HXDLIN( 398)												int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a29)));
HXDLIN( 398)												int blended6 = ((((a30 << 24) | (r8 << 16)) | (g8 << 8)) | b34);
HXDLIN( 398)												{
HXLINE( 398)													int hitQuad27;
HXDLIN( 398)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)														hitQuad27 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            													}
            													else {
HXLINE( 398)														hitQuad27 = blended6;
            													}
HXDLIN( 398)													::iterMagic::Iimg_obj::set(undoImage9->image,location6,hitQuad27);
            												}
            											}
            											else {
HXLINE( 398)												::Dynamic this120 = undoImage9->image;
HXDLIN( 398)												int index17;
HXDLIN( 398)												if (undoImage9->useVirtualPos) {
HXLINE( 398)													index17 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x13) - undoImage9->virtualX));
            												}
            												else {
HXLINE( 398)													index17 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage9->width) + x13)) ));
            												}
HXDLIN( 398)												int hitQuad28;
HXDLIN( 398)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)													hitQuad28 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            												}
            												else {
HXLINE( 398)													hitQuad28 = c20;
            												}
HXDLIN( 398)												::iterMagic::Iimg_obj::set(this120,index17,hitQuad28);
            											}
            										}
            										else {
HXLINE( 398)											if (forceClear3) {
HXLINE( 398)												::Dynamic this121 = undoImage9->image;
HXDLIN( 398)												int x14 = (dx5 - rectLeft3);
HXDLIN( 398)												int y14 = (dy5 - rectTop3);
HXDLIN( 398)												int index18;
HXDLIN( 398)												if (undoImage9->useVirtualPos) {
HXLINE( 398)													index18 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x14) - undoImage9->virtualX));
            												}
            												else {
HXLINE( 398)													index18 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage9->width) + x14)) ));
            												}
HXDLIN( 398)												::iterMagic::Iimg_obj::set(this121,index18,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 398)				bool found3 = false;
HXDLIN( 398)				Float s3 = ((Float)0.);
HXDLIN( 398)				Float t3 = ((Float)0.);
HXDLIN( 398)				Float sxx3 = ((Float)0.);
HXDLIN( 398)				Float txx3 = ((Float)0.);
HXDLIN( 398)				{
HXLINE( 398)					int _g_min6 = xIter33->start;
HXDLIN( 398)					int _g_max6 = xIter33->max;
HXDLIN( 398)					while((_g_min6 < _g_max6)){
HXLINE( 398)						_g_min6 = (_g_min6 + 1);
HXDLIN( 398)						int x15 = (_g_min6 - 1);
HXLINE(  60)						sxx3 = (sx3 * ( (Float)(x15) ));
HXLINE(  61)						txx3 = (tx3 * ( (Float)(x15) ));
HXLINE(  62)						found3 = false;
HXLINE( 398)						{
HXLINE( 398)							int _g_min7 = yIter33->start;
HXDLIN( 398)							int _g_max7 = yIter33->max;
HXDLIN( 398)							while((_g_min7 < _g_max7)){
HXLINE( 398)								_g_min7 = (_g_min7 + 1);
HXDLIN( 398)								int y15 = (_g_min7 - 1);
HXLINE(  64)								s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y15) )));
HXLINE(  65)								t3 = ((t03 + txx3) + (ty3 * ( (Float)(y15) )));
HXLINE( 398)								bool hitQuad29;
HXDLIN( 398)								if (!((s3 <= 0))) {
HXLINE( 398)									hitQuad29 = (t3 <= 0);
            								}
            								else {
HXLINE( 398)									hitQuad29 = true;
            								}
HXDLIN( 398)								if (hitQuad29) {
HXLINE( 398)									if (found3) {
HXLINE( 398)										goto _hx_goto_497;
            									}
            								}
            								else {
HXLINE( 398)									if (((s3 + t3) < A3)) {
HXLINE( 398)										{
HXLINE( 398)											int c21 = color;
HXDLIN( 398)											bool hitQuad30;
HXDLIN( 398)											if ((((c21 >> 24) & 255) < 254)) {
HXLINE( 398)												hitQuad30 = pixelImage->transparent;
            											}
            											else {
HXLINE( 398)												hitQuad30 = false;
            											}
HXDLIN( 398)											if (hitQuad30) {
HXLINE( 398)												int location7;
HXDLIN( 398)												if (pixelImage->useVirtualPos) {
HXLINE( 398)													location7 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x15) - pixelImage->virtualX));
            												}
            												else {
HXLINE( 398)													location7 = ::Std_obj::_hx_int(( (Float)(((y15 * pixelImage->width) + x15)) ));
            												}
HXDLIN( 398)												int this122 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN( 398)												int this123;
HXDLIN( 398)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)													this123 = ((((((this122 >> 24) & 255) << 24) | ((this122 & 255) << 16)) | (((this122 >> 8) & 255) << 8)) | ((this122 >> 16) & 255));
            												}
            												else {
HXLINE( 398)													this123 = this122;
            												}
HXDLIN( 398)												Float a112;
HXDLIN( 398)												int this124 = ((this123 >> 24) & 255);
HXDLIN( 398)												if ((this124 == 0)) {
HXLINE( 398)													a112 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													a112 = (( (Float)(this124) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float r17;
HXDLIN( 398)												int this125 = ((this123 >> 16) & 255);
HXDLIN( 398)												if ((this125 == 0)) {
HXLINE( 398)													r17 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													r17 = (( (Float)(this125) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float g17;
HXDLIN( 398)												int this126 = ((this123 >> 8) & 255);
HXDLIN( 398)												if ((this126 == 0)) {
HXLINE( 398)													g17 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													g17 = (( (Float)(this126) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float b113;
HXDLIN( 398)												int this127 = (this123 & 255);
HXDLIN( 398)												if ((this127 == 0)) {
HXLINE( 398)													b113 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													b113 = (( (Float)(this127) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float a210;
HXDLIN( 398)												int this128 = ((color >> 24) & 255);
HXDLIN( 398)												if ((this128 == 0)) {
HXLINE( 398)													a210 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													a210 = (( (Float)(this128) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float r27;
HXDLIN( 398)												int this129 = ((color >> 16) & 255);
HXDLIN( 398)												if ((this129 == 0)) {
HXLINE( 398)													r27 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													r27 = (( (Float)(this129) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float g27;
HXDLIN( 398)												int this130 = ((color >> 8) & 255);
HXDLIN( 398)												if ((this130 == 0)) {
HXLINE( 398)													g27 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													g27 = (( (Float)(this130) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float b211;
HXDLIN( 398)												int this131 = (color & 255);
HXDLIN( 398)												if ((this131 == 0)) {
HXLINE( 398)													b211 = ((Float)0.);
            												}
            												else {
HXLINE( 398)													b211 = (( (Float)(this131) ) / ( (Float)(255) ));
            												}
HXDLIN( 398)												Float a37 = (a112 * (( (Float)(1) ) - a210));
HXDLIN( 398)												int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a210))));
HXDLIN( 398)												int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a210))));
HXDLIN( 398)												int b35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a37) + (b211 * a210))));
HXDLIN( 398)												int a38 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a210)));
HXDLIN( 398)												int blended7 = ((((a38 << 24) | (r9 << 16)) | (g9 << 8)) | b35);
HXDLIN( 398)												{
HXLINE( 398)													int hitQuad31;
HXDLIN( 398)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)														hitQuad31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            													}
            													else {
HXLINE( 398)														hitQuad31 = blended7;
            													}
HXDLIN( 398)													::iterMagic::Iimg_obj::set(pixelImage->image,location7,hitQuad31);
            												}
            											}
            											else {
HXLINE( 398)												::Dynamic this132 = pixelImage->image;
HXDLIN( 398)												int index19;
HXDLIN( 398)												if (pixelImage->useVirtualPos) {
HXLINE( 398)													index19 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x15) - pixelImage->virtualX));
            												}
            												else {
HXLINE( 398)													index19 = ::Std_obj::_hx_int(( (Float)(((y15 * pixelImage->width) + x15)) ));
            												}
HXDLIN( 398)												int hitQuad32;
HXDLIN( 398)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 398)													hitQuad32 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            												}
            												else {
HXLINE( 398)													hitQuad32 = c21;
            												}
HXDLIN( 398)												::iterMagic::Iimg_obj::set(this132,index19,hitQuad32);
            											}
            										}
HXLINE(  73)										found3 = true;
            									}
            									else {
HXLINE( 398)										if (found3) {
HXLINE( 398)											goto _hx_goto_497;
            										}
            									}
            								}
            							}
            							_hx_goto_497:;
            						}
            					}
            				}
HXDLIN( 398)				 ::pi_xy::iter::IntIterStart v_yIter33;
HXDLIN( 398)				 ::pi_xy::iter::IntIterStart v_xIter33;
HXDLIN( 398)				int v_undoY3;
HXDLIN( 398)				int v_undoX3;
HXDLIN( 398)				Float v_ty3;
HXDLIN( 398)				Float v_tx3;
HXDLIN( 398)				Float v_t03;
HXDLIN( 398)				Float v_sy3;
HXDLIN( 398)				Float v_sx3;
HXDLIN( 398)				Float v_s03;
HXDLIN( 398)				Float v_A3;
HXDLIN( 398)				Float ax5 = bx5;
HXDLIN( 398)				Float ay5 = by5;
HXDLIN( 398)				 ::pi_xy::ImageStruct v_undoImage3 = null();
HXDLIN( 398)				Float bx9 = bx8;
HXDLIN( 398)				Float by9 = by8;
HXDLIN( 398)				Float cx9 = cx8;
HXDLIN( 398)				Float cy9 = cy8;
HXDLIN( 398)				bool adjustWinding7 = (((((ax5 * by9) - (bx9 * ay5)) + ((bx9 * cy9) - (cx9 * by9))) + ((cx9 * ay5) - (ax5 * cy9))) > 0);
HXDLIN( 398)				if (!(adjustWinding7)) {
HXLINE( 398)					Float bx_7 = bx9;
HXDLIN( 398)					Float by_7 = by9;
HXLINE(  24)					bx9 = cx9;
HXLINE(  25)					by9 = cy9;
HXLINE(  26)					cx9 = bx_7;
HXLINE(  27)					cy9 = by_7;
            				}
HXLINE( 398)				Float v_ax3 = ax5;
HXDLIN( 398)				Float v_ay3 = ay5;
HXDLIN( 398)				Float v_bx3 = bx9;
HXDLIN( 398)				Float v_by3 = by9;
HXDLIN( 398)				Float v_cx3 = cx9;
HXDLIN( 398)				Float v_cy3 = cy9;
HXDLIN( 398)				bool v_preCalculated3 = true;
HXDLIN( 398)				{
HXLINE( 398)					v_s03 = ((v_ay3 * v_cx3) - (v_ax3 * v_cy3));
HXDLIN( 398)					v_sx3 = (v_cy3 - v_ay3);
HXDLIN( 398)					v_sy3 = (v_ax3 - v_cx3);
HXDLIN( 398)					v_t03 = ((v_ax3 * v_by3) - (v_ay3 * v_bx3));
HXDLIN( 398)					v_tx3 = (v_ay3 - v_by3);
HXDLIN( 398)					v_ty3 = (v_bx3 - v_ax3);
HXDLIN( 398)					v_A3 = ((((-(v_by3) * v_cx3) + (v_ay3 * (-(v_bx3) + v_cx3))) + (v_ax3 * (v_by3 - v_cy3))) + (v_bx3 * v_cy3));
HXDLIN( 398)					Float a39 = v_ax3;
HXDLIN( 398)					Float b36 = v_bx3;
HXDLIN( 398)					Float c22 = v_cx3;
HXDLIN( 398)					if ((a39 > b36)) {
HXLINE( 398)						if ((a39 > c22)) {
HXLINE( 398)							int min28;
HXDLIN( 398)							if ((b36 > c22)) {
HXLINE( 398)								min28 = ::Math_obj::floor(c22);
            							}
            							else {
HXLINE( 398)								min28 = ::Math_obj::floor(b36);
            							}
HXDLIN( 398)							int ii_min56 = min28;
HXDLIN( 398)							int ii_max56 = ::Math_obj::ceil(a39);
HXDLIN( 398)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            						}
            						else {
HXLINE( 398)							int ii_min57 = ::Math_obj::floor(b36);
HXDLIN( 398)							int ii_max57 = ::Math_obj::ceil(c22);
HXDLIN( 398)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            						}
            					}
            					else {
HXLINE( 398)						if ((b36 > c22)) {
HXLINE( 398)							int min29;
HXDLIN( 398)							if ((a39 > c22)) {
HXLINE( 398)								min29 = ::Math_obj::floor(c22);
            							}
            							else {
HXLINE( 398)								min29 = ::Math_obj::ceil(a39);
            							}
HXDLIN( 398)							int ii_min58 = min29;
HXDLIN( 398)							int ii_max58 = ::Math_obj::ceil(b36);
HXDLIN( 398)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            						}
            						else {
HXLINE( 398)							int ii_min59 = ::Math_obj::floor(a39);
HXDLIN( 398)							int ii_max59 = ::Math_obj::ceil(c22);
HXDLIN( 398)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            						}
            					}
HXDLIN( 398)					Float a40 = v_ay3;
HXDLIN( 398)					Float b37 = v_by3;
HXDLIN( 398)					Float c23 = v_cy3;
HXDLIN( 398)					if ((a40 > b37)) {
HXLINE( 398)						if ((a40 > c23)) {
HXLINE( 398)							int min30;
HXDLIN( 398)							if ((b37 > c23)) {
HXLINE( 398)								min30 = ::Math_obj::floor(c23);
            							}
            							else {
HXLINE( 398)								min30 = ::Math_obj::floor(b37);
            							}
HXDLIN( 398)							int ii_min60 = min30;
HXDLIN( 398)							int ii_max60 = ::Math_obj::ceil(a40);
HXDLIN( 398)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            						}
            						else {
HXLINE( 398)							int ii_min61 = ::Math_obj::floor(b37);
HXDLIN( 398)							int ii_max61 = ::Math_obj::ceil(c23);
HXDLIN( 398)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            						}
            					}
            					else {
HXLINE( 398)						if ((b37 > c23)) {
HXLINE( 398)							int min31;
HXDLIN( 398)							if ((a40 > c23)) {
HXLINE( 398)								min31 = ::Math_obj::floor(c23);
            							}
            							else {
HXLINE( 398)								min31 = ::Math_obj::ceil(a40);
            							}
HXDLIN( 398)							int ii_min62 = min31;
HXDLIN( 398)							int ii_max62 = ::Math_obj::ceil(b37);
HXDLIN( 398)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            						}
            						else {
HXLINE( 398)							int ii_min63 = ::Math_obj::floor(a40);
HXDLIN( 398)							int ii_max63 = ::Math_obj::ceil(c23);
HXDLIN( 398)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            						}
            					}
            				}
HXDLIN( 398)				if (hasUndo3) {
HXLINE( 398)					v_undoImage3 = undoImage9;
HXDLIN( 398)					v_undoX3 = xIter33->start;
HXDLIN( 398)					v_undoY3 = yIter33->start;
            				}
HXDLIN( 398)				 ::pi_xy::algo::HitQuad v9 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax3,ay3,bx5,by5,cx5,cy5,dx3,dy3,true);
HXLINE( 394)				hitQuad = v9;
            			}
            		}
            		else {
HXLINE( 401)			Float sin3 = ::Math_obj::sin(theta);
HXDLIN( 401)			Float cos3 = ::Math_obj::cos(theta);
HXDLIN( 401)			Float radius3 = (thick / ( (Float)(2) ));
HXDLIN( 401)			Float dx6 = ((Float)0.1);
HXDLIN( 401)			Float dy6 = radius3;
HXDLIN( 401)			Float cx10 = h2;
HXDLIN( 401)			Float cy10 = radius3;
HXDLIN( 401)			Float bx10 = h2;
HXDLIN( 401)			Float by10 = -(radius3);
HXDLIN( 401)			Float ax6 = ((Float)0.1);
HXDLIN( 401)			Float ay6 = -(radius3);
HXDLIN( 401)			Float temp2 = ((Float)0.);
HXLINE(  28)			temp2 = (px + ((ax6 * cos3) - (ay6 * sin3)));
HXLINE(  29)			ay6 = (py + ((ay6 * cos3) + (ax6 * sin3)));
HXLINE(  30)			ax6 = temp2;
HXLINE(  32)			temp2 = (px + ((bx10 * cos3) - (by10 * sin3)));
HXLINE(  33)			by10 = (py + ((by10 * cos3) + (bx10 * sin3)));
HXLINE(  34)			bx10 = temp2;
HXLINE(  36)			temp2 = (px + ((cx10 * cos3) - (cy10 * sin3)));
HXLINE(  37)			cy10 = (py + ((cy10 * cos3) + (cx10 * sin3)));
HXLINE(  38)			cx10 = temp2;
HXLINE(  40)			temp2 = (px + ((dx6 * cos3) - (dy6 * sin3)));
HXLINE(  41)			dy6 = (py + ((dy6 * cos3) + (dx6 * sin3)));
HXLINE(  42)			dx6 = temp2;
HXLINE( 401)			Float bx11 = bx10;
HXDLIN( 401)			Float by11 = by10;
HXDLIN( 401)			Float cx11 = dx6;
HXDLIN( 401)			Float cy11 = dy6;
HXDLIN( 401)			bool hasUndo4 = false;
HXDLIN( 401)			bool adjustWinding8 = (((((ax6 * by11) - (bx11 * ay6)) + ((bx11 * cy11) - (cx11 * by11))) + ((cx11 * ay6) - (ax6 * cy11))) > 0);
HXDLIN( 401)			if (!(adjustWinding8)) {
HXLINE( 401)				Float bx_8 = bx11;
HXDLIN( 401)				Float by_8 = by11;
HXLINE(  25)				bx11 = cx11;
HXLINE(  26)				by11 = cy11;
HXLINE(  27)				cx11 = bx_8;
HXLINE(  28)				cy11 = by_8;
            			}
HXLINE( 401)			Float s04 = ((ay6 * cx11) - (ax6 * cy11));
HXDLIN( 401)			Float sx4 = (cy11 - ay6);
HXDLIN( 401)			Float sy4 = (ax6 - cx11);
HXDLIN( 401)			Float t04 = ((ax6 * by11) - (ay6 * bx11));
HXDLIN( 401)			Float tx4 = (ay6 - by11);
HXDLIN( 401)			Float ty4 = (bx11 - ax6);
HXDLIN( 401)			Float A4 = ((((-(by11) * cx11) + (ay6 * (-(bx11) + cx11))) + (ax6 * (by11 - cy11))) + (bx11 * cy11));
HXDLIN( 401)			 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN( 401)			if ((ax6 > bx11)) {
HXLINE( 401)				if ((ax6 > cx11)) {
HXLINE( 401)					int min32;
HXDLIN( 401)					if ((bx11 > cx11)) {
HXLINE( 401)						min32 = ::Math_obj::floor(cx11);
            					}
            					else {
HXLINE( 401)						min32 = ::Math_obj::floor(bx11);
            					}
HXDLIN( 401)					int ii_min64 = min32;
HXDLIN( 401)					int ii_max64 = ::Math_obj::ceil(ax6);
HXDLIN( 401)					xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min64,ii_max64);
            				}
            				else {
HXLINE( 401)					int ii_min65 = ::Math_obj::floor(bx11);
HXDLIN( 401)					int ii_max65 = ::Math_obj::ceil(cx11);
HXDLIN( 401)					xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min65,ii_max65);
            				}
            			}
            			else {
HXLINE( 401)				if ((bx11 > cx11)) {
HXLINE( 401)					int min33;
HXDLIN( 401)					if ((ax6 > cx11)) {
HXLINE( 401)						min33 = ::Math_obj::floor(cx11);
            					}
            					else {
HXLINE( 401)						min33 = ::Math_obj::ceil(ax6);
            					}
HXDLIN( 401)					int ii_min66 = min33;
HXDLIN( 401)					int ii_max66 = ::Math_obj::ceil(bx11);
HXDLIN( 401)					xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min66,ii_max66);
            				}
            				else {
HXLINE( 401)					int ii_min67 = ::Math_obj::floor(ax6);
HXDLIN( 401)					int ii_max67 = ::Math_obj::ceil(cx11);
HXDLIN( 401)					xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min67,ii_max67);
            				}
            			}
HXDLIN( 401)			 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN( 401)			if ((ay6 > by11)) {
HXLINE( 401)				if ((ay6 > cy11)) {
HXLINE( 401)					int min34;
HXDLIN( 401)					if ((by11 > cy11)) {
HXLINE( 401)						min34 = ::Math_obj::floor(cy11);
            					}
            					else {
HXLINE( 401)						min34 = ::Math_obj::floor(by11);
            					}
HXDLIN( 401)					int ii_min68 = min34;
HXDLIN( 401)					int ii_max68 = ::Math_obj::ceil(ay6);
HXDLIN( 401)					yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min68,ii_max68);
            				}
            				else {
HXLINE( 401)					int ii_min69 = ::Math_obj::floor(by11);
HXDLIN( 401)					int ii_max69 = ::Math_obj::ceil(cy11);
HXDLIN( 401)					yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min69,ii_max69);
            				}
            			}
            			else {
HXLINE( 401)				if ((by11 > cy11)) {
HXLINE( 401)					int min35;
HXDLIN( 401)					if ((ay6 > cy11)) {
HXLINE( 401)						min35 = ::Math_obj::floor(cy11);
            					}
            					else {
HXLINE( 401)						min35 = ::Math_obj::ceil(ay6);
            					}
HXDLIN( 401)					int ii_min70 = min35;
HXDLIN( 401)					int ii_max70 = ::Math_obj::ceil(by11);
HXDLIN( 401)					yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min70,ii_max70);
            				}
            				else {
HXLINE( 401)					int ii_min71 = ::Math_obj::floor(ay6);
HXDLIN( 401)					int ii_max71 = ::Math_obj::ceil(cy11);
HXDLIN( 401)					yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min71,ii_max71);
            				}
            			}
HXDLIN( 401)			 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN( 401)			if (hasUndo4) {
HXLINE( 401)				int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN( 401)				int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN( 401)				 ::Dynamic imageType4 = null();
HXDLIN( 401)				 ::pi_xy::ImageStruct this133 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 401)				if (::hx::IsNull( imageType4 )) {
HXLINE(  54)					imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 401)				::Dynamic undoImage13;
HXDLIN( 401)				switch((int)(( (int)(imageType4) ))){
            					case (int)0: {
HXLINE( 401)						 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 401)						 ::iterMagic::BytesImg b38 = byt4;
HXDLIN( 401)						{
HXLINE( 401)							b38->width = width4;
HXDLIN( 401)							b38->height = height4;
HXDLIN( 401)							b38->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 401)							b38->data = ::haxe::io::Bytes_obj::alloc((b38->length * 4));
HXDLIN( 401)							{
HXLINE( 401)								int len8 = b38->length;
HXDLIN( 401)								int w4 = 0;
HXDLIN( 401)								{
HXLINE( 401)									int _g80 = 0;
HXDLIN( 401)									int _g81 = b38->height;
HXDLIN( 401)									while((_g80 < _g81)){
HXLINE( 401)										_g80 = (_g80 + 1);
HXDLIN( 401)										int y16 = (_g80 - 1);
HXDLIN( 401)										{
HXLINE( 401)											int _g82 = 0;
HXDLIN( 401)											int _g83 = b38->width;
HXDLIN( 401)											while((_g82 < _g83)){
HXLINE( 401)												_g82 = (_g82 + 1);
HXDLIN( 401)												int x16 = (_g82 - 1);
HXDLIN( 401)												{
HXLINE( 401)													w4 = (w4 + 1);
HXDLIN( 401)													b38->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 401)												{
HXLINE( 401)													w4 = (w4 + 1);
HXDLIN( 401)													b38->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 401)												{
HXLINE( 401)													w4 = (w4 + 1);
HXDLIN( 401)													b38->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 401)												{
HXLINE( 401)													w4 = (w4 + 1);
HXDLIN( 401)													b38->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 401)						undoImage13 = b38;
            					}
            					break;
            					case (int)1: {
HXLINE( 401)						 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 401)						 ::iterMagic::ArrIntImg a41 = arrI4;
HXDLIN( 401)						{
HXLINE( 401)							a41->width = width4;
HXDLIN( 401)							a41->height = height4;
HXDLIN( 401)							a41->data = ::Array_obj< int >::__new(0);
HXDLIN( 401)							a41->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 401)							{
HXLINE( 401)								int _g84 = 0;
HXDLIN( 401)								int _g85 = a41->length;
HXDLIN( 401)								while((_g84 < _g85)){
HXLINE( 401)									_g84 = (_g84 + 1);
HXDLIN( 401)									int i24 = (_g84 - 1);
HXDLIN( 401)									a41->data[i24] = 0;
            								}
            							}
            						}
HXDLIN( 401)						undoImage13 = a41;
            					}
            					break;
            					case (int)2: {
HXLINE( 401)						 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 401)						 ::iterMagic::U32ArrImg b39 = u32a4;
HXDLIN( 401)						{
HXLINE( 401)							b39->width = width4;
HXDLIN( 401)							b39->height = height4;
HXDLIN( 401)							b39->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 401)							int size4 = (b39->length * 4);
HXDLIN( 401)							b39->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN( 401)							{
HXLINE( 401)								int _g86 = 0;
HXDLIN( 401)								int _g87 = b39->length;
HXDLIN( 401)								while((_g86 < _g87)){
HXLINE( 401)									_g86 = (_g86 + 1);
HXDLIN( 401)									int i25 = (_g86 - 1);
HXDLIN( 401)									{
HXLINE( 401)										 ::haxe::io::ArrayBufferViewImpl this134 = b39->data;
HXDLIN( 401)										bool undoImage14;
HXDLIN( 401)										if ((i25 >= 0)) {
HXLINE( 401)											undoImage14 = (i25 < (this134->byteLength >> 2));
            										}
            										else {
HXLINE( 401)											undoImage14 = false;
            										}
HXDLIN( 401)										if (undoImage14) {
HXLINE( 401)											 ::haxe::io::Bytes _this4 = this134->bytes;
HXDLIN( 401)											int pos4 = ((i25 << 2) + this134->byteOffset);
HXDLIN( 401)											_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN( 401)											_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN( 401)											_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN( 401)											_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 401)						undoImage13 = b39;
            					}
            					break;
            					case (int)3: {
HXLINE( 401)						 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 401)						 ::iterMagic::VecIntImg v10 = vec4;
HXDLIN( 401)						{
HXLINE( 401)							v10->width = width4;
HXDLIN( 401)							v10->height = height4;
HXDLIN( 401)							v10->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 401)							v10->data = ::Array_obj< int >::__new(v10->length);
HXDLIN( 401)							{
HXLINE( 401)								int _g88 = 0;
HXDLIN( 401)								int _g89 = v10->length;
HXDLIN( 401)								while((_g88 < _g89)){
HXLINE( 401)									_g88 = (_g88 + 1);
HXDLIN( 401)									int i26 = (_g88 - 1);
HXDLIN( 401)									v10->data->__unsafe_set(i26,0);
            								}
            							}
            						}
HXDLIN( 401)						undoImage13 = v10;
            					}
            					break;
            					case (int)4: {
HXLINE( 401)						 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 401)						 ::iterMagic::StackIntImg b40 = sInt4;
HXDLIN( 401)						{
HXLINE( 401)							b40->width = width4;
HXDLIN( 401)							b40->height = height4;
HXDLIN( 401)							b40->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 401)							b40->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 401)							{
HXLINE( 401)								int len9 = b40->length;
HXDLIN( 401)								 ::haxe::ds::GenericStack_Int d4 = b40->data;
HXDLIN( 401)								if (::hx::IsNull( d4->head )) {
HXLINE( 401)									int _g90 = 0;
HXDLIN( 401)									int _g91 = len9;
HXDLIN( 401)									while((_g90 < _g91)){
HXLINE( 401)										_g90 = (_g90 + 1);
HXDLIN( 401)										int i27 = (_g90 - 1);
HXDLIN( 401)										d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            									}
            								}
            								else {
HXLINE( 401)									int _g92 = 0;
HXDLIN( 401)									int _g93 = len9;
HXDLIN( 401)									while((_g92 < _g93)){
HXLINE( 401)										_g92 = (_g92 + 1);
HXDLIN( 401)										int i28 = (_g92 - 1);
HXDLIN( 401)										{
HXLINE( 401)											 ::haxe::ds::GenericCell_Int l4 = b40->data->head;
HXDLIN( 401)											 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN( 401)											{
HXLINE( 401)												int _g94 = 0;
HXDLIN( 401)												int _g95 = i28;
HXDLIN( 401)												while((_g94 < _g95)){
HXLINE( 401)													_g94 = (_g94 + 1);
HXDLIN( 401)													int i29 = (_g94 - 1);
HXLINE( 345)													prev4 = l4;
HXLINE( 346)													l4 = l4->next;
            												}
            											}
HXLINE( 401)											if (::hx::IsNull( prev4 )) {
HXLINE( 401)												b40->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 401)												l4 = null();
            											}
            											else {
HXLINE( 401)												prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 401)												l4 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 401)						undoImage13 = b40;
            					}
            					break;
            				}
HXDLIN( 401)				this133->image = undoImage13;
HXDLIN( 401)				this133->width = width4;
HXDLIN( 401)				this133->height = height4;
HXDLIN( 401)				this133->imageType = ( (int)(imageType4) );
HXDLIN( 401)				undoImage12 = this133;
HXDLIN( 401)				{
HXLINE( 401)					int rectLeft4 = xIter34->start;
HXDLIN( 401)					int rectTop4 = yIter34->start;
HXDLIN( 401)					int rectRight4 = xIter34->max;
HXDLIN( 401)					bool forceClear4 = false;
HXDLIN( 401)					{
HXLINE( 401)						int _g96 = rectTop4;
HXDLIN( 401)						int _g97 = yIter34->max;
HXDLIN( 401)						while((_g96 < _g97)){
HXLINE( 401)							_g96 = (_g96 + 1);
HXDLIN( 401)							int dy7 = (_g96 - 1);
HXDLIN( 401)							{
HXLINE( 401)								int _g98 = rectLeft4;
HXDLIN( 401)								int _g99 = rectRight4;
HXDLIN( 401)								while((_g98 < _g99)){
HXLINE( 401)									_g98 = (_g98 + 1);
HXDLIN( 401)									int dx7 = (_g98 - 1);
HXDLIN( 401)									::Dynamic this135 = pixelImage->image;
HXDLIN( 401)									int index20;
HXDLIN( 401)									if (pixelImage->useVirtualPos) {
HXLINE( 401)										index20 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx7) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 401)										index20 = ::Std_obj::_hx_int(( (Float)(((dy7 * pixelImage->width) + dx7)) ));
            									}
HXDLIN( 401)									int c24 = ::iterMagic::Iimg_obj::get(this135,index20);
HXDLIN( 401)									int col4;
HXDLIN( 401)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)										col4 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            									}
            									else {
HXLINE( 401)										col4 = c24;
            									}
HXDLIN( 401)									bool hitQuad33;
HXDLIN( 401)									if (pixelImage->useMask) {
HXLINE( 401)										hitQuad33 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE( 401)										hitQuad33 = false;
            									}
HXDLIN( 401)									if (hitQuad33) {
HXLINE( 401)										 ::pi_xy::ImageStruct this136 = pixelImage->mask;
HXDLIN( 401)										::Dynamic this137 = this136->image;
HXDLIN( 401)										int index21;
HXDLIN( 401)										if (this136->useVirtualPos) {
HXLINE( 401)											index21 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this136->virtualY) * ( (Float)(this136->width) )) + dx7) - this136->virtualX));
            										}
            										else {
HXLINE( 401)											index21 = ::Std_obj::_hx_int(( (Float)(((dy7 * this136->width) + dx7)) ));
            										}
HXDLIN( 401)										int c25 = ::iterMagic::Iimg_obj::get(this137,index21);
HXDLIN( 401)										int v11;
HXDLIN( 401)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)											v11 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            										}
            										else {
HXLINE( 401)											v11 = c25;
            										}
HXDLIN( 401)										int maskPixel4 = v11;
HXDLIN( 401)										int this138 = col4;
HXDLIN( 401)										if ((maskPixel4 == 0)) {
HXLINE( 401)											col4 = this138;
            										}
            										else {
HXLINE( 401)											Float m04;
HXDLIN( 401)											int this139 = ((maskPixel4 >> 24) & 255);
HXDLIN( 401)											if ((this139 == 0)) {
HXLINE( 401)												m04 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												m04 = (( (Float)(this139) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float m14;
HXDLIN( 401)											int this140 = ((maskPixel4 >> 16) & 255);
HXDLIN( 401)											if ((this140 == 0)) {
HXLINE( 401)												m14 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												m14 = (( (Float)(this140) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float m24;
HXDLIN( 401)											int this141 = ((maskPixel4 >> 8) & 255);
HXDLIN( 401)											if ((this141 == 0)) {
HXLINE( 401)												m24 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												m24 = (( (Float)(this141) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float m34;
HXDLIN( 401)											int this142 = (maskPixel4 & 255);
HXDLIN( 401)											if ((this142 == 0)) {
HXLINE( 401)												m34 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												m34 = (( (Float)(this142) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this138 >> 24) & 255)) )));
HXDLIN( 401)											int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this138 >> 16) & 255)) )));
HXDLIN( 401)											int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this138 >> 8) & 255)) )));
HXDLIN( 401)											int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this138 & 255)) )));
HXDLIN( 401)											col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 401)									if ((col4 != 0)) {
HXLINE( 401)										int x17 = (dx7 - rectLeft4);
HXDLIN( 401)										int y17 = (dy7 - rectTop4);
HXDLIN( 401)										int c26 = col4;
HXDLIN( 401)										bool hitQuad34;
HXDLIN( 401)										if ((((c26 >> 24) & 255) < 254)) {
HXLINE( 401)											hitQuad34 = undoImage12->transparent;
            										}
            										else {
HXLINE( 401)											hitQuad34 = false;
            										}
HXDLIN( 401)										if (hitQuad34) {
HXLINE( 401)											int location8;
HXDLIN( 401)											if (undoImage12->useVirtualPos) {
HXLINE( 401)												location8 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x17) - undoImage12->virtualX));
            											}
            											else {
HXLINE( 401)												location8 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage12->width) + x17)) ));
            											}
HXDLIN( 401)											int this143 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN( 401)											int this144;
HXDLIN( 401)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)												this144 = ((((((this143 >> 24) & 255) << 24) | ((this143 & 255) << 16)) | (((this143 >> 8) & 255) << 8)) | ((this143 >> 16) & 255));
            											}
            											else {
HXLINE( 401)												this144 = this143;
            											}
HXDLIN( 401)											Float a113;
HXDLIN( 401)											int this145 = ((this144 >> 24) & 255);
HXDLIN( 401)											if ((this145 == 0)) {
HXLINE( 401)												a113 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												a113 = (( (Float)(this145) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float r18;
HXDLIN( 401)											int this146 = ((this144 >> 16) & 255);
HXDLIN( 401)											if ((this146 == 0)) {
HXLINE( 401)												r18 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												r18 = (( (Float)(this146) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float g18;
HXDLIN( 401)											int this147 = ((this144 >> 8) & 255);
HXDLIN( 401)											if ((this147 == 0)) {
HXLINE( 401)												g18 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												g18 = (( (Float)(this147) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float b114;
HXDLIN( 401)											int this148 = (this144 & 255);
HXDLIN( 401)											if ((this148 == 0)) {
HXLINE( 401)												b114 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												b114 = (( (Float)(this148) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float a211;
HXDLIN( 401)											int this149 = ((col4 >> 24) & 255);
HXDLIN( 401)											if ((this149 == 0)) {
HXLINE( 401)												a211 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												a211 = (( (Float)(this149) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float r28;
HXDLIN( 401)											int this150 = ((col4 >> 16) & 255);
HXDLIN( 401)											if ((this150 == 0)) {
HXLINE( 401)												r28 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												r28 = (( (Float)(this150) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float g28;
HXDLIN( 401)											int this151 = ((col4 >> 8) & 255);
HXDLIN( 401)											if ((this151 == 0)) {
HXLINE( 401)												g28 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												g28 = (( (Float)(this151) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float b212;
HXDLIN( 401)											int this152 = (col4 & 255);
HXDLIN( 401)											if ((this152 == 0)) {
HXLINE( 401)												b212 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												b212 = (( (Float)(this152) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN( 401)											int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a310) + (r28 * a211))));
HXDLIN( 401)											int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a310) + (g28 * a211))));
HXDLIN( 401)											int b41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b212 * a211))));
HXDLIN( 401)											int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN( 401)											int blended8 = ((((a42 << 24) | (r10 << 16)) | (g10 << 8)) | b41);
HXDLIN( 401)											{
HXLINE( 401)												int hitQuad35;
HXDLIN( 401)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)													hitQuad35 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            												}
            												else {
HXLINE( 401)													hitQuad35 = blended8;
            												}
HXDLIN( 401)												::iterMagic::Iimg_obj::set(undoImage12->image,location8,hitQuad35);
            											}
            										}
            										else {
HXLINE( 401)											::Dynamic this153 = undoImage12->image;
HXDLIN( 401)											int index22;
HXDLIN( 401)											if (undoImage12->useVirtualPos) {
HXLINE( 401)												index22 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x17) - undoImage12->virtualX));
            											}
            											else {
HXLINE( 401)												index22 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage12->width) + x17)) ));
            											}
HXDLIN( 401)											int hitQuad36;
HXDLIN( 401)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)												hitQuad36 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            											}
            											else {
HXLINE( 401)												hitQuad36 = c26;
            											}
HXDLIN( 401)											::iterMagic::Iimg_obj::set(this153,index22,hitQuad36);
            										}
            									}
            									else {
HXLINE( 401)										if (forceClear4) {
HXLINE( 401)											::Dynamic this154 = undoImage12->image;
HXDLIN( 401)											int x18 = (dx7 - rectLeft4);
HXDLIN( 401)											int y18 = (dy7 - rectTop4);
HXDLIN( 401)											int index23;
HXDLIN( 401)											if (undoImage12->useVirtualPos) {
HXLINE( 401)												index23 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x18) - undoImage12->virtualX));
            											}
            											else {
HXLINE( 401)												index23 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage12->width) + x18)) ));
            											}
HXDLIN( 401)											::iterMagic::Iimg_obj::set(this154,index23,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 401)			bool found4 = false;
HXDLIN( 401)			Float s4 = ((Float)0.);
HXDLIN( 401)			Float t4 = ((Float)0.);
HXDLIN( 401)			Float sxx4 = ((Float)0.);
HXDLIN( 401)			Float txx4 = ((Float)0.);
HXDLIN( 401)			{
HXLINE( 401)				int _g_min8 = xIter34->start;
HXDLIN( 401)				int _g_max8 = xIter34->max;
HXDLIN( 401)				while((_g_min8 < _g_max8)){
HXLINE( 401)					_g_min8 = (_g_min8 + 1);
HXDLIN( 401)					int x19 = (_g_min8 - 1);
HXLINE(  60)					sxx4 = (sx4 * ( (Float)(x19) ));
HXLINE(  61)					txx4 = (tx4 * ( (Float)(x19) ));
HXLINE(  62)					found4 = false;
HXLINE( 401)					{
HXLINE( 401)						int _g_min9 = yIter34->start;
HXDLIN( 401)						int _g_max9 = yIter34->max;
HXDLIN( 401)						while((_g_min9 < _g_max9)){
HXLINE( 401)							_g_min9 = (_g_min9 + 1);
HXDLIN( 401)							int y19 = (_g_min9 - 1);
HXLINE(  64)							s4 = ((s04 + sxx4) + (sy4 * ( (Float)(y19) )));
HXLINE(  65)							t4 = ((t04 + txx4) + (ty4 * ( (Float)(y19) )));
HXLINE( 401)							bool hitQuad37;
HXDLIN( 401)							if (!((s4 <= 0))) {
HXLINE( 401)								hitQuad37 = (t4 <= 0);
            							}
            							else {
HXLINE( 401)								hitQuad37 = true;
            							}
HXDLIN( 401)							if (hitQuad37) {
HXLINE( 401)								if (found4) {
HXLINE( 401)									goto _hx_goto_509;
            								}
            							}
            							else {
HXLINE( 401)								if (((s4 + t4) < A4)) {
HXLINE( 401)									{
HXLINE( 401)										int c27 = color;
HXDLIN( 401)										bool hitQuad38;
HXDLIN( 401)										if ((((c27 >> 24) & 255) < 254)) {
HXLINE( 401)											hitQuad38 = pixelImage->transparent;
            										}
            										else {
HXLINE( 401)											hitQuad38 = false;
            										}
HXDLIN( 401)										if (hitQuad38) {
HXLINE( 401)											int location9;
HXDLIN( 401)											if (pixelImage->useVirtualPos) {
HXLINE( 401)												location9 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x19) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 401)												location9 = ::Std_obj::_hx_int(( (Float)(((y19 * pixelImage->width) + x19)) ));
            											}
HXDLIN( 401)											int this155 = ::iterMagic::Iimg_obj::get(pixelImage->image,location9);
HXDLIN( 401)											int this156;
HXDLIN( 401)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)												this156 = ((((((this155 >> 24) & 255) << 24) | ((this155 & 255) << 16)) | (((this155 >> 8) & 255) << 8)) | ((this155 >> 16) & 255));
            											}
            											else {
HXLINE( 401)												this156 = this155;
            											}
HXDLIN( 401)											Float a114;
HXDLIN( 401)											int this157 = ((this156 >> 24) & 255);
HXDLIN( 401)											if ((this157 == 0)) {
HXLINE( 401)												a114 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												a114 = (( (Float)(this157) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float r19;
HXDLIN( 401)											int this158 = ((this156 >> 16) & 255);
HXDLIN( 401)											if ((this158 == 0)) {
HXLINE( 401)												r19 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												r19 = (( (Float)(this158) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float g19;
HXDLIN( 401)											int this159 = ((this156 >> 8) & 255);
HXDLIN( 401)											if ((this159 == 0)) {
HXLINE( 401)												g19 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												g19 = (( (Float)(this159) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float b115;
HXDLIN( 401)											int this160 = (this156 & 255);
HXDLIN( 401)											if ((this160 == 0)) {
HXLINE( 401)												b115 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												b115 = (( (Float)(this160) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float a212;
HXDLIN( 401)											int this161 = ((color >> 24) & 255);
HXDLIN( 401)											if ((this161 == 0)) {
HXLINE( 401)												a212 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												a212 = (( (Float)(this161) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float r29;
HXDLIN( 401)											int this162 = ((color >> 16) & 255);
HXDLIN( 401)											if ((this162 == 0)) {
HXLINE( 401)												r29 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												r29 = (( (Float)(this162) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float g29;
HXDLIN( 401)											int this163 = ((color >> 8) & 255);
HXDLIN( 401)											if ((this163 == 0)) {
HXLINE( 401)												g29 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												g29 = (( (Float)(this163) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float b213;
HXDLIN( 401)											int this164 = (color & 255);
HXDLIN( 401)											if ((this164 == 0)) {
HXLINE( 401)												b213 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												b213 = (( (Float)(this164) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN( 401)											int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a311) + (r29 * a212))));
HXDLIN( 401)											int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a311) + (g29 * a212))));
HXDLIN( 401)											int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b213 * a212))));
HXDLIN( 401)											int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN( 401)											int blended9 = ((((a43 << 24) | (r20 << 16)) | (g20 << 8)) | b42);
HXDLIN( 401)											{
HXLINE( 401)												int hitQuad39;
HXDLIN( 401)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)													hitQuad39 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            												}
            												else {
HXLINE( 401)													hitQuad39 = blended9;
            												}
HXDLIN( 401)												::iterMagic::Iimg_obj::set(pixelImage->image,location9,hitQuad39);
            											}
            										}
            										else {
HXLINE( 401)											::Dynamic this165 = pixelImage->image;
HXDLIN( 401)											int index24;
HXDLIN( 401)											if (pixelImage->useVirtualPos) {
HXLINE( 401)												index24 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x19) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 401)												index24 = ::Std_obj::_hx_int(( (Float)(((y19 * pixelImage->width) + x19)) ));
            											}
HXDLIN( 401)											int hitQuad40;
HXDLIN( 401)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)												hitQuad40 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            											}
            											else {
HXLINE( 401)												hitQuad40 = c27;
            											}
HXDLIN( 401)											::iterMagic::Iimg_obj::set(this165,index24,hitQuad40);
            										}
            									}
HXLINE(  73)									found4 = true;
            								}
            								else {
HXLINE( 401)									if (found4) {
HXLINE( 401)										goto _hx_goto_509;
            									}
            								}
            							}
            						}
            						_hx_goto_509:;
            					}
            				}
            			}
HXDLIN( 401)			 ::pi_xy::iter::IntIterStart v_yIter34;
HXDLIN( 401)			 ::pi_xy::iter::IntIterStart v_xIter34;
HXDLIN( 401)			int v_undoY4;
HXDLIN( 401)			int v_undoX4;
HXDLIN( 401)			Float v_ty4;
HXDLIN( 401)			Float v_tx4;
HXDLIN( 401)			Float v_t04;
HXDLIN( 401)			Float v_sy4;
HXDLIN( 401)			Float v_sx4;
HXDLIN( 401)			Float v_s04;
HXDLIN( 401)			Float v_A4;
HXDLIN( 401)			Float ax7 = ax6;
HXDLIN( 401)			Float ay7 = ay6;
HXDLIN( 401)			 ::pi_xy::ImageStruct v_undoImage4 = null();
HXDLIN( 401)			Float bx12 = bx11;
HXDLIN( 401)			Float by12 = by11;
HXDLIN( 401)			Float cx12 = cx11;
HXDLIN( 401)			Float cy12 = cy11;
HXDLIN( 401)			bool adjustWinding9 = (((((ax7 * by12) - (bx12 * ay7)) + ((bx12 * cy12) - (cx12 * by12))) + ((cx12 * ay7) - (ax7 * cy12))) > 0);
HXDLIN( 401)			if (!(adjustWinding9)) {
HXLINE( 401)				Float bx_9 = bx12;
HXDLIN( 401)				Float by_9 = by12;
HXLINE(  24)				bx12 = cx12;
HXLINE(  25)				by12 = cy12;
HXLINE(  26)				cx12 = bx_9;
HXLINE(  27)				cy12 = by_9;
            			}
HXLINE( 401)			Float v_ax4 = ax7;
HXDLIN( 401)			Float v_ay4 = ay7;
HXDLIN( 401)			Float v_bx4 = bx12;
HXDLIN( 401)			Float v_by4 = by12;
HXDLIN( 401)			Float v_cx4 = cx12;
HXDLIN( 401)			Float v_cy4 = cy12;
HXDLIN( 401)			bool v_preCalculated4 = true;
HXDLIN( 401)			{
HXLINE( 401)				v_s04 = ((v_ay4 * v_cx4) - (v_ax4 * v_cy4));
HXDLIN( 401)				v_sx4 = (v_cy4 - v_ay4);
HXDLIN( 401)				v_sy4 = (v_ax4 - v_cx4);
HXDLIN( 401)				v_t04 = ((v_ax4 * v_by4) - (v_ay4 * v_bx4));
HXDLIN( 401)				v_tx4 = (v_ay4 - v_by4);
HXDLIN( 401)				v_ty4 = (v_bx4 - v_ax4);
HXDLIN( 401)				v_A4 = ((((-(v_by4) * v_cx4) + (v_ay4 * (-(v_bx4) + v_cx4))) + (v_ax4 * (v_by4 - v_cy4))) + (v_bx4 * v_cy4));
HXDLIN( 401)				Float a44 = v_ax4;
HXDLIN( 401)				Float b43 = v_bx4;
HXDLIN( 401)				Float c28 = v_cx4;
HXDLIN( 401)				if ((a44 > b43)) {
HXLINE( 401)					if ((a44 > c28)) {
HXLINE( 401)						int min36;
HXDLIN( 401)						if ((b43 > c28)) {
HXLINE( 401)							min36 = ::Math_obj::floor(c28);
            						}
            						else {
HXLINE( 401)							min36 = ::Math_obj::floor(b43);
            						}
HXDLIN( 401)						int ii_min72 = min36;
HXDLIN( 401)						int ii_max72 = ::Math_obj::ceil(a44);
HXDLIN( 401)						v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min72,ii_max72);
            					}
            					else {
HXLINE( 401)						int ii_min73 = ::Math_obj::floor(b43);
HXDLIN( 401)						int ii_max73 = ::Math_obj::ceil(c28);
HXDLIN( 401)						v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min73,ii_max73);
            					}
            				}
            				else {
HXLINE( 401)					if ((b43 > c28)) {
HXLINE( 401)						int min37;
HXDLIN( 401)						if ((a44 > c28)) {
HXLINE( 401)							min37 = ::Math_obj::floor(c28);
            						}
            						else {
HXLINE( 401)							min37 = ::Math_obj::ceil(a44);
            						}
HXDLIN( 401)						int ii_min74 = min37;
HXDLIN( 401)						int ii_max74 = ::Math_obj::ceil(b43);
HXDLIN( 401)						v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min74,ii_max74);
            					}
            					else {
HXLINE( 401)						int ii_min75 = ::Math_obj::floor(a44);
HXDLIN( 401)						int ii_max75 = ::Math_obj::ceil(c28);
HXDLIN( 401)						v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min75,ii_max75);
            					}
            				}
HXDLIN( 401)				Float a45 = v_ay4;
HXDLIN( 401)				Float b44 = v_by4;
HXDLIN( 401)				Float c29 = v_cy4;
HXDLIN( 401)				if ((a45 > b44)) {
HXLINE( 401)					if ((a45 > c29)) {
HXLINE( 401)						int min38;
HXDLIN( 401)						if ((b44 > c29)) {
HXLINE( 401)							min38 = ::Math_obj::floor(c29);
            						}
            						else {
HXLINE( 401)							min38 = ::Math_obj::floor(b44);
            						}
HXDLIN( 401)						int ii_min76 = min38;
HXDLIN( 401)						int ii_max76 = ::Math_obj::ceil(a45);
HXDLIN( 401)						v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min76,ii_max76);
            					}
            					else {
HXLINE( 401)						int ii_min77 = ::Math_obj::floor(b44);
HXDLIN( 401)						int ii_max77 = ::Math_obj::ceil(c29);
HXDLIN( 401)						v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min77,ii_max77);
            					}
            				}
            				else {
HXLINE( 401)					if ((b44 > c29)) {
HXLINE( 401)						int min39;
HXDLIN( 401)						if ((a45 > c29)) {
HXLINE( 401)							min39 = ::Math_obj::floor(c29);
            						}
            						else {
HXLINE( 401)							min39 = ::Math_obj::ceil(a45);
            						}
HXDLIN( 401)						int ii_min78 = min39;
HXDLIN( 401)						int ii_max78 = ::Math_obj::ceil(b44);
HXDLIN( 401)						v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min78,ii_max78);
            					}
            					else {
HXLINE( 401)						int ii_min79 = ::Math_obj::floor(a45);
HXDLIN( 401)						int ii_max79 = ::Math_obj::ceil(c29);
HXDLIN( 401)						v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min79,ii_max79);
            					}
            				}
            			}
HXDLIN( 401)			if (hasUndo4) {
HXLINE( 401)				v_undoImage4 = undoImage12;
HXDLIN( 401)				v_undoX4 = xIter34->start;
HXDLIN( 401)				v_undoY4 = yIter34->start;
            			}
HXDLIN( 401)			Float bx13 = cx10;
HXDLIN( 401)			Float by13 = cy10;
HXDLIN( 401)			Float cx13 = dx6;
HXDLIN( 401)			Float cy13 = dy6;
HXDLIN( 401)			bool hasUndo5 = false;
HXDLIN( 401)			bool adjustWinding10 = (((((bx10 * by13) - (bx13 * by10)) + ((bx13 * cy13) - (cx13 * by13))) + ((cx13 * by10) - (bx10 * cy13))) > 0);
HXDLIN( 401)			if (!(adjustWinding10)) {
HXLINE( 401)				Float bx_10 = bx13;
HXDLIN( 401)				Float by_10 = by13;
HXLINE(  25)				bx13 = cx13;
HXLINE(  26)				by13 = cy13;
HXLINE(  27)				cx13 = bx_10;
HXLINE(  28)				cy13 = by_10;
            			}
HXLINE( 401)			Float s05 = ((by10 * cx13) - (bx10 * cy13));
HXDLIN( 401)			Float sx5 = (cy13 - by10);
HXDLIN( 401)			Float sy5 = (bx10 - cx13);
HXDLIN( 401)			Float t05 = ((bx10 * by13) - (by10 * bx13));
HXDLIN( 401)			Float tx5 = (by10 - by13);
HXDLIN( 401)			Float ty5 = (bx13 - bx10);
HXDLIN( 401)			Float A5 = ((((-(by13) * cx13) + (by10 * (-(bx13) + cx13))) + (bx10 * (by13 - cy13))) + (bx13 * cy13));
HXDLIN( 401)			 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN( 401)			if ((bx10 > bx13)) {
HXLINE( 401)				if ((bx10 > cx13)) {
HXLINE( 401)					int min40;
HXDLIN( 401)					if ((bx13 > cx13)) {
HXLINE( 401)						min40 = ::Math_obj::floor(cx13);
            					}
            					else {
HXLINE( 401)						min40 = ::Math_obj::floor(bx13);
            					}
HXDLIN( 401)					int ii_min80 = min40;
HXDLIN( 401)					int ii_max80 = ::Math_obj::ceil(bx10);
HXDLIN( 401)					xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min80,ii_max80);
            				}
            				else {
HXLINE( 401)					int ii_min81 = ::Math_obj::floor(bx13);
HXDLIN( 401)					int ii_max81 = ::Math_obj::ceil(cx13);
HXDLIN( 401)					xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min81,ii_max81);
            				}
            			}
            			else {
HXLINE( 401)				if ((bx13 > cx13)) {
HXLINE( 401)					int min41;
HXDLIN( 401)					if ((bx10 > cx13)) {
HXLINE( 401)						min41 = ::Math_obj::floor(cx13);
            					}
            					else {
HXLINE( 401)						min41 = ::Math_obj::ceil(bx10);
            					}
HXDLIN( 401)					int ii_min82 = min41;
HXDLIN( 401)					int ii_max82 = ::Math_obj::ceil(bx13);
HXDLIN( 401)					xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min82,ii_max82);
            				}
            				else {
HXLINE( 401)					int ii_min83 = ::Math_obj::floor(bx10);
HXDLIN( 401)					int ii_max83 = ::Math_obj::ceil(cx13);
HXDLIN( 401)					xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min83,ii_max83);
            				}
            			}
HXDLIN( 401)			 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN( 401)			if ((by10 > by13)) {
HXLINE( 401)				if ((by10 > cy13)) {
HXLINE( 401)					int min42;
HXDLIN( 401)					if ((by13 > cy13)) {
HXLINE( 401)						min42 = ::Math_obj::floor(cy13);
            					}
            					else {
HXLINE( 401)						min42 = ::Math_obj::floor(by13);
            					}
HXDLIN( 401)					int ii_min84 = min42;
HXDLIN( 401)					int ii_max84 = ::Math_obj::ceil(by10);
HXDLIN( 401)					yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min84,ii_max84);
            				}
            				else {
HXLINE( 401)					int ii_min85 = ::Math_obj::floor(by13);
HXDLIN( 401)					int ii_max85 = ::Math_obj::ceil(cy13);
HXDLIN( 401)					yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min85,ii_max85);
            				}
            			}
            			else {
HXLINE( 401)				if ((by13 > cy13)) {
HXLINE( 401)					int min43;
HXDLIN( 401)					if ((by10 > cy13)) {
HXLINE( 401)						min43 = ::Math_obj::floor(cy13);
            					}
            					else {
HXLINE( 401)						min43 = ::Math_obj::ceil(by10);
            					}
HXDLIN( 401)					int ii_min86 = min43;
HXDLIN( 401)					int ii_max86 = ::Math_obj::ceil(by13);
HXDLIN( 401)					yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min86,ii_max86);
            				}
            				else {
HXLINE( 401)					int ii_min87 = ::Math_obj::floor(by10);
HXDLIN( 401)					int ii_max87 = ::Math_obj::ceil(cy13);
HXDLIN( 401)					yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min87,ii_max87);
            				}
            			}
HXDLIN( 401)			 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN( 401)			if (hasUndo5) {
HXLINE( 401)				int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN( 401)				int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN( 401)				 ::Dynamic imageType5 = null();
HXDLIN( 401)				 ::pi_xy::ImageStruct this166 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 401)				if (::hx::IsNull( imageType5 )) {
HXLINE(  54)					imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 401)				::Dynamic undoImage16;
HXDLIN( 401)				switch((int)(( (int)(imageType5) ))){
            					case (int)0: {
HXLINE( 401)						 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 401)						 ::iterMagic::BytesImg b45 = byt5;
HXDLIN( 401)						{
HXLINE( 401)							b45->width = width5;
HXDLIN( 401)							b45->height = height5;
HXDLIN( 401)							b45->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 401)							b45->data = ::haxe::io::Bytes_obj::alloc((b45->length * 4));
HXDLIN( 401)							{
HXLINE( 401)								int len10 = b45->length;
HXDLIN( 401)								int w5 = 0;
HXDLIN( 401)								{
HXLINE( 401)									int _g100 = 0;
HXDLIN( 401)									int _g101 = b45->height;
HXDLIN( 401)									while((_g100 < _g101)){
HXLINE( 401)										_g100 = (_g100 + 1);
HXDLIN( 401)										int y20 = (_g100 - 1);
HXDLIN( 401)										{
HXLINE( 401)											int _g102 = 0;
HXDLIN( 401)											int _g103 = b45->width;
HXDLIN( 401)											while((_g102 < _g103)){
HXLINE( 401)												_g102 = (_g102 + 1);
HXDLIN( 401)												int x20 = (_g102 - 1);
HXDLIN( 401)												{
HXLINE( 401)													w5 = (w5 + 1);
HXDLIN( 401)													b45->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 401)												{
HXLINE( 401)													w5 = (w5 + 1);
HXDLIN( 401)													b45->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 401)												{
HXLINE( 401)													w5 = (w5 + 1);
HXDLIN( 401)													b45->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 401)												{
HXLINE( 401)													w5 = (w5 + 1);
HXDLIN( 401)													b45->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 401)						undoImage16 = b45;
            					}
            					break;
            					case (int)1: {
HXLINE( 401)						 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 401)						 ::iterMagic::ArrIntImg a46 = arrI5;
HXDLIN( 401)						{
HXLINE( 401)							a46->width = width5;
HXDLIN( 401)							a46->height = height5;
HXDLIN( 401)							a46->data = ::Array_obj< int >::__new(0);
HXDLIN( 401)							a46->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 401)							{
HXLINE( 401)								int _g104 = 0;
HXDLIN( 401)								int _g105 = a46->length;
HXDLIN( 401)								while((_g104 < _g105)){
HXLINE( 401)									_g104 = (_g104 + 1);
HXDLIN( 401)									int i30 = (_g104 - 1);
HXDLIN( 401)									a46->data[i30] = 0;
            								}
            							}
            						}
HXDLIN( 401)						undoImage16 = a46;
            					}
            					break;
            					case (int)2: {
HXLINE( 401)						 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 401)						 ::iterMagic::U32ArrImg b46 = u32a5;
HXDLIN( 401)						{
HXLINE( 401)							b46->width = width5;
HXDLIN( 401)							b46->height = height5;
HXDLIN( 401)							b46->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 401)							int size5 = (b46->length * 4);
HXDLIN( 401)							b46->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN( 401)							{
HXLINE( 401)								int _g106 = 0;
HXDLIN( 401)								int _g107 = b46->length;
HXDLIN( 401)								while((_g106 < _g107)){
HXLINE( 401)									_g106 = (_g106 + 1);
HXDLIN( 401)									int i31 = (_g106 - 1);
HXDLIN( 401)									{
HXLINE( 401)										 ::haxe::io::ArrayBufferViewImpl this167 = b46->data;
HXDLIN( 401)										bool undoImage17;
HXDLIN( 401)										if ((i31 >= 0)) {
HXLINE( 401)											undoImage17 = (i31 < (this167->byteLength >> 2));
            										}
            										else {
HXLINE( 401)											undoImage17 = false;
            										}
HXDLIN( 401)										if (undoImage17) {
HXLINE( 401)											 ::haxe::io::Bytes _this5 = this167->bytes;
HXDLIN( 401)											int pos5 = ((i31 << 2) + this167->byteOffset);
HXDLIN( 401)											_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN( 401)											_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN( 401)											_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN( 401)											_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 401)						undoImage16 = b46;
            					}
            					break;
            					case (int)3: {
HXLINE( 401)						 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 401)						 ::iterMagic::VecIntImg v12 = vec5;
HXDLIN( 401)						{
HXLINE( 401)							v12->width = width5;
HXDLIN( 401)							v12->height = height5;
HXDLIN( 401)							v12->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 401)							v12->data = ::Array_obj< int >::__new(v12->length);
HXDLIN( 401)							{
HXLINE( 401)								int _g108 = 0;
HXDLIN( 401)								int _g109 = v12->length;
HXDLIN( 401)								while((_g108 < _g109)){
HXLINE( 401)									_g108 = (_g108 + 1);
HXDLIN( 401)									int i32 = (_g108 - 1);
HXDLIN( 401)									v12->data->__unsafe_set(i32,0);
            								}
            							}
            						}
HXDLIN( 401)						undoImage16 = v12;
            					}
            					break;
            					case (int)4: {
HXLINE( 401)						 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 401)						 ::iterMagic::StackIntImg b47 = sInt5;
HXDLIN( 401)						{
HXLINE( 401)							b47->width = width5;
HXDLIN( 401)							b47->height = height5;
HXDLIN( 401)							b47->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 401)							b47->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 401)							{
HXLINE( 401)								int len11 = b47->length;
HXDLIN( 401)								 ::haxe::ds::GenericStack_Int d5 = b47->data;
HXDLIN( 401)								if (::hx::IsNull( d5->head )) {
HXLINE( 401)									int _g110 = 0;
HXDLIN( 401)									int _g111 = len11;
HXDLIN( 401)									while((_g110 < _g111)){
HXLINE( 401)										_g110 = (_g110 + 1);
HXDLIN( 401)										int i33 = (_g110 - 1);
HXDLIN( 401)										d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            									}
            								}
            								else {
HXLINE( 401)									int _g112 = 0;
HXDLIN( 401)									int _g113 = len11;
HXDLIN( 401)									while((_g112 < _g113)){
HXLINE( 401)										_g112 = (_g112 + 1);
HXDLIN( 401)										int i34 = (_g112 - 1);
HXDLIN( 401)										{
HXLINE( 401)											 ::haxe::ds::GenericCell_Int l5 = b47->data->head;
HXDLIN( 401)											 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN( 401)											{
HXLINE( 401)												int _g114 = 0;
HXDLIN( 401)												int _g115 = i34;
HXDLIN( 401)												while((_g114 < _g115)){
HXLINE( 401)													_g114 = (_g114 + 1);
HXDLIN( 401)													int i35 = (_g114 - 1);
HXLINE( 345)													prev5 = l5;
HXLINE( 346)													l5 = l5->next;
            												}
            											}
HXLINE( 401)											if (::hx::IsNull( prev5 )) {
HXLINE( 401)												b47->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 401)												l5 = null();
            											}
            											else {
HXLINE( 401)												prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 401)												l5 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 401)						undoImage16 = b47;
            					}
            					break;
            				}
HXDLIN( 401)				this166->image = undoImage16;
HXDLIN( 401)				this166->width = width5;
HXDLIN( 401)				this166->height = height5;
HXDLIN( 401)				this166->imageType = ( (int)(imageType5) );
HXDLIN( 401)				undoImage15 = this166;
HXDLIN( 401)				{
HXLINE( 401)					int rectLeft5 = xIter35->start;
HXDLIN( 401)					int rectTop5 = yIter35->start;
HXDLIN( 401)					int rectRight5 = xIter35->max;
HXDLIN( 401)					bool forceClear5 = false;
HXDLIN( 401)					{
HXLINE( 401)						int _g116 = rectTop5;
HXDLIN( 401)						int _g117 = yIter35->max;
HXDLIN( 401)						while((_g116 < _g117)){
HXLINE( 401)							_g116 = (_g116 + 1);
HXDLIN( 401)							int dy8 = (_g116 - 1);
HXDLIN( 401)							{
HXLINE( 401)								int _g118 = rectLeft5;
HXDLIN( 401)								int _g119 = rectRight5;
HXDLIN( 401)								while((_g118 < _g119)){
HXLINE( 401)									_g118 = (_g118 + 1);
HXDLIN( 401)									int dx8 = (_g118 - 1);
HXDLIN( 401)									::Dynamic this168 = pixelImage->image;
HXDLIN( 401)									int index25;
HXDLIN( 401)									if (pixelImage->useVirtualPos) {
HXLINE( 401)										index25 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx8) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 401)										index25 = ::Std_obj::_hx_int(( (Float)(((dy8 * pixelImage->width) + dx8)) ));
            									}
HXDLIN( 401)									int c30 = ::iterMagic::Iimg_obj::get(this168,index25);
HXDLIN( 401)									int col5;
HXDLIN( 401)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)										col5 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            									}
            									else {
HXLINE( 401)										col5 = c30;
            									}
HXDLIN( 401)									bool hitQuad41;
HXDLIN( 401)									if (pixelImage->useMask) {
HXLINE( 401)										hitQuad41 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE( 401)										hitQuad41 = false;
            									}
HXDLIN( 401)									if (hitQuad41) {
HXLINE( 401)										 ::pi_xy::ImageStruct this169 = pixelImage->mask;
HXDLIN( 401)										::Dynamic this170 = this169->image;
HXDLIN( 401)										int index26;
HXDLIN( 401)										if (this169->useVirtualPos) {
HXLINE( 401)											index26 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this169->virtualY) * ( (Float)(this169->width) )) + dx8) - this169->virtualX));
            										}
            										else {
HXLINE( 401)											index26 = ::Std_obj::_hx_int(( (Float)(((dy8 * this169->width) + dx8)) ));
            										}
HXDLIN( 401)										int c31 = ::iterMagic::Iimg_obj::get(this170,index26);
HXDLIN( 401)										int v13;
HXDLIN( 401)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)											v13 = ((((((c31 >> 24) & 255) << 24) | ((c31 & 255) << 16)) | (((c31 >> 8) & 255) << 8)) | ((c31 >> 16) & 255));
            										}
            										else {
HXLINE( 401)											v13 = c31;
            										}
HXDLIN( 401)										int maskPixel5 = v13;
HXDLIN( 401)										int this171 = col5;
HXDLIN( 401)										if ((maskPixel5 == 0)) {
HXLINE( 401)											col5 = this171;
            										}
            										else {
HXLINE( 401)											Float m05;
HXDLIN( 401)											int this172 = ((maskPixel5 >> 24) & 255);
HXDLIN( 401)											if ((this172 == 0)) {
HXLINE( 401)												m05 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												m05 = (( (Float)(this172) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float m15;
HXDLIN( 401)											int this173 = ((maskPixel5 >> 16) & 255);
HXDLIN( 401)											if ((this173 == 0)) {
HXLINE( 401)												m15 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												m15 = (( (Float)(this173) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float m25;
HXDLIN( 401)											int this174 = ((maskPixel5 >> 8) & 255);
HXDLIN( 401)											if ((this174 == 0)) {
HXLINE( 401)												m25 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												m25 = (( (Float)(this174) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float m35;
HXDLIN( 401)											int this175 = (maskPixel5 & 255);
HXDLIN( 401)											if ((this175 == 0)) {
HXLINE( 401)												m35 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												m35 = (( (Float)(this175) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this171 >> 24) & 255)) )));
HXDLIN( 401)											int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this171 >> 16) & 255)) )));
HXDLIN( 401)											int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this171 >> 8) & 255)) )));
HXDLIN( 401)											int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this171 & 255)) )));
HXDLIN( 401)											col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 401)									if ((col5 != 0)) {
HXLINE( 401)										int x21 = (dx8 - rectLeft5);
HXDLIN( 401)										int y21 = (dy8 - rectTop5);
HXDLIN( 401)										int c32 = col5;
HXDLIN( 401)										bool hitQuad42;
HXDLIN( 401)										if ((((c32 >> 24) & 255) < 254)) {
HXLINE( 401)											hitQuad42 = undoImage15->transparent;
            										}
            										else {
HXLINE( 401)											hitQuad42 = false;
            										}
HXDLIN( 401)										if (hitQuad42) {
HXLINE( 401)											int location10;
HXDLIN( 401)											if (undoImage15->useVirtualPos) {
HXLINE( 401)												location10 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x21) - undoImage15->virtualX));
            											}
            											else {
HXLINE( 401)												location10 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage15->width) + x21)) ));
            											}
HXDLIN( 401)											int this176 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN( 401)											int this177;
HXDLIN( 401)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)												this177 = ((((((this176 >> 24) & 255) << 24) | ((this176 & 255) << 16)) | (((this176 >> 8) & 255) << 8)) | ((this176 >> 16) & 255));
            											}
            											else {
HXLINE( 401)												this177 = this176;
            											}
HXDLIN( 401)											Float a115;
HXDLIN( 401)											int this178 = ((this177 >> 24) & 255);
HXDLIN( 401)											if ((this178 == 0)) {
HXLINE( 401)												a115 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												a115 = (( (Float)(this178) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float r110;
HXDLIN( 401)											int this179 = ((this177 >> 16) & 255);
HXDLIN( 401)											if ((this179 == 0)) {
HXLINE( 401)												r110 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												r110 = (( (Float)(this179) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float g110;
HXDLIN( 401)											int this180 = ((this177 >> 8) & 255);
HXDLIN( 401)											if ((this180 == 0)) {
HXLINE( 401)												g110 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												g110 = (( (Float)(this180) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float b116;
HXDLIN( 401)											int this181 = (this177 & 255);
HXDLIN( 401)											if ((this181 == 0)) {
HXLINE( 401)												b116 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												b116 = (( (Float)(this181) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float a213;
HXDLIN( 401)											int this182 = ((col5 >> 24) & 255);
HXDLIN( 401)											if ((this182 == 0)) {
HXLINE( 401)												a213 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												a213 = (( (Float)(this182) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float r210;
HXDLIN( 401)											int this183 = ((col5 >> 16) & 255);
HXDLIN( 401)											if ((this183 == 0)) {
HXLINE( 401)												r210 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												r210 = (( (Float)(this183) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float g210;
HXDLIN( 401)											int this184 = ((col5 >> 8) & 255);
HXDLIN( 401)											if ((this184 == 0)) {
HXLINE( 401)												g210 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												g210 = (( (Float)(this184) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float b214;
HXDLIN( 401)											int this185 = (col5 & 255);
HXDLIN( 401)											if ((this185 == 0)) {
HXLINE( 401)												b214 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												b214 = (( (Float)(this185) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN( 401)											int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a312) + (r210 * a213))));
HXDLIN( 401)											int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a312) + (g210 * a213))));
HXDLIN( 401)											int b48 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b214 * a213))));
HXDLIN( 401)											int a47 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN( 401)											int blended10 = ((((a47 << 24) | (r30 << 16)) | (g30 << 8)) | b48);
HXDLIN( 401)											{
HXLINE( 401)												int hitQuad43;
HXDLIN( 401)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)													hitQuad43 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            												}
            												else {
HXLINE( 401)													hitQuad43 = blended10;
            												}
HXDLIN( 401)												::iterMagic::Iimg_obj::set(undoImage15->image,location10,hitQuad43);
            											}
            										}
            										else {
HXLINE( 401)											::Dynamic this186 = undoImage15->image;
HXDLIN( 401)											int index27;
HXDLIN( 401)											if (undoImage15->useVirtualPos) {
HXLINE( 401)												index27 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x21) - undoImage15->virtualX));
            											}
            											else {
HXLINE( 401)												index27 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage15->width) + x21)) ));
            											}
HXDLIN( 401)											int hitQuad44;
HXDLIN( 401)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)												hitQuad44 = ((((((c32 >> 24) & 255) << 24) | ((c32 & 255) << 16)) | (((c32 >> 8) & 255) << 8)) | ((c32 >> 16) & 255));
            											}
            											else {
HXLINE( 401)												hitQuad44 = c32;
            											}
HXDLIN( 401)											::iterMagic::Iimg_obj::set(this186,index27,hitQuad44);
            										}
            									}
            									else {
HXLINE( 401)										if (forceClear5) {
HXLINE( 401)											::Dynamic this187 = undoImage15->image;
HXDLIN( 401)											int x22 = (dx8 - rectLeft5);
HXDLIN( 401)											int y22 = (dy8 - rectTop5);
HXDLIN( 401)											int index28;
HXDLIN( 401)											if (undoImage15->useVirtualPos) {
HXLINE( 401)												index28 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x22) - undoImage15->virtualX));
            											}
            											else {
HXLINE( 401)												index28 = ::Std_obj::_hx_int(( (Float)(((y22 * undoImage15->width) + x22)) ));
            											}
HXDLIN( 401)											::iterMagic::Iimg_obj::set(this187,index28,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 401)			bool found5 = false;
HXDLIN( 401)			Float s5 = ((Float)0.);
HXDLIN( 401)			Float t5 = ((Float)0.);
HXDLIN( 401)			Float sxx5 = ((Float)0.);
HXDLIN( 401)			Float txx5 = ((Float)0.);
HXDLIN( 401)			{
HXLINE( 401)				int _g_min10 = xIter35->start;
HXDLIN( 401)				int _g_max10 = xIter35->max;
HXDLIN( 401)				while((_g_min10 < _g_max10)){
HXLINE( 401)					_g_min10 = (_g_min10 + 1);
HXDLIN( 401)					int x23 = (_g_min10 - 1);
HXLINE(  60)					sxx5 = (sx5 * ( (Float)(x23) ));
HXLINE(  61)					txx5 = (tx5 * ( (Float)(x23) ));
HXLINE(  62)					found5 = false;
HXLINE( 401)					{
HXLINE( 401)						int _g_min11 = yIter35->start;
HXDLIN( 401)						int _g_max11 = yIter35->max;
HXDLIN( 401)						while((_g_min11 < _g_max11)){
HXLINE( 401)							_g_min11 = (_g_min11 + 1);
HXDLIN( 401)							int y23 = (_g_min11 - 1);
HXLINE(  64)							s5 = ((s05 + sxx5) + (sy5 * ( (Float)(y23) )));
HXLINE(  65)							t5 = ((t05 + txx5) + (ty5 * ( (Float)(y23) )));
HXLINE( 401)							bool hitQuad45;
HXDLIN( 401)							if (!((s5 <= 0))) {
HXLINE( 401)								hitQuad45 = (t5 <= 0);
            							}
            							else {
HXLINE( 401)								hitQuad45 = true;
            							}
HXDLIN( 401)							if (hitQuad45) {
HXLINE( 401)								if (found5) {
HXLINE( 401)									goto _hx_goto_521;
            								}
            							}
            							else {
HXLINE( 401)								if (((s5 + t5) < A5)) {
HXLINE( 401)									{
HXLINE( 401)										int c33 = color;
HXDLIN( 401)										bool hitQuad46;
HXDLIN( 401)										if ((((c33 >> 24) & 255) < 254)) {
HXLINE( 401)											hitQuad46 = pixelImage->transparent;
            										}
            										else {
HXLINE( 401)											hitQuad46 = false;
            										}
HXDLIN( 401)										if (hitQuad46) {
HXLINE( 401)											int location11;
HXDLIN( 401)											if (pixelImage->useVirtualPos) {
HXLINE( 401)												location11 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x23) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 401)												location11 = ::Std_obj::_hx_int(( (Float)(((y23 * pixelImage->width) + x23)) ));
            											}
HXDLIN( 401)											int this188 = ::iterMagic::Iimg_obj::get(pixelImage->image,location11);
HXDLIN( 401)											int this189;
HXDLIN( 401)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)												this189 = ((((((this188 >> 24) & 255) << 24) | ((this188 & 255) << 16)) | (((this188 >> 8) & 255) << 8)) | ((this188 >> 16) & 255));
            											}
            											else {
HXLINE( 401)												this189 = this188;
            											}
HXDLIN( 401)											Float a116;
HXDLIN( 401)											int this190 = ((this189 >> 24) & 255);
HXDLIN( 401)											if ((this190 == 0)) {
HXLINE( 401)												a116 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												a116 = (( (Float)(this190) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float r111;
HXDLIN( 401)											int this191 = ((this189 >> 16) & 255);
HXDLIN( 401)											if ((this191 == 0)) {
HXLINE( 401)												r111 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												r111 = (( (Float)(this191) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float g111;
HXDLIN( 401)											int this192 = ((this189 >> 8) & 255);
HXDLIN( 401)											if ((this192 == 0)) {
HXLINE( 401)												g111 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												g111 = (( (Float)(this192) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float b117;
HXDLIN( 401)											int this193 = (this189 & 255);
HXDLIN( 401)											if ((this193 == 0)) {
HXLINE( 401)												b117 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												b117 = (( (Float)(this193) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float a214;
HXDLIN( 401)											int this194 = ((color >> 24) & 255);
HXDLIN( 401)											if ((this194 == 0)) {
HXLINE( 401)												a214 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												a214 = (( (Float)(this194) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float r211;
HXDLIN( 401)											int this195 = ((color >> 16) & 255);
HXDLIN( 401)											if ((this195 == 0)) {
HXLINE( 401)												r211 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												r211 = (( (Float)(this195) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float g211;
HXDLIN( 401)											int this196 = ((color >> 8) & 255);
HXDLIN( 401)											if ((this196 == 0)) {
HXLINE( 401)												g211 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												g211 = (( (Float)(this196) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float b215;
HXDLIN( 401)											int this197 = (color & 255);
HXDLIN( 401)											if ((this197 == 0)) {
HXLINE( 401)												b215 = ((Float)0.);
            											}
            											else {
HXLINE( 401)												b215 = (( (Float)(this197) ) / ( (Float)(255) ));
            											}
HXDLIN( 401)											Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN( 401)											int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a313) + (r211 * a214))));
HXDLIN( 401)											int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a313) + (g211 * a214))));
HXDLIN( 401)											int b49 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b215 * a214))));
HXDLIN( 401)											int a48 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN( 401)											int blended11 = ((((a48 << 24) | (r31 << 16)) | (g31 << 8)) | b49);
HXDLIN( 401)											{
HXLINE( 401)												int hitQuad47;
HXDLIN( 401)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)													hitQuad47 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            												}
            												else {
HXLINE( 401)													hitQuad47 = blended11;
            												}
HXDLIN( 401)												::iterMagic::Iimg_obj::set(pixelImage->image,location11,hitQuad47);
            											}
            										}
            										else {
HXLINE( 401)											::Dynamic this198 = pixelImage->image;
HXDLIN( 401)											int index29;
HXDLIN( 401)											if (pixelImage->useVirtualPos) {
HXLINE( 401)												index29 = ::Std_obj::_hx_int(((((( (Float)(y23) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x23) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 401)												index29 = ::Std_obj::_hx_int(( (Float)(((y23 * pixelImage->width) + x23)) ));
            											}
HXDLIN( 401)											int hitQuad48;
HXDLIN( 401)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 401)												hitQuad48 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            											}
            											else {
HXLINE( 401)												hitQuad48 = c33;
            											}
HXDLIN( 401)											::iterMagic::Iimg_obj::set(this198,index29,hitQuad48);
            										}
            									}
HXLINE(  73)									found5 = true;
            								}
            								else {
HXLINE( 401)									if (found5) {
HXLINE( 401)										goto _hx_goto_521;
            									}
            								}
            							}
            						}
            						_hx_goto_521:;
            					}
            				}
            			}
HXDLIN( 401)			 ::pi_xy::iter::IntIterStart v_yIter35;
HXDLIN( 401)			 ::pi_xy::iter::IntIterStart v_xIter35;
HXDLIN( 401)			int v_undoY5;
HXDLIN( 401)			int v_undoX5;
HXDLIN( 401)			Float v_ty5;
HXDLIN( 401)			Float v_tx5;
HXDLIN( 401)			Float v_t05;
HXDLIN( 401)			Float v_sy5;
HXDLIN( 401)			Float v_sx5;
HXDLIN( 401)			Float v_s05;
HXDLIN( 401)			Float v_A5;
HXDLIN( 401)			Float ax8 = bx10;
HXDLIN( 401)			Float ay8 = by10;
HXDLIN( 401)			 ::pi_xy::ImageStruct v_undoImage5 = null();
HXDLIN( 401)			Float bx14 = bx13;
HXDLIN( 401)			Float by14 = by13;
HXDLIN( 401)			Float cx14 = cx13;
HXDLIN( 401)			Float cy14 = cy13;
HXDLIN( 401)			bool adjustWinding11 = (((((ax8 * by14) - (bx14 * ay8)) + ((bx14 * cy14) - (cx14 * by14))) + ((cx14 * ay8) - (ax8 * cy14))) > 0);
HXDLIN( 401)			if (!(adjustWinding11)) {
HXLINE( 401)				Float bx_11 = bx14;
HXDLIN( 401)				Float by_11 = by14;
HXLINE(  24)				bx14 = cx14;
HXLINE(  25)				by14 = cy14;
HXLINE(  26)				cx14 = bx_11;
HXLINE(  27)				cy14 = by_11;
            			}
HXLINE( 401)			Float v_ax5 = ax8;
HXDLIN( 401)			Float v_ay5 = ay8;
HXDLIN( 401)			Float v_bx5 = bx14;
HXDLIN( 401)			Float v_by5 = by14;
HXDLIN( 401)			Float v_cx5 = cx14;
HXDLIN( 401)			Float v_cy5 = cy14;
HXDLIN( 401)			bool v_preCalculated5 = true;
HXDLIN( 401)			{
HXLINE( 401)				v_s05 = ((v_ay5 * v_cx5) - (v_ax5 * v_cy5));
HXDLIN( 401)				v_sx5 = (v_cy5 - v_ay5);
HXDLIN( 401)				v_sy5 = (v_ax5 - v_cx5);
HXDLIN( 401)				v_t05 = ((v_ax5 * v_by5) - (v_ay5 * v_bx5));
HXDLIN( 401)				v_tx5 = (v_ay5 - v_by5);
HXDLIN( 401)				v_ty5 = (v_bx5 - v_ax5);
HXDLIN( 401)				v_A5 = ((((-(v_by5) * v_cx5) + (v_ay5 * (-(v_bx5) + v_cx5))) + (v_ax5 * (v_by5 - v_cy5))) + (v_bx5 * v_cy5));
HXDLIN( 401)				Float a49 = v_ax5;
HXDLIN( 401)				Float b50 = v_bx5;
HXDLIN( 401)				Float c34 = v_cx5;
HXDLIN( 401)				if ((a49 > b50)) {
HXLINE( 401)					if ((a49 > c34)) {
HXLINE( 401)						int min44;
HXDLIN( 401)						if ((b50 > c34)) {
HXLINE( 401)							min44 = ::Math_obj::floor(c34);
            						}
            						else {
HXLINE( 401)							min44 = ::Math_obj::floor(b50);
            						}
HXDLIN( 401)						int ii_min88 = min44;
HXDLIN( 401)						int ii_max88 = ::Math_obj::ceil(a49);
HXDLIN( 401)						v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min88,ii_max88);
            					}
            					else {
HXLINE( 401)						int ii_min89 = ::Math_obj::floor(b50);
HXDLIN( 401)						int ii_max89 = ::Math_obj::ceil(c34);
HXDLIN( 401)						v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min89,ii_max89);
            					}
            				}
            				else {
HXLINE( 401)					if ((b50 > c34)) {
HXLINE( 401)						int min45;
HXDLIN( 401)						if ((a49 > c34)) {
HXLINE( 401)							min45 = ::Math_obj::floor(c34);
            						}
            						else {
HXLINE( 401)							min45 = ::Math_obj::ceil(a49);
            						}
HXDLIN( 401)						int ii_min90 = min45;
HXDLIN( 401)						int ii_max90 = ::Math_obj::ceil(b50);
HXDLIN( 401)						v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min90,ii_max90);
            					}
            					else {
HXLINE( 401)						int ii_min91 = ::Math_obj::floor(a49);
HXDLIN( 401)						int ii_max91 = ::Math_obj::ceil(c34);
HXDLIN( 401)						v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min91,ii_max91);
            					}
            				}
HXDLIN( 401)				Float a50 = v_ay5;
HXDLIN( 401)				Float b51 = v_by5;
HXDLIN( 401)				Float c35 = v_cy5;
HXDLIN( 401)				if ((a50 > b51)) {
HXLINE( 401)					if ((a50 > c35)) {
HXLINE( 401)						int min46;
HXDLIN( 401)						if ((b51 > c35)) {
HXLINE( 401)							min46 = ::Math_obj::floor(c35);
            						}
            						else {
HXLINE( 401)							min46 = ::Math_obj::floor(b51);
            						}
HXDLIN( 401)						int ii_min92 = min46;
HXDLIN( 401)						int ii_max92 = ::Math_obj::ceil(a50);
HXDLIN( 401)						v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min92,ii_max92);
            					}
            					else {
HXLINE( 401)						int ii_min93 = ::Math_obj::floor(b51);
HXDLIN( 401)						int ii_max93 = ::Math_obj::ceil(c35);
HXDLIN( 401)						v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min93,ii_max93);
            					}
            				}
            				else {
HXLINE( 401)					if ((b51 > c35)) {
HXLINE( 401)						int min47;
HXDLIN( 401)						if ((a50 > c35)) {
HXLINE( 401)							min47 = ::Math_obj::floor(c35);
            						}
            						else {
HXLINE( 401)							min47 = ::Math_obj::ceil(a50);
            						}
HXDLIN( 401)						int ii_min94 = min47;
HXDLIN( 401)						int ii_max94 = ::Math_obj::ceil(b51);
HXDLIN( 401)						v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min94,ii_max94);
            					}
            					else {
HXLINE( 401)						int ii_min95 = ::Math_obj::floor(a50);
HXDLIN( 401)						int ii_max95 = ::Math_obj::ceil(c35);
HXDLIN( 401)						v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min95,ii_max95);
            					}
            				}
            			}
HXDLIN( 401)			if (hasUndo5) {
HXLINE( 401)				v_undoImage5 = undoImage15;
HXDLIN( 401)				v_undoX5 = xIter35->start;
HXDLIN( 401)				v_undoY5 = yIter35->start;
            			}
HXDLIN( 401)			 ::pi_xy::algo::HitQuad v14 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax6,ay6,bx10,by10,cx10,cy10,dx6,dy6,true);
HXLINE( 394)			hitQuad = v14;
            		}
HXLINE( 403)		Float cx15 = h2;
HXLINE( 404)		Float cy15 = radius2;
HXLINE( 405)		Float bx15 = h2;
HXLINE( 406)		Float by15 = -(radius2);
HXLINE( 407)		Float temp3 = ((Float)0.);
HXLINE( 408)		temp3 = (px + ((bx15 * cos) - (by15 * sin)));
HXLINE( 409)		by15 = (py + ((by15 * cos) + (bx15 * sin)));
HXLINE( 410)		bx15 = temp3;
HXLINE( 411)		temp3 = (px + ((cx15 * cos) - (cy15 * sin)));
HXLINE( 412)		cy15 = (py + ((cy15 * cos) + (cx15 * sin)));
HXLINE( 413)		cx15 = temp3;
HXLINE( 414)		Float bx16 = bx15;
HXDLIN( 414)		Float by16 = by15;
HXDLIN( 414)		Float cx16 = cx15;
HXDLIN( 414)		Float cy16 = cy15;
HXDLIN( 414)		bool hasUndo6 = false;
HXDLIN( 414)		bool adjustWinding12 = (((((qx * by16) - (bx16 * qy)) + ((bx16 * cy16) - (cx16 * by16))) + ((cx16 * qy) - (qx * cy16))) > 0);
HXDLIN( 414)		if (!(adjustWinding12)) {
HXLINE( 414)			Float bx_12 = bx16;
HXDLIN( 414)			Float by_12 = by16;
HXLINE(  25)			bx16 = cx16;
HXLINE(  26)			by16 = cy16;
HXLINE(  27)			cx16 = bx_12;
HXLINE(  28)			cy16 = by_12;
            		}
HXLINE( 414)		Float s06 = ((qy * cx16) - (qx * cy16));
HXDLIN( 414)		Float sx6 = (cy16 - qy);
HXDLIN( 414)		Float sy6 = (qx - cx16);
HXDLIN( 414)		Float t06 = ((qx * by16) - (qy * bx16));
HXDLIN( 414)		Float tx6 = (qy - by16);
HXDLIN( 414)		Float ty6 = (bx16 - qx);
HXDLIN( 414)		Float A6 = ((((-(by16) * cx16) + (qy * (-(bx16) + cx16))) + (qx * (by16 - cy16))) + (bx16 * cy16));
HXDLIN( 414)		 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN( 414)		if ((qx > bx16)) {
HXLINE( 414)			if ((qx > cx16)) {
HXLINE( 414)				int min48;
HXDLIN( 414)				if ((bx16 > cx16)) {
HXLINE( 414)					min48 = ::Math_obj::floor(cx16);
            				}
            				else {
HXLINE( 414)					min48 = ::Math_obj::floor(bx16);
            				}
HXDLIN( 414)				int ii_min96 = min48;
HXDLIN( 414)				int ii_max96 = ::Math_obj::ceil(qx);
HXDLIN( 414)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min96,ii_max96);
            			}
            			else {
HXLINE( 414)				int ii_min97 = ::Math_obj::floor(bx16);
HXDLIN( 414)				int ii_max97 = ::Math_obj::ceil(cx16);
HXDLIN( 414)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min97,ii_max97);
            			}
            		}
            		else {
HXLINE( 414)			if ((bx16 > cx16)) {
HXLINE( 414)				int min49;
HXDLIN( 414)				if ((qx > cx16)) {
HXLINE( 414)					min49 = ::Math_obj::floor(cx16);
            				}
            				else {
HXLINE( 414)					min49 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 414)				int ii_min98 = min49;
HXDLIN( 414)				int ii_max98 = ::Math_obj::ceil(bx16);
HXDLIN( 414)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min98,ii_max98);
            			}
            			else {
HXLINE( 414)				int ii_min99 = ::Math_obj::floor(qx);
HXDLIN( 414)				int ii_max99 = ::Math_obj::ceil(cx16);
HXDLIN( 414)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min99,ii_max99);
            			}
            		}
HXDLIN( 414)		 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN( 414)		if ((qy > by16)) {
HXLINE( 414)			if ((qy > cy16)) {
HXLINE( 414)				int min50;
HXDLIN( 414)				if ((by16 > cy16)) {
HXLINE( 414)					min50 = ::Math_obj::floor(cy16);
            				}
            				else {
HXLINE( 414)					min50 = ::Math_obj::floor(by16);
            				}
HXDLIN( 414)				int ii_min100 = min50;
HXDLIN( 414)				int ii_max100 = ::Math_obj::ceil(qy);
HXDLIN( 414)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min100,ii_max100);
            			}
            			else {
HXLINE( 414)				int ii_min101 = ::Math_obj::floor(by16);
HXDLIN( 414)				int ii_max101 = ::Math_obj::ceil(cy16);
HXDLIN( 414)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min101,ii_max101);
            			}
            		}
            		else {
HXLINE( 414)			if ((by16 > cy16)) {
HXLINE( 414)				int min51;
HXDLIN( 414)				if ((qy > cy16)) {
HXLINE( 414)					min51 = ::Math_obj::floor(cy16);
            				}
            				else {
HXLINE( 414)					min51 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 414)				int ii_min102 = min51;
HXDLIN( 414)				int ii_max102 = ::Math_obj::ceil(by16);
HXDLIN( 414)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min102,ii_max102);
            			}
            			else {
HXLINE( 414)				int ii_min103 = ::Math_obj::floor(qy);
HXDLIN( 414)				int ii_max103 = ::Math_obj::ceil(cy16);
HXDLIN( 414)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min103,ii_max103);
            			}
            		}
HXDLIN( 414)		 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN( 414)		if (hasUndo6) {
HXLINE( 414)			int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN( 414)			int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN( 414)			 ::Dynamic imageType6 = null();
HXDLIN( 414)			 ::pi_xy::ImageStruct this199 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 414)			if (::hx::IsNull( imageType6 )) {
HXLINE(  54)				imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 414)			::Dynamic undoImage19;
HXDLIN( 414)			switch((int)(( (int)(imageType6) ))){
            				case (int)0: {
HXLINE( 414)					 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 414)					 ::iterMagic::BytesImg b52 = byt6;
HXDLIN( 414)					{
HXLINE( 414)						b52->width = width6;
HXDLIN( 414)						b52->height = height6;
HXDLIN( 414)						b52->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 414)						b52->data = ::haxe::io::Bytes_obj::alloc((b52->length * 4));
HXDLIN( 414)						{
HXLINE( 414)							int len12 = b52->length;
HXDLIN( 414)							int w6 = 0;
HXDLIN( 414)							{
HXLINE( 414)								int _g120 = 0;
HXDLIN( 414)								int _g121 = b52->height;
HXDLIN( 414)								while((_g120 < _g121)){
HXLINE( 414)									_g120 = (_g120 + 1);
HXDLIN( 414)									int y24 = (_g120 - 1);
HXDLIN( 414)									{
HXLINE( 414)										int _g122 = 0;
HXDLIN( 414)										int _g123 = b52->width;
HXDLIN( 414)										while((_g122 < _g123)){
HXLINE( 414)											_g122 = (_g122 + 1);
HXDLIN( 414)											int x24 = (_g122 - 1);
HXDLIN( 414)											{
HXLINE( 414)												w6 = (w6 + 1);
HXDLIN( 414)												b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 414)											{
HXLINE( 414)												w6 = (w6 + 1);
HXDLIN( 414)												b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 414)											{
HXLINE( 414)												w6 = (w6 + 1);
HXDLIN( 414)												b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 414)											{
HXLINE( 414)												w6 = (w6 + 1);
HXDLIN( 414)												b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 414)					undoImage19 = b52;
            				}
            				break;
            				case (int)1: {
HXLINE( 414)					 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 414)					 ::iterMagic::ArrIntImg a51 = arrI6;
HXDLIN( 414)					{
HXLINE( 414)						a51->width = width6;
HXDLIN( 414)						a51->height = height6;
HXDLIN( 414)						a51->data = ::Array_obj< int >::__new(0);
HXDLIN( 414)						a51->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 414)						{
HXLINE( 414)							int _g124 = 0;
HXDLIN( 414)							int _g125 = a51->length;
HXDLIN( 414)							while((_g124 < _g125)){
HXLINE( 414)								_g124 = (_g124 + 1);
HXDLIN( 414)								int i36 = (_g124 - 1);
HXDLIN( 414)								a51->data[i36] = 0;
            							}
            						}
            					}
HXDLIN( 414)					undoImage19 = a51;
            				}
            				break;
            				case (int)2: {
HXLINE( 414)					 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 414)					 ::iterMagic::U32ArrImg b53 = u32a6;
HXDLIN( 414)					{
HXLINE( 414)						b53->width = width6;
HXDLIN( 414)						b53->height = height6;
HXDLIN( 414)						b53->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 414)						int size6 = (b53->length * 4);
HXDLIN( 414)						b53->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN( 414)						{
HXLINE( 414)							int _g126 = 0;
HXDLIN( 414)							int _g127 = b53->length;
HXDLIN( 414)							while((_g126 < _g127)){
HXLINE( 414)								_g126 = (_g126 + 1);
HXDLIN( 414)								int i37 = (_g126 - 1);
HXDLIN( 414)								{
HXLINE( 414)									 ::haxe::io::ArrayBufferViewImpl this200 = b53->data;
HXDLIN( 414)									bool undoImage20;
HXDLIN( 414)									if ((i37 >= 0)) {
HXLINE( 414)										undoImage20 = (i37 < (this200->byteLength >> 2));
            									}
            									else {
HXLINE( 414)										undoImage20 = false;
            									}
HXDLIN( 414)									if (undoImage20) {
HXLINE( 414)										 ::haxe::io::Bytes _this6 = this200->bytes;
HXDLIN( 414)										int pos6 = ((i37 << 2) + this200->byteOffset);
HXDLIN( 414)										_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN( 414)										_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN( 414)										_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN( 414)										_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 414)					undoImage19 = b53;
            				}
            				break;
            				case (int)3: {
HXLINE( 414)					 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 414)					 ::iterMagic::VecIntImg v15 = vec6;
HXDLIN( 414)					{
HXLINE( 414)						v15->width = width6;
HXDLIN( 414)						v15->height = height6;
HXDLIN( 414)						v15->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 414)						v15->data = ::Array_obj< int >::__new(v15->length);
HXDLIN( 414)						{
HXLINE( 414)							int _g128 = 0;
HXDLIN( 414)							int _g129 = v15->length;
HXDLIN( 414)							while((_g128 < _g129)){
HXLINE( 414)								_g128 = (_g128 + 1);
HXDLIN( 414)								int i38 = (_g128 - 1);
HXDLIN( 414)								v15->data->__unsafe_set(i38,0);
            							}
            						}
            					}
HXDLIN( 414)					undoImage19 = v15;
            				}
            				break;
            				case (int)4: {
HXLINE( 414)					 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 414)					 ::iterMagic::StackIntImg b54 = sInt6;
HXDLIN( 414)					{
HXLINE( 414)						b54->width = width6;
HXDLIN( 414)						b54->height = height6;
HXDLIN( 414)						b54->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 414)						b54->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 414)						{
HXLINE( 414)							int len13 = b54->length;
HXDLIN( 414)							 ::haxe::ds::GenericStack_Int d6 = b54->data;
HXDLIN( 414)							if (::hx::IsNull( d6->head )) {
HXLINE( 414)								int _g130 = 0;
HXDLIN( 414)								int _g131 = len13;
HXDLIN( 414)								while((_g130 < _g131)){
HXLINE( 414)									_g130 = (_g130 + 1);
HXDLIN( 414)									int i39 = (_g130 - 1);
HXDLIN( 414)									d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            								}
            							}
            							else {
HXLINE( 414)								int _g132 = 0;
HXDLIN( 414)								int _g133 = len13;
HXDLIN( 414)								while((_g132 < _g133)){
HXLINE( 414)									_g132 = (_g132 + 1);
HXDLIN( 414)									int i40 = (_g132 - 1);
HXDLIN( 414)									{
HXLINE( 414)										 ::haxe::ds::GenericCell_Int l6 = b54->data->head;
HXDLIN( 414)										 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN( 414)										{
HXLINE( 414)											int _g134 = 0;
HXDLIN( 414)											int _g135 = i40;
HXDLIN( 414)											while((_g134 < _g135)){
HXLINE( 414)												_g134 = (_g134 + 1);
HXDLIN( 414)												int i41 = (_g134 - 1);
HXLINE( 345)												prev6 = l6;
HXLINE( 346)												l6 = l6->next;
            											}
            										}
HXLINE( 414)										if (::hx::IsNull( prev6 )) {
HXLINE( 414)											b54->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 414)											l6 = null();
            										}
            										else {
HXLINE( 414)											prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 414)											l6 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 414)					undoImage19 = b54;
            				}
            				break;
            			}
HXDLIN( 414)			this199->image = undoImage19;
HXDLIN( 414)			this199->width = width6;
HXDLIN( 414)			this199->height = height6;
HXDLIN( 414)			this199->imageType = ( (int)(imageType6) );
HXDLIN( 414)			undoImage18 = this199;
HXDLIN( 414)			{
HXLINE( 414)				int rectLeft6 = xIter36->start;
HXDLIN( 414)				int rectTop6 = yIter36->start;
HXDLIN( 414)				int rectRight6 = xIter36->max;
HXDLIN( 414)				bool forceClear6 = false;
HXDLIN( 414)				{
HXLINE( 414)					int _g136 = rectTop6;
HXDLIN( 414)					int _g137 = yIter36->max;
HXDLIN( 414)					while((_g136 < _g137)){
HXLINE( 414)						_g136 = (_g136 + 1);
HXDLIN( 414)						int dy9 = (_g136 - 1);
HXDLIN( 414)						{
HXLINE( 414)							int _g138 = rectLeft6;
HXDLIN( 414)							int _g139 = rectRight6;
HXDLIN( 414)							while((_g138 < _g139)){
HXLINE( 414)								_g138 = (_g138 + 1);
HXDLIN( 414)								int dx9 = (_g138 - 1);
HXDLIN( 414)								::Dynamic this201 = pixelImage->image;
HXDLIN( 414)								int index30;
HXDLIN( 414)								if (pixelImage->useVirtualPos) {
HXLINE( 414)									index30 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx9) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 414)									index30 = ::Std_obj::_hx_int(( (Float)(((dy9 * pixelImage->width) + dx9)) ));
            								}
HXDLIN( 414)								int c36 = ::iterMagic::Iimg_obj::get(this201,index30);
HXDLIN( 414)								int col6;
HXDLIN( 414)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 414)									col6 = ((((((c36 >> 24) & 255) << 24) | ((c36 & 255) << 16)) | (((c36 >> 8) & 255) << 8)) | ((c36 >> 16) & 255));
            								}
            								else {
HXLINE( 414)									col6 = c36;
            								}
HXDLIN( 414)								bool _hx_tmp;
HXDLIN( 414)								if (pixelImage->useMask) {
HXLINE( 414)									_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 414)									_hx_tmp = false;
            								}
HXDLIN( 414)								if (_hx_tmp) {
HXLINE( 414)									 ::pi_xy::ImageStruct this202 = pixelImage->mask;
HXDLIN( 414)									::Dynamic this203 = this202->image;
HXDLIN( 414)									int index31;
HXDLIN( 414)									if (this202->useVirtualPos) {
HXLINE( 414)										index31 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this202->virtualY) * ( (Float)(this202->width) )) + dx9) - this202->virtualX));
            									}
            									else {
HXLINE( 414)										index31 = ::Std_obj::_hx_int(( (Float)(((dy9 * this202->width) + dx9)) ));
            									}
HXDLIN( 414)									int c37 = ::iterMagic::Iimg_obj::get(this203,index31);
HXDLIN( 414)									int v16;
HXDLIN( 414)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 414)										v16 = ((((((c37 >> 24) & 255) << 24) | ((c37 & 255) << 16)) | (((c37 >> 8) & 255) << 8)) | ((c37 >> 16) & 255));
            									}
            									else {
HXLINE( 414)										v16 = c37;
            									}
HXDLIN( 414)									int maskPixel6 = v16;
HXDLIN( 414)									int this204 = col6;
HXDLIN( 414)									if ((maskPixel6 == 0)) {
HXLINE( 414)										col6 = this204;
            									}
            									else {
HXLINE( 414)										Float m06;
HXDLIN( 414)										int this205 = ((maskPixel6 >> 24) & 255);
HXDLIN( 414)										if ((this205 == 0)) {
HXLINE( 414)											m06 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											m06 = (( (Float)(this205) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float m16;
HXDLIN( 414)										int this206 = ((maskPixel6 >> 16) & 255);
HXDLIN( 414)										if ((this206 == 0)) {
HXLINE( 414)											m16 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											m16 = (( (Float)(this206) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float m26;
HXDLIN( 414)										int this207 = ((maskPixel6 >> 8) & 255);
HXDLIN( 414)										if ((this207 == 0)) {
HXLINE( 414)											m26 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											m26 = (( (Float)(this207) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float m36;
HXDLIN( 414)										int this208 = (maskPixel6 & 255);
HXDLIN( 414)										if ((this208 == 0)) {
HXLINE( 414)											m36 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											m36 = (( (Float)(this208) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this204 >> 24) & 255)) )));
HXDLIN( 414)										int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this204 >> 16) & 255)) )));
HXDLIN( 414)										int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this204 >> 8) & 255)) )));
HXDLIN( 414)										int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this204 & 255)) )));
HXDLIN( 414)										col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 414)								if ((col6 != 0)) {
HXLINE( 414)									int x25 = (dx9 - rectLeft6);
HXDLIN( 414)									int y25 = (dy9 - rectTop6);
HXDLIN( 414)									int c38 = col6;
HXDLIN( 414)									bool _hx_tmp1;
HXDLIN( 414)									if ((((c38 >> 24) & 255) < 254)) {
HXLINE( 414)										_hx_tmp1 = undoImage18->transparent;
            									}
            									else {
HXLINE( 414)										_hx_tmp1 = false;
            									}
HXDLIN( 414)									if (_hx_tmp1) {
HXLINE( 414)										int location12;
HXDLIN( 414)										if (undoImage18->useVirtualPos) {
HXLINE( 414)											location12 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x25) - undoImage18->virtualX));
            										}
            										else {
HXLINE( 414)											location12 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage18->width) + x25)) ));
            										}
HXDLIN( 414)										int this209 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN( 414)										int this210;
HXDLIN( 414)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 414)											this210 = ((((((this209 >> 24) & 255) << 24) | ((this209 & 255) << 16)) | (((this209 >> 8) & 255) << 8)) | ((this209 >> 16) & 255));
            										}
            										else {
HXLINE( 414)											this210 = this209;
            										}
HXDLIN( 414)										Float a117;
HXDLIN( 414)										int this211 = ((this210 >> 24) & 255);
HXDLIN( 414)										if ((this211 == 0)) {
HXLINE( 414)											a117 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											a117 = (( (Float)(this211) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float r112;
HXDLIN( 414)										int this212 = ((this210 >> 16) & 255);
HXDLIN( 414)										if ((this212 == 0)) {
HXLINE( 414)											r112 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											r112 = (( (Float)(this212) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float g112;
HXDLIN( 414)										int this213 = ((this210 >> 8) & 255);
HXDLIN( 414)										if ((this213 == 0)) {
HXLINE( 414)											g112 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											g112 = (( (Float)(this213) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float b118;
HXDLIN( 414)										int this214 = (this210 & 255);
HXDLIN( 414)										if ((this214 == 0)) {
HXLINE( 414)											b118 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											b118 = (( (Float)(this214) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float a215;
HXDLIN( 414)										int this215 = ((col6 >> 24) & 255);
HXDLIN( 414)										if ((this215 == 0)) {
HXLINE( 414)											a215 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											a215 = (( (Float)(this215) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float r212;
HXDLIN( 414)										int this216 = ((col6 >> 16) & 255);
HXDLIN( 414)										if ((this216 == 0)) {
HXLINE( 414)											r212 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											r212 = (( (Float)(this216) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float g212;
HXDLIN( 414)										int this217 = ((col6 >> 8) & 255);
HXDLIN( 414)										if ((this217 == 0)) {
HXLINE( 414)											g212 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											g212 = (( (Float)(this217) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float b216;
HXDLIN( 414)										int this218 = (col6 & 255);
HXDLIN( 414)										if ((this218 == 0)) {
HXLINE( 414)											b216 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											b216 = (( (Float)(this218) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN( 414)										int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a314) + (r212 * a215))));
HXDLIN( 414)										int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a314) + (g212 * a215))));
HXDLIN( 414)										int b55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b216 * a215))));
HXDLIN( 414)										int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN( 414)										int blended12 = ((((a52 << 24) | (r32 << 16)) | (g32 << 8)) | b55);
HXDLIN( 414)										{
HXLINE( 414)											int _hx_tmp2;
HXDLIN( 414)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 414)												_hx_tmp2 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            											}
            											else {
HXLINE( 414)												_hx_tmp2 = blended12;
            											}
HXDLIN( 414)											::iterMagic::Iimg_obj::set(undoImage18->image,location12,_hx_tmp2);
            										}
            									}
            									else {
HXLINE( 414)										::Dynamic this219 = undoImage18->image;
HXDLIN( 414)										int index32;
HXDLIN( 414)										if (undoImage18->useVirtualPos) {
HXLINE( 414)											index32 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x25) - undoImage18->virtualX));
            										}
            										else {
HXLINE( 414)											index32 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage18->width) + x25)) ));
            										}
HXDLIN( 414)										int _hx_tmp3;
HXDLIN( 414)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 414)											_hx_tmp3 = ((((((c38 >> 24) & 255) << 24) | ((c38 & 255) << 16)) | (((c38 >> 8) & 255) << 8)) | ((c38 >> 16) & 255));
            										}
            										else {
HXLINE( 414)											_hx_tmp3 = c38;
            										}
HXDLIN( 414)										::iterMagic::Iimg_obj::set(this219,index32,_hx_tmp3);
            									}
            								}
            								else {
HXLINE( 414)									if (forceClear6) {
HXLINE( 414)										::Dynamic this220 = undoImage18->image;
HXDLIN( 414)										int x26 = (dx9 - rectLeft6);
HXDLIN( 414)										int y26 = (dy9 - rectTop6);
HXDLIN( 414)										int index33;
HXDLIN( 414)										if (undoImage18->useVirtualPos) {
HXLINE( 414)											index33 = ::Std_obj::_hx_int(((((( (Float)(y26) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x26) - undoImage18->virtualX));
            										}
            										else {
HXLINE( 414)											index33 = ::Std_obj::_hx_int(( (Float)(((y26 * undoImage18->width) + x26)) ));
            										}
HXDLIN( 414)										::iterMagic::Iimg_obj::set(this220,index33,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 414)		bool found6 = false;
HXDLIN( 414)		Float s6 = ((Float)0.);
HXDLIN( 414)		Float t6 = ((Float)0.);
HXDLIN( 414)		Float sxx6 = ((Float)0.);
HXDLIN( 414)		Float txx6 = ((Float)0.);
HXDLIN( 414)		{
HXLINE( 414)			int _g_min12 = xIter36->start;
HXDLIN( 414)			int _g_max12 = xIter36->max;
HXDLIN( 414)			while((_g_min12 < _g_max12)){
HXLINE( 414)				_g_min12 = (_g_min12 + 1);
HXDLIN( 414)				int x27 = (_g_min12 - 1);
HXLINE(  60)				sxx6 = (sx6 * ( (Float)(x27) ));
HXLINE(  61)				txx6 = (tx6 * ( (Float)(x27) ));
HXLINE(  62)				found6 = false;
HXLINE( 414)				{
HXLINE( 414)					int _g_min13 = yIter36->start;
HXDLIN( 414)					int _g_max13 = yIter36->max;
HXDLIN( 414)					while((_g_min13 < _g_max13)){
HXLINE( 414)						_g_min13 = (_g_min13 + 1);
HXDLIN( 414)						int y27 = (_g_min13 - 1);
HXLINE(  64)						s6 = ((s06 + sxx6) + (sy6 * ( (Float)(y27) )));
HXLINE(  65)						t6 = ((t06 + txx6) + (ty6 * ( (Float)(y27) )));
HXLINE( 414)						bool _hx_tmp4;
HXDLIN( 414)						if (!((s6 <= 0))) {
HXLINE( 414)							_hx_tmp4 = (t6 <= 0);
            						}
            						else {
HXLINE( 414)							_hx_tmp4 = true;
            						}
HXDLIN( 414)						if (_hx_tmp4) {
HXLINE( 414)							if (found6) {
HXLINE( 414)								goto _hx_goto_533;
            							}
            						}
            						else {
HXLINE( 414)							if (((s6 + t6) < A6)) {
HXLINE( 414)								{
HXLINE( 414)									int c39 = color;
HXDLIN( 414)									bool _hx_tmp5;
HXDLIN( 414)									if ((((c39 >> 24) & 255) < 254)) {
HXLINE( 414)										_hx_tmp5 = pixelImage->transparent;
            									}
            									else {
HXLINE( 414)										_hx_tmp5 = false;
            									}
HXDLIN( 414)									if (_hx_tmp5) {
HXLINE( 414)										int location13;
HXDLIN( 414)										if (pixelImage->useVirtualPos) {
HXLINE( 414)											location13 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x27) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 414)											location13 = ::Std_obj::_hx_int(( (Float)(((y27 * pixelImage->width) + x27)) ));
            										}
HXDLIN( 414)										int this221 = ::iterMagic::Iimg_obj::get(pixelImage->image,location13);
HXDLIN( 414)										int this222;
HXDLIN( 414)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 414)											this222 = ((((((this221 >> 24) & 255) << 24) | ((this221 & 255) << 16)) | (((this221 >> 8) & 255) << 8)) | ((this221 >> 16) & 255));
            										}
            										else {
HXLINE( 414)											this222 = this221;
            										}
HXDLIN( 414)										Float a118;
HXDLIN( 414)										int this223 = ((this222 >> 24) & 255);
HXDLIN( 414)										if ((this223 == 0)) {
HXLINE( 414)											a118 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											a118 = (( (Float)(this223) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float r113;
HXDLIN( 414)										int this224 = ((this222 >> 16) & 255);
HXDLIN( 414)										if ((this224 == 0)) {
HXLINE( 414)											r113 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											r113 = (( (Float)(this224) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float g113;
HXDLIN( 414)										int this225 = ((this222 >> 8) & 255);
HXDLIN( 414)										if ((this225 == 0)) {
HXLINE( 414)											g113 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											g113 = (( (Float)(this225) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float b119;
HXDLIN( 414)										int this226 = (this222 & 255);
HXDLIN( 414)										if ((this226 == 0)) {
HXLINE( 414)											b119 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											b119 = (( (Float)(this226) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float a216;
HXDLIN( 414)										int this227 = ((color >> 24) & 255);
HXDLIN( 414)										if ((this227 == 0)) {
HXLINE( 414)											a216 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											a216 = (( (Float)(this227) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float r213;
HXDLIN( 414)										int this228 = ((color >> 16) & 255);
HXDLIN( 414)										if ((this228 == 0)) {
HXLINE( 414)											r213 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											r213 = (( (Float)(this228) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float g213;
HXDLIN( 414)										int this229 = ((color >> 8) & 255);
HXDLIN( 414)										if ((this229 == 0)) {
HXLINE( 414)											g213 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											g213 = (( (Float)(this229) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float b217;
HXDLIN( 414)										int this230 = (color & 255);
HXDLIN( 414)										if ((this230 == 0)) {
HXLINE( 414)											b217 = ((Float)0.);
            										}
            										else {
HXLINE( 414)											b217 = (( (Float)(this230) ) / ( (Float)(255) ));
            										}
HXDLIN( 414)										Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN( 414)										int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a315) + (r213 * a216))));
HXDLIN( 414)										int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a315) + (g213 * a216))));
HXDLIN( 414)										int b56 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b217 * a216))));
HXDLIN( 414)										int a53 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN( 414)										int blended13 = ((((a53 << 24) | (r33 << 16)) | (g33 << 8)) | b56);
HXDLIN( 414)										{
HXLINE( 414)											int _hx_tmp6;
HXDLIN( 414)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 414)												_hx_tmp6 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            											}
            											else {
HXLINE( 414)												_hx_tmp6 = blended13;
            											}
HXDLIN( 414)											::iterMagic::Iimg_obj::set(pixelImage->image,location13,_hx_tmp6);
            										}
            									}
            									else {
HXLINE( 414)										::Dynamic this231 = pixelImage->image;
HXDLIN( 414)										int index34;
HXDLIN( 414)										if (pixelImage->useVirtualPos) {
HXLINE( 414)											index34 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x27) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 414)											index34 = ::Std_obj::_hx_int(( (Float)(((y27 * pixelImage->width) + x27)) ));
            										}
HXDLIN( 414)										int _hx_tmp7;
HXDLIN( 414)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 414)											_hx_tmp7 = ((((((c39 >> 24) & 255) << 24) | ((c39 & 255) << 16)) | (((c39 >> 8) & 255) << 8)) | ((c39 >> 16) & 255));
            										}
            										else {
HXLINE( 414)											_hx_tmp7 = c39;
            										}
HXDLIN( 414)										::iterMagic::Iimg_obj::set(this231,index34,_hx_tmp7);
            									}
            								}
HXLINE(  73)								found6 = true;
            							}
            							else {
HXLINE( 414)								if (found6) {
HXLINE( 414)									goto _hx_goto_533;
            								}
            							}
            						}
            					}
            					_hx_goto_533:;
            				}
            			}
            		}
HXDLIN( 414)		 ::pi_xy::algo::HitTri hitTri;
HXDLIN( 414)		if ((hasHit == true)) {
HXLINE( 414)			 ::pi_xy::algo::HitTri v17 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx16,by16,cx16,cy16,true);
HXDLIN( 414)			if (hasUndo6) {
HXLINE( 414)				v17->undoImage = undoImage18;
HXDLIN( 414)				v17->undoX = xIter36->start;
HXDLIN( 414)				v17->undoY = yIter36->start;
            			}
HXDLIN( 414)			hitTri = v17;
            		}
            		else {
HXLINE( 414)			hitTri = null();
            		}
HXLINE( 415)		if (hasHit) {
HXLINE( 416)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(1)->init(0,hitTri));
HXLINE( 417)			if (::hx::IsNotNull( hitQuad )) {
HXLINE( 418)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXLINE( 419)			hitArr->triArr->push(hitQuad->triBCD);
HXLINE( 420)			return hitArr;
            		}
            		else {
HXLINE( 422)			return null();
            		}
HXLINE( 415)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC12(ArrowPixel_Fields__obj,fillLineFixedArrow,return )

 ::pi_xy::algo::HitTriArray ArrowPixel_Fields__obj::fillSoftLineFixedArrow( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float arrowWidth,Float arrowHeight,Float thick,int color,::hx::Null< bool >  __o_flare,::hx::Null< bool >  __o_reverseFlare,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_hasHit){
            		bool flare = __o_flare.Default(false);
            		bool reverseFlare = __o_reverseFlare.Default(false);
            		Float soft = __o_soft.Default(((Float)40.));
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_63f36ef650858c14_433_fillSoftLineFixedArrow)
HXLINE( 434)		Float goldenRatio = ((Float)1.61803398875);
HXLINE( 435)		Float o = (qy - py);
HXLINE( 436)		Float a = (qx - px);
HXLINE( 437)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE( 438)		Float theta = ::Math_obj::atan2(o,a);
HXLINE( 439)		Float thicker;
HXDLIN( 439)		if ((arrowWidth > (thick * ((Float)1.1)))) {
HXLINE( 439)			thicker = arrowWidth;
            		}
            		else {
HXLINE( 439)			thicker = ((( (Float)(2) ) * thick) * goldenRatio);
            		}
HXLINE( 445)		Float sin = ::Math_obj::sin(theta);
HXLINE( 446)		Float cos = ::Math_obj::cos(theta);
HXLINE( 447)		Float radius = (thick / ( (Float)(2) ));
HXLINE( 448)		Float radius2 = (thicker / ( (Float)(2) ));
HXLINE( 449)		Float h2;
HXDLIN( 449)		if ((arrowHeight < (h * ((Float)1.1)))) {
HXLINE( 449)			h2 = (h - arrowHeight);
            		}
            		else {
HXLINE( 449)			h2 = (h / goldenRatio);
            		}
HXLINE( 454)		 ::pi_xy::algo::HitQuad hitQuad;
HXDLIN( 454)		if (flare) {
HXLINE( 455)			if (reverseFlare) {
HXLINE( 456)				Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 456)				Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 456)				Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 456)				Float radius21 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN( 456)				Float dx = ((Float)0.1);
HXDLIN( 456)				Float dy = radius1;
HXDLIN( 456)				Float cx = h2;
HXDLIN( 456)				Float cy = radius21;
HXDLIN( 456)				Float bx = h2;
HXDLIN( 456)				Float by = -(radius21);
HXDLIN( 456)				Float ax = ((Float)0.1);
HXDLIN( 456)				Float ay = -(radius1);
HXDLIN( 456)				Float temp = ((Float)0.);
HXLINE( 288)				temp = (px + ((ax * cos1) - (ay * sin1)));
HXLINE( 289)				ay = (py + ((ay * cos1) + (ax * sin1)));
HXLINE( 290)				ax = temp;
HXLINE( 292)				temp = (px + ((bx * cos1) - (by * sin1)));
HXLINE( 293)				by = (py + ((by * cos1) + (bx * sin1)));
HXLINE( 294)				bx = temp;
HXLINE( 296)				temp = (px + ((cx * cos1) - (cy * sin1)));
HXLINE( 297)				cy = (py + ((cy * cos1) + (cx * sin1)));
HXLINE( 298)				cx = temp;
HXLINE( 300)				temp = (px + ((dx * cos1) - (dy * sin1)));
HXLINE( 301)				dy = (py + ((dy * cos1) + (dx * sin1)));
HXLINE( 302)				dx = temp;
HXLINE( 456)				Float ex = ((((ax + bx) + cx) + dx) / ( (Float)(4) ));
HXDLIN( 456)				Float ey = ((((ay + by) + cy) + dy) / ( (Float)(4) ));
HXDLIN( 456)				bool hasUndo = false;
HXDLIN( 456)				int aA = ((color >> 24) & 255);
HXDLIN( 456)				int rA = ((color >> 16) & 255);
HXDLIN( 456)				int gA = ((color >> 8) & 255);
HXDLIN( 456)				int bA = (color & 255);
HXDLIN( 456)				Float bcx = (ax - bx);
HXDLIN( 456)				Float bcy = (ay - by);
HXDLIN( 456)				Float acx = (ex - bx);
HXDLIN( 456)				Float acy = (ey - by);
HXDLIN( 456)				Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 456)				Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 456)				Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 456)				Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 456)				 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 456)				if ((ex > ax)) {
HXLINE( 456)					if ((ex > bx)) {
HXLINE( 456)						int min;
HXDLIN( 456)						if ((ax > bx)) {
HXLINE( 456)							min = ::Math_obj::floor(bx);
            						}
            						else {
HXLINE( 456)							min = ::Math_obj::floor(ax);
            						}
HXDLIN( 456)						int ii_min = min;
HXDLIN( 456)						int ii_max = ::Math_obj::ceil(ex);
HXDLIN( 456)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            					}
            					else {
HXLINE( 456)						int ii_min1 = ::Math_obj::floor(ax);
HXDLIN( 456)						int ii_max1 = ::Math_obj::ceil(bx);
HXDLIN( 456)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            					}
            				}
            				else {
HXLINE( 456)					if ((ax > bx)) {
HXLINE( 456)						int min1;
HXDLIN( 456)						if ((ex > bx)) {
HXLINE( 456)							min1 = ::Math_obj::floor(bx);
            						}
            						else {
HXLINE( 456)							min1 = ::Math_obj::ceil(ex);
            						}
HXDLIN( 456)						int ii_min2 = min1;
HXDLIN( 456)						int ii_max2 = ::Math_obj::ceil(ax);
HXDLIN( 456)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            					}
            					else {
HXLINE( 456)						int ii_min3 = ::Math_obj::floor(ex);
HXDLIN( 456)						int ii_max3 = ::Math_obj::ceil(bx);
HXDLIN( 456)						xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            					}
            				}
HXDLIN( 456)				 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 456)				if ((ey > ay)) {
HXLINE( 456)					if ((ey > by)) {
HXLINE( 456)						int min2;
HXDLIN( 456)						if ((ay > by)) {
HXLINE( 456)							min2 = ::Math_obj::floor(by);
            						}
            						else {
HXLINE( 456)							min2 = ::Math_obj::floor(ay);
            						}
HXDLIN( 456)						int ii_min4 = min2;
HXDLIN( 456)						int ii_max4 = ::Math_obj::ceil(ey);
HXDLIN( 456)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            					}
            					else {
HXLINE( 456)						int ii_min5 = ::Math_obj::floor(ay);
HXDLIN( 456)						int ii_max5 = ::Math_obj::ceil(by);
HXDLIN( 456)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            					}
            				}
            				else {
HXLINE( 456)					if ((ay > by)) {
HXLINE( 456)						int min3;
HXDLIN( 456)						if ((ey > by)) {
HXLINE( 456)							min3 = ::Math_obj::floor(by);
            						}
            						else {
HXLINE( 456)							min3 = ::Math_obj::ceil(ey);
            						}
HXDLIN( 456)						int ii_min6 = min3;
HXDLIN( 456)						int ii_max6 = ::Math_obj::ceil(ay);
HXDLIN( 456)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            					}
            					else {
HXLINE( 456)						int ii_min7 = ::Math_obj::floor(ey);
HXDLIN( 456)						int ii_max7 = ::Math_obj::ceil(by);
HXDLIN( 456)						yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            					}
            				}
HXDLIN( 456)				 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 456)				if (hasUndo) {
HXLINE( 456)					int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 456)					int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 456)					 ::Dynamic imageType = null();
HXDLIN( 456)					 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 456)					if (::hx::IsNull( imageType )) {
HXLINE(  54)						imageType = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 456)					::Dynamic undoImage1;
HXDLIN( 456)					switch((int)(( (int)(imageType) ))){
            						case (int)0: {
HXLINE( 456)							 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::BytesImg b = byt;
HXDLIN( 456)							{
HXLINE( 456)								b->width = width;
HXDLIN( 456)								b->height = height;
HXDLIN( 456)								b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 456)								b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 456)								{
HXLINE( 456)									int len = b->length;
HXDLIN( 456)									int w = 0;
HXDLIN( 456)									{
HXLINE( 456)										int _g = 0;
HXDLIN( 456)										int _g1 = b->height;
HXDLIN( 456)										while((_g < _g1)){
HXLINE( 456)											_g = (_g + 1);
HXDLIN( 456)											int y = (_g - 1);
HXDLIN( 456)											{
HXLINE( 456)												int _g2 = 0;
HXDLIN( 456)												int _g3 = b->width;
HXDLIN( 456)												while((_g2 < _g3)){
HXLINE( 456)													_g2 = (_g2 + 1);
HXDLIN( 456)													int x = (_g2 - 1);
HXDLIN( 456)													{
HXLINE( 456)														w = (w + 1);
HXDLIN( 456)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 456)													{
HXLINE( 456)														w = (w + 1);
HXDLIN( 456)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 456)													{
HXLINE( 456)														w = (w + 1);
HXDLIN( 456)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 456)													{
HXLINE( 456)														w = (w + 1);
HXDLIN( 456)														b->data->b[(w - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 456)							undoImage1 = b;
            						}
            						break;
            						case (int)1: {
HXLINE( 456)							 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 456)							{
HXLINE( 456)								a1->width = width;
HXDLIN( 456)								a1->height = height;
HXDLIN( 456)								a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 456)								a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 456)								{
HXLINE( 456)									int _g4 = 0;
HXDLIN( 456)									int _g5 = a1->length;
HXDLIN( 456)									while((_g4 < _g5)){
HXLINE( 456)										_g4 = (_g4 + 1);
HXDLIN( 456)										int i = (_g4 - 1);
HXDLIN( 456)										a1->data[i] = 0;
            									}
            								}
            							}
HXDLIN( 456)							undoImage1 = a1;
            						}
            						break;
            						case (int)2: {
HXLINE( 456)							 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 456)							{
HXLINE( 456)								b1->width = width;
HXDLIN( 456)								b1->height = height;
HXDLIN( 456)								b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 456)								int size = (b1->length * 4);
HXDLIN( 456)								b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 456)								{
HXLINE( 456)									int _g6 = 0;
HXDLIN( 456)									int _g7 = b1->length;
HXDLIN( 456)									while((_g6 < _g7)){
HXLINE( 456)										_g6 = (_g6 + 1);
HXDLIN( 456)										int i1 = (_g6 - 1);
HXDLIN( 456)										{
HXLINE( 456)											 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN( 456)											bool undoImage2;
HXDLIN( 456)											if ((i1 >= 0)) {
HXLINE( 456)												undoImage2 = (i1 < (this2->byteLength >> 2));
            											}
            											else {
HXLINE( 456)												undoImage2 = false;
            											}
HXDLIN( 456)											if (undoImage2) {
HXLINE( 456)												 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 456)												int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 456)												_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 456)												_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 456)												_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 456)												_this->b[(pos + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 456)							undoImage1 = b1;
            						}
            						break;
            						case (int)3: {
HXLINE( 456)							 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::VecIntImg v = vec;
HXDLIN( 456)							{
HXLINE( 456)								v->width = width;
HXDLIN( 456)								v->height = height;
HXDLIN( 456)								v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 456)								v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 456)								{
HXLINE( 456)									int _g8 = 0;
HXDLIN( 456)									int _g9 = v->length;
HXDLIN( 456)									while((_g8 < _g9)){
HXLINE( 456)										_g8 = (_g8 + 1);
HXDLIN( 456)										int i2 = (_g8 - 1);
HXDLIN( 456)										v->data->__unsafe_set(i2,0);
            									}
            								}
            							}
HXDLIN( 456)							undoImage1 = v;
            						}
            						break;
            						case (int)4: {
HXLINE( 456)							 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 456)							{
HXLINE( 456)								b2->width = width;
HXDLIN( 456)								b2->height = height;
HXDLIN( 456)								b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 456)								b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 456)								{
HXLINE( 456)									int len1 = b2->length;
HXDLIN( 456)									 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 456)									if (::hx::IsNull( d->head )) {
HXLINE( 456)										int _g10 = 0;
HXDLIN( 456)										int _g11 = len1;
HXDLIN( 456)										while((_g10 < _g11)){
HXLINE( 456)											_g10 = (_g10 + 1);
HXDLIN( 456)											int i3 = (_g10 - 1);
HXDLIN( 456)											d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            										}
            									}
            									else {
HXLINE( 456)										int _g12 = 0;
HXDLIN( 456)										int _g13 = len1;
HXDLIN( 456)										while((_g12 < _g13)){
HXLINE( 456)											_g12 = (_g12 + 1);
HXDLIN( 456)											int i4 = (_g12 - 1);
HXDLIN( 456)											{
HXLINE( 456)												 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 456)												 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 456)												{
HXLINE( 456)													int _g14 = 0;
HXDLIN( 456)													int _g15 = i4;
HXDLIN( 456)													while((_g14 < _g15)){
HXLINE( 456)														_g14 = (_g14 + 1);
HXDLIN( 456)														int i5 = (_g14 - 1);
HXLINE( 345)														prev = l;
HXLINE( 346)														l = l->next;
            													}
            												}
HXLINE( 456)												if (::hx::IsNull( prev )) {
HXLINE( 456)													b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 456)													l = null();
            												}
            												else {
HXLINE( 456)													prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 456)													l = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 456)							undoImage1 = b2;
            						}
            						break;
            					}
HXDLIN( 456)					this1->image = undoImage1;
HXDLIN( 456)					this1->width = width;
HXDLIN( 456)					this1->height = height;
HXDLIN( 456)					this1->imageType = ( (int)(imageType) );
HXDLIN( 456)					undoImage = this1;
HXDLIN( 456)					{
HXLINE( 456)						int rectLeft = xIter3->start;
HXDLIN( 456)						int rectTop = yIter3->start;
HXDLIN( 456)						int rectRight = xIter3->max;
HXDLIN( 456)						bool forceClear = false;
HXDLIN( 456)						{
HXLINE( 456)							int _g16 = rectTop;
HXDLIN( 456)							int _g17 = yIter3->max;
HXDLIN( 456)							while((_g16 < _g17)){
HXLINE( 456)								_g16 = (_g16 + 1);
HXDLIN( 456)								int dy1 = (_g16 - 1);
HXDLIN( 456)								{
HXLINE( 456)									int _g18 = rectLeft;
HXDLIN( 456)									int _g19 = rectRight;
HXDLIN( 456)									while((_g18 < _g19)){
HXLINE( 456)										_g18 = (_g18 + 1);
HXDLIN( 456)										int dx1 = (_g18 - 1);
HXDLIN( 456)										::Dynamic this3 = pixelImage->image;
HXDLIN( 456)										int index;
HXDLIN( 456)										if (pixelImage->useVirtualPos) {
HXLINE( 456)											index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 456)											index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            										}
HXDLIN( 456)										int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN( 456)										int col;
HXDLIN( 456)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)											col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 456)											col = c;
            										}
HXDLIN( 456)										bool hitQuad1;
HXDLIN( 456)										if (pixelImage->useMask) {
HXLINE( 456)											hitQuad1 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 456)											hitQuad1 = false;
            										}
HXDLIN( 456)										if (hitQuad1) {
HXLINE( 456)											 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN( 456)											::Dynamic this5 = this4->image;
HXDLIN( 456)											int index1;
HXDLIN( 456)											if (this4->useVirtualPos) {
HXLINE( 456)												index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            											}
            											else {
HXLINE( 456)												index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            											}
HXDLIN( 456)											int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN( 456)											int v1;
HXDLIN( 456)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)												v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            											}
            											else {
HXLINE( 456)												v1 = c1;
            											}
HXDLIN( 456)											int maskPixel = v1;
HXDLIN( 456)											int this6 = col;
HXDLIN( 456)											if ((maskPixel == 0)) {
HXLINE( 456)												col = this6;
            											}
            											else {
HXLINE( 456)												Float m0;
HXDLIN( 456)												int this7 = ((maskPixel >> 24) & 255);
HXDLIN( 456)												if ((this7 == 0)) {
HXLINE( 456)													m0 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float m1;
HXDLIN( 456)												int this8 = ((maskPixel >> 16) & 255);
HXDLIN( 456)												if ((this8 == 0)) {
HXLINE( 456)													m1 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float m2;
HXDLIN( 456)												int this9 = ((maskPixel >> 8) & 255);
HXDLIN( 456)												if ((this9 == 0)) {
HXLINE( 456)													m2 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float m3;
HXDLIN( 456)												int this10 = (maskPixel & 255);
HXDLIN( 456)												if ((this10 == 0)) {
HXLINE( 456)													m3 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 456)												int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 456)												int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 456)												int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 456)												col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 456)										if ((col != 0)) {
HXLINE( 456)											int x1 = (dx1 - rectLeft);
HXDLIN( 456)											int y1 = (dy1 - rectTop);
HXDLIN( 456)											int c2 = col;
HXDLIN( 456)											bool hitQuad2;
HXDLIN( 456)											if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 456)												hitQuad2 = undoImage->transparent;
            											}
            											else {
HXLINE( 456)												hitQuad2 = false;
            											}
HXDLIN( 456)											if (hitQuad2) {
HXLINE( 456)												int location;
HXDLIN( 456)												if (undoImage->useVirtualPos) {
HXLINE( 456)													location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            												}
            												else {
HXLINE( 456)													location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            												}
HXDLIN( 456)												int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 456)												int this12;
HXDLIN( 456)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)													this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            												}
            												else {
HXLINE( 456)													this12 = this11;
            												}
HXDLIN( 456)												Float a11;
HXDLIN( 456)												int this13 = ((this12 >> 24) & 255);
HXDLIN( 456)												if ((this13 == 0)) {
HXLINE( 456)													a11 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float r1;
HXDLIN( 456)												int this14 = ((this12 >> 16) & 255);
HXDLIN( 456)												if ((this14 == 0)) {
HXLINE( 456)													r1 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float g1;
HXDLIN( 456)												int this15 = ((this12 >> 8) & 255);
HXDLIN( 456)												if ((this15 == 0)) {
HXLINE( 456)													g1 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float b11;
HXDLIN( 456)												int this16 = (this12 & 255);
HXDLIN( 456)												if ((this16 == 0)) {
HXLINE( 456)													b11 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float a2;
HXDLIN( 456)												int this17 = ((col >> 24) & 255);
HXDLIN( 456)												if ((this17 == 0)) {
HXLINE( 456)													a2 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float r2;
HXDLIN( 456)												int this18 = ((col >> 16) & 255);
HXDLIN( 456)												if ((this18 == 0)) {
HXLINE( 456)													r2 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float g2;
HXDLIN( 456)												int this19 = ((col >> 8) & 255);
HXDLIN( 456)												if ((this19 == 0)) {
HXLINE( 456)													g2 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float b21;
HXDLIN( 456)												int this20 = (col & 255);
HXDLIN( 456)												if ((this20 == 0)) {
HXLINE( 456)													b21 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 456)												int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 456)												int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 456)												int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 456)												int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 456)												int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 456)												{
HXLINE( 456)													int hitQuad3;
HXDLIN( 456)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)														hitQuad3 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE( 456)														hitQuad3 = blended;
            													}
HXDLIN( 456)													::iterMagic::Iimg_obj::set(undoImage->image,location,hitQuad3);
            												}
            											}
            											else {
HXLINE( 456)												::Dynamic this21 = undoImage->image;
HXDLIN( 456)												int index2;
HXDLIN( 456)												if (undoImage->useVirtualPos) {
HXLINE( 456)													index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            												}
            												else {
HXLINE( 456)													index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            												}
HXDLIN( 456)												int hitQuad4;
HXDLIN( 456)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)													hitQuad4 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            												}
            												else {
HXLINE( 456)													hitQuad4 = c2;
            												}
HXDLIN( 456)												::iterMagic::Iimg_obj::set(this21,index2,hitQuad4);
            											}
            										}
            										else {
HXLINE( 456)											if (forceClear) {
HXLINE( 456)												::Dynamic this22 = undoImage->image;
HXDLIN( 456)												int x2 = (dx1 - rectLeft);
HXDLIN( 456)												int y2 = (dy1 - rectTop);
HXDLIN( 456)												int index3;
HXDLIN( 456)												if (undoImage->useVirtualPos) {
HXLINE( 456)													index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            												}
            												else {
HXLINE( 456)													index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            												}
HXDLIN( 456)												::iterMagic::Iimg_obj::set(this22,index3,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 456)				bool found = false;
HXDLIN( 456)				{
HXLINE( 456)					int _g_min = xIter3->start;
HXDLIN( 456)					int _g_max = xIter3->max;
HXDLIN( 456)					while((_g_min < _g_max)){
HXLINE( 456)						_g_min = (_g_min + 1);
HXDLIN( 456)						int px1 = (_g_min - 1);
HXDLIN( 456)						Float pcx = (( (Float)(px1) ) - bx);
HXLINE( 619)						found = false;
HXLINE( 456)						{
HXLINE( 456)							int _g_min1 = yIter3->start;
HXDLIN( 456)							int _g_max1 = yIter3->max;
HXDLIN( 456)							while((_g_min1 < _g_max1)){
HXLINE( 456)								_g_min1 = (_g_min1 + 1);
HXDLIN( 456)								int py1 = (_g_min1 - 1);
HXDLIN( 456)								Float pcy = (( (Float)(py1) ) - by);
HXDLIN( 456)								Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 456)								Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 456)								Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 456)								Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 456)								Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 456)								bool hitQuad5;
HXDLIN( 456)								bool hitQuad6;
HXDLIN( 456)								if ((ratioA >= 0)) {
HXLINE( 456)									hitQuad6 = (ratioB >= 0);
            								}
            								else {
HXLINE( 456)									hitQuad6 = false;
            								}
HXDLIN( 456)								if (hitQuad6) {
HXLINE( 456)									hitQuad5 = (ratioC >= 0);
            								}
            								else {
HXLINE( 456)									hitQuad5 = false;
            								}
HXDLIN( 456)								if (hitQuad5) {
HXLINE( 456)									int i6 = ::Std_obj::_hx_int((( (Float)(aA) ) * (soft * ratioB)));
HXDLIN( 456)									if ((i6 > 255)) {
HXLINE(  24)										i6 = 255;
            									}
HXLINE( 456)									if ((i6 < 0)) {
HXLINE(  25)										i6 = 0;
            									}
HXLINE( 456)									int a5 = i6;
HXDLIN( 456)									int i7 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 456)									if ((i7 > 255)) {
HXLINE(  24)										i7 = 255;
            									}
HXLINE( 456)									if ((i7 < 0)) {
HXLINE(  25)										i7 = 0;
            									}
HXLINE( 456)									int r3 = i7;
HXDLIN( 456)									int i8 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 456)									if ((i8 > 255)) {
HXLINE(  24)										i8 = 255;
            									}
HXLINE( 456)									if ((i8 < 0)) {
HXLINE(  25)										i8 = 0;
            									}
HXLINE( 456)									int g3 = i8;
HXDLIN( 456)									int i9 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 456)									if ((i9 > 255)) {
HXLINE(  24)										i9 = 255;
            									}
HXLINE( 456)									if ((i9 < 0)) {
HXLINE(  25)										i9 = 0;
            									}
HXLINE( 456)									int b4 = i9;
HXDLIN( 456)									{
HXLINE( 456)										int location1;
HXDLIN( 456)										if (pixelImage->useVirtualPos) {
HXLINE( 456)											location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 456)											location1 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            										}
HXDLIN( 456)										bool hitQuad7;
HXDLIN( 456)										if (pixelImage->transparent) {
HXLINE( 456)											hitQuad7 = (a5 < 254);
            										}
            										else {
HXLINE( 456)											hitQuad7 = false;
            										}
HXDLIN( 456)										if (hitQuad7) {
HXLINE( 456)											int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN( 456)											int old;
HXDLIN( 456)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)												old = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            											}
            											else {
HXLINE( 456)												old = this23;
            											}
HXDLIN( 456)											int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 456)											Float a12;
HXDLIN( 456)											int this24 = ((old >> 24) & 255);
HXDLIN( 456)											if ((this24 == 0)) {
HXLINE( 456)												a12 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												a12 = (( (Float)(this24) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float r11;
HXDLIN( 456)											int this25 = ((old >> 16) & 255);
HXDLIN( 456)											if ((this25 == 0)) {
HXLINE( 456)												r11 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												r11 = (( (Float)(this25) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float g11;
HXDLIN( 456)											int this26 = ((old >> 8) & 255);
HXDLIN( 456)											if ((this26 == 0)) {
HXLINE( 456)												g11 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												g11 = (( (Float)(this26) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float b12;
HXDLIN( 456)											int this27 = (old & 255);
HXDLIN( 456)											if ((this27 == 0)) {
HXLINE( 456)												b12 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												b12 = (( (Float)(this27) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float a21;
HXDLIN( 456)											int this28 = ((rhs >> 24) & 255);
HXDLIN( 456)											if ((this28 == 0)) {
HXLINE( 456)												a21 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												a21 = (( (Float)(this28) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float r21;
HXDLIN( 456)											int this29 = ((rhs >> 16) & 255);
HXDLIN( 456)											if ((this29 == 0)) {
HXLINE( 456)												r21 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												r21 = (( (Float)(this29) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float g21;
HXDLIN( 456)											int this30 = ((rhs >> 8) & 255);
HXDLIN( 456)											if ((this30 == 0)) {
HXLINE( 456)												g21 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												g21 = (( (Float)(this30) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float b22;
HXDLIN( 456)											int this31 = (rhs & 255);
HXDLIN( 456)											if ((this31 == 0)) {
HXLINE( 456)												b22 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												b22 = (( (Float)(this31) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 456)											int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 456)											int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 456)											int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 456)											int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 456)											int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 456)											{
HXLINE( 456)												int hitQuad8;
HXDLIN( 456)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)													hitQuad8 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            												}
            												else {
HXLINE( 456)													hitQuad8 = blended1;
            												}
HXDLIN( 456)												::iterMagic::Iimg_obj::set(pixelImage->image,location1,hitQuad8);
            											}
            										}
            										else {
HXLINE( 456)											int value;
HXDLIN( 456)											if (pixelImage->isLittle) {
HXLINE( 456)												value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            											}
            											else {
HXLINE( 456)												value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            											}
HXDLIN( 456)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,value);
            										}
            									}
HXLINE( 633)									found = true;
            								}
            								else {
HXLINE( 456)									if (found) {
HXLINE( 456)										goto _hx_goto_546;
            									}
            								}
            							}
            							_hx_goto_546:;
            						}
            					}
            				}
HXDLIN( 456)				 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN( 456)				 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN( 456)				int v_undoY;
HXDLIN( 456)				int v_undoX;
HXDLIN( 456)				Float v_ty;
HXDLIN( 456)				Float v_tx;
HXDLIN( 456)				Float v_t0;
HXDLIN( 456)				Float v_sy;
HXDLIN( 456)				Float v_sx;
HXDLIN( 456)				Float v_s0;
HXDLIN( 456)				Float v_A;
HXDLIN( 456)				Float ax1 = ex;
HXDLIN( 456)				Float ay1 = ey;
HXDLIN( 456)				 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN( 456)				Float bx1 = ax;
HXDLIN( 456)				Float by1 = ay;
HXDLIN( 456)				Float cx1 = bx;
HXDLIN( 456)				Float cy1 = by;
HXDLIN( 456)				bool adjustWinding = (((((ax1 * by1) - (bx1 * ay1)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay1) - (ax1 * cy1))) > 0);
HXDLIN( 456)				if (!(adjustWinding)) {
HXLINE( 456)					Float bx_ = bx1;
HXDLIN( 456)					Float by_ = by1;
HXLINE(  24)					bx1 = cx1;
HXLINE(  25)					by1 = cy1;
HXLINE(  26)					cx1 = bx_;
HXLINE(  27)					cy1 = by_;
            				}
HXLINE( 456)				Float v_ax = ax1;
HXDLIN( 456)				Float v_ay = ay1;
HXDLIN( 456)				Float v_bx = bx1;
HXDLIN( 456)				Float v_by = by1;
HXDLIN( 456)				Float v_cx = cx1;
HXDLIN( 456)				Float v_cy = cy1;
HXDLIN( 456)				bool v_preCalculated = true;
HXDLIN( 456)				{
HXLINE( 456)					v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN( 456)					v_sx = (v_cy - v_ay);
HXDLIN( 456)					v_sy = (v_ax - v_cx);
HXDLIN( 456)					v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN( 456)					v_tx = (v_ay - v_by);
HXDLIN( 456)					v_ty = (v_bx - v_ax);
HXDLIN( 456)					v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN( 456)					Float a7 = v_ax;
HXDLIN( 456)					Float b6 = v_bx;
HXDLIN( 456)					Float c3 = v_cx;
HXDLIN( 456)					if ((a7 > b6)) {
HXLINE( 456)						if ((a7 > c3)) {
HXLINE( 456)							int min4;
HXDLIN( 456)							if ((b6 > c3)) {
HXLINE( 456)								min4 = ::Math_obj::floor(c3);
            							}
            							else {
HXLINE( 456)								min4 = ::Math_obj::floor(b6);
            							}
HXDLIN( 456)							int ii_min8 = min4;
HXDLIN( 456)							int ii_max8 = ::Math_obj::ceil(a7);
HXDLIN( 456)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            						}
            						else {
HXLINE( 456)							int ii_min9 = ::Math_obj::floor(b6);
HXDLIN( 456)							int ii_max9 = ::Math_obj::ceil(c3);
HXDLIN( 456)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            						}
            					}
            					else {
HXLINE( 456)						if ((b6 > c3)) {
HXLINE( 456)							int min5;
HXDLIN( 456)							if ((a7 > c3)) {
HXLINE( 456)								min5 = ::Math_obj::floor(c3);
            							}
            							else {
HXLINE( 456)								min5 = ::Math_obj::ceil(a7);
            							}
HXDLIN( 456)							int ii_min10 = min5;
HXDLIN( 456)							int ii_max10 = ::Math_obj::ceil(b6);
HXDLIN( 456)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            						}
            						else {
HXLINE( 456)							int ii_min11 = ::Math_obj::floor(a7);
HXDLIN( 456)							int ii_max11 = ::Math_obj::ceil(c3);
HXDLIN( 456)							v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            						}
            					}
HXDLIN( 456)					Float a8 = v_ay;
HXDLIN( 456)					Float b7 = v_by;
HXDLIN( 456)					Float c4 = v_cy;
HXDLIN( 456)					if ((a8 > b7)) {
HXLINE( 456)						if ((a8 > c4)) {
HXLINE( 456)							int min6;
HXDLIN( 456)							if ((b7 > c4)) {
HXLINE( 456)								min6 = ::Math_obj::floor(c4);
            							}
            							else {
HXLINE( 456)								min6 = ::Math_obj::floor(b7);
            							}
HXDLIN( 456)							int ii_min12 = min6;
HXDLIN( 456)							int ii_max12 = ::Math_obj::ceil(a8);
HXDLIN( 456)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            						}
            						else {
HXLINE( 456)							int ii_min13 = ::Math_obj::floor(b7);
HXDLIN( 456)							int ii_max13 = ::Math_obj::ceil(c4);
HXDLIN( 456)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            						}
            					}
            					else {
HXLINE( 456)						if ((b7 > c4)) {
HXLINE( 456)							int min7;
HXDLIN( 456)							if ((a8 > c4)) {
HXLINE( 456)								min7 = ::Math_obj::floor(c4);
            							}
            							else {
HXLINE( 456)								min7 = ::Math_obj::ceil(a8);
            							}
HXDLIN( 456)							int ii_min14 = min7;
HXDLIN( 456)							int ii_max14 = ::Math_obj::ceil(b7);
HXDLIN( 456)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            						}
            						else {
HXLINE( 456)							int ii_min15 = ::Math_obj::floor(a8);
HXDLIN( 456)							int ii_max15 = ::Math_obj::ceil(c4);
HXDLIN( 456)							v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            						}
            					}
            				}
HXDLIN( 456)				if (hasUndo) {
HXLINE( 456)					v_undoImage = undoImage;
HXDLIN( 456)					v_undoX = xIter3->start;
HXDLIN( 456)					v_undoY = yIter3->start;
            				}
HXDLIN( 456)				{
HXLINE( 456)					Float bx2 = bx;
HXDLIN( 456)					Float by2 = by;
HXDLIN( 456)					Float cx2 = cx;
HXDLIN( 456)					Float cy2 = cy;
HXDLIN( 456)					bool hasUndo1 = false;
HXDLIN( 456)					bool adjustWinding1 = (((((ex * by2) - (bx2 * ey)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ey) - (ex * cy2))) > 0);
HXDLIN( 456)					if (!(adjustWinding1)) {
HXLINE( 456)						Float bx_1 = bx2;
HXDLIN( 456)						Float by_1 = by2;
HXLINE(  25)						bx2 = cx2;
HXLINE(  26)						by2 = cy2;
HXLINE(  27)						cx2 = bx_1;
HXLINE(  28)						cy2 = by_1;
            					}
HXLINE( 456)					{
HXLINE( 456)						Float s0 = ((ey * cx2) - (ex * cy2));
HXDLIN( 456)						Float sx = (cy2 - ey);
HXDLIN( 456)						Float sy = (ex - cx2);
HXDLIN( 456)						Float t0 = ((ex * by2) - (ey * bx2));
HXDLIN( 456)						Float tx = (ey - by2);
HXDLIN( 456)						Float ty = (bx2 - ex);
HXDLIN( 456)						Float A = ((((-(by2) * cx2) + (ey * (-(bx2) + cx2))) + (ex * (by2 - cy2))) + (bx2 * cy2));
HXDLIN( 456)						 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 456)						if ((ex > bx2)) {
HXLINE( 456)							if ((ex > cx2)) {
HXLINE( 456)								int min8;
HXDLIN( 456)								if ((bx2 > cx2)) {
HXLINE( 456)									min8 = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE( 456)									min8 = ::Math_obj::floor(bx2);
            								}
HXDLIN( 456)								int ii_min16 = min8;
HXDLIN( 456)								int ii_max16 = ::Math_obj::ceil(ex);
HXDLIN( 456)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            							}
            							else {
HXLINE( 456)								int ii_min17 = ::Math_obj::floor(bx2);
HXDLIN( 456)								int ii_max17 = ::Math_obj::ceil(cx2);
HXDLIN( 456)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            							}
            						}
            						else {
HXLINE( 456)							if ((bx2 > cx2)) {
HXLINE( 456)								int min9;
HXDLIN( 456)								if ((ex > cx2)) {
HXLINE( 456)									min9 = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE( 456)									min9 = ::Math_obj::ceil(ex);
            								}
HXDLIN( 456)								int ii_min18 = min9;
HXDLIN( 456)								int ii_max18 = ::Math_obj::ceil(bx2);
HXDLIN( 456)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            							}
            							else {
HXLINE( 456)								int ii_min19 = ::Math_obj::floor(ex);
HXDLIN( 456)								int ii_max19 = ::Math_obj::ceil(cx2);
HXDLIN( 456)								xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            							}
            						}
HXDLIN( 456)						 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 456)						if ((ey > by2)) {
HXLINE( 456)							if ((ey > cy2)) {
HXLINE( 456)								int min10;
HXDLIN( 456)								if ((by2 > cy2)) {
HXLINE( 456)									min10 = ::Math_obj::floor(cy2);
            								}
            								else {
HXLINE( 456)									min10 = ::Math_obj::floor(by2);
            								}
HXDLIN( 456)								int ii_min20 = min10;
HXDLIN( 456)								int ii_max20 = ::Math_obj::ceil(ey);
HXDLIN( 456)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            							}
            							else {
HXLINE( 456)								int ii_min21 = ::Math_obj::floor(by2);
HXDLIN( 456)								int ii_max21 = ::Math_obj::ceil(cy2);
HXDLIN( 456)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            							}
            						}
            						else {
HXLINE( 456)							if ((by2 > cy2)) {
HXLINE( 456)								int min11;
HXDLIN( 456)								if ((ey > cy2)) {
HXLINE( 456)									min11 = ::Math_obj::floor(cy2);
            								}
            								else {
HXLINE( 456)									min11 = ::Math_obj::ceil(ey);
            								}
HXDLIN( 456)								int ii_min22 = min11;
HXDLIN( 456)								int ii_max22 = ::Math_obj::ceil(by2);
HXDLIN( 456)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            							}
            							else {
HXLINE( 456)								int ii_min23 = ::Math_obj::floor(ey);
HXDLIN( 456)								int ii_max23 = ::Math_obj::ceil(cy2);
HXDLIN( 456)								yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            							}
            						}
HXDLIN( 456)						 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 456)						if (hasUndo1) {
HXLINE( 456)							int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 456)							int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 456)							 ::Dynamic imageType1 = null();
HXDLIN( 456)							 ::pi_xy::ImageStruct this32 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 456)							if (::hx::IsNull( imageType1 )) {
HXLINE(  54)								imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE( 456)							::Dynamic undoImage4;
HXDLIN( 456)							switch((int)(( (int)(imageType1) ))){
            								case (int)0: {
HXLINE( 456)									 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 456)									 ::iterMagic::BytesImg b8 = byt1;
HXDLIN( 456)									{
HXLINE( 456)										b8->width = width1;
HXDLIN( 456)										b8->height = height1;
HXDLIN( 456)										b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 456)										b8->data = ::haxe::io::Bytes_obj::alloc((b8->length * 4));
HXDLIN( 456)										{
HXLINE( 456)											int len2 = b8->length;
HXDLIN( 456)											int w1 = 0;
HXDLIN( 456)											{
HXLINE( 456)												int _g20 = 0;
HXDLIN( 456)												int _g21 = b8->height;
HXDLIN( 456)												while((_g20 < _g21)){
HXLINE( 456)													_g20 = (_g20 + 1);
HXDLIN( 456)													int y3 = (_g20 - 1);
HXDLIN( 456)													{
HXLINE( 456)														int _g22 = 0;
HXDLIN( 456)														int _g23 = b8->width;
HXDLIN( 456)														while((_g22 < _g23)){
HXLINE( 456)															_g22 = (_g22 + 1);
HXDLIN( 456)															int x3 = (_g22 - 1);
HXDLIN( 456)															{
HXLINE( 456)																w1 = (w1 + 1);
HXDLIN( 456)																b8->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 456)															{
HXLINE( 456)																w1 = (w1 + 1);
HXDLIN( 456)																b8->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 456)															{
HXLINE( 456)																w1 = (w1 + 1);
HXDLIN( 456)																b8->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 456)															{
HXLINE( 456)																w1 = (w1 + 1);
HXDLIN( 456)																b8->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 456)									undoImage4 = b8;
            								}
            								break;
            								case (int)1: {
HXLINE( 456)									 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 456)									 ::iterMagic::ArrIntImg a9 = arrI1;
HXDLIN( 456)									{
HXLINE( 456)										a9->width = width1;
HXDLIN( 456)										a9->height = height1;
HXDLIN( 456)										a9->data = ::Array_obj< int >::__new(0);
HXDLIN( 456)										a9->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 456)										{
HXLINE( 456)											int _g24 = 0;
HXDLIN( 456)											int _g25 = a9->length;
HXDLIN( 456)											while((_g24 < _g25)){
HXLINE( 456)												_g24 = (_g24 + 1);
HXDLIN( 456)												int i10 = (_g24 - 1);
HXDLIN( 456)												a9->data[i10] = 0;
            											}
            										}
            									}
HXDLIN( 456)									undoImage4 = a9;
            								}
            								break;
            								case (int)2: {
HXLINE( 456)									 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 456)									 ::iterMagic::U32ArrImg b9 = u32a1;
HXDLIN( 456)									{
HXLINE( 456)										b9->width = width1;
HXDLIN( 456)										b9->height = height1;
HXDLIN( 456)										b9->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 456)										int size1 = (b9->length * 4);
HXDLIN( 456)										b9->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 456)										{
HXLINE( 456)											int _g26 = 0;
HXDLIN( 456)											int _g27 = b9->length;
HXDLIN( 456)											while((_g26 < _g27)){
HXLINE( 456)												_g26 = (_g26 + 1);
HXDLIN( 456)												int i11 = (_g26 - 1);
HXDLIN( 456)												{
HXLINE( 456)													 ::haxe::io::ArrayBufferViewImpl this33 = b9->data;
HXDLIN( 456)													bool undoImage5;
HXDLIN( 456)													if ((i11 >= 0)) {
HXLINE( 456)														undoImage5 = (i11 < (this33->byteLength >> 2));
            													}
            													else {
HXLINE( 456)														undoImage5 = false;
            													}
HXDLIN( 456)													if (undoImage5) {
HXLINE( 456)														 ::haxe::io::Bytes _this1 = this33->bytes;
HXDLIN( 456)														int pos1 = ((i11 << 2) + this33->byteOffset);
HXDLIN( 456)														_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 456)														_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 456)														_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 456)														_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN( 456)									undoImage4 = b9;
            								}
            								break;
            								case (int)3: {
HXLINE( 456)									 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 456)									 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 456)									{
HXLINE( 456)										v2->width = width1;
HXDLIN( 456)										v2->height = height1;
HXDLIN( 456)										v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 456)										v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 456)										{
HXLINE( 456)											int _g28 = 0;
HXDLIN( 456)											int _g29 = v2->length;
HXDLIN( 456)											while((_g28 < _g29)){
HXLINE( 456)												_g28 = (_g28 + 1);
HXDLIN( 456)												int i12 = (_g28 - 1);
HXDLIN( 456)												v2->data->__unsafe_set(i12,0);
            											}
            										}
            									}
HXDLIN( 456)									undoImage4 = v2;
            								}
            								break;
            								case (int)4: {
HXLINE( 456)									 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 456)									 ::iterMagic::StackIntImg b10 = sInt1;
HXDLIN( 456)									{
HXLINE( 456)										b10->width = width1;
HXDLIN( 456)										b10->height = height1;
HXDLIN( 456)										b10->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 456)										b10->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 456)										{
HXLINE( 456)											int len3 = b10->length;
HXDLIN( 456)											 ::haxe::ds::GenericStack_Int d1 = b10->data;
HXDLIN( 456)											if (::hx::IsNull( d1->head )) {
HXLINE( 456)												int _g30 = 0;
HXDLIN( 456)												int _g31 = len3;
HXDLIN( 456)												while((_g30 < _g31)){
HXLINE( 456)													_g30 = (_g30 + 1);
HXDLIN( 456)													int i13 = (_g30 - 1);
HXDLIN( 456)													d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            												}
            											}
            											else {
HXLINE( 456)												int _g32 = 0;
HXDLIN( 456)												int _g33 = len3;
HXDLIN( 456)												while((_g32 < _g33)){
HXLINE( 456)													_g32 = (_g32 + 1);
HXDLIN( 456)													int i14 = (_g32 - 1);
HXDLIN( 456)													{
HXLINE( 456)														 ::haxe::ds::GenericCell_Int l1 = b10->data->head;
HXDLIN( 456)														 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 456)														{
HXLINE( 456)															int _g34 = 0;
HXDLIN( 456)															int _g35 = i14;
HXDLIN( 456)															while((_g34 < _g35)){
HXLINE( 456)																_g34 = (_g34 + 1);
HXDLIN( 456)																int i15 = (_g34 - 1);
HXLINE( 345)																prev1 = l1;
HXLINE( 346)																l1 = l1->next;
            															}
            														}
HXLINE( 456)														if (::hx::IsNull( prev1 )) {
HXLINE( 456)															b10->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 456)															l1 = null();
            														}
            														else {
HXLINE( 456)															prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 456)															l1 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 456)									undoImage4 = b10;
            								}
            								break;
            							}
HXDLIN( 456)							this32->image = undoImage4;
HXDLIN( 456)							this32->width = width1;
HXDLIN( 456)							this32->height = height1;
HXDLIN( 456)							this32->imageType = ( (int)(imageType1) );
HXDLIN( 456)							undoImage3 = this32;
HXDLIN( 456)							{
HXLINE( 456)								int rectLeft1 = xIter31->start;
HXDLIN( 456)								int rectTop1 = yIter31->start;
HXDLIN( 456)								int rectRight1 = xIter31->max;
HXDLIN( 456)								bool forceClear1 = false;
HXDLIN( 456)								{
HXLINE( 456)									int _g36 = rectTop1;
HXDLIN( 456)									int _g37 = yIter31->max;
HXDLIN( 456)									while((_g36 < _g37)){
HXLINE( 456)										_g36 = (_g36 + 1);
HXDLIN( 456)										int dy2 = (_g36 - 1);
HXDLIN( 456)										{
HXLINE( 456)											int _g38 = rectLeft1;
HXDLIN( 456)											int _g39 = rectRight1;
HXDLIN( 456)											while((_g38 < _g39)){
HXLINE( 456)												_g38 = (_g38 + 1);
HXDLIN( 456)												int dx2 = (_g38 - 1);
HXDLIN( 456)												::Dynamic this34 = pixelImage->image;
HXDLIN( 456)												int index4;
HXDLIN( 456)												if (pixelImage->useVirtualPos) {
HXLINE( 456)													index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            												}
            												else {
HXLINE( 456)													index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            												}
HXDLIN( 456)												int c5 = ::iterMagic::Iimg_obj::get(this34,index4);
HXDLIN( 456)												int col1;
HXDLIN( 456)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)													col1 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            												}
            												else {
HXLINE( 456)													col1 = c5;
            												}
HXDLIN( 456)												bool hitQuad9;
HXDLIN( 456)												if (pixelImage->useMask) {
HXLINE( 456)													hitQuad9 = ::hx::IsNotNull( pixelImage->mask );
            												}
            												else {
HXLINE( 456)													hitQuad9 = false;
            												}
HXDLIN( 456)												if (hitQuad9) {
HXLINE( 456)													 ::pi_xy::ImageStruct this35 = pixelImage->mask;
HXDLIN( 456)													::Dynamic this36 = this35->image;
HXDLIN( 456)													int index5;
HXDLIN( 456)													if (this35->useVirtualPos) {
HXLINE( 456)														index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this35->virtualY) * ( (Float)(this35->width) )) + dx2) - this35->virtualX));
            													}
            													else {
HXLINE( 456)														index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this35->width) + dx2)) ));
            													}
HXDLIN( 456)													int c6 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN( 456)													int v3;
HXDLIN( 456)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)														v3 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            													}
            													else {
HXLINE( 456)														v3 = c6;
            													}
HXDLIN( 456)													int maskPixel1 = v3;
HXDLIN( 456)													int this37 = col1;
HXDLIN( 456)													if ((maskPixel1 == 0)) {
HXLINE( 456)														col1 = this37;
            													}
            													else {
HXLINE( 456)														Float m01;
HXDLIN( 456)														int this38 = ((maskPixel1 >> 24) & 255);
HXDLIN( 456)														if ((this38 == 0)) {
HXLINE( 456)															m01 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															m01 = (( (Float)(this38) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float m11;
HXDLIN( 456)														int this39 = ((maskPixel1 >> 16) & 255);
HXDLIN( 456)														if ((this39 == 0)) {
HXLINE( 456)															m11 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															m11 = (( (Float)(this39) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float m21;
HXDLIN( 456)														int this40 = ((maskPixel1 >> 8) & 255);
HXDLIN( 456)														if ((this40 == 0)) {
HXLINE( 456)															m21 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															m21 = (( (Float)(this40) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float m31;
HXDLIN( 456)														int this41 = (maskPixel1 & 255);
HXDLIN( 456)														if ((this41 == 0)) {
HXLINE( 456)															m31 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															m31 = (( (Float)(this41) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this37 >> 24) & 255)) )));
HXDLIN( 456)														int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this37 >> 16) & 255)) )));
HXDLIN( 456)														int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this37 >> 8) & 255)) )));
HXDLIN( 456)														int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this37 & 255)) )));
HXDLIN( 456)														col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 456)												if ((col1 != 0)) {
HXLINE( 456)													int x4 = (dx2 - rectLeft1);
HXDLIN( 456)													int y4 = (dy2 - rectTop1);
HXDLIN( 456)													int c7 = col1;
HXDLIN( 456)													bool hitQuad10;
HXDLIN( 456)													if ((((c7 >> 24) & 255) < 254)) {
HXLINE( 456)														hitQuad10 = undoImage3->transparent;
            													}
            													else {
HXLINE( 456)														hitQuad10 = false;
            													}
HXDLIN( 456)													if (hitQuad10) {
HXLINE( 456)														int location2;
HXDLIN( 456)														if (undoImage3->useVirtualPos) {
HXLINE( 456)															location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            														}
            														else {
HXLINE( 456)															location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            														}
HXDLIN( 456)														int this42 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 456)														int this43;
HXDLIN( 456)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)															this43 = ((((((this42 >> 24) & 255) << 24) | ((this42 & 255) << 16)) | (((this42 >> 8) & 255) << 8)) | ((this42 >> 16) & 255));
            														}
            														else {
HXLINE( 456)															this43 = this42;
            														}
HXDLIN( 456)														Float a13;
HXDLIN( 456)														int this44 = ((this43 >> 24) & 255);
HXDLIN( 456)														if ((this44 == 0)) {
HXLINE( 456)															a13 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															a13 = (( (Float)(this44) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float r12;
HXDLIN( 456)														int this45 = ((this43 >> 16) & 255);
HXDLIN( 456)														if ((this45 == 0)) {
HXLINE( 456)															r12 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															r12 = (( (Float)(this45) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float g12;
HXDLIN( 456)														int this46 = ((this43 >> 8) & 255);
HXDLIN( 456)														if ((this46 == 0)) {
HXLINE( 456)															g12 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															g12 = (( (Float)(this46) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float b13;
HXDLIN( 456)														int this47 = (this43 & 255);
HXDLIN( 456)														if ((this47 == 0)) {
HXLINE( 456)															b13 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															b13 = (( (Float)(this47) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float a22;
HXDLIN( 456)														int this48 = ((col1 >> 24) & 255);
HXDLIN( 456)														if ((this48 == 0)) {
HXLINE( 456)															a22 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															a22 = (( (Float)(this48) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float r22;
HXDLIN( 456)														int this49 = ((col1 >> 16) & 255);
HXDLIN( 456)														if ((this49 == 0)) {
HXLINE( 456)															r22 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															r22 = (( (Float)(this49) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float g22;
HXDLIN( 456)														int this50 = ((col1 >> 8) & 255);
HXDLIN( 456)														if ((this50 == 0)) {
HXLINE( 456)															g22 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															g22 = (( (Float)(this50) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float b23;
HXDLIN( 456)														int this51 = (col1 & 255);
HXDLIN( 456)														if ((this51 == 0)) {
HXLINE( 456)															b23 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															b23 = (( (Float)(this51) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 456)														int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 456)														int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 456)														int b14 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 456)														int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 456)														int blended2 = ((((a10 << 24) | (r5 << 16)) | (g5 << 8)) | b14);
HXDLIN( 456)														{
HXLINE( 456)															int hitQuad11;
HXDLIN( 456)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)																hitQuad11 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            															}
            															else {
HXLINE( 456)																hitQuad11 = blended2;
            															}
HXDLIN( 456)															::iterMagic::Iimg_obj::set(undoImage3->image,location2,hitQuad11);
            														}
            													}
            													else {
HXLINE( 456)														::Dynamic this52 = undoImage3->image;
HXDLIN( 456)														int index6;
HXDLIN( 456)														if (undoImage3->useVirtualPos) {
HXLINE( 456)															index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            														}
            														else {
HXLINE( 456)															index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            														}
HXDLIN( 456)														int hitQuad12;
HXDLIN( 456)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)															hitQuad12 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            														}
            														else {
HXLINE( 456)															hitQuad12 = c7;
            														}
HXDLIN( 456)														::iterMagic::Iimg_obj::set(this52,index6,hitQuad12);
            													}
            												}
            												else {
HXLINE( 456)													if (forceClear1) {
HXLINE( 456)														::Dynamic this53 = undoImage3->image;
HXDLIN( 456)														int x5 = (dx2 - rectLeft1);
HXDLIN( 456)														int y5 = (dy2 - rectTop1);
HXDLIN( 456)														int index7;
HXDLIN( 456)														if (undoImage3->useVirtualPos) {
HXLINE( 456)															index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            														}
            														else {
HXLINE( 456)															index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            														}
HXDLIN( 456)														::iterMagic::Iimg_obj::set(this53,index7,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 456)						bool found1 = false;
HXDLIN( 456)						Float s = ((Float)0.);
HXDLIN( 456)						Float t = ((Float)0.);
HXDLIN( 456)						Float sxx = ((Float)0.);
HXDLIN( 456)						Float txx = ((Float)0.);
HXDLIN( 456)						{
HXLINE( 456)							int _g_min2 = xIter31->start;
HXDLIN( 456)							int _g_max2 = xIter31->max;
HXDLIN( 456)							while((_g_min2 < _g_max2)){
HXLINE( 456)								_g_min2 = (_g_min2 + 1);
HXDLIN( 456)								int x6 = (_g_min2 - 1);
HXLINE(  60)								sxx = (sx * ( (Float)(x6) ));
HXLINE(  61)								txx = (tx * ( (Float)(x6) ));
HXLINE(  62)								found1 = false;
HXLINE( 456)								{
HXLINE( 456)									int _g_min3 = yIter31->start;
HXDLIN( 456)									int _g_max3 = yIter31->max;
HXDLIN( 456)									while((_g_min3 < _g_max3)){
HXLINE( 456)										_g_min3 = (_g_min3 + 1);
HXDLIN( 456)										int y6 = (_g_min3 - 1);
HXLINE(  64)										s = ((s0 + sxx) + (sy * ( (Float)(y6) )));
HXLINE(  65)										t = ((t0 + txx) + (ty * ( (Float)(y6) )));
HXLINE( 456)										bool hitQuad13;
HXDLIN( 456)										if (!((s <= 0))) {
HXLINE( 456)											hitQuad13 = (t <= 0);
            										}
            										else {
HXLINE( 456)											hitQuad13 = true;
            										}
HXDLIN( 456)										if (hitQuad13) {
HXLINE( 456)											if (found1) {
HXLINE( 456)												goto _hx_goto_558;
            											}
            										}
            										else {
HXLINE( 456)											if (((s + t) < A)) {
HXLINE( 456)												{
HXLINE( 456)													int c8 = color;
HXDLIN( 456)													bool hitQuad14;
HXDLIN( 456)													if ((((c8 >> 24) & 255) < 254)) {
HXLINE( 456)														hitQuad14 = pixelImage->transparent;
            													}
            													else {
HXLINE( 456)														hitQuad14 = false;
            													}
HXDLIN( 456)													if (hitQuad14) {
HXLINE( 456)														int location3;
HXDLIN( 456)														if (pixelImage->useVirtualPos) {
HXLINE( 456)															location3 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x6) - pixelImage->virtualX));
            														}
            														else {
HXLINE( 456)															location3 = ::Std_obj::_hx_int(( (Float)(((y6 * pixelImage->width) + x6)) ));
            														}
HXDLIN( 456)														int this54 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN( 456)														int this55;
HXDLIN( 456)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)															this55 = ((((((this54 >> 24) & 255) << 24) | ((this54 & 255) << 16)) | (((this54 >> 8) & 255) << 8)) | ((this54 >> 16) & 255));
            														}
            														else {
HXLINE( 456)															this55 = this54;
            														}
HXDLIN( 456)														Float a14;
HXDLIN( 456)														int this56 = ((this55 >> 24) & 255);
HXDLIN( 456)														if ((this56 == 0)) {
HXLINE( 456)															a14 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															a14 = (( (Float)(this56) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float r13;
HXDLIN( 456)														int this57 = ((this55 >> 16) & 255);
HXDLIN( 456)														if ((this57 == 0)) {
HXLINE( 456)															r13 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															r13 = (( (Float)(this57) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float g13;
HXDLIN( 456)														int this58 = ((this55 >> 8) & 255);
HXDLIN( 456)														if ((this58 == 0)) {
HXLINE( 456)															g13 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															g13 = (( (Float)(this58) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float b15;
HXDLIN( 456)														int this59 = (this55 & 255);
HXDLIN( 456)														if ((this59 == 0)) {
HXLINE( 456)															b15 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															b15 = (( (Float)(this59) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float a23;
HXDLIN( 456)														int this60 = ((color >> 24) & 255);
HXDLIN( 456)														if ((this60 == 0)) {
HXLINE( 456)															a23 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															a23 = (( (Float)(this60) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float r23;
HXDLIN( 456)														int this61 = ((color >> 16) & 255);
HXDLIN( 456)														if ((this61 == 0)) {
HXLINE( 456)															r23 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															r23 = (( (Float)(this61) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float g23;
HXDLIN( 456)														int this62 = ((color >> 8) & 255);
HXDLIN( 456)														if ((this62 == 0)) {
HXLINE( 456)															g23 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															g23 = (( (Float)(this62) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float b24;
HXDLIN( 456)														int this63 = (color & 255);
HXDLIN( 456)														if ((this63 == 0)) {
HXLINE( 456)															b24 = ((Float)0.);
            														}
            														else {
HXLINE( 456)															b24 = (( (Float)(this63) ) / ( (Float)(255) ));
            														}
HXDLIN( 456)														Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 456)														int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 456)														int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 456)														int b16 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b15 * a33) + (b24 * a23))));
HXDLIN( 456)														int a15 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 456)														int blended3 = ((((a15 << 24) | (r6 << 16)) | (g6 << 8)) | b16);
HXDLIN( 456)														{
HXLINE( 456)															int hitQuad15;
HXDLIN( 456)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)																hitQuad15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            															}
            															else {
HXLINE( 456)																hitQuad15 = blended3;
            															}
HXDLIN( 456)															::iterMagic::Iimg_obj::set(pixelImage->image,location3,hitQuad15);
            														}
            													}
            													else {
HXLINE( 456)														::Dynamic this64 = pixelImage->image;
HXDLIN( 456)														int index8;
HXDLIN( 456)														if (pixelImage->useVirtualPos) {
HXLINE( 456)															index8 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x6) - pixelImage->virtualX));
            														}
            														else {
HXLINE( 456)															index8 = ::Std_obj::_hx_int(( (Float)(((y6 * pixelImage->width) + x6)) ));
            														}
HXDLIN( 456)														int hitQuad16;
HXDLIN( 456)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)															hitQuad16 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            														}
            														else {
HXLINE( 456)															hitQuad16 = c8;
            														}
HXDLIN( 456)														::iterMagic::Iimg_obj::set(this64,index8,hitQuad16);
            													}
            												}
HXLINE(  73)												found1 = true;
            											}
            											else {
HXLINE( 456)												if (found1) {
HXLINE( 456)													goto _hx_goto_558;
            												}
            											}
            										}
            									}
            									_hx_goto_558:;
            								}
            							}
            						}
            					}
            				}
HXDLIN( 456)				bool hasUndo2 = false;
HXDLIN( 456)				int aA1 = ((color >> 24) & 255);
HXDLIN( 456)				int rA1 = ((color >> 16) & 255);
HXDLIN( 456)				int gA1 = ((color >> 8) & 255);
HXDLIN( 456)				int bA1 = (color & 255);
HXDLIN( 456)				Float bcx1 = (cx - dx);
HXDLIN( 456)				Float bcy1 = (cy - dy);
HXDLIN( 456)				Float acx1 = (ex - dx);
HXDLIN( 456)				Float acy1 = (ey - dy);
HXDLIN( 456)				Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 456)				Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 456)				Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 456)				Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 456)				 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 456)				if ((ex > cx)) {
HXLINE( 456)					if ((ex > dx)) {
HXLINE( 456)						int min12;
HXDLIN( 456)						if ((cx > dx)) {
HXLINE( 456)							min12 = ::Math_obj::floor(dx);
            						}
            						else {
HXLINE( 456)							min12 = ::Math_obj::floor(cx);
            						}
HXDLIN( 456)						int ii_min24 = min12;
HXDLIN( 456)						int ii_max24 = ::Math_obj::ceil(ex);
HXDLIN( 456)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            					}
            					else {
HXLINE( 456)						int ii_min25 = ::Math_obj::floor(cx);
HXDLIN( 456)						int ii_max25 = ::Math_obj::ceil(dx);
HXDLIN( 456)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            					}
            				}
            				else {
HXLINE( 456)					if ((cx > dx)) {
HXLINE( 456)						int min13;
HXDLIN( 456)						if ((ex > dx)) {
HXLINE( 456)							min13 = ::Math_obj::floor(dx);
            						}
            						else {
HXLINE( 456)							min13 = ::Math_obj::ceil(ex);
            						}
HXDLIN( 456)						int ii_min26 = min13;
HXDLIN( 456)						int ii_max26 = ::Math_obj::ceil(cx);
HXDLIN( 456)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            					}
            					else {
HXLINE( 456)						int ii_min27 = ::Math_obj::floor(ex);
HXDLIN( 456)						int ii_max27 = ::Math_obj::ceil(dx);
HXDLIN( 456)						xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            					}
            				}
HXDLIN( 456)				 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 456)				if ((ey > cy)) {
HXLINE( 456)					if ((ey > dy)) {
HXLINE( 456)						int min14;
HXDLIN( 456)						if ((cy > dy)) {
HXLINE( 456)							min14 = ::Math_obj::floor(dy);
            						}
            						else {
HXLINE( 456)							min14 = ::Math_obj::floor(cy);
            						}
HXDLIN( 456)						int ii_min28 = min14;
HXDLIN( 456)						int ii_max28 = ::Math_obj::ceil(ey);
HXDLIN( 456)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            					}
            					else {
HXLINE( 456)						int ii_min29 = ::Math_obj::floor(cy);
HXDLIN( 456)						int ii_max29 = ::Math_obj::ceil(dy);
HXDLIN( 456)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            					}
            				}
            				else {
HXLINE( 456)					if ((cy > dy)) {
HXLINE( 456)						int min15;
HXDLIN( 456)						if ((ey > dy)) {
HXLINE( 456)							min15 = ::Math_obj::floor(dy);
            						}
            						else {
HXLINE( 456)							min15 = ::Math_obj::ceil(ey);
            						}
HXDLIN( 456)						int ii_min30 = min15;
HXDLIN( 456)						int ii_max30 = ::Math_obj::ceil(cy);
HXDLIN( 456)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            					}
            					else {
HXLINE( 456)						int ii_min31 = ::Math_obj::floor(ey);
HXDLIN( 456)						int ii_max31 = ::Math_obj::ceil(dy);
HXDLIN( 456)						yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            					}
            				}
HXDLIN( 456)				 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 456)				if (hasUndo2) {
HXLINE( 456)					int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 456)					int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 456)					 ::Dynamic imageType2 = null();
HXDLIN( 456)					 ::pi_xy::ImageStruct this65 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 456)					if (::hx::IsNull( imageType2 )) {
HXLINE(  54)						imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 456)					::Dynamic undoImage7;
HXDLIN( 456)					switch((int)(( (int)(imageType2) ))){
            						case (int)0: {
HXLINE( 456)							 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::BytesImg b17 = byt2;
HXDLIN( 456)							{
HXLINE( 456)								b17->width = width2;
HXDLIN( 456)								b17->height = height2;
HXDLIN( 456)								b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 456)								b17->data = ::haxe::io::Bytes_obj::alloc((b17->length * 4));
HXDLIN( 456)								{
HXLINE( 456)									int len4 = b17->length;
HXDLIN( 456)									int w2 = 0;
HXDLIN( 456)									{
HXLINE( 456)										int _g40 = 0;
HXDLIN( 456)										int _g41 = b17->height;
HXDLIN( 456)										while((_g40 < _g41)){
HXLINE( 456)											_g40 = (_g40 + 1);
HXDLIN( 456)											int y7 = (_g40 - 1);
HXDLIN( 456)											{
HXLINE( 456)												int _g42 = 0;
HXDLIN( 456)												int _g43 = b17->width;
HXDLIN( 456)												while((_g42 < _g43)){
HXLINE( 456)													_g42 = (_g42 + 1);
HXDLIN( 456)													int x7 = (_g42 - 1);
HXDLIN( 456)													{
HXLINE( 456)														w2 = (w2 + 1);
HXDLIN( 456)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 456)													{
HXLINE( 456)														w2 = (w2 + 1);
HXDLIN( 456)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 456)													{
HXLINE( 456)														w2 = (w2 + 1);
HXDLIN( 456)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 456)													{
HXLINE( 456)														w2 = (w2 + 1);
HXDLIN( 456)														b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 456)							undoImage7 = b17;
            						}
            						break;
            						case (int)1: {
HXLINE( 456)							 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::ArrIntImg a16 = arrI2;
HXDLIN( 456)							{
HXLINE( 456)								a16->width = width2;
HXDLIN( 456)								a16->height = height2;
HXDLIN( 456)								a16->data = ::Array_obj< int >::__new(0);
HXDLIN( 456)								a16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 456)								{
HXLINE( 456)									int _g44 = 0;
HXDLIN( 456)									int _g45 = a16->length;
HXDLIN( 456)									while((_g44 < _g45)){
HXLINE( 456)										_g44 = (_g44 + 1);
HXDLIN( 456)										int i16 = (_g44 - 1);
HXDLIN( 456)										a16->data[i16] = 0;
            									}
            								}
            							}
HXDLIN( 456)							undoImage7 = a16;
            						}
            						break;
            						case (int)2: {
HXLINE( 456)							 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::U32ArrImg b18 = u32a2;
HXDLIN( 456)							{
HXLINE( 456)								b18->width = width2;
HXDLIN( 456)								b18->height = height2;
HXDLIN( 456)								b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 456)								int size2 = (b18->length * 4);
HXDLIN( 456)								b18->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 456)								{
HXLINE( 456)									int _g46 = 0;
HXDLIN( 456)									int _g47 = b18->length;
HXDLIN( 456)									while((_g46 < _g47)){
HXLINE( 456)										_g46 = (_g46 + 1);
HXDLIN( 456)										int i17 = (_g46 - 1);
HXDLIN( 456)										{
HXLINE( 456)											 ::haxe::io::ArrayBufferViewImpl this66 = b18->data;
HXDLIN( 456)											bool undoImage8;
HXDLIN( 456)											if ((i17 >= 0)) {
HXLINE( 456)												undoImage8 = (i17 < (this66->byteLength >> 2));
            											}
            											else {
HXLINE( 456)												undoImage8 = false;
            											}
HXDLIN( 456)											if (undoImage8) {
HXLINE( 456)												 ::haxe::io::Bytes _this2 = this66->bytes;
HXDLIN( 456)												int pos2 = ((i17 << 2) + this66->byteOffset);
HXDLIN( 456)												_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 456)												_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 456)												_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 456)												_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 456)							undoImage7 = b18;
            						}
            						break;
            						case (int)3: {
HXLINE( 456)							 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::VecIntImg v4 = vec2;
HXDLIN( 456)							{
HXLINE( 456)								v4->width = width2;
HXDLIN( 456)								v4->height = height2;
HXDLIN( 456)								v4->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 456)								v4->data = ::Array_obj< int >::__new(v4->length);
HXDLIN( 456)								{
HXLINE( 456)									int _g48 = 0;
HXDLIN( 456)									int _g49 = v4->length;
HXDLIN( 456)									while((_g48 < _g49)){
HXLINE( 456)										_g48 = (_g48 + 1);
HXDLIN( 456)										int i18 = (_g48 - 1);
HXDLIN( 456)										v4->data->__unsafe_set(i18,0);
            									}
            								}
            							}
HXDLIN( 456)							undoImage7 = v4;
            						}
            						break;
            						case (int)4: {
HXLINE( 456)							 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::StackIntImg b19 = sInt2;
HXDLIN( 456)							{
HXLINE( 456)								b19->width = width2;
HXDLIN( 456)								b19->height = height2;
HXDLIN( 456)								b19->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 456)								b19->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 456)								{
HXLINE( 456)									int len5 = b19->length;
HXDLIN( 456)									 ::haxe::ds::GenericStack_Int d2 = b19->data;
HXDLIN( 456)									if (::hx::IsNull( d2->head )) {
HXLINE( 456)										int _g50 = 0;
HXDLIN( 456)										int _g51 = len5;
HXDLIN( 456)										while((_g50 < _g51)){
HXLINE( 456)											_g50 = (_g50 + 1);
HXDLIN( 456)											int i19 = (_g50 - 1);
HXDLIN( 456)											d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            										}
            									}
            									else {
HXLINE( 456)										int _g52 = 0;
HXDLIN( 456)										int _g53 = len5;
HXDLIN( 456)										while((_g52 < _g53)){
HXLINE( 456)											_g52 = (_g52 + 1);
HXDLIN( 456)											int i20 = (_g52 - 1);
HXDLIN( 456)											{
HXLINE( 456)												 ::haxe::ds::GenericCell_Int l2 = b19->data->head;
HXDLIN( 456)												 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 456)												{
HXLINE( 456)													int _g54 = 0;
HXDLIN( 456)													int _g55 = i20;
HXDLIN( 456)													while((_g54 < _g55)){
HXLINE( 456)														_g54 = (_g54 + 1);
HXDLIN( 456)														int i21 = (_g54 - 1);
HXLINE( 345)														prev2 = l2;
HXLINE( 346)														l2 = l2->next;
            													}
            												}
HXLINE( 456)												if (::hx::IsNull( prev2 )) {
HXLINE( 456)													b19->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 456)													l2 = null();
            												}
            												else {
HXLINE( 456)													prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 456)													l2 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 456)							undoImage7 = b19;
            						}
            						break;
            					}
HXDLIN( 456)					this65->image = undoImage7;
HXDLIN( 456)					this65->width = width2;
HXDLIN( 456)					this65->height = height2;
HXDLIN( 456)					this65->imageType = ( (int)(imageType2) );
HXDLIN( 456)					undoImage6 = this65;
HXDLIN( 456)					{
HXLINE( 456)						int rectLeft2 = xIter32->start;
HXDLIN( 456)						int rectTop2 = yIter32->start;
HXDLIN( 456)						int rectRight2 = xIter32->max;
HXDLIN( 456)						bool forceClear2 = false;
HXDLIN( 456)						{
HXLINE( 456)							int _g56 = rectTop2;
HXDLIN( 456)							int _g57 = yIter32->max;
HXDLIN( 456)							while((_g56 < _g57)){
HXLINE( 456)								_g56 = (_g56 + 1);
HXDLIN( 456)								int dy3 = (_g56 - 1);
HXDLIN( 456)								{
HXLINE( 456)									int _g58 = rectLeft2;
HXDLIN( 456)									int _g59 = rectRight2;
HXDLIN( 456)									while((_g58 < _g59)){
HXLINE( 456)										_g58 = (_g58 + 1);
HXDLIN( 456)										int dx3 = (_g58 - 1);
HXDLIN( 456)										::Dynamic this67 = pixelImage->image;
HXDLIN( 456)										int index9;
HXDLIN( 456)										if (pixelImage->useVirtualPos) {
HXLINE( 456)											index9 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx3) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 456)											index9 = ::Std_obj::_hx_int(( (Float)(((dy3 * pixelImage->width) + dx3)) ));
            										}
HXDLIN( 456)										int c9 = ::iterMagic::Iimg_obj::get(this67,index9);
HXDLIN( 456)										int col2;
HXDLIN( 456)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)											col2 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            										}
            										else {
HXLINE( 456)											col2 = c9;
            										}
HXDLIN( 456)										bool hitQuad17;
HXDLIN( 456)										if (pixelImage->useMask) {
HXLINE( 456)											hitQuad17 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 456)											hitQuad17 = false;
            										}
HXDLIN( 456)										if (hitQuad17) {
HXLINE( 456)											 ::pi_xy::ImageStruct this68 = pixelImage->mask;
HXDLIN( 456)											::Dynamic this69 = this68->image;
HXDLIN( 456)											int index10;
HXDLIN( 456)											if (this68->useVirtualPos) {
HXLINE( 456)												index10 = ::Std_obj::_hx_int(((((( (Float)(dy3) ) - this68->virtualY) * ( (Float)(this68->width) )) + dx3) - this68->virtualX));
            											}
            											else {
HXLINE( 456)												index10 = ::Std_obj::_hx_int(( (Float)(((dy3 * this68->width) + dx3)) ));
            											}
HXDLIN( 456)											int c10 = ::iterMagic::Iimg_obj::get(this69,index10);
HXDLIN( 456)											int v5;
HXDLIN( 456)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)												v5 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            											}
            											else {
HXLINE( 456)												v5 = c10;
            											}
HXDLIN( 456)											int maskPixel2 = v5;
HXDLIN( 456)											int this70 = col2;
HXDLIN( 456)											if ((maskPixel2 == 0)) {
HXLINE( 456)												col2 = this70;
            											}
            											else {
HXLINE( 456)												Float m02;
HXDLIN( 456)												int this71 = ((maskPixel2 >> 24) & 255);
HXDLIN( 456)												if ((this71 == 0)) {
HXLINE( 456)													m02 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													m02 = (( (Float)(this71) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float m12;
HXDLIN( 456)												int this72 = ((maskPixel2 >> 16) & 255);
HXDLIN( 456)												if ((this72 == 0)) {
HXLINE( 456)													m12 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													m12 = (( (Float)(this72) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float m22;
HXDLIN( 456)												int this73 = ((maskPixel2 >> 8) & 255);
HXDLIN( 456)												if ((this73 == 0)) {
HXLINE( 456)													m22 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													m22 = (( (Float)(this73) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float m32;
HXDLIN( 456)												int this74 = (maskPixel2 & 255);
HXDLIN( 456)												if ((this74 == 0)) {
HXLINE( 456)													m32 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													m32 = (( (Float)(this74) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this70 >> 24) & 255)) )));
HXDLIN( 456)												int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this70 >> 16) & 255)) )));
HXDLIN( 456)												int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this70 >> 8) & 255)) )));
HXDLIN( 456)												int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this70 & 255)) )));
HXDLIN( 456)												col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 456)										if ((col2 != 0)) {
HXLINE( 456)											int x8 = (dx3 - rectLeft2);
HXDLIN( 456)											int y8 = (dy3 - rectTop2);
HXDLIN( 456)											int c11 = col2;
HXDLIN( 456)											bool hitQuad18;
HXDLIN( 456)											if ((((c11 >> 24) & 255) < 254)) {
HXLINE( 456)												hitQuad18 = undoImage6->transparent;
            											}
            											else {
HXLINE( 456)												hitQuad18 = false;
            											}
HXDLIN( 456)											if (hitQuad18) {
HXLINE( 456)												int location4;
HXDLIN( 456)												if (undoImage6->useVirtualPos) {
HXLINE( 456)													location4 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            												}
            												else {
HXLINE( 456)													location4 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            												}
HXDLIN( 456)												int this75 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 456)												int this76;
HXDLIN( 456)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)													this76 = ((((((this75 >> 24) & 255) << 24) | ((this75 & 255) << 16)) | (((this75 >> 8) & 255) << 8)) | ((this75 >> 16) & 255));
            												}
            												else {
HXLINE( 456)													this76 = this75;
            												}
HXDLIN( 456)												Float a17;
HXDLIN( 456)												int this77 = ((this76 >> 24) & 255);
HXDLIN( 456)												if ((this77 == 0)) {
HXLINE( 456)													a17 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													a17 = (( (Float)(this77) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float r14;
HXDLIN( 456)												int this78 = ((this76 >> 16) & 255);
HXDLIN( 456)												if ((this78 == 0)) {
HXLINE( 456)													r14 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													r14 = (( (Float)(this78) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float g14;
HXDLIN( 456)												int this79 = ((this76 >> 8) & 255);
HXDLIN( 456)												if ((this79 == 0)) {
HXLINE( 456)													g14 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													g14 = (( (Float)(this79) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float b110;
HXDLIN( 456)												int this80 = (this76 & 255);
HXDLIN( 456)												if ((this80 == 0)) {
HXLINE( 456)													b110 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													b110 = (( (Float)(this80) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float a24;
HXDLIN( 456)												int this81 = ((col2 >> 24) & 255);
HXDLIN( 456)												if ((this81 == 0)) {
HXLINE( 456)													a24 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													a24 = (( (Float)(this81) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float r24;
HXDLIN( 456)												int this82 = ((col2 >> 16) & 255);
HXDLIN( 456)												if ((this82 == 0)) {
HXLINE( 456)													r24 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													r24 = (( (Float)(this82) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float g24;
HXDLIN( 456)												int this83 = ((col2 >> 8) & 255);
HXDLIN( 456)												if ((this83 == 0)) {
HXLINE( 456)													g24 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													g24 = (( (Float)(this83) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float b25;
HXDLIN( 456)												int this84 = (col2 & 255);
HXDLIN( 456)												if ((this84 == 0)) {
HXLINE( 456)													b25 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													b25 = (( (Float)(this84) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float a34 = (a17 * (( (Float)(1) ) - a24));
HXDLIN( 456)												int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 456)												int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 456)												int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a34) + (b25 * a24))));
HXDLIN( 456)												int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 456)												int blended4 = ((((a18 << 24) | (r7 << 16)) | (g7 << 8)) | b20);
HXDLIN( 456)												{
HXLINE( 456)													int hitQuad19;
HXDLIN( 456)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)														hitQuad19 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            													}
            													else {
HXLINE( 456)														hitQuad19 = blended4;
            													}
HXDLIN( 456)													::iterMagic::Iimg_obj::set(undoImage6->image,location4,hitQuad19);
            												}
            											}
            											else {
HXLINE( 456)												::Dynamic this85 = undoImage6->image;
HXDLIN( 456)												int index11;
HXDLIN( 456)												if (undoImage6->useVirtualPos) {
HXLINE( 456)													index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            												}
            												else {
HXLINE( 456)													index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            												}
HXDLIN( 456)												int hitQuad20;
HXDLIN( 456)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)													hitQuad20 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            												}
            												else {
HXLINE( 456)													hitQuad20 = c11;
            												}
HXDLIN( 456)												::iterMagic::Iimg_obj::set(this85,index11,hitQuad20);
            											}
            										}
            										else {
HXLINE( 456)											if (forceClear2) {
HXLINE( 456)												::Dynamic this86 = undoImage6->image;
HXDLIN( 456)												int x9 = (dx3 - rectLeft2);
HXDLIN( 456)												int y9 = (dy3 - rectTop2);
HXDLIN( 456)												int index12;
HXDLIN( 456)												if (undoImage6->useVirtualPos) {
HXLINE( 456)													index12 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            												}
            												else {
HXLINE( 456)													index12 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            												}
HXDLIN( 456)												::iterMagic::Iimg_obj::set(this86,index12,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 456)				bool found2 = false;
HXDLIN( 456)				{
HXLINE( 456)					int _g_min4 = xIter32->start;
HXDLIN( 456)					int _g_max4 = xIter32->max;
HXDLIN( 456)					while((_g_min4 < _g_max4)){
HXLINE( 456)						_g_min4 = (_g_min4 + 1);
HXDLIN( 456)						int px2 = (_g_min4 - 1);
HXDLIN( 456)						Float pcx1 = (( (Float)(px2) ) - dx);
HXLINE( 619)						found2 = false;
HXLINE( 456)						{
HXLINE( 456)							int _g_min5 = yIter32->start;
HXDLIN( 456)							int _g_max5 = yIter32->max;
HXDLIN( 456)							while((_g_min5 < _g_max5)){
HXLINE( 456)								_g_min5 = (_g_min5 + 1);
HXDLIN( 456)								int py2 = (_g_min5 - 1);
HXDLIN( 456)								Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN( 456)								Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 456)								Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 456)								Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 456)								Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 456)								Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 456)								bool hitQuad21;
HXDLIN( 456)								bool hitQuad22;
HXDLIN( 456)								if ((ratioA1 >= 0)) {
HXLINE( 456)									hitQuad22 = (ratioB1 >= 0);
            								}
            								else {
HXLINE( 456)									hitQuad22 = false;
            								}
HXDLIN( 456)								if (hitQuad22) {
HXLINE( 456)									hitQuad21 = (ratioC1 >= 0);
            								}
            								else {
HXLINE( 456)									hitQuad21 = false;
            								}
HXDLIN( 456)								if (hitQuad21) {
HXLINE( 456)									int i22 = ::Std_obj::_hx_int((( (Float)(aA1) ) * (soft * ratioB1)));
HXDLIN( 456)									if ((i22 > 255)) {
HXLINE(  24)										i22 = 255;
            									}
HXLINE( 456)									if ((i22 < 0)) {
HXLINE(  25)										i22 = 0;
            									}
HXLINE( 456)									int a19 = i22;
HXDLIN( 456)									int i23 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN( 456)									if ((i23 > 255)) {
HXLINE(  24)										i23 = 255;
            									}
HXLINE( 456)									if ((i23 < 0)) {
HXLINE(  25)										i23 = 0;
            									}
HXLINE( 456)									int r8 = i23;
HXDLIN( 456)									int i24 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN( 456)									if ((i24 > 255)) {
HXLINE(  24)										i24 = 255;
            									}
HXLINE( 456)									if ((i24 < 0)) {
HXLINE(  25)										i24 = 0;
            									}
HXLINE( 456)									int g8 = i24;
HXDLIN( 456)									int i25 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN( 456)									if ((i25 > 255)) {
HXLINE(  24)										i25 = 255;
            									}
HXLINE( 456)									if ((i25 < 0)) {
HXLINE(  25)										i25 = 0;
            									}
HXLINE( 456)									int b26 = i25;
HXDLIN( 456)									{
HXLINE( 456)										int location5;
HXDLIN( 456)										if (pixelImage->useVirtualPos) {
HXLINE( 456)											location5 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 456)											location5 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            										}
HXDLIN( 456)										bool hitQuad23;
HXDLIN( 456)										if (pixelImage->transparent) {
HXLINE( 456)											hitQuad23 = (a19 < 254);
            										}
            										else {
HXLINE( 456)											hitQuad23 = false;
            										}
HXDLIN( 456)										if (hitQuad23) {
HXLINE( 456)											int this87 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN( 456)											int old1;
HXDLIN( 456)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)												old1 = ((((((this87 >> 24) & 255) << 24) | ((this87 & 255) << 16)) | (((this87 >> 8) & 255) << 8)) | ((this87 >> 16) & 255));
            											}
            											else {
HXLINE( 456)												old1 = this87;
            											}
HXDLIN( 456)											int rhs1 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b26);
HXDLIN( 456)											Float a110;
HXDLIN( 456)											int this88 = ((old1 >> 24) & 255);
HXDLIN( 456)											if ((this88 == 0)) {
HXLINE( 456)												a110 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												a110 = (( (Float)(this88) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float r15;
HXDLIN( 456)											int this89 = ((old1 >> 16) & 255);
HXDLIN( 456)											if ((this89 == 0)) {
HXLINE( 456)												r15 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												r15 = (( (Float)(this89) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float g15;
HXDLIN( 456)											int this90 = ((old1 >> 8) & 255);
HXDLIN( 456)											if ((this90 == 0)) {
HXLINE( 456)												g15 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												g15 = (( (Float)(this90) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float b111;
HXDLIN( 456)											int this91 = (old1 & 255);
HXDLIN( 456)											if ((this91 == 0)) {
HXLINE( 456)												b111 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												b111 = (( (Float)(this91) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float a25;
HXDLIN( 456)											int this92 = ((rhs1 >> 24) & 255);
HXDLIN( 456)											if ((this92 == 0)) {
HXLINE( 456)												a25 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												a25 = (( (Float)(this92) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float r25;
HXDLIN( 456)											int this93 = ((rhs1 >> 16) & 255);
HXDLIN( 456)											if ((this93 == 0)) {
HXLINE( 456)												r25 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												r25 = (( (Float)(this93) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float g25;
HXDLIN( 456)											int this94 = ((rhs1 >> 8) & 255);
HXDLIN( 456)											if ((this94 == 0)) {
HXLINE( 456)												g25 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												g25 = (( (Float)(this94) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float b27;
HXDLIN( 456)											int this95 = (rhs1 & 255);
HXDLIN( 456)											if ((this95 == 0)) {
HXLINE( 456)												b27 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												b27 = (( (Float)(this95) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float a35 = (a110 * (( (Float)(1) ) - a25));
HXDLIN( 456)											int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 456)											int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 456)											int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a35) + (b27 * a25))));
HXDLIN( 456)											int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 456)											int blended5 = ((((a20 << 24) | (r9 << 16)) | (g9 << 8)) | b28);
HXDLIN( 456)											{
HXLINE( 456)												int hitQuad24;
HXDLIN( 456)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)													hitQuad24 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            												}
            												else {
HXLINE( 456)													hitQuad24 = blended5;
            												}
HXDLIN( 456)												::iterMagic::Iimg_obj::set(pixelImage->image,location5,hitQuad24);
            											}
            										}
            										else {
HXLINE( 456)											int value1;
HXDLIN( 456)											if (pixelImage->isLittle) {
HXLINE( 456)												value1 = ((((a19 << 24) | (b26 << 16)) | (g8 << 8)) | r8);
            											}
            											else {
HXLINE( 456)												value1 = ((((a19 << 24) | (r8 << 16)) | (g8 << 8)) | b26);
            											}
HXDLIN( 456)											::iterMagic::Iimg_obj::set(pixelImage->image,location5,value1);
            										}
            									}
HXLINE( 633)									found2 = true;
            								}
            								else {
HXLINE( 456)									if (found2) {
HXLINE( 456)										goto _hx_goto_570;
            									}
            								}
            							}
            							_hx_goto_570:;
            						}
            					}
            				}
HXDLIN( 456)				 ::pi_xy::iter::IntIterStart v_yIter31;
HXDLIN( 456)				 ::pi_xy::iter::IntIterStart v_xIter31;
HXDLIN( 456)				int v_undoY1;
HXDLIN( 456)				int v_undoX1;
HXDLIN( 456)				Float v_ty1;
HXDLIN( 456)				Float v_tx1;
HXDLIN( 456)				Float v_t01;
HXDLIN( 456)				Float v_sy1;
HXDLIN( 456)				Float v_sx1;
HXDLIN( 456)				Float v_s01;
HXDLIN( 456)				Float v_A1;
HXDLIN( 456)				Float ax2 = ex;
HXDLIN( 456)				Float ay2 = ey;
HXDLIN( 456)				 ::pi_xy::ImageStruct v_undoImage1 = null();
HXDLIN( 456)				Float bx3 = cx;
HXDLIN( 456)				Float by3 = cy;
HXDLIN( 456)				Float cx3 = dx;
HXDLIN( 456)				Float cy3 = dy;
HXDLIN( 456)				bool adjustWinding2 = (((((ax2 * by3) - (bx3 * ay2)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * ay2) - (ax2 * cy3))) > 0);
HXDLIN( 456)				if (!(adjustWinding2)) {
HXLINE( 456)					Float bx_2 = bx3;
HXDLIN( 456)					Float by_2 = by3;
HXLINE(  24)					bx3 = cx3;
HXLINE(  25)					by3 = cy3;
HXLINE(  26)					cx3 = bx_2;
HXLINE(  27)					cy3 = by_2;
            				}
HXLINE( 456)				Float v_ax1 = ax2;
HXDLIN( 456)				Float v_ay1 = ay2;
HXDLIN( 456)				Float v_bx1 = bx3;
HXDLIN( 456)				Float v_by1 = by3;
HXDLIN( 456)				Float v_cx1 = cx3;
HXDLIN( 456)				Float v_cy1 = cy3;
HXDLIN( 456)				bool v_preCalculated1 = true;
HXDLIN( 456)				{
HXLINE( 456)					v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN( 456)					v_sx1 = (v_cy1 - v_ay1);
HXDLIN( 456)					v_sy1 = (v_ax1 - v_cx1);
HXDLIN( 456)					v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN( 456)					v_tx1 = (v_ay1 - v_by1);
HXDLIN( 456)					v_ty1 = (v_bx1 - v_ax1);
HXDLIN( 456)					v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN( 456)					Float a26 = v_ax1;
HXDLIN( 456)					Float b29 = v_bx1;
HXDLIN( 456)					Float c12 = v_cx1;
HXDLIN( 456)					if ((a26 > b29)) {
HXLINE( 456)						if ((a26 > c12)) {
HXLINE( 456)							int min16;
HXDLIN( 456)							if ((b29 > c12)) {
HXLINE( 456)								min16 = ::Math_obj::floor(c12);
            							}
            							else {
HXLINE( 456)								min16 = ::Math_obj::floor(b29);
            							}
HXDLIN( 456)							int ii_min32 = min16;
HXDLIN( 456)							int ii_max32 = ::Math_obj::ceil(a26);
HXDLIN( 456)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            						}
            						else {
HXLINE( 456)							int ii_min33 = ::Math_obj::floor(b29);
HXDLIN( 456)							int ii_max33 = ::Math_obj::ceil(c12);
HXDLIN( 456)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            						}
            					}
            					else {
HXLINE( 456)						if ((b29 > c12)) {
HXLINE( 456)							int min17;
HXDLIN( 456)							if ((a26 > c12)) {
HXLINE( 456)								min17 = ::Math_obj::floor(c12);
            							}
            							else {
HXLINE( 456)								min17 = ::Math_obj::ceil(a26);
            							}
HXDLIN( 456)							int ii_min34 = min17;
HXDLIN( 456)							int ii_max34 = ::Math_obj::ceil(b29);
HXDLIN( 456)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            						}
            						else {
HXLINE( 456)							int ii_min35 = ::Math_obj::floor(a26);
HXDLIN( 456)							int ii_max35 = ::Math_obj::ceil(c12);
HXDLIN( 456)							v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            						}
            					}
HXDLIN( 456)					Float a27 = v_ay1;
HXDLIN( 456)					Float b30 = v_by1;
HXDLIN( 456)					Float c13 = v_cy1;
HXDLIN( 456)					if ((a27 > b30)) {
HXLINE( 456)						if ((a27 > c13)) {
HXLINE( 456)							int min18;
HXDLIN( 456)							if ((b30 > c13)) {
HXLINE( 456)								min18 = ::Math_obj::floor(c13);
            							}
            							else {
HXLINE( 456)								min18 = ::Math_obj::floor(b30);
            							}
HXDLIN( 456)							int ii_min36 = min18;
HXDLIN( 456)							int ii_max36 = ::Math_obj::ceil(a27);
HXDLIN( 456)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            						}
            						else {
HXLINE( 456)							int ii_min37 = ::Math_obj::floor(b30);
HXDLIN( 456)							int ii_max37 = ::Math_obj::ceil(c13);
HXDLIN( 456)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            						}
            					}
            					else {
HXLINE( 456)						if ((b30 > c13)) {
HXLINE( 456)							int min19;
HXDLIN( 456)							if ((a27 > c13)) {
HXLINE( 456)								min19 = ::Math_obj::floor(c13);
            							}
            							else {
HXLINE( 456)								min19 = ::Math_obj::ceil(a27);
            							}
HXDLIN( 456)							int ii_min38 = min19;
HXDLIN( 456)							int ii_max38 = ::Math_obj::ceil(b30);
HXDLIN( 456)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            						}
            						else {
HXLINE( 456)							int ii_min39 = ::Math_obj::floor(a27);
HXDLIN( 456)							int ii_max39 = ::Math_obj::ceil(c13);
HXDLIN( 456)							v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            						}
            					}
            				}
HXDLIN( 456)				if (hasUndo2) {
HXLINE( 456)					v_undoImage1 = undoImage6;
HXDLIN( 456)					v_undoX1 = xIter32->start;
HXDLIN( 456)					v_undoY1 = yIter32->start;
            				}
HXDLIN( 456)				bool hasUndo3 = false;
HXDLIN( 456)				int aA2 = ((color >> 24) & 255);
HXDLIN( 456)				int rA2 = ((color >> 16) & 255);
HXDLIN( 456)				int gA2 = ((color >> 8) & 255);
HXDLIN( 456)				int bA2 = (color & 255);
HXDLIN( 456)				Float bcx2 = (dx - ax);
HXDLIN( 456)				Float bcy2 = (dy - ay);
HXDLIN( 456)				Float acx2 = (ex - ax);
HXDLIN( 456)				Float acy2 = (ey - ay);
HXDLIN( 456)				Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 456)				Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 456)				Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 456)				Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 456)				 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 456)				if ((ex > dx)) {
HXLINE( 456)					if ((ex > ax)) {
HXLINE( 456)						int min20;
HXDLIN( 456)						if ((dx > ax)) {
HXLINE( 456)							min20 = ::Math_obj::floor(ax);
            						}
            						else {
HXLINE( 456)							min20 = ::Math_obj::floor(dx);
            						}
HXDLIN( 456)						int ii_min40 = min20;
HXDLIN( 456)						int ii_max40 = ::Math_obj::ceil(ex);
HXDLIN( 456)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            					}
            					else {
HXLINE( 456)						int ii_min41 = ::Math_obj::floor(dx);
HXDLIN( 456)						int ii_max41 = ::Math_obj::ceil(ax);
HXDLIN( 456)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            					}
            				}
            				else {
HXLINE( 456)					if ((dx > ax)) {
HXLINE( 456)						int min21;
HXDLIN( 456)						if ((ex > ax)) {
HXLINE( 456)							min21 = ::Math_obj::floor(ax);
            						}
            						else {
HXLINE( 456)							min21 = ::Math_obj::ceil(ex);
            						}
HXDLIN( 456)						int ii_min42 = min21;
HXDLIN( 456)						int ii_max42 = ::Math_obj::ceil(dx);
HXDLIN( 456)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            					}
            					else {
HXLINE( 456)						int ii_min43 = ::Math_obj::floor(ex);
HXDLIN( 456)						int ii_max43 = ::Math_obj::ceil(ax);
HXDLIN( 456)						xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            					}
            				}
HXDLIN( 456)				 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 456)				if ((ey > dy)) {
HXLINE( 456)					if ((ey > ay)) {
HXLINE( 456)						int min22;
HXDLIN( 456)						if ((dy > ay)) {
HXLINE( 456)							min22 = ::Math_obj::floor(ay);
            						}
            						else {
HXLINE( 456)							min22 = ::Math_obj::floor(dy);
            						}
HXDLIN( 456)						int ii_min44 = min22;
HXDLIN( 456)						int ii_max44 = ::Math_obj::ceil(ey);
HXDLIN( 456)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            					}
            					else {
HXLINE( 456)						int ii_min45 = ::Math_obj::floor(dy);
HXDLIN( 456)						int ii_max45 = ::Math_obj::ceil(ay);
HXDLIN( 456)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            					}
            				}
            				else {
HXLINE( 456)					if ((dy > ay)) {
HXLINE( 456)						int min23;
HXDLIN( 456)						if ((ey > ay)) {
HXLINE( 456)							min23 = ::Math_obj::floor(ay);
            						}
            						else {
HXLINE( 456)							min23 = ::Math_obj::ceil(ey);
            						}
HXDLIN( 456)						int ii_min46 = min23;
HXDLIN( 456)						int ii_max46 = ::Math_obj::ceil(dy);
HXDLIN( 456)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            					}
            					else {
HXLINE( 456)						int ii_min47 = ::Math_obj::floor(ey);
HXDLIN( 456)						int ii_max47 = ::Math_obj::ceil(ay);
HXDLIN( 456)						yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            					}
            				}
HXDLIN( 456)				 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 456)				if (hasUndo3) {
HXLINE( 456)					int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 456)					int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 456)					 ::Dynamic imageType3 = null();
HXDLIN( 456)					 ::pi_xy::ImageStruct this96 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 456)					if (::hx::IsNull( imageType3 )) {
HXLINE(  54)						imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 456)					::Dynamic undoImage10;
HXDLIN( 456)					switch((int)(( (int)(imageType3) ))){
            						case (int)0: {
HXLINE( 456)							 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::BytesImg b31 = byt3;
HXDLIN( 456)							{
HXLINE( 456)								b31->width = width3;
HXDLIN( 456)								b31->height = height3;
HXDLIN( 456)								b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 456)								b31->data = ::haxe::io::Bytes_obj::alloc((b31->length * 4));
HXDLIN( 456)								{
HXLINE( 456)									int len6 = b31->length;
HXDLIN( 456)									int w3 = 0;
HXDLIN( 456)									{
HXLINE( 456)										int _g60 = 0;
HXDLIN( 456)										int _g61 = b31->height;
HXDLIN( 456)										while((_g60 < _g61)){
HXLINE( 456)											_g60 = (_g60 + 1);
HXDLIN( 456)											int y10 = (_g60 - 1);
HXDLIN( 456)											{
HXLINE( 456)												int _g62 = 0;
HXDLIN( 456)												int _g63 = b31->width;
HXDLIN( 456)												while((_g62 < _g63)){
HXLINE( 456)													_g62 = (_g62 + 1);
HXDLIN( 456)													int x10 = (_g62 - 1);
HXDLIN( 456)													{
HXLINE( 456)														w3 = (w3 + 1);
HXDLIN( 456)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 456)													{
HXLINE( 456)														w3 = (w3 + 1);
HXDLIN( 456)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 456)													{
HXLINE( 456)														w3 = (w3 + 1);
HXDLIN( 456)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 456)													{
HXLINE( 456)														w3 = (w3 + 1);
HXDLIN( 456)														b31->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 456)							undoImage10 = b31;
            						}
            						break;
            						case (int)1: {
HXLINE( 456)							 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::ArrIntImg a28 = arrI3;
HXDLIN( 456)							{
HXLINE( 456)								a28->width = width3;
HXDLIN( 456)								a28->height = height3;
HXDLIN( 456)								a28->data = ::Array_obj< int >::__new(0);
HXDLIN( 456)								a28->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 456)								{
HXLINE( 456)									int _g64 = 0;
HXDLIN( 456)									int _g65 = a28->length;
HXDLIN( 456)									while((_g64 < _g65)){
HXLINE( 456)										_g64 = (_g64 + 1);
HXDLIN( 456)										int i26 = (_g64 - 1);
HXDLIN( 456)										a28->data[i26] = 0;
            									}
            								}
            							}
HXDLIN( 456)							undoImage10 = a28;
            						}
            						break;
            						case (int)2: {
HXLINE( 456)							 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::U32ArrImg b32 = u32a3;
HXDLIN( 456)							{
HXLINE( 456)								b32->width = width3;
HXDLIN( 456)								b32->height = height3;
HXDLIN( 456)								b32->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 456)								int size3 = (b32->length * 4);
HXDLIN( 456)								b32->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 456)								{
HXLINE( 456)									int _g66 = 0;
HXDLIN( 456)									int _g67 = b32->length;
HXDLIN( 456)									while((_g66 < _g67)){
HXLINE( 456)										_g66 = (_g66 + 1);
HXDLIN( 456)										int i27 = (_g66 - 1);
HXDLIN( 456)										{
HXLINE( 456)											 ::haxe::io::ArrayBufferViewImpl this97 = b32->data;
HXDLIN( 456)											bool undoImage11;
HXDLIN( 456)											if ((i27 >= 0)) {
HXLINE( 456)												undoImage11 = (i27 < (this97->byteLength >> 2));
            											}
            											else {
HXLINE( 456)												undoImage11 = false;
            											}
HXDLIN( 456)											if (undoImage11) {
HXLINE( 456)												 ::haxe::io::Bytes _this3 = this97->bytes;
HXDLIN( 456)												int pos3 = ((i27 << 2) + this97->byteOffset);
HXDLIN( 456)												_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 456)												_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 456)												_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 456)												_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 456)							undoImage10 = b32;
            						}
            						break;
            						case (int)3: {
HXLINE( 456)							 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::VecIntImg v6 = vec3;
HXDLIN( 456)							{
HXLINE( 456)								v6->width = width3;
HXDLIN( 456)								v6->height = height3;
HXDLIN( 456)								v6->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 456)								v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN( 456)								{
HXLINE( 456)									int _g68 = 0;
HXDLIN( 456)									int _g69 = v6->length;
HXDLIN( 456)									while((_g68 < _g69)){
HXLINE( 456)										_g68 = (_g68 + 1);
HXDLIN( 456)										int i28 = (_g68 - 1);
HXDLIN( 456)										v6->data->__unsafe_set(i28,0);
            									}
            								}
            							}
HXDLIN( 456)							undoImage10 = v6;
            						}
            						break;
            						case (int)4: {
HXLINE( 456)							 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 456)							 ::iterMagic::StackIntImg b33 = sInt3;
HXDLIN( 456)							{
HXLINE( 456)								b33->width = width3;
HXDLIN( 456)								b33->height = height3;
HXDLIN( 456)								b33->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 456)								b33->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 456)								{
HXLINE( 456)									int len7 = b33->length;
HXDLIN( 456)									 ::haxe::ds::GenericStack_Int d3 = b33->data;
HXDLIN( 456)									if (::hx::IsNull( d3->head )) {
HXLINE( 456)										int _g70 = 0;
HXDLIN( 456)										int _g71 = len7;
HXDLIN( 456)										while((_g70 < _g71)){
HXLINE( 456)											_g70 = (_g70 + 1);
HXDLIN( 456)											int i29 = (_g70 - 1);
HXDLIN( 456)											d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            										}
            									}
            									else {
HXLINE( 456)										int _g72 = 0;
HXDLIN( 456)										int _g73 = len7;
HXDLIN( 456)										while((_g72 < _g73)){
HXLINE( 456)											_g72 = (_g72 + 1);
HXDLIN( 456)											int i30 = (_g72 - 1);
HXDLIN( 456)											{
HXLINE( 456)												 ::haxe::ds::GenericCell_Int l3 = b33->data->head;
HXDLIN( 456)												 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 456)												{
HXLINE( 456)													int _g74 = 0;
HXDLIN( 456)													int _g75 = i30;
HXDLIN( 456)													while((_g74 < _g75)){
HXLINE( 456)														_g74 = (_g74 + 1);
HXDLIN( 456)														int i31 = (_g74 - 1);
HXLINE( 345)														prev3 = l3;
HXLINE( 346)														l3 = l3->next;
            													}
            												}
HXLINE( 456)												if (::hx::IsNull( prev3 )) {
HXLINE( 456)													b33->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 456)													l3 = null();
            												}
            												else {
HXLINE( 456)													prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 456)													l3 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 456)							undoImage10 = b33;
            						}
            						break;
            					}
HXDLIN( 456)					this96->image = undoImage10;
HXDLIN( 456)					this96->width = width3;
HXDLIN( 456)					this96->height = height3;
HXDLIN( 456)					this96->imageType = ( (int)(imageType3) );
HXDLIN( 456)					undoImage9 = this96;
HXDLIN( 456)					{
HXLINE( 456)						int rectLeft3 = xIter33->start;
HXDLIN( 456)						int rectTop3 = yIter33->start;
HXDLIN( 456)						int rectRight3 = xIter33->max;
HXDLIN( 456)						bool forceClear3 = false;
HXDLIN( 456)						{
HXLINE( 456)							int _g76 = rectTop3;
HXDLIN( 456)							int _g77 = yIter33->max;
HXDLIN( 456)							while((_g76 < _g77)){
HXLINE( 456)								_g76 = (_g76 + 1);
HXDLIN( 456)								int dy4 = (_g76 - 1);
HXDLIN( 456)								{
HXLINE( 456)									int _g78 = rectLeft3;
HXDLIN( 456)									int _g79 = rectRight3;
HXDLIN( 456)									while((_g78 < _g79)){
HXLINE( 456)										_g78 = (_g78 + 1);
HXDLIN( 456)										int dx4 = (_g78 - 1);
HXDLIN( 456)										::Dynamic this98 = pixelImage->image;
HXDLIN( 456)										int index13;
HXDLIN( 456)										if (pixelImage->useVirtualPos) {
HXLINE( 456)											index13 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 456)											index13 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            										}
HXDLIN( 456)										int c14 = ::iterMagic::Iimg_obj::get(this98,index13);
HXDLIN( 456)										int col3;
HXDLIN( 456)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)											col3 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            										}
            										else {
HXLINE( 456)											col3 = c14;
            										}
HXDLIN( 456)										bool hitQuad25;
HXDLIN( 456)										if (pixelImage->useMask) {
HXLINE( 456)											hitQuad25 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 456)											hitQuad25 = false;
            										}
HXDLIN( 456)										if (hitQuad25) {
HXLINE( 456)											 ::pi_xy::ImageStruct this99 = pixelImage->mask;
HXDLIN( 456)											::Dynamic this100 = this99->image;
HXDLIN( 456)											int index14;
HXDLIN( 456)											if (this99->useVirtualPos) {
HXLINE( 456)												index14 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this99->virtualY) * ( (Float)(this99->width) )) + dx4) - this99->virtualX));
            											}
            											else {
HXLINE( 456)												index14 = ::Std_obj::_hx_int(( (Float)(((dy4 * this99->width) + dx4)) ));
            											}
HXDLIN( 456)											int c15 = ::iterMagic::Iimg_obj::get(this100,index14);
HXDLIN( 456)											int v7;
HXDLIN( 456)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)												v7 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            											}
            											else {
HXLINE( 456)												v7 = c15;
            											}
HXDLIN( 456)											int maskPixel3 = v7;
HXDLIN( 456)											int this101 = col3;
HXDLIN( 456)											if ((maskPixel3 == 0)) {
HXLINE( 456)												col3 = this101;
            											}
            											else {
HXLINE( 456)												Float m03;
HXDLIN( 456)												int this102 = ((maskPixel3 >> 24) & 255);
HXDLIN( 456)												if ((this102 == 0)) {
HXLINE( 456)													m03 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													m03 = (( (Float)(this102) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float m13;
HXDLIN( 456)												int this103 = ((maskPixel3 >> 16) & 255);
HXDLIN( 456)												if ((this103 == 0)) {
HXLINE( 456)													m13 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													m13 = (( (Float)(this103) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float m23;
HXDLIN( 456)												int this104 = ((maskPixel3 >> 8) & 255);
HXDLIN( 456)												if ((this104 == 0)) {
HXLINE( 456)													m23 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													m23 = (( (Float)(this104) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float m33;
HXDLIN( 456)												int this105 = (maskPixel3 & 255);
HXDLIN( 456)												if ((this105 == 0)) {
HXLINE( 456)													m33 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													m33 = (( (Float)(this105) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this101 >> 24) & 255)) )));
HXDLIN( 456)												int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this101 >> 16) & 255)) )));
HXDLIN( 456)												int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this101 >> 8) & 255)) )));
HXDLIN( 456)												int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this101 & 255)) )));
HXDLIN( 456)												col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 456)										if ((col3 != 0)) {
HXLINE( 456)											int x11 = (dx4 - rectLeft3);
HXDLIN( 456)											int y11 = (dy4 - rectTop3);
HXDLIN( 456)											int c16 = col3;
HXDLIN( 456)											bool hitQuad26;
HXDLIN( 456)											if ((((c16 >> 24) & 255) < 254)) {
HXLINE( 456)												hitQuad26 = undoImage9->transparent;
            											}
            											else {
HXLINE( 456)												hitQuad26 = false;
            											}
HXDLIN( 456)											if (hitQuad26) {
HXLINE( 456)												int location6;
HXDLIN( 456)												if (undoImage9->useVirtualPos) {
HXLINE( 456)													location6 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            												}
            												else {
HXLINE( 456)													location6 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            												}
HXDLIN( 456)												int this106 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 456)												int this107;
HXDLIN( 456)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)													this107 = ((((((this106 >> 24) & 255) << 24) | ((this106 & 255) << 16)) | (((this106 >> 8) & 255) << 8)) | ((this106 >> 16) & 255));
            												}
            												else {
HXLINE( 456)													this107 = this106;
            												}
HXDLIN( 456)												Float a111;
HXDLIN( 456)												int this108 = ((this107 >> 24) & 255);
HXDLIN( 456)												if ((this108 == 0)) {
HXLINE( 456)													a111 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													a111 = (( (Float)(this108) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float r16;
HXDLIN( 456)												int this109 = ((this107 >> 16) & 255);
HXDLIN( 456)												if ((this109 == 0)) {
HXLINE( 456)													r16 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													r16 = (( (Float)(this109) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float g16;
HXDLIN( 456)												int this110 = ((this107 >> 8) & 255);
HXDLIN( 456)												if ((this110 == 0)) {
HXLINE( 456)													g16 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													g16 = (( (Float)(this110) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float b112;
HXDLIN( 456)												int this111 = (this107 & 255);
HXDLIN( 456)												if ((this111 == 0)) {
HXLINE( 456)													b112 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													b112 = (( (Float)(this111) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float a29;
HXDLIN( 456)												int this112 = ((col3 >> 24) & 255);
HXDLIN( 456)												if ((this112 == 0)) {
HXLINE( 456)													a29 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													a29 = (( (Float)(this112) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float r26;
HXDLIN( 456)												int this113 = ((col3 >> 16) & 255);
HXDLIN( 456)												if ((this113 == 0)) {
HXLINE( 456)													r26 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													r26 = (( (Float)(this113) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float g26;
HXDLIN( 456)												int this114 = ((col3 >> 8) & 255);
HXDLIN( 456)												if ((this114 == 0)) {
HXLINE( 456)													g26 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													g26 = (( (Float)(this114) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float b210;
HXDLIN( 456)												int this115 = (col3 & 255);
HXDLIN( 456)												if ((this115 == 0)) {
HXLINE( 456)													b210 = ((Float)0.);
            												}
            												else {
HXLINE( 456)													b210 = (( (Float)(this115) ) / ( (Float)(255) ));
            												}
HXDLIN( 456)												Float a36 = (a111 * (( (Float)(1) ) - a29));
HXDLIN( 456)												int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a29))));
HXDLIN( 456)												int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a29))));
HXDLIN( 456)												int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a36) + (b210 * a29))));
HXDLIN( 456)												int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a29)));
HXDLIN( 456)												int blended6 = ((((a30 << 24) | (r10 << 16)) | (g10 << 8)) | b34);
HXDLIN( 456)												{
HXLINE( 456)													int hitQuad27;
HXDLIN( 456)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)														hitQuad27 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            													}
            													else {
HXLINE( 456)														hitQuad27 = blended6;
            													}
HXDLIN( 456)													::iterMagic::Iimg_obj::set(undoImage9->image,location6,hitQuad27);
            												}
            											}
            											else {
HXLINE( 456)												::Dynamic this116 = undoImage9->image;
HXDLIN( 456)												int index15;
HXDLIN( 456)												if (undoImage9->useVirtualPos) {
HXLINE( 456)													index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            												}
            												else {
HXLINE( 456)													index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            												}
HXDLIN( 456)												int hitQuad28;
HXDLIN( 456)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)													hitQuad28 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            												}
            												else {
HXLINE( 456)													hitQuad28 = c16;
            												}
HXDLIN( 456)												::iterMagic::Iimg_obj::set(this116,index15,hitQuad28);
            											}
            										}
            										else {
HXLINE( 456)											if (forceClear3) {
HXLINE( 456)												::Dynamic this117 = undoImage9->image;
HXDLIN( 456)												int x12 = (dx4 - rectLeft3);
HXDLIN( 456)												int y12 = (dy4 - rectTop3);
HXDLIN( 456)												int index16;
HXDLIN( 456)												if (undoImage9->useVirtualPos) {
HXLINE( 456)													index16 = ::Std_obj::_hx_int(((((( (Float)(y12) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x12) - undoImage9->virtualX));
            												}
            												else {
HXLINE( 456)													index16 = ::Std_obj::_hx_int(( (Float)(((y12 * undoImage9->width) + x12)) ));
            												}
HXDLIN( 456)												::iterMagic::Iimg_obj::set(this117,index16,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 456)				bool found3 = false;
HXDLIN( 456)				{
HXLINE( 456)					int _g_min6 = xIter33->start;
HXDLIN( 456)					int _g_max6 = xIter33->max;
HXDLIN( 456)					while((_g_min6 < _g_max6)){
HXLINE( 456)						_g_min6 = (_g_min6 + 1);
HXDLIN( 456)						int px3 = (_g_min6 - 1);
HXDLIN( 456)						Float pcx2 = (( (Float)(px3) ) - ax);
HXLINE( 619)						found3 = false;
HXLINE( 456)						{
HXLINE( 456)							int _g_min7 = yIter33->start;
HXDLIN( 456)							int _g_max7 = yIter33->max;
HXDLIN( 456)							while((_g_min7 < _g_max7)){
HXLINE( 456)								_g_min7 = (_g_min7 + 1);
HXDLIN( 456)								int py3 = (_g_min7 - 1);
HXDLIN( 456)								Float pcy2 = (( (Float)(py3) ) - ay);
HXDLIN( 456)								Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 456)								Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 456)								Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 456)								Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 456)								Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 456)								bool hitQuad29;
HXDLIN( 456)								bool hitQuad30;
HXDLIN( 456)								if ((ratioA2 >= 0)) {
HXLINE( 456)									hitQuad30 = (ratioB2 >= 0);
            								}
            								else {
HXLINE( 456)									hitQuad30 = false;
            								}
HXDLIN( 456)								if (hitQuad30) {
HXLINE( 456)									hitQuad29 = (ratioC2 >= 0);
            								}
            								else {
HXLINE( 456)									hitQuad29 = false;
            								}
HXDLIN( 456)								if (hitQuad29) {
HXLINE( 456)									int i32 = ::Std_obj::_hx_int((( (Float)(aA2) ) * (soft * ratioB2)));
HXDLIN( 456)									if ((i32 > 255)) {
HXLINE(  24)										i32 = 255;
            									}
HXLINE( 456)									if ((i32 < 0)) {
HXLINE(  25)										i32 = 0;
            									}
HXLINE( 456)									int a37 = i32;
HXDLIN( 456)									int i33 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN( 456)									if ((i33 > 255)) {
HXLINE(  24)										i33 = 255;
            									}
HXLINE( 456)									if ((i33 < 0)) {
HXLINE(  25)										i33 = 0;
            									}
HXLINE( 456)									int r17 = i33;
HXDLIN( 456)									int i34 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN( 456)									if ((i34 > 255)) {
HXLINE(  24)										i34 = 255;
            									}
HXLINE( 456)									if ((i34 < 0)) {
HXLINE(  25)										i34 = 0;
            									}
HXLINE( 456)									int g17 = i34;
HXDLIN( 456)									int i35 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN( 456)									if ((i35 > 255)) {
HXLINE(  24)										i35 = 255;
            									}
HXLINE( 456)									if ((i35 < 0)) {
HXLINE(  25)										i35 = 0;
            									}
HXLINE( 456)									int b35 = i35;
HXDLIN( 456)									{
HXLINE( 456)										int location7;
HXDLIN( 456)										if (pixelImage->useVirtualPos) {
HXLINE( 456)											location7 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px3) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 456)											location7 = ::Std_obj::_hx_int(( (Float)(((py3 * pixelImage->width) + px3)) ));
            										}
HXDLIN( 456)										bool hitQuad31;
HXDLIN( 456)										if (pixelImage->transparent) {
HXLINE( 456)											hitQuad31 = (a37 < 254);
            										}
            										else {
HXLINE( 456)											hitQuad31 = false;
            										}
HXDLIN( 456)										if (hitQuad31) {
HXLINE( 456)											int this118 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN( 456)											int old2;
HXDLIN( 456)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)												old2 = ((((((this118 >> 24) & 255) << 24) | ((this118 & 255) << 16)) | (((this118 >> 8) & 255) << 8)) | ((this118 >> 16) & 255));
            											}
            											else {
HXLINE( 456)												old2 = this118;
            											}
HXDLIN( 456)											int rhs2 = ((((a37 << 24) | (r17 << 16)) | (g17 << 8)) | b35);
HXDLIN( 456)											Float a112;
HXDLIN( 456)											int this119 = ((old2 >> 24) & 255);
HXDLIN( 456)											if ((this119 == 0)) {
HXLINE( 456)												a112 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												a112 = (( (Float)(this119) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float r18;
HXDLIN( 456)											int this120 = ((old2 >> 16) & 255);
HXDLIN( 456)											if ((this120 == 0)) {
HXLINE( 456)												r18 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												r18 = (( (Float)(this120) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float g18;
HXDLIN( 456)											int this121 = ((old2 >> 8) & 255);
HXDLIN( 456)											if ((this121 == 0)) {
HXLINE( 456)												g18 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												g18 = (( (Float)(this121) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float b113;
HXDLIN( 456)											int this122 = (old2 & 255);
HXDLIN( 456)											if ((this122 == 0)) {
HXLINE( 456)												b113 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												b113 = (( (Float)(this122) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float a210;
HXDLIN( 456)											int this123 = ((rhs2 >> 24) & 255);
HXDLIN( 456)											if ((this123 == 0)) {
HXLINE( 456)												a210 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												a210 = (( (Float)(this123) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float r27;
HXDLIN( 456)											int this124 = ((rhs2 >> 16) & 255);
HXDLIN( 456)											if ((this124 == 0)) {
HXLINE( 456)												r27 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												r27 = (( (Float)(this124) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float g27;
HXDLIN( 456)											int this125 = ((rhs2 >> 8) & 255);
HXDLIN( 456)											if ((this125 == 0)) {
HXLINE( 456)												g27 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												g27 = (( (Float)(this125) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float b211;
HXDLIN( 456)											int this126 = (rhs2 & 255);
HXDLIN( 456)											if ((this126 == 0)) {
HXLINE( 456)												b211 = ((Float)0.);
            											}
            											else {
HXLINE( 456)												b211 = (( (Float)(this126) ) / ( (Float)(255) ));
            											}
HXDLIN( 456)											Float a38 = (a112 * (( (Float)(1) ) - a210));
HXDLIN( 456)											int r19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r18 * a38) + (r27 * a210))));
HXDLIN( 456)											int g19 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g18 * a38) + (g27 * a210))));
HXDLIN( 456)											int b36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a38) + (b211 * a210))));
HXDLIN( 456)											int a39 = ::Std_obj::_hx_int((( (Float)(255) ) * (a38 + a210)));
HXDLIN( 456)											int blended7 = ((((a39 << 24) | (r19 << 16)) | (g19 << 8)) | b36);
HXDLIN( 456)											{
HXLINE( 456)												int hitQuad32;
HXDLIN( 456)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 456)													hitQuad32 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            												}
            												else {
HXLINE( 456)													hitQuad32 = blended7;
            												}
HXDLIN( 456)												::iterMagic::Iimg_obj::set(pixelImage->image,location7,hitQuad32);
            											}
            										}
            										else {
HXLINE( 456)											int value2;
HXDLIN( 456)											if (pixelImage->isLittle) {
HXLINE( 456)												value2 = ((((a37 << 24) | (b35 << 16)) | (g17 << 8)) | r17);
            											}
            											else {
HXLINE( 456)												value2 = ((((a37 << 24) | (r17 << 16)) | (g17 << 8)) | b35);
            											}
HXDLIN( 456)											::iterMagic::Iimg_obj::set(pixelImage->image,location7,value2);
            										}
            									}
HXLINE( 633)									found3 = true;
            								}
            								else {
HXLINE( 456)									if (found3) {
HXLINE( 456)										goto _hx_goto_582;
            									}
            								}
            							}
            							_hx_goto_582:;
            						}
            					}
            				}
HXDLIN( 456)				 ::pi_xy::iter::IntIterStart v_yIter32;
HXDLIN( 456)				 ::pi_xy::iter::IntIterStart v_xIter32;
HXDLIN( 456)				int v_undoY2;
HXDLIN( 456)				int v_undoX2;
HXDLIN( 456)				Float v_ty2;
HXDLIN( 456)				Float v_tx2;
HXDLIN( 456)				Float v_t02;
HXDLIN( 456)				Float v_sy2;
HXDLIN( 456)				Float v_sx2;
HXDLIN( 456)				Float v_s02;
HXDLIN( 456)				Float v_A2;
HXDLIN( 456)				Float ax3 = ex;
HXDLIN( 456)				Float ay3 = ey;
HXDLIN( 456)				 ::pi_xy::ImageStruct v_undoImage2 = null();
HXDLIN( 456)				Float bx4 = dx;
HXDLIN( 456)				Float by4 = dy;
HXDLIN( 456)				Float cx4 = ax;
HXDLIN( 456)				Float cy4 = ay;
HXDLIN( 456)				bool adjustWinding3 = (((((ax3 * by4) - (bx4 * ay3)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay3) - (ax3 * cy4))) > 0);
HXDLIN( 456)				if (!(adjustWinding3)) {
HXLINE( 456)					Float bx_3 = bx4;
HXDLIN( 456)					Float by_3 = by4;
HXLINE(  24)					bx4 = cx4;
HXLINE(  25)					by4 = cy4;
HXLINE(  26)					cx4 = bx_3;
HXLINE(  27)					cy4 = by_3;
            				}
HXLINE( 456)				Float v_ax2 = ax3;
HXDLIN( 456)				Float v_ay2 = ay3;
HXDLIN( 456)				Float v_bx2 = bx4;
HXDLIN( 456)				Float v_by2 = by4;
HXDLIN( 456)				Float v_cx2 = cx4;
HXDLIN( 456)				Float v_cy2 = cy4;
HXDLIN( 456)				bool v_preCalculated2 = true;
HXDLIN( 456)				{
HXLINE( 456)					v_s02 = ((v_ay2 * v_cx2) - (v_ax2 * v_cy2));
HXDLIN( 456)					v_sx2 = (v_cy2 - v_ay2);
HXDLIN( 456)					v_sy2 = (v_ax2 - v_cx2);
HXDLIN( 456)					v_t02 = ((v_ax2 * v_by2) - (v_ay2 * v_bx2));
HXDLIN( 456)					v_tx2 = (v_ay2 - v_by2);
HXDLIN( 456)					v_ty2 = (v_bx2 - v_ax2);
HXDLIN( 456)					v_A2 = ((((-(v_by2) * v_cx2) + (v_ay2 * (-(v_bx2) + v_cx2))) + (v_ax2 * (v_by2 - v_cy2))) + (v_bx2 * v_cy2));
HXDLIN( 456)					Float a40 = v_ax2;
HXDLIN( 456)					Float b37 = v_bx2;
HXDLIN( 456)					Float c17 = v_cx2;
HXDLIN( 456)					if ((a40 > b37)) {
HXLINE( 456)						if ((a40 > c17)) {
HXLINE( 456)							int min24;
HXDLIN( 456)							if ((b37 > c17)) {
HXLINE( 456)								min24 = ::Math_obj::floor(c17);
            							}
            							else {
HXLINE( 456)								min24 = ::Math_obj::floor(b37);
            							}
HXDLIN( 456)							int ii_min48 = min24;
HXDLIN( 456)							int ii_max48 = ::Math_obj::ceil(a40);
HXDLIN( 456)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            						}
            						else {
HXLINE( 456)							int ii_min49 = ::Math_obj::floor(b37);
HXDLIN( 456)							int ii_max49 = ::Math_obj::ceil(c17);
HXDLIN( 456)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            						}
            					}
            					else {
HXLINE( 456)						if ((b37 > c17)) {
HXLINE( 456)							int min25;
HXDLIN( 456)							if ((a40 > c17)) {
HXLINE( 456)								min25 = ::Math_obj::floor(c17);
            							}
            							else {
HXLINE( 456)								min25 = ::Math_obj::ceil(a40);
            							}
HXDLIN( 456)							int ii_min50 = min25;
HXDLIN( 456)							int ii_max50 = ::Math_obj::ceil(b37);
HXDLIN( 456)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            						}
            						else {
HXLINE( 456)							int ii_min51 = ::Math_obj::floor(a40);
HXDLIN( 456)							int ii_max51 = ::Math_obj::ceil(c17);
HXDLIN( 456)							v_xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            						}
            					}
HXDLIN( 456)					Float a41 = v_ay2;
HXDLIN( 456)					Float b38 = v_by2;
HXDLIN( 456)					Float c18 = v_cy2;
HXDLIN( 456)					if ((a41 > b38)) {
HXLINE( 456)						if ((a41 > c18)) {
HXLINE( 456)							int min26;
HXDLIN( 456)							if ((b38 > c18)) {
HXLINE( 456)								min26 = ::Math_obj::floor(c18);
            							}
            							else {
HXLINE( 456)								min26 = ::Math_obj::floor(b38);
            							}
HXDLIN( 456)							int ii_min52 = min26;
HXDLIN( 456)							int ii_max52 = ::Math_obj::ceil(a41);
HXDLIN( 456)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            						}
            						else {
HXLINE( 456)							int ii_min53 = ::Math_obj::floor(b38);
HXDLIN( 456)							int ii_max53 = ::Math_obj::ceil(c18);
HXDLIN( 456)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            						}
            					}
            					else {
HXLINE( 456)						if ((b38 > c18)) {
HXLINE( 456)							int min27;
HXDLIN( 456)							if ((a41 > c18)) {
HXLINE( 456)								min27 = ::Math_obj::floor(c18);
            							}
            							else {
HXLINE( 456)								min27 = ::Math_obj::ceil(a41);
            							}
HXDLIN( 456)							int ii_min54 = min27;
HXDLIN( 456)							int ii_max54 = ::Math_obj::ceil(b38);
HXDLIN( 456)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            						}
            						else {
HXLINE( 456)							int ii_min55 = ::Math_obj::floor(a41);
HXDLIN( 456)							int ii_max55 = ::Math_obj::ceil(c18);
HXDLIN( 456)							v_yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            						}
            					}
            				}
HXDLIN( 456)				if (hasUndo3) {
HXLINE( 456)					v_undoImage2 = undoImage9;
HXDLIN( 456)					v_undoX2 = xIter33->start;
HXDLIN( 456)					v_undoY2 = yIter33->start;
            				}
HXDLIN( 456)				 ::pi_xy::algo::HitQuad v8 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXLINE( 454)				hitQuad = v8;
            			}
            			else {
HXLINE( 458)				Float sin2 = ::Math_obj::sin(theta);
HXDLIN( 458)				Float cos2 = ::Math_obj::cos(theta);
HXDLIN( 458)				Float radius11 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN( 458)				Float radius22 = (thick / ( (Float)(2) ));
HXDLIN( 458)				Float dx5 = ((Float)0.1);
HXDLIN( 458)				Float dy5 = radius11;
HXDLIN( 458)				Float cx5 = h2;
HXDLIN( 458)				Float cy5 = radius22;
HXDLIN( 458)				Float bx5 = h2;
HXDLIN( 458)				Float by5 = -(radius22);
HXDLIN( 458)				Float ax4 = ((Float)0.1);
HXDLIN( 458)				Float ay4 = -(radius11);
HXDLIN( 458)				Float temp1 = ((Float)0.);
HXLINE( 288)				temp1 = (px + ((ax4 * cos2) - (ay4 * sin2)));
HXLINE( 289)				ay4 = (py + ((ay4 * cos2) + (ax4 * sin2)));
HXLINE( 290)				ax4 = temp1;
HXLINE( 292)				temp1 = (px + ((bx5 * cos2) - (by5 * sin2)));
HXLINE( 293)				by5 = (py + ((by5 * cos2) + (bx5 * sin2)));
HXLINE( 294)				bx5 = temp1;
HXLINE( 296)				temp1 = (px + ((cx5 * cos2) - (cy5 * sin2)));
HXLINE( 297)				cy5 = (py + ((cy5 * cos2) + (cx5 * sin2)));
HXLINE( 298)				cx5 = temp1;
HXLINE( 300)				temp1 = (px + ((dx5 * cos2) - (dy5 * sin2)));
HXLINE( 301)				dy5 = (py + ((dy5 * cos2) + (dx5 * sin2)));
HXLINE( 302)				dx5 = temp1;
HXLINE( 458)				Float ex1 = ((((ax4 + bx5) + cx5) + dx5) / ( (Float)(4) ));
HXDLIN( 458)				Float ey1 = ((((ay4 + by5) + cy5) + dy5) / ( (Float)(4) ));
HXDLIN( 458)				bool hasUndo4 = false;
HXDLIN( 458)				int aA3 = ((color >> 24) & 255);
HXDLIN( 458)				int rA3 = ((color >> 16) & 255);
HXDLIN( 458)				int gA3 = ((color >> 8) & 255);
HXDLIN( 458)				int bA3 = (color & 255);
HXDLIN( 458)				Float bcx3 = (ax4 - bx5);
HXDLIN( 458)				Float bcy3 = (ay4 - by5);
HXDLIN( 458)				Float acx3 = (ex1 - bx5);
HXDLIN( 458)				Float acy3 = (ey1 - by5);
HXDLIN( 458)				Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 458)				Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 458)				Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 458)				Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 458)				 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN( 458)				if ((ex1 > ax4)) {
HXLINE( 458)					if ((ex1 > bx5)) {
HXLINE( 458)						int min28;
HXDLIN( 458)						if ((ax4 > bx5)) {
HXLINE( 458)							min28 = ::Math_obj::floor(bx5);
            						}
            						else {
HXLINE( 458)							min28 = ::Math_obj::floor(ax4);
            						}
HXDLIN( 458)						int ii_min56 = min28;
HXDLIN( 458)						int ii_max56 = ::Math_obj::ceil(ex1);
HXDLIN( 458)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min56,ii_max56);
            					}
            					else {
HXLINE( 458)						int ii_min57 = ::Math_obj::floor(ax4);
HXDLIN( 458)						int ii_max57 = ::Math_obj::ceil(bx5);
HXDLIN( 458)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min57,ii_max57);
            					}
            				}
            				else {
HXLINE( 458)					if ((ax4 > bx5)) {
HXLINE( 458)						int min29;
HXDLIN( 458)						if ((ex1 > bx5)) {
HXLINE( 458)							min29 = ::Math_obj::floor(bx5);
            						}
            						else {
HXLINE( 458)							min29 = ::Math_obj::ceil(ex1);
            						}
HXDLIN( 458)						int ii_min58 = min29;
HXDLIN( 458)						int ii_max58 = ::Math_obj::ceil(ax4);
HXDLIN( 458)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min58,ii_max58);
            					}
            					else {
HXLINE( 458)						int ii_min59 = ::Math_obj::floor(ex1);
HXDLIN( 458)						int ii_max59 = ::Math_obj::ceil(bx5);
HXDLIN( 458)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min59,ii_max59);
            					}
            				}
HXDLIN( 458)				 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN( 458)				if ((ey1 > ay4)) {
HXLINE( 458)					if ((ey1 > by5)) {
HXLINE( 458)						int min30;
HXDLIN( 458)						if ((ay4 > by5)) {
HXLINE( 458)							min30 = ::Math_obj::floor(by5);
            						}
            						else {
HXLINE( 458)							min30 = ::Math_obj::floor(ay4);
            						}
HXDLIN( 458)						int ii_min60 = min30;
HXDLIN( 458)						int ii_max60 = ::Math_obj::ceil(ey1);
HXDLIN( 458)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min60,ii_max60);
            					}
            					else {
HXLINE( 458)						int ii_min61 = ::Math_obj::floor(ay4);
HXDLIN( 458)						int ii_max61 = ::Math_obj::ceil(by5);
HXDLIN( 458)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min61,ii_max61);
            					}
            				}
            				else {
HXLINE( 458)					if ((ay4 > by5)) {
HXLINE( 458)						int min31;
HXDLIN( 458)						if ((ey1 > by5)) {
HXLINE( 458)							min31 = ::Math_obj::floor(by5);
            						}
            						else {
HXLINE( 458)							min31 = ::Math_obj::ceil(ey1);
            						}
HXDLIN( 458)						int ii_min62 = min31;
HXDLIN( 458)						int ii_max62 = ::Math_obj::ceil(ay4);
HXDLIN( 458)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min62,ii_max62);
            					}
            					else {
HXLINE( 458)						int ii_min63 = ::Math_obj::floor(ey1);
HXDLIN( 458)						int ii_max63 = ::Math_obj::ceil(by5);
HXDLIN( 458)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min63,ii_max63);
            					}
            				}
HXDLIN( 458)				 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN( 458)				if (hasUndo4) {
HXLINE( 458)					int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN( 458)					int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN( 458)					 ::Dynamic imageType4 = null();
HXDLIN( 458)					 ::pi_xy::ImageStruct this127 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 458)					if (::hx::IsNull( imageType4 )) {
HXLINE(  54)						imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 458)					::Dynamic undoImage13;
HXDLIN( 458)					switch((int)(( (int)(imageType4) ))){
            						case (int)0: {
HXLINE( 458)							 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::BytesImg b39 = byt4;
HXDLIN( 458)							{
HXLINE( 458)								b39->width = width4;
HXDLIN( 458)								b39->height = height4;
HXDLIN( 458)								b39->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 458)								b39->data = ::haxe::io::Bytes_obj::alloc((b39->length * 4));
HXDLIN( 458)								{
HXLINE( 458)									int len8 = b39->length;
HXDLIN( 458)									int w4 = 0;
HXDLIN( 458)									{
HXLINE( 458)										int _g80 = 0;
HXDLIN( 458)										int _g81 = b39->height;
HXDLIN( 458)										while((_g80 < _g81)){
HXLINE( 458)											_g80 = (_g80 + 1);
HXDLIN( 458)											int y13 = (_g80 - 1);
HXDLIN( 458)											{
HXLINE( 458)												int _g82 = 0;
HXDLIN( 458)												int _g83 = b39->width;
HXDLIN( 458)												while((_g82 < _g83)){
HXLINE( 458)													_g82 = (_g82 + 1);
HXDLIN( 458)													int x13 = (_g82 - 1);
HXDLIN( 458)													{
HXLINE( 458)														w4 = (w4 + 1);
HXDLIN( 458)														b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 458)													{
HXLINE( 458)														w4 = (w4 + 1);
HXDLIN( 458)														b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 458)													{
HXLINE( 458)														w4 = (w4 + 1);
HXDLIN( 458)														b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 458)													{
HXLINE( 458)														w4 = (w4 + 1);
HXDLIN( 458)														b39->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 458)							undoImage13 = b39;
            						}
            						break;
            						case (int)1: {
HXLINE( 458)							 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::ArrIntImg a42 = arrI4;
HXDLIN( 458)							{
HXLINE( 458)								a42->width = width4;
HXDLIN( 458)								a42->height = height4;
HXDLIN( 458)								a42->data = ::Array_obj< int >::__new(0);
HXDLIN( 458)								a42->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 458)								{
HXLINE( 458)									int _g84 = 0;
HXDLIN( 458)									int _g85 = a42->length;
HXDLIN( 458)									while((_g84 < _g85)){
HXLINE( 458)										_g84 = (_g84 + 1);
HXDLIN( 458)										int i36 = (_g84 - 1);
HXDLIN( 458)										a42->data[i36] = 0;
            									}
            								}
            							}
HXDLIN( 458)							undoImage13 = a42;
            						}
            						break;
            						case (int)2: {
HXLINE( 458)							 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::U32ArrImg b40 = u32a4;
HXDLIN( 458)							{
HXLINE( 458)								b40->width = width4;
HXDLIN( 458)								b40->height = height4;
HXDLIN( 458)								b40->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 458)								int size4 = (b40->length * 4);
HXDLIN( 458)								b40->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN( 458)								{
HXLINE( 458)									int _g86 = 0;
HXDLIN( 458)									int _g87 = b40->length;
HXDLIN( 458)									while((_g86 < _g87)){
HXLINE( 458)										_g86 = (_g86 + 1);
HXDLIN( 458)										int i37 = (_g86 - 1);
HXDLIN( 458)										{
HXLINE( 458)											 ::haxe::io::ArrayBufferViewImpl this128 = b40->data;
HXDLIN( 458)											bool undoImage14;
HXDLIN( 458)											if ((i37 >= 0)) {
HXLINE( 458)												undoImage14 = (i37 < (this128->byteLength >> 2));
            											}
            											else {
HXLINE( 458)												undoImage14 = false;
            											}
HXDLIN( 458)											if (undoImage14) {
HXLINE( 458)												 ::haxe::io::Bytes _this4 = this128->bytes;
HXDLIN( 458)												int pos4 = ((i37 << 2) + this128->byteOffset);
HXDLIN( 458)												_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN( 458)												_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN( 458)												_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN( 458)												_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 458)							undoImage13 = b40;
            						}
            						break;
            						case (int)3: {
HXLINE( 458)							 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::VecIntImg v9 = vec4;
HXDLIN( 458)							{
HXLINE( 458)								v9->width = width4;
HXDLIN( 458)								v9->height = height4;
HXDLIN( 458)								v9->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 458)								v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN( 458)								{
HXLINE( 458)									int _g88 = 0;
HXDLIN( 458)									int _g89 = v9->length;
HXDLIN( 458)									while((_g88 < _g89)){
HXLINE( 458)										_g88 = (_g88 + 1);
HXDLIN( 458)										int i38 = (_g88 - 1);
HXDLIN( 458)										v9->data->__unsafe_set(i38,0);
            									}
            								}
            							}
HXDLIN( 458)							undoImage13 = v9;
            						}
            						break;
            						case (int)4: {
HXLINE( 458)							 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::StackIntImg b41 = sInt4;
HXDLIN( 458)							{
HXLINE( 458)								b41->width = width4;
HXDLIN( 458)								b41->height = height4;
HXDLIN( 458)								b41->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 458)								b41->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 458)								{
HXLINE( 458)									int len9 = b41->length;
HXDLIN( 458)									 ::haxe::ds::GenericStack_Int d4 = b41->data;
HXDLIN( 458)									if (::hx::IsNull( d4->head )) {
HXLINE( 458)										int _g90 = 0;
HXDLIN( 458)										int _g91 = len9;
HXDLIN( 458)										while((_g90 < _g91)){
HXLINE( 458)											_g90 = (_g90 + 1);
HXDLIN( 458)											int i39 = (_g90 - 1);
HXDLIN( 458)											d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            										}
            									}
            									else {
HXLINE( 458)										int _g92 = 0;
HXDLIN( 458)										int _g93 = len9;
HXDLIN( 458)										while((_g92 < _g93)){
HXLINE( 458)											_g92 = (_g92 + 1);
HXDLIN( 458)											int i40 = (_g92 - 1);
HXDLIN( 458)											{
HXLINE( 458)												 ::haxe::ds::GenericCell_Int l4 = b41->data->head;
HXDLIN( 458)												 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN( 458)												{
HXLINE( 458)													int _g94 = 0;
HXDLIN( 458)													int _g95 = i40;
HXDLIN( 458)													while((_g94 < _g95)){
HXLINE( 458)														_g94 = (_g94 + 1);
HXDLIN( 458)														int i41 = (_g94 - 1);
HXLINE( 345)														prev4 = l4;
HXLINE( 346)														l4 = l4->next;
            													}
            												}
HXLINE( 458)												if (::hx::IsNull( prev4 )) {
HXLINE( 458)													b41->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 458)													l4 = null();
            												}
            												else {
HXLINE( 458)													prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 458)													l4 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 458)							undoImage13 = b41;
            						}
            						break;
            					}
HXDLIN( 458)					this127->image = undoImage13;
HXDLIN( 458)					this127->width = width4;
HXDLIN( 458)					this127->height = height4;
HXDLIN( 458)					this127->imageType = ( (int)(imageType4) );
HXDLIN( 458)					undoImage12 = this127;
HXDLIN( 458)					{
HXLINE( 458)						int rectLeft4 = xIter34->start;
HXDLIN( 458)						int rectTop4 = yIter34->start;
HXDLIN( 458)						int rectRight4 = xIter34->max;
HXDLIN( 458)						bool forceClear4 = false;
HXDLIN( 458)						{
HXLINE( 458)							int _g96 = rectTop4;
HXDLIN( 458)							int _g97 = yIter34->max;
HXDLIN( 458)							while((_g96 < _g97)){
HXLINE( 458)								_g96 = (_g96 + 1);
HXDLIN( 458)								int dy6 = (_g96 - 1);
HXDLIN( 458)								{
HXLINE( 458)									int _g98 = rectLeft4;
HXDLIN( 458)									int _g99 = rectRight4;
HXDLIN( 458)									while((_g98 < _g99)){
HXLINE( 458)										_g98 = (_g98 + 1);
HXDLIN( 458)										int dx6 = (_g98 - 1);
HXDLIN( 458)										::Dynamic this129 = pixelImage->image;
HXDLIN( 458)										int index17;
HXDLIN( 458)										if (pixelImage->useVirtualPos) {
HXLINE( 458)											index17 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx6) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 458)											index17 = ::Std_obj::_hx_int(( (Float)(((dy6 * pixelImage->width) + dx6)) ));
            										}
HXDLIN( 458)										int c19 = ::iterMagic::Iimg_obj::get(this129,index17);
HXDLIN( 458)										int col4;
HXDLIN( 458)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)											col4 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            										}
            										else {
HXLINE( 458)											col4 = c19;
            										}
HXDLIN( 458)										bool hitQuad33;
HXDLIN( 458)										if (pixelImage->useMask) {
HXLINE( 458)											hitQuad33 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 458)											hitQuad33 = false;
            										}
HXDLIN( 458)										if (hitQuad33) {
HXLINE( 458)											 ::pi_xy::ImageStruct this130 = pixelImage->mask;
HXDLIN( 458)											::Dynamic this131 = this130->image;
HXDLIN( 458)											int index18;
HXDLIN( 458)											if (this130->useVirtualPos) {
HXLINE( 458)												index18 = ::Std_obj::_hx_int(((((( (Float)(dy6) ) - this130->virtualY) * ( (Float)(this130->width) )) + dx6) - this130->virtualX));
            											}
            											else {
HXLINE( 458)												index18 = ::Std_obj::_hx_int(( (Float)(((dy6 * this130->width) + dx6)) ));
            											}
HXDLIN( 458)											int c20 = ::iterMagic::Iimg_obj::get(this131,index18);
HXDLIN( 458)											int v10;
HXDLIN( 458)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)												v10 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            											}
            											else {
HXLINE( 458)												v10 = c20;
            											}
HXDLIN( 458)											int maskPixel4 = v10;
HXDLIN( 458)											int this132 = col4;
HXDLIN( 458)											if ((maskPixel4 == 0)) {
HXLINE( 458)												col4 = this132;
            											}
            											else {
HXLINE( 458)												Float m04;
HXDLIN( 458)												int this133 = ((maskPixel4 >> 24) & 255);
HXDLIN( 458)												if ((this133 == 0)) {
HXLINE( 458)													m04 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													m04 = (( (Float)(this133) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float m14;
HXDLIN( 458)												int this134 = ((maskPixel4 >> 16) & 255);
HXDLIN( 458)												if ((this134 == 0)) {
HXLINE( 458)													m14 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													m14 = (( (Float)(this134) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float m24;
HXDLIN( 458)												int this135 = ((maskPixel4 >> 8) & 255);
HXDLIN( 458)												if ((this135 == 0)) {
HXLINE( 458)													m24 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													m24 = (( (Float)(this135) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float m34;
HXDLIN( 458)												int this136 = (maskPixel4 & 255);
HXDLIN( 458)												if ((this136 == 0)) {
HXLINE( 458)													m34 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													m34 = (( (Float)(this136) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this132 >> 24) & 255)) )));
HXDLIN( 458)												int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this132 >> 16) & 255)) )));
HXDLIN( 458)												int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this132 >> 8) & 255)) )));
HXDLIN( 458)												int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this132 & 255)) )));
HXDLIN( 458)												col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 458)										if ((col4 != 0)) {
HXLINE( 458)											int x14 = (dx6 - rectLeft4);
HXDLIN( 458)											int y14 = (dy6 - rectTop4);
HXDLIN( 458)											int c21 = col4;
HXDLIN( 458)											bool hitQuad34;
HXDLIN( 458)											if ((((c21 >> 24) & 255) < 254)) {
HXLINE( 458)												hitQuad34 = undoImage12->transparent;
            											}
            											else {
HXLINE( 458)												hitQuad34 = false;
            											}
HXDLIN( 458)											if (hitQuad34) {
HXLINE( 458)												int location8;
HXDLIN( 458)												if (undoImage12->useVirtualPos) {
HXLINE( 458)													location8 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x14) - undoImage12->virtualX));
            												}
            												else {
HXLINE( 458)													location8 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage12->width) + x14)) ));
            												}
HXDLIN( 458)												int this137 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN( 458)												int this138;
HXDLIN( 458)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)													this138 = ((((((this137 >> 24) & 255) << 24) | ((this137 & 255) << 16)) | (((this137 >> 8) & 255) << 8)) | ((this137 >> 16) & 255));
            												}
            												else {
HXLINE( 458)													this138 = this137;
            												}
HXDLIN( 458)												Float a113;
HXDLIN( 458)												int this139 = ((this138 >> 24) & 255);
HXDLIN( 458)												if ((this139 == 0)) {
HXLINE( 458)													a113 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													a113 = (( (Float)(this139) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float r110;
HXDLIN( 458)												int this140 = ((this138 >> 16) & 255);
HXDLIN( 458)												if ((this140 == 0)) {
HXLINE( 458)													r110 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													r110 = (( (Float)(this140) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float g110;
HXDLIN( 458)												int this141 = ((this138 >> 8) & 255);
HXDLIN( 458)												if ((this141 == 0)) {
HXLINE( 458)													g110 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													g110 = (( (Float)(this141) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float b114;
HXDLIN( 458)												int this142 = (this138 & 255);
HXDLIN( 458)												if ((this142 == 0)) {
HXLINE( 458)													b114 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													b114 = (( (Float)(this142) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float a211;
HXDLIN( 458)												int this143 = ((col4 >> 24) & 255);
HXDLIN( 458)												if ((this143 == 0)) {
HXLINE( 458)													a211 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													a211 = (( (Float)(this143) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float r28;
HXDLIN( 458)												int this144 = ((col4 >> 16) & 255);
HXDLIN( 458)												if ((this144 == 0)) {
HXLINE( 458)													r28 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													r28 = (( (Float)(this144) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float g28;
HXDLIN( 458)												int this145 = ((col4 >> 8) & 255);
HXDLIN( 458)												if ((this145 == 0)) {
HXLINE( 458)													g28 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													g28 = (( (Float)(this145) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float b212;
HXDLIN( 458)												int this146 = (col4 & 255);
HXDLIN( 458)												if ((this146 == 0)) {
HXLINE( 458)													b212 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													b212 = (( (Float)(this146) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float a310 = (a113 * (( (Float)(1) ) - a211));
HXDLIN( 458)												int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a310) + (r28 * a211))));
HXDLIN( 458)												int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a310) + (g28 * a211))));
HXDLIN( 458)												int b42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b212 * a211))));
HXDLIN( 458)												int a43 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a211)));
HXDLIN( 458)												int blended8 = ((((a43 << 24) | (r20 << 16)) | (g20 << 8)) | b42);
HXDLIN( 458)												{
HXLINE( 458)													int hitQuad35;
HXDLIN( 458)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)														hitQuad35 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            													}
            													else {
HXLINE( 458)														hitQuad35 = blended8;
            													}
HXDLIN( 458)													::iterMagic::Iimg_obj::set(undoImage12->image,location8,hitQuad35);
            												}
            											}
            											else {
HXLINE( 458)												::Dynamic this147 = undoImage12->image;
HXDLIN( 458)												int index19;
HXDLIN( 458)												if (undoImage12->useVirtualPos) {
HXLINE( 458)													index19 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x14) - undoImage12->virtualX));
            												}
            												else {
HXLINE( 458)													index19 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage12->width) + x14)) ));
            												}
HXDLIN( 458)												int hitQuad36;
HXDLIN( 458)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)													hitQuad36 = ((((((c21 >> 24) & 255) << 24) | ((c21 & 255) << 16)) | (((c21 >> 8) & 255) << 8)) | ((c21 >> 16) & 255));
            												}
            												else {
HXLINE( 458)													hitQuad36 = c21;
            												}
HXDLIN( 458)												::iterMagic::Iimg_obj::set(this147,index19,hitQuad36);
            											}
            										}
            										else {
HXLINE( 458)											if (forceClear4) {
HXLINE( 458)												::Dynamic this148 = undoImage12->image;
HXDLIN( 458)												int x15 = (dx6 - rectLeft4);
HXDLIN( 458)												int y15 = (dy6 - rectTop4);
HXDLIN( 458)												int index20;
HXDLIN( 458)												if (undoImage12->useVirtualPos) {
HXLINE( 458)													index20 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x15) - undoImage12->virtualX));
            												}
            												else {
HXLINE( 458)													index20 = ::Std_obj::_hx_int(( (Float)(((y15 * undoImage12->width) + x15)) ));
            												}
HXDLIN( 458)												::iterMagic::Iimg_obj::set(this148,index20,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 458)				bool found4 = false;
HXDLIN( 458)				{
HXLINE( 458)					int _g_min8 = xIter34->start;
HXDLIN( 458)					int _g_max8 = xIter34->max;
HXDLIN( 458)					while((_g_min8 < _g_max8)){
HXLINE( 458)						_g_min8 = (_g_min8 + 1);
HXDLIN( 458)						int px4 = (_g_min8 - 1);
HXDLIN( 458)						Float pcx3 = (( (Float)(px4) ) - bx5);
HXLINE( 619)						found4 = false;
HXLINE( 458)						{
HXLINE( 458)							int _g_min9 = yIter34->start;
HXDLIN( 458)							int _g_max9 = yIter34->max;
HXDLIN( 458)							while((_g_min9 < _g_max9)){
HXLINE( 458)								_g_min9 = (_g_min9 + 1);
HXDLIN( 458)								int py4 = (_g_min9 - 1);
HXDLIN( 458)								Float pcy3 = (( (Float)(py4) ) - by5);
HXDLIN( 458)								Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 458)								Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 458)								Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 458)								Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 458)								Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 458)								bool hitQuad37;
HXDLIN( 458)								bool hitQuad38;
HXDLIN( 458)								if ((ratioA3 >= 0)) {
HXLINE( 458)									hitQuad38 = (ratioB3 >= 0);
            								}
            								else {
HXLINE( 458)									hitQuad38 = false;
            								}
HXDLIN( 458)								if (hitQuad38) {
HXLINE( 458)									hitQuad37 = (ratioC3 >= 0);
            								}
            								else {
HXLINE( 458)									hitQuad37 = false;
            								}
HXDLIN( 458)								if (hitQuad37) {
HXLINE( 458)									int i42 = ::Std_obj::_hx_int((( (Float)(aA3) ) * (soft * ratioB3)));
HXDLIN( 458)									if ((i42 > 255)) {
HXLINE(  24)										i42 = 255;
            									}
HXLINE( 458)									if ((i42 < 0)) {
HXLINE(  25)										i42 = 0;
            									}
HXLINE( 458)									int a44 = i42;
HXDLIN( 458)									int i43 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN( 458)									if ((i43 > 255)) {
HXLINE(  24)										i43 = 255;
            									}
HXLINE( 458)									if ((i43 < 0)) {
HXLINE(  25)										i43 = 0;
            									}
HXLINE( 458)									int r29 = i43;
HXDLIN( 458)									int i44 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN( 458)									if ((i44 > 255)) {
HXLINE(  24)										i44 = 255;
            									}
HXLINE( 458)									if ((i44 < 0)) {
HXLINE(  25)										i44 = 0;
            									}
HXLINE( 458)									int g29 = i44;
HXDLIN( 458)									int i45 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN( 458)									if ((i45 > 255)) {
HXLINE(  24)										i45 = 255;
            									}
HXLINE( 458)									if ((i45 < 0)) {
HXLINE(  25)										i45 = 0;
            									}
HXLINE( 458)									int b43 = i45;
HXDLIN( 458)									{
HXLINE( 458)										int location9;
HXDLIN( 458)										if (pixelImage->useVirtualPos) {
HXLINE( 458)											location9 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px4) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 458)											location9 = ::Std_obj::_hx_int(( (Float)(((py4 * pixelImage->width) + px4)) ));
            										}
HXDLIN( 458)										bool hitQuad39;
HXDLIN( 458)										if (pixelImage->transparent) {
HXLINE( 458)											hitQuad39 = (a44 < 254);
            										}
            										else {
HXLINE( 458)											hitQuad39 = false;
            										}
HXDLIN( 458)										if (hitQuad39) {
HXLINE( 458)											int this149 = ::iterMagic::Iimg_obj::get(pixelImage->image,location9);
HXDLIN( 458)											int old3;
HXDLIN( 458)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)												old3 = ((((((this149 >> 24) & 255) << 24) | ((this149 & 255) << 16)) | (((this149 >> 8) & 255) << 8)) | ((this149 >> 16) & 255));
            											}
            											else {
HXLINE( 458)												old3 = this149;
            											}
HXDLIN( 458)											int rhs3 = ((((a44 << 24) | (r29 << 16)) | (g29 << 8)) | b43);
HXDLIN( 458)											Float a114;
HXDLIN( 458)											int this150 = ((old3 >> 24) & 255);
HXDLIN( 458)											if ((this150 == 0)) {
HXLINE( 458)												a114 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												a114 = (( (Float)(this150) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float r111;
HXDLIN( 458)											int this151 = ((old3 >> 16) & 255);
HXDLIN( 458)											if ((this151 == 0)) {
HXLINE( 458)												r111 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												r111 = (( (Float)(this151) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float g111;
HXDLIN( 458)											int this152 = ((old3 >> 8) & 255);
HXDLIN( 458)											if ((this152 == 0)) {
HXLINE( 458)												g111 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												g111 = (( (Float)(this152) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float b115;
HXDLIN( 458)											int this153 = (old3 & 255);
HXDLIN( 458)											if ((this153 == 0)) {
HXLINE( 458)												b115 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												b115 = (( (Float)(this153) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float a212;
HXDLIN( 458)											int this154 = ((rhs3 >> 24) & 255);
HXDLIN( 458)											if ((this154 == 0)) {
HXLINE( 458)												a212 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												a212 = (( (Float)(this154) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float r210;
HXDLIN( 458)											int this155 = ((rhs3 >> 16) & 255);
HXDLIN( 458)											if ((this155 == 0)) {
HXLINE( 458)												r210 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												r210 = (( (Float)(this155) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float g210;
HXDLIN( 458)											int this156 = ((rhs3 >> 8) & 255);
HXDLIN( 458)											if ((this156 == 0)) {
HXLINE( 458)												g210 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												g210 = (( (Float)(this156) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float b213;
HXDLIN( 458)											int this157 = (rhs3 & 255);
HXDLIN( 458)											if ((this157 == 0)) {
HXLINE( 458)												b213 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												b213 = (( (Float)(this157) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float a311 = (a114 * (( (Float)(1) ) - a212));
HXDLIN( 458)											int r30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a311) + (r210 * a212))));
HXDLIN( 458)											int g30 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a311) + (g210 * a212))));
HXDLIN( 458)											int b44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b213 * a212))));
HXDLIN( 458)											int a45 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a212)));
HXDLIN( 458)											int blended9 = ((((a45 << 24) | (r30 << 16)) | (g30 << 8)) | b44);
HXDLIN( 458)											{
HXLINE( 458)												int hitQuad40;
HXDLIN( 458)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)													hitQuad40 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            												}
            												else {
HXLINE( 458)													hitQuad40 = blended9;
            												}
HXDLIN( 458)												::iterMagic::Iimg_obj::set(pixelImage->image,location9,hitQuad40);
            											}
            										}
            										else {
HXLINE( 458)											int value3;
HXDLIN( 458)											if (pixelImage->isLittle) {
HXLINE( 458)												value3 = ((((a44 << 24) | (b43 << 16)) | (g29 << 8)) | r29);
            											}
            											else {
HXLINE( 458)												value3 = ((((a44 << 24) | (r29 << 16)) | (g29 << 8)) | b43);
            											}
HXDLIN( 458)											::iterMagic::Iimg_obj::set(pixelImage->image,location9,value3);
            										}
            									}
HXLINE( 633)									found4 = true;
            								}
            								else {
HXLINE( 458)									if (found4) {
HXLINE( 458)										goto _hx_goto_594;
            									}
            								}
            							}
            							_hx_goto_594:;
            						}
            					}
            				}
HXDLIN( 458)				 ::pi_xy::iter::IntIterStart v_yIter33;
HXDLIN( 458)				 ::pi_xy::iter::IntIterStart v_xIter33;
HXDLIN( 458)				int v_undoY3;
HXDLIN( 458)				int v_undoX3;
HXDLIN( 458)				Float v_ty3;
HXDLIN( 458)				Float v_tx3;
HXDLIN( 458)				Float v_t03;
HXDLIN( 458)				Float v_sy3;
HXDLIN( 458)				Float v_sx3;
HXDLIN( 458)				Float v_s03;
HXDLIN( 458)				Float v_A3;
HXDLIN( 458)				Float ax5 = ex1;
HXDLIN( 458)				Float ay5 = ey1;
HXDLIN( 458)				 ::pi_xy::ImageStruct v_undoImage3 = null();
HXDLIN( 458)				Float bx6 = ax4;
HXDLIN( 458)				Float by6 = ay4;
HXDLIN( 458)				Float cx6 = bx5;
HXDLIN( 458)				Float cy6 = by5;
HXDLIN( 458)				bool adjustWinding4 = (((((ax5 * by6) - (bx6 * ay5)) + ((bx6 * cy6) - (cx6 * by6))) + ((cx6 * ay5) - (ax5 * cy6))) > 0);
HXDLIN( 458)				if (!(adjustWinding4)) {
HXLINE( 458)					Float bx_4 = bx6;
HXDLIN( 458)					Float by_4 = by6;
HXLINE(  24)					bx6 = cx6;
HXLINE(  25)					by6 = cy6;
HXLINE(  26)					cx6 = bx_4;
HXLINE(  27)					cy6 = by_4;
            				}
HXLINE( 458)				Float v_ax3 = ax5;
HXDLIN( 458)				Float v_ay3 = ay5;
HXDLIN( 458)				Float v_bx3 = bx6;
HXDLIN( 458)				Float v_by3 = by6;
HXDLIN( 458)				Float v_cx3 = cx6;
HXDLIN( 458)				Float v_cy3 = cy6;
HXDLIN( 458)				bool v_preCalculated3 = true;
HXDLIN( 458)				{
HXLINE( 458)					v_s03 = ((v_ay3 * v_cx3) - (v_ax3 * v_cy3));
HXDLIN( 458)					v_sx3 = (v_cy3 - v_ay3);
HXDLIN( 458)					v_sy3 = (v_ax3 - v_cx3);
HXDLIN( 458)					v_t03 = ((v_ax3 * v_by3) - (v_ay3 * v_bx3));
HXDLIN( 458)					v_tx3 = (v_ay3 - v_by3);
HXDLIN( 458)					v_ty3 = (v_bx3 - v_ax3);
HXDLIN( 458)					v_A3 = ((((-(v_by3) * v_cx3) + (v_ay3 * (-(v_bx3) + v_cx3))) + (v_ax3 * (v_by3 - v_cy3))) + (v_bx3 * v_cy3));
HXDLIN( 458)					Float a46 = v_ax3;
HXDLIN( 458)					Float b45 = v_bx3;
HXDLIN( 458)					Float c22 = v_cx3;
HXDLIN( 458)					if ((a46 > b45)) {
HXLINE( 458)						if ((a46 > c22)) {
HXLINE( 458)							int min32;
HXDLIN( 458)							if ((b45 > c22)) {
HXLINE( 458)								min32 = ::Math_obj::floor(c22);
            							}
            							else {
HXLINE( 458)								min32 = ::Math_obj::floor(b45);
            							}
HXDLIN( 458)							int ii_min64 = min32;
HXDLIN( 458)							int ii_max64 = ::Math_obj::ceil(a46);
HXDLIN( 458)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min64,ii_max64);
            						}
            						else {
HXLINE( 458)							int ii_min65 = ::Math_obj::floor(b45);
HXDLIN( 458)							int ii_max65 = ::Math_obj::ceil(c22);
HXDLIN( 458)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min65,ii_max65);
            						}
            					}
            					else {
HXLINE( 458)						if ((b45 > c22)) {
HXLINE( 458)							int min33;
HXDLIN( 458)							if ((a46 > c22)) {
HXLINE( 458)								min33 = ::Math_obj::floor(c22);
            							}
            							else {
HXLINE( 458)								min33 = ::Math_obj::ceil(a46);
            							}
HXDLIN( 458)							int ii_min66 = min33;
HXDLIN( 458)							int ii_max66 = ::Math_obj::ceil(b45);
HXDLIN( 458)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min66,ii_max66);
            						}
            						else {
HXLINE( 458)							int ii_min67 = ::Math_obj::floor(a46);
HXDLIN( 458)							int ii_max67 = ::Math_obj::ceil(c22);
HXDLIN( 458)							v_xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min67,ii_max67);
            						}
            					}
HXDLIN( 458)					Float a47 = v_ay3;
HXDLIN( 458)					Float b46 = v_by3;
HXDLIN( 458)					Float c23 = v_cy3;
HXDLIN( 458)					if ((a47 > b46)) {
HXLINE( 458)						if ((a47 > c23)) {
HXLINE( 458)							int min34;
HXDLIN( 458)							if ((b46 > c23)) {
HXLINE( 458)								min34 = ::Math_obj::floor(c23);
            							}
            							else {
HXLINE( 458)								min34 = ::Math_obj::floor(b46);
            							}
HXDLIN( 458)							int ii_min68 = min34;
HXDLIN( 458)							int ii_max68 = ::Math_obj::ceil(a47);
HXDLIN( 458)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min68,ii_max68);
            						}
            						else {
HXLINE( 458)							int ii_min69 = ::Math_obj::floor(b46);
HXDLIN( 458)							int ii_max69 = ::Math_obj::ceil(c23);
HXDLIN( 458)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min69,ii_max69);
            						}
            					}
            					else {
HXLINE( 458)						if ((b46 > c23)) {
HXLINE( 458)							int min35;
HXDLIN( 458)							if ((a47 > c23)) {
HXLINE( 458)								min35 = ::Math_obj::floor(c23);
            							}
            							else {
HXLINE( 458)								min35 = ::Math_obj::ceil(a47);
            							}
HXDLIN( 458)							int ii_min70 = min35;
HXDLIN( 458)							int ii_max70 = ::Math_obj::ceil(b46);
HXDLIN( 458)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min70,ii_max70);
            						}
            						else {
HXLINE( 458)							int ii_min71 = ::Math_obj::floor(a47);
HXDLIN( 458)							int ii_max71 = ::Math_obj::ceil(c23);
HXDLIN( 458)							v_yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min71,ii_max71);
            						}
            					}
            				}
HXDLIN( 458)				if (hasUndo4) {
HXLINE( 458)					v_undoImage3 = undoImage12;
HXDLIN( 458)					v_undoX3 = xIter34->start;
HXDLIN( 458)					v_undoY3 = yIter34->start;
            				}
HXDLIN( 458)				{
HXLINE( 458)					Float bx7 = bx5;
HXDLIN( 458)					Float by7 = by5;
HXDLIN( 458)					Float cx7 = cx5;
HXDLIN( 458)					Float cy7 = cy5;
HXDLIN( 458)					bool hasUndo5 = false;
HXDLIN( 458)					bool adjustWinding5 = (((((ex1 * by7) - (bx7 * ey1)) + ((bx7 * cy7) - (cx7 * by7))) + ((cx7 * ey1) - (ex1 * cy7))) > 0);
HXDLIN( 458)					if (!(adjustWinding5)) {
HXLINE( 458)						Float bx_5 = bx7;
HXDLIN( 458)						Float by_5 = by7;
HXLINE(  25)						bx7 = cx7;
HXLINE(  26)						by7 = cy7;
HXLINE(  27)						cx7 = bx_5;
HXLINE(  28)						cy7 = by_5;
            					}
HXLINE( 458)					{
HXLINE( 458)						Float s01 = ((ey1 * cx7) - (ex1 * cy7));
HXDLIN( 458)						Float sx1 = (cy7 - ey1);
HXDLIN( 458)						Float sy1 = (ex1 - cx7);
HXDLIN( 458)						Float t01 = ((ex1 * by7) - (ey1 * bx7));
HXDLIN( 458)						Float tx1 = (ey1 - by7);
HXDLIN( 458)						Float ty1 = (bx7 - ex1);
HXDLIN( 458)						Float A1 = ((((-(by7) * cx7) + (ey1 * (-(bx7) + cx7))) + (ex1 * (by7 - cy7))) + (bx7 * cy7));
HXDLIN( 458)						 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN( 458)						if ((ex1 > bx7)) {
HXLINE( 458)							if ((ex1 > cx7)) {
HXLINE( 458)								int min36;
HXDLIN( 458)								if ((bx7 > cx7)) {
HXLINE( 458)									min36 = ::Math_obj::floor(cx7);
            								}
            								else {
HXLINE( 458)									min36 = ::Math_obj::floor(bx7);
            								}
HXDLIN( 458)								int ii_min72 = min36;
HXDLIN( 458)								int ii_max72 = ::Math_obj::ceil(ex1);
HXDLIN( 458)								xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min72,ii_max72);
            							}
            							else {
HXLINE( 458)								int ii_min73 = ::Math_obj::floor(bx7);
HXDLIN( 458)								int ii_max73 = ::Math_obj::ceil(cx7);
HXDLIN( 458)								xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min73,ii_max73);
            							}
            						}
            						else {
HXLINE( 458)							if ((bx7 > cx7)) {
HXLINE( 458)								int min37;
HXDLIN( 458)								if ((ex1 > cx7)) {
HXLINE( 458)									min37 = ::Math_obj::floor(cx7);
            								}
            								else {
HXLINE( 458)									min37 = ::Math_obj::ceil(ex1);
            								}
HXDLIN( 458)								int ii_min74 = min37;
HXDLIN( 458)								int ii_max74 = ::Math_obj::ceil(bx7);
HXDLIN( 458)								xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min74,ii_max74);
            							}
            							else {
HXLINE( 458)								int ii_min75 = ::Math_obj::floor(ex1);
HXDLIN( 458)								int ii_max75 = ::Math_obj::ceil(cx7);
HXDLIN( 458)								xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min75,ii_max75);
            							}
            						}
HXDLIN( 458)						 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN( 458)						if ((ey1 > by7)) {
HXLINE( 458)							if ((ey1 > cy7)) {
HXLINE( 458)								int min38;
HXDLIN( 458)								if ((by7 > cy7)) {
HXLINE( 458)									min38 = ::Math_obj::floor(cy7);
            								}
            								else {
HXLINE( 458)									min38 = ::Math_obj::floor(by7);
            								}
HXDLIN( 458)								int ii_min76 = min38;
HXDLIN( 458)								int ii_max76 = ::Math_obj::ceil(ey1);
HXDLIN( 458)								yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min76,ii_max76);
            							}
            							else {
HXLINE( 458)								int ii_min77 = ::Math_obj::floor(by7);
HXDLIN( 458)								int ii_max77 = ::Math_obj::ceil(cy7);
HXDLIN( 458)								yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min77,ii_max77);
            							}
            						}
            						else {
HXLINE( 458)							if ((by7 > cy7)) {
HXLINE( 458)								int min39;
HXDLIN( 458)								if ((ey1 > cy7)) {
HXLINE( 458)									min39 = ::Math_obj::floor(cy7);
            								}
            								else {
HXLINE( 458)									min39 = ::Math_obj::ceil(ey1);
            								}
HXDLIN( 458)								int ii_min78 = min39;
HXDLIN( 458)								int ii_max78 = ::Math_obj::ceil(by7);
HXDLIN( 458)								yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min78,ii_max78);
            							}
            							else {
HXLINE( 458)								int ii_min79 = ::Math_obj::floor(ey1);
HXDLIN( 458)								int ii_max79 = ::Math_obj::ceil(cy7);
HXDLIN( 458)								yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min79,ii_max79);
            							}
            						}
HXDLIN( 458)						 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN( 458)						if (hasUndo5) {
HXLINE( 458)							int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN( 458)							int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN( 458)							 ::Dynamic imageType5 = null();
HXDLIN( 458)							 ::pi_xy::ImageStruct this158 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 458)							if (::hx::IsNull( imageType5 )) {
HXLINE(  54)								imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            							}
HXLINE( 458)							::Dynamic undoImage16;
HXDLIN( 458)							switch((int)(( (int)(imageType5) ))){
            								case (int)0: {
HXLINE( 458)									 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 458)									 ::iterMagic::BytesImg b47 = byt5;
HXDLIN( 458)									{
HXLINE( 458)										b47->width = width5;
HXDLIN( 458)										b47->height = height5;
HXDLIN( 458)										b47->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 458)										b47->data = ::haxe::io::Bytes_obj::alloc((b47->length * 4));
HXDLIN( 458)										{
HXLINE( 458)											int len10 = b47->length;
HXDLIN( 458)											int w5 = 0;
HXDLIN( 458)											{
HXLINE( 458)												int _g100 = 0;
HXDLIN( 458)												int _g101 = b47->height;
HXDLIN( 458)												while((_g100 < _g101)){
HXLINE( 458)													_g100 = (_g100 + 1);
HXDLIN( 458)													int y16 = (_g100 - 1);
HXDLIN( 458)													{
HXLINE( 458)														int _g102 = 0;
HXDLIN( 458)														int _g103 = b47->width;
HXDLIN( 458)														while((_g102 < _g103)){
HXLINE( 458)															_g102 = (_g102 + 1);
HXDLIN( 458)															int x16 = (_g102 - 1);
HXDLIN( 458)															{
HXLINE( 458)																w5 = (w5 + 1);
HXDLIN( 458)																b47->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 458)															{
HXLINE( 458)																w5 = (w5 + 1);
HXDLIN( 458)																b47->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 458)															{
HXLINE( 458)																w5 = (w5 + 1);
HXDLIN( 458)																b47->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
HXDLIN( 458)															{
HXLINE( 458)																w5 = (w5 + 1);
HXDLIN( 458)																b47->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 458)									undoImage16 = b47;
            								}
            								break;
            								case (int)1: {
HXLINE( 458)									 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 458)									 ::iterMagic::ArrIntImg a48 = arrI5;
HXDLIN( 458)									{
HXLINE( 458)										a48->width = width5;
HXDLIN( 458)										a48->height = height5;
HXDLIN( 458)										a48->data = ::Array_obj< int >::__new(0);
HXDLIN( 458)										a48->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 458)										{
HXLINE( 458)											int _g104 = 0;
HXDLIN( 458)											int _g105 = a48->length;
HXDLIN( 458)											while((_g104 < _g105)){
HXLINE( 458)												_g104 = (_g104 + 1);
HXDLIN( 458)												int i46 = (_g104 - 1);
HXDLIN( 458)												a48->data[i46] = 0;
            											}
            										}
            									}
HXDLIN( 458)									undoImage16 = a48;
            								}
            								break;
            								case (int)2: {
HXLINE( 458)									 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 458)									 ::iterMagic::U32ArrImg b48 = u32a5;
HXDLIN( 458)									{
HXLINE( 458)										b48->width = width5;
HXDLIN( 458)										b48->height = height5;
HXDLIN( 458)										b48->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 458)										int size5 = (b48->length * 4);
HXDLIN( 458)										b48->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN( 458)										{
HXLINE( 458)											int _g106 = 0;
HXDLIN( 458)											int _g107 = b48->length;
HXDLIN( 458)											while((_g106 < _g107)){
HXLINE( 458)												_g106 = (_g106 + 1);
HXDLIN( 458)												int i47 = (_g106 - 1);
HXDLIN( 458)												{
HXLINE( 458)													 ::haxe::io::ArrayBufferViewImpl this159 = b48->data;
HXDLIN( 458)													bool undoImage17;
HXDLIN( 458)													if ((i47 >= 0)) {
HXLINE( 458)														undoImage17 = (i47 < (this159->byteLength >> 2));
            													}
            													else {
HXLINE( 458)														undoImage17 = false;
            													}
HXDLIN( 458)													if (undoImage17) {
HXLINE( 458)														 ::haxe::io::Bytes _this5 = this159->bytes;
HXDLIN( 458)														int pos5 = ((i47 << 2) + this159->byteOffset);
HXDLIN( 458)														_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN( 458)														_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN( 458)														_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN( 458)														_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
HXDLIN( 458)									undoImage16 = b48;
            								}
            								break;
            								case (int)3: {
HXLINE( 458)									 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 458)									 ::iterMagic::VecIntImg v11 = vec5;
HXDLIN( 458)									{
HXLINE( 458)										v11->width = width5;
HXDLIN( 458)										v11->height = height5;
HXDLIN( 458)										v11->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 458)										v11->data = ::Array_obj< int >::__new(v11->length);
HXDLIN( 458)										{
HXLINE( 458)											int _g108 = 0;
HXDLIN( 458)											int _g109 = v11->length;
HXDLIN( 458)											while((_g108 < _g109)){
HXLINE( 458)												_g108 = (_g108 + 1);
HXDLIN( 458)												int i48 = (_g108 - 1);
HXDLIN( 458)												v11->data->__unsafe_set(i48,0);
            											}
            										}
            									}
HXDLIN( 458)									undoImage16 = v11;
            								}
            								break;
            								case (int)4: {
HXLINE( 458)									 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 458)									 ::iterMagic::StackIntImg b49 = sInt5;
HXDLIN( 458)									{
HXLINE( 458)										b49->width = width5;
HXDLIN( 458)										b49->height = height5;
HXDLIN( 458)										b49->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 458)										b49->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 458)										{
HXLINE( 458)											int len11 = b49->length;
HXDLIN( 458)											 ::haxe::ds::GenericStack_Int d5 = b49->data;
HXDLIN( 458)											if (::hx::IsNull( d5->head )) {
HXLINE( 458)												int _g110 = 0;
HXDLIN( 458)												int _g111 = len11;
HXDLIN( 458)												while((_g110 < _g111)){
HXLINE( 458)													_g110 = (_g110 + 1);
HXDLIN( 458)													int i49 = (_g110 - 1);
HXDLIN( 458)													d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            												}
            											}
            											else {
HXLINE( 458)												int _g112 = 0;
HXDLIN( 458)												int _g113 = len11;
HXDLIN( 458)												while((_g112 < _g113)){
HXLINE( 458)													_g112 = (_g112 + 1);
HXDLIN( 458)													int i50 = (_g112 - 1);
HXDLIN( 458)													{
HXLINE( 458)														 ::haxe::ds::GenericCell_Int l5 = b49->data->head;
HXDLIN( 458)														 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN( 458)														{
HXLINE( 458)															int _g114 = 0;
HXDLIN( 458)															int _g115 = i50;
HXDLIN( 458)															while((_g114 < _g115)){
HXLINE( 458)																_g114 = (_g114 + 1);
HXDLIN( 458)																int i51 = (_g114 - 1);
HXLINE( 345)																prev5 = l5;
HXLINE( 346)																l5 = l5->next;
            															}
            														}
HXLINE( 458)														if (::hx::IsNull( prev5 )) {
HXLINE( 458)															b49->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 458)															l5 = null();
            														}
            														else {
HXLINE( 458)															prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 458)															l5 = null();
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN( 458)									undoImage16 = b49;
            								}
            								break;
            							}
HXDLIN( 458)							this158->image = undoImage16;
HXDLIN( 458)							this158->width = width5;
HXDLIN( 458)							this158->height = height5;
HXDLIN( 458)							this158->imageType = ( (int)(imageType5) );
HXDLIN( 458)							undoImage15 = this158;
HXDLIN( 458)							{
HXLINE( 458)								int rectLeft5 = xIter35->start;
HXDLIN( 458)								int rectTop5 = yIter35->start;
HXDLIN( 458)								int rectRight5 = xIter35->max;
HXDLIN( 458)								bool forceClear5 = false;
HXDLIN( 458)								{
HXLINE( 458)									int _g116 = rectTop5;
HXDLIN( 458)									int _g117 = yIter35->max;
HXDLIN( 458)									while((_g116 < _g117)){
HXLINE( 458)										_g116 = (_g116 + 1);
HXDLIN( 458)										int dy7 = (_g116 - 1);
HXDLIN( 458)										{
HXLINE( 458)											int _g118 = rectLeft5;
HXDLIN( 458)											int _g119 = rectRight5;
HXDLIN( 458)											while((_g118 < _g119)){
HXLINE( 458)												_g118 = (_g118 + 1);
HXDLIN( 458)												int dx7 = (_g118 - 1);
HXDLIN( 458)												::Dynamic this160 = pixelImage->image;
HXDLIN( 458)												int index21;
HXDLIN( 458)												if (pixelImage->useVirtualPos) {
HXLINE( 458)													index21 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx7) - pixelImage->virtualX));
            												}
            												else {
HXLINE( 458)													index21 = ::Std_obj::_hx_int(( (Float)(((dy7 * pixelImage->width) + dx7)) ));
            												}
HXDLIN( 458)												int c24 = ::iterMagic::Iimg_obj::get(this160,index21);
HXDLIN( 458)												int col5;
HXDLIN( 458)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)													col5 = ((((((c24 >> 24) & 255) << 24) | ((c24 & 255) << 16)) | (((c24 >> 8) & 255) << 8)) | ((c24 >> 16) & 255));
            												}
            												else {
HXLINE( 458)													col5 = c24;
            												}
HXDLIN( 458)												bool hitQuad41;
HXDLIN( 458)												if (pixelImage->useMask) {
HXLINE( 458)													hitQuad41 = ::hx::IsNotNull( pixelImage->mask );
            												}
            												else {
HXLINE( 458)													hitQuad41 = false;
            												}
HXDLIN( 458)												if (hitQuad41) {
HXLINE( 458)													 ::pi_xy::ImageStruct this161 = pixelImage->mask;
HXDLIN( 458)													::Dynamic this162 = this161->image;
HXDLIN( 458)													int index22;
HXDLIN( 458)													if (this161->useVirtualPos) {
HXLINE( 458)														index22 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this161->virtualY) * ( (Float)(this161->width) )) + dx7) - this161->virtualX));
            													}
            													else {
HXLINE( 458)														index22 = ::Std_obj::_hx_int(( (Float)(((dy7 * this161->width) + dx7)) ));
            													}
HXDLIN( 458)													int c25 = ::iterMagic::Iimg_obj::get(this162,index22);
HXDLIN( 458)													int v12;
HXDLIN( 458)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)														v12 = ((((((c25 >> 24) & 255) << 24) | ((c25 & 255) << 16)) | (((c25 >> 8) & 255) << 8)) | ((c25 >> 16) & 255));
            													}
            													else {
HXLINE( 458)														v12 = c25;
            													}
HXDLIN( 458)													int maskPixel5 = v12;
HXDLIN( 458)													int this163 = col5;
HXDLIN( 458)													if ((maskPixel5 == 0)) {
HXLINE( 458)														col5 = this163;
            													}
            													else {
HXLINE( 458)														Float m05;
HXDLIN( 458)														int this164 = ((maskPixel5 >> 24) & 255);
HXDLIN( 458)														if ((this164 == 0)) {
HXLINE( 458)															m05 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															m05 = (( (Float)(this164) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float m15;
HXDLIN( 458)														int this165 = ((maskPixel5 >> 16) & 255);
HXDLIN( 458)														if ((this165 == 0)) {
HXLINE( 458)															m15 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															m15 = (( (Float)(this165) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float m25;
HXDLIN( 458)														int this166 = ((maskPixel5 >> 8) & 255);
HXDLIN( 458)														if ((this166 == 0)) {
HXLINE( 458)															m25 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															m25 = (( (Float)(this166) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float m35;
HXDLIN( 458)														int this167 = (maskPixel5 & 255);
HXDLIN( 458)														if ((this167 == 0)) {
HXLINE( 458)															m35 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															m35 = (( (Float)(this167) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this163 >> 24) & 255)) )));
HXDLIN( 458)														int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this163 >> 16) & 255)) )));
HXDLIN( 458)														int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this163 >> 8) & 255)) )));
HXDLIN( 458)														int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this163 & 255)) )));
HXDLIN( 458)														col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 458)												if ((col5 != 0)) {
HXLINE( 458)													int x17 = (dx7 - rectLeft5);
HXDLIN( 458)													int y17 = (dy7 - rectTop5);
HXDLIN( 458)													int c26 = col5;
HXDLIN( 458)													bool hitQuad42;
HXDLIN( 458)													if ((((c26 >> 24) & 255) < 254)) {
HXLINE( 458)														hitQuad42 = undoImage15->transparent;
            													}
            													else {
HXLINE( 458)														hitQuad42 = false;
            													}
HXDLIN( 458)													if (hitQuad42) {
HXLINE( 458)														int location10;
HXDLIN( 458)														if (undoImage15->useVirtualPos) {
HXLINE( 458)															location10 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x17) - undoImage15->virtualX));
            														}
            														else {
HXLINE( 458)															location10 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage15->width) + x17)) ));
            														}
HXDLIN( 458)														int this168 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN( 458)														int this169;
HXDLIN( 458)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)															this169 = ((((((this168 >> 24) & 255) << 24) | ((this168 & 255) << 16)) | (((this168 >> 8) & 255) << 8)) | ((this168 >> 16) & 255));
            														}
            														else {
HXLINE( 458)															this169 = this168;
            														}
HXDLIN( 458)														Float a115;
HXDLIN( 458)														int this170 = ((this169 >> 24) & 255);
HXDLIN( 458)														if ((this170 == 0)) {
HXLINE( 458)															a115 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															a115 = (( (Float)(this170) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float r112;
HXDLIN( 458)														int this171 = ((this169 >> 16) & 255);
HXDLIN( 458)														if ((this171 == 0)) {
HXLINE( 458)															r112 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															r112 = (( (Float)(this171) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float g112;
HXDLIN( 458)														int this172 = ((this169 >> 8) & 255);
HXDLIN( 458)														if ((this172 == 0)) {
HXLINE( 458)															g112 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															g112 = (( (Float)(this172) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float b116;
HXDLIN( 458)														int this173 = (this169 & 255);
HXDLIN( 458)														if ((this173 == 0)) {
HXLINE( 458)															b116 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															b116 = (( (Float)(this173) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float a213;
HXDLIN( 458)														int this174 = ((col5 >> 24) & 255);
HXDLIN( 458)														if ((this174 == 0)) {
HXLINE( 458)															a213 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															a213 = (( (Float)(this174) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float r211;
HXDLIN( 458)														int this175 = ((col5 >> 16) & 255);
HXDLIN( 458)														if ((this175 == 0)) {
HXLINE( 458)															r211 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															r211 = (( (Float)(this175) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float g211;
HXDLIN( 458)														int this176 = ((col5 >> 8) & 255);
HXDLIN( 458)														if ((this176 == 0)) {
HXLINE( 458)															g211 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															g211 = (( (Float)(this176) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float b214;
HXDLIN( 458)														int this177 = (col5 & 255);
HXDLIN( 458)														if ((this177 == 0)) {
HXLINE( 458)															b214 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															b214 = (( (Float)(this177) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float a312 = (a115 * (( (Float)(1) ) - a213));
HXDLIN( 458)														int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a312) + (r211 * a213))));
HXDLIN( 458)														int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a312) + (g211 * a213))));
HXDLIN( 458)														int b50 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b214 * a213))));
HXDLIN( 458)														int a49 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a213)));
HXDLIN( 458)														int blended10 = ((((a49 << 24) | (r31 << 16)) | (g31 << 8)) | b50);
HXDLIN( 458)														{
HXLINE( 458)															int hitQuad43;
HXDLIN( 458)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)																hitQuad43 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            															}
            															else {
HXLINE( 458)																hitQuad43 = blended10;
            															}
HXDLIN( 458)															::iterMagic::Iimg_obj::set(undoImage15->image,location10,hitQuad43);
            														}
            													}
            													else {
HXLINE( 458)														::Dynamic this178 = undoImage15->image;
HXDLIN( 458)														int index23;
HXDLIN( 458)														if (undoImage15->useVirtualPos) {
HXLINE( 458)															index23 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x17) - undoImage15->virtualX));
            														}
            														else {
HXLINE( 458)															index23 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage15->width) + x17)) ));
            														}
HXDLIN( 458)														int hitQuad44;
HXDLIN( 458)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)															hitQuad44 = ((((((c26 >> 24) & 255) << 24) | ((c26 & 255) << 16)) | (((c26 >> 8) & 255) << 8)) | ((c26 >> 16) & 255));
            														}
            														else {
HXLINE( 458)															hitQuad44 = c26;
            														}
HXDLIN( 458)														::iterMagic::Iimg_obj::set(this178,index23,hitQuad44);
            													}
            												}
            												else {
HXLINE( 458)													if (forceClear5) {
HXLINE( 458)														::Dynamic this179 = undoImage15->image;
HXDLIN( 458)														int x18 = (dx7 - rectLeft5);
HXDLIN( 458)														int y18 = (dy7 - rectTop5);
HXDLIN( 458)														int index24;
HXDLIN( 458)														if (undoImage15->useVirtualPos) {
HXLINE( 458)															index24 = ::Std_obj::_hx_int(((((( (Float)(y18) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x18) - undoImage15->virtualX));
            														}
            														else {
HXLINE( 458)															index24 = ::Std_obj::_hx_int(( (Float)(((y18 * undoImage15->width) + x18)) ));
            														}
HXDLIN( 458)														::iterMagic::Iimg_obj::set(this179,index24,0);
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 458)						bool found5 = false;
HXDLIN( 458)						Float s1 = ((Float)0.);
HXDLIN( 458)						Float t1 = ((Float)0.);
HXDLIN( 458)						Float sxx1 = ((Float)0.);
HXDLIN( 458)						Float txx1 = ((Float)0.);
HXDLIN( 458)						{
HXLINE( 458)							int _g_min10 = xIter35->start;
HXDLIN( 458)							int _g_max10 = xIter35->max;
HXDLIN( 458)							while((_g_min10 < _g_max10)){
HXLINE( 458)								_g_min10 = (_g_min10 + 1);
HXDLIN( 458)								int x19 = (_g_min10 - 1);
HXLINE(  60)								sxx1 = (sx1 * ( (Float)(x19) ));
HXLINE(  61)								txx1 = (tx1 * ( (Float)(x19) ));
HXLINE(  62)								found5 = false;
HXLINE( 458)								{
HXLINE( 458)									int _g_min11 = yIter35->start;
HXDLIN( 458)									int _g_max11 = yIter35->max;
HXDLIN( 458)									while((_g_min11 < _g_max11)){
HXLINE( 458)										_g_min11 = (_g_min11 + 1);
HXDLIN( 458)										int y19 = (_g_min11 - 1);
HXLINE(  64)										s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y19) )));
HXLINE(  65)										t1 = ((t01 + txx1) + (ty1 * ( (Float)(y19) )));
HXLINE( 458)										bool hitQuad45;
HXDLIN( 458)										if (!((s1 <= 0))) {
HXLINE( 458)											hitQuad45 = (t1 <= 0);
            										}
            										else {
HXLINE( 458)											hitQuad45 = true;
            										}
HXDLIN( 458)										if (hitQuad45) {
HXLINE( 458)											if (found5) {
HXLINE( 458)												goto _hx_goto_606;
            											}
            										}
            										else {
HXLINE( 458)											if (((s1 + t1) < A1)) {
HXLINE( 458)												{
HXLINE( 458)													int c27 = color;
HXDLIN( 458)													bool hitQuad46;
HXDLIN( 458)													if ((((c27 >> 24) & 255) < 254)) {
HXLINE( 458)														hitQuad46 = pixelImage->transparent;
            													}
            													else {
HXLINE( 458)														hitQuad46 = false;
            													}
HXDLIN( 458)													if (hitQuad46) {
HXLINE( 458)														int location11;
HXDLIN( 458)														if (pixelImage->useVirtualPos) {
HXLINE( 458)															location11 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x19) - pixelImage->virtualX));
            														}
            														else {
HXLINE( 458)															location11 = ::Std_obj::_hx_int(( (Float)(((y19 * pixelImage->width) + x19)) ));
            														}
HXDLIN( 458)														int this180 = ::iterMagic::Iimg_obj::get(pixelImage->image,location11);
HXDLIN( 458)														int this181;
HXDLIN( 458)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)															this181 = ((((((this180 >> 24) & 255) << 24) | ((this180 & 255) << 16)) | (((this180 >> 8) & 255) << 8)) | ((this180 >> 16) & 255));
            														}
            														else {
HXLINE( 458)															this181 = this180;
            														}
HXDLIN( 458)														Float a116;
HXDLIN( 458)														int this182 = ((this181 >> 24) & 255);
HXDLIN( 458)														if ((this182 == 0)) {
HXLINE( 458)															a116 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															a116 = (( (Float)(this182) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float r113;
HXDLIN( 458)														int this183 = ((this181 >> 16) & 255);
HXDLIN( 458)														if ((this183 == 0)) {
HXLINE( 458)															r113 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															r113 = (( (Float)(this183) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float g113;
HXDLIN( 458)														int this184 = ((this181 >> 8) & 255);
HXDLIN( 458)														if ((this184 == 0)) {
HXLINE( 458)															g113 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															g113 = (( (Float)(this184) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float b117;
HXDLIN( 458)														int this185 = (this181 & 255);
HXDLIN( 458)														if ((this185 == 0)) {
HXLINE( 458)															b117 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															b117 = (( (Float)(this185) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float a214;
HXDLIN( 458)														int this186 = ((color >> 24) & 255);
HXDLIN( 458)														if ((this186 == 0)) {
HXLINE( 458)															a214 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															a214 = (( (Float)(this186) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float r212;
HXDLIN( 458)														int this187 = ((color >> 16) & 255);
HXDLIN( 458)														if ((this187 == 0)) {
HXLINE( 458)															r212 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															r212 = (( (Float)(this187) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float g212;
HXDLIN( 458)														int this188 = ((color >> 8) & 255);
HXDLIN( 458)														if ((this188 == 0)) {
HXLINE( 458)															g212 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															g212 = (( (Float)(this188) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float b215;
HXDLIN( 458)														int this189 = (color & 255);
HXDLIN( 458)														if ((this189 == 0)) {
HXLINE( 458)															b215 = ((Float)0.);
            														}
            														else {
HXLINE( 458)															b215 = (( (Float)(this189) ) / ( (Float)(255) ));
            														}
HXDLIN( 458)														Float a313 = (a116 * (( (Float)(1) ) - a214));
HXDLIN( 458)														int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a313) + (r212 * a214))));
HXDLIN( 458)														int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a313) + (g212 * a214))));
HXDLIN( 458)														int b51 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b215 * a214))));
HXDLIN( 458)														int a50 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a214)));
HXDLIN( 458)														int blended11 = ((((a50 << 24) | (r32 << 16)) | (g32 << 8)) | b51);
HXDLIN( 458)														{
HXLINE( 458)															int hitQuad47;
HXDLIN( 458)															if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)																hitQuad47 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            															}
            															else {
HXLINE( 458)																hitQuad47 = blended11;
            															}
HXDLIN( 458)															::iterMagic::Iimg_obj::set(pixelImage->image,location11,hitQuad47);
            														}
            													}
            													else {
HXLINE( 458)														::Dynamic this190 = pixelImage->image;
HXDLIN( 458)														int index25;
HXDLIN( 458)														if (pixelImage->useVirtualPos) {
HXLINE( 458)															index25 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x19) - pixelImage->virtualX));
            														}
            														else {
HXLINE( 458)															index25 = ::Std_obj::_hx_int(( (Float)(((y19 * pixelImage->width) + x19)) ));
            														}
HXDLIN( 458)														int hitQuad48;
HXDLIN( 458)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)															hitQuad48 = ((((((c27 >> 24) & 255) << 24) | ((c27 & 255) << 16)) | (((c27 >> 8) & 255) << 8)) | ((c27 >> 16) & 255));
            														}
            														else {
HXLINE( 458)															hitQuad48 = c27;
            														}
HXDLIN( 458)														::iterMagic::Iimg_obj::set(this190,index25,hitQuad48);
            													}
            												}
HXLINE(  73)												found5 = true;
            											}
            											else {
HXLINE( 458)												if (found5) {
HXLINE( 458)													goto _hx_goto_606;
            												}
            											}
            										}
            									}
            									_hx_goto_606:;
            								}
            							}
            						}
            					}
            				}
HXDLIN( 458)				bool hasUndo6 = false;
HXDLIN( 458)				int aA4 = ((color >> 24) & 255);
HXDLIN( 458)				int rA4 = ((color >> 16) & 255);
HXDLIN( 458)				int gA4 = ((color >> 8) & 255);
HXDLIN( 458)				int bA4 = (color & 255);
HXDLIN( 458)				Float bcx4 = (cx5 - dx5);
HXDLIN( 458)				Float bcy4 = (cy5 - dy5);
HXDLIN( 458)				Float acx4 = (ex1 - dx5);
HXDLIN( 458)				Float acy4 = (ey1 - dy5);
HXDLIN( 458)				Float dot114 = ((bcx4 * bcx4) + (bcy4 * bcy4));
HXDLIN( 458)				Float dot124 = ((bcx4 * acx4) + (bcy4 * acy4));
HXDLIN( 458)				Float dot224 = ((acx4 * acx4) + (acy4 * acy4));
HXDLIN( 458)				Float denom14 = (( (Float)(1) ) / ((dot114 * dot224) - (dot124 * dot124)));
HXDLIN( 458)				 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN( 458)				if ((ex1 > cx5)) {
HXLINE( 458)					if ((ex1 > dx5)) {
HXLINE( 458)						int min40;
HXDLIN( 458)						if ((cx5 > dx5)) {
HXLINE( 458)							min40 = ::Math_obj::floor(dx5);
            						}
            						else {
HXLINE( 458)							min40 = ::Math_obj::floor(cx5);
            						}
HXDLIN( 458)						int ii_min80 = min40;
HXDLIN( 458)						int ii_max80 = ::Math_obj::ceil(ex1);
HXDLIN( 458)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min80,ii_max80);
            					}
            					else {
HXLINE( 458)						int ii_min81 = ::Math_obj::floor(cx5);
HXDLIN( 458)						int ii_max81 = ::Math_obj::ceil(dx5);
HXDLIN( 458)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min81,ii_max81);
            					}
            				}
            				else {
HXLINE( 458)					if ((cx5 > dx5)) {
HXLINE( 458)						int min41;
HXDLIN( 458)						if ((ex1 > dx5)) {
HXLINE( 458)							min41 = ::Math_obj::floor(dx5);
            						}
            						else {
HXLINE( 458)							min41 = ::Math_obj::ceil(ex1);
            						}
HXDLIN( 458)						int ii_min82 = min41;
HXDLIN( 458)						int ii_max82 = ::Math_obj::ceil(cx5);
HXDLIN( 458)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min82,ii_max82);
            					}
            					else {
HXLINE( 458)						int ii_min83 = ::Math_obj::floor(ex1);
HXDLIN( 458)						int ii_max83 = ::Math_obj::ceil(dx5);
HXDLIN( 458)						xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min83,ii_max83);
            					}
            				}
HXDLIN( 458)				 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN( 458)				if ((ey1 > cy5)) {
HXLINE( 458)					if ((ey1 > dy5)) {
HXLINE( 458)						int min42;
HXDLIN( 458)						if ((cy5 > dy5)) {
HXLINE( 458)							min42 = ::Math_obj::floor(dy5);
            						}
            						else {
HXLINE( 458)							min42 = ::Math_obj::floor(cy5);
            						}
HXDLIN( 458)						int ii_min84 = min42;
HXDLIN( 458)						int ii_max84 = ::Math_obj::ceil(ey1);
HXDLIN( 458)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min84,ii_max84);
            					}
            					else {
HXLINE( 458)						int ii_min85 = ::Math_obj::floor(cy5);
HXDLIN( 458)						int ii_max85 = ::Math_obj::ceil(dy5);
HXDLIN( 458)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min85,ii_max85);
            					}
            				}
            				else {
HXLINE( 458)					if ((cy5 > dy5)) {
HXLINE( 458)						int min43;
HXDLIN( 458)						if ((ey1 > dy5)) {
HXLINE( 458)							min43 = ::Math_obj::floor(dy5);
            						}
            						else {
HXLINE( 458)							min43 = ::Math_obj::ceil(ey1);
            						}
HXDLIN( 458)						int ii_min86 = min43;
HXDLIN( 458)						int ii_max86 = ::Math_obj::ceil(cy5);
HXDLIN( 458)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min86,ii_max86);
            					}
            					else {
HXLINE( 458)						int ii_min87 = ::Math_obj::floor(ey1);
HXDLIN( 458)						int ii_max87 = ::Math_obj::ceil(dy5);
HXDLIN( 458)						yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min87,ii_max87);
            					}
            				}
HXDLIN( 458)				 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN( 458)				if (hasUndo6) {
HXLINE( 458)					int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN( 458)					int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN( 458)					 ::Dynamic imageType6 = null();
HXDLIN( 458)					 ::pi_xy::ImageStruct this191 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 458)					if (::hx::IsNull( imageType6 )) {
HXLINE(  54)						imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 458)					::Dynamic undoImage19;
HXDLIN( 458)					switch((int)(( (int)(imageType6) ))){
            						case (int)0: {
HXLINE( 458)							 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::BytesImg b52 = byt6;
HXDLIN( 458)							{
HXLINE( 458)								b52->width = width6;
HXDLIN( 458)								b52->height = height6;
HXDLIN( 458)								b52->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 458)								b52->data = ::haxe::io::Bytes_obj::alloc((b52->length * 4));
HXDLIN( 458)								{
HXLINE( 458)									int len12 = b52->length;
HXDLIN( 458)									int w6 = 0;
HXDLIN( 458)									{
HXLINE( 458)										int _g120 = 0;
HXDLIN( 458)										int _g121 = b52->height;
HXDLIN( 458)										while((_g120 < _g121)){
HXLINE( 458)											_g120 = (_g120 + 1);
HXDLIN( 458)											int y20 = (_g120 - 1);
HXDLIN( 458)											{
HXLINE( 458)												int _g122 = 0;
HXDLIN( 458)												int _g123 = b52->width;
HXDLIN( 458)												while((_g122 < _g123)){
HXLINE( 458)													_g122 = (_g122 + 1);
HXDLIN( 458)													int x20 = (_g122 - 1);
HXDLIN( 458)													{
HXLINE( 458)														w6 = (w6 + 1);
HXDLIN( 458)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 458)													{
HXLINE( 458)														w6 = (w6 + 1);
HXDLIN( 458)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 458)													{
HXLINE( 458)														w6 = (w6 + 1);
HXDLIN( 458)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 458)													{
HXLINE( 458)														w6 = (w6 + 1);
HXDLIN( 458)														b52->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 458)							undoImage19 = b52;
            						}
            						break;
            						case (int)1: {
HXLINE( 458)							 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::ArrIntImg a51 = arrI6;
HXDLIN( 458)							{
HXLINE( 458)								a51->width = width6;
HXDLIN( 458)								a51->height = height6;
HXDLIN( 458)								a51->data = ::Array_obj< int >::__new(0);
HXDLIN( 458)								a51->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 458)								{
HXLINE( 458)									int _g124 = 0;
HXDLIN( 458)									int _g125 = a51->length;
HXDLIN( 458)									while((_g124 < _g125)){
HXLINE( 458)										_g124 = (_g124 + 1);
HXDLIN( 458)										int i52 = (_g124 - 1);
HXDLIN( 458)										a51->data[i52] = 0;
            									}
            								}
            							}
HXDLIN( 458)							undoImage19 = a51;
            						}
            						break;
            						case (int)2: {
HXLINE( 458)							 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::U32ArrImg b53 = u32a6;
HXDLIN( 458)							{
HXLINE( 458)								b53->width = width6;
HXDLIN( 458)								b53->height = height6;
HXDLIN( 458)								b53->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 458)								int size6 = (b53->length * 4);
HXDLIN( 458)								b53->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN( 458)								{
HXLINE( 458)									int _g126 = 0;
HXDLIN( 458)									int _g127 = b53->length;
HXDLIN( 458)									while((_g126 < _g127)){
HXLINE( 458)										_g126 = (_g126 + 1);
HXDLIN( 458)										int i53 = (_g126 - 1);
HXDLIN( 458)										{
HXLINE( 458)											 ::haxe::io::ArrayBufferViewImpl this192 = b53->data;
HXDLIN( 458)											bool undoImage20;
HXDLIN( 458)											if ((i53 >= 0)) {
HXLINE( 458)												undoImage20 = (i53 < (this192->byteLength >> 2));
            											}
            											else {
HXLINE( 458)												undoImage20 = false;
            											}
HXDLIN( 458)											if (undoImage20) {
HXLINE( 458)												 ::haxe::io::Bytes _this6 = this192->bytes;
HXDLIN( 458)												int pos6 = ((i53 << 2) + this192->byteOffset);
HXDLIN( 458)												_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN( 458)												_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN( 458)												_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN( 458)												_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 458)							undoImage19 = b53;
            						}
            						break;
            						case (int)3: {
HXLINE( 458)							 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::VecIntImg v13 = vec6;
HXDLIN( 458)							{
HXLINE( 458)								v13->width = width6;
HXDLIN( 458)								v13->height = height6;
HXDLIN( 458)								v13->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 458)								v13->data = ::Array_obj< int >::__new(v13->length);
HXDLIN( 458)								{
HXLINE( 458)									int _g128 = 0;
HXDLIN( 458)									int _g129 = v13->length;
HXDLIN( 458)									while((_g128 < _g129)){
HXLINE( 458)										_g128 = (_g128 + 1);
HXDLIN( 458)										int i54 = (_g128 - 1);
HXDLIN( 458)										v13->data->__unsafe_set(i54,0);
            									}
            								}
            							}
HXDLIN( 458)							undoImage19 = v13;
            						}
            						break;
            						case (int)4: {
HXLINE( 458)							 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::StackIntImg b54 = sInt6;
HXDLIN( 458)							{
HXLINE( 458)								b54->width = width6;
HXDLIN( 458)								b54->height = height6;
HXDLIN( 458)								b54->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 458)								b54->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 458)								{
HXLINE( 458)									int len13 = b54->length;
HXDLIN( 458)									 ::haxe::ds::GenericStack_Int d6 = b54->data;
HXDLIN( 458)									if (::hx::IsNull( d6->head )) {
HXLINE( 458)										int _g130 = 0;
HXDLIN( 458)										int _g131 = len13;
HXDLIN( 458)										while((_g130 < _g131)){
HXLINE( 458)											_g130 = (_g130 + 1);
HXDLIN( 458)											int i55 = (_g130 - 1);
HXDLIN( 458)											d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            										}
            									}
            									else {
HXLINE( 458)										int _g132 = 0;
HXDLIN( 458)										int _g133 = len13;
HXDLIN( 458)										while((_g132 < _g133)){
HXLINE( 458)											_g132 = (_g132 + 1);
HXDLIN( 458)											int i56 = (_g132 - 1);
HXDLIN( 458)											{
HXLINE( 458)												 ::haxe::ds::GenericCell_Int l6 = b54->data->head;
HXDLIN( 458)												 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN( 458)												{
HXLINE( 458)													int _g134 = 0;
HXDLIN( 458)													int _g135 = i56;
HXDLIN( 458)													while((_g134 < _g135)){
HXLINE( 458)														_g134 = (_g134 + 1);
HXDLIN( 458)														int i57 = (_g134 - 1);
HXLINE( 345)														prev6 = l6;
HXLINE( 346)														l6 = l6->next;
            													}
            												}
HXLINE( 458)												if (::hx::IsNull( prev6 )) {
HXLINE( 458)													b54->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 458)													l6 = null();
            												}
            												else {
HXLINE( 458)													prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 458)													l6 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 458)							undoImage19 = b54;
            						}
            						break;
            					}
HXDLIN( 458)					this191->image = undoImage19;
HXDLIN( 458)					this191->width = width6;
HXDLIN( 458)					this191->height = height6;
HXDLIN( 458)					this191->imageType = ( (int)(imageType6) );
HXDLIN( 458)					undoImage18 = this191;
HXDLIN( 458)					{
HXLINE( 458)						int rectLeft6 = xIter36->start;
HXDLIN( 458)						int rectTop6 = yIter36->start;
HXDLIN( 458)						int rectRight6 = xIter36->max;
HXDLIN( 458)						bool forceClear6 = false;
HXDLIN( 458)						{
HXLINE( 458)							int _g136 = rectTop6;
HXDLIN( 458)							int _g137 = yIter36->max;
HXDLIN( 458)							while((_g136 < _g137)){
HXLINE( 458)								_g136 = (_g136 + 1);
HXDLIN( 458)								int dy8 = (_g136 - 1);
HXDLIN( 458)								{
HXLINE( 458)									int _g138 = rectLeft6;
HXDLIN( 458)									int _g139 = rectRight6;
HXDLIN( 458)									while((_g138 < _g139)){
HXLINE( 458)										_g138 = (_g138 + 1);
HXDLIN( 458)										int dx8 = (_g138 - 1);
HXDLIN( 458)										::Dynamic this193 = pixelImage->image;
HXDLIN( 458)										int index26;
HXDLIN( 458)										if (pixelImage->useVirtualPos) {
HXLINE( 458)											index26 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx8) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 458)											index26 = ::Std_obj::_hx_int(( (Float)(((dy8 * pixelImage->width) + dx8)) ));
            										}
HXDLIN( 458)										int c28 = ::iterMagic::Iimg_obj::get(this193,index26);
HXDLIN( 458)										int col6;
HXDLIN( 458)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)											col6 = ((((((c28 >> 24) & 255) << 24) | ((c28 & 255) << 16)) | (((c28 >> 8) & 255) << 8)) | ((c28 >> 16) & 255));
            										}
            										else {
HXLINE( 458)											col6 = c28;
            										}
HXDLIN( 458)										bool hitQuad49;
HXDLIN( 458)										if (pixelImage->useMask) {
HXLINE( 458)											hitQuad49 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 458)											hitQuad49 = false;
            										}
HXDLIN( 458)										if (hitQuad49) {
HXLINE( 458)											 ::pi_xy::ImageStruct this194 = pixelImage->mask;
HXDLIN( 458)											::Dynamic this195 = this194->image;
HXDLIN( 458)											int index27;
HXDLIN( 458)											if (this194->useVirtualPos) {
HXLINE( 458)												index27 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this194->virtualY) * ( (Float)(this194->width) )) + dx8) - this194->virtualX));
            											}
            											else {
HXLINE( 458)												index27 = ::Std_obj::_hx_int(( (Float)(((dy8 * this194->width) + dx8)) ));
            											}
HXDLIN( 458)											int c29 = ::iterMagic::Iimg_obj::get(this195,index27);
HXDLIN( 458)											int v14;
HXDLIN( 458)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)												v14 = ((((((c29 >> 24) & 255) << 24) | ((c29 & 255) << 16)) | (((c29 >> 8) & 255) << 8)) | ((c29 >> 16) & 255));
            											}
            											else {
HXLINE( 458)												v14 = c29;
            											}
HXDLIN( 458)											int maskPixel6 = v14;
HXDLIN( 458)											int this196 = col6;
HXDLIN( 458)											if ((maskPixel6 == 0)) {
HXLINE( 458)												col6 = this196;
            											}
            											else {
HXLINE( 458)												Float m06;
HXDLIN( 458)												int this197 = ((maskPixel6 >> 24) & 255);
HXDLIN( 458)												if ((this197 == 0)) {
HXLINE( 458)													m06 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													m06 = (( (Float)(this197) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float m16;
HXDLIN( 458)												int this198 = ((maskPixel6 >> 16) & 255);
HXDLIN( 458)												if ((this198 == 0)) {
HXLINE( 458)													m16 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													m16 = (( (Float)(this198) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float m26;
HXDLIN( 458)												int this199 = ((maskPixel6 >> 8) & 255);
HXDLIN( 458)												if ((this199 == 0)) {
HXLINE( 458)													m26 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													m26 = (( (Float)(this199) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float m36;
HXDLIN( 458)												int this200 = (maskPixel6 & 255);
HXDLIN( 458)												if ((this200 == 0)) {
HXLINE( 458)													m36 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													m36 = (( (Float)(this200) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this196 >> 24) & 255)) )));
HXDLIN( 458)												int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this196 >> 16) & 255)) )));
HXDLIN( 458)												int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this196 >> 8) & 255)) )));
HXDLIN( 458)												int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this196 & 255)) )));
HXDLIN( 458)												col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 458)										if ((col6 != 0)) {
HXLINE( 458)											int x21 = (dx8 - rectLeft6);
HXDLIN( 458)											int y21 = (dy8 - rectTop6);
HXDLIN( 458)											int c30 = col6;
HXDLIN( 458)											bool hitQuad50;
HXDLIN( 458)											if ((((c30 >> 24) & 255) < 254)) {
HXLINE( 458)												hitQuad50 = undoImage18->transparent;
            											}
            											else {
HXLINE( 458)												hitQuad50 = false;
            											}
HXDLIN( 458)											if (hitQuad50) {
HXLINE( 458)												int location12;
HXDLIN( 458)												if (undoImage18->useVirtualPos) {
HXLINE( 458)													location12 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x21) - undoImage18->virtualX));
            												}
            												else {
HXLINE( 458)													location12 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage18->width) + x21)) ));
            												}
HXDLIN( 458)												int this201 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN( 458)												int this202;
HXDLIN( 458)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)													this202 = ((((((this201 >> 24) & 255) << 24) | ((this201 & 255) << 16)) | (((this201 >> 8) & 255) << 8)) | ((this201 >> 16) & 255));
            												}
            												else {
HXLINE( 458)													this202 = this201;
            												}
HXDLIN( 458)												Float a117;
HXDLIN( 458)												int this203 = ((this202 >> 24) & 255);
HXDLIN( 458)												if ((this203 == 0)) {
HXLINE( 458)													a117 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													a117 = (( (Float)(this203) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float r114;
HXDLIN( 458)												int this204 = ((this202 >> 16) & 255);
HXDLIN( 458)												if ((this204 == 0)) {
HXLINE( 458)													r114 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													r114 = (( (Float)(this204) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float g114;
HXDLIN( 458)												int this205 = ((this202 >> 8) & 255);
HXDLIN( 458)												if ((this205 == 0)) {
HXLINE( 458)													g114 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													g114 = (( (Float)(this205) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float b118;
HXDLIN( 458)												int this206 = (this202 & 255);
HXDLIN( 458)												if ((this206 == 0)) {
HXLINE( 458)													b118 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													b118 = (( (Float)(this206) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float a215;
HXDLIN( 458)												int this207 = ((col6 >> 24) & 255);
HXDLIN( 458)												if ((this207 == 0)) {
HXLINE( 458)													a215 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													a215 = (( (Float)(this207) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float r213;
HXDLIN( 458)												int this208 = ((col6 >> 16) & 255);
HXDLIN( 458)												if ((this208 == 0)) {
HXLINE( 458)													r213 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													r213 = (( (Float)(this208) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float g213;
HXDLIN( 458)												int this209 = ((col6 >> 8) & 255);
HXDLIN( 458)												if ((this209 == 0)) {
HXLINE( 458)													g213 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													g213 = (( (Float)(this209) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float b216;
HXDLIN( 458)												int this210 = (col6 & 255);
HXDLIN( 458)												if ((this210 == 0)) {
HXLINE( 458)													b216 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													b216 = (( (Float)(this210) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float a314 = (a117 * (( (Float)(1) ) - a215));
HXDLIN( 458)												int r33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a314) + (r213 * a215))));
HXDLIN( 458)												int g33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a314) + (g213 * a215))));
HXDLIN( 458)												int b55 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b216 * a215))));
HXDLIN( 458)												int a52 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a215)));
HXDLIN( 458)												int blended12 = ((((a52 << 24) | (r33 << 16)) | (g33 << 8)) | b55);
HXDLIN( 458)												{
HXLINE( 458)													int hitQuad51;
HXDLIN( 458)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)														hitQuad51 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            													}
            													else {
HXLINE( 458)														hitQuad51 = blended12;
            													}
HXDLIN( 458)													::iterMagic::Iimg_obj::set(undoImage18->image,location12,hitQuad51);
            												}
            											}
            											else {
HXLINE( 458)												::Dynamic this211 = undoImage18->image;
HXDLIN( 458)												int index28;
HXDLIN( 458)												if (undoImage18->useVirtualPos) {
HXLINE( 458)													index28 = ::Std_obj::_hx_int(((((( (Float)(y21) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x21) - undoImage18->virtualX));
            												}
            												else {
HXLINE( 458)													index28 = ::Std_obj::_hx_int(( (Float)(((y21 * undoImage18->width) + x21)) ));
            												}
HXDLIN( 458)												int hitQuad52;
HXDLIN( 458)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)													hitQuad52 = ((((((c30 >> 24) & 255) << 24) | ((c30 & 255) << 16)) | (((c30 >> 8) & 255) << 8)) | ((c30 >> 16) & 255));
            												}
            												else {
HXLINE( 458)													hitQuad52 = c30;
            												}
HXDLIN( 458)												::iterMagic::Iimg_obj::set(this211,index28,hitQuad52);
            											}
            										}
            										else {
HXLINE( 458)											if (forceClear6) {
HXLINE( 458)												::Dynamic this212 = undoImage18->image;
HXDLIN( 458)												int x22 = (dx8 - rectLeft6);
HXDLIN( 458)												int y22 = (dy8 - rectTop6);
HXDLIN( 458)												int index29;
HXDLIN( 458)												if (undoImage18->useVirtualPos) {
HXLINE( 458)													index29 = ::Std_obj::_hx_int(((((( (Float)(y22) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x22) - undoImage18->virtualX));
            												}
            												else {
HXLINE( 458)													index29 = ::Std_obj::_hx_int(( (Float)(((y22 * undoImage18->width) + x22)) ));
            												}
HXDLIN( 458)												::iterMagic::Iimg_obj::set(this212,index29,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 458)				bool found6 = false;
HXDLIN( 458)				{
HXLINE( 458)					int _g_min12 = xIter36->start;
HXDLIN( 458)					int _g_max12 = xIter36->max;
HXDLIN( 458)					while((_g_min12 < _g_max12)){
HXLINE( 458)						_g_min12 = (_g_min12 + 1);
HXDLIN( 458)						int px5 = (_g_min12 - 1);
HXDLIN( 458)						Float pcx4 = (( (Float)(px5) ) - dx5);
HXLINE( 619)						found6 = false;
HXLINE( 458)						{
HXLINE( 458)							int _g_min13 = yIter36->start;
HXDLIN( 458)							int _g_max13 = yIter36->max;
HXDLIN( 458)							while((_g_min13 < _g_max13)){
HXLINE( 458)								_g_min13 = (_g_min13 + 1);
HXDLIN( 458)								int py5 = (_g_min13 - 1);
HXDLIN( 458)								Float pcy4 = (( (Float)(py5) ) - dy5);
HXDLIN( 458)								Float dot314 = ((pcx4 * bcx4) + (pcy4 * bcy4));
HXDLIN( 458)								Float dot324 = ((pcx4 * acx4) + (pcy4 * acy4));
HXDLIN( 458)								Float ratioA4 = (((dot224 * dot314) - (dot124 * dot324)) * denom14);
HXDLIN( 458)								Float ratioB4 = (((dot114 * dot324) - (dot124 * dot314)) * denom14);
HXDLIN( 458)								Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN( 458)								bool hitQuad53;
HXDLIN( 458)								bool hitQuad54;
HXDLIN( 458)								if ((ratioA4 >= 0)) {
HXLINE( 458)									hitQuad54 = (ratioB4 >= 0);
            								}
            								else {
HXLINE( 458)									hitQuad54 = false;
            								}
HXDLIN( 458)								if (hitQuad54) {
HXLINE( 458)									hitQuad53 = (ratioC4 >= 0);
            								}
            								else {
HXLINE( 458)									hitQuad53 = false;
            								}
HXDLIN( 458)								if (hitQuad53) {
HXLINE( 458)									int i58 = ::Std_obj::_hx_int((( (Float)(aA4) ) * (soft * ratioB4)));
HXDLIN( 458)									if ((i58 > 255)) {
HXLINE(  24)										i58 = 255;
            									}
HXLINE( 458)									if ((i58 < 0)) {
HXLINE(  25)										i58 = 0;
            									}
HXLINE( 458)									int a53 = i58;
HXDLIN( 458)									int i59 = ::Std_obj::_hx_int(( (Float)(rA4) ));
HXDLIN( 458)									if ((i59 > 255)) {
HXLINE(  24)										i59 = 255;
            									}
HXLINE( 458)									if ((i59 < 0)) {
HXLINE(  25)										i59 = 0;
            									}
HXLINE( 458)									int r34 = i59;
HXDLIN( 458)									int i60 = ::Std_obj::_hx_int(( (Float)(gA4) ));
HXDLIN( 458)									if ((i60 > 255)) {
HXLINE(  24)										i60 = 255;
            									}
HXLINE( 458)									if ((i60 < 0)) {
HXLINE(  25)										i60 = 0;
            									}
HXLINE( 458)									int g34 = i60;
HXDLIN( 458)									int i61 = ::Std_obj::_hx_int(( (Float)(bA4) ));
HXDLIN( 458)									if ((i61 > 255)) {
HXLINE(  24)										i61 = 255;
            									}
HXLINE( 458)									if ((i61 < 0)) {
HXLINE(  25)										i61 = 0;
            									}
HXLINE( 458)									int b56 = i61;
HXDLIN( 458)									{
HXLINE( 458)										int location13;
HXDLIN( 458)										if (pixelImage->useVirtualPos) {
HXLINE( 458)											location13 = ::Std_obj::_hx_int(((((( (Float)(py5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px5) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 458)											location13 = ::Std_obj::_hx_int(( (Float)(((py5 * pixelImage->width) + px5)) ));
            										}
HXDLIN( 458)										bool hitQuad55;
HXDLIN( 458)										if (pixelImage->transparent) {
HXLINE( 458)											hitQuad55 = (a53 < 254);
            										}
            										else {
HXLINE( 458)											hitQuad55 = false;
            										}
HXDLIN( 458)										if (hitQuad55) {
HXLINE( 458)											int this213 = ::iterMagic::Iimg_obj::get(pixelImage->image,location13);
HXDLIN( 458)											int old4;
HXDLIN( 458)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)												old4 = ((((((this213 >> 24) & 255) << 24) | ((this213 & 255) << 16)) | (((this213 >> 8) & 255) << 8)) | ((this213 >> 16) & 255));
            											}
            											else {
HXLINE( 458)												old4 = this213;
            											}
HXDLIN( 458)											int rhs4 = ((((a53 << 24) | (r34 << 16)) | (g34 << 8)) | b56);
HXDLIN( 458)											Float a118;
HXDLIN( 458)											int this214 = ((old4 >> 24) & 255);
HXDLIN( 458)											if ((this214 == 0)) {
HXLINE( 458)												a118 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												a118 = (( (Float)(this214) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float r115;
HXDLIN( 458)											int this215 = ((old4 >> 16) & 255);
HXDLIN( 458)											if ((this215 == 0)) {
HXLINE( 458)												r115 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												r115 = (( (Float)(this215) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float g115;
HXDLIN( 458)											int this216 = ((old4 >> 8) & 255);
HXDLIN( 458)											if ((this216 == 0)) {
HXLINE( 458)												g115 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												g115 = (( (Float)(this216) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float b119;
HXDLIN( 458)											int this217 = (old4 & 255);
HXDLIN( 458)											if ((this217 == 0)) {
HXLINE( 458)												b119 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												b119 = (( (Float)(this217) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float a216;
HXDLIN( 458)											int this218 = ((rhs4 >> 24) & 255);
HXDLIN( 458)											if ((this218 == 0)) {
HXLINE( 458)												a216 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												a216 = (( (Float)(this218) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float r214;
HXDLIN( 458)											int this219 = ((rhs4 >> 16) & 255);
HXDLIN( 458)											if ((this219 == 0)) {
HXLINE( 458)												r214 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												r214 = (( (Float)(this219) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float g214;
HXDLIN( 458)											int this220 = ((rhs4 >> 8) & 255);
HXDLIN( 458)											if ((this220 == 0)) {
HXLINE( 458)												g214 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												g214 = (( (Float)(this220) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float b217;
HXDLIN( 458)											int this221 = (rhs4 & 255);
HXDLIN( 458)											if ((this221 == 0)) {
HXLINE( 458)												b217 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												b217 = (( (Float)(this221) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float a315 = (a118 * (( (Float)(1) ) - a216));
HXDLIN( 458)											int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a315) + (r214 * a216))));
HXDLIN( 458)											int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a315) + (g214 * a216))));
HXDLIN( 458)											int b57 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b119 * a315) + (b217 * a216))));
HXDLIN( 458)											int a54 = ::Std_obj::_hx_int((( (Float)(255) ) * (a315 + a216)));
HXDLIN( 458)											int blended13 = ((((a54 << 24) | (r35 << 16)) | (g35 << 8)) | b57);
HXDLIN( 458)											{
HXLINE( 458)												int hitQuad56;
HXDLIN( 458)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)													hitQuad56 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            												}
            												else {
HXLINE( 458)													hitQuad56 = blended13;
            												}
HXDLIN( 458)												::iterMagic::Iimg_obj::set(pixelImage->image,location13,hitQuad56);
            											}
            										}
            										else {
HXLINE( 458)											int value4;
HXDLIN( 458)											if (pixelImage->isLittle) {
HXLINE( 458)												value4 = ((((a53 << 24) | (b56 << 16)) | (g34 << 8)) | r34);
            											}
            											else {
HXLINE( 458)												value4 = ((((a53 << 24) | (r34 << 16)) | (g34 << 8)) | b56);
            											}
HXDLIN( 458)											::iterMagic::Iimg_obj::set(pixelImage->image,location13,value4);
            										}
            									}
HXLINE( 633)									found6 = true;
            								}
            								else {
HXLINE( 458)									if (found6) {
HXLINE( 458)										goto _hx_goto_618;
            									}
            								}
            							}
            							_hx_goto_618:;
            						}
            					}
            				}
HXDLIN( 458)				 ::pi_xy::iter::IntIterStart v_yIter34;
HXDLIN( 458)				 ::pi_xy::iter::IntIterStart v_xIter34;
HXDLIN( 458)				int v_undoY4;
HXDLIN( 458)				int v_undoX4;
HXDLIN( 458)				Float v_ty4;
HXDLIN( 458)				Float v_tx4;
HXDLIN( 458)				Float v_t04;
HXDLIN( 458)				Float v_sy4;
HXDLIN( 458)				Float v_sx4;
HXDLIN( 458)				Float v_s04;
HXDLIN( 458)				Float v_A4;
HXDLIN( 458)				Float ax6 = ex1;
HXDLIN( 458)				Float ay6 = ey1;
HXDLIN( 458)				 ::pi_xy::ImageStruct v_undoImage4 = null();
HXDLIN( 458)				Float bx8 = cx5;
HXDLIN( 458)				Float by8 = cy5;
HXDLIN( 458)				Float cx8 = dx5;
HXDLIN( 458)				Float cy8 = dy5;
HXDLIN( 458)				bool adjustWinding6 = (((((ax6 * by8) - (bx8 * ay6)) + ((bx8 * cy8) - (cx8 * by8))) + ((cx8 * ay6) - (ax6 * cy8))) > 0);
HXDLIN( 458)				if (!(adjustWinding6)) {
HXLINE( 458)					Float bx_6 = bx8;
HXDLIN( 458)					Float by_6 = by8;
HXLINE(  24)					bx8 = cx8;
HXLINE(  25)					by8 = cy8;
HXLINE(  26)					cx8 = bx_6;
HXLINE(  27)					cy8 = by_6;
            				}
HXLINE( 458)				Float v_ax4 = ax6;
HXDLIN( 458)				Float v_ay4 = ay6;
HXDLIN( 458)				Float v_bx4 = bx8;
HXDLIN( 458)				Float v_by4 = by8;
HXDLIN( 458)				Float v_cx4 = cx8;
HXDLIN( 458)				Float v_cy4 = cy8;
HXDLIN( 458)				bool v_preCalculated4 = true;
HXDLIN( 458)				{
HXLINE( 458)					v_s04 = ((v_ay4 * v_cx4) - (v_ax4 * v_cy4));
HXDLIN( 458)					v_sx4 = (v_cy4 - v_ay4);
HXDLIN( 458)					v_sy4 = (v_ax4 - v_cx4);
HXDLIN( 458)					v_t04 = ((v_ax4 * v_by4) - (v_ay4 * v_bx4));
HXDLIN( 458)					v_tx4 = (v_ay4 - v_by4);
HXDLIN( 458)					v_ty4 = (v_bx4 - v_ax4);
HXDLIN( 458)					v_A4 = ((((-(v_by4) * v_cx4) + (v_ay4 * (-(v_bx4) + v_cx4))) + (v_ax4 * (v_by4 - v_cy4))) + (v_bx4 * v_cy4));
HXDLIN( 458)					Float a55 = v_ax4;
HXDLIN( 458)					Float b58 = v_bx4;
HXDLIN( 458)					Float c31 = v_cx4;
HXDLIN( 458)					if ((a55 > b58)) {
HXLINE( 458)						if ((a55 > c31)) {
HXLINE( 458)							int min44;
HXDLIN( 458)							if ((b58 > c31)) {
HXLINE( 458)								min44 = ::Math_obj::floor(c31);
            							}
            							else {
HXLINE( 458)								min44 = ::Math_obj::floor(b58);
            							}
HXDLIN( 458)							int ii_min88 = min44;
HXDLIN( 458)							int ii_max88 = ::Math_obj::ceil(a55);
HXDLIN( 458)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min88,ii_max88);
            						}
            						else {
HXLINE( 458)							int ii_min89 = ::Math_obj::floor(b58);
HXDLIN( 458)							int ii_max89 = ::Math_obj::ceil(c31);
HXDLIN( 458)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min89,ii_max89);
            						}
            					}
            					else {
HXLINE( 458)						if ((b58 > c31)) {
HXLINE( 458)							int min45;
HXDLIN( 458)							if ((a55 > c31)) {
HXLINE( 458)								min45 = ::Math_obj::floor(c31);
            							}
            							else {
HXLINE( 458)								min45 = ::Math_obj::ceil(a55);
            							}
HXDLIN( 458)							int ii_min90 = min45;
HXDLIN( 458)							int ii_max90 = ::Math_obj::ceil(b58);
HXDLIN( 458)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min90,ii_max90);
            						}
            						else {
HXLINE( 458)							int ii_min91 = ::Math_obj::floor(a55);
HXDLIN( 458)							int ii_max91 = ::Math_obj::ceil(c31);
HXDLIN( 458)							v_xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min91,ii_max91);
            						}
            					}
HXDLIN( 458)					Float a56 = v_ay4;
HXDLIN( 458)					Float b59 = v_by4;
HXDLIN( 458)					Float c32 = v_cy4;
HXDLIN( 458)					if ((a56 > b59)) {
HXLINE( 458)						if ((a56 > c32)) {
HXLINE( 458)							int min46;
HXDLIN( 458)							if ((b59 > c32)) {
HXLINE( 458)								min46 = ::Math_obj::floor(c32);
            							}
            							else {
HXLINE( 458)								min46 = ::Math_obj::floor(b59);
            							}
HXDLIN( 458)							int ii_min92 = min46;
HXDLIN( 458)							int ii_max92 = ::Math_obj::ceil(a56);
HXDLIN( 458)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min92,ii_max92);
            						}
            						else {
HXLINE( 458)							int ii_min93 = ::Math_obj::floor(b59);
HXDLIN( 458)							int ii_max93 = ::Math_obj::ceil(c32);
HXDLIN( 458)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min93,ii_max93);
            						}
            					}
            					else {
HXLINE( 458)						if ((b59 > c32)) {
HXLINE( 458)							int min47;
HXDLIN( 458)							if ((a56 > c32)) {
HXLINE( 458)								min47 = ::Math_obj::floor(c32);
            							}
            							else {
HXLINE( 458)								min47 = ::Math_obj::ceil(a56);
            							}
HXDLIN( 458)							int ii_min94 = min47;
HXDLIN( 458)							int ii_max94 = ::Math_obj::ceil(b59);
HXDLIN( 458)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min94,ii_max94);
            						}
            						else {
HXLINE( 458)							int ii_min95 = ::Math_obj::floor(a56);
HXDLIN( 458)							int ii_max95 = ::Math_obj::ceil(c32);
HXDLIN( 458)							v_yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min95,ii_max95);
            						}
            					}
            				}
HXDLIN( 458)				if (hasUndo6) {
HXLINE( 458)					v_undoImage4 = undoImage18;
HXDLIN( 458)					v_undoX4 = xIter36->start;
HXDLIN( 458)					v_undoY4 = yIter36->start;
            				}
HXDLIN( 458)				bool hasUndo7 = false;
HXDLIN( 458)				int aA5 = ((color >> 24) & 255);
HXDLIN( 458)				int rA5 = ((color >> 16) & 255);
HXDLIN( 458)				int gA5 = ((color >> 8) & 255);
HXDLIN( 458)				int bA5 = (color & 255);
HXDLIN( 458)				Float bcx5 = (dx5 - ax4);
HXDLIN( 458)				Float bcy5 = (dy5 - ay4);
HXDLIN( 458)				Float acx5 = (ex1 - ax4);
HXDLIN( 458)				Float acy5 = (ey1 - ay4);
HXDLIN( 458)				Float dot115 = ((bcx5 * bcx5) + (bcy5 * bcy5));
HXDLIN( 458)				Float dot125 = ((bcx5 * acx5) + (bcy5 * acy5));
HXDLIN( 458)				Float dot225 = ((acx5 * acx5) + (acy5 * acy5));
HXDLIN( 458)				Float denom15 = (( (Float)(1) ) / ((dot115 * dot225) - (dot125 * dot125)));
HXDLIN( 458)				 ::pi_xy::iter::IntIterStart xIter37;
HXDLIN( 458)				if ((ex1 > dx5)) {
HXLINE( 458)					if ((ex1 > ax4)) {
HXLINE( 458)						int min48;
HXDLIN( 458)						if ((dx5 > ax4)) {
HXLINE( 458)							min48 = ::Math_obj::floor(ax4);
            						}
            						else {
HXLINE( 458)							min48 = ::Math_obj::floor(dx5);
            						}
HXDLIN( 458)						int ii_min96 = min48;
HXDLIN( 458)						int ii_max96 = ::Math_obj::ceil(ex1);
HXDLIN( 458)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min96,ii_max96);
            					}
            					else {
HXLINE( 458)						int ii_min97 = ::Math_obj::floor(dx5);
HXDLIN( 458)						int ii_max97 = ::Math_obj::ceil(ax4);
HXDLIN( 458)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min97,ii_max97);
            					}
            				}
            				else {
HXLINE( 458)					if ((dx5 > ax4)) {
HXLINE( 458)						int min49;
HXDLIN( 458)						if ((ex1 > ax4)) {
HXLINE( 458)							min49 = ::Math_obj::floor(ax4);
            						}
            						else {
HXLINE( 458)							min49 = ::Math_obj::ceil(ex1);
            						}
HXDLIN( 458)						int ii_min98 = min49;
HXDLIN( 458)						int ii_max98 = ::Math_obj::ceil(dx5);
HXDLIN( 458)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min98,ii_max98);
            					}
            					else {
HXLINE( 458)						int ii_min99 = ::Math_obj::floor(ex1);
HXDLIN( 458)						int ii_max99 = ::Math_obj::ceil(ax4);
HXDLIN( 458)						xIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min99,ii_max99);
            					}
            				}
HXDLIN( 458)				 ::pi_xy::iter::IntIterStart yIter37;
HXDLIN( 458)				if ((ey1 > dy5)) {
HXLINE( 458)					if ((ey1 > ay4)) {
HXLINE( 458)						int min50;
HXDLIN( 458)						if ((dy5 > ay4)) {
HXLINE( 458)							min50 = ::Math_obj::floor(ay4);
            						}
            						else {
HXLINE( 458)							min50 = ::Math_obj::floor(dy5);
            						}
HXDLIN( 458)						int ii_min100 = min50;
HXDLIN( 458)						int ii_max100 = ::Math_obj::ceil(ey1);
HXDLIN( 458)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min100,ii_max100);
            					}
            					else {
HXLINE( 458)						int ii_min101 = ::Math_obj::floor(dy5);
HXDLIN( 458)						int ii_max101 = ::Math_obj::ceil(ay4);
HXDLIN( 458)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min101,ii_max101);
            					}
            				}
            				else {
HXLINE( 458)					if ((dy5 > ay4)) {
HXLINE( 458)						int min51;
HXDLIN( 458)						if ((ey1 > ay4)) {
HXLINE( 458)							min51 = ::Math_obj::floor(ay4);
            						}
            						else {
HXLINE( 458)							min51 = ::Math_obj::ceil(ey1);
            						}
HXDLIN( 458)						int ii_min102 = min51;
HXDLIN( 458)						int ii_max102 = ::Math_obj::ceil(dy5);
HXDLIN( 458)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min102,ii_max102);
            					}
            					else {
HXLINE( 458)						int ii_min103 = ::Math_obj::floor(ey1);
HXDLIN( 458)						int ii_max103 = ::Math_obj::ceil(ay4);
HXDLIN( 458)						yIter37 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min103,ii_max103);
            					}
            				}
HXDLIN( 458)				 ::pi_xy::ImageStruct undoImage21 = null();
HXDLIN( 458)				if (hasUndo7) {
HXLINE( 458)					int width7 = ((xIter37->max - xIter37->start) + 1);
HXDLIN( 458)					int height7 = ((yIter37->max - yIter37->start) + 1);
HXDLIN( 458)					 ::Dynamic imageType7 = null();
HXDLIN( 458)					 ::pi_xy::ImageStruct this222 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 458)					if (::hx::IsNull( imageType7 )) {
HXLINE(  54)						imageType7 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 458)					::Dynamic undoImage22;
HXDLIN( 458)					switch((int)(( (int)(imageType7) ))){
            						case (int)0: {
HXLINE( 458)							 ::iterMagic::BytesImg byt7 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::BytesImg b60 = byt7;
HXDLIN( 458)							{
HXLINE( 458)								b60->width = width7;
HXDLIN( 458)								b60->height = height7;
HXDLIN( 458)								b60->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 458)								b60->data = ::haxe::io::Bytes_obj::alloc((b60->length * 4));
HXDLIN( 458)								{
HXLINE( 458)									int len14 = b60->length;
HXDLIN( 458)									int w7 = 0;
HXDLIN( 458)									{
HXLINE( 458)										int _g140 = 0;
HXDLIN( 458)										int _g141 = b60->height;
HXDLIN( 458)										while((_g140 < _g141)){
HXLINE( 458)											_g140 = (_g140 + 1);
HXDLIN( 458)											int y23 = (_g140 - 1);
HXDLIN( 458)											{
HXLINE( 458)												int _g142 = 0;
HXDLIN( 458)												int _g143 = b60->width;
HXDLIN( 458)												while((_g142 < _g143)){
HXLINE( 458)													_g142 = (_g142 + 1);
HXDLIN( 458)													int x23 = (_g142 - 1);
HXDLIN( 458)													{
HXLINE( 458)														w7 = (w7 + 1);
HXDLIN( 458)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 458)													{
HXLINE( 458)														w7 = (w7 + 1);
HXDLIN( 458)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 458)													{
HXLINE( 458)														w7 = (w7 + 1);
HXDLIN( 458)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 458)													{
HXLINE( 458)														w7 = (w7 + 1);
HXDLIN( 458)														b60->data->b[(w7 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 458)							undoImage22 = b60;
            						}
            						break;
            						case (int)1: {
HXLINE( 458)							 ::iterMagic::ArrIntImg arrI7 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::ArrIntImg a57 = arrI7;
HXDLIN( 458)							{
HXLINE( 458)								a57->width = width7;
HXDLIN( 458)								a57->height = height7;
HXDLIN( 458)								a57->data = ::Array_obj< int >::__new(0);
HXDLIN( 458)								a57->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 458)								{
HXLINE( 458)									int _g144 = 0;
HXDLIN( 458)									int _g145 = a57->length;
HXDLIN( 458)									while((_g144 < _g145)){
HXLINE( 458)										_g144 = (_g144 + 1);
HXDLIN( 458)										int i62 = (_g144 - 1);
HXDLIN( 458)										a57->data[i62] = 0;
            									}
            								}
            							}
HXDLIN( 458)							undoImage22 = a57;
            						}
            						break;
            						case (int)2: {
HXLINE( 458)							 ::iterMagic::U32ArrImg u32a7 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::U32ArrImg b61 = u32a7;
HXDLIN( 458)							{
HXLINE( 458)								b61->width = width7;
HXDLIN( 458)								b61->height = height7;
HXDLIN( 458)								b61->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 458)								int size7 = (b61->length * 4);
HXDLIN( 458)								b61->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size7),0,size7);
HXDLIN( 458)								{
HXLINE( 458)									int _g146 = 0;
HXDLIN( 458)									int _g147 = b61->length;
HXDLIN( 458)									while((_g146 < _g147)){
HXLINE( 458)										_g146 = (_g146 + 1);
HXDLIN( 458)										int i63 = (_g146 - 1);
HXDLIN( 458)										{
HXLINE( 458)											 ::haxe::io::ArrayBufferViewImpl this223 = b61->data;
HXDLIN( 458)											bool undoImage23;
HXDLIN( 458)											if ((i63 >= 0)) {
HXLINE( 458)												undoImage23 = (i63 < (this223->byteLength >> 2));
            											}
            											else {
HXLINE( 458)												undoImage23 = false;
            											}
HXDLIN( 458)											if (undoImage23) {
HXLINE( 458)												 ::haxe::io::Bytes _this7 = this223->bytes;
HXDLIN( 458)												int pos7 = ((i63 << 2) + this223->byteOffset);
HXDLIN( 458)												_this7->b[pos7] = ( (unsigned char)(0) );
HXDLIN( 458)												_this7->b[(pos7 + 1)] = ( (unsigned char)(0) );
HXDLIN( 458)												_this7->b[(pos7 + 2)] = ( (unsigned char)(0) );
HXDLIN( 458)												_this7->b[(pos7 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 458)							undoImage22 = b61;
            						}
            						break;
            						case (int)3: {
HXLINE( 458)							 ::iterMagic::VecIntImg vec7 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::VecIntImg v15 = vec7;
HXDLIN( 458)							{
HXLINE( 458)								v15->width = width7;
HXDLIN( 458)								v15->height = height7;
HXDLIN( 458)								v15->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 458)								v15->data = ::Array_obj< int >::__new(v15->length);
HXDLIN( 458)								{
HXLINE( 458)									int _g148 = 0;
HXDLIN( 458)									int _g149 = v15->length;
HXDLIN( 458)									while((_g148 < _g149)){
HXLINE( 458)										_g148 = (_g148 + 1);
HXDLIN( 458)										int i64 = (_g148 - 1);
HXDLIN( 458)										v15->data->__unsafe_set(i64,0);
            									}
            								}
            							}
HXDLIN( 458)							undoImage22 = v15;
            						}
            						break;
            						case (int)4: {
HXLINE( 458)							 ::iterMagic::StackIntImg sInt7 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 458)							 ::iterMagic::StackIntImg b62 = sInt7;
HXDLIN( 458)							{
HXLINE( 458)								b62->width = width7;
HXDLIN( 458)								b62->height = height7;
HXDLIN( 458)								b62->length = ::Std_obj::_hx_int(( (Float)((width7 * height7)) ));
HXDLIN( 458)								b62->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 458)								{
HXLINE( 458)									int len15 = b62->length;
HXDLIN( 458)									 ::haxe::ds::GenericStack_Int d7 = b62->data;
HXDLIN( 458)									if (::hx::IsNull( d7->head )) {
HXLINE( 458)										int _g150 = 0;
HXDLIN( 458)										int _g151 = len15;
HXDLIN( 458)										while((_g150 < _g151)){
HXLINE( 458)											_g150 = (_g150 + 1);
HXDLIN( 458)											int i65 = (_g150 - 1);
HXDLIN( 458)											d7->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d7->head);
            										}
            									}
            									else {
HXLINE( 458)										int _g152 = 0;
HXDLIN( 458)										int _g153 = len15;
HXDLIN( 458)										while((_g152 < _g153)){
HXLINE( 458)											_g152 = (_g152 + 1);
HXDLIN( 458)											int i66 = (_g152 - 1);
HXDLIN( 458)											{
HXLINE( 458)												 ::haxe::ds::GenericCell_Int l7 = b62->data->head;
HXDLIN( 458)												 ::haxe::ds::GenericCell_Int prev7 = null();
HXDLIN( 458)												{
HXLINE( 458)													int _g154 = 0;
HXDLIN( 458)													int _g155 = i66;
HXDLIN( 458)													while((_g154 < _g155)){
HXLINE( 458)														_g154 = (_g154 + 1);
HXDLIN( 458)														int i67 = (_g154 - 1);
HXLINE( 345)														prev7 = l7;
HXLINE( 346)														l7 = l7->next;
            													}
            												}
HXLINE( 458)												if (::hx::IsNull( prev7 )) {
HXLINE( 458)													b62->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN( 458)													l7 = null();
            												}
            												else {
HXLINE( 458)													prev7->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l7->next);
HXDLIN( 458)													l7 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 458)							undoImage22 = b62;
            						}
            						break;
            					}
HXDLIN( 458)					this222->image = undoImage22;
HXDLIN( 458)					this222->width = width7;
HXDLIN( 458)					this222->height = height7;
HXDLIN( 458)					this222->imageType = ( (int)(imageType7) );
HXDLIN( 458)					undoImage21 = this222;
HXDLIN( 458)					{
HXLINE( 458)						int rectLeft7 = xIter37->start;
HXDLIN( 458)						int rectTop7 = yIter37->start;
HXDLIN( 458)						int rectRight7 = xIter37->max;
HXDLIN( 458)						bool forceClear7 = false;
HXDLIN( 458)						{
HXLINE( 458)							int _g156 = rectTop7;
HXDLIN( 458)							int _g157 = yIter37->max;
HXDLIN( 458)							while((_g156 < _g157)){
HXLINE( 458)								_g156 = (_g156 + 1);
HXDLIN( 458)								int dy9 = (_g156 - 1);
HXDLIN( 458)								{
HXLINE( 458)									int _g158 = rectLeft7;
HXDLIN( 458)									int _g159 = rectRight7;
HXDLIN( 458)									while((_g158 < _g159)){
HXLINE( 458)										_g158 = (_g158 + 1);
HXDLIN( 458)										int dx9 = (_g158 - 1);
HXDLIN( 458)										::Dynamic this224 = pixelImage->image;
HXDLIN( 458)										int index30;
HXDLIN( 458)										if (pixelImage->useVirtualPos) {
HXLINE( 458)											index30 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx9) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 458)											index30 = ::Std_obj::_hx_int(( (Float)(((dy9 * pixelImage->width) + dx9)) ));
            										}
HXDLIN( 458)										int c33 = ::iterMagic::Iimg_obj::get(this224,index30);
HXDLIN( 458)										int col7;
HXDLIN( 458)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)											col7 = ((((((c33 >> 24) & 255) << 24) | ((c33 & 255) << 16)) | (((c33 >> 8) & 255) << 8)) | ((c33 >> 16) & 255));
            										}
            										else {
HXLINE( 458)											col7 = c33;
            										}
HXDLIN( 458)										bool hitQuad57;
HXDLIN( 458)										if (pixelImage->useMask) {
HXLINE( 458)											hitQuad57 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 458)											hitQuad57 = false;
            										}
HXDLIN( 458)										if (hitQuad57) {
HXLINE( 458)											 ::pi_xy::ImageStruct this225 = pixelImage->mask;
HXDLIN( 458)											::Dynamic this226 = this225->image;
HXDLIN( 458)											int index31;
HXDLIN( 458)											if (this225->useVirtualPos) {
HXLINE( 458)												index31 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this225->virtualY) * ( (Float)(this225->width) )) + dx9) - this225->virtualX));
            											}
            											else {
HXLINE( 458)												index31 = ::Std_obj::_hx_int(( (Float)(((dy9 * this225->width) + dx9)) ));
            											}
HXDLIN( 458)											int c34 = ::iterMagic::Iimg_obj::get(this226,index31);
HXDLIN( 458)											int v16;
HXDLIN( 458)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)												v16 = ((((((c34 >> 24) & 255) << 24) | ((c34 & 255) << 16)) | (((c34 >> 8) & 255) << 8)) | ((c34 >> 16) & 255));
            											}
            											else {
HXLINE( 458)												v16 = c34;
            											}
HXDLIN( 458)											int maskPixel7 = v16;
HXDLIN( 458)											int this227 = col7;
HXDLIN( 458)											if ((maskPixel7 == 0)) {
HXLINE( 458)												col7 = this227;
            											}
            											else {
HXLINE( 458)												Float m07;
HXDLIN( 458)												int this228 = ((maskPixel7 >> 24) & 255);
HXDLIN( 458)												if ((this228 == 0)) {
HXLINE( 458)													m07 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													m07 = (( (Float)(this228) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float m17;
HXDLIN( 458)												int this229 = ((maskPixel7 >> 16) & 255);
HXDLIN( 458)												if ((this229 == 0)) {
HXLINE( 458)													m17 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													m17 = (( (Float)(this229) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float m27;
HXDLIN( 458)												int this230 = ((maskPixel7 >> 8) & 255);
HXDLIN( 458)												if ((this230 == 0)) {
HXLINE( 458)													m27 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													m27 = (( (Float)(this230) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float m37;
HXDLIN( 458)												int this231 = (maskPixel7 & 255);
HXDLIN( 458)												if ((this231 == 0)) {
HXLINE( 458)													m37 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													m37 = (( (Float)(this231) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												int ch07 = ::Std_obj::_hx_int(((((Float)1.) - m07) * ( (Float)(((this227 >> 24) & 255)) )));
HXDLIN( 458)												int ch17 = ::Std_obj::_hx_int(((((Float)1.) - m17) * ( (Float)(((this227 >> 16) & 255)) )));
HXDLIN( 458)												int ch27 = ::Std_obj::_hx_int(((((Float)1.) - m27) * ( (Float)(((this227 >> 8) & 255)) )));
HXDLIN( 458)												int ch37 = ::Std_obj::_hx_int(((((Float)1.) - m37) * ( (Float)((this227 & 255)) )));
HXDLIN( 458)												col7 = ((((::Math_obj::round((( (Float)(ch07) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch17) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch27) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch37) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 458)										if ((col7 != 0)) {
HXLINE( 458)											int x24 = (dx9 - rectLeft7);
HXDLIN( 458)											int y24 = (dy9 - rectTop7);
HXDLIN( 458)											int c35 = col7;
HXDLIN( 458)											bool hitQuad58;
HXDLIN( 458)											if ((((c35 >> 24) & 255) < 254)) {
HXLINE( 458)												hitQuad58 = undoImage21->transparent;
            											}
            											else {
HXLINE( 458)												hitQuad58 = false;
            											}
HXDLIN( 458)											if (hitQuad58) {
HXLINE( 458)												int location14;
HXDLIN( 458)												if (undoImage21->useVirtualPos) {
HXLINE( 458)													location14 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x24) - undoImage21->virtualX));
            												}
            												else {
HXLINE( 458)													location14 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage21->width) + x24)) ));
            												}
HXDLIN( 458)												int this232 = ::iterMagic::Iimg_obj::get(undoImage21->image,location14);
HXDLIN( 458)												int this233;
HXDLIN( 458)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)													this233 = ((((((this232 >> 24) & 255) << 24) | ((this232 & 255) << 16)) | (((this232 >> 8) & 255) << 8)) | ((this232 >> 16) & 255));
            												}
            												else {
HXLINE( 458)													this233 = this232;
            												}
HXDLIN( 458)												Float a119;
HXDLIN( 458)												int this234 = ((this233 >> 24) & 255);
HXDLIN( 458)												if ((this234 == 0)) {
HXLINE( 458)													a119 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													a119 = (( (Float)(this234) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float r116;
HXDLIN( 458)												int this235 = ((this233 >> 16) & 255);
HXDLIN( 458)												if ((this235 == 0)) {
HXLINE( 458)													r116 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													r116 = (( (Float)(this235) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float g116;
HXDLIN( 458)												int this236 = ((this233 >> 8) & 255);
HXDLIN( 458)												if ((this236 == 0)) {
HXLINE( 458)													g116 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													g116 = (( (Float)(this236) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float b120;
HXDLIN( 458)												int this237 = (this233 & 255);
HXDLIN( 458)												if ((this237 == 0)) {
HXLINE( 458)													b120 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													b120 = (( (Float)(this237) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float a217;
HXDLIN( 458)												int this238 = ((col7 >> 24) & 255);
HXDLIN( 458)												if ((this238 == 0)) {
HXLINE( 458)													a217 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													a217 = (( (Float)(this238) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float r215;
HXDLIN( 458)												int this239 = ((col7 >> 16) & 255);
HXDLIN( 458)												if ((this239 == 0)) {
HXLINE( 458)													r215 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													r215 = (( (Float)(this239) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float g215;
HXDLIN( 458)												int this240 = ((col7 >> 8) & 255);
HXDLIN( 458)												if ((this240 == 0)) {
HXLINE( 458)													g215 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													g215 = (( (Float)(this240) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float b218;
HXDLIN( 458)												int this241 = (col7 & 255);
HXDLIN( 458)												if ((this241 == 0)) {
HXLINE( 458)													b218 = ((Float)0.);
            												}
            												else {
HXLINE( 458)													b218 = (( (Float)(this241) ) / ( (Float)(255) ));
            												}
HXDLIN( 458)												Float a316 = (a119 * (( (Float)(1) ) - a217));
HXDLIN( 458)												int r36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r116 * a316) + (r215 * a217))));
HXDLIN( 458)												int g36 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g116 * a316) + (g215 * a217))));
HXDLIN( 458)												int b63 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b120 * a316) + (b218 * a217))));
HXDLIN( 458)												int a58 = ::Std_obj::_hx_int((( (Float)(255) ) * (a316 + a217)));
HXDLIN( 458)												int blended14 = ((((a58 << 24) | (r36 << 16)) | (g36 << 8)) | b63);
HXDLIN( 458)												{
HXLINE( 458)													int hitQuad59;
HXDLIN( 458)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)														hitQuad59 = ((((((blended14 >> 24) & 255) << 24) | ((blended14 & 255) << 16)) | (((blended14 >> 8) & 255) << 8)) | ((blended14 >> 16) & 255));
            													}
            													else {
HXLINE( 458)														hitQuad59 = blended14;
            													}
HXDLIN( 458)													::iterMagic::Iimg_obj::set(undoImage21->image,location14,hitQuad59);
            												}
            											}
            											else {
HXLINE( 458)												::Dynamic this242 = undoImage21->image;
HXDLIN( 458)												int index32;
HXDLIN( 458)												if (undoImage21->useVirtualPos) {
HXLINE( 458)													index32 = ::Std_obj::_hx_int(((((( (Float)(y24) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x24) - undoImage21->virtualX));
            												}
            												else {
HXLINE( 458)													index32 = ::Std_obj::_hx_int(( (Float)(((y24 * undoImage21->width) + x24)) ));
            												}
HXDLIN( 458)												int hitQuad60;
HXDLIN( 458)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)													hitQuad60 = ((((((c35 >> 24) & 255) << 24) | ((c35 & 255) << 16)) | (((c35 >> 8) & 255) << 8)) | ((c35 >> 16) & 255));
            												}
            												else {
HXLINE( 458)													hitQuad60 = c35;
            												}
HXDLIN( 458)												::iterMagic::Iimg_obj::set(this242,index32,hitQuad60);
            											}
            										}
            										else {
HXLINE( 458)											if (forceClear7) {
HXLINE( 458)												::Dynamic this243 = undoImage21->image;
HXDLIN( 458)												int x25 = (dx9 - rectLeft7);
HXDLIN( 458)												int y25 = (dy9 - rectTop7);
HXDLIN( 458)												int index33;
HXDLIN( 458)												if (undoImage21->useVirtualPos) {
HXLINE( 458)													index33 = ::Std_obj::_hx_int(((((( (Float)(y25) ) - undoImage21->virtualY) * ( (Float)(undoImage21->width) )) + x25) - undoImage21->virtualX));
            												}
            												else {
HXLINE( 458)													index33 = ::Std_obj::_hx_int(( (Float)(((y25 * undoImage21->width) + x25)) ));
            												}
HXDLIN( 458)												::iterMagic::Iimg_obj::set(this243,index33,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 458)				bool found7 = false;
HXDLIN( 458)				{
HXLINE( 458)					int _g_min14 = xIter37->start;
HXDLIN( 458)					int _g_max14 = xIter37->max;
HXDLIN( 458)					while((_g_min14 < _g_max14)){
HXLINE( 458)						_g_min14 = (_g_min14 + 1);
HXDLIN( 458)						int px6 = (_g_min14 - 1);
HXDLIN( 458)						Float pcx5 = (( (Float)(px6) ) - ax4);
HXLINE( 619)						found7 = false;
HXLINE( 458)						{
HXLINE( 458)							int _g_min15 = yIter37->start;
HXDLIN( 458)							int _g_max15 = yIter37->max;
HXDLIN( 458)							while((_g_min15 < _g_max15)){
HXLINE( 458)								_g_min15 = (_g_min15 + 1);
HXDLIN( 458)								int py6 = (_g_min15 - 1);
HXDLIN( 458)								Float pcy5 = (( (Float)(py6) ) - ay4);
HXDLIN( 458)								Float dot315 = ((pcx5 * bcx5) + (pcy5 * bcy5));
HXDLIN( 458)								Float dot325 = ((pcx5 * acx5) + (pcy5 * acy5));
HXDLIN( 458)								Float ratioA5 = (((dot225 * dot315) - (dot125 * dot325)) * denom15);
HXDLIN( 458)								Float ratioB5 = (((dot115 * dot325) - (dot125 * dot315)) * denom15);
HXDLIN( 458)								Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN( 458)								bool hitQuad61;
HXDLIN( 458)								bool hitQuad62;
HXDLIN( 458)								if ((ratioA5 >= 0)) {
HXLINE( 458)									hitQuad62 = (ratioB5 >= 0);
            								}
            								else {
HXLINE( 458)									hitQuad62 = false;
            								}
HXDLIN( 458)								if (hitQuad62) {
HXLINE( 458)									hitQuad61 = (ratioC5 >= 0);
            								}
            								else {
HXLINE( 458)									hitQuad61 = false;
            								}
HXDLIN( 458)								if (hitQuad61) {
HXLINE( 458)									int i68 = ::Std_obj::_hx_int((( (Float)(aA5) ) * (soft * ratioB5)));
HXDLIN( 458)									if ((i68 > 255)) {
HXLINE(  24)										i68 = 255;
            									}
HXLINE( 458)									if ((i68 < 0)) {
HXLINE(  25)										i68 = 0;
            									}
HXLINE( 458)									int a59 = i68;
HXDLIN( 458)									int i69 = ::Std_obj::_hx_int(( (Float)(rA5) ));
HXDLIN( 458)									if ((i69 > 255)) {
HXLINE(  24)										i69 = 255;
            									}
HXLINE( 458)									if ((i69 < 0)) {
HXLINE(  25)										i69 = 0;
            									}
HXLINE( 458)									int r37 = i69;
HXDLIN( 458)									int i70 = ::Std_obj::_hx_int(( (Float)(gA5) ));
HXDLIN( 458)									if ((i70 > 255)) {
HXLINE(  24)										i70 = 255;
            									}
HXLINE( 458)									if ((i70 < 0)) {
HXLINE(  25)										i70 = 0;
            									}
HXLINE( 458)									int g37 = i70;
HXDLIN( 458)									int i71 = ::Std_obj::_hx_int(( (Float)(bA5) ));
HXDLIN( 458)									if ((i71 > 255)) {
HXLINE(  24)										i71 = 255;
            									}
HXLINE( 458)									if ((i71 < 0)) {
HXLINE(  25)										i71 = 0;
            									}
HXLINE( 458)									int b64 = i71;
HXDLIN( 458)									{
HXLINE( 458)										int location15;
HXDLIN( 458)										if (pixelImage->useVirtualPos) {
HXLINE( 458)											location15 = ::Std_obj::_hx_int(((((( (Float)(py6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px6) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 458)											location15 = ::Std_obj::_hx_int(( (Float)(((py6 * pixelImage->width) + px6)) ));
            										}
HXDLIN( 458)										bool hitQuad63;
HXDLIN( 458)										if (pixelImage->transparent) {
HXLINE( 458)											hitQuad63 = (a59 < 254);
            										}
            										else {
HXLINE( 458)											hitQuad63 = false;
            										}
HXDLIN( 458)										if (hitQuad63) {
HXLINE( 458)											int this244 = ::iterMagic::Iimg_obj::get(pixelImage->image,location15);
HXDLIN( 458)											int old5;
HXDLIN( 458)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)												old5 = ((((((this244 >> 24) & 255) << 24) | ((this244 & 255) << 16)) | (((this244 >> 8) & 255) << 8)) | ((this244 >> 16) & 255));
            											}
            											else {
HXLINE( 458)												old5 = this244;
            											}
HXDLIN( 458)											int rhs5 = ((((a59 << 24) | (r37 << 16)) | (g37 << 8)) | b64);
HXDLIN( 458)											Float a120;
HXDLIN( 458)											int this245 = ((old5 >> 24) & 255);
HXDLIN( 458)											if ((this245 == 0)) {
HXLINE( 458)												a120 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												a120 = (( (Float)(this245) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float r117;
HXDLIN( 458)											int this246 = ((old5 >> 16) & 255);
HXDLIN( 458)											if ((this246 == 0)) {
HXLINE( 458)												r117 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												r117 = (( (Float)(this246) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float g117;
HXDLIN( 458)											int this247 = ((old5 >> 8) & 255);
HXDLIN( 458)											if ((this247 == 0)) {
HXLINE( 458)												g117 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												g117 = (( (Float)(this247) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float b121;
HXDLIN( 458)											int this248 = (old5 & 255);
HXDLIN( 458)											if ((this248 == 0)) {
HXLINE( 458)												b121 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												b121 = (( (Float)(this248) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float a218;
HXDLIN( 458)											int this249 = ((rhs5 >> 24) & 255);
HXDLIN( 458)											if ((this249 == 0)) {
HXLINE( 458)												a218 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												a218 = (( (Float)(this249) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float r216;
HXDLIN( 458)											int this250 = ((rhs5 >> 16) & 255);
HXDLIN( 458)											if ((this250 == 0)) {
HXLINE( 458)												r216 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												r216 = (( (Float)(this250) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float g216;
HXDLIN( 458)											int this251 = ((rhs5 >> 8) & 255);
HXDLIN( 458)											if ((this251 == 0)) {
HXLINE( 458)												g216 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												g216 = (( (Float)(this251) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float b219;
HXDLIN( 458)											int this252 = (rhs5 & 255);
HXDLIN( 458)											if ((this252 == 0)) {
HXLINE( 458)												b219 = ((Float)0.);
            											}
            											else {
HXLINE( 458)												b219 = (( (Float)(this252) ) / ( (Float)(255) ));
            											}
HXDLIN( 458)											Float a317 = (a120 * (( (Float)(1) ) - a218));
HXDLIN( 458)											int r38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r117 * a317) + (r216 * a218))));
HXDLIN( 458)											int g38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g117 * a317) + (g216 * a218))));
HXDLIN( 458)											int b65 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b121 * a317) + (b219 * a218))));
HXDLIN( 458)											int a60 = ::Std_obj::_hx_int((( (Float)(255) ) * (a317 + a218)));
HXDLIN( 458)											int blended15 = ((((a60 << 24) | (r38 << 16)) | (g38 << 8)) | b65);
HXDLIN( 458)											{
HXLINE( 458)												int hitQuad64;
HXDLIN( 458)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 458)													hitQuad64 = ((((((blended15 >> 24) & 255) << 24) | ((blended15 & 255) << 16)) | (((blended15 >> 8) & 255) << 8)) | ((blended15 >> 16) & 255));
            												}
            												else {
HXLINE( 458)													hitQuad64 = blended15;
            												}
HXDLIN( 458)												::iterMagic::Iimg_obj::set(pixelImage->image,location15,hitQuad64);
            											}
            										}
            										else {
HXLINE( 458)											int value5;
HXDLIN( 458)											if (pixelImage->isLittle) {
HXLINE( 458)												value5 = ((((a59 << 24) | (b64 << 16)) | (g37 << 8)) | r37);
            											}
            											else {
HXLINE( 458)												value5 = ((((a59 << 24) | (r37 << 16)) | (g37 << 8)) | b64);
            											}
HXDLIN( 458)											::iterMagic::Iimg_obj::set(pixelImage->image,location15,value5);
            										}
            									}
HXLINE( 633)									found7 = true;
            								}
            								else {
HXLINE( 458)									if (found7) {
HXLINE( 458)										goto _hx_goto_630;
            									}
            								}
            							}
            							_hx_goto_630:;
            						}
            					}
            				}
HXDLIN( 458)				 ::pi_xy::iter::IntIterStart v_yIter35;
HXDLIN( 458)				 ::pi_xy::iter::IntIterStart v_xIter35;
HXDLIN( 458)				int v_undoY5;
HXDLIN( 458)				int v_undoX5;
HXDLIN( 458)				Float v_ty5;
HXDLIN( 458)				Float v_tx5;
HXDLIN( 458)				Float v_t05;
HXDLIN( 458)				Float v_sy5;
HXDLIN( 458)				Float v_sx5;
HXDLIN( 458)				Float v_s05;
HXDLIN( 458)				Float v_A5;
HXDLIN( 458)				Float ax7 = ex1;
HXDLIN( 458)				Float ay7 = ey1;
HXDLIN( 458)				 ::pi_xy::ImageStruct v_undoImage5 = null();
HXDLIN( 458)				Float bx9 = dx5;
HXDLIN( 458)				Float by9 = dy5;
HXDLIN( 458)				Float cx9 = ax4;
HXDLIN( 458)				Float cy9 = ay4;
HXDLIN( 458)				bool adjustWinding7 = (((((ax7 * by9) - (bx9 * ay7)) + ((bx9 * cy9) - (cx9 * by9))) + ((cx9 * ay7) - (ax7 * cy9))) > 0);
HXDLIN( 458)				if (!(adjustWinding7)) {
HXLINE( 458)					Float bx_7 = bx9;
HXDLIN( 458)					Float by_7 = by9;
HXLINE(  24)					bx9 = cx9;
HXLINE(  25)					by9 = cy9;
HXLINE(  26)					cx9 = bx_7;
HXLINE(  27)					cy9 = by_7;
            				}
HXLINE( 458)				Float v_ax5 = ax7;
HXDLIN( 458)				Float v_ay5 = ay7;
HXDLIN( 458)				Float v_bx5 = bx9;
HXDLIN( 458)				Float v_by5 = by9;
HXDLIN( 458)				Float v_cx5 = cx9;
HXDLIN( 458)				Float v_cy5 = cy9;
HXDLIN( 458)				bool v_preCalculated5 = true;
HXDLIN( 458)				{
HXLINE( 458)					v_s05 = ((v_ay5 * v_cx5) - (v_ax5 * v_cy5));
HXDLIN( 458)					v_sx5 = (v_cy5 - v_ay5);
HXDLIN( 458)					v_sy5 = (v_ax5 - v_cx5);
HXDLIN( 458)					v_t05 = ((v_ax5 * v_by5) - (v_ay5 * v_bx5));
HXDLIN( 458)					v_tx5 = (v_ay5 - v_by5);
HXDLIN( 458)					v_ty5 = (v_bx5 - v_ax5);
HXDLIN( 458)					v_A5 = ((((-(v_by5) * v_cx5) + (v_ay5 * (-(v_bx5) + v_cx5))) + (v_ax5 * (v_by5 - v_cy5))) + (v_bx5 * v_cy5));
HXDLIN( 458)					Float a61 = v_ax5;
HXDLIN( 458)					Float b66 = v_bx5;
HXDLIN( 458)					Float c36 = v_cx5;
HXDLIN( 458)					if ((a61 > b66)) {
HXLINE( 458)						if ((a61 > c36)) {
HXLINE( 458)							int min52;
HXDLIN( 458)							if ((b66 > c36)) {
HXLINE( 458)								min52 = ::Math_obj::floor(c36);
            							}
            							else {
HXLINE( 458)								min52 = ::Math_obj::floor(b66);
            							}
HXDLIN( 458)							int ii_min104 = min52;
HXDLIN( 458)							int ii_max104 = ::Math_obj::ceil(a61);
HXDLIN( 458)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min104,ii_max104);
            						}
            						else {
HXLINE( 458)							int ii_min105 = ::Math_obj::floor(b66);
HXDLIN( 458)							int ii_max105 = ::Math_obj::ceil(c36);
HXDLIN( 458)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min105,ii_max105);
            						}
            					}
            					else {
HXLINE( 458)						if ((b66 > c36)) {
HXLINE( 458)							int min53;
HXDLIN( 458)							if ((a61 > c36)) {
HXLINE( 458)								min53 = ::Math_obj::floor(c36);
            							}
            							else {
HXLINE( 458)								min53 = ::Math_obj::ceil(a61);
            							}
HXDLIN( 458)							int ii_min106 = min53;
HXDLIN( 458)							int ii_max106 = ::Math_obj::ceil(b66);
HXDLIN( 458)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min106,ii_max106);
            						}
            						else {
HXLINE( 458)							int ii_min107 = ::Math_obj::floor(a61);
HXDLIN( 458)							int ii_max107 = ::Math_obj::ceil(c36);
HXDLIN( 458)							v_xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min107,ii_max107);
            						}
            					}
HXDLIN( 458)					Float a62 = v_ay5;
HXDLIN( 458)					Float b67 = v_by5;
HXDLIN( 458)					Float c37 = v_cy5;
HXDLIN( 458)					if ((a62 > b67)) {
HXLINE( 458)						if ((a62 > c37)) {
HXLINE( 458)							int min54;
HXDLIN( 458)							if ((b67 > c37)) {
HXLINE( 458)								min54 = ::Math_obj::floor(c37);
            							}
            							else {
HXLINE( 458)								min54 = ::Math_obj::floor(b67);
            							}
HXDLIN( 458)							int ii_min108 = min54;
HXDLIN( 458)							int ii_max108 = ::Math_obj::ceil(a62);
HXDLIN( 458)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min108,ii_max108);
            						}
            						else {
HXLINE( 458)							int ii_min109 = ::Math_obj::floor(b67);
HXDLIN( 458)							int ii_max109 = ::Math_obj::ceil(c37);
HXDLIN( 458)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min109,ii_max109);
            						}
            					}
            					else {
HXLINE( 458)						if ((b67 > c37)) {
HXLINE( 458)							int min55;
HXDLIN( 458)							if ((a62 > c37)) {
HXLINE( 458)								min55 = ::Math_obj::floor(c37);
            							}
            							else {
HXLINE( 458)								min55 = ::Math_obj::ceil(a62);
            							}
HXDLIN( 458)							int ii_min110 = min55;
HXDLIN( 458)							int ii_max110 = ::Math_obj::ceil(b67);
HXDLIN( 458)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min110,ii_max110);
            						}
            						else {
HXLINE( 458)							int ii_min111 = ::Math_obj::floor(a62);
HXDLIN( 458)							int ii_max111 = ::Math_obj::ceil(c37);
HXDLIN( 458)							v_yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min111,ii_max111);
            						}
            					}
            				}
HXDLIN( 458)				if (hasUndo7) {
HXLINE( 458)					v_undoImage5 = undoImage21;
HXDLIN( 458)					v_undoX5 = xIter37->start;
HXDLIN( 458)					v_undoY5 = yIter37->start;
            				}
HXDLIN( 458)				 ::pi_xy::algo::HitQuad v17 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax4,ay4,bx5,by5,cx5,cy5,dx5,dy5,true);
HXLINE( 454)				hitQuad = v17;
            			}
            		}
            		else {
HXLINE( 461)			Float sin3 = ::Math_obj::sin(theta);
HXDLIN( 461)			Float cos3 = ::Math_obj::cos(theta);
HXDLIN( 461)			Float radius3 = (thick / ( (Float)(2) ));
HXDLIN( 461)			Float dx10 = ((Float)0.1);
HXDLIN( 461)			Float dy10 = radius3;
HXDLIN( 461)			Float cx10 = h2;
HXDLIN( 461)			Float cy10 = radius3;
HXDLIN( 461)			Float bx10 = h2;
HXDLIN( 461)			Float by10 = -(radius3);
HXDLIN( 461)			Float ax8 = ((Float)0.1);
HXDLIN( 461)			Float ay8 = -(radius3);
HXDLIN( 461)			Float temp2 = ((Float)0.);
HXLINE(  82)			temp2 = (px + ((ax8 * cos3) - (ay8 * sin3)));
HXLINE(  83)			ay8 = (py + ((ay8 * cos3) + (ax8 * sin3)));
HXLINE(  84)			ax8 = temp2;
HXLINE(  86)			temp2 = (px + ((bx10 * cos3) - (by10 * sin3)));
HXLINE(  87)			by10 = (py + ((by10 * cos3) + (bx10 * sin3)));
HXLINE(  88)			bx10 = temp2;
HXLINE(  90)			temp2 = (px + ((cx10 * cos3) - (cy10 * sin3)));
HXLINE(  91)			cy10 = (py + ((cy10 * cos3) + (cx10 * sin3)));
HXLINE(  92)			cx10 = temp2;
HXLINE(  94)			temp2 = (px + ((dx10 * cos3) - (dy10 * sin3)));
HXLINE(  95)			dy10 = (py + ((dy10 * cos3) + (dx10 * sin3)));
HXLINE(  96)			dx10 = temp2;
HXLINE( 461)			{
HXLINE( 461)				bool hasUndo8 = true;
HXDLIN( 461)				int aA6 = ((color >> 24) & 255);
HXDLIN( 461)				int rA6 = ((color >> 16) & 255);
HXDLIN( 461)				int gA6 = ((color >> 8) & 255);
HXDLIN( 461)				int bA6 = (color & 255);
HXDLIN( 461)				Float bcx6 = (bx10 - dx10);
HXDLIN( 461)				Float bcy6 = (by10 - dy10);
HXDLIN( 461)				Float acx6 = (ax8 - dx10);
HXDLIN( 461)				Float acy6 = (ay8 - dy10);
HXDLIN( 461)				Float dot116 = ((bcx6 * bcx6) + (bcy6 * bcy6));
HXDLIN( 461)				Float dot126 = ((bcx6 * acx6) + (bcy6 * acy6));
HXDLIN( 461)				Float dot226 = ((acx6 * acx6) + (acy6 * acy6));
HXDLIN( 461)				Float denom16 = (( (Float)(1) ) / ((dot116 * dot226) - (dot126 * dot126)));
HXDLIN( 461)				 ::pi_xy::iter::IntIterStart xIter38;
HXDLIN( 461)				if ((ax8 > bx10)) {
HXLINE( 461)					if ((ax8 > dx10)) {
HXLINE( 461)						int min56;
HXDLIN( 461)						if ((bx10 > dx10)) {
HXLINE( 461)							min56 = ::Math_obj::floor(dx10);
            						}
            						else {
HXLINE( 461)							min56 = ::Math_obj::floor(bx10);
            						}
HXDLIN( 461)						int ii_min112 = min56;
HXDLIN( 461)						int ii_max112 = ::Math_obj::ceil(ax8);
HXDLIN( 461)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min112,ii_max112);
            					}
            					else {
HXLINE( 461)						int ii_min113 = ::Math_obj::floor(bx10);
HXDLIN( 461)						int ii_max113 = ::Math_obj::ceil(dx10);
HXDLIN( 461)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min113,ii_max113);
            					}
            				}
            				else {
HXLINE( 461)					if ((bx10 > dx10)) {
HXLINE( 461)						int min57;
HXDLIN( 461)						if ((ax8 > dx10)) {
HXLINE( 461)							min57 = ::Math_obj::floor(dx10);
            						}
            						else {
HXLINE( 461)							min57 = ::Math_obj::ceil(ax8);
            						}
HXDLIN( 461)						int ii_min114 = min57;
HXDLIN( 461)						int ii_max114 = ::Math_obj::ceil(bx10);
HXDLIN( 461)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min114,ii_max114);
            					}
            					else {
HXLINE( 461)						int ii_min115 = ::Math_obj::floor(ax8);
HXDLIN( 461)						int ii_max115 = ::Math_obj::ceil(dx10);
HXDLIN( 461)						xIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min115,ii_max115);
            					}
            				}
HXDLIN( 461)				 ::pi_xy::iter::IntIterStart yIter38;
HXDLIN( 461)				if ((ay8 > by10)) {
HXLINE( 461)					if ((ay8 > dy10)) {
HXLINE( 461)						int min58;
HXDLIN( 461)						if ((by10 > dy10)) {
HXLINE( 461)							min58 = ::Math_obj::floor(dy10);
            						}
            						else {
HXLINE( 461)							min58 = ::Math_obj::floor(by10);
            						}
HXDLIN( 461)						int ii_min116 = min58;
HXDLIN( 461)						int ii_max116 = ::Math_obj::ceil(ay8);
HXDLIN( 461)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min116,ii_max116);
            					}
            					else {
HXLINE( 461)						int ii_min117 = ::Math_obj::floor(by10);
HXDLIN( 461)						int ii_max117 = ::Math_obj::ceil(dy10);
HXDLIN( 461)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min117,ii_max117);
            					}
            				}
            				else {
HXLINE( 461)					if ((by10 > dy10)) {
HXLINE( 461)						int min59;
HXDLIN( 461)						if ((ay8 > dy10)) {
HXLINE( 461)							min59 = ::Math_obj::floor(dy10);
            						}
            						else {
HXLINE( 461)							min59 = ::Math_obj::ceil(ay8);
            						}
HXDLIN( 461)						int ii_min118 = min59;
HXDLIN( 461)						int ii_max118 = ::Math_obj::ceil(by10);
HXDLIN( 461)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min118,ii_max118);
            					}
            					else {
HXLINE( 461)						int ii_min119 = ::Math_obj::floor(ay8);
HXDLIN( 461)						int ii_max119 = ::Math_obj::ceil(dy10);
HXDLIN( 461)						yIter38 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min119,ii_max119);
            					}
            				}
HXDLIN( 461)				 ::pi_xy::ImageStruct undoImage24 = null();
HXDLIN( 461)				if (hasUndo8) {
HXLINE( 461)					int width8 = ((xIter38->max - xIter38->start) + 1);
HXDLIN( 461)					int height8 = ((yIter38->max - yIter38->start) + 1);
HXDLIN( 461)					 ::Dynamic imageType8 = null();
HXDLIN( 461)					 ::pi_xy::ImageStruct this253 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 461)					if (::hx::IsNull( imageType8 )) {
HXLINE(  54)						imageType8 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 461)					::Dynamic undoImage25;
HXDLIN( 461)					switch((int)(( (int)(imageType8) ))){
            						case (int)0: {
HXLINE( 461)							 ::iterMagic::BytesImg byt8 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 461)							 ::iterMagic::BytesImg b68 = byt8;
HXDLIN( 461)							{
HXLINE( 461)								b68->width = width8;
HXDLIN( 461)								b68->height = height8;
HXDLIN( 461)								b68->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 461)								b68->data = ::haxe::io::Bytes_obj::alloc((b68->length * 4));
HXDLIN( 461)								{
HXLINE( 461)									int len16 = b68->length;
HXDLIN( 461)									int w8 = 0;
HXDLIN( 461)									{
HXLINE( 461)										int _g160 = 0;
HXDLIN( 461)										int _g161 = b68->height;
HXDLIN( 461)										while((_g160 < _g161)){
HXLINE( 461)											_g160 = (_g160 + 1);
HXDLIN( 461)											int y26 = (_g160 - 1);
HXDLIN( 461)											{
HXLINE( 461)												int _g162 = 0;
HXDLIN( 461)												int _g163 = b68->width;
HXDLIN( 461)												while((_g162 < _g163)){
HXLINE( 461)													_g162 = (_g162 + 1);
HXDLIN( 461)													int x26 = (_g162 - 1);
HXDLIN( 461)													{
HXLINE( 461)														w8 = (w8 + 1);
HXDLIN( 461)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 461)													{
HXLINE( 461)														w8 = (w8 + 1);
HXDLIN( 461)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 461)													{
HXLINE( 461)														w8 = (w8 + 1);
HXDLIN( 461)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 461)													{
HXLINE( 461)														w8 = (w8 + 1);
HXDLIN( 461)														b68->data->b[(w8 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 461)							undoImage25 = b68;
            						}
            						break;
            						case (int)1: {
HXLINE( 461)							 ::iterMagic::ArrIntImg arrI8 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 461)							 ::iterMagic::ArrIntImg a63 = arrI8;
HXDLIN( 461)							{
HXLINE( 461)								a63->width = width8;
HXDLIN( 461)								a63->height = height8;
HXDLIN( 461)								a63->data = ::Array_obj< int >::__new(0);
HXDLIN( 461)								a63->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 461)								{
HXLINE( 461)									int _g164 = 0;
HXDLIN( 461)									int _g165 = a63->length;
HXDLIN( 461)									while((_g164 < _g165)){
HXLINE( 461)										_g164 = (_g164 + 1);
HXDLIN( 461)										int i72 = (_g164 - 1);
HXDLIN( 461)										a63->data[i72] = 0;
            									}
            								}
            							}
HXDLIN( 461)							undoImage25 = a63;
            						}
            						break;
            						case (int)2: {
HXLINE( 461)							 ::iterMagic::U32ArrImg u32a8 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 461)							 ::iterMagic::U32ArrImg b69 = u32a8;
HXDLIN( 461)							{
HXLINE( 461)								b69->width = width8;
HXDLIN( 461)								b69->height = height8;
HXDLIN( 461)								b69->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 461)								int size8 = (b69->length * 4);
HXDLIN( 461)								b69->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size8),0,size8);
HXDLIN( 461)								{
HXLINE( 461)									int _g166 = 0;
HXDLIN( 461)									int _g167 = b69->length;
HXDLIN( 461)									while((_g166 < _g167)){
HXLINE( 461)										_g166 = (_g166 + 1);
HXDLIN( 461)										int i73 = (_g166 - 1);
HXDLIN( 461)										{
HXLINE( 461)											 ::haxe::io::ArrayBufferViewImpl this254 = b69->data;
HXDLIN( 461)											bool undoImage26;
HXDLIN( 461)											if ((i73 >= 0)) {
HXLINE( 461)												undoImage26 = (i73 < (this254->byteLength >> 2));
            											}
            											else {
HXLINE( 461)												undoImage26 = false;
            											}
HXDLIN( 461)											if (undoImage26) {
HXLINE( 461)												 ::haxe::io::Bytes _this8 = this254->bytes;
HXDLIN( 461)												int pos8 = ((i73 << 2) + this254->byteOffset);
HXDLIN( 461)												_this8->b[pos8] = ( (unsigned char)(0) );
HXDLIN( 461)												_this8->b[(pos8 + 1)] = ( (unsigned char)(0) );
HXDLIN( 461)												_this8->b[(pos8 + 2)] = ( (unsigned char)(0) );
HXDLIN( 461)												_this8->b[(pos8 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 461)							undoImage25 = b69;
            						}
            						break;
            						case (int)3: {
HXLINE( 461)							 ::iterMagic::VecIntImg vec8 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 461)							 ::iterMagic::VecIntImg v18 = vec8;
HXDLIN( 461)							{
HXLINE( 461)								v18->width = width8;
HXDLIN( 461)								v18->height = height8;
HXDLIN( 461)								v18->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 461)								v18->data = ::Array_obj< int >::__new(v18->length);
HXDLIN( 461)								{
HXLINE( 461)									int _g168 = 0;
HXDLIN( 461)									int _g169 = v18->length;
HXDLIN( 461)									while((_g168 < _g169)){
HXLINE( 461)										_g168 = (_g168 + 1);
HXDLIN( 461)										int i74 = (_g168 - 1);
HXDLIN( 461)										v18->data->__unsafe_set(i74,0);
            									}
            								}
            							}
HXDLIN( 461)							undoImage25 = v18;
            						}
            						break;
            						case (int)4: {
HXLINE( 461)							 ::iterMagic::StackIntImg sInt8 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 461)							 ::iterMagic::StackIntImg b70 = sInt8;
HXDLIN( 461)							{
HXLINE( 461)								b70->width = width8;
HXDLIN( 461)								b70->height = height8;
HXDLIN( 461)								b70->length = ::Std_obj::_hx_int(( (Float)((width8 * height8)) ));
HXDLIN( 461)								b70->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 461)								{
HXLINE( 461)									int len17 = b70->length;
HXDLIN( 461)									 ::haxe::ds::GenericStack_Int d8 = b70->data;
HXDLIN( 461)									if (::hx::IsNull( d8->head )) {
HXLINE( 461)										int _g170 = 0;
HXDLIN( 461)										int _g171 = len17;
HXDLIN( 461)										while((_g170 < _g171)){
HXLINE( 461)											_g170 = (_g170 + 1);
HXDLIN( 461)											int i75 = (_g170 - 1);
HXDLIN( 461)											d8->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d8->head);
            										}
            									}
            									else {
HXLINE( 461)										int _g172 = 0;
HXDLIN( 461)										int _g173 = len17;
HXDLIN( 461)										while((_g172 < _g173)){
HXLINE( 461)											_g172 = (_g172 + 1);
HXDLIN( 461)											int i76 = (_g172 - 1);
HXDLIN( 461)											{
HXLINE( 461)												 ::haxe::ds::GenericCell_Int l8 = b70->data->head;
HXDLIN( 461)												 ::haxe::ds::GenericCell_Int prev8 = null();
HXDLIN( 461)												{
HXLINE( 461)													int _g174 = 0;
HXDLIN( 461)													int _g175 = i76;
HXDLIN( 461)													while((_g174 < _g175)){
HXLINE( 461)														_g174 = (_g174 + 1);
HXDLIN( 461)														int i77 = (_g174 - 1);
HXLINE( 345)														prev8 = l8;
HXLINE( 346)														l8 = l8->next;
            													}
            												}
HXLINE( 461)												if (::hx::IsNull( prev8 )) {
HXLINE( 461)													b70->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN( 461)													l8 = null();
            												}
            												else {
HXLINE( 461)													prev8->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l8->next);
HXDLIN( 461)													l8 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 461)							undoImage25 = b70;
            						}
            						break;
            					}
HXDLIN( 461)					this253->image = undoImage25;
HXDLIN( 461)					this253->width = width8;
HXDLIN( 461)					this253->height = height8;
HXDLIN( 461)					this253->imageType = ( (int)(imageType8) );
HXDLIN( 461)					undoImage24 = this253;
HXDLIN( 461)					{
HXLINE( 461)						int rectLeft8 = xIter38->start;
HXDLIN( 461)						int rectTop8 = yIter38->start;
HXDLIN( 461)						int rectRight8 = xIter38->max;
HXDLIN( 461)						bool forceClear8 = false;
HXDLIN( 461)						{
HXLINE( 461)							int _g176 = rectTop8;
HXDLIN( 461)							int _g177 = yIter38->max;
HXDLIN( 461)							while((_g176 < _g177)){
HXLINE( 461)								_g176 = (_g176 + 1);
HXDLIN( 461)								int dy11 = (_g176 - 1);
HXDLIN( 461)								{
HXLINE( 461)									int _g178 = rectLeft8;
HXDLIN( 461)									int _g179 = rectRight8;
HXDLIN( 461)									while((_g178 < _g179)){
HXLINE( 461)										_g178 = (_g178 + 1);
HXDLIN( 461)										int dx11 = (_g178 - 1);
HXDLIN( 461)										::Dynamic this255 = pixelImage->image;
HXDLIN( 461)										int index34;
HXDLIN( 461)										if (pixelImage->useVirtualPos) {
HXLINE( 461)											index34 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx11) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 461)											index34 = ::Std_obj::_hx_int(( (Float)(((dy11 * pixelImage->width) + dx11)) ));
            										}
HXDLIN( 461)										int c38 = ::iterMagic::Iimg_obj::get(this255,index34);
HXDLIN( 461)										int col8;
HXDLIN( 461)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)											col8 = ((((((c38 >> 24) & 255) << 24) | ((c38 & 255) << 16)) | (((c38 >> 8) & 255) << 8)) | ((c38 >> 16) & 255));
            										}
            										else {
HXLINE( 461)											col8 = c38;
            										}
HXDLIN( 461)										bool hitQuad65;
HXDLIN( 461)										if (pixelImage->useMask) {
HXLINE( 461)											hitQuad65 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 461)											hitQuad65 = false;
            										}
HXDLIN( 461)										if (hitQuad65) {
HXLINE( 461)											 ::pi_xy::ImageStruct this256 = pixelImage->mask;
HXDLIN( 461)											::Dynamic this257 = this256->image;
HXDLIN( 461)											int index35;
HXDLIN( 461)											if (this256->useVirtualPos) {
HXLINE( 461)												index35 = ::Std_obj::_hx_int(((((( (Float)(dy11) ) - this256->virtualY) * ( (Float)(this256->width) )) + dx11) - this256->virtualX));
            											}
            											else {
HXLINE( 461)												index35 = ::Std_obj::_hx_int(( (Float)(((dy11 * this256->width) + dx11)) ));
            											}
HXDLIN( 461)											int c39 = ::iterMagic::Iimg_obj::get(this257,index35);
HXDLIN( 461)											int v19;
HXDLIN( 461)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)												v19 = ((((((c39 >> 24) & 255) << 24) | ((c39 & 255) << 16)) | (((c39 >> 8) & 255) << 8)) | ((c39 >> 16) & 255));
            											}
            											else {
HXLINE( 461)												v19 = c39;
            											}
HXDLIN( 461)											int maskPixel8 = v19;
HXDLIN( 461)											int this258 = col8;
HXDLIN( 461)											if ((maskPixel8 == 0)) {
HXLINE( 461)												col8 = this258;
            											}
            											else {
HXLINE( 461)												Float m08;
HXDLIN( 461)												int this259 = ((maskPixel8 >> 24) & 255);
HXDLIN( 461)												if ((this259 == 0)) {
HXLINE( 461)													m08 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													m08 = (( (Float)(this259) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float m18;
HXDLIN( 461)												int this260 = ((maskPixel8 >> 16) & 255);
HXDLIN( 461)												if ((this260 == 0)) {
HXLINE( 461)													m18 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													m18 = (( (Float)(this260) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float m28;
HXDLIN( 461)												int this261 = ((maskPixel8 >> 8) & 255);
HXDLIN( 461)												if ((this261 == 0)) {
HXLINE( 461)													m28 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													m28 = (( (Float)(this261) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float m38;
HXDLIN( 461)												int this262 = (maskPixel8 & 255);
HXDLIN( 461)												if ((this262 == 0)) {
HXLINE( 461)													m38 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													m38 = (( (Float)(this262) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												int ch08 = ::Std_obj::_hx_int(((((Float)1.) - m08) * ( (Float)(((this258 >> 24) & 255)) )));
HXDLIN( 461)												int ch18 = ::Std_obj::_hx_int(((((Float)1.) - m18) * ( (Float)(((this258 >> 16) & 255)) )));
HXDLIN( 461)												int ch28 = ::Std_obj::_hx_int(((((Float)1.) - m28) * ( (Float)(((this258 >> 8) & 255)) )));
HXDLIN( 461)												int ch38 = ::Std_obj::_hx_int(((((Float)1.) - m38) * ( (Float)((this258 & 255)) )));
HXDLIN( 461)												col8 = ((((::Math_obj::round((( (Float)(ch08) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch18) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch28) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch38) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 461)										if ((col8 != 0)) {
HXLINE( 461)											int x27 = (dx11 - rectLeft8);
HXDLIN( 461)											int y27 = (dy11 - rectTop8);
HXDLIN( 461)											int c40 = col8;
HXDLIN( 461)											bool hitQuad66;
HXDLIN( 461)											if ((((c40 >> 24) & 255) < 254)) {
HXLINE( 461)												hitQuad66 = undoImage24->transparent;
            											}
            											else {
HXLINE( 461)												hitQuad66 = false;
            											}
HXDLIN( 461)											if (hitQuad66) {
HXLINE( 461)												int location16;
HXDLIN( 461)												if (undoImage24->useVirtualPos) {
HXLINE( 461)													location16 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x27) - undoImage24->virtualX));
            												}
            												else {
HXLINE( 461)													location16 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage24->width) + x27)) ));
            												}
HXDLIN( 461)												int this263 = ::iterMagic::Iimg_obj::get(undoImage24->image,location16);
HXDLIN( 461)												int this264;
HXDLIN( 461)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)													this264 = ((((((this263 >> 24) & 255) << 24) | ((this263 & 255) << 16)) | (((this263 >> 8) & 255) << 8)) | ((this263 >> 16) & 255));
            												}
            												else {
HXLINE( 461)													this264 = this263;
            												}
HXDLIN( 461)												Float a121;
HXDLIN( 461)												int this265 = ((this264 >> 24) & 255);
HXDLIN( 461)												if ((this265 == 0)) {
HXLINE( 461)													a121 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													a121 = (( (Float)(this265) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float r118;
HXDLIN( 461)												int this266 = ((this264 >> 16) & 255);
HXDLIN( 461)												if ((this266 == 0)) {
HXLINE( 461)													r118 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													r118 = (( (Float)(this266) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float g118;
HXDLIN( 461)												int this267 = ((this264 >> 8) & 255);
HXDLIN( 461)												if ((this267 == 0)) {
HXLINE( 461)													g118 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													g118 = (( (Float)(this267) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float b122;
HXDLIN( 461)												int this268 = (this264 & 255);
HXDLIN( 461)												if ((this268 == 0)) {
HXLINE( 461)													b122 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													b122 = (( (Float)(this268) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float a219;
HXDLIN( 461)												int this269 = ((col8 >> 24) & 255);
HXDLIN( 461)												if ((this269 == 0)) {
HXLINE( 461)													a219 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													a219 = (( (Float)(this269) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float r217;
HXDLIN( 461)												int this270 = ((col8 >> 16) & 255);
HXDLIN( 461)												if ((this270 == 0)) {
HXLINE( 461)													r217 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													r217 = (( (Float)(this270) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float g217;
HXDLIN( 461)												int this271 = ((col8 >> 8) & 255);
HXDLIN( 461)												if ((this271 == 0)) {
HXLINE( 461)													g217 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													g217 = (( (Float)(this271) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float b220;
HXDLIN( 461)												int this272 = (col8 & 255);
HXDLIN( 461)												if ((this272 == 0)) {
HXLINE( 461)													b220 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													b220 = (( (Float)(this272) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float a318 = (a121 * (( (Float)(1) ) - a219));
HXDLIN( 461)												int r39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r118 * a318) + (r217 * a219))));
HXDLIN( 461)												int g39 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g118 * a318) + (g217 * a219))));
HXDLIN( 461)												int b71 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b122 * a318) + (b220 * a219))));
HXDLIN( 461)												int a64 = ::Std_obj::_hx_int((( (Float)(255) ) * (a318 + a219)));
HXDLIN( 461)												int blended16 = ((((a64 << 24) | (r39 << 16)) | (g39 << 8)) | b71);
HXDLIN( 461)												{
HXLINE( 461)													int hitQuad67;
HXDLIN( 461)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)														hitQuad67 = ((((((blended16 >> 24) & 255) << 24) | ((blended16 & 255) << 16)) | (((blended16 >> 8) & 255) << 8)) | ((blended16 >> 16) & 255));
            													}
            													else {
HXLINE( 461)														hitQuad67 = blended16;
            													}
HXDLIN( 461)													::iterMagic::Iimg_obj::set(undoImage24->image,location16,hitQuad67);
            												}
            											}
            											else {
HXLINE( 461)												::Dynamic this273 = undoImage24->image;
HXDLIN( 461)												int index36;
HXDLIN( 461)												if (undoImage24->useVirtualPos) {
HXLINE( 461)													index36 = ::Std_obj::_hx_int(((((( (Float)(y27) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x27) - undoImage24->virtualX));
            												}
            												else {
HXLINE( 461)													index36 = ::Std_obj::_hx_int(( (Float)(((y27 * undoImage24->width) + x27)) ));
            												}
HXDLIN( 461)												int hitQuad68;
HXDLIN( 461)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)													hitQuad68 = ((((((c40 >> 24) & 255) << 24) | ((c40 & 255) << 16)) | (((c40 >> 8) & 255) << 8)) | ((c40 >> 16) & 255));
            												}
            												else {
HXLINE( 461)													hitQuad68 = c40;
            												}
HXDLIN( 461)												::iterMagic::Iimg_obj::set(this273,index36,hitQuad68);
            											}
            										}
            										else {
HXLINE( 461)											if (forceClear8) {
HXLINE( 461)												::Dynamic this274 = undoImage24->image;
HXDLIN( 461)												int x28 = (dx11 - rectLeft8);
HXDLIN( 461)												int y28 = (dy11 - rectTop8);
HXDLIN( 461)												int index37;
HXDLIN( 461)												if (undoImage24->useVirtualPos) {
HXLINE( 461)													index37 = ::Std_obj::_hx_int(((((( (Float)(y28) ) - undoImage24->virtualY) * ( (Float)(undoImage24->width) )) + x28) - undoImage24->virtualX));
            												}
            												else {
HXLINE( 461)													index37 = ::Std_obj::_hx_int(( (Float)(((y28 * undoImage24->width) + x28)) ));
            												}
HXDLIN( 461)												::iterMagic::Iimg_obj::set(this274,index37,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 461)				bool found8 = false;
HXDLIN( 461)				Float min60 = ( (Float)(0) );
HXDLIN( 461)				Float max = ( (Float)(0) );
HXDLIN( 461)				int a65 = 0;
HXDLIN( 461)				int r40 = 0;
HXDLIN( 461)				int g40 = 0;
HXDLIN( 461)				int b72 = 0;
HXDLIN( 461)				{
HXLINE( 461)					int _g_min16 = xIter38->start;
HXDLIN( 461)					int _g_max16 = xIter38->max;
HXDLIN( 461)					while((_g_min16 < _g_max16)){
HXLINE( 461)						_g_min16 = (_g_min16 + 1);
HXDLIN( 461)						int px7 = (_g_min16 - 1);
HXDLIN( 461)						Float pcx6 = (( (Float)(px7) ) - dx10);
HXLINE( 695)						found8 = false;
HXLINE( 461)						{
HXLINE( 461)							int _g_min17 = yIter38->start;
HXDLIN( 461)							int _g_max17 = yIter38->max;
HXDLIN( 461)							while((_g_min17 < _g_max17)){
HXLINE( 461)								_g_min17 = (_g_min17 + 1);
HXDLIN( 461)								int py7 = (_g_min17 - 1);
HXDLIN( 461)								Float pcy6 = (( (Float)(py7) ) - dy10);
HXDLIN( 461)								Float dot316 = ((pcx6 * bcx6) + (pcy6 * bcy6));
HXDLIN( 461)								Float dot326 = ((pcx6 * acx6) + (pcy6 * acy6));
HXDLIN( 461)								Float ratioA6 = (((dot226 * dot316) - (dot126 * dot326)) * denom16);
HXDLIN( 461)								Float ratioB6 = (((dot116 * dot326) - (dot126 * dot316)) * denom16);
HXDLIN( 461)								Float ratioC6 = ((((Float)1.0) - ratioB6) - ratioA6);
HXDLIN( 461)								bool hitQuad69;
HXDLIN( 461)								bool hitQuad70;
HXDLIN( 461)								if ((ratioA6 >= 0)) {
HXLINE( 461)									hitQuad70 = (ratioB6 >= 0);
            								}
            								else {
HXLINE( 461)									hitQuad70 = false;
            								}
HXDLIN( 461)								if (hitQuad70) {
HXLINE( 461)									hitQuad69 = (ratioC6 >= 0);
            								}
            								else {
HXLINE( 461)									hitQuad69 = false;
            								}
HXDLIN( 461)								if (hitQuad69) {
HXLINE( 461)									if ((ratioA6 < ratioC6)) {
HXLINE( 461)										min60 = ratioA6;
            									}
            									else {
HXLINE( 461)										min60 = ratioC6;
            									}
HXDLIN( 461)									if ((ratioA6 > ratioB6)) {
HXLINE( 461)										max = ratioA6;
            									}
            									else {
HXLINE( 461)										max = ratioB6;
            									}
HXDLIN( 461)									if (!((max > ratioC6))) {
HXLINE( 461)										max = ratioC6;
            									}
HXLINE( 728)									max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE( 461)									if (!((min60 < max))) {
HXLINE( 461)										min60 = ((max + min60) / ( (Float)(2) ));
            									}
HXDLIN( 461)									int i78 = ::Std_obj::_hx_int(((( (Float)(aA6) ) * soft) * min60));
HXDLIN( 461)									if ((i78 > 255)) {
HXLINE(  24)										i78 = 255;
            									}
HXLINE( 461)									if ((i78 < 0)) {
HXLINE(  25)										i78 = 0;
            									}
HXLINE( 461)									a65 = i78;
HXDLIN( 461)									int i79 = ::Std_obj::_hx_int(( (Float)(rA6) ));
HXDLIN( 461)									if ((i79 > 255)) {
HXLINE(  24)										i79 = 255;
            									}
HXLINE( 461)									if ((i79 < 0)) {
HXLINE(  25)										i79 = 0;
            									}
HXLINE( 747)									r40 = i79;
HXLINE( 461)									int i80 = ::Std_obj::_hx_int(( (Float)(gA6) ));
HXDLIN( 461)									if ((i80 > 255)) {
HXLINE(  24)										i80 = 255;
            									}
HXLINE( 461)									if ((i80 < 0)) {
HXLINE(  25)										i80 = 0;
            									}
HXLINE( 748)									g40 = i80;
HXLINE( 461)									int i81 = ::Std_obj::_hx_int(( (Float)(bA6) ));
HXDLIN( 461)									if ((i81 > 255)) {
HXLINE(  24)										i81 = 255;
            									}
HXLINE( 461)									if ((i81 < 0)) {
HXLINE(  25)										i81 = 0;
            									}
HXLINE( 749)									b72 = i81;
HXLINE( 461)									{
HXLINE( 461)										int location17;
HXDLIN( 461)										if (pixelImage->useVirtualPos) {
HXLINE( 461)											location17 = ::Std_obj::_hx_int(((((( (Float)(py7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px7) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 461)											location17 = ::Std_obj::_hx_int(( (Float)(((py7 * pixelImage->width) + px7)) ));
            										}
HXDLIN( 461)										bool hitQuad71;
HXDLIN( 461)										if (pixelImage->transparent) {
HXLINE( 461)											hitQuad71 = (a65 < 254);
            										}
            										else {
HXLINE( 461)											hitQuad71 = false;
            										}
HXDLIN( 461)										if (hitQuad71) {
HXLINE( 461)											int this275 = ::iterMagic::Iimg_obj::get(pixelImage->image,location17);
HXDLIN( 461)											int old6;
HXDLIN( 461)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)												old6 = ((((((this275 >> 24) & 255) << 24) | ((this275 & 255) << 16)) | (((this275 >> 8) & 255) << 8)) | ((this275 >> 16) & 255));
            											}
            											else {
HXLINE( 461)												old6 = this275;
            											}
HXDLIN( 461)											int rhs6 = ((((a65 << 24) | (r40 << 16)) | (g40 << 8)) | b72);
HXDLIN( 461)											Float a122;
HXDLIN( 461)											int this276 = ((old6 >> 24) & 255);
HXDLIN( 461)											if ((this276 == 0)) {
HXLINE( 461)												a122 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												a122 = (( (Float)(this276) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float r119;
HXDLIN( 461)											int this277 = ((old6 >> 16) & 255);
HXDLIN( 461)											if ((this277 == 0)) {
HXLINE( 461)												r119 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												r119 = (( (Float)(this277) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float g119;
HXDLIN( 461)											int this278 = ((old6 >> 8) & 255);
HXDLIN( 461)											if ((this278 == 0)) {
HXLINE( 461)												g119 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												g119 = (( (Float)(this278) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float b123;
HXDLIN( 461)											int this279 = (old6 & 255);
HXDLIN( 461)											if ((this279 == 0)) {
HXLINE( 461)												b123 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												b123 = (( (Float)(this279) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float a220;
HXDLIN( 461)											int this280 = ((rhs6 >> 24) & 255);
HXDLIN( 461)											if ((this280 == 0)) {
HXLINE( 461)												a220 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												a220 = (( (Float)(this280) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float r218;
HXDLIN( 461)											int this281 = ((rhs6 >> 16) & 255);
HXDLIN( 461)											if ((this281 == 0)) {
HXLINE( 461)												r218 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												r218 = (( (Float)(this281) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float g218;
HXDLIN( 461)											int this282 = ((rhs6 >> 8) & 255);
HXDLIN( 461)											if ((this282 == 0)) {
HXLINE( 461)												g218 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												g218 = (( (Float)(this282) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float b221;
HXDLIN( 461)											int this283 = (rhs6 & 255);
HXDLIN( 461)											if ((this283 == 0)) {
HXLINE( 461)												b221 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												b221 = (( (Float)(this283) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float a319 = (a122 * (( (Float)(1) ) - a220));
HXDLIN( 461)											int r41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r119 * a319) + (r218 * a220))));
HXDLIN( 461)											int g41 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g119 * a319) + (g218 * a220))));
HXDLIN( 461)											int b73 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b123 * a319) + (b221 * a220))));
HXDLIN( 461)											int a66 = ::Std_obj::_hx_int((( (Float)(255) ) * (a319 + a220)));
HXDLIN( 461)											int blended17 = ((((a66 << 24) | (r41 << 16)) | (g41 << 8)) | b73);
HXDLIN( 461)											{
HXLINE( 461)												int hitQuad72;
HXDLIN( 461)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)													hitQuad72 = ((((((blended17 >> 24) & 255) << 24) | ((blended17 & 255) << 16)) | (((blended17 >> 8) & 255) << 8)) | ((blended17 >> 16) & 255));
            												}
            												else {
HXLINE( 461)													hitQuad72 = blended17;
            												}
HXDLIN( 461)												::iterMagic::Iimg_obj::set(pixelImage->image,location17,hitQuad72);
            											}
            										}
            										else {
HXLINE( 461)											int value6;
HXDLIN( 461)											if (pixelImage->isLittle) {
HXLINE( 461)												value6 = ((((a65 << 24) | (b72 << 16)) | (g40 << 8)) | r40);
            											}
            											else {
HXLINE( 461)												value6 = ((((a65 << 24) | (r40 << 16)) | (g40 << 8)) | b72);
            											}
HXDLIN( 461)											::iterMagic::Iimg_obj::set(pixelImage->image,location17,value6);
            										}
            									}
HXLINE( 751)									found8 = true;
            								}
            								else {
HXLINE( 461)									if (found8) {
HXLINE( 461)										goto _hx_goto_642;
            									}
            								}
            							}
            							_hx_goto_642:;
            						}
            					}
            				}
            			}
HXDLIN( 461)			{
HXLINE( 461)				bool hasUndo9 = true;
HXDLIN( 461)				int aA7 = ((color >> 24) & 255);
HXDLIN( 461)				int rA7 = ((color >> 16) & 255);
HXDLIN( 461)				int gA7 = ((color >> 8) & 255);
HXDLIN( 461)				int bA7 = (color & 255);
HXDLIN( 461)				Float bcx7 = (cx10 - dx10);
HXDLIN( 461)				Float bcy7 = (cy10 - dy10);
HXDLIN( 461)				Float acx7 = (bx10 - dx10);
HXDLIN( 461)				Float acy7 = (by10 - dy10);
HXDLIN( 461)				Float dot117 = ((bcx7 * bcx7) + (bcy7 * bcy7));
HXDLIN( 461)				Float dot127 = ((bcx7 * acx7) + (bcy7 * acy7));
HXDLIN( 461)				Float dot227 = ((acx7 * acx7) + (acy7 * acy7));
HXDLIN( 461)				Float denom17 = (( (Float)(1) ) / ((dot117 * dot227) - (dot127 * dot127)));
HXDLIN( 461)				 ::pi_xy::iter::IntIterStart xIter39;
HXDLIN( 461)				if ((bx10 > cx10)) {
HXLINE( 461)					if ((bx10 > dx10)) {
HXLINE( 461)						int min61;
HXDLIN( 461)						if ((cx10 > dx10)) {
HXLINE( 461)							min61 = ::Math_obj::floor(dx10);
            						}
            						else {
HXLINE( 461)							min61 = ::Math_obj::floor(cx10);
            						}
HXDLIN( 461)						int ii_min120 = min61;
HXDLIN( 461)						int ii_max120 = ::Math_obj::ceil(bx10);
HXDLIN( 461)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min120,ii_max120);
            					}
            					else {
HXLINE( 461)						int ii_min121 = ::Math_obj::floor(cx10);
HXDLIN( 461)						int ii_max121 = ::Math_obj::ceil(dx10);
HXDLIN( 461)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min121,ii_max121);
            					}
            				}
            				else {
HXLINE( 461)					if ((cx10 > dx10)) {
HXLINE( 461)						int min62;
HXDLIN( 461)						if ((bx10 > dx10)) {
HXLINE( 461)							min62 = ::Math_obj::floor(dx10);
            						}
            						else {
HXLINE( 461)							min62 = ::Math_obj::ceil(bx10);
            						}
HXDLIN( 461)						int ii_min122 = min62;
HXDLIN( 461)						int ii_max122 = ::Math_obj::ceil(cx10);
HXDLIN( 461)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min122,ii_max122);
            					}
            					else {
HXLINE( 461)						int ii_min123 = ::Math_obj::floor(bx10);
HXDLIN( 461)						int ii_max123 = ::Math_obj::ceil(dx10);
HXDLIN( 461)						xIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min123,ii_max123);
            					}
            				}
HXDLIN( 461)				 ::pi_xy::iter::IntIterStart yIter39;
HXDLIN( 461)				if ((by10 > cy10)) {
HXLINE( 461)					if ((by10 > dy10)) {
HXLINE( 461)						int min63;
HXDLIN( 461)						if ((cy10 > dy10)) {
HXLINE( 461)							min63 = ::Math_obj::floor(dy10);
            						}
            						else {
HXLINE( 461)							min63 = ::Math_obj::floor(cy10);
            						}
HXDLIN( 461)						int ii_min124 = min63;
HXDLIN( 461)						int ii_max124 = ::Math_obj::ceil(by10);
HXDLIN( 461)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min124,ii_max124);
            					}
            					else {
HXLINE( 461)						int ii_min125 = ::Math_obj::floor(cy10);
HXDLIN( 461)						int ii_max125 = ::Math_obj::ceil(dy10);
HXDLIN( 461)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min125,ii_max125);
            					}
            				}
            				else {
HXLINE( 461)					if ((cy10 > dy10)) {
HXLINE( 461)						int min64;
HXDLIN( 461)						if ((by10 > dy10)) {
HXLINE( 461)							min64 = ::Math_obj::floor(dy10);
            						}
            						else {
HXLINE( 461)							min64 = ::Math_obj::ceil(by10);
            						}
HXDLIN( 461)						int ii_min126 = min64;
HXDLIN( 461)						int ii_max126 = ::Math_obj::ceil(cy10);
HXDLIN( 461)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min126,ii_max126);
            					}
            					else {
HXLINE( 461)						int ii_min127 = ::Math_obj::floor(by10);
HXDLIN( 461)						int ii_max127 = ::Math_obj::ceil(dy10);
HXDLIN( 461)						yIter39 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min127,ii_max127);
            					}
            				}
HXDLIN( 461)				 ::pi_xy::ImageStruct undoImage27 = null();
HXDLIN( 461)				if (hasUndo9) {
HXLINE( 461)					int width9 = ((xIter39->max - xIter39->start) + 1);
HXDLIN( 461)					int height9 = ((yIter39->max - yIter39->start) + 1);
HXDLIN( 461)					 ::Dynamic imageType9 = null();
HXDLIN( 461)					 ::pi_xy::ImageStruct this284 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 461)					if (::hx::IsNull( imageType9 )) {
HXLINE(  54)						imageType9 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 461)					::Dynamic undoImage28;
HXDLIN( 461)					switch((int)(( (int)(imageType9) ))){
            						case (int)0: {
HXLINE( 461)							 ::iterMagic::BytesImg byt9 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 461)							 ::iterMagic::BytesImg b74 = byt9;
HXDLIN( 461)							{
HXLINE( 461)								b74->width = width9;
HXDLIN( 461)								b74->height = height9;
HXDLIN( 461)								b74->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 461)								b74->data = ::haxe::io::Bytes_obj::alloc((b74->length * 4));
HXDLIN( 461)								{
HXLINE( 461)									int len18 = b74->length;
HXDLIN( 461)									int w9 = 0;
HXDLIN( 461)									{
HXLINE( 461)										int _g180 = 0;
HXDLIN( 461)										int _g181 = b74->height;
HXDLIN( 461)										while((_g180 < _g181)){
HXLINE( 461)											_g180 = (_g180 + 1);
HXDLIN( 461)											int y29 = (_g180 - 1);
HXDLIN( 461)											{
HXLINE( 461)												int _g182 = 0;
HXDLIN( 461)												int _g183 = b74->width;
HXDLIN( 461)												while((_g182 < _g183)){
HXLINE( 461)													_g182 = (_g182 + 1);
HXDLIN( 461)													int x29 = (_g182 - 1);
HXDLIN( 461)													{
HXLINE( 461)														w9 = (w9 + 1);
HXDLIN( 461)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 461)													{
HXLINE( 461)														w9 = (w9 + 1);
HXDLIN( 461)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 461)													{
HXLINE( 461)														w9 = (w9 + 1);
HXDLIN( 461)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 461)													{
HXLINE( 461)														w9 = (w9 + 1);
HXDLIN( 461)														b74->data->b[(w9 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 461)							undoImage28 = b74;
            						}
            						break;
            						case (int)1: {
HXLINE( 461)							 ::iterMagic::ArrIntImg arrI9 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 461)							 ::iterMagic::ArrIntImg a67 = arrI9;
HXDLIN( 461)							{
HXLINE( 461)								a67->width = width9;
HXDLIN( 461)								a67->height = height9;
HXDLIN( 461)								a67->data = ::Array_obj< int >::__new(0);
HXDLIN( 461)								a67->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 461)								{
HXLINE( 461)									int _g184 = 0;
HXDLIN( 461)									int _g185 = a67->length;
HXDLIN( 461)									while((_g184 < _g185)){
HXLINE( 461)										_g184 = (_g184 + 1);
HXDLIN( 461)										int i82 = (_g184 - 1);
HXDLIN( 461)										a67->data[i82] = 0;
            									}
            								}
            							}
HXDLIN( 461)							undoImage28 = a67;
            						}
            						break;
            						case (int)2: {
HXLINE( 461)							 ::iterMagic::U32ArrImg u32a9 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 461)							 ::iterMagic::U32ArrImg b75 = u32a9;
HXDLIN( 461)							{
HXLINE( 461)								b75->width = width9;
HXDLIN( 461)								b75->height = height9;
HXDLIN( 461)								b75->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 461)								int size9 = (b75->length * 4);
HXDLIN( 461)								b75->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size9),0,size9);
HXDLIN( 461)								{
HXLINE( 461)									int _g186 = 0;
HXDLIN( 461)									int _g187 = b75->length;
HXDLIN( 461)									while((_g186 < _g187)){
HXLINE( 461)										_g186 = (_g186 + 1);
HXDLIN( 461)										int i83 = (_g186 - 1);
HXDLIN( 461)										{
HXLINE( 461)											 ::haxe::io::ArrayBufferViewImpl this285 = b75->data;
HXDLIN( 461)											bool undoImage29;
HXDLIN( 461)											if ((i83 >= 0)) {
HXLINE( 461)												undoImage29 = (i83 < (this285->byteLength >> 2));
            											}
            											else {
HXLINE( 461)												undoImage29 = false;
            											}
HXDLIN( 461)											if (undoImage29) {
HXLINE( 461)												 ::haxe::io::Bytes _this9 = this285->bytes;
HXDLIN( 461)												int pos9 = ((i83 << 2) + this285->byteOffset);
HXDLIN( 461)												_this9->b[pos9] = ( (unsigned char)(0) );
HXDLIN( 461)												_this9->b[(pos9 + 1)] = ( (unsigned char)(0) );
HXDLIN( 461)												_this9->b[(pos9 + 2)] = ( (unsigned char)(0) );
HXDLIN( 461)												_this9->b[(pos9 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 461)							undoImage28 = b75;
            						}
            						break;
            						case (int)3: {
HXLINE( 461)							 ::iterMagic::VecIntImg vec9 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 461)							 ::iterMagic::VecIntImg v20 = vec9;
HXDLIN( 461)							{
HXLINE( 461)								v20->width = width9;
HXDLIN( 461)								v20->height = height9;
HXDLIN( 461)								v20->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 461)								v20->data = ::Array_obj< int >::__new(v20->length);
HXDLIN( 461)								{
HXLINE( 461)									int _g188 = 0;
HXDLIN( 461)									int _g189 = v20->length;
HXDLIN( 461)									while((_g188 < _g189)){
HXLINE( 461)										_g188 = (_g188 + 1);
HXDLIN( 461)										int i84 = (_g188 - 1);
HXDLIN( 461)										v20->data->__unsafe_set(i84,0);
            									}
            								}
            							}
HXDLIN( 461)							undoImage28 = v20;
            						}
            						break;
            						case (int)4: {
HXLINE( 461)							 ::iterMagic::StackIntImg sInt9 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 461)							 ::iterMagic::StackIntImg b76 = sInt9;
HXDLIN( 461)							{
HXLINE( 461)								b76->width = width9;
HXDLIN( 461)								b76->height = height9;
HXDLIN( 461)								b76->length = ::Std_obj::_hx_int(( (Float)((width9 * height9)) ));
HXDLIN( 461)								b76->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 461)								{
HXLINE( 461)									int len19 = b76->length;
HXDLIN( 461)									 ::haxe::ds::GenericStack_Int d9 = b76->data;
HXDLIN( 461)									if (::hx::IsNull( d9->head )) {
HXLINE( 461)										int _g190 = 0;
HXDLIN( 461)										int _g191 = len19;
HXDLIN( 461)										while((_g190 < _g191)){
HXLINE( 461)											_g190 = (_g190 + 1);
HXDLIN( 461)											int i85 = (_g190 - 1);
HXDLIN( 461)											d9->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d9->head);
            										}
            									}
            									else {
HXLINE( 461)										int _g192 = 0;
HXDLIN( 461)										int _g193 = len19;
HXDLIN( 461)										while((_g192 < _g193)){
HXLINE( 461)											_g192 = (_g192 + 1);
HXDLIN( 461)											int i86 = (_g192 - 1);
HXDLIN( 461)											{
HXLINE( 461)												 ::haxe::ds::GenericCell_Int l9 = b76->data->head;
HXDLIN( 461)												 ::haxe::ds::GenericCell_Int prev9 = null();
HXDLIN( 461)												{
HXLINE( 461)													int _g194 = 0;
HXDLIN( 461)													int _g195 = i86;
HXDLIN( 461)													while((_g194 < _g195)){
HXLINE( 461)														_g194 = (_g194 + 1);
HXDLIN( 461)														int i87 = (_g194 - 1);
HXLINE( 345)														prev9 = l9;
HXLINE( 346)														l9 = l9->next;
            													}
            												}
HXLINE( 461)												if (::hx::IsNull( prev9 )) {
HXLINE( 461)													b76->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN( 461)													l9 = null();
            												}
            												else {
HXLINE( 461)													prev9->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l9->next);
HXDLIN( 461)													l9 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 461)							undoImage28 = b76;
            						}
            						break;
            					}
HXDLIN( 461)					this284->image = undoImage28;
HXDLIN( 461)					this284->width = width9;
HXDLIN( 461)					this284->height = height9;
HXDLIN( 461)					this284->imageType = ( (int)(imageType9) );
HXDLIN( 461)					undoImage27 = this284;
HXDLIN( 461)					{
HXLINE( 461)						int rectLeft9 = xIter39->start;
HXDLIN( 461)						int rectTop9 = yIter39->start;
HXDLIN( 461)						int rectRight9 = xIter39->max;
HXDLIN( 461)						bool forceClear9 = false;
HXDLIN( 461)						{
HXLINE( 461)							int _g196 = rectTop9;
HXDLIN( 461)							int _g197 = yIter39->max;
HXDLIN( 461)							while((_g196 < _g197)){
HXLINE( 461)								_g196 = (_g196 + 1);
HXDLIN( 461)								int dy12 = (_g196 - 1);
HXDLIN( 461)								{
HXLINE( 461)									int _g198 = rectLeft9;
HXDLIN( 461)									int _g199 = rectRight9;
HXDLIN( 461)									while((_g198 < _g199)){
HXLINE( 461)										_g198 = (_g198 + 1);
HXDLIN( 461)										int dx12 = (_g198 - 1);
HXDLIN( 461)										::Dynamic this286 = pixelImage->image;
HXDLIN( 461)										int index38;
HXDLIN( 461)										if (pixelImage->useVirtualPos) {
HXLINE( 461)											index38 = ::Std_obj::_hx_int(((((( (Float)(dy12) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx12) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 461)											index38 = ::Std_obj::_hx_int(( (Float)(((dy12 * pixelImage->width) + dx12)) ));
            										}
HXDLIN( 461)										int c41 = ::iterMagic::Iimg_obj::get(this286,index38);
HXDLIN( 461)										int col9;
HXDLIN( 461)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)											col9 = ((((((c41 >> 24) & 255) << 24) | ((c41 & 255) << 16)) | (((c41 >> 8) & 255) << 8)) | ((c41 >> 16) & 255));
            										}
            										else {
HXLINE( 461)											col9 = c41;
            										}
HXDLIN( 461)										bool hitQuad73;
HXDLIN( 461)										if (pixelImage->useMask) {
HXLINE( 461)											hitQuad73 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 461)											hitQuad73 = false;
            										}
HXDLIN( 461)										if (hitQuad73) {
HXLINE( 461)											 ::pi_xy::ImageStruct this287 = pixelImage->mask;
HXDLIN( 461)											::Dynamic this288 = this287->image;
HXDLIN( 461)											int index39;
HXDLIN( 461)											if (this287->useVirtualPos) {
HXLINE( 461)												index39 = ::Std_obj::_hx_int(((((( (Float)(dy12) ) - this287->virtualY) * ( (Float)(this287->width) )) + dx12) - this287->virtualX));
            											}
            											else {
HXLINE( 461)												index39 = ::Std_obj::_hx_int(( (Float)(((dy12 * this287->width) + dx12)) ));
            											}
HXDLIN( 461)											int c42 = ::iterMagic::Iimg_obj::get(this288,index39);
HXDLIN( 461)											int v21;
HXDLIN( 461)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)												v21 = ((((((c42 >> 24) & 255) << 24) | ((c42 & 255) << 16)) | (((c42 >> 8) & 255) << 8)) | ((c42 >> 16) & 255));
            											}
            											else {
HXLINE( 461)												v21 = c42;
            											}
HXDLIN( 461)											int maskPixel9 = v21;
HXDLIN( 461)											int this289 = col9;
HXDLIN( 461)											if ((maskPixel9 == 0)) {
HXLINE( 461)												col9 = this289;
            											}
            											else {
HXLINE( 461)												Float m09;
HXDLIN( 461)												int this290 = ((maskPixel9 >> 24) & 255);
HXDLIN( 461)												if ((this290 == 0)) {
HXLINE( 461)													m09 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													m09 = (( (Float)(this290) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float m19;
HXDLIN( 461)												int this291 = ((maskPixel9 >> 16) & 255);
HXDLIN( 461)												if ((this291 == 0)) {
HXLINE( 461)													m19 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													m19 = (( (Float)(this291) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float m29;
HXDLIN( 461)												int this292 = ((maskPixel9 >> 8) & 255);
HXDLIN( 461)												if ((this292 == 0)) {
HXLINE( 461)													m29 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													m29 = (( (Float)(this292) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float m39;
HXDLIN( 461)												int this293 = (maskPixel9 & 255);
HXDLIN( 461)												if ((this293 == 0)) {
HXLINE( 461)													m39 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													m39 = (( (Float)(this293) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												int ch09 = ::Std_obj::_hx_int(((((Float)1.) - m09) * ( (Float)(((this289 >> 24) & 255)) )));
HXDLIN( 461)												int ch19 = ::Std_obj::_hx_int(((((Float)1.) - m19) * ( (Float)(((this289 >> 16) & 255)) )));
HXDLIN( 461)												int ch29 = ::Std_obj::_hx_int(((((Float)1.) - m29) * ( (Float)(((this289 >> 8) & 255)) )));
HXDLIN( 461)												int ch39 = ::Std_obj::_hx_int(((((Float)1.) - m39) * ( (Float)((this289 & 255)) )));
HXDLIN( 461)												col9 = ((((::Math_obj::round((( (Float)(ch09) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch19) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch29) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch39) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 461)										if ((col9 != 0)) {
HXLINE( 461)											int x30 = (dx12 - rectLeft9);
HXDLIN( 461)											int y30 = (dy12 - rectTop9);
HXDLIN( 461)											int c43 = col9;
HXDLIN( 461)											bool hitQuad74;
HXDLIN( 461)											if ((((c43 >> 24) & 255) < 254)) {
HXLINE( 461)												hitQuad74 = undoImage27->transparent;
            											}
            											else {
HXLINE( 461)												hitQuad74 = false;
            											}
HXDLIN( 461)											if (hitQuad74) {
HXLINE( 461)												int location18;
HXDLIN( 461)												if (undoImage27->useVirtualPos) {
HXLINE( 461)													location18 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x30) - undoImage27->virtualX));
            												}
            												else {
HXLINE( 461)													location18 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage27->width) + x30)) ));
            												}
HXDLIN( 461)												int this294 = ::iterMagic::Iimg_obj::get(undoImage27->image,location18);
HXDLIN( 461)												int this295;
HXDLIN( 461)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)													this295 = ((((((this294 >> 24) & 255) << 24) | ((this294 & 255) << 16)) | (((this294 >> 8) & 255) << 8)) | ((this294 >> 16) & 255));
            												}
            												else {
HXLINE( 461)													this295 = this294;
            												}
HXDLIN( 461)												Float a123;
HXDLIN( 461)												int this296 = ((this295 >> 24) & 255);
HXDLIN( 461)												if ((this296 == 0)) {
HXLINE( 461)													a123 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													a123 = (( (Float)(this296) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float r120;
HXDLIN( 461)												int this297 = ((this295 >> 16) & 255);
HXDLIN( 461)												if ((this297 == 0)) {
HXLINE( 461)													r120 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													r120 = (( (Float)(this297) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float g120;
HXDLIN( 461)												int this298 = ((this295 >> 8) & 255);
HXDLIN( 461)												if ((this298 == 0)) {
HXLINE( 461)													g120 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													g120 = (( (Float)(this298) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float b124;
HXDLIN( 461)												int this299 = (this295 & 255);
HXDLIN( 461)												if ((this299 == 0)) {
HXLINE( 461)													b124 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													b124 = (( (Float)(this299) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float a221;
HXDLIN( 461)												int this300 = ((col9 >> 24) & 255);
HXDLIN( 461)												if ((this300 == 0)) {
HXLINE( 461)													a221 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													a221 = (( (Float)(this300) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float r219;
HXDLIN( 461)												int this301 = ((col9 >> 16) & 255);
HXDLIN( 461)												if ((this301 == 0)) {
HXLINE( 461)													r219 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													r219 = (( (Float)(this301) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float g219;
HXDLIN( 461)												int this302 = ((col9 >> 8) & 255);
HXDLIN( 461)												if ((this302 == 0)) {
HXLINE( 461)													g219 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													g219 = (( (Float)(this302) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float b222;
HXDLIN( 461)												int this303 = (col9 & 255);
HXDLIN( 461)												if ((this303 == 0)) {
HXLINE( 461)													b222 = ((Float)0.);
            												}
            												else {
HXLINE( 461)													b222 = (( (Float)(this303) ) / ( (Float)(255) ));
            												}
HXDLIN( 461)												Float a320 = (a123 * (( (Float)(1) ) - a221));
HXDLIN( 461)												int r42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r120 * a320) + (r219 * a221))));
HXDLIN( 461)												int g42 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g120 * a320) + (g219 * a221))));
HXDLIN( 461)												int b77 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b124 * a320) + (b222 * a221))));
HXDLIN( 461)												int a68 = ::Std_obj::_hx_int((( (Float)(255) ) * (a320 + a221)));
HXDLIN( 461)												int blended18 = ((((a68 << 24) | (r42 << 16)) | (g42 << 8)) | b77);
HXDLIN( 461)												{
HXLINE( 461)													int hitQuad75;
HXDLIN( 461)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)														hitQuad75 = ((((((blended18 >> 24) & 255) << 24) | ((blended18 & 255) << 16)) | (((blended18 >> 8) & 255) << 8)) | ((blended18 >> 16) & 255));
            													}
            													else {
HXLINE( 461)														hitQuad75 = blended18;
            													}
HXDLIN( 461)													::iterMagic::Iimg_obj::set(undoImage27->image,location18,hitQuad75);
            												}
            											}
            											else {
HXLINE( 461)												::Dynamic this304 = undoImage27->image;
HXDLIN( 461)												int index40;
HXDLIN( 461)												if (undoImage27->useVirtualPos) {
HXLINE( 461)													index40 = ::Std_obj::_hx_int(((((( (Float)(y30) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x30) - undoImage27->virtualX));
            												}
            												else {
HXLINE( 461)													index40 = ::Std_obj::_hx_int(( (Float)(((y30 * undoImage27->width) + x30)) ));
            												}
HXDLIN( 461)												int hitQuad76;
HXDLIN( 461)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)													hitQuad76 = ((((((c43 >> 24) & 255) << 24) | ((c43 & 255) << 16)) | (((c43 >> 8) & 255) << 8)) | ((c43 >> 16) & 255));
            												}
            												else {
HXLINE( 461)													hitQuad76 = c43;
            												}
HXDLIN( 461)												::iterMagic::Iimg_obj::set(this304,index40,hitQuad76);
            											}
            										}
            										else {
HXLINE( 461)											if (forceClear9) {
HXLINE( 461)												::Dynamic this305 = undoImage27->image;
HXDLIN( 461)												int x31 = (dx12 - rectLeft9);
HXDLIN( 461)												int y31 = (dy12 - rectTop9);
HXDLIN( 461)												int index41;
HXDLIN( 461)												if (undoImage27->useVirtualPos) {
HXLINE( 461)													index41 = ::Std_obj::_hx_int(((((( (Float)(y31) ) - undoImage27->virtualY) * ( (Float)(undoImage27->width) )) + x31) - undoImage27->virtualX));
            												}
            												else {
HXLINE( 461)													index41 = ::Std_obj::_hx_int(( (Float)(((y31 * undoImage27->width) + x31)) ));
            												}
HXDLIN( 461)												::iterMagic::Iimg_obj::set(this305,index41,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 461)				bool found9 = false;
HXDLIN( 461)				Float min65 = ( (Float)(0) );
HXDLIN( 461)				Float max1 = ( (Float)(0) );
HXDLIN( 461)				int a69 = 0;
HXDLIN( 461)				int r43 = 0;
HXDLIN( 461)				int g43 = 0;
HXDLIN( 461)				int b78 = 0;
HXDLIN( 461)				{
HXLINE( 461)					int _g_min18 = xIter39->start;
HXDLIN( 461)					int _g_max18 = xIter39->max;
HXDLIN( 461)					while((_g_min18 < _g_max18)){
HXLINE( 461)						_g_min18 = (_g_min18 + 1);
HXDLIN( 461)						int px8 = (_g_min18 - 1);
HXDLIN( 461)						Float pcx7 = (( (Float)(px8) ) - dx10);
HXLINE( 695)						found9 = false;
HXLINE( 461)						{
HXLINE( 461)							int _g_min19 = yIter39->start;
HXDLIN( 461)							int _g_max19 = yIter39->max;
HXDLIN( 461)							while((_g_min19 < _g_max19)){
HXLINE( 461)								_g_min19 = (_g_min19 + 1);
HXDLIN( 461)								int py8 = (_g_min19 - 1);
HXDLIN( 461)								Float pcy7 = (( (Float)(py8) ) - dy10);
HXDLIN( 461)								Float dot317 = ((pcx7 * bcx7) + (pcy7 * bcy7));
HXDLIN( 461)								Float dot327 = ((pcx7 * acx7) + (pcy7 * acy7));
HXDLIN( 461)								Float ratioA7 = (((dot227 * dot317) - (dot127 * dot327)) * denom17);
HXDLIN( 461)								Float ratioB7 = (((dot117 * dot327) - (dot127 * dot317)) * denom17);
HXDLIN( 461)								Float ratioC7 = ((((Float)1.0) - ratioB7) - ratioA7);
HXDLIN( 461)								bool hitQuad77;
HXDLIN( 461)								bool hitQuad78;
HXDLIN( 461)								if ((ratioA7 >= 0)) {
HXLINE( 461)									hitQuad78 = (ratioB7 >= 0);
            								}
            								else {
HXLINE( 461)									hitQuad78 = false;
            								}
HXDLIN( 461)								if (hitQuad78) {
HXLINE( 461)									hitQuad77 = (ratioC7 >= 0);
            								}
            								else {
HXLINE( 461)									hitQuad77 = false;
            								}
HXDLIN( 461)								if (hitQuad77) {
HXLINE( 712)									min65 = ratioB7;
HXLINE( 461)									int i88 = ::Std_obj::_hx_int(((( (Float)(aA7) ) * soft) * min65));
HXDLIN( 461)									if ((i88 > 255)) {
HXLINE(  24)										i88 = 255;
            									}
HXLINE( 461)									if ((i88 < 0)) {
HXLINE(  25)										i88 = 0;
            									}
HXLINE( 461)									a69 = i88;
HXDLIN( 461)									int i89 = ::Std_obj::_hx_int(( (Float)(rA7) ));
HXDLIN( 461)									if ((i89 > 255)) {
HXLINE(  24)										i89 = 255;
            									}
HXLINE( 461)									if ((i89 < 0)) {
HXLINE(  25)										i89 = 0;
            									}
HXLINE( 747)									r43 = i89;
HXLINE( 461)									int i90 = ::Std_obj::_hx_int(( (Float)(gA7) ));
HXDLIN( 461)									if ((i90 > 255)) {
HXLINE(  24)										i90 = 255;
            									}
HXLINE( 461)									if ((i90 < 0)) {
HXLINE(  25)										i90 = 0;
            									}
HXLINE( 748)									g43 = i90;
HXLINE( 461)									int i91 = ::Std_obj::_hx_int(( (Float)(bA7) ));
HXDLIN( 461)									if ((i91 > 255)) {
HXLINE(  24)										i91 = 255;
            									}
HXLINE( 461)									if ((i91 < 0)) {
HXLINE(  25)										i91 = 0;
            									}
HXLINE( 749)									b78 = i91;
HXLINE( 461)									{
HXLINE( 461)										int location19;
HXDLIN( 461)										if (pixelImage->useVirtualPos) {
HXLINE( 461)											location19 = ::Std_obj::_hx_int(((((( (Float)(py8) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px8) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 461)											location19 = ::Std_obj::_hx_int(( (Float)(((py8 * pixelImage->width) + px8)) ));
            										}
HXDLIN( 461)										bool hitQuad79;
HXDLIN( 461)										if (pixelImage->transparent) {
HXLINE( 461)											hitQuad79 = (a69 < 254);
            										}
            										else {
HXLINE( 461)											hitQuad79 = false;
            										}
HXDLIN( 461)										if (hitQuad79) {
HXLINE( 461)											int this306 = ::iterMagic::Iimg_obj::get(pixelImage->image,location19);
HXDLIN( 461)											int old7;
HXDLIN( 461)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)												old7 = ((((((this306 >> 24) & 255) << 24) | ((this306 & 255) << 16)) | (((this306 >> 8) & 255) << 8)) | ((this306 >> 16) & 255));
            											}
            											else {
HXLINE( 461)												old7 = this306;
            											}
HXDLIN( 461)											int rhs7 = ((((a69 << 24) | (r43 << 16)) | (g43 << 8)) | b78);
HXDLIN( 461)											Float a124;
HXDLIN( 461)											int this307 = ((old7 >> 24) & 255);
HXDLIN( 461)											if ((this307 == 0)) {
HXLINE( 461)												a124 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												a124 = (( (Float)(this307) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float r121;
HXDLIN( 461)											int this308 = ((old7 >> 16) & 255);
HXDLIN( 461)											if ((this308 == 0)) {
HXLINE( 461)												r121 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												r121 = (( (Float)(this308) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float g121;
HXDLIN( 461)											int this309 = ((old7 >> 8) & 255);
HXDLIN( 461)											if ((this309 == 0)) {
HXLINE( 461)												g121 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												g121 = (( (Float)(this309) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float b125;
HXDLIN( 461)											int this310 = (old7 & 255);
HXDLIN( 461)											if ((this310 == 0)) {
HXLINE( 461)												b125 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												b125 = (( (Float)(this310) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float a222;
HXDLIN( 461)											int this311 = ((rhs7 >> 24) & 255);
HXDLIN( 461)											if ((this311 == 0)) {
HXLINE( 461)												a222 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												a222 = (( (Float)(this311) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float r220;
HXDLIN( 461)											int this312 = ((rhs7 >> 16) & 255);
HXDLIN( 461)											if ((this312 == 0)) {
HXLINE( 461)												r220 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												r220 = (( (Float)(this312) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float g220;
HXDLIN( 461)											int this313 = ((rhs7 >> 8) & 255);
HXDLIN( 461)											if ((this313 == 0)) {
HXLINE( 461)												g220 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												g220 = (( (Float)(this313) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float b223;
HXDLIN( 461)											int this314 = (rhs7 & 255);
HXDLIN( 461)											if ((this314 == 0)) {
HXLINE( 461)												b223 = ((Float)0.);
            											}
            											else {
HXLINE( 461)												b223 = (( (Float)(this314) ) / ( (Float)(255) ));
            											}
HXDLIN( 461)											Float a321 = (a124 * (( (Float)(1) ) - a222));
HXDLIN( 461)											int r44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r121 * a321) + (r220 * a222))));
HXDLIN( 461)											int g44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g121 * a321) + (g220 * a222))));
HXDLIN( 461)											int b79 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b125 * a321) + (b223 * a222))));
HXDLIN( 461)											int a70 = ::Std_obj::_hx_int((( (Float)(255) ) * (a321 + a222)));
HXDLIN( 461)											int blended19 = ((((a70 << 24) | (r44 << 16)) | (g44 << 8)) | b79);
HXDLIN( 461)											{
HXLINE( 461)												int hitQuad80;
HXDLIN( 461)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 461)													hitQuad80 = ((((((blended19 >> 24) & 255) << 24) | ((blended19 & 255) << 16)) | (((blended19 >> 8) & 255) << 8)) | ((blended19 >> 16) & 255));
            												}
            												else {
HXLINE( 461)													hitQuad80 = blended19;
            												}
HXDLIN( 461)												::iterMagic::Iimg_obj::set(pixelImage->image,location19,hitQuad80);
            											}
            										}
            										else {
HXLINE( 461)											int value7;
HXDLIN( 461)											if (pixelImage->isLittle) {
HXLINE( 461)												value7 = ((((a69 << 24) | (b78 << 16)) | (g43 << 8)) | r43);
            											}
            											else {
HXLINE( 461)												value7 = ((((a69 << 24) | (r43 << 16)) | (g43 << 8)) | b78);
            											}
HXDLIN( 461)											::iterMagic::Iimg_obj::set(pixelImage->image,location19,value7);
            										}
            									}
HXLINE( 751)									found9 = true;
            								}
            								else {
HXLINE( 461)									if (found9) {
HXLINE( 461)										goto _hx_goto_654;
            									}
            								}
            							}
            							_hx_goto_654:;
            						}
            					}
            				}
            			}
HXDLIN( 461)			 ::pi_xy::algo::HitQuad v22 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax8,ay8,bx10,by10,cx10,cy10,dx10,dy10,true);
HXLINE( 454)			hitQuad = v22;
            		}
HXLINE( 463)		Float cx11 = h2;
HXLINE( 464)		Float cy11 = radius2;
HXLINE( 465)		Float bx11 = h2;
HXLINE( 466)		Float by11 = -(radius2);
HXLINE( 467)		Float temp3 = ((Float)0.);
HXLINE( 468)		temp3 = (px + ((bx11 * cos) - (by11 * sin)));
HXLINE( 469)		by11 = (py + ((by11 * cos) + (bx11 * sin)));
HXLINE( 470)		bx11 = temp3;
HXLINE( 471)		temp3 = (px + ((cx11 * cos) - (cy11 * sin)));
HXLINE( 472)		cy11 = (py + ((cy11 * cos) + (cx11 * sin)));
HXLINE( 473)		cx11 = temp3;
HXLINE( 474)		bool hasUndo10 = true;
HXDLIN( 474)		int aA8 = ((color >> 24) & 255);
HXDLIN( 474)		int rA8 = ((color >> 16) & 255);
HXDLIN( 474)		int gA8 = ((color >> 8) & 255);
HXDLIN( 474)		int bA8 = (color & 255);
HXDLIN( 474)		Float bcx8 = (bx11 - cx11);
HXDLIN( 474)		Float bcy8 = (by11 - cy11);
HXDLIN( 474)		Float acx8 = (qx - cx11);
HXDLIN( 474)		Float acy8 = (qy - cy11);
HXDLIN( 474)		Float dot118 = ((bcx8 * bcx8) + (bcy8 * bcy8));
HXDLIN( 474)		Float dot128 = ((bcx8 * acx8) + (bcy8 * acy8));
HXDLIN( 474)		Float dot228 = ((acx8 * acx8) + (acy8 * acy8));
HXDLIN( 474)		Float denom18 = (( (Float)(1) ) / ((dot118 * dot228) - (dot128 * dot128)));
HXDLIN( 474)		 ::pi_xy::iter::IntIterStart xIter310;
HXDLIN( 474)		if ((qx > bx11)) {
HXLINE( 474)			if ((qx > cx11)) {
HXLINE( 474)				int min66;
HXDLIN( 474)				if ((bx11 > cx11)) {
HXLINE( 474)					min66 = ::Math_obj::floor(cx11);
            				}
            				else {
HXLINE( 474)					min66 = ::Math_obj::floor(bx11);
            				}
HXDLIN( 474)				int ii_min128 = min66;
HXDLIN( 474)				int ii_max128 = ::Math_obj::ceil(qx);
HXDLIN( 474)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min128,ii_max128);
            			}
            			else {
HXLINE( 474)				int ii_min129 = ::Math_obj::floor(bx11);
HXDLIN( 474)				int ii_max129 = ::Math_obj::ceil(cx11);
HXDLIN( 474)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min129,ii_max129);
            			}
            		}
            		else {
HXLINE( 474)			if ((bx11 > cx11)) {
HXLINE( 474)				int min67;
HXDLIN( 474)				if ((qx > cx11)) {
HXLINE( 474)					min67 = ::Math_obj::floor(cx11);
            				}
            				else {
HXLINE( 474)					min67 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 474)				int ii_min130 = min67;
HXDLIN( 474)				int ii_max130 = ::Math_obj::ceil(bx11);
HXDLIN( 474)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min130,ii_max130);
            			}
            			else {
HXLINE( 474)				int ii_min131 = ::Math_obj::floor(qx);
HXDLIN( 474)				int ii_max131 = ::Math_obj::ceil(cx11);
HXDLIN( 474)				xIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min131,ii_max131);
            			}
            		}
HXDLIN( 474)		 ::pi_xy::iter::IntIterStart yIter310;
HXDLIN( 474)		if ((qy > by11)) {
HXLINE( 474)			if ((qy > cy11)) {
HXLINE( 474)				int min68;
HXDLIN( 474)				if ((by11 > cy11)) {
HXLINE( 474)					min68 = ::Math_obj::floor(cy11);
            				}
            				else {
HXLINE( 474)					min68 = ::Math_obj::floor(by11);
            				}
HXDLIN( 474)				int ii_min132 = min68;
HXDLIN( 474)				int ii_max132 = ::Math_obj::ceil(qy);
HXDLIN( 474)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min132,ii_max132);
            			}
            			else {
HXLINE( 474)				int ii_min133 = ::Math_obj::floor(by11);
HXDLIN( 474)				int ii_max133 = ::Math_obj::ceil(cy11);
HXDLIN( 474)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min133,ii_max133);
            			}
            		}
            		else {
HXLINE( 474)			if ((by11 > cy11)) {
HXLINE( 474)				int min69;
HXDLIN( 474)				if ((qy > cy11)) {
HXLINE( 474)					min69 = ::Math_obj::floor(cy11);
            				}
            				else {
HXLINE( 474)					min69 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 474)				int ii_min134 = min69;
HXDLIN( 474)				int ii_max134 = ::Math_obj::ceil(by11);
HXDLIN( 474)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min134,ii_max134);
            			}
            			else {
HXLINE( 474)				int ii_min135 = ::Math_obj::floor(qy);
HXDLIN( 474)				int ii_max135 = ::Math_obj::ceil(cy11);
HXDLIN( 474)				yIter310 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min135,ii_max135);
            			}
            		}
HXDLIN( 474)		 ::pi_xy::ImageStruct undoImage30 = null();
HXDLIN( 474)		if (hasUndo10) {
HXLINE( 474)			int width10 = ((xIter310->max - xIter310->start) + 1);
HXDLIN( 474)			int height10 = ((yIter310->max - yIter310->start) + 1);
HXDLIN( 474)			 ::Dynamic imageType10 = null();
HXDLIN( 474)			 ::pi_xy::ImageStruct this315 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 474)			if (::hx::IsNull( imageType10 )) {
HXLINE(  54)				imageType10 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 474)			::Dynamic undoImage31;
HXDLIN( 474)			switch((int)(( (int)(imageType10) ))){
            				case (int)0: {
HXLINE( 474)					 ::iterMagic::BytesImg byt10 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 474)					 ::iterMagic::BytesImg b80 = byt10;
HXDLIN( 474)					{
HXLINE( 474)						b80->width = width10;
HXDLIN( 474)						b80->height = height10;
HXDLIN( 474)						b80->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 474)						b80->data = ::haxe::io::Bytes_obj::alloc((b80->length * 4));
HXDLIN( 474)						{
HXLINE( 474)							int len20 = b80->length;
HXDLIN( 474)							int w10 = 0;
HXDLIN( 474)							{
HXLINE( 474)								int _g200 = 0;
HXDLIN( 474)								int _g201 = b80->height;
HXDLIN( 474)								while((_g200 < _g201)){
HXLINE( 474)									_g200 = (_g200 + 1);
HXDLIN( 474)									int y32 = (_g200 - 1);
HXDLIN( 474)									{
HXLINE( 474)										int _g202 = 0;
HXDLIN( 474)										int _g203 = b80->width;
HXDLIN( 474)										while((_g202 < _g203)){
HXLINE( 474)											_g202 = (_g202 + 1);
HXDLIN( 474)											int x32 = (_g202 - 1);
HXDLIN( 474)											{
HXLINE( 474)												w10 = (w10 + 1);
HXDLIN( 474)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 474)											{
HXLINE( 474)												w10 = (w10 + 1);
HXDLIN( 474)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 474)											{
HXLINE( 474)												w10 = (w10 + 1);
HXDLIN( 474)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 474)											{
HXLINE( 474)												w10 = (w10 + 1);
HXDLIN( 474)												b80->data->b[(w10 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 474)					undoImage31 = b80;
            				}
            				break;
            				case (int)1: {
HXLINE( 474)					 ::iterMagic::ArrIntImg arrI10 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 474)					 ::iterMagic::ArrIntImg a71 = arrI10;
HXDLIN( 474)					{
HXLINE( 474)						a71->width = width10;
HXDLIN( 474)						a71->height = height10;
HXDLIN( 474)						a71->data = ::Array_obj< int >::__new(0);
HXDLIN( 474)						a71->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 474)						{
HXLINE( 474)							int _g204 = 0;
HXDLIN( 474)							int _g205 = a71->length;
HXDLIN( 474)							while((_g204 < _g205)){
HXLINE( 474)								_g204 = (_g204 + 1);
HXDLIN( 474)								int i92 = (_g204 - 1);
HXDLIN( 474)								a71->data[i92] = 0;
            							}
            						}
            					}
HXDLIN( 474)					undoImage31 = a71;
            				}
            				break;
            				case (int)2: {
HXLINE( 474)					 ::iterMagic::U32ArrImg u32a10 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 474)					 ::iterMagic::U32ArrImg b81 = u32a10;
HXDLIN( 474)					{
HXLINE( 474)						b81->width = width10;
HXDLIN( 474)						b81->height = height10;
HXDLIN( 474)						b81->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 474)						int size10 = (b81->length * 4);
HXDLIN( 474)						b81->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size10),0,size10);
HXDLIN( 474)						{
HXLINE( 474)							int _g206 = 0;
HXDLIN( 474)							int _g207 = b81->length;
HXDLIN( 474)							while((_g206 < _g207)){
HXLINE( 474)								_g206 = (_g206 + 1);
HXDLIN( 474)								int i93 = (_g206 - 1);
HXDLIN( 474)								{
HXLINE( 474)									 ::haxe::io::ArrayBufferViewImpl this316 = b81->data;
HXDLIN( 474)									bool undoImage32;
HXDLIN( 474)									if ((i93 >= 0)) {
HXLINE( 474)										undoImage32 = (i93 < (this316->byteLength >> 2));
            									}
            									else {
HXLINE( 474)										undoImage32 = false;
            									}
HXDLIN( 474)									if (undoImage32) {
HXLINE( 474)										 ::haxe::io::Bytes _this10 = this316->bytes;
HXDLIN( 474)										int pos10 = ((i93 << 2) + this316->byteOffset);
HXDLIN( 474)										_this10->b[pos10] = ( (unsigned char)(0) );
HXDLIN( 474)										_this10->b[(pos10 + 1)] = ( (unsigned char)(0) );
HXDLIN( 474)										_this10->b[(pos10 + 2)] = ( (unsigned char)(0) );
HXDLIN( 474)										_this10->b[(pos10 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 474)					undoImage31 = b81;
            				}
            				break;
            				case (int)3: {
HXLINE( 474)					 ::iterMagic::VecIntImg vec10 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 474)					 ::iterMagic::VecIntImg v23 = vec10;
HXDLIN( 474)					{
HXLINE( 474)						v23->width = width10;
HXDLIN( 474)						v23->height = height10;
HXDLIN( 474)						v23->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 474)						v23->data = ::Array_obj< int >::__new(v23->length);
HXDLIN( 474)						{
HXLINE( 474)							int _g208 = 0;
HXDLIN( 474)							int _g209 = v23->length;
HXDLIN( 474)							while((_g208 < _g209)){
HXLINE( 474)								_g208 = (_g208 + 1);
HXDLIN( 474)								int i94 = (_g208 - 1);
HXDLIN( 474)								v23->data->__unsafe_set(i94,0);
            							}
            						}
            					}
HXDLIN( 474)					undoImage31 = v23;
            				}
            				break;
            				case (int)4: {
HXLINE( 474)					 ::iterMagic::StackIntImg sInt10 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 474)					 ::iterMagic::StackIntImg b82 = sInt10;
HXDLIN( 474)					{
HXLINE( 474)						b82->width = width10;
HXDLIN( 474)						b82->height = height10;
HXDLIN( 474)						b82->length = ::Std_obj::_hx_int(( (Float)((width10 * height10)) ));
HXDLIN( 474)						b82->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 474)						{
HXLINE( 474)							int len21 = b82->length;
HXDLIN( 474)							 ::haxe::ds::GenericStack_Int d10 = b82->data;
HXDLIN( 474)							if (::hx::IsNull( d10->head )) {
HXLINE( 474)								int _g210 = 0;
HXDLIN( 474)								int _g211 = len21;
HXDLIN( 474)								while((_g210 < _g211)){
HXLINE( 474)									_g210 = (_g210 + 1);
HXDLIN( 474)									int i95 = (_g210 - 1);
HXDLIN( 474)									d10->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d10->head);
            								}
            							}
            							else {
HXLINE( 474)								int _g212 = 0;
HXDLIN( 474)								int _g213 = len21;
HXDLIN( 474)								while((_g212 < _g213)){
HXLINE( 474)									_g212 = (_g212 + 1);
HXDLIN( 474)									int i96 = (_g212 - 1);
HXDLIN( 474)									{
HXLINE( 474)										 ::haxe::ds::GenericCell_Int l10 = b82->data->head;
HXDLIN( 474)										 ::haxe::ds::GenericCell_Int prev10 = null();
HXDLIN( 474)										{
HXLINE( 474)											int _g214 = 0;
HXDLIN( 474)											int _g215 = i96;
HXDLIN( 474)											while((_g214 < _g215)){
HXLINE( 474)												_g214 = (_g214 + 1);
HXDLIN( 474)												int i97 = (_g214 - 1);
HXLINE( 345)												prev10 = l10;
HXLINE( 346)												l10 = l10->next;
            											}
            										}
HXLINE( 474)										if (::hx::IsNull( prev10 )) {
HXLINE( 474)											b82->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l10->next);
HXDLIN( 474)											l10 = null();
            										}
            										else {
HXLINE( 474)											prev10->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l10->next);
HXDLIN( 474)											l10 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 474)					undoImage31 = b82;
            				}
            				break;
            			}
HXDLIN( 474)			this315->image = undoImage31;
HXDLIN( 474)			this315->width = width10;
HXDLIN( 474)			this315->height = height10;
HXDLIN( 474)			this315->imageType = ( (int)(imageType10) );
HXDLIN( 474)			undoImage30 = this315;
HXDLIN( 474)			{
HXLINE( 474)				int rectLeft10 = xIter310->start;
HXDLIN( 474)				int rectTop10 = yIter310->start;
HXDLIN( 474)				int rectRight10 = xIter310->max;
HXDLIN( 474)				bool forceClear10 = false;
HXDLIN( 474)				{
HXLINE( 474)					int _g216 = rectTop10;
HXDLIN( 474)					int _g217 = yIter310->max;
HXDLIN( 474)					while((_g216 < _g217)){
HXLINE( 474)						_g216 = (_g216 + 1);
HXDLIN( 474)						int dy13 = (_g216 - 1);
HXDLIN( 474)						{
HXLINE( 474)							int _g218 = rectLeft10;
HXDLIN( 474)							int _g219 = rectRight10;
HXDLIN( 474)							while((_g218 < _g219)){
HXLINE( 474)								_g218 = (_g218 + 1);
HXDLIN( 474)								int dx13 = (_g218 - 1);
HXDLIN( 474)								::Dynamic this317 = pixelImage->image;
HXDLIN( 474)								int index42;
HXDLIN( 474)								if (pixelImage->useVirtualPos) {
HXLINE( 474)									index42 = ::Std_obj::_hx_int(((((( (Float)(dy13) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx13) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 474)									index42 = ::Std_obj::_hx_int(( (Float)(((dy13 * pixelImage->width) + dx13)) ));
            								}
HXDLIN( 474)								int c44 = ::iterMagic::Iimg_obj::get(this317,index42);
HXDLIN( 474)								int col10;
HXDLIN( 474)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 474)									col10 = ((((((c44 >> 24) & 255) << 24) | ((c44 & 255) << 16)) | (((c44 >> 8) & 255) << 8)) | ((c44 >> 16) & 255));
            								}
            								else {
HXLINE( 474)									col10 = c44;
            								}
HXDLIN( 474)								bool _hx_tmp;
HXDLIN( 474)								if (pixelImage->useMask) {
HXLINE( 474)									_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 474)									_hx_tmp = false;
            								}
HXDLIN( 474)								if (_hx_tmp) {
HXLINE( 474)									 ::pi_xy::ImageStruct this318 = pixelImage->mask;
HXDLIN( 474)									::Dynamic this319 = this318->image;
HXDLIN( 474)									int index43;
HXDLIN( 474)									if (this318->useVirtualPos) {
HXLINE( 474)										index43 = ::Std_obj::_hx_int(((((( (Float)(dy13) ) - this318->virtualY) * ( (Float)(this318->width) )) + dx13) - this318->virtualX));
            									}
            									else {
HXLINE( 474)										index43 = ::Std_obj::_hx_int(( (Float)(((dy13 * this318->width) + dx13)) ));
            									}
HXDLIN( 474)									int c45 = ::iterMagic::Iimg_obj::get(this319,index43);
HXDLIN( 474)									int v24;
HXDLIN( 474)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 474)										v24 = ((((((c45 >> 24) & 255) << 24) | ((c45 & 255) << 16)) | (((c45 >> 8) & 255) << 8)) | ((c45 >> 16) & 255));
            									}
            									else {
HXLINE( 474)										v24 = c45;
            									}
HXDLIN( 474)									int maskPixel10 = v24;
HXDLIN( 474)									int this320 = col10;
HXDLIN( 474)									if ((maskPixel10 == 0)) {
HXLINE( 474)										col10 = this320;
            									}
            									else {
HXLINE( 474)										Float m010;
HXDLIN( 474)										int this321 = ((maskPixel10 >> 24) & 255);
HXDLIN( 474)										if ((this321 == 0)) {
HXLINE( 474)											m010 = ((Float)0.);
            										}
            										else {
HXLINE( 474)											m010 = (( (Float)(this321) ) / ( (Float)(255) ));
            										}
HXDLIN( 474)										Float m110;
HXDLIN( 474)										int this322 = ((maskPixel10 >> 16) & 255);
HXDLIN( 474)										if ((this322 == 0)) {
HXLINE( 474)											m110 = ((Float)0.);
            										}
            										else {
HXLINE( 474)											m110 = (( (Float)(this322) ) / ( (Float)(255) ));
            										}
HXDLIN( 474)										Float m210;
HXDLIN( 474)										int this323 = ((maskPixel10 >> 8) & 255);
HXDLIN( 474)										if ((this323 == 0)) {
HXLINE( 474)											m210 = ((Float)0.);
            										}
            										else {
HXLINE( 474)											m210 = (( (Float)(this323) ) / ( (Float)(255) ));
            										}
HXDLIN( 474)										Float m310;
HXDLIN( 474)										int this324 = (maskPixel10 & 255);
HXDLIN( 474)										if ((this324 == 0)) {
HXLINE( 474)											m310 = ((Float)0.);
            										}
            										else {
HXLINE( 474)											m310 = (( (Float)(this324) ) / ( (Float)(255) ));
            										}
HXDLIN( 474)										int ch010 = ::Std_obj::_hx_int(((((Float)1.) - m010) * ( (Float)(((this320 >> 24) & 255)) )));
HXDLIN( 474)										int ch110 = ::Std_obj::_hx_int(((((Float)1.) - m110) * ( (Float)(((this320 >> 16) & 255)) )));
HXDLIN( 474)										int ch210 = ::Std_obj::_hx_int(((((Float)1.) - m210) * ( (Float)(((this320 >> 8) & 255)) )));
HXDLIN( 474)										int ch310 = ::Std_obj::_hx_int(((((Float)1.) - m310) * ( (Float)((this320 & 255)) )));
HXDLIN( 474)										col10 = ((((::Math_obj::round((( (Float)(ch010) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch110) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch210) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch310) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 474)								if ((col10 != 0)) {
HXLINE( 474)									int x33 = (dx13 - rectLeft10);
HXDLIN( 474)									int y33 = (dy13 - rectTop10);
HXDLIN( 474)									int c46 = col10;
HXDLIN( 474)									bool _hx_tmp1;
HXDLIN( 474)									if ((((c46 >> 24) & 255) < 254)) {
HXLINE( 474)										_hx_tmp1 = undoImage30->transparent;
            									}
            									else {
HXLINE( 474)										_hx_tmp1 = false;
            									}
HXDLIN( 474)									if (_hx_tmp1) {
HXLINE( 474)										int location20;
HXDLIN( 474)										if (undoImage30->useVirtualPos) {
HXLINE( 474)											location20 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x33) - undoImage30->virtualX));
            										}
            										else {
HXLINE( 474)											location20 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage30->width) + x33)) ));
            										}
HXDLIN( 474)										int this325 = ::iterMagic::Iimg_obj::get(undoImage30->image,location20);
HXDLIN( 474)										int this326;
HXDLIN( 474)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 474)											this326 = ((((((this325 >> 24) & 255) << 24) | ((this325 & 255) << 16)) | (((this325 >> 8) & 255) << 8)) | ((this325 >> 16) & 255));
            										}
            										else {
HXLINE( 474)											this326 = this325;
            										}
HXDLIN( 474)										Float a125;
HXDLIN( 474)										int this327 = ((this326 >> 24) & 255);
HXDLIN( 474)										if ((this327 == 0)) {
HXLINE( 474)											a125 = ((Float)0.);
            										}
            										else {
HXLINE( 474)											a125 = (( (Float)(this327) ) / ( (Float)(255) ));
            										}
HXDLIN( 474)										Float r122;
HXDLIN( 474)										int this328 = ((this326 >> 16) & 255);
HXDLIN( 474)										if ((this328 == 0)) {
HXLINE( 474)											r122 = ((Float)0.);
            										}
            										else {
HXLINE( 474)											r122 = (( (Float)(this328) ) / ( (Float)(255) ));
            										}
HXDLIN( 474)										Float g122;
HXDLIN( 474)										int this329 = ((this326 >> 8) & 255);
HXDLIN( 474)										if ((this329 == 0)) {
HXLINE( 474)											g122 = ((Float)0.);
            										}
            										else {
HXLINE( 474)											g122 = (( (Float)(this329) ) / ( (Float)(255) ));
            										}
HXDLIN( 474)										Float b126;
HXDLIN( 474)										int this330 = (this326 & 255);
HXDLIN( 474)										if ((this330 == 0)) {
HXLINE( 474)											b126 = ((Float)0.);
            										}
            										else {
HXLINE( 474)											b126 = (( (Float)(this330) ) / ( (Float)(255) ));
            										}
HXDLIN( 474)										Float a223;
HXDLIN( 474)										int this331 = ((col10 >> 24) & 255);
HXDLIN( 474)										if ((this331 == 0)) {
HXLINE( 474)											a223 = ((Float)0.);
            										}
            										else {
HXLINE( 474)											a223 = (( (Float)(this331) ) / ( (Float)(255) ));
            										}
HXDLIN( 474)										Float r221;
HXDLIN( 474)										int this332 = ((col10 >> 16) & 255);
HXDLIN( 474)										if ((this332 == 0)) {
HXLINE( 474)											r221 = ((Float)0.);
            										}
            										else {
HXLINE( 474)											r221 = (( (Float)(this332) ) / ( (Float)(255) ));
            										}
HXDLIN( 474)										Float g221;
HXDLIN( 474)										int this333 = ((col10 >> 8) & 255);
HXDLIN( 474)										if ((this333 == 0)) {
HXLINE( 474)											g221 = ((Float)0.);
            										}
            										else {
HXLINE( 474)											g221 = (( (Float)(this333) ) / ( (Float)(255) ));
            										}
HXDLIN( 474)										Float b224;
HXDLIN( 474)										int this334 = (col10 & 255);
HXDLIN( 474)										if ((this334 == 0)) {
HXLINE( 474)											b224 = ((Float)0.);
            										}
            										else {
HXLINE( 474)											b224 = (( (Float)(this334) ) / ( (Float)(255) ));
            										}
HXDLIN( 474)										Float a322 = (a125 * (( (Float)(1) ) - a223));
HXDLIN( 474)										int r45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r122 * a322) + (r221 * a223))));
HXDLIN( 474)										int g45 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g122 * a322) + (g221 * a223))));
HXDLIN( 474)										int b83 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b126 * a322) + (b224 * a223))));
HXDLIN( 474)										int a72 = ::Std_obj::_hx_int((( (Float)(255) ) * (a322 + a223)));
HXDLIN( 474)										int blended20 = ((((a72 << 24) | (r45 << 16)) | (g45 << 8)) | b83);
HXDLIN( 474)										{
HXLINE( 474)											int _hx_tmp2;
HXDLIN( 474)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 474)												_hx_tmp2 = ((((((blended20 >> 24) & 255) << 24) | ((blended20 & 255) << 16)) | (((blended20 >> 8) & 255) << 8)) | ((blended20 >> 16) & 255));
            											}
            											else {
HXLINE( 474)												_hx_tmp2 = blended20;
            											}
HXDLIN( 474)											::iterMagic::Iimg_obj::set(undoImage30->image,location20,_hx_tmp2);
            										}
            									}
            									else {
HXLINE( 474)										::Dynamic this335 = undoImage30->image;
HXDLIN( 474)										int index44;
HXDLIN( 474)										if (undoImage30->useVirtualPos) {
HXLINE( 474)											index44 = ::Std_obj::_hx_int(((((( (Float)(y33) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x33) - undoImage30->virtualX));
            										}
            										else {
HXLINE( 474)											index44 = ::Std_obj::_hx_int(( (Float)(((y33 * undoImage30->width) + x33)) ));
            										}
HXDLIN( 474)										int _hx_tmp3;
HXDLIN( 474)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 474)											_hx_tmp3 = ((((((c46 >> 24) & 255) << 24) | ((c46 & 255) << 16)) | (((c46 >> 8) & 255) << 8)) | ((c46 >> 16) & 255));
            										}
            										else {
HXLINE( 474)											_hx_tmp3 = c46;
            										}
HXDLIN( 474)										::iterMagic::Iimg_obj::set(this335,index44,_hx_tmp3);
            									}
            								}
            								else {
HXLINE( 474)									if (forceClear10) {
HXLINE( 474)										::Dynamic this336 = undoImage30->image;
HXDLIN( 474)										int x34 = (dx13 - rectLeft10);
HXDLIN( 474)										int y34 = (dy13 - rectTop10);
HXDLIN( 474)										int index45;
HXDLIN( 474)										if (undoImage30->useVirtualPos) {
HXLINE( 474)											index45 = ::Std_obj::_hx_int(((((( (Float)(y34) ) - undoImage30->virtualY) * ( (Float)(undoImage30->width) )) + x34) - undoImage30->virtualX));
            										}
            										else {
HXLINE( 474)											index45 = ::Std_obj::_hx_int(( (Float)(((y34 * undoImage30->width) + x34)) ));
            										}
HXDLIN( 474)										::iterMagic::Iimg_obj::set(this336,index45,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 474)		bool found10 = false;
HXDLIN( 474)		Float min70 = ( (Float)(0) );
HXDLIN( 474)		Float max2 = ( (Float)(0) );
HXDLIN( 474)		int a73 = 0;
HXDLIN( 474)		int r46 = 0;
HXDLIN( 474)		int g46 = 0;
HXDLIN( 474)		int b84 = 0;
HXDLIN( 474)		{
HXLINE( 474)			int _g_min20 = xIter310->start;
HXDLIN( 474)			int _g_max20 = xIter310->max;
HXDLIN( 474)			while((_g_min20 < _g_max20)){
HXLINE( 474)				_g_min20 = (_g_min20 + 1);
HXDLIN( 474)				int px9 = (_g_min20 - 1);
HXDLIN( 474)				Float pcx8 = (( (Float)(px9) ) - cx11);
HXLINE( 695)				found10 = false;
HXLINE( 474)				{
HXLINE( 474)					int _g_min21 = yIter310->start;
HXDLIN( 474)					int _g_max21 = yIter310->max;
HXDLIN( 474)					while((_g_min21 < _g_max21)){
HXLINE( 474)						_g_min21 = (_g_min21 + 1);
HXDLIN( 474)						int py9 = (_g_min21 - 1);
HXDLIN( 474)						Float pcy8 = (( (Float)(py9) ) - cy11);
HXDLIN( 474)						Float dot318 = ((pcx8 * bcx8) + (pcy8 * bcy8));
HXDLIN( 474)						Float dot328 = ((pcx8 * acx8) + (pcy8 * acy8));
HXDLIN( 474)						Float ratioA8 = (((dot228 * dot318) - (dot128 * dot328)) * denom18);
HXDLIN( 474)						Float ratioB8 = (((dot118 * dot328) - (dot128 * dot318)) * denom18);
HXDLIN( 474)						Float ratioC8 = ((((Float)1.0) - ratioB8) - ratioA8);
HXDLIN( 474)						bool _hx_tmp4;
HXDLIN( 474)						bool _hx_tmp5;
HXDLIN( 474)						if ((ratioA8 >= 0)) {
HXLINE( 474)							_hx_tmp5 = (ratioB8 >= 0);
            						}
            						else {
HXLINE( 474)							_hx_tmp5 = false;
            						}
HXDLIN( 474)						if (_hx_tmp5) {
HXLINE( 474)							_hx_tmp4 = (ratioC8 >= 0);
            						}
            						else {
HXLINE( 474)							_hx_tmp4 = false;
            						}
HXDLIN( 474)						if (_hx_tmp4) {
HXLINE( 474)							Float min71;
HXDLIN( 474)							if ((ratioA8 < ratioB8)) {
HXLINE( 474)								min71 = ratioA8;
            							}
            							else {
HXLINE( 474)								min71 = ratioB8;
            							}
HXDLIN( 474)							if (!((min71 < ratioC8))) {
HXLINE( 474)								min71 = ratioC8;
            							}
HXDLIN( 474)							Float max3;
HXDLIN( 474)							if ((ratioA8 > ratioB8)) {
HXLINE( 474)								max3 = ratioA8;
            							}
            							else {
HXLINE( 474)								max3 = ratioB8;
            							}
HXDLIN( 474)							if (!((max3 > ratioC8))) {
HXLINE( 474)								max3 = ratioC8;
            							}
HXLINE( 743)							max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE( 474)							Float min72;
HXDLIN( 474)							if ((min71 < max3)) {
HXLINE( 474)								min72 = min71;
            							}
            							else {
HXLINE( 474)								min72 = ((max3 + min71) / ( (Float)(2) ));
            							}
HXDLIN( 474)							int i98 = ::Std_obj::_hx_int(((( (Float)(aA8) ) * soft) * min72));
HXDLIN( 474)							if ((i98 > 255)) {
HXLINE(  24)								i98 = 255;
            							}
HXLINE( 474)							if ((i98 < 0)) {
HXLINE(  25)								i98 = 0;
            							}
HXLINE( 474)							a73 = i98;
HXDLIN( 474)							int i99 = ::Std_obj::_hx_int(( (Float)(rA8) ));
HXDLIN( 474)							if ((i99 > 255)) {
HXLINE(  24)								i99 = 255;
            							}
HXLINE( 474)							if ((i99 < 0)) {
HXLINE(  25)								i99 = 0;
            							}
HXLINE( 747)							r46 = i99;
HXLINE( 474)							int i100 = ::Std_obj::_hx_int(( (Float)(gA8) ));
HXDLIN( 474)							if ((i100 > 255)) {
HXLINE(  24)								i100 = 255;
            							}
HXLINE( 474)							if ((i100 < 0)) {
HXLINE(  25)								i100 = 0;
            							}
HXLINE( 748)							g46 = i100;
HXLINE( 474)							int i101 = ::Std_obj::_hx_int(( (Float)(bA8) ));
HXDLIN( 474)							if ((i101 > 255)) {
HXLINE(  24)								i101 = 255;
            							}
HXLINE( 474)							if ((i101 < 0)) {
HXLINE(  25)								i101 = 0;
            							}
HXLINE( 749)							b84 = i101;
HXLINE( 474)							{
HXLINE( 474)								int location21;
HXDLIN( 474)								if (pixelImage->useVirtualPos) {
HXLINE( 474)									location21 = ::Std_obj::_hx_int(((((( (Float)(py9) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px9) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 474)									location21 = ::Std_obj::_hx_int(( (Float)(((py9 * pixelImage->width) + px9)) ));
            								}
HXDLIN( 474)								bool _hx_tmp6;
HXDLIN( 474)								if (pixelImage->transparent) {
HXLINE( 474)									_hx_tmp6 = (a73 < 254);
            								}
            								else {
HXLINE( 474)									_hx_tmp6 = false;
            								}
HXDLIN( 474)								if (_hx_tmp6) {
HXLINE( 474)									int this337 = ::iterMagic::Iimg_obj::get(pixelImage->image,location21);
HXDLIN( 474)									int old8;
HXDLIN( 474)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 474)										old8 = ((((((this337 >> 24) & 255) << 24) | ((this337 & 255) << 16)) | (((this337 >> 8) & 255) << 8)) | ((this337 >> 16) & 255));
            									}
            									else {
HXLINE( 474)										old8 = this337;
            									}
HXDLIN( 474)									int rhs8 = ((((a73 << 24) | (r46 << 16)) | (g46 << 8)) | b84);
HXDLIN( 474)									Float a126;
HXDLIN( 474)									int this338 = ((old8 >> 24) & 255);
HXDLIN( 474)									if ((this338 == 0)) {
HXLINE( 474)										a126 = ((Float)0.);
            									}
            									else {
HXLINE( 474)										a126 = (( (Float)(this338) ) / ( (Float)(255) ));
            									}
HXDLIN( 474)									Float r123;
HXDLIN( 474)									int this339 = ((old8 >> 16) & 255);
HXDLIN( 474)									if ((this339 == 0)) {
HXLINE( 474)										r123 = ((Float)0.);
            									}
            									else {
HXLINE( 474)										r123 = (( (Float)(this339) ) / ( (Float)(255) ));
            									}
HXDLIN( 474)									Float g123;
HXDLIN( 474)									int this340 = ((old8 >> 8) & 255);
HXDLIN( 474)									if ((this340 == 0)) {
HXLINE( 474)										g123 = ((Float)0.);
            									}
            									else {
HXLINE( 474)										g123 = (( (Float)(this340) ) / ( (Float)(255) ));
            									}
HXDLIN( 474)									Float b127;
HXDLIN( 474)									int this341 = (old8 & 255);
HXDLIN( 474)									if ((this341 == 0)) {
HXLINE( 474)										b127 = ((Float)0.);
            									}
            									else {
HXLINE( 474)										b127 = (( (Float)(this341) ) / ( (Float)(255) ));
            									}
HXDLIN( 474)									Float a224;
HXDLIN( 474)									int this342 = ((rhs8 >> 24) & 255);
HXDLIN( 474)									if ((this342 == 0)) {
HXLINE( 474)										a224 = ((Float)0.);
            									}
            									else {
HXLINE( 474)										a224 = (( (Float)(this342) ) / ( (Float)(255) ));
            									}
HXDLIN( 474)									Float r222;
HXDLIN( 474)									int this343 = ((rhs8 >> 16) & 255);
HXDLIN( 474)									if ((this343 == 0)) {
HXLINE( 474)										r222 = ((Float)0.);
            									}
            									else {
HXLINE( 474)										r222 = (( (Float)(this343) ) / ( (Float)(255) ));
            									}
HXDLIN( 474)									Float g222;
HXDLIN( 474)									int this344 = ((rhs8 >> 8) & 255);
HXDLIN( 474)									if ((this344 == 0)) {
HXLINE( 474)										g222 = ((Float)0.);
            									}
            									else {
HXLINE( 474)										g222 = (( (Float)(this344) ) / ( (Float)(255) ));
            									}
HXDLIN( 474)									Float b225;
HXDLIN( 474)									int this345 = (rhs8 & 255);
HXDLIN( 474)									if ((this345 == 0)) {
HXLINE( 474)										b225 = ((Float)0.);
            									}
            									else {
HXLINE( 474)										b225 = (( (Float)(this345) ) / ( (Float)(255) ));
            									}
HXDLIN( 474)									Float a323 = (a126 * (( (Float)(1) ) - a224));
HXDLIN( 474)									int r47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r123 * a323) + (r222 * a224))));
HXDLIN( 474)									int g47 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g123 * a323) + (g222 * a224))));
HXDLIN( 474)									int b85 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b127 * a323) + (b225 * a224))));
HXDLIN( 474)									int a74 = ::Std_obj::_hx_int((( (Float)(255) ) * (a323 + a224)));
HXDLIN( 474)									int blended21 = ((((a74 << 24) | (r47 << 16)) | (g47 << 8)) | b85);
HXDLIN( 474)									{
HXLINE( 474)										int _hx_tmp7;
HXDLIN( 474)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 474)											_hx_tmp7 = ((((((blended21 >> 24) & 255) << 24) | ((blended21 & 255) << 16)) | (((blended21 >> 8) & 255) << 8)) | ((blended21 >> 16) & 255));
            										}
            										else {
HXLINE( 474)											_hx_tmp7 = blended21;
            										}
HXDLIN( 474)										::iterMagic::Iimg_obj::set(pixelImage->image,location21,_hx_tmp7);
            									}
            								}
            								else {
HXLINE( 474)									int value8;
HXDLIN( 474)									if (pixelImage->isLittle) {
HXLINE( 474)										value8 = ((((a73 << 24) | (b84 << 16)) | (g46 << 8)) | r46);
            									}
            									else {
HXLINE( 474)										value8 = ((((a73 << 24) | (r46 << 16)) | (g46 << 8)) | b84);
            									}
HXDLIN( 474)									::iterMagic::Iimg_obj::set(pixelImage->image,location21,value8);
            								}
            							}
HXLINE( 751)							found10 = true;
            						}
            						else {
HXLINE( 474)							if (found10) {
HXLINE( 474)								goto _hx_goto_666;
            							}
            						}
            					}
            					_hx_goto_666:;
            				}
            			}
            		}
HXDLIN( 474)		 ::pi_xy::algo::HitTri hitTri;
HXDLIN( 474)		if ((hasHit == false)) {
HXLINE( 474)			 ::pi_xy::algo::HitTri v25 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx11,by11,cx11,cy11,true);
HXDLIN( 474)			if (hasUndo10) {
HXLINE( 474)				v25->undoImage = undoImage30;
HXDLIN( 474)				v25->undoX = xIter310->start;
HXDLIN( 474)				v25->undoY = yIter310->start;
            			}
HXDLIN( 474)			hitTri = v25;
            		}
            		else {
HXLINE( 474)			hitTri = null();
            		}
HXLINE( 475)		if (hasHit) {
HXLINE( 476)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(1)->init(0,hitTri));
HXLINE( 477)			if (::hx::IsNotNull( hitQuad )) {
HXLINE( 478)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXLINE( 479)			hitArr->triArr->push(hitQuad->triBCD);
HXLINE( 480)			return hitArr;
            		}
            		else {
HXLINE( 482)			return null();
            		}
HXLINE( 475)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC13(ArrowPixel_Fields__obj,fillSoftLineFixedArrow,return )

 ::pi_xy::algo::HitTriArray ArrowPixel_Fields__obj::gradThickLineFixedArrow( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float arrowWidth,Float arrowHeight,Float thick,int color1,int color2,::hx::Null< bool >  __o_flare,::hx::Null< bool >  __o_reverseFlare,::hx::Null< bool >  __o_hasHit){
            		bool flare = __o_flare.Default(false);
            		bool reverseFlare = __o_reverseFlare.Default(false);
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_63f36ef650858c14_490_gradThickLineFixedArrow)
HXLINE( 491)		Float goldenRatio = ((Float)1.61803398875);
HXLINE( 492)		Float o = (qy - py);
HXLINE( 493)		Float a = (qx - px);
HXLINE( 494)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE( 495)		Float theta = ::Math_obj::atan2(o,a);
HXLINE( 496)		Float thicker;
HXDLIN( 496)		if ((arrowWidth > (thick * ((Float)1.1)))) {
HXLINE( 496)			thicker = arrowWidth;
            		}
            		else {
HXLINE( 496)			thicker = ((( (Float)(2) ) * thick) * goldenRatio);
            		}
HXLINE( 502)		Float sin = ::Math_obj::sin(theta);
HXLINE( 503)		Float cos = ::Math_obj::cos(theta);
HXLINE( 504)		Float radius = (thick / ( (Float)(2) ));
HXLINE( 505)		Float radius2 = (thicker / ( (Float)(2) ));
HXLINE( 506)		Float h2;
HXDLIN( 506)		if ((arrowHeight < (h * ((Float)1.1)))) {
HXLINE( 506)			h2 = (h - arrowHeight);
            		}
            		else {
HXLINE( 506)			h2 = (h / goldenRatio);
            		}
HXLINE( 511)		 ::pi_xy::algo::HitQuad hitQuad;
HXDLIN( 511)		if (flare) {
HXLINE( 512)			if (reverseFlare) {
HXLINE( 513)				Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 513)				Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 513)				Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 513)				Float radius21 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN( 513)				Float dx = ((Float)0.1);
HXDLIN( 513)				Float dy = radius1;
HXDLIN( 513)				Float cx = h2;
HXDLIN( 513)				Float cy = radius21;
HXDLIN( 513)				Float bx = h2;
HXDLIN( 513)				Float by = -(radius21);
HXDLIN( 513)				Float ax = ((Float)0.1);
HXDLIN( 513)				Float ay = -(radius1);
HXDLIN( 513)				Float temp = ((Float)0.);
HXLINE( 525)				temp = (px + ((ax * cos1) - (ay * sin1)));
HXLINE( 526)				ay = (py + ((ay * cos1) + (ax * sin1)));
HXLINE( 527)				ax = temp;
HXLINE( 529)				temp = (px + ((bx * cos1) - (by * sin1)));
HXLINE( 530)				by = (py + ((by * cos1) + (bx * sin1)));
HXLINE( 531)				bx = temp;
HXLINE( 533)				temp = (px + ((cx * cos1) - (cy * sin1)));
HXLINE( 534)				cy = (py + ((cy * cos1) + (cx * sin1)));
HXLINE( 535)				cx = temp;
HXLINE( 537)				temp = (px + ((dx * cos1) - (dy * sin1)));
HXLINE( 538)				dy = (py + ((dy * cos1) + (dx * sin1)));
HXLINE( 539)				dx = temp;
HXLINE( 513)				{
HXLINE( 513)					bool hasUndo = false;
HXDLIN( 513)					int aA = ((color1 >> 24) & 255);
HXDLIN( 513)					int rA = ((color1 >> 16) & 255);
HXDLIN( 513)					int gA = ((color1 >> 8) & 255);
HXDLIN( 513)					int bA = (color1 & 255);
HXDLIN( 513)					int aB = ((color1 >> 24) & 255);
HXDLIN( 513)					int rB = ((color1 >> 16) & 255);
HXDLIN( 513)					int gB = ((color1 >> 8) & 255);
HXDLIN( 513)					int bB = (color1 & 255);
HXDLIN( 513)					int aC = ((color2 >> 24) & 255);
HXDLIN( 513)					int rC = ((color2 >> 16) & 255);
HXDLIN( 513)					int gC = ((color2 >> 8) & 255);
HXDLIN( 513)					int bC = (color2 & 255);
HXDLIN( 513)					Float bcx = (bx - dx);
HXDLIN( 513)					Float bcy = (by - dy);
HXDLIN( 513)					Float acx = (ax - dx);
HXDLIN( 513)					Float acy = (ay - dy);
HXDLIN( 513)					Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 513)					Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 513)					Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 513)					Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 513)					 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 513)					if ((ax > bx)) {
HXLINE( 513)						if ((ax > dx)) {
HXLINE( 513)							int min;
HXDLIN( 513)							if ((bx > dx)) {
HXLINE( 513)								min = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE( 513)								min = ::Math_obj::floor(bx);
            							}
HXDLIN( 513)							int ii_min = min;
HXDLIN( 513)							int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 513)							xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            						}
            						else {
HXLINE( 513)							int ii_min1 = ::Math_obj::floor(bx);
HXDLIN( 513)							int ii_max1 = ::Math_obj::ceil(dx);
HXDLIN( 513)							xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            						}
            					}
            					else {
HXLINE( 513)						if ((bx > dx)) {
HXLINE( 513)							int min1;
HXDLIN( 513)							if ((ax > dx)) {
HXLINE( 513)								min1 = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE( 513)								min1 = ::Math_obj::ceil(ax);
            							}
HXDLIN( 513)							int ii_min2 = min1;
HXDLIN( 513)							int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN( 513)							xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            						}
            						else {
HXLINE( 513)							int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 513)							int ii_max3 = ::Math_obj::ceil(dx);
HXDLIN( 513)							xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            						}
            					}
HXDLIN( 513)					 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 513)					if ((ay > by)) {
HXLINE( 513)						if ((ay > dy)) {
HXLINE( 513)							int min2;
HXDLIN( 513)							if ((by > dy)) {
HXLINE( 513)								min2 = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE( 513)								min2 = ::Math_obj::floor(by);
            							}
HXDLIN( 513)							int ii_min4 = min2;
HXDLIN( 513)							int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 513)							yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            						}
            						else {
HXLINE( 513)							int ii_min5 = ::Math_obj::floor(by);
HXDLIN( 513)							int ii_max5 = ::Math_obj::ceil(dy);
HXDLIN( 513)							yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            						}
            					}
            					else {
HXLINE( 513)						if ((by > dy)) {
HXLINE( 513)							int min3;
HXDLIN( 513)							if ((ay > dy)) {
HXLINE( 513)								min3 = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE( 513)								min3 = ::Math_obj::ceil(ay);
            							}
HXDLIN( 513)							int ii_min6 = min3;
HXDLIN( 513)							int ii_max6 = ::Math_obj::ceil(by);
HXDLIN( 513)							yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            						}
            						else {
HXLINE( 513)							int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 513)							int ii_max7 = ::Math_obj::ceil(dy);
HXDLIN( 513)							yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            						}
            					}
HXDLIN( 513)					 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 513)					if (hasUndo) {
HXLINE( 513)						int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 513)						int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 513)						 ::Dynamic imageType = null();
HXDLIN( 513)						 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 513)						if (::hx::IsNull( imageType )) {
HXLINE(  54)							imageType = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 513)						::Dynamic undoImage1;
HXDLIN( 513)						switch((int)(( (int)(imageType) ))){
            							case (int)0: {
HXLINE( 513)								 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 513)								 ::iterMagic::BytesImg b = byt;
HXDLIN( 513)								{
HXLINE( 513)									b->width = width;
HXDLIN( 513)									b->height = height;
HXDLIN( 513)									b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 513)									b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 513)									{
HXLINE( 513)										int len = b->length;
HXDLIN( 513)										int w = 0;
HXDLIN( 513)										{
HXLINE( 513)											int _g = 0;
HXDLIN( 513)											int _g1 = b->height;
HXDLIN( 513)											while((_g < _g1)){
HXLINE( 513)												_g = (_g + 1);
HXDLIN( 513)												int y = (_g - 1);
HXDLIN( 513)												{
HXLINE( 513)													int _g2 = 0;
HXDLIN( 513)													int _g3 = b->width;
HXDLIN( 513)													while((_g2 < _g3)){
HXLINE( 513)														_g2 = (_g2 + 1);
HXDLIN( 513)														int x = (_g2 - 1);
HXDLIN( 513)														{
HXLINE( 513)															w = (w + 1);
HXDLIN( 513)															b->data->b[(w - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 513)														{
HXLINE( 513)															w = (w + 1);
HXDLIN( 513)															b->data->b[(w - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 513)														{
HXLINE( 513)															w = (w + 1);
HXDLIN( 513)															b->data->b[(w - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 513)														{
HXLINE( 513)															w = (w + 1);
HXDLIN( 513)															b->data->b[(w - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 513)								undoImage1 = b;
            							}
            							break;
            							case (int)1: {
HXLINE( 513)								 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 513)								 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 513)								{
HXLINE( 513)									a1->width = width;
HXDLIN( 513)									a1->height = height;
HXDLIN( 513)									a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 513)									a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 513)									{
HXLINE( 513)										int _g4 = 0;
HXDLIN( 513)										int _g5 = a1->length;
HXDLIN( 513)										while((_g4 < _g5)){
HXLINE( 513)											_g4 = (_g4 + 1);
HXDLIN( 513)											int i = (_g4 - 1);
HXDLIN( 513)											a1->data[i] = 0;
            										}
            									}
            								}
HXDLIN( 513)								undoImage1 = a1;
            							}
            							break;
            							case (int)2: {
HXLINE( 513)								 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 513)								 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 513)								{
HXLINE( 513)									b1->width = width;
HXDLIN( 513)									b1->height = height;
HXDLIN( 513)									b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 513)									int size = (b1->length * 4);
HXDLIN( 513)									b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 513)									{
HXLINE( 513)										int _g6 = 0;
HXDLIN( 513)										int _g7 = b1->length;
HXDLIN( 513)										while((_g6 < _g7)){
HXLINE( 513)											_g6 = (_g6 + 1);
HXDLIN( 513)											int i1 = (_g6 - 1);
HXDLIN( 513)											{
HXLINE( 513)												 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN( 513)												bool undoImage2;
HXDLIN( 513)												if ((i1 >= 0)) {
HXLINE( 513)													undoImage2 = (i1 < (this2->byteLength >> 2));
            												}
            												else {
HXLINE( 513)													undoImage2 = false;
            												}
HXDLIN( 513)												if (undoImage2) {
HXLINE( 513)													 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 513)													int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 513)													_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 513)													_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 513)													_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 513)													_this->b[(pos + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 513)								undoImage1 = b1;
            							}
            							break;
            							case (int)3: {
HXLINE( 513)								 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 513)								 ::iterMagic::VecIntImg v = vec;
HXDLIN( 513)								{
HXLINE( 513)									v->width = width;
HXDLIN( 513)									v->height = height;
HXDLIN( 513)									v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 513)									v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 513)									{
HXLINE( 513)										int _g8 = 0;
HXDLIN( 513)										int _g9 = v->length;
HXDLIN( 513)										while((_g8 < _g9)){
HXLINE( 513)											_g8 = (_g8 + 1);
HXDLIN( 513)											int i2 = (_g8 - 1);
HXDLIN( 513)											v->data->__unsafe_set(i2,0);
            										}
            									}
            								}
HXDLIN( 513)								undoImage1 = v;
            							}
            							break;
            							case (int)4: {
HXLINE( 513)								 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 513)								 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 513)								{
HXLINE( 513)									b2->width = width;
HXDLIN( 513)									b2->height = height;
HXDLIN( 513)									b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 513)									b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 513)									{
HXLINE( 513)										int len1 = b2->length;
HXDLIN( 513)										 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 513)										if (::hx::IsNull( d->head )) {
HXLINE( 513)											int _g10 = 0;
HXDLIN( 513)											int _g11 = len1;
HXDLIN( 513)											while((_g10 < _g11)){
HXLINE( 513)												_g10 = (_g10 + 1);
HXDLIN( 513)												int i3 = (_g10 - 1);
HXDLIN( 513)												d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            											}
            										}
            										else {
HXLINE( 513)											int _g12 = 0;
HXDLIN( 513)											int _g13 = len1;
HXDLIN( 513)											while((_g12 < _g13)){
HXLINE( 513)												_g12 = (_g12 + 1);
HXDLIN( 513)												int i4 = (_g12 - 1);
HXDLIN( 513)												{
HXLINE( 513)													 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 513)													 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 513)													{
HXLINE( 513)														int _g14 = 0;
HXDLIN( 513)														int _g15 = i4;
HXDLIN( 513)														while((_g14 < _g15)){
HXLINE( 513)															_g14 = (_g14 + 1);
HXDLIN( 513)															int i5 = (_g14 - 1);
HXLINE( 345)															prev = l;
HXLINE( 346)															l = l->next;
            														}
            													}
HXLINE( 513)													if (::hx::IsNull( prev )) {
HXLINE( 513)														b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 513)														l = null();
            													}
            													else {
HXLINE( 513)														prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 513)														l = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 513)								undoImage1 = b2;
            							}
            							break;
            						}
HXDLIN( 513)						this1->image = undoImage1;
HXDLIN( 513)						this1->width = width;
HXDLIN( 513)						this1->height = height;
HXDLIN( 513)						this1->imageType = ( (int)(imageType) );
HXDLIN( 513)						undoImage = this1;
HXDLIN( 513)						{
HXLINE( 513)							int rectLeft = xIter3->start;
HXDLIN( 513)							int rectTop = yIter3->start;
HXDLIN( 513)							int rectRight = xIter3->max;
HXDLIN( 513)							bool forceClear = false;
HXDLIN( 513)							{
HXLINE( 513)								int _g16 = rectTop;
HXDLIN( 513)								int _g17 = yIter3->max;
HXDLIN( 513)								while((_g16 < _g17)){
HXLINE( 513)									_g16 = (_g16 + 1);
HXDLIN( 513)									int dy1 = (_g16 - 1);
HXDLIN( 513)									{
HXLINE( 513)										int _g18 = rectLeft;
HXDLIN( 513)										int _g19 = rectRight;
HXDLIN( 513)										while((_g18 < _g19)){
HXLINE( 513)											_g18 = (_g18 + 1);
HXDLIN( 513)											int dx1 = (_g18 - 1);
HXDLIN( 513)											::Dynamic this3 = pixelImage->image;
HXDLIN( 513)											int index;
HXDLIN( 513)											if (pixelImage->useVirtualPos) {
HXLINE( 513)												index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 513)												index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            											}
HXDLIN( 513)											int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN( 513)											int col;
HXDLIN( 513)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 513)												col = c;
            											}
HXDLIN( 513)											bool hitQuad1;
HXDLIN( 513)											if (pixelImage->useMask) {
HXLINE( 513)												hitQuad1 = ::hx::IsNotNull( pixelImage->mask );
            											}
            											else {
HXLINE( 513)												hitQuad1 = false;
            											}
HXDLIN( 513)											if (hitQuad1) {
HXLINE( 513)												 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN( 513)												::Dynamic this5 = this4->image;
HXDLIN( 513)												int index1;
HXDLIN( 513)												if (this4->useVirtualPos) {
HXLINE( 513)													index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            												}
            												else {
HXLINE( 513)													index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            												}
HXDLIN( 513)												int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN( 513)												int v1;
HXDLIN( 513)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)													v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            												}
            												else {
HXLINE( 513)													v1 = c1;
            												}
HXDLIN( 513)												int maskPixel = v1;
HXDLIN( 513)												int this6 = col;
HXDLIN( 513)												if ((maskPixel == 0)) {
HXLINE( 513)													col = this6;
            												}
            												else {
HXLINE( 513)													Float m0;
HXDLIN( 513)													int this7 = ((maskPixel >> 24) & 255);
HXDLIN( 513)													if ((this7 == 0)) {
HXLINE( 513)														m0 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float m1;
HXDLIN( 513)													int this8 = ((maskPixel >> 16) & 255);
HXDLIN( 513)													if ((this8 == 0)) {
HXLINE( 513)														m1 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float m2;
HXDLIN( 513)													int this9 = ((maskPixel >> 8) & 255);
HXDLIN( 513)													if ((this9 == 0)) {
HXLINE( 513)														m2 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float m3;
HXDLIN( 513)													int this10 = (maskPixel & 255);
HXDLIN( 513)													if ((this10 == 0)) {
HXLINE( 513)														m3 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 513)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 513)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 513)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 513)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 513)											if ((col != 0)) {
HXLINE( 513)												int x1 = (dx1 - rectLeft);
HXDLIN( 513)												int y1 = (dy1 - rectTop);
HXDLIN( 513)												int c2 = col;
HXDLIN( 513)												bool hitQuad2;
HXDLIN( 513)												if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 513)													hitQuad2 = undoImage->transparent;
            												}
            												else {
HXLINE( 513)													hitQuad2 = false;
            												}
HXDLIN( 513)												if (hitQuad2) {
HXLINE( 513)													int location;
HXDLIN( 513)													if (undoImage->useVirtualPos) {
HXLINE( 513)														location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            													}
            													else {
HXLINE( 513)														location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            													}
HXDLIN( 513)													int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 513)													int this12;
HXDLIN( 513)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)														this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            													}
            													else {
HXLINE( 513)														this12 = this11;
            													}
HXDLIN( 513)													Float a11;
HXDLIN( 513)													int this13 = ((this12 >> 24) & 255);
HXDLIN( 513)													if ((this13 == 0)) {
HXLINE( 513)														a11 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float r1;
HXDLIN( 513)													int this14 = ((this12 >> 16) & 255);
HXDLIN( 513)													if ((this14 == 0)) {
HXLINE( 513)														r1 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float g1;
HXDLIN( 513)													int this15 = ((this12 >> 8) & 255);
HXDLIN( 513)													if ((this15 == 0)) {
HXLINE( 513)														g1 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float b11;
HXDLIN( 513)													int this16 = (this12 & 255);
HXDLIN( 513)													if ((this16 == 0)) {
HXLINE( 513)														b11 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float a2;
HXDLIN( 513)													int this17 = ((col >> 24) & 255);
HXDLIN( 513)													if ((this17 == 0)) {
HXLINE( 513)														a2 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float r2;
HXDLIN( 513)													int this18 = ((col >> 16) & 255);
HXDLIN( 513)													if ((this18 == 0)) {
HXLINE( 513)														r2 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float g2;
HXDLIN( 513)													int this19 = ((col >> 8) & 255);
HXDLIN( 513)													if ((this19 == 0)) {
HXLINE( 513)														g2 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float b21;
HXDLIN( 513)													int this20 = (col & 255);
HXDLIN( 513)													if ((this20 == 0)) {
HXLINE( 513)														b21 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 513)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 513)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 513)													int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 513)													int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 513)													int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 513)													{
HXLINE( 513)														int hitQuad3;
HXDLIN( 513)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)															hitQuad3 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE( 513)															hitQuad3 = blended;
            														}
HXDLIN( 513)														::iterMagic::Iimg_obj::set(undoImage->image,location,hitQuad3);
            													}
            												}
            												else {
HXLINE( 513)													::Dynamic this21 = undoImage->image;
HXDLIN( 513)													int index2;
HXDLIN( 513)													if (undoImage->useVirtualPos) {
HXLINE( 513)														index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            													}
            													else {
HXLINE( 513)														index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            													}
HXDLIN( 513)													int hitQuad4;
HXDLIN( 513)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)														hitQuad4 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            													}
            													else {
HXLINE( 513)														hitQuad4 = c2;
            													}
HXDLIN( 513)													::iterMagic::Iimg_obj::set(this21,index2,hitQuad4);
            												}
            											}
            											else {
HXLINE( 513)												if (forceClear) {
HXLINE( 513)													::Dynamic this22 = undoImage->image;
HXDLIN( 513)													int x2 = (dx1 - rectLeft);
HXDLIN( 513)													int y2 = (dy1 - rectTop);
HXDLIN( 513)													int index3;
HXDLIN( 513)													if (undoImage->useVirtualPos) {
HXLINE( 513)														index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            													}
            													else {
HXLINE( 513)														index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            													}
HXDLIN( 513)													::iterMagic::Iimg_obj::set(this22,index3,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 513)					{
HXLINE( 513)						int _g_min = xIter3->start;
HXDLIN( 513)						int _g_max = xIter3->max;
HXDLIN( 513)						while((_g_min < _g_max)){
HXLINE( 513)							_g_min = (_g_min + 1);
HXDLIN( 513)							int px1 = (_g_min - 1);
HXDLIN( 513)							Float pcx = (( (Float)(px1) ) - dx);
HXDLIN( 513)							{
HXLINE( 513)								int _g_min1 = yIter3->start;
HXDLIN( 513)								int _g_max1 = yIter3->max;
HXDLIN( 513)								while((_g_min1 < _g_max1)){
HXLINE( 513)									_g_min1 = (_g_min1 + 1);
HXDLIN( 513)									int py1 = (_g_min1 - 1);
HXDLIN( 513)									Float pcy = (( (Float)(py1) ) - dy);
HXDLIN( 513)									Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 513)									Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 513)									Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 513)									Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 513)									Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 513)									bool hitQuad5;
HXDLIN( 513)									bool hitQuad6;
HXDLIN( 513)									if ((ratioA >= 0)) {
HXLINE( 513)										hitQuad6 = (ratioB >= 0);
            									}
            									else {
HXLINE( 513)										hitQuad6 = false;
            									}
HXDLIN( 513)									if (hitQuad6) {
HXLINE( 513)										hitQuad5 = (ratioC >= 0);
            									}
            									else {
HXLINE( 513)										hitQuad5 = false;
            									}
HXDLIN( 513)									if (hitQuad5) {
HXLINE( 513)										int i6 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA) + (( (Float)(aB) ) * ratioB)) + (( (Float)(aC) ) * ratioC)));
HXDLIN( 513)										if ((i6 > 255)) {
HXLINE(  24)											i6 = 255;
            										}
HXLINE( 513)										if ((i6 < 0)) {
HXLINE(  25)											i6 = 0;
            										}
HXLINE( 513)										int a5 = i6;
HXDLIN( 513)										int i7 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA) + (( (Float)(rB) ) * ratioB)) + (( (Float)(rC) ) * ratioC)));
HXDLIN( 513)										if ((i7 > 255)) {
HXLINE(  24)											i7 = 255;
            										}
HXLINE( 513)										if ((i7 < 0)) {
HXLINE(  25)											i7 = 0;
            										}
HXLINE( 513)										int r3 = i7;
HXDLIN( 513)										int i8 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA) + (( (Float)(gB) ) * ratioB)) + (( (Float)(gC) ) * ratioC)));
HXDLIN( 513)										if ((i8 > 255)) {
HXLINE(  24)											i8 = 255;
            										}
HXLINE( 513)										if ((i8 < 0)) {
HXLINE(  25)											i8 = 0;
            										}
HXLINE( 513)										int g3 = i8;
HXDLIN( 513)										int i9 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA) + (( (Float)(bB) ) * ratioB)) + (( (Float)(bC) ) * ratioC)));
HXDLIN( 513)										if ((i9 > 255)) {
HXLINE(  24)											i9 = 255;
            										}
HXLINE( 513)										if ((i9 < 0)) {
HXLINE(  25)											i9 = 0;
            										}
HXLINE( 513)										int b4 = i9;
HXDLIN( 513)										{
HXLINE( 513)											int location1;
HXDLIN( 513)											if (pixelImage->useVirtualPos) {
HXLINE( 513)												location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 513)												location1 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            											}
HXDLIN( 513)											bool hitQuad7;
HXDLIN( 513)											if (pixelImage->transparent) {
HXLINE( 513)												hitQuad7 = (a5 < 254);
            											}
            											else {
HXLINE( 513)												hitQuad7 = false;
            											}
HXDLIN( 513)											if (hitQuad7) {
HXLINE( 513)												int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN( 513)												int old;
HXDLIN( 513)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)													old = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            												}
            												else {
HXLINE( 513)													old = this23;
            												}
HXDLIN( 513)												int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 513)												Float a12;
HXDLIN( 513)												int this24 = ((old >> 24) & 255);
HXDLIN( 513)												if ((this24 == 0)) {
HXLINE( 513)													a12 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													a12 = (( (Float)(this24) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float r11;
HXDLIN( 513)												int this25 = ((old >> 16) & 255);
HXDLIN( 513)												if ((this25 == 0)) {
HXLINE( 513)													r11 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													r11 = (( (Float)(this25) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float g11;
HXDLIN( 513)												int this26 = ((old >> 8) & 255);
HXDLIN( 513)												if ((this26 == 0)) {
HXLINE( 513)													g11 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													g11 = (( (Float)(this26) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float b12;
HXDLIN( 513)												int this27 = (old & 255);
HXDLIN( 513)												if ((this27 == 0)) {
HXLINE( 513)													b12 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													b12 = (( (Float)(this27) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float a21;
HXDLIN( 513)												int this28 = ((rhs >> 24) & 255);
HXDLIN( 513)												if ((this28 == 0)) {
HXLINE( 513)													a21 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													a21 = (( (Float)(this28) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float r21;
HXDLIN( 513)												int this29 = ((rhs >> 16) & 255);
HXDLIN( 513)												if ((this29 == 0)) {
HXLINE( 513)													r21 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													r21 = (( (Float)(this29) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float g21;
HXDLIN( 513)												int this30 = ((rhs >> 8) & 255);
HXDLIN( 513)												if ((this30 == 0)) {
HXLINE( 513)													g21 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													g21 = (( (Float)(this30) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float b22;
HXDLIN( 513)												int this31 = (rhs & 255);
HXDLIN( 513)												if ((this31 == 0)) {
HXLINE( 513)													b22 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													b22 = (( (Float)(this31) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 513)												int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 513)												int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 513)												int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 513)												int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 513)												int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 513)												{
HXLINE( 513)													int hitQuad8;
HXDLIN( 513)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)														hitQuad8 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            													}
            													else {
HXLINE( 513)														hitQuad8 = blended1;
            													}
HXDLIN( 513)													::iterMagic::Iimg_obj::set(pixelImage->image,location1,hitQuad8);
            												}
            											}
            											else {
HXLINE( 513)												int value;
HXDLIN( 513)												if (pixelImage->isLittle) {
HXLINE( 513)													value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            												}
            												else {
HXLINE( 513)													value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            												}
HXDLIN( 513)												::iterMagic::Iimg_obj::set(pixelImage->image,location1,value);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 513)				{
HXLINE( 513)					bool hasHit1 = false;
HXDLIN( 513)					bool hasUndo1 = false;
HXDLIN( 513)					int aA1 = ((color2 >> 24) & 255);
HXDLIN( 513)					int rA1 = ((color2 >> 16) & 255);
HXDLIN( 513)					int gA1 = ((color2 >> 8) & 255);
HXDLIN( 513)					int bA1 = (color2 & 255);
HXDLIN( 513)					int aB1 = ((color1 >> 24) & 255);
HXDLIN( 513)					int rB1 = ((color1 >> 16) & 255);
HXDLIN( 513)					int gB1 = ((color1 >> 8) & 255);
HXDLIN( 513)					int bB1 = (color1 & 255);
HXDLIN( 513)					int aC1 = ((color2 >> 24) & 255);
HXDLIN( 513)					int rC1 = ((color2 >> 16) & 255);
HXDLIN( 513)					int gC1 = ((color2 >> 8) & 255);
HXDLIN( 513)					int bC1 = (color2 & 255);
HXDLIN( 513)					Float bcx1 = (cx - dx);
HXDLIN( 513)					Float bcy1 = (cy - dy);
HXDLIN( 513)					Float acx1 = (bx - dx);
HXDLIN( 513)					Float acy1 = (by - dy);
HXDLIN( 513)					Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 513)					Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 513)					Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 513)					Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 513)					 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 513)					if ((bx > cx)) {
HXLINE( 513)						if ((bx > dx)) {
HXLINE( 513)							int min4;
HXDLIN( 513)							if ((cx > dx)) {
HXLINE( 513)								min4 = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE( 513)								min4 = ::Math_obj::floor(cx);
            							}
HXDLIN( 513)							int ii_min8 = min4;
HXDLIN( 513)							int ii_max8 = ::Math_obj::ceil(bx);
HXDLIN( 513)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            						}
            						else {
HXLINE( 513)							int ii_min9 = ::Math_obj::floor(cx);
HXDLIN( 513)							int ii_max9 = ::Math_obj::ceil(dx);
HXDLIN( 513)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            						}
            					}
            					else {
HXLINE( 513)						if ((cx > dx)) {
HXLINE( 513)							int min5;
HXDLIN( 513)							if ((bx > dx)) {
HXLINE( 513)								min5 = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE( 513)								min5 = ::Math_obj::ceil(bx);
            							}
HXDLIN( 513)							int ii_min10 = min5;
HXDLIN( 513)							int ii_max10 = ::Math_obj::ceil(cx);
HXDLIN( 513)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            						}
            						else {
HXLINE( 513)							int ii_min11 = ::Math_obj::floor(bx);
HXDLIN( 513)							int ii_max11 = ::Math_obj::ceil(dx);
HXDLIN( 513)							xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            						}
            					}
HXDLIN( 513)					 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 513)					if ((by > cy)) {
HXLINE( 513)						if ((by > dy)) {
HXLINE( 513)							int min6;
HXDLIN( 513)							if ((cy > dy)) {
HXLINE( 513)								min6 = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE( 513)								min6 = ::Math_obj::floor(cy);
            							}
HXDLIN( 513)							int ii_min12 = min6;
HXDLIN( 513)							int ii_max12 = ::Math_obj::ceil(by);
HXDLIN( 513)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            						}
            						else {
HXLINE( 513)							int ii_min13 = ::Math_obj::floor(cy);
HXDLIN( 513)							int ii_max13 = ::Math_obj::ceil(dy);
HXDLIN( 513)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            						}
            					}
            					else {
HXLINE( 513)						if ((cy > dy)) {
HXLINE( 513)							int min7;
HXDLIN( 513)							if ((by > dy)) {
HXLINE( 513)								min7 = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE( 513)								min7 = ::Math_obj::ceil(by);
            							}
HXDLIN( 513)							int ii_min14 = min7;
HXDLIN( 513)							int ii_max14 = ::Math_obj::ceil(cy);
HXDLIN( 513)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            						}
            						else {
HXLINE( 513)							int ii_min15 = ::Math_obj::floor(by);
HXDLIN( 513)							int ii_max15 = ::Math_obj::ceil(dy);
HXDLIN( 513)							yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            						}
            					}
HXDLIN( 513)					 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 513)					if (hasUndo1) {
HXLINE( 513)						int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 513)						int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 513)						 ::Dynamic imageType1 = null();
HXDLIN( 513)						 ::pi_xy::ImageStruct this32 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 513)						if (::hx::IsNull( imageType1 )) {
HXLINE(  54)							imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 513)						::Dynamic undoImage4;
HXDLIN( 513)						switch((int)(( (int)(imageType1) ))){
            							case (int)0: {
HXLINE( 513)								 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 513)								 ::iterMagic::BytesImg b6 = byt1;
HXDLIN( 513)								{
HXLINE( 513)									b6->width = width1;
HXDLIN( 513)									b6->height = height1;
HXDLIN( 513)									b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 513)									b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 513)									{
HXLINE( 513)										int len2 = b6->length;
HXDLIN( 513)										int w1 = 0;
HXDLIN( 513)										{
HXLINE( 513)											int _g20 = 0;
HXDLIN( 513)											int _g21 = b6->height;
HXDLIN( 513)											while((_g20 < _g21)){
HXLINE( 513)												_g20 = (_g20 + 1);
HXDLIN( 513)												int y3 = (_g20 - 1);
HXDLIN( 513)												{
HXLINE( 513)													int _g22 = 0;
HXDLIN( 513)													int _g23 = b6->width;
HXDLIN( 513)													while((_g22 < _g23)){
HXLINE( 513)														_g22 = (_g22 + 1);
HXDLIN( 513)														int x3 = (_g22 - 1);
HXDLIN( 513)														{
HXLINE( 513)															w1 = (w1 + 1);
HXDLIN( 513)															b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 513)														{
HXLINE( 513)															w1 = (w1 + 1);
HXDLIN( 513)															b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 513)														{
HXLINE( 513)															w1 = (w1 + 1);
HXDLIN( 513)															b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 513)														{
HXLINE( 513)															w1 = (w1 + 1);
HXDLIN( 513)															b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 513)								undoImage4 = b6;
            							}
            							break;
            							case (int)1: {
HXLINE( 513)								 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 513)								 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN( 513)								{
HXLINE( 513)									a7->width = width1;
HXDLIN( 513)									a7->height = height1;
HXDLIN( 513)									a7->data = ::Array_obj< int >::__new(0);
HXDLIN( 513)									a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 513)									{
HXLINE( 513)										int _g24 = 0;
HXDLIN( 513)										int _g25 = a7->length;
HXDLIN( 513)										while((_g24 < _g25)){
HXLINE( 513)											_g24 = (_g24 + 1);
HXDLIN( 513)											int i10 = (_g24 - 1);
HXDLIN( 513)											a7->data[i10] = 0;
            										}
            									}
            								}
HXDLIN( 513)								undoImage4 = a7;
            							}
            							break;
            							case (int)2: {
HXLINE( 513)								 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 513)								 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN( 513)								{
HXLINE( 513)									b7->width = width1;
HXDLIN( 513)									b7->height = height1;
HXDLIN( 513)									b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 513)									int size1 = (b7->length * 4);
HXDLIN( 513)									b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 513)									{
HXLINE( 513)										int _g26 = 0;
HXDLIN( 513)										int _g27 = b7->length;
HXDLIN( 513)										while((_g26 < _g27)){
HXLINE( 513)											_g26 = (_g26 + 1);
HXDLIN( 513)											int i11 = (_g26 - 1);
HXDLIN( 513)											{
HXLINE( 513)												 ::haxe::io::ArrayBufferViewImpl this33 = b7->data;
HXDLIN( 513)												bool undoImage5;
HXDLIN( 513)												if ((i11 >= 0)) {
HXLINE( 513)													undoImage5 = (i11 < (this33->byteLength >> 2));
            												}
            												else {
HXLINE( 513)													undoImage5 = false;
            												}
HXDLIN( 513)												if (undoImage5) {
HXLINE( 513)													 ::haxe::io::Bytes _this1 = this33->bytes;
HXDLIN( 513)													int pos1 = ((i11 << 2) + this33->byteOffset);
HXDLIN( 513)													_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 513)													_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 513)													_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 513)													_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 513)								undoImage4 = b7;
            							}
            							break;
            							case (int)3: {
HXLINE( 513)								 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 513)								 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 513)								{
HXLINE( 513)									v2->width = width1;
HXDLIN( 513)									v2->height = height1;
HXDLIN( 513)									v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 513)									v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 513)									{
HXLINE( 513)										int _g28 = 0;
HXDLIN( 513)										int _g29 = v2->length;
HXDLIN( 513)										while((_g28 < _g29)){
HXLINE( 513)											_g28 = (_g28 + 1);
HXDLIN( 513)											int i12 = (_g28 - 1);
HXDLIN( 513)											v2->data->__unsafe_set(i12,0);
            										}
            									}
            								}
HXDLIN( 513)								undoImage4 = v2;
            							}
            							break;
            							case (int)4: {
HXLINE( 513)								 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 513)								 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN( 513)								{
HXLINE( 513)									b8->width = width1;
HXDLIN( 513)									b8->height = height1;
HXDLIN( 513)									b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 513)									b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 513)									{
HXLINE( 513)										int len3 = b8->length;
HXDLIN( 513)										 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN( 513)										if (::hx::IsNull( d1->head )) {
HXLINE( 513)											int _g30 = 0;
HXDLIN( 513)											int _g31 = len3;
HXDLIN( 513)											while((_g30 < _g31)){
HXLINE( 513)												_g30 = (_g30 + 1);
HXDLIN( 513)												int i13 = (_g30 - 1);
HXDLIN( 513)												d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            											}
            										}
            										else {
HXLINE( 513)											int _g32 = 0;
HXDLIN( 513)											int _g33 = len3;
HXDLIN( 513)											while((_g32 < _g33)){
HXLINE( 513)												_g32 = (_g32 + 1);
HXDLIN( 513)												int i14 = (_g32 - 1);
HXDLIN( 513)												{
HXLINE( 513)													 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN( 513)													 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 513)													{
HXLINE( 513)														int _g34 = 0;
HXDLIN( 513)														int _g35 = i14;
HXDLIN( 513)														while((_g34 < _g35)){
HXLINE( 513)															_g34 = (_g34 + 1);
HXDLIN( 513)															int i15 = (_g34 - 1);
HXLINE( 345)															prev1 = l1;
HXLINE( 346)															l1 = l1->next;
            														}
            													}
HXLINE( 513)													if (::hx::IsNull( prev1 )) {
HXLINE( 513)														b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 513)														l1 = null();
            													}
            													else {
HXLINE( 513)														prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 513)														l1 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 513)								undoImage4 = b8;
            							}
            							break;
            						}
HXDLIN( 513)						this32->image = undoImage4;
HXDLIN( 513)						this32->width = width1;
HXDLIN( 513)						this32->height = height1;
HXDLIN( 513)						this32->imageType = ( (int)(imageType1) );
HXDLIN( 513)						undoImage3 = this32;
HXDLIN( 513)						{
HXLINE( 513)							int rectLeft1 = xIter31->start;
HXDLIN( 513)							int rectTop1 = yIter31->start;
HXDLIN( 513)							int rectRight1 = xIter31->max;
HXDLIN( 513)							bool forceClear1 = false;
HXDLIN( 513)							{
HXLINE( 513)								int _g36 = rectTop1;
HXDLIN( 513)								int _g37 = yIter31->max;
HXDLIN( 513)								while((_g36 < _g37)){
HXLINE( 513)									_g36 = (_g36 + 1);
HXDLIN( 513)									int dy2 = (_g36 - 1);
HXDLIN( 513)									{
HXLINE( 513)										int _g38 = rectLeft1;
HXDLIN( 513)										int _g39 = rectRight1;
HXDLIN( 513)										while((_g38 < _g39)){
HXLINE( 513)											_g38 = (_g38 + 1);
HXDLIN( 513)											int dx2 = (_g38 - 1);
HXDLIN( 513)											::Dynamic this34 = pixelImage->image;
HXDLIN( 513)											int index4;
HXDLIN( 513)											if (pixelImage->useVirtualPos) {
HXLINE( 513)												index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 513)												index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            											}
HXDLIN( 513)											int c3 = ::iterMagic::Iimg_obj::get(this34,index4);
HXDLIN( 513)											int col1;
HXDLIN( 513)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)												col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            											}
            											else {
HXLINE( 513)												col1 = c3;
            											}
HXDLIN( 513)											bool hitQuad9;
HXDLIN( 513)											if (pixelImage->useMask) {
HXLINE( 513)												hitQuad9 = ::hx::IsNotNull( pixelImage->mask );
            											}
            											else {
HXLINE( 513)												hitQuad9 = false;
            											}
HXDLIN( 513)											if (hitQuad9) {
HXLINE( 513)												 ::pi_xy::ImageStruct this35 = pixelImage->mask;
HXDLIN( 513)												::Dynamic this36 = this35->image;
HXDLIN( 513)												int index5;
HXDLIN( 513)												if (this35->useVirtualPos) {
HXLINE( 513)													index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this35->virtualY) * ( (Float)(this35->width) )) + dx2) - this35->virtualX));
            												}
            												else {
HXLINE( 513)													index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this35->width) + dx2)) ));
            												}
HXDLIN( 513)												int c4 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN( 513)												int v3;
HXDLIN( 513)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)													v3 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            												}
            												else {
HXLINE( 513)													v3 = c4;
            												}
HXDLIN( 513)												int maskPixel1 = v3;
HXDLIN( 513)												int this37 = col1;
HXDLIN( 513)												if ((maskPixel1 == 0)) {
HXLINE( 513)													col1 = this37;
            												}
            												else {
HXLINE( 513)													Float m01;
HXDLIN( 513)													int this38 = ((maskPixel1 >> 24) & 255);
HXDLIN( 513)													if ((this38 == 0)) {
HXLINE( 513)														m01 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														m01 = (( (Float)(this38) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float m11;
HXDLIN( 513)													int this39 = ((maskPixel1 >> 16) & 255);
HXDLIN( 513)													if ((this39 == 0)) {
HXLINE( 513)														m11 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														m11 = (( (Float)(this39) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float m21;
HXDLIN( 513)													int this40 = ((maskPixel1 >> 8) & 255);
HXDLIN( 513)													if ((this40 == 0)) {
HXLINE( 513)														m21 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														m21 = (( (Float)(this40) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float m31;
HXDLIN( 513)													int this41 = (maskPixel1 & 255);
HXDLIN( 513)													if ((this41 == 0)) {
HXLINE( 513)														m31 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														m31 = (( (Float)(this41) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this37 >> 24) & 255)) )));
HXDLIN( 513)													int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this37 >> 16) & 255)) )));
HXDLIN( 513)													int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this37 >> 8) & 255)) )));
HXDLIN( 513)													int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this37 & 255)) )));
HXDLIN( 513)													col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 513)											if ((col1 != 0)) {
HXLINE( 513)												int x4 = (dx2 - rectLeft1);
HXDLIN( 513)												int y4 = (dy2 - rectTop1);
HXDLIN( 513)												int c5 = col1;
HXDLIN( 513)												bool hitQuad10;
HXDLIN( 513)												if ((((c5 >> 24) & 255) < 254)) {
HXLINE( 513)													hitQuad10 = undoImage3->transparent;
            												}
            												else {
HXLINE( 513)													hitQuad10 = false;
            												}
HXDLIN( 513)												if (hitQuad10) {
HXLINE( 513)													int location2;
HXDLIN( 513)													if (undoImage3->useVirtualPos) {
HXLINE( 513)														location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            													}
            													else {
HXLINE( 513)														location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            													}
HXDLIN( 513)													int this42 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 513)													int this43;
HXDLIN( 513)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)														this43 = ((((((this42 >> 24) & 255) << 24) | ((this42 & 255) << 16)) | (((this42 >> 8) & 255) << 8)) | ((this42 >> 16) & 255));
            													}
            													else {
HXLINE( 513)														this43 = this42;
            													}
HXDLIN( 513)													Float a13;
HXDLIN( 513)													int this44 = ((this43 >> 24) & 255);
HXDLIN( 513)													if ((this44 == 0)) {
HXLINE( 513)														a13 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														a13 = (( (Float)(this44) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float r12;
HXDLIN( 513)													int this45 = ((this43 >> 16) & 255);
HXDLIN( 513)													if ((this45 == 0)) {
HXLINE( 513)														r12 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														r12 = (( (Float)(this45) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float g12;
HXDLIN( 513)													int this46 = ((this43 >> 8) & 255);
HXDLIN( 513)													if ((this46 == 0)) {
HXLINE( 513)														g12 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														g12 = (( (Float)(this46) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float b13;
HXDLIN( 513)													int this47 = (this43 & 255);
HXDLIN( 513)													if ((this47 == 0)) {
HXLINE( 513)														b13 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														b13 = (( (Float)(this47) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float a22;
HXDLIN( 513)													int this48 = ((col1 >> 24) & 255);
HXDLIN( 513)													if ((this48 == 0)) {
HXLINE( 513)														a22 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														a22 = (( (Float)(this48) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float r22;
HXDLIN( 513)													int this49 = ((col1 >> 16) & 255);
HXDLIN( 513)													if ((this49 == 0)) {
HXLINE( 513)														r22 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														r22 = (( (Float)(this49) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float g22;
HXDLIN( 513)													int this50 = ((col1 >> 8) & 255);
HXDLIN( 513)													if ((this50 == 0)) {
HXLINE( 513)														g22 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														g22 = (( (Float)(this50) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float b23;
HXDLIN( 513)													int this51 = (col1 & 255);
HXDLIN( 513)													if ((this51 == 0)) {
HXLINE( 513)														b23 = ((Float)0.);
            													}
            													else {
HXLINE( 513)														b23 = (( (Float)(this51) ) / ( (Float)(255) ));
            													}
HXDLIN( 513)													Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 513)													int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 513)													int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 513)													int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 513)													int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 513)													int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN( 513)													{
HXLINE( 513)														int hitQuad11;
HXDLIN( 513)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)															hitQuad11 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            														}
            														else {
HXLINE( 513)															hitQuad11 = blended2;
            														}
HXDLIN( 513)														::iterMagic::Iimg_obj::set(undoImage3->image,location2,hitQuad11);
            													}
            												}
            												else {
HXLINE( 513)													::Dynamic this52 = undoImage3->image;
HXDLIN( 513)													int index6;
HXDLIN( 513)													if (undoImage3->useVirtualPos) {
HXLINE( 513)														index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            													}
            													else {
HXLINE( 513)														index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            													}
HXDLIN( 513)													int hitQuad12;
HXDLIN( 513)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)														hitQuad12 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            													}
            													else {
HXLINE( 513)														hitQuad12 = c5;
            													}
HXDLIN( 513)													::iterMagic::Iimg_obj::set(this52,index6,hitQuad12);
            												}
            											}
            											else {
HXLINE( 513)												if (forceClear1) {
HXLINE( 513)													::Dynamic this53 = undoImage3->image;
HXDLIN( 513)													int x5 = (dx2 - rectLeft1);
HXDLIN( 513)													int y5 = (dy2 - rectTop1);
HXDLIN( 513)													int index7;
HXDLIN( 513)													if (undoImage3->useVirtualPos) {
HXLINE( 513)														index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            													}
            													else {
HXLINE( 513)														index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            													}
HXDLIN( 513)													::iterMagic::Iimg_obj::set(this53,index7,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 513)					{
HXLINE( 513)						int _g_min2 = xIter31->start;
HXDLIN( 513)						int _g_max2 = xIter31->max;
HXDLIN( 513)						while((_g_min2 < _g_max2)){
HXLINE( 513)							_g_min2 = (_g_min2 + 1);
HXDLIN( 513)							int px2 = (_g_min2 - 1);
HXDLIN( 513)							Float pcx1 = (( (Float)(px2) ) - dx);
HXDLIN( 513)							{
HXLINE( 513)								int _g_min3 = yIter31->start;
HXDLIN( 513)								int _g_max3 = yIter31->max;
HXDLIN( 513)								while((_g_min3 < _g_max3)){
HXLINE( 513)									_g_min3 = (_g_min3 + 1);
HXDLIN( 513)									int py2 = (_g_min3 - 1);
HXDLIN( 513)									Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN( 513)									Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 513)									Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 513)									Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 513)									Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 513)									Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 513)									bool hitQuad13;
HXDLIN( 513)									bool hitQuad14;
HXDLIN( 513)									if ((ratioA1 >= 0)) {
HXLINE( 513)										hitQuad14 = (ratioB1 >= 0);
            									}
            									else {
HXLINE( 513)										hitQuad14 = false;
            									}
HXDLIN( 513)									if (hitQuad14) {
HXLINE( 513)										hitQuad13 = (ratioC1 >= 0);
            									}
            									else {
HXLINE( 513)										hitQuad13 = false;
            									}
HXDLIN( 513)									if (hitQuad13) {
HXLINE( 513)										int i16 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA1) + (( (Float)(aB1) ) * ratioB1)) + (( (Float)(aC1) ) * ratioC1)));
HXDLIN( 513)										if ((i16 > 255)) {
HXLINE(  24)											i16 = 255;
            										}
HXLINE( 513)										if ((i16 < 0)) {
HXLINE(  25)											i16 = 0;
            										}
HXLINE( 513)										int a9 = i16;
HXDLIN( 513)										int i17 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA1) + (( (Float)(rB1) ) * ratioB1)) + (( (Float)(rC1) ) * ratioC1)));
HXDLIN( 513)										if ((i17 > 255)) {
HXLINE(  24)											i17 = 255;
            										}
HXLINE( 513)										if ((i17 < 0)) {
HXLINE(  25)											i17 = 0;
            										}
HXLINE( 513)										int r6 = i17;
HXDLIN( 513)										int i18 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA1) + (( (Float)(gB1) ) * ratioB1)) + (( (Float)(gC1) ) * ratioC1)));
HXDLIN( 513)										if ((i18 > 255)) {
HXLINE(  24)											i18 = 255;
            										}
HXLINE( 513)										if ((i18 < 0)) {
HXLINE(  25)											i18 = 0;
            										}
HXLINE( 513)										int g6 = i18;
HXDLIN( 513)										int i19 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA1) + (( (Float)(bB1) ) * ratioB1)) + (( (Float)(bC1) ) * ratioC1)));
HXDLIN( 513)										if ((i19 > 255)) {
HXLINE(  24)											i19 = 255;
            										}
HXLINE( 513)										if ((i19 < 0)) {
HXLINE(  25)											i19 = 0;
            										}
HXLINE( 513)										int b10 = i19;
HXDLIN( 513)										{
HXLINE( 513)											int location3;
HXDLIN( 513)											if (pixelImage->useVirtualPos) {
HXLINE( 513)												location3 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 513)												location3 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            											}
HXDLIN( 513)											bool hitQuad15;
HXDLIN( 513)											if (pixelImage->transparent) {
HXLINE( 513)												hitQuad15 = (a9 < 254);
            											}
            											else {
HXLINE( 513)												hitQuad15 = false;
            											}
HXDLIN( 513)											if (hitQuad15) {
HXLINE( 513)												int this54 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN( 513)												int old1;
HXDLIN( 513)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)													old1 = ((((((this54 >> 24) & 255) << 24) | ((this54 & 255) << 16)) | (((this54 >> 8) & 255) << 8)) | ((this54 >> 16) & 255));
            												}
            												else {
HXLINE( 513)													old1 = this54;
            												}
HXDLIN( 513)												int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 513)												Float a14;
HXDLIN( 513)												int this55 = ((old1 >> 24) & 255);
HXDLIN( 513)												if ((this55 == 0)) {
HXLINE( 513)													a14 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													a14 = (( (Float)(this55) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float r13;
HXDLIN( 513)												int this56 = ((old1 >> 16) & 255);
HXDLIN( 513)												if ((this56 == 0)) {
HXLINE( 513)													r13 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													r13 = (( (Float)(this56) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float g13;
HXDLIN( 513)												int this57 = ((old1 >> 8) & 255);
HXDLIN( 513)												if ((this57 == 0)) {
HXLINE( 513)													g13 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													g13 = (( (Float)(this57) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float b14;
HXDLIN( 513)												int this58 = (old1 & 255);
HXDLIN( 513)												if ((this58 == 0)) {
HXLINE( 513)													b14 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													b14 = (( (Float)(this58) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float a23;
HXDLIN( 513)												int this59 = ((rhs1 >> 24) & 255);
HXDLIN( 513)												if ((this59 == 0)) {
HXLINE( 513)													a23 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													a23 = (( (Float)(this59) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float r23;
HXDLIN( 513)												int this60 = ((rhs1 >> 16) & 255);
HXDLIN( 513)												if ((this60 == 0)) {
HXLINE( 513)													r23 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													r23 = (( (Float)(this60) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float g23;
HXDLIN( 513)												int this61 = ((rhs1 >> 8) & 255);
HXDLIN( 513)												if ((this61 == 0)) {
HXLINE( 513)													g23 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													g23 = (( (Float)(this61) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float b24;
HXDLIN( 513)												int this62 = (rhs1 & 255);
HXDLIN( 513)												if ((this62 == 0)) {
HXLINE( 513)													b24 = ((Float)0.);
            												}
            												else {
HXLINE( 513)													b24 = (( (Float)(this62) ) / ( (Float)(255) ));
            												}
HXDLIN( 513)												Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 513)												int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 513)												int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 513)												int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 513)												int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 513)												int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN( 513)												{
HXLINE( 513)													int hitQuad16;
HXDLIN( 513)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 513)														hitQuad16 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            													}
            													else {
HXLINE( 513)														hitQuad16 = blended3;
            													}
HXDLIN( 513)													::iterMagic::Iimg_obj::set(pixelImage->image,location3,hitQuad16);
            												}
            											}
            											else {
HXLINE( 513)												int value1;
HXDLIN( 513)												if (pixelImage->isLittle) {
HXLINE( 513)													value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            												}
            												else {
HXLINE( 513)													value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            												}
HXDLIN( 513)												::iterMagic::Iimg_obj::set(pixelImage->image,location3,value1);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 513)					if ((hasHit1 == false)) {
HXLINE( 513)						 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,cx,cy,dx,dy,true);
HXDLIN( 513)						if (hasUndo1) {
HXLINE( 513)							v4->undoImage = undoImage3;
HXDLIN( 513)							v4->undoX = xIter31->start;
HXDLIN( 513)							v4->undoY = yIter31->start;
            						}
            					}
            				}
HXDLIN( 513)				 ::pi_xy::algo::HitQuad v5 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXLINE( 511)				hitQuad = v5;
            			}
            			else {
HXLINE( 515)				Float sin2 = ::Math_obj::sin(theta);
HXDLIN( 515)				Float cos2 = ::Math_obj::cos(theta);
HXDLIN( 515)				Float radius11 = ((thicker - ((thicker - thick) / goldenRatio)) / ( (Float)(2) ));
HXDLIN( 515)				Float radius22 = (thick / ( (Float)(2) ));
HXDLIN( 515)				Float dx3 = ((Float)0.1);
HXDLIN( 515)				Float dy3 = radius11;
HXDLIN( 515)				Float cx1 = h2;
HXDLIN( 515)				Float cy1 = radius22;
HXDLIN( 515)				Float bx1 = h2;
HXDLIN( 515)				Float by1 = -(radius22);
HXDLIN( 515)				Float ax1 = ((Float)0.1);
HXDLIN( 515)				Float ay1 = -(radius11);
HXDLIN( 515)				Float temp1 = ((Float)0.);
HXLINE( 525)				temp1 = (px + ((ax1 * cos2) - (ay1 * sin2)));
HXLINE( 526)				ay1 = (py + ((ay1 * cos2) + (ax1 * sin2)));
HXLINE( 527)				ax1 = temp1;
HXLINE( 529)				temp1 = (px + ((bx1 * cos2) - (by1 * sin2)));
HXLINE( 530)				by1 = (py + ((by1 * cos2) + (bx1 * sin2)));
HXLINE( 531)				bx1 = temp1;
HXLINE( 533)				temp1 = (px + ((cx1 * cos2) - (cy1 * sin2)));
HXLINE( 534)				cy1 = (py + ((cy1 * cos2) + (cx1 * sin2)));
HXLINE( 535)				cx1 = temp1;
HXLINE( 537)				temp1 = (px + ((dx3 * cos2) - (dy3 * sin2)));
HXLINE( 538)				dy3 = (py + ((dy3 * cos2) + (dx3 * sin2)));
HXLINE( 539)				dx3 = temp1;
HXLINE( 515)				{
HXLINE( 515)					bool hasUndo2 = false;
HXDLIN( 515)					int aA2 = ((color1 >> 24) & 255);
HXDLIN( 515)					int rA2 = ((color1 >> 16) & 255);
HXDLIN( 515)					int gA2 = ((color1 >> 8) & 255);
HXDLIN( 515)					int bA2 = (color1 & 255);
HXDLIN( 515)					int aB2 = ((color1 >> 24) & 255);
HXDLIN( 515)					int rB2 = ((color1 >> 16) & 255);
HXDLIN( 515)					int gB2 = ((color1 >> 8) & 255);
HXDLIN( 515)					int bB2 = (color1 & 255);
HXDLIN( 515)					int aC2 = ((color2 >> 24) & 255);
HXDLIN( 515)					int rC2 = ((color2 >> 16) & 255);
HXDLIN( 515)					int gC2 = ((color2 >> 8) & 255);
HXDLIN( 515)					int bC2 = (color2 & 255);
HXDLIN( 515)					Float bcx2 = (bx1 - dx3);
HXDLIN( 515)					Float bcy2 = (by1 - dy3);
HXDLIN( 515)					Float acx2 = (ax1 - dx3);
HXDLIN( 515)					Float acy2 = (ay1 - dy3);
HXDLIN( 515)					Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 515)					Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 515)					Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 515)					Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 515)					 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 515)					if ((ax1 > bx1)) {
HXLINE( 515)						if ((ax1 > dx3)) {
HXLINE( 515)							int min8;
HXDLIN( 515)							if ((bx1 > dx3)) {
HXLINE( 515)								min8 = ::Math_obj::floor(dx3);
            							}
            							else {
HXLINE( 515)								min8 = ::Math_obj::floor(bx1);
            							}
HXDLIN( 515)							int ii_min16 = min8;
HXDLIN( 515)							int ii_max16 = ::Math_obj::ceil(ax1);
HXDLIN( 515)							xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            						}
            						else {
HXLINE( 515)							int ii_min17 = ::Math_obj::floor(bx1);
HXDLIN( 515)							int ii_max17 = ::Math_obj::ceil(dx3);
HXDLIN( 515)							xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            						}
            					}
            					else {
HXLINE( 515)						if ((bx1 > dx3)) {
HXLINE( 515)							int min9;
HXDLIN( 515)							if ((ax1 > dx3)) {
HXLINE( 515)								min9 = ::Math_obj::floor(dx3);
            							}
            							else {
HXLINE( 515)								min9 = ::Math_obj::ceil(ax1);
            							}
HXDLIN( 515)							int ii_min18 = min9;
HXDLIN( 515)							int ii_max18 = ::Math_obj::ceil(bx1);
HXDLIN( 515)							xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            						}
            						else {
HXLINE( 515)							int ii_min19 = ::Math_obj::floor(ax1);
HXDLIN( 515)							int ii_max19 = ::Math_obj::ceil(dx3);
HXDLIN( 515)							xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            						}
            					}
HXDLIN( 515)					 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 515)					if ((ay1 > by1)) {
HXLINE( 515)						if ((ay1 > dy3)) {
HXLINE( 515)							int min10;
HXDLIN( 515)							if ((by1 > dy3)) {
HXLINE( 515)								min10 = ::Math_obj::floor(dy3);
            							}
            							else {
HXLINE( 515)								min10 = ::Math_obj::floor(by1);
            							}
HXDLIN( 515)							int ii_min20 = min10;
HXDLIN( 515)							int ii_max20 = ::Math_obj::ceil(ay1);
HXDLIN( 515)							yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            						}
            						else {
HXLINE( 515)							int ii_min21 = ::Math_obj::floor(by1);
HXDLIN( 515)							int ii_max21 = ::Math_obj::ceil(dy3);
HXDLIN( 515)							yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            						}
            					}
            					else {
HXLINE( 515)						if ((by1 > dy3)) {
HXLINE( 515)							int min11;
HXDLIN( 515)							if ((ay1 > dy3)) {
HXLINE( 515)								min11 = ::Math_obj::floor(dy3);
            							}
            							else {
HXLINE( 515)								min11 = ::Math_obj::ceil(ay1);
            							}
HXDLIN( 515)							int ii_min22 = min11;
HXDLIN( 515)							int ii_max22 = ::Math_obj::ceil(by1);
HXDLIN( 515)							yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            						}
            						else {
HXLINE( 515)							int ii_min23 = ::Math_obj::floor(ay1);
HXDLIN( 515)							int ii_max23 = ::Math_obj::ceil(dy3);
HXDLIN( 515)							yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            						}
            					}
HXDLIN( 515)					 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 515)					if (hasUndo2) {
HXLINE( 515)						int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 515)						int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 515)						 ::Dynamic imageType2 = null();
HXDLIN( 515)						 ::pi_xy::ImageStruct this63 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 515)						if (::hx::IsNull( imageType2 )) {
HXLINE(  54)							imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 515)						::Dynamic undoImage7;
HXDLIN( 515)						switch((int)(( (int)(imageType2) ))){
            							case (int)0: {
HXLINE( 515)								 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 515)								 ::iterMagic::BytesImg b16 = byt2;
HXDLIN( 515)								{
HXLINE( 515)									b16->width = width2;
HXDLIN( 515)									b16->height = height2;
HXDLIN( 515)									b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 515)									b16->data = ::haxe::io::Bytes_obj::alloc((b16->length * 4));
HXDLIN( 515)									{
HXLINE( 515)										int len4 = b16->length;
HXDLIN( 515)										int w2 = 0;
HXDLIN( 515)										{
HXLINE( 515)											int _g40 = 0;
HXDLIN( 515)											int _g41 = b16->height;
HXDLIN( 515)											while((_g40 < _g41)){
HXLINE( 515)												_g40 = (_g40 + 1);
HXDLIN( 515)												int y6 = (_g40 - 1);
HXDLIN( 515)												{
HXLINE( 515)													int _g42 = 0;
HXDLIN( 515)													int _g43 = b16->width;
HXDLIN( 515)													while((_g42 < _g43)){
HXLINE( 515)														_g42 = (_g42 + 1);
HXDLIN( 515)														int x6 = (_g42 - 1);
HXDLIN( 515)														{
HXLINE( 515)															w2 = (w2 + 1);
HXDLIN( 515)															b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 515)														{
HXLINE( 515)															w2 = (w2 + 1);
HXDLIN( 515)															b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 515)														{
HXLINE( 515)															w2 = (w2 + 1);
HXDLIN( 515)															b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 515)														{
HXLINE( 515)															w2 = (w2 + 1);
HXDLIN( 515)															b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 515)								undoImage7 = b16;
            							}
            							break;
            							case (int)1: {
HXLINE( 515)								 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 515)								 ::iterMagic::ArrIntImg a15 = arrI2;
HXDLIN( 515)								{
HXLINE( 515)									a15->width = width2;
HXDLIN( 515)									a15->height = height2;
HXDLIN( 515)									a15->data = ::Array_obj< int >::__new(0);
HXDLIN( 515)									a15->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 515)									{
HXLINE( 515)										int _g44 = 0;
HXDLIN( 515)										int _g45 = a15->length;
HXDLIN( 515)										while((_g44 < _g45)){
HXLINE( 515)											_g44 = (_g44 + 1);
HXDLIN( 515)											int i20 = (_g44 - 1);
HXDLIN( 515)											a15->data[i20] = 0;
            										}
            									}
            								}
HXDLIN( 515)								undoImage7 = a15;
            							}
            							break;
            							case (int)2: {
HXLINE( 515)								 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 515)								 ::iterMagic::U32ArrImg b17 = u32a2;
HXDLIN( 515)								{
HXLINE( 515)									b17->width = width2;
HXDLIN( 515)									b17->height = height2;
HXDLIN( 515)									b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 515)									int size2 = (b17->length * 4);
HXDLIN( 515)									b17->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 515)									{
HXLINE( 515)										int _g46 = 0;
HXDLIN( 515)										int _g47 = b17->length;
HXDLIN( 515)										while((_g46 < _g47)){
HXLINE( 515)											_g46 = (_g46 + 1);
HXDLIN( 515)											int i21 = (_g46 - 1);
HXDLIN( 515)											{
HXLINE( 515)												 ::haxe::io::ArrayBufferViewImpl this64 = b17->data;
HXDLIN( 515)												bool undoImage8;
HXDLIN( 515)												if ((i21 >= 0)) {
HXLINE( 515)													undoImage8 = (i21 < (this64->byteLength >> 2));
            												}
            												else {
HXLINE( 515)													undoImage8 = false;
            												}
HXDLIN( 515)												if (undoImage8) {
HXLINE( 515)													 ::haxe::io::Bytes _this2 = this64->bytes;
HXDLIN( 515)													int pos2 = ((i21 << 2) + this64->byteOffset);
HXDLIN( 515)													_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 515)													_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 515)													_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 515)													_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 515)								undoImage7 = b17;
            							}
            							break;
            							case (int)3: {
HXLINE( 515)								 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 515)								 ::iterMagic::VecIntImg v6 = vec2;
HXDLIN( 515)								{
HXLINE( 515)									v6->width = width2;
HXDLIN( 515)									v6->height = height2;
HXDLIN( 515)									v6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 515)									v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN( 515)									{
HXLINE( 515)										int _g48 = 0;
HXDLIN( 515)										int _g49 = v6->length;
HXDLIN( 515)										while((_g48 < _g49)){
HXLINE( 515)											_g48 = (_g48 + 1);
HXDLIN( 515)											int i22 = (_g48 - 1);
HXDLIN( 515)											v6->data->__unsafe_set(i22,0);
            										}
            									}
            								}
HXDLIN( 515)								undoImage7 = v6;
            							}
            							break;
            							case (int)4: {
HXLINE( 515)								 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 515)								 ::iterMagic::StackIntImg b18 = sInt2;
HXDLIN( 515)								{
HXLINE( 515)									b18->width = width2;
HXDLIN( 515)									b18->height = height2;
HXDLIN( 515)									b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 515)									b18->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 515)									{
HXLINE( 515)										int len5 = b18->length;
HXDLIN( 515)										 ::haxe::ds::GenericStack_Int d2 = b18->data;
HXDLIN( 515)										if (::hx::IsNull( d2->head )) {
HXLINE( 515)											int _g50 = 0;
HXDLIN( 515)											int _g51 = len5;
HXDLIN( 515)											while((_g50 < _g51)){
HXLINE( 515)												_g50 = (_g50 + 1);
HXDLIN( 515)												int i23 = (_g50 - 1);
HXDLIN( 515)												d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            											}
            										}
            										else {
HXLINE( 515)											int _g52 = 0;
HXDLIN( 515)											int _g53 = len5;
HXDLIN( 515)											while((_g52 < _g53)){
HXLINE( 515)												_g52 = (_g52 + 1);
HXDLIN( 515)												int i24 = (_g52 - 1);
HXDLIN( 515)												{
HXLINE( 515)													 ::haxe::ds::GenericCell_Int l2 = b18->data->head;
HXDLIN( 515)													 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 515)													{
HXLINE( 515)														int _g54 = 0;
HXDLIN( 515)														int _g55 = i24;
HXDLIN( 515)														while((_g54 < _g55)){
HXLINE( 515)															_g54 = (_g54 + 1);
HXDLIN( 515)															int i25 = (_g54 - 1);
HXLINE( 345)															prev2 = l2;
HXLINE( 346)															l2 = l2->next;
            														}
            													}
HXLINE( 515)													if (::hx::IsNull( prev2 )) {
HXLINE( 515)														b18->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 515)														l2 = null();
            													}
            													else {
HXLINE( 515)														prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 515)														l2 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 515)								undoImage7 = b18;
            							}
            							break;
            						}
HXDLIN( 515)						this63->image = undoImage7;
HXDLIN( 515)						this63->width = width2;
HXDLIN( 515)						this63->height = height2;
HXDLIN( 515)						this63->imageType = ( (int)(imageType2) );
HXDLIN( 515)						undoImage6 = this63;
HXDLIN( 515)						{
HXLINE( 515)							int rectLeft2 = xIter32->start;
HXDLIN( 515)							int rectTop2 = yIter32->start;
HXDLIN( 515)							int rectRight2 = xIter32->max;
HXDLIN( 515)							bool forceClear2 = false;
HXDLIN( 515)							{
HXLINE( 515)								int _g56 = rectTop2;
HXDLIN( 515)								int _g57 = yIter32->max;
HXDLIN( 515)								while((_g56 < _g57)){
HXLINE( 515)									_g56 = (_g56 + 1);
HXDLIN( 515)									int dy4 = (_g56 - 1);
HXDLIN( 515)									{
HXLINE( 515)										int _g58 = rectLeft2;
HXDLIN( 515)										int _g59 = rectRight2;
HXDLIN( 515)										while((_g58 < _g59)){
HXLINE( 515)											_g58 = (_g58 + 1);
HXDLIN( 515)											int dx4 = (_g58 - 1);
HXDLIN( 515)											::Dynamic this65 = pixelImage->image;
HXDLIN( 515)											int index8;
HXDLIN( 515)											if (pixelImage->useVirtualPos) {
HXLINE( 515)												index8 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 515)												index8 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            											}
HXDLIN( 515)											int c6 = ::iterMagic::Iimg_obj::get(this65,index8);
HXDLIN( 515)											int col2;
HXDLIN( 515)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)												col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            											}
            											else {
HXLINE( 515)												col2 = c6;
            											}
HXDLIN( 515)											bool hitQuad17;
HXDLIN( 515)											if (pixelImage->useMask) {
HXLINE( 515)												hitQuad17 = ::hx::IsNotNull( pixelImage->mask );
            											}
            											else {
HXLINE( 515)												hitQuad17 = false;
            											}
HXDLIN( 515)											if (hitQuad17) {
HXLINE( 515)												 ::pi_xy::ImageStruct this66 = pixelImage->mask;
HXDLIN( 515)												::Dynamic this67 = this66->image;
HXDLIN( 515)												int index9;
HXDLIN( 515)												if (this66->useVirtualPos) {
HXLINE( 515)													index9 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this66->virtualY) * ( (Float)(this66->width) )) + dx4) - this66->virtualX));
            												}
            												else {
HXLINE( 515)													index9 = ::Std_obj::_hx_int(( (Float)(((dy4 * this66->width) + dx4)) ));
            												}
HXDLIN( 515)												int c7 = ::iterMagic::Iimg_obj::get(this67,index9);
HXDLIN( 515)												int v7;
HXDLIN( 515)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)													v7 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            												}
            												else {
HXLINE( 515)													v7 = c7;
            												}
HXDLIN( 515)												int maskPixel2 = v7;
HXDLIN( 515)												int this68 = col2;
HXDLIN( 515)												if ((maskPixel2 == 0)) {
HXLINE( 515)													col2 = this68;
            												}
            												else {
HXLINE( 515)													Float m02;
HXDLIN( 515)													int this69 = ((maskPixel2 >> 24) & 255);
HXDLIN( 515)													if ((this69 == 0)) {
HXLINE( 515)														m02 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														m02 = (( (Float)(this69) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float m12;
HXDLIN( 515)													int this70 = ((maskPixel2 >> 16) & 255);
HXDLIN( 515)													if ((this70 == 0)) {
HXLINE( 515)														m12 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														m12 = (( (Float)(this70) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float m22;
HXDLIN( 515)													int this71 = ((maskPixel2 >> 8) & 255);
HXDLIN( 515)													if ((this71 == 0)) {
HXLINE( 515)														m22 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														m22 = (( (Float)(this71) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float m32;
HXDLIN( 515)													int this72 = (maskPixel2 & 255);
HXDLIN( 515)													if ((this72 == 0)) {
HXLINE( 515)														m32 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														m32 = (( (Float)(this72) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this68 >> 24) & 255)) )));
HXDLIN( 515)													int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this68 >> 16) & 255)) )));
HXDLIN( 515)													int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this68 >> 8) & 255)) )));
HXDLIN( 515)													int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this68 & 255)) )));
HXDLIN( 515)													col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 515)											if ((col2 != 0)) {
HXLINE( 515)												int x7 = (dx4 - rectLeft2);
HXDLIN( 515)												int y7 = (dy4 - rectTop2);
HXDLIN( 515)												int c8 = col2;
HXDLIN( 515)												bool hitQuad18;
HXDLIN( 515)												if ((((c8 >> 24) & 255) < 254)) {
HXLINE( 515)													hitQuad18 = undoImage6->transparent;
            												}
            												else {
HXLINE( 515)													hitQuad18 = false;
            												}
HXDLIN( 515)												if (hitQuad18) {
HXLINE( 515)													int location4;
HXDLIN( 515)													if (undoImage6->useVirtualPos) {
HXLINE( 515)														location4 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            													}
            													else {
HXLINE( 515)														location4 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            													}
HXDLIN( 515)													int this73 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 515)													int this74;
HXDLIN( 515)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)														this74 = ((((((this73 >> 24) & 255) << 24) | ((this73 & 255) << 16)) | (((this73 >> 8) & 255) << 8)) | ((this73 >> 16) & 255));
            													}
            													else {
HXLINE( 515)														this74 = this73;
            													}
HXDLIN( 515)													Float a16;
HXDLIN( 515)													int this75 = ((this74 >> 24) & 255);
HXDLIN( 515)													if ((this75 == 0)) {
HXLINE( 515)														a16 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														a16 = (( (Float)(this75) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float r14;
HXDLIN( 515)													int this76 = ((this74 >> 16) & 255);
HXDLIN( 515)													if ((this76 == 0)) {
HXLINE( 515)														r14 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														r14 = (( (Float)(this76) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float g14;
HXDLIN( 515)													int this77 = ((this74 >> 8) & 255);
HXDLIN( 515)													if ((this77 == 0)) {
HXLINE( 515)														g14 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														g14 = (( (Float)(this77) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float b19;
HXDLIN( 515)													int this78 = (this74 & 255);
HXDLIN( 515)													if ((this78 == 0)) {
HXLINE( 515)														b19 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														b19 = (( (Float)(this78) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float a24;
HXDLIN( 515)													int this79 = ((col2 >> 24) & 255);
HXDLIN( 515)													if ((this79 == 0)) {
HXLINE( 515)														a24 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														a24 = (( (Float)(this79) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float r24;
HXDLIN( 515)													int this80 = ((col2 >> 16) & 255);
HXDLIN( 515)													if ((this80 == 0)) {
HXLINE( 515)														r24 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														r24 = (( (Float)(this80) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float g24;
HXDLIN( 515)													int this81 = ((col2 >> 8) & 255);
HXDLIN( 515)													if ((this81 == 0)) {
HXLINE( 515)														g24 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														g24 = (( (Float)(this81) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float b25;
HXDLIN( 515)													int this82 = (col2 & 255);
HXDLIN( 515)													if ((this82 == 0)) {
HXLINE( 515)														b25 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														b25 = (( (Float)(this82) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float a34 = (a16 * (( (Float)(1) ) - a24));
HXDLIN( 515)													int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 515)													int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 515)													int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a34) + (b25 * a24))));
HXDLIN( 515)													int a17 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 515)													int blended4 = ((((a17 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN( 515)													{
HXLINE( 515)														int hitQuad19;
HXDLIN( 515)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)															hitQuad19 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            														}
            														else {
HXLINE( 515)															hitQuad19 = blended4;
            														}
HXDLIN( 515)														::iterMagic::Iimg_obj::set(undoImage6->image,location4,hitQuad19);
            													}
            												}
            												else {
HXLINE( 515)													::Dynamic this83 = undoImage6->image;
HXDLIN( 515)													int index10;
HXDLIN( 515)													if (undoImage6->useVirtualPos) {
HXLINE( 515)														index10 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            													}
            													else {
HXLINE( 515)														index10 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            													}
HXDLIN( 515)													int hitQuad20;
HXDLIN( 515)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)														hitQuad20 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            													}
            													else {
HXLINE( 515)														hitQuad20 = c8;
            													}
HXDLIN( 515)													::iterMagic::Iimg_obj::set(this83,index10,hitQuad20);
            												}
            											}
            											else {
HXLINE( 515)												if (forceClear2) {
HXLINE( 515)													::Dynamic this84 = undoImage6->image;
HXDLIN( 515)													int x8 = (dx4 - rectLeft2);
HXDLIN( 515)													int y8 = (dy4 - rectTop2);
HXDLIN( 515)													int index11;
HXDLIN( 515)													if (undoImage6->useVirtualPos) {
HXLINE( 515)														index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            													}
            													else {
HXLINE( 515)														index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            													}
HXDLIN( 515)													::iterMagic::Iimg_obj::set(this84,index11,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 515)					{
HXLINE( 515)						int _g_min4 = xIter32->start;
HXDLIN( 515)						int _g_max4 = xIter32->max;
HXDLIN( 515)						while((_g_min4 < _g_max4)){
HXLINE( 515)							_g_min4 = (_g_min4 + 1);
HXDLIN( 515)							int px3 = (_g_min4 - 1);
HXDLIN( 515)							Float pcx2 = (( (Float)(px3) ) - dx3);
HXDLIN( 515)							{
HXLINE( 515)								int _g_min5 = yIter32->start;
HXDLIN( 515)								int _g_max5 = yIter32->max;
HXDLIN( 515)								while((_g_min5 < _g_max5)){
HXLINE( 515)									_g_min5 = (_g_min5 + 1);
HXDLIN( 515)									int py3 = (_g_min5 - 1);
HXDLIN( 515)									Float pcy2 = (( (Float)(py3) ) - dy3);
HXDLIN( 515)									Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 515)									Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 515)									Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 515)									Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 515)									Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 515)									bool hitQuad21;
HXDLIN( 515)									bool hitQuad22;
HXDLIN( 515)									if ((ratioA2 >= 0)) {
HXLINE( 515)										hitQuad22 = (ratioB2 >= 0);
            									}
            									else {
HXLINE( 515)										hitQuad22 = false;
            									}
HXDLIN( 515)									if (hitQuad22) {
HXLINE( 515)										hitQuad21 = (ratioC2 >= 0);
            									}
            									else {
HXLINE( 515)										hitQuad21 = false;
            									}
HXDLIN( 515)									if (hitQuad21) {
HXLINE( 515)										int i26 = ::Std_obj::_hx_int((((( (Float)(aA2) ) * ratioA2) + (( (Float)(aB2) ) * ratioB2)) + (( (Float)(aC2) ) * ratioC2)));
HXDLIN( 515)										if ((i26 > 255)) {
HXLINE(  24)											i26 = 255;
            										}
HXLINE( 515)										if ((i26 < 0)) {
HXLINE(  25)											i26 = 0;
            										}
HXLINE( 515)										int a18 = i26;
HXDLIN( 515)										int i27 = ::Std_obj::_hx_int((((( (Float)(rA2) ) * ratioA2) + (( (Float)(rB2) ) * ratioB2)) + (( (Float)(rC2) ) * ratioC2)));
HXDLIN( 515)										if ((i27 > 255)) {
HXLINE(  24)											i27 = 255;
            										}
HXLINE( 515)										if ((i27 < 0)) {
HXLINE(  25)											i27 = 0;
            										}
HXLINE( 515)										int r9 = i27;
HXDLIN( 515)										int i28 = ::Std_obj::_hx_int((((( (Float)(gA2) ) * ratioA2) + (( (Float)(gB2) ) * ratioB2)) + (( (Float)(gC2) ) * ratioC2)));
HXDLIN( 515)										if ((i28 > 255)) {
HXLINE(  24)											i28 = 255;
            										}
HXLINE( 515)										if ((i28 < 0)) {
HXLINE(  25)											i28 = 0;
            										}
HXLINE( 515)										int g9 = i28;
HXDLIN( 515)										int i29 = ::Std_obj::_hx_int((((( (Float)(bA2) ) * ratioA2) + (( (Float)(bB2) ) * ratioB2)) + (( (Float)(bC2) ) * ratioC2)));
HXDLIN( 515)										if ((i29 > 255)) {
HXLINE(  24)											i29 = 255;
            										}
HXLINE( 515)										if ((i29 < 0)) {
HXLINE(  25)											i29 = 0;
            										}
HXLINE( 515)										int b26 = i29;
HXDLIN( 515)										{
HXLINE( 515)											int location5;
HXDLIN( 515)											if (pixelImage->useVirtualPos) {
HXLINE( 515)												location5 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px3) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 515)												location5 = ::Std_obj::_hx_int(( (Float)(((py3 * pixelImage->width) + px3)) ));
            											}
HXDLIN( 515)											bool hitQuad23;
HXDLIN( 515)											if (pixelImage->transparent) {
HXLINE( 515)												hitQuad23 = (a18 < 254);
            											}
            											else {
HXLINE( 515)												hitQuad23 = false;
            											}
HXDLIN( 515)											if (hitQuad23) {
HXLINE( 515)												int this85 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN( 515)												int old2;
HXDLIN( 515)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)													old2 = ((((((this85 >> 24) & 255) << 24) | ((this85 & 255) << 16)) | (((this85 >> 8) & 255) << 8)) | ((this85 >> 16) & 255));
            												}
            												else {
HXLINE( 515)													old2 = this85;
            												}
HXDLIN( 515)												int rhs2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
HXDLIN( 515)												Float a19;
HXDLIN( 515)												int this86 = ((old2 >> 24) & 255);
HXDLIN( 515)												if ((this86 == 0)) {
HXLINE( 515)													a19 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													a19 = (( (Float)(this86) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float r15;
HXDLIN( 515)												int this87 = ((old2 >> 16) & 255);
HXDLIN( 515)												if ((this87 == 0)) {
HXLINE( 515)													r15 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													r15 = (( (Float)(this87) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float g15;
HXDLIN( 515)												int this88 = ((old2 >> 8) & 255);
HXDLIN( 515)												if ((this88 == 0)) {
HXLINE( 515)													g15 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													g15 = (( (Float)(this88) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float b110;
HXDLIN( 515)												int this89 = (old2 & 255);
HXDLIN( 515)												if ((this89 == 0)) {
HXLINE( 515)													b110 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													b110 = (( (Float)(this89) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float a25;
HXDLIN( 515)												int this90 = ((rhs2 >> 24) & 255);
HXDLIN( 515)												if ((this90 == 0)) {
HXLINE( 515)													a25 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													a25 = (( (Float)(this90) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float r25;
HXDLIN( 515)												int this91 = ((rhs2 >> 16) & 255);
HXDLIN( 515)												if ((this91 == 0)) {
HXLINE( 515)													r25 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													r25 = (( (Float)(this91) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float g25;
HXDLIN( 515)												int this92 = ((rhs2 >> 8) & 255);
HXDLIN( 515)												if ((this92 == 0)) {
HXLINE( 515)													g25 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													g25 = (( (Float)(this92) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float b27;
HXDLIN( 515)												int this93 = (rhs2 & 255);
HXDLIN( 515)												if ((this93 == 0)) {
HXLINE( 515)													b27 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													b27 = (( (Float)(this93) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float a35 = (a19 * (( (Float)(1) ) - a25));
HXDLIN( 515)												int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 515)												int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 515)												int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a35) + (b27 * a25))));
HXDLIN( 515)												int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 515)												int blended5 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b28);
HXDLIN( 515)												{
HXLINE( 515)													int hitQuad24;
HXDLIN( 515)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)														hitQuad24 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            													}
            													else {
HXLINE( 515)														hitQuad24 = blended5;
            													}
HXDLIN( 515)													::iterMagic::Iimg_obj::set(pixelImage->image,location5,hitQuad24);
            												}
            											}
            											else {
HXLINE( 515)												int value2;
HXDLIN( 515)												if (pixelImage->isLittle) {
HXLINE( 515)													value2 = ((((a18 << 24) | (b26 << 16)) | (g9 << 8)) | r9);
            												}
            												else {
HXLINE( 515)													value2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
            												}
HXDLIN( 515)												::iterMagic::Iimg_obj::set(pixelImage->image,location5,value2);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 515)				{
HXLINE( 515)					bool hasHit2 = false;
HXDLIN( 515)					bool hasUndo3 = false;
HXDLIN( 515)					int aA3 = ((color2 >> 24) & 255);
HXDLIN( 515)					int rA3 = ((color2 >> 16) & 255);
HXDLIN( 515)					int gA3 = ((color2 >> 8) & 255);
HXDLIN( 515)					int bA3 = (color2 & 255);
HXDLIN( 515)					int aB3 = ((color1 >> 24) & 255);
HXDLIN( 515)					int rB3 = ((color1 >> 16) & 255);
HXDLIN( 515)					int gB3 = ((color1 >> 8) & 255);
HXDLIN( 515)					int bB3 = (color1 & 255);
HXDLIN( 515)					int aC3 = ((color2 >> 24) & 255);
HXDLIN( 515)					int rC3 = ((color2 >> 16) & 255);
HXDLIN( 515)					int gC3 = ((color2 >> 8) & 255);
HXDLIN( 515)					int bC3 = (color2 & 255);
HXDLIN( 515)					Float bcx3 = (cx1 - dx3);
HXDLIN( 515)					Float bcy3 = (cy1 - dy3);
HXDLIN( 515)					Float acx3 = (bx1 - dx3);
HXDLIN( 515)					Float acy3 = (by1 - dy3);
HXDLIN( 515)					Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 515)					Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 515)					Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 515)					Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 515)					 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 515)					if ((bx1 > cx1)) {
HXLINE( 515)						if ((bx1 > dx3)) {
HXLINE( 515)							int min12;
HXDLIN( 515)							if ((cx1 > dx3)) {
HXLINE( 515)								min12 = ::Math_obj::floor(dx3);
            							}
            							else {
HXLINE( 515)								min12 = ::Math_obj::floor(cx1);
            							}
HXDLIN( 515)							int ii_min24 = min12;
HXDLIN( 515)							int ii_max24 = ::Math_obj::ceil(bx1);
HXDLIN( 515)							xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            						}
            						else {
HXLINE( 515)							int ii_min25 = ::Math_obj::floor(cx1);
HXDLIN( 515)							int ii_max25 = ::Math_obj::ceil(dx3);
HXDLIN( 515)							xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            						}
            					}
            					else {
HXLINE( 515)						if ((cx1 > dx3)) {
HXLINE( 515)							int min13;
HXDLIN( 515)							if ((bx1 > dx3)) {
HXLINE( 515)								min13 = ::Math_obj::floor(dx3);
            							}
            							else {
HXLINE( 515)								min13 = ::Math_obj::ceil(bx1);
            							}
HXDLIN( 515)							int ii_min26 = min13;
HXDLIN( 515)							int ii_max26 = ::Math_obj::ceil(cx1);
HXDLIN( 515)							xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            						}
            						else {
HXLINE( 515)							int ii_min27 = ::Math_obj::floor(bx1);
HXDLIN( 515)							int ii_max27 = ::Math_obj::ceil(dx3);
HXDLIN( 515)							xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            						}
            					}
HXDLIN( 515)					 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 515)					if ((by1 > cy1)) {
HXLINE( 515)						if ((by1 > dy3)) {
HXLINE( 515)							int min14;
HXDLIN( 515)							if ((cy1 > dy3)) {
HXLINE( 515)								min14 = ::Math_obj::floor(dy3);
            							}
            							else {
HXLINE( 515)								min14 = ::Math_obj::floor(cy1);
            							}
HXDLIN( 515)							int ii_min28 = min14;
HXDLIN( 515)							int ii_max28 = ::Math_obj::ceil(by1);
HXDLIN( 515)							yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            						}
            						else {
HXLINE( 515)							int ii_min29 = ::Math_obj::floor(cy1);
HXDLIN( 515)							int ii_max29 = ::Math_obj::ceil(dy3);
HXDLIN( 515)							yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            						}
            					}
            					else {
HXLINE( 515)						if ((cy1 > dy3)) {
HXLINE( 515)							int min15;
HXDLIN( 515)							if ((by1 > dy3)) {
HXLINE( 515)								min15 = ::Math_obj::floor(dy3);
            							}
            							else {
HXLINE( 515)								min15 = ::Math_obj::ceil(by1);
            							}
HXDLIN( 515)							int ii_min30 = min15;
HXDLIN( 515)							int ii_max30 = ::Math_obj::ceil(cy1);
HXDLIN( 515)							yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            						}
            						else {
HXLINE( 515)							int ii_min31 = ::Math_obj::floor(by1);
HXDLIN( 515)							int ii_max31 = ::Math_obj::ceil(dy3);
HXDLIN( 515)							yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            						}
            					}
HXDLIN( 515)					 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 515)					if (hasUndo3) {
HXLINE( 515)						int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 515)						int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 515)						 ::Dynamic imageType3 = null();
HXDLIN( 515)						 ::pi_xy::ImageStruct this94 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 515)						if (::hx::IsNull( imageType3 )) {
HXLINE(  54)							imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            						}
HXLINE( 515)						::Dynamic undoImage10;
HXDLIN( 515)						switch((int)(( (int)(imageType3) ))){
            							case (int)0: {
HXLINE( 515)								 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 515)								 ::iterMagic::BytesImg b29 = byt3;
HXDLIN( 515)								{
HXLINE( 515)									b29->width = width3;
HXDLIN( 515)									b29->height = height3;
HXDLIN( 515)									b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 515)									b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN( 515)									{
HXLINE( 515)										int len6 = b29->length;
HXDLIN( 515)										int w3 = 0;
HXDLIN( 515)										{
HXLINE( 515)											int _g60 = 0;
HXDLIN( 515)											int _g61 = b29->height;
HXDLIN( 515)											while((_g60 < _g61)){
HXLINE( 515)												_g60 = (_g60 + 1);
HXDLIN( 515)												int y9 = (_g60 - 1);
HXDLIN( 515)												{
HXLINE( 515)													int _g62 = 0;
HXDLIN( 515)													int _g63 = b29->width;
HXDLIN( 515)													while((_g62 < _g63)){
HXLINE( 515)														_g62 = (_g62 + 1);
HXDLIN( 515)														int x9 = (_g62 - 1);
HXDLIN( 515)														{
HXLINE( 515)															w3 = (w3 + 1);
HXDLIN( 515)															b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 515)														{
HXLINE( 515)															w3 = (w3 + 1);
HXDLIN( 515)															b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 515)														{
HXLINE( 515)															w3 = (w3 + 1);
HXDLIN( 515)															b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            														}
HXDLIN( 515)														{
HXLINE( 515)															w3 = (w3 + 1);
HXDLIN( 515)															b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 515)								undoImage10 = b29;
            							}
            							break;
            							case (int)1: {
HXLINE( 515)								 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 515)								 ::iterMagic::ArrIntImg a26 = arrI3;
HXDLIN( 515)								{
HXLINE( 515)									a26->width = width3;
HXDLIN( 515)									a26->height = height3;
HXDLIN( 515)									a26->data = ::Array_obj< int >::__new(0);
HXDLIN( 515)									a26->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 515)									{
HXLINE( 515)										int _g64 = 0;
HXDLIN( 515)										int _g65 = a26->length;
HXDLIN( 515)										while((_g64 < _g65)){
HXLINE( 515)											_g64 = (_g64 + 1);
HXDLIN( 515)											int i30 = (_g64 - 1);
HXDLIN( 515)											a26->data[i30] = 0;
            										}
            									}
            								}
HXDLIN( 515)								undoImage10 = a26;
            							}
            							break;
            							case (int)2: {
HXLINE( 515)								 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 515)								 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN( 515)								{
HXLINE( 515)									b30->width = width3;
HXDLIN( 515)									b30->height = height3;
HXDLIN( 515)									b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 515)									int size3 = (b30->length * 4);
HXDLIN( 515)									b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 515)									{
HXLINE( 515)										int _g66 = 0;
HXDLIN( 515)										int _g67 = b30->length;
HXDLIN( 515)										while((_g66 < _g67)){
HXLINE( 515)											_g66 = (_g66 + 1);
HXDLIN( 515)											int i31 = (_g66 - 1);
HXDLIN( 515)											{
HXLINE( 515)												 ::haxe::io::ArrayBufferViewImpl this95 = b30->data;
HXDLIN( 515)												bool undoImage11;
HXDLIN( 515)												if ((i31 >= 0)) {
HXLINE( 515)													undoImage11 = (i31 < (this95->byteLength >> 2));
            												}
            												else {
HXLINE( 515)													undoImage11 = false;
            												}
HXDLIN( 515)												if (undoImage11) {
HXLINE( 515)													 ::haxe::io::Bytes _this3 = this95->bytes;
HXDLIN( 515)													int pos3 = ((i31 << 2) + this95->byteOffset);
HXDLIN( 515)													_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 515)													_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 515)													_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 515)													_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
HXDLIN( 515)								undoImage10 = b30;
            							}
            							break;
            							case (int)3: {
HXLINE( 515)								 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 515)								 ::iterMagic::VecIntImg v8 = vec3;
HXDLIN( 515)								{
HXLINE( 515)									v8->width = width3;
HXDLIN( 515)									v8->height = height3;
HXDLIN( 515)									v8->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 515)									v8->data = ::Array_obj< int >::__new(v8->length);
HXDLIN( 515)									{
HXLINE( 515)										int _g68 = 0;
HXDLIN( 515)										int _g69 = v8->length;
HXDLIN( 515)										while((_g68 < _g69)){
HXLINE( 515)											_g68 = (_g68 + 1);
HXDLIN( 515)											int i32 = (_g68 - 1);
HXDLIN( 515)											v8->data->__unsafe_set(i32,0);
            										}
            									}
            								}
HXDLIN( 515)								undoImage10 = v8;
            							}
            							break;
            							case (int)4: {
HXLINE( 515)								 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 515)								 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN( 515)								{
HXLINE( 515)									b31->width = width3;
HXDLIN( 515)									b31->height = height3;
HXDLIN( 515)									b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 515)									b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 515)									{
HXLINE( 515)										int len7 = b31->length;
HXDLIN( 515)										 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN( 515)										if (::hx::IsNull( d3->head )) {
HXLINE( 515)											int _g70 = 0;
HXDLIN( 515)											int _g71 = len7;
HXDLIN( 515)											while((_g70 < _g71)){
HXLINE( 515)												_g70 = (_g70 + 1);
HXDLIN( 515)												int i33 = (_g70 - 1);
HXDLIN( 515)												d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            											}
            										}
            										else {
HXLINE( 515)											int _g72 = 0;
HXDLIN( 515)											int _g73 = len7;
HXDLIN( 515)											while((_g72 < _g73)){
HXLINE( 515)												_g72 = (_g72 + 1);
HXDLIN( 515)												int i34 = (_g72 - 1);
HXDLIN( 515)												{
HXLINE( 515)													 ::haxe::ds::GenericCell_Int l3 = b31->data->head;
HXDLIN( 515)													 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 515)													{
HXLINE( 515)														int _g74 = 0;
HXDLIN( 515)														int _g75 = i34;
HXDLIN( 515)														while((_g74 < _g75)){
HXLINE( 515)															_g74 = (_g74 + 1);
HXDLIN( 515)															int i35 = (_g74 - 1);
HXLINE( 345)															prev3 = l3;
HXLINE( 346)															l3 = l3->next;
            														}
            													}
HXLINE( 515)													if (::hx::IsNull( prev3 )) {
HXLINE( 515)														b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 515)														l3 = null();
            													}
            													else {
HXLINE( 515)														prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 515)														l3 = null();
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 515)								undoImage10 = b31;
            							}
            							break;
            						}
HXDLIN( 515)						this94->image = undoImage10;
HXDLIN( 515)						this94->width = width3;
HXDLIN( 515)						this94->height = height3;
HXDLIN( 515)						this94->imageType = ( (int)(imageType3) );
HXDLIN( 515)						undoImage9 = this94;
HXDLIN( 515)						{
HXLINE( 515)							int rectLeft3 = xIter33->start;
HXDLIN( 515)							int rectTop3 = yIter33->start;
HXDLIN( 515)							int rectRight3 = xIter33->max;
HXDLIN( 515)							bool forceClear3 = false;
HXDLIN( 515)							{
HXLINE( 515)								int _g76 = rectTop3;
HXDLIN( 515)								int _g77 = yIter33->max;
HXDLIN( 515)								while((_g76 < _g77)){
HXLINE( 515)									_g76 = (_g76 + 1);
HXDLIN( 515)									int dy5 = (_g76 - 1);
HXDLIN( 515)									{
HXLINE( 515)										int _g78 = rectLeft3;
HXDLIN( 515)										int _g79 = rectRight3;
HXDLIN( 515)										while((_g78 < _g79)){
HXLINE( 515)											_g78 = (_g78 + 1);
HXDLIN( 515)											int dx5 = (_g78 - 1);
HXDLIN( 515)											::Dynamic this96 = pixelImage->image;
HXDLIN( 515)											int index12;
HXDLIN( 515)											if (pixelImage->useVirtualPos) {
HXLINE( 515)												index12 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx5) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 515)												index12 = ::Std_obj::_hx_int(( (Float)(((dy5 * pixelImage->width) + dx5)) ));
            											}
HXDLIN( 515)											int c9 = ::iterMagic::Iimg_obj::get(this96,index12);
HXDLIN( 515)											int col3;
HXDLIN( 515)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)												col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            											}
            											else {
HXLINE( 515)												col3 = c9;
            											}
HXDLIN( 515)											bool hitQuad25;
HXDLIN( 515)											if (pixelImage->useMask) {
HXLINE( 515)												hitQuad25 = ::hx::IsNotNull( pixelImage->mask );
            											}
            											else {
HXLINE( 515)												hitQuad25 = false;
            											}
HXDLIN( 515)											if (hitQuad25) {
HXLINE( 515)												 ::pi_xy::ImageStruct this97 = pixelImage->mask;
HXDLIN( 515)												::Dynamic this98 = this97->image;
HXDLIN( 515)												int index13;
HXDLIN( 515)												if (this97->useVirtualPos) {
HXLINE( 515)													index13 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this97->virtualY) * ( (Float)(this97->width) )) + dx5) - this97->virtualX));
            												}
            												else {
HXLINE( 515)													index13 = ::Std_obj::_hx_int(( (Float)(((dy5 * this97->width) + dx5)) ));
            												}
HXDLIN( 515)												int c10 = ::iterMagic::Iimg_obj::get(this98,index13);
HXDLIN( 515)												int v9;
HXDLIN( 515)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)													v9 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            												}
            												else {
HXLINE( 515)													v9 = c10;
            												}
HXDLIN( 515)												int maskPixel3 = v9;
HXDLIN( 515)												int this99 = col3;
HXDLIN( 515)												if ((maskPixel3 == 0)) {
HXLINE( 515)													col3 = this99;
            												}
            												else {
HXLINE( 515)													Float m03;
HXDLIN( 515)													int this100 = ((maskPixel3 >> 24) & 255);
HXDLIN( 515)													if ((this100 == 0)) {
HXLINE( 515)														m03 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														m03 = (( (Float)(this100) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float m13;
HXDLIN( 515)													int this101 = ((maskPixel3 >> 16) & 255);
HXDLIN( 515)													if ((this101 == 0)) {
HXLINE( 515)														m13 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														m13 = (( (Float)(this101) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float m23;
HXDLIN( 515)													int this102 = ((maskPixel3 >> 8) & 255);
HXDLIN( 515)													if ((this102 == 0)) {
HXLINE( 515)														m23 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														m23 = (( (Float)(this102) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float m33;
HXDLIN( 515)													int this103 = (maskPixel3 & 255);
HXDLIN( 515)													if ((this103 == 0)) {
HXLINE( 515)														m33 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														m33 = (( (Float)(this103) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this99 >> 24) & 255)) )));
HXDLIN( 515)													int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this99 >> 16) & 255)) )));
HXDLIN( 515)													int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this99 >> 8) & 255)) )));
HXDLIN( 515)													int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this99 & 255)) )));
HXDLIN( 515)													col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 515)											if ((col3 != 0)) {
HXLINE( 515)												int x10 = (dx5 - rectLeft3);
HXDLIN( 515)												int y10 = (dy5 - rectTop3);
HXDLIN( 515)												int c11 = col3;
HXDLIN( 515)												bool hitQuad26;
HXDLIN( 515)												if ((((c11 >> 24) & 255) < 254)) {
HXLINE( 515)													hitQuad26 = undoImage9->transparent;
            												}
            												else {
HXLINE( 515)													hitQuad26 = false;
            												}
HXDLIN( 515)												if (hitQuad26) {
HXLINE( 515)													int location6;
HXDLIN( 515)													if (undoImage9->useVirtualPos) {
HXLINE( 515)														location6 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            													}
            													else {
HXLINE( 515)														location6 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            													}
HXDLIN( 515)													int this104 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 515)													int this105;
HXDLIN( 515)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)														this105 = ((((((this104 >> 24) & 255) << 24) | ((this104 & 255) << 16)) | (((this104 >> 8) & 255) << 8)) | ((this104 >> 16) & 255));
            													}
            													else {
HXLINE( 515)														this105 = this104;
            													}
HXDLIN( 515)													Float a110;
HXDLIN( 515)													int this106 = ((this105 >> 24) & 255);
HXDLIN( 515)													if ((this106 == 0)) {
HXLINE( 515)														a110 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														a110 = (( (Float)(this106) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float r16;
HXDLIN( 515)													int this107 = ((this105 >> 16) & 255);
HXDLIN( 515)													if ((this107 == 0)) {
HXLINE( 515)														r16 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														r16 = (( (Float)(this107) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float g16;
HXDLIN( 515)													int this108 = ((this105 >> 8) & 255);
HXDLIN( 515)													if ((this108 == 0)) {
HXLINE( 515)														g16 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														g16 = (( (Float)(this108) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float b111;
HXDLIN( 515)													int this109 = (this105 & 255);
HXDLIN( 515)													if ((this109 == 0)) {
HXLINE( 515)														b111 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														b111 = (( (Float)(this109) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float a27;
HXDLIN( 515)													int this110 = ((col3 >> 24) & 255);
HXDLIN( 515)													if ((this110 == 0)) {
HXLINE( 515)														a27 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														a27 = (( (Float)(this110) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float r26;
HXDLIN( 515)													int this111 = ((col3 >> 16) & 255);
HXDLIN( 515)													if ((this111 == 0)) {
HXLINE( 515)														r26 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														r26 = (( (Float)(this111) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float g26;
HXDLIN( 515)													int this112 = ((col3 >> 8) & 255);
HXDLIN( 515)													if ((this112 == 0)) {
HXLINE( 515)														g26 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														g26 = (( (Float)(this112) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float b210;
HXDLIN( 515)													int this113 = (col3 & 255);
HXDLIN( 515)													if ((this113 == 0)) {
HXLINE( 515)														b210 = ((Float)0.);
            													}
            													else {
HXLINE( 515)														b210 = (( (Float)(this113) ) / ( (Float)(255) ));
            													}
HXDLIN( 515)													Float a36 = (a110 * (( (Float)(1) ) - a27));
HXDLIN( 515)													int r17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a27))));
HXDLIN( 515)													int g17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a27))));
HXDLIN( 515)													int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a36) + (b210 * a27))));
HXDLIN( 515)													int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a27)));
HXDLIN( 515)													int blended6 = ((((a28 << 24) | (r17 << 16)) | (g17 << 8)) | b32);
HXDLIN( 515)													{
HXLINE( 515)														int hitQuad27;
HXDLIN( 515)														if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)															hitQuad27 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            														}
            														else {
HXLINE( 515)															hitQuad27 = blended6;
            														}
HXDLIN( 515)														::iterMagic::Iimg_obj::set(undoImage9->image,location6,hitQuad27);
            													}
            												}
            												else {
HXLINE( 515)													::Dynamic this114 = undoImage9->image;
HXDLIN( 515)													int index14;
HXDLIN( 515)													if (undoImage9->useVirtualPos) {
HXLINE( 515)														index14 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            													}
            													else {
HXLINE( 515)														index14 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            													}
HXDLIN( 515)													int hitQuad28;
HXDLIN( 515)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)														hitQuad28 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            													}
            													else {
HXLINE( 515)														hitQuad28 = c11;
            													}
HXDLIN( 515)													::iterMagic::Iimg_obj::set(this114,index14,hitQuad28);
            												}
            											}
            											else {
HXLINE( 515)												if (forceClear3) {
HXLINE( 515)													::Dynamic this115 = undoImage9->image;
HXDLIN( 515)													int x11 = (dx5 - rectLeft3);
HXDLIN( 515)													int y11 = (dy5 - rectTop3);
HXDLIN( 515)													int index15;
HXDLIN( 515)													if (undoImage9->useVirtualPos) {
HXLINE( 515)														index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            													}
            													else {
HXLINE( 515)														index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            													}
HXDLIN( 515)													::iterMagic::Iimg_obj::set(this115,index15,0);
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 515)					{
HXLINE( 515)						int _g_min6 = xIter33->start;
HXDLIN( 515)						int _g_max6 = xIter33->max;
HXDLIN( 515)						while((_g_min6 < _g_max6)){
HXLINE( 515)							_g_min6 = (_g_min6 + 1);
HXDLIN( 515)							int px4 = (_g_min6 - 1);
HXDLIN( 515)							Float pcx3 = (( (Float)(px4) ) - dx3);
HXDLIN( 515)							{
HXLINE( 515)								int _g_min7 = yIter33->start;
HXDLIN( 515)								int _g_max7 = yIter33->max;
HXDLIN( 515)								while((_g_min7 < _g_max7)){
HXLINE( 515)									_g_min7 = (_g_min7 + 1);
HXDLIN( 515)									int py4 = (_g_min7 - 1);
HXDLIN( 515)									Float pcy3 = (( (Float)(py4) ) - dy3);
HXDLIN( 515)									Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 515)									Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 515)									Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 515)									Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 515)									Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 515)									bool hitQuad29;
HXDLIN( 515)									bool hitQuad30;
HXDLIN( 515)									if ((ratioA3 >= 0)) {
HXLINE( 515)										hitQuad30 = (ratioB3 >= 0);
            									}
            									else {
HXLINE( 515)										hitQuad30 = false;
            									}
HXDLIN( 515)									if (hitQuad30) {
HXLINE( 515)										hitQuad29 = (ratioC3 >= 0);
            									}
            									else {
HXLINE( 515)										hitQuad29 = false;
            									}
HXDLIN( 515)									if (hitQuad29) {
HXLINE( 515)										int i36 = ::Std_obj::_hx_int((((( (Float)(aA3) ) * ratioA3) + (( (Float)(aB3) ) * ratioB3)) + (( (Float)(aC3) ) * ratioC3)));
HXDLIN( 515)										if ((i36 > 255)) {
HXLINE(  24)											i36 = 255;
            										}
HXLINE( 515)										if ((i36 < 0)) {
HXLINE(  25)											i36 = 0;
            										}
HXLINE( 515)										int a29 = i36;
HXDLIN( 515)										int i37 = ::Std_obj::_hx_int((((( (Float)(rA3) ) * ratioA3) + (( (Float)(rB3) ) * ratioB3)) + (( (Float)(rC3) ) * ratioC3)));
HXDLIN( 515)										if ((i37 > 255)) {
HXLINE(  24)											i37 = 255;
            										}
HXLINE( 515)										if ((i37 < 0)) {
HXLINE(  25)											i37 = 0;
            										}
HXLINE( 515)										int r18 = i37;
HXDLIN( 515)										int i38 = ::Std_obj::_hx_int((((( (Float)(gA3) ) * ratioA3) + (( (Float)(gB3) ) * ratioB3)) + (( (Float)(gC3) ) * ratioC3)));
HXDLIN( 515)										if ((i38 > 255)) {
HXLINE(  24)											i38 = 255;
            										}
HXLINE( 515)										if ((i38 < 0)) {
HXLINE(  25)											i38 = 0;
            										}
HXLINE( 515)										int g18 = i38;
HXDLIN( 515)										int i39 = ::Std_obj::_hx_int((((( (Float)(bA3) ) * ratioA3) + (( (Float)(bB3) ) * ratioB3)) + (( (Float)(bC3) ) * ratioC3)));
HXDLIN( 515)										if ((i39 > 255)) {
HXLINE(  24)											i39 = 255;
            										}
HXLINE( 515)										if ((i39 < 0)) {
HXLINE(  25)											i39 = 0;
            										}
HXLINE( 515)										int b33 = i39;
HXDLIN( 515)										{
HXLINE( 515)											int location7;
HXDLIN( 515)											if (pixelImage->useVirtualPos) {
HXLINE( 515)												location7 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px4) - pixelImage->virtualX));
            											}
            											else {
HXLINE( 515)												location7 = ::Std_obj::_hx_int(( (Float)(((py4 * pixelImage->width) + px4)) ));
            											}
HXDLIN( 515)											bool hitQuad31;
HXDLIN( 515)											if (pixelImage->transparent) {
HXLINE( 515)												hitQuad31 = (a29 < 254);
            											}
            											else {
HXLINE( 515)												hitQuad31 = false;
            											}
HXDLIN( 515)											if (hitQuad31) {
HXLINE( 515)												int this116 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN( 515)												int old3;
HXDLIN( 515)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)													old3 = ((((((this116 >> 24) & 255) << 24) | ((this116 & 255) << 16)) | (((this116 >> 8) & 255) << 8)) | ((this116 >> 16) & 255));
            												}
            												else {
HXLINE( 515)													old3 = this116;
            												}
HXDLIN( 515)												int rhs3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
HXDLIN( 515)												Float a111;
HXDLIN( 515)												int this117 = ((old3 >> 24) & 255);
HXDLIN( 515)												if ((this117 == 0)) {
HXLINE( 515)													a111 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													a111 = (( (Float)(this117) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float r19;
HXDLIN( 515)												int this118 = ((old3 >> 16) & 255);
HXDLIN( 515)												if ((this118 == 0)) {
HXLINE( 515)													r19 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													r19 = (( (Float)(this118) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float g19;
HXDLIN( 515)												int this119 = ((old3 >> 8) & 255);
HXDLIN( 515)												if ((this119 == 0)) {
HXLINE( 515)													g19 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													g19 = (( (Float)(this119) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float b112;
HXDLIN( 515)												int this120 = (old3 & 255);
HXDLIN( 515)												if ((this120 == 0)) {
HXLINE( 515)													b112 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													b112 = (( (Float)(this120) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float a210;
HXDLIN( 515)												int this121 = ((rhs3 >> 24) & 255);
HXDLIN( 515)												if ((this121 == 0)) {
HXLINE( 515)													a210 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													a210 = (( (Float)(this121) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float r27;
HXDLIN( 515)												int this122 = ((rhs3 >> 16) & 255);
HXDLIN( 515)												if ((this122 == 0)) {
HXLINE( 515)													r27 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													r27 = (( (Float)(this122) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float g27;
HXDLIN( 515)												int this123 = ((rhs3 >> 8) & 255);
HXDLIN( 515)												if ((this123 == 0)) {
HXLINE( 515)													g27 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													g27 = (( (Float)(this123) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float b211;
HXDLIN( 515)												int this124 = (rhs3 & 255);
HXDLIN( 515)												if ((this124 == 0)) {
HXLINE( 515)													b211 = ((Float)0.);
            												}
            												else {
HXLINE( 515)													b211 = (( (Float)(this124) ) / ( (Float)(255) ));
            												}
HXDLIN( 515)												Float a37 = (a111 * (( (Float)(1) ) - a210));
HXDLIN( 515)												int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a37) + (r27 * a210))));
HXDLIN( 515)												int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a37) + (g27 * a210))));
HXDLIN( 515)												int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a37) + (b211 * a210))));
HXDLIN( 515)												int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a210)));
HXDLIN( 515)												int blended7 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b34);
HXDLIN( 515)												{
HXLINE( 515)													int hitQuad32;
HXDLIN( 515)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 515)														hitQuad32 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            													}
            													else {
HXLINE( 515)														hitQuad32 = blended7;
            													}
HXDLIN( 515)													::iterMagic::Iimg_obj::set(pixelImage->image,location7,hitQuad32);
            												}
            											}
            											else {
HXLINE( 515)												int value3;
HXDLIN( 515)												if (pixelImage->isLittle) {
HXLINE( 515)													value3 = ((((a29 << 24) | (b33 << 16)) | (g18 << 8)) | r18);
            												}
            												else {
HXLINE( 515)													value3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
            												}
HXDLIN( 515)												::iterMagic::Iimg_obj::set(pixelImage->image,location7,value3);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 515)					if ((hasHit2 == false)) {
HXLINE( 515)						 ::pi_xy::algo::HitTri v10 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx1,by1,cx1,cy1,dx3,dy3,true);
HXDLIN( 515)						if (hasUndo3) {
HXLINE( 515)							v10->undoImage = undoImage9;
HXDLIN( 515)							v10->undoX = xIter33->start;
HXDLIN( 515)							v10->undoY = yIter33->start;
            						}
            					}
            				}
HXDLIN( 515)				 ::pi_xy::algo::HitQuad v11 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax1,ay1,bx1,by1,cx1,cy1,dx3,dy3,true);
HXLINE( 511)				hitQuad = v11;
            			}
            		}
            		else {
HXLINE( 519)			Float sin3 = ::Math_obj::sin(theta);
HXDLIN( 519)			Float cos3 = ::Math_obj::cos(theta);
HXDLIN( 519)			Float radius3 = (thick / ( (Float)(2) ));
HXDLIN( 519)			Float dx6 = ((Float)0.1);
HXDLIN( 519)			Float dy6 = radius3;
HXDLIN( 519)			Float cx2 = h2;
HXDLIN( 519)			Float cy2 = radius3;
HXDLIN( 519)			Float bx2 = h2;
HXDLIN( 519)			Float by2 = -(radius3);
HXDLIN( 519)			Float ax2 = ((Float)0.1);
HXDLIN( 519)			Float ay2 = -(radius3);
HXDLIN( 519)			Float temp2 = ((Float)0.);
HXLINE( 474)			temp2 = (px + ((ax2 * cos3) - (ay2 * sin3)));
HXLINE( 475)			ay2 = (py + ((ay2 * cos3) + (ax2 * sin3)));
HXLINE( 476)			ax2 = temp2;
HXLINE( 478)			temp2 = (px + ((bx2 * cos3) - (by2 * sin3)));
HXLINE( 479)			by2 = (py + ((by2 * cos3) + (bx2 * sin3)));
HXLINE( 480)			bx2 = temp2;
HXLINE( 482)			temp2 = (px + ((cx2 * cos3) - (cy2 * sin3)));
HXLINE( 483)			cy2 = (py + ((cy2 * cos3) + (cx2 * sin3)));
HXLINE( 484)			cx2 = temp2;
HXLINE( 486)			temp2 = (px + ((dx6 * cos3) - (dy6 * sin3)));
HXLINE( 487)			dy6 = (py + ((dy6 * cos3) + (dx6 * sin3)));
HXLINE( 488)			dx6 = temp2;
HXLINE( 519)			{
HXLINE( 519)				bool hasUndo4 = false;
HXDLIN( 519)				int aA4 = ((color1 >> 24) & 255);
HXDLIN( 519)				int rA4 = ((color1 >> 16) & 255);
HXDLIN( 519)				int gA4 = ((color1 >> 8) & 255);
HXDLIN( 519)				int bA4 = (color1 & 255);
HXDLIN( 519)				int aB4 = ((color1 >> 24) & 255);
HXDLIN( 519)				int rB4 = ((color1 >> 16) & 255);
HXDLIN( 519)				int gB4 = ((color1 >> 8) & 255);
HXDLIN( 519)				int bB4 = (color1 & 255);
HXDLIN( 519)				int aC4 = ((color2 >> 24) & 255);
HXDLIN( 519)				int rC4 = ((color2 >> 16) & 255);
HXDLIN( 519)				int gC4 = ((color2 >> 8) & 255);
HXDLIN( 519)				int bC4 = (color2 & 255);
HXDLIN( 519)				Float bcx4 = (bx2 - dx6);
HXDLIN( 519)				Float bcy4 = (by2 - dy6);
HXDLIN( 519)				Float acx4 = (ax2 - dx6);
HXDLIN( 519)				Float acy4 = (ay2 - dy6);
HXDLIN( 519)				Float dot114 = ((bcx4 * bcx4) + (bcy4 * bcy4));
HXDLIN( 519)				Float dot124 = ((bcx4 * acx4) + (bcy4 * acy4));
HXDLIN( 519)				Float dot224 = ((acx4 * acx4) + (acy4 * acy4));
HXDLIN( 519)				Float denom14 = (( (Float)(1) ) / ((dot114 * dot224) - (dot124 * dot124)));
HXDLIN( 519)				 ::pi_xy::iter::IntIterStart xIter34;
HXDLIN( 519)				if ((ax2 > bx2)) {
HXLINE( 519)					if ((ax2 > dx6)) {
HXLINE( 519)						int min16;
HXDLIN( 519)						if ((bx2 > dx6)) {
HXLINE( 519)							min16 = ::Math_obj::floor(dx6);
            						}
            						else {
HXLINE( 519)							min16 = ::Math_obj::floor(bx2);
            						}
HXDLIN( 519)						int ii_min32 = min16;
HXDLIN( 519)						int ii_max32 = ::Math_obj::ceil(ax2);
HXDLIN( 519)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            					}
            					else {
HXLINE( 519)						int ii_min33 = ::Math_obj::floor(bx2);
HXDLIN( 519)						int ii_max33 = ::Math_obj::ceil(dx6);
HXDLIN( 519)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            					}
            				}
            				else {
HXLINE( 519)					if ((bx2 > dx6)) {
HXLINE( 519)						int min17;
HXDLIN( 519)						if ((ax2 > dx6)) {
HXLINE( 519)							min17 = ::Math_obj::floor(dx6);
            						}
            						else {
HXLINE( 519)							min17 = ::Math_obj::ceil(ax2);
            						}
HXDLIN( 519)						int ii_min34 = min17;
HXDLIN( 519)						int ii_max34 = ::Math_obj::ceil(bx2);
HXDLIN( 519)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            					}
            					else {
HXLINE( 519)						int ii_min35 = ::Math_obj::floor(ax2);
HXDLIN( 519)						int ii_max35 = ::Math_obj::ceil(dx6);
HXDLIN( 519)						xIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            					}
            				}
HXDLIN( 519)				 ::pi_xy::iter::IntIterStart yIter34;
HXDLIN( 519)				if ((ay2 > by2)) {
HXLINE( 519)					if ((ay2 > dy6)) {
HXLINE( 519)						int min18;
HXDLIN( 519)						if ((by2 > dy6)) {
HXLINE( 519)							min18 = ::Math_obj::floor(dy6);
            						}
            						else {
HXLINE( 519)							min18 = ::Math_obj::floor(by2);
            						}
HXDLIN( 519)						int ii_min36 = min18;
HXDLIN( 519)						int ii_max36 = ::Math_obj::ceil(ay2);
HXDLIN( 519)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            					}
            					else {
HXLINE( 519)						int ii_min37 = ::Math_obj::floor(by2);
HXDLIN( 519)						int ii_max37 = ::Math_obj::ceil(dy6);
HXDLIN( 519)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            					}
            				}
            				else {
HXLINE( 519)					if ((by2 > dy6)) {
HXLINE( 519)						int min19;
HXDLIN( 519)						if ((ay2 > dy6)) {
HXLINE( 519)							min19 = ::Math_obj::floor(dy6);
            						}
            						else {
HXLINE( 519)							min19 = ::Math_obj::ceil(ay2);
            						}
HXDLIN( 519)						int ii_min38 = min19;
HXDLIN( 519)						int ii_max38 = ::Math_obj::ceil(by2);
HXDLIN( 519)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            					}
            					else {
HXLINE( 519)						int ii_min39 = ::Math_obj::floor(ay2);
HXDLIN( 519)						int ii_max39 = ::Math_obj::ceil(dy6);
HXDLIN( 519)						yIter34 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            					}
            				}
HXDLIN( 519)				 ::pi_xy::ImageStruct undoImage12 = null();
HXDLIN( 519)				if (hasUndo4) {
HXLINE( 519)					int width4 = ((xIter34->max - xIter34->start) + 1);
HXDLIN( 519)					int height4 = ((yIter34->max - yIter34->start) + 1);
HXDLIN( 519)					 ::Dynamic imageType4 = null();
HXDLIN( 519)					 ::pi_xy::ImageStruct this125 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 519)					if (::hx::IsNull( imageType4 )) {
HXLINE(  54)						imageType4 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 519)					::Dynamic undoImage13;
HXDLIN( 519)					switch((int)(( (int)(imageType4) ))){
            						case (int)0: {
HXLINE( 519)							 ::iterMagic::BytesImg byt4 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 519)							 ::iterMagic::BytesImg b35 = byt4;
HXDLIN( 519)							{
HXLINE( 519)								b35->width = width4;
HXDLIN( 519)								b35->height = height4;
HXDLIN( 519)								b35->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 519)								b35->data = ::haxe::io::Bytes_obj::alloc((b35->length * 4));
HXDLIN( 519)								{
HXLINE( 519)									int len8 = b35->length;
HXDLIN( 519)									int w4 = 0;
HXDLIN( 519)									{
HXLINE( 519)										int _g80 = 0;
HXDLIN( 519)										int _g81 = b35->height;
HXDLIN( 519)										while((_g80 < _g81)){
HXLINE( 519)											_g80 = (_g80 + 1);
HXDLIN( 519)											int y12 = (_g80 - 1);
HXDLIN( 519)											{
HXLINE( 519)												int _g82 = 0;
HXDLIN( 519)												int _g83 = b35->width;
HXDLIN( 519)												while((_g82 < _g83)){
HXLINE( 519)													_g82 = (_g82 + 1);
HXDLIN( 519)													int x12 = (_g82 - 1);
HXDLIN( 519)													{
HXLINE( 519)														w4 = (w4 + 1);
HXDLIN( 519)														b35->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 519)													{
HXLINE( 519)														w4 = (w4 + 1);
HXDLIN( 519)														b35->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 519)													{
HXLINE( 519)														w4 = (w4 + 1);
HXDLIN( 519)														b35->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 519)													{
HXLINE( 519)														w4 = (w4 + 1);
HXDLIN( 519)														b35->data->b[(w4 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 519)							undoImage13 = b35;
            						}
            						break;
            						case (int)1: {
HXLINE( 519)							 ::iterMagic::ArrIntImg arrI4 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 519)							 ::iterMagic::ArrIntImg a38 = arrI4;
HXDLIN( 519)							{
HXLINE( 519)								a38->width = width4;
HXDLIN( 519)								a38->height = height4;
HXDLIN( 519)								a38->data = ::Array_obj< int >::__new(0);
HXDLIN( 519)								a38->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 519)								{
HXLINE( 519)									int _g84 = 0;
HXDLIN( 519)									int _g85 = a38->length;
HXDLIN( 519)									while((_g84 < _g85)){
HXLINE( 519)										_g84 = (_g84 + 1);
HXDLIN( 519)										int i40 = (_g84 - 1);
HXDLIN( 519)										a38->data[i40] = 0;
            									}
            								}
            							}
HXDLIN( 519)							undoImage13 = a38;
            						}
            						break;
            						case (int)2: {
HXLINE( 519)							 ::iterMagic::U32ArrImg u32a4 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 519)							 ::iterMagic::U32ArrImg b36 = u32a4;
HXDLIN( 519)							{
HXLINE( 519)								b36->width = width4;
HXDLIN( 519)								b36->height = height4;
HXDLIN( 519)								b36->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 519)								int size4 = (b36->length * 4);
HXDLIN( 519)								b36->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size4),0,size4);
HXDLIN( 519)								{
HXLINE( 519)									int _g86 = 0;
HXDLIN( 519)									int _g87 = b36->length;
HXDLIN( 519)									while((_g86 < _g87)){
HXLINE( 519)										_g86 = (_g86 + 1);
HXDLIN( 519)										int i41 = (_g86 - 1);
HXDLIN( 519)										{
HXLINE( 519)											 ::haxe::io::ArrayBufferViewImpl this126 = b36->data;
HXDLIN( 519)											bool undoImage14;
HXDLIN( 519)											if ((i41 >= 0)) {
HXLINE( 519)												undoImage14 = (i41 < (this126->byteLength >> 2));
            											}
            											else {
HXLINE( 519)												undoImage14 = false;
            											}
HXDLIN( 519)											if (undoImage14) {
HXLINE( 519)												 ::haxe::io::Bytes _this4 = this126->bytes;
HXDLIN( 519)												int pos4 = ((i41 << 2) + this126->byteOffset);
HXDLIN( 519)												_this4->b[pos4] = ( (unsigned char)(0) );
HXDLIN( 519)												_this4->b[(pos4 + 1)] = ( (unsigned char)(0) );
HXDLIN( 519)												_this4->b[(pos4 + 2)] = ( (unsigned char)(0) );
HXDLIN( 519)												_this4->b[(pos4 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 519)							undoImage13 = b36;
            						}
            						break;
            						case (int)3: {
HXLINE( 519)							 ::iterMagic::VecIntImg vec4 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 519)							 ::iterMagic::VecIntImg v12 = vec4;
HXDLIN( 519)							{
HXLINE( 519)								v12->width = width4;
HXDLIN( 519)								v12->height = height4;
HXDLIN( 519)								v12->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 519)								v12->data = ::Array_obj< int >::__new(v12->length);
HXDLIN( 519)								{
HXLINE( 519)									int _g88 = 0;
HXDLIN( 519)									int _g89 = v12->length;
HXDLIN( 519)									while((_g88 < _g89)){
HXLINE( 519)										_g88 = (_g88 + 1);
HXDLIN( 519)										int i42 = (_g88 - 1);
HXDLIN( 519)										v12->data->__unsafe_set(i42,0);
            									}
            								}
            							}
HXDLIN( 519)							undoImage13 = v12;
            						}
            						break;
            						case (int)4: {
HXLINE( 519)							 ::iterMagic::StackIntImg sInt4 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 519)							 ::iterMagic::StackIntImg b37 = sInt4;
HXDLIN( 519)							{
HXLINE( 519)								b37->width = width4;
HXDLIN( 519)								b37->height = height4;
HXDLIN( 519)								b37->length = ::Std_obj::_hx_int(( (Float)((width4 * height4)) ));
HXDLIN( 519)								b37->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 519)								{
HXLINE( 519)									int len9 = b37->length;
HXDLIN( 519)									 ::haxe::ds::GenericStack_Int d4 = b37->data;
HXDLIN( 519)									if (::hx::IsNull( d4->head )) {
HXLINE( 519)										int _g90 = 0;
HXDLIN( 519)										int _g91 = len9;
HXDLIN( 519)										while((_g90 < _g91)){
HXLINE( 519)											_g90 = (_g90 + 1);
HXDLIN( 519)											int i43 = (_g90 - 1);
HXDLIN( 519)											d4->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d4->head);
            										}
            									}
            									else {
HXLINE( 519)										int _g92 = 0;
HXDLIN( 519)										int _g93 = len9;
HXDLIN( 519)										while((_g92 < _g93)){
HXLINE( 519)											_g92 = (_g92 + 1);
HXDLIN( 519)											int i44 = (_g92 - 1);
HXDLIN( 519)											{
HXLINE( 519)												 ::haxe::ds::GenericCell_Int l4 = b37->data->head;
HXDLIN( 519)												 ::haxe::ds::GenericCell_Int prev4 = null();
HXDLIN( 519)												{
HXLINE( 519)													int _g94 = 0;
HXDLIN( 519)													int _g95 = i44;
HXDLIN( 519)													while((_g94 < _g95)){
HXLINE( 519)														_g94 = (_g94 + 1);
HXDLIN( 519)														int i45 = (_g94 - 1);
HXLINE( 345)														prev4 = l4;
HXLINE( 346)														l4 = l4->next;
            													}
            												}
HXLINE( 519)												if (::hx::IsNull( prev4 )) {
HXLINE( 519)													b37->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 519)													l4 = null();
            												}
            												else {
HXLINE( 519)													prev4->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l4->next);
HXDLIN( 519)													l4 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 519)							undoImage13 = b37;
            						}
            						break;
            					}
HXDLIN( 519)					this125->image = undoImage13;
HXDLIN( 519)					this125->width = width4;
HXDLIN( 519)					this125->height = height4;
HXDLIN( 519)					this125->imageType = ( (int)(imageType4) );
HXDLIN( 519)					undoImage12 = this125;
HXDLIN( 519)					{
HXLINE( 519)						int rectLeft4 = xIter34->start;
HXDLIN( 519)						int rectTop4 = yIter34->start;
HXDLIN( 519)						int rectRight4 = xIter34->max;
HXDLIN( 519)						bool forceClear4 = false;
HXDLIN( 519)						{
HXLINE( 519)							int _g96 = rectTop4;
HXDLIN( 519)							int _g97 = yIter34->max;
HXDLIN( 519)							while((_g96 < _g97)){
HXLINE( 519)								_g96 = (_g96 + 1);
HXDLIN( 519)								int dy7 = (_g96 - 1);
HXDLIN( 519)								{
HXLINE( 519)									int _g98 = rectLeft4;
HXDLIN( 519)									int _g99 = rectRight4;
HXDLIN( 519)									while((_g98 < _g99)){
HXLINE( 519)										_g98 = (_g98 + 1);
HXDLIN( 519)										int dx7 = (_g98 - 1);
HXDLIN( 519)										::Dynamic this127 = pixelImage->image;
HXDLIN( 519)										int index16;
HXDLIN( 519)										if (pixelImage->useVirtualPos) {
HXLINE( 519)											index16 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx7) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 519)											index16 = ::Std_obj::_hx_int(( (Float)(((dy7 * pixelImage->width) + dx7)) ));
            										}
HXDLIN( 519)										int c12 = ::iterMagic::Iimg_obj::get(this127,index16);
HXDLIN( 519)										int col4;
HXDLIN( 519)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)											col4 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            										}
            										else {
HXLINE( 519)											col4 = c12;
            										}
HXDLIN( 519)										bool hitQuad33;
HXDLIN( 519)										if (pixelImage->useMask) {
HXLINE( 519)											hitQuad33 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 519)											hitQuad33 = false;
            										}
HXDLIN( 519)										if (hitQuad33) {
HXLINE( 519)											 ::pi_xy::ImageStruct this128 = pixelImage->mask;
HXDLIN( 519)											::Dynamic this129 = this128->image;
HXDLIN( 519)											int index17;
HXDLIN( 519)											if (this128->useVirtualPos) {
HXLINE( 519)												index17 = ::Std_obj::_hx_int(((((( (Float)(dy7) ) - this128->virtualY) * ( (Float)(this128->width) )) + dx7) - this128->virtualX));
            											}
            											else {
HXLINE( 519)												index17 = ::Std_obj::_hx_int(( (Float)(((dy7 * this128->width) + dx7)) ));
            											}
HXDLIN( 519)											int c13 = ::iterMagic::Iimg_obj::get(this129,index17);
HXDLIN( 519)											int v13;
HXDLIN( 519)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)												v13 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            											}
            											else {
HXLINE( 519)												v13 = c13;
            											}
HXDLIN( 519)											int maskPixel4 = v13;
HXDLIN( 519)											int this130 = col4;
HXDLIN( 519)											if ((maskPixel4 == 0)) {
HXLINE( 519)												col4 = this130;
            											}
            											else {
HXLINE( 519)												Float m04;
HXDLIN( 519)												int this131 = ((maskPixel4 >> 24) & 255);
HXDLIN( 519)												if ((this131 == 0)) {
HXLINE( 519)													m04 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													m04 = (( (Float)(this131) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float m14;
HXDLIN( 519)												int this132 = ((maskPixel4 >> 16) & 255);
HXDLIN( 519)												if ((this132 == 0)) {
HXLINE( 519)													m14 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													m14 = (( (Float)(this132) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float m24;
HXDLIN( 519)												int this133 = ((maskPixel4 >> 8) & 255);
HXDLIN( 519)												if ((this133 == 0)) {
HXLINE( 519)													m24 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													m24 = (( (Float)(this133) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float m34;
HXDLIN( 519)												int this134 = (maskPixel4 & 255);
HXDLIN( 519)												if ((this134 == 0)) {
HXLINE( 519)													m34 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													m34 = (( (Float)(this134) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												int ch04 = ::Std_obj::_hx_int(((((Float)1.) - m04) * ( (Float)(((this130 >> 24) & 255)) )));
HXDLIN( 519)												int ch14 = ::Std_obj::_hx_int(((((Float)1.) - m14) * ( (Float)(((this130 >> 16) & 255)) )));
HXDLIN( 519)												int ch24 = ::Std_obj::_hx_int(((((Float)1.) - m24) * ( (Float)(((this130 >> 8) & 255)) )));
HXDLIN( 519)												int ch34 = ::Std_obj::_hx_int(((((Float)1.) - m34) * ( (Float)((this130 & 255)) )));
HXDLIN( 519)												col4 = ((((::Math_obj::round((( (Float)(ch04) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch14) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch24) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch34) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 519)										if ((col4 != 0)) {
HXLINE( 519)											int x13 = (dx7 - rectLeft4);
HXDLIN( 519)											int y13 = (dy7 - rectTop4);
HXDLIN( 519)											int c14 = col4;
HXDLIN( 519)											bool hitQuad34;
HXDLIN( 519)											if ((((c14 >> 24) & 255) < 254)) {
HXLINE( 519)												hitQuad34 = undoImage12->transparent;
            											}
            											else {
HXLINE( 519)												hitQuad34 = false;
            											}
HXDLIN( 519)											if (hitQuad34) {
HXLINE( 519)												int location8;
HXDLIN( 519)												if (undoImage12->useVirtualPos) {
HXLINE( 519)													location8 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x13) - undoImage12->virtualX));
            												}
            												else {
HXLINE( 519)													location8 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage12->width) + x13)) ));
            												}
HXDLIN( 519)												int this135 = ::iterMagic::Iimg_obj::get(undoImage12->image,location8);
HXDLIN( 519)												int this136;
HXDLIN( 519)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)													this136 = ((((((this135 >> 24) & 255) << 24) | ((this135 & 255) << 16)) | (((this135 >> 8) & 255) << 8)) | ((this135 >> 16) & 255));
            												}
            												else {
HXLINE( 519)													this136 = this135;
            												}
HXDLIN( 519)												Float a112;
HXDLIN( 519)												int this137 = ((this136 >> 24) & 255);
HXDLIN( 519)												if ((this137 == 0)) {
HXLINE( 519)													a112 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													a112 = (( (Float)(this137) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float r110;
HXDLIN( 519)												int this138 = ((this136 >> 16) & 255);
HXDLIN( 519)												if ((this138 == 0)) {
HXLINE( 519)													r110 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													r110 = (( (Float)(this138) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float g110;
HXDLIN( 519)												int this139 = ((this136 >> 8) & 255);
HXDLIN( 519)												if ((this139 == 0)) {
HXLINE( 519)													g110 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													g110 = (( (Float)(this139) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float b113;
HXDLIN( 519)												int this140 = (this136 & 255);
HXDLIN( 519)												if ((this140 == 0)) {
HXLINE( 519)													b113 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													b113 = (( (Float)(this140) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float a211;
HXDLIN( 519)												int this141 = ((col4 >> 24) & 255);
HXDLIN( 519)												if ((this141 == 0)) {
HXLINE( 519)													a211 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													a211 = (( (Float)(this141) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float r28;
HXDLIN( 519)												int this142 = ((col4 >> 16) & 255);
HXDLIN( 519)												if ((this142 == 0)) {
HXLINE( 519)													r28 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													r28 = (( (Float)(this142) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float g28;
HXDLIN( 519)												int this143 = ((col4 >> 8) & 255);
HXDLIN( 519)												if ((this143 == 0)) {
HXLINE( 519)													g28 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													g28 = (( (Float)(this143) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float b212;
HXDLIN( 519)												int this144 = (col4 & 255);
HXDLIN( 519)												if ((this144 == 0)) {
HXLINE( 519)													b212 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													b212 = (( (Float)(this144) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float a39 = (a112 * (( (Float)(1) ) - a211));
HXDLIN( 519)												int r29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r110 * a39) + (r28 * a211))));
HXDLIN( 519)												int g29 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g110 * a39) + (g28 * a211))));
HXDLIN( 519)												int b38 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a39) + (b212 * a211))));
HXDLIN( 519)												int a40 = ::Std_obj::_hx_int((( (Float)(255) ) * (a39 + a211)));
HXDLIN( 519)												int blended8 = ((((a40 << 24) | (r29 << 16)) | (g29 << 8)) | b38);
HXDLIN( 519)												{
HXLINE( 519)													int hitQuad35;
HXDLIN( 519)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)														hitQuad35 = ((((((blended8 >> 24) & 255) << 24) | ((blended8 & 255) << 16)) | (((blended8 >> 8) & 255) << 8)) | ((blended8 >> 16) & 255));
            													}
            													else {
HXLINE( 519)														hitQuad35 = blended8;
            													}
HXDLIN( 519)													::iterMagic::Iimg_obj::set(undoImage12->image,location8,hitQuad35);
            												}
            											}
            											else {
HXLINE( 519)												::Dynamic this145 = undoImage12->image;
HXDLIN( 519)												int index18;
HXDLIN( 519)												if (undoImage12->useVirtualPos) {
HXLINE( 519)													index18 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x13) - undoImage12->virtualX));
            												}
            												else {
HXLINE( 519)													index18 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage12->width) + x13)) ));
            												}
HXDLIN( 519)												int hitQuad36;
HXDLIN( 519)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)													hitQuad36 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            												}
            												else {
HXLINE( 519)													hitQuad36 = c14;
            												}
HXDLIN( 519)												::iterMagic::Iimg_obj::set(this145,index18,hitQuad36);
            											}
            										}
            										else {
HXLINE( 519)											if (forceClear4) {
HXLINE( 519)												::Dynamic this146 = undoImage12->image;
HXDLIN( 519)												int x14 = (dx7 - rectLeft4);
HXDLIN( 519)												int y14 = (dy7 - rectTop4);
HXDLIN( 519)												int index19;
HXDLIN( 519)												if (undoImage12->useVirtualPos) {
HXLINE( 519)													index19 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage12->virtualY) * ( (Float)(undoImage12->width) )) + x14) - undoImage12->virtualX));
            												}
            												else {
HXLINE( 519)													index19 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage12->width) + x14)) ));
            												}
HXDLIN( 519)												::iterMagic::Iimg_obj::set(this146,index19,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 519)				{
HXLINE( 519)					int _g_min8 = xIter34->start;
HXDLIN( 519)					int _g_max8 = xIter34->max;
HXDLIN( 519)					while((_g_min8 < _g_max8)){
HXLINE( 519)						_g_min8 = (_g_min8 + 1);
HXDLIN( 519)						int px5 = (_g_min8 - 1);
HXDLIN( 519)						Float pcx4 = (( (Float)(px5) ) - dx6);
HXDLIN( 519)						{
HXLINE( 519)							int _g_min9 = yIter34->start;
HXDLIN( 519)							int _g_max9 = yIter34->max;
HXDLIN( 519)							while((_g_min9 < _g_max9)){
HXLINE( 519)								_g_min9 = (_g_min9 + 1);
HXDLIN( 519)								int py5 = (_g_min9 - 1);
HXDLIN( 519)								Float pcy4 = (( (Float)(py5) ) - dy6);
HXDLIN( 519)								Float dot314 = ((pcx4 * bcx4) + (pcy4 * bcy4));
HXDLIN( 519)								Float dot324 = ((pcx4 * acx4) + (pcy4 * acy4));
HXDLIN( 519)								Float ratioA4 = (((dot224 * dot314) - (dot124 * dot324)) * denom14);
HXDLIN( 519)								Float ratioB4 = (((dot114 * dot324) - (dot124 * dot314)) * denom14);
HXDLIN( 519)								Float ratioC4 = ((((Float)1.0) - ratioB4) - ratioA4);
HXDLIN( 519)								bool hitQuad37;
HXDLIN( 519)								bool hitQuad38;
HXDLIN( 519)								if ((ratioA4 >= 0)) {
HXLINE( 519)									hitQuad38 = (ratioB4 >= 0);
            								}
            								else {
HXLINE( 519)									hitQuad38 = false;
            								}
HXDLIN( 519)								if (hitQuad38) {
HXLINE( 519)									hitQuad37 = (ratioC4 >= 0);
            								}
            								else {
HXLINE( 519)									hitQuad37 = false;
            								}
HXDLIN( 519)								if (hitQuad37) {
HXLINE( 519)									int i46 = ::Std_obj::_hx_int((((( (Float)(aA4) ) * ratioA4) + (( (Float)(aB4) ) * ratioB4)) + (( (Float)(aC4) ) * ratioC4)));
HXDLIN( 519)									if ((i46 > 255)) {
HXLINE(  24)										i46 = 255;
            									}
HXLINE( 519)									if ((i46 < 0)) {
HXLINE(  25)										i46 = 0;
            									}
HXLINE( 519)									int a41 = i46;
HXDLIN( 519)									int i47 = ::Std_obj::_hx_int((((( (Float)(rA4) ) * ratioA4) + (( (Float)(rB4) ) * ratioB4)) + (( (Float)(rC4) ) * ratioC4)));
HXDLIN( 519)									if ((i47 > 255)) {
HXLINE(  24)										i47 = 255;
            									}
HXLINE( 519)									if ((i47 < 0)) {
HXLINE(  25)										i47 = 0;
            									}
HXLINE( 519)									int r30 = i47;
HXDLIN( 519)									int i48 = ::Std_obj::_hx_int((((( (Float)(gA4) ) * ratioA4) + (( (Float)(gB4) ) * ratioB4)) + (( (Float)(gC4) ) * ratioC4)));
HXDLIN( 519)									if ((i48 > 255)) {
HXLINE(  24)										i48 = 255;
            									}
HXLINE( 519)									if ((i48 < 0)) {
HXLINE(  25)										i48 = 0;
            									}
HXLINE( 519)									int g30 = i48;
HXDLIN( 519)									int i49 = ::Std_obj::_hx_int((((( (Float)(bA4) ) * ratioA4) + (( (Float)(bB4) ) * ratioB4)) + (( (Float)(bC4) ) * ratioC4)));
HXDLIN( 519)									if ((i49 > 255)) {
HXLINE(  24)										i49 = 255;
            									}
HXLINE( 519)									if ((i49 < 0)) {
HXLINE(  25)										i49 = 0;
            									}
HXLINE( 519)									int b39 = i49;
HXDLIN( 519)									{
HXLINE( 519)										int location9;
HXDLIN( 519)										if (pixelImage->useVirtualPos) {
HXLINE( 519)											location9 = ::Std_obj::_hx_int(((((( (Float)(py5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px5) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 519)											location9 = ::Std_obj::_hx_int(( (Float)(((py5 * pixelImage->width) + px5)) ));
            										}
HXDLIN( 519)										bool hitQuad39;
HXDLIN( 519)										if (pixelImage->transparent) {
HXLINE( 519)											hitQuad39 = (a41 < 254);
            										}
            										else {
HXLINE( 519)											hitQuad39 = false;
            										}
HXDLIN( 519)										if (hitQuad39) {
HXLINE( 519)											int this147 = ::iterMagic::Iimg_obj::get(pixelImage->image,location9);
HXDLIN( 519)											int old4;
HXDLIN( 519)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)												old4 = ((((((this147 >> 24) & 255) << 24) | ((this147 & 255) << 16)) | (((this147 >> 8) & 255) << 8)) | ((this147 >> 16) & 255));
            											}
            											else {
HXLINE( 519)												old4 = this147;
            											}
HXDLIN( 519)											int rhs4 = ((((a41 << 24) | (r30 << 16)) | (g30 << 8)) | b39);
HXDLIN( 519)											Float a113;
HXDLIN( 519)											int this148 = ((old4 >> 24) & 255);
HXDLIN( 519)											if ((this148 == 0)) {
HXLINE( 519)												a113 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												a113 = (( (Float)(this148) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float r111;
HXDLIN( 519)											int this149 = ((old4 >> 16) & 255);
HXDLIN( 519)											if ((this149 == 0)) {
HXLINE( 519)												r111 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												r111 = (( (Float)(this149) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float g111;
HXDLIN( 519)											int this150 = ((old4 >> 8) & 255);
HXDLIN( 519)											if ((this150 == 0)) {
HXLINE( 519)												g111 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												g111 = (( (Float)(this150) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float b114;
HXDLIN( 519)											int this151 = (old4 & 255);
HXDLIN( 519)											if ((this151 == 0)) {
HXLINE( 519)												b114 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												b114 = (( (Float)(this151) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float a212;
HXDLIN( 519)											int this152 = ((rhs4 >> 24) & 255);
HXDLIN( 519)											if ((this152 == 0)) {
HXLINE( 519)												a212 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												a212 = (( (Float)(this152) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float r210;
HXDLIN( 519)											int this153 = ((rhs4 >> 16) & 255);
HXDLIN( 519)											if ((this153 == 0)) {
HXLINE( 519)												r210 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												r210 = (( (Float)(this153) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float g210;
HXDLIN( 519)											int this154 = ((rhs4 >> 8) & 255);
HXDLIN( 519)											if ((this154 == 0)) {
HXLINE( 519)												g210 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												g210 = (( (Float)(this154) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float b213;
HXDLIN( 519)											int this155 = (rhs4 & 255);
HXDLIN( 519)											if ((this155 == 0)) {
HXLINE( 519)												b213 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												b213 = (( (Float)(this155) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float a310 = (a113 * (( (Float)(1) ) - a212));
HXDLIN( 519)											int r31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r111 * a310) + (r210 * a212))));
HXDLIN( 519)											int g31 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g111 * a310) + (g210 * a212))));
HXDLIN( 519)											int b40 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b114 * a310) + (b213 * a212))));
HXDLIN( 519)											int a42 = ::Std_obj::_hx_int((( (Float)(255) ) * (a310 + a212)));
HXDLIN( 519)											int blended9 = ((((a42 << 24) | (r31 << 16)) | (g31 << 8)) | b40);
HXDLIN( 519)											{
HXLINE( 519)												int hitQuad40;
HXDLIN( 519)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)													hitQuad40 = ((((((blended9 >> 24) & 255) << 24) | ((blended9 & 255) << 16)) | (((blended9 >> 8) & 255) << 8)) | ((blended9 >> 16) & 255));
            												}
            												else {
HXLINE( 519)													hitQuad40 = blended9;
            												}
HXDLIN( 519)												::iterMagic::Iimg_obj::set(pixelImage->image,location9,hitQuad40);
            											}
            										}
            										else {
HXLINE( 519)											int value4;
HXDLIN( 519)											if (pixelImage->isLittle) {
HXLINE( 519)												value4 = ((((a41 << 24) | (b39 << 16)) | (g30 << 8)) | r30);
            											}
            											else {
HXLINE( 519)												value4 = ((((a41 << 24) | (r30 << 16)) | (g30 << 8)) | b39);
            											}
HXDLIN( 519)											::iterMagic::Iimg_obj::set(pixelImage->image,location9,value4);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 519)			{
HXLINE( 519)				bool hasHit3 = false;
HXDLIN( 519)				bool hasUndo5 = false;
HXDLIN( 519)				int aA5 = ((color2 >> 24) & 255);
HXDLIN( 519)				int rA5 = ((color2 >> 16) & 255);
HXDLIN( 519)				int gA5 = ((color2 >> 8) & 255);
HXDLIN( 519)				int bA5 = (color2 & 255);
HXDLIN( 519)				int aB5 = ((color1 >> 24) & 255);
HXDLIN( 519)				int rB5 = ((color1 >> 16) & 255);
HXDLIN( 519)				int gB5 = ((color1 >> 8) & 255);
HXDLIN( 519)				int bB5 = (color1 & 255);
HXDLIN( 519)				int aC5 = ((color2 >> 24) & 255);
HXDLIN( 519)				int rC5 = ((color2 >> 16) & 255);
HXDLIN( 519)				int gC5 = ((color2 >> 8) & 255);
HXDLIN( 519)				int bC5 = (color2 & 255);
HXDLIN( 519)				Float bcx5 = (cx2 - dx6);
HXDLIN( 519)				Float bcy5 = (cy2 - dy6);
HXDLIN( 519)				Float acx5 = (bx2 - dx6);
HXDLIN( 519)				Float acy5 = (by2 - dy6);
HXDLIN( 519)				Float dot115 = ((bcx5 * bcx5) + (bcy5 * bcy5));
HXDLIN( 519)				Float dot125 = ((bcx5 * acx5) + (bcy5 * acy5));
HXDLIN( 519)				Float dot225 = ((acx5 * acx5) + (acy5 * acy5));
HXDLIN( 519)				Float denom15 = (( (Float)(1) ) / ((dot115 * dot225) - (dot125 * dot125)));
HXDLIN( 519)				 ::pi_xy::iter::IntIterStart xIter35;
HXDLIN( 519)				if ((bx2 > cx2)) {
HXLINE( 519)					if ((bx2 > dx6)) {
HXLINE( 519)						int min20;
HXDLIN( 519)						if ((cx2 > dx6)) {
HXLINE( 519)							min20 = ::Math_obj::floor(dx6);
            						}
            						else {
HXLINE( 519)							min20 = ::Math_obj::floor(cx2);
            						}
HXDLIN( 519)						int ii_min40 = min20;
HXDLIN( 519)						int ii_max40 = ::Math_obj::ceil(bx2);
HXDLIN( 519)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            					}
            					else {
HXLINE( 519)						int ii_min41 = ::Math_obj::floor(cx2);
HXDLIN( 519)						int ii_max41 = ::Math_obj::ceil(dx6);
HXDLIN( 519)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            					}
            				}
            				else {
HXLINE( 519)					if ((cx2 > dx6)) {
HXLINE( 519)						int min21;
HXDLIN( 519)						if ((bx2 > dx6)) {
HXLINE( 519)							min21 = ::Math_obj::floor(dx6);
            						}
            						else {
HXLINE( 519)							min21 = ::Math_obj::ceil(bx2);
            						}
HXDLIN( 519)						int ii_min42 = min21;
HXDLIN( 519)						int ii_max42 = ::Math_obj::ceil(cx2);
HXDLIN( 519)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            					}
            					else {
HXLINE( 519)						int ii_min43 = ::Math_obj::floor(bx2);
HXDLIN( 519)						int ii_max43 = ::Math_obj::ceil(dx6);
HXDLIN( 519)						xIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            					}
            				}
HXDLIN( 519)				 ::pi_xy::iter::IntIterStart yIter35;
HXDLIN( 519)				if ((by2 > cy2)) {
HXLINE( 519)					if ((by2 > dy6)) {
HXLINE( 519)						int min22;
HXDLIN( 519)						if ((cy2 > dy6)) {
HXLINE( 519)							min22 = ::Math_obj::floor(dy6);
            						}
            						else {
HXLINE( 519)							min22 = ::Math_obj::floor(cy2);
            						}
HXDLIN( 519)						int ii_min44 = min22;
HXDLIN( 519)						int ii_max44 = ::Math_obj::ceil(by2);
HXDLIN( 519)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            					}
            					else {
HXLINE( 519)						int ii_min45 = ::Math_obj::floor(cy2);
HXDLIN( 519)						int ii_max45 = ::Math_obj::ceil(dy6);
HXDLIN( 519)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            					}
            				}
            				else {
HXLINE( 519)					if ((cy2 > dy6)) {
HXLINE( 519)						int min23;
HXDLIN( 519)						if ((by2 > dy6)) {
HXLINE( 519)							min23 = ::Math_obj::floor(dy6);
            						}
            						else {
HXLINE( 519)							min23 = ::Math_obj::ceil(by2);
            						}
HXDLIN( 519)						int ii_min46 = min23;
HXDLIN( 519)						int ii_max46 = ::Math_obj::ceil(cy2);
HXDLIN( 519)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            					}
            					else {
HXLINE( 519)						int ii_min47 = ::Math_obj::floor(by2);
HXDLIN( 519)						int ii_max47 = ::Math_obj::ceil(dy6);
HXDLIN( 519)						yIter35 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            					}
            				}
HXDLIN( 519)				 ::pi_xy::ImageStruct undoImage15 = null();
HXDLIN( 519)				if (hasUndo5) {
HXLINE( 519)					int width5 = ((xIter35->max - xIter35->start) + 1);
HXDLIN( 519)					int height5 = ((yIter35->max - yIter35->start) + 1);
HXDLIN( 519)					 ::Dynamic imageType5 = null();
HXDLIN( 519)					 ::pi_xy::ImageStruct this156 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 519)					if (::hx::IsNull( imageType5 )) {
HXLINE(  54)						imageType5 = ::pi_xy::ImageStruct_obj::defaultType;
            					}
HXLINE( 519)					::Dynamic undoImage16;
HXDLIN( 519)					switch((int)(( (int)(imageType5) ))){
            						case (int)0: {
HXLINE( 519)							 ::iterMagic::BytesImg byt5 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 519)							 ::iterMagic::BytesImg b41 = byt5;
HXDLIN( 519)							{
HXLINE( 519)								b41->width = width5;
HXDLIN( 519)								b41->height = height5;
HXDLIN( 519)								b41->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 519)								b41->data = ::haxe::io::Bytes_obj::alloc((b41->length * 4));
HXDLIN( 519)								{
HXLINE( 519)									int len10 = b41->length;
HXDLIN( 519)									int w5 = 0;
HXDLIN( 519)									{
HXLINE( 519)										int _g100 = 0;
HXDLIN( 519)										int _g101 = b41->height;
HXDLIN( 519)										while((_g100 < _g101)){
HXLINE( 519)											_g100 = (_g100 + 1);
HXDLIN( 519)											int y15 = (_g100 - 1);
HXDLIN( 519)											{
HXLINE( 519)												int _g102 = 0;
HXDLIN( 519)												int _g103 = b41->width;
HXDLIN( 519)												while((_g102 < _g103)){
HXLINE( 519)													_g102 = (_g102 + 1);
HXDLIN( 519)													int x15 = (_g102 - 1);
HXDLIN( 519)													{
HXLINE( 519)														w5 = (w5 + 1);
HXDLIN( 519)														b41->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 519)													{
HXLINE( 519)														w5 = (w5 + 1);
HXDLIN( 519)														b41->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 519)													{
HXLINE( 519)														w5 = (w5 + 1);
HXDLIN( 519)														b41->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
HXDLIN( 519)													{
HXLINE( 519)														w5 = (w5 + 1);
HXDLIN( 519)														b41->data->b[(w5 - 1)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 519)							undoImage16 = b41;
            						}
            						break;
            						case (int)1: {
HXLINE( 519)							 ::iterMagic::ArrIntImg arrI5 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 519)							 ::iterMagic::ArrIntImg a43 = arrI5;
HXDLIN( 519)							{
HXLINE( 519)								a43->width = width5;
HXDLIN( 519)								a43->height = height5;
HXDLIN( 519)								a43->data = ::Array_obj< int >::__new(0);
HXDLIN( 519)								a43->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 519)								{
HXLINE( 519)									int _g104 = 0;
HXDLIN( 519)									int _g105 = a43->length;
HXDLIN( 519)									while((_g104 < _g105)){
HXLINE( 519)										_g104 = (_g104 + 1);
HXDLIN( 519)										int i50 = (_g104 - 1);
HXDLIN( 519)										a43->data[i50] = 0;
            									}
            								}
            							}
HXDLIN( 519)							undoImage16 = a43;
            						}
            						break;
            						case (int)2: {
HXLINE( 519)							 ::iterMagic::U32ArrImg u32a5 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 519)							 ::iterMagic::U32ArrImg b42 = u32a5;
HXDLIN( 519)							{
HXLINE( 519)								b42->width = width5;
HXDLIN( 519)								b42->height = height5;
HXDLIN( 519)								b42->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 519)								int size5 = (b42->length * 4);
HXDLIN( 519)								b42->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size5),0,size5);
HXDLIN( 519)								{
HXLINE( 519)									int _g106 = 0;
HXDLIN( 519)									int _g107 = b42->length;
HXDLIN( 519)									while((_g106 < _g107)){
HXLINE( 519)										_g106 = (_g106 + 1);
HXDLIN( 519)										int i51 = (_g106 - 1);
HXDLIN( 519)										{
HXLINE( 519)											 ::haxe::io::ArrayBufferViewImpl this157 = b42->data;
HXDLIN( 519)											bool undoImage17;
HXDLIN( 519)											if ((i51 >= 0)) {
HXLINE( 519)												undoImage17 = (i51 < (this157->byteLength >> 2));
            											}
            											else {
HXLINE( 519)												undoImage17 = false;
            											}
HXDLIN( 519)											if (undoImage17) {
HXLINE( 519)												 ::haxe::io::Bytes _this5 = this157->bytes;
HXDLIN( 519)												int pos5 = ((i51 << 2) + this157->byteOffset);
HXDLIN( 519)												_this5->b[pos5] = ( (unsigned char)(0) );
HXDLIN( 519)												_this5->b[(pos5 + 1)] = ( (unsigned char)(0) );
HXDLIN( 519)												_this5->b[(pos5 + 2)] = ( (unsigned char)(0) );
HXDLIN( 519)												_this5->b[(pos5 + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
HXDLIN( 519)							undoImage16 = b42;
            						}
            						break;
            						case (int)3: {
HXLINE( 519)							 ::iterMagic::VecIntImg vec5 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 519)							 ::iterMagic::VecIntImg v14 = vec5;
HXDLIN( 519)							{
HXLINE( 519)								v14->width = width5;
HXDLIN( 519)								v14->height = height5;
HXDLIN( 519)								v14->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 519)								v14->data = ::Array_obj< int >::__new(v14->length);
HXDLIN( 519)								{
HXLINE( 519)									int _g108 = 0;
HXDLIN( 519)									int _g109 = v14->length;
HXDLIN( 519)									while((_g108 < _g109)){
HXLINE( 519)										_g108 = (_g108 + 1);
HXDLIN( 519)										int i52 = (_g108 - 1);
HXDLIN( 519)										v14->data->__unsafe_set(i52,0);
            									}
            								}
            							}
HXDLIN( 519)							undoImage16 = v14;
            						}
            						break;
            						case (int)4: {
HXLINE( 519)							 ::iterMagic::StackIntImg sInt5 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 519)							 ::iterMagic::StackIntImg b43 = sInt5;
HXDLIN( 519)							{
HXLINE( 519)								b43->width = width5;
HXDLIN( 519)								b43->height = height5;
HXDLIN( 519)								b43->length = ::Std_obj::_hx_int(( (Float)((width5 * height5)) ));
HXDLIN( 519)								b43->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 519)								{
HXLINE( 519)									int len11 = b43->length;
HXDLIN( 519)									 ::haxe::ds::GenericStack_Int d5 = b43->data;
HXDLIN( 519)									if (::hx::IsNull( d5->head )) {
HXLINE( 519)										int _g110 = 0;
HXDLIN( 519)										int _g111 = len11;
HXDLIN( 519)										while((_g110 < _g111)){
HXLINE( 519)											_g110 = (_g110 + 1);
HXDLIN( 519)											int i53 = (_g110 - 1);
HXDLIN( 519)											d5->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d5->head);
            										}
            									}
            									else {
HXLINE( 519)										int _g112 = 0;
HXDLIN( 519)										int _g113 = len11;
HXDLIN( 519)										while((_g112 < _g113)){
HXLINE( 519)											_g112 = (_g112 + 1);
HXDLIN( 519)											int i54 = (_g112 - 1);
HXDLIN( 519)											{
HXLINE( 519)												 ::haxe::ds::GenericCell_Int l5 = b43->data->head;
HXDLIN( 519)												 ::haxe::ds::GenericCell_Int prev5 = null();
HXDLIN( 519)												{
HXLINE( 519)													int _g114 = 0;
HXDLIN( 519)													int _g115 = i54;
HXDLIN( 519)													while((_g114 < _g115)){
HXLINE( 519)														_g114 = (_g114 + 1);
HXDLIN( 519)														int i55 = (_g114 - 1);
HXLINE( 345)														prev5 = l5;
HXLINE( 346)														l5 = l5->next;
            													}
            												}
HXLINE( 519)												if (::hx::IsNull( prev5 )) {
HXLINE( 519)													b43->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 519)													l5 = null();
            												}
            												else {
HXLINE( 519)													prev5->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l5->next);
HXDLIN( 519)													l5 = null();
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 519)							undoImage16 = b43;
            						}
            						break;
            					}
HXDLIN( 519)					this156->image = undoImage16;
HXDLIN( 519)					this156->width = width5;
HXDLIN( 519)					this156->height = height5;
HXDLIN( 519)					this156->imageType = ( (int)(imageType5) );
HXDLIN( 519)					undoImage15 = this156;
HXDLIN( 519)					{
HXLINE( 519)						int rectLeft5 = xIter35->start;
HXDLIN( 519)						int rectTop5 = yIter35->start;
HXDLIN( 519)						int rectRight5 = xIter35->max;
HXDLIN( 519)						bool forceClear5 = false;
HXDLIN( 519)						{
HXLINE( 519)							int _g116 = rectTop5;
HXDLIN( 519)							int _g117 = yIter35->max;
HXDLIN( 519)							while((_g116 < _g117)){
HXLINE( 519)								_g116 = (_g116 + 1);
HXDLIN( 519)								int dy8 = (_g116 - 1);
HXDLIN( 519)								{
HXLINE( 519)									int _g118 = rectLeft5;
HXDLIN( 519)									int _g119 = rectRight5;
HXDLIN( 519)									while((_g118 < _g119)){
HXLINE( 519)										_g118 = (_g118 + 1);
HXDLIN( 519)										int dx8 = (_g118 - 1);
HXDLIN( 519)										::Dynamic this158 = pixelImage->image;
HXDLIN( 519)										int index20;
HXDLIN( 519)										if (pixelImage->useVirtualPos) {
HXLINE( 519)											index20 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx8) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 519)											index20 = ::Std_obj::_hx_int(( (Float)(((dy8 * pixelImage->width) + dx8)) ));
            										}
HXDLIN( 519)										int c15 = ::iterMagic::Iimg_obj::get(this158,index20);
HXDLIN( 519)										int col5;
HXDLIN( 519)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)											col5 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            										}
            										else {
HXLINE( 519)											col5 = c15;
            										}
HXDLIN( 519)										bool hitQuad41;
HXDLIN( 519)										if (pixelImage->useMask) {
HXLINE( 519)											hitQuad41 = ::hx::IsNotNull( pixelImage->mask );
            										}
            										else {
HXLINE( 519)											hitQuad41 = false;
            										}
HXDLIN( 519)										if (hitQuad41) {
HXLINE( 519)											 ::pi_xy::ImageStruct this159 = pixelImage->mask;
HXDLIN( 519)											::Dynamic this160 = this159->image;
HXDLIN( 519)											int index21;
HXDLIN( 519)											if (this159->useVirtualPos) {
HXLINE( 519)												index21 = ::Std_obj::_hx_int(((((( (Float)(dy8) ) - this159->virtualY) * ( (Float)(this159->width) )) + dx8) - this159->virtualX));
            											}
            											else {
HXLINE( 519)												index21 = ::Std_obj::_hx_int(( (Float)(((dy8 * this159->width) + dx8)) ));
            											}
HXDLIN( 519)											int c16 = ::iterMagic::Iimg_obj::get(this160,index21);
HXDLIN( 519)											int v15;
HXDLIN( 519)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)												v15 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            											}
            											else {
HXLINE( 519)												v15 = c16;
            											}
HXDLIN( 519)											int maskPixel5 = v15;
HXDLIN( 519)											int this161 = col5;
HXDLIN( 519)											if ((maskPixel5 == 0)) {
HXLINE( 519)												col5 = this161;
            											}
            											else {
HXLINE( 519)												Float m05;
HXDLIN( 519)												int this162 = ((maskPixel5 >> 24) & 255);
HXDLIN( 519)												if ((this162 == 0)) {
HXLINE( 519)													m05 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													m05 = (( (Float)(this162) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float m15;
HXDLIN( 519)												int this163 = ((maskPixel5 >> 16) & 255);
HXDLIN( 519)												if ((this163 == 0)) {
HXLINE( 519)													m15 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													m15 = (( (Float)(this163) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float m25;
HXDLIN( 519)												int this164 = ((maskPixel5 >> 8) & 255);
HXDLIN( 519)												if ((this164 == 0)) {
HXLINE( 519)													m25 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													m25 = (( (Float)(this164) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float m35;
HXDLIN( 519)												int this165 = (maskPixel5 & 255);
HXDLIN( 519)												if ((this165 == 0)) {
HXLINE( 519)													m35 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													m35 = (( (Float)(this165) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												int ch05 = ::Std_obj::_hx_int(((((Float)1.) - m05) * ( (Float)(((this161 >> 24) & 255)) )));
HXDLIN( 519)												int ch15 = ::Std_obj::_hx_int(((((Float)1.) - m15) * ( (Float)(((this161 >> 16) & 255)) )));
HXDLIN( 519)												int ch25 = ::Std_obj::_hx_int(((((Float)1.) - m25) * ( (Float)(((this161 >> 8) & 255)) )));
HXDLIN( 519)												int ch35 = ::Std_obj::_hx_int(((((Float)1.) - m35) * ( (Float)((this161 & 255)) )));
HXDLIN( 519)												col5 = ((((::Math_obj::round((( (Float)(ch05) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch15) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch25) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch35) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 519)										if ((col5 != 0)) {
HXLINE( 519)											int x16 = (dx8 - rectLeft5);
HXDLIN( 519)											int y16 = (dy8 - rectTop5);
HXDLIN( 519)											int c17 = col5;
HXDLIN( 519)											bool hitQuad42;
HXDLIN( 519)											if ((((c17 >> 24) & 255) < 254)) {
HXLINE( 519)												hitQuad42 = undoImage15->transparent;
            											}
            											else {
HXLINE( 519)												hitQuad42 = false;
            											}
HXDLIN( 519)											if (hitQuad42) {
HXLINE( 519)												int location10;
HXDLIN( 519)												if (undoImage15->useVirtualPos) {
HXLINE( 519)													location10 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x16) - undoImage15->virtualX));
            												}
            												else {
HXLINE( 519)													location10 = ::Std_obj::_hx_int(( (Float)(((y16 * undoImage15->width) + x16)) ));
            												}
HXDLIN( 519)												int this166 = ::iterMagic::Iimg_obj::get(undoImage15->image,location10);
HXDLIN( 519)												int this167;
HXDLIN( 519)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)													this167 = ((((((this166 >> 24) & 255) << 24) | ((this166 & 255) << 16)) | (((this166 >> 8) & 255) << 8)) | ((this166 >> 16) & 255));
            												}
            												else {
HXLINE( 519)													this167 = this166;
            												}
HXDLIN( 519)												Float a114;
HXDLIN( 519)												int this168 = ((this167 >> 24) & 255);
HXDLIN( 519)												if ((this168 == 0)) {
HXLINE( 519)													a114 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													a114 = (( (Float)(this168) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float r112;
HXDLIN( 519)												int this169 = ((this167 >> 16) & 255);
HXDLIN( 519)												if ((this169 == 0)) {
HXLINE( 519)													r112 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													r112 = (( (Float)(this169) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float g112;
HXDLIN( 519)												int this170 = ((this167 >> 8) & 255);
HXDLIN( 519)												if ((this170 == 0)) {
HXLINE( 519)													g112 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													g112 = (( (Float)(this170) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float b115;
HXDLIN( 519)												int this171 = (this167 & 255);
HXDLIN( 519)												if ((this171 == 0)) {
HXLINE( 519)													b115 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													b115 = (( (Float)(this171) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float a213;
HXDLIN( 519)												int this172 = ((col5 >> 24) & 255);
HXDLIN( 519)												if ((this172 == 0)) {
HXLINE( 519)													a213 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													a213 = (( (Float)(this172) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float r211;
HXDLIN( 519)												int this173 = ((col5 >> 16) & 255);
HXDLIN( 519)												if ((this173 == 0)) {
HXLINE( 519)													r211 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													r211 = (( (Float)(this173) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float g211;
HXDLIN( 519)												int this174 = ((col5 >> 8) & 255);
HXDLIN( 519)												if ((this174 == 0)) {
HXLINE( 519)													g211 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													g211 = (( (Float)(this174) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float b214;
HXDLIN( 519)												int this175 = (col5 & 255);
HXDLIN( 519)												if ((this175 == 0)) {
HXLINE( 519)													b214 = ((Float)0.);
            												}
            												else {
HXLINE( 519)													b214 = (( (Float)(this175) ) / ( (Float)(255) ));
            												}
HXDLIN( 519)												Float a311 = (a114 * (( (Float)(1) ) - a213));
HXDLIN( 519)												int r32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r112 * a311) + (r211 * a213))));
HXDLIN( 519)												int g32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g112 * a311) + (g211 * a213))));
HXDLIN( 519)												int b44 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b115 * a311) + (b214 * a213))));
HXDLIN( 519)												int a44 = ::Std_obj::_hx_int((( (Float)(255) ) * (a311 + a213)));
HXDLIN( 519)												int blended10 = ((((a44 << 24) | (r32 << 16)) | (g32 << 8)) | b44);
HXDLIN( 519)												{
HXLINE( 519)													int hitQuad43;
HXDLIN( 519)													if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)														hitQuad43 = ((((((blended10 >> 24) & 255) << 24) | ((blended10 & 255) << 16)) | (((blended10 >> 8) & 255) << 8)) | ((blended10 >> 16) & 255));
            													}
            													else {
HXLINE( 519)														hitQuad43 = blended10;
            													}
HXDLIN( 519)													::iterMagic::Iimg_obj::set(undoImage15->image,location10,hitQuad43);
            												}
            											}
            											else {
HXLINE( 519)												::Dynamic this176 = undoImage15->image;
HXDLIN( 519)												int index22;
HXDLIN( 519)												if (undoImage15->useVirtualPos) {
HXLINE( 519)													index22 = ::Std_obj::_hx_int(((((( (Float)(y16) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x16) - undoImage15->virtualX));
            												}
            												else {
HXLINE( 519)													index22 = ::Std_obj::_hx_int(( (Float)(((y16 * undoImage15->width) + x16)) ));
            												}
HXDLIN( 519)												int hitQuad44;
HXDLIN( 519)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)													hitQuad44 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            												}
            												else {
HXLINE( 519)													hitQuad44 = c17;
            												}
HXDLIN( 519)												::iterMagic::Iimg_obj::set(this176,index22,hitQuad44);
            											}
            										}
            										else {
HXLINE( 519)											if (forceClear5) {
HXLINE( 519)												::Dynamic this177 = undoImage15->image;
HXDLIN( 519)												int x17 = (dx8 - rectLeft5);
HXDLIN( 519)												int y17 = (dy8 - rectTop5);
HXDLIN( 519)												int index23;
HXDLIN( 519)												if (undoImage15->useVirtualPos) {
HXLINE( 519)													index23 = ::Std_obj::_hx_int(((((( (Float)(y17) ) - undoImage15->virtualY) * ( (Float)(undoImage15->width) )) + x17) - undoImage15->virtualX));
            												}
            												else {
HXLINE( 519)													index23 = ::Std_obj::_hx_int(( (Float)(((y17 * undoImage15->width) + x17)) ));
            												}
HXDLIN( 519)												::iterMagic::Iimg_obj::set(this177,index23,0);
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 519)				{
HXLINE( 519)					int _g_min10 = xIter35->start;
HXDLIN( 519)					int _g_max10 = xIter35->max;
HXDLIN( 519)					while((_g_min10 < _g_max10)){
HXLINE( 519)						_g_min10 = (_g_min10 + 1);
HXDLIN( 519)						int px6 = (_g_min10 - 1);
HXDLIN( 519)						Float pcx5 = (( (Float)(px6) ) - dx6);
HXDLIN( 519)						{
HXLINE( 519)							int _g_min11 = yIter35->start;
HXDLIN( 519)							int _g_max11 = yIter35->max;
HXDLIN( 519)							while((_g_min11 < _g_max11)){
HXLINE( 519)								_g_min11 = (_g_min11 + 1);
HXDLIN( 519)								int py6 = (_g_min11 - 1);
HXDLIN( 519)								Float pcy5 = (( (Float)(py6) ) - dy6);
HXDLIN( 519)								Float dot315 = ((pcx5 * bcx5) + (pcy5 * bcy5));
HXDLIN( 519)								Float dot325 = ((pcx5 * acx5) + (pcy5 * acy5));
HXDLIN( 519)								Float ratioA5 = (((dot225 * dot315) - (dot125 * dot325)) * denom15);
HXDLIN( 519)								Float ratioB5 = (((dot115 * dot325) - (dot125 * dot315)) * denom15);
HXDLIN( 519)								Float ratioC5 = ((((Float)1.0) - ratioB5) - ratioA5);
HXDLIN( 519)								bool hitQuad45;
HXDLIN( 519)								bool hitQuad46;
HXDLIN( 519)								if ((ratioA5 >= 0)) {
HXLINE( 519)									hitQuad46 = (ratioB5 >= 0);
            								}
            								else {
HXLINE( 519)									hitQuad46 = false;
            								}
HXDLIN( 519)								if (hitQuad46) {
HXLINE( 519)									hitQuad45 = (ratioC5 >= 0);
            								}
            								else {
HXLINE( 519)									hitQuad45 = false;
            								}
HXDLIN( 519)								if (hitQuad45) {
HXLINE( 519)									int i56 = ::Std_obj::_hx_int((((( (Float)(aA5) ) * ratioA5) + (( (Float)(aB5) ) * ratioB5)) + (( (Float)(aC5) ) * ratioC5)));
HXDLIN( 519)									if ((i56 > 255)) {
HXLINE(  24)										i56 = 255;
            									}
HXLINE( 519)									if ((i56 < 0)) {
HXLINE(  25)										i56 = 0;
            									}
HXLINE( 519)									int a45 = i56;
HXDLIN( 519)									int i57 = ::Std_obj::_hx_int((((( (Float)(rA5) ) * ratioA5) + (( (Float)(rB5) ) * ratioB5)) + (( (Float)(rC5) ) * ratioC5)));
HXDLIN( 519)									if ((i57 > 255)) {
HXLINE(  24)										i57 = 255;
            									}
HXLINE( 519)									if ((i57 < 0)) {
HXLINE(  25)										i57 = 0;
            									}
HXLINE( 519)									int r33 = i57;
HXDLIN( 519)									int i58 = ::Std_obj::_hx_int((((( (Float)(gA5) ) * ratioA5) + (( (Float)(gB5) ) * ratioB5)) + (( (Float)(gC5) ) * ratioC5)));
HXDLIN( 519)									if ((i58 > 255)) {
HXLINE(  24)										i58 = 255;
            									}
HXLINE( 519)									if ((i58 < 0)) {
HXLINE(  25)										i58 = 0;
            									}
HXLINE( 519)									int g33 = i58;
HXDLIN( 519)									int i59 = ::Std_obj::_hx_int((((( (Float)(bA5) ) * ratioA5) + (( (Float)(bB5) ) * ratioB5)) + (( (Float)(bC5) ) * ratioC5)));
HXDLIN( 519)									if ((i59 > 255)) {
HXLINE(  24)										i59 = 255;
            									}
HXLINE( 519)									if ((i59 < 0)) {
HXLINE(  25)										i59 = 0;
            									}
HXLINE( 519)									int b45 = i59;
HXDLIN( 519)									{
HXLINE( 519)										int location11;
HXDLIN( 519)										if (pixelImage->useVirtualPos) {
HXLINE( 519)											location11 = ::Std_obj::_hx_int(((((( (Float)(py6) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px6) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 519)											location11 = ::Std_obj::_hx_int(( (Float)(((py6 * pixelImage->width) + px6)) ));
            										}
HXDLIN( 519)										bool hitQuad47;
HXDLIN( 519)										if (pixelImage->transparent) {
HXLINE( 519)											hitQuad47 = (a45 < 254);
            										}
            										else {
HXLINE( 519)											hitQuad47 = false;
            										}
HXDLIN( 519)										if (hitQuad47) {
HXLINE( 519)											int this178 = ::iterMagic::Iimg_obj::get(pixelImage->image,location11);
HXDLIN( 519)											int old5;
HXDLIN( 519)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)												old5 = ((((((this178 >> 24) & 255) << 24) | ((this178 & 255) << 16)) | (((this178 >> 8) & 255) << 8)) | ((this178 >> 16) & 255));
            											}
            											else {
HXLINE( 519)												old5 = this178;
            											}
HXDLIN( 519)											int rhs5 = ((((a45 << 24) | (r33 << 16)) | (g33 << 8)) | b45);
HXDLIN( 519)											Float a115;
HXDLIN( 519)											int this179 = ((old5 >> 24) & 255);
HXDLIN( 519)											if ((this179 == 0)) {
HXLINE( 519)												a115 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												a115 = (( (Float)(this179) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float r113;
HXDLIN( 519)											int this180 = ((old5 >> 16) & 255);
HXDLIN( 519)											if ((this180 == 0)) {
HXLINE( 519)												r113 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												r113 = (( (Float)(this180) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float g113;
HXDLIN( 519)											int this181 = ((old5 >> 8) & 255);
HXDLIN( 519)											if ((this181 == 0)) {
HXLINE( 519)												g113 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												g113 = (( (Float)(this181) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float b116;
HXDLIN( 519)											int this182 = (old5 & 255);
HXDLIN( 519)											if ((this182 == 0)) {
HXLINE( 519)												b116 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												b116 = (( (Float)(this182) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float a214;
HXDLIN( 519)											int this183 = ((rhs5 >> 24) & 255);
HXDLIN( 519)											if ((this183 == 0)) {
HXLINE( 519)												a214 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												a214 = (( (Float)(this183) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float r212;
HXDLIN( 519)											int this184 = ((rhs5 >> 16) & 255);
HXDLIN( 519)											if ((this184 == 0)) {
HXLINE( 519)												r212 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												r212 = (( (Float)(this184) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float g212;
HXDLIN( 519)											int this185 = ((rhs5 >> 8) & 255);
HXDLIN( 519)											if ((this185 == 0)) {
HXLINE( 519)												g212 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												g212 = (( (Float)(this185) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float b215;
HXDLIN( 519)											int this186 = (rhs5 & 255);
HXDLIN( 519)											if ((this186 == 0)) {
HXLINE( 519)												b215 = ((Float)0.);
            											}
            											else {
HXLINE( 519)												b215 = (( (Float)(this186) ) / ( (Float)(255) ));
            											}
HXDLIN( 519)											Float a312 = (a115 * (( (Float)(1) ) - a214));
HXDLIN( 519)											int r34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r113 * a312) + (r212 * a214))));
HXDLIN( 519)											int g34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g113 * a312) + (g212 * a214))));
HXDLIN( 519)											int b46 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b116 * a312) + (b215 * a214))));
HXDLIN( 519)											int a46 = ::Std_obj::_hx_int((( (Float)(255) ) * (a312 + a214)));
HXDLIN( 519)											int blended11 = ((((a46 << 24) | (r34 << 16)) | (g34 << 8)) | b46);
HXDLIN( 519)											{
HXLINE( 519)												int hitQuad48;
HXDLIN( 519)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 519)													hitQuad48 = ((((((blended11 >> 24) & 255) << 24) | ((blended11 & 255) << 16)) | (((blended11 >> 8) & 255) << 8)) | ((blended11 >> 16) & 255));
            												}
            												else {
HXLINE( 519)													hitQuad48 = blended11;
            												}
HXDLIN( 519)												::iterMagic::Iimg_obj::set(pixelImage->image,location11,hitQuad48);
            											}
            										}
            										else {
HXLINE( 519)											int value5;
HXDLIN( 519)											if (pixelImage->isLittle) {
HXLINE( 519)												value5 = ((((a45 << 24) | (b45 << 16)) | (g33 << 8)) | r33);
            											}
            											else {
HXLINE( 519)												value5 = ((((a45 << 24) | (r33 << 16)) | (g33 << 8)) | b45);
            											}
HXDLIN( 519)											::iterMagic::Iimg_obj::set(pixelImage->image,location11,value5);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 519)				if ((hasHit3 == false)) {
HXLINE( 519)					 ::pi_xy::algo::HitTri v16 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx2,by2,cx2,cy2,dx6,dy6,true);
HXDLIN( 519)					if (hasUndo5) {
HXLINE( 519)						v16->undoImage = undoImage15;
HXDLIN( 519)						v16->undoX = xIter35->start;
HXDLIN( 519)						v16->undoY = yIter35->start;
            					}
            				}
            			}
HXDLIN( 519)			 ::pi_xy::algo::HitQuad v17 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax2,ay2,bx2,by2,cx2,cy2,dx6,dy6,true);
HXLINE( 511)			hitQuad = v17;
            		}
HXLINE( 521)		Float cx3 = h2;
HXLINE( 522)		Float cy3 = radius2;
HXLINE( 523)		Float bx3 = h2;
HXLINE( 524)		Float by3 = -(radius2);
HXLINE( 525)		Float temp3 = ((Float)0.);
HXLINE( 526)		temp3 = (px + ((bx3 * cos) - (by3 * sin)));
HXLINE( 527)		by3 = (py + ((by3 * cos) + (bx3 * sin)));
HXLINE( 528)		bx3 = temp3;
HXLINE( 529)		temp3 = (px + ((cx3 * cos) - (cy3 * sin)));
HXLINE( 530)		cy3 = (py + ((cy3 * cos) + (cx3 * sin)));
HXLINE( 531)		cx3 = temp3;
HXLINE( 532)		 ::pi_xy::pixel::_TwoGrad::TwoGrad_ twoColors =  ::pi_xy::pixel::_TwoGrad::TwoGrad__obj::__alloc( HX_CTX ,color1,color2);
HXLINE( 533)		int a47 = twoColors->colorClock;
HXDLIN( 533)		int b47 = twoColors->colorAnti;
HXDLIN( 533)		int half = ((((::Math_obj::round(((((( (Float)(((a47 >> 24) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b47 >> 24) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 24) | (::Math_obj::round(((((( (Float)(((a47 >> 16) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b47 >> 16) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 16)) | (::Math_obj::round(((((( (Float)(((a47 >> 8) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b47 >> 8) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 8)) | ::Math_obj::round(((((( (Float)((a47 & 255)) ) / ( (Float)(255) )) + (( (Float)((b47 & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))));
HXLINE( 534)		bool hasUndo6 = false;
HXDLIN( 534)		int aA6 = ((color1 >> 24) & 255);
HXDLIN( 534)		int rA6 = ((color1 >> 16) & 255);
HXDLIN( 534)		int gA6 = ((color1 >> 8) & 255);
HXDLIN( 534)		int bA6 = (color1 & 255);
HXDLIN( 534)		int aB6 = ((half >> 24) & 255);
HXDLIN( 534)		int rB6 = ((half >> 16) & 255);
HXDLIN( 534)		int gB6 = ((half >> 8) & 255);
HXDLIN( 534)		int bB6 = (half & 255);
HXDLIN( 534)		int aC6 = ((color2 >> 24) & 255);
HXDLIN( 534)		int rC6 = ((color2 >> 16) & 255);
HXDLIN( 534)		int gC6 = ((color2 >> 8) & 255);
HXDLIN( 534)		int bC6 = (color2 & 255);
HXDLIN( 534)		Float bcx6 = (bx3 - cx3);
HXDLIN( 534)		Float bcy6 = (by3 - cy3);
HXDLIN( 534)		Float acx6 = (qx - cx3);
HXDLIN( 534)		Float acy6 = (qy - cy3);
HXDLIN( 534)		Float dot116 = ((bcx6 * bcx6) + (bcy6 * bcy6));
HXDLIN( 534)		Float dot126 = ((bcx6 * acx6) + (bcy6 * acy6));
HXDLIN( 534)		Float dot226 = ((acx6 * acx6) + (acy6 * acy6));
HXDLIN( 534)		Float denom16 = (( (Float)(1) ) / ((dot116 * dot226) - (dot126 * dot126)));
HXDLIN( 534)		 ::pi_xy::iter::IntIterStart xIter36;
HXDLIN( 534)		if ((qx > bx3)) {
HXLINE( 534)			if ((qx > cx3)) {
HXLINE( 534)				int min24;
HXDLIN( 534)				if ((bx3 > cx3)) {
HXLINE( 534)					min24 = ::Math_obj::floor(cx3);
            				}
            				else {
HXLINE( 534)					min24 = ::Math_obj::floor(bx3);
            				}
HXDLIN( 534)				int ii_min48 = min24;
HXDLIN( 534)				int ii_max48 = ::Math_obj::ceil(qx);
HXDLIN( 534)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min48,ii_max48);
            			}
            			else {
HXLINE( 534)				int ii_min49 = ::Math_obj::floor(bx3);
HXDLIN( 534)				int ii_max49 = ::Math_obj::ceil(cx3);
HXDLIN( 534)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min49,ii_max49);
            			}
            		}
            		else {
HXLINE( 534)			if ((bx3 > cx3)) {
HXLINE( 534)				int min25;
HXDLIN( 534)				if ((qx > cx3)) {
HXLINE( 534)					min25 = ::Math_obj::floor(cx3);
            				}
            				else {
HXLINE( 534)					min25 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 534)				int ii_min50 = min25;
HXDLIN( 534)				int ii_max50 = ::Math_obj::ceil(bx3);
HXDLIN( 534)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min50,ii_max50);
            			}
            			else {
HXLINE( 534)				int ii_min51 = ::Math_obj::floor(qx);
HXDLIN( 534)				int ii_max51 = ::Math_obj::ceil(cx3);
HXDLIN( 534)				xIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min51,ii_max51);
            			}
            		}
HXDLIN( 534)		 ::pi_xy::iter::IntIterStart yIter36;
HXDLIN( 534)		if ((qy > by3)) {
HXLINE( 534)			if ((qy > cy3)) {
HXLINE( 534)				int min26;
HXDLIN( 534)				if ((by3 > cy3)) {
HXLINE( 534)					min26 = ::Math_obj::floor(cy3);
            				}
            				else {
HXLINE( 534)					min26 = ::Math_obj::floor(by3);
            				}
HXDLIN( 534)				int ii_min52 = min26;
HXDLIN( 534)				int ii_max52 = ::Math_obj::ceil(qy);
HXDLIN( 534)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min52,ii_max52);
            			}
            			else {
HXLINE( 534)				int ii_min53 = ::Math_obj::floor(by3);
HXDLIN( 534)				int ii_max53 = ::Math_obj::ceil(cy3);
HXDLIN( 534)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min53,ii_max53);
            			}
            		}
            		else {
HXLINE( 534)			if ((by3 > cy3)) {
HXLINE( 534)				int min27;
HXDLIN( 534)				if ((qy > cy3)) {
HXLINE( 534)					min27 = ::Math_obj::floor(cy3);
            				}
            				else {
HXLINE( 534)					min27 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 534)				int ii_min54 = min27;
HXDLIN( 534)				int ii_max54 = ::Math_obj::ceil(by3);
HXDLIN( 534)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min54,ii_max54);
            			}
            			else {
HXLINE( 534)				int ii_min55 = ::Math_obj::floor(qy);
HXDLIN( 534)				int ii_max55 = ::Math_obj::ceil(cy3);
HXDLIN( 534)				yIter36 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min55,ii_max55);
            			}
            		}
HXDLIN( 534)		 ::pi_xy::ImageStruct undoImage18 = null();
HXDLIN( 534)		if (hasUndo6) {
HXLINE( 534)			int width6 = ((xIter36->max - xIter36->start) + 1);
HXDLIN( 534)			int height6 = ((yIter36->max - yIter36->start) + 1);
HXDLIN( 534)			 ::Dynamic imageType6 = null();
HXDLIN( 534)			 ::pi_xy::ImageStruct this187 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 534)			if (::hx::IsNull( imageType6 )) {
HXLINE(  54)				imageType6 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 534)			::Dynamic undoImage19;
HXDLIN( 534)			switch((int)(( (int)(imageType6) ))){
            				case (int)0: {
HXLINE( 534)					 ::iterMagic::BytesImg byt6 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 534)					 ::iterMagic::BytesImg b48 = byt6;
HXDLIN( 534)					{
HXLINE( 534)						b48->width = width6;
HXDLIN( 534)						b48->height = height6;
HXDLIN( 534)						b48->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 534)						b48->data = ::haxe::io::Bytes_obj::alloc((b48->length * 4));
HXDLIN( 534)						{
HXLINE( 534)							int len12 = b48->length;
HXDLIN( 534)							int w6 = 0;
HXDLIN( 534)							{
HXLINE( 534)								int _g120 = 0;
HXDLIN( 534)								int _g121 = b48->height;
HXDLIN( 534)								while((_g120 < _g121)){
HXLINE( 534)									_g120 = (_g120 + 1);
HXDLIN( 534)									int y18 = (_g120 - 1);
HXDLIN( 534)									{
HXLINE( 534)										int _g122 = 0;
HXDLIN( 534)										int _g123 = b48->width;
HXDLIN( 534)										while((_g122 < _g123)){
HXLINE( 534)											_g122 = (_g122 + 1);
HXDLIN( 534)											int x18 = (_g122 - 1);
HXDLIN( 534)											{
HXLINE( 534)												w6 = (w6 + 1);
HXDLIN( 534)												b48->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 534)											{
HXLINE( 534)												w6 = (w6 + 1);
HXDLIN( 534)												b48->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 534)											{
HXLINE( 534)												w6 = (w6 + 1);
HXDLIN( 534)												b48->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 534)											{
HXLINE( 534)												w6 = (w6 + 1);
HXDLIN( 534)												b48->data->b[(w6 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 534)					undoImage19 = b48;
            				}
            				break;
            				case (int)1: {
HXLINE( 534)					 ::iterMagic::ArrIntImg arrI6 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 534)					 ::iterMagic::ArrIntImg a48 = arrI6;
HXDLIN( 534)					{
HXLINE( 534)						a48->width = width6;
HXDLIN( 534)						a48->height = height6;
HXDLIN( 534)						a48->data = ::Array_obj< int >::__new(0);
HXDLIN( 534)						a48->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 534)						{
HXLINE( 534)							int _g124 = 0;
HXDLIN( 534)							int _g125 = a48->length;
HXDLIN( 534)							while((_g124 < _g125)){
HXLINE( 534)								_g124 = (_g124 + 1);
HXDLIN( 534)								int i60 = (_g124 - 1);
HXDLIN( 534)								a48->data[i60] = 0;
            							}
            						}
            					}
HXDLIN( 534)					undoImage19 = a48;
            				}
            				break;
            				case (int)2: {
HXLINE( 534)					 ::iterMagic::U32ArrImg u32a6 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 534)					 ::iterMagic::U32ArrImg b49 = u32a6;
HXDLIN( 534)					{
HXLINE( 534)						b49->width = width6;
HXDLIN( 534)						b49->height = height6;
HXDLIN( 534)						b49->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 534)						int size6 = (b49->length * 4);
HXDLIN( 534)						b49->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size6),0,size6);
HXDLIN( 534)						{
HXLINE( 534)							int _g126 = 0;
HXDLIN( 534)							int _g127 = b49->length;
HXDLIN( 534)							while((_g126 < _g127)){
HXLINE( 534)								_g126 = (_g126 + 1);
HXDLIN( 534)								int i61 = (_g126 - 1);
HXDLIN( 534)								{
HXLINE( 534)									 ::haxe::io::ArrayBufferViewImpl this188 = b49->data;
HXDLIN( 534)									bool undoImage20;
HXDLIN( 534)									if ((i61 >= 0)) {
HXLINE( 534)										undoImage20 = (i61 < (this188->byteLength >> 2));
            									}
            									else {
HXLINE( 534)										undoImage20 = false;
            									}
HXDLIN( 534)									if (undoImage20) {
HXLINE( 534)										 ::haxe::io::Bytes _this6 = this188->bytes;
HXDLIN( 534)										int pos6 = ((i61 << 2) + this188->byteOffset);
HXDLIN( 534)										_this6->b[pos6] = ( (unsigned char)(0) );
HXDLIN( 534)										_this6->b[(pos6 + 1)] = ( (unsigned char)(0) );
HXDLIN( 534)										_this6->b[(pos6 + 2)] = ( (unsigned char)(0) );
HXDLIN( 534)										_this6->b[(pos6 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 534)					undoImage19 = b49;
            				}
            				break;
            				case (int)3: {
HXLINE( 534)					 ::iterMagic::VecIntImg vec6 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 534)					 ::iterMagic::VecIntImg v18 = vec6;
HXDLIN( 534)					{
HXLINE( 534)						v18->width = width6;
HXDLIN( 534)						v18->height = height6;
HXDLIN( 534)						v18->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 534)						v18->data = ::Array_obj< int >::__new(v18->length);
HXDLIN( 534)						{
HXLINE( 534)							int _g128 = 0;
HXDLIN( 534)							int _g129 = v18->length;
HXDLIN( 534)							while((_g128 < _g129)){
HXLINE( 534)								_g128 = (_g128 + 1);
HXDLIN( 534)								int i62 = (_g128 - 1);
HXDLIN( 534)								v18->data->__unsafe_set(i62,0);
            							}
            						}
            					}
HXDLIN( 534)					undoImage19 = v18;
            				}
            				break;
            				case (int)4: {
HXLINE( 534)					 ::iterMagic::StackIntImg sInt6 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 534)					 ::iterMagic::StackIntImg b50 = sInt6;
HXDLIN( 534)					{
HXLINE( 534)						b50->width = width6;
HXDLIN( 534)						b50->height = height6;
HXDLIN( 534)						b50->length = ::Std_obj::_hx_int(( (Float)((width6 * height6)) ));
HXDLIN( 534)						b50->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 534)						{
HXLINE( 534)							int len13 = b50->length;
HXDLIN( 534)							 ::haxe::ds::GenericStack_Int d6 = b50->data;
HXDLIN( 534)							if (::hx::IsNull( d6->head )) {
HXLINE( 534)								int _g130 = 0;
HXDLIN( 534)								int _g131 = len13;
HXDLIN( 534)								while((_g130 < _g131)){
HXLINE( 534)									_g130 = (_g130 + 1);
HXDLIN( 534)									int i63 = (_g130 - 1);
HXDLIN( 534)									d6->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d6->head);
            								}
            							}
            							else {
HXLINE( 534)								int _g132 = 0;
HXDLIN( 534)								int _g133 = len13;
HXDLIN( 534)								while((_g132 < _g133)){
HXLINE( 534)									_g132 = (_g132 + 1);
HXDLIN( 534)									int i64 = (_g132 - 1);
HXDLIN( 534)									{
HXLINE( 534)										 ::haxe::ds::GenericCell_Int l6 = b50->data->head;
HXDLIN( 534)										 ::haxe::ds::GenericCell_Int prev6 = null();
HXDLIN( 534)										{
HXLINE( 534)											int _g134 = 0;
HXDLIN( 534)											int _g135 = i64;
HXDLIN( 534)											while((_g134 < _g135)){
HXLINE( 534)												_g134 = (_g134 + 1);
HXDLIN( 534)												int i65 = (_g134 - 1);
HXLINE( 345)												prev6 = l6;
HXLINE( 346)												l6 = l6->next;
            											}
            										}
HXLINE( 534)										if (::hx::IsNull( prev6 )) {
HXLINE( 534)											b50->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 534)											l6 = null();
            										}
            										else {
HXLINE( 534)											prev6->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l6->next);
HXDLIN( 534)											l6 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 534)					undoImage19 = b50;
            				}
            				break;
            			}
HXDLIN( 534)			this187->image = undoImage19;
HXDLIN( 534)			this187->width = width6;
HXDLIN( 534)			this187->height = height6;
HXDLIN( 534)			this187->imageType = ( (int)(imageType6) );
HXDLIN( 534)			undoImage18 = this187;
HXDLIN( 534)			{
HXLINE( 534)				int rectLeft6 = xIter36->start;
HXDLIN( 534)				int rectTop6 = yIter36->start;
HXDLIN( 534)				int rectRight6 = xIter36->max;
HXDLIN( 534)				bool forceClear6 = false;
HXDLIN( 534)				{
HXLINE( 534)					int _g136 = rectTop6;
HXDLIN( 534)					int _g137 = yIter36->max;
HXDLIN( 534)					while((_g136 < _g137)){
HXLINE( 534)						_g136 = (_g136 + 1);
HXDLIN( 534)						int dy9 = (_g136 - 1);
HXDLIN( 534)						{
HXLINE( 534)							int _g138 = rectLeft6;
HXDLIN( 534)							int _g139 = rectRight6;
HXDLIN( 534)							while((_g138 < _g139)){
HXLINE( 534)								_g138 = (_g138 + 1);
HXDLIN( 534)								int dx9 = (_g138 - 1);
HXDLIN( 534)								::Dynamic this189 = pixelImage->image;
HXDLIN( 534)								int index24;
HXDLIN( 534)								if (pixelImage->useVirtualPos) {
HXLINE( 534)									index24 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx9) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 534)									index24 = ::Std_obj::_hx_int(( (Float)(((dy9 * pixelImage->width) + dx9)) ));
            								}
HXDLIN( 534)								int c18 = ::iterMagic::Iimg_obj::get(this189,index24);
HXDLIN( 534)								int col6;
HXDLIN( 534)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 534)									col6 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            								}
            								else {
HXLINE( 534)									col6 = c18;
            								}
HXDLIN( 534)								bool _hx_tmp;
HXDLIN( 534)								if (pixelImage->useMask) {
HXLINE( 534)									_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 534)									_hx_tmp = false;
            								}
HXDLIN( 534)								if (_hx_tmp) {
HXLINE( 534)									 ::pi_xy::ImageStruct this190 = pixelImage->mask;
HXDLIN( 534)									::Dynamic this191 = this190->image;
HXDLIN( 534)									int index25;
HXDLIN( 534)									if (this190->useVirtualPos) {
HXLINE( 534)										index25 = ::Std_obj::_hx_int(((((( (Float)(dy9) ) - this190->virtualY) * ( (Float)(this190->width) )) + dx9) - this190->virtualX));
            									}
            									else {
HXLINE( 534)										index25 = ::Std_obj::_hx_int(( (Float)(((dy9 * this190->width) + dx9)) ));
            									}
HXDLIN( 534)									int c19 = ::iterMagic::Iimg_obj::get(this191,index25);
HXDLIN( 534)									int v19;
HXDLIN( 534)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 534)										v19 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            									}
            									else {
HXLINE( 534)										v19 = c19;
            									}
HXDLIN( 534)									int maskPixel6 = v19;
HXDLIN( 534)									int this192 = col6;
HXDLIN( 534)									if ((maskPixel6 == 0)) {
HXLINE( 534)										col6 = this192;
            									}
            									else {
HXLINE( 534)										Float m06;
HXDLIN( 534)										int this193 = ((maskPixel6 >> 24) & 255);
HXDLIN( 534)										if ((this193 == 0)) {
HXLINE( 534)											m06 = ((Float)0.);
            										}
            										else {
HXLINE( 534)											m06 = (( (Float)(this193) ) / ( (Float)(255) ));
            										}
HXDLIN( 534)										Float m16;
HXDLIN( 534)										int this194 = ((maskPixel6 >> 16) & 255);
HXDLIN( 534)										if ((this194 == 0)) {
HXLINE( 534)											m16 = ((Float)0.);
            										}
            										else {
HXLINE( 534)											m16 = (( (Float)(this194) ) / ( (Float)(255) ));
            										}
HXDLIN( 534)										Float m26;
HXDLIN( 534)										int this195 = ((maskPixel6 >> 8) & 255);
HXDLIN( 534)										if ((this195 == 0)) {
HXLINE( 534)											m26 = ((Float)0.);
            										}
            										else {
HXLINE( 534)											m26 = (( (Float)(this195) ) / ( (Float)(255) ));
            										}
HXDLIN( 534)										Float m36;
HXDLIN( 534)										int this196 = (maskPixel6 & 255);
HXDLIN( 534)										if ((this196 == 0)) {
HXLINE( 534)											m36 = ((Float)0.);
            										}
            										else {
HXLINE( 534)											m36 = (( (Float)(this196) ) / ( (Float)(255) ));
            										}
HXDLIN( 534)										int ch06 = ::Std_obj::_hx_int(((((Float)1.) - m06) * ( (Float)(((this192 >> 24) & 255)) )));
HXDLIN( 534)										int ch16 = ::Std_obj::_hx_int(((((Float)1.) - m16) * ( (Float)(((this192 >> 16) & 255)) )));
HXDLIN( 534)										int ch26 = ::Std_obj::_hx_int(((((Float)1.) - m26) * ( (Float)(((this192 >> 8) & 255)) )));
HXDLIN( 534)										int ch36 = ::Std_obj::_hx_int(((((Float)1.) - m36) * ( (Float)((this192 & 255)) )));
HXDLIN( 534)										col6 = ((((::Math_obj::round((( (Float)(ch06) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch16) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch26) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch36) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 534)								if ((col6 != 0)) {
HXLINE( 534)									int x19 = (dx9 - rectLeft6);
HXDLIN( 534)									int y19 = (dy9 - rectTop6);
HXDLIN( 534)									int c20 = col6;
HXDLIN( 534)									bool _hx_tmp1;
HXDLIN( 534)									if ((((c20 >> 24) & 255) < 254)) {
HXLINE( 534)										_hx_tmp1 = undoImage18->transparent;
            									}
            									else {
HXLINE( 534)										_hx_tmp1 = false;
            									}
HXDLIN( 534)									if (_hx_tmp1) {
HXLINE( 534)										int location12;
HXDLIN( 534)										if (undoImage18->useVirtualPos) {
HXLINE( 534)											location12 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x19) - undoImage18->virtualX));
            										}
            										else {
HXLINE( 534)											location12 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage18->width) + x19)) ));
            										}
HXDLIN( 534)										int this197 = ::iterMagic::Iimg_obj::get(undoImage18->image,location12);
HXDLIN( 534)										int this198;
HXDLIN( 534)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 534)											this198 = ((((((this197 >> 24) & 255) << 24) | ((this197 & 255) << 16)) | (((this197 >> 8) & 255) << 8)) | ((this197 >> 16) & 255));
            										}
            										else {
HXLINE( 534)											this198 = this197;
            										}
HXDLIN( 534)										Float a116;
HXDLIN( 534)										int this199 = ((this198 >> 24) & 255);
HXDLIN( 534)										if ((this199 == 0)) {
HXLINE( 534)											a116 = ((Float)0.);
            										}
            										else {
HXLINE( 534)											a116 = (( (Float)(this199) ) / ( (Float)(255) ));
            										}
HXDLIN( 534)										Float r114;
HXDLIN( 534)										int this200 = ((this198 >> 16) & 255);
HXDLIN( 534)										if ((this200 == 0)) {
HXLINE( 534)											r114 = ((Float)0.);
            										}
            										else {
HXLINE( 534)											r114 = (( (Float)(this200) ) / ( (Float)(255) ));
            										}
HXDLIN( 534)										Float g114;
HXDLIN( 534)										int this201 = ((this198 >> 8) & 255);
HXDLIN( 534)										if ((this201 == 0)) {
HXLINE( 534)											g114 = ((Float)0.);
            										}
            										else {
HXLINE( 534)											g114 = (( (Float)(this201) ) / ( (Float)(255) ));
            										}
HXDLIN( 534)										Float b117;
HXDLIN( 534)										int this202 = (this198 & 255);
HXDLIN( 534)										if ((this202 == 0)) {
HXLINE( 534)											b117 = ((Float)0.);
            										}
            										else {
HXLINE( 534)											b117 = (( (Float)(this202) ) / ( (Float)(255) ));
            										}
HXDLIN( 534)										Float a215;
HXDLIN( 534)										int this203 = ((col6 >> 24) & 255);
HXDLIN( 534)										if ((this203 == 0)) {
HXLINE( 534)											a215 = ((Float)0.);
            										}
            										else {
HXLINE( 534)											a215 = (( (Float)(this203) ) / ( (Float)(255) ));
            										}
HXDLIN( 534)										Float r213;
HXDLIN( 534)										int this204 = ((col6 >> 16) & 255);
HXDLIN( 534)										if ((this204 == 0)) {
HXLINE( 534)											r213 = ((Float)0.);
            										}
            										else {
HXLINE( 534)											r213 = (( (Float)(this204) ) / ( (Float)(255) ));
            										}
HXDLIN( 534)										Float g213;
HXDLIN( 534)										int this205 = ((col6 >> 8) & 255);
HXDLIN( 534)										if ((this205 == 0)) {
HXLINE( 534)											g213 = ((Float)0.);
            										}
            										else {
HXLINE( 534)											g213 = (( (Float)(this205) ) / ( (Float)(255) ));
            										}
HXDLIN( 534)										Float b216;
HXDLIN( 534)										int this206 = (col6 & 255);
HXDLIN( 534)										if ((this206 == 0)) {
HXLINE( 534)											b216 = ((Float)0.);
            										}
            										else {
HXLINE( 534)											b216 = (( (Float)(this206) ) / ( (Float)(255) ));
            										}
HXDLIN( 534)										Float a313 = (a116 * (( (Float)(1) ) - a215));
HXDLIN( 534)										int r35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r114 * a313) + (r213 * a215))));
HXDLIN( 534)										int g35 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g114 * a313) + (g213 * a215))));
HXDLIN( 534)										int b51 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b117 * a313) + (b216 * a215))));
HXDLIN( 534)										int a49 = ::Std_obj::_hx_int((( (Float)(255) ) * (a313 + a215)));
HXDLIN( 534)										int blended12 = ((((a49 << 24) | (r35 << 16)) | (g35 << 8)) | b51);
HXDLIN( 534)										{
HXLINE( 534)											int _hx_tmp2;
HXDLIN( 534)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 534)												_hx_tmp2 = ((((((blended12 >> 24) & 255) << 24) | ((blended12 & 255) << 16)) | (((blended12 >> 8) & 255) << 8)) | ((blended12 >> 16) & 255));
            											}
            											else {
HXLINE( 534)												_hx_tmp2 = blended12;
            											}
HXDLIN( 534)											::iterMagic::Iimg_obj::set(undoImage18->image,location12,_hx_tmp2);
            										}
            									}
            									else {
HXLINE( 534)										::Dynamic this207 = undoImage18->image;
HXDLIN( 534)										int index26;
HXDLIN( 534)										if (undoImage18->useVirtualPos) {
HXLINE( 534)											index26 = ::Std_obj::_hx_int(((((( (Float)(y19) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x19) - undoImage18->virtualX));
            										}
            										else {
HXLINE( 534)											index26 = ::Std_obj::_hx_int(( (Float)(((y19 * undoImage18->width) + x19)) ));
            										}
HXDLIN( 534)										int _hx_tmp3;
HXDLIN( 534)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 534)											_hx_tmp3 = ((((((c20 >> 24) & 255) << 24) | ((c20 & 255) << 16)) | (((c20 >> 8) & 255) << 8)) | ((c20 >> 16) & 255));
            										}
            										else {
HXLINE( 534)											_hx_tmp3 = c20;
            										}
HXDLIN( 534)										::iterMagic::Iimg_obj::set(this207,index26,_hx_tmp3);
            									}
            								}
            								else {
HXLINE( 534)									if (forceClear6) {
HXLINE( 534)										::Dynamic this208 = undoImage18->image;
HXDLIN( 534)										int x20 = (dx9 - rectLeft6);
HXDLIN( 534)										int y20 = (dy9 - rectTop6);
HXDLIN( 534)										int index27;
HXDLIN( 534)										if (undoImage18->useVirtualPos) {
HXLINE( 534)											index27 = ::Std_obj::_hx_int(((((( (Float)(y20) ) - undoImage18->virtualY) * ( (Float)(undoImage18->width) )) + x20) - undoImage18->virtualX));
            										}
            										else {
HXLINE( 534)											index27 = ::Std_obj::_hx_int(( (Float)(((y20 * undoImage18->width) + x20)) ));
            										}
HXDLIN( 534)										::iterMagic::Iimg_obj::set(this208,index27,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 534)		{
HXLINE( 534)			int _g_min12 = xIter36->start;
HXDLIN( 534)			int _g_max12 = xIter36->max;
HXDLIN( 534)			while((_g_min12 < _g_max12)){
HXLINE( 534)				_g_min12 = (_g_min12 + 1);
HXDLIN( 534)				int px7 = (_g_min12 - 1);
HXDLIN( 534)				Float pcx6 = (( (Float)(px7) ) - cx3);
HXDLIN( 534)				{
HXLINE( 534)					int _g_min13 = yIter36->start;
HXDLIN( 534)					int _g_max13 = yIter36->max;
HXDLIN( 534)					while((_g_min13 < _g_max13)){
HXLINE( 534)						_g_min13 = (_g_min13 + 1);
HXDLIN( 534)						int py7 = (_g_min13 - 1);
HXDLIN( 534)						Float pcy6 = (( (Float)(py7) ) - cy3);
HXDLIN( 534)						Float dot316 = ((pcx6 * bcx6) + (pcy6 * bcy6));
HXDLIN( 534)						Float dot326 = ((pcx6 * acx6) + (pcy6 * acy6));
HXDLIN( 534)						Float ratioA6 = (((dot226 * dot316) - (dot126 * dot326)) * denom16);
HXDLIN( 534)						Float ratioB6 = (((dot116 * dot326) - (dot126 * dot316)) * denom16);
HXDLIN( 534)						Float ratioC6 = ((((Float)1.0) - ratioB6) - ratioA6);
HXDLIN( 534)						bool _hx_tmp4;
HXDLIN( 534)						bool _hx_tmp5;
HXDLIN( 534)						if ((ratioA6 >= 0)) {
HXLINE( 534)							_hx_tmp5 = (ratioB6 >= 0);
            						}
            						else {
HXLINE( 534)							_hx_tmp5 = false;
            						}
HXDLIN( 534)						if (_hx_tmp5) {
HXLINE( 534)							_hx_tmp4 = (ratioC6 >= 0);
            						}
            						else {
HXLINE( 534)							_hx_tmp4 = false;
            						}
HXDLIN( 534)						if (_hx_tmp4) {
HXLINE( 534)							int i66 = ::Std_obj::_hx_int((((( (Float)(aA6) ) * ratioA6) + (( (Float)(aB6) ) * ratioB6)) + (( (Float)(aC6) ) * ratioC6)));
HXDLIN( 534)							if ((i66 > 255)) {
HXLINE(  24)								i66 = 255;
            							}
HXLINE( 534)							if ((i66 < 0)) {
HXLINE(  25)								i66 = 0;
            							}
HXLINE( 534)							int a50 = i66;
HXDLIN( 534)							int i67 = ::Std_obj::_hx_int((((( (Float)(rA6) ) * ratioA6) + (( (Float)(rB6) ) * ratioB6)) + (( (Float)(rC6) ) * ratioC6)));
HXDLIN( 534)							if ((i67 > 255)) {
HXLINE(  24)								i67 = 255;
            							}
HXLINE( 534)							if ((i67 < 0)) {
HXLINE(  25)								i67 = 0;
            							}
HXLINE( 534)							int r36 = i67;
HXDLIN( 534)							int i68 = ::Std_obj::_hx_int((((( (Float)(gA6) ) * ratioA6) + (( (Float)(gB6) ) * ratioB6)) + (( (Float)(gC6) ) * ratioC6)));
HXDLIN( 534)							if ((i68 > 255)) {
HXLINE(  24)								i68 = 255;
            							}
HXLINE( 534)							if ((i68 < 0)) {
HXLINE(  25)								i68 = 0;
            							}
HXLINE( 534)							int g36 = i68;
HXDLIN( 534)							int i69 = ::Std_obj::_hx_int((((( (Float)(bA6) ) * ratioA6) + (( (Float)(bB6) ) * ratioB6)) + (( (Float)(bC6) ) * ratioC6)));
HXDLIN( 534)							if ((i69 > 255)) {
HXLINE(  24)								i69 = 255;
            							}
HXLINE( 534)							if ((i69 < 0)) {
HXLINE(  25)								i69 = 0;
            							}
HXLINE( 534)							int b52 = i69;
HXDLIN( 534)							{
HXLINE( 534)								int location13;
HXDLIN( 534)								if (pixelImage->useVirtualPos) {
HXLINE( 534)									location13 = ::Std_obj::_hx_int(((((( (Float)(py7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px7) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 534)									location13 = ::Std_obj::_hx_int(( (Float)(((py7 * pixelImage->width) + px7)) ));
            								}
HXDLIN( 534)								bool _hx_tmp6;
HXDLIN( 534)								if (pixelImage->transparent) {
HXLINE( 534)									_hx_tmp6 = (a50 < 254);
            								}
            								else {
HXLINE( 534)									_hx_tmp6 = false;
            								}
HXDLIN( 534)								if (_hx_tmp6) {
HXLINE( 534)									int this209 = ::iterMagic::Iimg_obj::get(pixelImage->image,location13);
HXDLIN( 534)									int old6;
HXDLIN( 534)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 534)										old6 = ((((((this209 >> 24) & 255) << 24) | ((this209 & 255) << 16)) | (((this209 >> 8) & 255) << 8)) | ((this209 >> 16) & 255));
            									}
            									else {
HXLINE( 534)										old6 = this209;
            									}
HXDLIN( 534)									int rhs6 = ((((a50 << 24) | (r36 << 16)) | (g36 << 8)) | b52);
HXDLIN( 534)									Float a117;
HXDLIN( 534)									int this210 = ((old6 >> 24) & 255);
HXDLIN( 534)									if ((this210 == 0)) {
HXLINE( 534)										a117 = ((Float)0.);
            									}
            									else {
HXLINE( 534)										a117 = (( (Float)(this210) ) / ( (Float)(255) ));
            									}
HXDLIN( 534)									Float r115;
HXDLIN( 534)									int this211 = ((old6 >> 16) & 255);
HXDLIN( 534)									if ((this211 == 0)) {
HXLINE( 534)										r115 = ((Float)0.);
            									}
            									else {
HXLINE( 534)										r115 = (( (Float)(this211) ) / ( (Float)(255) ));
            									}
HXDLIN( 534)									Float g115;
HXDLIN( 534)									int this212 = ((old6 >> 8) & 255);
HXDLIN( 534)									if ((this212 == 0)) {
HXLINE( 534)										g115 = ((Float)0.);
            									}
            									else {
HXLINE( 534)										g115 = (( (Float)(this212) ) / ( (Float)(255) ));
            									}
HXDLIN( 534)									Float b118;
HXDLIN( 534)									int this213 = (old6 & 255);
HXDLIN( 534)									if ((this213 == 0)) {
HXLINE( 534)										b118 = ((Float)0.);
            									}
            									else {
HXLINE( 534)										b118 = (( (Float)(this213) ) / ( (Float)(255) ));
            									}
HXDLIN( 534)									Float a216;
HXDLIN( 534)									int this214 = ((rhs6 >> 24) & 255);
HXDLIN( 534)									if ((this214 == 0)) {
HXLINE( 534)										a216 = ((Float)0.);
            									}
            									else {
HXLINE( 534)										a216 = (( (Float)(this214) ) / ( (Float)(255) ));
            									}
HXDLIN( 534)									Float r214;
HXDLIN( 534)									int this215 = ((rhs6 >> 16) & 255);
HXDLIN( 534)									if ((this215 == 0)) {
HXLINE( 534)										r214 = ((Float)0.);
            									}
            									else {
HXLINE( 534)										r214 = (( (Float)(this215) ) / ( (Float)(255) ));
            									}
HXDLIN( 534)									Float g214;
HXDLIN( 534)									int this216 = ((rhs6 >> 8) & 255);
HXDLIN( 534)									if ((this216 == 0)) {
HXLINE( 534)										g214 = ((Float)0.);
            									}
            									else {
HXLINE( 534)										g214 = (( (Float)(this216) ) / ( (Float)(255) ));
            									}
HXDLIN( 534)									Float b217;
HXDLIN( 534)									int this217 = (rhs6 & 255);
HXDLIN( 534)									if ((this217 == 0)) {
HXLINE( 534)										b217 = ((Float)0.);
            									}
            									else {
HXLINE( 534)										b217 = (( (Float)(this217) ) / ( (Float)(255) ));
            									}
HXDLIN( 534)									Float a314 = (a117 * (( (Float)(1) ) - a216));
HXDLIN( 534)									int r37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r115 * a314) + (r214 * a216))));
HXDLIN( 534)									int g37 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g115 * a314) + (g214 * a216))));
HXDLIN( 534)									int b53 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b118 * a314) + (b217 * a216))));
HXDLIN( 534)									int a51 = ::Std_obj::_hx_int((( (Float)(255) ) * (a314 + a216)));
HXDLIN( 534)									int blended13 = ((((a51 << 24) | (r37 << 16)) | (g37 << 8)) | b53);
HXDLIN( 534)									{
HXLINE( 534)										int _hx_tmp7;
HXDLIN( 534)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 534)											_hx_tmp7 = ((((((blended13 >> 24) & 255) << 24) | ((blended13 & 255) << 16)) | (((blended13 >> 8) & 255) << 8)) | ((blended13 >> 16) & 255));
            										}
            										else {
HXLINE( 534)											_hx_tmp7 = blended13;
            										}
HXDLIN( 534)										::iterMagic::Iimg_obj::set(pixelImage->image,location13,_hx_tmp7);
            									}
            								}
            								else {
HXLINE( 534)									int value6;
HXDLIN( 534)									if (pixelImage->isLittle) {
HXLINE( 534)										value6 = ((((a50 << 24) | (b52 << 16)) | (g36 << 8)) | r36);
            									}
            									else {
HXLINE( 534)										value6 = ((((a50 << 24) | (r36 << 16)) | (g36 << 8)) | b52);
            									}
HXDLIN( 534)									::iterMagic::Iimg_obj::set(pixelImage->image,location13,value6);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 534)		 ::pi_xy::algo::HitTri hitTri;
HXDLIN( 534)		if ((hasHit == false)) {
HXLINE( 534)			 ::pi_xy::algo::HitTri v20 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx3,by3,cx3,cy3,true);
HXDLIN( 534)			if (hasUndo6) {
HXLINE( 534)				v20->undoImage = undoImage18;
HXDLIN( 534)				v20->undoX = xIter36->start;
HXDLIN( 534)				v20->undoY = yIter36->start;
            			}
HXDLIN( 534)			hitTri = v20;
            		}
            		else {
HXLINE( 534)			hitTri = null();
            		}
HXLINE( 535)		if (hasHit) {
HXLINE( 536)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(1)->init(0,hitTri));
HXLINE( 537)			if (::hx::IsNotNull( hitQuad )) {
HXLINE( 538)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXLINE( 539)			hitArr->triArr->push(hitQuad->triBCD);
HXLINE( 540)			return hitArr;
            		}
            		else {
HXLINE( 542)			return null();
            		}
HXLINE( 535)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC13(ArrowPixel_Fields__obj,gradThickLineFixedArrow,return )

 ::pi_xy::algo::HitTriArray ArrowPixel_Fields__obj::fillLineFixedArrowBoth( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float arrowWidth,Float arrowHeight,Float thick,int color,::hx::Null< bool >  __o_hasHit){
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_63f36ef650858c14_550_fillLineFixedArrowBoth)
HXLINE( 551)		Float goldenRatio = ((Float)1.61803398875);
HXLINE( 552)		Float o = (qy - py);
HXLINE( 553)		Float a = (qx - px);
HXLINE( 554)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE( 555)		Float theta = ::Math_obj::atan2(o,a);
HXLINE( 556)		Float thicker;
HXDLIN( 556)		if ((arrowWidth > (thick * ((Float)1.1)))) {
HXLINE( 556)			thicker = arrowWidth;
            		}
            		else {
HXLINE( 556)			thicker = ((( (Float)(2) ) * thick) * goldenRatio);
            		}
HXLINE( 562)		Float sin = ::Math_obj::sin(theta);
HXLINE( 563)		Float cos = ::Math_obj::cos(theta);
HXLINE( 564)		Float radius = (thick / ( (Float)(2) ));
HXLINE( 565)		Float radius2 = (thicker / ( (Float)(2) ));
HXLINE( 566)		Float h2;
HXDLIN( 566)		if ((arrowHeight < (h * ((Float)1.1)))) {
HXLINE( 566)			h2 = (h - arrowHeight);
            		}
            		else {
HXLINE( 566)			h2 = (h / goldenRatio);
            		}
HXLINE( 571)		Float hSmall = (h - h2);
HXLINE( 573)		Float px_ = hSmall;
HXLINE( 574)		Float py_ = ((Float)0.);
HXLINE( 575)		Float temp = ((Float)0.);
HXLINE( 577)		temp = (px + ((px_ * cos) - (py_ * sin)));
HXLINE( 578)		py_ = (py + ((py_ * cos) + (px_ * sin)));
HXLINE( 579)		px_ = temp;
HXLINE( 581)		Float h1 = (h2 - hSmall);
HXDLIN( 581)		Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 581)		Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 581)		Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 581)		Float dx = ((Float)0.1);
HXDLIN( 581)		Float dy = radius1;
HXDLIN( 581)		Float cx = h1;
HXDLIN( 581)		Float cy = radius1;
HXDLIN( 581)		Float bx = h1;
HXDLIN( 581)		Float by = -(radius1);
HXDLIN( 581)		Float ax = ((Float)0.1);
HXDLIN( 581)		Float ay = -(radius1);
HXDLIN( 581)		Float temp1 = ((Float)0.);
HXLINE(  28)		temp1 = (px_ + ((ax * cos1) - (ay * sin1)));
HXLINE(  29)		ay = (py_ + ((ay * cos1) + (ax * sin1)));
HXLINE(  30)		ax = temp1;
HXLINE(  32)		temp1 = (px_ + ((bx * cos1) - (by * sin1)));
HXLINE(  33)		by = (py_ + ((by * cos1) + (bx * sin1)));
HXLINE(  34)		bx = temp1;
HXLINE(  36)		temp1 = (px_ + ((cx * cos1) - (cy * sin1)));
HXLINE(  37)		cy = (py_ + ((cy * cos1) + (cx * sin1)));
HXLINE(  38)		cx = temp1;
HXLINE(  40)		temp1 = (px_ + ((dx * cos1) - (dy * sin1)));
HXLINE(  41)		dy = (py_ + ((dy * cos1) + (dx * sin1)));
HXLINE(  42)		dx = temp1;
HXLINE( 581)		Float bx1 = bx;
HXDLIN( 581)		Float by1 = by;
HXDLIN( 581)		Float cx1 = dx;
HXDLIN( 581)		Float cy1 = dy;
HXDLIN( 581)		bool hasUndo = false;
HXDLIN( 581)		bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 581)		if (!(adjustWinding)) {
HXLINE( 581)			Float bx_ = bx1;
HXDLIN( 581)			Float by_ = by1;
HXLINE(  25)			bx1 = cx1;
HXLINE(  26)			by1 = cy1;
HXLINE(  27)			cx1 = bx_;
HXLINE(  28)			cy1 = by_;
            		}
HXLINE( 581)		Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 581)		Float sx = (cy1 - ay);
HXDLIN( 581)		Float sy = (ax - cx1);
HXDLIN( 581)		Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 581)		Float tx = (ay - by1);
HXDLIN( 581)		Float ty = (bx1 - ax);
HXDLIN( 581)		Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 581)		 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 581)		if ((ax > bx1)) {
HXLINE( 581)			if ((ax > cx1)) {
HXLINE( 581)				int min;
HXDLIN( 581)				if ((bx1 > cx1)) {
HXLINE( 581)					min = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 581)					min = ::Math_obj::floor(bx1);
            				}
HXDLIN( 581)				int ii_min = min;
HXDLIN( 581)				int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 581)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            			}
            			else {
HXLINE( 581)				int ii_min1 = ::Math_obj::floor(bx1);
HXDLIN( 581)				int ii_max1 = ::Math_obj::ceil(cx1);
HXDLIN( 581)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            			}
            		}
            		else {
HXLINE( 581)			if ((bx1 > cx1)) {
HXLINE( 581)				int min1;
HXDLIN( 581)				if ((ax > cx1)) {
HXLINE( 581)					min1 = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 581)					min1 = ::Math_obj::ceil(ax);
            				}
HXDLIN( 581)				int ii_min2 = min1;
HXDLIN( 581)				int ii_max2 = ::Math_obj::ceil(bx1);
HXDLIN( 581)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            			}
            			else {
HXLINE( 581)				int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 581)				int ii_max3 = ::Math_obj::ceil(cx1);
HXDLIN( 581)				xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            			}
            		}
HXDLIN( 581)		 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 581)		if ((ay > by1)) {
HXLINE( 581)			if ((ay > cy1)) {
HXLINE( 581)				int min2;
HXDLIN( 581)				if ((by1 > cy1)) {
HXLINE( 581)					min2 = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 581)					min2 = ::Math_obj::floor(by1);
            				}
HXDLIN( 581)				int ii_min4 = min2;
HXDLIN( 581)				int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 581)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            			}
            			else {
HXLINE( 581)				int ii_min5 = ::Math_obj::floor(by1);
HXDLIN( 581)				int ii_max5 = ::Math_obj::ceil(cy1);
HXDLIN( 581)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            			}
            		}
            		else {
HXLINE( 581)			if ((by1 > cy1)) {
HXLINE( 581)				int min3;
HXDLIN( 581)				if ((ay > cy1)) {
HXLINE( 581)					min3 = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 581)					min3 = ::Math_obj::ceil(ay);
            				}
HXDLIN( 581)				int ii_min6 = min3;
HXDLIN( 581)				int ii_max6 = ::Math_obj::ceil(by1);
HXDLIN( 581)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            			}
            			else {
HXLINE( 581)				int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 581)				int ii_max7 = ::Math_obj::ceil(cy1);
HXDLIN( 581)				yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            			}
            		}
HXDLIN( 581)		 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 581)		if (hasUndo) {
HXLINE( 581)			int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 581)			int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 581)			 ::Dynamic imageType = null();
HXDLIN( 581)			 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 581)			if (::hx::IsNull( imageType )) {
HXLINE(  54)				imageType = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 581)			::Dynamic undoImage1;
HXDLIN( 581)			switch((int)(( (int)(imageType) ))){
            				case (int)0: {
HXLINE( 581)					 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 581)					 ::iterMagic::BytesImg b = byt;
HXDLIN( 581)					{
HXLINE( 581)						b->width = width;
HXDLIN( 581)						b->height = height;
HXDLIN( 581)						b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 581)						b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 581)						{
HXLINE( 581)							int len = b->length;
HXDLIN( 581)							int w = 0;
HXDLIN( 581)							{
HXLINE( 581)								int _g = 0;
HXDLIN( 581)								int _g1 = b->height;
HXDLIN( 581)								while((_g < _g1)){
HXLINE( 581)									_g = (_g + 1);
HXDLIN( 581)									int y = (_g - 1);
HXDLIN( 581)									{
HXLINE( 581)										int _g2 = 0;
HXDLIN( 581)										int _g3 = b->width;
HXDLIN( 581)										while((_g2 < _g3)){
HXLINE( 581)											_g2 = (_g2 + 1);
HXDLIN( 581)											int x = (_g2 - 1);
HXDLIN( 581)											{
HXLINE( 581)												w = (w + 1);
HXDLIN( 581)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 581)											{
HXLINE( 581)												w = (w + 1);
HXDLIN( 581)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 581)											{
HXLINE( 581)												w = (w + 1);
HXDLIN( 581)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 581)											{
HXLINE( 581)												w = (w + 1);
HXDLIN( 581)												b->data->b[(w - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 581)					undoImage1 = b;
            				}
            				break;
            				case (int)1: {
HXLINE( 581)					 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 581)					 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 581)					{
HXLINE( 581)						a1->width = width;
HXDLIN( 581)						a1->height = height;
HXDLIN( 581)						a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 581)						a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 581)						{
HXLINE( 581)							int _g4 = 0;
HXDLIN( 581)							int _g5 = a1->length;
HXDLIN( 581)							while((_g4 < _g5)){
HXLINE( 581)								_g4 = (_g4 + 1);
HXDLIN( 581)								int i = (_g4 - 1);
HXDLIN( 581)								a1->data[i] = 0;
            							}
            						}
            					}
HXDLIN( 581)					undoImage1 = a1;
            				}
            				break;
            				case (int)2: {
HXLINE( 581)					 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 581)					 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 581)					{
HXLINE( 581)						b1->width = width;
HXDLIN( 581)						b1->height = height;
HXDLIN( 581)						b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 581)						int size = (b1->length * 4);
HXDLIN( 581)						b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 581)						{
HXLINE( 581)							int _g6 = 0;
HXDLIN( 581)							int _g7 = b1->length;
HXDLIN( 581)							while((_g6 < _g7)){
HXLINE( 581)								_g6 = (_g6 + 1);
HXDLIN( 581)								int i1 = (_g6 - 1);
HXDLIN( 581)								{
HXLINE( 581)									 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN( 581)									bool undoImage2;
HXDLIN( 581)									if ((i1 >= 0)) {
HXLINE( 581)										undoImage2 = (i1 < (this2->byteLength >> 2));
            									}
            									else {
HXLINE( 581)										undoImage2 = false;
            									}
HXDLIN( 581)									if (undoImage2) {
HXLINE( 581)										 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 581)										int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 581)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 581)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 581)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 581)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 581)					undoImage1 = b1;
            				}
            				break;
            				case (int)3: {
HXLINE( 581)					 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 581)					 ::iterMagic::VecIntImg v = vec;
HXDLIN( 581)					{
HXLINE( 581)						v->width = width;
HXDLIN( 581)						v->height = height;
HXDLIN( 581)						v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 581)						v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 581)						{
HXLINE( 581)							int _g8 = 0;
HXDLIN( 581)							int _g9 = v->length;
HXDLIN( 581)							while((_g8 < _g9)){
HXLINE( 581)								_g8 = (_g8 + 1);
HXDLIN( 581)								int i2 = (_g8 - 1);
HXDLIN( 581)								v->data->__unsafe_set(i2,0);
            							}
            						}
            					}
HXDLIN( 581)					undoImage1 = v;
            				}
            				break;
            				case (int)4: {
HXLINE( 581)					 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 581)					 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 581)					{
HXLINE( 581)						b2->width = width;
HXDLIN( 581)						b2->height = height;
HXDLIN( 581)						b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 581)						b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 581)						{
HXLINE( 581)							int len1 = b2->length;
HXDLIN( 581)							 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 581)							if (::hx::IsNull( d->head )) {
HXLINE( 581)								int _g10 = 0;
HXDLIN( 581)								int _g11 = len1;
HXDLIN( 581)								while((_g10 < _g11)){
HXLINE( 581)									_g10 = (_g10 + 1);
HXDLIN( 581)									int i3 = (_g10 - 1);
HXDLIN( 581)									d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            								}
            							}
            							else {
HXLINE( 581)								int _g12 = 0;
HXDLIN( 581)								int _g13 = len1;
HXDLIN( 581)								while((_g12 < _g13)){
HXLINE( 581)									_g12 = (_g12 + 1);
HXDLIN( 581)									int i4 = (_g12 - 1);
HXDLIN( 581)									{
HXLINE( 581)										 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 581)										 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 581)										{
HXLINE( 581)											int _g14 = 0;
HXDLIN( 581)											int _g15 = i4;
HXDLIN( 581)											while((_g14 < _g15)){
HXLINE( 581)												_g14 = (_g14 + 1);
HXDLIN( 581)												int i5 = (_g14 - 1);
HXLINE( 345)												prev = l;
HXLINE( 346)												l = l->next;
            											}
            										}
HXLINE( 581)										if (::hx::IsNull( prev )) {
HXLINE( 581)											b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 581)											l = null();
            										}
            										else {
HXLINE( 581)											prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 581)											l = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 581)					undoImage1 = b2;
            				}
            				break;
            			}
HXDLIN( 581)			this1->image = undoImage1;
HXDLIN( 581)			this1->width = width;
HXDLIN( 581)			this1->height = height;
HXDLIN( 581)			this1->imageType = ( (int)(imageType) );
HXDLIN( 581)			undoImage = this1;
HXDLIN( 581)			{
HXLINE( 581)				int rectLeft = xIter3->start;
HXDLIN( 581)				int rectTop = yIter3->start;
HXDLIN( 581)				int rectRight = xIter3->max;
HXDLIN( 581)				bool forceClear = false;
HXDLIN( 581)				{
HXLINE( 581)					int _g16 = rectTop;
HXDLIN( 581)					int _g17 = yIter3->max;
HXDLIN( 581)					while((_g16 < _g17)){
HXLINE( 581)						_g16 = (_g16 + 1);
HXDLIN( 581)						int dy1 = (_g16 - 1);
HXDLIN( 581)						{
HXLINE( 581)							int _g18 = rectLeft;
HXDLIN( 581)							int _g19 = rectRight;
HXDLIN( 581)							while((_g18 < _g19)){
HXLINE( 581)								_g18 = (_g18 + 1);
HXDLIN( 581)								int dx1 = (_g18 - 1);
HXDLIN( 581)								::Dynamic this3 = pixelImage->image;
HXDLIN( 581)								int index;
HXDLIN( 581)								if (pixelImage->useVirtualPos) {
HXLINE( 581)									index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 581)									index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            								}
HXDLIN( 581)								int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN( 581)								int col;
HXDLIN( 581)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)									col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 581)									col = c;
            								}
HXDLIN( 581)								bool _hx_tmp;
HXDLIN( 581)								if (pixelImage->useMask) {
HXLINE( 581)									_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 581)									_hx_tmp = false;
            								}
HXDLIN( 581)								if (_hx_tmp) {
HXLINE( 581)									 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN( 581)									::Dynamic this5 = this4->image;
HXDLIN( 581)									int index1;
HXDLIN( 581)									if (this4->useVirtualPos) {
HXLINE( 581)										index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            									}
            									else {
HXLINE( 581)										index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            									}
HXDLIN( 581)									int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN( 581)									int v1;
HXDLIN( 581)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)										v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            									}
            									else {
HXLINE( 581)										v1 = c1;
            									}
HXDLIN( 581)									int maskPixel = v1;
HXDLIN( 581)									int this6 = col;
HXDLIN( 581)									if ((maskPixel == 0)) {
HXLINE( 581)										col = this6;
            									}
            									else {
HXLINE( 581)										Float m0;
HXDLIN( 581)										int this7 = ((maskPixel >> 24) & 255);
HXDLIN( 581)										if ((this7 == 0)) {
HXLINE( 581)											m0 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float m1;
HXDLIN( 581)										int this8 = ((maskPixel >> 16) & 255);
HXDLIN( 581)										if ((this8 == 0)) {
HXLINE( 581)											m1 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float m2;
HXDLIN( 581)										int this9 = ((maskPixel >> 8) & 255);
HXDLIN( 581)										if ((this9 == 0)) {
HXLINE( 581)											m2 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float m3;
HXDLIN( 581)										int this10 = (maskPixel & 255);
HXDLIN( 581)										if ((this10 == 0)) {
HXLINE( 581)											m3 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 581)										int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 581)										int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 581)										int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 581)										col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 581)								if ((col != 0)) {
HXLINE( 581)									int x1 = (dx1 - rectLeft);
HXDLIN( 581)									int y1 = (dy1 - rectTop);
HXDLIN( 581)									int c2 = col;
HXDLIN( 581)									bool _hx_tmp1;
HXDLIN( 581)									if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 581)										_hx_tmp1 = undoImage->transparent;
            									}
            									else {
HXLINE( 581)										_hx_tmp1 = false;
            									}
HXDLIN( 581)									if (_hx_tmp1) {
HXLINE( 581)										int location;
HXDLIN( 581)										if (undoImage->useVirtualPos) {
HXLINE( 581)											location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            										}
            										else {
HXLINE( 581)											location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            										}
HXDLIN( 581)										int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 581)										int this12;
HXDLIN( 581)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)											this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            										}
            										else {
HXLINE( 581)											this12 = this11;
            										}
HXDLIN( 581)										Float a11;
HXDLIN( 581)										int this13 = ((this12 >> 24) & 255);
HXDLIN( 581)										if ((this13 == 0)) {
HXLINE( 581)											a11 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float r1;
HXDLIN( 581)										int this14 = ((this12 >> 16) & 255);
HXDLIN( 581)										if ((this14 == 0)) {
HXLINE( 581)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float g1;
HXDLIN( 581)										int this15 = ((this12 >> 8) & 255);
HXDLIN( 581)										if ((this15 == 0)) {
HXLINE( 581)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float b11;
HXDLIN( 581)										int this16 = (this12 & 255);
HXDLIN( 581)										if ((this16 == 0)) {
HXLINE( 581)											b11 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float a2;
HXDLIN( 581)										int this17 = ((col >> 24) & 255);
HXDLIN( 581)										if ((this17 == 0)) {
HXLINE( 581)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float r2;
HXDLIN( 581)										int this18 = ((col >> 16) & 255);
HXDLIN( 581)										if ((this18 == 0)) {
HXLINE( 581)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float g2;
HXDLIN( 581)										int this19 = ((col >> 8) & 255);
HXDLIN( 581)										if ((this19 == 0)) {
HXLINE( 581)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float b21;
HXDLIN( 581)										int this20 = (col & 255);
HXDLIN( 581)										if ((this20 == 0)) {
HXLINE( 581)											b21 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 581)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 581)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 581)										int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 581)										int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 581)										int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 581)										{
HXLINE( 581)											int _hx_tmp2;
HXDLIN( 581)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)												_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 581)												_hx_tmp2 = blended;
            											}
HXDLIN( 581)											::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            										}
            									}
            									else {
HXLINE( 581)										::Dynamic this21 = undoImage->image;
HXDLIN( 581)										int index2;
HXDLIN( 581)										if (undoImage->useVirtualPos) {
HXLINE( 581)											index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            										}
            										else {
HXLINE( 581)											index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            										}
HXDLIN( 581)										int _hx_tmp3;
HXDLIN( 581)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)											_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            										}
            										else {
HXLINE( 581)											_hx_tmp3 = c2;
            										}
HXDLIN( 581)										::iterMagic::Iimg_obj::set(this21,index2,_hx_tmp3);
            									}
            								}
            								else {
HXLINE( 581)									if (forceClear) {
HXLINE( 581)										::Dynamic this22 = undoImage->image;
HXDLIN( 581)										int x2 = (dx1 - rectLeft);
HXDLIN( 581)										int y2 = (dy1 - rectTop);
HXDLIN( 581)										int index3;
HXDLIN( 581)										if (undoImage->useVirtualPos) {
HXLINE( 581)											index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            										}
            										else {
HXLINE( 581)											index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            										}
HXDLIN( 581)										::iterMagic::Iimg_obj::set(this22,index3,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 581)		bool found = false;
HXDLIN( 581)		Float s = ((Float)0.);
HXDLIN( 581)		Float t = ((Float)0.);
HXDLIN( 581)		Float sxx = ((Float)0.);
HXDLIN( 581)		Float txx = ((Float)0.);
HXDLIN( 581)		{
HXLINE( 581)			int _g_min = xIter3->start;
HXDLIN( 581)			int _g_max = xIter3->max;
HXDLIN( 581)			while((_g_min < _g_max)){
HXLINE( 581)				_g_min = (_g_min + 1);
HXDLIN( 581)				int x3 = (_g_min - 1);
HXLINE(  60)				sxx = (sx * ( (Float)(x3) ));
HXLINE(  61)				txx = (tx * ( (Float)(x3) ));
HXLINE(  62)				found = false;
HXLINE( 581)				{
HXLINE( 581)					int _g_min1 = yIter3->start;
HXDLIN( 581)					int _g_max1 = yIter3->max;
HXDLIN( 581)					while((_g_min1 < _g_max1)){
HXLINE( 581)						_g_min1 = (_g_min1 + 1);
HXDLIN( 581)						int y3 = (_g_min1 - 1);
HXLINE(  64)						s = ((s0 + sxx) + (sy * ( (Float)(y3) )));
HXLINE(  65)						t = ((t0 + txx) + (ty * ( (Float)(y3) )));
HXLINE( 581)						bool _hx_tmp4;
HXDLIN( 581)						if (!((s <= 0))) {
HXLINE( 581)							_hx_tmp4 = (t <= 0);
            						}
            						else {
HXLINE( 581)							_hx_tmp4 = true;
            						}
HXDLIN( 581)						if (_hx_tmp4) {
HXLINE( 581)							if (found) {
HXLINE( 581)								goto _hx_goto_764;
            							}
            						}
            						else {
HXLINE( 581)							if (((s + t) < A)) {
HXLINE( 581)								{
HXLINE( 581)									int c3 = color;
HXDLIN( 581)									bool _hx_tmp5;
HXDLIN( 581)									if ((((c3 >> 24) & 255) < 254)) {
HXLINE( 581)										_hx_tmp5 = pixelImage->transparent;
            									}
            									else {
HXLINE( 581)										_hx_tmp5 = false;
            									}
HXDLIN( 581)									if (_hx_tmp5) {
HXLINE( 581)										int location1;
HXDLIN( 581)										if (pixelImage->useVirtualPos) {
HXLINE( 581)											location1 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x3) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 581)											location1 = ::Std_obj::_hx_int(( (Float)(((y3 * pixelImage->width) + x3)) ));
            										}
HXDLIN( 581)										int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN( 581)										int this24;
HXDLIN( 581)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)											this24 = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            										}
            										else {
HXLINE( 581)											this24 = this23;
            										}
HXDLIN( 581)										Float a12;
HXDLIN( 581)										int this25 = ((this24 >> 24) & 255);
HXDLIN( 581)										if ((this25 == 0)) {
HXLINE( 581)											a12 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											a12 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float r11;
HXDLIN( 581)										int this26 = ((this24 >> 16) & 255);
HXDLIN( 581)										if ((this26 == 0)) {
HXLINE( 581)											r11 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											r11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float g11;
HXDLIN( 581)										int this27 = ((this24 >> 8) & 255);
HXDLIN( 581)										if ((this27 == 0)) {
HXLINE( 581)											g11 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											g11 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float b12;
HXDLIN( 581)										int this28 = (this24 & 255);
HXDLIN( 581)										if ((this28 == 0)) {
HXLINE( 581)											b12 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											b12 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float a21;
HXDLIN( 581)										int this29 = ((color >> 24) & 255);
HXDLIN( 581)										if ((this29 == 0)) {
HXLINE( 581)											a21 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											a21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float r21;
HXDLIN( 581)										int this30 = ((color >> 16) & 255);
HXDLIN( 581)										if ((this30 == 0)) {
HXLINE( 581)											r21 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											r21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float g21;
HXDLIN( 581)										int this31 = ((color >> 8) & 255);
HXDLIN( 581)										if ((this31 == 0)) {
HXLINE( 581)											g21 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											g21 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float b22;
HXDLIN( 581)										int this32 = (color & 255);
HXDLIN( 581)										if ((this32 == 0)) {
HXLINE( 581)											b22 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											b22 = (( (Float)(this32) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 581)										int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 581)										int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 581)										int b4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 581)										int a5 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 581)										int blended1 = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 581)										{
HXLINE( 581)											int _hx_tmp6;
HXDLIN( 581)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)												_hx_tmp6 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXLINE( 581)												_hx_tmp6 = blended1;
            											}
HXDLIN( 581)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp6);
            										}
            									}
            									else {
HXLINE( 581)										::Dynamic this33 = pixelImage->image;
HXDLIN( 581)										int index4;
HXDLIN( 581)										if (pixelImage->useVirtualPos) {
HXLINE( 581)											index4 = ::Std_obj::_hx_int(((((( (Float)(y3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x3) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 581)											index4 = ::Std_obj::_hx_int(( (Float)(((y3 * pixelImage->width) + x3)) ));
            										}
HXDLIN( 581)										int _hx_tmp7;
HXDLIN( 581)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)											_hx_tmp7 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            										}
            										else {
HXLINE( 581)											_hx_tmp7 = c3;
            										}
HXDLIN( 581)										::iterMagic::Iimg_obj::set(this33,index4,_hx_tmp7);
            									}
            								}
HXLINE(  73)								found = true;
            							}
            							else {
HXLINE( 581)								if (found) {
HXLINE( 581)									goto _hx_goto_764;
            								}
            							}
            						}
            					}
            					_hx_goto_764:;
            				}
            			}
            		}
HXDLIN( 581)		 ::pi_xy::iter::IntIterStart v_yIter3;
HXDLIN( 581)		 ::pi_xy::iter::IntIterStart v_xIter3;
HXDLIN( 581)		int v_undoY;
HXDLIN( 581)		int v_undoX;
HXDLIN( 581)		Float v_ty;
HXDLIN( 581)		Float v_tx;
HXDLIN( 581)		Float v_t0;
HXDLIN( 581)		Float v_sy;
HXDLIN( 581)		Float v_sx;
HXDLIN( 581)		Float v_s0;
HXDLIN( 581)		Float v_A;
HXDLIN( 581)		Float ax1 = ax;
HXDLIN( 581)		Float ay1 = ay;
HXDLIN( 581)		 ::pi_xy::ImageStruct v_undoImage = null();
HXDLIN( 581)		Float bx2 = bx1;
HXDLIN( 581)		Float by2 = by1;
HXDLIN( 581)		Float cx2 = cx1;
HXDLIN( 581)		Float cy2 = cy1;
HXDLIN( 581)		bool adjustWinding1 = (((((ax1 * by2) - (bx2 * ay1)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay1) - (ax1 * cy2))) > 0);
HXDLIN( 581)		if (!(adjustWinding1)) {
HXLINE( 581)			Float bx_1 = bx2;
HXDLIN( 581)			Float by_1 = by2;
HXLINE(  24)			bx2 = cx2;
HXLINE(  25)			by2 = cy2;
HXLINE(  26)			cx2 = bx_1;
HXLINE(  27)			cy2 = by_1;
            		}
HXLINE( 581)		Float v_ax = ax1;
HXDLIN( 581)		Float v_ay = ay1;
HXDLIN( 581)		Float v_bx = bx2;
HXDLIN( 581)		Float v_by = by2;
HXDLIN( 581)		Float v_cx = cx2;
HXDLIN( 581)		Float v_cy = cy2;
HXDLIN( 581)		bool v_preCalculated = true;
HXDLIN( 581)		{
HXLINE( 581)			v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN( 581)			v_sx = (v_cy - v_ay);
HXDLIN( 581)			v_sy = (v_ax - v_cx);
HXDLIN( 581)			v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN( 581)			v_tx = (v_ay - v_by);
HXDLIN( 581)			v_ty = (v_bx - v_ax);
HXDLIN( 581)			v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN( 581)			Float a6 = v_ax;
HXDLIN( 581)			Float b5 = v_bx;
HXDLIN( 581)			Float c4 = v_cx;
HXDLIN( 581)			if ((a6 > b5)) {
HXLINE( 581)				if ((a6 > c4)) {
HXLINE( 581)					int min4;
HXDLIN( 581)					if ((b5 > c4)) {
HXLINE( 581)						min4 = ::Math_obj::floor(c4);
            					}
            					else {
HXLINE( 581)						min4 = ::Math_obj::floor(b5);
            					}
HXDLIN( 581)					int ii_min8 = min4;
HXDLIN( 581)					int ii_max8 = ::Math_obj::ceil(a6);
HXDLIN( 581)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXLINE( 581)					int ii_min9 = ::Math_obj::floor(b5);
HXDLIN( 581)					int ii_max9 = ::Math_obj::ceil(c4);
HXDLIN( 581)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXLINE( 581)				if ((b5 > c4)) {
HXLINE( 581)					int min5;
HXDLIN( 581)					if ((a6 > c4)) {
HXLINE( 581)						min5 = ::Math_obj::floor(c4);
            					}
            					else {
HXLINE( 581)						min5 = ::Math_obj::ceil(a6);
            					}
HXDLIN( 581)					int ii_min10 = min5;
HXDLIN( 581)					int ii_max10 = ::Math_obj::ceil(b5);
HXDLIN( 581)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXLINE( 581)					int ii_min11 = ::Math_obj::floor(a6);
HXDLIN( 581)					int ii_max11 = ::Math_obj::ceil(c4);
HXDLIN( 581)					v_xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN( 581)			Float a7 = v_ay;
HXDLIN( 581)			Float b6 = v_by;
HXDLIN( 581)			Float c5 = v_cy;
HXDLIN( 581)			if ((a7 > b6)) {
HXLINE( 581)				if ((a7 > c5)) {
HXLINE( 581)					int min6;
HXDLIN( 581)					if ((b6 > c5)) {
HXLINE( 581)						min6 = ::Math_obj::floor(c5);
            					}
            					else {
HXLINE( 581)						min6 = ::Math_obj::floor(b6);
            					}
HXDLIN( 581)					int ii_min12 = min6;
HXDLIN( 581)					int ii_max12 = ::Math_obj::ceil(a7);
HXDLIN( 581)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXLINE( 581)					int ii_min13 = ::Math_obj::floor(b6);
HXDLIN( 581)					int ii_max13 = ::Math_obj::ceil(c5);
HXDLIN( 581)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXLINE( 581)				if ((b6 > c5)) {
HXLINE( 581)					int min7;
HXDLIN( 581)					if ((a7 > c5)) {
HXLINE( 581)						min7 = ::Math_obj::floor(c5);
            					}
            					else {
HXLINE( 581)						min7 = ::Math_obj::ceil(a7);
            					}
HXDLIN( 581)					int ii_min14 = min7;
HXDLIN( 581)					int ii_max14 = ::Math_obj::ceil(b6);
HXDLIN( 581)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXLINE( 581)					int ii_min15 = ::Math_obj::floor(a7);
HXDLIN( 581)					int ii_max15 = ::Math_obj::ceil(c5);
HXDLIN( 581)					v_yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
            		}
HXDLIN( 581)		if (hasUndo) {
HXLINE( 581)			v_undoImage = undoImage;
HXDLIN( 581)			v_undoX = xIter3->start;
HXDLIN( 581)			v_undoY = yIter3->start;
            		}
HXDLIN( 581)		Float bx3 = cx;
HXDLIN( 581)		Float by3 = cy;
HXDLIN( 581)		Float cx3 = dx;
HXDLIN( 581)		Float cy3 = dy;
HXDLIN( 581)		bool hasUndo1 = false;
HXDLIN( 581)		bool adjustWinding2 = (((((bx * by3) - (bx3 * by)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * by) - (bx * cy3))) > 0);
HXDLIN( 581)		if (!(adjustWinding2)) {
HXLINE( 581)			Float bx_2 = bx3;
HXDLIN( 581)			Float by_2 = by3;
HXLINE(  25)			bx3 = cx3;
HXLINE(  26)			by3 = cy3;
HXLINE(  27)			cx3 = bx_2;
HXLINE(  28)			cy3 = by_2;
            		}
HXLINE( 581)		Float s01 = ((by * cx3) - (bx * cy3));
HXDLIN( 581)		Float sx1 = (cy3 - by);
HXDLIN( 581)		Float sy1 = (bx - cx3);
HXDLIN( 581)		Float t01 = ((bx * by3) - (by * bx3));
HXDLIN( 581)		Float tx1 = (by - by3);
HXDLIN( 581)		Float ty1 = (bx3 - bx);
HXDLIN( 581)		Float A1 = ((((-(by3) * cx3) + (by * (-(bx3) + cx3))) + (bx * (by3 - cy3))) + (bx3 * cy3));
HXDLIN( 581)		 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 581)		if ((bx > bx3)) {
HXLINE( 581)			if ((bx > cx3)) {
HXLINE( 581)				int min8;
HXDLIN( 581)				if ((bx3 > cx3)) {
HXLINE( 581)					min8 = ::Math_obj::floor(cx3);
            				}
            				else {
HXLINE( 581)					min8 = ::Math_obj::floor(bx3);
            				}
HXDLIN( 581)				int ii_min16 = min8;
HXDLIN( 581)				int ii_max16 = ::Math_obj::ceil(bx);
HXDLIN( 581)				xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            			}
            			else {
HXLINE( 581)				int ii_min17 = ::Math_obj::floor(bx3);
HXDLIN( 581)				int ii_max17 = ::Math_obj::ceil(cx3);
HXDLIN( 581)				xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            			}
            		}
            		else {
HXLINE( 581)			if ((bx3 > cx3)) {
HXLINE( 581)				int min9;
HXDLIN( 581)				if ((bx > cx3)) {
HXLINE( 581)					min9 = ::Math_obj::floor(cx3);
            				}
            				else {
HXLINE( 581)					min9 = ::Math_obj::ceil(bx);
            				}
HXDLIN( 581)				int ii_min18 = min9;
HXDLIN( 581)				int ii_max18 = ::Math_obj::ceil(bx3);
HXDLIN( 581)				xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            			}
            			else {
HXLINE( 581)				int ii_min19 = ::Math_obj::floor(bx);
HXDLIN( 581)				int ii_max19 = ::Math_obj::ceil(cx3);
HXDLIN( 581)				xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            			}
            		}
HXDLIN( 581)		 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 581)		if ((by > by3)) {
HXLINE( 581)			if ((by > cy3)) {
HXLINE( 581)				int min10;
HXDLIN( 581)				if ((by3 > cy3)) {
HXLINE( 581)					min10 = ::Math_obj::floor(cy3);
            				}
            				else {
HXLINE( 581)					min10 = ::Math_obj::floor(by3);
            				}
HXDLIN( 581)				int ii_min20 = min10;
HXDLIN( 581)				int ii_max20 = ::Math_obj::ceil(by);
HXDLIN( 581)				yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            			}
            			else {
HXLINE( 581)				int ii_min21 = ::Math_obj::floor(by3);
HXDLIN( 581)				int ii_max21 = ::Math_obj::ceil(cy3);
HXDLIN( 581)				yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            			}
            		}
            		else {
HXLINE( 581)			if ((by3 > cy3)) {
HXLINE( 581)				int min11;
HXDLIN( 581)				if ((by > cy3)) {
HXLINE( 581)					min11 = ::Math_obj::floor(cy3);
            				}
            				else {
HXLINE( 581)					min11 = ::Math_obj::ceil(by);
            				}
HXDLIN( 581)				int ii_min22 = min11;
HXDLIN( 581)				int ii_max22 = ::Math_obj::ceil(by3);
HXDLIN( 581)				yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            			}
            			else {
HXLINE( 581)				int ii_min23 = ::Math_obj::floor(by);
HXDLIN( 581)				int ii_max23 = ::Math_obj::ceil(cy3);
HXDLIN( 581)				yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            			}
            		}
HXDLIN( 581)		 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 581)		if (hasUndo1) {
HXLINE( 581)			int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 581)			int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 581)			 ::Dynamic imageType1 = null();
HXDLIN( 581)			 ::pi_xy::ImageStruct this34 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 581)			if (::hx::IsNull( imageType1 )) {
HXLINE(  54)				imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 581)			::Dynamic undoImage4;
HXDLIN( 581)			switch((int)(( (int)(imageType1) ))){
            				case (int)0: {
HXLINE( 581)					 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 581)					 ::iterMagic::BytesImg b7 = byt1;
HXDLIN( 581)					{
HXLINE( 581)						b7->width = width1;
HXDLIN( 581)						b7->height = height1;
HXDLIN( 581)						b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 581)						b7->data = ::haxe::io::Bytes_obj::alloc((b7->length * 4));
HXDLIN( 581)						{
HXLINE( 581)							int len2 = b7->length;
HXDLIN( 581)							int w1 = 0;
HXDLIN( 581)							{
HXLINE( 581)								int _g20 = 0;
HXDLIN( 581)								int _g21 = b7->height;
HXDLIN( 581)								while((_g20 < _g21)){
HXLINE( 581)									_g20 = (_g20 + 1);
HXDLIN( 581)									int y4 = (_g20 - 1);
HXDLIN( 581)									{
HXLINE( 581)										int _g22 = 0;
HXDLIN( 581)										int _g23 = b7->width;
HXDLIN( 581)										while((_g22 < _g23)){
HXLINE( 581)											_g22 = (_g22 + 1);
HXDLIN( 581)											int x4 = (_g22 - 1);
HXDLIN( 581)											{
HXLINE( 581)												w1 = (w1 + 1);
HXDLIN( 581)												b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 581)											{
HXLINE( 581)												w1 = (w1 + 1);
HXDLIN( 581)												b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 581)											{
HXLINE( 581)												w1 = (w1 + 1);
HXDLIN( 581)												b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 581)											{
HXLINE( 581)												w1 = (w1 + 1);
HXDLIN( 581)												b7->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 581)					undoImage4 = b7;
            				}
            				break;
            				case (int)1: {
HXLINE( 581)					 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 581)					 ::iterMagic::ArrIntImg a8 = arrI1;
HXDLIN( 581)					{
HXLINE( 581)						a8->width = width1;
HXDLIN( 581)						a8->height = height1;
HXDLIN( 581)						a8->data = ::Array_obj< int >::__new(0);
HXDLIN( 581)						a8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 581)						{
HXLINE( 581)							int _g24 = 0;
HXDLIN( 581)							int _g25 = a8->length;
HXDLIN( 581)							while((_g24 < _g25)){
HXLINE( 581)								_g24 = (_g24 + 1);
HXDLIN( 581)								int i6 = (_g24 - 1);
HXDLIN( 581)								a8->data[i6] = 0;
            							}
            						}
            					}
HXDLIN( 581)					undoImage4 = a8;
            				}
            				break;
            				case (int)2: {
HXLINE( 581)					 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 581)					 ::iterMagic::U32ArrImg b8 = u32a1;
HXDLIN( 581)					{
HXLINE( 581)						b8->width = width1;
HXDLIN( 581)						b8->height = height1;
HXDLIN( 581)						b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 581)						int size1 = (b8->length * 4);
HXDLIN( 581)						b8->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 581)						{
HXLINE( 581)							int _g26 = 0;
HXDLIN( 581)							int _g27 = b8->length;
HXDLIN( 581)							while((_g26 < _g27)){
HXLINE( 581)								_g26 = (_g26 + 1);
HXDLIN( 581)								int i7 = (_g26 - 1);
HXDLIN( 581)								{
HXLINE( 581)									 ::haxe::io::ArrayBufferViewImpl this35 = b8->data;
HXDLIN( 581)									bool undoImage5;
HXDLIN( 581)									if ((i7 >= 0)) {
HXLINE( 581)										undoImage5 = (i7 < (this35->byteLength >> 2));
            									}
            									else {
HXLINE( 581)										undoImage5 = false;
            									}
HXDLIN( 581)									if (undoImage5) {
HXLINE( 581)										 ::haxe::io::Bytes _this1 = this35->bytes;
HXDLIN( 581)										int pos1 = ((i7 << 2) + this35->byteOffset);
HXDLIN( 581)										_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 581)										_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 581)										_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 581)										_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 581)					undoImage4 = b8;
            				}
            				break;
            				case (int)3: {
HXLINE( 581)					 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 581)					 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 581)					{
HXLINE( 581)						v2->width = width1;
HXDLIN( 581)						v2->height = height1;
HXDLIN( 581)						v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 581)						v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 581)						{
HXLINE( 581)							int _g28 = 0;
HXDLIN( 581)							int _g29 = v2->length;
HXDLIN( 581)							while((_g28 < _g29)){
HXLINE( 581)								_g28 = (_g28 + 1);
HXDLIN( 581)								int i8 = (_g28 - 1);
HXDLIN( 581)								v2->data->__unsafe_set(i8,0);
            							}
            						}
            					}
HXDLIN( 581)					undoImage4 = v2;
            				}
            				break;
            				case (int)4: {
HXLINE( 581)					 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 581)					 ::iterMagic::StackIntImg b9 = sInt1;
HXDLIN( 581)					{
HXLINE( 581)						b9->width = width1;
HXDLIN( 581)						b9->height = height1;
HXDLIN( 581)						b9->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 581)						b9->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 581)						{
HXLINE( 581)							int len3 = b9->length;
HXDLIN( 581)							 ::haxe::ds::GenericStack_Int d1 = b9->data;
HXDLIN( 581)							if (::hx::IsNull( d1->head )) {
HXLINE( 581)								int _g30 = 0;
HXDLIN( 581)								int _g31 = len3;
HXDLIN( 581)								while((_g30 < _g31)){
HXLINE( 581)									_g30 = (_g30 + 1);
HXDLIN( 581)									int i9 = (_g30 - 1);
HXDLIN( 581)									d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            								}
            							}
            							else {
HXLINE( 581)								int _g32 = 0;
HXDLIN( 581)								int _g33 = len3;
HXDLIN( 581)								while((_g32 < _g33)){
HXLINE( 581)									_g32 = (_g32 + 1);
HXDLIN( 581)									int i10 = (_g32 - 1);
HXDLIN( 581)									{
HXLINE( 581)										 ::haxe::ds::GenericCell_Int l1 = b9->data->head;
HXDLIN( 581)										 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 581)										{
HXLINE( 581)											int _g34 = 0;
HXDLIN( 581)											int _g35 = i10;
HXDLIN( 581)											while((_g34 < _g35)){
HXLINE( 581)												_g34 = (_g34 + 1);
HXDLIN( 581)												int i11 = (_g34 - 1);
HXLINE( 345)												prev1 = l1;
HXLINE( 346)												l1 = l1->next;
            											}
            										}
HXLINE( 581)										if (::hx::IsNull( prev1 )) {
HXLINE( 581)											b9->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 581)											l1 = null();
            										}
            										else {
HXLINE( 581)											prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 581)											l1 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 581)					undoImage4 = b9;
            				}
            				break;
            			}
HXDLIN( 581)			this34->image = undoImage4;
HXDLIN( 581)			this34->width = width1;
HXDLIN( 581)			this34->height = height1;
HXDLIN( 581)			this34->imageType = ( (int)(imageType1) );
HXDLIN( 581)			undoImage3 = this34;
HXDLIN( 581)			{
HXLINE( 581)				int rectLeft1 = xIter31->start;
HXDLIN( 581)				int rectTop1 = yIter31->start;
HXDLIN( 581)				int rectRight1 = xIter31->max;
HXDLIN( 581)				bool forceClear1 = false;
HXDLIN( 581)				{
HXLINE( 581)					int _g36 = rectTop1;
HXDLIN( 581)					int _g37 = yIter31->max;
HXDLIN( 581)					while((_g36 < _g37)){
HXLINE( 581)						_g36 = (_g36 + 1);
HXDLIN( 581)						int dy2 = (_g36 - 1);
HXDLIN( 581)						{
HXLINE( 581)							int _g38 = rectLeft1;
HXDLIN( 581)							int _g39 = rectRight1;
HXDLIN( 581)							while((_g38 < _g39)){
HXLINE( 581)								_g38 = (_g38 + 1);
HXDLIN( 581)								int dx2 = (_g38 - 1);
HXDLIN( 581)								::Dynamic this36 = pixelImage->image;
HXDLIN( 581)								int index5;
HXDLIN( 581)								if (pixelImage->useVirtualPos) {
HXLINE( 581)									index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 581)									index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            								}
HXDLIN( 581)								int c6 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN( 581)								int col1;
HXDLIN( 581)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)									col1 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            								}
            								else {
HXLINE( 581)									col1 = c6;
            								}
HXDLIN( 581)								bool _hx_tmp8;
HXDLIN( 581)								if (pixelImage->useMask) {
HXLINE( 581)									_hx_tmp8 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 581)									_hx_tmp8 = false;
            								}
HXDLIN( 581)								if (_hx_tmp8) {
HXLINE( 581)									 ::pi_xy::ImageStruct this37 = pixelImage->mask;
HXDLIN( 581)									::Dynamic this38 = this37->image;
HXDLIN( 581)									int index6;
HXDLIN( 581)									if (this37->useVirtualPos) {
HXLINE( 581)										index6 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this37->virtualY) * ( (Float)(this37->width) )) + dx2) - this37->virtualX));
            									}
            									else {
HXLINE( 581)										index6 = ::Std_obj::_hx_int(( (Float)(((dy2 * this37->width) + dx2)) ));
            									}
HXDLIN( 581)									int c7 = ::iterMagic::Iimg_obj::get(this38,index6);
HXDLIN( 581)									int v3;
HXDLIN( 581)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)										v3 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            									}
            									else {
HXLINE( 581)										v3 = c7;
            									}
HXDLIN( 581)									int maskPixel1 = v3;
HXDLIN( 581)									int this39 = col1;
HXDLIN( 581)									if ((maskPixel1 == 0)) {
HXLINE( 581)										col1 = this39;
            									}
            									else {
HXLINE( 581)										Float m01;
HXDLIN( 581)										int this40 = ((maskPixel1 >> 24) & 255);
HXDLIN( 581)										if ((this40 == 0)) {
HXLINE( 581)											m01 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											m01 = (( (Float)(this40) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float m11;
HXDLIN( 581)										int this41 = ((maskPixel1 >> 16) & 255);
HXDLIN( 581)										if ((this41 == 0)) {
HXLINE( 581)											m11 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											m11 = (( (Float)(this41) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float m21;
HXDLIN( 581)										int this42 = ((maskPixel1 >> 8) & 255);
HXDLIN( 581)										if ((this42 == 0)) {
HXLINE( 581)											m21 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											m21 = (( (Float)(this42) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float m31;
HXDLIN( 581)										int this43 = (maskPixel1 & 255);
HXDLIN( 581)										if ((this43 == 0)) {
HXLINE( 581)											m31 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											m31 = (( (Float)(this43) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this39 >> 24) & 255)) )));
HXDLIN( 581)										int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this39 >> 16) & 255)) )));
HXDLIN( 581)										int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this39 >> 8) & 255)) )));
HXDLIN( 581)										int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this39 & 255)) )));
HXDLIN( 581)										col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 581)								if ((col1 != 0)) {
HXLINE( 581)									int x5 = (dx2 - rectLeft1);
HXDLIN( 581)									int y5 = (dy2 - rectTop1);
HXDLIN( 581)									int c8 = col1;
HXDLIN( 581)									bool _hx_tmp9;
HXDLIN( 581)									if ((((c8 >> 24) & 255) < 254)) {
HXLINE( 581)										_hx_tmp9 = undoImage3->transparent;
            									}
            									else {
HXLINE( 581)										_hx_tmp9 = false;
            									}
HXDLIN( 581)									if (_hx_tmp9) {
HXLINE( 581)										int location2;
HXDLIN( 581)										if (undoImage3->useVirtualPos) {
HXLINE( 581)											location2 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            										}
            										else {
HXLINE( 581)											location2 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            										}
HXDLIN( 581)										int this44 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 581)										int this45;
HXDLIN( 581)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)											this45 = ((((((this44 >> 24) & 255) << 24) | ((this44 & 255) << 16)) | (((this44 >> 8) & 255) << 8)) | ((this44 >> 16) & 255));
            										}
            										else {
HXLINE( 581)											this45 = this44;
            										}
HXDLIN( 581)										Float a13;
HXDLIN( 581)										int this46 = ((this45 >> 24) & 255);
HXDLIN( 581)										if ((this46 == 0)) {
HXLINE( 581)											a13 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											a13 = (( (Float)(this46) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float r12;
HXDLIN( 581)										int this47 = ((this45 >> 16) & 255);
HXDLIN( 581)										if ((this47 == 0)) {
HXLINE( 581)											r12 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											r12 = (( (Float)(this47) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float g12;
HXDLIN( 581)										int this48 = ((this45 >> 8) & 255);
HXDLIN( 581)										if ((this48 == 0)) {
HXLINE( 581)											g12 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											g12 = (( (Float)(this48) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float b13;
HXDLIN( 581)										int this49 = (this45 & 255);
HXDLIN( 581)										if ((this49 == 0)) {
HXLINE( 581)											b13 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											b13 = (( (Float)(this49) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float a22;
HXDLIN( 581)										int this50 = ((col1 >> 24) & 255);
HXDLIN( 581)										if ((this50 == 0)) {
HXLINE( 581)											a22 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											a22 = (( (Float)(this50) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float r22;
HXDLIN( 581)										int this51 = ((col1 >> 16) & 255);
HXDLIN( 581)										if ((this51 == 0)) {
HXLINE( 581)											r22 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											r22 = (( (Float)(this51) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float g22;
HXDLIN( 581)										int this52 = ((col1 >> 8) & 255);
HXDLIN( 581)										if ((this52 == 0)) {
HXLINE( 581)											g22 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											g22 = (( (Float)(this52) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float b23;
HXDLIN( 581)										int this53 = (col1 & 255);
HXDLIN( 581)										if ((this53 == 0)) {
HXLINE( 581)											b23 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											b23 = (( (Float)(this53) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 581)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 581)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 581)										int b10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 581)										int a9 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 581)										int blended2 = ((((a9 << 24) | (r4 << 16)) | (g4 << 8)) | b10);
HXDLIN( 581)										{
HXLINE( 581)											int _hx_tmp10;
HXDLIN( 581)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)												_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            											}
            											else {
HXLINE( 581)												_hx_tmp10 = blended2;
            											}
HXDLIN( 581)											::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            										}
            									}
            									else {
HXLINE( 581)										::Dynamic this54 = undoImage3->image;
HXDLIN( 581)										int index7;
HXDLIN( 581)										if (undoImage3->useVirtualPos) {
HXLINE( 581)											index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            										}
            										else {
HXLINE( 581)											index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            										}
HXDLIN( 581)										int _hx_tmp11;
HXDLIN( 581)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)											_hx_tmp11 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            										}
            										else {
HXLINE( 581)											_hx_tmp11 = c8;
            										}
HXDLIN( 581)										::iterMagic::Iimg_obj::set(this54,index7,_hx_tmp11);
            									}
            								}
            								else {
HXLINE( 581)									if (forceClear1) {
HXLINE( 581)										::Dynamic this55 = undoImage3->image;
HXDLIN( 581)										int x6 = (dx2 - rectLeft1);
HXDLIN( 581)										int y6 = (dy2 - rectTop1);
HXDLIN( 581)										int index8;
HXDLIN( 581)										if (undoImage3->useVirtualPos) {
HXLINE( 581)											index8 = ::Std_obj::_hx_int(((((( (Float)(y6) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x6) - undoImage3->virtualX));
            										}
            										else {
HXLINE( 581)											index8 = ::Std_obj::_hx_int(( (Float)(((y6 * undoImage3->width) + x6)) ));
            										}
HXDLIN( 581)										::iterMagic::Iimg_obj::set(this55,index8,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 581)		bool found1 = false;
HXDLIN( 581)		Float s1 = ((Float)0.);
HXDLIN( 581)		Float t1 = ((Float)0.);
HXDLIN( 581)		Float sxx1 = ((Float)0.);
HXDLIN( 581)		Float txx1 = ((Float)0.);
HXDLIN( 581)		{
HXLINE( 581)			int _g_min2 = xIter31->start;
HXDLIN( 581)			int _g_max2 = xIter31->max;
HXDLIN( 581)			while((_g_min2 < _g_max2)){
HXLINE( 581)				_g_min2 = (_g_min2 + 1);
HXDLIN( 581)				int x7 = (_g_min2 - 1);
HXLINE(  60)				sxx1 = (sx1 * ( (Float)(x7) ));
HXLINE(  61)				txx1 = (tx1 * ( (Float)(x7) ));
HXLINE(  62)				found1 = false;
HXLINE( 581)				{
HXLINE( 581)					int _g_min3 = yIter31->start;
HXDLIN( 581)					int _g_max3 = yIter31->max;
HXDLIN( 581)					while((_g_min3 < _g_max3)){
HXLINE( 581)						_g_min3 = (_g_min3 + 1);
HXDLIN( 581)						int y7 = (_g_min3 - 1);
HXLINE(  64)						s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y7) )));
HXLINE(  65)						t1 = ((t01 + txx1) + (ty1 * ( (Float)(y7) )));
HXLINE( 581)						bool _hx_tmp12;
HXDLIN( 581)						if (!((s1 <= 0))) {
HXLINE( 581)							_hx_tmp12 = (t1 <= 0);
            						}
            						else {
HXLINE( 581)							_hx_tmp12 = true;
            						}
HXDLIN( 581)						if (_hx_tmp12) {
HXLINE( 581)							if (found1) {
HXLINE( 581)								goto _hx_goto_776;
            							}
            						}
            						else {
HXLINE( 581)							if (((s1 + t1) < A1)) {
HXLINE( 581)								{
HXLINE( 581)									int c9 = color;
HXDLIN( 581)									bool _hx_tmp13;
HXDLIN( 581)									if ((((c9 >> 24) & 255) < 254)) {
HXLINE( 581)										_hx_tmp13 = pixelImage->transparent;
            									}
            									else {
HXLINE( 581)										_hx_tmp13 = false;
            									}
HXDLIN( 581)									if (_hx_tmp13) {
HXLINE( 581)										int location3;
HXDLIN( 581)										if (pixelImage->useVirtualPos) {
HXLINE( 581)											location3 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x7) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 581)											location3 = ::Std_obj::_hx_int(( (Float)(((y7 * pixelImage->width) + x7)) ));
            										}
HXDLIN( 581)										int this56 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN( 581)										int this57;
HXDLIN( 581)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)											this57 = ((((((this56 >> 24) & 255) << 24) | ((this56 & 255) << 16)) | (((this56 >> 8) & 255) << 8)) | ((this56 >> 16) & 255));
            										}
            										else {
HXLINE( 581)											this57 = this56;
            										}
HXDLIN( 581)										Float a14;
HXDLIN( 581)										int this58 = ((this57 >> 24) & 255);
HXDLIN( 581)										if ((this58 == 0)) {
HXLINE( 581)											a14 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											a14 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float r13;
HXDLIN( 581)										int this59 = ((this57 >> 16) & 255);
HXDLIN( 581)										if ((this59 == 0)) {
HXLINE( 581)											r13 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											r13 = (( (Float)(this59) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float g13;
HXDLIN( 581)										int this60 = ((this57 >> 8) & 255);
HXDLIN( 581)										if ((this60 == 0)) {
HXLINE( 581)											g13 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											g13 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float b14;
HXDLIN( 581)										int this61 = (this57 & 255);
HXDLIN( 581)										if ((this61 == 0)) {
HXLINE( 581)											b14 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											b14 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float a23;
HXDLIN( 581)										int this62 = ((color >> 24) & 255);
HXDLIN( 581)										if ((this62 == 0)) {
HXLINE( 581)											a23 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											a23 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float r23;
HXDLIN( 581)										int this63 = ((color >> 16) & 255);
HXDLIN( 581)										if ((this63 == 0)) {
HXLINE( 581)											r23 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											r23 = (( (Float)(this63) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float g23;
HXDLIN( 581)										int this64 = ((color >> 8) & 255);
HXDLIN( 581)										if ((this64 == 0)) {
HXLINE( 581)											g23 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											g23 = (( (Float)(this64) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float b24;
HXDLIN( 581)										int this65 = (color & 255);
HXDLIN( 581)										if ((this65 == 0)) {
HXLINE( 581)											b24 = ((Float)0.);
            										}
            										else {
HXLINE( 581)											b24 = (( (Float)(this65) ) / ( (Float)(255) ));
            										}
HXDLIN( 581)										Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 581)										int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 581)										int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 581)										int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 581)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 581)										int blended3 = ((((a10 << 24) | (r5 << 16)) | (g5 << 8)) | b15);
HXDLIN( 581)										{
HXLINE( 581)											int _hx_tmp14;
HXDLIN( 581)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)												_hx_tmp14 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXLINE( 581)												_hx_tmp14 = blended3;
            											}
HXDLIN( 581)											::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp14);
            										}
            									}
            									else {
HXLINE( 581)										::Dynamic this66 = pixelImage->image;
HXDLIN( 581)										int index9;
HXDLIN( 581)										if (pixelImage->useVirtualPos) {
HXLINE( 581)											index9 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x7) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 581)											index9 = ::Std_obj::_hx_int(( (Float)(((y7 * pixelImage->width) + x7)) ));
            										}
HXDLIN( 581)										int _hx_tmp15;
HXDLIN( 581)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 581)											_hx_tmp15 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            										}
            										else {
HXLINE( 581)											_hx_tmp15 = c9;
            										}
HXDLIN( 581)										::iterMagic::Iimg_obj::set(this66,index9,_hx_tmp15);
            									}
            								}
HXLINE(  73)								found1 = true;
            							}
            							else {
HXLINE( 581)								if (found1) {
HXLINE( 581)									goto _hx_goto_776;
            								}
            							}
            						}
            					}
            					_hx_goto_776:;
            				}
            			}
            		}
HXDLIN( 581)		 ::pi_xy::iter::IntIterStart v_yIter31;
HXDLIN( 581)		 ::pi_xy::iter::IntIterStart v_xIter31;
HXDLIN( 581)		int v_undoY1;
HXDLIN( 581)		int v_undoX1;
HXDLIN( 581)		Float v_ty1;
HXDLIN( 581)		Float v_tx1;
HXDLIN( 581)		Float v_t01;
HXDLIN( 581)		Float v_sy1;
HXDLIN( 581)		Float v_sx1;
HXDLIN( 581)		Float v_s01;
HXDLIN( 581)		Float v_A1;
HXDLIN( 581)		Float ax2 = bx;
HXDLIN( 581)		Float ay2 = by;
HXDLIN( 581)		 ::pi_xy::ImageStruct v_undoImage1 = null();
HXDLIN( 581)		Float bx4 = bx3;
HXDLIN( 581)		Float by4 = by3;
HXDLIN( 581)		Float cx4 = cx3;
HXDLIN( 581)		Float cy4 = cy3;
HXDLIN( 581)		bool adjustWinding3 = (((((ax2 * by4) - (bx4 * ay2)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay2) - (ax2 * cy4))) > 0);
HXDLIN( 581)		if (!(adjustWinding3)) {
HXLINE( 581)			Float bx_3 = bx4;
HXDLIN( 581)			Float by_3 = by4;
HXLINE(  24)			bx4 = cx4;
HXLINE(  25)			by4 = cy4;
HXLINE(  26)			cx4 = bx_3;
HXLINE(  27)			cy4 = by_3;
            		}
HXLINE( 581)		Float v_ax1 = ax2;
HXDLIN( 581)		Float v_ay1 = ay2;
HXDLIN( 581)		Float v_bx1 = bx4;
HXDLIN( 581)		Float v_by1 = by4;
HXDLIN( 581)		Float v_cx1 = cx4;
HXDLIN( 581)		Float v_cy1 = cy4;
HXDLIN( 581)		bool v_preCalculated1 = true;
HXDLIN( 581)		{
HXLINE( 581)			v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN( 581)			v_sx1 = (v_cy1 - v_ay1);
HXDLIN( 581)			v_sy1 = (v_ax1 - v_cx1);
HXDLIN( 581)			v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN( 581)			v_tx1 = (v_ay1 - v_by1);
HXDLIN( 581)			v_ty1 = (v_bx1 - v_ax1);
HXDLIN( 581)			v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN( 581)			Float a15 = v_ax1;
HXDLIN( 581)			Float b16 = v_bx1;
HXDLIN( 581)			Float c10 = v_cx1;
HXDLIN( 581)			if ((a15 > b16)) {
HXLINE( 581)				if ((a15 > c10)) {
HXLINE( 581)					int min12;
HXDLIN( 581)					if ((b16 > c10)) {
HXLINE( 581)						min12 = ::Math_obj::floor(c10);
            					}
            					else {
HXLINE( 581)						min12 = ::Math_obj::floor(b16);
            					}
HXDLIN( 581)					int ii_min24 = min12;
HXDLIN( 581)					int ii_max24 = ::Math_obj::ceil(a15);
HXDLIN( 581)					v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            				}
            				else {
HXLINE( 581)					int ii_min25 = ::Math_obj::floor(b16);
HXDLIN( 581)					int ii_max25 = ::Math_obj::ceil(c10);
HXDLIN( 581)					v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            				}
            			}
            			else {
HXLINE( 581)				if ((b16 > c10)) {
HXLINE( 581)					int min13;
HXDLIN( 581)					if ((a15 > c10)) {
HXLINE( 581)						min13 = ::Math_obj::floor(c10);
            					}
            					else {
HXLINE( 581)						min13 = ::Math_obj::ceil(a15);
            					}
HXDLIN( 581)					int ii_min26 = min13;
HXDLIN( 581)					int ii_max26 = ::Math_obj::ceil(b16);
HXDLIN( 581)					v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            				}
            				else {
HXLINE( 581)					int ii_min27 = ::Math_obj::floor(a15);
HXDLIN( 581)					int ii_max27 = ::Math_obj::ceil(c10);
HXDLIN( 581)					v_xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            				}
            			}
HXDLIN( 581)			Float a16 = v_ay1;
HXDLIN( 581)			Float b17 = v_by1;
HXDLIN( 581)			Float c11 = v_cy1;
HXDLIN( 581)			if ((a16 > b17)) {
HXLINE( 581)				if ((a16 > c11)) {
HXLINE( 581)					int min14;
HXDLIN( 581)					if ((b17 > c11)) {
HXLINE( 581)						min14 = ::Math_obj::floor(c11);
            					}
            					else {
HXLINE( 581)						min14 = ::Math_obj::floor(b17);
            					}
HXDLIN( 581)					int ii_min28 = min14;
HXDLIN( 581)					int ii_max28 = ::Math_obj::ceil(a16);
HXDLIN( 581)					v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            				}
            				else {
HXLINE( 581)					int ii_min29 = ::Math_obj::floor(b17);
HXDLIN( 581)					int ii_max29 = ::Math_obj::ceil(c11);
HXDLIN( 581)					v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            				}
            			}
            			else {
HXLINE( 581)				if ((b17 > c11)) {
HXLINE( 581)					int min15;
HXDLIN( 581)					if ((a16 > c11)) {
HXLINE( 581)						min15 = ::Math_obj::floor(c11);
            					}
            					else {
HXLINE( 581)						min15 = ::Math_obj::ceil(a16);
            					}
HXDLIN( 581)					int ii_min30 = min15;
HXDLIN( 581)					int ii_max30 = ::Math_obj::ceil(b17);
HXDLIN( 581)					v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            				}
            				else {
HXLINE( 581)					int ii_min31 = ::Math_obj::floor(a16);
HXDLIN( 581)					int ii_max31 = ::Math_obj::ceil(c11);
HXDLIN( 581)					v_yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            				}
            			}
            		}
HXDLIN( 581)		if (hasUndo1) {
HXLINE( 581)			v_undoImage1 = undoImage3;
HXDLIN( 581)			v_undoX1 = xIter31->start;
HXDLIN( 581)			v_undoY1 = yIter31->start;
            		}
HXDLIN( 581)		 ::pi_xy::algo::HitQuad v4 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 581)		 ::pi_xy::algo::HitQuad hitQuad = v4;
HXLINE( 582)		Float cx5 = h2;
HXLINE( 583)		Float cy5 = radius2;
HXLINE( 584)		Float bx5 = h2;
HXLINE( 585)		Float by5 = -(radius2);
HXLINE( 587)		Float dx3 = hSmall;
HXLINE( 588)		Float dy3 = radius2;
HXLINE( 589)		Float ax3 = hSmall;
HXLINE( 590)		Float ay3 = -(radius2);
HXLINE( 592)		temp = (px + ((bx5 * cos) - (by5 * sin)));
HXLINE( 593)		by5 = (py + ((by5 * cos) + (bx5 * sin)));
HXLINE( 594)		bx5 = temp;
HXLINE( 595)		temp = (px + ((cx5 * cos) - (cy5 * sin)));
HXLINE( 596)		cy5 = (py + ((cy5 * cos) + (cx5 * sin)));
HXLINE( 597)		cx5 = temp;
HXLINE( 599)		temp = (px + ((ax3 * cos) - (ay3 * sin)));
HXLINE( 600)		ay3 = (py + ((ay3 * cos) + (ax3 * sin)));
HXLINE( 601)		ax3 = temp;
HXLINE( 603)		temp = (px + ((dx3 * cos) - (dy3 * sin)));
HXLINE( 604)		dy3 = (py + ((dy3 * cos) + (dx3 * sin)));
HXLINE( 605)		dx3 = temp;
HXLINE( 607)		Float bx6 = bx5;
HXDLIN( 607)		Float by6 = by5;
HXDLIN( 607)		Float cx6 = cx5;
HXDLIN( 607)		Float cy6 = cy5;
HXDLIN( 607)		bool hasUndo2 = false;
HXDLIN( 607)		bool adjustWinding4 = (((((qx * by6) - (bx6 * qy)) + ((bx6 * cy6) - (cx6 * by6))) + ((cx6 * qy) - (qx * cy6))) > 0);
HXDLIN( 607)		if (!(adjustWinding4)) {
HXLINE( 607)			Float bx_4 = bx6;
HXDLIN( 607)			Float by_4 = by6;
HXLINE(  25)			bx6 = cx6;
HXLINE(  26)			by6 = cy6;
HXLINE(  27)			cx6 = bx_4;
HXLINE(  28)			cy6 = by_4;
            		}
HXLINE( 607)		Float s02 = ((qy * cx6) - (qx * cy6));
HXDLIN( 607)		Float sx2 = (cy6 - qy);
HXDLIN( 607)		Float sy2 = (qx - cx6);
HXDLIN( 607)		Float t02 = ((qx * by6) - (qy * bx6));
HXDLIN( 607)		Float tx2 = (qy - by6);
HXDLIN( 607)		Float ty2 = (bx6 - qx);
HXDLIN( 607)		Float A2 = ((((-(by6) * cx6) + (qy * (-(bx6) + cx6))) + (qx * (by6 - cy6))) + (bx6 * cy6));
HXDLIN( 607)		 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 607)		if ((qx > bx6)) {
HXLINE( 607)			if ((qx > cx6)) {
HXLINE( 607)				int min16;
HXDLIN( 607)				if ((bx6 > cx6)) {
HXLINE( 607)					min16 = ::Math_obj::floor(cx6);
            				}
            				else {
HXLINE( 607)					min16 = ::Math_obj::floor(bx6);
            				}
HXDLIN( 607)				int ii_min32 = min16;
HXDLIN( 607)				int ii_max32 = ::Math_obj::ceil(qx);
HXDLIN( 607)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min32,ii_max32);
            			}
            			else {
HXLINE( 607)				int ii_min33 = ::Math_obj::floor(bx6);
HXDLIN( 607)				int ii_max33 = ::Math_obj::ceil(cx6);
HXDLIN( 607)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min33,ii_max33);
            			}
            		}
            		else {
HXLINE( 607)			if ((bx6 > cx6)) {
HXLINE( 607)				int min17;
HXDLIN( 607)				if ((qx > cx6)) {
HXLINE( 607)					min17 = ::Math_obj::floor(cx6);
            				}
            				else {
HXLINE( 607)					min17 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 607)				int ii_min34 = min17;
HXDLIN( 607)				int ii_max34 = ::Math_obj::ceil(bx6);
HXDLIN( 607)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min34,ii_max34);
            			}
            			else {
HXLINE( 607)				int ii_min35 = ::Math_obj::floor(qx);
HXDLIN( 607)				int ii_max35 = ::Math_obj::ceil(cx6);
HXDLIN( 607)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min35,ii_max35);
            			}
            		}
HXDLIN( 607)		 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 607)		if ((qy > by6)) {
HXLINE( 607)			if ((qy > cy6)) {
HXLINE( 607)				int min18;
HXDLIN( 607)				if ((by6 > cy6)) {
HXLINE( 607)					min18 = ::Math_obj::floor(cy6);
            				}
            				else {
HXLINE( 607)					min18 = ::Math_obj::floor(by6);
            				}
HXDLIN( 607)				int ii_min36 = min18;
HXDLIN( 607)				int ii_max36 = ::Math_obj::ceil(qy);
HXDLIN( 607)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min36,ii_max36);
            			}
            			else {
HXLINE( 607)				int ii_min37 = ::Math_obj::floor(by6);
HXDLIN( 607)				int ii_max37 = ::Math_obj::ceil(cy6);
HXDLIN( 607)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min37,ii_max37);
            			}
            		}
            		else {
HXLINE( 607)			if ((by6 > cy6)) {
HXLINE( 607)				int min19;
HXDLIN( 607)				if ((qy > cy6)) {
HXLINE( 607)					min19 = ::Math_obj::floor(cy6);
            				}
            				else {
HXLINE( 607)					min19 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 607)				int ii_min38 = min19;
HXDLIN( 607)				int ii_max38 = ::Math_obj::ceil(by6);
HXDLIN( 607)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min38,ii_max38);
            			}
            			else {
HXLINE( 607)				int ii_min39 = ::Math_obj::floor(qy);
HXDLIN( 607)				int ii_max39 = ::Math_obj::ceil(cy6);
HXDLIN( 607)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min39,ii_max39);
            			}
            		}
HXDLIN( 607)		 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 607)		if (hasUndo2) {
HXLINE( 607)			int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 607)			int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 607)			 ::Dynamic imageType2 = null();
HXDLIN( 607)			 ::pi_xy::ImageStruct this67 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 607)			if (::hx::IsNull( imageType2 )) {
HXLINE(  54)				imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 607)			::Dynamic undoImage7;
HXDLIN( 607)			switch((int)(( (int)(imageType2) ))){
            				case (int)0: {
HXLINE( 607)					 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 607)					 ::iterMagic::BytesImg b18 = byt2;
HXDLIN( 607)					{
HXLINE( 607)						b18->width = width2;
HXDLIN( 607)						b18->height = height2;
HXDLIN( 607)						b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 607)						b18->data = ::haxe::io::Bytes_obj::alloc((b18->length * 4));
HXDLIN( 607)						{
HXLINE( 607)							int len4 = b18->length;
HXDLIN( 607)							int w2 = 0;
HXDLIN( 607)							{
HXLINE( 607)								int _g40 = 0;
HXDLIN( 607)								int _g41 = b18->height;
HXDLIN( 607)								while((_g40 < _g41)){
HXLINE( 607)									_g40 = (_g40 + 1);
HXDLIN( 607)									int y8 = (_g40 - 1);
HXDLIN( 607)									{
HXLINE( 607)										int _g42 = 0;
HXDLIN( 607)										int _g43 = b18->width;
HXDLIN( 607)										while((_g42 < _g43)){
HXLINE( 607)											_g42 = (_g42 + 1);
HXDLIN( 607)											int x8 = (_g42 - 1);
HXDLIN( 607)											{
HXLINE( 607)												w2 = (w2 + 1);
HXDLIN( 607)												b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 607)											{
HXLINE( 607)												w2 = (w2 + 1);
HXDLIN( 607)												b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 607)											{
HXLINE( 607)												w2 = (w2 + 1);
HXDLIN( 607)												b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 607)											{
HXLINE( 607)												w2 = (w2 + 1);
HXDLIN( 607)												b18->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 607)					undoImage7 = b18;
            				}
            				break;
            				case (int)1: {
HXLINE( 607)					 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 607)					 ::iterMagic::ArrIntImg a17 = arrI2;
HXDLIN( 607)					{
HXLINE( 607)						a17->width = width2;
HXDLIN( 607)						a17->height = height2;
HXDLIN( 607)						a17->data = ::Array_obj< int >::__new(0);
HXDLIN( 607)						a17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 607)						{
HXLINE( 607)							int _g44 = 0;
HXDLIN( 607)							int _g45 = a17->length;
HXDLIN( 607)							while((_g44 < _g45)){
HXLINE( 607)								_g44 = (_g44 + 1);
HXDLIN( 607)								int i12 = (_g44 - 1);
HXDLIN( 607)								a17->data[i12] = 0;
            							}
            						}
            					}
HXDLIN( 607)					undoImage7 = a17;
            				}
            				break;
            				case (int)2: {
HXLINE( 607)					 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 607)					 ::iterMagic::U32ArrImg b19 = u32a2;
HXDLIN( 607)					{
HXLINE( 607)						b19->width = width2;
HXDLIN( 607)						b19->height = height2;
HXDLIN( 607)						b19->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 607)						int size2 = (b19->length * 4);
HXDLIN( 607)						b19->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 607)						{
HXLINE( 607)							int _g46 = 0;
HXDLIN( 607)							int _g47 = b19->length;
HXDLIN( 607)							while((_g46 < _g47)){
HXLINE( 607)								_g46 = (_g46 + 1);
HXDLIN( 607)								int i13 = (_g46 - 1);
HXDLIN( 607)								{
HXLINE( 607)									 ::haxe::io::ArrayBufferViewImpl this68 = b19->data;
HXDLIN( 607)									bool undoImage8;
HXDLIN( 607)									if ((i13 >= 0)) {
HXLINE( 607)										undoImage8 = (i13 < (this68->byteLength >> 2));
            									}
            									else {
HXLINE( 607)										undoImage8 = false;
            									}
HXDLIN( 607)									if (undoImage8) {
HXLINE( 607)										 ::haxe::io::Bytes _this2 = this68->bytes;
HXDLIN( 607)										int pos2 = ((i13 << 2) + this68->byteOffset);
HXDLIN( 607)										_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 607)										_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 607)										_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 607)										_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 607)					undoImage7 = b19;
            				}
            				break;
            				case (int)3: {
HXLINE( 607)					 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 607)					 ::iterMagic::VecIntImg v5 = vec2;
HXDLIN( 607)					{
HXLINE( 607)						v5->width = width2;
HXDLIN( 607)						v5->height = height2;
HXDLIN( 607)						v5->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 607)						v5->data = ::Array_obj< int >::__new(v5->length);
HXDLIN( 607)						{
HXLINE( 607)							int _g48 = 0;
HXDLIN( 607)							int _g49 = v5->length;
HXDLIN( 607)							while((_g48 < _g49)){
HXLINE( 607)								_g48 = (_g48 + 1);
HXDLIN( 607)								int i14 = (_g48 - 1);
HXDLIN( 607)								v5->data->__unsafe_set(i14,0);
            							}
            						}
            					}
HXDLIN( 607)					undoImage7 = v5;
            				}
            				break;
            				case (int)4: {
HXLINE( 607)					 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 607)					 ::iterMagic::StackIntImg b20 = sInt2;
HXDLIN( 607)					{
HXLINE( 607)						b20->width = width2;
HXDLIN( 607)						b20->height = height2;
HXDLIN( 607)						b20->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 607)						b20->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 607)						{
HXLINE( 607)							int len5 = b20->length;
HXDLIN( 607)							 ::haxe::ds::GenericStack_Int d2 = b20->data;
HXDLIN( 607)							if (::hx::IsNull( d2->head )) {
HXLINE( 607)								int _g50 = 0;
HXDLIN( 607)								int _g51 = len5;
HXDLIN( 607)								while((_g50 < _g51)){
HXLINE( 607)									_g50 = (_g50 + 1);
HXDLIN( 607)									int i15 = (_g50 - 1);
HXDLIN( 607)									d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            								}
            							}
            							else {
HXLINE( 607)								int _g52 = 0;
HXDLIN( 607)								int _g53 = len5;
HXDLIN( 607)								while((_g52 < _g53)){
HXLINE( 607)									_g52 = (_g52 + 1);
HXDLIN( 607)									int i16 = (_g52 - 1);
HXDLIN( 607)									{
HXLINE( 607)										 ::haxe::ds::GenericCell_Int l2 = b20->data->head;
HXDLIN( 607)										 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 607)										{
HXLINE( 607)											int _g54 = 0;
HXDLIN( 607)											int _g55 = i16;
HXDLIN( 607)											while((_g54 < _g55)){
HXLINE( 607)												_g54 = (_g54 + 1);
HXDLIN( 607)												int i17 = (_g54 - 1);
HXLINE( 345)												prev2 = l2;
HXLINE( 346)												l2 = l2->next;
            											}
            										}
HXLINE( 607)										if (::hx::IsNull( prev2 )) {
HXLINE( 607)											b20->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 607)											l2 = null();
            										}
            										else {
HXLINE( 607)											prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 607)											l2 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 607)					undoImage7 = b20;
            				}
            				break;
            			}
HXDLIN( 607)			this67->image = undoImage7;
HXDLIN( 607)			this67->width = width2;
HXDLIN( 607)			this67->height = height2;
HXDLIN( 607)			this67->imageType = ( (int)(imageType2) );
HXDLIN( 607)			undoImage6 = this67;
HXDLIN( 607)			{
HXLINE( 607)				int rectLeft2 = xIter32->start;
HXDLIN( 607)				int rectTop2 = yIter32->start;
HXDLIN( 607)				int rectRight2 = xIter32->max;
HXDLIN( 607)				bool forceClear2 = false;
HXDLIN( 607)				{
HXLINE( 607)					int _g56 = rectTop2;
HXDLIN( 607)					int _g57 = yIter32->max;
HXDLIN( 607)					while((_g56 < _g57)){
HXLINE( 607)						_g56 = (_g56 + 1);
HXDLIN( 607)						int dy4 = (_g56 - 1);
HXDLIN( 607)						{
HXLINE( 607)							int _g58 = rectLeft2;
HXDLIN( 607)							int _g59 = rectRight2;
HXDLIN( 607)							while((_g58 < _g59)){
HXLINE( 607)								_g58 = (_g58 + 1);
HXDLIN( 607)								int dx4 = (_g58 - 1);
HXDLIN( 607)								::Dynamic this69 = pixelImage->image;
HXDLIN( 607)								int index10;
HXDLIN( 607)								if (pixelImage->useVirtualPos) {
HXLINE( 607)									index10 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 607)									index10 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            								}
HXDLIN( 607)								int c12 = ::iterMagic::Iimg_obj::get(this69,index10);
HXDLIN( 607)								int col2;
HXDLIN( 607)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 607)									col2 = ((((((c12 >> 24) & 255) << 24) | ((c12 & 255) << 16)) | (((c12 >> 8) & 255) << 8)) | ((c12 >> 16) & 255));
            								}
            								else {
HXLINE( 607)									col2 = c12;
            								}
HXDLIN( 607)								bool _hx_tmp16;
HXDLIN( 607)								if (pixelImage->useMask) {
HXLINE( 607)									_hx_tmp16 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 607)									_hx_tmp16 = false;
            								}
HXDLIN( 607)								if (_hx_tmp16) {
HXLINE( 607)									 ::pi_xy::ImageStruct this70 = pixelImage->mask;
HXDLIN( 607)									::Dynamic this71 = this70->image;
HXDLIN( 607)									int index11;
HXDLIN( 607)									if (this70->useVirtualPos) {
HXLINE( 607)										index11 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this70->virtualY) * ( (Float)(this70->width) )) + dx4) - this70->virtualX));
            									}
            									else {
HXLINE( 607)										index11 = ::Std_obj::_hx_int(( (Float)(((dy4 * this70->width) + dx4)) ));
            									}
HXDLIN( 607)									int c13 = ::iterMagic::Iimg_obj::get(this71,index11);
HXDLIN( 607)									int v6;
HXDLIN( 607)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 607)										v6 = ((((((c13 >> 24) & 255) << 24) | ((c13 & 255) << 16)) | (((c13 >> 8) & 255) << 8)) | ((c13 >> 16) & 255));
            									}
            									else {
HXLINE( 607)										v6 = c13;
            									}
HXDLIN( 607)									int maskPixel2 = v6;
HXDLIN( 607)									int this72 = col2;
HXDLIN( 607)									if ((maskPixel2 == 0)) {
HXLINE( 607)										col2 = this72;
            									}
            									else {
HXLINE( 607)										Float m02;
HXDLIN( 607)										int this73 = ((maskPixel2 >> 24) & 255);
HXDLIN( 607)										if ((this73 == 0)) {
HXLINE( 607)											m02 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											m02 = (( (Float)(this73) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float m12;
HXDLIN( 607)										int this74 = ((maskPixel2 >> 16) & 255);
HXDLIN( 607)										if ((this74 == 0)) {
HXLINE( 607)											m12 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											m12 = (( (Float)(this74) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float m22;
HXDLIN( 607)										int this75 = ((maskPixel2 >> 8) & 255);
HXDLIN( 607)										if ((this75 == 0)) {
HXLINE( 607)											m22 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											m22 = (( (Float)(this75) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float m32;
HXDLIN( 607)										int this76 = (maskPixel2 & 255);
HXDLIN( 607)										if ((this76 == 0)) {
HXLINE( 607)											m32 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											m32 = (( (Float)(this76) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this72 >> 24) & 255)) )));
HXDLIN( 607)										int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this72 >> 16) & 255)) )));
HXDLIN( 607)										int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this72 >> 8) & 255)) )));
HXDLIN( 607)										int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this72 & 255)) )));
HXDLIN( 607)										col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 607)								if ((col2 != 0)) {
HXLINE( 607)									int x9 = (dx4 - rectLeft2);
HXDLIN( 607)									int y9 = (dy4 - rectTop2);
HXDLIN( 607)									int c14 = col2;
HXDLIN( 607)									bool _hx_tmp17;
HXDLIN( 607)									if ((((c14 >> 24) & 255) < 254)) {
HXLINE( 607)										_hx_tmp17 = undoImage6->transparent;
            									}
            									else {
HXLINE( 607)										_hx_tmp17 = false;
            									}
HXDLIN( 607)									if (_hx_tmp17) {
HXLINE( 607)										int location4;
HXDLIN( 607)										if (undoImage6->useVirtualPos) {
HXLINE( 607)											location4 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 607)											location4 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            										}
HXDLIN( 607)										int this77 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 607)										int this78;
HXDLIN( 607)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 607)											this78 = ((((((this77 >> 24) & 255) << 24) | ((this77 & 255) << 16)) | (((this77 >> 8) & 255) << 8)) | ((this77 >> 16) & 255));
            										}
            										else {
HXLINE( 607)											this78 = this77;
            										}
HXDLIN( 607)										Float a18;
HXDLIN( 607)										int this79 = ((this78 >> 24) & 255);
HXDLIN( 607)										if ((this79 == 0)) {
HXLINE( 607)											a18 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											a18 = (( (Float)(this79) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float r14;
HXDLIN( 607)										int this80 = ((this78 >> 16) & 255);
HXDLIN( 607)										if ((this80 == 0)) {
HXLINE( 607)											r14 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											r14 = (( (Float)(this80) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float g14;
HXDLIN( 607)										int this81 = ((this78 >> 8) & 255);
HXDLIN( 607)										if ((this81 == 0)) {
HXLINE( 607)											g14 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											g14 = (( (Float)(this81) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float b110;
HXDLIN( 607)										int this82 = (this78 & 255);
HXDLIN( 607)										if ((this82 == 0)) {
HXLINE( 607)											b110 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											b110 = (( (Float)(this82) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float a24;
HXDLIN( 607)										int this83 = ((col2 >> 24) & 255);
HXDLIN( 607)										if ((this83 == 0)) {
HXLINE( 607)											a24 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											a24 = (( (Float)(this83) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float r24;
HXDLIN( 607)										int this84 = ((col2 >> 16) & 255);
HXDLIN( 607)										if ((this84 == 0)) {
HXLINE( 607)											r24 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											r24 = (( (Float)(this84) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float g24;
HXDLIN( 607)										int this85 = ((col2 >> 8) & 255);
HXDLIN( 607)										if ((this85 == 0)) {
HXLINE( 607)											g24 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											g24 = (( (Float)(this85) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float b25;
HXDLIN( 607)										int this86 = (col2 & 255);
HXDLIN( 607)										if ((this86 == 0)) {
HXLINE( 607)											b25 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											b25 = (( (Float)(this86) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float a34 = (a18 * (( (Float)(1) ) - a24));
HXDLIN( 607)										int r6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 607)										int g6 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 607)										int b26 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a34) + (b25 * a24))));
HXDLIN( 607)										int a19 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 607)										int blended4 = ((((a19 << 24) | (r6 << 16)) | (g6 << 8)) | b26);
HXDLIN( 607)										{
HXLINE( 607)											int _hx_tmp18;
HXDLIN( 607)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 607)												_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            											}
            											else {
HXLINE( 607)												_hx_tmp18 = blended4;
            											}
HXDLIN( 607)											::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            										}
            									}
            									else {
HXLINE( 607)										::Dynamic this87 = undoImage6->image;
HXDLIN( 607)										int index12;
HXDLIN( 607)										if (undoImage6->useVirtualPos) {
HXLINE( 607)											index12 = ::Std_obj::_hx_int(((((( (Float)(y9) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x9) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 607)											index12 = ::Std_obj::_hx_int(( (Float)(((y9 * undoImage6->width) + x9)) ));
            										}
HXDLIN( 607)										int _hx_tmp19;
HXDLIN( 607)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 607)											_hx_tmp19 = ((((((c14 >> 24) & 255) << 24) | ((c14 & 255) << 16)) | (((c14 >> 8) & 255) << 8)) | ((c14 >> 16) & 255));
            										}
            										else {
HXLINE( 607)											_hx_tmp19 = c14;
            										}
HXDLIN( 607)										::iterMagic::Iimg_obj::set(this87,index12,_hx_tmp19);
            									}
            								}
            								else {
HXLINE( 607)									if (forceClear2) {
HXLINE( 607)										::Dynamic this88 = undoImage6->image;
HXDLIN( 607)										int x10 = (dx4 - rectLeft2);
HXDLIN( 607)										int y10 = (dy4 - rectTop2);
HXDLIN( 607)										int index13;
HXDLIN( 607)										if (undoImage6->useVirtualPos) {
HXLINE( 607)											index13 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x10) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 607)											index13 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage6->width) + x10)) ));
            										}
HXDLIN( 607)										::iterMagic::Iimg_obj::set(this88,index13,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 607)		bool found2 = false;
HXDLIN( 607)		Float s2 = ((Float)0.);
HXDLIN( 607)		Float t2 = ((Float)0.);
HXDLIN( 607)		Float sxx2 = ((Float)0.);
HXDLIN( 607)		Float txx2 = ((Float)0.);
HXDLIN( 607)		{
HXLINE( 607)			int _g_min4 = xIter32->start;
HXDLIN( 607)			int _g_max4 = xIter32->max;
HXDLIN( 607)			while((_g_min4 < _g_max4)){
HXLINE( 607)				_g_min4 = (_g_min4 + 1);
HXDLIN( 607)				int x11 = (_g_min4 - 1);
HXLINE(  60)				sxx2 = (sx2 * ( (Float)(x11) ));
HXLINE(  61)				txx2 = (tx2 * ( (Float)(x11) ));
HXLINE(  62)				found2 = false;
HXLINE( 607)				{
HXLINE( 607)					int _g_min5 = yIter32->start;
HXDLIN( 607)					int _g_max5 = yIter32->max;
HXDLIN( 607)					while((_g_min5 < _g_max5)){
HXLINE( 607)						_g_min5 = (_g_min5 + 1);
HXDLIN( 607)						int y11 = (_g_min5 - 1);
HXLINE(  64)						s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y11) )));
HXLINE(  65)						t2 = ((t02 + txx2) + (ty2 * ( (Float)(y11) )));
HXLINE( 607)						bool _hx_tmp20;
HXDLIN( 607)						if (!((s2 <= 0))) {
HXLINE( 607)							_hx_tmp20 = (t2 <= 0);
            						}
            						else {
HXLINE( 607)							_hx_tmp20 = true;
            						}
HXDLIN( 607)						if (_hx_tmp20) {
HXLINE( 607)							if (found2) {
HXLINE( 607)								goto _hx_goto_788;
            							}
            						}
            						else {
HXLINE( 607)							if (((s2 + t2) < A2)) {
HXLINE( 607)								{
HXLINE( 607)									int c15 = color;
HXDLIN( 607)									bool _hx_tmp21;
HXDLIN( 607)									if ((((c15 >> 24) & 255) < 254)) {
HXLINE( 607)										_hx_tmp21 = pixelImage->transparent;
            									}
            									else {
HXLINE( 607)										_hx_tmp21 = false;
            									}
HXDLIN( 607)									if (_hx_tmp21) {
HXLINE( 607)										int location5;
HXDLIN( 607)										if (pixelImage->useVirtualPos) {
HXLINE( 607)											location5 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x11) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 607)											location5 = ::Std_obj::_hx_int(( (Float)(((y11 * pixelImage->width) + x11)) ));
            										}
HXDLIN( 607)										int this89 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN( 607)										int this90;
HXDLIN( 607)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 607)											this90 = ((((((this89 >> 24) & 255) << 24) | ((this89 & 255) << 16)) | (((this89 >> 8) & 255) << 8)) | ((this89 >> 16) & 255));
            										}
            										else {
HXLINE( 607)											this90 = this89;
            										}
HXDLIN( 607)										Float a110;
HXDLIN( 607)										int this91 = ((this90 >> 24) & 255);
HXDLIN( 607)										if ((this91 == 0)) {
HXLINE( 607)											a110 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											a110 = (( (Float)(this91) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float r15;
HXDLIN( 607)										int this92 = ((this90 >> 16) & 255);
HXDLIN( 607)										if ((this92 == 0)) {
HXLINE( 607)											r15 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											r15 = (( (Float)(this92) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float g15;
HXDLIN( 607)										int this93 = ((this90 >> 8) & 255);
HXDLIN( 607)										if ((this93 == 0)) {
HXLINE( 607)											g15 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											g15 = (( (Float)(this93) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float b111;
HXDLIN( 607)										int this94 = (this90 & 255);
HXDLIN( 607)										if ((this94 == 0)) {
HXLINE( 607)											b111 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											b111 = (( (Float)(this94) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float a25;
HXDLIN( 607)										int this95 = ((color >> 24) & 255);
HXDLIN( 607)										if ((this95 == 0)) {
HXLINE( 607)											a25 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											a25 = (( (Float)(this95) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float r25;
HXDLIN( 607)										int this96 = ((color >> 16) & 255);
HXDLIN( 607)										if ((this96 == 0)) {
HXLINE( 607)											r25 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											r25 = (( (Float)(this96) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float g25;
HXDLIN( 607)										int this97 = ((color >> 8) & 255);
HXDLIN( 607)										if ((this97 == 0)) {
HXLINE( 607)											g25 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											g25 = (( (Float)(this97) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float b27;
HXDLIN( 607)										int this98 = (color & 255);
HXDLIN( 607)										if ((this98 == 0)) {
HXLINE( 607)											b27 = ((Float)0.);
            										}
            										else {
HXLINE( 607)											b27 = (( (Float)(this98) ) / ( (Float)(255) ));
            										}
HXDLIN( 607)										Float a35 = (a110 * (( (Float)(1) ) - a25));
HXDLIN( 607)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 607)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 607)										int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a35) + (b27 * a25))));
HXDLIN( 607)										int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 607)										int blended5 = ((((a20 << 24) | (r7 << 16)) | (g7 << 8)) | b28);
HXDLIN( 607)										{
HXLINE( 607)											int _hx_tmp22;
HXDLIN( 607)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 607)												_hx_tmp22 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            											}
            											else {
HXLINE( 607)												_hx_tmp22 = blended5;
            											}
HXDLIN( 607)											::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp22);
            										}
            									}
            									else {
HXLINE( 607)										::Dynamic this99 = pixelImage->image;
HXDLIN( 607)										int index14;
HXDLIN( 607)										if (pixelImage->useVirtualPos) {
HXLINE( 607)											index14 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x11) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 607)											index14 = ::Std_obj::_hx_int(( (Float)(((y11 * pixelImage->width) + x11)) ));
            										}
HXDLIN( 607)										int _hx_tmp23;
HXDLIN( 607)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 607)											_hx_tmp23 = ((((((c15 >> 24) & 255) << 24) | ((c15 & 255) << 16)) | (((c15 >> 8) & 255) << 8)) | ((c15 >> 16) & 255));
            										}
            										else {
HXLINE( 607)											_hx_tmp23 = c15;
            										}
HXDLIN( 607)										::iterMagic::Iimg_obj::set(this99,index14,_hx_tmp23);
            									}
            								}
HXLINE(  73)								found2 = true;
            							}
            							else {
HXLINE( 607)								if (found2) {
HXLINE( 607)									goto _hx_goto_788;
            								}
            							}
            						}
            					}
            					_hx_goto_788:;
            				}
            			}
            		}
HXDLIN( 607)		 ::pi_xy::algo::HitTri hitTriTop;
HXDLIN( 607)		if ((hasHit == true)) {
HXLINE( 607)			 ::pi_xy::algo::HitTri v7 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx6,by6,cx6,cy6,true);
HXDLIN( 607)			if (hasUndo2) {
HXLINE( 607)				v7->undoImage = undoImage6;
HXDLIN( 607)				v7->undoX = xIter32->start;
HXDLIN( 607)				v7->undoY = yIter32->start;
            			}
HXDLIN( 607)			hitTriTop = v7;
            		}
            		else {
HXLINE( 607)			hitTriTop = null();
            		}
HXLINE( 608)		Float bx7 = ax3;
HXDLIN( 608)		Float by7 = ay3;
HXDLIN( 608)		Float cx7 = dx3;
HXDLIN( 608)		Float cy7 = dy3;
HXDLIN( 608)		bool hasUndo3 = false;
HXDLIN( 608)		bool adjustWinding5 = (((((px * by7) - (bx7 * py)) + ((bx7 * cy7) - (cx7 * by7))) + ((cx7 * py) - (px * cy7))) > 0);
HXDLIN( 608)		if (!(adjustWinding5)) {
HXLINE( 608)			Float bx_5 = bx7;
HXDLIN( 608)			Float by_5 = by7;
HXLINE(  25)			bx7 = cx7;
HXLINE(  26)			by7 = cy7;
HXLINE(  27)			cx7 = bx_5;
HXLINE(  28)			cy7 = by_5;
            		}
HXLINE( 608)		Float s03 = ((py * cx7) - (px * cy7));
HXDLIN( 608)		Float sx3 = (cy7 - py);
HXDLIN( 608)		Float sy3 = (px - cx7);
HXDLIN( 608)		Float t03 = ((px * by7) - (py * bx7));
HXDLIN( 608)		Float tx3 = (py - by7);
HXDLIN( 608)		Float ty3 = (bx7 - px);
HXDLIN( 608)		Float A3 = ((((-(by7) * cx7) + (py * (-(bx7) + cx7))) + (px * (by7 - cy7))) + (bx7 * cy7));
HXDLIN( 608)		 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 608)		if ((px > bx7)) {
HXLINE( 608)			if ((px > cx7)) {
HXLINE( 608)				int min20;
HXDLIN( 608)				if ((bx7 > cx7)) {
HXLINE( 608)					min20 = ::Math_obj::floor(cx7);
            				}
            				else {
HXLINE( 608)					min20 = ::Math_obj::floor(bx7);
            				}
HXDLIN( 608)				int ii_min40 = min20;
HXDLIN( 608)				int ii_max40 = ::Math_obj::ceil(px);
HXDLIN( 608)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min40,ii_max40);
            			}
            			else {
HXLINE( 608)				int ii_min41 = ::Math_obj::floor(bx7);
HXDLIN( 608)				int ii_max41 = ::Math_obj::ceil(cx7);
HXDLIN( 608)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min41,ii_max41);
            			}
            		}
            		else {
HXLINE( 608)			if ((bx7 > cx7)) {
HXLINE( 608)				int min21;
HXDLIN( 608)				if ((px > cx7)) {
HXLINE( 608)					min21 = ::Math_obj::floor(cx7);
            				}
            				else {
HXLINE( 608)					min21 = ::Math_obj::ceil(px);
            				}
HXDLIN( 608)				int ii_min42 = min21;
HXDLIN( 608)				int ii_max42 = ::Math_obj::ceil(bx7);
HXDLIN( 608)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min42,ii_max42);
            			}
            			else {
HXLINE( 608)				int ii_min43 = ::Math_obj::floor(px);
HXDLIN( 608)				int ii_max43 = ::Math_obj::ceil(cx7);
HXDLIN( 608)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min43,ii_max43);
            			}
            		}
HXDLIN( 608)		 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 608)		if ((py > by7)) {
HXLINE( 608)			if ((py > cy7)) {
HXLINE( 608)				int min22;
HXDLIN( 608)				if ((by7 > cy7)) {
HXLINE( 608)					min22 = ::Math_obj::floor(cy7);
            				}
            				else {
HXLINE( 608)					min22 = ::Math_obj::floor(by7);
            				}
HXDLIN( 608)				int ii_min44 = min22;
HXDLIN( 608)				int ii_max44 = ::Math_obj::ceil(py);
HXDLIN( 608)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min44,ii_max44);
            			}
            			else {
HXLINE( 608)				int ii_min45 = ::Math_obj::floor(by7);
HXDLIN( 608)				int ii_max45 = ::Math_obj::ceil(cy7);
HXDLIN( 608)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min45,ii_max45);
            			}
            		}
            		else {
HXLINE( 608)			if ((by7 > cy7)) {
HXLINE( 608)				int min23;
HXDLIN( 608)				if ((py > cy7)) {
HXLINE( 608)					min23 = ::Math_obj::floor(cy7);
            				}
            				else {
HXLINE( 608)					min23 = ::Math_obj::ceil(py);
            				}
HXDLIN( 608)				int ii_min46 = min23;
HXDLIN( 608)				int ii_max46 = ::Math_obj::ceil(by7);
HXDLIN( 608)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min46,ii_max46);
            			}
            			else {
HXLINE( 608)				int ii_min47 = ::Math_obj::floor(py);
HXDLIN( 608)				int ii_max47 = ::Math_obj::ceil(cy7);
HXDLIN( 608)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min47,ii_max47);
            			}
            		}
HXDLIN( 608)		 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 608)		if (hasUndo3) {
HXLINE( 608)			int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 608)			int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 608)			 ::Dynamic imageType3 = null();
HXDLIN( 608)			 ::pi_xy::ImageStruct this100 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 608)			if (::hx::IsNull( imageType3 )) {
HXLINE(  54)				imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 608)			::Dynamic undoImage10;
HXDLIN( 608)			switch((int)(( (int)(imageType3) ))){
            				case (int)0: {
HXLINE( 608)					 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 608)					 ::iterMagic::BytesImg b29 = byt3;
HXDLIN( 608)					{
HXLINE( 608)						b29->width = width3;
HXDLIN( 608)						b29->height = height3;
HXDLIN( 608)						b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 608)						b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN( 608)						{
HXLINE( 608)							int len6 = b29->length;
HXDLIN( 608)							int w3 = 0;
HXDLIN( 608)							{
HXLINE( 608)								int _g60 = 0;
HXDLIN( 608)								int _g61 = b29->height;
HXDLIN( 608)								while((_g60 < _g61)){
HXLINE( 608)									_g60 = (_g60 + 1);
HXDLIN( 608)									int y12 = (_g60 - 1);
HXDLIN( 608)									{
HXLINE( 608)										int _g62 = 0;
HXDLIN( 608)										int _g63 = b29->width;
HXDLIN( 608)										while((_g62 < _g63)){
HXLINE( 608)											_g62 = (_g62 + 1);
HXDLIN( 608)											int x12 = (_g62 - 1);
HXDLIN( 608)											{
HXLINE( 608)												w3 = (w3 + 1);
HXDLIN( 608)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 608)											{
HXLINE( 608)												w3 = (w3 + 1);
HXDLIN( 608)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 608)											{
HXLINE( 608)												w3 = (w3 + 1);
HXDLIN( 608)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 608)											{
HXLINE( 608)												w3 = (w3 + 1);
HXDLIN( 608)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 608)					undoImage10 = b29;
            				}
            				break;
            				case (int)1: {
HXLINE( 608)					 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 608)					 ::iterMagic::ArrIntImg a26 = arrI3;
HXDLIN( 608)					{
HXLINE( 608)						a26->width = width3;
HXDLIN( 608)						a26->height = height3;
HXDLIN( 608)						a26->data = ::Array_obj< int >::__new(0);
HXDLIN( 608)						a26->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 608)						{
HXLINE( 608)							int _g64 = 0;
HXDLIN( 608)							int _g65 = a26->length;
HXDLIN( 608)							while((_g64 < _g65)){
HXLINE( 608)								_g64 = (_g64 + 1);
HXDLIN( 608)								int i18 = (_g64 - 1);
HXDLIN( 608)								a26->data[i18] = 0;
            							}
            						}
            					}
HXDLIN( 608)					undoImage10 = a26;
            				}
            				break;
            				case (int)2: {
HXLINE( 608)					 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 608)					 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN( 608)					{
HXLINE( 608)						b30->width = width3;
HXDLIN( 608)						b30->height = height3;
HXDLIN( 608)						b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 608)						int size3 = (b30->length * 4);
HXDLIN( 608)						b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 608)						{
HXLINE( 608)							int _g66 = 0;
HXDLIN( 608)							int _g67 = b30->length;
HXDLIN( 608)							while((_g66 < _g67)){
HXLINE( 608)								_g66 = (_g66 + 1);
HXDLIN( 608)								int i19 = (_g66 - 1);
HXDLIN( 608)								{
HXLINE( 608)									 ::haxe::io::ArrayBufferViewImpl this101 = b30->data;
HXDLIN( 608)									bool undoImage11;
HXDLIN( 608)									if ((i19 >= 0)) {
HXLINE( 608)										undoImage11 = (i19 < (this101->byteLength >> 2));
            									}
            									else {
HXLINE( 608)										undoImage11 = false;
            									}
HXDLIN( 608)									if (undoImage11) {
HXLINE( 608)										 ::haxe::io::Bytes _this3 = this101->bytes;
HXDLIN( 608)										int pos3 = ((i19 << 2) + this101->byteOffset);
HXDLIN( 608)										_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 608)										_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 608)										_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 608)										_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 608)					undoImage10 = b30;
            				}
            				break;
            				case (int)3: {
HXLINE( 608)					 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 608)					 ::iterMagic::VecIntImg v8 = vec3;
HXDLIN( 608)					{
HXLINE( 608)						v8->width = width3;
HXDLIN( 608)						v8->height = height3;
HXDLIN( 608)						v8->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 608)						v8->data = ::Array_obj< int >::__new(v8->length);
HXDLIN( 608)						{
HXLINE( 608)							int _g68 = 0;
HXDLIN( 608)							int _g69 = v8->length;
HXDLIN( 608)							while((_g68 < _g69)){
HXLINE( 608)								_g68 = (_g68 + 1);
HXDLIN( 608)								int i20 = (_g68 - 1);
HXDLIN( 608)								v8->data->__unsafe_set(i20,0);
            							}
            						}
            					}
HXDLIN( 608)					undoImage10 = v8;
            				}
            				break;
            				case (int)4: {
HXLINE( 608)					 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 608)					 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN( 608)					{
HXLINE( 608)						b31->width = width3;
HXDLIN( 608)						b31->height = height3;
HXDLIN( 608)						b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 608)						b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 608)						{
HXLINE( 608)							int len7 = b31->length;
HXDLIN( 608)							 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN( 608)							if (::hx::IsNull( d3->head )) {
HXLINE( 608)								int _g70 = 0;
HXDLIN( 608)								int _g71 = len7;
HXDLIN( 608)								while((_g70 < _g71)){
HXLINE( 608)									_g70 = (_g70 + 1);
HXDLIN( 608)									int i21 = (_g70 - 1);
HXDLIN( 608)									d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            								}
            							}
            							else {
HXLINE( 608)								int _g72 = 0;
HXDLIN( 608)								int _g73 = len7;
HXDLIN( 608)								while((_g72 < _g73)){
HXLINE( 608)									_g72 = (_g72 + 1);
HXDLIN( 608)									int i22 = (_g72 - 1);
HXDLIN( 608)									{
HXLINE( 608)										 ::haxe::ds::GenericCell_Int l3 = b31->data->head;
HXDLIN( 608)										 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 608)										{
HXLINE( 608)											int _g74 = 0;
HXDLIN( 608)											int _g75 = i22;
HXDLIN( 608)											while((_g74 < _g75)){
HXLINE( 608)												_g74 = (_g74 + 1);
HXDLIN( 608)												int i23 = (_g74 - 1);
HXLINE( 345)												prev3 = l3;
HXLINE( 346)												l3 = l3->next;
            											}
            										}
HXLINE( 608)										if (::hx::IsNull( prev3 )) {
HXLINE( 608)											b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 608)											l3 = null();
            										}
            										else {
HXLINE( 608)											prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 608)											l3 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 608)					undoImage10 = b31;
            				}
            				break;
            			}
HXDLIN( 608)			this100->image = undoImage10;
HXDLIN( 608)			this100->width = width3;
HXDLIN( 608)			this100->height = height3;
HXDLIN( 608)			this100->imageType = ( (int)(imageType3) );
HXDLIN( 608)			undoImage9 = this100;
HXDLIN( 608)			{
HXLINE( 608)				int rectLeft3 = xIter33->start;
HXDLIN( 608)				int rectTop3 = yIter33->start;
HXDLIN( 608)				int rectRight3 = xIter33->max;
HXDLIN( 608)				bool forceClear3 = false;
HXDLIN( 608)				{
HXLINE( 608)					int _g76 = rectTop3;
HXDLIN( 608)					int _g77 = yIter33->max;
HXDLIN( 608)					while((_g76 < _g77)){
HXLINE( 608)						_g76 = (_g76 + 1);
HXDLIN( 608)						int dy5 = (_g76 - 1);
HXDLIN( 608)						{
HXLINE( 608)							int _g78 = rectLeft3;
HXDLIN( 608)							int _g79 = rectRight3;
HXDLIN( 608)							while((_g78 < _g79)){
HXLINE( 608)								_g78 = (_g78 + 1);
HXDLIN( 608)								int dx5 = (_g78 - 1);
HXDLIN( 608)								::Dynamic this102 = pixelImage->image;
HXDLIN( 608)								int index15;
HXDLIN( 608)								if (pixelImage->useVirtualPos) {
HXLINE( 608)									index15 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx5) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 608)									index15 = ::Std_obj::_hx_int(( (Float)(((dy5 * pixelImage->width) + dx5)) ));
            								}
HXDLIN( 608)								int c16 = ::iterMagic::Iimg_obj::get(this102,index15);
HXDLIN( 608)								int col3;
HXDLIN( 608)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 608)									col3 = ((((((c16 >> 24) & 255) << 24) | ((c16 & 255) << 16)) | (((c16 >> 8) & 255) << 8)) | ((c16 >> 16) & 255));
            								}
            								else {
HXLINE( 608)									col3 = c16;
            								}
HXDLIN( 608)								bool _hx_tmp24;
HXDLIN( 608)								if (pixelImage->useMask) {
HXLINE( 608)									_hx_tmp24 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 608)									_hx_tmp24 = false;
            								}
HXDLIN( 608)								if (_hx_tmp24) {
HXLINE( 608)									 ::pi_xy::ImageStruct this103 = pixelImage->mask;
HXDLIN( 608)									::Dynamic this104 = this103->image;
HXDLIN( 608)									int index16;
HXDLIN( 608)									if (this103->useVirtualPos) {
HXLINE( 608)										index16 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this103->virtualY) * ( (Float)(this103->width) )) + dx5) - this103->virtualX));
            									}
            									else {
HXLINE( 608)										index16 = ::Std_obj::_hx_int(( (Float)(((dy5 * this103->width) + dx5)) ));
            									}
HXDLIN( 608)									int c17 = ::iterMagic::Iimg_obj::get(this104,index16);
HXDLIN( 608)									int v9;
HXDLIN( 608)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 608)										v9 = ((((((c17 >> 24) & 255) << 24) | ((c17 & 255) << 16)) | (((c17 >> 8) & 255) << 8)) | ((c17 >> 16) & 255));
            									}
            									else {
HXLINE( 608)										v9 = c17;
            									}
HXDLIN( 608)									int maskPixel3 = v9;
HXDLIN( 608)									int this105 = col3;
HXDLIN( 608)									if ((maskPixel3 == 0)) {
HXLINE( 608)										col3 = this105;
            									}
            									else {
HXLINE( 608)										Float m03;
HXDLIN( 608)										int this106 = ((maskPixel3 >> 24) & 255);
HXDLIN( 608)										if ((this106 == 0)) {
HXLINE( 608)											m03 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											m03 = (( (Float)(this106) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float m13;
HXDLIN( 608)										int this107 = ((maskPixel3 >> 16) & 255);
HXDLIN( 608)										if ((this107 == 0)) {
HXLINE( 608)											m13 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											m13 = (( (Float)(this107) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float m23;
HXDLIN( 608)										int this108 = ((maskPixel3 >> 8) & 255);
HXDLIN( 608)										if ((this108 == 0)) {
HXLINE( 608)											m23 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											m23 = (( (Float)(this108) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float m33;
HXDLIN( 608)										int this109 = (maskPixel3 & 255);
HXDLIN( 608)										if ((this109 == 0)) {
HXLINE( 608)											m33 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											m33 = (( (Float)(this109) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this105 >> 24) & 255)) )));
HXDLIN( 608)										int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this105 >> 16) & 255)) )));
HXDLIN( 608)										int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this105 >> 8) & 255)) )));
HXDLIN( 608)										int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this105 & 255)) )));
HXDLIN( 608)										col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 608)								if ((col3 != 0)) {
HXLINE( 608)									int x13 = (dx5 - rectLeft3);
HXDLIN( 608)									int y13 = (dy5 - rectTop3);
HXDLIN( 608)									int c18 = col3;
HXDLIN( 608)									bool _hx_tmp25;
HXDLIN( 608)									if ((((c18 >> 24) & 255) < 254)) {
HXLINE( 608)										_hx_tmp25 = undoImage9->transparent;
            									}
            									else {
HXLINE( 608)										_hx_tmp25 = false;
            									}
HXDLIN( 608)									if (_hx_tmp25) {
HXLINE( 608)										int location6;
HXDLIN( 608)										if (undoImage9->useVirtualPos) {
HXLINE( 608)											location6 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x13) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 608)											location6 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage9->width) + x13)) ));
            										}
HXDLIN( 608)										int this110 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 608)										int this111;
HXDLIN( 608)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 608)											this111 = ((((((this110 >> 24) & 255) << 24) | ((this110 & 255) << 16)) | (((this110 >> 8) & 255) << 8)) | ((this110 >> 16) & 255));
            										}
            										else {
HXLINE( 608)											this111 = this110;
            										}
HXDLIN( 608)										Float a111;
HXDLIN( 608)										int this112 = ((this111 >> 24) & 255);
HXDLIN( 608)										if ((this112 == 0)) {
HXLINE( 608)											a111 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											a111 = (( (Float)(this112) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float r16;
HXDLIN( 608)										int this113 = ((this111 >> 16) & 255);
HXDLIN( 608)										if ((this113 == 0)) {
HXLINE( 608)											r16 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											r16 = (( (Float)(this113) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float g16;
HXDLIN( 608)										int this114 = ((this111 >> 8) & 255);
HXDLIN( 608)										if ((this114 == 0)) {
HXLINE( 608)											g16 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											g16 = (( (Float)(this114) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float b112;
HXDLIN( 608)										int this115 = (this111 & 255);
HXDLIN( 608)										if ((this115 == 0)) {
HXLINE( 608)											b112 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											b112 = (( (Float)(this115) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float a27;
HXDLIN( 608)										int this116 = ((col3 >> 24) & 255);
HXDLIN( 608)										if ((this116 == 0)) {
HXLINE( 608)											a27 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											a27 = (( (Float)(this116) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float r26;
HXDLIN( 608)										int this117 = ((col3 >> 16) & 255);
HXDLIN( 608)										if ((this117 == 0)) {
HXLINE( 608)											r26 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											r26 = (( (Float)(this117) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float g26;
HXDLIN( 608)										int this118 = ((col3 >> 8) & 255);
HXDLIN( 608)										if ((this118 == 0)) {
HXLINE( 608)											g26 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											g26 = (( (Float)(this118) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float b210;
HXDLIN( 608)										int this119 = (col3 & 255);
HXDLIN( 608)										if ((this119 == 0)) {
HXLINE( 608)											b210 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											b210 = (( (Float)(this119) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float a36 = (a111 * (( (Float)(1) ) - a27));
HXDLIN( 608)										int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a27))));
HXDLIN( 608)										int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a27))));
HXDLIN( 608)										int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a36) + (b210 * a27))));
HXDLIN( 608)										int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a27)));
HXDLIN( 608)										int blended6 = ((((a28 << 24) | (r8 << 16)) | (g8 << 8)) | b32);
HXDLIN( 608)										{
HXLINE( 608)											int _hx_tmp26;
HXDLIN( 608)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 608)												_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            											}
            											else {
HXLINE( 608)												_hx_tmp26 = blended6;
            											}
HXDLIN( 608)											::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            										}
            									}
            									else {
HXLINE( 608)										::Dynamic this120 = undoImage9->image;
HXDLIN( 608)										int index17;
HXDLIN( 608)										if (undoImage9->useVirtualPos) {
HXLINE( 608)											index17 = ::Std_obj::_hx_int(((((( (Float)(y13) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x13) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 608)											index17 = ::Std_obj::_hx_int(( (Float)(((y13 * undoImage9->width) + x13)) ));
            										}
HXDLIN( 608)										int _hx_tmp27;
HXDLIN( 608)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 608)											_hx_tmp27 = ((((((c18 >> 24) & 255) << 24) | ((c18 & 255) << 16)) | (((c18 >> 8) & 255) << 8)) | ((c18 >> 16) & 255));
            										}
            										else {
HXLINE( 608)											_hx_tmp27 = c18;
            										}
HXDLIN( 608)										::iterMagic::Iimg_obj::set(this120,index17,_hx_tmp27);
            									}
            								}
            								else {
HXLINE( 608)									if (forceClear3) {
HXLINE( 608)										::Dynamic this121 = undoImage9->image;
HXDLIN( 608)										int x14 = (dx5 - rectLeft3);
HXDLIN( 608)										int y14 = (dy5 - rectTop3);
HXDLIN( 608)										int index18;
HXDLIN( 608)										if (undoImage9->useVirtualPos) {
HXLINE( 608)											index18 = ::Std_obj::_hx_int(((((( (Float)(y14) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x14) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 608)											index18 = ::Std_obj::_hx_int(( (Float)(((y14 * undoImage9->width) + x14)) ));
            										}
HXDLIN( 608)										::iterMagic::Iimg_obj::set(this121,index18,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 608)		bool found3 = false;
HXDLIN( 608)		Float s3 = ((Float)0.);
HXDLIN( 608)		Float t3 = ((Float)0.);
HXDLIN( 608)		Float sxx3 = ((Float)0.);
HXDLIN( 608)		Float txx3 = ((Float)0.);
HXDLIN( 608)		{
HXLINE( 608)			int _g_min6 = xIter33->start;
HXDLIN( 608)			int _g_max6 = xIter33->max;
HXDLIN( 608)			while((_g_min6 < _g_max6)){
HXLINE( 608)				_g_min6 = (_g_min6 + 1);
HXDLIN( 608)				int x15 = (_g_min6 - 1);
HXLINE(  60)				sxx3 = (sx3 * ( (Float)(x15) ));
HXLINE(  61)				txx3 = (tx3 * ( (Float)(x15) ));
HXLINE(  62)				found3 = false;
HXLINE( 608)				{
HXLINE( 608)					int _g_min7 = yIter33->start;
HXDLIN( 608)					int _g_max7 = yIter33->max;
HXDLIN( 608)					while((_g_min7 < _g_max7)){
HXLINE( 608)						_g_min7 = (_g_min7 + 1);
HXDLIN( 608)						int y15 = (_g_min7 - 1);
HXLINE(  64)						s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y15) )));
HXLINE(  65)						t3 = ((t03 + txx3) + (ty3 * ( (Float)(y15) )));
HXLINE( 608)						bool _hx_tmp28;
HXDLIN( 608)						if (!((s3 <= 0))) {
HXLINE( 608)							_hx_tmp28 = (t3 <= 0);
            						}
            						else {
HXLINE( 608)							_hx_tmp28 = true;
            						}
HXDLIN( 608)						if (_hx_tmp28) {
HXLINE( 608)							if (found3) {
HXLINE( 608)								goto _hx_goto_800;
            							}
            						}
            						else {
HXLINE( 608)							if (((s3 + t3) < A3)) {
HXLINE( 608)								{
HXLINE( 608)									int c19 = color;
HXDLIN( 608)									bool _hx_tmp29;
HXDLIN( 608)									if ((((c19 >> 24) & 255) < 254)) {
HXLINE( 608)										_hx_tmp29 = pixelImage->transparent;
            									}
            									else {
HXLINE( 608)										_hx_tmp29 = false;
            									}
HXDLIN( 608)									if (_hx_tmp29) {
HXLINE( 608)										int location7;
HXDLIN( 608)										if (pixelImage->useVirtualPos) {
HXLINE( 608)											location7 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x15) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 608)											location7 = ::Std_obj::_hx_int(( (Float)(((y15 * pixelImage->width) + x15)) ));
            										}
HXDLIN( 608)										int this122 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN( 608)										int this123;
HXDLIN( 608)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 608)											this123 = ((((((this122 >> 24) & 255) << 24) | ((this122 & 255) << 16)) | (((this122 >> 8) & 255) << 8)) | ((this122 >> 16) & 255));
            										}
            										else {
HXLINE( 608)											this123 = this122;
            										}
HXDLIN( 608)										Float a112;
HXDLIN( 608)										int this124 = ((this123 >> 24) & 255);
HXDLIN( 608)										if ((this124 == 0)) {
HXLINE( 608)											a112 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											a112 = (( (Float)(this124) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float r17;
HXDLIN( 608)										int this125 = ((this123 >> 16) & 255);
HXDLIN( 608)										if ((this125 == 0)) {
HXLINE( 608)											r17 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											r17 = (( (Float)(this125) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float g17;
HXDLIN( 608)										int this126 = ((this123 >> 8) & 255);
HXDLIN( 608)										if ((this126 == 0)) {
HXLINE( 608)											g17 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											g17 = (( (Float)(this126) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float b113;
HXDLIN( 608)										int this127 = (this123 & 255);
HXDLIN( 608)										if ((this127 == 0)) {
HXLINE( 608)											b113 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											b113 = (( (Float)(this127) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float a29;
HXDLIN( 608)										int this128 = ((color >> 24) & 255);
HXDLIN( 608)										if ((this128 == 0)) {
HXLINE( 608)											a29 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											a29 = (( (Float)(this128) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float r27;
HXDLIN( 608)										int this129 = ((color >> 16) & 255);
HXDLIN( 608)										if ((this129 == 0)) {
HXLINE( 608)											r27 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											r27 = (( (Float)(this129) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float g27;
HXDLIN( 608)										int this130 = ((color >> 8) & 255);
HXDLIN( 608)										if ((this130 == 0)) {
HXLINE( 608)											g27 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											g27 = (( (Float)(this130) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float b211;
HXDLIN( 608)										int this131 = (color & 255);
HXDLIN( 608)										if ((this131 == 0)) {
HXLINE( 608)											b211 = ((Float)0.);
            										}
            										else {
HXLINE( 608)											b211 = (( (Float)(this131) ) / ( (Float)(255) ));
            										}
HXDLIN( 608)										Float a37 = (a112 * (( (Float)(1) ) - a29));
HXDLIN( 608)										int r9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r17 * a37) + (r27 * a29))));
HXDLIN( 608)										int g9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g17 * a37) + (g27 * a29))));
HXDLIN( 608)										int b33 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a37) + (b211 * a29))));
HXDLIN( 608)										int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a29)));
HXDLIN( 608)										int blended7 = ((((a30 << 24) | (r9 << 16)) | (g9 << 8)) | b33);
HXDLIN( 608)										{
HXLINE( 608)											int _hx_tmp30;
HXDLIN( 608)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 608)												_hx_tmp30 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            											}
            											else {
HXLINE( 608)												_hx_tmp30 = blended7;
            											}
HXDLIN( 608)											::iterMagic::Iimg_obj::set(pixelImage->image,location7,_hx_tmp30);
            										}
            									}
            									else {
HXLINE( 608)										::Dynamic this132 = pixelImage->image;
HXDLIN( 608)										int index19;
HXDLIN( 608)										if (pixelImage->useVirtualPos) {
HXLINE( 608)											index19 = ::Std_obj::_hx_int(((((( (Float)(y15) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x15) - pixelImage->virtualX));
            										}
            										else {
HXLINE( 608)											index19 = ::Std_obj::_hx_int(( (Float)(((y15 * pixelImage->width) + x15)) ));
            										}
HXDLIN( 608)										int _hx_tmp31;
HXDLIN( 608)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 608)											_hx_tmp31 = ((((((c19 >> 24) & 255) << 24) | ((c19 & 255) << 16)) | (((c19 >> 8) & 255) << 8)) | ((c19 >> 16) & 255));
            										}
            										else {
HXLINE( 608)											_hx_tmp31 = c19;
            										}
HXDLIN( 608)										::iterMagic::Iimg_obj::set(this132,index19,_hx_tmp31);
            									}
            								}
HXLINE(  73)								found3 = true;
            							}
            							else {
HXLINE( 608)								if (found3) {
HXLINE( 608)									goto _hx_goto_800;
            								}
            							}
            						}
            					}
            					_hx_goto_800:;
            				}
            			}
            		}
HXDLIN( 608)		 ::pi_xy::algo::HitTri hitTriBottom;
HXDLIN( 608)		if ((hasHit == true)) {
HXLINE( 608)			 ::pi_xy::algo::HitTri v10 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,px,py,bx7,by7,cx7,cy7,true);
HXDLIN( 608)			if (hasUndo3) {
HXLINE( 608)				v10->undoImage = undoImage9;
HXDLIN( 608)				v10->undoX = xIter33->start;
HXDLIN( 608)				v10->undoY = yIter33->start;
            			}
HXDLIN( 608)			hitTriBottom = v10;
            		}
            		else {
HXLINE( 608)			hitTriBottom = null();
            		}
HXLINE( 610)		if (hasHit) {
HXLINE( 611)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(2)->init(0,hitTriTop)->init(1,hitTriBottom));
HXLINE( 612)			if (::hx::IsNotNull( hitQuad )) {
HXLINE( 613)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXLINE( 614)			hitArr->triArr->push(hitQuad->triBCD);
HXLINE( 615)			return hitArr;
            		}
            		else {
HXLINE( 617)			return null();
            		}
HXLINE( 610)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC10(ArrowPixel_Fields__obj,fillLineFixedArrowBoth,return )

 ::pi_xy::algo::HitTriArray ArrowPixel_Fields__obj::fillSoftLineFixedArrowBoth( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float arrowWidth,Float arrowHeight,Float thick,int color,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_hasHit){
            		Float soft = __o_soft.Default(((Float)40.));
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_63f36ef650858c14_627_fillSoftLineFixedArrowBoth)
HXLINE( 628)		Float goldenRatio = ((Float)1.61803398875);
HXLINE( 629)		Float o = (qy - py);
HXLINE( 630)		Float a = (qx - px);
HXLINE( 631)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE( 632)		Float theta = ::Math_obj::atan2(o,a);
HXLINE( 633)		Float thicker;
HXDLIN( 633)		if ((arrowWidth > (thick * ((Float)1.1)))) {
HXLINE( 633)			thicker = arrowWidth;
            		}
            		else {
HXLINE( 633)			thicker = ((( (Float)(2) ) * thick) * goldenRatio);
            		}
HXLINE( 639)		Float sin = ::Math_obj::sin(theta);
HXLINE( 640)		Float cos = ::Math_obj::cos(theta);
HXLINE( 641)		Float radius = (thick / ( (Float)(2) ));
HXLINE( 642)		Float radius2 = (thicker / ( (Float)(2) ));
HXLINE( 643)		Float h2;
HXDLIN( 643)		if ((arrowHeight < (h * ((Float)1.1)))) {
HXLINE( 643)			h2 = (h - arrowHeight);
            		}
            		else {
HXLINE( 643)			h2 = (h / goldenRatio);
            		}
HXLINE( 648)		Float hSmall = (h - h2);
HXLINE( 650)		Float px_ = hSmall;
HXLINE( 651)		Float py_ = ((Float)0.);
HXLINE( 652)		Float temp = ((Float)0.);
HXLINE( 654)		temp = (px + ((px_ * cos) - (py_ * sin)));
HXLINE( 655)		py_ = (py + ((py_ * cos) + (px_ * sin)));
HXLINE( 656)		px_ = temp;
HXLINE( 658)		Float h1 = (h2 - hSmall);
HXDLIN( 658)		Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 658)		Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 658)		Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 658)		Float dx = ((Float)0.1);
HXDLIN( 658)		Float dy = radius1;
HXDLIN( 658)		Float cx = h1;
HXDLIN( 658)		Float cy = radius1;
HXDLIN( 658)		Float bx = h1;
HXDLIN( 658)		Float by = -(radius1);
HXDLIN( 658)		Float ax = ((Float)0.1);
HXDLIN( 658)		Float ay = -(radius1);
HXDLIN( 658)		Float temp1 = ((Float)0.);
HXLINE(  82)		temp1 = (px_ + ((ax * cos1) - (ay * sin1)));
HXLINE(  83)		ay = (py_ + ((ay * cos1) + (ax * sin1)));
HXLINE(  84)		ax = temp1;
HXLINE(  86)		temp1 = (px_ + ((bx * cos1) - (by * sin1)));
HXLINE(  87)		by = (py_ + ((by * cos1) + (bx * sin1)));
HXLINE(  88)		bx = temp1;
HXLINE(  90)		temp1 = (px_ + ((cx * cos1) - (cy * sin1)));
HXLINE(  91)		cy = (py_ + ((cy * cos1) + (cx * sin1)));
HXLINE(  92)		cx = temp1;
HXLINE(  94)		temp1 = (px_ + ((dx * cos1) - (dy * sin1)));
HXLINE(  95)		dy = (py_ + ((dy * cos1) + (dx * sin1)));
HXLINE(  96)		dx = temp1;
HXLINE( 658)		{
HXLINE( 658)			bool hasUndo = true;
HXDLIN( 658)			int aA = ((color >> 24) & 255);
HXDLIN( 658)			int rA = ((color >> 16) & 255);
HXDLIN( 658)			int gA = ((color >> 8) & 255);
HXDLIN( 658)			int bA = (color & 255);
HXDLIN( 658)			Float bcx = (bx - dx);
HXDLIN( 658)			Float bcy = (by - dy);
HXDLIN( 658)			Float acx = (ax - dx);
HXDLIN( 658)			Float acy = (ay - dy);
HXDLIN( 658)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 658)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 658)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 658)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 658)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 658)			if ((ax > bx)) {
HXLINE( 658)				if ((ax > dx)) {
HXLINE( 658)					int min;
HXDLIN( 658)					if ((bx > dx)) {
HXLINE( 658)						min = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 658)						min = ::Math_obj::floor(bx);
            					}
HXDLIN( 658)					int ii_min = min;
HXDLIN( 658)					int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 658)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXLINE( 658)					int ii_min1 = ::Math_obj::floor(bx);
HXDLIN( 658)					int ii_max1 = ::Math_obj::ceil(dx);
HXDLIN( 658)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXLINE( 658)				if ((bx > dx)) {
HXLINE( 658)					int min1;
HXDLIN( 658)					if ((ax > dx)) {
HXLINE( 658)						min1 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 658)						min1 = ::Math_obj::ceil(ax);
            					}
HXDLIN( 658)					int ii_min2 = min1;
HXDLIN( 658)					int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN( 658)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXLINE( 658)					int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 658)					int ii_max3 = ::Math_obj::ceil(dx);
HXDLIN( 658)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN( 658)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 658)			if ((ay > by)) {
HXLINE( 658)				if ((ay > dy)) {
HXLINE( 658)					int min2;
HXDLIN( 658)					if ((by > dy)) {
HXLINE( 658)						min2 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 658)						min2 = ::Math_obj::floor(by);
            					}
HXDLIN( 658)					int ii_min4 = min2;
HXDLIN( 658)					int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 658)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXLINE( 658)					int ii_min5 = ::Math_obj::floor(by);
HXDLIN( 658)					int ii_max5 = ::Math_obj::ceil(dy);
HXDLIN( 658)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXLINE( 658)				if ((by > dy)) {
HXLINE( 658)					int min3;
HXDLIN( 658)					if ((ay > dy)) {
HXLINE( 658)						min3 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 658)						min3 = ::Math_obj::ceil(ay);
            					}
HXDLIN( 658)					int ii_min6 = min3;
HXDLIN( 658)					int ii_max6 = ::Math_obj::ceil(by);
HXDLIN( 658)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXLINE( 658)					int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 658)					int ii_max7 = ::Math_obj::ceil(dy);
HXDLIN( 658)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN( 658)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 658)			if (hasUndo) {
HXLINE( 658)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 658)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 658)				 ::Dynamic imageType = null();
HXDLIN( 658)				 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 658)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 658)				::Dynamic undoImage1;
HXDLIN( 658)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXLINE( 658)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 658)						 ::iterMagic::BytesImg b = byt;
HXDLIN( 658)						{
HXLINE( 658)							b->width = width;
HXDLIN( 658)							b->height = height;
HXDLIN( 658)							b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 658)							b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 658)							{
HXLINE( 658)								int len = b->length;
HXDLIN( 658)								int w = 0;
HXDLIN( 658)								{
HXLINE( 658)									int _g = 0;
HXDLIN( 658)									int _g1 = b->height;
HXDLIN( 658)									while((_g < _g1)){
HXLINE( 658)										_g = (_g + 1);
HXDLIN( 658)										int y = (_g - 1);
HXDLIN( 658)										{
HXLINE( 658)											int _g2 = 0;
HXDLIN( 658)											int _g3 = b->width;
HXDLIN( 658)											while((_g2 < _g3)){
HXLINE( 658)												_g2 = (_g2 + 1);
HXDLIN( 658)												int x = (_g2 - 1);
HXDLIN( 658)												{
HXLINE( 658)													w = (w + 1);
HXDLIN( 658)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 658)												{
HXLINE( 658)													w = (w + 1);
HXDLIN( 658)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 658)												{
HXLINE( 658)													w = (w + 1);
HXDLIN( 658)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 658)												{
HXLINE( 658)													w = (w + 1);
HXDLIN( 658)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 658)						undoImage1 = b;
            					}
            					break;
            					case (int)1: {
HXLINE( 658)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 658)						 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 658)						{
HXLINE( 658)							a1->width = width;
HXDLIN( 658)							a1->height = height;
HXDLIN( 658)							a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 658)							a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 658)							{
HXLINE( 658)								int _g4 = 0;
HXDLIN( 658)								int _g5 = a1->length;
HXDLIN( 658)								while((_g4 < _g5)){
HXLINE( 658)									_g4 = (_g4 + 1);
HXDLIN( 658)									int i = (_g4 - 1);
HXDLIN( 658)									a1->data[i] = 0;
            								}
            							}
            						}
HXDLIN( 658)						undoImage1 = a1;
            					}
            					break;
            					case (int)2: {
HXLINE( 658)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 658)						 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 658)						{
HXLINE( 658)							b1->width = width;
HXDLIN( 658)							b1->height = height;
HXDLIN( 658)							b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 658)							int size = (b1->length * 4);
HXDLIN( 658)							b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 658)							{
HXLINE( 658)								int _g6 = 0;
HXDLIN( 658)								int _g7 = b1->length;
HXDLIN( 658)								while((_g6 < _g7)){
HXLINE( 658)									_g6 = (_g6 + 1);
HXDLIN( 658)									int i1 = (_g6 - 1);
HXDLIN( 658)									{
HXLINE( 658)										 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN( 658)										bool undoImage2;
HXDLIN( 658)										if ((i1 >= 0)) {
HXLINE( 658)											undoImage2 = (i1 < (this2->byteLength >> 2));
            										}
            										else {
HXLINE( 658)											undoImage2 = false;
            										}
HXDLIN( 658)										if (undoImage2) {
HXLINE( 658)											 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 658)											int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 658)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 658)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 658)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 658)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 658)						undoImage1 = b1;
            					}
            					break;
            					case (int)3: {
HXLINE( 658)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 658)						 ::iterMagic::VecIntImg v = vec;
HXDLIN( 658)						{
HXLINE( 658)							v->width = width;
HXDLIN( 658)							v->height = height;
HXDLIN( 658)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 658)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 658)							{
HXLINE( 658)								int _g8 = 0;
HXDLIN( 658)								int _g9 = v->length;
HXDLIN( 658)								while((_g8 < _g9)){
HXLINE( 658)									_g8 = (_g8 + 1);
HXDLIN( 658)									int i2 = (_g8 - 1);
HXDLIN( 658)									v->data->__unsafe_set(i2,0);
            								}
            							}
            						}
HXDLIN( 658)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXLINE( 658)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 658)						 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 658)						{
HXLINE( 658)							b2->width = width;
HXDLIN( 658)							b2->height = height;
HXDLIN( 658)							b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 658)							b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 658)							{
HXLINE( 658)								int len1 = b2->length;
HXDLIN( 658)								 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 658)								if (::hx::IsNull( d->head )) {
HXLINE( 658)									int _g10 = 0;
HXDLIN( 658)									int _g11 = len1;
HXDLIN( 658)									while((_g10 < _g11)){
HXLINE( 658)										_g10 = (_g10 + 1);
HXDLIN( 658)										int i3 = (_g10 - 1);
HXDLIN( 658)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXLINE( 658)									int _g12 = 0;
HXDLIN( 658)									int _g13 = len1;
HXDLIN( 658)									while((_g12 < _g13)){
HXLINE( 658)										_g12 = (_g12 + 1);
HXDLIN( 658)										int i4 = (_g12 - 1);
HXDLIN( 658)										{
HXLINE( 658)											 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 658)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 658)											{
HXLINE( 658)												int _g14 = 0;
HXDLIN( 658)												int _g15 = i4;
HXDLIN( 658)												while((_g14 < _g15)){
HXLINE( 658)													_g14 = (_g14 + 1);
HXDLIN( 658)													int i5 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE( 658)											if (::hx::IsNull( prev )) {
HXLINE( 658)												b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 658)												l = null();
            											}
            											else {
HXLINE( 658)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 658)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 658)						undoImage1 = b2;
            					}
            					break;
            				}
HXDLIN( 658)				this1->image = undoImage1;
HXDLIN( 658)				this1->width = width;
HXDLIN( 658)				this1->height = height;
HXDLIN( 658)				this1->imageType = ( (int)(imageType) );
HXDLIN( 658)				undoImage = this1;
HXDLIN( 658)				{
HXLINE( 658)					int rectLeft = xIter3->start;
HXDLIN( 658)					int rectTop = yIter3->start;
HXDLIN( 658)					int rectRight = xIter3->max;
HXDLIN( 658)					bool forceClear = false;
HXDLIN( 658)					{
HXLINE( 658)						int _g16 = rectTop;
HXDLIN( 658)						int _g17 = yIter3->max;
HXDLIN( 658)						while((_g16 < _g17)){
HXLINE( 658)							_g16 = (_g16 + 1);
HXDLIN( 658)							int dy1 = (_g16 - 1);
HXDLIN( 658)							{
HXLINE( 658)								int _g18 = rectLeft;
HXDLIN( 658)								int _g19 = rectRight;
HXDLIN( 658)								while((_g18 < _g19)){
HXLINE( 658)									_g18 = (_g18 + 1);
HXDLIN( 658)									int dx1 = (_g18 - 1);
HXDLIN( 658)									::Dynamic this3 = pixelImage->image;
HXDLIN( 658)									int index;
HXDLIN( 658)									if (pixelImage->useVirtualPos) {
HXLINE( 658)										index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 658)										index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            									}
HXDLIN( 658)									int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN( 658)									int col;
HXDLIN( 658)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 658)										col = c;
            									}
HXDLIN( 658)									bool _hx_tmp;
HXDLIN( 658)									if (pixelImage->useMask) {
HXLINE( 658)										_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE( 658)										_hx_tmp = false;
            									}
HXDLIN( 658)									if (_hx_tmp) {
HXLINE( 658)										 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN( 658)										::Dynamic this5 = this4->image;
HXDLIN( 658)										int index1;
HXDLIN( 658)										if (this4->useVirtualPos) {
HXLINE( 658)											index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            										}
            										else {
HXLINE( 658)											index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            										}
HXDLIN( 658)										int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN( 658)										int v1;
HXDLIN( 658)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)											v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXLINE( 658)											v1 = c1;
            										}
HXDLIN( 658)										int maskPixel = v1;
HXDLIN( 658)										int this6 = col;
HXDLIN( 658)										if ((maskPixel == 0)) {
HXLINE( 658)											col = this6;
            										}
            										else {
HXLINE( 658)											Float m0;
HXDLIN( 658)											int this7 = ((maskPixel >> 24) & 255);
HXDLIN( 658)											if ((this7 == 0)) {
HXLINE( 658)												m0 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float m1;
HXDLIN( 658)											int this8 = ((maskPixel >> 16) & 255);
HXDLIN( 658)											if ((this8 == 0)) {
HXLINE( 658)												m1 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float m2;
HXDLIN( 658)											int this9 = ((maskPixel >> 8) & 255);
HXDLIN( 658)											if ((this9 == 0)) {
HXLINE( 658)												m2 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float m3;
HXDLIN( 658)											int this10 = (maskPixel & 255);
HXDLIN( 658)											if ((this10 == 0)) {
HXLINE( 658)												m3 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 658)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 658)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 658)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 658)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 658)									if ((col != 0)) {
HXLINE( 658)										int x1 = (dx1 - rectLeft);
HXDLIN( 658)										int y1 = (dy1 - rectTop);
HXDLIN( 658)										int c2 = col;
HXDLIN( 658)										bool _hx_tmp1;
HXDLIN( 658)										if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 658)											_hx_tmp1 = undoImage->transparent;
            										}
            										else {
HXLINE( 658)											_hx_tmp1 = false;
            										}
HXDLIN( 658)										if (_hx_tmp1) {
HXLINE( 658)											int location;
HXDLIN( 658)											if (undoImage->useVirtualPos) {
HXLINE( 658)												location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXLINE( 658)												location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 658)											int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 658)											int this12;
HXDLIN( 658)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)												this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            											}
            											else {
HXLINE( 658)												this12 = this11;
            											}
HXDLIN( 658)											Float a11;
HXDLIN( 658)											int this13 = ((this12 >> 24) & 255);
HXDLIN( 658)											if ((this13 == 0)) {
HXLINE( 658)												a11 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float r1;
HXDLIN( 658)											int this14 = ((this12 >> 16) & 255);
HXDLIN( 658)											if ((this14 == 0)) {
HXLINE( 658)												r1 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float g1;
HXDLIN( 658)											int this15 = ((this12 >> 8) & 255);
HXDLIN( 658)											if ((this15 == 0)) {
HXLINE( 658)												g1 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float b11;
HXDLIN( 658)											int this16 = (this12 & 255);
HXDLIN( 658)											if ((this16 == 0)) {
HXLINE( 658)												b11 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float a2;
HXDLIN( 658)											int this17 = ((col >> 24) & 255);
HXDLIN( 658)											if ((this17 == 0)) {
HXLINE( 658)												a2 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float r2;
HXDLIN( 658)											int this18 = ((col >> 16) & 255);
HXDLIN( 658)											if ((this18 == 0)) {
HXLINE( 658)												r2 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float g2;
HXDLIN( 658)											int this19 = ((col >> 8) & 255);
HXDLIN( 658)											if ((this19 == 0)) {
HXLINE( 658)												g2 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float b21;
HXDLIN( 658)											int this20 = (col & 255);
HXDLIN( 658)											if ((this20 == 0)) {
HXLINE( 658)												b21 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 658)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 658)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 658)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 658)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 658)											int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 658)											{
HXLINE( 658)												int _hx_tmp2;
HXDLIN( 658)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)													_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE( 658)													_hx_tmp2 = blended;
            												}
HXDLIN( 658)												::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            											}
            										}
            										else {
HXLINE( 658)											::Dynamic this21 = undoImage->image;
HXDLIN( 658)											int index2;
HXDLIN( 658)											if (undoImage->useVirtualPos) {
HXLINE( 658)												index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXLINE( 658)												index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 658)											int _hx_tmp3;
HXDLIN( 658)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)												_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXLINE( 658)												_hx_tmp3 = c2;
            											}
HXDLIN( 658)											::iterMagic::Iimg_obj::set(this21,index2,_hx_tmp3);
            										}
            									}
            									else {
HXLINE( 658)										if (forceClear) {
HXLINE( 658)											::Dynamic this22 = undoImage->image;
HXDLIN( 658)											int x2 = (dx1 - rectLeft);
HXDLIN( 658)											int y2 = (dy1 - rectTop);
HXDLIN( 658)											int index3;
HXDLIN( 658)											if (undoImage->useVirtualPos) {
HXLINE( 658)												index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            											}
            											else {
HXLINE( 658)												index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            											}
HXDLIN( 658)											::iterMagic::Iimg_obj::set(this22,index3,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 658)			bool found = false;
HXDLIN( 658)			Float min4 = ( (Float)(0) );
HXDLIN( 658)			Float max = ( (Float)(0) );
HXDLIN( 658)			int a5 = 0;
HXDLIN( 658)			int r3 = 0;
HXDLIN( 658)			int g3 = 0;
HXDLIN( 658)			int b4 = 0;
HXDLIN( 658)			{
HXLINE( 658)				int _g_min = xIter3->start;
HXDLIN( 658)				int _g_max = xIter3->max;
HXDLIN( 658)				while((_g_min < _g_max)){
HXLINE( 658)					_g_min = (_g_min + 1);
HXDLIN( 658)					int px1 = (_g_min - 1);
HXDLIN( 658)					Float pcx = (( (Float)(px1) ) - dx);
HXLINE( 695)					found = false;
HXLINE( 658)					{
HXLINE( 658)						int _g_min1 = yIter3->start;
HXDLIN( 658)						int _g_max1 = yIter3->max;
HXDLIN( 658)						while((_g_min1 < _g_max1)){
HXLINE( 658)							_g_min1 = (_g_min1 + 1);
HXDLIN( 658)							int py1 = (_g_min1 - 1);
HXDLIN( 658)							Float pcy = (( (Float)(py1) ) - dy);
HXDLIN( 658)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 658)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 658)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 658)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 658)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 658)							bool _hx_tmp4;
HXDLIN( 658)							bool _hx_tmp5;
HXDLIN( 658)							if ((ratioA >= 0)) {
HXLINE( 658)								_hx_tmp5 = (ratioB >= 0);
            							}
            							else {
HXLINE( 658)								_hx_tmp5 = false;
            							}
HXDLIN( 658)							if (_hx_tmp5) {
HXLINE( 658)								_hx_tmp4 = (ratioC >= 0);
            							}
            							else {
HXLINE( 658)								_hx_tmp4 = false;
            							}
HXDLIN( 658)							if (_hx_tmp4) {
HXLINE( 722)								min4 = ratioC;
HXLINE( 658)								int i6 = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min4));
HXDLIN( 658)								if ((i6 > 255)) {
HXLINE(  24)									i6 = 255;
            								}
HXLINE( 658)								if ((i6 < 0)) {
HXLINE(  25)									i6 = 0;
            								}
HXLINE( 658)								a5 = i6;
HXDLIN( 658)								int i7 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN( 658)								if ((i7 > 255)) {
HXLINE(  24)									i7 = 255;
            								}
HXLINE( 658)								if ((i7 < 0)) {
HXLINE(  25)									i7 = 0;
            								}
HXLINE( 747)								r3 = i7;
HXLINE( 658)								int i8 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN( 658)								if ((i8 > 255)) {
HXLINE(  24)									i8 = 255;
            								}
HXLINE( 658)								if ((i8 < 0)) {
HXLINE(  25)									i8 = 0;
            								}
HXLINE( 748)								g3 = i8;
HXLINE( 658)								int i9 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN( 658)								if ((i9 > 255)) {
HXLINE(  24)									i9 = 255;
            								}
HXLINE( 658)								if ((i9 < 0)) {
HXLINE(  25)									i9 = 0;
            								}
HXLINE( 749)								b4 = i9;
HXLINE( 658)								{
HXLINE( 658)									int location1;
HXDLIN( 658)									if (pixelImage->useVirtualPos) {
HXLINE( 658)										location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 658)										location1 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            									}
HXDLIN( 658)									bool _hx_tmp6;
HXDLIN( 658)									if (pixelImage->transparent) {
HXLINE( 658)										_hx_tmp6 = (a5 < 254);
            									}
            									else {
HXLINE( 658)										_hx_tmp6 = false;
            									}
HXDLIN( 658)									if (_hx_tmp6) {
HXLINE( 658)										int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN( 658)										int old;
HXDLIN( 658)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)											old = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            										}
            										else {
HXLINE( 658)											old = this23;
            										}
HXDLIN( 658)										int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 658)										Float a12;
HXDLIN( 658)										int this24 = ((old >> 24) & 255);
HXDLIN( 658)										if ((this24 == 0)) {
HXLINE( 658)											a12 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											a12 = (( (Float)(this24) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float r11;
HXDLIN( 658)										int this25 = ((old >> 16) & 255);
HXDLIN( 658)										if ((this25 == 0)) {
HXLINE( 658)											r11 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											r11 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float g11;
HXDLIN( 658)										int this26 = ((old >> 8) & 255);
HXDLIN( 658)										if ((this26 == 0)) {
HXLINE( 658)											g11 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											g11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float b12;
HXDLIN( 658)										int this27 = (old & 255);
HXDLIN( 658)										if ((this27 == 0)) {
HXLINE( 658)											b12 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											b12 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float a21;
HXDLIN( 658)										int this28 = ((rhs >> 24) & 255);
HXDLIN( 658)										if ((this28 == 0)) {
HXLINE( 658)											a21 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											a21 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float r21;
HXDLIN( 658)										int this29 = ((rhs >> 16) & 255);
HXDLIN( 658)										if ((this29 == 0)) {
HXLINE( 658)											r21 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											r21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float g21;
HXDLIN( 658)										int this30 = ((rhs >> 8) & 255);
HXDLIN( 658)										if ((this30 == 0)) {
HXLINE( 658)											g21 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											g21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float b22;
HXDLIN( 658)										int this31 = (rhs & 255);
HXDLIN( 658)										if ((this31 == 0)) {
HXLINE( 658)											b22 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											b22 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 658)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 658)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 658)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 658)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 658)										int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 658)										{
HXLINE( 658)											int _hx_tmp7;
HXDLIN( 658)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXLINE( 658)												_hx_tmp7 = blended1;
            											}
HXDLIN( 658)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXLINE( 658)										int value;
HXDLIN( 658)										if (pixelImage->isLittle) {
HXLINE( 658)											value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            										}
            										else {
HXLINE( 658)											value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            										}
HXDLIN( 658)										::iterMagic::Iimg_obj::set(pixelImage->image,location1,value);
            									}
            								}
HXLINE( 751)								found = true;
            							}
            							else {
HXLINE( 658)								if (found) {
HXLINE( 658)									goto _hx_goto_813;
            								}
            							}
            						}
            						_hx_goto_813:;
            					}
            				}
            			}
            		}
HXDLIN( 658)		{
HXLINE( 658)			bool hasUndo1 = true;
HXDLIN( 658)			int aA1 = ((color >> 24) & 255);
HXDLIN( 658)			int rA1 = ((color >> 16) & 255);
HXDLIN( 658)			int gA1 = ((color >> 8) & 255);
HXDLIN( 658)			int bA1 = (color & 255);
HXDLIN( 658)			Float bcx1 = (cx - dx);
HXDLIN( 658)			Float bcy1 = (cy - dy);
HXDLIN( 658)			Float acx1 = (bx - dx);
HXDLIN( 658)			Float acy1 = (by - dy);
HXDLIN( 658)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 658)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 658)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 658)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 658)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 658)			if ((bx > cx)) {
HXLINE( 658)				if ((bx > dx)) {
HXLINE( 658)					int min5;
HXDLIN( 658)					if ((cx > dx)) {
HXLINE( 658)						min5 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 658)						min5 = ::Math_obj::floor(cx);
            					}
HXDLIN( 658)					int ii_min8 = min5;
HXDLIN( 658)					int ii_max8 = ::Math_obj::ceil(bx);
HXDLIN( 658)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXLINE( 658)					int ii_min9 = ::Math_obj::floor(cx);
HXDLIN( 658)					int ii_max9 = ::Math_obj::ceil(dx);
HXDLIN( 658)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXLINE( 658)				if ((cx > dx)) {
HXLINE( 658)					int min6;
HXDLIN( 658)					if ((bx > dx)) {
HXLINE( 658)						min6 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 658)						min6 = ::Math_obj::ceil(bx);
            					}
HXDLIN( 658)					int ii_min10 = min6;
HXDLIN( 658)					int ii_max10 = ::Math_obj::ceil(cx);
HXDLIN( 658)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXLINE( 658)					int ii_min11 = ::Math_obj::floor(bx);
HXDLIN( 658)					int ii_max11 = ::Math_obj::ceil(dx);
HXDLIN( 658)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN( 658)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 658)			if ((by > cy)) {
HXLINE( 658)				if ((by > dy)) {
HXLINE( 658)					int min7;
HXDLIN( 658)					if ((cy > dy)) {
HXLINE( 658)						min7 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 658)						min7 = ::Math_obj::floor(cy);
            					}
HXDLIN( 658)					int ii_min12 = min7;
HXDLIN( 658)					int ii_max12 = ::Math_obj::ceil(by);
HXDLIN( 658)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXLINE( 658)					int ii_min13 = ::Math_obj::floor(cy);
HXDLIN( 658)					int ii_max13 = ::Math_obj::ceil(dy);
HXDLIN( 658)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXLINE( 658)				if ((cy > dy)) {
HXLINE( 658)					int min8;
HXDLIN( 658)					if ((by > dy)) {
HXLINE( 658)						min8 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 658)						min8 = ::Math_obj::ceil(by);
            					}
HXDLIN( 658)					int ii_min14 = min8;
HXDLIN( 658)					int ii_max14 = ::Math_obj::ceil(cy);
HXDLIN( 658)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXLINE( 658)					int ii_min15 = ::Math_obj::floor(by);
HXDLIN( 658)					int ii_max15 = ::Math_obj::ceil(dy);
HXDLIN( 658)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN( 658)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 658)			if (hasUndo1) {
HXLINE( 658)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 658)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 658)				 ::Dynamic imageType1 = null();
HXDLIN( 658)				 ::pi_xy::ImageStruct this32 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 658)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 658)				::Dynamic undoImage4;
HXDLIN( 658)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXLINE( 658)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 658)						 ::iterMagic::BytesImg b6 = byt1;
HXDLIN( 658)						{
HXLINE( 658)							b6->width = width1;
HXDLIN( 658)							b6->height = height1;
HXDLIN( 658)							b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 658)							b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 658)							{
HXLINE( 658)								int len2 = b6->length;
HXDLIN( 658)								int w1 = 0;
HXDLIN( 658)								{
HXLINE( 658)									int _g20 = 0;
HXDLIN( 658)									int _g21 = b6->height;
HXDLIN( 658)									while((_g20 < _g21)){
HXLINE( 658)										_g20 = (_g20 + 1);
HXDLIN( 658)										int y3 = (_g20 - 1);
HXDLIN( 658)										{
HXLINE( 658)											int _g22 = 0;
HXDLIN( 658)											int _g23 = b6->width;
HXDLIN( 658)											while((_g22 < _g23)){
HXLINE( 658)												_g22 = (_g22 + 1);
HXDLIN( 658)												int x3 = (_g22 - 1);
HXDLIN( 658)												{
HXLINE( 658)													w1 = (w1 + 1);
HXDLIN( 658)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 658)												{
HXLINE( 658)													w1 = (w1 + 1);
HXDLIN( 658)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 658)												{
HXLINE( 658)													w1 = (w1 + 1);
HXDLIN( 658)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 658)												{
HXLINE( 658)													w1 = (w1 + 1);
HXDLIN( 658)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 658)						undoImage4 = b6;
            					}
            					break;
            					case (int)1: {
HXLINE( 658)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 658)						 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN( 658)						{
HXLINE( 658)							a7->width = width1;
HXDLIN( 658)							a7->height = height1;
HXDLIN( 658)							a7->data = ::Array_obj< int >::__new(0);
HXDLIN( 658)							a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 658)							{
HXLINE( 658)								int _g24 = 0;
HXDLIN( 658)								int _g25 = a7->length;
HXDLIN( 658)								while((_g24 < _g25)){
HXLINE( 658)									_g24 = (_g24 + 1);
HXDLIN( 658)									int i10 = (_g24 - 1);
HXDLIN( 658)									a7->data[i10] = 0;
            								}
            							}
            						}
HXDLIN( 658)						undoImage4 = a7;
            					}
            					break;
            					case (int)2: {
HXLINE( 658)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 658)						 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN( 658)						{
HXLINE( 658)							b7->width = width1;
HXDLIN( 658)							b7->height = height1;
HXDLIN( 658)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 658)							int size1 = (b7->length * 4);
HXDLIN( 658)							b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 658)							{
HXLINE( 658)								int _g26 = 0;
HXDLIN( 658)								int _g27 = b7->length;
HXDLIN( 658)								while((_g26 < _g27)){
HXLINE( 658)									_g26 = (_g26 + 1);
HXDLIN( 658)									int i11 = (_g26 - 1);
HXDLIN( 658)									{
HXLINE( 658)										 ::haxe::io::ArrayBufferViewImpl this33 = b7->data;
HXDLIN( 658)										bool undoImage5;
HXDLIN( 658)										if ((i11 >= 0)) {
HXLINE( 658)											undoImage5 = (i11 < (this33->byteLength >> 2));
            										}
            										else {
HXLINE( 658)											undoImage5 = false;
            										}
HXDLIN( 658)										if (undoImage5) {
HXLINE( 658)											 ::haxe::io::Bytes _this1 = this33->bytes;
HXDLIN( 658)											int pos1 = ((i11 << 2) + this33->byteOffset);
HXDLIN( 658)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 658)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 658)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 658)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 658)						undoImage4 = b7;
            					}
            					break;
            					case (int)3: {
HXLINE( 658)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 658)						 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 658)						{
HXLINE( 658)							v2->width = width1;
HXDLIN( 658)							v2->height = height1;
HXDLIN( 658)							v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 658)							v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 658)							{
HXLINE( 658)								int _g28 = 0;
HXDLIN( 658)								int _g29 = v2->length;
HXDLIN( 658)								while((_g28 < _g29)){
HXLINE( 658)									_g28 = (_g28 + 1);
HXDLIN( 658)									int i12 = (_g28 - 1);
HXDLIN( 658)									v2->data->__unsafe_set(i12,0);
            								}
            							}
            						}
HXDLIN( 658)						undoImage4 = v2;
            					}
            					break;
            					case (int)4: {
HXLINE( 658)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 658)						 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN( 658)						{
HXLINE( 658)							b8->width = width1;
HXDLIN( 658)							b8->height = height1;
HXDLIN( 658)							b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 658)							b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 658)							{
HXLINE( 658)								int len3 = b8->length;
HXDLIN( 658)								 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN( 658)								if (::hx::IsNull( d1->head )) {
HXLINE( 658)									int _g30 = 0;
HXDLIN( 658)									int _g31 = len3;
HXDLIN( 658)									while((_g30 < _g31)){
HXLINE( 658)										_g30 = (_g30 + 1);
HXDLIN( 658)										int i13 = (_g30 - 1);
HXDLIN( 658)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXLINE( 658)									int _g32 = 0;
HXDLIN( 658)									int _g33 = len3;
HXDLIN( 658)									while((_g32 < _g33)){
HXLINE( 658)										_g32 = (_g32 + 1);
HXDLIN( 658)										int i14 = (_g32 - 1);
HXDLIN( 658)										{
HXLINE( 658)											 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN( 658)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 658)											{
HXLINE( 658)												int _g34 = 0;
HXDLIN( 658)												int _g35 = i14;
HXDLIN( 658)												while((_g34 < _g35)){
HXLINE( 658)													_g34 = (_g34 + 1);
HXDLIN( 658)													int i15 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE( 658)											if (::hx::IsNull( prev1 )) {
HXLINE( 658)												b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 658)												l1 = null();
            											}
            											else {
HXLINE( 658)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 658)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 658)						undoImage4 = b8;
            					}
            					break;
            				}
HXDLIN( 658)				this32->image = undoImage4;
HXDLIN( 658)				this32->width = width1;
HXDLIN( 658)				this32->height = height1;
HXDLIN( 658)				this32->imageType = ( (int)(imageType1) );
HXDLIN( 658)				undoImage3 = this32;
HXDLIN( 658)				{
HXLINE( 658)					int rectLeft1 = xIter31->start;
HXDLIN( 658)					int rectTop1 = yIter31->start;
HXDLIN( 658)					int rectRight1 = xIter31->max;
HXDLIN( 658)					bool forceClear1 = false;
HXDLIN( 658)					{
HXLINE( 658)						int _g36 = rectTop1;
HXDLIN( 658)						int _g37 = yIter31->max;
HXDLIN( 658)						while((_g36 < _g37)){
HXLINE( 658)							_g36 = (_g36 + 1);
HXDLIN( 658)							int dy2 = (_g36 - 1);
HXDLIN( 658)							{
HXLINE( 658)								int _g38 = rectLeft1;
HXDLIN( 658)								int _g39 = rectRight1;
HXDLIN( 658)								while((_g38 < _g39)){
HXLINE( 658)									_g38 = (_g38 + 1);
HXDLIN( 658)									int dx2 = (_g38 - 1);
HXDLIN( 658)									::Dynamic this34 = pixelImage->image;
HXDLIN( 658)									int index4;
HXDLIN( 658)									if (pixelImage->useVirtualPos) {
HXLINE( 658)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 658)										index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            									}
HXDLIN( 658)									int c3 = ::iterMagic::Iimg_obj::get(this34,index4);
HXDLIN( 658)									int col1;
HXDLIN( 658)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)										col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXLINE( 658)										col1 = c3;
            									}
HXDLIN( 658)									bool _hx_tmp8;
HXDLIN( 658)									if (pixelImage->useMask) {
HXLINE( 658)										_hx_tmp8 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE( 658)										_hx_tmp8 = false;
            									}
HXDLIN( 658)									if (_hx_tmp8) {
HXLINE( 658)										 ::pi_xy::ImageStruct this35 = pixelImage->mask;
HXDLIN( 658)										::Dynamic this36 = this35->image;
HXDLIN( 658)										int index5;
HXDLIN( 658)										if (this35->useVirtualPos) {
HXLINE( 658)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this35->virtualY) * ( (Float)(this35->width) )) + dx2) - this35->virtualX));
            										}
            										else {
HXLINE( 658)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this35->width) + dx2)) ));
            										}
HXDLIN( 658)										int c4 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN( 658)										int v3;
HXDLIN( 658)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)											v3 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXLINE( 658)											v3 = c4;
            										}
HXDLIN( 658)										int maskPixel1 = v3;
HXDLIN( 658)										int this37 = col1;
HXDLIN( 658)										if ((maskPixel1 == 0)) {
HXLINE( 658)											col1 = this37;
            										}
            										else {
HXLINE( 658)											Float m01;
HXDLIN( 658)											int this38 = ((maskPixel1 >> 24) & 255);
HXDLIN( 658)											if ((this38 == 0)) {
HXLINE( 658)												m01 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												m01 = (( (Float)(this38) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float m11;
HXDLIN( 658)											int this39 = ((maskPixel1 >> 16) & 255);
HXDLIN( 658)											if ((this39 == 0)) {
HXLINE( 658)												m11 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												m11 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float m21;
HXDLIN( 658)											int this40 = ((maskPixel1 >> 8) & 255);
HXDLIN( 658)											if ((this40 == 0)) {
HXLINE( 658)												m21 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												m21 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float m31;
HXDLIN( 658)											int this41 = (maskPixel1 & 255);
HXDLIN( 658)											if ((this41 == 0)) {
HXLINE( 658)												m31 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												m31 = (( (Float)(this41) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this37 >> 24) & 255)) )));
HXDLIN( 658)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this37 >> 16) & 255)) )));
HXDLIN( 658)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this37 >> 8) & 255)) )));
HXDLIN( 658)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this37 & 255)) )));
HXDLIN( 658)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 658)									if ((col1 != 0)) {
HXLINE( 658)										int x4 = (dx2 - rectLeft1);
HXDLIN( 658)										int y4 = (dy2 - rectTop1);
HXDLIN( 658)										int c5 = col1;
HXDLIN( 658)										bool _hx_tmp9;
HXDLIN( 658)										if ((((c5 >> 24) & 255) < 254)) {
HXLINE( 658)											_hx_tmp9 = undoImage3->transparent;
            										}
            										else {
HXLINE( 658)											_hx_tmp9 = false;
            										}
HXDLIN( 658)										if (_hx_tmp9) {
HXLINE( 658)											int location2;
HXDLIN( 658)											if (undoImage3->useVirtualPos) {
HXLINE( 658)												location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 658)												location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 658)											int this42 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 658)											int this43;
HXDLIN( 658)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)												this43 = ((((((this42 >> 24) & 255) << 24) | ((this42 & 255) << 16)) | (((this42 >> 8) & 255) << 8)) | ((this42 >> 16) & 255));
            											}
            											else {
HXLINE( 658)												this43 = this42;
            											}
HXDLIN( 658)											Float a13;
HXDLIN( 658)											int this44 = ((this43 >> 24) & 255);
HXDLIN( 658)											if ((this44 == 0)) {
HXLINE( 658)												a13 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												a13 = (( (Float)(this44) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float r12;
HXDLIN( 658)											int this45 = ((this43 >> 16) & 255);
HXDLIN( 658)											if ((this45 == 0)) {
HXLINE( 658)												r12 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												r12 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float g12;
HXDLIN( 658)											int this46 = ((this43 >> 8) & 255);
HXDLIN( 658)											if ((this46 == 0)) {
HXLINE( 658)												g12 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												g12 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float b13;
HXDLIN( 658)											int this47 = (this43 & 255);
HXDLIN( 658)											if ((this47 == 0)) {
HXLINE( 658)												b13 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												b13 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float a22;
HXDLIN( 658)											int this48 = ((col1 >> 24) & 255);
HXDLIN( 658)											if ((this48 == 0)) {
HXLINE( 658)												a22 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												a22 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float r22;
HXDLIN( 658)											int this49 = ((col1 >> 16) & 255);
HXDLIN( 658)											if ((this49 == 0)) {
HXLINE( 658)												r22 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												r22 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float g22;
HXDLIN( 658)											int this50 = ((col1 >> 8) & 255);
HXDLIN( 658)											if ((this50 == 0)) {
HXLINE( 658)												g22 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												g22 = (( (Float)(this50) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float b23;
HXDLIN( 658)											int this51 = (col1 & 255);
HXDLIN( 658)											if ((this51 == 0)) {
HXLINE( 658)												b23 = ((Float)0.);
            											}
            											else {
HXLINE( 658)												b23 = (( (Float)(this51) ) / ( (Float)(255) ));
            											}
HXDLIN( 658)											Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 658)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 658)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 658)											int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 658)											int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 658)											int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN( 658)											{
HXLINE( 658)												int _hx_tmp10;
HXDLIN( 658)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)													_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXLINE( 658)													_hx_tmp10 = blended2;
            												}
HXDLIN( 658)												::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            											}
            										}
            										else {
HXLINE( 658)											::Dynamic this52 = undoImage3->image;
HXDLIN( 658)											int index6;
HXDLIN( 658)											if (undoImage3->useVirtualPos) {
HXLINE( 658)												index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 658)												index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 658)											int _hx_tmp11;
HXDLIN( 658)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)												_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXLINE( 658)												_hx_tmp11 = c5;
            											}
HXDLIN( 658)											::iterMagic::Iimg_obj::set(this52,index6,_hx_tmp11);
            										}
            									}
            									else {
HXLINE( 658)										if (forceClear1) {
HXLINE( 658)											::Dynamic this53 = undoImage3->image;
HXDLIN( 658)											int x5 = (dx2 - rectLeft1);
HXDLIN( 658)											int y5 = (dy2 - rectTop1);
HXDLIN( 658)											int index7;
HXDLIN( 658)											if (undoImage3->useVirtualPos) {
HXLINE( 658)												index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 658)												index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            											}
HXDLIN( 658)											::iterMagic::Iimg_obj::set(this53,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 658)			bool found1 = false;
HXDLIN( 658)			Float min9 = ( (Float)(0) );
HXDLIN( 658)			Float max1 = ( (Float)(0) );
HXDLIN( 658)			int a9 = 0;
HXDLIN( 658)			int r6 = 0;
HXDLIN( 658)			int g6 = 0;
HXDLIN( 658)			int b10 = 0;
HXDLIN( 658)			{
HXLINE( 658)				int _g_min2 = xIter31->start;
HXDLIN( 658)				int _g_max2 = xIter31->max;
HXDLIN( 658)				while((_g_min2 < _g_max2)){
HXLINE( 658)					_g_min2 = (_g_min2 + 1);
HXDLIN( 658)					int px2 = (_g_min2 - 1);
HXDLIN( 658)					Float pcx1 = (( (Float)(px2) ) - dx);
HXLINE( 695)					found1 = false;
HXLINE( 658)					{
HXLINE( 658)						int _g_min3 = yIter31->start;
HXDLIN( 658)						int _g_max3 = yIter31->max;
HXDLIN( 658)						while((_g_min3 < _g_max3)){
HXLINE( 658)							_g_min3 = (_g_min3 + 1);
HXDLIN( 658)							int py2 = (_g_min3 - 1);
HXDLIN( 658)							Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN( 658)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 658)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 658)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 658)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 658)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 658)							bool _hx_tmp12;
HXDLIN( 658)							bool _hx_tmp13;
HXDLIN( 658)							if ((ratioA1 >= 0)) {
HXLINE( 658)								_hx_tmp13 = (ratioB1 >= 0);
            							}
            							else {
HXLINE( 658)								_hx_tmp13 = false;
            							}
HXDLIN( 658)							if (_hx_tmp13) {
HXLINE( 658)								_hx_tmp12 = (ratioC1 >= 0);
            							}
            							else {
HXLINE( 658)								_hx_tmp12 = false;
            							}
HXDLIN( 658)							if (_hx_tmp12) {
HXLINE( 712)								min9 = ratioB1;
HXLINE( 658)								int i16 = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min9));
HXDLIN( 658)								if ((i16 > 255)) {
HXLINE(  24)									i16 = 255;
            								}
HXLINE( 658)								if ((i16 < 0)) {
HXLINE(  25)									i16 = 0;
            								}
HXLINE( 658)								a9 = i16;
HXDLIN( 658)								int i17 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN( 658)								if ((i17 > 255)) {
HXLINE(  24)									i17 = 255;
            								}
HXLINE( 658)								if ((i17 < 0)) {
HXLINE(  25)									i17 = 0;
            								}
HXLINE( 747)								r6 = i17;
HXLINE( 658)								int i18 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN( 658)								if ((i18 > 255)) {
HXLINE(  24)									i18 = 255;
            								}
HXLINE( 658)								if ((i18 < 0)) {
HXLINE(  25)									i18 = 0;
            								}
HXLINE( 748)								g6 = i18;
HXLINE( 658)								int i19 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN( 658)								if ((i19 > 255)) {
HXLINE(  24)									i19 = 255;
            								}
HXLINE( 658)								if ((i19 < 0)) {
HXLINE(  25)									i19 = 0;
            								}
HXLINE( 749)								b10 = i19;
HXLINE( 658)								{
HXLINE( 658)									int location3;
HXDLIN( 658)									if (pixelImage->useVirtualPos) {
HXLINE( 658)										location3 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 658)										location3 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            									}
HXDLIN( 658)									bool _hx_tmp14;
HXDLIN( 658)									if (pixelImage->transparent) {
HXLINE( 658)										_hx_tmp14 = (a9 < 254);
            									}
            									else {
HXLINE( 658)										_hx_tmp14 = false;
            									}
HXDLIN( 658)									if (_hx_tmp14) {
HXLINE( 658)										int this54 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN( 658)										int old1;
HXDLIN( 658)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)											old1 = ((((((this54 >> 24) & 255) << 24) | ((this54 & 255) << 16)) | (((this54 >> 8) & 255) << 8)) | ((this54 >> 16) & 255));
            										}
            										else {
HXLINE( 658)											old1 = this54;
            										}
HXDLIN( 658)										int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 658)										Float a14;
HXDLIN( 658)										int this55 = ((old1 >> 24) & 255);
HXDLIN( 658)										if ((this55 == 0)) {
HXLINE( 658)											a14 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											a14 = (( (Float)(this55) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float r13;
HXDLIN( 658)										int this56 = ((old1 >> 16) & 255);
HXDLIN( 658)										if ((this56 == 0)) {
HXLINE( 658)											r13 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											r13 = (( (Float)(this56) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float g13;
HXDLIN( 658)										int this57 = ((old1 >> 8) & 255);
HXDLIN( 658)										if ((this57 == 0)) {
HXLINE( 658)											g13 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											g13 = (( (Float)(this57) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float b14;
HXDLIN( 658)										int this58 = (old1 & 255);
HXDLIN( 658)										if ((this58 == 0)) {
HXLINE( 658)											b14 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											b14 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float a23;
HXDLIN( 658)										int this59 = ((rhs1 >> 24) & 255);
HXDLIN( 658)										if ((this59 == 0)) {
HXLINE( 658)											a23 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											a23 = (( (Float)(this59) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float r23;
HXDLIN( 658)										int this60 = ((rhs1 >> 16) & 255);
HXDLIN( 658)										if ((this60 == 0)) {
HXLINE( 658)											r23 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											r23 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float g23;
HXDLIN( 658)										int this61 = ((rhs1 >> 8) & 255);
HXDLIN( 658)										if ((this61 == 0)) {
HXLINE( 658)											g23 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											g23 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float b24;
HXDLIN( 658)										int this62 = (rhs1 & 255);
HXDLIN( 658)										if ((this62 == 0)) {
HXLINE( 658)											b24 = ((Float)0.);
            										}
            										else {
HXLINE( 658)											b24 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN( 658)										Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 658)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 658)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 658)										int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 658)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 658)										int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN( 658)										{
HXLINE( 658)											int _hx_tmp15;
HXDLIN( 658)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 658)												_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXLINE( 658)												_hx_tmp15 = blended3;
            											}
HXDLIN( 658)											::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp15);
            										}
            									}
            									else {
HXLINE( 658)										int value1;
HXDLIN( 658)										if (pixelImage->isLittle) {
HXLINE( 658)											value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXLINE( 658)											value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            										}
HXDLIN( 658)										::iterMagic::Iimg_obj::set(pixelImage->image,location3,value1);
            									}
            								}
HXLINE( 751)								found1 = true;
            							}
            							else {
HXLINE( 658)								if (found1) {
HXLINE( 658)									goto _hx_goto_825;
            								}
            							}
            						}
            						_hx_goto_825:;
            					}
            				}
            			}
            		}
HXDLIN( 658)		 ::pi_xy::algo::HitQuad v4 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 658)		 ::pi_xy::algo::HitQuad hitQuad = v4;
HXLINE( 659)		Float cx1 = h2;
HXLINE( 660)		Float cy1 = radius2;
HXLINE( 661)		Float bx1 = h2;
HXLINE( 662)		Float by1 = -(radius2);
HXLINE( 664)		Float dx3 = hSmall;
HXLINE( 665)		Float dy3 = radius2;
HXLINE( 666)		Float ax1 = hSmall;
HXLINE( 667)		Float ay1 = -(radius2);
HXLINE( 669)		temp = (px + ((bx1 * cos) - (by1 * sin)));
HXLINE( 670)		by1 = (py + ((by1 * cos) + (bx1 * sin)));
HXLINE( 671)		bx1 = temp;
HXLINE( 672)		temp = (px + ((cx1 * cos) - (cy1 * sin)));
HXLINE( 673)		cy1 = (py + ((cy1 * cos) + (cx1 * sin)));
HXLINE( 674)		cx1 = temp;
HXLINE( 676)		temp = (px + ((ax1 * cos) - (ay1 * sin)));
HXLINE( 677)		ay1 = (py + ((ay1 * cos) + (ax1 * sin)));
HXLINE( 678)		ax1 = temp;
HXLINE( 680)		temp = (px + ((dx3 * cos) - (dy3 * sin)));
HXLINE( 681)		dy3 = (py + ((dy3 * cos) + (dx3 * sin)));
HXLINE( 682)		dx3 = temp;
HXLINE( 684)		Float soft3 = ( (Float)(40) );
HXDLIN( 684)		bool hasUndo2 = true;
HXDLIN( 684)		int aA2 = ((color >> 24) & 255);
HXDLIN( 684)		int rA2 = ((color >> 16) & 255);
HXDLIN( 684)		int gA2 = ((color >> 8) & 255);
HXDLIN( 684)		int bA2 = (color & 255);
HXDLIN( 684)		Float bcx2 = (bx1 - cx1);
HXDLIN( 684)		Float bcy2 = (by1 - cy1);
HXDLIN( 684)		Float acx2 = (qx - cx1);
HXDLIN( 684)		Float acy2 = (qy - cy1);
HXDLIN( 684)		Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 684)		Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 684)		Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 684)		Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 684)		 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 684)		if ((qx > bx1)) {
HXLINE( 684)			if ((qx > cx1)) {
HXLINE( 684)				int min10;
HXDLIN( 684)				if ((bx1 > cx1)) {
HXLINE( 684)					min10 = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 684)					min10 = ::Math_obj::floor(bx1);
            				}
HXDLIN( 684)				int ii_min16 = min10;
HXDLIN( 684)				int ii_max16 = ::Math_obj::ceil(qx);
HXDLIN( 684)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            			}
            			else {
HXLINE( 684)				int ii_min17 = ::Math_obj::floor(bx1);
HXDLIN( 684)				int ii_max17 = ::Math_obj::ceil(cx1);
HXDLIN( 684)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            			}
            		}
            		else {
HXLINE( 684)			if ((bx1 > cx1)) {
HXLINE( 684)				int min11;
HXDLIN( 684)				if ((qx > cx1)) {
HXLINE( 684)					min11 = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 684)					min11 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 684)				int ii_min18 = min11;
HXDLIN( 684)				int ii_max18 = ::Math_obj::ceil(bx1);
HXDLIN( 684)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            			}
            			else {
HXLINE( 684)				int ii_min19 = ::Math_obj::floor(qx);
HXDLIN( 684)				int ii_max19 = ::Math_obj::ceil(cx1);
HXDLIN( 684)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            			}
            		}
HXDLIN( 684)		 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 684)		if ((qy > by1)) {
HXLINE( 684)			if ((qy > cy1)) {
HXLINE( 684)				int min12;
HXDLIN( 684)				if ((by1 > cy1)) {
HXLINE( 684)					min12 = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 684)					min12 = ::Math_obj::floor(by1);
            				}
HXDLIN( 684)				int ii_min20 = min12;
HXDLIN( 684)				int ii_max20 = ::Math_obj::ceil(qy);
HXDLIN( 684)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            			}
            			else {
HXLINE( 684)				int ii_min21 = ::Math_obj::floor(by1);
HXDLIN( 684)				int ii_max21 = ::Math_obj::ceil(cy1);
HXDLIN( 684)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            			}
            		}
            		else {
HXLINE( 684)			if ((by1 > cy1)) {
HXLINE( 684)				int min13;
HXDLIN( 684)				if ((qy > cy1)) {
HXLINE( 684)					min13 = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 684)					min13 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 684)				int ii_min22 = min13;
HXDLIN( 684)				int ii_max22 = ::Math_obj::ceil(by1);
HXDLIN( 684)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            			}
            			else {
HXLINE( 684)				int ii_min23 = ::Math_obj::floor(qy);
HXDLIN( 684)				int ii_max23 = ::Math_obj::ceil(cy1);
HXDLIN( 684)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            			}
            		}
HXDLIN( 684)		 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 684)		if (hasUndo2) {
HXLINE( 684)			int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 684)			int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 684)			 ::Dynamic imageType2 = null();
HXDLIN( 684)			 ::pi_xy::ImageStruct this63 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 684)			if (::hx::IsNull( imageType2 )) {
HXLINE(  54)				imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 684)			::Dynamic undoImage7;
HXDLIN( 684)			switch((int)(( (int)(imageType2) ))){
            				case (int)0: {
HXLINE( 684)					 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 684)					 ::iterMagic::BytesImg b16 = byt2;
HXDLIN( 684)					{
HXLINE( 684)						b16->width = width2;
HXDLIN( 684)						b16->height = height2;
HXDLIN( 684)						b16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 684)						b16->data = ::haxe::io::Bytes_obj::alloc((b16->length * 4));
HXDLIN( 684)						{
HXLINE( 684)							int len4 = b16->length;
HXDLIN( 684)							int w2 = 0;
HXDLIN( 684)							{
HXLINE( 684)								int _g40 = 0;
HXDLIN( 684)								int _g41 = b16->height;
HXDLIN( 684)								while((_g40 < _g41)){
HXLINE( 684)									_g40 = (_g40 + 1);
HXDLIN( 684)									int y6 = (_g40 - 1);
HXDLIN( 684)									{
HXLINE( 684)										int _g42 = 0;
HXDLIN( 684)										int _g43 = b16->width;
HXDLIN( 684)										while((_g42 < _g43)){
HXLINE( 684)											_g42 = (_g42 + 1);
HXDLIN( 684)											int x6 = (_g42 - 1);
HXDLIN( 684)											{
HXLINE( 684)												w2 = (w2 + 1);
HXDLIN( 684)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 684)											{
HXLINE( 684)												w2 = (w2 + 1);
HXDLIN( 684)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 684)											{
HXLINE( 684)												w2 = (w2 + 1);
HXDLIN( 684)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 684)											{
HXLINE( 684)												w2 = (w2 + 1);
HXDLIN( 684)												b16->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 684)					undoImage7 = b16;
            				}
            				break;
            				case (int)1: {
HXLINE( 684)					 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 684)					 ::iterMagic::ArrIntImg a15 = arrI2;
HXDLIN( 684)					{
HXLINE( 684)						a15->width = width2;
HXDLIN( 684)						a15->height = height2;
HXDLIN( 684)						a15->data = ::Array_obj< int >::__new(0);
HXDLIN( 684)						a15->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 684)						{
HXLINE( 684)							int _g44 = 0;
HXDLIN( 684)							int _g45 = a15->length;
HXDLIN( 684)							while((_g44 < _g45)){
HXLINE( 684)								_g44 = (_g44 + 1);
HXDLIN( 684)								int i20 = (_g44 - 1);
HXDLIN( 684)								a15->data[i20] = 0;
            							}
            						}
            					}
HXDLIN( 684)					undoImage7 = a15;
            				}
            				break;
            				case (int)2: {
HXLINE( 684)					 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 684)					 ::iterMagic::U32ArrImg b17 = u32a2;
HXDLIN( 684)					{
HXLINE( 684)						b17->width = width2;
HXDLIN( 684)						b17->height = height2;
HXDLIN( 684)						b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 684)						int size2 = (b17->length * 4);
HXDLIN( 684)						b17->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 684)						{
HXLINE( 684)							int _g46 = 0;
HXDLIN( 684)							int _g47 = b17->length;
HXDLIN( 684)							while((_g46 < _g47)){
HXLINE( 684)								_g46 = (_g46 + 1);
HXDLIN( 684)								int i21 = (_g46 - 1);
HXDLIN( 684)								{
HXLINE( 684)									 ::haxe::io::ArrayBufferViewImpl this64 = b17->data;
HXDLIN( 684)									bool undoImage8;
HXDLIN( 684)									if ((i21 >= 0)) {
HXLINE( 684)										undoImage8 = (i21 < (this64->byteLength >> 2));
            									}
            									else {
HXLINE( 684)										undoImage8 = false;
            									}
HXDLIN( 684)									if (undoImage8) {
HXLINE( 684)										 ::haxe::io::Bytes _this2 = this64->bytes;
HXDLIN( 684)										int pos2 = ((i21 << 2) + this64->byteOffset);
HXDLIN( 684)										_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 684)										_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 684)										_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 684)										_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 684)					undoImage7 = b17;
            				}
            				break;
            				case (int)3: {
HXLINE( 684)					 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 684)					 ::iterMagic::VecIntImg v5 = vec2;
HXDLIN( 684)					{
HXLINE( 684)						v5->width = width2;
HXDLIN( 684)						v5->height = height2;
HXDLIN( 684)						v5->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 684)						v5->data = ::Array_obj< int >::__new(v5->length);
HXDLIN( 684)						{
HXLINE( 684)							int _g48 = 0;
HXDLIN( 684)							int _g49 = v5->length;
HXDLIN( 684)							while((_g48 < _g49)){
HXLINE( 684)								_g48 = (_g48 + 1);
HXDLIN( 684)								int i22 = (_g48 - 1);
HXDLIN( 684)								v5->data->__unsafe_set(i22,0);
            							}
            						}
            					}
HXDLIN( 684)					undoImage7 = v5;
            				}
            				break;
            				case (int)4: {
HXLINE( 684)					 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 684)					 ::iterMagic::StackIntImg b18 = sInt2;
HXDLIN( 684)					{
HXLINE( 684)						b18->width = width2;
HXDLIN( 684)						b18->height = height2;
HXDLIN( 684)						b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 684)						b18->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 684)						{
HXLINE( 684)							int len5 = b18->length;
HXDLIN( 684)							 ::haxe::ds::GenericStack_Int d2 = b18->data;
HXDLIN( 684)							if (::hx::IsNull( d2->head )) {
HXLINE( 684)								int _g50 = 0;
HXDLIN( 684)								int _g51 = len5;
HXDLIN( 684)								while((_g50 < _g51)){
HXLINE( 684)									_g50 = (_g50 + 1);
HXDLIN( 684)									int i23 = (_g50 - 1);
HXDLIN( 684)									d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            								}
            							}
            							else {
HXLINE( 684)								int _g52 = 0;
HXDLIN( 684)								int _g53 = len5;
HXDLIN( 684)								while((_g52 < _g53)){
HXLINE( 684)									_g52 = (_g52 + 1);
HXDLIN( 684)									int i24 = (_g52 - 1);
HXDLIN( 684)									{
HXLINE( 684)										 ::haxe::ds::GenericCell_Int l2 = b18->data->head;
HXDLIN( 684)										 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 684)										{
HXLINE( 684)											int _g54 = 0;
HXDLIN( 684)											int _g55 = i24;
HXDLIN( 684)											while((_g54 < _g55)){
HXLINE( 684)												_g54 = (_g54 + 1);
HXDLIN( 684)												int i25 = (_g54 - 1);
HXLINE( 345)												prev2 = l2;
HXLINE( 346)												l2 = l2->next;
            											}
            										}
HXLINE( 684)										if (::hx::IsNull( prev2 )) {
HXLINE( 684)											b18->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 684)											l2 = null();
            										}
            										else {
HXLINE( 684)											prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 684)											l2 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 684)					undoImage7 = b18;
            				}
            				break;
            			}
HXDLIN( 684)			this63->image = undoImage7;
HXDLIN( 684)			this63->width = width2;
HXDLIN( 684)			this63->height = height2;
HXDLIN( 684)			this63->imageType = ( (int)(imageType2) );
HXDLIN( 684)			undoImage6 = this63;
HXDLIN( 684)			{
HXLINE( 684)				int rectLeft2 = xIter32->start;
HXDLIN( 684)				int rectTop2 = yIter32->start;
HXDLIN( 684)				int rectRight2 = xIter32->max;
HXDLIN( 684)				bool forceClear2 = false;
HXDLIN( 684)				{
HXLINE( 684)					int _g56 = rectTop2;
HXDLIN( 684)					int _g57 = yIter32->max;
HXDLIN( 684)					while((_g56 < _g57)){
HXLINE( 684)						_g56 = (_g56 + 1);
HXDLIN( 684)						int dy4 = (_g56 - 1);
HXDLIN( 684)						{
HXLINE( 684)							int _g58 = rectLeft2;
HXDLIN( 684)							int _g59 = rectRight2;
HXDLIN( 684)							while((_g58 < _g59)){
HXLINE( 684)								_g58 = (_g58 + 1);
HXDLIN( 684)								int dx4 = (_g58 - 1);
HXDLIN( 684)								::Dynamic this65 = pixelImage->image;
HXDLIN( 684)								int index8;
HXDLIN( 684)								if (pixelImage->useVirtualPos) {
HXLINE( 684)									index8 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 684)									index8 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            								}
HXDLIN( 684)								int c6 = ::iterMagic::Iimg_obj::get(this65,index8);
HXDLIN( 684)								int col2;
HXDLIN( 684)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 684)									col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            								}
            								else {
HXLINE( 684)									col2 = c6;
            								}
HXDLIN( 684)								bool _hx_tmp16;
HXDLIN( 684)								if (pixelImage->useMask) {
HXLINE( 684)									_hx_tmp16 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 684)									_hx_tmp16 = false;
            								}
HXDLIN( 684)								if (_hx_tmp16) {
HXLINE( 684)									 ::pi_xy::ImageStruct this66 = pixelImage->mask;
HXDLIN( 684)									::Dynamic this67 = this66->image;
HXDLIN( 684)									int index9;
HXDLIN( 684)									if (this66->useVirtualPos) {
HXLINE( 684)										index9 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this66->virtualY) * ( (Float)(this66->width) )) + dx4) - this66->virtualX));
            									}
            									else {
HXLINE( 684)										index9 = ::Std_obj::_hx_int(( (Float)(((dy4 * this66->width) + dx4)) ));
            									}
HXDLIN( 684)									int c7 = ::iterMagic::Iimg_obj::get(this67,index9);
HXDLIN( 684)									int v6;
HXDLIN( 684)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 684)										v6 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            									}
            									else {
HXLINE( 684)										v6 = c7;
            									}
HXDLIN( 684)									int maskPixel2 = v6;
HXDLIN( 684)									int this68 = col2;
HXDLIN( 684)									if ((maskPixel2 == 0)) {
HXLINE( 684)										col2 = this68;
            									}
            									else {
HXLINE( 684)										Float m02;
HXDLIN( 684)										int this69 = ((maskPixel2 >> 24) & 255);
HXDLIN( 684)										if ((this69 == 0)) {
HXLINE( 684)											m02 = ((Float)0.);
            										}
            										else {
HXLINE( 684)											m02 = (( (Float)(this69) ) / ( (Float)(255) ));
            										}
HXDLIN( 684)										Float m12;
HXDLIN( 684)										int this70 = ((maskPixel2 >> 16) & 255);
HXDLIN( 684)										if ((this70 == 0)) {
HXLINE( 684)											m12 = ((Float)0.);
            										}
            										else {
HXLINE( 684)											m12 = (( (Float)(this70) ) / ( (Float)(255) ));
            										}
HXDLIN( 684)										Float m22;
HXDLIN( 684)										int this71 = ((maskPixel2 >> 8) & 255);
HXDLIN( 684)										if ((this71 == 0)) {
HXLINE( 684)											m22 = ((Float)0.);
            										}
            										else {
HXLINE( 684)											m22 = (( (Float)(this71) ) / ( (Float)(255) ));
            										}
HXDLIN( 684)										Float m32;
HXDLIN( 684)										int this72 = (maskPixel2 & 255);
HXDLIN( 684)										if ((this72 == 0)) {
HXLINE( 684)											m32 = ((Float)0.);
            										}
            										else {
HXLINE( 684)											m32 = (( (Float)(this72) ) / ( (Float)(255) ));
            										}
HXDLIN( 684)										int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this68 >> 24) & 255)) )));
HXDLIN( 684)										int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this68 >> 16) & 255)) )));
HXDLIN( 684)										int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this68 >> 8) & 255)) )));
HXDLIN( 684)										int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this68 & 255)) )));
HXDLIN( 684)										col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 684)								if ((col2 != 0)) {
HXLINE( 684)									int x7 = (dx4 - rectLeft2);
HXDLIN( 684)									int y7 = (dy4 - rectTop2);
HXDLIN( 684)									int c8 = col2;
HXDLIN( 684)									bool _hx_tmp17;
HXDLIN( 684)									if ((((c8 >> 24) & 255) < 254)) {
HXLINE( 684)										_hx_tmp17 = undoImage6->transparent;
            									}
            									else {
HXLINE( 684)										_hx_tmp17 = false;
            									}
HXDLIN( 684)									if (_hx_tmp17) {
HXLINE( 684)										int location4;
HXDLIN( 684)										if (undoImage6->useVirtualPos) {
HXLINE( 684)											location4 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 684)											location4 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            										}
HXDLIN( 684)										int this73 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 684)										int this74;
HXDLIN( 684)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 684)											this74 = ((((((this73 >> 24) & 255) << 24) | ((this73 & 255) << 16)) | (((this73 >> 8) & 255) << 8)) | ((this73 >> 16) & 255));
            										}
            										else {
HXLINE( 684)											this74 = this73;
            										}
HXDLIN( 684)										Float a16;
HXDLIN( 684)										int this75 = ((this74 >> 24) & 255);
HXDLIN( 684)										if ((this75 == 0)) {
HXLINE( 684)											a16 = ((Float)0.);
            										}
            										else {
HXLINE( 684)											a16 = (( (Float)(this75) ) / ( (Float)(255) ));
            										}
HXDLIN( 684)										Float r14;
HXDLIN( 684)										int this76 = ((this74 >> 16) & 255);
HXDLIN( 684)										if ((this76 == 0)) {
HXLINE( 684)											r14 = ((Float)0.);
            										}
            										else {
HXLINE( 684)											r14 = (( (Float)(this76) ) / ( (Float)(255) ));
            										}
HXDLIN( 684)										Float g14;
HXDLIN( 684)										int this77 = ((this74 >> 8) & 255);
HXDLIN( 684)										if ((this77 == 0)) {
HXLINE( 684)											g14 = ((Float)0.);
            										}
            										else {
HXLINE( 684)											g14 = (( (Float)(this77) ) / ( (Float)(255) ));
            										}
HXDLIN( 684)										Float b19;
HXDLIN( 684)										int this78 = (this74 & 255);
HXDLIN( 684)										if ((this78 == 0)) {
HXLINE( 684)											b19 = ((Float)0.);
            										}
            										else {
HXLINE( 684)											b19 = (( (Float)(this78) ) / ( (Float)(255) ));
            										}
HXDLIN( 684)										Float a24;
HXDLIN( 684)										int this79 = ((col2 >> 24) & 255);
HXDLIN( 684)										if ((this79 == 0)) {
HXLINE( 684)											a24 = ((Float)0.);
            										}
            										else {
HXLINE( 684)											a24 = (( (Float)(this79) ) / ( (Float)(255) ));
            										}
HXDLIN( 684)										Float r24;
HXDLIN( 684)										int this80 = ((col2 >> 16) & 255);
HXDLIN( 684)										if ((this80 == 0)) {
HXLINE( 684)											r24 = ((Float)0.);
            										}
            										else {
HXLINE( 684)											r24 = (( (Float)(this80) ) / ( (Float)(255) ));
            										}
HXDLIN( 684)										Float g24;
HXDLIN( 684)										int this81 = ((col2 >> 8) & 255);
HXDLIN( 684)										if ((this81 == 0)) {
HXLINE( 684)											g24 = ((Float)0.);
            										}
            										else {
HXLINE( 684)											g24 = (( (Float)(this81) ) / ( (Float)(255) ));
            										}
HXDLIN( 684)										Float b25;
HXDLIN( 684)										int this82 = (col2 & 255);
HXDLIN( 684)										if ((this82 == 0)) {
HXLINE( 684)											b25 = ((Float)0.);
            										}
            										else {
HXLINE( 684)											b25 = (( (Float)(this82) ) / ( (Float)(255) ));
            										}
HXDLIN( 684)										Float a34 = (a16 * (( (Float)(1) ) - a24));
HXDLIN( 684)										int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 684)										int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 684)										int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b19 * a34) + (b25 * a24))));
HXDLIN( 684)										int a17 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 684)										int blended4 = ((((a17 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN( 684)										{
HXLINE( 684)											int _hx_tmp18;
HXDLIN( 684)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 684)												_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            											}
            											else {
HXLINE( 684)												_hx_tmp18 = blended4;
            											}
HXDLIN( 684)											::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            										}
            									}
            									else {
HXLINE( 684)										::Dynamic this83 = undoImage6->image;
HXDLIN( 684)										int index10;
HXDLIN( 684)										if (undoImage6->useVirtualPos) {
HXLINE( 684)											index10 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 684)											index10 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            										}
HXDLIN( 684)										int _hx_tmp19;
HXDLIN( 684)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 684)											_hx_tmp19 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            										}
            										else {
HXLINE( 684)											_hx_tmp19 = c8;
            										}
HXDLIN( 684)										::iterMagic::Iimg_obj::set(this83,index10,_hx_tmp19);
            									}
            								}
            								else {
HXLINE( 684)									if (forceClear2) {
HXLINE( 684)										::Dynamic this84 = undoImage6->image;
HXDLIN( 684)										int x8 = (dx4 - rectLeft2);
HXDLIN( 684)										int y8 = (dy4 - rectTop2);
HXDLIN( 684)										int index11;
HXDLIN( 684)										if (undoImage6->useVirtualPos) {
HXLINE( 684)											index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 684)											index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            										}
HXDLIN( 684)										::iterMagic::Iimg_obj::set(this84,index11,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 684)		bool found2 = false;
HXDLIN( 684)		Float min14 = ( (Float)(0) );
HXDLIN( 684)		Float max2 = ( (Float)(0) );
HXDLIN( 684)		int a18 = 0;
HXDLIN( 684)		int r9 = 0;
HXDLIN( 684)		int g9 = 0;
HXDLIN( 684)		int b26 = 0;
HXDLIN( 684)		{
HXLINE( 684)			int _g_min4 = xIter32->start;
HXDLIN( 684)			int _g_max4 = xIter32->max;
HXDLIN( 684)			while((_g_min4 < _g_max4)){
HXLINE( 684)				_g_min4 = (_g_min4 + 1);
HXDLIN( 684)				int px3 = (_g_min4 - 1);
HXDLIN( 684)				Float pcx2 = (( (Float)(px3) ) - cx1);
HXLINE( 695)				found2 = false;
HXLINE( 684)				{
HXLINE( 684)					int _g_min5 = yIter32->start;
HXDLIN( 684)					int _g_max5 = yIter32->max;
HXDLIN( 684)					while((_g_min5 < _g_max5)){
HXLINE( 684)						_g_min5 = (_g_min5 + 1);
HXDLIN( 684)						int py3 = (_g_min5 - 1);
HXDLIN( 684)						Float pcy2 = (( (Float)(py3) ) - cy1);
HXDLIN( 684)						Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 684)						Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 684)						Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 684)						Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 684)						Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 684)						bool _hx_tmp20;
HXDLIN( 684)						bool _hx_tmp21;
HXDLIN( 684)						if ((ratioA2 >= 0)) {
HXLINE( 684)							_hx_tmp21 = (ratioB2 >= 0);
            						}
            						else {
HXLINE( 684)							_hx_tmp21 = false;
            						}
HXDLIN( 684)						if (_hx_tmp21) {
HXLINE( 684)							_hx_tmp20 = (ratioC2 >= 0);
            						}
            						else {
HXLINE( 684)							_hx_tmp20 = false;
            						}
HXDLIN( 684)						if (_hx_tmp20) {
HXLINE( 684)							Float min15;
HXDLIN( 684)							if ((ratioA2 < ratioB2)) {
HXLINE( 684)								min15 = ratioA2;
            							}
            							else {
HXLINE( 684)								min15 = ratioB2;
            							}
HXDLIN( 684)							if (!((min15 < ratioC2))) {
HXLINE( 684)								min15 = ratioC2;
            							}
HXDLIN( 684)							Float max3;
HXDLIN( 684)							if ((ratioA2 > ratioB2)) {
HXLINE( 684)								max3 = ratioA2;
            							}
            							else {
HXLINE( 684)								max3 = ratioB2;
            							}
HXDLIN( 684)							if (!((max3 > ratioC2))) {
HXLINE( 684)								max3 = ratioC2;
            							}
HXLINE( 743)							max3 = ((( (Float)(1) ) - max3) / ( (Float)(2) ));
HXLINE( 684)							Float min16;
HXDLIN( 684)							if ((min15 < max3)) {
HXLINE( 684)								min16 = min15;
            							}
            							else {
HXLINE( 684)								min16 = ((max3 + min15) / ( (Float)(2) ));
            							}
HXDLIN( 684)							int i26 = ::Std_obj::_hx_int(((( (Float)(aA2) ) * soft3) * min16));
HXDLIN( 684)							if ((i26 > 255)) {
HXLINE(  24)								i26 = 255;
            							}
HXLINE( 684)							if ((i26 < 0)) {
HXLINE(  25)								i26 = 0;
            							}
HXLINE( 684)							a18 = i26;
HXDLIN( 684)							int i27 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN( 684)							if ((i27 > 255)) {
HXLINE(  24)								i27 = 255;
            							}
HXLINE( 684)							if ((i27 < 0)) {
HXLINE(  25)								i27 = 0;
            							}
HXLINE( 747)							r9 = i27;
HXLINE( 684)							int i28 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN( 684)							if ((i28 > 255)) {
HXLINE(  24)								i28 = 255;
            							}
HXLINE( 684)							if ((i28 < 0)) {
HXLINE(  25)								i28 = 0;
            							}
HXLINE( 748)							g9 = i28;
HXLINE( 684)							int i29 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN( 684)							if ((i29 > 255)) {
HXLINE(  24)								i29 = 255;
            							}
HXLINE( 684)							if ((i29 < 0)) {
HXLINE(  25)								i29 = 0;
            							}
HXLINE( 749)							b26 = i29;
HXLINE( 684)							{
HXLINE( 684)								int location5;
HXDLIN( 684)								if (pixelImage->useVirtualPos) {
HXLINE( 684)									location5 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px3) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 684)									location5 = ::Std_obj::_hx_int(( (Float)(((py3 * pixelImage->width) + px3)) ));
            								}
HXDLIN( 684)								bool _hx_tmp22;
HXDLIN( 684)								if (pixelImage->transparent) {
HXLINE( 684)									_hx_tmp22 = (a18 < 254);
            								}
            								else {
HXLINE( 684)									_hx_tmp22 = false;
            								}
HXDLIN( 684)								if (_hx_tmp22) {
HXLINE( 684)									int this85 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN( 684)									int old2;
HXDLIN( 684)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 684)										old2 = ((((((this85 >> 24) & 255) << 24) | ((this85 & 255) << 16)) | (((this85 >> 8) & 255) << 8)) | ((this85 >> 16) & 255));
            									}
            									else {
HXLINE( 684)										old2 = this85;
            									}
HXDLIN( 684)									int rhs2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
HXDLIN( 684)									Float a19;
HXDLIN( 684)									int this86 = ((old2 >> 24) & 255);
HXDLIN( 684)									if ((this86 == 0)) {
HXLINE( 684)										a19 = ((Float)0.);
            									}
            									else {
HXLINE( 684)										a19 = (( (Float)(this86) ) / ( (Float)(255) ));
            									}
HXDLIN( 684)									Float r15;
HXDLIN( 684)									int this87 = ((old2 >> 16) & 255);
HXDLIN( 684)									if ((this87 == 0)) {
HXLINE( 684)										r15 = ((Float)0.);
            									}
            									else {
HXLINE( 684)										r15 = (( (Float)(this87) ) / ( (Float)(255) ));
            									}
HXDLIN( 684)									Float g15;
HXDLIN( 684)									int this88 = ((old2 >> 8) & 255);
HXDLIN( 684)									if ((this88 == 0)) {
HXLINE( 684)										g15 = ((Float)0.);
            									}
            									else {
HXLINE( 684)										g15 = (( (Float)(this88) ) / ( (Float)(255) ));
            									}
HXDLIN( 684)									Float b110;
HXDLIN( 684)									int this89 = (old2 & 255);
HXDLIN( 684)									if ((this89 == 0)) {
HXLINE( 684)										b110 = ((Float)0.);
            									}
            									else {
HXLINE( 684)										b110 = (( (Float)(this89) ) / ( (Float)(255) ));
            									}
HXDLIN( 684)									Float a25;
HXDLIN( 684)									int this90 = ((rhs2 >> 24) & 255);
HXDLIN( 684)									if ((this90 == 0)) {
HXLINE( 684)										a25 = ((Float)0.);
            									}
            									else {
HXLINE( 684)										a25 = (( (Float)(this90) ) / ( (Float)(255) ));
            									}
HXDLIN( 684)									Float r25;
HXDLIN( 684)									int this91 = ((rhs2 >> 16) & 255);
HXDLIN( 684)									if ((this91 == 0)) {
HXLINE( 684)										r25 = ((Float)0.);
            									}
            									else {
HXLINE( 684)										r25 = (( (Float)(this91) ) / ( (Float)(255) ));
            									}
HXDLIN( 684)									Float g25;
HXDLIN( 684)									int this92 = ((rhs2 >> 8) & 255);
HXDLIN( 684)									if ((this92 == 0)) {
HXLINE( 684)										g25 = ((Float)0.);
            									}
            									else {
HXLINE( 684)										g25 = (( (Float)(this92) ) / ( (Float)(255) ));
            									}
HXDLIN( 684)									Float b27;
HXDLIN( 684)									int this93 = (rhs2 & 255);
HXDLIN( 684)									if ((this93 == 0)) {
HXLINE( 684)										b27 = ((Float)0.);
            									}
            									else {
HXLINE( 684)										b27 = (( (Float)(this93) ) / ( (Float)(255) ));
            									}
HXDLIN( 684)									Float a35 = (a19 * (( (Float)(1) ) - a25));
HXDLIN( 684)									int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 684)									int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 684)									int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a35) + (b27 * a25))));
HXDLIN( 684)									int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 684)									int blended5 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b28);
HXDLIN( 684)									{
HXLINE( 684)										int _hx_tmp23;
HXDLIN( 684)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 684)											_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            										}
            										else {
HXLINE( 684)											_hx_tmp23 = blended5;
            										}
HXDLIN( 684)										::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp23);
            									}
            								}
            								else {
HXLINE( 684)									int value2;
HXDLIN( 684)									if (pixelImage->isLittle) {
HXLINE( 684)										value2 = ((((a18 << 24) | (b26 << 16)) | (g9 << 8)) | r9);
            									}
            									else {
HXLINE( 684)										value2 = ((((a18 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
            									}
HXDLIN( 684)									::iterMagic::Iimg_obj::set(pixelImage->image,location5,value2);
            								}
            							}
HXLINE( 751)							found2 = true;
            						}
            						else {
HXLINE( 684)							if (found2) {
HXLINE( 684)								goto _hx_goto_837;
            							}
            						}
            					}
            					_hx_goto_837:;
            				}
            			}
            		}
HXDLIN( 684)		 ::pi_xy::algo::HitTri hitTriTop;
HXDLIN( 684)		if ((hasHit == false)) {
HXLINE( 684)			 ::pi_xy::algo::HitTri v7 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx1,by1,cx1,cy1,true);
HXDLIN( 684)			if (hasUndo2) {
HXLINE( 684)				v7->undoImage = undoImage6;
HXDLIN( 684)				v7->undoX = xIter32->start;
HXDLIN( 684)				v7->undoY = yIter32->start;
            			}
HXDLIN( 684)			hitTriTop = v7;
            		}
            		else {
HXLINE( 684)			hitTriTop = null();
            		}
HXLINE( 685)		Float soft31 = ( (Float)(40) );
HXDLIN( 685)		bool hasUndo3 = true;
HXDLIN( 685)		int aA3 = ((color >> 24) & 255);
HXDLIN( 685)		int rA3 = ((color >> 16) & 255);
HXDLIN( 685)		int gA3 = ((color >> 8) & 255);
HXDLIN( 685)		int bA3 = (color & 255);
HXDLIN( 685)		Float bcx3 = (ax1 - dx3);
HXDLIN( 685)		Float bcy3 = (ay1 - dy3);
HXDLIN( 685)		Float acx3 = (px - dx3);
HXDLIN( 685)		Float acy3 = (py - dy3);
HXDLIN( 685)		Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 685)		Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 685)		Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 685)		Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 685)		 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 685)		if ((px > ax1)) {
HXLINE( 685)			if ((px > dx3)) {
HXLINE( 685)				int min17;
HXDLIN( 685)				if ((ax1 > dx3)) {
HXLINE( 685)					min17 = ::Math_obj::floor(dx3);
            				}
            				else {
HXLINE( 685)					min17 = ::Math_obj::floor(ax1);
            				}
HXDLIN( 685)				int ii_min24 = min17;
HXDLIN( 685)				int ii_max24 = ::Math_obj::ceil(px);
HXDLIN( 685)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            			}
            			else {
HXLINE( 685)				int ii_min25 = ::Math_obj::floor(ax1);
HXDLIN( 685)				int ii_max25 = ::Math_obj::ceil(dx3);
HXDLIN( 685)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            			}
            		}
            		else {
HXLINE( 685)			if ((ax1 > dx3)) {
HXLINE( 685)				int min18;
HXDLIN( 685)				if ((px > dx3)) {
HXLINE( 685)					min18 = ::Math_obj::floor(dx3);
            				}
            				else {
HXLINE( 685)					min18 = ::Math_obj::ceil(px);
            				}
HXDLIN( 685)				int ii_min26 = min18;
HXDLIN( 685)				int ii_max26 = ::Math_obj::ceil(ax1);
HXDLIN( 685)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            			}
            			else {
HXLINE( 685)				int ii_min27 = ::Math_obj::floor(px);
HXDLIN( 685)				int ii_max27 = ::Math_obj::ceil(dx3);
HXDLIN( 685)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            			}
            		}
HXDLIN( 685)		 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 685)		if ((py > ay1)) {
HXLINE( 685)			if ((py > dy3)) {
HXLINE( 685)				int min19;
HXDLIN( 685)				if ((ay1 > dy3)) {
HXLINE( 685)					min19 = ::Math_obj::floor(dy3);
            				}
            				else {
HXLINE( 685)					min19 = ::Math_obj::floor(ay1);
            				}
HXDLIN( 685)				int ii_min28 = min19;
HXDLIN( 685)				int ii_max28 = ::Math_obj::ceil(py);
HXDLIN( 685)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            			}
            			else {
HXLINE( 685)				int ii_min29 = ::Math_obj::floor(ay1);
HXDLIN( 685)				int ii_max29 = ::Math_obj::ceil(dy3);
HXDLIN( 685)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            			}
            		}
            		else {
HXLINE( 685)			if ((ay1 > dy3)) {
HXLINE( 685)				int min20;
HXDLIN( 685)				if ((py > dy3)) {
HXLINE( 685)					min20 = ::Math_obj::floor(dy3);
            				}
            				else {
HXLINE( 685)					min20 = ::Math_obj::ceil(py);
            				}
HXDLIN( 685)				int ii_min30 = min20;
HXDLIN( 685)				int ii_max30 = ::Math_obj::ceil(ay1);
HXDLIN( 685)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            			}
            			else {
HXLINE( 685)				int ii_min31 = ::Math_obj::floor(py);
HXDLIN( 685)				int ii_max31 = ::Math_obj::ceil(dy3);
HXDLIN( 685)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            			}
            		}
HXDLIN( 685)		 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 685)		if (hasUndo3) {
HXLINE( 685)			int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 685)			int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 685)			 ::Dynamic imageType3 = null();
HXDLIN( 685)			 ::pi_xy::ImageStruct this94 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 685)			if (::hx::IsNull( imageType3 )) {
HXLINE(  54)				imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 685)			::Dynamic undoImage10;
HXDLIN( 685)			switch((int)(( (int)(imageType3) ))){
            				case (int)0: {
HXLINE( 685)					 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 685)					 ::iterMagic::BytesImg b29 = byt3;
HXDLIN( 685)					{
HXLINE( 685)						b29->width = width3;
HXDLIN( 685)						b29->height = height3;
HXDLIN( 685)						b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 685)						b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN( 685)						{
HXLINE( 685)							int len6 = b29->length;
HXDLIN( 685)							int w3 = 0;
HXDLIN( 685)							{
HXLINE( 685)								int _g60 = 0;
HXDLIN( 685)								int _g61 = b29->height;
HXDLIN( 685)								while((_g60 < _g61)){
HXLINE( 685)									_g60 = (_g60 + 1);
HXDLIN( 685)									int y9 = (_g60 - 1);
HXDLIN( 685)									{
HXLINE( 685)										int _g62 = 0;
HXDLIN( 685)										int _g63 = b29->width;
HXDLIN( 685)										while((_g62 < _g63)){
HXLINE( 685)											_g62 = (_g62 + 1);
HXDLIN( 685)											int x9 = (_g62 - 1);
HXDLIN( 685)											{
HXLINE( 685)												w3 = (w3 + 1);
HXDLIN( 685)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 685)											{
HXLINE( 685)												w3 = (w3 + 1);
HXDLIN( 685)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 685)											{
HXLINE( 685)												w3 = (w3 + 1);
HXDLIN( 685)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 685)											{
HXLINE( 685)												w3 = (w3 + 1);
HXDLIN( 685)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 685)					undoImage10 = b29;
            				}
            				break;
            				case (int)1: {
HXLINE( 685)					 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 685)					 ::iterMagic::ArrIntImg a26 = arrI3;
HXDLIN( 685)					{
HXLINE( 685)						a26->width = width3;
HXDLIN( 685)						a26->height = height3;
HXDLIN( 685)						a26->data = ::Array_obj< int >::__new(0);
HXDLIN( 685)						a26->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 685)						{
HXLINE( 685)							int _g64 = 0;
HXDLIN( 685)							int _g65 = a26->length;
HXDLIN( 685)							while((_g64 < _g65)){
HXLINE( 685)								_g64 = (_g64 + 1);
HXDLIN( 685)								int i30 = (_g64 - 1);
HXDLIN( 685)								a26->data[i30] = 0;
            							}
            						}
            					}
HXDLIN( 685)					undoImage10 = a26;
            				}
            				break;
            				case (int)2: {
HXLINE( 685)					 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 685)					 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN( 685)					{
HXLINE( 685)						b30->width = width3;
HXDLIN( 685)						b30->height = height3;
HXDLIN( 685)						b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 685)						int size3 = (b30->length * 4);
HXDLIN( 685)						b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 685)						{
HXLINE( 685)							int _g66 = 0;
HXDLIN( 685)							int _g67 = b30->length;
HXDLIN( 685)							while((_g66 < _g67)){
HXLINE( 685)								_g66 = (_g66 + 1);
HXDLIN( 685)								int i31 = (_g66 - 1);
HXDLIN( 685)								{
HXLINE( 685)									 ::haxe::io::ArrayBufferViewImpl this95 = b30->data;
HXDLIN( 685)									bool undoImage11;
HXDLIN( 685)									if ((i31 >= 0)) {
HXLINE( 685)										undoImage11 = (i31 < (this95->byteLength >> 2));
            									}
            									else {
HXLINE( 685)										undoImage11 = false;
            									}
HXDLIN( 685)									if (undoImage11) {
HXLINE( 685)										 ::haxe::io::Bytes _this3 = this95->bytes;
HXDLIN( 685)										int pos3 = ((i31 << 2) + this95->byteOffset);
HXDLIN( 685)										_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 685)										_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 685)										_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 685)										_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 685)					undoImage10 = b30;
            				}
            				break;
            				case (int)3: {
HXLINE( 685)					 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 685)					 ::iterMagic::VecIntImg v8 = vec3;
HXDLIN( 685)					{
HXLINE( 685)						v8->width = width3;
HXDLIN( 685)						v8->height = height3;
HXDLIN( 685)						v8->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 685)						v8->data = ::Array_obj< int >::__new(v8->length);
HXDLIN( 685)						{
HXLINE( 685)							int _g68 = 0;
HXDLIN( 685)							int _g69 = v8->length;
HXDLIN( 685)							while((_g68 < _g69)){
HXLINE( 685)								_g68 = (_g68 + 1);
HXDLIN( 685)								int i32 = (_g68 - 1);
HXDLIN( 685)								v8->data->__unsafe_set(i32,0);
            							}
            						}
            					}
HXDLIN( 685)					undoImage10 = v8;
            				}
            				break;
            				case (int)4: {
HXLINE( 685)					 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 685)					 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN( 685)					{
HXLINE( 685)						b31->width = width3;
HXDLIN( 685)						b31->height = height3;
HXDLIN( 685)						b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 685)						b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 685)						{
HXLINE( 685)							int len7 = b31->length;
HXDLIN( 685)							 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN( 685)							if (::hx::IsNull( d3->head )) {
HXLINE( 685)								int _g70 = 0;
HXDLIN( 685)								int _g71 = len7;
HXDLIN( 685)								while((_g70 < _g71)){
HXLINE( 685)									_g70 = (_g70 + 1);
HXDLIN( 685)									int i33 = (_g70 - 1);
HXDLIN( 685)									d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            								}
            							}
            							else {
HXLINE( 685)								int _g72 = 0;
HXDLIN( 685)								int _g73 = len7;
HXDLIN( 685)								while((_g72 < _g73)){
HXLINE( 685)									_g72 = (_g72 + 1);
HXDLIN( 685)									int i34 = (_g72 - 1);
HXDLIN( 685)									{
HXLINE( 685)										 ::haxe::ds::GenericCell_Int l3 = b31->data->head;
HXDLIN( 685)										 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 685)										{
HXLINE( 685)											int _g74 = 0;
HXDLIN( 685)											int _g75 = i34;
HXDLIN( 685)											while((_g74 < _g75)){
HXLINE( 685)												_g74 = (_g74 + 1);
HXDLIN( 685)												int i35 = (_g74 - 1);
HXLINE( 345)												prev3 = l3;
HXLINE( 346)												l3 = l3->next;
            											}
            										}
HXLINE( 685)										if (::hx::IsNull( prev3 )) {
HXLINE( 685)											b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 685)											l3 = null();
            										}
            										else {
HXLINE( 685)											prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 685)											l3 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 685)					undoImage10 = b31;
            				}
            				break;
            			}
HXDLIN( 685)			this94->image = undoImage10;
HXDLIN( 685)			this94->width = width3;
HXDLIN( 685)			this94->height = height3;
HXDLIN( 685)			this94->imageType = ( (int)(imageType3) );
HXDLIN( 685)			undoImage9 = this94;
HXDLIN( 685)			{
HXLINE( 685)				int rectLeft3 = xIter33->start;
HXDLIN( 685)				int rectTop3 = yIter33->start;
HXDLIN( 685)				int rectRight3 = xIter33->max;
HXDLIN( 685)				bool forceClear3 = false;
HXDLIN( 685)				{
HXLINE( 685)					int _g76 = rectTop3;
HXDLIN( 685)					int _g77 = yIter33->max;
HXDLIN( 685)					while((_g76 < _g77)){
HXLINE( 685)						_g76 = (_g76 + 1);
HXDLIN( 685)						int dy5 = (_g76 - 1);
HXDLIN( 685)						{
HXLINE( 685)							int _g78 = rectLeft3;
HXDLIN( 685)							int _g79 = rectRight3;
HXDLIN( 685)							while((_g78 < _g79)){
HXLINE( 685)								_g78 = (_g78 + 1);
HXDLIN( 685)								int dx5 = (_g78 - 1);
HXDLIN( 685)								::Dynamic this96 = pixelImage->image;
HXDLIN( 685)								int index12;
HXDLIN( 685)								if (pixelImage->useVirtualPos) {
HXLINE( 685)									index12 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx5) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 685)									index12 = ::Std_obj::_hx_int(( (Float)(((dy5 * pixelImage->width) + dx5)) ));
            								}
HXDLIN( 685)								int c9 = ::iterMagic::Iimg_obj::get(this96,index12);
HXDLIN( 685)								int col3;
HXDLIN( 685)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 685)									col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            								}
            								else {
HXLINE( 685)									col3 = c9;
            								}
HXDLIN( 685)								bool _hx_tmp24;
HXDLIN( 685)								if (pixelImage->useMask) {
HXLINE( 685)									_hx_tmp24 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 685)									_hx_tmp24 = false;
            								}
HXDLIN( 685)								if (_hx_tmp24) {
HXLINE( 685)									 ::pi_xy::ImageStruct this97 = pixelImage->mask;
HXDLIN( 685)									::Dynamic this98 = this97->image;
HXDLIN( 685)									int index13;
HXDLIN( 685)									if (this97->useVirtualPos) {
HXLINE( 685)										index13 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this97->virtualY) * ( (Float)(this97->width) )) + dx5) - this97->virtualX));
            									}
            									else {
HXLINE( 685)										index13 = ::Std_obj::_hx_int(( (Float)(((dy5 * this97->width) + dx5)) ));
            									}
HXDLIN( 685)									int c10 = ::iterMagic::Iimg_obj::get(this98,index13);
HXDLIN( 685)									int v9;
HXDLIN( 685)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 685)										v9 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            									}
            									else {
HXLINE( 685)										v9 = c10;
            									}
HXDLIN( 685)									int maskPixel3 = v9;
HXDLIN( 685)									int this99 = col3;
HXDLIN( 685)									if ((maskPixel3 == 0)) {
HXLINE( 685)										col3 = this99;
            									}
            									else {
HXLINE( 685)										Float m03;
HXDLIN( 685)										int this100 = ((maskPixel3 >> 24) & 255);
HXDLIN( 685)										if ((this100 == 0)) {
HXLINE( 685)											m03 = ((Float)0.);
            										}
            										else {
HXLINE( 685)											m03 = (( (Float)(this100) ) / ( (Float)(255) ));
            										}
HXDLIN( 685)										Float m13;
HXDLIN( 685)										int this101 = ((maskPixel3 >> 16) & 255);
HXDLIN( 685)										if ((this101 == 0)) {
HXLINE( 685)											m13 = ((Float)0.);
            										}
            										else {
HXLINE( 685)											m13 = (( (Float)(this101) ) / ( (Float)(255) ));
            										}
HXDLIN( 685)										Float m23;
HXDLIN( 685)										int this102 = ((maskPixel3 >> 8) & 255);
HXDLIN( 685)										if ((this102 == 0)) {
HXLINE( 685)											m23 = ((Float)0.);
            										}
            										else {
HXLINE( 685)											m23 = (( (Float)(this102) ) / ( (Float)(255) ));
            										}
HXDLIN( 685)										Float m33;
HXDLIN( 685)										int this103 = (maskPixel3 & 255);
HXDLIN( 685)										if ((this103 == 0)) {
HXLINE( 685)											m33 = ((Float)0.);
            										}
            										else {
HXLINE( 685)											m33 = (( (Float)(this103) ) / ( (Float)(255) ));
            										}
HXDLIN( 685)										int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this99 >> 24) & 255)) )));
HXDLIN( 685)										int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this99 >> 16) & 255)) )));
HXDLIN( 685)										int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this99 >> 8) & 255)) )));
HXDLIN( 685)										int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this99 & 255)) )));
HXDLIN( 685)										col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 685)								if ((col3 != 0)) {
HXLINE( 685)									int x10 = (dx5 - rectLeft3);
HXDLIN( 685)									int y10 = (dy5 - rectTop3);
HXDLIN( 685)									int c11 = col3;
HXDLIN( 685)									bool _hx_tmp25;
HXDLIN( 685)									if ((((c11 >> 24) & 255) < 254)) {
HXLINE( 685)										_hx_tmp25 = undoImage9->transparent;
            									}
            									else {
HXLINE( 685)										_hx_tmp25 = false;
            									}
HXDLIN( 685)									if (_hx_tmp25) {
HXLINE( 685)										int location6;
HXDLIN( 685)										if (undoImage9->useVirtualPos) {
HXLINE( 685)											location6 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 685)											location6 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            										}
HXDLIN( 685)										int this104 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 685)										int this105;
HXDLIN( 685)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 685)											this105 = ((((((this104 >> 24) & 255) << 24) | ((this104 & 255) << 16)) | (((this104 >> 8) & 255) << 8)) | ((this104 >> 16) & 255));
            										}
            										else {
HXLINE( 685)											this105 = this104;
            										}
HXDLIN( 685)										Float a110;
HXDLIN( 685)										int this106 = ((this105 >> 24) & 255);
HXDLIN( 685)										if ((this106 == 0)) {
HXLINE( 685)											a110 = ((Float)0.);
            										}
            										else {
HXLINE( 685)											a110 = (( (Float)(this106) ) / ( (Float)(255) ));
            										}
HXDLIN( 685)										Float r16;
HXDLIN( 685)										int this107 = ((this105 >> 16) & 255);
HXDLIN( 685)										if ((this107 == 0)) {
HXLINE( 685)											r16 = ((Float)0.);
            										}
            										else {
HXLINE( 685)											r16 = (( (Float)(this107) ) / ( (Float)(255) ));
            										}
HXDLIN( 685)										Float g16;
HXDLIN( 685)										int this108 = ((this105 >> 8) & 255);
HXDLIN( 685)										if ((this108 == 0)) {
HXLINE( 685)											g16 = ((Float)0.);
            										}
            										else {
HXLINE( 685)											g16 = (( (Float)(this108) ) / ( (Float)(255) ));
            										}
HXDLIN( 685)										Float b111;
HXDLIN( 685)										int this109 = (this105 & 255);
HXDLIN( 685)										if ((this109 == 0)) {
HXLINE( 685)											b111 = ((Float)0.);
            										}
            										else {
HXLINE( 685)											b111 = (( (Float)(this109) ) / ( (Float)(255) ));
            										}
HXDLIN( 685)										Float a27;
HXDLIN( 685)										int this110 = ((col3 >> 24) & 255);
HXDLIN( 685)										if ((this110 == 0)) {
HXLINE( 685)											a27 = ((Float)0.);
            										}
            										else {
HXLINE( 685)											a27 = (( (Float)(this110) ) / ( (Float)(255) ));
            										}
HXDLIN( 685)										Float r26;
HXDLIN( 685)										int this111 = ((col3 >> 16) & 255);
HXDLIN( 685)										if ((this111 == 0)) {
HXLINE( 685)											r26 = ((Float)0.);
            										}
            										else {
HXLINE( 685)											r26 = (( (Float)(this111) ) / ( (Float)(255) ));
            										}
HXDLIN( 685)										Float g26;
HXDLIN( 685)										int this112 = ((col3 >> 8) & 255);
HXDLIN( 685)										if ((this112 == 0)) {
HXLINE( 685)											g26 = ((Float)0.);
            										}
            										else {
HXLINE( 685)											g26 = (( (Float)(this112) ) / ( (Float)(255) ));
            										}
HXDLIN( 685)										Float b210;
HXDLIN( 685)										int this113 = (col3 & 255);
HXDLIN( 685)										if ((this113 == 0)) {
HXLINE( 685)											b210 = ((Float)0.);
            										}
            										else {
HXLINE( 685)											b210 = (( (Float)(this113) ) / ( (Float)(255) ));
            										}
HXDLIN( 685)										Float a36 = (a110 * (( (Float)(1) ) - a27));
HXDLIN( 685)										int r17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a27))));
HXDLIN( 685)										int g17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a27))));
HXDLIN( 685)										int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a36) + (b210 * a27))));
HXDLIN( 685)										int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a27)));
HXDLIN( 685)										int blended6 = ((((a28 << 24) | (r17 << 16)) | (g17 << 8)) | b32);
HXDLIN( 685)										{
HXLINE( 685)											int _hx_tmp26;
HXDLIN( 685)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 685)												_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            											}
            											else {
HXLINE( 685)												_hx_tmp26 = blended6;
            											}
HXDLIN( 685)											::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            										}
            									}
            									else {
HXLINE( 685)										::Dynamic this114 = undoImage9->image;
HXDLIN( 685)										int index14;
HXDLIN( 685)										if (undoImage9->useVirtualPos) {
HXLINE( 685)											index14 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 685)											index14 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            										}
HXDLIN( 685)										int _hx_tmp27;
HXDLIN( 685)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 685)											_hx_tmp27 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            										}
            										else {
HXLINE( 685)											_hx_tmp27 = c11;
            										}
HXDLIN( 685)										::iterMagic::Iimg_obj::set(this114,index14,_hx_tmp27);
            									}
            								}
            								else {
HXLINE( 685)									if (forceClear3) {
HXLINE( 685)										::Dynamic this115 = undoImage9->image;
HXDLIN( 685)										int x11 = (dx5 - rectLeft3);
HXDLIN( 685)										int y11 = (dy5 - rectTop3);
HXDLIN( 685)										int index15;
HXDLIN( 685)										if (undoImage9->useVirtualPos) {
HXLINE( 685)											index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 685)											index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            										}
HXDLIN( 685)										::iterMagic::Iimg_obj::set(this115,index15,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 685)		bool found3 = false;
HXDLIN( 685)		Float min21 = ( (Float)(0) );
HXDLIN( 685)		Float max4 = ( (Float)(0) );
HXDLIN( 685)		int a29 = 0;
HXDLIN( 685)		int r18 = 0;
HXDLIN( 685)		int g18 = 0;
HXDLIN( 685)		int b33 = 0;
HXDLIN( 685)		{
HXLINE( 685)			int _g_min6 = xIter33->start;
HXDLIN( 685)			int _g_max6 = xIter33->max;
HXDLIN( 685)			while((_g_min6 < _g_max6)){
HXLINE( 685)				_g_min6 = (_g_min6 + 1);
HXDLIN( 685)				int px4 = (_g_min6 - 1);
HXDLIN( 685)				Float pcx3 = (( (Float)(px4) ) - dx3);
HXLINE( 695)				found3 = false;
HXLINE( 685)				{
HXLINE( 685)					int _g_min7 = yIter33->start;
HXDLIN( 685)					int _g_max7 = yIter33->max;
HXDLIN( 685)					while((_g_min7 < _g_max7)){
HXLINE( 685)						_g_min7 = (_g_min7 + 1);
HXDLIN( 685)						int py4 = (_g_min7 - 1);
HXDLIN( 685)						Float pcy3 = (( (Float)(py4) ) - dy3);
HXDLIN( 685)						Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 685)						Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 685)						Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 685)						Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 685)						Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 685)						bool _hx_tmp28;
HXDLIN( 685)						bool _hx_tmp29;
HXDLIN( 685)						if ((ratioA3 >= 0)) {
HXLINE( 685)							_hx_tmp29 = (ratioB3 >= 0);
            						}
            						else {
HXLINE( 685)							_hx_tmp29 = false;
            						}
HXDLIN( 685)						if (_hx_tmp29) {
HXLINE( 685)							_hx_tmp28 = (ratioC3 >= 0);
            						}
            						else {
HXLINE( 685)							_hx_tmp28 = false;
            						}
HXDLIN( 685)						if (_hx_tmp28) {
HXLINE( 685)							Float min22;
HXDLIN( 685)							if ((ratioA3 < ratioB3)) {
HXLINE( 685)								min22 = ratioA3;
            							}
            							else {
HXLINE( 685)								min22 = ratioB3;
            							}
HXDLIN( 685)							if (!((min22 < ratioC3))) {
HXLINE( 685)								min22 = ratioC3;
            							}
HXDLIN( 685)							Float max5;
HXDLIN( 685)							if ((ratioA3 > ratioB3)) {
HXLINE( 685)								max5 = ratioA3;
            							}
            							else {
HXLINE( 685)								max5 = ratioB3;
            							}
HXDLIN( 685)							if (!((max5 > ratioC3))) {
HXLINE( 685)								max5 = ratioC3;
            							}
HXLINE( 743)							max5 = ((( (Float)(1) ) - max5) / ( (Float)(2) ));
HXLINE( 685)							Float min23;
HXDLIN( 685)							if ((min22 < max5)) {
HXLINE( 685)								min23 = min22;
            							}
            							else {
HXLINE( 685)								min23 = ((max5 + min22) / ( (Float)(2) ));
            							}
HXDLIN( 685)							int i36 = ::Std_obj::_hx_int(((( (Float)(aA3) ) * soft31) * min23));
HXDLIN( 685)							if ((i36 > 255)) {
HXLINE(  24)								i36 = 255;
            							}
HXLINE( 685)							if ((i36 < 0)) {
HXLINE(  25)								i36 = 0;
            							}
HXLINE( 685)							a29 = i36;
HXDLIN( 685)							int i37 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN( 685)							if ((i37 > 255)) {
HXLINE(  24)								i37 = 255;
            							}
HXLINE( 685)							if ((i37 < 0)) {
HXLINE(  25)								i37 = 0;
            							}
HXLINE( 747)							r18 = i37;
HXLINE( 685)							int i38 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN( 685)							if ((i38 > 255)) {
HXLINE(  24)								i38 = 255;
            							}
HXLINE( 685)							if ((i38 < 0)) {
HXLINE(  25)								i38 = 0;
            							}
HXLINE( 748)							g18 = i38;
HXLINE( 685)							int i39 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN( 685)							if ((i39 > 255)) {
HXLINE(  24)								i39 = 255;
            							}
HXLINE( 685)							if ((i39 < 0)) {
HXLINE(  25)								i39 = 0;
            							}
HXLINE( 749)							b33 = i39;
HXLINE( 685)							{
HXLINE( 685)								int location7;
HXDLIN( 685)								if (pixelImage->useVirtualPos) {
HXLINE( 685)									location7 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px4) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 685)									location7 = ::Std_obj::_hx_int(( (Float)(((py4 * pixelImage->width) + px4)) ));
            								}
HXDLIN( 685)								bool _hx_tmp30;
HXDLIN( 685)								if (pixelImage->transparent) {
HXLINE( 685)									_hx_tmp30 = (a29 < 254);
            								}
            								else {
HXLINE( 685)									_hx_tmp30 = false;
            								}
HXDLIN( 685)								if (_hx_tmp30) {
HXLINE( 685)									int this116 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN( 685)									int old3;
HXDLIN( 685)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 685)										old3 = ((((((this116 >> 24) & 255) << 24) | ((this116 & 255) << 16)) | (((this116 >> 8) & 255) << 8)) | ((this116 >> 16) & 255));
            									}
            									else {
HXLINE( 685)										old3 = this116;
            									}
HXDLIN( 685)									int rhs3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
HXDLIN( 685)									Float a111;
HXDLIN( 685)									int this117 = ((old3 >> 24) & 255);
HXDLIN( 685)									if ((this117 == 0)) {
HXLINE( 685)										a111 = ((Float)0.);
            									}
            									else {
HXLINE( 685)										a111 = (( (Float)(this117) ) / ( (Float)(255) ));
            									}
HXDLIN( 685)									Float r19;
HXDLIN( 685)									int this118 = ((old3 >> 16) & 255);
HXDLIN( 685)									if ((this118 == 0)) {
HXLINE( 685)										r19 = ((Float)0.);
            									}
            									else {
HXLINE( 685)										r19 = (( (Float)(this118) ) / ( (Float)(255) ));
            									}
HXDLIN( 685)									Float g19;
HXDLIN( 685)									int this119 = ((old3 >> 8) & 255);
HXDLIN( 685)									if ((this119 == 0)) {
HXLINE( 685)										g19 = ((Float)0.);
            									}
            									else {
HXLINE( 685)										g19 = (( (Float)(this119) ) / ( (Float)(255) ));
            									}
HXDLIN( 685)									Float b112;
HXDLIN( 685)									int this120 = (old3 & 255);
HXDLIN( 685)									if ((this120 == 0)) {
HXLINE( 685)										b112 = ((Float)0.);
            									}
            									else {
HXLINE( 685)										b112 = (( (Float)(this120) ) / ( (Float)(255) ));
            									}
HXDLIN( 685)									Float a210;
HXDLIN( 685)									int this121 = ((rhs3 >> 24) & 255);
HXDLIN( 685)									if ((this121 == 0)) {
HXLINE( 685)										a210 = ((Float)0.);
            									}
            									else {
HXLINE( 685)										a210 = (( (Float)(this121) ) / ( (Float)(255) ));
            									}
HXDLIN( 685)									Float r27;
HXDLIN( 685)									int this122 = ((rhs3 >> 16) & 255);
HXDLIN( 685)									if ((this122 == 0)) {
HXLINE( 685)										r27 = ((Float)0.);
            									}
            									else {
HXLINE( 685)										r27 = (( (Float)(this122) ) / ( (Float)(255) ));
            									}
HXDLIN( 685)									Float g27;
HXDLIN( 685)									int this123 = ((rhs3 >> 8) & 255);
HXDLIN( 685)									if ((this123 == 0)) {
HXLINE( 685)										g27 = ((Float)0.);
            									}
            									else {
HXLINE( 685)										g27 = (( (Float)(this123) ) / ( (Float)(255) ));
            									}
HXDLIN( 685)									Float b211;
HXDLIN( 685)									int this124 = (rhs3 & 255);
HXDLIN( 685)									if ((this124 == 0)) {
HXLINE( 685)										b211 = ((Float)0.);
            									}
            									else {
HXLINE( 685)										b211 = (( (Float)(this124) ) / ( (Float)(255) ));
            									}
HXDLIN( 685)									Float a37 = (a111 * (( (Float)(1) ) - a210));
HXDLIN( 685)									int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a37) + (r27 * a210))));
HXDLIN( 685)									int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a37) + (g27 * a210))));
HXDLIN( 685)									int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a37) + (b211 * a210))));
HXDLIN( 685)									int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a210)));
HXDLIN( 685)									int blended7 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b34);
HXDLIN( 685)									{
HXLINE( 685)										int _hx_tmp31;
HXDLIN( 685)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 685)											_hx_tmp31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            										}
            										else {
HXLINE( 685)											_hx_tmp31 = blended7;
            										}
HXDLIN( 685)										::iterMagic::Iimg_obj::set(pixelImage->image,location7,_hx_tmp31);
            									}
            								}
            								else {
HXLINE( 685)									int value3;
HXDLIN( 685)									if (pixelImage->isLittle) {
HXLINE( 685)										value3 = ((((a29 << 24) | (b33 << 16)) | (g18 << 8)) | r18);
            									}
            									else {
HXLINE( 685)										value3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
            									}
HXDLIN( 685)									::iterMagic::Iimg_obj::set(pixelImage->image,location7,value3);
            								}
            							}
HXLINE( 751)							found3 = true;
            						}
            						else {
HXLINE( 685)							if (found3) {
HXLINE( 685)								goto _hx_goto_849;
            							}
            						}
            					}
            					_hx_goto_849:;
            				}
            			}
            		}
HXDLIN( 685)		 ::pi_xy::algo::HitTri hitTriBottom;
HXDLIN( 685)		if ((hasHit == false)) {
HXLINE( 685)			 ::pi_xy::algo::HitTri v10 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,px,py,ax1,ay1,dx3,dy3,true);
HXDLIN( 685)			if (hasUndo3) {
HXLINE( 685)				v10->undoImage = undoImage9;
HXDLIN( 685)				v10->undoX = xIter33->start;
HXDLIN( 685)				v10->undoY = yIter33->start;
            			}
HXDLIN( 685)			hitTriBottom = v10;
            		}
            		else {
HXLINE( 685)			hitTriBottom = null();
            		}
HXLINE( 687)		if (hasHit) {
HXLINE( 688)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(2)->init(0,hitTriTop)->init(1,hitTriBottom));
HXLINE( 689)			if (::hx::IsNotNull( hitQuad )) {
HXLINE( 690)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXLINE( 691)			hitArr->triArr->push(hitQuad->triBCD);
HXLINE( 692)			return hitArr;
            		}
            		else {
HXLINE( 694)			return null();
            		}
HXLINE( 687)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(ArrowPixel_Fields__obj,fillSoftLineFixedArrowBoth,return )

 ::pi_xy::algo::HitTriArray ArrowPixel_Fields__obj::gradThickLineFixedArrowBoth( ::pi_xy::ImageStruct pixelImage,Float px,Float py,Float qx,Float qy,Float arrowWidth,Float arrowHeight,Float thick,int color1,int color2,::hx::Null< bool >  __o_hasHit){
            		bool hasHit = __o_hasHit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_63f36ef650858c14_702_gradThickLineFixedArrowBoth)
HXLINE( 703)		Float goldenRatio = ((Float)1.61803398875);
HXLINE( 704)		Float o = (qy - py);
HXLINE( 705)		Float a = (qx - px);
HXLINE( 706)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXLINE( 707)		Float theta = ::Math_obj::atan2(o,a);
HXLINE( 708)		Float thicker;
HXDLIN( 708)		if ((arrowWidth > (thick * ((Float)1.1)))) {
HXLINE( 708)			thicker = arrowWidth;
            		}
            		else {
HXLINE( 708)			thicker = ((( (Float)(2) ) * thick) * goldenRatio);
            		}
HXLINE( 714)		Float sin = ::Math_obj::sin(theta);
HXLINE( 715)		Float cos = ::Math_obj::cos(theta);
HXLINE( 716)		Float radius = (thick / ( (Float)(2) ));
HXLINE( 717)		Float radius2 = (thicker / ( (Float)(2) ));
HXLINE( 718)		Float h2;
HXDLIN( 718)		if ((arrowHeight < (h * ((Float)1.1)))) {
HXLINE( 718)			h2 = (h - arrowHeight);
            		}
            		else {
HXLINE( 718)			h2 = (h / goldenRatio);
            		}
HXLINE( 723)		Float hSmall = (h - h2);
HXLINE( 725)		Float px_ = hSmall;
HXLINE( 726)		Float py_ = ((Float)0.);
HXLINE( 727)		Float temp = ((Float)0.);
HXLINE( 729)		temp = (px + ((px_ * cos) - (py_ * sin)));
HXLINE( 730)		py_ = (py + ((py_ * cos) + (px_ * sin)));
HXLINE( 731)		px_ = temp;
HXLINE( 733)		Float h1 = (h2 - hSmall);
HXDLIN( 733)		Float sin1 = ::Math_obj::sin(theta);
HXDLIN( 733)		Float cos1 = ::Math_obj::cos(theta);
HXDLIN( 733)		Float radius1 = (thick / ( (Float)(2) ));
HXDLIN( 733)		Float dx = ((Float)0.1);
HXDLIN( 733)		Float dy = radius1;
HXDLIN( 733)		Float cx = h1;
HXDLIN( 733)		Float cy = radius1;
HXDLIN( 733)		Float bx = h1;
HXDLIN( 733)		Float by = -(radius1);
HXDLIN( 733)		Float ax = ((Float)0.1);
HXDLIN( 733)		Float ay = -(radius1);
HXDLIN( 733)		Float temp1 = ((Float)0.);
HXLINE( 474)		temp1 = (px_ + ((ax * cos1) - (ay * sin1)));
HXLINE( 475)		ay = (py_ + ((ay * cos1) + (ax * sin1)));
HXLINE( 476)		ax = temp1;
HXLINE( 478)		temp1 = (px_ + ((bx * cos1) - (by * sin1)));
HXLINE( 479)		by = (py_ + ((by * cos1) + (bx * sin1)));
HXLINE( 480)		bx = temp1;
HXLINE( 482)		temp1 = (px_ + ((cx * cos1) - (cy * sin1)));
HXLINE( 483)		cy = (py_ + ((cy * cos1) + (cx * sin1)));
HXLINE( 484)		cx = temp1;
HXLINE( 486)		temp1 = (px_ + ((dx * cos1) - (dy * sin1)));
HXLINE( 487)		dy = (py_ + ((dy * cos1) + (dx * sin1)));
HXLINE( 488)		dx = temp1;
HXLINE( 733)		{
HXLINE( 733)			bool hasUndo = false;
HXDLIN( 733)			int aA = ((color1 >> 24) & 255);
HXDLIN( 733)			int rA = ((color1 >> 16) & 255);
HXDLIN( 733)			int gA = ((color1 >> 8) & 255);
HXDLIN( 733)			int bA = (color1 & 255);
HXDLIN( 733)			int aB = ((color1 >> 24) & 255);
HXDLIN( 733)			int rB = ((color1 >> 16) & 255);
HXDLIN( 733)			int gB = ((color1 >> 8) & 255);
HXDLIN( 733)			int bB = (color1 & 255);
HXDLIN( 733)			int aC = ((color2 >> 24) & 255);
HXDLIN( 733)			int rC = ((color2 >> 16) & 255);
HXDLIN( 733)			int gC = ((color2 >> 8) & 255);
HXDLIN( 733)			int bC = (color2 & 255);
HXDLIN( 733)			Float bcx = (bx - dx);
HXDLIN( 733)			Float bcy = (by - dy);
HXDLIN( 733)			Float acx = (ax - dx);
HXDLIN( 733)			Float acy = (ay - dy);
HXDLIN( 733)			Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN( 733)			Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN( 733)			Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN( 733)			Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN( 733)			 ::pi_xy::iter::IntIterStart xIter3;
HXDLIN( 733)			if ((ax > bx)) {
HXLINE( 733)				if ((ax > dx)) {
HXLINE( 733)					int min;
HXDLIN( 733)					if ((bx > dx)) {
HXLINE( 733)						min = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 733)						min = ::Math_obj::floor(bx);
            					}
HXDLIN( 733)					int ii_min = min;
HXDLIN( 733)					int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 733)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
            				}
            				else {
HXLINE( 733)					int ii_min1 = ::Math_obj::floor(bx);
HXDLIN( 733)					int ii_max1 = ::Math_obj::ceil(dx);
HXDLIN( 733)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
            				}
            			}
            			else {
HXLINE( 733)				if ((bx > dx)) {
HXLINE( 733)					int min1;
HXDLIN( 733)					if ((ax > dx)) {
HXLINE( 733)						min1 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 733)						min1 = ::Math_obj::ceil(ax);
            					}
HXDLIN( 733)					int ii_min2 = min1;
HXDLIN( 733)					int ii_max2 = ::Math_obj::ceil(bx);
HXDLIN( 733)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min2,ii_max2);
            				}
            				else {
HXLINE( 733)					int ii_min3 = ::Math_obj::floor(ax);
HXDLIN( 733)					int ii_max3 = ::Math_obj::ceil(dx);
HXDLIN( 733)					xIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min3,ii_max3);
            				}
            			}
HXDLIN( 733)			 ::pi_xy::iter::IntIterStart yIter3;
HXDLIN( 733)			if ((ay > by)) {
HXLINE( 733)				if ((ay > dy)) {
HXLINE( 733)					int min2;
HXDLIN( 733)					if ((by > dy)) {
HXLINE( 733)						min2 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 733)						min2 = ::Math_obj::floor(by);
            					}
HXDLIN( 733)					int ii_min4 = min2;
HXDLIN( 733)					int ii_max4 = ::Math_obj::ceil(ay);
HXDLIN( 733)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min4,ii_max4);
            				}
            				else {
HXLINE( 733)					int ii_min5 = ::Math_obj::floor(by);
HXDLIN( 733)					int ii_max5 = ::Math_obj::ceil(dy);
HXDLIN( 733)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min5,ii_max5);
            				}
            			}
            			else {
HXLINE( 733)				if ((by > dy)) {
HXLINE( 733)					int min3;
HXDLIN( 733)					if ((ay > dy)) {
HXLINE( 733)						min3 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 733)						min3 = ::Math_obj::ceil(ay);
            					}
HXDLIN( 733)					int ii_min6 = min3;
HXDLIN( 733)					int ii_max6 = ::Math_obj::ceil(by);
HXDLIN( 733)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min6,ii_max6);
            				}
            				else {
HXLINE( 733)					int ii_min7 = ::Math_obj::floor(ay);
HXDLIN( 733)					int ii_max7 = ::Math_obj::ceil(dy);
HXDLIN( 733)					yIter3 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min7,ii_max7);
            				}
            			}
HXDLIN( 733)			 ::pi_xy::ImageStruct undoImage = null();
HXDLIN( 733)			if (hasUndo) {
HXLINE( 733)				int width = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 733)				int height = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 733)				 ::Dynamic imageType = null();
HXDLIN( 733)				 ::pi_xy::ImageStruct this1 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 733)				if (::hx::IsNull( imageType )) {
HXLINE(  54)					imageType = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 733)				::Dynamic undoImage1;
HXDLIN( 733)				switch((int)(( (int)(imageType) ))){
            					case (int)0: {
HXLINE( 733)						 ::iterMagic::BytesImg byt =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 733)						 ::iterMagic::BytesImg b = byt;
HXDLIN( 733)						{
HXLINE( 733)							b->width = width;
HXDLIN( 733)							b->height = height;
HXDLIN( 733)							b->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 733)							b->data = ::haxe::io::Bytes_obj::alloc((b->length * 4));
HXDLIN( 733)							{
HXLINE( 733)								int len = b->length;
HXDLIN( 733)								int w = 0;
HXDLIN( 733)								{
HXLINE( 733)									int _g = 0;
HXDLIN( 733)									int _g1 = b->height;
HXDLIN( 733)									while((_g < _g1)){
HXLINE( 733)										_g = (_g + 1);
HXDLIN( 733)										int y = (_g - 1);
HXDLIN( 733)										{
HXLINE( 733)											int _g2 = 0;
HXDLIN( 733)											int _g3 = b->width;
HXDLIN( 733)											while((_g2 < _g3)){
HXLINE( 733)												_g2 = (_g2 + 1);
HXDLIN( 733)												int x = (_g2 - 1);
HXDLIN( 733)												{
HXLINE( 733)													w = (w + 1);
HXDLIN( 733)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 733)												{
HXLINE( 733)													w = (w + 1);
HXDLIN( 733)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 733)												{
HXLINE( 733)													w = (w + 1);
HXDLIN( 733)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 733)												{
HXLINE( 733)													w = (w + 1);
HXDLIN( 733)													b->data->b[(w - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 733)						undoImage1 = b;
            					}
            					break;
            					case (int)1: {
HXLINE( 733)						 ::iterMagic::ArrIntImg arrI =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 733)						 ::iterMagic::ArrIntImg a1 = arrI;
HXDLIN( 733)						{
HXLINE( 733)							a1->width = width;
HXDLIN( 733)							a1->height = height;
HXDLIN( 733)							a1->data = ::Array_obj< int >::__new(0);
HXDLIN( 733)							a1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 733)							{
HXLINE( 733)								int _g4 = 0;
HXDLIN( 733)								int _g5 = a1->length;
HXDLIN( 733)								while((_g4 < _g5)){
HXLINE( 733)									_g4 = (_g4 + 1);
HXDLIN( 733)									int i = (_g4 - 1);
HXDLIN( 733)									a1->data[i] = 0;
            								}
            							}
            						}
HXDLIN( 733)						undoImage1 = a1;
            					}
            					break;
            					case (int)2: {
HXLINE( 733)						 ::iterMagic::U32ArrImg u32a =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 733)						 ::iterMagic::U32ArrImg b1 = u32a;
HXDLIN( 733)						{
HXLINE( 733)							b1->width = width;
HXDLIN( 733)							b1->height = height;
HXDLIN( 733)							b1->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 733)							int size = (b1->length * 4);
HXDLIN( 733)							b1->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 733)							{
HXLINE( 733)								int _g6 = 0;
HXDLIN( 733)								int _g7 = b1->length;
HXDLIN( 733)								while((_g6 < _g7)){
HXLINE( 733)									_g6 = (_g6 + 1);
HXDLIN( 733)									int i1 = (_g6 - 1);
HXDLIN( 733)									{
HXLINE( 733)										 ::haxe::io::ArrayBufferViewImpl this2 = b1->data;
HXDLIN( 733)										bool undoImage2;
HXDLIN( 733)										if ((i1 >= 0)) {
HXLINE( 733)											undoImage2 = (i1 < (this2->byteLength >> 2));
            										}
            										else {
HXLINE( 733)											undoImage2 = false;
            										}
HXDLIN( 733)										if (undoImage2) {
HXLINE( 733)											 ::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 733)											int pos = ((i1 << 2) + this2->byteOffset);
HXDLIN( 733)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 733)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 733)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 733)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 733)						undoImage1 = b1;
            					}
            					break;
            					case (int)3: {
HXLINE( 733)						 ::iterMagic::VecIntImg vec =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 733)						 ::iterMagic::VecIntImg v = vec;
HXDLIN( 733)						{
HXLINE( 733)							v->width = width;
HXDLIN( 733)							v->height = height;
HXDLIN( 733)							v->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 733)							v->data = ::Array_obj< int >::__new(v->length);
HXDLIN( 733)							{
HXLINE( 733)								int _g8 = 0;
HXDLIN( 733)								int _g9 = v->length;
HXDLIN( 733)								while((_g8 < _g9)){
HXLINE( 733)									_g8 = (_g8 + 1);
HXDLIN( 733)									int i2 = (_g8 - 1);
HXDLIN( 733)									v->data->__unsafe_set(i2,0);
            								}
            							}
            						}
HXDLIN( 733)						undoImage1 = v;
            					}
            					break;
            					case (int)4: {
HXLINE( 733)						 ::iterMagic::StackIntImg sInt =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 733)						 ::iterMagic::StackIntImg b2 = sInt;
HXDLIN( 733)						{
HXLINE( 733)							b2->width = width;
HXDLIN( 733)							b2->height = height;
HXDLIN( 733)							b2->length = ::Std_obj::_hx_int(( (Float)((width * height)) ));
HXDLIN( 733)							b2->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 733)							{
HXLINE( 733)								int len1 = b2->length;
HXDLIN( 733)								 ::haxe::ds::GenericStack_Int d = b2->data;
HXDLIN( 733)								if (::hx::IsNull( d->head )) {
HXLINE( 733)									int _g10 = 0;
HXDLIN( 733)									int _g11 = len1;
HXDLIN( 733)									while((_g10 < _g11)){
HXLINE( 733)										_g10 = (_g10 + 1);
HXDLIN( 733)										int i3 = (_g10 - 1);
HXDLIN( 733)										d->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d->head);
            									}
            								}
            								else {
HXLINE( 733)									int _g12 = 0;
HXDLIN( 733)									int _g13 = len1;
HXDLIN( 733)									while((_g12 < _g13)){
HXLINE( 733)										_g12 = (_g12 + 1);
HXDLIN( 733)										int i4 = (_g12 - 1);
HXDLIN( 733)										{
HXLINE( 733)											 ::haxe::ds::GenericCell_Int l = b2->data->head;
HXDLIN( 733)											 ::haxe::ds::GenericCell_Int prev = null();
HXDLIN( 733)											{
HXLINE( 733)												int _g14 = 0;
HXDLIN( 733)												int _g15 = i4;
HXDLIN( 733)												while((_g14 < _g15)){
HXLINE( 733)													_g14 = (_g14 + 1);
HXDLIN( 733)													int i5 = (_g14 - 1);
HXLINE( 345)													prev = l;
HXLINE( 346)													l = l->next;
            												}
            											}
HXLINE( 733)											if (::hx::IsNull( prev )) {
HXLINE( 733)												b2->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 733)												l = null();
            											}
            											else {
HXLINE( 733)												prev->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l->next);
HXDLIN( 733)												l = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 733)						undoImage1 = b2;
            					}
            					break;
            				}
HXDLIN( 733)				this1->image = undoImage1;
HXDLIN( 733)				this1->width = width;
HXDLIN( 733)				this1->height = height;
HXDLIN( 733)				this1->imageType = ( (int)(imageType) );
HXDLIN( 733)				undoImage = this1;
HXDLIN( 733)				{
HXLINE( 733)					int rectLeft = xIter3->start;
HXDLIN( 733)					int rectTop = yIter3->start;
HXDLIN( 733)					int rectRight = xIter3->max;
HXDLIN( 733)					bool forceClear = false;
HXDLIN( 733)					{
HXLINE( 733)						int _g16 = rectTop;
HXDLIN( 733)						int _g17 = yIter3->max;
HXDLIN( 733)						while((_g16 < _g17)){
HXLINE( 733)							_g16 = (_g16 + 1);
HXDLIN( 733)							int dy1 = (_g16 - 1);
HXDLIN( 733)							{
HXLINE( 733)								int _g18 = rectLeft;
HXDLIN( 733)								int _g19 = rectRight;
HXDLIN( 733)								while((_g18 < _g19)){
HXLINE( 733)									_g18 = (_g18 + 1);
HXDLIN( 733)									int dx1 = (_g18 - 1);
HXDLIN( 733)									::Dynamic this3 = pixelImage->image;
HXDLIN( 733)									int index;
HXDLIN( 733)									if (pixelImage->useVirtualPos) {
HXLINE( 733)										index = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx1) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 733)										index = ::Std_obj::_hx_int(( (Float)(((dy1 * pixelImage->width) + dx1)) ));
            									}
HXDLIN( 733)									int c = ::iterMagic::Iimg_obj::get(this3,index);
HXDLIN( 733)									int col;
HXDLIN( 733)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 733)										col = c;
            									}
HXDLIN( 733)									bool _hx_tmp;
HXDLIN( 733)									if (pixelImage->useMask) {
HXLINE( 733)										_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE( 733)										_hx_tmp = false;
            									}
HXDLIN( 733)									if (_hx_tmp) {
HXLINE( 733)										 ::pi_xy::ImageStruct this4 = pixelImage->mask;
HXDLIN( 733)										::Dynamic this5 = this4->image;
HXDLIN( 733)										int index1;
HXDLIN( 733)										if (this4->useVirtualPos) {
HXLINE( 733)											index1 = ::Std_obj::_hx_int(((((( (Float)(dy1) ) - this4->virtualY) * ( (Float)(this4->width) )) + dx1) - this4->virtualX));
            										}
            										else {
HXLINE( 733)											index1 = ::Std_obj::_hx_int(( (Float)(((dy1 * this4->width) + dx1)) ));
            										}
HXDLIN( 733)										int c1 = ::iterMagic::Iimg_obj::get(this5,index1);
HXDLIN( 733)										int v1;
HXDLIN( 733)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)											v1 = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXLINE( 733)											v1 = c1;
            										}
HXDLIN( 733)										int maskPixel = v1;
HXDLIN( 733)										int this6 = col;
HXDLIN( 733)										if ((maskPixel == 0)) {
HXLINE( 733)											col = this6;
            										}
            										else {
HXLINE( 733)											Float m0;
HXDLIN( 733)											int this7 = ((maskPixel >> 24) & 255);
HXDLIN( 733)											if ((this7 == 0)) {
HXLINE( 733)												m0 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												m0 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float m1;
HXDLIN( 733)											int this8 = ((maskPixel >> 16) & 255);
HXDLIN( 733)											if ((this8 == 0)) {
HXLINE( 733)												m1 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												m1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float m2;
HXDLIN( 733)											int this9 = ((maskPixel >> 8) & 255);
HXDLIN( 733)											if ((this9 == 0)) {
HXLINE( 733)												m2 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												m2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float m3;
HXDLIN( 733)											int this10 = (maskPixel & 255);
HXDLIN( 733)											if ((this10 == 0)) {
HXLINE( 733)												m3 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												m3 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 733)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 733)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 733)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 733)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 733)									if ((col != 0)) {
HXLINE( 733)										int x1 = (dx1 - rectLeft);
HXDLIN( 733)										int y1 = (dy1 - rectTop);
HXDLIN( 733)										int c2 = col;
HXDLIN( 733)										bool _hx_tmp1;
HXDLIN( 733)										if ((((c2 >> 24) & 255) < 254)) {
HXLINE( 733)											_hx_tmp1 = undoImage->transparent;
            										}
            										else {
HXLINE( 733)											_hx_tmp1 = false;
            										}
HXDLIN( 733)										if (_hx_tmp1) {
HXLINE( 733)											int location;
HXDLIN( 733)											if (undoImage->useVirtualPos) {
HXLINE( 733)												location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXLINE( 733)												location = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 733)											int this11 = ::iterMagic::Iimg_obj::get(undoImage->image,location);
HXDLIN( 733)											int this12;
HXDLIN( 733)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)												this12 = ((((((this11 >> 24) & 255) << 24) | ((this11 & 255) << 16)) | (((this11 >> 8) & 255) << 8)) | ((this11 >> 16) & 255));
            											}
            											else {
HXLINE( 733)												this12 = this11;
            											}
HXDLIN( 733)											Float a11;
HXDLIN( 733)											int this13 = ((this12 >> 24) & 255);
HXDLIN( 733)											if ((this13 == 0)) {
HXLINE( 733)												a11 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												a11 = (( (Float)(this13) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float r1;
HXDLIN( 733)											int this14 = ((this12 >> 16) & 255);
HXDLIN( 733)											if ((this14 == 0)) {
HXLINE( 733)												r1 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												r1 = (( (Float)(this14) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float g1;
HXDLIN( 733)											int this15 = ((this12 >> 8) & 255);
HXDLIN( 733)											if ((this15 == 0)) {
HXLINE( 733)												g1 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												g1 = (( (Float)(this15) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float b11;
HXDLIN( 733)											int this16 = (this12 & 255);
HXDLIN( 733)											if ((this16 == 0)) {
HXLINE( 733)												b11 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												b11 = (( (Float)(this16) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float a2;
HXDLIN( 733)											int this17 = ((col >> 24) & 255);
HXDLIN( 733)											if ((this17 == 0)) {
HXLINE( 733)												a2 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												a2 = (( (Float)(this17) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float r2;
HXDLIN( 733)											int this18 = ((col >> 16) & 255);
HXDLIN( 733)											if ((this18 == 0)) {
HXLINE( 733)												r2 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												r2 = (( (Float)(this18) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float g2;
HXDLIN( 733)											int this19 = ((col >> 8) & 255);
HXDLIN( 733)											if ((this19 == 0)) {
HXLINE( 733)												g2 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												g2 = (( (Float)(this19) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float b21;
HXDLIN( 733)											int this20 = (col & 255);
HXDLIN( 733)											if ((this20 == 0)) {
HXLINE( 733)												b21 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												b21 = (( (Float)(this20) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN( 733)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 733)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 733)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b21 * a2))));
HXDLIN( 733)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 733)											int blended = ((((a4 << 24) | (r << 16)) | (g << 8)) | b3);
HXDLIN( 733)											{
HXLINE( 733)												int _hx_tmp2;
HXDLIN( 733)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)													_hx_tmp2 = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE( 733)													_hx_tmp2 = blended;
            												}
HXDLIN( 733)												::iterMagic::Iimg_obj::set(undoImage->image,location,_hx_tmp2);
            											}
            										}
            										else {
HXLINE( 733)											::Dynamic this21 = undoImage->image;
HXDLIN( 733)											int index2;
HXDLIN( 733)											if (undoImage->useVirtualPos) {
HXLINE( 733)												index2 = ::Std_obj::_hx_int(((((( (Float)(y1) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x1) - undoImage->virtualX));
            											}
            											else {
HXLINE( 733)												index2 = ::Std_obj::_hx_int(( (Float)(((y1 * undoImage->width) + x1)) ));
            											}
HXDLIN( 733)											int _hx_tmp3;
HXDLIN( 733)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)												_hx_tmp3 = ((((((c2 >> 24) & 255) << 24) | ((c2 & 255) << 16)) | (((c2 >> 8) & 255) << 8)) | ((c2 >> 16) & 255));
            											}
            											else {
HXLINE( 733)												_hx_tmp3 = c2;
            											}
HXDLIN( 733)											::iterMagic::Iimg_obj::set(this21,index2,_hx_tmp3);
            										}
            									}
            									else {
HXLINE( 733)										if (forceClear) {
HXLINE( 733)											::Dynamic this22 = undoImage->image;
HXDLIN( 733)											int x2 = (dx1 - rectLeft);
HXDLIN( 733)											int y2 = (dy1 - rectTop);
HXDLIN( 733)											int index3;
HXDLIN( 733)											if (undoImage->useVirtualPos) {
HXLINE( 733)												index3 = ::Std_obj::_hx_int(((((( (Float)(y2) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x2) - undoImage->virtualX));
            											}
            											else {
HXLINE( 733)												index3 = ::Std_obj::_hx_int(( (Float)(((y2 * undoImage->width) + x2)) ));
            											}
HXDLIN( 733)											::iterMagic::Iimg_obj::set(this22,index3,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 733)			{
HXLINE( 733)				int _g_min = xIter3->start;
HXDLIN( 733)				int _g_max = xIter3->max;
HXDLIN( 733)				while((_g_min < _g_max)){
HXLINE( 733)					_g_min = (_g_min + 1);
HXDLIN( 733)					int px1 = (_g_min - 1);
HXDLIN( 733)					Float pcx = (( (Float)(px1) ) - dx);
HXDLIN( 733)					{
HXLINE( 733)						int _g_min1 = yIter3->start;
HXDLIN( 733)						int _g_max1 = yIter3->max;
HXDLIN( 733)						while((_g_min1 < _g_max1)){
HXLINE( 733)							_g_min1 = (_g_min1 + 1);
HXDLIN( 733)							int py1 = (_g_min1 - 1);
HXDLIN( 733)							Float pcy = (( (Float)(py1) ) - dy);
HXDLIN( 733)							Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN( 733)							Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN( 733)							Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN( 733)							Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN( 733)							Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN( 733)							bool _hx_tmp4;
HXDLIN( 733)							bool _hx_tmp5;
HXDLIN( 733)							if ((ratioA >= 0)) {
HXLINE( 733)								_hx_tmp5 = (ratioB >= 0);
            							}
            							else {
HXLINE( 733)								_hx_tmp5 = false;
            							}
HXDLIN( 733)							if (_hx_tmp5) {
HXLINE( 733)								_hx_tmp4 = (ratioC >= 0);
            							}
            							else {
HXLINE( 733)								_hx_tmp4 = false;
            							}
HXDLIN( 733)							if (_hx_tmp4) {
HXLINE( 733)								int i6 = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA) + (( (Float)(aB) ) * ratioB)) + (( (Float)(aC) ) * ratioC)));
HXDLIN( 733)								if ((i6 > 255)) {
HXLINE(  24)									i6 = 255;
            								}
HXLINE( 733)								if ((i6 < 0)) {
HXLINE(  25)									i6 = 0;
            								}
HXLINE( 733)								int a5 = i6;
HXDLIN( 733)								int i7 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA) + (( (Float)(rB) ) * ratioB)) + (( (Float)(rC) ) * ratioC)));
HXDLIN( 733)								if ((i7 > 255)) {
HXLINE(  24)									i7 = 255;
            								}
HXLINE( 733)								if ((i7 < 0)) {
HXLINE(  25)									i7 = 0;
            								}
HXLINE( 733)								int r3 = i7;
HXDLIN( 733)								int i8 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA) + (( (Float)(gB) ) * ratioB)) + (( (Float)(gC) ) * ratioC)));
HXDLIN( 733)								if ((i8 > 255)) {
HXLINE(  24)									i8 = 255;
            								}
HXLINE( 733)								if ((i8 < 0)) {
HXLINE(  25)									i8 = 0;
            								}
HXLINE( 733)								int g3 = i8;
HXDLIN( 733)								int i9 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA) + (( (Float)(bB) ) * ratioB)) + (( (Float)(bC) ) * ratioC)));
HXDLIN( 733)								if ((i9 > 255)) {
HXLINE(  24)									i9 = 255;
            								}
HXLINE( 733)								if ((i9 < 0)) {
HXLINE(  25)									i9 = 0;
            								}
HXLINE( 733)								int b4 = i9;
HXDLIN( 733)								{
HXLINE( 733)									int location1;
HXDLIN( 733)									if (pixelImage->useVirtualPos) {
HXLINE( 733)										location1 = ::Std_obj::_hx_int(((((( (Float)(py1) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px1) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 733)										location1 = ::Std_obj::_hx_int(( (Float)(((py1 * pixelImage->width) + px1)) ));
            									}
HXDLIN( 733)									bool _hx_tmp6;
HXDLIN( 733)									if (pixelImage->transparent) {
HXLINE( 733)										_hx_tmp6 = (a5 < 254);
            									}
            									else {
HXLINE( 733)										_hx_tmp6 = false;
            									}
HXDLIN( 733)									if (_hx_tmp6) {
HXLINE( 733)										int this23 = ::iterMagic::Iimg_obj::get(pixelImage->image,location1);
HXDLIN( 733)										int old;
HXDLIN( 733)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)											old = ((((((this23 >> 24) & 255) << 24) | ((this23 & 255) << 16)) | (((this23 >> 8) & 255) << 8)) | ((this23 >> 16) & 255));
            										}
            										else {
HXLINE( 733)											old = this23;
            										}
HXDLIN( 733)										int rhs = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
HXDLIN( 733)										Float a12;
HXDLIN( 733)										int this24 = ((old >> 24) & 255);
HXDLIN( 733)										if ((this24 == 0)) {
HXLINE( 733)											a12 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											a12 = (( (Float)(this24) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float r11;
HXDLIN( 733)										int this25 = ((old >> 16) & 255);
HXDLIN( 733)										if ((this25 == 0)) {
HXLINE( 733)											r11 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											r11 = (( (Float)(this25) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float g11;
HXDLIN( 733)										int this26 = ((old >> 8) & 255);
HXDLIN( 733)										if ((this26 == 0)) {
HXLINE( 733)											g11 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											g11 = (( (Float)(this26) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float b12;
HXDLIN( 733)										int this27 = (old & 255);
HXDLIN( 733)										if ((this27 == 0)) {
HXLINE( 733)											b12 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											b12 = (( (Float)(this27) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float a21;
HXDLIN( 733)										int this28 = ((rhs >> 24) & 255);
HXDLIN( 733)										if ((this28 == 0)) {
HXLINE( 733)											a21 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											a21 = (( (Float)(this28) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float r21;
HXDLIN( 733)										int this29 = ((rhs >> 16) & 255);
HXDLIN( 733)										if ((this29 == 0)) {
HXLINE( 733)											r21 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											r21 = (( (Float)(this29) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float g21;
HXDLIN( 733)										int this30 = ((rhs >> 8) & 255);
HXDLIN( 733)										if ((this30 == 0)) {
HXLINE( 733)											g21 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											g21 = (( (Float)(this30) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float b22;
HXDLIN( 733)										int this31 = (rhs & 255);
HXDLIN( 733)										if ((this31 == 0)) {
HXLINE( 733)											b22 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											b22 = (( (Float)(this31) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float a31 = (a12 * (( (Float)(1) ) - a21));
HXDLIN( 733)										int r4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a31) + (r21 * a21))));
HXDLIN( 733)										int g4 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a31) + (g21 * a21))));
HXDLIN( 733)										int b5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b12 * a31) + (b22 * a21))));
HXDLIN( 733)										int a6 = ::Std_obj::_hx_int((( (Float)(255) ) * (a31 + a21)));
HXDLIN( 733)										int blended1 = ((((a6 << 24) | (r4 << 16)) | (g4 << 8)) | b5);
HXDLIN( 733)										{
HXLINE( 733)											int _hx_tmp7;
HXDLIN( 733)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)												_hx_tmp7 = ((((((blended1 >> 24) & 255) << 24) | ((blended1 & 255) << 16)) | (((blended1 >> 8) & 255) << 8)) | ((blended1 >> 16) & 255));
            											}
            											else {
HXLINE( 733)												_hx_tmp7 = blended1;
            											}
HXDLIN( 733)											::iterMagic::Iimg_obj::set(pixelImage->image,location1,_hx_tmp7);
            										}
            									}
            									else {
HXLINE( 733)										int value;
HXDLIN( 733)										if (pixelImage->isLittle) {
HXLINE( 733)											value = ((((a5 << 24) | (b4 << 16)) | (g3 << 8)) | r3);
            										}
            										else {
HXLINE( 733)											value = ((((a5 << 24) | (r3 << 16)) | (g3 << 8)) | b4);
            										}
HXDLIN( 733)										::iterMagic::Iimg_obj::set(pixelImage->image,location1,value);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 733)		{
HXLINE( 733)			bool hasHit1 = false;
HXDLIN( 733)			bool hasUndo1 = false;
HXDLIN( 733)			int aA1 = ((color2 >> 24) & 255);
HXDLIN( 733)			int rA1 = ((color2 >> 16) & 255);
HXDLIN( 733)			int gA1 = ((color2 >> 8) & 255);
HXDLIN( 733)			int bA1 = (color2 & 255);
HXDLIN( 733)			int aB1 = ((color1 >> 24) & 255);
HXDLIN( 733)			int rB1 = ((color1 >> 16) & 255);
HXDLIN( 733)			int gB1 = ((color1 >> 8) & 255);
HXDLIN( 733)			int bB1 = (color1 & 255);
HXDLIN( 733)			int aC1 = ((color2 >> 24) & 255);
HXDLIN( 733)			int rC1 = ((color2 >> 16) & 255);
HXDLIN( 733)			int gC1 = ((color2 >> 8) & 255);
HXDLIN( 733)			int bC1 = (color2 & 255);
HXDLIN( 733)			Float bcx1 = (cx - dx);
HXDLIN( 733)			Float bcy1 = (cy - dy);
HXDLIN( 733)			Float acx1 = (bx - dx);
HXDLIN( 733)			Float acy1 = (by - dy);
HXDLIN( 733)			Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN( 733)			Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN( 733)			Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN( 733)			Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN( 733)			 ::pi_xy::iter::IntIterStart xIter31;
HXDLIN( 733)			if ((bx > cx)) {
HXLINE( 733)				if ((bx > dx)) {
HXLINE( 733)					int min4;
HXDLIN( 733)					if ((cx > dx)) {
HXLINE( 733)						min4 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 733)						min4 = ::Math_obj::floor(cx);
            					}
HXDLIN( 733)					int ii_min8 = min4;
HXDLIN( 733)					int ii_max8 = ::Math_obj::ceil(bx);
HXDLIN( 733)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min8,ii_max8);
            				}
            				else {
HXLINE( 733)					int ii_min9 = ::Math_obj::floor(cx);
HXDLIN( 733)					int ii_max9 = ::Math_obj::ceil(dx);
HXDLIN( 733)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min9,ii_max9);
            				}
            			}
            			else {
HXLINE( 733)				if ((cx > dx)) {
HXLINE( 733)					int min5;
HXDLIN( 733)					if ((bx > dx)) {
HXLINE( 733)						min5 = ::Math_obj::floor(dx);
            					}
            					else {
HXLINE( 733)						min5 = ::Math_obj::ceil(bx);
            					}
HXDLIN( 733)					int ii_min10 = min5;
HXDLIN( 733)					int ii_max10 = ::Math_obj::ceil(cx);
HXDLIN( 733)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min10,ii_max10);
            				}
            				else {
HXLINE( 733)					int ii_min11 = ::Math_obj::floor(bx);
HXDLIN( 733)					int ii_max11 = ::Math_obj::ceil(dx);
HXDLIN( 733)					xIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min11,ii_max11);
            				}
            			}
HXDLIN( 733)			 ::pi_xy::iter::IntIterStart yIter31;
HXDLIN( 733)			if ((by > cy)) {
HXLINE( 733)				if ((by > dy)) {
HXLINE( 733)					int min6;
HXDLIN( 733)					if ((cy > dy)) {
HXLINE( 733)						min6 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 733)						min6 = ::Math_obj::floor(cy);
            					}
HXDLIN( 733)					int ii_min12 = min6;
HXDLIN( 733)					int ii_max12 = ::Math_obj::ceil(by);
HXDLIN( 733)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min12,ii_max12);
            				}
            				else {
HXLINE( 733)					int ii_min13 = ::Math_obj::floor(cy);
HXDLIN( 733)					int ii_max13 = ::Math_obj::ceil(dy);
HXDLIN( 733)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min13,ii_max13);
            				}
            			}
            			else {
HXLINE( 733)				if ((cy > dy)) {
HXLINE( 733)					int min7;
HXDLIN( 733)					if ((by > dy)) {
HXLINE( 733)						min7 = ::Math_obj::floor(dy);
            					}
            					else {
HXLINE( 733)						min7 = ::Math_obj::ceil(by);
            					}
HXDLIN( 733)					int ii_min14 = min7;
HXDLIN( 733)					int ii_max14 = ::Math_obj::ceil(cy);
HXDLIN( 733)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min14,ii_max14);
            				}
            				else {
HXLINE( 733)					int ii_min15 = ::Math_obj::floor(by);
HXDLIN( 733)					int ii_max15 = ::Math_obj::ceil(dy);
HXDLIN( 733)					yIter31 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min15,ii_max15);
            				}
            			}
HXDLIN( 733)			 ::pi_xy::ImageStruct undoImage3 = null();
HXDLIN( 733)			if (hasUndo1) {
HXLINE( 733)				int width1 = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 733)				int height1 = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 733)				 ::Dynamic imageType1 = null();
HXDLIN( 733)				 ::pi_xy::ImageStruct this32 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 733)				if (::hx::IsNull( imageType1 )) {
HXLINE(  54)					imageType1 = ::pi_xy::ImageStruct_obj::defaultType;
            				}
HXLINE( 733)				::Dynamic undoImage4;
HXDLIN( 733)				switch((int)(( (int)(imageType1) ))){
            					case (int)0: {
HXLINE( 733)						 ::iterMagic::BytesImg byt1 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 733)						 ::iterMagic::BytesImg b6 = byt1;
HXDLIN( 733)						{
HXLINE( 733)							b6->width = width1;
HXDLIN( 733)							b6->height = height1;
HXDLIN( 733)							b6->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 733)							b6->data = ::haxe::io::Bytes_obj::alloc((b6->length * 4));
HXDLIN( 733)							{
HXLINE( 733)								int len2 = b6->length;
HXDLIN( 733)								int w1 = 0;
HXDLIN( 733)								{
HXLINE( 733)									int _g20 = 0;
HXDLIN( 733)									int _g21 = b6->height;
HXDLIN( 733)									while((_g20 < _g21)){
HXLINE( 733)										_g20 = (_g20 + 1);
HXDLIN( 733)										int y3 = (_g20 - 1);
HXDLIN( 733)										{
HXLINE( 733)											int _g22 = 0;
HXDLIN( 733)											int _g23 = b6->width;
HXDLIN( 733)											while((_g22 < _g23)){
HXLINE( 733)												_g22 = (_g22 + 1);
HXDLIN( 733)												int x3 = (_g22 - 1);
HXDLIN( 733)												{
HXLINE( 733)													w1 = (w1 + 1);
HXDLIN( 733)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 733)												{
HXLINE( 733)													w1 = (w1 + 1);
HXDLIN( 733)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 733)												{
HXLINE( 733)													w1 = (w1 + 1);
HXDLIN( 733)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
HXDLIN( 733)												{
HXLINE( 733)													w1 = (w1 + 1);
HXDLIN( 733)													b6->data->b[(w1 - 1)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 733)						undoImage4 = b6;
            					}
            					break;
            					case (int)1: {
HXLINE( 733)						 ::iterMagic::ArrIntImg arrI1 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 733)						 ::iterMagic::ArrIntImg a7 = arrI1;
HXDLIN( 733)						{
HXLINE( 733)							a7->width = width1;
HXDLIN( 733)							a7->height = height1;
HXDLIN( 733)							a7->data = ::Array_obj< int >::__new(0);
HXDLIN( 733)							a7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 733)							{
HXLINE( 733)								int _g24 = 0;
HXDLIN( 733)								int _g25 = a7->length;
HXDLIN( 733)								while((_g24 < _g25)){
HXLINE( 733)									_g24 = (_g24 + 1);
HXDLIN( 733)									int i10 = (_g24 - 1);
HXDLIN( 733)									a7->data[i10] = 0;
            								}
            							}
            						}
HXDLIN( 733)						undoImage4 = a7;
            					}
            					break;
            					case (int)2: {
HXLINE( 733)						 ::iterMagic::U32ArrImg u32a1 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 733)						 ::iterMagic::U32ArrImg b7 = u32a1;
HXDLIN( 733)						{
HXLINE( 733)							b7->width = width1;
HXDLIN( 733)							b7->height = height1;
HXDLIN( 733)							b7->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 733)							int size1 = (b7->length * 4);
HXDLIN( 733)							b7->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size1),0,size1);
HXDLIN( 733)							{
HXLINE( 733)								int _g26 = 0;
HXDLIN( 733)								int _g27 = b7->length;
HXDLIN( 733)								while((_g26 < _g27)){
HXLINE( 733)									_g26 = (_g26 + 1);
HXDLIN( 733)									int i11 = (_g26 - 1);
HXDLIN( 733)									{
HXLINE( 733)										 ::haxe::io::ArrayBufferViewImpl this33 = b7->data;
HXDLIN( 733)										bool undoImage5;
HXDLIN( 733)										if ((i11 >= 0)) {
HXLINE( 733)											undoImage5 = (i11 < (this33->byteLength >> 2));
            										}
            										else {
HXLINE( 733)											undoImage5 = false;
            										}
HXDLIN( 733)										if (undoImage5) {
HXLINE( 733)											 ::haxe::io::Bytes _this1 = this33->bytes;
HXDLIN( 733)											int pos1 = ((i11 << 2) + this33->byteOffset);
HXDLIN( 733)											_this1->b[pos1] = ( (unsigned char)(0) );
HXDLIN( 733)											_this1->b[(pos1 + 1)] = ( (unsigned char)(0) );
HXDLIN( 733)											_this1->b[(pos1 + 2)] = ( (unsigned char)(0) );
HXDLIN( 733)											_this1->b[(pos1 + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
HXDLIN( 733)						undoImage4 = b7;
            					}
            					break;
            					case (int)3: {
HXLINE( 733)						 ::iterMagic::VecIntImg vec1 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 733)						 ::iterMagic::VecIntImg v2 = vec1;
HXDLIN( 733)						{
HXLINE( 733)							v2->width = width1;
HXDLIN( 733)							v2->height = height1;
HXDLIN( 733)							v2->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 733)							v2->data = ::Array_obj< int >::__new(v2->length);
HXDLIN( 733)							{
HXLINE( 733)								int _g28 = 0;
HXDLIN( 733)								int _g29 = v2->length;
HXDLIN( 733)								while((_g28 < _g29)){
HXLINE( 733)									_g28 = (_g28 + 1);
HXDLIN( 733)									int i12 = (_g28 - 1);
HXDLIN( 733)									v2->data->__unsafe_set(i12,0);
            								}
            							}
            						}
HXDLIN( 733)						undoImage4 = v2;
            					}
            					break;
            					case (int)4: {
HXLINE( 733)						 ::iterMagic::StackIntImg sInt1 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 733)						 ::iterMagic::StackIntImg b8 = sInt1;
HXDLIN( 733)						{
HXLINE( 733)							b8->width = width1;
HXDLIN( 733)							b8->height = height1;
HXDLIN( 733)							b8->length = ::Std_obj::_hx_int(( (Float)((width1 * height1)) ));
HXDLIN( 733)							b8->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 733)							{
HXLINE( 733)								int len3 = b8->length;
HXDLIN( 733)								 ::haxe::ds::GenericStack_Int d1 = b8->data;
HXDLIN( 733)								if (::hx::IsNull( d1->head )) {
HXLINE( 733)									int _g30 = 0;
HXDLIN( 733)									int _g31 = len3;
HXDLIN( 733)									while((_g30 < _g31)){
HXLINE( 733)										_g30 = (_g30 + 1);
HXDLIN( 733)										int i13 = (_g30 - 1);
HXDLIN( 733)										d1->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d1->head);
            									}
            								}
            								else {
HXLINE( 733)									int _g32 = 0;
HXDLIN( 733)									int _g33 = len3;
HXDLIN( 733)									while((_g32 < _g33)){
HXLINE( 733)										_g32 = (_g32 + 1);
HXDLIN( 733)										int i14 = (_g32 - 1);
HXDLIN( 733)										{
HXLINE( 733)											 ::haxe::ds::GenericCell_Int l1 = b8->data->head;
HXDLIN( 733)											 ::haxe::ds::GenericCell_Int prev1 = null();
HXDLIN( 733)											{
HXLINE( 733)												int _g34 = 0;
HXDLIN( 733)												int _g35 = i14;
HXDLIN( 733)												while((_g34 < _g35)){
HXLINE( 733)													_g34 = (_g34 + 1);
HXDLIN( 733)													int i15 = (_g34 - 1);
HXLINE( 345)													prev1 = l1;
HXLINE( 346)													l1 = l1->next;
            												}
            											}
HXLINE( 733)											if (::hx::IsNull( prev1 )) {
HXLINE( 733)												b8->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 733)												l1 = null();
            											}
            											else {
HXLINE( 733)												prev1->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l1->next);
HXDLIN( 733)												l1 = null();
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 733)						undoImage4 = b8;
            					}
            					break;
            				}
HXDLIN( 733)				this32->image = undoImage4;
HXDLIN( 733)				this32->width = width1;
HXDLIN( 733)				this32->height = height1;
HXDLIN( 733)				this32->imageType = ( (int)(imageType1) );
HXDLIN( 733)				undoImage3 = this32;
HXDLIN( 733)				{
HXLINE( 733)					int rectLeft1 = xIter31->start;
HXDLIN( 733)					int rectTop1 = yIter31->start;
HXDLIN( 733)					int rectRight1 = xIter31->max;
HXDLIN( 733)					bool forceClear1 = false;
HXDLIN( 733)					{
HXLINE( 733)						int _g36 = rectTop1;
HXDLIN( 733)						int _g37 = yIter31->max;
HXDLIN( 733)						while((_g36 < _g37)){
HXLINE( 733)							_g36 = (_g36 + 1);
HXDLIN( 733)							int dy2 = (_g36 - 1);
HXDLIN( 733)							{
HXLINE( 733)								int _g38 = rectLeft1;
HXDLIN( 733)								int _g39 = rectRight1;
HXDLIN( 733)								while((_g38 < _g39)){
HXLINE( 733)									_g38 = (_g38 + 1);
HXDLIN( 733)									int dx2 = (_g38 - 1);
HXDLIN( 733)									::Dynamic this34 = pixelImage->image;
HXDLIN( 733)									int index4;
HXDLIN( 733)									if (pixelImage->useVirtualPos) {
HXLINE( 733)										index4 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx2) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 733)										index4 = ::Std_obj::_hx_int(( (Float)(((dy2 * pixelImage->width) + dx2)) ));
            									}
HXDLIN( 733)									int c3 = ::iterMagic::Iimg_obj::get(this34,index4);
HXDLIN( 733)									int col1;
HXDLIN( 733)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)										col1 = ((((((c3 >> 24) & 255) << 24) | ((c3 & 255) << 16)) | (((c3 >> 8) & 255) << 8)) | ((c3 >> 16) & 255));
            									}
            									else {
HXLINE( 733)										col1 = c3;
            									}
HXDLIN( 733)									bool _hx_tmp8;
HXDLIN( 733)									if (pixelImage->useMask) {
HXLINE( 733)										_hx_tmp8 = ::hx::IsNotNull( pixelImage->mask );
            									}
            									else {
HXLINE( 733)										_hx_tmp8 = false;
            									}
HXDLIN( 733)									if (_hx_tmp8) {
HXLINE( 733)										 ::pi_xy::ImageStruct this35 = pixelImage->mask;
HXDLIN( 733)										::Dynamic this36 = this35->image;
HXDLIN( 733)										int index5;
HXDLIN( 733)										if (this35->useVirtualPos) {
HXLINE( 733)											index5 = ::Std_obj::_hx_int(((((( (Float)(dy2) ) - this35->virtualY) * ( (Float)(this35->width) )) + dx2) - this35->virtualX));
            										}
            										else {
HXLINE( 733)											index5 = ::Std_obj::_hx_int(( (Float)(((dy2 * this35->width) + dx2)) ));
            										}
HXDLIN( 733)										int c4 = ::iterMagic::Iimg_obj::get(this36,index5);
HXDLIN( 733)										int v3;
HXDLIN( 733)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)											v3 = ((((((c4 >> 24) & 255) << 24) | ((c4 & 255) << 16)) | (((c4 >> 8) & 255) << 8)) | ((c4 >> 16) & 255));
            										}
            										else {
HXLINE( 733)											v3 = c4;
            										}
HXDLIN( 733)										int maskPixel1 = v3;
HXDLIN( 733)										int this37 = col1;
HXDLIN( 733)										if ((maskPixel1 == 0)) {
HXLINE( 733)											col1 = this37;
            										}
            										else {
HXLINE( 733)											Float m01;
HXDLIN( 733)											int this38 = ((maskPixel1 >> 24) & 255);
HXDLIN( 733)											if ((this38 == 0)) {
HXLINE( 733)												m01 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												m01 = (( (Float)(this38) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float m11;
HXDLIN( 733)											int this39 = ((maskPixel1 >> 16) & 255);
HXDLIN( 733)											if ((this39 == 0)) {
HXLINE( 733)												m11 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												m11 = (( (Float)(this39) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float m21;
HXDLIN( 733)											int this40 = ((maskPixel1 >> 8) & 255);
HXDLIN( 733)											if ((this40 == 0)) {
HXLINE( 733)												m21 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												m21 = (( (Float)(this40) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float m31;
HXDLIN( 733)											int this41 = (maskPixel1 & 255);
HXDLIN( 733)											if ((this41 == 0)) {
HXLINE( 733)												m31 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												m31 = (( (Float)(this41) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											int ch01 = ::Std_obj::_hx_int(((((Float)1.) - m01) * ( (Float)(((this37 >> 24) & 255)) )));
HXDLIN( 733)											int ch11 = ::Std_obj::_hx_int(((((Float)1.) - m11) * ( (Float)(((this37 >> 16) & 255)) )));
HXDLIN( 733)											int ch21 = ::Std_obj::_hx_int(((((Float)1.) - m21) * ( (Float)(((this37 >> 8) & 255)) )));
HXDLIN( 733)											int ch31 = ::Std_obj::_hx_int(((((Float)1.) - m31) * ( (Float)((this37 & 255)) )));
HXDLIN( 733)											col1 = ((((::Math_obj::round((( (Float)(ch01) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch11) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch21) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch31) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 733)									if ((col1 != 0)) {
HXLINE( 733)										int x4 = (dx2 - rectLeft1);
HXDLIN( 733)										int y4 = (dy2 - rectTop1);
HXDLIN( 733)										int c5 = col1;
HXDLIN( 733)										bool _hx_tmp9;
HXDLIN( 733)										if ((((c5 >> 24) & 255) < 254)) {
HXLINE( 733)											_hx_tmp9 = undoImage3->transparent;
            										}
            										else {
HXLINE( 733)											_hx_tmp9 = false;
            										}
HXDLIN( 733)										if (_hx_tmp9) {
HXLINE( 733)											int location2;
HXDLIN( 733)											if (undoImage3->useVirtualPos) {
HXLINE( 733)												location2 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 733)												location2 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 733)											int this42 = ::iterMagic::Iimg_obj::get(undoImage3->image,location2);
HXDLIN( 733)											int this43;
HXDLIN( 733)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)												this43 = ((((((this42 >> 24) & 255) << 24) | ((this42 & 255) << 16)) | (((this42 >> 8) & 255) << 8)) | ((this42 >> 16) & 255));
            											}
            											else {
HXLINE( 733)												this43 = this42;
            											}
HXDLIN( 733)											Float a13;
HXDLIN( 733)											int this44 = ((this43 >> 24) & 255);
HXDLIN( 733)											if ((this44 == 0)) {
HXLINE( 733)												a13 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												a13 = (( (Float)(this44) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float r12;
HXDLIN( 733)											int this45 = ((this43 >> 16) & 255);
HXDLIN( 733)											if ((this45 == 0)) {
HXLINE( 733)												r12 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												r12 = (( (Float)(this45) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float g12;
HXDLIN( 733)											int this46 = ((this43 >> 8) & 255);
HXDLIN( 733)											if ((this46 == 0)) {
HXLINE( 733)												g12 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												g12 = (( (Float)(this46) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float b13;
HXDLIN( 733)											int this47 = (this43 & 255);
HXDLIN( 733)											if ((this47 == 0)) {
HXLINE( 733)												b13 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												b13 = (( (Float)(this47) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float a22;
HXDLIN( 733)											int this48 = ((col1 >> 24) & 255);
HXDLIN( 733)											if ((this48 == 0)) {
HXLINE( 733)												a22 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												a22 = (( (Float)(this48) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float r22;
HXDLIN( 733)											int this49 = ((col1 >> 16) & 255);
HXDLIN( 733)											if ((this49 == 0)) {
HXLINE( 733)												r22 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												r22 = (( (Float)(this49) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float g22;
HXDLIN( 733)											int this50 = ((col1 >> 8) & 255);
HXDLIN( 733)											if ((this50 == 0)) {
HXLINE( 733)												g22 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												g22 = (( (Float)(this50) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float b23;
HXDLIN( 733)											int this51 = (col1 & 255);
HXDLIN( 733)											if ((this51 == 0)) {
HXLINE( 733)												b23 = ((Float)0.);
            											}
            											else {
HXLINE( 733)												b23 = (( (Float)(this51) ) / ( (Float)(255) ));
            											}
HXDLIN( 733)											Float a32 = (a13 * (( (Float)(1) ) - a22));
HXDLIN( 733)											int r5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r12 * a32) + (r22 * a22))));
HXDLIN( 733)											int g5 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g12 * a32) + (g22 * a22))));
HXDLIN( 733)											int b9 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b13 * a32) + (b23 * a22))));
HXDLIN( 733)											int a8 = ::Std_obj::_hx_int((( (Float)(255) ) * (a32 + a22)));
HXDLIN( 733)											int blended2 = ((((a8 << 24) | (r5 << 16)) | (g5 << 8)) | b9);
HXDLIN( 733)											{
HXLINE( 733)												int _hx_tmp10;
HXDLIN( 733)												if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)													_hx_tmp10 = ((((((blended2 >> 24) & 255) << 24) | ((blended2 & 255) << 16)) | (((blended2 >> 8) & 255) << 8)) | ((blended2 >> 16) & 255));
            												}
            												else {
HXLINE( 733)													_hx_tmp10 = blended2;
            												}
HXDLIN( 733)												::iterMagic::Iimg_obj::set(undoImage3->image,location2,_hx_tmp10);
            											}
            										}
            										else {
HXLINE( 733)											::Dynamic this52 = undoImage3->image;
HXDLIN( 733)											int index6;
HXDLIN( 733)											if (undoImage3->useVirtualPos) {
HXLINE( 733)												index6 = ::Std_obj::_hx_int(((((( (Float)(y4) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x4) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 733)												index6 = ::Std_obj::_hx_int(( (Float)(((y4 * undoImage3->width) + x4)) ));
            											}
HXDLIN( 733)											int _hx_tmp11;
HXDLIN( 733)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)												_hx_tmp11 = ((((((c5 >> 24) & 255) << 24) | ((c5 & 255) << 16)) | (((c5 >> 8) & 255) << 8)) | ((c5 >> 16) & 255));
            											}
            											else {
HXLINE( 733)												_hx_tmp11 = c5;
            											}
HXDLIN( 733)											::iterMagic::Iimg_obj::set(this52,index6,_hx_tmp11);
            										}
            									}
            									else {
HXLINE( 733)										if (forceClear1) {
HXLINE( 733)											::Dynamic this53 = undoImage3->image;
HXDLIN( 733)											int x5 = (dx2 - rectLeft1);
HXDLIN( 733)											int y5 = (dy2 - rectTop1);
HXDLIN( 733)											int index7;
HXDLIN( 733)											if (undoImage3->useVirtualPos) {
HXLINE( 733)												index7 = ::Std_obj::_hx_int(((((( (Float)(y5) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x5) - undoImage3->virtualX));
            											}
            											else {
HXLINE( 733)												index7 = ::Std_obj::_hx_int(( (Float)(((y5 * undoImage3->width) + x5)) ));
            											}
HXDLIN( 733)											::iterMagic::Iimg_obj::set(this53,index7,0);
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 733)			{
HXLINE( 733)				int _g_min2 = xIter31->start;
HXDLIN( 733)				int _g_max2 = xIter31->max;
HXDLIN( 733)				while((_g_min2 < _g_max2)){
HXLINE( 733)					_g_min2 = (_g_min2 + 1);
HXDLIN( 733)					int px2 = (_g_min2 - 1);
HXDLIN( 733)					Float pcx1 = (( (Float)(px2) ) - dx);
HXDLIN( 733)					{
HXLINE( 733)						int _g_min3 = yIter31->start;
HXDLIN( 733)						int _g_max3 = yIter31->max;
HXDLIN( 733)						while((_g_min3 < _g_max3)){
HXLINE( 733)							_g_min3 = (_g_min3 + 1);
HXDLIN( 733)							int py2 = (_g_min3 - 1);
HXDLIN( 733)							Float pcy1 = (( (Float)(py2) ) - dy);
HXDLIN( 733)							Float dot311 = ((pcx1 * bcx1) + (pcy1 * bcy1));
HXDLIN( 733)							Float dot321 = ((pcx1 * acx1) + (pcy1 * acy1));
HXDLIN( 733)							Float ratioA1 = (((dot221 * dot311) - (dot121 * dot321)) * denom11);
HXDLIN( 733)							Float ratioB1 = (((dot111 * dot321) - (dot121 * dot311)) * denom11);
HXDLIN( 733)							Float ratioC1 = ((((Float)1.0) - ratioB1) - ratioA1);
HXDLIN( 733)							bool _hx_tmp12;
HXDLIN( 733)							bool _hx_tmp13;
HXDLIN( 733)							if ((ratioA1 >= 0)) {
HXLINE( 733)								_hx_tmp13 = (ratioB1 >= 0);
            							}
            							else {
HXLINE( 733)								_hx_tmp13 = false;
            							}
HXDLIN( 733)							if (_hx_tmp13) {
HXLINE( 733)								_hx_tmp12 = (ratioC1 >= 0);
            							}
            							else {
HXLINE( 733)								_hx_tmp12 = false;
            							}
HXDLIN( 733)							if (_hx_tmp12) {
HXLINE( 733)								int i16 = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA1) + (( (Float)(aB1) ) * ratioB1)) + (( (Float)(aC1) ) * ratioC1)));
HXDLIN( 733)								if ((i16 > 255)) {
HXLINE(  24)									i16 = 255;
            								}
HXLINE( 733)								if ((i16 < 0)) {
HXLINE(  25)									i16 = 0;
            								}
HXLINE( 733)								int a9 = i16;
HXDLIN( 733)								int i17 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA1) + (( (Float)(rB1) ) * ratioB1)) + (( (Float)(rC1) ) * ratioC1)));
HXDLIN( 733)								if ((i17 > 255)) {
HXLINE(  24)									i17 = 255;
            								}
HXLINE( 733)								if ((i17 < 0)) {
HXLINE(  25)									i17 = 0;
            								}
HXLINE( 733)								int r6 = i17;
HXDLIN( 733)								int i18 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA1) + (( (Float)(gB1) ) * ratioB1)) + (( (Float)(gC1) ) * ratioC1)));
HXDLIN( 733)								if ((i18 > 255)) {
HXLINE(  24)									i18 = 255;
            								}
HXLINE( 733)								if ((i18 < 0)) {
HXLINE(  25)									i18 = 0;
            								}
HXLINE( 733)								int g6 = i18;
HXDLIN( 733)								int i19 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA1) + (( (Float)(bB1) ) * ratioB1)) + (( (Float)(bC1) ) * ratioC1)));
HXDLIN( 733)								if ((i19 > 255)) {
HXLINE(  24)									i19 = 255;
            								}
HXLINE( 733)								if ((i19 < 0)) {
HXLINE(  25)									i19 = 0;
            								}
HXLINE( 733)								int b10 = i19;
HXDLIN( 733)								{
HXLINE( 733)									int location3;
HXDLIN( 733)									if (pixelImage->useVirtualPos) {
HXLINE( 733)										location3 = ::Std_obj::_hx_int(((((( (Float)(py2) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px2) - pixelImage->virtualX));
            									}
            									else {
HXLINE( 733)										location3 = ::Std_obj::_hx_int(( (Float)(((py2 * pixelImage->width) + px2)) ));
            									}
HXDLIN( 733)									bool _hx_tmp14;
HXDLIN( 733)									if (pixelImage->transparent) {
HXLINE( 733)										_hx_tmp14 = (a9 < 254);
            									}
            									else {
HXLINE( 733)										_hx_tmp14 = false;
            									}
HXDLIN( 733)									if (_hx_tmp14) {
HXLINE( 733)										int this54 = ::iterMagic::Iimg_obj::get(pixelImage->image,location3);
HXDLIN( 733)										int old1;
HXDLIN( 733)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)											old1 = ((((((this54 >> 24) & 255) << 24) | ((this54 & 255) << 16)) | (((this54 >> 8) & 255) << 8)) | ((this54 >> 16) & 255));
            										}
            										else {
HXLINE( 733)											old1 = this54;
            										}
HXDLIN( 733)										int rhs1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
HXDLIN( 733)										Float a14;
HXDLIN( 733)										int this55 = ((old1 >> 24) & 255);
HXDLIN( 733)										if ((this55 == 0)) {
HXLINE( 733)											a14 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											a14 = (( (Float)(this55) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float r13;
HXDLIN( 733)										int this56 = ((old1 >> 16) & 255);
HXDLIN( 733)										if ((this56 == 0)) {
HXLINE( 733)											r13 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											r13 = (( (Float)(this56) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float g13;
HXDLIN( 733)										int this57 = ((old1 >> 8) & 255);
HXDLIN( 733)										if ((this57 == 0)) {
HXLINE( 733)											g13 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											g13 = (( (Float)(this57) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float b14;
HXDLIN( 733)										int this58 = (old1 & 255);
HXDLIN( 733)										if ((this58 == 0)) {
HXLINE( 733)											b14 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											b14 = (( (Float)(this58) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float a23;
HXDLIN( 733)										int this59 = ((rhs1 >> 24) & 255);
HXDLIN( 733)										if ((this59 == 0)) {
HXLINE( 733)											a23 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											a23 = (( (Float)(this59) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float r23;
HXDLIN( 733)										int this60 = ((rhs1 >> 16) & 255);
HXDLIN( 733)										if ((this60 == 0)) {
HXLINE( 733)											r23 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											r23 = (( (Float)(this60) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float g23;
HXDLIN( 733)										int this61 = ((rhs1 >> 8) & 255);
HXDLIN( 733)										if ((this61 == 0)) {
HXLINE( 733)											g23 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											g23 = (( (Float)(this61) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float b24;
HXDLIN( 733)										int this62 = (rhs1 & 255);
HXDLIN( 733)										if ((this62 == 0)) {
HXLINE( 733)											b24 = ((Float)0.);
            										}
            										else {
HXLINE( 733)											b24 = (( (Float)(this62) ) / ( (Float)(255) ));
            										}
HXDLIN( 733)										Float a33 = (a14 * (( (Float)(1) ) - a23));
HXDLIN( 733)										int r7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r13 * a33) + (r23 * a23))));
HXDLIN( 733)										int g7 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g13 * a33) + (g23 * a23))));
HXDLIN( 733)										int b15 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b14 * a33) + (b24 * a23))));
HXDLIN( 733)										int a10 = ::Std_obj::_hx_int((( (Float)(255) ) * (a33 + a23)));
HXDLIN( 733)										int blended3 = ((((a10 << 24) | (r7 << 16)) | (g7 << 8)) | b15);
HXDLIN( 733)										{
HXLINE( 733)											int _hx_tmp15;
HXDLIN( 733)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 733)												_hx_tmp15 = ((((((blended3 >> 24) & 255) << 24) | ((blended3 & 255) << 16)) | (((blended3 >> 8) & 255) << 8)) | ((blended3 >> 16) & 255));
            											}
            											else {
HXLINE( 733)												_hx_tmp15 = blended3;
            											}
HXDLIN( 733)											::iterMagic::Iimg_obj::set(pixelImage->image,location3,_hx_tmp15);
            										}
            									}
            									else {
HXLINE( 733)										int value1;
HXDLIN( 733)										if (pixelImage->isLittle) {
HXLINE( 733)											value1 = ((((a9 << 24) | (b10 << 16)) | (g6 << 8)) | r6);
            										}
            										else {
HXLINE( 733)											value1 = ((((a9 << 24) | (r6 << 16)) | (g6 << 8)) | b10);
            										}
HXDLIN( 733)										::iterMagic::Iimg_obj::set(pixelImage->image,location3,value1);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 733)			if ((hasHit1 == false)) {
HXLINE( 733)				 ::pi_xy::algo::HitTri v4 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,cx,cy,dx,dy,true);
HXDLIN( 733)				if (hasUndo1) {
HXLINE( 733)					v4->undoImage = undoImage3;
HXDLIN( 733)					v4->undoX = xIter31->start;
HXDLIN( 733)					v4->undoY = yIter31->start;
            				}
            			}
            		}
HXDLIN( 733)		 ::pi_xy::algo::HitQuad v5 =  ::pi_xy::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 733)		 ::pi_xy::algo::HitQuad hitQuad = v5;
HXLINE( 734)		Float cx1 = h2;
HXLINE( 735)		Float cy1 = radius2;
HXLINE( 736)		Float bx1 = h2;
HXLINE( 737)		Float by1 = -(radius2);
HXLINE( 739)		Float dx3 = hSmall;
HXLINE( 740)		Float dy3 = radius2;
HXLINE( 741)		Float ax1 = hSmall;
HXLINE( 742)		Float ay1 = -(radius2);
HXLINE( 744)		temp = (px + ((bx1 * cos) - (by1 * sin)));
HXLINE( 745)		by1 = (py + ((by1 * cos) + (bx1 * sin)));
HXLINE( 746)		bx1 = temp;
HXLINE( 747)		temp = (px + ((cx1 * cos) - (cy1 * sin)));
HXLINE( 748)		cy1 = (py + ((cy1 * cos) + (cx1 * sin)));
HXLINE( 749)		cx1 = temp;
HXLINE( 751)		temp = (px + ((ax1 * cos) - (ay1 * sin)));
HXLINE( 752)		ay1 = (py + ((ay1 * cos) + (ax1 * sin)));
HXLINE( 753)		ax1 = temp;
HXLINE( 755)		temp = (px + ((dx3 * cos) - (dy3 * sin)));
HXLINE( 756)		dy3 = (py + ((dy3 * cos) + (dx3 * sin)));
HXLINE( 757)		dx3 = temp;
HXLINE( 758)		 ::pi_xy::pixel::_TwoGrad::TwoGrad_ twoColors =  ::pi_xy::pixel::_TwoGrad::TwoGrad__obj::__alloc( HX_CTX ,color1,color2);
HXLINE( 759)		int a15 = twoColors->colorClock;
HXDLIN( 759)		int b16 = twoColors->colorAnti;
HXDLIN( 759)		int half = ((((::Math_obj::round(((((( (Float)(((a15 >> 24) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b16 >> 24) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 24) | (::Math_obj::round(((((( (Float)(((a15 >> 16) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b16 >> 16) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 16)) | (::Math_obj::round(((((( (Float)(((a15 >> 8) & 255)) ) / ( (Float)(255) )) + (( (Float)(((b16 >> 8) & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))) << 8)) | ::Math_obj::round(((((( (Float)((a15 & 255)) ) / ( (Float)(255) )) + (( (Float)((b16 & 255)) ) / ( (Float)(255) ))) / ( (Float)(2) )) * ( (Float)(255) ))));
HXLINE( 760)		bool hasUndo2 = false;
HXDLIN( 760)		int aA2 = ((color1 >> 24) & 255);
HXDLIN( 760)		int rA2 = ((color1 >> 16) & 255);
HXDLIN( 760)		int gA2 = ((color1 >> 8) & 255);
HXDLIN( 760)		int bA2 = (color1 & 255);
HXDLIN( 760)		int aB2 = ((half >> 24) & 255);
HXDLIN( 760)		int rB2 = ((half >> 16) & 255);
HXDLIN( 760)		int gB2 = ((half >> 8) & 255);
HXDLIN( 760)		int bB2 = (half & 255);
HXDLIN( 760)		int aC2 = ((color2 >> 24) & 255);
HXDLIN( 760)		int rC2 = ((color2 >> 16) & 255);
HXDLIN( 760)		int gC2 = ((color2 >> 8) & 255);
HXDLIN( 760)		int bC2 = (color2 & 255);
HXDLIN( 760)		Float bcx2 = (bx1 - cx1);
HXDLIN( 760)		Float bcy2 = (by1 - cy1);
HXDLIN( 760)		Float acx2 = (qx - cx1);
HXDLIN( 760)		Float acy2 = (qy - cy1);
HXDLIN( 760)		Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN( 760)		Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN( 760)		Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN( 760)		Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN( 760)		 ::pi_xy::iter::IntIterStart xIter32;
HXDLIN( 760)		if ((qx > bx1)) {
HXLINE( 760)			if ((qx > cx1)) {
HXLINE( 760)				int min8;
HXDLIN( 760)				if ((bx1 > cx1)) {
HXLINE( 760)					min8 = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 760)					min8 = ::Math_obj::floor(bx1);
            				}
HXDLIN( 760)				int ii_min16 = min8;
HXDLIN( 760)				int ii_max16 = ::Math_obj::ceil(qx);
HXDLIN( 760)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min16,ii_max16);
            			}
            			else {
HXLINE( 760)				int ii_min17 = ::Math_obj::floor(bx1);
HXDLIN( 760)				int ii_max17 = ::Math_obj::ceil(cx1);
HXDLIN( 760)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min17,ii_max17);
            			}
            		}
            		else {
HXLINE( 760)			if ((bx1 > cx1)) {
HXLINE( 760)				int min9;
HXDLIN( 760)				if ((qx > cx1)) {
HXLINE( 760)					min9 = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 760)					min9 = ::Math_obj::ceil(qx);
            				}
HXDLIN( 760)				int ii_min18 = min9;
HXDLIN( 760)				int ii_max18 = ::Math_obj::ceil(bx1);
HXDLIN( 760)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min18,ii_max18);
            			}
            			else {
HXLINE( 760)				int ii_min19 = ::Math_obj::floor(qx);
HXDLIN( 760)				int ii_max19 = ::Math_obj::ceil(cx1);
HXDLIN( 760)				xIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min19,ii_max19);
            			}
            		}
HXDLIN( 760)		 ::pi_xy::iter::IntIterStart yIter32;
HXDLIN( 760)		if ((qy > by1)) {
HXLINE( 760)			if ((qy > cy1)) {
HXLINE( 760)				int min10;
HXDLIN( 760)				if ((by1 > cy1)) {
HXLINE( 760)					min10 = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 760)					min10 = ::Math_obj::floor(by1);
            				}
HXDLIN( 760)				int ii_min20 = min10;
HXDLIN( 760)				int ii_max20 = ::Math_obj::ceil(qy);
HXDLIN( 760)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min20,ii_max20);
            			}
            			else {
HXLINE( 760)				int ii_min21 = ::Math_obj::floor(by1);
HXDLIN( 760)				int ii_max21 = ::Math_obj::ceil(cy1);
HXDLIN( 760)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min21,ii_max21);
            			}
            		}
            		else {
HXLINE( 760)			if ((by1 > cy1)) {
HXLINE( 760)				int min11;
HXDLIN( 760)				if ((qy > cy1)) {
HXLINE( 760)					min11 = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 760)					min11 = ::Math_obj::ceil(qy);
            				}
HXDLIN( 760)				int ii_min22 = min11;
HXDLIN( 760)				int ii_max22 = ::Math_obj::ceil(by1);
HXDLIN( 760)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min22,ii_max22);
            			}
            			else {
HXLINE( 760)				int ii_min23 = ::Math_obj::floor(qy);
HXDLIN( 760)				int ii_max23 = ::Math_obj::ceil(cy1);
HXDLIN( 760)				yIter32 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min23,ii_max23);
            			}
            		}
HXDLIN( 760)		 ::pi_xy::ImageStruct undoImage6 = null();
HXDLIN( 760)		if (hasUndo2) {
HXLINE( 760)			int width2 = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 760)			int height2 = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 760)			 ::Dynamic imageType2 = null();
HXDLIN( 760)			 ::pi_xy::ImageStruct this63 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 760)			if (::hx::IsNull( imageType2 )) {
HXLINE(  54)				imageType2 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 760)			::Dynamic undoImage7;
HXDLIN( 760)			switch((int)(( (int)(imageType2) ))){
            				case (int)0: {
HXLINE( 760)					 ::iterMagic::BytesImg byt2 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 760)					 ::iterMagic::BytesImg b17 = byt2;
HXDLIN( 760)					{
HXLINE( 760)						b17->width = width2;
HXDLIN( 760)						b17->height = height2;
HXDLIN( 760)						b17->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 760)						b17->data = ::haxe::io::Bytes_obj::alloc((b17->length * 4));
HXDLIN( 760)						{
HXLINE( 760)							int len4 = b17->length;
HXDLIN( 760)							int w2 = 0;
HXDLIN( 760)							{
HXLINE( 760)								int _g40 = 0;
HXDLIN( 760)								int _g41 = b17->height;
HXDLIN( 760)								while((_g40 < _g41)){
HXLINE( 760)									_g40 = (_g40 + 1);
HXDLIN( 760)									int y6 = (_g40 - 1);
HXDLIN( 760)									{
HXLINE( 760)										int _g42 = 0;
HXDLIN( 760)										int _g43 = b17->width;
HXDLIN( 760)										while((_g42 < _g43)){
HXLINE( 760)											_g42 = (_g42 + 1);
HXDLIN( 760)											int x6 = (_g42 - 1);
HXDLIN( 760)											{
HXLINE( 760)												w2 = (w2 + 1);
HXDLIN( 760)												b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 760)											{
HXLINE( 760)												w2 = (w2 + 1);
HXDLIN( 760)												b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 760)											{
HXLINE( 760)												w2 = (w2 + 1);
HXDLIN( 760)												b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 760)											{
HXLINE( 760)												w2 = (w2 + 1);
HXDLIN( 760)												b17->data->b[(w2 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 760)					undoImage7 = b17;
            				}
            				break;
            				case (int)1: {
HXLINE( 760)					 ::iterMagic::ArrIntImg arrI2 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 760)					 ::iterMagic::ArrIntImg a16 = arrI2;
HXDLIN( 760)					{
HXLINE( 760)						a16->width = width2;
HXDLIN( 760)						a16->height = height2;
HXDLIN( 760)						a16->data = ::Array_obj< int >::__new(0);
HXDLIN( 760)						a16->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 760)						{
HXLINE( 760)							int _g44 = 0;
HXDLIN( 760)							int _g45 = a16->length;
HXDLIN( 760)							while((_g44 < _g45)){
HXLINE( 760)								_g44 = (_g44 + 1);
HXDLIN( 760)								int i20 = (_g44 - 1);
HXDLIN( 760)								a16->data[i20] = 0;
            							}
            						}
            					}
HXDLIN( 760)					undoImage7 = a16;
            				}
            				break;
            				case (int)2: {
HXLINE( 760)					 ::iterMagic::U32ArrImg u32a2 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 760)					 ::iterMagic::U32ArrImg b18 = u32a2;
HXDLIN( 760)					{
HXLINE( 760)						b18->width = width2;
HXDLIN( 760)						b18->height = height2;
HXDLIN( 760)						b18->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 760)						int size2 = (b18->length * 4);
HXDLIN( 760)						b18->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size2),0,size2);
HXDLIN( 760)						{
HXLINE( 760)							int _g46 = 0;
HXDLIN( 760)							int _g47 = b18->length;
HXDLIN( 760)							while((_g46 < _g47)){
HXLINE( 760)								_g46 = (_g46 + 1);
HXDLIN( 760)								int i21 = (_g46 - 1);
HXDLIN( 760)								{
HXLINE( 760)									 ::haxe::io::ArrayBufferViewImpl this64 = b18->data;
HXDLIN( 760)									bool undoImage8;
HXDLIN( 760)									if ((i21 >= 0)) {
HXLINE( 760)										undoImage8 = (i21 < (this64->byteLength >> 2));
            									}
            									else {
HXLINE( 760)										undoImage8 = false;
            									}
HXDLIN( 760)									if (undoImage8) {
HXLINE( 760)										 ::haxe::io::Bytes _this2 = this64->bytes;
HXDLIN( 760)										int pos2 = ((i21 << 2) + this64->byteOffset);
HXDLIN( 760)										_this2->b[pos2] = ( (unsigned char)(0) );
HXDLIN( 760)										_this2->b[(pos2 + 1)] = ( (unsigned char)(0) );
HXDLIN( 760)										_this2->b[(pos2 + 2)] = ( (unsigned char)(0) );
HXDLIN( 760)										_this2->b[(pos2 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 760)					undoImage7 = b18;
            				}
            				break;
            				case (int)3: {
HXLINE( 760)					 ::iterMagic::VecIntImg vec2 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 760)					 ::iterMagic::VecIntImg v6 = vec2;
HXDLIN( 760)					{
HXLINE( 760)						v6->width = width2;
HXDLIN( 760)						v6->height = height2;
HXDLIN( 760)						v6->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 760)						v6->data = ::Array_obj< int >::__new(v6->length);
HXDLIN( 760)						{
HXLINE( 760)							int _g48 = 0;
HXDLIN( 760)							int _g49 = v6->length;
HXDLIN( 760)							while((_g48 < _g49)){
HXLINE( 760)								_g48 = (_g48 + 1);
HXDLIN( 760)								int i22 = (_g48 - 1);
HXDLIN( 760)								v6->data->__unsafe_set(i22,0);
            							}
            						}
            					}
HXDLIN( 760)					undoImage7 = v6;
            				}
            				break;
            				case (int)4: {
HXLINE( 760)					 ::iterMagic::StackIntImg sInt2 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 760)					 ::iterMagic::StackIntImg b19 = sInt2;
HXDLIN( 760)					{
HXLINE( 760)						b19->width = width2;
HXDLIN( 760)						b19->height = height2;
HXDLIN( 760)						b19->length = ::Std_obj::_hx_int(( (Float)((width2 * height2)) ));
HXDLIN( 760)						b19->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 760)						{
HXLINE( 760)							int len5 = b19->length;
HXDLIN( 760)							 ::haxe::ds::GenericStack_Int d2 = b19->data;
HXDLIN( 760)							if (::hx::IsNull( d2->head )) {
HXLINE( 760)								int _g50 = 0;
HXDLIN( 760)								int _g51 = len5;
HXDLIN( 760)								while((_g50 < _g51)){
HXLINE( 760)									_g50 = (_g50 + 1);
HXDLIN( 760)									int i23 = (_g50 - 1);
HXDLIN( 760)									d2->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d2->head);
            								}
            							}
            							else {
HXLINE( 760)								int _g52 = 0;
HXDLIN( 760)								int _g53 = len5;
HXDLIN( 760)								while((_g52 < _g53)){
HXLINE( 760)									_g52 = (_g52 + 1);
HXDLIN( 760)									int i24 = (_g52 - 1);
HXDLIN( 760)									{
HXLINE( 760)										 ::haxe::ds::GenericCell_Int l2 = b19->data->head;
HXDLIN( 760)										 ::haxe::ds::GenericCell_Int prev2 = null();
HXDLIN( 760)										{
HXLINE( 760)											int _g54 = 0;
HXDLIN( 760)											int _g55 = i24;
HXDLIN( 760)											while((_g54 < _g55)){
HXLINE( 760)												_g54 = (_g54 + 1);
HXDLIN( 760)												int i25 = (_g54 - 1);
HXLINE( 345)												prev2 = l2;
HXLINE( 346)												l2 = l2->next;
            											}
            										}
HXLINE( 760)										if (::hx::IsNull( prev2 )) {
HXLINE( 760)											b19->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 760)											l2 = null();
            										}
            										else {
HXLINE( 760)											prev2->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l2->next);
HXDLIN( 760)											l2 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 760)					undoImage7 = b19;
            				}
            				break;
            			}
HXDLIN( 760)			this63->image = undoImage7;
HXDLIN( 760)			this63->width = width2;
HXDLIN( 760)			this63->height = height2;
HXDLIN( 760)			this63->imageType = ( (int)(imageType2) );
HXDLIN( 760)			undoImage6 = this63;
HXDLIN( 760)			{
HXLINE( 760)				int rectLeft2 = xIter32->start;
HXDLIN( 760)				int rectTop2 = yIter32->start;
HXDLIN( 760)				int rectRight2 = xIter32->max;
HXDLIN( 760)				bool forceClear2 = false;
HXDLIN( 760)				{
HXLINE( 760)					int _g56 = rectTop2;
HXDLIN( 760)					int _g57 = yIter32->max;
HXDLIN( 760)					while((_g56 < _g57)){
HXLINE( 760)						_g56 = (_g56 + 1);
HXDLIN( 760)						int dy4 = (_g56 - 1);
HXDLIN( 760)						{
HXLINE( 760)							int _g58 = rectLeft2;
HXDLIN( 760)							int _g59 = rectRight2;
HXDLIN( 760)							while((_g58 < _g59)){
HXLINE( 760)								_g58 = (_g58 + 1);
HXDLIN( 760)								int dx4 = (_g58 - 1);
HXDLIN( 760)								::Dynamic this65 = pixelImage->image;
HXDLIN( 760)								int index8;
HXDLIN( 760)								if (pixelImage->useVirtualPos) {
HXLINE( 760)									index8 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx4) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 760)									index8 = ::Std_obj::_hx_int(( (Float)(((dy4 * pixelImage->width) + dx4)) ));
            								}
HXDLIN( 760)								int c6 = ::iterMagic::Iimg_obj::get(this65,index8);
HXDLIN( 760)								int col2;
HXDLIN( 760)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 760)									col2 = ((((((c6 >> 24) & 255) << 24) | ((c6 & 255) << 16)) | (((c6 >> 8) & 255) << 8)) | ((c6 >> 16) & 255));
            								}
            								else {
HXLINE( 760)									col2 = c6;
            								}
HXDLIN( 760)								bool _hx_tmp16;
HXDLIN( 760)								if (pixelImage->useMask) {
HXLINE( 760)									_hx_tmp16 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 760)									_hx_tmp16 = false;
            								}
HXDLIN( 760)								if (_hx_tmp16) {
HXLINE( 760)									 ::pi_xy::ImageStruct this66 = pixelImage->mask;
HXDLIN( 760)									::Dynamic this67 = this66->image;
HXDLIN( 760)									int index9;
HXDLIN( 760)									if (this66->useVirtualPos) {
HXLINE( 760)										index9 = ::Std_obj::_hx_int(((((( (Float)(dy4) ) - this66->virtualY) * ( (Float)(this66->width) )) + dx4) - this66->virtualX));
            									}
            									else {
HXLINE( 760)										index9 = ::Std_obj::_hx_int(( (Float)(((dy4 * this66->width) + dx4)) ));
            									}
HXDLIN( 760)									int c7 = ::iterMagic::Iimg_obj::get(this67,index9);
HXDLIN( 760)									int v7;
HXDLIN( 760)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 760)										v7 = ((((((c7 >> 24) & 255) << 24) | ((c7 & 255) << 16)) | (((c7 >> 8) & 255) << 8)) | ((c7 >> 16) & 255));
            									}
            									else {
HXLINE( 760)										v7 = c7;
            									}
HXDLIN( 760)									int maskPixel2 = v7;
HXDLIN( 760)									int this68 = col2;
HXDLIN( 760)									if ((maskPixel2 == 0)) {
HXLINE( 760)										col2 = this68;
            									}
            									else {
HXLINE( 760)										Float m02;
HXDLIN( 760)										int this69 = ((maskPixel2 >> 24) & 255);
HXDLIN( 760)										if ((this69 == 0)) {
HXLINE( 760)											m02 = ((Float)0.);
            										}
            										else {
HXLINE( 760)											m02 = (( (Float)(this69) ) / ( (Float)(255) ));
            										}
HXDLIN( 760)										Float m12;
HXDLIN( 760)										int this70 = ((maskPixel2 >> 16) & 255);
HXDLIN( 760)										if ((this70 == 0)) {
HXLINE( 760)											m12 = ((Float)0.);
            										}
            										else {
HXLINE( 760)											m12 = (( (Float)(this70) ) / ( (Float)(255) ));
            										}
HXDLIN( 760)										Float m22;
HXDLIN( 760)										int this71 = ((maskPixel2 >> 8) & 255);
HXDLIN( 760)										if ((this71 == 0)) {
HXLINE( 760)											m22 = ((Float)0.);
            										}
            										else {
HXLINE( 760)											m22 = (( (Float)(this71) ) / ( (Float)(255) ));
            										}
HXDLIN( 760)										Float m32;
HXDLIN( 760)										int this72 = (maskPixel2 & 255);
HXDLIN( 760)										if ((this72 == 0)) {
HXLINE( 760)											m32 = ((Float)0.);
            										}
            										else {
HXLINE( 760)											m32 = (( (Float)(this72) ) / ( (Float)(255) ));
            										}
HXDLIN( 760)										int ch02 = ::Std_obj::_hx_int(((((Float)1.) - m02) * ( (Float)(((this68 >> 24) & 255)) )));
HXDLIN( 760)										int ch12 = ::Std_obj::_hx_int(((((Float)1.) - m12) * ( (Float)(((this68 >> 16) & 255)) )));
HXDLIN( 760)										int ch22 = ::Std_obj::_hx_int(((((Float)1.) - m22) * ( (Float)(((this68 >> 8) & 255)) )));
HXDLIN( 760)										int ch32 = ::Std_obj::_hx_int(((((Float)1.) - m32) * ( (Float)((this68 & 255)) )));
HXDLIN( 760)										col2 = ((((::Math_obj::round((( (Float)(ch02) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch12) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch22) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch32) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 760)								if ((col2 != 0)) {
HXLINE( 760)									int x7 = (dx4 - rectLeft2);
HXDLIN( 760)									int y7 = (dy4 - rectTop2);
HXDLIN( 760)									int c8 = col2;
HXDLIN( 760)									bool _hx_tmp17;
HXDLIN( 760)									if ((((c8 >> 24) & 255) < 254)) {
HXLINE( 760)										_hx_tmp17 = undoImage6->transparent;
            									}
            									else {
HXLINE( 760)										_hx_tmp17 = false;
            									}
HXDLIN( 760)									if (_hx_tmp17) {
HXLINE( 760)										int location4;
HXDLIN( 760)										if (undoImage6->useVirtualPos) {
HXLINE( 760)											location4 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 760)											location4 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            										}
HXDLIN( 760)										int this73 = ::iterMagic::Iimg_obj::get(undoImage6->image,location4);
HXDLIN( 760)										int this74;
HXDLIN( 760)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 760)											this74 = ((((((this73 >> 24) & 255) << 24) | ((this73 & 255) << 16)) | (((this73 >> 8) & 255) << 8)) | ((this73 >> 16) & 255));
            										}
            										else {
HXLINE( 760)											this74 = this73;
            										}
HXDLIN( 760)										Float a17;
HXDLIN( 760)										int this75 = ((this74 >> 24) & 255);
HXDLIN( 760)										if ((this75 == 0)) {
HXLINE( 760)											a17 = ((Float)0.);
            										}
            										else {
HXLINE( 760)											a17 = (( (Float)(this75) ) / ( (Float)(255) ));
            										}
HXDLIN( 760)										Float r14;
HXDLIN( 760)										int this76 = ((this74 >> 16) & 255);
HXDLIN( 760)										if ((this76 == 0)) {
HXLINE( 760)											r14 = ((Float)0.);
            										}
            										else {
HXLINE( 760)											r14 = (( (Float)(this76) ) / ( (Float)(255) ));
            										}
HXDLIN( 760)										Float g14;
HXDLIN( 760)										int this77 = ((this74 >> 8) & 255);
HXDLIN( 760)										if ((this77 == 0)) {
HXLINE( 760)											g14 = ((Float)0.);
            										}
            										else {
HXLINE( 760)											g14 = (( (Float)(this77) ) / ( (Float)(255) ));
            										}
HXDLIN( 760)										Float b110;
HXDLIN( 760)										int this78 = (this74 & 255);
HXDLIN( 760)										if ((this78 == 0)) {
HXLINE( 760)											b110 = ((Float)0.);
            										}
            										else {
HXLINE( 760)											b110 = (( (Float)(this78) ) / ( (Float)(255) ));
            										}
HXDLIN( 760)										Float a24;
HXDLIN( 760)										int this79 = ((col2 >> 24) & 255);
HXDLIN( 760)										if ((this79 == 0)) {
HXLINE( 760)											a24 = ((Float)0.);
            										}
            										else {
HXLINE( 760)											a24 = (( (Float)(this79) ) / ( (Float)(255) ));
            										}
HXDLIN( 760)										Float r24;
HXDLIN( 760)										int this80 = ((col2 >> 16) & 255);
HXDLIN( 760)										if ((this80 == 0)) {
HXLINE( 760)											r24 = ((Float)0.);
            										}
            										else {
HXLINE( 760)											r24 = (( (Float)(this80) ) / ( (Float)(255) ));
            										}
HXDLIN( 760)										Float g24;
HXDLIN( 760)										int this81 = ((col2 >> 8) & 255);
HXDLIN( 760)										if ((this81 == 0)) {
HXLINE( 760)											g24 = ((Float)0.);
            										}
            										else {
HXLINE( 760)											g24 = (( (Float)(this81) ) / ( (Float)(255) ));
            										}
HXDLIN( 760)										Float b25;
HXDLIN( 760)										int this82 = (col2 & 255);
HXDLIN( 760)										if ((this82 == 0)) {
HXLINE( 760)											b25 = ((Float)0.);
            										}
            										else {
HXLINE( 760)											b25 = (( (Float)(this82) ) / ( (Float)(255) ));
            										}
HXDLIN( 760)										Float a34 = (a17 * (( (Float)(1) ) - a24));
HXDLIN( 760)										int r8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r14 * a34) + (r24 * a24))));
HXDLIN( 760)										int g8 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g14 * a34) + (g24 * a24))));
HXDLIN( 760)										int b20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b110 * a34) + (b25 * a24))));
HXDLIN( 760)										int a18 = ::Std_obj::_hx_int((( (Float)(255) ) * (a34 + a24)));
HXDLIN( 760)										int blended4 = ((((a18 << 24) | (r8 << 16)) | (g8 << 8)) | b20);
HXDLIN( 760)										{
HXLINE( 760)											int _hx_tmp18;
HXDLIN( 760)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 760)												_hx_tmp18 = ((((((blended4 >> 24) & 255) << 24) | ((blended4 & 255) << 16)) | (((blended4 >> 8) & 255) << 8)) | ((blended4 >> 16) & 255));
            											}
            											else {
HXLINE( 760)												_hx_tmp18 = blended4;
            											}
HXDLIN( 760)											::iterMagic::Iimg_obj::set(undoImage6->image,location4,_hx_tmp18);
            										}
            									}
            									else {
HXLINE( 760)										::Dynamic this83 = undoImage6->image;
HXDLIN( 760)										int index10;
HXDLIN( 760)										if (undoImage6->useVirtualPos) {
HXLINE( 760)											index10 = ::Std_obj::_hx_int(((((( (Float)(y7) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x7) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 760)											index10 = ::Std_obj::_hx_int(( (Float)(((y7 * undoImage6->width) + x7)) ));
            										}
HXDLIN( 760)										int _hx_tmp19;
HXDLIN( 760)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 760)											_hx_tmp19 = ((((((c8 >> 24) & 255) << 24) | ((c8 & 255) << 16)) | (((c8 >> 8) & 255) << 8)) | ((c8 >> 16) & 255));
            										}
            										else {
HXLINE( 760)											_hx_tmp19 = c8;
            										}
HXDLIN( 760)										::iterMagic::Iimg_obj::set(this83,index10,_hx_tmp19);
            									}
            								}
            								else {
HXLINE( 760)									if (forceClear2) {
HXLINE( 760)										::Dynamic this84 = undoImage6->image;
HXDLIN( 760)										int x8 = (dx4 - rectLeft2);
HXDLIN( 760)										int y8 = (dy4 - rectTop2);
HXDLIN( 760)										int index11;
HXDLIN( 760)										if (undoImage6->useVirtualPos) {
HXLINE( 760)											index11 = ::Std_obj::_hx_int(((((( (Float)(y8) ) - undoImage6->virtualY) * ( (Float)(undoImage6->width) )) + x8) - undoImage6->virtualX));
            										}
            										else {
HXLINE( 760)											index11 = ::Std_obj::_hx_int(( (Float)(((y8 * undoImage6->width) + x8)) ));
            										}
HXDLIN( 760)										::iterMagic::Iimg_obj::set(this84,index11,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 760)		{
HXLINE( 760)			int _g_min4 = xIter32->start;
HXDLIN( 760)			int _g_max4 = xIter32->max;
HXDLIN( 760)			while((_g_min4 < _g_max4)){
HXLINE( 760)				_g_min4 = (_g_min4 + 1);
HXDLIN( 760)				int px3 = (_g_min4 - 1);
HXDLIN( 760)				Float pcx2 = (( (Float)(px3) ) - cx1);
HXDLIN( 760)				{
HXLINE( 760)					int _g_min5 = yIter32->start;
HXDLIN( 760)					int _g_max5 = yIter32->max;
HXDLIN( 760)					while((_g_min5 < _g_max5)){
HXLINE( 760)						_g_min5 = (_g_min5 + 1);
HXDLIN( 760)						int py3 = (_g_min5 - 1);
HXDLIN( 760)						Float pcy2 = (( (Float)(py3) ) - cy1);
HXDLIN( 760)						Float dot312 = ((pcx2 * bcx2) + (pcy2 * bcy2));
HXDLIN( 760)						Float dot322 = ((pcx2 * acx2) + (pcy2 * acy2));
HXDLIN( 760)						Float ratioA2 = (((dot222 * dot312) - (dot122 * dot322)) * denom12);
HXDLIN( 760)						Float ratioB2 = (((dot112 * dot322) - (dot122 * dot312)) * denom12);
HXDLIN( 760)						Float ratioC2 = ((((Float)1.0) - ratioB2) - ratioA2);
HXDLIN( 760)						bool _hx_tmp20;
HXDLIN( 760)						bool _hx_tmp21;
HXDLIN( 760)						if ((ratioA2 >= 0)) {
HXLINE( 760)							_hx_tmp21 = (ratioB2 >= 0);
            						}
            						else {
HXLINE( 760)							_hx_tmp21 = false;
            						}
HXDLIN( 760)						if (_hx_tmp21) {
HXLINE( 760)							_hx_tmp20 = (ratioC2 >= 0);
            						}
            						else {
HXLINE( 760)							_hx_tmp20 = false;
            						}
HXDLIN( 760)						if (_hx_tmp20) {
HXLINE( 760)							int i26 = ::Std_obj::_hx_int((((( (Float)(aA2) ) * ratioA2) + (( (Float)(aB2) ) * ratioB2)) + (( (Float)(aC2) ) * ratioC2)));
HXDLIN( 760)							if ((i26 > 255)) {
HXLINE(  24)								i26 = 255;
            							}
HXLINE( 760)							if ((i26 < 0)) {
HXLINE(  25)								i26 = 0;
            							}
HXLINE( 760)							int a19 = i26;
HXDLIN( 760)							int i27 = ::Std_obj::_hx_int((((( (Float)(rA2) ) * ratioA2) + (( (Float)(rB2) ) * ratioB2)) + (( (Float)(rC2) ) * ratioC2)));
HXDLIN( 760)							if ((i27 > 255)) {
HXLINE(  24)								i27 = 255;
            							}
HXLINE( 760)							if ((i27 < 0)) {
HXLINE(  25)								i27 = 0;
            							}
HXLINE( 760)							int r9 = i27;
HXDLIN( 760)							int i28 = ::Std_obj::_hx_int((((( (Float)(gA2) ) * ratioA2) + (( (Float)(gB2) ) * ratioB2)) + (( (Float)(gC2) ) * ratioC2)));
HXDLIN( 760)							if ((i28 > 255)) {
HXLINE(  24)								i28 = 255;
            							}
HXLINE( 760)							if ((i28 < 0)) {
HXLINE(  25)								i28 = 0;
            							}
HXLINE( 760)							int g9 = i28;
HXDLIN( 760)							int i29 = ::Std_obj::_hx_int((((( (Float)(bA2) ) * ratioA2) + (( (Float)(bB2) ) * ratioB2)) + (( (Float)(bC2) ) * ratioC2)));
HXDLIN( 760)							if ((i29 > 255)) {
HXLINE(  24)								i29 = 255;
            							}
HXLINE( 760)							if ((i29 < 0)) {
HXLINE(  25)								i29 = 0;
            							}
HXLINE( 760)							int b26 = i29;
HXDLIN( 760)							{
HXLINE( 760)								int location5;
HXDLIN( 760)								if (pixelImage->useVirtualPos) {
HXLINE( 760)									location5 = ::Std_obj::_hx_int(((((( (Float)(py3) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px3) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 760)									location5 = ::Std_obj::_hx_int(( (Float)(((py3 * pixelImage->width) + px3)) ));
            								}
HXDLIN( 760)								bool _hx_tmp22;
HXDLIN( 760)								if (pixelImage->transparent) {
HXLINE( 760)									_hx_tmp22 = (a19 < 254);
            								}
            								else {
HXLINE( 760)									_hx_tmp22 = false;
            								}
HXDLIN( 760)								if (_hx_tmp22) {
HXLINE( 760)									int this85 = ::iterMagic::Iimg_obj::get(pixelImage->image,location5);
HXDLIN( 760)									int old2;
HXDLIN( 760)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 760)										old2 = ((((((this85 >> 24) & 255) << 24) | ((this85 & 255) << 16)) | (((this85 >> 8) & 255) << 8)) | ((this85 >> 16) & 255));
            									}
            									else {
HXLINE( 760)										old2 = this85;
            									}
HXDLIN( 760)									int rhs2 = ((((a19 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
HXDLIN( 760)									Float a110;
HXDLIN( 760)									int this86 = ((old2 >> 24) & 255);
HXDLIN( 760)									if ((this86 == 0)) {
HXLINE( 760)										a110 = ((Float)0.);
            									}
            									else {
HXLINE( 760)										a110 = (( (Float)(this86) ) / ( (Float)(255) ));
            									}
HXDLIN( 760)									Float r15;
HXDLIN( 760)									int this87 = ((old2 >> 16) & 255);
HXDLIN( 760)									if ((this87 == 0)) {
HXLINE( 760)										r15 = ((Float)0.);
            									}
            									else {
HXLINE( 760)										r15 = (( (Float)(this87) ) / ( (Float)(255) ));
            									}
HXDLIN( 760)									Float g15;
HXDLIN( 760)									int this88 = ((old2 >> 8) & 255);
HXDLIN( 760)									if ((this88 == 0)) {
HXLINE( 760)										g15 = ((Float)0.);
            									}
            									else {
HXLINE( 760)										g15 = (( (Float)(this88) ) / ( (Float)(255) ));
            									}
HXDLIN( 760)									Float b111;
HXDLIN( 760)									int this89 = (old2 & 255);
HXDLIN( 760)									if ((this89 == 0)) {
HXLINE( 760)										b111 = ((Float)0.);
            									}
            									else {
HXLINE( 760)										b111 = (( (Float)(this89) ) / ( (Float)(255) ));
            									}
HXDLIN( 760)									Float a25;
HXDLIN( 760)									int this90 = ((rhs2 >> 24) & 255);
HXDLIN( 760)									if ((this90 == 0)) {
HXLINE( 760)										a25 = ((Float)0.);
            									}
            									else {
HXLINE( 760)										a25 = (( (Float)(this90) ) / ( (Float)(255) ));
            									}
HXDLIN( 760)									Float r25;
HXDLIN( 760)									int this91 = ((rhs2 >> 16) & 255);
HXDLIN( 760)									if ((this91 == 0)) {
HXLINE( 760)										r25 = ((Float)0.);
            									}
            									else {
HXLINE( 760)										r25 = (( (Float)(this91) ) / ( (Float)(255) ));
            									}
HXDLIN( 760)									Float g25;
HXDLIN( 760)									int this92 = ((rhs2 >> 8) & 255);
HXDLIN( 760)									if ((this92 == 0)) {
HXLINE( 760)										g25 = ((Float)0.);
            									}
            									else {
HXLINE( 760)										g25 = (( (Float)(this92) ) / ( (Float)(255) ));
            									}
HXDLIN( 760)									Float b27;
HXDLIN( 760)									int this93 = (rhs2 & 255);
HXDLIN( 760)									if ((this93 == 0)) {
HXLINE( 760)										b27 = ((Float)0.);
            									}
            									else {
HXLINE( 760)										b27 = (( (Float)(this93) ) / ( (Float)(255) ));
            									}
HXDLIN( 760)									Float a35 = (a110 * (( (Float)(1) ) - a25));
HXDLIN( 760)									int r10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r15 * a35) + (r25 * a25))));
HXDLIN( 760)									int g10 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g15 * a35) + (g25 * a25))));
HXDLIN( 760)									int b28 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b111 * a35) + (b27 * a25))));
HXDLIN( 760)									int a20 = ::Std_obj::_hx_int((( (Float)(255) ) * (a35 + a25)));
HXDLIN( 760)									int blended5 = ((((a20 << 24) | (r10 << 16)) | (g10 << 8)) | b28);
HXDLIN( 760)									{
HXLINE( 760)										int _hx_tmp23;
HXDLIN( 760)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 760)											_hx_tmp23 = ((((((blended5 >> 24) & 255) << 24) | ((blended5 & 255) << 16)) | (((blended5 >> 8) & 255) << 8)) | ((blended5 >> 16) & 255));
            										}
            										else {
HXLINE( 760)											_hx_tmp23 = blended5;
            										}
HXDLIN( 760)										::iterMagic::Iimg_obj::set(pixelImage->image,location5,_hx_tmp23);
            									}
            								}
            								else {
HXLINE( 760)									int value2;
HXDLIN( 760)									if (pixelImage->isLittle) {
HXLINE( 760)										value2 = ((((a19 << 24) | (b26 << 16)) | (g9 << 8)) | r9);
            									}
            									else {
HXLINE( 760)										value2 = ((((a19 << 24) | (r9 << 16)) | (g9 << 8)) | b26);
            									}
HXDLIN( 760)									::iterMagic::Iimg_obj::set(pixelImage->image,location5,value2);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 760)		 ::pi_xy::algo::HitTri hitTriTop;
HXDLIN( 760)		if ((hasHit == false)) {
HXLINE( 760)			 ::pi_xy::algo::HitTri v8 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,qx,qy,bx1,by1,cx1,cy1,true);
HXDLIN( 760)			if (hasUndo2) {
HXLINE( 760)				v8->undoImage = undoImage6;
HXDLIN( 760)				v8->undoX = xIter32->start;
HXDLIN( 760)				v8->undoY = yIter32->start;
            			}
HXDLIN( 760)			hitTriTop = v8;
            		}
            		else {
HXLINE( 760)			hitTriTop = null();
            		}
HXLINE( 761)		bool hasUndo3 = false;
HXDLIN( 761)		int aA3 = ((color1 >> 24) & 255);
HXDLIN( 761)		int rA3 = ((color1 >> 16) & 255);
HXDLIN( 761)		int gA3 = ((color1 >> 8) & 255);
HXDLIN( 761)		int bA3 = (color1 & 255);
HXDLIN( 761)		int aB3 = ((half >> 24) & 255);
HXDLIN( 761)		int rB3 = ((half >> 16) & 255);
HXDLIN( 761)		int gB3 = ((half >> 8) & 255);
HXDLIN( 761)		int bB3 = (half & 255);
HXDLIN( 761)		int aC3 = ((color2 >> 24) & 255);
HXDLIN( 761)		int rC3 = ((color2 >> 16) & 255);
HXDLIN( 761)		int gC3 = ((color2 >> 8) & 255);
HXDLIN( 761)		int bC3 = (color2 & 255);
HXDLIN( 761)		Float bcx3 = (ax1 - dx3);
HXDLIN( 761)		Float bcy3 = (ay1 - dy3);
HXDLIN( 761)		Float acx3 = (px - dx3);
HXDLIN( 761)		Float acy3 = (py - dy3);
HXDLIN( 761)		Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN( 761)		Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN( 761)		Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN( 761)		Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN( 761)		 ::pi_xy::iter::IntIterStart xIter33;
HXDLIN( 761)		if ((px > ax1)) {
HXLINE( 761)			if ((px > dx3)) {
HXLINE( 761)				int min12;
HXDLIN( 761)				if ((ax1 > dx3)) {
HXLINE( 761)					min12 = ::Math_obj::floor(dx3);
            				}
            				else {
HXLINE( 761)					min12 = ::Math_obj::floor(ax1);
            				}
HXDLIN( 761)				int ii_min24 = min12;
HXDLIN( 761)				int ii_max24 = ::Math_obj::ceil(px);
HXDLIN( 761)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min24,ii_max24);
            			}
            			else {
HXLINE( 761)				int ii_min25 = ::Math_obj::floor(ax1);
HXDLIN( 761)				int ii_max25 = ::Math_obj::ceil(dx3);
HXDLIN( 761)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min25,ii_max25);
            			}
            		}
            		else {
HXLINE( 761)			if ((ax1 > dx3)) {
HXLINE( 761)				int min13;
HXDLIN( 761)				if ((px > dx3)) {
HXLINE( 761)					min13 = ::Math_obj::floor(dx3);
            				}
            				else {
HXLINE( 761)					min13 = ::Math_obj::ceil(px);
            				}
HXDLIN( 761)				int ii_min26 = min13;
HXDLIN( 761)				int ii_max26 = ::Math_obj::ceil(ax1);
HXDLIN( 761)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min26,ii_max26);
            			}
            			else {
HXLINE( 761)				int ii_min27 = ::Math_obj::floor(px);
HXDLIN( 761)				int ii_max27 = ::Math_obj::ceil(dx3);
HXDLIN( 761)				xIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min27,ii_max27);
            			}
            		}
HXDLIN( 761)		 ::pi_xy::iter::IntIterStart yIter33;
HXDLIN( 761)		if ((py > ay1)) {
HXLINE( 761)			if ((py > dy3)) {
HXLINE( 761)				int min14;
HXDLIN( 761)				if ((ay1 > dy3)) {
HXLINE( 761)					min14 = ::Math_obj::floor(dy3);
            				}
            				else {
HXLINE( 761)					min14 = ::Math_obj::floor(ay1);
            				}
HXDLIN( 761)				int ii_min28 = min14;
HXDLIN( 761)				int ii_max28 = ::Math_obj::ceil(py);
HXDLIN( 761)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min28,ii_max28);
            			}
            			else {
HXLINE( 761)				int ii_min29 = ::Math_obj::floor(ay1);
HXDLIN( 761)				int ii_max29 = ::Math_obj::ceil(dy3);
HXDLIN( 761)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min29,ii_max29);
            			}
            		}
            		else {
HXLINE( 761)			if ((ay1 > dy3)) {
HXLINE( 761)				int min15;
HXDLIN( 761)				if ((py > dy3)) {
HXLINE( 761)					min15 = ::Math_obj::floor(dy3);
            				}
            				else {
HXLINE( 761)					min15 = ::Math_obj::ceil(py);
            				}
HXDLIN( 761)				int ii_min30 = min15;
HXDLIN( 761)				int ii_max30 = ::Math_obj::ceil(ay1);
HXDLIN( 761)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min30,ii_max30);
            			}
            			else {
HXLINE( 761)				int ii_min31 = ::Math_obj::floor(py);
HXDLIN( 761)				int ii_max31 = ::Math_obj::ceil(dy3);
HXDLIN( 761)				yIter33 =  ::pi_xy::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min31,ii_max31);
            			}
            		}
HXDLIN( 761)		 ::pi_xy::ImageStruct undoImage9 = null();
HXDLIN( 761)		if (hasUndo3) {
HXLINE( 761)			int width3 = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 761)			int height3 = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 761)			 ::Dynamic imageType3 = null();
HXDLIN( 761)			 ::pi_xy::ImageStruct this94 =  ::pi_xy::ImageStruct_obj::__alloc( HX_CTX );
HXDLIN( 761)			if (::hx::IsNull( imageType3 )) {
HXLINE(  54)				imageType3 = ::pi_xy::ImageStruct_obj::defaultType;
            			}
HXLINE( 761)			::Dynamic undoImage10;
HXDLIN( 761)			switch((int)(( (int)(imageType3) ))){
            				case (int)0: {
HXLINE( 761)					 ::iterMagic::BytesImg byt3 =  ::iterMagic::BytesImg_obj::__alloc( HX_CTX );
HXDLIN( 761)					 ::iterMagic::BytesImg b29 = byt3;
HXDLIN( 761)					{
HXLINE( 761)						b29->width = width3;
HXDLIN( 761)						b29->height = height3;
HXDLIN( 761)						b29->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 761)						b29->data = ::haxe::io::Bytes_obj::alloc((b29->length * 4));
HXDLIN( 761)						{
HXLINE( 761)							int len6 = b29->length;
HXDLIN( 761)							int w3 = 0;
HXDLIN( 761)							{
HXLINE( 761)								int _g60 = 0;
HXDLIN( 761)								int _g61 = b29->height;
HXDLIN( 761)								while((_g60 < _g61)){
HXLINE( 761)									_g60 = (_g60 + 1);
HXDLIN( 761)									int y9 = (_g60 - 1);
HXDLIN( 761)									{
HXLINE( 761)										int _g62 = 0;
HXDLIN( 761)										int _g63 = b29->width;
HXDLIN( 761)										while((_g62 < _g63)){
HXLINE( 761)											_g62 = (_g62 + 1);
HXDLIN( 761)											int x9 = (_g62 - 1);
HXDLIN( 761)											{
HXLINE( 761)												w3 = (w3 + 1);
HXDLIN( 761)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 761)											{
HXLINE( 761)												w3 = (w3 + 1);
HXDLIN( 761)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 761)											{
HXLINE( 761)												w3 = (w3 + 1);
HXDLIN( 761)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
HXDLIN( 761)											{
HXLINE( 761)												w3 = (w3 + 1);
HXDLIN( 761)												b29->data->b[(w3 - 1)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 761)					undoImage10 = b29;
            				}
            				break;
            				case (int)1: {
HXLINE( 761)					 ::iterMagic::ArrIntImg arrI3 =  ::iterMagic::ArrIntImg_obj::__alloc( HX_CTX );
HXDLIN( 761)					 ::iterMagic::ArrIntImg a26 = arrI3;
HXDLIN( 761)					{
HXLINE( 761)						a26->width = width3;
HXDLIN( 761)						a26->height = height3;
HXDLIN( 761)						a26->data = ::Array_obj< int >::__new(0);
HXDLIN( 761)						a26->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 761)						{
HXLINE( 761)							int _g64 = 0;
HXDLIN( 761)							int _g65 = a26->length;
HXDLIN( 761)							while((_g64 < _g65)){
HXLINE( 761)								_g64 = (_g64 + 1);
HXDLIN( 761)								int i30 = (_g64 - 1);
HXDLIN( 761)								a26->data[i30] = 0;
            							}
            						}
            					}
HXDLIN( 761)					undoImage10 = a26;
            				}
            				break;
            				case (int)2: {
HXLINE( 761)					 ::iterMagic::U32ArrImg u32a3 =  ::iterMagic::U32ArrImg_obj::__alloc( HX_CTX );
HXDLIN( 761)					 ::iterMagic::U32ArrImg b30 = u32a3;
HXDLIN( 761)					{
HXLINE( 761)						b30->width = width3;
HXDLIN( 761)						b30->height = height3;
HXDLIN( 761)						b30->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 761)						int size3 = (b30->length * 4);
HXDLIN( 761)						b30->data =  ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size3),0,size3);
HXDLIN( 761)						{
HXLINE( 761)							int _g66 = 0;
HXDLIN( 761)							int _g67 = b30->length;
HXDLIN( 761)							while((_g66 < _g67)){
HXLINE( 761)								_g66 = (_g66 + 1);
HXDLIN( 761)								int i31 = (_g66 - 1);
HXDLIN( 761)								{
HXLINE( 761)									 ::haxe::io::ArrayBufferViewImpl this95 = b30->data;
HXDLIN( 761)									bool undoImage11;
HXDLIN( 761)									if ((i31 >= 0)) {
HXLINE( 761)										undoImage11 = (i31 < (this95->byteLength >> 2));
            									}
            									else {
HXLINE( 761)										undoImage11 = false;
            									}
HXDLIN( 761)									if (undoImage11) {
HXLINE( 761)										 ::haxe::io::Bytes _this3 = this95->bytes;
HXDLIN( 761)										int pos3 = ((i31 << 2) + this95->byteOffset);
HXDLIN( 761)										_this3->b[pos3] = ( (unsigned char)(0) );
HXDLIN( 761)										_this3->b[(pos3 + 1)] = ( (unsigned char)(0) );
HXDLIN( 761)										_this3->b[(pos3 + 2)] = ( (unsigned char)(0) );
HXDLIN( 761)										_this3->b[(pos3 + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
HXDLIN( 761)					undoImage10 = b30;
            				}
            				break;
            				case (int)3: {
HXLINE( 761)					 ::iterMagic::VecIntImg vec3 =  ::iterMagic::VecIntImg_obj::__alloc( HX_CTX );
HXDLIN( 761)					 ::iterMagic::VecIntImg v9 = vec3;
HXDLIN( 761)					{
HXLINE( 761)						v9->width = width3;
HXDLIN( 761)						v9->height = height3;
HXDLIN( 761)						v9->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 761)						v9->data = ::Array_obj< int >::__new(v9->length);
HXDLIN( 761)						{
HXLINE( 761)							int _g68 = 0;
HXDLIN( 761)							int _g69 = v9->length;
HXDLIN( 761)							while((_g68 < _g69)){
HXLINE( 761)								_g68 = (_g68 + 1);
HXDLIN( 761)								int i32 = (_g68 - 1);
HXDLIN( 761)								v9->data->__unsafe_set(i32,0);
            							}
            						}
            					}
HXDLIN( 761)					undoImage10 = v9;
            				}
            				break;
            				case (int)4: {
HXLINE( 761)					 ::iterMagic::StackIntImg sInt3 =  ::iterMagic::StackIntImg_obj::__alloc( HX_CTX );
HXDLIN( 761)					 ::iterMagic::StackIntImg b31 = sInt3;
HXDLIN( 761)					{
HXLINE( 761)						b31->width = width3;
HXDLIN( 761)						b31->height = height3;
HXDLIN( 761)						b31->length = ::Std_obj::_hx_int(( (Float)((width3 * height3)) ));
HXDLIN( 761)						b31->data =  ::haxe::ds::GenericStack_Int_obj::__alloc( HX_CTX );
HXDLIN( 761)						{
HXLINE( 761)							int len7 = b31->length;
HXDLIN( 761)							 ::haxe::ds::GenericStack_Int d3 = b31->data;
HXDLIN( 761)							if (::hx::IsNull( d3->head )) {
HXLINE( 761)								int _g70 = 0;
HXDLIN( 761)								int _g71 = len7;
HXDLIN( 761)								while((_g70 < _g71)){
HXLINE( 761)									_g70 = (_g70 + 1);
HXDLIN( 761)									int i33 = (_g70 - 1);
HXDLIN( 761)									d3->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,d3->head);
            								}
            							}
            							else {
HXLINE( 761)								int _g72 = 0;
HXDLIN( 761)								int _g73 = len7;
HXDLIN( 761)								while((_g72 < _g73)){
HXLINE( 761)									_g72 = (_g72 + 1);
HXDLIN( 761)									int i34 = (_g72 - 1);
HXDLIN( 761)									{
HXLINE( 761)										 ::haxe::ds::GenericCell_Int l3 = b31->data->head;
HXDLIN( 761)										 ::haxe::ds::GenericCell_Int prev3 = null();
HXDLIN( 761)										{
HXLINE( 761)											int _g74 = 0;
HXDLIN( 761)											int _g75 = i34;
HXDLIN( 761)											while((_g74 < _g75)){
HXLINE( 761)												_g74 = (_g74 + 1);
HXDLIN( 761)												int i35 = (_g74 - 1);
HXLINE( 345)												prev3 = l3;
HXLINE( 346)												l3 = l3->next;
            											}
            										}
HXLINE( 761)										if (::hx::IsNull( prev3 )) {
HXLINE( 761)											b31->data->head =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 761)											l3 = null();
            										}
            										else {
HXLINE( 761)											prev3->next =  ::haxe::ds::GenericCell_Int_obj::__alloc( HX_CTX ,0,l3->next);
HXDLIN( 761)											l3 = null();
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 761)					undoImage10 = b31;
            				}
            				break;
            			}
HXDLIN( 761)			this94->image = undoImage10;
HXDLIN( 761)			this94->width = width3;
HXDLIN( 761)			this94->height = height3;
HXDLIN( 761)			this94->imageType = ( (int)(imageType3) );
HXDLIN( 761)			undoImage9 = this94;
HXDLIN( 761)			{
HXLINE( 761)				int rectLeft3 = xIter33->start;
HXDLIN( 761)				int rectTop3 = yIter33->start;
HXDLIN( 761)				int rectRight3 = xIter33->max;
HXDLIN( 761)				bool forceClear3 = false;
HXDLIN( 761)				{
HXLINE( 761)					int _g76 = rectTop3;
HXDLIN( 761)					int _g77 = yIter33->max;
HXDLIN( 761)					while((_g76 < _g77)){
HXLINE( 761)						_g76 = (_g76 + 1);
HXDLIN( 761)						int dy5 = (_g76 - 1);
HXDLIN( 761)						{
HXLINE( 761)							int _g78 = rectLeft3;
HXDLIN( 761)							int _g79 = rectRight3;
HXDLIN( 761)							while((_g78 < _g79)){
HXLINE( 761)								_g78 = (_g78 + 1);
HXDLIN( 761)								int dx5 = (_g78 - 1);
HXDLIN( 761)								::Dynamic this96 = pixelImage->image;
HXDLIN( 761)								int index12;
HXDLIN( 761)								if (pixelImage->useVirtualPos) {
HXLINE( 761)									index12 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx5) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 761)									index12 = ::Std_obj::_hx_int(( (Float)(((dy5 * pixelImage->width) + dx5)) ));
            								}
HXDLIN( 761)								int c9 = ::iterMagic::Iimg_obj::get(this96,index12);
HXDLIN( 761)								int col3;
HXDLIN( 761)								if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 761)									col3 = ((((((c9 >> 24) & 255) << 24) | ((c9 & 255) << 16)) | (((c9 >> 8) & 255) << 8)) | ((c9 >> 16) & 255));
            								}
            								else {
HXLINE( 761)									col3 = c9;
            								}
HXDLIN( 761)								bool _hx_tmp24;
HXDLIN( 761)								if (pixelImage->useMask) {
HXLINE( 761)									_hx_tmp24 = ::hx::IsNotNull( pixelImage->mask );
            								}
            								else {
HXLINE( 761)									_hx_tmp24 = false;
            								}
HXDLIN( 761)								if (_hx_tmp24) {
HXLINE( 761)									 ::pi_xy::ImageStruct this97 = pixelImage->mask;
HXDLIN( 761)									::Dynamic this98 = this97->image;
HXDLIN( 761)									int index13;
HXDLIN( 761)									if (this97->useVirtualPos) {
HXLINE( 761)										index13 = ::Std_obj::_hx_int(((((( (Float)(dy5) ) - this97->virtualY) * ( (Float)(this97->width) )) + dx5) - this97->virtualX));
            									}
            									else {
HXLINE( 761)										index13 = ::Std_obj::_hx_int(( (Float)(((dy5 * this97->width) + dx5)) ));
            									}
HXDLIN( 761)									int c10 = ::iterMagic::Iimg_obj::get(this98,index13);
HXDLIN( 761)									int v10;
HXDLIN( 761)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 761)										v10 = ((((((c10 >> 24) & 255) << 24) | ((c10 & 255) << 16)) | (((c10 >> 8) & 255) << 8)) | ((c10 >> 16) & 255));
            									}
            									else {
HXLINE( 761)										v10 = c10;
            									}
HXDLIN( 761)									int maskPixel3 = v10;
HXDLIN( 761)									int this99 = col3;
HXDLIN( 761)									if ((maskPixel3 == 0)) {
HXLINE( 761)										col3 = this99;
            									}
            									else {
HXLINE( 761)										Float m03;
HXDLIN( 761)										int this100 = ((maskPixel3 >> 24) & 255);
HXDLIN( 761)										if ((this100 == 0)) {
HXLINE( 761)											m03 = ((Float)0.);
            										}
            										else {
HXLINE( 761)											m03 = (( (Float)(this100) ) / ( (Float)(255) ));
            										}
HXDLIN( 761)										Float m13;
HXDLIN( 761)										int this101 = ((maskPixel3 >> 16) & 255);
HXDLIN( 761)										if ((this101 == 0)) {
HXLINE( 761)											m13 = ((Float)0.);
            										}
            										else {
HXLINE( 761)											m13 = (( (Float)(this101) ) / ( (Float)(255) ));
            										}
HXDLIN( 761)										Float m23;
HXDLIN( 761)										int this102 = ((maskPixel3 >> 8) & 255);
HXDLIN( 761)										if ((this102 == 0)) {
HXLINE( 761)											m23 = ((Float)0.);
            										}
            										else {
HXLINE( 761)											m23 = (( (Float)(this102) ) / ( (Float)(255) ));
            										}
HXDLIN( 761)										Float m33;
HXDLIN( 761)										int this103 = (maskPixel3 & 255);
HXDLIN( 761)										if ((this103 == 0)) {
HXLINE( 761)											m33 = ((Float)0.);
            										}
            										else {
HXLINE( 761)											m33 = (( (Float)(this103) ) / ( (Float)(255) ));
            										}
HXDLIN( 761)										int ch03 = ::Std_obj::_hx_int(((((Float)1.) - m03) * ( (Float)(((this99 >> 24) & 255)) )));
HXDLIN( 761)										int ch13 = ::Std_obj::_hx_int(((((Float)1.) - m13) * ( (Float)(((this99 >> 16) & 255)) )));
HXDLIN( 761)										int ch23 = ::Std_obj::_hx_int(((((Float)1.) - m23) * ( (Float)(((this99 >> 8) & 255)) )));
HXDLIN( 761)										int ch33 = ::Std_obj::_hx_int(((((Float)1.) - m33) * ( (Float)((this99 & 255)) )));
HXDLIN( 761)										col3 = ((((::Math_obj::round((( (Float)(ch03) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch13) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch23) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch33) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 761)								if ((col3 != 0)) {
HXLINE( 761)									int x10 = (dx5 - rectLeft3);
HXDLIN( 761)									int y10 = (dy5 - rectTop3);
HXDLIN( 761)									int c11 = col3;
HXDLIN( 761)									bool _hx_tmp25;
HXDLIN( 761)									if ((((c11 >> 24) & 255) < 254)) {
HXLINE( 761)										_hx_tmp25 = undoImage9->transparent;
            									}
            									else {
HXLINE( 761)										_hx_tmp25 = false;
            									}
HXDLIN( 761)									if (_hx_tmp25) {
HXLINE( 761)										int location6;
HXDLIN( 761)										if (undoImage9->useVirtualPos) {
HXLINE( 761)											location6 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 761)											location6 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            										}
HXDLIN( 761)										int this104 = ::iterMagic::Iimg_obj::get(undoImage9->image,location6);
HXDLIN( 761)										int this105;
HXDLIN( 761)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 761)											this105 = ((((((this104 >> 24) & 255) << 24) | ((this104 & 255) << 16)) | (((this104 >> 8) & 255) << 8)) | ((this104 >> 16) & 255));
            										}
            										else {
HXLINE( 761)											this105 = this104;
            										}
HXDLIN( 761)										Float a111;
HXDLIN( 761)										int this106 = ((this105 >> 24) & 255);
HXDLIN( 761)										if ((this106 == 0)) {
HXLINE( 761)											a111 = ((Float)0.);
            										}
            										else {
HXLINE( 761)											a111 = (( (Float)(this106) ) / ( (Float)(255) ));
            										}
HXDLIN( 761)										Float r16;
HXDLIN( 761)										int this107 = ((this105 >> 16) & 255);
HXDLIN( 761)										if ((this107 == 0)) {
HXLINE( 761)											r16 = ((Float)0.);
            										}
            										else {
HXLINE( 761)											r16 = (( (Float)(this107) ) / ( (Float)(255) ));
            										}
HXDLIN( 761)										Float g16;
HXDLIN( 761)										int this108 = ((this105 >> 8) & 255);
HXDLIN( 761)										if ((this108 == 0)) {
HXLINE( 761)											g16 = ((Float)0.);
            										}
            										else {
HXLINE( 761)											g16 = (( (Float)(this108) ) / ( (Float)(255) ));
            										}
HXDLIN( 761)										Float b112;
HXDLIN( 761)										int this109 = (this105 & 255);
HXDLIN( 761)										if ((this109 == 0)) {
HXLINE( 761)											b112 = ((Float)0.);
            										}
            										else {
HXLINE( 761)											b112 = (( (Float)(this109) ) / ( (Float)(255) ));
            										}
HXDLIN( 761)										Float a27;
HXDLIN( 761)										int this110 = ((col3 >> 24) & 255);
HXDLIN( 761)										if ((this110 == 0)) {
HXLINE( 761)											a27 = ((Float)0.);
            										}
            										else {
HXLINE( 761)											a27 = (( (Float)(this110) ) / ( (Float)(255) ));
            										}
HXDLIN( 761)										Float r26;
HXDLIN( 761)										int this111 = ((col3 >> 16) & 255);
HXDLIN( 761)										if ((this111 == 0)) {
HXLINE( 761)											r26 = ((Float)0.);
            										}
            										else {
HXLINE( 761)											r26 = (( (Float)(this111) ) / ( (Float)(255) ));
            										}
HXDLIN( 761)										Float g26;
HXDLIN( 761)										int this112 = ((col3 >> 8) & 255);
HXDLIN( 761)										if ((this112 == 0)) {
HXLINE( 761)											g26 = ((Float)0.);
            										}
            										else {
HXLINE( 761)											g26 = (( (Float)(this112) ) / ( (Float)(255) ));
            										}
HXDLIN( 761)										Float b210;
HXDLIN( 761)										int this113 = (col3 & 255);
HXDLIN( 761)										if ((this113 == 0)) {
HXLINE( 761)											b210 = ((Float)0.);
            										}
            										else {
HXLINE( 761)											b210 = (( (Float)(this113) ) / ( (Float)(255) ));
            										}
HXDLIN( 761)										Float a36 = (a111 * (( (Float)(1) ) - a27));
HXDLIN( 761)										int r17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r16 * a36) + (r26 * a27))));
HXDLIN( 761)										int g17 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g16 * a36) + (g26 * a27))));
HXDLIN( 761)										int b32 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b112 * a36) + (b210 * a27))));
HXDLIN( 761)										int a28 = ::Std_obj::_hx_int((( (Float)(255) ) * (a36 + a27)));
HXDLIN( 761)										int blended6 = ((((a28 << 24) | (r17 << 16)) | (g17 << 8)) | b32);
HXDLIN( 761)										{
HXLINE( 761)											int _hx_tmp26;
HXDLIN( 761)											if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 761)												_hx_tmp26 = ((((((blended6 >> 24) & 255) << 24) | ((blended6 & 255) << 16)) | (((blended6 >> 8) & 255) << 8)) | ((blended6 >> 16) & 255));
            											}
            											else {
HXLINE( 761)												_hx_tmp26 = blended6;
            											}
HXDLIN( 761)											::iterMagic::Iimg_obj::set(undoImage9->image,location6,_hx_tmp26);
            										}
            									}
            									else {
HXLINE( 761)										::Dynamic this114 = undoImage9->image;
HXDLIN( 761)										int index14;
HXDLIN( 761)										if (undoImage9->useVirtualPos) {
HXLINE( 761)											index14 = ::Std_obj::_hx_int(((((( (Float)(y10) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x10) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 761)											index14 = ::Std_obj::_hx_int(( (Float)(((y10 * undoImage9->width) + x10)) ));
            										}
HXDLIN( 761)										int _hx_tmp27;
HXDLIN( 761)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 761)											_hx_tmp27 = ((((((c11 >> 24) & 255) << 24) | ((c11 & 255) << 16)) | (((c11 >> 8) & 255) << 8)) | ((c11 >> 16) & 255));
            										}
            										else {
HXLINE( 761)											_hx_tmp27 = c11;
            										}
HXDLIN( 761)										::iterMagic::Iimg_obj::set(this114,index14,_hx_tmp27);
            									}
            								}
            								else {
HXLINE( 761)									if (forceClear3) {
HXLINE( 761)										::Dynamic this115 = undoImage9->image;
HXDLIN( 761)										int x11 = (dx5 - rectLeft3);
HXDLIN( 761)										int y11 = (dy5 - rectTop3);
HXDLIN( 761)										int index15;
HXDLIN( 761)										if (undoImage9->useVirtualPos) {
HXLINE( 761)											index15 = ::Std_obj::_hx_int(((((( (Float)(y11) ) - undoImage9->virtualY) * ( (Float)(undoImage9->width) )) + x11) - undoImage9->virtualX));
            										}
            										else {
HXLINE( 761)											index15 = ::Std_obj::_hx_int(( (Float)(((y11 * undoImage9->width) + x11)) ));
            										}
HXDLIN( 761)										::iterMagic::Iimg_obj::set(this115,index15,0);
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 761)		{
HXLINE( 761)			int _g_min6 = xIter33->start;
HXDLIN( 761)			int _g_max6 = xIter33->max;
HXDLIN( 761)			while((_g_min6 < _g_max6)){
HXLINE( 761)				_g_min6 = (_g_min6 + 1);
HXDLIN( 761)				int px4 = (_g_min6 - 1);
HXDLIN( 761)				Float pcx3 = (( (Float)(px4) ) - dx3);
HXDLIN( 761)				{
HXLINE( 761)					int _g_min7 = yIter33->start;
HXDLIN( 761)					int _g_max7 = yIter33->max;
HXDLIN( 761)					while((_g_min7 < _g_max7)){
HXLINE( 761)						_g_min7 = (_g_min7 + 1);
HXDLIN( 761)						int py4 = (_g_min7 - 1);
HXDLIN( 761)						Float pcy3 = (( (Float)(py4) ) - dy3);
HXDLIN( 761)						Float dot313 = ((pcx3 * bcx3) + (pcy3 * bcy3));
HXDLIN( 761)						Float dot323 = ((pcx3 * acx3) + (pcy3 * acy3));
HXDLIN( 761)						Float ratioA3 = (((dot223 * dot313) - (dot123 * dot323)) * denom13);
HXDLIN( 761)						Float ratioB3 = (((dot113 * dot323) - (dot123 * dot313)) * denom13);
HXDLIN( 761)						Float ratioC3 = ((((Float)1.0) - ratioB3) - ratioA3);
HXDLIN( 761)						bool _hx_tmp28;
HXDLIN( 761)						bool _hx_tmp29;
HXDLIN( 761)						if ((ratioA3 >= 0)) {
HXLINE( 761)							_hx_tmp29 = (ratioB3 >= 0);
            						}
            						else {
HXLINE( 761)							_hx_tmp29 = false;
            						}
HXDLIN( 761)						if (_hx_tmp29) {
HXLINE( 761)							_hx_tmp28 = (ratioC3 >= 0);
            						}
            						else {
HXLINE( 761)							_hx_tmp28 = false;
            						}
HXDLIN( 761)						if (_hx_tmp28) {
HXLINE( 761)							int i36 = ::Std_obj::_hx_int((((( (Float)(aA3) ) * ratioA3) + (( (Float)(aB3) ) * ratioB3)) + (( (Float)(aC3) ) * ratioC3)));
HXDLIN( 761)							if ((i36 > 255)) {
HXLINE(  24)								i36 = 255;
            							}
HXLINE( 761)							if ((i36 < 0)) {
HXLINE(  25)								i36 = 0;
            							}
HXLINE( 761)							int a29 = i36;
HXDLIN( 761)							int i37 = ::Std_obj::_hx_int((((( (Float)(rA3) ) * ratioA3) + (( (Float)(rB3) ) * ratioB3)) + (( (Float)(rC3) ) * ratioC3)));
HXDLIN( 761)							if ((i37 > 255)) {
HXLINE(  24)								i37 = 255;
            							}
HXLINE( 761)							if ((i37 < 0)) {
HXLINE(  25)								i37 = 0;
            							}
HXLINE( 761)							int r18 = i37;
HXDLIN( 761)							int i38 = ::Std_obj::_hx_int((((( (Float)(gA3) ) * ratioA3) + (( (Float)(gB3) ) * ratioB3)) + (( (Float)(gC3) ) * ratioC3)));
HXDLIN( 761)							if ((i38 > 255)) {
HXLINE(  24)								i38 = 255;
            							}
HXLINE( 761)							if ((i38 < 0)) {
HXLINE(  25)								i38 = 0;
            							}
HXLINE( 761)							int g18 = i38;
HXDLIN( 761)							int i39 = ::Std_obj::_hx_int((((( (Float)(bA3) ) * ratioA3) + (( (Float)(bB3) ) * ratioB3)) + (( (Float)(bC3) ) * ratioC3)));
HXDLIN( 761)							if ((i39 > 255)) {
HXLINE(  24)								i39 = 255;
            							}
HXLINE( 761)							if ((i39 < 0)) {
HXLINE(  25)								i39 = 0;
            							}
HXLINE( 761)							int b33 = i39;
HXDLIN( 761)							{
HXLINE( 761)								int location7;
HXDLIN( 761)								if (pixelImage->useVirtualPos) {
HXLINE( 761)									location7 = ::Std_obj::_hx_int(((((( (Float)(py4) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + px4) - pixelImage->virtualX));
            								}
            								else {
HXLINE( 761)									location7 = ::Std_obj::_hx_int(( (Float)(((py4 * pixelImage->width) + px4)) ));
            								}
HXDLIN( 761)								bool _hx_tmp30;
HXDLIN( 761)								if (pixelImage->transparent) {
HXLINE( 761)									_hx_tmp30 = (a29 < 254);
            								}
            								else {
HXLINE( 761)									_hx_tmp30 = false;
            								}
HXDLIN( 761)								if (_hx_tmp30) {
HXLINE( 761)									int this116 = ::iterMagic::Iimg_obj::get(pixelImage->image,location7);
HXDLIN( 761)									int old3;
HXDLIN( 761)									if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 761)										old3 = ((((((this116 >> 24) & 255) << 24) | ((this116 & 255) << 16)) | (((this116 >> 8) & 255) << 8)) | ((this116 >> 16) & 255));
            									}
            									else {
HXLINE( 761)										old3 = this116;
            									}
HXDLIN( 761)									int rhs3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
HXDLIN( 761)									Float a112;
HXDLIN( 761)									int this117 = ((old3 >> 24) & 255);
HXDLIN( 761)									if ((this117 == 0)) {
HXLINE( 761)										a112 = ((Float)0.);
            									}
            									else {
HXLINE( 761)										a112 = (( (Float)(this117) ) / ( (Float)(255) ));
            									}
HXDLIN( 761)									Float r19;
HXDLIN( 761)									int this118 = ((old3 >> 16) & 255);
HXDLIN( 761)									if ((this118 == 0)) {
HXLINE( 761)										r19 = ((Float)0.);
            									}
            									else {
HXLINE( 761)										r19 = (( (Float)(this118) ) / ( (Float)(255) ));
            									}
HXDLIN( 761)									Float g19;
HXDLIN( 761)									int this119 = ((old3 >> 8) & 255);
HXDLIN( 761)									if ((this119 == 0)) {
HXLINE( 761)										g19 = ((Float)0.);
            									}
            									else {
HXLINE( 761)										g19 = (( (Float)(this119) ) / ( (Float)(255) ));
            									}
HXDLIN( 761)									Float b113;
HXDLIN( 761)									int this120 = (old3 & 255);
HXDLIN( 761)									if ((this120 == 0)) {
HXLINE( 761)										b113 = ((Float)0.);
            									}
            									else {
HXLINE( 761)										b113 = (( (Float)(this120) ) / ( (Float)(255) ));
            									}
HXDLIN( 761)									Float a210;
HXDLIN( 761)									int this121 = ((rhs3 >> 24) & 255);
HXDLIN( 761)									if ((this121 == 0)) {
HXLINE( 761)										a210 = ((Float)0.);
            									}
            									else {
HXLINE( 761)										a210 = (( (Float)(this121) ) / ( (Float)(255) ));
            									}
HXDLIN( 761)									Float r27;
HXDLIN( 761)									int this122 = ((rhs3 >> 16) & 255);
HXDLIN( 761)									if ((this122 == 0)) {
HXLINE( 761)										r27 = ((Float)0.);
            									}
            									else {
HXLINE( 761)										r27 = (( (Float)(this122) ) / ( (Float)(255) ));
            									}
HXDLIN( 761)									Float g27;
HXDLIN( 761)									int this123 = ((rhs3 >> 8) & 255);
HXDLIN( 761)									if ((this123 == 0)) {
HXLINE( 761)										g27 = ((Float)0.);
            									}
            									else {
HXLINE( 761)										g27 = (( (Float)(this123) ) / ( (Float)(255) ));
            									}
HXDLIN( 761)									Float b211;
HXDLIN( 761)									int this124 = (rhs3 & 255);
HXDLIN( 761)									if ((this124 == 0)) {
HXLINE( 761)										b211 = ((Float)0.);
            									}
            									else {
HXLINE( 761)										b211 = (( (Float)(this124) ) / ( (Float)(255) ));
            									}
HXDLIN( 761)									Float a37 = (a112 * (( (Float)(1) ) - a210));
HXDLIN( 761)									int r20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r19 * a37) + (r27 * a210))));
HXDLIN( 761)									int g20 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g19 * a37) + (g27 * a210))));
HXDLIN( 761)									int b34 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b113 * a37) + (b211 * a210))));
HXDLIN( 761)									int a30 = ::Std_obj::_hx_int((( (Float)(255) ) * (a37 + a210)));
HXDLIN( 761)									int blended7 = ((((a30 << 24) | (r20 << 16)) | (g20 << 8)) | b34);
HXDLIN( 761)									{
HXLINE( 761)										int _hx_tmp31;
HXDLIN( 761)										if (::pi_xy::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 761)											_hx_tmp31 = ((((((blended7 >> 24) & 255) << 24) | ((blended7 & 255) << 16)) | (((blended7 >> 8) & 255) << 8)) | ((blended7 >> 16) & 255));
            										}
            										else {
HXLINE( 761)											_hx_tmp31 = blended7;
            										}
HXDLIN( 761)										::iterMagic::Iimg_obj::set(pixelImage->image,location7,_hx_tmp31);
            									}
            								}
            								else {
HXLINE( 761)									int value3;
HXDLIN( 761)									if (pixelImage->isLittle) {
HXLINE( 761)										value3 = ((((a29 << 24) | (b33 << 16)) | (g18 << 8)) | r18);
            									}
            									else {
HXLINE( 761)										value3 = ((((a29 << 24) | (r18 << 16)) | (g18 << 8)) | b33);
            									}
HXDLIN( 761)									::iterMagic::Iimg_obj::set(pixelImage->image,location7,value3);
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 761)		 ::pi_xy::algo::HitTri hitTriBottom;
HXDLIN( 761)		if ((hasHit == false)) {
HXLINE( 761)			 ::pi_xy::algo::HitTri v11 =  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,px,py,ax1,ay1,dx3,dy3,true);
HXDLIN( 761)			if (hasUndo3) {
HXLINE( 761)				v11->undoImage = undoImage9;
HXDLIN( 761)				v11->undoX = xIter33->start;
HXDLIN( 761)				v11->undoY = yIter33->start;
            			}
HXDLIN( 761)			hitTriBottom = v11;
            		}
            		else {
HXLINE( 761)			hitTriBottom = null();
            		}
HXLINE( 763)		if (hasHit) {
HXLINE( 764)			 ::pi_xy::algo::HitTriArray hitArr =  ::pi_xy::algo::HitTriArray_obj::__alloc( HX_CTX ,::Array_obj< ::Dynamic>::__new(2)->init(0,hitTriTop)->init(1,hitTriBottom));
HXLINE( 765)			if (::hx::IsNotNull( hitQuad )) {
HXLINE( 766)				hitArr->triArr->push(hitQuad->triABD);
            			}
HXLINE( 767)			hitArr->triArr->push(hitQuad->triBCD);
HXLINE( 768)			return hitArr;
            		}
            		else {
HXLINE( 770)			return null();
            		}
HXLINE( 763)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC11(ArrowPixel_Fields__obj,gradThickLineFixedArrowBoth,return )


ArrowPixel_Fields__obj::ArrowPixel_Fields__obj()
{
}

bool ArrowPixel_Fields__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"fillLineArrow") ) { outValue = fillLineArrow_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"fillSoftLineArrow") ) { outValue = fillSoftLineArrow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillLineArrowBoth") ) { outValue = fillLineArrowBoth_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"gradThickLineArrow") ) { outValue = gradThickLineArrow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillLineFixedArrow") ) { outValue = fillLineFixedArrow_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"fillSoftLineArrowBoth") ) { outValue = fillSoftLineArrowBoth_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"gradThickLineArrowBoth") ) { outValue = gradThickLineArrowBoth_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillSoftLineFixedArrow") ) { outValue = fillSoftLineFixedArrow_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fillLineFixedArrowBoth") ) { outValue = fillLineFixedArrowBoth_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"gradThickLineFixedArrow") ) { outValue = gradThickLineFixedArrow_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"fillSoftLineFixedArrowBoth") ) { outValue = fillSoftLineFixedArrowBoth_dyn(); return true; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"gradThickLineFixedArrowBoth") ) { outValue = gradThickLineFixedArrowBoth_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ArrowPixel_Fields__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ArrowPixel_Fields__obj_sStaticStorageInfo = 0;
#endif

::hx::Class ArrowPixel_Fields__obj::__mClass;

static ::String ArrowPixel_Fields__obj_sStaticFields[] = {
	HX_("fillLineArrow",32,26,d3,4d),
	HX_("fillSoftLineArrow",68,be,50,83),
	HX_("gradThickLineArrow",86,db,69,d4),
	HX_("fillLineArrowBoth",d3,db,5b,63),
	HX_("fillSoftLineArrowBoth",09,c7,28,9b),
	HX_("gradThickLineArrowBoth",27,cb,99,d1),
	HX_("fillLineFixedArrow",ac,e2,1f,71),
	HX_("fillSoftLineFixedArrow",b6,c6,a0,0c),
	HX_("gradThickLineFixedArrow",d8,5c,13,79),
	HX_("fillLineFixedArrowBoth",4d,5d,99,b0),
	HX_("fillSoftLineFixedArrowBoth",57,0e,5e,2a),
	HX_("gradThickLineFixedArrowBoth",79,5d,73,66),
	::String(null())
};

void ArrowPixel_Fields__obj::__register()
{
	ArrowPixel_Fields__obj _hx_dummy;
	ArrowPixel_Fields__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo._ArrowPixel.ArrowPixel_Fields_",4a,11,04,b2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ArrowPixel_Fields__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ArrowPixel_Fields__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ArrowPixel_Fields__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArrowPixel_Fields__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArrowPixel_Fields__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
} // end namespace _ArrowPixel
