// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_utils_UInt8Array
#define INCLUDED_nme_utils_UInt8Array

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_utils_ArrayBufferView
#include <nme/utils/ArrayBufferView.h>
#endif
HX_DECLARE_CLASS2(haxe,io,Bytes)
HX_DECLARE_CLASS2(nme,utils,ArrayBufferView)
HX_DECLARE_CLASS2(nme,utils,IMemoryRange)
HX_DECLARE_CLASS2(nme,utils,UInt8Array)

namespace nme{
namespace utils{


class HXCPP_CLASS_ATTRIBUTES UInt8Array_obj : public  ::nme::utils::ArrayBufferView_obj
{
	public:
		typedef  ::nme::utils::ArrayBufferView_obj super;
		typedef UInt8Array_obj OBJ_;
		UInt8Array_obj();

	public:
		enum { _hx_ClassId = 0x198f0caa };

		void __construct( ::Dynamic inBufferOrArray,::hx::Null< int >  __o_inStart, ::Dynamic inElements);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.utils.UInt8Array")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.utils.UInt8Array"); }
		static ::hx::ObjectPtr< UInt8Array_obj > __new( ::Dynamic inBufferOrArray,::hx::Null< int >  __o_inStart, ::Dynamic inElements);
		static ::hx::ObjectPtr< UInt8Array_obj > __alloc(::hx::Ctx *_hx_ctx, ::Dynamic inBufferOrArray,::hx::Null< int >  __o_inStart, ::Dynamic inElements);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~UInt8Array_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("UInt8Array",5b,a9,b0,87); }

		static void __boot();
		typedef int __array_access;
		static int SBYTES_PER_ELEMENT;
		static  ::nme::utils::UInt8Array fromBytes( ::haxe::io::Bytes bytes,::hx::Null< int >  byteOffset, ::Dynamic len);
		static ::Dynamic fromBytes_dyn();

		int BYTES_PER_ELEMENT;
		int length;
		 ::nme::utils::UInt8Array subarray(::hx::Null< int >  start, ::Dynamic end);
		::Dynamic subarray_dyn();

		virtual int __get(int index);
		::Dynamic __get_dyn();

		virtual int __set(int index,int v);
		::Dynamic __set_dyn();

};

} // end namespace nme
} // end namespace utils

#endif /* INCLUDED_nme_utils_UInt8Array */ 
