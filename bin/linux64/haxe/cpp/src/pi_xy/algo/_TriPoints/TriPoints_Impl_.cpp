// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_pi_xy_algo_HitTri
#include <pi_xy/algo/HitTri.h>
#endif
#ifndef INCLUDED_pi_xy_algo_IhitObj
#include <pi_xy/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pi_xy_algo_TriPoints_
#include <pi_xy/algo/TriPoints_.h>
#endif
#ifndef INCLUDED_pi_xy_algo__TriPoints_TriPoints_Impl_
#include <pi_xy/algo/_TriPoints/TriPoints_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_1e30779adfa6456e_40__new,"pi_xy.algo._TriPoints.TriPoints_Impl_","_new",0x0464a10c,"pi_xy.algo._TriPoints.TriPoints_Impl_._new","pi_xy/algo/TriPoints.hx",40,0xc7fc0864)
HX_LOCAL_STACK_FRAME(_hx_pos_1e30779adfa6456e_45_rotate,"pi_xy.algo._TriPoints.TriPoints_Impl_","rotate",0x95a052c6,"pi_xy.algo._TriPoints.TriPoints_Impl_.rotate","pi_xy/algo/TriPoints.hx",45,0xc7fc0864)
HX_LOCAL_STACK_FRAME(_hx_pos_1e30779adfa6456e_72_getHit,"pi_xy.algo._TriPoints.TriPoints_Impl_","getHit",0x6d9e8bc8,"pi_xy.algo._TriPoints.TriPoints_Impl_.getHit","pi_xy/algo/TriPoints.hx",72,0xc7fc0864)
namespace pi_xy{
namespace algo{
namespace _TriPoints{

void TriPoints_Impl__obj::__construct() { }

Dynamic TriPoints_Impl__obj::__CreateEmpty() { return new TriPoints_Impl__obj; }

void *TriPoints_Impl__obj::_hx_vtable = 0;

Dynamic TriPoints_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TriPoints_Impl__obj > _hx_result = new TriPoints_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool TriPoints_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1f8811ad;
}

 ::pi_xy::algo::TriPoints_ TriPoints_Impl__obj::_new( ::pi_xy::algo::TriPoints_ tp){
            	HX_STACKFRAME(&_hx_pos_1e30779adfa6456e_40__new)
HXDLIN(  40)		return tp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(TriPoints_Impl__obj,_new,return )

void TriPoints_Impl__obj::rotate( ::pi_xy::algo::TriPoints_ this1,Float theta,Float centreX,Float centreY){
            	HX_STACKFRAME(&_hx_pos_1e30779adfa6456e_45_rotate)
HXLINE(  46)		Float sin = ::Math_obj::sin(theta);
HXLINE(  47)		Float cos = ::Math_obj::cos(theta);
HXLINE(  49)		 ::pi_xy::algo::TriPoints_ this2 = this1;
HXDLIN(  49)		this2->ax = (this2->ax - centreX);
HXLINE(  50)		 ::pi_xy::algo::TriPoints_ this3 = this1;
HXDLIN(  50)		this3->ay = (this3->ay - centreY);
HXLINE(  51)		 ::pi_xy::algo::TriPoints_ this4 = this1;
HXDLIN(  51)		this4->bx = (this4->bx - centreX);
HXLINE(  52)		 ::pi_xy::algo::TriPoints_ this5 = this1;
HXDLIN(  52)		this5->by = (this5->by - centreY);
HXLINE(  53)		 ::pi_xy::algo::TriPoints_ this6 = this1;
HXDLIN(  53)		this6->cx = (this6->cx - centreX);
HXLINE(  54)		 ::pi_xy::algo::TriPoints_ this7 = this1;
HXDLIN(  54)		this7->cy = (this7->cy - centreY);
HXLINE(  56)		Float temp = ((Float)0.);
HXLINE(  57)		temp = (centreX + ((this1->ax * cos) - (this1->ay * sin)));
HXLINE(  58)		this1->ay = (centreY + ((this1->ay * cos) + (this1->ax * sin)));
HXLINE(  59)		this1->ax = temp;
HXLINE(  61)		temp = (centreX + ((this1->bx * cos) - (this1->by * sin)));
HXLINE(  62)		this1->by = (centreY + ((this1->by * cos) + (this1->bx * sin)));
HXLINE(  63)		this1->bx = temp;
HXLINE(  65)		temp = (centreX + ((this1->cx * cos) - (this1->cy * sin)));
HXLINE(  66)		this1->cy = (centreY + ((this1->cy * cos) + (this1->cx * sin)));
HXLINE(  67)		this1->cx = temp;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(TriPoints_Impl__obj,rotate,(void))

 ::pi_xy::algo::HitTri TriPoints_Impl__obj::getHit( ::pi_xy::algo::TriPoints_ this1,::hx::Null< bool >  __o_preCalculated){
            		bool preCalculated = __o_preCalculated.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_1e30779adfa6456e_72_getHit)
HXDLIN(  72)		return  ::pi_xy::algo::HitTri_obj::__alloc( HX_CTX ,this1->ax,this1->ay,this1->bx,this1->by,this1->cx,this1->cy,preCalculated);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(TriPoints_Impl__obj,getHit,return )


TriPoints_Impl__obj::TriPoints_Impl__obj()
{
}

bool TriPoints_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"rotate") ) { outValue = rotate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getHit") ) { outValue = getHit_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *TriPoints_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *TriPoints_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class TriPoints_Impl__obj::__mClass;

static ::String TriPoints_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("rotate",5b,46,20,cb),
	HX_("getHit",5d,7f,1e,a3),
	::String(null())
};

void TriPoints_Impl__obj::__register()
{
	TriPoints_Impl__obj _hx_dummy;
	TriPoints_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pi_xy.algo._TriPoints.TriPoints_Impl_",a3,74,30,bb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &TriPoints_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(TriPoints_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< TriPoints_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TriPoints_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TriPoints_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pi_xy
} // end namespace algo
} // end namespace _TriPoints
