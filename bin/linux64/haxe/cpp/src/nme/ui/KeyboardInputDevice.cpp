// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_nme_Lib
#include <nme/Lib.h>
#endif
#ifndef INCLUDED_nme_app_IAppEventHandler
#include <nme/app/IAppEventHandler.h>
#endif
#ifndef INCLUDED_nme_app_IPollClient
#include <nme/app/IPollClient.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObjectContainer
#include <nme/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_display_MovieClip
#include <nme/display/MovieClip.h>
#endif
#ifndef INCLUDED_nme_display_Sprite
#include <nme/display/Sprite.h>
#endif
#ifndef INCLUDED_nme_display_Stage
#include <nme/display/Stage.h>
#endif
#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_KeyboardEvent
#include <nme/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_nme_ui_GameInputControl
#include <nme/ui/GameInputControl.h>
#endif
#ifndef INCLUDED_nme_ui_GameInputDevice
#include <nme/ui/GameInputDevice.h>
#endif
#ifndef INCLUDED_nme_ui_KeyboardInputDevice
#include <nme/ui/KeyboardInputDevice.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_307f85423a121529_11_new,"nme.ui.KeyboardInputDevice","new",0xe8f7a039,"nme.ui.KeyboardInputDevice.new","nme/ui/KeyboardInputDevice.hx",11,0x3af437f7)
HX_LOCAL_STACK_FRAME(_hx_pos_307f85423a121529_26_onKey,"nme.ui.KeyboardInputDevice","onKey",0x678355d9,"nme.ui.KeyboardInputDevice.onKey","nme/ui/KeyboardInputDevice.hx",26,0x3af437f7)
HX_LOCAL_STACK_FRAME(_hx_pos_307f85423a121529_38_keyDown,"nme.ui.KeyboardInputDevice","keyDown",0xf67299fa,"nme.ui.KeyboardInputDevice.keyDown","nme/ui/KeyboardInputDevice.hx",38,0x3af437f7)
HX_LOCAL_STACK_FRAME(_hx_pos_307f85423a121529_46_keyUp,"nme.ui.KeyboardInputDevice","keyUp",0x1418f1f3,"nme.ui.KeyboardInputDevice.keyUp","nme/ui/KeyboardInputDevice.hx",46,0x3af437f7)
HX_LOCAL_STACK_FRAME(_hx_pos_307f85423a121529_7_boot,"nme.ui.KeyboardInputDevice","boot",0xe7cd9239,"nme.ui.KeyboardInputDevice.boot","nme/ui/KeyboardInputDevice.hx",7,0x3af437f7)
namespace nme{
namespace ui{

void KeyboardInputDevice_obj::__construct(::String id,::String name, ::haxe::ds::IntMap inButtonKeys){
            	HX_STACKFRAME(&_hx_pos_307f85423a121529_11_new)
HXLINE(  12)		super::__construct(id,name);
HXLINE(  13)		if (::hx::IsNull( ::nme::ui::KeyboardInputDevice_obj::allDevices )) {
HXLINE(  15)			::nme::ui::KeyboardInputDevice_obj::allDevices = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  16)			::nme::Lib_obj::get_current()->get_stage()->addEventListener(HX_("keyDown",a1,69,47,9c),::nme::ui::KeyboardInputDevice_obj::keyDown_dyn(),null(),null(),null());
HXLINE(  17)			::nme::Lib_obj::get_current()->get_stage()->addEventListener(HX_("keyUp",da,b9,fe,de),::nme::ui::KeyboardInputDevice_obj::keyUp_dyn(),null(),null(),null());
            		}
HXLINE(  19)		this->buttonKeys = ::Array_obj< int >::__new(0);
HXLINE(  20)		{
HXLINE(  20)			 ::Dynamic bid = inButtonKeys->keys();
HXDLIN(  20)			while(( (bool)(bid->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  20)				int bid1 = ( (int)(bid->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  21)				this->buttonKeys[bid1] = ( (int)(inButtonKeys->get(bid1)) );
            			}
            		}
HXLINE(  22)		::nme::ui::KeyboardInputDevice_obj::allDevices->push(::hx::ObjectPtr<OBJ_>(this));
            	}

Dynamic KeyboardInputDevice_obj::__CreateEmpty() { return new KeyboardInputDevice_obj; }

void *KeyboardInputDevice_obj::_hx_vtable = 0;

Dynamic KeyboardInputDevice_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyboardInputDevice_obj > _hx_result = new KeyboardInputDevice_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool KeyboardInputDevice_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x02280a18) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x02280a18;
	} else {
		return inClassId==(int)0x0e3f6083;
	}
}

void KeyboardInputDevice_obj::onKey(int code,bool isDown){
            	HX_STACKFRAME(&_hx_pos_307f85423a121529_26_onKey)
HXLINE(  27)		int bid = this->buttonKeys->indexOf(code,null());
HXLINE(  28)		if ((bid >= 0)) {
HXLINE(  30)			 ::nme::ui::GameInputControl but = this->getButtonAt(bid);
HXLINE(  31)			if (::hx::IsNotNull( but )) {
HXLINE(  32)				but->setButtonState(isDown);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(KeyboardInputDevice_obj,onKey,(void))

::Array< ::Dynamic> KeyboardInputDevice_obj::allDevices;

void KeyboardInputDevice_obj::keyDown( ::nme::events::KeyboardEvent ev){
            	HX_STACKFRAME(&_hx_pos_307f85423a121529_38_keyDown)
HXDLIN(  38)		if ((ev->keyCode > 0)) {
HXLINE(  39)			int _g = 0;
HXDLIN(  39)			::Array< ::Dynamic> _g1 = ::nme::ui::KeyboardInputDevice_obj::allDevices;
HXDLIN(  39)			while((_g < _g1->length)){
HXLINE(  39)				 ::nme::ui::KeyboardInputDevice device = _g1->__get(_g).StaticCast<  ::nme::ui::KeyboardInputDevice >();
HXDLIN(  39)				_g = (_g + 1);
HXLINE(  40)				if (device->enabled) {
HXLINE(  41)					device->onKey(ev->keyCode,true);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyboardInputDevice_obj,keyDown,(void))

void KeyboardInputDevice_obj::keyUp( ::nme::events::KeyboardEvent ev){
            	HX_STACKFRAME(&_hx_pos_307f85423a121529_46_keyUp)
HXDLIN(  46)		if ((ev->keyCode > 0)) {
HXLINE(  47)			int _g = 0;
HXDLIN(  47)			::Array< ::Dynamic> _g1 = ::nme::ui::KeyboardInputDevice_obj::allDevices;
HXDLIN(  47)			while((_g < _g1->length)){
HXLINE(  47)				 ::nme::ui::KeyboardInputDevice device = _g1->__get(_g).StaticCast<  ::nme::ui::KeyboardInputDevice >();
HXDLIN(  47)				_g = (_g + 1);
HXLINE(  48)				if (device->enabled) {
HXLINE(  49)					device->onKey(ev->keyCode,false);
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyboardInputDevice_obj,keyUp,(void))


::hx::ObjectPtr< KeyboardInputDevice_obj > KeyboardInputDevice_obj::__new(::String id,::String name, ::haxe::ds::IntMap inButtonKeys) {
	::hx::ObjectPtr< KeyboardInputDevice_obj > __this = new KeyboardInputDevice_obj();
	__this->__construct(id,name,inButtonKeys);
	return __this;
}

::hx::ObjectPtr< KeyboardInputDevice_obj > KeyboardInputDevice_obj::__alloc(::hx::Ctx *_hx_ctx,::String id,::String name, ::haxe::ds::IntMap inButtonKeys) {
	KeyboardInputDevice_obj *__this = (KeyboardInputDevice_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KeyboardInputDevice_obj), true, "nme.ui.KeyboardInputDevice"));
	*(void **)__this = KeyboardInputDevice_obj::_hx_vtable;
	__this->__construct(id,name,inButtonKeys);
	return __this;
}

KeyboardInputDevice_obj::KeyboardInputDevice_obj()
{
}

void KeyboardInputDevice_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KeyboardInputDevice);
	HX_MARK_MEMBER_NAME(buttonKeys,"buttonKeys");
	 ::nme::ui::GameInputDevice_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void KeyboardInputDevice_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(buttonKeys,"buttonKeys");
	 ::nme::ui::GameInputDevice_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val KeyboardInputDevice_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"onKey") ) { return ::hx::Val( onKey_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"buttonKeys") ) { return ::hx::Val( buttonKeys ); }
	}
	return super::__Field(inName,inCallProp);
}

bool KeyboardInputDevice_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"keyUp") ) { outValue = keyUp_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"keyDown") ) { outValue = keyDown_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"allDevices") ) { outValue = ( allDevices ); return true; }
	}
	return false;
}

::hx::Val KeyboardInputDevice_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"buttonKeys") ) { buttonKeys=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool KeyboardInputDevice_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"allDevices") ) { allDevices=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void KeyboardInputDevice_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("buttonKeys",06,51,fd,b0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo KeyboardInputDevice_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(KeyboardInputDevice_obj,buttonKeys),HX_("buttonKeys",06,51,fd,b0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo KeyboardInputDevice_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &KeyboardInputDevice_obj::allDevices,HX_("allDevices",fc,2b,12,a0)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String KeyboardInputDevice_obj_sMemberFields[] = {
	HX_("buttonKeys",06,51,fd,b0),
	HX_("onKey",c0,1d,69,32),
	::String(null()) };

static void KeyboardInputDevice_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KeyboardInputDevice_obj::allDevices,"allDevices");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KeyboardInputDevice_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KeyboardInputDevice_obj::allDevices,"allDevices");
};

#endif

::hx::Class KeyboardInputDevice_obj::__mClass;

static ::String KeyboardInputDevice_obj_sStaticFields[] = {
	HX_("allDevices",fc,2b,12,a0),
	HX_("keyDown",a1,69,47,9c),
	HX_("keyUp",da,b9,fe,de),
	::String(null())
};

void KeyboardInputDevice_obj::__register()
{
	KeyboardInputDevice_obj _hx_dummy;
	KeyboardInputDevice_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.ui.KeyboardInputDevice",c7,0f,4b,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &KeyboardInputDevice_obj::__GetStatic;
	__mClass->mSetStaticField = &KeyboardInputDevice_obj::__SetStatic;
	__mClass->mMarkFunc = KeyboardInputDevice_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(KeyboardInputDevice_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KeyboardInputDevice_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KeyboardInputDevice_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KeyboardInputDevice_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyboardInputDevice_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyboardInputDevice_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void KeyboardInputDevice_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_307f85423a121529_7_boot)
HXDLIN(   7)		allDevices = null();
            	}
}

} // end namespace nme
} // end namespace ui
