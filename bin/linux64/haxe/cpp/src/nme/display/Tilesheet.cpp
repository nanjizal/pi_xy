// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_cpp_Prime
#include <cpp/Prime.h>
#endif
#ifndef INCLUDED_nme_display_BitmapData
#include <nme/display/BitmapData.h>
#endif
#ifndef INCLUDED_nme_display_Graphics
#include <nme/display/Graphics.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_Tilesheet
#include <nme/display/Tilesheet.h>
#endif
#ifndef INCLUDED_nme_geom_Point
#include <nme/geom/Point.h>
#endif
#ifndef INCLUDED_nme_geom_Rectangle
#include <nme/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ba22e613d6026c5a_37_new,"nme.display.Tilesheet","new",0xae339baf,"nme.display.Tilesheet.new","nme/display/Tilesheet.hx",37,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_47_addTileRect,"nme.display.Tilesheet","addTileRect",0x62abdd02,"nme.display.Tilesheet.addTileRect","nme/display/Tilesheet.hx",47,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_55_getTileRect,"nme.display.Tilesheet","getTileRect",0x57436877,"nme.display.Tilesheet.getTileRect","nme/display/Tilesheet.hx",55,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_71_drawTiles,"nme.display.Tilesheet","drawTiles",0x11a9e370,"nme.display.Tilesheet.drawTiles","nme/display/Tilesheet.hx",71,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_116_getRect,"nme.display.Tilesheet","getRect",0x7bf31ba9,"nme.display.Tilesheet.getRect","nme/display/Tilesheet.hx",116,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_118_addRect,"nme.display.Tilesheet","addRect",0xe5adaeb4,"nme.display.Tilesheet.addRect","nme/display/Tilesheet.hx",118,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_10_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",10,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_11_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",11,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_12_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",12,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_13_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",13,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_14_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",14,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_15_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",15,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_16_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",16,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_17_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",17,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_18_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",18,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_19_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",19,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_20_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",20,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_21_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",21,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_24_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",24,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_25_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",25,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_ba22e613d6026c5a_26_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/display/Tilesheet.hx",26,0xc9b592a3)
HX_LOCAL_STACK_FRAME(_hx_pos_303d0ead659ac5ed_9_boot,"nme.display.Tilesheet","boot",0xb70d9e03,"nme.display.Tilesheet.boot","nme/PrimeLoader.hx",9,0xcf416155)
namespace nme{
namespace display{

void Tilesheet_obj::__construct( ::nme::display::BitmapData inImage,::Array< ::Dynamic> rects, ::nme::geom::Point inPoint){
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_37_new)
HXLINE(  38)		this->tileCount = 0;
HXLINE(  39)		this->nmeBitmap = inImage;
HXLINE(  40)		this->nmeHandle = ( ( ::Dynamic)(::nme::display::Tilesheet_obj::nme_tilesheet_create(::hx::DynamicPtr(inImage->nmeHandle))) );
HXLINE(  41)		if (::hx::IsNotNull( rects )) {
HXLINE(  42)			int _g = 0;
HXDLIN(  42)			while((_g < rects->length)){
HXLINE(  42)				 ::nme::geom::Rectangle rect = rects->__get(_g).StaticCast<  ::nme::geom::Rectangle >();
HXDLIN(  42)				_g = (_g + 1);
HXLINE(  43)				this->addTileRect(rect,inPoint);
            			}
            		}
            	}

Dynamic Tilesheet_obj::__CreateEmpty() { return new Tilesheet_obj; }

void *Tilesheet_obj::_hx_vtable = 0;

Dynamic Tilesheet_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Tilesheet_obj > _hx_result = new Tilesheet_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Tilesheet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x36a9e515;
}

int Tilesheet_obj::addTileRect( ::nme::geom::Rectangle rectangle, ::nme::geom::Point centerPoint){
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_47_addTileRect)
HXLINE(  48)		this->tileCount++;
HXLINE(  49)		return ::nme::display::Tilesheet_obj::nme_tilesheet_add_rect(::hx::DynamicPtr(this->nmeHandle),::hx::DynamicPtr(rectangle),::hx::DynamicPtr(centerPoint));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilesheet_obj,addTileRect,return )

 ::nme::geom::Rectangle Tilesheet_obj::getTileRect(int index, ::nme::geom::Rectangle result){
            	HX_GC_STACKFRAME(&_hx_pos_ba22e613d6026c5a_55_getTileRect)
HXLINE(  56)		bool _hx_tmp;
HXDLIN(  56)		if ((this->tileCount > index)) {
HXLINE(  56)			_hx_tmp = (index < 0);
            		}
            		else {
HXLINE(  56)			_hx_tmp = true;
            		}
HXDLIN(  56)		if (_hx_tmp) {
HXLINE(  58)			return null();
            		}
HXLINE(  61)		if (::hx::IsNull( result )) {
HXLINE(  63)			result =  ::nme::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
            		}
HXLINE(  65)		::nme::display::Tilesheet_obj::nme_tilesheet_get_rect(::hx::DynamicPtr(this->nmeHandle),index,::hx::DynamicPtr(result));
HXLINE(  66)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilesheet_obj,getTileRect,return )

void Tilesheet_obj::drawTiles( ::nme::display::Graphics graphics, ::Dynamic tileData,::hx::Null< bool >  __o_smooth,::hx::Null< int >  __o_flags,::hx::Null< int >  __o_count){
            		bool smooth = __o_smooth.Default(false);
            		int flags = __o_flags.Default(0);
            		int count = __o_count.Default(-1);
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_71_drawTiles)
HXDLIN(  71)		graphics->drawTiles(::hx::ObjectPtr<OBJ_>(this),tileData,smooth,flags,count);
            	}


HX_DEFINE_DYNAMIC_FUNC5(Tilesheet_obj,drawTiles,(void))

 ::nme::geom::Rectangle Tilesheet_obj::getRect(int index){
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_116_getRect)
HXDLIN( 116)		return this->getTileRect(index,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilesheet_obj,getRect,return )

int Tilesheet_obj::addRect( ::nme::geom::Rectangle rectangle){
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_118_addRect)
HXDLIN( 118)		return this->addTileRect(rectangle,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilesheet_obj,addRect,return )

int Tilesheet_obj::TILE_SCALE;

int Tilesheet_obj::TILE_ROTATION;

int Tilesheet_obj::TILE_RGB;

int Tilesheet_obj::TILE_ALPHA;

int Tilesheet_obj::TILE_TRANS_2x2;

int Tilesheet_obj::TILE_RECT;

int Tilesheet_obj::TILE_ORIGIN;

int Tilesheet_obj::TILE_NO_ID;

int Tilesheet_obj::TILE_MOUSE_ENABLE;

int Tilesheet_obj::TILE_FIXED_SIZE;

int Tilesheet_obj::TILE_BLEND_NORMAL;

int Tilesheet_obj::TILE_BLEND_ADD;

int Tilesheet_obj::TILE_BLEND_SCREEN;

int Tilesheet_obj::TILE_BLEND_MULTIPLY;

int Tilesheet_obj::TILE_BLEND_SUBTRACT;

::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > Tilesheet_obj::nme_tilesheet_create;

::cpp::Function< int  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > Tilesheet_obj::nme_tilesheet_add_rect;

::cpp::Function< void  ( ::hx::Object *,int, ::hx::Object *) > Tilesheet_obj::nme_tilesheet_get_rect;


::hx::ObjectPtr< Tilesheet_obj > Tilesheet_obj::__new( ::nme::display::BitmapData inImage,::Array< ::Dynamic> rects, ::nme::geom::Point inPoint) {
	::hx::ObjectPtr< Tilesheet_obj > __this = new Tilesheet_obj();
	__this->__construct(inImage,rects,inPoint);
	return __this;
}

::hx::ObjectPtr< Tilesheet_obj > Tilesheet_obj::__alloc(::hx::Ctx *_hx_ctx, ::nme::display::BitmapData inImage,::Array< ::Dynamic> rects, ::nme::geom::Point inPoint) {
	Tilesheet_obj *__this = (Tilesheet_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Tilesheet_obj), true, "nme.display.Tilesheet"));
	*(void **)__this = Tilesheet_obj::_hx_vtable;
	__this->__construct(inImage,rects,inPoint);
	return __this;
}

Tilesheet_obj::Tilesheet_obj()
{
}

void Tilesheet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tilesheet);
	HX_MARK_MEMBER_NAME(nmeBitmap,"nmeBitmap");
	HX_MARK_MEMBER_NAME(tileCount,"tileCount");
	HX_MARK_MEMBER_NAME(nmeHandle,"nmeHandle");
	HX_MARK_END_CLASS();
}

void Tilesheet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(nmeBitmap,"nmeBitmap");
	HX_VISIT_MEMBER_NAME(tileCount,"tileCount");
	HX_VISIT_MEMBER_NAME(nmeHandle,"nmeHandle");
}

::hx::Val Tilesheet_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"getRect") ) { return ::hx::Val( getRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"addRect") ) { return ::hx::Val( addRect_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"nmeBitmap") ) { return ::hx::Val( nmeBitmap ); }
		if (HX_FIELD_EQ(inName,"tileCount") ) { return ::hx::Val( tileCount ); }
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { return ::hx::Val( nmeHandle ); }
		if (HX_FIELD_EQ(inName,"drawTiles") ) { return ::hx::Val( drawTiles_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addTileRect") ) { return ::hx::Val( addTileRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileRect") ) { return ::hx::Val( getTileRect_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Tilesheet_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"nme_tilesheet_create") ) { outValue = ( nme_tilesheet_create ); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_tilesheet_add_rect") ) { outValue = ( nme_tilesheet_add_rect ); return true; }
		if (HX_FIELD_EQ(inName,"nme_tilesheet_get_rect") ) { outValue = ( nme_tilesheet_get_rect ); return true; }
	}
	return false;
}

::hx::Val Tilesheet_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"nmeBitmap") ) { nmeBitmap=inValue.Cast<  ::nme::display::BitmapData >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tileCount") ) { tileCount=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nmeHandle") ) { nmeHandle=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Tilesheet_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 20:
		if (HX_FIELD_EQ(inName,"nme_tilesheet_create") ) { nme_tilesheet_create=ioValue.Cast< ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > >(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nme_tilesheet_add_rect") ) { nme_tilesheet_add_rect=ioValue.Cast< ::cpp::Function< int  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_tilesheet_get_rect") ) { nme_tilesheet_get_rect=ioValue.Cast< ::cpp::Function< void  ( ::hx::Object *,int, ::hx::Object *) > >(); return true; }
	}
	return false;
}

void Tilesheet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("nmeBitmap",d5,13,ce,8b));
	outFields->push(HX_("tileCount",c1,a2,be,d5));
	outFields->push(HX_("nmeHandle",8e,87,bf,52));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Tilesheet_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::nme::display::BitmapData */ ,(int)offsetof(Tilesheet_obj,nmeBitmap),HX_("nmeBitmap",d5,13,ce,8b)},
	{::hx::fsInt,(int)offsetof(Tilesheet_obj,tileCount),HX_("tileCount",c1,a2,be,d5)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(Tilesheet_obj,nmeHandle),HX_("nmeHandle",8e,87,bf,52)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Tilesheet_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_SCALE,HX_("TILE_SCALE",59,77,2d,62)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_ROTATION,HX_("TILE_ROTATION",af,5b,7b,62)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_RGB,HX_("TILE_RGB",1c,7e,fb,fc)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_ALPHA,HX_("TILE_ALPHA",2d,50,f5,0a)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_TRANS_2x2,HX_("TILE_TRANS_2x2",e4,26,89,b2)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_RECT,HX_("TILE_RECT",15,57,11,5f)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_ORIGIN,HX_("TILE_ORIGIN",17,26,76,94)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_NO_ID,HX_("TILE_NO_ID",48,e1,31,89)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_MOUSE_ENABLE,HX_("TILE_MOUSE_ENABLE",ae,33,e6,a6)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_FIXED_SIZE,HX_("TILE_FIXED_SIZE",7d,cf,82,5a)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_NORMAL,HX_("TILE_BLEND_NORMAL",a6,02,62,2c)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_ADD,HX_("TILE_BLEND_ADD",22,74,bf,89)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_SCREEN,HX_("TILE_BLEND_SCREEN",eb,cb,55,43)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_MULTIPLY,HX_("TILE_BLEND_MULTIPLY",63,b4,29,f2)},
	{::hx::fsInt,(void *) &Tilesheet_obj::TILE_BLEND_SUBTRACT,HX_("TILE_BLEND_SUBTRACT",53,47,ae,4f)},
	{::hx::fsObject /* ::cpp::Function<  ::hx::Object *  ( ::hx::Object *) > */ ,(void *) &Tilesheet_obj::nme_tilesheet_create,HX_("nme_tilesheet_create",63,18,2c,d2)},
	{::hx::fsObject /* ::cpp::Function< int  ( ::hx::Object *, ::hx::Object *, ::hx::Object *) > */ ,(void *) &Tilesheet_obj::nme_tilesheet_add_rect,HX_("nme_tilesheet_add_rect",69,38,a1,80)},
	{::hx::fsObject /* ::cpp::Function< void  ( ::hx::Object *,int, ::hx::Object *) > */ ,(void *) &Tilesheet_obj::nme_tilesheet_get_rect,HX_("nme_tilesheet_get_rect",d4,21,1b,67)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Tilesheet_obj_sMemberFields[] = {
	HX_("nmeBitmap",d5,13,ce,8b),
	HX_("tileCount",c1,a2,be,d5),
	HX_("nmeHandle",8e,87,bf,52),
	HX_("addTileRect",b3,aa,09,b7),
	HX_("getTileRect",28,36,a1,ab),
	HX_("drawTiles",e1,32,40,d8),
	HX_("getRect",da,fc,29,1e),
	HX_("addRect",e5,8f,e4,87),
	::String(null()) };

static void Tilesheet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_SCALE,"TILE_SCALE");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_ROTATION,"TILE_ROTATION");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_RGB,"TILE_RGB");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_ALPHA,"TILE_ALPHA");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_TRANS_2x2,"TILE_TRANS_2x2");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_RECT,"TILE_RECT");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_ORIGIN,"TILE_ORIGIN");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_NO_ID,"TILE_NO_ID");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_MOUSE_ENABLE,"TILE_MOUSE_ENABLE");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_FIXED_SIZE,"TILE_FIXED_SIZE");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_NORMAL,"TILE_BLEND_NORMAL");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_ADD,"TILE_BLEND_ADD");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_SCREEN,"TILE_BLEND_SCREEN");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_MULTIPLY,"TILE_BLEND_MULTIPLY");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_SUBTRACT,"TILE_BLEND_SUBTRACT");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::nme_tilesheet_create,"nme_tilesheet_create");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::nme_tilesheet_add_rect,"nme_tilesheet_add_rect");
	HX_MARK_MEMBER_NAME(Tilesheet_obj::nme_tilesheet_get_rect,"nme_tilesheet_get_rect");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tilesheet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_SCALE,"TILE_SCALE");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_ROTATION,"TILE_ROTATION");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_RGB,"TILE_RGB");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_ALPHA,"TILE_ALPHA");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_TRANS_2x2,"TILE_TRANS_2x2");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_RECT,"TILE_RECT");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_ORIGIN,"TILE_ORIGIN");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_NO_ID,"TILE_NO_ID");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_MOUSE_ENABLE,"TILE_MOUSE_ENABLE");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_FIXED_SIZE,"TILE_FIXED_SIZE");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_NORMAL,"TILE_BLEND_NORMAL");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_ADD,"TILE_BLEND_ADD");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_SCREEN,"TILE_BLEND_SCREEN");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_MULTIPLY,"TILE_BLEND_MULTIPLY");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::TILE_BLEND_SUBTRACT,"TILE_BLEND_SUBTRACT");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::nme_tilesheet_create,"nme_tilesheet_create");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::nme_tilesheet_add_rect,"nme_tilesheet_add_rect");
	HX_VISIT_MEMBER_NAME(Tilesheet_obj::nme_tilesheet_get_rect,"nme_tilesheet_get_rect");
};

#endif

::hx::Class Tilesheet_obj::__mClass;

static ::String Tilesheet_obj_sStaticFields[] = {
	HX_("TILE_SCALE",59,77,2d,62),
	HX_("TILE_ROTATION",af,5b,7b,62),
	HX_("TILE_RGB",1c,7e,fb,fc),
	HX_("TILE_ALPHA",2d,50,f5,0a),
	HX_("TILE_TRANS_2x2",e4,26,89,b2),
	HX_("TILE_RECT",15,57,11,5f),
	HX_("TILE_ORIGIN",17,26,76,94),
	HX_("TILE_NO_ID",48,e1,31,89),
	HX_("TILE_MOUSE_ENABLE",ae,33,e6,a6),
	HX_("TILE_FIXED_SIZE",7d,cf,82,5a),
	HX_("TILE_BLEND_NORMAL",a6,02,62,2c),
	HX_("TILE_BLEND_ADD",22,74,bf,89),
	HX_("TILE_BLEND_SCREEN",eb,cb,55,43),
	HX_("TILE_BLEND_MULTIPLY",63,b4,29,f2),
	HX_("TILE_BLEND_SUBTRACT",53,47,ae,4f),
	HX_("nme_tilesheet_create",63,18,2c,d2),
	HX_("nme_tilesheet_add_rect",69,38,a1,80),
	HX_("nme_tilesheet_get_rect",d4,21,1b,67),
	::String(null())
};

void Tilesheet_obj::__register()
{
	Tilesheet_obj _hx_dummy;
	Tilesheet_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.display.Tilesheet",3d,98,da,12);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Tilesheet_obj::__GetStatic;
	__mClass->mSetStaticField = &Tilesheet_obj::__SetStatic;
	__mClass->mMarkFunc = Tilesheet_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Tilesheet_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Tilesheet_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Tilesheet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tilesheet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tilesheet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tilesheet_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Tilesheet_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_10_boot)
HXDLIN(  10)		TILE_SCALE = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_11_boot)
HXDLIN(  11)		TILE_ROTATION = 2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_12_boot)
HXDLIN(  12)		TILE_RGB = 4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_13_boot)
HXDLIN(  13)		TILE_ALPHA = 8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_14_boot)
HXDLIN(  14)		TILE_TRANS_2x2 = 16;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_15_boot)
HXDLIN(  15)		TILE_RECT = 32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_16_boot)
HXDLIN(  16)		TILE_ORIGIN = 64;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_17_boot)
HXDLIN(  17)		TILE_NO_ID = 128;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_18_boot)
HXDLIN(  18)		TILE_MOUSE_ENABLE = 256;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_19_boot)
HXDLIN(  19)		TILE_FIXED_SIZE = 512;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_20_boot)
HXDLIN(  20)		TILE_BLEND_NORMAL = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_21_boot)
HXDLIN(  21)		TILE_BLEND_ADD = 65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_24_boot)
HXDLIN(  24)		TILE_BLEND_SCREEN = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_25_boot)
HXDLIN(  25)		TILE_BLEND_MULTIPLY = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_ba22e613d6026c5a_26_boot)
HXDLIN(  26)		TILE_BLEND_SUBTRACT = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_303d0ead659ac5ed_9_boot)
HXDLIN(   9)		nme_tilesheet_create = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_tilesheet_create",63,18,2c,d2),HX_("oo",20,61,00,00),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_303d0ead659ac5ed_9_boot)
HXDLIN(   9)		nme_tilesheet_add_rect = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_tilesheet_add_rect",69,38,a1,80),HX_("oooi",3a,4a,b3,49),false);
            	}
{
            	HX_STACKFRAME(&_hx_pos_303d0ead659ac5ed_9_boot)
HXDLIN(   9)		nme_tilesheet_get_rect = ::cpp::Prime_obj::_loadPrime(HX_("nme",46,d7,53,00),HX_("nme_tilesheet_get_rect",d4,21,1b,67),HX_("oiov",c1,bc,ae,49),false);
            	}
}

} // end namespace nme
} // end namespace display
