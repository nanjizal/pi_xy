// Generated by Haxe 4.3.3
#ifndef INCLUDED_nme_events_HTTPStatusEvent
#define INCLUDED_nme_events_HTTPStatusEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_nme_events_Event
#include <nme/events/Event.h>
#endif
HX_DECLARE_CLASS2(nme,events,Event)
HX_DECLARE_CLASS2(nme,events,HTTPStatusEvent)
HX_DECLARE_CLASS2(nme,net,URLRequestHeader)

namespace nme{
namespace events{


class HXCPP_CLASS_ATTRIBUTES HTTPStatusEvent_obj : public  ::nme::events::Event_obj
{
	public:
		typedef  ::nme::events::Event_obj super;
		typedef HTTPStatusEvent_obj OBJ_;
		HTTPStatusEvent_obj();

	public:
		enum { _hx_ClassId = 0x0454c10d };

		void __construct(::String inType,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_status);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="nme.events.HTTPStatusEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"nme.events.HTTPStatusEvent"); }
		static ::hx::ObjectPtr< HTTPStatusEvent_obj > __new(::String inType,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_status);
		static ::hx::ObjectPtr< HTTPStatusEvent_obj > __alloc(::hx::Ctx *_hx_ctx,::String inType,::hx::Null< bool >  __o_bubbles,::hx::Null< bool >  __o_cancelable,::hx::Null< int >  __o_status);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~HTTPStatusEvent_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("HTTPStatusEvent",e0,4c,1b,fe); }

		static void __boot();
		static ::String HTTP_STATUS;
		int status;
		::Array< ::Dynamic> responseHeaders;
		 ::nme::events::Event clone();

		virtual ::String toString();

};

} // end namespace nme
} // end namespace events

#endif /* INCLUDED_nme_events_HTTPStatusEvent */ 
