// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_nme_Loader
#include <nme/Loader.h>
#endif
#ifndef INCLUDED_nme_display_DisplayObject
#include <nme/display/DisplayObject.h>
#endif
#ifndef INCLUDED_nme_display_IBitmapDrawable
#include <nme/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_nme_display_InteractiveObject
#include <nme/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_nme_events_EventDispatcher
#include <nme/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_nme_events_IEventDispatcher
#include <nme/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_17_new,"nme.display.InteractiveObject","new",0xfdae053f,"nme.display.InteractiveObject.new","nme/display/InteractiveObject.hx",17,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_25_nmeAsInteractiveObject,"nme.display.InteractiveObject","nmeAsInteractiveObject",0xda3d37ca,"nme.display.InteractiveObject.nmeAsInteractiveObject","nme/display/InteractiveObject.hx",25,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_30_requestSoftKeyboard,"nme.display.InteractiveObject","requestSoftKeyboard",0x3f10187f,"nme.display.InteractiveObject.requestSoftKeyboard","nme/display/InteractiveObject.hx",30,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_34_get_mouseEnabled,"nme.display.InteractiveObject","get_mouseEnabled",0x60c62d26,"nme.display.InteractiveObject.get_mouseEnabled","nme/display/InteractiveObject.hx",34,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_36_set_mouseEnabled,"nme.display.InteractiveObject","set_mouseEnabled",0xb7081a9a,"nme.display.InteractiveObject.set_mouseEnabled","nme/display/InteractiveObject.hx",36,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_43_set_moveForSoftKeyboard,"nme.display.InteractiveObject","set_moveForSoftKeyboard",0x94935a4b,"nme.display.InteractiveObject.set_moveForSoftKeyboard","nme/display/InteractiveObject.hx",43,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_50_get_moveForSoftKeyboard,"nme.display.InteractiveObject","get_moveForSoftKeyboard",0x9231f13f,"nme.display.InteractiveObject.get_moveForSoftKeyboard","nme/display/InteractiveObject.hx",50,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_54_set_needsSoftKeyboard,"nme.display.InteractiveObject","set_needsSoftKeyboard",0xe6b5f430,"nme.display.InteractiveObject.set_needsSoftKeyboard","nme/display/InteractiveObject.hx",54,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_61_get_needsSoftKeyboard,"nme.display.InteractiveObject","get_needsSoftKeyboard",0x92ad2624,"nme.display.InteractiveObject.get_needsSoftKeyboard","nme/display/InteractiveObject.hx",61,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_66_get_softKeyboard,"nme.display.InteractiveObject","get_softKeyboard",0xdf4967fb,"nme.display.InteractiveObject.get_softKeyboard","nme/display/InteractiveObject.hx",66,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_70_set_softKeyboard,"nme.display.InteractiveObject","set_softKeyboard",0x358b556f,"nme.display.InteractiveObject.set_softKeyboard","nme/display/InteractiveObject.hx",70,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_76_boot,"nme.display.InteractiveObject","boot",0xf2af9273,"nme.display.InteractiveObject.boot","nme/display/InteractiveObject.hx",76,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_77_boot,"nme.display.InteractiveObject","boot",0xf2af9273,"nme.display.InteractiveObject.boot","nme/display/InteractiveObject.hx",77,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_78_boot,"nme.display.InteractiveObject","boot",0xf2af9273,"nme.display.InteractiveObject.boot","nme/display/InteractiveObject.hx",78,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_79_boot,"nme.display.InteractiveObject","boot",0xf2af9273,"nme.display.InteractiveObject.boot","nme/display/InteractiveObject.hx",79,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_80_boot,"nme.display.InteractiveObject","boot",0xf2af9273,"nme.display.InteractiveObject.boot","nme/display/InteractiveObject.hx",80,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_81_boot,"nme.display.InteractiveObject","boot",0xf2af9273,"nme.display.InteractiveObject.boot","nme/display/InteractiveObject.hx",81,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_82_boot,"nme.display.InteractiveObject","boot",0xf2af9273,"nme.display.InteractiveObject.boot","nme/display/InteractiveObject.hx",82,0x2fbb5d13)
HX_LOCAL_STACK_FRAME(_hx_pos_64b2622b8fa02fd3_83_boot,"nme.display.InteractiveObject","boot",0xf2af9273,"nme.display.InteractiveObject.boot","nme/display/InteractiveObject.hx",83,0x2fbb5d13)
namespace nme{
namespace display{

void InteractiveObject_obj::__construct( ::Dynamic inHandle,::String inType){
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_17_new)
HXLINE(  18)		this->doubleClickEnabled = false;
HXLINE(  19)		this->nmeMouseEnabled = true;
HXLINE(  21)		super::__construct(inHandle,inType);
            	}

Dynamic InteractiveObject_obj::__CreateEmpty() { return new InteractiveObject_obj; }

void *InteractiveObject_obj::_hx_vtable = 0;

Dynamic InteractiveObject_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< InteractiveObject_obj > _hx_result = new InteractiveObject_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool InteractiveObject_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0ff07575) {
		if (inClassId<=(int)0x048b25c1) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x048b25c1;
		} else {
			return inClassId==(int)0x0ff07575;
		}
	} else {
		return inClassId==(int)0x169017a6;
	}
}

 ::nme::display::InteractiveObject InteractiveObject_obj::nmeAsInteractiveObject(){
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_25_nmeAsInteractiveObject)
HXDLIN(  25)		return ::hx::ObjectPtr<OBJ_>(this);
            	}


bool InteractiveObject_obj::requestSoftKeyboard(){
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_30_requestSoftKeyboard)
HXDLIN(  30)		return ( (bool)(::nme::display::InteractiveObject_obj::nme_display_object_request_soft_keyboard(this->nmeHandle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractiveObject_obj,requestSoftKeyboard,return )

bool InteractiveObject_obj::get_mouseEnabled(){
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_34_get_mouseEnabled)
HXDLIN(  34)		return this->nmeMouseEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractiveObject_obj,get_mouseEnabled,return )

bool InteractiveObject_obj::set_mouseEnabled(bool inVal){
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_36_set_mouseEnabled)
HXLINE(  37)		this->nmeMouseEnabled = inVal;
HXLINE(  38)		::nme::display::InteractiveObject_obj::nme_display_object_set_mouse_enabled(this->nmeHandle,inVal);
HXLINE(  39)		return this->nmeMouseEnabled;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveObject_obj,set_mouseEnabled,return )

bool InteractiveObject_obj::set_moveForSoftKeyboard(bool inVal){
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_43_set_moveForSoftKeyboard)
HXLINE(  44)		::nme::display::InteractiveObject_obj::nme_display_object_set_moves_for_soft_keyboard(this->nmeHandle,inVal);
HXLINE(  45)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveObject_obj,set_moveForSoftKeyboard,return )

bool InteractiveObject_obj::get_moveForSoftKeyboard(){
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_50_get_moveForSoftKeyboard)
HXDLIN(  50)		return ( (bool)(::nme::display::InteractiveObject_obj::nme_display_object_get_moves_for_soft_keyboard(this->nmeHandle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractiveObject_obj,get_moveForSoftKeyboard,return )

bool InteractiveObject_obj::set_needsSoftKeyboard(bool inVal){
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_54_set_needsSoftKeyboard)
HXLINE(  55)		::nme::display::InteractiveObject_obj::nme_display_object_set_needs_soft_keyboard(this->nmeHandle,inVal);
HXLINE(  56)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveObject_obj,set_needsSoftKeyboard,return )

bool InteractiveObject_obj::get_needsSoftKeyboard(){
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_61_get_needsSoftKeyboard)
HXDLIN(  61)		return ( (bool)(::nme::display::InteractiveObject_obj::nme_display_object_get_needs_soft_keyboard(this->nmeHandle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractiveObject_obj,get_needsSoftKeyboard,return )

int InteractiveObject_obj::get_softKeyboard(){
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_66_get_softKeyboard)
HXDLIN(  66)		return ( (int)(::nme::display::InteractiveObject_obj::nme_display_object_get_soft_keyboard(this->nmeHandle)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(InteractiveObject_obj,get_softKeyboard,return )

int InteractiveObject_obj::set_softKeyboard(int inVal){
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_70_set_softKeyboard)
HXLINE(  71)		::nme::display::InteractiveObject_obj::nme_display_object_set_soft_keyboard(this->nmeHandle,inVal);
HXLINE(  72)		return inVal;
            	}


HX_DEFINE_DYNAMIC_FUNC1(InteractiveObject_obj,set_softKeyboard,return )

 ::Dynamic InteractiveObject_obj::nme_display_object_set_mouse_enabled;

 ::Dynamic InteractiveObject_obj::nme_display_object_set_needs_soft_keyboard;

 ::Dynamic InteractiveObject_obj::nme_display_object_get_needs_soft_keyboard;

 ::Dynamic InteractiveObject_obj::nme_display_object_set_moves_for_soft_keyboard;

 ::Dynamic InteractiveObject_obj::nme_display_object_get_moves_for_soft_keyboard;

 ::Dynamic InteractiveObject_obj::nme_display_object_request_soft_keyboard;

 ::Dynamic InteractiveObject_obj::nme_display_object_set_soft_keyboard;

 ::Dynamic InteractiveObject_obj::nme_display_object_get_soft_keyboard;


::hx::ObjectPtr< InteractiveObject_obj > InteractiveObject_obj::__new( ::Dynamic inHandle,::String inType) {
	::hx::ObjectPtr< InteractiveObject_obj > __this = new InteractiveObject_obj();
	__this->__construct(inHandle,inType);
	return __this;
}

::hx::ObjectPtr< InteractiveObject_obj > InteractiveObject_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic inHandle,::String inType) {
	InteractiveObject_obj *__this = (InteractiveObject_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(InteractiveObject_obj), true, "nme.display.InteractiveObject"));
	*(void **)__this = InteractiveObject_obj::_hx_vtable;
	__this->__construct(inHandle,inType);
	return __this;
}

InteractiveObject_obj::InteractiveObject_obj()
{
}

::hx::Val InteractiveObject_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"mouseEnabled") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_mouseEnabled() ); }
		if (HX_FIELD_EQ(inName,"softKeyboard") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_softKeyboard() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nmeMouseEnabled") ) { return ::hx::Val( nmeMouseEnabled ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"get_mouseEnabled") ) { return ::hx::Val( get_mouseEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mouseEnabled") ) { return ::hx::Val( set_mouseEnabled_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_softKeyboard") ) { return ::hx::Val( get_softKeyboard_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_softKeyboard") ) { return ::hx::Val( set_softKeyboard_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"needsSoftKeyboard") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_needsSoftKeyboard() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"doubleClickEnabled") ) { return ::hx::Val( doubleClickEnabled ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"moveForSoftKeyboard") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( get_moveForSoftKeyboard() ); }
		if (HX_FIELD_EQ(inName,"requestSoftKeyboard") ) { return ::hx::Val( requestSoftKeyboard_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"set_needsSoftKeyboard") ) { return ::hx::Val( set_needsSoftKeyboard_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_needsSoftKeyboard") ) { return ::hx::Val( get_needsSoftKeyboard_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"nmeAsInteractiveObject") ) { return ::hx::Val( nmeAsInteractiveObject_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"set_moveForSoftKeyboard") ) { return ::hx::Val( set_moveForSoftKeyboard_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_moveForSoftKeyboard") ) { return ::hx::Val( get_moveForSoftKeyboard_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool InteractiveObject_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 36:
		if (HX_FIELD_EQ(inName,"nme_display_object_set_mouse_enabled") ) { outValue = ( nme_display_object_set_mouse_enabled ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_soft_keyboard") ) { outValue = ( nme_display_object_set_soft_keyboard ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_soft_keyboard") ) { outValue = ( nme_display_object_get_soft_keyboard ); return true; }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"nme_display_object_request_soft_keyboard") ) { outValue = ( nme_display_object_request_soft_keyboard ); return true; }
		break;
	case 42:
		if (HX_FIELD_EQ(inName,"nme_display_object_set_needs_soft_keyboard") ) { outValue = ( nme_display_object_set_needs_soft_keyboard ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_needs_soft_keyboard") ) { outValue = ( nme_display_object_get_needs_soft_keyboard ); return true; }
		break;
	case 46:
		if (HX_FIELD_EQ(inName,"nme_display_object_set_moves_for_soft_keyboard") ) { outValue = ( nme_display_object_set_moves_for_soft_keyboard ); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_moves_for_soft_keyboard") ) { outValue = ( nme_display_object_get_moves_for_soft_keyboard ); return true; }
	}
	return false;
}

::hx::Val InteractiveObject_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"mouseEnabled") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_mouseEnabled(inValue.Cast< bool >()) ); }
		if (HX_FIELD_EQ(inName,"softKeyboard") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_softKeyboard(inValue.Cast< int >()) ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"nmeMouseEnabled") ) { nmeMouseEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"needsSoftKeyboard") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_needsSoftKeyboard(inValue.Cast< bool >()) ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"doubleClickEnabled") ) { doubleClickEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"moveForSoftKeyboard") ) { if (inCallProp != ::hx::paccNever) return ::hx::Val( set_moveForSoftKeyboard(inValue.Cast< bool >()) ); }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool InteractiveObject_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 36:
		if (HX_FIELD_EQ(inName,"nme_display_object_set_mouse_enabled") ) { nme_display_object_set_mouse_enabled=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_set_soft_keyboard") ) { nme_display_object_set_soft_keyboard=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_soft_keyboard") ) { nme_display_object_get_soft_keyboard=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 40:
		if (HX_FIELD_EQ(inName,"nme_display_object_request_soft_keyboard") ) { nme_display_object_request_soft_keyboard=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 42:
		if (HX_FIELD_EQ(inName,"nme_display_object_set_needs_soft_keyboard") ) { nme_display_object_set_needs_soft_keyboard=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_needs_soft_keyboard") ) { nme_display_object_get_needs_soft_keyboard=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 46:
		if (HX_FIELD_EQ(inName,"nme_display_object_set_moves_for_soft_keyboard") ) { nme_display_object_set_moves_for_soft_keyboard=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"nme_display_object_get_moves_for_soft_keyboard") ) { nme_display_object_get_moves_for_soft_keyboard=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void InteractiveObject_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("doubleClickEnabled",ca,95,95,e6));
	outFields->push(HX_("mouseEnabled",dc,54,d6,5f));
	outFields->push(HX_("moveForSoftKeyboard",49,cc,61,ee));
	outFields->push(HX_("needsSoftKeyboard",ae,4a,a3,a9));
	outFields->push(HX_("softKeyboard",b1,8f,59,de));
	outFields->push(HX_("nmeMouseEnabled",42,49,c5,94));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo InteractiveObject_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(InteractiveObject_obj,doubleClickEnabled),HX_("doubleClickEnabled",ca,95,95,e6)},
	{::hx::fsBool,(int)offsetof(InteractiveObject_obj,nmeMouseEnabled),HX_("nmeMouseEnabled",42,49,c5,94)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo InteractiveObject_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &InteractiveObject_obj::nme_display_object_set_mouse_enabled,HX_("nme_display_object_set_mouse_enabled",00,8d,7f,35)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &InteractiveObject_obj::nme_display_object_set_needs_soft_keyboard,HX_("nme_display_object_set_needs_soft_keyboard",d3,0e,79,c7)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &InteractiveObject_obj::nme_display_object_get_needs_soft_keyboard,HX_("nme_display_object_get_needs_soft_keyboard",c7,a5,17,c5)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &InteractiveObject_obj::nme_display_object_set_moves_for_soft_keyboard,HX_("nme_display_object_set_moves_for_soft_keyboard",82,7d,fd,3d)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &InteractiveObject_obj::nme_display_object_get_moves_for_soft_keyboard,HX_("nme_display_object_get_moves_for_soft_keyboard",76,9e,64,fb)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &InteractiveObject_obj::nme_display_object_request_soft_keyboard,HX_("nme_display_object_request_soft_keyboard",22,81,10,ba)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &InteractiveObject_obj::nme_display_object_set_soft_keyboard,HX_("nme_display_object_set_soft_keyboard",b5,95,dc,c9)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &InteractiveObject_obj::nme_display_object_get_soft_keyboard,HX_("nme_display_object_get_soft_keyboard",a9,bd,6e,a6)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String InteractiveObject_obj_sMemberFields[] = {
	HX_("doubleClickEnabled",ca,95,95,e6),
	HX_("nmeMouseEnabled",42,49,c5,94),
	HX_("nmeAsInteractiveObject",49,85,3b,34),
	HX_("requestSoftKeyboard",a0,f5,a9,d4),
	HX_("get_mouseEnabled",65,41,75,64),
	HX_("set_mouseEnabled",d9,2e,b7,ba),
	HX_("set_moveForSoftKeyboard",ec,db,18,f9),
	HX_("get_moveForSoftKeyboard",e0,72,b7,f6),
	HX_("set_needsSoftKeyboard",91,1b,5a,7c),
	HX_("get_needsSoftKeyboard",85,4d,51,28),
	HX_("get_softKeyboard",3a,7c,f8,e2),
	HX_("set_softKeyboard",ae,69,3a,39),
	::String(null()) };

static void InteractiveObject_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InteractiveObject_obj::nme_display_object_set_mouse_enabled,"nme_display_object_set_mouse_enabled");
	HX_MARK_MEMBER_NAME(InteractiveObject_obj::nme_display_object_set_needs_soft_keyboard,"nme_display_object_set_needs_soft_keyboard");
	HX_MARK_MEMBER_NAME(InteractiveObject_obj::nme_display_object_get_needs_soft_keyboard,"nme_display_object_get_needs_soft_keyboard");
	HX_MARK_MEMBER_NAME(InteractiveObject_obj::nme_display_object_set_moves_for_soft_keyboard,"nme_display_object_set_moves_for_soft_keyboard");
	HX_MARK_MEMBER_NAME(InteractiveObject_obj::nme_display_object_get_moves_for_soft_keyboard,"nme_display_object_get_moves_for_soft_keyboard");
	HX_MARK_MEMBER_NAME(InteractiveObject_obj::nme_display_object_request_soft_keyboard,"nme_display_object_request_soft_keyboard");
	HX_MARK_MEMBER_NAME(InteractiveObject_obj::nme_display_object_set_soft_keyboard,"nme_display_object_set_soft_keyboard");
	HX_MARK_MEMBER_NAME(InteractiveObject_obj::nme_display_object_get_soft_keyboard,"nme_display_object_get_soft_keyboard");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InteractiveObject_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InteractiveObject_obj::nme_display_object_set_mouse_enabled,"nme_display_object_set_mouse_enabled");
	HX_VISIT_MEMBER_NAME(InteractiveObject_obj::nme_display_object_set_needs_soft_keyboard,"nme_display_object_set_needs_soft_keyboard");
	HX_VISIT_MEMBER_NAME(InteractiveObject_obj::nme_display_object_get_needs_soft_keyboard,"nme_display_object_get_needs_soft_keyboard");
	HX_VISIT_MEMBER_NAME(InteractiveObject_obj::nme_display_object_set_moves_for_soft_keyboard,"nme_display_object_set_moves_for_soft_keyboard");
	HX_VISIT_MEMBER_NAME(InteractiveObject_obj::nme_display_object_get_moves_for_soft_keyboard,"nme_display_object_get_moves_for_soft_keyboard");
	HX_VISIT_MEMBER_NAME(InteractiveObject_obj::nme_display_object_request_soft_keyboard,"nme_display_object_request_soft_keyboard");
	HX_VISIT_MEMBER_NAME(InteractiveObject_obj::nme_display_object_set_soft_keyboard,"nme_display_object_set_soft_keyboard");
	HX_VISIT_MEMBER_NAME(InteractiveObject_obj::nme_display_object_get_soft_keyboard,"nme_display_object_get_soft_keyboard");
};

#endif

::hx::Class InteractiveObject_obj::__mClass;

static ::String InteractiveObject_obj_sStaticFields[] = {
	HX_("nme_display_object_set_mouse_enabled",00,8d,7f,35),
	HX_("nme_display_object_set_needs_soft_keyboard",d3,0e,79,c7),
	HX_("nme_display_object_get_needs_soft_keyboard",c7,a5,17,c5),
	HX_("nme_display_object_set_moves_for_soft_keyboard",82,7d,fd,3d),
	HX_("nme_display_object_get_moves_for_soft_keyboard",76,9e,64,fb),
	HX_("nme_display_object_request_soft_keyboard",22,81,10,ba),
	HX_("nme_display_object_set_soft_keyboard",b5,95,dc,c9),
	HX_("nme_display_object_get_soft_keyboard",a9,bd,6e,a6),
	::String(null())
};

void InteractiveObject_obj::__register()
{
	InteractiveObject_obj _hx_dummy;
	InteractiveObject_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("nme.display.InteractiveObject",cd,f9,5c,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &InteractiveObject_obj::__GetStatic;
	__mClass->mSetStaticField = &InteractiveObject_obj::__SetStatic;
	__mClass->mMarkFunc = InteractiveObject_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(InteractiveObject_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(InteractiveObject_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< InteractiveObject_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InteractiveObject_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InteractiveObject_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InteractiveObject_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void InteractiveObject_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_76_boot)
HXDLIN(  76)		nme_display_object_set_mouse_enabled = ::nme::Loader_obj::load(HX_("nme_display_object_set_mouse_enabled",00,8d,7f,35),2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_77_boot)
HXDLIN(  77)		nme_display_object_set_needs_soft_keyboard = ::nme::Loader_obj::load(HX_("nme_display_object_set_needs_soft_keyboard",d3,0e,79,c7),2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_78_boot)
HXDLIN(  78)		nme_display_object_get_needs_soft_keyboard = ::nme::Loader_obj::load(HX_("nme_display_object_get_needs_soft_keyboard",c7,a5,17,c5),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_79_boot)
HXDLIN(  79)		nme_display_object_set_moves_for_soft_keyboard = ::nme::Loader_obj::load(HX_("nme_display_object_set_moves_for_soft_keyboard",82,7d,fd,3d),2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_80_boot)
HXDLIN(  80)		nme_display_object_get_moves_for_soft_keyboard = ::nme::Loader_obj::load(HX_("nme_display_object_get_moves_for_soft_keyboard",76,9e,64,fb),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_81_boot)
HXDLIN(  81)		nme_display_object_request_soft_keyboard = ::nme::Loader_obj::load(HX_("nme_display_object_request_soft_keyboard",22,81,10,ba),1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_82_boot)
HXDLIN(  82)		nme_display_object_set_soft_keyboard = ::nme::Loader_obj::load(HX_("nme_display_object_set_soft_keyboard",b5,95,dc,c9),2);
            	}
{
            	HX_STACKFRAME(&_hx_pos_64b2622b8fa02fd3_83_boot)
HXDLIN(  83)		nme_display_object_get_soft_keyboard = ::nme::Loader_obj::load(HX_("nme_display_object_get_soft_keyboard",a9,bd,6e,a6),1);
            	}
}

} // end namespace nme
} // end namespace display
