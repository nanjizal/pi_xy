// Generated by Haxe 4.3.0-rc.1+
(function ($global) { "use strict";
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
IntIterator.__name__ = true;
IntIterator.prototype = {
	hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
};
var Main = function() {
	this.canvasSetup = new htmlHelper_canvas_CanvasSetup();
	haxe_Log.trace("example on Canvas",{ fileName : "Main.hx", lineNumber : 12, className : "Main", methodName : "new"});
	var g = this.canvasSetup.surface;
	var this1 = new Uint32Array(12582912);
	var this2 = new Pixelimage_$(4096,3072,this1);
	var p = this2;
	var p1 = 650;
	var xx = p1;
	var q = 150;
	var maxX = 950 | 0;
	var maxY = 350 | 0;
	while(true) {
		var x = p1++;
		var this1 = -12320513;
		var c = this1;
		var value;
		if(Pixelimage_isLittleEndian) {
			var a = c >> 24 & 255;
			var r = c >> 16 & 255;
			var g1 = c >> 8 & 255;
			var b = c & 255;
			value = a << 24 | b << 16 | g1 << 8 | r;
		} else {
			value = c;
		}
		p.image[q * p.width + x | 0] = value;
		if(p1 > maxX) {
			p1 = xx;
			++q;
		}
		if(q > maxY) {
			break;
		}
	}
	var s0 = 90000;
	var sx = 300;
	var sy = -200;
	var t0 = -230000;
	var tx = -100;
	var ty = 400;
	var A = 100000;
	var x_min = 100;
	var x_max = 500;
	while(x_min < x_max) {
		var x = x_min++;
		var sxx = sx * x;
		var txx = tx * x;
		var y_min = 600;
		var y_max = 900;
		while(y_min < y_max) {
			var y = y_min++;
			var s = s0 + sxx + sy * y;
			var t = t0 + txx + ty * y;
			if(s <= 0 || t <= 0 ? false : s + t < A) {
				var this1 = -1048384;
				var c = this1;
				var value;
				if(Pixelimage_isLittleEndian) {
					var a = c >> 24 & 255;
					var r = c >> 16 & 255;
					var g1 = c >> 8 & 255;
					var b = c & 255;
					value = a << 24 | b << 16 | g1 << 8 | r;
				} else {
					value = c;
				}
				p.image[y * p.width + x | 0] = value;
			}
		}
	}
	var aA = 255;
	var rA = 0;
	var gA = 255;
	var bA = 0;
	var aB = 255;
	var rB = 255;
	var gB = 0;
	var bB = 0;
	var aC = 255;
	var rC = 0;
	var gC = 0;
	var bC = 255;
	var bcx = 200;
	var bcy = -200;
	var acx = -200;
	var acy = -400;
	var dot11 = bcx * bcx + bcy * bcy;
	var dot12 = bcx * acx + bcy * acy;
	var dot22 = acx * acx + acy * acy;
	var denom1 = 1 / (dot11 * dot22 - dot12 * dot12);
	var px_min = 100;
	var px_max = 500;
	while(px_min < px_max) {
		var px = px_min++;
		var pcx = px - 300;
		var py_min = 100;
		var py_max = 500;
		while(py_min < py_max) {
			var py = py_min++;
			var pcy = py - 500;
			var dot31 = pcx * bcx + pcy * bcy;
			var dot32 = pcx * acx + pcy * acy;
			var ratioA = (dot22 * dot31 - dot12 * dot32) * denom1;
			var ratioB = (dot11 * dot32 - dot12 * dot31) * denom1;
			var ratioC = 1.0 - ratioB - ratioA;
			if(ratioA >= 0 && ratioB >= 0 && ratioC >= 0) {
				var i = aA * ratioA + aB * ratioB + aC * ratioC | 0;
				if(i > 255) {
					i = 255;
				}
				if(i < 0) {
					i = 0;
				}
				var a = i;
				var i1 = rA * ratioA + rB * ratioB + rC * ratioC | 0;
				if(i1 > 255) {
					i1 = 255;
				}
				if(i1 < 0) {
					i1 = 0;
				}
				var r = i1;
				var i2 = gA * ratioA + gB * ratioB + gC * ratioC | 0;
				if(i2 > 255) {
					i2 = 255;
				}
				if(i2 < 0) {
					i2 = 0;
				}
				var g1 = i2;
				var i3 = bA * ratioA + bB * ratioB + bC * ratioC | 0;
				if(i3 > 255) {
					i3 = 255;
				}
				if(i3 < 0) {
					i3 = 0;
				}
				var b = i3;
				p.image[py * p.width + px | 0] = p.isLittle ? a << 24 | b << 16 | g1 << 8 | r : a << 24 | r << 16 | g1 << 8 | b;
			}
		}
	}
	var theta = 2 * Math.PI / 36 + 0.001;
	var lastX = 700 + 90 * Math.cos(36 * theta);
	var lastY = 800 + 200 * Math.sin(36 * theta);
	var _g = 0;
	var _g1 = 37;
	while(_g < _g1) {
		var i = _g++;
		var nextX = 700 + 90 * Math.cos(i * theta);
		var nextY = 800 + 200 * Math.sin(i * theta);
		var s0 = 800 * nextX - 700 * nextY;
		var sx = nextY - 800;
		var sy = 700 - nextX;
		var t0 = 700 * lastY - 800 * lastX;
		var tx = 800 - lastY;
		var ty = lastX - 700;
		var A = -lastY * nextX + 800 * (-lastX + nextX) + 700 * (lastY - nextY) + lastX * nextY;
		var x = 700 > lastX ? 700 > nextX ? new IntIterator(lastX > nextX ? nextX | 0 : lastX | 0,700) : new IntIterator(lastX | 0,nextX | 0) : lastX > nextX ? new IntIterator(700 > nextX ? nextX | 0 : 700,lastX | 0) : new IntIterator(700,nextX | 0);
		while(x.hasNext()) {
			var x1 = x.next();
			var sxx = sx * x1;
			var txx = tx * x1;
			var y = 800 > lastY ? 800 > nextY ? new IntIterator(lastY > nextY ? nextY | 0 : lastY | 0,800) : new IntIterator(lastY | 0,nextY | 0) : lastY > nextY ? new IntIterator(800 > nextY ? nextY | 0 : 800,lastY | 0) : new IntIterator(800,nextY | 0);
			while(y.hasNext()) {
				var y1 = y.next();
				var s = s0 + sxx + sy * y1;
				var t = t0 + txx + ty * y1;
				if(s <= 0 || t <= 0 ? false : s + t < A) {
					var this1 = -4608;
					var c = this1;
					var value;
					if(Pixelimage_isLittleEndian) {
						var a = c >> 24 & 255;
						var r = c >> 16 & 255;
						var g1 = c >> 8 & 255;
						var b = c & 255;
						value = a << 24 | b << 16 | g1 << 8 | r;
					} else {
						value = c;
					}
					p.image[y1 * p.width + x1 | 0] = value;
				}
			}
		}
		lastX = nextX;
		lastY = nextY;
	}
	var ctx = g.me;
	var dataimg = p.image;
	var data = new Uint8ClampedArray(new Uint8Array(dataimg.buffer).buffer);
	var imageData = new ImageData(data,p.width,p.height);
	ctx.putImageData(imageData,0,0);
};
Main.__name__ = true;
function Main_main() {
	new Main();
}
Math.__name__ = true;
var Pixelimage_$ = function(width,height,image) {
	this.width = width;
	this.height = height;
	this.image = image;
	this.isLittle = Pixelimage_isLittleEndian;
};
Pixelimage_$.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var htmlHelper_canvas_CanvasSetup = function() {
	this.divertTrace = new htmlHelper_tools_DivertTrace();
	var e = null;
	var this1;
	if(e == null) {
		var canvas = window.document.createElement("canvas");
		var dom = canvas;
		var style = dom.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = "0px";
		style.top = "0px";
		style.position = "absolute";
		this1 = canvas;
	} else {
		this1 = e;
	}
	var canvas = this1;
	canvas.width = 1024;
	canvas.height = 768;
	var dom = canvas;
	var style = dom.style;
	style.background = "black";
	window.document.body.appendChild(canvas);
	var this1 = new htmlHelper_canvas_CanvasPlus(canvas.getContext("2d",null),10,10);
	this.surface = this1;
	var factor = 4.;
	this.overSampleCanvas(canvas,this.surface.me,factor);
};
htmlHelper_canvas_CanvasSetup.__name__ = true;
htmlHelper_canvas_CanvasSetup.prototype = {
	overSampleCanvas: function(canvas,ctx,factor) {
		var width = canvas.width;
		var height = canvas.height;
		canvas.width = 0 | (width * factor | 0);
		canvas.height = 0 | (height * factor | 0);
		canvas.style.width = width + "px";
		canvas.style.height = height + "px";
		ctx.scale(factor,factor);
	}
};
var htmlHelper_canvas_CanvasPlus = function(me,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.y = 0.;
	this.x = 0.;
	this.x = x;
	this.y = y;
	this.me = me;
};
htmlHelper_canvas_CanvasPlus.__name__ = true;
var htmlHelper_tools_DivertTrace = function(left,d) {
	if(left == null) {
		left = 610;
	}
	this.textStyle1 = "<span style=\"font-size:14px; color:Grey\">";
	this.textStyle0 = "<span style=\"font-size:12px; color:Silver\">";
	this.traceString = "";
	this.divertTrace(left,d);
};
htmlHelper_tools_DivertTrace.__name__ = true;
htmlHelper_tools_DivertTrace.prototype = {
	divertTrace: function(left,d) {
		if(d == null) {
			var doc = window.document;
			this.traceDiv = doc.createElement("div");
			doc.body.appendChild(this.traceDiv);
			var dom = this.traceDiv;
			var style = dom.style;
			style.position = "absolute";
			style.top = "0px";
			style.left = (left == null ? "null" : "" + left) + "px";
			style.height = "500px";
			style.width = "500px";
			style.zIndex = "99";
			style.overflow = "auto";
		} else {
			this.traceDiv = d;
		}
		haxe_Log.trace = $bind(this,this.myTrace);
	}
	,myTrace: function(v,inf) {
		if(Std.string(v) == "") {
			return;
		}
		this.traceString += this.textStyle0 + inf.className + "." + inf.methodName + " ( " + (inf.lineNumber == null ? "null" : "" + inf.lineNumber) + " )" + "</span>" + "<br> - " + this.textStyle1 + Std.string(v) + "</span>" + "<br>";
		this.traceDiv.innerHTML = this.traceString;
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
var Pixelimage_isLittleEndian = (function($this) {
	var $r;
	var a8 = new Uint8Array(4);
	var a32 = new Uint32Array(a8.buffer)[0] = -3407855;
	$r = a8[0] != 255;
	return $r;
}(this));
Main_main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
